ColorEnable = 0;
            }
        } else {
            set_filtering( pHwDevExt, FALSE );
        }

    //
    // check the bounds for the frame rate
    //
        if (pHwDevExt->uiFramePerSecond != ulFrameRate)
        {
            pHwDevExt->uiFramePerSecond = ulFrameRate;
            pHwDevExt->IsRPSReady = FALSE;
        }

        if (pHwDevExt->IsRPSReady == FALSE)
        {
            dwAddr = (DWORD)pHwDevExt->pPhysRpsDMABuf.LowPart;
#if 0
            dwAddr = (dwAddr + 0x1FFF) & 0xFFFFE000;
#endif
            pHwDevExt->s_physDmaActiveFlag = dwAddr + 0X1860;

            if( pHwDevExt->dblBufflag ){
                    BertTriBuildNodes(pHwDevExt); // Add 97-04-08(Tue)
            }
            else{
                    BertBuildNodes(pHwDevExt);  // Add 97-04-08(Tue)
            }

            pHwDevExt->IsRPSReady = TRUE;
        }
#endif//TOSHIBA

    }

    // -------------------------------------------------------------------
    // Specifier FORMAT_AnalogVideo for KS_ANALOGVIDEOINFO
    // -------------------------------------------------------------------
    else if (IsEqualGUID (&pKSDataFormat->Specifier,
                &KSDATAFORMAT_SPECIFIER_ANALOGVIDEO)) {

            //
            // AnalogVideo DataRange == DataFormat!
            //

            // For now, don't even cache this
            // TODO - Save the requested format
            //

            PKS_DATARANGE_ANALOGVIDEO pDataFormatAnalogVideo =
                    (PKS_DATARANGE_ANALOGVIDEO) pSrb->CommandData.OpenFormat;
    }
    else {
        // Unknown format
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return FALSE;
    }

    return TRUE;
}

/*
** VideoReceiveDataPacket()
**
**   Receives Video data packet commands on the output streams
**
** Arguments:
**
**   pSrb - Stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT((ULONG)pHwDevExt);

    KdPrint(("TsbVcap: Receiving Stream Data    SRB %8x, %x\n", pSrb, pSrb->Command));

    //
    // Default to success
    //

    pSrb->Status = STATUS_SUCCESS;

    //
    // determine the type of packet.
    //

    switch (pSrb->Command){

    case SRB_READ_DATA:

        // Rule:
        // Only accept read requests when in either the Pause or Run
        // States.  If Stopped, immediately return the SRB.

        if (pStrmEx->KSState == KSSTATE_STOP) {

            CompleteStreamSRB (pSrb);

            break;
        }

#ifdef  TOSHIBA
        if (pHwDevExt->bVideoIn == FALSE) {

            CompleteStreamSRB (pSrb);

            break;
        }
#endif//TOSHIBA

        //
        // Put this read request on the pending queue
        //

        VideoQueueAddSRB (pSrb);

        break;

    default:

        //
        // invalid / unsupported command. Fail it as such
        //

        TRAP

        pSrb->Status = STATUS_NOT_IMPLEMENTED;

        CompleteStreamSRB (pSrb);

    }  // switch (pSrb->Command)
}


/*
** VideoReceiveCtrlPacket()
**
**   Receives packet commands that control the Video output streams
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    BOOL                    Busy;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT((ULONG)pHwDevExt);

    KdPrint(("TsbVcap: Receiving Stream Control SRB %8x, %x\n", pSrb, pSrb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    while (TRUE) {

        //
        // Default to success
        //

        pSrb->Status = STATUS_SUCCESS;

        //
        // determine the type of packet.
        //

        switch (pSrb->Command)
        {

        case SRB_PROPOSE_DATA_FORMAT:
            KdPrint(("TsbVcap: Receiving SRB_PROPOSE_DATA_FORMAT  SRB %8x, StreamNumber= %d\n", pSrb, StreamNumber));
            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
                KdPrint(("TsbVcap: SRB_PROPOSE_DATA_FORMAT FAILED\n"));
            }
            break;

        case SRB_SET_DATA_FORMAT:
            KdPrint(("TsbVcap: SRB_SET_DATA_FORMAT\n"));
            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
                KdPrint(("TsbVcap: SRB_SET_DATA_FORMAT FAILED\n"));
            } else {
                VideoSetFormat (pSrb);
                KdPrint(("TsbVcap: SRB_SET_DATA_FORMAT SUCCEEDED\n"));
            }

            break;

        case SRB_GET_DATA_FORMAT:
            KdPrint(("TsbVcap: SRB_GET_DATA_FORMAT\n"));
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
            break;


        case SRB_SET_STREAM_STATE:

            VideoSetState(pSrb);
            break;

        case SRB_GET_STREAM_STATE:

            VideoGetState(pSrb);
            break;

        case SRB_GET_STREAM_PROPERTY:

            VideoGetProperty(pSrb);
            break;

        case SRB_SET_STREAM_PROPERTY:

            VideoSetProperty(pSrb);
            break;

        case SRB_INDICATE_MASTER_CLOCK:

            //
            // Assigns a clock to a stream
            //

            VideoIndicateMasterClock (pSrb);

            break;

        default:

            //
            // invalid / unsupported command. Fail it as such
            //


            pSrb->Status = STATUS_NOT_IMPLEMENTED;
        }

        CompleteStreamSRB (pSrb);

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

        if (!Busy) {
            break;
        }
    }
}

#ifndef TOSHIBA
/*
** AnalogVideoReceiveDataPacket()
**
**   Receives AnalogVideo data packet commands on the input stream
**
** Arguments:
**
**   pSrb - Stream request block for the Analog Video stream.
**          This stream receives tuner control packets.
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
AnalogVideoReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PKSSTREAM_HEADER        pDataPacket = pSrb->CommandData.DataBufferArray;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT((ULONG)pHwDevExt);

    KdPrint(("TsbVcap: Receiving Tuner packet    SRB %8x, %x\n", pSrb, pSrb->Command));

    //
    // Default to success
    //

    pSrb->Status = STATUS_SUCCESS;

    //
    // determine the type of packet.
    //

    switch (pSrb->Command){

    case SRB_WRITE_DATA:

        //
        // This data packet contains the channel change information
        // passed on the AnalogVideoIn stream.  Devices which support
        // VBI data streams need to pass this info on their output pins.
        //

        if (pDataPacket->FrameExtent == sizeof (KS_TVTUNER_CHANGE_INFO)) {

            RtlCopyMemory(
                &pHwDevExt->TVTunerChangeInfo,
                pDataPacket->Data,
                sizeof (KS_TVTUNER_CHANGE_INFO));
        }

        CompleteStreamSRB (pSrb);

        break;

    default:

        //
        // invalid / unsupported command. Fail it as such
        //


        pSrb->Status = STATUS_NOT_IMPLEMENTED;

        CompleteStreamSRB (pSrb);

    }  // switch (pSrb->Command)
}


/*
** AnalogVideoReceiveCtrlPacket()
**
**   Receives packet commands that control the Analog Video stream
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
AnalogVideoReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    BOOL                    Busy;

    //
    // make sure we have a device extension and we are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT((ULONG)pHwDevExt);

    KdPrint(("TsbVcap: Receiving Analog Stream Control SRB %8x, %x\n", pSrb, pSrb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    while (TRUE) {
        //
        // Default to success
        //

        pSrb->Status = STATUS_SUCCESS;

        //
        // determine the type of packet.
        //

        switch (pSrb->Command)
        {

        case SRB_PROPOSE_DATA_FORMAT:
            KdPrint(("TsbVcap: Receiving SRB_PROPOSE_DATA_FORMAT  SRB %8x, StreamNumber= %d\n", pSrb, StreamNumber));

            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
            }
            break;

        case SRB_SET_STREAM_STATE:

            //
            // Don't use VideoSetState, since we don't want to start another
            // timer running
            //

            pStrmEx->KSState = pSrb->CommandData.StreamState;
            break;

        case SRB_GET_STREAM_STATE:

            VideoGetState(pSrb);
            break;

        case SRB_GET_STREAM_PROPERTY:

            VideoGetProperty(pSrb);
            break;

        case SRB_INDICATE_MASTER_CLOCK:

            //
            // Assigns a clock to a stream
            //

            VideoIndicateMasterClock (pSrb);

            break;

        default:

            //
            // invalid / unsupported command. Fail it as such
            //


            pSrb->Status = STATUS_NOT_IMPLEMENTED;
        }

        CompleteStreamSRB (pSrb);

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

        if (!Busy) {
            break;
        }
    }
}
#endif//TOSHIBA

/*
** CompleteStreamSRB ()
**
**   This routine is called when a packet is being completed.
**
** Arguments:
**
**   pSrb - pointer to the request packet to be completed
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
CompleteStreamSRB (
     IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    KdPrint(("TsbVcap: Completing Stream        SRB %8x\n", pSrb));

    StreamClassStreamNotification(
            StreamRequestComplete,
            pSrb->StreamObject,
            pSrb);
}


/*
** VideoGetProperty()
**
**    Routine to process video property requests
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoGetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    if (IsEqualGUID (&KSPROPSETID_Connection, &pSPD->Property->Set)) {
        VideoStreamGetConnectionProperty (pSrb);
    }
    else if (IsEqualGUID (&PROPSETID_VIDCAP_DROPPEDFRAMES, &pSPD->Property->Set)) {
        VideoStreamGetDroppedFramesProperty (pSrb);
    }
    else {
       pSrb->Status = STATUS_NOT_IMPLEMENTED;
    }
}

/*
** VideoSetProperty()
**
**    Routine to process video property requests
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoSetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
//    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    pSrb->Status = STATUS_NOT_IMPLEMENTED;
}


#ifdef  TOSHIBA
#ifdef  _FPS_COUNT_
VOID
STREAMAPI
VideoFpsOutputRoutine(
    IN PSTREAMEX pStrmEx
    )
{
    if (pStrmEx->KSState == KSSTATE_RUN) {
        DbgPrint("INT = %d FPS = %d\n", InterruptCounter, FrameCounter);
        InterruptCounter = 0;
        FrameCounter = 0;
    }
}

VOID
STREAMAPI
VideoTimerRoutine(
    PVOID Context
    )
{
    PSTREAMEX                   pStrmEx = ((PSTREAMEX)Context);
    PHW_DEVICE_EXTENSION        pHwDevExt = pStrmEx->pHwDevExt;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {
        return;
    }

    // Capture a frame if it's time and we have a buffer

    VideoFpsOutputRoutine(pStrmEx);

    // Schedule the next timer event
    // Make it run at 2x the requested capture rate (which is in 100nS units)

    StreamClassScheduleTimer (
            pStrmEx->pStreamObject,     // StreamObject
            pHwDevExt,                  // HwDeviceExtension
            (ULONG) 1000000,            // Microseconds
            VideoTimerRoutine,          // TimerRoutine
            pStrmEx);                   // Context
}
#endif//_FPS_COUNT_
#else //TOSHIBA
/*
** VideoTimerRoutine()
**
**    A timer has been created based on the requested capture interval.
**    This is the callback routine for this timer event.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
**    Context - pointer to the stream extension
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoTimerRoutine(
    PVOID Context
    )
{
    PSTREAMEX                   pStrmEx = ((PSTREAMEX)Context);
    PHW_DEVICE_EXTENSION        pHwDevExt = pStrmEx->pHwDevExt;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {
        return;
    }

    // Capture a frame if it's time and we have a buffer

    VideoCaptureRoutine(pStrmEx);

    // Schedule the next timer event
    // Make it run at 2x the requested capture rate (which is in 100nS units)

    StreamClassScheduleTimer (
            pStrmEx->pStreamObject,     // StreamObject
            pHwDevExt,                  // HwDeviceExtension
            (ULONG) (pStrmEx->pVideoInfoHeader->AvgTimePerFrame / 20), // Microseconds
            VideoTimerRoutine,          // TimerRoutine
            pStrmEx);                   // Context
}


/*
** VideoCaptureRoutine()
**
**    Routine to capture video frames based on a timer.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoCaptureRoutine(
    IN PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PKSSTREAM_HEADER        pDataPacket;
    PKS_FRAME_INFO          pFrameInfo;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {
        return;
    }


    // Find out what time it is, if we're using a clock

    if (pStrmEx->hMasterClock ) {
        HW_TIME_CONTEXT TimeContext;

        TimeContext.HwDeviceExtension = pHwDevExt;
        TimeContext.HwStreamObject = pStrmEx->pStreamObject;
        TimeContext.Function = TIME_GET_STREAM_TIME;

        StreamClassQueryMasterClockSync (
                pStrmEx->hMasterClock,
                &TimeContext);

        pStrmEx->QST_StreamTime = TimeContext.Time;
        pStrmEx->QST_Now = TimeContext.SystemTime;

        if (pStrmEx->QST_NextFrame == 0) {
            pStrmEx->QST_NextFrame = pStrmEx->QST_StreamTime + pStrmEx->pVideoInfoHeader->AvgTimePerFrame;
        }

#ifdef CREATE_A_FLURRY_OF_TIMING_SPEW
        KdPrint(("TsbVcap:    Time=%16lx\n", TimeContext.Time));
        KdPrint(("TsbVcap: SysTime=%16lx\n", TimeContext.SystemTime));
#endif
    }


    // Only capture in the RUN state

    if (pStrmEx->KSState == KSSTATE_RUN) {

        //
        // Determine if it is time to capture a frame based on
        // how much time has elapsed since capture started.
        // If there isn't a clock available, then capture immediately.
        //

        if ((!pStrmEx->hMasterClock) ||
             (pStrmEx->QST_StreamTime >= pStrmEx->QST_NextFrame)) {

            PHW_STREAM_REQUEST_BLOCK pSrb;

            // Increment the picture count (usually this is VSYNC count)

            pStrmEx->FrameInfo.PictureNumber++;

            //
            // Get the next queue SRB (if any)
            //

            pSrb = VideoQueueRemoveSRB (
                            pHwDevExt,
                            StreamNumber);

            if (pSrb) {

                pDataPacket = pSrb->CommandData.DataBufferArray;
                pFrameInfo = (PKS_FRAME_INFO) (pDataPacket + 1);

                //
                // Call the routine which synthesizes images
                //

                ImageSynth (pSrb,
                            pHwDevExt->VideoInputConnected,
                            pStrmEx->VideoControlMode & KS_VideoControlFlag_FlipHorizontal);

                // Set additional info fields about the data captured such as:
                //   Frames Captured
                //   Frames Dropped
                //   Field Polarity

                pStrmEx->FrameInfo.ExtendedHeaderSize = pFrameInfo->ExtendedHeaderSize;

                *pFrameInfo = pStrmEx->FrameInfo;

                // Init the flags to zero
                pDataPacket->OptionsFlags = 0;

                // Set the discontinuity flag if frames have been previously
                // dropped, and then reset our internal flag

                if (pStrmEx->fDiscontinuity) {
                    pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY;
                    pStrmEx->fDiscontinuity = FALSE;
                }

                //
                // Return the timestamp for the frame
                //
                pDataPacket->PresentationTime.Numerator = 1;
                pDataPacket->PresentationTime.Denominator = 1;
                pDataPacket->Duration = pStrmEx->pVideoInfoHeader->AvgTimePerFrame;

                //
                // if we have a master clock AND this is the capture stream
                //
                if (pStrmEx->hMasterClock && (StreamNumber == 0)) {

                    pDataPacket->PresentationTime.Time = pStrmEx->QST_StreamTime;
                    pDataPacket->OptionsFlags |=
                        KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                        KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
                }
                else {
                    //
                    // no clock or the preview stream, so just mark the time as unknown
                    //
                    pDataPacket->PresentationTime.Time = 0;
                    // clear the timestamp valid flags
                    pDataPacket->OptionsFlags &=
                        ~(KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                          KSSTREAM_HEADER_OPTIONSF_DURATIONVALID);
                }

                // Every frame we generate is a key frame (aka SplicePoint)
                // Delta frames (B or P) should not set this flag

                pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT;

                CompleteStreamSRB (pSrb);

            } // if we have an SRB

            else {

                //
                // No buffer was available when we should have captured one

                // Increment the counter which keeps track of
                // dropped frames

                pStrmEx->FrameInfo.DropCount++;

                // Set the (local) discontinuity flag
                // This will cause the next packet processed to have the
                //   KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY flag set.

                pStrmEx->fDiscontinuity = TRUE;

            }

            // Figure out when to capture the next frame
            pStrmEx->QST_NextFrame += pStrmEx->pVideoInfoHeader->AvgTimePerFrame;

        } // endif time to capture a frame
    } // endif we're running
}
#endif//TOSHIBA


/*
** VideoSetState()
**
**    Sets the current state for a given stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoSetState(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION        pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX                   pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    KSSTATE                     PreviousState;

    //
    // For each stream, the following states are used:
    //
    // Stop:    Absolute minimum resources are used.  No outstanding IRPs.
    // Acquire: KS only state that has no DirectShow correpondence
    //          Acquire needed resources.
    // Pause:   Getting ready to run.  Allocate needed resources so that
    //          the eventual transition to Run is as fast as possible.
    //          Read SRBs will be queued at either the Stream class
    //          or in your driver (depending on when you send "ReadyForNext")
    //          and whether you're using the Stream class for synchronization
    // Run:     Streaming.
    //
    // Moving to Stop to Run always transitions through Pause.
    //
    // But since a client app could crash unexpectedly, drivers should handle
    // the situation of having outstanding IRPs cancelled and open streams
    // being closed WHILE THEY ARE STREAMING!
    //
    // Note that it is quite possible to transition repeatedly between states:
    // Stop -> Pause -> Stop -> Pause -> Run -> Pause -> Run -> Pause -> Stop
    //

    //
    // Remember the state we're transitioning away from
    //

    PreviousState = pStrmEx->KSState;

    //
    // Set the new state
    //

    pStrmEx->KSState = pSrb->CommandData.StreamState;

    switch (pSrb->CommandData.StreamState)

    {
    case KSSTATE_STOP:

        //
        // The stream class will cancel all outstanding IRPs for us
        // (but only if it is maintaining the queue ie. using Stream Class synchronization)
        // Since TsbVcap is not using Stream Class synchronization, we must clear the queue here

#ifdef  TOSHIBA
        if (pHwDevExt->bVideoIn == TRUE) {
            // disable the RPS_INT and field interrupts
            BertInterruptEnable(pHwDevExt, FALSE);
            BertDMAEnable(pHwDevExt, FALSE);
            // wait for the current data xfer to complete
//          if (!BertIsCAPSTATReady(pHwDevExt)) return FALSE;
            pHwDevExt->bVideoIn = FALSE;
        }
#endif//TOSHIBA

        VideoQueueCancelAllSRBs (pStrmEx);

        KdPrint(("TsbVcap: STATE Stopped, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_ACQUIRE:

        //
        // This is a KS only state, that has no correspondence in DirectShow
        //
        KdPrint(("TsbVcap: STATE Acquire, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_PAUSE:

        //
        // On a transition to pause from acquire or stop, start our timer running.
        //

        if (PreviousState == KSSTATE_ACQUIRE || PreviousState == KSSTATE_STOP) {

            // Zero the frame counters
            pStrmEx->FrameInfo.PictureNumber = 0;
            pStrmEx->FrameInfo.DropCount = 0;
            pStrmEx->FrameInfo.dwFrameFlags = 0;

#ifdef  TOSHIBA
#ifdef  _FPS_COUNT_
            FrameCounter = 0;
            InterruptCounter = 0;
            StreamClassScheduleTimer (
                    pSrb->StreamObject,         // StreamObject
                    pHwDevExt,                  // HwDeviceExtension
                    (ULONG) 1000000,            // Microseconds
                    VideoTimerRoutine,          // TimerRoutine
                    pStrmEx);                   // Context
#endif//_FPS_COUNT_
            if (!BertIsLocked(pHwDevExt))
            {
                pHwDevExt->NeedHWInit = TRUE;
            }
            pHwDevExt->bVideoIn = TRUE;
            // enable the RPS_INT and field interrupts
            BertInterruptEnable(pHwDevExt, TRUE);
            BertDMAEnable(pHwDevExt, TRUE);
        } else {
            // disable the RPS_INT and field interrupts
            BertInterruptEnable(pHwDevExt, FALSE);
            BertDMAEnable(pHwDevExt, FALSE);
            // wait for the current data xfer to complete
//          if (!BertIsCAPSTATReady(pHwDevExt)) return FALSE;
            pHwDevExt->bVideoIn = FALSE;
#else //TOSHIBA
            // Setup the next timer callback
            // Make it run at 2x the requested capture rate (which is in 100nS units)

            StreamClassScheduleTimer (
                    pSrb->StreamObject,                             // StreamObject
                    pHwDevExt,                                      // HwDeviceExtension
                    (ULONG) (pStrmEx->pVideoInfoHeader->AvgTimePerFrame / 20), // Microseconds
                    VideoTimerRoutine,                              // TimerRoutine
                    pStrmEx);                                       // Context
#endif//TOSHIBA
        }
        KdPrint(("TsbVcap: STATE Pause, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_RUN:

        //
        // Begin Streaming.
        //

        // Reset the discontinuity flag

        pStrmEx->fDiscontinuity = FALSE;

        // Setting the NextFrame time to zero will cause the value to be
        // reset from the stream time

        pStrmEx->QST_NextFrame = 0;

#ifdef  TOSHIBA
        if (pHwDevExt->bVideoIn == FALSE) {
            if (!BertIsLocked(pHwDevExt))
            {
                pHwDevExt->NeedHWInit = TRUE;
            }
            pHwDevExt->bVideoIn = TRUE;
            // enable the RPS_INT and field interrupts
            BertInterruptEnable(pHwDevExt, TRUE);
            BertDMAEnable(pHwDevExt, TRUE);
        }
#endif//TOSHIBA

        KdPrint(("TsbVcap: STATE Run, Stream=%d\n", StreamNumber));
        break;

    } // end switch (pSrb->CommandData.StreamState)
}

/*
** VideoGetState()
**
**    Gets the current state of the requested stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoGetState(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;

    pSrb->CommandData.StreamState = pStrmEx->KSState;
    pSrb->ActualBytesTransferred = sizeof (KSSTATE);

    // A very odd rule:
    // When transitioning from stop to pause, DShow tries to preroll
    // the graph.  Capture sources can't preroll, and indicate this
    // by returning VFW_S_CANT_CUE in user mode.  To indicate this
    // condition from drivers, they must return STATUS_NO_DATA_DETECTED

    if (pStrmEx->KSState == KSSTATE_PAUSE) {
       pSrb->Status = STATUS_NO_DATA_DETECTED;
    }
}


/*
** VideoStreamGetConnectionProperty()
**
**    Gets the properties for a stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoStreamGetConnectionProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    // This property describes the allocator requirements for the stream
    case KSPROPERTY_CONNECTION_ALLOCATORFRAMING:
        if (pStrmEx->pVideoInfoHeader) {
            PKSALLOCATOR_FRAMING Framing =
                (PKSALLOCATOR_FRAMING) pSPD->PropertyInfo;
            Framing->RequirementsFlags =
                KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY |
                KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER |
                KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY;
            Framing->PoolType = PagedPool;
            Framing->Frames = 1;
            Framing->FrameSize = pStrmEx->pVideoInfoHeader->bmiHeader.biSizeImage;
            Framing->FileAlignment = 0; // FILE_LONG_ALIGNMENT???;
            Framing->Reserved = 0;
            pSrb->ActualBytesTransferred = sizeof (KSALLOCATOR_FRAMING);
        }
        else {
            pSrb->Status = STATUS_INVALID_PARAMETER;
        }
        break;

    default:
        break;
    }
}

/*
** VideoStreamGetDroppedFramesProperty()
**
**    Gets dynamic information about the progress of the capture process.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoStreamGetDroppedFramesProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_DROPPEDFRAMES_CURRENT:
        {
            PKSPROPERTY_DROPPEDFRAMES_CURRENT_S pDroppedFrames =
                (PKSPROPERTY_DROPPEDFRAMES_CURRENT_S) pSPD->PropertyInfo;

            pDroppedFrames->PictureNumber = pStrmEx->FrameInfo.PictureNumber;
            pDroppedFrames->DropCount = pStrmEx->FrameInfo.DropCount;
            pDroppedFrames->AverageFrameSize = pStrmEx->pVideoInfoHeader->bmiHeader.biSizeImage;

            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_DROPPEDFRAMES_CURRENT_S);
        }
        break;

    default:
        break;
    }
}

//==========================================================================;
//                   Clock Handling Routines
//==========================================================================;


/*
** VideoIndicateMasterClock ()
**
**    If this stream is not being used as the master clock, this function
**      is used to provide us with a handle to the clock to use when
**      requesting the current stream time.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoIndicateMasterClock(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;

    pStrmEx->hMasterClock = pSrb->CommandData.MasterClockHandle;
}

/*
** GetSystemTime ()
**
**    Returns the system time in 100 nS units
**
** Arguments:
**
** Returns:
**
** Side Effects:  none
*/

ULONGLONG
STREAMAPI
VideoGetSystemTime(
    )
{
    ULONGLONG ticks;
    ULONGLONG rate;

    ticks = (ULONGLONG)KeQueryPerformanceCounter((PLARGE_INTEGER)&rate).QuadPart;

    //
    // convert from ticks to 100ns clock
    //

    ticks = (ticks & 0xFFFFFFFF00000000) / rate * 10000000 +
            (ticks & 0x00000000FFFFFFFF) * 10000000 / rate;

    return(ticks);

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\tecra750\image.h ===
//
//              TOSHIBA CORPORATION PROPRIETARY INFORMATION
//     This software is supplied under the terms of a license agreement or
//     nondisclosure agreement with TOSHIBA Corporation and may not be copied
//     or disclosed except in accordance with the terms of that agreement.
//           Copyright (c) 1997 TOSHIBA Corporation. All Rights Reserved.
//
//  Workfile: IMAGE.H
//
//  Purpose:
//
//  Contents:
//

#ifndef _IMAGE_H_
#define _IMAGE_H_


#define IMAGE_VFL				0x00010000	// Vertical Filter (Use P_FILT_REG)

#define IMAGE_FL_0				0			// Horizontal Filter (Use P_FILT_REG)
#define IMAGE_FL_1				1			// Horizontal Filter (Use P_FILT_REG)
#define IMAGE_FL_2				2			// Horizontal Filter (Use P_FILT_REG)
#define IMAGE_FL_3				3			// Horizontal Filter (Use P_FILT_REG)
#define IMAGE_FL_4				4			// Horizontal Filter (Use P_FILT_REG)

#define IMAGE_CHGCOL_AVAIL		0x00010000	// Change Color (Use P_LUMI_REG)
#define IMAGE_CHGCOL_NOTAVAIL	0x00000000	// Not Change Color (Use P_LUMI_REG)


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capdebug.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;


#ifndef __CAPDEBUG_H
#define __CAPDEBUG_H

#if DBG

// Debug Logging
// 0 = Errors only
// 1 = Info, stream state changes, stream open close
// 2 = Verbose trace

extern ULONG gDebugLevel;

# define DbgKdPrint(x)  KdPrint(x)
# define DbgLogError(x)  do { if( (gDebugLevel > 0) || (gDebugLevel == 0))	 KdPrint(x); } while (0)
# define DbgLogInfo(x)   do { if( gDebugLevel >= 1)	 KdPrint(x); } while (0)
# define DbgLogTrace(x)  do { if( gDebugLevel >= 2)  KdPrint(x); } while (0)

# ifdef _X86_
#  define TRAP   __asm { int 3 }
# else //_X86_
#  define TRAP   KdBreakPoint()
# endif //_X86_

#else //DBG

# define DbgKdPrint(x)
# define DbgLogError(x)
# define DbgLogInfo(x)
# define DbgLogTrace(x)

# define TRAP

#endif //DBG

#endif // #ifndef __CAPDEBUG_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capirq.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"

/*
** HwInterrupt()
**
**   Routine is called when an interrupt at the IRQ level specified by the
**   ConfigInfo structure passed to the HwInitialize routine is received.
**
**   Note: IRQs may be shared, so the device should ensure the IRQ received
**         was expected
**
** Arguments:
**
**  pHwDevEx - the device extension for the hardware interrupt
**
** Returns:
**
** Side Effects:  none
*/

BOOLEAN 
HwInterrupt( 
    IN PHW_DEVICE_EXTENSION  pHwDevEx
    )
{

    BOOLEAN fMyIRQ = FALSE; 

    if (pHwDevEx->IRQExpected)
    {
        pHwDevEx->IRQExpected = FALSE;

        //
        // call the routine to handle the IRQ here
        //

        fMyIRQ = TRUE;
    }


    //
    // returning FALSE indicates that this was not an IRQ for this device, and
    // the IRQ dispatcher will pass the IRQ down the chain to the next handler
    // for this IRQ level
    //

    return(fMyIRQ);
}


=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\tecra750\mediums.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

//
// This file defines interconnections between components via Mediums
//

#ifdef DEFINE_MEDIUMS
    #define MEDIUM_DECL static
#else
    #define MEDIUM_DECL extern
#endif

/*  -----------------------------------------------------------

    Topology of all devices:

                            PinDir  FilterPin#    M_GUID#
    TVTuner
        TVTunerVideo        out         0            0
        TVTunerAudio        out         1            1
        TVTunerRadioAudio   out         2            2
    TVAudio
        TVTunerAudio        in          0            1
        TVAudio             out         1            3
    Crossbar
        TVTunerVideo        in          0            0
        TVAudio             in          5            3
        TVTunerRadioAudio   in          6            2
        AnalogVideoIn       out         9            4
        AudioOut            out         10           NULL
    Capture
        AnalogVideoIn       in          0            4


All other pins are marked as promiscuous connections via GUID_NULL
------------------------------------------------------------------ */

// Define the GUIDs which will be used to create the Mediums
#define M_GUID0 0x8dad65e0, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID1 0x8dad65e1, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID2 0x8dad65e2, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID3 0x8dad65e3, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID4 0x8dad65e4, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID5 0x8dad65e5, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_NOCONNECT  0x8dad65e6, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_NOCONNECT2 0x8dad65e7, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba

// Note: To allow multiple instances of the same piece of hardware,
// set the first ULONG after the GUID in the Medium to a unique value.

#ifdef  TOSHIBA
// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM CaptureMediums[] = {
    {STATIC_GUID_NULL,  0, 0},  // Pin 0  Capture
};

MEDIUM_DECL BOOL CapturePinDirection [] = {
    TRUE,                       // Output Pin 0
};
#else //TOSHIBA
// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM TVTunerMediums[] = {
    {M_GUID0,           0, 0},  // Pin 0
    {M_GUID1,           0, 0},  // Pin 1
    {M_GUID2,           0, 0},  // Pin 2
};

MEDIUM_DECL BOOL TVTunerPinDirection [] = {
    TRUE,                       // Output Pin 0
    TRUE,                       // Output Pin 1
    TRUE,                       // Output Pin 2
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM TVAudioMediums[] = {
    {M_GUID1,           0, 0},  // Pin 0
    {M_GUID3,           0, 0},  // Pin 1
};

MEDIUM_DECL BOOL TVAudioPinDirection [] = {
    FALSE,                      // Input  Pin 0
    TRUE,                       // Output Pin 1
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM CrossbarMediums[] = {
    {M_GUID0,           0, 0},  // Input  Pin 0, KS_PhysConn_Video_Tuner,
    {M_NOCONNECT,       0, 0},  // Input  Pin 1  KS_PhysConn_Video_Composite,
    {M_NOCONNECT,       0, 0},  // Input  Pin 2  KS_PhysConn_Video_SVideo,
    {M_NOCONNECT,       0, 0},  // Input  Pin 3  KS_PhysConn_Video_Tuner,
    {M_NOCONNECT,       0, 0},  // Input  Pin 4  KS_PhysConn_Video_Composite,
    {M_GUID3,           0, 0},  // Input  Pin 5  KS_PhysConn_Audio_Tuner,
    {M_GUID2,           0, 0},  // Input  Pin 6  KS_PhysConn_Audio_Line,
    {M_NOCONNECT,       0, 0},  // Input  Pin 7  KS_PhysConn_Audio_Tuner,
    {M_NOCONNECT,       0, 0},  // Input  Pin 8  KS_PhysConn_Audio_Line,
    {M_GUID4,           0, 0},  // Output Pin 9  KS_PhysConn_Video_VideoDecoder,
    {STATIC_GUID_NULL,  0, 0},  // Output Pin 10 KS_PhysConn_Audio_AudioDecoder,
};

MEDIUM_DECL BOOL CrossbarPinDirection [] = {
    FALSE,                      // Input  Pin 0, KS_PhysConn_Video_Tuner,
    FALSE,                      // Input  Pin 1  KS_PhysConn_Video_Composite,
    FALSE,                      // Input  Pin 2  KS_PhysConn_Video_SVideo,
    FALSE,                      // Input  Pin 3  KS_PhysConn_Video_Tuner,
    FALSE,                      // Input  Pin 4  KS_PhysConn_Video_Composite,
    FALSE,                      // Input  Pin 5  KS_PhysConn_Audio_Tuner,
    FALSE,                      // Input  Pin 6  KS_PhysConn_Audio_Line,
    FALSE,                      // Input  Pin 7  KS_PhysConn_Audio_Tuner,
    FALSE,                      // Input  Pin 8  KS_PhysConn_Audio_Line,
    TRUE,                       // Output Pin 9  KS_PhysConn_Video_VideoDecoder,
    TRUE,                       // Output Pin 10 KS_PhysConn_Audio_AudioDecoder,
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM CaptureMediums[] = {
    {STATIC_GUID_NULL,  0, 0},  // Pin 0  Capture
    {STATIC_GUID_NULL,  0, 0},  // Pin 1  Preview
    {M_GUID4,           0, 0},  // Pin 2  Analog Video In
};

MEDIUM_DECL BOOL CapturePinDirection [] = {
    TRUE,                       // Output Pin 0
    TRUE,                       // Output Pin 1
    FALSE,                      // Input  Pin 2
};
#endif//TOSHIBA



=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capprop.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

// ------------------------------------------------------------------------
// Property set for the Video Crossbar
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(XBarProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CROSSBAR_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CROSSBAR_CAPS_S),     // MinProperty
        sizeof(KSPROPERTY_CROSSBAR_CAPS_S),     // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CROSSBAR_CAN_ROUTE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CROSSBAR_ROUTE_S),    // MinProperty
        sizeof(KSPROPERTY_CROSSBAR_ROUTE_S),    // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CROSSBAR_ROUTE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CROSSBAR_ROUTE_S),    // MinProperty
        sizeof(KSPROPERTY_CROSSBAR_ROUTE_S),    // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CROSSBAR_PININFO,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CROSSBAR_PININFO_S),  // MinProperty
        sizeof(KSPROPERTY_CROSSBAR_PININFO_S),  // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

};

// ------------------------------------------------------------------------
// Property set for the TVTuner
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(TVTunerProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_CAPS_S),        // MinProperty
        sizeof(KSPROPERTY_TUNER_CAPS_S),        // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_MODE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_MODE_S),        // MinProperty
        sizeof(KSPROPERTY_TUNER_MODE_S),        // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_MODE_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_MODE_CAPS_S),   // MinProperty
        sizeof(KSPROPERTY_TUNER_MODE_CAPS_S),   // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_STANDARD,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_STANDARD_S),    // MinProperty
        sizeof(KSPROPERTY_TUNER_STANDARD_S),    // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_FREQUENCY,
        FALSE,                                  // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_FREQUENCY_S),   // MinProperty
        sizeof(KSPROPERTY_TUNER_FREQUENCY_S),   // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_INPUT,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_INPUT_S),       // MinProperty
        sizeof(KSPROPERTY_TUNER_INPUT_S),       // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_STATUS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_STATUS_S),      // MinProperty
        sizeof(KSPROPERTY_TUNER_STATUS_S),      // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TUNER_IF_MEDIUM,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TUNER_IF_MEDIUM_S),   // MinProperty
        sizeof(KSPROPERTY_TUNER_IF_MEDIUM_S),   // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    )
};


// ------------------------------------------------------------------------
// Property set for the TVAudio
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(TVAudioProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TVAUDIO_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TVAUDIO_CAPS_S),      // MinProperty
        sizeof(KSPROPERTY_TVAUDIO_CAPS_S),      // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TVAUDIO_MODE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TVAUDIO_S),           // MinProperty
        sizeof(KSPROPERTY_TVAUDIO_S),           // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_TVAUDIO_S),           // MinProperty
        sizeof(KSPROPERTY_TVAUDIO_S),           // MinData
        FALSE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for VideoProcAmp
// ------------------------------------------------------------------------

//
// First define all of the ranges and stepping values
//

// ------------------------------------------------------------------------
static KSPROPERTY_STEPPING_LONG BrightnessRangeAndStep [] = 
{
    {
        10000 / 10,         // SteppingDelta (range / steps)
        0,                  // Reserved
        0,                  // Minimum in (IRE * 100) units
        10000               // Maximum in (IRE * 100) units
    }
};

static const ULONG BrightnessDefault = 5000;

static KSPROPERTY_MEMBERSLIST BrightnessMembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_RANGES,
            sizeof (BrightnessRangeAndStep),
            SIZEOF_ARRAY (BrightnessRangeAndStep),
            0
        },
        (PVOID) BrightnessRangeAndStep,
     },
     {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (BrightnessDefault),
            1, 
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &BrightnessDefault,
    }    
};

static KSPROPERTY_VALUES BrightnessValues =
{
    {
        STATICGUIDOF (KSPROPTYPESETID_General),
        VT_I4,
        0
    },
    SIZEOF_ARRAY (BrightnessMembersList),
    BrightnessMembersList
};

// ------------------------------------------------------------------------
static KSPROPERTY_STEPPING_LONG ContrastRangeAndStep [] = 
{
    {
        10000 / 256,        // SteppingDelta (range / steps)
        0,                  // Reserved
        0,                  // Minimum in (gain * 100) units
        10000               // Maximum in (gain * 100) units
    }
};

static const ULONG ContrastDefault = 5000;

static KSPROPERTY_MEMBERSLIST ContrastMembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_RANGES,
            sizeof (ContrastRangeAndStep),
            SIZEOF_ARRAY (ContrastRangeAndStep),
            0
        },
        (PVOID) ContrastRangeAndStep
     },
     {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (ContrastDefault),
            1, 
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &ContrastDefault,
    }    
};

static KSPROPERTY_VALUES ContrastValues =
{
    {
        STATICGUIDOF (KSPROPTYPESETID_General),
        VT_I4,
        0
    },
    SIZEOF_ARRAY (ContrastMembersList),
    ContrastMembersList
};

// ------------------------------------------------------------------------
static KSPROPERTY_STEPPING_LONG ColorEnableRangeAndStep [] = 
{
    {
        1,                  // SteppingDelta (this is a BOOL)
        0,                  // Reserved
        0,                  // Minimum 
        1                   // Maximum 
    }
};

static const ULONG ColorEnableDefault = 1;

static KSPROPERTY_MEMBERSLIST ColorEnableMembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_RANGES,
            sizeof (ColorEnableRangeAndStep),
            SIZEOF_ARRAY (ColorEnableRangeAndStep),
            0
        },
        (PVOID) ColorEnableRangeAndStep
     },
     {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (ColorEnableDefault),
            1, 
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &ColorEnableDefault,
    }    
};

static KSPROPERTY_VALUES ColorEnableValues =
{
    {
        STATICGUIDOF (KSPROPTYPESETID_General),
        VT_I4,
        0
    },
    SIZEOF_ARRAY (ColorEnableMembersList),
    ColorEnableMembersList
};

// ------------------------------------------------------------------------
DEFINE_KSPROPERTY_TABLE(VideoProcAmpProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOPROCAMP_CONTRAST,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        &ContrastValues,                        // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        &BrightnessValues,                      // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOPROCAMP_COLORENABLE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        &ColorEnableValues,                     // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for CameraControl
// ------------------------------------------------------------------------

//
// First define all of the ranges and stepping values
//

// ------------------------------------------------------------------------
static KSPROPERTY_STEPPING_LONG ZoomRangeAndStep [] = 
{
    {
        10000 / 10,         // SteppingDelta (range / steps)
        0,                  // Reserved
        0,                  // Minimum 
        10000               // Maximum 
    }
};

static const ULONG ZoomDefault = 5000;

static KSPROPERTY_MEMBERSLIST ZoomMembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_RANGES,
            sizeof (ZoomRangeAndStep),
            SIZEOF_ARRAY (ZoomRangeAndStep),
            0
        },
        (PVOID) ZoomRangeAndStep,
     },
     {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (ZoomDefault),
            1, 
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &ZoomDefault,
    }    
};

static KSPROPERTY_VALUES ZoomValues =
{
    {
        STATICGUIDOF (KSPROPTYPESETID_General),
        VT_I4,
        0
    },
    SIZEOF_ARRAY (ZoomMembersList),
    ZoomMembersList
};

// ------------------------------------------------------------------------
static KSPROPERTY_STEPPING_LONG FocusRangeAndStep [] = 
{
    {
        10000 / 256,        // SteppingDelta (range / steps)
        0,                  // Reserved
        0,                  // Minimum 
        10000               // Maximum 
    }
};

static const ULONG FocusDefault = 5000;

static KSPROPERTY_MEMBERSLIST FocusMembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_RANGES,
            sizeof (FocusRangeAndStep),
            SIZEOF_ARRAY (FocusRangeAndStep),
            0
        },
        (PVOID) FocusRangeAndStep
     },
     {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (FocusDefault),
            1, 
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &FocusDefault,
    }    
};

static KSPROPERTY_VALUES FocusValues =
{
    {
        STATICGUIDOF (KSPROPTYPESETID_General),
        VT_I4,
        0
    },
    SIZEOF_ARRAY (FocusMembersList),
    FocusMembersList
};

// ------------------------------------------------------------------------
DEFINE_KSPROPERTY_TABLE(CameraControlProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CAMERACONTROL_ZOOM,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CAMERACONTROL_S),     // MinProperty
        sizeof(KSPROPERTY_CAMERACONTROL_S),     // MinData
        TRUE,                                   // SetSupported or Handler
        &ZoomValues,                            // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CAMERACONTROL_FOCUS,   
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_CAMERACONTROL_S),     // MinProperty
        sizeof(KSPROPERTY_CAMERACONTROL_S),     // MinData
        TRUE,                                   // SetSupported or Handler
        &FocusValues,                           // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for AnalogVideoDecoder
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(AnalogVideoDecoder)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEODECODER_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEODECODER_CAPS_S), // MinProperty
        sizeof(KSPROPERTY_VIDEODECODER_CAPS_S), // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEODECODER_STANDARD,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEODECODER_STATUS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEODECODER_STATUS_S),// MinProperty
        sizeof(KSPROPERTY_VIDEODECODER_STATUS_S),// MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEODECODER_VCR_TIMING,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEODECODER_S),      // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for VideoControl
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VideoControlProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S), // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S), // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_FRAME_RATES,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY),                     // MinProperty
        sizeof(KSMULTIPLE_ITEM),                // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_MODE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S), // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S), // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for VideoCompression
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VideoStreamCompressionProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCOMPRESSION_GETINFO,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S),// MinProperty
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S),// MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinProperty
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinProperty
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCOMPRESSION_QUALITY,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinProperty
        sizeof(KSPROPERTY_VIDEOCOMPRESSION_S),  // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Property set for VBI
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VBIProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VBICAP_PROPERTIES_PROTECTION,
        TRUE,                                   // GetSupported or Handler
        sizeof(VBICAP_PROPERTIES_PROTECTION_S), // MinProperty
        sizeof(VBICAP_PROPERTIES_PROTECTION_S), // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

// ------------------------------------------------------------------------
// Array of all of the property sets supported by the adapter
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_SET_TABLE(AdapterPropertyTable)
{
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_CROSSBAR,             // Set
        SIZEOF_ARRAY(XBarProperties),           // PropertiesCount
        XBarProperties,                         // PropertyItem
        0,                                      // FastIoCount
        NULL                                    // FastIoTable
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_TUNER,
        SIZEOF_ARRAY(TVTunerProperties),
        TVTunerProperties,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_TVAUDIO,
        SIZEOF_ARRAY(TVAudioProperties),
        TVAudioProperties,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_VIDEOPROCAMP,
        SIZEOF_ARRAY(VideoProcAmpProperties),
        VideoProcAmpProperties,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_CAMERACONTROL,
        SIZEOF_ARRAY(CameraControlProperties),
        CameraControlProperties,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_VIDEOCONTROL,
        SIZEOF_ARRAY(VideoControlProperties),
        VideoControlProperties,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_VIDEODECODER,
        SIZEOF_ARRAY(AnalogVideoDecoder),
        AnalogVideoDecoder,
        0, 
        NULL,
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_VIDEOCOMPRESSION,             // Set
        SIZEOF_ARRAY(VideoStreamCompressionProperties), // PropertiesCount
        VideoStreamCompressionProperties,               // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &KSPROPSETID_VBICAP_PROPERTIES,                 // Set
        SIZEOF_ARRAY(VBIProperties),                    // PropertiesCount
        VBIProperties,                                  // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),

};

#define NUMBER_OF_ADAPTER_PROPERTY_SETS (SIZEOF_ARRAY (AdapterPropertyTable))
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capstrm.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#ifndef __CAPSTRM_H__
#define __CAPSTRM_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


KSPIN_MEDIUM StandardMedium = {
    STATIC_KSMEDIUMSETID_Standard,
    0, 0
};

// ------------------------------------------------------------------------
// Property sets for all video capture streams
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VideoStreamConnectionProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY),                     // MinProperty
        sizeof(KSALLOCATOR_FRAMING),            // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};

DEFINE_KSPROPERTY_TABLE(VideoStreamDroppedFramesProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_DROPPEDFRAMES_CURRENT,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinProperty
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};


// ------------------------------------------------------------------------
// Array of all of the property sets supported by video streams
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_SET_TABLE(VideoStreamProperties)
{
    DEFINE_KSPROPERTY_SET
    ( 
        &KSPROPSETID_Connection,                        // Set
        SIZEOF_ARRAY(VideoStreamConnectionProperties),  // PropertiesCount
        VideoStreamConnectionProperties,                // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_DROPPEDFRAMES,                // Set
        SIZEOF_ARRAY(VideoStreamDroppedFramesProperties),  // PropertiesCount
        VideoStreamDroppedFramesProperties,             // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
};

#define NUMBER_VIDEO_STREAM_PROPERTIES (SIZEOF_ARRAY(VideoStreamProperties))

//---------------------------------------------------------------------------
// All of the video and vbi data formats we might use
//---------------------------------------------------------------------------

#define D_X 320
#define D_Y 240

static  KS_DATARANGE_VIDEO StreamFormatRGB24Bpp_Capture = 
{
    // KSDATARANGE
    {   
        sizeof (KS_DATARANGE_VIDEO),            // FormatSize
        0,                                      // Flags
        D_X * D_Y * 3,                          // SampleSize
        0,                                      // Reserved

        STATIC_KSDATAFORMAT_TYPE_VIDEO,         // aka. MEDIATYPE_Video
        0xe436eb7d, 0x524f, 0x11ce, 0x9f, 0x53, 0x00, 0x20, 0xaf, 0x0b, 0xa7, 0x70, //MEDIASUBTYPE_RGB24,
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO // aka. FORMAT_VideoInfo
    },

    TRUE,               // BOOL,  bFixedSizeSamples (all samples same size?)
    TRUE,               // BOOL,  bTemporalCompression (all I frames?)
    0,                  // Reserved (was StreamDescriptionFlags)
    0,                  // Reserved (was MemoryAllocationFlags   (KS_VIDEO_ALLOC_*))

    // _KS_VIDEO_STREAM_CONFIG_CAPS  
    {
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO, // GUID
        KS_AnalogVideo_NTSC_M |
        KS_AnalogVideo_PAL_B,                    // AnalogVideoStandard
        720,480,        // InputSize, (the inherent size of the incoming signal
                    //             with every digitized pixel unique)
        160,120,        // MinCroppingSize, smallest rcSrc cropping rect allowed
        720,480,        // MaxCroppingSize, largest  rcSrc cropping rect allowed
        8,              // CropGranularityX, granularity of cropping size
        1,              // CropGranularityY
        8,              // CropAlignX, alignment of cropping rect 
        1,              // CropAlignY;
        160, 120,       // MinOutputSize, smallest bitmap stream can produce
        720, 480,       // MaxOutputSize, largest  bitmap stream can produce
        8,              // OutputGranularityX, granularity of output bitmap size
        1,              // OutputGranularityY;
        0,              // StretchTapsX  (0 no stretch, 1 pix dup, 2 interp...)
        0,              // StretchTapsY
        0,              // ShrinkTapsX 
        0,              // ShrinkTapsY 
        333667,         // MinFrameInterval, 100 nS units
        640000000,      // MaxFrameInterval, 100 nS units
        8 * 3 * 30 * 160 * 120,  // MinBitsPerSecond;
        8 * 3 * 30 * 720 * 480   // MaxBitsPerSecond;
    }, 
        
    // KS_VIDEOINFOHEADER (default format)
    {
        0,0,0,0,                            // RECT  rcSource; 
        0,0,0,0,                            // RECT  rcTarget; 
        D_X * D_Y * 3 * 30,                 // DWORD dwBitRate;
        0L,                                 // DWORD dwBitErrorRate; 
        333667,                             // REFERENCE_TIME  AvgTimePerFrame;   

        sizeof (KS_BITMAPINFOHEADER),       // DWORD biSize;
        D_X,                                // LONG  biWidth;
        D_Y,                                // LONG  biHeight;
        1,                                  // WORD  biPlanes;
        24,                                 // WORD  biBitCount;
        KS_BI_RGB,                          // DWORD biCompression;
        D_X * D_Y * 3,                      // DWORD biSizeImage;
        0,                                  // LONG  biXPelsPerMeter;
        0,                                  // LONG  biYPelsPerMeter;
        0,                                  // DWORD biClrUsed;
        0                                   // DWORD biClrImportant;
    }
}; 

#undef D_X
#undef D_Y

#define D_X 320
#define D_Y 240


static  KS_DATARANGE_VIDEO StreamFormatUYU2_Capture = 
{
    // KSDATARANGE
    {   
        sizeof (KS_DATARANGE_VIDEO),            // FormatSize
        0,                                      // Flags
        D_X * D_Y * 2,                          // SampleSize
        0,                                      // Reserved

        STATIC_KSDATAFORMAT_TYPE_VIDEO,         // aka. MEDIATYPE_Video
        0x59565955, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71, //MEDIASUBTYPE_UYVY,
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO // aka. FORMAT_VideoInfo
    },

    TRUE,               // BOOL,  bFixedSizeSamples (all samples same size?)
    TRUE,               // BOOL,  bTemporalCompression (all I frames?)
    0,                  // Reserved (was StreamDescriptionFlags)
    0,                  // Reserved (was MemoryAllocationFlags   (KS_VIDEO_ALLOC_*))

    // _KS_VIDEO_STREAM_CONFIG_CAPS  
    {
        STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO, // GUID
        KS_AnalogVideo_NTSC_M |
        KS_AnalogVideo_PAL_B,                    // AnalogVideoStandard
        720,480,        // InputSize, (the inherent size of the incoming signal
                    //             with every digitized pixel unique)
        160,120,        // MinCroppingSize, smallest rcSrc cropping rect allowed
        720,480,        // MaxCroppingSize, largest  rcSrc cropping rect allowed
        8,              // CropGranularityX, granularity of cropping size
        1,              // CropGranularityY
        8,              // CropAlignX, alignment of cropping rect 
        1,              // CropAlignY;
        160, 120,       // MinOutputSize, smallest bitmap stream can produce
        720, 480,       // MaxOutputSize, largest  bitmap stream can produce
        8,              // OutputGranularityX, granularity of output bitmap size
        1,              // OutputGranularityY;
        0,              // StretchTapsX  (0 no stretch, 1 pix dup, 2 interp...)
        0,              // StretchTapsY
        0,              // ShrinkTapsX 
        0,              // ShrinkTapsY 
        333667,         // MinFrameInterval, 100 nS units
        640000000,      // MaxFrameInterval, 100 nS units
        8 * 2 * 30 * 160 * 120,  // MinBitsPerSecond;
        8 * 2 * 30 * 720 * 480   // MaxBitsPerSecond;
    }, 
        
    // KS_VIDEOINFOHEADER (default format)
    {
        0,0,0,0,                            // RECT  rcSource; 
        0,0,0,0,                            // RECT  rcTarget; 
        D_X * D_Y * 2 * 30,                 // DWORD dwBitRate;
        0L,                                 // DWORD dwBitErrorRate; 
        333667,                             // REFERENCE_TIME  AvgTimePerFrame;   

        sizeof (KS_BITMAPINFOHEADER),       // DWORD biSize;
        D_X,                                // LONG  biWidth;
        D_Y,                                // LONG  biHeight;
        1,                                  // WORD  biPlanes;
        16,                                 // WORD  biBitCount;
        FOURCC_YUV422,                      // DWORD biCompression;
        D_X * D_Y * 2,                      // DWORD biSizeImage;
        0,                                  // LONG  biXPelsPerMeter;
        0,                                  // LONG  biYPelsPerMeter;
        0,                                  // DWORD biClrUsed;
        0                                   // DWORD biClrImportant;
    }
}; 
    
#undef D_X
#undef D_Y

static  KS_DATARANGE_ANALOGVIDEO StreamFormatAnalogVideo = 
{
    // KS_DATARANGE_ANALOGVIDEO
    {   
        sizeof (KS_DATARANGE_ANALOGVIDEO),      // FormatSize
        0,                                      // Flags
        sizeof (KS_TVTUNER_CHANGE_INFO),        // SampleSize
        0,                                      // Reserved

        STATIC_KSDATAFORMAT_TYPE_ANALOGVIDEO,   // aka MEDIATYPE_AnalogVideo
        STATIC_KSDATAFORMAT_SUBTYPE_NONE,
        STATIC_KSDATAFORMAT_SPECIFIER_ANALOGVIDEO, // aka FORMAT_AnalogVideo
    },
    // KS_ANALOGVIDEOINFO
    {
        0, 0, 720, 480,         // rcSource;                
        0, 0, 720, 480,         // rcTarget;        
        720,                    // dwActiveWidth;   
        480,                    // dwActiveHeight;  
        0,                      // REFERENCE_TIME  AvgTimePerFrame; 
    }
};

#define VBIStride (768*2)
#define VBISamples (768*2)
#define VBIStart   10
#define VBIEnd     21
#define VBILines (((VBIEnd)-(VBIStart))+1)
KS_DATARANGE_VIDEO_VBI StreamFormatVBI =
{
   // KSDATARANGE
   {
      {
         sizeof( KS_DATARANGE_VIDEO_VBI ),
         0,
         VBIStride * VBILines,      // SampleSize
         0,                          // Reserved
         { STATIC_KSDATAFORMAT_TYPE_VBI },
         { STATIC_KSDATAFORMAT_SUBTYPE_RAW8 },
         { STATIC_KSDATAFORMAT_SPECIFIER_VBI }
      }
   },
   TRUE,    // BOOL,  bFixedSizeSamples (all samples same size?)
   TRUE,    // BOOL,  bTemporalCompression (all I frames?)

   0,       // Reserved (was StreamDescriptionFlags)
   0,       // Reserved (was MemoryAllocationFlags   (KS_VIDEO_ALLOC_*))

   // _KS_VIDEO_STREAM_CONFIG_CAPS
   {
      { STATIC_KSDATAFORMAT_SPECIFIER_VBI },
      KS_AnalogVideo_NTSC_M,                       // AnalogVideoStandard
      {
         VBIStride, 480 /*VBILines*/   // SIZE InputSize
      },
      {
         VBISamples, VBILines   // SIZE MinCroppingSize;       smallest rcSrc cropping rect allowed
      },
      {
         VBIStride, VBILines   // SIZE MaxCroppingSize;       largest rcSrc cropping rect allowed
      },
      1,           // int CropGranularityX;       // granularity of cropping size
      1,           // int CropGranularityY;
      1,           // int CropAlignX;             // alignment of cropping rect
      1,           // int CropAlignY;
      {
         VBISamples, VBILines   // SIZE MinOutputSize;         // smallest bitmap stream can produce
      },
      {
         VBIStride, VBILines   // SIZE MaxOutputSize;         // largest  bitmap stream can produce
      },
      1,          // int OutputGranularityX;     // granularity of output bitmap size
      2,          // int OutputGranularityY;
      0,          // StretchTapsX  (0 no stretch, 1 pix dup, 2 interp...)
      0,          // StretchTapsY
      0,          // ShrinkTapsX
      0,          // ShrinkTapsY
      166834,     // LONGLONG MinFrameInterval;  // 100 nS units
      166834,     // LONGLONG MaxFrameInterval;  // 16683.4uS == 1/60 sec
      VBIStride * VBILines * 8 * 30 * 2, // LONG MinBitsPerSecond;
      VBIStride * VBILines * 8 * 30 * 2  // LONG MaxBitsPerSecond;
   },

   // KS_VBIINFOHEADER (default format)
   {
      VBIStart,      // StartLine  -- inclusive
      VBIEnd,        // EndLine    -- inclusive
      KS_VBISAMPLINGRATE_5X_NABTS,   // SamplingFrequency;   Hz.
      732,           // MinLineStartTime;
      732,           // MaxLineStartTime;
      732,           // ActualLineStartTime
      0,             // ActualLineEndTime;
      KS_AnalogVideo_NTSC_M,      // VideoStandard;
      VBISamples,       // SamplesPerLine;
      VBIStride,       // StrideInBytes;
      VBIStride * VBILines   // BufferSize;
   }
};

// output is NABTS records
KSDATARANGE StreamFormatNABTS =
{
    sizeof (KSDATARANGE),
    0,
    sizeof (NABTS_BUFFER),
    0,                  // Reserved
    { STATIC_KSDATAFORMAT_TYPE_VBI },
    { STATIC_KSDATAFORMAT_SUBTYPE_NABTS },
    { STATIC_KSDATAFORMAT_SPECIFIER_NONE }
};

KSDATARANGE StreamFormatCC = 
{
    // Definition of the CC stream
    {   
        sizeof (KSDATARANGE),           // FormatSize
        0,                              // Flags
        sizeof (CC_HW_FIELD),           // SampleSize
        0,                              // Reserved
        { STATIC_KSDATAFORMAT_TYPE_VBI },
        { STATIC_KSDATAFORMAT_SUBTYPE_CC },
        { STATIC_KSDATAFORMAT_SPECIFIER_NONE }
    }
};


//---------------------------------------------------------------------------
//  STREAM_Capture Formats
//---------------------------------------------------------------------------

static  PKSDATAFORMAT StreamCaptureFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatRGB24Bpp_Capture,
    (PKSDATAFORMAT) &StreamFormatUYU2_Capture,
};
#define NUM_STREAM_CAPTURE_FORMATS (SIZEOF_ARRAY(StreamCaptureFormats))

//---------------------------------------------------------------------------
//  STREAM_Preview Formats
//---------------------------------------------------------------------------

static  PKSDATAFORMAT StreamPreviewFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatRGB24Bpp_Capture,
    (PKSDATAFORMAT) &StreamFormatUYU2_Capture,
};
#define NUM_STREAM_PREVIEW_FORMATS (SIZEOF_ARRAY (StreamPreviewFormats))

//---------------------------------------------------------------------------
//  STREAM_VBI Formats
//---------------------------------------------------------------------------

static PKSDATAFORMAT StreamVBIFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatVBI,
};
#define NUM_STREAM_VBI_FORMATS (SIZEOF_ARRAY(StreamVBIFormats))

//---------------------------------------------------------------------------
//  STREAM_NABTS Formats
//---------------------------------------------------------------------------

static PKSDATAFORMAT StreamNABTSFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatNABTS,
};
#define NUM_STREAM_NABTS_FORMATS (SIZEOF_ARRAY(StreamNABTSFormats))

static PKSDATAFORMAT StreamCCFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatCC,
};
#define NUM_STREAM_CC_FORMATS (SIZEOF_ARRAY (StreamCCFormats))

//---------------------------------------------------------------------------
//  STREAM_AnalogVideoInput Formats
//---------------------------------------------------------------------------

static  PKSDATAFORMAT StreamAnalogVidInFormats[] = 
{
    (PKSDATAFORMAT) &StreamFormatAnalogVideo,
};
#define NUM_STREAM_ANALOGVIDIN_FORMATS (SIZEOF_ARRAY (StreamAnalogVidInFormats))

//---------------------------------------------------------------------------
// Create an array that holds the list of all of the streams supported
//---------------------------------------------------------------------------

typedef struct _ALL_STREAM_INFO {
    HW_STREAM_INFORMATION   hwStreamInfo;
    HW_STREAM_OBJECT        hwStreamObject;
} ALL_STREAM_INFO, *PALL_STREAM_INFO;

// Warning:  The StreamNumber element of the HW_STREAM_OBJECT below MUST be
//           the same as its position in the Streams[] array.
static  ALL_STREAM_INFO Streams [] = 
{
  // -----------------------------------------------------------------
  // STREAM_Capture
  // -----------------------------------------------------------------
  {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_CAPTURE_FORMATS,             // NumberOfFormatArrayEntries
    StreamCaptureFormats,                   // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET) VideoStreamProperties,// StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries;
    0,                                      // StreamEventsArray;
    (GUID *) &PINNAME_VIDEO_CAPTURE,        // Category
    (GUID *) &PINNAME_VIDEO_CAPTURE,        // Name
    1,                                      // MediumsCount
    &StandardMedium,                        // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_Capture,                         // StreamNumber
    0,                                      // HwStreamExtension
    VideoReceiveDataPacket,                 // HwReceiveDataPacket
    VideoReceiveCtrlPacket,                 // HwReceiveControlPacket
    { NULL, 0 },                            // HW_CLOCK_OBJECT
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    NULL,                                   // HwDeviceExtension
    sizeof (KS_FRAME_INFO),                 // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    },            
 },
 // -----------------------------------------------------------------
 // STREAM_Preview
 // -----------------------------------------------------------------
 {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_PREVIEW_FORMATS,             // NumberOfFormatArrayEntries
    StreamPreviewFormats,                   // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET) VideoStreamProperties,// StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries;
    0,                                      // StreamEventsArray;
    (GUID *) &PINNAME_VIDEO_PREVIEW,        // Category
    (GUID *) &PINNAME_VIDEO_PREVIEW,        // Name
    1,                                      // MediumsCount
    &StandardMedium,                        // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_Preview,                         // StreamNumber
    0,                                      // HwStreamExtension
    VideoReceiveDataPacket,                 // HwReceiveDataPacket
    VideoReceiveCtrlPacket,                 // HwReceiveControlPacket
    { NULL, 0 },                            // HW_CLOCK_OBJECT
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    0,                                      // HwDeviceExtension
    sizeof (KS_FRAME_INFO),                 // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    },
 },
  // -----------------------------------------------------------------
  // STREAM_VBI
  // -----------------------------------------------------------------
  {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_VBI_FORMATS,                 // NumberOfFormatArrayEntries
    StreamVBIFormats,                       // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET)VideoStreamProperties, // StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries
    0,                                      // StreamEventsArray
    (GUID *)&PINNAME_VIDEO_VBI,             // Category
    (GUID *)&PINNAME_VIDEO_VBI,             // Name
    0,                                      // MediumsCount
    NULL,                                   // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_VBI,                             // StreamNumber
    (PVOID)NULL,                            // HwStreamExtension
    VBIReceiveDataPacket,                   // HwReceiveDataPacket
    VBIReceiveCtrlPacket,                   // HwReceiveControlPacket
    {                                       // HW_CLOCK_OBJECT
        NULL,                                // .HWClockFunction
        0,                                   // .ClockSupportFlags
    },
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    (PVOID)NULL,                            // HwDeviceExtension
    sizeof (KS_VBI_FRAME_INFO),             // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    },
  },
  // -----------------------------------------------------------------
  // STREAM_CC (Closed Caption Output)
  // -----------------------------------------------------------------
  {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_CC_FORMATS,                  // NumberOfFormatArrayEntries
    StreamCCFormats,                        // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET)VideoStreamProperties, // StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries;
    0,                                      // StreamEventsArray;
    (GUID *)&PINNAME_VIDEO_CC_CAPTURE,      // Category
    (GUID *)&PINNAME_VIDEO_CC_CAPTURE,      // Name
    0,                                      // MediumsCount
    NULL,                                   // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_CC,                              // StreamNumber
    (PVOID)NULL,                            // HwStreamExtension
    VBIReceiveDataPacket,                   // HwReceiveDataPacket
    VBIReceiveCtrlPacket,                   // HwReceiveControlPacket
    {                                       // HW_CLOCK_OBJECT
        NULL,                                // .HWClockFunction
        0,                                   // .ClockSupportFlags
    },
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    (PVOID)NULL,                            // HwDeviceExtension
    0,                                      // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    },
  },
  // -----------------------------------------------------------------
  // STREAM_NABTS
  // -----------------------------------------------------------------
  {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_NABTS_FORMATS,               // NumberOfFormatArrayEntries
    StreamNABTSFormats,                     // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET)VideoStreamProperties, // StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries
    0,                                      // StreamEventsArray
    (GUID *)&PINNAME_VIDEO_NABTS_CAPTURE,   // Category
    (GUID *)&PINNAME_VIDEO_NABTS_CAPTURE,   // Name
    0,                                      // MediumsCount
    NULL,                                   // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_NABTS,                           // StreamNumber
    (PVOID)NULL,                            // HwStreamExtension
    VBIReceiveDataPacket,                   // HwReceiveDataPacket
    VBIReceiveCtrlPacket,                   // HwReceiveControlPacket
    {                                       // HW_CLOCK_OBJECT
        NULL,                                // .HWClockFunction
        0,                                   // .ClockSupportFlags
    },
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    (PVOID)NULL,                            // HwDeviceExtension
    0,                                      // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    },
  },
 // -----------------------------------------------------------------
 // STREAM_AnalogVideoInput
 // -----------------------------------------------------------------
 {
    // HW_STREAM_INFORMATION -------------------------------------------
    {
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_IN,                      // DataFlow
    TRUE,                                   // DataAccessible
    NUM_STREAM_ANALOGVIDIN_FORMATS,         // NumberOfFormatArrayEntries
    StreamAnalogVidInFormats,               // StreamFormatsArray
    0,                                      // ClassReserved[0]
    0,                                      // ClassReserved[1]
    0,                                      // ClassReserved[2]
    0,                                      // ClassReserved[3]
    0,                                      // NumStreamPropArrayEntries
    0,                                      // StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries;
    0,                                      // StreamEventsArray;
    (GUID *) &PINNAME_VIDEO_ANALOGVIDEOIN,  // Category
    (GUID *) &PINNAME_VIDEO_ANALOGVIDEOIN,  // Name
    1,                                      // MediumsCount
    &CrossbarMediums[9],                    // Mediums
    FALSE,                                  // BridgeStream
    },
           
    // HW_STREAM_OBJECT ------------------------------------------------
    {
    sizeof (HW_STREAM_OBJECT),              // SizeOfThisPacket
    STREAM_AnalogVideoInput,                // StreamNumber
    0,                                      // HwStreamExtension
    AnalogVideoReceiveDataPacket,           // HwReceiveDataPacket
    AnalogVideoReceiveCtrlPacket,           // HwReceiveControlPacket
    { NULL, 0 },                            // HW_CLOCK_OBJECT
    FALSE,                                  // Dma
    TRUE,                                   // Pio
    0,                                      // HwDeviceExtension
    0,                                      // StreamHeaderMediaSpecific
    0,                                      // StreamHeaderWorkspace 
    FALSE,                                  // Allocator 
    NULL,                                   // HwEventRoutine
    { 0, 0 },                               // Reserved[2]
    }
  }
};

#define DRIVER_STREAM_COUNT (SIZEOF_ARRAY (Streams))


//---------------------------------------------------------------------------
// Topology
//---------------------------------------------------------------------------

// Categories define what the device does.

static const GUID Categories[] = {
    STATIC_KSCATEGORY_VIDEO,
    STATIC_KSCATEGORY_CAPTURE,
    STATIC_KSCATEGORY_TVTUNER,
    STATIC_KSCATEGORY_CROSSBAR,
    STATIC_KSCATEGORY_TVAUDIO
};

#define NUMBER_OF_CATEGORIES  SIZEOF_ARRAY (Categories)


static KSTOPOLOGY Topology = {
    NUMBER_OF_CATEGORIES,               // CategoriesCount
    (GUID*) &Categories,                // Categories
    0,                                  // TopologyNodesCount
    NULL,                               // TopologyNodes
    0,                                  // TopologyConnectionsCount
    NULL,                               // TopologyConnections
    NULL,                               // TopologyNodesNames
    0,                                  // Reserved
};


//---------------------------------------------------------------------------
// The Main stream header
//---------------------------------------------------------------------------

static HW_STREAM_HEADER StreamHeader = 
{
    DRIVER_STREAM_COUNT,                // NumberOfStreams
    sizeof (HW_STREAM_INFORMATION),     // Future proofing
    0,                                  // NumDevPropArrayEntries set at init time
    NULL,                               // DevicePropertiesArray  set at init time
    0,                                  // NumDevEventArrayEntries;
    NULL,                               // DeviceEventsArray;
    &Topology                           // Pointer to Device Topology
};

#ifdef    __cplusplus
}
#endif // __cplusplus

#endif // __CAPSTRM_H__

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capmain.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "mediums.h"
#include "capstrm.h"
#include "capprop.h"
#include "capdebug.h"

// The only global used by this driver.  It is used to keep track of the instance count of
// the number of times the driver is loaded.  This is used to create unique Mediums so that
// the correct capture, crossbar, tuner, and tvaudio filters all get connected together.

UINT GlobalDriverMediumInstanceCount = 0;

// Debug Logging
// 0 = Errors only
// 1 = Info, stream state changes, stream open close
// 2 = Verbose trace
ULONG gDebugLevel = 0;

/*
** DriverEntry()
**
**   This routine is called when the driver is first loaded by PnP.
**   It in turn, calls upon the stream class to perform registration services.
**
** Arguments:
**
**   DriverObject -
**          Driver object for this driver
**
**   RegistryPath -
**          Registry path string for this driver's key
**
** Returns:
**
**   Results of StreamClassRegisterAdapter()
**
** Side Effects:  none
*/

ULONG
DriverEntry (
    IN PDRIVER_OBJECT DriverObject,
    IN PUNICODE_STRING RegistryPath
    )
{

    HW_INITIALIZATION_DATA      HwInitData;
    ULONG                       ReturnValue;

    DbgLogInfo(("TestCap: DriverEntry\n"));

    RtlZeroMemory(&HwInitData, sizeof(HwInitData));

    HwInitData.HwInitializationDataSize = sizeof(HwInitData);

    //
    // Set the Adapter entry points for the driver
    //

    HwInitData.HwInterrupt              = NULL; // HwInterrupt;

    HwInitData.HwReceivePacket          = AdapterReceivePacket;
    HwInitData.HwCancelPacket           = AdapterCancelPacket;
    HwInitData.HwRequestTimeoutHandler  = AdapterTimeoutPacket;

    HwInitData.DeviceExtensionSize      = sizeof(HW_DEVICE_EXTENSION);
    HwInitData.PerRequestExtensionSize  = sizeof(SRB_EXTENSION);
    HwInitData.FilterInstanceExtensionSize = 0;
    HwInitData.PerStreamExtensionSize   = sizeof(STREAMEX);
    HwInitData.BusMasterDMA             = FALSE;
    HwInitData.Dma24BitAddresses        = FALSE;
    HwInitData.BufferAlignment          = 3;
    HwInitData.DmaBufferSize            = 0;

    // Don't rely on the stream class using raised IRQL to synchronize
    // execution.  This single paramter most affects the overall structure
    // of the driver.

    HwInitData.TurnOffSynchronization   = TRUE;

    ReturnValue = StreamClassRegisterAdapter(DriverObject, RegistryPath, &HwInitData);

    DbgLogInfo(("Testcap: StreamClassRegisterAdapter = %x\n", ReturnValue));

    return ReturnValue;
}

//==========================================================================;
//                   Adapter Based Request Handling Routines
//==========================================================================;

/*
** HwInitialize()
**
**   This routine is called when an SRB_INITIALIZE_DEVICE request is received
**
** Arguments:
**
**   pSrb - pointer to stream request block for the Initialize command
**
** Returns:
**
** Side Effects:  none
*/

BOOLEAN
STREAMAPI
HwInitialize (
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    STREAM_PHYSICAL_ADDRESS     adr;
    ULONG                       Size;
    PUCHAR                      pDmaBuf;
    int                         j;

    PPORT_CONFIGURATION_INFORMATION ConfigInfo = pSrb->CommandData.ConfigInfo;

    PHW_DEVICE_EXTENSION pHwDevExt =
        (PHW_DEVICE_EXTENSION)ConfigInfo->HwDeviceExtension;

    DbgLogInfo(("Testcap: HwInitialize()\n"));

    if (ConfigInfo->NumberOfAccessRanges != 0) {
        DbgLogError(("Testcap: illegal config info\n"));

        pSrb->Status = STATUS_NO_SUCH_DEVICE;
        return (FALSE);
    }

    DbgLogInfo(("TestCap: Number of access ranges = %lx\n", ConfigInfo->NumberOfAccessRanges));
    DbgLogInfo(("TestCap: Memory Range = %lx\n", pHwDevExt->ioBaseLocal));
    DbgLogInfo(("TestCap: IRQ = %lx\n", ConfigInfo->BusInterruptLevel));

    if (ConfigInfo->NumberOfAccessRanges != 0) {
        pHwDevExt->ioBaseLocal
                = (PULONG)(ULONG_PTR)   (ConfigInfo->AccessRanges[0].RangeStart.LowPart);
    }

    pHwDevExt->Irq  = (USHORT)(ConfigInfo->BusInterruptLevel);

    ConfigInfo->StreamDescriptorSize = sizeof (HW_STREAM_HEADER) +
                DRIVER_STREAM_COUNT * sizeof (HW_STREAM_INFORMATION);

    pDmaBuf = StreamClassGetDmaBuffer(pHwDevExt);

    adr = StreamClassGetPhysicalAddress(pHwDevExt,
            NULL, pDmaBuf, DmaBuffer, &Size);

    // Init Crossbar properties
    pHwDevExt->VideoInputConnected = 0;     // TvTuner video is the default
    pHwDevExt->AudioInputConnected = 5;     // TvTuner audio is the default

    // Init VideoProcAmp properties
    pHwDevExt->Brightness = BrightnessDefault;
    pHwDevExt->BrightnessFlags = KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO;
    pHwDevExt->Contrast = ContrastDefault;
    pHwDevExt->ContrastFlags = KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO;
    pHwDevExt->ColorEnable = ColorEnableDefault;
    pHwDevExt->ColorEnableFlags = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL;

    // Init CameraControl properties
    pHwDevExt->Focus = FocusDefault;
    pHwDevExt->FocusFlags = KSPROPERTY_CAMERACONTROL_FLAGS_AUTO;
    pHwDevExt->Zoom = ZoomDefault;
    pHwDevExt->ZoomFlags = KSPROPERTY_CAMERACONTROL_FLAGS_AUTO;

    // Init TvTuner properties
    pHwDevExt->TunerMode = KSPROPERTY_TUNER_MODE_TV;
    pHwDevExt->Channel = 4;
    pHwDevExt->TunerInput = 0;
    pHwDevExt->Busy = 0;

    // Init TvAudio properties
    pHwDevExt->TVAudioMode = KS_TVAUDIO_MODE_MONO   |
                             KS_TVAUDIO_MODE_LANG_A ;

    // Init AnalogVideoDecoder properties
    pHwDevExt->VideoDecoderVideoStandard = KS_AnalogVideo_NTSC_M;
    pHwDevExt->VideoDecoderOutputEnable = FALSE;
    pHwDevExt->VideoDecoderVCRTiming = FALSE;

    // Init VideoControl properties
    pHwDevExt->VideoControlMode = 0;

    // Init VideoCompression properties
    pHwDevExt->CompressionSettings.CompressionKeyFrameRate = 15;
    pHwDevExt->CompressionSettings.CompressionPFramesPerKeyFrame = 3;
    pHwDevExt->CompressionSettings.CompressionQuality = 5000;

    pHwDevExt->PDO = ConfigInfo->RealPhysicalDeviceObject;
    DbgLogInfo(("TestCap: Physical Device Object = %lx\n", pHwDevExt->PDO));

    for (j = 0; j < MAX_TESTCAP_STREAMS; j++){

        // For each stream, maintain a separate queue for data and control
        InitializeListHead (&pHwDevExt->StreamSRBList[j]);
        InitializeListHead (&pHwDevExt->StreamControlSRBList[j]);
        KeInitializeSpinLock (&pHwDevExt->StreamSRBSpinLock[j]);
        pHwDevExt->StreamSRBListSize[j] = 0;
    }

    // Init ProtectionStatus
    pHwDevExt->ProtectionStatus = 0;


    // The following allows multiple instance of identical hardware
    // to be installed.  GlobalDriverMediumInstanceCount is set in the Medium.Id field.

    pHwDevExt->DriverMediumInstanceCount = GlobalDriverMediumInstanceCount++;
    AdapterSetInstance (pSrb);

    DbgLogInfo(("TestCap: Exit, HwInitialize()\n"));

    pSrb->Status = STATUS_SUCCESS;

    return (TRUE);

}

/*
** HwUnInitialize()
**
**   This routine is called when an SRB_UNINITIALIZE_DEVICE request is received
**
** Arguments:
**
**   pSrb - pointer to stream request block for the UnInitialize command
**
** Returns:
**
** Side Effects:  none
*/

BOOLEAN
STREAMAPI
HwUnInitialize (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    pSrb->Status = STATUS_SUCCESS;

    return TRUE;
}

/*
** AdapterPowerState()
**
**   This routine is called when an SRB_CHANGE_POWER_STATE request is received
**
** Arguments:
**
**   pSrb - pointer to stream request block for the Change Power state command
**
** Returns:
**
** Side Effects:  none
*/

BOOLEAN
STREAMAPI
AdapterPowerState (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);

    pHwDevExt->DeviceState = pSrb->CommandData.DeviceState;

    return TRUE;
}

/*
** AdapterSetInstance()
**
**   This routine is called to set all of the Medium instance fields
**
** Arguments:
**
**   pSrb - pointer to stream request block
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterSetInstance (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    int j;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);

    // Use our HwDevExt as the instance data on the Mediums
    // This allows multiple instances to be uniquely identified and
    // connected.  The value used in .Id is not important, only that
    // it is unique for each hardware connection

    for (j = 0; j < SIZEOF_ARRAY (TVTunerMediums); j++) {
        TVTunerMediums[j].Id = pHwDevExt->DriverMediumInstanceCount;
    }
    for (j = 0; j < SIZEOF_ARRAY (TVAudioMediums); j++) {
        TVAudioMediums[j].Id = pHwDevExt->DriverMediumInstanceCount;
    }
    for (j = 0; j < SIZEOF_ARRAY (CrossbarMediums); j++) {
        CrossbarMediums[j].Id = pHwDevExt->DriverMediumInstanceCount;
    }
    for (j = 0; j < SIZEOF_ARRAY (CaptureMediums); j++) {
        CaptureMediums[j].Id = pHwDevExt->DriverMediumInstanceCount;
    }

    pHwDevExt->AnalogVideoInputMedium = CaptureMediums[2];
}

/*
** AdapterCompleteInitialization()
**
**   This routine is called when an SRB_COMPLETE_INITIALIZATION request is received
**
** Arguments:
**
**   pSrb - pointer to stream request block
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterCompleteInitialization (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    NTSTATUS                Status;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    KIRQL                   KIrql;

    KIrql = KeGetCurrentIrql();

    // Create the Registry blobs that DShow uses to create
    // graphs via Mediums

    // Register the TVTuner
    Status = StreamClassRegisterFilterWithNoKSPins (
                    pHwDevExt->PDO,                 // IN PDEVICE_OBJECT   DeviceObject,
                    &KSCATEGORY_TVTUNER,            // IN GUID           * InterfaceClassGUID,
                    SIZEOF_ARRAY (TVTunerMediums),  // IN ULONG            PinCount,
                    TVTunerPinDirection,            // IN ULONG          * Flags,
                    TVTunerMediums,                 // IN KSPIN_MEDIUM   * MediumList,
                    NULL                            // IN GUID           * CategoryList
            );

    // Register the Crossbar
    Status = StreamClassRegisterFilterWithNoKSPins (
                    pHwDevExt->PDO,                 // IN PDEVICE_OBJECT   DeviceObject,
                    &KSCATEGORY_CROSSBAR,           // IN GUID           * InterfaceClassGUID,
                    SIZEOF_ARRAY (CrossbarMediums), // IN ULONG            PinCount,
                    CrossbarPinDirection,           // IN ULONG          * Flags,
                    CrossbarMediums,                // IN KSPIN_MEDIUM   * MediumList,
                    NULL                            // IN GUID           * CategoryList
            );

    // Register the TVAudio decoder
    Status = StreamClassRegisterFilterWithNoKSPins (
                    pHwDevExt->PDO,                 // IN PDEVICE_OBJECT   DeviceObject,
                    &KSCATEGORY_TVAUDIO,            // IN GUID           * InterfaceClassGUID,
                    SIZEOF_ARRAY (TVAudioMediums),  // IN ULONG            PinCount,
                    TVAudioPinDirection,            // IN ULONG          * Flags,
                    TVAudioMediums,                 // IN KSPIN_MEDIUM   * MediumList,
                    NULL                            // IN GUID           * CategoryList
            );

    // Register the Capture filter
    // Note:  This should be done automatically be MSKsSrv.sys,
    // when that component comes on line (if ever) ...
    Status = StreamClassRegisterFilterWithNoKSPins (
                    pHwDevExt->PDO,                 // IN PDEVICE_OBJECT   DeviceObject,
                    &KSCATEGORY_CAPTURE,            // IN GUID           * InterfaceClassGUID,
                    SIZEOF_ARRAY (CaptureMediums),  // IN ULONG            PinCount,
                    CapturePinDirection,            // IN ULONG          * Flags,
                    CaptureMediums,                 // IN KSPIN_MEDIUM   * MediumList,
                    NULL                            // IN GUID           * CategoryList
            );
}


/*
** AdapterOpenStream()
**
**   This routine is called when an OpenStream SRB request is received.
**   A stream is identified by a stream number, which indexes an array
**   of KSDATARANGE structures.  The particular KSDATAFORMAT format to
**   be used is also passed in, which should be verified for validity.
**
** Arguments:
**
**   pSrb - pointer to stream request block for the Open command
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterOpenStream (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    //
    // the stream extension structure is allocated by the stream class driver
    //

    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    PKSDATAFORMAT           pKSDataFormat = pSrb->CommandData.OpenFormat;


    RtlZeroMemory(pStrmEx, sizeof(STREAMEX));

    DbgLogInfo(("TestCap: ------- ADAPTEROPENSTREAM ------- StreamNumber=%d\n", StreamNumber));

    //
    // check that the stream index requested isn't too high
    // or that the maximum number of instances hasn't been exceeded
    //

    if (StreamNumber >= DRIVER_STREAM_COUNT || StreamNumber < 0) {

        pSrb->Status = STATUS_INVALID_PARAMETER;

        return;
    }

    //
    // Check that we haven't exceeded the instance count for this stream
    //

    if (pHwDevExt->ActualInstances[StreamNumber] >=
        Streams[StreamNumber].hwStreamInfo.NumberOfPossibleInstances) {

        pSrb->Status = STATUS_INVALID_PARAMETER;

        return;
    }

    //
    // Check the validity of the format being requested
    //

    if (!AdapterVerifyFormat (pKSDataFormat, StreamNumber)) {

        pSrb->Status = STATUS_INVALID_PARAMETER;

        return;
    }

    //
    // And set the format for the stream
    //

    if (!VideoSetFormat (pSrb)) {

        return;
    }

    ASSERT (pHwDevExt->pStrmEx [StreamNumber] == NULL);

    // Maintain an array of all the StreamEx structures in the HwDevExt
    // so that we can cancel IRPs from any stream

    pHwDevExt->pStrmEx [StreamNumber] = (PSTREAMX) pStrmEx;

    // Set up pointers to the handlers for the stream data and control handlers

    pSrb->StreamObject->ReceiveDataPacket =
            (PVOID) Streams[StreamNumber].hwStreamObject.ReceiveDataPacket;
    pSrb->StreamObject->ReceiveControlPacket =
            (PVOID) Streams[StreamNumber].hwStreamObject.ReceiveControlPacket;

    //
    // The DMA flag must be set when the device will be performing DMA directly
    // to the data buffer addresses passed in to the ReceiceDataPacket routines.
    //

    pSrb->StreamObject->Dma = Streams[StreamNumber].hwStreamObject.Dma;

    //
    // The PIO flag must be set when the mini driver will be accessing the data
    // buffers passed in using logical addressing
    //

    pSrb->StreamObject->Pio = Streams[StreamNumber].hwStreamObject.Pio;

    //
    // How many extra bytes will be passed up from the driver for each frame?
    //

    pSrb->StreamObject->StreamHeaderMediaSpecific =
                Streams[StreamNumber].hwStreamObject.StreamHeaderMediaSpecific;

    pSrb->StreamObject->StreamHeaderWorkspace =
                Streams[StreamNumber].hwStreamObject.StreamHeaderWorkspace;

    //
    // Indicate the clock support available on this stream
    //

    pSrb->StreamObject->HwClockObject =
                Streams[StreamNumber].hwStreamObject.HwClockObject;

    //
    // Increment the instance count on this stream
    //
    pHwDevExt->ActualInstances[StreamNumber]++;


    // Retain a private copy of the HwDevExt and StreamObject in the stream extension
    // so we can use a timer

    pStrmEx->pHwDevExt = pHwDevExt;                     // For timer use
    pStrmEx->pStreamObject = pSrb->StreamObject;        // For timer use

    // Initialize the compression settings
    // These may have been changed from the default values in the HwDevExt
    // before the stream was opened
    pStrmEx->CompressionSettings.CompressionKeyFrameRate =
        pHwDevExt->CompressionSettings.CompressionKeyFrameRate;
    pStrmEx->CompressionSettings.CompressionPFramesPerKeyFrame =
        pHwDevExt->CompressionSettings.CompressionPFramesPerKeyFrame;
    pStrmEx->CompressionSettings.CompressionQuality =
        pHwDevExt->CompressionSettings.CompressionQuality;

    // Init VideoControl properties
    pStrmEx->VideoControlMode = pHwDevExt->VideoControlMode;

    // Init VBI variables
    pStrmEx->SentVBIInfoHeader = 0;

    DbgLogInfo(("TestCap: AdapterOpenStream Exit\n"));

}

/*
** AdapterCloseStream()
**
**   Close the requested data stream.
**
**   Note that a stream could be closed arbitrarily in the midst of streaming
**   if a user mode app crashes.  Therefore, you must release all outstanding
**   resources, disable interrupts, complete all pending SRBs, and put the
**   stream back into a quiescent condition.
**
** Arguments:
**
**   pSrb the request block requesting to close the stream
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterCloseStream (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    PKSDATAFORMAT           pKSDataFormat = pSrb->CommandData.OpenFormat;
    KS_VIDEOINFOHEADER      *pVideoInfoHdr = pStrmEx->pVideoInfoHeader;

    DbgLogInfo(("TestCap: -------- ADAPTERCLOSESTREAM ------ StreamNumber=%d\n", StreamNumber));

    if (pHwDevExt->StreamSRBListSize > 0) {
        VideoQueueCancelAllSRBs (pStrmEx);
        DbgLogError(("TestCap: Outstanding SRBs at stream close!!!\n"));
    }

    pHwDevExt->ActualInstances[StreamNumber]--;

    ASSERT (pHwDevExt->pStrmEx [StreamNumber] != 0);

    pHwDevExt->pStrmEx [StreamNumber] = 0;

    //
    // the minidriver should free any resources that were allocate at
    // open stream time etc.
    //

    // Free the variable length VIDEOINFOHEADER

    if (pVideoInfoHdr) {
        ExFreePool(pVideoInfoHdr);
        pStrmEx->pVideoInfoHeader = NULL;
    }

    // Make sure we no longer reference the clock
    pStrmEx->hMasterClock = NULL;

    // Make sure the state is reset to stopped,
    pStrmEx->KSState = KSSTATE_STOP;

}


/*
** AdapterStreamInfo()
**
**   Returns the information of all streams that are supported by the
**   mini-driver
**
** Arguments:
**
**   pSrb - Pointer to the STREAM_REQUEST_BLOCK
**        pSrb->HwDeviceExtension - will be the hardware device extension for
**                                  as initialised in HwInitialise
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterStreamInfo (
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    int j;

    PHW_DEVICE_EXTENSION pHwDevExt =
        ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);

    //
    // pick up the pointer to header which preceeds the stream info structs
    //

    PHW_STREAM_HEADER pstrhdr =
            (PHW_STREAM_HEADER)&(pSrb->CommandData.StreamBuffer->StreamHeader);

     //
     // pick up the pointer to the array of stream information data structures
     //

     PHW_STREAM_INFORMATION pstrinfo =
            (PHW_STREAM_INFORMATION)&(pSrb->CommandData.StreamBuffer->StreamInfo);


    //
    // verify that the buffer is large enough to hold our return data
    //

    DEBUG_ASSERT (pSrb->NumberOfBytesToTransfer >=
            sizeof (HW_STREAM_HEADER) +
            sizeof (HW_STREAM_INFORMATION) * DRIVER_STREAM_COUNT);

    // Ugliness.  To allow mulitple instances, modify the pointer to the
    // AnalogVideoMedium and save it in our device extension

    Streams[STREAM_AnalogVideoInput].hwStreamInfo.Mediums =
           &pHwDevExt->AnalogVideoInputMedium;
    // pHwDevExt->AnalogVideoInputMedium = CrossbarMediums[9];
    // pHwDevExt->AnalogVideoInputMedium.Id = pHwDevExt->DriverMediumInstanceCount;

     //
     // Set the header
     //

     StreamHeader.NumDevPropArrayEntries = NUMBER_OF_ADAPTER_PROPERTY_SETS;
     StreamHeader.DevicePropertiesArray = (PKSPROPERTY_SET) AdapterPropertyTable;
     *pstrhdr = StreamHeader;

     //
     // stuff the contents of each HW_STREAM_INFORMATION struct
     //

     for (j = 0; j < DRIVER_STREAM_COUNT; j++) {
        *pstrinfo++ = Streams[j].hwStreamInfo;
     }

}


/*
** AdapterReceivePacket()
**
**   Main entry point for receiving adapter based request SRBs.  This routine
**   will always be called at Passive level.
**
**   Note: This is an asyncronous entry point.  The request does not necessarily
**         complete on return from this function, the request only completes when a
**         StreamClassDeviceNotification on this request block, of type
**         DeviceRequestComplete, is issued.
**
** Arguments:
**
**   pSrb - Pointer to the STREAM_REQUEST_BLOCK
**        pSrb->HwDeviceExtension - will be the hardware device extension for
**                                  as initialised in HwInitialise
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterReceivePacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    BOOL                    Busy;

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);

    DbgLogTrace(("TestCap: Receiving Adapter  SRB %8x, %x\n", pSrb, pSrb->Command));

    // The very first time through, we need to initialize the adapter spinlock
    // and queue
    if (!pHwDevExt->AdapterQueueInitialized) {
        InitializeListHead (&pHwDevExt->AdapterSRBList);
        KeInitializeSpinLock (&pHwDevExt->AdapterSpinLock);
        pHwDevExt->AdapterQueueInitialized = TRUE;
        pHwDevExt->ProcessingAdapterSRB = FALSE;
    }

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                    pSrb,
                    &pHwDevExt->AdapterSpinLock,
                    &pHwDevExt->ProcessingAdapterSRB,
                    &pHwDevExt->AdapterSRBList);

    if (Busy) {
        return;
    }

    //
    // This will run until the queue is empty
    //
    while (TRUE) {
        //
        // Assume success
        //
        pSrb->Status = STATUS_SUCCESS;

        //
        // determine the type of packet.
        //

        switch (pSrb->Command)
        {

        case SRB_INITIALIZE_DEVICE:

            // open the device

            HwInitialize(pSrb);

            break;

        case SRB_UNINITIALIZE_DEVICE:

            // close the device.

            HwUnInitialize(pSrb);

            break;

        case SRB_OPEN_STREAM:

            // open a stream

            AdapterOpenStream(pSrb);

            break;

        case SRB_CLOSE_STREAM:

            // close a stream

            AdapterCloseStream(pSrb);

            break;

        case SRB_GET_STREAM_INFO:

            //
            // return a block describing all the streams
            //

            AdapterStreamInfo(pSrb);

            break;

        case SRB_GET_DATA_INTERSECTION:

            //
            // Return a format, given a range
            //

            AdapterFormatFromRange(pSrb);

            break;

        case SRB_OPEN_DEVICE_INSTANCE:
        case SRB_CLOSE_DEVICE_INSTANCE:

            //
            // We should never get these since this is a single instance device
            //

            TRAP;
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
            break;

        case SRB_GET_DEVICE_PROPERTY:

            //
            // Get adapter wide properties
            //

            AdapterGetProperty (pSrb);
            break;

        case SRB_SET_DEVICE_PROPERTY:

            //
            // Set adapter wide properties
            //

            AdapterSetProperty (pSrb);
            break;

        case SRB_PAGING_OUT_DRIVER:

            //
            // The driver is being paged out
            // Disable Interrupts if you have them!
            //
            DbgLogInfo(("'Testcap: Receiving SRB_PAGING_OUT_DRIVER -- SRB=%x\n", pSrb));
            break;

        case SRB_CHANGE_POWER_STATE:

            //
            // Changing the device power state, D0 ... D3
            //
            DbgLogInfo(("'Testcap: Receiving SRB_CHANGE_POWER_STATE ------ SRB=%x\n", pSrb));
            AdapterPowerState(pSrb);
            break;

        case SRB_INITIALIZATION_COMPLETE:

            //
            // Stream class has finished initialization.
            // Now create DShow Medium interface BLOBs.
            // This needs to be done at low priority since it uses the registry
            //
            DbgLogInfo(("'Testcap: Receiving SRB_INITIALIZATION_COMPLETE-- SRB=%x\n", pSrb));

            AdapterCompleteInitialization (pSrb);
            break;


        case SRB_UNKNOWN_DEVICE_COMMAND:
        default:

            //
            // this is a request that we do not understand.  Indicate invalid
            // command and complete the request
            //
            pSrb->Status = STATUS_NOT_IMPLEMENTED;

        }

        //
        // Indicate back to the Stream Class that we're done with this SRB
        //
        CompleteDeviceSRB (pSrb);

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                &pSrb,
                &pHwDevExt->AdapterSpinLock,
                &pHwDevExt->ProcessingAdapterSRB,
                &pHwDevExt->AdapterSRBList);

        if (!Busy) {
            break;
        }
    } // end of while there's anything in the queue
}

/*
** AdapterCancelPacket ()
**
**   Request to cancel a packet that is currently in process in the minidriver
**
** Arguments:
**
**   pSrb - pointer to request packet to cancel
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterCancelPacket(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION        pHwDevExt = (PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension;
    PSTREAMEX                   pStrmEx;
    int                         StreamNumber;
    BOOL                        Found = FALSE;

    //
    // Run through all the streams the driver has available
    //

    for (StreamNumber = 0; !Found && (StreamNumber < DRIVER_STREAM_COUNT); StreamNumber++) {

        //
        // Check to see if the stream is in use
        //

        if (pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamNumber]) {

            Found = VideoQueueCancelOneSRB (
                pStrmEx,
                pSrb
                );

        } // if the stream is open
    } // for all streams

    DbgLogInfo(("TestCap: Cancelling SRB %8x Succeeded=%d\n", pSrb, Found));
}

/*
** AdapterTimeoutPacket()
**
**   This routine is called when a packet has been in the minidriver for
**   too long.  The adapter must decide what to do with the packet
**
** Arguments:
**
**   pSrb - pointer to the request packet that timed out
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterTimeoutPacket(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    //
    // Unlike most devices, we need to hold onto data SRBs indefinitely,
    // since the graph could be in a pause state indefinitely
    //

    DbgLogInfo(("TestCap: Timeout    Adapter SRB %8x\n", pSrb));

    pSrb->TimeoutCounter = pSrb->TimeoutOriginal;

}

/*
** CompleteDeviceSRB ()
**
**   This routine is called when a packet is being completed.
**   The optional second notification type is used to indicate ReadyForNext
**
** Arguments:
**
**   pSrb - pointer to the request packet that timed out
**
** Returns:
**
** Side Effects:
**
*/

VOID
STREAMAPI
CompleteDeviceSRB (
     IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    DbgLogTrace(("TestCap: Completing Adapter SRB %8x\n", pSrb));

    StreamClassDeviceNotification( DeviceRequestComplete, pSrb->HwDeviceExtension, pSrb);
}

/*
** IsEqualOrWildGUID()
**
**   Compares two GUIDS like IsEqualGUID(), except allows wildcard matches
**
** Arguments:
**
**         IN GUID *g1
**         IN GUID *g2
**
** Returns:
**
**   TRUE if both GUIDs match or only one is a wildcard
**   FALSE if GUIDs are different or both are wildcards
**
** Side Effects:  none
*/

BOOL
STREAMAPI
IsEqualOrWildGUID(IN GUID *g1, IN GUID *g2)
{
    return (IsEqualGUID(g1, g2) && !IsEqualGUID(g1, &KSDATAFORMAT_TYPE_WILDCARD)
            || ((IsEqualGUID(g1, &KSDATAFORMAT_TYPE_WILDCARD)
                 || IsEqualGUID(g2, &KSDATAFORMAT_TYPE_WILDCARD))
                && !IsEqualGUID(g1, g2))
            );
}

/*
** AdapterCompareGUIDsAndFormatSize()
**
**   Checks for a match on the three GUIDs and FormatSize
**
** Arguments:
**
**         IN DataRange1
**         IN DataRange2
**         BOOL fCompareFormatSize - TRUE when comparing ranges
**                                 - FALSE when comparing formats
**
** Returns:
**
**   TRUE if all elements match
**   FALSE if any are different
**
** Side Effects:  none
*/

BOOL
STREAMAPI
AdapterCompareGUIDsAndFormatSize(
    IN PKSDATARANGE DataRange1,
    IN PKSDATARANGE DataRange2,
    BOOL fCompareFormatSize
    )
{
    return (
        IsEqualOrWildGUID (
            &DataRange1->MajorFormat,
            &DataRange2->MajorFormat) &&
        IsEqualOrWildGUID (
            &DataRange1->SubFormat,
            &DataRange2->SubFormat) &&
        IsEqualOrWildGUID (
            &DataRange1->Specifier,
            &DataRange2->Specifier) &&
        (fCompareFormatSize ?
                (DataRange1->FormatSize == DataRange2->FormatSize) : TRUE ));
}


/*
** AdapterVerifyFormat()
**
**   Checks the validity of a format request by walking through the
**       array of supported KSDATA_RANGEs for a given stream.
**
** Arguments:
**
**   pKSDataFormat - pointer of a KSDATAFORMAT structure.
**   StreamNumber - index of the stream being queried / opened.
**
** Returns:
**
**   TRUE if the format is supported
**   FALSE if the format cannot be suppored
**
** Side Effects:  none
*/

BOOL
STREAMAPI
AdapterVerifyFormat(
    PKSDATAFORMAT pKSDataFormatToVerify,
    int StreamNumber
    )
{
    BOOL                        fOK = FALSE;
    ULONG                       j;
    ULONG                       NumberOfFormatArrayEntries;
    PKSDATAFORMAT               *pAvailableFormats;


    //
    // Check that the stream number is valid
    //

    if (StreamNumber >= DRIVER_STREAM_COUNT) {
        TRAP;
        return FALSE;
    }

    NumberOfFormatArrayEntries =
            Streams[StreamNumber].hwStreamInfo.NumberOfFormatArrayEntries;

    //
    // Get the pointer to the array of available formats
    //

    pAvailableFormats = Streams[StreamNumber].hwStreamInfo.StreamFormatsArray;


    DbgLogInfo(("TestCap: AdapterVerifyFormat, Stream=%d\n", StreamNumber));
    DbgLogInfo(("TestCap: FormatSize=%d\n",  pKSDataFormatToVerify->FormatSize));
    DbgLogInfo(("TestCap: MajorFormat=%x\n", pKSDataFormatToVerify->MajorFormat));

    //
    // Walk the formats supported by the stream
    //

    for (j = 0; j < NumberOfFormatArrayEntries; j++, pAvailableFormats++) {

        // Check for a match on the three GUIDs and format size

        if (!AdapterCompareGUIDsAndFormatSize(
                        pKSDataFormatToVerify,
                        *pAvailableFormats,
                        FALSE /* CompareFormatSize */ )) {
            continue;
        }

        //
        // Now that the three GUIDs match, switch on the Specifier
        // to do a further type-specific check
        //

        // -------------------------------------------------------------------
        // Specifier FORMAT_VideoInfo for VIDEOINFOHEADER
        // -------------------------------------------------------------------

        if (IsEqualGUID (&pKSDataFormatToVerify->Specifier,
                &KSDATAFORMAT_SPECIFIER_VIDEOINFO)) {

            PKS_DATAFORMAT_VIDEOINFOHEADER  pDataFormatVideoInfoHeader =
                    (PKS_DATAFORMAT_VIDEOINFOHEADER) pKSDataFormatToVerify;
            PKS_VIDEOINFOHEADER  pVideoInfoHdrToVerify =
                     (PKS_VIDEOINFOHEADER) &pDataFormatVideoInfoHeader->VideoInfoHeader;
            PKS_DATARANGE_VIDEO             pKSDataRangeVideo = (PKS_DATARANGE_VIDEO) *pAvailableFormats;
            KS_VIDEO_STREAM_CONFIG_CAPS    *pConfigCaps = &pKSDataRangeVideo->ConfigCaps;
            RECT                            rcImage;

            DbgLogInfo(("TestCap: AdapterVerifyFormat\n"));
            DbgLogInfo(("TestCap: pVideoInfoHdrToVerify=%x\n", pVideoInfoHdrToVerify));
            DbgLogInfo(("TestCap: KS_VIDEOINFOHEADER size=%d\n",
                    KS_SIZE_VIDEOHEADER (pVideoInfoHdrToVerify)));
            DbgLogInfo(("TestCap: Width=%d  Height=%d  BitCount=%d\n",
            pVideoInfoHdrToVerify->bmiHeader.biWidth,
            pVideoInfoHdrToVerify->bmiHeader.biHeight,
            pVideoInfoHdrToVerify->bmiHeader.biBitCount));
            DbgLogInfo(("TestCap: biSizeImage=%d\n",
                pVideoInfoHdrToVerify->bmiHeader.biSizeImage));

            /*
            **  HOW BIG IS THE IMAGE REQUESTED (pseudocode follows)
            **
            **  if (IsRectEmpty (&rcTarget) {
            **      SetRect (&rcImage, 0, 0,
            **              BITMAPINFOHEADER.biWidth,
                            BITMAPINFOHEADER.biHeight);
            **  }
            **  else {
            **      // Probably rendering to a DirectDraw surface,
            **      // where biWidth is used to expressed the "stride"
            **      // in units of pixels (not bytes) of the destination surface.
            **      // Therefore, use rcTarget to get the actual image size
            **
            **      rcImage = rcTarget;
            **  }
            */

            if ((pVideoInfoHdrToVerify->rcTarget.right -
                 pVideoInfoHdrToVerify->rcTarget.left <= 0) ||
                (pVideoInfoHdrToVerify->rcTarget.bottom -
                 pVideoInfoHdrToVerify->rcTarget.top <= 0)) {

                 rcImage.left = rcImage.top = 0;
                 rcImage.right = pVideoInfoHdrToVerify->bmiHeader.biWidth;
                 rcImage.bottom = pVideoInfoHdrToVerify->bmiHeader.biHeight;
            }
            else {
                 rcImage = pVideoInfoHdrToVerify->rcTarget;
            }

            //
            // Perform all other verification tests here!!!
            //

            //
            // HOORAY, the format passed all of the tests, so we support it
            //

            fOK = TRUE;
            break;

        } // End of VIDEOINFOHEADER specifier

        // -------------------------------------------------------------------
        // Specifier FORMAT_AnalogVideo for KS_ANALOGVIDEOINFO
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&pKSDataFormatToVerify->Specifier,
                &KSDATAFORMAT_SPECIFIER_ANALOGVIDEO)) {

            //
            // For analog video, the DataRange and DataFormat
            // are identical, so just copy the whole structure
            //

            PKS_DATARANGE_ANALOGVIDEO DataRangeVideo =
                    (PKS_DATARANGE_ANALOGVIDEO) *pAvailableFormats;

            //
            // Perform all other verification tests here!!!
            //

            fOK = TRUE;
            break;

        } // End of KS_ANALOGVIDEOINFO specifier

        // -------------------------------------------------------------------
        // Specifier FORMAT_VBI for KS_VIDEO_VBI
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&pKSDataFormatToVerify->Specifier,
                &KSDATAFORMAT_SPECIFIER_VBI))
        {
            //
            // Do some VBI-specific tests
            //
            PKS_DATAFORMAT_VBIINFOHEADER    pKSVBIDataFormat;

            DbgLogInfo(("Testcap: This is a VBIINFOHEADER format pin.\n" ));

            pKSVBIDataFormat = (PKS_DATAFORMAT_VBIINFOHEADER)pKSDataFormatToVerify;

            //
            // Check VideoStandard, we only support NTSC_M
            //
            if (KS_AnalogVideo_NTSC_M
                == pKSVBIDataFormat->VBIInfoHeader.VideoStandard)
            {
                fOK = TRUE;
                break;
            }
            else
            {
                DbgLogError(
                ("Testcap: AdapterVerifyFormat : VideoStandard(%d) != NTSC_M\n",
                 pKSVBIDataFormat->VBIInfoHeader.VideoStandard));
            }
        }

        // -------------------------------------------------------------------
        // Type FORMAT_NABTS for NABTS pin
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&pKSDataFormatToVerify->SubFormat,
                &KSDATAFORMAT_SUBTYPE_NABTS))
        {
            fOK = TRUE;
            break;
        }

        // -------------------------------------------------------------------
        // for CC pin
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&pKSDataFormatToVerify->SubFormat,
                &KSDATAFORMAT_SUBTYPE_CC))
        {
            fOK = TRUE;
            break;
        }

    } // End of loop on all formats for this stream

    return fOK;
}

/*
** AdapterFormatFromRange()
**
**   Produces a DATAFORMAT given a DATARANGE.
**
**   Think of a DATARANGE as a multidimensional space of all of the possible image
**       sizes, cropping, scaling, and framerate possibilities.  Here, the caller
**       is saying "Out of this set of possibilities, could you verify that my
**       request is acceptable?".  The resulting singular output is a DATAFORMAT.
**       Note that each different colorspace (YUV vs RGB8 vs RGB24)
**       must be represented as a separate DATARANGE.
**
**   Generally, the resulting DATAFORMAT will be immediately used to open a stream
**       in that format.
**
** Arguments:
**
**         IN PHW_STREAM_REQUEST_BLOCK pSrb
**
** Returns:
**
**   TRUE if the format is supported
**   FALSE if the format cannot be suppored
**
** Side Effects:  none
*/

BOOL
STREAMAPI
AdapterFormatFromRange(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_DATA_INTERSECT_INFO IntersectInfo;
    PKSDATARANGE                DataRange;
    BOOL                        OnlyWantsSize;
    BOOL                        MatchFound = FALSE;
    ULONG                       FormatSize;
    ULONG                       StreamNumber;
    ULONG                       j;
    ULONG                       NumberOfFormatArrayEntries;
    PKSDATAFORMAT               *pAvailableFormats;

    IntersectInfo = pSrb->CommandData.IntersectInfo;
    StreamNumber = IntersectInfo->StreamNumber;
    DataRange = IntersectInfo->DataRange;

    //
    // Check that the stream number is valid
    //

    if (StreamNumber >= DRIVER_STREAM_COUNT) {
        pSrb->Status = STATUS_NOT_IMPLEMENTED;
        TRAP;
        return FALSE;
    }

    NumberOfFormatArrayEntries =
            Streams[StreamNumber].hwStreamInfo.NumberOfFormatArrayEntries;

    //
    // Get the pointer to the array of available formats
    //

    pAvailableFormats = Streams[StreamNumber].hwStreamInfo.StreamFormatsArray;

    //
    // Is the caller trying to get the format, or the size of the format?
    //

    OnlyWantsSize = (IntersectInfo->SizeOfDataFormatBuffer == sizeof(ULONG));

    //
    // Walk the formats supported by the stream searching for a match
    // of the three GUIDs which together define a DATARANGE
    //

    for (j = 0; j < NumberOfFormatArrayEntries; j++, pAvailableFormats++) {

        if (!AdapterCompareGUIDsAndFormatSize(
                        DataRange,
                        *pAvailableFormats,
                        TRUE /* CompareFormatSize */)) {
            continue;
        }

        //
        // Now that the three GUIDs match, do a further type-specific check
        //

        // -------------------------------------------------------------------
        // Specifier FORMAT_VideoInfo for VIDEOINFOHEADER
        // -------------------------------------------------------------------

        if (IsEqualGUID (&DataRange->Specifier,
                &KSDATAFORMAT_SPECIFIER_VIDEOINFO)) {

            PKS_DATARANGE_VIDEO DataRangeVideoToVerify =
                    (PKS_DATARANGE_VIDEO) DataRange;
            PKS_DATARANGE_VIDEO DataRangeVideo =
                    (PKS_DATARANGE_VIDEO) *pAvailableFormats;
            PKS_DATAFORMAT_VIDEOINFOHEADER DataFormatVideoInfoHeaderOut;

            //
            // Check that the other fields match
            //
            if ((DataRangeVideoToVerify->bFixedSizeSamples != DataRangeVideo->bFixedSizeSamples) ||
                (DataRangeVideoToVerify->bTemporalCompression != DataRangeVideo->bTemporalCompression) ||
                (DataRangeVideoToVerify->StreamDescriptionFlags != DataRangeVideo->StreamDescriptionFlags) ||
                (DataRangeVideoToVerify->MemoryAllocationFlags != DataRangeVideo->MemoryAllocationFlags) ||
                (RtlCompareMemory (&DataRangeVideoToVerify->ConfigCaps,
                        &DataRangeVideo->ConfigCaps,
                        sizeof (KS_VIDEO_STREAM_CONFIG_CAPS)) !=
                        sizeof (KS_VIDEO_STREAM_CONFIG_CAPS)))
            {
                continue;
            }

            // MATCH FOUND!
            MatchFound = TRUE;
            FormatSize = sizeof (KSDATAFORMAT) +
                KS_SIZE_VIDEOHEADER (&DataRangeVideoToVerify->VideoInfoHeader);

            if (OnlyWantsSize) {
                break;
            }

            // Caller wants the full data format
            if (IntersectInfo->SizeOfDataFormatBuffer < FormatSize) {
                pSrb->Status = STATUS_BUFFER_TOO_SMALL;
                return FALSE;
            }

            // Copy over the KSDATAFORMAT, followed by the
            // actual VideoInfoHeader

            DataFormatVideoInfoHeaderOut = (PKS_DATAFORMAT_VIDEOINFOHEADER) IntersectInfo->DataFormatBuffer;

            // Copy over the KSDATAFORMAT
            RtlCopyMemory(
                &DataFormatVideoInfoHeaderOut->DataFormat,
                &DataRangeVideoToVerify->DataRange,
                sizeof (KSDATARANGE));

            DataFormatVideoInfoHeaderOut->DataFormat.FormatSize = FormatSize;

            // Copy over the callers requested VIDEOINFOHEADER

            RtlCopyMemory(
                &DataFormatVideoInfoHeaderOut->VideoInfoHeader,
                &DataRangeVideoToVerify->VideoInfoHeader,
                KS_SIZE_VIDEOHEADER (&DataRangeVideoToVerify->VideoInfoHeader));

            // Calculate biSizeImage for this request, and put the result in both
            // the biSizeImage field of the bmiHeader AND in the SampleSize field
            // of the DataFormat.
            //
            // Note that for compressed sizes, this calculation will probably not
            // be just width * height * bitdepth

            DataFormatVideoInfoHeaderOut->VideoInfoHeader.bmiHeader.biSizeImage =
                DataFormatVideoInfoHeaderOut->DataFormat.SampleSize =
                KS_DIBSIZE(DataFormatVideoInfoHeaderOut->VideoInfoHeader.bmiHeader);

            //
            // Perform other validation such as cropping and scaling checks
            //

            break;

        } // End of VIDEOINFOHEADER specifier

        // -------------------------------------------------------------------
        // Specifier FORMAT_AnalogVideo for KS_ANALOGVIDEOINFO
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&DataRange->Specifier,
                &KSDATAFORMAT_SPECIFIER_ANALOGVIDEO)) {

            //
            // For analog video, the DataRange and DataFormat
            // are identical, so just copy the whole structure
            //

            PKS_DATARANGE_ANALOGVIDEO DataRangeVideo =
                    (PKS_DATARANGE_ANALOGVIDEO) *pAvailableFormats;

            // MATCH FOUND!
            MatchFound = TRUE;
            FormatSize = sizeof (KS_DATARANGE_ANALOGVIDEO);

            if (OnlyWantsSize) {
                break;
            }

            // Caller wants the full data format
            if (IntersectInfo->SizeOfDataFormatBuffer < FormatSize) {
                pSrb->Status = STATUS_BUFFER_TOO_SMALL;
                return FALSE;
            }

            RtlCopyMemory(
                IntersectInfo->DataFormatBuffer,
                DataRangeVideo,
                sizeof (KS_DATARANGE_ANALOGVIDEO));

            ((PKSDATAFORMAT)IntersectInfo->DataFormatBuffer)->FormatSize = FormatSize;

            break;

        } // End of KS_ANALOGVIDEOINFO specifier

        // -------------------------------------------------------------------
        // Specifier FORMAT_VBI for KS_VIDEO_VBI
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&DataRange->Specifier,
                &KSDATAFORMAT_SPECIFIER_VBI))
        {
            PKS_DATARANGE_VIDEO_VBI pDataRangeVBI =
                (PKS_DATARANGE_VIDEO_VBI)*pAvailableFormats;
            PKS_DATAFORMAT_VBIINFOHEADER InterVBIHdr =
                (PKS_DATAFORMAT_VBIINFOHEADER)IntersectInfo->DataFormatBuffer;

            // MATCH FOUND!
            MatchFound = TRUE;

            FormatSize = sizeof (KS_DATAFORMAT_VBIINFOHEADER);

            // Is the caller trying to get the format, or the size of it?
            if (OnlyWantsSize)
                break;

            // Verify that there is enough room in the supplied buffer
            //   for the whole thing
            if (IntersectInfo->SizeOfDataFormatBuffer < FormatSize)
            {
                if (IntersectInfo->SizeOfDataFormatBuffer > 0) {
                    DbgLogError(
                        ("Testcap::AdapterFormatFromRange: "
                         "Specifier==VBI, Buffer too small=%d vs. %d\n",
                         IntersectInfo->SizeOfDataFormatBuffer,
                         FormatSize));
                }
                pSrb->Status = STATUS_BUFFER_TOO_SMALL;
                return FALSE;
            }

            // If there is room, go ahead...

            RtlCopyMemory(&InterVBIHdr->DataFormat,
                          &pDataRangeVBI->DataRange,
                          sizeof (KSDATARANGE));

            ((PKSDATAFORMAT)IntersectInfo->DataFormatBuffer)->FormatSize = FormatSize;

            RtlCopyMemory(&InterVBIHdr->VBIInfoHeader,
                          &pDataRangeVBI->VBIInfoHeader,
                          sizeof(KS_VBIINFOHEADER));

            break;

        } // End of KS_VIDEO_VBI specifier

        // -------------------------------------------------------------------
        // Type FORMAT_NABTS for NABTS pin
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&DataRange->SubFormat,
                &KSDATAFORMAT_SUBTYPE_NABTS))
        {
            PKSDATARANGE pDataRange = (PKSDATARANGE)*pAvailableFormats;

            // MATCH FOUND!
            MatchFound = TRUE;

            FormatSize = sizeof (KSDATAFORMAT);

            // Is the caller trying to get the format, or the size of it?
            if (OnlyWantsSize)
                break;

            // Verify that there is enough room in the supplied buffer
            //   for the whole thing
            if (IntersectInfo->SizeOfDataFormatBuffer >= FormatSize)
            {
                RtlCopyMemory(IntersectInfo->DataFormatBuffer,
                              pDataRange,
                              FormatSize);

                ((PKSDATAFORMAT)IntersectInfo->DataFormatBuffer)->FormatSize = FormatSize;
            }
            else
            {
                if (IntersectInfo->SizeOfDataFormatBuffer > 0) {
                    DbgLogError(
                        ("Testcap::AdapterFormatFromRange: "
                         "SubFormat==NABTS, Buffer too small=%d vs. %d\n",
                         IntersectInfo->SizeOfDataFormatBuffer,
                         FormatSize));
                }
                pSrb->Status = STATUS_BUFFER_TOO_SMALL;
                return FALSE;
            }

            break;

        } // End of KS_SUBTYPE_NABTS

        // -------------------------------------------------------------------
        // for CC pin
        // -------------------------------------------------------------------

        else if (IsEqualGUID (&DataRange->SubFormat,
                &KSDATAFORMAT_SUBTYPE_CC))
        {
            PKSDATARANGE pDataRange = (PKSDATARANGE)*pAvailableFormats;

            // MATCH FOUND!
            MatchFound = TRUE;

            FormatSize = sizeof (KSDATAFORMAT);

            // Is the caller trying to get the format, or the size of it?
            if (OnlyWantsSize)
                break;

            // Verify that there is enough room in the supplied buffer
            //   for the whole thing
            if (IntersectInfo->SizeOfDataFormatBuffer >= FormatSize)
            {
                RtlCopyMemory(IntersectInfo->DataFormatBuffer,
                              pDataRange,
                              FormatSize);

                ((PKSDATAFORMAT)IntersectInfo->DataFormatBuffer)->FormatSize = FormatSize;
            }
            else
            {
                if (IntersectInfo->SizeOfDataFormatBuffer > 0) {
                    DbgLogError(
                        ("Testcap::AdapterFormatFromRange: "
                         "SubFormat==CC, Buffer too small=%d vs. %d\n",
                         IntersectInfo->SizeOfDataFormatBuffer,
                         FormatSize));
                }
                pSrb->Status = STATUS_BUFFER_TOO_SMALL;
                return FALSE;
            }

            break;

        } // End of CC pin format check

        else {
            pSrb->Status = STATUS_NO_MATCH;
            return FALSE;
        }

    } // End of loop on all formats for this stream

    if (!MatchFound) {
        pSrb->Status = STATUS_NO_MATCH;
        return FALSE;
    }

    if (OnlyWantsSize) {
        *(PULONG) IntersectInfo->DataFormatBuffer = FormatSize;
        FormatSize = sizeof(ULONG);
    }
    pSrb->ActualBytesTransferred = FormatSize;
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capmain.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#ifndef __CAPMAIN_H__
#define __CAPMAIN_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// ------------------------------------------------------------------------
// The master list of all streams supported by this driver
// ------------------------------------------------------------------------

// Warning:  The stream numbers below MUST be the same as its position
//           in the Streams[] array in the capstrm.h file.
typedef enum {
    STREAM_Capture = 0,
    STREAM_Preview,
    STREAM_VBI,
    STREAM_CC,
    STREAM_NABTS,
    STREAM_AnalogVideoInput,
    MAX_TESTCAP_STREAMS         // This entry MUST be last; it's the size
}; 

// ------------------------------------------------------------------------
//  Other misc stuff
// ------------------------------------------------------------------------

#ifndef FIELDOFFSET
#define FIELDOFFSET(type, field)        ((LONG_PTR)(&((type *)1)->field)-1)
#endif

#ifndef mmioFOURCC    
#define mmioFOURCC( ch0, ch1, ch2, ch3 )                \
        ( (DWORD)(BYTE)(ch0) | ( (DWORD)(BYTE)(ch1) << 8 ) |    \
        ( (DWORD)(BYTE)(ch2) << 16 ) | ( (DWORD)(BYTE)(ch3) << 24 ) )
#endif
  
#define FOURCC_YUV422       mmioFOURCC('U', 'Y', 'V', 'Y')

typedef struct _STREAMX;
typedef struct _STREAMX *PSTREAMX;

typedef struct _COMPRESSION_SETTINGS {
    LONG                     CompressionKeyFrameRate;
    LONG                     CompressionPFramesPerKeyFrame;
    LONG                     CompressionQuality;
} COMPRESSION_SETTINGS, *PCOMPRESSION_SETTINGS;

//
// definition of the full HW device extension structure This is the structure
// that will be allocated in HW_INITIALIZATION by the stream class driver
// Any information that is used in processing a device request (as opposed to
// a STREAM based request) should be in this structure.  A pointer to this
// structure will be passed in all requests to the minidriver. (See
// HW_STREAM_REQUEST_BLOCK in STRMINI.H)
//

typedef struct _HW_DEVICE_EXTENSION {
    PULONG                   ioBaseLocal;                           // board base address
    USHORT                   Irq;                                   // IRQ level
    BOOLEAN                  IRQExpected;                           // IRQ expected
    PSTREAMX                 pStrmEx [MAX_TESTCAP_STREAMS];         // Pointers to each stream
    UINT                     ActualInstances [MAX_TESTCAP_STREAMS]; // Counter of instances per stream
    PDEVICE_OBJECT           PDO;                                   // Physical Device Object
    DEVICE_POWER_STATE       DeviceState;                           // D0 ... D3

    // Spinlock and Queue for the Adapter
    BOOL                     AdapterQueueInitialized;               // Stays TRUE after first init
    KSPIN_LOCK               AdapterSpinLock;                       // Multiprocessor safe access to AdapterSRBList
    LIST_ENTRY               AdapterSRBList;                        // List of pending adapter commands
    BOOL                     ProcessingAdapterSRB;                  // Master flag which prevents reentry

    // Spinlocks and Queues for each data stream
    LIST_ENTRY               StreamSRBList[MAX_TESTCAP_STREAMS];    // List of pending read requests
    KSPIN_LOCK               StreamSRBSpinLock[MAX_TESTCAP_STREAMS];// Multiprocessor safe access to StreamSRBList
    int                      StreamSRBListSize[MAX_TESTCAP_STREAMS];// Number of entries in the list

    // Control Queues for each data stream
    LIST_ENTRY               StreamControlSRBList[MAX_TESTCAP_STREAMS];
    BOOL                     ProcessingControlSRB[MAX_TESTCAP_STREAMS];

    // Unique identifier for the analog video input pin
    KSPIN_MEDIUM             AnalogVideoInputMedium;
    UINT                     DriverMediumInstanceCount;             // Unique Medium.Id for multiple cards

    // Crossbar settings
    LONG                     VideoInputConnected;                   // which input is the video out connected to?
    LONG                     AudioInputConnected;                   // which input is the audio out connected to?

    // TV Tuner settings
    ULONG                    TunerMode;                 // TV, FM, AM, ATSC
    ULONG                    Frequency;
    ULONG                    VideoStandard;
    ULONG                    TuningQuality;
    ULONG                    TunerInput;
    ULONG                    Country;
    ULONG                    Channel;
    ULONG                    Busy;

    // TV Audio settings
    ULONG                    TVAudioMode;

    // VideoProcAmp settings
    LONG                     Brightness;
    LONG                     BrightnessFlags;
    LONG                     Contrast;
    LONG                     ContrastFlags;
    LONG                     ColorEnable;
    LONG                     ColorEnableFlags;
    
    // CameraControl settings
    LONG                     Focus;
    LONG                     FocusFlags;
    LONG                     Zoom;
    LONG                     ZoomFlags;
    
    // AnalogVideoDecoder settings
    LONG                     VideoDecoderVideoStandard;
    LONG                     VideoDecoderOutputEnable;
    LONG                     VideoDecoderVCRTiming;

    // VideoControl settings (these are set if a pin is not opened,
    // otherwise, the STREAMEX values are used.
    LONG                     VideoControlMode;

    // Compressor settings (these are set if a pin is not opened,
    // otherwise, the STREAMEX values are used.
    COMPRESSION_SETTINGS     CompressionSettings;

    // Channel Change information
    KS_TVTUNER_CHANGE_INFO   TVTunerChangeInfo;

    // Bits indicating protection status; eg, has Macrovision been detected?
    ULONG                    ProtectionStatus;

} HW_DEVICE_EXTENSION, *PHW_DEVICE_EXTENSION;

//
// this structure is our per stream extension structure.  This stores
// information that is relevant on a per stream basis.  Whenever a new stream
// is opened, the stream class driver will allocate whatever extension size
// is specified in the HwInitData.PerStreamExtensionSize.
//
 
typedef struct _STREAMEX {
    PHW_DEVICE_EXTENSION        pHwDevExt;          // For timer use
    PHW_STREAM_OBJECT           pStreamObject;      // For timer use
    KS_VIDEOINFOHEADER         *pVideoInfoHeader;   // format (variable size!)
    KS_DATARANGE_VIDEO_VBI     *pVBIStreamFormat;
    KS_FRAME_INFO               FrameInfo;          // PictureNumber, etc.
    KS_VBI_FRAME_INFO           VBIFrameInfo;       // PictureNumber, etc.
    ULONG                       fDiscontinuity;     // Discontinuity since last valid
    KSSTATE                     KSState;            // Run, Stop, Pause
    UCHAR                       LineBuffer[720 * 3];// working buffer (RGB24)

    // Clock 
    HANDLE                      hMasterClock;       // Master clock to use
    REFERENCE_TIME              QST_Now;            // KeQuerySystemTime currently
    REFERENCE_TIME              QST_NextFrame;      // When to capture the next frame
    REFERENCE_TIME              QST_StreamTime;     // Stream time reported by master clock

    REFERENCE_TIME              AvgTimePerFrame;    // Extracted from pVideoInfoHeader

    // Compressor settings (note these are duplicated in the 
    // HW_DEVICE_EXTENSION to allow setting these before a pin is created)
    COMPRESSION_SETTINGS        CompressionSettings;

    // VideoControl settings (note these are duplicated in the 
    // HW_DEVICE_EXTENSION to allow setting these before a pin is created)
    LONG                        VideoControlMode;

    // Kernel DDraw interface
    BOOL                        KernelDirectDrawRegistered;
    HANDLE                      UserDirectDrawHandle;       // DD itself
    HANDLE                      KernelDirectDrawHandle;
    BOOL                        PreEventOccurred;
    BOOL                        PostEventOccurred;

    BOOL                        SentVBIInfoHeader;
} STREAMEX, *PSTREAMEX;

//
// this structure defines the per request extension.  It defines any storage
// space that the mini driver may need in each request packet.
//

typedef struct _SRB_EXTENSION {
    LIST_ENTRY                  ListEntry;
    PHW_STREAM_REQUEST_BLOCK    pSrb;
    HANDLE                      UserSurfaceHandle;      // DDraw
    HANDLE                      KernelSurfaceHandle;    // DDraw
} SRB_EXTENSION, * PSRB_EXTENSION;

// -------------------------------------------------------------------
//
// Adapter level prototypes
//
// These functions affect the device as a whole, as opposed to 
// affecting individual streams.
//
// -------------------------------------------------------------------

//
// DriverEntry:
//
// This routine is called when the mini driver is first loaded.  The driver
// should then call the StreamClassRegisterAdapter function to register with
// the stream class driver
//

ULONG DriverEntry (PVOID Context1, PVOID Context2);

//
// This routine is called by the stream class driver with configuration
// information for an adapter that the mini driver should load on.  The mini
// driver should still perform a small verification to determine that the
// adapter is present at the specified addresses, but should not attempt to
// find an adapter as it would have with previous NT miniports.
//
// All initialization of the adapter should also be performed at this time.
//

BOOLEAN STREAMAPI HwInitialize (IN OUT PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This routine is called when the system is going to remove or disable the
// device.
//
// The mini-driver should free any system resources that it allocated at this
// time.  Note that system resources allocated for the mini-driver by the
// stream class driver will be free'd by the stream driver, and should not be
// free'd in this routine.  (Such as the HW_DEVICE_EXTENSION)
//

BOOLEAN STREAMAPI HwUnInitialize ( PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the Hardware Interrupt Handler.  This routine
// will be called whenever the minidriver receives an interrupt
//

BOOLEAN HwInterrupt ( IN PHW_DEVICE_EXTENSION pDeviceExtension );

//
// This is the prototype for the stream enumeration function.  This routine
// provides the stream class driver with the information on data stream types
// supported
//

VOID STREAMAPI AdapterStreamInfo(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the stream open function
//

VOID STREAMAPI AdapterOpenStream(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the stream close function
//

VOID STREAMAPI AdapterCloseStream(PHW_STREAM_REQUEST_BLOCK pSrb);

//
// This is the prototype for the AdapterReceivePacket routine.  This is the
// entry point for command packets that are sent to the adapter (not to a
// specific open stream)
//

VOID STREAMAPI AdapterReceivePacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//
// This is the protoype for the cancel packet routine.  This routine enables
// the stream class driver to cancel an outstanding packet.
//

VOID STREAMAPI AdapterCancelPacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//
// This is the packet timeout function.  The adapter may choose to ignore a
// packet timeout, or rest the adapter and cancel the requests, as required.
//

VOID STREAMAPI AdapterTimeoutPacket(IN PHW_STREAM_REQUEST_BLOCK Srb);

//
// Adapter level property set handling
//

VOID STREAMAPI AdapterGetCrossbarProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetCrossbarProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetTunerProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetTunerProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetVideoProcAmpProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetVideoProcAmpProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetCameraControlProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetCameraControlProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetTVAudioProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetTVAudioProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetAnalogVideoDecoderProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetAnalogVideoDecoderProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetVideoControlProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetVideoControlProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetVideoCompressionProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetVideoCompressionProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterSetProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AdapterGetProperty(IN PHW_STREAM_REQUEST_BLOCK pSrb);

BOOL
STREAMAPI 
AdapterVerifyFormat(
        PKSDATAFORMAT pKSDataFormatToVerify, 
        int StreamNumber);

BOOL
STREAMAPI 
AdapterFormatFromRange(
        IN PHW_STREAM_REQUEST_BLOCK pSrb);

VOID
STREAMAPI 
CompleteDeviceSRB (
         IN PHW_STREAM_REQUEST_BLOCK pSrb
        );

VOID
STREAMAPI
AdapterSetInstance ( 
    PHW_STREAM_REQUEST_BLOCK pSrb
    );


//
// prototypes for general queue management using a busy flag
//

BOOL
STREAMAPI 
AddToListIfBusy (
    IN PHW_STREAM_REQUEST_BLOCK pSrb,
    IN KSPIN_LOCK              *SpinLock,
    IN OUT BOOL                *BusyFlag,
    IN LIST_ENTRY              *ListHead
    );

BOOL
STREAMAPI 
RemoveFromListIfAvailable (
    IN OUT PHW_STREAM_REQUEST_BLOCK *pSrb,
    IN KSPIN_LOCK                   *SpinLock,
    IN OUT BOOL                     *BusyFlag,
    IN LIST_ENTRY                   *ListHead
    );


// -------------------------------------------------------------------
//
// Stream level prototypes
//
// These functions affect individual streams, as opposed to
// affecting the device as a whole.
//
// -------------------------------------------------------------------

//
// Routines to manage the SRB queue on a per stream basis
//

VOID
STREAMAPI 
VideoQueueAddSRB (
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    );

PHW_STREAM_REQUEST_BLOCK 
STREAMAPI 
VideoQueueRemoveSRB (
    PHW_DEVICE_EXTENSION pHwDevExt,
    int StreamNumber
    );

VOID
STREAMAPI 
VideoQueueCancelAllSRBs (
    PSTREAMEX pStrmEx
    );

BOOL
STREAMAPI 
VideoQueueCancelOneSRB (
    PSTREAMEX pStrmEx,
    PHW_STREAM_REQUEST_BLOCK pSrbToCancel
    );

//
// StreamFormat declarations
//
extern KS_DATARANGE_VIDEO_VBI StreamFormatVBI;
extern KSDATARANGE            StreamFormatNABTS;
extern KSDATARANGE            StreamFormatCC;


//
// Data packet handlers
//
//
// prototypes for data handling routines
//
VOID STREAMAPI CompleteStreamSRB (IN PHW_STREAM_REQUEST_BLOCK pSrb);
BOOL STREAMAPI VideoSetFormat(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoReceiveDataPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoReceiveCtrlPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AnalogVideoReceiveDataPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI AnalogVideoReceiveCtrlPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VBIReceiveDataPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VBIReceiveCtrlPacket(IN PHW_STREAM_REQUEST_BLOCK pSrb);

VOID STREAMAPI EnableIRQ(PHW_STREAM_OBJECT pstrm);
VOID STREAMAPI DisableIRQ(PHW_STREAM_OBJECT pstrm);

//
// prototypes for properties and states
//

VOID STREAMAPI VideoSetState(PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoGetState(PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoSetProperty(PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoGetProperty(PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoStreamGetConnectionProperty (PHW_STREAM_REQUEST_BLOCK pSrb);
VOID STREAMAPI VideoStreamGetDroppedFramesProperty(PHW_STREAM_REQUEST_BLOCK pSrb);

// 
// stream clock functions
//
VOID 
STREAMAPI 
VideoIndicateMasterClock (PHW_STREAM_REQUEST_BLOCK pSrb);

//
// The point of it all
// 
VOID 
STREAMAPI 
VideoCaptureRoutine(
    IN PSTREAMEX pStrmEx
    );

#ifdef    __cplusplus
}
#endif // __cplusplus

#endif //__CAPMAIN_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capprop.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

//
// This file handles all adapter property sets
//


#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "capdebug.h"
#include "capxfer.h"
#define DEFINE_MEDIUMS
#include "mediums.h"

// -------------------------------------------------------------------
// A few notes about property set handling
//  
// Property sets used in Testcap are of two varieties, those that have
// default values, ranges, and stepping, such as VideoProcAmp and CameraControl,
// and those which don't have defaults and ranges, such as TVTuner and
// Crossbar.
// 
// Default values and stepping are established by tables in capprop.h,
// no code is required to implement this other than initally creating the tables.
// 
// Many of the property sets require the ability to modify a number
// of input parameters.  Since KS doesn't allow this inherently, you'll
// note that some property sets require copying the provided input parameters
// to the ouput parameter list, effectively creating a "read, modify, write"
// capability.  For this reason, the input and output parameter lists
// use identical structures.
//
// On an SRB_GET_DEVICE_PROPERTY, read-only input data to the driver is provided as:
//      pSrb->CommandData.PropertyInfo
//
// ... while the output data pointer is:
//      pSrb->CommandData.PropertyInfo.PropertyInfo
// 
// -------------------------------------------------------------------


// -------------------------------------------------------------------
// XBar pin definitions
// -------------------------------------------------------------------

typedef struct _XBAR_PIN_DESCRIPTION {
    ULONG       PinType;
    ULONG       SynthImageCommand;    // This driver simulates different inputs by synthesizing images
    ULONG       RelatedPinIndex;
    const KSPIN_MEDIUM *Medium;               // Describes hardware connectivity
} XBAR_PIN_DESCRIPTION, *PXBAR_PIN_DESCRIPTION;


XBAR_PIN_DESCRIPTION XBarInputPins[] = {

    // First list the video input pins, then the audio inputs, then the output pins
    // Note that audio pin index 6 is shared between two video inputs (index 1 and index 2)
    

    //    PinType                       SynthImageCommand                     RelatedPinIndex   Medium
    /*0*/ KS_PhysConn_Video_Tuner,         IMAGE_XFER_NTSC_EIA_100AMP_100SAT,    5,             &CrossbarMediums[0],
    /*1*/ KS_PhysConn_Video_Composite,     IMAGE_XFER_NTSC_EIA_75AMP_100SAT,     6,             &CrossbarMediums[1],
    /*2*/ KS_PhysConn_Video_SVideo,        IMAGE_XFER_BLACK,                     6,             &CrossbarMediums[2],
    /*3*/ KS_PhysConn_Video_Tuner,         IMAGE_XFER_WHITE,                     7,             &CrossbarMediums[3],
    /*4*/ KS_PhysConn_Video_Composite,     IMAGE_XFER_GRAY_INCREASING,           8,             &CrossbarMediums[4],
    
    /*5*/ KS_PhysConn_Audio_Tuner,         0,                                    0,             &CrossbarMediums[5],
    /*6*/ KS_PhysConn_Audio_Line,          0,                                    1,             &CrossbarMediums[6],
    /*7*/ KS_PhysConn_Audio_Tuner,         0,                                    3,             &CrossbarMediums[7],
    /*8*/ KS_PhysConn_Audio_Line,          0,                                    4,             &CrossbarMediums[8],

};
#define NUMBER_OF_XBAR_INPUTS       (SIZEOF_ARRAY (XBarInputPins))


XBAR_PIN_DESCRIPTION XBarOutputPins[] = {

    //    PinType                       SynthImageCommand                     RelatedPinIndex

    /*0*/ KS_PhysConn_Video_VideoDecoder,  0,                                    1,             &CrossbarMediums[9],
    /*1*/ KS_PhysConn_Audio_AudioDecoder,  0,                                    0,             &CrossbarMediums[10],
};
#define NUMBER_OF_XBAR_OUTPUTS      (SIZEOF_ARRAY (XBarOutputPins))

#define NUMBER_OF_XBAR_PINS_TOTAL   (NUMBER_OF_XBAR_INPUTS + NUMBER_OF_XBAR_OUTPUTS)


// -------------------------------------------------------------------
// XBar Property Set functions
// -------------------------------------------------------------------

/*
** AdapterSetCrossbarProperty ()
**
**    Handles Set operations on the Crossbar property set.
**      Testcap uses this to select an image to synthesize.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetCrossbarProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id  = pSPD->Property->Id;              // index of the property
    ULONG nS  = pSPD->PropertyOutputSize;        // size of data supplied

    switch (Id) {
    case KSPROPERTY_CROSSBAR_ROUTE:                       //  W 
    {
        PKSPROPERTY_CROSSBAR_ROUTE_S  pRoute = 
            (PKSPROPERTY_CROSSBAR_ROUTE_S)pSPD->PropertyInfo;   

        ASSERT (nS >= sizeof (KSPROPERTY_CROSSBAR_ROUTE_S));

        // Copy the input property info to the output property info
        RtlCopyMemory(  pRoute, 
                        pSPD->Property, 
                        sizeof (KSPROPERTY_CROSSBAR_ROUTE_S));


        // Default to failure
        pRoute->CanRoute = 0;

        // if video
        if (pRoute->IndexOutputPin == 0) {
            if (pRoute->IndexInputPin <= 4) {
                pHwDevExt->VideoInputConnected = pRoute->IndexInputPin;
                pRoute->CanRoute = 1;
            }
        }
        // if audio
        else if (pRoute->IndexOutputPin == 1) {
            // Special case!  Audio Routing of (-1) means mute!!!
            if (pRoute->IndexInputPin == -1) {
                pHwDevExt->AudioInputConnected = pRoute->IndexInputPin;
                pRoute->CanRoute = 1;
            }
            else if (pRoute->IndexInputPin > 4 && pRoute->IndexInputPin <= 8) {
                pHwDevExt->AudioInputConnected = pRoute->IndexInputPin;
                pRoute->CanRoute = 1;
            }
        }

        // Somebody passed bogus data
        if (pRoute->CanRoute == 0) {
            pSrb->Status = STATUS_INVALID_PARAMETER;
        }
    }
    break;


    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetCrossbarProperty ()
**
**    Handles Get operations on the Crossbar property set.
**      Testcap uses this to select an image to synthesize.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetCrossbarProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id  = pSPD->Property->Id;              // index of the property
    ULONG nS  = pSPD->PropertyOutputSize;        // size of data supplied

    switch (Id) {

    case KSPROPERTY_CROSSBAR_CAPS:                  // R 
    {
        PKSPROPERTY_CROSSBAR_CAPS_S  pCaps = 
            (PKSPROPERTY_CROSSBAR_CAPS_S)pSPD->PropertyInfo;   

        if (nS < sizeof (KSPROPERTY_CROSSBAR_CAPS_S))
            break;

        // Copy the input property info to the output property info
        RtlCopyMemory(  pCaps, 
                        pSPD->Property, 
                        sizeof (KSPROPERTY_CROSSBAR_CAPS_S));

        pCaps->NumberOfInputs  = NUMBER_OF_XBAR_INPUTS;
        pCaps->NumberOfOutputs = NUMBER_OF_XBAR_OUTPUTS;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_CROSSBAR_CAPS_S);
    }
    break;


    case KSPROPERTY_CROSSBAR_CAN_ROUTE:                   // R 
    {
        PKSPROPERTY_CROSSBAR_ROUTE_S  pRoute = 
            (PKSPROPERTY_CROSSBAR_ROUTE_S)pSPD->PropertyInfo;   

        if (nS < sizeof (KSPROPERTY_CROSSBAR_ROUTE_S))
            break;

        // Copy the input property info to the output property info
        RtlCopyMemory(  pRoute, 
                        pSPD->Property, 
                        sizeof (KSPROPERTY_CROSSBAR_ROUTE_S));

        // Special case, audio output routed to (-1) means mute
        if (pRoute->IndexOutputPin == 1 && pRoute->IndexInputPin == -1) {
            pRoute->CanRoute = TRUE;
        }
        else if ((pRoute->IndexInputPin  >= NUMBER_OF_XBAR_INPUTS) ||
            (pRoute->IndexOutputPin >= NUMBER_OF_XBAR_OUTPUTS)) {

            pRoute->CanRoute = FALSE;
        }
        else if ((pRoute->IndexInputPin <= 4) &&
            (pRoute->IndexOutputPin == 0) ||
            (pRoute->IndexInputPin >= 5) &&
            (pRoute->IndexOutputPin == 1)) {

            // This driver allows any video input to connect to any video output
            // and any audio input to connect to any audio output
            pRoute->CanRoute = TRUE;
        }
        else {
            pRoute->CanRoute = FALSE;
        }
        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_CROSSBAR_ROUTE_S);
    }
    break;


    case KSPROPERTY_CROSSBAR_PININFO:                     // R
    { 
        PKSPROPERTY_CROSSBAR_PININFO_S  pPinInfo = 
            (PKSPROPERTY_CROSSBAR_PININFO_S)pSPD->PropertyInfo;   

        if (nS < sizeof (KSPROPERTY_CROSSBAR_PININFO_S))
            break;

        // Copy the input property info to the output property info
        RtlCopyMemory(  pPinInfo, 
                        pSPD->Property, 
                        sizeof (KSPROPERTY_CROSSBAR_PININFO_S));

        if (pPinInfo->Direction == KSPIN_DATAFLOW_IN) {

            ASSERT (pPinInfo->Index < NUMBER_OF_XBAR_INPUTS);

            pPinInfo->PinType          = XBarInputPins[pPinInfo->Index].PinType;
            pPinInfo->RelatedPinIndex  = XBarInputPins[pPinInfo->Index].RelatedPinIndex;
            pPinInfo->Medium           = *XBarInputPins[pPinInfo->Index].Medium;
        }
        else {

            ASSERT (pPinInfo->Index < NUMBER_OF_XBAR_OUTPUTS);

            pPinInfo->PinType          = XBarOutputPins[pPinInfo->Index].PinType;
            pPinInfo->RelatedPinIndex  = XBarOutputPins[pPinInfo->Index].RelatedPinIndex;
            pPinInfo->Medium           = *XBarOutputPins[pPinInfo->Index].Medium;
        }

        pPinInfo->Medium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_CROSSBAR_PININFO_S);
    }
    break;


    case KSPROPERTY_CROSSBAR_ROUTE:                   // R 
    {
        PKSPROPERTY_CROSSBAR_ROUTE_S  pRoute = 
            (PKSPROPERTY_CROSSBAR_ROUTE_S)pSPD->PropertyInfo;   

        if (nS < sizeof (KSPROPERTY_CROSSBAR_ROUTE_S))
            break;

        // Copy the input property info to the output property info
        RtlCopyMemory(  pRoute, 
                        pSPD->Property, 
                        sizeof (KSPROPERTY_CROSSBAR_ROUTE_S));

        // Sanity check
        if (pRoute->IndexOutputPin >= NUMBER_OF_XBAR_OUTPUTS) {
            pRoute->CanRoute = FALSE;
        }
        // querying the the video output pin
        else if (pRoute->IndexOutputPin == 0) {
            pRoute->IndexInputPin = pHwDevExt->VideoInputConnected;
            pRoute->CanRoute = TRUE;
        }
        // querying the the audio output pin
        else if (pRoute->IndexOutputPin == 1) {
            pRoute->IndexInputPin = pHwDevExt->AudioInputConnected;
            pRoute->CanRoute = TRUE;
        }
        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_CROSSBAR_ROUTE_S);
    }
    break;


    default:
        TRAP;
        break;
    }
}

// -------------------------------------------------------------------
// TVTuner Property Set functions
// -------------------------------------------------------------------

/*
** AdapterSetTunerProperty ()
**
**    Handles Set operations on the TvTuner property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetTunerProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG nS = pSPD->PropertyOutputSize;        // size of data supplied

    switch (Id) {

    case KSPROPERTY_TUNER_MODE:
    {
         PKSPROPERTY_TUNER_MODE_S pMode =
            (PKSPROPERTY_TUNER_MODE_S)pSPD->Property;
         ASSERT (pMode->Mode & (KSPROPERTY_TUNER_MODE_TV       |
                                KSPROPERTY_TUNER_MODE_AM_RADIO |
                                KSPROPERTY_TUNER_MODE_FM_RADIO |
                                KSPROPERTY_TUNER_MODE_ATSC));
         pHwDevExt->TunerMode = pMode->Mode;
    }
    break;

    case KSPROPERTY_TUNER_STANDARD:
    {
        PKSPROPERTY_TUNER_STANDARD_S pStandard_S = 
            (PKSPROPERTY_TUNER_STANDARD_S) pSPD->Property;
        pHwDevExt->VideoStandard = pStandard_S->Standard;
    }
    break;

    case KSPROPERTY_TUNER_FREQUENCY:
    {
        PKSPROPERTY_TUNER_FREQUENCY_S pFreq_S = 
            (PKSPROPERTY_TUNER_FREQUENCY_S) pSPD->Property;
        pHwDevExt->Frequency = pFreq_S->Frequency;
        pHwDevExt->Country = pFreq_S->Country;
        pHwDevExt->Channel = pFreq_S->Channel;
    }
    break;

    case KSPROPERTY_TUNER_INPUT:
    {
        PKSPROPERTY_TUNER_INPUT_S pInput_S = 
            (PKSPROPERTY_TUNER_INPUT_S) pSPD->Property;
        pHwDevExt->TunerInput = pInput_S->InputIndex;
    }
    break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetTunerProperty ()
**
**    Handles Get operations on the TvTuner property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetTunerProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG nS = pSPD->PropertyOutputSize;        // size of data supplied
    PVOID pV = pSPD->PropertyInfo;              // pointer to the output data

    ASSERT (nS >= sizeof (LONG));

    switch (Id) {

    case KSPROPERTY_TUNER_CAPS:
    {
         PKSPROPERTY_TUNER_CAPS_S pCaps =
            (PKSPROPERTY_TUNER_CAPS_S)pSPD->Property;
         ASSERT (nS >= sizeof( KSPROPERTY_TUNER_CAPS_S ) );

         // now work with the output buffer
         pCaps =(PKSPROPERTY_TUNER_CAPS_S)pV;

         pCaps->ModesSupported = 
             KSPROPERTY_TUNER_MODE_TV       |
             KSPROPERTY_TUNER_MODE_FM_RADIO |
             KSPROPERTY_TUNER_MODE_AM_RADIO |
             KSPROPERTY_TUNER_MODE_ATSC;

         pCaps->VideoMedium = TVTunerMediums[0];
         pCaps->VideoMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

         pCaps->TVAudioMedium = TVTunerMediums[1];
         pCaps->TVAudioMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

         pCaps->RadioAudioMedium = TVTunerMediums[2];   // No separate radio audio pin?
         pCaps->RadioAudioMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

         pSrb->ActualBytesTransferred = sizeof( KSPROPERTY_TUNER_CAPS_S );
    }
    break;

    case KSPROPERTY_TUNER_MODE:
    {
        PKSPROPERTY_TUNER_MODE_S pMode =
            (PKSPROPERTY_TUNER_MODE_S)pSPD->Property;
        ASSERT (nS >= sizeof( KSPROPERTY_TUNER_MODE_S ) );

        // now work with the output buffer
        pMode =(PKSPROPERTY_TUNER_MODE_S)pV;

        pMode->Mode = pHwDevExt->TunerMode;

        pSrb->ActualBytesTransferred = sizeof( KSPROPERTY_TUNER_MODE_S);
    }
    break;

    case KSPROPERTY_TUNER_MODE_CAPS:
    {
        PKSPROPERTY_TUNER_MODE_CAPS_S pCaps = 
                (PKSPROPERTY_TUNER_MODE_CAPS_S) pSPD->Property;

        ASSERT (nS >= sizeof (KSPROPERTY_TUNER_MODE_CAPS_S));

        // now work with the output buffer
        pCaps = (PKSPROPERTY_TUNER_MODE_CAPS_S) pV;

        pCaps->Mode = ((PKSPROPERTY_TUNER_MODE_CAPS_S) pSPD->Property)->Mode;
        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TUNER_MODE_CAPS_S);

        switch (pCaps->Mode) {
        
        case KSPROPERTY_TUNER_MODE_TV:
        case KSPROPERTY_TUNER_MODE_ATSC:
            // List the formats actually supported by the tuner in this mode
            pCaps->StandardsSupported = 
                (pHwDevExt->TunerMode == KSPROPERTY_TUNER_MODE_ATSC) ?
                       KS_AnalogVideo_NTSC_M 
                :
                       KS_AnalogVideo_NTSC_M
    
                    |  KS_AnalogVideo_PAL_B    
                    |  KS_AnalogVideo_PAL_D    
                //  |  KS_AnalogVideo_PAL_H    
                //  |  KS_AnalogVideo_PAL_I    
                    |  KS_AnalogVideo_PAL_M    
                    |  KS_AnalogVideo_PAL_N    
                    |  KS_AnalogVideo_PAL_N_COMBO
    
                //  |  KS_AnalogVideo_SECAM_B  
                //  |  KS_AnalogVideo_SECAM_D  
                //  |  KS_AnalogVideo_SECAM_G  
                //  |  KS_AnalogVideo_SECAM_H  
                //  |  KS_AnalogVideo_SECAM_K  
                //  |  KS_AnalogVideo_SECAM_K1 
                //  |  KS_AnalogVideo_SECAM_L  
                    ;
    
            //
            // Get the min and max frequencies supported
            //
    
            pCaps->MinFrequency =  55250000L;
            pCaps->MaxFrequency = 997250000L;
    
            // What is the frequency step size?
            pCaps->TuningGranularity =  62500L;
    
            // How many inputs are on the tuner?
            pCaps->NumberOfInputs = 1;
    
            // What is the maximum settling time in milliseconds?
            pCaps->SettlingTime = 100;
        
            //
            // Strategy defines how the tuner knows when it is in tune:
            // 
            // KS_TUNER_STRATEGY_PLL (Has PLL offset information)
            // KS_TUNER_STRATEGY_SIGNAL_STRENGTH (has signal strength info)
            // KS_TUNER_STRATEGY_DRIVER_TUNES (driver handles all fine tuning)
            //
            pCaps->Strategy = KS_TUNER_STRATEGY_PLL;
            break;

        case KSPROPERTY_TUNER_MODE_FM_RADIO:
            pCaps->StandardsSupported = 0;
            pCaps->MinFrequency =  88100000L;
            pCaps->MaxFrequency = 107900000L;

            // What is the frequency step size?
            pCaps->TuningGranularity =  200000L;
    
            // How many inputs are on the tuner?
            pCaps->NumberOfInputs = 1;
    
            // What is the maximum settling time in milliseconds?
            pCaps->SettlingTime = 100;
            // Strategy defines how the tuner knows when it is in tune:
            pCaps->Strategy = KS_TUNER_STRATEGY_DRIVER_TUNES;
            break;

        case KSPROPERTY_TUNER_MODE_AM_RADIO:
            pCaps->StandardsSupported = 0;
            pCaps->MinFrequency =  540000L;
            pCaps->MaxFrequency = 1700000L;

            // What is the frequency step size?
            pCaps->TuningGranularity =  1000L;
    
            // How many inputs are on the tuner?
            pCaps->NumberOfInputs = 1;
    
            // What is the maximum settling time in milliseconds?
            pCaps->SettlingTime = 100;

            // Strategy defines how the tuner knows when it is in tune:
            pCaps->Strategy = KS_TUNER_STRATEGY_DRIVER_TUNES;
            break;

        default:
            ASSERT (FALSE);
            break;
        }
    }
    break;
        
    case KSPROPERTY_TUNER_STANDARD:
    {
        // What is the currently selected video standard?

        ((PKSPROPERTY_TUNER_STANDARD_S) pSPD->PropertyInfo)->Standard =
                pHwDevExt->VideoStandard;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TUNER_STANDARD_S);
    }
    break;

    case KSPROPERTY_TUNER_INPUT:
    {
        // What is the currently selected input?

        ((PKSPROPERTY_TUNER_INPUT_S) pSPD->PropertyInfo)->InputIndex = 
                pHwDevExt->TunerInput;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TUNER_INPUT_S);
    }
    break;


    case KSPROPERTY_TUNER_STATUS:

        // Return the status of the tuner

        // PLLOffset is in units of TuningGranularity 
        // SignalStrength is 0 to 100
        // Set Busy to 1 if tuning is still in process

        {
            PKSPROPERTY_TUNER_STATUS_S pStatus = 
                        (PKSPROPERTY_TUNER_STATUS_S) pSPD->PropertyInfo;

            ASSERT (nS >= sizeof (KSPROPERTY_TUNER_STATUS_S));
            pStatus->CurrentFrequency = pHwDevExt->Frequency;
            pStatus->PLLOffset = 0;
            pStatus->SignalStrength = 100;
            pStatus->Busy = pHwDevExt->Busy;

            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TUNER_STATUS_S);
        }
        break;

    case KSPROPERTY_TUNER_IF_MEDIUM:
    {
        // Only Digital TV tuners should support this property
        PKSPROPERTY_TUNER_IF_MEDIUM_S pMedium =
           (PKSPROPERTY_TUNER_IF_MEDIUM_S)pSPD->Property;
        ASSERT (nS >= sizeof( KSPROPERTY_TUNER_IF_MEDIUM_S) );

        // now work with the output buffer
        pMedium =(PKSPROPERTY_TUNER_IF_MEDIUM_S)pV;

        pMedium->IFMedium = TVTunerMediums[3];
        pMedium->IFMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TUNER_IF_MEDIUM_S);
    }
    break;

    default:
        TRAP;
        break;
    }
}

// -------------------------------------------------------------------
// VideoProcAmp functions
// -------------------------------------------------------------------

/*
** AdapterSetVideoProcAmpProperty ()
**
**    Handles Set operations on the VideoProcAmp property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetVideoProcAmpProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_VIDEOPROCAMP_S pS = (PKSPROPERTY_VIDEOPROCAMP_S) pSPD->PropertyInfo;

    ASSERT (pSPD->PropertyInputSize >= sizeof (KSPROPERTY_VIDEOPROCAMP_S));

    switch (Id) {

    case KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS:
        pHwDevExt->Brightness = pS->Value;
        pHwDevExt->BrightnessFlags = pS->Flags;
        break;
        
    case KSPROPERTY_VIDEOPROCAMP_CONTRAST:
        pHwDevExt->Contrast = pS->Value;
        pHwDevExt->ContrastFlags = pS->Flags;
        break;

    case KSPROPERTY_VIDEOPROCAMP_COLORENABLE:
        pHwDevExt->ColorEnable = pS->Value;
        pHwDevExt->ColorEnableFlags = pS->Flags;
        break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetVideoProcAmpProperty ()
**
**    Handles Get operations on the VideoProcAmp property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetVideoProcAmpProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_VIDEOPROCAMP_S pS = (PKSPROPERTY_VIDEOPROCAMP_S) pSPD->PropertyInfo;  

    ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEOPROCAMP_S));

    switch (Id) {

    case KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS:
        pS->Value = pHwDevExt->Brightness;
        pS->Flags = pHwDevExt->BrightnessFlags;
        pS->Capabilities = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL | 
                           KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO;
        break;
        
    case KSPROPERTY_VIDEOPROCAMP_CONTRAST:
        pS->Value = pHwDevExt->Contrast;
        pS->Flags = pHwDevExt->ContrastFlags;
        pS->Capabilities = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL | 
                           KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO;
        break;

    case KSPROPERTY_VIDEOPROCAMP_COLORENABLE:
        pS->Value = pHwDevExt->ColorEnable;
        pS->Flags = pHwDevExt->ColorEnableFlags;
        pS->Capabilities = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL;
        break;

    default:
        TRAP;
        break;
    }
    pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOPROCAMP_S);
}

// -------------------------------------------------------------------
// CameraControl functions
// -------------------------------------------------------------------

/*
** AdapterSetCameraControlProperty ()
**
**    Handles Set operations on the CameraControl property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetCameraControlProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_CAMERACONTROL_S pS = (PKSPROPERTY_CAMERACONTROL_S) pSPD->PropertyInfo;

    ASSERT (pSPD->PropertyInputSize >= sizeof (KSPROPERTY_CAMERACONTROL_S));

    switch (Id) {

    case KSPROPERTY_CAMERACONTROL_ZOOM:
        pHwDevExt->Zoom = pS->Value;
        pHwDevExt->ZoomFlags = pS->Flags;
        break;
        
    case KSPROPERTY_CAMERACONTROL_FOCUS:
        pHwDevExt->Focus = pS->Value;
        pHwDevExt->FocusFlags = pS->Flags;
        break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetCameraControlProperty ()
**
**    Handles Get operations on the CameraControl property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetCameraControlProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_CAMERACONTROL_S pS = (PKSPROPERTY_CAMERACONTROL_S) pSPD->PropertyInfo;    // pointer to the output data

    ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_CAMERACONTROL_S));

    switch (Id) {

    case KSPROPERTY_CAMERACONTROL_ZOOM:
        pS->Value = pHwDevExt->Zoom;
        pS->Flags = pHwDevExt->ZoomFlags;
        pS->Capabilities = KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL | 
                           KSPROPERTY_CAMERACONTROL_FLAGS_AUTO;
        break;
        
    case KSPROPERTY_CAMERACONTROL_FOCUS:
        pS->Value = pHwDevExt->Focus;
        pS->Flags = pHwDevExt->FocusFlags;
        pS->Capabilities = KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL | 
                           KSPROPERTY_CAMERACONTROL_FLAGS_AUTO;
        break;

    default:
        TRAP;
        break;
    }
    pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_CAMERACONTROL_S);
}

// -------------------------------------------------------------------
// TVAudio functions
// -------------------------------------------------------------------

/*
** AdapterSetTVAudioProperty ()
**
**    Handles Set operations on the TVAudio property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetTVAudioProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property


    switch (Id) {

    case KSPROPERTY_TVAUDIO_MODE:
    {
        PKSPROPERTY_TVAUDIO_S pS = (PKSPROPERTY_TVAUDIO_S) pSPD->PropertyInfo;    

        pHwDevExt->TVAudioMode = pS->Mode;
    }
    break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetTVAudioProperty ()
**
**    Handles Get operations on the TVAudio property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetTVAudioProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_TVAUDIO_CAPS:
    {
        PKSPROPERTY_TVAUDIO_CAPS_S pS = (PKSPROPERTY_TVAUDIO_CAPS_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_TVAUDIO_CAPS_S));
        
        pS->InputMedium  = TVAudioMediums[0];
        pS->InputMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support
        pS->OutputMedium = TVAudioMediums[1];
        pS->OutputMedium.Id = pHwDevExt->DriverMediumInstanceCount;  // Multiple instance support

        // Report all of the possible audio decoding modes the hardware is capabable of
        pS->Capabilities = KS_TVAUDIO_MODE_MONO   |
                           KS_TVAUDIO_MODE_STEREO |
                           KS_TVAUDIO_MODE_LANG_A |
                           KS_TVAUDIO_MODE_LANG_B ;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TVAUDIO_CAPS_S);
    }
    break;
        
    case KSPROPERTY_TVAUDIO_MODE:
    {
        PKSPROPERTY_TVAUDIO_S pS = (PKSPROPERTY_TVAUDIO_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_TVAUDIO_S));
        // Report the currently selected mode
        pS->Mode = pHwDevExt->TVAudioMode;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TVAUDIO_S);
    }
    break;

    case KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES:
    {
        PKSPROPERTY_TVAUDIO_S pS = (PKSPROPERTY_TVAUDIO_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_TVAUDIO_S));
        // Report which audio modes could potentially be selected right now
        pS->Mode = KS_TVAUDIO_MODE_MONO   |
                   KS_TVAUDIO_MODE_STEREO |
                   KS_TVAUDIO_MODE_LANG_A ;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_TVAUDIO_S);
    }
    break;
    
    default:
        TRAP;
        break;
    }
}

// -------------------------------------------------------------------
// AnalogVideoDecoder functions
// -------------------------------------------------------------------

/*
** AdapterSetAnalogVideoDecoderProperty ()
**
**    Handles Set operations on the AnalogVideoDecoder property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetAnalogVideoDecoderProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_VIDEODECODER_S pS = (PKSPROPERTY_VIDEODECODER_S) pSPD->PropertyInfo;

    ASSERT (pSPD->PropertyInputSize >= sizeof (KSPROPERTY_VIDEODECODER_S));
    
    switch (Id) {

    case KSPROPERTY_VIDEODECODER_STANDARD:
    {
        pHwDevExt->VideoDecoderVideoStandard = pS->Value;
    }
    break;

    case KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE:
    {
        pHwDevExt->VideoDecoderOutputEnable = pS->Value;
    }
    break;

    case KSPROPERTY_VIDEODECODER_VCR_TIMING:
    {
        pHwDevExt->VideoDecoderVCRTiming = pS->Value;
    }
    break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetAnalogVideoDecoderProperty ()
**
**    Handles Get operations on the AnalogVideoDecoder property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetAnalogVideoDecoderProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_VIDEODECODER_CAPS:
    {
        PKSPROPERTY_VIDEODECODER_CAPS_S pS = (PKSPROPERTY_VIDEODECODER_CAPS_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEODECODER_CAPS_S));
        
        pS->StandardsSupported =         
                   KS_AnalogVideo_NTSC_M

                |  KS_AnalogVideo_PAL_B    
                |  KS_AnalogVideo_PAL_D    
            //  |  KS_AnalogVideo_PAL_H    
            //  |  KS_AnalogVideo_PAL_I    
                |  KS_AnalogVideo_PAL_M    
                |  KS_AnalogVideo_PAL_N    

            //  |  KS_AnalogVideo_SECAM_B  
            //  |  KS_AnalogVideo_SECAM_D  
            //  |  KS_AnalogVideo_SECAM_G  
            //  |  KS_AnalogVideo_SECAM_H  
            //  |  KS_AnalogVideo_SECAM_K  
            //  |  KS_AnalogVideo_SECAM_K1 
            //  |  KS_AnalogVideo_SECAM_L  
                   ;

        pS->Capabilities = KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT  |
                           KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING |
                           KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED ;


        pS->SettlingTime = 10;          // How long to delay after tuning before 
                                        // Locked indicator is valid
                                        
        pS->HSyncPerVSync = 6;          // HSync per VSync

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEODECODER_CAPS_S);
    }
    break;
        
    case KSPROPERTY_VIDEODECODER_STANDARD:
    {
        PKSPROPERTY_VIDEODECODER_S pS = (PKSPROPERTY_VIDEODECODER_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEODECODER_S));

        pS->Value = pHwDevExt->VideoDecoderVideoStandard;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEODECODER_S);
    }
    break;

    case KSPROPERTY_VIDEODECODER_STATUS:
    {
        PKSPROPERTY_VIDEODECODER_STATUS_S pS = (PKSPROPERTY_VIDEODECODER_STATUS_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEODECODER_STATUS_S));

        pS->NumberOfLines = (pHwDevExt->VideoDecoderVideoStandard & KS_AnalogVideo_NTSC_Mask)
                             ? 525 : 625;

        // Just to make things interesting, simulate that some channels aren't locked
        // In the US, these are channels 54 through 70
        pS->SignalLocked = (pHwDevExt->Frequency < 400000000 || pHwDevExt->Frequency > 500000000);

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEODECODER_S);
    }
    break;

    case KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE:
    {
        PKSPROPERTY_VIDEODECODER_S pS = (PKSPROPERTY_VIDEODECODER_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEODECODER_S));

        pS->Value = pHwDevExt->VideoDecoderOutputEnable;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEODECODER_S);
    }
    break;

    case KSPROPERTY_VIDEODECODER_VCR_TIMING:
    {
        PKSPROPERTY_VIDEODECODER_S pS = (PKSPROPERTY_VIDEODECODER_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEODECODER_S));

        pS->Value = pHwDevExt->VideoDecoderVCRTiming;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEODECODER_S);
    }
    break;

    default:
        TRAP;
        break;
    }
}

// -------------------------------------------------------------------
// VideoControl functions
// -------------------------------------------------------------------

/*
** AdapterSetVideoControlProperty ()
**
**    Handles Set operations on the VideoControl property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterSetVideoControlProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PKSPROPERTY_VIDEOCONTROL_MODE_S pS = (PKSPROPERTY_VIDEOCONTROL_MODE_S) pSPD->PropertyInfo;
    PSTREAMEX pStrmEx;
    ULONG StreamIndex;
    ULONG *pVideoControlMode;

    // For this property set, the StreamIndex is always in the same place
    // for each property
    StreamIndex = ((PKSPROPERTY_VIDEOCONTROL_CAPS_S) pSPD->Property)->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    // If the stream is not opened when this property set is used,
    // store the values in the HwDevExt

    if (pStrmEx) {
        pVideoControlMode = &pStrmEx->VideoControlMode;
    }
    else {
        pVideoControlMode = &pHwDevExt->VideoControlMode;
    }

    ASSERT (pSPD->PropertyInputSize >= sizeof (KSPROPERTY_VIDEOCONTROL_MODE_S));
    
    switch (Id) {

    case KSPROPERTY_VIDEOCONTROL_MODE:
    {
        *pVideoControlMode = pS->Mode;
    }
    break;

    default:
        TRAP;
        break;
    }
}

/*
** AdapterGetVideoControlProperty ()
**
**    Handles Get operations on the VideoControl property set.
**      Testcap uses this for demo purposes only.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID 
STREAMAPI
AdapterGetVideoControlProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    PSTREAMEX pStrmEx;
    ULONG StreamIndex;
    ULONG *pVideoControlMode;

    // For this property set, the StreamIndex is always in the same place
    // for each property
    StreamIndex = ((PKSPROPERTY_VIDEOCONTROL_CAPS_S) pSPD->Property)->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    // If the stream is not opened when this property set is used,
    // store the values in the HwDevExt

    if (pStrmEx) {
        pVideoControlMode = &pStrmEx->VideoControlMode;
    }
    else {
        pVideoControlMode = &pHwDevExt->VideoControlMode;
    }

    switch (Id) {

    case KSPROPERTY_VIDEOCONTROL_CAPS:
    {
        PKSPROPERTY_VIDEOCONTROL_CAPS_S pS = (PKSPROPERTY_VIDEOCONTROL_CAPS_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEOCONTROL_CAPS_S));
        
        pS->VideoControlCaps =    
              KS_VideoControlFlag_FlipHorizontal       
//            | KS_VideoControlFlag_FlipVertical         
//            | KS_VideoControlFlag_ExternalTriggerEnable
//            | KS_VideoControlFlag_Trigger              
            ;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCONTROL_CAPS_S);
    }
    break;
        
    case KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE:
    {
        PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S pS = 
            (PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S));

        pS->CurrentActualFrameRate = 15;        // TODO: Implement the right rates in shipping drivers.
        pS->CurrentMaxAvailableFrameRate = 15;  // TODO: Implement the right rates in shipping drivers.
        

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S);
    }
    break;

    case KSPROPERTY_VIDEOCONTROL_FRAME_RATES:
    {
        // todo
    }
    break;

    case KSPROPERTY_VIDEOCONTROL_MODE:
    {
        PKSPROPERTY_VIDEOCONTROL_MODE_S pS = (PKSPROPERTY_VIDEOCONTROL_MODE_S) pSPD->PropertyInfo;    // pointer to the data

        ASSERT (pSPD->PropertyOutputSize >= sizeof (KSPROPERTY_VIDEOCONTROL_MODE_S));

        pS->Mode = *pVideoControlMode;

        pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCONTROL_MODE_S);
    }
    break;

    default:
        TRAP;
        break;
    }
}


/*
** AdapterGetVideoCompressionProperty()
**
**    Gets compressor settings
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterGetVideoCompressionProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX pStrmEx;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG StreamIndex;
    PCOMPRESSION_SETTINGS pCompressionSettings;

    // For this property set, the StreamIndex is always in the same place
    // for each property
    StreamIndex = ((PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->Property)->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    // If the stream is not opened when this property set is used,
    // store the values in the HwDevExt

    if (pStrmEx) {
        pCompressionSettings = &pStrmEx->CompressionSettings;
    }
    else {
        pCompressionSettings = &pHwDevExt->CompressionSettings;
    }


    switch (Id) {

    case KSPROPERTY_VIDEOCOMPRESSION_GETINFO:
        {
            PKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S pS = 
                (PKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S) pSPD->PropertyInfo;

            pS->DefaultKeyFrameRate = 15;    // Key frame rate
            pS->DefaultPFrameRate = 3;       // Predeicted frames per Key frame
            pS->DefaultQuality = 5000;       // 0 to 10000
            pS->Capabilities = 
                       KS_CompressionCaps_CanQuality  |
                       KS_CompressionCaps_CanKeyFrame |
                       KS_CompressionCaps_CanBFrame   ;
            
            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S);
        }
        break;

    case KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE:
        {
            PKSPROPERTY_VIDEOCOMPRESSION_S pS = 
                (PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->PropertyInfo;

            pS->Value = pCompressionSettings->CompressionKeyFrameRate;
                
            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCOMPRESSION_S);
        }
        break;
    
    case KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME:
        {
            PKSPROPERTY_VIDEOCOMPRESSION_S pS = 
                (PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->PropertyInfo;

            pS->Value = pCompressionSettings->CompressionPFramesPerKeyFrame;
                
            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCOMPRESSION_S);
        }
        break;
    
    case KSPROPERTY_VIDEOCOMPRESSION_QUALITY:
        {
            PKSPROPERTY_VIDEOCOMPRESSION_S pS = 
                (PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->PropertyInfo;

            pS->Value = pCompressionSettings->CompressionQuality;
                
            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_VIDEOCOMPRESSION_S);
        }
        break;
    
    default:
        TRAP;
        break;
    }
}

/*
** AdapterSetVideoCompressionProperty()
**
**    Sets compressor settings
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterSetVideoCompressionProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX pStrmEx;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_VIDEOCOMPRESSION_S pS = (PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->Property;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG StreamIndex;
    PCOMPRESSION_SETTINGS pCompressionSettings;

    // For this property set, the StreamIndex is always in the same place
    // for each property
    StreamIndex = ((PKSPROPERTY_VIDEOCOMPRESSION_S) pSPD->Property)->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    // If the stream is not opened when this property set is used,
    // store the values in the HwDevExt

    if (pStrmEx) {
        pCompressionSettings = &pStrmEx->CompressionSettings;
    }
    else {
        pCompressionSettings = &pHwDevExt->CompressionSettings;
    }

    switch (Id) {

    case KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE:
        {
            pCompressionSettings->CompressionKeyFrameRate = pS->Value;
        }
        break;
    
    case KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME:
        {
            pCompressionSettings->CompressionPFramesPerKeyFrame = pS->Value;
        }
        break;
    
    case KSPROPERTY_VIDEOCOMPRESSION_QUALITY:
        {
            pCompressionSettings->CompressionQuality = pS->Value;
        }
        break;

    default:
        TRAP;
        break;
    }
}


/*
** AdapterGetVBIProperty()
**
**    Gets VBI settings
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterGetVBIProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = pSrb->HwDeviceExtension;
    PSTREAMEX pStrmEx;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG StreamIndex;
    PVBICAP_PROPERTIES_PROTECTION_S pS = 
        (PVBICAP_PROPERTIES_PROTECTION_S) pSPD->PropertyInfo;

    StreamIndex = pS->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    pS->Status = 0;
    if (pHwDevExt->ProtectionStatus & KS_VBI_FLAG_MV_PRESENT)
        pS->Status |= KS_VBICAP_PROTECTION_MV_PRESENT;
    if (pHwDevExt->ProtectionStatus & KS_VBI_FLAG_MV_HARDWARE)
        pS->Status |= KS_VBICAP_PROTECTION_MV_HARDWARE;
    if (pHwDevExt->ProtectionStatus & KS_VBI_FLAG_MV_DETECTED)
        pS->Status |= KS_VBICAP_PROTECTION_MV_DETECTED;
        
    pSrb->ActualBytesTransferred = sizeof (*pS);
}

#if DBG
/*
** AdapterSetVBIProperty()
**
**    Sets VBI settings
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
AdapterSetVBIProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = pSrb->HwDeviceExtension;
    PSTREAMEX pStrmEx;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    ULONG StreamIndex;
    PVBICAP_PROPERTIES_PROTECTION_S pS = 
        (PVBICAP_PROPERTIES_PROTECTION_S) pSPD->PropertyInfo;

    StreamIndex = pS->StreamIndex;

    ASSERT (StreamIndex < MAX_TESTCAP_STREAMS);

    // Verify the stream index is valid
    if (StreamIndex >= MAX_TESTCAP_STREAMS) {
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    pStrmEx = (PSTREAMEX) pHwDevExt->pStrmEx[StreamIndex];

    pHwDevExt->ProtectionStatus = 0;
    if (pS->Status & KS_VBICAP_PROTECTION_MV_PRESENT)
        pHwDevExt->ProtectionStatus |= KS_VBI_FLAG_MV_PRESENT;
    if (pS->Status & KS_VBICAP_PROTECTION_MV_HARDWARE)
        pHwDevExt->ProtectionStatus |= KS_VBI_FLAG_MV_HARDWARE;
    if (pS->Status & KS_VBICAP_PROTECTION_MV_DETECTED)
        pHwDevExt->ProtectionStatus |= KS_VBI_FLAG_MV_DETECTED;
}
#endif //DBG


// -------------------------------------------------------------------
// General entry point for all get/set adapter properties
// -------------------------------------------------------------------

/*
** AdapterSetProperty ()
**
**    Handles Set operations for all adapter properties.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI 
AdapterSetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )

{
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    if (IsEqualGUID(&PROPSETID_VIDCAP_CROSSBAR, &pSPD->Property->Set)) {
        AdapterSetCrossbarProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_TUNER, &pSPD->Property->Set)) {
        AdapterSetTunerProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOPROCAMP, &pSPD->Property->Set)) {
        AdapterSetVideoProcAmpProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_CAMERACONTROL, &pSPD->Property->Set)) {
        AdapterSetCameraControlProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_TVAUDIO, &pSPD->Property->Set)) {
        AdapterSetTVAudioProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEODECODER, &pSPD->Property->Set)) {
        AdapterSetAnalogVideoDecoderProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOCONTROL, &pSPD->Property->Set)) {
        AdapterSetVideoControlProperty (pSrb);
    }
    else if (IsEqualGUID (&PROPSETID_VIDCAP_VIDEOCOMPRESSION, &pSPD->Property->Set)) {
        AdapterSetVideoCompressionProperty (pSrb);
    }
#if DBG
    // Can't normally set protection status; only allow this for DEBUGGING
    else if (IsEqualGUID (&KSPROPSETID_VBICAP_PROPERTIES, &pSPD->Property->Set)) {
        AdapterSetVBIProperty (pSrb);
    }
#endif //DBG
    else {
        //
        // We should never get here
        //

        TRAP;
        pSrb->Status = STATUS_NOT_IMPLEMENTED;
    }
}

/*
** AdapterGetProperty ()
**
**    Handles Get operations for all adapter properties.
**
** Arguments:
**
**      pSRB -
**          Pointer to the HW_STREAM_REQUEST_BLOCK 
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI 
AdapterGetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )

{
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    if (IsEqualGUID (&PROPSETID_VIDCAP_CROSSBAR, &pSPD->Property->Set)) {
        AdapterGetCrossbarProperty (pSrb);
    }
    else if (IsEqualGUID (&PROPSETID_TUNER, &pSPD->Property->Set)) {
        AdapterGetTunerProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOPROCAMP, &pSPD->Property->Set)) {
        AdapterGetVideoProcAmpProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_CAMERACONTROL, &pSPD->Property->Set)) {
        AdapterGetCameraControlProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_TVAUDIO, &pSPD->Property->Set)) {
        AdapterGetTVAudioProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEODECODER, &pSPD->Property->Set)) {
        AdapterGetAnalogVideoDecoderProperty (pSrb);
    }
    else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOCONTROL, &pSPD->Property->Set)) {
        AdapterGetVideoControlProperty (pSrb);
    }
    else if (IsEqualGUID (&PROPSETID_VIDCAP_VIDEOCOMPRESSION, &pSPD->Property->Set)) {
        AdapterGetVideoCompressionProperty (pSrb);
    }
    else if (IsEqualGUID (&KSPROPSETID_VBICAP_PROPERTIES, &pSPD->Property->Set)) {
        AdapterGetVBIProperty (pSrb);
    }
    else {
        //
        // We should never get here
        //

        TRAP;
        pSrb->Status = STATUS_NOT_IMPLEMENTED;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capvbi.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "capdebug.h"
#include "vbixfer.h"
#include "ntstatus.h"


/*
** VBICaptureRoutine()
**
**    Routine to generate video frames based on a timer.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID 
STREAMAPI 
VBICaptureRoutine(
    IN PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PKSSTREAM_HEADER        pDataPacket;
    PKS_VBI_FRAME_INFO      pVBIFrameInfo;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {  
        return;
    }

    
    // Find out what time it is, if we're using a clock

    if (pStrmEx->hMasterClock) {
        HW_TIME_CONTEXT TimeContext;

        TimeContext.HwDeviceExtension = pHwDevExt; 
        TimeContext.HwStreamObject = pStrmEx->pStreamObject;
        TimeContext.Function = TIME_GET_STREAM_TIME;

        StreamClassQueryMasterClockSync (
                pStrmEx->hMasterClock,
                &TimeContext);

        pStrmEx->QST_StreamTime = TimeContext.Time;
        pStrmEx->QST_Now = TimeContext.SystemTime;
    
        if (pStrmEx->QST_NextFrame == 0) {  
            pStrmEx->QST_NextFrame =
                pStrmEx->QST_StreamTime
                + pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;
        }

#ifdef CREATE_A_FLURRY_OF_TIMING_SPEW
        DbgLogTrace(("TestCap:    Time=%16lx\n", TimeContext.Time));
        DbgLogTrace(("TestCap: SysTime=%16lx\n", TimeContext.SystemTime));
#endif
    }


    // Only capture in the RUN state

    if (pStrmEx->KSState == KSSTATE_RUN) {  

        //
        // Determine if it is time to capture a frame based on 
        // how much time has elapsed since capture started.
        // If there isn't a clock available, then capture immediately.
        //

        if ((!pStrmEx->hMasterClock) ||
             (pStrmEx->QST_StreamTime >= pStrmEx->QST_NextFrame)) {

            PHW_STREAM_REQUEST_BLOCK pSrb;

            // Increment the picture count (usually this is VSYNC count)

            pStrmEx->VBIFrameInfo.PictureNumber++;

            //
            // Get the next queue SRB (if any)
            //

            pSrb = VideoQueueRemoveSRB (pHwDevExt, StreamNumber);

            if (pSrb) {

                pDataPacket = pSrb->CommandData.DataBufferArray;
                pVBIFrameInfo = (PKS_VBI_FRAME_INFO)(pDataPacket + 1);

                pStrmEx->VBIFrameInfo.dwFrameFlags = 0;

                //
                // If needed, send out VBIInfoHeader
                //
                if (!(pStrmEx->SentVBIInfoHeader)) {
                    pStrmEx->SentVBIInfoHeader = 1;
                    pStrmEx->VBIFrameInfo.dwFrameFlags |=
                            KS_VBI_FLAG_VBIINFOHEADER_CHANGE;
                    pStrmEx->VBIFrameInfo.VBIInfoHeader = StreamFormatVBI.VBIInfoHeader;
                }

                // Set additional info fields about the data captured such as:
                //   Frames Captured
                //   Frames Dropped
                //   Field Polarity
                //   Protection status
                //
                pStrmEx->VBIFrameInfo.ExtendedHeaderSize =
                    pVBIFrameInfo->ExtendedHeaderSize;

                if (pStrmEx->VBIFrameInfo.PictureNumber & 1)
                    pStrmEx->VBIFrameInfo.dwFrameFlags |= KS_VBI_FLAG_FIELD1;
                else
                    pStrmEx->VBIFrameInfo.dwFrameFlags |= KS_VBI_FLAG_FIELD2;

                pStrmEx->VBIFrameInfo.dwFrameFlags |=
                    pHwDevExt->ProtectionStatus & (KS_VBI_FLAG_MV_PRESENT
                                                    |KS_VBI_FLAG_MV_HARDWARE
                                                    |KS_VBI_FLAG_MV_DETECTED);

                *pVBIFrameInfo = pStrmEx->VBIFrameInfo;

                // Copy this into stream header so ring 3 filters can see it
                pDataPacket->TypeSpecificFlags = pVBIFrameInfo->dwFrameFlags;

                // Init the flags to zero
                pDataPacket->OptionsFlags = 0;

                // Set the discontinuity flag if frames have been previously
                // dropped, and then reset our internal flag

                if (pStrmEx->fDiscontinuity) {
                    pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY;
                    pStrmEx->fDiscontinuity = FALSE;
                }

                //
                // Return the timestamp for the frame
                //
                pDataPacket->PresentationTime.Numerator = 1;
                pDataPacket->PresentationTime.Denominator = 1;
                pDataPacket->Duration = pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;

                //
                // if we have a master clock AND this is a capture stream
                // 
                if (pStrmEx->hMasterClock
                    && (StreamNumber == STREAM_Capture
                            || StreamNumber == STREAM_VBI))
                {

                    pDataPacket->PresentationTime.Time = pStrmEx->QST_StreamTime;
                    pDataPacket->OptionsFlags |= 
                        KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                        KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
                }
                else {
                    //
                    // No clock or not a capture stream,
                    //  so just mark the time as unknown
                    //
                    pDataPacket->PresentationTime.Time = 0;
                    // clear the timestamp valid flags
                    pDataPacket->OptionsFlags &= 
                        ~(KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                          KSSTREAM_HEADER_OPTIONSF_DURATIONVALID);
                }

                // Every frame we generate is a key frame (aka SplicePoint)
                // Delta frames (B or P) should not set this flag

                pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT;

                //
                // Call the routine which synthesizes images
                //
                VBI_ImageSynth(pSrb);

                // Output a frame count every 300th frame (~5 sec) in Debug mode
                if (pStrmEx->VBIFrameInfo.PictureNumber % 300 == 0) {
                   DbgLogInfo(("TestCap: Picture %u, Stream=%d\n", 
                           (unsigned int)pStrmEx->VBIFrameInfo.PictureNumber, 
                           StreamNumber));
                }

                CompleteStreamSRB(pSrb);
                
            } // if we have an SRB

            else {

                //
                // No buffer was available when we should have captured one

                // Increment the counter which keeps track of
                // dropped frames

                pStrmEx->VBIFrameInfo.DropCount++;

                // Set the (local) discontinuity flag
                // This will cause the next packet processed to have the
                //   KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY flag set.

                pStrmEx->fDiscontinuity = TRUE;

            }

            // Figure out when to capture the next frame
            pStrmEx->QST_NextFrame += pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;

        } // endif time to capture a frame
    } // endif we're running
}


/*
** VBIhwCaptureRoutine()
**
**    Routine to capture video frames based on a timer.
**
**    Notes:  * Devices capable of using interrupts should always trigger
**              capture on a VSYNC interrupt, and not use a timer.
**            * This routine is used by VBI streams which do NOT have extended
**              headers, such as CC and NABTS.
**
** Arguments:
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID 
STREAMAPI 
VBIhwCaptureRoutine(
    IN PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PKSSTREAM_HEADER        pDataPacket;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {  
        return;
    }

    
    // Find out what time it is, if we're using a clock

    if (pStrmEx->hMasterClock ) {
        HW_TIME_CONTEXT TimeContext;

        TimeContext.HwDeviceExtension = pHwDevExt; 
        TimeContext.HwStreamObject = pStrmEx->pStreamObject;
        TimeContext.Function = TIME_GET_STREAM_TIME;

        StreamClassQueryMasterClockSync (
                pStrmEx->hMasterClock,
                &TimeContext);

        pStrmEx->QST_StreamTime = TimeContext.Time;
        pStrmEx->QST_Now = TimeContext.SystemTime;
    
        if (pStrmEx->QST_NextFrame == 0) {  
            pStrmEx->QST_NextFrame =
                pStrmEx->QST_StreamTime
                + pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;
        }

#ifdef CREATE_A_FLURRY_OF_TIMING_SPEW
        DbgLogTrace(("TestCap:    Time=%16lx\n", TimeContext.Time));
        DbgLogTrace(("TestCap: SysTime=%16lx\n", TimeContext.SystemTime));
#endif
    }


    // Only capture in the RUN state

    if (pStrmEx->KSState == KSSTATE_RUN) {  

        //
        // Determine if it is time to capture a frame based on 
        // how much time has elapsed since capture started.
        // If there isn't a clock available, then capture immediately.
        //

        if ((!pStrmEx->hMasterClock) ||
             (pStrmEx->QST_StreamTime >= pStrmEx->QST_NextFrame)) {

            PHW_STREAM_REQUEST_BLOCK pSrb;

            // Increment the picture count (usually this is VSYNC count)

            pStrmEx->VBIFrameInfo.PictureNumber++;

            //
            // Get the next queue SRB (if any)
            //

            pSrb = VideoQueueRemoveSRB (pHwDevExt, StreamNumber);

            if (pSrb) {

                pDataPacket = pSrb->CommandData.DataBufferArray;

                // Init the flags to zero
                pDataPacket->OptionsFlags = 0;

                // Set the discontinuity flag if frames have been previously
                // dropped, and then reset our internal flag
                if (pStrmEx->fDiscontinuity) {
                    pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY;
                    pStrmEx->fDiscontinuity = FALSE;
                }

                //
                // Return the timestamp for the frame
                //
                pDataPacket->PresentationTime.Numerator = 1;
                pDataPacket->PresentationTime.Denominator = 1;
                pDataPacket->Duration = pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;

                //
                // if we have a master clock AND this is the capture stream
                // 
                if (pStrmEx->hMasterClock && (StreamNumber == 0)) {

                    pDataPacket->PresentationTime.Time = pStrmEx->QST_StreamTime;
                    pDataPacket->OptionsFlags |= 
                        KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                        KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
                }
                else {
                    //
                    // No clock or the preview stream,
                    //  so just mark the time as unknown
                    //
                    pDataPacket->PresentationTime.Time = 0;
                    // clear the timestamp valid flags
                    pDataPacket->OptionsFlags &= 
                        ~(KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                          KSSTREAM_HEADER_OPTIONSF_DURATIONVALID);
                }

                // Every frame we generate is a key frame (aka SplicePoint)
                // Delta frames (B or P) should not set this flag

                pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT;

                //
                // Call the routine which synthesizes images
                //
                switch (StreamNumber) {
                    case STREAM_NABTS:
                        NABTS_ImageSynth(pSrb);
                        break;

                    case STREAM_CC:
                        CC_ImageSynth(pSrb);
                        break;

                    default:
                    case STREAM_VBI:
                        DbgLogError(("TestCap::VBIhwCaptureRoutine: Bad stream %d\n", StreamNumber));
                        break;
                }

                CompleteStreamSRB (pSrb);
                
            } // if we have an SRB

            else {

                //
                // No buffer was available when we should have captured one

                // Increment the counter which keeps track of
                // dropped frames

                pStrmEx->VBIFrameInfo.DropCount++;

                // Set the (local) discontinuity flag
                // This will cause the next packet processed to have the
                //   KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY flag set.

                pStrmEx->fDiscontinuity = TRUE;

            }

            // Figure out when to capture the next frame
            pStrmEx->QST_NextFrame += pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval;

        } // endif time to capture a frame
    } // endif we're running
}


/*
** VBITimerRoutine()
**
**    A timer has been created based on the requested capture interval.
**    This is the callback routine for this timer event.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
**    Context - pointer to the stream extension
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID 
STREAMAPI 
VBITimerRoutine(
    PVOID Context
    )
{
    PSTREAMEX              pStrmEx = ((PSTREAMEX)Context);
    PHW_DEVICE_EXTENSION   pHwDevExt = pStrmEx->pHwDevExt;
    int                    StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    ULONG                  interval;
    
    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP)
        return;

    // Calculate next interval
    interval = (ULONG)(pStrmEx->pVBIStreamFormat->ConfigCaps.MinFrameInterval / 10);
    interval /= 2;  // Run at 2x noted rate for accuracy

    // Capture a frame if it's time and we have a buffer
    switch (StreamNumber) {
        case STREAM_NABTS:
            VBIhwCaptureRoutine(pStrmEx);
            break;

        case STREAM_CC:
            VBIhwCaptureRoutine(pStrmEx);
            break;

        default:
        case STREAM_VBI:
            VBICaptureRoutine(pStrmEx);
            break;
    }

    // Schedule the next timer event
    StreamClassScheduleTimer (
            pStrmEx->pStreamObject,     // StreamObject
            pHwDevExt,                  // HwDeviceExtension
            interval,                   // Microseconds
            VBITimerRoutine,            // TimerRoutine
            pStrmEx);                   // Context
}


/*
** VBISetState()
**
**    Sets the current state for a given stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI 
VBISetState(PHW_STREAM_REQUEST_BLOCK pSrb)
{
    PHW_DEVICE_EXTENSION  pHwDevExt = pSrb->HwDeviceExtension;
    PSTREAMEX             pStrmEx = pSrb->StreamObject->HwStreamExtension;
    int                   StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    KSSTATE               PreviousState;

    //
    // Remember the state we're transitioning away from
    //

    PreviousState = pStrmEx->KSState;

    //
    // Set the new state
    //

    pStrmEx->KSState = pSrb->CommandData.StreamState;

    switch (pSrb->CommandData.StreamState)  

    {
    case KSSTATE_STOP:

        //
        // The stream class will cancel all outstanding IRPs for us
        // (but only if it is maintaining the queue ie. using Stream Class synchronization)
        // Since Testcap is not using Stream Class synchronization, we must clear the queue here

        VideoQueueCancelAllSRBs (pStrmEx);

        pStrmEx->SentVBIInfoHeader = 0;     // Send out a fresh one next RUN

        DbgLogInfo(("TestCap: STATE Stopped, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_ACQUIRE:

        //
        // This is a KS only state, that has no correspondence in DirectShow
        // 
        DbgLogInfo(("TestCap: STATE Acquire, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_PAUSE:

        //
        // On a transition to pause from acquire or stop, start our timer running.
        //

        if (PreviousState == KSSTATE_ACQUIRE || PreviousState == KSSTATE_STOP) {  

            // Zero the frame counters
            pStrmEx->VBIFrameInfo.PictureNumber = 0;
            pStrmEx->VBIFrameInfo.DropCount = 0;
            pStrmEx->VBIFrameInfo.dwFrameFlags = 0;

            // Setup the next timer callback
            VBITimerRoutine(pStrmEx);
        }
        DbgLogInfo(("TestCap: STATE Pause, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_RUN:

        // 
        // Begin Streaming.
        //

        // Reset the discontinuity flag

        pStrmEx->fDiscontinuity = FALSE;

        // Setting the NextFrame time to zero will cause the value to be
        // reset from the stream time 

        pStrmEx->QST_NextFrame = 0;

        DbgLogInfo(("TestCap: STATE Run, Stream=%d\n", StreamNumber));
        break;

    } // end switch (pSrb->CommandData.StreamState)  
}


/*
** VBIReceiveCtrlPacket()
**
**   Receives packet commands that control all the VBI (VBI/NABTS/CC) streams
**
** Arguments:
**
**   pSrb - The stream request block for the VBI stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID 
STREAMAPI 
VBIReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION  pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX             pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                   StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    BOOL                  Busy;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt != 0);

    DbgLogInfo(("TestCap: Receiving %s Stream Control SRB %p, %x\n",
            (StreamNumber == STREAM_VBI)? "VBI"
            : (StreamNumber == STREAM_NABTS)? "NABTS"
            : (StreamNumber == STREAM_CC)? "CC"
            : "???",
             pSrb,
             pSrb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    do {

        // 
        // Default to success
        //
    
        pSrb->Status = STATUS_SUCCESS;
    
        //
        // determine the type of packet.
        //
    
        switch (pSrb->Command)
        {
        case SRB_PROPOSE_DATA_FORMAT:
            DbgLogInfo(("TestCap: Receiving SRB_PROPOSE_DATA_FORMAT  SRB %p, StreamNumber= %d\n", pSrb, StreamNumber));
            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat, 
                    pSrb->StreamObject->StreamNumber)))
        {
                pSrb->Status = STATUS_NO_MATCH;
            }
            break;

        case SRB_SET_DATA_FORMAT:
            DbgLogInfo(("TestCap: SRB_SET_DATA_FORMAT"));
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
            break;

        case SRB_GET_DATA_FORMAT:
            DbgLogInfo(("TestCap: SRB_GET_DATA_FORMAT"));
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
            break;
    

        case SRB_SET_STREAM_STATE:
            VBISetState(pSrb);
            break;
    
        case SRB_GET_STREAM_STATE:
            VideoGetState(pSrb);
            break;
    
        case SRB_GET_STREAM_PROPERTY:
            VideoGetProperty(pSrb);
            break;
    
        case SRB_INDICATE_MASTER_CLOCK:
            VideoIndicateMasterClock(pSrb);
            break;
    
        default:
            //
            // invalid / unsupported command. Fail it as such
            //
    
            TRAP;
    
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
        }
    
        CompleteStreamSRB (pSrb);

        // 
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);
    } while (Busy);
}

/*
** VBIReceiveDataPacket()
**
**   Receives VBI data packet commands on the output streams
**
** Arguments:
**
**   pSrb - Stream request block for the VBI stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID 
STREAMAPI 
VBIReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt != 0);

    DbgLogTrace(("'TestCap: Receiving VBI Stream Data    SRB %p, %x\n", pSrb, pSrb->Command));

    // 
    // Default to success
    //

    pSrb->Status = STATUS_SUCCESS;

    //
    // determine the type of packet.
    //

    switch (pSrb->Command){

    case SRB_READ_DATA:

        // Rule: 
        // Only accept read requests when in either the Pause or Run
        // States.  If Stopped, immediately return the SRB.

        if (pStrmEx->KSState == KSSTATE_STOP) {

            CompleteStreamSRB (pSrb);

            break;
        } 
        
        //
        // Put this read request on the pending queue
        //

        VideoQueueAddSRB (pSrb);

        // Since another thread COULD HAVE MODIFIED THE STREAM STATE
        // in the midst of adding it to the queue, check the stream
        // state again, and cancel the SRB if necessary.  Note that
        // this race condition was NOT handled in the original DDK
        // release of testcap!

        if (pStrmEx->KSState == KSSTATE_STOP) {

            VideoQueueCancelOneSRB (
                pStrmEx,
                pSrb);
        }
    
        break;

    default:

        //
        // invalid / unsupported command. Fail it as such
        //

        TRAP;

        pSrb->Status = STATUS_NOT_IMPLEMENTED;

        CompleteStreamSRB (pSrb);

    }  // switch (pSrb->Command)
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capxfer.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "capdebug.h"
#include "capxfer.h"

//
// EIA-189-A Standard color bar definitions
//

// 75% Amplitude, 100% Saturation
const static UCHAR NTSCColorBars75Amp100SatRGB24 [3][8] = 
{
//  Whi Yel Cya Grn Mag Red Blu Blk
    191,  0,191,  0,191,  0,191,  0,    // Blue
    191,191,191,191,  0,  0,  0,  0,    // Green
    191,191,  0,  0,191,191,  0,  0,    // Red
};

// 100% Amplitude, 100% Saturation
const static UCHAR NTSCColorBars100Amp100SatRGB24 [3][8] = 
{
//  Whi Yel Cya Grn Mag Red Blu Blk
    255,  0,255,  0,255,  0,255,  0,    // Blue
    255,255,255,255,  0,  0,  0,  0,    // Green
    255,255,  0,  0,255,255,  0,  0,    // Red
};

const static UCHAR NTSCColorBars100Amp100SatYUV [4][8] = 
{
//  Whi Yel Cya Grn Mag Red Blu Blk
    128, 16,166, 54,202, 90,240,128,    // U
    235,211,170,145,106, 81, 41, 16,    // Y
    128,146, 16, 34,222,240,109,128,    // V
    235,211,170,145,106, 81, 41, 16     // Y
};

/*
** ImageSynth()
**
**   Synthesizes NTSC color bars, white, black, and grayscale images
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**   ImageXferCommands - Index specifying the image to generate
**
** Returns:
**
**   Nothing
**
** Side Effects:  none
*/

void ImageSynth (
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb,
    IN ImageXferCommands Command,
    IN BOOL FlipHorizontal
    )
{
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    KS_VIDEOINFOHEADER      *pVideoInfoHdr = pStrmEx->pVideoInfoHeader;

    UINT biWidth        =   pVideoInfoHdr->bmiHeader.biWidth;
    UINT biHeight       =   pVideoInfoHdr->bmiHeader.biHeight;
    UINT biSizeImage    =   pVideoInfoHdr->bmiHeader.biSizeImage;
    UINT biWidthBytes   =   KS_DIBWIDTHBYTES (pVideoInfoHdr->bmiHeader);
    UINT biBitCount     =   pVideoInfoHdr->bmiHeader.biBitCount;
    UINT LinesToCopy    =   abs (biHeight);
    DWORD biCompression =   pVideoInfoHdr->bmiHeader.biCompression;

    UINT                    Line;
    PUCHAR                  pLineBuffer;

    PKSSTREAM_HEADER        pDataPacket = pSrb->CommandData.DataBufferArray;
    PUCHAR                  pImage =  pDataPacket->Data;

    DEBUG_ASSERT (pSrb->NumberOfBuffers == 1);

#if 0
    // Note:  set "ulInDebug = 1" in a debugger to view this output with .ntkern
    DbgLogTrace(("\'TestCap: ImageSynthBegin\n"));
    DbgLogTrace(("\'TestCap: biSizeImage=%d, DataPacketLength=%d\n", 
            biSizeImage, pDataPacket->DataPacketLength));
    DbgLogTrace(("\'TestCap: biWidth=%d biHeight=%d WidthBytes=%d bpp=%d\n", 
            biWidth, biHeight, biWidthBytes, biBitCount));
    DbgLogTrace(("\'TestCap: pImage=%x\n", pImage));
#endif

    // 
    // Synthesize a single line of image data, which will then be replicated
    //

    pLineBuffer = &pStrmEx->LineBuffer[0];

    if ((biBitCount == 24) && (biCompression == KS_BI_RGB)) {

        switch (Command) {
    
        case IMAGE_XFER_NTSC_EIA_100AMP_100SAT:
            // 100% saturation
            {
                UINT x, col;
                PUCHAR pT = pLineBuffer;
        
                for (x = 0; x < biWidth; x++) {
                    col = (x * 8) / biWidth;
                    col = FlipHorizontal ? (7 - col) : col;
                    
                    *pT++ = NTSCColorBars100Amp100SatRGB24[0][col]; // Red
                    *pT++ = NTSCColorBars100Amp100SatRGB24[1][col]; // Green
                    *pT++ = NTSCColorBars100Amp100SatRGB24[2][col]; // Blue
                }
            }
            break;
    
        case IMAGE_XFER_NTSC_EIA_75AMP_100SAT:
            // 75% Saturation
            {
                UINT x, col;
                PUCHAR pT = pLineBuffer;
        
                for (x = 0; x < biWidth; x++) {
                    col = (x * 8) / biWidth;
                    col = FlipHorizontal ? (7 - col) : col;

                    *pT++ = NTSCColorBars75Amp100SatRGB24[0][col]; // Red
                    *pT++ = NTSCColorBars75Amp100SatRGB24[1][col]; // Green
                    *pT++ = NTSCColorBars75Amp100SatRGB24[2][col]; // Blue
                }
            }
            break;
    
        case IMAGE_XFER_BLACK:
            // Camma corrected Grayscale ramp
            {
                UINT x, col;
                PUCHAR pT = pLineBuffer;
        
                for (x = 0; x < biWidth; x++) {
                    col = (255 * (x * 10) / biWidth) / 10;
                    col = FlipHorizontal ? (255 - col) : col;

                    *pT++ = (BYTE) col; // Red
                    *pT++ = (BYTE) col; // Green
                    *pT++ = (BYTE) col; // Blue
                }
            }
            break;
    
        case IMAGE_XFER_WHITE:
            // All white
            RtlFillMemory(
                pLineBuffer,
                biWidthBytes,
                (UCHAR) 255);
            break;
    
        case IMAGE_XFER_GRAY_INCREASING:
            // grayscale increasing with each image captured
            RtlFillMemory(
                pLineBuffer,
                biWidthBytes,
                (UCHAR) (pStrmEx->FrameInfo.PictureNumber * 8));
            break;
    
        default:
            break;
        }
    } // endif RGB24

    else if ((biBitCount == 16) && (biCompression == FOURCC_YUV422)) {

        switch (Command) {
    
        case IMAGE_XFER_NTSC_EIA_100AMP_100SAT:
        default:
            {
                UINT x, col;
                PUCHAR pT = pLineBuffer;
        
                for (x = 0; x < (biWidth / 2); x++) {
                    col = (x * 8) / (biWidth / 2);
                    col = FlipHorizontal ? (7 - col) : col;

                    *pT++ = NTSCColorBars100Amp100SatYUV[0][col]; // U
                    *pT++ = NTSCColorBars100Amp100SatYUV[1][col]; // Y
                    *pT++ = NTSCColorBars100Amp100SatYUV[2][col]; // V
                    *pT++ = NTSCColorBars100Amp100SatYUV[3][col]; // Y
                }
            }
            break;
        }
    } 

    else {
        DbgLogError(("\'TestCap: Unknown format in ImageSynth!!!\n"));
        TRAP;
    }


    // 
    // Copy the single line synthesized to all rows of the image
    //

    for (Line = 0; Line < LinesToCopy; Line++, pImage += biWidthBytes) {

        // Show some action on an otherwise static image
        // This will be a changing grayscale horizontal band
        // at the bottom of an RGB image and a changing color band at the 
        // top of a YUV image

        if (Line >= 3 && Line <= 6) {
            UINT j;
            for (j = 0; j < biWidthBytes; j++) {
                *(pImage + j) = (UCHAR) pStrmEx->FrameInfo.PictureNumber;
            }
            continue;
        }

        // Copy the synthesized line

        RtlCopyMemory(
                pImage,
		        pLineBuffer,
		        biWidthBytes);
    }

    //
    // Report back the actual number of bytes copied to the destination buffer
    // (This can be smaller than the allocated buffer for compressed images)
    //

    pDataPacket->DataUsed = biSizeImage;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capvideo.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "capdebug.h"
#include "capxfer.h"
#include "ntstatus.h"

//==========================================================================;
// General queue management routines
//==========================================================================;

/*
** AddToListIfBusy ()
**
**   Grabs a spinlock, checks the busy flag, and if set adds an SRB to a queue
**
** Arguments:
**
**   pSrb - Stream request block
**
**   SpinLock - The spinlock to use when checking the flag
**
**   BusyFlag - The flag to check
**
**   ListHead - The list onto which the Srb will be added if the busy flag is set
**
** Returns:
**
**   The state of the busy flag on entry.  This will be TRUE if we're already
**   processing an SRB, and FALSE if no SRB is already in progress.
**
** Side Effects:  none
*/

BOOL
STREAMAPI
AddToListIfBusy (
    IN PHW_STREAM_REQUEST_BLOCK pSrb,
    IN KSPIN_LOCK              *SpinLock,
    IN OUT BOOL                *BusyFlag,
    IN LIST_ENTRY              *ListHead
    )
{
    KIRQL                       Irql;
    PSRB_EXTENSION              pSrbExt = (PSRB_EXTENSION)pSrb->SRBExtension;

    KeAcquireSpinLock (SpinLock, &Irql);

    // If we're already processing another SRB, add this current request
    // to the queue and return TRUE

    if (*BusyFlag == TRUE) {
        // Save the SRB pointer away in the SRB Extension
        pSrbExt->pSrb = pSrb;
        InsertTailList(ListHead, &pSrbExt->ListEntry);
        KeReleaseSpinLock(SpinLock, Irql);
        return TRUE;
    }

    // Otherwise, set the busy flag, release the spinlock, and return FALSE

    *BusyFlag = TRUE;
    KeReleaseSpinLock(SpinLock, Irql);

    return FALSE;
}

/*
** RemoveFromListIfAvailable ()
**
**   Grabs a spinlock, checks for an available SRB, and removes it from the list
**
** Arguments:
**
**   &pSrb - where to return the Stream request block if available
**
**   SpinLock - The spinlock to use
**
**   BusyFlag - The flag to clear if the list is empty
**
**   ListHead - The list from which an SRB will be removed if available
**
** Returns:
**
**   TRUE if an SRB was removed from the list
**   FALSE if the list is empty
**
** Side Effects:  none
*/

BOOL
STREAMAPI
RemoveFromListIfAvailable (
    IN OUT PHW_STREAM_REQUEST_BLOCK *pSrb,
    IN KSPIN_LOCK                   *SpinLock,
    IN OUT BOOL                     *BusyFlag,
    IN LIST_ENTRY                   *ListHead
    )
{
    KIRQL                       Irql;

    KeAcquireSpinLock (SpinLock, &Irql);

    //
    // If the queue is now empty, clear the busy flag, and return
    //
    if (IsListEmpty(ListHead)) {
        *BusyFlag = FALSE;
        KeReleaseSpinLock(SpinLock, Irql);
        return FALSE;
    }
    //
    // otherwise extract the SRB
    //
    else {
        PUCHAR          ptr;
        PSRB_EXTENSION  pSrbExt;

        ptr = (PUCHAR)RemoveHeadList(ListHead);
        *BusyFlag = TRUE;
        KeReleaseSpinLock(SpinLock, Irql);
        // Get the SRB out of the SRB extension and return it
        pSrbExt = (PSRB_EXTENSION) (((PUCHAR) ptr) -
                     FIELDOFFSET(SRB_EXTENSION, ListEntry));
        *pSrb = pSrbExt->pSrb;
    }
    return TRUE;
}

//==========================================================================;
// Routines for managing the SRB queue on a per stream basis
//==========================================================================;

/*
** VideoQueueAddSRB ()
**
**   Adds a stream data SRB to a stream queue.  The queue is maintained in a
**   first in, first out order.
**
** Arguments:
**
**   pSrb - Stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoQueueAddSRB (
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    KIRQL                   oldIrql;

    KeAcquireSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], &oldIrql);

    // Save the SRB pointer in the IRP so we can use the IRPs
    // ListEntry to maintain a doubly linked list of pending
    // requests

    pSrb->Irp->Tail.Overlay.DriverContext[0] = pSrb;

    InsertTailList (
                &pHwDevExt->StreamSRBList[StreamNumber],
                &pSrb->Irp->Tail.Overlay.ListEntry);

    // Increment the count of outstanding SRBs in this queue
    pHwDevExt->StreamSRBListSize[StreamNumber]++;

    KeReleaseSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], oldIrql);

}

/*
** VideoQueueRemoveSRB ()
**
**   Removes a stream data SRB from a stream queue
**
** Arguments:
**
**   pHwDevExt - Device Extension
**
**   StreamNumber - Index of the stream
**
** Returns: SRB or NULL
**
** Side Effects:  none
*/

PHW_STREAM_REQUEST_BLOCK
STREAMAPI
VideoQueueRemoveSRB (
    PHW_DEVICE_EXTENSION pHwDevExt,
    int StreamNumber
    )
{
    PUCHAR ptr;
    PIRP pIrp;
    PHW_STREAM_REQUEST_BLOCK pSrb = NULL;
    KIRQL oldIrql;

    KeAcquireSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], &oldIrql);

    //
    // Get the SRB out of the IRP out of the pending list
    //
    if (!IsListEmpty (&pHwDevExt->StreamSRBList[StreamNumber])) {

        ptr = (PUCHAR) RemoveHeadList(
                         &pHwDevExt->StreamSRBList[StreamNumber]);

        pIrp = (PIRP) (((PUCHAR) ptr) -
                     FIELDOFFSET(IRP, Tail.Overlay.ListEntry));

        pSrb = (PHW_STREAM_REQUEST_BLOCK) pIrp->Tail.Overlay.DriverContext[0];

        // Decrement the count of SRBs in this queue
        pHwDevExt->StreamSRBListSize[StreamNumber]--;

    }

    KeReleaseSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], oldIrql);

    return pSrb;
}

/*
** VideoQueueCancelAllSRBs()
**
**    In case of a client crash, this empties the stream queue when the stream closes
**
** Arguments:
**
**    pStrmEx - pointer to the stream extension
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoQueueCancelAllSRBs (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION        pHwDevExt = (PHW_DEVICE_EXTENSION)pStrmEx->pHwDevExt;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PUCHAR                      ptr;
    PIRP                        pIrp;
    PHW_STREAM_REQUEST_BLOCK    pSrb;
    KIRQL                       oldIrql;

    if (pStrmEx->KSState != KSSTATE_STOP) {

        DbgLogInfo(("TestCap: VideoQueueCancelAllSRBs without being in the stopped state\n"));
        // May need to force the device to a stopped state here
        // may need to disable interrupts here !
    }

    //
    // The stream class will cancel all outstanding IRPs for us
    // (but only if we've set TurnOffSynchronization = FALSE)
    //

    KeAcquireSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], &oldIrql);

    //
    // Get the SRB out of the IRP out of the pending list
    //
    while (!IsListEmpty (&pHwDevExt->StreamSRBList[StreamNumber])) {

        ptr = (PUCHAR) RemoveHeadList(
                         &pHwDevExt->StreamSRBList[StreamNumber]);

        pIrp = (PIRP) (((PUCHAR) ptr) -
                     FIELDOFFSET(IRP, Tail.Overlay.ListEntry));

        pSrb = (PHW_STREAM_REQUEST_BLOCK) pIrp->Tail.Overlay.DriverContext[0];

        // Decrement the count of SRBs in this queue
        pHwDevExt->StreamSRBListSize[StreamNumber]--;

        //
        // Make the length zero, and status cancelled
        //

        pSrb->CommandData.DataBufferArray->DataUsed = 0;
        pSrb->Status = STATUS_CANCELLED;

        DbgLogInfo(("TestCap: VideoQueueCancelALLSRBs FOUND Srb=%p, Stream=%d\n", pSrb, StreamNumber));

        CompleteStreamSRB (pSrb);

    }

    KeReleaseSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], oldIrql);

    DbgLogInfo(("TestCap: VideoQueueCancelAll Completed\n"));

}

/*
** VideoQueueCancelOneSRB()
**
**    Called when cancelling a particular SRB
**
** Arguments:
**
**    pStrmEx - pointer to the stream extension
**
**    pSRBToCancel - pointer to the SRB
**
** Returns:
**
**    TRUE if the SRB was found in this queue
**
** Side Effects:  none
*/

BOOL
STREAMAPI
VideoQueueCancelOneSRB (
    PSTREAMEX pStrmEx,
    PHW_STREAM_REQUEST_BLOCK pSrbToCancel
    )
{
    PHW_DEVICE_EXTENSION        pHwDevExt = (PHW_DEVICE_EXTENSION)pStrmEx->pHwDevExt;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    KIRQL                       oldIrql;
    BOOL                        Found = FALSE;
    PIRP                        pIrp;
    PHW_STREAM_REQUEST_BLOCK    pSrb;
    PLIST_ENTRY                 Entry;

    KeAcquireSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], &oldIrql);

    Entry = pHwDevExt->StreamSRBList[StreamNumber].Flink;

    //
    // Loop through the linked list from the beginning to end,
    // trying to find the SRB to cancel
    //

    while (Entry != &pHwDevExt->StreamSRBList[StreamNumber]) {

        pIrp = (PIRP) (((PUCHAR) Entry) -
                     FIELDOFFSET(IRP, Tail.Overlay.ListEntry));

        pSrb = (PHW_STREAM_REQUEST_BLOCK) pIrp->Tail.Overlay.DriverContext[0];

        if (pSrb == pSrbToCancel) {
            RemoveEntryList(Entry);
            Found = TRUE;
            break;
        }

        Entry = Entry->Flink;
    }

    KeReleaseSpinLock (&pHwDevExt->StreamSRBSpinLock[StreamNumber], oldIrql);

    if (Found) {

        pHwDevExt->StreamSRBListSize[StreamNumber]--;

        //
        // Make the length zero, and status cancelled
        //

        pSrbToCancel->CommandData.DataBufferArray->DataUsed = 0;
        pSrbToCancel->Status = STATUS_CANCELLED;

        CompleteStreamSRB (pSrbToCancel);

        DbgLogInfo(("TestCap: VideoQueueCancelOneSRB FOUND Srb=%p, Stream=%d\n", pSrb, StreamNumber));

    }

    DbgLogInfo(("TestCap: VideoQueueCancelOneSRB Completed Stream=%d\n", StreamNumber));

    return Found;
}

/*
** VideoSetFormat()
**
**   Sets the format for a video stream.  This happens both when the
**   stream is first opened, and also when dynamically switching formats
**   on the preview pin.
**
**   It is assumed that the format has been verified for correctness before
**   this call is made.
**
** Arguments:
**
**   pSrb - Stream request block for the Video stream
**
** Returns:
**
**   TRUE if the format could be set, else FALSE
**
** Side Effects:  none
*/

BOOL
STREAMAPI
VideoSetFormat(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    UINT                    nSize;
    PKSDATAFORMAT           pKSDataFormat = pSrb->CommandData.OpenFormat;

    // -------------------------------------------------------------------
    // Specifier FORMAT_VideoInfo for VIDEOINFOHEADER
    // -------------------------------------------------------------------

    if (IsEqualGUID (&pKSDataFormat->Specifier,
                &KSDATAFORMAT_SPECIFIER_VIDEOINFO)) {

        PKS_DATAFORMAT_VIDEOINFOHEADER  pVideoInfoHeader =
                    (PKS_DATAFORMAT_VIDEOINFOHEADER) pSrb->CommandData.OpenFormat;
        PKS_VIDEOINFOHEADER     pVideoInfoHdrRequested =
                    &pVideoInfoHeader->VideoInfoHeader;

        nSize = KS_SIZE_VIDEOHEADER (pVideoInfoHdrRequested);

        DbgLogInfo(("TestCap: New Format\n"));
        DbgLogInfo(("TestCap: pVideoInfoHdrRequested=%p\n", pVideoInfoHdrRequested));
        DbgLogInfo(("TestCap: KS_VIDEOINFOHEADER size=%d\n", nSize));
        DbgLogInfo(("TestCap: Width=%d  Height=%d  BitCount=%d\n",
                    pVideoInfoHdrRequested->bmiHeader.biWidth,
                    pVideoInfoHdrRequested->bmiHeader.biHeight,
                    pVideoInfoHdrRequested->bmiHeader.biBitCount));
        DbgLogInfo(("TestCap: biSizeImage=%d\n",
                    pVideoInfoHdrRequested->bmiHeader.biSizeImage));

        //
        // If a previous format was in use, release the memory
        //
        if (pStrmEx->pVideoInfoHeader) {
            ExFreePool(pStrmEx->pVideoInfoHeader);
            pStrmEx->pVideoInfoHeader = NULL;
        }

        // Since the VIDEOINFOHEADER is of potentially variable size
        // allocate memory for it

        pStrmEx->pVideoInfoHeader = ExAllocatePool(NonPagedPool, nSize);

        if (pStrmEx->pVideoInfoHeader == NULL) {
            DbgLogError(("TestCap: ExAllocatePool failed\n"));
            pSrb->Status = STATUS_INSUFFICIENT_RESOURCES;
            return FALSE;
        }

        // Copy the VIDEOINFOHEADER requested to our storage
        RtlCopyMemory(
                pStrmEx->pVideoInfoHeader,
                pVideoInfoHdrRequested,
                nSize);

        // A renderer may be switching formats, and in this case, the AvgTimePerFrame
        // will be zero.  Don't overwrite a previously set framerate.

        if (pStrmEx->pVideoInfoHeader->AvgTimePerFrame) {
            pStrmEx->AvgTimePerFrame = pStrmEx->pVideoInfoHeader->AvgTimePerFrame;
        }
    }

    // -------------------------------------------------------------------
    // Specifier FORMAT_AnalogVideo for KS_ANALOGVIDEOINFO
    // -------------------------------------------------------------------
    else if (IsEqualGUID (&pKSDataFormat->Specifier,
                &KSDATAFORMAT_SPECIFIER_ANALOGVIDEO)) {

            //
            // AnalogVideo DataRange == DataFormat!
            //

            //
            // For now, don't even cache this
            //

            PKS_DATARANGE_ANALOGVIDEO pDataFormatAnalogVideo =
                    (PKS_DATARANGE_ANALOGVIDEO) pSrb->CommandData.OpenFormat;
    }

    // -------------------------------------------------------------------
    // Specifier FORMAT_VBI for KS_VIDEO_VBI
    // -------------------------------------------------------------------
    else if (IsEqualGUID (&pKSDataFormat->Specifier, 
                &KSDATAFORMAT_SPECIFIER_VBI))
    {
        // On a VBI stream, we save a pointer to StreamFormatVBI, which
        //  has the timing info we want to get at later.
        pStrmEx->pVBIStreamFormat = &StreamFormatVBI;
    }

    // -------------------------------------------------------------------
    // Type FORMAT_NABTS for NABTS pin
    // -------------------------------------------------------------------
    else if (IsEqualGUID (&pKSDataFormat->SubFormat,
                &KSDATAFORMAT_SUBTYPE_NABTS))
    {
        // On a VBI stream, we save a pointer to StreamFormatVBI, which
        //  has the timing info we want to get at later. (Even though
        //  this is really a StreamFormatNABTS pin)
        pStrmEx->pVBIStreamFormat = &StreamFormatVBI;
    }

    // -------------------------------------------------------------------
    // for CC pin
    // -------------------------------------------------------------------
        else if (IsEqualGUID (&pKSDataFormat->SubFormat, 
                &KSDATAFORMAT_SUBTYPE_CC))
    {
        // On a VBI stream, we save a pointer to StreamFormatVBI, which
        //  has the timing info we want to get at later. (Even though
        //  this is really a StreamFormatCC pin)
        pStrmEx->pVBIStreamFormat = &StreamFormatVBI;
    }

    else {
        // Unknown format
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return FALSE;
    }

    return TRUE;
}

/*
** VideoReceiveDataPacket()
**
**   Receives Video data packet commands on the output streams
**
** Arguments:
**
**   pSrb - Stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt!=NULL);

    DbgLogTrace(("TestCap: Receiving Stream Data    SRB %p, %x\n", pSrb, pSrb->Command));

    //
    // Default to success
    //

    pSrb->Status = STATUS_SUCCESS;

    //
    // determine the type of packet.
    //

    switch (pSrb->Command){

    case SRB_READ_DATA:

        // Rule:
        // Only accept read requests when in either the Pause or Run
        // States.  If Stopped, immediately return the SRB.

        if (pStrmEx->KSState == KSSTATE_STOP) {

            CompleteStreamSRB (pSrb);

            break;
        }

        //
        // Put this read request on the pending queue
        //

        VideoQueueAddSRB (pSrb);

        // Since another thread COULD HAVE MODIFIED THE STREAM STATE
        // in the midst of adding it to the queue, check the stream
        // state again, and cancel the SRB if necessary.  Note that
        // this race condition was NOT handled in the original DDK
        // release of testcap!

        if (pStrmEx->KSState == KSSTATE_STOP) {

            VideoQueueCancelOneSRB (
                pStrmEx,
                pSrb);
        }

        break;

    default:

        //
        // invalid / unsupported command. Fail it as such
        //

        TRAP;

        pSrb->Status = STATUS_NOT_IMPLEMENTED;

        CompleteStreamSRB (pSrb);

    }  // switch (pSrb->Command)
}


/*
** VideoReceiveCtrlPacket()
**
**   Receives packet commands that control the Video output streams
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    BOOL                    Busy;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt!=NULL);

    DbgLogTrace(("TestCap: Receiving Stream Control SRB %p, %x\n", pSrb, pSrb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    while (TRUE) {

        //
        // Default to success
        //

        pSrb->Status = STATUS_SUCCESS;

        //
        // determine the type of packet.
        //

        switch (pSrb->Command)
        {

        case SRB_PROPOSE_DATA_FORMAT:
            DbgLogInfo(("TestCap: Receiving SRB_PROPOSE_DATA_FORMAT  SRB %p, StreamNumber= %d\n", pSrb, StreamNumber));
            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
                DbgLogInfo(("TestCap: SRB_PROPOSE_DATA_FORMAT FAILED\n"));
            }
            // KS support for dynamic format changes is BROKEN right now,
            //  so we prevent these from happening by saying they ALL fail.
            // If this is ever fixed, the next line must be removed.
            pSrb->Status = STATUS_NO_MATCH; // prevent dynamic format changes
            break;

        case SRB_SET_DATA_FORMAT:
            DbgLogInfo(("TestCap: SRB_SET_DATA_FORMAT\n"));
            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
                DbgLogInfo(("TestCap: SRB_SET_DATA_FORMAT FAILED\n"));
            } else {
                VideoSetFormat (pSrb);
                DbgLogInfo(("TestCap: SRB_SET_DATA_FORMAT SUCCEEDED\n"));
            }

            break;

        case SRB_GET_DATA_FORMAT:
            DbgLogInfo(("TestCap: SRB_GET_DATA_FORMAT\n"));
            pSrb->Status = STATUS_NOT_IMPLEMENTED;
            break;


        case SRB_SET_STREAM_STATE:

            VideoSetState(pSrb);
            break;

        case SRB_GET_STREAM_STATE:

            VideoGetState(pSrb);
            break;

        case SRB_GET_STREAM_PROPERTY:

            VideoGetProperty(pSrb);
            break;

        case SRB_SET_STREAM_PROPERTY:

            VideoSetProperty(pSrb);
            break;

        case SRB_INDICATE_MASTER_CLOCK:

            //
            // Assigns a clock to a stream
            //

            VideoIndicateMasterClock (pSrb);

            break;

        default:

            //
            // invalid / unsupported command. Fail it as such
            //

            TRAP;

            pSrb->Status = STATUS_NOT_IMPLEMENTED;
        }

        CompleteStreamSRB (pSrb);

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

        if (!Busy) {
            break;
        }
    }
}

/*
** AnalogVideoReceiveDataPacket()
**
**   Receives AnalogVideo data packet commands on the input stream
**
** Arguments:
**
**   pSrb - Stream request block for the Analog Video stream.
**          This stream receives tuner control packets.
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
AnalogVideoReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PKSSTREAM_HEADER        pDataPacket = pSrb->CommandData.DataBufferArray;

    //
    // make sure we have a device extension and are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt!=NULL);

    DbgLogInfo(("TestCap: Receiving Tuner packet    SRB %p, %x\n", pSrb, pSrb->Command));

    //
    // Default to success
    //

    pSrb->Status = STATUS_SUCCESS;

    //
    // determine the type of packet.
    //

    switch (pSrb->Command){

    case SRB_WRITE_DATA:

        //
        // This data packet contains the channel change information
        // passed on the AnalogVideoIn stream.  Devices which support
        // VBI data streams need to pass this info on their output pins.
        //

        if (pDataPacket->FrameExtent == sizeof (KS_TVTUNER_CHANGE_INFO)) {

            RtlCopyMemory(
                &pHwDevExt->TVTunerChangeInfo,
                pDataPacket->Data,
                sizeof (KS_TVTUNER_CHANGE_INFO));
        }

        CompleteStreamSRB (pSrb);

        break;

    default:

        //
        // invalid / unsupported command. Fail it as such
        //

        TRAP;

        pSrb->Status = STATUS_NOT_IMPLEMENTED;

        CompleteStreamSRB (pSrb);

    }  // switch (pSrb->Command)
}


/*
** AnalogVideoReceiveCtrlPacket()
**
**   Receives packet commands that control the Analog Video stream
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
AnalogVideoReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    BOOL                    Busy;

    //
    // make sure we have a device extension and we are at passive level
    //

    DEBUG_ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);
    DEBUG_ASSERT(pHwDevExt!=NULL);

    DbgLogTrace(("TestCap: Receiving Analog Stream Control SRB %p, %x\n", pSrb, pSrb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    do {
        //
        // Default to success
        //

        pSrb->Status = STATUS_SUCCESS;

        //
        // determine the type of packet.
        //

        switch (pSrb->Command)
        {

        case SRB_PROPOSE_DATA_FORMAT:
            DbgLogInfo(("TestCap: Receiving SRB_PROPOSE_DATA_FORMAT  SRB %p, StreamNumber= %d\n", pSrb, StreamNumber));

            if (!(AdapterVerifyFormat (
                    pSrb->CommandData.OpenFormat,
                    pSrb->StreamObject->StreamNumber))) {
                pSrb->Status = STATUS_NO_MATCH;
            }
            break;

        case SRB_SET_STREAM_STATE:

            //
            // Don't use VideoSetState, since we don't want to start another
            // timer running
            //

            pStrmEx->KSState = pSrb->CommandData.StreamState;
            DbgLogInfo(("TestCap: STATE=%d, Stream=%d\n", pStrmEx->KSState, StreamNumber));
            break;

        case SRB_GET_STREAM_STATE:

            VideoGetState(pSrb);
            break;

        case SRB_GET_STREAM_PROPERTY:

            VideoGetProperty(pSrb);
            break;

        case SRB_INDICATE_MASTER_CLOCK:

            //
            // Assigns a clock to a stream
            //

            VideoIndicateMasterClock (pSrb);

            break;

        default:

            //
            // invalid / unsupported command. Fail it as such
            //

            TRAP;

            pSrb->Status = STATUS_NOT_IMPLEMENTED;
        }

        CompleteStreamSRB (pSrb);

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &pSrb,
                        &pHwDevExt->AdapterSpinLock,
                        &pHwDevExt->ProcessingControlSRB [StreamNumber],
                        &pHwDevExt->StreamControlSRBList[StreamNumber]);

    } while ( Busy );
}


/*
** CompleteStreamSRB ()
**
**   This routine is called when a packet is being completed.
**
** Arguments:
**
**   pSrb - pointer to the request packet to be completed
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
CompleteStreamSRB (
     IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    DbgLogTrace(("TestCap: Completing Stream        SRB %p\n", pSrb));

    StreamClassStreamNotification(
            StreamRequestComplete,
            pSrb->StreamObject,
            pSrb);
}


/*
** VideoGetProperty()
**
**    Routine to process video property requests
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoGetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    if (IsEqualGUID (&KSPROPSETID_Connection, &pSPD->Property->Set)) {
        VideoStreamGetConnectionProperty (pSrb);
    }
    else if (IsEqualGUID (&PROPSETID_VIDCAP_DROPPEDFRAMES, &pSPD->Property->Set)) {
        VideoStreamGetDroppedFramesProperty (pSrb);
    }
    else {
       pSrb->Status = STATUS_NOT_IMPLEMENTED;
    }
}

/*
** VideoSetProperty()
**
**    Routine to process video property requests
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoSetProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
//    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;

    pSrb->Status = STATUS_NOT_IMPLEMENTED;
}



/*
** VideoTimerRoutine()
**
**    A timer has been created based on the requested capture interval.
**    This is the callback routine for this timer event.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
**    Context - pointer to the stream extension
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoTimerRoutine(
    PVOID Context
    )
{
    PSTREAMEX                   pStrmEx = ((PSTREAMEX)Context);
    PHW_DEVICE_EXTENSION        pHwDevExt = pStrmEx->pHwDevExt;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {
        return;
    }

    // Capture a frame if it's time and we have a buffer

    VideoCaptureRoutine(pStrmEx);

    // Schedule the next timer event
    // Make it run at 2x the requested capture rate (which is in 100nS units)

    StreamClassScheduleTimer (
            pStrmEx->pStreamObject,     // StreamObject
            pHwDevExt,                  // HwDeviceExtension
            (ULONG) (pStrmEx->AvgTimePerFrame / 20), // Microseconds
            VideoTimerRoutine,          // TimerRoutine
            pStrmEx);                   // Context
}


/*
** VideoCaptureRoutine()
**
**    Routine to capture video frames based on a timer.
**
**    Note:  Devices capable of using interrupts should always
**           trigger capture on a VSYNC interrupt, and not use a timer.
**
** Arguments:
**
** Returns: nothing
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoCaptureRoutine(
    IN PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PKSSTREAM_HEADER        pDataPacket;
    PKS_FRAME_INFO          pFrameInfo;

    // If we're stopped and the timer is still running, just return.
    // This will stop the timer.

    if (pStrmEx->KSState == KSSTATE_STOP) {
        return;
    }


    // Find out what time it is, if we're using a clock

    if (pStrmEx->hMasterClock ) {
        HW_TIME_CONTEXT TimeContext;

        TimeContext.HwDeviceExtension = pHwDevExt;
        TimeContext.HwStreamObject = pStrmEx->pStreamObject;
        TimeContext.Function = TIME_GET_STREAM_TIME;

        StreamClassQueryMasterClockSync (
                pStrmEx->hMasterClock,
                &TimeContext);

        pStrmEx->QST_StreamTime = TimeContext.Time;
        pStrmEx->QST_Now = TimeContext.SystemTime;

        if (pStrmEx->QST_NextFrame == 0) {
            pStrmEx->QST_NextFrame = pStrmEx->QST_StreamTime + pStrmEx->AvgTimePerFrame;
        }

#ifdef CREATE_A_FLURRY_OF_TIMING_SPEW
        DbgLogTrace(("TestCap: Time=%6d mS at SystemTime=%I64d\n", 
                     (LONG) ((LONGLONG) TimeContext.Time / 10000), 
                     TimeContext.SystemTime));
#endif
    }


    // Only capture in the RUN state

    if (pStrmEx->KSState == KSSTATE_RUN) {

        //
        // Determine if it is time to capture a frame based on
        // how much time has elapsed since capture started.
        // If there isn't a clock available, then capture immediately.
        //

        if ((!pStrmEx->hMasterClock) ||
             (pStrmEx->QST_StreamTime >= pStrmEx->QST_NextFrame)) {

            PHW_STREAM_REQUEST_BLOCK pSrb;

            // Increment the picture count (usually this is VSYNC count)

            pStrmEx->FrameInfo.PictureNumber++;

            //
            // Get the next queue SRB (if any)
            //

            pSrb = VideoQueueRemoveSRB (
                            pHwDevExt,
                            StreamNumber);

            if (pSrb) {

                pDataPacket = pSrb->CommandData.DataBufferArray;
                pFrameInfo = (PKS_FRAME_INFO) (pDataPacket + 1);

                //
                // Call the routine which synthesizes images
                //

                ImageSynth (pSrb,
                            pHwDevExt->VideoInputConnected,
                            pStrmEx->VideoControlMode & KS_VideoControlFlag_FlipHorizontal);

                // Set additional info fields about the data captured such as:
                //   Frames Captured
                //   Frames Dropped
                //   Field Polarity

                pStrmEx->FrameInfo.ExtendedHeaderSize = pFrameInfo->ExtendedHeaderSize;

                *pFrameInfo = pStrmEx->FrameInfo;

                // Init the flags to zero
                pDataPacket->OptionsFlags = 0;

                // Set the discontinuity flag if frames have been previously
                // dropped, and then reset our internal flag

                if (pStrmEx->fDiscontinuity) {
                    pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY;
                    pStrmEx->fDiscontinuity = FALSE;
                }

                //
                // Return the timestamp for the frame
                //
                pDataPacket->PresentationTime.Numerator = 1;
                pDataPacket->PresentationTime.Denominator = 1;
                pDataPacket->Duration = pStrmEx->AvgTimePerFrame;

                //
                // if we have a master clock AND this is the capture stream
                //
                if (pStrmEx->hMasterClock && (StreamNumber == 0)) {

                    pDataPacket->PresentationTime.Time = pStrmEx->QST_StreamTime;
                    pDataPacket->OptionsFlags |=
                        KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                        KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
                }
                else {
                    //
                    // no clock or the preview stream, so just mark the time as unknown
                    //
                    pDataPacket->PresentationTime.Time = 0;
                    // clear the timestamp valid flags
                    pDataPacket->OptionsFlags &=
                        ~(KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                          KSSTREAM_HEADER_OPTIONSF_DURATIONVALID);
                }

                // Every frame we generate is a key frame (aka SplicePoint)
                // Delta frames (B or P) should not set this flag

                pDataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT;

                // Output a frame count every 100th frame in Debug mode
                if (pStrmEx->FrameInfo.PictureNumber % 100 == 0) {
                   DbgLogInfo(("TestCap: Picture %u, Stream=%d\n", 
                               (unsigned int)pStrmEx->FrameInfo.PictureNumber, 
                               StreamNumber));
                }

                CompleteStreamSRB (pSrb);

            } // if we have an SRB

            else {

                //
                // No buffer was available when we should have captured one

                // Increment the counter which keeps track of
                // dropped frames

                pStrmEx->FrameInfo.DropCount++;

                // Set the (local) discontinuity flag
                // This will cause the next packet processed to have the
                //   KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY flag set.

                pStrmEx->fDiscontinuity = TRUE;

            }

            // Figure out when to capture the next frame
            pStrmEx->QST_NextFrame += pStrmEx->AvgTimePerFrame;

        } // endif time to capture a frame
    } // endif we're running
}


/*
** VideoSetState()
**
**    Sets the current state for a given stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoSetState(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION        pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX                   pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                         StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    KSSTATE                     PreviousState;

    //
    // For each stream, the following states are used:
    //
    // Stop:    Absolute minimum resources are used.  No outstanding IRPs.
    // Acquire: KS only state that has no DirectShow correpondence
    //          Acquire needed resources.
    // Pause:   Getting ready to run.  Allocate needed resources so that
    //          the eventual transition to Run is as fast as possible.
    //          Read SRBs will be queued at either the Stream class
    //          or in your driver (depending on when you send "ReadyForNext")
    //          and whether you're using the Stream class for synchronization
    // Run:     Streaming.
    //
    // Moving to Stop to Run always transitions through Pause.
    //
    // But since a client app could crash unexpectedly, drivers should handle
    // the situation of having outstanding IRPs cancelled and open streams
    // being closed WHILE THEY ARE STREAMING!
    //
    // Note that it is quite possible to transition repeatedly between states:
    // Stop -> Pause -> Stop -> Pause -> Run -> Pause -> Run -> Pause -> Stop
    //

    //
    // Remember the state we're transitioning away from
    //

    PreviousState = pStrmEx->KSState;

    //
    // Set the new state
    //

    pStrmEx->KSState = pSrb->CommandData.StreamState;

    switch (pSrb->CommandData.StreamState)

    {
    case KSSTATE_STOP:

        //
        // The stream class will cancel all outstanding IRPs for us
        // (but only if it is maintaining the queue ie. using Stream Class synchronization)
        // Since Testcap is not using Stream Class synchronization, we must clear the queue here

        VideoQueueCancelAllSRBs (pStrmEx);

        DbgLogInfo(("TestCap: STATE Stopped, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_ACQUIRE:

        //
        // This is a KS only state, that has no correspondence in DirectShow
        //
        DbgLogInfo(("TestCap: STATE Acquire, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_PAUSE:

        //
        // On a transition to pause from acquire or stop, start our timer running.
        //

        if (PreviousState == KSSTATE_ACQUIRE || PreviousState == KSSTATE_STOP) {

            // Zero the frame counters
            pStrmEx->FrameInfo.PictureNumber = 0;
            pStrmEx->FrameInfo.DropCount = 0;
            pStrmEx->FrameInfo.dwFrameFlags = 0;

            // Setup the next timer callback(s)
            VideoTimerRoutine(pStrmEx);
        }
        DbgLogInfo(("TestCap: STATE Pause, Stream=%d\n", StreamNumber));
        break;

    case KSSTATE_RUN:

        //
        // Begin Streaming.
        //

        // Reset the discontinuity flag

        pStrmEx->fDiscontinuity = FALSE;

        // Setting the NextFrame time to zero will cause the value to be
        // reset from the stream time

        pStrmEx->QST_NextFrame = 0;

        DbgLogInfo(("TestCap: STATE Run, Stream=%d\n", StreamNumber));
        break;

    } // end switch (pSrb->CommandData.StreamState)
}

/*
** VideoGetState()
**
**    Gets the current state of the requested stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoGetState(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;

    pSrb->CommandData.StreamState = pStrmEx->KSState;
    pSrb->ActualBytesTransferred = sizeof (KSSTATE);

    // A very odd rule:
    // When transitioning from stop to pause, DShow tries to preroll
    // the graph.  Capture sources can't preroll, and indicate this
    // by returning VFW_S_CANT_CUE in user mode.  To indicate this
    // condition from drivers, they must return STATUS_NO_DATA_DETECTED

    if (pStrmEx->KSState == KSSTATE_PAUSE) {
       pSrb->Status = STATUS_NO_DATA_DETECTED;
    }
}


/*
** VideoStreamGetConnectionProperty()
**
**    Gets the properties for a stream
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoStreamGetConnectionProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property
    int  streamNumber = (int)pSrb->StreamObject->StreamNumber;

    switch (Id) {
        // This property describes the allocator requirements for the stream
        case KSPROPERTY_CONNECTION_ALLOCATORFRAMING:
        {
            PKSALLOCATOR_FRAMING Framing =
                (PKSALLOCATOR_FRAMING) pSPD->PropertyInfo;
            Framing->RequirementsFlags =
                KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY |
                KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER |
                KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY;
            Framing->PoolType = PagedPool;
            Framing->FileAlignment = 0; // FILE_LONG_ALIGNMENT???;
            Framing->Reserved = 0;
            pSrb->ActualBytesTransferred = sizeof (KSALLOCATOR_FRAMING);

            switch (streamNumber) {
                case STREAM_Capture:
                case STREAM_Preview:
                    Framing->Frames = 2;
                    Framing->FrameSize =
                        pStrmEx->pVideoInfoHeader->bmiHeader.biSizeImage;
                    break;

                case STREAM_VBI:
                    Framing->Frames = 8;
                    Framing->FrameSize = StreamFormatVBI.DataRange.SampleSize;
                    break;

                case STREAM_CC:
                    Framing->Frames = 100;
                    Framing->FrameSize = StreamFormatCC.SampleSize;
                    break;

                case STREAM_NABTS:
                    Framing->Frames = 20;
                    Framing->FrameSize = StreamFormatNABTS.SampleSize;
                    break;

                case STREAM_AnalogVideoInput:
                default:
                    pSrb->Status = STATUS_INVALID_PARAMETER;
                    break;
            }
            break;
        }

        default:
            TRAP;
            break;
    }
}

/*
** VideoStreamGetDroppedFramesProperty()
**
**    Gets dynamic information about the progress of the capture process.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoStreamGetDroppedFramesProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_DROPPEDFRAMES_CURRENT:
        {
            PKSPROPERTY_DROPPEDFRAMES_CURRENT_S pDroppedFrames =
                (PKSPROPERTY_DROPPEDFRAMES_CURRENT_S) pSPD->PropertyInfo;

            pDroppedFrames->PictureNumber = pStrmEx->FrameInfo.PictureNumber;
            pDroppedFrames->DropCount = pStrmEx->FrameInfo.DropCount;
            pDroppedFrames->AverageFrameSize = pStrmEx->pVideoInfoHeader->bmiHeader.biSizeImage;

            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_DROPPEDFRAMES_CURRENT_S);
        }
        break;

    default:
        TRAP;
        break;
    }
}

//==========================================================================;
//                   Clock Handling Routines
//==========================================================================;


/*
** VideoIndicateMasterClock ()
**
**    If this stream is not being used as the master clock, this function
**      is used to provide us with a handle to the clock to use when
**      requesting the current stream time.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
STREAMAPI
VideoIndicateMasterClock(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;

    pStrmEx->hMasterClock = pSrb->CommandData.MasterClockHandle;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\capxfer.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;


#ifndef __CAPXFER_H__
#define __CAPXFER_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


// Select an image to synthesize by connecting to a particular
// input pin on the analog crossbar.  The index of the pin
// selects the image to synthesize.

typedef enum _ImageXferCommands
{
    IMAGE_XFER_NTSC_EIA_100AMP_100SAT = 0,      
    IMAGE_XFER_NTSC_EIA_75AMP_100SAT,           
    IMAGE_XFER_BLACK,
    IMAGE_XFER_WHITE,
    IMAGE_XFER_GRAY_INCREASING, 
    IMAGE_XFER_LIST_TERMINATOR                  // Always keep this guy last
} ImageXferCommands;

void ImageSynth (
        IN OUT PHW_STREAM_REQUEST_BLOCK pSrb,
        IN ImageXferCommands Command,
        IN BOOL FlipHorizontal );

#ifdef    __cplusplus
}
#endif // __cplusplus

#endif //__CAPXFER_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\mediums.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

//
// This file defines interconnections between components via Mediums
//

#ifdef DEFINE_MEDIUMS
    #define MEDIUM_DECL static
#else
    #define MEDIUM_DECL extern
#endif
                               
/*  -----------------------------------------------------------

    Topology of all devices:

                            PinDir  FilterPin#    M_GUID#
    TVTuner                 
        TVTunerVideo        out         0            0
        TVTunerAudio        out         1            1
        TVTunerRadioAudio   out         2            2
        IntermediateFreq    out         3            6
    TVAudio
        TVTunerAudio        in          0            1
        TVAudio             out         1            3
    Crossbar
        TVTunerVideo        in          0            0
        TVAudio             in          5            3
        TVTunerRadioAudio   in          6            2
        AnalogVideoIn       out         9            4
        AudioOut            out         10           NULL
    Capture
        AnalogVideoIn       in          0            4
        

All other pins are marked as promiscuous connections via GUID_NULL
------------------------------------------------------------------ */        
        
// Define the GUIDs which will be used to create the Mediums
#define M_GUID0 0x8dad65e0, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID1 0x8dad65e1, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID2 0x8dad65e2, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID3 0x8dad65e3, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID4 0x8dad65e4, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID5 0x8dad65e5, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_NOCONNECT  0x8dad65e6, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_NOCONNECT2 0x8dad65e7, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba
#define M_GUID6 0x8dad65e8, 0x122b, 0x11d1, 0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba

// Note: To allow multiple instances of the same piece of hardware,
// set the first ULONG after the GUID in the Medium to a unique value.

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM TVTunerMediums[] = {
    {M_GUID0,           0, 0},  // Pin 0  AnalogVideoOut
    {M_GUID1,           0, 0},  // Pin 1  AnalogAudioOut
    {M_GUID2,           0, 0},  // Pin 2  FMAudioOut
    {M_GUID6,           0, 0},  // Pin 3  IntermediateFreqOut
};

MEDIUM_DECL BOOL TVTunerPinDirection [] = {
    TRUE,                       // Output Pin 0
    TRUE,                       // Output Pin 1
    TRUE,                       // Output Pin 2
    TRUE,                       // Output Pin 3
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM TVAudioMediums[] = {
    {M_GUID1,           0, 0},  // Pin 0
    {M_GUID3,           0, 0},  // Pin 1
};

MEDIUM_DECL BOOL TVAudioPinDirection [] = {
    FALSE,                      // Input  Pin 0
    TRUE,                       // Output Pin 1
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM CrossbarMediums[] = {
    {M_GUID0,           0, 0},  // Input  Pin 0, KS_PhysConn_Video_Tuner,        
    {M_NOCONNECT,       0, 0},  // Input  Pin 1  KS_PhysConn_Video_Composite,    
    {M_NOCONNECT,       0, 0},  // Input  Pin 2  KS_PhysConn_Video_SVideo,       
    {M_NOCONNECT,       0, 0},  // Input  Pin 3  KS_PhysConn_Video_Tuner,        
    {M_NOCONNECT,       0, 0},  // Input  Pin 4  KS_PhysConn_Video_Composite,    
    {M_GUID3,           0, 0},  // Input  Pin 5  KS_PhysConn_Audio_Tuner,        
    {M_GUID2,           0, 0},  // Input  Pin 6  KS_PhysConn_Audio_Line,         
    {M_NOCONNECT,       0, 0},  // Input  Pin 7  KS_PhysConn_Audio_Tuner,        
    {M_NOCONNECT,       0, 0},  // Input  Pin 8  KS_PhysConn_Audio_Line,         
    {M_GUID4,           0, 0},  // Output Pin 9  KS_PhysConn_Video_VideoDecoder, 
    {STATIC_GUID_NULL,  0, 0},  // Output Pin 10 KS_PhysConn_Audio_AudioDecoder, 
};

MEDIUM_DECL BOOL CrossbarPinDirection [] = {
    FALSE,                      // Input  Pin 0, KS_PhysConn_Video_Tuner,     
    FALSE,                      // Input  Pin 1  KS_PhysConn_Video_Composite, 
    FALSE,                      // Input  Pin 2  KS_PhysConn_Video_SVideo,    
    FALSE,                      // Input  Pin 3  KS_PhysConn_Video_Tuner,     
    FALSE,                      // Input  Pin 4  KS_PhysConn_Video_Composite, 
    FALSE,                      // Input  Pin 5  KS_PhysConn_Audio_Tuner, 
    FALSE,                      // Input  Pin 6  KS_PhysConn_Audio_Line,  
    FALSE,                      // Input  Pin 7  KS_PhysConn_Audio_Tuner, 
    FALSE,                      // Input  Pin 8  KS_PhysConn_Audio_Line,  
    TRUE,                       // Output Pin 9  KS_PhysConn_Video_VideoDecoder,
    TRUE,                       // Output Pin 10 KS_PhysConn_Audio_AudioDecoder,
};

// -----------------------------------------------

MEDIUM_DECL KSPIN_MEDIUM CaptureMediums[] = {
    {STATIC_GUID_NULL,  0, 0},  // Pin 0  Capture
    {STATIC_GUID_NULL,  0, 0},  // Pin 1  Preview
    {M_GUID4,           0, 0},  // Pin 2  Analog Video In
};

MEDIUM_DECL BOOL CapturePinDirection [] = {
    TRUE,                       // Output Pin 0
    TRUE,                       // Output Pin 1
    FALSE,                      // Input  Pin 2
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\ddraw.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1996  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "ddkmapi.h"
#include "capmain.h"
#include "capdebug.h"

#define _NO_COM
#include "ddkernel.h"

#define DD_OK 0

// The following should be defined in ddkmapi.h, but for some reason are not!

#ifndef booboo // DDKERNELCAPS_SKIPFIELDS
/*
 * Indicates that the device supports field skipping.
 */
#define DDKERNELCAPS_SKIPFIELDS			0x00000001l

/*
 * Indicates that the device can support software autoflipping.
 */
#define DDKERNELCAPS_AUTOFLIP			0x00000002l

/*
 * Indicates that the device can switch between bob and weave.
 */
#define DDKERNELCAPS_SETSTATE			0x00000004l

/*
 * Indicates that a client can gain direct access to the frame buffer.
 */
#define DDKERNELCAPS_LOCK			0x00000008l

/*
 * Indicates that a client can manually flip the video port.
 */
#define DDKERNELCAPS_FLIPVIDEOPORT		0x00000010l

/*
 * Indicates that a client can manually flip the overlay.
 */
#define DDKERNELCAPS_FLIPOVERLAY		0x00000020l

/*
 * Indicates that the device supports a fast, asynchronous transfer
 * mechanism to system memory.
 */
#define DDKERNELCAPS_TRANSFER_SYSMEM		0x00000040l

/*
 * Indicates that the device supports a fast, asynchronous transfer
 * mechanism via AGP.
 */
#define DDKERNELCAPS_TRANSFER_AGP		0x00000080l

/*
 * Indicates that the device can report the polarity (even/odd) of
 * the curent video field.
 */
#define DDKERNELCAPS_FIELDPOLARITY		0x00000100l

/****************************************************************************
 *
 * DDKERNELCAPS IRQ CAPS
 *
 ****************************************************************************/

/*
 * The device can generate display VSYNC IRQs
 */
#define DDIRQ_DISPLAY_VSYNC			0x00000001l

/*
 * Reserved
 */
#define DDIRQ_RESERVED1				0x00000002l

/*
 * The device can generate video ports VSYNC IRQs using video port 0
 */
#define DDIRQ_VPORT0_VSYNC			0x00000004l

/*
 * The device can generate video ports line IRQs using video port 0
 */
#define DDIRQ_VPORT0_LINE			0x00000008l

/*
 * The device can generate video ports VSYNC IRQs using video port 1
 */
#define DDIRQ_VPORT1_VSYNC			0x00000010l

/*
 * The device can generate video ports line IRQs using video port 1
 */
#define DDIRQ_VPORT1_LINE			0x00000020l

/*
 * The device can generate video ports VSYNC IRQs using video port 2
 */
#define DDIRQ_VPORT2_VSYNC			0x00000040l

/*
 * The device can generate video ports line IRQs using video port 2
 */
#define DDIRQ_VPORT2_LINE			0x00000080l

/*
 * The device can generate video ports VSYNC IRQs using video port 3
 */
#define DDIRQ_VPORT3_VSYNC			0x00000100l

/*
 * The device can generate video ports line IRQs using video port 3
 */
#define DDIRQ_VPORT3_LINE			0x00000200l

/*
 * The device can generate video ports VSYNC IRQs using video port 4
 */
#define DDIRQ_VPORT4_VSYNC			0x00000400l

/*
 * The device can generate video ports line IRQs using video port 4
 */
#define DDIRQ_VPORT4_LINE			0x00000800l

/*
 * The device can generate video ports VSYNC IRQs using video port 5
 */
#define DDIRQ_VPORT5_VSYNC			0x00001000l

/*
 * The device can generate video ports line IRQs using video port 5
 */
#define DDIRQ_VPORT5_LINE			0x00002000l

/*
 * The device can generate video ports VSYNC IRQs using video port 6
 */
#define DDIRQ_VPORT6_VSYNC			0x00004000l

/*
 * The device can generate video ports line IRQs using video port 6
 */
#define DDIRQ_VPORT6_LINE			0x00008000l

/*
 * The device can generate video ports VSYNC IRQs using video port 7
 */
#define DDIRQ_VPORT7_VSYNC			0x00010000l

/*
 * The device can generate video ports line IRQs using video port 7
 */
#define DDIRQ_VPORT7_LINE			0x00020000l

/*
 * The device can generate video ports VSYNC IRQs using video port 8
 */
#define DDIRQ_VPORT8_VSYNC			0x00040000l

/*
 * The device can generate video ports line IRQs using video port 8
 */
#define DDIRQ_VPORT8_LINE			0x00080000l

/*
 * The device can generate video ports VSYNC IRQs using video port 9
 */
#define DDIRQ_VPORT9_VSYNC			0x00010000l

/*
 * The device can generate video ports line IRQs using video port 9
 */
#define DDIRQ_VPORT9_LINE			0x00020000l

#endif

DWORD FAR PASCAL
DirectDrawEventCallback (
    DWORD dwEvent, PVOID pContext, DWORD dwParam1, DWORD dwParam2
    )
{
    switch (dwEvent)
    {
        case DDNOTIFY_PRERESCHANGE:
            {
                PSTREAMEX pStrmEx = (PSTREAMEX)pContext;
                PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
                int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

                DbgLogInfo(("Testcap: DDNOTIFY_PRERESCHANGE; stream = %d\n", StreamNumber));

                pStrmEx->PreEventOccurred = TRUE;
            }

            break;

        case DDNOTIFY_POSTRESCHANGE:
            {
                PSTREAMEX pStrmEx = (PSTREAMEX)pContext;
                PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
                int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

                DbgLogInfo(("Testcap: DDNOTIFY_POSTRESCHANGE; stream = %d\n", StreamNumber));

                pStrmEx->PostEventOccurred = TRUE;
                DbgLogInfo(("Testcap: Before Attempted Renegotiation due to DDNOTIFY_POSTRESCHANGE\n"));
 //               AttemptRenegotiation(pStrmEx);
                DbgLogInfo(("Testcap: Afer Attempted Renegotiation due to DDNOTIFY_POSTRESCHANGE\n"));
            }

            break;

        case DDNOTIFY_PREDOSBOX:
            {
                PSTREAMEX pStrmEx = (PSTREAMEX)pContext;
                PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
                int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

                DbgLogInfo(("Testcap: DDNOTIFY_PREDOSBOX; stream = %d\n", StreamNumber));

                pStrmEx->PreEventOccurred = TRUE;
            }

            break;

        case DDNOTIFY_POSTDOSBOX:
            {
                PSTREAMEX pStrmEx = (PSTREAMEX)pContext;
                PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
                int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

                DbgLogInfo(("Testcap: DDNOTIFY_POSTDOSBOX; stream = %d\n", StreamNumber));

                pStrmEx->PostEventOccurred = TRUE;
                DbgLogInfo(("Testcap: Before Attempted Renegotiation due to DDNOTIFY_POSTDOSBOX\n"));
//                AttemptRenegotiation(pStrmEx);
                DbgLogInfo(("Testcap: After Attempted Renegotiation due to DDNOTIFY_POSTDOSBOX\n"));
            }

            break;

        case DDNOTIFY_CLOSEDIRECTDRAW:
            {
                PSTREAMEX pStrmEx = (PSTREAMEX)pContext;
                PHW_DEVICE_EXTENSION    pHwDevExt = (PHW_DEVICE_EXTENSION)pContext;

                DbgLogInfo(("Testcap: DDNOTIFY_CLOSEDIRECTDRAW\n"));

                pStrmEx->KernelDirectDrawHandle = 0;
                pStrmEx->UserDirectDrawHandle = 0;
            }

            break;

        case DDNOTIFY_CLOSESURFACE:
            {
                PHW_STREAM_REQUEST_BLOCK pSrb = (PHW_STREAM_REQUEST_BLOCK)pContext;
                PSRB_EXTENSION          pSrbExt = (PSRB_EXTENSION)pSrb->SRBExtension;

                DbgLogInfo(("Testcap: DDNOTIFY_CLOSESURFACE\n"));

                pSrbExt->KernelSurfaceHandle = 0;
            }

            break;

        default:
            TRAP;
            break;
    }
    return 0;
}

BOOL
RegisterForDirectDrawEvents (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    DDREGISTERCALLBACK ddRegisterCallback;
    DWORD ddOut;

    DbgLogInfo(("Testcap: Stream %d registering for DirectDraw events\n", StreamNumber));

    // =============== DDEVENT_PRERESCHANGE ===============
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_PRERESCHANGE;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_REGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_REGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_POSTRESCHANGE ==============
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_POSTRESCHANGE;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_REGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_REGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_PREDOSBOX =================
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_PREDOSBOX;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_REGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_REGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_POSTDOSBOX ================
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_POSTDOSBOX;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_REGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_REGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }
    pStrmEx->KernelDirectDrawRegistered = TRUE;

    return TRUE;
}


BOOL
UnregisterForDirectDrawEvents (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    DDREGISTERCALLBACK ddRegisterCallback;
    DWORD ddOut;

    DbgLogInfo(("Testcap: Stream %d UNregistering for DirectDraw events\n", StreamNumber));

    // =============== DDEVENT_PRERESCHANGE ===============
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_PRERESCHANGE ;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_UNREGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_UNREGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_POSTRESCHANGE ==============
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_POSTRESCHANGE;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_UNREGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_UNREGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_PREDOSBOX ==================
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_PREDOSBOX;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_UNREGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_UNREGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }

    // =============== DDEVENT_POSTDOSBOX =================
    RtlZeroMemory(&ddRegisterCallback, sizeof(ddRegisterCallback));
    RtlZeroMemory(&ddOut, sizeof(ddOut));

    ddRegisterCallback.hDirectDraw = pStrmEx->KernelDirectDrawHandle;
    ddRegisterCallback.dwEvents = DDEVENT_POSTDOSBOX;
    ddRegisterCallback.pfnCallback = DirectDrawEventCallback;
    ddRegisterCallback.pContext = pStrmEx;

    DxApi(DD_DXAPI_UNREGISTER_CALLBACK, &ddRegisterCallback, sizeof(ddRegisterCallback), &ddOut, sizeof(ddOut));

    if (ddOut != DD_OK) {
        DbgLogInfo(("Testcap: DD_DXAPI_UNREGISTER_CALLBACK failed.\n"));
        TRAP;
        return FALSE;
    }
    pStrmEx->KernelDirectDrawRegistered = FALSE;

    return TRUE;
}


BOOL
OpenKernelDirectDraw (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = pStrmEx->pHwDevExt;
    int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    if (pStrmEx->UserDirectDrawHandle != 0) {
        DDOPENDIRECTDRAWIN  ddOpenIn;
        DDOPENDIRECTDRAWOUT ddOpenOut;

        ASSERT (pStrmEx->KernelDirectDrawHandle == 0);

        DbgLogInfo(("Testcap: Stream %d getting Kernel ddraw handle\n", StreamNumber));

        RtlZeroMemory(&ddOpenIn, sizeof(ddOpenIn));
        RtlZeroMemory(&ddOpenOut, sizeof(ddOpenOut));

        ddOpenIn.dwDirectDrawHandle = (DWORD_PTR) pStrmEx->UserDirectDrawHandle;
        ddOpenIn.pfnDirectDrawClose = DirectDrawEventCallback;
        ddOpenIn.pContext = pStrmEx;

        DxApi(DD_DXAPI_OPENDIRECTDRAW,
                &ddOpenIn,
                sizeof(ddOpenIn),
                &ddOpenOut,
                sizeof(ddOpenOut));

        if (ddOpenOut.ddRVal != DD_OK) {
            DbgLogInfo(("Testcap: DD_DXAPI_OPENDIRECTDRAW failed.\n"));
        }
        else {
            pStrmEx->KernelDirectDrawHandle = ddOpenOut.hDirectDraw;
            return TRUE;
        }
    }

    return FALSE;
}


BOOL
CloseKernelDirectDraw (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = pStrmEx->pHwDevExt;
    int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    if (pStrmEx->KernelDirectDrawHandle != 0) {
        DWORD ddOut;
        DDCLOSEHANDLE ddClose;

        DbgLogInfo(("Testcap: Stream %d CloseKernelDirectDraw\n", StreamNumber));

        ddClose.hHandle = pStrmEx->KernelDirectDrawHandle;

        DxApi(DD_DXAPI_CLOSEHANDLE,
                &ddClose,
                sizeof(ddClose),
                &ddOut,
                sizeof(ddOut));

        pStrmEx->KernelDirectDrawHandle = 0;

        if (ddOut != DD_OK) {
            DbgLogInfo(("Testcap: CloseKernelDirectDraw FAILED.\n"));
            TRAP;
            return FALSE;
        }
    }
    return TRUE;
}

BOOL
IsKernelLockAndFlipAvailable (
    PSTREAMEX pStrmEx
    )
{
    PHW_DEVICE_EXTENSION pHwDevExt = pStrmEx->pHwDevExt;
    int StreamNumber = pStrmEx->pStreamObject->StreamNumber;

    if (pStrmEx->KernelDirectDrawHandle != 0) {
        DDGETKERNELCAPSOUT ddGetKernelCapsOut;

        DbgLogInfo(("Testcap: Stream %d getting Kernel Caps\n", StreamNumber));

        RtlZeroMemory(&ddGetKernelCapsOut, sizeof(ddGetKernelCapsOut));

        DxApi(DD_DXAPI_GETKERNELCAPS,
                &pStrmEx->KernelDirectDrawHandle,
                sizeof(pStrmEx->KernelDirectDrawHandle),
                &ddGetKernelCapsOut,
                sizeof(ddGetKernelCapsOut));

        if (ddGetKernelCapsOut.ddRVal != DD_OK) {
            DbgLogInfo(("Testcap: DDGETKERNELCAPSOUT failed.\n"));
        }
        else {
            DbgLogInfo(("Testcap: Stream %d KernelCaps = %x\n",
                    StreamNumber, ddGetKernelCapsOut.dwCaps));

            if ((ddGetKernelCapsOut.dwCaps & (DDKERNELCAPS_LOCK | DDKERNELCAPS_FLIPOVERLAY)) ==
                                             (DDKERNELCAPS_LOCK | DDKERNELCAPS_FLIPOVERLAY)) {
                // TODO: Check where we may need to set up for kernel flipping
            }
            return TRUE;
        }
    }
    return FALSE;
}


BOOL
OpenKernelDDrawSurfaceHandle(
     IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PSRB_EXTENSION          pSrbExt = (PSRB_EXTENSION)pSrb->SRBExtension;

    ASSERT (pStrmEx->KernelDirectDrawHandle != 0);
    ASSERT (pSrbExt->UserSurfaceHandle != 0);

    if (pSrbExt->UserSurfaceHandle == 0) {
        DDOPENSURFACEIN ddOpenSurfaceIn;
        DDOPENSURFACEOUT ddOpenSurfaceOut;

        DbgLogInfo(("Testcap: Stream %d getting Kernel surface handle\n", StreamNumber));

        RtlZeroMemory(&ddOpenSurfaceIn, sizeof(ddOpenSurfaceIn));
        RtlZeroMemory(&ddOpenSurfaceOut, sizeof(ddOpenSurfaceOut));

        ddOpenSurfaceIn.hDirectDraw = pStrmEx->UserDirectDrawHandle;
        ddOpenSurfaceIn.pfnSurfaceClose = DirectDrawEventCallback;
        ddOpenSurfaceIn.pContext = pSrb;

        ddOpenSurfaceIn.dwSurfaceHandle = (DWORD_PTR) pSrbExt->UserSurfaceHandle;

        DxApi(DD_DXAPI_OPENSURFACE,
                    &ddOpenSurfaceIn,
                    sizeof(ddOpenSurfaceIn),
                    &ddOpenSurfaceOut,
                    sizeof(ddOpenSurfaceOut));

        if (ddOpenSurfaceOut.ddRVal != DD_OK) {
            pSrbExt->KernelSurfaceHandle = 0;
            DbgLogInfo(("Testcap: DD_DXAPI_OPENSURFACE failed.\n"));
            TRAP;
        }
        else {
            pSrbExt->KernelSurfaceHandle = ddOpenSurfaceOut.hSurface;
            return TRUE;
        }
    }
    return FALSE;
}


BOOL
CloseKernelDDrawSurfaceHandle (
    IN PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PHW_DEVICE_EXTENSION    pHwDevExt = ((PHW_DEVICE_EXTENSION)pSrb->HwDeviceExtension);
    PSTREAMEX               pStrmEx = (PSTREAMEX)pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pStrmEx->pStreamObject->StreamNumber;
    PSRB_EXTENSION          pSrbExt = (PSRB_EXTENSION)pSrb->SRBExtension;

    ASSERT (pStrmEx->KernelDirectDrawHandle != 0);
    ASSERT (pSrbExt->UserSurfaceHandle != 0);
    ASSERT (pSrbExt->KernelSurfaceHandle != 0);

    if (pSrbExt->KernelSurfaceHandle != 0) {
        DWORD ddOut;
        DDCLOSEHANDLE ddClose;

        DbgLogInfo(("Testcap: Stream %d ReleaseKernelDDrawSurfaceHandle\n", StreamNumber));

        ddClose.hHandle = pSrbExt->KernelSurfaceHandle;

        DxApi(DD_DXAPI_CLOSEHANDLE, &ddClose, sizeof(ddClose), &ddOut, sizeof(ddOut));

        pSrbExt->KernelSurfaceHandle = 0;  // what else can we do?

        if (ddOut != DD_OK) {
            DbgLogInfo(("Testcap: ReleaseKernelDDrawSurfaceHandle FAILED.\n"));
            TRAP;
            return FALSE;
        }
        else {
            return TRUE;
        }
    }

    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\vbidata.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;


#ifndef __VBIDATA_H__
#define __VBIDATA_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#define  _VBIlineSize  (768*2)
extern unsigned char VBIsamples[][12][_VBIlineSize];
extern unsigned int  VBIfieldSize;
extern unsigned int  VBIfieldCount;

extern unsigned char CCfields[][2];
extern unsigned int  CCfieldCount;

extern unsigned char CCsampleWave[];
extern unsigned short CCsampleWaveSize;
#define CCsampleWaveDataOffset 580
#define CCsampleWaveDC_zero  54
#define CCsampleWaveDC_one  109

extern unsigned char NABTSfields[][sizeof (NABTS_BUFFER)];
extern unsigned int  NABTSfieldCount;

#ifdef    __cplusplus
}
#endif // __cplusplus

#endif //__VBIDATA_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\vbixfer.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;


#ifndef __VBIXFER_H__
#define __VBIXFER_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// Bit-array manipulation
#define BIT(n)             (((unsigned long)1)<<(n))
#define BITSIZE(v)         (sizeof(v)*8)
#define SETBIT(array,n)    (array[(n)/BITSIZE(*array)] |= BIT((n)%BITSIZE(*array)))
#define CLEARBIT(array,n)  (array[(n)/BITSIZE(*array)] &= ~BIT((n)%BITSIZE(*array)))
#define TESTBIT(array,n)   (BIT((n)%BITSIZE(*array)) == (array[(n)/BITSIZE(*array)] & BIT((n)%BITSIZE(*array))))


void CC_ImageSynth(IN OUT PHW_STREAM_REQUEST_BLOCK pSrb);
void CC_EncodeWaveform(
        unsigned char *waveform, unsigned char cc1, unsigned char cc2);
void NABTS_ImageSynth(IN OUT PHW_STREAM_REQUEST_BLOCK pSrb);
void VBI_ImageSynth(IN OUT PHW_STREAM_REQUEST_BLOCK pSrb);

#ifdef    __cplusplus
}
#endif // __cplusplus

#endif //__VBIXFER_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\vbixfer.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"
#include "capmain.h"
#include "capdebug.h"
#include "vbixfer.h"
#include "vbidata.h"

/*
** DEBUG variables to play with
*/
#if DBG
unsigned short  dCCScanWave = 0;
unsigned short  dCCScanLog = 0;
unsigned short  dCCLogOnce = 1;
unsigned short  dCCEncode5A = 0;
#endif //DBG

/*
** CC_ImageSynth()
**
**   Copies canned CC bytes
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns:
**   Nothing
**
** Side Effects:  none
*/

void CC_ImageSynth (
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;
    PKSSTREAM_HEADER        pStreamHeader = pSrb->CommandData.DataBufferArray;
    PCC_HW_FIELD            pCCfield = (PCC_HW_FIELD)pStreamHeader->Data;
    unsigned int            field;
    unsigned int            cc_index;

    DEBUG_ASSERT(pSrb->NumberOfBuffers == 1);

    field = (unsigned int)(pStrmEx->VBIFrameInfo.PictureNumber % CCfieldCount);

    RtlZeroMemory(pCCfield, sizeof (*pCCfield));
    cc_index = 0;

    pCCfield->PictureNumber = pStrmEx->VBIFrameInfo.PictureNumber;
    pCCfield->fieldFlags = (field & 1)? KS_VBI_FLAG_FIELD1 : KS_VBI_FLAG_FIELD2;
    field >>= 1;

    SETBIT(pCCfield->ScanlinesRequested.DwordBitArray, 21);
    if (KS_VBI_FLAG_FIELD1 == pCCfield->fieldFlags) {
        pCCfield->Lines[cc_index].Decoded[0] = CCfields[field][0];
        pCCfield->Lines[cc_index].Decoded[1] = CCfields[field][1];
    }
    else {
        pCCfield->Lines[cc_index].Decoded[0] = 0;
        pCCfield->Lines[cc_index].Decoded[1] = 0;
    }
    //DbgKdPrint(("%c%c", CCfields[field][0] & 0x7F, CCfields[field][1] & 0x7F));
    ++cc_index;

    pStreamHeader->DataUsed = sizeof (CC_HW_FIELD);
}


/*
** CC_EncodeWaveform()
**
**   Writes out a CC waveform encoding the supplied data bytes
**
** Arguments:
**
**   waveform - the buffer for the CC waveform data
**   cc1 - the first byte to encode into the waveform
**   cc2 - the second byte to encode into the waveform
**
** Returns:
**   Nothing
**
** Side Effects:  overwrites waveform with an EIA-608 signal
*/
void CC_EncodeWaveform(
        unsigned char *waveform,
        unsigned char cc1,
        unsigned char cc2)
{
    unsigned int    waveIdx;
    unsigned char   DC_zero = CCsampleWave[0];
    unsigned char   DC_one = CCsampleWave[34];
    unsigned short  DC_last;

    // 455/8 = 56.875 bytes per CC bit at KS_VBISAMPLINGRATE_5X_NABTS(~28.6mhz)
    unsigned int    CCstride = 455;

    unsigned char   *samp, *end, byte;
    unsigned int    bit, done;

#if DBG
    if (dCCEncode5A) {
        cc1 = 0x5A;
        cc2 = 0x5A;
    }

    if (dCCScanWave) {
        // Scan EIGHT bits worth of samples for low / high DC values
        for (samp=CCsampleWave, end=CCsampleWave+CCstride; samp < end; ++samp) {
            if (*samp > DC_one)
                DC_one = *samp;
            else if (*samp < DC_zero)
                DC_zero = *samp;
        }

        for (samp = CCsampleWave + 500; samp < &CCsampleWave[550] ; ++samp) {
            if (*samp >= DC_one - 5)
                break;
        }
        waveIdx = (unsigned int)((samp - CCsampleWave) * 8);

        if (dCCScanLog) {
            DbgKdPrint(("testcap::CC_EncodeWaveform: DC_zero = %u, DC_one = %u, waveIdx = %u\n", DC_zero, DC_one, waveIdx/8));
            dCCScanLog = 0;
        }
    }
    else {
#endif //DBG
        waveIdx = CCsampleWaveDataOffset * 8;
        DC_zero = CCsampleWaveDC_zero;
        DC_one = CCsampleWaveDC_one;
#if DBG
    }

#endif //DBG

    // Copy Run-in bytes and first three bits as-is
    RtlCopyMemory(waveform, CCsampleWave, waveIdx/8);
    DC_last = waveform[waveIdx/8 - 1] * 4;

    // Now encode the requested bytes
    samp = &waveform[waveIdx/8];
    for (byte = cc1, done = 0; ; byte = cc2, done = 1)
    {
        unsigned int    bitpos;

        for (bitpos = 0; bitpos < 8; ++bitpos) {
            bit = byte & 1;
            byte >>= 1;
            for (end = &waveform[(waveIdx + CCstride)/8]; samp < end; ++samp) {
                if (bit == 1) {
                    if (DC_last/4 < DC_one) {
                        DC_last += 7;
                        if (DC_last/4 > DC_one)
                            DC_last = DC_one * 4;
                    }
                }
                else /* bit == 0 */ {
                    if (DC_last/4 > DC_zero) {
                        DC_last -= 7;
                        if (DC_last/4 < DC_zero)
                            DC_last = DC_zero * 4;
                    }
                }
                ASSERT(samp < &waveform[768*2]);
                *samp = DC_last/4;
            }
            waveIdx += CCstride;
        }

        if (done)
            break;
    }

    // Finish up at DC_zero
    for (end = &waveform[768*2]; samp < end; ++samp) {
        if (DC_last/4 > DC_zero) {
            DC_last -= 7;
            if (DC_last/4 < DC_zero)
                DC_last = DC_zero * 4;
        }
        *samp = DC_last/4;
    }
}

/*
** NABTS_ImageSynth()
**
**   Copies canned NABTS bytes
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**
** Returns:
**   Nothing
**
** Side Effects:  none
*/

unsigned char HammingEncode[16] = {
    0x15, 0x02, 0x49, 0x5E, 0x64, 0x73, 0x38, 0x2F,
    0xD0, 0xC7, 0x8C, 0x9B, 0xA1, 0xB6, 0xFD, 0xEA
};

void NABTS_ImageSynth (
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;

    PKSSTREAM_HEADER        pStreamHeader = pSrb->CommandData.DataBufferArray;
    PNABTS_BUFFER           pNbuf = (PNABTS_BUFFER)pStreamHeader->Data;

    unsigned int            field;


#ifdef VBIDATA_NABTS

    DEBUG_ASSERT (pSrb->NumberOfBuffers == 1);

    pNbuf->PictureNumber = pStrmEx->VBIFrameInfo.PictureNumber;

    // Copy the next apropriate field
    field = (unsigned int)(pStrmEx->VBIFrameInfo.PictureNumber % NABTSfieldCount);
    RtlCopyMemory(pNbuf, NABTSfields[field], sizeof (NABTS_BUFFER));

#else /*VBIDATA_NABTS*/

    unsigned char           i, line, ci;
    PNABTS_BUFFER_LINE      pNline;

    // Create a test pattern

    RtlZeroMemory(pNbuf, sizeof (NABTS_BUFFER));

    ci = (unsigned char)(pStrmEx->VBIFrameInfo.PictureNumber % 15);
    pNbuf->PictureNumber = pStrmEx->VBIFrameInfo.PictureNumber;
    
    for (line = 10, pNline = pNbuf->NabtsLines;
        line < 21;
        ++line, ++pNline)
    {
        SETBIT(pNbuf->ScanlinesRequested.DwordBitArray, line);

        pNline->Confidence = 102;       // We're 102% sure this NABTS is OK

        // NABTS Header bytes
        pNline->Bytes[00] =
         pNline->Bytes[01] = 0x55;
        pNline->Bytes[02] = 0xE7;

        // Set GroupID 0x8F4
        pNline->Bytes[03] = HammingEncode[0x8];
        pNline->Bytes[04] = HammingEncode[0xF];
        pNline->Bytes[05] = HammingEncode[0x4];

        pNline->Bytes[06] = HammingEncode[ci];
        pNline->Bytes[07] = HammingEncode[0x0]; // PS = Reg, Full, No suffix
        
        // NABTS Payload
        i = 8;
        pNline->Bytes[i++] = 0xA0;      // Mark the start of payload,
        pNline->Bytes[i++] = 0xA0;      //  just for fun
        pNline->Bytes[i++] = ci;        // Put frame # into payload
        pNline->Bytes[i++] = line;      // Put line # into payload

        // The rest zeros for now...
    }

#endif /*VBIDATA_NABTS*/

    pStreamHeader->DataUsed = sizeof (NABTS_BUFFER);
}

/*
** VBI_ImageSynth()
**
**   Copies canned VBI samples
**
** Arguments:
**
**   pSrb - The stream request block for the Video stream
**   ImageXferCommands - Index specifying the image to generate
**
** Returns:
**   Nothing
**
** Side Effects:  none
*/
void VBI_ImageSynth (
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAMEX               pStrmEx = pSrb->StreamObject->HwStreamExtension;
    int                     StreamNumber = pSrb->StreamObject->StreamNumber;

    PKSSTREAM_HEADER        pStreamHeader = pSrb->CommandData.DataBufferArray;
    PUCHAR                  pImage =  pStreamHeader->Data;

    unsigned int            field, cc_field;
    unsigned char           cc1, cc2;

    DEBUG_ASSERT (pSrb->NumberOfBuffers == 1);

    // Check to make sure that the supplied buffer is large enough
    if (pSrb->CommandData.DataBufferArray->FrameExtent < VBIfieldSize) {
        DbgLogError(("testcap: VBI output pin handed buffer size %d, need %d\n",
                 pSrb->CommandData.DataBufferArray->FrameExtent,
                 VBIfieldSize));
        TRAP;
        return;
    }

    // Copy the next apropriate field
    field = (unsigned int)(pStrmEx->VBIFrameInfo.PictureNumber % VBIfieldCount);
    RtlCopyMemory(pImage, VBIsamples[field], VBIfieldSize);

    // Now mangle the CC waveform to match the HW data
    if (field & 1) {
        cc_field = (unsigned int)
                    (pStrmEx->VBIFrameInfo.PictureNumber >> 1) % CCfieldCount;
        cc1 = CCfields[cc_field][0];
        cc2 = CCfields[cc_field][1];
    }
    else {
        cc1 = 0;
        cc2 = 0;
    }
    CC_EncodeWaveform(VBIsamples[field][21-10], cc1, cc2);

    // Report back the actual number of bytes copied to the destination buffer
    pStreamHeader->DataUsed = VBIfieldSize;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\testcap\vbidata.c ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1998  Microsoft Corporation.  All Rights Reserved.
//
//==========================================================================;

#include "strmini.h"
#include "ksmedia.h"


// CC Sample waveform
unsigned char CCsampleWave[] = {
0x37,0x37,0x36,0x38,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x38,
0x36,0x36,0x37,0x38,0x39,0x39,0x39,0x38,0x38,0x38,0x37,0x37,0x36,0x36,0x36,0x36,
0x36,0x37,0x37,0x38,0x39,0x39,0x38,0x39,0x3a,0x3d,0x3c,0x3c,0x3b,0x3e,0x41,0x43,
0x44,0x48,0x48,0x4b,0x4d,0x50,0x52,0x55,0x58,0x5b,0x5f,0x62,0x63,0x64,0x64,0x65,
0x66,0x68,0x69,0x68,0x68,0x68,0x64,0x64,0x63,0x64,0x63,0x5f,0x5a,0x58,0x56,0x54,
0x51,0x4f,0x4d,0x4c,0x4b,0x49,0x47,0x45,0x44,0x44,0x43,0x41,0x3e,0x3d,0x3b,0x39,
0x3b,0x3b,0x3c,0x3b,0x3e,0x40,0x40,0x42,0x45,0x47,0x4b,0x4c,0x4c,0x50,0x51,0x54,
0x57,0x5a,0x5b,0x5f,0x5f,0x63,0x65,0x66,0x66,0x67,0x68,0x68,0x65,0x65,0x64,0x63,
0x62,0x61,0x5f,0x5d,0x5a,0x57,0x57,0x57,0x55,0x52,0x4f,0x4d,0x4c,0x4b,0x49,0x47,
0x47,0x44,0x3f,0x3e,0x3c,0x3b,0x3c,0x3b,0x38,0x39,0x3a,0x3d,0x3d,0x41,0x43,0x45,
0x47,0x49,0x49,0x4b,0x4d,0x50,0x53,0x55,0x56,0x58,0x58,0x59,0x5c,0x60,0x64,0x67,
0x67,0x67,0x68,0x6a,0x6b,0x6c,0x6d,0x6b,0x69,0x67,0x63,0x62,0x5f,0x5d,0x59,0x57,
0x56,0x56,0x54,0x54,0x51,0x4d,0x49,0x46,0x41,0x45,0x44,0x42,0x40,0x3f,0x3e,0x40,
0x3e,0x3e,0x41,0x43,0x42,0x40,0x3e,0x3e,0x40,0x44,0x47,0x48,0x4b,0x4e,0x51,0x53,
0x54,0x57,0x5a,0x5b,0x59,0x5d,0x60,0x64,0x64,0x65,0x66,0x68,0x69,0x6b,0x6a,0x6b,
0x6a,0x68,0x65,0x62,0x60,0x62,0x60,0x5e,0x5a,0x59,0x57,0x56,0x51,0x4f,0x4d,0x4d,
0x4b,0x4a,0x48,0x46,0x41,0x40,0x3e,0x3e,0x3c,0x3a,0x38,0x38,0x38,0x3a,0x3e,0x40,
0x42,0x44,0x46,0x49,0x4b,0x4e,0x51,0x54,0x57,0x57,0x56,0x58,0x59,0x5e,0x63,0x65,
0x65,0x63,0x66,0x66,0x66,0x67,0x69,0x6a,0x6b,0x69,0x64,0x63,0x61,0x62,0x62,0x5d,
0x58,0x58,0x57,0x57,0x55,0x53,0x50,0x4f,0x4d,0x4b,0x47,0x46,0x45,0x46,0x44,0x3e,
0x3b,0x3c,0x3c,0x3c,0x3c,0x3e,0x40,0x3e,0x3c,0x3c,0x3e,0x44,0x48,0x4c,0x51,0x50,
0x4f,0x51,0x53,0x57,0x5a,0x5d,0x5d,0x5e,0x5e,0x60,0x60,0x63,0x65,0x68,0x6a,0x6a,
0x67,0x66,0x65,0x64,0x64,0x64,0x63,0x65,0x63,0x5e,0x5b,0x59,0x58,0x56,0x51,0x4d,
0x4b,0x4a,0x47,0x44,0x43,0x44,0x43,0x43,0x3f,0x3d,0x3e,0x3e,0x3c,0x3c,0x3c,0x3d,
0x3c,0x3d,0x3d,0x3e,0x42,0x46,0x47,0x4b,0x4a,0x4d,0x51,0x55,0x58,0x5e,0x60,0x61,
0x60,0x61,0x61,0x63,0x65,0x68,0x6a,0x6d,0x6c,0x6a,0x68,0x67,0x67,0x68,0x67,0x65,
0x63,0x5e,0x59,0x57,0x56,0x56,0x57,0x54,0x50,0x4c,0x49,0x47,0x45,0x44,0x41,0x3f,
0x3e,0x3c,0x39,0x3a,0x3a,0x3b,0x3b,0x3c,0x3c,0x3c,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,
0x3e,0x3d,0x3b,0x3b,0x3b,0x3d,0x40,0x42,0x41,0x3e,0x3d,0x3d,0x3b,0x3b,0x3b,0x3b,
0x3b,0x3b,0x39,0x38,0x38,0x3b,0x3e,0x3e,0x3b,0x39,0x37,0x36,0x36,0x37,0x39,0x3a,
0x39,0x39,0x39,0x3a,0x3a,0x3b,0x3a,0x39,0x36,0x37,0x37,0x39,0x3b,0x3c,0x3b,0x3b,
0x3b,0x3d,0x3d,0x3e,0x3b,0x3a,0x3a,0x39,0x39,0x3c,0x3c,0x3b,0x3b,0x3b,0x39,0x3b,
0x3d,0x3e,0x3d,0x3c,0x3b,0x3a,0x38,0x37,0x38,0x39,0x39,0x38,0x36,0x36,0x37,0x38,
0x37,0x37,0x38,0x39,0x3b,0x3e,0x43,0x4a,0x4f,0x55,0x58,0x5c,0x61,0x67,0x68,0x6b,
0x69,0x69,0x6b,0x6b,0x6b,0x6c,0x6b,0x6b,0x6b,0x6b,0x6a,0x6a,0x6a,0x6a,0x68,0x67,
0x66,0x66,0x66,0x67,0x67,0x69,0x6a,0x69,0x6a,0x6a,0x69,0x6b,0x6c,0x6e,0x6f,0x6d,
0x6a,0x68,0x67,0x67,0x67,0x69,0x68,0x68,0x68,0x69,0x69,0x6c,0x6d,0x6e,0x70,0x6f,
0x6c,0x6a,0x6a,0x6a,0x6a,0x6b,0x6b,0x69,0x67,0x67,0x67,0x6a,0x6a,0x6a,0x6b,0x6d,
0x6a,0x66,0x63,0x64,0x68,0x6b,0x6b,0x6a,0x69,0x6a,0x6b,0x6b,0x6a,0x6b,0x6e,0x70,
0x6d,0x6b,0x67,0x67,0x6a,0x6b,0x6b,0x6b,0x6b,0x6c,0x6d,0x6c,0x69,0x69,0x6a,0x6a,
0x68,0x69,0x67,0x65,0x65,0x62,0x5f,0x5c,0x57,0x53,0x4e,0x49,0x42,0x3e,0x3e,0x3e,
0x3c,0x3d,0x3a,0x38,0x39,0x38,0x37,0x37,0x36,0x36,0x37,0x38,0x37,0x39,0x3b,0x3b,
0x3b,0x3a,0x39,0x3b,0x3b,0x39,0x36,0x36,0x36,0x39,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,
0x3a,0x39,0x37,0x38,0x38,0x39,0x34,0x39,0x37,0x38,0x39,0x3b,0x39,0x39,0x38,0x37,
0x36,0x36,0x36,0x39,0x39,0x39,0x3a,0x3b,0x3b,0x39,0x38,0x38,0x38,0x39,0x39,0x39,
0x38,0x37,0x35,0x36,0x36,0x38,0x39,0x39,0x38,0x36,0x36,0x37,0x36,0x38,0x38,0x38,
0x39,0x3a,0x39,0x3b,0x3a,0x39,0x3b,0x3c,0x3b,0x3a,0x39,0x36,0x36,0x37,0x39,0x39,
0x39,0x39,0x38,0x39,0x38,0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x36,0x35,0x36,0x37,
0x37,0x36,0x36,0x37,0x37,0x38,0x39,0x38,0x36,0x36,0x35,0x33,0x33,0x34,0x35,0x36,
0x36,0x36,0x36,0x37,0x37,0x36,0x36,0x34,0x33,0x34,0x34,0x34,0x35,0x37,0x36,0x36,
0x34,0x33,0x34,0x33,0x31,0x32,0x32,0x32,0x32,0x34,0x34,0x36,0x37,0x38,0x37,0x37,
0x36,0x36,0x38,0x39,0x38,0x38,0x39,0x3a,0x39,0x3a,0x3b,0x3c,0x3d,0x37,0x36,0x36,
0x37,0x37,0x36,0x34,0x31,0x33,0x34,0x35,0x35,0x37,0x34,0x34,0x35,0x38,0x38,0x39,
0x38,0x37,0x37,0x37,0x36,0x37,0x36,0x37,0x36,0x34,0x30,0x2f,0x32,0x36,0x37,0x38,
0x37,0x37,0x36,0x36,0x36,0x39,0x38,0x36,0x34,0x32,0x31,0x34,0x37,0x39,0x3a,0x3b,
0x3b,0x3c,0x3e,0x3e,0x3c,0x3d,0x3a,0x36,0x34,0x33,0x31,0x34,0x34,0x35,0x36,0x35,
0x33,0x32,0x32,0x32,0x34,0x36,0x38,0x37,0x35,0x34,0x33,0x34,0x35,0x38,0x39,0x36,
0x35,0x36,0x34,0x32,0x31,0x34,0x37,0x3b,0x3b,0x3b,0x39,0x39,0x39,0x39,0x3a,0x3c,
0x3b,0x3d,0x3d,0x3d,0x40,0x46,0x4c,0x51,0x55,0x59,0x5e,0x62,0x65,0x68,0x6b,0x6b,
0x6b,0x6c,0x6a,0x69,0x68,0x68,0x68,0x69,0x69,0x6a,0x6a,0x6a,0x6a,0x6b,0x6b,0x6a,
0x69,0x69,0x68,0x67,0x68,0x6a,0x6a,0x6b,0x68,0x67,0x67,0x66,0x66,0x67,0x67,0x67,
0x67,0x67,0x69,0x6a,0x69,0x6a,0x6c,0x6d,0x6c,0x6a,0x6a,0x69,0x69,0x6b,0x6b,0x6b,
0x69,0x68,0x67,0x69,0x6a,0x6a,0x69,0x69,0x68,0x69,0x6a,0x6a,0x6b,0x6e,0x6b,0x67,
0x64,0x66,0x66,0x67,0x66,0x67,0x67,0x67,0x67,0x67,0x68,0x69,0x69,0x6a,0x6b,0x6b,
0x6a,0x6a,0x69,0x6a,0x6a,0x6a,0x6b,0x6c,0x6b,0x6a,0x69,0x69,0x69,0x6a,0x69,0x68,
0x67,0x65,0x62,0x60,0x5e,0x5c,0x5b,0x56,0x4f,0x49,0x43,0x3e,0x3c,0x3b,0x3b,0x39,
0x38,0x38,0x37,0x39,0x3b,0x3c,0x3c,0x3a,0x36,0x36,0x37,0x38,0x39,0x39,0x39,0x39,
0x38,0x37,0x36,0x38,0x37,0x38,0x39,0x39,0x38,0x3b,0x39,0x38,0x39,0x3b,0x3d,0x3f,
0x3e,0x3c,0x39,0x37,0x35,0x36,0x39,0x3a,0x39,0x37,0x36,0x36,0x36,0x38,0x38,0x3b,
0x3b,0x3b,0x39,0x37,0x36,0x36,0x36,0x38,0x38,0x38,0x39,0x39,0x38,0x39,0x39,0x3b,
0x3b,0x3a,0x3c,0x3b,0x39,0x3b,0x39,0x37,0x38,0x39,0x38,0x38,0x39,0x3a,0x3b,0x39,
0x38,0x36,0x36,0x36,0x35,0x38,0x39,0x39,0x38,0x36,0x35,0x37,0x39,0x3b,0x3a,0x3a,
0x39,0x38,0x36,0x36,0x39,0x3d,0x3f,0x40,0x42,0x47,0x4d,0x53,0x56,0x5a,0x60,0x63,
0x63,0x63,0x65,0x67,0x68,0x69,0x6a,0x6a,0x6a,0x69,0x69,0x6a,0x6b,0x6c,0x6c,0x6b,
0x69,0x6a,0x6a,0x6a,0x6a,0x6b,0x6a,0x6b,0x6c,0x6d,0x6b,0x6c,0x6a,0x68,0x67,0x68,
0x68,0x69,0x67,0x65,0x65,0x65,0x65,0x65,0x67,0x69,0x6a,0x6a,0x68,0x66,0x63,0x5f,
0x5b,0x58,0x52,0x4c,0x46,0x41,0x3d,0x3d,0x3c,0x3c,0x3d,0x3e,0x3e,0x3e,0x3e,0x3e,
0x3d,0x3c,0x39,0x37,0x36,0x38,0x39,0x3a,0x39,0x39,0x3b,0x3d,0x3e,0x3d,0x3d,0x3d,
0x3b,0x39,0x35,0x34,0x34,0x36,0x36,0x35,0x34,0x34,0x35,0x35,0x35,0x39,0x3b,0x3c,
0x3a,0x39,0x36,0x37,0x37,0x39,0x39,0x3c,0x40,0x42,0x46,0x4b,0x53,0x5c,0x60,0x63,
0x64,0x67,0x67,0x66,0x64,0x63,0x63,0x63,0x62,0x63,0x64,0x66,0x67,0x6a,0x6a,0x6b,
0x6b,0x6b,0x6b,0x6f,0x71,0x70,0x6d,0x6c,0x6a,0x6a,0x69,0x69,0x69,0x6d,0x6a,0x67,
0x68,0x69,0x69,0x6a,0x69,0x69,0x68,0x68,0x67,0x65,0x67,0x67,0x67,0x69,0x69,0x65,
0x62,0x5c,0x55,0x51,0x4d,0x4c,0x48,0x44,0x3e,0x3a,0x39,0x39,0x3a,0x3c,0x3d,0x3c,
0x39,0x38,0x37,0x37,0x37,0x38,0x39,0x3b,0x3a,0x39,0x37,0x34,0x36,0x38,0x3a,0x39,
0x39,0x38,0x36,0x34,0x34,0x34,0x39,0x3b,0x38,0x36,0x33,0x33,0x35,0x39,0x3b,0x3e,
0x40,0x40,0x3a,0x39,0x39,0x3b,0x3d,0x3e,0x3c,0x3e,0x3e,0x43,0x48,0x4f,0x55,0x5c,
0x5f,0x63,0x66,0x67,0x67,0x67,0x67,0x68,0x68,0x68,0x66,0x67,0x68,0x67,0x66,0x68,
0x67,0x69,0x69,0x69,0x68,0x6a,0x6c,0x6c,0x6b,0x6b,0x6a,0x6c,0x6d,0x6d,0x69,0x68,
0x68,0x69,0x6a,0x6a,0x6a,0x6b,0x69,0x67,0x67,0x68,0x67,0x67,0x66,0x64,0x63,0x64,
0x63,0x61,0x62,0x5c,0x56,0x54,0x51,0x4f,0x49,0x45,0x40,0x3d,0x3b,0x3b,0x3a,0x3d,
0x3d,0x3b,0x39,0x39,0x36,0x39,0x36,0x35,0x35,0x35,0x34,0x36,0x36,0x38,0x39,0x39,
0x39,0x3b,0x3b,0x39,0x39,0x3b,0x3a,0x38,0x36,0x34,0x34,0x36,0x37,0x38,0x39,0x38,
0x35,0x35,0x37,0x38,0x37,0x38,0x39,0x39,0x39,0x38,0x37,0x39,0x38,0x36,0x36,0x36,
0x36,0x36,0x34,0x32,0x32,0x34,0x36,0x36,0x35,0x36,0x36,0x36,0x34,0x33,0x34,0x34,
0x32,0x33,0x34,0x36,0x36,0x37,0x35,0x36,0x38,0x3b,0x3b,0x39,0x36,0x36,0x36,0x34,
};

//
/// CC sample text
//
unsigned char CCfields[][2] = {
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  '>', ' ', 
  'O', 0316,
  ' ', 'T', 
  0310,'E', 
  ' ', 'E', 
  0326,'E', 
  ' ', 'O', 
  'F', ' ', 
  'T', 0310,
  'E', ' ', 
  'W', 'O', 
  'R', 'L', 
  0304,' ', 
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'C', 0325,
  0320,' ', 
  'T', 0310,
  'E', 'R', 
  'E', ' ', 
  'I', 0323,
  ' ', 0323,
  'T', 'I', 
  'L', 'L', 
  ' ', 0316,
  'O', ' ', 
  'E', 0316,
  0304,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'I', 0316,
  ' ', 0323,
  'I', 0307,
  0310,'T', 
  ' ', 'T', 
  'O', ' ', 
  'T', 0310,
  'E', ' ', 
  0301,'I', 
  'R', ' ', 
  'F', 'R', 
  0301,0316,
  'C', 'E', 
  ' ', 0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'T', 
  'R', 'I', 
  0313,'E', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', ' ', 
  0316,'I', 
  0316,'E', 
  ' ', 0304,
  0301,0331,
  ' ', 'O', 
  'L', 0304,
  ' ', 0323,
  'T', 'R', 
  'I', 0313,
  'E', ' ', 
  0310,0301,
  0323,' ', 
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'L', 'E', 
  'F', 'T', 
  ' ', 0301,
  ' ', 0310,
  0325,0307,
  'E', ' ', 
  'C', 'L', 
  'O', 0325,
  0304,' ', 
  'O', 0326,
  'E', 'R', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'F', 'R', 
  0301,0316,
  'C', 'E', 
  ' ', 0301,
  0323,' ', 
  'I', 'T', 
  ' ', 'W', 
  'E', 'L', 
  'C', 'O', 
  0315,'E', 
  0323,' ', 
  'W', 'O', 
  'R', 'L', 
  0304,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'C', 0325,
  0320,' ', 
  'F', 0301,
  0316,0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0325,0316,
  'I', 'O', 
  0316,0323,
  ' ', 'R', 
  'E', 0320,
  'R', 'E', 
  0323,'E', 
  0316,'T', 
  'I', 0316,
  0307,' ', 
  'T', 0310,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'T', 
  'R', 'I', 
  0313,'I', 
  0316,0307,
  ' ', 0320,
  'I', 'L', 
  'O', 'T', 
  0323,' ', 
  0315,'E', 
  'T', ' ', 
  'T', 0325,
  'E', 0323,
  0304,0301,
  0331,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,0316,
  0304,' ', 
  0301,0307,
  'R', 'E', 
  'E', 0304,
  ' ', 'T', 
  'O', ' ', 
  'C', 'O', 
  0316,'T', 
  'I', 0316,
  0325,'E', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 'I', 
  'R', ' ', 
  'W', 0301,
  'L', 0313,
  'O', 0325,
  'T', ',', 
  ' ', 0302,
  0325,'T', 
  ' ', 'T', 
  0310,'E', 
  0331,' ', 
  0323,0301,
  0331,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 0331,
  0247,'R', 
  'E', ' ', 
  'R', 'E', 
  0301,0304,
  0331,' ', 
  'T', 'O', 
  ' ', 0316,
  'E', 0307,
  'O', 'T', 
  'I', 0301,
  'T', 'E', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'T', 
  ' ', 0301,
  0316,0331,
  ' ', 'T', 
  'I', 0315,
  'E', 0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,0323,
  ' ', 'C', 
  0316,0316,
  0247,0323,
  ' ', 'J', 
  'E', 'R', 
  'R', 'O', 
  'L', 0304,
  ' ', 0313,
  'E', 0323,
  0323,'E', 
  'L', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'R', 'E', 
  0320,'O', 
  'R', 'T', 
  0323,',', 
  ' ', 0301,
  'T', ' ', 
  'L', 'E', 
  0301,0323,
  'T', ' ', 
  'O', 0316,
  'E', ' ', 
  0307,'R', 
  'O', 0325,
  0320,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'O', 'F', 
  ' ', 'F', 
  0301,0316,
  0323,' ', 
  'I', 0323,
  ' ', 0316,
  'O', 'T', 
  ' ', 0302,
  'E', 'I', 
  0316,0307,
  ' ', 0323,
  'L', 'O', 
  'W', 'E', 
  0304,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0304,'O', 
  'W', 0316,
  ' ', 0302,
  0331,' ', 
  'T', 0310,
  'E', ' ', 
  0323,'T', 
  'R', 'I', 
  0313,'E', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,0272,
  ' ', 'T', 
  0310,'E', 
  ' ', 0323,
  0310,'I', 
  'R', 'T', 
  ' ', 0315,
  0301,0331,
  ' ', 0302,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0302,'R', 
  0301,0332,
  'I', 'L', 
  0247,0323,
  ' ', 'C', 
  'O', 'L', 
  'O', 'R', 
  0323,',', 
  ' ', 0302,
  0325,'T', 
  ' ', 'T', 
  0310,'E', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0307,'I', 
  0326,'E', 
  0255,0301,
  'W', 0301,
  0331,' ', 
  'I', 0323,
  ' ', 0302,
  'E', 'L', 
  'O', 'W', 
  ' ', 'T', 
  0310,'E', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 0301,
  'I', 0323,
  'T', 0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 0323,
  'E', ' ', 
  0301,'R', 
  'E', ' ', 
  'T', 0310,
  'E', ' ', 
  0323,'C', 
  'O', 'T', 
  'L', 0301,
  0316,0304,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'F', 0301,
  0316,0323,
  ',', ' ', 
  0301,' ', 
  0326,'E', 
  'R', 'I', 
  'T', 0301,
  0302,'L', 
  'E', ' ', 
  0301,'R', 
  0315,0331,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0302,0325,
  'T', ' ', 
  0325,0316,
  'L', 'I', 
  0313,'E', 
  ' ', 0323,
  'O', 0315,
  'E', ' ', 
  'O', 'T', 
  0310,'E', 
  'R', ' ', 
  'L', 'E', 
  0323,0323,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0307,'E', 
  0316,'I', 
  0301,'L', 
  ' ', 0316,
  'O', 'R', 
  'T', 0310,
  'E', 'R', 
  0316,' ', 
  'I', 0316,
  0326,0301,
  0304,'E', 
  'R', 0323,
  ' ', 0301,
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'R', 
  0315,0331,
  ',', ' ', 
  'T', 0310,
  0301,'T', 
  0247,0323,
  ' ', 0326,
  'E', 'R', 
  0331,' ', 
  'W', 'E', 
  'L', 'C', 
  'O', 0315,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'T', 
  ' ', 'T', 
  0310,'I', 
  0323,' ', 
  'W', 'O', 
  'R', 'L', 
  0304,' ', 
  'C', 0325,
  0320,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  ' ', 'I', 
  'T', 0247,
  0323,' ', 
  'T', 0310,
  'E', ' ', 
  'C', 'O', 
  0316,'T', 
  'R', 0301,
  'R', 0331,
  ' ', 'O', 
  'F', ' ', 
  0301,0316,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'R', 
  0315,0331,
  ',', ' ', 
  0302,0325,
  'T', ' ', 
  'I', 'T', 
  ' ', 'I', 
  0323,' ', 
  0301,0316,
  ' ', 0301,
  'R', 0315,
  0331,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 'R', 
  'E', 0247,
  0323,' ', 
  0323,'O', 
  0315,'E', 
  'T', 0310,
  'I', 0316,
  0307,' ', 
  0302,'E', 
  'T', 'W', 
  'E', 'E', 
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 0315,
  ' ', 'W', 
  0310,'I', 
  'C', 0310,
  ' ', 'I', 
  0323,' ', 
  0315,'O', 
  'R', 'E', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'I', 0315,
  0320,'O', 
  'R', 'T', 
  0301,0316,
  'T', ' ', 
  'T', 0310,
  0301,0316,
  ' ', 'T', 
  0310,'E', 
  ' ', 'L', 
  'O', 0326,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 0331,
  ' ', 0310,
  0301,0326,
  'E', ' ', 
  'F', 'O', 
  'R', ' ', 
  'T', 0310,
  'E', ' ', 
  'T', 'E', 
  0301,0315,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,0272,
  ' ', 0302,
  'O', 'I', 
  0323,'T', 
  'E', 'R', 
  'O', 0325,
  0323,' ', 
  0302,0325,
  'T', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'I', 
  'T', 0310,
  'O', 0325,
  'T', ' ', 
  0315,0325,
  'C', 0310,
  ' ', 0315,
  0301,'L', 
  'I', 'C', 
  'E', ',', 
  ' ', 0301,
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'E', 0316,
  0307,0301,
  0307,'I', 
  0316,0307,
  ' ', 0320,
  'L', 0301,
  0331,'F', 
  0325,'L', 
  ' ', 0301,
  0320,0320,
  'R', 'O', 
  0301,'C', 
  0310,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'E', 0316,
  0304,'E', 
  0301,'R', 
  'I', 0316,
  0307,' ', 
  'T', 0310,
  'E', 0315,
  ' ', 'T', 
  'O', ' ', 
  'F', 0301,
  0316,0323,
  ' ', 'O', 
  'F', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0315,0301,
  0316,0331,
  ' ', 'O', 
  'T', 0310,
  'E', 'R', 
  ' ', 'C', 
  'O', 0325,
  0316,'T', 
  'R', 'I', 
  'E', 0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  ' ', 'W', 
  'E', 0247,
  'L', 'L', 
  ' ', 0310,
  0301,0326,
  'E', ' ', 
  0301,' ', 
  0320,0301,
  'R', 'T', 
  0331,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'E', 
  0247,'R', 
  'E', ' ', 
  'J', 0325,
  0323,'T', 
  ' ', 'T', 
  0310,'E', 
  'R', 'E', 
  ' ', 'F', 
  'O', 'R', 
  ' ', 0301,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'L', 0301,
  0325,0307,
  0310,' ', 
  'T', 'O', 
  ' ', 'E', 
  0316,'J', 
  'O', 0331,
  ' ', 'O', 
  0325,'R', 
  0323,'E', 
  'L', 0326,
  'E', 0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,0272,
  ' ', 'T', 
  0310,'E', 
  0331,0247,
  'R', 'E', 
  ' ', 0301,
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'T', 
  'T', 'R', 
  0301,'C', 
  'T', 'I', 
  'O', 0316,
  ' ', 'T', 
  'O', ' ', 
  'T', 0310,
  'E', ' ', 
  'O', 'R', 
  0304,'I', 
  0316,0301,
  'R', 0331,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 'O', 
  0325,'R', 
  'I', 0323,
  'T', 0323,
  ' ', 0301,
  0316,0304,
  ' ', 0301,
  0316,'I', 
  0315,0301,
  'T', 'E', 
  0304,'L', 
  0331,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0307,'O', 
  'O', 0304,
  ' ', 0301,
  'T', ' ', 
  'O', 'T', 
  0310,'E', 
  'R', ' ', 
  0320,0325,
  'R', 0323,
  0325,'I', 
  'T', 0323,
  ' ', 'T', 
  'O', 'O', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'L', 
  0323,'O', 
  ',', ' ', 
  0320,'R', 
  'E', 'T', 
  'T', 0331,
  ' ', 0315,
  'O', 0304,
  'E', 0323,
  'T', ' ', 
  0301,0302,
  'O', 0325,
  'T', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', 'I', 
  'R', ' ', 
  'T', 'E', 
  0301,0315,
  0247,0323,
  ' ', 0320,
  'R', 'O', 
  0323,0320,
  'E', 'C', 
  'T', 0323,
  ',', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'O', 
  0315,'E', 
  'T', 0310,
  'I', 0316,
  0307,' ', 
  'T', 0310,
  'E', 0331,
  ' ', 0301,
  'C', 0313,
  0316,'O', 
  'W', 'L', 
  'E', 0304,
  0307,'E', 
  ',', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,'F', 
  'T', 'E', 
  'R', ' ', 
  0301,' ', 
  0323,'E', 
  'R', 'I', 
  'E', 0323,
  ' ', 'O', 
  'F', ' ', 
  0323,'O', 
  0255,0323,
  'O', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 0301,
  'R', 0315,
  0255,0325,
  0320,' ', 
  0307,0301,
  0315,'E', 
  0323,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'O', 0316,
  'E', ' ', 
  'F', 'O', 
  'R', 0315,
  'E', 'R', 
  ' ', 0323,
  'C', 'O', 
  'T', 'L', 
  0301,0316,
  0304,' ', 
  'C', 'O', 
  0301,'C', 
  0310,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'I', 0323,
  ' ', 0320,
  'R', 'E', 
  0304,'I', 
  'C', 'T', 
  'I', 0316,
  0307,' ', 
  0307,'L', 
  0325,0315,
  'L', 0331,
  ',', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0320,'E', 
  'R', 0310,
  0301,0320,
  0323,' ', 
  'R', 'E', 
  0301,'L', 
  'I', 0323,
  'T', 'I', 
  'C', 0301,
  'L', 'L', 
  0331,',', 
  ' ', 'T', 
  0310,0301,
  'T', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'C', 
  'O', 'T', 
  'L', 0301,
  0316,0304,
  ' ', 'W', 
  'I', 'L', 
  'L', ' ', 
  0302,'E', 
  ' ', 0310,
  'O', 0315,
  'E', ' ', 
  'E', 0326,
  'E', 0316,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0302,'E', 
  'F', 'O', 
  'R', 'E', 
  ' ', 'T', 
  0310,'E', 
  ' ', 0320,
  'O', 0323,
  'T', 'C', 
  0301,'R', 
  0304,0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', ' ', 
  0301,0316,
  'T', 0310,
  'E', 0315,
  0323,' ', 
  'O', 'F', 
  ' ', 'O', 
  'T', 0310,
  'E', 'R', 
  ' ', 'W', 
  'O', 'R', 
  'L', 0304,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'C', 0325,
  0320,' ', 
  0316,0301,
  'T', 'I', 
  'O', 0316,
  0323,' ', 
  0301,'R', 
  'E', ' ', 
  0315,'O', 
  0323,'T', 
  'L', 0331,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 'R', 
  'I', 0325,
  0315,0320,
  0310,0301,
  'L', 'I', 
  0323,'T', 
  ',', ' ', 
  0301,'L', 
  'L', ' ', 
  0301,0302,
  'O', 0325,
  'T', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'I', 
  0316,0316,
  'I', 0316,
  0307,' ', 
  'T', 0310,
  'E', ' ', 
  'C', 0325,
  0320,' ', 
  0301,0316,
  0304,' ', 
  0302,'E', 
  0301,'T', 
  'I', 0316,
  0307,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'E', 0326,
  'E', 'R', 
  0331,'O', 
  0316,'E', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'C', 
  'O', 'T', 
  'L', 0301,
  0316,0304,
  0247,0323,
  ' ', 0315,
  'O', 0304,
  'E', 0323,
  'T', 'L', 
  0331,' ', 
  0325,'R', 
  0307,'E', 
  0323,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', ' ', 
  'T', 'E', 
  0301,0315,
  ' ', 'T', 
  'O', ' ', 
  'T', 'R', 
  0331,' ', 
  0316,'O', 
  'T', ' ', 
  'T', 'O', 
  ' ', 'C', 
  'O', 0315,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0310,'O', 
  0315,'E', 
  ' ', 'T', 
  'O', 'O', 
  ' ', 0323,
  'O', 'O', 
  0316,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0316,'O', 
  ' ', 'I', 
  0316,'F', 
  'E', 'R', 
  'I', 'O', 
  'R', 'I', 
  'T', 0331,
  ' ', 'C', 
  'O', 0315,
  0320,'L', 
  'E', 'X', 
  ',', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0310,'O', 
  'W', 'E', 
  0326,'E', 
  'R', ',', 
  ' ', 0301,
  0302,'O', 
  0325,'T', 
  ' ', 0315,
  'E', 'E', 
  'T', 'I', 
  0316,0307,
  ' ', 'T', 
  0310,'E', 
  ' ', 0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'O', 
  'R', 'L', 
  0304,0247,
  0323,' ', 
  0323,'E', 
  0316,'T', 
  'I', 0315,
  'E', 0316,
  'T', 0301,
  'L', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'F', 0301,
  0326,'O', 
  'R', 'I', 
  'T', 'E', 
  0323,' ', 
  0302,'R', 
  0301,0332,
  'I', 'L', 
  ' ', 'I', 
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'E', 
  0304,0316,
  'E', 0323,
  0304,0301,
  0331,0247,
  0323,' ', 
  'W', 'O', 
  'R', 'L', 
  0304,' ', 
  'C', 0325,
  0320,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'O', 0320,
  'E', 0316,
  'E', 'R', 
  0277,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  ' ', 'I', 
  'T', 0247,
  0323,' ', 
  'T', 0310,
  'E', ' ', 
  0323,0310,
  'O', 'W', 
  0320,'I', 
  'E', 'C', 
  'E', ' ', 
  0307,0301,
  0315,'E', 
  ',', ' ', 
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', ' ', 
  'F', 'I', 
  'R', 0323,
  'T', ' ', 
  0307,0301,
  0315,'E', 
  ',', ' ', 
  'T', 'R', 
  'E', 0315,
  'E', 0316,
  0304,'O', 
  0325,0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'O', 
  ' ', 0315,
  0301,0316,
  0331,' ', 
  0315,'I', 
  'L', 'L', 
  'I', 'O', 
  0316,0323,
  ' ', 'O', 
  'F', ' ', 
  0320,'E', 
  'O', 0320,
  'L', 'E', 
  ' ', 0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'I', 
  'L', 'L', 
  ' ', 0302,
  'E', ' ', 
  'W', 0301,
  'T', 'C', 
  0310,'I', 
  0316,0307,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'C', 
  'O', 'T', 
  'L', 0301,
  0316,0304,
  ',', ' ', 
  0316,'O', 
  0302,'O', 
  0304,0331,
  ' ', 'E', 
  'X', 0320,
  'E', 'C', 
  'T', 0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,0272,
  ' ', 'O', 
  0316,'L', 
  0331,' ', 
  'O', 0316,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0304,'E', 
  'E', 0320,
  0255,0323,
  'E', 0301,
  'T', 'E', 
  0304,' ', 
  'F', 'E', 
  0301,'R', 
  ',', ' ', 
  'I', 'F', 
  ' ', 'T', 
  0310,'E', 
  'I', 'R', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 'E', 
  0301,0315,
  ' ', 0315,
  0301,0313,
  'E', 0323,
  ' ', 0301,
  0316,' ', 
  'E', 0301,
  'R', 'L', 
  0331,' ', 
  'E', 'X', 
  'I', 'T', 
  ',', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  0301,'T', 
  ' ', 'T', 
  0310,'E', 
  ' ', 'O', 
  'L', 0304,
  ' ', 'E', 
  0316,'E', 
  0315,0331,
  ' ', 'E', 
  0316,0307,
  'L', 0301,
  0316,0304,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0315,'I', 
  0307,0310,
  'T', ' ', 
  'F', 0301,
  'R', 'E', 
  ' ', 0302,
  'E', 'T', 
  'T', 'E', 
  'R', 0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  ' ', 'I', 
  ' ', 0304,
  'O', 0316,
  0247,'T', 
  ' ', 'W', 
  0301,0316,
  'T', ' ', 
  'T', 'O', 
  ' ', 'T', 
  0310,'I', 
  0316,0313,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,0302,
  'O', 0325,
  'T', ' ', 
  'T', 0310,
  0301,'T', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,0272,
  ' ', 0315,
  0301,0316,
  0331,' ', 
  0323,'C', 
  'O', 'T', 
  'T', 'I', 
  0323,0310,
  ' ', 'F', 
  0301,0316,
  0323,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'C', 'R', 
  'O', 0323,
  0323,'E', 
  0304,' ', 
  'T', 0310,
  'E', ' ', 
  'C', 0310,
  0301,0316,
  0316,'E', 
  'L', ',', 
  ' ', 'E', 
  0326,'E', 
  0316,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'O', 0325,
  0307,0310,
  ' ', 'T', 
  0310,'E', 
  0331,' ', 
  0304,'O', 
  0316,0247,
  'T', ' ', 
  0310,0301,
  0326,'E', 
  ' ', 0307,
  0301,0315,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 'I', 
  'C', 0313,
  'E', 'T', 
  0323,',', 
  ' ', 0301,
  ' ', 'F', 
  0301,0315,
  'I', 'L', 
  'I', 0301,
  'R', ' ', 
  0307,'R', 
  'I', 0320,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,0323,
  ' ', 'T', 
  0310,'E', 
  ' ', 0323,
  'E', 0301,
  'R', 'C', 
  0310,' ', 
  'F', 'O', 
  'R', ' ', 
  'W', 0301,
  0331,0323,
  ' ', 'T', 
  'O', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0302,'E', 
  0301,'T', 
  ' ', 'T', 
  0310,'E', 
  ' ', 0323,
  'O', 'L', 
  0304,0255,
  'O', 0325,
  'T', ' ', 
  0323,'I', 
  0307,0316,
  0323,' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'C', 'O', 
  0316,'T', 
  'I', 0316,
  0325,'E', 
  0323,',', 
  ' ', 'F', 
  'O', 'R', 
  ' ', 0323,
  'O', 0315,
  'E', ',', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0320,'R', 
  'E', 'F', 
  'E', 'R', 
  0301,0302,
  'L', 0331,
  ' ', 0316,
  'O', 'T', 
  ' ', 'I', 
  0316,' ', 
  'T', 0310,
  'E', ' ', 
  'F', 0325,
  'L', 'L', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0307,'L', 
  0301,'R', 
  'E', ' ', 
  'O', 'F', 
  ' ', 'T', 
  0310,'E', 
  ' ', 'C', 
  0301,0315,
  'E', 'R', 
  0301,0323,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  0200,0200,
  0200,0200,
  ' ', 'L', 
  'E', 0301,
  0326,'E', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  ' ', 0315,
  'E', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  ' ', 0301,
  'L', 'O', 
  0316,'E', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  '>', '>', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'F', 'R', 
  'I', 'E', 
  0316,0304,
  'L', 0331,
  ' ', 'I', 
  0316,'T', 
  'E', 'R', 
  'C', 0310,
  0301,0316,
  0307,'E', 
  0323,' ', 
  'W', 'I', 
  'T', 0310,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'T', 0310,
  'E', ' ', 
  0302,'R', 
  0301,0332,
  'I', 'L', 
  'I', 0301,
  0316,' ', 
  0323,0325,
  0320,0320,
  'O', 'R', 
  'T', 'E', 
  'R', 0323,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'E', 0326,
  'E', 0316,
  ' ', 'E', 
  'X', 'T', 
  'E', 0316,
  0304,' ', 
  'T', 'O', 
  ' ', 0301,
  ' ', 0315,
  0301,0313,
  'E', 0323,
  0310,'I', 
  'F', 'T', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'F', 'I', 
  'E', 'L', 
  0304,' ', 
  'F', 'O', 
  'R', ' ', 
  0301,0316,
  ' ', 'I', 
  0316,'F', 
  'O', 'R', 
  0315,0301,
  'L', ' ', 
  0302,0325,
  'T', ' ', 
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0310,'O', 
  'T', 'L', 
  0331,' ', 
  'C', 'O', 
  0316,'T', 
  'E', 0323,
  'T', 'E', 
  0304,' ', 
  0307,0301,
  0315,'E', 
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 0310,
  'E', 0316,
  ' ', 'I', 
  'T', ' ', 
  'W', 0301,
  0323,' ', 
  'T', 'I', 
  0315,'E', 
  ' ', 'F', 
  'O', 'R', 
  ' ', 0313,
  0316,'E', 
  'E', 0323,
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0325,0320,
  ' ', 0301,
  0316,0304,
  ' ', 0301,
  0316,'O', 
  'T', 0310,
  'E', 'R', 
  ' ', 0307,
  'L', 0301,
  0323,0323,
  ',', ' ', 
  'T', 0310,
  'E', ' ', 
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0323,'C', 
  'O', 'T', 
  0323,' ', 
  'W', 'E', 
  'R', 'E', 
  ' ', 0301,
  ' ', 0307,
  'O', 0301,
  'L', ' ', 
  0301,0310,
  'E', 0301,
  0304,0256,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  0301,' ', 
  0323,'E', 
  'R', 'I', 
  'O', 0325,
  0323,' ', 
  'F', 'O', 
  'R', 'E', 
  'C', 0301,
  0323,'T', 
  ' ', 'F', 
  'O', 'R', 
  ' ', 0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'W', 'E', 
  0304,0316,
  'E', 0323,
  0304,0301,
  0331,0247,
  0323,' ', 
  'O', 0320,
  'E', 0316,
  'E', 'R', 
  ',', ' ', 
  'O', 'R', 
  ' ', 0315,
  'O', 'R', 
  'E', ' ', 
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'L', 'I', 
  0313,'E', 
  'L', 0331,
  ',', ' ', 
  'J', 0325,
  0323,'T', 
  ' ', 0301,
  0316,'O', 
  'T', 0310,
  'E', 'R', 
  ' ', 0304,
  'R', 'E', 
  0301,0315,
  0256,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0224,'%', 
  0224,'%', 
  0224,0255,
  0224,0255,
  0221,'p', 
  0221,'p', 
  'J', 'E', 
  'R', 'R', 
  'O', 'L', 
  0304,' ', 
  0313,'E', 
  0323,0323,
  'E', 'L', 
  ',', ' ', 
  'C', 0316,
  0316,',', 
  ' ', 0320,
  0301,'R', 
  'I', 0323,
  0256,0200,

  // 1st 1 sec delay
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,

  // 2nd 1 sec delay
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,

  // 3rd 1 sec delay
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,

  // 4th 1 sec delay
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,

  // 5th 1 sec delay
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
  0200,0200,
};
unsigned int CCfieldCount = sizeof (CCfields) / sizeof (CCfields[0]);


//
/// NABTS field images
//
unsigned char NABTSfields[][sizeof (NABTS_BUFFER)] = {
  0x55,0x55,0xE7, 0xD0,0xEA,0x64, 0x15,0x15,  0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,
};
unsigned int NABTSfieldCount = sizeof (NABTSfields) / sizeof (NABTSfields[0]);


//
/// VBI waveform samples
//
unsigned char VBIsamples[][12][768*2] = {
//Field 0
// Line 10
0x38,0x38,0x38,0x39,0x3b,0x3b,0x3a,0x3a,0x39,0x38,0x38,0x35,0x34,0x36,0x36,0x35,
0x34,0x35,0x35,0x36,0x35,0x34,0x34,0x37,0x39,0x39,0x35,0x32,0x33,0x37,0x38,0x39,
0x38,0x38,0x36,0x35,0x33,0x35,0x37,0x39,0x38,0x38,0x39,0x39,0x38,0x3a,0x3b,0x38,
0x36,0x35,0x33,0x33,0x33,0x34,0x35,0x36,0x36,0x37,0x38,0x38,0x37,0x3a,0x3b,0x3b,
0x3a,0x38,0x37,0x38,0x37,0x38,0x39,0x3a,0x38,0x36,0x34,0x33,0x33,0x34,0x36,0x38,
0x39,0x39,0x37,0x35,0x31,0x33,0x36,0x38,0x37,0x37,0x36,0x36,0x37,0x37,0x36,0x38,
0x39,0x38,0x36,0x35,0x36,0x38,0x38,0x38,0x36,0x36,0x36,0x37,0x38,0x38,0x36,0x37,
0x38,0x39,0x38,0x3c,0x3a,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x3a,0x38,0x36,0x35,
0x33,0x33,0x32,0x31,0x31,0x33,0x36,0x38,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x38,0x39,
0x37,0x35,0x33,0x33,0x33,0x35,0x35,0x36,0x35,0x36,0x36,0x35,0x36,0x38,0x39,0x3a,
0x38,0x37,0x38,0x39,0x37,0x37,0x36,0x36,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x3b,
0x3b,0x3b,0x3b,0x38,0x37,0x37,0x37,0x37,0x36,0x36,0x34,0x33,0x33,0x35,0x37,0x3b,
0x3c,0x3d,0x3c,0x3b,0x39,0x39,0x38,0x39,0x3b,0x3a,0x37,0x36,0x34,0x35,0x35,0x36,
0x38,0x39,0x38,0x36,0x34,0x36,0x37,0x38,0x38,0x39,0x39,0x3b,0x39,0x39,0x38,0x38,
0x36,0x38,0x3a,0x3a,0x38,0x3b,0x3a,0x38,0x39,0x39,0x3a,0x38,0x36,0x34,0x34,0x35,
0x34,0x35,0x36,0x36,0x37,0x37,0x38,0x38,0x37,0x38,0x38,0x39,0x37,0x36,0x36,0x35,
0x35,0x37,0x37,0x38,0x38,0x39,0x38,0x37,0x38,0x3b,0x3b,0x3b,0x39,0x38,0x3a,0x3b,
0x39,0x3b,0x39,0x38,0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x38,0x37,0x35,0x38,0x3a,
0x39,0x3b,0x39,0x39,0x3a,0x3a,0x38,0x3a,0x3d,0x3d,0x3c,0x3a,0x37,0x38,0x38,0x38,
0x37,0x36,0x36,0x35,0x36,0x36,0x38,0x39,0x39,0x38,0x39,0x3a,0x3a,0x39,0x38,0x38,
0x38,0x38,0x37,0x37,0x36,0x37,0x38,0x39,0x39,0x38,0x39,0x38,0x36,0x38,0x39,0x3b,
0x39,0x39,0x38,0x37,0x37,0x38,0x36,0x39,0x36,0x35,0x36,0x37,0x38,0x3b,0x39,0x38,
0x38,0x38,0x39,0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x39,0x3a,0x39,0x39,
0x3a,0x39,0x38,0x38,0x37,0x39,0x37,0x39,0x38,0x3a,0x3c,0x3b,0x38,0x3b,0x3b,0x3d,
0x3d,0x3c,0x38,0x38,0x36,0x37,0x38,0x37,0x36,0x35,0x34,0x33,0x33,0x36,0x38,0x39,
0x39,0x39,0x39,0x3b,0x3b,0x3c,0x3f,0x3e,0x3b,0x3b,0x3c,0x3d,0x3c,0x3a,0x38,0x38,
0x38,0x39,0x37,0x3a,0x37,0x38,0x38,0x38,0x36,0x39,0x3a,0x3a,0x39,0x38,0x38,0x3a,
0x38,0x38,0x38,0x38,0x36,0x35,0x34,0x35,0x35,0x35,0x34,0x36,0x38,0x39,0x39,0x3c,
0x3d,0x3c,0x3b,0x39,0x37,0x38,0x38,0x39,0x36,0x36,0x36,0x35,0x36,0x37,0x38,0x3c,
0x3b,0x39,0x38,0x38,0x38,0x39,0x39,0x39,0x3a,0x3b,0x3b,0x39,0x3a,0x38,0x38,0x39,
0x39,0x38,0x38,0x37,0x36,0x39,0x3b,0x3c,0x3b,0x3c,0x3b,0x3a,0x3b,0x3a,0x38,0x38,
0x38,0x38,0x38,0x37,0x36,0x38,0x39,0x39,0x3b,0x3c,0x3c,0x3c,0x3b,0x3c,0x3d,0x3d,
0x3d,0x3d,0x3c,0x39,0x36,0x36,0x36,0x38,0x38,0x38,0x36,0x36,0x38,0x3b,0x3c,0x3c,
0x3b,0x3d,0x3d,0x3c,0x38,0x39,0x38,0x37,0x37,0x36,0x35,0x38,0x39,0x38,0x3a,0x3c,
0x3d,0x3c,0x3b,0x3b,0x3d,0x3f,0x3e,0x3d,0x3a,0x38,0x36,0x37,0x36,0x36,0x37,0x37,
0x36,0x37,0x37,0x38,0x38,0x38,0x37,0x38,0x38,0x38,0x36,0x35,0x34,0x35,0x36,0x36,
0x34,0x35,0x34,0x35,0x37,0x39,0x39,0x39,0x38,0x37,0x36,0x37,0x38,0x3a,0x3a,0x39,
0x36,0x36,0x34,0x36,0x39,0x39,0x37,0x39,0x39,0x39,0x38,0x38,0x35,0x36,0x38,0x38,
0x35,0x35,0x34,0x35,0x37,0x36,0x34,0x36,0x38,0x39,0x38,0x36,0x36,0x38,0x38,0x38,
0x37,0x37,0x38,0x39,0x39,0x37,0x35,0x36,0x36,0x38,0x38,0x36,0x34,0x37,0x39,0x39,
0x38,0x36,0x36,0x39,0x3c,0x3b,0x38,0x37,0x36,0x36,0x36,0x37,0x37,0x39,0x39,0x38,
0x38,0x39,0x3b,0x3d,0x3e,0x3d,0x3a,0x36,0x36,0x35,0x35,0x34,0x35,0x38,0x39,0x39,
0x38,0x37,0x36,0x38,0x38,0x38,0x3a,0x39,0x37,0x37,0x37,0x37,0x36,0x38,0x39,0x39,
0x38,0x38,0x39,0x3a,0x39,0x38,0x38,0x38,0x39,0x3b,0x39,0x38,0x38,0x3a,0x3b,0x38,
0x37,0x3a,0x3b,0x3c,0x3b,0x38,0x39,0x38,0x37,0x39,0x38,0x39,0x39,0x37,0x35,0x37,
0x38,0x3c,0x3d,0x3d,0x3a,0x38,0x38,0x37,0x36,0x37,0x37,0x38,0x38,0x37,0x37,0x39,
0x39,0x38,0x39,0x3c,0x3c,0x3c,0x38,0x38,0x37,0x39,0x38,0x37,0x36,0x36,0x34,0x33,
0x33,0x35,0x37,0x38,0x37,0x37,0x37,0x38,0x38,0x3a,0x3a,0x39,0x38,0x37,0x35,0x36,
0x36,0x38,0x38,0x39,0x38,0x38,0x37,0x36,0x37,0x38,0x38,0x39,0x38,0x39,0x39,0x3b,
0x38,0x36,0x37,0x38,0x38,0x38,0x36,0x36,0x35,0x35,0x34,0x36,0x39,0x3a,0x39,0x38,
0x39,0x3b,0x3c,0x39,0x35,0x35,0x35,0x34,0x34,0x35,0x36,0x34,0x34,0x34,0x36,0x39,
0x3b,0x3a,0x3a,0x38,0x37,0x39,0x3a,0x3a,0x3a,0x3b,0x38,0x39,0x37,0x36,0x36,0x38,
0x36,0x37,0x38,0x3b,0x3b,0x3d,0x3c,0x3b,0x3b,0x3a,0x38,0x37,0x36,0x36,0x35,0x35,
0x34,0x36,0x35,0x34,0x34,0x35,0x36,0x36,0x36,0x36,0x34,0x35,0x34,0x35,0x37,0x39,
0x3a,0x3b,0x38,0x36,0x36,0x35,0x35,0x36,0x37,0x38,0x37,0x36,0x35,0x37,0x3a,0x3c,
0x3d,0x3e,0x3c,0x3b,0x3b,0x39,0x3a,0x3a,0x39,0x37,0x36,0x35,0x34,0x34,0x34,0x34,
0x34,0x36,0x36,0x36,0x37,0x38,0x38,0x39,0x38,0x38,0x38,0x37,0x34,0x34,0x34,0x35,
0x35,0x36,0x36,0x36,0x38,0x39,0x38,0x38,0x35,0x36,0x37,0x38,0x38,0x38,0x38,0x38,
0x36,0x37,0x38,0x39,0x3a,0x38,0x36,0x36,0x36,0x36,0x38,0x39,0x38,0x38,0x37,0x36,
0x35,0x35,0x33,0x34,0x32,0x33,0x33,0x33,0x31,0x33,0x36,0x37,0x36,0x37,0x38,0x3a,
0x3a,0x38,0x38,0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x37,0x34,0x31,0x35,0x38,0x39,
0x3a,0x39,0x37,0x3a,0x3a,0x3a,0x3a,0x3c,0x3b,0x3a,0x38,0x38,0x35,0x36,0x34,0x34,
0x34,0x36,0x37,0x37,0x37,0x37,0x37,0x35,0x34,0x36,0x36,0x35,0x35,0x34,0x34,0x33,
0x32,0x33,0x33,0x34,0x35,0x36,0x37,0x37,0x38,0x3b,0x3a,0x39,0x3a,0x3b,0x39,0x38,
0x37,0x38,0x38,0x38,0x35,0x34,0x35,0x36,0x36,0x36,0x36,0x37,0x3a,0x3b,0x39,0x39,
0x3a,0x3a,0x38,0x37,0x36,0x37,0x35,0x34,0x34,0x36,0x36,0x36,0x36,0x35,0x34,0x34,
0x34,0x34,0x35,0x35,0x34,0x36,0x38,0x3a,0x39,0x39,0x38,0x38,0x37,0x38,0x36,0x37,
0x39,0x3b,0x3c,0x3b,0x38,0x39,0x37,0x34,0x32,0x34,0x35,0x34,0x34,0x32,0x32,0x35,
0x36,0x38,0x38,0x37,0x36,0x37,0x36,0x36,0x38,0x3a,0x3a,0x3b,0x3a,0x3b,0x3b,0x39,
0x36,0x36,0x36,0x36,0x35,0x35,0x34,0x34,0x36,0x37,0x38,0x39,0x39,0x38,0x37,0x36,
0x36,0x38,0x3a,0x3a,0x37,0x37,0x37,0x36,0x35,0x35,0x35,0x36,0x35,0x34,0x34,0x35,
0x35,0x38,0x38,0x37,0x34,0x34,0x34,0x34,0x33,0x34,0x34,0x35,0x33,0x33,0x37,0x39,
0x38,0x39,0x38,0x38,0x37,0x37,0x38,0x39,0x38,0x36,0x35,0x36,0x36,0x36,0x38,0x37,
0x34,0x35,0x34,0x34,0x35,0x37,0x37,0x38,0x38,0x39,0x38,0x38,0x38,0x39,0x3b,0x3a,
0x38,0x38,0x37,0x35,0x36,0x38,0x3a,0x3b,0x38,0x38,0x38,0x36,0x35,0x36,0x37,0x37,
0x36,0x37,0x38,0x38,0x38,0x35,0x34,0x35,0x34,0x34,0x35,0x37,0x38,0x38,0x38,0x39,
0x38,0x38,0x38,0x38,0x36,0x36,0x34,0x34,0x34,0x34,0x35,0x37,0x37,0x39,0x39,0x39,
0x38,0x38,0x38,0x38,0x36,0x35,0x34,0x35,0x35,0x36,0x36,0x35,0x35,0x38,0x37,0x37,
0x37,0x39,0x38,0x38,0x36,0x36,0x35,0x36,0x35,0x36,0x38,0x39,0x37,0x36,0x35,0x31,
0x31,0x33,0x33,0x31,0x31,0x30,0x30,0x30,0x32,0x33,0x37,0x38,0x38,0x39,0x37,0x34,
0x35,0x36,0x36,0x38,0x38,0x38,0x36,0x34,0x33,0x35,0x36,0x38,0x38,0x38,0x36,0x34,
0x33,0x33,0x35,0x37,0x36,0x35,0x35,0x36,0x36,0x35,0x35,0x38,0x3b,0x3b,0x3c,0x3d,
0x3d,0x3d,0x3b,0x3b,0x39,0x3a,0x3a,0x38,0x34,0x35,0x34,0x34,0x34,0x35,0x37,0x39,
0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x38,0x37,0x3a,0x39,0x38,0x39,0x39,0x38,0x37,
0x36,0x36,0x37,0x38,0x38,0x39,0x3a,0x39,0x38,0x3b,0x3c,0x3a,0x39,0x38,0x37,0x37,
0x36,0x35,0x34,0x33,0x33,0x36,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x36,0x36,
0x36,0x36,0x36,0x36,0x35,0x35,0x36,0x36,0x38,0x38,0x38,0x38,0x37,0x36,0x37,0x39,
0x39,0x3b,0x3c,0x3c,0x3a,0x3b,0x3a,0x3a,0x38,0x37,0x35,0x36,0x35,0x36,0x33,0x36,
0x36,0x37,0x39,0x3a,0x3b,0x3e,0x3d,0x3b,0x39,0x39,0x37,0x36,0x35,0x35,0x37,0x38,
0x39,0x38,0x38,0x37,0x37,0x38,0x39,0x3b,0x3d,0x3b,0x38,0x36,0x35,0x37,0x38,0x37,
0x36,0x37,0x36,0x36,0x35,0x36,0x36,0x39,0x3b,0x3c,0x39,0x3c,0x38,0x39,0x39,0x38,
0x37,0x38,0x38,0x38,0x38,0x39,0x38,0x39,0x38,0x38,0x37,0x36,0x35,0x36,0x37,0x37,
0x36,0x38,0x39,0x38,0x37,0x36,0x35,0x37,0x38,0x3a,0x3a,0x38,0x34,0x34,0x36,0x38,
0x3a,0x3d,0x3c,0x39,0x39,0x3b,0x3b,0x3d,0x3c,0x3d,0x3d,0x3b,0x35,0x33,0x33,0x34,
0x34,0x35,0x36,0x35,0x35,0x36,0x37,0x36,0x35,0x34,0x34,0x33,0x32,0x34,0x36,0x36,
0x35,0x33,0x33,0x35,0x38,0x39,0x37,0x3b,0x39,0x35,0x34,0x36,0x36,0x39,0x38,0x36,
// Line 11
0x36,0x37,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x35,0x36,0x34,0x34,0x33,0x32,
0x32,0x34,0x35,0x36,0x38,0x3b,0x3b,0x3a,0x37,0x36,0x38,0x3a,0x3b,0x3a,0x37,0x33,
0x30,0x32,0x32,0x34,0x38,0x3a,0x39,0x36,0x32,0x32,0x34,0x38,0x3b,0x3c,0x39,0x34,
0x30,0x33,0x3b,0x4a,0x5f,0x71,0x7b,0x7a,0x6f,0x61,0x57,0x56,0x5c,0x67,0x71,0x75,
0x76,0x70,0x66,0x5d,0x59,0x5d,0x63,0x6b,0x70,0x73,0x72,0x6a,0x60,0x5a,0x58,0x5d,
0x65,0x6c,0x71,0x75,0x73,0x6b,0x61,0x59,0x59,0x5d,0x64,0x6b,0x70,0x75,0x70,0x68,
0x61,0x5d,0x5e,0x61,0x6a,0x71,0x75,0x76,0x72,0x6a,0x63,0x5d,0x5b,0x5f,0x65,0x6c,
0x71,0x72,0x6e,0x68,0x61,0x5d,0x5b,0x60,0x67,0x72,0x79,0x7b,0x77,0x6f,0x68,0x61,
0x60,0x63,0x68,0x6c,0x6c,0x6b,0x6c,0x72,0x7b,0x88,0x94,0xa0,0xa9,0xab,0xa4,0x96,
0x88,0x78,0x67,0x5e,0x58,0x55,0x52,0x4c,0x44,0x3d,0x39,0x3d,0x4b,0x5d,0x6e,0x7c,
0x86,0x8d,0x8f,0x91,0x93,0x9a,0x9f,0x9d,0x97,0x97,0x96,0x97,0x96,0x94,0x8d,0x82,
0x73,0x65,0x59,0x53,0x4c,0x42,0x3a,0x33,0x34,0x42,0x56,0x6b,0x79,0x7e,0x7a,0x72,
0x65,0x5d,0x56,0x50,0x47,0x3e,0x35,0x33,0x3a,0x4d,0x63,0x75,0x80,0x81,0x76,0x68,
0x59,0x4f,0x48,0x44,0x41,0x3d,0x38,0x32,0x30,0x32,0x39,0x44,0x52,0x5f,0x6c,0x76,
0x77,0x71,0x69,0x61,0x59,0x56,0x50,0x4a,0x40,0x36,0x30,0x36,0x46,0x5d,0x73,0x85,
0x8e,0x93,0x95,0x95,0x91,0x8b,0x7e,0x6d,0x5d,0x53,0x55,0x61,0x6f,0x77,0x77,0x70,
0x67,0x5f,0x5f,0x5d,0x56,0x4b,0x3b,0x2e,0x2c,0x36,0x48,0x63,0x75,0x7e,0x77,0x6c,
0x60,0x5a,0x56,0x50,0x44,0x3e,0x33,0x32,0x3c,0x4f,0x65,0x79,0x80,0x7c,0x71,0x64,
0x57,0x52,0x4c,0x46,0x40,0x3a,0x35,0x32,0x31,0x33,0x39,0x41,0x47,0x50,0x5a,0x67,
0x73,0x80,0x8a,0x91,0x93,0x92,0x8a,0x7d,0x6d,0x5d,0x4c,0x44,0x3b,0x38,0x3a,0x3c,
0x3c,0x3b,0x37,0x34,0x38,0x42,0x52,0x62,0x70,0x76,0x73,0x6b,0x60,0x57,0x53,0x50,
0x4b,0x44,0x39,0x2e,0x26,0x26,0x2d,0x3a,0x42,0x44,0x3e,0x34,0x2c,0x2f,0x3e,0x53,
0x69,0x79,0x7e,0x7a,0x6f,0x64,0x5b,0x5b,0x5f,0x65,0x6a,0x6d,0x74,0x7c,0x88,0x92,
0x99,0x9b,0x93,0x84,0x71,0x5d,0x4c,0x43,0x3d,0x3b,0x39,0x38,0x36,0x37,0x38,0x39,
0x3a,0x3a,0x38,0x35,0x34,0x36,0x37,0x38,0x38,0x38,0x38,0x37,0x36,0x38,0x39,0x39,
0x37,0x36,0x37,0x36,0x3a,0x3a,0x3a,0x3b,0x3a,0x37,0x39,0x39,0x39,0x3c,0x3d,0x3c,
0x3a,0x38,0x36,0x38,0x38,0x38,0x37,0x38,0x37,0x38,0x38,0x3a,0x3a,0x3b,0x3b,0x3e,
0x40,0x40,0x3d,0x3a,0x38,0x39,0x3a,0x3b,0x3b,0x3c,0x3a,0x37,0x34,0x36,0x39,0x3a,
0x3c,0x3a,0x36,0x36,0x36,0x38,0x3a,0x3b,0x3a,0x3a,0x37,0x37,0x35,0x34,0x34,0x34,
0x34,0x36,0x36,0x38,0x37,0x39,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x36,
0x36,0x37,0x35,0x36,0x36,0x38,0x3a,0x39,0x38,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x3b,
0x39,0x39,0x39,0x3a,0x3b,0x3a,0x3a,0x39,0x37,0x36,0x39,0x3a,0x3d,0x3f,0x3e,0x3d,
0x3a,0x38,0x39,0x3b,0x3c,0x3b,0x3b,0x37,0x34,0x36,0x36,0x38,0x3c,0x3b,0x3a,0x3a,
0x38,0x38,0x38,0x39,0x3a,0x3d,0x3d,0x3d,0x3b,0x3a,0x3a,0x39,0x39,0x39,0x39,0x39,
0x39,0x38,0x39,0x39,0x39,0x39,0x38,0x38,0x39,0x39,0x38,0x39,0x37,0x36,0x36,0x36,
0x36,0x38,0x3a,0x38,0x35,0x36,0x34,0x34,0x34,0x36,0x35,0x38,0x38,0x38,0x36,0x38,
0x38,0x38,0x37,0x36,0x34,0x33,0x31,0x32,0x34,0x36,0x35,0x37,0x36,0x36,0x37,0x38,
0x39,0x3b,0x3c,0x3b,0x3a,0x39,0x39,0x39,0x38,0x39,0x37,0x38,0x37,0x37,0x36,0x35,
0x34,0x39,0x3b,0x3b,0x38,0x37,0x38,0x3a,0x39,0x37,0x37,0x38,0x38,0x38,0x37,0x36,
0x36,0x38,0x3a,0x39,0x38,0x38,0x39,0x3b,0x3a,0x39,0x38,0x39,0x39,0x37,0x38,0x36,
0x34,0x36,0x37,0x37,0x38,0x37,0x38,0x3e,0x40,0x41,0x3e,0x3d,0x3a,0x39,0x38,0x37,
0x36,0x3a,0x3a,0x35,0x32,0x31,0x32,0x35,0x36,0x36,0x36,0x34,0x33,0x32,0x32,0x33,
0x37,0x3b,0x3b,0x39,0x36,0x36,0x36,0x37,0x37,0x38,0x37,0x36,0x34,0x37,0x38,0x39,
0x3a,0x3b,0x3c,0x3b,0x3a,0x39,0x35,0x37,0x34,0x32,0x34,0x34,0x35,0x36,0x36,0x34,
0x35,0x36,0x36,0x33,0x33,0x32,0x33,0x33,0x33,0x34,0x36,0x36,0x36,0x38,0x39,0x39,
0x38,0x36,0x36,0x37,0x36,0x36,0x34,0x35,0x35,0x37,0x38,0x3a,0x3a,0x3b,0x39,0x36,
0x35,0x37,0x39,0x3a,0x38,0x35,0x34,0x33,0x33,0x34,0x35,0x36,0x36,0x36,0x34,0x34,
0x35,0x39,0x39,0x3a,0x38,0x37,0x34,0x33,0x32,0x35,0x38,0x37,0x35,0x35,0x36,0x38,
0x39,0x3b,0x3b,0x3d,0x39,0x35,0x34,0x35,0x36,0x38,0x38,0x38,0x38,0x38,0x37,0x36,
0x37,0x38,0x39,0x3b,0x3b,0x3c,0x3a,0x38,0x34,0x36,0x36,0x36,0x36,0x36,0x35,0x36,
0x34,0x34,0x34,0x38,0x38,0x37,0x36,0x36,0x34,0x37,0x36,0x34,0x34,0x35,0x37,0x38,
0x37,0x35,0x36,0x37,0x38,0x39,0x39,0x39,0x39,0x3a,0x39,0x37,0x36,0x38,0x38,0x38,
0x38,0x38,0x37,0x36,0x35,0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x36,0x37,0x37,0x37,
0x36,0x34,0x34,0x35,0x36,0x38,0x39,0x38,0x37,0x36,0x34,0x36,0x36,0x37,0x38,0x38,
0x36,0x36,0x36,0x37,0x38,0x3a,0x39,0x37,0x35,0x34,0x34,0x36,0x37,0x39,0x39,0x38,
0x34,0x33,0x34,0x36,0x36,0x36,0x36,0x34,0x33,0x33,0x33,0x37,0x34,0x34,0x34,0x35,
0x34,0x36,0x38,0x38,0x37,0x37,0x38,0x37,0x3b,0x3b,0x3a,0x3b,0x39,0x36,0x37,0x37,
0x36,0x36,0x36,0x36,0x34,0x33,0x32,0x35,0x37,0x38,0x38,0x38,0x39,0x39,0x39,0x39,
0x3a,0x3c,0x3b,0x39,0x38,0x38,0x38,0x39,0x38,0x37,0x38,0x39,0x39,0x39,0x39,0x3b,
0x3b,0x3c,0x3a,0x39,0x39,0x38,0x36,0x35,0x35,0x35,0x35,0x35,0x35,0x39,0x3b,0x3b,
0x39,0x39,0x38,0x39,0x39,0x39,0x38,0x39,0x37,0x34,0x33,0x34,0x34,0x35,0x35,0x34,
0x36,0x39,0x3a,0x3a,0x39,0x39,0x39,0x39,0x37,0x38,0x39,0x3b,0x3a,0x3b,0x3a,0x3b,
0x3a,0x3a,0x39,0x39,0x38,0x39,0x37,0x37,0x36,0x38,0x39,0x39,0x35,0x33,0x32,0x31,
0x33,0x34,0x36,0x36,0x36,0x36,0x36,0x39,0x3a,0x3d,0x3d,0x3b,0x39,0x3a,0x39,0x3a,
0x3a,0x39,0x35,0x34,0x34,0x36,0x37,0x36,0x34,0x36,0x38,0x38,0x35,0x3a,0x3c,0x3c,
0x3b,0x39,0x39,0x3b,0x3b,0x3a,0x3a,0x3a,0x36,0x34,0x33,0x31,0x33,0x36,0x38,0x38,
0x37,0x36,0x36,0x37,0x39,0x3b,0x3d,0x3b,0x38,0x37,0x34,0x35,0x35,0x36,0x35,0x35,
0x34,0x35,0x34,0x36,0x35,0x36,0x39,0x3a,0x39,0x39,0x39,0x38,0x39,0x37,0x36,0x36,
0x36,0x34,0x35,0x34,0x33,0x31,0x31,0x31,0x33,0x36,0x36,0x37,0x38,0x39,0x39,0x3b,
0x3a,0x3b,0x3b,0x39,0x34,0x34,0x36,0x3a,0x3b,0x3a,0x38,0x38,0x38,0x39,0x39,0x3a,
0x3a,0x39,0x38,0x36,0x34,0x37,0x38,0x37,0x37,0x39,0x39,0x34,0x34,0x34,0x34,0x35,
0x36,0x37,0x39,0x3b,0x3a,0x3d,0x3d,0x3d,0x3e,0x3f,0x3e,0x3c,0x39,0x36,0x33,0x31,
0x2f,0x31,0x34,0x36,0x36,0x36,0x36,0x37,0x37,0x39,0x3a,0x3c,0x3b,0x39,0x36,0x34,
0x34,0x35,0x36,0x38,0x38,0x39,0x38,0x37,0x39,0x3b,0x3b,0x3d,0x3d,0x3d,0x3b,0x3a,
0x38,0x38,0x38,0x38,0x33,0x34,0x33,0x35,0x38,0x39,0x37,0x37,0x37,0x39,0x3a,0x3a,
0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x39,0x38,0x36,0x39,0x3a,0x3b,0x3b,0x3b,
0x3a,0x3a,0x39,0x39,0x39,0x3a,0x39,0x39,0x38,0x38,0x36,0x35,0x34,0x35,0x36,0x35,
0x34,0x36,0x35,0x36,0x39,0x3c,0x3f,0x3c,0x3b,0x38,0x37,0x38,0x38,0x36,0x36,0x32,
0x2e,0x32,0x38,0x44,0x54,0x67,0x75,0x83,0x8b,0x92,0x98,0x9e,0xa0,0xa3,0xa2,0x9f,
0x9a,0x96,0x95,0x97,0x9a,0x9c,0x9c,0x9d,0x9c,0x9b,0x9c,0x9b,0x9c,0x9c,0x9c,0x9b,
0x9b,0x9d,0x9d,0x9d,0x9b,0x9a,0x9b,0x9c,0x9c,0x9c,0x9d,0x9d,0x9b,0x9d,0x9e,0x9f,
0x9f,0x9e,0x9a,0x99,0x99,0x9d,0x9d,0xa0,0x9f,0x9c,0x9c,0x9b,0x9c,0x9e,0x9e,0x9d,
0x9d,0x9c,0x9c,0x9c,0x9c,0x9e,0xa0,0xa1,0xa0,0x9f,0x9e,0x9d,0x9b,0x9b,0x9a,0x99,
0x99,0x99,0x9a,0x9c,0x9c,0x9d,0x9f,0xa0,0x9f,0x9e,0x9d,0xa0,0x9f,0x9f,0x9d,0x9d,
0x9c,0x9b,0x9a,0x9a,0x9a,0x9b,0x9d,0x9d,0x9e,0x9f,0xa0,0x9f,0x9f,0xa0,0xa0,0x9e,
0x9c,0x9b,0x9a,0x9c,0x9d,0x9e,0x9e,0x9c,0x99,0x99,0x9a,0x9c,0x9d,0x9e,0x9e,0x9e,
0x9e,0x9e,0x9c,0x9f,0x9d,0x9b,0x9b,0x9b,0x99,0x9a,0x9a,0x9a,0x9b,0x9d,0x9f,0xa1,
0xa2,0xa2,0xa0,0x9f,0x9d,0x9c,0x9b,0x99,0x98,0x99,0x97,0x96,0x97,0x9a,0x9d,0x9d,
0x96,0x8c,0x7e,0x72,0x63,0x57,0x4f,0x48,0x42,0x3e,0x3a,0x39,0x41,0x50,0x61,0x74,
0x82,0x8e,0x95,0x99,0x9a,0x9d,0xa0,0xa2,0xa2,0xa2,0xa0,0x9c,0x97,0x95,0x95,0x9b,
0x9e,0xa0,0x9d,0x97,0x8c,0x7f,0x6e,0x60,0x57,0x51,0x4a,0x44,0x3d,0x39,0x38,0x45,
0x54,0x69,0x7c,0x84,0x7e,0x73,0x64,0x57,0x55,0x5c,0x65,0x6e,0x74,0x79,0x7d,0x87,
0x94,0xa0,0xa1,0x96,0x80,0x6a,0x57,0x50,0x54,0x61,0x6e,0x7a,0x7d,0x79,0x72,0x67,
0x5e,0x57,0x50,0x48,0x3e,0x34,0x2e,0x2b,0x2e,0x34,0x3a,0x3f,0x40,0x3c,0x37,0x32,
0x30,0x2f,0x35,0x38,0x3a,0x3c,0x3d,0x3e,0x3e,0x3e,0x3c,0x3c,0x3a,0x39,0x3a,0x38,
0x38,0x3a,0x39,0x36,0x34,0x34,0x35,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x37,0x38,0x39,
// Line 12
0x34,0x36,0x37,0x38,0x38,0x39,0x38,0x38,0x37,0x37,0x36,0x37,0x34,0x34,0x33,0x34,
0x34,0x34,0x36,0x36,0x36,0x37,0x37,0x37,0x39,0x3a,0x3a,0x3a,0x37,0x35,0x36,0x36,
0x34,0x33,0x34,0x36,0x36,0x38,0x37,0x36,0x34,0x34,0x36,0x39,0x39,0x38,0x36,0x34,
0x30,0x33,0x3b,0x4c,0x5e,0x71,0x78,0x76,0x6d,0x61,0x59,0x58,0x5e,0x69,0x76,0x7e,
0x7b,0x73,0x66,0x5c,0x59,0x5b,0x60,0x66,0x69,0x6b,0x68,0x65,0x5f,0x5c,0x5b,0x5e,
0x63,0x6b,0x72,0x75,0x73,0x6d,0x64,0x5e,0x5c,0x60,0x66,0x70,0x74,0x73,0x70,0x6a,
0x62,0x5d,0x5c,0x5e,0x64,0x6d,0x73,0x76,0x74,0x6c,0x64,0x5c,0x5a,0x5d,0x65,0x6e,
0x73,0x74,0x70,0x67,0x5d,0x58,0x58,0x60,0x68,0x71,0x77,0x77,0x72,0x6d,0x66,0x61,
0x5f,0x62,0x67,0x6b,0x6d,0x6e,0x70,0x75,0x7e,0x8b,0x97,0xa3,0xaa,0xad,0xa5,0x96,
0x85,0x76,0x67,0x5c,0x53,0x50,0x4d,0x46,0x3d,0x38,0x37,0x3e,0x4a,0x5e,0x71,0x80,
0x89,0x8e,0x8f,0x93,0x97,0x9c,0x9d,0x9b,0x99,0x98,0x99,0x9b,0x98,0x97,0x8c,0x7c,
0x6c,0x5f,0x56,0x50,0x48,0x3f,0x37,0x31,0x34,0x3e,0x55,0x6b,0x79,0x7e,0x78,0x6b,
0x5f,0x57,0x53,0x50,0x47,0x3c,0x34,0x32,0x39,0x4c,0x64,0x79,0x81,0x80,0x74,0x65,
0x57,0x4e,0x48,0x44,0x3e,0x38,0x31,0x2d,0x2c,0x30,0x36,0x3f,0x4c,0x5c,0x69,0x73,
0x76,0x75,0x6d,0x65,0x5e,0x5a,0x53,0x4a,0x3f,0x38,0x34,0x39,0x47,0x5c,0x73,0x87,
0x93,0x99,0x99,0x98,0x93,0x8b,0x7c,0x69,0x57,0x50,0x53,0x60,0x6d,0x77,0x77,0x72,
0x69,0x61,0x5e,0x5c,0x58,0x4d,0x3e,0x30,0x2a,0x35,0x4d,0x69,0x7d,0x83,0x7c,0x70,
0x63,0x5a,0x56,0x50,0x49,0x41,0x37,0x34,0x39,0x50,0x6a,0x7e,0x87,0x83,0x73,0x65,
0x58,0x54,0x5b,0x65,0x6e,0x75,0x79,0x7e,0x89,0x97,0xa2,0xa4,0x98,0x85,0x70,0x5e,
0x51,0x4f,0x56,0x62,0x70,0x7e,0x8b,0x95,0x9e,0xa0,0x9a,0x8e,0x7e,0x70,0x61,0x56,
0x4b,0x41,0x3a,0x36,0x39,0x48,0x59,0x6c,0x7b,0x7f,0x79,0x6e,0x5f,0x52,0x4c,0x4c,
0x4d,0x48,0x3c,0x30,0x2b,0x2f,0x38,0x41,0x47,0x46,0x3c,0x31,0x2a,0x2c,0x3b,0x51,
0x65,0x76,0x7d,0x7c,0x72,0x69,0x61,0x60,0x63,0x66,0x6b,0x71,0x77,0x7d,0x87,0x90,
0x9b,0xa8,0xac,0xaa,0xa3,0x9d,0x99,0x98,0x97,0x9a,0x9e,0xa2,0xa3,0xa2,0xa0,0x9b,
0x98,0x99,0x97,0x95,0x95,0x97,0x99,0x9b,0x9d,0x9e,0x9e,0xa1,0xa0,0xa2,0xa4,0xa3,
0xa1,0xa2,0x9f,0x9e,0x9c,0x9a,0x9b,0x9a,0x99,0x9a,0x9b,0x9e,0x9f,0x9e,0xa0,0x9e,
0x9c,0x9f,0xa0,0xa0,0x9e,0x9d,0x99,0x99,0x97,0x99,0x9c,0x9f,0x9e,0x9e,0x9e,0x9e,
0x9d,0x9c,0x9a,0x9a,0x9a,0x9a,0x9a,0x9a,0x9a,0x9a,0x9b,0x9c,0x9d,0x9f,0xa1,0xa0,
0x9d,0x9c,0x9d,0x9a,0x9b,0x9c,0x9d,0x9f,0x9e,0x9d,0x9e,0x9e,0x9e,0xa0,0x9e,0x9e,
0x9d,0x9d,0x9d,0x9e,0x9e,0xa1,0xa0,0x9f,0x9e,0x9e,0x9f,0x9e,0x9e,0x9f,0x9e,0x9e,
0x9e,0x9e,0x9e,0x9d,0x9c,0x9d,0xa0,0xa1,0xa1,0xa0,0x9e,0x9b,0x9a,0x9c,0x9e,0x9e,
0x9d,0x9a,0x98,0x99,0x99,0x9b,0x9e,0x9f,0x9d,0x9c,0x99,0x97,0x97,0x9a,0x9c,0x9d,
0x9d,0x9e,0x9d,0x9e,0x9d,0x9d,0x9e,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9e,0xa0,0x9d,
0x9e,0x9c,0x9c,0x9d,0x9d,0x9d,0x9d,0x9f,0x9e,0xa0,0x9f,0x9f,0x9e,0xa0,0x9d,0x9a,
0x98,0x9a,0x9a,0x9e,0x9d,0x9e,0x9f,0xa0,0x9e,0x9f,0x9f,0x9f,0xa1,0xa1,0xa0,0xa1,
0x9f,0x9f,0xa0,0x9f,0x9e,0x9d,0x9b,0x9a,0x98,0x9a,0x9c,0x9f,0x9f,0x9e,0x9d,0x9e,
0xa0,0xa0,0x9f,0x9e,0x9e,0x9e,0x9d,0x9e,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9b,0x9e,
0x9c,0x9d,0x9c,0x9a,0x99,0x98,0x98,0x97,0x98,0x99,0x9a,0x99,0x9b,0x99,0x97,0x99,
0x9a,0x9d,0x9d,0x9c,0x9b,0x9d,0x9e,0x9f,0x9d,0x9e,0x9f,0xa0,0x9d,0x9a,0x99,0x9a,
0x99,0x99,0x99,0x99,0x98,0x9c,0x9d,0x9c,0x9b,0x9e,0xa1,0xa3,0xa1,0xa0,0xa0,0xa2,
0xa2,0xa1,0xa0,0x9e,0x9d,0x9e,0x9e,0x9c,0x9b,0x9a,0x9c,0x9d,0x9d,0x9e,0x9e,0x9e,
0x9d,0x9c,0x9c,0x9d,0x9f,0xa1,0xa0,0x9f,0x9e,0x9e,0x9e,0xa2,0x9e,0x9d,0x9e,0x9d,
0x9c,0x9c,0x9b,0x9b,0x9b,0x9d,0x9d,0x9a,0x9d,0x9e,0x9e,0x9f,0x9e,0x9c,0x9c,0x9c,
0x9c,0x9e,0x9c,0x9a,0x9a,0x9a,0x9a,0x9b,0x9c,0x9d,0x9d,0x9c,0x99,0x97,0x97,0x98,
0x99,0x9a,0x9a,0x9a,0x9b,0x9c,0x9c,0x9e,0x9e,0x9e,0x9e,0x9c,0x9b,0x9a,0x99,0x97,
0x96,0x97,0x9a,0x9b,0x9a,0x9a,0x9b,0x9d,0x9e,0x9e,0x9e,0x9d,0x9b,0x9c,0x9b,0x9b,
0x9b,0x9d,0x9d,0x9e,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9e,0xa0,0xa0,0xa0,0x9e,0x9d,
0x9b,0x9a,0x9a,0x9b,0x9a,0x99,0x98,0x99,0x9a,0x9c,0x9c,0x9d,0x9b,0x9d,0x9d,0x9d,
0x9d,0x9e,0x9e,0x9e,0x9a,0x98,0x98,0x99,0x9a,0x9b,0x9d,0x9d,0x9b,0x99,0x99,0x9a,
0x9c,0x9d,0x9c,0x9d,0x9b,0x9b,0x9c,0x9d,0x9f,0xa1,0xa1,0x9f,0x9e,0x9e,0x9d,0x9a,
0x99,0x98,0x98,0x9a,0x98,0x98,0x9a,0x9b,0x9c,0x9e,0xa0,0xa0,0x9e,0x9e,0x9c,0x99,
0x98,0x99,0x9a,0x9b,0x98,0x98,0x9a,0x9d,0x9e,0xa0,0x9f,0x9e,0x9e,0x9c,0x9b,0x9a,
0x99,0x9b,0x9b,0x9c,0x9b,0x9b,0x9b,0x9c,0x9d,0x9e,0x9c,0x9b,0x99,0x99,0x98,0x9a,
0x9b,0x9d,0x9d,0x9c,0x9a,0x9a,0x9b,0x9e,0x9e,0x9d,0x9c,0x99,0x99,0x9a,0x9d,0x9e,
0xa0,0xa0,0xa0,0xa0,0x9f,0x9e,0xa0,0xa0,0x9e,0x9e,0x9e,0x9e,0x9d,0x9c,0x9b,0x9d,
0x9d,0x9c,0x9c,0x9b,0x9a,0x9d,0x9d,0x9d,0x9b,0x9d,0x9d,0x9d,0x9c,0x9d,0x9e,0x9d,
0x9c,0x9d,0x9e,0x9d,0x9c,0x9e,0x9f,0xa0,0xa0,0xa0,0x9f,0x9f,0xa0,0xa1,0xa1,0x9f,
0x9e,0x9c,0x9b,0x99,0x97,0x99,0x9b,0x9e,0x9e,0x9b,0x9a,0x9e,0x9f,0xa0,0xa0,0x9f,
0x9e,0x9d,0x9c,0x9c,0x9a,0x9d,0x9d,0x9b,0x9c,0x9d,0x9d,0x9e,0x9d,0x9d,0x9e,0x9e,
0x9e,0x9d,0x9e,0x9e,0x9c,0x9c,0x9b,0x9b,0x9c,0x9a,0x9a,0x9d,0x9d,0x9e,0x9e,0x9e,
0x9c,0x9d,0x9e,0xa0,0xa0,0xa1,0xa1,0xa1,0x9e,0x9f,0xa0,0xa3,0xa3,0xa2,0xa1,0x9f,
0x9e,0x9e,0x9e,0x9e,0xa0,0xa1,0xa2,0xa1,0x9e,0x9e,0xa0,0xa1,0x9f,0x9e,0x9f,0x9d,
0x9a,0x99,0x98,0x98,0x97,0x97,0x98,0x9b,0x9d,0x9e,0x9e,0x9f,0x9e,0x9e,0x9e,0x9e,
0xa0,0xa1,0x9f,0x9e,0x9e,0x9e,0x9f,0xa0,0x9f,0xa0,0xa0,0xa0,0x9f,0x9e,0x9e,0x9e,
0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9a,0x9a,0x99,0x9b,0x9d,0x9e,0x9f,0xa2,0xa3,0xa3,
0xa1,0xa1,0xa0,0xa0,0x9e,0x9e,0x9e,0x9d,0x9b,0x9a,0x9c,0x9d,0x9c,0x9c,0x9d,0x9e,
0x9e,0x9e,0x9d,0x9c,0x9c,0x9d,0x9e,0xa0,0xa0,0xa0,0xa0,0x9e,0x9a,0x9d,0xa0,0xa1,
0xa2,0xa1,0x9f,0x9e,0x9d,0x9e,0x9d,0x9e,0x9d,0x9e,0x9e,0x9e,0xa0,0xa1,0xa1,0x9f,
0xa0,0xa1,0x9f,0x9e,0x9d,0x9d,0x9e,0x9d,0x9b,0x9a,0x99,0x9b,0x9d,0x9f,0x9e,0x9e,
0x9e,0x9e,0x9d,0x9f,0xa0,0xa1,0xa1,0xa0,0x9d,0x9d,0x9d,0x9e,0x9b,0x9e,0x9f,0xa0,
0xa1,0xa0,0xa1,0xa1,0xa0,0xa0,0xa0,0xa0,0x9f,0x9e,0x9c,0x9a,0x9a,0x9b,0x9e,0x9e,
0x9d,0x9d,0x9d,0x9e,0xa0,0xa1,0xa2,0xa2,0xa1,0xa1,0xa0,0xa1,0xa1,0xa0,0x9d,0x9d,
0x9c,0x9c,0x9d,0x9e,0x9f,0xa0,0xa0,0x9e,0x9d,0x9f,0x9e,0x9f,0xa0,0xa0,0x9e,0x9e,
0x9d,0x9a,0x9a,0x9d,0x9e,0x9f,0x9e,0x9d,0x9a,0x9b,0x9a,0x9a,0x9c,0x9e,0x9e,0x9d,
0x9b,0x9b,0x9b,0x9c,0x9c,0x9e,0x9f,0xa0,0x9f,0x9e,0x9d,0x9e,0x9e,0x9f,0xa0,0xa0,
0xa0,0x9e,0x9d,0x9d,0x9d,0x9e,0x9e,0x9d,0x9e,0x9e,0x9d,0x9c,0x9c,0x9d,0x9e,0x9f,
0x9e,0x9f,0x9f,0x9e,0x9d,0x9e,0x9d,0x9e,0x9d,0x9d,0x9c,0x9b,0x9a,0x9a,0x9a,0x9b,
0x9c,0x9e,0x9f,0xa0,0x9e,0x9e,0x9e,0x9e,0xa0,0xa0,0xa0,0x9e,0x9e,0x9e,0x9f,0xa0,
0x9e,0x9e,0x9d,0x9d,0x9c,0x9c,0x9c,0x9d,0x9d,0x9c,0x9a,0x9b,0x9c,0x9d,0x9e,0x9d,
0x9b,0x9c,0x9d,0x9d,0x9d,0x9f,0xa0,0xa2,0xa2,0xa2,0xa0,0x9e,0x9c,0x9c,0x9d,0x9d,
0x9d,0x9e,0x9d,0x9c,0x9c,0x9d,0x9d,0x9d,0x9d,0x9d,0x9d,0x9c,0x9c,0x9e,0x9f,0xa0,
0x9f,0x9e,0x9e,0x9e,0x9e,0x9e,0x9d,0x9e,0x9e,0x9e,0x9c,0x9a,0x99,0x9b,0x9d,0x9d,
0x9a,0x9a,0x99,0x98,0x99,0x9b,0x9b,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9e,0x9e,0x9e,
0x9e,0x9e,0x9d,0x9b,0x9b,0x9d,0x9e,0x9d,0x9d,0x9f,0x9f,0x9e,0x9e,0x9f,0xa0,0x9e,
0x9c,0x9a,0x9a,0x9d,0x9d,0x9d,0x9a,0x99,0x98,0x9a,0x9d,0xa0,0xa1,0xa2,0xa1,0x9e,
0x9e,0x9e,0x9f,0x9e,0x9d,0x9a,0x98,0x98,0x98,0x98,0x9b,0x9b,0x9a,0x9b,0x9c,0x9b,
0x9b,0x9c,0x9c,0x9d,0x9d,0x9e,0x9f,0xa0,0xa0,0xa1,0xa1,0xa1,0xa0,0x9f,0x9e,0x9e,
0x9f,0xa0,0x9e,0x9e,0x9c,0x9b,0x9d,0x9d,0x9f,0xa0,0xa1,0xa1,0xa0,0x9f,0x9e,0x9b,
0x97,0x8f,0x84,0x75,0x63,0x58,0x53,0x57,0x61,0x71,0x7d,0x82,0x7c,0x70,0x63,0x5c,
0x5c,0x62,0x68,0x6e,0x70,0x75,0x7c,0x87,0x94,0xa1,0xa3,0x98,0x84,0x6d,0x5b,0x54,
0x58,0x63,0x73,0x7e,0x81,0x7c,0x74,0x6b,0x61,0x5d,0x54,0x49,0x3e,0x34,0x30,0x3b,
0x4d,0x65,0x79,0x86,0x84,0x79,0x68,0x5a,0x4e,0x4c,0x47,0x43,0x40,0x3c,0x38,0x36,
0x35,0x39,0x3f,0x4a,0x58,0x67,0x73,0x79,0x76,0x6d,0x60,0x57,0x5a,0x64,0x71,0x7c,
0x7e,0x78,0x6c,0x61,0x5b,0x5e,0x60,0x5f,0x56,0x48,0x36,0x2b,0x27,0x2c,0x34,0x3e,
0x44,0x46,0x42,0x3b,0x37,0x37,0x35,0x34,0x36,0x3a,0x3b,0x3b,0x39,0x38,0x38,0x3b,
0x3b,0x3c,0x3b,0x3a,0x3a,0x3a,0x37,0x36,0x38,0x3a,0x3a,0x39,0x37,0x38,0x3a,0x3b,
// Line 13
0x38,0x38,0x36,0x36,0x36,0x37,0x38,0x39,0x3b,0x3d,0x3b,0x39,0x38,0x39,0x38,0x38,
0x36,0x35,0x34,0x33,0x31,0x33,0x34,0x37,0x37,0x39,0x38,0x37,0x38,0x38,0x37,0x36,
0x34,0x34,0x36,0x37,0x37,0x36,0x34,0x35,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x37,
0x35,0x35,0x38,0x39,0x38,0x3a,0x3a,0x3b,0x3b,0x3a,0x37,0x36,0x36,0x38,0x39,0x39,
0x36,0x34,0x36,0x36,0x36,0x38,0x38,0x3a,0x3a,0x39,0x38,0x37,0x39,0x39,0x3b,0x3b,
0x39,0x37,0x36,0x34,0x34,0x36,0x38,0x39,0x39,0x39,0x38,0x39,0x39,0x3a,0x39,0x38,
0x36,0x36,0x34,0x34,0x35,0x38,0x3a,0x3b,0x39,0x37,0x34,0x34,0x34,0x34,0x34,0x33,
0x31,0x32,0x30,0x2f,0x32,0x36,0x38,0x3a,0x39,0x38,0x36,0x38,0x38,0x38,0x38,0x37,
0x36,0x37,0x38,0x37,0x36,0x35,0x34,0x36,0x36,0x36,0x34,0x38,0x37,0x35,0x34,0x34,
0x36,0x38,0x38,0x38,0x38,0x37,0x36,0x35,0x36,0x37,0x38,0x39,0x38,0x37,0x38,0x37,
0x36,0x38,0x3a,0x3b,0x3b,0x39,0x37,0x36,0x35,0x36,0x37,0x38,0x36,0x37,0x36,0x38,
0x38,0x3a,0x39,0x38,0x37,0x36,0x35,0x36,0x37,0x3a,0x3c,0x3b,0x3a,0x39,0x38,0x39,
0x39,0x3b,0x3b,0x37,0x36,0x35,0x34,0x36,0x36,0x38,0x3a,0x3b,0x3a,0x3a,0x39,0x38,
0x38,0x38,0x37,0x36,0x33,0x31,0x31,0x34,0x33,0x35,0x39,0x39,0x38,0x39,0x38,0x38,
0x39,0x3b,0x3a,0x38,0x34,0x34,0x33,0x35,0x36,0x38,0x39,0x38,0x36,0x38,0x37,0x37,
0x37,0x36,0x38,0x3a,0x39,0x38,0x37,0x36,0x34,0x34,0x36,0x37,0x37,0x36,0x34,0x33,
0x30,0x31,0x33,0x36,0x38,0x38,0x37,0x34,0x34,0x35,0x37,0x39,0x3b,0x3c,0x3a,0x38,
0x36,0x35,0x36,0x38,0x38,0x36,0x34,0x33,0x33,0x37,0x37,0x37,0x37,0x39,0x38,0x38,
0x38,0x39,0x38,0x39,0x35,0x32,0x34,0x35,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x39,
0x39,0x38,0x38,0x36,0x34,0x34,0x34,0x36,0x36,0x39,0x3a,0x39,0x38,0x36,0x34,0x36,
0x37,0x38,0x37,0x34,0x33,0x33,0x33,0x35,0x36,0x38,0x36,0x34,0x33,0x33,0x34,0x37,
0x39,0x3c,0x3d,0x3c,0x39,0x39,0x39,0x39,0x3b,0x3d,0x3c,0x38,0x35,0x33,0x32,0x35,
0x37,0x39,0x39,0x38,0x36,0x38,0x3a,0x3d,0x3d,0x3d,0x3c,0x3c,0x3a,0x39,0x39,0x39,
0x38,0x37,0x36,0x36,0x35,0x37,0x37,0x36,0x37,0x39,0x39,0x39,0x38,0x38,0x39,0x3a,
0x3b,0x3b,0x39,0x38,0x37,0x39,0x39,0x39,0x38,0x36,0x36,0x37,0x36,0x36,0x37,0x37,
0x38,0x38,0x37,0x36,0x37,0x37,0x37,0x35,0x34,0x33,0x33,0x37,0x36,0x34,0x36,0x37,
0x36,0x38,0x39,0x3b,0x3c,0x3d,0x3c,0x3b,0x39,0x39,0x38,0x39,0x39,0x39,0x39,0x37,
0x34,0x36,0x37,0x38,0x39,0x39,0x37,0x37,0x37,0x39,0x38,0x39,0x39,0x3a,0x39,0x38,
0x38,0x38,0x38,0x37,0x37,0x39,0x3a,0x3a,0x3a,0x3b,0x3c,0x3d,0x3b,0x37,0x39,0x39,
0x38,0x39,0x39,0x39,0x39,0x38,0x37,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x39,0x39,0x39,
0x39,0x3a,0x3a,0x3b,0x3a,0x38,0x36,0x36,0x35,0x36,0x36,0x36,0x36,0x37,0x36,0x34,
0x34,0x36,0x36,0x36,0x35,0x36,0x35,0x36,0x36,0x36,0x37,0x38,0x38,0x3b,0x3c,0x3c,
0x3b,0x39,0x38,0x38,0x39,0x39,0x38,0x38,0x39,0x3a,0x3b,0x39,0x39,0x3a,0x3a,0x39,
0x38,0x39,0x38,0x36,0x35,0x34,0x36,0x38,0x39,0x3a,0x39,0x39,0x37,0x39,0x3a,0x3c,
0x3c,0x3b,0x3a,0x39,0x38,0x38,0x38,0x38,0x37,0x38,0x38,0x35,0x34,0x36,0x39,0x39,
0x38,0x37,0x36,0x36,0x35,0x34,0x34,0x34,0x36,0x38,0x37,0x36,0x36,0x38,0x38,0x37,
0x35,0x36,0x36,0x36,0x36,0x37,0x38,0x37,0x36,0x38,0x38,0x38,0x36,0x37,0x38,0x38,
0x37,0x37,0x37,0x39,0x3a,0x3a,0x3a,0x3a,0x3a,0x3c,0x3b,0x38,0x36,0x36,0x36,0x36,
0x34,0x33,0x34,0x38,0x38,0x37,0x37,0x36,0x36,0x39,0x37,0x36,0x35,0x36,0x36,0x35,
0x33,0x34,0x36,0x38,0x38,0x37,0x36,0x36,0x36,0x35,0x33,0x32,0x34,0x36,0x37,0x37,
0x36,0x34,0x35,0x36,0x36,0x35,0x35,0x34,0x34,0x36,0x37,0x36,0x38,0x39,0x39,0x3b,
0x39,0x38,0x37,0x39,0x38,0x36,0x34,0x36,0x36,0x35,0x33,0x33,0x33,0x36,0x35,0x36,
0x34,0x34,0x36,0x36,0x36,0x36,0x34,0x34,0x34,0x35,0x36,0x34,0x36,0x36,0x38,0x39,
0x38,0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x37,0x36,0x34,0x36,0x36,0x35,0x34,0x34,
0x34,0x34,0x35,0x36,0x36,0x36,0x35,0x33,0x34,0x36,0x36,0x38,0x37,0x36,0x36,0x37,
0x37,0x37,0x35,0x33,0x31,0x31,0x31,0x31,0x33,0x34,0x33,0x33,0x33,0x35,0x37,0x36,
0x36,0x36,0x35,0x35,0x35,0x36,0x37,0x38,0x37,0x36,0x35,0x34,0x34,0x36,0x37,0x37,
0x36,0x37,0x36,0x34,0x34,0x35,0x34,0x34,0x33,0x33,0x34,0x35,0x34,0x35,0x36,0x37,
0x36,0x37,0x37,0x38,0x39,0x39,0x37,0x38,0x38,0x37,0x36,0x35,0x33,0x34,0x34,0x34,
0x32,0x33,0x31,0x30,0x33,0x35,0x34,0x36,0x34,0x33,0x34,0x34,0x34,0x34,0x33,0x33,
0x34,0x34,0x34,0x31,0x30,0x2f,0x31,0x31,0x2f,0x2f,0x30,0x33,0x33,0x35,0x35,0x37,
0x39,0x39,0x36,0x35,0x35,0x38,0x38,0x37,0x34,0x31,0x30,0x31,0x31,0x36,0x38,0x38,
0x38,0x38,0x36,0x36,0x36,0x38,0x39,0x39,0x37,0x34,0x34,0x31,0x31,0x33,0x34,0x35,
0x36,0x36,0x36,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x37,0x36,0x34,0x34,0x33,0x33,
0x33,0x32,0x31,0x33,0x31,0x33,0x35,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x39,0x36,
0x34,0x34,0x34,0x37,0x36,0x35,0x36,0x34,0x33,0x34,0x35,0x36,0x37,0x36,0x34,0x34,
0x34,0x35,0x36,0x36,0x34,0x35,0x37,0x37,0x37,0x39,0x39,0x39,0x39,0x38,0x38,0x38,
0x36,0x35,0x36,0x36,0x36,0x35,0x33,0x33,0x32,0x34,0x34,0x34,0x34,0x34,0x33,0x34,
0x34,0x36,0x37,0x39,0x39,0x39,0x38,0x38,0x37,0x39,0x38,0x36,0x37,0x36,0x34,0x34,
0x34,0x34,0x35,0x36,0x36,0x36,0x34,0x33,0x34,0x38,0x39,0x3a,0x38,0x37,0x35,0x35,
0x34,0x34,0x33,0x34,0x34,0x35,0x34,0x34,0x36,0x39,0x3a,0x39,0x38,0x39,0x38,0x38,
0x36,0x36,0x37,0x37,0x36,0x36,0x36,0x35,0x36,0x37,0x38,0x34,0x36,0x34,0x33,0x33,
0x33,0x34,0x36,0x37,0x36,0x38,0x36,0x35,0x34,0x34,0x34,0x36,0x36,0x37,0x36,0x36,
0x34,0x34,0x34,0x36,0x38,0x39,0x36,0x33,0x32,0x34,0x34,0x36,0x36,0x36,0x36,0x34,
0x34,0x34,0x34,0x34,0x36,0x37,0x36,0x34,0x36,0x37,0x36,0x37,0x36,0x37,0x38,0x36,
0x35,0x34,0x34,0x33,0x31,0x31,0x2f,0x30,0x31,0x33,0x35,0x36,0x34,0x34,0x34,0x35,
0x34,0x36,0x36,0x37,0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x37,0x37,0x38,0x36,0x36,
0x36,0x36,0x36,0x36,0x36,0x35,0x33,0x33,0x31,0x31,0x2f,0x31,0x33,0x36,0x37,0x36,
0x35,0x36,0x36,0x36,0x37,0x39,0x38,0x39,0x38,0x37,0x38,0x38,0x36,0x36,0x34,0x34,
0x34,0x34,0x34,0x34,0x35,0x36,0x37,0x38,0x36,0x35,0x34,0x33,0x31,0x33,0x34,0x35,
0x34,0x33,0x33,0x35,0x36,0x38,0x38,0x38,0x36,0x34,0x33,0x32,0x33,0x34,0x34,0x31,
0x31,0x31,0x33,0x32,0x33,0x34,0x36,0x37,0x37,0x36,0x39,0x38,0x36,0x36,0x36,0x37,
0x36,0x34,0x31,0x31,0x31,0x32,0x31,0x33,0x33,0x34,0x33,0x34,0x34,0x36,0x36,0x37,
0x37,0x37,0x36,0x37,0x35,0x34,0x36,0x34,0x33,0x31,0x30,0x31,0x33,0x37,0x39,0x38,
0x39,0x38,0x36,0x36,0x35,0x35,0x36,0x33,0x31,0x33,0x34,0x34,0x33,0x34,0x34,0x35,
0x36,0x36,0x36,0x36,0x34,0x34,0x35,0x36,0x37,0x38,0x36,0x34,0x34,0x34,0x34,0x36,
0x36,0x35,0x34,0x35,0x34,0x34,0x36,0x36,0x37,0x39,0x38,0x38,0x37,0x36,0x34,0x34,
0x32,0x31,0x31,0x32,0x30,0x33,0x34,0x38,0x38,0x39,0x38,0x38,0x38,0x38,0x37,0x36,
0x32,0x30,0x30,0x30,0x30,0x31,0x30,0x2f,0x2f,0x30,0x31,0x34,0x34,0x36,0x36,0x37,
0x35,0x36,0x39,0x39,0x37,0x38,0x36,0x36,0x38,0x38,0x36,0x35,0x35,0x35,0x33,0x34,
0x34,0x34,0x34,0x34,0x33,0x34,0x35,0x35,0x36,0x37,0x37,0x37,0x36,0x36,0x36,0x38,
0x37,0x37,0x34,0x33,0x32,0x33,0x31,0x2f,0x31,0x33,0x33,0x34,0x34,0x34,0x35,0x34,
0x33,0x35,0x36,0x36,0x34,0x34,0x33,0x33,0x36,0x38,0x38,0x39,0x37,0x35,0x34,0x34,
0x34,0x36,0x35,0x34,0x33,0x32,0x33,0x34,0x36,0x38,0x38,0x38,0x38,0x38,0x39,0x39,
0x39,0x3a,0x39,0x38,0x36,0x35,0x35,0x36,0x34,0x33,0x30,0x34,0x34,0x36,0x38,0x38,
0x37,0x37,0x36,0x36,0x38,0x39,0x39,0x39,0x37,0x34,0x34,0x35,0x36,0x37,0x37,0x35,
0x34,0x35,0x35,0x34,0x34,0x35,0x34,0x36,0x36,0x36,0x36,0x36,0x34,0x35,0x35,0x34,
0x34,0x36,0x37,0x38,0x38,0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x37,0x34,0x34,0x33,
0x31,0x33,0x34,0x36,0x36,0x36,0x35,0x34,0x33,0x32,0x34,0x36,0x34,0x35,0x34,0x33,
0x31,0x31,0x30,0x31,0x33,0x34,0x33,0x33,0x31,0x33,0x34,0x36,0x36,0x36,0x34,0x34,
0x35,0x37,0x38,0x39,0x36,0x36,0x35,0x34,0x33,0x33,0x34,0x35,0x34,0x36,0x35,0x36,
0x38,0x38,0x37,0x38,0x37,0x37,0x36,0x36,0x35,0x35,0x35,0x35,0x34,0x37,0x37,0x36,
0x36,0x36,0x33,0x31,0x2f,0x2e,0x2f,0x33,0x33,0x33,0x32,0x31,0x31,0x34,0x34,0x34,
0x34,0x35,0x33,0x33,0x33,0x34,0x36,0x34,0x34,0x36,0x37,0x38,0x37,0x37,0x37,0x39,
0x3b,0x3b,0x36,0x37,0x34,0x33,0x31,0x32,0x31,0x35,0x33,0x31,0x31,0x34,0x37,0x3b,
0x3b,0x3b,0x3a,0x38,0x36,0x32,0x32,0x34,0x35,0x35,0x33,0x31,0x31,0x31,0x31,0x34,
// Line 14
0x38,0x39,0x3a,0x3c,0x3b,0x39,0x36,0x36,0x37,0x39,0x3b,0x3c,0x3b,0x3a,0x39,0x38,
0x38,0x39,0x3a,0x3a,0x37,0x36,0x36,0x35,0x33,0x35,0x36,0x37,0x37,0x36,0x36,0x36,
0x37,0x39,0x3a,0x3b,0x3a,0x39,0x38,0x36,0x34,0x35,0x36,0x36,0x36,0x37,0x39,0x3b,
0x43,0x49,0x50,0x58,0x60,0x69,0x71,0x79,0x7f,0x89,0x8d,0x91,0x93,0x94,0x95,0x98,
0x99,0x98,0x97,0x95,0x94,0x97,0x98,0x99,0x99,0x98,0x95,0x8f,0x89,0x82,0x7a,0x73,
0x68,0x5c,0x51,0x4a,0x45,0x41,0x3f,0x3c,0x38,0x37,0x36,0x35,0x38,0x3a,0x38,0x38,
0x38,0x37,0x37,0x36,0x34,0x36,0x39,0x3d,0x3f,0x43,0x49,0x51,0x5d,0x68,0x72,0x7c,
0x84,0x8b,0x90,0x93,0x93,0x96,0x97,0x98,0x98,0x97,0x96,0x94,0x93,0x93,0x94,0x97,
0x98,0x97,0x94,0x91,0x8b,0x86,0x80,0x79,0x71,0x67,0x5a,0x50,0x47,0x41,0x3f,0x3e,
0x3c,0x3a,0x3b,0x3a,0x39,0x3d,0x3e,0x3d,0x3e,0x3c,0x39,0x37,0x36,0x36,0x38,0x39,
0x3b,0x3e,0x41,0x46,0x4e,0x5a,0x68,0x72,0x7b,0x84,0x8c,0x92,0x96,0x99,0x9c,0x9b,
0x99,0x98,0x97,0x98,0x96,0x94,0x94,0x97,0x98,0x98,0x98,0x9b,0x97,0x91,0x8a,0x82,
0x7a,0x71,0x67,0x5d,0x54,0x4a,0x41,0x39,0x39,0x36,0x35,0x37,0x36,0x36,0x37,0x39,
0x39,0x3c,0x3e,0x40,0x40,0x41,0x40,0x3f,0x3e,0x41,0x43,0x47,0x4a,0x53,0x5e,0x6a,
0x72,0x7b,0x82,0x8a,0x90,0x94,0x98,0x9b,0x9a,0x99,0x98,0x97,0x98,0x98,0x98,0x98,
0x97,0x98,0x97,0x94,0x95,0x90,0x8b,0x87,0x80,0x79,0x71,0x68,0x5e,0x56,0x4d,0x47,
0x42,0x40,0x3d,0x3b,0x39,0x39,0x3a,0x3c,0x3c,0x3c,0x3e,0x40,0x40,0x41,0x3e,0x3c,
0x3c,0x3e,0x40,0x43,0x45,0x4c,0x55,0x60,0x6a,0x73,0x7d,0x85,0x8b,0x91,0x94,0x95,
0x97,0x98,0x96,0x95,0x94,0x96,0x97,0x98,0x98,0x98,0x98,0x99,0x99,0x98,0x95,0x90,
0x8a,0x81,0x77,0x6d,0x62,0x5b,0x55,0x4e,0x48,0x42,0x3d,0x39,0x37,0x39,0x3a,0x3c,
0x3b,0x3b,0x3a,0x3b,0x3a,0x3b,0x3e,0x3e,0x3e,0x3f,0x3f,0x41,0x44,0x4a,0x50,0x58,
0x61,0x6b,0x74,0x81,0x85,0x8b,0x91,0x96,0x98,0x9b,0x9b,0x9a,0x9b,0x9b,0x9a,0x99,
0x98,0x99,0x99,0x9a,0x9a,0x98,0x95,0x91,0x8b,0x85,0x7e,0x76,0x6d,0x66,0x5d,0x55,
0x4c,0x47,0x43,0x43,0x41,0x40,0x3e,0x3e,0x3a,0x3c,0x39,0x38,0x3b,0x3e,0x3e,0x3f,
0x3c,0x3c,0x3c,0x3e,0x40,0x45,0x4c,0x51,0x58,0x5f,0x66,0x70,0x7a,0x83,0x8c,0x93,
0x95,0x94,0x93,0x95,0x97,0x9b,0x9c,0x9d,0x9b,0x98,0x94,0x94,0x96,0x98,0x98,0x99,
0x91,0x89,0x82,0x7c,0x75,0x6f,0x66,0x5c,0x53,0x4b,0x44,0x41,0x3e,0x3d,0x3c,0x3c,
0x3b,0x3c,0x40,0x3e,0x3d,0x3c,0x3a,0x3a,0x39,0x39,0x3b,0x3d,0x3d,0x3e,0x3c,0x3e,
0x3d,0x3c,0x3c,0x3e,0x3d,0x3e,0x39,0x38,0x3a,0x3b,0x3a,0x3e,0x3d,0x3e,0x3e,0x3f,
0x3f,0x3f,0x3f,0x3e,0x3d,0x3e,0x3e,0x3c,0x3c,0x3b,0x3a,0x3a,0x39,0x39,0x39,0x37,
0x36,0x3a,0x3c,0x3d,0x3c,0x3d,0x3c,0x3d,0x3c,0x3d,0x3d,0x3e,0x3b,0x39,0x39,0x39,
0x3a,0x3c,0x3b,0x3c,0x3c,0x3d,0x3d,0x3d,0x3d,0x3e,0x3d,0x3d,0x3a,0x39,0x3a,0x38,
0x36,0x39,0x3a,0x3a,0x3a,0x3a,0x37,0x37,0x37,0x3a,0x3c,0x3d,0x3c,0x3b,0x39,0x37,
0x37,0x3a,0x3c,0x3f,0x44,0x4a,0x50,0x58,0x60,0x6a,0x76,0x80,0x89,0x90,0x94,0x95,
0x95,0x96,0x98,0x99,0x99,0x99,0x99,0x99,0x97,0x95,0x98,0x99,0x98,0x99,0x97,0x97,
0x95,0x97,0x96,0x97,0x98,0x99,0x99,0x99,0x98,0x97,0x98,0x9a,0x98,0x98,0x97,0x97,
0x99,0x9b,0x9b,0x9c,0x9a,0x9b,0x9b,0x9c,0x9c,0x9c,0x9a,0x99,0x98,0x99,0x99,0x9a,
0x9a,0x99,0x97,0x98,0x98,0x9a,0x9b,0x9d,0x9a,0x9a,0x98,0x98,0x98,0x99,0x98,0x97,
0x97,0x98,0x96,0x96,0x94,0x95,0x98,0x99,0x98,0x98,0x96,0x97,0x98,0x99,0x98,0x99,
0x9a,0x9a,0x9a,0x98,0x96,0x96,0x97,0x97,0x97,0x98,0x98,0x99,0x99,0x99,0x98,0x98,
0x99,0x9a,0x98,0x96,0x8f,0x87,0x81,0x7a,0x71,0x69,0x60,0x57,0x51,0x4b,0x43,0x3e,
0x3b,0x3b,0x3e,0x40,0x3e,0x3e,0x3e,0x3c,0x3a,0x3b,0x3c,0x3b,0x3a,0x39,0x37,0x37,
0x37,0x3b,0x3e,0x3e,0x3d,0x3e,0x3e,0x3e,0x3d,0x3e,0x3e,0x3f,0x3e,0x3e,0x3b,0x3c,
0x3b,0x3b,0x3c,0x3c,0x38,0x38,0x38,0x36,0x36,0x37,0x39,0x3b,0x3b,0x3b,0x3a,0x3a,
0x3a,0x3a,0x3a,0x3b,0x3a,0x3c,0x3a,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x39,0x3b,
0x3b,0x3d,0x3e,0x3f,0x3e,0x3d,0x3b,0x3a,0x3c,0x3c,0x3b,0x39,0x37,0x37,0x37,0x39,
0x3b,0x3a,0x3b,0x3a,0x3a,0x3d,0x3c,0x3b,0x3c,0x3c,0x3b,0x3b,0x3c,0x3d,0x3e,0x3d,
0x3a,0x3a,0x39,0x3a,0x3a,0x3a,0x3c,0x40,0x47,0x4e,0x56,0x5f,0x66,0x6f,0x77,0x7f,
0x86,0x8d,0x90,0x93,0x95,0x96,0x96,0x93,0x96,0x96,0x96,0x97,0x98,0x99,0x9a,0x99,
0x96,0x96,0x96,0x96,0x96,0x98,0x98,0x99,0x99,0x9a,0x9a,0x9b,0x9a,0x9c,0x9d,0x9c,
0x99,0x99,0x98,0x98,0x99,0x9a,0x98,0x96,0x93,0x94,0x95,0x96,0x96,0x98,0x98,0x97,
0x96,0x97,0x99,0x9a,0x9b,0x9a,0x98,0x98,0x98,0x98,0x97,0x96,0x94,0x96,0x96,0x97,
0x95,0x98,0x97,0x99,0x9a,0x9a,0x9a,0x9a,0x99,0x99,0x9a,0x9a,0x9a,0x99,0x98,0x97,
0x97,0x98,0x98,0x99,0x9b,0x9c,0x9b,0x9c,0x9b,0x9a,0x99,0x98,0x97,0x99,0x9a,0x9a,
0x99,0x99,0x98,0x97,0x96,0x98,0x99,0x9a,0x98,0x96,0x95,0x96,0x96,0x98,0x9a,0x9b,
0x9d,0x9d,0x9c,0x9b,0x9a,0x9b,0x9a,0x99,0x97,0x96,0x95,0x95,0x96,0x98,0x97,0x97,
0x97,0x99,0x9a,0x9c,0x9b,0x9c,0x9c,0x9a,0x97,0x98,0x98,0x98,0x97,0x99,0x98,0x98,
0x99,0x9b,0x9b,0x9d,0x9b,0x9a,0x9b,0x9a,0x98,0x97,0x95,0x93,0x91,0x93,0x93,0x91,
0x8f,0x8b,0x85,0x7f,0x76,0x6e,0x65,0x5c,0x52,0x4d,0x49,0x46,0x41,0x3e,0x3a,0x39,
0x39,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x39,0x3a,0x3d,0x40,0x40,0x3e,0x3c,0x39,0x38,
0x38,0x3a,0x3c,0x3d,0x3a,0x39,0x39,0x3a,0x3b,0x3d,0x3c,0x3d,0x3d,0x3d,0x3a,0x3b,
0x3c,0x40,0x41,0x3e,0x3b,0x3a,0x3a,0x38,0x36,0x36,0x36,0x36,0x39,0x3a,0x3a,0x3a,
0x39,0x39,0x3a,0x39,0x38,0x37,0x36,0x36,0x36,0x37,0x37,0x35,0x39,0x3a,0x3a,0x3b,
0x3a,0x3b,0x3d,0x3e,0x3d,0x3d,0x3c,0x3c,0x3c,0x3c,0x3b,0x3b,0x3a,0x3a,0x38,0x37,
0x36,0x37,0x3a,0x3b,0x3c,0x3c,0x3c,0x3d,0x3e,0x40,0x40,0x3f,0x3e,0x3a,0x3a,0x3a,
0x39,0x39,0x3c,0x3f,0x44,0x4b,0x53,0x5d,0x68,0x73,0x7c,0x85,0x8c,0x93,0x96,0x97,
0x97,0x99,0x9a,0x9a,0x98,0x97,0x97,0x98,0x98,0x9a,0x9d,0x9e,0x9d,0x9c,0x9b,0x9b,
0x9a,0x9a,0x99,0x97,0x97,0x97,0x96,0x95,0x97,0x96,0x95,0x96,0x97,0x99,0x9c,0x9c,
0x9b,0x9d,0x9c,0x9c,0x9b,0x9a,0x99,0x99,0x9a,0x9a,0x9a,0x9a,0x98,0x98,0x99,0x99,
0x98,0x99,0x9a,0x9a,0x98,0x97,0x96,0x98,0x97,0x97,0x97,0x98,0x98,0x99,0x97,0x95,
0x95,0x97,0x97,0x98,0x9b,0x9a,0x98,0x97,0x96,0x97,0x99,0x9a,0x9a,0x9b,0x9a,0x9a,
0x98,0x99,0x9a,0x9c,0x9e,0x9e,0x9c,0x9b,0x98,0x98,0x97,0x98,0x97,0x98,0x96,0x95,
0x96,0x98,0x98,0x97,0x93,0x8d,0x84,0x7c,0x72,0x69,0x61,0x58,0x4e,0x49,0x43,0x40,
0x3e,0x3e,0x3e,0x3f,0x3e,0x3e,0x3c,0x3b,0x3b,0x3c,0x3f,0x40,0x3e,0x41,0x3e,0x3a,
0x3a,0x3c,0x3c,0x3c,0x3a,0x39,0x38,0x37,0x39,0x3a,0x3c,0x3c,0x3b,0x3a,0x37,0x36,
0x38,0x39,0x3a,0x3d,0x3d,0x3d,0x3c,0x3c,0x3b,0x3d,0x3e,0x3f,0x3d,0x3b,0x3a,0x39,
0x3a,0x3a,0x39,0x3a,0x39,0x38,0x39,0x39,0x39,0x39,0x3b,0x3c,0x3e,0x3e,0x3d,0x3c,
0x3d,0x3c,0x3a,0x3b,0x3a,0x39,0x3a,0x39,0x39,0x3a,0x39,0x3a,0x3b,0x3c,0x3a,0x3a,
0x3a,0x39,0x39,0x3a,0x3b,0x3c,0x3e,0x3e,0x3d,0x3c,0x39,0x37,0x36,0x34,0x35,0x33,
0x35,0x34,0x33,0x35,0x36,0x37,0x3c,0x43,0x49,0x51,0x59,0x61,0x69,0x71,0x7a,0x84,
0x8c,0x90,0x93,0x94,0x93,0x93,0x94,0x96,0x98,0x99,0x97,0x96,0x96,0x96,0x96,0x99,
0x9a,0x9a,0x99,0x98,0x97,0x97,0x97,0x97,0x97,0x98,0x98,0x96,0x98,0x98,0x98,0x9a,
0x9c,0x9b,0x9b,0x9c,0x9b,0x9c,0x9a,0x9a,0x99,0x98,0x96,0x96,0x98,0x9a,0x9a,0x9a,
0x9a,0x9a,0x9a,0x9a,0x9a,0x9c,0x9a,0x99,0x98,0x97,0x96,0x96,0x95,0x94,0x95,0x97,
0x97,0x96,0x96,0x96,0x96,0x97,0x97,0x98,0x99,0x99,0x99,0x9a,0x9a,0x9a,0x9a,0x9a,
0x99,0x99,0x9a,0x9d,0x9e,0x9d,0x9d,0x9a,0x9a,0x9a,0x9a,0x9b,0x98,0x97,0x94,0x93,
0x93,0x93,0x94,0x95,0x96,0x97,0x95,0x8f,0x8b,0x84,0x7c,0x76,0x6e,0x64,0x5b,0x53,
0x4a,0x45,0x40,0x40,0x3e,0x3e,0x3c,0x3b,0x3a,0x3b,0x3a,0x3b,0x3b,0x3c,0x3d,0x3d,
0x3d,0x3e,0x3e,0x3e,0x3e,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,0x3a,0x3a,0x3b,0x3a,
0x3a,0x3e,0x3f,0x3f,0x3f,0x3c,0x3a,0x3c,0x3b,0x3c,0x3c,0x3c,0x39,0x38,0x39,0x3a,
0x3b,0x3c,0x3d,0x3c,0x3c,0x3b,0x3a,0x3b,0x3a,0x39,0x39,0x3a,0x39,0x3a,0x3a,0x3b,
0x3b,0x3c,0x3d,0x3e,0x3f,0x3e,0x3d,0x3d,0x3c,0x3b,0x3c,0x3c,0x37,0x38,0x38,0x38,
0x37,0x38,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x39,0x39,0x3a,0x3b,0x3a,0x3c,0x3a,0x39,
0x39,0x3a,0x3a,0x3a,0x39,0x39,0x39,0x39,0x38,0x38,0x37,0x37,0x37,0x39,0x38,0x39,
0x39,0x39,0x3a,0x3c,0x3c,0x3e,0x3c,0x3e,0x3a,0x39,0x37,0x36,0x36,0x38,0x39,0x38,
0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,0x38,0x37,0x36,0x36,0x37,0x39,
// Line 15
0x39,0x3b,0x39,0x38,0x37,0x39,0x38,0x39,0x38,0x38,0x39,0x39,0x38,0x39,0x3a,0x3b,
0x3b,0x3b,0x3a,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x38,0x39,0x38,0x37,0x38,0x38,0x38,
0x36,0x34,0x34,0x36,0x38,0x3c,0x3d,0x3d,0x3b,0x39,0x38,0x37,0x38,0x3c,0x3d,0x3b,
0x38,0x36,0x34,0x39,0x46,0x59,0x6f,0x7e,0x84,0x80,0x76,0x68,0x5c,0x5e,0x67,0x73,
0x7b,0x7c,0x77,0x6f,0x66,0x60,0x60,0x65,0x6d,0x75,0x7a,0x7a,0x75,0x70,0x68,0x64,
0x64,0x67,0x6d,0x74,0x79,0x79,0x75,0x6c,0x63,0x5d,0x5a,0x60,0x69,0x73,0x79,0x76,
0x73,0x6b,0x63,0x62,0x64,0x6a,0x72,0x77,0x79,0x77,0x70,0x6b,0x66,0x63,0x62,0x68,
0x70,0x76,0x7a,0x79,0x74,0x6c,0x66,0x61,0x62,0x68,0x70,0x77,0x7b,0x7b,0x75,0x6c,
0x64,0x62,0x65,0x6b,0x70,0x72,0x75,0x75,0x76,0x7e,0x88,0x93,0xa1,0xa8,0xaa,0xa8,
0xa0,0x96,0x87,0x78,0x68,0x60,0x5b,0x56,0x51,0x4a,0x43,0x3c,0x3a,0x40,0x4c,0x61,
0x75,0x84,0x8d,0x90,0x91,0x94,0x98,0x9e,0xa2,0xa2,0x9d,0x91,0x81,0x71,0x64,0x5f,
0x5f,0x63,0x6a,0x70,0x78,0x81,0x88,0x8f,0x96,0x9e,0xa4,0xa7,0xa6,0xa3,0x9b,0x99,
0x98,0x98,0x9c,0x9d,0x96,0x8b,0x78,0x65,0x58,0x55,0x5a,0x66,0x70,0x79,0x7a,0x75,
0x6d,0x66,0x62,0x64,0x69,0x74,0x7b,0x7e,0x7b,0x74,0x6b,0x65,0x63,0x68,0x6f,0x76,
0x7b,0x7b,0x75,0x6c,0x63,0x61,0x65,0x6c,0x73,0x78,0x7a,0x7a,0x70,0x67,0x61,0x5e,
0x5c,0x59,0x53,0x49,0x3d,0x33,0x2c,0x2a,0x2b,0x31,0x3b,0x47,0x53,0x61,0x6e,0x77,
0x7a,0x78,0x6f,0x65,0x5e,0x5f,0x66,0x72,0x7a,0x7c,0x77,0x6f,0x64,0x5f,0x62,0x6b,
0x75,0x7f,0x81,0x7b,0x73,0x6d,0x67,0x63,0x60,0x5b,0x54,0x4b,0x3e,0x32,0x2b,0x28,
0x2b,0x30,0x39,0x44,0x52,0x60,0x6d,0x77,0x7b,0x7a,0x72,0x68,0x60,0x62,0x6b,0x77,
0x7e,0x7e,0x77,0x6e,0x64,0x60,0x64,0x6e,0x78,0x7f,0x7f,0x79,0x71,0x6c,0x66,0x62,
0x5f,0x5c,0x53,0x48,0x3b,0x31,0x2c,0x2f,0x32,0x37,0x40,0x49,0x55,0x64,0x70,0x79,
0x7d,0x7a,0x6f,0x64,0x5b,0x5d,0x65,0x70,0x7a,0x7e,0x7b,0x72,0x64,0x5d,0x5d,0x65,
0x71,0x7a,0x7c,0x77,0x6e,0x66,0x63,0x63,0x63,0x5e,0x59,0x4f,0x43,0x3a,0x32,0x2d,
0x2e,0x31,0x39,0x46,0x54,0x64,0x73,0x79,0x77,0x71,0x69,0x63,0x5e,0x5a,0x53,0x48,
0x3c,0x33,0x32,0x3e,0x53,0x6c,0x83,0x8b,0x87,0x7b,0x69,0x59,0x51,0x4e,0x4a,0x42,
0x38,0x30,0x2c,0x2e,0x33,0x3d,0x48,0x4e,0x55,0x60,0x6b,0x79,0x88,0x94,0x98,0x9e,
0xa2,0xa8,0xac,0xaa,0xa3,0x97,0x86,0x76,0x6a,0x63,0x62,0x67,0x6f,0x76,0x7b,0x82,
0x89,0x93,0x9b,0xa0,0x9e,0x93,0x7f,0x6a,0x59,0x55,0x58,0x63,0x71,0x7c,0x7e,0x7a,
0x6e,0x66,0x62,0x66,0x6b,0x72,0x77,0x7b,0x7b,0x82,0x8a,0x97,0xa1,0xa2,0x97,0x84,
0x6c,0x5a,0x54,0x59,0x68,0x79,0x83,0x84,0x7c,0x72,0x6a,0x66,0x66,0x6a,0x6d,0x72,
0x75,0x7b,0x84,0x8e,0x97,0x9e,0x9b,0x90,0x7e,0x6a,0x56,0x4a,0x42,0x3e,0x38,0x39,
0x36,0x35,0x36,0x39,0x3b,0x40,0x48,0x54,0x63,0x74,0x82,0x8f,0x97,0x9b,0x9a,0x93,
0x87,0x7b,0x6b,0x5b,0x4c,0x43,0x3d,0x3c,0x3c,0x3d,0x3c,0x3c,0x3a,0x3e,0x43,0x4c,
0x55,0x63,0x70,0x7e,0x88,0x91,0x97,0x9c,0xa0,0xa3,0xa3,0xa2,0x9b,0x91,0x83,0x74,
0x65,0x5e,0x5d,0x61,0x6a,0x75,0x7e,0x84,0x8a,0x91,0x98,0xa3,0xa8,0xad,0xaa,0xa3,
0x9c,0x98,0x97,0x99,0x9d,0x9e,0x95,0x88,0x74,0x64,0x5a,0x59,0x5e,0x67,0x73,0x7d,
0x82,0x8b,0x91,0x99,0xa0,0x9e,0x94,0x83,0x6f,0x5e,0x58,0x5d,0x6b,0x7a,0x83,0x84,
0x7b,0x6e,0x5f,0x58,0x5b,0x67,0x72,0x7a,0x77,0x70,0x66,0x60,0x5d,0x5f,0x60,0x5f,
0x53,0x42,0x32,0x30,0x3e,0x58,0x72,0x84,0x89,0x81,0x73,0x64,0x5a,0x5a,0x64,0x6d,
0x74,0x78,0x7b,0x7e,0x8b,0x96,0x9b,0x98,0x8a,0x77,0x62,0x52,0x45,0x3f,0x3d,0x3e,
0x3b,0x38,0x34,0x37,0x3b,0x3f,0x3f,0x3c,0x36,0x32,0x33,0x3b,0x44,0x52,0x60,0x6e,
0x7b,0x86,0x8f,0x93,0x93,0x90,0x86,0x77,0x68,0x5b,0x55,0x4c,0x42,0x3d,0x3c,0x3e,
0x46,0x52,0x61,0x74,0x82,0x8b,0x8f,0x92,0x97,0x9d,0xa3,0xa7,0xa4,0x9c,0x8d,0x7b,
0x6b,0x60,0x58,0x53,0x4b,0x44,0x3e,0x39,0x3b,0x45,0x53,0x64,0x75,0x85,0x90,0x97,
0x9b,0x9e,0xa0,0xa4,0xa4,0xa4,0xa2,0x9e,0x98,0x97,0x97,0x98,0x9b,0x9d,0x9d,0x9c,
0x9c,0x9e,0x9f,0xa0,0x9e,0x9b,0x94,0x89,0x7a,0x6c,0x61,0x5c,0x5e,0x66,0x6f,0x77,
0x7f,0x88,0x90,0x99,0xa0,0xa6,0xa7,0xa3,0x9d,0x99,0x97,0x98,0x9b,0x9c,0x98,0x8f,
0x80,0x70,0x61,0x58,0x4e,0x49,0x45,0x40,0x39,0x35,0x31,0x32,0x39,0x3f,0x40,0x3e,
0x37,0x30,0x2f,0x36,0x43,0x58,0x6b,0x79,0x7c,0x75,0x6a,0x5e,0x5a,0x5e,0x6a,0x77,
0x7e,0x7e,0x79,0x70,0x69,0x67,0x65,0x64,0x5c,0x4e,0x3d,0x32,0x30,0x3b,0x49,0x61,
0x75,0x86,0x93,0x9a,0x99,0x99,0x90,0x84,0x77,0x67,0x59,0x50,0x49,0x42,0x3c,0x39,
0x40,0x50,0x65,0x78,0x85,0x89,0x82,0x73,0x62,0x53,0x4b,0x49,0x46,0x40,0x37,0x2e,
0x2a,0x2d,0x34,0x3d,0x47,0x51,0x58,0x62,0x6e,0x7c,0x88,0x91,0x99,0x9d,0xa1,0xa4,
0xa6,0xa7,0xa2,0x9e,0x9b,0x9c,0x9d,0x9f,0xa6,0xa9,0xa7,0xa4,0xa0,0x9f,0xa0,0x9f,
0x9e,0x9c,0x95,0x88,0x79,0x6a,0x5d,0x59,0x5e,0x6a,0x76,0x7f,0x7f,0x78,0x6d,0x65,
0x60,0x62,0x66,0x6c,0x72,0x77,0x7a,0x80,0x8a,0x97,0x9e,0x9b,0x8c,0x76,0x61,0x50,
0x43,0x3f,0x3c,0x3a,0x36,0x34,0x32,0x37,0x3c,0x40,0x40,0x3b,0x32,0x2e,0x2f,0x38,
0x47,0x5b,0x6c,0x77,0x7b,0x76,0x6d,0x62,0x5b,0x55,0x52,0x4e,0x45,0x3b,0x31,0x2d,
0x2c,0x32,0x3b,0x45,0x4d,0x56,0x60,0x6d,0x79,0x84,0x8e,0x95,0x99,0xa1,0xa6,0xa8,
0xa6,0x9c,0x8b,0x7b,0x6b,0x60,0x55,0x54,0x4c,0x43,0x38,0x33,0x34,0x46,0x5a,0x6f,
0x81,0x88,0x82,0x73,0x63,0x5a,0x5c,0x65,0x70,0x7a,0x7c,0x78,0x6e,0x65,0x60,0x62,
0x69,0x70,0x72,0x75,0x76,0x7b,0x83,0x8f,0x9b,0xa5,0xa4,0x99,0x85,0x71,0x60,0x56,
0x57,0x60,0x6d,0x79,0x82,0x8a,0x92,0x98,0x9e,0xa3,0xa5,0xa4,0x9f,0x95,0x88,0x76,
0x6b,0x60,0x56,0x4e,0x47,0x40,0x3d,0x35,0x30,0x31,0x35,0x3a,0x3f,0x40,0x3b,0x37,
0x33,0x35,0x3b,0x48,0x57,0x67,0x75,0x80,0x88,0x8f,0x95,0x9a,0x9b,0x93,0x81,0x6e,
0x5d,0x59,0x60,0x6d,0x7b,0x84,0x82,0x79,0x6b,0x61,0x5f,0x64,0x6b,0x6e,0x6e,0x70,
0x76,0x80,0x8e,0x99,0x9e,0x9c,0x90,0x7c,0x64,0x55,0x4b,0x44,0x40,0x3e,0x3d,0x41,
0x49,0x58,0x68,0x77,0x84,0x8f,0x91,0x94,0x97,0x9d,0xa2,0xa4,0xa0,0x96,0x89,0x7b,
0x6a,0x5c,0x51,0x49,0x42,0x40,0x3d,0x3a,0x38,0x38,0x38,0x39,0x3b,0x40,0x49,0x54,
0x5f,0x6c,0x78,0x84,0x8b,0x99,0x9f,0xa3,0xa4,0xa4,0xa2,0x9f,0x9c,0x9c,0x9d,0x9f,
0xa0,0xa0,0xa2,0xa2,0xa3,0xa0,0x95,0x85,0x74,0x66,0x5d,0x5c,0x61,0x6c,0x78,0x7f,
0x86,0x8f,0x97,0x9e,0x9f,0x9b,0x90,0x80,0x6c,0x5c,0x53,0x5a,0x63,0x6e,0x7c,0x88,
0x8f,0x95,0x97,0x96,0x91,0x88,0x7c,0x6a,0x58,0x49,0x3f,0x3c,0x3b,0x3c,0x3b,0x39,
0x36,0x35,0x37,0x3f,0x4d,0x5e,0x6d,0x78,0x7a,0x77,0x6d,0x63,0x5d,0x60,0x67,0x70,
0x74,0x7b,0x7f,0x85,0x90,0x9c,0xa4,0xa4,0x99,0x87,0x72,0x60,0x59,0x59,0x63,0x70,
0x7c,0x86,0x8d,0x92,0x98,0x9e,0xa0,0xa2,0xa0,0x9f,0x9a,0x91,0x81,0x71,0x64,0x5d,
0x5d,0x66,0x71,0x7c,0x7f,0x7b,0x72,0x6a,0x64,0x60,0x5d,0x54,0x48,0x3b,0x31,0x32,
0x40,0x55,0x6d,0x7e,0x8b,0x93,0x97,0x99,0x99,0x95,0x8e,0x7c,0x68,0x5b,0x57,0x5c,
0x69,0x77,0x80,0x81,0x77,0x6b,0x5e,0x5d,0x60,0x6b,0x74,0x7a,0x79,0x73,0x6b,0x65,
0x63,0x63,0x60,0x5b,0x4e,0x41,0x36,0x34,0x3c,0x4d,0x63,0x7a,0x8a,0x95,0x98,0x95,
0x98,0x9a,0x9b,0x9f,0xa0,0x9e,0x9f,0x9d,0x9b,0x9c,0x98,0x8f,0x80,0x70,0x60,0x53,
0x4a,0x46,0x41,0x3d,0x36,0x32,0x33,0x38,0x3c,0x40,0x41,0x3d,0x38,0x32,0x31,0x38,
0x44,0x53,0x62,0x71,0x7c,0x86,0x8d,0x93,0x99,0xa1,0xa6,0xa7,0xa3,0x9c,0x8e,0x80,
0x72,0x68,0x5c,0x55,0x4b,0x43,0x3b,0x38,0x37,0x45,0x54,0x65,0x77,0x85,0x8f,0x97,
0x97,0x95,0x8f,0x84,0x76,0x67,0x56,0x4a,0x40,0x3a,0x35,0x34,0x3a,0x45,0x55,0x68,
0x78,0x87,0x92,0x98,0x99,0x99,0x93,0x8a,0x7e,0x70,0x63,0x5c,0x5d,0x66,0x6e,0x7c,
0x84,0x8a,0x91,0x97,0x9d,0xa6,0xa7,0xa4,0xa0,0x9c,0x99,0x98,0x99,0x9c,0xa1,0xa3,
0xa3,0xa2,0xa0,0x9f,0x9f,0xa2,0xa2,0xa1,0xa0,0x9e,0x9c,0x9c,0x9a,0x9b,0x9c,0x9f,
0x9f,0xa1,0xa1,0xa2,0xa0,0xa2,0xa2,0x9e,0x96,0x87,0x74,0x66,0x5b,0x5b,0x62,0x6f,
0x79,0x7e,0x7b,0x72,0x68,0x61,0x5c,0x56,0x50,0x48,0x3d,0x35,0x2c,0x2b,0x30,0x38,
0x3e,0x43,0x42,0x3d,0x36,0x31,0x2e,0x30,0x33,0x38,0x36,0x34,0x32,0x33,0x35,0x38,
0x38,0x38,0x33,0x30,0x31,0x3b,0x4a,0x5e,0x71,0x7c,0x7c,0x74,0x6a,0x61,0x5e,0x59,
0x53,0x4a,0x3d,0x34,0x32,0x3e,0x53,0x6e,0x80,0x88,0x82,0x74,0x62,0x56,0x4e,0x4b,
0x45,0x3e,0x34,0x2e,0x2b,0x2c,0x30,0x36,0x3e,0x48,0x53,0x60,0x6d,0x78,0x84,0x8d,
0x95,0x9d,0xa4,0xa8,0xad,0xac,0xa4,0x9f,0x99,0x99,0x9e,0xa3,0xa3,0xa3,0xa0,0x9e,
0x9c,0x9d,0x9f,0xa2,0xa2,0x9b,0x8f,0x80,0x71,0x65,0x5b,0x50,0x46,0x3f,0x3a,0x36,
// Line 16
0x39,0x3b,0x3c,0x3b,0x38,0x36,0x35,0x35,0x36,0x38,0x39,0x3a,0x39,0x37,0x38,0x3a,
0x3b,0x3b,0x3a,0x39,0x39,0x38,0x37,0x36,0x35,0x35,0x34,0x35,0x35,0x34,0x33,0x33,
0x32,0x35,0x36,0x37,0x37,0x38,0x39,0x3a,0x38,0x37,0x36,0x36,0x35,0x38,0x38,0x37,
0x33,0x32,0x31,0x33,0x40,0x54,0x67,0x75,0x7a,0x75,0x6b,0x61,0x5c,0x60,0x69,0x73,
0x7a,0x7c,0x78,0x6f,0x67,0x61,0x61,0x68,0x6e,0x72,0x75,0x73,0x70,0x6c,0x66,0x61,
0x5f,0x62,0x6a,0x73,0x78,0x79,0x75,0x6e,0x63,0x5d,0x5f,0x67,0x6f,0x75,0x77,0x74,
0x6f,0x68,0x62,0x60,0x61,0x65,0x6c,0x74,0x78,0x78,0x74,0x6c,0x65,0x60,0x5f,0x64,
0x6b,0x72,0x74,0x74,0x6f,0x69,0x61,0x60,0x61,0x68,0x70,0x78,0x7b,0x7b,0x75,0x6c,
0x67,0x64,0x63,0x69,0x6b,0x6f,0x72,0x75,0x78,0x7b,0x84,0x91,0x9f,0xab,0xb0,0xae,
0xa4,0x95,0x83,0x73,0x65,0x5e,0x58,0x52,0x49,0x41,0x3a,0x38,0x39,0x42,0x50,0x65,
0x77,0x85,0x8e,0x94,0x98,0x9b,0x9e,0x9e,0x9e,0x9e,0x98,0x8c,0x7e,0x6f,0x61,0x58,
0x57,0x5d,0x68,0x76,0x7f,0x7f,0x78,0x6e,0x64,0x61,0x62,0x69,0x72,0x78,0x78,0x74,
0x6a,0x64,0x61,0x63,0x68,0x6f,0x73,0x75,0x74,0x77,0x7e,0x8a,0x98,0xa4,0xac,0xae,
0xa9,0xa1,0x9a,0x99,0x9a,0x9e,0x9f,0x9b,0x91,0x83,0x73,0x65,0x58,0x4e,0x43,0x3b,
0x35,0x34,0x3b,0x49,0x5d,0x72,0x7f,0x81,0x78,0x6b,0x5f,0x58,0x54,0x50,0x49,0x3f,
0x37,0x36,0x43,0x58,0x6f,0x80,0x83,0x7a,0x6b,0x5c,0x51,0x4e,0x4c,0x49,0x40,0x38,
0x33,0x34,0x39,0x41,0x46,0x49,0x42,0x3a,0x35,0x34,0x35,0x35,0x33,0x31,0x2d,0x35,
0x43,0x58,0x6e,0x7b,0x7b,0x78,0x6d,0x62,0x5f,0x62,0x68,0x70,0x72,0x73,0x78,0x80,
0x8a,0x94,0xa1,0xaa,0xad,0xab,0xa5,0x9e,0x9c,0x9d,0x9e,0xa1,0x9e,0x96,0x89,0x78,
0x66,0x5b,0x56,0x59,0x61,0x6b,0x75,0x82,0x8e,0x97,0x9c,0x9c,0x95,0x88,0x78,0x68,
0x57,0x4d,0x43,0x3a,0x35,0x36,0x3e,0x4d,0x5e,0x72,0x7f,0x83,0x7c,0x6f,0x66,0x5f,
0x57,0x52,0x4a,0x41,0x39,0x35,0x3b,0x4c,0x63,0x7b,0x8b,0x97,0x99,0x98,0x94,0x8e,
0x82,0x7a,0x6a,0x57,0x4a,0x42,0x3e,0x3e,0x3c,0x3b,0x38,0x37,0x37,0x3c,0x42,0x4b,
0x54,0x60,0x6c,0x7a,0x88,0x94,0x9c,0xa3,0xa4,0xa4,0xa4,0xa2,0x9f,0x9d,0x9a,0x99,
0x9a,0x9e,0xa0,0xa3,0xa5,0xa6,0xa4,0xa4,0xa0,0x9f,0xa1,0xa3,0xa2,0xa3,0xa1,0x9f,
0x9e,0x9f,0xa1,0xa1,0x9e,0x96,0x8a,0x7c,0x6e,0x63,0x59,0x51,0x45,0x3e,0x37,0x36,
0x3c,0x4a,0x5a,0x6f,0x7b,0x81,0x7a,0x6c,0x61,0x59,0x55,0x53,0x4c,0x44,0x3b,0x37,
0x3c,0x4c,0x62,0x7b,0x8c,0x96,0x99,0x99,0x9a,0x9c,0x9f,0xa2,0xa3,0xa3,0x9f,0x9b,
0x9e,0x9f,0xa1,0xa3,0xa3,0xa3,0xa1,0x98,0x8a,0x7b,0x6b,0x5d,0x51,0x49,0x42,0x3f,
0x3c,0x39,0x34,0x32,0x33,0x39,0x3f,0x41,0x3e,0x3a,0x33,0x31,0x36,0x43,0x54,0x66,
0x76,0x83,0x8c,0x94,0x98,0x98,0x92,0x89,0x79,0x6b,0x5b,0x4f,0x47,0x41,0x3c,0x3c,
0x3b,0x3d,0x3d,0x40,0x3d,0x3b,0x37,0x33,0x2f,0x32,0x38,0x43,0x52,0x62,0x72,0x82,
0x8d,0x96,0x9c,0x9d,0x95,0x89,0x7a,0x6b,0x5d,0x52,0x49,0x41,0x3a,0x38,0x3c,0x4b,
0x5d,0x71,0x7e,0x81,0x79,0x6c,0x5e,0x57,0x54,0x53,0x4c,0x45,0x3b,0x31,0x2d,0x30,
0x39,0x43,0x48,0x45,0x3d,0x38,0x34,0x37,0x44,0x57,0x68,0x76,0x82,0x8c,0x96,0x9c,
0x9b,0x93,0x85,0x75,0x63,0x55,0x49,0x43,0x40,0x3e,0x37,0x34,0x32,0x35,0x39,0x3d,
0x3d,0x3d,0x38,0x34,0x32,0x38,0x46,0x5a,0x6e,0x7a,0x7b,0x75,0x69,0x5e,0x59,0x5d,
0x65,0x6f,0x74,0x78,0x7d,0x85,0x8e,0x97,0x9f,0xa1,0x97,0x84,0x6f,0x5e,0x57,0x58,
0x60,0x6e,0x7b,0x84,0x8a,0x8f,0x93,0x9a,0xa0,0xa6,0xa3,0xa2,0x9b,0x98,0x9a,0x9c,
0x9d,0x9c,0x96,0x88,0x77,0x66,0x5c,0x59,0x5d,0x64,0x6c,0x75,0x80,0x89,0x95,0x9b,
0x9a,0x96,0x89,0x78,0x6a,0x58,0x4b,0x44,0x40,0x3e,0x3b,0x3d,0x45,0x54,0x66,0x75,
0x7f,0x88,0x8c,0x90,0x93,0x98,0x9e,0xa3,0xa4,0x9f,0x93,0x83,0x75,0x6b,0x64,0x61,
0x62,0x68,0x70,0x78,0x7d,0x84,0x8d,0x99,0xa1,0xa6,0xa9,0xa9,0xa4,0xa1,0x9c,0x9a,
0x98,0x9a,0x9c,0xa0,0xa1,0xa1,0x9c,0x9b,0x99,0x99,0x9c,0x9d,0x99,0x93,0x87,0x79,
0x6a,0x61,0x5e,0x61,0x6a,0x73,0x7d,0x84,0x8b,0x91,0x96,0x9b,0xa0,0xa7,0xa9,0xa5,
0x9e,0x98,0x93,0x95,0x98,0x9a,0x95,0x87,0x72,0x61,0x57,0x57,0x60,0x6f,0x7b,0x7e,
0x7b,0x72,0x67,0x64,0x5f,0x59,0x52,0x45,0x35,0x2e,0x2f,0x39,0x4b,0x62,0x79,0x88,
0x90,0x95,0x97,0x99,0x95,0x8e,0x80,0x6f,0x60,0x5a,0x5e,0x6a,0x76,0x81,0x82,0x7c,
0x71,0x66,0x60,0x62,0x68,0x71,0x78,0x77,0x72,0x6c,0x66,0x61,0x63,0x66,0x6a,0x6c,
0x6e,0x70,0x74,0x7d,0x89,0x95,0x9c,0x9a,0x8f,0x7f,0x6b,0x59,0x4b,0x43,0x3e,0x3d,
0x3e,0x43,0x4c,0x59,0x67,0x78,0x84,0x8e,0x91,0x94,0x96,0x9b,0x9f,0xa3,0xa2,0x9c,
0x8f,0x7f,0x6c,0x5e,0x5a,0x5e,0x66,0x6f,0x75,0x7b,0x79,0x6f,0x68,0x5f,0x58,0x57,
0x50,0x47,0x3b,0x30,0x27,0x28,0x2c,0x33,0x3a,0x3d,0x3b,0x38,0x37,0x38,0x38,0x38,
0x35,0x34,0x36,0x3e,0x4c,0x5f,0x6f,0x77,0x77,0x71,0x69,0x64,0x60,0x5d,0x57,0x4f,
0x40,0x34,0x33,0x3c,0x4b,0x62,0x77,0x87,0x8f,0x94,0x95,0x96,0x92,0x8c,0x7f,0x71,
0x61,0x5a,0x5c,0x64,0x6f,0x7b,0x84,0x8c,0x92,0x98,0x9c,0xa1,0xa3,0xa3,0x9d,0x92,
0x83,0x76,0x6a,0x60,0x59,0x56,0x4f,0x47,0x3e,0x38,0x36,0x3e,0x4b,0x5e,0x73,0x82,
0x89,0x8f,0x92,0x97,0x9b,0xa4,0xa7,0xa7,0x9e,0x8f,0x7b,0x6c,0x60,0x58,0x54,0x4f,
0x46,0x3e,0x38,0x39,0x45,0x58,0x6b,0x79,0x7e,0x79,0x6e,0x61,0x5b,0x5c,0x64,0x6e,
0x76,0x7d,0x7b,0x75,0x6b,0x63,0x60,0x63,0x6a,0x74,0x78,0x7b,0x76,0x6e,0x66,0x62,
0x63,0x6d,0x73,0x79,0x7d,0x7b,0x74,0x6b,0x63,0x60,0x5d,0x59,0x52,0x49,0x3d,0x31,
0x27,0x25,0x28,0x2f,0x39,0x45,0x51,0x60,0x6b,0x74,0x78,0x75,0x6c,0x65,0x5d,0x57,
0x52,0x4c,0x44,0x3b,0x33,0x2c,0x2a,0x33,0x3b,0x47,0x52,0x5c,0x64,0x6c,0x75,0x82,
0x8f,0x99,0x9b,0x97,0x8c,0x7d,0x6b,0x5d,0x57,0x5c,0x67,0x72,0x7a,0x7f,0x7a,0x71,
0x68,0x60,0x5b,0x56,0x4c,0x42,0x39,0x36,0x3b,0x4b,0x60,0x77,0x88,0x92,0x94,0x90,
0x8e,0x8b,0x83,0x79,0x6a,0x5b,0x4f,0x45,0x3f,0x3e,0x3e,0x3c,0x38,0x37,0x37,0x3b,
0x44,0x51,0x61,0x71,0x79,0x7b,0x79,0x71,0x66,0x5f,0x58,0x51,0x47,0x3e,0x37,0x35,
0x3a,0x4a,0x5f,0x78,0x8c,0x99,0x9d,0x9b,0x96,0x90,0x87,0x7a,0x6b,0x5c,0x4d,0x41,
0x3b,0x3a,0x39,0x39,0x36,0x34,0x34,0x38,0x3f,0x4c,0x58,0x63,0x6e,0x7a,0x83,0x8f,
0x97,0x9a,0x95,0x89,0x78,0x67,0x59,0x54,0x57,0x65,0x72,0x7a,0x7d,0x79,0x6f,0x68,
0x61,0x63,0x6c,0x77,0x7b,0x7a,0x73,0x6a,0x61,0x5d,0x5c,0x5a,0x54,0x47,0x3a,0x32,
0x2f,0x3a,0x4c,0x62,0x77,0x89,0x94,0x9a,0x99,0x96,0x8e,0x82,0x74,0x68,0x5c,0x53,
0x4b,0x44,0x3e,0x3b,0x3c,0x45,0x53,0x64,0x76,0x84,0x8b,0x8f,0x91,0x96,0x9d,0xa4,
0xa9,0xa7,0x9e,0x8e,0x7c,0x6e,0x61,0x59,0x54,0x4b,0x41,0x39,0x33,0x34,0x40,0x54,
0x6a,0x7d,0x83,0x7d,0x6d,0x61,0x58,0x57,0x60,0x6f,0x7a,0x7d,0x76,0x6e,0x67,0x64,
0x63,0x69,0x6b,0x6c,0x6e,0x71,0x76,0x7f,0x8b,0x97,0xa0,0xa8,0xaa,0xa9,0xa3,0x9a,
0x8b,0x7b,0x6a,0x5d,0x56,0x58,0x60,0x6a,0x72,0x77,0x72,0x6e,0x64,0x5c,0x57,0x54,
0x4d,0x48,0x3d,0x34,0x2f,0x2b,0x2a,0x2f,0x38,0x46,0x56,0x64,0x6f,0x75,0x72,0x6c,
0x64,0x61,0x5e,0x5b,0x54,0x4a,0x3d,0x34,0x33,0x3f,0x56,0x6f,0x7f,0x86,0x7f,0x71,
0x61,0x54,0x4d,0x4b,0x47,0x3f,0x33,0x2d,0x2a,0x2e,0x38,0x3e,0x3e,0x3b,0x35,0x31,
0x33,0x37,0x3b,0x3b,0x38,0x35,0x38,0x46,0x5a,0x6e,0x7a,0x7a,0x70,0x64,0x59,0x54,
0x52,0x53,0x4f,0x47,0x39,0x2f,0x2b,0x31,0x3a,0x44,0x49,0x46,0x3b,0x32,0x2e,0x33,
0x44,0x5a,0x6c,0x78,0x78,0x71,0x68,0x60,0x5a,0x58,0x54,0x49,0x3c,0x33,0x33,0x3f,
0x56,0x6f,0x80,0x86,0x7e,0x6f,0x61,0x58,0x54,0x53,0x4d,0x43,0x37,0x33,0x3a,0x4e,
0x68,0x7e,0x87,0x82,0x6f,0x5d,0x55,0x58,0x64,0x72,0x7b,0x7b,0x74,0x6b,0x63,0x5f,
0x5d,0x5c,0x55,0x4c,0x40,0x34,0x2e,0x2f,0x31,0x39,0x3f,0x44,0x45,0x41,0x3c,0x38,
0x33,0x31,0x2f,0x31,0x32,0x33,0x34,0x33,0x31,0x33,0x33,0x32,0x33,0x37,0x39,0x39,
0x3a,0x39,0x3a,0x3b,0x3b,0x3c,0x3c,0x3d,0x3c,0x3d,0x3b,0x39,0x3b,0x39,0x38,0x36,
0x32,0x33,0x31,0x3a,0x44,0x52,0x61,0x71,0x7d,0x8d,0x95,0x9a,0x9a,0x93,0x86,0x79,
0x68,0x58,0x4d,0x46,0x41,0x3d,0x39,0x36,0x35,0x38,0x3d,0x40,0x3f,0x3b,0x34,0x31,
0x2f,0x34,0x42,0x55,0x67,0x75,0x79,0x74,0x69,0x5f,0x59,0x5d,0x64,0x6d,0x73,0x78,
0x7b,0x80,0x89,0x94,0x9c,0x9f,0x96,0x84,0x6c,0x58,0x4f,0x55,0x62,0x74,0x82,0x86,
0x7e,0x6f,0x61,0x5a,0x5d,0x68,0x74,0x7a,0x79,0x6f,0x65,0x60,0x5d,0x5f,0x5e,0x59,
0x4e,0x40,0x32,0x2b,0x2b,0x31,0x38,0x3f,0x44,0x42,0x3c,0x35,0x31,0x2f,0x31,0x33,
0x34,0x35,0x36,0x36,0x35,0x36,0x35,0x34,0x37,0x38,0x37,0x3a,0x3a,0x3b,0x3c,0x38,
0x31,0x31,0x32,0x34,0x34,0x33,0x33,0x35,0x35,0x35,0x34,0x35,0x37,0x39,0x3b,0x3b,
// Line 17
0x37,0x3a,0x3a,0x39,0x39,0x3b,0x3b,0x3b,0x3a,0x38,0x37,0x38,0x37,0x39,0x3a,0x3a,
0x39,0x3a,0x3c,0x3b,0x3a,0x3a,0x3a,0x38,0x38,0x37,0x37,0x37,0x37,0x36,0x37,0x38,
0x38,0x39,0x37,0x36,0x36,0x37,0x38,0x37,0x36,0x35,0x34,0x34,0x34,0x38,0x3a,0x3a,
0x37,0x35,0x35,0x3b,0x47,0x59,0x6a,0x78,0x7e,0x7c,0x71,0x68,0x5f,0x5f,0x66,0x71,
0x7a,0x80,0x7d,0x75,0x6b,0x65,0x64,0x66,0x6a,0x6f,0x73,0x75,0x73,0x6e,0x67,0x62,
0x60,0x66,0x6d,0x76,0x7c,0x7e,0x79,0x70,0x66,0x61,0x61,0x68,0x70,0x79,0x7d,0x7d,
0x76,0x6d,0x65,0x5f,0x60,0x66,0x6d,0x74,0x78,0x77,0x73,0x6d,0x65,0x61,0x61,0x65,
0x6a,0x71,0x75,0x74,0x6f,0x69,0x63,0x62,0x63,0x6a,0x75,0x7d,0x7f,0x7d,0x7a,0x75,
0x6e,0x6a,0x69,0x6c,0x6f,0x72,0x72,0x75,0x75,0x7b,0x83,0x8f,0x9b,0xa7,0xad,0xac,
0xa4,0x97,0x89,0x79,0x6b,0x63,0x5b,0x56,0x50,0x4a,0x42,0x3d,0x3c,0x44,0x52,0x65,
0x77,0x86,0x90,0x96,0x97,0x99,0x99,0x9e,0x9f,0xa0,0x9c,0x91,0x82,0x75,0x63,0x58,
0x57,0x5e,0x69,0x75,0x7c,0x7d,0x79,0x71,0x67,0x64,0x67,0x6e,0x74,0x7c,0x7d,0x78,
0x6e,0x67,0x62,0x65,0x69,0x6f,0x72,0x74,0x74,0x77,0x7d,0x89,0x97,0xa4,0xae,0xb1,
0xad,0xa5,0x9e,0x99,0x99,0x9b,0x9d,0x99,0x8d,0x81,0x70,0x60,0x54,0x4d,0x47,0x3b,
0x36,0x34,0x38,0x49,0x5d,0x72,0x7f,0x82,0x77,0x6c,0x60,0x5a,0x57,0x55,0x4d,0x45,
0x3b,0x39,0x41,0x56,0x6b,0x80,0x8a,0x87,0x78,0x6a,0x60,0x5d,0x63,0x6c,0x72,0x78,
0x7d,0x83,0x8d,0x98,0xa2,0xa8,0xa9,0xa6,0x9e,0x95,0x89,0x7c,0x6d,0x60,0x54,0x4d,
0x47,0x46,0x43,0x3f,0x37,0x34,0x34,0x35,0x35,0x3e,0x46,0x51,0x5d,0x6b,0x78,0x89,
0x90,0x95,0x97,0x93,0x88,0x7d,0x6f,0x60,0x51,0x47,0x3f,0x3d,0x3e,0x44,0x4e,0x5d,
0x6c,0x7a,0x85,0x8c,0x91,0x98,0x97,0x91,0x89,0x7c,0x6b,0x5a,0x4a,0x41,0x3c,0x3d,
0x3c,0x3c,0x3a,0x38,0x36,0x3a,0x41,0x4e,0x5f,0x6f,0x78,0x7d,0x79,0x74,0x6d,0x66,
0x5f,0x58,0x4f,0x45,0x3c,0x38,0x3d,0x4b,0x5e,0x73,0x86,0x94,0x9a,0x9a,0x97,0x8f,
0x87,0x7f,0x72,0x62,0x53,0x47,0x3f,0x3e,0x3f,0x3f,0x3b,0x38,0x32,0x33,0x3c,0x4c,
0x5d,0x70,0x78,0x78,0x72,0x6a,0x63,0x5f,0x5e,0x59,0x4f,0x43,0x38,0x35,0x3d,0x50,
0x68,0x80,0x8d,0x8b,0x7a,0x66,0x5a,0x5b,0x65,0x75,0x82,0x85,0x7d,0x72,0x66,0x62,
0x62,0x64,0x5f,0x51,0x42,0x34,0x30,0x3b,0x50,0x69,0x7e,0x89,0x85,0x77,0x69,0x60,
0x5f,0x66,0x6d,0x74,0x7e,0x82,0x85,0x8f,0x98,0x9e,0x9d,0x92,0x7f,0x6c,0x5b,0x56,
0x5b,0x67,0x74,0x7e,0x80,0x7d,0x76,0x6e,0x66,0x61,0x59,0x4e,0x42,0x3b,0x39,0x3f,
0x4e,0x63,0x78,0x89,0x93,0x98,0x98,0x97,0x91,0x86,0x7d,0x6b,0x5a,0x50,0x49,0x44,
0x40,0x3d,0x3a,0x3a,0x3a,0x3c,0x3d,0x3f,0x3d,0x38,0x32,0x31,0x34,0x42,0x52,0x61,
0x70,0x7f,0x8a,0x93,0x98,0x9e,0xa2,0xa4,0xa4,0xa4,0xa2,0xa2,0xa2,0xa2,0xa0,0xa1,
0xa2,0xa4,0xa4,0xa3,0x9c,0x91,0x80,0x6e,0x5c,0x51,0x49,0x46,0x42,0x3e,0x39,0x35,
0x34,0x36,0x3a,0x40,0x41,0x3e,0x37,0x32,0x31,0x37,0x3f,0x4e,0x60,0x73,0x81,0x8e,
0x97,0x9c,0x9c,0x98,0x8d,0x7f,0x71,0x5f,0x51,0x47,0x3d,0x36,0x34,0x3a,0x45,0x58,
0x6b,0x7c,0x83,0x80,0x75,0x69,0x61,0x60,0x65,0x6d,0x75,0x79,0x7f,0x85,0x8c,0x95,
0x9d,0xa4,0xa7,0xa6,0xa2,0x97,0x90,0x82,0x72,0x65,0x5d,0x5e,0x66,0x72,0x7b,0x7f,
0x7b,0x73,0x6a,0x63,0x5e,0x5e,0x59,0x4e,0x3e,0x33,0x30,0x37,0x49,0x61,0x77,0x8a,
0x90,0x93,0x95,0x99,0x9c,0xa1,0xa2,0xa0,0x9e,0x9d,0x9c,0x9d,0x9e,0x9b,0x92,0x86,
0x78,0x6c,0x63,0x5e,0x5d,0x65,0x70,0x7c,0x82,0x8b,0x91,0x99,0x9b,0x98,0x8a,0x7d,
0x69,0x56,0x46,0x3c,0x36,0x39,0x3c,0x3d,0x3a,0x37,0x35,0x3a,0x41,0x4c,0x57,0x63,
0x6f,0x7c,0x88,0x91,0x95,0x99,0x96,0x8d,0x7d,0x6d,0x5d,0x51,0x47,0x3f,0x3b,0x3a,
0x3d,0x47,0x55,0x66,0x75,0x83,0x90,0x97,0x9a,0x98,0x90,0x87,0x7b,0x6c,0x5d,0x4e,
0x42,0x3b,0x36,0x35,0x3a,0x46,0x56,0x68,0x78,0x84,0x8f,0x98,0x99,0x97,0x91,0x89,
0x7d,0x6f,0x60,0x52,0x47,0x3f,0x39,0x3a,0x3f,0x49,0x55,0x65,0x74,0x81,0x8d,0x96,
0x99,0x99,0x93,0x8b,0x7e,0x6e,0x5d,0x4f,0x45,0x3f,0x3d,0x3c,0x3a,0x34,0x34,0x30,
0x30,0x39,0x44,0x52,0x61,0x6d,0x76,0x83,0x8e,0x9a,0xa0,0x9e,0x93,0x82,0x70,0x63,
0x5b,0x5c,0x62,0x6f,0x7b,0x85,0x8d,0x95,0x9b,0xa2,0xa7,0xa8,0xa6,0xa3,0x9e,0x9b,
0x9b,0x9c,0x9c,0x97,0x8e,0x85,0x76,0x68,0x58,0x4b,0x43,0x3d,0x39,0x37,0x34,0x34,
0x34,0x35,0x38,0x41,0x4f,0x61,0x71,0x7c,0x7d,0x78,0x6e,0x65,0x5e,0x5a,0x53,0x49,
0x3e,0x36,0x34,0x40,0x54,0x6c,0x7e,0x86,0x81,0x73,0x63,0x58,0x53,0x51,0x4c,0x42,
0x37,0x35,0x3d,0x53,0x6a,0x7d,0x85,0x7e,0x6f,0x60,0x56,0x52,0x4d,0x4c,0x44,0x3c,
0x36,0x3b,0x49,0x66,0x7c,0x8c,0x93,0x96,0x96,0x99,0x9b,0x9d,0xa0,0xa2,0xa0,0x9c,
0x99,0x9a,0x9e,0xa2,0xa3,0xa3,0xa2,0xa0,0x9e,0xa0,0xa0,0xa2,0xa2,0xa0,0x9e,0x9e,
0x9f,0xa0,0x9b,0x91,0x83,0x73,0x63,0x58,0x55,0x5f,0x6c,0x76,0x7d,0x7d,0x78,0x70,
0x69,0x63,0x5e,0x55,0x4a,0x40,0x37,0x36,0x3e,0x50,0x66,0x7a,0x8c,0x95,0x99,0x9c,
0x99,0x94,0x89,0x7b,0x6b,0x60,0x5d,0x60,0x68,0x74,0x7d,0x86,0x8d,0x93,0x98,0x9e,
0x9d,0x94,0x82,0x6c,0x58,0x50,0x54,0x63,0x75,0x83,0x85,0x7d,0x6f,0x63,0x61,0x66,
0x6f,0x78,0x7b,0x78,0x70,0x69,0x63,0x61,0x64,0x61,0x59,0x4d,0x3f,0x35,0x32,0x3a,
0x49,0x60,0x78,0x8c,0x97,0x9d,0x9c,0x98,0x91,0x88,0x7c,0x6e,0x5e,0x4f,0x44,0x3c,
0x39,0x38,0x3b,0x43,0x51,0x63,0x75,0x85,0x91,0x98,0x98,0x94,0x8c,0x83,0x78,0x69,
0x59,0x4d,0x40,0x38,0x33,0x34,0x35,0x37,0x38,0x3b,0x39,0x3e,0x3c,0x3a,0x39,0x38,
0x37,0x3a,0x39,0x39,0x39,0x3d,0x45,0x51,0x5f,0x6e,0x7d,0x8a,0x93,0x97,0x97,0x94,
0x8d,0x82,0x73,0x64,0x56,0x4a,0x42,0x3f,0x3d,0x40,0x46,0x51,0x5e,0x6f,0x7d,0x86,
0x8b,0x91,0x93,0x97,0x9e,0xa4,0xa4,0x9d,0x90,0x7e,0x6f,0x61,0x58,0x51,0x4a,0x43,
0x3d,0x38,0x35,0x33,0x34,0x37,0x39,0x3c,0x3c,0x3c,0x39,0x36,0x31,0x30,0x31,0x36,
0x39,0x3c,0x38,0x36,0x35,0x36,0x35,0x36,0x36,0x37,0x37,0x37,0x37,0x3a,0x3a,0x3a,
0x37,0x36,0x37,0x3b,0x3d,0x40,0x3d,0x38,0x32,0x30,0x3c,0x4b,0x5d,0x70,0x7b,0x7c,
0x76,0x6b,0x5e,0x58,0x54,0x51,0x4c,0x45,0x39,0x30,0x2e,0x34,0x3c,0x45,0x49,0x49,
0x43,0x3a,0x34,0x35,0x3e,0x51,0x67,0x78,0x7f,0x7d,0x71,0x63,0x5a,0x5d,0x66,0x73,
0x7b,0x7d,0x76,0x6d,0x63,0x5f,0x61,0x64,0x5e,0x52,0x41,0x33,0x2f,0x3c,0x50,0x6a,
0x80,0x8c,0x86,0x7a,0x6a,0x60,0x5f,0x63,0x68,0x6e,0x72,0x78,0x7d,0x86,0x91,0x9e,
0xa7,0xab,0xab,0xa8,0x9e,0x8f,0x7d,0x72,0x68,0x61,0x58,0x4e,0x44,0x39,0x31,0x33,
0x3f,0x56,0x6a,0x7d,0x80,0x7b,0x72,0x67,0x5d,0x59,0x52,0x49,0x40,0x37,0x34,0x3d,
0x4d,0x62,0x78,0x88,0x91,0x97,0x97,0x97,0x94,0x8d,0x80,0x6f,0x5f,0x5a,0x5d,0x6c,
0x78,0x81,0x83,0x7b,0x6e,0x62,0x5a,0x54,0x4e,0x47,0x3d,0x32,0x2b,0x2a,0x2d,0x39,
0x3d,0x42,0x44,0x3e,0x36,0x34,0x37,0x3f,0x4c,0x5d,0x6e,0x7d,0x86,0x8d,0x92,0x98,
0x9f,0xa5,0xa7,0xa4,0xa0,0x9e,0x9c,0x9e,0xa0,0xa0,0x9b,0x8e,0x7b,0x69,0x5d,0x5b,
0x5f,0x67,0x71,0x7a,0x80,0x87,0x90,0x9a,0xa2,0xa0,0x93,0x7e,0x68,0x5a,0x55,0x5a,
0x63,0x6f,0x79,0x82,0x89,0x94,0x9c,0xa0,0x9c,0x91,0x7e,0x6c,0x5c,0x54,0x57,0x61,
0x6d,0x7a,0x83,0x8b,0x8e,0x96,0x9b,0xa0,0xa3,0xa4,0xa0,0x9b,0x97,0x95,0x98,0x9d,
0xa1,0xa6,0xa6,0xa4,0xa2,0xa0,0xa0,0x9e,0x9f,0x9f,0x9d,0x9e,0xa0,0xa0,0xa1,0x9e,
0x9c,0x9e,0x9e,0x9f,0xa1,0xa3,0xa1,0x9e,0x99,0x99,0x99,0x9a,0x9b,0x9b,0x95,0x8c,
0x7e,0x70,0x62,0x59,0x53,0x4d,0x46,0x40,0x3d,0x3d,0x43,0x50,0x5f,0x72,0x80,0x89,
0x8d,0x90,0x93,0x97,0x9c,0xa0,0x9e,0x99,0x8e,0x7f,0x72,0x64,0x58,0x51,0x4c,0x47,
0x40,0x3b,0x36,0x34,0x34,0x37,0x3b,0x42,0x48,0x53,0x5f,0x6d,0x78,0x86,0x93,0x9a,
0x9a,0x93,0x88,0x7b,0x69,0x5a,0x4d,0x45,0x3c,0x36,0x35,0x3d,0x49,0x5d,0x70,0x7f,
0x85,0x83,0x76,0x67,0x59,0x50,0x4b,0x45,0x3c,0x36,0x31,0x2e,0x2e,0x31,0x37,0x41,
0x4d,0x5c,0x6a,0x76,0x7b,0x7a,0x71,0x67,0x5f,0x5f,0x68,0x74,0x7e,0x83,0x7d,0x70,
0x66,0x5e,0x5f,0x68,0x72,0x7b,0x7f,0x7b,0x72,0x6b,0x65,0x64,0x65,0x65,0x57,0x4d,
0x3e,0x38,0x36,0x3e,0x4e,0x67,0x79,0x83,0x7d,0x72,0x63,0x56,0x50,0x4d,0x4b,0x45,
0x39,0x30,0x2d,0x31,0x36,0x3f,0x43,0x41,0x3a,0x36,0x33,0x34,0x34,0x37,0x38,0x38,
0x36,0x36,0x36,0x39,0x37,0x39,0x39,0x3a,0x38,0x3b,0x39,0x37,0x36,0x37,0x38,0x3d,
0x3d,0x3b,0x39,0x39,0x3d,0x49,0x5a,0x6d,0x7e,0x85,0x80,0x73,0x65,0x5e,0x60,0x6b,
0x76,0x7c,0x7c,0x76,0x6b,0x65,0x61,0x62,0x61,0x5e,0x53,0x45,0x37,0x2e,0x2a,0x2e,
0x34,0x3b,0x3f,0x40,0x3c,0x38,0x34,0x32,0x32,0x35,0x38,0x39,0x38,0x38,0x37,0x36,
0x36,0x37,0x36,0x35,0x34,0x37,0x3a,0x3a,0x3a,0x3a,0x38,0x39,0x39,0x3a,0x39,0x3b,
// Line 18
0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x38,0x3b,0x3c,0x3b,0x38,0x35,0x35,0x35,0x3a,
0x3a,0x3a,0x36,0x31,0x2f,0x32,0x37,0x3b,0x3b,0x38,0x32,0x2d,0x2f,0x36,0x3f,0x45,
0x44,0x3b,0x2e,0x28,0x29,0x32,0x3d,0x44,0x43,0x39,0x2b,0x23,0x25,0x31,0x40,0x4c,
0x4a,0x40,0x31,0x25,0x23,0x2e,0x3f,0x4c,0x4c,0x41,0x2f,0x24,0x23,0x30,0x3f,0x4c,
0x4c,0x41,0x31,0x24,0x21,0x2f,0x3f,0x4a,0x4e,0x43,0x32,0x25,0x22,0x2d,0x3c,0x46,
0x46,0x3b,0x2c,0x23,0x22,0x2d,0x3d,0x4a,0x4d,0x44,0x33,0x28,0x26,0x31,0x41,0x4a,
0x49,0x40,0x32,0x2a,0x28,0x32,0x3f,0x4a,0x4d,0x44,0x33,0x28,0x26,0x31,0x41,0x4c,
0x4b,0x3f,0x2e,0x23,0x22,0x2d,0x3d,0x46,0x49,0x3d,0x2b,0x20,0x20,0x2b,0x3f,0x48,
0x46,0x3c,0x2e,0x26,0x27,0x33,0x43,0x4e,0x4e,0x44,0x34,0x2a,0x2a,0x36,0x45,0x52,
0x53,0x4d,0x41,0x38,0x3b,0x48,0x57,0x62,0x62,0x59,0x4a,0x3f,0x3e,0x49,0x58,0x62,
0x61,0x57,0x47,0x3b,0x3e,0x4b,0x58,0x64,0x64,0x5a,0x49,0x3d,0x3c,0x49,0x59,0x63,
0x5e,0x56,0x45,0x37,0x37,0x43,0x53,0x60,0x60,0x54,0x47,0x3c,0x3c,0x48,0x57,0x63,
0x63,0x59,0x48,0x3c,0x3b,0x46,0x57,0x64,0x64,0x5a,0x4a,0x3f,0x3c,0x4a,0x5a,0x64,
0x64,0x57,0x45,0x3a,0x38,0x45,0x54,0x60,0x5f,0x54,0x44,0x3a,0x3c,0x4b,0x5a,0x64,
0x63,0x58,0x48,0x3f,0x40,0x4d,0x5f,0x6c,0x6d,0x64,0x55,0x4c,0x4d,0x5d,0x6e,0x78,
0x77,0x6e,0x5e,0x54,0x54,0x61,0x71,0x7c,0x7a,0x70,0x5e,0x52,0x4f,0x5f,0x6d,0x78,
0x78,0x6d,0x5c,0x53,0x51,0x5c,0x6d,0x79,0x78,0x6d,0x5c,0x51,0x53,0x60,0x71,0x7e,
0x7c,0x71,0x5e,0x53,0x53,0x60,0x6e,0x76,0x74,0x6b,0x5a,0x4f,0x4f,0x5b,0x6b,0x77,
0x78,0x6d,0x5c,0x52,0x52,0x5e,0x6e,0x78,0x77,0x6e,0x5d,0x50,0x4f,0x5b,0x6c,0x7a,
0x7a,0x6e,0x5e,0x53,0x54,0x5e,0x6c,0x78,0x79,0x72,0x63,0x59,0x5e,0x69,0x7b,0x88,
0x8b,0x83,0x74,0x67,0x64,0x6f,0x7e,0x8b,0x8b,0x82,0x72,0x67,0x67,0x72,0x81,0x8e,
0x90,0x87,0x77,0x6a,0x67,0x72,0x81,0x8b,0x8d,0x85,0x77,0x69,0x6a,0x72,0x80,0x8d,
0x8e,0x83,0x74,0x69,0x67,0x72,0x81,0x8c,0x8d,0x81,0x70,0x66,0x67,0x74,0x84,0x8f,
0x8f,0x85,0x76,0x69,0x68,0x76,0x84,0x8d,0x8b,0x7e,0x70,0x67,0x67,0x72,0x81,0x8b,
0x8b,0x81,0x73,0x69,0x68,0x76,0x85,0x90,0x8e,0x84,0x76,0x6c,0x6c,0x77,0x86,0x91,
0x92,0x8b,0x7f,0x76,0x76,0x82,0x93,0xa0,0xa1,0x98,0x8a,0x7f,0x7e,0x87,0x97,0xa2,
0xa3,0x9a,0x89,0x7c,0x7c,0x87,0x96,0xa1,0xa5,0x9b,0x8b,0x81,0x81,0x8d,0x9e,0xa7,
0xa5,0x9b,0x89,0x7f,0x7f,0x8c,0x9a,0xa5,0xa4,0x99,0x89,0x7e,0x7e,0x8a,0x9a,0xa4,
0xa1,0x98,0x88,0x7e,0x7e,0x8a,0x99,0xa4,0xa2,0x98,0x89,0x7f,0x81,0x8e,0x9c,0xa5,
0xa5,0x9b,0x8b,0x7e,0x7c,0x88,0x97,0xa3,0xa3,0x98,0x88,0x7f,0x7d,0x89,0x98,0xa3,
0xa4,0x9b,0x8b,0x7f,0x81,0x8d,0x9e,0xac,0xad,0xa4,0x98,0x8e,0x90,0x9f,0xae,0xb8,
0xb8,0xae,0xa1,0x96,0x94,0x9f,0xad,0xb8,0xb7,0xac,0x9c,0x90,0x91,0xa0,0xb0,0xb9,
0xb9,0xae,0x9e,0x93,0x93,0xa0,0xaf,0xba,0xb7,0xab,0x9c,0x93,0x93,0xa0,0xaf,0xb9,
0xb8,0xac,0x9b,0x91,0x91,0x9d,0xac,0xb7,0xb6,0xa9,0x9b,0x90,0x90,0x9c,0xab,0xb5,
0xb6,0xaa,0x99,0x91,0x91,0x9e,0xac,0xb6,0xb2,0xa9,0x9b,0x91,0x93,0xa0,0xaf,0xb9,
0xb9,0xb0,0xa3,0x9a,0x9a,0xa3,0xae,0xb6,0xb5,0xae,0xa2,0x99,0x98,0x9e,0xa7,0xae,
0xae,0xaa,0xa6,0xa4,0xa4,0xa7,0xaa,0xac,0xaa,0xa9,0xa5,0xa2,0xa2,0xa4,0xa3,0xa6,
0xa7,0xa8,0xa8,0xaa,0xaa,0xaa,0xa8,0xa6,0xa2,0xa4,0xa6,0xa7,0xa7,0xa7,0xa6,0xa7,
0xa7,0xa7,0xa7,0xa7,0xa7,0xa7,0xa5,0xa3,0xa2,0xa5,0xaa,0xab,0xa7,0xa4,0xa4,0xa5,
0xa5,0xa4,0xa2,0xa2,0xa2,0xa4,0xa2,0xa2,0xa3,0xa7,0xa8,0xa9,0xa7,0xa7,0xa6,0xa5,
0xa5,0xa5,0xa7,0xa8,0xa7,0xa5,0xa3,0xa2,0xa2,0xa2,0xa3,0xa4,0xa1,0x9e,0x98,0x94,
0x90,0x8b,0x80,0x75,0x68,0x5e,0x53,0x48,0x40,0x3d,0x3a,0x38,0x35,0x36,0x36,0x38,
0x37,0x37,0x38,0x39,0x38,0x39,0x37,0x36,0x37,0x38,0x38,0x3a,0x38,0x39,0x38,0x39,
0x39,0x39,0x38,0x3a,0x3b,0x3d,0x3c,0x3c,0x3c,0x3c,0x3b,0x3b,0x39,0x38,0x37,0x36,
0x34,0x36,0x36,0x37,0x37,0x37,0x34,0x34,0x34,0x36,0x37,0x3c,0x38,0x37,0x37,0x38,
0x36,0x37,0x38,0x39,0x38,0x38,0x37,0x36,0x36,0x35,0x35,0x38,0x38,0x3a,0x3a,0x3a,
0x38,0x38,0x38,0x37,0x37,0x38,0x38,0x3a,0x38,0x38,0x38,0x38,0x37,0x38,0x3a,0x3a,
0x38,0x37,0x35,0x34,0x33,0x33,0x34,0x37,0x38,0x38,0x36,0x36,0x38,0x38,0x38,0x37,
0x36,0x37,0x35,0x32,0x31,0x32,0x3b,0x4c,0x60,0x77,0x8e,0x9d,0xa0,0x9c,0x8f,0x81,
0x72,0x67,0x5c,0x52,0x46,0x3b,0x31,0x2f,0x31,0x36,0x3d,0x43,0x42,0x3e,0x36,0x31,
0x2e,0x2f,0x31,0x33,0x33,0x35,0x36,0x38,0x36,0x35,0x36,0x35,0x32,0x35,0x36,0x37,
0x39,0x3a,0x38,0x38,0x37,0x35,0x32,0x36,0x36,0x38,0x3a,0x3a,0x36,0x31,0x2e,0x2f,
0x37,0x3f,0x44,0x44,0x3e,0x37,0x33,0x38,0x42,0x4c,0x54,0x53,0x49,0x3e,0x38,0x40,
0x53,0x69,0x77,0x76,0x66,0x52,0x47,0x4e,0x62,0x7f,0x8f,0x8b,0x75,0x59,0x48,0x4f,
0x6b,0x8d,0xa0,0x9b,0x7f,0x5e,0x4c,0x53,0x70,0x93,0xa5,0x9f,0x82,0x60,0x4c,0x54,
0x70,0x8e,0x9c,0x93,0x77,0x59,0x49,0x50,0x65,0x7e,0x88,0x7e,0x66,0x4e,0x41,0x46,
0x54,0x62,0x65,0x5c,0x4d,0x40,0x3c,0x3f,0x43,0x4c,0x4c,0x47,0x40,0x3b,0x38,0x3b,
0x3c,0x3c,0x3c,0x3c,0x3a,0x3a,0x38,0x37,0x35,0x34,0x34,0x33,0x33,0x35,0x35,0x38,
0x36,0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x39,0x37,0x3b,
0x38,0x36,0x35,0x34,0x33,0x35,0x34,0x33,0x33,0x36,0x37,0x37,0x38,0x36,0x35,0x36,
0x36,0x35,0x38,0x37,0x36,0x37,0x37,0x36,0x36,0x38,0x39,0x3c,0x3c,0x3b,0x3a,0x39,
0x38,0x36,0x36,0x37,0x38,0x38,0x37,0x35,0x34,0x33,0x33,0x36,0x36,0x37,0x38,0x38,
0x38,0x37,0x35,0x33,0x34,0x35,0x36,0x38,0x3d,0x41,0x46,0x52,0x5f,0x6f,0x80,0x90,
0x9c,0xaa,0xb2,0xb9,0xbc,0xc0,0xc1,0xc1,0xc0,0xc0,0xbf,0xbe,0xbd,0xbd,0xbf,0xc0,
0xc1,0xc2,0xc2,0xc2,0xc3,0xc3,0xc3,0xc3,0xc1,0xc1,0xc0,0xc0,0xbf,0xbf,0xbe,0xbd,
0xbb,0xb9,0xb8,0xb9,0xb9,0xbb,0xbd,0xbf,0xc0,0xc1,0xbf,0xc1,0xbf,0xc0,0xc0,0xc1,
0xbd,0xbf,0xbb,0xba,0xbb,0xbe,0xbf,0xc0,0xbe,0xbe,0xbd,0xbc,0xbb,0xbb,0xbb,0xbc,
0xbb,0xbb,0xbb,0xbd,0xbd,0xbd,0xbc,0xbb,0xb9,0xb9,0xb9,0xb9,0xba,0xbd,0xbd,0xbd,
0xbd,0xbd,0xbd,0xbd,0xbf,0xbf,0xbd,0xbd,0xbc,0xbc,0xbe,0xbf,0xbf,0xc1,0xc1,0xc0,
0xc0,0xc0,0xbf,0xbd,0xbb,0xbb,0xbb,0xbb,0xbd,0xbd,0xbf,0xbd,0xb9,0xbb,0xbc,0xbd,
0xbe,0xbd,0xbb,0xbd,0xbc,0xbc,0xbb,0xbd,0xbd,0xbe,0xbd,0xbd,0xbb,0xbd,0xbb,0xbb,
0xbb,0xbb,0xbb,0xba,0xb9,0xb9,0xb9,0xbb,0xbd,0xbf,0xbe,0xbd,0xbd,0xbf,0xbf,0xbe,
0xbd,0xbc,0xbb,0xbb,0xb9,0xb9,0xbb,0xb9,0xb8,0xb9,0xbb,0xbe,0xbd,0xbb,0xbb,0xbb,
0xb9,0xb9,0xba,0xbe,0xbf,0xbf,0xbd,0xbc,0xbb,0xbd,0xbd,0xbd,0xbe,0xbf,0xbf,0xbd,
0xbb,0xbd,0xbe,0xbf,0xbe,0xbe,0xbe,0xbd,0xbb,0xbd,0xbd,0xbe,0xbd,0xbd,0xbd,0xbf,
0xc0,0xc0,0xbe,0xbb,0xb9,0xba,0xbc,0xbf,0xc0,0xc1,0xbf,0xbc,0xbb,0xbd,0xbd,0xbf,
0xbf,0xbf,0xbd,0xbc,0xbc,0xbd,0xbb,0xbc,0xbd,0xbf,0xbe,0xbd,0xbb,0xbd,0xbc,0xbd,
0xbd,0xbe,0xbf,0xbd,0xbb,0xba,0xbb,0xbd,0xbe,0xc0,0xbe,0xbf,0xbe,0xbd,0xbd,0xbf,
0xbe,0xbd,0xbd,0xbd,0xbb,0xbb,0xbb,0xbb,0xbc,0xbe,0xbf,0xbe,0xbc,0xbc,0xbb,0xbd,
0xbf,0xc0,0xc1,0xc1,0xc0,0xc0,0xc0,0xc1,0xc0,0xbf,0xbd,0xbb,0xba,0xbb,0xbb,0xbb,
0xbb,0xbf,0xc0,0xc0,0xbe,0xbf,0xc0,0xc0,0xc0,0xc0,0xc0,0xbd,0xbc,0xbb,0xbb,0xbc,
0xbd,0xbd,0xbc,0xbb,0xb8,0xb9,0xb9,0xbd,0xc1,0xc0,0xbf,0xbf,0xbd,0xbe,0xbf,0xc0,
0xc0,0xc1,0xc1,0xc0,0xbd,0xbd,0xbc,0xbd,0xbf,0xbf,0xbf,0xc2,0xc2,0xc2,0xc1,0xc0,
0xbe,0xbd,0xbc,0xbd,0xbd,0xbd,0xbb,0xb9,0xb9,0xb9,0xba,0xbd,0xbf,0xc0,0xc1,0xc0,
0xbe,0xbf,0xbe,0xbf,0xc0,0xc0,0xbe,0xbd,0xbb,0xbb,0xbb,0xbb,0xbb,0xbb,0xbc,0xbc,
0xbb,0xbb,0xbb,0xbd,0xbe,0xbf,0xbf,0xbf,0xbe,0xbe,0xbd,0xbb,0xb9,0xb7,0xb8,0xb8,
0xb7,0xb9,0xba,0xbb,0xbd,0xbd,0xbd,0xbf,0xbf,0xc0,0xbf,0xbf,0xbd,0xbb,0xbb,0xbc,
0xbd,0xbf,0xbf,0xbf,0xbf,0xbe,0xbd,0xbe,0xc0,0xc3,0xc3,0xc0,0xbf,0xbf,0xbe,0xbf,
0xbf,0xbf,0xbf,0xbd,0xbb,0xb9,0xba,0xbd,0xbe,0xbf,0xbe,0xbd,0xbc,0xbd,0xbc,0xbd,
0xbd,0xbc,0xbb,0xba,0xb9,0xba,0xb7,0xbc,0xbd,0xbd,0xbd,0xbc,0xba,0xbb,0xbc,0xbd,
0xbf,0xbf,0xbe,0xbf,0xbd,0xbb,0xbc,0xbc,0xbd,0xbc,0xbb,0xb9,0xb7,0xb9,0xba,0xbb,
0xbc,0xbd,0xbd,0xbf,0xbf,0xc1,0xc1,0xbf,0xbd,0xbd,0xbd,0xbe,0xbd,0xbf,0xbd,0xbb,
0xbb,0xbc,0xbb,0xbe,0xbd,0xbf,0xc0,0xc0,0xbf,0xbf,0xc0,0xbf,0xbf,0xbd,0xbd,0xbd,
0xbb,0xb9,0xb8,0xb9,0xba,0xbc,0xbd,0xbd,0xbb,0xbe,0xbf,0xbf,0xbd,0xbd,0xbc,0xbd,
0xbc,0xbc,0xbb,0xbc,0xbc,0xbb,0xbb,0xb9,0xb7,0xb4,0xae,0xa4,0x99,0x8c,0x81,0x75,
0x67,0x5a,0x4e,0x46,0x41,0x3d,0x37,0x32,0x31,0x35,0x37,0x37,0x36,0x36,0x38,0x38,
// Line 19
0x35,0x34,0x33,0x34,0x33,0x34,0x35,0x35,0x35,0x36,0x38,0x38,0x39,0x3a,0x39,0x38,
0x35,0x34,0x35,0x39,0x3b,0x3f,0x43,0x47,0x4a,0x50,0x53,0x59,0x5c,0x5e,0x5f,0x60,
0x62,0x65,0x64,0x65,0x63,0x63,0x64,0x65,0x64,0x64,0x62,0x60,0x5f,0x60,0x60,0x5d,
0x5f,0x5f,0x5f,0x61,0x60,0x61,0x65,0x65,0x64,0x64,0x63,0x61,0x60,0x5f,0x5f,0x5e,
0x5c,0x5c,0x5b,0x5c,0x5c,0x5c,0x5e,0x61,0x64,0x65,0x64,0x62,0x62,0x62,0x62,0x62,
0x61,0x61,0x61,0x61,0x5f,0x5f,0x61,0x62,0x62,0x63,0x61,0x61,0x64,0x63,0x63,0x65,
0x65,0x65,0x64,0x64,0x63,0x63,0x62,0x61,0x5d,0x5e,0x5d,0x5d,0x5e,0x5e,0x60,0x61,
0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x5f,0x5e,0x5e,0x5f,
0x5f,0x5f,0x5e,0x5d,0x5d,0x61,0x62,0x64,0x65,0x65,0x63,0x63,0x61,0x62,0x61,0x65,
0x64,0x64,0x63,0x63,0x63,0x65,0x65,0x65,0x64,0x65,0x65,0x66,0x63,0x63,0x63,0x64,
0x64,0x65,0x65,0x65,0x65,0x65,0x65,0x65,0x66,0x68,0x69,0x6d,0x6d,0x6d,0x6b,0x6a,
0x69,0x6b,0x6c,0x6e,0x6d,0x6f,0x6e,0x6d,0x6b,0x6d,0x6e,0x70,0x71,0x73,0x75,0x74,
0x73,0x74,0x76,0x78,0x7a,0x7d,0x7e,0x7e,0x7d,0x7e,0x7e,0x80,0x81,0x83,0x83,0x82,
0x81,0x84,0x86,0x88,0x89,0x8a,0x8a,0x8c,0x8b,0x8c,0x8c,0x8d,0x8c,0x8e,0x8e,0x8e,
0x90,0x92,0x92,0x92,0x93,0x95,0x97,0x99,0x96,0x94,0x94,0x92,0x91,0x8e,0x8f,0x8e,
0x8d,0x8b,0x88,0x84,0x83,0x82,0x7f,0x7e,0x7a,0x78,0x76,0x72,0x6c,0x6a,0x66,0x63,
0x5e,0x5b,0x58,0x55,0x51,0x4c,0x49,0x47,0x42,0x3e,0x3c,0x39,0x36,0x34,0x30,0x2d,
0x2c,0x2b,0x28,0x28,0x28,0x2a,0x2b,0x2d,0x30,0x32,0x33,0x35,0x39,0x42,0x49,0x4f,
0x59,0x5c,0x61,0x69,0x6e,0x74,0x78,0x80,0x83,0x88,0x8b,0x8e,0x92,0x97,0x98,0x97,
0x96,0x95,0x93,0x91,0x8b,0x85,0x81,0x7c,0x77,0x6f,0x65,0x5c,0x53,0x4d,0x47,0x41,
0x3c,0x39,0x35,0x32,0x2e,0x2d,0x2d,0x2f,0x30,0x33,0x35,0x3a,0x3d,0x44,0x4b,0x55,
0x5d,0x68,0x6f,0x79,0x7f,0x84,0x8b,0x92,0x95,0x99,0x97,0x92,0x8e,0x89,0x83,0x7d,
0x74,0x6c,0x62,0x58,0x4d,0x45,0x3f,0x3a,0x34,0x31,0x2e,0x2c,0x2e,0x31,0x38,0x42,
0x49,0x51,0x56,0x5e,0x68,0x74,0x7f,0x88,0x8e,0x92,0x92,0x8e,0x8b,0x87,0x81,0x7a,
0x6e,0x63,0x59,0x4f,0x47,0x41,0x3b,0x37,0x34,0x35,0x35,0x36,0x3a,0x40,0x47,0x53,
0x5f,0x6d,0x7a,0x85,0x8a,0x8e,0x8e,0x8e,0x87,0x80,0x76,0x6d,0x62,0x56,0x49,0x42,
0x38,0x33,0x31,0x30,0x32,0x38,0x40,0x4a,0x55,0x63,0x71,0x7c,0x89,0x8f,0x91,0x91,
0x8a,0x7e,0x76,0x65,0x57,0x4d,0x42,0x3b,0x35,0x33,0x33,0x37,0x3c,0x46,0x52,0x60,
0x6e,0x7d,0x87,0x8c,0x8e,0x8d,0x88,0x7e,0x73,0x69,0x5c,0x4e,0x3f,0x35,0x30,0x31,
0x34,0x3b,0x45,0x51,0x60,0x71,0x7e,0x8a,0x92,0x94,0x90,0x88,0x7b,0x6d,0x5d,0x4f,
0x42,0x38,0x30,0x2e,0x2d,0x39,0x46,0x55,0x67,0x78,0x83,0x8e,0x8c,0x84,0x7a,0x6d,
0x61,0x55,0x49,0x3e,0x35,0x31,0x33,0x39,0x44,0x56,0x6b,0x7e,0x89,0x8c,0x89,0x81,
0x75,0x6c,0x60,0x54,0x47,0x3c,0x34,0x32,0x36,0x42,0x54,0x69,0x7a,0x86,0x8c,0x89,
0x81,0x78,0x69,0x59,0x4c,0x41,0x36,0x30,0x33,0x3b,0x4b,0x61,0x75,0x84,0x8b,0x89,
0x82,0x78,0x6b,0x5c,0x4d,0x40,0x36,0x32,0x34,0x40,0x51,0x65,0x74,0x80,0x84,0x80,
0x77,0x6e,0x5f,0x53,0x48,0x3e,0x38,0x3b,0x44,0x55,0x66,0x75,0x81,0x86,0x81,0x75,
0x67,0x5b,0x4e,0x42,0x3d,0x3c,0x42,0x51,0x61,0x72,0x80,0x86,0x84,0x7b,0x6c,0x5c,
0x4d,0x42,0x3a,0x3a,0x40,0x4c,0x5c,0x6e,0x7c,0x84,0x84,0x78,0x69,0x59,0x4c,0x43,
0x3f,0x41,0x49,0x5a,0x6a,0x75,0x7c,0x80,0x7d,0x6e,0x5d,0x4b,0x3f,0x40,0x45,0x4d,
0x58,0x67,0x74,0x7e,0x7e,0x79,0x6e,0x5f,0x50,0x45,0x40,0x45,0x4f,0x5e,0x6b,0x76,
0x7a,0x78,0x70,0x63,0x54,0x47,0x42,0x43,0x4b,0x5a,0x67,0x6f,0x73,0x75,0x70,0x65,
0x57,0x4e,0x4b,0x4e,0x53,0x5d,0x69,0x71,0x76,0x75,0x6d,0x63,0x57,0x4d,0x46,0x48,
0x50,0x5c,0x67,0x72,0x71,0x6c,0x65,0x5c,0x53,0x51,0x4f,0x53,0x5c,0x66,0x6d,0x71,
0x6f,0x68,0x5e,0x56,0x4e,0x4d,0x52,0x5d,0x67,0x6e,0x70,0x6d,0x64,0x5c,0x56,0x53,
0x52,0x56,0x5c,0x61,0x64,0x67,0x66,0x64,0x5f,0x5c,0x58,0x57,0x5c,0x61,0x66,0x6b,
0x66,0x60,0x5a,0x56,0x54,0x56,0x5c,0x62,0x65,0x66,0x63,0x5a,0x56,0x54,0x54,0x5c,
0x64,0x6a,0x6c,0x6b,0x66,0x61,0x59,0x56,0x58,0x5e,0x64,0x6b,0x6c,0x68,0x5f,0x57,
0x4f,0x4d,0x53,0x5d,0x66,0x6e,0x6d,0x68,0x5e,0x55,0x4e,0x51,0x59,0x64,0x6e,0x72,
0x6f,0x64,0x55,0x49,0x44,0x4b,0x59,0x68,0x75,0x78,0x71,0x64,0x53,0x48,0x48,0x54,
0x64,0x75,0x7d,0x7a,0x68,0x56,0x46,0x41,0x49,0x5d,0x70,0x7c,0x7a,0x6c,0x58,0x44,
0x3c,0x45,0x59,0x6f,0x7d,0x7f,0x72,0x5a,0x42,0x37,0x40,0x58,0x71,0x81,0x82,0x73,
0x5a,0x45,0x39,0x43,0x5c,0x77,0x85,0x84,0x71,0x56,0x3c,0x3a,0x46,0x61,0x7b,0x89,
0x7f,0x6c,0x4c,0x38,0x39,0x4e,0x6a,0x80,0x85,0x78,0x5d,0x43,0x38,0x43,0x5d,0x78,
0x86,0x83,0x6d,0x4d,0x36,0x38,0x4d,0x6d,0x84,0x89,0x78,0x59,0x3e,0x38,0x48,0x67,
0x80,0x87,0x77,0x59,0x3c,0x30,0x3a,0x5b,0x77,0x84,0x7c,0x61,0x43,0x38,0x3f,0x5a,
0x78,0x86,0x7d,0x63,0x45,0x35,0x3f,0x5c,0x7a,0x89,0x80,0x65,0x47,0x3b,0x44,0x5d,
0x79,0x87,0x7c,0x61,0x45,0x3d,0x4a,0x64,0x7b,0x82,0x74,0x58,0x3f,0x3a,0x4c,0x66,
0x7c,0x7f,0x6c,0x52,0x40,0x45,0x5c,0x78,0x85,0x7e,0x65,0x4b,0x3d,0x47,0x60,0x74,
0x7b,0x6c,0x53,0x42,0x42,0x56,0x71,0x80,0x7a,0x66,0x4f,0x46,0x51,0x68,0x7a,0x7c,
0x6b,0x54,0x45,0x47,0x58,0x6b,0x76,0x70,0x5d,0x4c,0x4a,0x57,0x6b,0x78,0x75,0x64,
0x51,0x49,0x51,0x63,0x72,0x74,0x68,0x56,0x4d,0x55,0x65,0x73,0x76,0x6d,0x5c,0x51,
0x51,0x5e,0x6d,0x72,0x6b,0x5d,0x51,0x51,0x5b,0x68,0x6e,0x69,0x5c,0x51,0x4f,0x5a,
0x66,0x6d,0x6c,0x62,0x56,0x54,0x5b,0x67,0x6f,0x6e,0x65,0x5a,0x58,0x5d,0x64,0x6c,
0x6a,0x63,0x5b,0x56,0x59,0x62,0x69,0x69,0x62,0x5d,0x59,0x5e,0x67,0x6c,0x6a,0x63,
0x58,0x55,0x5a,0x62,0x68,0x69,0x64,0x5d,0x59,0x5b,0x61,0x67,0x68,0x65,0x5f,0x5c,
0x5d,0x60,0x65,0x64,0x5f,0x5f,0x5e,0x60,0x63,0x65,0x61,0x5f,0x5d,0x5f,0x61,0x66,
0x65,0x65,0x61,0x5d,0x5d,0x62,0x66,0x67,0x65,0x61,0x5d,0x5d,0x5e,0x64,0x67,0x65,
0x61,0x60,0x5f,0x60,0x62,0x65,0x65,0x63,0x5f,0x5e,0x5e,0x61,0x61,0x60,0x5e,0x5e,
0x5e,0x61,0x61,0x61,0x5f,0x60,0x5e,0x60,0x61,0x63,0x62,0x60,0x5c,0x5c,0x5e,0x61,
0x61,0x62,0x61,0x62,0x62,0x63,0x64,0x65,0x63,0x63,0x61,0x61,0x62,0x64,0x63,0x61,
0x5e,0x5f,0x5f,0x60,0x61,0x61,0x60,0x60,0x5e,0x61,0x61,0x65,0x64,0x64,0x63,0x63,
0x62,0x63,0x63,0x62,0x61,0x61,0x5e,0x5f,0x5f,0x61,0x62,0x61,0x60,0x5f,0x5e,0x5f,
0x61,0x62,0x63,0x63,0x62,0x5f,0x5d,0x5c,0x5d,0x5f,0x61,0x61,0x5f,0x60,0x60,0x60,
0x60,0x61,0x62,0x62,0x61,0x61,0x5f,0x61,0x5e,0x5e,0x61,0x61,0x5f,0x5e,0x5d,0x5d,
0x60,0x61,0x62,0x62,0x63,0x61,0x61,0x62,0x62,0x64,0x64,0x61,0x60,0x61,0x63,0x63,
0x61,0x61,0x5f,0x61,0x61,0x62,0x62,0x61,0x5f,0x60,0x61,0x64,0x66,0x69,0x68,0x64,
0x60,0x5f,0x60,0x62,0x61,0x61,0x60,0x5f,0x5e,0x5d,0x5d,0x60,0x63,0x64,0x62,0x5e,
0x5e,0x5d,0x5d,0x60,0x62,0x63,0x64,0x61,0x60,0x61,0x61,0x61,0x61,0x64,0x63,0x62,
0x61,0x63,0x64,0x65,0x65,0x65,0x64,0x63,0x63,0x64,0x64,0x64,0x64,0x62,0x60,0x60,
0x60,0x62,0x64,0x65,0x64,0x63,0x61,0x5e,0x5d,0x5f,0x60,0x61,0x60,0x5f,0x5e,0x5f,
0x5f,0x60,0x62,0x64,0x63,0x64,0x64,0x63,0x5f,0x60,0x5f,0x60,0x61,0x63,0x61,0x61,
0x5e,0x5e,0x5f,0x61,0x60,0x61,0x60,0x5f,0x5f,0x61,0x62,0x63,0x62,0x61,0x60,0x60,
0x5f,0x60,0x61,0x61,0x5e,0x5e,0x5c,0x5d,0x5f,0x61,0x61,0x61,0x5e,0x5e,0x5c,0x60,
0x61,0x63,0x64,0x63,0x61,0x61,0x60,0x5e,0x5e,0x5f,0x5d,0x5d,0x5d,0x5e,0x60,0x61,
0x60,0x5d,0x5f,0x5f,0x5f,0x62,0x64,0x64,0x64,0x5f,0x5e,0x60,0x61,0x61,0x61,0x5f,
0x5e,0x5e,0x5e,0x5e,0x5f,0x61,0x61,0x61,0x61,0x62,0x61,0x61,0x5f,0x5f,0x60,0x60,
0x5e,0x5e,0x5e,0x5d,0x5e,0x60,0x61,0x63,0x63,0x61,0x60,0x62,0x63,0x64,0x65,0x63,
0x5d,0x5d,0x5c,0x5c,0x5b,0x5d,0x5c,0x5e,0x5d,0x5f,0x60,0x62,0x63,0x64,0x64,0x65,
0x65,0x65,0x64,0x61,0x5f,0x5e,0x5d,0x5d,0x5d,0x5e,0x60,0x60,0x5f,0x5d,0x59,0x55,
0x51,0x4f,0x4a,0x46,0x42,0x3d,0x39,0x38,0x36,0x38,0x38,0x38,0x35,0x35,0x34,0x34,
0x32,0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x35,0x33,0x33,
0x34,0x34,0x33,0x33,0x32,0x33,0x34,0x36,0x38,0x39,0x3a,0x3a,0x37,0x38,0x3a,0x3b,
0x38,0x35,0x32,0x32,0x31,0x33,0x31,0x35,0x36,0x36,0x36,0x36,0x36,0x39,0x39,0x38,
0x38,0x38,0x36,0x35,0x34,0x34,0x34,0x35,0x36,0x36,0x35,0x35,0x33,0x33,0x35,0x36,
0x36,0x36,0x36,0x38,0x38,0x37,0x36,0x35,0x34,0x35,0x35,0x35,0x35,0x35,0x34,0x32,
0x31,0x33,0x32,0x36,0x35,0x35,0x34,0x35,0x35,0x37,0x37,0x38,0x37,0x36,0x34,0x31,
// Line 20
0x35,0x36,0x36,0x38,0x38,0x38,0x35,0x34,0x32,0x33,0x33,0x33,0x33,0x36,0x35,0x35,
0x36,0x38,0x3a,0x3a,0x39,0x3a,0x3b,0x3b,0x3a,0x39,0x3c,0x41,0x48,0x54,0x60,0x6f,
0x7f,0x8f,0x9b,0xa7,0xb2,0xbc,0xc1,0xc1,0xbf,0xbe,0xbf,0xc0,0xbf,0xbe,0xbe,0xbe,
0xbf,0xbf,0xc0,0xc1,0xc1,0xc0,0xbf,0xbf,0xbf,0xbe,0xbe,0xbe,0xbe,0xbf,0xbe,0xbd,
0xbd,0xbd,0xbb,0xbb,0xb8,0xb9,0xbb,0xbc,0xbb,0xbe,0xc1,0xc3,0xc3,0xc3,0xc2,0xc2,
0xc3,0xc3,0xc1,0xc1,0xc1,0xbf,0xbf,0xbe,0xbb,0xbb,0xbb,0xbc,0xbd,0xbe,0xbd,0xbc,
0xba,0xb9,0xb9,0xbc,0xbd,0xbe,0xbf,0xbe,0xbd,0xbd,0xbb,0xbb,0xbc,0xbc,0xbd,0xbe,
0xbe,0xbe,0xbd,0xbc,0xbc,0xbd,0xbf,0xc1,0xbf,0xbf,0xbe,0xbe,0xbe,0xbe,0xbd,0xbe,
0xbb,0xbb,0xbb,0xbc,0xbe,0xbe,0xbe,0xbe,0xbe,0xbf,0xc1,0xc1,0xc3,0xc4,0xc3,0xc3,
0xc1,0xbf,0xbc,0xbd,0xba,0xb9,0xb9,0xba,0xb9,0xbb,0xba,0xbb,0xbe,0xbf,0xbd,0xbe,
0xbc,0xbb,0xbc,0xbb,0xba,0xbb,0xbc,0xbe,0xbe,0xc0,0xc1,0xc1,0xbf,0xbf,0xbf,0xc1,
0xc2,0xc3,0xc2,0xc0,0xbd,0xbc,0xbb,0xbc,0xbc,0xbc,0xbb,0xb9,0xb9,0xba,0xbb,0xbd,
0xbf,0xc1,0xc1,0xbd,0xb7,0xb1,0xa9,0xa1,0x9b,0x93,0x8a,0x83,0x7b,0x74,0x71,0x70,
0x70,0x6e,0x73,0x73,0x73,0x76,0x75,0x74,0x73,0x72,0x71,0x71,0x70,0x70,0x70,0x71,
0x70,0x71,0x72,0x74,0x75,0x73,0x72,0x71,0x73,0x75,0x75,0x73,0x70,0x6e,0x6e,0x6e,
0x6f,0x70,0x6f,0x6e,0x6e,0x6d,0x6d,0x6a,0x6f,0x70,0x70,0x70,0x70,0x70,0x71,0x71,
0x72,0x74,0x75,0x72,0x70,0x70,0x70,0x70,0x6f,0x73,0x76,0x7a,0x7e,0x84,0x89,0x8e,
0x91,0x96,0x97,0x98,0x98,0x97,0x95,0x93,0x91,0x8f,0x8d,0x8c,0x8b,0x89,0x84,0x80,
0x7c,0x7a,0x75,0x6d,0x69,0x64,0x5e,0x5a,0x56,0x53,0x50,0x4f,0x4a,0x49,0x47,0x47,
0x47,0x47,0x47,0x46,0x47,0x4a,0x4d,0x4f,0x4f,0x52,0x57,0x5d,0x61,0x66,0x6a,0x6e,
0x72,0x76,0x7b,0x7f,0x82,0x86,0x8a,0x8d,0x91,0x96,0x99,0x9b,0x9c,0x9c,0x99,0x97,
0x96,0x95,0x93,0x90,0x8c,0x8a,0x87,0x84,0x7f,0x7b,0x79,0x76,0x71,0x70,0x69,0x62,
0x5f,0x5b,0x55,0x50,0x4f,0x4e,0x4c,0x49,0x46,0x44,0x43,0x43,0x45,0x49,0x4c,0x4d,
0x4c,0x4d,0x50,0x56,0x59,0x5f,0x62,0x66,0x68,0x6c,0x6f,0x74,0x7a,0x80,0x83,0x87,
0x8b,0x90,0x93,0x98,0x99,0x99,0x99,0x9b,0x99,0x9a,0x98,0x94,0x91,0x8d,0x8a,0x86,
0x81,0x7e,0x7a,0x76,0x71,0x6d,0x6b,0x68,0x64,0x62,0x5e,0x59,0x57,0x54,0x52,0x50,
0x4c,0x4a,0x48,0x46,0x43,0x43,0x46,0x48,0x49,0x4c,0x4e,0x51,0x56,0x5c,0x5f,0x64,
0x67,0x6b,0x70,0x74,0x78,0x7b,0x82,0x86,0x89,0x8d,0x91,0x93,0x99,0x9b,0x9b,0x9e,
0x9d,0x9c,0x9a,0x99,0x97,0x95,0x91,0x8d,0x8a,0x84,0x7e,0x7a,0x78,0x76,0x72,0x6d,
0x68,0x64,0x61,0x5f,0x5b,0x56,0x51,0x4e,0x4e,0x4d,0x4b,0x49,0x48,0x49,0x49,0x49,
0x4a,0x4d,0x52,0x57,0x5c,0x64,0x69,0x6c,0x6e,0x6e,0x6e,0x6f,0x6f,0x70,0x71,0x71,
0x6e,0x6c,0x6d,0x70,0x73,0x75,0x74,0x75,0x75,0x75,0x73,0x73,0x73,0x73,0x74,0x73,
0x70,0x70,0x70,0x70,0x6f,0x71,0x71,0x71,0x73,0x73,0x71,0x73,0x74,0x74,0x73,0x71,
0x6e,0x71,0x71,0x73,0x72,0x71,0x6f,0x6e,0x6d,0x6e,0x70,0x71,0x71,0x71,0x72,0x72,
0x71,0x71,0x71,0x71,0x71,0x70,0x6e,0x6e,0x6d,0x6e,0x6e,0x71,0x72,0x73,0x76,0x74,
0x71,0x70,0x6d,0x68,0x65,0x61,0x5a,0x58,0x56,0x57,0x59,0x5c,0x61,0x68,0x71,0x7d,
0x86,0x8e,0x90,0x8f,0x8d,0x8a,0x84,0x7d,0x73,0x6a,0x62,0x5a,0x52,0x4e,0x4d,0x4f,
0x51,0x55,0x5b,0x61,0x6a,0x75,0x7e,0x87,0x8c,0x8f,0x91,0x91,0x8c,0x86,0x7e,0x75,
0x67,0x62,0x59,0x50,0x4c,0x4c,0x4c,0x4c,0x4a,0x4f,0x5a,0x67,0x73,0x7d,0x84,0x8a,
0x91,0x94,0x93,0x8d,0x86,0x7e,0x73,0x68,0x5c,0x53,0x4d,0x49,0x46,0x46,0x47,0x4d,
0x54,0x5e,0x67,0x73,0x7d,0x88,0x8f,0x95,0x94,0x8f,0x88,0x81,0x78,0x72,0x65,0x59,
0x51,0x4a,0x47,0x47,0x48,0x4d,0x53,0x59,0x60,0x69,0x73,0x80,0x8a,0x93,0x93,0x93,
0x8f,0x8a,0x80,0x79,0x6f,0x66,0x5a,0x50,0x48,0x47,0x47,0x4a,0x4d,0x53,0x59,0x61,
0x6b,0x76,0x80,0x8c,0x91,0x94,0x94,0x91,0x8a,0x81,0x76,0x6c,0x62,0x5a,0x51,0x49,
0x46,0x46,0x47,0x4b,0x52,0x5d,0x67,0x6f,0x74,0x7b,0x81,0x86,0x86,0x85,0x83,0x7f,
0x79,0x76,0x72,0x70,0x6e,0x6d,0x6d,0x6d,0x6e,0x70,0x71,0x71,0x71,0x71,0x6e,0x6c,
0x6a,0x6a,0x6d,0x70,0x71,0x6e,0x70,0x70,0x6e,0x6f,0x70,0x70,0x71,0x71,0x6f,0x6d,
0x6b,0x6b,0x6d,0x6e,0x6f,0x72,0x72,0x72,0x70,0x71,0x71,0x71,0x72,0x73,0x73,0x73,
0x70,0x6f,0x6f,0x6e,0x6d,0x6d,0x6e,0x6e,0x70,0x72,0x72,0x70,0x70,0x71,0x73,0x73,
0x71,0x71,0x72,0x6e,0x68,0x67,0x68,0x68,0x69,0x6b,0x6d,0x75,0x7d,0x84,0x86,0x84,
0x7b,0x71,0x68,0x60,0x58,0x56,0x55,0x59,0x61,0x6b,0x76,0x80,0x85,0x86,0x82,0x79,
0x6d,0x61,0x57,0x50,0x4d,0x53,0x5b,0x69,0x78,0x86,0x8d,0x8e,0x86,0x7e,0x71,0x67,
0x59,0x52,0x4e,0x50,0x50,0x5d,0x6a,0x79,0x86,0x8b,0x88,0x82,0x76,0x69,0x5e,0x55,
0x50,0x52,0x55,0x5c,0x6a,0x7a,0x86,0x8c,0x8d,0x89,0x7f,0x73,0x64,0x59,0x50,0x4d,
0x4e,0x59,0x67,0x78,0x84,0x8b,0x8c,0x89,0x81,0x77,0x68,0x5f,0x55,0x4e,0x4d,0x55,
0x60,0x71,0x81,0x89,0x8b,0x88,0x81,0x78,0x6b,0x5e,0x54,0x4f,0x4e,0x54,0x60,0x6e,
0x7e,0x8c,0x92,0x8f,0x86,0x7b,0x71,0x68,0x5f,0x59,0x58,0x57,0x59,0x61,0x69,0x72,
0x78,0x7b,0x7b,0x78,0x75,0x73,0x70,0x72,0x6f,0x6e,0x6e,0x70,0x71,0x71,0x70,0x6f,
0x6e,0x6c,0x6b,0x6c,0x6c,0x6d,0x6e,0x70,0x70,0x71,0x71,0x74,0x74,0x75,0x74,0x74,
0x75,0x74,0x72,0x72,0x70,0x71,0x6f,0x6e,0x6c,0x6e,0x72,0x73,0x71,0x6f,0x6e,0x6b,
0x6c,0x70,0x75,0x78,0x76,0x70,0x68,0x61,0x5e,0x5f,0x69,0x73,0x7d,0x81,0x7b,0x6e,
0x64,0x5e,0x60,0x68,0x73,0x7e,0x80,0x79,0x6c,0x62,0x5d,0x5f,0x67,0x72,0x7b,0x7f,
0x7b,0x73,0x68,0x5f,0x5d,0x61,0x6b,0x75,0x7d,0x7f,0x78,0x6c,0x61,0x5c,0x5f,0x66,
0x73,0x7b,0x7f,0x7c,0x71,0x65,0x5e,0x5d,0x62,0x70,0x7b,0x82,0x82,0x7b,0x6e,0x62,
0x5b,0x5d,0x64,0x6e,0x77,0x7e,0x7e,0x75,0x67,0x5d,0x59,0x5e,0x6a,0x77,0x7f,0x80,
0x78,0x6c,0x61,0x5a,0x59,0x63,0x6e,0x78,0x7c,0x7b,0x73,0x67,0x5c,0x58,0x5d,0x6b,
0x79,0x84,0x85,0x7c,0x6f,0x65,0x5f,0x62,0x6b,0x77,0x7c,0x7b,0x73,0x6b,0x64,0x65,
0x6a,0x72,0x79,0x7b,0x77,0x70,0x68,0x65,0x68,0x6e,0x74,0x78,0x78,0x75,0x71,0x6f,
0x6e,0x6c,0x6e,0x6c,0x69,0x6b,0x6a,0x6b,0x6f,0x70,0x70,0x70,0x70,0x70,0x70,0x6f,
0x6d,0x6d,0x6d,0x6f,0x6f,0x70,0x71,0x72,0x71,0x6f,0x6f,0x71,0x72,0x73,0x73,0x71,
0x70,0x71,0x6e,0x6c,0x6c,0x6f,0x71,0x71,0x73,0x74,0x70,0x6e,0x6a,0x6b,0x70,0x76,
0x79,0x7a,0x73,0x6a,0x61,0x5f,0x66,0x75,0x82,0x86,0x7b,0x6a,0x59,0x55,0x60,0x72,
0x82,0x88,0x7d,0x67,0x54,0x52,0x61,0x79,0x8c,0x90,0x82,0x69,0x53,0x4d,0x5f,0x76,
0x89,0x8f,0x81,0x69,0x56,0x51,0x5d,0x76,0x88,0x8f,0x7f,0x69,0x55,0x51,0x5e,0x75,
0x86,0x8a,0x7d,0x68,0x56,0x51,0x5e,0x75,0x88,0x8c,0x7f,0x6a,0x58,0x53,0x5d,0x72,
0x83,0x8a,0x7e,0x68,0x54,0x4f,0x5c,0x73,0x84,0x89,0x7e,0x69,0x55,0x50,0x5d,0x74,
0x86,0x8c,0x80,0x6a,0x57,0x52,0x5c,0x74,0x86,0x89,0x80,0x6a,0x56,0x54,0x5f,0x73,
0x85,0x8b,0x84,0x75,0x65,0x5e,0x62,0x6f,0x7a,0x7f,0x78,0x6e,0x65,0x64,0x68,0x6e,
0x73,0x76,0x75,0x72,0x6e,0x6e,0x6e,0x70,0x70,0x6f,0x6e,0x6e,0x6b,0x70,0x6e,0x6e,
0x6e,0x6d,0x6c,0x6e,0x6f,0x70,0x71,0x71,0x71,0x70,0x70,0x70,0x71,0x72,0x72,0x73,
0x72,0x71,0x70,0x6f,0x6d,0x6e,0x70,0x71,0x71,0x71,0x70,0x6f,0x6e,0x6f,0x71,0x72,
0x73,0x73,0x71,0x6d,0x6d,0x6e,0x72,0x72,0x70,0x6d,0x6b,0x6c,0x70,0x75,0x76,0x75,
0x72,0x6b,0x67,0x6c,0x72,0x77,0x75,0x70,0x67,0x64,0x63,0x69,0x71,0x77,0x75,0x6d,
0x66,0x65,0x6a,0x73,0x79,0x79,0x74,0x6c,0x65,0x67,0x6f,0x78,0x7b,0x76,0x6c,0x67,
0x69,0x71,0x79,0x7c,0x78,0x6f,0x68,0x68,0x6e,0x78,0x7d,0x7a,0x71,0x69,0x68,0x70,
0x77,0x7a,0x77,0x6e,0x67,0x67,0x6d,0x76,0x7a,0x77,0x6d,0x65,0x66,0x6e,0x77,0x7d,
0x79,0x6f,0x68,0x66,0x6a,0x75,0x79,0x76,0x6c,0x62,0x61,0x67,0x73,0x77,0x75,0x6e,
0x66,0x62,0x6b,0x75,0x79,0x77,0x6d,0x62,0x61,0x6b,0x77,0x7f,0x7b,0x70,0x62,0x5f,
0x66,0x75,0x7f,0x7f,0x75,0x67,0x5d,0x61,0x6f,0x7c,0x80,0x78,0x6a,0x61,0x60,0x67,
0x71,0x79,0x78,0x70,0x67,0x67,0x6b,0x72,0x77,0x76,0x6e,0x6a,0x68,0x6b,0x70,0x74,
0x71,0x6e,0x6a,0x6b,0x6e,0x73,0x73,0x71,0x6f,0x6f,0x6f,0x71,0x72,0x73,0x72,0x70,
0x6e,0x6e,0x6e,0x6f,0x6e,0x6c,0x6a,0x6b,0x6e,0x72,0x73,0x71,0x70,0x6f,0x70,0x6f,
0x6f,0x72,0x72,0x70,0x6f,0x6f,0x70,0x73,0x73,0x72,0x70,0x6e,0x6c,0x6e,0x70,0x71,
0x70,0x6e,0x6c,0x6e,0x6f,0x70,0x70,0x72,0x71,0x70,0x70,0x6e,0x6e,0x71,0x70,0x70,
0x70,0x72,0x74,0x73,0x71,0x70,0x70,0x71,0x70,0x70,0x6f,0x6d,0x68,0x66,0x5f,0x59,
0x53,0x4d,0x45,0x3f,0x3d,0x3b,0x37,0x36,0x33,0x30,0x32,0x35,0x37,0x39,0x38,0x38,
// Line 21
0x37,0x37,0x36,0x38,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x38,
0x36,0x36,0x37,0x38,0x39,0x39,0x39,0x38,0x38,0x38,0x37,0x37,0x36,0x36,0x36,0x36,
0x36,0x37,0x37,0x38,0x39,0x39,0x38,0x39,0x3a,0x3d,0x3c,0x3c,0x3b,0x3e,0x41,0x43,
0x44,0x48,0x48,0x4b,0x4d,0x50,0x52,0x55,0x58,0x5b,0x5f,0x62,0x63,0x64,0x64,0x65,
0x66,0x68,0x69,0x68,0x68,0x68,0x64,0x64,0x63,0x64,0x63,0x5f,0x5a,0x58,0x56,0x54,
0x51,0x4f,0x4d,0x4c,0x4b,0x49,0x47,0x45,0x44,0x44,0x43,0x41,0x3e,0x3d,0x3b,0x39,
0x3b,0x3b,0x3c,0x3b,0x3e,0x40,0x40,0x42,0x45,0x47,0x4b,0x4c,0x4c,0x50,0x51,0x54,
0x57,0x5a,0x5b,0x5f,0x5f,0x63,0x65,0x66,0x66,0x67,0x68,0x68,0x65,0x65,0x64,0x63,
0x62,0x61,0x5f,0x5d,0x5a,0x57,0x57,0x57,0x55,0x52,0x4f,0x4d,0x4c,0x4b,0x49,0x47,
0x47,0x44,0x3f,0x3e,0x3c,0x3b,0x3c,0x3b,0x38,0x39,0x3a,0x3d,0x3d,0x41,0x43,0x45,
0x47,0x49,0x49,0x4b,0x4d,0x50,0x53,0x55,0x56,0x58,0x58,0x59,0x5c,0x60,0x64,0x67,
0x67,0x67,0x68,0x6a,0x6b,0x6c,0x6d,0x6b,0x69,0x67,0x63,0x62,0x5f,0x5d,0x59,0x57,
0x56,0x56,0x54,0x54,0x51,0x4d,0x49,0x46,0x41,0x45,0x44,0x42,0x40,0x3f,0x3e,0x40,
0x3e,0x3e,0x41,0x43,0x42,0x40,0x3e,0x3e,0x40,0x44,0x47,0x48,0x4b,0x4e,0x51,0x53,
0x54,0x57,0x5a,0x5b,0x59,0x5d,0x60,0x64,0x64,0x65,0x66,0x68,0x69,0x6b,0x6a,0x6b,
0x6a,0x68,0x65,0x62,0x60,0x62,0x60,0x5e,0x5a,0x59,0x57,0x56,0x51,0x4f,0x4d,0x4d,
0x4b,0x4a,0x48,0x46,0x41,0x40,0x3e,0x3e,0x3c,0x3a,0x38,0x38,0x38,0x3a,0x3e,0x40,
0x42,0x44,0x46,0x49,0x4b,0x4e,0x51,0x54,0x57,0x57,0x56,0x58,0x59,0x5e,0x63,0x65,
0x65,0x63,0x66,0x66,0x66,0x67,0x69,0x6a,0x6b,0x69,0x64,0x63,0x61,0x62,0x62,0x5d,
0x58,0x58,0x57,0x57,0x55,0x53,0x50,0x4f,0x4d,0x4b,0x47,0x46,0x45,0x46,0x44,0x3e,
0x3b,0x3c,0x3c,0x3c,0x3c,0x3e,0x40,0x3e,0x3c,0x3c,0x3e,0x44,0x48,0x4c,0x51,0x50,
0x4f,0x51,0x53,0x57,0x5a,0x5d,0x5d,0x5e,0x5e,0x60,0x60,0x63,0x65,0x68,0x6a,0x6a,
0x67,0x66,0x65,0x64,0x64,0x64,0x63,0x65,0x63,0x5e,0x5b,0x59,0x58,0x56,0x51,0x4d,
0x4b,0x4a,0x47,0x44,0x43,0x44,0x43,0x43,0x3f,0x3d,0x3e,0x3e,0x3c,0x3c,0x3c,0x3d,
0x3c,0x3d,0x3d,0x3e,0x42,0x46,0x47,0x4b,0x4a,0x4d,0x51,0x55,0x58,0x5e,0x60,0x61,
0x60,0x61,0x61,0x63,0x65,0x68,0x6a,0x6d,0x6c,0x6a,0x68,0x67,0x67,0x68,0x67,0x65,
0x63,0x5e,0x59,0x57,0x56,0x56,0x57,0x54,0x50,0x4c,0x49,0x47,0x45,0x44,0x41,0x3f,
0x3e,0x3c,0x39,0x3a,0x3a,0x3b,0x3b,0x3c,0x3c,0x3c,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,
0x3e,0x3d,0x3b,0x3b,0x3b,0x3d,0x40,0x42,0x41,0x3e,0x3d,0x3d,0x3b,0x3b,0x3b,0x3b,
0x3b,0x3b,0x39,0x38,0x38,0x3b,0x3e,0x3e,0x3b,0x39,0x37,0x36,0x36,0x37,0x39,0x3a,
0x39,0x39,0x39,0x3a,0x3a,0x3b,0x3a,0x39,0x36,0x37,0x37,0x39,0x3b,0x3c,0x3b,0x3b,
0x3b,0x3d,0x3d,0x3e,0x3b,0x3a,0x3a,0x39,0x39,0x3c,0x3c,0x3b,0x3b,0x3b,0x39,0x3b,
0x3d,0x3e,0x3d,0x3c,0x3b,0x3a,0x38,0x37,0x38,0x39,0x39,0x38,0x36,0x36,0x37,0x38,
0x37,0x37,0x38,0x39,0x3b,0x3e,0x43,0x4a,0x4f,0x55,0x58,0x5c,0x61,0x67,0x68,0x6b,
0x69,0x69,0x6b,0x6b,0x6b,0x6c,0x6b,0x6b,0x6b,0x6b,0x6a,0x6a,0x6a,0x6a,0x68,0x67,
0x66,0x66,0x66,0x67,0x67,0x69,0x6a,0x69,0x6a,0x6a,0x69,0x6b,0x6c,0x6e,0x6f,0x6d,
0x6a,0x68,0x67,0x67,0x67,0x69,0x68,0x68,0x68,0x69,0x69,0x6c,0x6d,0x6e,0x70,0x6f,
0x6c,0x6a,0x6a,0x6a,0x6a,0x6b,0x6b,0x69,0x67,0x67,0x67,0x6a,0x6a,0x6a,0x6b,0x6d,
0x6a,0x66,0x63,0x64,0x68,0x6b,0x6b,0x6a,0x69,0x6a,0x6b,0x6b,0x6a,0x6b,0x6e,0x70,
0x6d,0x6b,0x67,0x67,0x6a,0x6b,0x6b,0x6b,0x6b,0x6c,0x6d,0x6c,0x69,0x69,0x6a,0x6a,
0x68,0x69,0x67,0x65,0x65,0x62,0x5f,0x5c,0x57,0x53,0x4e,0x49,0x42,0x3e,0x3e,0x3e,
0x3c,0x3d,0x3a,0x38,0x39,0x38,0x37,0x37,0x36,0x36,0x37,0x38,0x37,0x39,0x3b,0x3b,
0x3b,0x3a,0x39,0x3b,0x3b,0x39,0x36,0x36,0x36,0x39,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,
0x3a,0x39,0x37,0x38,0x38,0x39,0x34,0x39,0x37,0x38,0x39,0x3b,0x39,0x39,0x38,0x37,
0x36,0x36,0x36,0x39,0x39,0x39,0x3a,0x3b,0x3b,0x39,0x38,0x38,0x38,0x39,0x39,0x39,
0x38,0x37,0x35,0x36,0x36,0x38,0x39,0x39,0x38,0x36,0x36,0x37,0x36,0x38,0x38,0x38,
0x39,0x3a,0x39,0x3b,0x3a,0x39,0x3b,0x3c,0x3b,0x3a,0x39,0x36,0x36,0x37,0x39,0x39,
0x39,0x39,0x38,0x39,0x38,0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x36,0x35,0x36,0x37,
0x37,0x36,0x36,0x37,0x37,0x38,0x39,0x38,0x36,0x36,0x35,0x33,0x33,0x34,0x35,0x36,
0x36,0x36,0x36,0x37,0x37,0x36,0x36,0x34,0x33,0x34,0x34,0x34,0x35,0x37,0x36,0x36,
0x34,0x33,0x34,0x33,0x31,0x32,0x32,0x32,0x32,0x34,0x34,0x36,0x37,0x38,0x37,0x37,
0x36,0x36,0x38,0x39,0x38,0x38,0x39,0x3a,0x39,0x3a,0x3b,0x3c,0x3d,0x37,0x36,0x36,
0x37,0x37,0x36,0x34,0x31,0x33,0x34,0x35,0x35,0x37,0x34,0x34,0x35,0x38,0x38,0x39,
0x38,0x37,0x37,0x37,0x36,0x37,0x36,0x37,0x36,0x34,0x30,0x2f,0x32,0x36,0x37,0x38,
0x37,0x37,0x36,0x36,0x36,0x39,0x38,0x36,0x34,0x32,0x31,0x34,0x37,0x39,0x3a,0x3b,
0x3b,0x3c,0x3e,0x3e,0x3c,0x3d,0x3a,0x36,0x34,0x33,0x31,0x34,0x34,0x35,0x36,0x35,
0x33,0x32,0x32,0x32,0x34,0x36,0x38,0x37,0x35,0x34,0x33,0x34,0x35,0x38,0x39,0x36,
0x35,0x36,0x34,0x32,0x31,0x34,0x37,0x3b,0x3b,0x3b,0x39,0x39,0x39,0x39,0x3a,0x3c,
0x3b,0x3d,0x3d,0x3d,0x40,0x46,0x4c,0x51,0x55,0x59,0x5e,0x62,0x65,0x68,0x6b,0x6b,
0x6b,0x6c,0x6a,0x69,0x68,0x68,0x68,0x69,0x69,0x6a,0x6a,0x6a,0x6a,0x6b,0x6b,0x6a,
0x69,0x69,0x68,0x67,0x68,0x6a,0x6a,0x6b,0x68,0x67,0x67,0x66,0x66,0x67,0x67,0x67,
0x67,0x67,0x69,0x6a,0x69,0x6a,0x6c,0x6d,0x6c,0x6a,0x6a,0x69,0x69,0x6b,0x6b,0x6b,
0x69,0x68,0x67,0x69,0x6a,0x6a,0x69,0x69,0x68,0x69,0x6a,0x6a,0x6b,0x6e,0x6b,0x67,
0x64,0x66,0x66,0x67,0x66,0x67,0x67,0x67,0x67,0x67,0x68,0x69,0x69,0x6a,0x6b,0x6b,
0x6a,0x6a,0x69,0x6a,0x6a,0x6a,0x6b,0x6c,0x6b,0x6a,0x69,0x69,0x69,0x6a,0x69,0x68,
0x67,0x65,0x62,0x60,0x5e,0x5c,0x5b,0x56,0x4f,0x49,0x43,0x3e,0x3c,0x3b,0x3b,0x39,
0x38,0x38,0x37,0x39,0x3b,0x3c,0x3c,0x3a,0x36,0x36,0x37,0x38,0x39,0x39,0x39,0x39,
0x38,0x37,0x36,0x38,0x37,0x38,0x39,0x39,0x38,0x3b,0x39,0x38,0x39,0x3b,0x3d,0x3f,
0x3e,0x3c,0x39,0x37,0x35,0x36,0x39,0x3a,0x39,0x37,0x36,0x36,0x36,0x38,0x38,0x3b,
0x3b,0x3b,0x39,0x37,0x36,0x36,0x36,0x38,0x38,0x38,0x39,0x39,0x38,0x39,0x39,0x3b,
0x3b,0x3a,0x3c,0x3b,0x39,0x3b,0x39,0x37,0x38,0x39,0x38,0x38,0x39,0x3a,0x3b,0x39,
0x38,0x36,0x36,0x36,0x35,0x38,0x39,0x39,0x38,0x36,0x35,0x37,0x39,0x3b,0x3a,0x3a,
0x39,0x38,0x36,0x36,0x39,0x3d,0x3f,0x40,0x42,0x47,0x4d,0x53,0x56,0x5a,0x60,0x63,
0x63,0x63,0x65,0x67,0x68,0x69,0x6a,0x6a,0x6a,0x69,0x69,0x6a,0x6b,0x6c,0x6c,0x6b,
0x69,0x6a,0x6a,0x6a,0x6a,0x6b,0x6a,0x6b,0x6c,0x6d,0x6b,0x6c,0x6a,0x68,0x67,0x68,
0x68,0x69,0x67,0x65,0x65,0x65,0x65,0x65,0x67,0x69,0x6a,0x6a,0x68,0x66,0x63,0x5f,
0x5b,0x58,0x52,0x4c,0x46,0x41,0x3d,0x3d,0x3c,0x3c,0x3d,0x3e,0x3e,0x3e,0x3e,0x3e,
0x3d,0x3c,0x39,0x37,0x36,0x38,0x39,0x3a,0x39,0x39,0x3b,0x3d,0x3e,0x3d,0x3d,0x3d,
0x3b,0x39,0x35,0x34,0x34,0x36,0x36,0x35,0x34,0x34,0x35,0x35,0x35,0x39,0x3b,0x3c,
0x3a,0x39,0x36,0x37,0x37,0x39,0x39,0x3c,0x40,0x42,0x46,0x4b,0x53,0x5c,0x60,0x63,
0x64,0x67,0x67,0x66,0x64,0x63,0x63,0x63,0x62,0x63,0x64,0x66,0x67,0x6a,0x6a,0x6b,
0x6b,0x6b,0x6b,0x6f,0x71,0x70,0x6d,0x6c,0x6a,0x6a,0x69,0x69,0x69,0x6d,0x6a,0x67,
0x68,0x69,0x69,0x6a,0x69,0x69,0x68,0x68,0x67,0x65,0x67,0x67,0x67,0x69,0x69,0x65,
0x62,0x5c,0x55,0x51,0x4d,0x4c,0x48,0x44,0x3e,0x3a,0x39,0x39,0x3a,0x3c,0x3d,0x3c,
0x39,0x38,0x37,0x37,0x37,0x38,0x39,0x3b,0x3a,0x39,0x37,0x34,0x36,0x38,0x3a,0x39,
0x39,0x38,0x36,0x34,0x34,0x34,0x39,0x3b,0x38,0x36,0x33,0x33,0x35,0x39,0x3b,0x3e,
0x40,0x40,0x3a,0x39,0x39,0x3b,0x3d,0x3e,0x3c,0x3e,0x3e,0x43,0x48,0x4f,0x55,0x5c,
0x5f,0x63,0x66,0x67,0x67,0x67,0x67,0x68,0x68,0x68,0x66,0x67,0x68,0x67,0x66,0x68,
0x67,0x69,0x69,0x69,0x68,0x6a,0x6c,0x6c,0x6b,0x6b,0x6a,0x6c,0x6d,0x6d,0x69,0x68,
0x68,0x69,0x6a,0x6a,0x6a,0x6b,0x69,0x67,0x67,0x68,0x67,0x67,0x66,0x64,0x63,0x64,
0x63,0x61,0x62,0x5c,0x56,0x54,0x51,0x4f,0x49,0x45,0x40,0x3d,0x3b,0x3b,0x3a,0x3d,
0x3d,0x3b,0x39,0x39,0x36,0x39,0x36,0x35,0x35,0x35,0x34,0x36,0x36,0x38,0x39,0x39,
0x39,0x3b,0x3b,0x39,0x39,0x3b,0x3a,0x38,0x36,0x34,0x34,0x36,0x37,0x38,0x39,0x38,
0x35,0x35,0x37,0x38,0x37,0x38,0x39,0x39,0x39,0x38,0x37,0x39,0x38,0x36,0x36,0x36,
0x36,0x36,0x34,0x32,0x32,0x34,0x36,0x36,0x35,0x36,0x36,0x36,0x34,0x33,0x34,0x34,
0x32,0x33,0x34,0x36,0x36,0x37,0x35,0x36,0x38,0x3b,0x3b,0x39,0x36,0x36,0x36,0x34,
//Field 1
// Line 10
0x39,0x38,0x37,0x38,0x39,0x38,0x37,0x35,0x35,0x37,0x39,0x39,0x38,0x36,0x35,0x34,
0x37,0x39,0x3d,0x3e,0x3e,0x3b,0x39,0x39,0x3b,0x3a,0x39,0x38,0x36,0x35,0x33,0x33,
0x36,0x39,0x39,0x39,0x38,0x38,0x3a,0x3b,0x3b,0x3b,0x3d,0x3b,0x3a,0x37,0x36,0x37,
0x39,0x3a,0x39,0x39,0x35,0x33,0x35,0x35,0x36,0x38,0x38,0x37,0x36,0x33,0x31,0x32,
0x35,0x38,0x39,0x39,0x38,0x35,0x34,0x34,0x35,0x38,0x39,0x39,0x38,0x36,0x35,0x35,
0x35,0x37,0x38,0x36,0x33,0x33,0x35,0x36,0x35,0x34,0x35,0x36,0x38,0x39,0x39,0x39,
0x37,0x34,0x34,0x35,0x37,0x39,0x39,0x37,0x38,0x37,0x39,0x39,0x3b,0x39,0x39,0x39,
0x38,0x35,0x38,0x38,0x39,0x38,0x37,0x38,0x39,0x39,0x38,0x39,0x39,0x39,0x38,0x39,
0x39,0x37,0x37,0x35,0x35,0x36,0x37,0x38,0x3b,0x3d,0x3b,0x39,0x37,0x36,0x37,0x39,
0x39,0x37,0x36,0x36,0x36,0x35,0x35,0x36,0x38,0x39,0x37,0x38,0x38,0x38,0x39,0x39,
0x39,0x39,0x3c,0x3d,0x3c,0x3a,0x39,0x36,0x36,0x36,0x37,0x37,0x38,0x38,0x39,0x3a,
0x3b,0x3b,0x3b,0x3a,0x3a,0x39,0x38,0x37,0x37,0x36,0x35,0x37,0x36,0x35,0x37,0x38,
0x37,0x37,0x36,0x37,0x37,0x36,0x35,0x35,0x36,0x37,0x36,0x38,0x38,0x38,0x39,0x3b,
0x3b,0x3c,0x3c,0x3a,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x3b,0x3b,0x39,0x37,0x37,0x38,
0x38,0x38,0x36,0x34,0x35,0x35,0x36,0x38,0x3b,0x3c,0x39,0x39,0x36,0x36,0x38,0x39,
0x38,0x38,0x37,0x37,0x37,0x38,0x39,0x3c,0x3b,0x39,0x39,0x39,0x39,0x39,0x39,0x36,
0x35,0x35,0x37,0x35,0x38,0x36,0x36,0x37,0x37,0x36,0x37,0x38,0x38,0x39,0x39,0x39,
0x39,0x3a,0x3b,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x39,0x39,0x37,0x37,0x39,0x38,0x35,
0x35,0x37,0x39,0x38,0x38,0x37,0x37,0x37,0x36,0x35,0x36,0x38,0x3a,0x3d,0x3e,0x3b,
0x39,0x38,0x38,0x3a,0x3a,0x39,0x39,0x39,0x37,0x34,0x35,0x38,0x3a,0x39,0x38,0x36,
0x34,0x33,0x33,0x33,0x34,0x34,0x35,0x34,0x33,0x32,0x34,0x35,0x36,0x36,0x37,0x37,
0x38,0x38,0x37,0x39,0x39,0x37,0x37,0x37,0x37,0x39,0x3b,0x3b,0x3b,0x3a,0x39,0x3b,
0x3d,0x3d,0x3e,0x3c,0x39,0x36,0x36,0x35,0x34,0x35,0x36,0x35,0x33,0x31,0x33,0x36,
0x39,0x39,0x3a,0x3d,0x3e,0x3e,0x40,0x3d,0x3b,0x3b,0x39,0x38,0x39,0x3a,0x3b,0x3c,
0x3b,0x3a,0x3b,0x3d,0x3e,0x3d,0x3d,0x3d,0x3d,0x39,0x38,0x37,0x37,0x38,0x36,0x36,
0x35,0x35,0x36,0x36,0x36,0x36,0x38,0x39,0x3b,0x3b,0x3b,0x39,0x38,0x38,0x39,0x3d,
0x3d,0x3b,0x3b,0x3a,0x38,0x38,0x38,0x39,0x39,0x3c,0x3a,0x39,0x3a,0x3b,0x3a,0x3b,
0x38,0x38,0x39,0x3b,0x3b,0x3b,0x3c,0x39,0x38,0x37,0x39,0x3b,0x3c,0x3b,0x3b,0x39,
0x36,0x35,0x38,0x3b,0x3d,0x3e,0x3e,0x39,0x37,0x35,0x35,0x36,0x35,0x35,0x37,0x37,
0x36,0x37,0x37,0x37,0x37,0x36,0x37,0x38,0x3b,0x3b,0x39,0x37,0x36,0x35,0x38,0x39,
0x3a,0x39,0x39,0x38,0x36,0x35,0x38,0x3b,0x3d,0x3c,0x39,0x3a,0x39,0x38,0x3a,0x3b,
0x3a,0x3b,0x39,0x37,0x37,0x35,0x35,0x37,0x38,0x39,0x38,0x38,0x38,0x37,0x39,0x3d,
0x3f,0x42,0x3f,0x3d,0x3b,0x3b,0x3b,0x39,0x39,0x39,0x39,0x38,0x36,0x34,0x38,0x38,
0x39,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,0x39,0x38,0x37,0x37,0x37,0x38,0x37,0x36,0x37,
0x38,0x38,0x39,0x39,0x3b,0x3c,0x3a,0x39,0x38,0x38,0x3d,0x3d,0x3d,0x3b,0x39,0x36,
0x36,0x35,0x36,0x37,0x38,0x37,0x36,0x37,0x39,0x39,0x39,0x38,0x38,0x39,0x38,0x36,
0x35,0x35,0x36,0x36,0x35,0x37,0x35,0x39,0x38,0x35,0x35,0x34,0x33,0x37,0x3a,0x39,
0x38,0x38,0x39,0x38,0x38,0x37,0x38,0x38,0x39,0x37,0x37,0x35,0x35,0x38,0x39,0x38,
0x37,0x37,0x39,0x3b,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x36,0x36,0x36,0x37,0x37,0x37,
0x37,0x35,0x39,0x38,0x36,0x33,0x35,0x38,0x39,0x38,0x37,0x35,0x35,0x37,0x39,0x38,
0x39,0x38,0x38,0x39,0x39,0x37,0x39,0x3b,0x3c,0x3b,0x39,0x39,0x39,0x39,0x39,0x39,
0x38,0x37,0x38,0x38,0x37,0x34,0x35,0x37,0x38,0x39,0x38,0x38,0x39,0x3a,0x3b,0x3b,
0x3c,0x3c,0x3d,0x3c,0x39,0x37,0x38,0x37,0x36,0x37,0x36,0x36,0x36,0x34,0x33,0x35,
0x37,0x38,0x38,0x38,0x35,0x32,0x33,0x35,0x38,0x39,0x3a,0x39,0x38,0x38,0x37,0x38,
0x3a,0x3b,0x3e,0x3d,0x39,0x36,0x35,0x35,0x37,0x37,0x38,0x36,0x35,0x31,0x31,0x33,
0x34,0x35,0x38,0x39,0x37,0x36,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x37,0x3a,
0x39,0x36,0x38,0x38,0x38,0x36,0x36,0x36,0x36,0x35,0x35,0x36,0x35,0x33,0x35,0x36,
0x37,0x36,0x36,0x36,0x36,0x38,0x38,0x39,0x3a,0x3b,0x3b,0x3b,0x3a,0x3b,0x3b,0x3a,
0x39,0x38,0x39,0x38,0x36,0x35,0x35,0x35,0x37,0x38,0x39,0x39,0x38,0x36,0x37,0x38,
0x38,0x38,0x37,0x36,0x35,0x35,0x34,0x35,0x36,0x38,0x38,0x39,0x37,0x36,0x37,0x37,
0x37,0x37,0x38,0x38,0x35,0x35,0x35,0x36,0x37,0x38,0x38,0x3a,0x37,0x32,0x33,0x35,
0x36,0x38,0x37,0x36,0x39,0x39,0x3a,0x39,0x38,0x37,0x38,0x39,0x38,0x37,0x38,0x39,
0x39,0x39,0x38,0x38,0x39,0x38,0x37,0x37,0x37,0x37,0x38,0x38,0x36,0x35,0x36,0x37,
0x38,0x37,0x37,0x36,0x36,0x36,0x36,0x39,0x35,0x33,0x34,0x35,0x36,0x36,0x37,0x37,
0x37,0x38,0x38,0x39,0x3d,0x3d,0x3d,0x3b,0x38,0x34,0x35,0x35,0x36,0x37,0x38,0x38,
0x34,0x31,0x32,0x34,0x37,0x38,0x38,0x39,0x37,0x34,0x35,0x35,0x37,0x38,0x38,0x37,
0x37,0x37,0x38,0x38,0x36,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x38,0x38,0x38,
0x38,0x36,0x37,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x3a,0x3b,0x3b,0x39,0x38,
0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x35,0x35,0x34,0x35,0x37,0x37,0x37,0x37,0x37,
0x37,0x37,0x35,0x35,0x34,0x33,0x35,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,
0x38,0x38,0x38,0x37,0x35,0x35,0x37,0x39,0x3b,0x3d,0x3d,0x3a,0x38,0x38,0x37,0x37,
0x35,0x34,0x36,0x37,0x36,0x34,0x36,0x38,0x39,0x37,0x35,0x35,0x37,0x37,0x36,0x35,
0x35,0x35,0x36,0x37,0x39,0x3a,0x3d,0x3d,0x3a,0x3a,0x39,0x39,0x3b,0x3b,0x3a,0x39,
0x38,0x37,0x38,0x39,0x39,0x37,0x35,0x34,0x35,0x36,0x38,0x36,0x39,0x38,0x37,0x38,
0x39,0x3b,0x3d,0x3d,0x3a,0x39,0x39,0x38,0x38,0x38,0x38,0x39,0x38,0x37,0x35,0x3a,
0x3b,0x3d,0x3e,0x3d,0x3c,0x3c,0x39,0x37,0x37,0x36,0x36,0x35,0x34,0x32,0x32,0x33,
0x35,0x35,0x37,0x38,0x39,0x38,0x38,0x39,0x3b,0x3a,0x38,0x39,0x39,0x39,0x39,0x39,
0x38,0x3a,0x3b,0x3c,0x3b,0x3d,0x3d,0x3d,0x3c,0x39,0x37,0x37,0x32,0x32,0x35,0x36,
0x35,0x33,0x35,0x35,0x35,0x36,0x38,0x39,0x3b,0x39,0x38,0x3a,0x3b,0x3d,0x3e,0x3d,
0x3b,0x39,0x37,0x35,0x34,0x33,0x33,0x33,0x34,0x34,0x35,0x36,0x37,0x38,0x39,0x39,
0x37,0x35,0x33,0x34,0x35,0x36,0x39,0x3a,0x38,0x37,0x37,0x39,0x3a,0x39,0x39,0x38,
0x38,0x39,0x38,0x38,0x39,0x3a,0x39,0x3a,0x39,0x38,0x36,0x35,0x32,0x33,0x36,0x38,
0x39,0x39,0x39,0x38,0x39,0x38,0x3a,0x3d,0x3c,0x3a,0x39,0x36,0x34,0x33,0x34,0x33,
0x33,0x35,0x36,0x36,0x37,0x37,0x37,0x39,0x3b,0x3b,0x3d,0x3b,0x38,0x39,0x3a,0x3b,
0x3b,0x38,0x36,0x35,0x36,0x38,0x39,0x3b,0x39,0x38,0x37,0x34,0x33,0x35,0x37,0x36,
0x34,0x31,0x31,0x31,0x32,0x34,0x37,0x38,0x38,0x36,0x36,0x36,0x37,0x38,0x39,0x39,
0x38,0x38,0x37,0x38,0x37,0x38,0x39,0x38,0x36,0x36,0x37,0x37,0x36,0x36,0x37,0x38,
0x3a,0x38,0x37,0x37,0x35,0x32,0x32,0x34,0x36,0x38,0x38,0x37,0x37,0x38,0x39,0x39,
0x3a,0x39,0x39,0x38,0x36,0x35,0x37,0x38,0x37,0x37,0x37,0x38,0x37,0x36,0x36,0x39,
0x3a,0x39,0x38,0x3b,0x38,0x38,0x39,0x3a,0x39,0x39,0x39,0x38,0x37,0x36,0x37,0x39,
0x38,0x36,0x36,0x37,0x37,0x35,0x38,0x36,0x37,0x39,0x3a,0x39,0x3c,0x39,0x39,0x39,
0x3a,0x39,0x38,0x37,0x35,0x33,0x35,0x35,0x35,0x35,0x36,0x35,0x36,0x36,0x38,0x38,
0x38,0x38,0x39,0x39,0x39,0x3a,0x39,0x39,0x37,0x37,0x39,0x39,0x39,0x39,0x39,0x3a,
0x39,0x38,0x39,0x38,0x37,0x37,0x37,0x37,0x36,0x36,0x35,0x35,0x37,0x39,0x39,0x39,
0x39,0x3a,0x3b,0x39,0x38,0x37,0x35,0x35,0x37,0x39,0x3a,0x3b,0x3a,0x39,0x39,0x39,
0x38,0x38,0x38,0x38,0x36,0x34,0x33,0x33,0x34,0x35,0x36,0x39,0x39,0x37,0x37,0x36,
0x35,0x35,0x37,0x39,0x39,0x3a,0x39,0x3b,0x3a,0x3a,0x39,0x3a,0x3b,0x3a,0x3b,0x3a,
0x39,0x37,0x35,0x34,0x35,0x35,0x36,0x35,0x34,0x33,0x33,0x34,0x34,0x33,0x34,0x33,
0x32,0x33,0x36,0x39,0x3b,0x3a,0x39,0x39,0x39,0x39,0x39,0x3c,0x3b,0x39,0x39,0x39,
0x39,0x3b,0x3d,0x3d,0x3b,0x38,0x37,0x36,0x36,0x35,0x35,0x35,0x36,0x37,0x36,0x35,
0x35,0x39,0x3b,0x39,0x38,0x35,0x35,0x36,0x36,0x35,0x36,0x35,0x33,0x34,0x35,0x35,
0x35,0x36,0x35,0x34,0x33,0x32,0x31,0x37,0x37,0x38,0x37,0x36,0x35,0x36,0x37,0x39,
0x3a,0x39,0x3b,0x3a,0x39,0x36,0x36,0x38,0x39,0x39,0x39,0x38,0x35,0x34,0x33,0x31,
0x32,0x33,0x34,0x36,0x37,0x38,0x38,0x38,0x37,0x35,0x37,0x38,0x37,0x37,0x36,0x34,
0x35,0x33,0x34,0x37,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x39,0x39,0x3a,0x3a,0x38,
0x35,0x32,0x31,0x33,0x33,0x34,0x37,0x37,0x35,0x35,0x36,0x38,0x37,0x36,0x35,0x33,
// Line 11
0x39,0x3a,0x39,0x38,0x37,0x36,0x34,0x34,0x35,0x37,0x38,0x38,0x38,0x38,0x37,0x37,
0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x39,0x3a,0x3a,0x38,0x36,0x35,
0x36,0x37,0x38,0x37,0x37,0x36,0x35,0x35,0x36,0x38,0x3a,0x38,0x35,0x33,0x34,0x38,
0x3b,0x3d,0x3b,0x37,0x32,0x31,0x33,0x42,0x52,0x65,0x75,0x79,0x75,0x6c,0x61,0x58,
0x59,0x60,0x6b,0x73,0x77,0x75,0x6e,0x64,0x5c,0x59,0x5d,0x64,0x6c,0x70,0x71,0x6e,
0x68,0x60,0x5c,0x5d,0x62,0x69,0x6f,0x73,0x74,0x72,0x6b,0x61,0x5b,0x5c,0x5f,0x64,
0x6e,0x72,0x72,0x6f,0x68,0x61,0x5f,0x5f,0x62,0x66,0x6c,0x70,0x71,0x6e,0x67,0x5f,
0x59,0x55,0x59,0x63,0x6e,0x75,0x78,0x74,0x69,0x60,0x5b,0x5c,0x63,0x6c,0x74,0x78,
0x75,0x6f,0x68,0x61,0x5e,0x5e,0x64,0x68,0x6a,0x6e,0x6f,0x70,0x76,0x7f,0x8c,0x99,
0xa5,0xab,0xa9,0xa2,0x94,0x83,0x72,0x63,0x5a,0x56,0x52,0x4c,0x44,0x3b,0x36,0x38,
0x41,0x51,0x64,0x74,0x80,0x89,0x8e,0x91,0x94,0x98,0x9b,0x9b,0x9a,0x97,0x96,0x98,
0x9a,0x9a,0x97,0x8e,0x80,0x72,0x64,0x5a,0x52,0x4a,0x43,0x37,0x36,0x38,0x44,0x58,
0x6b,0x77,0x7b,0x75,0x69,0x5f,0x58,0x53,0x4e,0x44,0x38,0x2f,0x2e,0x39,0x4e,0x67,
0x7a,0x80,0x7d,0x72,0x64,0x57,0x4f,0x48,0x47,0x42,0x3c,0x35,0x2f,0x2d,0x32,0x39,
0x43,0x4f,0x5e,0x6b,0x71,0x72,0x6d,0x64,0x5f,0x59,0x54,0x51,0x49,0x3e,0x35,0x30,
0x35,0x46,0x5d,0x77,0x88,0x91,0x94,0x95,0x96,0x93,0x8b,0x7d,0x6b,0x59,0x52,0x56,
0x64,0x74,0x7b,0x78,0x70,0x65,0x5d,0x59,0x58,0x52,0x47,0x37,0x2c,0x29,0x39,0x4f,
0x69,0x7d,0x83,0x7d,0x6f,0x61,0x59,0x56,0x52,0x4a,0x41,0x38,0x35,0x3c,0x4f,0x68,
0x7c,0x85,0x7e,0x6e,0x5d,0x52,0x52,0x5a,0x65,0x70,0x74,0x71,0x69,0x60,0x5a,0x58,
0x59,0x59,0x52,0x44,0x37,0x2b,0x27,0x2c,0x35,0x3f,0x45,0x47,0x3f,0x37,0x33,0x34,
0x3d,0x52,0x65,0x74,0x7a,0x76,0x6c,0x64,0x5b,0x59,0x62,0x6e,0x7a,0x7e,0x79,0x6e,
0x64,0x5d,0x5c,0x5b,0x58,0x50,0x45,0x3b,0x2f,0x29,0x2d,0x36,0x40,0x46,0x45,0x3e,
0x35,0x2f,0x31,0x3f,0x54,0x68,0x77,0x80,0x7d,0x72,0x66,0x5c,0x59,0x5d,0x63,0x69,
0x6f,0x74,0x7c,0x86,0x91,0x9c,0xa6,0xac,0xad,0xa6,0x9f,0x98,0x97,0x9b,0x9e,0xa0,
0xa2,0xa2,0xa2,0x9f,0x9b,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0x9e,0x9e,0x9d,0x9d,
0x9e,0x9d,0x9e,0x9c,0x9b,0x98,0x99,0x9b,0x9d,0x9c,0x9d,0x9a,0x9b,0x9d,0x9f,0x9f,
0x9f,0x9e,0x9d,0x9d,0x9c,0x9c,0x9d,0x9e,0x9e,0x9f,0x9d,0x9b,0x9b,0x9c,0x9e,0x9f,
0xa0,0x9e,0x9d,0x9d,0x9c,0x9b,0x9c,0x9e,0x9f,0x9f,0x9e,0x9c,0x9a,0x9b,0x9c,0x9d,
0x9d,0x9b,0x9c,0x9c,0x9b,0x9a,0x9b,0x99,0x99,0x9a,0x9a,0x99,0x9c,0x9c,0x9c,0x9c,
0x9c,0x9e,0x9f,0xa1,0x9f,0x9f,0xa0,0xa0,0x9f,0x9f,0x9f,0x9f,0xa0,0x9e,0x9c,0x9b,
0x9a,0x9b,0x9c,0x9c,0x9d,0x9d,0x9b,0x99,0x99,0x9b,0x9e,0x9f,0x9e,0x9e,0x9e,0x9e,
0x9d,0x9c,0x9c,0x9d,0x9b,0x9a,0x99,0x99,0x99,0x9b,0x9a,0x99,0x9b,0x9c,0x9e,0x9e,
0x9d,0x9c,0x9e,0xa0,0xa0,0x9e,0x9e,0x9c,0x9d,0x9c,0x9d,0x9c,0x9b,0x9c,0x9d,0x9d,
0x9d,0x9c,0x9b,0x9c,0x9d,0x9e,0x9d,0x9c,0x9d,0x9e,0x9e,0x9f,0x9e,0x9e,0x9e,0x9e,
0x9c,0x9b,0x9b,0x9d,0x9c,0x9d,0x9e,0x9e,0x9e,0x9d,0x9d,0x9e,0x9c,0x9b,0x9e,0x9f,
0x9f,0x9e,0x9e,0x9d,0x9d,0x9d,0x9d,0x9d,0x9e,0x9c,0x9c,0x9b,0x9a,0x99,0x9b,0x9c,
0x9d,0x9e,0x9e,0x9d,0x9d,0x9d,0x9d,0x9d,0x9c,0x9d,0x9d,0x9d,0x99,0x96,0x96,0x95,
0x95,0x96,0x98,0x98,0x9b,0x9b,0x9b,0x9b,0x9b,0x9b,0x9e,0xa0,0xa1,0x9d,0x9b,0x99,
0x99,0x9c,0x9d,0x9d,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,0x9f,0xa1,0x9f,0x9d,0x9c,0x9c,
0x9e,0x9e,0x9d,0x9c,0x9c,0x9d,0x9e,0xa2,0x9d,0x9c,0x9d,0x9e,0x9d,0x9c,0x9c,0x9d,
0x9e,0x9d,0x9d,0x9c,0x9c,0x9d,0x9f,0x9e,0x9c,0x9a,0x9b,0x9b,0x99,0x9b,0x9c,0x9c,
0x9c,0x9c,0x9c,0x9c,0x9c,0x9d,0x9d,0x9b,0x99,0x98,0x9b,0x9d,0x9e,0x9e,0x9e,0x9f,
0xa0,0x9f,0x9e,0x9d,0x9c,0x9b,0x9c,0x9b,0x9b,0x9c,0x9e,0x9f,0x9f,0x9f,0x9e,0x9e,
0x9d,0x9c,0x9c,0x9d,0x9d,0x9d,0x9d,0x9d,0x9c,0x9d,0x9e,0x9f,0x9b,0x9c,0x9b,0x9d,
0x9f,0x9e,0x9d,0x9e,0x9c,0x9b,0x9c,0x9e,0x9e,0x9d,0x9c,0x9a,0x9b,0x9c,0x9e,0xa0,
0xa1,0x9f,0x9c,0x9b,0x9a,0x9a,0x9b,0x9c,0x9b,0x9a,0x9a,0x9b,0x9c,0x9c,0x9e,0xa0,
0xa1,0xa0,0xa1,0xa2,0xa0,0x9d,0x9c,0x9c,0x99,0x99,0x99,0x98,0x99,0x9b,0x9c,0x9c,
0x9a,0x9a,0x9b,0x9b,0x9a,0x99,0x9a,0x99,0x9a,0x9b,0x9d,0x9d,0x9e,0x9d,0x9e,0xa0,
0x9f,0x9e,0x9f,0x9f,0x9f,0x9e,0x9e,0x9e,0x9e,0x9c,0x9b,0x99,0x9a,0x9b,0x9a,0x9a,
0x99,0x99,0x9b,0x9e,0xa0,0xa0,0xa0,0x9f,0x9f,0x9d,0x9e,0x9e,0x9e,0x9d,0x9d,0x9e,
0x9d,0x9b,0x9e,0x9e,0x9f,0x9e,0x9e,0xa0,0xa2,0xa1,0x9f,0x9e,0x9e,0x9e,0x9f,0x9e,
0x9c,0x9b,0x9b,0x9b,0x9b,0x9a,0x9a,0x9a,0x9b,0x9a,0x9a,0x9b,0x9c,0x9e,0x9f,0x9d,
0x9d,0x9c,0x9d,0x9d,0x9d,0x9d,0x9d,0x9d,0x9e,0x9f,0x9e,0xa1,0xa1,0xa1,0xa2,0xa1,
0x9e,0x9d,0x9c,0x9c,0x9b,0x9a,0x9a,0x99,0x99,0x99,0x99,0x99,0x9a,0x9b,0x9d,0x9f,
0xa1,0xa1,0x9f,0x9e,0x9f,0xa0,0xa0,0xa1,0xa2,0x9f,0x9c,0x9a,0x9a,0x9b,0x9d,0x9d,
0x9c,0x9c,0x9a,0x98,0x99,0x99,0x9a,0x9c,0x9d,0x9c,0x9b,0x9c,0x9d,0x9c,0x9d,0x9d,
0x9c,0x9b,0x9a,0x9b,0x9d,0x9e,0x9f,0xa0,0xa0,0xa0,0xa2,0xa2,0xa2,0xa2,0xa1,0x9e,
0x9d,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x9d,0x9d,0x9d,0x9e,0x9d,0x9d,0x9e,0x9f,0xa0,
0x9e,0x9d,0x9b,0x99,0x99,0x9a,0x99,0x9b,0x99,0x98,0x99,0x99,0x9b,0x9c,0x9e,0x9f,
0x9f,0x9e,0x9e,0x9d,0x9c,0x9c,0x9c,0x9e,0x9e,0x9e,0x9d,0x9d,0x9d,0x9e,0x9e,0x9f,
0xa1,0xa1,0x9f,0x9e,0x9e,0xa0,0xa0,0xa0,0x9f,0x9c,0x9c,0x9d,0x9e,0x9d,0x9c,0x9b,
0x9c,0x9c,0x9c,0x9a,0x9a,0x9c,0x9e,0x9d,0x9c,0x9b,0x9b,0x9c,0x9c,0x9c,0x9e,0x9d,
0x9e,0x9e,0x9e,0x9e,0x9e,0xa0,0xa1,0x9e,0x9b,0x9b,0x9c,0x9d,0x9c,0x9e,0x9e,0x9d,
0x9d,0x9c,0x9b,0x9e,0x9e,0x9d,0x9e,0x9d,0x9b,0x99,0x98,0x98,0x9a,0x9c,0x9e,0x9e,
0x9e,0x9d,0x9d,0x9d,0x9e,0x9f,0xa0,0x9e,0x9c,0x9b,0x99,0x99,0x9b,0x9b,0x9c,0x9e,
0x9e,0x9e,0x9f,0x9e,0x9e,0x9d,0x9e,0x9e,0x9e,0x9c,0x9c,0x9a,0x9b,0x9b,0x9b,0x9c,
0x9b,0x9a,0x9a,0x9b,0x9c,0x9d,0x9f,0x9f,0x9f,0xa0,0xa0,0x9f,0x9f,0x9e,0x9d,0x9d,
0x9d,0x9c,0x9c,0x9a,0x99,0x9b,0x9b,0x9c,0x9d,0x9e,0x9e,0x9d,0x9d,0x9d,0x9e,0x9e,
0x9c,0x9c,0x9d,0x9c,0x9b,0x99,0x9b,0x9b,0x9c,0x9d,0x9e,0x9c,0x9c,0x9b,0x9b,0x9c,
0x9d,0x9d,0x9e,0x9d,0x9c,0x9c,0x9d,0x9e,0x9f,0x9e,0x9e,0x9e,0x9d,0x9c,0x9d,0x9e,
0x9e,0x9e,0xa0,0x9f,0x9d,0x9c,0x9d,0x9e,0xa0,0xa0,0xa0,0x9f,0x9e,0x9d,0x9d,0x9e,
0x9e,0x9e,0x9f,0x9d,0x9b,0x9b,0x9c,0x9c,0x9e,0x9d,0x9d,0x9d,0x9c,0x9c,0xa0,0xa1,
0x9f,0xa0,0xa0,0x9f,0x9f,0x9e,0x9d,0x9e,0x9e,0xa1,0xa1,0xa2,0xa2,0xa1,0xa2,0xa0,
0x9e,0x9d,0x9d,0x9c,0x9d,0x9d,0x9d,0x9d,0x9d,0x9d,0x9f,0xa1,0xa1,0xa1,0xa2,0xa0,
0x9d,0x9c,0x9b,0x9b,0x9d,0x9c,0x9d,0x9e,0x9e,0x9e,0x9f,0xa0,0xa1,0xa2,0xa2,0xa2,
0xa2,0xa1,0x9e,0x9d,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0xa0,0xa0,0xa0,0x9f,0x9f,0x9e,
0x9f,0x9f,0xa1,0xa1,0xa0,0x9d,0x9c,0x9c,0x9b,0x9c,0xa1,0x9f,0x9e,0x9d,0x9d,0x9d,
0x9c,0x9c,0x9c,0x9c,0x9c,0x9b,0x9b,0x9c,0x9d,0x9f,0xa1,0xa1,0x9f,0x9e,0x9d,0x9d,
0x9e,0x9e,0x9d,0x9c,0x9b,0x99,0x9b,0x9d,0x9f,0xa0,0xa2,0xa2,0xa2,0xa2,0xa2,0xa1,
0xa0,0x9e,0x9b,0x9a,0x9a,0x9c,0x9c,0x9d,0x9c,0x9c,0x9d,0x9d,0x9c,0xa1,0xa2,0xa2,
0xa2,0xa2,0xa1,0xa0,0x9f,0x9d,0xa0,0xa2,0xa1,0xa0,0x9f,0x9d,0x9c,0x9c,0x9d,0x9e,
0x9f,0x9d,0x9c,0x9d,0x9c,0x9c,0x9e,0x9f,0x9e,0x9e,0x9d,0x9c,0x9a,0x9a,0x9b,0x9c,
0x9e,0x9d,0x9b,0x9d,0x9c,0x9c,0x9d,0x9e,0x9e,0x9d,0x9b,0x9b,0x9b,0x9c,0x9d,0x9d,
0x9e,0x9c,0x9c,0x9c,0x9c,0x9b,0x9c,0x9c,0x9b,0x9c,0x9e,0x9f,0xa0,0x9e,0x9d,0x9d,
0x9d,0x9c,0x9d,0x9d,0x9d,0x9c,0x9b,0x9b,0x9c,0x9c,0x9d,0x9e,0xa0,0xa0,0xa0,0x9e,
0x9e,0x9e,0x9f,0x9f,0x9f,0x9d,0x9e,0x9c,0x9c,0x9c,0x9d,0x9d,0x9d,0x9e,0x9e,0xa0,
0xa0,0x9f,0x9e,0x9d,0x9b,0x9c,0x9c,0x9e,0x9f,0x9e,0x9d,0x9d,0x9d,0x9d,0x9e,0xa0,
0x9f,0x9e,0xa0,0xa1,0xa0,0xa1,0xa2,0xa1,0x9f,0x9d,0x9e,0x9b,0x9d,0x9c,0x9d,0x9c,
0x99,0x96,0x98,0x99,0x99,0x98,0x92,0x85,0x77,0x66,0x5c,0x5a,0x60,0x6b,0x77,0x80,
0x80,0x78,0x6f,0x65,0x60,0x61,0x66,0x6c,0x6e,0x70,0x73,0x7a,0x85,0x91,0x9c,0x9e,
0x94,0x80,0x68,0x56,0x52,0x5c,0x6a,0x77,0x7f,0x7d,0x76,0x70,0x6a,0x64,0x5f,0x58,
0x49,0x3a,0x32,0x33,0x3e,0x53,0x6a,0x7b,0x82,0x7e,0x73,0x67,0x5c,0x52,0x4c,0x45,
0x41,0x3e,0x3c,0x38,0x38,0x38,0x3d,0x44,0x4f,0x5d,0x6e,0x7c,0x80,0x7a,0x6e,0x5e,
0x57,0x5a,0x65,0x72,0x7b,0x7c,0x73,0x68,0x61,0x5d,0x5c,0x5f,0x5c,0x52,0x45,0x36,
0x2b,0x2a,0x2f,0x38,0x40,0x43,0x43,0x3f,0x3b,0x38,0x37,0x37,0x38,0x38,0x3a,0x3c,
0x3c,0x3c,0x3a,0x37,0x35,0x35,0x34,0x37,0x3a,0x3b,0x3c,0x3c,0x3a,0x3a,0x3b,0x3d,
// Line 12
0x39,0x38,0x38,0x38,0x38,0x38,0x3a,0x3a,0x3a,0x38,0x39,0x38,0x38,0x35,0x37,0x36,
0x34,0x33,0x34,0x36,0x36,0x36,0x36,0x36,0x38,0x39,0x3a,0x3a,0x3a,0x3b,0x3c,0x3a,
0x38,0x38,0x38,0x38,0x37,0x34,0x34,0x35,0x37,0x37,0x38,0x39,0x39,0x38,0x38,0x36,
0x37,0x3a,0x3b,0x38,0x35,0x32,0x35,0x40,0x52,0x67,0x76,0x7e,0x7a,0x70,0x63,0x59,
0x56,0x5f,0x6b,0x75,0x79,0x76,0x6e,0x64,0x5c,0x5b,0x5f,0x65,0x6d,0x72,0x73,0x6f,
0x67,0x61,0x5f,0x60,0x62,0x67,0x6d,0x73,0x75,0x70,0x6a,0x63,0x5c,0x5c,0x61,0x67,
0x70,0x75,0x77,0x74,0x6d,0x64,0x5f,0x5d,0x60,0x66,0x6f,0x73,0x74,0x70,0x68,0x5f,
0x5a,0x59,0x5f,0x67,0x6e,0x72,0x73,0x6f,0x69,0x60,0x5b,0x5b,0x61,0x6e,0x78,0x7d,
0x7c,0x76,0x6d,0x64,0x5e,0x5d,0x63,0x68,0x6a,0x69,0x6b,0x6d,0x72,0x7d,0x89,0x97,
0xa4,0xab,0xab,0xa6,0x98,0x85,0x75,0x68,0x60,0x58,0x54,0x4d,0x45,0x3c,0x36,0x35,
0x3d,0x4b,0x60,0x74,0x81,0x88,0x8c,0x91,0x96,0x9b,0x9e,0x9d,0x9b,0x98,0x96,0x97,
0x9a,0x9c,0x98,0x8e,0x80,0x70,0x66,0x5d,0x55,0x4b,0x40,0x36,0x32,0x39,0x49,0x5b,
0x6f,0x7a,0x7d,0x77,0x6c,0x62,0x5b,0x55,0x4e,0x45,0x39,0x30,0x31,0x3c,0x52,0x6b,
0x7d,0x85,0x81,0x76,0x65,0x58,0x50,0x4c,0x49,0x44,0x3c,0x34,0x30,0x30,0x34,0x3d,
0x46,0x51,0x5f,0x6b,0x74,0x76,0x73,0x6b,0x65,0x5e,0x58,0x52,0x4a,0x3f,0x37,0x36,
0x3d,0x4b,0x60,0x74,0x85,0x91,0x97,0x98,0x98,0x94,0x8b,0x7a,0x65,0x55,0x50,0x56,
0x62,0x70,0x79,0x78,0x6d,0x63,0x5d,0x5c,0x5c,0x58,0x4c,0x3c,0x2d,0x2a,0x36,0x51,
0x6c,0x7b,0x81,0x79,0x6b,0x60,0x58,0x52,0x50,0x47,0x39,0x31,0x31,0x3e,0x54,0x6d,
0x7c,0x81,0x7d,0x71,0x63,0x5a,0x53,0x4c,0x46,0x3d,0x35,0x33,0x39,0x49,0x5f,0x75,
0x85,0x8f,0x95,0x98,0x99,0x93,0x87,0x77,0x67,0x58,0x52,0x55,0x5f,0x69,0x74,0x7d,
0x85,0x8f,0x98,0x9d,0x9d,0x91,0x7e,0x69,0x58,0x50,0x55,0x63,0x71,0x7a,0x7b,0x75,
0x68,0x60,0x58,0x50,0x4d,0x47,0x3f,0x37,0x2f,0x2a,0x2e,0x37,0x3f,0x44,0x44,0x3e,
0x35,0x2e,0x31,0x3d,0x4f,0x63,0x74,0x7f,0x7c,0x70,0x64,0x5c,0x5b,0x61,0x69,0x71,
0x76,0x79,0x7d,0x83,0x8f,0x9c,0xa6,0xad,0xa8,0xa0,0x9b,0x98,0x98,0x99,0x9c,0x9e,
0xa2,0xa2,0xa1,0xa0,0x9d,0x9c,0x9a,0x98,0x97,0x98,0x9c,0x9e,0x9d,0x9c,0x9c,0x9c,
0x9d,0x9d,0x9e,0xa0,0xa0,0x9e,0x9d,0x9d,0x9c,0x9a,0x9b,0x9c,0x9e,0x9e,0x9e,0x9f,
0xa0,0xa1,0xa2,0xa2,0xa2,0xa0,0xa1,0xa2,0xa0,0x9d,0x9d,0x9c,0x9c,0x9c,0x9c,0x9d,
0x9e,0x9d,0x9d,0x9d,0x9d,0x9c,0x9d,0x9e,0x9e,0x9d,0x9c,0x9a,0x99,0x99,0x99,0x99,
0x9c,0x9c,0x9e,0x9e,0x9d,0x9c,0x9d,0x9e,0x9e,0x9e,0xa0,0xa0,0xa0,0x9e,0x9d,0x9a,
0x9e,0x9e,0x9e,0x9d,0x9b,0x9a,0x9b,0x9b,0x9a,0x9d,0xa0,0xa0,0xa0,0xa0,0x9e,0xa0,
0xa0,0x9f,0x9e,0x9d,0x9c,0x9a,0x9b,0x9a,0x9a,0x9c,0x9c,0x99,0x9a,0x9a,0x9c,0x9e,
0x9f,0x9e,0xa0,0x9e,0x9e,0x9b,0x9b,0x9d,0x9d,0x9d,0x9c,0x9a,0x9b,0x9a,0x99,0x9a,
0x9c,0x9d,0x9d,0x9f,0x9f,0x9e,0x9d,0x9e,0x9d,0xa0,0x9f,0x9d,0x9c,0x9b,0x9a,0x9c,
0x9b,0x9b,0x9e,0xa0,0x9e,0x9a,0x98,0x98,0x9a,0x9d,0x9b,0x93,0x85,0x72,0x60,0x56,
0x56,0x5f,0x6d,0x77,0x7b,0x79,0x72,0x6a,0x64,0x61,0x5d,0x57,0x4c,0x3d,0x31,0x2f,
0x39,0x4d,0x67,0x7e,0x87,0x83,0x74,0x61,0x56,0x56,0x61,0x70,0x79,0x7a,0x76,0x6f,
0x67,0x62,0x63,0x61,0x5b,0x4d,0x3e,0x33,0x31,0x3a,0x4b,0x61,0x75,0x83,0x8e,0x91,
0x94,0x95,0x93,0x8a,0x7b,0x69,0x5a,0x51,0x57,0x63,0x71,0x7c,0x7e,0x76,0x6c,0x61,
0x5d,0x5f,0x66,0x70,0x78,0x79,0x73,0x67,0x64,0x61,0x61,0x61,0x5a,0x4d,0x42,0x37,
0x2e,0x31,0x40,0x58,0x70,0x83,0x8f,0x96,0x98,0x97,0x90,0x84,0x77,0x6a,0x61,0x58,
0x4d,0x44,0x3c,0x39,0x3b,0x44,0x51,0x62,0x73,0x81,0x89,0x8e,0x8f,0x93,0x99,0xa0,
0xa4,0xa4,0x9b,0x8c,0x7b,0x69,0x5a,0x50,0x4a,0x46,0x41,0x3d,0x38,0x33,0x36,0x3a,
0x3f,0x45,0x46,0x44,0x3e,0x38,0x34,0x38,0x3e,0x4b,0x5d,0x6e,0x7c,0x85,0x8a,0x8f,
0x94,0x99,0x9d,0xa0,0x9d,0x95,0x89,0x7b,0x6c,0x61,0x59,0x52,0x4b,0x46,0x41,0x3c,
0x36,0x33,0x35,0x38,0x3b,0x3c,0x3a,0x38,0x32,0x2f,0x32,0x3a,0x46,0x58,0x68,0x75,
0x81,0x8a,0x91,0x96,0x9a,0x9d,0x9f,0x9f,0x9d,0x9a,0x9a,0x9a,0x9c,0xa0,0xa1,0xa1,
0xa0,0x9e,0x9d,0x9b,0x99,0x98,0x97,0x98,0x99,0x9a,0x9c,0x9e,0x9e,0x9b,0x98,0x97,
0x98,0x98,0x98,0x98,0x97,0x96,0x96,0x97,0x99,0x9c,0x9b,0x96,0x8d,0x7f,0x70,0x61,
0x56,0x4d,0x47,0x45,0x40,0x3a,0x36,0x33,0x34,0x38,0x3b,0x3d,0x3d,0x39,0x33,0x2f,
0x2e,0x31,0x36,0x38,0x38,0x38,0x38,0x36,0x34,0x38,0x3a,0x3a,0x3d,0x3b,0x3b,0x3a,
0x3c,0x3b,0x3c,0x3c,0x3c,0x37,0x38,0x34,0x32,0x38,0x40,0x4c,0x5c,0x6a,0x75,0x7e,
0x85,0x8d,0x93,0x97,0x9a,0x9d,0x9d,0x9a,0x96,0x93,0x94,0x98,0x9d,0xa0,0xa0,0xa0,
0x9f,0x9c,0x9c,0x9a,0x9b,0x9c,0x9e,0x9d,0x9b,0x99,0x98,0x94,0x98,0x99,0x9b,0x99,
0x92,0x85,0x7c,0x6d,0x5f,0x54,0x4d,0x47,0x40,0x39,0x32,0x30,0x31,0x33,0x36,0x38,
0x38,0x36,0x34,0x32,0x31,0x32,0x35,0x38,0x3a,0x3a,0x38,0x37,0x36,0x35,0x36,0x36,
0x34,0x31,0x30,0x30,0x34,0x3d,0x4b,0x5a,0x6e,0x7a,0x83,0x8b,0x93,0x9b,0xa0,0xa2,
0xa0,0xa0,0x9f,0x9c,0x99,0x98,0x99,0x9b,0x9e,0x9e,0x9d,0x9c,0x9c,0x9d,0xa0,0x9e,
0x9c,0x98,0x8f,0x83,0x74,0x65,0x58,0x4b,0x44,0x3c,0x38,0x36,0x32,0x32,0x36,0x3a,
0x3c,0x3d,0x3c,0x39,0x36,0x34,0x33,0x33,0x33,0x34,0x34,0x39,0x3e,0x48,0x58,0x69,
0x76,0x81,0x88,0x8c,0x94,0x9b,0xa2,0xa3,0xa0,0x9d,0x9b,0x9a,0x9c,0x9d,0x9f,0xa0,
0x9e,0x9c,0x98,0x97,0x98,0x99,0x99,0x97,0x95,0x96,0x99,0x9b,0x9b,0x98,0x8f,0x82,
0x6e,0x5f,0x52,0x4a,0x44,0x40,0x3a,0x38,0x35,0x32,0x36,0x38,0x3c,0x3c,0x3e,0x3a,
0x37,0x34,0x33,0x32,0x32,0x31,0x32,0x35,0x37,0x38,0x38,0x36,0x34,0x34,0x36,0x38,
0x3c,0x3e,0x3c,0x38,0x36,0x36,0x3a,0x42,0x4e,0x5c,0x6c,0x78,0x83,0x8b,0x93,0x98,
0x9e,0xa0,0xa2,0xa0,0x9e,0x99,0x96,0x96,0x96,0x96,0x99,0x9c,0x9d,0x9a,0x93,0x89,
0x7e,0x70,0x63,0x58,0x4f,0x47,0x41,0x3c,0x38,0x36,0x34,0x33,0x31,0x34,0x38,0x3d,
0x48,0x54,0x62,0x70,0x7c,0x85,0x8f,0x94,0x9a,0xa0,0xa3,0xa1,0xa0,0x9d,0x9b,0x9a,
0x9e,0x9e,0x9e,0xa0,0xa0,0x9d,0x9c,0x99,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9d,0x9d,
0x9c,0x9c,0x9c,0x9a,0x99,0x96,0x98,0x98,0x98,0x97,0x98,0x99,0x9a,0x99,0x98,0x98,
0x9a,0x9c,0x9e,0x9f,0x9e,0x9d,0x9b,0x9a,0x98,0x99,0x9b,0x9b,0x99,0x97,0x96,0x97,
0x98,0x98,0x99,0x9a,0x99,0x98,0x9a,0x9c,0x9c,0x9e,0x9e,0x9c,0x9b,0x99,0x99,0x9a,
0x9a,0x97,0x91,0x87,0x7a,0x6b,0x5e,0x53,0x4b,0x46,0x42,0x3d,0x38,0x33,0x32,0x36,
0x3a,0x3b,0x3c,0x3a,0x37,0x36,0x34,0x34,0x36,0x36,0x36,0x35,0x34,0x33,0x32,0x35,
0x36,0x37,0x39,0x3b,0x3a,0x39,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x37,0x34,0x34,0x34,
0x35,0x35,0x36,0x36,0x35,0x34,0x35,0x36,0x36,0x36,0x39,0x3b,0x3b,0x39,0x38,0x36,
0x36,0x37,0x39,0x3a,0x39,0x3a,0x39,0x37,0x39,0x38,0x38,0x36,0x35,0x32,0x33,0x33,
0x33,0x34,0x37,0x35,0x34,0x34,0x36,0x38,0x3c,0x3d,0x3d,0x3d,0x3a,0x37,0x37,0x38,
0x3a,0x3c,0x3c,0x38,0x32,0x2d,0x2b,0x32,0x40,0x55,0x66,0x73,0x75,0x6f,0x66,0x5b,
0x54,0x4f,0x4b,0x44,0x3c,0x32,0x2a,0x26,0x28,0x2f,0x39,0x41,0x4a,0x51,0x5b,0x65,
0x72,0x80,0x8b,0x94,0x9a,0x9e,0xa1,0xa3,0xa4,0xa0,0x9d,0x99,0x97,0x95,0x98,0x9b,
0x9f,0x9f,0x9d,0x97,0x8d,0x7f,0x70,0x62,0x55,0x4b,0x46,0x42,0x3e,0x38,0x31,0x2b,
0x2a,0x2d,0x32,0x3a,0x43,0x4c,0x58,0x67,0x74,0x81,0x91,0x97,0x96,0x91,0x89,0x7e,
0x70,0x62,0x58,0x56,0x5b,0x64,0x70,0x81,0x8b,0x93,0x98,0x9b,0x9f,0xa2,0xa3,0x9f,
0x96,0x87,0x77,0x65,0x58,0x4d,0x49,0x45,0x40,0x3a,0x35,0x31,0x30,0x33,0x38,0x3b,
0x3c,0x3a,0x38,0x36,0x34,0x34,0x36,0x37,0x38,0x3a,0x39,0x38,0x38,0x38,0x38,0x38,
0x39,0x38,0x38,0x39,0x38,0x38,0x3a,0x3a,0x39,0x38,0x3a,0x38,0x38,0x38,0x39,0x37,
0x39,0x37,0x37,0x39,0x39,0x37,0x38,0x36,0x34,0x36,0x37,0x36,0x36,0x34,0x32,0x33,
0x35,0x37,0x38,0x37,0x33,0x31,0x31,0x32,0x36,0x38,0x39,0x36,0x32,0x2f,0x30,0x34,
0x38,0x3a,0x39,0x35,0x30,0x2e,0x36,0x44,0x58,0x6c,0x79,0x7a,0x75,0x6a,0x5f,0x5b,
0x58,0x56,0x4e,0x40,0x33,0x2e,0x34,0x46,0x5f,0x76,0x83,0x81,0x70,0x5c,0x4e,0x4c,
0x56,0x64,0x73,0x79,0x76,0x6d,0x63,0x5d,0x5f,0x64,0x69,0x6b,0x69,0x69,0x6c,0x74,
0x7f,0x8e,0x9c,0xa6,0xa8,0xa8,0xa4,0x9e,0x99,0x96,0x95,0x96,0x98,0x98,0x95,0x97,
0x96,0x91,0x8b,0x80,0x70,0x63,0x56,0x50,0x56,0x63,0x71,0x7c,0x7a,0x70,0x64,0x5a,
0x57,0x5b,0x63,0x6b,0x70,0x72,0x6b,0x60,0x57,0x53,0x54,0x56,0x54,0x4b,0x40,0x32,
0x28,0x25,0x29,0x32,0x3d,0x43,0x42,0x3a,0x34,0x30,0x2f,0x34,0x37,0x38,0x39,0x39,
0x38,0x36,0x36,0x36,0x37,0x36,0x36,0x34,0x35,0x35,0x37,0x38,0x38,0x38,0x3a,0x37,
// Line 13
0x37,0x38,0x39,0x37,0x36,0x35,0x35,0x34,0x35,0x37,0x3b,0x3b,0x3a,0x39,0x3a,0x3a,
0x39,0x39,0x3a,0x3a,0x37,0x37,0x35,0x35,0x35,0x35,0x36,0x38,0x37,0x37,0x36,0x36,
0x37,0x3a,0x3e,0x3e,0x3e,0x3c,0x3a,0x39,0x3b,0x3d,0x3e,0x3e,0x3c,0x37,0x35,0x35,
0x39,0x3b,0x3f,0x3d,0x37,0x33,0x35,0x3f,0x50,0x60,0x6f,0x7a,0x7a,0x6f,0x60,0x57,
0x56,0x5e,0x6a,0x76,0x7a,0x77,0x6e,0x62,0x5a,0x58,0x5d,0x68,0x6f,0x70,0x70,0x6a,
0x65,0x60,0x5d,0x5c,0x60,0x67,0x6e,0x72,0x73,0x70,0x6b,0x65,0x60,0x5e,0x62,0x69,
0x6e,0x74,0x74,0x70,0x69,0x62,0x5d,0x5c,0x61,0x6b,0x73,0x79,0x79,0x73,0x6b,0x61,
0x5a,0x5b,0x61,0x6a,0x72,0x75,0x75,0x70,0x67,0x60,0x5e,0x5f,0x64,0x6b,0x72,0x76,
0x76,0x74,0x70,0x6a,0x67,0x65,0x65,0x67,0x6a,0x6c,0x6f,0x72,0x76,0x7e,0x89,0x96,
0xa0,0xa7,0xa8,0xa4,0x9b,0x8a,0x78,0x6b,0x60,0x5a,0x58,0x53,0x4d,0x44,0x3b,0x37,
0x3e,0x4b,0x60,0x76,0x84,0x8a,0x8e,0x91,0x96,0x9b,0xa0,0xa2,0xa0,0x9d,0x9a,0x9a,
0x9c,0x9c,0x97,0x8e,0x7d,0x6e,0x61,0x5a,0x53,0x4b,0x43,0x3a,0x34,0x3a,0x4a,0x5e,
0x73,0x7e,0x7f,0x75,0x6a,0x5f,0x5a,0x55,0x51,0x47,0x3b,0x30,0x30,0x3e,0x52,0x6a,
0x7d,0x84,0x7f,0x74,0x65,0x59,0x53,0x4e,0x49,0x44,0x3e,0x39,0x32,0x2f,0x31,0x38,
0x44,0x50,0x5f,0x6d,0x76,0x76,0x71,0x6a,0x63,0x5f,0x5c,0x55,0x4d,0x41,0x37,0x31,
0x3a,0x4a,0x60,0x7a,0x8c,0x94,0x96,0x97,0x96,0x94,0x8c,0x7f,0x6d,0x5c,0x53,0x58,
0x65,0x74,0x7d,0x7d,0x73,0x67,0x60,0x5c,0x5a,0x54,0x49,0x38,0x2d,0x2c,0x3a,0x52,
0x6a,0x7b,0x82,0x7c,0x6f,0x60,0x5a,0x57,0x53,0x4a,0x3e,0x34,0x36,0x40,0x54,0x6d,
0x81,0x8a,0x86,0x76,0x62,0x54,0x55,0x5f,0x6b,0x74,0x74,0x71,0x6c,0x66,0x61,0x62,
0x65,0x6a,0x6f,0x70,0x70,0x74,0x7c,0x89,0x95,0xa0,0xa8,0xaa,0xa7,0xa0,0x9c,0x99,
0x97,0x96,0x9b,0x9d,0xa0,0xa4,0xa6,0xa6,0xa5,0xa1,0x9e,0x9c,0x9b,0x9b,0x9e,0x9e,
0x9b,0x97,0x91,0x86,0x78,0x69,0x5c,0x51,0x4b,0x48,0x45,0x41,0x3c,0x37,0x37,0x38,
0x3c,0x42,0x46,0x44,0x3d,0x36,0x33,0x37,0x42,0x54,0x68,0x7a,0x7e,0x79,0x6d,0x5f,
0x57,0x5a,0x63,0x70,0x79,0x79,0x73,0x68,0x5f,0x5b,0x5a,0x5a,0x55,0x4e,0x45,0x38,
0x2c,0x29,0x2e,0x37,0x42,0x47,0x45,0x3c,0x34,0x2f,0x31,0x3d,0x4f,0x63,0x75,0x7e,
0x7a,0x70,0x65,0x5d,0x5d,0x63,0x6b,0x77,0x7d,0x7c,0x75,0x6a,0x5f,0x5c,0x62,0x6d,
0x75,0x7b,0x7c,0x78,0x70,0x68,0x62,0x61,0x65,0x68,0x6c,0x6d,0x6f,0x71,0x7a,0x84,
0x91,0x9a,0x9c,0x95,0x83,0x6c,0x58,0x49,0x3f,0x3b,0x3b,0x3e,0x3e,0x3e,0x3e,0x3e,
0x3e,0x40,0x45,0x4e,0x5c,0x6a,0x78,0x85,0x8e,0x92,0x98,0x9c,0xa0,0xa3,0xa3,0x9c,
0x91,0x84,0x74,0x67,0x60,0x5e,0x61,0x68,0x70,0x79,0x81,0x88,0x8e,0x97,0xa0,0xa7,
0xaa,0xa9,0xa3,0x9a,0x8e,0x7f,0x6f,0x65,0x5f,0x5d,0x5f,0x62,0x68,0x71,0x7d,0x85,
0x8f,0x96,0x9a,0x98,0x8e,0x7f,0x6f,0x5d,0x4d,0x41,0x3c,0x3c,0x3d,0x3f,0x3e,0x39,
0x35,0x34,0x3b,0x49,0x5a,0x6a,0x75,0x79,0x75,0x6c,0x64,0x5d,0x58,0x53,0x4c,0x43,
0x3a,0x31,0x2c,0x2f,0x32,0x39,0x44,0x4e,0x59,0x61,0x6e,0x7b,0x88,0x92,0x99,0x99,
0x94,0x89,0x7b,0x6d,0x5c,0x4d,0x40,0x37,0x33,0x35,0x3c,0x45,0x52,0x61,0x70,0x7d,
0x88,0x8f,0x95,0x9a,0x9d,0x9e,0xa2,0xa3,0x9d,0x91,0x81,0x6f,0x62,0x5b,0x5a,0x5b,
0x63,0x6a,0x74,0x7d,0x86,0x8f,0x9b,0xa3,0xa6,0xa7,0xa4,0xa0,0x9a,0x96,0x94,0x97,
0x99,0x9c,0x9e,0x9f,0x9e,0x9b,0x9a,0x9b,0x9c,0x9c,0x9b,0x99,0x98,0x9a,0x9d,0x9e,
0x98,0x8f,0x85,0x75,0x65,0x59,0x56,0x5b,0x64,0x6c,0x73,0x7a,0x85,0x8e,0x96,0x9d,
0xa1,0xa2,0xa3,0x9d,0x96,0x92,0x94,0x97,0x9a,0x97,0x8d,0x7f,0x71,0x62,0x54,0x48,
0x42,0x40,0x3f,0x3a,0x34,0x33,0x36,0x3a,0x3f,0x41,0x3f,0x3a,0x34,0x31,0x37,0x45,
0x58,0x6b,0x7a,0x7c,0x74,0x69,0x5e,0x57,0x55,0x51,0x4a,0x42,0x38,0x30,0x2b,0x2d,
0x35,0x42,0x4b,0x4a,0x44,0x3c,0x37,0x3b,0x49,0x5c,0x70,0x7c,0x7f,0x76,0x6a,0x5d,
0x55,0x56,0x5b,0x61,0x68,0x6e,0x75,0x7f,0x8a,0x94,0x9c,0x9c,0x92,0x7f,0x6c,0x59,
0x4a,0x42,0x3e,0x3b,0x3a,0x37,0x35,0x37,0x3a,0x3c,0x3c,0x3b,0x36,0x30,0x32,0x39,
0x48,0x5c,0x6e,0x79,0x7c,0x75,0x6b,0x5f,0x55,0x50,0x50,0x4d,0x45,0x3b,0x33,0x2f,
0x31,0x3a,0x44,0x4a,0x4c,0x40,0x34,0x31,0x36,0x45,0x5a,0x6d,0x78,0x7a,0x74,0x6b,
0x5f,0x5b,0x55,0x4f,0x49,0x40,0x37,0x31,0x30,0x35,0x3d,0x40,0x40,0x3d,0x3a,0x37,
0x36,0x37,0x3a,0x3a,0x36,0x35,0x3a,0x48,0x59,0x6a,0x79,0x7e,0x78,0x6d,0x63,0x5c,
0x5c,0x60,0x68,0x6f,0x74,0x78,0x7a,0x85,0x90,0x9c,0xa7,0xac,0xaa,0xa4,0x97,0x88,
0x79,0x6a,0x5d,0x53,0x4c,0x46,0x43,0x3e,0x3a,0x33,0x2f,0x2f,0x34,0x3a,0x3e,0x3f,
0x3d,0x35,0x30,0x2f,0x32,0x37,0x3a,0x38,0x36,0x36,0x38,0x3a,0x3c,0x3d,0x3b,0x39,
0x36,0x36,0x3c,0x4c,0x5a,0x65,0x72,0x7c,0x87,0x90,0x97,0x98,0x95,0x8a,0x7b,0x69,
0x5b,0x55,0x59,0x64,0x6f,0x76,0x78,0x74,0x6c,0x64,0x5d,0x55,0x4e,0x44,0x3c,0x36,
0x31,0x2f,0x30,0x33,0x38,0x41,0x4e,0x5c,0x6a,0x74,0x7a,0x77,0x6f,0x66,0x5f,0x61,
0x63,0x68,0x6e,0x74,0x78,0x7a,0x84,0x90,0x9c,0xa6,0xaa,0xa6,0x9e,0x92,0x85,0x79,
0x6d,0x63,0x59,0x4f,0x45,0x41,0x40,0x3d,0x38,0x32,0x2e,0x2e,0x32,0x3c,0x4a,0x5c,
0x6a,0x71,0x75,0x70,0x6a,0x63,0x5e,0x59,0x54,0x4c,0x42,0x37,0x35,0x39,0x46,0x5b,
0x71,0x81,0x8f,0x94,0x92,0x95,0x98,0x9f,0xa3,0xa1,0x9d,0x9a,0x98,0x99,0x9b,0x9a,
0x92,0x84,0x72,0x61,0x56,0x54,0x5a,0x63,0x6d,0x77,0x7f,0x87,0x90,0x98,0x9f,0x9c,
0x90,0x7a,0x65,0x54,0x4d,0x4e,0x57,0x62,0x71,0x7f,0x89,0x92,0x98,0x9c,0x9c,0x90,
0x7f,0x6e,0x61,0x5b,0x5b,0x61,0x6b,0x79,0x84,0x8c,0x92,0x98,0x99,0x92,0x87,0x75,
0x62,0x55,0x50,0x55,0x62,0x70,0x7c,0x7e,0x77,0x6a,0x5f,0x5a,0x54,0x4e,0x47,0x3e,
0x32,0x2b,0x28,0x2e,0x38,0x40,0x43,0x40,0x38,0x31,0x2c,0x35,0x44,0x58,0x6d,0x79,
0x7a,0x79,0x70,0x68,0x62,0x5b,0x53,0x48,0x3c,0x33,0x34,0x40,0x53,0x68,0x79,0x80,
0x7c,0x70,0x63,0x5b,0x56,0x50,0x47,0x3e,0x35,0x31,0x38,0x49,0x5d,0x74,0x86,0x8f,
0x92,0x92,0x95,0x9a,0x9d,0x9d,0x98,0x97,0x93,0x92,0x96,0x97,0x94,0x8e,0x82,0x71,
0x64,0x59,0x51,0x4b,0x44,0x3b,0x37,0x37,0x38,0x3a,0x3c,0x3d,0x3c,0x39,0x36,0x34,
0x34,0x34,0x36,0x37,0x38,0x39,0x39,0x3a,0x3a,0x3c,0x3e,0x3e,0x3b,0x38,0x36,0x35,
0x3d,0x49,0x59,0x6b,0x78,0x7b,0x79,0x70,0x66,0x5e,0x58,0x53,0x4e,0x46,0x3c,0x31,
0x2b,0x2c,0x33,0x3e,0x45,0x46,0x42,0x39,0x33,0x37,0x43,0x55,0x6a,0x79,0x80,0x7d,
0x73,0x65,0x5a,0x58,0x5d,0x67,0x72,0x78,0x77,0x71,0x65,0x5c,0x5b,0x60,0x6c,0x74,
0x7c,0x7a,0x73,0x6a,0x63,0x5e,0x61,0x66,0x6a,0x6d,0x6d,0x6f,0x73,0x7b,0x88,0x95,
0x99,0x96,0x8c,0x7b,0x68,0x58,0x4c,0x42,0x3b,0x34,0x32,0x38,0x47,0x5a,0x6d,0x7b,
0x7e,0x76,0x6a,0x5d,0x57,0x5a,0x61,0x68,0x6f,0x74,0x79,0x7d,0x88,0x94,0x9c,0x9e,
0x95,0x83,0x6f,0x5e,0x53,0x53,0x5a,0x65,0x73,0x7f,0x88,0x90,0x98,0x9d,0xa0,0xa0,
0x9f,0x99,0x92,0x85,0x76,0x67,0x5b,0x51,0x4b,0x48,0x46,0x42,0x3c,0x35,0x33,0x37,
0x3c,0x41,0x45,0x42,0x3c,0x35,0x31,0x35,0x44,0x57,0x69,0x7a,0x7f,0x7a,0x6f,0x63,
0x5b,0x5c,0x60,0x68,0x6c,0x70,0x75,0x7b,0x86,0x90,0x98,0x99,0x90,0x7d,0x6a,0x57,
0x4b,0x44,0x41,0x3e,0x3a,0x37,0x36,0x38,0x3c,0x40,0x40,0x3c,0x33,0x2c,0x2e,0x34,
0x41,0x55,0x6a,0x77,0x7a,0x75,0x6a,0x61,0x5a,0x54,0x50,0x4d,0x44,0x39,0x31,0x2b,
0x2b,0x35,0x3d,0x45,0x47,0x43,0x3a,0x31,0x32,0x3c,0x50,0x66,0x78,0x7f,0x7b,0x6f,
0x64,0x5d,0x5b,0x5e,0x64,0x6b,0x70,0x77,0x7b,0x83,0x8e,0x9a,0xa2,0xa8,0xaa,0xa6,
0x9c,0x8e,0x7f,0x6f,0x65,0x5c,0x5a,0x5b,0x5f,0x65,0x6d,0x75,0x7e,0x87,0x90,0x98,
0xa1,0xa7,0xa8,0xa3,0x99,0x8a,0x7c,0x6f,0x64,0x5b,0x56,0x50,0x46,0x3c,0x35,0x35,
0x3a,0x49,0x5b,0x6e,0x7d,0x87,0x8c,0x94,0x97,0x9d,0xa3,0xa6,0xa2,0xa0,0x9a,0x95,
0x96,0x97,0x97,0x90,0x81,0x6e,0x5f,0x55,0x55,0x5c,0x68,0x73,0x78,0x78,0x73,0x6b,
0x65,0x5f,0x5b,0x54,0x4a,0x3d,0x33,0x2e,0x34,0x43,0x5a,0x71,0x84,0x90,0x94,0x93,
0x96,0x98,0x9c,0xa0,0x9f,0x9a,0x91,0x83,0x73,0x65,0x5d,0x5b,0x61,0x6b,0x75,0x79,
0x7c,0x74,0x6a,0x63,0x5e,0x5d,0x60,0x64,0x68,0x6d,0x74,0x7d,0x88,0x92,0x9c,0xa2,
0xa6,0xa7,0xa1,0x98,0x8c,0x7d,0x70,0x64,0x5d,0x5f,0x65,0x6b,0x73,0x77,0x7d,0x86,
0x90,0x98,0x9e,0x9c,0x90,0x7b,0x68,0x58,0x51,0x57,0x62,0x6e,0x78,0x78,0x71,0x6a,
0x61,0x5a,0x54,0x4d,0x44,0x3c,0x35,0x30,0x2e,0x2f,0x35,0x3e,0x49,0x53,0x5c,0x66,
0x6f,0x7a,0x86,0x92,0x98,0x98,0x92,0x86,0x75,0x65,0x55,0x49,0x42,0x3e,0x3c,0x3b,
0x3a,0x39,0x3d,0x3e,0x3e,0x3d,0x3c,0x3b,0x36,0x35,0x35,0x35,0x36,0x38,0x39,0x3a,
0x39,0x37,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x38,0x36,0x34,0x34,0x36,
// Line 14
0x3d,0x3d,0x3e,0x3f,0x3e,0x3b,0x39,0x37,0x36,0x36,0x36,0x37,0x38,0x37,0x36,0x36,
0x36,0x37,0x39,0x39,0x39,0x38,0x38,0x36,0x36,0x37,0x39,0x39,0x37,0x34,0x35,0x37,
0x38,0x37,0x38,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x34,0x38,
0x38,0x37,0x38,0x3a,0x3c,0x3e,0x45,0x4c,0x56,0x61,0x6b,0x72,0x79,0x81,0x88,0x8e,
0x95,0x98,0x99,0x96,0x95,0x95,0x94,0x93,0x94,0x94,0x95,0x95,0x95,0x95,0x94,0x91,
0x8d,0x87,0x82,0x79,0x70,0x66,0x5a,0x52,0x4c,0x46,0x42,0x3d,0x3b,0x37,0x38,0x38,
0x39,0x3b,0x3d,0x3b,0x3a,0x39,0x39,0x39,0x39,0x37,0x37,0x38,0x3b,0x3d,0x42,0x47,
0x4f,0x58,0x62,0x6d,0x77,0x80,0x87,0x8c,0x91,0x92,0x93,0x95,0x96,0x95,0x95,0x95,
0x93,0x91,0x91,0x92,0x95,0x97,0x98,0x95,0x91,0x8b,0x85,0x7f,0x78,0x6e,0x64,0x5a,
0x52,0x4c,0x45,0x41,0x3e,0x3a,0x38,0x38,0x39,0x38,0x35,0x37,0x36,0x36,0x36,0x37,
0x36,0x38,0x36,0x35,0x37,0x3b,0x3f,0x46,0x4c,0x52,0x5a,0x63,0x6e,0x78,0x83,0x8a,
0x8d,0x91,0x93,0x95,0x96,0x97,0x97,0x97,0x96,0x95,0x95,0x95,0x95,0x95,0x96,0x95,
0x91,0x8c,0x88,0x82,0x7c,0x74,0x6b,0x64,0x5b,0x51,0x4a,0x43,0x3c,0x37,0x36,0x35,
0x36,0x37,0x38,0x38,0x39,0x39,0x3b,0x3d,0x3d,0x3c,0x3b,0x39,0x37,0x38,0x39,0x3d,
0x44,0x4b,0x53,0x5d,0x66,0x70,0x7a,0x84,0x8c,0x91,0x97,0x99,0x99,0x98,0x98,0x95,
0x95,0x95,0x95,0x95,0x96,0x97,0x98,0x99,0x9a,0x9a,0x98,0x90,0x89,0x80,0x76,0x6b,
0x61,0x57,0x4f,0x4a,0x44,0x3f,0x3d,0x3b,0x38,0x37,0x38,0x39,0x38,0x38,0x39,0x39,
0x3a,0x37,0x35,0x34,0x36,0x36,0x39,0x3b,0x3e,0x41,0x48,0x51,0x5b,0x64,0x6f,0x78,
0x86,0x8b,0x8f,0x92,0x95,0x96,0x99,0x98,0x96,0x95,0x95,0x95,0x93,0x92,0x92,0x93,
0x95,0x93,0x92,0x8e,0x89,0x83,0x7e,0x75,0x6b,0x63,0x5b,0x52,0x4b,0x46,0x41,0x3d,
0x39,0x37,0x38,0x38,0x37,0x36,0x39,0x39,0x3b,0x3d,0x3d,0x3b,0x3c,0x3b,0x3a,0x3b,
0x3f,0x42,0x48,0x4f,0x55,0x5f,0x6b,0x76,0x80,0x86,0x8c,0x91,0x95,0x96,0x98,0x99,
0x99,0x96,0x96,0x95,0x97,0x99,0x99,0x98,0x98,0x98,0x96,0x95,0x93,0x8d,0x86,0x7d,
0x72,0x69,0x62,0x58,0x50,0x4a,0x45,0x42,0x3f,0x3c,0x3a,0x3b,0x3d,0x3d,0x3a,0x3b,
0x3b,0x3b,0x3d,0x3c,0x3a,0x39,0x3a,0x3a,0x3d,0x3f,0x43,0x48,0x4e,0x55,0x61,0x6b,
0x76,0x80,0x8a,0x8e,0x91,0x95,0x97,0x99,0x9c,0x9c,0x9b,0x9a,0x98,0x97,0x98,0x98,
0x99,0x99,0x9a,0x98,0x94,0x8f,0x88,0x81,0x7b,0x71,0x68,0x5d,0x54,0x4d,0x47,0x42,
0x3f,0x3d,0x3c,0x3b,0x3c,0x3d,0x3f,0x3e,0x3f,0x3d,0x3c,0x3d,0x3d,0x3d,0x3f,0x3d,
0x39,0x38,0x38,0x37,0x38,0x38,0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x3b,0x3d,0x3e,
0x3c,0x3d,0x3b,0x3b,0x3b,0x3b,0x3c,0x3e,0x3c,0x3b,0x3b,0x3c,0x3d,0x3d,0x3e,0x3d,
0x3a,0x39,0x3a,0x38,0x3a,0x39,0x3b,0x3d,0x3c,0x3b,0x3c,0x3c,0x3b,0x39,0x39,0x3a,
0x39,0x37,0x36,0x37,0x3a,0x3c,0x3e,0x3e,0x3d,0x3d,0x3d,0x3d,0x3c,0x3b,0x3b,0x39,
0x38,0x37,0x36,0x37,0x37,0x36,0x37,0x3a,0x3b,0x3b,0x3b,0x3b,0x39,0x39,0x38,0x38,
0x38,0x39,0x39,0x3b,0x39,0x39,0x3b,0x3d,0x40,0x44,0x4b,0x54,0x5b,0x62,0x6a,0x75,
0x7f,0x86,0x8b,0x91,0x95,0x96,0x97,0x98,0x96,0x93,0x93,0x90,0x8f,0x91,0x93,0x95,
0x95,0x95,0x95,0x95,0x96,0x98,0x99,0x98,0x96,0x96,0x97,0x98,0x95,0x95,0x94,0x95,
0x98,0x98,0x97,0x99,0x98,0x95,0x96,0x97,0x99,0x9a,0x9a,0x9a,0x9a,0x98,0x98,0x99,
0x9b,0x9b,0x9a,0x99,0x97,0x95,0x93,0x93,0x94,0x96,0x98,0x98,0x98,0x96,0x95,0x96,
0x97,0x9a,0x9d,0x9c,0x98,0x97,0x98,0x96,0x95,0x95,0x98,0x98,0x99,0x95,0x92,0x94,
0x98,0x9a,0x9b,0x9a,0x9a,0x99,0x9b,0x99,0x97,0x98,0x9a,0x99,0x97,0x94,0x95,0x98,
0x99,0x98,0x98,0x96,0x96,0x98,0x9a,0x99,0x95,0x8e,0x87,0x7f,0x77,0x6e,0x65,0x5d,
0x56,0x4c,0x44,0x40,0x3d,0x3c,0x3a,0x39,0x39,0x3b,0x3c,0x38,0x3b,0x39,0x38,0x39,
0x38,0x36,0x37,0x36,0x35,0x37,0x38,0x39,0x3b,0x3c,0x3f,0x40,0x3f,0x3d,0x3b,0x3b,
0x3a,0x38,0x38,0x37,0x36,0x37,0x36,0x37,0x39,0x3a,0x3b,0x3c,0x3b,0x38,0x39,0x39,
0x3b,0x3b,0x3f,0x40,0x44,0x4c,0x56,0x5f,0x69,0x70,0x78,0x81,0x88,0x8d,0x90,0x94,
0x95,0x96,0x95,0x93,0x92,0x93,0x93,0x95,0x96,0x95,0x95,0x95,0x95,0x94,0x94,0x95,
0x97,0x97,0x95,0x95,0x95,0x96,0x9a,0x9c,0x9d,0x9c,0x9a,0x99,0x97,0x95,0x95,0x94,
0x94,0x95,0x93,0x92,0x92,0x93,0x93,0x94,0x95,0x92,0x8f,0x8b,0x84,0x79,0x72,0x6b,
0x64,0x5d,0x55,0x4c,0x47,0x43,0x42,0x3f,0x3f,0x3d,0x3d,0x3c,0x3c,0x3c,0x3d,0x3b,
0x3a,0x39,0x37,0x36,0x36,0x37,0x39,0x3b,0x3a,0x38,0x37,0x37,0x38,0x39,0x3b,0x3c,
0x3b,0x38,0x37,0x36,0x38,0x3a,0x3b,0x3f,0x3f,0x3b,0x39,0x39,0x39,0x38,0x38,0x38,
0x38,0x38,0x39,0x3b,0x3b,0x3f,0x45,0x4f,0x59,0x64,0x6d,0x74,0x7c,0x84,0x8b,0x8f,
0x92,0x95,0x98,0x98,0x96,0x95,0x96,0x96,0x95,0x94,0x96,0x98,0x99,0x99,0x98,0x96,
0x95,0x93,0x94,0x95,0x98,0x98,0x98,0x98,0x97,0x96,0x98,0x97,0x96,0x96,0x95,0x96,
0x97,0x96,0x95,0x98,0x99,0x99,0x98,0x98,0x98,0x99,0x99,0x98,0x98,0x99,0x9a,0x9a,
0x9a,0x98,0x96,0x97,0x96,0x95,0x96,0x96,0x96,0x94,0x92,0x92,0x95,0x96,0x98,0x98,
0x99,0x98,0x96,0x97,0x98,0x98,0x9a,0x98,0x96,0x95,0x96,0x96,0x96,0x97,0x98,0x99,
0x9a,0x9a,0x9a,0x98,0x98,0x96,0x95,0x96,0x98,0x9a,0x99,0x99,0x99,0x98,0x97,0x97,
0x96,0x94,0x93,0x91,0x8f,0x8c,0x88,0x80,0x79,0x70,0x69,0x5f,0x5a,0x4f,0x45,0x3f,
0x3b,0x39,0x38,0x39,0x38,0x39,0x39,0x3a,0x39,0x38,0x39,0x3a,0x3b,0x3a,0x38,0x39,
0x39,0x38,0x39,0x39,0x37,0x36,0x36,0x37,0x37,0x36,0x38,0x39,0x38,0x36,0x37,0x39,
0x39,0x3a,0x3b,0x39,0x38,0x39,0x3b,0x3b,0x3a,0x38,0x36,0x37,0x38,0x38,0x38,0x38,
0x38,0x38,0x38,0x39,0x3a,0x39,0x39,0x38,0x3b,0x3c,0x3d,0x3d,0x3b,0x38,0x38,0x39,
0x3a,0x39,0x38,0x37,0x36,0x37,0x39,0x3d,0x3f,0x3e,0x3d,0x3d,0x3c,0x38,0x37,0x36,
0x34,0x34,0x36,0x36,0x35,0x36,0x36,0x38,0x38,0x37,0x38,0x3b,0x3a,0x39,0x3a,0x39,
0x38,0x37,0x38,0x38,0x38,0x39,0x3b,0x3c,0x3e,0x42,0x48,0x51,0x5b,0x64,0x70,0x77,
0x7e,0x87,0x8e,0x91,0x92,0x93,0x94,0x95,0x93,0x91,0x90,0x90,0x91,0x92,0x95,0x96,
0x98,0x96,0x94,0x92,0x93,0x94,0x95,0x98,0x98,0x95,0x95,0x95,0x96,0x97,0x9c,0x9a,
0x99,0x96,0x96,0x95,0x99,0x95,0x96,0x9a,0x9a,0x98,0x99,0x99,0x98,0x97,0x96,0x94,
0x8f,0x89,0x82,0x79,0x6f,0x64,0x5c,0x55,0x4f,0x47,0x43,0x40,0x3e,0x3d,0x3b,0x3b,
0x3b,0x3b,0x3c,0x39,0x37,0x37,0x37,0x38,0x37,0x37,0x39,0x3b,0x3b,0x3c,0x3d,0x3d,
0x3c,0x3b,0x3a,0x3b,0x3d,0x3d,0x3a,0x3d,0x3b,0x38,0x38,0x38,0x37,0x3d,0x3c,0x3b,
0x3b,0x3b,0x3c,0x3d,0x3e,0x3d,0x3d,0x3e,0x3e,0x3c,0x3a,0x37,0x36,0x36,0x38,0x38,
0x3a,0x3b,0x3c,0x3d,0x3b,0x39,0x3a,0x3a,0x3b,0x3c,0x3c,0x3b,0x38,0x36,0x37,0x38,
0x3a,0x3b,0x3b,0x39,0x36,0x34,0x34,0x35,0x37,0x39,0x39,0x37,0x37,0x38,0x3a,0x3b,
0x3d,0x3e,0x3e,0x3d,0x3b,0x38,0x37,0x38,0x38,0x39,0x39,0x37,0x36,0x34,0x34,0x35,
0x36,0x38,0x3a,0x39,0x37,0x36,0x38,0x39,0x38,0x37,0x38,0x37,0x37,0x36,0x36,0x36,
0x36,0x35,0x36,0x38,0x39,0x3b,0x3b,0x39,0x38,0x39,0x38,0x38,0x3b,0x3a,0x38,0x37,
0x36,0x36,0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x37,0x39,0x39,0x39,0x37,0x36,0x37,
0x37,0x39,0x3b,0x3b,0x3a,0x39,0x38,0x38,0x39,0x3b,0x3c,0x3d,0x40,0x44,0x4b,0x55,
0x5e,0x66,0x70,0x78,0x7f,0x86,0x8e,0x94,0x98,0x97,0x95,0x94,0x95,0x97,0x98,0x99,
0x99,0x99,0x98,0x95,0x93,0x93,0x94,0x95,0x96,0x94,0x93,0x93,0x92,0x91,0x93,0x95,
0x97,0x96,0x98,0x96,0x94,0x93,0x94,0x93,0x95,0x94,0x95,0x98,0x99,0x98,0x98,0x99,
0x99,0x9a,0x9a,0x9b,0x9c,0x9b,0x98,0x96,0x97,0x97,0x98,0x98,0x98,0x95,0x97,0x97,
0x96,0x96,0x96,0x97,0x98,0x98,0x98,0x98,0x98,0x97,0x97,0x99,0x99,0x99,0x9c,0x99,
0x97,0x97,0x96,0x95,0x95,0x95,0x94,0x95,0x94,0x95,0x95,0x95,0x96,0x97,0x99,0x9a,
0x9b,0x99,0x98,0x95,0x94,0x93,0x94,0x95,0x96,0x96,0x95,0x91,0x8d,0x87,0x81,0x79,
0x72,0x6b,0x62,0x58,0x50,0x49,0x43,0x40,0x3e,0x3d,0x3a,0x38,0x34,0x33,0x34,0x37,
0x38,0x3a,0x3a,0x39,0x39,0x38,0x38,0x3a,0x3a,0x38,0x37,0x34,0x33,0x33,0x35,0x36,
0x39,0x3b,0x3c,0x3b,0x39,0x37,0x37,0x39,0x3c,0x3d,0x3e,0x3a,0x38,0x38,0x39,0x3a,
0x3b,0x3a,0x37,0x37,0x36,0x35,0x35,0x37,0x38,0x37,0x35,0x35,0x34,0x36,0x37,0x36,
0x38,0x38,0x38,0x39,0x38,0x37,0x38,0x39,0x3b,0x3a,0x39,0x37,0x37,0x37,0x38,0x38,
0x3b,0x3b,0x39,0x3a,0x39,0x36,0x37,0x36,0x35,0x35,0x36,0x38,0x36,0x37,0x37,0x38,
0x3a,0x3b,0x3b,0x3b,0x39,0x36,0x36,0x34,0x33,0x33,0x34,0x35,0x37,0x38,0x39,0x37,
0x36,0x36,0x37,0x39,0x39,0x38,0x38,0x37,0x36,0x36,0x36,0x36,0x38,0x39,0x37,0x36,
0x35,0x36,0x38,0x38,0x39,0x39,0x3b,0x3b,0x37,0x38,0x38,0x38,0x3b,0x3a,0x39,0x38,
// Line 15
0x3b,0x3b,0x3a,0x3b,0x3a,0x39,0x37,0x36,0x37,0x38,0x38,0x37,0x35,0x36,0x37,0x38,
0x39,0x39,0x38,0x38,0x36,0x34,0x35,0x37,0x38,0x38,0x38,0x35,0x33,0x35,0x37,0x38,
0x37,0x37,0x38,0x3a,0x3a,0x37,0x36,0x36,0x37,0x38,0x38,0x37,0x34,0x33,0x32,0x2f,
0x31,0x33,0x37,0x3a,0x37,0x33,0x31,0x35,0x3e,0x4c,0x5d,0x6e,0x7a,0x7d,0x78,0x6c,
0x64,0x60,0x62,0x6b,0x74,0x7c,0x7e,0x78,0x6d,0x65,0x61,0x61,0x66,0x6e,0x76,0x79,
0x77,0x71,0x6b,0x65,0x61,0x63,0x69,0x70,0x75,0x78,0x76,0x6f,0x68,0x62,0x60,0x62,
0x66,0x6d,0x76,0x7b,0x7a,0x73,0x6b,0x63,0x5f,0x61,0x68,0x70,0x79,0x78,0x75,0x70,
0x68,0x61,0x5e,0x5f,0x65,0x6e,0x76,0x79,0x76,0x73,0x6a,0x62,0x60,0x63,0x6c,0x76,
0x7e,0x7e,0x79,0x72,0x6a,0x65,0x64,0x69,0x6f,0x73,0x75,0x75,0x75,0x78,0x80,0x8b,
0x98,0xa4,0xac,0xad,0xa8,0x9e,0x91,0x83,0x75,0x67,0x5d,0x58,0x52,0x4c,0x42,0x3c,
0x38,0x38,0x42,0x54,0x65,0x7b,0x88,0x91,0x97,0x98,0x99,0x9c,0x9f,0x9f,0x9d,0x96,
0x8c,0x7d,0x6c,0x60,0x5c,0x60,0x67,0x70,0x78,0x80,0x86,0x8e,0x95,0x9c,0xa4,0xa9,
0xa8,0xa4,0x9e,0x98,0x95,0x98,0x9b,0x9c,0x9b,0x93,0x83,0x72,0x62,0x59,0x5a,0x62,
0x6c,0x78,0x7b,0x7a,0x74,0x6b,0x63,0x60,0x63,0x69,0x73,0x7a,0x7c,0x78,0x71,0x69,
0x63,0x66,0x6d,0x74,0x7b,0x7c,0x79,0x73,0x6b,0x63,0x61,0x65,0x6a,0x71,0x76,0x78,
0x74,0x6d,0x67,0x60,0x5e,0x5b,0x58,0x53,0x47,0x39,0x2f,0x2a,0x2a,0x2d,0x37,0x41,
0x4c,0x59,0x64,0x6e,0x75,0x76,0x70,0x69,0x61,0x5e,0x63,0x6d,0x79,0x83,0x83,0x7c,
0x70,0x64,0x5e,0x61,0x6b,0x76,0x7c,0x7c,0x77,0x6f,0x68,0x61,0x5d,0x5e,0x5f,0x59,
0x4f,0x3f,0x32,0x28,0x2a,0x2f,0x39,0x43,0x48,0x45,0x3c,0x32,0x2d,0x36,0x49,0x61,
0x75,0x7e,0x7e,0x76,0x69,0x5b,0x51,0x4d,0x49,0x45,0x3f,0x35,0x2c,0x2b,0x2f,0x37,
0x3e,0x42,0x42,0x3f,0x38,0x31,0x2f,0x31,0x34,0x34,0x3a,0x3a,0x39,0x36,0x34,0x36,
0x3e,0x4c,0x5c,0x70,0x7e,0x82,0x7d,0x6e,0x61,0x5a,0x5c,0x67,0x73,0x7b,0x7d,0x78,
0x6f,0x67,0x63,0x67,0x70,0x77,0x7b,0x7b,0x76,0x6e,0x65,0x5f,0x5d,0x5c,0x5a,0x54,
0x4b,0x3d,0x31,0x29,0x28,0x2e,0x3a,0x42,0x44,0x43,0x3f,0x38,0x34,0x30,0x2f,0x33,
0x37,0x3a,0x39,0x37,0x34,0x33,0x37,0x40,0x4e,0x60,0x71,0x7e,0x81,0x79,0x6d,0x63,
0x5f,0x60,0x67,0x6d,0x73,0x75,0x78,0x7f,0x8b,0x9a,0xa2,0xa1,0x94,0x7f,0x67,0x58,
0x56,0x61,0x6f,0x7b,0x7f,0x7c,0x76,0x6d,0x62,0x59,0x51,0x49,0x42,0x3b,0x36,0x32,
0x2e,0x2d,0x33,0x3c,0x49,0x5a,0x69,0x73,0x79,0x76,0x6e,0x66,0x60,0x5c,0x58,0x52,
0x48,0x3d,0x37,0x37,0x3f,0x51,0x68,0x7d,0x8d,0x95,0x97,0x96,0x91,0x8b,0x7f,0x74,
0x65,0x59,0x4e,0x47,0x40,0x3f,0x3d,0x3f,0x4a,0x5b,0x6f,0x80,0x83,0x7b,0x6d,0x5e,
0x56,0x56,0x64,0x72,0x7c,0x7f,0x78,0x6d,0x64,0x5f,0x62,0x69,0x6d,0x6f,0x71,0x74,
0x78,0x81,0x8e,0x9c,0xa7,0xad,0xb0,0xad,0xa7,0x9f,0x97,0x98,0x97,0x9a,0xa1,0xa6,
0xa7,0xa6,0xa2,0x9b,0x99,0x9a,0x9d,0x9b,0x94,0x87,0x78,0x68,0x5b,0x50,0x4c,0x47,
0x42,0x41,0x3c,0x38,0x38,0x3b,0x3e,0x42,0x41,0x3c,0x35,0x31,0x31,0x3a,0x4c,0x63,
0x75,0x7f,0x7e,0x74,0x69,0x60,0x5b,0x59,0x55,0x4c,0x41,0x35,0x2e,0x2e,0x35,0x3f,
0x45,0x47,0x41,0x38,0x33,0x33,0x3a,0x47,0x55,0x65,0x76,0x83,0x8e,0x99,0x9f,0x9b,
0x91,0x80,0x70,0x64,0x5b,0x53,0x4c,0x45,0x3f,0x3b,0x42,0x51,0x66,0x7b,0x88,0x86,
0x7a,0x68,0x5a,0x53,0x5a,0x66,0x74,0x7d,0x7b,0x70,0x69,0x61,0x5c,0x5d,0x5e,0x58,
0x4c,0x3d,0x33,0x34,0x42,0x57,0x6d,0x7f,0x8c,0x96,0x9b,0x9a,0x97,0x97,0x9a,0x9c,
0x9e,0x9c,0x9c,0x9c,0x9c,0x9a,0x9a,0x9a,0x9c,0x9e,0x9d,0x93,0x86,0x78,0x6a,0x5e,
0x53,0x4b,0x45,0x43,0x40,0x3c,0x39,0x36,0x35,0x39,0x3e,0x45,0x4e,0x58,0x63,0x70,
0x7b,0x84,0x8d,0x95,0x9d,0xa3,0xa6,0xa4,0x9c,0x93,0x86,0x78,0x6b,0x61,0x58,0x4d,
0x45,0x3c,0x38,0x36,0x36,0x32,0x35,0x35,0x38,0x43,0x4f,0x5b,0x6b,0x75,0x7f,0x8a,
0x90,0x95,0x96,0x93,0x87,0x76,0x65,0x5a,0x56,0x5b,0x65,0x71,0x7f,0x8a,0x93,0x9c,
0xa2,0xa2,0x9c,0x8e,0x7b,0x69,0x5d,0x58,0x5d,0x67,0x73,0x7c,0x82,0x8a,0x93,0x9a,
0x9b,0x94,0x89,0x74,0x60,0x53,0x51,0x59,0x64,0x70,0x7a,0x85,0x8f,0x96,0x9a,0xa1,
0xa5,0xa6,0xa5,0x9f,0x95,0x88,0x79,0x6b,0x60,0x5c,0x5d,0x66,0x6f,0x76,0x7e,0x85,
0x8e,0x97,0xa0,0xa3,0x9c,0x8d,0x7a,0x67,0x5a,0x56,0x5d,0x69,0x74,0x7e,0x86,0x8d,
0x96,0x9d,0xa1,0x9d,0x8d,0x79,0x63,0x55,0x53,0x5c,0x69,0x78,0x7d,0x7b,0x73,0x69,
0x63,0x63,0x69,0x70,0x77,0x7a,0x78,0x71,0x69,0x63,0x62,0x66,0x6a,0x6f,0x73,0x73,
0x76,0x7b,0x84,0x8f,0x9c,0xa2,0x9e,0x8f,0x7a,0x64,0x55,0x55,0x5a,0x63,0x6e,0x78,
0x82,0x8d,0x93,0x96,0x97,0x91,0x84,0x70,0x5c,0x4c,0x44,0x3f,0x3c,0x35,0x34,0x32,
0x34,0x38,0x3c,0x3d,0x3c,0x3a,0x37,0x37,0x36,0x33,0x31,0x30,0x2e,0x31,0x3a,0x49,
0x5c,0x6d,0x7b,0x86,0x8e,0x95,0x9a,0x9c,0x98,0x8d,0x7d,0x6c,0x5e,0x58,0x5c,0x66,
0x73,0x7f,0x89,0x8e,0x91,0x96,0x9b,0xa2,0xa4,0xa0,0x98,0x8a,0x7d,0x6f,0x63,0x59,
0x52,0x4c,0x47,0x41,0x3d,0x3a,0x39,0x3a,0x39,0x3a,0x3f,0x44,0x4d,0x5a,0x65,0x71,
0x7f,0x8a,0x91,0x96,0x9b,0x9d,0xa0,0xa2,0xa3,0x9a,0x93,0x85,0x73,0x67,0x61,0x63,
0x6d,0x76,0x7e,0x7e,0x77,0x6d,0x65,0x61,0x62,0x67,0x6e,0x74,0x77,0x78,0x7a,0x81,
0x8e,0x99,0x9f,0x9a,0x8b,0x77,0x65,0x59,0x56,0x5f,0x6c,0x78,0x83,0x8c,0x93,0x97,
0x9e,0x9f,0x98,0x89,0x73,0x60,0x55,0x53,0x5b,0x69,0x76,0x7d,0x7b,0x72,0x67,0x5f,
0x5a,0x55,0x50,0x48,0x3f,0x35,0x30,0x2d,0x2e,0x35,0x3e,0x47,0x52,0x5e,0x69,0x74,
0x7f,0x89,0x91,0x9a,0x9d,0x97,0x8a,0x78,0x69,0x5f,0x5b,0x5c,0x67,0x73,0x7f,0x8b,
0x94,0x9a,0x9e,0x9b,0x92,0x83,0x71,0x60,0x54,0x4b,0x43,0x3d,0x3a,0x3c,0x42,0x50,
0x62,0x73,0x80,0x83,0x7d,0x70,0x63,0x5c,0x5d,0x64,0x6d,0x71,0x79,0x7c,0x83,0x8e,
0x98,0xa0,0xa8,0xaa,0xa6,0x9e,0x95,0x8b,0x7d,0x70,0x65,0x5f,0x62,0x6a,0x72,0x7e,
0x83,0x85,0x8b,0x90,0x97,0xa0,0xa5,0xa4,0x9e,0x96,0x90,0x8f,0x93,0x96,0x97,0x92,
0x87,0x78,0x6b,0x5e,0x55,0x4f,0x47,0x3e,0x38,0x37,0x3e,0x4e,0x62,0x75,0x82,0x84,
0x7c,0x6f,0x62,0x5c,0x60,0x6a,0x76,0x7e,0x7e,0x77,0x69,0x5c,0x57,0x5b,0x66,0x73,
0x7a,0x7a,0x76,0x6d,0x65,0x62,0x64,0x66,0x63,0x58,0x49,0x3a,0x31,0x31,0x3e,0x53,
0x69,0x7e,0x8d,0x95,0x97,0x97,0x98,0x9c,0xa1,0xa3,0x9f,0x95,0x85,0x75,0x69,0x5d,
0x54,0x4c,0x45,0x3f,0x3a,0x35,0x33,0x33,0x38,0x3a,0x3b,0x3a,0x38,0x34,0x38,0x37,
0x36,0x36,0x36,0x36,0x3a,0x3e,0x49,0x57,0x65,0x73,0x81,0x8d,0x94,0x9a,0x9f,0xa4,
0xa9,0xa9,0xa4,0x9b,0x90,0x81,0x73,0x67,0x61,0x61,0x67,0x6b,0x70,0x76,0x7f,0x8a,
0x92,0x97,0x9a,0x92,0x87,0x73,0x5f,0x51,0x48,0x42,0x42,0x40,0x3e,0x3b,0x37,0x34,
0x36,0x3c,0x45,0x51,0x5c,0x67,0x73,0x7f,0x8a,0x93,0x9c,0x9e,0x98,0x89,0x76,0x65,
0x5c,0x5c,0x64,0x70,0x7c,0x83,0x81,0x79,0x6d,0x64,0x5f,0x5d,0x5f,0x65,0x6d,0x73,
0x7b,0x83,0x8b,0x97,0xa2,0xa8,0xab,0xa8,0x9f,0x95,0x88,0x7b,0x6d,0x64,0x60,0x60,
0x65,0x6d,0x76,0x7d,0x83,0x89,0x91,0x97,0x9e,0xa2,0xa2,0x9e,0x97,0x8e,0x83,0x78,
0x6b,0x5f,0x55,0x4f,0x47,0x40,0x3d,0x3a,0x39,0x37,0x35,0x37,0x3d,0x48,0x55,0x65,
0x73,0x7b,0x7c,0x77,0x6a,0x5e,0x5a,0x5c,0x64,0x73,0x79,0x7b,0x76,0x6b,0x62,0x5d,
0x60,0x69,0x76,0x7d,0x7e,0x79,0x71,0x69,0x63,0x65,0x6b,0x71,0x77,0x78,0x78,0x7a,
0x7d,0x83,0x8e,0x99,0x9f,0x9b,0x8e,0x79,0x63,0x54,0x52,0x5b,0x6b,0x7a,0x83,0x80,
0x78,0x6c,0x63,0x5b,0x55,0x4e,0x45,0x3a,0x31,0x2b,0x2b,0x2e,0x34,0x37,0x38,0x39,
0x37,0x34,0x32,0x33,0x34,0x37,0x39,0x3a,0x3c,0x3a,0x36,0x34,0x35,0x3a,0x45,0x54,
0x63,0x73,0x82,0x8e,0x97,0x9c,0x98,0x90,0x85,0x76,0x68,0x5c,0x53,0x49,0x40,0x3a,
0x3a,0x41,0x50,0x63,0x74,0x7e,0x7c,0x73,0x66,0x58,0x50,0x4f,0x4e,0x49,0x42,0x37,
0x2e,0x2b,0x31,0x3a,0x3f,0x44,0x3f,0x35,0x2e,0x2d,0x34,0x45,0x55,0x66,0x78,0x84,
0x8d,0x95,0x9a,0x9f,0xa4,0xa5,0xa4,0xa2,0xa0,0x9e,0x9a,0x9a,0x9c,0x9e,0x9f,0x9f,
0x9e,0x9b,0x95,0x8a,0x7a,0x69,0x5c,0x58,0x5c,0x67,0x74,0x7c,0x7e,0x78,0x70,0x66,
0x5e,0x59,0x57,0x4f,0x45,0x39,0x32,0x33,0x41,0x56,0x70,0x85,0x93,0x98,0x9b,0x98,
0x93,0x8e,0x86,0x79,0x68,0x56,0x48,0x42,0x3e,0x3e,0x3c,0x39,0x33,0x31,0x31,0x37,
0x42,0x53,0x62,0x6e,0x74,0x73,0x6f,0x6a,0x64,0x5e,0x59,0x51,0x47,0x3d,0x35,0x36,
0x3f,0x51,0x69,0x7e,0x8e,0x96,0x99,0x9a,0x99,0x9b,0xa1,0xa2,0xa1,0xa0,0x9f,0x9e,
0x9e,0x9d,0x9d,0x9f,0xa2,0xa2,0x9e,0x97,0x8c,0x7e,0x6f,0x62,0x5a,0x59,0x5f,0x69,
0x74,0x7c,0x84,0x8b,0x95,0x9c,0xa4,0xa8,0xa9,0xa4,0x9e,0x99,0x97,0x98,0x9b,0x9e,
0x9f,0x9e,0x9d,0x9c,0x9b,0x9a,0x99,0x9a,0x9a,0x98,0x93,0x8a,0x7b,0x70,0x62,0x55,
// Line 16
0x38,0x38,0x38,0x38,0x39,0x39,0x39,0x3a,0x3b,0x39,0x39,0x38,0x37,0x37,0x38,0x39,
0x38,0x37,0x38,0x36,0x35,0x34,0x36,0x39,0x3b,0x3a,0x3b,0x3a,0x39,0x38,0x38,0x39,
0x3a,0x3a,0x39,0x36,0x34,0x34,0x34,0x36,0x37,0x38,0x38,0x38,0x36,0x35,0x34,0x34,
0x34,0x35,0x38,0x37,0x38,0x35,0x30,0x30,0x37,0x44,0x59,0x6c,0x7a,0x7f,0x79,0x6e,
0x62,0x5d,0x61,0x6a,0x72,0x78,0x79,0x73,0x68,0x5f,0x5a,0x5b,0x61,0x6b,0x72,0x74,
0x73,0x6d,0x66,0x5f,0x5b,0x5f,0x68,0x6f,0x73,0x74,0x74,0x70,0x6a,0x63,0x60,0x61,
0x67,0x6d,0x71,0x76,0x74,0x6c,0x66,0x60,0x5e,0x61,0x66,0x6c,0x72,0x76,0x76,0x70,
0x69,0x60,0x5c,0x5c,0x62,0x69,0x71,0x74,0x74,0x6f,0x66,0x5e,0x5a,0x5c,0x64,0x6f,
0x76,0x79,0x76,0x6f,0x66,0x60,0x61,0x63,0x67,0x6e,0x6f,0x6e,0x70,0x73,0x7b,0x87,
0x94,0xa0,0xa9,0xad,0xab,0xa0,0x94,0x83,0x73,0x66,0x5c,0x56,0x51,0x4b,0x42,0x3b,
0x37,0x38,0x42,0x51,0x63,0x76,0x86,0x91,0x95,0x95,0x96,0x98,0x9d,0x9f,0x9d,0x97,
0x8a,0x79,0x69,0x5c,0x55,0x58,0x61,0x6c,0x76,0x7a,0x79,0x71,0x6b,0x62,0x60,0x66,
0x6e,0x74,0x78,0x78,0x71,0x69,0x60,0x5d,0x60,0x65,0x6b,0x6d,0x6d,0x6f,0x74,0x7c,
0x87,0x95,0xa4,0xac,0xa9,0xa2,0x98,0x93,0x93,0x95,0x98,0x9a,0x94,0x88,0x79,0x6b,
0x5e,0x54,0x4c,0x43,0x39,0x34,0x32,0x3a,0x4e,0x63,0x74,0x81,0x7f,0x74,0x69,0x5e,
0x58,0x56,0x52,0x4b,0x40,0x37,0x38,0x44,0x5b,0x71,0x81,0x83,0x79,0x68,0x5b,0x51,
0x4d,0x4a,0x45,0x3d,0x35,0x30,0x30,0x36,0x3c,0x3d,0x3c,0x38,0x32,0x2f,0x33,0x34,
0x32,0x30,0x2e,0x30,0x3a,0x49,0x5c,0x70,0x7c,0x7f,0x77,0x6b,0x62,0x62,0x64,0x69,
0x6d,0x72,0x76,0x7a,0x81,0x8b,0x97,0xa3,0xac,0xad,0xa9,0xa0,0x93,0x84,0x76,0x66,
0x5a,0x52,0x4c,0x48,0x42,0x3a,0x34,0x30,0x2f,0x30,0x36,0x3e,0x41,0x40,0x3c,0x38,
0x35,0x3b,0x48,0x5b,0x6f,0x7b,0x7b,0x72,0x62,0x56,0x54,0x5c,0x69,0x77,0x7e,0x7d,
0x77,0x6d,0x67,0x65,0x66,0x61,0x57,0x4a,0x39,0x2f,0x2f,0x39,0x4d,0x66,0x7b,0x8b,
0x94,0x95,0x94,0x91,0x8b,0x82,0x73,0x67,0x56,0x4a,0x40,0x3c,0x3b,0x3f,0x3e,0x3b,
0x39,0x38,0x3c,0x44,0x4f,0x5c,0x6b,0x76,0x78,0x72,0x68,0x5e,0x5a,0x60,0x6a,0x76,
0x7b,0x79,0x73,0x6b,0x64,0x62,0x62,0x5f,0x57,0x4a,0x3b,0x32,0x33,0x40,0x55,0x6c,
0x81,0x90,0x97,0x9f,0x9d,0x9a,0x94,0x86,0x73,0x62,0x59,0x57,0x61,0x6f,0x7c,0x81,
0x7c,0x72,0x67,0x63,0x61,0x5e,0x57,0x49,0x38,0x2e,0x31,0x40,0x59,0x70,0x80,0x82,
0x79,0x6a,0x5e,0x59,0x5d,0x64,0x6c,0x73,0x79,0x7f,0x87,0x91,0x9d,0xa1,0x9d,0x90,
0x7b,0x67,0x59,0x54,0x57,0x60,0x6d,0x7a,0x87,0x93,0x9b,0xa0,0x9c,0x91,0x83,0x74,
0x63,0x55,0x4b,0x43,0x3b,0x36,0x35,0x3c,0x4b,0x60,0x74,0x80,0x81,0x77,0x6a,0x5c,
0x56,0x5b,0x68,0x74,0x7b,0x79,0x73,0x69,0x63,0x5f,0x5e,0x59,0x55,0x48,0x39,0x30,
0x2b,0x2a,0x30,0x34,0x3a,0x45,0x53,0x62,0x6f,0x78,0x78,0x73,0x69,0x60,0x5c,0x60,
0x66,0x6d,0x73,0x78,0x7a,0x7f,0x87,0x94,0xa2,0xab,0xae,0xab,0xa0,0x91,0x81,0x72,
0x67,0x60,0x5c,0x55,0x4b,0x40,0x38,0x37,0x3f,0x4d,0x62,0x75,0x80,0x80,0x78,0x6a,
0x5d,0x55,0x50,0x4a,0x3e,0x35,0x30,0x34,0x45,0x5c,0x73,0x82,0x85,0x7c,0x6e,0x5f,
0x56,0x51,0x4c,0x43,0x3b,0x34,0x34,0x3d,0x4f,0x65,0x78,0x87,0x90,0x94,0x96,0x94,
0x8d,0x84,0x78,0x69,0x5d,0x56,0x58,0x62,0x6e,0x79,0x84,0x8e,0x96,0x9b,0x9c,0x95,
0x85,0x76,0x65,0x54,0x48,0x3f,0x36,0x31,0x31,0x38,0x48,0x5b,0x6b,0x78,0x7a,0x70,
0x62,0x57,0x54,0x53,0x50,0x49,0x40,0x3a,0x34,0x30,0x31,0x36,0x3e,0x46,0x4c,0x53,
0x5c,0x69,0x78,0x85,0x8c,0x91,0x95,0xa0,0xa6,0xa7,0xa4,0x9a,0x8b,0x7b,0x6c,0x60,
0x5c,0x5c,0x61,0x66,0x6b,0x72,0x7c,0x87,0x91,0x9a,0x9f,0xa2,0xa4,0xa5,0xa2,0x98,
0x8b,0x7a,0x6c,0x64,0x5e,0x5c,0x5e,0x67,0x6d,0x72,0x7a,0x84,0x8c,0x97,0x9b,0x9f,
0xa2,0xa2,0xa0,0x9c,0x98,0x96,0x99,0x9d,0xa1,0xa3,0xa3,0xa0,0x9d,0x9b,0x9b,0x9c,
0x9e,0x9d,0x9b,0x9a,0x9a,0x9b,0x9c,0x96,0x8b,0x7c,0x69,0x59,0x53,0x56,0x60,0x6e,
0x78,0x7a,0x74,0x70,0x68,0x60,0x5e,0x5b,0x54,0x4b,0x3c,0x34,0x35,0x41,0x58,0x71,
0x81,0x85,0x7e,0x6f,0x5e,0x55,0x58,0x62,0x6f,0x78,0x79,0x73,0x68,0x5f,0x59,0x58,
0x57,0x52,0x4b,0x3f,0x34,0x2d,0x2e,0x32,0x39,0x40,0x49,0x4f,0x5a,0x65,0x72,0x7e,
0x87,0x8f,0x94,0x94,0x8e,0x80,0x73,0x62,0x53,0x47,0x40,0x3c,0x3d,0x3e,0x3d,0x3c,
0x3c,0x3c,0x40,0x43,0x4b,0x54,0x61,0x71,0x7f,0x89,0x91,0x97,0x9b,0x9e,0xa0,0xa0,
0x9c,0x93,0x87,0x76,0x68,0x5d,0x55,0x4f,0x49,0x42,0x3b,0x37,0x38,0x40,0x50,0x65,
0x76,0x81,0x8a,0x91,0x94,0x98,0x9d,0xa0,0xa0,0xa0,0xa0,0x9f,0x9c,0x9b,0x9a,0x96,
0x8e,0x80,0x70,0x60,0x52,0x49,0x40,0x39,0x36,0x36,0x35,0x33,0x2f,0x2f,0x36,0x42,
0x53,0x62,0x6f,0x76,0x76,0x70,0x66,0x5d,0x59,0x54,0x4e,0x46,0x3d,0x35,0x35,0x3f,
0x50,0x67,0x7d,0x8c,0x93,0x95,0x96,0x97,0x9b,0xa1,0xa4,0xa3,0x9c,0x8f,0x81,0x72,
0x66,0x5e,0x5b,0x5c,0x62,0x6c,0x78,0x83,0x8a,0x91,0x96,0x9c,0xa1,0xa3,0xa4,0xa1,
0x97,0x89,0x79,0x6b,0x62,0x5d,0x5b,0x5f,0x65,0x6b,0x6f,0x7a,0x83,0x8c,0x96,0x9d,
0xa2,0xa5,0xa3,0x9e,0x95,0x89,0x7b,0x6d,0x63,0x5c,0x5b,0x5e,0x66,0x6d,0x76,0x7f,
0x88,0x94,0x9c,0xa2,0xa5,0xa8,0xa7,0xa2,0x97,0x8b,0x7d,0x6d,0x61,0x5b,0x5d,0x64,
0x6c,0x73,0x78,0x7e,0x86,0x8e,0x96,0x9c,0x99,0x8c,0x79,0x63,0x55,0x53,0x5b,0x68,
0x76,0x7e,0x7e,0x76,0x69,0x5e,0x57,0x54,0x4f,0x46,0x3c,0x30,0x29,0x29,0x2e,0x36,
0x3c,0x40,0x40,0x3c,0x36,0x30,0x2d,0x32,0x35,0x37,0x3b,0x3b,0x38,0x37,0x34,0x31,
0x37,0x42,0x54,0x66,0x73,0x7e,0x89,0x93,0x9a,0x99,0x92,0x86,0x76,0x67,0x59,0x4f,
0x46,0x3e,0x37,0x35,0x39,0x46,0x5b,0x70,0x7e,0x81,0x79,0x6b,0x5c,0x55,0x5a,0x66,
0x73,0x78,0x74,0x6f,0x64,0x5b,0x59,0x59,0x57,0x52,0x48,0x3b,0x31,0x2c,0x2e,0x32,
0x37,0x3c,0x43,0x4f,0x5a,0x64,0x6e,0x77,0x81,0x8a,0x93,0x9b,0xa1,0xa4,0xa2,0x9e,
0x9b,0x99,0x98,0x99,0x99,0x95,0x8f,0x82,0x70,0x60,0x53,0x49,0x40,0x3a,0x38,0x39,
0x38,0x36,0x35,0x36,0x38,0x41,0x4c,0x5b,0x6b,0x74,0x74,0x6d,0x64,0x5d,0x5b,0x60,
0x68,0x6f,0x73,0x76,0x78,0x81,0x90,0x9d,0xa3,0xa2,0x94,0x7e,0x69,0x58,0x51,0x55,
0x5f,0x6b,0x77,0x80,0x88,0x91,0x9a,0xa0,0xa3,0xa3,0xa3,0xa0,0x9d,0x99,0x98,0x9a,
0x9c,0x9d,0x9f,0xa0,0xa0,0x9d,0x99,0x97,0x97,0x97,0x97,0x94,0x8e,0x81,0x6e,0x5f,
0x56,0x58,0x62,0x6e,0x78,0x81,0x7e,0x74,0x6b,0x63,0x61,0x63,0x67,0x6b,0x6e,0x70,
0x76,0x7d,0x88,0x95,0xa2,0xad,0xaf,0xad,0xa5,0x9c,0x96,0x96,0x98,0x9b,0x9b,0x94,
0x86,0x73,0x60,0x55,0x55,0x5f,0x6d,0x78,0x7e,0x79,0x70,0x64,0x5c,0x5b,0x5b,0x54,
0x47,0x38,0x30,0x32,0x40,0x57,0x71,0x82,0x86,0x7a,0x69,0x5b,0x53,0x4f,0x50,0x4c,
0x42,0x39,0x30,0x2d,0x32,0x3b,0x43,0x46,0x41,0x38,0x2e,0x2f,0x37,0x47,0x5c,0x6e,
0x77,0x7b,0x74,0x68,0x5f,0x57,0x50,0x4c,0x45,0x3d,0x34,0x2e,0x2d,0x30,0x38,0x3f,
0x43,0x44,0x3f,0x37,0x32,0x32,0x3e,0x4f,0x61,0x70,0x7d,0x86,0x8c,0x92,0x99,0xa0,
0xa6,0xa7,0xa4,0xa1,0x9f,0x9e,0xa0,0xa5,0xa5,0xa3,0xa2,0x9e,0x9a,0x9a,0x9a,0x98,
0x9a,0x9a,0x9a,0x99,0x99,0x9c,0xa0,0x9d,0x94,0x84,0x72,0x62,0x58,0x55,0x59,0x62,
0x6d,0x76,0x7e,0x87,0x90,0x98,0x9d,0x9b,0x90,0x7f,0x6d,0x5c,0x53,0x54,0x5d,0x69,
0x76,0x81,0x89,0x91,0x94,0x98,0x9f,0xa2,0xa3,0x9d,0x97,0x8a,0x7b,0x6e,0x62,0x5c,
0x5b,0x62,0x6e,0x79,0x7b,0x78,0x71,0x67,0x5f,0x5d,0x60,0x66,0x6b,0x6c,0x6f,0x76,
0x81,0x8c,0x97,0x9b,0x96,0x87,0x75,0x61,0x50,0x44,0x3d,0x38,0x37,0x35,0x34,0x33,
0x38,0x39,0x3b,0x3c,0x3a,0x35,0x38,0x39,0x3f,0x4e,0x60,0x70,0x79,0x79,0x71,0x63,
0x56,0x51,0x59,0x64,0x6f,0x76,0x74,0x6d,0x65,0x5f,0x5e,0x60,0x61,0x5a,0x4d,0x3e,
0x34,0x34,0x40,0x54,0x6a,0x7b,0x87,0x8c,0x8f,0x92,0x97,0x9b,0xa0,0x9f,0x9d,0x9b,
0x9a,0x9c,0xa1,0x9f,0x97,0x8c,0x7d,0x6e,0x62,0x5a,0x51,0x48,0x3f,0x37,0x34,0x3a,
0x48,0x5d,0x73,0x81,0x81,0x78,0x6b,0x5f,0x57,0x52,0x4d,0x44,0x39,0x32,0x32,0x3d,
0x4f,0x65,0x7d,0x8b,0x91,0x94,0x93,0x92,0x90,0x87,0x78,0x68,0x5c,0x58,0x5c,0x6b,
0x76,0x7d,0x7d,0x76,0x6b,0x61,0x5c,0x5d,0x63,0x69,0x6e,0x72,0x77,0x80,0x8a,0x95,
0x9f,0xa7,0xab,0xa8,0x9f,0x91,0x7f,0x6f,0x62,0x5a,0x56,0x54,0x4d,0x40,0x38,0x32,
0x35,0x47,0x5e,0x74,0x7d,0x81,0x78,0x69,0x5d,0x57,0x53,0x4f,0x47,0x3d,0x37,0x37,
0x3e,0x50,0x66,0x7a,0x8a,0x91,0x95,0x97,0x98,0x9b,0xa0,0xa2,0xa2,0xa0,0x9d,0x9c,
0x9b,0x9a,0x94,0x87,0x78,0x67,0x59,0x4f,0x47,0x42,0x3a,0x37,0x32,0x31,0x35,0x39,
0x3c,0x3c,0x3a,0x35,0x32,0x2e,0x2f,0x32,0x35,0x35,0x36,0x37,0x38,0x38,0x38,0x39,
0x38,0x37,0x37,0x38,0x38,0x34,0x34,0x36,0x36,0x35,0x35,0x36,0x37,0x39,0x39,0x3a,
// Line 17
0x37,0x37,0x36,0x35,0x37,0x37,0x37,0x37,0x36,0x36,0x34,0x34,0x34,0x34,0x37,0x36,
0x36,0x37,0x36,0x35,0x37,0x38,0x39,0x38,0x38,0x37,0x37,0x37,0x37,0x37,0x38,0x38,
0x38,0x37,0x37,0x36,0x37,0x36,0x35,0x34,0x33,0x34,0x35,0x37,0x38,0x37,0x38,0x37,
0x35,0x37,0x37,0x37,0x38,0x35,0x33,0x34,0x3c,0x4a,0x5d,0x6f,0x7b,0x80,0x7c,0x72,
0x66,0x60,0x61,0x69,0x75,0x7b,0x7b,0x76,0x6d,0x62,0x5f,0x61,0x68,0x6f,0x76,0x78,
0x76,0x70,0x6a,0x65,0x62,0x63,0x68,0x70,0x77,0x7b,0x7b,0x76,0x6a,0x61,0x5f,0x62,
0x6a,0x73,0x79,0x7c,0x78,0x70,0x68,0x62,0x60,0x61,0x6a,0x72,0x78,0x7a,0x76,0x6d,
0x66,0x60,0x5e,0x60,0x67,0x6e,0x74,0x77,0x74,0x6e,0x66,0x60,0x60,0x64,0x6d,0x77,
0x7f,0x7f,0x7a,0x73,0x6c,0x66,0x64,0x68,0x6d,0x71,0x73,0x71,0x70,0x76,0x7e,0x87,
0x93,0x9f,0xa7,0xaa,0xa5,0x9a,0x8e,0x7e,0x70,0x64,0x5d,0x56,0x50,0x4a,0x44,0x3e,
0x3c,0x3e,0x47,0x59,0x6c,0x7e,0x8b,0x92,0x95,0x96,0x99,0x9d,0x9f,0x9f,0x9d,0x97,
0x8d,0x7e,0x6d,0x5f,0x59,0x5c,0x65,0x70,0x7a,0x82,0x80,0x76,0x6d,0x64,0x63,0x67,
0x71,0x77,0x79,0x76,0x6f,0x68,0x63,0x61,0x64,0x6a,0x6e,0x70,0x70,0x72,0x75,0x7d,
0x89,0x97,0xa4,0xab,0xab,0xa6,0xa1,0x9c,0x99,0x9a,0x9c,0x9c,0x96,0x88,0x78,0x69,
0x5c,0x50,0x48,0x41,0x3b,0x36,0x36,0x40,0x53,0x68,0x79,0x80,0x7f,0x72,0x62,0x59,
0x54,0x52,0x4e,0x46,0x3a,0x34,0x38,0x48,0x5f,0x75,0x85,0x8a,0x81,0x6f,0x60,0x59,
0x5c,0x62,0x6c,0x73,0x78,0x7e,0x84,0x8e,0x9a,0xa4,0xab,0xab,0xa3,0x98,0x8b,0x7e,
0x71,0x64,0x5a,0x50,0x47,0x43,0x41,0x3e,0x3d,0x3a,0x39,0x39,0x3c,0x40,0x47,0x53,
0x5e,0x6b,0x76,0x7f,0x86,0x8d,0x95,0x9d,0xa4,0xa5,0xa2,0xa0,0x9c,0x9a,0x9c,0x9f,
0xa3,0xa1,0x96,0x85,0x73,0x65,0x5e,0x5c,0x5e,0x64,0x6f,0x79,0x83,0x8c,0x95,0x9b,
0x9a,0x90,0x80,0x6f,0x5d,0x4f,0x46,0x40,0x3b,0x38,0x3a,0x43,0x55,0x69,0x7d,0x86,
0x85,0x7b,0x6d,0x61,0x59,0x54,0x51,0x4a,0x3f,0x35,0x36,0x42,0x57,0x6c,0x84,0x90,
0x96,0x97,0x95,0x90,0x8d,0x82,0x74,0x64,0x51,0x43,0x3b,0x3d,0x3d,0x3c,0x3b,0x38,
0x36,0x34,0x3a,0x46,0x55,0x63,0x71,0x79,0x7b,0x73,0x69,0x5f,0x5d,0x61,0x6b,0x75,
0x7c,0x7c,0x75,0x69,0x60,0x5d,0x63,0x6d,0x74,0x75,0x75,0x75,0x7a,0x86,0x96,0xa3,
0xa7,0x9f,0x8e,0x7a,0x66,0x58,0x56,0x5b,0x64,0x6e,0x78,0x83,0x8d,0x96,0x9d,0xa0,
0xa2,0xa3,0xa4,0xa2,0xa0,0x9d,0x9f,0x9f,0xa0,0xa1,0xa1,0xa1,0x9f,0x9d,0x9b,0x97,
0x98,0x99,0x9a,0x96,0x8e,0x80,0x72,0x63,0x59,0x59,0x62,0x70,0x7b,0x82,0x80,0x77,
0x6c,0x63,0x61,0x68,0x72,0x7b,0x80,0x7e,0x78,0x6d,0x66,0x63,0x67,0x6f,0x76,0x78,
0x78,0x77,0x7a,0x84,0x90,0x9b,0xa2,0x9e,0x8e,0x77,0x5f,0x51,0x50,0x5d,0x6b,0x76,
0x7a,0x77,0x6f,0x68,0x60,0x59,0x55,0x4d,0x41,0x3a,0x34,0x38,0x45,0x5a,0x70,0x80,
0x8e,0x93,0x97,0x9b,0x9b,0x92,0x88,0x77,0x66,0x5b,0x58,0x5e,0x6a,0x75,0x7c,0x7b,
0x72,0x66,0x60,0x60,0x67,0x72,0x7a,0x7d,0x79,0x71,0x67,0x5f,0x60,0x63,0x62,0x5b,
0x4d,0x3c,0x31,0x31,0x41,0x5b,0x77,0x8a,0x8d,0x82,0x70,0x5e,0x58,0x5f,0x6d,0x7d,
0x83,0x80,0x76,0x69,0x60,0x5e,0x5f,0x5e,0x56,0x48,0x38,0x30,0x34,0x48,0x61,0x7a,
0x8a,0x8b,0x82,0x72,0x64,0x5d,0x5d,0x63,0x6a,0x70,0x76,0x7a,0x80,0x88,0x94,0xa1,
0xaa,0xab,0xa8,0xa2,0x9c,0x9c,0x9d,0x9f,0x9c,0x98,0x8e,0x81,0x6d,0x5b,0x4d,0x48,
0x41,0x3e,0x3e,0x3d,0x38,0x37,0x34,0x33,0x38,0x43,0x53,0x66,0x73,0x77,0x75,0x6d,
0x66,0x60,0x5a,0x55,0x4f,0x46,0x3c,0x37,0x37,0x45,0x5d,0x77,0x89,0x8b,0x81,0x70,
0x60,0x58,0x59,0x63,0x71,0x7b,0x7f,0x79,0x6e,0x62,0x5d,0x63,0x6a,0x71,0x78,0x7a,
0x76,0x6f,0x64,0x5e,0x5e,0x60,0x5f,0x57,0x4a,0x3a,0x30,0x30,0x3d,0x52,0x69,0x7e,
0x8d,0x97,0x9b,0x9a,0x96,0x8f,0x85,0x79,0x6b,0x60,0x5d,0x60,0x66,0x6f,0x78,0x83,
0x8c,0x95,0x9b,0xa2,0xa8,0xa9,0xa4,0x9f,0x96,0x93,0x96,0x9b,0x9c,0x98,0x90,0x81,
0x6f,0x60,0x5a,0x5c,0x6a,0x74,0x7c,0x7e,0x78,0x70,0x69,0x63,0x5e,0x58,0x4d,0x40,
0x31,0x2e,0x35,0x49,0x62,0x79,0x85,0x84,0x77,0x67,0x5c,0x55,0x50,0x4a,0x41,0x37,
0x32,0x37,0x47,0x60,0x76,0x83,0x85,0x7b,0x6a,0x5a,0x52,0x4e,0x4b,0x47,0x3d,0x33,
0x30,0x2d,0x2f,0x35,0x3c,0x44,0x4c,0x54,0x5d,0x6d,0x7c,0x89,0x90,0x96,0x9a,0xa0,
0xa7,0xab,0xa7,0x9e,0x8e,0x7a,0x6c,0x62,0x5f,0x62,0x69,0x6f,0x76,0x7a,0x80,0x89,
0x93,0x9b,0x9e,0x99,0x8a,0x73,0x5f,0x53,0x52,0x5b,0x6a,0x76,0x7d,0x78,0x6d,0x61,
0x58,0x55,0x54,0x50,0x45,0x39,0x2f,0x2a,0x2d,0x36,0x40,0x46,0x47,0x41,0x39,0x32,
0x31,0x37,0x43,0x52,0x62,0x70,0x7c,0x86,0x8e,0x97,0x9d,0xa0,0xa1,0xa2,0xa0,0x97,
0x89,0x77,0x66,0x59,0x4f,0x49,0x46,0x43,0x3e,0x37,0x30,0x2d,0x30,0x36,0x3a,0x40,
0x3c,0x35,0x34,0x34,0x3c,0x4b,0x60,0x73,0x7d,0x7c,0x74,0x63,0x5b,0x57,0x5c,0x68,
0x72,0x78,0x7e,0x81,0x88,0x93,0x9f,0xa4,0xa1,0x92,0x7d,0x69,0x5a,0x56,0x5b,0x68,
0x75,0x7f,0x86,0x8d,0x92,0x99,0xa0,0xa2,0xa3,0xa0,0x9b,0x98,0x96,0x95,0x97,0x98,
0x96,0x8f,0x84,0x72,0x63,0x5b,0x5a,0x61,0x6e,0x78,0x7c,0x7b,0x72,0x66,0x5e,0x5d,
0x64,0x71,0x7a,0x7d,0x77,0x6e,0x64,0x5e,0x5d,0x5a,0x56,0x4d,0x41,0x35,0x2e,0x2a,
0x2d,0x32,0x39,0x41,0x4b,0x58,0x68,0x76,0x7c,0x7a,0x72,0x68,0x60,0x5e,0x65,0x6d,
0x74,0x78,0x78,0x7c,0x83,0x8d,0x9a,0xa2,0x9f,0x90,0x78,0x62,0x53,0x4e,0x56,0x63,
0x71,0x7e,0x86,0x8d,0x94,0x9a,0xa1,0xa5,0xa7,0xa5,0xa0,0x97,0x8b,0x7b,0x6f,0x64,
0x5d,0x5c,0x60,0x66,0x6d,0x74,0x7b,0x84,0x8d,0x95,0x9d,0xa5,0xa7,0xa5,0xa1,0x9d,
0x9a,0x99,0x9a,0x9b,0x9e,0xa0,0xa1,0x9f,0x9a,0x96,0x96,0x98,0x99,0x97,0x92,0x8a,
0x7e,0x6e,0x60,0x57,0x58,0x61,0x6f,0x7a,0x7f,0x7e,0x78,0x6f,0x67,0x64,0x67,0x6c,
0x70,0x72,0x73,0x78,0x80,0x8d,0x9a,0xa8,0xad,0xaa,0xa6,0x9e,0x97,0x95,0x95,0x96,
0x9a,0x9e,0xa1,0xa1,0xa0,0x9e,0x9f,0xa1,0xa2,0xa2,0xa1,0x9b,0x8d,0x7e,0x6d,0x60,
0x5b,0x5c,0x62,0x6b,0x73,0x7d,0x85,0x8d,0x95,0x9b,0x99,0x8f,0x7c,0x6c,0x57,0x47,
0x3e,0x3a,0x39,0x3d,0x3a,0x35,0x33,0x32,0x34,0x38,0x41,0x4d,0x5c,0x6a,0x77,0x83,
0x8e,0x95,0x99,0x9a,0x95,0x8b,0x7c,0x6b,0x5c,0x57,0x5b,0x66,0x75,0x82,0x8c,0x92,
0x96,0x99,0x9c,0x9f,0xa1,0xa1,0x9d,0x94,0x88,0x7b,0x6b,0x60,0x5e,0x62,0x69,0x72,
0x7a,0x7c,0x78,0x70,0x65,0x5d,0x5f,0x65,0x6d,0x75,0x78,0x77,0x72,0x6a,0x63,0x63,
0x64,0x69,0x6b,0x6a,0x6c,0x72,0x79,0x83,0x8e,0x9c,0xa7,0xad,0xae,0xa8,0xa1,0x9d,
0x99,0x97,0x98,0x9c,0x9f,0xa0,0x9e,0x9a,0x99,0x97,0x97,0x95,0x97,0x96,0x98,0x9b,
0x9d,0x9d,0x9c,0x95,0x89,0x7b,0x6d,0x60,0x57,0x4d,0x45,0x40,0x3a,0x39,0x3d,0x48,
0x57,0x68,0x7a,0x86,0x8e,0x93,0x97,0x9a,0x9d,0x9f,0x9d,0x99,0x90,0x84,0x77,0x6b,
0x5e,0x52,0x4c,0x46,0x42,0x3e,0x3b,0x37,0x36,0x34,0x36,0x3c,0x45,0x52,0x5d,0x69,
0x73,0x7e,0x88,0x90,0x96,0x98,0x92,0x86,0x74,0x63,0x5a,0x5b,0x65,0x72,0x7e,0x83,
0x80,0x76,0x6a,0x61,0x5e,0x5c,0x56,0x4a,0x3c,0x31,0x31,0x3d,0x51,0x68,0x7e,0x8a,
0x8e,0x8f,0x91,0x94,0x9b,0x9e,0x9f,0x9f,0x9d,0x9b,0x9b,0x9e,0xa1,0xa1,0xa1,0xa1,
0x9f,0xa1,0x9b,0x92,0x84,0x72,0x62,0x5a,0x59,0x61,0x6e,0x79,0x7f,0x7a,0x6e,0x60,
0x58,0x5a,0x62,0x6d,0x76,0x79,0x77,0x72,0x6a,0x64,0x63,0x62,0x5e,0x57,0x4a,0x3c,
0x32,0x33,0x3f,0x52,0x69,0x7e,0x8c,0x96,0x97,0x95,0x97,0x9a,0x9d,0xa1,0xa1,0x9f,
0x9c,0x9a,0x99,0x99,0x9b,0x9e,0xa1,0xa3,0xa0,0x96,0x88,0x78,0x69,0x5e,0x57,0x50,
0x49,0x40,0x38,0x36,0x3c,0x4b,0x60,0x75,0x82,0x83,0x78,0x68,0x5a,0x57,0x5f,0x6c,
0x7a,0x81,0x7f,0x76,0x6a,0x60,0x5e,0x60,0x5d,0x51,0x45,0x37,0x2e,0x33,0x43,0x5c,
0x72,0x7f,0x81,0x78,0x69,0x5a,0x52,0x4d,0x48,0x43,0x3c,0x33,0x2d,0x2c,0x31,0x3a,
0x41,0x41,0x3e,0x39,0x36,0x37,0x40,0x4e,0x5c,0x6b,0x77,0x83,0x8d,0x93,0x99,0x95,
0x8e,0x80,0x6f,0x5f,0x51,0x46,0x46,0x43,0x3d,0x3a,0x37,0x35,0x37,0x3b,0x3f,0x41,
0x3e,0x37,0x30,0x30,0x38,0x49,0x60,0x73,0x7f,0x81,0x78,0x6b,0x62,0x60,0x64,0x6d,
0x75,0x78,0x7b,0x7f,0x85,0x8d,0x95,0x9a,0x98,0x8b,0x77,0x60,0x4f,0x45,0x40,0x41,
0x43,0x41,0x3e,0x38,0x34,0x35,0x3a,0x43,0x4b,0x58,0x64,0x72,0x7f,0x8a,0x95,0x9d,
0xa0,0x99,0x8b,0x78,0x67,0x5d,0x5c,0x61,0x6d,0x78,0x80,0x7d,0x73,0x66,0x5d,0x58,
0x53,0x4d,0x45,0x39,0x2e,0x2a,0x2c,0x32,0x3a,0x40,0x40,0x3e,0x3a,0x37,0x33,0x36,
0x36,0x35,0x35,0x37,0x3d,0x4d,0x5a,0x69,0x76,0x80,0x88,0x8e,0x96,0x9d,0xa4,0xa7,
0xa4,0x9c,0x91,0x85,0x77,0x6c,0x63,0x5a,0x51,0x48,0x40,0x3c,0x37,0x34,0x34,0x35,
0x37,0x39,0x3a,0x3a,0x38,0x34,0x30,0x2e,0x31,0x32,0x33,0x34,0x33,0x33,0x33,0x35,
0x38,0x3b,0x3b,0x38,0x38,0x38,0x3b,0x3b,0x3e,0x3d,0x3d,0x3d,0x3a,0x37,0x38,0x39,
// Line 18
0x34,0x34,0x35,0x35,0x35,0x35,0x34,0x33,0x34,0x35,0x37,0x38,0x38,0x37,0x37,0x37,
0x36,0x38,0x39,0x39,0x3b,0x3c,0x3a,0x38,0x39,0x39,0x38,0x38,0x37,0x39,0x3b,0x3b,
0x39,0x39,0x3d,0x41,0x44,0x48,0x4b,0x4f,0x51,0x51,0x52,0x54,0x58,0x5b,0x5e,0x5d,
0x5c,0x59,0x5a,0x5a,0x5c,0x5d,0x5e,0x5b,0x5c,0x59,0x57,0x5a,0x5c,0x5c,0x5b,0x59,
0x56,0x56,0x56,0x59,0x5b,0x5c,0x5a,0x57,0x57,0x57,0x59,0x5c,0x5c,0x5c,0x5c,0x59,
0x57,0x56,0x57,0x5a,0x5c,0x5b,0x5a,0x59,0x58,0x56,0x56,0x57,0x59,0x59,0x5b,0x5b,
0x5a,0x5a,0x5a,0x5a,0x5b,0x5b,0x5a,0x59,0x57,0x56,0x54,0x53,0x54,0x56,0x59,0x59,
0x58,0x56,0x56,0x54,0x55,0x55,0x56,0x58,0x57,0x56,0x55,0x54,0x56,0x57,0x58,0x58,
0x58,0x58,0x58,0x57,0x57,0x56,0x58,0x5a,0x5c,0x5b,0x5a,0x58,0x56,0x56,0x56,0x57,
0x58,0x59,0x59,0x58,0x57,0x57,0x58,0x5a,0x5a,0x59,0x59,0x59,0x58,0x59,0x59,0x5a,
0x5a,0x5b,0x5b,0x5b,0x5a,0x5a,0x5a,0x5b,0x5a,0x59,0x5a,0x5b,0x5c,0x5d,0x5d,0x5d,
0x5c,0x59,0x58,0x59,0x59,0x5a,0x58,0x59,0x57,0x56,0x58,0x5a,0x5b,0x5d,0x5c,0x5b,
0x5b,0x59,0x59,0x59,0x5a,0x5a,0x5b,0x5b,0x5b,0x59,0x58,0x57,0x57,0x58,0x59,0x5a,
0x5c,0x5a,0x59,0x59,0x59,0x5a,0x5c,0x5c,0x5c,0x5b,0x58,0x57,0x57,0x59,0x5c,0x5d,
0x5d,0x5e,0x5e,0x5f,0x5c,0x5a,0x5c,0x5d,0x5c,0x5b,0x59,0x57,0x57,0x57,0x57,0x56,
0x55,0x56,0x58,0x5a,0x5b,0x5a,0x59,0x57,0x56,0x57,0x57,0x58,0x59,0x57,0x56,0x56,
0x56,0x56,0x58,0x59,0x59,0x58,0x58,0x59,0x5a,0x5a,0x5c,0x5a,0x5b,0x5b,0x5d,0x60,
0x5f,0x5e,0x5d,0x5a,0x59,0x56,0x57,0x56,0x55,0x57,0x59,0x59,0x58,0x57,0x58,0x5a,
0x5a,0x58,0x58,0x57,0x57,0x58,0x58,0x5a,0x5a,0x59,0x59,0x57,0x57,0x59,0x5c,0x5f,
0x5e,0x5a,0x58,0x57,0x59,0x5d,0x60,0x63,0x61,0x59,0x51,0x4a,0x51,0x5f,0x71,0x82,
0x89,0x86,0x7c,0x6d,0x63,0x63,0x68,0x6a,0x67,0x5d,0x52,0x4c,0x4b,0x51,0x5c,0x66,
0x6a,0x66,0x5f,0x58,0x55,0x56,0x58,0x59,0x5a,0x5a,0x5a,0x5c,0x5b,0x59,0x59,0x59,
0x59,0x59,0x5a,0x5c,0x5d,0x5d,0x5b,0x59,0x57,0x57,0x59,0x5c,0x5c,0x5a,0x5c,0x5c,
0x5c,0x5d,0x5d,0x5a,0x58,0x56,0x56,0x57,0x57,0x57,0x56,0x58,0x57,0x56,0x59,0x5a,
0x5a,0x59,0x57,0x56,0x57,0x5c,0x5f,0x5f,0x5b,0x58,0x57,0x58,0x59,0x5b,0x5c,0x5b,
0x58,0x57,0x58,0x5a,0x5c,0x5e,0x5f,0x5f,0x5d,0x5c,0x5d,0x5e,0x5f,0x5c,0x5a,0x59,
0x5a,0x59,0x59,0x59,0x5a,0x5c,0x5c,0x5d,0x5d,0x5e,0x5f,0x5e,0x5c,0x58,0x58,0x59,
0x5a,0x5c,0x5a,0x59,0x59,0x58,0x57,0x57,0x57,0x57,0x57,0x57,0x57,0x59,0x5a,0x5a,
0x59,0x5b,0x5c,0x5c,0x5c,0x5b,0x5a,0x59,0x57,0x56,0x59,0x5b,0x5d,0x5c,0x5a,0x59,
0x5a,0x5b,0x5c,0x5b,0x5b,0x5b,0x5c,0x5a,0x58,0x56,0x59,0x5a,0x59,0x5a,0x5a,0x5a,
0x5a,0x59,0x58,0x58,0x59,0x5c,0x5d,0x5c,0x5a,0x59,0x5c,0x5c,0x5c,0x5c,0x5e,0x5c,
0x5c,0x5d,0x5e,0x5e,0x5d,0x5d,0x5f,0x5f,0x5c,0x58,0x59,0x58,0x58,0x59,0x59,0x58,
0x5a,0x59,0x57,0x56,0x56,0x58,0x5d,0x5e,0x5c,0x59,0x59,0x59,0x59,0x5b,0x5d,0x5d,
0x5d,0x5b,0x57,0x56,0x56,0x57,0x59,0x5a,0x5c,0x5a,0x57,0x55,0x56,0x58,0x5a,0x5a,
0x5a,0x5a,0x5a,0x5c,0x5a,0x59,0x5a,0x5a,0x59,0x59,0x57,0x57,0x56,0x57,0x56,0x57,
0x56,0x58,0x5a,0x5a,0x59,0x59,0x5a,0x5a,0x5a,0x5b,0x5c,0x5a,0x5a,0x5a,0x5a,0x59,
0x56,0x56,0x59,0x5c,0x5b,0x5a,0x5a,0x59,0x59,0x5a,0x5b,0x5a,0x5c,0x59,0x58,0x59,
0x59,0x5a,0x5b,0x5d,0x5c,0x5b,0x5a,0x5a,0x5a,0x59,0x5a,0x5a,0x5b,0x5b,0x5a,0x5a,
0x57,0x53,0x50,0x4e,0x4d,0x4b,0x47,0x43,0x44,0x46,0x48,0x48,0x47,0x48,0x49,0x48,
0x45,0x42,0x43,0x46,0x47,0x47,0x42,0x41,0x43,0x46,0x45,0x44,0x43,0x44,0x42,0x43,
0x41,0x3f,0x42,0x46,0x48,0x48,0x47,0x45,0x46,0x47,0x48,0x48,0x44,0x43,0x44,0x44,
0x44,0x43,0x43,0x44,0x47,0x4a,0x49,0x48,0x48,0x49,0x48,0x48,0x45,0x44,0x44,0x43,
0x41,0x3f,0x41,0x44,0x44,0x47,0x46,0x44,0x46,0x48,0x49,0x4b,0x4a,0x49,0x4a,0x48,
0x47,0x47,0x46,0x44,0x43,0x42,0x43,0x43,0x44,0x43,0x45,0x47,0x46,0x44,0x45,0x48,
0x47,0x46,0x45,0x44,0x44,0x44,0x44,0x47,0x48,0x48,0x46,0x46,0x45,0x45,0x45,0x44,
0x44,0x45,0x45,0x44,0x45,0x46,0x47,0x47,0x47,0x46,0x48,0x48,0x49,0x49,0x48,0x47,
0x47,0x48,0x4a,0x49,0x49,0x48,0x47,0x47,0x46,0x44,0x47,0x48,0x48,0x47,0x47,0x46,
0x44,0x43,0x43,0x45,0x47,0x48,0x47,0x46,0x46,0x44,0x46,0x47,0x47,0x48,0x46,0x44,
0x45,0x44,0x46,0x48,0x49,0x49,0x48,0x47,0x47,0x48,0x4b,0x50,0x54,0x5d,0x66,0x6f,
0x7a,0x85,0x90,0x9c,0xa4,0xab,0xaf,0xb0,0xb0,0xb1,0xb2,0xb3,0xb4,0xb3,0xb1,0xb0,
0xb1,0xb1,0xb2,0xb6,0xb4,0xb4,0xb5,0xb4,0xb3,0xaf,0xaf,0xaf,0xb0,0xaf,0xaf,0xae,
0xad,0xac,0xae,0xb0,0xb1,0xb1,0xb3,0xb1,0xaf,0xae,0xae,0xb0,0xb1,0xb2,0xb3,0xb4,
0xb4,0xb4,0xb3,0xb4,0xb2,0xb3,0xb4,0xb3,0xb0,0xaf,0xae,0xad,0xae,0xb0,0xb3,0xb1,
0xb0,0xad,0xac,0xae,0xaf,0xb0,0xb2,0xb3,0xb2,0xb2,0xb3,0xb4,0xb4,0xb3,0xb1,0xb2,
0xb0,0xaf,0xb0,0xb0,0xae,0xad,0xb0,0xb0,0xb0,0xb0,0xb2,0xb3,0xb4,0xb2,0xb1,0xb2,
0xb2,0xb2,0xb3,0xb3,0xb3,0xb1,0xb1,0xb0,0xb1,0xb2,0xb3,0xb0,0xb0,0xae,0xaf,0xb1,
0xb2,0xb3,0xb4,0xb4,0xb1,0xb0,0xb0,0xb2,0xb2,0xb2,0xb0,0xae,0xad,0xad,0xad,0xaf,
0xaf,0xb0,0xb3,0xb3,0xb1,0xb0,0xaf,0xb0,0xb0,0xb0,0xb0,0xb1,0xb0,0xae,0xae,0xaf,
0xb0,0xb0,0xb1,0xb1,0xb0,0xb1,0xb1,0xb3,0xb4,0xb2,0xb1,0xb1,0xb0,0xaf,0xad,0xae,
0xae,0xaf,0xb0,0xb0,0xb1,0xb1,0xb2,0xb0,0xaf,0xac,0xab,0xaa,0xa6,0xa3,0xa1,0xa0,
0xa0,0xa0,0x9e,0x9d,0x9e,0xa0,0xa0,0xa0,0xa0,0xa0,0x9f,0xa0,0xa0,0xa0,0xa3,0xa3,
0xa3,0xa3,0xa1,0xa0,0xa1,0xa2,0xa2,0xa0,0xa0,0xa0,0x9f,0x9c,0x9a,0x9b,0x9f,0xa0,
0x9e,0x9d,0x9d,0x9c,0x9b,0x9b,0x9b,0x99,0x9c,0x9c,0x9c,0x9e,0x9d,0x9c,0x9e,0x9e,
0x9e,0xa0,0xa0,0x9f,0x9f,0x9e,0x9d,0x9c,0x9d,0x9f,0xa3,0xa2,0xa0,0x9f,0xa0,0x9e,
0x9f,0x9f,0xa2,0xa3,0xa4,0xa3,0xa3,0xa0,0x9f,0x9e,0xa0,0xa1,0xa1,0xa0,0xa2,0xa0,
0x9f,0x9f,0xa0,0xa0,0xa2,0xa1,0xa1,0xa3,0xa3,0xa0,0xa0,0xa0,0xa0,0xa1,0xa2,0xa3,
0xa3,0xa2,0xa0,0x9e,0x9e,0x9e,0x9f,0xa0,0xa0,0x9e,0xa0,0xa0,0x9f,0x9e,0x9e,0x9f,
0xa1,0xa1,0xa3,0xa3,0xa2,0xa0,0x9f,0xa0,0xa1,0xa1,0xa4,0xa3,0xa0,0xa0,0xa0,0x9e,
0x9f,0x9f,0xa0,0xa1,0xa0,0xa1,0xa1,0xa1,0xa0,0xa1,0xa3,0xa3,0xa2,0x9f,0x9d,0x9c,
0x9e,0xa0,0xa3,0xa3,0xa3,0xa0,0xa0,0x9f,0xa0,0xa1,0xa3,0xa2,0x9f,0x9e,0x9d,0x9e,
0xa0,0xa0,0xa1,0xa3,0xa2,0xa0,0xa0,0xa0,0xa1,0xa4,0xa4,0xa4,0xa3,0xa2,0xa1,0xa0,
0xa1,0xa1,0xa0,0x9e,0x9c,0x9a,0x9d,0x9e,0xa0,0xa0,0xa1,0xa1,0xa1,0xa1,0xa2,0xa3,
0xa0,0x9f,0x9d,0x9c,0x9d,0x9f,0xa0,0xa0,0x9e,0x9f,0x9f,0xa0,0xa0,0xa1,0xa1,0xa3,
0xa2,0x9f,0x9d,0x9d,0x9d,0x9f,0xa1,0xa1,0x9f,0xa0,0x9e,0x9c,0x9e,0xa0,0xa0,0xa2,
0xa1,0xa0,0xa0,0x9e,0x9e,0x9f,0xa0,0xa0,0xa0,0xa0,0xa2,0xa1,0xa0,0x9e,0x9f,0xa0,
0xa1,0xa0,0xa0,0xa0,0x9f,0x9e,0x9f,0x9f,0xa0,0xa1,0xa1,0xa1,0xa1,0xa0,0xa0,0xa3,
0xa3,0xa1,0xa1,0xa0,0x9f,0xa0,0x9e,0xa0,0xa3,0xa4,0xa4,0xa0,0x9d,0x9a,0x9c,0xa1,
0xa3,0xa3,0x9e,0x92,0x81,0x73,0x6d,0x6f,0x78,0x82,0x89,0x8e,0x8f,0x91,0x95,0x9c,
0xa5,0xab,0xae,0xab,0xa5,0x9e,0x9b,0x9a,0x9f,0xa3,0xa6,0xa6,0xa3,0x9f,0x9e,0x9c,
0x9c,0x9c,0x9d,0x9d,0x9d,0x9f,0x9f,0x9f,0xa0,0x9e,0x9e,0x9f,0xa0,0xa0,0xa1,0xa0,
0xa0,0xa1,0xa0,0xa1,0xa1,0xa2,0xa1,0xa0,0xa1,0xa2,0xa3,0xa3,0xa3,0xa0,0x9f,0x9e,
0x9f,0xa0,0xa0,0xa0,0xa0,0x9f,0x9f,0xa0,0xa1,0xa2,0xa1,0x9f,0x9d,0x9c,0x9c,0x9c,
0x9c,0x9e,0x9e,0x9c,0x9b,0x9a,0x9c,0x9f,0xa0,0x9e,0x9e,0x9e,0x9f,0x9f,0xa0,0xa1,
0xa0,0xa3,0x9e,0x9b,0x9c,0x9d,0x9c,0x9c,0x9c,0x9c,0x9e,0x9f,0xa2,0xa1,0xa3,0xa3,
0xa5,0xa5,0xa6,0xa6,0xa5,0xa2,0xa0,0xa0,0x9e,0x9e,0x9e,0x9d,0x9e,0xa0,0xa1,0xa1,
0xa0,0xa0,0xa0,0xa0,0xa0,0xa1,0xa2,0xa3,0xa0,0x9c,0x9d,0x9e,0x9f,0xa0,0x9f,0x9d,
0x9c,0x9c,0x9c,0x9c,0x9f,0xa0,0xa2,0xa1,0xa0,0x9f,0xa0,0x9f,0x9f,0xa0,0x9f,0x9d,
0x9e,0x9a,0x99,0x9b,0x9e,0xa0,0x9f,0xa1,0xa2,0xa3,0xa2,0xa1,0xa2,0xa1,0xa1,0xa1,
0xa0,0xa0,0xa0,0xa0,0xa0,0x9f,0x9f,0xa0,0xa1,0xa0,0x9f,0x9d,0x9e,0x9e,0x9f,0x9f,
0x9f,0x9d,0x9e,0xa0,0xa0,0x9f,0x9e,0x9d,0x9e,0xa0,0xa0,0x9f,0xa0,0x9e,0x9d,0x9c,
0x9c,0x9d,0x9e,0xa0,0x9f,0x9c,0x9c,0x9c,0x9d,0x9f,0x9e,0x9d,0x9f,0x9f,0x9f,0x9e,
0x9f,0xa0,0xa1,0xa1,0xa0,0x9f,0xa0,0xa2,0xa0,0x9f,0x9f,0x9d,0x9d,0x9d,0x9e,0xa0,
0x9f,0x9d,0x9c,0x9c,0x9b,0x9c,0x9d,0x9f,0x9e,0x9d,0x9d,0x9e,0xa0,0xa1,0xa1,0xa3,
0xa3,0xa0,0xa0,0xa1,0xa1,0x9d,0x9d,0x9c,0x9c,0x9d,0x9e,0x9d,0x9e,0x9d,0x9d,0x9e,
0x9d,0x9d,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa1,0xa1,0xa1,0x9f,0x9d,0x9c,0x9c,0x9d,
0x9a,0x96,0x92,0x8b,0x83,0x79,0x6f,0x65,0x5b,0x50,0x47,0x3f,0x39,0x35,0x34,0x34,
// Line 19
0x35,0x38,0x39,0x38,0x35,0x33,0x35,0x35,0x36,0x36,0x37,0x36,0x37,0x36,0x36,0x36,
0x36,0x36,0x36,0x39,0x39,0x3a,0x3a,0x3a,0x3b,0x3d,0x40,0x45,0x4a,0x4f,0x53,0x57,
0x5a,0x5f,0x64,0x67,0x65,0x65,0x64,0x64,0x64,0x62,0x62,0x63,0x62,0x5f,0x5d,0x60,
0x5e,0x60,0x62,0x62,0x60,0x5f,0x5f,0x60,0x63,0x66,0x67,0x65,0x62,0x62,0x62,0x63,
0x65,0x65,0x66,0x64,0x62,0x60,0x60,0x62,0x65,0x66,0x65,0x62,0x62,0x62,0x61,0x61,
0x62,0x61,0x62,0x60,0x5d,0x5c,0x5e,0x61,0x64,0x64,0x64,0x63,0x61,0x5f,0x60,0x63,
0x66,0x63,0x63,0x60,0x60,0x60,0x62,0x61,0x63,0x63,0x62,0x60,0x5e,0x5e,0x60,0x60,
0x60,0x60,0x61,0x62,0x61,0x61,0x61,0x60,0x60,0x5f,0x5f,0x60,0x5f,0x5f,0x60,0x5e,
0x5d,0x5d,0x5c,0x5b,0x5f,0x62,0x63,0x62,0x62,0x61,0x63,0x64,0x64,0x64,0x64,0x65,
0x62,0x61,0x61,0x61,0x62,0x62,0x60,0x5f,0x5d,0x5e,0x5d,0x5d,0x5b,0x5d,0x60,0x60,
0x5e,0x5d,0x5d,0x5e,0x60,0x5f,0x5f,0x5e,0x5c,0x59,0x5a,0x5c,0x5e,0x5e,0x5c,0x5a,
0x59,0x58,0x58,0x57,0x58,0x58,0x57,0x57,0x54,0x52,0x51,0x52,0x50,0x50,0x50,0x51,
0x51,0x50,0x4e,0x4e,0x50,0x50,0x4e,0x4e,0x4d,0x4b,0x4b,0x48,0x48,0x49,0x48,0x44,
0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x3f,0x3d,0x3c,0x3d,0x3e,0x3e,0x3c,0x3a,
0x36,0x33,0x31,0x34,0x35,0x36,0x32,0x33,0x31,0x30,0x31,0x33,0x31,0x32,0x33,0x32,
0x31,0x2f,0x30,0x32,0x33,0x34,0x37,0x3a,0x3d,0x3f,0x41,0x42,0x43,0x46,0x4a,0x4d,
0x50,0x51,0x52,0x55,0x57,0x5d,0x65,0x6b,0x6f,0x73,0x77,0x7a,0x7d,0x80,0x83,0x86,
0x8a,0x8d,0x8f,0x91,0x93,0x95,0x97,0x97,0x97,0x96,0x94,0x93,0x90,0x8d,0x8a,0x87,
0x81,0x7d,0x7a,0x78,0x72,0x6b,0x65,0x5f,0x59,0x54,0x4e,0x49,0x45,0x41,0x3a,0x35,
0x31,0x30,0x2d,0x2b,0x2a,0x29,0x2d,0x2f,0x31,0x35,0x37,0x3b,0x43,0x4a,0x52,0x5a,
0x63,0x69,0x6f,0x76,0x7f,0x87,0x8f,0x92,0x94,0x95,0x94,0x93,0x92,0x8f,0x8c,0x8a,
0x84,0x79,0x70,0x68,0x5d,0x55,0x4f,0x4a,0x43,0x3c,0x37,0x35,0x33,0x32,0x32,0x31,
0x32,0x33,0x39,0x3e,0x44,0x4b,0x55,0x5b,0x62,0x6c,0x77,0x7f,0x88,0x8f,0x94,0x96,
0x93,0x8f,0x8b,0x84,0x7d,0x75,0x6b,0x61,0x56,0x4e,0x45,0x3d,0x35,0x32,0x32,0x33,
0x32,0x34,0x3a,0x3e,0x43,0x4a,0x55,0x63,0x72,0x7d,0x86,0x8c,0x8f,0x90,0x8f,0x8c,
0x86,0x7d,0x72,0x65,0x5a,0x51,0x49,0x42,0x3d,0x38,0x35,0x35,0x38,0x3b,0x3f,0x49,
0x51,0x5b,0x67,0x75,0x81,0x8e,0x90,0x8f,0x8d,0x88,0x7f,0x78,0x6b,0x5f,0x54,0x4a,
0x3f,0x36,0x32,0x32,0x34,0x3a,0x41,0x48,0x51,0x5d,0x6a,0x79,0x84,0x8c,0x90,0x8d,
0x86,0x7d,0x72,0x67,0x5b,0x4f,0x44,0x39,0x32,0x30,0x30,0x36,0x3c,0x46,0x55,0x65,
0x73,0x81,0x8a,0x90,0x91,0x8d,0x85,0x78,0x69,0x5a,0x4c,0x41,0x36,0x2e,0x2d,0x30,
0x35,0x41,0x50,0x62,0x72,0x80,0x89,0x8d,0x8b,0x84,0x7b,0x6f,0x62,0x56,0x4b,0x3f,
0x36,0x30,0x30,0x37,0x46,0x58,0x6a,0x79,0x83,0x89,0x8c,0x89,0x80,0x74,0x67,0x58,
0x4a,0x3e,0x36,0x32,0x34,0x3a,0x47,0x5b,0x6e,0x7e,0x8a,0x8d,0x8a,0x81,0x75,0x68,
0x5b,0x4d,0x43,0x3b,0x38,0x39,0x41,0x51,0x65,0x75,0x84,0x8c,0x8c,0x85,0x76,0x66,
0x5a,0x4e,0x41,0x37,0x33,0x36,0x41,0x53,0x67,0x78,0x89,0x8c,0x87,0x7f,0x73,0x65,
0x58,0x4a,0x3e,0x39,0x38,0x3f,0x4e,0x62,0x74,0x81,0x86,0x85,0x7d,0x6f,0x62,0x54,
0x49,0x3f,0x39,0x3a,0x40,0x4f,0x65,0x78,0x84,0x88,0x82,0x76,0x67,0x58,0x4c,0x40,
0x3d,0x3c,0x3f,0x4c,0x5c,0x6e,0x80,0x89,0x85,0x7b,0x6b,0x58,0x49,0x3e,0x3c,0x3f,
0x48,0x54,0x63,0x73,0x7d,0x7c,0x77,0x6c,0x60,0x50,0x42,0x3a,0x3d,0x46,0x52,0x61,
0x6f,0x7b,0x81,0x7e,0x70,0x5f,0x50,0x45,0x3e,0x3e,0x43,0x4d,0x5c,0x6c,0x77,0x7c,
0x78,0x6f,0x62,0x54,0x49,0x46,0x4b,0x57,0x64,0x6f,0x76,0x78,0x76,0x6f,0x63,0x57,
0x4b,0x46,0x48,0x51,0x5b,0x65,0x6f,0x73,0x74,0x6e,0x63,0x57,0x4f,0x4b,0x4d,0x54,
0x5e,0x67,0x72,0x72,0x6d,0x64,0x5a,0x52,0x4d,0x4b,0x4e,0x59,0x67,0x71,0x77,0x75,
0x6d,0x63,0x59,0x53,0x51,0x54,0x5b,0x62,0x68,0x6b,0x6a,0x66,0x60,0x58,0x54,0x51,
0x53,0x5a,0x63,0x6b,0x6e,0x6c,0x65,0x5f,0x59,0x57,0x55,0x57,0x5d,0x63,0x68,0x68,
0x65,0x61,0x5d,0x59,0x57,0x58,0x5e,0x63,0x67,0x67,0x62,0x5e,0x55,0x53,0x57,0x5b,
0x5f,0x62,0x63,0x61,0x5e,0x5b,0x58,0x57,0x58,0x5d,0x62,0x65,0x67,0x66,0x60,0x57,
0x4e,0x4d,0x51,0x59,0x62,0x69,0x6c,0x6b,0x63,0x58,0x51,0x52,0x57,0x5f,0x6a,0x71,
0x72,0x6c,0x5d,0x4d,0x48,0x4c,0x59,0x6a,0x75,0x78,0x72,0x63,0x50,0x44,0x44,0x4f,
0x61,0x71,0x7a,0x78,0x6c,0x5b,0x4a,0x44,0x4a,0x59,0x6c,0x78,0x7a,0x71,0x5f,0x4d,
0x44,0x46,0x55,0x69,0x7c,0x82,0x77,0x64,0x48,0x38,0x3a,0x4b,0x63,0x79,0x80,0x78,
0x64,0x4c,0x3c,0x3d,0x52,0x6d,0x80,0x86,0x7b,0x63,0x4b,0x3c,0x40,0x55,0x70,0x83,
0x84,0x70,0x54,0x3d,0x35,0x42,0x5d,0x78,0x86,0x82,0x6e,0x51,0x3c,0x3b,0x4e,0x69,
0x80,0x88,0x7a,0x5e,0x43,0x35,0x41,0x5c,0x78,0x86,0x81,0x6a,0x4a,0x34,0x35,0x4e,
0x6f,0x86,0x89,0x76,0x57,0x3c,0x36,0x49,0x66,0x81,0x8a,0x7d,0x5e,0x40,0x37,0x45,
0x63,0x7f,0x8a,0x7e,0x60,0x42,0x39,0x46,0x62,0x7d,0x86,0x7a,0x60,0x45,0x3b,0x45,
0x63,0x7e,0x87,0x79,0x5e,0x44,0x3d,0x4b,0x65,0x7e,0x83,0x71,0x54,0x3d,0x3a,0x50,
0x6e,0x83,0x83,0x6e,0x53,0x41,0x47,0x5e,0x79,0x88,0x80,0x65,0x4a,0x3e,0x4a,0x64,
0x7a,0x7f,0x70,0x57,0x44,0x43,0x58,0x70,0x7d,0x79,0x64,0x4b,0x41,0x4b,0x61,0x77,
0x7d,0x6f,0x58,0x48,0x49,0x5b,0x72,0x7d,0x75,0x61,0x4d,0x46,0x52,0x67,0x77,0x79,
0x6a,0x55,0x4c,0x53,0x63,0x74,0x76,0x6b,0x59,0x4e,0x51,0x5f,0x6e,0x76,0x6f,0x60,
0x50,0x4f,0x5e,0x6d,0x75,0x70,0x64,0x57,0x54,0x5a,0x66,0x70,0x70,0x65,0x55,0x4f,
0x54,0x60,0x6a,0x69,0x61,0x59,0x55,0x59,0x64,0x6c,0x6f,0x68,0x5c,0x55,0x59,0x65,
0x6e,0x6d,0x67,0x5e,0x59,0x5c,0x64,0x6b,0x6b,0x64,0x5a,0x55,0x57,0x60,0x68,0x69,
0x64,0x5d,0x5b,0x5d,0x62,0x66,0x68,0x65,0x5e,0x5a,0x5b,0x62,0x69,0x69,0x68,0x62,
0x5f,0x60,0x64,0x67,0x67,0x63,0x60,0x5d,0x5d,0x60,0x63,0x67,0x63,0x5e,0x5f,0x5e,
0x5f,0x63,0x63,0x62,0x5d,0x5b,0x59,0x5d,0x60,0x62,0x5f,0x5f,0x5d,0x5e,0x63,0x66,
0x65,0x64,0x61,0x60,0x60,0x62,0x63,0x64,0x62,0x60,0x62,0x65,0x67,0x68,0x68,0x65,
0x63,0x63,0x65,0x66,0x67,0x65,0x61,0x5f,0x5f,0x5f,0x60,0x61,0x60,0x5f,0x5f,0x5f,
0x5f,0x60,0x61,0x61,0x61,0x60,0x60,0x64,0x63,0x60,0x60,0x60,0x60,0x61,0x62,0x61,
0x61,0x5f,0x60,0x60,0x60,0x5f,0x60,0x61,0x62,0x61,0x61,0x61,0x63,0x64,0x64,0x64,
0x64,0x63,0x64,0x65,0x65,0x65,0x65,0x64,0x63,0x63,0x63,0x62,0x60,0x60,0x62,0x62,
0x60,0x5f,0x5f,0x60,0x61,0x61,0x61,0x61,0x62,0x62,0x61,0x60,0x62,0x65,0x64,0x62,
0x61,0x60,0x61,0x62,0x63,0x63,0x65,0x64,0x62,0x62,0x62,0x63,0x62,0x62,0x61,0x60,
0x60,0x60,0x5f,0x61,0x5f,0x5e,0x5f,0x5f,0x5f,0x60,0x60,0x5e,0x5d,0x5d,0x5f,0x62,
0x62,0x62,0x61,0x61,0x62,0x62,0x64,0x66,0x65,0x65,0x63,0x62,0x62,0x63,0x66,0x66,
0x65,0x62,0x61,0x60,0x5f,0x5f,0x62,0x62,0x5f,0x5e,0x5d,0x5c,0x5e,0x5f,0x60,0x61,
0x61,0x60,0x62,0x62,0x63,0x62,0x63,0x61,0x60,0x62,0x63,0x63,0x63,0x62,0x60,0x60,
0x60,0x60,0x60,0x60,0x5f,0x5f,0x5d,0x5e,0x60,0x60,0x61,0x62,0x63,0x63,0x61,0x5f,
0x5f,0x60,0x62,0x62,0x63,0x64,0x63,0x63,0x64,0x65,0x67,0x66,0x64,0x60,0x5e,0x5e,
0x5d,0x5d,0x5f,0x5f,0x60,0x60,0x61,0x62,0x65,0x63,0x61,0x61,0x60,0x61,0x61,0x62,
0x61,0x60,0x62,0x62,0x61,0x64,0x64,0x64,0x64,0x61,0x60,0x60,0x61,0x62,0x62,0x62,
0x61,0x5f,0x5f,0x5f,0x61,0x64,0x64,0x63,0x61,0x60,0x60,0x61,0x62,0x63,0x63,0x62,
0x61,0x60,0x61,0x63,0x63,0x62,0x60,0x60,0x60,0x60,0x5e,0x61,0x5f,0x5f,0x61,0x60,
0x60,0x60,0x62,0x60,0x5f,0x5e,0x60,0x61,0x61,0x60,0x60,0x62,0x61,0x60,0x61,0x60,
0x61,0x61,0x60,0x60,0x60,0x5f,0x5f,0x60,0x61,0x62,0x62,0x62,0x62,0x60,0x60,0x60,
0x62,0x62,0x60,0x5f,0x5e,0x5e,0x5f,0x60,0x61,0x60,0x62,0x62,0x62,0x60,0x62,0x61,
0x60,0x60,0x61,0x60,0x60,0x60,0x60,0x63,0x63,0x62,0x61,0x61,0x60,0x60,0x61,0x62,
0x63,0x63,0x63,0x62,0x63,0x63,0x62,0x61,0x61,0x61,0x63,0x61,0x60,0x60,0x60,0x5d,
0x5b,0x5b,0x5b,0x5b,0x59,0x54,0x4f,0x4b,0x46,0x43,0x41,0x40,0x3d,0x3b,0x39,0x36,
0x33,0x32,0x32,0x34,0x36,0x36,0x37,0x36,0x35,0x34,0x37,0x39,0x39,0x39,0x38,0x37,
0x38,0x37,0x36,0x36,0x35,0x32,0x32,0x34,0x35,0x37,0x39,0x39,0x38,0x36,0x34,0x34,
0x37,0x36,0x37,0x37,0x36,0x35,0x34,0x36,0x37,0x38,0x38,0x37,0x37,0x37,0x37,0x37,
0x39,0x38,0x38,0x36,0x35,0x34,0x37,0x39,0x39,0x3a,0x38,0x37,0x36,0x37,0x39,0x39,
0x3a,0x3a,0x38,0x38,0x37,0x35,0x35,0x35,0x36,0x38,0x38,0x38,0x38,0x39,0x38,0x37,
0x36,0x36,0x37,0x37,0x35,0x35,0x35,0x36,0x35,0x35,0x36,0x36,0x38,0x39,0x38,0x38,
// Line 20
0x3b,0x39,0x38,0x37,0x37,0x38,0x39,0x39,0x39,0x37,0x37,0x38,0x38,0x38,0x38,0x38,
0x39,0x3a,0x3b,0x3a,0x38,0x37,0x38,0x38,0x39,0x39,0x3a,0x38,0x38,0x39,0x3c,0x40,
0x46,0x4c,0x54,0x62,0x71,0x81,0x91,0x9f,0xaa,0xb4,0xba,0xbd,0xbd,0xbf,0xc1,0xc2,
0xc1,0xbd,0xba,0xbb,0xbb,0xbc,0xbf,0xc1,0xc0,0xbe,0xbc,0xbb,0xbd,0xbe,0xc0,0xc0,
0xbf,0xbd,0xbb,0xba,0xbb,0xbd,0xbe,0xbd,0xbb,0xb9,0xb9,0xbb,0xbc,0xbd,0xbd,0xbd,
0xbd,0xbd,0xbc,0xbc,0xbc,0xbc,0xbd,0xbc,0xbc,0xbc,0xbb,0xbb,0xbb,0xbd,0xbd,0xbe,
0xbe,0xbe,0xbe,0xbe,0xbd,0xbb,0xbc,0xbb,0xb9,0xb9,0xb9,0xb9,0xbb,0xbb,0xba,0xbb,
0xbd,0xbe,0xc0,0xbf,0xbe,0xbe,0xc0,0xbe,0xbb,0xbc,0xbe,0xbe,0xbe,0xbd,0xbd,0xc0,
0xbe,0xbb,0xb9,0xb9,0xbb,0xbe,0xbd,0xbc,0xbc,0xbe,0xbe,0xbe,0xbe,0xbe,0xbf,0xbf,
0xbe,0xbc,0xbc,0xbc,0xbb,0xbb,0xbb,0xbb,0xbb,0xba,0xbb,0xbd,0xbd,0xbd,0xbd,0xbd,
0xbb,0xbb,0xbc,0xbc,0xbd,0xbd,0xbc,0xb9,0xba,0xbb,0xbc,0xbe,0xbe,0xbc,0xbe,0xbf,
0xc0,0xbe,0xc0,0xc0,0xc0,0xbf,0xbc,0xbb,0xba,0xba,0xb9,0xb8,0xb7,0xb7,0xb8,0xb9,
0xb9,0xbc,0xbe,0xbd,0xbb,0xbb,0xbd,0xbe,0xc0,0xc0,0xc1,0xbe,0xbb,0xb9,0xbb,0xbf,
0xc2,0xc1,0xbd,0xb7,0xb5,0xb5,0xbb,0xbd,0xbe,0xb6,0xab,0xa0,0x96,0x94,0xa1,0xaa,
0xaf,0xa8,0x9b,0x8a,0x81,0x82,0x90,0xa2,0xad,0xa9,0x9b,0x86,0x7a,0x7f,0x93,0xa9,
0xb5,0xb2,0xa1,0x8a,0x7a,0x7c,0x8f,0xa6,0xb3,0xb1,0x9f,0x89,0x78,0x79,0x8a,0xa2,
0xb2,0xb2,0xa2,0x87,0x7a,0x7b,0x8b,0xa4,0xb4,0xb2,0xa2,0x88,0x78,0x79,0x8c,0xa3,
0xb3,0xb2,0xa1,0x87,0x78,0x7a,0x8e,0xa5,0xb3,0xb2,0xa2,0x8b,0x79,0x7a,0x8b,0xa2,
0xb2,0xb0,0x9f,0x88,0x78,0x78,0x8a,0xa1,0xb1,0xaf,0xa1,0x8b,0x7a,0x7b,0x8d,0xa5,
0xb5,0xb4,0xa1,0x8a,0x7a,0x7c,0x8c,0xa0,0xae,0xaf,0xa2,0x8c,0x7a,0x7b,0x8e,0xa5,
0xb4,0xb2,0xa1,0x8a,0x7a,0x7a,0x8c,0xa3,0xb5,0xb6,0xa7,0x90,0x7f,0x7f,0x8f,0xa4,
0xb3,0xb3,0xa2,0x8b,0x78,0x78,0x8d,0xa5,0xb3,0xb2,0xa4,0x8d,0x78,0x78,0x89,0x9f,
0xaf,0xaf,0x9f,0x88,0x79,0x7a,0x8d,0xa3,0xb3,0xb2,0xa1,0x8a,0x7a,0x7b,0x8c,0xa1,
0xaf,0xae,0xa0,0x8c,0x7c,0x7b,0x8b,0xa2,0xb2,0xb2,0xa2,0x8b,0x7c,0x7d,0x8c,0xa1,
0xaf,0xaf,0x9e,0x8a,0x7a,0x7b,0x8c,0xa2,0xad,0xab,0x9c,0x8a,0x83,0x86,0x94,0xa2,
0xa6,0x9e,0x91,0x8a,0x8b,0x90,0x9b,0x9b,0x91,0x7f,0x71,0x70,0x7d,0x91,0x9d,0x9a,
0x85,0x6d,0x62,0x6a,0x83,0x9d,0xaa,0xa0,0x83,0x63,0x55,0x63,0x83,0xa5,0xb1,0xa5,
0x83,0x61,0x55,0x65,0x84,0xa6,0xb2,0xa2,0x82,0x63,0x57,0x65,0x86,0xa4,0xb1,0xa4,
0x85,0x65,0x59,0x66,0x84,0xa2,0xac,0x9f,0x81,0x63,0x55,0x63,0x83,0xa2,0xb0,0xa5,
0x87,0x67,0x5a,0x66,0x85,0xa3,0xb1,0xa6,0x8a,0x69,0x58,0x64,0x81,0x9e,0xae,0xa2,
0x84,0x62,0x53,0x5e,0x7d,0x9f,0xaf,0xa4,0x87,0x67,0x59,0x66,0x84,0xa4,0xb5,0xab,
0x8a,0x66,0x55,0x62,0x80,0xa2,0xaf,0xa5,0x87,0x66,0x55,0x63,0x83,0xa3,0xb3,0xa9,
0x8c,0x6b,0x5b,0x65,0x83,0xa2,0xb0,0xa6,0x86,0x65,0x55,0x63,0x83,0xa2,0xb0,0xa6,
0x89,0x6a,0x5a,0x65,0x84,0xa3,0xb0,0xa4,0x86,0x67,0x5a,0x66,0x83,0xa2,0xb0,0xa4,
0x84,0x64,0x55,0x60,0x81,0xa0,0xaf,0xa5,0x86,0x65,0x55,0x62,0x83,0xa2,0xb2,0xa5,
0x85,0x65,0x55,0x61,0x81,0xa2,0xb1,0xa7,0x87,0x66,0x56,0x62,0x7f,0x9e,0xae,0xa4,
0x85,0x65,0x53,0x5e,0x7c,0x9c,0xad,0xa6,0x8a,0x69,0x58,0x5e,0x79,0x98,0xab,0xa6,
0x8f,0x6e,0x58,0x57,0x6d,0x89,0x9d,0x9f,0x8d,0x6e,0x5a,0x55,0x66,0x85,0x9c,0xa2,
0x93,0x76,0x5b,0x51,0x5e,0x7b,0x97,0xa2,0x95,0x76,0x5b,0x53,0x5f,0x7a,0x95,0xa1,
0x98,0x7d,0x5e,0x50,0x5d,0x7b,0x9a,0xa4,0x97,0x78,0x5b,0x4f,0x5c,0x7b,0x97,0xa1,
0x97,0x76,0x57,0x4c,0x5b,0x7b,0x9a,0xa6,0x98,0x78,0x5c,0x52,0x60,0x7c,0x96,0xa1,
0x97,0x7a,0x5d,0x51,0x5e,0x79,0x97,0xa2,0x95,0x78,0x5c,0x51,0x5f,0x7a,0x95,0xa0,
0x93,0x78,0x5b,0x4f,0x5c,0x78,0x94,0x9d,0x90,0x76,0x5d,0x52,0x61,0x7e,0x97,0x9f,
0x92,0x77,0x58,0x50,0x5d,0x79,0x95,0x9f,0x91,0x77,0x5b,0x4e,0x5c,0x78,0x93,0x9e,
0x91,0x76,0x5a,0x4e,0x5b,0x79,0x97,0xa2,0x97,0x7c,0x61,0x55,0x61,0x7c,0x98,0xa5,
0x99,0x7b,0x5f,0x52,0x5e,0x7a,0x96,0xa2,0x95,0x78,0x5a,0x4f,0x5d,0x7a,0x97,0xa3,
0x94,0x76,0x5c,0x51,0x5d,0x7a,0x97,0xa1,0x95,0x78,0x5f,0x53,0x63,0x7e,0x98,0xa1,
0x94,0x77,0x5b,0x50,0x5c,0x79,0x92,0x9a,0x8f,0x77,0x62,0x5d,0x68,0x81,0x95,0x9d,
0x93,0x7e,0x6d,0x65,0x6a,0x74,0x7d,0x82,0x81,0x7c,0x76,0x73,0x70,0x6a,0x63,0x5e,
0x5f,0x66,0x76,0x7d,0x79,0x69,0x56,0x4d,0x54,0x6a,0x81,0x8e,0x84,0x69,0x4b,0x3d,
0x49,0x69,0x89,0x98,0x8c,0x6a,0x49,0x3a,0x47,0x68,0x87,0x94,0x85,0x66,0x4a,0x3e,
0x4a,0x6a,0x89,0x94,0x85,0x65,0x47,0x3d,0x4d,0x6a,0x87,0x92,0x85,0x69,0x4c,0x3f,
0x4c,0x6a,0x87,0x92,0x86,0x67,0x49,0x3e,0x4a,0x67,0x86,0x92,0x84,0x65,0x47,0x3b,
0x46,0x65,0x83,0x91,0x86,0x69,0x49,0x3d,0x49,0x68,0x87,0x94,0x87,0x66,0x49,0x3b,
0x49,0x6a,0x8a,0x95,0x8a,0x6a,0x49,0x3d,0x4a,0x67,0x86,0x93,0x86,0x69,0x4a,0x3e,
0x4d,0x6e,0x8c,0x98,0x8c,0x6f,0x51,0x42,0x4c,0x69,0x87,0x95,0x87,0x68,0x47,0x3a,
0x47,0x66,0x85,0x92,0x86,0x68,0x4a,0x3d,0x4c,0x6a,0x8a,0x93,0x84,0x66,0x49,0x3d,
0x4a,0x68,0x84,0x91,0x84,0x66,0x49,0x41,0x4d,0x6a,0x89,0x95,0x88,0x6a,0x4c,0x40,
0x4e,0x6a,0x86,0x91,0x83,0x66,0x4a,0x3e,0x4a,0x68,0x84,0x91,0x84,0x6a,0x50,0x45,
0x52,0x6e,0x89,0x95,0x87,0x6a,0x4e,0x44,0x50,0x6c,0x85,0x8d,0x7d,0x65,0x4c,0x47,
0x57,0x71,0x84,0x85,0x6f,0x50,0x3e,0x40,0x55,0x71,0x83,0x81,0x6a,0x4b,0x38,0x3f,
0x5b,0x79,0x87,0x7d,0x62,0x44,0x36,0x40,0x5d,0x7d,0x8c,0x81,0x62,0x3e,0x31,0x41,
0x61,0x7e,0x8a,0x7f,0x5e,0x3d,0x31,0x3f,0x5f,0x7f,0x8c,0x7c,0x5e,0x3e,0x30,0x3f,
0x5e,0x7d,0x8a,0x7d,0x5e,0x3d,0x30,0x40,0x62,0x81,0x8f,0x82,0x63,0x42,0x32,0x3f,
0x5f,0x7d,0x8c,0x7e,0x5d,0x3c,0x2e,0x3b,0x5a,0x79,0x87,0x7d,0x5f,0x40,0x31,0x40,
0x5e,0x7d,0x8d,0x82,0x62,0x40,0x30,0x3c,0x5c,0x7a,0x89,0x7f,0x62,0x41,0x31,0x3e,
0x5e,0x7e,0x8f,0x84,0x63,0x41,0x31,0x3d,0x5d,0x7c,0x8a,0x80,0x62,0x3f,0x2d,0x3b,
0x5d,0x7e,0x8d,0x83,0x60,0x42,0x32,0x3e,0x5f,0x81,0x90,0x83,0x63,0x40,0x34,0x40,
0x60,0x81,0x90,0x83,0x63,0x40,0x32,0x3f,0x5f,0x7e,0x8a,0x7f,0x5f,0x3f,0x31,0x3d,
0x5c,0x7d,0x8c,0x7f,0x5f,0x3e,0x30,0x3e,0x5e,0x7d,0x87,0x7f,0x5f,0x3c,0x2e,0x3d,
0x5e,0x7f,0x8c,0x80,0x62,0x43,0x34,0x3f,0x5d,0x7b,0x89,0x7d,0x5f,0x3f,0x32,0x3b,
0x58,0x75,0x84,0x7d,0x65,0x47,0x36,0x3d,0x53,0x6a,0x79,0x7a,0x6c,0x56,0x44,0x3d,
0x41,0x4e,0x5b,0x63,0x63,0x57,0x48,0x3b,0x34,0x38,0x47,0x59,0x65,0x64,0x56,0x41,
0x30,0x2e,0x3e,0x54,0x6a,0x6c,0x5c,0x44,0x2f,0x2b,0x3b,0x55,0x6b,0x71,0x62,0x47,
0x30,0x2c,0x3d,0x59,0x6d,0x6e,0x5b,0x41,0x2e,0x2d,0x3e,0x57,0x6a,0x6a,0x59,0x3f,
0x2e,0x2f,0x41,0x5a,0x6a,0x6b,0x5c,0x46,0x35,0x31,0x42,0x56,0x66,0x68,0x5a,0x42,
0x35,0x30,0x3d,0x56,0x69,0x6b,0x5e,0x46,0x32,0x30,0x3e,0x56,0x6a,0x6d,0x5e,0x46,
0x32,0x2e,0x3e,0x5a,0x6a,0x6b,0x5a,0x40,0x2e,0x2c,0x3c,0x54,0x6a,0x6e,0x5f,0x47,
0x34,0x31,0x40,0x59,0x6b,0x6b,0x5d,0x44,0x2f,0x2f,0x3e,0x54,0x66,0x68,0x59,0x42,
0x2f,0x2e,0x3e,0x55,0x68,0x6d,0x5f,0x47,0x34,0x31,0x40,0x56,0x68,0x6a,0x5b,0x43,
0x2f,0x2c,0x3d,0x57,0x6a,0x6b,0x5c,0x44,0x2f,0x2e,0x3f,0x58,0x6b,0x6d,0x5c,0x45,
0x31,0x2e,0x3e,0x55,0x66,0x69,0x5a,0x41,0x2d,0x2d,0x3c,0x53,0x65,0x66,0x59,0x43,
0x30,0x2c,0x3d,0x53,0x66,0x67,0x57,0x42,0x34,0x33,0x42,0x56,0x65,0x66,0x5b,0x48,
0x38,0x35,0x42,0x52,0x5c,0x5d,0x54,0x45,0x3b,0x39,0x3f,0x4a,0x4f,0x4d,0x43,0x3f,
0x3a,0x3b,0x40,0x46,0x48,0x49,0x42,0x3f,0x3d,0x3e,0x3f,0x3f,0x3e,0x3d,0x3e,0x41,
0x44,0x45,0x46,0x44,0x42,0x41,0x42,0x42,0x43,0x42,0x40,0x40,0x40,0x42,0x44,0x44,
0x43,0x44,0x44,0x43,0x41,0x41,0x41,0x40,0x3e,0x3f,0x40,0x40,0x40,0x40,0x42,0x42,
0x41,0x43,0x45,0x44,0x44,0x42,0x42,0x3f,0x43,0x44,0x44,0x44,0x41,0x3e,0x40,0x40,
0x42,0x43,0x43,0x43,0x41,0x40,0x3e,0x43,0x46,0x48,0x47,0x46,0x42,0x42,0x43,0x44,
0x44,0x46,0x46,0x42,0x40,0x3e,0x40,0x42,0x42,0x42,0x44,0x46,0x46,0x44,0x44,0x43,
0x43,0x44,0x44,0x42,0x41,0x40,0x3e,0x3f,0x40,0x42,0x44,0x47,0x46,0x46,0x47,0x47,
0x45,0x45,0x45,0x45,0x46,0x44,0x42,0x44,0x41,0x40,0x43,0x43,0x44,0x45,0x43,0x40,
0x41,0x42,0x44,0x44,0x45,0x44,0x43,0x44,0x42,0x42,0x44,0x45,0x44,0x43,0x42,0x42,
0x44,0x44,0x43,0x42,0x42,0x42,0x43,0x43,0x44,0x44,0x46,0x44,0x43,0x44,0x44,0x42,
0x42,0x41,0x41,0x40,0x3e,0x3f,0x42,0x44,0x42,0x41,0x41,0x41,0x42,0x44,0x44,0x44,
0x44,0x43,0x3f,0x3d,0x3d,0x3f,0x41,0x3e,0x3b,0x3a,0x3b,0x3c,0x3c,0x3d,0x3d,0x3b,
// Line 21
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//Field 2
// Line 10
0x37,0x36,0x36,0x37,0x38,0x39,0x38,0x37,0x36,0x36,0x36,0x37,0x39,0x39,0x37,0x35,
0x34,0x35,0x35,0x35,0x37,0x38,0x36,0x34,0x34,0x36,0x38,0x3b,0x3d,0x3c,0x39,0x35,
0x32,0x34,0x35,0x37,0x36,0x36,0x36,0x35,0x35,0x35,0x35,0x37,0x38,0x39,0x3b,0x3a,
0x3a,0x3b,0x3a,0x39,0x39,0x3b,0x3d,0x3c,0x3b,0x38,0x35,0x34,0x34,0x35,0x37,0x39,
0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x3a,0x3b,0x3c,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,
0x39,0x39,0x38,0x38,0x39,0x38,0x36,0x35,0x35,0x35,0x37,0x39,0x3a,0x3a,0x3a,0x38,
0x37,0x3a,0x3b,0x3a,0x3a,0x3a,0x38,0x37,0x35,0x35,0x36,0x35,0x35,0x35,0x36,0x37,
0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x3a,0x3b,0x3c,0x3c,0x3b,0x39,0x39,0x38,0x38,
0x3a,0x3c,0x3c,0x3a,0x37,0x35,0x34,0x35,0x36,0x37,0x37,0x35,0x33,0x34,0x34,0x35,
0x39,0x3c,0x3c,0x3b,0x3a,0x3a,0x3b,0x39,0x38,0x39,0x3a,0x39,0x37,0x37,0x36,0x35,
0x36,0x37,0x37,0x37,0x37,0x37,0x39,0x3c,0x3e,0x3c,0x3c,0x3a,0x39,0x3a,0x39,0x38,
0x38,0x39,0x38,0x38,0x37,0x37,0x3a,0x3c,0x3b,0x3b,0x3c,0x3d,0x3d,0x3c,0x39,0x37,
0x38,0x39,0x39,0x39,0x37,0x34,0x35,0x33,0x34,0x37,0x39,0x39,0x39,0x39,0x37,0x31,
0x34,0x35,0x36,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x38,0x3a,0x3c,0x3b,0x38,0x38,
0x38,0x3a,0x3c,0x3d,0x3d,0x3f,0x3e,0x3b,0x38,0x36,0x35,0x37,0x37,0x36,0x34,0x34,
0x33,0x34,0x34,0x35,0x37,0x39,0x38,0x36,0x36,0x38,0x3a,0x3a,0x38,0x37,0x36,0x37,
0x36,0x37,0x38,0x39,0x39,0x3a,0x39,0x39,0x38,0x3a,0x39,0x3a,0x3a,0x39,0x37,0x36,
0x35,0x35,0x36,0x38,0x38,0x38,0x37,0x35,0x35,0x37,0x38,0x38,0x3a,0x3a,0x3a,0x3a,
0x39,0x38,0x39,0x38,0x36,0x38,0x38,0x39,0x38,0x39,0x37,0x37,0x36,0x38,0x3a,0x3a,
0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x39,0x38,0x36,0x35,0x34,0x35,0x36,0x37,
0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x33,0x35,0x34,0x33,0x36,0x37,0x37,0x39,0x39,
0x38,0x39,0x3a,0x3d,0x3d,0x3d,0x39,0x37,0x37,0x3a,0x3b,0x3d,0x3d,0x3e,0x3e,0x3d,
0x3b,0x3c,0x3b,0x3a,0x3a,0x3a,0x39,0x38,0x38,0x38,0x3b,0x3e,0x3f,0x3e,0x3b,0x38,
0x38,0x39,0x38,0x36,0x35,0x35,0x34,0x34,0x34,0x37,0x38,0x3b,0x39,0x39,0x3a,0x3a,
0x3a,0x3c,0x3a,0x38,0x3a,0x3c,0x3b,0x3b,0x39,0x38,0x39,0x39,0x38,0x38,0x37,0x37,
0x37,0x38,0x38,0x38,0x37,0x38,0x38,0x3a,0x39,0x38,0x38,0x37,0x35,0x35,0x34,0x35,
0x37,0x37,0x36,0x36,0x37,0x39,0x39,0x3a,0x3a,0x3a,0x3a,0x3c,0x3a,0x39,0x39,0x38,
0x38,0x39,0x39,0x3b,0x3c,0x3c,0x3d,0x3e,0x3d,0x3c,0x3a,0x39,0x39,0x3b,0x3a,0x39,
0x39,0x38,0x38,0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x38,0x3a,0x3a,0x3a,0x3a,0x3a,
0x3c,0x3b,0x3a,0x3b,0x3a,0x3b,0x3b,0x3a,0x39,0x39,0x39,0x3a,0x3a,0x3c,0x3d,0x3d,
0x3d,0x3c,0x3b,0x3c,0x3c,0x3d,0x3f,0x3e,0x3c,0x3b,0x39,0x39,0x38,0x38,0x38,0x39,
0x39,0x3a,0x39,0x3a,0x39,0x3a,0x3b,0x3b,0x3a,0x3a,0x39,0x39,0x39,0x38,0x38,0x38,
0x38,0x3a,0x3a,0x3b,0x3a,0x3a,0x39,0x38,0x37,0x39,0x3b,0x3b,0x3b,0x3a,0x38,0x39,
0x39,0x3b,0x3d,0x3d,0x3b,0x39,0x38,0x38,0x38,0x39,0x38,0x39,0x3c,0x3c,0x3a,0x3a,
0x3a,0x3d,0x3d,0x3c,0x3c,0x3c,0x3c,0x3c,0x3a,0x3b,0x3c,0x3c,0x3c,0x3b,0x39,0x3a,
0x3b,0x3c,0x3c,0x3b,0x37,0x37,0x36,0x36,0x36,0x37,0x38,0x37,0x37,0x38,0x38,0x3b,
0x3c,0x3b,0x3c,0x3c,0x3c,0x3c,0x3a,0x39,0x3a,0x3b,0x3b,0x39,0x38,0x37,0x37,0x39,
0x3a,0x3a,0x3c,0x3c,0x3d,0x3e,0x3c,0x3b,0x3c,0x3c,0x3a,0x39,0x37,0x38,0x38,0x38,
0x37,0x37,0x39,0x3a,0x3c,0x3c,0x3a,0x37,0x39,0x3a,0x39,0x38,0x36,0x37,0x3a,0x3c,
0x3a,0x39,0x39,0x3a,0x39,0x38,0x37,0x36,0x36,0x38,0x37,0x37,0x38,0x3a,0x3c,0x3c,
0x3a,0x39,0x38,0x39,0x38,0x3a,0x38,0x37,0x36,0x36,0x35,0x38,0x36,0x36,0x3a,0x3d,
0x3d,0x3c,0x3a,0x3b,0x3a,0x3c,0x3b,0x3a,0x39,0x38,0x36,0x35,0x35,0x38,0x3c,0x3c,
0x3a,0x3c,0x3a,0x3a,0x39,0x3a,0x3a,0x3b,0x3a,0x3a,0x39,0x38,0x38,0x38,0x38,0x37,
0x35,0x34,0x34,0x33,0x37,0x38,0x37,0x37,0x37,0x37,0x38,0x3a,0x3c,0x3a,0x39,0x37,
0x37,0x37,0x36,0x35,0x36,0x38,0x36,0x36,0x35,0x37,0x39,0x3a,0x3a,0x3d,0x3e,0x3f,
0x3e,0x3c,0x3a,0x3a,0x3b,0x3d,0x3d,0x3c,0x39,0x38,0x37,0x36,0x35,0x37,0x37,0x38,
0x38,0x39,0x39,0x36,0x37,0x37,0x39,0x3b,0x3b,0x3a,0x3a,0x39,0x38,0x39,0x39,0x3a,
0x3a,0x39,0x37,0x38,0x38,0x39,0x3a,0x3a,0x38,0x38,0x37,0x37,0x37,0x38,0x37,0x35,
0x36,0x36,0x37,0x39,0x3a,0x3b,0x3d,0x3e,0x3c,0x3a,0x39,0x38,0x38,0x39,0x3a,0x3a,
0x38,0x38,0x37,0x39,0x38,0x37,0x39,0x39,0x39,0x39,0x3a,0x3d,0x3d,0x3d,0x3b,0x3a,
0x38,0x38,0x38,0x36,0x35,0x36,0x37,0x36,0x34,0x33,0x34,0x36,0x38,0x39,0x39,0x3a,
0x39,0x39,0x39,0x39,0x39,0x38,0x3b,0x38,0x35,0x36,0x37,0x38,0x37,0x35,0x33,0x33,
0x34,0x36,0x36,0x37,0x34,0x35,0x35,0x37,0x38,0x3b,0x3a,0x39,0x38,0x38,0x38,0x38,
0x39,0x38,0x38,0x37,0x37,0x39,0x38,0x38,0x38,0x39,0x39,0x38,0x38,0x3a,0x3a,0x3a,
0x38,0x37,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x3b,0x3c,0x3a,0x39,
0x38,0x37,0x38,0x38,0x39,0x3c,0x3b,0x3a,0x3b,0x3c,0x3c,0x3a,0x39,0x38,0x37,0x38,
0x37,0x35,0x34,0x32,0x31,0x33,0x34,0x35,0x37,0x36,0x35,0x35,0x36,0x38,0x3a,0x3b,
0x3a,0x3a,0x39,0x39,0x38,0x39,0x3a,0x38,0x37,0x35,0x35,0x37,0x37,0x38,0x39,0x3a,
0x39,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x39,0x3a,0x39,0x38,0x39,0x37,
0x37,0x38,0x39,0x3a,0x39,0x37,0x35,0x36,0x36,0x36,0x34,0x39,0x36,0x34,0x33,0x33,
0x33,0x35,0x35,0x36,0x37,0x37,0x35,0x34,0x35,0x37,0x38,0x3a,0x3a,0x39,0x3a,0x38,
0x34,0x35,0x35,0x36,0x38,0x39,0x39,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x39,0x38,
0x35,0x34,0x34,0x34,0x35,0x39,0x3b,0x3b,0x38,0x36,0x37,0x37,0x38,0x39,0x39,0x38,
0x37,0x36,0x36,0x32,0x35,0x35,0x33,0x34,0x34,0x34,0x35,0x34,0x34,0x37,0x38,0x38,
0x38,0x39,0x38,0x37,0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x37,0x37,0x39,0x39,0x39,
0x37,0x37,0x36,0x36,0x35,0x36,0x37,0x38,0x37,0x35,0x35,0x35,0x35,0x38,0x38,0x38,
0x38,0x37,0x36,0x37,0x39,0x3a,0x39,0x37,0x33,0x33,0x34,0x35,0x35,0x38,0x38,0x36,
0x36,0x37,0x38,0x3b,0x3c,0x3c,0x3a,0x37,0x35,0x35,0x35,0x35,0x36,0x38,0x39,0x38,
0x39,0x37,0x37,0x38,0x39,0x3a,0x3b,0x38,0x35,0x35,0x35,0x36,0x36,0x39,0x39,0x38,
0x38,0x39,0x37,0x38,0x37,0x37,0x38,0x37,0x34,0x35,0x35,0x35,0x35,0x36,0x37,0x38,
0x37,0x35,0x35,0x35,0x36,0x38,0x38,0x38,0x36,0x35,0x35,0x35,0x37,0x37,0x38,0x38,
0x37,0x36,0x35,0x33,0x31,0x33,0x35,0x37,0x35,0x35,0x34,0x34,0x36,0x37,0x37,0x39,
0x39,0x39,0x38,0x37,0x36,0x37,0x35,0x33,0x31,0x33,0x33,0x34,0x34,0x34,0x34,0x34,
0x35,0x38,0x3b,0x3b,0x3a,0x3a,0x38,0x38,0x37,0x37,0x35,0x35,0x34,0x34,0x34,0x35,
0x37,0x38,0x39,0x37,0x35,0x36,0x35,0x35,0x35,0x37,0x37,0x37,0x35,0x35,0x36,0x37,
0x38,0x38,0x38,0x38,0x35,0x36,0x34,0x32,0x33,0x35,0x35,0x37,0x37,0x38,0x37,0x36,
0x36,0x37,0x3a,0x3a,0x39,0x38,0x36,0x35,0x35,0x35,0x35,0x36,0x35,0x35,0x37,0x38,
0x39,0x39,0x38,0x35,0x36,0x38,0x39,0x37,0x3a,0x38,0x35,0x35,0x34,0x35,0x39,0x38,
0x38,0x38,0x38,0x37,0x35,0x37,0x37,0x38,0x38,0x37,0x35,0x35,0x34,0x34,0x35,0x37,
0x38,0x39,0x39,0x37,0x38,0x39,0x39,0x3a,0x39,0x37,0x36,0x37,0x38,0x38,0x39,0x39,
0x39,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3a,0x38,0x37,0x35,0x38,0x38,0x3a,0x3c,0x3a,
0x37,0x37,0x38,0x38,0x39,0x3c,0x3a,0x3a,0x37,0x35,0x36,0x38,0x39,0x39,0x38,0x35,
0x35,0x37,0x38,0x38,0x38,0x38,0x38,0x3a,0x3a,0x39,0x38,0x37,0x35,0x36,0x35,0x36,
0x38,0x39,0x37,0x36,0x35,0x37,0x37,0x37,0x36,0x37,0x3a,0x3a,0x3a,0x3a,0x38,0x36,
0x36,0x37,0x38,0x39,0x38,0x37,0x36,0x35,0x37,0x38,0x3a,0x3b,0x3b,0x3a,0x38,0x36,
0x36,0x38,0x39,0x3a,0x3a,0x39,0x38,0x36,0x36,0x37,0x39,0x3a,0x38,0x3a,0x38,0x38,
0x39,0x3b,0x3a,0x3c,0x3c,0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x37,0x37,0x37,0x37,0x37,
0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x38,0x37,0x39,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,
0x3b,0x3c,0x3c,0x3b,0x38,0x36,0x35,0x34,0x35,0x37,0x38,0x38,0x38,0x38,0x38,0x36,
0x39,0x3a,0x39,0x39,0x38,0x37,0x36,0x36,0x37,0x39,0x39,0x38,0x3a,0x39,0x37,0x35,
0x35,0x37,0x37,0x35,0x34,0x34,0x35,0x36,0x37,0x39,0x39,0x38,0x39,0x3a,0x38,0x38,
0x37,0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x37,0x38,0x38,0x38,
0x37,0x35,0x35,0x35,0x35,0x37,0x38,0x3a,0x39,0x39,0x38,0x37,0x36,0x37,0x38,0x39,
0x38,0x38,0x37,0x35,0x35,0x35,0x36,0x38,0x38,0x38,0x37,0x35,0x32,0x32,0x35,0x39,
0x3a,0x37,0x38,0x38,0x35,0x37,0x37,0x38,0x39,0x38,0x35,0x35,0x33,0x33,0x32,0x34,
0x35,0x37,0x36,0x35,0x33,0x35,0x35,0x37,0x3a,0x3b,0x3a,0x3b,0x3c,0x3a,0x39,0x3a,
// Line 11
0x37,0x36,0x36,0x35,0x34,0x34,0x32,0x33,0x33,0x33,0x31,0x32,0x35,0x38,0x39,0x3a,
0x39,0x3b,0x3b,0x39,0x38,0x39,0x3a,0x38,0x36,0x35,0x35,0x35,0x36,0x38,0x36,0x36,
0x35,0x35,0x36,0x38,0x38,0x3b,0x38,0x36,0x32,0x30,0x31,0x36,0x39,0x39,0x33,0x32,
0x32,0x39,0x47,0x59,0x6b,0x7a,0x7d,0x77,0x6c,0x60,0x57,0x57,0x60,0x67,0x6e,0x73,
0x74,0x6f,0x65,0x5c,0x5a,0x61,0x68,0x70,0x76,0x77,0x72,0x6a,0x60,0x5a,0x5a,0x5f,
0x66,0x6e,0x71,0x70,0x6a,0x64,0x5e,0x5a,0x5c,0x64,0x6c,0x71,0x72,0x73,0x71,0x6a,
0x62,0x5e,0x5e,0x61,0x67,0x6f,0x74,0x73,0x6e,0x66,0x5d,0x59,0x58,0x5c,0x66,0x6c,
0x6f,0x72,0x6d,0x66,0x5d,0x59,0x59,0x60,0x6a,0x73,0x76,0x73,0x6c,0x66,0x61,0x60,
0x61,0x66,0x69,0x6a,0x6b,0x6d,0x71,0x77,0x7f,0x8b,0x97,0xa1,0xa5,0xa5,0x9e,0x92,
0x82,0x73,0x65,0x5c,0x55,0x51,0x4c,0x47,0x3f,0x38,0x35,0x3f,0x4d,0x62,0x75,0x83,
0x8c,0x92,0x93,0x93,0x96,0x9a,0x9b,0x9b,0x98,0x95,0x95,0x97,0x98,0x93,0x88,0x79,
0x6b,0x61,0x56,0x4c,0x43,0x3b,0x33,0x31,0x35,0x44,0x5a,0x6e,0x7a,0x7d,0x75,0x69,
0x60,0x5a,0x56,0x51,0x48,0x3e,0x34,0x36,0x3e,0x52,0x6b,0x7d,0x82,0x7d,0x71,0x60,
0x55,0x4f,0x4d,0x48,0x42,0x3b,0x32,0x2b,0x29,0x2d,0x35,0x40,0x4b,0x5a,0x67,0x6f,
0x71,0x6e,0x67,0x62,0x5c,0x59,0x52,0x4a,0x40,0x38,0x36,0x3e,0x4d,0x63,0x77,0x86,
0x90,0x93,0x93,0x91,0x8d,0x83,0x76,0x67,0x5c,0x58,0x5e,0x69,0x74,0x7c,0x79,0x70,
0x65,0x5e,0x5b,0x5a,0x52,0x43,0x35,0x2b,0x2d,0x3b,0x53,0x6d,0x7f,0x82,0x7a,0x6b,
0x5e,0x57,0x52,0x4c,0x42,0x34,0x2f,0x32,0x41,0x58,0x6f,0x7f,0x83,0x7b,0x6e,0x60,
0x5c,0x57,0x52,0x48,0x3d,0x30,0x30,0x3c,0x52,0x6d,0x7f,0x84,0x7d,0x6e,0x5c,0x51,
0x53,0x5f,0x6a,0x72,0x74,0x71,0x6b,0x66,0x61,0x62,0x64,0x67,0x6a,0x6c,0x6e,0x73,
0x78,0x82,0x90,0x9d,0xa6,0xac,0xab,0xa4,0x9e,0x9a,0x97,0x93,0x97,0x94,0x8a,0x7d,
0x6b,0x5a,0x4d,0x44,0x40,0x3e,0x3d,0x3b,0x38,0x35,0x34,0x39,0x3e,0x40,0x3c,0x36,
0x30,0x30,0x37,0x45,0x57,0x6a,0x77,0x7a,0x76,0x6e,0x66,0x61,0x60,0x63,0x68,0x6e,
0x74,0x7a,0x80,0x89,0x93,0x9f,0xa6,0xa9,0xa9,0xa5,0x98,0x8a,0x7a,0x6e,0x63,0x5c,
0x57,0x5c,0x64,0x6e,0x76,0x7f,0x87,0x90,0x98,0x9a,0x95,0x88,0x75,0x62,0x52,0x45,
0x3e,0x3a,0x37,0x36,0x39,0x3d,0x3f,0x40,0x42,0x43,0x40,0x3d,0x38,0x38,0x39,0x38,
0x33,0x31,0x32,0x38,0x43,0x52,0x61,0x72,0x81,0x8e,0x93,0x9b,0x9c,0x98,0x8d,0x7d,
0x6c,0x5e,0x54,0x53,0x5b,0x67,0x75,0x82,0x8c,0x93,0x9a,0x9f,0xa2,0xa3,0xa4,0xa1,
0x9a,0x8e,0x7c,0x69,0x5a,0x51,0x53,0x60,0x6d,0x79,0x7c,0x76,0x6a,0x63,0x60,0x61,
0x61,0x5c,0x4d,0x3d,0x31,0x31,0x3c,0x53,0x6e,0x83,0x89,0x7e,0x6a,0x59,0x51,0x55,
0x62,0x72,0x7c,0x7a,0x72,0x69,0x62,0x61,0x61,0x5e,0x58,0x4a,0x38,0x2d,0x2f,0x40,
0x58,0x71,0x80,0x83,0x7a,0x6e,0x5f,0x58,0x53,0x50,0x4c,0x41,0x36,0x39,0x42,0x55,
0x6c,0x7d,0x82,0x79,0x69,0x5a,0x53,0x55,0x60,0x6a,0x74,0x7a,0x7f,0x8a,0x94,0x9d,
0xa2,0x9d,0x91,0x7e,0x69,0x57,0x48,0x3d,0x35,0x33,0x35,0x3b,0x45,0x54,0x65,0x75,
0x84,0x90,0x97,0x99,0x97,0x8f,0x82,0x72,0x62,0x57,0x4c,0x41,0x38,0x32,0x34,0x3a,
0x4e,0x63,0x75,0x80,0x7f,0x74,0x67,0x5a,0x54,0x52,0x50,0x48,0x3e,0x34,0x31,0x3c,
0x52,0x6e,0x83,0x8a,0x83,0x73,0x64,0x5b,0x5b,0x64,0x6d,0x73,0x77,0x7a,0x80,0x89,
0x95,0xa2,0xac,0xad,0xa6,0x9e,0x99,0x94,0x94,0x97,0x97,0x93,0x8f,0x82,0x72,0x64,
0x5a,0x58,0x5a,0x61,0x69,0x74,0x7f,0x8c,0x95,0x9a,0x98,0x91,0x87,0x79,0x69,0x59,
0x4d,0x45,0x3f,0x39,0x36,0x3c,0x48,0x5b,0x6e,0x7a,0x7c,0x76,0x6c,0x60,0x56,0x52,
0x51,0x4c,0x45,0x3b,0x2f,0x2d,0x32,0x3c,0x43,0x48,0x44,0x3e,0x37,0x35,0x37,0x40,
0x4c,0x5d,0x6e,0x7b,0x85,0x90,0x97,0x9c,0xa0,0xa3,0xa3,0xa2,0x9c,0x91,0x81,0x6f,
0x62,0x5d,0x5c,0x5f,0x64,0x6d,0x76,0x7f,0x89,0x91,0x96,0x99,0x94,0x89,0x78,0x66,
0x55,0x49,0x41,0x3c,0x38,0x3b,0x3b,0x3a,0x3c,0x3c,0x3b,0x40,0x49,0x59,0x6a,0x77,
0x7a,0x77,0x6c,0x5e,0x57,0x5a,0x65,0x70,0x78,0x79,0x70,0x64,0x5b,0x5a,0x5d,0x60,
0x5d,0x53,0x41,0x32,0x2d,0x39,0x50,0x6c,0x83,0x8c,0x83,0x6f,0x5a,0x4f,0x51,0x5e,
0x6b,0x75,0x75,0x6e,0x67,0x61,0x5d,0x5b,0x59,0x52,0x47,0x3d,0x34,0x30,0x30,0x31,
0x35,0x3e,0x46,0x52,0x5e,0x6b,0x73,0x77,0x6f,0x65,0x5c,0x58,0x58,0x60,0x69,0x72,
0x76,0x7a,0x7e,0x86,0x91,0x9a,0x9b,0x93,0x7f,0x68,0x55,0x4d,0x51,0x5f,0x71,0x7d,
0x80,0x7c,0x6f,0x61,0x57,0x57,0x5c,0x67,0x6e,0x72,0x73,0x6a,0x60,0x5c,0x5e,0x66,
0x6f,0x76,0x78,0x77,0x70,0x68,0x61,0x5d,0x5e,0x62,0x67,0x67,0x67,0x68,0x6d,0x76,
0x84,0x93,0xa0,0xab,0xaf,0xad,0xa6,0x99,0x8c,0x7d,0x6e,0x60,0x56,0x56,0x5b,0x61,
0x69,0x72,0x7b,0x86,0x8f,0x96,0x99,0x94,0x89,0x79,0x66,0x54,0x45,0x3b,0x35,0x36,
0x3b,0x3e,0x3d,0x3a,0x38,0x39,0x40,0x4b,0x5a,0x6c,0x78,0x7a,0x77,0x6c,0x60,0x58,
0x5c,0x63,0x69,0x70,0x75,0x78,0x7f,0x89,0x92,0x9d,0x9d,0x91,0x7c,0x64,0x52,0x4c,
0x52,0x61,0x70,0x7a,0x7a,0x73,0x69,0x61,0x5c,0x5c,0x5e,0x62,0x68,0x6e,0x74,0x7d,
0x89,0x95,0xa0,0xa5,0xa5,0xa1,0x9c,0x98,0x96,0x97,0x99,0x9b,0x9e,0x9f,0xa0,0xa1,
0x9f,0x9a,0x90,0x80,0x6d,0x5e,0x56,0x56,0x5d,0x69,0x72,0x77,0x76,0x70,0x67,0x61,
0x5c,0x57,0x50,0x47,0x3e,0x39,0x36,0x34,0x36,0x39,0x3e,0x45,0x4f,0x5e,0x6d,0x78,
0x79,0x71,0x65,0x5b,0x56,0x5d,0x69,0x76,0x7d,0x7a,0x72,0x6a,0x64,0x61,0x60,0x5c,
0x53,0x48,0x3e,0x34,0x2d,0x2c,0x2d,0x31,0x38,0x40,0x4c,0x5c,0x6b,0x77,0x7a,0x74,
0x6a,0x61,0x60,0x63,0x68,0x6f,0x72,0x73,0x74,0x79,0x82,0x92,0xa0,0xaa,0xab,0xa7,
0x9e,0x99,0x95,0x95,0x95,0x9c,0x9e,0x9e,0x9e,0x9e,0x9c,0x9c,0x98,0x96,0x98,0x9b,
0x9d,0x9f,0x9d,0x9b,0x9c,0x9e,0x9f,0x9e,0x9e,0x9c,0x99,0x98,0x96,0x97,0x98,0x97,
0x96,0x98,0x98,0x98,0x91,0x8a,0x7f,0x72,0x63,0x55,0x4a,0x42,0x3c,0x36,0x33,0x36,
0x3f,0x50,0x61,0x72,0x81,0x8c,0x91,0x94,0x97,0x9b,0xa2,0xa5,0xa4,0xa0,0x9c,0x98,
0x97,0x99,0x99,0x93,0x85,0x75,0x63,0x58,0x56,0x5e,0x6b,0x76,0x7b,0x7a,0x73,0x6a,
0x63,0x61,0x61,0x64,0x68,0x6b,0x6f,0x77,0x81,0x8d,0x97,0x9a,0x96,0x8a,0x78,0x65,
0x56,0x4c,0x44,0x3d,0x38,0x38,0x40,0x51,0x65,0x78,0x84,0x83,0x7a,0x6e,0x61,0x57,
0x53,0x4f,0x47,0x3e,0x35,0x33,0x3b,0x4c,0x63,0x79,0x8a,0x95,0x98,0x99,0x92,0x8b,
0x82,0x75,0x64,0x54,0x4a,0x44,0x42,0x3f,0x39,0x32,0x32,0x34,0x38,0x40,0x43,0x40,
0x3c,0x33,0x2f,0x37,0x4a,0x62,0x75,0x7e,0x7b,0x74,0x69,0x60,0x5a,0x57,0x51,0x48,
0x3e,0x36,0x31,0x32,0x37,0x3e,0x45,0x47,0x44,0x3f,0x39,0x35,0x36,0x38,0x39,0x39,
0x38,0x38,0x39,0x3b,0x3b,0x3d,0x40,0x3b,0x34,0x33,0x34,0x3b,0x47,0x55,0x64,0x73,
0x7e,0x88,0x8f,0x97,0x9a,0x98,0x8f,0x7f,0x6b,0x5a,0x52,0x54,0x60,0x70,0x7b,0x7f,
0x76,0x68,0x5c,0x55,0x5a,0x66,0x72,0x78,0x77,0x71,0x67,0x5f,0x5e,0x60,0x5e,0x56,
0x48,0x38,0x2d,0x2c,0x39,0x52,0x6b,0x7d,0x81,0x7a,0x6c,0x5f,0x54,0x50,0x4c,0x46,
0x3c,0x35,0x38,0x44,0x58,0x6e,0x7f,0x84,0x7d,0x6f,0x61,0x58,0x58,0x60,0x68,0x6e,
0x73,0x7a,0x88,0x91,0x99,0x9d,0x97,0x88,0x75,0x63,0x52,0x48,0x40,0x39,0x34,0x33,
0x38,0x47,0x5d,0x72,0x7e,0x84,0x7b,0x6c,0x60,0x59,0x5b,0x66,0x71,0x79,0x7a,0x77,
0x6f,0x67,0x61,0x60,0x62,0x66,0x68,0x6c,0x6f,0x75,0x7c,0x89,0x94,0x9f,0xa6,0xaa,
0xa8,0xa3,0x98,0x89,0x77,0x69,0x5f,0x5a,0x5a,0x61,0x68,0x6f,0x77,0x7f,0x88,0x90,
0x96,0x9a,0x96,0x8a,0x7a,0x66,0x54,0x45,0x3b,0x38,0x38,0x39,0x39,0x38,0x35,0x33,
0x34,0x3e,0x4b,0x5b,0x69,0x73,0x77,0x75,0x6d,0x65,0x5f,0x59,0x52,0x4a,0x40,0x39,
0x35,0x3c,0x4b,0x61,0x78,0x89,0x92,0x98,0x95,0x96,0x9a,0x9f,0xa2,0xa3,0x9e,0x98,
0x93,0x95,0x98,0x97,0x94,0x87,0x72,0x60,0x53,0x52,0x5d,0x69,0x76,0x7e,0x7d,0x76,
0x69,0x65,0x62,0x64,0x68,0x6c,0x6e,0x6f,0x72,0x7b,0x89,0x97,0x9f,0xa0,0x93,0x7e,
0x67,0x55,0x4d,0x53,0x60,0x6d,0x78,0x79,0x72,0x67,0x5c,0x57,0x55,0x52,0x4b,0x41,
0x38,0x2f,0x2b,0x2e,0x37,0x41,0x41,0x3f,0x34,0x2d,0x2b,0x32,0x40,0x59,0x6b,0x78,
0x7d,0x7a,0x72,0x6a,0x60,0x5a,0x53,0x4c,0x43,0x3b,0x36,0x39,0x46,0x5a,0x6e,0x7f,
0x8a,0x91,0x95,0x97,0x9a,0x9d,0xa0,0xa0,0x9d,0x9c,0x9a,0x9a,0x9c,0x9d,0x9d,0x9c,
0x9a,0x9a,0x9a,0x9c,0x9e,0xa0,0xa0,0x9e,0x9d,0x9e,0x9f,0xa0,0x9c,0x91,0x81,0x6e,
0x5e,0x54,0x55,0x5d,0x68,0x72,0x78,0x77,0x6f,0x67,0x60,0x5a,0x56,0x51,0x47,0x3e,
0x33,0x2d,0x2a,0x31,0x38,0x3e,0x41,0x41,0x3d,0x39,0x36,0x34,0x36,0x38,0x3b,0x3b,
0x3b,0x39,0x3a,0x39,0x38,0x36,0x36,0x36,0x38,0x3b,0x3b,0x3b,0x3a,0x39,0x39,0x39,
0x39,0x3b,0x3c,0x3b,0x39,0x39,0x39,0x3b,0x3a,0x3b,0x3a,0x39,0x3b,0x3c,0x3c,0x3d,
// Line 12
0x37,0x36,0x36,0x36,0x36,0x35,0x36,0x36,0x35,0x37,0x38,0x39,0x39,0x37,0x36,0x36,
0x38,0x3a,0x39,0x38,0x38,0x37,0x37,0x36,0x35,0x36,0x37,0x37,0x37,0x36,0x36,0x35,
0x36,0x36,0x38,0x3b,0x3d,0x3d,0x3b,0x38,0x35,0x37,0x38,0x39,0x3a,0x3a,0x36,0x32,
0x30,0x36,0x40,0x53,0x65,0x75,0x7c,0x77,0x6b,0x60,0x57,0x57,0x5f,0x6c,0x76,0x7c,
0x76,0x6e,0x64,0x5c,0x5c,0x60,0x67,0x6d,0x73,0x75,0x72,0x6b,0x61,0x5c,0x5d,0x65,
0x6d,0x74,0x77,0x76,0x70,0x67,0x5e,0x58,0x57,0x5d,0x66,0x6e,0x73,0x74,0x6e,0x6b,
0x61,0x5b,0x5d,0x63,0x6a,0x70,0x73,0x6f,0x69,0x63,0x5c,0x58,0x5a,0x5f,0x67,0x6f,
0x73,0x72,0x6c,0x66,0x5e,0x5a,0x5b,0x62,0x6b,0x73,0x76,0x76,0x70,0x69,0x62,0x5d,
0x5c,0x61,0x68,0x6b,0x6d,0x6e,0x72,0x77,0x81,0x8e,0x9b,0xa5,0xaa,0xa8,0xa1,0x91,
0x80,0x6e,0x60,0x58,0x52,0x4e,0x4a,0x43,0x3a,0x33,0x33,0x3d,0x4e,0x62,0x76,0x84,
0x8c,0x91,0x94,0x98,0x9a,0x9c,0x9b,0x9a,0x97,0x96,0x95,0x9a,0x97,0x91,0x88,0x7b,
0x6e,0x63,0x5a,0x53,0x4b,0x41,0x37,0x30,0x38,0x48,0x5c,0x71,0x7d,0x7d,0x74,0x67,
0x5c,0x59,0x55,0x4f,0x45,0x3a,0x2f,0x2f,0x3a,0x51,0x6b,0x7c,0x80,0x7b,0x6e,0x60,
0x54,0x4e,0x4b,0x47,0x42,0x3a,0x33,0x2f,0x2f,0x33,0x3a,0x43,0x50,0x61,0x6e,0x74,
0x74,0x72,0x6b,0x61,0x5c,0x56,0x50,0x48,0x3e,0x36,0x33,0x3a,0x4a,0x62,0x78,0x89,
0x91,0x95,0x95,0x94,0x8e,0x84,0x74,0x63,0x55,0x51,0x58,0x65,0x73,0x7c,0x7a,0x70,
0x68,0x61,0x5e,0x5b,0x53,0x46,0x37,0x2e,0x2f,0x3d,0x57,0x72,0x80,0x83,0x7b,0x6d,
0x60,0x58,0x52,0x4d,0x45,0x3c,0x32,0x30,0x3a,0x50,0x6b,0x7f,0x86,0x7e,0x6d,0x5d,
0x54,0x55,0x5d,0x69,0x74,0x79,0x77,0x6f,0x65,0x5d,0x5d,0x61,0x68,0x70,0x76,0x75,
0x73,0x69,0x60,0x5c,0x5e,0x67,0x74,0x7b,0x7c,0x79,0x70,0x68,0x5e,0x5c,0x5b,0x5a,
0x56,0x4c,0x3d,0x31,0x29,0x29,0x2f,0x3a,0x43,0x48,0x47,0x41,0x3b,0x36,0x33,0x34,
0x37,0x39,0x3a,0x39,0x39,0x37,0x37,0x36,0x36,0x36,0x33,0x31,0x32,0x3a,0x47,0x5a,
0x6c,0x7a,0x7d,0x79,0x6c,0x61,0x5c,0x5e,0x65,0x6f,0x74,0x75,0x78,0x7e,0x87,0x95,
0x9b,0x9a,0x8f,0x7a,0x60,0x4f,0x4a,0x50,0x60,0x6f,0x78,0x79,0x72,0x69,0x61,0x5e,
0x5b,0x55,0x4a,0x3c,0x31,0x31,0x3c,0x4e,0x63,0x76,0x84,0x8c,0x90,0x92,0x94,0x98,
0x9d,0xa1,0xa0,0x9c,0x99,0x9b,0x9c,0x9b,0x98,0x90,0x83,0x74,0x64,0x57,0x4b,0x43,
0x3c,0x38,0x36,0x37,0x3f,0x4f,0x61,0x73,0x81,0x8c,0x91,0x97,0x97,0x93,0x89,0x79,
0x67,0x5a,0x55,0x5b,0x63,0x73,0x7b,0x7d,0x77,0x6c,0x61,0x5e,0x5d,0x62,0x67,0x6c,
0x70,0x76,0x7d,0x89,0x96,0xa2,0xa8,0xa9,0xa8,0xa0,0x97,0x94,0x93,0x95,0x9a,0x9d,
0x9e,0xa1,0xa1,0xa1,0x9f,0x9e,0x9d,0x9d,0x9b,0x9c,0x9c,0x9e,0x9f,0x9e,0x99,0x8e,
0x7f,0x6f,0x61,0x56,0x53,0x5a,0x63,0x6c,0x73,0x7c,0x86,0x90,0x95,0x95,0x93,0x87,
0x76,0x65,0x53,0x46,0x3e,0x3a,0x39,0x3b,0x3d,0x3f,0x3d,0x3a,0x37,0x3d,0x49,0x5a,
0x68,0x79,0x7c,0x79,0x70,0x66,0x5e,0x5f,0x64,0x69,0x6e,0x73,0x77,0x80,0x8a,0x93,
0x9a,0x9a,0x8f,0x7f,0x6c,0x5b,0x4d,0x44,0x3e,0x3b,0x3a,0x3d,0x43,0x52,0x65,0x75,
0x81,0x88,0x8c,0x8f,0x94,0x98,0x9a,0x9e,0xa0,0x9f,0x9e,0x9c,0x9c,0x9d,0x9e,0xa0,
0xa3,0xa4,0xa2,0x9b,0x91,0x82,0x72,0x64,0x5b,0x59,0x5b,0x62,0x6b,0x73,0x7a,0x81,
0x89,0x91,0x96,0x9b,0x9d,0x9d,0x97,0x8e,0x82,0x76,0x6a,0x5e,0x55,0x50,0x49,0x43,
0x3f,0x3b,0x36,0x33,0x31,0x34,0x3b,0x43,0x4b,0x53,0x61,0x6f,0x7d,0x8a,0x92,0x96,
0x95,0x8c,0x7e,0x6f,0x62,0x57,0x4d,0x42,0x37,0x33,0x35,0x3f,0x4c,0x5e,0x6f,0x7c,
0x81,0x7d,0x6f,0x62,0x5a,0x5c,0x64,0x6b,0x72,0x79,0x7e,0x84,0x8a,0x91,0x97,0x92,
0x89,0x76,0x61,0x50,0x44,0x3f,0x3f,0x3e,0x3b,0x3b,0x3a,0x3b,0x3e,0x3f,0x3d,0x3b,
0x38,0x38,0x38,0x38,0x38,0x3c,0x3f,0x3e,0x3a,0x38,0x36,0x34,0x34,0x36,0x3d,0x4a,
0x5b,0x6c,0x7c,0x87,0x8e,0x94,0x97,0x9a,0x9f,0xa4,0xa5,0x9e,0x90,0x7f,0x6d,0x60,
0x58,0x57,0x5f,0x69,0x70,0x73,0x6f,0x68,0x5f,0x5b,0x58,0x57,0x52,0x49,0x3a,0x31,
0x2d,0x36,0x4d,0x69,0x7f,0x88,0x82,0x72,0x5f,0x54,0x55,0x5b,0x67,0x6f,0x75,0x7c,
0x82,0x8b,0x97,0xa2,0xa8,0xaa,0xa4,0x9b,0x8f,0x81,0x73,0x67,0x5a,0x50,0x47,0x42,
0x3d,0x3a,0x37,0x34,0x31,0x30,0x2f,0x31,0x3a,0x47,0x58,0x69,0x74,0x77,0x73,0x68,
0x5d,0x59,0x5b,0x60,0x68,0x70,0x74,0x75,0x78,0x82,0x8f,0xa0,0xaa,0xac,0xa9,0xa1,
0x98,0x95,0x94,0x96,0x97,0x9a,0x9a,0x9a,0x98,0x98,0x94,0x8b,0x7d,0x6c,0x5d,0x53,
0x53,0x5a,0x62,0x6b,0x73,0x7c,0x86,0x91,0x99,0x9e,0x9b,0x90,0x80,0x6c,0x5c,0x52,
0x50,0x5a,0x67,0x75,0x81,0x8a,0x8f,0x95,0x9a,0x9f,0xa1,0x9e,0x99,0x90,0x82,0x70,
0x5f,0x53,0x4b,0x46,0x43,0x3f,0x3a,0x35,0x2f,0x2d,0x2f,0x35,0x3d,0x43,0x41,0x3b,
0x33,0x31,0x37,0x44,0x5a,0x6e,0x7c,0x80,0x78,0x6c,0x5f,0x5a,0x59,0x61,0x69,0x6e,
0x70,0x78,0x80,0x8c,0x97,0x9d,0x99,0x90,0x7c,0x64,0x52,0x45,0x3d,0x3d,0x3b,0x37,
0x34,0x34,0x35,0x38,0x3b,0x3a,0x36,0x31,0x2d,0x2e,0x36,0x44,0x58,0x6c,0x79,0x7c,
0x76,0x6d,0x62,0x5a,0x52,0x4d,0x47,0x40,0x37,0x2f,0x2a,0x2a,0x2f,0x36,0x3f,0x49,
0x55,0x5e,0x69,0x78,0x83,0x8f,0x96,0x98,0x94,0x87,0x76,0x63,0x54,0x4f,0x53,0x5e,
0x6b,0x75,0x78,0x76,0x6f,0x67,0x61,0x5a,0x53,0x4b,0x41,0x39,0x34,0x31,0x32,0x37,
0x3a,0x42,0x4c,0x5b,0x68,0x73,0x77,0x73,0x67,0x5b,0x55,0x58,0x65,0x72,0x79,0x7a,
0x72,0x68,0x60,0x5e,0x5d,0x5c,0x58,0x4d,0x3e,0x32,0x2a,0x2b,0x31,0x38,0x3e,0x42,
0x41,0x3f,0x3c,0x37,0x32,0x2f,0x2e,0x2f,0x32,0x3a,0x46,0x53,0x63,0x73,0x7d,0x89,
0x91,0x98,0x99,0x93,0x87,0x76,0x63,0x52,0x45,0x40,0x3d,0x38,0x37,0x36,0x33,0x35,
0x37,0x3c,0x40,0x3a,0x2f,0x28,0x27,0x30,0x43,0x59,0x6c,0x77,0x77,0x72,0x64,0x5f,
0x5a,0x57,0x52,0x4a,0x3f,0x36,0x36,0x40,0x53,0x69,0x7c,0x8b,0x90,0x93,0x96,0x9b,
0xa0,0xa2,0xa1,0x9d,0x97,0x95,0x94,0x94,0x93,0x8f,0x88,0x7e,0x6f,0x60,0x53,0x4a,
0x41,0x3d,0x3b,0x3a,0x38,0x36,0x32,0x30,0x32,0x3c,0x4a,0x5c,0x6b,0x73,0x74,0x6c,
0x63,0x5b,0x57,0x55,0x53,0x4d,0x40,0x36,0x30,0x35,0x44,0x5c,0x73,0x83,0x8c,0x8f,
0x8e,0x92,0x98,0xa0,0xa4,0xa3,0x9c,0x90,0x80,0x72,0x62,0x5b,0x55,0x58,0x5e,0x65,
0x6f,0x7c,0x84,0x8a,0x92,0x99,0xa0,0xa4,0xa4,0xa1,0x9a,0x96,0x95,0x94,0x9b,0x9e,
0x9f,0xa0,0x9b,0x94,0x8f,0x86,0x78,0x6e,0x5f,0x53,0x49,0x41,0x3d,0x3d,0x3b,0x38,
0x35,0x33,0x33,0x36,0x3d,0x48,0x53,0x60,0x6b,0x76,0x82,0x8c,0x93,0x97,0x95,0x8b,
0x7c,0x6c,0x5f,0x58,0x58,0x5e,0x69,0x75,0x80,0x88,0x8c,0x90,0x90,0x8f,0x86,0x76,
0x61,0x50,0x41,0x38,0x36,0x3a,0x3a,0x3f,0x3a,0x35,0x35,0x38,0x42,0x52,0x60,0x6c,
0x75,0x78,0x74,0x6c,0x62,0x5c,0x5b,0x5e,0x65,0x6d,0x74,0x7a,0x82,0x8c,0x94,0x98,
0x97,0x8d,0x7c,0x68,0x55,0x46,0x3d,0x3c,0x3b,0x3b,0x38,0x36,0x34,0x36,0x39,0x3e,
0x45,0x4f,0x5c,0x6b,0x79,0x88,0x93,0x99,0x98,0x90,0x83,0x74,0x66,0x58,0x4d,0x40,
0x3d,0x37,0x37,0x3d,0x45,0x52,0x61,0x70,0x7f,0x8d,0x96,0x98,0x96,0x8e,0x82,0x75,
0x67,0x5c,0x53,0x56,0x58,0x60,0x6d,0x7c,0x89,0x97,0x9a,0x98,0x93,0x8a,0x7a,0x66,
0x56,0x49,0x3f,0x3a,0x36,0x38,0x3e,0x46,0x53,0x63,0x73,0x81,0x8c,0x93,0x95,0x93,
0x8c,0x83,0x75,0x65,0x59,0x55,0x57,0x5f,0x6a,0x78,0x83,0x8c,0x95,0x9d,0x9f,0x9b,
0x8d,0x78,0x62,0x51,0x4b,0x52,0x5d,0x6b,0x74,0x78,0x72,0x66,0x60,0x59,0x54,0x50,
0x47,0x3d,0x33,0x2d,0x29,0x2d,0x33,0x3a,0x41,0x4b,0x54,0x60,0x6c,0x7a,0x86,0x8f,
0x94,0x95,0x91,0x8a,0x7d,0x6c,0x5b,0x4b,0x41,0x3a,0x36,0x36,0x38,0x41,0x50,0x61,
0x72,0x80,0x89,0x8c,0x8f,0x95,0x9d,0xa2,0xa5,0xa1,0x95,0x86,0x75,0x67,0x5b,0x52,
0x49,0x43,0x3d,0x3a,0x32,0x36,0x36,0x35,0x37,0x3b,0x41,0x4b,0x56,0x63,0x6d,0x77,
0x81,0x8d,0x95,0x97,0x92,0x87,0x77,0x67,0x59,0x53,0x55,0x5e,0x69,0x76,0x82,0x8c,
0x93,0x98,0x99,0x94,0x88,0x76,0x64,0x53,0x45,0x3d,0x38,0x37,0x38,0x3a,0x39,0x36,
0x34,0x36,0x3d,0x49,0x5b,0x6b,0x74,0x78,0x74,0x6b,0x60,0x5b,0x5d,0x62,0x67,0x6c,
0x72,0x79,0x81,0x8b,0x94,0x99,0x94,0x8a,0x77,0x65,0x56,0x49,0x40,0x3b,0x38,0x38,
0x38,0x45,0x53,0x65,0x73,0x7e,0x83,0x8b,0x8c,0x8f,0x97,0x9d,0x9e,0x9d,0x98,0x93,
0x92,0x94,0x96,0x92,0x89,0x7c,0x6c,0x5d,0x50,0x49,0x45,0x40,0x3a,0x36,0x31,0x2f,
0x32,0x38,0x3c,0x3d,0x39,0x33,0x2e,0x30,0x3a,0x4b,0x60,0x73,0x7b,0x7b,0x72,0x67,
0x5e,0x57,0x52,0x4b,0x41,0x35,0x2e,0x31,0x3d,0x4f,0x67,0x79,0x80,0x7c,0x6c,0x5b,
0x52,0x4b,0x46,0x44,0x3d,0x36,0x30,0x2e,0x30,0x38,0x40,0x45,0x43,0x3d,0x37,0x34,
0x32,0x33,0x32,0x32,0x31,0x31,0x34,0x37,0x38,0x38,0x35,0x34,0x34,0x36,0x37,0x3a,
0x3b,0x3a,0x37,0x38,0x39,0x3a,0x3c,0x3b,0x37,0x38,0x38,0x37,0x37,0x38,0x37,0x38,
// Line 13
0x32,0x34,0x37,0x39,0x37,0x34,0x34,0x34,0x37,0x3a,0x3a,0x38,0x36,0x34,0x33,0x33,
0x34,0x36,0x35,0x36,0x37,0x36,0x35,0x35,0x36,0x37,0x37,0x36,0x34,0x36,0x37,0x34,
0x33,0x32,0x34,0x37,0x38,0x37,0x37,0x34,0x33,0x31,0x30,0x32,0x35,0x38,0x34,0x2f,
0x30,0x34,0x3e,0x52,0x66,0x75,0x7a,0x74,0x68,0x5c,0x55,0x57,0x60,0x6c,0x75,0x78,
0x74,0x6c,0x63,0x5e,0x5d,0x61,0x69,0x70,0x74,0x75,0x70,0x66,0x5e,0x5b,0x5c,0x60,
0x65,0x6b,0x70,0x72,0x6d,0x66,0x60,0x5c,0x5d,0x64,0x6b,0x72,0x77,0x77,0x6f,0x68,
0x60,0x5d,0x5d,0x61,0x66,0x6d,0x72,0x72,0x6c,0x68,0x60,0x5a,0x5c,0x63,0x6b,0x73,
0x75,0x74,0x6e,0x65,0x5d,0x5a,0x5b,0x62,0x6a,0x71,0x75,0x74,0x70,0x6a,0x63,0x60,
0x60,0x65,0x69,0x6a,0x6b,0x6e,0x72,0x77,0x7f,0x8a,0x96,0xa2,0xa9,0xa9,0xa0,0x93,
0x80,0x6f,0x64,0x5b,0x57,0x56,0x4e,0x44,0x3a,0x34,0x34,0x3d,0x4c,0x61,0x75,0x85,
0x8d,0x8f,0x91,0x96,0x9a,0xa0,0xa1,0x9f,0x9b,0x9a,0x98,0x98,0x98,0x95,0x8d,0x7f,
0x6f,0x61,0x58,0x51,0x48,0x3f,0x36,0x33,0x3b,0x4a,0x5e,0x71,0x7d,0x7c,0x73,0x65,
0x5a,0x54,0x50,0x4a,0x41,0x36,0x2f,0x30,0x3e,0x55,0x6c,0x80,0x85,0x80,0x70,0x5e,
0x4f,0x49,0x46,0x42,0x3c,0x35,0x2f,0x2c,0x2c,0x2e,0x34,0x42,0x51,0x60,0x6d,0x75,
0x75,0x72,0x69,0x63,0x5e,0x5a,0x54,0x4b,0x3f,0x36,0x33,0x3b,0x4b,0x63,0x78,0x88,
0x91,0x97,0x98,0x96,0x91,0x86,0x75,0x63,0x56,0x55,0x5c,0x69,0x74,0x78,0x77,0x6e,
0x63,0x61,0x5e,0x5a,0x52,0x44,0x34,0x28,0x29,0x3b,0x58,0x71,0x81,0x7f,0x78,0x68,
0x5b,0x56,0x53,0x4d,0x46,0x38,0x2e,0x32,0x43,0x5e,0x76,0x85,0x85,0x7b,0x6d,0x60,
0x56,0x51,0x4c,0x43,0x37,0x2d,0x2d,0x3c,0x54,0x6e,0x81,0x85,0x7c,0x6d,0x5d,0x52,
0x4c,0x4a,0x46,0x40,0x36,0x2e,0x2c,0x32,0x39,0x42,0x44,0x42,0x3c,0x39,0x36,0x36,
0x37,0x38,0x38,0x39,0x38,0x3a,0x38,0x3a,0x38,0x35,0x34,0x35,0x34,0x38,0x3a,0x3a,
0x3b,0x3c,0x3a,0x3a,0x3b,0x3c,0x3c,0x3b,0x3a,0x3a,0x38,0x35,0x34,0x3b,0x49,0x59,
0x69,0x75,0x7b,0x79,0x6f,0x65,0x5c,0x58,0x5a,0x61,0x69,0x71,0x74,0x7f,0x87,0x93,
0x9d,0xa6,0xa9,0xab,0xa3,0x98,0x8a,0x7b,0x6b,0x61,0x5b,0x5d,0x63,0x6b,0x73,0x79,
0x80,0x85,0x8b,0x95,0x9b,0x9a,0x8e,0x79,0x63,0x56,0x52,0x5a,0x68,0x76,0x7b,0x78,
0x70,0x67,0x61,0x5e,0x5a,0x54,0x47,0x39,0x2e,0x32,0x3e,0x55,0x70,0x83,0x89,0x84,
0x75,0x65,0x5b,0x59,0x5e,0x64,0x6d,0x71,0x77,0x7e,0x88,0x94,0x9f,0xa7,0xab,0xab,
0xa3,0x96,0x87,0x75,0x66,0x58,0x4f,0x4b,0x49,0x44,0x3f,0x37,0x32,0x30,0x34,0x3a,
0x40,0x42,0x3f,0x37,0x2f,0x2e,0x37,0x47,0x5b,0x70,0x7b,0x78,0x73,0x68,0x5e,0x5b,
0x58,0x54,0x4c,0x40,0x35,0x35,0x40,0x54,0x6b,0x7f,0x88,0x82,0x70,0x5f,0x53,0x52,
0x59,0x67,0x75,0x7b,0x76,0x6b,0x61,0x5b,0x5d,0x64,0x6d,0x75,0x77,0x75,0x70,0x69,
0x64,0x62,0x60,0x5b,0x54,0x4c,0x42,0x38,0x32,0x2d,0x29,0x2f,0x38,0x46,0x57,0x65,
0x6e,0x74,0x73,0x6e,0x68,0x63,0x5f,0x59,0x51,0x48,0x3c,0x34,0x34,0x3e,0x50,0x66,
0x7a,0x8b,0x96,0x9c,0x9f,0x9c,0x94,0x86,0x74,0x64,0x58,0x56,0x59,0x63,0x70,0x78,
0x7f,0x89,0x93,0x9a,0x9f,0x99,0x8a,0x77,0x63,0x56,0x52,0x57,0x61,0x6f,0x7b,0x84,
0x8d,0x95,0x9a,0x9d,0x99,0x8b,0x77,0x64,0x58,0x52,0x59,0x66,0x72,0x7b,0x7b,0x73,
0x68,0x5e,0x56,0x50,0x4b,0x43,0x38,0x30,0x2b,0x2b,0x30,0x35,0x3b,0x41,0x42,0x40,
0x39,0x34,0x31,0x32,0x37,0x3c,0x3d,0x3c,0x38,0x34,0x33,0x34,0x37,0x41,0x50,0x60,
0x6f,0x7b,0x84,0x8d,0x95,0x9b,0x9d,0x9f,0xa0,0xa0,0x9e,0x9b,0x99,0x9c,0xa0,0xa2,
0xa1,0x9e,0x9c,0x9d,0x9d,0x9c,0x99,0x9b,0x9b,0x9e,0xa0,0xa0,0x9d,0xa0,0x9c,0x9a,
0x97,0x95,0x94,0x96,0x96,0x94,0x94,0x95,0x98,0x9b,0x9e,0x9e,0x9a,0x93,0x88,0x7a,
0x6e,0x63,0x58,0x50,0x47,0x3d,0x35,0x31,0x37,0x49,0x5e,0x72,0x7d,0x7f,0x78,0x6c,
0x60,0x57,0x50,0x4e,0x47,0x3c,0x33,0x30,0x3a,0x50,0x68,0x7c,0x86,0x85,0x77,0x61,
0x56,0x56,0x60,0x6f,0x7a,0x7c,0x78,0x70,0x65,0x60,0x5e,0x63,0x67,0x69,0x69,0x6e,
0x75,0x82,0x8d,0x96,0x9a,0x97,0x8d,0x7b,0x69,0x5a,0x4b,0x3e,0x34,0x30,0x33,0x3e,
0x4d,0x60,0x72,0x7c,0x7c,0x75,0x68,0x5d,0x56,0x54,0x50,0x48,0x3e,0x34,0x2e,0x34,
0x44,0x5b,0x73,0x83,0x8b,0x8e,0x8e,0x90,0x96,0x9c,0xa0,0xa0,0x98,0x8a,0x79,0x6b,
0x60,0x56,0x4e,0x48,0x42,0x3b,0x35,0x2f,0x2f,0x33,0x37,0x39,0x3e,0x3d,0x38,0x34,
0x33,0x38,0x48,0x5a,0x68,0x75,0x77,0x70,0x65,0x5a,0x53,0x50,0x4d,0x4a,0x43,0x3b,
0x34,0x34,0x35,0x38,0x3e,0x48,0x52,0x5f,0x6b,0x72,0x74,0x70,0x67,0x5e,0x56,0x53,
0x52,0x4f,0x47,0x3a,0x2d,0x2a,0x2b,0x32,0x3e,0x46,0x4c,0x56,0x5e,0x6b,0x79,0x87,
0x8f,0x96,0x96,0x91,0x84,0x78,0x68,0x55,0x44,0x38,0x34,0x36,0x3a,0x3c,0x3b,0x37,
0x33,0x35,0x3e,0x4a,0x5a,0x68,0x70,0x71,0x6e,0x66,0x5e,0x58,0x4f,0x49,0x42,0x3b,
0x33,0x2f,0x2b,0x2a,0x2d,0x34,0x3f,0x52,0x65,0x73,0x75,0x74,0x6b,0x63,0x5d,0x5b,
0x58,0x52,0x4a,0x3c,0x31,0x2f,0x38,0x4d,0x66,0x7a,0x82,0x7c,0x6f,0x60,0x57,0x56,
0x5c,0x66,0x6f,0x77,0x7e,0x86,0x91,0x9c,0xa0,0x9c,0x8d,0x79,0x65,0x56,0x4b,0x44,
0x3b,0x35,0x31,0x37,0x45,0x5b,0x6d,0x7f,0x7f,0x75,0x68,0x5b,0x52,0x52,0x50,0x4b,
0x43,0x38,0x30,0x2d,0x31,0x39,0x40,0x43,0x40,0x3b,0x35,0x34,0x38,0x44,0x52,0x61,
0x70,0x7e,0x88,0x91,0x96,0x96,0x8d,0x7e,0x6c,0x5d,0x50,0x48,0x3f,0x3c,0x38,0x36,
0x35,0x36,0x37,0x3e,0x3f,0x3d,0x3a,0x36,0x33,0x32,0x36,0x40,0x4f,0x60,0x70,0x7c,
0x83,0x88,0x8c,0x94,0x9a,0x9f,0x9f,0x9b,0x99,0x9a,0x9b,0x9d,0x9d,0x99,0x8e,0x7f,
0x6d,0x5e,0x52,0x4c,0x47,0x41,0x3b,0x35,0x32,0x35,0x38,0x3d,0x40,0x40,0x3b,0x33,
0x2f,0x2f,0x36,0x44,0x54,0x65,0x74,0x81,0x8b,0x94,0x97,0x97,0x90,0x84,0x71,0x60,
0x52,0x48,0x41,0x3c,0x38,0x37,0x37,0x38,0x3a,0x3f,0x43,0x43,0x3f,0x37,0x30,0x2f,
0x36,0x44,0x59,0x6b,0x74,0x72,0x6b,0x60,0x58,0x56,0x54,0x4e,0x46,0x3b,0x33,0x34,
0x41,0x59,0x74,0x86,0x8a,0x82,0x70,0x5e,0x50,0x4a,0x45,0x40,0x37,0x2f,0x28,0x27,
0x2c,0x36,0x3f,0x42,0x3f,0x3a,0x35,0x34,0x36,0x38,0x36,0x32,0x34,0x39,0x46,0x58,
0x69,0x78,0x7b,0x74,0x68,0x60,0x5a,0x5a,0x60,0x66,0x6b,0x70,0x74,0x7a,0x82,0x8f,
0x9a,0xa2,0xa6,0xa4,0x9c,0x91,0x82,0x72,0x66,0x5d,0x56,0x50,0x4a,0x45,0x41,0x3c,
0x36,0x33,0x32,0x33,0x37,0x3e,0x47,0x52,0x5e,0x6b,0x79,0x86,0x8e,0x93,0x95,0x91,
0x86,0x78,0x67,0x57,0x47,0x3e,0x38,0x38,0x3a,0x3c,0x37,0x37,0x33,0x35,0x40,0x4e,
0x60,0x71,0x78,0x79,0x73,0x6b,0x65,0x5e,0x58,0x50,0x45,0x3b,0x33,0x33,0x3f,0x52,
0x6a,0x7c,0x83,0x7f,0x73,0x65,0x58,0x50,0x4a,0x48,0x41,0x39,0x30,0x2e,0x2f,0x32,
0x36,0x3f,0x4b,0x58,0x66,0x6f,0x72,0x72,0x6a,0x5f,0x56,0x51,0x4e,0x49,0x45,0x3e,
0x34,0x2e,0x2b,0x2c,0x34,0x41,0x4f,0x5e,0x69,0x70,0x73,0x70,0x69,0x61,0x5b,0x58,
0x54,0x4c,0x42,0x38,0x34,0x38,0x43,0x59,0x70,0x85,0x91,0x93,0x91,0x91,0x94,0x99,
0x9f,0xa1,0x9c,0x8d,0x7e,0x6d,0x61,0x5d,0x5d,0x5f,0x64,0x67,0x6d,0x77,0x83,0x8b,
0x91,0x91,0x8b,0x82,0x72,0x61,0x51,0x45,0x3b,0x39,0x3b,0x3b,0x3a,0x37,0x34,0x34,
0x39,0x42,0x4d,0x5a,0x65,0x70,0x7b,0x88,0x93,0x9b,0xa0,0x99,0x8a,0x78,0x66,0x59,
0x54,0x55,0x5a,0x68,0x74,0x7f,0x88,0x91,0x95,0x96,0x91,0x87,0x78,0x66,0x55,0x47,
0x3f,0x3c,0x3b,0x3a,0x38,0x36,0x36,0x35,0x35,0x3c,0x45,0x51,0x5f,0x6d,0x7b,0x87,
0x91,0x96,0x9b,0x9f,0xa0,0xa1,0x9f,0x97,0x8a,0x7b,0x69,0x5c,0x55,0x56,0x59,0x62,
0x6b,0x75,0x7d,0x88,0x91,0x98,0x9b,0x97,0x8a,0x7a,0x65,0x52,0x42,0x39,0x34,0x32,
0x32,0x34,0x37,0x38,0x37,0x39,0x3e,0x46,0x53,0x63,0x70,0x7e,0x88,0x90,0x96,0x9b,
0x9e,0xa0,0xa0,0x9c,0x98,0x96,0x93,0x94,0x95,0x97,0x99,0x9b,0x9d,0x9d,0x9a,0x93,
0x81,0x6c,0x5e,0x55,0x54,0x5d,0x69,0x73,0x78,0x78,0x72,0x69,0x63,0x61,0x62,0x66,
0x6a,0x6d,0x71,0x78,0x82,0x8e,0x96,0x9a,0x96,0x89,0x75,0x63,0x51,0x44,0x3b,0x38,
0x38,0x38,0x3b,0x3c,0x3e,0x3f,0x3f,0x3b,0x39,0x38,0x37,0x37,0x38,0x39,0x38,0x34,
0x34,0x37,0x46,0x59,0x6a,0x79,0x7e,0x75,0x6a,0x5b,0x56,0x5d,0x68,0x72,0x78,0x76,
0x6f,0x68,0x61,0x5f,0x60,0x5f,0x57,0x49,0x3a,0x30,0x30,0x38,0x49,0x5f,0x75,0x88,
0x93,0x98,0x96,0x8f,0x85,0x77,0x69,0x5e,0x54,0x4b,0x42,0x38,0x31,0x2f,0x3a,0x4a,
0x5e,0x75,0x82,0x84,0x7b,0x70,0x62,0x5a,0x54,0x4d,0x46,0x3e,0x35,0x34,0x3a,0x4a,
0x60,0x76,0x87,0x91,0x96,0x98,0x94,0x8d,0x80,0x72,0x64,0x55,0x49,0x41,0x3b,0x38,
0x35,0x35,0x35,0x38,0x3a,0x3e,0x3e,0x3e,0x3a,0x37,0x36,0x36,0x36,0x3a,0x3b,0x3d,
0x3b,0x39,0x38,0x38,0x39,0x3a,0x39,0x39,0x3a,0x3b,0x3e,0x3e,0x3e,0x3f,0x3c,0x3b,
0x3b,0x3a,0x3a,0x37,0x37,0x33,0x31,0x34,0x36,0x35,0x37,0x35,0x33,0x34,0x34,0x37,
// Line 14
0x3c,0x3c,0x3a,0x38,0x36,0x37,0x39,0x3b,0x3c,0x3b,0x38,0x37,0x35,0x36,0x37,0x38,
0x37,0x38,0x37,0x37,0x38,0x38,0x37,0x37,0x36,0x37,0x37,0x37,0x35,0x35,0x35,0x34,
0x35,0x38,0x39,0x37,0x36,0x35,0x34,0x33,0x33,0x35,0x35,0x36,0x36,0x36,0x36,0x39,
0x3e,0x47,0x4f,0x56,0x60,0x6a,0x73,0x7c,0x83,0x8b,0x91,0x94,0x95,0x97,0x97,0x98,
0x97,0x98,0x98,0x98,0x99,0x98,0x96,0x96,0x95,0x92,0x8e,0x88,0x82,0x7c,0x73,0x6b,
0x62,0x5a,0x52,0x4a,0x43,0x3d,0x3a,0x39,0x38,0x3a,0x3c,0x3c,0x3a,0x3b,0x3b,0x3a,
0x3b,0x3a,0x39,0x38,0x38,0x37,0x36,0x3a,0x3e,0x45,0x4c,0x55,0x5b,0x67,0x71,0x78,
0x80,0x88,0x8c,0x91,0x94,0x95,0x96,0x96,0x95,0x95,0x93,0x92,0x93,0x95,0x98,0x99,
0x99,0x99,0x95,0x90,0x89,0x81,0x7b,0x73,0x6a,0x60,0x54,0x4b,0x46,0x42,0x3e,0x3d,
0x3d,0x3d,0x3a,0x3c,0x37,0x36,0x37,0x37,0x37,0x35,0x34,0x32,0x34,0x38,0x3b,0x3c,
0x41,0x44,0x49,0x51,0x58,0x60,0x69,0x71,0x79,0x82,0x87,0x8c,0x90,0x93,0x95,0x95,
0x96,0x98,0x99,0x99,0x98,0x99,0x9a,0x9a,0x9a,0x99,0x98,0x95,0x90,0x89,0x82,0x7b,
0x74,0x69,0x62,0x59,0x51,0x48,0x44,0x3f,0x3c,0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x3a,
0x3b,0x3c,0x3e,0x3e,0x3c,0x3b,0x39,0x39,0x3a,0x3c,0x41,0x48,0x4e,0x55,0x5c,0x65,
0x6f,0x7a,0x84,0x8c,0x90,0x93,0x92,0x93,0x95,0x96,0x96,0x95,0x95,0x95,0x95,0x97,
0x97,0x96,0x96,0x94,0x91,0x8e,0x89,0x81,0x7a,0x70,0x64,0x5a,0x52,0x4c,0x48,0x42,
0x3c,0x3a,0x38,0x39,0x3b,0x3b,0x3b,0x3b,0x3a,0x38,0x36,0x36,0x37,0x37,0x36,0x35,
0x35,0x39,0x3c,0x41,0x48,0x4f,0x59,0x62,0x6b,0x73,0x7c,0x86,0x8c,0x90,0x92,0x92,
0x93,0x97,0x98,0x99,0x95,0x96,0x95,0x96,0x97,0x98,0x95,0x98,0x97,0x95,0x91,0x8a,
0x83,0x7c,0x73,0x69,0x5f,0x57,0x4f,0x48,0x40,0x3b,0x38,0x38,0x38,0x3b,0x3b,0x3b,
0x38,0x3a,0x3b,0x3a,0x3b,0x3b,0x3a,0x3a,0x39,0x38,0x38,0x3a,0x3e,0x46,0x51,0x5a,
0x61,0x6c,0x74,0x7d,0x87,0x90,0x94,0x97,0x99,0x9a,0x9a,0x99,0x98,0x98,0x98,0x98,
0x98,0x99,0x9a,0x9a,0x99,0x97,0x92,0x8f,0x89,0x83,0x7d,0x73,0x67,0x5d,0x54,0x4e,
0x48,0x44,0x3f,0x3d,0x3b,0x38,0x35,0x35,0x37,0x39,0x3b,0x39,0x37,0x3b,0x3b,0x3b,
0x3b,0x3c,0x3c,0x3b,0x3e,0x41,0x47,0x4f,0x59,0x64,0x6d,0x75,0x7e,0x89,0x8e,0x93,
0x95,0x97,0x97,0x98,0x97,0x97,0x97,0x96,0x95,0x95,0x95,0x94,0x93,0x93,0x92,0x8f,
0x8c,0x87,0x7f,0x78,0x70,0x67,0x5e,0x56,0x4f,0x49,0x44,0x3e,0x3b,0x3a,0x3a,0x3a,
0x3c,0x40,0x3f,0x40,0x3e,0x3e,0x3f,0x40,0x3b,0x3b,0x3a,0x38,0x36,0x35,0x35,0x36,
0x37,0x38,0x38,0x38,0x37,0x38,0x3b,0x3b,0x3b,0x3d,0x3c,0x3a,0x38,0x38,0x39,0x3b,
0x3b,0x3a,0x3a,0x3a,0x38,0x39,0x3c,0x3b,0x3b,0x3c,0x3b,0x38,0x37,0x37,0x38,0x39,
0x38,0x38,0x39,0x38,0x38,0x3a,0x3b,0x3d,0x3c,0x3b,0x39,0x38,0x39,0x38,0x39,0x3b,
0x3b,0x3d,0x3d,0x3c,0x3b,0x3b,0x3a,0x38,0x38,0x38,0x38,0x37,0x36,0x35,0x32,0x34,
0x35,0x38,0x3a,0x38,0x36,0x35,0x36,0x36,0x37,0x39,0x39,0x39,0x39,0x39,0x38,0x3a,
0x3b,0x3c,0x41,0x44,0x46,0x4b,0x53,0x5d,0x66,0x70,0x78,0x80,0x84,0x89,0x8c,0x90,
0x92,0x94,0x95,0x94,0x93,0x95,0x95,0x95,0x95,0x95,0x94,0x97,0x98,0x9a,0x99,0x98,
0x95,0x93,0x93,0x95,0x96,0x97,0x97,0x95,0x93,0x93,0x93,0x96,0x98,0x9a,0x9a,0x98,
0x96,0x96,0x95,0x95,0x97,0x99,0x98,0x96,0x93,0x93,0x92,0x95,0x95,0x96,0x97,0x97,
0x95,0x98,0x98,0x99,0x98,0x98,0x96,0x96,0x95,0x95,0x93,0x92,0x91,0x92,0x93,0x93,
0x93,0x96,0x97,0x96,0x95,0x95,0x96,0x9a,0x9c,0x99,0x96,0x95,0x97,0x9a,0x98,0x95,
0x95,0x97,0x98,0x98,0x97,0x97,0x99,0x9c,0x9b,0x99,0x97,0x99,0x9a,0x9a,0x99,0x99,
0x98,0x99,0x97,0x95,0x95,0x95,0x95,0x97,0x96,0x95,0x97,0x97,0x96,0x97,0x97,0x97,
0x96,0x96,0x98,0x98,0x97,0x96,0x97,0x99,0x9a,0x99,0x98,0x97,0x97,0x97,0x95,0x94,
0x95,0x98,0x99,0x99,0x99,0x9a,0x98,0x99,0x97,0x95,0x95,0x97,0x97,0x97,0x95,0x95,
0x97,0x97,0x97,0x97,0x96,0x96,0x96,0x96,0x96,0x96,0x97,0x95,0x94,0x94,0x95,0x94,
0x93,0x92,0x93,0x95,0x96,0x96,0x97,0x96,0x97,0x98,0x98,0x98,0x98,0x9a,0x99,0x98,
0x97,0x95,0x93,0x93,0x93,0x96,0x98,0x99,0x99,0x99,0x97,0x96,0x97,0x9a,0x9c,0x9a,
0x9c,0x9a,0x96,0x95,0x95,0x95,0x95,0x94,0x93,0x95,0x95,0x93,0x93,0x95,0x96,0x98,
0x99,0x99,0x99,0x98,0x93,0x8e,0x89,0x82,0x7a,0x72,0x68,0x5f,0x58,0x52,0x4c,0x47,
0x41,0x3f,0x3f,0x3e,0x3b,0x3b,0x3b,0x3b,0x3a,0x3b,0x3a,0x39,0x39,0x38,0x37,0x37,
0x38,0x39,0x3a,0x3b,0x3b,0x3c,0x3e,0x3e,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,
0x38,0x36,0x38,0x3a,0x3b,0x3c,0x3c,0x3b,0x3b,0x3a,0x39,0x38,0x39,0x3b,0x3d,0x41,
0x45,0x4a,0x51,0x5a,0x63,0x6f,0x78,0x80,0x86,0x8b,0x8f,0x90,0x92,0x95,0x96,0x98,
0x97,0x95,0x95,0x95,0x95,0x96,0x95,0x92,0x93,0x94,0x94,0x93,0x92,0x95,0x96,0x97,
0x97,0x96,0x96,0x96,0x96,0x97,0x97,0x97,0x95,0x95,0x95,0x97,0x97,0x96,0x96,0x96,
0x96,0x98,0x99,0x9a,0x9a,0x98,0x97,0x95,0x95,0x97,0x98,0x99,0x98,0x97,0x97,0x97,
0x96,0x98,0x99,0x98,0x96,0x97,0x98,0x99,0x98,0x98,0x98,0x9a,0x98,0x96,0x95,0x95,
0x95,0x96,0x95,0x95,0x93,0x93,0x94,0x96,0x99,0x9b,0x9c,0x9a,0x98,0x97,0x97,0x98,
0x99,0x9a,0x9a,0x97,0x96,0x96,0x96,0x93,0x96,0x97,0x97,0x97,0x96,0x95,0x94,0x92,
0x8d,0x8a,0x83,0x7b,0x73,0x68,0x5d,0x56,0x4f,0x4a,0x45,0x41,0x3d,0x3c,0x3c,0x3b,
0x3b,0x3b,0x3b,0x3b,0x3c,0x3b,0x3a,0x3a,0x39,0x38,0x37,0x38,0x3a,0x3a,0x3a,0x38,
0x38,0x3a,0x38,0x38,0x3b,0x3b,0x39,0x38,0x37,0x37,0x37,0x38,0x38,0x3b,0x3b,0x3b,
0x38,0x3a,0x3a,0x3b,0x3c,0x3e,0x3c,0x3b,0x3a,0x39,0x39,0x39,0x3b,0x3c,0x3b,0x3a,
0x3a,0x3b,0x3c,0x3c,0x3c,0x3c,0x3a,0x38,0x37,0x38,0x38,0x37,0x37,0x38,0x39,0x39,
0x3a,0x3a,0x3a,0x3b,0x3a,0x3a,0x39,0x3a,0x38,0x36,0x37,0x38,0x39,0x3c,0x3c,0x3c,
0x3c,0x3b,0x3b,0x3b,0x39,0x37,0x37,0x37,0x36,0x35,0x35,0x35,0x35,0x36,0x35,0x33,
0x34,0x35,0x35,0x35,0x34,0x35,0x36,0x37,0x37,0x3a,0x3a,0x3a,0x38,0x37,0x35,0x35,
0x35,0x36,0x35,0x38,0x34,0x33,0x35,0x36,0x36,0x37,0x37,0x35,0x35,0x36,0x37,0x37,
0x36,0x36,0x36,0x38,0x38,0x38,0x38,0x37,0x37,0x39,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,
0x38,0x39,0x38,0x38,0x36,0x35,0x35,0x35,0x35,0x36,0x36,0x35,0x35,0x37,0x38,0x3a,
0x39,0x38,0x3a,0x3b,0x3b,0x39,0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x38,0x39,0x3a,0x3a,
0x3a,0x3a,0x39,0x37,0x36,0x37,0x37,0x37,0x36,0x37,0x35,0x34,0x34,0x35,0x36,0x37,
0x38,0x38,0x39,0x38,0x39,0x3a,0x3b,0x3b,0x3c,0x3e,0x3d,0x3b,0x39,0x38,0x38,0x38,
0x37,0x36,0x36,0x37,0x36,0x38,0x38,0x38,0x38,0x37,0x35,0x36,0x38,0x3b,0x3b,0x3b,
0x38,0x37,0x37,0x38,0x38,0x3a,0x3a,0x38,0x38,0x36,0x36,0x38,0x3a,0x3b,0x3b,0x3a,
0x3a,0x38,0x38,0x38,0x37,0x37,0x36,0x33,0x34,0x35,0x33,0x33,0x33,0x34,0x35,0x35,
0x33,0x37,0x38,0x39,0x38,0x38,0x38,0x38,0x39,0x3a,0x39,0x38,0x37,0x38,0x38,0x37,
0x36,0x35,0x33,0x33,0x34,0x36,0x37,0x37,0x34,0x32,0x32,0x33,0x35,0x37,0x37,0x36,
0x34,0x34,0x34,0x35,0x38,0x3a,0x38,0x38,0x37,0x36,0x35,0x37,0x35,0x36,0x35,0x34,
0x32,0x35,0x34,0x35,0x36,0x37,0x35,0x35,0x33,0x33,0x34,0x35,0x36,0x37,0x36,0x35,
0x35,0x36,0x36,0x37,0x38,0x37,0x35,0x36,0x36,0x38,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,
0x39,0x38,0x37,0x36,0x37,0x38,0x36,0x37,0x36,0x37,0x36,0x34,0x32,0x33,0x34,0x33,
0x35,0x35,0x36,0x37,0x38,0x37,0x38,0x3b,0x3c,0x3c,0x3b,0x39,0x37,0x38,0x38,0x39,
0x39,0x3a,0x39,0x3a,0x39,0x39,0x39,0x37,0x35,0x35,0x35,0x35,0x36,0x37,0x36,0x35,
0x35,0x36,0x36,0x38,0x38,0x37,0x36,0x35,0x35,0x36,0x37,0x38,0x39,0x3a,0x3a,0x3a,
0x3b,0x3a,0x38,0x39,0x38,0x37,0x35,0x35,0x35,0x38,0x37,0x37,0x36,0x35,0x33,0x33,
0x34,0x37,0x38,0x37,0x36,0x34,0x34,0x35,0x34,0x35,0x35,0x35,0x36,0x36,0x35,0x35,
0x37,0x3a,0x3c,0x3d,0x3d,0x3b,0x3a,0x37,0x34,0x35,0x34,0x34,0x33,0x34,0x33,0x35,
0x35,0x37,0x39,0x39,0x37,0x37,0x37,0x37,0x36,0x36,0x35,0x34,0x34,0x35,0x35,0x38,
0x35,0x36,0x37,0x36,0x34,0x34,0x35,0x35,0x35,0x36,0x38,0x37,0x37,0x37,0x37,0x38,
0x37,0x37,0x38,0x37,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x35,0x37,0x39,0x38,0x38,
0x37,0x38,0x39,0x3a,0x3a,0x3a,0x37,0x35,0x35,0x35,0x35,0x37,0x38,0x37,0x36,0x35,
0x37,0x37,0x37,0x37,0x37,0x39,0x38,0x35,0x38,0x38,0x36,0x35,0x34,0x35,0x37,0x38,
0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x37,0x38,0x38,0x35,0x32,0x31,0x33,0x35,0x35,
0x34,0x35,0x33,0x33,0x34,0x36,0x36,0x38,0x37,0x37,0x35,0x36,0x37,0x38,0x37,0x36,
0x33,0x34,0x34,0x35,0x37,0x37,0x34,0x33,0x33,0x33,0x32,0x34,0x34,0x35,0x35,0x35,
0x33,0x35,0x35,0x34,0x34,0x36,0x38,0x38,0x37,0x36,0x36,0x37,0x36,0x36,0x36,0x36,
// Line 15
0x35,0x36,0x3a,0x3a,0x39,0x38,0x36,0x35,0x35,0x36,0x38,0x38,0x38,0x36,0x36,0x38,
0x3a,0x3b,0x3a,0x38,0x35,0x36,0x35,0x34,0x34,0x35,0x35,0x35,0x35,0x36,0x38,0x38,
0x36,0x36,0x35,0x36,0x37,0x38,0x38,0x35,0x33,0x34,0x34,0x35,0x35,0x38,0x3a,0x3a,
0x36,0x34,0x35,0x3b,0x47,0x59,0x6b,0x77,0x7f,0x7b,0x70,0x66,0x5c,0x5b,0x62,0x6d,
0x75,0x79,0x77,0x70,0x67,0x61,0x61,0x68,0x70,0x77,0x7a,0x78,0x73,0x6c,0x65,0x61,
0x61,0x66,0x6d,0x73,0x78,0x78,0x74,0x6e,0x66,0x60,0x5f,0x64,0x6c,0x72,0x78,0x76,
0x73,0x6c,0x66,0x62,0x63,0x66,0x6b,0x73,0x79,0x79,0x74,0x6c,0x64,0x61,0x61,0x66,
0x6e,0x78,0x7c,0x7a,0x73,0x6a,0x63,0x60,0x63,0x6a,0x74,0x7a,0x7c,0x7b,0x75,0x6e,
0x6a,0x69,0x6b,0x6d,0x6e,0x70,0x70,0x73,0x75,0x7c,0x87,0x92,0x9c,0xa7,0xab,0xa9,
0xa2,0x97,0x87,0x77,0x68,0x5e,0x58,0x55,0x50,0x49,0x40,0x39,0x38,0x3e,0x4c,0x60,
0x75,0x85,0x8e,0x92,0x94,0x98,0x9e,0xa5,0xa8,0xa6,0x9d,0x90,0x80,0x72,0x66,0x60,
0x60,0x63,0x68,0x72,0x7a,0x81,0x88,0x8e,0x95,0x9f,0xa6,0xab,0xa9,0xa4,0x9b,0x95,
0x93,0x96,0x98,0x9d,0x96,0x87,0x73,0x5f,0x53,0x53,0x5b,0x69,0x77,0x80,0x81,0x7b,
0x70,0x67,0x64,0x67,0x6c,0x75,0x7c,0x7d,0x78,0x70,0x67,0x61,0x5f,0x65,0x6e,0x77,
0x7a,0x79,0x73,0x6a,0x62,0x5f,0x64,0x6d,0x73,0x79,0x7b,0x77,0x73,0x6c,0x67,0x66,
0x62,0x5d,0x55,0x4a,0x3e,0x33,0x2f,0x2b,0x2d,0x34,0x3c,0x47,0x54,0x63,0x6e,0x76,
0x78,0x75,0x6c,0x61,0x5a,0x5d,0x67,0x74,0x7b,0x7c,0x76,0x6b,0x61,0x5b,0x5d,0x67,
0x6f,0x75,0x77,0x74,0x6e,0x6a,0x65,0x63,0x61,0x5b,0x52,0x44,0x3c,0x31,0x2a,0x26,
0x27,0x2b,0x36,0x41,0x51,0x63,0x70,0x76,0x77,0x71,0x69,0x63,0x5f,0x5c,0x57,0x4e,
0x41,0x38,0x36,0x42,0x57,0x6f,0x7f,0x85,0x7f,0x72,0x63,0x58,0x51,0x4e,0x4b,0x44,
0x3b,0x39,0x41,0x54,0x6b,0x80,0x88,0x82,0x75,0x64,0x58,0x5b,0x65,0x72,0x7c,0x7e,
0x78,0x72,0x6a,0x64,0x63,0x69,0x6e,0x74,0x7a,0x7c,0x79,0x73,0x6a,0x65,0x64,0x68,
0x70,0x7a,0x7d,0x7b,0x74,0x6a,0x61,0x5b,0x5a,0x5b,0x59,0x52,0x47,0x3a,0x2f,0x29,
0x2b,0x38,0x41,0x48,0x47,0x3e,0x34,0x2f,0x32,0x3f,0x51,0x69,0x7b,0x84,0x82,0x77,
0x6b,0x61,0x5f,0x64,0x6a,0x70,0x76,0x7c,0x81,0x88,0x91,0x9d,0xa6,0xab,0xa8,0x9f,
0x92,0x86,0x7b,0x70,0x65,0x5a,0x51,0x4a,0x44,0x3f,0x3b,0x38,0x34,0x34,0x34,0x37,
0x40,0x50,0x5f,0x6d,0x77,0x7b,0x77,0x6f,0x65,0x5d,0x57,0x52,0x4b,0x45,0x3c,0x35,
0x30,0x2f,0x32,0x38,0x45,0x51,0x5f,0x6e,0x75,0x79,0x76,0x6e,0x66,0x64,0x65,0x6a,
0x70,0x76,0x78,0x7b,0x7e,0x86,0x8f,0x9c,0xa0,0x98,0x88,0x73,0x5f,0x5b,0x5c,0x68,
0x79,0x85,0x87,0x82,0x73,0x64,0x5d,0x5f,0x67,0x6e,0x73,0x76,0x73,0x6d,0x63,0x5b,
0x5b,0x64,0x70,0x7a,0x7e,0x7b,0x74,0x69,0x62,0x61,0x63,0x63,0x5c,0x4f,0x3e,0x32,
0x31,0x3c,0x51,0x6a,0x80,0x8f,0x98,0x9b,0x9b,0x9a,0x93,0x86,0x77,0x67,0x57,0x49,
0x43,0x3f,0x3c,0x39,0x35,0x32,0x32,0x36,0x3a,0x40,0x3f,0x3b,0x36,0x34,0x31,0x32,
0x34,0x37,0x38,0x39,0x36,0x35,0x36,0x39,0x3f,0x4a,0x56,0x66,0x75,0x82,0x8c,0x94,
0x9a,0x9f,0xa4,0xa8,0xa9,0xa6,0xa2,0x9d,0x99,0x9a,0x9b,0x9b,0x9f,0xa1,0xa1,0x9e,
0x97,0x8c,0x80,0x6f,0x5f,0x55,0x4d,0x46,0x3e,0x38,0x32,0x2f,0x2f,0x33,0x39,0x3f,
0x41,0x3f,0x39,0x32,0x32,0x3a,0x46,0x54,0x64,0x75,0x82,0x8b,0x91,0x95,0x96,0x91,
0x87,0x79,0x69,0x59,0x4c,0x46,0x42,0x3f,0x3d,0x3e,0x3c,0x3b,0x38,0x39,0x3a,0x42,
0x4c,0x5a,0x68,0x76,0x83,0x90,0x96,0x96,0x90,0x88,0x7e,0x71,0x61,0x51,0x46,0x40,
0x3e,0x40,0x44,0x4b,0x5a,0x6b,0x7a,0x84,0x8c,0x93,0x99,0x9f,0xa1,0xa0,0xa0,0x9e,
0x9b,0x9a,0x98,0x98,0x98,0x97,0x90,0x84,0x75,0x68,0x5d,0x5f,0x61,0x66,0x6f,0x79,
0x82,0x8d,0x93,0x9a,0xa0,0xa6,0xa7,0xa4,0x9d,0x97,0x94,0x93,0x92,0x94,0x97,0x9b,
0x9d,0x9d,0x9b,0x99,0x9a,0x9b,0x9b,0x9a,0x94,0x88,0x7d,0x6e,0x5f,0x56,0x51,0x4e,
0x49,0x43,0x3d,0x3e,0x49,0x5b,0x6d,0x7f,0x83,0x7d,0x6e,0x5f,0x57,0x5b,0x64,0x71,
0x7b,0x7c,0x73,0x67,0x5d,0x57,0x55,0x57,0x54,0x4b,0x3d,0x30,0x28,0x29,0x2f,0x3c,
0x46,0x48,0x45,0x3f,0x38,0x34,0x35,0x3f,0x4e,0x5f,0x6f,0x7c,0x86,0x91,0x96,0x99,
0x9e,0xa3,0xa5,0xa2,0x9a,0x8e,0x7f,0x70,0x63,0x57,0x4b,0x44,0x3f,0x3e,0x3a,0x36,
0x33,0x31,0x31,0x36,0x41,0x51,0x62,0x6f,0x75,0x76,0x71,0x6a,0x61,0x5c,0x56,0x4e,
0x45,0x3b,0x33,0x36,0x3c,0x4f,0x65,0x7a,0x8a,0x96,0x9d,0x9e,0x9b,0x93,0x88,0x79,
0x6b,0x5f,0x59,0x5d,0x65,0x70,0x7a,0x82,0x88,0x91,0x98,0x9c,0x9b,0x8f,0x7a,0x64,
0x52,0x4f,0x54,0x64,0x73,0x7e,0x80,0x78,0x6d,0x65,0x61,0x63,0x6b,0x71,0x73,0x74,
0x76,0x7b,0x88,0x96,0xa2,0xa8,0xad,0xa8,0x9e,0x97,0x92,0x92,0x97,0x9c,0x9d,0x98,
0x8c,0x7c,0x6c,0x5f,0x5a,0x5f,0x6a,0x74,0x7c,0x83,0x87,0x8c,0x93,0x97,0x95,0x8c,
0x7a,0x65,0x52,0x44,0x3c,0x3b,0x3b,0x39,0x38,0x36,0x32,0x2f,0x36,0x41,0x4f,0x5f,
0x6d,0x76,0x7a,0x74,0x6a,0x63,0x5b,0x56,0x50,0x49,0x3f,0x38,0x39,0x43,0x54,0x6c,
0x80,0x89,0x85,0x78,0x68,0x5d,0x59,0x5d,0x67,0x70,0x76,0x7e,0x85,0x8e,0x97,0xa1,
0xa8,0xab,0xa8,0xa2,0x99,0x8f,0x80,0x6f,0x60,0x57,0x59,0x64,0x73,0x7f,0x82,0x7d,
0x72,0x67,0x63,0x64,0x65,0x6c,0x6d,0x6b,0x6d,0x73,0x7f,0x90,0x9c,0xa0,0x9b,0x8b,
0x78,0x67,0x59,0x4e,0x47,0x42,0x3c,0x3b,0x41,0x4f,0x60,0x73,0x7f,0x82,0x7a,0x6c,
0x5f,0x59,0x5b,0x64,0x6e,0x77,0x78,0x73,0x6b,0x65,0x5f,0x61,0x5e,0x5a,0x51,0x46,
0x3b,0x35,0x31,0x31,0x37,0x40,0x49,0x52,0x5b,0x66,0x70,0x7b,0x84,0x8b,0x92,0x9b,
0xa3,0xa8,0xa7,0xa5,0xa1,0x9d,0x98,0x98,0x97,0x95,0x8e,0x82,0x70,0x62,0x56,0x4d,
0x46,0x41,0x3e,0x3d,0x3c,0x3b,0x37,0x37,0x38,0x3e,0x4b,0x5a,0x69,0x76,0x7a,0x74,
0x69,0x61,0x5d,0x5f,0x64,0x69,0x6f,0x75,0x7b,0x84,0x8f,0x9b,0xa0,0x9e,0x93,0x82,
0x6e,0x5d,0x4d,0x43,0x3c,0x3b,0x3c,0x41,0x4b,0x5b,0x6a,0x75,0x7d,0x85,0x8b,0x91,
0x94,0x91,0x86,0x75,0x63,0x56,0x54,0x5d,0x6a,0x74,0x7e,0x7e,0x76,0x6d,0x66,0x63,
0x5f,0x57,0x4a,0x3e,0x35,0x34,0x3d,0x4e,0x63,0x79,0x87,0x90,0x94,0x97,0x98,0x9b,
0x9f,0xa2,0xa1,0x9d,0x9a,0x9a,0x9c,0x9e,0x9e,0xa0,0x9f,0x9e,0x9d,0x9e,0x9f,0x9e,
0xa1,0x9e,0x97,0x8e,0x82,0x72,0x68,0x5b,0x4f,0x48,0x40,0x3a,0x38,0x3b,0x42,0x51,
0x63,0x76,0x85,0x8e,0x91,0x95,0x9a,0x9e,0xa1,0xa5,0xa3,0x9c,0x8f,0x7e,0x6c,0x61,
0x56,0x4f,0x4a,0x45,0x40,0x3b,0x35,0x31,0x32,0x3a,0x40,0x42,0x42,0x3c,0x35,0x32,
0x35,0x3e,0x4e,0x5f,0x70,0x7f,0x87,0x8d,0x90,0x9a,0xa2,0xa8,0xa9,0xa6,0xa0,0x9c,
0x9b,0x9d,0xa0,0x9e,0x97,0x8a,0x79,0x69,0x5d,0x59,0x5c,0x63,0x6b,0x74,0x7e,0x8a,
0x96,0x9d,0x9d,0x96,0x88,0x79,0x6a,0x5a,0x4d,0x42,0x39,0x36,0x39,0x40,0x46,0x57,
0x65,0x74,0x82,0x8d,0x95,0x9a,0x98,0x8f,0x83,0x74,0x65,0x5a,0x50,0x47,0x3e,0x37,
0x36,0x3d,0x4a,0x5b,0x6c,0x7d,0x82,0x7e,0x73,0x66,0x5d,0x5d,0x64,0x6c,0x73,0x7c,
0x80,0x85,0x8c,0x96,0xa1,0xab,0xae,0xab,0xa7,0xa1,0x9d,0x9b,0x9c,0x9f,0xa3,0xa5,
0xa4,0xa3,0xa1,0x9d,0x9b,0x99,0x98,0x9b,0x9d,0x9e,0x9e,0x9d,0x9c,0x9b,0x9d,0x9e,
0x9e,0x9e,0x98,0x8b,0x7a,0x6d,0x60,0x57,0x51,0x4c,0x44,0x3d,0x39,0x3f,0x4d,0x5f,
0x70,0x7f,0x80,0x77,0x68,0x5b,0x53,0x4e,0x4a,0x46,0x3f,0x36,0x2f,0x2b,0x2c,0x34,
0x39,0x3f,0x3f,0x3a,0x35,0x32,0x31,0x36,0x3a,0x3d,0x3d,0x3c,0x38,0x35,0x34,0x35,
0x39,0x42,0x4e,0x5d,0x70,0x7f,0x8b,0x96,0x9d,0xa1,0xa5,0xa8,0xa8,0xa6,0x9d,0x92,
0x83,0x73,0x65,0x5e,0x5e,0x64,0x6d,0x79,0x7f,0x7d,0x75,0x69,0x5e,0x59,0x54,0x50,
0x4b,0x41,0x36,0x2d,0x2a,0x2f,0x37,0x44,0x46,0x41,0x38,0x30,0x2d,0x34,0x42,0x54,
0x67,0x76,0x82,0x8e,0x95,0x9b,0xa0,0x9e,0x91,0x7e,0x6a,0x5d,0x5b,0x62,0x6d,0x78,
0x7f,0x7c,0x74,0x6c,0x64,0x5f,0x59,0x50,0x44,0x36,0x2d,0x2f,0x3c,0x53,0x6b,0x7f,
0x87,0x82,0x73,0x67,0x5d,0x56,0x52,0x4c,0x43,0x3b,0x38,0x3b,0x4b,0x63,0x7a,0x89,
0x92,0x94,0x95,0x97,0x9d,0xa4,0xa8,0xa5,0x9c,0x90,0x81,0x72,0x64,0x5b,0x52,0x49,
0x40,0x3b,0x38,0x39,0x40,0x4f,0x61,0x73,0x84,0x92,0x9b,0x9d,0x9b,0x96,0x8b,0x7d,
0x6d,0x5f,0x59,0x57,0x5c,0x64,0x73,0x7e,0x88,0x91,0x98,0x9f,0xa5,0xa6,0xa3,0xa1,
0x98,0x8d,0x7f,0x73,0x67,0x63,0x60,0x62,0x67,0x70,0x78,0x7f,0x85,0x8d,0x95,0x9c,
0x9f,0xa1,0xa2,0xa2,0xa0,0x9e,0x9c,0x9d,0x9e,0x9f,0x9e,0x9b,0x9d,0x9b,0x96,0x8c,
0x7f,0x6f,0x65,0x5b,0x57,0x61,0x6d,0x78,0x7c,0x7a,0x73,0x6b,0x64,0x63,0x65,0x6c,
0x73,0x79,0x7a,0x76,0x6f,0x69,0x64,0x63,0x66,0x6b,0x70,0x73,0x75,0x79,0x7f,0x89,
0x96,0xa3,0xab,0xaf,0xad,0xa8,0xa1,0x9a,0x97,0x97,0x99,0x9e,0xa1,0x9f,0x9d,0x9b,
0x98,0x98,0x99,0x9c,0x9b,0x98,0x8d,0x7e,0x6c,0x5d,0x50,0x4a,0x40,0x3a,0x38,0x35,
// Line 16
0x36,0x36,0x36,0x35,0x35,0x35,0x37,0x38,0x36,0x35,0x34,0x34,0x36,0x39,0x3b,0x3c,
0x3a,0x3a,0x3c,0x3d,0x3e,0x3c,0x3a,0x37,0x36,0x35,0x34,0x33,0x33,0x34,0x33,0x32,
0x32,0x33,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x34,0x32,0x33,0x37,0x3d,0x3e,0x41,
0x3b,0x39,0x3a,0x40,0x4c,0x5f,0x71,0x7c,0x7e,0x76,0x6a,0x5f,0x5a,0x5e,0x67,0x72,
0x77,0x76,0x6e,0x66,0x5d,0x5b,0x5c,0x61,0x6a,0x72,0x76,0x77,0x72,0x6c,0x67,0x61,
0x60,0x66,0x6f,0x76,0x77,0x75,0x6e,0x67,0x61,0x5f,0x60,0x67,0x6d,0x74,0x78,0x78,
0x72,0x6b,0x64,0x5f,0x61,0x69,0x70,0x75,0x78,0x76,0x6e,0x66,0x5f,0x5e,0x63,0x68,
0x6f,0x77,0x78,0x73,0x6a,0x64,0x5d,0x5b,0x5e,0x67,0x71,0x77,0x77,0x72,0x6d,0x66,
0x61,0x60,0x63,0x67,0x6c,0x6d,0x6d,0x70,0x75,0x7b,0x85,0x92,0x9e,0xa6,0xa8,0xa4,
0x94,0x8b,0x7d,0x72,0x67,0x5f,0x58,0x54,0x4c,0x43,0x39,0x37,0x3b,0x46,0x57,0x6a,
0x7a,0x88,0x8f,0x92,0x95,0x97,0x99,0x9d,0x9d,0x9a,0x94,0x89,0x7a,0x6a,0x5b,0x53,
0x53,0x5d,0x69,0x76,0x7c,0x7c,0x75,0x6b,0x61,0x5f,0x63,0x6c,0x73,0x78,0x76,0x6f,
0x67,0x61,0x5f,0x63,0x69,0x6e,0x6e,0x6f,0x70,0x73,0x7b,0x87,0x95,0xa5,0xa9,0xa8,
0xa5,0x9f,0x9a,0x97,0x99,0x9b,0x9b,0x95,0x89,0x79,0x69,0x5b,0x4f,0x47,0x3e,0x35,
0x2e,0x30,0x3c,0x52,0x67,0x78,0x80,0x7c,0x70,0x64,0x5b,0x57,0x54,0x4e,0x42,0x37,
0x31,0x36,0x47,0x61,0x78,0x85,0x85,0x7b,0x6b,0x5d,0x55,0x4f,0x49,0x43,0x39,0x30,
0x2b,0x2f,0x33,0x3c,0x3f,0x3e,0x3b,0x35,0x33,0x36,0x38,0x38,0x34,0x31,0x32,0x3e,
0x4f,0x65,0x77,0x80,0x7e,0x75,0x67,0x5e,0x5d,0x64,0x6c,0x70,0x72,0x75,0x7a,0x85,
0x92,0x9d,0xa3,0x9e,0x8e,0x75,0x5f,0x51,0x50,0x59,0x64,0x70,0x7b,0x84,0x8c,0x95,
0x9c,0x9e,0x98,0x88,0x72,0x5f,0x54,0x55,0x5e,0x69,0x72,0x7b,0x83,0x8c,0x94,0x9a,
0x9c,0x95,0x87,0x72,0x5e,0x53,0x55,0x61,0x6f,0x7a,0x7d,0x7a,0x72,0x69,0x63,0x60,
0x5a,0x50,0x45,0x38,0x30,0x34,0x3f,0x53,0x6b,0x80,0x8d,0x96,0x9a,0x98,0x91,0x89,
0x7c,0x6e,0x60,0x54,0x49,0x43,0x3e,0x3b,0x3c,0x3c,0x3c,0x3c,0x3e,0x41,0x45,0x4d,
0x57,0x64,0x72,0x7e,0x87,0x91,0x97,0x9d,0xa4,0xa6,0xa6,0xa4,0x9e,0x99,0x97,0x9a,
0x9c,0x9c,0x95,0x87,0x71,0x65,0x5b,0x58,0x62,0x70,0x7b,0x7f,0x79,0x6e,0x64,0x5e,
0x5d,0x65,0x6d,0x73,0x75,0x73,0x6b,0x61,0x5a,0x56,0x56,0x58,0x53,0x48,0x3d,0x32,
0x2b,0x2c,0x33,0x3d,0x46,0x49,0x42,0x39,0x30,0x30,0x35,0x4a,0x5c,0x6e,0x7a,0x7c,
0x76,0x6d,0x61,0x5d,0x61,0x6c,0x77,0x7d,0x7d,0x76,0x6f,0x67,0x62,0x61,0x5d,0x54,
0x48,0x3c,0x33,0x33,0x3f,0x56,0x6c,0x82,0x91,0x9a,0x9e,0x9a,0x94,0x8b,0x7e,0x6f,
0x61,0x56,0x4c,0x43,0x3d,0x3a,0x38,0x3e,0x4c,0x60,0x74,0x80,0x82,0x79,0x6b,0x5e,
0x5a,0x5e,0x67,0x6e,0x77,0x7b,0x7d,0x85,0x8f,0x9a,0x9e,0x9a,0x8a,0x78,0x63,0x55,
0x51,0x54,0x5f,0x6d,0x79,0x84,0x8b,0x92,0x97,0x9d,0xa1,0xa3,0xa0,0x9d,0x91,0x82,
0x72,0x67,0x5d,0x55,0x50,0x4a,0x43,0x3e,0x3c,0x3b,0x48,0x57,0x6b,0x7e,0x8b,0x91,
0x96,0x97,0x98,0x9d,0xa3,0xa8,0xa6,0x9d,0x8d,0x7b,0x69,0x5d,0x58,0x5b,0x65,0x70,
0x79,0x7c,0x77,0x6f,0x66,0x60,0x5d,0x58,0x50,0x45,0x39,0x31,0x32,0x3c,0x4e,0x66,
0x7b,0x89,0x8e,0x90,0x91,0x94,0x9c,0x9e,0xa0,0xa3,0xa2,0x9e,0x9c,0x9d,0x9f,0xa4,
0xa5,0xa6,0xa2,0xa2,0x9e,0x9c,0x9c,0x9c,0x9c,0x9d,0x9d,0x9c,0x9c,0x9c,0x9b,0x9b,
0x9b,0x9c,0x9a,0x94,0x89,0x79,0x68,0x5a,0x54,0x5b,0x66,0x71,0x78,0x79,0x77,0x72,
0x69,0x61,0x5c,0x58,0x4e,0x42,0x35,0x2f,0x2f,0x3e,0x52,0x68,0x7c,0x8e,0x9a,0xa0,
0x99,0x8e,0x84,0x78,0x6c,0x62,0x55,0x49,0x40,0x39,0x33,0x35,0x3f,0x53,0x69,0x7a,
0x81,0x7e,0x74,0x67,0x5b,0x56,0x53,0x4e,0x46,0x3b,0x31,0x33,0x3f,0x56,0x6f,0x81,
0x85,0x7c,0x6c,0x5f,0x58,0x5d,0x69,0x75,0x7e,0x80,0x79,0x72,0x67,0x62,0x65,0x69,
0x6e,0x6e,0x70,0x72,0x75,0x7d,0x89,0x96,0x9f,0x9d,0x8f,0x78,0x61,0x53,0x50,0x58,
0x65,0x74,0x79,0x77,0x6e,0x65,0x5f,0x5c,0x58,0x52,0x46,0x3a,0x31,0x32,0x40,0x53,
0x67,0x7a,0x85,0x8a,0x8f,0x93,0x99,0x9d,0xa0,0x9f,0x9d,0x9c,0x9c,0x9e,0xa0,0x9f,
0x99,0x90,0x82,0x74,0x68,0x5b,0x4f,0x47,0x3f,0x3a,0x35,0x3b,0x45,0x56,0x68,0x79,
0x86,0x92,0x98,0x99,0x95,0x8c,0x7e,0x70,0x64,0x58,0x4d,0x43,0x3c,0x3a,0x3b,0x40,
0x4a,0x5b,0x6d,0x7c,0x87,0x90,0x95,0x97,0x92,0x8b,0x7e,0x6e,0x5d,0x51,0x47,0x43,
0x40,0x3d,0x39,0x35,0x33,0x35,0x3a,0x41,0x42,0x3f,0x39,0x32,0x32,0x3b,0x4d,0x62,
0x75,0x7e,0x7a,0x6e,0x5f,0x55,0x51,0x50,0x4d,0x46,0x3d,0x35,0x2f,0x30,0x34,0x3c,
0x41,0x41,0x3c,0x37,0x34,0x34,0x35,0x36,0x34,0x32,0x33,0x35,0x36,0x3a,0x38,0x34,
0x31,0x2f,0x2f,0x33,0x38,0x3b,0x3c,0x38,0x33,0x32,0x3b,0x4c,0x61,0x73,0x7b,0x7a,
0x72,0x69,0x60,0x5b,0x56,0x4f,0x45,0x38,0x2f,0x35,0x44,0x5c,0x73,0x83,0x84,0x79,
0x6a,0x5d,0x56,0x53,0x4d,0x43,0x39,0x32,0x36,0x43,0x59,0x6f,0x80,0x85,0x7a,0x69,
0x59,0x4f,0x4a,0x4a,0x46,0x3f,0x36,0x2d,0x27,0x28,0x2e,0x38,0x45,0x53,0x5f,0x6a,
0x70,0x70,0x69,0x62,0x5b,0x58,0x56,0x52,0x48,0x3c,0x32,0x30,0x3e,0x56,0x70,0x84,
0x88,0x7e,0x6c,0x5d,0x58,0x5d,0x68,0x74,0x79,0x79,0x72,0x6a,0x63,0x5f,0x5b,0x57,
0x4f,0x46,0x3c,0x32,0x2c,0x2d,0x2e,0x32,0x38,0x44,0x54,0x65,0x73,0x78,0x75,0x6c,
0x62,0x5b,0x58,0x54,0x50,0x47,0x3c,0x30,0x2d,0x37,0x4e,0x66,0x81,0x90,0x96,0x97,
0x96,0x96,0x9b,0x9f,0xa0,0xa2,0x9d,0x9a,0x98,0x99,0x9a,0x9d,0xa0,0xa2,0x9e,0x9c,
0x95,0x89,0x7a,0x68,0x5b,0x51,0x47,0x41,0x3e,0x3a,0x35,0x30,0x2c,0x2e,0x34,0x39,
0x39,0x36,0x32,0x30,0x2f,0x32,0x33,0x35,0x37,0x36,0x35,0x36,0x37,0x39,0x39,0x38,
0x35,0x32,0x32,0x35,0x37,0x3a,0x3a,0x3a,0x38,0x37,0x34,0x35,0x38,0x3b,0x3c,0x3a,
0x35,0x33,0x32,0x37,0x45,0x58,0x6e,0x7a,0x7b,0x72,0x64,0x5a,0x56,0x5d,0x6a,0x76,
0x7c,0x7a,0x6f,0x63,0x5d,0x5c,0x5e,0x5f,0x59,0x4b,0x38,0x2d,0x2e,0x3e,0x58,0x71,
0x82,0x85,0x7a,0x67,0x57,0x51,0x56,0x62,0x6f,0x78,0x7a,0x75,0x6d,0x65,0x62,0x64,
0x68,0x6d,0x6e,0x6c,0x6d,0x73,0x7f,0x8e,0x98,0x9c,0x97,0x89,0x74,0x61,0x50,0x46,
0x3e,0x3a,0x36,0x35,0x3c,0x46,0x54,0x67,0x77,0x84,0x8e,0x93,0x92,0x90,0x8b,0x80,
0x73,0x67,0x5a,0x49,0x3f,0x37,0x36,0x3a,0x41,0x4d,0x5b,0x69,0x76,0x84,0x8c,0x92,
0x96,0x96,0x90,0x85,0x76,0x67,0x5a,0x59,0x5e,0x6a,0x76,0x7d,0x7d,0x77,0x6d,0x61,
0x5e,0x61,0x67,0x6d,0x70,0x73,0x79,0x83,0x91,0x9c,0x9f,0x99,0x8a,0x77,0x61,0x51,
0x4d,0x52,0x5c,0x6a,0x78,0x84,0x8f,0x97,0x9a,0x9d,0xa1,0xa5,0xa6,0xa2,0x98,0x8c,
0x7e,0x70,0x63,0x5d,0x5e,0x63,0x6b,0x71,0x76,0x7f,0x88,0x91,0x97,0x98,0x92,0x84,
0x70,0x5e,0x4e,0x45,0x40,0x3e,0x3d,0x3c,0x3a,0x3a,0x38,0x37,0x3b,0x40,0x45,0x4f,
0x5d,0x6e,0x7d,0x88,0x90,0x97,0x9d,0xa0,0xa2,0xa3,0xa0,0x9a,0x8d,0x7c,0x6c,0x62,
0x5d,0x5e,0x63,0x6a,0x72,0x7a,0x80,0x88,0x91,0x99,0x9a,0x8f,0x82,0x70,0x5e,0x51,
0x44,0x3c,0x3b,0x37,0x36,0x3d,0x4b,0x5e,0x6e,0x7c,0x7d,0x77,0x6c,0x61,0x5b,0x5c,
0x62,0x6c,0x72,0x76,0x79,0x80,0x8a,0x94,0x9f,0xa7,0xa9,0xa6,0x9d,0x97,0x96,0x97,
0x99,0x9a,0x9c,0x9d,0x9e,0x9e,0x97,0x8e,0x80,0x71,0x60,0x52,0x48,0x44,0x40,0x3f,
0x39,0x35,0x34,0x34,0x32,0x38,0x3a,0x3f,0x46,0x51,0x5d,0x6c,0x7a,0x85,0x8e,0x95,
0x9a,0xa0,0xa3,0xa4,0xa0,0x97,0x88,0x78,0x68,0x5d,0x58,0x5e,0x67,0x70,0x77,0x78,
0x73,0x6d,0x66,0x62,0x5f,0x5e,0x56,0x4d,0x3f,0x35,0x32,0x40,0x53,0x68,0x7c,0x89,
0x8c,0x8d,0x8e,0x93,0x9a,0xa2,0xa8,0xa6,0x9e,0x98,0x97,0x9b,0x9f,0x9c,0x91,0x7f,
0x6a,0x5c,0x54,0x58,0x62,0x70,0x78,0x79,0x74,0x6d,0x67,0x62,0x5d,0x58,0x4f,0x42,
0x36,0x31,0x33,0x3d,0x52,0x6a,0x7e,0x8c,0x93,0x94,0x94,0x97,0x9b,0x9e,0xa2,0xa0,
0x9d,0x9b,0x98,0x97,0x98,0x9c,0x9f,0xa2,0x9e,0x98,0x90,0x85,0x77,0x69,0x5b,0x50,
0x47,0x42,0x3d,0x39,0x37,0x36,0x36,0x37,0x39,0x3d,0x47,0x52,0x5f,0x6e,0x77,0x78,
0x72,0x6a,0x61,0x5a,0x5e,0x64,0x6b,0x73,0x77,0x7b,0x81,0x8b,0x97,0xa0,0x9e,0x92,
0x7e,0x69,0x58,0x53,0x58,0x64,0x72,0x7c,0x84,0x8a,0x92,0x9a,0xa0,0xa2,0xa1,0x9d,
0x9b,0x98,0x97,0x99,0x9a,0x9b,0x9d,0xa0,0xa2,0xa3,0xa0,0x96,0x89,0x7a,0x69,0x5b,
0x54,0x4f,0x47,0x3e,0x37,0x35,0x39,0x48,0x5b,0x70,0x7e,0x81,0x76,0x68,0x5a,0x53,
0x58,0x65,0x72,0x7c,0x7c,0x76,0x6c,0x65,0x61,0x62,0x64,0x67,0x6a,0x6b,0x6c,0x72,
0x7d,0x8b,0x99,0xa4,0xaa,0xac,0xa8,0xa2,0x9d,0x9a,0x98,0x99,0x9a,0x9c,0x9d,0xa0,
0xa0,0x9d,0x92,0x85,0x74,0x66,0x5b,0x51,0x4b,0x47,0x41,0x3a,0x35,0x32,0x32,0x36,
0x3a,0x3d,0x3e,0x3b,0x37,0x32,0x32,0x32,0x34,0x38,0x3a,0x3a,0x3a,0x3b,0x3a,0x3b,
0x3b,0x3a,0x39,0x38,0x37,0x37,0x36,0x37,0x37,0x37,0x37,0x35,0x35,0x35,0x35,0x36,
// Line 17
0x38,0x37,0x36,0x36,0x34,0x35,0x34,0x35,0x37,0x35,0x33,0x32,0x31,0x32,0x32,0x34,
0x34,0x36,0x36,0x36,0x33,0x33,0x32,0x34,0x37,0x38,0x37,0x36,0x34,0x34,0x34,0x36,
0x38,0x39,0x38,0x34,0x33,0x32,0x32,0x35,0x37,0x38,0x35,0x33,0x33,0x35,0x38,0x3b,
0x39,0x38,0x36,0x34,0x34,0x3e,0x4c,0x5f,0x70,0x7a,0x7b,0x76,0x6b,0x61,0x5e,0x61,
0x68,0x71,0x78,0x79,0x74,0x6c,0x64,0x5f,0x61,0x67,0x6e,0x75,0x78,0x76,0x71,0x6b,
0x66,0x64,0x65,0x6c,0x74,0x78,0x78,0x77,0x72,0x6a,0x64,0x60,0x63,0x6a,0x71,0x77,
0x77,0x75,0x6f,0x68,0x64,0x60,0x60,0x67,0x6c,0x72,0x75,0x75,0x71,0x6b,0x62,0x5e,
0x61,0x6a,0x71,0x77,0x7a,0x77,0x70,0x6a,0x64,0x60,0x64,0x6c,0x74,0x79,0x7a,0x78,
0x70,0x68,0x62,0x60,0x66,0x6c,0x71,0x75,0x73,0x71,0x75,0x7e,0x8a,0x99,0xa6,0xae,
0xaf,0xa9,0x9d,0x8b,0x7e,0x70,0x64,0x5c,0x54,0x4b,0x47,0x3e,0x37,0x36,0x39,0x42,
0x53,0x67,0x78,0x86,0x8f,0x95,0x98,0x9b,0x9d,0xa0,0xa2,0x9f,0x95,0x86,0x75,0x66,
0x5c,0x58,0x5b,0x65,0x70,0x78,0x7c,0x7a,0x73,0x68,0x5d,0x5a,0x5e,0x68,0x71,0x76,
0x75,0x6d,0x65,0x61,0x60,0x64,0x6b,0x70,0x70,0x6f,0x6f,0x74,0x7e,0x8b,0x99,0xa5,
0xac,0xac,0xa4,0x9e,0x99,0x96,0x9a,0x9d,0x9d,0x98,0x8b,0x7c,0x6d,0x61,0x58,0x50,
0x47,0x3d,0x36,0x38,0x40,0x51,0x64,0x74,0x7b,0x76,0x6b,0x60,0x5a,0x57,0x53,0x4e,
0x46,0x3b,0x32,0x39,0x4a,0x64,0x7c,0x89,0x88,0x7d,0x6e,0x62,0x5e,0x60,0x66,0x6c,
0x6f,0x72,0x79,0x82,0x8e,0x98,0xa2,0xa3,0xa1,0x9d,0x96,0x8d,0x80,0x71,0x64,0x5a,
0x52,0x4b,0x47,0x44,0x3f,0x3b,0x36,0x33,0x34,0x38,0x3e,0x46,0x50,0x5a,0x64,0x74,
0x7e,0x87,0x8e,0x96,0x9d,0xa3,0xa4,0xa2,0x9e,0x95,0x88,0x76,0x67,0x59,0x52,0x4f,
0x4b,0x43,0x3b,0x34,0x30,0x31,0x34,0x3a,0x40,0x41,0x3d,0x37,0x31,0x31,0x39,0x4a,
0x5e,0x71,0x7a,0x79,0x6f,0x64,0x5b,0x5c,0x64,0x71,0x7c,0x83,0x7f,0x76,0x6d,0x68,
0x67,0x66,0x60,0x54,0x45,0x38,0x30,0x31,0x3d,0x53,0x6b,0x81,0x8e,0x95,0x99,0x99,
0x93,0x8c,0x7f,0x72,0x62,0x54,0x46,0x3d,0x39,0x39,0x38,0x36,0x35,0x35,0x38,0x3e,
0x46,0x57,0x65,0x72,0x7c,0x7c,0x74,0x68,0x5f,0x5b,0x5e,0x69,0x74,0x75,0x76,0x6f,
0x65,0x5f,0x5c,0x5d,0x5c,0x56,0x49,0x3b,0x30,0x2e,0x32,0x3a,0x40,0x44,0x44,0x40,
0x3a,0x35,0x33,0x32,0x33,0x30,0x30,0x35,0x3e,0x4c,0x5c,0x6a,0x76,0x81,0x88,0x8f,
0x99,0xa2,0xa7,0xa8,0xa9,0xa5,0xa0,0x9f,0x9e,0x9e,0x9f,0xa0,0x9f,0x9f,0x9f,0xa0,
0x9e,0xa0,0x9d,0x9b,0x9d,0x9f,0xa2,0xa4,0xa2,0x9d,0x95,0x87,0x76,0x68,0x5c,0x54,
0x4f,0x47,0x3f,0x39,0x38,0x3e,0x4e,0x65,0x7a,0x85,0x85,0x7a,0x69,0x5a,0x54,0x5c,
0x6a,0x77,0x7b,0x79,0x6e,0x63,0x5b,0x58,0x57,0x58,0x54,0x4b,0x3b,0x2e,0x26,0x27,
0x31,0x3d,0x44,0x46,0x3f,0x36,0x30,0x33,0x3e,0x52,0x68,0x7a,0x83,0x81,0x78,0x6d,
0x62,0x5a,0x52,0x4e,0x46,0x3b,0x36,0x39,0x44,0x57,0x6b,0x80,0x8d,0x97,0x99,0x9a,
0x99,0x93,0x83,0x75,0x63,0x59,0x5c,0x65,0x72,0x7c,0x7c,0x76,0x6c,0x65,0x61,0x61,
0x5c,0x52,0x43,0x36,0x30,0x38,0x4c,0x66,0x7c,0x89,0x86,0x79,0x68,0x5a,0x4e,0x4a,
0x44,0x3e,0x37,0x32,0x2d,0x2e,0x32,0x39,0x3e,0x40,0x40,0x3d,0x3a,0x36,0x31,0x32,
0x31,0x34,0x3a,0x3e,0x3d,0x38,0x34,0x36,0x3f,0x50,0x65,0x77,0x81,0x7f,0x75,0x6b,
0x62,0x5f,0x64,0x6c,0x74,0x79,0x7d,0x83,0x8a,0x94,0x9a,0x9b,0x94,0x85,0x72,0x5e,
0x4c,0x40,0x3c,0x3c,0x3b,0x39,0x35,0x33,0x35,0x37,0x3c,0x41,0x48,0x52,0x5f,0x71,
0x83,0x8f,0x97,0x9a,0x97,0x8f,0x80,0x72,0x65,0x58,0x4a,0x3d,0x34,0x31,0x37,0x42,
0x4e,0x5c,0x6a,0x79,0x85,0x8e,0x95,0x96,0x97,0x91,0x81,0x6f,0x5d,0x54,0x57,0x62,
0x6f,0x78,0x7d,0x7a,0x70,0x67,0x5f,0x5a,0x5a,0x52,0x43,0x37,0x30,0x34,0x46,0x60,
0x78,0x83,0x82,0x76,0x66,0x59,0x53,0x51,0x4e,0x47,0x3b,0x34,0x35,0x46,0x60,0x7a,
0x87,0x87,0x7a,0x6a,0x5f,0x5b,0x5f,0x6a,0x72,0x77,0x79,0x7e,0x86,0x93,0x9e,0xa1,
0x9a,0x8a,0x74,0x60,0x54,0x53,0x59,0x67,0x74,0x7d,0x7d,0x76,0x6c,0x62,0x58,0x52,
0x4c,0x47,0x3f,0x36,0x2f,0x2c,0x2c,0x33,0x3c,0x48,0x55,0x5f,0x67,0x6f,0x79,0x82,
0x8e,0x98,0x9a,0x94,0x86,0x73,0x61,0x57,0x58,0x62,0x70,0x7c,0x7f,0x7b,0x71,0x67,
0x60,0x5c,0x57,0x50,0x44,0x37,0x30,0x35,0x47,0x60,0x79,0x86,0x85,0x77,0x67,0x5a,
0x58,0x5c,0x64,0x6c,0x71,0x75,0x7a,0x83,0x8f,0x98,0xa4,0xa8,0xa6,0xa2,0x99,0x8e,
0x83,0x75,0x66,0x5c,0x53,0x4b,0x43,0x3d,0x35,0x34,0x39,0x46,0x54,0x6a,0x7a,0x86,
0x91,0x96,0x96,0x91,0x87,0x79,0x6b,0x5e,0x50,0x47,0x3f,0x39,0x35,0x34,0x3a,0x49,
0x5d,0x72,0x7f,0x82,0x78,0x6a,0x5f,0x5c,0x62,0x6f,0x7a,0x81,0x7b,0x6e,0x62,0x5c,
0x5c,0x5d,0x57,0x4f,0x3d,0x2f,0x2b,0x34,0x46,0x60,0x75,0x81,0x81,0x77,0x67,0x5a,
0x53,0x4e,0x4a,0x43,0x38,0x2e,0x2e,0x2e,0x31,0x36,0x3c,0x3d,0x3b,0x34,0x2e,0x30,
0x38,0x44,0x54,0x65,0x75,0x85,0x90,0x98,0x99,0x96,0x8f,0x83,0x77,0x6a,0x5b,0x4e,
0x41,0x38,0x36,0x3b,0x44,0x50,0x5f,0x6d,0x7a,0x85,0x8f,0x95,0x96,0x92,0x88,0x7b,
0x6a,0x5a,0x4e,0x47,0x40,0x3e,0x39,0x36,0x34,0x34,0x37,0x3c,0x3e,0x3c,0x36,0x30,
0x2c,0x2f,0x3c,0x51,0x65,0x75,0x7c,0x79,0x71,0x66,0x5c,0x55,0x4e,0x46,0x3d,0x35,
0x2e,0x29,0x2d,0x31,0x38,0x42,0x47,0x48,0x47,0x40,0x38,0x36,0x35,0x37,0x3b,0x3e,
0x3d,0x38,0x33,0x2f,0x31,0x3c,0x4c,0x60,0x70,0x79,0x77,0x70,0x65,0x5b,0x55,0x53,
0x4e,0x47,0x3c,0x32,0x2d,0x2d,0x30,0x37,0x3d,0x41,0x40,0x3d,0x38,0x35,0x36,0x37,
0x37,0x39,0x39,0x38,0x34,0x32,0x31,0x35,0x3e,0x4e,0x5f,0x71,0x7a,0x79,0x74,0x6c,
0x62,0x5a,0x51,0x4b,0x43,0x3b,0x34,0x35,0x3e,0x51,0x68,0x7e,0x8c,0x95,0x97,0x95,
0x92,0x8c,0x81,0x73,0x62,0x51,0x42,0x3b,0x37,0x36,0x36,0x34,0x2f,0x2c,0x2f,0x38,
0x46,0x57,0x67,0x72,0x78,0x76,0x70,0x6a,0x62,0x5a,0x54,0x4d,0x44,0x39,0x33,0x33,
0x3c,0x4e,0x65,0x7b,0x8c,0x94,0x95,0x94,0x8f,0x88,0x7f,0x72,0x62,0x53,0x45,0x3d,
0x37,0x38,0x38,0x37,0x36,0x34,0x32,0x3b,0x42,0x4b,0x57,0x62,0x6d,0x79,0x84,0x8f,
0x99,0xa0,0xa5,0xa7,0xa6,0xa4,0xa0,0x9e,0x9b,0x99,0x98,0x95,0x8d,0x81,0x6e,0x5f,
0x58,0x59,0x62,0x71,0x7f,0x83,0x7d,0x70,0x63,0x5a,0x56,0x53,0x4c,0x45,0x36,0x27,
0x1f,0x20,0x29,0x36,0x3f,0x40,0x3c,0x34,0x2c,0x2c,0x34,0x46,0x5d,0x72,0x7e,0x7e,
0x76,0x68,0x5c,0x5a,0x61,0x6f,0x7b,0x7d,0x77,0x6d,0x64,0x5f,0x5e,0x5e,0x5b,0x52,
0x42,0x32,0x2b,0x34,0x47,0x61,0x77,0x82,0x82,0x78,0x6a,0x5a,0x51,0x4b,0x45,0x3b,
0x37,0x30,0x2e,0x30,0x32,0x36,0x3f,0x47,0x4e,0x5a,0x67,0x75,0x82,0x8b,0x8f,0x95,
0x9b,0xa2,0xa4,0xa2,0x9f,0x9d,0x9a,0x98,0x97,0x99,0x96,0x8f,0x82,0x72,0x64,0x5c,
0x5a,0x5e,0x68,0x74,0x7e,0x86,0x8c,0x94,0x9a,0xa0,0xa2,0xa2,0x9f,0x9b,0x98,0x96,
0x95,0x98,0x9c,0x9f,0xa0,0xa2,0xa2,0xa2,0x9d,0x9d,0x9b,0x9d,0x9d,0x99,0x8c,0x7c,
0x6b,0x5c,0x56,0x58,0x62,0x70,0x77,0x77,0x72,0x6b,0x63,0x5e,0x59,0x54,0x4e,0x43,
0x38,0x32,0x38,0x46,0x5a,0x70,0x81,0x8d,0x92,0x92,0x8f,0x93,0x98,0x9d,0x9b,0x96,
0x8c,0x80,0x72,0x67,0x5b,0x53,0x4c,0x47,0x41,0x3a,0x34,0x32,0x32,0x33,0x35,0x38,
0x38,0x33,0x31,0x31,0x36,0x3e,0x4b,0x5b,0x6c,0x7d,0x89,0x95,0x9a,0x9b,0x97,0x8d,
0x7c,0x6c,0x5e,0x53,0x48,0x41,0x3a,0x37,0x39,0x41,0x4f,0x66,0x76,0x80,0x81,0x78,
0x69,0x5e,0x57,0x5a,0x65,0x70,0x76,0x79,0x7e,0x83,0x8c,0x98,0xa5,0xad,0xae,0xa8,
0x9f,0x99,0x94,0x95,0x9a,0x9c,0x98,0x8f,0x81,0x70,0x61,0x57,0x56,0x5e,0x6c,0x79,
0x7e,0x7a,0x71,0x69,0x62,0x61,0x67,0x71,0x79,0x7c,0x76,0x6d,0x65,0x5e,0x59,0x58,
0x56,0x50,0x45,0x35,0x2e,0x2b,0x2f,0x38,0x40,0x43,0x43,0x3e,0x38,0x36,0x34,0x34,
0x34,0x35,0x34,0x37,0x40,0x51,0x62,0x73,0x7a,0x79,0x70,0x65,0x5a,0x5a,0x60,0x6c,
0x77,0x7d,0x7a,0x74,0x68,0x5f,0x5c,0x5d,0x5b,0x53,0x46,0x37,0x2c,0x29,0x2b,0x30,
0x38,0x3f,0x42,0x40,0x3b,0x35,0x31,0x30,0x2e,0x2f,0x30,0x34,0x3d,0x4b,0x5d,0x6d,
0x78,0x7c,0x76,0x6d,0x64,0x5f,0x63,0x6c,0x77,0x7e,0x7d,0x75,0x6b,0x63,0x61,0x64,
0x6b,0x70,0x73,0x75,0x76,0x7c,0x88,0x93,0x9c,0xa0,0x9a,0x8b,0x77,0x62,0x50,0x45,
0x3e,0x39,0x37,0x38,0x3f,0x4c,0x5e,0x6f,0x7e,0x8b,0x91,0x94,0x96,0x93,0x8e,0x84,
0x76,0x65,0x56,0x4a,0x42,0x3b,0x3c,0x3e,0x44,0x4f,0x5c,0x6c,0x7c,0x86,0x8b,0x8e,
0x8f,0x95,0x9b,0xa2,0xa4,0xa4,0x9f,0x9b,0x97,0x98,0x9a,0x97,0x8f,0x81,0x6e,0x5e,
0x54,0x56,0x62,0x6f,0x7a,0x7f,0x79,0x70,0x66,0x60,0x62,0x66,0x70,0x79,0x7a,0x79,
0x70,0x65,0x5c,0x58,0x56,0x54,0x4d,0x42,0x36,0x2c,0x26,0x28,0x2f,0x3a,0x3f,0x46,
0x42,0x3b,0x37,0x34,0x33,0x34,0x35,0x36,0x36,0x36,0x36,0x37,0x36,0x33,0x33,0x34,
0x35,0x35,0x37,0x38,0x38,0x38,0x37,0x36,0x34,0x34,0x35,0x37,0x37,0x37,0x36,0x36,
// Line 18
0x36,0x36,0x38,0x39,0x38,0x36,0x34,0x33,0x33,0x33,0x34,0x36,0x37,0x37,0x37,0x37,
0x35,0x34,0x36,0x36,0x37,0x3c,0x3c,0x3a,0x34,0x31,0x31,0x39,0x40,0x43,0x3e,0x36,
0x2d,0x27,0x2b,0x35,0x3f,0x45,0x40,0x36,0x2b,0x25,0x29,0x37,0x44,0x49,0x41,0x34,
0x27,0x21,0x28,0x33,0x40,0x4a,0x47,0x38,0x2a,0x23,0x28,0x37,0x46,0x4e,0x4a,0x3b,
0x2a,0x21,0x26,0x34,0x44,0x4a,0x47,0x3a,0x2c,0x24,0x28,0x37,0x45,0x4b,0x46,0x38,
0x28,0x22,0x26,0x34,0x43,0x4b,0x46,0x38,0x2a,0x23,0x28,0x38,0x46,0x4b,0x48,0x39,
0x29,0x22,0x27,0x34,0x42,0x49,0x44,0x38,0x2a,0x26,0x2a,0x3a,0x47,0x4d,0x49,0x3d,
0x30,0x29,0x2a,0x36,0x44,0x4b,0x48,0x3a,0x2b,0x23,0x26,0x34,0x42,0x4b,0x49,0x3c,
0x2b,0x24,0x26,0x33,0x43,0x4a,0x48,0x3b,0x2b,0x22,0x25,0x33,0x44,0x4e,0x4c,0x40,
0x30,0x2e,0x34,0x43,0x55,0x5f,0x5d,0x51,0x42,0x39,0x3e,0x4d,0x5e,0x63,0x5f,0x4f,
0x3d,0x34,0x38,0x49,0x59,0x5f,0x59,0x4d,0x3f,0x37,0x3c,0x4b,0x5c,0x66,0x61,0x53,
0x41,0x38,0x3b,0x4a,0x5a,0x63,0x5f,0x53,0x44,0x3b,0x40,0x4e,0x5c,0x65,0x61,0x52,
0x42,0x3a,0x40,0x4b,0x5c,0x63,0x5e,0x51,0x42,0x3a,0x42,0x4e,0x59,0x60,0x5c,0x4f,
0x41,0x39,0x3d,0x4b,0x5a,0x61,0x5e,0x51,0x42,0x3b,0x41,0x4f,0x5c,0x65,0x61,0x53,
0x43,0x3b,0x3f,0x4c,0x5a,0x63,0x61,0x56,0x49,0x41,0x46,0x57,0x68,0x74,0x72,0x66,
0x58,0x4f,0x51,0x60,0x71,0x7a,0x78,0x6a,0x5a,0x51,0x55,0x64,0x74,0x7c,0x78,0x69,
0x59,0x50,0x54,0x63,0x71,0x79,0x76,0x69,0x59,0x51,0x54,0x62,0x71,0x7a,0x77,0x67,
0x5a,0x50,0x53,0x62,0x71,0x78,0x78,0x6c,0x5b,0x53,0x56,0x64,0x73,0x7c,0x77,0x68,
0x58,0x50,0x52,0x5f,0x6d,0x75,0x74,0x68,0x58,0x50,0x54,0x62,0x71,0x79,0x73,0x64,
0x54,0x4b,0x50,0x5f,0x6f,0x79,0x76,0x69,0x5a,0x54,0x5a,0x6b,0x7e,0x86,0x82,0x77,
0x67,0x60,0x64,0x73,0x82,0x8b,0x87,0x79,0x68,0x62,0x67,0x75,0x85,0x8e,0x8a,0x7e,
0x6d,0x64,0x69,0x79,0x89,0x90,0x8c,0x7f,0x71,0x6b,0x6e,0x7b,0x8a,0x91,0x8d,0x7f,
0x6f,0x69,0x6f,0x7e,0x8c,0x91,0x8d,0x80,0x6f,0x67,0x68,0x75,0x83,0x89,0x83,0x78,
0x6b,0x63,0x69,0x78,0x87,0x91,0x8a,0x7c,0x6f,0x68,0x6b,0x78,0x85,0x8c,0x89,0x7d,
0x6d,0x64,0x69,0x77,0x86,0x8e,0x8a,0x7d,0x6f,0x66,0x69,0x78,0x87,0x91,0x8e,0x81,
0x71,0x6c,0x71,0x82,0x93,0x9d,0x9b,0x90,0x82,0x7a,0x7d,0x8f,0x9d,0xa4,0xa2,0x96,
0x87,0x7f,0x81,0x8e,0x9e,0xa6,0xa1,0x93,0x83,0x79,0x7c,0x8c,0x9b,0xa4,0xa1,0x93,
0x83,0x7c,0x81,0x8f,0x9e,0xa4,0x9d,0x90,0x81,0x7a,0x7f,0x8d,0x9b,0xa2,0x9e,0x90,
0x81,0x7b,0x7f,0x8d,0x9d,0xa5,0xa1,0x94,0x84,0x7c,0x81,0x90,0x9c,0xa2,0x9c,0x90,
0x81,0x7b,0x7e,0x8d,0x9e,0xa5,0xa0,0x93,0x85,0x7e,0x82,0x8e,0x9b,0xa2,0x9d,0x93,
0x82,0x7c,0x7e,0x8b,0x9b,0xa2,0x9d,0x97,0x89,0x83,0x8a,0x9a,0xaa,0xb3,0xb2,0xa7,
0x9a,0x91,0x95,0xa0,0xae,0xb5,0xb1,0xa6,0x99,0x91,0x96,0xa3,0xaf,0xb5,0xb2,0xa7,
0x9a,0x91,0x95,0xa2,0xb1,0xb7,0xb1,0xa4,0x96,0x90,0x96,0xa3,0xb1,0xb7,0xb3,0xa5,
0x99,0x92,0x98,0xa6,0xb3,0xb7,0xb2,0xa5,0x97,0x8f,0x95,0xa3,0xb0,0xb5,0xae,0xa0,
0x91,0x8b,0x8f,0x9e,0xad,0xb6,0xb3,0xa7,0x99,0x91,0x97,0xa5,0xb2,0xb7,0xb0,0xa3,
0x96,0x8f,0x93,0xa1,0xb0,0xb6,0xb2,0xa6,0x9a,0x95,0x98,0xa2,0xad,0xb3,0xb2,0xab,
0xa1,0x9c,0x9e,0xa4,0xaa,0xaa,0xaa,0xa6,0xa0,0x9e,0x9e,0xa0,0xa7,0xab,0xaa,0xa9,
0xa5,0xa5,0xa4,0xa4,0xa4,0xa5,0xa7,0xa9,0xaa,0xa9,0xa5,0xa4,0xa5,0xa6,0xa7,0xa8,
0xa6,0xa5,0xa6,0xa5,0xa5,0xa4,0xa4,0xa5,0xa6,0xa5,0xa2,0xa2,0xa3,0xa4,0xa4,0xa2,
0xa2,0xa2,0xa5,0xa6,0xa4,0xa4,0xa3,0xa5,0xa7,0xa5,0xa3,0xa3,0xa6,0xa6,0xa4,0xa3,
0xa4,0xa4,0xa6,0xa5,0xa3,0xa2,0xa3,0xa5,0xa6,0xa6,0xa5,0xa4,0xa2,0xa0,0x9e,0x9b,
0x96,0x90,0x89,0x81,0x75,0x6b,0x61,0x59,0x51,0x49,0x42,0x3e,0x3b,0x3a,0x36,0x34,
0x33,0x33,0x36,0x39,0x38,0x3a,0x37,0x36,0x36,0x35,0x34,0x37,0x38,0x39,0x3a,0x3a,
0x3b,0x3d,0x3d,0x3d,0x3d,0x3d,0x3b,0x3a,0x37,0x36,0x35,0x37,0x38,0x38,0x39,0x3a,
0x3b,0x3c,0x3c,0x3d,0x3d,0x3c,0x39,0x38,0x37,0x37,0x35,0x36,0x35,0x34,0x34,0x36,
0x36,0x38,0x39,0x3a,0x3a,0x39,0x39,0x36,0x38,0x38,0x39,0x3a,0x3a,0x39,0x39,0x3a,
0x3a,0x3a,0x3b,0x3b,0x3b,0x39,0x37,0x37,0x37,0x38,0x37,0x36,0x33,0x33,0x34,0x34,
0x34,0x35,0x36,0x35,0x35,0x33,0x33,0x34,0x35,0x34,0x36,0x37,0x37,0x36,0x36,0x38,
0x39,0x3b,0x3c,0x3b,0x39,0x33,0x2f,0x33,0x3d,0x4f,0x67,0x7f,0x93,0x9f,0xa0,0x99,
0x8b,0x7e,0x6f,0x63,0x57,0x49,0x3a,0x2d,0x27,0x27,0x2f,0x37,0x3c,0x3f,0x3c,0x37,
0x32,0x2e,0x2f,0x31,0x33,0x33,0x33,0x34,0x36,0x39,0x3c,0x3a,0x36,0x36,0x36,0x3a,
0x3b,0x3c,0x3b,0x3a,0x38,0x37,0x36,0x37,0x37,0x39,0x38,0x35,0x33,0x33,0x36,0x3b,
0x3e,0x3b,0x36,0x33,0x33,0x37,0x40,0x48,0x4b,0x49,0x3f,0x37,0x37,0x41,0x51,0x60,
0x68,0x61,0x51,0x44,0x41,0x4d,0x64,0x79,0x82,0x7a,0x64,0x4f,0x48,0x56,0x71,0x8f,
0x9b,0x90,0x73,0x56,0x4a,0x5a,0x7c,0x9b,0xa7,0x9a,0x79,0x59,0x4c,0x5b,0x7b,0x9a,
0xa4,0x93,0x71,0x51,0x44,0x50,0x70,0x87,0x8c,0x80,0x64,0x4b,0x44,0x4d,0x61,0x73,
0x75,0x68,0x53,0x42,0x3b,0x40,0x4c,0x54,0x50,0x4c,0x40,0x37,0x35,0x36,0x3a,0x40,
0x40,0x3c,0x3a,0x38,0x37,0x34,0x34,0x32,0x30,0x31,0x33,0x36,0x36,0x36,0x36,0x38,
0x38,0x3a,0x3a,0x3b,0x3b,0x3b,0x38,0x37,0x36,0x34,0x32,0x33,0x34,0x35,0x34,0x36,
0x35,0x35,0x36,0x36,0x37,0x3a,0x3a,0x3a,0x39,0x37,0x34,0x34,0x34,0x34,0x33,0x34,
0x35,0x34,0x38,0x39,0x3a,0x3b,0x3a,0x37,0x37,0x36,0x36,0x38,0x36,0x35,0x34,0x33,
0x33,0x35,0x36,0x38,0x37,0x35,0x33,0x33,0x36,0x37,0x37,0x38,0x36,0x35,0x36,0x38,
0x38,0x38,0x36,0x34,0x33,0x34,0x36,0x38,0x3b,0x3d,0x3f,0x46,0x4c,0x55,0x63,0x71,
0x81,0x8f,0x9b,0xa8,0xb3,0xba,0xbc,0xbe,0xbf,0xc1,0xc1,0xbf,0xbc,0xbd,0xbd,0xbc,
0xbd,0xbf,0xc1,0xc2,0xc2,0xbf,0xbc,0xba,0xb8,0xb8,0xb9,0xbb,0xbc,0xbb,0xba,0xba,
0xbb,0xbc,0xbe,0xbe,0xbf,0xbf,0xbe,0xbf,0xbe,0xbc,0xbc,0xbd,0xbc,0xbe,0xbe,0xbe,
0xbb,0xbb,0xbb,0xbc,0xbf,0xc0,0xbf,0xbf,0xbc,0xb9,0xb9,0xba,0xbb,0xbd,0xbc,0xb9,
0xb8,0xb8,0xba,0xbb,0xbb,0xbb,0xbb,0xbc,0xbb,0xb9,0xba,0xbb,0xbb,0xbb,0xba,0xbb,
0xbc,0xbc,0xbb,0xbb,0xbb,0xbc,0xbc,0xbc,0xbc,0xbc,0xbd,0xbc,0xbb,0xbb,0xbb,0xbc,
0xbd,0xbc,0xbb,0xb9,0xb9,0xb8,0xb9,0xbb,0xbc,0xbd,0xbc,0xba,0xb9,0xbb,0xbd,0xbe,
0xc0,0xbe,0xbc,0xbb,0xbb,0xbc,0xbc,0xbd,0xbc,0xbb,0xba,0xbb,0xbb,0xbc,0xbb,0xba,
0xba,0xb8,0xb8,0xb9,0xba,0xbb,0xbd,0xbd,0xbc,0xbc,0xbb,0xbc,0xbc,0xbc,0xbd,0xbd,
0xbc,0xba,0xb7,0xb8,0xb9,0xba,0xbc,0xbe,0xbe,0xbe,0xbd,0xbc,0xbc,0xbd,0xbe,0xbf,
0xbd,0xbc,0xba,0xbb,0xb9,0xba,0xbd,0xbf,0xc0,0xbf,0xbe,0xbd,0xbf,0xbe,0xbd,0xbc,
0xbb,0xb9,0xb9,0xbb,0xbc,0xbb,0xb9,0xb9,0xb9,0xbb,0xbc,0xbe,0xbf,0xbf,0xbc,0xbc,
0xbb,0xbc,0xbd,0xbf,0xbf,0xc1,0xbe,0xbc,0xbb,0xbb,0xbb,0xbb,0xbc,0xbd,0xbd,0xbc,
0xbb,0xbb,0xbc,0xbe,0xbe,0xbb,0xbd,0xbb,0xba,0xb8,0xb8,0xb9,0xbc,0xbb,0xb9,0xba,
0xbb,0xba,0xba,0xb9,0xb9,0xbb,0xba,0xb9,0xb7,0xb7,0xb7,0xb9,0xba,0xba,0xba,0xba,
0xb9,0xba,0xbc,0xbd,0xbe,0xbe,0xbc,0xbc,0xbd,0xbf,0xbf,0xbf,0xbd,0xbd,0xbc,0xbc,
0xbc,0xbd,0xbd,0xbc,0xba,0xbb,0xbb,0xbd,0xbf,0xbf,0xbd,0xbd,0xbc,0xbd,0xbd,0xbe,
0xbf,0xbd,0xbd,0xbc,0xbc,0xbd,0xbc,0xbc,0xbd,0xbd,0xbb,0xba,0xb7,0xb8,0xbb,0xbc,
0xbe,0xbd,0xbe,0xc0,0xc2,0xc2,0xc1,0xc1,0xc1,0xbe,0xbb,0xb9,0xb8,0xb9,0xba,0xbb,
0xbb,0xbc,0xbc,0xbe,0xbe,0xbd,0xbd,0xbe,0xbf,0xbe,0xbd,0xbd,0xbd,0xbc,0xbc,0xbe,
0xbf,0xbf,0xbc,0xbb,0xbd,0xbc,0xbc,0xbc,0xbc,0xbc,0xbb,0xbb,0xbc,0xbd,0xbf,0xbf,
0xbd,0xbd,0xbc,0xbc,0xbc,0xbc,0xbc,0xbf,0xbf,0xbd,0xbc,0xbb,0xbb,0xbd,0xbf,0xc1,
0xc0,0xbf,0xbe,0xbd,0xbd,0xbd,0xbe,0xbf,0xbe,0xbc,0xbc,0xbc,0xbc,0xb9,0xbc,0xbc,
0xbd,0xbd,0xbd,0xbd,0xc1,0xbf,0xbc,0xbc,0xbc,0xbc,0xbd,0xbb,0xba,0xbb,0xbb,0xbc,
0xbd,0xbc,0xbd,0xbe,0xbf,0xbe,0xbd,0xbe,0xbd,0xbc,0xbb,0xb9,0xb8,0xb8,0xb8,0xbb,
0xbc,0xbc,0xbd,0xbe,0xbd,0xbd,0xbd,0xbe,0xbf,0xbe,0xbf,0xbf,0xbd,0xbc,0xbb,0xbc,
0xbd,0xbc,0xbb,0xbd,0xbe,0xbf,0xbe,0xbc,0xbc,0xbc,0xbd,0xbe,0xbc,0xbc,0xbb,0xba,
0xb9,0xbb,0xbc,0xbe,0xbd,0xbd,0xbd,0xbd,0xbc,0xbb,0xbb,0xbb,0xbc,0xbd,0xbd,0xbe,
0xbf,0xbe,0xbd,0xbd,0xbc,0xbd,0xbe,0xbd,0xbc,0xbb,0xbb,0xbb,0xb9,0xbb,0xbb,0xbd,
0xbd,0xbc,0xba,0xbb,0xbc,0xbe,0xbf,0xc0,0xbf,0xbd,0xba,0xb8,0xb9,0xba,0xbb,0xbb,
0xbc,0xbb,0xbb,0xbc,0xbd,0xbc,0xbe,0xbf,0xbf,0xc0,0xbf,0xbf,0xc0,0xbf,0xbd,0xbb,
0xba,0xba,0xba,0xb9,0xb8,0xb7,0xb8,0xb9,0xba,0xb9,0xb6,0xb1,0xab,0xa2,0x98,0x8b,
0x7b,0x6d,0x62,0x57,0x4b,0x42,0x3b,0x37,0x36,0x36,0x35,0x36,0x38,0x39,0x38,0x39,
// Line 19
0x38,0x35,0x32,0x32,0x34,0x37,0x39,0x3b,0x3b,0x3b,0x39,0x39,0x3a,0x3c,0x3a,0x38,
0x36,0x34,0x33,0x36,0x38,0x3a,0x3d,0x41,0x45,0x4b,0x52,0x58,0x5b,0x5c,0x5f,0x61,
0x62,0x60,0x5f,0x60,0x5f,0x5f,0x5f,0x5f,0x5e,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x5d,
0x61,0x5f,0x5d,0x60,0x62,0x61,0x63,0x60,0x60,0x62,0x63,0x64,0x65,0x62,0x60,0x61,
0x61,0x63,0x64,0x65,0x64,0x64,0x64,0x63,0x60,0x60,0x61,0x63,0x63,0x61,0x5f,0x5f,
0x5d,0x5d,0x5e,0x5f,0x62,0x63,0x63,0x61,0x5f,0x5f,0x60,0x61,0x62,0x61,0x5f,0x5f,
0x5d,0x5c,0x5c,0x5d,0x60,0x61,0x60,0x60,0x60,0x60,0x60,0x61,0x63,0x64,0x63,0x64,
0x62,0x60,0x61,0x60,0x60,0x60,0x61,0x60,0x61,0x61,0x60,0x5f,0x5d,0x5e,0x5f,0x61,
0x61,0x61,0x61,0x63,0x63,0x66,0x66,0x66,0x66,0x64,0x61,0x60,0x60,0x62,0x60,0x65,
0x64,0x63,0x63,0x65,0x67,0x69,0x68,0x64,0x65,0x65,0x65,0x65,0x66,0x65,0x66,0x65,
0x64,0x64,0x64,0x64,0x64,0x65,0x66,0x66,0x68,0x6a,0x6a,0x6c,0x6c,0x6a,0x6b,0x6c,
0x6c,0x6c,0x6c,0x6c,0x6d,0x6c,0x6a,0x6b,0x6d,0x6e,0x6d,0x70,0x70,0x72,0x74,0x74,
0x74,0x73,0x73,0x72,0x72,0x73,0x76,0x78,0x78,0x77,0x77,0x79,0x7b,0x7e,0x81,0x83,
0x83,0x83,0x83,0x85,0x86,0x86,0x87,0x88,0x88,0x89,0x89,0x8a,0x89,0x89,0x8a,0x8c,
0x8c,0x8d,0x8c,0x8e,0x90,0x90,0x90,0x92,0x93,0x92,0x93,0x91,0x91,0x8f,0x8c,0x8a,
0x87,0x84,0x84,0x86,0x89,0x86,0x84,0x82,0x80,0x7e,0x7c,0x7a,0x77,0x73,0x6e,0x69,
0x63,0x5f,0x5b,0x58,0x54,0x51,0x4c,0x48,0x42,0x3e,0x3d,0x3b,0x37,0x34,0x2f,0x2c,
0x2b,0x28,0x26,0x21,0x25,0x25,0x26,0x28,0x2a,0x2a,0x2f,0x33,0x36,0x3c,0x40,0x47,
0x4e,0x52,0x55,0x5a,0x5f,0x65,0x6a,0x72,0x76,0x7b,0x80,0x86,0x8a,0x8f,0x92,0x96,
0x9a,0x9b,0x9a,0x95,0x8e,0x89,0x86,0x82,0x7c,0x77,0x72,0x6c,0x63,0x5c,0x54,0x4d,
0x49,0x43,0x39,0x34,0x30,0x2c,0x2b,0x2a,0x29,0x2a,0x2b,0x30,0x35,0x3a,0x3f,0x45,
0x4d,0x55,0x5d,0x66,0x6f,0x78,0x81,0x88,0x8c,0x8e,0x8e,0x90,0x92,0x90,0x8a,0x83,
0x7c,0x72,0x68,0x60,0x59,0x51,0x49,0x43,0x3b,0x36,0x32,0x30,0x31,0x32,0x33,0x38,
0x3a,0x40,0x46,0x4f,0x58,0x61,0x6c,0x78,0x80,0x89,0x8c,0x8f,0x90,0x8f,0x8a,0x83,
0x79,0x71,0x6a,0x5e,0x52,0x47,0x3e,0x38,0x33,0x30,0x2e,0x2f,0x31,0x35,0x39,0x43,
0x4c,0x58,0x66,0x73,0x7d,0x86,0x8c,0x90,0x8f,0x8a,0x81,0x79,0x71,0x68,0x59,0x50,
0x44,0x3a,0x36,0x34,0x32,0x36,0x38,0x3c,0x44,0x4e,0x59,0x66,0x75,0x81,0x89,0x8f,
0x90,0x8d,0x84,0x79,0x6e,0x63,0x58,0x4d,0x43,0x3a,0x34,0x34,0x34,0x38,0x3f,0x49,
0x54,0x62,0x6f,0x7b,0x85,0x8c,0x8c,0x89,0x83,0x7a,0x6e,0x61,0x54,0x48,0x3e,0x36,
0x30,0x30,0x34,0x3c,0x47,0x54,0x63,0x73,0x81,0x89,0x8e,0x90,0x8d,0x84,0x78,0x68,
0x5a,0x4e,0x41,0x38,0x34,0x32,0x35,0x41,0x51,0x63,0x71,0x81,0x88,0x8b,0x8b,0x85,
0x79,0x70,0x60,0x54,0x47,0x3c,0x32,0x2f,0x32,0x3b,0x49,0x5b,0x6c,0x79,0x87,0x8a,
0x84,0x7f,0x75,0x6a,0x5d,0x4e,0x42,0x39,0x32,0x32,0x39,0x47,0x59,0x6c,0x7c,0x87,
0x89,0x86,0x7d,0x71,0x66,0x59,0x4a,0x3e,0x36,0x34,0x3a,0x47,0x59,0x6e,0x7d,0x88,
0x8b,0x87,0x7d,0x70,0x63,0x54,0x44,0x38,0x30,0x2f,0x36,0x44,0x56,0x6b,0x7b,0x86,
0x88,0x82,0x76,0x68,0x59,0x4c,0x40,0x39,0x38,0x3c,0x48,0x5a,0x6b,0x7b,0x83,0x83,
0x81,0x76,0x66,0x56,0x48,0x40,0x3c,0x3e,0x47,0x54,0x6b,0x7b,0x83,0x84,0x7d,0x70,
0x66,0x56,0x47,0x3f,0x3a,0x3b,0x43,0x50,0x60,0x71,0x7d,0x83,0x7c,0x6e,0x5d,0x4e,
0x44,0x40,0x40,0x45,0x50,0x5f,0x71,0x7e,0x83,0x7f,0x76,0x67,0x55,0x44,0x3a,0x3a,
0x42,0x4c,0x59,0x68,0x76,0x7e,0x81,0x77,0x66,0x56,0x49,0x44,0x43,0x4b,0x53,0x61,
0x6e,0x77,0x78,0x74,0x6a,0x5d,0x50,0x45,0x40,0x43,0x4e,0x5d,0x6b,0x76,0x78,0x76,
0x6d,0x61,0x53,0x4a,0x46,0x4a,0x53,0x5f,0x69,0x71,0x74,0x72,0x6c,0x5f,0x53,0x4e,
0x4c,0x50,0x57,0x61,0x6b,0x73,0x72,0x6d,0x63,0x58,0x4f,0x4a,0x4b,0x52,0x5c,0x68,
0x6d,0x6d,0x6a,0x64,0x5d,0x57,0x54,0x56,0x5c,0x65,0x6c,0x6e,0x6c,0x68,0x60,0x59,
0x52,0x4e,0x51,0x56,0x5d,0x65,0x6a,0x69,0x64,0x5d,0x57,0x53,0x55,0x59,0x5b,0x61,
0x64,0x64,0x61,0x5e,0x58,0x57,0x56,0x58,0x5c,0x60,0x65,0x68,0x64,0x5f,0x5b,0x57,
0x59,0x5f,0x66,0x6a,0x6b,0x68,0x61,0x5a,0x55,0x53,0x58,0x62,0x6a,0x6e,0x6e,0x69,
0x5f,0x58,0x52,0x52,0x56,0x5f,0x66,0x6b,0x6b,0x64,0x59,0x51,0x4c,0x4d,0x58,0x65,
0x70,0x74,0x6d,0x60,0x53,0x4a,0x49,0x51,0x61,0x70,0x78,0x76,0x6b,0x5a,0x4a,0x42,
0x45,0x55,0x65,0x73,0x78,0x72,0x60,0x50,0x46,0x48,0x54,0x66,0x76,0x7d,0x77,0x66,
0x4f,0x3f,0x3c,0x48,0x5e,0x73,0x80,0x7f,0x6e,0x56,0x41,0x3e,0x4a,0x60,0x78,0x83,
0x7e,0x6a,0x51,0x3d,0x3c,0x4a,0x61,0x7b,0x85,0x7c,0x65,0x49,0x39,0x3c,0x50,0x6c,
0x80,0x86,0x7a,0x60,0x45,0x37,0x3e,0x56,0x74,0x85,0x84,0x6f,0x53,0x3c,0x38,0x49,
0x66,0x80,0x8a,0x7e,0x60,0x43,0x36,0x42,0x5c,0x79,0x8b,0x85,0x6a,0x4d,0x38,0x3b,
0x53,0x71,0x84,0x87,0x73,0x55,0x3c,0x39,0x4a,0x67,0x7e,0x84,0x75,0x58,0x3f,0x38,
0x4a,0x68,0x80,0x87,0x76,0x59,0x40,0x39,0x47,0x64,0x7d,0x84,0x74,0x56,0x3e,0x39,
0x49,0x64,0x7a,0x80,0x6f,0x52,0x3d,0x3b,0x4e,0x6c,0x80,0x80,0x69,0x4e,0x3e,0x42,
0x5b,0x76,0x83,0x7c,0x63,0x47,0x3d,0x46,0x5f,0x78,0x80,0x72,0x58,0x44,0x42,0x55,
0x6e,0x7e,0x7c,0x68,0x4f,0x41,0x49,0x5f,0x76,0x7f,0x73,0x5d,0x4a,0x47,0x56,0x6e,
0x7c,0x77,0x63,0x4e,0x45,0x4e,0x63,0x76,0x78,0x6d,0x56,0x47,0x4a,0x5c,0x6f,0x78,
0x6d,0x5b,0x4d,0x4b,0x57,0x68,0x74,0x70,0x60,0x51,0x4b,0x54,0x64,0x6f,0x6f,0x64,
0x57,0x50,0x57,0x65,0x71,0x72,0x68,0x5b,0x53,0x56,0x62,0x6f,0x73,0x69,0x5b,0x53,
0x58,0x62,0x6e,0x71,0x6a,0x5c,0x51,0x50,0x5b,0x68,0x6e,0x6a,0x5e,0x54,0x52,0x5b,
0x65,0x6c,0x6a,0x62,0x59,0x56,0x5a,0x62,0x66,0x64,0x5d,0x58,0x58,0x5d,0x63,0x66,
0x65,0x60,0x5d,0x5f,0x64,0x6c,0x6e,0x6a,0x63,0x5e,0x5e,0x63,0x67,0x68,0x66,0x63,
0x5f,0x5d,0x60,0x64,0x67,0x65,0x60,0x5d,0x5d,0x5f,0x60,0x64,0x62,0x5e,0x5c,0x5c,
0x5e,0x62,0x63,0x62,0x60,0x5f,0x60,0x63,0x64,0x61,0x5d,0x5c,0x5b,0x5c,0x5f,0x62,
0x63,0x62,0x5f,0x5d,0x60,0x64,0x66,0x62,0x60,0x5c,0x59,0x5c,0x60,0x61,0x65,0x62,
0x5f,0x5f,0x60,0x63,0x64,0x65,0x63,0x60,0x5f,0x60,0x60,0x63,0x62,0x60,0x5f,0x5f,
0x5f,0x62,0x60,0x5f,0x5f,0x5e,0x5d,0x60,0x63,0x64,0x64,0x63,0x63,0x62,0x60,0x60,
0x61,0x62,0x61,0x60,0x5e,0x5f,0x5f,0x62,0x63,0x63,0x63,0x63,0x62,0x60,0x5f,0x60,
0x60,0x60,0x5f,0x5d,0x5d,0x5c,0x59,0x5d,0x5d,0x5c,0x5c,0x5c,0x5c,0x5e,0x60,0x60,
0x61,0x61,0x63,0x63,0x63,0x63,0x64,0x65,0x63,0x60,0x5d,0x5d,0x5f,0x61,0x63,0x62,
0x60,0x60,0x60,0x60,0x61,0x62,0x61,0x62,0x5f,0x5d,0x5d,0x5d,0x5c,0x5d,0x5e,0x5f,
0x5f,0x60,0x60,0x61,0x5f,0x5e,0x5f,0x60,0x62,0x62,0x60,0x60,0x60,0x61,0x61,0x62,
0x63,0x63,0x62,0x61,0x5f,0x5f,0x60,0x62,0x60,0x60,0x60,0x62,0x60,0x60,0x5f,0x60,
0x61,0x61,0x5f,0x5f,0x5c,0x5c,0x5e,0x5f,0x60,0x60,0x5f,0x5e,0x5e,0x5e,0x60,0x61,
0x62,0x61,0x61,0x60,0x60,0x61,0x63,0x64,0x61,0x60,0x5d,0x5c,0x5b,0x5c,0x5c,0x5d,
0x5d,0x5e,0x5e,0x5f,0x5e,0x60,0x61,0x60,0x5d,0x5c,0x5d,0x5d,0x61,0x62,0x60,0x60,
0x60,0x5f,0x60,0x61,0x63,0x62,0x5f,0x5c,0x5c,0x5e,0x60,0x60,0x65,0x64,0x61,0x61,
0x61,0x62,0x65,0x66,0x63,0x62,0x61,0x63,0x60,0x63,0x62,0x62,0x63,0x62,0x60,0x5f,
0x5e,0x5d,0x5f,0x5f,0x5f,0x5d,0x5d,0x5d,0x5f,0x5f,0x5f,0x60,0x5d,0x5c,0x5b,0x5d,
0x5e,0x5f,0x60,0x60,0x5f,0x5d,0x5d,0x5f,0x62,0x64,0x64,0x63,0x60,0x5f,0x5e,0x5e,
0x5e,0x60,0x61,0x64,0x63,0x60,0x5f,0x5f,0x61,0x61,0x61,0x63,0x61,0x5f,0x5e,0x5e,
0x60,0x61,0x62,0x63,0x64,0x63,0x60,0x5f,0x5f,0x5f,0x60,0x61,0x62,0x60,0x60,0x60,
0x5f,0x60,0x61,0x62,0x63,0x61,0x60,0x5f,0x60,0x61,0x60,0x63,0x62,0x60,0x5f,0x5f,
0x5f,0x5f,0x5e,0x5e,0x60,0x60,0x63,0x62,0x62,0x60,0x60,0x61,0x62,0x63,0x65,0x63,
0x60,0x5f,0x5e,0x5e,0x60,0x5f,0x5f,0x60,0x5e,0x5d,0x5d,0x5e,0x5f,0x5f,0x5f,0x5f,
0x5f,0x5d,0x5d,0x5d,0x5f,0x5e,0x5d,0x5d,0x5d,0x5c,0x5d,0x5f,0x5f,0x5f,0x5e,0x5c,
0x59,0x58,0x56,0x52,0x51,0x4b,0x44,0x40,0x3b,0x38,0x36,0x34,0x32,0x32,0x32,0x32,
0x32,0x32,0x33,0x35,0x37,0x38,0x38,0x39,0x38,0x38,0x38,0x38,0x36,0x35,0x33,0x35,
0x36,0x36,0x38,0x39,0x39,0x38,0x36,0x36,0x36,0x37,0x38,0x36,0x35,0x34,0x32,0x30,
0x30,0x31,0x32,0x35,0x35,0x36,0x36,0x36,0x35,0x35,0x36,0x35,0x33,0x32,0x32,0x30,
0x33,0x34,0x33,0x35,0x36,0x35,0x35,0x35,0x35,0x34,0x33,0x32,0x32,0x35,0x35,0x35,
0x36,0x36,0x36,0x36,0x33,0x31,0x2f,0x2f,0x2e,0x31,0x33,0x35,0x35,0x36,0x36,0x38,
0x39,0x39,0x38,0x36,0x34,0x33,0x34,0x34,0x33,0x32,0x30,0x2f,0x30,0x30,0x33,0x35,
// Line 20
0x38,0x38,0x39,0x3a,0x3a,0x39,0x37,0x37,0x38,0x38,0x39,0x37,0x34,0x33,0x32,0x32,
0x33,0x35,0x36,0x39,0x39,0x38,0x36,0x36,0x35,0x35,0x37,0x3a,0x3e,0x47,0x51,0x5c,
0x69,0x77,0x86,0x98,0xa7,0xb3,0xb9,0xbc,0xbe,0xc0,0xc3,0xc4,0xc4,0xc2,0xc0,0xbc,
0xbb,0xbb,0xbc,0xbe,0xbe,0xbb,0xba,0xb9,0xba,0xbb,0xbe,0xbf,0xbf,0xbe,0xbe,0xbf,
0xbe,0xbe,0xbc,0xbd,0xbc,0xbb,0xbb,0xbb,0xbc,0xbd,0xbd,0xbe,0xbc,0xbb,0xbb,0xbc,
0xbd,0xbe,0xbe,0xc0,0xc0,0xbf,0xc0,0xbe,0xbe,0xbf,0xbf,0xbe,0xbe,0xbe,0xbe,0xbd,
0xbe,0xbe,0xbe,0xbe,0xbd,0xbc,0xbc,0xbc,0xba,0xbc,0xbc,0xbc,0xbd,0xbc,0xbb,0xbc,
0xbc,0xbe,0xbe,0xbe,0xbd,0xbd,0xbd,0xbf,0xbf,0xbe,0xbe,0xbc,0xbd,0xbc,0xbd,0xbd,
0xbc,0xbb,0xbc,0xbd,0xbf,0xbe,0xbe,0xbe,0xbd,0xbe,0xbe,0xbc,0xc0,0xbf,0xbe,0xbd,
0xbc,0xbd,0xbd,0xbd,0xbd,0xbe,0xbd,0xbd,0xba,0xb8,0xb8,0xba,0xba,0xb9,0xba,0xba,
0xb9,0xb8,0xba,0xbb,0xbc,0xbd,0xbd,0xbc,0xbd,0xbd,0xbd,0xbe,0xbf,0xbf,0xbe,0xbe,
0xbd,0xbe,0xbf,0xbe,0xbc,0xbd,0xbd,0xbd,0xbc,0xba,0xba,0xbc,0xbc,0xbd,0xbe,0xbf,
0xbd,0xbc,0xbc,0xbb,0xb7,0xb5,0xb1,0xaa,0xa6,0xa0,0x99,0x92,0x8a,0x82,0x7d,0x79,
0x76,0x74,0x72,0x71,0x72,0x71,0x6f,0x6f,0x6f,0x6f,0x6e,0x6e,0x6b,0x6b,0x6c,0x6d,
0x6e,0x6f,0x70,0x71,0x70,0x6e,0x6e,0x71,0x73,0x74,0x71,0x73,0x70,0x6e,0x6e,0x6f,
0x70,0x73,0x72,0x6f,0x6e,0x6d,0x6e,0x70,0x72,0x73,0x74,0x75,0x71,0x6e,0x6e,0x6f,
0x70,0x71,0x70,0x6f,0x6e,0x6c,0x6b,0x6d,0x6f,0x73,0x72,0x72,0x73,0x77,0x7e,0x85,
0x87,0x8e,0x90,0x92,0x94,0x96,0x97,0x9a,0x99,0x96,0x94,0x93,0x91,0x91,0x8e,0x8b,
0x85,0x80,0x7c,0x78,0x73,0x6c,0x66,0x63,0x5d,0x58,0x55,0x53,0x51,0x50,0x4c,0x49,
0x46,0x45,0x45,0x47,0x48,0x48,0x47,0x49,0x4c,0x50,0x55,0x58,0x5c,0x63,0x64,0x64,
0x6a,0x71,0x78,0x7c,0x80,0x84,0x88,0x8b,0x8f,0x92,0x97,0x98,0x96,0x96,0x96,0x94,
0x94,0x94,0x94,0x94,0x93,0x91,0x8e,0x8b,0x87,0x85,0x84,0x80,0x7b,0x76,0x70,0x6b,
0x68,0x64,0x5f,0x5d,0x58,0x54,0x50,0x4c,0x4a,0x49,0x49,0x48,0x47,0x48,0x47,0x45,
0x49,0x4a,0x4a,0x4d,0x50,0x55,0x5a,0x5e,0x60,0x66,0x6d,0x74,0x7a,0x7e,0x80,0x85,
0x89,0x8b,0x8c,0x8e,0x90,0x93,0x94,0x95,0x96,0x96,0x96,0x95,0x94,0x93,0x92,0x92,
0x8e,0x8b,0x86,0x84,0x80,0x7b,0x78,0x73,0x6e,0x6b,0x65,0x5f,0x5d,0x57,0x52,0x51,
0x4e,0x4d,0x4c,0x4a,0x48,0x48,0x49,0x4a,0x4a,0x4c,0x4e,0x50,0x52,0x52,0x55,0x59,
0x5e,0x5f,0x63,0x69,0x6e,0x74,0x7a,0x80,0x86,0x8a,0x8d,0x92,0x96,0x99,0x98,0x9a,
0x9a,0x9b,0x99,0x97,0x96,0x96,0x96,0x94,0x91,0x8c,0x87,0x85,0x85,0x82,0x7b,0x77,
0x70,0x6c,0x69,0x66,0x63,0x61,0x5d,0x57,0x51,0x4c,0x4b,0x49,0x4b,0x49,0x47,0x46,
0x45,0x45,0x4a,0x4f,0x55,0x5d,0x62,0x67,0x6b,0x6c,0x6b,0x6c,0x6e,0x71,0x71,0x70,
0x6d,0x6b,0x6d,0x6f,0x70,0x72,0x75,0x75,0x75,0x74,0x73,0x72,0x73,0x71,0x71,0x70,
0x6f,0x70,0x70,0x70,0x71,0x73,0x71,0x6f,0x70,0x71,0x70,0x72,0x72,0x70,0x6f,0x6f,
0x6f,0x70,0x71,0x72,0x70,0x6f,0x6d,0x6c,0x6f,0x70,0x70,0x71,0x70,0x6f,0x6f,0x70,
0x71,0x73,0x71,0x70,0x6f,0x6e,0x6d,0x6e,0x6e,0x6f,0x70,0x73,0x73,0x73,0x72,0x73,
0x73,0x73,0x70,0x6e,0x6a,0x63,0x5d,0x59,0x56,0x55,0x52,0x55,0x57,0x5c,0x64,0x6e,
0x78,0x82,0x8b,0x91,0x94,0x94,0x8f,0x8b,0x84,0x7b,0x71,0x66,0x5d,0x55,0x4d,0x48,
0x47,0x49,0x4d,0x53,0x59,0x61,0x6b,0x77,0x82,0x8a,0x91,0x94,0x92,0x8e,0x89,0x84,
0x7a,0x70,0x64,0x5b,0x54,0x4e,0x49,0x46,0x47,0x4c,0x53,0x58,0x5d,0x67,0x74,0x80,
0x89,0x8e,0x91,0x90,0x90,0x87,0x7e,0x76,0x6f,0x66,0x5f,0x54,0x4b,0x48,0x49,0x4c,
0x51,0x54,0x58,0x63,0x6d,0x77,0x80,0x8a,0x91,0x95,0x94,0x8e,0x86,0x7f,0x75,0x6b,
0x62,0x57,0x4e,0x4a,0x47,0x46,0x48,0x4d,0x55,0x5d,0x64,0x6d,0x75,0x7e,0x89,0x8d,
0x92,0x91,0x8b,0x89,0x81,0x77,0x6c,0x63,0x5a,0x54,0x4e,0x4a,0x49,0x4a,0x4d,0x51,
0x5a,0x64,0x70,0x7b,0x84,0x8c,0x92,0x94,0x91,0x8d,0x85,0x7c,0x73,0x68,0x5f,0x57,
0x4f,0x4a,0x48,0x4b,0x4e,0x53,0x5a,0x5f,0x67,0x70,0x79,0x81,0x85,0x86,0x85,0x84,
0x80,0x7b,0x77,0x75,0x70,0x6e,0x6b,0x6c,0x6d,0x6e,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,
0x6e,0x6d,0x6d,0x6e,0x6f,0x70,0x71,0x71,0x70,0x71,0x6f,0x6c,0x6e,0x6e,0x6d,0x6f,
0x6e,0x6c,0x6d,0x6d,0x6e,0x6f,0x6e,0x6f,0x6d,0x6f,0x6f,0x6f,0x70,0x71,0x6e,0x73,
0x71,0x70,0x71,0x70,0x70,0x6f,0x6e,0x6f,0x71,0x72,0x71,0x71,0x71,0x71,0x73,0x75,
0x75,0x76,0x73,0x70,0x6c,0x6b,0x69,0x67,0x64,0x62,0x63,0x68,0x6f,0x77,0x7e,0x82,
0x82,0x7e,0x76,0x6c,0x63,0x5d,0x57,0x53,0x54,0x5a,0x63,0x71,0x7e,0x87,0x8b,0x89,
0x83,0x79,0x6d,0x5e,0x52,0x4f,0x50,0x55,0x5e,0x6b,0x7a,0x87,0x8b,0x8a,0x84,0x7b,
0x70,0x67,0x5d,0x55,0x51,0x51,0x58,0x67,0x77,0x84,0x8c,0x8e,0x89,0x7e,0x72,0x67,
0x5e,0x58,0x52,0x51,0x56,0x60,0x6f,0x7c,0x88,0x8d,0x8a,0x80,0x75,0x6a,0x5f,0x57,
0x50,0x4f,0x52,0x5c,0x69,0x77,0x82,0x8b,0x8b,0x85,0x7b,0x6e,0x62,0x5a,0x54,0x51,
0x52,0x59,0x64,0x73,0x80,0x88,0x89,0x85,0x7b,0x6e,0x63,0x5b,0x53,0x50,0x51,0x57,
0x63,0x73,0x80,0x88,0x8e,0x88,0x7b,0x73,0x6a,0x61,0x5d,0x58,0x56,0x58,0x5d,0x64,
0x6b,0x75,0x7a,0x7a,0x78,0x75,0x70,0x71,0x6f,0x6c,0x6b,0x69,0x69,0x6c,0x6d,0x70,
0x71,0x72,0x70,0x6e,0x6b,0x6b,0x6e,0x71,0x71,0x70,0x70,0x6f,0x6f,0x71,0x73,0x73,
0x72,0x70,0x6d,0x6d,0x6d,0x70,0x6f,0x6f,0x6e,0x6e,0x6e,0x6f,0x70,0x74,0x70,0x6d,
0x6a,0x69,0x6a,0x70,0x78,0x7b,0x7b,0x74,0x6b,0x60,0x5f,0x63,0x6b,0x76,0x7f,0x80,
0x77,0x68,0x5c,0x5a,0x61,0x6b,0x76,0x7b,0x79,0x72,0x67,0x5e,0x5d,0x62,0x6c,0x76,
0x7e,0x7d,0x77,0x6e,0x63,0x5a,0x5c,0x63,0x70,0x7c,0x82,0x81,0x78,0x6c,0x60,0x5b,
0x60,0x6b,0x77,0x81,0x82,0x7a,0x6e,0x63,0x5b,0x5e,0x66,0x73,0x7c,0x7f,0x7a,0x71,
0x66,0x5b,0x57,0x5c,0x66,0x71,0x7b,0x7f,0x7b,0x74,0x66,0x5e,0x5e,0x66,0x71,0x7d,
0x82,0x7d,0x75,0x69,0x5e,0x57,0x5b,0x66,0x74,0x80,0x84,0x7e,0x75,0x66,0x5a,0x5a,
0x63,0x70,0x7d,0x84,0x81,0x76,0x68,0x5e,0x5b,0x63,0x6e,0x78,0x7b,0x77,0x6f,0x67,
0x61,0x63,0x6c,0x75,0x7b,0x7c,0x76,0x6e,0x67,0x66,0x67,0x6b,0x6f,0x73,0x75,0x73,
0x70,0x6d,0x6e,0x6c,0x6b,0x6e,0x70,0x71,0x72,0x71,0x70,0x70,0x6f,0x6e,0x6c,0x6d,
0x6e,0x70,0x71,0x71,0x6f,0x70,0x6f,0x6d,0x6c,0x6c,0x6e,0x6e,0x6d,0x6d,0x6d,0x6d,
0x6e,0x6e,0x70,0x71,0x73,0x71,0x70,0x71,0x73,0x75,0x75,0x75,0x73,0x6f,0x6c,0x6b,
0x6e,0x75,0x7a,0x78,0x70,0x66,0x5f,0x60,0x6a,0x77,0x81,0x81,0x75,0x65,0x5a,0x5c,
0x69,0x7b,0x86,0x85,0x76,0x61,0x51,0x52,0x63,0x7a,0x8b,0x8b,0x7b,0x64,0x54,0x54,
0x63,0x7c,0x8d,0x8e,0x7d,0x63,0x50,0x52,0x64,0x7c,0x8a,0x89,0x76,0x5e,0x4d,0x4e,
0x60,0x79,0x89,0x88,0x78,0x63,0x52,0x55,0x66,0x7e,0x8d,0x8c,0x7a,0x5f,0x4e,0x50,
0x62,0x79,0x89,0x86,0x7a,0x5f,0x4f,0x52,0x64,0x7c,0x8d,0x8a,0x76,0x60,0x51,0x55,
0x65,0x7c,0x8a,0x89,0x77,0x60,0x50,0x55,0x66,0x7b,0x87,0x86,0x77,0x63,0x55,0x57,
0x69,0x7e,0x89,0x87,0x77,0x64,0x58,0x5a,0x64,0x73,0x7b,0x7b,0x73,0x6a,0x64,0x67,
0x70,0x77,0x79,0x78,0x73,0x6d,0x67,0x69,0x6a,0x6d,0x6e,0x6e,0x6a,0x6e,0x6e,0x6f,
0x70,0x71,0x70,0x70,0x70,0x6f,0x6f,0x70,0x6f,0x6c,0x6b,0x6b,0x6c,0x6e,0x6e,0x6f,
0x6f,0x6d,0x6e,0x70,0x70,0x6f,0x70,0x70,0x70,0x71,0x73,0x75,0x75,0x75,0x73,0x73,
0x73,0x72,0x6f,0x6e,0x6d,0x6e,0x70,0x73,0x75,0x75,0x70,0x6c,0x6c,0x6f,0x73,0x76,
0x74,0x6f,0x69,0x66,0x66,0x6b,0x72,0x78,0x76,0x71,0x69,0x67,0x6b,0x72,0x77,0x79,
0x74,0x6b,0x64,0x65,0x6b,0x75,0x7c,0x7b,0x72,0x6a,0x66,0x6b,0x74,0x7a,0x78,0x73,
0x67,0x61,0x64,0x6e,0x76,0x7a,0x76,0x6c,0x66,0x68,0x6f,0x76,0x7a,0x75,0x6c,0x66,
0x66,0x6d,0x76,0x79,0x74,0x6c,0x67,0x6a,0x70,0x78,0x7b,0x77,0x6f,0x69,0x68,0x71,
0x79,0x7b,0x75,0x6b,0x63,0x66,0x6c,0x73,0x77,0x73,0x6b,0x63,0x67,0x71,0x7c,0x80,
0x7a,0x6c,0x65,0x64,0x6e,0x7a,0x7c,0x74,0x6a,0x5f,0x60,0x6e,0x7b,0x82,0x7d,0x6e,
0x60,0x5e,0x67,0x75,0x7b,0x77,0x6b,0x5f,0x5b,0x61,0x6f,0x7c,0x7e,0x75,0x69,0x63,
0x68,0x73,0x7b,0x7b,0x75,0x6c,0x67,0x6b,0x72,0x78,0x78,0x74,0x6e,0x6a,0x6c,0x70,
0x73,0x75,0x71,0x6c,0x67,0x69,0x6c,0x73,0x75,0x71,0x6c,0x6d,0x6f,0x72,0x74,0x71,
0x6e,0x6c,0x6d,0x70,0x74,0x75,0x75,0x71,0x6e,0x6d,0x70,0x75,0x75,0x72,0x6e,0x6a,
0x6a,0x6d,0x6f,0x71,0x71,0x6f,0x6b,0x6b,0x6d,0x70,0x6e,0x70,0x6d,0x6c,0x6d,0x6f,
0x70,0x71,0x6f,0x6d,0x6c,0x6e,0x6f,0x72,0x72,0x6f,0x6f,0x6f,0x70,0x71,0x73,0x72,
0x6f,0x6d,0x6b,0x6b,0x6c,0x6c,0x6c,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6a,0x66,
0x60,0x59,0x51,0x4c,0x47,0x43,0x3f,0x3c,0x39,0x37,0x36,0x33,0x31,0x35,0x37,0x37,
// Line 21
0x36,0x36,0x35,0x37,0x38,0x3a,0x38,0x37,0x36,0x35,0x36,0x38,0x37,0x37,0x38,0x3a,
0x3a,0x3a,0x3b,0x3b,0x3c,0x3a,0x38,0x38,0x37,0x36,0x36,0x37,0x38,0x37,0x36,0x36,
0x36,0x38,0x38,0x38,0x37,0x37,0x38,0x3a,0x3a,0x38,0x39,0x3c,0x3d,0x3f,0x3f,0x40,
0x41,0x43,0x43,0x44,0x47,0x4b,0x4d,0x53,0x54,0x57,0x5a,0x5e,0x60,0x62,0x60,0x60,
0x60,0x61,0x63,0x65,0x65,0x63,0x65,0x67,0x68,0x66,0x65,0x63,0x61,0x5f,0x5b,0x58,
0x55,0x51,0x4e,0x4c,0x4a,0x49,0x47,0x47,0x43,0x40,0x40,0x42,0x41,0x3f,0x3d,0x3c,
0x3a,0x38,0x38,0x3a,0x3d,0x3e,0x3e,0x3e,0x3f,0x3e,0x44,0x47,0x4b,0x4e,0x4f,0x4f,
0x51,0x53,0x55,0x59,0x5d,0x5e,0x5e,0x60,0x5f,0x5f,0x60,0x61,0x63,0x63,0x63,0x64,
0x66,0x65,0x64,0x62,0x5f,0x5d,0x5c,0x5b,0x58,0x56,0x54,0x51,0x4e,0x4b,0x4b,0x4a,
0x49,0x47,0x44,0x43,0x41,0x3f,0x40,0x3f,0x3f,0x41,0x41,0x40,0x3f,0x3f,0x3e,0x40,
0x42,0x45,0x47,0x49,0x47,0x47,0x4a,0x4d,0x50,0x53,0x57,0x5a,0x5c,0x5d,0x5e,0x62,
0x66,0x69,0x6c,0x6d,0x6b,0x68,0x66,0x65,0x65,0x65,0x64,0x61,0x5f,0x5c,0x58,0x58,
0x58,0x59,0x59,0x57,0x52,0x4e,0x4a,0x48,0x47,0x46,0x42,0x3f,0x3d,0x3c,0x3a,0x3a,
0x38,0x38,0x3a,0x3b,0x3a,0x3a,0x3a,0x3d,0x3f,0x40,0x41,0x43,0x43,0x45,0x47,0x4d,
0x4f,0x53,0x57,0x57,0x58,0x5b,0x5f,0x61,0x62,0x63,0x62,0x62,0x62,0x63,0x62,0x66,
0x65,0x62,0x63,0x65,0x65,0x63,0x60,0x5e,0x5d,0x5b,0x57,0x55,0x54,0x52,0x50,0x4d,
0x4b,0x4a,0x4a,0x48,0x47,0x46,0x44,0x41,0x3f,0x3e,0x3c,0x3e,0x40,0x40,0x3f,0x3f,
0x40,0x42,0x44,0x46,0x48,0x4a,0x4a,0x4b,0x4d,0x4f,0x51,0x56,0x57,0x57,0x59,0x5b,
0x5f,0x63,0x65,0x66,0x66,0x68,0x69,0x6b,0x6b,0x6a,0x69,0x69,0x68,0x65,0x62,0x60,
0x5f,0x5f,0x5e,0x59,0x55,0x53,0x51,0x4f,0x4c,0x4a,0x48,0x47,0x43,0x3f,0x3e,0x3e,
0x3e,0x3d,0x3a,0x38,0x39,0x39,0x3a,0x3b,0x3e,0x41,0x44,0x45,0x45,0x46,0x47,0x49,
0x4b,0x4d,0x4f,0x50,0x51,0x52,0x51,0x55,0x5b,0x60,0x63,0x65,0x65,0x66,0x66,0x66,
0x66,0x6b,0x6b,0x6a,0x69,0x67,0x65,0x65,0x63,0x61,0x62,0x60,0x5d,0x58,0x53,0x4e,
0x4c,0x4a,0x49,0x48,0x46,0x43,0x40,0x3f,0x40,0x40,0x41,0x41,0x3f,0x3f,0x3d,0x3c,
0x3c,0x3c,0x3d,0x41,0x42,0x44,0x43,0x47,0x48,0x4c,0x4e,0x50,0x52,0x57,0x59,0x58,
0x5b,0x5d,0x5e,0x60,0x61,0x65,0x69,0x6c,0x6e,0x6d,0x6c,0x6b,0x68,0x66,0x65,0x64,
0x61,0x5d,0x59,0x58,0x57,0x57,0x56,0x55,0x52,0x51,0x4e,0x4c,0x4a,0x48,0x47,0x45,
0x43,0x40,0x3d,0x3f,0x3c,0x3a,0x3a,0x3c,0x3b,0x3a,0x39,0x3a,0x3a,0x3a,0x39,0x3a,
0x3a,0x39,0x38,0x39,0x3a,0x3a,0x3a,0x38,0x38,0x3a,0x3b,0x3a,0x39,0x37,0x37,0x38,
0x37,0x35,0x34,0x36,0x36,0x34,0x34,0x35,0x37,0x39,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,
0x38,0x38,0x3a,0x3a,0x39,0x36,0x36,0x36,0x37,0x39,0x39,0x38,0x38,0x36,0x34,0x35,
0x36,0x38,0x3a,0x3a,0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x37,0x38,0x39,0x3a,0x3a,
0x3a,0x3a,0x3a,0x3a,0x38,0x38,0x39,0x39,0x3a,0x38,0x38,0x37,0x3a,0x39,0x38,0x3a,
0x3a,0x38,0x38,0x38,0x39,0x3a,0x3c,0x3f,0x44,0x48,0x4b,0x53,0x59,0x5d,0x60,0x65,
0x68,0x6b,0x6b,0x6b,0x6a,0x6a,0x68,0x66,0x66,0x66,0x65,0x66,0x64,0x64,0x66,0x69,
0x69,0x68,0x67,0x65,0x66,0x67,0x68,0x69,0x6a,0x69,0x66,0x67,0x68,0x69,0x69,0x6a,
0x69,0x68,0x68,0x69,0x67,0x67,0x68,0x68,0x69,0x6a,0x6b,0x6b,0x69,0x65,0x61,0x5c,
0x58,0x55,0x4f,0x49,0x43,0x3c,0x37,0x34,0x34,0x36,0x35,0x36,0x37,0x3a,0x3a,0x3b,
0x3a,0x3a,0x3c,0x3d,0x3c,0x3a,0x39,0x3a,0x3a,0x38,0x34,0x34,0x38,0x3b,0x3b,0x37,
0x34,0x35,0x36,0x37,0x38,0x3a,0x39,0x3a,0x38,0x36,0x35,0x38,0x3b,0x3c,0x39,0x36,
0x34,0x37,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x37,0x36,0x36,0x38,0x37,0x37,0x37,0x36,
0x35,0x37,0x38,0x38,0x37,0x36,0x36,0x3a,0x3b,0x38,0x38,0x3a,0x3a,0x3a,0x37,0x35,
0x33,0x34,0x36,0x35,0x37,0x36,0x37,0x3a,0x3a,0x3a,0x3a,0x3b,0x3a,0x3a,0x38,0x38,
0x38,0x38,0x37,0x38,0x36,0x34,0x33,0x34,0x34,0x35,0x38,0x38,0x38,0x39,0x3a,0x3a,
0x3a,0x3b,0x3a,0x3a,0x38,0x37,0x36,0x36,0x37,0x37,0x37,0x37,0x35,0x36,0x37,0x38,
0x38,0x38,0x37,0x3a,0x3a,0x3a,0x3a,0x38,0x36,0x36,0x35,0x36,0x37,0x35,0x34,0x33,
0x33,0x33,0x34,0x38,0x39,0x39,0x39,0x3a,0x39,0x3a,0x3b,0x3b,0x3a,0x38,0x36,0x35,
0x34,0x34,0x34,0x38,0x38,0x37,0x36,0x36,0x37,0x3a,0x3e,0x42,0x46,0x4a,0x4d,0x52,
0x58,0x5f,0x61,0x65,0x66,0x66,0x66,0x65,0x63,0x65,0x65,0x65,0x66,0x66,0x65,0x66,
0x66,0x64,0x65,0x68,0x69,0x68,0x66,0x65,0x64,0x66,0x67,0x69,0x6a,0x69,0x67,0x66,
0x65,0x64,0x65,0x68,0x68,0x69,0x6a,0x69,0x67,0x66,0x67,0x68,0x69,0x67,0x65,0x67,
0x62,0x5e,0x5a,0x59,0x58,0x54,0x4f,0x48,0x44,0x41,0x3f,0x3c,0x3c,0x3a,0x38,0x3a,
0x38,0x36,0x38,0x3a,0x39,0x39,0x37,0x35,0x34,0x35,0x35,0x37,0x38,0x39,0x38,0x37,
0x37,0x36,0x37,0x37,0x36,0x35,0x34,0x32,0x32,0x32,0x32,0x33,0x33,0x32,0x34,0x35,
0x36,0x35,0x36,0x36,0x38,0x39,0x39,0x38,0x38,0x37,0x36,0x36,0x36,0x36,0x36,0x34,
0x31,0x33,0x35,0x36,0x35,0x36,0x34,0x34,0x35,0x36,0x37,0x38,0x37,0x35,0x37,0x38,
0x39,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,0x3c,0x3a,0x39,0x37,0x36,0x35,0x34,0x33,0x34,
0x35,0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x39,0x3a,0x38,0x3a,0x37,0x36,0x36,0x35,
0x33,0x34,0x37,0x3a,0x3e,0x40,0x43,0x49,0x4e,0x52,0x57,0x5d,0x61,0x63,0x63,0x62,
0x63,0x63,0x63,0x65,0x66,0x65,0x62,0x62,0x63,0x63,0x65,0x67,0x68,0x68,0x68,0x68,
0x66,0x66,0x67,0x69,0x69,0x68,0x65,0x67,0x66,0x66,0x66,0x65,0x65,0x66,0x66,0x66,
0x67,0x68,0x69,0x6a,0x68,0x67,0x68,0x69,0x69,0x68,0x67,0x66,0x65,0x65,0x64,0x64,
0x65,0x66,0x66,0x68,0x69,0x6b,0x69,0x67,0x66,0x67,0x68,0x6b,0x6c,0x6b,0x68,0x66,
0x67,0x67,0x67,0x6a,0x69,0x67,0x65,0x65,0x65,0x67,0x6a,0x6b,0x6b,0x6b,0x69,0x67,
0x68,0x66,0x66,0x68,0x65,0x65,0x67,0x69,0x68,0x68,0x67,0x69,0x68,0x67,0x65,0x65,
0x66,0x65,0x64,0x65,0x68,0x69,0x6a,0x68,0x67,0x67,0x65,0x64,0x65,0x68,0x6a,0x6b,
0x68,0x65,0x65,0x66,0x68,0x66,0x69,0x67,0x66,0x67,0x65,0x65,0x65,0x66,0x67,0x69,
0x68,0x66,0x65,0x63,0x64,0x66,0x69,0x6a,0x68,0x69,0x67,0x65,0x66,0x67,0x68,0x6a,
0x69,0x67,0x67,0x67,0x67,0x68,0x69,0x68,0x67,0x67,0x67,0x66,0x63,0x60,0x5c,0x5b,
0x57,0x52,0x4f,0x4c,0x47,0x44,0x41,0x3e,0x3c,0x3b,0x3a,0x3a,0x3d,0x3e,0x3c,0x3a,
0x37,0x37,0x38,0x38,0x37,0x37,0x36,0x35,0x34,0x33,0x36,0x39,0x3a,0x3b,0x3a,0x3a,
0x3a,0x3a,0x39,0x38,0x38,0x3a,0x37,0x35,0x35,0x37,0x37,0x38,0x38,0x37,0x36,0x35,
0x35,0x33,0x34,0x37,0x38,0x37,0x37,0x39,0x3e,0x43,0x47,0x4d,0x4f,0x53,0x59,0x5e,
0x62,0x66,0x68,0x69,0x68,0x69,0x68,0x69,0x6a,0x6a,0x68,0x67,0x65,0x65,0x66,0x66,
0x66,0x66,0x65,0x67,0x68,0x69,0x67,0x67,0x6b,0x6e,0x6e,0x70,0x6e,0x6c,0x6b,0x69,
0x66,0x66,0x68,0x6b,0x6b,0x68,0x65,0x65,0x63,0x63,0x66,0x68,0x68,0x67,0x63,0x5f,
0x5b,0x5a,0x5a,0x57,0x52,0x4c,0x46,0x41,0x3c,0x3a,0x3a,0x3a,0x39,0x3a,0x3a,0x3b,
0x3b,0x3b,0x3b,0x3a,0x3c,0x3c,0x3b,0x3a,0x37,0x33,0x32,0x32,0x33,0x35,0x38,0x37,
0x35,0x34,0x33,0x34,0x37,0x38,0x38,0x3a,0x37,0x34,0x33,0x34,0x36,0x38,0x38,0x39,
0x38,0x38,0x38,0x38,0x39,0x3b,0x3a,0x3a,0x38,0x37,0x37,0x36,0x34,0x33,0x32,0x33,
0x32,0x32,0x33,0x35,0x35,0x34,0x34,0x37,0x39,0x3a,0x3a,0x39,0x38,0x37,0x37,0x37,
0x37,0x37,0x37,0x37,0x34,0x31,0x32,0x35,0x37,0x37,0x37,0x38,0x36,0x38,0x37,0x37,
0x39,0x3a,0x38,0x36,0x35,0x34,0x34,0x34,0x35,0x34,0x37,0x37,0x37,0x38,0x38,0x38,
0x37,0x37,0x37,0x38,0x39,0x38,0x38,0x36,0x34,0x35,0x35,0x37,0x36,0x36,0x34,0x35,
0x36,0x36,0x35,0x36,0x35,0x34,0x35,0x37,0x36,0x35,0x34,0x33,0x34,0x34,0x35,0x33,
0x38,0x37,0x34,0x34,0x36,0x36,0x38,0x38,0x37,0x38,0x37,0x34,0x34,0x33,0x34,0x36,
0x34,0x34,0x34,0x36,0x36,0x35,0x34,0x35,0x35,0x37,0x36,0x38,0x3f,0x46,0x4a,0x4f,
0x51,0x56,0x5c,0x62,0x66,0x69,0x69,0x67,0x65,0x63,0x64,0x65,0x68,0x68,0x67,0x67,
0x66,0x65,0x66,0x67,0x68,0x6b,0x6a,0x69,0x68,0x68,0x67,0x68,0x69,0x6b,0x6a,0x6a,
0x68,0x66,0x66,0x67,0x67,0x68,0x68,0x68,0x67,0x66,0x65,0x65,0x66,0x66,0x67,0x67,
0x67,0x66,0x65,0x60,0x5b,0x59,0x55,0x50,0x4b,0x45,0x3f,0x3d,0x3b,0x3a,0x39,0x37,
0x36,0x37,0x37,0x38,0x38,0x39,0x38,0x36,0x37,0x37,0x37,0x38,0x37,0x35,0x34,0x34,
0x34,0x36,0x36,0x37,0x38,0x38,0x37,0x36,0x36,0x35,0x35,0x36,0x37,0x37,0x38,0x36,
0x34,0x36,0x38,0x3a,0x38,0x38,0x36,0x35,0x34,0x34,0x34,0x36,0x37,0x35,0x35,0x35,
0x35,0x36,0x35,0x35,0x37,0x36,0x33,0x33,0x32,0x33,0x33,0x33,0x33,0x34,0x33,0x33,
0x32,0x33,0x34,0x35,0x35,0x33,0x32,0x33,0x34,0x34,0x34,0x38,0x39,0x38,0x37,0x37,
//Field 3
// Line 10
0x38,0x38,0x39,0x3b,0x39,0x37,0x36,0x36,0x39,0x3a,0x39,0x36,0x34,0x33,0x34,0x33,
0x33,0x35,0x36,0x36,0x35,0x36,0x38,0x3b,0x3c,0x3b,0x3a,0x3b,0x3a,0x39,0x38,0x37,
0x37,0x39,0x39,0x38,0x37,0x35,0x35,0x36,0x37,0x36,0x35,0x34,0x33,0x34,0x36,0x37,
0x38,0x3b,0x39,0x37,0x36,0x36,0x36,0x36,0x38,0x36,0x34,0x34,0x36,0x36,0x37,0x36,
0x36,0x36,0x37,0x34,0x33,0x33,0x34,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x38,0x3a,
0x39,0x3b,0x3a,0x39,0x3a,0x3b,0x3d,0x3c,0x39,0x37,0x38,0x38,0x38,0x38,0x39,0x39,
0x37,0x36,0x35,0x34,0x38,0x38,0x37,0x36,0x34,0x33,0x35,0x36,0x39,0x3a,0x3a,0x39,
0x38,0x36,0x36,0x37,0x39,0x39,0x38,0x36,0x34,0x33,0x36,0x39,0x3b,0x3b,0x3b,0x3a,
0x3b,0x3b,0x3b,0x3b,0x3a,0x38,0x36,0x33,0x33,0x33,0x34,0x34,0x35,0x36,0x35,0x34,
0x36,0x37,0x36,0x38,0x38,0x37,0x39,0x39,0x37,0x38,0x3b,0x3c,0x3c,0x3b,0x3a,0x39,
0x37,0x37,0x37,0x36,0x33,0x32,0x33,0x33,0x34,0x35,0x36,0x37,0x37,0x37,0x39,0x3a,
0x3a,0x38,0x36,0x36,0x35,0x34,0x36,0x36,0x34,0x36,0x37,0x37,0x39,0x39,0x39,0x39,
0x38,0x39,0x39,0x38,0x36,0x35,0x36,0x34,0x33,0x33,0x32,0x33,0x35,0x34,0x34,0x34,
0x36,0x38,0x39,0x39,0x38,0x39,0x38,0x37,0x36,0x36,0x35,0x35,0x33,0x30,0x2f,0x31,
0x33,0x34,0x36,0x36,0x37,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3b,0x3b,0x3a,0x37,0x3a,
0x37,0x36,0x37,0x38,0x37,0x38,0x36,0x34,0x36,0x36,0x37,0x36,0x37,0x36,0x36,0x37,
0x39,0x39,0x39,0x38,0x36,0x36,0x36,0x38,0x3b,0x3d,0x3e,0x40,0x3f,0x3d,0x3c,0x3a,
0x3a,0x39,0x37,0x37,0x37,0x36,0x35,0x34,0x36,0x38,0x39,0x39,0x38,0x37,0x38,0x37,
0x36,0x36,0x38,0x39,0x3a,0x39,0x37,0x35,0x34,0x33,0x33,0x34,0x37,0x36,0x37,0x36,
0x36,0x39,0x3c,0x3d,0x3d,0x3b,0x39,0x39,0x38,0x37,0x37,0x37,0x34,0x33,0x34,0x34,
0x34,0x34,0x35,0x36,0x37,0x37,0x37,0x36,0x39,0x3a,0x3b,0x3a,0x39,0x38,0x39,0x36,
0x33,0x35,0x36,0x37,0x38,0x36,0x34,0x35,0x35,0x36,0x3a,0x3e,0x3d,0x3d,0x3b,0x39,
0x38,0x38,0x39,0x39,0x3b,0x3a,0x37,0x36,0x33,0x33,0x37,0x3a,0x3b,0x3b,0x3a,0x37,
0x37,0x36,0x37,0x38,0x38,0x37,0x36,0x34,0x35,0x36,0x3a,0x3b,0x3c,0x3c,0x3b,0x3a,
0x39,0x3b,0x3b,0x39,0x38,0x38,0x38,0x38,0x37,0x37,0x39,0x3a,0x38,0x36,0x36,0x35,
0x36,0x36,0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x38,0x39,0x38,0x36,0x35,0x37,0x39,
0x3b,0x39,0x37,0x39,0x3a,0x3a,0x39,0x3b,0x3c,0x3b,0x3a,0x3a,0x3b,0x3b,0x3b,0x39,
0x39,0x39,0x38,0x39,0x38,0x37,0x3a,0x3a,0x38,0x38,0x39,0x39,0x3b,0x3b,0x3b,0x3b,
0x3d,0x3b,0x3a,0x3b,0x3b,0x3b,0x3a,0x37,0x34,0x34,0x34,0x34,0x34,0x36,0x37,0x3a,
0x3b,0x3b,0x3b,0x40,0x3c,0x3a,0x3a,0x3a,0x39,0x37,0x37,0x36,0x37,0x39,0x3b,0x3b,
0x3b,0x38,0x36,0x35,0x36,0x37,0x38,0x38,0x36,0x36,0x36,0x36,0x35,0x35,0x36,0x36,
0x37,0x37,0x36,0x38,0x39,0x39,0x39,0x39,0x3a,0x3d,0x3d,0x3b,0x3a,0x39,0x38,0x38,
0x37,0x38,0x39,0x3a,0x39,0x39,0x38,0x38,0x39,0x3a,0x3a,0x39,0x3a,0x39,0x37,0x37,
0x36,0x36,0x36,0x35,0x35,0x36,0x39,0x39,0x39,0x38,0x38,0x38,0x39,0x3b,0x39,0x3b,
0x3a,0x39,0x39,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x37,0x37,0x37,0x39,0x3a,
0x3a,0x39,0x39,0x37,0x35,0x35,0x36,0x37,0x39,0x38,0x36,0x35,0x35,0x36,0x38,0x39,
0x38,0x39,0x38,0x37,0x39,0x3a,0x3c,0x3c,0x3a,0x38,0x36,0x36,0x36,0x36,0x39,0x39,
0x37,0x34,0x34,0x33,0x34,0x36,0x37,0x37,0x36,0x35,0x34,0x34,0x35,0x37,0x3a,0x39,
0x37,0x37,0x37,0x38,0x37,0x36,0x36,0x38,0x39,0x39,0x39,0x39,0x38,0x39,0x3b,0x3b,
0x39,0x36,0x36,0x36,0x38,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x33,0x34,0x37,0x36,
0x34,0x35,0x36,0x39,0x3c,0x3b,0x3a,0x3a,0x3a,0x38,0x37,0x36,0x35,0x37,0x39,0x39,
0x38,0x36,0x36,0x36,0x37,0x38,0x38,0x3b,0x39,0x37,0x37,0x37,0x37,0x38,0x38,0x38,
0x38,0x38,0x39,0x38,0x39,0x37,0x36,0x37,0x37,0x38,0x3b,0x39,0x35,0x34,0x36,0x36,
0x35,0x35,0x36,0x37,0x37,0x36,0x34,0x37,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x37,
0x38,0x38,0x37,0x36,0x33,0x32,0x34,0x36,0x37,0x38,0x3a,0x3a,0x39,0x39,0x3a,0x3a,
0x39,0x37,0x34,0x33,0x33,0x34,0x34,0x32,0x30,0x33,0x35,0x36,0x37,0x39,0x3b,0x3c,
0x3c,0x3a,0x37,0x37,0x36,0x35,0x36,0x37,0x36,0x34,0x32,0x30,0x31,0x32,0x33,0x36,
0x37,0x38,0x38,0x39,0x39,0x38,0x3d,0x3a,0x39,0x39,0x3a,0x3b,0x3b,0x39,0x38,0x39,
0x39,0x37,0x35,0x34,0x35,0x36,0x37,0x37,0x36,0x39,0x3b,0x39,0x3b,0x3b,0x3c,0x3b,
0x39,0x37,0x37,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x37,0x38,0x38,0x36,0x38,
0x3b,0x3b,0x3d,0x39,0x37,0x37,0x37,0x37,0x34,0x35,0x37,0x39,0x38,0x36,0x34,0x36,
0x36,0x37,0x37,0x36,0x35,0x36,0x36,0x35,0x36,0x38,0x3a,0x37,0x36,0x34,0x36,0x39,
0x3a,0x3a,0x3b,0x3a,0x39,0x39,0x3a,0x3b,0x3c,0x38,0x34,0x34,0x34,0x34,0x35,0x37,
0x39,0x3b,0x3a,0x38,0x36,0x38,0x38,0x38,0x38,0x36,0x35,0x34,0x33,0x32,0x33,0x36,
0x37,0x36,0x37,0x34,0x33,0x34,0x33,0x34,0x36,0x38,0x38,0x38,0x38,0x38,0x39,0x3a,
0x38,0x39,0x3a,0x39,0x36,0x33,0x33,0x34,0x35,0x36,0x36,0x36,0x36,0x35,0x38,0x39,
0x3a,0x3a,0x39,0x36,0x34,0x34,0x35,0x36,0x36,0x35,0x35,0x35,0x34,0x35,0x37,0x38,
0x37,0x36,0x34,0x35,0x36,0x35,0x33,0x34,0x36,0x37,0x34,0x36,0x36,0x37,0x3a,0x39,
0x39,0x3b,0x3b,0x3a,0x3a,0x39,0x39,0x39,0x39,0x38,0x36,0x36,0x36,0x36,0x36,0x34,
0x33,0x34,0x33,0x33,0x34,0x36,0x37,0x36,0x35,0x36,0x38,0x37,0x36,0x37,0x3a,0x3a,
0x38,0x36,0x36,0x36,0x38,0x38,0x37,0x37,0x36,0x34,0x34,0x34,0x34,0x36,0x37,0x37,
0x37,0x38,0x39,0x39,0x38,0x37,0x37,0x38,0x36,0x35,0x36,0x36,0x36,0x37,0x37,0x38,
0x39,0x37,0x36,0x38,0x39,0x3b,0x3b,0x3a,0x36,0x34,0x34,0x35,0x36,0x38,0x39,0x38,
0x38,0x37,0x37,0x37,0x39,0x38,0x38,0x38,0x37,0x36,0x38,0x39,0x39,0x3b,0x3b,0x3b,
0x3e,0x3d,0x3b,0x3b,0x38,0x36,0x34,0x36,0x35,0x36,0x36,0x38,0x36,0x35,0x35,0x36,
0x39,0x3b,0x3b,0x3b,0x38,0x36,0x34,0x34,0x35,0x36,0x37,0x36,0x36,0x36,0x37,0x38,
0x37,0x38,0x38,0x37,0x33,0x30,0x30,0x31,0x30,0x33,0x33,0x34,0x35,0x36,0x36,0x36,
0x37,0x39,0x37,0x38,0x36,0x35,0x36,0x36,0x33,0x34,0x35,0x35,0x35,0x34,0x34,0x36,
0x38,0x38,0x39,0x3b,0x3d,0x3e,0x3b,0x39,0x37,0x39,0x38,0x36,0x36,0x37,0x37,0x37,
0x36,0x37,0x39,0x39,0x37,0x38,0x39,0x39,0x37,0x36,0x36,0x37,0x39,0x39,0x38,0x37,
0x36,0x34,0x35,0x34,0x34,0x36,0x37,0x37,0x37,0x38,0x3b,0x3b,0x39,0x38,0x38,0x3a,
0x3a,0x38,0x37,0x37,0x38,0x39,0x39,0x38,0x39,0x39,0x36,0x34,0x33,0x35,0x33,0x34,
0x33,0x33,0x37,0x38,0x37,0x37,0x36,0x35,0x35,0x33,0x33,0x34,0x36,0x37,0x37,0x37,
0x37,0x38,0x38,0x36,0x36,0x38,0x39,0x37,0x36,0x36,0x38,0x39,0x38,0x37,0x37,0x36,
0x34,0x34,0x35,0x36,0x37,0x37,0x37,0x37,0x39,0x3a,0x39,0x3d,0x3b,0x3a,0x3a,0x39,
0x37,0x37,0x37,0x36,0x37,0x37,0x39,0x39,0x38,0x36,0x36,0x38,0x38,0x38,0x38,0x37,
0x37,0x36,0x35,0x36,0x37,0x39,0x37,0x37,0x36,0x34,0x36,0x36,0x36,0x37,0x38,0x39,
0x38,0x37,0x37,0x38,0x3b,0x3d,0x3d,0x3d,0x3a,0x36,0x35,0x35,0x36,0x35,0x39,0x39,
0x38,0x39,0x39,0x39,0x3b,0x3a,0x3a,0x3c,0x3b,0x39,0x38,0x37,0x35,0x34,0x35,0x37,
0x38,0x38,0x36,0x35,0x37,0x39,0x39,0x39,0x39,0x36,0x37,0x35,0x35,0x37,0x38,0x38,
0x37,0x35,0x35,0x36,0x36,0x37,0x37,0x37,0x36,0x33,0x33,0x34,0x36,0x39,0x39,0x38,
0x37,0x36,0x36,0x38,0x39,0x39,0x37,0x38,0x36,0x36,0x38,0x38,0x37,0x34,0x32,0x32,
0x34,0x36,0x37,0x37,0x36,0x34,0x34,0x35,0x37,0x39,0x38,0x36,0x35,0x36,0x36,0x36,
0x36,0x38,0x39,0x3a,0x3a,0x3b,0x3c,0x3b,0x39,0x37,0x37,0x38,0x36,0x37,0x37,0x36,
0x36,0x35,0x37,0x39,0x39,0x3a,0x3b,0x39,0x37,0x37,0x38,0x38,0x39,0x38,0x39,0x38,
0x39,0x39,0x37,0x38,0x38,0x37,0x36,0x36,0x36,0x37,0x36,0x36,0x35,0x35,0x36,0x37,
0x37,0x36,0x34,0x36,0x35,0x34,0x38,0x39,0x39,0x3a,0x39,0x37,0x38,0x38,0x37,0x36,
0x35,0x34,0x34,0x34,0x34,0x36,0x37,0x36,0x35,0x37,0x39,0x3a,0x39,0x37,0x36,0x37,
0x36,0x35,0x37,0x38,0x37,0x36,0x35,0x35,0x33,0x34,0x36,0x37,0x38,0x37,0x37,0x39,
0x34,0x34,0x37,0x39,0x3a,0x39,0x39,0x37,0x38,0x37,0x38,0x36,0x39,0x38,0x36,0x36,
0x35,0x36,0x36,0x35,0x34,0x36,0x36,0x37,0x38,0x38,0x37,0x37,0x36,0x35,0x36,0x36,
0x36,0x34,0x36,0x38,0x39,0x38,0x37,0x37,0x39,0x39,0x39,0x39,0x38,0x37,0x36,0x36,
0x36,0x35,0x37,0x37,0x36,0x36,0x36,0x35,0x37,0x36,0x35,0x36,0x36,0x34,0x34,0x35,
0x37,0x38,0x39,0x38,0x37,0x36,0x34,0x33,0x33,0x32,0x33,0x32,0x30,0x30,0x34,0x37,
0x38,0x39,0x39,0x38,0x37,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x34,0x35,0x37,0x36,
0x34,0x36,0x39,0x39,0x37,0x37,0x36,0x36,0x36,0x37,0x38,0x37,0x35,0x33,0x31,0x30,
// Line 11
0x35,0x37,0x39,0x39,0x38,0x39,0x38,0x36,0x36,0x35,0x35,0x37,0x37,0x36,0x33,0x33,
0x35,0x37,0x39,0x38,0x37,0x37,0x38,0x37,0x37,0x37,0x39,0x39,0x37,0x33,0x34,0x36,
0x37,0x37,0x35,0x33,0x33,0x36,0x38,0x39,0x3a,0x3b,0x3b,0x39,0x35,0x32,0x32,0x33,
0x32,0x34,0x35,0x32,0x2f,0x30,0x37,0x44,0x57,0x69,0x76,0x7d,0x79,0x6a,0x5e,0x59,
0x5c,0x65,0x6e,0x75,0x77,0x73,0x6b,0x61,0x5a,0x5b,0x61,0x6b,0x71,0x72,0x72,0x6d,
0x67,0x61,0x5b,0x5b,0x60,0x67,0x6e,0x74,0x75,0x6f,0x66,0x5f,0x5a,0x5b,0x62,0x6c,
0x73,0x78,0x76,0x6f,0x69,0x62,0x5e,0x60,0x66,0x6b,0x72,0x76,0x75,0x6d,0x65,0x5e,
0x5a,0x5c,0x62,0x6b,0x71,0x76,0x75,0x6e,0x65,0x5e,0x5d,0x61,0x68,0x71,0x77,0x79,
0x76,0x6f,0x68,0x62,0x5f,0x60,0x63,0x68,0x6b,0x6c,0x6f,0x72,0x79,0x83,0x8f,0x99,
0xa3,0xaa,0xa8,0x9c,0x8a,0x79,0x6b,0x60,0x58,0x51,0x4f,0x4c,0x44,0x3e,0x38,0x3c,
0x48,0x57,0x67,0x79,0x85,0x8c,0x8f,0x92,0x97,0x9b,0x9d,0x9d,0x9b,0x9b,0x9b,0x9c,
0x9d,0x9b,0x94,0x88,0x79,0x6a,0x5e,0x57,0x4f,0x44,0x3b,0x32,0x2f,0x38,0x4b,0x61,
0x7a,0x83,0x81,0x77,0x69,0x5e,0x57,0x52,0x4a,0x41,0x37,0x31,0x32,0x3f,0x55,0x6d,
0x7f,0x84,0x7d,0x6f,0x60,0x55,0x4d,0x46,0x41,0x3c,0x37,0x31,0x2e,0x2e,0x32,0x38,
0x42,0x4f,0x5e,0x6b,0x73,0x73,0x72,0x69,0x60,0x5b,0x56,0x51,0x4a,0x40,0x35,0x34,
0x3b,0x4c,0x63,0x78,0x85,0x8e,0x92,0x94,0x93,0x8c,0x81,0x71,0x62,0x57,0x57,0x60,
0x6d,0x78,0x7d,0x7a,0x70,0x67,0x60,0x5e,0x5d,0x55,0x45,0x34,0x2c,0x2f,0x3f,0x59,
0x71,0x81,0x86,0x7b,0x69,0x5a,0x52,0x4f,0x4a,0x42,0x38,0x32,0x35,0x41,0x55,0x6b,
0x7d,0x84,0x7d,0x6d,0x5e,0x56,0x59,0x63,0x70,0x77,0x79,0x73,0x6b,0x61,0x5d,0x5d,
0x5b,0x54,0x46,0x37,0x2e,0x32,0x42,0x58,0x70,0x80,0x80,0x77,0x69,0x5c,0x53,0x4e,
0x48,0x41,0x39,0x34,0x35,0x42,0x59,0x70,0x80,0x84,0x7b,0x6b,0x5c,0x54,0x50,0x4e,
0x47,0x3e,0x35,0x2f,0x2f,0x35,0x3d,0x41,0x40,0x3c,0x38,0x35,0x35,0x38,0x3b,0x37,
0x32,0x32,0x3a,0x4c,0x5f,0x70,0x7b,0x7b,0x75,0x68,0x5c,0x5b,0x5b,0x60,0x69,0x6e,
0x72,0x7b,0x82,0x8e,0x9a,0xa4,0xaa,0xab,0xa8,0x9f,0x96,0x91,0x8f,0x91,0x94,0x98,
0x9b,0x9e,0x9e,0x9b,0x93,0x87,0x79,0x6d,0x5f,0x53,0x49,0x43,0x3f,0x3e,0x3e,0x3c,
0x37,0x33,0x33,0x36,0x3f,0x4a,0x58,0x69,0x75,0x79,0x75,0x6b,0x60,0x59,0x59,0x62,
0x6d,0x78,0x7c,0x76,0x6b,0x60,0x59,0x5d,0x69,0x76,0x80,0x83,0x7b,0x70,0x66,0x62,
0x61,0x63,0x60,0x59,0x4c,0x3a,0x2b,0x2a,0x38,0x50,0x6c,0x80,0x86,0x7e,0x6d,0x5c,
0x51,0x4c,0x4c,0x4c,0x45,0x3b,0x30,0x2c,0x30,0x39,0x41,0x44,0x41,0x3c,0x34,0x31,
0x37,0x44,0x55,0x65,0x74,0x82,0x8a,0x95,0x9a,0x9f,0xa5,0xa7,0xa5,0xa1,0x96,0x86,
0x77,0x69,0x5e,0x59,0x5a,0x60,0x69,0x71,0x7a,0x84,0x8e,0x97,0x9c,0x9b,0x91,0x82,
0x71,0x62,0x55,0x4d,0x45,0x3e,0x39,0x38,0x3f,0x4e,0x61,0x74,0x7e,0x7f,0x77,0x6a,
0x60,0x5d,0x5e,0x66,0x6c,0x74,0x7d,0x85,0x8d,0x97,0x9e,0x9e,0x95,0x86,0x75,0x61,
0x55,0x47,0x3b,0x35,0x33,0x36,0x40,0x4f,0x63,0x77,0x7e,0x7a,0x6e,0x60,0x56,0x50,
0x4e,0x4d,0x4a,0x42,0x38,0x31,0x30,0x36,0x3e,0x44,0x44,0x41,0x3b,0x35,0x34,0x3a,
0x46,0x54,0x65,0x74,0x83,0x90,0x9a,0x9d,0x98,0x8c,0x7e,0x6f,0x62,0x55,0x49,0x44,
0x3d,0x36,0x35,0x3d,0x4a,0x60,0x75,0x82,0x80,0x7b,0x6d,0x5e,0x57,0x59,0x62,0x6d,
0x75,0x78,0x75,0x6c,0x60,0x59,0x59,0x60,0x6b,0x72,0x76,0x76,0x72,0x6b,0x63,0x60,
0x5e,0x5d,0x58,0x4e,0x41,0x35,0x2d,0x2b,0x2f,0x36,0x3e,0x44,0x47,0x44,0x3d,0x35,
0x31,0x31,0x34,0x38,0x3b,0x3c,0x3d,0x3b,0x39,0x36,0x3b,0x4a,0x5e,0x70,0x7b,0x7b,
0x73,0x68,0x5c,0x53,0x4f,0x4f,0x4e,0x45,0x3d,0x31,0x2b,0x31,0x3a,0x44,0x48,0x44,
0x3b,0x32,0x2e,0x34,0x44,0x59,0x6b,0x77,0x7c,0x75,0x6a,0x5f,0x5b,0x5d,0x66,0x71,
0x79,0x7b,0x74,0x69,0x5e,0x59,0x58,0x59,0x55,0x4a,0x3c,0x31,0x2c,0x2e,0x33,0x3b,
0x42,0x45,0x41,0x3a,0x36,0x37,0x3a,0x3c,0x39,0x35,0x32,0x3c,0x4a,0x5c,0x6d,0x78,
0x79,0x70,0x62,0x57,0x56,0x5e,0x69,0x73,0x79,0x79,0x73,0x6b,0x64,0x63,0x63,0x60,
0x56,0x49,0x3c,0x31,0x2b,0x32,0x45,0x5f,0x76,0x86,0x8f,0x94,0x96,0x98,0x9a,0x9b,
0x9b,0x9b,0x9a,0x99,0x9a,0x9c,0x9b,0x96,0x8b,0x7c,0x70,0x64,0x59,0x50,0x46,0x3d,
0x37,0x33,0x35,0x40,0x50,0x62,0x72,0x81,0x8c,0x91,0x98,0x98,0x9b,0xa1,0xa4,0xa1,
0x9b,0x8d,0x7f,0x70,0x63,0x59,0x55,0x5a,0x60,0x6a,0x72,0x7b,0x84,0x8d,0x94,0x9a,
0xa2,0xa7,0xa7,0xa0,0x93,0x83,0x75,0x67,0x5c,0x54,0x4d,0x44,0x3d,0x37,0x33,0x37,
0x40,0x4f,0x60,0x75,0x86,0x91,0x98,0x9a,0x9c,0x9f,0xa2,0xa2,0x9d,0x97,0x8a,0x7a,
0x68,0x5a,0x54,0x5d,0x65,0x6d,0x79,0x7d,0x7c,0x77,0x6e,0x66,0x61,0x59,0x50,0x43,
0x37,0x2f,0x2f,0x3a,0x4d,0x63,0x77,0x86,0x90,0x96,0x99,0x98,0x90,0x82,0x71,0x62,
0x58,0x55,0x5c,0x69,0x74,0x7b,0x7b,0x73,0x69,0x64,0x63,0x62,0x65,0x68,0x6b,0x6f,
0x72,0x7d,0x8a,0x98,0xa3,0xa7,0xa9,0xa2,0x99,0x8d,0x7f,0x71,0x64,0x58,0x4e,0x49,
0x47,0x44,0x40,0x3b,0x35,0x34,0x34,0x36,0x3a,0x42,0x4c,0x57,0x63,0x71,0x7f,0x8a,
0x94,0x99,0x9a,0x94,0x89,0x7a,0x69,0x5b,0x56,0x59,0x61,0x6a,0x77,0x81,0x8c,0x96,
0x9d,0x9e,0x9c,0x8a,0x72,0x5f,0x53,0x52,0x5c,0x6b,0x78,0x7e,0x7a,0x70,0x66,0x60,
0x5d,0x5a,0x53,0x46,0x37,0x2c,0x2a,0x35,0x4a,0x62,0x79,0x8a,0x91,0x93,0x96,0x9a,
0x9e,0xa2,0xa2,0x9e,0x94,0x86,0x76,0x63,0x5b,0x51,0x48,0x43,0x40,0x3d,0x3c,0x3c,
0x42,0x53,0x65,0x76,0x82,0x8b,0x90,0x93,0x95,0x99,0x9e,0xa3,0xa2,0x99,0x8b,0x7a,
0x6b,0x60,0x5a,0x5b,0x61,0x6a,0x71,0x78,0x80,0x8a,0x93,0x98,0x96,0x90,0x87,0x76,
0x63,0x53,0x45,0x3c,0x39,0x35,0x35,0x3f,0x4c,0x59,0x68,0x76,0x83,0x8f,0x97,0x9b,
0x9b,0x94,0x88,0x79,0x6c,0x60,0x58,0x59,0x60,0x6a,0x77,0x84,0x8f,0x96,0x9a,0x9b,
0x9d,0x9f,0x9e,0x9b,0x95,0x8a,0x79,0x69,0x59,0x54,0x5a,0x63,0x6c,0x76,0x7a,0x77,
0x6e,0x65,0x60,0x60,0x5f,0x59,0x4f,0x42,0x36,0x32,0x3b,0x4d,0x65,0x7e,0x8c,0x93,
0x96,0x96,0x97,0x97,0x9b,0x9f,0xa0,0x9a,0x8d,0x7b,0x6b,0x5c,0x53,0x55,0x5e,0x6b,
0x77,0x7e,0x7c,0x76,0x6c,0x64,0x62,0x62,0x62,0x68,0x6b,0x6d,0x71,0x7a,0x86,0x94,
0x9f,0xa6,0xa8,0xa5,0x9d,0x91,0x88,0x7b,0x6d,0x62,0x5b,0x5b,0x63,0x70,0x7d,0x80,
0x7f,0x74,0x66,0x5d,0x59,0x5c,0x6b,0x73,0x77,0x77,0x72,0x6a,0x62,0x5f,0x62,0x6a,
0x6f,0x71,0x70,0x70,0x73,0x7b,0x88,0x96,0xa0,0xa0,0x94,0x7f,0x6a,0x5b,0x54,0x59,
0x63,0x6e,0x7b,0x86,0x8f,0x97,0x9c,0x9d,0x96,0x88,0x75,0x60,0x53,0x51,0x57,0x65,
0x74,0x7e,0x80,0x7a,0x6e,0x66,0x62,0x63,0x63,0x69,0x6b,0x6d,0x74,0x7c,0x87,0x92,
0x9d,0xa5,0xaa,0xa8,0x9f,0x92,0x82,0x71,0x64,0x59,0x53,0x4c,0x45,0x3e,0x37,0x33,
0x31,0x33,0x38,0x3b,0x3b,0x3b,0x39,0x39,0x3a,0x3b,0x39,0x37,0x32,0x31,0x33,0x3e,
0x4e,0x60,0x6e,0x76,0x73,0x6f,0x66,0x5f,0x5b,0x57,0x53,0x4c,0x42,0x39,0x35,0x35,
0x38,0x3c,0x40,0x40,0x3d,0x3b,0x3b,0x3a,0x3a,0x36,0x31,0x2f,0x33,0x3f,0x52,0x63,
0x72,0x7a,0x79,0x70,0x66,0x5f,0x5b,0x56,0x4f,0x44,0x37,0x33,0x33,0x3e,0x57,0x6e,
0x7f,0x83,0x7b,0x6d,0x5e,0x53,0x4e,0x4b,0x48,0x43,0x3c,0x37,0x34,0x35,0x3a,0x41,
0x49,0x54,0x5e,0x68,0x72,0x7d,0x87,0x91,0x97,0x99,0x92,0x89,0x7b,0x6a,0x5d,0x56,
0x59,0x65,0x71,0x78,0x7b,0x76,0x6d,0x63,0x5d,0x5b,0x60,0x68,0x6e,0x75,0x7b,0x83,
0x8c,0x96,0x9f,0xa4,0xa8,0xa8,0xa2,0x9a,0x8b,0x7b,0x6c,0x61,0x5b,0x5d,0x63,0x6c,
0x73,0x79,0x7d,0x84,0x8f,0x9a,0x9e,0x9b,0x8c,0x76,0x5f,0x51,0x4e,0x55,0x63,0x71,
0x7a,0x7b,0x75,0x6a,0x5e,0x57,0x51,0x4d,0x45,0x3e,0x37,0x32,0x2f,0x32,0x38,0x42,
0x4c,0x55,0x5c,0x66,0x71,0x7d,0x87,0x91,0x98,0x9a,0x94,0x87,0x75,0x63,0x58,0x52,
0x57,0x60,0x6e,0x7a,0x82,0x89,0x91,0x9a,0x9c,0x98,0x8f,0x7b,0x65,0x57,0x54,0x5c,
0x6c,0x7a,0x7f,0x7c,0x72,0x68,0x60,0x5d,0x5f,0x64,0x69,0x6c,0x6f,0x76,0x80,0x8d,
0x9a,0x9c,0x95,0x88,0x79,0x68,0x59,0x4c,0x42,0x3a,0x35,0x34,0x3b,0x49,0x5b,0x6c,
0x78,0x81,0x88,0x8f,0x92,0x93,0x91,0x88,0x77,0x64,0x57,0x53,0x56,0x63,0x71,0x7c,
0x80,0x7b,0x6d,0x62,0x5a,0x5b,0x63,0x6e,0x76,0x78,0x75,0x6b,0x63,0x5e,0x62,0x6a,
0x73,0x78,0x79,0x76,0x6e,0x67,0x62,0x60,0x5f,0x5d,0x55,0x49,0x3e,0x33,0x2c,0x2b,
0x2d,0x32,0x38,0x45,0x50,0x5c,0x6a,0x73,0x75,0x6f,0x64,0x5a,0x59,0x5e,0x67,0x73,
0x79,0x78,0x71,0x69,0x62,0x62,0x63,0x60,0x57,0x4a,0x3a,0x2f,0x2c,0x36,0x4b,0x65,
0x7c,0x8c,0x97,0x9b,0x98,0x91,0x87,0x7c,0x6e,0x5e,0x50,0x45,0x3e,0x3a,0x36,0x38,
0x36,0x37,0x3a,0x3b,0x3a,0x3a,0x39,0x35,0x33,0x32,0x36,0x3a,0x3b,0x39,0x39,0x3b,
0x3a,0x39,0x38,0x38,0x37,0x38,0x38,0x37,0x39,0x3b,0x3c,0x3c,0x3a,0x38,0x39,0x39,
// Line 12
0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x36,0x36,0x37,0x38,0x37,0x35,0x35,0x34,0x35,
0x35,0x35,0x37,0x39,0x3a,0x39,0x37,0x35,0x34,0x35,0x37,0x38,0x39,0x39,0x38,0x38,
0x37,0x36,0x3a,0x3c,0x3c,0x3b,0x37,0x36,0x37,0x37,0x38,0x39,0x39,0x37,0x35,0x35,
0x37,0x38,0x39,0x35,0x31,0x33,0x39,0x46,0x57,0x6b,0x7a,0x7f,0x79,0x6c,0x5f,0x59,
0x58,0x5f,0x6d,0x76,0x78,0x75,0x6b,0x60,0x5b,0x5b,0x61,0x6a,0x71,0x73,0x71,0x6c,
0x65,0x5f,0x5b,0x5d,0x63,0x6c,0x72,0x75,0x73,0x6d,0x64,0x5f,0x59,0x58,0x5f,0x69,
0x70,0x73,0x72,0x6e,0x67,0x61,0x5d,0x5f,0x65,0x6d,0x72,0x73,0x70,0x6a,0x66,0x60,
0x5c,0x5c,0x60,0x69,0x70,0x73,0x71,0x6b,0x66,0x5e,0x58,0x5a,0x64,0x6f,0x79,0x7b,
0x78,0x72,0x68,0x61,0x5f,0x61,0x67,0x6c,0x6e,0x6f,0x70,0x73,0x79,0x84,0x92,0x9e,
0xa5,0xa8,0xa3,0x9a,0x8d,0x7e,0x6f,0x62,0x57,0x53,0x51,0x4c,0x44,0x3c,0x38,0x39,
0x3f,0x50,0x64,0x76,0x83,0x8b,0x8e,0x90,0x94,0x9a,0x9c,0x9f,0x9d,0x9c,0x9b,0x9b,
0x9b,0x99,0x93,0x88,0x7a,0x6a,0x5e,0x55,0x4d,0x44,0x3d,0x35,0x32,0x3a,0x4c,0x62,
0x75,0x7e,0x7e,0x75,0x68,0x5c,0x55,0x51,0x4b,0x44,0x39,0x31,0x32,0x41,0x58,0x6f,
0x7e,0x84,0x7d,0x6e,0x5f,0x52,0x4b,0x49,0x45,0x3f,0x3b,0x34,0x30,0x31,0x34,0x3b,
0x47,0x55,0x65,0x72,0x78,0x75,0x6f,0x68,0x61,0x5d,0x59,0x53,0x48,0x3e,0x34,0x32,
0x3b,0x4d,0x62,0x77,0x85,0x8e,0x8e,0x90,0x8c,0x88,0x7e,0x6e,0x5a,0x51,0x51,0x5a,
0x6a,0x76,0x7b,0x79,0x70,0x67,0x64,0x62,0x5f,0x55,0x45,0x35,0x2c,0x2f,0x41,0x5c,
0x77,0x83,0x81,0x76,0x68,0x5e,0x5a,0x54,0x4c,0x41,0x37,0x31,0x34,0x42,0x59,0x70,
0x81,0x81,0x74,0x68,0x5b,0x54,0x51,0x4d,0x43,0x3c,0x36,0x35,0x3d,0x50,0x68,0x7e,
0x8a,0x8e,0x90,0x92,0x97,0x9b,0xa1,0xa3,0xa2,0x9d,0x9a,0x9a,0x9c,0x9d,0x99,0x92,
0x83,0x6f,0x5e,0x53,0x55,0x60,0x6d,0x77,0x7a,0x77,0x70,0x67,0x60,0x5b,0x57,0x51,
0x47,0x39,0x30,0x2a,0x2b,0x32,0x39,0x3f,0x42,0x40,0x3c,0x38,0x36,0x36,0x37,0x36,
0x33,0x34,0x3c,0x4a,0x5d,0x72,0x7e,0x7f,0x77,0x69,0x5f,0x5d,0x61,0x68,0x6f,0x72,
0x72,0x76,0x7d,0x8b,0x9a,0xa3,0x9f,0x8e,0x78,0x62,0x53,0x51,0x58,0x65,0x73,0x7b,
0x7b,0x72,0x6e,0x65,0x5b,0x53,0x49,0x3e,0x37,0x31,0x2e,0x30,0x32,0x35,0x3b,0x46,
0x53,0x63,0x70,0x77,0x72,0x6d,0x62,0x59,0x55,0x53,0x51,0x4e,0x46,0x3a,0x33,0x31,
0x37,0x3f,0x44,0x44,0x41,0x3b,0x35,0x33,0x33,0x35,0x36,0x37,0x38,0x3e,0x4d,0x5f,
0x6f,0x7c,0x7d,0x74,0x67,0x5a,0x57,0x5f,0x6b,0x76,0x79,0x76,0x70,0x67,0x64,0x61,
0x61,0x61,0x5a,0x4b,0x3c,0x31,0x2e,0x37,0x49,0x5f,0x76,0x88,0x90,0x92,0x92,0x94,
0x97,0x9e,0xa3,0xa3,0x9c,0x8e,0x7c,0x6d,0x61,0x5b,0x5c,0x60,0x65,0x6d,0x76,0x80,
0x89,0x93,0x9a,0x9c,0x97,0x88,0x74,0x62,0x55,0x50,0x55,0x5f,0x6b,0x77,0x82,0x8b,
0x94,0x9c,0x9f,0x99,0x8c,0x77,0x62,0x53,0x4f,0x56,0x65,0x74,0x7d,0x7d,0x74,0x6a,
0x60,0x5c,0x5f,0x68,0x71,0x76,0x72,0x70,0x69,0x63,0x60,0x5c,0x57,0x53,0x4b,0x3e,
0x32,0x29,0x26,0x27,0x2e,0x38,0x47,0x56,0x64,0x6c,0x74,0x75,0x6f,0x68,0x62,0x5f,
0x60,0x64,0x69,0x71,0x76,0x7c,0x85,0x8e,0x95,0x99,0x98,0x8e,0x7a,0x64,0x50,0x41,
0x3a,0x35,0x33,0x35,0x37,0x39,0x3c,0x3d,0x3c,0x3c,0x39,0x38,0x38,0x3b,0x3d,0x39,
0x37,0x33,0x31,0x39,0x44,0x53,0x67,0x74,0x7c,0x83,0x88,0x92,0x9c,0xa2,0xa4,0xa3,
0xa0,0x9b,0x97,0x97,0x98,0x9a,0x9a,0x90,0x80,0x6d,0x5d,0x54,0x53,0x58,0x65,0x72,
0x7b,0x7b,0x72,0x66,0x5b,0x56,0x5b,0x64,0x6d,0x76,0x76,0x70,0x68,0x60,0x5c,0x62,
0x6a,0x6f,0x70,0x70,0x70,0x75,0x80,0x8d,0x97,0x9e,0x9c,0x90,0x7c,0x65,0x55,0x50,
0x53,0x5e,0x6a,0x78,0x87,0x94,0x9a,0x9a,0x97,0x8f,0x83,0x72,0x61,0x53,0x49,0x43,
0x3d,0x37,0x37,0x3b,0x44,0x53,0x64,0x75,0x81,0x89,0x8d,0x91,0x96,0x9b,0x9e,0xa3,
0x9f,0x95,0x88,0x77,0x65,0x5d,0x56,0x58,0x61,0x6c,0x75,0x7a,0x79,0x70,0x67,0x61,
0x5d,0x57,0x4e,0x46,0x3b,0x32,0x2a,0x26,0x2a,0x32,0x3d,0x41,0x3e,0x3c,0x38,0x33,
0x2e,0x30,0x34,0x39,0x3b,0x3b,0x38,0x37,0x36,0x35,0x38,0x48,0x58,0x6a,0x78,0x7b,
0x74,0x67,0x5b,0x55,0x58,0x64,0x72,0x7b,0x78,0x6f,0x64,0x5c,0x57,0x57,0x57,0x53,
0x49,0x3a,0x2c,0x23,0x23,0x29,0x35,0x3f,0x44,0x44,0x3d,0x34,0x2e,0x32,0x42,0x56,
0x68,0x76,0x79,0x72,0x66,0x59,0x54,0x57,0x61,0x6a,0x71,0x72,0x6f,0x69,0x63,0x5f,
0x5b,0x59,0x53,0x48,0x3e,0x35,0x30,0x2e,0x2e,0x32,0x39,0x45,0x53,0x61,0x6e,0x76,
0x76,0x6e,0x63,0x5a,0x5a,0x5e,0x62,0x67,0x6b,0x6f,0x75,0x7c,0x88,0x96,0x9d,0x98,
0x8a,0x76,0x64,0x51,0x46,0x3d,0x39,0x39,0x3a,0x3b,0x45,0x51,0x63,0x74,0x80,0x86,
0x8b,0x90,0x94,0x98,0x9d,0xa0,0x9e,0x95,0x85,0x73,0x65,0x5b,0x53,0x4e,0x48,0x43,
0x3e,0x38,0x32,0x30,0x30,0x33,0x38,0x39,0x38,0x32,0x2d,0x2b,0x31,0x43,0x57,0x67,
0x74,0x76,0x6c,0x61,0x57,0x51,0x52,0x50,0x48,0x3c,0x30,0x2e,0x37,0x49,0x60,0x77,
0x89,0x91,0x93,0x95,0x99,0x9f,0xa7,0xa9,0xa6,0xa0,0x99,0x94,0x94,0x97,0x9c,0x9e,
0x9d,0x98,0x96,0x97,0x98,0x98,0x98,0x97,0x91,0x88,0x7b,0x6d,0x60,0x56,0x4a,0x40,
0x36,0x30,0x2d,0x35,0x3f,0x4e,0x62,0x73,0x80,0x8a,0x91,0x96,0x98,0x92,0x85,0x74,
0x62,0x55,0x53,0x5c,0x6c,0x7a,0x80,0x7c,0x73,0x6c,0x65,0x61,0x5c,0x53,0x49,0x3d,
0x32,0x30,0x3a,0x4e,0x63,0x79,0x87,0x90,0x93,0x91,0x8c,0x83,0x78,0x6a,0x5b,0x4d,
0x44,0x3f,0x3d,0x39,0x35,0x33,0x35,0x38,0x3d,0x41,0x42,0x40,0x39,0x32,0x30,0x39,
0x49,0x5c,0x72,0x7b,0x7a,0x73,0x65,0x59,0x53,0x57,0x60,0x6c,0x71,0x71,0x6d,0x66,
0x5f,0x5a,0x5a,0x5a,0x55,0x4e,0x41,0x36,0x30,0x2d,0x2d,0x32,0x3b,0x44,0x4e,0x58,
0x61,0x67,0x73,0x7c,0x85,0x93,0x9d,0xa3,0xa4,0xa1,0x9e,0x9b,0x98,0x97,0x98,0x98,
0x94,0x88,0x78,0x66,0x56,0x4a,0x42,0x3d,0x3b,0x39,0x37,0x35,0x34,0x38,0x3f,0x44,
0x43,0x3e,0x38,0x32,0x30,0x35,0x40,0x4d,0x5f,0x6c,0x76,0x81,0x88,0x8e,0x98,0x9e,
0xa5,0xa9,0xa6,0x9b,0x8a,0x7a,0x6b,0x60,0x56,0x50,0x49,0x40,0x35,0x2e,0x34,0x44,
0x5b,0x70,0x7d,0x7f,0x79,0x6c,0x60,0x58,0x58,0x5d,0x65,0x6c,0x72,0x79,0x81,0x8a,
0x94,0xa0,0xa9,0xac,0xaa,0xa1,0x93,0x83,0x72,0x65,0x5b,0x56,0x50,0x4a,0x42,0x3b,
0x35,0x38,0x42,0x55,0x69,0x79,0x7f,0x79,0x69,0x5a,0x53,0x53,0x58,0x61,0x6a,0x72,
0x79,0x80,0x89,0x95,0xa0,0xa8,0xaa,0xa8,0xa0,0x95,0x89,0x79,0x6a,0x60,0x5a,0x59,
0x5c,0x65,0x6c,0x74,0x7c,0x85,0x8c,0x94,0x96,0x91,0x87,0x77,0x64,0x52,0x44,0x3e,
0x3c,0x3b,0x3b,0x3a,0x37,0x36,0x38,0x3d,0x43,0x4a,0x55,0x61,0x6d,0x79,0x84,0x8d,
0x93,0x97,0x99,0x9e,0xa0,0x9e,0x9b,0x9a,0x97,0x97,0x97,0x94,0x8e,0x84,0x76,0x65,
0x57,0x4c,0x45,0x41,0x3c,0x39,0x3d,0x45,0x51,0x64,0x76,0x83,0x8c,0x91,0x94,0x98,
0x9d,0xa0,0xa1,0x9e,0x98,0x94,0x93,0x94,0x97,0x96,0x8f,0x80,0x6c,0x5c,0x53,0x56,
0x60,0x6d,0x75,0x7b,0x78,0x6f,0x66,0x60,0x5a,0x57,0x4e,0x40,0x35,0x2e,0x30,0x3f,
0x53,0x69,0x7a,0x7e,0x77,0x68,0x59,0x4f,0x48,0x45,0x40,0x3a,0x35,0x30,0x2e,0x35,
0x3b,0x3f,0x3f,0x3c,0x38,0x38,0x37,0x38,0x36,0x32,0x2e,0x2e,0x36,0x46,0x5a,0x6d,
0x76,0x76,0x6f,0x67,0x5e,0x58,0x55,0x4e,0x47,0x3d,0x34,0x32,0x3d,0x4d,0x63,0x79,
0x8a,0x93,0x97,0x97,0x97,0x9a,0x9d,0x9d,0x9d,0x9b,0x99,0x97,0x95,0x95,0x97,0x99,
0x9a,0x9a,0x97,0x90,0x83,0x74,0x65,0x58,0x52,0x4c,0x44,0x3e,0x37,0x35,0x3c,0x4b,
0x5f,0x72,0x80,0x81,0x78,0x69,0x5b,0x54,0x57,0x5c,0x61,0x6a,0x70,0x77,0x81,0x8b,
0x94,0x9a,0x97,0x8a,0x76,0x62,0x52,0x44,0x3c,0x37,0x34,0x35,0x37,0x39,0x3d,0x3f,
0x3d,0x39,0x33,0x30,0x32,0x37,0x3a,0x39,0x35,0x30,0x30,0x37,0x46,0x59,0x71,0x7b,
0x79,0x72,0x64,0x5a,0x59,0x5f,0x68,0x73,0x78,0x77,0x72,0x6a,0x64,0x60,0x5f,0x5d,
0x56,0x4b,0x3b,0x2e,0x27,0x25,0x29,0x30,0x36,0x3b,0x3b,0x39,0x35,0x30,0x2d,0x2e,
0x31,0x35,0x37,0x39,0x3b,0x38,0x35,0x35,0x38,0x42,0x52,0x61,0x6f,0x7c,0x86,0x8e,
0x92,0x97,0x9c,0xa0,0xa2,0xa0,0x9d,0x9b,0x98,0x96,0x96,0x91,0x88,0x7b,0x6a,0x59,
0x4d,0x47,0x44,0x40,0x3c,0x39,0x36,0x35,0x36,0x38,0x3e,0x41,0x3c,0x35,0x30,0x2e,
0x36,0x43,0x55,0x69,0x76,0x7a,0x71,0x69,0x60,0x5b,0x5e,0x64,0x6a,0x73,0x75,0x77,
0x7d,0x88,0x95,0xa1,0xa7,0xa8,0xa4,0x9e,0x98,0x95,0x99,0x9d,0x9c,0x95,0x88,0x7a,
0x6c,0x5e,0x52,0x48,0x3d,0x33,0x2c,0x2b,0x33,0x47,0x5d,0x6f,0x7a,0x7b,0x74,0x69,
0x5d,0x55,0x4e,0x4d,0x48,0x3e,0x36,0x2e,0x2a,0x2a,0x2e,0x36,0x41,0x4c,0x56,0x5f,
0x6a,0x79,0x87,0x91,0x96,0x96,0x90,0x84,0x73,0x64,0x55,0x4a,0x41,0x3b,0x36,0x37,
0x38,0x39,0x38,0x37,0x36,0x38,0x38,0x37,0x32,0x35,0x36,0x35,0x36,0x36,0x36,0x38,
0x35,0x33,0x35,0x35,0x36,0x34,0x34,0x34,0x35,0x3a,0x3d,0x3e,0x3e,0x3b,0x38,0x38,
// Line 13
0x34,0x34,0x36,0x3b,0x3c,0x3b,0x3a,0x38,0x38,0x38,0x38,0x36,0x38,0x39,0x38,0x36,
0x34,0x36,0x38,0x39,0x37,0x36,0x36,0x38,0x38,0x3a,0x3a,0x3a,0x3a,0x38,0x38,0x38,
0x39,0x3a,0x3a,0x38,0x34,0x32,0x34,0x36,0x38,0x39,0x38,0x36,0x34,0x33,0x36,0x36,
0x3a,0x3b,0x3a,0x37,0x34,0x32,0x3a,0x48,0x5b,0x6d,0x78,0x7a,0x76,0x69,0x5d,0x57,
0x58,0x61,0x6c,0x74,0x74,0x71,0x6b,0x65,0x5f,0x5e,0x62,0x69,0x71,0x74,0x74,0x6f,
0x67,0x5e,0x5a,0x59,0x60,0x69,0x72,0x77,0x76,0x71,0x6a,0x61,0x5d,0x5e,0x65,0x6e,
0x74,0x75,0x74,0x6f,0x66,0x60,0x5d,0x60,0x67,0x6f,0x75,0x77,0x76,0x6f,0x64,0x5e,
0x57,0x57,0x5d,0x66,0x6e,0x74,0x73,0x6e,0x65,0x5d,0x5c,0x61,0x69,0x72,0x79,0x7c,
0x79,0x71,0x68,0x61,0x5f,0x62,0x66,0x6a,0x6c,0x6d,0x6e,0x73,0x79,0x84,0x91,0xa0,
0xaa,0xad,0xab,0xa2,0x91,0x7d,0x6d,0x60,0x59,0x53,0x4e,0x4a,0x43,0x3a,0x37,0x39,
0x44,0x56,0x6b,0x7c,0x87,0x8f,0x93,0x95,0x97,0x9a,0x9d,0x9f,0x9c,0x9a,0x99,0x9b,
0x9c,0x9b,0x94,0x88,0x79,0x68,0x5c,0x53,0x4d,0x46,0x3e,0x35,0x32,0x3b,0x50,0x66,
0x77,0x81,0x7e,0x72,0x65,0x5a,0x55,0x53,0x4e,0x43,0x38,0x30,0x34,0x3f,0x57,0x6e,
0x7c,0x83,0x7c,0x6b,0x5c,0x54,0x4e,0x4b,0x46,0x42,0x3a,0x34,0x2d,0x2d,0x32,0x3c,
0x44,0x55,0x60,0x6b,0x74,0x76,0x71,0x6b,0x63,0x5c,0x57,0x4f,0x45,0x3d,0x36,0x38,
0x41,0x52,0x67,0x7c,0x8b,0x93,0x98,0x9c,0x99,0x90,0x82,0x71,0x60,0x57,0x57,0x62,
0x71,0x7c,0x7e,0x79,0x70,0x66,0x5e,0x5d,0x58,0x4f,0x41,0x31,0x28,0x32,0x41,0x5b,
0x73,0x7f,0x80,0x79,0x6a,0x5d,0x56,0x53,0x4d,0x44,0x39,0x32,0x36,0x46,0x5e,0x73,
0x7f,0x82,0x7c,0x71,0x61,0x55,0x4d,0x48,0x43,0x3c,0x33,0x2c,0x29,0x2b,0x31,0x38,
0x45,0x56,0x66,0x73,0x77,0x75,0x71,0x6b,0x63,0x5d,0x57,0x50,0x46,0x3d,0x38,0x3a,
0x42,0x53,0x67,0x7e,0x8d,0x97,0x98,0x95,0x90,0x87,0x7a,0x6b,0x5d,0x51,0x45,0x3f,
0x3a,0x39,0x38,0x37,0x36,0x39,0x3d,0x40,0x3f,0x3d,0x3a,0x37,0x37,0x36,0x35,0x34,
0x33,0x31,0x36,0x44,0x59,0x6a,0x7a,0x7a,0x73,0x6b,0x62,0x5d,0x60,0x67,0x6e,0x73,
0x76,0x7a,0x83,0x8e,0x97,0x9b,0x97,0x8a,0x76,0x62,0x51,0x44,0x3c,0x36,0x33,0x36,
0x3e,0x49,0x57,0x67,0x76,0x82,0x8b,0x90,0x93,0x92,0x8c,0x80,0x72,0x61,0x55,0x4d,
0x48,0x41,0x3d,0x38,0x3a,0x48,0x5b,0x6e,0x7d,0x81,0x7a,0x6b,0x5c,0x55,0x5a,0x69,
0x77,0x7e,0x7e,0x74,0x67,0x5d,0x5a,0x5d,0x5e,0x58,0x4b,0x3c,0x32,0x34,0x44,0x5d,
0x76,0x86,0x8b,0x7e,0x6d,0x60,0x57,0x50,0x49,0x3f,0x34,0x2e,0x32,0x42,0x58,0x6f,
0x7d,0x81,0x7a,0x6d,0x60,0x57,0x53,0x4d,0x47,0x3f,0x38,0x36,0x3e,0x51,0x68,0x7e,
0x8c,0x93,0x95,0x95,0x95,0x9a,0x9f,0xa2,0x9f,0x9a,0x97,0x97,0x99,0x9c,0xa1,0xa3,
0xa3,0xa2,0x9c,0x95,0x8b,0x7d,0x6d,0x5e,0x51,0x48,0x42,0x41,0x3d,0x38,0x35,0x34,
0x36,0x3b,0x3e,0x3e,0x3c,0x37,0x33,0x32,0x35,0x3a,0x3d,0x3e,0x3b,0x36,0x38,0x39,
0x3a,0x3d,0x3f,0x3e,0x38,0x33,0x35,0x41,0x51,0x63,0x73,0x7b,0x79,0x72,0x68,0x5e,
0x57,0x54,0x51,0x4a,0x41,0x36,0x2d,0x2c,0x31,0x3b,0x45,0x48,0x44,0x3b,0x32,0x2f,
0x33,0x42,0x54,0x66,0x76,0x7d,0x82,0x8b,0x95,0x9f,0xa5,0xa4,0x9f,0x9c,0x9b,0x9b,
0x9b,0x9e,0x9e,0x98,0x8b,0x7a,0x6d,0x63,0x5a,0x51,0x48,0x3e,0x36,0x36,0x3e,0x4d,
0x62,0x73,0x7e,0x7c,0x71,0x63,0x57,0x50,0x4c,0x48,0x44,0x3a,0x2f,0x2b,0x2e,0x36,
0x3e,0x42,0x42,0x41,0x3d,0x3a,0x36,0x3a,0x3a,0x36,0x32,0x32,0x3a,0x4d,0x62,0x73,
0x7a,0x79,0x70,0x67,0x5c,0x54,0x51,0x4e,0x49,0x41,0x38,0x30,0x2e,0x34,0x3d,0x43,
0x45,0x45,0x40,0x3d,0x38,0x34,0x33,0x36,0x3a,0x3e,0x3e,0x3a,0x33,0x32,0x34,0x3d,
0x4a,0x5b,0x6a,0x79,0x79,0x70,0x66,0x5e,0x59,0x57,0x52,0x4b,0x44,0x3d,0x38,0x34,
0x34,0x38,0x3e,0x45,0x4b,0x53,0x5d,0x6a,0x76,0x81,0x8b,0x93,0x97,0x9d,0xa2,0xa5,
0xa0,0x95,0x84,0x73,0x64,0x5b,0x54,0x4f,0x48,0x42,0x38,0x30,0x34,0x42,0x57,0x6f,
0x7d,0x7f,0x77,0x6a,0x5c,0x54,0x57,0x61,0x6f,0x79,0x78,0x70,0x67,0x5f,0x5a,0x59,
0x58,0x54,0x4c,0x3e,0x30,0x2b,0x2d,0x36,0x3e,0x45,0x47,0x44,0x40,0x3b,0x36,0x36,
0x35,0x34,0x34,0x34,0x3a,0x49,0x5b,0x6a,0x75,0x79,0x73,0x65,0x5b,0x57,0x5c,0x67,
0x71,0x77,0x79,0x74,0x6b,0x63,0x61,0x64,0x68,0x6a,0x6b,0x6d,0x70,0x76,0x7f,0x8c,
0x97,0x9d,0x98,0x8a,0x76,0x61,0x51,0x43,0x3a,0x34,0x31,0x33,0x3a,0x45,0x5a,0x6e,
0x7c,0x7d,0x78,0x69,0x5b,0x53,0x54,0x5b,0x6b,0x74,0x77,0x73,0x69,0x5f,0x59,0x5a,
0x60,0x6b,0x74,0x77,0x72,0x69,0x61,0x5d,0x5c,0x5b,0x59,0x55,0x4c,0x3f,0x34,0x2d,
0x2c,0x31,0x36,0x3c,0x46,0x54,0x63,0x6f,0x74,0x75,0x71,0x69,0x5d,0x56,0x5b,0x65,
0x70,0x78,0x77,0x70,0x67,0x60,0x5b,0x5f,0x66,0x6c,0x6f,0x6e,0x6d,0x71,0x7a,0x87,
0x95,0xa0,0xa8,0xa9,0xa4,0x9c,0x96,0x93,0x91,0x91,0x92,0x91,0x8b,0x7d,0x6b,0x5a,
0x4e,0x47,0x44,0x41,0x3c,0x37,0x33,0x33,0x34,0x37,0x3d,0x3d,0x38,0x33,0x2f,0x30,
0x38,0x47,0x5a,0x6e,0x79,0x7a,0x72,0x69,0x60,0x5b,0x5c,0x60,0x66,0x6f,0x76,0x7a,
0x82,0x8c,0x97,0xa0,0xa4,0xa4,0xa3,0x9e,0x96,0x89,0x7a,0x69,0x5b,0x52,0x4f,0x57,
0x65,0x72,0x78,0x74,0x69,0x5d,0x54,0x56,0x5d,0x6b,0x77,0x7b,0x74,0x6e,0x66,0x63,
0x64,0x65,0x63,0x5c,0x4c,0x3c,0x30,0x2e,0x3a,0x4d,0x65,0x7a,0x8c,0x99,0x9c,0x98,
0x92,0x88,0x7c,0x6e,0x5f,0x51,0x48,0x41,0x3c,0x39,0x35,0x33,0x34,0x35,0x38,0x3e,
0x42,0x41,0x38,0x36,0x33,0x38,0x44,0x53,0x63,0x71,0x7c,0x83,0x88,0x8e,0x96,0x9c,
0x9d,0x9a,0x98,0x97,0x97,0x98,0x9a,0x9a,0x96,0x8d,0x7f,0x70,0x64,0x5a,0x50,0x46,
0x3b,0x34,0x32,0x3a,0x4b,0x61,0x76,0x81,0x81,0x79,0x6c,0x60,0x58,0x51,0x49,0x42,
0x39,0x32,0x34,0x3e,0x4f,0x65,0x79,0x89,0x93,0x97,0x97,0x93,0x8b,0x80,0x72,0x64,
0x55,0x48,0x42,0x3f,0x3c,0x3a,0x3a,0x3a,0x3b,0x3b,0x3c,0x3d,0x3b,0x38,0x33,0x36,
0x37,0x36,0x36,0x36,0x36,0x3f,0x4d,0x60,0x71,0x7c,0x7f,0x79,0x6b,0x60,0x5b,0x5e,
0x64,0x67,0x6f,0x75,0x7a,0x84,0x8e,0x97,0x9e,0x9a,0x8b,0x79,0x62,0x4f,0x3f,0x37,
0x32,0x33,0x37,0x3a,0x38,0x3a,0x3a,0x3c,0x40,0x4a,0x57,0x67,0x73,0x77,0x73,0x69,
0x60,0x5b,0x5d,0x60,0x67,0x6f,0x74,0x78,0x7f,0x87,0x94,0x9f,0xa5,0xa7,0xa5,0x9f,
0x94,0x89,0x7c,0x6c,0x5f,0x58,0x58,0x60,0x6d,0x77,0x7a,0x74,0x69,0x5e,0x5a,0x5d,
0x64,0x6c,0x71,0x74,0x76,0x79,0x82,0x91,0x9d,0xa2,0x9e,0x8f,0x79,0x60,0x55,0x50,
0x52,0x5d,0x6a,0x76,0x83,0x8e,0x98,0x9d,0x9b,0x94,0x86,0x74,0x5f,0x4e,0x45,0x41,
0x3d,0x3a,0x3a,0x38,0x38,0x36,0x38,0x3c,0x44,0x4f,0x59,0x63,0x6d,0x7a,0x87,0x92,
0x9a,0x9b,0x94,0x86,0x74,0x63,0x5a,0x59,0x5c,0x63,0x6f,0x79,0x81,0x8b,0x94,0x9c,
0x9f,0x97,0x87,0x72,0x5d,0x50,0x4b,0x56,0x63,0x71,0x7a,0x7a,0x71,0x69,0x60,0x59,
0x55,0x4f,0x47,0x3e,0x34,0x2c,0x2a,0x2d,0x36,0x3f,0x48,0x4f,0x57,0x63,0x70,0x7d,
0x89,0x94,0x9a,0x9b,0x92,0x85,0x77,0x67,0x56,0x49,0x3f,0x38,0x30,0x31,0x36,0x43,
0x55,0x69,0x77,0x7f,0x7b,0x6b,0x5e,0x56,0x58,0x64,0x71,0x79,0x79,0x73,0x6a,0x60,
0x5b,0x5b,0x60,0x67,0x6a,0x6c,0x6f,0x76,0x80,0x8c,0x95,0x98,0x95,0x89,0x74,0x5f,
0x4b,0x3f,0x38,0x33,0x30,0x30,0x32,0x33,0x34,0x38,0x3a,0x3a,0x38,0x34,0x30,0x32,
0x3a,0x49,0x5d,0x6f,0x7a,0x7a,0x75,0x68,0x5e,0x5d,0x60,0x65,0x6a,0x6e,0x72,0x78,
0x81,0x8c,0x97,0x9b,0x97,0x8b,0x77,0x63,0x53,0x48,0x43,0x3f,0x3c,0x38,0x33,0x31,
0x33,0x37,0x3d,0x3d,0x38,0x31,0x2c,0x2c,0x34,0x46,0x5d,0x70,0x79,0x77,0x6e,0x64,
0x5b,0x58,0x5b,0x62,0x68,0x6e,0x71,0x78,0x82,0x8d,0x97,0x9c,0x98,0x8c,0x77,0x66,
0x51,0x42,0x3c,0x3a,0x36,0x34,0x34,0x36,0x3a,0x3b,0x3b,0x3b,0x39,0x34,0x32,0x31,
0x33,0x34,0x3a,0x39,0x37,0x36,0x37,0x39,0x3d,0x3e,0x3d,0x3b,0x37,0x34,0x37,0x40,
0x4d,0x5e,0x6d,0x76,0x79,0x73,0x69,0x60,0x59,0x55,0x4e,0x46,0x3d,0x35,0x31,0x30,
0x34,0x3a,0x3e,0x3f,0x3c,0x39,0x38,0x35,0x38,0x36,0x31,0x2f,0x31,0x3a,0x4d,0x60,
0x71,0x79,0x78,0x6e,0x62,0x5a,0x57,0x57,0x55,0x4c,0x3f,0x34,0x32,0x3d,0x54,0x6e,
0x81,0x85,0x7a,0x69,0x5a,0x51,0x53,0x5d,0x6b,0x76,0x79,0x75,0x6d,0x66,0x60,0x5e,
0x61,0x6b,0x71,0x73,0x71,0x6b,0x65,0x60,0x5d,0x5a,0x57,0x55,0x4d,0x42,0x36,0x2c,
0x28,0x2c,0x32,0x3a,0x44,0x4d,0x55,0x5e,0x68,0x75,0x85,0x90,0x97,0x98,0x90,0x82,
0x71,0x62,0x55,0x49,0x43,0x3b,0x35,0x36,0x3d,0x49,0x5e,0x6f,0x7c,0x81,0x7b,0x6b,
0x57,0x4e,0x51,0x5d,0x6b,0x75,0x77,0x71,0x63,0x57,0x53,0x57,0x60,0x6b,0x72,0x73,
0x6f,0x68,0x60,0x5c,0x5a,0x5a,0x59,0x54,0x4b,0x3e,0x33,0x2c,0x29,0x2f,0x38,0x42,
0x45,0x42,0x3d,0x39,0x36,0x35,0x33,0x38,0x38,0x3a,0x3a,0x3a,0x36,0x39,0x38,0x34,
0x33,0x31,0x32,0x35,0x36,0x36,0x3a,0x3b,0x39,0x36,0x35,0x36,0x37,0x38,0x37,0x37,
// Line 14
0x3b,0x3c,0x3d,0x3b,0x3c,0x38,0x37,0x36,0x37,0x39,0x37,0x36,0x36,0x37,0x37,0x39,
0x38,0x38,0x39,0x38,0x36,0x34,0x36,0x38,0x3a,0x3a,0x38,0x37,0x37,0x36,0x34,0x34,
0x34,0x38,0x38,0x37,0x36,0x36,0x36,0x36,0x35,0x36,0x36,0x36,0x36,0x37,0x34,0x38,
0x36,0x34,0x35,0x35,0x35,0x38,0x3a,0x3d,0x45,0x4e,0x57,0x61,0x6d,0x79,0x83,0x8a,
0x8e,0x92,0x94,0x97,0x98,0x98,0x98,0x98,0x97,0x95,0x93,0x94,0x98,0x9a,0x98,0x95,
0x92,0x8d,0x88,0x83,0x7c,0x73,0x69,0x5d,0x56,0x4f,0x4c,0x49,0x45,0x41,0x3f,0x3e,
0x3d,0x39,0x3a,0x38,0x37,0x36,0x34,0x34,0x39,0x37,0x35,0x36,0x37,0x39,0x3b,0x3d,
0x42,0x4a,0x54,0x5d,0x64,0x6d,0x77,0x81,0x88,0x8e,0x94,0x99,0x99,0x97,0x95,0x93,
0x93,0x94,0x93,0x93,0x94,0x95,0x96,0x95,0x95,0x94,0x92,0x8c,0x83,0x79,0x72,0x67,
0x5d,0x54,0x4e,0x49,0x44,0x3e,0x39,0x38,0x3a,0x3a,0x38,0x37,0x36,0x35,0x34,0x32,
0x32,0x34,0x36,0x36,0x38,0x38,0x3a,0x3d,0x3f,0x45,0x4d,0x57,0x5f,0x67,0x6e,0x77,
0x80,0x89,0x8f,0x93,0x97,0x98,0x96,0x94,0x93,0x95,0x97,0x98,0x97,0x97,0x97,0x97,
0x96,0x93,0x90,0x8c,0x89,0x81,0x77,0x6f,0x65,0x5d,0x55,0x4e,0x49,0x45,0x40,0x3b,
0x39,0x3a,0x39,0x39,0x38,0x38,0x38,0x39,0x39,0x38,0x38,0x37,0x38,0x39,0x3a,0x3c,
0x40,0x44,0x47,0x50,0x5a,0x65,0x6d,0x75,0x7d,0x86,0x8d,0x92,0x94,0x97,0x9a,0x9a,
0x9b,0x99,0x98,0x99,0x9b,0x99,0x98,0x97,0x98,0x98,0x95,0x92,0x8c,0x86,0x7e,0x75,
0x6d,0x65,0x5c,0x54,0x4d,0x47,0x42,0x3b,0x36,0x37,0x39,0x3b,0x3c,0x3d,0x3b,0x3b,
0x3b,0x3a,0x38,0x38,0x39,0x39,0x3b,0x3b,0x3c,0x40,0x45,0x4a,0x53,0x5d,0x69,0x73,
0x7a,0x82,0x87,0x8d,0x92,0x94,0x98,0x99,0x99,0x97,0x95,0x94,0x95,0x95,0x93,0x95,
0x96,0x98,0x99,0x98,0x96,0x92,0x8c,0x83,0x78,0x6f,0x66,0x5d,0x55,0x4e,0x47,0x42,
0x3e,0x3b,0x3b,0x3b,0x3d,0x3d,0x3d,0x3a,0x37,0x37,0x38,0x37,0x39,0x3a,0x37,0x38,
0x38,0x3b,0x3d,0x42,0x47,0x50,0x59,0x63,0x6e,0x76,0x7e,0x86,0x8c,0x90,0x92,0x95,
0x97,0x97,0x97,0x95,0x94,0x95,0x95,0x95,0x97,0x99,0x9b,0x9b,0x98,0x92,0x8c,0x88,
0x81,0x7a,0x75,0x6a,0x5e,0x54,0x4c,0x44,0x42,0x41,0x3d,0x3b,0x3b,0x3a,0x38,0x38,
0x37,0x38,0x39,0x39,0x38,0x39,0x38,0x38,0x37,0x38,0x3d,0x43,0x48,0x4e,0x56,0x5f,
0x69,0x73,0x7a,0x82,0x8b,0x92,0x96,0x98,0x98,0x9a,0x9a,0x9a,0x99,0x97,0x97,0x96,
0x93,0x93,0x93,0x95,0x96,0x96,0x90,0x8a,0x83,0x7d,0x74,0x6c,0x63,0x5a,0x52,0x4b,
0x44,0x41,0x41,0x3f,0x3d,0x3b,0x3a,0x39,0x37,0x34,0x34,0x38,0x3b,0x3a,0x39,0x3a,
0x3b,0x3d,0x3d,0x3d,0x3d,0x3b,0x3a,0x3a,0x3a,0x3b,0x3b,0x3d,0x3b,0x3b,0x3b,0x3b,
0x3b,0x3d,0x3b,0x39,0x39,0x38,0x38,0x38,0x39,0x38,0x39,0x38,0x38,0x39,0x39,0x38,
0x39,0x3b,0x3a,0x39,0x38,0x36,0x36,0x38,0x39,0x3b,0x3c,0x3d,0x3b,0x3a,0x39,0x3b,
0x3e,0x3e,0x3b,0x39,0x39,0x3a,0x38,0x37,0x38,0x38,0x39,0x37,0x36,0x34,0x34,0x34,
0x37,0x39,0x3b,0x3b,0x3a,0x39,0x38,0x3a,0x3a,0x39,0x37,0x36,0x34,0x36,0x36,0x36,
0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x39,0x3a,0x3b,0x41,0x49,0x4f,0x57,0x5f,0x69,
0x73,0x7a,0x83,0x8c,0x90,0x92,0x92,0x92,0x93,0x95,0x96,0x94,0x93,0x93,0x93,0x92,
0x90,0x91,0x92,0x96,0x96,0x93,0x92,0x92,0x92,0x94,0x95,0x96,0x96,0x95,0x94,0x94,
0x97,0x99,0x98,0x9b,0x98,0x96,0x97,0x99,0x9a,0x9b,0x99,0x93,0x91,0x91,0x92,0x93,
0x93,0x8f,0x88,0x82,0x7b,0x73,0x6a,0x63,0x5b,0x56,0x4e,0x45,0x3f,0x3b,0x39,0x3b,
0x3a,0x3a,0x39,0x39,0x38,0x38,0x37,0x38,0x39,0x3b,0x3b,0x38,0x39,0x38,0x38,0x39,
0x39,0x37,0x38,0x3b,0x3d,0x39,0x36,0x34,0x36,0x3a,0x3b,0x39,0x37,0x37,0x36,0x37,
0x36,0x37,0x38,0x39,0x38,0x37,0x34,0x34,0x36,0x39,0x3a,0x3a,0x3b,0x3d,0x3d,0x3b,
0x38,0x38,0x3b,0x3c,0x3b,0x3b,0x38,0x37,0x37,0x38,0x37,0x35,0x37,0x38,0x36,0x35,
0x34,0x32,0x34,0x34,0x34,0x37,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x37,0x37,0x3a,0x3b,
0x39,0x37,0x38,0x39,0x38,0x37,0x37,0x38,0x3b,0x3b,0x39,0x37,0x36,0x37,0x39,0x38,
0x38,0x37,0x38,0x36,0x34,0x35,0x35,0x34,0x37,0x37,0x36,0x37,0x37,0x36,0x38,0x38,
0x38,0x37,0x38,0x38,0x38,0x39,0x37,0x34,0x34,0x35,0x36,0x36,0x36,0x36,0x39,0x3b,
0x3b,0x3b,0x3a,0x3a,0x3a,0x38,0x34,0x34,0x34,0x34,0x32,0x32,0x32,0x34,0x36,0x36,
0x36,0x3a,0x3b,0x3b,0x3b,0x3a,0x38,0x3a,0x38,0x38,0x38,0x3a,0x3a,0x3a,0x3e,0x45,
0x4f,0x58,0x61,0x6a,0x75,0x7e,0x84,0x8a,0x8f,0x94,0x97,0x97,0x95,0x94,0x94,0x95,
0x96,0x97,0x97,0x96,0x97,0x96,0x96,0x96,0x97,0x97,0x96,0x96,0x96,0x98,0x98,0x97,
0x95,0x97,0x96,0x93,0x93,0x93,0x94,0x93,0x92,0x92,0x96,0x99,0x9a,0x99,0x99,0x98,
0x9a,0x9a,0x99,0x97,0x97,0x98,0x97,0x97,0x96,0x97,0x97,0x93,0x92,0x93,0x93,0x95,
0x96,0x97,0x96,0x97,0x97,0x98,0x98,0x99,0x99,0x98,0x96,0x95,0x94,0x95,0x94,0x94,
0x97,0x99,0x98,0x98,0x97,0x96,0x96,0x96,0x95,0x95,0x96,0x97,0x96,0x94,0x93,0x92,
0x92,0x92,0x92,0x94,0x96,0x96,0x94,0x94,0x95,0x97,0x98,0x98,0x95,0x92,0x8c,0x85,
0x7e,0x76,0x6f,0x68,0x5d,0x53,0x4b,0x46,0x41,0x3d,0x38,0x36,0x38,0x3a,0x39,0x37,
0x38,0x39,0x39,0x39,0x38,0x35,0x39,0x36,0x35,0x37,0x38,0x39,0x38,0x38,0x38,0x39,
0x3a,0x39,0x37,0x37,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x36,0x38,0x3c,0x3e,0x3b,
0x38,0x36,0x36,0x38,0x37,0x36,0x36,0x34,0x34,0x32,0x33,0x34,0x34,0x34,0x34,0x35,
0x35,0x35,0x36,0x36,0x35,0x37,0x38,0x3a,0x39,0x3a,0x39,0x39,0x37,0x36,0x36,0x39,
0x38,0x35,0x34,0x36,0x36,0x35,0x34,0x36,0x38,0x38,0x38,0x37,0x36,0x34,0x36,0x39,
0x39,0x39,0x39,0x38,0x38,0x39,0x3a,0x3b,0x3c,0x3b,0x38,0x38,0x36,0x35,0x36,0x37,
0x3a,0x3e,0x44,0x4b,0x53,0x5f,0x68,0x6f,0x79,0x82,0x88,0x8f,0x90,0x90,0x93,0x96,
0x95,0x94,0x93,0x94,0x96,0x97,0x97,0x98,0x99,0x98,0x95,0x94,0x94,0x96,0x97,0x96,
0x94,0x95,0x95,0x94,0x94,0x95,0x95,0x95,0x94,0x94,0x94,0x95,0x94,0x92,0x93,0x96,
0x98,0x9b,0x9a,0x99,0x99,0x98,0x98,0x97,0x96,0x92,0x8b,0x82,0x76,0x6c,0x63,0x5c,
0x55,0x4e,0x47,0x41,0x3c,0x3a,0x39,0x3a,0x3b,0x3b,0x39,0x37,0x36,0x37,0x38,0x38,
0x38,0x39,0x38,0x36,0x38,0x3b,0x3b,0x3b,0x39,0x38,0x38,0x38,0x3b,0x3b,0x3d,0x3a,
0x37,0x37,0x35,0x35,0x38,0x39,0x39,0x38,0x37,0x38,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,
0x39,0x37,0x36,0x37,0x38,0x37,0x37,0x3a,0x3b,0x3b,0x3b,0x3b,0x3a,0x38,0x36,0x37,
0x39,0x3a,0x37,0x32,0x34,0x34,0x33,0x34,0x34,0x35,0x38,0x37,0x36,0x36,0x37,0x39,
0x3b,0x39,0x35,0x34,0x36,0x37,0x35,0x34,0x34,0x36,0x37,0x35,0x35,0x38,0x3b,0x3b,
0x3c,0x3b,0x3b,0x3b,0x39,0x38,0x37,0x37,0x38,0x37,0x34,0x35,0x37,0x38,0x36,0x35,
0x37,0x3b,0x3a,0x3a,0x3a,0x3b,0x3a,0x37,0x34,0x34,0x35,0x36,0x36,0x37,0x37,0x38,
0x3a,0x3a,0x38,0x3b,0x38,0x38,0x3b,0x3b,0x3a,0x38,0x35,0x33,0x34,0x37,0x39,0x37,
0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x3a,0x3a,0x37,0x37,0x37,0x39,0x39,0x37,0x35,0x37,
0x37,0x37,0x38,0x37,0x36,0x35,0x36,0x37,0x37,0x39,0x38,0x37,0x37,0x35,0x36,0x37,
0x37,0x36,0x34,0x34,0x36,0x34,0x34,0x34,0x36,0x37,0x35,0x33,0x35,0x38,0x38,0x39,
0x38,0x38,0x38,0x37,0x37,0x38,0x3a,0x3b,0x39,0x39,0x37,0x38,0x3a,0x3a,0x38,0x37,
0x36,0x35,0x34,0x34,0x34,0x37,0x38,0x39,0x39,0x3b,0x3d,0x3d,0x3d,0x3c,0x3d,0x3f,
0x3f,0x3d,0x3d,0x39,0x36,0x36,0x35,0x34,0x36,0x36,0x34,0x34,0x36,0x37,0x37,0x38,
0x39,0x38,0x38,0x37,0x36,0x38,0x37,0x37,0x38,0x38,0x36,0x38,0x38,0x38,0x3a,0x3b,
0x3d,0x3d,0x3a,0x37,0x37,0x38,0x38,0x36,0x35,0x34,0x33,0x32,0x33,0x35,0x38,0x3a,
0x39,0x38,0x37,0x37,0x34,0x37,0x36,0x35,0x35,0x34,0x29,0x31,0x34,0x3c,0x3f,0x3f,
0x3b,0x3b,0x35,0x34,0x34,0x34,0x37,0x37,0x35,0x34,0x34,0x34,0x34,0x34,0x34,0x34,
0x34,0x35,0x34,0x32,0x32,0x34,0x34,0x36,0x37,0x38,0x37,0x35,0x34,0x34,0x36,0x37,
0x37,0x38,0x36,0x34,0x35,0x37,0x39,0x3d,0x3d,0x3b,0x3a,0x38,0x38,0x39,0x39,0x38,
0x37,0x37,0x36,0x34,0x34,0x33,0x34,0x35,0x36,0x36,0x37,0x36,0x36,0x36,0x37,0x38,
0x37,0x37,0x37,0x35,0x34,0x35,0x34,0x34,0x36,0x37,0x39,0x37,0x36,0x37,0x37,0x36,
0x36,0x37,0x37,0x37,0x37,0x35,0x34,0x35,0x36,0x37,0x37,0x36,0x36,0x37,0x36,0x35,
0x35,0x36,0x36,0x36,0x36,0x34,0x34,0x34,0x34,0x36,0x38,0x39,0x39,0x39,0x37,0x36,
0x38,0x37,0x34,0x34,0x34,0x34,0x34,0x34,0x37,0x37,0x36,0x35,0x37,0x3a,0x3b,0x37,
0x35,0x34,0x32,0x34,0x34,0x35,0x38,0x39,0x38,0x37,0x36,0x39,0x3b,0x3d,0x3a,0x38,
0x37,0x36,0x35,0x34,0x34,0x34,0x34,0x31,0x30,0x30,0x32,0x34,0x36,0x37,0x38,0x37,
0x35,0x34,0x32,0x34,0x34,0x35,0x34,0x32,0x30,0x32,0x33,0x34,0x35,0x36,0x38,0x39,
0x37,0x36,0x36,0x37,0x37,0x37,0x38,0x39,0x37,0x36,0x34,0x35,0x39,0x3b,0x3b,0x3b,
// Line 15
0x3b,0x3b,0x38,0x37,0x37,0x38,0x3a,0x3a,0x3a,0x3a,0x3c,0x3c,0x3b,0x3a,0x3c,0x3d,
0x3b,0x3a,0x37,0x37,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x38,0x36,0x37,0x38,0x37,
0x36,0x37,0x37,0x38,0x39,0x38,0x37,0x38,0x38,0x38,0x39,0x3b,0x3b,0x3a,0x3a,0x3c,
0x3d,0x40,0x40,0x40,0x3e,0x39,0x34,0x35,0x3c,0x4d,0x63,0x75,0x7f,0x80,0x7a,0x6e,
0x64,0x60,0x66,0x71,0x7a,0x7e,0x7c,0x75,0x6c,0x65,0x64,0x67,0x6e,0x76,0x7b,0x7d,
0x79,0x72,0x69,0x62,0x5f,0x62,0x69,0x71,0x77,0x7a,0x78,0x72,0x69,0x64,0x62,0x66,
0x6f,0x77,0x7b,0x7a,0x76,0x70,0x68,0x63,0x61,0x64,0x6b,0x72,0x76,0x77,0x75,0x71,
0x6a,0x62,0x60,0x65,0x6c,0x73,0x78,0x79,0x74,0x6e,0x66,0x60,0x5e,0x63,0x6c,0x75,
0x7d,0x7f,0x7b,0x72,0x68,0x64,0x67,0x6c,0x71,0x72,0x75,0x74,0x73,0x77,0x80,0x8d,
0x9a,0xa6,0xaa,0xab,0xa5,0x9c,0x8e,0x80,0x71,0x66,0x5c,0x55,0x4e,0x48,0x41,0x3a,
0x37,0x3a,0x47,0x5b,0x6e,0x7f,0x8b,0x93,0x97,0x9a,0x9e,0xa2,0xa7,0xa8,0xa2,0x98,
0x88,0x78,0x6d,0x64,0x60,0x61,0x68,0x6e,0x75,0x7d,0x86,0x8e,0x96,0x9c,0xa2,0xa6,
0xa7,0xa4,0x9e,0x99,0x96,0x97,0x99,0x9b,0x98,0x90,0x80,0x6e,0x5f,0x59,0x5b,0x66,
0x73,0x7c,0x81,0x7d,0x73,0x67,0x61,0x62,0x67,0x6e,0x75,0x79,0x77,0x71,0x68,0x64,
0x62,0x66,0x6e,0x74,0x79,0x7c,0x7a,0x72,0x69,0x64,0x64,0x6a,0x73,0x7b,0x7d,0x7e,
0x78,0x6e,0x66,0x60,0x5f,0x5f,0x59,0x4b,0x40,0x35,0x2c,0x2b,0x2d,0x34,0x3c,0x45,
0x4f,0x5a,0x68,0x74,0x7a,0x7c,0x75,0x6a,0x60,0x5b,0x62,0x70,0x7b,0x81,0x7d,0x73,
0x66,0x5f,0x5e,0x64,0x6d,0x78,0x7e,0x7b,0x73,0x69,0x62,0x5e,0x5b,0x5a,0x58,0x53,
0x49,0x3c,0x30,0x29,0x2d,0x37,0x41,0x47,0x47,0x42,0x3a,0x33,0x30,0x3b,0x4d,0x60,
0x72,0x81,0x8a,0x91,0x97,0x9a,0x9f,0xa4,0xa6,0xa6,0xa1,0x9c,0x98,0x97,0x99,0x99,
0x96,0x90,0x81,0x6e,0x60,0x5a,0x5c,0x65,0x73,0x7e,0x83,0x80,0x75,0x69,0x62,0x60,
0x64,0x6d,0x75,0x79,0x77,0x70,0x68,0x64,0x61,0x64,0x6a,0x72,0x78,0x7a,0x79,0x74,
0x6b,0x64,0x62,0x66,0x71,0x7a,0x80,0x80,0x79,0x6d,0x64,0x5f,0x5c,0x5c,0x59,0x53,
0x49,0x3d,0x30,0x27,0x2b,0x34,0x3f,0x48,0x4a,0x43,0x3a,0x33,0x33,0x3d,0x51,0x66,
0x79,0x82,0x82,0x79,0x6d,0x60,0x59,0x53,0x4d,0x46,0x3e,0x38,0x33,0x30,0x30,0x34,
0x3c,0x4a,0x5c,0x68,0x73,0x77,0x77,0x71,0x69,0x60,0x5d,0x5a,0x53,0x4a,0x3d,0x32,
0x2d,0x2c,0x2f,0x3a,0x41,0x46,0x45,0x3e,0x36,0x33,0x33,0x34,0x37,0x3c,0x3e,0x3e,
0x3b,0x37,0x35,0x3a,0x43,0x52,0x64,0x75,0x7f,0x7f,0x76,0x69,0x60,0x5e,0x65,0x70,
0x7a,0x81,0x80,0x7a,0x6c,0x63,0x64,0x69,0x70,0x78,0x7f,0x80,0x7a,0x70,0x67,0x60,
0x60,0x62,0x5f,0x5c,0x4f,0x3d,0x30,0x28,0x28,0x31,0x3c,0x45,0x46,0x3f,0x34,0x2d,
0x2d,0x3b,0x54,0x6c,0x7d,0x83,0x80,0x77,0x6a,0x60,0x59,0x56,0x51,0x48,0x3e,0x36,
0x33,0x36,0x3b,0x3f,0x40,0x40,0x3c,0x3b,0x38,0x38,0x38,0x36,0x33,0x30,0x34,0x43,
0x56,0x68,0x76,0x7a,0x76,0x6c,0x61,0x5d,0x5d,0x5c,0x56,0x4a,0x3d,0x36,0x3a,0x4d,
0x65,0x7c,0x8e,0x8c,0x7e,0x6d,0x60,0x5f,0x64,0x6f,0x78,0x7d,0x7a,0x71,0x68,0x64,
0x61,0x5e,0x59,0x4f,0x43,0x3c,0x34,0x2e,0x2c,0x2f,0x36,0x40,0x4d,0x5a,0x6b,0x76,
0x79,0x72,0x6e,0x66,0x62,0x65,0x67,0x6a,0x6e,0x71,0x75,0x7d,0x87,0x92,0x9b,0x9d,
0x93,0x83,0x6f,0x5d,0x4c,0x41,0x3b,0x39,0x3b,0x3f,0x40,0x40,0x3d,0x3c,0x40,0x4a,
0x57,0x68,0x76,0x7e,0x7d,0x73,0x65,0x5b,0x5f,0x67,0x71,0x7b,0x7d,0x77,0x6e,0x65,
0x62,0x63,0x62,0x5c,0x53,0x46,0x37,0x30,0x35,0x45,0x5a,0x71,0x83,0x8f,0x96,0x9a,
0x9b,0x9b,0x9b,0x9b,0x9e,0x9d,0x96,0x88,0x75,0x64,0x5b,0x5a,0x5f,0x68,0x73,0x7c,
0x7f,0x79,0x6d,0x62,0x5c,0x59,0x54,0x4e,0x44,0x3c,0x36,0x31,0x2e,0x32,0x3a,0x45,
0x4b,0x52,0x5a,0x64,0x71,0x7e,0x88,0x94,0x9a,0x9f,0xa6,0xa9,0xa6,0xa0,0x94,0x84,
0x75,0x65,0x5c,0x5b,0x61,0x6d,0x77,0x7d,0x7c,0x76,0x6e,0x67,0x60,0x5c,0x56,0x4f,
0x44,0x36,0x2e,0x34,0x47,0x61,0x78,0x85,0x84,0x79,0x6a,0x5e,0x5b,0x63,0x6e,0x77,
0x7b,0x7d,0x82,0x8b,0x96,0x9e,0xa0,0x98,0x87,0x70,0x5d,0x54,0x57,0x64,0x71,0x7b,
0x7e,0x7b,0x74,0x6c,0x65,0x5f,0x58,0x4d,0x3e,0x34,0x32,0x39,0x47,0x5b,0x70,0x83,
0x91,0x99,0x99,0x9a,0x93,0x89,0x7f,0x73,0x64,0x56,0x4c,0x42,0x3c,0x3b,0x3f,0x46,
0x50,0x5d,0x6e,0x7d,0x88,0x92,0x9a,0x9b,0x99,0x90,0x84,0x76,0x67,0x59,0x4b,0x42,
0x3c,0x3b,0x3b,0x40,0x49,0x58,0x6a,0x7c,0x88,0x90,0x95,0x99,0x9c,0x9f,0xa1,0xa2,
0xa3,0x9f,0x9a,0x97,0x97,0x97,0x9a,0x9b,0x9a,0x9b,0x9b,0x9c,0x9e,0x9f,0xa0,0xa0,
0x9e,0x9f,0xa2,0xa6,0xa4,0xa4,0xa3,0xa2,0xa1,0xa0,0x9f,0x9f,0xa1,0xa0,0x9d,0x9a,
0x9a,0x9c,0x9e,0x9d,0x9c,0x9d,0x9e,0x9b,0x96,0x8d,0x84,0x74,0x68,0x5a,0x4f,0x48,
0x43,0x3f,0x3b,0x36,0x32,0x33,0x34,0x37,0x3a,0x3b,0x39,0x38,0x36,0x38,0x39,0x3a,
0x39,0x38,0x38,0x38,0x36,0x36,0x36,0x36,0x36,0x36,0x38,0x3a,0x3b,0x3c,0x3e,0x40,
0x40,0x3e,0x3a,0x36,0x33,0x35,0x3b,0x41,0x4d,0x5c,0x6c,0x7b,0x86,0x91,0x9a,0x9d,
0x98,0x8d,0x80,0x71,0x60,0x55,0x49,0x41,0x3e,0x3c,0x3a,0x3a,0x3a,0x3b,0x3d,0x3c,
0x3a,0x37,0x35,0x31,0x2f,0x30,0x34,0x36,0x35,0x33,0x32,0x34,0x37,0x3a,0x3c,0x3c,
0x3c,0x3d,0x3c,0x3e,0x43,0x4e,0x5c,0x6c,0x79,0x84,0x8e,0x96,0x9c,0xa1,0xa6,0xa7,
0xa4,0xa1,0x9e,0x9c,0x9b,0x99,0x99,0x93,0x8a,0x7c,0x6c,0x5d,0x52,0x49,0x44,0x3c,
0x38,0x38,0x38,0x3a,0x3c,0x3e,0x3f,0x3f,0x3c,0x3b,0x3a,0x37,0x34,0x33,0x33,0x35,
0x3b,0x44,0x4f,0x5d,0x6e,0x7d,0x88,0x90,0x96,0x9a,0x99,0x91,0x83,0x75,0x66,0x59,
0x4c,0x43,0x3f,0x3e,0x40,0x46,0x4f,0x60,0x72,0x80,0x8c,0x92,0x94,0x92,0x8e,0x87,
0x7d,0x6e,0x5c,0x4d,0x43,0x3f,0x3d,0x3d,0x3c,0x3b,0x3a,0x38,0x38,0x3c,0x45,0x4f,
0x5c,0x68,0x73,0x7f,0x8a,0x94,0x9b,0xa1,0xa4,0xa6,0xa6,0xa3,0x9e,0x9d,0x9c,0x9d,
0xa1,0xa2,0xa4,0xa5,0xa3,0xa1,0x9e,0x9e,0x9d,0x9f,0x9f,0xa1,0xa1,0xa0,0x9c,0x9a,
0x9a,0x9c,0x9e,0x9f,0x9b,0x94,0x8b,0x7d,0x6e,0x62,0x5e,0x61,0x68,0x70,0x79,0x82,
0x8a,0x92,0x98,0x9e,0x9b,0x91,0x83,0x6f,0x5c,0x4e,0x46,0x40,0x3e,0x3c,0x38,0x35,
0x36,0x3b,0x3e,0x40,0x3d,0x3b,0x3a,0x38,0x35,0x37,0x37,0x37,0x39,0x39,0x38,0x36,
0x33,0x34,0x38,0x42,0x52,0x65,0x75,0x7e,0x7d,0x76,0x6a,0x61,0x5f,0x61,0x68,0x71,
0x78,0x7a,0x7f,0x86,0x8e,0x9a,0xa3,0xaa,0xaa,0xa5,0x9a,0x8b,0x7d,0x71,0x65,0x5a,
0x52,0x4c,0x4c,0x49,0x41,0x3a,0x34,0x33,0x37,0x3d,0x43,0x44,0x3e,0x34,0x2b,0x2c,
0x3a,0x51,0x68,0x78,0x7d,0x7a,0x70,0x65,0x5e,0x5a,0x56,0x51,0x46,0x3b,0x35,0x3f,
0x50,0x67,0x7d,0x8b,0x89,0x80,0x6f,0x61,0x5e,0x61,0x66,0x6e,0x74,0x7b,0x85,0x90,
0x9a,0xa0,0x9f,0x94,0x80,0x6e,0x60,0x56,0x4d,0x45,0x3d,0x3b,0x3d,0x47,0x5a,0x6e,
0x7f,0x88,0x83,0x75,0x65,0x5a,0x58,0x5d,0x68,0x72,0x78,0x80,0x83,0x89,0x94,0x9d,
0x9f,0x98,0x89,0x76,0x64,0x52,0x49,0x41,0x41,0x3e,0x41,0x4a,0x5a,0x69,0x77,0x80,
0x87,0x8f,0x93,0x97,0x9d,0xa1,0xa3,0xa2,0x9c,0x98,0x98,0x9b,0x9b,0x98,0x90,0x84,
0x76,0x68,0x5b,0x52,0x4a,0x45,0x3e,0x3b,0x3c,0x45,0x54,0x64,0x74,0x7d,0x88,0x8e,
0x91,0x98,0x9c,0x9e,0x9f,0x9d,0x9b,0x9b,0x9a,0x99,0x99,0x9a,0x9b,0x9f,0x9f,0x9e,
0x99,0x92,0x86,0x79,0x6c,0x62,0x5a,0x53,0x4a,0x40,0x3c,0x3d,0x42,0x4e,0x5d,0x6e,
0x7d,0x88,0x8f,0x90,0x98,0x9d,0xa0,0xa4,0xa5,0xa5,0xa4,0x9f,0x9b,0x9c,0x9b,0x95,
0x89,0x7b,0x6d,0x61,0x54,0x4c,0x46,0x43,0x3f,0x3b,0x38,0x37,0x39,0x3d,0x41,0x47,
0x52,0x5d,0x6a,0x76,0x7e,0x85,0x8f,0x97,0x9c,0xa0,0xa1,0xa0,0x9b,0x98,0x97,0x9a,
0xa0,0x9e,0x97,0x8d,0x7e,0x6e,0x5e,0x53,0x4c,0x47,0x40,0x3c,0x3c,0x42,0x4f,0x5e,
0x70,0x80,0x8d,0x94,0x98,0x99,0x97,0x8f,0x82,0x74,0x65,0x5d,0x5c,0x60,0x6a,0x75,
0x80,0x8b,0x94,0x9b,0x9e,0x9b,0x92,0x83,0x6f,0x5f,0x52,0x48,0x41,0x3c,0x39,0x3c,
0x45,0x54,0x64,0x73,0x80,0x88,0x8e,0x92,0x97,0xa0,0xa3,0xa4,0xa3,0xa0,0x9c,0x99,
0x99,0x9a,0x9d,0x9e,0x9e,0x9e,0x9e,0x9b,0x96,0x8b,0x7e,0x70,0x65,0x5e,0x5f,0x67,
0x70,0x78,0x7f,0x86,0x8c,0x95,0x9f,0xa6,0xa7,0xa5,0xa1,0x9c,0x9a,0x9b,0x9c,0xa0,
0x9f,0x9f,0xa0,0xa1,0xa0,0x9c,0x92,0x84,0x75,0x66,0x59,0x4f,0x4a,0x44,0x3e,0x3b,
0x38,0x38,0x3a,0x3b,0x3c,0x40,0x4a,0x57,0x68,0x74,0x7b,0x7a,0x70,0x64,0x5a,0x5a,
0x64,0x71,0x7c,0x7f,0x7a,0x70,0x66,0x5f,0x5e,0x60,0x5f,0x57,0x49,0x3c,0x33,0x2d,
0x2d,0x33,0x3d,0x45,0x4d,0x56,0x60,0x6b,0x76,0x7f,0x88,0x91,0x97,0x99,0x93,0x86,
0x73,0x62,0x59,0x5a,0x64,0x73,0x7f,0x83,0x7f,0x74,0x69,0x64,0x64,0x67,0x6e,0x73,
0x76,0x77,0x7a,0x83,0x90,0x9e,0xa7,0xa9,0xa6,0xa2,0x9c,0x99,0x97,0x99,0xa0,0xa3,
0xa4,0xa6,0xa6,0xa3,0xa2,0x9f,0x9f,0xa1,0xa1,0x9d,0x94,0x86,0x76,0x65,0x58,0x4f,
// Line 16
0x35,0x37,0x39,0x39,0x38,0x38,0x37,0x3a,0x3c,0x3c,0x39,0x38,0x38,0x3a,0x3a,0x39,
0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x35,0x37,0x37,0x36,0x37,0x35,0x34,0x34,0x34,
0x34,0x35,0x36,0x35,0x34,0x34,0x34,0x35,0x38,0x3a,0x3a,0x3b,0x39,0x37,0x35,0x34,
0x33,0x34,0x37,0x39,0x39,0x37,0x34,0x35,0x3f,0x50,0x62,0x73,0x7d,0x7c,0x74,0x66,
0x5b,0x58,0x5e,0x68,0x74,0x7b,0x7b,0x75,0x6a,0x60,0x5f,0x66,0x6e,0x75,0x7a,0x7b,
0x77,0x6f,0x64,0x5c,0x59,0x5e,0x66,0x6d,0x72,0x74,0x73,0x6d,0x65,0x5f,0x60,0x65,
0x6c,0x74,0x78,0x78,0x77,0x71,0x6a,0x62,0x60,0x61,0x67,0x6d,0x74,0x75,0x73,0x6b,
0x62,0x5e,0x5c,0x60,0x68,0x6f,0x73,0x75,0x70,0x68,0x60,0x5b,0x5a,0x5f,0x6a,0x75,
0x7b,0x7c,0x78,0x6f,0x68,0x64,0x64,0x66,0x69,0x6c,0x6e,0x6d,0x6d,0x72,0x7c,0x89,
0x97,0xa4,0xaa,0xa9,0xa3,0x96,0x86,0x78,0x6b,0x60,0x59,0x53,0x4d,0x49,0x42,0x3d,
0x3d,0x41,0x4a,0x58,0x68,0x79,0x86,0x8f,0x93,0x95,0x99,0x9c,0x9f,0x9f,0x9b,0x93,
0x88,0x78,0x68,0x5d,0x58,0x5b,0x63,0x6f,0x7a,0x7f,0x7d,0x73,0x66,0x5e,0x5d,0x60,
0x6b,0x73,0x77,0x77,0x70,0x67,0x61,0x60,0x63,0x69,0x6e,0x71,0x73,0x74,0x77,0x81,
0x8e,0x9e,0xa9,0xaf,0xac,0xa5,0x9f,0x9a,0x99,0x9c,0x9f,0x9d,0x96,0x89,0x7a,0x6b,
0x5e,0x51,0x48,0x40,0x37,0x30,0x35,0x42,0x55,0x6d,0x7d,0x83,0x7f,0x74,0x67,0x5e,
0x58,0x54,0x4c,0x42,0x35,0x31,0x38,0x4b,0x63,0x7a,0x86,0x85,0x7a,0x6a,0x5c,0x54,
0x50,0x4c,0x48,0x40,0x36,0x30,0x2f,0x33,0x3a,0x43,0x4b,0x52,0x5b,0x65,0x71,0x80,
0x8a,0x92,0x96,0x94,0x8b,0x80,0x71,0x60,0x4d,0x3f,0x38,0x35,0x36,0x38,0x37,0x34,
0x30,0x31,0x3b,0x4a,0x5c,0x6d,0x78,0x7e,0x7c,0x76,0x6d,0x65,0x5e,0x57,0x4c,0x42,
0x39,0x34,0x37,0x44,0x57,0x70,0x83,0x91,0x98,0x9a,0x94,0x90,0x88,0x7e,0x6f,0x61,
0x50,0x42,0x3b,0x38,0x37,0x39,0x3a,0x37,0x34,0x34,0x39,0x44,0x52,0x63,0x73,0x7b,
0x78,0x70,0x65,0x5e,0x5d,0x64,0x6d,0x76,0x7a,0x77,0x6f,0x66,0x60,0x5f,0x64,0x6c,
0x74,0x79,0x78,0x73,0x6e,0x6a,0x63,0x60,0x61,0x63,0x63,0x68,0x6a,0x70,0x7b,0x86,
0x91,0x9c,0xa4,0xab,0xad,0xab,0xa4,0x97,0x86,0x76,0x6a,0x64,0x62,0x65,0x69,0x6f,
0x74,0x7a,0x7e,0x84,0x8c,0x98,0xa1,0xa7,0xa6,0xa2,0x9f,0x9b,0x99,0x9a,0x9d,0x9c,
0x95,0x86,0x74,0x63,0x59,0x50,0x4a,0x43,0x3c,0x39,0x3b,0x43,0x50,0x62,0x74,0x7f,
0x86,0x8a,0x8d,0x91,0x97,0x9e,0xa0,0xa2,0xa0,0x9d,0x9b,0x9d,0x9d,0x9f,0x9b,0x92,
0x7f,0x71,0x61,0x5b,0x5c,0x66,0x74,0x7f,0x80,0x7b,0x72,0x67,0x60,0x60,0x65,0x6e,
0x75,0x78,0x74,0x6d,0x66,0x61,0x5f,0x5e,0x59,0x53,0x48,0x3e,0x33,0x2f,0x2e,0x31,
0x38,0x43,0x50,0x60,0x6d,0x77,0x78,0x79,0x72,0x6a,0x64,0x5e,0x56,0x4e,0x43,0x36,
0x30,0x32,0x3e,0x52,0x6a,0x81,0x93,0x9b,0x9b,0x97,0x90,0x85,0x78,0x6c,0x60,0x57,
0x4c,0x42,0x39,0x37,0x39,0x43,0x54,0x66,0x78,0x82,0x82,0x77,0x68,0x5c,0x59,0x5f,
0x66,0x6e,0x73,0x7a,0x7d,0x84,0x90,0x9b,0x9d,0x96,0x86,0x70,0x5b,0x4c,0x42,0x3b,
0x3c,0x3b,0x39,0x3a,0x38,0x37,0x3b,0x3e,0x45,0x53,0x62,0x72,0x7b,0x7a,0x72,0x67,
0x5c,0x59,0x5e,0x6c,0x76,0x7b,0x78,0x70,0x68,0x63,0x64,0x6a,0x71,0x75,0x74,0x73,
0x73,0x79,0x86,0x94,0x9d,0x9f,0x97,0x87,0x70,0x5e,0x55,0x54,0x61,0x6d,0x78,0x7d,
0x78,0x71,0x68,0x5f,0x57,0x52,0x4a,0x3f,0x35,0x33,0x38,0x45,0x58,0x70,0x84,0x92,
0x94,0x92,0x92,0x8e,0x87,0x7c,0x6d,0x5d,0x50,0x45,0x3e,0x3c,0x3b,0x3c,0x3c,0x3a,
0x36,0x34,0x3d,0x45,0x51,0x60,0x6c,0x72,0x75,0x6e,0x65,0x5d,0x59,0x5f,0x6b,0x76,
0x7b,0x78,0x71,0x68,0x60,0x5f,0x63,0x6f,0x7c,0x83,0x80,0x78,0x6c,0x64,0x62,0x64,
0x64,0x60,0x56,0x48,0x39,0x30,0x35,0x48,0x60,0x78,0x83,0x83,0x75,0x64,0x56,0x4d,
0x48,0x48,0x45,0x3e,0x33,0x2b,0x2b,0x34,0x3f,0x46,0x45,0x40,0x38,0x30,0x34,0x41,
0x53,0x66,0x73,0x79,0x78,0x70,0x68,0x60,0x5d,0x5c,0x5f,0x65,0x6b,0x72,0x7b,0x83,
0x8a,0x94,0xa1,0xab,0xad,0xa9,0x9f,0x95,0x88,0x7a,0x6b,0x64,0x60,0x62,0x66,0x6c,
0x73,0x7e,0x84,0x8a,0x92,0x9b,0xa3,0xa9,0xa7,0xa2,0x9d,0x99,0x96,0x96,0x97,0x98,
0x93,0x88,0x76,0x64,0x56,0x4c,0x45,0x42,0x3f,0x3e,0x3b,0x38,0x36,0x39,0x3c,0x40,
0x45,0x4b,0x54,0x61,0x6e,0x7b,0x86,0x91,0x99,0x9e,0xa1,0xa1,0xa0,0x9d,0x9a,0x98,
0x99,0x99,0x96,0x90,0x84,0x76,0x6a,0x5e,0x53,0x49,0x44,0x3f,0x3b,0x3a,0x39,0x39,
0x38,0x38,0x38,0x40,0x4a,0x58,0x65,0x75,0x7f,0x88,0x8f,0x96,0x9c,0xa6,0xa8,0xa6,
0xa3,0x9f,0x9b,0x9c,0x9b,0x9b,0x9f,0xa1,0xa1,0x9f,0x9a,0x92,0x87,0x7a,0x6d,0x63,
0x5d,0x5e,0x62,0x69,0x6e,0x76,0x81,0x89,0x91,0x99,0xa1,0xa6,0xa4,0x9f,0x9a,0x99,
0x9a,0x99,0x96,0x93,0x8e,0x84,0x78,0x6a,0x5d,0x54,0x4b,0x43,0x3d,0x39,0x34,0x30,
0x32,0x32,0x34,0x36,0x35,0x34,0x35,0x36,0x34,0x33,0x34,0x37,0x39,0x39,0x36,0x35,
0x34,0x35,0x39,0x3f,0x4b,0x5c,0x6d,0x7c,0x86,0x8f,0x95,0x96,0x92,0x89,0x7c,0x6d,
0x5d,0x4d,0x45,0x3f,0x3c,0x38,0x38,0x36,0x35,0x38,0x3b,0x3c,0x3f,0x3b,0x35,0x34,
0x34,0x3b,0x49,0x5b,0x6b,0x7a,0x84,0x8c,0x90,0x96,0x9d,0xa4,0xa8,0xa7,0x9f,0x93,
0x83,0x72,0x63,0x58,0x51,0x4f,0x48,0x3d,0x35,0x34,0x3a,0x49,0x5c,0x70,0x7f,0x81,
0x76,0x63,0x59,0x55,0x59,0x66,0x75,0x7d,0x7f,0x77,0x6a,0x62,0x5f,0x65,0x6c,0x73,
0x78,0x7a,0x77,0x71,0x6a,0x67,0x65,0x68,0x6c,0x6f,0x70,0x71,0x72,0x78,0x83,0x90,
0x9b,0x9e,0x97,0x88,0x72,0x5e,0x4d,0x42,0x3d,0x3b,0x3a,0x39,0x34,0x34,0x39,0x3c,
0x3b,0x39,0x34,0x2f,0x28,0x2f,0x3c,0x51,0x68,0x78,0x7c,0x78,0x70,0x68,0x62,0x5e,
0x58,0x51,0x46,0x3c,0x37,0x3a,0x46,0x59,0x6e,0x7e,0x89,0x91,0x94,0x94,0x95,0x9a,
0x9f,0xa0,0x98,0x8d,0x81,0x72,0x63,0x59,0x50,0x4c,0x45,0x41,0x3a,0x37,0x37,0x39,
0x39,0x3c,0x3e,0x43,0x4c,0x59,0x66,0x76,0x81,0x8c,0x93,0x98,0x9e,0xa2,0xa4,0xa4,
0xa0,0x97,0x8a,0x79,0x6b,0x60,0x5e,0x5f,0x62,0x69,0x72,0x7a,0x81,0x8a,0x93,0x9d,
0xa4,0xa9,0xaa,0xa8,0xa3,0x9a,0x8c,0x7c,0x6b,0x5f,0x5a,0x5a,0x5e,0x67,0x70,0x78,
0x80,0x8b,0x95,0x9d,0xa0,0xa2,0xa3,0xa2,0x9c,0x91,0x84,0x76,0x67,0x5e,0x5a,0x5d,
0x69,0x73,0x78,0x7a,0x76,0x6f,0x67,0x63,0x61,0x66,0x6d,0x74,0x78,0x7c,0x80,0x87,
0x90,0x99,0xa2,0xa8,0xa9,0xa3,0x9b,0x8e,0x81,0x73,0x66,0x5b,0x59,0x60,0x6c,0x75,
0x78,0x78,0x72,0x6a,0x5e,0x58,0x57,0x54,0x4c,0x43,0x39,0x30,0x2c,0x2c,0x2f,0x39,
0x44,0x4d,0x53,0x5a,0x63,0x6f,0x7d,0x89,0x93,0x9d,0xa4,0xa6,0xa6,0xa4,0xa1,0x9c,
0x99,0x96,0x94,0x93,0x8c,0x82,0x75,0x69,0x5b,0x51,0x48,0x43,0x3f,0x3e,0x3c,0x3b,
0x39,0x3c,0x3e,0x3f,0x40,0x48,0x54,0x63,0x70,0x7d,0x85,0x8c,0x91,0x96,0x9d,0xa3,
0xa3,0x9f,0x93,0x83,0x73,0x67,0x5e,0x59,0x55,0x4f,0x47,0x3d,0x34,0x30,0x34,0x39,
0x3d,0x3c,0x3c,0x39,0x35,0x34,0x36,0x40,0x4f,0x60,0x6e,0x7a,0x86,0x8e,0x93,0x97,
0x9b,0x9d,0xa1,0xa1,0x9f,0x9e,0x9a,0x98,0x99,0x9b,0x9f,0xa4,0xa5,0xa3,0x9d,0x93,
0x84,0x75,0x68,0x5c,0x55,0x50,0x48,0x3d,0x35,0x36,0x3f,0x50,0x65,0x77,0x81,0x7d,
0x6f,0x60,0x58,0x59,0x5b,0x67,0x70,0x75,0x7b,0x80,0x86,0x92,0x9a,0x9b,0x94,0x84,
0x71,0x5e,0x4c,0x3f,0x37,0x35,0x37,0x39,0x39,0x37,0x35,0x35,0x37,0x3e,0x4c,0x5e,
0x6e,0x79,0x7a,0x72,0x66,0x5d,0x59,0x5e,0x69,0x75,0x7b,0x79,0x70,0x68,0x63,0x60,
0x60,0x68,0x6d,0x6d,0x6e,0x72,0x79,0x83,0x91,0x9d,0xa7,0xad,0xad,0xa9,0xa1,0x97,
0x92,0x92,0x95,0x99,0x9e,0xa1,0xa1,0xa0,0x9b,0x9a,0x9b,0x9f,0x9f,0x9b,0x92,0x84,
0x74,0x66,0x59,0x51,0x4a,0x41,0x37,0x31,0x33,0x3e,0x53,0x67,0x77,0x7f,0x7e,0x73,
0x66,0x5e,0x5b,0x58,0x55,0x4a,0x3f,0x3b,0x3b,0x46,0x59,0x6f,0x80,0x8c,0x91,0x93,
0x94,0x98,0x9f,0xa4,0xa4,0x9f,0x93,0x84,0x73,0x65,0x5d,0x57,0x4d,0x43,0x39,0x34,
0x35,0x3c,0x4a,0x5c,0x6e,0x7e,0x88,0x8e,0x94,0x97,0x98,0x92,0x86,0x77,0x69,0x5b,
0x59,0x5f,0x6c,0x7a,0x81,0x7e,0x73,0x66,0x5c,0x5a,0x61,0x6d,0x76,0x7a,0x76,0x6d,
0x66,0x60,0x5d,0x5e,0x5b,0x54,0x49,0x3a,0x2f,0x2a,0x2b,0x32,0x3b,0x42,0x44,0x3f,
0x37,0x2f,0x2e,0x37,0x45,0x58,0x6d,0x7f,0x8b,0x94,0x98,0x98,0x93,0x8d,0x80,0x71,
0x60,0x4f,0x42,0x39,0x34,0x34,0x37,0x3a,0x3b,0x39,0x3a,0x3f,0x4a,0x58,0x67,0x75,
0x7c,0x7b,0x72,0x66,0x5c,0x5c,0x62,0x6a,0x70,0x78,0x7d,0x80,0x87,0x91,0x9b,0xa1,
0x9b,0x8b,0x72,0x5e,0x52,0x53,0x5f,0x6f,0x7a,0x7f,0x79,0x6e,0x64,0x5d,0x58,0x55,
0x4d,0x43,0x38,0x2f,0x2b,0x2f,0x36,0x3d,0x41,0x42,0x3e,0x39,0x34,0x31,0x32,0x37,
0x3b,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x35,0x33,0x34,0x34,0x34,0x32,0x32,0x32,0x36,
0x35,0x33,0x35,0x37,0x38,0x39,0x37,0x36,0x38,0x39,0x38,0x38,0x38,0x37,0x34,0x33,
0x33,0x34,0x34,0x34,0x35,0x37,0x39,0x39,0x39,0x3a,0x3a,0x3b,0x3a,0x3a,0x3b,0x38,
// Line 17
0x3a,0x39,0x3a,0x3a,0x39,0x38,0x36,0x36,0x35,0x35,0x36,0x39,0x3b,0x3a,0x37,0x38,
0x39,0x3a,0x3c,0x3c,0x3b,0x3b,0x3c,0x3b,0x3a,0x3b,0x3c,0x3c,0x3a,0x39,0x38,0x39,
0x38,0x37,0x38,0x39,0x39,0x38,0x35,0x34,0x35,0x36,0x39,0x3b,0x3c,0x3b,0x37,0x34,
0x33,0x35,0x3b,0x3d,0x3a,0x37,0x33,0x32,0x38,0x46,0x58,0x6d,0x7a,0x7e,0x74,0x6b,
0x5f,0x5a,0x5e,0x69,0x74,0x7b,0x7a,0x74,0x6d,0x63,0x5e,0x60,0x66,0x6d,0x75,0x7a,
0x78,0x73,0x6d,0x66,0x61,0x62,0x67,0x6f,0x74,0x77,0x74,0x71,0x6c,0x67,0x66,0x66,
0x6a,0x72,0x78,0x7b,0x79,0x74,0x6d,0x67,0x62,0x61,0x67,0x6f,0x75,0x75,0x73,0x6d,
0x65,0x60,0x5d,0x5f,0x67,0x6f,0x77,0x77,0x78,0x72,0x6a,0x63,0x60,0x63,0x6d,0x75,
0x79,0x7c,0x79,0x73,0x6b,0x64,0x61,0x64,0x6a,0x6d,0x6e,0x6f,0x72,0x78,0x7f,0x89,
0x94,0xa0,0xa7,0xa9,0xa7,0xa1,0x95,0x85,0x74,0x66,0x5f,0x5a,0x54,0x4d,0x45,0x3b,
0x34,0x35,0x40,0x54,0x69,0x7c,0x88,0x90,0x94,0x98,0x9c,0x9e,0x9f,0x9f,0x9e,0x98,
0x8a,0x7e,0x72,0x66,0x5f,0x5e,0x65,0x70,0x7a,0x7e,0x7e,0x77,0x6a,0x60,0x5a,0x5d,
0x66,0x72,0x7b,0x7a,0x74,0x6b,0x63,0x61,0x63,0x6a,0x71,0x74,0x72,0x71,0x74,0x7c,
0x8a,0x98,0xa4,0xad,0xae,0xa9,0x9f,0x97,0x96,0x9a,0x9f,0x9e,0x96,0x8b,0x7c,0x6d,
0x60,0x55,0x4d,0x46,0x3c,0x33,0x33,0x3d,0x50,0x67,0x79,0x82,0x80,0x77,0x68,0x5c,
0x55,0x51,0x4c,0x44,0x3c,0x36,0x39,0x46,0x5b,0x75,0x87,0x8d,0x84,0x74,0x64,0x5c,
0x5c,0x63,0x68,0x73,0x79,0x7d,0x84,0x8f,0x9a,0xa5,0xa9,0xa9,0xa4,0x9c,0x90,0x83,
0x75,0x68,0x5d,0x53,0x4d,0x4a,0x49,0x46,0x40,0x3a,0x35,0x33,0x36,0x3c,0x45,0x50,
0x5a,0x64,0x6d,0x77,0x83,0x8f,0x9b,0x9d,0x94,0x86,0x76,0x67,0x5c,0x59,0x5f,0x6b,
0x77,0x82,0x8c,0x95,0x9d,0xa1,0xa1,0x99,0x8a,0x78,0x66,0x5a,0x56,0x5b,0x65,0x72,
0x7c,0x84,0x8d,0x96,0x9a,0x9c,0x98,0x8b,0x74,0x62,0x56,0x59,0x65,0x74,0x7e,0x85,
0x83,0x79,0x70,0x69,0x61,0x5c,0x51,0x43,0x37,0x31,0x33,0x40,0x53,0x6a,0x7f,0x8f,
0x97,0x9b,0x9a,0x96,0x8d,0x81,0x72,0x64,0x57,0x4b,0x41,0x3d,0x3b,0x3b,0x3c,0x3b,
0x3a,0x3a,0x3e,0x46,0x51,0x60,0x6f,0x7a,0x7e,0x78,0x6d,0x64,0x5e,0x60,0x6c,0x78,
0x7f,0x7d,0x77,0x6e,0x67,0x67,0x68,0x6c,0x6d,0x6f,0x6f,0x72,0x78,0x83,0x90,0x9c,
0xa4,0xac,0xb1,0xb1,0xab,0x9e,0x8d,0x7c,0x6d,0x62,0x5d,0x60,0x66,0x6b,0x72,0x78,
0x7e,0x89,0x94,0x9c,0x9d,0x97,0x8b,0x79,0x66,0x58,0x4e,0x47,0x41,0x3e,0x3d,0x40,
0x4a,0x5a,0x6c,0x7b,0x86,0x8b,0x8f,0x94,0x9c,0xa4,0xab,0xab,0xa7,0xa1,0x9d,0x9b,
0x9b,0x9d,0x9c,0x95,0x88,0x77,0x69,0x63,0x62,0x67,0x6f,0x77,0x7f,0x87,0x8f,0x96,
0x9c,0xa2,0xa5,0xa5,0xa5,0xa1,0x9c,0x9b,0x99,0x99,0x9b,0x9d,0x9f,0xa3,0xa4,0xa1,
0x95,0x87,0x79,0x6f,0x65,0x5c,0x52,0x49,0x42,0x3e,0x3f,0x44,0x4d,0x5d,0x6f,0x7d,
0x87,0x8f,0x96,0x9a,0x9b,0x9b,0x9c,0x9e,0x9e,0x9f,0xa1,0x9f,0x9d,0x9e,0xa2,0xa6,
0xa9,0xa9,0xa3,0x9c,0x91,0x83,0x72,0x63,0x58,0x56,0x5d,0x66,0x71,0x7d,0x87,0x8f,
0x94,0x9a,0x9f,0xa4,0xa5,0xa3,0x9d,0x94,0x89,0x7e,0x72,0x65,0x5e,0x60,0x66,0x72,
0x7c,0x80,0x7d,0x72,0x65,0x5d,0x5e,0x66,0x6e,0x77,0x7a,0x79,0x71,0x6a,0x63,0x60,
0x5f,0x5b,0x53,0x48,0x3b,0x31,0x2b,0x29,0x2b,0x33,0x40,0x4d,0x59,0x64,0x6f,0x78,
0x80,0x89,0x92,0x9b,0x9e,0x9a,0x8d,0x7a,0x66,0x58,0x55,0x5c,0x6b,0x78,0x7c,0x7a,
0x72,0x68,0x60,0x60,0x60,0x62,0x69,0x6f,0x73,0x7c,0x85,0x93,0x9f,0xa2,0x9a,0x8b,
0x7a,0x68,0x58,0x4b,0x3f,0x38,0x35,0x36,0x3d,0x4a,0x59,0x6c,0x7b,0x86,0x8d,0x94,
0x96,0x96,0x8f,0x82,0x6f,0x5d,0x50,0x46,0x3e,0x38,0x34,0x35,0x38,0x3a,0x3c,0x3f,
0x3e,0x3f,0x3f,0x3a,0x37,0x38,0x3b,0x3b,0x38,0x35,0x38,0x3d,0x48,0x55,0x63,0x73,
0x7e,0x85,0x8d,0x94,0x9b,0xa2,0xa4,0xa4,0xa2,0xa1,0xa0,0xa3,0xa5,0xa5,0xa5,0xa4,
0xa2,0xa0,0x9f,0x9b,0x8e,0x7d,0x6b,0x5b,0x54,0x55,0x61,0x6f,0x78,0x7d,0x7a,0x73,
0x6a,0x64,0x5d,0x55,0x4d,0x47,0x3e,0x35,0x30,0x2f,0x2f,0x35,0x3d,0x48,0x56,0x64,
0x70,0x78,0x79,0x75,0x6d,0x66,0x63,0x65,0x6c,0x73,0x74,0x76,0x78,0x7f,0x8c,0x98,
0xa4,0xac,0xae,0xa9,0xa1,0x99,0x97,0x9b,0x9f,0xa0,0x9b,0x93,0x84,0x74,0x64,0x59,
0x56,0x61,0x6d,0x75,0x79,0x77,0x6f,0x67,0x60,0x5b,0x54,0x50,0x46,0x3a,0x36,0x37,
0x40,0x52,0x69,0x7e,0x8f,0x96,0x98,0x9a,0x9b,0x9e,0xa3,0xa4,0xa2,0x9f,0x9d,0x9c,
0x9b,0x9b,0x97,0x8e,0x7e,0x6c,0x5c,0x53,0x4b,0x44,0x3e,0x39,0x35,0x33,0x34,0x37,
0x3a,0x3e,0x42,0x4b,0x57,0x65,0x71,0x7f,0x86,0x8d,0x96,0x9d,0xa1,0xa6,0xa5,0xa2,
0x9d,0x9a,0x9b,0x9e,0x9d,0x97,0x8a,0x7c,0x6d,0x60,0x56,0x4e,0x45,0x3f,0x39,0x35,
0x39,0x47,0x5b,0x72,0x80,0x82,0x7a,0x6d,0x61,0x5c,0x5e,0x65,0x6d,0x74,0x79,0x7c,
0x83,0x8c,0x96,0xa4,0xab,0xb0,0xae,0xa5,0x99,0x8a,0x7e,0x70,0x65,0x61,0x62,0x67,
0x6b,0x6f,0x77,0x81,0x8a,0x91,0x96,0x97,0x90,0x84,0x74,0x66,0x58,0x4d,0x46,0x41,
0x3f,0x40,0x45,0x50,0x5c,0x6c,0x7c,0x88,0x8d,0x91,0x94,0x98,0x9e,0xa3,0xa4,0xa1,
0x9d,0x9a,0x95,0x95,0x99,0x9d,0xa1,0x9e,0x98,0x96,0x96,0x98,0x9b,0x9c,0x9d,0x9b,
0x92,0x85,0x78,0x6b,0x61,0x5f,0x61,0x68,0x70,0x78,0x81,0x88,0x8f,0x97,0x9f,0xa5,
0xa5,0xa3,0x9d,0x98,0x96,0x97,0x9a,0x9b,0x96,0x8b,0x7e,0x6d,0x5d,0x50,0x47,0x46,
0x43,0x3d,0x38,0x35,0x35,0x39,0x3d,0x3e,0x3c,0x37,0x32,0x2f,0x31,0x3a,0x4a,0x5e,
0x6f,0x7c,0x7f,0x79,0x6d,0x61,0x58,0x52,0x4d,0x49,0x42,0x3c,0x35,0x31,0x30,0x37,
0x40,0x4a,0x54,0x5d,0x64,0x71,0x7f,0x8c,0x96,0x9b,0x98,0x92,0x85,0x77,0x66,0x58,
0x4c,0x43,0x3b,0x36,0x34,0x3d,0x4b,0x5d,0x71,0x7e,0x82,0x7a,0x6b,0x5c,0x56,0x5d,
0x6a,0x74,0x80,0x7f,0x74,0x67,0x5c,0x57,0x55,0x55,0x50,0x48,0x3a,0x30,0x29,0x29,
0x2d,0x39,0x42,0x4c,0x53,0x5d,0x66,0x72,0x7c,0x85,0x8f,0x99,0xa0,0xa5,0xa9,0xa9,
0xa7,0xa3,0x9d,0x99,0x9b,0x9e,0x9f,0x9d,0xa0,0x9f,0x9a,0x93,0x88,0x7c,0x6f,0x61,
0x52,0x4c,0x47,0x43,0x3c,0x38,0x33,0x33,0x32,0x33,0x36,0x3f,0x4a,0x57,0x63,0x6f,
0x7c,0x8a,0x94,0x97,0x98,0x94,0x89,0x79,0x67,0x58,0x4d,0x45,0x3e,0x3a,0x3a,0x3f,
0x47,0x55,0x65,0x74,0x80,0x88,0x8d,0x93,0x98,0x9f,0xa4,0xa6,0xa4,0xa2,0x9d,0x9a,
0x94,0x9a,0x9d,0xa1,0xa1,0xa1,0x9f,0x9f,0x9e,0x9e,0x9f,0x9e,0x9e,0xa0,0x9f,0x9f,
0x9f,0x9f,0x9e,0x9d,0x9c,0x9c,0x9b,0x94,0x84,0x71,0x60,0x55,0x54,0x5f,0x6d,0x7c,
0x80,0x7d,0x74,0x6d,0x67,0x67,0x67,0x6f,0x70,0x73,0x74,0x79,0x80,0x8e,0x97,0x9b,
0x98,0x8d,0x7e,0x6c,0x59,0x4b,0x42,0x3e,0x3b,0x3c,0x42,0x4d,0x5a,0x69,0x77,0x83,
0x8d,0x96,0x9b,0x9b,0x93,0x86,0x74,0x61,0x54,0x57,0x61,0x6f,0x78,0x7e,0x7c,0x76,
0x6d,0x67,0x63,0x63,0x56,0x45,0x36,0x2e,0x33,0x42,0x57,0x6d,0x82,0x90,0x96,0x97,
0x96,0x92,0x8c,0x82,0x72,0x61,0x53,0x49,0x42,0x41,0x3e,0x3a,0x38,0x39,0x3a,0x3f,
0x41,0x40,0x3a,0x33,0x30,0x33,0x3a,0x48,0x57,0x68,0x76,0x82,0x8c,0x96,0x9c,0x9e,
0x96,0x8a,0x7b,0x6d,0x61,0x5a,0x60,0x6a,0x74,0x7f,0x88,0x8f,0x96,0x9d,0xa0,0xa3,
0xa4,0xa4,0x9e,0x97,0x93,0x97,0x9c,0x9f,0x9c,0x91,0x83,0x73,0x64,0x5b,0x5c,0x62,
0x6b,0x73,0x7b,0x83,0x8d,0x99,0xa1,0xa3,0x9d,0x8f,0x7d,0x67,0x5e,0x5b,0x60,0x6c,
0x76,0x7e,0x8a,0x91,0x97,0x9a,0x99,0x94,0x88,0x74,0x5d,0x4d,0x44,0x40,0x3e,0x3d,
0x3b,0x3a,0x3a,0x3b,0x3e,0x40,0x42,0x40,0x3b,0x36,0x35,0x3b,0x46,0x56,0x68,0x78,
0x82,0x88,0x8d,0x92,0x98,0x9d,0x9f,0xa0,0x9f,0x96,0x88,0x79,0x6c,0x63,0x5d,0x55,
0x4a,0x43,0x3f,0x3e,0x3e,0x47,0x55,0x69,0x79,0x86,0x8f,0x96,0x96,0x93,0x8d,0x81,
0x72,0x62,0x53,0x47,0x3f,0x3a,0x36,0x34,0x38,0x45,0x59,0x6f,0x80,0x88,0x85,0x78,
0x67,0x5d,0x5e,0x69,0x78,0x82,0x81,0x79,0x6e,0x66,0x5f,0x66,0x6d,0x74,0x77,0x76,
0x74,0x78,0x80,0x8c,0x9a,0xa1,0x9d,0x92,0x7f,0x6b,0x5f,0x5b,0x60,0x69,0x73,0x7e,
0x88,0x91,0x98,0x9d,0x9d,0x97,0x8b,0x7c,0x69,0x5c,0x58,0x60,0x6a,0x78,0x80,0x82,
0x79,0x6c,0x60,0x5c,0x61,0x6a,0x72,0x77,0x77,0x71,0x69,0x62,0x5e,0x62,0x69,0x6f,
0x76,0x7a,0x78,0x6f,0x66,0x5e,0x5b,0x5d,0x5e,0x5b,0x52,0x44,0x34,0x2a,0x26,0x2d,
0x39,0x44,0x46,0x40,0x35,0x2d,0x2c,0x36,0x47,0x5d,0x73,0x7e,0x7b,0x72,0x66,0x5d,
0x58,0x54,0x4f,0x49,0x3d,0x33,0x34,0x42,0x58,0x6f,0x82,0x88,0x82,0x73,0x61,0x58,
0x5a,0x65,0x6f,0x78,0x7b,0x7e,0x83,0x8b,0x94,0x9c,0x9c,0x8f,0x7b,0x66,0x58,0x55,
0x5d,0x69,0x75,0x80,0x89,0x92,0x99,0x9f,0x9e,0x97,0x88,0x74,0x63,0x59,0x59,0x5f,
0x67,0x71,0x7c,0x88,0x90,0x98,0x9d,0x9b,0x93,0x86,0x72,0x5f,0x51,0x48,0x40,0x3e,
0x3b,0x3a,0x38,0x36,0x36,0x39,0x3c,0x3d,0x39,0x35,0x32,0x32,0x33,0x34,0x37,0x38,
0x36,0x34,0x34,0x33,0x35,0x36,0x37,0x35,0x35,0x37,0x39,0x3c,0x3d,0x3b,0x3a,0x39,
// Line 18
0x37,0x38,0x37,0x36,0x33,0x33,0x36,0x37,0x37,0x38,0x37,0x35,0x33,0x34,0x36,0x38,
0x37,0x36,0x34,0x35,0x34,0x33,0x33,0x33,0x34,0x37,0x37,0x37,0x37,0x38,0x37,0x35,
0x36,0x39,0x3d,0x41,0x43,0x44,0x49,0x4e,0x51,0x57,0x5a,0x5d,0x5d,0x5c,0x5a,0x55,
0x57,0x59,0x5a,0x5b,0x5b,0x59,0x5b,0x58,0x57,0x5a,0x5a,0x58,0x58,0x58,0x59,0x5a,
0x5a,0x5b,0x5b,0x5b,0x5a,0x5a,0x5a,0x5b,0x5a,0x5b,0x59,0x57,0x57,0x59,0x59,0x59,
0x56,0x56,0x57,0x57,0x58,0x5b,0x5d,0x5e,0x5c,0x5b,0x5a,0x5a,0x5b,0x5b,0x58,0x58,
0x57,0x56,0x55,0x55,0x56,0x59,0x5a,0x5a,0x56,0x58,0x57,0x58,0x59,0x5b,0x5d,0x5d,
0x5b,0x5a,0x5b,0x5a,0x57,0x55,0x54,0x56,0x59,0x59,0x59,0x59,0x59,0x58,0x57,0x57,
0x58,0x59,0x5a,0x58,0x55,0x55,0x55,0x57,0x5a,0x5a,0x5a,0x5a,0x5a,0x59,0x58,0x58,
0x57,0x57,0x57,0x57,0x55,0x58,0x56,0x57,0x59,0x5b,0x5b,0x5b,0x58,0x58,0x5a,0x5b,
0x5d,0x5d,0x5c,0x5b,0x5b,0x5b,0x5c,0x5d,0x5d,0x5b,0x59,0x59,0x58,0x59,0x5a,0x5b,
0x5b,0x5d,0x5d,0x5c,0x5b,0x5e,0x61,0x60,0x5e,0x5d,0x5a,0x5b,0x58,0x57,0x59,0x59,
0x59,0x58,0x55,0x55,0x57,0x5a,0x5d,0x5d,0x5c,0x5d,0x5d,0x5c,0x5b,0x5c,0x60,0x5c,
0x5a,0x5b,0x5a,0x59,0x58,0x56,0x56,0x58,0x58,0x58,0x58,0x57,0x57,0x57,0x57,0x56,
0x57,0x58,0x58,0x56,0x57,0x57,0x55,0x57,0x56,0x57,0x5a,0x5c,0x5b,0x5b,0x5b,0x5d,
0x5e,0x5f,0x60,0x5f,0x5e,0x5b,0x56,0x57,0x59,0x5b,0x5c,0x5a,0x58,0x58,0x57,0x57,
0x56,0x58,0x58,0x57,0x55,0x55,0x55,0x58,0x5a,0x5b,0x5d,0x5e,0x5d,0x5b,0x5a,0x5a,
0x5b,0x5b,0x5b,0x58,0x56,0x55,0x56,0x55,0x56,0x59,0x5b,0x5a,0x56,0x57,0x58,0x5b,
0x5d,0x5c,0x5b,0x5b,0x5c,0x5c,0x5b,0x5b,0x5a,0x5b,0x58,0x57,0x58,0x5c,0x5e,0x5e,
0x5c,0x59,0x55,0x56,0x57,0x5b,0x60,0x62,0x5d,0x55,0x4e,0x4e,0x57,0x68,0x7b,0x89,
0x8c,0x84,0x76,0x6a,0x65,0x66,0x6b,0x6a,0x64,0x5a,0x4f,0x4b,0x4e,0x58,0x61,0x66,
0x64,0x5e,0x55,0x53,0x52,0x53,0x57,0x5a,0x58,0x57,0x57,0x59,0x5b,0x5d,0x5b,0x58,
0x55,0x54,0x58,0x5b,0x5d,0x5b,0x5b,0x56,0x52,0x53,0x56,0x5a,0x5d,0x5b,0x59,0x5b,
0x5b,0x5d,0x60,0x62,0x61,0x5e,0x5d,0x5a,0x5a,0x5b,0x5b,0x58,0x58,0x58,0x58,0x59,
0x58,0x5a,0x5b,0x5c,0x5b,0x5a,0x58,0x56,0x56,0x56,0x57,0x58,0x5b,0x5b,0x58,0x57,
0x57,0x59,0x5b,0x5a,0x56,0x56,0x57,0x58,0x58,0x58,0x5a,0x5b,0x5b,0x5b,0x5b,0x5c,
0x5b,0x5a,0x5a,0x59,0x57,0x59,0x5a,0x5b,0x5b,0x5b,0x5a,0x58,0x55,0x56,0x58,0x5a,
0x5b,0x5c,0x5d,0x5e,0x5c,0x5e,0x5f,0x61,0x61,0x5e,0x5b,0x5a,0x58,0x57,0x54,0x55,
0x55,0x56,0x58,0x57,0x56,0x58,0x59,0x5a,0x5d,0x5f,0x60,0x61,0x5e,0x5c,0x5c,0x5d,
0x5d,0x5d,0x5b,0x57,0x54,0x55,0x57,0x5a,0x5c,0x5c,0x5b,0x5b,0x5b,0x5b,0x5c,0x5b,
0x5a,0x5a,0x5a,0x5a,0x58,0x57,0x58,0x5b,0x5c,0x5b,0x57,0x5b,0x5a,0x59,0x58,0x58,
0x58,0x5a,0x59,0x57,0x57,0x59,0x5b,0x5b,0x5a,0x5b,0x5a,0x5a,0x59,0x59,0x5b,0x58,
0x56,0x57,0x58,0x59,0x5b,0x5b,0x5a,0x5b,0x5b,0x5c,0x59,0x5a,0x59,0x5b,0x5d,0x5e,
0x5c,0x5b,0x5c,0x5c,0x5c,0x5c,0x5b,0x5b,0x59,0x57,0x56,0x58,0x58,0x59,0x59,0x59,
0x59,0x59,0x58,0x5a,0x5b,0x5c,0x5c,0x5c,0x5a,0x5a,0x5b,0x5a,0x59,0x59,0x59,0x5a,
0x56,0x56,0x55,0x58,0x5b,0x5b,0x5a,0x59,0x58,0x58,0x56,0x56,0x57,0x5a,0x5a,0x58,
0x56,0x57,0x59,0x5b,0x5a,0x5a,0x5a,0x5b,0x5a,0x57,0x57,0x57,0x58,0x5b,0x5c,0x5d,
0x5e,0x5e,0x5d,0x5d,0x5e,0x60,0x5e,0x5e,0x5a,0x59,0x59,0x58,0x56,0x57,0x55,0x55,
0x55,0x53,0x51,0x4f,0x4e,0x4b,0x4b,0x4a,0x49,0x4a,0x48,0x47,0x45,0x46,0x46,0x47,
0x47,0x47,0x44,0x43,0x42,0x43,0x45,0x45,0x44,0x46,0x46,0x46,0x43,0x42,0x42,0x43,
0x45,0x45,0x43,0x46,0x44,0x44,0x46,0x48,0x48,0x4a,0x48,0x45,0x42,0x40,0x42,0x46,
0x46,0x46,0x46,0x4a,0x4a,0x48,0x49,0x4a,0x49,0x4a,0x48,0x46,0x44,0x43,0x43,0x45,
0x46,0x46,0x45,0x45,0x46,0x48,0x49,0x48,0x44,0x43,0x44,0x43,0x43,0x43,0x43,0x46,
0x44,0x41,0x40,0x41,0x44,0x46,0x47,0x45,0x43,0x45,0x48,0x48,0x46,0x46,0x46,0x46,
0x43,0x42,0x43,0x45,0x43,0x43,0x43,0x43,0x44,0x44,0x45,0x46,0x46,0x47,0x45,0x45,
0x46,0x46,0x45,0x42,0x41,0x43,0x43,0x43,0x44,0x45,0x46,0x43,0x44,0x43,0x44,0x47,
0x49,0x48,0x48,0x46,0x45,0x45,0x43,0x43,0x46,0x47,0x46,0x45,0x43,0x44,0x46,0x47,
0x46,0x47,0x4a,0x4a,0x47,0x45,0x46,0x48,0x4a,0x48,0x48,0x48,0x46,0x44,0x44,0x45,
0x46,0x46,0x43,0x41,0x41,0x44,0x47,0x45,0x47,0x48,0x4a,0x4e,0x52,0x5a,0x65,0x71,
0x7e,0x8b,0x97,0xa0,0xa6,0xab,0xae,0xb2,0xb4,0xb6,0xb5,0xb2,0xb0,0xb0,0xb1,0xb1,
0xb2,0xb5,0xb6,0xb4,0xb2,0xb2,0xb4,0xb5,0xb4,0xb2,0xb0,0xb1,0xb2,0xb2,0xb1,0xaf,
0xaf,0xb0,0xaf,0xae,0xad,0xad,0xae,0xb0,0xae,0xae,0xae,0xb2,0xb2,0xb4,0xb6,0xb6,
0xb4,0xb5,0xb5,0xb4,0xb4,0xb1,0xae,0xad,0xac,0xac,0xac,0xad,0xae,0xae,0xad,0xac,
0xad,0xaf,0xb0,0xb2,0xb0,0xae,0xae,0xb0,0xb0,0xb1,0xb2,0xb2,0xb1,0xb2,0xb3,0xb2,
0xb2,0xb2,0xb1,0xb2,0xb4,0xb7,0xb7,0xb7,0xb4,0xb2,0xb2,0xb0,0xae,0xb0,0xb0,0xaf,
0xaf,0xae,0xb0,0xb1,0xb0,0xb0,0xb0,0xb2,0xb2,0xb4,0xb4,0xb2,0xb0,0xb0,0xb1,0xb1,
0xb0,0xb0,0xb2,0xb0,0xad,0xad,0xad,0xae,0xae,0xae,0xae,0xb1,0xb2,0xb0,0xb0,0xb0,
0xb3,0xb2,0xb0,0xb2,0xb0,0xb0,0xb1,0xb0,0xaf,0xb0,0xb0,0xae,0xac,0xae,0xb2,0xb4,
0xb3,0xb2,0xb2,0xb4,0xb4,0xb3,0xb2,0xb2,0xb2,0xb2,0xae,0xac,0xaa,0xac,0xad,0xb0,
0xb1,0xb2,0xb3,0xb2,0xaf,0xae,0xb0,0xb0,0xac,0xa9,0xa6,0xa4,0xa3,0xa3,0xa4,0xa3,
0xa2,0xa1,0x9f,0x9d,0x9e,0x9f,0xa0,0x9f,0x9d,0x9f,0xa0,0x9f,0x9f,0x9f,0x9f,0x9f,
0x9d,0x9f,0x9f,0x9f,0x9d,0x9c,0x9d,0x9f,0xa1,0xa3,0xa4,0xa4,0xa4,0xa2,0xa0,0x9f,
0x9f,0x9d,0x9d,0x9c,0x9c,0x9d,0x9d,0x9c,0x9b,0x9b,0x9d,0x9f,0x9f,0x9d,0x9d,0x9d,
0x9c,0x9c,0x9c,0x9d,0x9f,0xa1,0xa0,0x9f,0x9f,0x9e,0x9e,0x9e,0x9f,0xa0,0xa0,0xa1,
0x9f,0x9f,0xa1,0xa4,0xa4,0xa4,0xa3,0xa1,0xa1,0xa0,0x9f,0x9f,0x9e,0x9b,0x99,0x99,
0x9a,0x9a,0x9d,0x9d,0x9d,0x9f,0xa0,0xa0,0x9f,0xa0,0xa1,0xa2,0xa2,0xa2,0xa1,0xa1,
0xa0,0x9f,0x9f,0xa0,0xa1,0xa2,0xa0,0xa0,0xa1,0xa1,0xa0,0xa0,0x9f,0xa1,0xa2,0xa1,
0xa1,0xa1,0xa0,0x9e,0x9c,0x9d,0xa1,0xa1,0xa3,0xa2,0xa0,0xa1,0xa0,0xa0,0xa3,0xa4,
0xa4,0xa4,0xa1,0x9f,0x9a,0x9b,0x9b,0x9c,0x9b,0x9b,0x9b,0x9d,0x9e,0x9e,0x9f,0xa1,
0xa2,0xa2,0xa2,0xa1,0xa0,0xa0,0xa1,0xa1,0xa1,0xa0,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,
0x9e,0x9f,0xa0,0xa0,0xa0,0xa0,0xa1,0xa4,0xa4,0xa2,0x9e,0x9f,0x9d,0x9d,0x9e,0x9f,
0x9e,0xa1,0xa1,0xa0,0xa0,0xa1,0xa2,0xa2,0xa1,0xa2,0xa4,0xa4,0xa1,0xa0,0xa1,0xa0,
0x9f,0x9f,0xa0,0xa1,0xa0,0x9e,0x9c,0x9d,0x9f,0xa0,0xa1,0xa0,0x9f,0xa0,0xa0,0xa0,
0xa0,0xa0,0xa0,0x9e,0x9c,0x9b,0x99,0x9d,0x9c,0x9c,0x9d,0x9d,0x9d,0xa1,0xa1,0xa1,
0xa2,0xa4,0xa3,0xa2,0xa2,0xa1,0xa2,0xa1,0xa0,0x9f,0x9f,0x9f,0x9d,0x9d,0x9e,0x9f,
0x9f,0x9e,0xa0,0xa1,0xa0,0x9e,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0x9e,0x9d,0x9c,0x9c,
0x9f,0x9f,0x9f,0x9d,0x9a,0x9b,0x9e,0xa1,0xa4,0xa5,0xa3,0xa0,0x9c,0x9a,0x9c,0xa1,
0xa3,0x9f,0x94,0x87,0x78,0x6e,0x6e,0x74,0x7e,0x8a,0x92,0x94,0x92,0x93,0x97,0x9f,
0xa7,0xaa,0xa7,0xa4,0x9c,0x97,0x97,0x9c,0xa1,0xa7,0xa7,0xa7,0xa4,0xa1,0x9f,0x9d,
0x9f,0x9e,0x9e,0x9c,0x9d,0x9f,0xa0,0x9e,0x9a,0x98,0x99,0x9a,0x9c,0x9e,0x9f,0xa0,
0xa0,0xa0,0x9f,0xa0,0xa1,0xa4,0xa4,0xa2,0xa1,0xa1,0xa0,0xa1,0xa2,0xa2,0xa2,0xa1,
0x9f,0x9e,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0x9e,0x9d,0x9b,0x9b,0x9b,0x9b,0x9c,0x9e,
0x9f,0x9f,0x9e,0x9c,0x9b,0xa0,0xa3,0xa4,0xa4,0xa4,0xa3,0xa4,0xa4,0xa4,0xa4,0xa4,
0xa1,0xa1,0xa1,0xa0,0x9f,0x9f,0x9e,0x9d,0x9d,0x9f,0xa0,0xa0,0x9e,0x9d,0x9d,0x9c,
0x9c,0x9d,0x9f,0xa0,0xa0,0xa1,0xa3,0xa4,0xa4,0xa2,0xa1,0xa3,0xa2,0xa2,0xa3,0xa1,
0xa0,0xa1,0xa0,0xa0,0x9f,0xa0,0xa0,0x9f,0x9f,0x9e,0x9f,0xa0,0x9f,0x9c,0x9e,0x9e,
0x9f,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0x9f,0xa1,0xa1,0x9f,0x9e,0x9d,0x9c,0x9f,0x9e,
0x9c,0x9e,0x9e,0x9e,0x9b,0x9b,0x9b,0x9f,0xa1,0xa0,0xa0,0xa1,0x9f,0x9f,0xa0,0xa2,
0xa2,0xa1,0xa0,0x9f,0x9f,0xa0,0xa0,0xa0,0x9f,0x9f,0xa1,0xa2,0xa2,0xa1,0xa1,0xa2,
0xa2,0xa2,0xa1,0xa2,0xa1,0x9e,0x9a,0x9a,0x9b,0x9d,0x9d,0x9e,0x9c,0x9d,0x9c,0x9e,
0x9f,0xa2,0xa2,0xa1,0x9f,0x9d,0x9d,0x9f,0x9f,0x9f,0xa0,0xa1,0x9f,0x9e,0x9c,0x9d,
0x9e,0x9f,0xa0,0xa0,0x9f,0x9e,0x9e,0x9d,0x9b,0x9b,0x9d,0x9f,0x9f,0x9f,0x9e,0x9f,
0x9e,0x9d,0x9d,0x9f,0xa1,0xa1,0xa0,0x9f,0x9e,0x9d,0x9c,0x9c,0x9e,0xa2,0xa2,0x9f,
0x9f,0x9e,0x9d,0x9c,0x9a,0x9a,0x9c,0x9f,0xa0,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0xa0,
0xa2,0xa2,0xa0,0x9f,0x9d,0x9d,0x9c,0x9b,0x9b,0x9f,0xa1,0xa1,0x9f,0x9e,0x9d,0x9b,
0x9a,0x97,0x92,0x8b,0x81,0x74,0x67,0x5c,0x52,0x4a,0x43,0x3d,0x38,0x36,0x34,0x33,
// Line 19
0x3a,0x36,0x35,0x37,0x39,0x38,0x37,0x36,0x35,0x34,0x34,0x35,0x37,0x39,0x3a,0x3a,
0x3a,0x3b,0x3c,0x3a,0x37,0x35,0x37,0x3b,0x3f,0x41,0x43,0x46,0x48,0x4c,0x51,0x58,
0x5f,0x62,0x61,0x61,0x61,0x61,0x62,0x64,0x64,0x65,0x65,0x62,0x5f,0x5f,0x61,0x62,
0x64,0x65,0x64,0x65,0x64,0x61,0x61,0x62,0x62,0x60,0x5f,0x5e,0x5d,0x5f,0x5f,0x5f,
0x5f,0x5f,0x60,0x60,0x5f,0x5e,0x5f,0x5f,0x5f,0x60,0x60,0x62,0x63,0x63,0x61,0x61,
0x61,0x61,0x5e,0x5e,0x5e,0x61,0x64,0x65,0x64,0x63,0x61,0x5e,0x5d,0x5d,0x5f,0x5f,
0x5f,0x5c,0x5d,0x60,0x61,0x62,0x66,0x67,0x65,0x65,0x63,0x61,0x61,0x61,0x62,0x62,
0x62,0x63,0x61,0x61,0x5e,0x5e,0x5f,0x60,0x5f,0x5e,0x5c,0x5c,0x5b,0x5b,0x5b,0x5c,
0x5d,0x5e,0x5d,0x5e,0x5e,0x5f,0x5d,0x5c,0x5d,0x5f,0x5f,0x5c,0x5d,0x5e,0x5c,0x5e,
0x5e,0x5f,0x61,0x62,0x61,0x61,0x61,0x61,0x5f,0x5f,0x5e,0x5e,0x5f,0x5e,0x5e,0x5d,
0x5c,0x5d,0x5e,0x5c,0x5b,0x5c,0x5c,0x5a,0x5a,0x59,0x5a,0x5b,0x5a,0x59,0x58,0x59,
0x57,0x57,0x57,0x56,0x56,0x58,0x57,0x57,0x56,0x57,0x56,0x56,0x55,0x55,0x52,0x54,
0x50,0x50,0x52,0x51,0x4e,0x4f,0x4e,0x4e,0x4e,0x4d,0x4b,0x4c,0x4a,0x48,0x46,0x45,
0x47,0x48,0x46,0x42,0x3e,0x40,0x40,0x40,0x3e,0x3d,0x3c,0x3d,0x39,0x36,0x35,0x35,
0x33,0x32,0x32,0x32,0x31,0x2f,0x2e,0x2f,0x2f,0x30,0x2e,0x2f,0x30,0x30,0x30,0x2e,
0x2e,0x30,0x32,0x34,0x35,0x35,0x37,0x38,0x39,0x3b,0x3d,0x42,0x45,0x47,0x49,0x4c,
0x4e,0x53,0x56,0x5b,0x5e,0x61,0x64,0x68,0x6c,0x72,0x75,0x79,0x7d,0x81,0x85,0x89,
0x8a,0x8e,0x92,0x94,0x97,0x99,0x99,0x9a,0x9a,0x98,0x96,0x95,0x94,0x92,0x8e,0x85,
0x7f,0x7c,0x79,0x73,0x6d,0x66,0x61,0x5d,0x56,0x4f,0x4a,0x46,0x41,0x3e,0x3b,0x38,
0x33,0x30,0x2e,0x2c,0x2d,0x2c,0x2f,0x31,0x32,0x34,0x39,0x3e,0x44,0x4d,0x54,0x5a,
0x5f,0x65,0x6f,0x7b,0x83,0x89,0x8d,0x92,0x96,0x98,0x9a,0x98,0x96,0x93,0x8d,0x85,
0x7e,0x78,0x71,0x6a,0x62,0x5a,0x50,0x4b,0x42,0x3d,0x3b,0x38,0x33,0x30,0x2c,0x2c,
0x30,0x32,0x35,0x3d,0x45,0x4d,0x55,0x5d,0x68,0x75,0x7f,0x88,0x8e,0x93,0x97,0x97,
0x94,0x8f,0x89,0x83,0x7a,0x70,0x67,0x5e,0x54,0x4c,0x45,0x41,0x3b,0x36,0x32,0x30,
0x32,0x36,0x38,0x3f,0x44,0x4c,0x57,0x63,0x6c,0x77,0x82,0x8a,0x8f,0x8f,0x8c,0x89,
0x83,0x7a,0x6f,0x64,0x59,0x4f,0x44,0x3b,0x33,0x33,0x33,0x34,0x35,0x3a,0x40,0x49,
0x52,0x5e,0x68,0x79,0x83,0x8a,0x8e,0x8f,0x89,0x87,0x7e,0x74,0x69,0x5b,0x4d,0x43,
0x39,0x34,0x33,0x35,0x37,0x3c,0x42,0x49,0x55,0x65,0x75,0x83,0x8b,0x8f,0x8f,0x8c,
0x87,0x7f,0x74,0x64,0x56,0x49,0x3c,0x32,0x2c,0x2c,0x31,0x38,0x41,0x4d,0x5b,0x69,
0x76,0x82,0x8b,0x8f,0x8c,0x87,0x7d,0x6f,0x61,0x53,0x46,0x3d,0x35,0x30,0x2f,0x34,
0x3f,0x4c,0x5c,0x6a,0x78,0x85,0x8a,0x8a,0x84,0x7d,0x74,0x69,0x5b,0x4c,0x40,0x38,
0x32,0x31,0x37,0x41,0x4e,0x60,0x71,0x7e,0x89,0x8e,0x8c,0x85,0x79,0x6b,0x5c,0x4f,
0x43,0x3b,0x33,0x2f,0x32,0x3e,0x51,0x64,0x7a,0x87,0x8d,0x90,0x88,0x7b,0x6d,0x61,
0x55,0x4d,0x40,0x37,0x32,0x36,0x42,0x56,0x6b,0x7d,0x87,0x89,0x81,0x76,0x6d,0x63,
0x58,0x4d,0x3f,0x36,0x33,0x39,0x46,0x5a,0x6d,0x7e,0x88,0x89,0x82,0x78,0x6f,0x61,
0x51,0x46,0x3f,0x39,0x39,0x40,0x4e,0x63,0x75,0x80,0x82,0x7e,0x72,0x64,0x56,0x4b,
0x41,0x3a,0x39,0x3c,0x49,0x5b,0x6e,0x7e,0x85,0x85,0x7e,0x71,0x60,0x52,0x48,0x40,
0x3b,0x3d,0x48,0x5a,0x6b,0x79,0x83,0x87,0x81,0x73,0x62,0x50,0x41,0x3a,0x39,0x3e,
0x45,0x57,0x6a,0x7a,0x82,0x81,0x77,0x6a,0x5b,0x4e,0x45,0x3f,0x3f,0x48,0x55,0x63,
0x72,0x7c,0x7f,0x79,0x6b,0x58,0x47,0x3e,0x3d,0x45,0x4e,0x57,0x64,0x73,0x7e,0x80,
0x77,0x6a,0x5c,0x51,0x48,0x46,0x4c,0x5b,0x68,0x73,0x79,0x7a,0x74,0x6e,0x5f,0x50,
0x47,0x44,0x48,0x52,0x5c,0x67,0x72,0x76,0x73,0x6a,0x5e,0x52,0x49,0x47,0x4d,0x58,
0x64,0x6e,0x73,0x74,0x6d,0x64,0x5b,0x52,0x4e,0x50,0x55,0x5c,0x66,0x6e,0x71,0x6c,
0x64,0x5b,0x52,0x51,0x50,0x54,0x5f,0x68,0x6e,0x6e,0x6a,0x63,0x5d,0x56,0x52,0x51,
0x56,0x5d,0x64,0x69,0x6c,0x6a,0x66,0x5e,0x55,0x53,0x56,0x5b,0x61,0x67,0x6b,0x6d,
0x66,0x5f,0x59,0x57,0x57,0x5d,0x62,0x66,0x68,0x67,0x61,0x5b,0x56,0x56,0x57,0x5e,
0x60,0x63,0x64,0x63,0x60,0x5b,0x57,0x59,0x5b,0x60,0x65,0x69,0x69,0x63,0x5b,0x54,
0x50,0x51,0x56,0x5f,0x68,0x70,0x71,0x6a,0x5e,0x54,0x50,0x54,0x5b,0x64,0x6c,0x70,
0x6c,0x61,0x55,0x4c,0x4b,0x54,0x62,0x6f,0x79,0x7a,0x70,0x5f,0x50,0x48,0x4c,0x59,
0x69,0x77,0x7d,0x75,0x64,0x53,0x47,0x45,0x52,0x61,0x72,0x7e,0x7b,0x6b,0x55,0x45,
0x40,0x49,0x5b,0x6e,0x7c,0x7e,0x71,0x5a,0x45,0x3f,0x47,0x5c,0x71,0x80,0x82,0x74,
0x5c,0x45,0x3a,0x41,0x57,0x71,0x81,0x80,0x6e,0x56,0x40,0x39,0x45,0x5e,0x79,0x86,
0x81,0x6d,0x52,0x3e,0x39,0x49,0x64,0x7e,0x87,0x7c,0x61,0x4a,0x3a,0x3e,0x52,0x6f,
0x82,0x84,0x6d,0x4e,0x38,0x35,0x46,0x64,0x7e,0x89,0x7f,0x64,0x45,0x36,0x3e,0x58,
0x75,0x86,0x81,0x68,0x49,0x33,0x35,0x50,0x71,0x88,0x89,0x73,0x52,0x3a,0x38,0x4d,
0x6a,0x85,0x89,0x74,0x54,0x3b,0x37,0x4e,0x6b,0x81,0x84,0x72,0x52,0x3a,0x38,0x4e,
0x6c,0x82,0x82,0x6d,0x51,0x3c,0x3c,0x54,0x71,0x83,0x7f,0x67,0x49,0x39,0x40,0x59,
0x75,0x84,0x7c,0x64,0x49,0x3e,0x49,0x65,0x7c,0x82,0x73,0x56,0x40,0x3f,0x50,0x6a,
0x7d,0x7d,0x6a,0x4f,0x40,0x45,0x5c,0x75,0x7d,0x72,0x5b,0x48,0x42,0x52,0x69,0x7a,
0x78,0x64,0x4b,0x40,0x46,0x5c,0x72,0x78,0x6e,0x5c,0x4e,0x4e,0x5b,0x6f,0x7a,0x73,
0x5f,0x4d,0x47,0x54,0x68,0x74,0x73,0x64,0x55,0x4c,0x56,0x65,0x73,0x77,0x6c,0x59,
0x4e,0x51,0x5f,0x6e,0x72,0x6b,0x5c,0x50,0x4f,0x5c,0x6a,0x71,0x6c,0x61,0x56,0x56,
0x5f,0x6a,0x6e,0x6a,0x5f,0x55,0x52,0x5a,0x63,0x6c,0x68,0x5d,0x53,0x53,0x5b,0x67,
0x6d,0x6c,0x66,0x5f,0x5a,0x5d,0x69,0x6f,0x6c,0x64,0x5a,0x57,0x5c,0x64,0x66,0x66,
0x5f,0x5a,0x55,0x5a,0x60,0x67,0x67,0x61,0x59,0x58,0x5c,0x63,0x66,0x66,0x61,0x5d,
0x5a,0x5c,0x61,0x65,0x66,0x62,0x5c,0x5a,0x5d,0x63,0x66,0x64,0x5f,0x5b,0x5b,0x5e,
0x61,0x64,0x66,0x63,0x5f,0x5f,0x61,0x66,0x67,0x66,0x61,0x5f,0x5e,0x5f,0x60,0x66,
0x64,0x60,0x5d,0x5c,0x5d,0x61,0x63,0x60,0x5f,0x5e,0x60,0x63,0x64,0x64,0x65,0x66,
0x65,0x65,0x64,0x65,0x64,0x63,0x5f,0x5f,0x61,0x63,0x62,0x61,0x5f,0x60,0x61,0x63,
0x63,0x63,0x61,0x60,0x5d,0x5c,0x5e,0x60,0x61,0x61,0x60,0x63,0x62,0x63,0x65,0x65,
0x65,0x65,0x63,0x61,0x5f,0x62,0x64,0x64,0x63,0x64,0x67,0x68,0x65,0x63,0x63,0x63,
0x61,0x61,0x60,0x60,0x5f,0x5d,0x5c,0x5d,0x5f,0x63,0x63,0x61,0x5f,0x5f,0x61,0x63,
0x62,0x64,0x64,0x62,0x60,0x5f,0x61,0x61,0x62,0x60,0x5f,0x61,0x61,0x60,0x61,0x5f,
0x5f,0x5e,0x5b,0x5b,0x5c,0x5e,0x5e,0x60,0x62,0x66,0x67,0x65,0x63,0x63,0x63,0x64,
0x61,0x5f,0x5f,0x5e,0x5c,0x5c,0x5f,0x63,0x65,0x65,0x64,0x63,0x61,0x61,0x5e,0x5c,
0x5c,0x5e,0x5e,0x5c,0x5e,0x61,0x62,0x64,0x62,0x61,0x62,0x63,0x60,0x61,0x62,0x64,
0x63,0x61,0x5c,0x5c,0x5f,0x61,0x61,0x61,0x61,0x61,0x61,0x60,0x60,0x62,0x64,0x64,
0x63,0x60,0x5f,0x5f,0x5f,0x5e,0x5f,0x63,0x64,0x64,0x62,0x61,0x63,0x64,0x64,0x63,
0x63,0x63,0x61,0x60,0x5f,0x60,0x61,0x62,0x5f,0x5f,0x61,0x63,0x5f,0x60,0x61,0x61,
0x63,0x61,0x60,0x60,0x5f,0x5f,0x61,0x63,0x64,0x66,0x66,0x64,0x61,0x61,0x62,0x63,
0x63,0x61,0x61,0x61,0x5e,0x5d,0x60,0x61,0x61,0x61,0x61,0x60,0x5f,0x5e,0x5c,0x5c,
0x5f,0x63,0x61,0x61,0x5f,0x60,0x61,0x61,0x60,0x62,0x63,0x62,0x60,0x5f,0x5e,0x60,
0x60,0x5f,0x5f,0x60,0x60,0x60,0x5f,0x61,0x61,0x64,0x63,0x63,0x63,0x64,0x64,0x65,
0x63,0x63,0x64,0x63,0x5f,0x5c,0x5d,0x5f,0x61,0x5f,0x5f,0x5d,0x5f,0x5f,0x5e,0x60,
0x60,0x60,0x60,0x5f,0x5e,0x5d,0x5f,0x5e,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x5f,0x61,
0x61,0x63,0x63,0x63,0x61,0x63,0x62,0x63,0x63,0x64,0x61,0x5f,0x5e,0x60,0x61,0x60,
0x5e,0x5e,0x60,0x5f,0x5d,0x5e,0x60,0x61,0x63,0x63,0x61,0x5f,0x60,0x5f,0x5f,0x5f,
0x60,0x5f,0x61,0x5f,0x5f,0x62,0x61,0x61,0x63,0x63,0x62,0x60,0x5e,0x5e,0x61,0x61,
0x61,0x61,0x63,0x63,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x60,0x61,0x62,0x65,0x64,
0x62,0x61,0x60,0x5f,0x5b,0x55,0x4f,0x4a,0x43,0x3c,0x39,0x37,0x36,0x33,0x31,0x30,
0x31,0x33,0x35,0x37,0x35,0x3a,0x39,0x37,0x37,0x37,0x38,0x39,0x36,0x34,0x36,0x37,
0x35,0x38,0x38,0x35,0x35,0x35,0x37,0x39,0x39,0x39,0x36,0x36,0x35,0x34,0x34,0x34,
0x35,0x39,0x39,0x38,0x38,0x37,0x37,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x36,0x35,
0x34,0x35,0x35,0x35,0x37,0x37,0x36,0x37,0x36,0x37,0x38,0x37,0x37,0x37,0x35,0x33,
0x32,0x32,0x34,0x35,0x35,0x33,0x32,0x35,0x36,0x36,0x37,0x37,0x37,0x38,0x37,0x38,
0x39,0x3a,0x39,0x37,0x36,0x36,0x35,0x35,0x33,0x34,0x35,0x35,0x34,0x34,0x37,0x38,
// Line 20
0x3a,0x3c,0x3c,0x3b,0x3a,0x39,0x3a,0x3d,0x3e,0x3c,0x39,0x38,0x36,0x36,0x37,0x39,
0x3a,0x3b,0x39,0x37,0x38,0x39,0x3a,0x3a,0x39,0x38,0x38,0x38,0x37,0x38,0x3c,0x42,
0x47,0x50,0x5c,0x6b,0x7c,0x8a,0x99,0xa6,0xaf,0xb7,0xbc,0xc1,0xc2,0xc2,0xc1,0xbf,
0xbe,0xbf,0xbf,0xbf,0xc0,0xc2,0xc3,0xc5,0xc2,0xbe,0xbf,0xc0,0xbf,0xbc,0xbb,0xb9,
0xb9,0xb9,0xb9,0xb9,0xbc,0xbc,0xbb,0xbb,0xb9,0xba,0xbc,0xbc,0xbb,0xbd,0xbe,0xbe,
0xbc,0xbb,0xbc,0xbf,0xc0,0xc0,0xc0,0xc0,0xbf,0xbe,0xbe,0xbd,0xbd,0xbf,0xbc,0xb9,
0xbb,0xbd,0xbd,0xbc,0xba,0xba,0xbc,0xbc,0xba,0xb9,0xba,0xbb,0xbb,0xbc,0xbe,0xc1,
0xc3,0xc2,0xc0,0xc0,0xc0,0xbf,0xbf,0xbc,0xb9,0xba,0xbb,0xbb,0xbb,0xbd,0xbe,0xbd,
0xbc,0xbc,0xbe,0xc0,0xc0,0xbf,0xc0,0xc0,0xc0,0xc0,0xc2,0xc3,0xc4,0xc4,0xc2,0xbf,
0xbe,0xbf,0xbf,0xc0,0xbe,0xbd,0xbd,0xbc,0xbb,0xbc,0xbc,0xbd,0xbd,0xbb,0xb9,0xb9,
0xbb,0xba,0xb9,0xba,0xba,0xb9,0xb9,0xb9,0xba,0xbc,0xbd,0xbd,0xbe,0xbd,0xbd,0xbd,
0xbb,0xbb,0xbc,0xbe,0xbf,0xbc,0xbc,0xbd,0xbd,0xbe,0xbe,0xbd,0xbe,0xbc,0xba,0xbb,
0xbb,0xbc,0xbc,0xbb,0xba,0xbc,0xbc,0xbc,0xbc,0xbc,0xbc,0xbd,0xbd,0xbc,0xbb,0xbb,
0xb9,0xb9,0xbc,0xc1,0xc2,0xbf,0xb9,0xb3,0xb1,0xb4,0xb8,0xb9,0xb5,0xac,0x9c,0x8b,
0x83,0x88,0x9a,0xa6,0xa9,0xa4,0x96,0x85,0x7c,0x84,0x96,0xa9,0xb1,0xac,0x96,0x82,
0x76,0x80,0x96,0xac,0xb6,0xaf,0x9b,0x81,0x74,0x7c,0x92,0xaa,0xb3,0xac,0x97,0x82,
0x76,0x7d,0x92,0xa8,0xb3,0xae,0x99,0x83,0x79,0x81,0x94,0xab,0xb4,0xae,0x99,0x83,
0x76,0x7d,0x91,0xa8,0xb2,0xac,0x98,0x83,0x76,0x7d,0x92,0xac,0xb5,0xad,0x98,0x82,
0x78,0x80,0x92,0xa7,0xb3,0xaf,0x9b,0x83,0x76,0x7c,0x90,0xa8,0xb1,0xac,0x98,0x83,
0x76,0x7c,0x90,0xa6,0xb3,0xac,0x98,0x83,0x76,0x7f,0x94,0xaa,0xb4,0xad,0x9a,0x83,
0x77,0x7d,0x91,0xa6,0xb3,0xaf,0x9d,0x88,0x7b,0x80,0x94,0xab,0xb7,0xb1,0x9c,0x85,
0x79,0x7f,0x93,0xab,0xb7,0xb2,0x9e,0x86,0x79,0x7f,0x93,0xa8,0xb4,0xaf,0x9d,0x86,
0x76,0x7f,0x91,0xa6,0xb1,0xac,0x96,0x82,0x74,0x78,0x8e,0xa7,0xb5,0xaf,0x9e,0x85,
0x79,0x82,0x97,0xac,0xb5,0xaf,0x9c,0x86,0x7a,0x80,0x94,0xa9,0xb4,0xad,0x9a,0x85,
0x7b,0x81,0x93,0xa7,0xb1,0xac,0x9a,0x86,0x7e,0x86,0x97,0xa5,0xa9,0xa4,0x96,0x8c,
0x8a,0x91,0x9e,0xa1,0x9a,0x8b,0x82,0x82,0x8d,0x98,0xa0,0x99,0x86,0x73,0x69,0x73,
0x8b,0xa0,0xa6,0x9a,0x7d,0x63,0x5c,0x6d,0x8b,0xa6,0xad,0x9b,0x79,0x5b,0x54,0x6b,
0x90,0xad,0xb3,0x9e,0x79,0x5c,0x56,0x6e,0x91,0xad,0xb3,0x9d,0x7b,0x5f,0x5c,0x70,
0x92,0xac,0xb1,0x9e,0x7d,0x60,0x5d,0x72,0x8f,0xaa,0xaf,0x9c,0x7c,0x61,0x59,0x6c,
0x8d,0xa9,0xb1,0x9f,0x7e,0x62,0x5c,0x6f,0x8e,0xa9,0xaf,0x9c,0x7a,0x5e,0x5a,0x70,
0x8f,0xa9,0xaf,0x9f,0x7e,0x60,0x59,0x6d,0x8f,0xaa,0xae,0x99,0x78,0x5c,0x56,0x6b,
0x8d,0xa9,0xae,0x9d,0x7a,0x5e,0x57,0x6c,0x8b,0xab,0xaf,0x9a,0x7b,0x5f,0x57,0x6b,
0x8c,0xa7,0xaf,0x9e,0x7c,0x61,0x59,0x6b,0x8b,0xa7,0xaf,0x9e,0x7d,0x5f,0x58,0x6d,
0x8d,0xa8,0xae,0x9c,0x7a,0x5e,0x58,0x6e,0x8f,0xaa,0xaf,0x9c,0x7d,0x61,0x59,0x6d,
0x8c,0xa6,0xad,0x9b,0x79,0x5e,0x59,0x6c,0x8d,0xa7,0xad,0x9a,0x7a,0x5e,0x58,0x6e,
0x8f,0xa9,0xaf,0x9b,0x7a,0x60,0x5a,0x6c,0x8d,0xa8,0xac,0x9a,0x7b,0x5f,0x58,0x6b,
0x8c,0xa6,0xad,0x9b,0x79,0x60,0x55,0x66,0x87,0xa5,0xae,0xa4,0x84,0x62,0x54,0x5f,
0x7b,0x96,0xa5,0x9a,0x7e,0x5f,0x4c,0x52,0x69,0x86,0x9b,0x9c,0x88,0x69,0x51,0x51,
0x67,0x89,0x9f,0xa1,0x8d,0x6f,0x56,0x54,0x68,0x88,0xa0,0xa3,0x91,0x71,0x57,0x51,
0x63,0x83,0x9e,0xa1,0x8e,0x6e,0x56,0x52,0x67,0x85,0x9e,0xa3,0x91,0x71,0x59,0x50,
0x62,0x85,0x9e,0xa1,0x8c,0x6c,0x54,0x52,0x65,0x84,0x9e,0xa3,0x90,0x71,0x55,0x51,
0x65,0x85,0x9c,0xa0,0x8d,0x70,0x56,0x50,0x61,0x80,0x9a,0x9f,0x8d,0x6e,0x54,0x4e,
0x61,0x84,0x9f,0xa1,0x90,0x70,0x55,0x52,0x65,0x81,0x9d,0xa3,0x90,0x72,0x57,0x52,
0x67,0x89,0xa1,0xa4,0x8f,0x70,0x57,0x52,0x64,0x83,0x9c,0xa1,0x8e,0x6f,0x54,0x4f,
0x65,0x84,0x9b,0x9f,0x8c,0x6d,0x53,0x50,0x65,0x85,0x9d,0x9f,0x8b,0x6f,0x56,0x52,
0x64,0x83,0x9c,0xa1,0x8d,0x6e,0x56,0x54,0x68,0x86,0x9c,0xa0,0x89,0x6e,0x53,0x4f,
0x65,0x86,0x9d,0xa4,0x8d,0x6d,0x56,0x53,0x65,0x84,0x9c,0x9f,0x8c,0x6e,0x57,0x56,
0x6a,0x86,0x9c,0x9e,0x8a,0x6e,0x57,0x55,0x67,0x83,0x97,0x98,0x89,0x73,0x62,0x5f,
0x6b,0x7f,0x8d,0x91,0x88,0x7a,0x70,0x6c,0x6c,0x6e,0x70,0x70,0x73,0x76,0x78,0x78,
0x71,0x63,0x56,0x52,0x5a,0x6b,0x7e,0x81,0x72,0x5c,0x46,0x41,0x51,0x6f,0x89,0x90,
0x7b,0x57,0x3b,0x38,0x4e,0x71,0x8b,0x91,0x7e,0x5c,0x41,0x3d,0x54,0x78,0x91,0x91,
0x79,0x56,0x40,0x40,0x56,0x76,0x8d,0x8f,0x7b,0x5e,0x47,0x44,0x5c,0x7b,0x90,0x94,
0x7e,0x5d,0x46,0x40,0x54,0x74,0x8d,0x8f,0x7c,0x5e,0x44,0x40,0x52,0x71,0x8c,0x92,
0x7e,0x5c,0x43,0x41,0x56,0x78,0x90,0x94,0x82,0x63,0x48,0x42,0x56,0x76,0x8f,0x93,
0x7f,0x60,0x49,0x45,0x56,0x77,0x90,0x93,0x80,0x5e,0x44,0x41,0x54,0x72,0x89,0x90,
0x7d,0x5f,0x46,0x43,0x55,0x76,0x8d,0x90,0x7c,0x5c,0x42,0x3f,0x52,0x70,0x8b,0x90,
0x7c,0x5c,0x42,0x41,0x56,0x75,0x8d,0x90,0x7c,0x5d,0x44,0x43,0x58,0x78,0x90,0x90,
0x7c,0x5f,0x48,0x44,0x54,0x74,0x8b,0x8f,0x7d,0x60,0x4a,0x48,0x5a,0x76,0x90,0x94,
0x80,0x60,0x46,0x40,0x54,0x72,0x8b,0x8f,0x7c,0x60,0x47,0x44,0x56,0x76,0x8d,0x8e,
0x79,0x5c,0x44,0x42,0x55,0x72,0x88,0x8d,0x7b,0x60,0x49,0x4b,0x5f,0x7b,0x8b,0x89,
0x72,0x57,0x45,0x47,0x5e,0x7a,0x87,0x7f,0x63,0x45,0x38,0x46,0x62,0x7d,0x85,0x76,
0x56,0x3a,0x31,0x46,0x68,0x85,0x8c,0x7a,0x57,0x39,0x31,0x46,0x68,0x85,0x8c,0x76,
0x51,0x33,0x2e,0x45,0x69,0x85,0x88,0x76,0x52,0x33,0x2f,0x43,0x67,0x85,0x8b,0x76,
0x55,0x3a,0x36,0x4a,0x69,0x83,0x89,0x76,0x54,0x39,0x35,0x49,0x67,0x83,0x8a,0x79,
0x58,0x3a,0x33,0x4a,0x6c,0x88,0x8c,0x78,0x56,0x3a,0x34,0x48,0x6a,0x85,0x89,0x75,
0x52,0x35,0x2f,0x46,0x67,0x80,0x86,0x72,0x51,0x33,0x32,0x49,0x6b,0x88,0x8d,0x7a,
0x57,0x3a,0x33,0x48,0x69,0x84,0x8a,0x76,0x53,0x37,0x31,0x47,0x68,0x84,0x8a,0x77,
0x56,0x3a,0x34,0x4a,0x6b,0x88,0x8d,0x7a,0x57,0x3c,0x34,0x47,0x67,0x85,0x8c,0x76,
0x54,0x39,0x36,0x4c,0x6d,0x84,0x8c,0x78,0x55,0x3a,0x32,0x46,0x68,0x83,0x88,0x74,
0x53,0x38,0x34,0x4a,0x6a,0x84,0x89,0x77,0x56,0x3b,0x35,0x49,0x6a,0x84,0x89,0x78,
0x56,0x3a,0x36,0x4b,0x6b,0x83,0x87,0x75,0x56,0x3c,0x35,0x44,0x68,0x81,0x87,0x77,
0x5b,0x43,0x3e,0x4b,0x60,0x79,0x82,0x7a,0x63,0x4b,0x3e,0x40,0x4e,0x60,0x6d,0x72,
0x66,0x53,0x42,0x38,0x39,0x44,0x53,0x5f,0x62,0x5b,0x4a,0x39,0x30,0x38,0x4e,0x63,
0x6d,0x67,0x54,0x3e,0x2e,0x33,0x46,0x5e,0x6d,0x6b,0x54,0x3c,0x2d,0x31,0x45,0x5d,
0x6b,0x69,0x55,0x3d,0x2c,0x36,0x4c,0x62,0x6e,0x67,0x52,0x3b,0x2d,0x32,0x47,0x60,
0x6c,0x67,0x51,0x38,0x2c,0x34,0x49,0x5f,0x69,0x64,0x50,0x3a,0x2e,0x35,0x4b,0x61,
0x6b,0x65,0x53,0x3e,0x30,0x34,0x48,0x60,0x6b,0x65,0x4e,0x3c,0x2f,0x33,0x47,0x5d,
0x69,0x66,0x54,0x3b,0x2e,0x33,0x49,0x60,0x6c,0x65,0x54,0x3e,0x31,0x33,0x47,0x5e,
0x6a,0x66,0x52,0x3a,0x2d,0x32,0x46,0x5e,0x6b,0x66,0x54,0x3b,0x2c,0x33,0x49,0x5f,
0x6b,0x66,0x53,0x3b,0x2d,0x31,0x44,0x5c,0x6a,0x66,0x54,0x3d,0x30,0x35,0x49,0x5f,
0x6c,0x69,0x55,0x3a,0x2d,0x33,0x47,0x5f,0x6b,0x69,0x56,0x3f,0x2e,0x33,0x48,0x5f,
0x6c,0x67,0x51,0x3a,0x2c,0x33,0x46,0x5e,0x6b,0x66,0x51,0x39,0x2d,0x35,0x4b,0x60,
0x6d,0x69,0x56,0x3f,0x31,0x35,0x4a,0x60,0x6b,0x62,0x53,0x3f,0x33,0x39,0x48,0x5a,
0x69,0x64,0x54,0x42,0x37,0x3a,0x46,0x52,0x56,0x55,0x4c,0x41,0x38,0x38,0x40,0x48,
0x4b,0x49,0x43,0x41,0x3d,0x3e,0x41,0x43,0x44,0x43,0x42,0x40,0x42,0x44,0x46,0x44,
0x42,0x40,0x40,0x43,0x46,0x45,0x46,0x48,0x44,0x43,0x42,0x43,0x44,0x43,0x41,0x40,
0x41,0x41,0x40,0x3f,0x40,0x43,0x46,0x46,0x44,0x44,0x43,0x42,0x43,0x44,0x46,0x46,
0x42,0x40,0x3f,0x3f,0x41,0x42,0x44,0x44,0x43,0x42,0x40,0x40,0x42,0x43,0x44,0x44,
0x42,0x41,0x41,0x40,0x3f,0x41,0x42,0x43,0x41,0x44,0x43,0x42,0x42,0x42,0x43,0x44,
0x44,0x44,0x44,0x42,0x3f,0x3e,0x3d,0x3d,0x3e,0x3e,0x3e,0x3c,0x3a,0x3b,0x3e,0x43,
0x43,0x40,0x3f,0x3e,0x3d,0x3f,0x41,0x42,0x44,0x44,0x41,0x40,0x42,0x46,0x45,0x45,
0x42,0x40,0x3f,0x3f,0x3f,0x42,0x42,0x40,0x3f,0x40,0x42,0x44,0x44,0x43,0x43,0x43,
0x41,0x3f,0x3e,0x3e,0x3f,0x42,0x43,0x43,0x42,0x44,0x44,0x44,0x44,0x45,0x45,0x44,
0x42,0x42,0x44,0x44,0x44,0x44,0x44,0x44,0x43,0x42,0x41,0x44,0x41,0x3f,0x3e,0x3f,
0x41,0x41,0x42,0x3f,0x3e,0x3f,0x40,0x42,0x42,0x41,0x40,0x41,0x40,0x3e,0x3e,0x40,
0x41,0x42,0x41,0x3f,0x3e,0x3e,0x3d,0x3d,0x3c,0x3b,0x38,0x34,0x31,0x33,0x35,0x37,
// Line 21
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//Field 4
// Line 10
0x36,0x39,0x3b,0x3a,0x37,0x36,0x38,0x39,0x39,0x38,0x38,0x37,0x36,0x34,0x33,0x36,
0x38,0x3a,0x3b,0x3a,0x38,0x37,0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x37,0x36,0x37,
0x38,0x38,0x39,0x3a,0x39,0x3a,0x3a,0x39,0x39,0x39,0x3a,0x3a,0x3d,0x3c,0x3b,0x3b,
0x37,0x37,0x38,0x38,0x37,0x37,0x37,0x36,0x37,0x38,0x3a,0x38,0x3a,0x37,0x34,0x34,
0x36,0x36,0x37,0x37,0x37,0x37,0x36,0x37,0x38,0x39,0x38,0x36,0x35,0x35,0x36,0x36,
0x38,0x38,0x39,0x3a,0x39,0x39,0x39,0x3a,0x3d,0x3d,0x3c,0x3a,0x38,0x38,0x38,0x38,
0x39,0x3a,0x3b,0x3a,0x39,0x3a,0x3b,0x3b,0x3c,0x3b,0x39,0x39,0x3a,0x39,0x38,0x36,
0x36,0x37,0x37,0x37,0x38,0x3a,0x39,0x38,0x38,0x3a,0x3a,0x39,0x37,0x35,0x37,0x38,
0x39,0x37,0x36,0x35,0x36,0x37,0x39,0x3a,0x3e,0x3d,0x3a,0x39,0x38,0x38,0x39,0x39,
0x39,0x3a,0x3b,0x3a,0x39,0x38,0x38,0x39,0x3a,0x3a,0x39,0x38,0x37,0x37,0x38,0x39,
0x39,0x39,0x39,0x3a,0x3b,0x3c,0x3c,0x3b,0x3a,0x39,0x37,0x37,0x37,0x36,0x38,0x38,
0x38,0x39,0x3a,0x3b,0x3d,0x3d,0x3d,0x3d,0x3d,0x3e,0x3d,0x3a,0x38,0x37,0x35,0x33,
0x34,0x36,0x37,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x39,0x3a,0x3a,0x37,0x37,0x38,
0x3a,0x39,0x39,0x39,0x3a,0x39,0x38,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3c,0x3d,0x3c,
0x3a,0x38,0x36,0x34,0x37,0x38,0x38,0x39,0x38,0x36,0x36,0x37,0x39,0x3d,0x3d,0x3b,
0x3b,0x3b,0x3a,0x38,0x38,0x38,0x38,0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x38,0x37,
0x38,0x37,0x38,0x38,0x39,0x3a,0x38,0x38,0x38,0x38,0x39,0x39,0x3a,0x39,0x37,0x35,
0x36,0x38,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x3b,0x3a,0x3a,0x3a,0x39,0x39,0x37,0x36,
0x37,0x39,0x3a,0x3b,0x3a,0x3b,0x3d,0x3d,0x3b,0x3b,0x3a,0x39,0x38,0x37,0x37,0x37,
0x38,0x38,0x38,0x3a,0x39,0x38,0x36,0x35,0x34,0x34,0x35,0x36,0x38,0x3a,0x3b,0x38,
0x38,0x38,0x3a,0x3b,0x3b,0x39,0x39,0x38,0x37,0x38,0x38,0x39,0x3b,0x3a,0x38,0x38,
0x38,0x3a,0x39,0x38,0x38,0x39,0x3a,0x39,0x3a,0x3b,0x3b,0x38,0x38,0x38,0x3c,0x3f,
0x3f,0x3b,0x3b,0x3a,0x3a,0x38,0x39,0x39,0x38,0x39,0x38,0x36,0x38,0x38,0x37,0x37,
0x36,0x34,0x34,0x35,0x34,0x36,0x38,0x39,0x3b,0x3d,0x3d,0x3d,0x3d,0x3c,0x3b,0x3b,
0x3b,0x3a,0x39,0x37,0x36,0x37,0x36,0x35,0x38,0x39,0x3a,0x38,0x37,0x37,0x38,0x39,
0x38,0x38,0x37,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x38,0x36,0x36,
0x36,0x37,0x3a,0x3c,0x3d,0x3f,0x3f,0x3d,0x3e,0x3d,0x3c,0x3c,0x39,0x37,0x37,0x38,
0x38,0x3a,0x3a,0x3b,0x3d,0x3e,0x3d,0x3b,0x3c,0x3c,0x3a,0x39,0x37,0x35,0x36,0x36,
0x33,0x33,0x33,0x35,0x35,0x36,0x36,0x38,0x3a,0x3c,0x3a,0x3b,0x39,0x38,0x39,0x39,
0x3a,0x3a,0x38,0x37,0x37,0x38,0x3a,0x3b,0x3c,0x3c,0x3c,0x3c,0x3b,0x3b,0x3d,0x3e,
0x3d,0x3d,0x3a,0x38,0x37,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3a,0x3a,0x3c,0x3d,0x3d,
0x3b,0x3a,0x3b,0x3b,0x3c,0x3b,0x3b,0x39,0x37,0x35,0x36,0x39,0x3c,0x3d,0x3c,0x3a,
0x3a,0x3c,0x3e,0x3f,0x3f,0x3d,0x3a,0x38,0x37,0x38,0x3a,0x3b,0x3a,0x3a,0x37,0x38,
0x38,0x3a,0x3a,0x3b,0x3d,0x3d,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x38,0x38,0x37,0x36,
0x35,0x36,0x38,0x39,0x38,0x37,0x39,0x3c,0x3d,0x3d,0x3b,0x3b,0x39,0x38,0x37,0x38,
0x38,0x38,0x36,0x36,0x35,0x37,0x38,0x3a,0x3a,0x3c,0x3c,0x3a,0x38,0x38,0x38,0x38,
0x39,0x3a,0x3a,0x3d,0x3c,0x39,0x39,0x3b,0x3c,0x3c,0x39,0x36,0x36,0x37,0x37,0x37,
0x37,0x38,0x3a,0x3c,0x3d,0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x37,0x3a,0x3a,0x37,0x35,
0x34,0x37,0x39,0x3b,0x3b,0x3c,0x3d,0x3b,0x3a,0x3b,0x3b,0x3b,0x3b,0x3a,0x37,0x34,
0x32,0x33,0x36,0x37,0x37,0x36,0x35,0x36,0x37,0x39,0x39,0x39,0x3a,0x3a,0x37,0x36,
0x36,0x38,0x3a,0x39,0x36,0x36,0x36,0x38,0x38,0x3a,0x3a,0x3b,0x3d,0x3d,0x3b,0x3a,
0x3b,0x3c,0x3b,0x37,0x36,0x37,0x38,0x37,0x37,0x3a,0x3b,0x39,0x3a,0x38,0x38,0x38,
0x38,0x38,0x3b,0x39,0x37,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x37,0x3a,0x3a,0x38,
0x3b,0x3d,0x40,0x3f,0x3e,0x3d,0x3e,0x3c,0x3b,0x3b,0x3c,0x3d,0x3c,0x39,0x38,0x37,
0x38,0x38,0x38,0x37,0x38,0x39,0x38,0x38,0x3b,0x3c,0x3b,0x3b,0x3a,0x3a,0x39,0x38,
0x37,0x38,0x38,0x38,0x37,0x35,0x36,0x37,0x38,0x38,0x38,0x38,0x37,0x37,0x37,0x37,
0x38,0x3a,0x39,0x37,0x36,0x36,0x37,0x38,0x3a,0x3b,0x3b,0x3b,0x39,0x37,0x37,0x38,
0x39,0x3b,0x3a,0x3a,0x38,0x37,0x37,0x38,0x3a,0x3d,0x3b,0x3b,0x38,0x37,0x39,0x3b,
0x3c,0x3e,0x3f,0x3d,0x3c,0x3a,0x39,0x3a,0x3a,0x39,0x37,0x36,0x37,0x37,0x38,0x38,
0x38,0x3a,0x38,0x37,0x39,0x3b,0x3a,0x38,0x38,0x39,0x3b,0x3b,0x39,0x3a,0x3b,0x3b,
0x38,0x38,0x37,0x38,0x3a,0x3a,0x39,0x38,0x39,0x39,0x3a,0x38,0x38,0x38,0x37,0x34,
0x32,0x32,0x33,0x34,0x35,0x36,0x37,0x39,0x39,0x3a,0x3a,0x39,0x39,0x3a,0x3a,0x3a,
0x3a,0x39,0x37,0x36,0x36,0x39,0x3a,0x3b,0x3a,0x39,0x39,0x38,0x37,0x37,0x39,0x3a,
0x3b,0x3a,0x39,0x3a,0x3a,0x3a,0x3a,0x39,0x3b,0x3a,0x38,0x36,0x35,0x36,0x36,0x36,
0x38,0x39,0x39,0x3a,0x38,0x37,0x37,0x36,0x34,0x35,0x36,0x37,0x35,0x36,0x37,0x38,
0x3b,0x3d,0x3c,0x3c,0x3b,0x3a,0x3b,0x3a,0x3a,0x3b,0x38,0x34,0x33,0x34,0x36,0x37,
0x37,0x38,0x38,0x38,0x38,0x38,0x3a,0x3a,0x3b,0x3b,0x38,0x37,0x36,0x37,0x36,0x36,
0x37,0x38,0x39,0x3a,0x38,0x37,0x38,0x39,0x38,0x38,0x39,0x38,0x38,0x37,0x36,0x38,
0x39,0x39,0x39,0x38,0x38,0x35,0x36,0x33,0x34,0x36,0x36,0x33,0x33,0x33,0x35,0x38,
0x3a,0x3b,0x3d,0x3c,0x3a,0x39,0x39,0x3a,0x3b,0x3a,0x38,0x37,0x37,0x36,0x36,0x36,
0x38,0x3b,0x3e,0x3c,0x39,0x39,0x39,0x3a,0x3a,0x39,0x38,0x38,0x36,0x33,0x32,0x33,
0x35,0x38,0x38,0x37,0x37,0x39,0x3a,0x3a,0x3b,0x3c,0x3b,0x39,0x37,0x38,0x38,0x37,
0x36,0x35,0x37,0x37,0x37,0x36,0x34,0x34,0x37,0x38,0x37,0x39,0x3b,0x3b,0x3a,0x39,
0x38,0x38,0x38,0x36,0x36,0x36,0x36,0x35,0x35,0x37,0x38,0x39,0x3a,0x3a,0x3b,0x3b,
0x3a,0x3b,0x3a,0x3a,0x38,0x3a,0x38,0x38,0x38,0x38,0x38,0x38,0x35,0x33,0x37,0x38,
0x38,0x38,0x38,0x3a,0x3a,0x39,0x39,0x3b,0x3c,0x3b,0x38,0x39,0x3b,0x3a,0x38,0x35,
0x35,0x37,0x38,0x38,0x38,0x38,0x38,0x38,0x37,0x38,0x38,0x38,0x37,0x36,0x37,0x36,
0x35,0x36,0x37,0x37,0x38,0x38,0x36,0x37,0x37,0x37,0x37,0x37,0x39,0x3a,0x3b,0x38,
0x37,0x38,0x39,0x38,0x38,0x38,0x37,0x38,0x39,0x3b,0x3a,0x38,0x37,0x38,0x38,0x38,
0x38,0x38,0x38,0x36,0x36,0x37,0x37,0x38,0x38,0x38,0x37,0x37,0x36,0x37,0x38,0x38,
0x3a,0x38,0x37,0x37,0x37,0x37,0x36,0x38,0x38,0x39,0x3a,0x38,0x36,0x37,0x38,0x37,
0x37,0x37,0x36,0x37,0x37,0x37,0x37,0x38,0x39,0x3a,0x3c,0x3b,0x38,0x37,0x36,0x35,
0x37,0x38,0x38,0x36,0x34,0x33,0x33,0x35,0x37,0x38,0x37,0x36,0x33,0x33,0x33,0x36,
0x38,0x37,0x35,0x35,0x35,0x36,0x35,0x37,0x38,0x3a,0x39,0x38,0x38,0x3a,0x39,0x37,
0x38,0x38,0x38,0x3a,0x37,0x35,0x36,0x35,0x35,0x35,0x36,0x36,0x37,0x37,0x36,0x36,
0x35,0x36,0x37,0x39,0x39,0x38,0x38,0x37,0x37,0x3a,0x3a,0x3a,0x3a,0x3a,0x39,0x38,
0x37,0x37,0x38,0x39,0x38,0x37,0x37,0x36,0x36,0x36,0x36,0x35,0x35,0x35,0x34,0x33,
0x33,0x34,0x36,0x37,0x37,0x38,0x3a,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x36,
0x35,0x33,0x32,0x33,0x34,0x37,0x38,0x3a,0x39,0x3c,0x3b,0x3a,0x3a,0x3a,0x38,0x39,
0x37,0x35,0x34,0x34,0x37,0x37,0x38,0x38,0x38,0x38,0x36,0x34,0x34,0x35,0x37,0x38,
0x37,0x36,0x37,0x36,0x34,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x37,0x38,0x38,0x38,
0x3a,0x38,0x38,0x34,0x34,0x35,0x36,0x36,0x37,0x38,0x38,0x33,0x35,0x36,0x37,0x38,
0x38,0x38,0x37,0x35,0x33,0x35,0x37,0x38,0x3b,0x3a,0x38,0x3a,0x3c,0x3d,0x3d,0x3b,
0x3a,0x3a,0x39,0x37,0x37,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x38,0x37,0x37,0x38,
0x3a,0x3a,0x38,0x39,0x3b,0x3d,0x3d,0x3d,0x3d,0x3c,0x3a,0x38,0x38,0x38,0x39,0x37,
0x36,0x35,0x36,0x36,0x37,0x38,0x38,0x38,0x38,0x36,0x35,0x36,0x38,0x38,0x3b,0x3b,
0x3a,0x3b,0x3b,0x3b,0x3c,0x3d,0x3d,0x39,0x38,0x36,0x36,0x37,0x37,0x36,0x36,0x37,
0x37,0x37,0x37,0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,0x38,0x39,0x38,0x38,0x39,0x3a,
0x37,0x39,0x39,0x38,0x39,0x38,0x38,0x3b,0x3a,0x3b,0x3a,0x38,0x3a,0x3a,0x39,0x37,
0x38,0x3b,0x3c,0x3a,0x3a,0x38,0x38,0x38,0x39,0x3a,0x3d,0x3d,0x3b,0x3a,0x38,0x37,
0x38,0x36,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x37,0x38,0x38,0x38,0x3a,0x3a,0x37,
0x37,0x38,0x38,0x38,0x36,0x35,0x36,0x36,0x37,0x38,0x39,0x38,0x39,0x39,0x38,0x38,
0x39,0x3a,0x3a,0x3a,0x3a,0x38,0x37,0x36,0x34,0x36,0x38,0x38,0x38,0x38,0x38,0x38,
0x38,0x38,0x38,0x3a,0x3b,0x3a,0x3a,0x39,0x38,0x39,0x36,0x35,0x37,0x39,0x3a,0x37,
0x37,0x37,0x38,0x39,0x39,0x3b,0x3f,0x3d,0x3a,0x39,0x38,0x37,0x38,0x37,0x34,0x35,
0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x34,0x33,0x36,0x38,0x38,0x3a,0x39,0x38,0x3a,
// Line 11
0x38,0x39,0x3a,0x3a,0x37,0x36,0x38,0x39,0x38,0x36,0x36,0x36,0x37,0x38,0x38,0x38,
0x37,0x36,0x34,0x34,0x34,0x34,0x34,0x33,0x32,0x32,0x33,0x36,0x37,0x36,0x34,0x34,
0x34,0x34,0x36,0x37,0x36,0x37,0x37,0x37,0x37,0x37,0x37,0x37,0x38,0x38,0x37,0x3a,
0x36,0x33,0x34,0x39,0x44,0x57,0x6a,0x75,0x78,0x71,0x64,0x59,0x53,0x55,0x5f,0x6c,
0x77,0x7a,0x75,0x6c,0x63,0x5e,0x5d,0x60,0x67,0x6d,0x71,0x72,0x6e,0x67,0x60,0x5c,
0x5d,0x64,0x6c,0x73,0x76,0x74,0x6d,0x64,0x5f,0x5a,0x5c,0x63,0x6c,0x71,0x75,0x74,
0x6f,0x66,0x5f,0x5a,0x5c,0x63,0x6d,0x74,0x76,0x73,0x6c,0x66,0x5f,0x5c,0x5f,0x65,
0x6d,0x74,0x74,0x71,0x6a,0x63,0x5a,0x56,0x5a,0x66,0x71,0x7a,0x7c,0x75,0x71,0x6a,
0x63,0x64,0x66,0x68,0x6d,0x6c,0x6a,0x6a,0x6f,0x76,0x83,0x90,0x9d,0xa6,0xaa,0xa7,
0x9d,0x8f,0x7f,0x70,0x64,0x5a,0x55,0x52,0x4d,0x43,0x39,0x34,0x38,0x44,0x55,0x69,
0x7a,0x86,0x8d,0x91,0x96,0x9b,0x9e,0xa2,0x9e,0x9b,0x9a,0x99,0x97,0x97,0x95,0x8e,
0x83,0x73,0x67,0x5d,0x55,0x4b,0x42,0x3b,0x36,0x36,0x3d,0x4d,0x62,0x76,0x7e,0x7c,
0x74,0x67,0x5c,0x57,0x51,0x4a,0x40,0x35,0x2f,0x33,0x44,0x5b,0x71,0x80,0x83,0x7c,
0x6f,0x60,0x55,0x51,0x4d,0x47,0x40,0x38,0x32,0x2d,0x31,0x34,0x3b,0x47,0x57,0x65,
0x71,0x77,0x77,0x72,0x68,0x61,0x5a,0x53,0x4d,0x45,0x3a,0x33,0x31,0x3c,0x50,0x68,
0x7e,0x8e,0x96,0x97,0x94,0x90,0x8b,0x82,0x72,0x63,0x58,0x57,0x61,0x6e,0x7a,0x7d,
0x7b,0x70,0x64,0x5d,0x5b,0x56,0x50,0x41,0x30,0x29,0x30,0x43,0x5e,0x75,0x82,0x82,
0x75,0x66,0x5c,0x58,0x53,0x4c,0x43,0x39,0x34,0x39,0x49,0x60,0x78,0x86,0x85,0x79,
0x68,0x5b,0x56,0x56,0x59,0x5e,0x65,0x6c,0x75,0x83,0x91,0x99,0x9e,0x95,0x86,0x75,
0x62,0x55,0x4c,0x45,0x3d,0x38,0x37,0x3e,0x4b,0x5b,0x6b,0x7a,0x86,0x8d,0x91,0x96,
0x9a,0x9f,0xa4,0xa5,0x9d,0x91,0x80,0x71,0x62,0x56,0x4e,0x49,0x44,0x3d,0x37,0x34,
0x33,0x34,0x39,0x3d,0x3c,0x3b,0x3a,0x39,0x3a,0x39,0x39,0x37,0x33,0x30,0x32,0x3c,
0x4b,0x5e,0x71,0x7d,0x7e,0x73,0x66,0x5d,0x5d,0x62,0x6b,0x74,0x78,0x7b,0x7f,0x86,
0x8f,0x9a,0xa2,0x9e,0x8d,0x75,0x5c,0x4d,0x51,0x5c,0x6a,0x78,0x7e,0x7b,0x72,0x67,
0x60,0x5e,0x5a,0x54,0x47,0x38,0x2d,0x2f,0x3f,0x58,0x72,0x84,0x86,0x7e,0x70,0x62,
0x5a,0x5d,0x68,0x75,0x80,0x83,0x7d,0x72,0x68,0x62,0x60,0x66,0x6d,0x75,0x7b,0x78,
0x71,0x69,0x61,0x5e,0x63,0x6c,0x75,0x7d,0x7e,0x78,0x6e,0x67,0x61,0x5e,0x5e,0x5c,
0x55,0x4b,0x3d,0x30,0x2c,0x2c,0x31,0x38,0x42,0x4e,0x5c,0x69,0x73,0x78,0x77,0x71,
0x6a,0x63,0x5e,0x59,0x53,0x49,0x3e,0x36,0x36,0x40,0x53,0x6a,0x80,0x90,0x98,0x9a,
0x96,0x91,0x89,0x7f,0x73,0x64,0x55,0x49,0x3f,0x3b,0x3b,0x3c,0x3e,0x3e,0x3b,0x3a,
0x3e,0x46,0x51,0x61,0x6f,0x78,0x79,0x75,0x6a,0x60,0x5c,0x5f,0x68,0x75,0x7c,0x7c,
0x76,0x6c,0x62,0x5f,0x63,0x6a,0x6e,0x75,0x75,0x73,0x77,0x81,0x8c,0x9c,0xa4,0xa8,
0xa9,0xa4,0x9d,0x96,0x92,0x92,0x94,0x95,0x92,0x8c,0x81,0x71,0x5e,0x4d,0x43,0x40,
0x40,0x40,0x3d,0x3a,0x37,0x35,0x36,0x3d,0x47,0x57,0x66,0x72,0x79,0x78,0x71,0x6a,
0x63,0x5a,0x52,0x4b,0x45,0x3d,0x38,0x33,0x31,0x31,0x36,0x40,0x4f,0x5c,0x68,0x72,
0x78,0x78,0x73,0x6a,0x61,0x58,0x55,0x4f,0x46,0x3f,0x38,0x32,0x30,0x33,0x38,0x41,
0x4a,0x53,0x5c,0x64,0x6e,0x78,0x84,0x8e,0x95,0x9a,0x9f,0xa3,0xa6,0xa2,0x99,0x8a,
0x77,0x66,0x5c,0x5a,0x5e,0x64,0x6c,0x73,0x7a,0x82,0x8b,0x95,0x9c,0x9d,0x94,0x86,
0x73,0x63,0x58,0x53,0x55,0x5e,0x6c,0x79,0x84,0x8c,0x90,0x96,0x9d,0xa1,0xa1,0x9e,
0x99,0x95,0x95,0x96,0x96,0x96,0x93,0x8b,0x80,0x6f,0x61,0x59,0x59,0x5f,0x68,0x70,
0x7a,0x85,0x90,0x98,0x9a,0x97,0x90,0x85,0x75,0x61,0x4e,0x43,0x3d,0x3b,0x3a,0x3b,
0x3b,0x3a,0x39,0x38,0x3b,0x44,0x53,0x65,0x73,0x79,0x77,0x71,0x69,0x61,0x5c,0x57,
0x50,0x47,0x3e,0x37,0x39,0x44,0x57,0x6b,0x80,0x8c,0x91,0x96,0x97,0x95,0x90,0x84,
0x71,0x62,0x58,0x55,0x59,0x68,0x75,0x7e,0x7b,0x6f,0x61,0x5a,0x59,0x60,0x6c,0x74,
0x77,0x73,0x69,0x61,0x5f,0x61,0x61,0x5d,0x52,0x43,0x36,0x2d,0x30,0x3f,0x55,0x6c,
0x7d,0x8b,0x92,0x97,0x99,0x95,0x8c,0x80,0x70,0x60,0x55,0x53,0x5b,0x6a,0x75,0x7b,
0x77,0x6f,0x66,0x60,0x5c,0x59,0x53,0x4a,0x3d,0x31,0x2b,0x2c,0x31,0x38,0x40,0x47,
0x50,0x5b,0x66,0x74,0x82,0x8c,0x91,0x96,0x96,0x91,0x8b,0x7c,0x68,0x57,0x4a,0x42,
0x3b,0x3b,0x3b,0x3a,0x36,0x32,0x31,0x36,0x40,0x4c,0x59,0x64,0x73,0x82,0x8e,0x97,
0x9d,0x9b,0x93,0x84,0x71,0x62,0x59,0x56,0x58,0x5f,0x6b,0x78,0x84,0x8f,0x96,0x9a,
0x9a,0x91,0x81,0x70,0x62,0x53,0x45,0x3d,0x39,0x39,0x3b,0x3a,0x36,0x38,0x37,0x39,
0x40,0x49,0x55,0x67,0x75,0x80,0x8b,0x94,0x9a,0x98,0x90,0x82,0x72,0x64,0x5a,0x56,
0x59,0x62,0x6f,0x7d,0x8a,0x94,0x9d,0x9e,0x9a,0x90,0x83,0x73,0x60,0x4e,0x42,0x3e,
0x3c,0x3a,0x39,0x38,0x37,0x34,0x36,0x39,0x41,0x4d,0x57,0x60,0x6d,0x7b,0x88,0x91,
0x96,0x99,0x9d,0xa1,0xa4,0xa3,0x9d,0x90,0x7d,0x69,0x59,0x53,0x5a,0x66,0x71,0x78,
0x78,0x73,0x6a,0x61,0x5d,0x5c,0x59,0x50,0x43,0x38,0x31,0x2d,0x2e,0x31,0x38,0x40,
0x40,0x3c,0x37,0x36,0x37,0x36,0x35,0x32,0x33,0x3a,0x44,0x52,0x67,0x76,0x7e,0x7e,
0x75,0x6c,0x64,0x61,0x62,0x68,0x6e,0x71,0x75,0x7a,0x82,0x8e,0x97,0x99,0x93,0x86,
0x71,0x5c,0x4d,0x42,0x3c,0x3b,0x3d,0x3e,0x3e,0x3d,0x3d,0x3c,0x3d,0x41,0x4c,0x5c,
0x6a,0x72,0x77,0x72,0x68,0x61,0x5e,0x5f,0x65,0x6c,0x6f,0x75,0x7c,0x87,0x92,0x9d,
0xa3,0xa6,0xa8,0xa4,0x9d,0x94,0x89,0x7c,0x6f,0x61,0x5a,0x5c,0x66,0x73,0x7e,0x7e,
0x78,0x6c,0x61,0x59,0x5a,0x61,0x67,0x6a,0x6d,0x6f,0x73,0x80,0x8e,0x9b,0xa3,0x9e,
0x8d,0x77,0x61,0x53,0x4e,0x54,0x5d,0x6a,0x7a,0x87,0x92,0x98,0x9c,0x9c,0x97,0x89,
0x75,0x61,0x4f,0x43,0x3e,0x3e,0x3f,0x3e,0x3c,0x38,0x36,0x36,0x39,0x40,0x4d,0x5b,
0x67,0x74,0x7f,0x8b,0x96,0x9c,0x9a,0x94,0x86,0x75,0x64,0x58,0x52,0x55,0x60,0x6e,
0x7c,0x89,0x94,0x9c,0xa1,0x9f,0x97,0x8a,0x78,0x65,0x58,0x54,0x58,0x61,0x6c,0x78,
0x84,0x8e,0x94,0x95,0x95,0x8e,0x7f,0x70,0x5f,0x4f,0x45,0x42,0x3f,0x40,0x40,0x40,
0x39,0x38,0x37,0x3b,0x45,0x53,0x5f,0x6e,0x74,0x72,0x70,0x68,0x60,0x5c,0x5a,0x53,
0x4a,0x40,0x3b,0x3c,0x44,0x53,0x68,0x80,0x91,0x9a,0x9a,0x97,0x8e,0x86,0x7c,0x6f,
0x63,0x58,0x4e,0x46,0x3e,0x39,0x3a,0x40,0x4c,0x60,0x74,0x83,0x83,0x7c,0x69,0x59,
0x55,0x58,0x63,0x73,0x7c,0x7c,0x74,0x6a,0x61,0x5d,0x61,0x68,0x6f,0x75,0x77,0x75,
0x70,0x67,0x60,0x5c,0x5d,0x62,0x6d,0x75,0x79,0x75,0x6f,0x69,0x64,0x61,0x60,0x5e,
0x58,0x4e,0x40,0x36,0x2f,0x2e,0x32,0x37,0x40,0x4b,0x58,0x65,0x71,0x76,0x75,0x70,
0x66,0x5f,0x5e,0x63,0x6a,0x6d,0x6d,0x70,0x76,0x82,0x8c,0x96,0x9d,0x99,0x8b,0x76,
0x61,0x52,0x48,0x44,0x41,0x3e,0x3e,0x3e,0x3d,0x3d,0x3e,0x3f,0x3e,0x38,0x30,0x2c,
0x2e,0x39,0x4a,0x5e,0x6f,0x7a,0x7b,0x76,0x6b,0x61,0x5a,0x55,0x4f,0x46,0x3e,0x38,
0x33,0x31,0x33,0x36,0x3c,0x47,0x52,0x60,0x6e,0x78,0x7b,0x75,0x6b,0x60,0x5a,0x5c,
0x63,0x6e,0x78,0x7a,0x73,0x68,0x5e,0x59,0x5b,0x61,0x6c,0x75,0x79,0x76,0x6f,0x67,
0x61,0x5f,0x63,0x6c,0x77,0x7f,0x7f,0x77,0x6a,0x5f,0x5a,0x5c,0x60,0x61,0x59,0x47,
0x36,0x2d,0x32,0x44,0x5d,0x75,0x82,0x83,0x7a,0x6a,0x5e,0x57,0x52,0x4d,0x46,0x3d,
0x38,0x3c,0x4a,0x5f,0x75,0x86,0x89,0x80,0x6f,0x5f,0x57,0x5a,0x61,0x67,0x6b,0x6e,
0x72,0x7c,0x88,0x97,0xa5,0xae,0xad,0xa6,0x9e,0x99,0x98,0x9d,0x9d,0x99,0x92,0x87,
0x77,0x6c,0x61,0x56,0x4d,0x43,0x3b,0x34,0x38,0x40,0x51,0x67,0x7a,0x84,0x82,0x75,
0x67,0x5c,0x55,0x50,0x4a,0x42,0x38,0x33,0x33,0x3d,0x51,0x6b,0x82,0x91,0x97,0x98,
0x96,0x98,0x9f,0xa6,0xab,0xa4,0x96,0x85,0x73,0x65,0x5c,0x57,0x4f,0x43,0x3a,0x33,
0x32,0x3b,0x4e,0x63,0x76,0x80,0x7e,0x78,0x6c,0x60,0x57,0x50,0x49,0x44,0x3c,0x34,
0x2d,0x30,0x33,0x3a,0x43,0x49,0x49,0x46,0x3e,0x39,0x38,0x37,0x36,0x37,0x38,0x3f,
0x4a,0x57,0x65,0x73,0x80,0x89,0x8f,0x94,0x93,0x8d,0x82,0x72,0x61,0x53,0x48,0x42,
0x40,0x40,0x40,0x40,0x3c,0x3a,0x3b,0x40,0x46,0x4e,0x59,0x66,0x73,0x83,0x8e,0x97,
0x9b,0x98,0x8e,0x80,0x6f,0x5e,0x51,0x44,0x3c,0x36,0x36,0x36,0x36,0x38,0x3c,0x3f,
0x40,0x40,0x3f,0x40,0x3e,0x39,0x35,0x33,0x34,0x38,0x3a,0x39,0x36,0x32,0x30,0x32,
0x3a,0x49,0x5c,0x70,0x7b,0x7c,0x77,0x6c,0x5f,0x5a,0x5c,0x64,0x70,0x78,0x79,0x74,
0x69,0x5e,0x5a,0x5e,0x68,0x72,0x79,0x79,0x72,0x6c,0x66,0x61,0x5d,0x5b,0x58,0x54,
0x4a,0x3e,0x34,0x2e,0x2d,0x30,0x37,0x3f,0x44,0x44,0x40,0x39,0x36,0x34,0x36,0x39,
0x3a,0x3d,0x3f,0x3e,0x3d,0x3a,0x38,0x36,0x34,0x33,0x35,0x37,0x39,0x38,0x38,0x38,
0x36,0x36,0x36,0x36,0x37,0x3a,0x3b,0x3b,0x39,0x3a,0x3a,0x3b,0x39,0x38,0x39,0x3b,
// Line 12
0x3a,0x39,0x37,0x37,0x37,0x38,0x39,0x38,0x36,0x37,0x38,0x39,0x37,0x36,0x35,0x36,
0x36,0x37,0x36,0x36,0x36,0x35,0x35,0x34,0x36,0x38,0x39,0x37,0x37,0x37,0x38,0x39,
0x39,0x38,0x39,0x39,0x39,0x39,0x3b,0x3a,0x38,0x34,0x31,0x31,0x32,0x34,0x35,0x35,
0x33,0x31,0x30,0x38,0x45,0x5a,0x6d,0x79,0x7a,0x73,0x66,0x5a,0x54,0x56,0x5f,0x6d,
0x76,0x76,0x70,0x68,0x61,0x5c,0x5b,0x60,0x6b,0x73,0x78,0x76,0x71,0x69,0x63,0x60,
0x61,0x66,0x6c,0x72,0x74,0x72,0x6b,0x63,0x5c,0x5a,0x5e,0x67,0x71,0x77,0x79,0x76,
0x6f,0x65,0x5f,0x5a,0x5c,0x63,0x6a,0x6f,0x72,0x6f,0x69,0x63,0x5e,0x5c,0x60,0x68,
0x70,0x77,0x79,0x76,0x6f,0x65,0x5c,0x58,0x5c,0x63,0x6c,0x75,0x7a,0x77,0x70,0x68,
0x61,0x61,0x66,0x6c,0x70,0x71,0x70,0x70,0x73,0x79,0x84,0x91,0x9e,0xa5,0xa8,0xa3,
0x9a,0x8b,0x7b,0x6c,0x63,0x5c,0x56,0x50,0x4a,0x42,0x3b,0x38,0x3a,0x44,0x56,0x69,
0x7a,0x87,0x8f,0x95,0x98,0x9a,0x9c,0x9d,0x9d,0x9b,0x9a,0x9a,0x9a,0x9a,0x97,0x8f,
0x83,0x76,0x68,0x5c,0x54,0x4d,0x44,0x39,0x32,0x34,0x3e,0x52,0x67,0x76,0x7f,0x7b,
0x71,0x64,0x5a,0x54,0x53,0x4b,0x3f,0x36,0x32,0x37,0x45,0x5e,0x73,0x81,0x84,0x7d,
0x6f,0x5e,0x52,0x4d,0x4b,0x48,0x42,0x3b,0x34,0x2e,0x2d,0x30,0x39,0x46,0x55,0x63,
0x6e,0x74,0x75,0x71,0x6b,0x64,0x5f,0x5a,0x52,0x45,0x3e,0x36,0x37,0x41,0x53,0x68,
0x7b,0x8a,0x91,0x95,0x98,0x97,0x8f,0x84,0x70,0x5d,0x55,0x55,0x5e,0x6c,0x77,0x79,
0x73,0x69,0x61,0x5e,0x5d,0x59,0x4f,0x3f,0x2f,0x26,0x2f,0x47,0x65,0x7f,0x8b,0x87,
0x7a,0x69,0x5e,0x59,0x56,0x4f,0x43,0x36,0x2c,0x31,0x44,0x5f,0x76,0x83,0x82,0x76,
0x66,0x57,0x4f,0x4d,0x4c,0x47,0x3e,0x33,0x2c,0x2c,0x32,0x3b,0x41,0x43,0x3f,0x38,
0x31,0x30,0x36,0x45,0x56,0x67,0x78,0x84,0x8a,0x92,0x97,0x9e,0xa2,0xa7,0xa4,0x9e,
0x93,0x86,0x73,0x67,0x5b,0x53,0x4e,0x48,0x41,0x3c,0x37,0x34,0x32,0x33,0x34,0x37,
0x38,0x37,0x37,0x36,0x34,0x33,0x34,0x37,0x3a,0x3d,0x3d,0x3b,0x36,0x32,0x32,0x3d,
0x4c,0x60,0x73,0x7d,0x7b,0x73,0x69,0x61,0x5e,0x60,0x66,0x6c,0x74,0x79,0x7c,0x87,
0x91,0x98,0x99,0x91,0x81,0x6c,0x57,0x46,0x3c,0x37,0x38,0x38,0x37,0x38,0x3b,0x41,
0x44,0x44,0x42,0x3d,0x37,0x33,0x34,0x3d,0x4a,0x59,0x65,0x72,0x7e,0x89,0x91,0x94,
0x92,0x8b,0x81,0x71,0x60,0x53,0x49,0x42,0x3f,0x3c,0x3b,0x3a,0x37,0x34,0x37,0x3c,
0x43,0x4e,0x5a,0x67,0x73,0x81,0x8f,0x97,0x9d,0x9d,0x93,0x85,0x74,0x65,0x5c,0x5a,
0x5b,0x62,0x6c,0x7a,0x81,0x8e,0x94,0x99,0x97,0x8e,0x7e,0x6b,0x59,0x4c,0x46,0x43,
0x3f,0x3d,0x3b,0x38,0x36,0x36,0x3b,0x3e,0x3e,0x3a,0x33,0x2f,0x32,0x3d,0x4f,0x65,
0x78,0x82,0x81,0x79,0x6c,0x60,0x5a,0x5c,0x60,0x67,0x6b,0x73,0x78,0x80,0x8c,0x96,
0x9a,0x97,0x88,0x74,0x60,0x4c,0x3e,0x39,0x39,0x38,0x37,0x37,0x38,0x38,0x39,0x3a,
0x3c,0x3e,0x3d,0x3b,0x3a,0x39,0x39,0x3d,0x3f,0x40,0x41,0x3e,0x3c,0x3b,0x3d,0x42,
0x4c,0x5a,0x6b,0x7b,0x89,0x93,0x97,0x98,0x93,0x8d,0x84,0x74,0x62,0x53,0x46,0x3e,
0x38,0x36,0x37,0x37,0x37,0x36,0x37,0x3d,0x3f,0x3e,0x3c,0x37,0x34,0x35,0x38,0x3c,
0x3f,0x40,0x3d,0x38,0x35,0x34,0x35,0x40,0x49,0x55,0x65,0x75,0x84,0x91,0x9a,0x9c,
0x9a,0x90,0x83,0x73,0x64,0x54,0x47,0x3f,0x39,0x34,0x31,0x30,0x32,0x36,0x38,0x39,
0x39,0x39,0x39,0x39,0x37,0x37,0x3a,0x3e,0x3e,0x3d,0x3c,0x39,0x35,0x31,0x32,0x3b,
0x49,0x58,0x65,0x72,0x80,0x8c,0x97,0x9a,0x99,0x92,0x86,0x76,0x64,0x53,0x46,0x3f,
0x3b,0x37,0x32,0x31,0x30,0x31,0x34,0x35,0x35,0x37,0x37,0x36,0x33,0x32,0x32,0x37,
0x3d,0x3f,0x3e,0x39,0x34,0x31,0x34,0x3c,0x47,0x54,0x64,0x75,0x84,0x8e,0x95,0x98,
0x99,0x91,0x83,0x73,0x64,0x55,0x47,0x3c,0x32,0x30,0x31,0x34,0x35,0x33,0x32,0x35,
0x36,0x37,0x39,0x39,0x39,0x39,0x3a,0x3b,0x3d,0x3d,0x3d,0x3a,0x37,0x34,0x34,0x39,
0x44,0x53,0x64,0x73,0x80,0x8e,0x97,0x9a,0x97,0x8e,0x81,0x71,0x5f,0x4d,0x40,0x3a,
0x38,0x35,0x34,0x31,0x31,0x35,0x38,0x3a,0x38,0x39,0x36,0x34,0x31,0x30,0x32,0x39,
0x3c,0x3b,0x3b,0x38,0x34,0x34,0x35,0x3c,0x49,0x59,0x66,0x75,0x83,0x8f,0x97,0x98,
0x93,0x8b,0x7e,0x6d,0x5d,0x4f,0x44,0x3b,0x37,0x32,0x30,0x32,0x34,0x35,0x36,0x36,
0x36,0x36,0x34,0x34,0x33,0x32,0x32,0x33,0x36,0x38,0x36,0x34,0x30,0x2e,0x32,0x39,
0x44,0x54,0x65,0x76,0x84,0x8e,0x95,0x98,0x97,0x8e,0x80,0x6f,0x5f,0x50,0x44,0x3a,
0x34,0x32,0x33,0x32,0x32,0x33,0x34,0x36,0x36,0x37,0x37,0x36,0x34,0x34,0x35,0x38,
0x39,0x39,0x37,0x35,0x34,0x32,0x33,0x39,0x44,0x53,0x65,0x76,0x84,0x8f,0x98,0x9a,
0x94,0x8b,0x80,0x71,0x60,0x4d,0x3f,0x38,0x33,0x30,0x2e,0x2d,0x2f,0x34,0x37,0x39,
0x39,0x38,0x37,0x34,0x31,0x31,0x32,0x39,0x38,0x37,0x36,0x34,0x31,0x2f,0x32,0x39,
0x44,0x53,0x63,0x70,0x81,0x8c,0x94,0x97,0x94,0x8b,0x82,0x71,0x5e,0x50,0x44,0x3c,
0x35,0x30,0x2d,0x2f,0x30,0x31,0x33,0x35,0x36,0x35,0x34,0x33,0x32,0x33,0x35,0x37,
0x3b,0x3d,0x3b,0x36,0x32,0x31,0x36,0x3e,0x48,0x56,0x65,0x74,0x81,0x8d,0x95,0x9a,
0x9b,0x93,0x81,0x6f,0x5e,0x4e,0x41,0x39,0x34,0x34,0x33,0x33,0x31,0x34,0x36,0x36,
0x37,0x37,0x35,0x33,0x2e,0x2c,0x2f,0x35,0x3a,0x3c,0x3b,0x38,0x36,0x35,0x36,0x3d,
0x49,0x57,0x66,0x75,0x83,0x8e,0x98,0x9c,0x99,0x90,0x82,0x72,0x60,0x50,0x44,0x3d,
0x38,0x34,0x32,0x34,0x35,0x36,0x3a,0x3e,0x3e,0x3c,0x36,0x32,0x32,0x32,0x35,0x37,
0x39,0x37,0x37,0x35,0x34,0x33,0x3b,0x42,0x4a,0x56,0x65,0x75,0x87,0x93,0x99,0x9c,
0x99,0x91,0x83,0x71,0x5f,0x50,0x46,0x3e,0x39,0x37,0x35,0x36,0x37,0x37,0x37,0x3a,
0x3b,0x39,0x38,0x36,0x33,0x31,0x32,0x36,0x3b,0x3d,0x3b,0x37,0x33,0x32,0x35,0x3d,
0x49,0x58,0x68,0x76,0x82,0x8c,0x94,0x98,0x95,0x8b,0x7c,0x6c,0x5b,0x4b,0x3e,0x39,
0x36,0x34,0x34,0x35,0x36,0x39,0x3a,0x3b,0x3c,0x3d,0x3a,0x36,0x32,0x30,0x34,0x39,
0x3b,0x3a,0x39,0x36,0x35,0x35,0x38,0x40,0x4c,0x5a,0x66,0x74,0x82,0x8f,0x95,0x99,
0x95,0x8d,0x80,0x70,0x5e,0x4f,0x44,0x3b,0x35,0x32,0x32,0x35,0x34,0x35,0x38,0x3c,
0x3e,0x3e,0x3c,0x38,0x34,0x32,0x34,0x37,0x39,0x39,0x39,0x37,0x33,0x31,0x36,0x3e,
0x4a,0x58,0x68,0x76,0x80,0x8c,0x93,0x99,0x97,0x8f,0x7e,0x70,0x60,0x52,0x45,0x3c,
0x37,0x35,0x34,0x32,0x33,0x35,0x39,0x3a,0x39,0x35,0x34,0x33,0x31,0x2f,0x2f,0x32,
0x35,0x38,0x37,0x35,0x34,0x34,0x38,0x41,0x4b,0x59,0x68,0x76,0x82,0x8d,0x95,0x98,
0x94,0x8b,0x80,0x72,0x61,0x51,0x43,0x3c,0x36,0x34,0x36,0x39,0x3a,0x39,0x35,0x35,
0x3e,0x4d,0x5d,0x6b,0x72,0x72,0x6c,0x65,0x5d,0x56,0x54,0x4e,0x47,0x40,0x38,0x31,
0x2f,0x2f,0x32,0x3d,0x49,0x56,0x60,0x6d,0x73,0x71,0x6c,0x63,0x57,0x53,0x4e,0x46,
0x40,0x38,0x31,0x2b,0x27,0x27,0x2e,0x38,0x43,0x4d,0x56,0x5e,0x68,0x73,0x7e,0x8a,
0x93,0x9a,0xa0,0xa4,0xa3,0xa0,0x9c,0x99,0x95,0x96,0x97,0x9b,0x9e,0x9f,0x9c,0x97,
0x8f,0x82,0x72,0x64,0x56,0x4a,0x44,0x40,0x3e,0x3c,0x37,0x2f,0x2d,0x2f,0x37,0x3c,
0x3e,0x3c,0x36,0x30,0x2d,0x34,0x46,0x5d,0x71,0x7d,0x7e,0x75,0x68,0x5f,0x5b,0x60,
0x68,0x6f,0x72,0x76,0x78,0x7e,0x87,0x91,0x96,0x93,0x85,0x71,0x5b,0x48,0x3d,0x39,
0x37,0x39,0x3b,0x3b,0x3a,0x39,0x37,0x39,0x3e,0x46,0x50,0x5e,0x6c,0x79,0x84,0x8e,
0x94,0x9a,0x9f,0xa4,0xa5,0xa3,0x9b,0x8c,0x7a,0x68,0x5c,0x57,0x5c,0x65,0x6f,0x79,
0x79,0x72,0x69,0x5f,0x59,0x57,0x53,0x4c,0x43,0x37,0x2b,0x21,0x22,0x27,0x32,0x3f,
0x44,0x40,0x38,0x2f,0x2c,0x35,0x46,0x5d,0x71,0x7c,0x7b,0x73,0x67,0x5e,0x5a,0x5e,
0x65,0x6d,0x74,0x79,0x7e,0x86,0x8f,0x98,0x9c,0x95,0x88,0x76,0x60,0x4c,0x40,0x3a,
0x38,0x34,0x36,0x36,0x39,0x3b,0x3c,0x3a,0x39,0x37,0x34,0x33,0x32,0x36,0x3a,0x3c,
0x3b,0x38,0x35,0x36,0x37,0x39,0x3b,0x3b,0x39,0x32,0x2f,0x32,0x3d,0x4f,0x63,0x72,
0x7b,0x7a,0x72,0x67,0x5e,0x5a,0x57,0x50,0x45,0x39,0x31,0x34,0x41,0x56,0x6d,0x7d,
0x7e,0x76,0x65,0x57,0x52,0x54,0x5b,0x65,0x6e,0x76,0x7c,0x84,0x8f,0x98,0x9b,0x93,
0x81,0x6c,0x5a,0x4e,0x46,0x3f,0x39,0x37,0x38,0x3d,0x4c,0x62,0x77,0x82,0x82,0x75,
0x61,0x54,0x50,0x56,0x63,0x6f,0x76,0x74,0x6c,0x61,0x5c,0x5e,0x60,0x61,0x5a,0x4b,
0x37,0x30,0x32,0x42,0x5e,0x79,0x89,0x8b,0x7f,0x6c,0x5f,0x57,0x59,0x5f,0x68,0x6e,
0x73,0x7a,0x85,0x92,0x99,0x9a,0x92,0x86,0x73,0x5f,0x4f,0x44,0x3c,0x37,0x33,0x34,
0x3d,0x4b,0x5c,0x6d,0x7c,0x87,0x8c,0x94,0x95,0x94,0x91,0x84,0x70,0x5e,0x53,0x53,
0x5c,0x68,0x75,0x7c,0x79,0x6d,0x61,0x59,0x53,0x4f,0x47,0x3d,0x32,0x2b,0x27,0x2a,
0x31,0x38,0x3d,0x3e,0x3b,0x36,0x34,0x32,0x2f,0x2e,0x2e,0x31,0x36,0x39,0x3a,0x3c,
0x3d,0x3c,0x3a,0x38,0x38,0x39,0x3b,0x3a,0x36,0x34,0x33,0x33,0x35,0x36,0x38,0x3a,
0x3b,0x3b,0x3b,0x3b,0x3a,0x36,0x35,0x34,0x33,0x34,0x35,0x35,0x36,0x35,0x34,0x34,
// Line 13
0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x36,0x37,0x3a,0x3c,0x3c,0x3a,0x39,0x39,0x3b,0x3b,
0x3c,0x3b,0x3b,0x3b,0x39,0x37,0x36,0x36,0x36,0x37,0x36,0x36,0x37,0x39,0x39,0x37,
0x36,0x35,0x35,0x35,0x33,0x34,0x38,0x39,0x3a,0x3a,0x39,0x38,0x37,0x37,0x39,0x39,
0x3e,0x3c,0x39,0x39,0x39,0x37,0x38,0x39,0x3b,0x3c,0x39,0x36,0x32,0x32,0x32,0x36,
0x38,0x39,0x39,0x38,0x35,0x32,0x34,0x37,0x39,0x38,0x36,0x35,0x36,0x37,0x37,0x38,
0x39,0x38,0x37,0x36,0x37,0x38,0x39,0x39,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,0x39,0x39,
0x39,0x39,0x38,0x37,0x35,0x35,0x37,0x39,0x37,0x39,0x37,0x36,0x36,0x35,0x35,0x36,
0x38,0x39,0x3b,0x3b,0x39,0x38,0x3b,0x3b,0x39,0x37,0x37,0x37,0x38,0x38,0x38,0x39,
0x3c,0x3c,0x3b,0x39,0x38,0x39,0x39,0x3a,0x36,0x37,0x36,0x36,0x38,0x39,0x37,0x38,
0x37,0x36,0x36,0x37,0x37,0x37,0x38,0x39,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x37,
0x36,0x36,0x37,0x37,0x36,0x36,0x36,0x38,0x39,0x36,0x36,0x38,0x39,0x39,0x38,0x39,
0x39,0x39,0x3a,0x3b,0x3c,0x3c,0x3c,0x3a,0x3b,0x3a,0x39,0x37,0x35,0x33,0x34,0x36,
0x37,0x36,0x38,0x38,0x37,0x37,0x38,0x39,0x39,0x38,0x36,0x37,0x37,0x37,0x37,0x37,
0x37,0x3a,0x3c,0x3c,0x3c,0x3c,0x3d,0x3d,0x3d,0x3d,0x3d,0x3d,0x3b,0x38,0x36,0x35,
0x35,0x35,0x36,0x36,0x37,0x37,0x36,0x35,0x37,0x37,0x37,0x39,0x39,0x38,0x37,0x36,
0x36,0x38,0x38,0x38,0x39,0x36,0x34,0x36,0x38,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,0x3a,
0x3a,0x3b,0x3c,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x39,0x3a,0x39,0x36,0x38,0x39,
0x38,0x38,0x39,0x3b,0x3d,0x3e,0x3c,0x3c,0x3b,0x3c,0x3d,0x3b,0x39,0x38,0x3a,0x3a,
0x38,0x36,0x37,0x39,0x3b,0x3b,0x39,0x39,0x39,0x39,0x38,0x36,0x37,0x38,0x37,0x35,
0x36,0x36,0x37,0x38,0x39,0x38,0x39,0x3a,0x3a,0x3a,0x3b,0x39,0x38,0x38,0x38,0x39,
0x39,0x38,0x37,0x39,0x3a,0x3b,0x3b,0x3d,0x3c,0x3c,0x3c,0x3a,0x38,0x38,0x39,0x39,
0x39,0x38,0x38,0x39,0x39,0x38,0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,0x3d,
0x3f,0x3f,0x3d,0x3b,0x3b,0x3b,0x3a,0x38,0x37,0x38,0x39,0x3b,0x3b,0x39,0x37,0x37,
0x39,0x39,0x39,0x3a,0x3b,0x3a,0x39,0x38,0x37,0x39,0x3a,0x3a,0x3c,0x3b,0x39,0x37,
0x37,0x37,0x39,0x3b,0x3c,0x3d,0x3e,0x3d,0x3a,0x39,0x39,0x3b,0x3b,0x3a,0x38,0x37,
0x37,0x37,0x38,0x38,0x39,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x39,0x3b,0x3b,0x39,0x39,
0x39,0x38,0x38,0x39,0x3a,0x39,0x39,0x37,0x37,0x38,0x3a,0x3b,0x3b,0x39,0x38,0x39,
0x39,0x3a,0x3b,0x3a,0x39,0x39,0x39,0x3a,0x3a,0x39,0x39,0x39,0x3b,0x3a,0x39,0x3a,
0x3b,0x3b,0x3b,0x39,0x39,0x3a,0x3a,0x39,0x37,0x35,0x36,0x38,0x38,0x36,0x35,0x36,
0x37,0x36,0x39,0x38,0x39,0x3b,0x3b,0x39,0x39,0x39,0x38,0x3b,0x3b,0x3a,0x39,0x39,
0x39,0x38,0x37,0x36,0x37,0x39,0x39,0x38,0x39,0x3b,0x3b,0x39,0x38,0x36,0x36,0x37,
0x37,0x36,0x36,0x37,0x39,0x3a,0x3b,0x3a,0x3b,0x3b,0x3b,0x38,0x36,0x35,0x36,0x36,
0x34,0x36,0x39,0x3c,0x3d,0x39,0x36,0x36,0x37,0x38,0x36,0x37,0x36,0x34,0x35,0x36,
0x36,0x39,0x39,0x39,0x39,0x39,0x38,0x37,0x36,0x35,0x36,0x39,0x39,0x39,0x3a,0x3a,
0x39,0x39,0x37,0x38,0x39,0x3b,0x3b,0x3b,0x3b,0x3c,0x3b,0x39,0x36,0x35,0x36,0x38,
0x39,0x38,0x37,0x35,0x36,0x35,0x36,0x3a,0x3b,0x3a,0x39,0x37,0x36,0x36,0x37,0x38,
0x39,0x3a,0x3a,0x3a,0x3b,0x3a,0x3b,0x3c,0x3c,0x3a,0x39,0x37,0x34,0x34,0x34,0x36,
0x36,0x35,0x33,0x34,0x37,0x38,0x36,0x35,0x36,0x36,0x36,0x35,0x36,0x39,0x3b,0x3d,
0x3e,0x3c,0x3c,0x3c,0x3a,0x37,0x36,0x36,0x36,0x35,0x37,0x34,0x32,0x35,0x39,0x3b,
0x3b,0x39,0x38,0x38,0x39,0x39,0x38,0x39,0x39,0x38,0x39,0x39,0x38,0x37,0x37,0x37,
0x37,0x36,0x35,0x37,0x38,0x38,0x37,0x37,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x3b,0x3a,
0x39,0x39,0x3a,0x3b,0x39,0x38,0x38,0x37,0x36,0x35,0x34,0x35,0x34,0x33,0x34,0x36,
0x38,0x38,0x38,0x39,0x39,0x38,0x39,0x39,0x39,0x39,0x3a,0x39,0x39,0x39,0x3a,0x3b,
0x3b,0x39,0x39,0x39,0x39,0x37,0x36,0x37,0x39,0x3b,0x3b,0x39,0x39,0x39,0x3a,0x3b,
0x3c,0x3d,0x3d,0x3c,0x39,0x38,0x39,0x3b,0x3b,0x3a,0x3a,0x39,0x3a,0x38,0x37,0x38,
0x39,0x39,0x39,0x3a,0x3b,0x39,0x39,0x37,0x35,0x37,0x39,0x39,0x39,0x37,0x36,0x37,
0x36,0x37,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x39,0x3a,0x3b,0x3a,0x39,0x38,
0x38,0x39,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x38,0x3a,0x38,0x35,0x36,
0x36,0x34,0x36,0x34,0x33,0x33,0x33,0x34,0x35,0x35,0x36,0x37,0x37,0x38,0x39,0x3a,
0x39,0x38,0x39,0x39,0x37,0x37,0x34,0x34,0x36,0x37,0x37,0x37,0x39,0x39,0x39,0x39,
0x3a,0x3b,0x39,0x37,0x35,0x36,0x36,0x36,0x36,0x35,0x35,0x37,0x38,0x37,0x35,0x36,
0x36,0x38,0x39,0x39,0x3b,0x3c,0x3a,0x38,0x37,0x37,0x38,0x38,0x37,0x35,0x36,0x36,
0x35,0x34,0x36,0x36,0x37,0x35,0x37,0x38,0x39,0x35,0x32,0x32,0x33,0x33,0x33,0x34,
0x34,0x36,0x34,0x32,0x32,0x33,0x35,0x39,0x3a,0x3b,0x39,0x3b,0x39,0x38,0x3b,0x3d,
0x3e,0x3e,0x3b,0x39,0x3b,0x3b,0x3a,0x3a,0x3c,0x3c,0x3b,0x39,0x39,0x39,0x39,0x39,
0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x38,0x38,0x38,0x38,0x37,0x36,0x37,0x36,0x37,
0x39,0x3a,0x39,0x38,0x39,0x3a,0x39,0x39,0x39,0x38,0x37,0x37,0x37,0x36,0x36,0x36,
0x38,0x37,0x35,0x34,0x37,0x37,0x37,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x39,0x38,
0x37,0x36,0x36,0x36,0x34,0x35,0x36,0x38,0x37,0x36,0x37,0x38,0x36,0x36,0x34,0x33,
0x35,0x35,0x35,0x34,0x33,0x33,0x35,0x37,0x39,0x39,0x3b,0x3b,0x39,0x39,0x39,0x39,
0x37,0x36,0x36,0x39,0x3a,0x39,0x39,0x3a,0x39,0x3a,0x3a,0x3b,0x3b,0x39,0x38,0x36,
0x36,0x36,0x38,0x3a,0x3a,0x39,0x3b,0x3a,0x39,0x39,0x3a,0x39,0x38,0x36,0x34,0x31,
0x33,0x33,0x33,0x33,0x33,0x33,0x36,0x36,0x34,0x36,0x38,0x38,0x38,0x37,0x37,0x39,
0x39,0x39,0x39,0x39,0x38,0x38,0x39,0x3a,0x39,0x37,0x36,0x35,0x36,0x37,0x37,0x38,
0x39,0x38,0x37,0x35,0x35,0x36,0x37,0x38,0x39,0x39,0x39,0x39,0x39,0x3c,0x3c,0x3d,
0x3c,0x39,0x39,0x37,0x36,0x38,0x39,0x38,0x36,0x38,0x37,0x36,0x37,0x39,0x3b,0x3b,
0x39,0x37,0x37,0x36,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x38,0x37,0x36,0x35,0x36,
0x37,0x36,0x36,0x35,0x34,0x36,0x37,0x38,0x39,0x39,0x3a,0x3b,0x39,0x35,0x30,0x33,
0x35,0x37,0x38,0x39,0x38,0x3b,0x39,0x39,0x3a,0x3d,0x3e,0x3f,0x3d,0x3b,0x3b,0x3b,
0x3a,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x35,0x34,0x36,0x39,0x3c,0x3d,0x3d,0x3a,
0x38,0x38,0x38,0x39,0x39,0x39,0x37,0x35,0x33,0x34,0x35,0x37,0x38,0x37,0x39,0x3b,
0x39,0x39,0x37,0x38,0x39,0x38,0x37,0x38,0x39,0x38,0x38,0x37,0x37,0x38,0x39,0x38,
0x38,0x39,0x39,0x39,0x3a,0x39,0x39,0x3b,0x3b,0x3b,0x3b,0x3a,0x39,0x37,0x35,0x35,
0x35,0x35,0x36,0x36,0x38,0x38,0x39,0x3a,0x38,0x39,0x3a,0x3b,0x3a,0x38,0x38,0x36,
0x36,0x35,0x36,0x38,0x39,0x39,0x36,0x37,0x37,0x37,0x38,0x38,0x39,0x3b,0x3b,0x39,
0x37,0x37,0x38,0x39,0x39,0x39,0x38,0x38,0x38,0x37,0x38,0x39,0x39,0x39,0x39,0x38,
0x3a,0x3a,0x39,0x35,0x36,0x35,0x37,0x39,0x3b,0x39,0x3b,0x38,0x35,0x32,0x33,0x36,
0x38,0x37,0x35,0x35,0x35,0x36,0x36,0x37,0x38,0x39,0x38,0x37,0x37,0x37,0x36,0x35,
0x37,0x38,0x39,0x39,0x39,0x36,0x37,0x37,0x36,0x35,0x36,0x37,0x37,0x36,0x36,0x34,
0x37,0x39,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x38,0x39,0x38,0x36,0x37,0x37,0x37,
0x37,0x36,0x36,0x36,0x35,0x34,0x36,0x37,0x39,0x39,0x39,0x39,0x3b,0x3b,0x39,0x37,
0x36,0x36,0x36,0x35,0x35,0x36,0x36,0x36,0x36,0x37,0x37,0x37,0x38,0x36,0x33,0x34,
0x36,0x37,0x36,0x36,0x35,0x35,0x34,0x34,0x35,0x37,0x37,0x36,0x36,0x36,0x36,0x37,
0x37,0x37,0x38,0x39,0x38,0x35,0x34,0x34,0x35,0x36,0x38,0x39,0x39,0x39,0x36,0x36,
0x35,0x36,0x39,0x39,0x38,0x37,0x36,0x34,0x33,0x35,0x38,0x3a,0x3b,0x38,0x36,0x36,
0x36,0x36,0x39,0x3b,0x3a,0x39,0x37,0x36,0x37,0x37,0x37,0x36,0x37,0x36,0x36,0x36,
0x35,0x32,0x35,0x34,0x34,0x36,0x37,0x38,0x38,0x36,0x35,0x36,0x38,0x39,0x39,0x38,
0x37,0x37,0x37,0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x37,0x37,0x36,0x33,0x34,0x34,
0x35,0x36,0x36,0x37,0x39,0x38,0x37,0x37,0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x37,
0x34,0x36,0x37,0x38,0x39,0x39,0x38,0x39,0x3a,0x3a,0x39,0x3a,0x3b,0x3a,0x39,0x36,
0x34,0x35,0x36,0x36,0x38,0x39,0x38,0x37,0x36,0x36,0x39,0x39,0x39,0x39,0x38,0x37,
0x35,0x34,0x35,0x38,0x3a,0x35,0x32,0x35,0x37,0x39,0x39,0x39,0x39,0x39,0x39,0x38,
0x37,0x37,0x37,0x35,0x34,0x34,0x35,0x37,0x37,0x36,0x36,0x36,0x36,0x35,0x35,0x36,
0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x38,0x37,0x38,0x3a,0x3b,0x39,0x39,0x39,0x3a,
0x3a,0x38,0x35,0x34,0x36,0x35,0x32,0x33,0x33,0x33,0x34,0x33,0x33,0x36,0x36,0x36,
0x35,0x34,0x33,0x35,0x34,0x35,0x37,0x38,0x38,0x37,0x37,0x37,0x37,0x38,0x38,0x38,
// Line 14
0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,0x3a,0x38,0x37,0x39,0x3a,0x38,0x36,0x36,
0x36,0x37,0x35,0x33,0x34,0x35,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x36,0x36,0x35,
0x36,0x35,0x33,0x33,0x36,0x38,0x3a,0x3a,0x39,0x38,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,
0x3b,0x3e,0x43,0x48,0x51,0x5a,0x64,0x6d,0x75,0x7c,0x85,0x8b,0x91,0x95,0x96,0x96,
0x96,0x96,0x95,0x94,0x96,0x96,0x97,0x96,0x94,0x92,0x93,0x93,0x91,0x8b,0x84,0x7b,
0x74,0x6a,0x61,0x5a,0x53,0x4b,0x42,0x3d,0x3a,0x38,0x39,0x37,0x37,0x39,0x38,0x37,
0x38,0x37,0x37,0x39,0x39,0x39,0x3a,0x3b,0x3c,0x3f,0x44,0x4b,0x51,0x59,0x62,0x6b,
0x75,0x7e,0x85,0x8c,0x90,0x93,0x97,0x98,0x9b,0x9b,0x9a,0x98,0x97,0x95,0x95,0x95,
0x95,0x94,0x91,0x91,0x8e,0x89,0x85,0x7f,0x79,0x73,0x6a,0x61,0x57,0x50,0x4a,0x45,
0x41,0x41,0x3f,0x3d,0x3b,0x39,0x3c,0x3d,0x3c,0x3b,0x3b,0x3b,0x3b,0x38,0x38,0x3b,
0x3d,0x3d,0x3f,0x43,0x49,0x50,0x58,0x5f,0x69,0x74,0x7e,0x86,0x8c,0x8f,0x93,0x97,
0x98,0x97,0x96,0x98,0x96,0x95,0x96,0x98,0x97,0x9a,0x98,0x95,0x94,0x90,0x8b,0x85,
0x7d,0x74,0x6c,0x62,0x5a,0x53,0x4d,0x46,0x42,0x3f,0x3f,0x40,0x40,0x3f,0x3d,0x3c,
0x3b,0x38,0x37,0x37,0x38,0x3b,0x3a,0x3a,0x3b,0x3c,0x3d,0x40,0x45,0x4b,0x51,0x59,
0x60,0x6a,0x75,0x80,0x88,0x8d,0x92,0x96,0x9a,0x9b,0x9a,0x99,0x96,0x94,0x94,0x94,
0x95,0x96,0x98,0x96,0x93,0x90,0x8e,0x8a,0x86,0x7f,0x78,0x70,0x68,0x5e,0x57,0x4f,
0x48,0x42,0x40,0x3f,0x3d,0x3c,0x38,0x37,0x39,0x38,0x37,0x37,0x36,0x35,0x35,0x35,
0x36,0x38,0x3b,0x3c,0x40,0x44,0x4b,0x50,0x5d,0x65,0x6d,0x76,0x7f,0x85,0x8b,0x90,
0x93,0x97,0x97,0x96,0x95,0x95,0x96,0x98,0x99,0x98,0x97,0x98,0x97,0x95,0x94,0x90,
0x8b,0x85,0x7d,0x73,0x6b,0x63,0x5b,0x53,0x4c,0x46,0x42,0x40,0x40,0x3f,0x3f,0x3d,
0x3c,0x3c,0x3c,0x3b,0x3a,0x38,0x37,0x36,0x36,0x36,0x37,0x3a,0x3b,0x3f,0x45,0x4d,
0x52,0x5f,0x68,0x70,0x7a,0x83,0x89,0x93,0x94,0x96,0x98,0x99,0x97,0x96,0x96,0x98,
0x9a,0x99,0x99,0x9b,0x9c,0x9b,0x99,0x97,0x95,0x91,0x89,0x7f,0x74,0x6b,0x61,0x59,
0x53,0x4d,0x46,0x41,0x3d,0x3b,0x3b,0x3d,0x3d,0x3d,0x3e,0x3d,0x3a,0x3a,0x38,0x38,
0x3a,0x39,0x37,0x37,0x3a,0x3b,0x3f,0x46,0x4f,0x58,0x60,0x67,0x70,0x7c,0x87,0x8e,
0x91,0x94,0x97,0x9a,0x9c,0x9c,0x9b,0x99,0x96,0x96,0x98,0x98,0x99,0x9a,0x9a,0x98,
0x96,0x94,0x91,0x8c,0x84,0x77,0x6c,0x62,0x5a,0x52,0x4e,0x49,0x44,0x40,0x3d,0x3e,
0x40,0x40,0x3e,0x3f,0x40,0x3e,0x3d,0x3c,0x3b,0x3c,0x3b,0x38,0x37,0x37,0x39,0x3d,
0x3e,0x3d,0x3d,0x3f,0x40,0x3f,0x40,0x40,0x40,0x3f,0x3d,0x3a,0x39,0x38,0x3a,0x3b,
0x3a,0x38,0x39,0x3a,0x3a,0x39,0x39,0x39,0x3a,0x3c,0x3d,0x3c,0x3b,0x3b,0x3c,0x3e,
0x3e,0x3d,0x3c,0x3c,0x3b,0x3b,0x3b,0x3b,0x3c,0x3f,0x3d,0x3b,0x3c,0x3d,0x3e,0x41,
0x3f,0x3c,0x3b,0x39,0x37,0x37,0x39,0x3b,0x3c,0x3c,0x3c,0x3b,0x3b,0x3b,0x3b,0x3c,
0x3d,0x3d,0x3b,0x3a,0x3a,0x3b,0x3b,0x3a,0x39,0x37,0x37,0x3a,0x3b,0x3b,0x3a,0x39,
0x38,0x38,0x39,0x3b,0x3f,0x45,0x49,0x4d,0x55,0x5e,0x68,0x74,0x7e,0x85,0x8b,0x8e,
0x90,0x90,0x95,0x96,0x96,0x96,0x96,0x96,0x97,0x96,0x96,0x99,0x9b,0x9a,0x98,0x96,
0x93,0x94,0x95,0x95,0x95,0x95,0x95,0x96,0x96,0x96,0x98,0x98,0x98,0x97,0x96,0x93,
0x93,0x94,0x96,0x98,0x9a,0x9a,0x98,0x97,0x9a,0x9b,0x9b,0x9b,0x9a,0x99,0x98,0x96,
0x94,0x96,0x98,0x9a,0x98,0x95,0x93,0x95,0x97,0x98,0x98,0x9a,0x9b,0x9b,0x9a,0x97,
0x95,0x97,0x98,0x97,0x97,0x97,0x97,0x99,0x9a,0x98,0x98,0x98,0x9b,0x9c,0x9b,0x99,
0x98,0x97,0x96,0x98,0x98,0x97,0x97,0x98,0x98,0x96,0x95,0x95,0x95,0x98,0x98,0x96,
0x95,0x95,0x97,0x98,0x95,0x90,0x8a,0x84,0x7b,0x70,0x68,0x5f,0x57,0x4f,0x46,0x3c,
0x3b,0x3b,0x3b,0x3b,0x3c,0x3b,0x3b,0x3a,0x3a,0x3a,0x3c,0x3d,0x3b,0x3a,0x38,0x39,
0x3a,0x3a,0x3b,0x3d,0x3d,0x3b,0x3a,0x3b,0x3b,0x3b,0x3c,0x3d,0x3e,0x3e,0x3b,0x39,
0x39,0x3a,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x39,0x34,0x35,0x36,0x38,0x39,0x3a,0x38,
0x3b,0x3a,0x3a,0x3b,0x3c,0x3d,0x3d,0x3b,0x3a,0x39,0x39,0x38,0x35,0x37,0x37,0x37,
0x36,0x36,0x38,0x39,0x39,0x39,0x3a,0x3b,0x3b,0x3c,0x3c,0x3b,0x3c,0x3d,0x3d,0x3b,
0x37,0x36,0x38,0x3a,0x3a,0x38,0x3b,0x39,0x37,0x37,0x39,0x3c,0x3e,0x3e,0x3b,0x3b,
0x3a,0x3a,0x3a,0x3c,0x3d,0x3c,0x3a,0x36,0x34,0x34,0x33,0x32,0x35,0x37,0x39,0x3a,
0x38,0x37,0x38,0x3a,0x3c,0x3c,0x3b,0x39,0x38,0x36,0x33,0x31,0x32,0x34,0x36,0x39,
0x39,0x39,0x3b,0x3a,0x38,0x39,0x3a,0x3b,0x39,0x38,0x38,0x38,0x38,0x37,0x38,0x3b,
0x3d,0x3c,0x3d,0x3c,0x3d,0x3d,0x3c,0x3a,0x3a,0x3b,0x3b,0x3b,0x39,0x38,0x38,0x3b,
0x3a,0x38,0x36,0x35,0x36,0x38,0x39,0x3b,0x3b,0x3a,0x3b,0x3a,0x3b,0x3b,0x3b,0x3c,
0x3a,0x38,0x37,0x37,0x38,0x3a,0x3b,0x3c,0x3c,0x3c,0x3d,0x3d,0x3d,0x3b,0x3b,0x3b,
0x3b,0x38,0x38,0x38,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x3a,0x3a,0x3b,0x3c,0x3a,
0x38,0x37,0x38,0x3a,0x3c,0x3d,0x3d,0x3c,0x3b,0x38,0x37,0x39,0x3b,0x3a,0x3a,0x38,
0x37,0x37,0x36,0x37,0x38,0x3a,0x3b,0x3a,0x3b,0x39,0x39,0x3a,0x38,0x37,0x39,0x39,
0x3a,0x3a,0x3a,0x3a,0x39,0x39,0x39,0x3b,0x3b,0x3b,0x3a,0x3a,0x38,0x38,0x3a,0x3b,
0x3a,0x39,0x38,0x39,0x39,0x39,0x38,0x39,0x38,0x36,0x36,0x39,0x3d,0x3d,0x3c,0x3b,
0x3b,0x3b,0x39,0x39,0x3b,0x3c,0x3c,0x3b,0x3a,0x3b,0x3c,0x3c,0x3b,0x3b,0x3d,0x3f,
0x3b,0x3b,0x38,0x36,0x37,0x36,0x36,0x38,0x38,0x36,0x35,0x32,0x31,0x34,0x36,0x38,
0x3a,0x3b,0x3b,0x3b,0x38,0x36,0x39,0x3d,0x3d,0x3b,0x3a,0x38,0x38,0x37,0x37,0x37,
0x37,0x36,0x34,0x36,0x38,0x39,0x39,0x39,0x38,0x37,0x38,0x39,0x38,0x38,0x39,0x37,
0x38,0x36,0x37,0x38,0x3a,0x3a,0x3b,0x3a,0x3a,0x39,0x3a,0x38,0x38,0x3a,0x3b,0x3b,
0x3b,0x3a,0x39,0x39,0x37,0x36,0x37,0x38,0x37,0x36,0x37,0x39,0x3a,0x38,0x37,0x37,
0x39,0x3a,0x39,0x39,0x3a,0x3a,0x3a,0x37,0x36,0x36,0x38,0x37,0x38,0x38,0x39,0x38,
0x36,0x36,0x37,0x3a,0x3b,0x38,0x39,0x38,0x38,0x39,0x3a,0x38,0x39,0x38,0x36,0x36,
0x36,0x37,0x37,0x37,0x37,0x37,0x38,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x35,0x35,0x37,
0x37,0x37,0x38,0x38,0x3b,0x3b,0x3b,0x3b,0x3a,0x3a,0x39,0x38,0x37,0x36,0x36,0x38,
0x37,0x36,0x38,0x38,0x38,0x39,0x3a,0x3b,0x3b,0x39,0x37,0x36,0x37,0x37,0x38,0x3a,
0x39,0x37,0x36,0x34,0x33,0x35,0x36,0x36,0x36,0x36,0x37,0x36,0x38,0x36,0x38,0x3b,
0x3b,0x39,0x38,0x37,0x38,0x39,0x38,0x39,0x3a,0x3a,0x39,0x38,0x39,0x3a,0x3b,0x3c,
0x3c,0x3a,0x3a,0x38,0x36,0x37,0x37,0x37,0x38,0x36,0x35,0x36,0x36,0x36,0x37,0x38,
0x38,0x37,0x36,0x35,0x37,0x3b,0x40,0x45,0x4a,0x51,0x5a,0x65,0x6f,0x78,0x81,0x88,
0x8e,0x90,0x93,0x96,0x98,0x98,0x97,0x97,0x97,0x96,0x95,0x92,0x92,0x93,0x95,0x96,
0x96,0x96,0x96,0x95,0x96,0x96,0x9a,0x9b,0x98,0x94,0x93,0x94,0x95,0x95,0x98,0x99,
0x98,0x98,0x96,0x96,0x96,0x96,0x96,0x96,0x94,0x93,0x93,0x93,0x91,0x90,0x8e,0x8a,
0x82,0x7a,0x71,0x69,0x60,0x57,0x4e,0x49,0x44,0x3d,0x3a,0x38,0x39,0x38,0x36,0x35,
0x36,0x37,0x38,0x33,0x35,0x34,0x34,0x35,0x36,0x37,0x3a,0x39,0x38,0x38,0x3a,0x3b,
0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,0x3d,0x3e,0x3d,0x3b,0x3b,0x3b,0x39,
0x38,0x38,0x38,0x37,0x36,0x35,0x36,0x37,0x3a,0x3a,0x3d,0x3b,0x3a,0x3a,0x3b,0x3a,
0x39,0x39,0x39,0x3b,0x3a,0x3b,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x39,0x3a,0x3a,0x37,
0x38,0x39,0x3a,0x3a,0x39,0x38,0x38,0x39,0x39,0x3a,0x39,0x38,0x37,0x38,0x39,0x3a,
0x3b,0x3c,0x3c,0x3d,0x3c,0x3a,0x39,0x39,0x39,0x3a,0x39,0x38,0x36,0x36,0x35,0x36,
0x38,0x39,0x3a,0x3b,0x3a,0x39,0x3b,0x3d,0x3c,0x3c,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,
0x3b,0x3a,0x38,0x37,0x37,0x38,0x39,0x38,0x38,0x38,0x39,0x39,0x3a,0x3a,0x3b,0x3d,
0x3e,0x3f,0x40,0x40,0x3e,0x3c,0x3b,0x3c,0x3b,0x3c,0x3c,0x3b,0x3b,0x3a,0x39,0x3a,
0x3b,0x3a,0x3b,0x3a,0x38,0x37,0x37,0x36,0x36,0x37,0x37,0x36,0x38,0x34,0x34,0x38,
0x3a,0x3a,0x3a,0x39,0x38,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x36,0x34,0x34,0x35,0x37,
0x38,0x39,0x3a,0x38,0x37,0x38,0x3a,0x3b,0x3c,0x3b,0x3b,0x38,0x39,0x3a,0x38,0x3a,
0x3b,0x3b,0x38,0x35,0x34,0x37,0x39,0x3a,0x3a,0x3a,0x39,0x3a,0x3a,0x38,0x38,0x38,
0x37,0x38,0x38,0x38,0x39,0x3a,0x3a,0x39,0x3a,0x3b,0x3b,0x3b,0x3b,0x3c,0x3c,0x3c,
0x3b,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x38,0x33,0x32,0x34,0x35,0x36,0x36,0x35,
0x34,0x34,0x35,0x37,0x38,0x3c,0x3d,0x3b,0x3a,0x39,0x38,0x39,0x38,0x38,0x3b,0x3b,
0x39,0x38,0x37,0x38,0x3a,0x3b,0x39,0x38,0x37,0x37,0x35,0x34,0x35,0x35,0x36,0x33,
0x32,0x34,0x37,0x36,0x34,0x31,0x32,0x35,0x39,0x39,0x38,0x3a,0x39,0x38,0x39,0x3a,
0x3b,0x3b,0x3b,0x39,0x39,0x38,0x39,0x3b,0x3b,0x39,0x3a,0x3a,0x39,0x38,0x38,0x37,
// Line 15
0x36,0x37,0x38,0x37,0x36,0x37,0x38,0x38,0x3a,0x39,0x39,0x39,0x37,0x35,0x36,0x38,
0x3b,0x3a,0x37,0x36,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x37,0x37,0x3a,0x3b,
0x39,0x37,0x34,0x34,0x34,0x34,0x35,0x37,0x3a,0x3a,0x37,0x36,0x36,0x37,0x3a,0x3c,
0x3d,0x3b,0x36,0x33,0x36,0x40,0x51,0x64,0x75,0x7b,0x7a,0x71,0x65,0x5b,0x5c,0x63,
0x6e,0x79,0x7c,0x79,0x74,0x6a,0x61,0x5f,0x61,0x67,0x6e,0x72,0x73,0x72,0x6e,0x69,
0x64,0x61,0x65,0x6c,0x74,0x77,0x78,0x76,0x6e,0x64,0x60,0x5f,0x64,0x6d,0x73,0x78,
0x79,0x75,0x6e,0x64,0x62,0x61,0x67,0x6e,0x76,0x79,0x7b,0x76,0x6d,0x64,0x61,0x61,
0x65,0x6a,0x71,0x76,0x77,0x73,0x6c,0x64,0x61,0x61,0x67,0x6f,0x77,0x7d,0x7c,0x76,
0x6f,0x67,0x64,0x63,0x65,0x69,0x6e,0x70,0x71,0x74,0x7d,0x85,0x90,0x9c,0xa6,0xab,
0xa9,0xa0,0x92,0x84,0x75,0x69,0x61,0x5a,0x54,0x4f,0x4a,0x43,0x3b,0x3b,0x42,0x4f,
0x61,0x73,0x82,0x8f,0x94,0x94,0x95,0x98,0x9d,0xa1,0x9e,0x97,0x8d,0x7f,0x6f,0x62,
0x5c,0x5c,0x61,0x69,0x70,0x78,0x82,0x8c,0x92,0x9a,0xa0,0xa6,0xa9,0xa9,0xa3,0x9e,
0x9a,0x97,0x98,0x9a,0x9a,0x96,0x8b,0x7a,0x68,0x5b,0x55,0x59,0x65,0x72,0x7d,0x81,
0x7c,0x72,0x67,0x61,0x63,0x67,0x6e,0x76,0x7a,0x79,0x72,0x6c,0x68,0x64,0x65,0x6c,
0x73,0x79,0x79,0x78,0x6f,0x67,0x63,0x63,0x66,0x70,0x78,0x7c,0x79,0x70,0x67,0x63,
0x60,0x5f,0x5e,0x5a,0x51,0x46,0x3a,0x30,0x2e,0x32,0x39,0x3f,0x47,0x51,0x5c,0x6a,
0x76,0x7d,0x7e,0x74,0x67,0x5f,0x5e,0x67,0x74,0x7e,0x81,0x7c,0x73,0x67,0x5c,0x5e,
0x65,0x6f,0x78,0x7a,0x78,0x72,0x69,0x61,0x5e,0x5e,0x5e,0x5a,0x51,0x43,0x37,0x2e,
0x2b,0x2f,0x38,0x40,0x44,0x44,0x3d,0x37,0x34,0x34,0x33,0x33,0x32,0x34,0x3c,0x4a,
0x5b,0x6e,0x7b,0x7f,0x7a,0x6f,0x63,0x5c,0x59,0x54,0x4c,0x44,0x3a,0x34,0x3c,0x4b,
0x62,0x78,0x8a,0x93,0x98,0x99,0x9a,0x98,0x8e,0x80,0x6e,0x60,0x58,0x5a,0x64,0x73,
0x7e,0x83,0x7e,0x74,0x6a,0x64,0x65,0x6c,0x75,0x7a,0x7c,0x78,0x71,0x69,0x65,0x65,
0x6a,0x72,0x7a,0x7d,0x7c,0x74,0x6c,0x65,0x61,0x5d,0x5c,0x5a,0x54,0x44,0x3a,0x2f,
0x2b,0x2f,0x36,0x3f,0x47,0x48,0x42,0x3d,0x36,0x32,0x30,0x33,0x36,0x3a,0x3d,0x3d,
0x37,0x32,0x32,0x38,0x45,0x55,0x67,0x78,0x81,0x7e,0x78,0x6e,0x68,0x67,0x69,0x6d,
0x72,0x77,0x7c,0x81,0x86,0x8d,0x97,0xa3,0xaa,0xab,0xa6,0x9c,0x8e,0x7f,0x72,0x67,
0x5e,0x59,0x53,0x4c,0x42,0x39,0x34,0x3f,0x4f,0x65,0x7a,0x85,0x82,0x75,0x64,0x58,
0x56,0x60,0x6f,0x7d,0x81,0x79,0x6e,0x64,0x60,0x61,0x62,0x5e,0x53,0x43,0x32,0x2c,
0x36,0x4c,0x67,0x7f,0x8c,0x8b,0x7f,0x6f,0x63,0x61,0x65,0x6e,0x75,0x7c,0x7e,0x82,
0x8c,0x96,0x9f,0xa9,0xad,0xaa,0xa1,0x95,0x89,0x7c,0x6e,0x61,0x58,0x52,0x4d,0x48,
0x43,0x3e,0x3b,0x38,0x35,0x33,0x37,0x3f,0x48,0x52,0x5c,0x69,0x78,0x85,0x8f,0x97,
0x9a,0x97,0x8c,0x7c,0x6b,0x5d,0x53,0x4a,0x41,0x3d,0x3b,0x3f,0x4b,0x5d,0x71,0x81,
0x87,0x82,0x75,0x67,0x5d,0x59,0x60,0x68,0x6f,0x76,0x7a,0x80,0x8a,0x94,0x9c,0xa0,
0x98,0x88,0x73,0x61,0x57,0x58,0x61,0x6d,0x79,0x84,0x8c,0x93,0x9b,0xa1,0xa5,0xa6,
0xa4,0xa0,0x9e,0x9c,0x9c,0x9c,0x9d,0x9d,0x9e,0xa0,0xa1,0x9f,0x97,0x8b,0x7d,0x72,
0x66,0x5c,0x54,0x4d,0x44,0x3e,0x39,0x3d,0x46,0x54,0x66,0x76,0x83,0x8d,0x94,0x99,
0x99,0x94,0x8c,0x7d,0x6c,0x60,0x5a,0x5c,0x66,0x71,0x79,0x7c,0x79,0x6f,0x68,0x61,
0x5b,0x55,0x4d,0x44,0x3b,0x36,0x36,0x36,0x39,0x3d,0x44,0x4d,0x57,0x60,0x69,0x75,
0x7f,0x89,0x90,0x98,0x9e,0xa5,0xa6,0xa4,0xa1,0x9d,0x9a,0x9a,0x9a,0x9b,0x9e,0xa1,
0xa3,0x9e,0x97,0x8b,0x7e,0x72,0x66,0x58,0x51,0x47,0x3f,0x3b,0x36,0x36,0x40,0x54,
0x6a,0x7c,0x83,0x7e,0x73,0x65,0x5c,0x5a,0x60,0x69,0x72,0x79,0x7c,0x81,0x8b,0x97,
0x9f,0x9f,0x94,0x81,0x6d,0x59,0x4a,0x40,0x3c,0x3b,0x39,0x38,0x36,0x34,0x39,0x3b,
0x3d,0x44,0x4d,0x59,0x6a,0x79,0x83,0x8a,0x91,0x97,0x9e,0xa3,0xa5,0xa3,0x9c,0x90,
0x81,0x73,0x67,0x5d,0x58,0x52,0x4b,0x42,0x3b,0x39,0x41,0x4e,0x5e,0x6e,0x7d,0x89,
0x91,0x94,0x95,0x98,0x9c,0x9e,0x9e,0x9c,0x94,0x86,0x76,0x68,0x60,0x5f,0x63,0x6a,
0x73,0x7c,0x84,0x8b,0x94,0x9d,0xa3,0xa3,0x98,0x85,0x73,0x63,0x5b,0x59,0x5e,0x68,
0x75,0x7f,0x88,0x8e,0x94,0x9b,0xa0,0xa3,0xa3,0xa1,0x9d,0x98,0x94,0x97,0x9a,0x9c,
0x98,0x8d,0x7d,0x6e,0x61,0x5c,0x60,0x6b,0x77,0x81,0x81,0x7a,0x6e,0x66,0x5f,0x5e,
0x65,0x6d,0x72,0x76,0x77,0x7c,0x87,0x94,0xa0,0xa3,0x9b,0x88,0x70,0x5c,0x55,0x5c,
0x6b,0x79,0x81,0x82,0x7d,0x73,0x6b,0x66,0x63,0x5c,0x4f,0x3f,0x33,0x32,0x3c,0x51,
0x67,0x77,0x7f,0x7d,0x70,0x5f,0x56,0x53,0x52,0x4f,0x47,0x3e,0x38,0x35,0x34,0x35,
0x3a,0x42,0x4b,0x53,0x5c,0x67,0x78,0x85,0x8e,0x94,0x97,0x94,0x8d,0x80,0x71,0x64,
0x55,0x47,0x3d,0x39,0x3b,0x3f,0x47,0x54,0x63,0x72,0x7f,0x89,0x91,0x97,0x9a,0x98,
0x8d,0x7d,0x6e,0x61,0x5b,0x5c,0x65,0x72,0x7d,0x80,0x7b,0x6e,0x69,0x63,0x5f,0x64,
0x6b,0x70,0x73,0x76,0x7c,0x88,0x96,0xa3,0xac,0xaf,0xac,0xa4,0x9a,0x94,0x94,0x98,
0x9c,0x9d,0xa0,0xa2,0xa1,0x9f,0x9d,0x9d,0x9f,0x9f,0x9f,0x9f,0x9e,0x9d,0x9c,0x9b,
0x99,0x92,0x88,0x7b,0x6c,0x5e,0x51,0x46,0x41,0x3a,0x36,0x36,0x34,0x30,0x2d,0x31,
0x3a,0x4a,0x5b,0x69,0x72,0x77,0x73,0x68,0x5d,0x56,0x53,0x50,0x49,0x40,0x39,0x33,
0x30,0x32,0x38,0x42,0x46,0x44,0x3e,0x3a,0x37,0x35,0x34,0x33,0x33,0x34,0x39,0x41,
0x4f,0x61,0x72,0x7e,0x87,0x8e,0x95,0x9c,0x9e,0x97,0x88,0x74,0x61,0x54,0x54,0x60,
0x70,0x7e,0x81,0x7b,0x70,0x64,0x5e,0x60,0x67,0x70,0x77,0x77,0x72,0x68,0x63,0x60,
0x5d,0x5d,0x5a,0x50,0x49,0x3b,0x2f,0x2c,0x2f,0x33,0x39,0x42,0x4c,0x57,0x61,0x6c,
0x76,0x82,0x8c,0x95,0x9d,0xa3,0xa9,0xab,0xa9,0x9f,0x91,0x82,0x74,0x66,0x5b,0x51,
0x4b,0x45,0x3e,0x37,0x30,0x2d,0x2e,0x33,0x39,0x3e,0x43,0x3e,0x34,0x31,0x33,0x3f,
0x52,0x67,0x78,0x81,0x80,0x76,0x66,0x62,0x61,0x67,0x6f,0x75,0x78,0x7d,0x80,0x88,
0x94,0x9d,0xa0,0x98,0x87,0x72,0x63,0x5b,0x5b,0x61,0x6e,0x7a,0x84,0x8d,0x96,0x9b,
0x9c,0x94,0x88,0x78,0x67,0x58,0x4e,0x45,0x3d,0x37,0x35,0x3a,0x45,0x5a,0x6e,0x7d,
0x83,0x7d,0x70,0x67,0x5c,0x55,0x51,0x4b,0x41,0x36,0x31,0x36,0x46,0x5d,0x75,0x86,
0x90,0x93,0x94,0x94,0x92,0x8d,0x83,0x75,0x65,0x5d,0x5d,0x64,0x70,0x7b,0x82,0x89,
0x8f,0x95,0x9b,0xa1,0xa4,0xa3,0x9e,0x98,0x94,0x97,0x9a,0x9c,0x9d,0x99,0x8e,0x81,
0x72,0x65,0x60,0x61,0x67,0x6f,0x78,0x81,0x89,0x91,0x97,0x9d,0xa5,0xa9,0xa9,0xa5,
0x9e,0x99,0x97,0x97,0x9a,0x9c,0x99,0x8e,0x7c,0x68,0x5b,0x59,0x62,0x6f,0x7b,0x81,
0x7d,0x74,0x6c,0x66,0x63,0x61,0x5b,0x50,0x44,0x3a,0x37,0x3d,0x53,0x6c,0x81,0x89,
0x84,0x72,0x64,0x58,0x58,0x64,0x73,0x7f,0x83,0x7a,0x6e,0x66,0x63,0x62,0x60,0x59,
0x4b,0x3b,0x30,0x2f,0x3d,0x55,0x6e,0x81,0x89,0x85,0x7a,0x6d,0x61,0x58,0x51,0x4a,
0x41,0x39,0x37,0x3f,0x4e,0x63,0x76,0x87,0x91,0x95,0x94,0x92,0x8e,0x85,0x7b,0x6b,
0x5a,0x4d,0x44,0x40,0x3e,0x3d,0x3b,0x37,0x34,0x32,0x33,0x3e,0x47,0x51,0x5d,0x6c,
0x79,0x86,0x91,0x9a,0x9f,0x9e,0x97,0x89,0x76,0x66,0x5e,0x5d,0x61,0x69,0x76,0x81,
0x88,0x8e,0x93,0x99,0x9c,0x9f,0x9f,0x9e,0x9a,0x97,0x98,0x9a,0x9e,0xa1,0xa5,0xa7,
0xa5,0xa5,0x9f,0x95,0x89,0x78,0x68,0x5c,0x57,0x57,0x5e,0x69,0x76,0x7f,0x89,0x91,
0x99,0xa0,0xa7,0xa9,0xa8,0xa3,0x9b,0x91,0x82,0x72,0x66,0x5d,0x5c,0x63,0x6e,0x78,
0x7d,0x7b,0x74,0x6c,0x64,0x60,0x5a,0x58,0x4f,0x42,0x36,0x2d,0x2a,0x30,0x36,0x3d,
0x45,0x4d,0x57,0x65,0x71,0x78,0x79,0x74,0x69,0x60,0x5f,0x66,0x71,0x7c,0x81,0x7d,
0x72,0x63,0x5a,0x5c,0x64,0x70,0x78,0x7a,0x78,0x71,0x68,0x61,0x5e,0x61,0x62,0x5e,
0x54,0x43,0x34,0x31,0x38,0x4b,0x67,0x81,0x8d,0x88,0x77,0x63,0x57,0x56,0x60,0x6e,
0x7a,0x7d,0x77,0x6d,0x64,0x60,0x61,0x5f,0x58,0x4c,0x3f,0x34,0x2c,0x2a,0x2f,0x37,
0x3c,0x3e,0x3d,0x3e,0x3d,0x3b,0x39,0x36,0x33,0x33,0x36,0x3c,0x46,0x51,0x5e,0x69,
0x79,0x85,0x91,0x9b,0x9e,0x98,0x8f,0x81,0x70,0x60,0x51,0x45,0x3f,0x3b,0x38,0x37,
0x36,0x35,0x35,0x36,0x3a,0x45,0x56,0x65,0x70,0x77,0x78,0x72,0x69,0x60,0x59,0x55,
0x4e,0x46,0x3f,0x37,0x33,0x30,0x33,0x39,0x43,0x4e,0x59,0x63,0x6e,0x79,0x83,0x8f,
0x9a,0xa3,0xaa,0xab,0xaa,0xa5,0x9f,0x9b,0x96,0x97,0x97,0x98,0x97,0x8e,0x80,0x6f,
0x61,0x5a,0x5c,0x65,0x73,0x7f,0x84,0x7c,0x70,0x64,0x5e,0x60,0x66,0x6e,0x73,0x76,
0x71,0x67,0x61,0x60,0x63,0x69,0x6c,0x6e,0x6f,0x71,0x74,0x7d,0x88,0x92,0x98,0x99,
0x90,0x81,0x70,0x5f,0x4f,0x44,0x3f,0x3b,0x3c,0x3f,0x46,0x54,0x63,0x71,0x7c,0x87,
0x8f,0x95,0x98,0x9b,0xa1,0xa6,0xa9,0xa6,0xa3,0x9e,0x9d,0xa1,0xa5,0xa7,0xa8,0xa5,
0xa1,0x9e,0x9c,0x9f,0xa1,0x9f,0x99,0x8f,0x84,0x75,0x66,0x5a,0x52,0x4a,0x44,0x3d,
// Line 16
0x3a,0x37,0x36,0x37,0x39,0x3a,0x3b,0x3c,0x3c,0x3b,0x39,0x39,0x3b,0x3b,0x3a,0x39,
0x37,0x35,0x37,0x39,0x38,0x36,0x36,0x37,0x39,0x39,0x39,0x38,0x39,0x39,0x39,0x39,
0x39,0x39,0x39,0x36,0x35,0x36,0x38,0x39,0x3a,0x38,0x34,0x31,0x30,0x32,0x36,0x3c,
0x3d,0x3b,0x39,0x35,0x34,0x3b,0x46,0x58,0x6b,0x76,0x78,0x73,0x6a,0x5e,0x58,0x5a,
0x64,0x70,0x79,0x7b,0x76,0x6d,0x64,0x5f,0x61,0x67,0x6f,0x75,0x77,0x75,0x71,0x6a,
0x62,0x5f,0x62,0x67,0x6d,0x74,0x78,0x76,0x71,0x6a,0x62,0x5f,0x60,0x66,0x70,0x76,
0x77,0x74,0x6e,0x68,0x64,0x61,0x62,0x65,0x6d,0x71,0x74,0x73,0x71,0x6b,0x65,0x5f,
0x5f,0x66,0x6f,0x75,0x77,0x75,0x6f,0x68,0x60,0x5c,0x5e,0x66,0x6e,0x76,0x7a,0x7a,
0x76,0x6f,0x67,0x62,0x64,0x68,0x6d,0x6f,0x6f,0x6f,0x74,0x7a,0x84,0x91,0x9f,0xa9,
0xac,0xa8,0x9d,0x8f,0x84,0x74,0x67,0x5f,0x5a,0x54,0x4d,0x44,0x3c,0x38,0x39,0x42,
0x51,0x63,0x76,0x85,0x8e,0x94,0x98,0x9b,0x9d,0x9f,0xa2,0xa0,0x98,0x8b,0x7a,0x6b,
0x5e,0x56,0x56,0x5d,0x68,0x71,0x78,0x79,0x73,0x69,0x62,0x5c,0x5e,0x69,0x73,0x7a,
0x7a,0x74,0x6b,0x64,0x60,0x62,0x66,0x6b,0x6c,0x6c,0x6c,0x71,0x79,0x89,0x97,0xa2,
0xac,0xac,0xa7,0xa0,0x99,0x95,0x97,0x9a,0x9a,0x95,0x8a,0x7c,0x6b,0x5e,0x53,0x4c,
0x45,0x3d,0x36,0x37,0x40,0x4f,0x62,0x72,0x7b,0x7c,0x74,0x66,0x5c,0x55,0x52,0x4c,
0x46,0x3d,0x37,0x3a,0x47,0x5c,0x73,0x83,0x88,0x80,0x71,0x61,0x56,0x50,0x4d,0x49,
0x42,0x39,0x33,0x30,0x32,0x37,0x40,0x48,0x4e,0x58,0x63,0x6f,0x7a,0x84,0x8e,0x95,
0x97,0x91,0x86,0x78,0x67,0x56,0x49,0x40,0x3c,0x3c,0x3d,0x3b,0x3a,0x39,0x39,0x3d,
0x41,0x48,0x53,0x63,0x71,0x7c,0x84,0x8c,0x92,0x98,0x9d,0xa1,0xa6,0xa4,0x9a,0x8c,
0x7c,0x6d,0x62,0x5e,0x5e,0x63,0x6b,0x73,0x77,0x82,0x8e,0x97,0x9e,0x9c,0x95,0x8d,
0x7d,0x69,0x58,0x4c,0x41,0x38,0x34,0x35,0x3e,0x4c,0x5c,0x6a,0x76,0x82,0x8b,0x94,
0x9a,0x9a,0x97,0x8d,0x7f,0x6f,0x62,0x5d,0x60,0x67,0x72,0x7f,0x88,0x8e,0x92,0x99,
0xa0,0xa5,0xa6,0xa4,0xa0,0x9b,0x97,0x95,0x97,0x9b,0xa0,0xa2,0xa0,0x9d,0x9d,0x9d,
0x9d,0x9d,0x9b,0x98,0x92,0x89,0x7d,0x6f,0x60,0x53,0x48,0x41,0x3d,0x3b,0x3b,0x39,
0x36,0x35,0x36,0x3c,0x44,0x50,0x5f,0x6d,0x76,0x76,0x71,0x6a,0x61,0x5b,0x5e,0x67,
0x72,0x79,0x7b,0x76,0x6e,0x67,0x62,0x61,0x60,0x5c,0x53,0x46,0x36,0x2b,0x2a,0x2f,
0x36,0x3d,0x40,0x3f,0x3a,0x35,0x30,0x31,0x34,0x35,0x35,0x3a,0x3c,0x3c,0x3a,0x37,
0x36,0x3d,0x47,0x54,0x66,0x76,0x84,0x91,0x98,0x9b,0x9d,0x99,0x8f,0x7d,0x6c,0x5e,
0x58,0x5c,0x65,0x6f,0x79,0x84,0x8d,0x94,0x9b,0x9c,0x98,0x8b,0x76,0x62,0x52,0x48,
0x42,0x41,0x3e,0x3c,0x3b,0x39,0x39,0x3d,0x40,0x3f,0x3d,0x37,0x34,0x33,0x37,0x42,
0x52,0x62,0x71,0x7e,0x89,0x94,0x9d,0x9f,0x98,0x89,0x79,0x6b,0x60,0x5d,0x5f,0x67,
0x71,0x7a,0x84,0x90,0x9b,0xa3,0xa0,0x95,0x84,0x71,0x60,0x52,0x46,0x40,0x39,0x33,
0x33,0x39,0x48,0x5e,0x72,0x7c,0x7e,0x78,0x6c,0x5e,0x59,0x55,0x52,0x4d,0x43,0x3a,
0x3c,0x40,0x4f,0x65,0x79,0x8b,0x95,0x96,0x95,0x97,0x9e,0xa5,0xa8,0xa5,0xa2,0xa1,
0xa1,0x9f,0x9d,0x9d,0x9c,0x9a,0x99,0x97,0x91,0x89,0x7d,0x6c,0x5e,0x52,0x4a,0x46,
0x42,0x3e,0x3a,0x37,0x34,0x30,0x35,0x38,0x3e,0x4a,0x58,0x66,0x73,0x77,0x71,0x68,
0x5e,0x58,0x54,0x52,0x4e,0x49,0x40,0x36,0x2f,0x2e,0x35,0x3e,0x49,0x50,0x57,0x60,
0x6b,0x77,0x87,0x95,0x9d,0x9a,0x92,0x84,0x78,0x6b,0x5e,0x4f,0x46,0x3a,0x33,0x35,
0x3d,0x4b,0x5e,0x71,0x7a,0x7d,0x78,0x6f,0x66,0x5e,0x57,0x53,0x4c,0x46,0x40,0x3e,
0x40,0x4a,0x5e,0x74,0x88,0x91,0x92,0x90,0x91,0x97,0x9e,0xa2,0xa2,0x9b,0x8f,0x82,
0x73,0x63,0x5a,0x53,0x4c,0x44,0x3b,0x37,0x3c,0x46,0x51,0x61,0x71,0x82,0x8e,0x9a,
0x9b,0x96,0x8b,0x7d,0x6e,0x62,0x57,0x4c,0x42,0x37,0x2f,0x2f,0x37,0x48,0x5e,0x73,
0x7f,0x80,0x76,0x69,0x5e,0x56,0x51,0x4d,0x48,0x41,0x38,0x30,0x2e,0x33,0x3c,0x42,
0x44,0x40,0x39,0x33,0x31,0x36,0x42,0x52,0x64,0x74,0x81,0x8a,0x92,0x9a,0x9f,0xa1,
0xa0,0x9f,0x9b,0x94,0x8d,0x82,0x76,0x69,0x5e,0x5a,0x5e,0x67,0x71,0x7a,0x82,0x89,
0x8f,0x97,0x9e,0xa4,0xa9,0xa7,0xa0,0x9c,0x99,0x99,0x99,0x9e,0x9f,0x9f,0x9f,0xa0,
0x9d,0x9f,0x9e,0x9c,0x9a,0x97,0x98,0x9b,0x9e,0x9f,0x9c,0x95,0x8b,0x7c,0x6e,0x61,
0x57,0x4e,0x47,0x3f,0x38,0x35,0x3a,0x45,0x52,0x61,0x74,0x84,0x8f,0x96,0x97,0x97,
0x90,0x82,0x73,0x64,0x59,0x51,0x49,0x45,0x3e,0x3d,0x44,0x50,0x60,0x71,0x7f,0x84,
0x7d,0x6e,0x60,0x57,0x56,0x5d,0x68,0x73,0x79,0x7d,0x82,0x89,0x94,0xa2,0xac,0xaf,
0xac,0xa5,0x9d,0x97,0x96,0x9b,0x9e,0xa3,0xa3,0xa2,0xa3,0xa3,0xa0,0xa1,0x9d,0x9b,
0x9d,0x9d,0x9c,0x9b,0x9b,0x98,0x96,0x94,0x96,0x9a,0x9d,0x9a,0x91,0x84,0x76,0x69,
0x60,0x5d,0x63,0x6c,0x74,0x79,0x81,0x89,0x91,0x98,0x9d,0xa4,0xa6,0xa1,0x9a,0x93,
0x91,0x92,0x92,0x94,0x92,0x8b,0x81,0x71,0x62,0x55,0x4c,0x47,0x44,0x40,0x3d,0x39,
0x35,0x34,0x36,0x3d,0x44,0x4a,0x53,0x5e,0x6d,0x7e,0x8c,0x95,0x99,0x97,0x8e,0x81,
0x71,0x64,0x58,0x4d,0x42,0x38,0x34,0x37,0x40,0x50,0x62,0x72,0x7e,0x7f,0x79,0x6d,
0x62,0x56,0x4e,0x4a,0x46,0x3c,0x39,0x35,0x33,0x34,0x37,0x3d,0x46,0x52,0x60,0x6d,
0x77,0x7a,0x78,0x6f,0x66,0x60,0x5e,0x64,0x6b,0x71,0x76,0x7a,0x81,0x8a,0x92,0x97,
0x94,0x8a,0x7c,0x68,0x53,0x44,0x3e,0x3b,0x39,0x38,0x3c,0x45,0x54,0x64,0x73,0x82,
0x8c,0x90,0x94,0x97,0x9c,0xa3,0xa6,0xa5,0x9c,0x8f,0x82,0x72,0x64,0x5b,0x5a,0x61,
0x6b,0x74,0x7d,0x7d,0x75,0x68,0x5b,0x58,0x60,0x6b,0x77,0x7d,0x7a,0x72,0x67,0x5e,
0x5d,0x5e,0x5f,0x58,0x4b,0x3a,0x30,0x2e,0x3e,0x56,0x6f,0x84,0x8b,0x82,0x73,0x61,
0x58,0x5b,0x64,0x70,0x78,0x79,0x74,0x6c,0x67,0x63,0x60,0x5d,0x55,0x49,0x3b,0x30,
0x2c,0x35,0x49,0x61,0x78,0x88,0x91,0x95,0x95,0x8f,0x88,0x7f,0x74,0x66,0x55,0x46,
0x3b,0x38,0x38,0x39,0x3c,0x3d,0x39,0x38,0x38,0x3e,0x4a,0x5e,0x6c,0x76,0x79,0x75,
0x6b,0x62,0x5d,0x5e,0x63,0x69,0x6d,0x72,0x77,0x7f,0x8a,0x95,0x9c,0x9a,0x8e,0x7c,
0x67,0x56,0x4a,0x44,0x3e,0x3a,0x38,0x3d,0x47,0x58,0x6f,0x7e,0x84,0x7e,0x6f,0x61,
0x5a,0x5e,0x69,0x76,0x7e,0x7d,0x74,0x6c,0x61,0x59,0x5b,0x5c,0x58,0x50,0x44,0x36,
0x2e,0x28,0x2b,0x32,0x3e,0x44,0x44,0x3d,0x34,0x30,0x34,0x41,0x54,0x6b,0x7a,0x81,
0x79,0x6c,0x60,0x5d,0x5f,0x67,0x6f,0x75,0x78,0x7a,0x81,0x8c,0x99,0xa2,0x9f,0x8f,
0x79,0x62,0x53,0x51,0x5a,0x69,0x76,0x7c,0x79,0x70,0x6b,0x64,0x60,0x58,0x4f,0x42,
0x35,0x2b,0x2d,0x3e,0x55,0x6c,0x7c,0x80,0x7b,0x72,0x66,0x5c,0x55,0x4e,0x49,0x3f,
0x38,0x38,0x40,0x4f,0x61,0x73,0x86,0x92,0x97,0x95,0x90,0x89,0x80,0x75,0x67,0x5c,
0x52,0x49,0x42,0x3d,0x3c,0x41,0x4e,0x5f,0x71,0x7e,0x82,0x7a,0x6b,0x5b,0x53,0x57,
0x62,0x6f,0x79,0x7b,0x76,0x6a,0x60,0x5d,0x5d,0x5c,0x55,0x4a,0x3d,0x30,0x28,0x28,
0x2e,0x38,0x42,0x44,0x41,0x39,0x33,0x33,0x38,0x43,0x53,0x63,0x75,0x7f,0x88,0x91,
0x97,0x9a,0x95,0x88,0x76,0x66,0x59,0x55,0x59,0x69,0x74,0x7b,0x7b,0x76,0x6b,0x65,
0x5b,0x53,0x4d,0x46,0x3d,0x34,0x2c,0x28,0x2c,0x33,0x3b,0x46,0x53,0x5f,0x6a,0x71,
0x73,0x71,0x6b,0x62,0x58,0x53,0x51,0x4c,0x44,0x3a,0x34,0x30,0x30,0x32,0x39,0x45,
0x53,0x61,0x6c,0x76,0x79,0x76,0x6c,0x61,0x5a,0x54,0x51,0x4d,0x43,0x38,0x2d,0x28,
0x27,0x2c,0x38,0x44,0x50,0x59,0x60,0x67,0x75,0x81,0x8a,0x95,0x99,0x95,0x8a,0x7a,
0x6a,0x5e,0x58,0x5c,0x67,0x76,0x82,0x86,0x80,0x76,0x6a,0x63,0x60,0x62,0x68,0x6d,
0x73,0x77,0x7d,0x85,0x93,0xa1,0xac,0xaf,0xaa,0xa0,0x93,0x83,0x73,0x64,0x5c,0x57,
0x52,0x4d,0x44,0x3a,0x35,0x37,0x42,0x56,0x6c,0x7e,0x82,0x7a,0x6b,0x5c,0x53,0x55,
0x60,0x6e,0x78,0x7a,0x77,0x6f,0x68,0x65,0x61,0x63,0x68,0x6b,0x6d,0x6c,0x73,0x7e,
0x8b,0x98,0xa4,0xac,0xb5,0xb1,0xa7,0x9b,0x8c,0x7c,0x6f,0x62,0x5a,0x58,0x5e,0x64,
0x6b,0x73,0x7a,0x84,0x8d,0x95,0x9d,0xa4,0xa8,0xa6,0xa2,0x9a,0x8c,0x7e,0x6f,0x62,
0x5c,0x5a,0x5e,0x62,0x69,0x70,0x79,0x83,0x8c,0x95,0x9e,0xa6,0xa8,0xa8,0xa2,0x98,
0x8b,0x7a,0x6a,0x61,0x5e,0x5e,0x5d,0x63,0x6a,0x74,0x7e,0x88,0x92,0x9b,0x9e,0x99,
0x8c,0x7b,0x6b,0x5e,0x57,0x58,0x60,0x6d,0x7a,0x84,0x8c,0x93,0x9a,0xa0,0xa3,0xa4,
0xa2,0x9c,0x92,0x88,0x7b,0x6f,0x66,0x5e,0x5a,0x5d,0x65,0x6f,0x79,0x81,0x89,0x91,
0x96,0x9b,0xa0,0xa8,0xa7,0xa1,0x97,0x89,0x79,0x6f,0x64,0x5e,0x5d,0x5f,0x64,0x6b,
0x73,0x7e,0x88,0x91,0x98,0x9a,0xa2,0xa6,0xa3,0x9c,0x91,0x83,0x76,0x64,0x57,0x51,
0x4d,0x48,0x41,0x38,0x31,0x2f,0x2f,0x31,0x33,0x38,0x3b,0x3b,0x39,0x37,0x34,0x35,
0x34,0x35,0x36,0x37,0x37,0x35,0x32,0x30,0x30,0x34,0x37,0x38,0x38,0x39,0x39,0x39,
0x37,0x38,0x39,0x37,0x35,0x34,0x35,0x36,0x37,0x36,0x35,0x35,0x36,0x36,0x35,0x37,
// Line 17
0x38,0x39,0x3b,0x3b,0x38,0x34,0x33,0x33,0x34,0x35,0x38,0x39,0x38,0x37,0x36,0x36,
0x39,0x3b,0x3b,0x39,0x38,0x39,0x3d,0x3c,0x3a,0x38,0x38,0x39,0x3b,0x3b,0x3b,0x39,
0x38,0x36,0x34,0x34,0x35,0x37,0x3b,0x3c,0x3a,0x38,0x36,0x34,0x34,0x36,0x37,0x39,
0x3a,0x38,0x35,0x35,0x38,0x40,0x53,0x66,0x76,0x7e,0x7b,0x72,0x68,0x5f,0x5d,0x64,
0x6f,0x77,0x7c,0x7a,0x73,0x68,0x62,0x5e,0x63,0x6a,0x73,0x79,0x7a,0x75,0x6e,0x67,
0x60,0x5f,0x64,0x6c,0x75,0x7d,0x7d,0x78,0x70,0x68,0x65,0x64,0x68,0x70,0x76,0x7a,
0x78,0x72,0x6e,0x68,0x63,0x62,0x65,0x6a,0x6e,0x71,0x73,0x71,0x6b,0x63,0x5f,0x62,
0x68,0x6e,0x77,0x7b,0x7b,0x78,0x6e,0x64,0x5f,0x5e,0x63,0x6d,0x74,0x78,0x78,0x74,
0x6e,0x67,0x66,0x69,0x6e,0x71,0x73,0x73,0x74,0x78,0x7d,0x85,0x8d,0x98,0xa3,0xa9,
0xaa,0xa4,0x9a,0x8b,0x7b,0x6e,0x63,0x5c,0x57,0x50,0x4a,0x43,0x3d,0x3b,0x40,0x4f,
0x62,0x76,0x85,0x8e,0x94,0x95,0x96,0x98,0x9b,0x9f,0x9f,0x9a,0x8e,0x7f,0x71,0x64,
0x5b,0x5b,0x5f,0x68,0x72,0x79,0x7b,0x79,0x70,0x65,0x5d,0x60,0x68,0x71,0x7a,0x7d,
0x7b,0x76,0x6d,0x67,0x67,0x69,0x6d,0x70,0x70,0x6f,0x6e,0x76,0x81,0x90,0xa0,0xac,
0xaf,0xb1,0xa8,0xa1,0x9f,0x9f,0xa0,0xa0,0x9a,0x90,0x83,0x72,0x63,0x57,0x4e,0x45,
0x3b,0x33,0x32,0x3b,0x4a,0x5c,0x6e,0x7c,0x80,0x78,0x6c,0x60,0x59,0x56,0x52,0x4b,
0x42,0x39,0x37,0x3e,0x51,0x6a,0x7e,0x88,0x85,0x7a,0x6c,0x60,0x5c,0x60,0x69,0x71,
0x79,0x7d,0x82,0x8b,0x94,0x9b,0xa2,0xa7,0xa7,0xa1,0x96,0x89,0x7a,0x6c,0x61,0x58,
0x53,0x4d,0x48,0x44,0x3d,0x37,0x33,0x34,0x38,0x3d,0x43,0x49,0x53,0x5d,0x68,0x74,
0x82,0x8c,0x93,0x9a,0x9e,0x9e,0xa2,0xa2,0x9d,0x92,0x84,0x77,0x6c,0x65,0x63,0x67,
0x6e,0x73,0x7a,0x80,0x87,0x8e,0x98,0x9e,0xa3,0xa6,0xa5,0xa2,0x9e,0x9b,0x98,0x97,
0x99,0x9c,0x9d,0x9f,0x9e,0x9b,0x9a,0x9b,0x9d,0xa0,0x9e,0x9a,0x92,0x85,0x78,0x6a,
0x5d,0x51,0x48,0x40,0x3b,0x3a,0x3d,0x45,0x52,0x62,0x73,0x82,0x8d,0x93,0x95,0x96,
0x90,0x86,0x7a,0x6c,0x5d,0x4f,0x45,0x3e,0x3c,0x3b,0x3b,0x38,0x37,0x36,0x38,0x40,
0x4e,0x5e,0x6f,0x7b,0x7d,0x78,0x6d,0x61,0x58,0x53,0x50,0x4a,0x42,0x37,0x2e,0x2b,
0x2e,0x37,0x42,0x48,0x48,0x43,0x3b,0x34,0x32,0x36,0x3b,0x3c,0x3b,0x38,0x36,0x37,
0x38,0x3a,0x3c,0x3c,0x39,0x37,0x35,0x39,0x44,0x51,0x5f,0x6a,0x77,0x81,0x8b,0x94,
0x9c,0xa1,0xa4,0xa4,0xa3,0x9f,0x97,0x8a,0x7c,0x6a,0x5c,0x59,0x60,0x6a,0x75,0x7f,
0x81,0x7b,0x72,0x69,0x64,0x68,0x6c,0x6e,0x73,0x75,0x78,0x7c,0x83,0x8d,0x9d,0xa8,
0xac,0xaa,0xa4,0x98,0x8b,0x7c,0x6f,0x65,0x5d,0x56,0x4f,0x4a,0x44,0x3f,0x3a,0x38,
0x37,0x39,0x3d,0x43,0x4b,0x55,0x5f,0x6c,0x78,0x85,0x8d,0x97,0x9b,0x9f,0xa4,0xa8,
0xa7,0xa0,0x95,0x85,0x79,0x6d,0x65,0x63,0x6a,0x71,0x78,0x7d,0x82,0x86,0x8f,0x96,
0x9a,0x98,0x8f,0x82,0x6f,0x5e,0x54,0x56,0x62,0x6f,0x7b,0x7e,0x7a,0x6e,0x62,0x5c,
0x5f,0x69,0x74,0x7b,0x7c,0x77,0x70,0x6b,0x65,0x61,0x5f,0x59,0x4e,0x40,0x34,0x31,
0x39,0x49,0x5e,0x73,0x89,0x96,0x9b,0x9d,0x98,0x8f,0x83,0x75,0x68,0x5c,0x51,0x46,
0x3a,0x36,0x36,0x3c,0x4a,0x5d,0x6e,0x7f,0x84,0x80,0x75,0x67,0x5b,0x51,0x49,0x43,
0x3d,0x37,0x32,0x30,0x2f,0x31,0x39,0x44,0x50,0x5e,0x6b,0x76,0x7a,0x78,0x6f,0x65,
0x61,0x61,0x67,0x70,0x78,0x7c,0x7d,0x82,0x89,0x95,0xa0,0xa4,0x9c,0x8b,0x75,0x60,
0x55,0x54,0x5d,0x6c,0x76,0x7e,0x87,0x8f,0x97,0x9d,0xa2,0xa2,0xa2,0x9e,0x9a,0x92,
0x88,0x7b,0x6d,0x60,0x5c,0x60,0x6c,0x79,0x82,0x85,0x7e,0x73,0x68,0x62,0x62,0x69,
0x70,0x77,0x78,0x74,0x6c,0x62,0x60,0x62,0x65,0x6a,0x6d,0x71,0x74,0x76,0x7b,0x85,
0x92,0x9f,0xac,0xb1,0xae,0xa5,0x9c,0x97,0x98,0x99,0x9a,0x98,0x92,0x85,0x75,0x65,
0x59,0x50,0x4a,0x43,0x3b,0x36,0x39,0x46,0x56,0x6d,0x7c,0x83,0x81,0x76,0x68,0x5d,
0x5f,0x68,0x75,0x7e,0x80,0x79,0x6e,0x65,0x62,0x62,0x60,0x59,0x4f,0x3f,0x30,0x2d,
0x38,0x4f,0x6b,0x7c,0x82,0x7e,0x75,0x6a,0x60,0x58,0x53,0x4b,0x43,0x3b,0x39,0x42,
0x51,0x64,0x77,0x86,0x91,0x97,0x9a,0x9a,0x97,0x8c,0x7c,0x6a,0x5b,0x55,0x5c,0x69,
0x76,0x7d,0x7f,0x7b,0x71,0x68,0x62,0x5f,0x59,0x4d,0x3d,0x33,0x30,0x38,0x4a,0x5f,
0x74,0x87,0x92,0x96,0x96,0x97,0x9a,0x9f,0xa2,0xa2,0x9d,0x94,0x86,0x75,0x67,0x5e,
0x5f,0x65,0x70,0x79,0x80,0x7e,0x78,0x6e,0x66,0x62,0x5d,0x55,0x4a,0x3c,0x35,0x31,
0x38,0x4e,0x66,0x7b,0x83,0x7f,0x71,0x65,0x5b,0x54,0x4c,0x48,0x42,0x3b,0x35,0x30,
0x2d,0x31,0x36,0x3f,0x4c,0x5c,0x6a,0x75,0x77,0x73,0x6d,0x65,0x5b,0x52,0x4b,0x45,
0x3c,0x34,0x32,0x39,0x4a,0x5f,0x73,0x85,0x93,0x9a,0x9e,0x99,0x8f,0x86,0x7c,0x6f,
0x60,0x4f,0x46,0x3f,0x3b,0x38,0x38,0x40,0x4e,0x5e,0x71,0x80,0x8c,0x92,0x93,0x91,
0x8e,0x89,0x7d,0x6c,0x5b,0x4c,0x42,0x3e,0x3f,0x40,0x40,0x3b,0x34,0x2f,0x32,0x3c,
0x48,0x53,0x5f,0x6a,0x75,0x80,0x8c,0x95,0x9c,0x9d,0x94,0x82,0x6e,0x5e,0x57,0x58,
0x62,0x6e,0x7a,0x7f,0x7b,0x71,0x68,0x65,0x67,0x67,0x6e,0x72,0x76,0x7c,0x81,0x8a,
0x96,0x9f,0xa6,0xac,0xaa,0xa6,0x9f,0x91,0x80,0x71,0x66,0x60,0x5e,0x63,0x6a,0x71,
0x79,0x7f,0x87,0x90,0x9a,0x9e,0x9a,0x8c,0x79,0x64,0x51,0x44,0x3e,0x3d,0x3b,0x37,
0x33,0x31,0x33,0x3a,0x3f,0x41,0x40,0x3b,0x34,0x31,0x35,0x42,0x53,0x63,0x70,0x7b,
0x85,0x8f,0x97,0x9e,0xa1,0xa2,0xa2,0xa0,0x9e,0x9e,0x9d,0x9d,0x9d,0x9e,0xa0,0xa3,
0xa4,0xa0,0x9b,0x92,0x85,0x73,0x62,0x57,0x4e,0x48,0x42,0x3c,0x39,0x35,0x32,0x30,
0x2f,0x33,0x3b,0x47,0x53,0x5f,0x6e,0x7b,0x86,0x91,0x98,0x9a,0x97,0x8d,0x7f,0x73,
0x63,0x53,0x48,0x40,0x3c,0x39,0x40,0x46,0x52,0x61,0x70,0x7a,0x88,0x90,0x96,0x9a,
0x96,0x8c,0x7e,0x6f,0x62,0x5d,0x5e,0x65,0x6e,0x77,0x7e,0x87,0x8f,0x96,0x9d,0x9c,
0x94,0x84,0x73,0x62,0x59,0x5d,0x68,0x76,0x81,0x87,0x8c,0x8f,0x93,0x98,0x9d,0xa0,
0x9f,0x9a,0x98,0x94,0x96,0x9b,0xa0,0xa2,0xa3,0xa3,0xa2,0xa3,0x9f,0x96,0x88,0x77,
0x66,0x5c,0x5c,0x61,0x68,0x6f,0x75,0x7b,0x84,0x8d,0x95,0x9b,0x9b,0x91,0x80,0x6c,
0x5d,0x58,0x5a,0x62,0x6e,0x7a,0x85,0x8c,0x92,0x96,0x97,0x96,0x8c,0x7c,0x6c,0x59,
0x49,0x40,0x3d,0x3d,0x3c,0x3d,0x38,0x33,0x31,0x33,0x36,0x43,0x4e,0x5b,0x6b,0x78,
0x82,0x8b,0x94,0x98,0x98,0x8e,0x81,0x73,0x66,0x5d,0x5a,0x5f,0x6c,0x79,0x85,0x90,
0x97,0x9c,0x9e,0xa0,0xa0,0xa0,0x9e,0x98,0x8d,0x80,0x71,0x65,0x5c,0x5b,0x61,0x6e,
0x76,0x7b,0x78,0x72,0x6d,0x63,0x59,0x56,0x50,0x4a,0x43,0x3b,0x34,0x32,0x34,0x37,
0x3d,0x46,0x53,0x5e,0x69,0x71,0x76,0x75,0x6e,0x61,0x5b,0x5d,0x66,0x73,0x7a,0x7d,
0x79,0x6d,0x62,0x5b,0x5a,0x5c,0x5b,0x52,0x44,0x36,0x2e,0x2b,0x2d,0x35,0x3f,0x48,
0x4f,0x56,0x5f,0x6a,0x77,0x81,0x8a,0x93,0x9d,0xa2,0xa8,0xa7,0xa1,0x99,0x8d,0x7e,
0x73,0x67,0x5c,0x53,0x4a,0x43,0x41,0x3f,0x3c,0x39,0x36,0x36,0x36,0x3b,0x48,0x59,
0x6b,0x76,0x78,0x73,0x6b,0x64,0x5f,0x59,0x53,0x48,0x3e,0x35,0x32,0x38,0x48,0x5d,
0x73,0x85,0x94,0x9d,0x9e,0x98,0x93,0x87,0x79,0x6d,0x5f,0x53,0x49,0x3f,0x37,0x35,
0x3a,0x48,0x5a,0x6a,0x76,0x7d,0x7c,0x74,0x67,0x5e,0x57,0x52,0x4b,0x42,0x38,0x38,
0x43,0x53,0x69,0x7a,0x83,0x7f,0x73,0x64,0x57,0x51,0x4e,0x49,0x3f,0x34,0x2d,0x2e,
0x31,0x39,0x40,0x42,0x3d,0x37,0x32,0x34,0x36,0x3a,0x37,0x31,0x30,0x34,0x3f,0x55,
0x68,0x78,0x7f,0x79,0x6c,0x61,0x5c,0x5d,0x64,0x6a,0x70,0x74,0x7a,0x7d,0x85,0x92,
0x9e,0xa6,0xa9,0xa7,0xa0,0x98,0x8a,0x7c,0x70,0x67,0x60,0x58,0x51,0x4a,0x43,0x3c,
0x39,0x3d,0x4a,0x5f,0x71,0x7f,0x89,0x8f,0x95,0x98,0x9a,0x9f,0xa3,0xa2,0x9b,0x8e,
0x7f,0x70,0x64,0x59,0x51,0x4a,0x44,0x3d,0x3b,0x36,0x34,0x39,0x3b,0x3b,0x3b,0x38,
0x34,0x32,0x32,0x34,0x35,0x35,0x32,0x32,0x3b,0x49,0x5c,0x6c,0x77,0x7d,0x7d,0x75,
0x6a,0x64,0x62,0x66,0x6d,0x73,0x78,0x7e,0x85,0x8c,0x94,0x9e,0xa6,0xa9,0xaa,0xa4,
0x9a,0x8f,0x82,0x75,0x6a,0x64,0x61,0x64,0x6a,0x73,0x7c,0x85,0x8c,0x92,0x9a,0x9d,
0x9b,0x92,0x83,0x70,0x5e,0x4e,0x43,0x3b,0x3b,0x3c,0x41,0x49,0x55,0x65,0x73,0x80,
0x88,0x91,0x96,0x98,0x95,0x8b,0x7d,0x70,0x62,0x59,0x59,0x61,0x6d,0x7a,0x83,0x8b,
0x92,0x9a,0x9f,0xa0,0x9a,0x8a,0x73,0x62,0x54,0x56,0x63,0x74,0x80,0x82,0x7a,0x6d,
0x60,0x5a,0x5f,0x6a,0x74,0x7a,0x79,0x74,0x6d,0x67,0x64,0x63,0x61,0x5d,0x54,0x46,
0x38,0x33,0x3b,0x50,0x69,0x80,0x8d,0x8d,0x7f,0x6b,0x5c,0x58,0x60,0x6e,0x79,0x7d,
0x7d,0x75,0x6a,0x60,0x60,0x65,0x6e,0x76,0x79,0x77,0x74,0x6c,0x63,0x5f,0x5d,0x5d,
0x59,0x4f,0x42,0x36,0x2d,0x28,0x2a,0x33,0x3d,0x43,0x43,0x40,0x3b,0x35,0x33,0x32,
0x34,0x37,0x39,0x3a,0x37,0x34,0x36,0x38,0x36,0x33,0x32,0x33,0x37,0x38,0x36,0x34,
0x38,0x37,0x34,0x37,0x39,0x3c,0x3d,0x3c,0x3b,0x3b,0x3d,0x3c,0x39,0x36,0x34,0x33,
// Line 18
0x39,0x38,0x37,0x36,0x36,0x38,0x38,0x38,0x37,0x36,0x36,0x34,0x33,0x34,0x36,0x38,
0x3b,0x3b,0x39,0x39,0x38,0x38,0x39,0x3c,0x3f,0x40,0x3c,0x34,0x2c,0x2c,0x31,0x38,
0x40,0x42,0x3e,0x35,0x2d,0x2a,0x31,0x3c,0x46,0x47,0x41,0x33,0x27,0x24,0x2a,0x36,
0x44,0x48,0x3f,0x32,0x25,0x20,0x28,0x38,0x45,0x4a,0x45,0x38,0x2b,0x27,0x2f,0x3d,
0x4b,0x4b,0x42,0x32,0x26,0x23,0x2d,0x3c,0x48,0x4b,0x42,0x31,0x26,0x24,0x2f,0x3e,
0x47,0x49,0x40,0x32,0x25,0x21,0x29,0x39,0x43,0x46,0x3f,0x32,0x27,0x24,0x2c,0x3e,
0x4c,0x50,0x45,0x38,0x2a,0x25,0x2d,0x3b,0x47,0x4d,0x45,0x34,0x25,0x22,0x2a,0x39,
0x45,0x48,0x41,0x31,0x24,0x1f,0x2a,0x3b,0x49,0x4e,0x44,0x32,0x24,0x1f,0x28,0x39,
0x46,0x49,0x42,0x33,0x25,0x21,0x2a,0x3b,0x4a,0x4d,0x42,0x32,0x26,0x22,0x2c,0x3a,
0x4a,0x51,0x4e,0x42,0x37,0x36,0x3f,0x4e,0x5b,0x60,0x5b,0x4a,0x40,0x3b,0x43,0x51,
0x5d,0x62,0x5d,0x4f,0x40,0x3c,0x43,0x51,0x5e,0x62,0x5a,0x4b,0x3f,0x3b,0x43,0x53,
0x60,0x64,0x5d,0x4e,0x3f,0x3b,0x43,0x53,0x62,0x65,0x5d,0x4e,0x3f,0x39,0x42,0x52,
0x61,0x64,0x5a,0x48,0x39,0x36,0x3f,0x4f,0x5c,0x61,0x59,0x4a,0x3b,0x36,0x3f,0x52,
0x5f,0x63,0x5b,0x4b,0x3c,0x3c,0x42,0x51,0x62,0x66,0x5d,0x4d,0x40,0x3b,0x43,0x52,
0x60,0x63,0x5b,0x4b,0x3e,0x3c,0x47,0x59,0x6a,0x71,0x6d,0x60,0x54,0x50,0x58,0x68,
0x74,0x78,0x6f,0x60,0x53,0x4e,0x54,0x64,0x72,0x79,0x71,0x62,0x54,0x50,0x5a,0x69,
0x76,0x7a,0x72,0x63,0x56,0x51,0x58,0x68,0x75,0x79,0x72,0x63,0x55,0x51,0x5b,0x6b,
0x7a,0x7f,0x75,0x62,0x55,0x4f,0x57,0x66,0x73,0x78,0x72,0x63,0x53,0x4e,0x57,0x68,
0x75,0x7b,0x72,0x63,0x57,0x55,0x5d,0x6c,0x79,0x7c,0x75,0x66,0x56,0x50,0x55,0x62,
0x6e,0x73,0x6e,0x60,0x53,0x50,0x5a,0x6a,0x78,0x7d,0x78,0x6d,0x62,0x5f,0x65,0x75,
0x86,0x8b,0x85,0x77,0x6a,0x66,0x6b,0x7d,0x89,0x8e,0x89,0x7c,0x6c,0x69,0x6f,0x7d,
0x8b,0x8f,0x88,0x79,0x69,0x63,0x6b,0x79,0x89,0x8e,0x88,0x79,0x6b,0x67,0x6e,0x7d,
0x8b,0x90,0x8a,0x7c,0x6d,0x66,0x6d,0x7c,0x89,0x8d,0x86,0x79,0x6d,0x68,0x6d,0x7b,
0x8b,0x90,0x88,0x7c,0x6d,0x67,0x6f,0x7c,0x88,0x8d,0x85,0x78,0x6d,0x6a,0x70,0x7e,
0x89,0x8c,0x85,0x79,0x6d,0x69,0x71,0x80,0x8e,0x92,0x8b,0x7d,0x6f,0x69,0x6e,0x7c,
0x8b,0x91,0x8e,0x82,0x75,0x73,0x7e,0x8f,0x9d,0xa2,0x9c,0x8d,0x82,0x7f,0x87,0x98,
0xa3,0xa5,0x9f,0x8f,0x83,0x7d,0x88,0x94,0x9f,0xa1,0x9a,0x8c,0x81,0x7e,0x88,0x97,
0xa2,0xa4,0x9d,0x8d,0x80,0x7c,0x82,0x90,0x9e,0xa2,0x98,0x89,0x7d,0x7a,0x83,0x91,
0x9f,0xa4,0x9f,0x90,0x82,0x7e,0x89,0x97,0xa4,0xa7,0x9e,0x8c,0x80,0x7a,0x81,0x90,
0x9e,0xa1,0x9a,0x8c,0x81,0x7e,0x86,0x95,0xa3,0xa6,0x9d,0x8e,0x80,0x7c,0x83,0x91,
0x9d,0xa0,0x9b,0x8e,0x82,0x80,0x89,0x99,0xaa,0xaf,0xa9,0x9d,0x92,0x90,0x99,0xa8,
0xb3,0xb6,0xad,0x9d,0x8f,0x8c,0x95,0xa5,0xb5,0xb8,0xb1,0xa5,0x99,0x95,0x9e,0xab,
0xb7,0xba,0xb1,0xa3,0x97,0x93,0x9a,0xa8,0xb3,0xb7,0xb0,0xa4,0x98,0x95,0x9e,0xac,
0xb6,0xb7,0xb0,0xa3,0x99,0x95,0x9c,0xa9,0xb3,0xb5,0xae,0xa2,0x97,0x93,0x9d,0xa9,
0xb3,0xb6,0xad,0xa1,0x97,0x96,0x9c,0xaa,0xb3,0xb4,0xab,0x9f,0x93,0x90,0x97,0xa5,
0xae,0xaf,0xa5,0x9a,0x93,0x93,0x9b,0xa7,0xb1,0xb5,0xb0,0xa7,0x9e,0x9a,0x9e,0xa4,
0xab,0xad,0xaa,0xa4,0x9f,0x9e,0xa3,0xa9,0xac,0xab,0xaa,0xa6,0xa2,0xa2,0xa3,0xa4,
0xa7,0xa8,0xa8,0xa7,0xa7,0xa7,0xa6,0xa4,0xa2,0xa2,0xa4,0xa8,0xa9,0xa8,0xa5,0xa4,
0xa5,0xa6,0xa7,0xa7,0xa6,0xa4,0xa2,0x9f,0x9f,0xa0,0xa4,0xa5,0xa4,0xa3,0xa2,0xa1,
0xa3,0xa3,0xa4,0xa6,0xa5,0xa4,0xa4,0xa4,0xa0,0x9e,0xa0,0xa4,0xa4,0xa4,0xa3,0xa3,
0xa8,0xaa,0xa8,0xa9,0xa8,0xa8,0xa9,0xa6,0xa3,0xa1,0xa2,0xa1,0xa0,0xa0,0xa1,0xa0,
0x9d,0x93,0x88,0x7e,0x72,0x67,0x5c,0x52,0x47,0x40,0x39,0x36,0x35,0x34,0x34,0x35,
0x37,0x39,0x37,0x35,0x34,0x32,0x33,0x34,0x35,0x37,0x39,0x3b,0x3b,0x39,0x39,0x3c,
0x3f,0x3d,0x3b,0x39,0x38,0x35,0x35,0x34,0x34,0x36,0x38,0x36,0x36,0x35,0x36,0x3b,
0x3b,0x3b,0x3a,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x35,0x33,0x34,0x35,0x37,0x38,
0x37,0x37,0x38,0x36,0x35,0x36,0x38,0x38,0x36,0x34,0x34,0x35,0x36,0x36,0x37,0x3a,
0x3a,0x38,0x3a,0x37,0x36,0x38,0x38,0x38,0x38,0x39,0x39,0x3b,0x3c,0x3c,0x39,0x39,
0x36,0x34,0x35,0x34,0x35,0x33,0x31,0x30,0x36,0x39,0x3c,0x3d,0x3b,0x38,0x35,0x33,
0x33,0x37,0x3b,0x3b,0x37,0x34,0x33,0x39,0x47,0x5c,0x75,0x8d,0x9d,0xa0,0x9c,0x92,
0x85,0x78,0x6d,0x63,0x57,0x48,0x39,0x2d,0x29,0x2b,0x30,0x37,0x3b,0x3b,0x39,0x34,
0x30,0x31,0x34,0x36,0x37,0x37,0x38,0x39,0x3b,0x39,0x38,0x38,0x36,0x34,0x34,0x33,
0x34,0x39,0x3b,0x3b,0x3a,0x38,0x37,0x39,0x3b,0x3c,0x3b,0x40,0x3f,0x3b,0x37,0x33,
0x32,0x35,0x3b,0x40,0x43,0x3f,0x39,0x36,0x38,0x3f,0x4d,0x57,0x59,0x52,0x46,0x3b,
0x3b,0x4b,0x60,0x72,0x76,0x69,0x54,0x46,0x47,0x5a,0x76,0x8c,0x90,0x7e,0x63,0x4e,
0x4d,0x63,0x82,0x9a,0x9f,0x8c,0x69,0x51,0x4d,0x65,0x89,0xa2,0xa4,0x8f,0x6d,0x54,
0x53,0x69,0x88,0x9f,0x9e,0x85,0x64,0x4d,0x4d,0x5f,0x75,0x83,0x7f,0x6d,0x53,0x42,
0x40,0x4b,0x5b,0x63,0x5d,0x50,0x43,0x3d,0x3d,0x43,0x4b,0x4f,0x4b,0x41,0x36,0x31,
0x33,0x35,0x38,0x38,0x38,0x36,0x36,0x37,0x38,0x35,0x39,0x39,0x38,0x36,0x36,0x36,
0x38,0x34,0x32,0x34,0x34,0x33,0x34,0x36,0x37,0x38,0x38,0x38,0x39,0x3b,0x3b,0x3b,
0x3c,0x3d,0x3c,0x3b,0x38,0x34,0x35,0x36,0x36,0x35,0x33,0x32,0x33,0x32,0x31,0x32,
0x35,0x38,0x38,0x37,0x38,0x38,0x39,0x39,0x37,0x38,0x38,0x39,0x39,0x37,0x36,0x37,
0x37,0x36,0x34,0x36,0x36,0x34,0x34,0x34,0x32,0x34,0x34,0x34,0x37,0x38,0x36,0x35,
0x34,0x34,0x36,0x37,0x38,0x38,0x38,0x39,0x38,0x3a,0x40,0x47,0x50,0x5a,0x66,0x75,
0x85,0x95,0xa2,0xac,0xb4,0xba,0xbe,0xc0,0xc2,0xc4,0xc3,0xc1,0xc0,0xbf,0xc1,0xc3,
0xc4,0xc3,0xc2,0xbf,0xbe,0xbb,0xba,0xba,0xbb,0xbb,0xba,0xb9,0xb9,0xba,0xbb,0xbb,
0xbc,0xbe,0xc0,0xbd,0xbb,0xbb,0xbd,0xbe,0xbf,0xbf,0xbe,0xbf,0xbf,0xbe,0xbd,0xc0,
0xbf,0xbe,0xbd,0xbc,0xba,0xbb,0xb9,0xb8,0xbb,0xbb,0xbb,0xba,0xbb,0xb9,0xb9,0xba,
0xbb,0xb8,0xb7,0xb7,0xb7,0xb8,0xb8,0xba,0xbc,0xba,0xb8,0xb9,0xba,0xba,0xbb,0xba,
0xbb,0xbb,0xbb,0xbb,0xbb,0xbd,0xbd,0xbd,0xbd,0xbd,0xbb,0xbc,0xbc,0xbb,0xbc,0xbe,
0xbf,0xbe,0xbd,0xbd,0xbd,0xbc,0xbc,0xbb,0xbd,0xbe,0xbe,0xbf,0xbf,0xc0,0xc2,0xc0,
0xbd,0xbe,0xbe,0xbe,0xbc,0xba,0xb9,0xb9,0xba,0xb9,0xb9,0xba,0xbb,0xba,0xbb,0xbc,
0xbd,0xbf,0xbf,0xbf,0xc0,0xbf,0xbe,0xbc,0xbb,0xba,0xba,0xbb,0xbb,0xba,0xb9,0xba,
0xba,0xbb,0xbd,0xbf,0xbf,0xbf,0xbc,0xbd,0xc0,0xc1,0xbf,0xbd,0xbd,0xbd,0xbd,0xbd,
0xbd,0xbd,0xbe,0xbd,0xbc,0xba,0xba,0xbd,0xbd,0xbb,0xbb,0xbb,0xbd,0xbb,0xb9,0xb8,
0xb9,0xbb,0xbb,0xba,0xb9,0xb8,0xb8,0xbb,0xbb,0xbb,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,
0xbe,0xbe,0xbd,0xbe,0xbd,0xbc,0xba,0xba,0xba,0xba,0xbb,0xbd,0xbe,0xbf,0xbe,0xbb,
0xbb,0xbc,0xbe,0xbd,0xbc,0xba,0xb9,0xb7,0xb5,0xb3,0xb5,0xb7,0xb8,0xba,0xba,0xba,
0xbc,0xbb,0xba,0xbb,0xbc,0xbe,0xbf,0xbe,0xbb,0xba,0xba,0xba,0xb9,0xb9,0xba,0xb8,
0xb8,0xb7,0xb8,0xbb,0xbc,0xbc,0xbd,0xbc,0xbb,0xba,0xbb,0xbb,0xbb,0xba,0xb9,0xb9,
0xb8,0xb8,0xb9,0xba,0xbb,0xba,0xba,0xba,0xbb,0xbc,0xbd,0xc0,0xc1,0xc0,0xbe,0xbe,
0xbd,0xbe,0xbd,0xbe,0xbf,0xbf,0xbf,0xbf,0xbe,0xbf,0xbf,0xbe,0xbe,0xbd,0xbd,0xbc,
0xba,0xba,0xbd,0xbf,0xbf,0xbf,0xbe,0xbe,0xbd,0xbb,0xba,0xb9,0xbb,0xba,0xba,0xbb,
0xbd,0xbf,0xc0,0xc0,0xbe,0xbe,0xbd,0xbd,0xb9,0xbb,0xba,0xba,0xba,0xb9,0xb9,0xba,
0xba,0xba,0xbb,0xbd,0xbe,0xbe,0xbd,0xbb,0xbb,0xbc,0xbd,0xbb,0xbb,0xba,0xb9,0xb8,
0xb7,0xb7,0xba,0xbc,0xbd,0xbc,0xbc,0xbd,0xc0,0xc0,0xbf,0xbf,0xc0,0xbf,0xbd,0xba,
0xb9,0xb9,0xb9,0xb8,0xb8,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc0,0xbe,0xbd,0xbc,
0xba,0xb6,0xb9,0xb9,0xba,0xba,0xb9,0xb8,0xb9,0xb9,0xba,0xba,0xbb,0xba,0xba,0xba,
0xb9,0xba,0xbc,0xbe,0xbe,0xbd,0xbc,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbb,0xba,0xba,
0xbb,0xbd,0xbe,0xbd,0xbd,0xbc,0xbd,0xbd,0xbd,0xbe,0xbd,0xbc,0xb8,0xb6,0xb5,0xb6,
0xb7,0xb8,0xb9,0xba,0xbb,0xbb,0xbb,0xbd,0xbf,0xc1,0xc1,0xc1,0xbe,0xbb,0xbb,0xbb,
0xba,0xba,0xba,0xba,0xbb,0xba,0xbb,0xbd,0xbe,0xbe,0xbf,0xbf,0xbf,0xbf,0xbd,0xbb,
0xbb,0xbb,0xbb,0xba,0xba,0xbb,0xbc,0xbb,0xbb,0xbd,0xc0,0xc0,0xbe,0xbd,0xbd,0xbd,
0xb8,0xba,0xba,0xba,0xbb,0xbb,0xb9,0xba,0xbb,0xbb,0xbb,0xbb,0xba,0xba,0xb9,0xb8,
0xb9,0xbb,0xbd,0xbd,0xbc,0xbd,0xbd,0xbf,0xbf,0xbe,0xbf,0xbf,0xbc,0xba,0xb8,0xba,
0xbb,0xbb,0xba,0xb9,0xb9,0xba,0xbb,0xba,0xb7,0xb6,0xb5,0xae,0xa5,0x9b,0x91,0x85,
0x77,0x68,0x5b,0x50,0x47,0x3e,0x37,0x35,0x36,0x37,0x38,0x38,0x39,0x39,0x39,0x37,
// Line 19
0x3b,0x3a,0x38,0x38,0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,0x39,0x37,0x36,0x38,0x3a,0x39,
0x38,0x37,0x38,0x3a,0x3c,0x3e,0x40,0x44,0x47,0x49,0x4d,0x52,0x58,0x5c,0x5f,0x60,
0x60,0x60,0x5e,0x5e,0x5e,0x5d,0x5c,0x5b,0x59,0x5a,0x5f,0x62,0x62,0x61,0x60,0x60,
0x60,0x61,0x61,0x5e,0x60,0x5e,0x5c,0x5f,0x62,0x63,0x65,0x64,0x64,0x64,0x65,0x64,
0x66,0x65,0x64,0x62,0x60,0x60,0x60,0x60,0x60,0x5e,0x5e,0x5f,0x60,0x62,0x61,0x60,
0x60,0x61,0x60,0x60,0x5f,0x60,0x63,0x64,0x64,0x63,0x64,0x63,0x60,0x60,0x62,0x62,
0x63,0x60,0x5e,0x5e,0x5d,0x5c,0x60,0x62,0x63,0x62,0x60,0x5e,0x5d,0x5c,0x5b,0x59,
0x59,0x5b,0x5c,0x5c,0x5c,0x5b,0x5d,0x60,0x62,0x62,0x62,0x62,0x62,0x60,0x5d,0x5d,
0x5f,0x60,0x62,0x62,0x60,0x5f,0x60,0x61,0x60,0x64,0x63,0x60,0x5e,0x5c,0x5e,0x60,
0x61,0x61,0x60,0x5f,0x5f,0x5d,0x5e,0x60,0x62,0x60,0x5e,0x5d,0x5d,0x5d,0x5e,0x5d,
0x5c,0x5c,0x5e,0x60,0x5f,0x5e,0x5c,0x5b,0x59,0x58,0x58,0x58,0x58,0x56,0x53,0x53,
0x53,0x55,0x56,0x5a,0x59,0x59,0x56,0x55,0x53,0x53,0x52,0x50,0x50,0x4f,0x4e,0x50,
0x4f,0x4e,0x50,0x51,0x50,0x4f,0x4f,0x4f,0x4e,0x4b,0x48,0x45,0x45,0x45,0x45,0x44,
0x43,0x41,0x40,0x3f,0x3d,0x3f,0x3f,0x3d,0x3a,0x36,0x35,0x35,0x37,0x37,0x35,0x34,
0x33,0x31,0x31,0x31,0x30,0x2f,0x2d,0x2b,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x32,0x33,
0x33,0x33,0x37,0x39,0x3a,0x3a,0x3c,0x40,0x43,0x44,0x46,0x4b,0x50,0x53,0x56,0x58,
0x5c,0x60,0x64,0x68,0x6a,0x70,0x74,0x77,0x7a,0x7e,0x82,0x89,0x87,0x88,0x8d,0x91,
0x94,0x95,0x96,0x97,0x99,0x9a,0x99,0x97,0x95,0x92,0x8f,0x89,0x84,0x7f,0x7c,0x77,
0x71,0x6c,0x69,0x65,0x60,0x59,0x51,0x4e,0x4b,0x47,0x41,0x39,0x33,0x2e,0x2b,0x29,
0x29,0x28,0x28,0x26,0x29,0x2c,0x32,0x3a,0x3f,0x46,0x4f,0x57,0x5e,0x64,0x6d,0x75,
0x7c,0x81,0x86,0x8b,0x94,0x96,0x95,0x96,0x95,0x93,0x8f,0x89,0x82,0x7b,0x74,0x6c,
0x64,0x5b,0x53,0x4c,0x46,0x41,0x3c,0x38,0x33,0x2e,0x2f,0x30,0x31,0x32,0x33,0x37,
0x3d,0x44,0x4b,0x55,0x60,0x6a,0x74,0x7e,0x85,0x89,0x92,0x94,0x93,0x91,0x8d,0x87,
0x80,0x74,0x69,0x60,0x59,0x52,0x4a,0x41,0x3a,0x34,0x31,0x2f,0x2e,0x2f,0x33,0x39,
0x41,0x47,0x50,0x5c,0x67,0x73,0x80,0x8c,0x95,0x97,0x96,0x93,0x8d,0x85,0x7a,0x71,
0x67,0x5a,0x4c,0x41,0x39,0x34,0x34,0x32,0x31,0x35,0x3a,0x41,0x48,0x53,0x60,0x6d,
0x7b,0x85,0x8a,0x91,0x92,0x8d,0x87,0x7e,0x74,0x69,0x5c,0x4f,0x46,0x3f,0x3a,0x36,
0x34,0x37,0x3c,0x44,0x4e,0x59,0x68,0x75,0x7e,0x86,0x8b,0x8d,0x89,0x81,0x76,0x6c,
0x62,0x55,0x47,0x3d,0x35,0x33,0x33,0x36,0x3c,0x44,0x51,0x5e,0x6d,0x7a,0x85,0x8d,
0x8f,0x8b,0x84,0x78,0x6c,0x5f,0x53,0x47,0x3e,0x36,0x32,0x31,0x37,0x41,0x4e,0x5f,
0x6f,0x7c,0x87,0x89,0x86,0x83,0x7d,0x74,0x65,0x5a,0x4c,0x41,0x38,0x32,0x2f,0x39,
0x42,0x4f,0x5f,0x70,0x7e,0x88,0x8a,0x84,0x7a,0x6f,0x64,0x58,0x4c,0x41,0x37,0x33,
0x33,0x39,0x47,0x58,0x6c,0x7d,0x87,0x8c,0x8a,0x82,0x76,0x6b,0x5e,0x52,0x45,0x3b,
0x34,0x35,0x3e,0x4b,0x5c,0x6f,0x80,0x89,0x8b,0x84,0x79,0x6b,0x5b,0x4c,0x41,0x38,
0x33,0x31,0x38,0x47,0x5b,0x71,0x81,0x89,0x8d,0x85,0x77,0x69,0x5b,0x4f,0x44,0x3b,
0x37,0x3b,0x47,0x58,0x6b,0x79,0x82,0x83,0x7f,0x74,0x67,0x59,0x4b,0x40,0x39,0x38,
0x40,0x4e,0x60,0x71,0x80,0x87,0x85,0x7a,0x6c,0x5c,0x4f,0x43,0x3a,0x37,0x3e,0x48,
0x58,0x6d,0x7d,0x87,0x89,0x80,0x6f,0x5f,0x50,0x44,0x3d,0x3a,0x40,0x4b,0x5f,0x71,
0x7e,0x85,0x83,0x7a,0x6b,0x59,0x4b,0x41,0x3e,0x41,0x4b,0x58,0x68,0x76,0x7f,0x80,
0x78,0x69,0x58,0x4b,0x43,0x40,0x42,0x4c,0x5b,0x6b,0x76,0x7d,0x7b,0x74,0x69,0x5c,
0x4f,0x47,0x45,0x4d,0x59,0x64,0x6d,0x75,0x77,0x72,0x68,0x5b,0x50,0x4b,0x4b,0x51,
0x5a,0x65,0x71,0x77,0x76,0x6f,0x66,0x5c,0x53,0x4c,0x4c,0x53,0x5d,0x69,0x72,0x78,
0x76,0x6c,0x5f,0x54,0x4c,0x49,0x4a,0x56,0x60,0x68,0x6f,0x70,0x6b,0x65,0x5f,0x55,
0x4f,0x4e,0x54,0x5e,0x65,0x6a,0x6c,0x6b,0x65,0x5c,0x53,0x4c,0x4c,0x53,0x5a,0x60,
0x66,0x68,0x67,0x63,0x5d,0x59,0x58,0x5a,0x5d,0x64,0x69,0x6d,0x6c,0x65,0x5d,0x59,
0x58,0x59,0x5c,0x64,0x69,0x6b,0x69,0x65,0x60,0x5e,0x5c,0x5b,0x5d,0x62,0x66,0x68,
0x65,0x5d,0x56,0x53,0x54,0x59,0x62,0x69,0x6d,0x6f,0x68,0x60,0x58,0x53,0x53,0x58,
0x61,0x6a,0x6d,0x6b,0x63,0x5a,0x53,0x4f,0x52,0x5d,0x69,0x72,0x75,0x6d,0x61,0x55,
0x4b,0x48,0x50,0x5f,0x6e,0x76,0x71,0x65,0x56,0x4b,0x44,0x48,0x58,0x6b,0x79,0x7e,
0x74,0x63,0x51,0x45,0x44,0x51,0x65,0x76,0x7c,0x75,0x64,0x50,0x41,0x3e,0x47,0x5b,
0x6f,0x7c,0x7a,0x6a,0x54,0x44,0x41,0x49,0x5d,0x75,0x85,0x80,0x6f,0x53,0x3f,0x3b,
0x49,0x5f,0x77,0x82,0x7d,0x6c,0x53,0x3f,0x3c,0x4b,0x60,0x77,0x81,0x7b,0x64,0x4a,
0x37,0x38,0x4b,0x68,0x7d,0x86,0x7a,0x60,0x45,0x35,0x3f,0x5c,0x7a,0x89,0x86,0x6e,
0x51,0x3b,0x3a,0x4c,0x6b,0x84,0x8a,0x79,0x59,0x3d,0x32,0x41,0x5d,0x79,0x87,0x80,
0x66,0x48,0x37,0x3e,0x56,0x74,0x84,0x81,0x6c,0x4f,0x38,0x3c,0x53,0x71,0x88,0x87,
0x70,0x53,0x3e,0x3b,0x4f,0x6d,0x83,0x83,0x6d,0x4f,0x3a,0x3b,0x52,0x6f,0x83,0x80,
0x69,0x4e,0x3e,0x42,0x58,0x72,0x80,0x7b,0x63,0x47,0x3b,0x44,0x5d,0x78,0x84,0x7b,
0x63,0x4b,0x43,0x50,0x6b,0x7e,0x80,0x6e,0x54,0x40,0x41,0x54,0x6f,0x80,0x7d,0x65,
0x4b,0x41,0x4c,0x62,0x79,0x7b,0x6e,0x58,0x45,0x44,0x55,0x6d,0x7b,0x76,0x61,0x4e,
0x47,0x53,0x68,0x79,0x7b,0x6d,0x58,0x4b,0x4e,0x5f,0x74,0x7b,0x70,0x5c,0x4c,0x4b,
0x58,0x69,0x75,0x71,0x62,0x51,0x4d,0x58,0x6a,0x76,0x76,0x67,0x55,0x4d,0x53,0x60,
0x6d,0x71,0x66,0x58,0x4f,0x52,0x60,0x6d,0x6f,0x67,0x5b,0x53,0x53,0x5c,0x68,0x6d,
0x6a,0x5e,0x54,0x54,0x5d,0x69,0x6e,0x68,0x5e,0x55,0x59,0x60,0x6b,0x70,0x6d,0x62,
0x5a,0x58,0x5d,0x68,0x6d,0x6a,0x61,0x59,0x57,0x5c,0x64,0x6b,0x6a,0x64,0x5d,0x5a,
0x5e,0x65,0x6a,0x6a,0x63,0x5c,0x5c,0x5f,0x64,0x67,0x65,0x60,0x5c,0x5b,0x5f,0x64,
0x67,0x64,0x60,0x5e,0x5e,0x62,0x65,0x64,0x62,0x60,0x5e,0x5d,0x61,0x65,0x67,0x67,
0x63,0x5f,0x5d,0x63,0x65,0x65,0x63,0x60,0x5c,0x5e,0x5f,0x60,0x63,0x62,0x5f,0x5f,
0x60,0x61,0x64,0x64,0x64,0x62,0x62,0x60,0x60,0x62,0x64,0x65,0x63,0x60,0x5f,0x63,
0x65,0x63,0x61,0x60,0x60,0x62,0x62,0x63,0x63,0x64,0x64,0x64,0x64,0x66,0x66,0x69,
0x65,0x62,0x63,0x62,0x61,0x60,0x61,0x60,0x61,0x60,0x60,0x60,0x62,0x64,0x63,0x64,
0x64,0x64,0x64,0x61,0x60,0x63,0x64,0x64,0x63,0x62,0x61,0x62,0x62,0x60,0x61,0x61,
0x60,0x5f,0x5f,0x60,0x61,0x63,0x64,0x63,0x64,0x64,0x63,0x61,0x5f,0x5d,0x5d,0x5e,
0x5f,0x5f,0x60,0x60,0x60,0x60,0x62,0x64,0x64,0x62,0x61,0x64,0x63,0x60,0x60,0x60,
0x60,0x60,0x62,0x63,0x63,0x63,0x62,0x61,0x60,0x61,0x63,0x64,0x63,0x60,0x60,0x60,
0x5f,0x5e,0x5d,0x5e,0x5f,0x5e,0x5e,0x5f,0x60,0x60,0x60,0x62,0x63,0x65,0x67,0x65,
0x63,0x61,0x61,0x62,0x64,0x63,0x62,0x62,0x60,0x5e,0x5e,0x60,0x61,0x62,0x63,0x61,
0x5f,0x5f,0x5f,0x5f,0x63,0x64,0x63,0x62,0x60,0x60,0x61,0x62,0x61,0x5e,0x60,0x60,
0x60,0x62,0x64,0x65,0x68,0x63,0x62,0x64,0x66,0x67,0x65,0x64,0x63,0x62,0x60,0x60,
0x60,0x60,0x60,0x5e,0x5d,0x5c,0x5e,0x61,0x60,0x5f,0x60,0x62,0x64,0x63,0x61,0x62,
0x63,0x63,0x61,0x60,0x60,0x5e,0x5d,0x5d,0x5f,0x61,0x64,0x61,0x5f,0x5f,0x60,0x61,
0x63,0x65,0x65,0x64,0x61,0x5e,0x5d,0x5e,0x5e,0x5d,0x5d,0x5c,0x5c,0x5e,0x60,0x60,
0x63,0x65,0x65,0x65,0x63,0x62,0x64,0x64,0x63,0x63,0x63,0x62,0x60,0x60,0x60,0x61,
0x61,0x61,0x61,0x61,0x62,0x62,0x63,0x63,0x63,0x65,0x65,0x64,0x62,0x60,0x60,0x60,
0x5e,0x5e,0x5e,0x60,0x60,0x5e,0x5f,0x60,0x60,0x62,0x62,0x62,0x64,0x64,0x63,0x63,
0x63,0x62,0x60,0x60,0x60,0x5f,0x5e,0x5d,0x5c,0x5d,0x5e,0x5f,0x60,0x5f,0x5f,0x62,
0x64,0x64,0x62,0x60,0x60,0x5e,0x5d,0x5f,0x60,0x62,0x62,0x60,0x60,0x62,0x62,0x64,
0x63,0x63,0x64,0x64,0x62,0x5e,0x5f,0x60,0x60,0x5f,0x5e,0x5f,0x61,0x62,0x62,0x64,
0x65,0x65,0x64,0x63,0x62,0x63,0x65,0x65,0x63,0x60,0x60,0x60,0x60,0x61,0x62,0x63,
0x62,0x5f,0x5e,0x5c,0x5b,0x5c,0x5c,0x5d,0x60,0x60,0x60,0x5d,0x5e,0x5d,0x5e,0x5f,
0x5d,0x58,0x55,0x4e,0x45,0x40,0x3d,0x3c,0x3d,0x3b,0x38,0x37,0x38,0x38,0x36,0x35,
0x35,0x37,0x37,0x35,0x33,0x33,0x34,0x34,0x35,0x35,0x37,0x3a,0x39,0x37,0x36,0x36,
0x35,0x34,0x34,0x35,0x37,0x36,0x34,0x33,0x35,0x35,0x35,0x36,0x38,0x39,0x3a,0x38,
0x35,0x36,0x38,0x37,0x35,0x33,0x33,0x34,0x34,0x33,0x32,0x33,0x34,0x33,0x34,0x34,
0x35,0x37,0x36,0x36,0x38,0x3a,0x3b,0x3c,0x3c,0x3a,0x3b,0x3a,0x38,0x35,0x34,0x33,
0x33,0x34,0x34,0x36,0x39,0x38,0x37,0x37,0x38,0x38,0x37,0x37,0x36,0x36,0x38,0x38,
0x35,0x35,0x35,0x34,0x34,0x35,0x35,0x35,0x34,0x32,0x33,0x36,0x38,0x38,0x3a,0x3a,
// Line 20
0x38,0x36,0x36,0x37,0x38,0x39,0x3b,0x3e,0x3f,0x3c,0x3a,0x3b,0x3d,0x3b,0x36,0x33,
0x32,0x33,0x32,0x31,0x32,0x33,0x35,0x35,0x36,0x37,0x3b,0x42,0x47,0x4d,0x56,0x61,
0x6d,0x7d,0x8c,0x9b,0xa7,0xb0,0xb7,0xbd,0xc2,0xc4,0xc4,0xc3,0xc1,0xbf,0xbe,0xbc,
0xbc,0xbf,0xc0,0xbf,0xbf,0xbd,0xbe,0xbe,0xbe,0xbc,0xbd,0xbd,0xbc,0xb9,0xb9,0xb9,
0xba,0xbc,0xbb,0xba,0xba,0xba,0xba,0xbb,0xbd,0xbe,0xbf,0xbc,0xba,0xba,0xbc,0xbe,
0xbf,0xbe,0xbd,0xbc,0xbd,0xbc,0xbc,0xbf,0xc1,0xc1,0xbf,0xbc,0xbc,0xbb,0xbb,0xbc,
0xbd,0xbe,0xbd,0xba,0xb8,0xb7,0xb7,0xba,0xbc,0xbb,0xbc,0xbc,0xbb,0xbc,0xbc,0xbd,
0xbf,0xbf,0xbc,0xba,0xba,0xba,0xbb,0xba,0xbc,0xbc,0xbe,0xbe,0xbd,0xbe,0xbe,0xbd,
0xbe,0xbd,0xbd,0xbd,0xba,0xb8,0xb8,0xb9,0xb9,0xba,0xba,0xbb,0xbb,0xbc,0xbd,0xbe,
0xbe,0xbf,0xbf,0xbf,0xbd,0xbd,0xbb,0xbd,0xbb,0xba,0xba,0xbc,0xbc,0xbd,0xbd,0xbe,
0xc0,0xbf,0xbe,0xbd,0xbc,0xbb,0xbc,0xbd,0xbd,0xbd,0xbd,0xbc,0xbd,0xbd,0xbd,0xbd,
0xbd,0xbb,0xba,0xbc,0xbc,0xbb,0xba,0xbc,0xbf,0xc1,0xc1,0xc1,0xc2,0xbf,0xbc,0xba,
0xb9,0xba,0xba,0xb9,0xb7,0xb4,0xb2,0xae,0xa8,0xa2,0x9c,0x95,0x8e,0x85,0x7f,0x7b,
0x76,0x72,0x6e,0x6d,0x6e,0x6f,0x6e,0x6e,0x6f,0x72,0x74,0x72,0x71,0x72,0x73,0x74,
0x74,0x73,0x72,0x72,0x70,0x6d,0x6d,0x70,0x72,0x72,0x71,0x70,0x72,0x71,0x70,0x70,
0x71,0x73,0x73,0x72,0x70,0x6e,0x70,0x6e,0x6d,0x6c,0x6d,0x6c,0x6d,0x6d,0x6c,0x6d,
0x6e,0x6d,0x71,0x73,0x74,0x75,0x74,0x74,0x74,0x75,0x74,0x74,0x78,0x7c,0x80,0x84,
0x87,0x8a,0x8f,0x92,0x95,0x95,0x98,0x99,0x98,0x95,0x93,0x92,0x91,0x8c,0x88,0x84,
0x81,0x7d,0x78,0x72,0x6e,0x6b,0x68,0x64,0x60,0x5c,0x5b,0x5a,0x55,0x4e,0x4b,0x4a,
0x49,0x46,0x44,0x44,0x46,0x47,0x47,0x48,0x4d,0x50,0x53,0x56,0x5a,0x5d,0x62,0x66,
0x6b,0x70,0x75,0x7a,0x80,0x84,0x88,0x8b,0x8f,0x91,0x95,0x9a,0x9c,0x9d,0x9c,0x9a,
0x99,0x9a,0x99,0x96,0x94,0x90,0x8a,0x86,0x82,0x81,0x7d,0x7b,0x76,0x70,0x6c,0x68,
0x63,0x61,0x5d,0x5b,0x59,0x54,0x50,0x4e,0x4f,0x4c,0x49,0x48,0x49,0x45,0x48,0x47,
0x48,0x4b,0x4e,0x52,0x58,0x5b,0x5f,0x65,0x69,0x6c,0x70,0x74,0x78,0x7b,0x80,0x84,
0x89,0x8d,0x90,0x94,0x98,0x99,0x9a,0x9b,0x9a,0x99,0x9a,0x98,0x95,0x93,0x91,0x8f,
0x8b,0x88,0x87,0x83,0x7d,0x76,0x70,0x6d,0x67,0x61,0x60,0x5a,0x58,0x57,0x56,0x53,
0x51,0x4e,0x4b,0x4a,0x49,0x49,0x4a,0x4a,0x48,0x49,0x4c,0x50,0x53,0x57,0x5b,0x5f,
0x64,0x68,0x6c,0x70,0x75,0x7a,0x7e,0x83,0x89,0x8c,0x8f,0x91,0x90,0x91,0x94,0x97,
0x9a,0x99,0x9a,0x9c,0x9c,0x9a,0x99,0x96,0x92,0x8f,0x8a,0x86,0x81,0x7b,0x76,0x70,
0x6d,0x67,0x64,0x61,0x60,0x5d,0x5b,0x57,0x53,0x53,0x53,0x50,0x4e,0x4c,0x4b,0x49,
0x49,0x47,0x49,0x50,0x55,0x5a,0x5f,0x64,0x68,0x6e,0x70,0x71,0x72,0x72,0x72,0x72,
0x70,0x70,0x72,0x71,0x70,0x6f,0x70,0x70,0x70,0x70,0x70,0x70,0x72,0x72,0x70,0x71,
0x71,0x70,0x70,0x70,0x72,0x72,0x72,0x72,0x70,0x70,0x6f,0x6e,0x6d,0x6d,0x6d,0x6e,
0x6f,0x6f,0x70,0x70,0x72,0x74,0x74,0x74,0x72,0x72,0x71,0x72,0x73,0x74,0x74,0x77,
0x74,0x73,0x74,0x73,0x72,0x72,0x72,0x6f,0x6d,0x6b,0x6c,0x6d,0x70,0x71,0x70,0x72,
0x72,0x70,0x70,0x6b,0x66,0x64,0x60,0x5b,0x56,0x53,0x50,0x53,0x57,0x5d,0x64,0x6d,
0x77,0x81,0x8b,0x91,0x95,0x94,0x8f,0x89,0x81,0x77,0x6d,0x62,0x5a,0x53,0x4d,0x49,
0x46,0x49,0x52,0x57,0x5c,0x65,0x70,0x7d,0x87,0x8b,0x8f,0x91,0x92,0x90,0x89,0x80,
0x75,0x6d,0x66,0x5d,0x52,0x4d,0x4a,0x4a,0x4d,0x4e,0x52,0x5a,0x64,0x6e,0x79,0x81,
0x89,0x8c,0x90,0x8e,0x89,0x83,0x7d,0x76,0x6e,0x63,0x59,0x53,0x4e,0x4d,0x4d,0x4e,
0x50,0x56,0x5e,0x66,0x6d,0x76,0x82,0x8e,0x93,0x92,0x8c,0x8b,0x85,0x7d,0x74,0x6c,
0x62,0x5c,0x53,0x4b,0x4b,0x4d,0x50,0x53,0x57,0x5c,0x66,0x70,0x7b,0x84,0x8c,0x8f,
0x90,0x8f,0x8e,0x8b,0x84,0x79,0x6c,0x60,0x54,0x4e,0x4a,0x4a,0x4d,0x50,0x52,0x53,
0x58,0x64,0x72,0x7f,0x8a,0x91,0x94,0x93,0x8d,0x87,0x82,0x7d,0x76,0x6b,0x5f,0x56,
0x4f,0x4b,0x49,0x4a,0x4f,0x54,0x5a,0x61,0x68,0x72,0x7d,0x83,0x85,0x89,0x8a,0x87,
0x7f,0x79,0x73,0x70,0x6e,0x6b,0x67,0x6c,0x6d,0x6d,0x6e,0x70,0x71,0x72,0x71,0x6f,
0x6e,0x6f,0x70,0x6e,0x6d,0x6d,0x70,0x70,0x6f,0x6d,0x6d,0x6d,0x6b,0x6b,0x6b,0x6d,
0x6f,0x6f,0x6e,0x70,0x70,0x72,0x70,0x6f,0x6f,0x70,0x72,0x70,0x6e,0x6f,0x6d,0x6c,
0x6d,0x6e,0x6e,0x72,0x72,0x70,0x6e,0x6e,0x70,0x70,0x70,0x70,0x71,0x72,0x70,0x70,
0x72,0x72,0x70,0x70,0x70,0x6e,0x6b,0x66,0x64,0x65,0x6b,0x72,0x77,0x7d,0x83,0x86,
0x83,0x7b,0x72,0x6b,0x64,0x5c,0x56,0x53,0x55,0x5e,0x69,0x73,0x7e,0x87,0x8a,0x87,
0x7d,0x6e,0x63,0x59,0x53,0x4f,0x53,0x59,0x64,0x71,0x7f,0x89,0x8c,0x89,0x81,0x78,
0x6d,0x61,0x55,0x4d,0x4b,0x52,0x5e,0x6c,0x79,0x88,0x8e,0x8b,0x83,0x79,0x70,0x67,
0x5e,0x56,0x52,0x53,0x5b,0x65,0x75,0x81,0x8a,0x8c,0x87,0x7b,0x72,0x64,0x5b,0x54,
0x50,0x51,0x59,0x65,0x70,0x7e,0x88,0x8f,0x8b,0x83,0x77,0x6c,0x60,0x56,0x50,0x51,
0x55,0x5f,0x6d,0x7a,0x84,0x8b,0x8b,0x84,0x7a,0x6f,0x64,0x59,0x50,0x4b,0x50,0x5b,
0x69,0x75,0x85,0x8b,0x8b,0x87,0x7e,0x74,0x6f,0x67,0x61,0x5e,0x5c,0x5e,0x63,0x6a,
0x6f,0x75,0x79,0x79,0x76,0x72,0x6e,0x6d,0x6d,0x6b,0x6c,0x6e,0x70,0x6f,0x70,0x72,
0x74,0x73,0x70,0x6d,0x6d,0x6e,0x6e,0x6d,0x6f,0x6e,0x6e,0x70,0x6f,0x6f,0x72,0x71,
0x6e,0x6e,0x6f,0x70,0x70,0x70,0x6f,0x6e,0x6e,0x6e,0x6f,0x72,0x74,0x76,0x74,0x6e,
0x6b,0x69,0x6d,0x72,0x78,0x7a,0x77,0x6e,0x61,0x59,0x5b,0x65,0x72,0x7c,0x80,0x7c,
0x70,0x63,0x59,0x59,0x61,0x6d,0x77,0x7d,0x7b,0x72,0x66,0x60,0x5e,0x66,0x72,0x7f,
0x81,0x81,0x75,0x69,0x61,0x5c,0x5f,0x6a,0x76,0x7d,0x7d,0x75,0x6c,0x62,0x5c,0x5a,
0x61,0x70,0x7d,0x81,0x7f,0x78,0x6e,0x66,0x60,0x60,0x69,0x74,0x7b,0x7d,0x76,0x6d,
0x61,0x57,0x56,0x5f,0x6e,0x7b,0x81,0x7f,0x77,0x6b,0x60,0x58,0x5b,0x66,0x73,0x7b,
0x7d,0x78,0x72,0x69,0x61,0x5d,0x64,0x70,0x7c,0x81,0x7f,0x78,0x6e,0x62,0x5a,0x59,
0x65,0x74,0x7e,0x81,0x7d,0x72,0x66,0x5d,0x5d,0x66,0x72,0x7c,0x7a,0x75,0x6d,0x65,
0x66,0x6b,0x73,0x7b,0x7e,0x7a,0x72,0x6b,0x68,0x67,0x6b,0x6d,0x70,0x74,0x76,0x74,
0x74,0x72,0x70,0x6f,0x6c,0x6b,0x6e,0x6e,0x6f,0x70,0x70,0x72,0x72,0x70,0x6f,0x70,
0x74,0x76,0x75,0x73,0x72,0x6f,0x6f,0x6d,0x6c,0x6c,0x6d,0x6d,0x6d,0x6c,0x6e,0x72,
0x72,0x72,0x72,0x74,0x74,0x72,0x72,0x71,0x72,0x75,0x74,0x71,0x6f,0x6c,0x6b,0x6d,
0x70,0x76,0x78,0x76,0x6d,0x65,0x64,0x6a,0x74,0x7f,0x83,0x7f,0x74,0x65,0x5b,0x5e,
0x6d,0x7d,0x86,0x7f,0x6f,0x5e,0x53,0x57,0x6a,0x81,0x8e,0x87,0x72,0x5c,0x51,0x5c,
0x71,0x86,0x91,0x8c,0x77,0x5e,0x50,0x59,0x6e,0x83,0x8b,0x83,0x6e,0x5a,0x4e,0x59,
0x6c,0x81,0x8f,0x89,0x73,0x5f,0x52,0x59,0x6d,0x83,0x8e,0x87,0x73,0x5c,0x50,0x56,
0x6b,0x81,0x8d,0x87,0x73,0x5d,0x51,0x57,0x6c,0x81,0x8e,0x88,0x72,0x5b,0x50,0x57,
0x6a,0x80,0x8b,0x86,0x6e,0x5a,0x50,0x57,0x6d,0x81,0x8a,0x86,0x71,0x5d,0x53,0x5b,
0x6e,0x81,0x89,0x83,0x72,0x61,0x5b,0x61,0x6d,0x7b,0x83,0x81,0x77,0x6c,0x66,0x69,
0x70,0x77,0x78,0x74,0x70,0x6b,0x69,0x6b,0x6f,0x72,0x74,0x72,0x70,0x6f,0x71,0x72,
0x70,0x6f,0x6d,0x6d,0x6e,0x6e,0x6e,0x6d,0x6d,0x6b,0x6a,0x6d,0x70,0x71,0x73,0x70,
0x6e,0x6e,0x6f,0x6f,0x6e,0x6d,0x6d,0x6d,0x6d,0x6d,0x6e,0x70,0x6f,0x6f,0x71,0x73,
0x74,0x72,0x70,0x6f,0x6f,0x6f,0x71,0x73,0x74,0x72,0x6f,0x6c,0x6c,0x70,0x76,0x78,
0x74,0x6f,0x6b,0x67,0x6c,0x70,0x76,0x7a,0x76,0x6d,0x65,0x64,0x6a,0x74,0x79,0x77,
0x70,0x67,0x62,0x66,0x6e,0x79,0x7d,0x77,0x6d,0x64,0x66,0x6e,0x76,0x7a,0x76,0x6d,
0x66,0x65,0x6c,0x75,0x7b,0x78,0x71,0x69,0x67,0x6c,0x76,0x7a,0x78,0x72,0x6b,0x65,
0x6a,0x72,0x77,0x77,0x70,0x68,0x66,0x6c,0x73,0x78,0x77,0x72,0x69,0x66,0x69,0x71,
0x79,0x78,0x6e,0x64,0x60,0x64,0x70,0x77,0x76,0x6f,0x66,0x63,0x68,0x71,0x7b,0x7d,
0x74,0x68,0x63,0x69,0x74,0x7a,0x79,0x70,0x64,0x61,0x65,0x71,0x7d,0x7d,0x73,0x66,
0x5f,0x62,0x6f,0x7b,0x7e,0x76,0x69,0x5e,0x5e,0x67,0x74,0x7b,0x78,0x6d,0x62,0x60,
0x66,0x70,0x78,0x79,0x72,0x6c,0x68,0x6b,0x6f,0x74,0x75,0x72,0x6d,0x6a,0x6c,0x71,
0x74,0x73,0x6f,0x6c,0x6a,0x6d,0x70,0x73,0x72,0x6f,0x6d,0x6d,0x70,0x72,0x72,0x72,
0x6e,0x6c,0x6d,0x70,0x73,0x75,0x74,0x70,0x6f,0x6d,0x6f,0x70,0x70,0x6d,0x6a,0x6a,
0x6c,0x6e,0x70,0x70,0x6d,0x6e,0x6e,0x6e,0x6e,0x6e,0x6e,0x6c,0x69,0x6a,0x6c,0x6e,
0x6d,0x6c,0x6c,0x6d,0x6d,0x6d,0x6d,0x70,0x73,0x72,0x70,0x70,0x72,0x74,0x74,0x72,
0x70,0x6d,0x6e,0x6e,0x6d,0x6e,0x6e,0x6d,0x6f,0x6d,0x6c,0x6f,0x70,0x6f,0x6a,0x63,
0x5c,0x56,0x50,0x4b,0x45,0x40,0x3b,0x37,0x34,0x33,0x35,0x36,0x38,0x39,0x3b,0x3a,
// Line 21
0x3a,0x3c,0x3d,0x3c,0x3b,0x3a,0x38,0x37,0x36,0x37,0x39,0x3a,0x39,0x38,0x3a,0x3c,
0x3a,0x38,0x38,0x38,0x39,0x38,0x34,0x31,0x32,0x33,0x35,0x34,0x35,0x35,0x36,0x39,
0x3a,0x3b,0x3c,0x3c,0x3a,0x39,0x39,0x3a,0x3b,0x3a,0x3a,0x3c,0x3d,0x3d,0x3c,0x43,
0x45,0x45,0x46,0x47,0x4a,0x50,0x51,0x4f,0x51,0x53,0x55,0x58,0x5a,0x5d,0x61,0x65,
0x66,0x66,0x66,0x67,0x69,0x6a,0x6a,0x68,0x66,0x64,0x61,0x61,0x60,0x5e,0x5e,0x5a,
0x58,0x55,0x51,0x4e,0x4a,0x48,0x47,0x46,0x45,0x43,0x40,0x3e,0x3b,0x38,0x39,0x3c,
0x3e,0x3f,0x3d,0x3b,0x3b,0x3d,0x42,0x45,0x48,0x49,0x4a,0x4c,0x4c,0x4e,0x51,0x54,
0x56,0x58,0x59,0x5c,0x5e,0x5e,0x5e,0x60,0x62,0x64,0x64,0x67,0x69,0x6a,0x6a,0x68,
0x67,0x6a,0x6b,0x68,0x67,0x64,0x61,0x60,0x5b,0x57,0x57,0x56,0x55,0x51,0x4e,0x4c,
0x4a,0x47,0x44,0x41,0x40,0x40,0x3f,0x3e,0x3d,0x3d,0x3e,0x3d,0x3d,0x3e,0x42,0x44,
0x45,0x45,0x46,0x49,0x4c,0x4e,0x51,0x55,0x58,0x59,0x5d,0x5e,0x60,0x61,0x61,0x60,
0x63,0x66,0x68,0x69,0x6a,0x69,0x6a,0x6a,0x69,0x67,0x6b,0x6a,0x64,0x5f,0x5d,0x5d,
0x5c,0x59,0x55,0x53,0x4f,0x4c,0x49,0x46,0x45,0x45,0x45,0x42,0x3f,0x3e,0x3e,0x3e,
0x3e,0x3d,0x3d,0x3c,0x39,0x38,0x39,0x3d,0x3f,0x41,0x43,0x46,0x4a,0x4c,0x4c,0x4e,
0x51,0x54,0x54,0x57,0x59,0x5d,0x60,0x61,0x61,0x64,0x67,0x6a,0x69,0x67,0x67,0x69,
0x69,0x67,0x66,0x67,0x67,0x64,0x64,0x61,0x5f,0x5e,0x5b,0x57,0x55,0x54,0x53,0x4e,
0x4a,0x46,0x45,0x45,0x41,0x3e,0x40,0x41,0x3d,0x3b,0x3a,0x3c,0x3e,0x41,0x40,0x40,
0x40,0x3f,0x40,0x41,0x44,0x47,0x4b,0x4c,0x4d,0x4e,0x50,0x53,0x57,0x5a,0x5d,0x63,
0x64,0x64,0x64,0x67,0x6a,0x6a,0x67,0x66,0x69,0x6b,0x68,0x64,0x61,0x62,0x63,0x61,
0x5e,0x5b,0x5b,0x5a,0x56,0x54,0x51,0x51,0x50,0x4e,0x49,0x44,0x43,0x41,0x40,0x40,
0x3e,0x3c,0x3c,0x3a,0x3a,0x3a,0x3a,0x3b,0x3e,0x40,0x40,0x40,0x3f,0x3f,0x42,0x48,
0x4c,0x4f,0x50,0x51,0x52,0x54,0x57,0x5d,0x63,0x64,0x63,0x64,0x64,0x64,0x66,0x69,
0x6a,0x6a,0x68,0x66,0x63,0x64,0x64,0x66,0x66,0x62,0x5e,0x5c,0x5a,0x58,0x57,0x55,
0x53,0x4e,0x48,0x43,0x40,0x40,0x42,0x43,0x42,0x3f,0x3c,0x3c,0x3b,0x3c,0x3f,0x40,
0x3d,0x3d,0x3f,0x41,0x41,0x43,0x46,0x4b,0x4f,0x4f,0x4e,0x52,0x54,0x55,0x5a,0x5c,
0x5e,0x61,0x61,0x61,0x64,0x66,0x69,0x68,0x6a,0x68,0x67,0x67,0x67,0x66,0x65,0x65,
0x64,0x61,0x5e,0x5b,0x5b,0x5a,0x58,0x55,0x52,0x51,0x4c,0x47,0x45,0x44,0x45,0x43,
0x40,0x3d,0x3b,0x3a,0x3b,0x3c,0x3d,0x3f,0x3e,0x3c,0x3a,0x3b,0x3c,0x39,0x3c,0x3a,
0x37,0x36,0x36,0x36,0x3a,0x3a,0x39,0x3c,0x3c,0x3b,0x3c,0x3d,0x3c,0x3d,0x3d,0x3e,
0x3d,0x3d,0x3c,0x3a,0x3a,0x3a,0x39,0x3a,0x3a,0x3a,0x3b,0x38,0x38,0x3a,0x3c,0x3c,
0x3d,0x3d,0x3d,0x3b,0x38,0x37,0x38,0x3b,0x3c,0x3a,0x39,0x38,0x38,0x39,0x3a,0x3b,
0x3d,0x3d,0x3c,0x3c,0x3d,0x3d,0x40,0x40,0x3f,0x3d,0x3c,0x3b,0x39,0x38,0x36,0x36,
0x38,0x37,0x35,0x34,0x34,0x35,0x38,0x3a,0x3d,0x3d,0x3e,0x3c,0x3c,0x3c,0x3e,0x3e,
0x3e,0x3d,0x3a,0x39,0x38,0x3a,0x41,0x47,0x4a,0x4e,0x53,0x58,0x5b,0x60,0x62,0x67,
0x6b,0x6c,0x69,0x69,0x68,0x69,0x6c,0x6d,0x6d,0x6d,0x6c,0x6a,0x6a,0x6a,0x6a,0x6c,
0x6b,0x6a,0x6a,0x6b,0x6a,0x67,0x69,0x6a,0x6d,0x6d,0x6a,0x69,0x69,0x6a,0x6a,0x6a,
0x69,0x6a,0x68,0x68,0x67,0x68,0x6c,0x6e,0x6d,0x6c,0x6a,0x6a,0x69,0x66,0x61,0x5f,
0x5b,0x55,0x4e,0x47,0x43,0x41,0x3f,0x3c,0x3a,0x38,0x38,0x38,0x38,0x39,0x38,0x3b,
0x3c,0x3a,0x37,0x35,0x35,0x37,0x38,0x38,0x38,0x36,0x36,0x39,0x3c,0x3c,0x3b,0x3d,
0x3e,0x3c,0x3a,0x37,0x36,0x38,0x38,0x38,0x36,0x35,0x36,0x37,0x36,0x34,0x36,0x3a,
0x3d,0x3b,0x3a,0x38,0x38,0x3c,0x3e,0x3e,0x40,0x44,0x49,0x4e,0x53,0x58,0x60,0x67,
0x69,0x6a,0x6a,0x6a,0x6a,0x6a,0x68,0x66,0x64,0x64,0x64,0x66,0x68,0x6a,0x6b,0x6c,
0x6d,0x6c,0x6a,0x68,0x69,0x6c,0x6e,0x6d,0x6c,0x6c,0x6d,0x6f,0x6f,0x6d,0x6e,0x6e,
0x6c,0x69,0x66,0x66,0x68,0x6c,0x6d,0x6b,0x6b,0x6c,0x6a,0x6a,0x6a,0x6a,0x6c,0x68,
0x61,0x5a,0x52,0x4e,0x49,0x43,0x40,0x3e,0x3c,0x3a,0x38,0x38,0x3a,0x39,0x3a,0x3b,
0x3d,0x3f,0x3d,0x3a,0x38,0x38,0x37,0x38,0x3a,0x3c,0x3c,0x3c,0x39,0x39,0x3c,0x3f,
0x40,0x41,0x3d,0x3b,0x3c,0x3a,0x38,0x3a,0x3b,0x3a,0x38,0x37,0x36,0x36,0x38,0x38,
0x37,0x37,0x37,0x37,0x36,0x35,0x36,0x39,0x3a,0x38,0x38,0x36,0x35,0x35,0x34,0x34,
0x34,0x35,0x34,0x34,0x34,0x36,0x38,0x39,0x38,0x38,0x39,0x38,0x38,0x38,0x39,0x3a,
0x3b,0x38,0x37,0x35,0x36,0x36,0x37,0x39,0x3b,0x3a,0x38,0x36,0x35,0x38,0x3a,0x3a,
0x39,0x39,0x3a,0x38,0x35,0x34,0x37,0x3a,0x3d,0x3d,0x3c,0x3a,0x38,0x38,0x36,0x37,
0x3b,0x3d,0x41,0x44,0x45,0x47,0x4f,0x55,0x5c,0x60,0x63,0x64,0x64,0x65,0x67,0x67,
0x69,0x68,0x67,0x6a,0x6a,0x6b,0x6b,0x6a,0x69,0x68,0x67,0x68,0x6a,0x6c,0x6c,0x6a,
0x69,0x68,0x6a,0x6c,0x6c,0x6a,0x6b,0x6b,0x6a,0x69,0x6a,0x6a,0x6b,0x6a,0x68,0x67,
0x66,0x66,0x64,0x65,0x64,0x65,0x67,0x67,0x65,0x66,0x64,0x60,0x5a,0x54,0x51,0x4e,
0x49,0x43,0x3f,0x3c,0x39,0x38,0x38,0x39,0x3a,0x3c,0x39,0x38,0x3a,0x3b,0x3c,0x3c,
0x3b,0x38,0x38,0x39,0x3a,0x3a,0x3c,0x3c,0x3a,0x38,0x38,0x38,0x3a,0x38,0x36,0x38,
0x38,0x38,0x38,0x38,0x38,0x39,0x3a,0x3a,0x39,0x3a,0x3b,0x39,0x38,0x38,0x39,0x3c,
0x3d,0x3a,0x3c,0x3e,0x41,0x44,0x49,0x50,0x58,0x5e,0x60,0x64,0x66,0x67,0x66,0x66,
0x67,0x67,0x66,0x64,0x64,0x66,0x69,0x6a,0x6b,0x6a,0x6b,0x6d,0x6e,0x6d,0x6b,0x6a,
0x6a,0x68,0x66,0x64,0x64,0x68,0x6a,0x68,0x68,0x68,0x68,0x6a,0x69,0x6b,0x6d,0x6d,
0x6c,0x6a,0x6a,0x68,0x68,0x69,0x69,0x69,0x68,0x64,0x61,0x61,0x61,0x5d,0x5b,0x56,
0x51,0x4e,0x49,0x43,0x40,0x3d,0x3b,0x38,0x36,0x34,0x34,0x35,0x35,0x35,0x38,0x3b,
0x3c,0x3a,0x38,0x38,0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x38,
0x38,0x38,0x38,0x39,0x38,0x37,0x38,0x3c,0x3d,0x3c,0x3a,0x39,0x39,0x3b,0x3b,0x3b,
0x3a,0x38,0x36,0x33,0x33,0x35,0x38,0x3a,0x38,0x36,0x38,0x37,0x36,0x38,0x3c,0x3c,
0x3a,0x38,0x36,0x33,0x36,0x36,0x36,0x37,0x35,0x32,0x33,0x32,0x32,0x36,0x3a,0x3b,
0x38,0x36,0x34,0x33,0x34,0x37,0x38,0x38,0x36,0x33,0x33,0x34,0x36,0x36,0x34,0x33,
0x34,0x36,0x37,0x38,0x36,0x37,0x39,0x38,0x38,0x39,0x3b,0x3b,0x38,0x37,0x38,0x39,
0x3b,0x3a,0x3a,0x3b,0x3a,0x38,0x36,0x38,0x38,0x38,0x38,0x36,0x34,0x35,0x34,0x35,
0x36,0x36,0x38,0x38,0x37,0x36,0x36,0x37,0x38,0x38,0x38,0x37,0x37,0x37,0x37,0x37,
0x36,0x35,0x34,0x35,0x35,0x35,0x37,0x36,0x36,0x38,0x38,0x36,0x33,0x33,0x36,0x38,
0x38,0x38,0x38,0x38,0x37,0x36,0x38,0x3a,0x3a,0x3a,0x36,0x33,0x34,0x33,0x33,0x34,
0x34,0x36,0x38,0x39,0x39,0x3a,0x3b,0x39,0x36,0x34,0x35,0x36,0x37,0x34,0x32,0x34,
0x35,0x35,0x35,0x36,0x37,0x38,0x38,0x36,0x36,0x35,0x35,0x33,0x34,0x33,0x33,0x36,
0x36,0x35,0x35,0x36,0x36,0x35,0x36,0x37,0x38,0x39,0x38,0x35,0x33,0x33,0x33,0x34,
0x35,0x36,0x37,0x36,0x34,0x35,0x36,0x38,0x37,0x36,0x34,0x35,0x36,0x34,0x34,0x36,
0x38,0x35,0x35,0x36,0x36,0x37,0x38,0x38,0x38,0x38,0x38,0x35,0x38,0x38,0x3a,0x3c,
0x3c,0x39,0x39,0x38,0x36,0x38,0x39,0x3a,0x3b,0x39,0x37,0x36,0x36,0x36,0x37,0x36,
0x36,0x39,0x3a,0x39,0x38,0x38,0x3a,0x3a,0x3a,0x38,0x36,0x37,0x36,0x32,0x32,0x32,
0x35,0x35,0x35,0x35,0x38,0x3a,0x39,0x38,0x38,0x36,0x35,0x35,0x36,0x38,0x39,0x38,
0x35,0x36,0x36,0x38,0x38,0x36,0x35,0x36,0x35,0x34,0x34,0x35,0x38,0x38,0x38,0x36,
0x38,0x3a,0x3a,0x38,0x36,0x36,0x38,0x38,0x37,0x35,0x37,0x38,0x38,0x36,0x37,0x38,
0x38,0x39,0x38,0x38,0x38,0x36,0x35,0x36,0x36,0x37,0x36,0x38,0x35,0x36,0x38,0x3a,
0x3a,0x3a,0x38,0x38,0x36,0x35,0x35,0x38,0x38,0x35,0x33,0x33,0x35,0x36,0x36,0x36,
0x38,0x38,0x38,0x37,0x36,0x38,0x3a,0x3c,0x3a,0x38,0x38,0x38,0x38,0x37,0x38,0x39,
0x39,0x38,0x35,0x35,0x34,0x34,0x33,0x35,0x35,0x33,0x34,0x35,0x36,0x38,0x38,0x37,
0x38,0x37,0x37,0x36,0x34,0x34,0x36,0x38,0x38,0x36,0x38,0x38,0x38,0x3a,0x3a,0x38,
0x38,0x35,0x32,0x32,0x32,0x34,0x36,0x36,0x34,0x35,0x37,0x38,0x39,0x39,0x3a,0x3a,
0x38,0x36,0x36,0x36,0x35,0x34,0x34,0x35,0x38,0x38,0x36,0x34,0x34,0x36,0x37,0x34,
0x36,0x36,0x38,0x3a,0x3c,0x3e,0x46,0x4d,0x51,0x56,0x5a,0x5d,0x5e,0x60,0x61,0x66,
0x69,0x69,0x67,0x64,0x63,0x63,0x64,0x65,0x66,0x67,0x67,0x65,0x65,0x65,0x66,0x68,
0x68,0x67,0x67,0x67,0x67,0x64,0x66,0x67,0x67,0x68,0x67,0x65,0x68,0x67,0x65,0x66,
0x67,0x69,0x6a,0x68,0x65,0x66,0x68,0x69,0x68,0x66,0x63,0x61,0x5e,0x5a,0x54,0x52,
0x50,0x4b,0x44,0x3d,0x39,0x38,0x36,0x34,0x34,0x36,0x38,0x38,0x36,0x38,0x39,0x3c,
0x3c,0x38,0x38,0x38,0x36,0x35,0x35,0x35,0x37,0x36,0x34,0x35,0x36,0x38,0x38,0x37,
//Field 5
// Line 10
0x35,0x35,0x35,0x36,0x35,0x35,0x35,0x36,0x36,0x36,0x35,0x37,0x39,0x39,0x37,0x37,
0x37,0x37,0x37,0x38,0x37,0x37,0x37,0x36,0x35,0x35,0x35,0x37,0x38,0x39,0x37,0x37,
0x37,0x37,0x37,0x36,0x36,0x38,0x36,0x34,0x31,0x31,0x31,0x34,0x35,0x36,0x34,0x37,
0x36,0x36,0x37,0x39,0x37,0x35,0x33,0x32,0x33,0x35,0x37,0x39,0x3a,0x39,0x39,0x3a,
0x3b,0x3d,0x3d,0x3d,0x3b,0x3a,0x39,0x37,0x37,0x37,0x36,0x37,0x37,0x36,0x36,0x34,
0x32,0x35,0x35,0x36,0x36,0x37,0x36,0x36,0x36,0x37,0x36,0x39,0x36,0x34,0x36,0x37,
0x38,0x39,0x3a,0x39,0x38,0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x34,0x32,0x32,0x33,
0x33,0x36,0x36,0x35,0x34,0x32,0x32,0x34,0x36,0x39,0x3a,0x3a,0x38,0x37,0x37,0x38,
0x39,0x39,0x37,0x36,0x37,0x37,0x37,0x37,0x37,0x38,0x39,0x38,0x37,0x38,0x37,0x35,
0x32,0x33,0x35,0x36,0x38,0x39,0x38,0x38,0x37,0x38,0x3a,0x3b,0x3b,0x3b,0x38,0x37,
0x35,0x36,0x37,0x39,0x3a,0x3a,0x37,0x37,0x35,0x35,0x38,0x3a,0x3b,0x3d,0x3b,0x38,
0x38,0x39,0x3a,0x37,0x3a,0x37,0x35,0x33,0x32,0x32,0x35,0x36,0x36,0x37,0x38,0x39,
0x3b,0x3b,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x37,0x36,0x37,0x39,0x3a,
0x3c,0x3d,0x3c,0x3b,0x3a,0x3a,0x3a,0x3a,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x3a,0x3c,
0x3c,0x3b,0x39,0x39,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x38,0x39,0x3b,0x3b,0x3a,
0x39,0x38,0x36,0x37,0x35,0x34,0x36,0x37,0x35,0x34,0x33,0x32,0x34,0x36,0x37,0x37,
0x36,0x35,0x36,0x39,0x3b,0x3b,0x3a,0x3a,0x38,0x39,0x37,0x36,0x35,0x35,0x34,0x34,
0x33,0x34,0x36,0x37,0x36,0x35,0x34,0x35,0x35,0x36,0x36,0x37,0x39,0x39,0x37,0x39,
0x36,0x36,0x37,0x37,0x37,0x36,0x36,0x35,0x34,0x36,0x37,0x37,0x37,0x38,0x37,0x38,
0x37,0x37,0x37,0x37,0x37,0x39,0x3a,0x39,0x39,0x38,0x38,0x39,0x37,0x39,0x39,0x37,
0x35,0x34,0x36,0x37,0x36,0x36,0x35,0x35,0x36,0x38,0x3a,0x3c,0x3c,0x3b,0x3a,0x3a,
0x39,0x3c,0x3d,0x3c,0x38,0x38,0x37,0x36,0x36,0x36,0x37,0x39,0x3b,0x3c,0x3c,0x3b,
0x3b,0x3c,0x3d,0x3d,0x3c,0x3b,0x38,0x36,0x36,0x38,0x3a,0x3c,0x3b,0x39,0x38,0x37,
0x36,0x35,0x38,0x3a,0x39,0x39,0x37,0x35,0x37,0x37,0x37,0x38,0x37,0x36,0x36,0x35,
0x33,0x36,0x38,0x3b,0x3b,0x3a,0x38,0x38,0x3a,0x39,0x3a,0x39,0x37,0x36,0x37,0x38,
0x38,0x39,0x38,0x38,0x37,0x36,0x35,0x35,0x36,0x36,0x37,0x39,0x39,0x37,0x3b,0x3a,
0x38,0x38,0x39,0x3b,0x3c,0x39,0x36,0x37,0x38,0x3b,0x3b,0x3c,0x3b,0x3c,0x3b,0x3a,
0x39,0x3a,0x3b,0x39,0x38,0x39,0x39,0x3a,0x38,0x37,0x39,0x39,0x38,0x37,0x37,0x37,
0x37,0x37,0x35,0x36,0x37,0x37,0x36,0x37,0x37,0x38,0x38,0x37,0x35,0x37,0x39,0x39,
0x37,0x36,0x36,0x37,0x39,0x3a,0x3a,0x3b,0x3b,0x39,0x37,0x37,0x37,0x37,0x37,0x35,
0x35,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x37,0x3a,0x3a,0x37,0x38,0x38,0x39,
0x39,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x3a,0x3b,0x3e,0x3d,0x3b,0x3b,0x38,0x36,
0x36,0x36,0x39,0x3b,0x3a,0x39,0x39,0x3a,0x39,0x39,0x39,0x3a,0x39,0x38,0x36,0x35,
0x35,0x36,0x37,0x39,0x3a,0x3c,0x3d,0x3d,0x3a,0x39,0x3a,0x3a,0x39,0x39,0x38,0x37,
0x35,0x33,0x34,0x36,0x37,0x38,0x37,0x36,0x35,0x36,0x35,0x36,0x37,0x39,0x39,0x35,
0x35,0x35,0x36,0x37,0x38,0x37,0x38,0x36,0x33,0x35,0x36,0x37,0x37,0x37,0x36,0x35,
0x34,0x36,0x37,0x37,0x37,0x37,0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x37,0x36,0x36,
0x34,0x33,0x33,0x36,0x37,0x38,0x39,0x39,0x39,0x3a,0x39,0x38,0x39,0x3a,0x37,0x36,
0x34,0x35,0x37,0x39,0x36,0x36,0x37,0x3b,0x3c,0x3a,0x37,0x37,0x3b,0x3c,0x39,0x37,
0x37,0x38,0x38,0x36,0x33,0x34,0x35,0x36,0x35,0x35,0x35,0x35,0x36,0x38,0x38,0x39,
0x37,0x38,0x39,0x37,0x34,0x35,0x36,0x38,0x39,0x3a,0x38,0x39,0x3b,0x3a,0x37,0x36,
0x36,0x39,0x3a,0x37,0x35,0x33,0x32,0x33,0x34,0x33,0x34,0x37,0x36,0x35,0x35,0x36,
0x38,0x39,0x3a,0x38,0x36,0x37,0x39,0x38,0x37,0x37,0x35,0x35,0x36,0x37,0x39,0x38,
0x37,0x36,0x36,0x35,0x35,0x37,0x38,0x3a,0x39,0x38,0x38,0x39,0x39,0x38,0x38,0x37,
0x37,0x37,0x36,0x35,0x36,0x37,0x37,0x34,0x36,0x35,0x36,0x38,0x39,0x37,0x39,0x37,
0x37,0x38,0x38,0x39,0x3a,0x38,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x37,0x37,
0x37,0x37,0x37,0x36,0x35,0x33,0x33,0x36,0x37,0x37,0x38,0x37,0x37,0x36,0x35,0x33,
0x34,0x35,0x36,0x32,0x33,0x34,0x34,0x37,0x38,0x39,0x3b,0x3c,0x3a,0x39,0x37,0x39,
0x38,0x38,0x37,0x37,0x39,0x38,0x35,0x33,0x33,0x35,0x38,0x38,0x36,0x36,0x35,0x35,
0x36,0x37,0x38,0x39,0x38,0x36,0x35,0x36,0x35,0x35,0x35,0x35,0x33,0x35,0x34,0x35,
0x37,0x36,0x32,0x32,0x33,0x34,0x35,0x35,0x33,0x35,0x37,0x37,0x36,0x39,0x3b,0x3b,
0x3a,0x37,0x36,0x38,0x37,0x38,0x39,0x3a,0x39,0x38,0x34,0x32,0x35,0x39,0x3b,0x3b,
0x38,0x36,0x34,0x36,0x36,0x36,0x37,0x37,0x34,0x32,0x32,0x34,0x35,0x35,0x34,0x36,
0x37,0x38,0x36,0x38,0x38,0x37,0x37,0x36,0x37,0x3b,0x3b,0x3a,0x39,0x3a,0x3a,0x3a,
0x3a,0x3a,0x3a,0x3b,0x3a,0x38,0x37,0x36,0x35,0x36,0x35,0x35,0x33,0x33,0x33,0x34,
0x33,0x36,0x35,0x37,0x37,0x37,0x37,0x39,0x36,0x39,0x38,0x37,0x39,0x39,0x37,0x36,
0x34,0x35,0x37,0x38,0x38,0x39,0x38,0x36,0x35,0x37,0x38,0x37,0x37,0x37,0x37,0x38,
0x39,0x38,0x3a,0x3a,0x37,0x37,0x37,0x39,0x39,0x37,0x35,0x35,0x36,0x37,0x37,0x39,
0x3a,0x38,0x38,0x37,0x37,0x39,0x38,0x38,0x37,0x38,0x38,0x38,0x37,0x37,0x37,0x39,
0x39,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3b,0x3b,0x3a,0x39,0x37,0x37,0x36,0x35,
0x32,0x33,0x34,0x36,0x36,0x36,0x37,0x39,0x3a,0x3a,0x39,0x39,0x38,0x38,0x38,0x38,
0x37,0x37,0x36,0x34,0x33,0x37,0x39,0x38,0x38,0x37,0x37,0x37,0x36,0x36,0x37,0x36,
0x35,0x36,0x35,0x36,0x35,0x36,0x35,0x36,0x38,0x3a,0x3b,0x3b,0x39,0x37,0x38,0x38,
0x38,0x37,0x38,0x38,0x39,0x3b,0x3c,0x3c,0x3b,0x3a,0x37,0x38,0x37,0x36,0x37,0x34,
0x32,0x34,0x33,0x34,0x36,0x39,0x3a,0x3b,0x39,0x39,0x37,0x36,0x35,0x36,0x38,0x3a,
0x38,0x38,0x38,0x38,0x39,0x3b,0x3c,0x3b,0x39,0x38,0x37,0x36,0x36,0x36,0x37,0x36,
0x34,0x35,0x35,0x34,0x33,0x35,0x35,0x37,0x36,0x35,0x34,0x36,0x34,0x36,0x36,0x37,
0x37,0x37,0x36,0x37,0x39,0x39,0x39,0x3a,0x38,0x36,0x36,0x36,0x36,0x36,0x35,0x35,
0x36,0x39,0x3a,0x3b,0x3a,0x39,0x38,0x37,0x36,0x37,0x39,0x3a,0x39,0x38,0x36,0x36,
0x37,0x38,0x38,0x39,0x38,0x37,0x36,0x35,0x35,0x37,0x38,0x39,0x38,0x39,0x39,0x37,
0x37,0x39,0x39,0x39,0x39,0x39,0x3a,0x38,0x36,0x35,0x35,0x36,0x37,0x39,0x39,0x38,
0x36,0x35,0x33,0x36,0x36,0x36,0x36,0x37,0x36,0x37,0x37,0x36,0x35,0x35,0x34,0x35,
0x35,0x37,0x36,0x35,0x32,0x31,0x32,0x37,0x39,0x3b,0x3b,0x3b,0x3a,0x38,0x39,0x3a,
0x39,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x34,0x37,0x38,0x38,0x39,0x39,0x3a,0x3a,
0x38,0x3a,0x39,0x3c,0x3a,0x3a,0x39,0x39,0x39,0x39,0x37,0x36,0x36,0x37,0x35,0x35,
0x35,0x36,0x36,0x35,0x35,0x33,0x37,0x38,0x37,0x37,0x37,0x37,0x37,0x38,0x39,0x3a,
0x39,0x38,0x39,0x37,0x35,0x36,0x36,0x35,0x35,0x36,0x35,0x35,0x36,0x39,0x39,0x38,
0x37,0x36,0x37,0x38,0x37,0x36,0x37,0x39,0x3a,0x3b,0x3c,0x3c,0x3a,0x38,0x39,0x3b,
0x3b,0x3a,0x39,0x37,0x33,0x34,0x36,0x37,0x39,0x3a,0x38,0x38,0x36,0x36,0x37,0x37,
0x37,0x37,0x36,0x36,0x35,0x34,0x33,0x34,0x36,0x37,0x38,0x3a,0x38,0x37,0x37,0x37,
0x38,0x39,0x3b,0x3b,0x3a,0x39,0x39,0x37,0x35,0x36,0x35,0x36,0x36,0x36,0x38,0x37,
0x38,0x39,0x3a,0x3b,0x3b,0x3b,0x38,0x37,0x37,0x38,0x39,0x38,0x37,0x38,0x39,0x3a,
0x3a,0x3a,0x3b,0x3a,0x39,0x38,0x37,0x39,0x39,0x3a,0x3b,0x39,0x38,0x36,0x34,0x33,
0x34,0x37,0x38,0x38,0x38,0x37,0x35,0x37,0x38,0x39,0x3a,0x39,0x36,0x35,0x34,0x34,
0x33,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x37,0x39,0x3c,0x3c,0x3a,0x3a,0x3a,0x38,
0x36,0x36,0x36,0x36,0x35,0x36,0x36,0x37,0x37,0x37,0x39,0x3a,0x39,0x3a,0x3a,0x39,
0x36,0x37,0x37,0x36,0x36,0x37,0x35,0x36,0x35,0x34,0x34,0x35,0x35,0x35,0x34,0x34,
0x36,0x37,0x37,0x36,0x35,0x35,0x36,0x36,0x37,0x37,0x37,0x37,0x36,0x38,0x38,0x39,
0x3a,0x39,0x38,0x38,0x37,0x37,0x37,0x37,0x37,0x38,0x39,0x39,0x39,0x3d,0x3b,0x3a,
0x3a,0x3a,0x3b,0x3b,0x39,0x37,0x39,0x3a,0x39,0x38,0x3a,0x39,0x38,0x38,0x37,0x35,
0x35,0x36,0x35,0x35,0x33,0x33,0x33,0x33,0x34,0x35,0x35,0x37,0x38,0x37,0x37,0x37,
0x37,0x38,0x38,0x37,0x36,0x35,0x35,0x35,0x32,0x33,0x33,0x33,0x35,0x35,0x37,0x36,
0x35,0x35,0x35,0x35,0x34,0x35,0x35,0x34,0x32,0x34,0x35,0x35,0x36,0x36,0x35,0x36,
0x34,0x34,0x35,0x36,0x36,0x36,0x37,0x36,0x34,0x37,0x36,0x35,0x37,0x39,0x39,0x38,
0x36,0x33,0x32,0x35,0x36,0x35,0x34,0x33,0x32,0x32,0x31,0x32,0x37,0x37,0x36,0x37,
0x37,0x38,0x37,0x36,0x35,0x36,0x35,0x34,0x32,0x32,0x32,0x34,0x36,0x37,0x38,0x39,
// Line 11
0x37,0x36,0x35,0x35,0x34,0x34,0x35,0x34,0x34,0x34,0x33,0x34,0x35,0x37,0x37,0x3a,
0x3b,0x3b,0x38,0x39,0x3a,0x3c,0x3d,0x3b,0x38,0x38,0x37,0x35,0x34,0x37,0x39,0x3b,
0x38,0x35,0x35,0x37,0x37,0x37,0x37,0x37,0x38,0x3a,0x38,0x35,0x32,0x32,0x33,0x36,
0x37,0x38,0x36,0x32,0x30,0x33,0x3d,0x4f,0x61,0x73,0x7a,0x79,0x6f,0x61,0x58,0x57,
0x5c,0x66,0x70,0x76,0x78,0x74,0x6b,0x61,0x5d,0x5f,0x66,0x6d,0x70,0x72,0x70,0x6c,
0x63,0x5b,0x57,0x5c,0x62,0x6b,0x71,0x73,0x6f,0x6a,0x62,0x5b,0x59,0x5c,0x63,0x6f,
0x75,0x76,0x74,0x6d,0x64,0x5d,0x59,0x5c,0x64,0x6d,0x72,0x72,0x6e,0x67,0x61,0x5d,
0x5c,0x60,0x68,0x6f,0x74,0x76,0x71,0x69,0x60,0x5a,0x57,0x5d,0x65,0x6f,0x76,0x78,
0x72,0x6c,0x66,0x61,0x5e,0x62,0x67,0x69,0x6b,0x6b,0x6d,0x74,0x7b,0x86,0x93,0x9f,
0xa7,0xaa,0xa5,0x98,0x87,0x77,0x68,0x5b,0x52,0x4e,0x4d,0x4a,0x43,0x3c,0x38,0x3c,
0x46,0x57,0x6a,0x7b,0x87,0x8e,0x91,0x94,0x96,0x9c,0x9e,0x9f,0x9c,0x9c,0x9e,0x9e,
0x9a,0x97,0x8e,0x80,0x73,0x68,0x5e,0x54,0x4d,0x43,0x38,0x33,0x35,0x42,0x55,0x69,
0x77,0x7e,0x79,0x6d,0x62,0x5b,0x56,0x51,0x49,0x40,0x34,0x30,0x37,0x49,0x60,0x75,
0x82,0x84,0x7a,0x6b,0x5d,0x54,0x4e,0x4a,0x44,0x3c,0x35,0x2f,0x2c,0x2e,0x35,0x3d,
0x4a,0x5b,0x69,0x71,0x77,0x75,0x6d,0x64,0x5c,0x55,0x4f,0x47,0x3e,0x38,0x33,0x36,
0x43,0x57,0x6c,0x80,0x8e,0x96,0x99,0x99,0x94,0x8b,0x80,0x70,0x5e,0x54,0x53,0x5f,
0x6e,0x78,0x79,0x75,0x6b,0x65,0x62,0x61,0x5b,0x4f,0x41,0x31,0x2a,0x33,0x47,0x61,
0x78,0x81,0x7c,0x70,0x61,0x58,0x54,0x51,0x49,0x3f,0x34,0x30,0x34,0x47,0x5f,0x76,
0x83,0x82,0x76,0x67,0x5a,0x57,0x5b,0x62,0x6a,0x70,0x74,0x79,0x80,0x8c,0x99,0xa7,
0xac,0xac,0xa6,0xa1,0x99,0x95,0x98,0x9a,0x9a,0x97,0x8d,0x7c,0x68,0x5a,0x53,0x56,
0x60,0x6e,0x73,0x79,0x74,0x6a,0x63,0x5d,0x58,0x54,0x4e,0x45,0x3b,0x31,0x2b,0x2b,
0x2e,0x34,0x3b,0x3f,0x3e,0x3b,0x37,0x34,0x32,0x34,0x38,0x3e,0x41,0x41,0x3d,0x39,
0x34,0x34,0x3d,0x4c,0x5d,0x6f,0x79,0x7c,0x75,0x6a,0x5e,0x59,0x5c,0x64,0x6b,0x74,
0x79,0x80,0x88,0x8e,0x95,0x9f,0xa6,0xa8,0xa2,0x98,0x8a,0x7c,0x6b,0x5d,0x54,0x51,
0x4d,0x4a,0x44,0x3d,0x34,0x32,0x32,0x37,0x3d,0x42,0x42,0x3e,0x38,0x34,0x34,0x3c,
0x47,0x57,0x69,0x79,0x86,0x91,0x98,0x9b,0x98,0x8f,0x81,0x74,0x65,0x59,0x4e,0x46,
0x3f,0x38,0x39,0x40,0x4c,0x5e,0x6e,0x7b,0x88,0x8d,0x90,0x94,0x98,0xa0,0xa6,0xa8,
0xa1,0x97,0x88,0x78,0x6a,0x61,0x5c,0x5f,0x65,0x6d,0x73,0x7b,0x84,0x8e,0x99,0x9f,
0x9d,0x95,0x84,0x6e,0x5a,0x50,0x53,0x5c,0x69,0x74,0x79,0x78,0x70,0x66,0x62,0x5b,
0x56,0x52,0x48,0x3c,0x32,0x2e,0x2f,0x37,0x41,0x46,0x43,0x40,0x37,0x32,0x35,0x3f,
0x4d,0x5d,0x6d,0x7b,0x87,0x90,0x98,0x9c,0x9a,0x91,0x84,0x74,0x65,0x5b,0x56,0x58,
0x60,0x6d,0x78,0x82,0x8b,0x91,0x97,0x9f,0xa5,0xa7,0xa2,0x9b,0x8e,0x7f,0x71,0x67,
0x5f,0x59,0x4f,0x44,0x3c,0x37,0x35,0x40,0x4a,0x5a,0x6b,0x79,0x84,0x8e,0x95,0x99,
0x98,0x90,0x80,0x6c,0x5d,0x56,0x58,0x65,0x74,0x7f,0x80,0x77,0x6b,0x65,0x63,0x62,
0x5e,0x54,0x46,0x38,0x30,0x34,0x46,0x61,0x78,0x85,0x83,0x76,0x65,0x5b,0x58,0x5c,
0x67,0x70,0x74,0x78,0x7d,0x85,0x8f,0x97,0x97,0x8f,0x81,0x70,0x5e,0x52,0x49,0x43,
0x3d,0x39,0x39,0x41,0x4d,0x5e,0x6e,0x7b,0x84,0x8c,0x91,0x95,0x99,0x9f,0xa2,0xa3,
0x9f,0x95,0x85,0x74,0x63,0x5a,0x59,0x5d,0x64,0x6c,0x74,0x7c,0x84,0x8c,0x93,0x9b,
0x9c,0x94,0x83,0x6f,0x5c,0x51,0x51,0x54,0x5d,0x6b,0x7a,0x86,0x8a,0x91,0x99,0xa3,
0xa9,0xab,0xa5,0x9c,0x8f,0x81,0x73,0x67,0x5c,0x53,0x4b,0x43,0x3b,0x36,0x36,0x3e,
0x4b,0x5b,0x6b,0x7e,0x8b,0x96,0x9b,0x99,0x91,0x87,0x7a,0x6b,0x5c,0x4c,0x3f,0x38,
0x35,0x32,0x2f,0x33,0x36,0x3d,0x41,0x43,0x41,0x41,0x3d,0x39,0x38,0x3a,0x3b,0x3d,
0x3b,0x38,0x38,0x37,0x38,0x39,0x39,0x39,0x38,0x38,0x36,0x37,0x38,0x3b,0x3c,0x3d,
0x3b,0x3b,0x3d,0x3d,0x3c,0x3d,0x3c,0x3c,0x39,0x38,0x39,0x3c,0x3c,0x3c,0x3b,0x3c,
0x3a,0x38,0x37,0x36,0x34,0x32,0x30,0x2f,0x31,0x34,0x36,0x35,0x36,0x37,0x37,0x39,
0x39,0x39,0x3a,0x3a,0x38,0x38,0x38,0x38,0x39,0x39,0x38,0x3a,0x39,0x38,0x36,0x35,
0x35,0x37,0x38,0x39,0x38,0x39,0x37,0x35,0x36,0x38,0x3a,0x3c,0x39,0x37,0x35,0x35,
0x35,0x37,0x37,0x37,0x37,0x3a,0x3c,0x3c,0x3c,0x3d,0x3a,0x3c,0x39,0x39,0x39,0x36,
0x34,0x35,0x35,0x37,0x38,0x3a,0x3c,0x3a,0x38,0x37,0x36,0x38,0x39,0x39,0x38,0x37,
0x37,0x38,0x3a,0x3c,0x3d,0x3c,0x3a,0x3a,0x3a,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x38,
0x37,0x38,0x38,0x38,0x37,0x35,0x34,0x35,0x37,0x38,0x36,0x35,0x34,0x37,0x38,0x38,
0x36,0x35,0x36,0x37,0x36,0x37,0x38,0x3c,0x3b,0x39,0x39,0x3c,0x3c,0x3c,0x3b,0x39,
0x38,0x39,0x38,0x37,0x37,0x37,0x36,0x35,0x35,0x36,0x3a,0x3b,0x38,0x38,0x38,0x38,
0x38,0x38,0x39,0x3a,0x39,0x37,0x35,0x38,0x39,0x38,0x39,0x38,0x37,0x36,0x36,0x37,
0x38,0x39,0x39,0x38,0x34,0x32,0x33,0x36,0x37,0x37,0x38,0x38,0x37,0x37,0x37,0x37,
0x38,0x38,0x35,0x35,0x36,0x38,0x36,0x34,0x33,0x34,0x36,0x36,0x34,0x36,0x37,0x36,
0x36,0x35,0x34,0x37,0x35,0x34,0x33,0x34,0x35,0x38,0x39,0x38,0x38,0x3a,0x3b,0x3a,
0x3a,0x3a,0x3b,0x3c,0x3b,0x3c,0x3c,0x39,0x38,0x3a,0x3c,0x3d,0x3d,0x3c,0x3a,0x3a,
0x39,0x38,0x37,0x37,0x37,0x37,0x38,0x39,0x38,0x39,0x37,0x35,0x35,0x37,0x37,0x37,
0x36,0x35,0x34,0x34,0x34,0x34,0x34,0x36,0x36,0x37,0x35,0x34,0x34,0x35,0x35,0x37,
0x38,0x3c,0x3c,0x3a,0x38,0x38,0x39,0x39,0x36,0x34,0x34,0x36,0x37,0x37,0x38,0x3a,
0x3b,0x39,0x39,0x3b,0x3b,0x3a,0x37,0x34,0x32,0x34,0x35,0x38,0x37,0x37,0x38,0x39,
0x38,0x38,0x3c,0x3d,0x3c,0x3c,0x3c,0x3c,0x3b,0x38,0x37,0x37,0x37,0x37,0x35,0x34,
0x35,0x36,0x38,0x39,0x3a,0x3c,0x3c,0x3b,0x39,0x39,0x39,0x3c,0x3a,0x38,0x37,0x37,
0x37,0x38,0x38,0x38,0x38,0x39,0x37,0x35,0x35,0x35,0x34,0x35,0x34,0x35,0x37,0x37,
0x35,0x37,0x39,0x3b,0x38,0x38,0x38,0x39,0x39,0x38,0x37,0x36,0x35,0x35,0x37,0x37,
0x36,0x37,0x35,0x34,0x35,0x37,0x39,0x39,0x38,0x37,0x36,0x36,0x35,0x37,0x38,0x38,
0x35,0x35,0x34,0x34,0x36,0x37,0x37,0x37,0x37,0x37,0x35,0x38,0x39,0x39,0x3b,0x3a,
0x38,0x38,0x37,0x37,0x36,0x37,0x37,0x37,0x35,0x34,0x34,0x36,0x37,0x36,0x35,0x36,
0x34,0x35,0x35,0x35,0x35,0x37,0x3a,0x3d,0x3c,0x3b,0x39,0x38,0x35,0x37,0x38,0x3b,
0x38,0x39,0x38,0x37,0x38,0x38,0x39,0x3a,0x39,0x39,0x38,0x37,0x36,0x37,0x37,0x35,
0x35,0x36,0x37,0x37,0x37,0x36,0x36,0x37,0x39,0x39,0x3a,0x3c,0x3d,0x3d,0x3a,0x38,
0x37,0x36,0x34,0x33,0x33,0x34,0x32,0x34,0x34,0x34,0x35,0x37,0x37,0x38,0x38,0x37,
0x38,0x38,0x38,0x38,0x35,0x34,0x35,0x37,0x37,0x38,0x38,0x37,0x37,0x38,0x37,0x37,
0x38,0x3a,0x3a,0x39,0x37,0x38,0x38,0x38,0x37,0x38,0x38,0x39,0x39,0x38,0x37,0x38,
0x3a,0x3b,0x3a,0x3c,0x3b,0x3a,0x3a,0x39,0x38,0x38,0x38,0x37,0x38,0x38,0x38,0x38,
0x37,0x37,0x38,0x3b,0x3b,0x3b,0x3a,0x39,0x37,0x37,0x35,0x35,0x35,0x35,0x34,0x35,
0x36,0x38,0x3b,0x3d,0x3c,0x3c,0x3c,0x3a,0x38,0x37,0x36,0x35,0x35,0x36,0x38,0x38,
0x37,0x36,0x37,0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x36,0x35,0x35,0x36,0x38,0x3b,
0x3a,0x39,0x36,0x37,0x35,0x37,0x38,0x39,0x39,0x38,0x35,0x34,0x35,0x37,0x38,0x38,
0x38,0x37,0x37,0x37,0x38,0x3b,0x3a,0x39,0x37,0x36,0x37,0x36,0x38,0x38,0x37,0x37,
0x34,0x32,0x35,0x34,0x37,0x38,0x39,0x39,0x39,0x38,0x37,0x38,0x3a,0x3c,0x3a,0x38,
0x35,0x34,0x34,0x35,0x35,0x37,0x38,0x3a,0x3b,0x39,0x37,0x38,0x38,0x38,0x38,0x37,
0x37,0x36,0x36,0x35,0x34,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x39,0x39,0x3a,0x3b,
0x38,0x38,0x39,0x39,0x38,0x38,0x36,0x35,0x35,0x35,0x35,0x36,0x37,0x37,0x37,0x35,
0x35,0x37,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x37,0x38,0x38,0x37,0x35,0x35,0x36,
0x38,0x3c,0x3d,0x3d,0x3c,0x3c,0x3b,0x3a,0x39,0x3a,0x3a,0x3a,0x36,0x35,0x37,0x38,
0x39,0x39,0x38,0x36,0x35,0x33,0x32,0x33,0x33,0x33,0x34,0x35,0x35,0x36,0x37,0x37,
0x37,0x37,0x38,0x3a,0x3c,0x3a,0x37,0x37,0x33,0x32,0x35,0x3d,0x4a,0x59,0x68,0x77,
0x83,0x8d,0x92,0x96,0x97,0x91,0x83,0x73,0x5f,0x54,0x52,0x57,0x62,0x70,0x7c,0x87,
0x8e,0x95,0x9c,0x9f,0xa2,0xa1,0x9d,0x95,0x89,0x7c,0x6e,0x63,0x57,0x4e,0x45,0x3e,
0x3b,0x39,0x37,0x36,0x35,0x35,0x36,0x39,0x42,0x51,0x63,0x73,0x7b,0x79,0x6e,0x61,
0x59,0x58,0x5f,0x6c,0x76,0x7a,0x75,0x6a,0x60,0x5c,0x5c,0x5e,0x5c,0x54,0x44,0x33,
0x2a,0x31,0x44,0x60,0x76,0x83,0x82,0x77,0x66,0x59,0x50,0x4c,0x47,0x43,0x3b,0x32,
0x2e,0x30,0x34,0x3c,0x40,0x40,0x3e,0x3a,0x36,0x35,0x35,0x35,0x36,0x37,0x38,0x39,
0x3b,0x3a,0x38,0x38,0x38,0x36,0x34,0x32,0x32,0x35,0x34,0x34,0x34,0x33,0x34,0x37,
// Line 12
0x37,0x38,0x39,0x3a,0x39,0x37,0x37,0x39,0x39,0x39,0x3b,0x3a,0x38,0x37,0x36,0x37,
0x36,0x36,0x35,0x35,0x35,0x33,0x33,0x36,0x36,0x35,0x35,0x35,0x35,0x37,0x38,0x38,
0x37,0x38,0x37,0x37,0x36,0x36,0x37,0x39,0x39,0x38,0x36,0x34,0x33,0x36,0x37,0x38,
0x3b,0x3b,0x37,0x33,0x32,0x37,0x40,0x4e,0x5f,0x70,0x79,0x7a,0x72,0x66,0x5b,0x58,
0x5c,0x67,0x73,0x7a,0x79,0x72,0x6a,0x64,0x60,0x62,0x68,0x70,0x76,0x79,0x76,0x6f,
0x66,0x5f,0x5b,0x5d,0x61,0x68,0x70,0x74,0x70,0x6b,0x64,0x5e,0x5a,0x5f,0x65,0x6e,
0x73,0x73,0x70,0x6d,0x67,0x62,0x61,0x63,0x67,0x6f,0x73,0x74,0x72,0x6b,0x63,0x5c,
0x58,0x5b,0x62,0x6d,0x75,0x76,0x72,0x68,0x5e,0x59,0x58,0x5e,0x67,0x71,0x76,0x77,
0x72,0x6b,0x65,0x60,0x5c,0x5e,0x64,0x67,0x68,0x6c,0x70,0x75,0x7d,0x87,0x93,0xa1,
0xa9,0xab,0xa8,0x9c,0x8d,0x7b,0x6a,0x5f,0x5a,0x57,0x52,0x4a,0x3f,0x36,0x33,0x39,
0x44,0x57,0x6c,0x7d,0x87,0x8e,0x92,0x97,0x9b,0x9f,0x9f,0x9e,0x9e,0x9f,0x9f,0x9e,
0x9c,0x98,0x8f,0x83,0x73,0x65,0x5b,0x53,0x4c,0x44,0x3b,0x36,0x39,0x44,0x56,0x6c,
0x7b,0x7f,0x7a,0x6e,0x62,0x5b,0x56,0x51,0x4a,0x3f,0x34,0x30,0x35,0x48,0x60,0x75,
0x81,0x82,0x79,0x6a,0x5b,0x52,0x4c,0x49,0x44,0x3c,0x32,0x2c,0x28,0x29,0x31,0x3e,
0x4d,0x5e,0x69,0x70,0x71,0x6e,0x68,0x61,0x5b,0x57,0x54,0x4e,0x43,0x38,0x34,0x38,
0x47,0x5d,0x70,0x81,0x8c,0x91,0x92,0x93,0x92,0x8f,0x82,0x70,0x5e,0x55,0x58,0x65,
0x73,0x7b,0x7a,0x70,0x66,0x5e,0x5a,0x5b,0x55,0x4c,0x3d,0x2f,0x29,0x35,0x4d,0x69,
0x7e,0x87,0x82,0x75,0x65,0x5b,0x55,0x52,0x49,0x3f,0x34,0x2f,0x36,0x4b,0x64,0x79,
0x7f,0x7f,0x72,0x64,0x5a,0x52,0x4e,0x4a,0x43,0x3b,0x34,0x30,0x32,0x38,0x3e,0x3f,
0x3c,0x39,0x36,0x34,0x33,0x34,0x35,0x35,0x35,0x38,0x43,0x55,0x67,0x78,0x7e,0x7c,
0x72,0x64,0x5a,0x5a,0x60,0x69,0x6c,0x72,0x75,0x7b,0x84,0x8f,0x95,0x9a,0x92,0x81,
0x6b,0x57,0x47,0x3f,0x3b,0x3a,0x39,0x38,0x36,0x37,0x39,0x3e,0x41,0x42,0x3d,0x35,
0x30,0x32,0x3d,0x51,0x62,0x73,0x7c,0x7c,0x72,0x66,0x5f,0x60,0x64,0x6a,0x70,0x74,
0x7b,0x82,0x89,0x96,0x9b,0x9b,0x95,0x84,0x6e,0x5b,0x4b,0x40,0x3a,0x39,0x38,0x38,
0x38,0x38,0x3b,0x3f,0x40,0x3e,0x3b,0x38,0x35,0x36,0x36,0x37,0x39,0x3a,0x38,0x38,
0x37,0x37,0x35,0x35,0x36,0x39,0x3d,0x3f,0x3e,0x3d,0x3c,0x3a,0x3a,0x39,0x3b,0x3b,
0x3a,0x38,0x37,0x37,0x39,0x38,0x3b,0x3b,0x39,0x3a,0x3a,0x3b,0x3b,0x3b,0x39,0x39,
0x37,0x37,0x39,0x3a,0x3b,0x3b,0x3b,0x39,0x38,0x38,0x39,0x3b,0x3b,0x3b,0x3a,0x3a,
0x3a,0x3a,0x3b,0x3b,0x3b,0x3d,0x3c,0x3a,0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x3a,
0x3a,0x38,0x38,0x37,0x37,0x3b,0x3b,0x3a,0x39,0x38,0x37,0x38,0x39,0x3a,0x3a,0x3b,
0x38,0x37,0x37,0x37,0x36,0x3a,0x38,0x38,0x38,0x39,0x38,0x38,0x39,0x38,0x37,0x36,
0x37,0x37,0x39,0x39,0x39,0x3b,0x3c,0x3c,0x3b,0x3b,0x3b,0x3d,0x3b,0x39,0x38,0x35,
0x32,0x32,0x34,0x37,0x39,0x3b,0x3a,0x39,0x3b,0x3c,0x3c,0x3d,0x3d,0x3e,0x3e,0x3a,
0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x37,0x37,0x36,0x35,0x38,0x38,0x38,0x38,0x38,
0x37,0x39,0x38,0x37,0x37,0x39,0x39,0x39,0x37,0x38,0x38,0x39,0x37,0x38,0x3b,0x3b,
0x3a,0x3a,0x38,0x36,0x37,0x38,0x38,0x37,0x37,0x36,0x36,0x34,0x33,0x35,0x36,0x37,
0x36,0x37,0x37,0x38,0x37,0x36,0x37,0x39,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x38,
0x38,0x37,0x35,0x34,0x36,0x35,0x35,0x35,0x36,0x38,0x3a,0x3a,0x3a,0x3d,0x3d,0x3c,
0x3b,0x3b,0x3a,0x38,0x38,0x36,0x34,0x34,0x37,0x38,0x3b,0x39,0x38,0x3b,0x3b,0x3c,
0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x33,0x34,0x37,0x38,0x37,0x34,0x32,0x34,0x35,0x37,
0x39,0x3b,0x3a,0x39,0x37,0x35,0x35,0x38,0x3b,0x3d,0x3b,0x37,0x35,0x36,0x38,0x38,
0x38,0x37,0x37,0x39,0x37,0x36,0x36,0x37,0x38,0x3a,0x39,0x38,0x37,0x35,0x33,0x33,
0x33,0x34,0x35,0x37,0x36,0x35,0x35,0x35,0x35,0x37,0x37,0x35,0x35,0x37,0x37,0x35,
0x35,0x36,0x37,0x38,0x38,0x36,0x38,0x36,0x34,0x37,0x38,0x38,0x39,0x3a,0x3b,0x3a,
0x37,0x35,0x37,0x38,0x38,0x37,0x37,0x36,0x35,0x34,0x34,0x35,0x37,0x38,0x35,0x35,
0x34,0x35,0x37,0x38,0x39,0x39,0x36,0x33,0x32,0x32,0x33,0x34,0x34,0x32,0x32,0x33,
0x35,0x35,0x37,0x37,0x38,0x38,0x37,0x36,0x34,0x36,0x36,0x35,0x33,0x35,0x34,0x33,
0x31,0x32,0x33,0x33,0x33,0x35,0x36,0x37,0x37,0x37,0x37,0x38,0x37,0x36,0x35,0x35,
0x34,0x35,0x35,0x34,0x33,0x34,0x33,0x30,0x33,0x34,0x35,0x37,0x38,0x39,0x3b,0x3c,
0x3a,0x3b,0x3b,0x3c,0x3b,0x3b,0x37,0x33,0x34,0x34,0x35,0x36,0x38,0x37,0x39,0x38,
0x36,0x35,0x34,0x33,0x33,0x33,0x35,0x34,0x31,0x2f,0x2e,0x32,0x33,0x30,0x30,0x32,
0x33,0x35,0x36,0x37,0x38,0x39,0x39,0x37,0x33,0x32,0x30,0x35,0x33,0x32,0x32,0x33,
0x32,0x33,0x34,0x36,0x37,0x38,0x38,0x37,0x35,0x34,0x33,0x34,0x36,0x37,0x38,0x37,
0x34,0x35,0x36,0x37,0x37,0x36,0x36,0x37,0x37,0x36,0x36,0x37,0x35,0x37,0x37,0x38,
0x36,0x35,0x34,0x33,0x33,0x33,0x33,0x34,0x33,0x33,0x34,0x35,0x34,0x36,0x38,0x39,
0x39,0x38,0x37,0x37,0x37,0x37,0x37,0x38,0x37,0x36,0x35,0x34,0x35,0x38,0x37,0x38,
0x38,0x37,0x35,0x35,0x37,0x39,0x39,0x3a,0x37,0x35,0x35,0x36,0x35,0x37,0x36,0x35,
0x37,0x39,0x39,0x38,0x38,0x38,0x37,0x38,0x37,0x36,0x39,0x36,0x32,0x31,0x31,0x32,
0x35,0x36,0x34,0x35,0x33,0x34,0x34,0x37,0x37,0x38,0x37,0x38,0x37,0x35,0x33,0x31,
0x32,0x33,0x34,0x34,0x32,0x31,0x33,0x33,0x33,0x34,0x37,0x38,0x38,0x37,0x36,0x35,
0x34,0x34,0x34,0x36,0x37,0x36,0x34,0x33,0x32,0x35,0x36,0x37,0x36,0x37,0x35,0x34,
0x33,0x34,0x34,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x3a,0x3a,0x39,
0x39,0x37,0x37,0x37,0x38,0x38,0x39,0x35,0x33,0x35,0x36,0x35,0x34,0x32,0x31,0x32,
0x33,0x34,0x36,0x37,0x36,0x35,0x37,0x37,0x38,0x3a,0x39,0x37,0x37,0x35,0x34,0x35,
0x34,0x33,0x34,0x34,0x32,0x32,0x32,0x32,0x33,0x36,0x37,0x38,0x3b,0x39,0x36,0x35,
0x34,0x35,0x35,0x35,0x34,0x35,0x34,0x32,0x32,0x32,0x34,0x36,0x37,0x37,0x35,0x33,
0x32,0x32,0x37,0x39,0x39,0x3b,0x37,0x35,0x33,0x33,0x34,0x37,0x36,0x36,0x35,0x36,
0x35,0x35,0x37,0x39,0x38,0x39,0x3a,0x3a,0x3a,0x38,0x37,0x38,0x37,0x37,0x36,0x38,
0x36,0x36,0x36,0x36,0x36,0x38,0x37,0x38,0x37,0x36,0x34,0x34,0x33,0x32,0x33,0x35,
0x35,0x34,0x33,0x32,0x33,0x35,0x36,0x37,0x38,0x38,0x37,0x36,0x35,0x37,0x39,0x39,
0x38,0x39,0x39,0x38,0x37,0x37,0x37,0x37,0x37,0x36,0x34,0x33,0x33,0x33,0x36,0x37,
0x38,0x39,0x37,0x36,0x35,0x36,0x37,0x37,0x39,0x39,0x38,0x37,0x36,0x35,0x37,0x38,
0x37,0x39,0x38,0x38,0x35,0x33,0x32,0x34,0x36,0x37,0x34,0x31,0x2f,0x30,0x32,0x33,
0x33,0x34,0x35,0x35,0x36,0x37,0x38,0x3a,0x3b,0x39,0x37,0x35,0x35,0x35,0x35,0x36,
0x36,0x38,0x38,0x38,0x39,0x38,0x37,0x39,0x38,0x36,0x36,0x35,0x32,0x34,0x34,0x36,
0x36,0x35,0x34,0x33,0x33,0x34,0x34,0x38,0x38,0x39,0x39,0x39,0x37,0x36,0x36,0x36,
0x37,0x37,0x35,0x33,0x32,0x33,0x36,0x38,0x39,0x3b,0x3b,0x38,0x34,0x35,0x35,0x36,
0x37,0x37,0x35,0x35,0x33,0x35,0x35,0x35,0x34,0x36,0x36,0x37,0x35,0x36,0x37,0x37,
0x37,0x37,0x36,0x37,0x35,0x36,0x39,0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x38,0x37,0x38,
0x39,0x38,0x36,0x36,0x35,0x35,0x37,0x38,0x37,0x39,0x39,0x39,0x37,0x37,0x36,0x37,
0x39,0x3a,0x39,0x39,0x37,0x36,0x35,0x36,0x37,0x37,0x36,0x34,0x32,0x33,0x35,0x35,
0x33,0x32,0x32,0x33,0x33,0x35,0x37,0x38,0x38,0x39,0x36,0x35,0x36,0x38,0x38,0x38,
0x37,0x36,0x34,0x33,0x34,0x36,0x39,0x3a,0x38,0x39,0x39,0x37,0x37,0x37,0x37,0x38,
0x36,0x34,0x35,0x35,0x35,0x36,0x37,0x38,0x38,0x39,0x3a,0x3a,0x38,0x36,0x35,0x37,
0x36,0x36,0x37,0x35,0x34,0x34,0x34,0x35,0x36,0x37,0x37,0x35,0x33,0x32,0x32,0x33,
0x34,0x35,0x35,0x34,0x32,0x34,0x36,0x37,0x38,0x39,0x39,0x37,0x34,0x33,0x35,0x38,
0x38,0x37,0x37,0x35,0x34,0x35,0x35,0x37,0x38,0x38,0x37,0x37,0x37,0x38,0x37,0x38,
0x37,0x36,0x35,0x35,0x32,0x33,0x33,0x32,0x32,0x33,0x33,0x35,0x34,0x34,0x35,0x37,
0x37,0x36,0x35,0x34,0x34,0x35,0x34,0x33,0x34,0x34,0x33,0x33,0x33,0x33,0x35,0x35,
0x34,0x33,0x33,0x37,0x37,0x36,0x35,0x36,0x35,0x34,0x33,0x32,0x32,0x32,0x33,0x32,
0x31,0x34,0x34,0x35,0x37,0x39,0x3b,0x3b,0x3b,0x3a,0x38,0x3a,0x38,0x37,0x35,0x35,
0x34,0x35,0x35,0x35,0x35,0x35,0x34,0x35,0x35,0x37,0x37,0x37,0x37,0x37,0x37,0x36,
0x34,0x36,0x37,0x36,0x35,0x34,0x32,0x30,0x30,0x31,0x34,0x37,0x39,0x39,0x37,0x35,
0x34,0x35,0x36,0x35,0x37,0x37,0x35,0x34,0x34,0x34,0x35,0x34,0x33,0x34,0x33,0x33,
0x31,0x32,0x32,0x33,0x35,0x38,0x37,0x37,0x35,0x35,0x36,0x37,0x36,0x37,0x36,0x34,
0x33,0x33,0x34,0x34,0x33,0x34,0x35,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x37,0x35,
// Line 13
0x38,0x3a,0x39,0x38,0x38,0x3a,0x3c,0x3e,0x3b,0x39,0x36,0x35,0x34,0x34,0x33,0x33,
0x32,0x32,0x32,0x33,0x36,0x38,0x38,0x38,0x35,0x35,0x36,0x38,0x38,0x38,0x36,0x36,
0x36,0x38,0x39,0x3a,0x3b,0x3b,0x38,0x38,0x37,0x38,0x3b,0x3c,0x3a,0x37,0x33,0x31,
0x31,0x35,0x35,0x35,0x34,0x34,0x34,0x37,0x38,0x39,0x3a,0x3b,0x39,0x37,0x36,0x37,
0x38,0x3a,0x39,0x3a,0x3a,0x3b,0x3a,0x3a,0x38,0x38,0x3a,0x3a,0x38,0x36,0x35,0x35,
0x38,0x3a,0x3b,0x35,0x36,0x35,0x38,0x39,0x39,0x39,0x3b,0x38,0x35,0x35,0x35,0x38,
0x3a,0x3d,0x3a,0x39,0x36,0x34,0x32,0x33,0x34,0x36,0x36,0x36,0x36,0x38,0x38,0x37,
0x39,0x3a,0x3a,0x39,0x37,0x38,0x3a,0x3b,0x3a,0x38,0x38,0x38,0x36,0x36,0x36,0x36,
0x36,0x36,0x37,0x38,0x38,0x37,0x39,0x38,0x36,0x38,0x39,0x3a,0x39,0x38,0x36,0x36,
0x36,0x38,0x39,0x3b,0x3a,0x39,0x38,0x39,0x38,0x39,0x39,0x39,0x3a,0x3a,0x38,0x36,
0x35,0x36,0x38,0x38,0x38,0x39,0x39,0x38,0x37,0x39,0x3a,0x3a,0x38,0x39,0x38,0x38,
0x37,0x38,0x38,0x38,0x37,0x38,0x39,0x3a,0x38,0x39,0x38,0x38,0x37,0x37,0x36,0x36,
0x35,0x35,0x38,0x39,0x38,0x37,0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x37,0x35,0x36,
0x35,0x37,0x38,0x39,0x38,0x39,0x38,0x37,0x37,0x37,0x36,0x37,0x37,0x37,0x34,0x37,
0x36,0x36,0x37,0x37,0x35,0x36,0x36,0x38,0x39,0x3b,0x3b,0x3b,0x39,0x39,0x39,0x3b,
0x3a,0x38,0x38,0x38,0x37,0x38,0x39,0x3a,0x3b,0x3a,0x38,0x3a,0x3b,0x3c,0x3c,0x3c,
0x3a,0x3b,0x39,0x3a,0x3a,0x3a,0x38,0x36,0x36,0x35,0x34,0x37,0x38,0x38,0x39,0x39,
0x38,0x3b,0x3b,0x3a,0x38,0x37,0x38,0x39,0x39,0x39,0x38,0x39,0x37,0x36,0x36,0x36,
0x36,0x3a,0x3b,0x3a,0x37,0x37,0x38,0x3b,0x3c,0x3b,0x38,0x39,0x37,0x35,0x35,0x36,
0x37,0x39,0x37,0x36,0x36,0x38,0x3a,0x3c,0x3b,0x3a,0x3a,0x3b,0x3a,0x39,0x39,0x3a,
0x39,0x39,0x38,0x39,0x38,0x37,0x36,0x39,0x3a,0x3b,0x3c,0x3c,0x3b,0x3e,0x3e,0x3e,
0x3e,0x3d,0x3d,0x3b,0x38,0x36,0x34,0x35,0x36,0x35,0x35,0x35,0x35,0x36,0x36,0x37,
0x39,0x3b,0x3a,0x37,0x37,0x35,0x33,0x35,0x36,0x38,0x39,0x39,0x38,0x3a,0x3b,0x3d,
0x3c,0x3b,0x39,0x3a,0x39,0x36,0x34,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3d,0x3c,0x3b,
0x3b,0x3a,0x39,0x39,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3c,0x3c,0x39,0x3a,0x3a,0x38,
0x37,0x36,0x36,0x37,0x37,0x37,0x38,0x39,0x39,0x3b,0x3b,0x3b,0x39,0x38,0x37,0x39,
0x3a,0x3a,0x3a,0x3b,0x39,0x38,0x38,0x39,0x39,0x3a,0x39,0x38,0x36,0x38,0x39,0x3a,
0x3b,0x3b,0x3a,0x39,0x37,0x36,0x37,0x38,0x35,0x35,0x34,0x34,0x33,0x35,0x36,0x39,
0x3a,0x3a,0x38,0x38,0x37,0x39,0x3c,0x3d,0x3c,0x3b,0x38,0x36,0x36,0x38,0x3a,0x3b,
0x39,0x38,0x38,0x3a,0x3a,0x3a,0x3a,0x3b,0x3c,0x3d,0x3c,0x3b,0x3b,0x3b,0x39,0x38,
0x37,0x39,0x38,0x38,0x36,0x36,0x35,0x36,0x36,0x37,0x36,0x36,0x38,0x38,0x38,0x39,
0x38,0x36,0x36,0x36,0x36,0x37,0x37,0x36,0x36,0x38,0x36,0x36,0x38,0x3a,0x3b,0x3e,
0x3e,0x3e,0x3e,0x3b,0x38,0x38,0x38,0x3a,0x38,0x39,0x37,0x38,0x38,0x3a,0x3b,0x3a,
0x3b,0x3b,0x3d,0x3b,0x3a,0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,0x38,0x38,0x3a,0x3b,
0x38,0x36,0x35,0x35,0x35,0x36,0x38,0x39,0x39,0x38,0x37,0x38,0x39,0x3a,0x3a,0x3a,
0x38,0x38,0x38,0x38,0x33,0x34,0x35,0x36,0x36,0x38,0x38,0x39,0x38,0x37,0x38,0x38,
0x38,0x39,0x38,0x35,0x31,0x32,0x34,0x36,0x38,0x38,0x3a,0x3c,0x3c,0x3c,0x3e,0x3e,
0x3c,0x3b,0x39,0x3a,0x38,0x38,0x36,0x38,0x39,0x39,0x35,0x3a,0x39,0x3a,0x3a,0x3a,
0x38,0x3b,0x3a,0x39,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x39,0x3b,0x3b,0x39,0x36,0x36,
0x37,0x3a,0x3a,0x38,0x36,0x35,0x36,0x38,0x38,0x39,0x38,0x38,0x36,0x36,0x35,0x35,
0x35,0x38,0x38,0x36,0x36,0x35,0x36,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3a,0x39,0x36,
0x36,0x38,0x3a,0x3a,0x37,0x35,0x34,0x36,0x35,0x35,0x36,0x39,0x39,0x3a,0x37,0x36,
0x36,0x38,0x38,0x38,0x38,0x3a,0x39,0x3b,0x39,0x39,0x3a,0x3a,0x39,0x3b,0x3a,0x38,
0x37,0x37,0x37,0x36,0x35,0x35,0x38,0x39,0x39,0x37,0x36,0x35,0x36,0x39,0x3a,0x3b,
0x3c,0x3c,0x3a,0x39,0x37,0x38,0x39,0x38,0x36,0x35,0x33,0x34,0x33,0x34,0x36,0x38,
0x3a,0x3a,0x39,0x3b,0x3b,0x3c,0x3b,0x3a,0x39,0x38,0x36,0x34,0x34,0x35,0x36,0x35,
0x36,0x36,0x36,0x38,0x38,0x38,0x39,0x39,0x38,0x39,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,
0x39,0x3a,0x38,0x37,0x35,0x36,0x39,0x39,0x38,0x38,0x38,0x36,0x36,0x36,0x36,0x37,
0x35,0x33,0x34,0x36,0x36,0x36,0x37,0x37,0x36,0x35,0x35,0x34,0x36,0x38,0x3a,0x3b,
0x3a,0x39,0x39,0x38,0x37,0x38,0x38,0x38,0x36,0x35,0x35,0x36,0x36,0x38,0x39,0x3b,
0x39,0x38,0x37,0x37,0x37,0x37,0x36,0x33,0x34,0x35,0x35,0x35,0x33,0x34,0x34,0x35,
0x34,0x33,0x34,0x37,0x37,0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x38,0x3a,0x39,0x38,
0x35,0x35,0x36,0x37,0x36,0x36,0x35,0x35,0x36,0x36,0x36,0x35,0x32,0x32,0x32,0x34,
0x35,0x36,0x37,0x38,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x35,0x37,0x38,
0x36,0x37,0x38,0x3a,0x38,0x38,0x37,0x35,0x34,0x32,0x31,0x33,0x35,0x36,0x38,0x37,
0x36,0x36,0x35,0x34,0x35,0x36,0x36,0x37,0x36,0x35,0x35,0x37,0x38,0x38,0x37,0x37,
0x36,0x38,0x37,0x37,0x37,0x36,0x35,0x36,0x36,0x37,0x39,0x39,0x38,0x36,0x37,0x38,
0x38,0x3a,0x3a,0x38,0x36,0x36,0x37,0x3a,0x3b,0x3b,0x3a,0x39,0x39,0x39,0x38,0x38,
0x37,0x39,0x39,0x37,0x36,0x36,0x36,0x38,0x37,0x37,0x38,0x37,0x36,0x37,0x36,0x37,
0x35,0x36,0x36,0x37,0x38,0x38,0x36,0x35,0x35,0x35,0x36,0x38,0x38,0x39,0x39,0x38,
0x37,0x36,0x36,0x34,0x36,0x35,0x35,0x36,0x37,0x36,0x36,0x35,0x36,0x39,0x39,0x39,
0x38,0x38,0x36,0x35,0x34,0x36,0x37,0x38,0x37,0x36,0x37,0x38,0x38,0x38,0x38,0x39,
0x39,0x38,0x36,0x36,0x34,0x35,0x36,0x38,0x37,0x38,0x38,0x37,0x36,0x38,0x39,0x3a,
0x3a,0x38,0x36,0x37,0x37,0x38,0x37,0x36,0x36,0x38,0x38,0x39,0x39,0x3a,0x39,0x38,
0x38,0x38,0x37,0x36,0x37,0x38,0x39,0x39,0x37,0x38,0x38,0x37,0x36,0x37,0x38,0x38,
0x36,0x36,0x35,0x35,0x34,0x34,0x34,0x34,0x32,0x34,0x34,0x34,0x35,0x37,0x38,0x3b,
0x3b,0x3c,0x3c,0x3a,0x36,0x35,0x36,0x37,0x34,0x33,0x33,0x34,0x34,0x34,0x34,0x37,
0x38,0x38,0x39,0x3a,0x3a,0x38,0x38,0x38,0x37,0x39,0x38,0x36,0x36,0x36,0x34,0x35,
0x35,0x36,0x39,0x3a,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x38,0x3a,0x3a,0x3a,
0x39,0x38,0x38,0x38,0x37,0x38,0x37,0x36,0x35,0x35,0x35,0x35,0x36,0x38,0x39,0x3a,
0x3a,0x39,0x39,0x38,0x36,0x38,0x37,0x37,0x36,0x36,0x34,0x35,0x34,0x36,0x36,0x38,
0x38,0x39,0x3a,0x3b,0x3a,0x3b,0x3b,0x39,0x3b,0x3a,0x38,0x37,0x35,0x34,0x34,0x36,
0x38,0x3a,0x39,0x38,0x36,0x37,0x38,0x39,0x3a,0x39,0x38,0x38,0x36,0x38,0x38,0x39,
0x38,0x3a,0x3b,0x3b,0x3a,0x3b,0x3a,0x38,0x37,0x37,0x37,0x39,0x38,0x36,0x36,0x35,
0x34,0x36,0x36,0x37,0x37,0x38,0x37,0x36,0x35,0x35,0x35,0x35,0x36,0x38,0x38,0x38,
0x36,0x37,0x36,0x35,0x35,0x34,0x35,0x37,0x36,0x35,0x34,0x34,0x34,0x36,0x38,0x3a,
0x3a,0x3a,0x39,0x36,0x38,0x38,0x38,0x3a,0x39,0x37,0x35,0x34,0x34,0x35,0x36,0x36,
0x35,0x35,0x34,0x36,0x37,0x38,0x38,0x38,0x37,0x35,0x34,0x34,0x36,0x39,0x38,0x37,
0x36,0x36,0x35,0x35,0x36,0x38,0x39,0x38,0x37,0x36,0x38,0x37,0x38,0x39,0x39,0x38,
0x37,0x37,0x36,0x36,0x36,0x36,0x36,0x38,0x38,0x38,0x37,0x36,0x34,0x36,0x36,0x36,
0x36,0x38,0x38,0x38,0x36,0x37,0x37,0x38,0x39,0x39,0x3a,0x39,0x38,0x37,0x36,0x37,
0x3a,0x3b,0x3a,0x38,0x34,0x34,0x35,0x35,0x34,0x34,0x35,0x33,0x32,0x35,0x37,0x39,
0x39,0x39,0x38,0x38,0x37,0x38,0x38,0x36,0x32,0x31,0x31,0x33,0x34,0x36,0x38,0x37,
0x35,0x34,0x33,0x36,0x35,0x36,0x38,0x38,0x37,0x37,0x35,0x34,0x34,0x33,0x33,0x31,
0x31,0x31,0x32,0x32,0x31,0x33,0x35,0x36,0x36,0x38,0x3a,0x3a,0x38,0x37,0x37,0x39,
0x39,0x3b,0x3a,0x39,0x36,0x34,0x34,0x34,0x33,0x34,0x34,0x34,0x35,0x36,0x35,0x36,
0x36,0x36,0x37,0x38,0x38,0x35,0x37,0x36,0x34,0x35,0x36,0x37,0x37,0x38,0x37,0x38,
0x36,0x34,0x33,0x34,0x33,0x34,0x35,0x37,0x36,0x37,0x35,0x35,0x36,0x38,0x38,0x39,
0x38,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x38,0x3a,0x39,0x37,0x36,0x37,0x35,0x35,
0x36,0x37,0x37,0x36,0x33,0x35,0x35,0x36,0x38,0x39,0x39,0x39,0x39,0x38,0x38,0x38,
0x38,0x38,0x39,0x3a,0x37,0x37,0x35,0x35,0x36,0x36,0x36,0x38,0x39,0x38,0x38,0x38,
0x38,0x3a,0x3a,0x3a,0x38,0x3a,0x38,0x37,0x37,0x37,0x35,0x35,0x35,0x35,0x35,0x36,
0x34,0x36,0x37,0x38,0x37,0x37,0x36,0x35,0x35,0x36,0x36,0x36,0x34,0x33,0x34,0x34,
0x35,0x35,0x35,0x35,0x35,0x36,0x34,0x35,0x35,0x35,0x34,0x34,0x33,0x34,0x38,0x37,
0x36,0x37,0x38,0x39,0x38,0x37,0x37,0x38,0x38,0x39,0x38,0x38,0x37,0x36,0x38,0x38,
0x37,0x39,0x39,0x37,0x36,0x36,0x36,0x37,0x35,0x35,0x35,0x35,0x34,0x32,0x32,0x34,
// Line 14
0x39,0x38,0x3a,0x3c,0x3e,0x40,0x3f,0x3d,0x3c,0x39,0x38,0x3a,0x39,0x37,0x38,0x39,
0x38,0x39,0x37,0x36,0x36,0x38,0x38,0x38,0x38,0x3a,0x38,0x38,0x36,0x36,0x37,0x37,
0x35,0x35,0x35,0x35,0x34,0x34,0x35,0x38,0x39,0x3b,0x3b,0x39,0x38,0x38,0x3a,0x3a,
0x39,0x3d,0x3e,0x3f,0x42,0x46,0x4c,0x54,0x5e,0x68,0x71,0x7a,0x82,0x87,0x8f,0x93,
0x96,0x98,0x9a,0x9a,0x98,0x96,0x95,0x96,0x96,0x98,0x98,0x97,0x96,0x95,0x95,0x91,
0x8a,0x84,0x7c,0x72,0x6a,0x62,0x5a,0x53,0x4b,0x46,0x42,0x3e,0x3c,0x3c,0x3a,0x38,
0x37,0x39,0x38,0x36,0x37,0x38,0x39,0x3b,0x3b,0x3b,0x3c,0x3b,0x3b,0x40,0x46,0x4d,
0x55,0x5e,0x66,0x70,0x79,0x83,0x8c,0x93,0x97,0x99,0x9a,0x99,0x98,0x9a,0x99,0x99,
0x9a,0x9a,0x98,0x97,0x95,0x93,0x92,0x90,0x8c,0x86,0x7f,0x77,0x6d,0x66,0x5e,0x58,
0x52,0x4c,0x44,0x40,0x3b,0x3a,0x36,0x37,0x35,0x34,0x35,0x36,0x34,0x36,0x35,0x36,
0x3a,0x3b,0x3b,0x3b,0x3b,0x3e,0x44,0x4a,0x52,0x5b,0x64,0x6d,0x76,0x7f,0x87,0x8e,
0x93,0x96,0x98,0x98,0x97,0x98,0x98,0x97,0x96,0x96,0x94,0x94,0x94,0x94,0x93,0x92,
0x90,0x8c,0x84,0x80,0x74,0x6a,0x63,0x5c,0x55,0x51,0x4a,0x41,0x3b,0x38,0x38,0x38,
0x37,0x37,0x38,0x38,0x36,0x36,0x37,0x39,0x3a,0x3b,0x3b,0x3c,0x3c,0x3e,0x41,0x46,
0x4c,0x54,0x5b,0x63,0x6b,0x75,0x7e,0x86,0x8b,0x90,0x95,0x98,0x9b,0x9c,0x9b,0x9b,
0x9a,0x98,0x96,0x95,0x96,0x98,0x98,0x97,0x96,0x95,0x90,0x88,0x7e,0x76,0x6d,0x67,
0x5d,0x55,0x4d,0x45,0x3e,0x3c,0x3c,0x3e,0x3c,0x3b,0x38,0x37,0x36,0x38,0x37,0x3b,
0x3b,0x3b,0x3b,0x3b,0x3b,0x3e,0x41,0x44,0x48,0x4d,0x53,0x5b,0x65,0x6f,0x79,0x82,
0x88,0x8a,0x8f,0x91,0x92,0x95,0x96,0x98,0x98,0x98,0x97,0x97,0x96,0x98,0x9a,0x9b,
0x99,0x96,0x92,0x8e,0x88,0x82,0x78,0x6f,0x67,0x5f,0x55,0x4e,0x47,0x43,0x3f,0x3c,
0x3a,0x3a,0x3a,0x39,0x39,0x39,0x38,0x36,0x38,0x39,0x3a,0x3c,0x3d,0x3d,0x3b,0x3d,
0x40,0x47,0x4e,0x56,0x5f,0x69,0x71,0x7a,0x83,0x8b,0x91,0x96,0x98,0x98,0x9b,0x9b,
0x9b,0x9b,0x9a,0x9a,0x9a,0x98,0x97,0x99,0x98,0x96,0x93,0x90,0x8b,0x84,0x7c,0x72,
0x69,0x63,0x5c,0x53,0x4a,0x43,0x3f,0x3f,0x3e,0x3e,0x3c,0x40,0x3e,0x3c,0x3b,0x3b,
0x3b,0x3d,0x3b,0x3b,0x39,0x3a,0x3a,0x3c,0x3f,0x45,0x4d,0x54,0x5a,0x63,0x6b,0x74,
0x7d,0x86,0x8e,0x92,0x94,0x96,0x97,0x9a,0x9a,0x9b,0x9b,0x99,0x97,0x96,0x96,0x98,
0x9a,0x9a,0x99,0x96,0x91,0x8c,0x84,0x7f,0x75,0x6c,0x65,0x5d,0x54,0x4c,0x44,0x3f,
0x3d,0x3d,0x3d,0x3c,0x3d,0x3c,0x3b,0x3c,0x3d,0x3b,0x3d,0x3e,0x3e,0x3e,0x3e,0x3c,
0x3b,0x3c,0x3c,0x3d,0x3c,0x3c,0x3c,0x3c,0x3b,0x3a,0x38,0x39,0x3b,0x3d,0x3d,0x3d,
0x3d,0x3c,0x3b,0x3d,0x3b,0x3b,0x3c,0x3e,0x3e,0x3d,0x3b,0x3b,0x3b,0x3c,0x3c,0x3c,
0x3c,0x3c,0x3b,0x3b,0x3a,0x39,0x3b,0x3b,0x38,0x3b,0x3b,0x3c,0x3c,0x3e,0x3d,0x3e,
0x3e,0x3f,0x3f,0x40,0x40,0x3e,0x3f,0x3e,0x3d,0x3d,0x3b,0x3a,0x3b,0x3c,0x3d,0x3c,
0x3b,0x3b,0x3b,0x3b,0x3a,0x3a,0x39,0x39,0x38,0x38,0x38,0x38,0x36,0x37,0x38,0x3b,
0x3b,0x3d,0x3d,0x3e,0x3b,0x3a,0x3d,0x42,0x47,0x4e,0x55,0x5b,0x64,0x6c,0x74,0x7f,
0x87,0x8c,0x90,0x92,0x92,0x94,0x97,0x99,0x9a,0x9a,0x99,0x99,0x97,0x97,0x96,0x97,
0x95,0x93,0x92,0x92,0x93,0x98,0x9a,0x9a,0x98,0x97,0x96,0x98,0x98,0x99,0x98,0x98,
0x96,0x95,0x95,0x97,0x98,0x9a,0x99,0x99,0x9a,0x9b,0x9b,0x9b,0x99,0x98,0x95,0x92,
0x8d,0x86,0x7c,0x70,0x63,0x5a,0x53,0x4f,0x4a,0x44,0x40,0x3e,0x3a,0x3a,0x3a,0x3c,
0x3d,0x3e,0x3c,0x3a,0x36,0x3a,0x37,0x36,0x37,0x3a,0x3c,0x3b,0x38,0x35,0x34,0x37,
0x3a,0x3a,0x3b,0x3b,0x3c,0x3d,0x3b,0x39,0x3b,0x3c,0x3f,0x41,0x3e,0x3b,0x3b,0x3a,
0x38,0x38,0x37,0x35,0x34,0x36,0x35,0x35,0x35,0x37,0x3a,0x3b,0x39,0x3a,0x3b,0x3d,
0x3b,0x3b,0x39,0x38,0x3a,0x3b,0x3a,0x37,0x34,0x34,0x35,0x36,0x36,0x35,0x34,0x34,
0x33,0x37,0x39,0x3c,0x3c,0x3c,0x39,0x38,0x38,0x3a,0x3c,0x3e,0x3c,0x39,0x38,0x38,
0x39,0x3d,0x3d,0x3c,0x3d,0x3f,0x3e,0x3b,0x39,0x39,0x3b,0x3b,0x39,0x38,0x37,0x38,
0x3a,0x39,0x38,0x39,0x38,0x38,0x37,0x38,0x38,0x39,0x39,0x3a,0x38,0x39,0x39,0x3a,
0x3a,0x3b,0x3a,0x39,0x38,0x38,0x37,0x38,0x38,0x39,0x3b,0x3c,0x3b,0x3c,0x3b,0x3b,
0x3a,0x39,0x38,0x38,0x37,0x35,0x32,0x33,0x33,0x35,0x37,0x3a,0x3a,0x3b,0x3b,0x3b,
0x3c,0x3b,0x38,0x3a,0x39,0x38,0x36,0x34,0x32,0x33,0x37,0x3e,0x45,0x50,0x58,0x5f,
0x68,0x71,0x7a,0x84,0x8a,0x8f,0x94,0x96,0x95,0x92,0x90,0x90,0x91,0x93,0x95,0x95,
0x96,0x96,0x96,0x97,0x97,0x98,0x99,0x9b,0x9a,0x99,0x98,0x98,0x9a,0x9a,0x98,0x98,
0x98,0x98,0x96,0x9a,0x98,0x98,0x98,0x98,0x97,0x98,0x98,0x98,0x99,0x9a,0x99,0x98,
0x95,0x94,0x94,0x91,0x8b,0x81,0x78,0x70,0x67,0x60,0x58,0x53,0x4d,0x48,0x42,0x3e,
0x3c,0x3c,0x3e,0x3d,0x3b,0x39,0x38,0x3a,0x3a,0x3b,0x3a,0x39,0x38,0x39,0x38,0x38,
0x38,0x38,0x3a,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,0x3a,0x3a,0x3b,0x3b,0x3b,
0x38,0x39,0x3b,0x3c,0x3b,0x3b,0x3a,0x38,0x37,0x37,0x37,0x39,0x39,0x39,0x38,0x38,
0x36,0x36,0x36,0x38,0x38,0x39,0x39,0x38,0x38,0x38,0x3a,0x3b,0x3a,0x37,0x37,0x36,
0x36,0x34,0x36,0x35,0x34,0x37,0x39,0x3b,0x3b,0x3c,0x3b,0x3d,0x3d,0x3e,0x3d,0x3b,
0x38,0x38,0x38,0x39,0x38,0x37,0x36,0x36,0x36,0x37,0x38,0x3b,0x3c,0x3b,0x3c,0x3c,
0x3c,0x3c,0x3c,0x3c,0x3e,0x43,0x47,0x4a,0x53,0x5a,0x61,0x6b,0x72,0x7b,0x84,0x8c,
0x8e,0x92,0x94,0x95,0x94,0x94,0x94,0x95,0x95,0x96,0x94,0x94,0x93,0x93,0x93,0x93,
0x94,0x96,0x96,0x95,0x96,0x98,0x9b,0x9a,0x98,0x98,0x99,0x98,0x98,0x96,0x94,0x94,
0x94,0x97,0x97,0x97,0x98,0x9a,0x98,0x96,0x95,0x97,0x98,0x98,0x94,0x90,0x89,0x82,
0x78,0x70,0x67,0x5e,0x57,0x4f,0x49,0x44,0x3f,0x3b,0x3a,0x38,0x38,0x38,0x38,0x38,
0x38,0x39,0x39,0x38,0x38,0x39,0x3a,0x3c,0x3a,0x39,0x3a,0x3a,0x38,0x3b,0x3b,0x3d,
0x3c,0x3c,0x3a,0x3a,0x39,0x39,0x36,0x3a,0x38,0x38,0x38,0x3a,0x3a,0x3d,0x3c,0x3b,
0x3b,0x3b,0x3b,0x3b,0x39,0x39,0x3d,0x43,0x47,0x4d,0x53,0x5b,0x62,0x6c,0x75,0x7e,
0x87,0x8c,0x91,0x95,0x98,0x9b,0x9b,0x9b,0x98,0x98,0x98,0x97,0x94,0x93,0x92,0x93,
0x93,0x94,0x94,0x94,0x94,0x94,0x94,0x95,0x95,0x97,0x98,0x98,0x98,0x98,0x99,0x98,
0x9b,0x9b,0x9a,0x9a,0x98,0x97,0x97,0x97,0x97,0x98,0x99,0x99,0x98,0x97,0x93,0x90,
0x8b,0x86,0x7c,0x73,0x69,0x60,0x57,0x4f,0x47,0x43,0x3f,0x3b,0x3a,0x3a,0x3b,0x3c,
0x3c,0x3c,0x3c,0x3c,0x3b,0x3a,0x3c,0x3b,0x3b,0x3d,0x3c,0x3b,0x3b,0x39,0x37,0x39,
0x39,0x3b,0x38,0x3b,0x3b,0x3b,0x3a,0x3a,0x3a,0x3c,0x3c,0x3c,0x3b,0x39,0x37,0x37,
0x36,0x37,0x38,0x38,0x38,0x39,0x39,0x37,0x36,0x39,0x3c,0x3c,0x3b,0x3d,0x3b,0x3b,
0x39,0x39,0x3a,0x3a,0x38,0x38,0x37,0x37,0x36,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x3b,
0x3a,0x38,0x3a,0x3a,0x38,0x38,0x38,0x38,0x39,0x3a,0x3b,0x3b,0x3b,0x3a,0x38,0x3a,
0x3a,0x39,0x38,0x38,0x38,0x3a,0x39,0x3a,0x39,0x3a,0x3a,0x3c,0x3a,0x3a,0x3b,0x3d,
0x3e,0x40,0x44,0x4a,0x51,0x5a,0x62,0x6b,0x75,0x7d,0x83,0x88,0x8c,0x91,0x96,0x98,
0x99,0x99,0x97,0x94,0x94,0x98,0x9c,0x9e,0x9b,0x9b,0x98,0x98,0x98,0x98,0x9a,0x9b,
0x99,0x97,0x96,0x96,0x98,0x9a,0x9a,0x9b,0x9b,0x9b,0x99,0x98,0x98,0x9b,0x9b,0x9a,
0x97,0x99,0x99,0x98,0x98,0x97,0x97,0x95,0x94,0x94,0x96,0x98,0x9b,0x9b,0x9a,0x99,
0x98,0x99,0x9a,0x9a,0x98,0x98,0x96,0x96,0x96,0x98,0x9a,0x99,0x96,0x95,0x96,0x97,
0x97,0x97,0x96,0x97,0x97,0x98,0x97,0x98,0x99,0x99,0x9a,0x99,0x98,0x98,0x97,0x97,
0x96,0x96,0x96,0x96,0x98,0x98,0x97,0x98,0x96,0x96,0x97,0x97,0x96,0x98,0x98,0x98,
0x97,0x95,0x91,0x8d,0x87,0x81,0x78,0x6d,0x64,0x5d,0x57,0x51,0x4b,0x47,0x44,0x41,
0x3f,0x3d,0x3c,0x3b,0x38,0x37,0x36,0x37,0x38,0x3a,0x3c,0x3c,0x3b,0x3c,0x3b,0x3b,
0x3b,0x3b,0x3a,0x3b,0x3b,0x3b,0x3a,0x39,0x38,0x3b,0x3b,0x3c,0x3d,0x3e,0x3e,0x3e,
0x3d,0x3d,0x3c,0x3e,0x3d,0x3c,0x3b,0x3a,0x38,0x38,0x38,0x39,0x3b,0x3a,0x3a,0x3b,
0x3a,0x3a,0x38,0x3a,0x3a,0x3b,0x3b,0x3c,0x3a,0x3a,0x3a,0x39,0x38,0x38,0x38,0x3a,
0x38,0x38,0x37,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x3c,0x38,0x38,0x3b,0x3c,0x3c,0x3b,
0x38,0x36,0x36,0x38,0x3b,0x3c,0x3e,0x3c,0x39,0x39,0x3a,0x3a,0x3c,0x3c,0x3b,0x3c,
0x3a,0x38,0x36,0x38,0x37,0x3a,0x3b,0x3a,0x38,0x38,0x37,0x37,0x36,0x37,0x37,0x38,
0x38,0x38,0x38,0x3a,0x3a,0x3b,0x3b,0x38,0x38,0x38,0x38,0x36,0x3a,0x3b,0x3b,0x3c,
0x3a,0x3a,0x3d,0x3c,0x3a,0x3a,0x3a,0x39,0x36,0x36,0x35,0x37,0x37,0x38,0x35,0x37,
0x37,0x38,0x3a,0x3a,0x38,0x36,0x34,0x35,0x38,0x39,0x38,0x38,0x36,0x35,0x36,0x38,
0x3a,0x3b,0x3a,0x39,0x37,0x3a,0x3b,0x3b,0x3c,0x3c,0x3b,0x3c,0x3b,0x3a,0x38,0x39,
0x38,0x37,0x35,0x36,0x36,0x38,0x38,0x38,0x3a,0x3c,0x3c,0x3c,0x3c,0x3c,0x3d,0x3e,
// Line 15
0x3a,0x3b,0x3b,0x3a,0x36,0x36,0x36,0x39,0x38,0x36,0x34,0x33,0x35,0x36,0x38,0x3a,
0x39,0x37,0x36,0x36,0x35,0x36,0x36,0x36,0x35,0x34,0x33,0x33,0x34,0x37,0x38,0x38,
0x36,0x36,0x36,0x35,0x34,0x35,0x34,0x35,0x36,0x36,0x35,0x35,0x36,0x38,0x36,0x3b,
0x38,0x3b,0x3d,0x3e,0x3b,0x3a,0x36,0x39,0x43,0x52,0x62,0x72,0x7a,0x7b,0x72,0x66,
0x5b,0x58,0x5d,0x66,0x71,0x79,0x7a,0x75,0x6d,0x66,0x62,0x65,0x6a,0x72,0x77,0x78,
0x71,0x6c,0x67,0x64,0x60,0x62,0x68,0x6f,0x75,0x78,0x78,0x76,0x6a,0x61,0x5f,0x62,
0x69,0x72,0x77,0x77,0x73,0x6e,0x67,0x60,0x5f,0x62,0x69,0x72,0x78,0x78,0x77,0x71,
0x6a,0x64,0x61,0x65,0x6b,0x74,0x78,0x7a,0x78,0x72,0x6a,0x64,0x62,0x67,0x6f,0x78,
0x7f,0x81,0x7c,0x72,0x68,0x62,0x61,0x64,0x6a,0x70,0x73,0x74,0x74,0x75,0x7e,0x89,
0x97,0xa5,0xac,0xac,0xa6,0x9c,0x8c,0x7f,0x72,0x69,0x61,0x59,0x4f,0x48,0x40,0x3b,
0x38,0x3d,0x4a,0x5b,0x6e,0x80,0x8e,0x98,0x9b,0x9d,0x9f,0xa1,0xa2,0xa2,0x9d,0x95,
0x8a,0x7c,0x6e,0x64,0x5f,0x62,0x69,0x72,0x7a,0x81,0x87,0x8c,0x90,0x99,0xa1,0xa6,
0xa7,0xa5,0xa0,0x9b,0x97,0x97,0x98,0x9a,0x96,0x8d,0x7d,0x6b,0x5c,0x58,0x58,0x62,
0x70,0x7e,0x83,0x81,0x78,0x6b,0x64,0x63,0x67,0x6e,0x78,0x7c,0x79,0x74,0x6a,0x64,
0x60,0x63,0x6a,0x74,0x7a,0x7e,0x7b,0x73,0x6a,0x66,0x65,0x6a,0x6f,0x75,0x78,0x77,
0x71,0x6a,0x64,0x60,0x5f,0x5d,0x59,0x52,0x48,0x3d,0x30,0x2c,0x2d,0x34,0x3b,0x41,
0x4d,0x5b,0x68,0x74,0x78,0x78,0x72,0x68,0x60,0x60,0x66,0x71,0x7b,0x7e,0x79,0x71,
0x66,0x5e,0x5d,0x62,0x6a,0x74,0x79,0x79,0x75,0x71,0x6b,0x65,0x62,0x61,0x5d,0x55,
0x48,0x3b,0x2e,0x28,0x26,0x2b,0x34,0x3d,0x4a,0x56,0x5e,0x67,0x72,0x81,0x8e,0x99,
0x9c,0x9b,0x94,0x86,0x74,0x64,0x54,0x48,0x3e,0x39,0x38,0x3b,0x42,0x4e,0x5b,0x6e,
0x79,0x87,0x91,0x99,0x9c,0x9f,0x9f,0xa0,0xa1,0x9f,0x99,0x8a,0x7d,0x6e,0x60,0x5c,
0x5d,0x64,0x73,0x7c,0x80,0x80,0x77,0x6b,0x62,0x60,0x65,0x6f,0x75,0x7a,0x79,0x72,
0x64,0x5b,0x59,0x61,0x6a,0x75,0x79,0x79,0x74,0x6b,0x62,0x5c,0x58,0x58,0x58,0x54,
0x4b,0x3f,0x36,0x2d,0x2c,0x35,0x3f,0x47,0x4b,0x46,0x3b,0x33,0x30,0x38,0x4b,0x62,
0x71,0x79,0x78,0x71,0x65,0x5a,0x50,0x4b,0x48,0x43,0x3b,0x34,0x2e,0x2f,0x35,0x3b,
0x3f,0x41,0x40,0x3b,0x37,0x35,0x33,0x33,0x33,0x33,0x34,0x3d,0x49,0x57,0x6b,0x79,
0x83,0x8c,0x92,0x98,0x9e,0xa5,0xa8,0xa6,0xa1,0x9c,0x98,0x97,0x9a,0x9e,0x9f,0x97,
0x86,0x72,0x61,0x59,0x5b,0x66,0x75,0x7d,0x7e,0x79,0x71,0x68,0x60,0x5b,0x58,0x51,
0x44,0x38,0x2d,0x27,0x27,0x2d,0x36,0x42,0x4d,0x57,0x60,0x6d,0x79,0x87,0x95,0x9f,
0xa2,0x9f,0x93,0x86,0x78,0x6a,0x5d,0x52,0x45,0x3b,0x37,0x3a,0x44,0x57,0x6b,0x7a,
0x81,0x7e,0x73,0x66,0x5e,0x58,0x54,0x50,0x47,0x3e,0x37,0x39,0x47,0x5e,0x76,0x87,
0x8a,0x81,0x71,0x64,0x5d,0x61,0x6a,0x73,0x77,0x7a,0x7f,0x87,0x92,0x9f,0xa6,0xa9,
0xa8,0xa4,0x9e,0x9b,0x9b,0x9d,0x9e,0x9e,0x9f,0xa2,0xa5,0xa6,0xa2,0x9b,0x8d,0x7c,
0x6d,0x64,0x60,0x60,0x63,0x6a,0x72,0x7f,0x87,0x92,0x9a,0x9d,0x99,0x8f,0x7e,0x6e,
0x60,0x53,0x45,0x3c,0x36,0x36,0x3b,0x47,0x58,0x6c,0x7a,0x81,0x7e,0x75,0x69,0x5b,
0x51,0x4b,0x47,0x44,0x3e,0x37,0x33,0x30,0x2e,0x35,0x3e,0x49,0x57,0x65,0x71,0x78,
0x79,0x77,0x6f,0x69,0x64,0x65,0x6d,0x75,0x7a,0x7c,0x7c,0x80,0x89,0x96,0xa4,0xae,
0xaf,0xa9,0xa0,0x98,0x95,0x97,0x9c,0xa0,0x9e,0x98,0x88,0x75,0x65,0x5c,0x5b,0x64,
0x6f,0x7b,0x82,0x7f,0x72,0x64,0x5b,0x5d,0x68,0x77,0x7f,0x7f,0x78,0x6e,0x65,0x61,
0x62,0x64,0x62,0x57,0x44,0x32,0x2a,0x32,0x48,0x64,0x79,0x84,0x80,0x76,0x69,0x5f,
0x56,0x50,0x4b,0x40,0x37,0x34,0x39,0x4b,0x64,0x7b,0x83,0x82,0x77,0x69,0x5a,0x50,
0x4b,0x48,0x44,0x3c,0x32,0x2c,0x2d,0x35,0x40,0x48,0x47,0x40,0x36,0x32,0x35,0x3f,
0x4e,0x5c,0x6b,0x77,0x81,0x8e,0x98,0x9d,0x9c,0x92,0x81,0x6f,0x62,0x5e,0x61,0x68,
0x6e,0x77,0x7f,0x88,0x8f,0x97,0x9c,0x9b,0x93,0x83,0x6f,0x5f,0x55,0x58,0x64,0x71,
0x7a,0x7f,0x7a,0x6f,0x64,0x5c,0x58,0x51,0x4c,0x42,0x36,0x30,0x33,0x40,0x58,0x6f,
0x84,0x92,0x95,0x97,0x96,0x99,0x9c,0xa0,0xa2,0x9e,0x94,0x85,0x75,0x69,0x61,0x60,
0x60,0x66,0x6d,0x75,0x7c,0x85,0x8c,0x95,0x9a,0x9a,0x93,0x86,0x73,0x61,0x51,0x47,
0x3f,0x3e,0x3b,0x3b,0x40,0x4a,0x57,0x6a,0x7b,0x89,0x94,0x97,0x97,0x9b,0x9f,0xa4,
0xa5,0xa2,0x99,0x8b,0x7b,0x6d,0x60,0x5d,0x60,0x68,0x74,0x7d,0x7f,0x7b,0x71,0x66,
0x61,0x60,0x65,0x6d,0x72,0x75,0x78,0x7c,0x82,0x8f,0x9c,0xa7,0xaa,0xa8,0xa1,0x9c,
0x99,0x99,0x9a,0x9d,0x9d,0x9e,0x9e,0x9f,0x9e,0x9e,0x98,0x8d,0x7c,0x6a,0x5e,0x58,
0x5e,0x67,0x6f,0x75,0x77,0x74,0x6d,0x65,0x5e,0x59,0x54,0x4c,0x42,0x3b,0x34,0x2d,
0x2a,0x2b,0x30,0x3c,0x49,0x5a,0x69,0x73,0x76,0x75,0x6d,0x65,0x5d,0x56,0x50,0x4a,
0x45,0x3f,0x35,0x30,0x2c,0x2d,0x36,0x42,0x4e,0x5f,0x6b,0x74,0x78,0x75,0x6f,0x68,
0x60,0x5c,0x58,0x54,0x49,0x3e,0x37,0x38,0x44,0x5b,0x75,0x87,0x8c,0x81,0x6e,0x5e,
0x56,0x5d,0x69,0x77,0x7f,0x7e,0x76,0x6a,0x5f,0x5d,0x5f,0x65,0x6d,0x74,0x78,0x78,
0x74,0x6c,0x66,0x64,0x66,0x6b,0x74,0x79,0x7b,0x76,0x6e,0x65,0x60,0x60,0x65,0x6e,
0x72,0x74,0x74,0x75,0x79,0x83,0x8f,0x9a,0x9d,0x95,0x85,0x71,0x5e,0x4f,0x44,0x40,
0x3e,0x3d,0x3e,0x3d,0x3c,0x3e,0x3f,0x3c,0x39,0x37,0x34,0x30,0x31,0x31,0x32,0x34,
0x36,0x36,0x35,0x35,0x34,0x37,0x38,0x3a,0x3b,0x3d,0x3b,0x3b,0x3b,0x3a,0x37,0x36,
0x37,0x3e,0x4b,0x5b,0x6d,0x7e,0x89,0x90,0x96,0x9d,0xa2,0xa6,0xa7,0xa4,0x9d,0x8f,
0x7f,0x70,0x64,0x59,0x50,0x4b,0x45,0x40,0x3e,0x3b,0x36,0x36,0x37,0x39,0x3c,0x3d,
0x3c,0x3a,0x35,0x31,0x30,0x34,0x38,0x3b,0x3b,0x39,0x35,0x31,0x30,0x35,0x3f,0x4d,
0x5b,0x6a,0x78,0x85,0x93,0x9f,0xa4,0xa2,0x97,0x87,0x75,0x66,0x5e,0x5d,0x62,0x6a,
0x72,0x7c,0x87,0x91,0x99,0x9b,0x96,0x8d,0x7f,0x6d,0x5a,0x4d,0x43,0x40,0x3c,0x3a,
0x37,0x38,0x39,0x3b,0x3f,0x42,0x42,0x3f,0x38,0x34,0x35,0x3c,0x48,0x5a,0x6a,0x78,
0x83,0x8b,0x91,0x97,0x9e,0xa3,0xa6,0xa7,0xa3,0x9c,0x90,0x81,0x70,0x68,0x64,0x64,
0x66,0x6e,0x75,0x7d,0x83,0x88,0x8b,0x98,0x9f,0xa5,0xa8,0xa6,0x9d,0x91,0x81,0x73,
0x68,0x5f,0x56,0x4e,0x45,0x3e,0x38,0x37,0x3c,0x48,0x5a,0x6d,0x7d,0x8b,0x93,0x97,
0x98,0x96,0x8f,0x85,0x75,0x65,0x59,0x57,0x5b,0x69,0x78,0x7e,0x7b,0x73,0x66,0x5d,
0x5e,0x66,0x71,0x7e,0x7f,0x79,0x72,0x6c,0x69,0x69,0x6a,0x6c,0x6f,0x72,0x71,0x74,
0x79,0x84,0x8f,0x9b,0xa3,0xa9,0xaa,0xa7,0xa0,0x9c,0x9a,0x9a,0x9b,0x9c,0x9e,0xa3,
0xa4,0xa4,0x9e,0x94,0x85,0x74,0x65,0x58,0x4f,0x4a,0x44,0x3f,0x3b,0x37,0x36,0x38,
0x39,0x3d,0x3f,0x3e,0x3d,0x39,0x36,0x36,0x35,0x34,0x30,0x30,0x36,0x41,0x53,0x66,
0x75,0x7c,0x78,0x6f,0x64,0x5d,0x57,0x55,0x51,0x4a,0x40,0x35,0x2e,0x2d,0x31,0x38,
0x3f,0x48,0x53,0x5d,0x68,0x72,0x7f,0x8a,0x93,0x98,0x98,0x92,0x87,0x76,0x62,0x53,
0x45,0x3e,0x3b,0x39,0x36,0x36,0x34,0x33,0x33,0x38,0x40,0x50,0x60,0x6f,0x75,0x78,
0x71,0x66,0x5d,0x58,0x5d,0x68,0x72,0x79,0x7a,0x76,0x6f,0x68,0x65,0x6a,0x70,0x75,
0x75,0x75,0x75,0x79,0x81,0x8e,0x9b,0xa6,0xac,0xac,0xa7,0xa1,0x9b,0x97,0x97,0x98,
0x97,0x95,0x8d,0x80,0x6f,0x61,0x57,0x56,0x60,0x6f,0x7c,0x81,0x79,0x6d,0x61,0x59,
0x54,0x51,0x4e,0x46,0x3a,0x2f,0x27,0x28,0x30,0x3c,0x40,0x40,0x38,0x2d,0x2a,0x2f,
0x3b,0x52,0x67,0x78,0x7c,0x7b,0x73,0x6b,0x62,0x5c,0x55,0x4d,0x40,0x38,0x37,0x40,
0x51,0x68,0x7a,0x83,0x81,0x77,0x68,0x5d,0x54,0x4d,0x46,0x3e,0x34,0x30,0x36,0x4b,
0x64,0x7b,0x84,0x80,0x75,0x66,0x5a,0x57,0x57,0x54,0x4b,0x3e,0x35,0x3b,0x4e,0x69,
0x7d,0x8d,0x8b,0x7c,0x68,0x5a,0x56,0x5e,0x66,0x6d,0x72,0x76,0x7c,0x87,0x92,0x9c,
0xa0,0x9a,0x89,0x74,0x62,0x57,0x56,0x5e,0x68,0x75,0x81,0x8c,0x95,0x9f,0xa4,0xa1,
0x94,0x86,0x73,0x62,0x58,0x56,0x5a,0x66,0x71,0x7c,0x87,0x93,0x9a,0x9e,0x9d,0x93,
0x85,0x74,0x64,0x56,0x4b,0x42,0x3c,0x3a,0x3b,0x42,0x4f,0x5f,0x6e,0x7f,0x88,0x8f,
0x93,0x95,0x94,0x8f,0x84,0x77,0x69,0x5e,0x59,0x5f,0x6a,0x76,0x7f,0x8a,0x92,0x97,
0x9c,0x9c,0x94,0x87,0x73,0x61,0x56,0x58,0x61,0x6b,0x78,0x80,0x89,0x92,0x98,0x9f,
0xa4,0xa7,0xa5,0xa1,0x9a,0x95,0x94,0x94,0x95,0x99,0x9c,0xa0,0xa2,0xa3,0xa0,0x9e,
0x9c,0x9d,0x9e,0x9d,0x96,0x8b,0x7b,0x6b,0x5e,0x5b,0x5d,0x66,0x71,0x7c,0x81,0x86,
0x8b,0x93,0x9b,0x9d,0x95,0x84,0x6e,0x5b,0x52,0x58,0x63,0x71,0x7c,0x7e,0x78,0x6d,
0x61,0x5b,0x54,0x52,0x4b,0x42,0x3b,0x34,0x30,0x35,0x39,0x3e,0x45,0x4d,0x56,0x62,
0x6c,0x75,0x7f,0x89,0x93,0x9a,0xa1,0xa5,0xa7,0xa8,0xa3,0x9d,0x9b,0x9c,0xa1,0xa6,
0xa7,0xa6,0xa4,0xa1,0x9c,0x9c,0x9c,0x9d,0x9a,0x94,0x89,0x7e,0x70,0x65,0x58,0x4e,
// Line 16
0x36,0x35,0x34,0x34,0x33,0x34,0x34,0x35,0x35,0x38,0x39,0x39,0x39,0x39,0x38,0x38,
0x38,0x3a,0x38,0x37,0x35,0x35,0x36,0x35,0x34,0x35,0x36,0x38,0x38,0x37,0x37,0x38,
0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x36,0x34,0x38,0x3a,0x3b,0x3b,0x39,0x36,0x36,
0x35,0x38,0x38,0x3b,0x39,0x36,0x34,0x36,0x3c,0x4d,0x5f,0x71,0x7b,0x7e,0x74,0x67,
0x5c,0x59,0x5f,0x69,0x72,0x79,0x7b,0x74,0x6a,0x62,0x60,0x62,0x69,0x71,0x76,0x79,
0x75,0x70,0x68,0x61,0x5e,0x62,0x69,0x71,0x76,0x79,0x77,0x73,0x6a,0x65,0x60,0x65,
0x6a,0x71,0x76,0x76,0x73,0x6e,0x65,0x5e,0x5d,0x61,0x68,0x6f,0x73,0x74,0x73,0x6e,
0x66,0x5f,0x5b,0x5d,0x61,0x69,0x6e,0x71,0x6f,0x69,0x61,0x5c,0x5b,0x61,0x6a,0x74,
0x79,0x7b,0x77,0x70,0x66,0x62,0x60,0x63,0x69,0x6b,0x6d,0x70,0x70,0x74,0x7b,0x86,
0x92,0x9d,0xa7,0xaa,0xa8,0x9e,0x8f,0x7d,0x70,0x63,0x59,0x55,0x51,0x4b,0x41,0x38,
0x32,0x38,0x43,0x54,0x66,0x79,0x87,0x91,0x93,0x94,0x97,0x9c,0x9d,0x9d,0x9b,0x94,
0x87,0x78,0x67,0x5a,0x55,0x58,0x60,0x6d,0x78,0x7d,0x7a,0x72,0x66,0x5c,0x5e,0x62,
0x6b,0x75,0x7a,0x78,0x71,0x66,0x5e,0x5f,0x63,0x69,0x6e,0x70,0x6f,0x70,0x74,0x7e,
0x8b,0x9b,0xa7,0xab,0xaa,0xa4,0x9b,0x95,0x94,0x96,0x9b,0x9b,0x94,0x89,0x79,0x69,
0x5c,0x53,0x4a,0x42,0x3a,0x33,0x33,0x40,0x52,0x66,0x78,0x7f,0x7a,0x70,0x63,0x5b,
0x55,0x52,0x4c,0x42,0x38,0x34,0x3a,0x4b,0x60,0x75,0x81,0x81,0x75,0x66,0x58,0x50,
0x4d,0x4c,0x47,0x41,0x38,0x33,0x31,0x35,0x3b,0x44,0x4a,0x51,0x59,0x65,0x71,0x7f,
0x8c,0x93,0x95,0x92,0x89,0x7e,0x70,0x60,0x50,0x46,0x40,0x3e,0x3b,0x3f,0x3d,0x3b,
0x3b,0x3d,0x3f,0x45,0x4d,0x5a,0x69,0x76,0x82,0x8d,0x94,0x96,0x92,0x87,0x7a,0x6b,
0x5c,0x50,0x47,0x41,0x3b,0x39,0x38,0x37,0x36,0x39,0x3b,0x3d,0x3d,0x3b,0x34,0x31,
0x34,0x3d,0x4b,0x62,0x73,0x7c,0x7b,0x72,0x62,0x5c,0x59,0x60,0x6f,0x7b,0x7e,0x7b,
0x72,0x68,0x63,0x63,0x61,0x5f,0x56,0x49,0x3b,0x34,0x35,0x41,0x56,0x6e,0x81,0x8e,
0x95,0x99,0x96,0x91,0x86,0x7b,0x6d,0x5f,0x50,0x46,0x40,0x3e,0x3e,0x3c,0x3a,0x38,
0x38,0x3c,0x44,0x4d,0x55,0x5e,0x68,0x74,0x82,0x91,0x9a,0x9b,0x9a,0x8f,0x7d,0x6c,
0x5c,0x53,0x4a,0x43,0x3b,0x38,0x39,0x42,0x52,0x65,0x75,0x80,0x80,0x78,0x6a,0x5e,
0x59,0x5f,0x68,0x70,0x76,0x7b,0x7f,0x84,0x8d,0x99,0xa3,0xaa,0xa9,0xa5,0xa0,0x9c,
0x9a,0x99,0xa0,0xa1,0xa2,0xa7,0xa9,0xa7,0xa3,0x94,0x83,0x73,0x66,0x5e,0x55,0x4d,
0x42,0x3a,0x33,0x34,0x3c,0x51,0x68,0x79,0x81,0x7e,0x72,0x66,0x5c,0x59,0x59,0x52,
0x46,0x3a,0x33,0x38,0x48,0x62,0x79,0x87,0x88,0x7f,0x6e,0x61,0x5b,0x60,0x69,0x70,
0x74,0x78,0x7b,0x83,0x8f,0x9b,0xa3,0xab,0xae,0xa9,0x9c,0x8d,0x7c,0x6d,0x63,0x5a,
0x53,0x4e,0x48,0x42,0x3e,0x3c,0x41,0x4d,0x5d,0x6f,0x7d,0x86,0x8b,0x8d,0x92,0x96,
0x9d,0xa3,0xa5,0xa5,0xa2,0xa0,0x9e,0xa0,0xa0,0x9c,0x8f,0x7d,0x69,0x5c,0x58,0x5a,
0x5f,0x68,0x72,0x79,0x82,0x8d,0x96,0x9f,0xa0,0x99,0x88,0x73,0x62,0x58,0x56,0x5e,
0x6a,0x75,0x79,0x74,0x6e,0x63,0x59,0x53,0x4f,0x4b,0x46,0x3e,0x35,0x30,0x30,0x35,
0x3d,0x46,0x4e,0x56,0x5e,0x66,0x70,0x7d,0x89,0x93,0x97,0x94,0x8c,0x82,0x72,0x63,
0x56,0x4b,0x43,0x3c,0x38,0x3a,0x41,0x4d,0x59,0x68,0x78,0x85,0x8f,0x96,0x99,0x97,
0x91,0x84,0x76,0x68,0x5e,0x5b,0x5f,0x67,0x70,0x7b,0x86,0x8f,0x92,0x9c,0xa0,0xa3,
0xa4,0xa2,0x9e,0x9a,0x96,0x97,0x9b,0x9e,0xa1,0xa2,0xa0,0x9e,0x9e,0x9d,0x9b,0x9a,
0x99,0x99,0x93,0x8b,0x7e,0x70,0x65,0x5d,0x59,0x5d,0x66,0x74,0x7f,0x85,0x89,0x8e,
0x95,0x9f,0xa4,0xa9,0xa3,0x9c,0x92,0x82,0x71,0x63,0x56,0x4f,0x49,0x43,0x3c,0x38,
0x35,0x34,0x36,0x3a,0x3d,0x43,0x43,0x42,0x3e,0x3c,0x3a,0x38,0x39,0x39,0x36,0x38,
0x3f,0x4a,0x56,0x65,0x71,0x7d,0x88,0x91,0x96,0x9d,0xa4,0xa8,0xa7,0xa2,0x9d,0x9d,
0x9b,0x9c,0x9a,0x94,0x88,0x78,0x6b,0x5e,0x54,0x4e,0x48,0x41,0x38,0x35,0x39,0x48,
0x59,0x6c,0x7b,0x82,0x86,0x8c,0x93,0x9b,0xa1,0xa4,0xa1,0xa0,0x9d,0x9c,0x9b,0x9c,
0x9b,0x96,0x8b,0x7b,0x68,0x5b,0x51,0x49,0x41,0x3b,0x36,0x34,0x35,0x36,0x38,0x3b,
0x3b,0x3b,0x3a,0x36,0x34,0x34,0x34,0x31,0x2f,0x30,0x35,0x3f,0x4c,0x5b,0x6a,0x79,
0x84,0x91,0x9a,0x9f,0x9b,0x91,0x81,0x71,0x62,0x55,0x48,0x42,0x3c,0x39,0x3a,0x41,
0x4d,0x5e,0x6f,0x7c,0x87,0x92,0x99,0x98,0x99,0x92,0x82,0x71,0x5f,0x55,0x59,0x60,
0x6b,0x76,0x7a,0x76,0x6c,0x65,0x5f,0x5e,0x5c,0x56,0x49,0x3b,0x2f,0x32,0x42,0x5c,
0x75,0x85,0x86,0x7b,0x69,0x59,0x53,0x5b,0x68,0x76,0x7e,0x7f,0x77,0x6b,0x61,0x5c,
0x5e,0x67,0x70,0x76,0x79,0x76,0x6d,0x65,0x5f,0x5e,0x5e,0x5d,0x56,0x4d,0x41,0x35,
0x2a,0x29,0x2d,0x36,0x41,0x4a,0x50,0x59,0x62,0x6e,0x7c,0x8a,0x94,0x9d,0x9c,0x94,
0x86,0x78,0x68,0x5c,0x56,0x58,0x60,0x6f,0x7c,0x86,0x8f,0x98,0x9d,0xa2,0xa4,0xa5,
0xa4,0x9e,0x93,0x85,0x76,0x68,0x5b,0x5a,0x5b,0x63,0x6d,0x75,0x77,0x78,0x6f,0x65,
0x5d,0x59,0x53,0x4d,0x46,0x3c,0x33,0x2e,0x2b,0x2f,0x36,0x40,0x4d,0x5b,0x68,0x71,
0x76,0x74,0x6d,0x66,0x5e,0x59,0x52,0x4b,0x40,0x38,0x31,0x35,0x41,0x55,0x6a,0x7f,
0x8d,0x96,0x99,0x9b,0x95,0x8d,0x81,0x72,0x61,0x59,0x58,0x5d,0x68,0x74,0x7e,0x85,
0x8b,0x93,0x9b,0x9e,0x98,0x87,0x72,0x5d,0x50,0x52,0x5d,0x6d,0x7a,0x7d,0x78,0x6d,
0x62,0x5b,0x58,0x55,0x4f,0x44,0x39,0x2f,0x29,0x2a,0x31,0x39,0x41,0x43,0x3e,0x36,
0x30,0x30,0x3a,0x4c,0x60,0x70,0x7b,0x7b,0x71,0x67,0x5c,0x54,0x50,0x4b,0x44,0x3d,
0x38,0x39,0x44,0x55,0x69,0x7f,0x8f,0x99,0x9b,0x97,0x8f,0x86,0x7b,0x6d,0x5c,0x50,
0x45,0x3c,0x38,0x35,0x33,0x34,0x35,0x36,0x38,0x3b,0x3a,0x36,0x35,0x32,0x30,0x34,
0x34,0x33,0x35,0x36,0x3d,0x4f,0x61,0x72,0x7c,0x7b,0x71,0x65,0x59,0x55,0x52,0x4f,
0x46,0x3c,0x34,0x30,0x2f,0x34,0x3a,0x43,0x4c,0x56,0x60,0x6d,0x75,0x77,0x70,0x65,
0x59,0x56,0x5c,0x66,0x72,0x7b,0x7b,0x71,0x66,0x60,0x60,0x68,0x6e,0x73,0x72,0x70,
0x6f,0x75,0x80,0x8f,0x9b,0x9f,0x99,0x8a,0x76,0x63,0x56,0x53,0x58,0x63,0x73,0x7e,
0x86,0x8e,0x94,0x9a,0x9e,0xa3,0xa5,0xa3,0x9c,0x98,0x96,0x99,0x9c,0x9f,0x9d,0x91,
0x7f,0x6f,0x61,0x5b,0x59,0x61,0x68,0x71,0x79,0x82,0x8b,0x92,0x99,0x9f,0xa3,0xa4,
0xa0,0x99,0x8b,0x7d,0x6d,0x5e,0x52,0x4b,0x46,0x42,0x3c,0x36,0x31,0x30,0x33,0x38,
0x3c,0x41,0x41,0x3d,0x37,0x32,0x32,0x3a,0x46,0x57,0x66,0x76,0x83,0x8e,0x94,0x9a,
0x9c,0xa1,0xa1,0xa0,0x9d,0x97,0x8b,0x7b,0x6a,0x5e,0x5b,0x5f,0x68,0x73,0x7b,0x7c,
0x75,0x6b,0x62,0x5e,0x5f,0x64,0x67,0x6b,0x6d,0x70,0x76,0x80,0x8d,0x9c,0xa1,0x9c,
0x8d,0x79,0x66,0x5b,0x59,0x61,0x6b,0x79,0x81,0x89,0x91,0x9a,0xa0,0xa7,0xa8,0xa4,
0xa0,0x9e,0x9a,0x99,0x9a,0x9b,0x9c,0x9e,0x9e,0xa0,0x9f,0x9c,0x94,0x89,0x78,0x67,
0x5b,0x58,0x59,0x62,0x6b,0x75,0x7f,0x89,0x92,0x9b,0x9f,0x9d,0x92,0x82,0x6c,0x57,
0x48,0x40,0x3b,0x3b,0x3a,0x3a,0x3b,0x3c,0x3c,0x3c,0x3b,0x3a,0x37,0x35,0x33,0x34,
0x34,0x35,0x36,0x38,0x38,0x38,0x3c,0x3d,0x3c,0x3d,0x3c,0x3b,0x38,0x38,0x3b,0x42,
0x4b,0x56,0x63,0x71,0x7e,0x88,0x8f,0x96,0x9b,0x9e,0xa0,0xa0,0x9f,0x9b,0x8e,0x7d,
0x6a,0x5e,0x5a,0x5d,0x67,0x73,0x7b,0x79,0x72,0x69,0x61,0x5c,0x5b,0x56,0x4d,0x43,
0x38,0x30,0x30,0x3c,0x4e,0x66,0x7b,0x8c,0x92,0x96,0x93,0x8d,0x84,0x7b,0x6f,0x63,
0x56,0x4c,0x42,0x38,0x33,0x36,0x42,0x55,0x6a,0x7c,0x83,0x7e,0x72,0x64,0x59,0x54,
0x4f,0x4a,0x40,0x35,0x2c,0x31,0x42,0x5a,0x72,0x81,0x83,0x7a,0x6b,0x5f,0x54,0x55,
0x52,0x4c,0x43,0x3a,0x30,0x30,0x30,0x35,0x3c,0x46,0x4e,0x59,0x63,0x72,0x81,0x8f,
0x98,0x9b,0x98,0x8e,0x80,0x71,0x62,0x53,0x47,0x3c,0x36,0x34,0x34,0x3b,0x4a,0x5d,
0x70,0x7f,0x83,0x7c,0x6d,0x5f,0x59,0x5c,0x65,0x73,0x7a,0x7d,0x70,0x60,0x59,0x59,
0x5e,0x66,0x6d,0x6f,0x70,0x71,0x75,0x80,0x8e,0x9b,0xa0,0x9c,0x8d,0x7b,0x66,0x57,
0x52,0x59,0x65,0x72,0x7e,0x86,0x8c,0x92,0x99,0xa1,0xa7,0xa9,0xa5,0x9c,0x95,0x92,
0x93,0x9a,0x9c,0x9a,0x91,0x80,0x6a,0x58,0x52,0x59,0x65,0x73,0x7a,0x79,0x77,0x6e,
0x63,0x5c,0x58,0x54,0x4d,0x43,0x38,0x30,0x2a,0x29,0x2d,0x35,0x3f,0x4c,0x55,0x5f,
0x67,0x72,0x7b,0x86,0x90,0x99,0x9f,0xa4,0xa3,0xa0,0x9e,0x9b,0x99,0x9b,0x9c,0x9c,
0x96,0x8d,0x7e,0x6d,0x5e,0x53,0x49,0x44,0x3d,0x38,0x36,0x34,0x33,0x37,0x3a,0x3b,
0x38,0x35,0x31,0x31,0x32,0x35,0x37,0x38,0x35,0x35,0x36,0x39,0x3a,0x3b,0x38,0x34,
0x31,0x34,0x38,0x3e,0x3e,0x3d,0x3a,0x37,0x36,0x3f,0x50,0x63,0x74,0x7f,0x7e,0x74,
0x65,0x5a,0x55,0x5d,0x68,0x74,0x78,0x78,0x70,0x67,0x5f,0x5b,0x59,0x5b,0x56,0x4b,
0x3e,0x31,0x28,0x2a,0x2f,0x38,0x40,0x44,0x40,0x39,0x31,0x2e,0x2f,0x32,0x34,0x36,
0x38,0x3a,0x39,0x3b,0x39,0x3a,0x3a,0x3a,0x38,0x39,0x3a,0x3c,0x3a,0x3a,0x38,0x38,
// Line 17
0x3a,0x3a,0x39,0x38,0x35,0x34,0x35,0x38,0x3a,0x3a,0x37,0x35,0x34,0x36,0x38,0x3a,
0x38,0x36,0x34,0x34,0x34,0x35,0x36,0x36,0x35,0x35,0x34,0x33,0x33,0x34,0x36,0x37,
0x37,0x36,0x37,0x3a,0x39,0x38,0x38,0x3a,0x3a,0x3a,0x39,0x38,0x34,0x35,0x34,0x33,
0x35,0x38,0x37,0x38,0x36,0x36,0x36,0x3c,0x47,0x59,0x6a,0x78,0x7c,0x79,0x70,0x65,
0x5e,0x5e,0x63,0x70,0x78,0x7c,0x79,0x71,0x68,0x63,0x61,0x64,0x6b,0x74,0x79,0x77,
0x72,0x6b,0x64,0x61,0x60,0x64,0x6b,0x72,0x76,0x78,0x74,0x6e,0x66,0x61,0x62,0x68,
0x70,0x79,0x7c,0x7c,0x76,0x6e,0x65,0x5f,0x5f,0x66,0x6e,0x73,0x77,0x78,0x73,0x6d,
0x65,0x60,0x62,0x68,0x6f,0x74,0x79,0x78,0x72,0x6b,0x64,0x5f,0x5f,0x67,0x70,0x78,
0x79,0x78,0x72,0x6b,0x63,0x62,0x65,0x6b,0x6f,0x71,0x70,0x71,0x76,0x7d,0x86,0x91,
0x9c,0xa6,0xab,0xaa,0xa3,0x99,0x8a,0x7a,0x6c,0x62,0x5d,0x57,0x53,0x4a,0x41,0x3b,
0x3a,0x41,0x50,0x63,0x76,0x86,0x8f,0x93,0x94,0x96,0x99,0x9c,0x9d,0x9c,0x97,0x8e,
0x7f,0x72,0x67,0x5e,0x5c,0x62,0x6b,0x77,0x7e,0x80,0x7a,0x71,0x64,0x5d,0x5f,0x67,
0x71,0x79,0x7a,0x73,0x69,0x63,0x60,0x61,0x68,0x6d,0x6e,0x70,0x70,0x73,0x7c,0x88,
0x94,0xa3,0xab,0xad,0xa7,0xa0,0x9c,0x9c,0x9e,0x9e,0x9e,0x99,0x8e,0x80,0x71,0x64,
0x58,0x4f,0x44,0x3a,0x33,0x34,0x3c,0x4d,0x61,0x73,0x7e,0x80,0x77,0x68,0x5e,0x57,
0x52,0x51,0x49,0x40,0x38,0x38,0x42,0x59,0x72,0x86,0x8d,0x87,0x76,0x67,0x5e,0x5e,
0x64,0x6d,0x72,0x76,0x7a,0x7f,0x87,0x93,0x9e,0xa7,0xaa,0xa6,0x9e,0x93,0x86,0x79,
0x6b,0x60,0x57,0x4f,0x4a,0x46,0x41,0x3d,0x37,0x34,0x35,0x37,0x3b,0x42,0x4c,0x59,
0x64,0x6f,0x78,0x84,0x91,0x9c,0x9d,0x97,0x8a,0x79,0x69,0x5b,0x54,0x59,0x66,0x74,
0x7f,0x83,0x7c,0x72,0x67,0x61,0x62,0x68,0x70,0x76,0x77,0x71,0x6b,0x67,0x64,0x66,
0x68,0x6b,0x6b,0x6e,0x70,0x76,0x7c,0x8b,0x97,0xa3,0xac,0xb0,0xab,0xa4,0x96,0x87,
0x78,0x6c,0x62,0x5b,0x52,0x49,0x3f,0x37,0x35,0x3b,0x44,0x52,0x64,0x77,0x87,0x91,
0x96,0x9a,0x97,0x91,0x84,0x74,0x63,0x54,0x46,0x3e,0x3a,0x3c,0x3c,0x3b,0x37,0x34,
0x36,0x3b,0x41,0x50,0x59,0x65,0x72,0x7e,0x89,0x94,0x9b,0x9d,0x9a,0x8e,0x7e,0x6d,
0x5e,0x58,0x58,0x60,0x6b,0x77,0x84,0x89,0x8f,0x97,0x9e,0xa3,0xa6,0xa4,0xa1,0x9d,
0x99,0x99,0x9b,0x9c,0x98,0x90,0x84,0x74,0x64,0x58,0x4d,0x46,0x41,0x3e,0x39,0x38,
0x37,0x38,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x39,0x38,0x35,0x33,0x32,0x33,0x3a,0x4c,
0x5e,0x6f,0x79,0x7c,0x77,0x71,0x69,0x64,0x5d,0x57,0x4c,0x41,0x3a,0x3a,0x42,0x52,
0x65,0x79,0x89,0x90,0x93,0x94,0x96,0x9a,0x9c,0x9d,0x9b,0x99,0x98,0x99,0x9a,0x9e,
0xa0,0xa2,0xa2,0x9f,0x9b,0x97,0x90,0x85,0x78,0x68,0x5a,0x51,0x49,0x43,0x3d,0x3a,
0x3b,0x42,0x4f,0x60,0x72,0x85,0x8d,0x90,0x93,0x99,0x9e,0xa4,0xa7,0xa4,0x9b,0x8e,
0x7c,0x6d,0x61,0x57,0x4e,0x4b,0x46,0x3f,0x3b,0x34,0x31,0x34,0x3a,0x3e,0x3e,0x3b,
0x33,0x2f,0x2f,0x38,0x43,0x5a,0x6b,0x74,0x77,0x74,0x69,0x64,0x5c,0x58,0x55,0x4d,
0x41,0x3b,0x3b,0x44,0x55,0x68,0x7b,0x8a,0x93,0x99,0x9b,0x9c,0x97,0x8f,0x82,0x71,
0x62,0x5b,0x5c,0x65,0x70,0x7c,0x85,0x8e,0x94,0x9c,0xa0,0xa4,0xa6,0xa7,0xa4,0x9b,
0x8e,0x80,0x70,0x63,0x5d,0x5e,0x62,0x6a,0x71,0x78,0x7e,0x85,0x8e,0x96,0x9a,0x99,
0x8f,0x80,0x6b,0x58,0x4d,0x47,0x42,0x42,0x40,0x3c,0x35,0x32,0x2f,0x34,0x3c,0x47,
0x4e,0x5e,0x6b,0x7a,0x89,0x96,0x9c,0x9b,0x91,0x85,0x78,0x6b,0x5e,0x52,0x47,0x3f,
0x3a,0x3a,0x3d,0x48,0x57,0x68,0x76,0x80,0x87,0x8f,0x94,0x98,0x9b,0x9e,0xa0,0xa1,
0x9f,0x9d,0x9a,0x9b,0x9a,0x99,0x8e,0x83,0x72,0x64,0x5b,0x52,0x48,0x43,0x3a,0x38,
0x3f,0x4e,0x61,0x76,0x84,0x86,0x7e,0x70,0x63,0x5b,0x54,0x4e,0x44,0x3a,0x31,0x31,
0x38,0x49,0x5e,0x74,0x85,0x91,0x94,0x94,0x93,0x91,0x8a,0x7d,0x6b,0x5c,0x50,0x48,
0x42,0x3e,0x3b,0x41,0x44,0x4e,0x5f,0x71,0x80,0x8d,0x92,0x94,0x96,0x99,0x9f,0xa3,
0xa6,0xa3,0x9f,0x9d,0x9b,0x9b,0x9d,0xa0,0xa1,0xa2,0xa0,0x9e,0x9c,0x9c,0x9d,0x9e,
0x9a,0x94,0x88,0x77,0x67,0x5f,0x5e,0x63,0x6b,0x76,0x7b,0x77,0x71,0x68,0x63,0x60,
0x5b,0x52,0x48,0x3c,0x34,0x33,0x41,0x54,0x69,0x7c,0x89,0x91,0x99,0x9a,0x97,0x94,
0x89,0x7a,0x6a,0x5e,0x5b,0x61,0x6b,0x78,0x81,0x87,0x8b,0x91,0x97,0x9a,0x97,0x8b,
0x78,0x65,0x58,0x55,0x5b,0x67,0x75,0x81,0x88,0x8e,0x91,0x97,0x9a,0x95,0x87,0x74,
0x5f,0x52,0x4f,0x59,0x67,0x77,0x7e,0x7e,0x76,0x6d,0x65,0x61,0x5c,0x55,0x48,0x3b,
0x31,0x33,0x3e,0x52,0x68,0x7c,0x8a,0x93,0x97,0x97,0x93,0x8f,0x85,0x76,0x64,0x55,
0x49,0x41,0x41,0x41,0x41,0x3f,0x3a,0x34,0x35,0x38,0x3e,0x4e,0x5f,0x6d,0x74,0x74,
0x70,0x6d,0x68,0x63,0x5e,0x56,0x4c,0x41,0x39,0x36,0x3c,0x4c,0x62,0x78,0x89,0x94,
0x99,0x9a,0x97,0x97,0x9b,0xa2,0xa5,0xa1,0x95,0x84,0x72,0x63,0x5a,0x5b,0x65,0x70,
0x77,0x7a,0x77,0x70,0x67,0x62,0x5e,0x5b,0x56,0x4d,0x3f,0x34,0x2f,0x38,0x4a,0x62,
0x77,0x88,0x8f,0x90,0x91,0x94,0x9a,0xa2,0xa4,0xa4,0xa3,0x9f,0x9b,0x99,0x9c,0x9f,
0xa2,0xa3,0xa2,0xa0,0x9e,0x9e,0x9e,0xa0,0x9e,0x9b,0x92,0x83,0x71,0x65,0x5d,0x5c,
0x61,0x6c,0x76,0x7c,0x7c,0x75,0x6b,0x61,0x58,0x51,0x4d,0x47,0x3e,0x36,0x2d,0x2a,
0x2b,0x32,0x3b,0x46,0x50,0x5b,0x65,0x71,0x7b,0x84,0x91,0x98,0x9a,0x98,0x8f,0x80,
0x6e,0x5c,0x52,0x56,0x63,0x75,0x80,0x86,0x7c,0x6f,0x62,0x5d,0x5e,0x6b,0x74,0x79,
0x7b,0x76,0x71,0x6f,0x68,0x68,0x6e,0x71,0x71,0x72,0x73,0x77,0x7c,0x85,0x8f,0x9b,
0xa4,0xaa,0xa8,0xa4,0x99,0x8c,0x7e,0x71,0x68,0x64,0x64,0x69,0x70,0x78,0x7c,0x7c,
0x79,0x71,0x67,0x62,0x63,0x69,0x73,0x79,0x79,0x77,0x6f,0x64,0x5e,0x5e,0x66,0x70,
0x78,0x7a,0x79,0x73,0x6a,0x61,0x5e,0x61,0x61,0x5e,0x51,0x41,0x32,0x2e,0x37,0x4e,
0x6b,0x83,0x8e,0x87,0x75,0x64,0x5b,0x5d,0x65,0x71,0x78,0x7b,0x7c,0x81,0x8b,0x99,
0xa1,0xa0,0x93,0x7c,0x64,0x55,0x52,0x5c,0x6d,0x7c,0x83,0x7d,0x77,0x6c,0x64,0x62,
0x5c,0x52,0x47,0x3a,0x2e,0x2f,0x3b,0x52,0x6a,0x7d,0x84,0x80,0x74,0x67,0x5d,0x5b,
0x5f,0x68,0x71,0x78,0x7b,0x83,0x89,0x93,0x9b,0xa3,0xaa,0xac,0xa5,0x99,0x8b,0x7d,
0x6f,0x64,0x5d,0x55,0x4d,0x47,0x3e,0x38,0x37,0x3f,0x4d,0x61,0x74,0x85,0x8e,0x93,
0x94,0x97,0x9d,0xa2,0xa0,0xa3,0xa2,0xa0,0x9e,0x9b,0x9b,0x9e,0x9f,0x9f,0x9f,0x9d,
0x97,0x8f,0x83,0x72,0x63,0x56,0x4d,0x48,0x43,0x3e,0x39,0x36,0x33,0x33,0x37,0x3c,
0x40,0x42,0x3d,0x37,0x34,0x3a,0x47,0x5b,0x6e,0x7a,0x7c,0x76,0x6a,0x5f,0x5e,0x60,
0x65,0x6f,0x77,0x7a,0x7e,0x85,0x90,0x9c,0x9f,0x9a,0x8e,0x7c,0x68,0x56,0x48,0x3f,
0x39,0x38,0x38,0x3c,0x47,0x57,0x68,0x78,0x83,0x8c,0x92,0x96,0x96,0x93,0x8c,0x7e,
0x6b,0x5d,0x58,0x5f,0x6d,0x7b,0x81,0x84,0x7a,0x6e,0x63,0x5c,0x58,0x52,0x46,0x38,
0x2d,0x2e,0x3d,0x55,0x6f,0x83,0x8a,0x84,0x74,0x64,0x5a,0x53,0x4f,0x4a,0x43,0x3a,
0x33,0x31,0x2f,0x34,0x3c,0x47,0x4f,0x57,0x60,0x6e,0x7c,0x88,0x8f,0x96,0x98,0x94,
0x8b,0x7d,0x6e,0x5e,0x4f,0x45,0x40,0x3c,0x3c,0x3f,0x45,0x52,0x63,0x75,0x83,0x8d,
0x92,0x96,0x98,0x9e,0xa2,0xa7,0xa7,0x9f,0x8e,0x7c,0x6e,0x64,0x5a,0x53,0x4a,0x41,
0x38,0x34,0x36,0x42,0x51,0x64,0x76,0x84,0x8e,0x94,0x97,0x97,0x93,0x89,0x7b,0x68,
0x5e,0x58,0x5a,0x65,0x71,0x7c,0x7f,0x7c,0x73,0x6b,0x64,0x66,0x6b,0x72,0x75,0x77,
0x7b,0x81,0x87,0x93,0x9d,0xa6,0xa9,0xa7,0x9e,0x99,0x93,0x8f,0x91,0x96,0x9c,0xa3,
0xa3,0xa4,0xa3,0x9f,0x9c,0x9a,0x9a,0x9c,0x99,0x95,0x88,0x78,0x67,0x5c,0x59,0x61,
0x6d,0x79,0x81,0x7f,0x74,0x68,0x5d,0x5a,0x5e,0x66,0x6e,0x74,0x76,0x72,0x6b,0x68,
0x60,0x5e,0x5c,0x58,0x4f,0x44,0x38,0x2e,0x2a,0x2c,0x30,0x39,0x44,0x52,0x60,0x6d,
0x74,0x76,0x71,0x6a,0x60,0x5b,0x55,0x4f,0x49,0x42,0x38,0x30,0x2b,0x2e,0x34,0x3d,
0x47,0x54,0x62,0x6e,0x76,0x79,0x76,0x6d,0x64,0x5f,0x63,0x6e,0x79,0x7e,0x7c,0x75,
0x69,0x60,0x5b,0x5b,0x5a,0x57,0x4b,0x3c,0x31,0x31,0x3b,0x50,0x67,0x7d,0x8e,0x96,
0x9a,0x9c,0x99,0x91,0x84,0x77,0x66,0x59,0x53,0x57,0x5e,0x6b,0x74,0x7e,0x89,0x95,
0x9e,0xa1,0x9f,0x93,0x82,0x70,0x61,0x56,0x59,0x5e,0x6a,0x78,0x82,0x8a,0x90,0x95,
0x9a,0xa1,0xa4,0xa5,0x9f,0x96,0x89,0x7a,0x6e,0x64,0x5c,0x54,0x4a,0x3f,0x38,0x36,
0x3b,0x4a,0x5e,0x72,0x80,0x85,0x80,0x76,0x68,0x5c,0x52,0x4c,0x45,0x3d,0x3a,0x36,
0x39,0x4a,0x5f,0x74,0x86,0x94,0x99,0x9b,0x94,0x8e,0x84,0x7a,0x6b,0x5c,0x4c,0x41,
0x38,0x35,0x35,0x3c,0x47,0x55,0x64,0x76,0x83,0x8f,0x99,0x9f,0x9e,0x96,0x89,0x79,
0x68,0x5c,0x58,0x5e,0x67,0x72,0x79,0x7b,0x74,0x69,0x64,0x5f,0x58,0x53,0x49,0x3f,
0x30,0x2c,0x29,0x2d,0x37,0x41,0x44,0x41,0x3a,0x35,0x33,0x33,0x31,0x30,0x30,0x31,
0x32,0x35,0x37,0x39,0x38,0x38,0x38,0x39,0x3b,0x3e,0x3f,0x3d,0x38,0x37,0x35,0x35,
// Line 18
0x39,0x38,0x37,0x35,0x36,0x36,0x35,0x36,0x34,0x35,0x36,0x37,0x36,0x37,0x37,0x37,
0x36,0x37,0x37,0x37,0x36,0x36,0x35,0x37,0x37,0x38,0x38,0x38,0x35,0x35,0x36,0x38,
0x38,0x3b,0x3c,0x40,0x45,0x4a,0x50,0x54,0x55,0x57,0x58,0x5a,0x5b,0x5c,0x5a,0x57,
0x57,0x57,0x57,0x57,0x58,0x5a,0x5a,0x5b,0x59,0x58,0x5a,0x5b,0x5b,0x5a,0x58,0x58,
0x58,0x58,0x58,0x5b,0x5c,0x5c,0x5a,0x5a,0x59,0x58,0x59,0x5a,0x5a,0x5b,0x59,0x57,
0x58,0x59,0x59,0x59,0x57,0x55,0x57,0x56,0x54,0x53,0x55,0x56,0x57,0x58,0x59,0x5a,
0x5b,0x5c,0x5c,0x5d,0x5d,0x5d,0x5c,0x5a,0x58,0x59,0x5a,0x5a,0x57,0x54,0x53,0x53,
0x54,0x55,0x55,0x57,0x55,0x55,0x57,0x58,0x5a,0x5d,0x5c,0x5b,0x59,0x59,0x59,0x5b,
0x5d,0x5d,0x5b,0x59,0x57,0x57,0x5a,0x5b,0x5b,0x5b,0x5a,0x58,0x57,0x56,0x56,0x57,
0x58,0x58,0x57,0x57,0x57,0x57,0x5a,0x5b,0x5b,0x5b,0x5a,0x5a,0x5a,0x5a,0x59,0x59,
0x57,0x55,0x57,0x59,0x5b,0x5b,0x5c,0x5c,0x5a,0x5a,0x58,0x58,0x58,0x57,0x55,0x55,
0x53,0x55,0x57,0x59,0x5a,0x5d,0x5e,0x5d,0x5c,0x5d,0x5d,0x5d,0x5d,0x5b,0x5a,0x5a,
0x58,0x57,0x57,0x58,0x58,0x59,0x58,0x58,0x58,0x59,0x58,0x58,0x57,0x57,0x57,0x57,
0x55,0x55,0x55,0x54,0x53,0x57,0x59,0x5b,0x58,0x57,0x55,0x57,0x58,0x5b,0x5a,0x5e,
0x5d,0x5e,0x5d,0x5b,0x5a,0x5c,0x5d,0x5d,0x5b,0x59,0x58,0x5a,0x57,0x55,0x58,0x5b,
0x5a,0x58,0x57,0x56,0x57,0x58,0x5a,0x5b,0x5b,0x5b,0x5a,0x58,0x57,0x57,0x58,0x57,
0x55,0x57,0x55,0x57,0x57,0x59,0x5b,0x5b,0x5a,0x59,0x59,0x5d,0x5c,0x5a,0x5a,0x5a,
0x5a,0x5b,0x5b,0x5c,0x5d,0x5d,0x5d,0x5b,0x5a,0x5a,0x5a,0x5a,0x59,0x58,0x5c,0x59,
0x57,0x58,0x59,0x59,0x5a,0x5b,0x5b,0x5e,0x5f,0x5d,0x57,0x57,0x57,0x5c,0x5e,0x5d,
0x5b,0x5a,0x54,0x53,0x57,0x5e,0x63,0x64,0x5d,0x54,0x4f,0x52,0x5f,0x71,0x80,0x88,
0x87,0x7e,0x6f,0x64,0x60,0x64,0x66,0x67,0x60,0x56,0x4e,0x4c,0x50,0x5b,0x65,0x6a,
0x66,0x60,0x58,0x55,0x55,0x59,0x5a,0x5e,0x5b,0x58,0x57,0x58,0x59,0x5c,0x5a,0x57,
0x57,0x58,0x59,0x58,0x59,0x5a,0x59,0x5a,0x5a,0x5a,0x5a,0x5a,0x59,0x5a,0x59,0x5a,
0x5a,0x5a,0x58,0x58,0x57,0x58,0x5a,0x5b,0x5b,0x5b,0x5a,0x58,0x57,0x58,0x5a,0x5b,
0x5d,0x5b,0x58,0x58,0x58,0x58,0x59,0x5a,0x5a,0x59,0x5a,0x59,0x58,0x5a,0x5a,0x5a,
0x5b,0x5b,0x5b,0x5c,0x5b,0x5a,0x5a,0x5a,0x5a,0x5d,0x5f,0x60,0x5d,0x5c,0x5a,0x5a,
0x5b,0x5e,0x5e,0x5d,0x5a,0x58,0x57,0x57,0x58,0x5b,0x5c,0x5c,0x5b,0x5b,0x5b,0x5d,
0x5b,0x5a,0x5a,0x5a,0x58,0x57,0x58,0x58,0x57,0x58,0x58,0x5b,0x5c,0x5b,0x58,0x58,
0x58,0x58,0x58,0x5a,0x5a,0x5c,0x5b,0x5a,0x58,0x5a,0x5a,0x5a,0x59,0x58,0x58,0x58,
0x58,0x58,0x5a,0x5b,0x5c,0x5b,0x58,0x55,0x55,0x57,0x57,0x58,0x59,0x59,0x58,0x59,
0x59,0x5a,0x5b,0x5b,0x5b,0x5d,0x5d,0x5b,0x5b,0x5c,0x5c,0x5d,0x5d,0x5d,0x5a,0x57,
0x55,0x55,0x57,0x57,0x56,0x57,0x55,0x54,0x54,0x57,0x5b,0x5d,0x5d,0x5c,0x5b,0x5b,
0x5b,0x5b,0x5c,0x5c,0x5a,0x5a,0x57,0x56,0x55,0x57,0x58,0x59,0x59,0x5a,0x5b,0x5a,
0x5b,0x5b,0x5b,0x5b,0x5a,0x59,0x58,0x59,0x5a,0x5a,0x58,0x5a,0x5a,0x5b,0x5b,0x5b,
0x5c,0x5c,0x5a,0x57,0x57,0x59,0x5a,0x59,0x57,0x57,0x57,0x58,0x58,0x57,0x57,0x58,
0x57,0x59,0x58,0x5a,0x5a,0x5b,0x59,0x57,0x57,0x57,0x57,0x57,0x57,0x58,0x58,0x58,
0x57,0x58,0x58,0x58,0x57,0x57,0x57,0x58,0x57,0x57,0x57,0x58,0x58,0x59,0x5a,0x59,
0x57,0x59,0x5a,0x5b,0x5a,0x5b,0x5b,0x5d,0x5c,0x5b,0x57,0x5a,0x57,0x57,0x57,0x55,
0x52,0x50,0x4e,0x4e,0x4e,0x4e,0x4c,0x4b,0x4a,0x49,0x47,0x44,0x45,0x48,0x48,0x45,
0x42,0x44,0x46,0x47,0x44,0x43,0x42,0x44,0x45,0x44,0x44,0x43,0x43,0x45,0x45,0x45,
0x43,0x44,0x44,0x44,0x45,0x45,0x43,0x46,0x48,0x49,0x4a,0x4b,0x4b,0x4a,0x4a,0x48,
0x46,0x47,0x47,0x46,0x44,0x41,0x40,0x42,0x44,0x47,0x48,0x48,0x48,0x4a,0x49,0x47,
0x45,0x47,0x46,0x47,0x45,0x44,0x43,0x44,0x43,0x44,0x45,0x48,0x47,0x49,0x47,0x47,
0x44,0x44,0x45,0x48,0x48,0x46,0x46,0x47,0x47,0x47,0x47,0x47,0x46,0x47,0x47,0x47,
0x46,0x47,0x47,0x48,0x48,0x47,0x46,0x47,0x46,0x46,0x46,0x47,0x47,0x47,0x45,0x44,
0x45,0x45,0x45,0x47,0x45,0x45,0x45,0x43,0x41,0x44,0x44,0x45,0x45,0x47,0x45,0x44,
0x43,0x44,0x46,0x49,0x4c,0x4c,0x4c,0x49,0x48,0x49,0x49,0x49,0x49,0x48,0x46,0x43,
0x42,0x43,0x44,0x46,0x45,0x44,0x45,0x45,0x45,0x46,0x46,0x46,0x46,0x46,0x45,0x48,
0x47,0x47,0x47,0x48,0x48,0x47,0x46,0x45,0x45,0x49,0x4d,0x50,0x58,0x60,0x6a,0x76,
0x81,0x8d,0x99,0xa3,0xa9,0xaf,0xb0,0xb2,0xb3,0xb2,0xb1,0xb0,0xaf,0xae,0xaf,0xb0,
0xb2,0xb4,0xb4,0xb3,0xb2,0xb2,0xb1,0xb0,0xb1,0xb2,0xb2,0xb1,0xae,0xac,0xac,0xaf,
0xb1,0xae,0xb0,0xae,0xad,0xb0,0xb2,0xb1,0xb2,0xb3,0xb2,0xb4,0xb3,0xb4,0xb3,0xb3,
0xb1,0xb2,0xb2,0xb2,0xb1,0xb0,0xb0,0xaf,0xae,0xad,0xad,0xaf,0xaf,0xb0,0xb0,0xb0,
0xb0,0xb2,0xb3,0xb2,0xb0,0xb0,0xb0,0xaf,0xaf,0xb0,0xaf,0xb1,0xb0,0xaf,0xae,0xae,
0xac,0xae,0xb1,0xb3,0xb3,0xb0,0xad,0xad,0xad,0xb0,0xb0,0xaf,0xae,0xb0,0xaf,0xad,
0xac,0xae,0xb0,0xb2,0xb1,0xb0,0xb0,0xb0,0xaf,0xaf,0xb0,0xb0,0xb1,0xb1,0xb0,0xb0,
0xae,0xb1,0xb1,0xb1,0xb1,0xb1,0xb0,0xb1,0xb1,0xb2,0xb1,0xb3,0xb1,0xb0,0xaf,0xb0,
0xaf,0xb1,0xb0,0xb0,0xb2,0xb2,0xb2,0xb1,0xb0,0xb1,0xb2,0xb4,0xb4,0xb3,0xb2,0xb0,
0xaf,0xb0,0xb1,0xb3,0xb3,0xb2,0xb1,0xb2,0xb0,0xb0,0xaf,0xaf,0xae,0xb0,0xb1,0xb2,
0xb1,0xb1,0xb0,0xb0,0xb0,0xaf,0xac,0xae,0xac,0xa9,0xa7,0xa5,0xa2,0xa1,0xa1,0xa0,
0x9e,0x9d,0x9e,0x9f,0x9d,0x9c,0x9c,0x9d,0x9f,0xa1,0xa2,0xa2,0xa1,0xa0,0x9f,0x9f,
0x9e,0x9e,0x9d,0x9f,0x9f,0x9f,0x9c,0x9c,0x9d,0x9e,0x9f,0x9f,0x9d,0x9d,0x9c,0x9c,
0x9d,0x9f,0x9f,0x9f,0x9d,0x9c,0x9b,0x9b,0x9d,0x9f,0xa0,0x9f,0x9c,0x9d,0x9d,0x9f,
0xa1,0xa1,0x9f,0x9f,0x9e,0x9d,0x9c,0x9c,0x9b,0x9d,0x9e,0x9f,0x9d,0x9e,0x9e,0x9e,
0x9e,0xa1,0xa1,0xa2,0x9f,0x9c,0x9c,0x9b,0x9c,0x9d,0x9f,0xa0,0xa1,0xa1,0xa1,0xa1,
0xa2,0xa3,0xa3,0xa4,0xa1,0xa0,0x9f,0x9e,0x9d,0x9f,0x9f,0x9f,0x9d,0x9d,0x9e,0xa1,
0xa1,0xa3,0xa4,0xa3,0xa1,0xa1,0xa1,0xa1,0xa1,0xa1,0x9f,0x9e,0x9d,0x9e,0x9f,0x9d,
0x9f,0x9f,0x9f,0x9f,0x9e,0x9d,0x9f,0x9e,0x9d,0xa0,0xa1,0xa0,0x9f,0x9e,0x9f,0xa1,
0x9f,0xa0,0xa1,0x9f,0x9d,0x9e,0x9e,0x9f,0x9e,0x9f,0x9e,0x9f,0xa1,0xa1,0xa2,0xa3,
0xa3,0xa2,0xa1,0xa1,0xa1,0xa1,0x9f,0x9e,0x9e,0x9f,0x9e,0x9d,0x9f,0xa0,0x9f,0x9f,
0x9e,0x9f,0xa3,0xa1,0xa1,0xa1,0x9f,0xa0,0xa0,0x9f,0x9f,0xa1,0xa1,0xa0,0x9f,0x9d,
0x9d,0x9e,0x9f,0xa0,0x9f,0x9f,0x9e,0x9e,0x9f,0xa0,0xa1,0xa1,0x9f,0x9d,0x9c,0x9c,
0x9a,0x99,0x9a,0x9c,0x9c,0x9f,0x9f,0x9f,0xa0,0xa1,0xa0,0xa1,0xa1,0xa1,0x9f,0x9f,
0x9c,0x9c,0x9e,0xa1,0xa0,0x9f,0x9f,0xa1,0xa1,0x9f,0x9f,0xa0,0xa0,0x9f,0x9f,0xa1,
0xa1,0xa1,0xa0,0x9e,0x9e,0xa0,0xa1,0xa1,0xa1,0xa1,0xa1,0xa0,0x9e,0x9f,0x9f,0xa0,
0x9d,0x9e,0x9f,0xa0,0x9f,0x9d,0x9c,0x9d,0xa0,0xa1,0x9f,0x9f,0x9d,0x9b,0x9c,0x9e,
0xa0,0xa2,0xa1,0x9d,0x9c,0x9c,0x9e,0xa1,0xa2,0xa1,0x9f,0x9b,0x98,0x9a,0x9f,0xa1,
0xa3,0xa1,0x94,0x83,0x73,0x6d,0x6d,0x76,0x80,0x8a,0x8e,0x8e,0x8c,0x93,0x9b,0xa4,
0xab,0xad,0xa9,0xa0,0x98,0x95,0x95,0xa0,0xa2,0xa5,0xa6,0xa4,0xa1,0xa0,0x9f,0x9f,
0x9f,0x9f,0x9f,0x9d,0x9c,0x9c,0x9c,0x9d,0x9d,0x9e,0x9f,0xa1,0xa0,0xa1,0xa0,0xa1,
0xa0,0x9f,0x9c,0x9d,0x9e,0x9f,0x9d,0x9b,0x9a,0x9d,0xa0,0xa2,0xa2,0xa2,0xa1,0x9f,
0x9e,0x9e,0x9f,0xa2,0xa2,0xa1,0x9f,0x9f,0x9e,0x9c,0x9a,0x9c,0x9e,0xa1,0x9f,0x9f,
0xa0,0xa0,0x9f,0xa1,0xa1,0xa2,0xa2,0xa1,0x9f,0x9d,0x9b,0x9c,0x9c,0x9e,0x9e,0x9f,
0x9f,0x9f,0x9e,0x9f,0x9d,0x9d,0x9c,0x9c,0x9c,0x9e,0x9e,0x9d,0x9d,0x9f,0x9e,0x9c,
0x9c,0x9c,0x9b,0x9d,0x9e,0x9f,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa1,0x9f,0x9e,
0x9c,0x9c,0x9c,0x9c,0x9c,0x9e,0x9f,0x9e,0x9d,0x9e,0x9f,0xa1,0xa1,0xa0,0x9f,0x9e,
0x9d,0x9d,0x9f,0xa1,0xa2,0xa1,0x9f,0x9c,0x9b,0x9c,0x9d,0x9d,0xa0,0x9f,0x9d,0x9d,
0x9c,0x9d,0xa1,0xa2,0xa2,0xa3,0xa2,0xa1,0x9f,0x9f,0x9f,0xa0,0x9f,0x9f,0x9d,0x9c,
0x9b,0x9c,0x9e,0x9f,0x9f,0xa0,0x9f,0x9f,0x9e,0x9f,0xa1,0xa1,0x9f,0x9d,0x9d,0x9f,
0x9f,0x9f,0x9f,0xa1,0xa0,0xa1,0xa1,0x9f,0x9d,0x9a,0x98,0x98,0x99,0x9c,0x9d,0x9c,
0x9a,0x98,0x99,0x9b,0x9c,0xa1,0xa2,0xa0,0x9f,0x9e,0x9f,0xa1,0xa4,0xa3,0xa4,0xa3,
0xa1,0x9d,0x9c,0x9d,0x9e,0x9f,0x9f,0x9e,0x9f,0x9f,0xa0,0xa1,0xa1,0xa0,0xa1,0x9f,
0x9d,0x9e,0x9f,0xa0,0x9f,0x9d,0x9e,0x9d,0x9f,0x9f,0xa0,0xa1,0xa0,0x9f,0xa0,0xa1,
0xa1,0xa1,0xa0,0x9e,0x9d,0x9e,0xa0,0xa1,0x9f,0x9e,0x9f,0xa0,0x9f,0x9f,0xa1,0xa1,
0x9e,0x9f,0x9d,0x9e,0x9d,0x9e,0x9c,0x9e,0x9f,0xa2,0xa1,0x9f,0x9d,0x9d,0x9f,0x9f,
0x9b,0x98,0x91,0x89,0x7f,0x73,0x66,0x5d,0x54,0x4a,0x41,0x38,0x35,0x34,0x32,0x30,
// Line 19
0x39,0x3b,0x39,0x37,0x35,0x34,0x33,0x34,0x36,0x37,0x37,0x37,0x36,0x35,0x35,0x37,
0x37,0x37,0x35,0x35,0x34,0x36,0x38,0x3c,0x3f,0x42,0x44,0x4b,0x4f,0x53,0x58,0x5b,
0x5e,0x61,0x61,0x60,0x60,0x61,0x62,0x64,0x64,0x66,0x68,0x67,0x65,0x64,0x65,0x65,
0x64,0x63,0x60,0x5e,0x5f,0x60,0x60,0x5e,0x61,0x60,0x60,0x61,0x62,0x62,0x64,0x63,
0x61,0x62,0x62,0x62,0x63,0x64,0x64,0x63,0x60,0x61,0x62,0x62,0x61,0x62,0x63,0x64,
0x62,0x61,0x60,0x61,0x64,0x65,0x62,0x60,0x5d,0x5d,0x5e,0x5e,0x5e,0x60,0x64,0x64,
0x61,0x62,0x64,0x65,0x66,0x65,0x64,0x62,0x5f,0x5e,0x60,0x62,0x61,0x62,0x62,0x64,
0x62,0x61,0x60,0x60,0x61,0x62,0x61,0x60,0x5f,0x60,0x60,0x61,0x61,0x63,0x63,0x63,
0x64,0x62,0x61,0x61,0x60,0x61,0x62,0x63,0x63,0x64,0x64,0x64,0x63,0x66,0x68,0x69,
0x68,0x69,0x69,0x69,0x66,0x66,0x66,0x66,0x64,0x64,0x62,0x61,0x61,0x64,0x65,0x67,
0x6a,0x6c,0x6c,0x6c,0x69,0x69,0x6a,0x6b,0x69,0x66,0x66,0x65,0x65,0x68,0x6a,0x6c,
0x6f,0x6e,0x6c,0x6d,0x6e,0x70,0x71,0x70,0x6f,0x6f,0x6f,0x70,0x70,0x72,0x73,0x73,
0x73,0x73,0x73,0x73,0x72,0x73,0x73,0x75,0x75,0x77,0x79,0x7b,0x7d,0x7e,0x7f,0x81,
0x83,0x82,0x81,0x82,0x81,0x82,0x85,0x84,0x84,0x88,0x8a,0x8a,0x8a,0x8b,0x8d,0x90,
0x90,0x8e,0x8d,0x8e,0x8e,0x8e,0x8f,0x8f,0x8e,0x8f,0x8f,0x8e,0x8e,0x8f,0x90,0x90,
0x8d,0x8d,0x8c,0x8c,0x8b,0x8a,0x89,0x87,0x86,0x85,0x81,0x7d,0x7a,0x78,0x75,0x73,
0x6e,0x6c,0x69,0x65,0x5f,0x5d,0x5a,0x54,0x4e,0x4a,0x48,0x44,0x40,0x3d,0x3a,0x37,
0x33,0x31,0x30,0x2f,0x2b,0x2b,0x2a,0x29,0x28,0x28,0x29,0x2d,0x30,0x35,0x37,0x3b,
0x3f,0x43,0x48,0x4c,0x50,0x5a,0x63,0x69,0x6e,0x70,0x74,0x7a,0x81,0x87,0x8b,0x91,
0x93,0x93,0x92,0x93,0x94,0x9a,0x96,0x92,0x8e,0x89,0x83,0x7d,0x74,0x6c,0x65,0x5f,
0x58,0x51,0x49,0x44,0x3e,0x39,0x32,0x2e,0x2b,0x29,0x28,0x28,0x29,0x2b,0x30,0x35,
0x3a,0x44,0x4d,0x56,0x5e,0x65,0x6b,0x73,0x7a,0x84,0x8b,0x90,0x92,0x91,0x91,0x91,
0x8e,0x8b,0x85,0x7d,0x75,0x6d,0x64,0x5a,0x52,0x4b,0x44,0x3e,0x36,0x31,0x2f,0x2e,
0x2d,0x31,0x35,0x3c,0x45,0x4d,0x54,0x5e,0x69,0x74,0x7d,0x85,0x8b,0x91,0x93,0x91,
0x8c,0x89,0x81,0x78,0x6f,0x65,0x5a,0x4f,0x45,0x3d,0x39,0x38,0x36,0x36,0x37,0x39,
0x3d,0x44,0x4e,0x58,0x65,0x6e,0x76,0x81,0x88,0x8c,0x8d,0x8a,0x83,0x7c,0x75,0x6c,
0x60,0x54,0x4b,0x43,0x3a,0x36,0x33,0x34,0x35,0x37,0x3f,0x47,0x53,0x61,0x6f,0x7c,
0x87,0x8d,0x91,0x91,0x8a,0x81,0x77,0x6c,0x5e,0x52,0x49,0x3d,0x34,0x32,0x32,0x36,
0x3d,0x47,0x4f,0x5b,0x68,0x76,0x83,0x8e,0x93,0x94,0x8e,0x83,0x75,0x69,0x5c,0x4f,
0x43,0x39,0x31,0x2e,0x2d,0x33,0x3e,0x4e,0x5e,0x6e,0x7b,0x87,0x8f,0x91,0x8e,0x87,
0x7b,0x6d,0x5e,0x52,0x47,0x3c,0x35,0x2f,0x30,0x39,0x47,0x58,0x69,0x7b,0x88,0x90,
0x90,0x8b,0x82,0x7a,0x6c,0x5d,0x50,0x43,0x39,0x33,0x31,0x35,0x43,0x57,0x6b,0x7d,
0x89,0x8c,0x8c,0x87,0x7c,0x70,0x62,0x55,0x48,0x3d,0x33,0x2f,0x32,0x3c,0x4b,0x5f,
0x71,0x7f,0x87,0x89,0x81,0x78,0x6d,0x61,0x54,0x4c,0x42,0x39,0x37,0x3d,0x49,0x61,
0x73,0x81,0x8a,0x8b,0x84,0x7a,0x6a,0x5e,0x53,0x4a,0x3f,0x36,0x34,0x3d,0x4d,0x63,
0x75,0x82,0x86,0x80,0x75,0x69,0x5d,0x52,0x48,0x3f,0x39,0x3b,0x42,0x51,0x64,0x76,
0x82,0x86,0x81,0x77,0x68,0x5a,0x4c,0x41,0x3b,0x3a,0x41,0x4e,0x5d,0x6d,0x7b,0x85,
0x84,0x7b,0x6c,0x5e,0x4f,0x45,0x3c,0x3b,0x41,0x4c,0x5b,0x6d,0x7b,0x84,0x83,0x7a,
0x6d,0x60,0x52,0x46,0x40,0x44,0x4d,0x5a,0x68,0x74,0x7c,0x80,0x7b,0x6f,0x60,0x51,
0x48,0x44,0x44,0x48,0x53,0x66,0x76,0x80,0x7f,0x78,0x6a,0x5d,0x4f,0x44,0x43,0x46,
0x4e,0x5a,0x65,0x6f,0x73,0x76,0x70,0x66,0x5a,0x4e,0x44,0x48,0x4f,0x5a,0x67,0x71,
0x77,0x78,0x71,0x65,0x58,0x4f,0x4b,0x4c,0x50,0x5a,0x69,0x73,0x77,0x76,0x6e,0x63,
0x57,0x50,0x4d,0x4e,0x56,0x61,0x6b,0x71,0x71,0x70,0x68,0x5e,0x53,0x4d,0x4a,0x4f,
0x57,0x62,0x6a,0x6c,0x6c,0x69,0x61,0x5d,0x54,0x52,0x56,0x5e,0x64,0x67,0x6a,0x69,
0x64,0x5e,0x56,0x50,0x50,0x56,0x5d,0x65,0x6a,0x6c,0x69,0x61,0x5a,0x58,0x58,0x5b,
0x5e,0x63,0x65,0x66,0x65,0x61,0x5a,0x56,0x56,0x5a,0x5e,0x63,0x66,0x6a,0x66,0x60,
0x59,0x56,0x57,0x5b,0x5e,0x62,0x65,0x64,0x60,0x5b,0x56,0x52,0x53,0x5b,0x64,0x6a,
0x6d,0x6c,0x65,0x5d,0x56,0x53,0x56,0x5d,0x64,0x6c,0x6d,0x69,0x5d,0x58,0x51,0x50,
0x58,0x65,0x6f,0x78,0x73,0x69,0x59,0x4c,0x45,0x46,0x54,0x64,0x70,0x76,0x71,0x64,
0x54,0x4a,0x48,0x53,0x64,0x75,0x7e,0x7b,0x6e,0x5c,0x4a,0x43,0x48,0x5a,0x6d,0x7a,
0x7d,0x70,0x5b,0x48,0x3d,0x42,0x54,0x6c,0x7c,0x81,0x76,0x5e,0x48,0x3c,0x41,0x52,
0x6a,0x7a,0x7f,0x75,0x5e,0x45,0x3a,0x3e,0x52,0x6e,0x7f,0x82,0x73,0x5b,0x44,0x3b,
0x44,0x5e,0x78,0x89,0x84,0x6e,0x51,0x3b,0x36,0x48,0x63,0x7b,0x84,0x78,0x5e,0x43,
0x34,0x3d,0x58,0x77,0x88,0x86,0x6e,0x50,0x39,0x39,0x4e,0x6a,0x83,0x87,0x77,0x5a,
0x3f,0x37,0x47,0x65,0x7f,0x8b,0x81,0x67,0x4b,0x3b,0x40,0x5b,0x78,0x87,0x80,0x66,
0x48,0x38,0x40,0x5a,0x75,0x87,0x82,0x6a,0x4c,0x3b,0x41,0x5b,0x77,0x86,0x80,0x68,
0x4b,0x3b,0x40,0x5a,0x75,0x85,0x7c,0x63,0x48,0x3e,0x48,0x64,0x7e,0x89,0x7a,0x61,
0x44,0x3b,0x4b,0x68,0x7a,0x80,0x6e,0x53,0x40,0x42,0x56,0x72,0x81,0x7b,0x65,0x4c,
0x42,0x4d,0x64,0x7a,0x81,0x74,0x5b,0x48,0x46,0x58,0x6e,0x7e,0x78,0x65,0x4e,0x44,
0x4c,0x62,0x76,0x7b,0x6c,0x58,0x48,0x4b,0x5b,0x70,0x77,0x71,0x5e,0x4c,0x4b,0x58,
0x6c,0x7a,0x77,0x66,0x54,0x4e,0x58,0x6c,0x79,0x79,0x6c,0x5a,0x4f,0x53,0x60,0x6e,
0x73,0x6d,0x5c,0x4e,0x4c,0x59,0x67,0x70,0x6d,0x60,0x56,0x55,0x5d,0x69,0x6e,0x6c,
0x60,0x57,0x56,0x5d,0x69,0x71,0x6e,0x66,0x5a,0x56,0x5d,0x68,0x6f,0x6c,0x61,0x54,
0x4f,0x56,0x62,0x6c,0x6b,0x64,0x5b,0x58,0x5b,0x64,0x6d,0x6d,0x65,0x5d,0x58,0x5b,
0x62,0x68,0x69,0x65,0x5d,0x5a,0x5b,0x60,0x65,0x65,0x64,0x5e,0x59,0x5b,0x61,0x68,
0x6b,0x69,0x64,0x60,0x61,0x62,0x64,0x64,0x60,0x5e,0x5d,0x5e,0x5e,0x63,0x61,0x5d,
0x5a,0x5b,0x5e,0x64,0x65,0x65,0x62,0x5f,0x5e,0x62,0x66,0x68,0x66,0x62,0x5d,0x5a,
0x5b,0x60,0x62,0x62,0x5e,0x5d,0x5f,0x61,0x62,0x62,0x5f,0x5d,0x5d,0x5f,0x61,0x64,
0x63,0x63,0x60,0x60,0x60,0x63,0x67,0x66,0x62,0x5f,0x5d,0x5e,0x5f,0x66,0x66,0x65,
0x61,0x60,0x60,0x62,0x61,0x61,0x61,0x60,0x5d,0x5d,0x5e,0x60,0x63,0x63,0x61,0x5f,
0x5d,0x5d,0x5f,0x61,0x63,0x63,0x63,0x64,0x64,0x66,0x65,0x64,0x63,0x63,0x62,0x61,
0x60,0x60,0x61,0x64,0x64,0x65,0x66,0x66,0x64,0x64,0x61,0x60,0x62,0x62,0x60,0x5f,
0x5e,0x5e,0x5e,0x5e,0x5e,0x5e,0x5e,0x5f,0x60,0x62,0x63,0x63,0x60,0x5e,0x5d,0x5e,
0x5f,0x5f,0x60,0x5e,0x5d,0x5e,0x60,0x62,0x63,0x64,0x64,0x64,0x62,0x63,0x64,0x65,
0x62,0x60,0x60,0x60,0x60,0x64,0x63,0x62,0x61,0x61,0x60,0x61,0x61,0x60,0x60,0x62,
0x62,0x63,0x64,0x64,0x62,0x64,0x64,0x64,0x63,0x64,0x64,0x64,0x60,0x5e,0x5d,0x5e,
0x60,0x63,0x64,0x63,0x62,0x62,0x60,0x60,0x62,0x64,0x64,0x65,0x60,0x5f,0x60,0x61,
0x62,0x62,0x64,0x64,0x62,0x64,0x64,0x63,0x64,0x61,0x5f,0x60,0x60,0x61,0x61,0x60,
0x5f,0x5e,0x5d,0x5d,0x5d,0x5e,0x5e,0x5f,0x5e,0x5f,0x60,0x61,0x61,0x62,0x65,0x66,
0x65,0x65,0x63,0x61,0x60,0x61,0x61,0x61,0x60,0x60,0x5e,0x5e,0x5f,0x61,0x64,0x64,
0x62,0x64,0x61,0x5f,0x61,0x60,0x5f,0x60,0x60,0x61,0x63,0x64,0x62,0x64,0x64,0x64,
0x62,0x61,0x61,0x61,0x62,0x64,0x64,0x64,0x62,0x62,0x63,0x61,0x5f,0x5e,0x5d,0x5b,
0x5b,0x5d,0x5e,0x61,0x63,0x63,0x61,0x62,0x61,0x60,0x61,0x60,0x5e,0x5f,0x5f,0x60,
0x61,0x62,0x62,0x63,0x64,0x66,0x66,0x66,0x64,0x61,0x61,0x62,0x61,0x64,0x5f,0x5f,
0x5f,0x5e,0x5e,0x5f,0x60,0x61,0x61,0x60,0x5f,0x5d,0x5e,0x5e,0x5e,0x5f,0x5e,0x60,
0x61,0x63,0x64,0x65,0x64,0x64,0x62,0x61,0x60,0x60,0x60,0x60,0x61,0x62,0x62,0x60,
0x60,0x61,0x60,0x5f,0x5d,0x5e,0x60,0x62,0x60,0x60,0x5e,0x5e,0x5e,0x61,0x64,0x64,
0x63,0x61,0x5e,0x5f,0x60,0x62,0x64,0x62,0x5e,0x60,0x5e,0x5d,0x5c,0x60,0x61,0x63,
0x62,0x63,0x62,0x61,0x60,0x61,0x61,0x61,0x60,0x64,0x64,0x63,0x61,0x61,0x62,0x62,
0x60,0x5f,0x5d,0x59,0x55,0x52,0x51,0x4e,0x48,0x45,0x40,0x3d,0x39,0x35,0x33,0x36,
0x37,0x37,0x35,0x32,0x33,0x35,0x37,0x38,0x36,0x37,0x37,0x36,0x36,0x37,0x36,0x3a,
0x37,0x36,0x37,0x37,0x37,0x37,0x38,0x39,0x3a,0x3b,0x39,0x39,0x39,0x37,0x35,0x34,
0x34,0x36,0x37,0x35,0x33,0x35,0x35,0x36,0x37,0x38,0x38,0x39,0x38,0x37,0x36,0x35,
0x34,0x35,0x37,0x37,0x36,0x39,0x39,0x39,0x39,0x3b,0x3c,0x3a,0x38,0x38,0x37,0x37,
0x36,0x36,0x36,0x35,0x31,0x31,0x33,0x34,0x37,0x36,0x34,0x35,0x36,0x37,0x38,0x37,
0x37,0x39,0x38,0x37,0x35,0x35,0x35,0x36,0x36,0x35,0x36,0x37,0x36,0x34,0x35,0x35,
// Line 20
0x39,0x38,0x37,0x37,0x35,0x35,0x38,0x3a,0x3b,0x3c,0x3b,0x3a,0x39,0x38,0x37,0x39,
0x38,0x37,0x37,0x36,0x35,0x37,0x36,0x37,0x3a,0x3d,0x3d,0x3a,0x38,0x39,0x3d,0x45,
0x4c,0x57,0x63,0x71,0x7d,0x8c,0x9a,0xa9,0xb4,0xbb,0xbd,0xbf,0xc1,0xc4,0xc3,0xc5,
0xc2,0xc0,0xbf,0xbe,0xbd,0xbf,0xc0,0xc0,0xbf,0xbd,0xbb,0xbb,0xba,0xbb,0xbd,0xbc,
0xbb,0xb9,0xb9,0xba,0xbb,0xbd,0xbd,0xbd,0xbd,0xbe,0xbf,0xc1,0xbf,0xbd,0xbb,0xbb,
0xb9,0xbb,0xbd,0xc0,0xbf,0xbd,0xbb,0xba,0xbb,0xbb,0xbd,0xbf,0xbf,0xbf,0xc0,0xbf,
0xbe,0xbf,0xbf,0xbf,0xbf,0xbf,0xbe,0xbc,0xbb,0xbb,0xbd,0xbe,0xbd,0xbe,0xbd,0xbd,
0xb9,0xb9,0xba,0xbb,0xbb,0xbb,0xb6,0xb6,0xb7,0xbb,0xbd,0xbf,0xbf,0xc0,0xc0,0xbf,
0xbd,0xc1,0xc0,0xc0,0xbf,0xbf,0xbd,0xbd,0xbc,0xbc,0xbd,0xbf,0xbf,0xbf,0xbf,0xbf,
0xbf,0xbf,0xbd,0xbd,0xbc,0xbd,0xbd,0xbe,0xbd,0xbd,0xbd,0xbd,0xb9,0xba,0xbb,0xbd,
0xbd,0xbd,0xbb,0xbd,0xbd,0xbd,0xbd,0xc0,0xbd,0xbe,0xc0,0xbf,0xbd,0xbd,0xbd,0xbd,
0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xc0,0xbf,0xbf,0xbd,0xbd,0xbd,0xbe,0xbd,0xbd,
0xbd,0xbd,0xbb,0xbc,0xbb,0xbf,0xbf,0xbf,0xbd,0xbc,0xbb,0xb8,0xb8,0xb9,0xbb,0xbd,
0xbd,0xbc,0xb9,0xb9,0xb9,0xbc,0xc1,0xc2,0xbe,0xb3,0xa6,0x9b,0x9b,0xa2,0xaa,0xaf,
0xac,0xa0,0x90,0x85,0x81,0x8b,0x9b,0xaa,0xaa,0x9e,0x8b,0x7c,0x79,0x87,0x9c,0xad,
0xb2,0xa8,0x90,0x80,0x78,0x84,0x9b,0xaf,0xb3,0xa8,0x91,0x7c,0x74,0x81,0x99,0xae,
0xb3,0xa7,0x93,0x80,0x7a,0x87,0x9c,0xae,0xb2,0xa7,0x90,0x7d,0x78,0x85,0x9a,0xac,
0xb0,0xa6,0x90,0x7f,0x7a,0x87,0x9e,0xb0,0xb3,0xa8,0x91,0x7e,0x79,0x86,0x9b,0xae,
0xb2,0xa8,0x94,0x82,0x7c,0x88,0x9c,0xae,0xb2,0xa8,0x92,0x7d,0x76,0x84,0x9b,0xaf,
0xb3,0xa9,0x95,0x82,0x7a,0x87,0x9e,0xb2,0xb7,0xa9,0x91,0x7c,0x79,0x87,0x9d,0xaf,
0xb3,0xa9,0x95,0x81,0x7c,0x88,0x9e,0xaf,0xb2,0xa6,0x90,0x7d,0x78,0x84,0x9a,0xad,
0xb2,0xa7,0x92,0x7f,0x79,0x85,0x99,0xac,0xb0,0xa7,0x90,0x7d,0x78,0x86,0x9c,0xaf,
0xb3,0xa8,0x94,0x81,0x7b,0x88,0x9c,0xae,0xb6,0xaa,0x94,0x81,0x7a,0x85,0x9a,0xae,
0xb4,0xaa,0x96,0x81,0x7a,0x87,0x9d,0xb0,0xb5,0xaa,0x94,0x81,0x7c,0x87,0x9e,0xb1,
0xb4,0xa8,0x91,0x7f,0x7b,0x89,0x9d,0xac,0xad,0x9f,0x8d,0x82,0x82,0x90,0xa2,0xaa,
0xa7,0x9c,0x8d,0x87,0x8d,0x97,0x9d,0x95,0x86,0x75,0x6f,0x7a,0x8d,0x9d,0x9f,0x8f,
0x75,0x64,0x65,0x79,0x94,0xa7,0xa5,0x8c,0x6b,0x59,0x5f,0x7d,0x9d,0xaf,0xa9,0x8d,
0x69,0x52,0x57,0x77,0x9b,0xaf,0xaa,0x8d,0x6a,0x55,0x5c,0x7b,0x9e,0xb2,0xae,0x90,
0x6d,0x5b,0x62,0x7c,0x9e,0xb0,0xaa,0x90,0x6d,0x58,0x5c,0x78,0x97,0xad,0xa8,0x90,
0x70,0x5c,0x5f,0x79,0x9a,0xad,0xa8,0x8f,0x6d,0x58,0x5e,0x79,0x9b,0xaf,0xaa,0x90,
0x6f,0x5b,0x61,0x7c,0x9b,0xad,0xa8,0x8f,0x6d,0x59,0x60,0x7b,0x99,0xad,0xa8,0x8d,
0x6a,0x58,0x5e,0x79,0x9a,0xae,0xa8,0x94,0x71,0x5a,0x60,0x7a,0x9a,0xad,0xa6,0x8c,
0x6d,0x5b,0x60,0x7c,0x9b,0xaf,0xac,0x92,0x70,0x5a,0x60,0x7c,0x99,0xad,0xaa,0x91,
0x71,0x5c,0x61,0x7f,0x9f,0xb1,0xac,0x92,0x6f,0x5b,0x60,0x7c,0x9a,0xaf,0xa8,0x8d,
0x6d,0x58,0x59,0x76,0x95,0xa8,0xa8,0x91,0x71,0x5b,0x5e,0x78,0x99,0xb0,0xae,0x95,
0x74,0x5d,0x5e,0x7a,0x9a,0xb0,0xae,0x95,0x72,0x5b,0x5e,0x78,0x97,0xac,0xa9,0x92,
0x70,0x59,0x5b,0x74,0x95,0xab,0xab,0x95,0x75,0x5d,0x5a,0x6d,0x8e,0xa7,0xac,0x99,
0x77,0x5b,0x51,0x61,0x7e,0x97,0xa5,0x97,0x7a,0x5e,0x52,0x5c,0x78,0x95,0xa3,0x9d,
0x82,0x63,0x50,0x56,0x71,0x91,0xa3,0x9d,0x82,0x66,0x53,0x57,0x6f,0x8d,0xa0,0x9f,
0x86,0x64,0x52,0x59,0x73,0x91,0xa0,0x9b,0x81,0x63,0x51,0x53,0x6f,0x8d,0x9f,0x9c,
0x81,0x62,0x50,0x57,0x6f,0x8f,0x9f,0x9a,0x7f,0x63,0x51,0x57,0x70,0x90,0xa3,0x9e,
0x82,0x63,0x51,0x57,0x71,0x92,0xa2,0x9c,0x82,0x63,0x50,0x55,0x6d,0x8c,0x9f,0x9c,
0x82,0x62,0x4f,0x55,0x6f,0x8f,0xa0,0x9c,0x84,0x64,0x4f,0x54,0x6e,0x8d,0x9f,0x9c,
0x83,0x66,0x53,0x58,0x6f,0x90,0xa0,0x9b,0x83,0x65,0x52,0x58,0x71,0x8e,0xa0,0x9c,
0x83,0x65,0x53,0x59,0x74,0x92,0xa2,0x9b,0x82,0x64,0x52,0x59,0x73,0x92,0xa2,0x9b,
0x81,0x63,0x51,0x57,0x71,0x8f,0xa0,0x9b,0x7f,0x60,0x4e,0x55,0x6f,0x8f,0xa2,0x9d,
0x84,0x65,0x54,0x58,0x73,0x92,0xa2,0x9b,0x7f,0x60,0x50,0x58,0x73,0x90,0xa0,0x9c,
0x82,0x65,0x55,0x5b,0x78,0x90,0x9c,0x98,0x80,0x67,0x59,0x5f,0x72,0x89,0x97,0x93,
0x81,0x70,0x64,0x64,0x6e,0x7c,0x84,0x83,0x7e,0x78,0x75,0x70,0x69,0x63,0x5d,0x5e,
0x67,0x73,0x7a,0x77,0x6a,0x58,0x4c,0x51,0x65,0x7d,0x90,0x8a,0x70,0x53,0x3f,0x44,
0x5f,0x80,0x94,0x91,0x74,0x52,0x3d,0x42,0x5e,0x7f,0x94,0x8f,0x73,0x50,0x39,0x3f,
0x5d,0x7f,0x93,0x8c,0x70,0x51,0x40,0x48,0x61,0x7f,0x92,0x8d,0x73,0x53,0x3e,0x44,
0x60,0x7d,0x8d,0x8b,0x73,0x55,0x41,0x45,0x5a,0x7a,0x8f,0x8d,0x73,0x53,0x40,0x44,
0x5d,0x7e,0x93,0x92,0x79,0x57,0x42,0x46,0x61,0x81,0x92,0x8c,0x72,0x52,0x3d,0x41,
0x5b,0x7d,0x92,0x8d,0x72,0x52,0x40,0x47,0x60,0x7f,0x91,0x8d,0x72,0x50,0x3b,0x42,
0x5e,0x7e,0x8d,0x8c,0x72,0x53,0x3f,0x44,0x5d,0x81,0x8f,0x89,0x72,0x54,0x40,0x47,
0x60,0x7f,0x93,0x8f,0x74,0x54,0x40,0x47,0x60,0x7f,0x91,0x8c,0x73,0x54,0x41,0x48,
0x63,0x82,0x95,0x8d,0x71,0x50,0x3e,0x44,0x5d,0x7d,0x8f,0x8b,0x73,0x56,0x43,0x4b,
0x63,0x82,0x95,0x8f,0x75,0x58,0x44,0x49,0x63,0x82,0x94,0x8e,0x74,0x54,0x42,0x47,
0x5f,0x7e,0x8e,0x87,0x6c,0x4f,0x3f,0x48,0x63,0x7e,0x8c,0x85,0x6b,0x4f,0x42,0x4e,
0x69,0x82,0x8a,0x7a,0x5c,0x45,0x40,0x50,0x6d,0x85,0x87,0x70,0x4e,0x36,0x38,0x51,
0x71,0x84,0x83,0x69,0x47,0x32,0x37,0x51,0x73,0x88,0x83,0x69,0x46,0x32,0x3a,0x56,
0x76,0x8c,0x88,0x6e,0x4a,0x35,0x39,0x56,0x78,0x8b,0x87,0x6d,0x49,0x34,0x39,0x55,
0x76,0x8c,0x86,0x69,0x47,0x32,0x37,0x4e,0x71,0x87,0x85,0x6b,0x49,0x34,0x39,0x55,
0x75,0x8b,0x88,0x6f,0x4b,0x33,0x33,0x4f,0x73,0x8b,0x88,0x6e,0x4a,0x34,0x38,0x54,
0x77,0x8d,0x88,0x6b,0x47,0x2f,0x32,0x4f,0x72,0x89,0x89,0x70,0x4b,0x34,0x35,0x51,
0x74,0x8b,0x86,0x6b,0x49,0x32,0x34,0x4f,0x72,0x8a,0x89,0x6f,0x4c,0x36,0x39,0x55,
0x75,0x8b,0x87,0x6f,0x4d,0x37,0x38,0x52,0x71,0x87,0x85,0x6b,0x48,0x34,0x36,0x51,
0x74,0x8b,0x88,0x6d,0x49,0x31,0x36,0x52,0x73,0x88,0x85,0x6a,0x46,0x31,0x34,0x4f,
0x73,0x89,0x83,0x6a,0x4a,0x37,0x3b,0x57,0x77,0x8c,0x88,0x6d,0x4b,0x37,0x39,0x53,
0x73,0x87,0x84,0x6d,0x4b,0x36,0x3b,0x56,0x77,0x88,0x85,0x6b,0x4a,0x37,0x39,0x4f,
0x73,0x87,0x86,0x72,0x54,0x3e,0x3f,0x4d,0x64,0x78,0x7e,0x73,0x5c,0x47,0x3a,0x3c,
0x48,0x58,0x64,0x67,0x5e,0x4f,0x40,0x37,0x38,0x45,0x56,0x64,0x67,0x5d,0x4a,0x37,
0x30,0x3a,0x52,0x68,0x6f,0x66,0x51,0x38,0x29,0x31,0x48,0x60,0x6e,0x64,0x4a,0x33,
0x2b,0x37,0x4f,0x65,0x6d,0x65,0x4f,0x37,0x2c,0x37,0x4e,0x64,0x6c,0x62,0x4a,0x37,
0x2f,0x39,0x50,0x65,0x6d,0x64,0x4d,0x37,0x2e,0x39,0x4f,0x64,0x6c,0x63,0x4e,0x39,
0x2f,0x38,0x50,0x65,0x6c,0x63,0x4d,0x37,0x2c,0x35,0x4c,0x65,0x6d,0x64,0x4c,0x36,
0x2c,0x36,0x4e,0x63,0x6b,0x64,0x4c,0x34,0x2d,0x3a,0x52,0x67,0x6d,0x62,0x4b,0x35,
0x2b,0x35,0x4d,0x64,0x6b,0x62,0x4b,0x35,0x2f,0x39,0x4e,0x64,0x6c,0x63,0x4b,0x35,
0x2b,0x37,0x4f,0x66,0x6c,0x65,0x4c,0x35,0x2b,0x37,0x4d,0x64,0x6a,0x5f,0x4a,0x35,
0x2e,0x3b,0x51,0x67,0x6f,0x64,0x4d,0x36,0x2d,0x39,0x52,0x68,0x6d,0x60,0x49,0x32,
0x29,0x37,0x4e,0x65,0x6d,0x62,0x49,0x36,0x31,0x3e,0x54,0x68,0x6c,0x60,0x49,0x33,
0x2b,0x38,0x4e,0x60,0x67,0x5f,0x4b,0x39,0x32,0x3b,0x4f,0x64,0x6a,0x60,0x4d,0x3b,
0x34,0x3b,0x49,0x57,0x5c,0x58,0x4b,0x40,0x3a,0x40,0x49,0x51,0x51,0x4b,0x44,0x3f,
0x3c,0x3d,0x40,0x43,0x3d,0x42,0x42,0x48,0x47,0x46,0x43,0x41,0x3e,0x40,0x40,0x42,
0x43,0x44,0x42,0x41,0x40,0x40,0x42,0x45,0x42,0x40,0x40,0x41,0x41,0x42,0x42,0x43,
0x43,0x42,0x40,0x41,0x43,0x45,0x45,0x45,0x44,0x43,0x43,0x42,0x42,0x45,0x44,0x44,
0x44,0x45,0x44,0x43,0x42,0x41,0x41,0x42,0x42,0x42,0x44,0x42,0x40,0x41,0x40,0x40,
0x42,0x43,0x40,0x3f,0x3c,0x3e,0x40,0x41,0x40,0x41,0x42,0x43,0x42,0x42,0x43,0x45,
0x45,0x44,0x41,0x40,0x40,0x40,0x41,0x42,0x41,0x42,0x42,0x41,0x40,0x42,0x44,0x44,
0x43,0x42,0x41,0x44,0x43,0x43,0x44,0x43,0x42,0x44,0x45,0x45,0x44,0x43,0x42,0x42,
0x42,0x44,0x44,0x45,0x44,0x43,0x43,0x43,0x44,0x47,0x45,0x44,0x42,0x42,0x41,0x42,
0x44,0x45,0x46,0x47,0x46,0x45,0x44,0x43,0x43,0x45,0x45,0x43,0x42,0x42,0x41,0x41,
0x40,0x42,0x43,0x42,0x42,0x42,0x42,0x41,0x40,0x40,0x42,0x42,0x44,0x43,0x42,0x42,
0x3f,0x3f,0x40,0x41,0x41,0x41,0x41,0x3f,0x3f,0x42,0x44,0x45,0x44,0x45,0x45,0x46,
0x45,0x44,0x44,0x42,0x40,0x3f,0x3b,0x3a,0x39,0x3a,0x39,0x38,0x38,0x3a,0x39,0x3b,
// Line 21
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//Field 6
// Line 10
0x36,0x36,0x39,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x35,0x35,0x36,0x38,0x36,0x34,0x35,
0x36,0x37,0x37,0x36,0x37,0x39,0x3a,0x38,0x35,0x34,0x34,0x35,0x36,0x38,0x38,0x39,
0x3b,0x39,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x36,0x35,0x37,0x38,0x38,0x39,0x3a,
0x39,0x38,0x38,0x35,0x33,0x33,0x34,0x34,0x38,0x38,0x38,0x3a,0x38,0x36,0x38,0x38,
0x39,0x3b,0x39,0x36,0x36,0x35,0x35,0x35,0x37,0x38,0x38,0x38,0x36,0x35,0x38,0x38,
0x38,0x38,0x36,0x35,0x36,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x36,0x38,
0x39,0x3a,0x3a,0x38,0x37,0x35,0x35,0x36,0x38,0x38,0x3a,0x39,0x37,0x35,0x35,0x38,
0x3a,0x3c,0x3c,0x39,0x39,0x38,0x36,0x38,0x38,0x38,0x3a,0x38,0x37,0x36,0x36,0x35,
0x37,0x37,0x38,0x37,0x36,0x34,0x35,0x36,0x38,0x38,0x38,0x36,0x36,0x39,0x39,0x3a,
0x3a,0x38,0x38,0x38,0x38,0x3a,0x3c,0x3e,0x3d,0x3a,0x38,0x37,0x38,0x39,0x38,0x38,
0x39,0x38,0x36,0x34,0x34,0x34,0x35,0x36,0x38,0x38,0x38,0x37,0x35,0x36,0x38,0x39,
0x3a,0x3a,0x3b,0x3b,0x3a,0x38,0x38,0x39,0x39,0x39,0x39,0x3a,0x39,0x38,0x36,0x38,
0x3a,0x3c,0x3c,0x3c,0x3c,0x3a,0x39,0x37,0x35,0x36,0x38,0x39,0x38,0x37,0x39,0x3b,
0x3b,0x3a,0x3a,0x3c,0x3c,0x3b,0x3a,0x39,0x3a,0x3c,0x3e,0x3d,0x3e,0x3b,0x3b,0x3b,
0x3a,0x39,0x38,0x38,0x35,0x33,0x34,0x36,0x36,0x38,0x38,0x35,0x36,0x36,0x35,0x34,
0x34,0x33,0x35,0x35,0x37,0x36,0x39,0x39,0x38,0x39,0x3a,0x3c,0x3c,0x3c,0x3a,0x39,
0x37,0x36,0x38,0x3a,0x38,0x38,0x36,0x36,0x38,0x37,0x36,0x36,0x38,0x38,0x38,0x35,
0x35,0x38,0x3c,0x3c,0x39,0x35,0x34,0x35,0x38,0x39,0x3a,0x38,0x3c,0x38,0x34,0x35,
0x37,0x3a,0x3c,0x3b,0x39,0x37,0x36,0x36,0x36,0x37,0x37,0x38,0x38,0x37,0x35,0x34,
0x34,0x34,0x36,0x37,0x37,0x38,0x38,0x36,0x37,0x36,0x36,0x37,0x37,0x38,0x38,0x37,
0x38,0x38,0x39,0x39,0x39,0x3c,0x3e,0x3e,0x3d,0x39,0x38,0x39,0x3a,0x39,0x38,0x38,
0x36,0x35,0x34,0x36,0x39,0x3b,0x3c,0x3c,0x3c,0x39,0x38,0x38,0x38,0x39,0x3a,0x39,
0x38,0x36,0x35,0x35,0x36,0x36,0x36,0x35,0x39,0x39,0x38,0x39,0x3a,0x3a,0x3b,0x3a,
0x38,0x38,0x39,0x38,0x36,0x35,0x36,0x38,0x39,0x3a,0x39,0x3b,0x3a,0x39,0x38,0x38,
0x37,0x38,0x38,0x38,0x3a,0x3b,0x39,0x38,0x38,0x38,0x39,0x39,0x39,0x39,0x39,0x38,
0x36,0x36,0x38,0x3b,0x3b,0x38,0x36,0x38,0x38,0x38,0x36,0x39,0x38,0x38,0x38,0x37,
0x35,0x35,0x35,0x35,0x37,0x38,0x39,0x3b,0x3b,0x39,0x3a,0x3b,0x3c,0x3d,0x3c,0x3a,
0x3a,0x39,0x37,0x38,0x38,0x3a,0x39,0x39,0x38,0x36,0x37,0x38,0x36,0x38,0x39,0x39,
0x38,0x36,0x35,0x35,0x36,0x36,0x33,0x35,0x36,0x36,0x37,0x36,0x36,0x38,0x38,0x38,
0x3b,0x3c,0x3d,0x3b,0x38,0x36,0x37,0x39,0x3a,0x3a,0x39,0x37,0x35,0x35,0x36,0x38,
0x3b,0x3a,0x38,0x38,0x39,0x38,0x38,0x37,0x38,0x38,0x38,0x36,0x37,0x36,0x36,0x36,
0x38,0x39,0x39,0x3e,0x3c,0x3b,0x3c,0x3c,0x3c,0x3b,0x39,0x39,0x39,0x38,0x38,0x36,
0x3c,0x3d,0x3c,0x3b,0x3b,0x3c,0x3d,0x3b,0x38,0x38,0x38,0x38,0x38,0x36,0x35,0x36,
0x38,0x37,0x37,0x38,0x39,0x39,0x39,0x38,0x36,0x35,0x36,0x38,0x3a,0x3b,0x3a,0x38,
0x36,0x35,0x36,0x39,0x3a,0x3b,0x3a,0x38,0x36,0x35,0x38,0x39,0x3b,0x3b,0x3a,0x3a,
0x3a,0x3a,0x3b,0x3a,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x38,0x3a,
0x39,0x37,0x38,0x38,0x36,0x35,0x35,0x36,0x39,0x39,0x38,0x38,0x3a,0x3a,0x39,0x3a,
0x3b,0x3c,0x3c,0x3a,0x36,0x34,0x34,0x37,0x38,0x36,0x35,0x37,0x39,0x39,0x38,0x38,
0x3a,0x3a,0x3b,0x3b,0x3a,0x39,0x38,0x38,0x38,0x36,0x36,0x38,0x3a,0x3b,0x3c,0x3a,
0x39,0x36,0x3a,0x3b,0x3a,0x39,0x38,0x38,0x38,0x36,0x32,0x33,0x35,0x36,0x36,0x34,
0x33,0x37,0x3a,0x3a,0x39,0x38,0x39,0x3c,0x3c,0x3a,0x39,0x3a,0x39,0x37,0x37,0x36,
0x36,0x37,0x38,0x38,0x39,0x38,0x3a,0x3a,0x39,0x36,0x38,0x3a,0x3c,0x3b,0x3a,0x38,
0x35,0x36,0x38,0x39,0x3a,0x38,0x35,0x35,0x35,0x36,0x37,0x39,0x3b,0x3a,0x3a,0x38,
0x38,0x38,0x37,0x36,0x35,0x33,0x34,0x35,0x35,0x35,0x37,0x39,0x3c,0x39,0x3b,0x3c,
0x3c,0x3a,0x39,0x38,0x3b,0x39,0x38,0x39,0x38,0x37,0x37,0x36,0x35,0x36,0x39,0x3a,
0x38,0x38,0x38,0x38,0x39,0x38,0x37,0x38,0x38,0x38,0x38,0x38,0x3a,0x3c,0x3a,0x39,
0x3a,0x3c,0x3e,0x3c,0x39,0x37,0x36,0x36,0x35,0x34,0x3a,0x38,0x36,0x35,0x36,0x38,
0x3a,0x3b,0x3b,0x3c,0x3c,0x3c,0x38,0x38,0x36,0x35,0x37,0x36,0x36,0x37,0x37,0x36,
0x36,0x37,0x38,0x38,0x38,0x35,0x34,0x36,0x36,0x37,0x38,0x38,0x38,0x39,0x38,0x38,
0x38,0x38,0x36,0x38,0x38,0x38,0x38,0x36,0x34,0x35,0x37,0x37,0x36,0x35,0x36,0x39,
0x3a,0x38,0x37,0x37,0x38,0x37,0x36,0x35,0x36,0x38,0x38,0x36,0x36,0x38,0x3b,0x3b,
0x3a,0x39,0x38,0x38,0x38,0x34,0x35,0x35,0x32,0x32,0x33,0x37,0x39,0x38,0x36,0x35,
0x36,0x36,0x35,0x36,0x38,0x38,0x38,0x35,0x33,0x35,0x38,0x39,0x3a,0x39,0x39,0x38,
0x34,0x31,0x32,0x34,0x36,0x35,0x36,0x36,0x38,0x38,0x36,0x35,0x36,0x38,0x39,0x39,
0x38,0x37,0x38,0x38,0x35,0x34,0x34,0x35,0x34,0x33,0x34,0x36,0x38,0x38,0x36,0x3a,
0x39,0x3b,0x3f,0x3e,0x3c,0x3b,0x39,0x35,0x33,0x33,0x36,0x37,0x37,0x35,0x35,0x37,
0x38,0x38,0x38,0x38,0x38,0x35,0x33,0x32,0x33,0x33,0x34,0x35,0x38,0x3a,0x3a,0x38,
0x38,0x3a,0x3d,0x3d,0x3b,0x39,0x3a,0x39,0x38,0x36,0x38,0x3a,0x3a,0x36,0x35,0x35,
0x38,0x39,0x39,0x38,0x38,0x39,0x38,0x36,0x36,0x37,0x39,0x39,0x37,0x36,0x38,0x38,
0x38,0x37,0x38,0x39,0x37,0x35,0x33,0x35,0x38,0x38,0x37,0x37,0x34,0x34,0x36,0x36,
0x36,0x38,0x3b,0x39,0x38,0x39,0x3a,0x39,0x3b,0x39,0x38,0x38,0x39,0x37,0x39,0x39,
0x39,0x3a,0x3a,0x3b,0x3b,0x3b,0x39,0x38,0x36,0x36,0x36,0x36,0x36,0x36,0x38,0x38,
0x38,0x37,0x38,0x3a,0x3c,0x3b,0x3a,0x39,0x38,0x38,0x39,0x3a,0x3c,0x3b,0x3a,0x38,
0x38,0x3a,0x3b,0x3a,0x3c,0x3b,0x3a,0x39,0x38,0x38,0x3b,0x3a,0x38,0x37,0x37,0x39,
0x3a,0x39,0x3a,0x39,0x38,0x36,0x35,0x36,0x36,0x37,0x39,0x39,0x36,0x33,0x32,0x33,
0x34,0x35,0x36,0x38,0x36,0x33,0x34,0x36,0x39,0x3a,0x3c,0x3c,0x39,0x36,0x33,0x32,
0x34,0x35,0x37,0x37,0x38,0x38,0x39,0x37,0x35,0x35,0x36,0x36,0x36,0x35,0x36,0x35,
0x38,0x37,0x38,0x39,0x39,0x38,0x38,0x37,0x37,0x36,0x36,0x35,0x34,0x35,0x35,0x36,
0x38,0x37,0x38,0x3a,0x3a,0x39,0x39,0x3a,0x39,0x39,0x39,0x39,0x37,0x34,0x33,0x32,
0x34,0x35,0x35,0x36,0x36,0x34,0x35,0x34,0x34,0x35,0x37,0x36,0x35,0x34,0x34,0x34,
0x36,0x37,0x38,0x3b,0x39,0x36,0x37,0x35,0x34,0x36,0x36,0x37,0x38,0x38,0x36,0x36,
0x35,0x37,0x37,0x36,0x34,0x33,0x34,0x34,0x34,0x33,0x33,0x34,0x38,0x36,0x35,0x37,
0x38,0x38,0x37,0x37,0x39,0x3a,0x38,0x36,0x35,0x36,0x35,0x34,0x35,0x35,0x35,0x36,
0x36,0x36,0x38,0x39,0x37,0x36,0x35,0x36,0x38,0x39,0x38,0x38,0x39,0x38,0x35,0x34,
0x36,0x36,0x38,0x36,0x34,0x35,0x36,0x36,0x37,0x37,0x38,0x38,0x36,0x35,0x34,0x36,
0x36,0x35,0x34,0x34,0x35,0x39,0x38,0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x36,0x35,
0x34,0x33,0x36,0x39,0x3a,0x3b,0x38,0x36,0x38,0x38,0x39,0x38,0x38,0x35,0x34,0x33,
0x33,0x34,0x39,0x38,0x38,0x38,0x38,0x38,0x37,0x36,0x34,0x35,0x34,0x32,0x32,0x33,
0x35,0x39,0x3a,0x3c,0x3c,0x3a,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x35,0x32,0x32,0x32,
0x33,0x35,0x38,0x39,0x3a,0x39,0x3a,0x38,0x3a,0x38,0x37,0x37,0x37,0x34,0x33,0x33,
0x33,0x35,0x34,0x34,0x36,0x36,0x38,0x38,0x37,0x37,0x36,0x36,0x36,0x36,0x38,0x39,
0x39,0x38,0x36,0x33,0x33,0x35,0x36,0x36,0x36,0x36,0x38,0x39,0x3a,0x39,0x38,0x35,
0x34,0x33,0x33,0x33,0x33,0x34,0x35,0x36,0x35,0x35,0x38,0x3b,0x3d,0x3c,0x39,0x38,
0x38,0x36,0x36,0x36,0x37,0x38,0x38,0x38,0x38,0x38,0x3a,0x3a,0x38,0x37,0x36,0x35,
0x35,0x35,0x37,0x36,0x36,0x34,0x33,0x36,0x39,0x3a,0x3d,0x3a,0x39,0x39,0x38,0x36,
0x36,0x37,0x39,0x39,0x39,0x38,0x35,0x37,0x37,0x38,0x39,0x3a,0x3a,0x3a,0x38,0x36,
0x38,0x38,0x3a,0x3c,0x3a,0x36,0x35,0x35,0x35,0x36,0x39,0x3a,0x39,0x38,0x38,0x38,
0x39,0x39,0x3a,0x3b,0x39,0x36,0x34,0x34,0x35,0x36,0x37,0x38,0x37,0x37,0x37,0x37,
0x38,0x38,0x36,0x36,0x35,0x34,0x36,0x38,0x38,0x37,0x36,0x34,0x36,0x36,0x39,0x3a,
0x3a,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x36,0x38,0x38,0x38,0x36,0x36,0x38,0x3a,
0x38,0x36,0x37,0x38,0x38,0x35,0x34,0x33,0x36,0x36,0x36,0x35,0x37,0x37,0x37,0x38,
0x38,0x38,0x3a,0x39,0x38,0x38,0x38,0x39,0x39,0x39,0x39,0x38,0x37,0x35,0x36,0x37,
0x38,0x38,0x38,0x37,0x36,0x37,0x38,0x37,0x38,0x38,0x38,0x36,0x36,0x36,0x37,0x38,
0x37,0x35,0x38,0x39,0x38,0x37,0x35,0x35,0x37,0x38,0x38,0x36,0x38,0x37,0x37,0x37,
0x37,0x38,0x39,0x37,0x35,0x35,0x36,0x38,0x38,0x36,0x35,0x36,0x35,0x33,0x34,0x37,
0x38,0x38,0x38,0x39,0x3b,0x3b,0x39,0x37,0x37,0x37,0x36,0x33,0x32,0x30,0x33,0x32,
// Line 11
0x35,0x32,0x31,0x33,0x37,0x38,0x3a,0x39,0x37,0x36,0x37,0x36,0x36,0x38,0x38,0x35,
0x35,0x35,0x36,0x37,0x37,0x35,0x36,0x37,0x39,0x39,0x37,0x36,0x34,0x35,0x34,0x33,
0x34,0x35,0x33,0x34,0x33,0x35,0x38,0x39,0x39,0x37,0x36,0x37,0x39,0x3a,0x3b,0x39,
0x35,0x32,0x33,0x3d,0x4f,0x60,0x6f,0x77,0x74,0x6b,0x5e,0x52,0x52,0x5a,0x67,0x71,
0x75,0x73,0x6f,0x68,0x60,0x5d,0x5f,0x65,0x6d,0x74,0x74,0x72,0x6e,0x66,0x5f,0x5b,
0x5e,0x64,0x6e,0x73,0x74,0x6e,0x67,0x60,0x5a,0x59,0x5f,0x67,0x70,0x76,0x75,0x71,
0x6a,0x64,0x60,0x60,0x64,0x68,0x6f,0x70,0x70,0x6e,0x68,0x62,0x5c,0x59,0x5c,0x63,
0x6a,0x70,0x74,0x70,0x67,0x5e,0x58,0x59,0x5e,0x65,0x6e,0x76,0x78,0x73,0x6c,0x65,
0x61,0x60,0x64,0x67,0x69,0x6a,0x6a,0x6b,0x70,0x78,0x85,0x90,0x9f,0xa8,0xa9,0xa4,
0x97,0x85,0x78,0x6b,0x62,0x5a,0x53,0x4d,0x47,0x3e,0x36,0x34,0x3a,0x4a,0x5d,0x6e,
0x7c,0x85,0x8d,0x91,0x94,0x97,0x9a,0x9c,0x9d,0x9b,0x99,0x99,0x9a,0x99,0x95,0x8d,
0x81,0x71,0x63,0x59,0x52,0x4c,0x43,0x3a,0x36,0x38,0x45,0x59,0x6f,0x7c,0x80,0x79,
0x6a,0x5e,0x57,0x53,0x4e,0x47,0x3c,0x32,0x2f,0x37,0x49,0x64,0x79,0x83,0x83,0x76,
0x67,0x59,0x50,0x4a,0x46,0x40,0x3d,0x38,0x31,0x2a,0x2b,0x33,0x3e,0x4c,0x5d,0x6b,
0x73,0x76,0x71,0x67,0x5f,0x5a,0x56,0x52,0x49,0x3e,0x35,0x2f,0x33,0x43,0x5b,0x72,
0x83,0x8d,0x95,0x96,0x98,0x94,0x8b,0x7d,0x6b,0x5d,0x56,0x59,0x64,0x70,0x76,0x74,
0x6c,0x64,0x5d,0x59,0x5d,0x56,0x48,0x38,0x2b,0x29,0x36,0x4c,0x64,0x75,0x7c,0x78,
0x6c,0x5f,0x56,0x52,0x4f,0x48,0x3d,0x32,0x2d,0x36,0x4b,0x62,0x74,0x7f,0x7d,0x72,
0x64,0x59,0x58,0x5e,0x66,0x6b,0x70,0x76,0x7d,0x82,0x8f,0x9a,0xa3,0xa8,0xa5,0x9d,
0x93,0x87,0x79,0x6b,0x5f,0x55,0x4d,0x47,0x42,0x3f,0x3d,0x3b,0x37,0x35,0x35,0x37,
0x3e,0x47,0x51,0x5f,0x6b,0x76,0x80,0x89,0x92,0x96,0x93,0x88,0x7a,0x67,0x56,0x48,
0x3e,0x39,0x39,0x3a,0x3a,0x38,0x3a,0x3c,0x3e,0x41,0x41,0x3d,0x37,0x32,0x32,0x3d,
0x51,0x67,0x75,0x7d,0x78,0x6b,0x62,0x5a,0x59,0x60,0x68,0x6e,0x72,0x76,0x80,0x8c,
0x97,0x9e,0x9e,0x95,0x84,0x6f,0x5c,0x4e,0x43,0x3d,0x39,0x37,0x38,0x38,0x3a,0x3c,
0x3c,0x3c,0x3a,0x38,0x35,0x35,0x36,0x38,0x37,0x37,0x38,0x3a,0x3d,0x3d,0x3d,0x3c,
0x3a,0x38,0x38,0x38,0x3a,0x3c,0x3c,0x3a,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x3a,0x3b,
0x38,0x36,0x37,0x38,0x3a,0x3a,0x3a,0x39,0x39,0x38,0x37,0x36,0x38,0x3a,0x3a,0x3a,
0x39,0x38,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x38,0x37,0x38,0x39,0x3a,0x3a,0x3b,0x3c,
0x3c,0x3a,0x3a,0x38,0x37,0x38,0x37,0x36,0x36,0x35,0x36,0x37,0x38,0x38,0x38,0x38,
0x37,0x37,0x38,0x3a,0x38,0x37,0x36,0x35,0x36,0x36,0x37,0x39,0x3a,0x38,0x37,0x36,
0x37,0x37,0x3a,0x3a,0x38,0x38,0x38,0x38,0x3a,0x39,0x39,0x3c,0x3c,0x39,0x37,0x35,
0x35,0x37,0x3a,0x3c,0x3c,0x3a,0x38,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x38,
0x38,0x39,0x39,0x38,0x39,0x38,0x38,0x37,0x38,0x36,0x35,0x36,0x38,0x36,0x3a,0x38,
0x38,0x3c,0x3d,0x3c,0x3d,0x3b,0x3b,0x3c,0x3b,0x39,0x39,0x37,0x36,0x35,0x36,0x37,
0x38,0x39,0x38,0x36,0x36,0x36,0x39,0x3b,0x3b,0x39,0x3a,0x39,0x3a,0x3a,0x3c,0x3c,
0x3a,0x3a,0x3a,0x39,0x3c,0x38,0x36,0x37,0x35,0x35,0x37,0x38,0x38,0x3a,0x38,0x37,
0x36,0x36,0x36,0x38,0x3a,0x38,0x36,0x33,0x32,0x32,0x35,0x37,0x38,0x37,0x36,0x36,
0x36,0x36,0x37,0x38,0x39,0x38,0x37,0x36,0x35,0x36,0x36,0x35,0x33,0x35,0x37,0x38,
0x38,0x36,0x36,0x39,0x3a,0x39,0x36,0x37,0x36,0x35,0x36,0x35,0x35,0x38,0x39,0x39,
0x3b,0x3a,0x39,0x38,0x38,0x39,0x3a,0x39,0x38,0x3a,0x3d,0x3b,0x39,0x38,0x3b,0x3d,
0x3a,0x36,0x34,0x35,0x36,0x35,0x34,0x33,0x35,0x37,0x37,0x37,0x37,0x38,0x39,0x39,
0x37,0x35,0x36,0x38,0x38,0x36,0x36,0x36,0x34,0x34,0x34,0x35,0x36,0x36,0x36,0x35,
0x35,0x33,0x34,0x36,0x37,0x36,0x37,0x35,0x36,0x38,0x3a,0x3a,0x38,0x36,0x38,0x39,
0x37,0x34,0x34,0x35,0x35,0x33,0x32,0x32,0x34,0x36,0x37,0x38,0x39,0x38,0x37,0x35,
0x33,0x34,0x37,0x37,0x38,0x38,0x36,0x34,0x33,0x33,0x36,0x36,0x3a,0x38,0x37,0x38,
0x39,0x38,0x3a,0x38,0x3a,0x3b,0x3a,0x38,0x37,0x37,0x37,0x36,0x35,0x33,0x34,0x36,
0x36,0x35,0x37,0x37,0x38,0x37,0x38,0x39,0x3c,0x3b,0x39,0x39,0x38,0x39,0x3a,0x39,
0x37,0x36,0x35,0x33,0x33,0x34,0x36,0x37,0x36,0x34,0x33,0x36,0x38,0x39,0x3a,0x38,
0x36,0x35,0x34,0x35,0x37,0x39,0x3a,0x38,0x37,0x36,0x35,0x34,0x33,0x33,0x35,0x36,
0x35,0x34,0x33,0x33,0x36,0x37,0x37,0x36,0x37,0x36,0x35,0x36,0x37,0x38,0x38,0x38,
0x39,0x3c,0x3d,0x3d,0x3d,0x3d,0x3c,0x39,0x36,0x34,0x32,0x36,0x36,0x34,0x34,0x35,
0x36,0x37,0x38,0x37,0x38,0x39,0x39,0x38,0x36,0x34,0x34,0x34,0x35,0x37,0x37,0x36,
0x36,0x37,0x36,0x34,0x32,0x32,0x35,0x37,0x37,0x35,0x34,0x34,0x34,0x36,0x38,0x38,
0x37,0x36,0x36,0x34,0x34,0x36,0x36,0x38,0x36,0x32,0x33,0x33,0x34,0x33,0x33,0x33,
0x35,0x35,0x35,0x35,0x36,0x35,0x33,0x33,0x35,0x36,0x38,0x37,0x36,0x37,0x38,0x37,
0x37,0x38,0x3a,0x3a,0x3a,0x39,0x3a,0x3a,0x3b,0x38,0x38,0x38,0x38,0x38,0x37,0x37,
0x39,0x38,0x37,0x37,0x37,0x38,0x39,0x3a,0x38,0x37,0x37,0x37,0x37,0x39,0x3b,0x3c,
0x3c,0x3b,0x3a,0x3a,0x39,0x37,0x36,0x36,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x39,
0x3a,0x3a,0x3a,0x3c,0x38,0x36,0x36,0x37,0x3a,0x39,0x3a,0x38,0x38,0x38,0x37,0x37,
0x37,0x38,0x38,0x38,0x37,0x35,0x36,0x35,0x33,0x33,0x35,0x35,0x34,0x33,0x33,0x35,
0x37,0x38,0x39,0x3a,0x3c,0x39,0x37,0x35,0x33,0x34,0x35,0x3b,0x46,0x55,0x65,0x75,
0x80,0x88,0x8e,0x95,0x9b,0x9d,0x9f,0x9f,0x9d,0x99,0x96,0x96,0x97,0x99,0x9c,0x9e,
0x9f,0x9e,0x9a,0x97,0x96,0x97,0x99,0x99,0x99,0x99,0x99,0x99,0x9a,0x9a,0x9c,0x9e,
0x9d,0x9b,0x9b,0x9b,0x9b,0x99,0x97,0x97,0x99,0x9a,0x9b,0x9a,0x9c,0x9a,0x98,0x9a,
0x9a,0x9a,0x9b,0x9a,0x97,0x97,0x9a,0x9a,0x99,0x99,0x99,0x99,0x99,0x98,0x97,0x99,
0x99,0x97,0x99,0x9a,0x9b,0x9b,0x9b,0x9a,0x9a,0x99,0x99,0x99,0x98,0x97,0x98,0x99,
0x99,0x97,0x98,0x99,0x9a,0x9b,0x9b,0x9b,0x9b,0x99,0x99,0x9b,0x9c,0x9b,0x99,0x99,
0x99,0x9a,0x9b,0x9d,0x9f,0x9e,0x9e,0x9d,0x9d,0x9b,0x9d,0x9e,0x9e,0x9b,0x9b,0x9a,
0x9b,0x9b,0x99,0x98,0x99,0x9b,0x9a,0x99,0x9a,0x9a,0x9a,0x9b,0x9b,0x99,0x9b,0x9b,
0x9a,0x9a,0x9a,0x9b,0x9a,0x9a,0x9a,0x9b,0x9c,0x9b,0x9b,0x9b,0x9c,0x9a,0x9b,0x9b,
0x9b,0x9b,0x9b,0x9b,0x9b,0x9b,0x9c,0x9d,0x9d,0x9b,0x9b,0x9c,0x9d,0x9a,0x9a,0x9a,
0x9b,0x9d,0x9c,0x9a,0x9b,0x9a,0x9a,0x9b,0x9c,0x9c,0x9b,0x9a,0x9a,0x9c,0x9d,0x9d,
0x9d,0x9e,0xa0,0x9e,0x9e,0x9c,0x9a,0x9a,0x99,0x97,0x99,0x9a,0x9c,0x9c,0x9a,0x99,
0x9a,0x9d,0x9e,0x9d,0x9e,0x9e,0x9e,0x9f,0xa0,0xa1,0xa3,0xa1,0x9d,0x9b,0x9a,0x9a,
0x9b,0x9a,0x99,0x99,0x9a,0x9d,0x9c,0x9d,0x9e,0x9e,0x9d,0x9b,0x9a,0x9a,0x9b,0x9b,
0x9b,0x9b,0x9c,0x9c,0x9d,0x9d,0x9e,0x9e,0x9d,0x9b,0x9a,0x9a,0x99,0x99,0x97,0x97,
0x98,0x98,0x97,0x98,0x9a,0x9b,0x9d,0x9d,0x9b,0x9c,0x9d,0x9e,0x9e,0x9d,0x9b,0x9a,
0x9b,0x99,0x99,0x9d,0x9b,0x9b,0x9a,0x9a,0x9b,0x9b,0x9d,0x9d,0x9e,0x9f,0x9e,0x9c,
0x9b,0x9b,0x9a,0x9a,0x9a,0x99,0x9b,0x9c,0x9d,0x9e,0x9e,0x9d,0x9e,0x9e,0xa0,0xa1,
0xa3,0xa3,0xa1,0x9f,0x9e,0x9e,0xa1,0xa1,0xa0,0x9c,0x99,0x96,0x95,0x97,0x9a,0x9d,
0x9d,0x9c,0x9d,0x9d,0x9f,0xa0,0xa1,0xa0,0x9f,0x9f,0x9f,0x9c,0x9b,0x9b,0x9b,0x9b,
0x9a,0x9a,0x9a,0x9c,0x9c,0x9c,0x9d,0x9c,0x9b,0x9a,0x99,0x99,0x9a,0x99,0x9a,0x9b,
0x9b,0x99,0x9a,0x9a,0x9c,0x9e,0x9e,0x9b,0x99,0x99,0x9a,0x9b,0x9b,0x9d,0xa1,0xa3,
0xa2,0x9f,0x9e,0x9f,0x9f,0x9f,0x9f,0x9f,0x9d,0x9a,0x98,0x99,0x9a,0x9d,0x9e,0x9e,
0x9d,0x9d,0x9c,0x9b,0x9a,0x9c,0x9e,0x9f,0x9e,0x9c,0x9b,0x9b,0x9b,0x9d,0xa0,0xa1,
0xa1,0x9f,0x9e,0x9c,0x9b,0x9c,0x9d,0x9d,0x9c,0x9a,0x99,0x9a,0x9b,0x9d,0x9e,0x9e,
0x9b,0x9b,0x9d,0x9e,0x9d,0x9d,0x9b,0x9a,0x9b,0x9d,0x9d,0xa1,0x9f,0x9e,0x9e,0x9d,
0x9b,0x9d,0x9e,0x9d,0x9d,0x9d,0x9d,0x9c,0x9b,0x9c,0x9c,0x9d,0x9e,0x9d,0x9b,0x9a,
0x9a,0x99,0x99,0x9b,0x9d,0x9b,0x94,0x87,0x7b,0x70,0x65,0x5b,0x51,0x48,0x42,0x3b,
0x36,0x3a,0x44,0x54,0x65,0x76,0x83,0x8b,0x8f,0x92,0x96,0x97,0x90,0x81,0x6e,0x5e,
0x54,0x57,0x61,0x70,0x7f,0x82,0x7b,0x6f,0x60,0x59,0x5d,0x67,0x72,0x78,0x7a,0x76,
0x6d,0x64,0x60,0x60,0x60,0x5b,0x4f,0x40,0x32,0x2c,0x32,0x41,0x59,0x73,0x89,0x95,
0x99,0x9a,0x9a,0x9a,0x9b,0x9e,0xa1,0xa1,0x97,0x87,0x74,0x63,0x58,0x55,0x5b,0x65,
0x72,0x7a,0x79,0x72,0x69,0x62,0x5d,0x59,0x52,0x4b,0x43,0x38,0x2f,0x2d,0x32,0x39,
0x40,0x41,0x40,0x3b,0x37,0x32,0x32,0x34,0x35,0x35,0x35,0x36,0x37,0x3a,0x3d,0x3d,
0x3d,0x39,0x36,0x38,0x3a,0x3d,0x3e,0x40,0x3f,0x3c,0x39,0x3a,0x3b,0x3c,0x3a,0x38,
// Line 12
0x38,0x38,0x38,0x37,0x35,0x33,0x34,0x37,0x38,0x36,0x35,0x33,0x32,0x33,0x34,0x35,
0x36,0x35,0x36,0x37,0x38,0x39,0x3a,0x3c,0x3c,0x38,0x37,0x37,0x36,0x36,0x35,0x33,
0x33,0x31,0x31,0x32,0x34,0x35,0x37,0x38,0x36,0x33,0x32,0x32,0x34,0x37,0x37,0x35,
0x32,0x31,0x35,0x3f,0x4e,0x61,0x71,0x7a,0x78,0x6d,0x60,0x59,0x56,0x5c,0x65,0x6e,
0x76,0x78,0x71,0x68,0x5e,0x5a,0x5e,0x65,0x6d,0x71,0x74,0x70,0x69,0x60,0x59,0x57,
0x5b,0x61,0x68,0x6e,0x6e,0x6c,0x67,0x61,0x5c,0x5c,0x5e,0x65,0x6b,0x71,0x71,0x6d,
0x68,0x62,0x5c,0x5c,0x5e,0x65,0x6e,0x73,0x75,0x71,0x6a,0x60,0x5a,0x59,0x5d,0x64,
0x6d,0x72,0x73,0x70,0x68,0x60,0x5b,0x5b,0x60,0x6a,0x74,0x7b,0x7b,0x75,0x6e,0x68,
0x62,0x60,0x61,0x65,0x68,0x6a,0x6a,0x6d,0x73,0x7c,0x87,0x92,0x9f,0xa7,0xa9,0xa3,
0x96,0x84,0x74,0x67,0x5d,0x56,0x53,0x4d,0x46,0x3d,0x34,0x33,0x3c,0x4a,0x5c,0x70,
0x7f,0x89,0x8f,0x92,0x96,0x9a,0x9e,0x9f,0x9d,0x99,0x98,0x98,0x99,0x99,0x97,0x8e,
0x7f,0x6f,0x64,0x5b,0x53,0x4b,0x42,0x39,0x34,0x37,0x44,0x59,0x6e,0x7c,0x7f,0x79,
0x6d,0x61,0x5a,0x54,0x4f,0x48,0x3d,0x33,0x2f,0x37,0x49,0x63,0x79,0x82,0x80,0x75,
0x65,0x56,0x4f,0x4b,0x47,0x43,0x3c,0x34,0x2d,0x2c,0x2e,0x33,0x3e,0x4a,0x5c,0x6a,
0x73,0x75,0x73,0x6b,0x64,0x5f,0x5b,0x55,0x50,0x42,0x36,0x32,0x37,0x47,0x5e,0x74,
0x84,0x8d,0x90,0x92,0x90,0x91,0x89,0x7b,0x6a,0x5a,0x52,0x58,0x65,0x73,0x7d,0x7d,
0x73,0x68,0x60,0x5d,0x5e,0x5b,0x50,0x3e,0x30,0x2c,0x37,0x4e,0x69,0x7d,0x84,0x7d,
0x6e,0x61,0x5a,0x55,0x50,0x46,0x3b,0x35,0x34,0x3d,0x4e,0x66,0x78,0x81,0x7f,0x75,
0x67,0x5a,0x52,0x4c,0x48,0x42,0x3c,0x38,0x33,0x30,0x33,0x3b,0x43,0x4d,0x55,0x60,
0x6b,0x75,0x7f,0x88,0x8f,0x92,0x91,0x8a,0x7f,0x6e,0x5d,0x4d,0x41,0x3b,0x3c,0x3d,
0x3d,0x3a,0x36,0x34,0x34,0x39,0x46,0x57,0x68,0x72,0x77,0x74,0x6c,0x62,0x58,0x51,
0x4d,0x49,0x41,0x38,0x2f,0x2a,0x2c,0x34,0x3d,0x40,0x46,0x3e,0x35,0x2f,0x31,0x3e,
0x53,0x68,0x78,0x81,0x80,0x76,0x67,0x5f,0x5b,0x5d,0x63,0x6a,0x6e,0x76,0x7c,0x83,
0x8e,0x99,0xa2,0xa9,0xa8,0xa0,0x9a,0x96,0x94,0x96,0x99,0x9d,0xa0,0xa2,0xa2,0xa1,
0xa0,0x9f,0x9c,0x9c,0x9b,0x9c,0x9d,0x9c,0x9c,0x9d,0x9d,0x9c,0x9a,0x98,0x9a,0x9c,
0x9e,0x9d,0x9d,0x9f,0x9f,0x9c,0x9b,0x9b,0x9c,0x9d,0x9d,0x9c,0x9e,0x9e,0x9e,0x9d,
0x9d,0x9c,0x9d,0x9d,0x9d,0x9c,0x9c,0x9c,0x9c,0x9e,0xa0,0xa2,0xa3,0xa2,0xa1,0xa2,
0xa2,0xa3,0xa2,0xa0,0x9c,0x9a,0x9b,0x9b,0x9b,0x9c,0x9c,0x9d,0x9d,0x9c,0x9c,0x9e,
0x9e,0x9c,0x9d,0x9c,0x9e,0x9d,0x9d,0x9c,0x9d,0x9d,0x9c,0x99,0x9b,0x9b,0x9a,0x9a,
0x99,0x99,0x9c,0x9d,0x9d,0x9f,0x9f,0x9f,0x9c,0x9a,0x9a,0x9a,0x9c,0x9c,0x9b,0x9d,
0x9c,0x9b,0x9c,0x9d,0x9e,0x9d,0x9e,0x9d,0x9d,0x9d,0x9e,0x9d,0x9c,0x9c,0x9c,0x9d,
0x9c,0x9c,0x9c,0x9c,0x9c,0x9e,0x9f,0x9f,0x9f,0x9d,0x9c,0x9c,0x9d,0x9e,0x9c,0x9e,
0x9c,0x9c,0x9a,0x99,0x99,0x9a,0x9c,0x9c,0x9c,0x9b,0x9b,0x9c,0x9d,0x9d,0x9d,0x9f,
0xa0,0x9e,0x9c,0x9a,0x9b,0x9d,0x9e,0x9f,0x9f,0x9d,0x9c,0x9b,0x9a,0x99,0x9c,0x9d,
0x9e,0x9e,0x9f,0x9e,0x9d,0x9c,0x9b,0x9c,0x9d,0x9d,0x9d,0x9d,0x9d,0x9e,0xa0,0xa1,
0xa2,0xa1,0xa0,0x9e,0x9d,0x9d,0x9e,0x9f,0x9e,0x9b,0x9a,0x9c,0x9d,0x9d,0x9d,0x9c,
0x9b,0x9a,0x9a,0x9b,0x9d,0x9d,0x9d,0x9f,0x9f,0x9d,0x9a,0x99,0x99,0x99,0x9b,0x9c,
0x9b,0x9c,0x9d,0x9b,0x9c,0x9c,0x9c,0x9e,0x9f,0x9e,0x9c,0x9b,0x9b,0x99,0x9b,0x9a,
0x9a,0x9c,0x9c,0x9c,0x9a,0x98,0x98,0x9c,0x9e,0x9f,0x9e,0x9d,0x9d,0x9d,0x9e,0x9d,
0x9e,0x9e,0x9f,0x9f,0x9f,0x9e,0x9d,0x9f,0xa0,0xa0,0x9e,0x9c,0x9d,0x9d,0x9c,0x9a,
0x9a,0x9d,0xa0,0x9d,0x9e,0x9b,0x9b,0x9f,0xa0,0x9f,0xa0,0xa0,0x9e,0x9d,0x9b,0x9a,
0x9c,0x9b,0x9c,0x9e,0x9d,0x9c,0x9b,0x9b,0x9b,0x9a,0x9b,0x9a,0x9c,0x9c,0x9c,0x9c,
0x9d,0x9d,0xa0,0xa1,0xa0,0x9d,0x9d,0x9d,0x9d,0x9b,0x9a,0x99,0x99,0x9b,0x9b,0x9a,
0x9b,0x9c,0x9f,0x9f,0x9d,0x9a,0x9b,0x9a,0x99,0x97,0x99,0x9c,0x9c,0x9d,0x9a,0x99,
0x9c,0x9c,0x9c,0x9e,0x9e,0x9c,0x9c,0x9b,0x9a,0x9a,0x9a,0x9b,0x9d,0x9f,0x9f,0x9f,
0x9e,0x9b,0x9a,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x9b,0x99,0x98,0x9a,0x9c,0x9c,0x9c,
0x9b,0x9c,0x9d,0x9d,0x9c,0x9a,0x9c,0x9c,0x9d,0x9d,0x9d,0x9c,0x9c,0x9a,0x98,0x99,
0x9c,0x9d,0x9d,0x9c,0x9b,0x9c,0x9a,0x99,0x98,0x9a,0x9a,0x97,0x94,0x94,0x96,0x99,
0x99,0x9a,0x9c,0x9d,0x9d,0x9d,0x9f,0xa0,0xa1,0x9f,0x9c,0x9a,0x9b,0x9c,0x9c,0x9c,
0x9a,0x99,0x9a,0x99,0x98,0x98,0x99,0x9a,0x99,0x98,0x99,0x9c,0x9c,0x9a,0x99,0x9b,
0x9d,0x9c,0x9b,0x9b,0x9c,0x9e,0x9e,0x9c,0x9c,0x9d,0x9c,0x9c,0x9a,0x9b,0x9c,0x9c,
0x9a,0x97,0x97,0x98,0x99,0x99,0x99,0x99,0x9a,0x9a,0x9c,0x9d,0xa0,0xa0,0x9f,0x9c,
0x9a,0x9a,0x99,0x98,0x97,0x97,0x98,0x98,0x9a,0x9a,0x9c,0x9f,0xa0,0x9e,0x9c,0x9c,
0x9d,0x9e,0x9d,0x9d,0x9d,0x9f,0x9f,0x9e,0x9f,0x9e,0x9b,0x99,0x99,0x99,0x9c,0x9e,
0x9e,0x9c,0x9d,0x9c,0x9c,0x9d,0x9f,0xa0,0x9f,0x9d,0x9b,0x9c,0x9c,0x9d,0x9d,0x9b,
0x9a,0x9c,0x9c,0x9c,0x9c,0x9c,0x9b,0x9b,0x9c,0x9d,0xa0,0xa0,0x9e,0x9c,0x9c,0x9c,
0x9b,0x9c,0x9d,0x9e,0xa0,0x9e,0x9c,0x9c,0x9c,0x9c,0x9e,0x9f,0xa0,0x9f,0x9f,0x9e,
0x9c,0x9b,0x9c,0x9e,0x9f,0x9f,0x9f,0xa0,0xa0,0x9d,0x9c,0x9c,0x9e,0x9e,0x9c,0x9c,
0x9b,0x9a,0x99,0x9a,0x9d,0x9e,0xa0,0xa2,0xa0,0xa0,0xa1,0xa0,0x9e,0x9c,0x9c,0x9d,
0x9f,0x9e,0x9f,0xa0,0xa0,0x9d,0x9c,0x9d,0xa0,0x9f,0x9c,0x99,0x98,0x98,0x99,0x9a,
0x9c,0x9d,0x9d,0xa0,0x9f,0x9d,0x9c,0xa1,0xa2,0xa1,0xa1,0xa0,0x9f,0x9d,0x9c,0x9b,
0x9d,0x9d,0x9f,0x9d,0x9e,0x9c,0x9d,0x9d,0x9f,0x9f,0xa2,0xa0,0x9e,0x9d,0x9e,0x9e,
0xa0,0x9d,0x9a,0x9b,0x9b,0x9a,0x9d,0x9c,0x9c,0x9d,0x9d,0x9c,0x9c,0x9b,0x9c,0x9e,
0xa0,0xa0,0x9f,0x9e,0x9c,0x9c,0x9d,0x9f,0x9f,0x9f,0x9f,0x9d,0x9c,0x99,0x9a,0x9c,
0x9f,0x9f,0xa0,0xa0,0xa0,0x9f,0x9e,0x9d,0x9c,0x9f,0xa1,0xa0,0x9d,0x9b,0x9b,0x9c,
0x9c,0x9c,0x9c,0x9c,0x9b,0x9a,0x9a,0x9c,0x9c,0x9d,0x9b,0x98,0x99,0x9b,0x9d,0x9e,
0x9d,0x9c,0x9c,0x9c,0x9c,0x9d,0xa0,0x9f,0x9d,0x9b,0x9a,0x9a,0x9b,0x9c,0x9d,0xa0,
0xa0,0x9f,0x9f,0x9e,0x9d,0x9e,0x9e,0x9e,0x9d,0x9d,0x9c,0x9b,0x9b,0x9b,0x9d,0xa0,
0xa0,0x9e,0x9d,0x9d,0x9c,0x9b,0x9b,0x9d,0xa0,0x9e,0x9c,0x9c,0x9c,0x9d,0x9f,0xa0,
0xa0,0x9e,0x9d,0x9c,0x9b,0x9d,0x9d,0x9c,0x9b,0x9a,0x99,0x9a,0x9a,0x9b,0x9c,0x9d,
0x9d,0x9c,0x9d,0x9d,0x9e,0x9e,0x9c,0x9b,0x9c,0x9d,0x9d,0x9b,0x9b,0x99,0x9b,0x9d,
0x9d,0x9c,0x9d,0x9c,0x9b,0x9b,0x9c,0x9d,0xa2,0xa2,0x9f,0x9f,0x9c,0x9a,0x9a,0x98,
0x98,0x99,0x9a,0x9a,0x9a,0x99,0x98,0x99,0x9a,0x9c,0x9d,0x9f,0x9e,0x9c,0x9c,0x9d,
0x9d,0x9d,0x9d,0x9d,0x9f,0x9e,0x9c,0x99,0x99,0x9a,0x9c,0x9c,0x9c,0x9c,0x9e,0x9d,
0x9d,0x9d,0x9f,0xa0,0xa0,0x9e,0x9d,0x9e,0x9f,0x9e,0x9d,0x9d,0x9d,0x9b,0x9a,0x9b,
0x9d,0x9f,0xa0,0x9f,0xa1,0xa1,0xa0,0x9d,0x9b,0x9b,0x9c,0x9c,0x9c,0x9a,0x99,0x98,
0x9a,0x9c,0x9d,0x9f,0xa0,0x9c,0x9a,0x9a,0x9c,0x9d,0x9e,0x9f,0x9e,0xa0,0xa0,0xa1,
0xa0,0xa0,0x9f,0x9e,0x9d,0x9b,0x9b,0x9f,0x9f,0x9d,0x9c,0x9d,0x9d,0x9e,0x9d,0x9d,
0x9f,0x9e,0x9d,0x9c,0x9b,0x9c,0x9d,0x9f,0x9f,0x9e,0xa0,0x9f,0x9d,0x9e,0x9f,0xa0,
0xa0,0x9e,0x9e,0x9d,0x9e,0x9f,0x9f,0x9e,0x97,0x98,0x99,0x9d,0xa0,0xa0,0x9d,0x9b,
0x99,0x98,0x99,0x99,0x9c,0x9b,0x9e,0x9d,0x9c,0x9a,0x9b,0x9a,0x9a,0x9b,0x9b,0x9d,
0x9d,0x9d,0x9c,0x9e,0x9e,0x9d,0x9d,0x9d,0x9d,0x9d,0x9c,0x9d,0x9d,0x9c,0x9c,0x9c,
0x9d,0x9d,0x9c,0x9e,0xa0,0x9e,0x9d,0x9c,0x9d,0x9d,0x9c,0x99,0x9a,0x9a,0x9b,0x99,
0x99,0x99,0x9a,0x9b,0x9a,0x9a,0x9a,0x9a,0x99,0x9b,0x9d,0x9e,0xa0,0x9f,0xa0,0xa1,
0xa0,0x9e,0x9c,0x99,0x99,0x9a,0x9b,0x9b,0x9a,0x9b,0x9a,0x98,0x99,0x9a,0x9e,0xa1,
0xa2,0x9f,0x9e,0x9e,0x9e,0x9e,0xa0,0x9e,0x9e,0x9c,0x9b,0x99,0x9a,0x9a,0x9a,0x9c,
0x9c,0x9c,0x9f,0x9f,0xa0,0xa1,0xa2,0xa1,0x9e,0x9e,0x9f,0x9e,0x9e,0x9d,0x9c,0x9b,
0x99,0x97,0x98,0x9a,0x9b,0x9c,0x9b,0x9a,0x9b,0x9d,0x9f,0x9d,0x9b,0x9b,0x9c,0x9c,
0x9c,0x99,0x92,0x86,0x75,0x65,0x59,0x56,0x5b,0x64,0x6f,0x78,0x7b,0x76,0x6c,0x64,
0x5e,0x60,0x64,0x68,0x6c,0x71,0x78,0x7e,0x89,0x95,0x9e,0xa2,0x97,0x81,0x6c,0x58,
0x52,0x54,0x60,0x6e,0x7a,0x7d,0x78,0x6f,0x69,0x64,0x5f,0x57,0x4b,0x3d,0x32,0x2e,
0x38,0x4c,0x63,0x76,0x7f,0x7a,0x6e,0x61,0x58,0x52,0x4d,0x48,0x43,0x3d,0x38,0x33,
0x33,0x36,0x3b,0x41,0x4d,0x5a,0x69,0x75,0x79,0x75,0x6e,0x63,0x5a,0x58,0x60,0x6c,
0x75,0x78,0x73,0x6e,0x66,0x60,0x5d,0x5e,0x5d,0x56,0x4a,0x3d,0x32,0x2d,0x32,0x38,
0x3a,0x41,0x43,0x40,0x3a,0x34,0x30,0x32,0x32,0x32,0x35,0x38,0x3b,0x3b,0x3d,0x3b,
0x3a,0x37,0x38,0x38,0x3b,0x3b,0x3a,0x39,0x37,0x36,0x37,0x38,0x38,0x39,0x3b,0x3b,
// Line 13
0x38,0x35,0x35,0x34,0x34,0x35,0x35,0x36,0x35,0x34,0x35,0x38,0x38,0x36,0x37,0x37,
0x37,0x36,0x36,0x37,0x38,0x38,0x36,0x35,0x35,0x36,0x37,0x36,0x35,0x34,0x37,0x37,
0x37,0x37,0x37,0x36,0x37,0x39,0x39,0x39,0x38,0x38,0x38,0x36,0x34,0x33,0x36,0x37,
0x36,0x36,0x34,0x33,0x33,0x32,0x33,0x35,0x37,0x37,0x38,0x39,0x37,0x36,0x37,0x39,
0x3a,0x38,0x35,0x34,0x35,0x37,0x38,0x39,0x38,0x37,0x37,0x36,0x36,0x37,0x38,0x37,
0x36,0x35,0x34,0x33,0x33,0x34,0x35,0x37,0x37,0x36,0x36,0x36,0x37,0x38,0x3a,0x3b,
0x39,0x39,0x38,0x36,0x35,0x35,0x36,0x37,0x35,0x34,0x36,0x36,0x35,0x35,0x36,0x37,
0x38,0x38,0x39,0x39,0x3b,0x39,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x36,0x38,0x38,0x38,
0x38,0x37,0x36,0x36,0x37,0x36,0x37,0x37,0x35,0x35,0x36,0x37,0x35,0x34,0x34,0x35,
0x36,0x34,0x32,0x31,0x31,0x31,0x34,0x34,0x34,0x33,0x33,0x32,0x34,0x35,0x39,0x3a,
0x3c,0x3b,0x3a,0x3a,0x3a,0x39,0x39,0x39,0x38,0x36,0x35,0x33,0x33,0x34,0x36,0x38,
0x39,0x38,0x38,0x37,0x36,0x34,0x36,0x37,0x37,0x37,0x35,0x34,0x36,0x36,0x37,0x38,
0x39,0x39,0x3a,0x39,0x39,0x39,0x39,0x37,0x35,0x36,0x36,0x36,0x36,0x37,0x38,0x38,
0x37,0x36,0x36,0x36,0x34,0x34,0x34,0x35,0x35,0x35,0x36,0x37,0x3a,0x3c,0x3b,0x3e,
0x38,0x37,0x38,0x38,0x38,0x36,0x35,0x34,0x35,0x35,0x35,0x34,0x38,0x35,0x34,0x35,
0x36,0x35,0x39,0x38,0x36,0x34,0x33,0x34,0x36,0x37,0x37,0x38,0x39,0x3a,0x37,0x38,
0x37,0x37,0x38,0x37,0x35,0x34,0x33,0x34,0x35,0x34,0x35,0x35,0x36,0x34,0x34,0x35,
0x38,0x3a,0x3a,0x38,0x36,0x36,0x35,0x34,0x35,0x35,0x37,0x39,0x39,0x37,0x34,0x37,
0x37,0x37,0x37,0x38,0x36,0x37,0x36,0x34,0x35,0x38,0x39,0x39,0x39,0x39,0x3b,0x3a,
0x39,0x38,0x36,0x36,0x37,0x39,0x3a,0x39,0x39,0x38,0x37,0x37,0x36,0x36,0x38,0x38,
0x39,0x3a,0x3b,0x3c,0x3c,0x3b,0x3a,0x38,0x38,0x38,0x38,0x3a,0x39,0x37,0x38,0x38,
0x38,0x39,0x39,0x38,0x39,0x39,0x3a,0x39,0x37,0x35,0x35,0x36,0x38,0x39,0x39,0x38,
0x36,0x36,0x37,0x36,0x37,0x37,0x38,0x38,0x37,0x34,0x34,0x35,0x38,0x3a,0x3b,0x3c,
0x3b,0x3c,0x3c,0x39,0x3a,0x3a,0x3a,0x3b,0x37,0x34,0x35,0x36,0x37,0x37,0x39,0x39,
0x3a,0x3b,0x3a,0x38,0x3a,0x39,0x38,0x39,0x39,0x38,0x38,0x37,0x35,0x35,0x35,0x34,
0x34,0x35,0x37,0x37,0x37,0x37,0x39,0x3a,0x3a,0x39,0x3b,0x3c,0x3d,0x3b,0x38,0x36,
0x36,0x38,0x3a,0x39,0x3a,0x38,0x37,0x34,0x32,0x31,0x35,0x36,0x37,0x3a,0x3b,0x3a,
0x39,0x38,0x39,0x3c,0x3d,0x3b,0x37,0x35,0x35,0x35,0x35,0x36,0x37,0x39,0x3a,0x39,
0x39,0x3a,0x3a,0x39,0x36,0x34,0x36,0x39,0x3a,0x39,0x38,0x37,0x37,0x36,0x36,0x37,
0x38,0x37,0x36,0x36,0x36,0x37,0x39,0x39,0x37,0x37,0x37,0x36,0x33,0x35,0x36,0x37,
0x38,0x38,0x38,0x38,0x37,0x35,0x36,0x36,0x37,0x38,0x37,0x35,0x36,0x36,0x38,0x39,
0x39,0x39,0x3a,0x39,0x38,0x36,0x38,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x38,
0x39,0x37,0x33,0x34,0x33,0x33,0x34,0x36,0x37,0x37,0x37,0x37,0x39,0x3a,0x3c,0x3d,
0x3c,0x3a,0x39,0x38,0x37,0x36,0x37,0x37,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,
0x38,0x39,0x39,0x38,0x35,0x35,0x37,0x37,0x35,0x34,0x33,0x34,0x35,0x34,0x31,0x34,
0x35,0x35,0x37,0x38,0x39,0x3a,0x39,0x38,0x38,0x39,0x39,0x3a,0x39,0x37,0x36,0x37,
0x39,0x39,0x3a,0x3a,0x39,0x37,0x36,0x38,0x38,0x37,0x36,0x38,0x39,0x37,0x36,0x36,
0x37,0x38,0x38,0x38,0x36,0x36,0x36,0x35,0x36,0x36,0x37,0x39,0x3a,0x39,0x38,0x38,
0x39,0x38,0x3b,0x39,0x39,0x38,0x38,0x34,0x34,0x33,0x35,0x37,0x38,0x36,0x36,0x35,
0x35,0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x35,0x34,0x36,0x38,0x39,0x35,0x35,0x35,
0x37,0x38,0x35,0x32,0x34,0x36,0x38,0x37,0x35,0x36,0x38,0x39,0x3a,0x39,0x3a,0x3a,
0x3a,0x39,0x39,0x38,0x39,0x39,0x37,0x35,0x34,0x34,0x36,0x37,0x37,0x35,0x36,0x37,
0x37,0x37,0x37,0x37,0x38,0x37,0x37,0x38,0x36,0x34,0x34,0x35,0x37,0x36,0x36,0x38,
0x3a,0x39,0x39,0x38,0x38,0x38,0x37,0x37,0x36,0x35,0x37,0x37,0x36,0x37,0x37,0x37,
0x37,0x35,0x36,0x37,0x38,0x37,0x36,0x34,0x34,0x35,0x36,0x36,0x37,0x38,0x38,0x35,
0x36,0x37,0x39,0x38,0x35,0x33,0x35,0x38,0x39,0x38,0x39,0x39,0x39,0x38,0x37,0x37,
0x38,0x37,0x35,0x35,0x36,0x35,0x37,0x38,0x39,0x39,0x38,0x38,0x36,0x36,0x36,0x37,
0x38,0x37,0x37,0x39,0x39,0x37,0x38,0x38,0x39,0x37,0x35,0x32,0x32,0x33,0x34,0x34,
0x35,0x36,0x39,0x39,0x38,0x37,0x39,0x38,0x35,0x34,0x33,0x34,0x35,0x34,0x33,0x33,
0x35,0x35,0x34,0x36,0x38,0x39,0x38,0x35,0x34,0x36,0x36,0x37,0x38,0x39,0x3a,0x39,
0x37,0x34,0x36,0x39,0x3a,0x36,0x34,0x33,0x32,0x31,0x31,0x31,0x33,0x33,0x31,0x31,
0x32,0x34,0x38,0x39,0x39,0x39,0x39,0x39,0x38,0x36,0x36,0x36,0x39,0x37,0x35,0x34,
0x34,0x34,0x35,0x35,0x35,0x33,0x31,0x2f,0x30,0x32,0x33,0x32,0x35,0x34,0x34,0x34,
0x34,0x35,0x39,0x3b,0x39,0x38,0x38,0x39,0x39,0x37,0x34,0x34,0x35,0x34,0x31,0x31,
0x31,0x31,0x34,0x35,0x35,0x35,0x36,0x37,0x37,0x36,0x37,0x37,0x36,0x34,0x34,0x35,
0x36,0x33,0x36,0x35,0x35,0x34,0x32,0x32,0x34,0x35,0x34,0x34,0x35,0x35,0x35,0x34,
0x32,0x32,0x35,0x37,0x35,0x35,0x34,0x35,0x37,0x37,0x37,0x37,0x37,0x36,0x36,0x37,
0x38,0x39,0x39,0x39,0x39,0x38,0x39,0x38,0x36,0x35,0x34,0x35,0x34,0x33,0x35,0x36,
0x35,0x34,0x36,0x38,0x39,0x39,0x38,0x38,0x39,0x37,0x35,0x36,0x38,0x38,0x3a,0x37,
0x34,0x34,0x35,0x34,0x34,0x34,0x34,0x36,0x36,0x34,0x34,0x36,0x38,0x36,0x36,0x36,
0x36,0x36,0x36,0x34,0x34,0x34,0x36,0x36,0x36,0x38,0x38,0x38,0x36,0x34,0x36,0x37,
0x36,0x33,0x32,0x31,0x34,0x34,0x33,0x33,0x34,0x33,0x34,0x35,0x38,0x39,0x3b,0x39,
0x37,0x35,0x34,0x33,0x33,0x32,0x32,0x32,0x30,0x2f,0x31,0x33,0x35,0x35,0x34,0x35,
0x36,0x35,0x35,0x35,0x37,0x37,0x36,0x37,0x36,0x36,0x39,0x39,0x38,0x36,0x36,0x35,
0x36,0x36,0x39,0x39,0x38,0x34,0x34,0x34,0x34,0x33,0x33,0x35,0x34,0x33,0x32,0x32,
0x34,0x36,0x35,0x36,0x35,0x34,0x33,0x34,0x34,0x35,0x37,0x38,0x36,0x37,0x35,0x35,
0x37,0x37,0x36,0x35,0x34,0x32,0x33,0x33,0x34,0x35,0x35,0x34,0x35,0x37,0x39,0x38,
0x39,0x39,0x38,0x37,0x35,0x33,0x33,0x33,0x33,0x34,0x34,0x34,0x34,0x35,0x35,0x34,
0x36,0x37,0x38,0x37,0x35,0x33,0x33,0x32,0x32,0x34,0x35,0x35,0x36,0x34,0x34,0x34,
0x35,0x34,0x34,0x34,0x36,0x36,0x34,0x34,0x34,0x36,0x36,0x36,0x36,0x35,0x35,0x37,
0x37,0x35,0x34,0x34,0x32,0x31,0x34,0x36,0x38,0x38,0x36,0x34,0x34,0x34,0x34,0x36,
0x35,0x34,0x34,0x32,0x32,0x32,0x36,0x36,0x36,0x34,0x34,0x33,0x33,0x33,0x34,0x35,
0x35,0x34,0x34,0x33,0x32,0x34,0x35,0x35,0x35,0x34,0x34,0x35,0x36,0x38,0x39,0x38,
0x35,0x34,0x37,0x37,0x37,0x35,0x34,0x33,0x33,0x31,0x31,0x32,0x35,0x34,0x34,0x33,
0x35,0x37,0x39,0x37,0x34,0x35,0x36,0x35,0x35,0x34,0x34,0x35,0x35,0x35,0x37,0x38,
0x38,0x38,0x37,0x37,0x37,0x38,0x38,0x38,0x38,0x36,0x35,0x37,0x36,0x34,0x35,0x33,
0x32,0x32,0x33,0x32,0x31,0x30,0x32,0x33,0x34,0x32,0x32,0x36,0x39,0x37,0x38,0x37,
0x36,0x38,0x37,0x34,0x34,0x36,0x35,0x34,0x34,0x34,0x34,0x33,0x34,0x34,0x36,0x36,
0x35,0x35,0x34,0x33,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x35,0x36,0x37,0x35,0x33,
0x33,0x34,0x34,0x35,0x35,0x35,0x36,0x37,0x38,0x38,0x37,0x38,0x38,0x38,0x37,0x37,
0x35,0x35,0x33,0x32,0x34,0x34,0x35,0x36,0x33,0x33,0x34,0x33,0x31,0x31,0x32,0x33,
0x34,0x34,0x34,0x32,0x34,0x35,0x36,0x39,0x39,0x38,0x36,0x34,0x33,0x34,0x33,0x33,
0x34,0x33,0x33,0x33,0x33,0x33,0x34,0x37,0x36,0x36,0x37,0x37,0x38,0x38,0x36,0x33,
0x35,0x36,0x37,0x36,0x35,0x33,0x34,0x33,0x35,0x34,0x34,0x34,0x33,0x33,0x34,0x33,
0x34,0x35,0x35,0x37,0x36,0x33,0x32,0x33,0x34,0x33,0x33,0x34,0x34,0x34,0x31,0x31,
0x32,0x34,0x34,0x36,0x34,0x33,0x33,0x33,0x35,0x36,0x35,0x35,0x35,0x34,0x34,0x35,
0x36,0x34,0x33,0x34,0x33,0x32,0x33,0x34,0x35,0x36,0x36,0x35,0x34,0x34,0x34,0x35,
0x37,0x37,0x37,0x35,0x33,0x31,0x32,0x34,0x35,0x34,0x33,0x33,0x35,0x35,0x35,0x34,
0x35,0x35,0x35,0x34,0x34,0x32,0x34,0x33,0x31,0x32,0x34,0x36,0x37,0x34,0x34,0x35,
0x36,0x35,0x36,0x35,0x35,0x35,0x34,0x35,0x35,0x35,0x36,0x35,0x34,0x33,0x33,0x34,
0x33,0x32,0x34,0x36,0x35,0x35,0x37,0x38,0x38,0x37,0x37,0x34,0x39,0x38,0x37,0x38,
0x37,0x35,0x34,0x33,0x32,0x34,0x35,0x35,0x34,0x32,0x31,0x32,0x32,0x34,0x35,0x36,
0x35,0x34,0x33,0x33,0x33,0x34,0x35,0x35,0x37,0x38,0x37,0x36,0x35,0x35,0x38,0x37,
0x36,0x35,0x34,0x33,0x31,0x31,0x35,0x37,0x37,0x34,0x32,0x34,0x35,0x37,0x37,0x37,
0x36,0x35,0x34,0x32,0x31,0x32,0x32,0x32,0x31,0x30,0x30,0x32,0x33,0x34,0x35,0x35,
0x35,0x36,0x35,0x35,0x37,0x35,0x35,0x34,0x35,0x34,0x33,0x34,0x33,0x31,0x33,0x31,
// Line 14
0x3a,0x38,0x38,0x39,0x3b,0x3c,0x3b,0x3a,0x3a,0x3a,0x38,0x35,0x35,0x36,0x38,0x38,
0x36,0x36,0x38,0x39,0x39,0x3a,0x39,0x38,0x38,0x36,0x35,0x36,0x38,0x39,0x38,0x35,
0x33,0x36,0x39,0x39,0x38,0x35,0x34,0x32,0x32,0x32,0x33,0x37,0x36,0x36,0x38,0x3a,
0x3d,0x40,0x48,0x4f,0x57,0x60,0x68,0x70,0x7b,0x81,0x87,0x8b,0x8f,0x93,0x95,0x94,
0x93,0x94,0x96,0x98,0x98,0x97,0x97,0x98,0x98,0x98,0x95,0x93,0x8f,0x88,0x81,0x77,
0x6f,0x68,0x60,0x56,0x4d,0x45,0x40,0x3c,0x3a,0x39,0x3a,0x39,0x39,0x36,0x39,0x3a,
0x39,0x3a,0x39,0x39,0x3a,0x38,0x35,0x36,0x3a,0x3f,0x45,0x49,0x50,0x58,0x63,0x6b,
0x74,0x7c,0x84,0x8a,0x90,0x93,0x95,0x97,0x96,0x94,0x96,0x97,0x97,0x96,0x96,0x96,
0x96,0x95,0x95,0x94,0x93,0x8e,0x86,0x7f,0x76,0x6d,0x65,0x5d,0x54,0x4b,0x46,0x42,
0x3e,0x3b,0x3a,0x38,0x39,0x38,0x38,0x3c,0x3b,0x3b,0x3c,0x3b,0x39,0x38,0x37,0x37,
0x38,0x3b,0x3f,0x41,0x48,0x4e,0x57,0x65,0x70,0x79,0x85,0x8b,0x8e,0x91,0x93,0x96,
0x98,0x97,0x96,0x97,0x97,0x97,0x96,0x93,0x92,0x95,0x97,0x97,0x95,0x92,0x8e,0x85,
0x7d,0x73,0x6b,0x65,0x5d,0x54,0x4b,0x45,0x41,0x3e,0x3c,0x3c,0x3d,0x3d,0x3a,0x38,
0x3a,0x3b,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,0x3c,0x3f,0x44,0x48,0x4b,0x52,0x5d,
0x68,0x70,0x78,0x81,0x8a,0x8f,0x94,0x96,0x98,0x99,0x97,0x95,0x95,0x95,0x95,0x95,
0x94,0x92,0x93,0x95,0x97,0x97,0x95,0x8f,0x86,0x7d,0x74,0x6b,0x65,0x5d,0x54,0x4d,
0x44,0x3c,0x36,0x36,0x38,0x39,0x39,0x36,0x34,0x34,0x35,0x37,0x3b,0x3c,0x3d,0x3c,
0x3a,0x38,0x39,0x3e,0x43,0x49,0x4f,0x55,0x5e,0x68,0x72,0x7b,0x83,0x8a,0x90,0x95,
0x97,0x97,0x98,0x98,0x96,0x94,0x93,0x94,0x96,0x96,0x96,0x96,0x97,0x96,0x93,0x93,
0x8f,0x8a,0x82,0x78,0x6b,0x62,0x57,0x4f,0x4a,0x46,0x44,0x41,0x3e,0x3a,0x3a,0x3b,
0x3c,0x3c,0x3c,0x3c,0x3c,0x3b,0x3a,0x39,0x3a,0x3c,0x3c,0x3f,0x41,0x44,0x4a,0x51,
0x59,0x61,0x6b,0x76,0x7f,0x86,0x8b,0x90,0x96,0x97,0x97,0x97,0x98,0x97,0x98,0x98,
0x98,0x97,0x95,0x94,0x96,0x99,0x9a,0x95,0x92,0x8b,0x84,0x7d,0x76,0x6c,0x66,0x5d,
0x52,0x4a,0x44,0x40,0x3e,0x3d,0x3c,0x3a,0x39,0x37,0x36,0x37,0x39,0x38,0x39,0x38,
0x3a,0x3a,0x3b,0x3a,0x3d,0x40,0x45,0x4b,0x50,0x57,0x61,0x6b,0x76,0x7f,0x85,0x8a,
0x8e,0x92,0x95,0x95,0x95,0x96,0x98,0x98,0x97,0x98,0x99,0x9b,0x9a,0x99,0x9a,0x99,
0x96,0x90,0x8b,0x86,0x80,0x76,0x6d,0x65,0x5c,0x53,0x4e,0x48,0x44,0x40,0x3e,0x3b,
0x3a,0x3c,0x3d,0x3e,0x3c,0x3b,0x39,0x3a,0x3a,0x39,0x3a,0x3d,0x3d,0x3d,0x3c,0x3c,
0x3c,0x3d,0x3d,0x3b,0x3b,0x3c,0x3d,0x40,0x3e,0x3b,0x3c,0x3d,0x3e,0x3e,0x3e,0x3d,
0x3c,0x39,0x39,0x39,0x39,0x39,0x3b,0x3c,0x3d,0x3c,0x3a,0x39,0x3a,0x3c,0x3b,0x3a,
0x3a,0x3a,0x39,0x38,0x36,0x36,0x3a,0x3c,0x3c,0x3a,0x3b,0x3b,0x39,0x38,0x3a,0x3c,
0x3f,0x3e,0x3c,0x3b,0x39,0x39,0x3a,0x3b,0x3a,0x39,0x38,0x36,0x34,0x36,0x3a,0x3a,
0x3d,0x3a,0x39,0x3a,0x38,0x36,0x37,0x38,0x38,0x39,0x3a,0x3b,0x3c,0x3b,0x3b,0x3c,
0x3e,0x3e,0x3c,0x3d,0x3e,0x40,0x46,0x4e,0x59,0x66,0x6f,0x76,0x7f,0x85,0x8c,0x93,
0x98,0x99,0x9a,0x9a,0x9a,0x97,0x97,0x99,0x9b,0x9d,0x9c,0x99,0x97,0x96,0x97,0x98,
0x97,0x96,0x97,0x97,0x96,0x95,0x95,0x96,0x96,0x96,0x95,0x95,0x96,0x95,0x94,0x95,
0x94,0x94,0x96,0x97,0x97,0x97,0x96,0x95,0x96,0x97,0x99,0x99,0x98,0x97,0x98,0x9a,
0x9a,0x97,0x95,0x95,0x96,0x97,0x98,0x99,0x9b,0x9b,0x99,0x98,0x97,0x97,0x98,0x99,
0x97,0x96,0x96,0x98,0x9a,0x9b,0x9b,0x9a,0x9b,0x9a,0x99,0x98,0x96,0x96,0x98,0x99,
0x99,0x99,0x98,0x97,0x97,0x98,0x9a,0x99,0x99,0x9a,0x9a,0x99,0x96,0x95,0x97,0x99,
0x98,0x97,0x96,0x95,0x92,0x8c,0x86,0x80,0x7b,0x73,0x67,0x5c,0x52,0x4a,0x46,0x42,
0x3e,0x3d,0x3c,0x3a,0x39,0x38,0x38,0x36,0x37,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x39,
0x3b,0x3c,0x3e,0x3d,0x3e,0x3a,0x39,0x39,0x3a,0x3e,0x40,0x42,0x3f,0x3d,0x3d,0x3c,
0x39,0x38,0x38,0x38,0x39,0x38,0x36,0x38,0x39,0x38,0x39,0x39,0x3a,0x3b,0x3b,0x39,
0x38,0x39,0x3c,0x3c,0x3d,0x3c,0x3b,0x3a,0x3a,0x38,0x39,0x3a,0x39,0x37,0x36,0x36,
0x37,0x38,0x38,0x3a,0x3c,0x3a,0x38,0x38,0x37,0x36,0x39,0x39,0x38,0x38,0x38,0x36,
0x36,0x35,0x36,0x36,0x38,0x38,0x38,0x38,0x38,0x36,0x36,0x36,0x38,0x39,0x39,0x39,
0x3a,0x3b,0x3c,0x3c,0x3e,0x3e,0x3e,0x3a,0x36,0x32,0x34,0x35,0x35,0x34,0x35,0x36,
0x3a,0x39,0x3a,0x3a,0x3a,0x39,0x38,0x38,0x38,0x36,0x3a,0x39,0x37,0x38,0x39,0x3c,
0x3d,0x3d,0x3c,0x3a,0x39,0x35,0x36,0x37,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,
0x3a,0x3c,0x3c,0x3c,0x3a,0x39,0x3a,0x39,0x39,0x36,0x37,0x39,0x3a,0x3a,0x3a,0x3a,
0x3d,0x3c,0x3b,0x3c,0x3d,0x3c,0x3b,0x39,0x38,0x37,0x36,0x36,0x38,0x39,0x38,0x39,
0x39,0x39,0x3a,0x3c,0x3c,0x3a,0x3b,0x3a,0x39,0x37,0x35,0x35,0x36,0x37,0x37,0x36,
0x35,0x33,0x34,0x36,0x37,0x38,0x3b,0x3a,0x38,0x39,0x3a,0x39,0x38,0x38,0x39,0x3a,
0x3b,0x39,0x39,0x3a,0x3a,0x39,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,0x3a,0x3a,0x3b,0x3b,
0x3a,0x38,0x38,0x39,0x39,0x38,0x37,0x37,0x38,0x36,0x36,0x37,0x3a,0x3b,0x3a,0x3a,
0x3a,0x3a,0x39,0x38,0x36,0x38,0x39,0x39,0x39,0x3b,0x3b,0x3a,0x3a,0x3a,0x3b,0x3c,
0x3a,0x39,0x3b,0x3b,0x3a,0x38,0x36,0x38,0x3b,0x3b,0x3a,0x39,0x38,0x37,0x38,0x37,
0x38,0x39,0x3a,0x3b,0x3a,0x39,0x39,0x39,0x39,0x36,0x34,0x36,0x38,0x37,0x37,0x36,
0x36,0x34,0x34,0x35,0x37,0x38,0x38,0x35,0x35,0x35,0x36,0x38,0x36,0x36,0x38,0x3a,
0x3a,0x37,0x36,0x35,0x36,0x37,0x38,0x38,0x3a,0x39,0x39,0x38,0x36,0x36,0x39,0x3a,
0x3a,0x3b,0x39,0x37,0x36,0x36,0x36,0x38,0x39,0x38,0x39,0x38,0x38,0x36,0x36,0x38,
0x39,0x3b,0x38,0x35,0x35,0x36,0x38,0x39,0x39,0x38,0x3a,0x3b,0x3a,0x3a,0x3b,0x3b,
0x3a,0x3a,0x3a,0x39,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x36,0x36,0x36,0x38,
0x37,0x36,0x35,0x36,0x37,0x39,0x3a,0x3c,0x3a,0x38,0x39,0x38,0x38,0x38,0x38,0x36,
0x36,0x36,0x39,0x3d,0x42,0x46,0x4b,0x51,0x58,0x61,0x6b,0x73,0x7c,0x85,0x8c,0x8f,
0x92,0x94,0x95,0x97,0x97,0x95,0x95,0x96,0x97,0x97,0x98,0x98,0x99,0x99,0x98,0x98,
0x99,0x98,0x97,0x96,0x95,0x93,0x94,0x94,0x95,0x94,0x96,0x96,0x95,0x94,0x96,0x98,
0x99,0x98,0x98,0x99,0x99,0x99,0x97,0x95,0x94,0x95,0x97,0x98,0x97,0x96,0x96,0x96,
0x97,0x98,0x9a,0x9b,0x9a,0x99,0x99,0x97,0x96,0x96,0x96,0x97,0x97,0x97,0x96,0x93,
0x95,0x94,0x95,0x98,0x98,0x98,0x9a,0x98,0x95,0x93,0x95,0x98,0x9a,0x98,0x96,0x97,
0x97,0x97,0x97,0x98,0x9b,0x9b,0x99,0x96,0x97,0x97,0x97,0x97,0x98,0x98,0x97,0x96,
0x94,0x93,0x96,0x97,0x97,0x95,0x94,0x94,0x94,0x95,0x94,0x95,0x95,0x94,0x93,0x95,
0x96,0x95,0x94,0x94,0x94,0x96,0x99,0x9b,0x9a,0x9c,0x9c,0x9b,0x9b,0x9b,0x9b,0x99,
0x97,0x96,0x97,0x98,0x99,0x99,0x97,0x96,0x97,0x97,0x97,0x97,0x99,0x98,0x97,0x97,
0x96,0x97,0x9a,0x9a,0x98,0x96,0x97,0x97,0x97,0x96,0x97,0x9a,0x9c,0x9d,0x9b,0x9b,
0x9b,0x99,0x9a,0x99,0x98,0x98,0x97,0x97,0x96,0x95,0x96,0x96,0x97,0x96,0x96,0x96,
0x96,0x93,0x96,0x97,0x98,0x99,0x99,0x98,0x99,0x97,0x97,0x97,0x98,0x98,0x97,0x95,
0x93,0x94,0x97,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x98,0x95,0x95,0x95,
0x97,0x99,0x99,0x99,0x99,0x98,0x9a,0x9b,0x9c,0x9b,0x9b,0x9c,0x9a,0x99,0x9b,0x9a,
0x96,0x94,0x94,0x94,0x94,0x92,0x91,0x92,0x94,0x96,0x97,0x98,0x9a,0x9b,0x9c,0x9b,
0x98,0x98,0x97,0x96,0x97,0x98,0x9a,0x9a,0x98,0x97,0x97,0x98,0x99,0x98,0x9a,0x9a,
0x99,0x96,0x95,0x97,0x98,0x99,0x9b,0x9b,0x9b,0x9b,0x9c,0x9b,0x98,0x95,0x94,0x92,
0x8a,0x81,0x7a,0x71,0x6a,0x60,0x57,0x51,0x4e,0x47,0x44,0x3f,0x3c,0x39,0x3a,0x3a,
0x3c,0x3e,0x3f,0x3d,0x3c,0x3b,0x3b,0x3d,0x3d,0x3c,0x3e,0x3c,0x3a,0x39,0x3a,0x3d,
0x3e,0x3c,0x3a,0x39,0x39,0x39,0x3a,0x3a,0x3c,0x3d,0x40,0x41,0x40,0x40,0x40,0x3d,
0x3b,0x39,0x3a,0x39,0x3a,0x38,0x38,0x39,0x3a,0x39,0x3c,0x3b,0x3c,0x3c,0x3c,0x3a,
0x3a,0x39,0x3a,0x3b,0x3a,0x3b,0x3d,0x3d,0x3c,0x3a,0x3b,0x3c,0x3c,0x3b,0x3b,0x3c,
0x3e,0x3c,0x38,0x36,0x36,0x36,0x37,0x38,0x39,0x3c,0x3a,0x39,0x38,0x38,0x3a,0x39,
0x39,0x38,0x38,0x39,0x38,0x38,0x3b,0x3d,0x3b,0x3b,0x3a,0x3c,0x3c,0x3a,0x39,0x39,
0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3c,0x3b,0x39,0x38,0x39,0x38,0x39,0x36,0x36,0x38,
0x38,0x37,0x39,0x3b,0x3d,0x3e,0x3d,0x3c,0x3c,0x3c,0x3c,0x39,0x39,0x38,0x38,0x38,
0x38,0x36,0x36,0x35,0x33,0x34,0x36,0x38,0x39,0x36,0x35,0x35,0x36,0x38,0x38,0x39,
0x3a,0x38,0x36,0x34,0x33,0x36,0x38,0x36,0x36,0x36,0x38,0x38,0x36,0x34,0x36,0x39,
0x3a,0x3a,0x3c,0x3d,0x3d,0x3c,0x3b,0x3a,0x3b,0x3a,0x3a,0x39,0x38,0x38,0x37,0x39,
0x39,0x38,0x3c,0x3e,0x3d,0x3c,0x3b,0x39,0x3a,0x36,0x36,0x37,0x37,0x36,0x36,0x36,
// Line 15
0x35,0x34,0x35,0x37,0x39,0x39,0x3a,0x39,0x35,0x33,0x32,0x35,0x38,0x3a,0x3a,0x39,
0x37,0x36,0x36,0x37,0x36,0x35,0x35,0x34,0x33,0x33,0x34,0x36,0x37,0x36,0x36,0x38,
0x3a,0x39,0x37,0x35,0x35,0x37,0x3c,0x3c,0x3a,0x37,0x35,0x34,0x34,0x32,0x34,0x39,
0x35,0x31,0x30,0x31,0x37,0x44,0x58,0x6b,0x79,0x7e,0x7a,0x70,0x68,0x60,0x5f,0x65,
0x6f,0x79,0x7e,0x7a,0x70,0x67,0x61,0x62,0x66,0x6d,0x74,0x7b,0x7c,0x77,0x6c,0x63,
0x5e,0x5d,0x62,0x6b,0x72,0x75,0x73,0x6e,0x69,0x63,0x60,0x62,0x69,0x70,0x77,0x7a,
0x79,0x72,0x6e,0x66,0x62,0x62,0x64,0x6b,0x72,0x75,0x73,0x6f,0x67,0x5f,0x5e,0x60,
0x67,0x70,0x78,0x7b,0x7a,0x74,0x6a,0x60,0x5d,0x5e,0x65,0x6d,0x73,0x76,0x77,0x73,
0x6b,0x64,0x62,0x66,0x6b,0x6f,0x72,0x70,0x74,0x76,0x7c,0x87,0x95,0xa1,0xac,0xad,
0xa8,0x9f,0x91,0x82,0x73,0x67,0x5d,0x56,0x51,0x4c,0x45,0x3e,0x39,0x37,0x40,0x4f,
0x63,0x77,0x86,0x8f,0x95,0x97,0x96,0x98,0x9c,0x9f,0xa0,0x98,0x8d,0x7f,0x70,0x63,
0x5c,0x5c,0x62,0x6a,0x74,0x7b,0x81,0x88,0x90,0x96,0x9c,0xa2,0xa4,0xa3,0x9e,0x9a,
0x95,0x95,0x98,0x9b,0x9c,0x96,0x88,0x76,0x64,0x56,0x55,0x5d,0x6a,0x76,0x7e,0x7e,
0x79,0x6f,0x66,0x62,0x64,0x6b,0x72,0x78,0x78,0x74,0x6e,0x66,0x60,0x60,0x65,0x6d,
0x73,0x75,0x75,0x72,0x6b,0x64,0x60,0x64,0x6a,0x6f,0x77,0x79,0x77,0x74,0x6c,0x64,
0x60,0x5f,0x5e,0x59,0x4d,0x3f,0x34,0x2d,0x2c,0x2b,0x32,0x3b,0x48,0x55,0x62,0x6e,
0x78,0x79,0x75,0x6d,0x65,0x61,0x63,0x6d,0x79,0x81,0x81,0x79,0x6e,0x64,0x62,0x64,
0x6c,0x74,0x79,0x7c,0x76,0x6e,0x68,0x64,0x63,0x61,0x5c,0x54,0x4a,0x3f,0x33,0x2b,
0x29,0x2c,0x33,0x3a,0x3e,0x3f,0x3d,0x37,0x32,0x32,0x34,0x39,0x3d,0x3d,0x3d,0x3d,
0x3d,0x3b,0x3a,0x3e,0x46,0x51,0x62,0x72,0x7f,0x89,0x8f,0x94,0x98,0x9d,0xa3,0xa5,
0xa3,0x9a,0x8d,0x7d,0x6e,0x62,0x5a,0x55,0x4d,0x44,0x3c,0x37,0x3c,0x45,0x57,0x6c,
0x7d,0x85,0x7f,0x72,0x63,0x58,0x58,0x60,0x6b,0x76,0x7c,0x78,0x6f,0x64,0x5e,0x60,
0x68,0x71,0x7b,0x7f,0x7c,0x73,0x69,0x63,0x62,0x62,0x63,0x5d,0x51,0x41,0x33,0x2c,
0x2b,0x31,0x3d,0x43,0x43,0x3e,0x37,0x34,0x32,0x33,0x35,0x34,0x32,0x33,0x3a,0x49,
0x5c,0x6d,0x7b,0x7f,0x77,0x6c,0x62,0x5f,0x62,0x69,0x70,0x74,0x7a,0x7d,0x85,0x90,
0x9a,0x9d,0x98,0x8b,0x79,0x67,0x56,0x4b,0x42,0x3a,0x35,0x35,0x3c,0x4c,0x60,0x74,
0x7f,0x7f,0x77,0x6a,0x5c,0x57,0x55,0x50,0x4a,0x3e,0x35,0x37,0x42,0x55,0x6d,0x81,
0x87,0x7f,0x70,0x62,0x57,0x53,0x51,0x4b,0x43,0x3b,0x3a,0x44,0x54,0x69,0x7d,0x8b,
0x91,0x93,0x93,0x97,0x9e,0xa2,0xa3,0xa3,0xa0,0x9f,0xa1,0xa3,0xa3,0x9f,0x96,0x86,
0x75,0x66,0x5f,0x5d,0x62,0x6a,0x71,0x78,0x82,0x8b,0x96,0x9f,0xa1,0x9a,0x8d,0x7c,
0x6b,0x5e,0x58,0x5c,0x68,0x73,0x7c,0x86,0x8d,0x94,0x97,0x9b,0x9f,0xa2,0xa4,0xa0,
0x95,0x86,0x77,0x6a,0x62,0x5a,0x54,0x4e,0x45,0x3b,0x36,0x3a,0x49,0x5c,0x71,0x80,
0x84,0x7e,0x72,0x65,0x5e,0x60,0x69,0x73,0x79,0x7a,0x7d,0x82,0x8b,0x97,0x9f,0x9f,
0x93,0x7f,0x67,0x58,0x55,0x5e,0x6a,0x7a,0x81,0x7f,0x79,0x70,0x68,0x65,0x66,0x69,
0x6b,0x6d,0x71,0x77,0x7e,0x86,0x90,0x9c,0xa3,0xa4,0x9f,0x98,0x8e,0x83,0x75,0x6a,
0x64,0x5e,0x54,0x4b,0x40,0x39,0x38,0x3c,0x45,0x53,0x66,0x79,0x86,0x8f,0x95,0x94,
0x94,0x8d,0x83,0x75,0x64,0x53,0x47,0x3d,0x3a,0x37,0x3c,0x3c,0x3b,0x3b,0x3b,0x3c,
0x44,0x51,0x62,0x71,0x78,0x77,0x73,0x6b,0x63,0x5f,0x60,0x66,0x6f,0x74,0x75,0x78,
0x7e,0x88,0x96,0xa2,0xaa,0xab,0xaa,0xa5,0x9f,0x9a,0x98,0x98,0x9c,0x9f,0xa1,0xa1,
0xa0,0x9e,0x9d,0x9c,0x9b,0x99,0x9d,0x9c,0x94,0x86,0x73,0x61,0x5a,0x5a,0x62,0x6d,
0x79,0x7f,0x7c,0x72,0x66,0x5d,0x5a,0x59,0x51,0x45,0x36,0x2c,0x30,0x40,0x57,0x70,
0x81,0x85,0x7f,0x6c,0x5b,0x51,0x4c,0x49,0x47,0x40,0x37,0x2c,0x2c,0x32,0x3a,0x42,
0x42,0x3e,0x3a,0x33,0x30,0x38,0x48,0x5c,0x70,0x79,0x7a,0x76,0x6f,0x69,0x62,0x59,
0x51,0x47,0x40,0x39,0x37,0x3f,0x50,0x65,0x79,0x87,0x90,0x95,0x98,0x97,0x93,0x8a,
0x7a,0x68,0x5a,0x56,0x5d,0x6b,0x79,0x7d,0x7c,0x73,0x65,0x5d,0x5a,0x5a,0x57,0x4c,
0x3a,0x2d,0x2e,0x3e,0x56,0x70,0x82,0x87,0x82,0x74,0x65,0x5d,0x5e,0x64,0x6c,0x71,
0x74,0x77,0x7e,0x88,0x95,0x9f,0xa8,0xa8,0xa3,0x9e,0x9a,0x98,0x98,0x98,0x9b,0x98,
0x91,0x87,0x79,0x6a,0x5e,0x53,0x47,0x3d,0x39,0x37,0x39,0x42,0x50,0x62,0x76,0x86,
0x90,0x97,0x99,0x96,0x91,0x84,0x75,0x67,0x5a,0x4d,0x43,0x3d,0x39,0x3a,0x42,0x4f,
0x62,0x75,0x82,0x85,0x7d,0x70,0x63,0x5a,0x54,0x4f,0x49,0x40,0x36,0x32,0x37,0x49,
0x5f,0x75,0x84,0x8b,0x90,0x93,0x96,0x9b,0xa1,0xa3,0xa5,0xa2,0x9d,0x9d,0xa0,0xa3,
0xa4,0xa1,0x9e,0x9b,0x9b,0x99,0x9b,0x9d,0x9c,0x98,0x95,0x94,0x97,0x9b,0x9c,0x98,
0x8f,0x81,0x72,0x66,0x5f,0x5f,0x62,0x67,0x6d,0x75,0x7f,0x89,0x90,0x97,0x9f,0xa3,
0xa7,0xa6,0xa2,0x9a,0x8c,0x79,0x6b,0x5d,0x53,0x4c,0x49,0x41,0x39,0x34,0x32,0x32,
0x35,0x39,0x3d,0x3d,0x39,0x34,0x31,0x31,0x32,0x34,0x35,0x36,0x38,0x3d,0x48,0x5a,
0x6f,0x7d,0x82,0x7c,0x6e,0x60,0x5b,0x5f,0x6a,0x77,0x7f,0x7f,0x77,0x6b,0x63,0x60,
0x63,0x69,0x6e,0x72,0x72,0x72,0x7b,0x84,0x8f,0x9b,0xa1,0x9c,0x90,0x7d,0x67,0x51,
0x42,0x39,0x35,0x34,0x35,0x37,0x38,0x37,0x35,0x35,0x3e,0x4c,0x5f,0x6e,0x78,0x79,
0x72,0x67,0x5d,0x56,0x51,0x4d,0x47,0x3c,0x33,0x2c,0x2a,0x2c,0x38,0x40,0x43,0x42,
0x39,0x30,0x2f,0x34,0x40,0x50,0x62,0x73,0x81,0x8a,0x90,0x96,0x9d,0xa3,0xa6,0xa4,
0x9f,0x97,0x8f,0x81,0x72,0x63,0x5a,0x58,0x60,0x6a,0x76,0x7e,0x7f,0x77,0x6b,0x62,
0x60,0x64,0x6e,0x77,0x7b,0x79,0x70,0x66,0x5f,0x5e,0x5e,0x5c,0x54,0x47,0x3b,0x32,
0x30,0x3a,0x50,0x69,0x7c,0x8f,0x97,0x9a,0x9d,0x9c,0x96,0x8c,0x7c,0x6a,0x5d,0x57,
0x5d,0x69,0x75,0x7b,0x7a,0x73,0x69,0x5f,0x57,0x53,0x51,0x4c,0x40,0x31,0x28,0x27,
0x2f,0x3b,0x43,0x48,0x46,0x3e,0x35,0x32,0x36,0x42,0x50,0x64,0x6f,0x77,0x83,0x8e,
0x97,0x9e,0xa3,0xa4,0xa2,0x9f,0x9e,0x9f,0xa0,0x9f,0x9d,0x98,0x8e,0x80,0x70,0x64,
0x5b,0x53,0x49,0x3c,0x33,0x30,0x39,0x4a,0x5f,0x73,0x7f,0x82,0x7b,0x6f,0x64,0x5d,
0x57,0x52,0x49,0x3f,0x38,0x37,0x3f,0x51,0x65,0x79,0x8a,0x92,0x98,0x96,0x97,0x90,
0x86,0x79,0x6c,0x5f,0x54,0x4b,0x45,0x42,0x3c,0x3b,0x40,0x4d,0x5f,0x72,0x81,0x8c,
0x90,0x92,0x94,0x9b,0xa3,0xa9,0xa8,0xa0,0x90,0x7f,0x70,0x64,0x5d,0x5c,0x5f,0x65,
0x6d,0x74,0x7f,0x88,0x92,0x9b,0xa0,0xa5,0xa8,0xa5,0xa4,0x9f,0x99,0x9a,0x9c,0xa0,
0xa3,0xa4,0xa3,0xa3,0xa0,0x9f,0xa0,0xa2,0xa1,0x9e,0x9d,0x9c,0x9c,0x9c,0x9c,0x99,
0x94,0x88,0x78,0x6a,0x60,0x5e,0x65,0x6e,0x78,0x7f,0x80,0x78,0x6b,0x5f,0x5a,0x5d,
0x69,0x74,0x78,0x78,0x72,0x67,0x61,0x5d,0x5c,0x5d,0x59,0x4d,0x3e,0x30,0x29,0x2b,
0x32,0x3b,0x41,0x42,0x3d,0x37,0x36,0x35,0x35,0x34,0x31,0x2f,0x35,0x3e,0x4f,0x62,
0x73,0x7c,0x7c,0x72,0x67,0x5d,0x57,0x53,0x4f,0x4b,0x43,0x38,0x2f,0x29,0x2c,0x35,
0x3d,0x40,0x3e,0x37,0x30,0x2e,0x35,0x45,0x5b,0x6f,0x7a,0x7c,0x78,0x6f,0x63,0x59,
0x50,0x49,0x46,0x3f,0x39,0x32,0x33,0x32,0x34,0x39,0x44,0x51,0x66,0x73,0x7c,0x7d,
0x77,0x6b,0x60,0x5a,0x5d,0x67,0x73,0x7a,0x79,0x72,0x67,0x5e,0x5d,0x5f,0x60,0x5b,
0x4d,0x3b,0x30,0x2c,0x37,0x4f,0x6b,0x81,0x8c,0x87,0x77,0x64,0x5b,0x5b,0x63,0x70,
0x79,0x7d,0x7c,0x70,0x63,0x5e,0x60,0x68,0x70,0x75,0x76,0x74,0x6f,0x67,0x61,0x5f,
0x5d,0x5a,0x56,0x4e,0x40,0x33,0x29,0x27,0x2c,0x34,0x3e,0x49,0x51,0x59,0x63,0x6e,
0x7a,0x87,0x92,0x99,0x98,0x90,0x85,0x76,0x64,0x54,0x48,0x3f,0x3a,0x36,0x36,0x36,
0x36,0x3a,0x3c,0x3c,0x35,0x34,0x30,0x2f,0x30,0x31,0x32,0x31,0x30,0x30,0x39,0x46,
0x59,0x6d,0x7a,0x7d,0x7a,0x6f,0x66,0x5f,0x60,0x66,0x6e,0x75,0x79,0x7c,0x84,0x8d,
0x98,0xa5,0xae,0xb0,0xac,0xa3,0x9b,0x98,0x95,0x95,0x94,0x92,0x8b,0x80,0x73,0x64,
0x56,0x4b,0x42,0x3b,0x3b,0x3a,0x3a,0x37,0x33,0x31,0x35,0x40,0x50,0x61,0x70,0x78,
0x77,0x70,0x68,0x61,0x5d,0x56,0x4f,0x45,0x3b,0x34,0x39,0x47,0x5b,0x72,0x83,0x88,
0x80,0x71,0x66,0x5c,0x55,0x4e,0x45,0x41,0x37,0x35,0x3f,0x52,0x68,0x7c,0x89,0x8f,
0x93,0x96,0x99,0x97,0x90,0x80,0x6e,0x61,0x5c,0x60,0x6d,0x7b,0x82,0x81,0x76,0x6a,
0x61,0x5e,0x60,0x66,0x6b,0x6e,0x6f,0x74,0x80,0x8d,0x9b,0xa2,0xa0,0x93,0x80,0x6c,
0x5f,0x58,0x5a,0x64,0x6f,0x7a,0x86,0x8f,0x97,0x98,0x9f,0xa2,0xa3,0xa2,0x9f,0x9b,
0x98,0x97,0x97,0x98,0x95,0x8e,0x80,0x6b,0x58,0x4b,0x45,0x42,0x40,0x3b,0x36,0x32,
0x30,0x32,0x39,0x3f,0x42,0x3d,0x38,0x32,0x31,0x37,0x43,0x52,0x63,0x72,0x7f,0x86,
0x8d,0x93,0x9a,0xa0,0xa3,0xa4,0xa4,0xa3,0xa1,0xa0,0x9e,0x9f,0xa1,0xa2,0xa1,0xa0,
0x9f,0x9e,0x9c,0x9c,0x9b,0x9a,0x95,0x8b,0x7e,0x6e,0x62,0x54,0x4b,0x44,0x3f,0x3b,
// Line 16
0x3c,0x3c,0x3b,0x3a,0x39,0x38,0x38,0x38,0x37,0x36,0x38,0x38,0x37,0x37,0x37,0x38,
0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x33,0x32,0x33,0x34,0x36,0x36,
0x38,0x37,0x37,0x39,0x39,0x39,0x3a,0x39,0x36,0x35,0x35,0x36,0x35,0x36,0x37,0x38,
0x39,0x36,0x33,0x35,0x39,0x44,0x56,0x68,0x75,0x7c,0x7a,0x6e,0x62,0x5a,0x5c,0x63,
0x6e,0x76,0x7a,0x78,0x71,0x67,0x61,0x5f,0x64,0x6e,0x75,0x78,0x76,0x70,0x68,0x62,
0x5d,0x5e,0x65,0x6d,0x71,0x74,0x75,0x72,0x6b,0x63,0x60,0x5f,0x65,0x6a,0x70,0x75,
0x75,0x70,0x6a,0x62,0x5e,0x5d,0x65,0x6c,0x74,0x78,0x76,0x6f,0x68,0x60,0x5d,0x60,
0x65,0x6c,0x74,0x77,0x75,0x6f,0x68,0x63,0x60,0x60,0x65,0x6d,0x77,0x7c,0x79,0x72,
0x69,0x62,0x62,0x63,0x66,0x6a,0x6d,0x6d,0x6e,0x71,0x78,0x82,0x91,0x9d,0xa6,0xa9,
0xa7,0x9e,0x93,0x83,0x74,0x67,0x5d,0x56,0x50,0x4a,0x43,0x3b,0x37,0x3a,0x43,0x52,
0x63,0x76,0x88,0x93,0x99,0x9b,0x9d,0x9f,0xa2,0xa1,0xa0,0x9a,0x92,0x83,0x72,0x62,
0x59,0x58,0x5f,0x68,0x72,0x7c,0x7d,0x75,0x6a,0x60,0x5b,0x60,0x69,0x74,0x7a,0x7a,
0x75,0x6c,0x64,0x61,0x62,0x65,0x6a,0x6d,0x6f,0x70,0x72,0x7a,0x86,0x93,0xa2,0xab,
0xac,0xa8,0xa1,0x9a,0x98,0x99,0x9c,0x9d,0x9a,0x8f,0x81,0x72,0x65,0x5a,0x51,0x45,
0x3a,0x33,0x32,0x39,0x49,0x5d,0x6e,0x79,0x79,0x73,0x69,0x61,0x5a,0x54,0x4f,0x46,
0x3a,0x32,0x32,0x3d,0x54,0x6b,0x7b,0x82,0x7e,0x71,0x64,0x5a,0x54,0x50,0x4b,0x45,
0x3c,0x35,0x31,0x32,0x36,0x3b,0x42,0x4b,0x54,0x5d,0x6b,0x7a,0x86,0x8e,0x92,0x93,
0x8f,0x87,0x78,0x66,0x55,0x46,0x3b,0x38,0x37,0x38,0x3c,0x3d,0x39,0x35,0x34,0x39,
0x47,0x58,0x68,0x70,0x73,0x6e,0x66,0x5f,0x5d,0x62,0x69,0x70,0x74,0x76,0x79,0x80,
0x8b,0x97,0x9f,0xa1,0x97,0x83,0x6c,0x5d,0x55,0x58,0x65,0x74,0x7e,0x88,0x8c,0x91,
0x98,0x9a,0x95,0x88,0x74,0x5e,0x50,0x4b,0x55,0x65,0x74,0x7b,0x79,0x74,0x6e,0x68,
0x65,0x5f,0x55,0x4b,0x3f,0x36,0x36,0x3e,0x4f,0x64,0x77,0x87,0x91,0x95,0x94,0x8e,
0x87,0x7e,0x73,0x65,0x56,0x49,0x41,0x3b,0x39,0x39,0x3b,0x3e,0x40,0x3f,0x41,0x45,
0x4e,0x5d,0x70,0x7d,0x81,0x7c,0x72,0x65,0x5d,0x5e,0x67,0x73,0x7c,0x7d,0x78,0x6f,
0x65,0x5f,0x62,0x6b,0x72,0x76,0x77,0x76,0x70,0x68,0x60,0x5b,0x5c,0x5a,0x56,0x4d,
0x42,0x35,0x30,0x2e,0x31,0x37,0x3e,0x46,0x4f,0x57,0x60,0x6b,0x79,0x85,0x8f,0x99,
0xa0,0xa3,0xa7,0xa9,0xa6,0x9e,0x91,0x81,0x6e,0x63,0x5e,0x60,0x68,0x74,0x7b,0x80,
0x79,0x6e,0x66,0x5d,0x58,0x56,0x52,0x4a,0x3f,0x34,0x2c,0x28,0x2b,0x32,0x3d,0x44,
0x43,0x3d,0x36,0x33,0x38,0x48,0x5d,0x70,0x7f,0x84,0x82,0x7a,0x70,0x68,0x65,0x68,
0x6b,0x70,0x77,0x7d,0x84,0x8b,0x92,0x9a,0xa3,0xa9,0xa9,0xa3,0x9b,0x8f,0x84,0x76,
0x6b,0x63,0x63,0x65,0x6a,0x70,0x78,0x80,0x88,0x8f,0x95,0x9e,0xa5,0xa8,0xa9,0xa5,
0x9e,0x9b,0x99,0x9a,0x9c,0x9f,0xa1,0xa2,0xa2,0xa1,0x9e,0xa0,0x9c,0x9a,0x9c,0x9e,
0xa1,0xa2,0xa3,0xa2,0xa1,0xa1,0xa0,0x9d,0x9f,0x9d,0x9c,0x9a,0x98,0x95,0x9b,0x9e,
0xa1,0xa2,0xa1,0xa0,0x9d,0x9d,0x9d,0x9e,0x9b,0x91,0x82,0x70,0x63,0x5b,0x5a,0x5d,
0x65,0x70,0x79,0x80,0x89,0x92,0x9c,0xa2,0xa6,0xa6,0xa6,0xa3,0x9a,0x8d,0x7d,0x6d,
0x60,0x58,0x5a,0x60,0x6e,0x79,0x7a,0x77,0x6f,0x67,0x63,0x5d,0x54,0x4e,0x46,0x3c,
0x34,0x2e,0x2e,0x30,0x37,0x3f,0x48,0x52,0x5e,0x6a,0x74,0x78,0x75,0x6c,0x61,0x5d,
0x60,0x66,0x6e,0x75,0x7a,0x7d,0x83,0x8b,0x93,0x9d,0xa9,0xb0,0xac,0xa2,0x93,0x83,
0x76,0x66,0x5b,0x54,0x51,0x4d,0x45,0x3c,0x35,0x35,0x40,0x55,0x6d,0x7e,0x85,0x80,
0x74,0x63,0x58,0x57,0x5f,0x6c,0x78,0x7b,0x76,0x6b,0x61,0x5c,0x5d,0x62,0x68,0x6f,
0x76,0x77,0x71,0x6c,0x67,0x63,0x67,0x69,0x6b,0x70,0x74,0x76,0x7a,0x80,0x8b,0x98,
0xa0,0xa0,0x94,0x83,0x6f,0x5b,0x4d,0x43,0x3c,0x39,0x39,0x3d,0x47,0x56,0x67,0x76,
0x82,0x8b,0x92,0x95,0x97,0x94,0x8c,0x7c,0x6a,0x5d,0x56,0x59,0x63,0x6d,0x77,0x82,
0x8b,0x92,0x99,0x9e,0xa3,0xa5,0xa3,0x9d,0x9a,0x9a,0x9d,0xa0,0xa1,0x9f,0x9e,0x9e,
0x9e,0x9c,0x99,0x90,0x80,0x6e,0x5e,0x56,0x58,0x61,0x6c,0x76,0x7a,0x77,0x70,0x69,
0x62,0x5c,0x55,0x4b,0x41,0x39,0x33,0x2d,0x2a,0x2b,0x2e,0x37,0x42,0x50,0x5e,0x6b,
0x73,0x73,0x70,0x68,0x60,0x5e,0x59,0x50,0x49,0x42,0x3a,0x33,0x2e,0x2e,0x34,0x3c,
0x45,0x4f,0x5d,0x6b,0x76,0x79,0x76,0x6c,0x62,0x5c,0x5d,0x6a,0x76,0x7d,0x7b,0x72,
0x66,0x5d,0x5c,0x5d,0x5d,0x56,0x49,0x37,0x2b,0x2a,0x3a,0x54,0x6e,0x7e,0x85,0x81,
0x76,0x66,0x5b,0x53,0x4e,0x48,0x42,0x3b,0x36,0x33,0x31,0x32,0x39,0x43,0x51,0x60,
0x6c,0x75,0x79,0x76,0x6d,0x62,0x5b,0x59,0x56,0x4b,0x3d,0x34,0x35,0x40,0x54,0x6a,
0x7b,0x83,0x7f,0x70,0x5e,0x52,0x4e,0x4c,0x48,0x3f,0x39,0x39,0x41,0x51,0x68,0x7b,
0x89,0x91,0x93,0x92,0x90,0x8b,0x82,0x76,0x65,0x54,0x49,0x41,0x3f,0x40,0x40,0x3c,
0x36,0x35,0x3a,0x40,0x45,0x41,0x38,0x2f,0x2b,0x31,0x41,0x59,0x70,0x7a,0x7a,0x70,
0x65,0x5e,0x5b,0x57,0x54,0x4a,0x3d,0x33,0x2f,0x38,0x50,0x68,0x7b,0x84,0x81,0x74,
0x63,0x58,0x56,0x60,0x6e,0x78,0x7a,0x78,0x6d,0x61,0x5c,0x5d,0x64,0x6e,0x72,0x72,
0x71,0x72,0x7b,0x86,0x92,0x9b,0x9c,0x91,0x7a,0x61,0x51,0x4e,0x57,0x67,0x74,0x7b,
0x7b,0x75,0x6c,0x64,0x62,0x5f,0x57,0x49,0x39,0x30,0x32,0x3f,0x54,0x6d,0x7c,0x80,
0x7b,0x6c,0x5d,0x55,0x50,0x4d,0x49,0x42,0x39,0x31,0x2d,0x2e,0x35,0x3d,0x46,0x4d,
0x55,0x5f,0x6c,0x7d,0x89,0x94,0x9a,0x9a,0x91,0x85,0x77,0x69,0x5a,0x4b,0x3f,0x37,
0x35,0x36,0x3c,0x47,0x56,0x66,0x77,0x86,0x91,0x99,0x9c,0x9a,0x93,0x87,0x79,0x69,
0x5d,0x54,0x56,0x5d,0x68,0x74,0x81,0x8d,0x97,0x9e,0xa0,0x9a,0x8d,0x7b,0x67,0x58,
0x53,0x58,0x63,0x70,0x79,0x82,0x8b,0x93,0x98,0x9e,0x9a,0x8e,0x7e,0x69,0x58,0x50,
0x55,0x5d,0x6b,0x78,0x83,0x8b,0x93,0x97,0x9c,0xa2,0xa6,0xa3,0xa1,0x9a,0x90,0x84,
0x75,0x67,0x61,0x5e,0x60,0x65,0x6c,0x76,0x7d,0x81,0x87,0x90,0x9a,0xa3,0xa6,0xa5,
0x9d,0x91,0x83,0x74,0x65,0x5a,0x52,0x4b,0x45,0x3d,0x36,0x32,0x2e,0x2c,0x2d,0x32,
0x38,0x3b,0x3d,0x3b,0x37,0x34,0x33,0x34,0x38,0x3a,0x3a,0x38,0x32,0x2c,0x2a,0x2c,
0x33,0x3f,0x50,0x5e,0x6c,0x7a,0x88,0x94,0x9d,0xa1,0x9c,0x92,0x81,0x6e,0x62,0x5c,
0x5d,0x62,0x6c,0x77,0x82,0x8c,0x94,0x98,0x96,0x8e,0x83,0x74,0x63,0x53,0x4a,0x43,
0x3d,0x3a,0x38,0x36,0x37,0x37,0x36,0x37,0x36,0x34,0x31,0x30,0x30,0x32,0x37,0x39,
0x39,0x39,0x38,0x38,0x39,0x39,0x3b,0x38,0x38,0x32,0x2e,0x32,0x3a,0x43,0x54,0x62,
0x70,0x7e,0x89,0x91,0x98,0x9a,0x97,0x8c,0x7b,0x68,0x5b,0x55,0x5a,0x66,0x74,0x7e,
0x7f,0x78,0x6e,0x62,0x5a,0x54,0x4d,0x45,0x3a,0x31,0x2c,0x2a,0x2f,0x37,0x3d,0x3f,
0x3c,0x38,0x36,0x35,0x36,0x36,0x36,0x35,0x36,0x3c,0x4d,0x60,0x70,0x78,0x76,0x6f,
0x63,0x5c,0x56,0x53,0x51,0x4a,0x3d,0x30,0x2b,0x35,0x4d,0x69,0x7f,0x88,0x83,0x72,
0x62,0x56,0x54,0x5d,0x66,0x6b,0x70,0x75,0x7b,0x84,0x90,0x9a,0x9d,0x94,0x83,0x6c,
0x5a,0x53,0x59,0x67,0x73,0x7d,0x7e,0x78,0x6c,0x62,0x5e,0x62,0x66,0x68,0x69,0x6e,
0x76,0x7e,0x88,0x97,0xa0,0x9e,0x94,0x7f,0x69,0x5a,0x56,0x5b,0x68,0x76,0x82,0x83,
0x7b,0x6e,0x64,0x61,0x63,0x67,0x6b,0x6e,0x70,0x75,0x7d,0x89,0x97,0x9e,0x9b,0x8f,
0x7d,0x6b,0x5e,0x58,0x5c,0x65,0x71,0x7c,0x84,0x8d,0x97,0x9d,0xa1,0x9b,0x8e,0x7b,
0x68,0x5a,0x56,0x5c,0x65,0x6c,0x77,0x80,0x86,0x8d,0x96,0x9a,0x9a,0x8e,0x7a,0x69,
0x5a,0x55,0x5b,0x68,0x76,0x7e,0x80,0x7b,0x72,0x69,0x63,0x62,0x65,0x68,0x6b,0x6e,
0x76,0x81,0x8f,0x97,0x99,0x94,0x89,0x77,0x67,0x58,0x4f,0x46,0x3d,0x36,0x33,0x3b,
0x49,0x5d,0x71,0x7f,0x81,0x7a,0x6d,0x60,0x58,0x5a,0x61,0x6a,0x70,0x74,0x77,0x81,
0x89,0x92,0x9c,0x9c,0x8f,0x7d,0x65,0x50,0x45,0x3d,0x3b,0x3b,0x3a,0x38,0x38,0x39,
0x3d,0x3f,0x3d,0x39,0x34,0x31,0x32,0x34,0x36,0x36,0x36,0x36,0x34,0x32,0x34,0x36,
0x37,0x36,0x33,0x30,0x2c,0x32,0x39,0x45,0x54,0x63,0x70,0x7e,0x8a,0x94,0x9d,0x9e,
0x98,0x8b,0x79,0x68,0x5b,0x54,0x55,0x5d,0x67,0x72,0x7e,0x8a,0x94,0x9b,0x9d,0x97,
0x89,0x79,0x68,0x58,0x4b,0x42,0x3d,0x3b,0x3a,0x3c,0x42,0x50,0x61,0x72,0x81,0x8b,
0x91,0x94,0x98,0x9c,0xa5,0xa9,0xa9,0xa5,0x9e,0x9a,0x99,0x9a,0x9b,0x92,0x8b,0x7a,
0x6a,0x5d,0x57,0x5a,0x62,0x6b,0x74,0x7d,0x85,0x8a,0x91,0x98,0x9f,0xa3,0xa3,0x9e,
0x96,0x88,0x78,0x69,0x5f,0x58,0x51,0x4a,0x41,0x39,0x35,0x35,0x3e,0x4f,0x62,0x74,
0x83,0x8d,0x95,0x98,0x96,0x8e,0x83,0x76,0x67,0x59,0x4d,0x44,0x3c,0x38,0x37,0x3a,
0x45,0x59,0x6d,0x7b,0x7f,0x7a,0x6c,0x62,0x57,0x50,0x4e,0x4b,0x43,0x39,0x2e,0x2a,
0x2e,0x35,0x3c,0x3f,0x3d,0x37,0x32,0x2f,0x2f,0x32,0x34,0x34,0x33,0x35,0x36,0x38,
0x39,0x37,0x36,0x35,0x34,0x35,0x36,0x38,0x36,0x35,0x33,0x34,0x34,0x38,0x39,0x39,
// Line 17
0x39,0x37,0x38,0x37,0x37,0x35,0x34,0x34,0x35,0x36,0x37,0x36,0x37,0x39,0x3b,0x3b,
0x3a,0x39,0x38,0x36,0x35,0x33,0x35,0x36,0x35,0x33,0x34,0x35,0x35,0x35,0x35,0x36,
0x36,0x36,0x36,0x36,0x38,0x39,0x39,0x3b,0x3c,0x3b,0x39,0x37,0x35,0x37,0x39,0x3b,
0x39,0x34,0x30,0x32,0x3b,0x49,0x59,0x6d,0x7b,0x7f,0x7b,0x70,0x64,0x5e,0x5e,0x66,
0x71,0x78,0x7b,0x77,0x6f,0x65,0x61,0x63,0x68,0x70,0x77,0x7b,0x7b,0x77,0x70,0x67,
0x61,0x60,0x64,0x6b,0x71,0x73,0x74,0x71,0x68,0x61,0x5e,0x61,0x66,0x6e,0x74,0x77,
0x76,0x70,0x68,0x65,0x60,0x60,0x67,0x70,0x77,0x79,0x77,0x71,0x6a,0x64,0x61,0x60,
0x66,0x6d,0x74,0x78,0x77,0x70,0x69,0x61,0x5d,0x5f,0x67,0x70,0x79,0x7a,0x77,0x70,
0x6b,0x67,0x65,0x67,0x6d,0x71,0x74,0x74,0x73,0x77,0x7e,0x87,0x94,0x9e,0xa8,0xab,
0xa8,0x9d,0x90,0x80,0x72,0x64,0x5b,0x55,0x51,0x4c,0x46,0x3f,0x3d,0x3e,0x45,0x55,
0x67,0x7b,0x8b,0x92,0x96,0x99,0x9d,0xa0,0xa3,0xa4,0xa2,0x9b,0x90,0x7e,0x6c,0x5f,
0x59,0x59,0x61,0x6d,0x77,0x7a,0x7a,0x74,0x69,0x61,0x5f,0x5e,0x69,0x73,0x78,0x7a,
0x76,0x6e,0x69,0x65,0x66,0x69,0x6e,0x73,0x74,0x74,0x76,0x7e,0x8b,0x9a,0xa7,0xad,
0xad,0xa7,0x9f,0x99,0x98,0x9b,0x9f,0xa0,0x9b,0x90,0x83,0x74,0x65,0x57,0x4f,0x48,
0x3f,0x36,0x32,0x39,0x4a,0x60,0x71,0x7b,0x7c,0x74,0x67,0x5e,0x58,0x55,0x53,0x4c,
0x40,0x36,0x36,0x44,0x5a,0x73,0x85,0x8b,0x88,0x78,0x68,0x62,0x61,0x66,0x6f,0x76,
0x7b,0x7f,0x83,0x8b,0x96,0xa1,0xa8,0xa6,0xa4,0x9b,0x8f,0x83,0x75,0x67,0x61,0x58,
0x50,0x4b,0x47,0x43,0x3f,0x39,0x34,0x35,0x39,0x41,0x47,0x4e,0x55,0x60,0x6e,0x7c,
0x88,0x90,0x96,0x9b,0x9f,0xa0,0xa2,0xa2,0x9f,0x93,0x84,0x73,0x67,0x61,0x64,0x6a,
0x75,0x80,0x83,0x7d,0x74,0x68,0x61,0x5f,0x64,0x6c,0x76,0x79,0x75,0x6c,0x64,0x5e,
0x59,0x59,0x57,0x50,0x44,0x36,0x2b,0x26,0x29,0x33,0x3e,0x46,0x49,0x48,0x43,0x3e,
0x3b,0x3a,0x3a,0x38,0x37,0x38,0x3f,0x4a,0x57,0x64,0x72,0x7f,0x89,0x91,0x95,0x96,
0x93,0x87,0x78,0x68,0x59,0x4e,0x45,0x3e,0x3b,0x39,0x3b,0x3a,0x38,0x36,0x38,0x41,
0x50,0x5d,0x6c,0x77,0x78,0x73,0x68,0x5d,0x56,0x52,0x50,0x4a,0x3f,0x35,0x2d,0x29,
0x31,0x38,0x40,0x45,0x43,0x3b,0x32,0x2e,0x35,0x47,0x60,0x75,0x7d,0x7f,0x77,0x6e,
0x67,0x60,0x57,0x53,0x48,0x3c,0x35,0x34,0x3d,0x4e,0x65,0x7c,0x8e,0x96,0x99,0x98,
0x92,0x8a,0x80,0x75,0x66,0x57,0x49,0x3f,0x39,0x38,0x3b,0x3c,0x3d,0x39,0x36,0x39,
0x41,0x52,0x63,0x72,0x79,0x7a,0x74,0x6b,0x61,0x5d,0x57,0x52,0x4e,0x43,0x39,0x37,
0x3d,0x4b,0x63,0x7b,0x8e,0x96,0x98,0x95,0x96,0x99,0xa0,0xa6,0xa4,0x9a,0x8b,0x7a,
0x6c,0x61,0x5a,0x54,0x4a,0x40,0x38,0x38,0x3c,0x44,0x52,0x64,0x76,0x83,0x8d,0x94,
0x98,0x97,0x91,0x85,0x77,0x69,0x5e,0x51,0x46,0x3e,0x3b,0x3b,0x41,0x4b,0x5b,0x6c,
0x7b,0x88,0x92,0x97,0x99,0x98,0x92,0x87,0x78,0x67,0x57,0x4a,0x40,0x3b,0x38,0x39,
0x3e,0x48,0x58,0x68,0x76,0x86,0x91,0x98,0x9e,0x9b,0x95,0x8b,0x7d,0x6d,0x62,0x5e,
0x63,0x6c,0x77,0x7f,0x86,0x8f,0x96,0x9b,0xa2,0xa6,0xa6,0xa2,0x9c,0x97,0x96,0x9a,
0x9e,0x9d,0x98,0x8c,0x7b,0x6d,0x5e,0x54,0x4e,0x47,0x3f,0x37,0x34,0x39,0x4c,0x61,
0x74,0x80,0x82,0x78,0x6b,0x5c,0x55,0x52,0x4f,0x47,0x3e,0x34,0x2e,0x2d,0x32,0x3c,
0x45,0x48,0x44,0x3d,0x36,0x34,0x38,0x44,0x53,0x64,0x74,0x80,0x89,0x93,0x9c,0x9d,
0x98,0x8d,0x7b,0x6c,0x61,0x5b,0x5c,0x64,0x6f,0x7a,0x84,0x8b,0x92,0x99,0xa1,0xa4,
0xa5,0xa4,0xa1,0x9d,0x9a,0x97,0x98,0x99,0x99,0x93,0x87,0x74,0x62,0x57,0x57,0x5e,
0x6a,0x76,0x7c,0x7e,0x7a,0x70,0x64,0x60,0x65,0x6d,0x79,0x7f,0x7d,0x77,0x6d,0x64,
0x5f,0x60,0x67,0x71,0x76,0x75,0x72,0x73,0x79,0x86,0x96,0x9f,0x9e,0x91,0x7b,0x64,
0x54,0x52,0x5b,0x6c,0x7b,0x82,0x7c,0x75,0x6a,0x61,0x5d,0x58,0x50,0x46,0x39,0x31,
0x34,0x40,0x52,0x69,0x7d,0x89,0x92,0x96,0x99,0x97,0x8f,0x81,0x70,0x61,0x54,0x4a,
0x44,0x40,0x3e,0x3c,0x39,0x39,0x3d,0x42,0x44,0x42,0x3d,0x36,0x32,0x34,0x3d,0x49,
0x59,0x67,0x75,0x80,0x89,0x90,0x96,0x94,0x8c,0x7d,0x6c,0x5e,0x55,0x55,0x5e,0x6c,
0x78,0x7f,0x7f,0x79,0x71,0x69,0x61,0x59,0x4e,0x45,0x3d,0x34,0x2f,0x2d,0x30,0x38,
0x3f,0x47,0x52,0x5e,0x6a,0x72,0x77,0x75,0x6b,0x61,0x5d,0x61,0x6f,0x7b,0x84,0x84,
0x7d,0x70,0x65,0x5f,0x61,0x66,0x6b,0x6c,0x6b,0x6e,0x75,0x80,0x90,0x99,0x9c,0x9b,
0x91,0x7f,0x6a,0x57,0x47,0x3c,0x38,0x39,0x3a,0x3f,0x3d,0x38,0x34,0x34,0x3a,0x4b,
0x5d,0x6c,0x77,0x7a,0x74,0x6a,0x62,0x5a,0x55,0x4e,0x47,0x3e,0x35,0x2e,0x2d,0x33,
0x39,0x3f,0x3e,0x38,0x35,0x35,0x37,0x35,0x32,0x2f,0x2e,0x33,0x3d,0x4c,0x5c,0x6f,
0x78,0x79,0x73,0x67,0x5c,0x59,0x54,0x4e,0x47,0x3d,0x35,0x2e,0x2b,0x2c,0x34,0x3b,
0x44,0x50,0x5d,0x69,0x73,0x79,0x78,0x70,0x64,0x5b,0x5c,0x66,0x74,0x7c,0x7d,0x74,
0x67,0x5e,0x5b,0x5f,0x67,0x6f,0x74,0x74,0x73,0x76,0x80,0x8f,0x9c,0xa2,0xa2,0x94,
0x80,0x6b,0x5c,0x58,0x5d,0x66,0x72,0x7c,0x86,0x8d,0x93,0x99,0xa0,0xa3,0xa3,0x9e,
0x98,0x94,0x94,0x95,0x98,0x97,0x93,0x8b,0x7c,0x6c,0x5c,0x55,0x4d,0x44,0x3d,0x38,
0x37,0x3c,0x45,0x54,0x66,0x77,0x82,0x89,0x8c,0x8f,0x98,0x9f,0xa3,0xa0,0xa1,0x9e,
0x99,0x99,0x9a,0x99,0x9c,0x91,0x82,0x71,0x62,0x59,0x59,0x60,0x6c,0x79,0x80,0x80,
0x77,0x6b,0x62,0x60,0x63,0x6b,0x74,0x7b,0x79,0x71,0x6a,0x64,0x62,0x64,0x67,0x6c,
0x70,0x72,0x74,0x78,0x82,0x8e,0x99,0x9c,0x97,0x89,0x7b,0x65,0x50,0x44,0x3d,0x39,
0x36,0x36,0x3d,0x4d,0x60,0x71,0x7d,0x80,0x7a,0x6f,0x64,0x5f,0x5e,0x64,0x6b,0x70,
0x75,0x79,0x81,0x8b,0x96,0xa2,0xac,0xae,0xa9,0x9f,0x93,0x85,0x77,0x6a,0x61,0x5a,
0x52,0x49,0x3f,0x3a,0x39,0x40,0x50,0x62,0x73,0x7f,0x81,0x78,0x69,0x5c,0x54,0x50,
0x4c,0x44,0x3b,0x36,0x36,0x40,0x55,0x6f,0x86,0x8e,0x85,0x74,0x63,0x5a,0x5b,0x65,
0x73,0x7b,0x7d,0x78,0x6d,0x63,0x60,0x62,0x67,0x70,0x77,0x7a,0x77,0x72,0x69,0x63,
0x5e,0x5b,0x57,0x55,0x4b,0x3e,0x31,0x28,0x25,0x29,0x31,0x3b,0x47,0x53,0x5e,0x68,
0x6f,0x71,0x72,0x6c,0x64,0x59,0x50,0x4a,0x45,0x3f,0x38,0x31,0x2e,0x2d,0x2f,0x38,
0x47,0x57,0x67,0x71,0x77,0x78,0x74,0x6c,0x62,0x5d,0x61,0x69,0x74,0x79,0x7b,0x80,
0x85,0x8c,0x97,0xa1,0xa2,0x97,0x80,0x65,0x52,0x4c,0x55,0x64,0x78,0x81,0x81,0x79,
0x6d,0x62,0x5c,0x57,0x4f,0x47,0x3d,0x36,0x31,0x2d,0x2d,0x32,0x3b,0x47,0x54,0x65,
0x70,0x74,0x73,0x69,0x60,0x5b,0x5c,0x5d,0x59,0x50,0x42,0x37,0x35,0x41,0x59,0x74,
0x89,0x8f,0x85,0x73,0x62,0x5a,0x5b,0x65,0x73,0x7f,0x80,0x7a,0x70,0x65,0x61,0x60,
0x65,0x6f,0x77,0x7b,0x77,0x70,0x68,0x62,0x5e,0x5a,0x59,0x57,0x4f,0x40,0x34,0x2b,
0x28,0x2d,0x36,0x3f,0x4a,0x54,0x5e,0x64,0x6f,0x7a,0x86,0x91,0x96,0x94,0x8e,0x83,
0x74,0x64,0x54,0x48,0x41,0x3b,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x34,
0x30,0x30,0x33,0x35,0x37,0x37,0x39,0x38,0x35,0x33,0x35,0x38,0x39,0x34,0x30,0x2c,
0x2d,0x37,0x49,0x5e,0x73,0x7d,0x7d,0x79,0x70,0x66,0x61,0x59,0x50,0x45,0x39,0x31,
0x30,0x38,0x4a,0x61,0x79,0x89,0x92,0x96,0x97,0x96,0x98,0x9c,0xa0,0xa1,0x9e,0x99,
0x99,0x99,0x9a,0x9a,0x9c,0x9e,0x9f,0x9c,0x96,0x8a,0x7f,0x71,0x61,0x55,0x4c,0x46,
0x41,0x3b,0x33,0x2e,0x30,0x34,0x39,0x3c,0x3c,0x38,0x35,0x31,0x32,0x39,0x47,0x58,
0x68,0x76,0x82,0x8e,0x96,0x9a,0x9d,0x99,0x90,0x7d,0x68,0x5a,0x57,0x5d,0x68,0x74,
0x7c,0x7c,0x74,0x69,0x5e,0x5a,0x60,0x6a,0x71,0x76,0x77,0x73,0x6d,0x67,0x62,0x61,
0x5e,0x58,0x4b,0x44,0x38,0x2f,0x2c,0x2d,0x33,0x3d,0x47,0x50,0x5a,0x64,0x6f,0x79,
0x81,0x89,0x92,0x97,0x94,0x89,0x7a,0x67,0x54,0x44,0x3b,0x38,0x3b,0x3d,0x3c,0x39,
0x34,0x32,0x35,0x3f,0x50,0x64,0x74,0x7b,0x79,0x70,0x68,0x61,0x5e,0x59,0x52,0x48,
0x3c,0x32,0x33,0x40,0x57,0x6d,0x7c,0x80,0x79,0x6c,0x5c,0x4e,0x4b,0x4a,0x46,0x40,
0x37,0x2f,0x33,0x36,0x3c,0x43,0x45,0x42,0x3a,0x33,0x30,0x38,0x44,0x52,0x5f,0x6d,
0x79,0x83,0x8f,0x98,0x9f,0xa4,0xa6,0xa6,0xa4,0xa4,0xa4,0xa4,0xa0,0x9e,0x9e,0xa1,
0xa1,0x9f,0x9e,0x9e,0x9e,0x9e,0x9e,0x9d,0x9e,0x9c,0x9b,0x9b,0x9a,0x97,0x8f,0x80,
0x6e,0x5e,0x56,0x55,0x59,0x67,0x74,0x7b,0x7b,0x74,0x69,0x64,0x64,0x67,0x71,0x7b,
0x80,0x7e,0x76,0x6d,0x68,0x65,0x66,0x67,0x67,0x68,0x6a,0x6d,0x70,0x78,0x86,0x93,
0x9e,0xa6,0xa8,0xa6,0x9e,0x92,0x83,0x76,0x6c,0x63,0x59,0x50,0x4a,0x45,0x3f,0x39,
0x39,0x46,0x54,0x65,0x77,0x85,0x90,0x94,0x95,0x95,0x99,0x9f,0xa2,0x9f,0x9a,0x8b,
0x7a,0x6b,0x5e,0x54,0x4d,0x47,0x41,0x3c,0x36,0x32,0x33,0x36,0x39,0x3c,0x3d,0x3d,
0x39,0x34,0x31,0x32,0x34,0x34,0x33,0x34,0x34,0x33,0x31,0x30,0x31,0x33,0x33,0x32,
0x32,0x34,0x37,0x36,0x3b,0x39,0x39,0x3b,0x3b,0x39,0x3b,0x3b,0x3b,0x39,0x38,0x39,
// Line 18
0x3a,0x3a,0x3b,0x38,0x36,0x36,0x38,0x39,0x38,0x36,0x34,0x37,0x38,0x37,0x37,0x37,
0x37,0x37,0x38,0x38,0x39,0x39,0x38,0x36,0x33,0x32,0x36,0x3c,0x40,0x3c,0x38,0x32,
0x2f,0x30,0x36,0x3f,0x47,0x45,0x3d,0x30,0x29,0x28,0x32,0x3f,0x49,0x48,0x40,0x2f,
0x23,0x25,0x31,0x40,0x4c,0x4b,0x3e,0x2d,0x22,0x22,0x2e,0x3f,0x49,0x49,0x3e,0x2d,
0x21,0x23,0x2e,0x3f,0x4c,0x4c,0x41,0x30,0x25,0x24,0x31,0x41,0x4b,0x4b,0x40,0x31,
0x27,0x27,0x32,0x40,0x4b,0x4a,0x3e,0x2e,0x22,0x23,0x30,0x3e,0x48,0x4b,0x43,0x34,
0x28,0x28,0x32,0x41,0x4c,0x4c,0x40,0x31,0x23,0x22,0x2e,0x3f,0x4a,0x4c,0x41,0x30,
0x26,0x26,0x32,0x41,0x4c,0x4b,0x3f,0x2e,0x22,0x21,0x2d,0x3d,0x48,0x48,0x3d,0x2e,
0x24,0x26,0x32,0x45,0x4f,0x4e,0x41,0x30,0x24,0x23,0x2e,0x3f,0x48,0x4a,0x3f,0x30,
0x28,0x2d,0x3d,0x53,0x61,0x61,0x56,0x47,0x3d,0x3a,0x4a,0x5a,0x65,0x63,0x55,0x42,
0x36,0x36,0x43,0x55,0x61,0x60,0x54,0x43,0x38,0x3a,0x45,0x55,0x62,0x61,0x53,0x43,
0x39,0x3a,0x47,0x57,0x63,0x61,0x55,0x46,0x3b,0x3c,0x48,0x59,0x66,0x65,0x57,0x43,
0x39,0x39,0x45,0x56,0x63,0x61,0x57,0x45,0x3a,0x3e,0x4c,0x5b,0x65,0x61,0x54,0x45,
0x3a,0x3c,0x48,0x58,0x61,0x5f,0x54,0x46,0x3d,0x3e,0x48,0x55,0x5e,0x5b,0x51,0x43,
0x3a,0x3b,0x48,0x58,0x63,0x65,0x5c,0x50,0x4a,0x4f,0x5b,0x6b,0x75,0x76,0x6c,0x5e,
0x54,0x55,0x64,0x71,0x7a,0x7b,0x70,0x62,0x54,0x56,0x60,0x70,0x7a,0x78,0x6b,0x5e,
0x50,0x4d,0x5a,0x6b,0x75,0x75,0x6a,0x5c,0x52,0x52,0x5e,0x6e,0x79,0x78,0x6c,0x5b,
0x51,0x53,0x5f,0x6e,0x77,0x77,0x6c,0x5e,0x53,0x52,0x5f,0x6f,0x7a,0x79,0x6d,0x5e,
0x53,0x55,0x60,0x70,0x79,0x7a,0x6e,0x5c,0x50,0x4f,0x5a,0x6e,0x77,0x75,0x6a,0x5a,
0x4f,0x4f,0x5a,0x6a,0x77,0x77,0x6d,0x5d,0x52,0x53,0x5f,0x71,0x81,0x84,0x7c,0x6d,
0x62,0x63,0x70,0x81,0x8d,0x8d,0x81,0x70,0x65,0x65,0x70,0x80,0x8c,0x8e,0x84,0x74,
0x68,0x69,0x75,0x84,0x8e,0x8d,0x81,0x70,0x65,0x66,0x74,0x85,0x90,0x90,0x85,0x74,
0x67,0x65,0x70,0x80,0x8d,0x8a,0x7d,0x6d,0x65,0x67,0x73,0x83,0x8d,0x8e,0x83,0x72,
0x65,0x6a,0x75,0x83,0x8f,0x90,0x85,0x78,0x6b,0x69,0x74,0x83,0x8e,0x8e,0x82,0x74,
0x6b,0x6b,0x75,0x84,0x8f,0x8f,0x84,0x74,0x68,0x68,0x75,0x85,0x8f,0x90,0x88,0x7a,
0x6f,0x6e,0x7c,0x8e,0x9b,0x9c,0x94,0x86,0x7d,0x7d,0x8b,0x9a,0xa4,0xa5,0x98,0x86,
0x7b,0x7c,0x89,0x96,0xa0,0x9f,0x95,0x89,0x7f,0x81,0x8c,0x9b,0xa5,0xa4,0x98,0x8a,
0x81,0x82,0x8c,0x9a,0xa3,0xa3,0x98,0x89,0x7d,0x80,0x8d,0x9d,0xa6,0xa4,0x98,0x88,
0x7e,0x7d,0x89,0x99,0xa4,0xa2,0x97,0x87,0x7f,0x81,0x8e,0x9b,0xa5,0xa4,0x98,0x86,
0x7d,0x7e,0x89,0x99,0xa5,0xa3,0x98,0x88,0x7c,0x7e,0x8a,0x99,0xa4,0xa2,0x97,0x89,
0x7e,0x7e,0x8a,0x9a,0xa6,0xa6,0x9d,0x8f,0x87,0x8a,0x96,0xa8,0xb5,0xb6,0xad,0x9d,
0x90,0x90,0x9d,0xad,0xb9,0xb7,0xae,0x9f,0x96,0x96,0xa1,0xaf,0xbc,0xba,0xac,0x9c,
0x92,0x93,0x9f,0xad,0xb4,0xb5,0xac,0x9e,0x93,0x93,0x9f,0xad,0xb7,0xb6,0xab,0x9d,
0x92,0x91,0x9e,0xae,0xb8,0xb7,0xad,0x9e,0x95,0x97,0xa3,0xb0,0xb9,0xb7,0xab,0x99,
0x8f,0x91,0x9e,0xad,0xb6,0xb6,0xab,0x9f,0x97,0x98,0xa1,0xaf,0xb8,0xb5,0xa5,0x98,
0x8f,0x93,0x9d,0xa9,0xb1,0xb1,0xaa,0x9e,0x97,0x97,0x9e,0xa8,0xae,0xad,0xaa,0xa3,
0xa0,0xa1,0xa6,0xaa,0xad,0xad,0xaa,0xa5,0xa1,0x9f,0x9f,0xa3,0xa4,0xa5,0xa6,0xa5,
0xa3,0xa3,0xa5,0xa8,0xa7,0xa5,0xa5,0xa5,0xa6,0xa5,0xa3,0xa5,0xa5,0xa5,0xa5,0xa3,
0xa2,0xa3,0xa5,0xa5,0xa4,0xa4,0xa6,0xa6,0xa8,0xa8,0xa7,0xa8,0xa8,0xa6,0xa5,0xa3,
0xa1,0xa1,0xa2,0xa1,0x9f,0x9c,0x9d,0xa1,0xa3,0xa4,0xa3,0xa5,0xa7,0xaa,0xaa,0xa8,
0xa7,0xa8,0xa9,0xa7,0xa6,0xa5,0xa6,0xa6,0xa6,0xa4,0xa3,0xa3,0xa4,0xa3,0xa0,0x9c,
0x98,0x90,0x87,0x7a,0x6f,0x63,0x57,0x4e,0x46,0x3f,0x3c,0x38,0x36,0x36,0x36,0x38,
0x3a,0x3a,0x3c,0x3a,0x39,0x35,0x34,0x34,0x34,0x35,0x36,0x36,0x37,0x36,0x35,0x34,
0x37,0x3a,0x3f,0x3e,0x3b,0x38,0x38,0x3a,0x3a,0x3a,0x3d,0x3d,0x3a,0x38,0x37,0x37,
0x3a,0x3a,0x39,0x38,0x37,0x37,0x35,0x38,0x37,0x37,0x39,0x37,0x36,0x36,0x37,0x37,
0x37,0x36,0x37,0x3a,0x3c,0x39,0x39,0x39,0x3a,0x36,0x36,0x36,0x37,0x38,0x38,0x37,
0x39,0x38,0x37,0x37,0x37,0x38,0x3a,0x37,0x35,0x35,0x36,0x37,0x37,0x36,0x36,0x37,
0x38,0x38,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x3a,0x3a,0x38,0x38,0x38,0x3a,0x38,
0x39,0x38,0x38,0x38,0x35,0x31,0x33,0x3a,0x4a,0x5f,0x78,0x8f,0x9f,0xa3,0x9d,0x92,
0x83,0x75,0x65,0x5b,0x4e,0x40,0x35,0x2a,0x26,0x2c,0x34,0x3a,0x40,0x3e,0x3a,0x36,
0x32,0x30,0x33,0x37,0x3c,0x3c,0x3a,0x37,0x37,0x39,0x3a,0x37,0x35,0x35,0x36,0x38,
0x38,0x38,0x3a,0x3a,0x39,0x39,0x3a,0x3a,0x3b,0x39,0x36,0x34,0x35,0x37,0x39,0x3d,
0x3d,0x39,0x35,0x34,0x37,0x40,0x48,0x4c,0x4b,0x45,0x3e,0x37,0x3d,0x4a,0x5c,0x6a,
0x68,0x57,0x47,0x3f,0x45,0x5a,0x72,0x82,0x83,0x70,0x56,0x47,0x4e,0x6a,0x8b,0x9d,
0x98,0x7d,0x5f,0x4c,0x53,0x71,0x94,0xa6,0xa0,0x82,0x5e,0x49,0x50,0x6e,0x91,0xa3,
0x9b,0x7e,0x5c,0x48,0x4f,0x6a,0x86,0x93,0x8a,0x6e,0x53,0x43,0x49,0x5b,0x70,0x76,
0x6e,0x5b,0x48,0x3e,0x41,0x4c,0x54,0x56,0x52,0x47,0x3b,0x38,0x38,0x3c,0x3f,0x40,
0x3f,0x3e,0x3d,0x3b,0x3a,0x39,0x39,0x38,0x37,0x34,0x36,0x38,0x39,0x37,0x36,0x37,
0x38,0x38,0x38,0x38,0x3a,0x38,0x36,0x35,0x36,0x38,0x3a,0x3a,0x3a,0x3a,0x3d,0x3d,
0x3a,0x36,0x35,0x36,0x37,0x35,0x36,0x38,0x38,0x38,0x38,0x37,0x38,0x38,0x39,0x36,
0x34,0x35,0x36,0x36,0x39,0x39,0x3a,0x3a,0x3a,0x38,0x3a,0x3a,0x3a,0x38,0x37,0x36,
0x35,0x35,0x35,0x38,0x3a,0x3a,0x38,0x36,0x34,0x35,0x36,0x36,0x37,0x38,0x37,0x35,
0x34,0x35,0x37,0x39,0x39,0x38,0x38,0x38,0x3a,0x3c,0x42,0x4a,0x55,0x64,0x74,0x81,
0x8f,0x9c,0xa6,0xaf,0xb6,0xbb,0xbf,0xc3,0xc2,0xc0,0xbd,0xbb,0xb9,0xb8,0xb9,0xb9,
0xbc,0xbd,0xbc,0xbc,0xbc,0xbd,0xbe,0xbf,0xbe,0xbd,0xbd,0xbb,0xbb,0xbb,0xbc,0xbb,
0xb9,0xb8,0xb8,0xba,0xbb,0xba,0xbc,0xba,0xba,0xbb,0xbb,0xbc,0xbc,0xbc,0xbc,0xbd,
0xbd,0xbd,0xbc,0xbd,0xb9,0xb6,0xb8,0xb8,0xb9,0xbb,0xbc,0xbc,0xbd,0xbd,0xbd,0xbe,
0xbf,0xbd,0xbd,0xbd,0xbe,0xbb,0xba,0xbb,0xbc,0xbd,0xbd,0xbc,0xbb,0xbb,0xbc,0xbd,
0xbc,0xba,0xba,0xb9,0xb9,0xb9,0xbd,0xbf,0xc0,0xbe,0xbc,0xba,0xbc,0xbd,0xbd,0xbc,
0xbc,0xba,0xb9,0xb9,0xba,0xbc,0xbd,0xbd,0xbe,0xbd,0xbd,0xbc,0xbc,0xbc,0xbd,0xbe,
0xbe,0xbc,0xbc,0xbc,0xbc,0xbc,0xbc,0xbd,0xbe,0xbe,0xbc,0xba,0xba,0xbb,0xbc,0xbd,
0xbc,0xbb,0xbc,0xbd,0xbb,0xba,0xbc,0xbd,0xbe,0xbd,0xbd,0xbd,0xbe,0xbc,0xbc,0xbc,
0xbc,0xbb,0xbc,0xba,0xba,0xbc,0xbc,0xbc,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbc,0xbc,
0xbb,0xba,0xbc,0xbd,0xc0,0xbf,0xbe,0xbd,0xbd,0xbd,0xbc,0xbb,0xba,0xba,0xbc,0xbd,
0xbd,0xbb,0xba,0xba,0xbb,0xbc,0xbd,0xbe,0xbd,0xba,0xb7,0xb9,0xba,0xbb,0xbe,0xbf,
0xbf,0xbe,0xbd,0xbe,0xc1,0xc1,0xc0,0xbe,0xbd,0xbe,0xbe,0xbe,0xbd,0xbc,0xbd,0xbc,
0xba,0xb8,0xb9,0xba,0xba,0xb8,0xb8,0xb8,0xb9,0xb9,0xb9,0xbb,0xbd,0xbd,0xbe,0xbd,
0xbc,0xbe,0xbe,0xbd,0xbc,0xbd,0xbf,0xc0,0xbf,0xbd,0xbc,0xbd,0xbc,0xbc,0xbd,0xbd,
0xbd,0xbc,0xb9,0xb8,0xba,0xbb,0xbc,0xba,0xb9,0xb8,0xb9,0xba,0xbc,0xbc,0xbe,0xbc,
0xba,0xb9,0xb9,0xbb,0xbc,0xbc,0xba,0xbc,0xbc,0xbc,0xbb,0xbd,0xbd,0xbe,0xbe,0xbd,
0xbc,0xbc,0xba,0xb8,0xb8,0xbb,0xbc,0xbe,0xbd,0xbc,0xbd,0xbd,0xbd,0xbe,0xbe,0xbe,
0xbf,0xbe,0xbf,0xbe,0xbe,0xbe,0xbf,0xbf,0xbe,0xbd,0xbd,0xbc,0xb9,0xb9,0xb9,0xb9,
0xba,0xb9,0xbb,0xbc,0xbc,0xbb,0xba,0xbb,0xbc,0xbb,0xba,0xbc,0xbd,0xbd,0xbc,0xbd,
0xbf,0xc0,0xc0,0xbf,0xbe,0xbe,0xbf,0xbf,0xbf,0xbf,0xc0,0xc0,0xbf,0xbe,0xbd,0xbe,
0xbe,0xbc,0xba,0xbb,0xbc,0xbc,0xbc,0xbb,0xbc,0xbe,0xbf,0xc0,0xbf,0xbe,0xbe,0xbe,
0xbd,0xbc,0xbd,0xbe,0xbd,0xbc,0xbe,0xbe,0xbd,0xbe,0xbe,0xbe,0xc0,0xbe,0xbe,0xbd,
0xbd,0xbc,0xba,0xba,0xbb,0xba,0xbc,0xba,0xb9,0xbc,0xbe,0xc0,0xc0,0xbe,0xbf,0xc0,
0xbf,0xbd,0xbd,0xbe,0xbe,0xbe,0xbd,0xbe,0xbe,0xbd,0xbc,0xba,0xbc,0xbc,0xbc,0xbb,
0xba,0xba,0xba,0xba,0xbb,0xbc,0xbc,0xbd,0xbd,0xb9,0xb8,0xba,0xbc,0xbc,0xbc,0xbd,
0xbe,0xbd,0xba,0xb8,0xb8,0xbc,0xbd,0xbd,0xbd,0xbd,0xbd,0xbe,0xbe,0xbf,0xc1,0xc0,
0xbe,0xbc,0xbe,0xbe,0xbd,0xbe,0xbd,0xbd,0xbe,0xbd,0xbc,0xbd,0xbc,0xba,0xbb,0xbb,
0xbc,0xbb,0xbc,0xbc,0xb9,0xba,0xbc,0xbd,0xbd,0xbc,0xbd,0xbe,0xbe,0xbd,0xbd,0xbe,
0xbd,0xbb,0xb9,0xb9,0xbb,0xbb,0xba,0xbb,0xbd,0xbd,0xbb,0xba,0xb9,0xb8,0xbc,0xbd,
0xbe,0xbe,0xbe,0xbe,0xbd,0xbc,0xbb,0xbc,0xbe,0xbd,0xbc,0xbc,0xbd,0xbe,0xc0,0xbe,
0xbb,0xbd,0xbe,0xbe,0xbe,0xbc,0xba,0xb8,0xb6,0xb4,0xb1,0xae,0xa6,0x9b,0x8e,0x7f,
0x71,0x65,0x5a,0x50,0x4a,0x44,0x3f,0x39,0x35,0x33,0x35,0x37,0x37,0x38,0x3a,0x39,
// Line 19
0x36,0x34,0x35,0x36,0x38,0x38,0x38,0x36,0x35,0x36,0x38,0x3a,0x39,0x36,0x35,0x35,
0x34,0x33,0x35,0x38,0x3b,0x3d,0x3f,0x43,0x49,0x4e,0x51,0x54,0x58,0x5d,0x60,0x60,
0x61,0x62,0x64,0x64,0x63,0x63,0x64,0x64,0x63,0x60,0x60,0x60,0x60,0x5e,0x60,0x62,
0x64,0x62,0x62,0x61,0x60,0x62,0x60,0x5e,0x5e,0x5e,0x5e,0x5e,0x5e,0x60,0x64,0x65,
0x63,0x62,0x62,0x62,0x61,0x62,0x61,0x60,0x62,0x62,0x61,0x60,0x61,0x61,0x61,0x5f,
0x5e,0x5e,0x5f,0x5f,0x60,0x62,0x62,0x60,0x5f,0x60,0x60,0x62,0x62,0x60,0x61,0x61,
0x60,0x60,0x60,0x62,0x63,0x64,0x62,0x60,0x5f,0x61,0x61,0x62,0x61,0x60,0x61,0x61,
0x5e,0x5c,0x5d,0x5f,0x5f,0x5f,0x5e,0x5d,0x5c,0x5b,0x5b,0x5d,0x5f,0x61,0x62,0x60,
0x5d,0x5e,0x5f,0x60,0x62,0x62,0x62,0x62,0x5f,0x5d,0x5d,0x5f,0x5f,0x61,0x62,0x62,
0x5e,0x5e,0x5d,0x5c,0x5d,0x5d,0x5d,0x60,0x5d,0x5d,0x5e,0x5d,0x5d,0x5e,0x5e,0x5d,
0x5c,0x5b,0x5d,0x5e,0x5d,0x5c,0x5c,0x5d,0x5d,0x5c,0x5a,0x5a,0x5a,0x5a,0x59,0x58,
0x58,0x57,0x56,0x55,0x55,0x57,0x58,0x57,0x55,0x54,0x52,0x50,0x50,0x4f,0x4f,0x50,
0x52,0x52,0x50,0x50,0x4f,0x4f,0x50,0x4e,0x4d,0x4a,0x49,0x44,0x41,0x41,0x43,0x42,
0x40,0x3e,0x3c,0x3c,0x3b,0x3a,0x3b,0x3b,0x3b,0x3a,0x37,0x35,0x33,0x32,0x31,0x31,
0x31,0x32,0x33,0x31,0x30,0x31,0x34,0x32,0x30,0x2f,0x2f,0x2d,0x2d,0x2c,0x2f,0x2e,
0x31,0x31,0x32,0x36,0x39,0x3a,0x3e,0x41,0x43,0x46,0x49,0x4b,0x50,0x55,0x58,0x5c,
0x5e,0x60,0x63,0x66,0x69,0x6d,0x74,0x7d,0x82,0x83,0x86,0x8a,0x8f,0x91,0x92,0x94,
0x96,0x97,0x98,0x98,0x99,0x9a,0x9a,0x96,0x92,0x8f,0x8e,0x8b,0x88,0x82,0x7c,0x78,
0x71,0x69,0x64,0x60,0x5b,0x57,0x50,0x49,0x43,0x3e,0x3a,0x37,0x35,0x31,0x2f,0x2e,
0x2d,0x2c,0x2f,0x30,0x31,0x36,0x3b,0x3f,0x44,0x4a,0x52,0x5a,0x5e,0x62,0x6a,0x73,
0x7c,0x83,0x89,0x8e,0x92,0x95,0x97,0x98,0x98,0x95,0x8f,0x8b,0x84,0x7c,0x76,0x6f,
0x66,0x5d,0x54,0x4c,0x42,0x3d,0x38,0x35,0x34,0x30,0x2d,0x2e,0x2f,0x30,0x34,0x39,
0x41,0x47,0x51,0x58,0x60,0x6b,0x78,0x85,0x8e,0x93,0x95,0x97,0x97,0x93,0x8e,0x87,
0x7f,0x76,0x6b,0x5e,0x54,0x4c,0x45,0x3e,0x39,0x34,0x2f,0x2e,0x2f,0x32,0x37,0x3c,
0x43,0x4b,0x54,0x5e,0x6b,0x78,0x82,0x87,0x8d,0x8d,0x8b,0x89,0x86,0x7f,0x79,0x6b,
0x5e,0x54,0x4a,0x40,0x3b,0x37,0x35,0x35,0x34,0x36,0x3b,0x43,0x4d,0x59,0x66,0x74,
0x80,0x89,0x8d,0x8e,0x8d,0x8a,0x82,0x77,0x6a,0x5e,0x53,0x48,0x3f,0x39,0x36,0x33,
0x32,0x37,0x3e,0x47,0x51,0x5c,0x69,0x79,0x84,0x8b,0x90,0x90,0x8b,0x82,0x77,0x6b,
0x5d,0x50,0x44,0x3a,0x33,0x30,0x31,0x36,0x3e,0x48,0x56,0x64,0x73,0x81,0x89,0x8c,
0x8d,0x89,0x82,0x75,0x69,0x5a,0x4d,0x42,0x38,0x31,0x2e,0x30,0x36,0x43,0x51,0x5f,
0x6f,0x7b,0x84,0x8b,0x8b,0x85,0x79,0x72,0x66,0x57,0x4a,0x3e,0x34,0x30,0x2f,0x36,
0x44,0x56,0x69,0x7b,0x85,0x89,0x88,0x82,0x7a,0x70,0x64,0x54,0x46,0x3a,0x31,0x2e,
0x31,0x3b,0x4c,0x61,0x73,0x80,0x87,0x88,0x84,0x7f,0x74,0x67,0x5a,0x4e,0x42,0x39,
0x36,0x3b,0x46,0x57,0x68,0x77,0x84,0x8a,0x87,0x80,0x74,0x67,0x5a,0x4c,0x40,0x36,
0x31,0x32,0x3d,0x50,0x65,0x77,0x84,0x88,0x85,0x7c,0x71,0x64,0x57,0x49,0x3f,0x39,
0x38,0x3f,0x4d,0x62,0x74,0x83,0x88,0x85,0x7a,0x71,0x62,0x51,0x45,0x3d,0x3a,0x3c,
0x44,0x51,0x64,0x75,0x7f,0x84,0x7f,0x73,0x64,0x55,0x49,0x40,0x39,0x37,0x3f,0x4e,
0x60,0x71,0x81,0x88,0x87,0x7e,0x70,0x5e,0x4d,0x42,0x3f,0x41,0x48,0x53,0x62,0x71,
0x7c,0x7e,0x7c,0x70,0x61,0x52,0x46,0x3e,0x3f,0x44,0x50,0x62,0x71,0x7a,0x7e,0x7c,
0x76,0x68,0x59,0x48,0x3d,0x3f,0x46,0x50,0x5d,0x6b,0x77,0x7d,0x79,0x6c,0x5d,0x51,
0x49,0x45,0x49,0x52,0x5d,0x6d,0x75,0x78,0x78,0x72,0x67,0x5a,0x4b,0x41,0x44,0x4b,
0x57,0x65,0x71,0x76,0x76,0x6f,0x66,0x5c,0x53,0x4d,0x4d,0x56,0x5e,0x67,0x6d,0x6f,
0x6b,0x64,0x5a,0x4e,0x47,0x48,0x4e,0x57,0x60,0x6a,0x71,0x74,0x6d,0x64,0x5d,0x58,
0x54,0x54,0x58,0x60,0x69,0x6d,0x6c,0x66,0x5c,0x54,0x50,0x4f,0x52,0x59,0x62,0x6a,
0x6d,0x6d,0x6a,0x65,0x5e,0x57,0x55,0x59,0x5e,0x62,0x66,0x67,0x65,0x61,0x5a,0x55,
0x54,0x5a,0x5e,0x61,0x65,0x67,0x66,0x62,0x5a,0x54,0x55,0x5a,0x5e,0x62,0x65,0x66,
0x62,0x5c,0x58,0x56,0x5a,0x5e,0x64,0x69,0x6a,0x69,0x63,0x5b,0x55,0x53,0x55,0x5b,
0x62,0x67,0x6b,0x6a,0x63,0x59,0x53,0x51,0x55,0x5c,0x67,0x6f,0x71,0x6b,0x5d,0x4d,
0x48,0x49,0x53,0x62,0x6e,0x74,0x71,0x64,0x52,0x46,0x44,0x4d,0x5d,0x6e,0x7a,0x79,
0x6d,0x58,0x46,0x3f,0x45,0x55,0x69,0x77,0x7b,0x72,0x60,0x4c,0x41,0x43,0x51,0x62,
0x73,0x7c,0x78,0x66,0x4d,0x3c,0x3c,0x4c,0x64,0x79,0x82,0x7a,0x66,0x4d,0x3b,0x38,
0x47,0x60,0x77,0x81,0x78,0x62,0x4b,0x3c,0x3c,0x4f,0x6b,0x80,0x86,0x79,0x5f,0x45,
0x37,0x3c,0x54,0x71,0x84,0x84,0x72,0x55,0x3f,0x3a,0x48,0x62,0x7b,0x86,0x7d,0x5f,
0x41,0x31,0x3a,0x55,0x71,0x83,0x86,0x71,0x53,0x3b,0x39,0x4d,0x6c,0x83,0x88,0x79,
0x5b,0x40,0x35,0x44,0x5e,0x79,0x84,0x78,0x59,0x41,0x34,0x3f,0x5c,0x79,0x88,0x7f,
0x65,0x45,0x37,0x41,0x5d,0x78,0x84,0x79,0x62,0x45,0x36,0x3f,0x5c,0x79,0x84,0x79,
0x5e,0x44,0x3c,0x48,0x61,0x79,0x82,0x73,0x57,0x3e,0x37,0x4a,0x66,0x7c,0x7c,0x6b,
0x4d,0x3a,0x3d,0x53,0x6f,0x84,0x7d,0x64,0x49,0x3c,0x48,0x5f,0x79,0x82,0x77,0x5c,
0x44,0x3f,0x50,0x6b,0x7c,0x7a,0x67,0x50,0x44,0x4b,0x60,0x76,0x7e,0x74,0x5e,0x4a,
0x48,0x5a,0x71,0x7d,0x76,0x63,0x4e,0x46,0x52,0x67,0x77,0x79,0x6a,0x54,0x48,0x4e,
0x62,0x73,0x79,0x6d,0x5a,0x4b,0x4b,0x58,0x6a,0x73,0x6e,0x60,0x50,0x4d,0x5a,0x6c,
0x76,0x73,0x66,0x57,0x51,0x56,0x64,0x6f,0x6e,0x64,0x57,0x4f,0x53,0x5f,0x6d,0x6e,
0x67,0x5a,0x53,0x54,0x5e,0x68,0x6b,0x66,0x5b,0x54,0x57,0x61,0x6a,0x6b,0x68,0x60,
0x5b,0x5d,0x64,0x6b,0x6d,0x69,0x60,0x5c,0x5d,0x64,0x6a,0x6a,0x65,0x5f,0x5d,0x5d,
0x62,0x68,0x68,0x62,0x5d,0x59,0x5b,0x61,0x65,0x64,0x62,0x5d,0x5a,0x5d,0x62,0x67,
0x6a,0x67,0x61,0x5d,0x5e,0x63,0x67,0x68,0x65,0x5f,0x5e,0x60,0x62,0x66,0x67,0x67,
0x62,0x5e,0x5c,0x5e,0x61,0x63,0x5d,0x5d,0x5b,0x5b,0x5e,0x62,0x62,0x65,0x62,0x5e,
0x5f,0x5f,0x61,0x62,0x62,0x60,0x61,0x62,0x64,0x64,0x62,0x63,0x62,0x62,0x61,0x60,
0x62,0x60,0x5d,0x5d,0x5e,0x5f,0x61,0x5f,0x5e,0x5e,0x5e,0x5e,0x5e,0x5f,0x5f,0x5e,
0x5d,0x5c,0x5c,0x5e,0x60,0x61,0x63,0x63,0x62,0x64,0x63,0x62,0x62,0x63,0x63,0x61,
0x60,0x60,0x61,0x61,0x60,0x60,0x63,0x64,0x62,0x61,0x5f,0x60,0x60,0x5f,0x5e,0x60,
0x62,0x62,0x61,0x5f,0x5e,0x5f,0x62,0x62,0x62,0x62,0x63,0x62,0x62,0x61,0x62,0x62,
0x61,0x60,0x60,0x60,0x5f,0x5e,0x5e,0x5f,0x60,0x62,0x61,0x5f,0x60,0x5f,0x5f,0x62,
0x63,0x65,0x67,0x64,0x60,0x60,0x63,0x65,0x64,0x62,0x60,0x60,0x5f,0x5e,0x5d,0x5d,
0x5e,0x5d,0x5c,0x5d,0x5e,0x5e,0x5e,0x5f,0x61,0x61,0x62,0x62,0x62,0x61,0x61,0x60,
0x5e,0x5c,0x5c,0x5c,0x5d,0x5e,0x5f,0x60,0x5f,0x5e,0x5d,0x5e,0x62,0x63,0x62,0x63,
0x61,0x5e,0x5e,0x5f,0x5e,0x5f,0x60,0x60,0x5f,0x5e,0x60,0x62,0x62,0x60,0x61,0x62,
0x63,0x62,0x61,0x61,0x61,0x60,0x60,0x5f,0x5f,0x60,0x62,0x62,0x62,0x60,0x5f,0x5f,
0x5e,0x5e,0x61,0x64,0x65,0x63,0x60,0x60,0x61,0x62,0x62,0x66,0x64,0x62,0x60,0x5e,
0x5e,0x5f,0x62,0x63,0x63,0x63,0x64,0x63,0x61,0x61,0x62,0x63,0x62,0x5e,0x5d,0x5c,
0x5b,0x5c,0x5b,0x5d,0x5e,0x5e,0x5e,0x5d,0x5e,0x60,0x60,0x60,0x5f,0x5f,0x5f,0x5d,
0x5d,0x5f,0x61,0x61,0x61,0x60,0x62,0x62,0x62,0x60,0x61,0x62,0x62,0x62,0x62,0x61,
0x60,0x62,0x62,0x60,0x60,0x60,0x60,0x60,0x5f,0x5f,0x60,0x60,0x5e,0x5d,0x5f,0x62,
0x62,0x60,0x5f,0x5e,0x5f,0x5f,0x5f,0x5f,0x5f,0x5e,0x5e,0x5c,0x5d,0x5f,0x61,0x62,
0x61,0x62,0x63,0x64,0x64,0x64,0x65,0x67,0x67,0x66,0x66,0x65,0x64,0x63,0x60,0x5f,
0x5d,0x60,0x61,0x60,0x5f,0x5d,0x5d,0x5e,0x5d,0x5d,0x5f,0x5e,0x5c,0x5d,0x5e,0x61,
0x63,0x64,0x65,0x65,0x62,0x5f,0x5f,0x60,0x62,0x61,0x5f,0x5c,0x5b,0x5c,0x5d,0x5d,
0x5f,0x60,0x60,0x5f,0x5f,0x62,0x63,0x65,0x64,0x64,0x64,0x63,0x62,0x60,0x62,0x62,
0x62,0x61,0x5e,0x60,0x5e,0x5f,0x5e,0x5e,0x5e,0x5f,0x5f,0x5e,0x5d,0x60,0x62,0x60,
0x5f,0x5a,0x54,0x4e,0x48,0x43,0x3f,0x3c,0x39,0x37,0x35,0x34,0x34,0x34,0x34,0x33,
0x33,0x34,0x36,0x36,0x35,0x34,0x37,0x37,0x36,0x36,0x37,0x38,0x37,0x35,0x35,0x34,
0x35,0x34,0x33,0x33,0x33,0x34,0x35,0x35,0x33,0x35,0x36,0x36,0x36,0x36,0x35,0x36,
0x36,0x36,0x35,0x34,0x33,0x32,0x33,0x34,0x34,0x33,0x34,0x32,0x34,0x34,0x34,0x34,
0x36,0x36,0x36,0x35,0x35,0x35,0x36,0x37,0x36,0x36,0x37,0x38,0x37,0x34,0x34,0x38,
0x39,0x37,0x37,0x35,0x34,0x35,0x36,0x36,0x36,0x36,0x37,0x37,0x37,0x37,0x35,0x35,
0x34,0x33,0x34,0x35,0x35,0x36,0x35,0x34,0x35,0x37,0x37,0x37,0x37,0x35,0x34,0x32,
// Line 20
0x39,0x39,0x3a,0x39,0x37,0x36,0x37,0x38,0x39,0x3a,0x3a,0x37,0x37,0x39,0x3a,0x39,
0x37,0x37,0x38,0x37,0x35,0x34,0x33,0x32,0x32,0x34,0x36,0x3d,0x45,0x4e,0x58,0x65,
0x72,0x83,0x94,0xa2,0xac,0xb3,0xb9,0xbd,0xbf,0xc1,0xc2,0xc2,0xc2,0xc1,0xc0,0xc1,
0xbd,0xbb,0xbc,0xbe,0xbe,0xbd,0xbc,0xbb,0xbb,0xbc,0xbc,0xb9,0xbf,0xbe,0xbf,0xc0,
0xc0,0xbe,0xbd,0xbc,0xbb,0xbb,0xbc,0xbd,0xbd,0xbd,0xbc,0xbd,0xbe,0xbf,0xc1,0xc2,
0xc3,0xc1,0xc0,0xbf,0xbf,0xc0,0xbf,0xbd,0xbf,0xbe,0xbd,0xbd,0xbb,0xbb,0xbc,0xbd,
0xbd,0xbb,0xbc,0xbd,0xbf,0xc0,0xc0,0xc0,0xc3,0xbf,0xbd,0xbd,0xbd,0xbd,0xbc,0xbb,
0xb9,0xba,0xbb,0xbc,0xbc,0xbd,0xbd,0xbe,0xbf,0xbd,0xbd,0xbd,0xbc,0xba,0xba,0xbb,
0xbb,0xbb,0xba,0xb9,0xbb,0xbb,0xbd,0xbd,0xbe,0xbe,0xbe,0xbe,0xbc,0xbb,0xbd,0xbe,
0xbe,0xc0,0xbf,0xbf,0xbe,0xc0,0xbf,0xc0,0xc0,0xbe,0xbc,0xbc,0xbb,0xbb,0xbb,0xbb,
0xbb,0xbb,0xbb,0xba,0xbb,0xbc,0xbe,0xbf,0xbd,0xbb,0xbd,0xbe,0xbe,0xbe,0xbf,0xbf,
0xbd,0xbc,0xbd,0xbf,0xc0,0xc0,0xbe,0xbc,0xbb,0xbb,0xbd,0xbd,0xbe,0xbf,0xbf,0xbd,
0xbb,0xb9,0xba,0xbb,0xba,0xb5,0xaf,0xac,0xa1,0x96,0x90,0x8a,0x84,0x7f,0x78,0x72,
0x71,0x70,0x6f,0x6c,0x6d,0x6d,0x6f,0x70,0x70,0x6f,0x71,0x70,0x6f,0x6f,0x71,0x73,
0x73,0x71,0x70,0x70,0x71,0x71,0x71,0x72,0x73,0x72,0x73,0x73,0x74,0x75,0x75,0x73,
0x72,0x71,0x71,0x72,0x70,0x6e,0x70,0x70,0x70,0x6f,0x6d,0x6d,0x6f,0x6f,0x6f,0x6e,
0x6e,0x6d,0x6d,0x6e,0x6f,0x6f,0x6f,0x6d,0x6d,0x6f,0x73,0x77,0x7a,0x7f,0x85,0x8b,
0x8f,0x93,0x95,0x98,0x98,0x96,0x97,0x98,0x98,0x97,0x92,0x8e,0x8b,0x89,0x87,0x83,
0x7f,0x7a,0x75,0x70,0x6a,0x65,0x63,0x61,0x5e,0x5a,0x56,0x53,0x4f,0x4c,0x4a,0x4a,
0x4a,0x49,0x49,0x48,0x46,0x45,0x48,0x4c,0x4e,0x51,0x54,0x56,0x5a,0x5f,0x65,0x6c,
0x71,0x75,0x79,0x7e,0x80,0x82,0x86,0x89,0x8e,0x91,0x95,0x97,0x99,0x9b,0x9d,0x9f,
0x9e,0x9b,0x9b,0x97,0x90,0x8d,0x89,0x88,0x84,0x82,0x7e,0x79,0x75,0x70,0x6c,0x68,
0x62,0x5a,0x57,0x54,0x51,0x4f,0x4e,0x4b,0x48,0x47,0x46,0x44,0x44,0x44,0x44,0x48,
0x49,0x4a,0x4d,0x52,0x56,0x5b,0x5f,0x63,0x67,0x6a,0x6d,0x73,0x78,0x7c,0x81,0x87,
0x8b,0x8f,0x91,0x91,0x93,0x96,0x99,0x9a,0x9b,0x9a,0x9b,0x9a,0x96,0x91,0x90,0x90,
0x8f,0x8a,0x86,0x7e,0x78,0x75,0x71,0x6b,0x67,0x63,0x5e,0x59,0x54,0x53,0x51,0x4f,
0x4c,0x4a,0x4a,0x49,0x46,0x48,0x46,0x46,0x48,0x48,0x49,0x4d,0x51,0x55,0x59,0x5e,
0x63,0x67,0x6d,0x70,0x76,0x7b,0x7f,0x82,0x86,0x89,0x8e,0x92,0x94,0x94,0x95,0x97,
0x98,0x9b,0x9b,0x9a,0x98,0x94,0x90,0x8e,0x8a,0x87,0x83,0x7e,0x7b,0x78,0x76,0x74,
0x71,0x6e,0x6a,0x65,0x60,0x5b,0x57,0x54,0x4f,0x49,0x46,0x47,0x48,0x47,0x45,0x44,
0x47,0x4c,0x4e,0x51,0x59,0x5f,0x64,0x68,0x69,0x6c,0x6f,0x71,0x71,0x71,0x71,0x71,
0x6e,0x6e,0x6f,0x6f,0x73,0x73,0x72,0x72,0x6f,0x6c,0x6d,0x6f,0x72,0x73,0x73,0x72,
0x6f,0x71,0x72,0x73,0x73,0x71,0x71,0x71,0x6f,0x6d,0x6f,0x70,0x71,0x71,0x70,0x6f,
0x6f,0x6f,0x6f,0x6f,0x6f,0x70,0x73,0x74,0x74,0x73,0x73,0x71,0x6f,0x6f,0x6e,0x6d,
0x6d,0x6e,0x6f,0x6e,0x6f,0x6e,0x6f,0x71,0x72,0x71,0x71,0x70,0x71,0x73,0x73,0x72,
0x72,0x71,0x6f,0x6d,0x67,0x62,0x5d,0x59,0x55,0x54,0x55,0x58,0x5c,0x61,0x67,0x6f,
0x7a,0x86,0x8e,0x91,0x91,0x8e,0x89,0x83,0x7c,0x75,0x6e,0x63,0x59,0x52,0x51,0x51,
0x51,0x53,0x57,0x5d,0x62,0x67,0x71,0x7b,0x83,0x8b,0x90,0x90,0x8d,0x89,0x83,0x7c,
0x72,0x68,0x5d,0x57,0x51,0x4c,0x4c,0x4b,0x4d,0x53,0x57,0x5c,0x65,0x6f,0x7b,0x86,
0x8a,0x8b,0x8d,0x8e,0x8e,0x88,0x7f,0x74,0x69,0x60,0x56,0x4c,0x46,0x45,0x48,0x4c,
0x50,0x55,0x5e,0x67,0x71,0x7b,0x86,0x8e,0x93,0x93,0x8d,0x87,0x80,0x79,0x71,0x68,
0x5f,0x56,0x4e,0x48,0x45,0x44,0x4b,0x51,0x57,0x5f,0x6b,0x74,0x80,0x86,0x8e,0x94,
0x93,0x8e,0x88,0x7f,0x77,0x6e,0x63,0x59,0x51,0x4c,0x46,0x44,0x46,0x4c,0x54,0x5c,
0x62,0x6b,0x77,0x81,0x89,0x8f,0x93,0x92,0x8f,0x88,0x80,0x76,0x6c,0x63,0x5b,0x53,
0x4d,0x48,0x4b,0x4c,0x4d,0x56,0x5e,0x65,0x6b,0x71,0x7b,0x86,0x8c,0x8a,0x86,0x83,
0x7e,0x79,0x75,0x72,0x70,0x6f,0x6c,0x69,0x69,0x6b,0x6b,0x6b,0x6c,0x6d,0x6f,0x71,
0x71,0x71,0x70,0x6f,0x6f,0x70,0x71,0x72,0x71,0x6e,0x6b,0x6c,0x6e,0x6f,0x73,0x71,
0x6f,0x6e,0x6d,0x6c,0x6d,0x70,0x73,0x73,0x72,0x72,0x72,0x72,0x72,0x74,0x75,0x77,
0x75,0x70,0x6d,0x6c,0x6e,0x6e,0x6e,0x6f,0x70,0x6f,0x6f,0x6f,0x72,0x75,0x77,0x75,
0x72,0x72,0x6f,0x6c,0x6b,0x69,0x68,0x68,0x65,0x64,0x67,0x6d,0x73,0x7a,0x80,0x83,
0x82,0x7b,0x72,0x67,0x60,0x5b,0x58,0x59,0x5b,0x5e,0x6a,0x76,0x7f,0x84,0x87,0x83,
0x7b,0x70,0x64,0x57,0x4f,0x4b,0x4f,0x5a,0x67,0x76,0x83,0x8b,0x8d,0x89,0x80,0x75,
0x6b,0x60,0x58,0x54,0x53,0x58,0x62,0x6f,0x7b,0x83,0x89,0x88,0x82,0x76,0x68,0x5c,
0x55,0x50,0x51,0x56,0x5e,0x6b,0x79,0x85,0x8b,0x89,0x87,0x7c,0x6f,0x64,0x5b,0x54,
0x52,0x54,0x5d,0x6b,0x78,0x84,0x8c,0x8d,0x87,0x7e,0x6f,0x61,0x56,0x50,0x4c,0x4d,
0x55,0x63,0x74,0x82,0x8b,0x8f,0x8f,0x88,0x7b,0x6e,0x63,0x59,0x53,0x4f,0x54,0x5e,
0x6b,0x78,0x83,0x8a,0x88,0x81,0x76,0x6b,0x64,0x5f,0x5c,0x5a,0x5a,0x5d,0x63,0x6c,
0x72,0x77,0x7b,0x7b,0x78,0x74,0x70,0x6f,0x6f,0x70,0x6f,0x6d,0x70,0x73,0x73,0x71,
0x6f,0x6e,0x6e,0x6e,0x6f,0x6f,0x73,0x73,0x72,0x71,0x72,0x71,0x74,0x71,0x6d,0x6e,
0x6d,0x6c,0x6d,0x6f,0x71,0x74,0x74,0x74,0x74,0x75,0x75,0x74,0x72,0x70,0x6d,0x6a,
0x67,0x68,0x6f,0x77,0x7c,0x7b,0x74,0x6b,0x64,0x61,0x64,0x6b,0x74,0x7a,0x7b,0x76,
0x6b,0x61,0x5d,0x60,0x68,0x74,0x7c,0x7d,0x77,0x6d,0x64,0x5f,0x60,0x67,0x71,0x7b,
0x7e,0x78,0x70,0x66,0x5f,0x5f,0x64,0x6c,0x78,0x7f,0x80,0x79,0x6e,0x63,0x5e,0x5f,
0x67,0x72,0x7c,0x81,0x7d,0x75,0x69,0x60,0x5d,0x63,0x6d,0x79,0x81,0x82,0x7a,0x6f,
0x62,0x5a,0x5b,0x64,0x6d,0x79,0x7c,0x77,0x6f,0x64,0x5b,0x5a,0x5d,0x68,0x75,0x7e,
0x7f,0x77,0x6b,0x5f,0x5b,0x5d,0x68,0x75,0x82,0x87,0x83,0x78,0x69,0x5e,0x5c,0x61,
0x6d,0x79,0x7f,0x80,0x79,0x6d,0x63,0x5d,0x61,0x6a,0x72,0x7b,0x78,0x6f,0x68,0x64,
0x65,0x6d,0x75,0x7a,0x7f,0x7b,0x73,0x69,0x65,0x66,0x6e,0x75,0x77,0x77,0x75,0x71,
0x6e,0x6c,0x6d,0x6f,0x6e,0x6c,0x6b,0x6d,0x70,0x72,0x74,0x73,0x73,0x72,0x71,0x71,
0x71,0x73,0x75,0x74,0x72,0x71,0x6f,0x6f,0x70,0x6f,0x70,0x70,0x6f,0x6d,0x6f,0x6f,
0x71,0x72,0x73,0x73,0x72,0x70,0x70,0x72,0x73,0x74,0x75,0x72,0x6d,0x6a,0x6c,0x72,
0x79,0x7b,0x7a,0x74,0x6c,0x63,0x61,0x69,0x77,0x82,0x83,0x7c,0x6e,0x63,0x5f,0x67,
0x78,0x88,0x8b,0x7e,0x6a,0x59,0x54,0x60,0x75,0x86,0x8a,0x7e,0x65,0x51,0x4b,0x59,
0x73,0x88,0x8c,0x7f,0x69,0x57,0x53,0x5f,0x77,0x8b,0x90,0x82,0x69,0x55,0x53,0x5f,
0x75,0x88,0x8c,0x7f,0x69,0x54,0x4f,0x5c,0x72,0x84,0x88,0x7c,0x67,0x57,0x53,0x5f,
0x74,0x87,0x8b,0x7e,0x68,0x57,0x56,0x63,0x78,0x8a,0x8f,0x81,0x69,0x56,0x51,0x5f,
0x75,0x87,0x8b,0x7e,0x68,0x55,0x52,0x5f,0x74,0x85,0x88,0x7b,0x67,0x54,0x51,0x5c,
0x70,0x80,0x88,0x81,0x71,0x5f,0x5c,0x62,0x6f,0x7a,0x7f,0x79,0x72,0x69,0x65,0x68,
0x6f,0x75,0x77,0x74,0x6e,0x6b,0x6b,0x6d,0x6f,0x6f,0x71,0x71,0x72,0x72,0x72,0x73,
0x70,0x6c,0x6b,0x6d,0x6f,0x72,0x72,0x6f,0x6e,0x6d,0x6c,0x6b,0x6c,0x6e,0x6f,0x6e,
0x6d,0x6b,0x6f,0x6e,0x6e,0x70,0x72,0x73,0x73,0x71,0x70,0x70,0x6f,0x6e,0x6f,0x71,
0x72,0x71,0x70,0x6d,0x6c,0x6e,0x71,0x71,0x70,0x6e,0x6b,0x6a,0x6a,0x6e,0x74,0x78,
0x77,0x6e,0x68,0x67,0x6c,0x72,0x77,0x77,0x73,0x6b,0x65,0x67,0x6f,0x78,0x7c,0x76,
0x6b,0x63,0x63,0x6a,0x72,0x79,0x79,0x73,0x6b,0x65,0x67,0x71,0x7a,0x7a,0x75,0x6c,
0x67,0x68,0x6e,0x77,0x7c,0x79,0x70,0x68,0x66,0x6c,0x76,0x7a,0x77,0x6d,0x67,0x65,
0x6b,0x75,0x7a,0x78,0x71,0x69,0x66,0x6b,0x73,0x79,0x77,0x6e,0x65,0x64,0x6b,0x74,
0x7a,0x78,0x6f,0x66,0x65,0x6a,0x75,0x7b,0x77,0x6d,0x67,0x67,0x70,0x78,0x7d,0x79,
0x6f,0x67,0x64,0x6a,0x77,0x7e,0x79,0x6e,0x64,0x62,0x6c,0x7a,0x83,0x80,0x73,0x65,
0x5f,0x64,0x72,0x7e,0x81,0x76,0x67,0x60,0x62,0x6c,0x79,0x7d,0x77,0x6c,0x62,0x5f,
0x67,0x72,0x7a,0x77,0x70,0x69,0x6b,0x73,0x79,0x78,0x78,0x6f,0x68,0x69,0x6b,0x70,
0x73,0x71,0x6b,0x68,0x6b,0x6f,0x74,0x74,0x6f,0x6b,0x6b,0x6b,0x6e,0x71,0x73,0x6f,
0x6c,0x6c,0x6f,0x72,0x73,0x71,0x6e,0x6c,0x6d,0x6f,0x71,0x72,0x71,0x6e,0x6b,0x68,
0x6d,0x71,0x72,0x72,0x70,0x6f,0x71,0x72,0x72,0x72,0x72,0x70,0x6e,0x6b,0x6c,0x6e,
0x6f,0x6d,0x6c,0x6d,0x6f,0x71,0x73,0x72,0x70,0x6f,0x6f,0x6e,0x6f,0x70,0x71,0x6f,
0x6c,0x6b,0x6d,0x70,0x71,0x71,0x70,0x6f,0x6f,0x6f,0x6f,0x6f,0x6e,0x6b,0x65,0x60,
0x5c,0x54,0x4c,0x47,0x41,0x3c,0x3a,0x38,0x35,0x35,0x34,0x33,0x35,0x37,0x3b,0x3c,
// Line 21
0x34,0x32,0x34,0x36,0x36,0x36,0x39,0x39,0x37,0x36,0x37,0x3c,0x3e,0x3c,0x3b,0x3a,
0x3c,0x3c,0x3b,0x3c,0x3b,0x39,0x38,0x36,0x38,0x38,0x38,0x37,0x38,0x37,0x37,0x36,
0x36,0x35,0x35,0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x38,0x3b,0x40,0x41,0x40,0x3f,
0x40,0x43,0x45,0x48,0x4a,0x4e,0x53,0x54,0x55,0x57,0x5b,0x5e,0x61,0x63,0x63,0x67,
0x68,0x65,0x64,0x65,0x67,0x66,0x66,0x65,0x66,0x66,0x63,0x5f,0x61,0x5e,0x5a,0x58,
0x56,0x53,0x51,0x4e,0x4a,0x49,0x48,0x47,0x45,0x42,0x40,0x3e,0x3e,0x3d,0x3c,0x3c,
0x3a,0x39,0x3b,0x3c,0x3c,0x3e,0x40,0x41,0x42,0x45,0x4a,0x4e,0x50,0x50,0x51,0x54,
0x55,0x55,0x56,0x59,0x5c,0x5f,0x60,0x61,0x62,0x63,0x65,0x66,0x67,0x68,0x67,0x68,
0x67,0x65,0x65,0x63,0x61,0x61,0x5e,0x5b,0x59,0x56,0x54,0x54,0x52,0x4d,0x4a,0x49,
0x49,0x47,0x44,0x40,0x3f,0x3e,0x3e,0x3b,0x3b,0x3b,0x3c,0x3d,0x3d,0x3a,0x3c,0x3e,
0x40,0x43,0x46,0x49,0x4b,0x4c,0x4d,0x4f,0x53,0x56,0x59,0x5c,0x5d,0x5e,0x61,0x63,
0x63,0x66,0x6a,0x6a,0x69,0x67,0x67,0x68,0x68,0x66,0x66,0x67,0x65,0x61,0x5f,0x5d,
0x5c,0x5b,0x58,0x54,0x51,0x4e,0x4a,0x48,0x46,0x44,0x43,0x40,0x3c,0x38,0x38,0x39,
0x38,0x38,0x38,0x38,0x3b,0x3c,0x3d,0x3e,0x42,0x44,0x46,0x47,0x49,0x4a,0x4d,0x4d,
0x4d,0x51,0x55,0x57,0x59,0x5b,0x5f,0x63,0x65,0x67,0x6a,0x69,0x67,0x67,0x68,0x6a,
0x6a,0x6c,0x69,0x65,0x62,0x61,0x5f,0x60,0x5e,0x5b,0x5b,0x58,0x55,0x52,0x51,0x4e,
0x4c,0x4a,0x49,0x47,0x45,0x40,0x3e,0x3f,0x3e,0x3c,0x3c,0x3d,0x3e,0x3e,0x3e,0x3d,
0x3e,0x3f,0x40,0x42,0x44,0x47,0x4a,0x4e,0x4f,0x50,0x54,0x59,0x59,0x59,0x5a,0x5c,
0x5f,0x61,0x63,0x63,0x68,0x67,0x68,0x68,0x69,0x69,0x69,0x68,0x65,0x63,0x61,0x5f,
0x60,0x5e,0x5b,0x5b,0x59,0x55,0x4f,0x49,0x46,0x46,0x46,0x46,0x45,0x42,0x3f,0x3b,
0x3b,0x3b,0x3d,0x3f,0x3e,0x3c,0x3c,0x3b,0x3b,0x3e,0x41,0x45,0x48,0x49,0x49,0x4b,
0x4e,0x50,0x53,0x57,0x59,0x5a,0x5c,0x5e,0x5f,0x63,0x64,0x65,0x64,0x65,0x65,0x66,
0x67,0x68,0x69,0x69,0x68,0x65,0x64,0x63,0x61,0x5f,0x5c,0x57,0x54,0x51,0x50,0x4e,
0x4b,0x4a,0x49,0x48,0x46,0x44,0x43,0x41,0x40,0x40,0x3e,0x3c,0x3c,0x3a,0x3b,0x3e,
0x3e,0x3f,0x3f,0x42,0x43,0x45,0x46,0x48,0x48,0x4c,0x4c,0x4d,0x51,0x56,0x5a,0x5e,
0x5d,0x5d,0x60,0x63,0x65,0x66,0x67,0x68,0x68,0x66,0x65,0x66,0x68,0x68,0x65,0x61,
0x5d,0x5b,0x5a,0x59,0x57,0x58,0x56,0x53,0x50,0x4d,0x4a,0x49,0x47,0x46,0x44,0x43,
0x40,0x3b,0x3c,0x3e,0x3d,0x3e,0x3c,0x3c,0x3d,0x3b,0x3b,0x39,0x38,0x38,0x3b,0x3b,
0x3b,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x3a,0x39,0x39,0x39,0x39,0x3a,0x3b,0x3c,
0x3b,0x3b,0x3a,0x3a,0x3b,0x3c,0x3b,0x39,0x3a,0x3b,0x39,0x3b,0x39,0x39,0x3d,0x3e,
0x3c,0x39,0x39,0x38,0x38,0x39,0x3a,0x39,0x39,0x38,0x38,0x39,0x3b,0x3c,0x3d,0x3b,
0x39,0x38,0x39,0x3a,0x39,0x39,0x3a,0x3c,0x3a,0x39,0x3a,0x3c,0x3c,0x39,0x38,0x38,
0x38,0x37,0x34,0x34,0x36,0x37,0x38,0x37,0x38,0x38,0x3a,0x3b,0x3b,0x3b,0x3e,0x3f,
0x3e,0x3e,0x3e,0x3d,0x3e,0x40,0x42,0x48,0x4b,0x4f,0x54,0x58,0x5d,0x63,0x67,0x6b,
0x6c,0x6d,0x6d,0x6b,0x6b,0x6a,0x68,0x67,0x65,0x65,0x68,0x6b,0x6d,0x6c,0x6a,0x67,
0x67,0x67,0x68,0x67,0x6a,0x69,0x68,0x67,0x67,0x67,0x6d,0x6c,0x6a,0x6b,0x6a,0x68,
0x67,0x67,0x6a,0x6c,0x6c,0x6b,0x6b,0x6b,0x6b,0x6a,0x6c,0x6c,0x6c,0x69,0x63,0x5c,
0x56,0x52,0x4d,0x47,0x43,0x40,0x3e,0x3d,0x3b,0x39,0x38,0x39,0x39,0x3a,0x39,0x39,
0x3b,0x39,0x39,0x3c,0x3c,0x3c,0x3c,0x3c,0x3a,0x38,0x37,0x38,0x3a,0x3b,0x39,0x35,
0x33,0x34,0x38,0x3a,0x39,0x38,0x38,0x37,0x36,0x34,0x35,0x38,0x3b,0x3c,0x3b,0x37,
0x35,0x36,0x39,0x3b,0x3b,0x39,0x3b,0x39,0x36,0x36,0x37,0x3a,0x3c,0x3a,0x37,0x35,
0x36,0x37,0x38,0x3d,0x3c,0x39,0x38,0x38,0x38,0x39,0x39,0x38,0x39,0x3a,0x39,0x38,
0x38,0x38,0x3a,0x3b,0x3b,0x39,0x38,0x37,0x37,0x35,0x34,0x34,0x35,0x36,0x36,0x38,
0x37,0x37,0x38,0x39,0x38,0x37,0x38,0x39,0x36,0x36,0x37,0x38,0x39,0x39,0x3b,0x3c,
0x3d,0x3e,0x43,0x48,0x4d,0x53,0x59,0x5d,0x61,0x64,0x67,0x68,0x68,0x68,0x6a,0x6b,
0x69,0x68,0x69,0x68,0x67,0x67,0x68,0x69,0x69,0x68,0x68,0x6a,0x6a,0x6b,0x6a,0x6c,
0x6c,0x6c,0x6c,0x6a,0x69,0x6a,0x6a,0x6a,0x6b,0x6b,0x6c,0x6d,0x6c,0x69,0x6a,0x6a,
0x6c,0x6a,0x68,0x68,0x69,0x69,0x67,0x65,0x62,0x5e,0x59,0x53,0x4f,0x4b,0x48,0x42,
0x3d,0x3a,0x3a,0x39,0x34,0x37,0x38,0x37,0x38,0x36,0x36,0x3b,0x3b,0x39,0x38,0x36,
0x34,0x33,0x33,0x33,0x36,0x39,0x3b,0x39,0x37,0x37,0x39,0x3c,0x3b,0x3b,0x3b,0x3b,
0x38,0x37,0x37,0x3a,0x3b,0x39,0x36,0x35,0x34,0x36,0x34,0x34,0x34,0x35,0x38,0x3a,
0x3c,0x40,0x44,0x48,0x4d,0x50,0x55,0x5a,0x5e,0x61,0x65,0x66,0x67,0x66,0x66,0x66,
0x67,0x67,0x68,0x67,0x6b,0x69,0x68,0x69,0x6a,0x6b,0x6c,0x6a,0x67,0x66,0x67,0x67,
0x68,0x69,0x68,0x6a,0x6b,0x6a,0x6a,0x6a,0x6a,0x6a,0x6b,0x6d,0x6e,0x6f,0x6e,0x6d,
0x6c,0x6b,0x6b,0x6a,0x6a,0x69,0x69,0x68,0x66,0x63,0x63,0x5e,0x57,0x52,0x4d,0x48,
0x44,0x40,0x3d,0x3b,0x39,0x37,0x35,0x38,0x39,0x3c,0x40,0x3e,0x39,0x36,0x35,0x34,
0x35,0x34,0x37,0x39,0x38,0x35,0x36,0x38,0x3c,0x3d,0x3d,0x3c,0x3b,0x3a,0x38,0x37,
0x38,0x39,0x39,0x39,0x38,0x38,0x38,0x37,0x36,0x36,0x38,0x39,0x37,0x36,0x36,0x36,
0x36,0x34,0x34,0x39,0x39,0x37,0x37,0x37,0x38,0x3a,0x3b,0x3a,0x3a,0x38,0x38,0x36,
0x35,0x35,0x36,0x37,0x37,0x36,0x35,0x36,0x38,0x3b,0x3d,0x3b,0x39,0x36,0x34,0x35,
0x35,0x35,0x37,0x37,0x35,0x34,0x36,0x36,0x36,0x38,0x3a,0x37,0x38,0x37,0x36,0x38,
0x37,0x37,0x38,0x39,0x3b,0x3a,0x3b,0x3a,0x38,0x3a,0x3d,0x3e,0x40,0x42,0x46,0x4a,
0x4f,0x54,0x5c,0x61,0x65,0x67,0x69,0x69,0x69,0x68,0x68,0x69,0x69,0x67,0x66,0x67,
0x68,0x6a,0x6c,0x6d,0x6c,0x6b,0x69,0x68,0x69,0x6a,0x6d,0x69,0x6a,0x68,0x68,0x68,
0x69,0x68,0x6d,0x6d,0x6d,0x6d,0x6b,0x6a,0x6b,0x6a,0x6c,0x6c,0x6b,0x69,0x67,0x65,
0x64,0x66,0x6a,0x6a,0x66,0x61,0x5c,0x55,0x50,0x49,0x45,0x42,0x3e,0x39,0x38,0x36,
0x37,0x38,0x38,0x38,0x38,0x39,0x38,0x37,0x36,0x34,0x33,0x36,0x37,0x38,0x3a,0x38,
0x36,0x36,0x36,0x36,0x37,0x39,0x38,0x38,0x38,0x38,0x36,0x39,0x39,0x39,0x3a,0x39,
0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x36,0x34,0x34,0x35,0x37,0x38,0x3b,0x3e,0x42,
0x46,0x4b,0x51,0x57,0x5d,0x61,0x63,0x64,0x65,0x66,0x68,0x67,0x65,0x65,0x66,0x66,
0x65,0x65,0x68,0x68,0x69,0x68,0x67,0x69,0x67,0x68,0x68,0x67,0x66,0x65,0x66,0x66,
0x67,0x69,0x6a,0x6a,0x68,0x66,0x65,0x67,0x68,0x69,0x6a,0x6a,0x69,0x67,0x67,0x68,
0x69,0x6a,0x6a,0x69,0x68,0x65,0x63,0x63,0x65,0x65,0x69,0x6a,0x69,0x68,0x68,0x68,
0x66,0x67,0x6a,0x69,0x6a,0x68,0x66,0x67,0x68,0x69,0x6a,0x69,0x68,0x69,0x69,0x69,
0x6a,0x6c,0x6d,0x6c,0x6b,0x6b,0x6a,0x6a,0x69,0x69,0x6b,0x6b,0x69,0x67,0x67,0x68,
0x6a,0x69,0x69,0x69,0x68,0x64,0x63,0x65,0x66,0x66,0x69,0x67,0x65,0x65,0x63,0x60,
0x5e,0x5a,0x55,0x53,0x4e,0x48,0x46,0x42,0x3e,0x3d,0x3e,0x3e,0x3c,0x3b,0x39,0x39,
0x3a,0x39,0x39,0x39,0x38,0x37,0x37,0x36,0x37,0x38,0x39,0x39,0x38,0x38,0x3a,0x3b,
0x3b,0x37,0x34,0x34,0x35,0x35,0x36,0x35,0x35,0x37,0x37,0x36,0x37,0x38,0x38,0x38,
0x36,0x36,0x37,0x38,0x38,0x36,0x38,0x3a,0x3d,0x41,0x47,0x4c,0x51,0x55,0x59,0x5d,
0x60,0x63,0x67,0x6a,0x6b,0x69,0x6b,0x69,0x67,0x68,0x69,0x69,0x69,0x68,0x67,0x68,
0x65,0x66,0x68,0x6c,0x6d,0x6c,0x6a,0x6b,0x6a,0x68,0x68,0x68,0x6a,0x6a,0x68,0x66,
0x65,0x68,0x6d,0x6e,0x6e,0x6d,0x6a,0x68,0x64,0x64,0x67,0x6a,0x6a,0x67,0x66,0x67,
0x68,0x68,0x69,0x6a,0x6b,0x69,0x67,0x65,0x66,0x66,0x68,0x69,0x69,0x68,0x68,0x69,
0x68,0x67,0x6a,0x6a,0x68,0x67,0x66,0x66,0x67,0x68,0x6a,0x6b,0x6c,0x6b,0x6a,0x69,
0x68,0x69,0x6c,0x6c,0x6c,0x6c,0x6d,0x6b,0x6a,0x6a,0x6a,0x6d,0x6e,0x6d,0x6b,0x69,
0x69,0x6a,0x6a,0x6c,0x6d,0x6e,0x6e,0x6c,0x6b,0x6b,0x6b,0x6a,0x6b,0x6d,0x6e,0x6d,
0x6b,0x6a,0x6b,0x6a,0x6b,0x6c,0x6b,0x69,0x67,0x66,0x65,0x66,0x68,0x69,0x69,0x67,
0x67,0x68,0x68,0x6a,0x6b,0x6c,0x6a,0x69,0x69,0x6a,0x6a,0x6c,0x6d,0x6e,0x6e,0x6c,
0x69,0x68,0x65,0x64,0x66,0x67,0x67,0x66,0x65,0x65,0x67,0x69,0x6c,0x6e,0x6f,0x6c,
0x6a,0x67,0x65,0x62,0x5f,0x59,0x52,0x4d,0x48,0x42,0x3f,0x3d,0x3c,0x3c,0x3a,0x39,
0x39,0x3a,0x3b,0x3c,0x3c,0x3b,0x39,0x3a,0x37,0x36,0x39,0x3b,0x39,0x38,0x37,0x36,
0x38,0x38,0x37,0x37,0x36,0x36,0x37,0x36,0x38,0x3b,0x3e,0x3d,0x3a,0x3c,0x3c,0x3b,
0x39,0x36,0x36,0x37,0x37,0x36,0x34,0x36,0x36,0x36,0x38,0x39,0x3a,0x39,0x36,0x33,
0x33,0x33,0x34,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x37,0x37,0x34,0x33,0x32,0x30,
0x30,0x32,0x34,0x36,0x36,0x34,0x34,0x34,0x34,0x33,0x33,0x33,0x34,0x32,0x32,0x30,
//Field 7
// Line 10
0x38,0x38,0x37,0x35,0x33,0x35,0x37,0x3a,0x3b,0x3d,0x3c,0x3a,0x38,0x37,0x36,0x35,
0x37,0x37,0x38,0x39,0x39,0x38,0x38,0x39,0x3b,0x3a,0x3a,0x3a,0x38,0x38,0x36,0x34,
0x35,0x37,0x38,0x3a,0x39,0x39,0x39,0x39,0x39,0x3c,0x3b,0x3a,0x38,0x38,0x37,0x34,
0x35,0x36,0x36,0x38,0x35,0x33,0x34,0x36,0x36,0x37,0x38,0x38,0x39,0x3a,0x3a,0x38,
0x37,0x38,0x39,0x3b,0x38,0x38,0x38,0x36,0x34,0x37,0x39,0x3b,0x39,0x37,0x35,0x35,
0x35,0x37,0x37,0x37,0x35,0x34,0x34,0x35,0x34,0x37,0x38,0x37,0x36,0x35,0x34,0x35,
0x36,0x36,0x35,0x37,0x37,0x38,0x38,0x3a,0x39,0x39,0x38,0x37,0x37,0x36,0x33,0x33,
0x34,0x35,0x36,0x35,0x33,0x35,0x35,0x35,0x35,0x37,0x37,0x36,0x36,0x36,0x36,0x37,
0x37,0x37,0x38,0x38,0x37,0x36,0x37,0x37,0x38,0x3a,0x39,0x37,0x38,0x38,0x36,0x37,
0x37,0x38,0x38,0x37,0x34,0x35,0x35,0x36,0x38,0x3a,0x38,0x39,0x38,0x38,0x37,0x38,
0x39,0x3b,0x3b,0x3a,0x38,0x37,0x36,0x33,0x32,0x33,0x37,0x38,0x36,0x34,0x37,0x38,
0x3a,0x3b,0x3a,0x3a,0x38,0x38,0x37,0x38,0x39,0x3a,0x3a,0x3b,0x39,0x38,0x37,0x36,
0x33,0x35,0x35,0x36,0x36,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x37,0x36,
0x36,0x39,0x38,0x37,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x39,0x38,0x37,0x37,0x35,
0x34,0x37,0x38,0x38,0x38,0x38,0x36,0x36,0x35,0x37,0x38,0x39,0x39,0x39,0x38,0x37,
0x35,0x37,0x38,0x3b,0x3b,0x3b,0x3a,0x38,0x35,0x34,0x36,0x38,0x3a,0x3a,0x39,0x37,
0x34,0x35,0x36,0x38,0x38,0x38,0x36,0x36,0x36,0x37,0x37,0x36,0x34,0x34,0x35,0x37,
0x34,0x38,0x38,0x3a,0x39,0x3a,0x3a,0x3a,0x3b,0x3b,0x3a,0x36,0x31,0x33,0x36,0x38,
0x39,0x39,0x38,0x37,0x34,0x33,0x34,0x37,0x38,0x37,0x35,0x33,0x32,0x35,0x37,0x38,
0x39,0x38,0x38,0x38,0x38,0x3a,0x38,0x3b,0x39,0x39,0x39,0x39,0x38,0x3b,0x3b,0x38,
0x37,0x35,0x34,0x37,0x36,0x36,0x36,0x37,0x38,0x39,0x38,0x38,0x39,0x3c,0x3c,0x3c,
0x3b,0x39,0x38,0x37,0x35,0x35,0x36,0x34,0x34,0x37,0x38,0x38,0x38,0x38,0x38,0x39,
0x3a,0x39,0x38,0x39,0x39,0x38,0x39,0x39,0x38,0x39,0x38,0x37,0x36,0x38,0x39,0x3a,
0x39,0x38,0x38,0x38,0x37,0x38,0x39,0x3a,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x37,
0x37,0x38,0x37,0x35,0x35,0x38,0x38,0x38,0x36,0x37,0x38,0x39,0x38,0x38,0x38,0x39,
0x38,0x37,0x38,0x3a,0x3c,0x3b,0x3a,0x38,0x39,0x3b,0x3c,0x3a,0x3b,0x3a,0x38,0x3a,
0x39,0x39,0x3a,0x39,0x38,0x38,0x38,0x3b,0x3c,0x3d,0x3b,0x3a,0x3a,0x3a,0x3a,0x3b,
0x3b,0x39,0x38,0x36,0x34,0x35,0x35,0x34,0x33,0x35,0x37,0x37,0x35,0x35,0x36,0x37,
0x35,0x35,0x37,0x38,0x3a,0x3d,0x3b,0x3a,0x3b,0x3b,0x3a,0x3b,0x3b,0x3c,0x39,0x39,
0x38,0x3a,0x3c,0x3d,0x3d,0x3f,0x3f,0x3d,0x3b,0x3a,0x39,0x3a,0x38,0x37,0x36,0x37,
0x35,0x34,0x33,0x33,0x35,0x38,0x38,0x37,0x37,0x38,0x38,0x3a,0x3a,0x3b,0x3a,0x38,
0x34,0x33,0x33,0x35,0x35,0x35,0x35,0x37,0x38,0x38,0x37,0x3a,0x3a,0x38,0x37,0x36,
0x34,0x36,0x36,0x36,0x36,0x37,0x38,0x38,0x39,0x39,0x39,0x39,0x38,0x37,0x35,0x36,
0x37,0x39,0x39,0x3b,0x3b,0x3b,0x39,0x38,0x36,0x37,0x36,0x35,0x33,0x33,0x34,0x34,
0x32,0x35,0x36,0x37,0x38,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x3b,0x39,0x38,
0x38,0x38,0x37,0x34,0x35,0x38,0x37,0x38,0x39,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,
0x3a,0x38,0x37,0x36,0x36,0x36,0x36,0x35,0x37,0x38,0x39,0x38,0x38,0x3a,0x3a,0x39,
0x39,0x3a,0x3a,0x38,0x38,0x37,0x36,0x36,0x35,0x35,0x38,0x38,0x38,0x3a,0x3b,0x3a,
0x39,0x38,0x36,0x36,0x35,0x35,0x33,0x31,0x32,0x35,0x37,0x36,0x34,0x35,0x37,0x37,
0x36,0x36,0x36,0x37,0x37,0x36,0x34,0x35,0x36,0x38,0x37,0x34,0x32,0x34,0x37,0x39,
0x3c,0x39,0x37,0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x36,0x35,0x35,0x39,0x39,0x39,
0x38,0x37,0x33,0x31,0x32,0x34,0x37,0x38,0x38,0x39,0x37,0x35,0x34,0x37,0x38,0x39,
0x37,0x35,0x34,0x33,0x32,0x31,0x34,0x34,0x33,0x36,0x38,0x38,0x37,0x38,0x38,0x39,
0x38,0x38,0x38,0x3b,0x3b,0x3a,0x38,0x37,0x37,0x39,0x39,0x39,0x3a,0x3b,0x39,0x37,
0x35,0x35,0x37,0x37,0x38,0x39,0x38,0x36,0x34,0x36,0x35,0x34,0x33,0x32,0x32,0x33,
0x33,0x33,0x35,0x37,0x37,0x3a,0x3b,0x3c,0x3b,0x3b,0x3b,0x3a,0x3a,0x3a,0x39,0x39,
0x36,0x33,0x34,0x35,0x35,0x37,0x36,0x35,0x34,0x35,0x37,0x38,0x37,0x36,0x34,0x35,
0x36,0x37,0x38,0x38,0x38,0x39,0x39,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x38,0x38,
0x37,0x36,0x34,0x34,0x34,0x36,0x37,0x36,0x38,0x38,0x35,0x34,0x32,0x33,0x33,0x34,
0x35,0x37,0x37,0x37,0x37,0x39,0x3a,0x39,0x37,0x37,0x35,0x34,0x34,0x34,0x36,0x37,
0x38,0x3b,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x34,0x34,0x32,0x32,0x34,0x37,
0x38,0x38,0x36,0x35,0x37,0x39,0x3c,0x3f,0x3f,0x3f,0x3e,0x3e,0x3d,0x3b,0x3b,0x38,
0x38,0x39,0x37,0x33,0x31,0x32,0x32,0x33,0x35,0x38,0x3b,0x3b,0x38,0x35,0x34,0x34,
0x35,0x37,0x37,0x37,0x37,0x37,0x35,0x35,0x34,0x36,0x38,0x38,0x37,0x37,0x36,0x35,
0x36,0x37,0x39,0x39,0x39,0x3a,0x38,0x38,0x38,0x37,0x38,0x37,0x35,0x36,0x34,0x34,
0x34,0x36,0x36,0x36,0x36,0x37,0x38,0x3a,0x38,0x39,0x3a,0x3b,0x38,0x37,0x36,0x37,
0x38,0x39,0x38,0x37,0x37,0x37,0x37,0x37,0x37,0x38,0x37,0x36,0x35,0x36,0x37,0x37,
0x38,0x37,0x36,0x37,0x35,0x35,0x36,0x37,0x37,0x38,0x39,0x3b,0x3a,0x39,0x38,0x37,
0x38,0x39,0x37,0x38,0x36,0x35,0x36,0x37,0x37,0x37,0x38,0x38,0x37,0x38,0x38,0x39,
0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x37,0x36,0x38,0x38,0x38,0x37,0x37,0x37,0x39,
0x3a,0x3a,0x38,0x38,0x37,0x36,0x37,0x37,0x36,0x37,0x37,0x37,0x37,0x37,0x37,0x36,
0x35,0x36,0x36,0x38,0x39,0x3b,0x3c,0x39,0x37,0x39,0x3b,0x3b,0x3a,0x38,0x37,0x37,
0x36,0x35,0x35,0x37,0x36,0x37,0x36,0x36,0x35,0x35,0x35,0x35,0x37,0x37,0x35,0x34,
0x32,0x31,0x32,0x33,0x34,0x36,0x37,0x37,0x36,0x36,0x36,0x37,0x38,0x3a,0x3b,0x3b,
0x3a,0x39,0x38,0x36,0x35,0x37,0x37,0x35,0x33,0x33,0x33,0x32,0x32,0x33,0x34,0x36,
0x34,0x34,0x38,0x39,0x38,0x39,0x39,0x38,0x38,0x37,0x34,0x34,0x33,0x33,0x34,0x36,
0x37,0x38,0x38,0x37,0x36,0x37,0x37,0x37,0x35,0x33,0x31,0x31,0x31,0x33,0x35,0x36,
0x35,0x36,0x35,0x35,0x34,0x35,0x35,0x34,0x33,0x33,0x33,0x35,0x36,0x36,0x37,0x37,
0x36,0x33,0x33,0x33,0x34,0x37,0x38,0x39,0x39,0x39,0x39,0x3b,0x3b,0x3c,0x3b,0x3b,
0x3a,0x38,0x33,0x31,0x31,0x33,0x33,0x33,0x34,0x36,0x36,0x36,0x36,0x37,0x38,0x38,
0x37,0x38,0x37,0x37,0x37,0x37,0x38,0x37,0x37,0x36,0x35,0x36,0x35,0x37,0x38,0x37,
0x36,0x38,0x37,0x38,0x38,0x39,0x37,0x37,0x35,0x35,0x31,0x34,0x35,0x36,0x38,0x38,
0x37,0x37,0x36,0x36,0x38,0x3a,0x3b,0x39,0x37,0x37,0x37,0x37,0x36,0x36,0x37,0x37,
0x37,0x37,0x37,0x37,0x3a,0x3a,0x38,0x39,0x38,0x38,0x38,0x38,0x38,0x38,0x39,0x39,
0x38,0x38,0x37,0x38,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x37,0x39,0x3a,0x38,0x34,
0x35,0x36,0x35,0x34,0x34,0x36,0x36,0x35,0x34,0x34,0x38,0x37,0x38,0x3b,0x3b,0x3a,
0x39,0x39,0x38,0x38,0x37,0x38,0x38,0x37,0x34,0x34,0x35,0x35,0x33,0x33,0x34,0x34,
0x34,0x37,0x38,0x3a,0x38,0x38,0x39,0x3a,0x3a,0x39,0x38,0x37,0x36,0x36,0x35,0x34,
0x34,0x35,0x37,0x38,0x36,0x35,0x37,0x37,0x34,0x36,0x37,0x38,0x37,0x37,0x36,0x37,
0x36,0x36,0x34,0x37,0x36,0x34,0x33,0x34,0x36,0x37,0x36,0x36,0x37,0x38,0x37,0x38,
0x37,0x37,0x37,0x39,0x39,0x38,0x37,0x37,0x36,0x37,0x36,0x34,0x34,0x35,0x34,0x35,
0x35,0x37,0x37,0x38,0x38,0x38,0x3a,0x39,0x37,0x38,0x38,0x38,0x38,0x38,0x38,0x3a,
0x39,0x39,0x38,0x38,0x39,0x3b,0x3a,0x39,0x39,0x3b,0x3a,0x38,0x37,0x36,0x36,0x37,
0x38,0x38,0x38,0x37,0x35,0x35,0x36,0x38,0x38,0x37,0x35,0x34,0x34,0x34,0x33,0x37,
0x37,0x38,0x37,0x37,0x36,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x36,0x36,0x37,
0x36,0x35,0x35,0x35,0x33,0x34,0x33,0x34,0x34,0x33,0x33,0x35,0x35,0x36,0x36,0x36,
0x35,0x37,0x37,0x38,0x37,0x37,0x37,0x37,0x38,0x37,0x35,0x37,0x37,0x38,0x38,0x3a,
0x3a,0x39,0x37,0x34,0x34,0x37,0x39,0x3a,0x38,0x38,0x37,0x37,0x35,0x36,0x37,0x38,
0x38,0x38,0x37,0x35,0x34,0x34,0x35,0x38,0x38,0x3a,0x39,0x38,0x36,0x37,0x37,0x37,
0x37,0x38,0x37,0x34,0x32,0x32,0x32,0x35,0x36,0x37,0x38,0x39,0x39,0x37,0x39,0x39,
0x39,0x3b,0x3a,0x38,0x36,0x34,0x33,0x36,0x37,0x38,0x38,0x38,0x36,0x36,0x34,0x34,
0x33,0x33,0x33,0x32,0x32,0x33,0x33,0x34,0x33,0x34,0x35,0x37,0x37,0x37,0x35,0x35,
0x34,0x34,0x32,0x2e,0x32,0x33,0x34,0x37,0x34,0x32,0x33,0x33,0x33,0x36,0x37,0x37,
0x36,0x35,0x33,0x33,0x35,0x38,0x39,0x38,0x38,0x36,0x35,0x32,0x31,0x32,0x33,0x32,
0x33,0x34,0x34,0x35,0x33,0x33,0x34,0x36,0x38,0x38,0x36,0x34,0x32,0x33,0x33,0x33,
0x33,0x32,0x32,0x33,0x30,0x31,0x31,0x33,0x34,0x36,0x35,0x35,0x36,0x38,0x35,0x34,
// Line 11
0x36,0x38,0x39,0x3a,0x3a,0x38,0x35,0x34,0x32,0x33,0x34,0x35,0x33,0x32,0x33,0x35,
0x37,0x38,0x38,0x37,0x39,0x39,0x39,0x3a,0x3a,0x38,0x36,0x34,0x32,0x35,0x37,0x38,
0x39,0x3a,0x37,0x36,0x35,0x37,0x3a,0x3e,0x3d,0x3b,0x39,0x37,0x34,0x33,0x34,0x36,
0x38,0x38,0x34,0x31,0x30,0x35,0x3f,0x52,0x63,0x73,0x7b,0x7a,0x6d,0x60,0x54,0x52,
0x5a,0x67,0x73,0x78,0x75,0x6b,0x61,0x5c,0x5a,0x5f,0x66,0x6f,0x72,0x74,0x70,0x6a,
0x63,0x5e,0x5c,0x60,0x66,0x6f,0x76,0x79,0x73,0x6a,0x60,0x5a,0x58,0x5f,0x67,0x6f,
0x74,0x73,0x6b,0x65,0x5c,0x57,0x5a,0x60,0x67,0x6f,0x72,0x72,0x6f,0x6a,0x64,0x5e,
0x5c,0x60,0x67,0x6e,0x73,0x74,0x6f,0x67,0x5e,0x5a,0x5a,0x61,0x6b,0x73,0x78,0x78,
0x72,0x6a,0x60,0x5c,0x5c,0x60,0x67,0x6b,0x6d,0x71,0x75,0x79,0x83,0x90,0x9d,0xa9,
0xae,0xac,0xa5,0x97,0x86,0x74,0x69,0x60,0x58,0x54,0x4d,0x46,0x3d,0x36,0x35,0x3e,
0x4e,0x61,0x75,0x84,0x8c,0x92,0x95,0x98,0x9b,0x9d,0x9d,0x9a,0x97,0x96,0x94,0x97,
0x96,0x91,0x88,0x79,0x68,0x5c,0x54,0x4d,0x45,0x3d,0x35,0x2f,0x37,0x46,0x5a,0x6f,
0x7c,0x7e,0x7a,0x6c,0x60,0x5a,0x56,0x50,0x47,0x3b,0x32,0x34,0x3f,0x55,0x6b,0x7c,
0x83,0x7f,0x72,0x64,0x55,0x4d,0x47,0x43,0x3d,0x39,0x34,0x33,0x33,0x37,0x3d,0x49,
0x56,0x64,0x6e,0x72,0x70,0x6b,0x64,0x5b,0x57,0x53,0x4e,0x49,0x40,0x37,0x34,0x3c,
0x4c,0x63,0x77,0x86,0x8e,0x92,0x93,0x93,0x90,0x88,0x7a,0x68,0x5a,0x55,0x5d,0x6a,
0x76,0x7e,0x7b,0x71,0x66,0x5f,0x5d,0x5d,0x58,0x4c,0x3a,0x2d,0x2c,0x3a,0x54,0x6b,
0x7a,0x80,0x79,0x6c,0x5f,0x58,0x54,0x52,0x4a,0x3f,0x34,0x32,0x3c,0x53,0x6b,0x7c,
0x81,0x7b,0x6d,0x5f,0x57,0x56,0x5b,0x64,0x69,0x6f,0x77,0x80,0x8b,0x95,0x9b,0x99,
0x8d,0x7c,0x69,0x58,0x4e,0x4e,0x55,0x61,0x70,0x81,0x8f,0x9b,0x9f,0x9e,0x95,0x88,
0x78,0x69,0x5a,0x4e,0x45,0x3c,0x34,0x33,0x38,0x47,0x5c,0x6f,0x7b,0x7e,0x76,0x68,
0x5a,0x52,0x4f,0x50,0x4d,0x44,0x38,0x2e,0x29,0x2d,0x34,0x3d,0x43,0x43,0x3c,0x34,
0x30,0x37,0x44,0x59,0x6b,0x78,0x7c,0x7b,0x70,0x65,0x5e,0x5b,0x5d,0x66,0x6d,0x72,
0x78,0x7e,0x86,0x8f,0x99,0xa2,0xa8,0xa9,0xa5,0xa0,0x9a,0x97,0x96,0x9b,0x9f,0xa2,
0xa1,0x9e,0x9c,0x9b,0x98,0x97,0x98,0x9a,0x9b,0x9d,0x9e,0xa0,0xa0,0xa0,0xa0,0xa0,
0x9f,0x9f,0x9f,0x9f,0x9d,0x9c,0x9b,0x9c,0x9c,0x9b,0x9b,0x9a,0x99,0x9c,0x9e,0x9e,
0xa0,0x9f,0x9e,0x9f,0x9e,0x9d,0x9d,0x9c,0x9b,0x9c,0x9c,0x9d,0x9e,0x9e,0x9e,0xa0,
0xa1,0xa2,0xa1,0xa2,0xa1,0x9e,0x9c,0x9a,0x9a,0x9c,0x9d,0x9e,0x9e,0x9e,0x9d,0x9d,
0x9e,0x9e,0x9f,0x9f,0x9e,0x9c,0x9c,0x9d,0x9d,0x9f,0xa0,0xa1,0xa1,0xa0,0x9e,0x9e,
0x9c,0x9c,0x9c,0x9b,0x9b,0x9d,0x9e,0x9e,0x9d,0x9e,0x9e,0x9d,0x9e,0xa0,0xa1,0xa2,
0xa0,0x9e,0x9d,0x9d,0x9d,0x9e,0x9e,0x9e,0x9f,0xa0,0x9f,0x9d,0x9d,0x9e,0x9e,0xa0,
0x9f,0x9e,0x9f,0x9e,0x9a,0x9c,0x9d,0x9f,0x9e,0x9e,0x9c,0x9c,0x9a,0x9b,0x9b,0x9e,
0xa0,0x9f,0x9e,0x9e,0x9e,0x9f,0x9e,0x9e,0xa0,0xa1,0xa1,0xa0,0x9e,0x9e,0x9e,0x9e,
0x9d,0x9c,0x9b,0x9c,0x9b,0x9d,0x9e,0x9f,0xa2,0xa4,0xa4,0xa4,0xa1,0xa0,0x9f,0x9d,
0x9b,0x9c,0x9c,0x9c,0x99,0x9e,0x9d,0x9e,0xa1,0xa2,0xa0,0xa0,0x9f,0x9d,0x9f,0x9f,
0x9e,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0x9f,0xa0,0xa0,0x9f,0xa0,0xa0,0xa1,0xa2,0xa0,
0x9c,0x9c,0x9c,0x9d,0x9c,0x9c,0x9d,0x9e,0x9e,0x9f,0x9c,0x9e,0x9e,0xa0,0xa0,0x9f,
0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0x9e,0xa0,0xa0,0x9f,0x9f,0x9e,0x9f,0x9e,
0x9c,0x9e,0x9f,0xa0,0x9e,0x9d,0x9c,0x9f,0x9f,0x9e,0x9b,0x99,0x98,0x9a,0x9b,0x9b,
0x9b,0x9e,0xa0,0xa1,0xa0,0x9e,0x9f,0xa1,0xa1,0x9e,0x9c,0x9d,0x9e,0xa0,0x9e,0x9c,
0x9d,0x9f,0xa1,0x9e,0x9c,0x9a,0x9b,0x9e,0xa0,0xa1,0xa2,0xa2,0xa1,0xa1,0x9e,0x9d,
0x9d,0x9f,0x9f,0x9f,0x9c,0x9a,0x9a,0x9b,0x9b,0x9d,0x9e,0x9f,0x9e,0x9d,0x99,0x97,
0x98,0x9c,0x9f,0xa1,0x9f,0x9e,0x9d,0x9d,0x9c,0x9b,0x9c,0x9e,0x9e,0x9e,0x9c,0x9a,
0x9c,0x9e,0x9d,0x9f,0x9e,0xa1,0xa2,0xa0,0x9e,0x9f,0x9f,0x9f,0x9c,0x9b,0x9a,0x9a,
0x9b,0x9e,0x9f,0xa0,0xa0,0xa1,0xa2,0xa2,0xa2,0xa3,0xa1,0xa0,0x9e,0x9f,0x9e,0x9c,
0x9a,0x9b,0x9c,0x9e,0x9f,0xa0,0xa0,0xa0,0x9e,0xa0,0xa0,0xa1,0xa1,0xa1,0x9f,0x9e,
0x9c,0x9c,0x9c,0x9e,0x9d,0x9d,0x9e,0x9d,0x9b,0x9c,0x9b,0x9b,0x9b,0x9c,0x9e,0xa0,
0x9e,0x9c,0x9c,0x9c,0x9c,0x9b,0x9a,0x9b,0x9b,0x9b,0x99,0x99,0x9b,0x9d,0x9f,0xa1,
0xa1,0xa1,0xa1,0xa2,0xa0,0x9f,0x9f,0xa0,0x9e,0x9c,0x9a,0x9b,0x9a,0x9b,0x9b,0x9c,
0x9d,0x9e,0x9f,0x9f,0x9f,0xa1,0xa0,0x9e,0x9d,0x9e,0x9e,0x9e,0x9c,0x9c,0x9c,0x9c,
0x9c,0x9b,0x9e,0x9e,0x9e,0xa0,0x9e,0x9d,0x9d,0x9e,0x9e,0x9e,0x9c,0x9d,0x9d,0x9b,
0x99,0x99,0x9a,0x9c,0x9d,0x9e,0x9c,0x9c,0x9d,0x9f,0xa1,0xa2,0xa0,0x9f,0x9e,0x9e,
0x9e,0x9f,0x9e,0x9d,0x9c,0x9c,0x9a,0x97,0x9a,0x9c,0x9d,0x9e,0x9e,0xa0,0xa1,0xa1,
0xa1,0xa2,0xa2,0xa1,0x9e,0x9d,0x9c,0x9b,0x9c,0x9d,0x9d,0x9e,0x9d,0x9d,0x9c,0x9a,
0x9b,0x9d,0x9e,0x9d,0x9d,0x9e,0x9e,0x9e,0x9c,0x9d,0x9d,0x9e,0x9c,0x99,0x98,0x97,
0x96,0x99,0x99,0x9b,0x9c,0x9d,0x9c,0x9e,0x9e,0xa0,0x9f,0xa1,0x9f,0x9f,0xa0,0x9e,
0x9a,0x99,0x98,0x98,0x99,0x9b,0x9c,0x9e,0x9e,0x9e,0xa0,0xa2,0xa4,0xa4,0xa4,0xa1,
0x9f,0x9f,0x9f,0x9e,0x9e,0x9f,0x9e,0x9f,0x9d,0x9e,0x9e,0x9e,0x9d,0x9e,0x9f,0xa1,
0xa2,0xa3,0xa3,0xa2,0xa1,0x9f,0x9d,0x9e,0x9d,0x9f,0xa0,0xa0,0x9d,0x9d,0x9c,0x9d,
0x9f,0xa2,0xa3,0xa2,0xa0,0x9e,0x9c,0x9d,0x9e,0x9f,0x9f,0xa0,0xa1,0xa0,0x9e,0x9f,
0xa0,0xa2,0xa1,0xa1,0x9e,0x9e,0x9d,0x9e,0x9d,0x9d,0x9e,0x9f,0x9e,0xa0,0x9e,0x9b,
0x9d,0x9f,0x9f,0x9e,0x9e,0x9d,0x9f,0x9f,0xa0,0xa1,0xa1,0xa1,0xa2,0xa4,0xa3,0xa1,
0x9f,0x9e,0x9c,0x9e,0x9d,0x9e,0x9e,0x9d,0x9b,0x9a,0x9b,0x9e,0x9f,0x9f,0x9f,0x9e,
0x9e,0x9e,0x9e,0xa1,0xa0,0x9f,0xa0,0x9f,0x9d,0x9e,0x9d,0x9d,0x9d,0x9f,0xa1,0xa4,
0xa2,0xa2,0xa2,0xa4,0xa2,0xa2,0xa2,0xa1,0xa1,0xa1,0x9e,0x9c,0x9b,0x9b,0x9a,0x9a,
0x9a,0x9e,0x9f,0x9e,0x9c,0x9d,0x9f,0xa1,0x9f,0xa2,0xa2,0xa0,0xa1,0xa1,0xa0,0xa0,
0xa0,0xa0,0xa0,0xa0,0x9f,0x9f,0x9f,0xa0,0xa1,0xa2,0xa1,0x9f,0x9e,0x9d,0x9b,0x9b,
0x9b,0x9b,0x9b,0x9b,0x9a,0x9d,0x9f,0xa2,0xa1,0xa2,0xa1,0xa1,0xa1,0xa1,0xa1,0xa0,
0xa0,0xa0,0xa0,0x9f,0x9e,0xa0,0x9f,0x9f,0xa0,0xa1,0xa1,0xa0,0x9f,0x9e,0xa0,0xa2,
0xa1,0xa1,0xa0,0xa1,0xa0,0x9f,0x9e,0x9d,0x9e,0x9e,0x9d,0x9d,0x9e,0xa0,0xa1,0xa1,
0x9e,0x9e,0xa1,0xa2,0xa1,0xa0,0x9f,0x9e,0x9d,0x9d,0x9d,0x9e,0x9e,0x9d,0x9c,0x9b,
0x9b,0x9b,0x9d,0x9e,0x9e,0xa1,0xa1,0x9e,0xa0,0xa0,0xa0,0xa0,0x9d,0x9c,0x9d,0x9d,
0x9b,0x9c,0x9c,0x9f,0xa0,0x9f,0x9d,0x9d,0xa0,0xa2,0xa2,0xa3,0xa2,0xa2,0xa4,0xa2,
0xa1,0xa1,0xa0,0x9f,0x9e,0x9e,0x9d,0x9b,0x99,0x9b,0x9d,0x9f,0xa1,0xa2,0xa4,0xa2,
0xa1,0xa3,0xa4,0xa4,0xa3,0xa2,0x9e,0x9b,0x98,0x99,0x9b,0x9b,0x9b,0x9c,0x9c,0x9e,
0x9d,0x9e,0x9e,0x9f,0xa0,0xa0,0x9f,0x9e,0x9d,0x9c,0x9b,0x9a,0x9a,0x9d,0x9e,0x9f,
0x9f,0xa1,0xa0,0x9e,0x9c,0x9c,0x9c,0x9d,0x9b,0x9b,0x9b,0x9c,0x9b,0x9d,0x9e,0xa0,
0xa1,0xa1,0x9e,0x9f,0x9f,0xa1,0xa1,0xa0,0x9e,0x9f,0xa1,0xa1,0x9f,0x9e,0x9d,0x9b,
0x9a,0x9a,0x9b,0x9d,0x9d,0x9e,0x9f,0xa0,0xa1,0xa1,0xa2,0xa1,0xa1,0xa1,0x9e,0x9e,
0x9e,0x9f,0x9f,0xa0,0x9e,0x9e,0x9e,0x9f,0x9d,0x9c,0x9d,0x9f,0x9e,0xa0,0x9e,0x9d,
0x9e,0xa0,0xa1,0xa1,0x9e,0x9c,0x9c,0x9c,0x9c,0x9d,0x9e,0x9e,0x9c,0x9a,0x99,0x9b,
0x9b,0x98,0x90,0x83,0x70,0x60,0x56,0x56,0x5e,0x6d,0x79,0x7e,0x7d,0x74,0x6a,0x63,
0x60,0x5f,0x5a,0x51,0x42,0x35,0x32,0x3b,0x51,0x6e,0x84,0x8b,0x86,0x76,0x62,0x52,
0x53,0x5d,0x6d,0x78,0x7b,0x75,0x6e,0x67,0x62,0x63,0x61,0x5c,0x51,0x42,0x36,0x34,
0x3c,0x4e,0x65,0x7a,0x89,0x95,0x9b,0x9c,0x9a,0x96,0x8a,0x7b,0x69,0x5b,0x53,0x56,
0x61,0x71,0x7c,0x82,0x7c,0x6e,0x63,0x5c,0x60,0x6a,0x74,0x78,0x7b,0x74,0x6a,0x65,
0x62,0x64,0x63,0x5d,0x51,0x42,0x36,0x31,0x37,0x48,0x5c,0x74,0x88,0x98,0x9d,0x9c,
0x97,0x8e,0x84,0x78,0x6c,0x62,0x58,0x4d,0x42,0x3b,0x38,0x3c,0x45,0x54,0x65,0x75,
0x81,0x8a,0x90,0x95,0x96,0x95,0x8c,0x7e,0x6b,0x5d,0x55,0x5b,0x67,0x76,0x7f,0x80,
0x79,0x6f,0x65,0x60,0x5a,0x5a,0x50,0x42,0x36,0x31,0x36,0x48,0x5f,0x76,0x87,0x92,
0x95,0x95,0x96,0x9a,0x9d,0xa1,0xa2,0xa1,0x9f,0x9d,0x9d,0xa0,0xa1,0xa4,0xa6,0xa5,
0xa2,0x9e,0x95,0x88,0x79,0x6a,0x5e,0x59,0x59,0x5f,0x67,0x76,0x7e,0x86,0x90,0x96,
0x96,0x93,0x89,0x7a,0x6a,0x5a,0x4b,0x40,0x3a,0x39,0x3b,0x3d,0x3e,0x3d,0x3a,0x39,
0x3e,0x4c,0x5d,0x6e,0x7a,0x7c,0x75,0x6d,0x64,0x5e,0x59,0x55,0x4f,0x47,0x3b,0x31,
0x2c,0x31,0x38,0x40,0x43,0x44,0x40,0x3c,0x36,0x34,0x35,0x38,0x3a,0x3b,0x3a,0x39,
0x38,0x3a,0x3c,0x3d,0x3c,0x3a,0x3a,0x3b,0x3c,0x3d,0x3d,0x3b,0x3a,0x3a,0x39,0x3b,
// Line 12
0x39,0x39,0x37,0x37,0x36,0x38,0x38,0x38,0x37,0x37,0x36,0x36,0x34,0x35,0x36,0x37,
0x35,0x36,0x35,0x38,0x3a,0x3b,0x3a,0x3a,0x3a,0x3b,0x3b,0x3d,0x3d,0x3d,0x3c,0x3a,
0x38,0x37,0x34,0x33,0x34,0x35,0x34,0x33,0x33,0x34,0x35,0x35,0x34,0x36,0x3a,0x3c,
0x3b,0x3b,0x39,0x35,0x36,0x3a,0x43,0x53,0x63,0x72,0x78,0x75,0x6a,0x5f,0x58,0x58,
0x5e,0x6a,0x73,0x78,0x77,0x6e,0x65,0x5e,0x5b,0x61,0x6b,0x73,0x75,0x75,0x71,0x6b,
0x64,0x60,0x5f,0x64,0x6a,0x6f,0x74,0x75,0x72,0x6c,0x66,0x62,0x5f,0x62,0x68,0x72,
0x76,0x75,0x6e,0x68,0x62,0x5e,0x5b,0x5f,0x66,0x70,0x77,0x76,0x70,0x6a,0x5f,0x58,
0x57,0x5d,0x66,0x6e,0x72,0x72,0x6c,0x66,0x60,0x5b,0x5f,0x65,0x6d,0x76,0x79,0x77,
0x74,0x6c,0x63,0x61,0x61,0x64,0x67,0x6b,0x6c,0x6f,0x73,0x79,0x81,0x8c,0x97,0xa2,
0xa9,0xaa,0xa4,0x96,0x84,0x73,0x66,0x5c,0x58,0x54,0x4f,0x46,0x3d,0x37,0x34,0x3b,
0x49,0x5e,0x71,0x80,0x87,0x8c,0x92,0x97,0x99,0x9f,0x9f,0x9f,0x9b,0x9a,0x9a,0x9c,
0x9e,0x9b,0x8d,0x7e,0x6d,0x60,0x59,0x52,0x49,0x41,0x37,0x31,0x35,0x45,0x5a,0x6f,
0x7c,0x7e,0x75,0x68,0x5c,0x54,0x4f,0x4a,0x43,0x3b,0x30,0x2e,0x3a,0x51,0x6a,0x7e,
0x84,0x82,0x77,0x67,0x58,0x4f,0x4a,0x47,0x40,0x38,0x30,0x2c,0x2c,0x30,0x37,0x46,
0x50,0x5f,0x6c,0x75,0x76,0x72,0x68,0x5f,0x59,0x56,0x53,0x4a,0x40,0x37,0x33,0x3a,
0x4b,0x62,0x79,0x8b,0x93,0x98,0x99,0x98,0x95,0x8b,0x7b,0x6b,0x5e,0x59,0x5c,0x67,
0x74,0x7c,0x79,0x6f,0x64,0x5f,0x5c,0x5a,0x54,0x48,0x39,0x2d,0x2c,0x38,0x50,0x6c,
0x7e,0x84,0x7c,0x6c,0x5e,0x59,0x54,0x51,0x49,0x3e,0x35,0x35,0x3e,0x53,0x6b,0x7e,
0x84,0x7d,0x6d,0x5c,0x53,0x54,0x5c,0x68,0x73,0x77,0x74,0x6c,0x65,0x5f,0x5d,0x5d,
0x59,0x51,0x44,0x38,0x2d,0x2a,0x2e,0x34,0x41,0x48,0x49,0x45,0x3a,0x32,0x37,0x41,
0x53,0x68,0x78,0x80,0x7a,0x6e,0x5e,0x55,0x56,0x62,0x6c,0x78,0x79,0x73,0x6b,0x61,
0x5a,0x5b,0x5b,0x59,0x53,0x48,0x3a,0x30,0x2b,0x2e,0x38,0x43,0x49,0x47,0x3e,0x34,
0x2e,0x33,0x3e,0x4f,0x63,0x76,0x7e,0x7c,0x72,0x68,0x61,0x5f,0x5f,0x66,0x6e,0x74,
0x79,0x81,0x88,0x8f,0x99,0xa3,0xaa,0xaf,0xa8,0x9b,0x8a,0x7a,0x6d,0x61,0x56,0x4f,
0x4d,0x49,0x43,0x3b,0x34,0x34,0x37,0x3f,0x42,0x43,0x40,0x3d,0x38,0x36,0x37,0x40,
0x4f,0x60,0x70,0x7d,0x86,0x8d,0x94,0x9a,0x9f,0xa2,0xa4,0xa2,0x9b,0x8e,0x7d,0x6b,
0x5d,0x54,0x4f,0x4a,0x49,0x43,0x3c,0x36,0x33,0x34,0x37,0x3d,0x3f,0x40,0x3b,0x35,
0x32,0x36,0x41,0x53,0x62,0x72,0x7e,0x87,0x8c,0x93,0x9a,0x9f,0xa2,0xa5,0xa4,0xa0,
0x9c,0x9a,0x9b,0x9d,0x9f,0xa2,0xa2,0xa2,0xa0,0x9d,0x9d,0x9c,0x9c,0x9f,0xa0,0x9f,
0x9e,0x9e,0x9e,0xa2,0xa1,0xa0,0xa0,0xa0,0x9e,0x9d,0x9b,0x9a,0x99,0x9b,0x9b,0x9c,
0x9d,0x9c,0x99,0x91,0x81,0x71,0x63,0x57,0x4b,0x44,0x3e,0x39,0x35,0x35,0x34,0x36,
0x39,0x3d,0x3f,0x40,0x3e,0x3a,0x37,0x34,0x34,0x37,0x3a,0x39,0x39,0x39,0x37,0x37,
0x36,0x37,0x36,0x3b,0x3a,0x3b,0x3b,0x3c,0x3c,0x40,0x3f,0x3e,0x3d,0x3c,0x3a,0x39,
0x39,0x40,0x4d,0x5b,0x68,0x76,0x83,0x8d,0x93,0x9b,0xa0,0xa5,0xa6,0xa5,0xa2,0x9e,
0x9a,0x99,0x99,0x9a,0x9b,0x9f,0x9f,0x9e,0x9b,0x9b,0x99,0x97,0x98,0x9b,0x9b,0x9b,
0x98,0x97,0x99,0x9c,0x9e,0x9f,0x9b,0x94,0x89,0x7c,0x6e,0x63,0x59,0x50,0x49,0x43,
0x3d,0x3a,0x37,0x36,0x36,0x3b,0x3d,0x3b,0x35,0x30,0x2c,0x2d,0x2d,0x30,0x32,0x34,
0x34,0x34,0x34,0x35,0x37,0x3e,0x3d,0x38,0x34,0x32,0x32,0x3a,0x43,0x50,0x60,0x6f,
0x7c,0x85,0x8d,0x92,0x9a,0xa2,0xa5,0xa5,0xa0,0x9c,0x99,0x99,0x99,0x9c,0x9e,0xa0,
0xa1,0xa0,0x9b,0x97,0x96,0x99,0x9a,0x99,0x93,0x8b,0x7e,0x72,0x64,0x57,0x4f,0x48,
0x42,0x3e,0x37,0x31,0x32,0x36,0x3a,0x3a,0x3a,0x3a,0x38,0x37,0x35,0x37,0x39,0x39,
0x36,0x37,0x3a,0x41,0x4b,0x5a,0x6a,0x78,0x82,0x89,0x8f,0x96,0x9d,0xa3,0xa4,0xa3,
0x9f,0x9c,0x99,0x9a,0x9e,0xa0,0xa0,0x9e,0x9c,0x9b,0x9b,0x9c,0x9c,0x9c,0x9b,0x99,
0x9a,0x9d,0x9f,0x9e,0x97,0x8c,0x7c,0x6c,0x5f,0x56,0x4f,0x48,0x40,0x3b,0x36,0x34,
0x33,0x36,0x38,0x39,0x38,0x36,0x31,0x34,0x32,0x32,0x34,0x35,0x36,0x37,0x38,0x38,
0x3a,0x3a,0x39,0x36,0x34,0x35,0x37,0x3a,0x3a,0x37,0x37,0x34,0x33,0x3a,0x45,0x53,
0x62,0x6f,0x7a,0x84,0x8b,0x92,0x97,0x9b,0x9d,0x9f,0x9e,0x9b,0x98,0x97,0x97,0x97,
0x99,0x9c,0x9d,0x9e,0x9b,0x95,0x8c,0x7e,0x6e,0x5f,0x52,0x48,0x41,0x3d,0x39,0x33,
0x33,0x31,0x30,0x34,0x37,0x3e,0x46,0x4e,0x55,0x63,0x70,0x7d,0x86,0x8d,0x93,0x99,
0x9e,0xa2,0xa2,0xa0,0x9c,0x99,0x97,0x99,0x9c,0xa2,0xa4,0xa3,0xa2,0x9f,0x9c,0x9b,
0x9b,0x9b,0x9c,0x9b,0x98,0x97,0x96,0x97,0x97,0x97,0x97,0x97,0x99,0x9c,0x9b,0x9b,
0x99,0x9b,0x9b,0x9c,0x9b,0x9b,0x9a,0x9b,0x9a,0x9a,0x9a,0x9a,0x9b,0x9c,0x99,0x9b,
0x97,0x99,0x9c,0x9d,0x9c,0x9a,0x99,0x97,0x98,0x99,0x98,0x96,0x96,0x96,0x97,0x99,
0x9a,0x9d,0x9e,0x9d,0x9a,0x9b,0x9b,0x9b,0x99,0x92,0x87,0x79,0x68,0x5b,0x50,0x49,
0x42,0x3b,0x35,0x32,0x30,0x33,0x35,0x3a,0x3d,0x3f,0x3c,0x38,0x33,0x32,0x34,0x36,
0x36,0x34,0x37,0x36,0x34,0x37,0x3a,0x3c,0x3c,0x3a,0x37,0x3a,0x3a,0x3d,0x3d,0x3d,
0x3a,0x39,0x35,0x33,0x34,0x37,0x38,0x38,0x36,0x34,0x34,0x35,0x36,0x38,0x3a,0x3a,
0x39,0x36,0x35,0x36,0x38,0x3a,0x3a,0x36,0x37,0x37,0x36,0x38,0x38,0x39,0x39,0x37,
0x34,0x34,0x36,0x37,0x37,0x36,0x34,0x34,0x34,0x34,0x34,0x37,0x37,0x37,0x36,0x37,
0x38,0x3c,0x3d,0x3c,0x3a,0x3b,0x3a,0x39,0x37,0x36,0x34,0x30,0x2d,0x2d,0x32,0x3e,
0x51,0x65,0x72,0x77,0x74,0x6c,0x61,0x58,0x50,0x4c,0x46,0x41,0x39,0x31,0x2d,0x2d,
0x30,0x3a,0x41,0x46,0x4f,0x57,0x63,0x72,0x7d,0x86,0x91,0x9b,0xa0,0xa0,0x9f,0x9f,
0x9e,0x9b,0x96,0x93,0x93,0x96,0x99,0x9f,0xa1,0x9f,0x96,0x8a,0x7c,0x6f,0x62,0x57,
0x4d,0x48,0x3f,0x39,0x34,0x34,0x38,0x4a,0x5a,0x6b,0x7b,0x86,0x8c,0x92,0x93,0x97,
0x9b,0xa0,0xa0,0x9b,0x8e,0x80,0x73,0x67,0x5c,0x58,0x5a,0x5e,0x65,0x6f,0x79,0x83,
0x8b,0x8f,0x93,0x9c,0xa2,0xa7,0xa4,0x99,0x89,0x76,0x65,0x58,0x51,0x4e,0x49,0x42,
0x3b,0x36,0x31,0x32,0x37,0x3a,0x3d,0x3d,0x3c,0x39,0x3a,0x37,0x37,0x38,0x39,0x39,
0x3c,0x3e,0x3c,0x3c,0x38,0x35,0x33,0x32,0x32,0x36,0x39,0x3b,0x3a,0x3a,0x39,0x3b,
0x3d,0x3f,0x3e,0x3e,0x3a,0x3b,0x3a,0x38,0x37,0x38,0x37,0x35,0x34,0x35,0x37,0x34,
0x36,0x36,0x37,0x38,0x37,0x36,0x38,0x3a,0x38,0x39,0x37,0x37,0x37,0x35,0x33,0x34,
0x36,0x38,0x38,0x37,0x34,0x35,0x38,0x3b,0x3a,0x3a,0x35,0x33,0x33,0x37,0x3d,0x4b,
0x58,0x68,0x77,0x84,0x8d,0x94,0x94,0x8f,0x83,0x75,0x67,0x5b,0x50,0x48,0x3e,0x39,
0x35,0x39,0x44,0x51,0x60,0x72,0x7e,0x86,0x89,0x8e,0x91,0x96,0x9b,0xa0,0x9e,0x9e,
0x99,0x96,0x95,0x95,0x96,0x9a,0x9d,0x9e,0x9b,0x95,0x88,0x7b,0x6b,0x5f,0x55,0x4f,
0x46,0x3c,0x34,0x30,0x34,0x42,0x55,0x67,0x76,0x7b,0x75,0x68,0x5a,0x50,0x4a,0x47,
0x41,0x3a,0x34,0x2e,0x2c,0x32,0x3b,0x41,0x44,0x42,0x3c,0x3a,0x36,0x34,0x34,0x33,
0x30,0x31,0x37,0x44,0x58,0x6d,0x7a,0x7d,0x74,0x67,0x5b,0x56,0x54,0x52,0x4c,0x41,
0x34,0x2c,0x29,0x2f,0x38,0x40,0x43,0x40,0x37,0x30,0x2e,0x34,0x41,0x50,0x60,0x70,
0x7c,0x8a,0x92,0x97,0x99,0x95,0x89,0x79,0x66,0x56,0x4f,0x4f,0x55,0x60,0x6e,0x79,
0x82,0x89,0x8f,0x96,0x9c,0xa0,0xa1,0x9e,0x93,0x86,0x78,0x6a,0x5f,0x59,0x54,0x4e,
0x44,0x3c,0x37,0x37,0x40,0x4f,0x5f,0x74,0x81,0x8f,0x97,0x99,0x95,0x8c,0x82,0x73,
0x65,0x5b,0x50,0x44,0x37,0x30,0x2e,0x36,0x45,0x58,0x6c,0x79,0x7d,0x7b,0x70,0x63,
0x57,0x4d,0x45,0x41,0x3d,0x3a,0x34,0x30,0x2e,0x30,0x38,0x42,0x4f,0x60,0x6e,0x76,
0x79,0x76,0x6d,0x63,0x5c,0x5a,0x5d,0x63,0x69,0x6e,0x74,0x79,0x7f,0x8b,0x97,0xa3,
0xa9,0xa8,0x9f,0x95,0x86,0x77,0x68,0x5b,0x50,0x4a,0x47,0x43,0x3e,0x3a,0x35,0x32,
0x30,0x32,0x36,0x3e,0x48,0x51,0x5c,0x67,0x74,0x81,0x8c,0x93,0x95,0x91,0x87,0x75,
0x68,0x59,0x4e,0x4f,0x55,0x60,0x70,0x7c,0x87,0x92,0x98,0x9c,0x9f,0xa2,0xa0,0x9d,
0x97,0x93,0x90,0x91,0x94,0x99,0x9e,0xa0,0x9f,0x9c,0x97,0x96,0x97,0x9a,0x9b,0x97,
0x8d,0x7f,0x6e,0x5f,0x57,0x57,0x5f,0x6b,0x75,0x7c,0x79,0x6f,0x66,0x62,0x5d,0x59,
0x51,0x46,0x37,0x30,0x2d,0x3a,0x50,0x6a,0x79,0x80,0x79,0x6c,0x60,0x59,0x51,0x4a,
0x41,0x38,0x31,0x30,0x3a,0x4d,0x61,0x72,0x80,0x8b,0x8f,0x92,0x94,0x92,0x88,0x79,
0x65,0x58,0x53,0x59,0x64,0x71,0x78,0x76,0x6e,0x67,0x5d,0x58,0x54,0x4f,0x43,0x3b,
0x30,0x2a,0x2c,0x32,0x39,0x40,0x40,0x40,0x3d,0x3b,0x38,0x37,0x32,0x2f,0x2b,0x2c,
0x34,0x42,0x54,0x64,0x6e,0x74,0x6f,0x67,0x5d,0x55,0x4f,0x4d,0x47,0x40,0x37,0x30,
0x2d,0x2f,0x35,0x3d,0x41,0x43,0x40,0x39,0x34,0x31,0x31,0x33,0x34,0x35,0x37,0x3a,
0x3a,0x38,0x37,0x33,0x31,0x33,0x34,0x34,0x37,0x38,0x37,0x37,0x34,0x32,0x34,0x34,
// Line 13
0x37,0x38,0x39,0x39,0x39,0x38,0x35,0x32,0x32,0x33,0x34,0x35,0x36,0x38,0x38,0x39,
0x38,0x39,0x3b,0x3d,0x3c,0x3d,0x3d,0x3d,0x3b,0x39,0x37,0x36,0x36,0x37,0x37,0x36,
0x34,0x34,0x35,0x34,0x33,0x34,0x35,0x36,0x37,0x37,0x35,0x33,0x31,0x32,0x34,0x37,
0x39,0x38,0x38,0x34,0x32,0x38,0x43,0x53,0x68,0x75,0x79,0x76,0x6c,0x62,0x5a,0x58,
0x5e,0x6b,0x76,0x7b,0x79,0x71,0x66,0x5e,0x5d,0x61,0x68,0x70,0x75,0x76,0x73,0x6c,
0x63,0x5d,0x5a,0x5e,0x67,0x70,0x76,0x78,0x76,0x6e,0x64,0x5e,0x5d,0x64,0x70,0x76,
0x76,0x76,0x71,0x69,0x5f,0x5c,0x5c,0x63,0x6a,0x72,0x76,0x77,0x70,0x68,0x60,0x5c,
0x5a,0x60,0x68,0x6e,0x73,0x73,0x6d,0x64,0x5c,0x58,0x5a,0x61,0x6b,0x73,0x77,0x76,
0x70,0x69,0x63,0x60,0x63,0x66,0x67,0x6a,0x6b,0x6e,0x71,0x76,0x7e,0x8c,0x9a,0xa6,
0xa9,0xab,0xa3,0x98,0x89,0x79,0x6b,0x62,0x5a,0x55,0x4f,0x48,0x3f,0x39,0x38,0x3e,
0x4d,0x60,0x73,0x82,0x8d,0x94,0x98,0x9b,0x9d,0x9f,0xa0,0x9f,0x9b,0x9b,0x9a,0x9a,
0x99,0x93,0x88,0x7c,0x6d,0x61,0x54,0x51,0x48,0x3f,0x39,0x37,0x3e,0x4f,0x63,0x75,
0x82,0x85,0x7d,0x70,0x64,0x5c,0x57,0x4e,0x43,0x39,0x33,0x33,0x3d,0x53,0x6a,0x7e,
0x84,0x80,0x72,0x65,0x5b,0x54,0x4f,0x49,0x41,0x3b,0x35,0x32,0x30,0x36,0x3e,0x48,
0x53,0x61,0x6d,0x79,0x7a,0x76,0x6d,0x64,0x5c,0x58,0x52,0x49,0x40,0x3a,0x37,0x3b,
0x4a,0x61,0x78,0x89,0x92,0x96,0x97,0x95,0x8f,0x86,0x78,0x68,0x5a,0x54,0x5b,0x6a,
0x76,0x7d,0x7a,0x71,0x66,0x5f,0x5d,0x5b,0x54,0x49,0x39,0x2b,0x2c,0x3b,0x56,0x71,
0x80,0x83,0x7b,0x6f,0x62,0x57,0x53,0x4d,0x43,0x3a,0x33,0x34,0x40,0x57,0x70,0x81,
0x85,0x80,0x74,0x67,0x5b,0x53,0x4c,0x44,0x3a,0x33,0x31,0x39,0x4a,0x60,0x76,0x89,
0x93,0x99,0x9c,0x9b,0x95,0x8b,0x7a,0x69,0x5d,0x5a,0x5d,0x64,0x6c,0x77,0x80,0x8b,
0x93,0x9a,0x9f,0x9d,0x8f,0x7c,0x66,0x56,0x4f,0x54,0x61,0x71,0x7a,0x7d,0x74,0x6b,
0x61,0x5a,0x56,0x52,0x4b,0x48,0x3d,0x31,0x2e,0x31,0x39,0x42,0x48,0x47,0x3f,0x36,
0x30,0x33,0x3e,0x51,0x67,0x78,0x7e,0x79,0x6d,0x62,0x5b,0x5d,0x64,0x6e,0x77,0x7b,
0x7e,0x86,0x8f,0x9b,0xa3,0xa3,0x96,0x81,0x6a,0x57,0x4c,0x51,0x57,0x63,0x72,0x7e,
0x88,0x93,0x98,0x9a,0x97,0x8d,0x7d,0x69,0x56,0x4a,0x44,0x41,0x3e,0x3c,0x3b,0x3b,
0x3c,0x3d,0x3e,0x41,0x48,0x51,0x5c,0x68,0x76,0x83,0x8e,0x95,0x99,0x9e,0xa3,0xa6,
0xa1,0x9a,0x8c,0x7c,0x6d,0x61,0x57,0x51,0x4a,0x44,0x41,0x3f,0x3d,0x3a,0x37,0x37,
0x3a,0x42,0x4d,0x5e,0x6e,0x79,0x7b,0x78,0x6d,0x63,0x5b,0x54,0x4f,0x4a,0x43,0x3b,
0x30,0x2e,0x2d,0x33,0x3d,0x48,0x55,0x67,0x71,0x78,0x7a,0x76,0x6f,0x69,0x61,0x5b,
0x55,0x4e,0x43,0x39,0x34,0x39,0x49,0x60,0x76,0x87,0x91,0x96,0x97,0x9a,0x9d,0xa1,
0xa4,0xa3,0x9f,0x9d,0x9e,0xa1,0xa1,0x9b,0x8f,0x7f,0x6f,0x61,0x56,0x51,0x4b,0x43,
0x3a,0x34,0x36,0x45,0x59,0x6f,0x80,0x87,0x80,0x72,0x63,0x5a,0x5a,0x63,0x6b,0x71,
0x76,0x7a,0x80,0x8a,0x93,0x9d,0xa0,0x96,0x82,0x6c,0x5b,0x53,0x55,0x60,0x6d,0x7a,
0x7e,0x78,0x6c,0x62,0x5c,0x5d,0x63,0x6b,0x71,0x75,0x74,0x6f,0x68,0x65,0x65,0x63,
0x67,0x6b,0x70,0x76,0x7b,0x80,0x89,0x90,0x9a,0xa6,0xac,0xac,0xa4,0x97,0x85,0x76,
0x6a,0x61,0x5b,0x57,0x4f,0x48,0x3f,0x39,0x38,0x42,0x53,0x65,0x78,0x87,0x93,0x9c,
0x9f,0x9b,0x94,0x8a,0x7c,0x6c,0x5d,0x55,0x55,0x5e,0x68,0x74,0x81,0x8b,0x90,0x93,
0x92,0x8f,0x85,0x78,0x64,0x54,0x47,0x3e,0x37,0x3b,0x3e,0x42,0x42,0x3f,0x3b,0x3a,
0x3e,0x48,0x59,0x6a,0x77,0x7d,0x78,0x6d,0x61,0x5d,0x5f,0x68,0x72,0x7a,0x7b,0x76,
0x6a,0x60,0x5b,0x5c,0x5b,0x59,0x4f,0x42,0x36,0x2e,0x29,0x2d,0x36,0x42,0x46,0x49,
0x41,0x38,0x35,0x3a,0x43,0x56,0x68,0x78,0x81,0x7f,0x73,0x66,0x5b,0x57,0x5b,0x64,
0x6c,0x74,0x78,0x7e,0x84,0x90,0x9d,0xa8,0xae,0xac,0xa5,0x9c,0x96,0x96,0x99,0x9e,
0x9e,0x9d,0x9c,0x9c,0x9d,0x9f,0x9e,0x9e,0x9f,0x9f,0x9d,0xa1,0xa0,0xa1,0xa1,0x9d,
0x91,0x83,0x74,0x64,0x57,0x53,0x56,0x61,0x6d,0x78,0x7a,0x77,0x6c,0x61,0x5b,0x5e,
0x68,0x76,0x7c,0x7b,0x72,0x69,0x60,0x5c,0x5b,0x5c,0x59,0x4f,0x3e,0x31,0x2c,0x35,
0x46,0x5e,0x75,0x86,0x92,0x96,0x97,0x99,0x9c,0x9f,0xa2,0xa4,0xa3,0x9e,0x9f,0x9d,
0x9d,0x9f,0x9f,0x9f,0x9d,0x9c,0x9b,0x9d,0x9c,0x9b,0x9a,0x99,0x98,0x9b,0x9c,0x9b,
0x95,0x8a,0x7c,0x6d,0x63,0x5a,0x53,0x4c,0x43,0x3b,0x38,0x3b,0x44,0x53,0x63,0x73,
0x7e,0x86,0x8b,0x8f,0x96,0x9c,0x9f,0x9f,0x9d,0x98,0x97,0x96,0x97,0x98,0x93,0x8a,
0x7c,0x6d,0x5e,0x54,0x4c,0x48,0x42,0x3d,0x39,0x3b,0x43,0x52,0x63,0x76,0x84,0x8f,
0x94,0x98,0x99,0x9c,0x9f,0xa3,0xa3,0x9c,0x8f,0x7e,0x6c,0x5d,0x54,0x56,0x5e,0x6a,
0x75,0x7a,0x79,0x76,0x6e,0x69,0x62,0x5a,0x51,0x49,0x3f,0x37,0x2d,0x2d,0x2b,0x2e,
0x34,0x3f,0x49,0x5d,0x69,0x74,0x79,0x74,0x68,0x5d,0x56,0x59,0x64,0x71,0x79,0x7a,
0x74,0x6b,0x64,0x63,0x64,0x66,0x60,0x52,0x3f,0x31,0x2d,0x34,0x47,0x5e,0x75,0x86,
0x90,0x97,0x97,0x93,0x8a,0x7f,0x70,0x62,0x52,0x4a,0x42,0x3c,0x3a,0x38,0x34,0x34,
0x37,0x3d,0x43,0x44,0x3f,0x37,0x30,0x2d,0x33,0x42,0x53,0x63,0x71,0x7d,0x86,0x90,
0x97,0x9a,0x96,0x89,0x76,0x63,0x54,0x51,0x54,0x5c,0x66,0x73,0x7f,0x8c,0x96,0x9f,
0xa2,0x9e,0x92,0x80,0x6a,0x59,0x50,0x52,0x5c,0x69,0x76,0x7f,0x89,0x8f,0x94,0x9a,
0xa1,0xa4,0xa4,0xa1,0x9b,0x9a,0x98,0x99,0x9a,0x96,0x8e,0x84,0x74,0x64,0x54,0x46,
0x3c,0x37,0x36,0x37,0x39,0x39,0x37,0x34,0x36,0x3e,0x49,0x5a,0x6b,0x78,0x7d,0x76,
0x68,0x5c,0x59,0x5d,0x66,0x73,0x7b,0x7a,0x78,0x6e,0x65,0x63,0x64,0x65,0x62,0x56,
0x46,0x3a,0x33,0x39,0x49,0x60,0x75,0x85,0x8f,0x92,0x92,0x93,0x96,0x9c,0xa2,0xa3,
0x9b,0x8e,0x7c,0x6d,0x62,0x5c,0x56,0x51,0x48,0x3e,0x36,0x38,0x41,0x53,0x6c,0x7a,
0x7e,0x7a,0x6c,0x5e,0x56,0x59,0x62,0x70,0x78,0x7a,0x75,0x6d,0x65,0x5f,0x5d,0x5a,
0x55,0x4d,0x43,0x39,0x34,0x32,0x32,0x36,0x3c,0x46,0x54,0x63,0x70,0x78,0x7a,0x76,
0x6c,0x63,0x5b,0x54,0x4e,0x47,0x3e,0x37,0x2f,0x2a,0x2a,0x2f,0x37,0x46,0x57,0x65,
0x6f,0x76,0x74,0x6e,0x66,0x60,0x5a,0x57,0x50,0x48,0x3d,0x34,0x31,0x3d,0x51,0x69,
0x7c,0x84,0x7f,0x71,0x5f,0x52,0x4b,0x48,0x45,0x3f,0x36,0x2c,0x29,0x2f,0x38,0x40,
0x43,0x3f,0x39,0x36,0x36,0x39,0x39,0x3c,0x38,0x37,0x3a,0x46,0x55,0x6c,0x7a,0x7e,
0x79,0x6c,0x5e,0x59,0x5b,0x65,0x71,0x7a,0x7a,0x74,0x6b,0x63,0x5d,0x5b,0x59,0x54,
0x4b,0x3e,0x2e,0x26,0x25,0x2b,0x34,0x3e,0x43,0x46,0x42,0x3b,0x34,0x33,0x33,0x36,
0x38,0x39,0x37,0x3b,0x36,0x36,0x39,0x3a,0x38,0x38,0x37,0x37,0x3a,0x43,0x50,0x5e,
0x6e,0x7c,0x88,0x91,0x97,0x9d,0xa4,0xa4,0xa4,0xa3,0x9a,0x8c,0x7b,0x6a,0x5c,0x53,
0x4b,0x47,0x44,0x41,0x3b,0x37,0x34,0x36,0x39,0x3e,0x3e,0x3d,0x3c,0x3b,0x38,0x39,
0x36,0x36,0x39,0x3c,0x3e,0x3c,0x38,0x33,0x31,0x36,0x40,0x52,0x65,0x74,0x78,0x77,
0x6c,0x5f,0x56,0x57,0x5e,0x6b,0x75,0x7a,0x78,0x72,0x6a,0x66,0x66,0x6a,0x6d,0x71,
0x71,0x71,0x74,0x79,0x81,0x8f,0x9a,0xa4,0xa9,0xa8,0xa1,0x9a,0x94,0x91,0x92,0x94,
0x94,0x90,0x84,0x73,0x61,0x53,0x48,0x43,0x40,0x3f,0x3a,0x38,0x35,0x35,0x35,0x3a,
0x3f,0x49,0x52,0x5e,0x68,0x78,0x84,0x8f,0x98,0x9b,0x96,0x8b,0x7a,0x69,0x5c,0x55,
0x55,0x5e,0x69,0x74,0x7e,0x89,0x92,0x99,0x9b,0x99,0x90,0x80,0x6c,0x5b,0x52,0x51,
0x59,0x67,0x75,0x81,0x8b,0x92,0x96,0x9c,0xa1,0xa4,0xa1,0x9f,0x94,0x89,0x7b,0x6e,
0x62,0x5c,0x59,0x5b,0x62,0x6b,0x74,0x7e,0x88,0x91,0x99,0x9d,0x9d,0x94,0x84,0x70,
0x5c,0x52,0x50,0x57,0x63,0x70,0x7b,0x85,0x8c,0x93,0x9a,0xa1,0xa6,0xa9,0xa4,0x99,
0x89,0x7a,0x6b,0x5f,0x57,0x50,0x48,0x41,0x37,0x31,0x34,0x40,0x53,0x6a,0x7a,0x80,
0x7b,0x71,0x62,0x55,0x4c,0x4a,0x48,0x44,0x3e,0x38,0x35,0x32,0x33,0x3c,0x47,0x54,
0x60,0x6e,0x74,0x76,0x72,0x6b,0x60,0x57,0x50,0x4d,0x48,0x40,0x34,0x2b,0x26,0x28,
0x30,0x39,0x41,0x42,0x3d,0x37,0x34,0x35,0x37,0x3a,0x3a,0x39,0x3b,0x42,0x4f,0x60,
0x71,0x7d,0x85,0x8c,0x91,0x96,0x9a,0x9e,0x9d,0x9d,0x98,0x8e,0x7d,0x71,0x63,0x58,
0x57,0x5e,0x69,0x76,0x7b,0x7a,0x72,0x67,0x5e,0x5c,0x5e,0x64,0x6a,0x6e,0x71,0x75,
0x7c,0x87,0x93,0xa1,0xa8,0xaa,0xa5,0x9c,0x90,0x84,0x77,0x6a,0x5c,0x51,0x49,0x45,
0x42,0x3f,0x3b,0x3a,0x36,0x32,0x33,0x39,0x42,0x53,0x61,0x6b,0x74,0x78,0x74,0x6e,
0x65,0x5f,0x5b,0x57,0x4d,0x43,0x39,0x35,0x38,0x47,0x5b,0x73,0x85,0x90,0x95,0x97,
0x98,0x9b,0x9e,0xa1,0x9f,0x9f,0x9d,0x9a,0x97,0x96,0x99,0x9c,0x9f,0x9f,0x9c,0x97,
0x8d,0x80,0x70,0x63,0x59,0x51,0x4b,0x42,0x3c,0x37,0x32,0x2f,0x32,0x36,0x39,0x3d,
0x3b,0x38,0x37,0x35,0x34,0x37,0x38,0x39,0x39,0x39,0x38,0x38,0x37,0x37,0x38,0x3a,
0x39,0x3a,0x3d,0x3d,0x3d,0x3d,0x3c,0x3b,0x3b,0x3c,0x3b,0x3a,0x39,0x37,0x35,0x35,
// Line 14
0x39,0x3b,0x3a,0x38,0x36,0x37,0x38,0x39,0x37,0x37,0x35,0x34,0x35,0x36,0x37,0x3a,
0x3b,0x3a,0x3a,0x3b,0x3c,0x3d,0x3c,0x39,0x37,0x37,0x36,0x37,0x37,0x37,0x35,0x36,
0x36,0x37,0x37,0x38,0x37,0x37,0x38,0x39,0x39,0x38,0x36,0x34,0x32,0x32,0x31,0x36,
0x34,0x36,0x37,0x39,0x3c,0x44,0x50,0x5a,0x64,0x6b,0x72,0x79,0x81,0x88,0x8f,0x95,
0x97,0x97,0x95,0x95,0x94,0x96,0x97,0x98,0x98,0x97,0x95,0x98,0x9a,0x9b,0x98,0x92,
0x89,0x82,0x79,0x6f,0x64,0x5c,0x53,0x4c,0x46,0x42,0x3d,0x3a,0x38,0x37,0x39,0x3a,
0x3b,0x3b,0x39,0x37,0x34,0x36,0x37,0x38,0x3a,0x3a,0x38,0x3a,0x3c,0x41,0x48,0x51,
0x5a,0x64,0x6d,0x77,0x80,0x87,0x8d,0x91,0x95,0x97,0x98,0x96,0x95,0x94,0x95,0x95,
0x93,0x94,0x94,0x95,0x95,0x96,0x95,0x92,0x8c,0x84,0x7c,0x76,0x6d,0x64,0x5e,0x52,
0x48,0x43,0x3e,0x3b,0x37,0x36,0x35,0x35,0x34,0x36,0x37,0x39,0x37,0x37,0x39,0x39,
0x37,0x37,0x38,0x3a,0x3d,0x3f,0x43,0x4a,0x52,0x5b,0x65,0x70,0x7a,0x83,0x8a,0x8e,
0x90,0x93,0x96,0x97,0x97,0x96,0x95,0x96,0x95,0x95,0x95,0x98,0x99,0x9a,0x98,0x96,
0x8f,0x8d,0x85,0x7c,0x74,0x6d,0x63,0x5a,0x50,0x48,0x43,0x3f,0x3c,0x3a,0x37,0x36,
0x36,0x37,0x37,0x37,0x38,0x3a,0x3a,0x3c,0x3d,0x3d,0x3d,0x3a,0x39,0x3d,0x41,0x46,
0x49,0x54,0x5c,0x67,0x6f,0x78,0x80,0x89,0x8f,0x93,0x96,0x98,0x9a,0x9b,0x9a,0x9a,
0x9b,0x9c,0x9b,0x9a,0x98,0x96,0x95,0x94,0x92,0x90,0x8c,0x85,0x7d,0x76,0x6d,0x62,
0x59,0x50,0x48,0x43,0x3e,0x3b,0x38,0x37,0x36,0x37,0x37,0x39,0x3a,0x3b,0x3a,0x37,
0x38,0x3a,0x3a,0x3c,0x3c,0x3c,0x3d,0x40,0x45,0x4a,0x55,0x5e,0x6a,0x74,0x7d,0x84,
0x8b,0x92,0x97,0x9a,0x99,0x99,0x98,0x98,0x95,0x96,0x96,0x96,0x96,0x97,0x96,0x95,
0x93,0x92,0x91,0x8c,0x84,0x7b,0x74,0x6d,0x63,0x5c,0x53,0x4d,0x47,0x44,0x3f,0x3c,
0x3a,0x39,0x39,0x3a,0x39,0x39,0x39,0x38,0x37,0x3b,0x3c,0x3d,0x3d,0x3d,0x3e,0x42,
0x46,0x4c,0x52,0x5a,0x62,0x6a,0x72,0x7b,0x84,0x8d,0x93,0x96,0x98,0x99,0x99,0x9a,
0x9a,0x9b,0x9c,0x9b,0x9a,0x98,0x98,0x96,0x95,0x97,0x96,0x92,0x8b,0x83,0x78,0x71,
0x69,0x60,0x5a,0x50,0x48,0x43,0x40,0x3e,0x3d,0x3c,0x3b,0x39,0x37,0x38,0x3b,0x3d,
0x3e,0x3d,0x3c,0x3a,0x39,0x39,0x3a,0x3d,0x43,0x48,0x4c,0x51,0x59,0x63,0x6f,0x7a,
0x81,0x87,0x8c,0x8f,0x92,0x96,0x98,0x98,0x9a,0x9a,0x98,0x98,0x98,0x98,0x97,0x97,
0x95,0x96,0x96,0x93,0x90,0x8b,0x82,0x78,0x6f,0x6a,0x62,0x5a,0x52,0x4a,0x45,0x42,
0x40,0x40,0x3e,0x3d,0x3d,0x3d,0x3b,0x3a,0x3a,0x3a,0x39,0x3a,0x3a,0x3c,0x3d,0x3b,
0x39,0x39,0x3a,0x39,0x3a,0x3c,0x3c,0x3d,0x3c,0x3c,0x3b,0x3c,0x3c,0x3d,0x3e,0x3e,
0x3d,0x3d,0x3a,0x3a,0x3c,0x3d,0x3d,0x3e,0x3e,0x3f,0x3f,0x3e,0x3e,0x3d,0x3e,0x3c,
0x3a,0x3a,0x39,0x39,0x3a,0x3b,0x3a,0x3b,0x3b,0x3d,0x3d,0x3c,0x3b,0x3c,0x3d,0x3d,
0x3b,0x3b,0x39,0x39,0x39,0x3a,0x3b,0x3b,0x3a,0x3a,0x3b,0x3d,0x3d,0x3d,0x3d,0x3c,
0x3b,0x3c,0x3b,0x39,0x3a,0x3b,0x39,0x37,0x35,0x36,0x37,0x39,0x38,0x3a,0x3a,0x3a,
0x39,0x39,0x39,0x3b,0x3a,0x3d,0x3d,0x3f,0x41,0x47,0x4f,0x59,0x63,0x6d,0x75,0x7c,
0x85,0x8d,0x92,0x95,0x97,0x98,0x9a,0x9a,0x98,0x97,0x96,0x95,0x94,0x94,0x93,0x94,
0x96,0x95,0x94,0x96,0x96,0x99,0x9b,0x9c,0x9b,0x9a,0x98,0x97,0x96,0x97,0x97,0x95,
0x94,0x94,0x95,0x96,0x95,0x96,0x97,0x97,0x97,0x97,0x97,0x97,0x98,0x98,0x93,0x8d,
0x85,0x7d,0x75,0x6d,0x63,0x5c,0x56,0x4d,0x44,0x40,0x3e,0x3e,0x3d,0x40,0x3d,0x3a,
0x38,0x3a,0x39,0x3a,0x39,0x37,0x38,0x39,0x37,0x37,0x35,0x36,0x39,0x3c,0x3b,0x39,
0x37,0x39,0x3c,0x3d,0x3d,0x3d,0x3d,0x3e,0x3b,0x38,0x36,0x39,0x3c,0x3c,0x3a,0x3a,
0x3a,0x3b,0x38,0x3b,0x3a,0x3d,0x3d,0x3d,0x39,0x39,0x37,0x37,0x39,0x39,0x37,0x36,
0x34,0x35,0x36,0x37,0x39,0x3b,0x3a,0x3a,0x3b,0x3c,0x3c,0x3a,0x39,0x39,0x38,0x38,
0x37,0x37,0x37,0x36,0x35,0x37,0x3a,0x3d,0x3d,0x3c,0x3a,0x3c,0x3d,0x3e,0x3a,0x3d,
0x3a,0x39,0x39,0x37,0x35,0x38,0x3a,0x39,0x38,0x39,0x3c,0x3d,0x3d,0x3b,0x3b,0x3b,
0x39,0x39,0x37,0x37,0x36,0x36,0x35,0x36,0x36,0x37,0x36,0x36,0x35,0x36,0x37,0x38,
0x39,0x3b,0x3d,0x3c,0x3a,0x3a,0x3b,0x3c,0x3d,0x3d,0x3b,0x3c,0x37,0x37,0x38,0x3a,
0x3c,0x3d,0x3c,0x3a,0x39,0x39,0x37,0x37,0x37,0x39,0x38,0x3a,0x37,0x36,0x36,0x35,
0x35,0x37,0x38,0x3a,0x37,0x35,0x33,0x33,0x34,0x37,0x37,0x38,0x37,0x37,0x35,0x35,
0x34,0x37,0x39,0x39,0x39,0x39,0x37,0x37,0x37,0x37,0x37,0x39,0x3a,0x3b,0x3a,0x3a,
0x39,0x3b,0x3a,0x3a,0x3b,0x3c,0x38,0x36,0x34,0x37,0x37,0x39,0x37,0x3a,0x3d,0x3d,
0x39,0x39,0x39,0x3a,0x3d,0x3d,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3c,0x3b,0x38,
0x36,0x36,0x36,0x37,0x37,0x39,0x37,0x37,0x36,0x36,0x37,0x37,0x37,0x37,0x38,0x3a,
0x38,0x37,0x34,0x36,0x38,0x3a,0x36,0x38,0x35,0x34,0x35,0x37,0x37,0x3d,0x3b,0x39,
0x37,0x37,0x37,0x37,0x39,0x3a,0x3a,0x38,0x37,0x38,0x39,0x39,0x39,0x3b,0x39,0x37,
0x37,0x39,0x37,0x37,0x37,0x37,0x37,0x37,0x36,0x37,0x38,0x39,0x37,0x37,0x36,0x35,
0x36,0x37,0x36,0x39,0x36,0x36,0x37,0x37,0x37,0x37,0x36,0x34,0x32,0x32,0x33,0x33,
0x36,0x37,0x37,0x3a,0x3a,0x38,0x38,0x3a,0x3a,0x3a,0x37,0x36,0x34,0x34,0x33,0x34,
0x36,0x37,0x37,0x37,0x35,0x35,0x36,0x37,0x37,0x39,0x38,0x38,0x38,0x39,0x39,0x39,
0x37,0x36,0x35,0x34,0x34,0x33,0x37,0x37,0x37,0x3a,0x3a,0x39,0x3a,0x37,0x36,0x37,
0x36,0x36,0x36,0x36,0x32,0x32,0x32,0x35,0x36,0x37,0x37,0x37,0x39,0x37,0x36,0x37,
0x37,0x37,0x38,0x38,0x37,0x38,0x37,0x37,0x37,0x37,0x37,0x39,0x3a,0x3c,0x3c,0x3d,
0x3b,0x39,0x3a,0x38,0x37,0x37,0x37,0x37,0x37,0x36,0x33,0x33,0x34,0x37,0x37,0x37,
0x34,0x33,0x34,0x34,0x32,0x34,0x35,0x35,0x35,0x37,0x37,0x3a,0x39,0x39,0x37,0x37,
0x37,0x37,0x36,0x35,0x35,0x37,0x36,0x36,0x37,0x37,0x36,0x37,0x37,0x37,0x39,0x3a,
0x37,0x38,0x3a,0x3a,0x38,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,0x37,0x36,0x36,0x37,0x38,
0x39,0x3a,0x38,0x36,0x35,0x35,0x37,0x37,0x37,0x37,0x36,0x35,0x34,0x34,0x36,0x37,
0x39,0x3c,0x3b,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,0x3a,0x39,0x37,0x37,0x37,0x37,0x37,
0x35,0x39,0x37,0x37,0x38,0x3a,0x3a,0x3a,0x37,0x36,0x36,0x37,0x37,0x38,0x39,0x37,
0x34,0x35,0x37,0x37,0x37,0x37,0x37,0x38,0x37,0x38,0x38,0x38,0x37,0x38,0x39,0x39,
0x37,0x39,0x36,0x35,0x37,0x39,0x3b,0x3b,0x39,0x39,0x3b,0x3a,0x3a,0x3b,0x3b,0x39,
0x37,0x35,0x34,0x33,0x32,0x32,0x32,0x34,0x35,0x35,0x36,0x37,0x37,0x3a,0x3a,0x3a,
0x3b,0x3c,0x3a,0x39,0x36,0x36,0x37,0x37,0x37,0x37,0x39,0x38,0x37,0x37,0x37,0x38,
0x39,0x3a,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x39,0x36,0x35,0x34,0x32,0x34,0x34,0x32,
0x32,0x34,0x34,0x37,0x38,0x3a,0x3b,0x3c,0x3a,0x39,0x37,0x37,0x37,0x38,0x36,0x34,
0x34,0x34,0x33,0x34,0x34,0x35,0x37,0x39,0x39,0x39,0x3a,0x39,0x37,0x36,0x36,0x37,
0x37,0x36,0x37,0x38,0x37,0x37,0x39,0x38,0x37,0x3a,0x3a,0x38,0x37,0x37,0x36,0x37,
0x37,0x3a,0x39,0x39,0x39,0x39,0x3a,0x3a,0x38,0x38,0x37,0x37,0x36,0x35,0x34,0x36,
0x34,0x34,0x36,0x36,0x36,0x34,0x35,0x34,0x34,0x36,0x37,0x35,0x37,0x36,0x36,0x37,
0x37,0x37,0x37,0x38,0x39,0x3a,0x39,0x38,0x38,0x37,0x35,0x36,0x37,0x39,0x38,0x37,
0x36,0x35,0x35,0x36,0x36,0x37,0x37,0x35,0x36,0x38,0x3c,0x42,0x4a,0x52,0x59,0x61,
0x6a,0x74,0x7e,0x83,0x88,0x8e,0x91,0x92,0x94,0x94,0x93,0x95,0x95,0x96,0x95,0x95,
0x96,0x98,0x98,0x97,0x98,0x9b,0x98,0x96,0x97,0x96,0x95,0x95,0x94,0x95,0x96,0x95,
0x95,0x95,0x93,0x93,0x93,0x94,0x94,0x95,0x96,0x94,0x92,0x95,0x97,0x98,0x9b,0x99,
0x96,0x94,0x91,0x8c,0x84,0x7c,0x70,0x67,0x5e,0x56,0x4d,0x47,0x40,0x3d,0x3c,0x3a,
0x37,0x38,0x39,0x38,0x39,0x39,0x38,0x37,0x37,0x38,0x37,0x37,0x36,0x37,0x39,0x38,
0x36,0x37,0x38,0x39,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x39,0x39,0x37,0x37,0x36,0x37,
0x35,0x39,0x39,0x38,0x38,0x39,0x38,0x39,0x39,0x39,0x3a,0x3a,0x39,0x39,0x39,0x39,
0x3a,0x3d,0x3c,0x38,0x39,0x37,0x37,0x38,0x38,0x36,0x37,0x36,0x35,0x37,0x38,0x38,
0x37,0x38,0x37,0x37,0x36,0x37,0x37,0x38,0x36,0x35,0x35,0x36,0x36,0x37,0x37,0x37,
0x39,0x39,0x37,0x37,0x37,0x3a,0x3a,0x3b,0x3a,0x38,0x36,0x34,0x35,0x39,0x3b,0x3a,
0x3a,0x38,0x35,0x35,0x35,0x36,0x37,0x37,0x35,0x34,0x32,0x33,0x32,0x36,0x36,0x36,
0x36,0x37,0x37,0x39,0x37,0x38,0x39,0x38,0x37,0x39,0x3a,0x38,0x37,0x36,0x34,0x34,
0x32,0x32,0x32,0x34,0x33,0x32,0x31,0x31,0x32,0x34,0x35,0x34,0x34,0x34,0x34,0x36,
0x37,0x37,0x36,0x3a,0x36,0x35,0x36,0x38,0x3a,0x3b,0x39,0x39,0x3a,0x3b,0x3a,0x38,
0x37,0x37,0x37,0x37,0x36,0x37,0x37,0x37,0x35,0x35,0x32,0x32,0x33,0x33,0x32,0x33,
0x32,0x34,0x35,0x35,0x35,0x37,0x3a,0x3c,0x3a,0x3a,0x3a,0x37,0x37,0x39,0x38,0x3a,
// Line 15
0x38,0x37,0x35,0x36,0x37,0x39,0x3a,0x3a,0x38,0x39,0x3a,0x3a,0x38,0x37,0x36,0x36,
0x36,0x36,0x35,0x35,0x35,0x35,0x37,0x39,0x39,0x3a,0x39,0x37,0x36,0x37,0x36,0x36,
0x35,0x35,0x35,0x36,0x36,0x37,0x36,0x35,0x34,0x35,0x36,0x35,0x34,0x32,0x31,0x31,
0x33,0x36,0x37,0x39,0x36,0x33,0x35,0x3c,0x4c,0x62,0x73,0x7d,0x7f,0x79,0x6c,0x61,
0x5b,0x5f,0x68,0x72,0x78,0x7a,0x74,0x6b,0x62,0x5f,0x61,0x68,0x70,0x77,0x7a,0x7a,
0x75,0x6f,0x67,0x62,0x62,0x68,0x70,0x75,0x77,0x75,0x71,0x67,0x61,0x5e,0x60,0x6a,
0x73,0x79,0x7c,0x7a,0x73,0x6c,0x68,0x65,0x67,0x6d,0x73,0x77,0x79,0x75,0x6f,0x69,
0x62,0x5f,0x61,0x68,0x71,0x79,0x7d,0x7c,0x74,0x6a,0x61,0x60,0x65,0x6f,0x76,0x7c,
0x7c,0x7a,0x73,0x6a,0x64,0x64,0x69,0x6e,0x71,0x73,0x73,0x77,0x7a,0x80,0x89,0x96,
0xa3,0xab,0xae,0xa6,0x9b,0x8f,0x81,0x73,0x69,0x61,0x58,0x54,0x4c,0x45,0x3e,0x3b,
0x3d,0x48,0x57,0x6a,0x7b,0x88,0x91,0x96,0x9a,0x9b,0x9d,0xa1,0xa3,0xa3,0x9a,0x8c,
0x7c,0x6e,0x62,0x5e,0x5f,0x65,0x6d,0x74,0x7b,0x82,0x88,0x91,0x99,0xa1,0xa7,0xa8,
0xa3,0x9e,0x99,0x98,0x96,0x9a,0x99,0x96,0x8e,0x80,0x6d,0x5d,0x54,0x56,0x61,0x6f,
0x7a,0x82,0x81,0x78,0x6e,0x66,0x63,0x66,0x6d,0x74,0x7a,0x7b,0x77,0x71,0x69,0x65,
0x67,0x6e,0x74,0x7a,0x7d,0x7c,0x75,0x6e,0x66,0x64,0x67,0x70,0x77,0x7c,0x7c,0x78,
0x70,0x6a,0x63,0x5f,0x5e,0x5b,0x52,0x4a,0x3c,0x32,0x2d,0x2d,0x31,0x38,0x40,0x4b,
0x57,0x66,0x72,0x7b,0x7c,0x77,0x6c,0x63,0x60,0x64,0x6f,0x79,0x7f,0x80,0x79,0x6f,
0x64,0x60,0x61,0x6a,0x73,0x7a,0x78,0x75,0x6b,0x63,0x5f,0x5e,0x5c,0x5c,0x55,0x4b,
0x41,0x36,0x2e,0x2c,0x2f,0x36,0x3f,0x4a,0x55,0x61,0x6a,0x72,0x79,0x84,0x8e,0x98,
0xa1,0xa7,0xa9,0xa9,0xa4,0x9f,0x99,0x98,0x9a,0x9e,0x9c,0x94,0x84,0x72,0x61,0x59,
0x5b,0x64,0x70,0x7c,0x7d,0x77,0x6c,0x63,0x5e,0x5b,0x5a,0x52,0x47,0x3d,0x37,0x3a,
0x49,0x61,0x78,0x88,0x8a,0x80,0x6f,0x5e,0x57,0x5b,0x67,0x74,0x7b,0x7d,0x76,0x6e,
0x67,0x63,0x65,0x6d,0x73,0x78,0x7b,0x79,0x71,0x6b,0x64,0x60,0x5e,0x5a,0x55,0x4a,
0x43,0x38,0x2f,0x2e,0x2f,0x38,0x46,0x52,0x5c,0x67,0x6e,0x75,0x7d,0x87,0x90,0x97,
0x99,0x94,0x87,0x75,0x62,0x58,0x59,0x65,0x73,0x80,0x85,0x83,0x7b,0x6f,0x65,0x5e,
0x56,0x4e,0x42,0x36,0x2e,0x32,0x40,0x56,0x6d,0x83,0x91,0x98,0x9a,0x9b,0x98,0x92,
0x88,0x7b,0x6d,0x61,0x59,0x5e,0x67,0x73,0x7e,0x86,0x8c,0x93,0x9a,0xa1,0xa6,0xa8,
0xa5,0x9e,0x95,0x88,0x79,0x6d,0x62,0x59,0x52,0x4c,0x45,0x3d,0x3a,0x3d,0x49,0x5a,
0x6d,0x80,0x8e,0x96,0x98,0x9b,0x9e,0xa3,0xaa,0xaa,0xa4,0x9d,0x97,0x95,0x95,0x96,
0x93,0x8e,0x81,0x71,0x62,0x5b,0x5e,0x67,0x77,0x81,0x83,0x7f,0x77,0x6e,0x67,0x65,
0x68,0x6b,0x71,0x74,0x77,0x7c,0x83,0x8f,0x9b,0xa5,0xab,0xad,0xa8,0xa0,0x99,0x97,
0x98,0x9c,0x9d,0x99,0x8e,0x7f,0x6e,0x60,0x55,0x4e,0x46,0x40,0x3a,0x3b,0x44,0x54,
0x65,0x78,0x83,0x84,0x7c,0x6f,0x60,0x52,0x4e,0x48,0x43,0x3e,0x39,0x32,0x2f,0x2b,
0x2f,0x3a,0x49,0x58,0x67,0x72,0x77,0x78,0x72,0x6c,0x65,0x60,0x5b,0x56,0x4d,0x42,
0x3a,0x39,0x3f,0x50,0x67,0x80,0x92,0x9b,0x9a,0x98,0x99,0x9d,0xa1,0xa6,0xa6,0x9e,
0x8f,0x7d,0x6c,0x5f,0x58,0x5a,0x62,0x6e,0x77,0x7d,0x7d,0x76,0x6d,0x68,0x66,0x6a,
0x73,0x7b,0x7e,0x7a,0x73,0x6c,0x67,0x69,0x6a,0x70,0x76,0x76,0x75,0x7a,0x7e,0x87,
0x92,0x9d,0xa5,0xa7,0xa9,0xa7,0xa2,0x99,0x8c,0x7d,0x6e,0x60,0x5b,0x61,0x6a,0x74,
0x7c,0x7e,0x77,0x6e,0x63,0x5e,0x59,0x55,0x4e,0x46,0x3b,0x33,0x2b,0x29,0x2e,0x39,
0x42,0x45,0x40,0x3a,0x36,0x36,0x37,0x36,0x36,0x38,0x3a,0x42,0x4e,0x61,0x73,0x7e,
0x81,0x77,0x65,0x5a,0x5a,0x63,0x73,0x7c,0x7f,0x7d,0x74,0x6b,0x65,0x65,0x67,0x64,
0x59,0x48,0x35,0x2a,0x2d,0x3f,0x57,0x6f,0x7e,0x84,0x7e,0x71,0x61,0x56,0x4e,0x4a,
0x45,0x3e,0x37,0x32,0x2f,0x2f,0x36,0x3c,0x46,0x55,0x63,0x70,0x77,0x78,0x72,0x6a,
0x60,0x58,0x52,0x50,0x4c,0x45,0x3b,0x31,0x29,0x2b,0x32,0x3f,0x4b,0x56,0x5f,0x66,
0x6f,0x7c,0x8a,0x95,0x9d,0x9f,0x98,0x8a,0x78,0x6a,0x5e,0x59,0x5d,0x67,0x73,0x7e,
0x81,0x7c,0x72,0x67,0x5e,0x62,0x6b,0x76,0x7d,0x7e,0x79,0x71,0x67,0x61,0x5f,0x67,
0x6f,0x75,0x79,0x77,0x72,0x6a,0x63,0x61,0x63,0x6a,0x70,0x73,0x75,0x77,0x79,0x81,
0x8e,0x9d,0xa9,0xb0,0xb0,0xab,0x9f,0x90,0x80,0x71,0x62,0x58,0x50,0x4b,0x44,0x3e,
0x38,0x33,0x31,0x31,0x35,0x3a,0x40,0x40,0x3d,0x3a,0x36,0x34,0x33,0x35,0x37,0x36,
0x35,0x33,0x34,0x36,0x39,0x3b,0x3b,0x39,0x35,0x33,0x35,0x40,0x52,0x65,0x74,0x7c,
0x7b,0x78,0x70,0x68,0x64,0x6a,0x6f,0x75,0x7c,0x80,0x81,0x89,0x91,0x98,0x9b,0x96,
0x88,0x77,0x61,0x4f,0x42,0x3c,0x3b,0x3c,0x3e,0x3f,0x3f,0x42,0x43,0x41,0x3d,0x38,
0x34,0x35,0x37,0x38,0x35,0x2f,0x2b,0x31,0x3d,0x50,0x63,0x75,0x7d,0x7d,0x73,0x66,
0x5d,0x5c,0x59,0x51,0x48,0x3d,0x35,0x35,0x3e,0x51,0x6a,0x7e,0x8c,0x94,0x96,0x96,
0x96,0x9d,0xa1,0xa4,0xa0,0x98,0x88,0x7a,0x6a,0x5e,0x54,0x49,0x40,0x3c,0x3a,0x3a,
0x37,0x35,0x32,0x35,0x3a,0x46,0x54,0x67,0x74,0x7c,0x7b,0x74,0x6a,0x62,0x5f,0x60,
0x67,0x6d,0x72,0x77,0x7b,0x83,0x8e,0x9b,0xa5,0xae,0xb2,0xad,0xa4,0x99,0x8a,0x7d,
0x71,0x68,0x64,0x66,0x69,0x71,0x77,0x7e,0x83,0x8b,0x94,0x9b,0x9a,0x96,0x87,0x72,
0x5f,0x54,0x56,0x62,0x70,0x7b,0x81,0x7e,0x74,0x67,0x62,0x60,0x5d,0x57,0x4a,0x3a,
0x35,0x39,0x48,0x61,0x78,0x88,0x8c,0x81,0x6e,0x5f,0x59,0x5f,0x69,0x75,0x7c,0x7e,
0x78,0x6e,0x64,0x62,0x64,0x6b,0x71,0x75,0x78,0x7c,0x80,0x87,0x92,0x9e,0xa3,0x9e,
0x90,0x7c,0x67,0x55,0x47,0x40,0x3e,0x3c,0x3a,0x41,0x4c,0x5c,0x6c,0x7c,0x86,0x92,
0x98,0x9b,0x96,0x90,0x83,0x75,0x62,0x54,0x49,0x45,0x41,0x3f,0x3c,0x3a,0x38,0x39,
0x3a,0x3c,0x3e,0x3a,0x34,0x2f,0x2f,0x37,0x47,0x5a,0x6b,0x7a,0x85,0x8c,0x93,0x9a,
0xa0,0xa5,0xa6,0xa4,0x9f,0x9d,0x9a,0x9b,0x9c,0x9f,0xa0,0xa3,0xa5,0xa7,0xa5,0xa7,
0xa3,0x9f,0x9c,0x99,0x99,0x9d,0x9e,0x9e,0x9a,0x92,0x85,0x76,0x68,0x5c,0x53,0x4c,
0x44,0x3d,0x37,0x37,0x3e,0x4d,0x5f,0x73,0x83,0x8f,0x95,0x99,0x9a,0x98,0x90,0x82,
0x70,0x61,0x51,0x44,0x3b,0x39,0x36,0x35,0x35,0x38,0x3a,0x40,0x40,0x3e,0x3b,0x38,
0x36,0x37,0x35,0x33,0x33,0x35,0x36,0x3b,0x46,0x56,0x66,0x77,0x81,0x8a,0x91,0x98,
0x9f,0xa7,0xac,0xac,0xa8,0xa3,0x9e,0x9d,0x9f,0xa3,0xa3,0xa3,0xa1,0xa0,0x9f,0x9d,
0x9d,0x9d,0x9c,0x97,0x91,0x89,0x7e,0x71,0x61,0x53,0x49,0x43,0x40,0x3b,0x3e,0x39,
0x32,0x32,0x33,0x3b,0x47,0x53,0x5f,0x6b,0x77,0x83,0x8f,0x96,0x9a,0x9a,0x92,0x82,
0x6f,0x5f,0x52,0x4a,0x44,0x3f,0x3a,0x39,0x37,0x38,0x3a,0x3e,0x40,0x3e,0x36,0x2f,
0x2b,0x2f,0x3a,0x45,0x59,0x6b,0x77,0x84,0x8d,0x96,0xa1,0xa2,0x9a,0x8e,0x7d,0x6c,
0x60,0x5b,0x5f,0x69,0x75,0x80,0x87,0x8d,0x92,0x98,0xa0,0xa5,0xa6,0xa3,0x9f,0x9a,
0x98,0x99,0x9b,0x9b,0x95,0x8b,0x7e,0x6f,0x5f,0x53,0x4a,0x46,0x40,0x3e,0x3d,0x44,
0x50,0x5f,0x6f,0x80,0x8e,0x98,0x9b,0x9b,0x9a,0x9d,0xa1,0xa3,0x9f,0x97,0x8a,0x78,
0x67,0x5b,0x58,0x5f,0x6a,0x75,0x7c,0x7d,0x7a,0x73,0x6a,0x64,0x61,0x5f,0x57,0x4a,
0x3f,0x39,0x3a,0x46,0x57,0x6e,0x82,0x8f,0x94,0x95,0x97,0x9b,0x9d,0xa4,0xa5,0xa3,
0x9f,0x9d,0x9b,0x9e,0x9f,0x9b,0x91,0x80,0x6b,0x5e,0x57,0x5c,0x67,0x74,0x7e,0x80,
0x7c,0x75,0x6d,0x68,0x63,0x5c,0x55,0x49,0x3d,0x37,0x37,0x40,0x54,0x6b,0x80,0x90,
0x98,0x9b,0x9c,0x9d,0x9f,0xa6,0xa9,0xa7,0x9b,0x8b,0x79,0x6b,0x61,0x59,0x50,0x4a,
0x40,0x38,0x39,0x41,0x52,0x64,0x74,0x7c,0x7c,0x75,0x69,0x5b,0x56,0x52,0x4b,0x45,
0x3c,0x38,0x3b,0x42,0x51,0x65,0x7b,0x8d,0x95,0x99,0x96,0x98,0x9b,0xa0,0xa3,0xa1,
0x99,0x8b,0x7d,0x70,0x65,0x61,0x61,0x65,0x6c,0x75,0x7f,0x88,0x8e,0x93,0x9a,0xa0,
0xa3,0xa5,0xa4,0x9f,0x95,0x89,0x7b,0x6e,0x66,0x63,0x64,0x69,0x6d,0x75,0x7d,0x87,
0x8e,0x96,0x9c,0xa0,0xa3,0xa3,0xa0,0x9b,0x93,0x87,0x77,0x69,0x5e,0x5b,0x60,0x68,
0x73,0x7e,0x83,0x80,0x77,0x6d,0x65,0x61,0x65,0x6b,0x71,0x77,0x77,0x72,0x6b,0x63,
0x5f,0x63,0x69,0x71,0x75,0x7a,0x77,0x72,0x6c,0x69,0x66,0x67,0x6a,0x72,0x7a,0x7d,
0x7a,0x75,0x6c,0x65,0x60,0x64,0x6f,0x7c,0x81,0x81,0x7b,0x71,0x66,0x5f,0x5a,0x59,
0x58,0x55,0x4a,0x3b,0x2f,0x29,0x29,0x2f,0x37,0x3f,0x43,0x45,0x3e,0x36,0x32,0x31,
0x32,0x36,0x39,0x3b,0x3b,0x3b,0x3a,0x3b,0x38,0x35,0x36,0x38,0x38,0x3b,0x3d,0x3d,
0x3b,0x3a,0x38,0x36,0x35,0x37,0x39,0x3a,0x39,0x35,0x32,0x31,0x35,0x42,0x52,0x63,
0x72,0x7c,0x7a,0x73,0x6a,0x63,0x5b,0x58,0x50,0x48,0x42,0x3c,0x3c,0x48,0x57,0x6c,
0x80,0x8e,0x93,0x94,0x94,0x98,0x9d,0xa1,0xa4,0xa4,0xa2,0x9e,0x9d,0xa1,0xa3,0xa6,
0xa6,0xa5,0xa0,0x9e,0x9d,0xa0,0xa3,0xa3,0x9d,0x97,0x8b,0x7e,0x6f,0x60,0x53,0x4a,
// Line 16
0x39,0x3b,0x39,0x39,0x37,0x36,0x36,0x38,0x39,0x3a,0x39,0x39,0x38,0x38,0x37,0x35,
0x32,0x32,0x32,0x34,0x36,0x38,0x39,0x39,0x38,0x39,0x3c,0x3f,0x40,0x3e,0x3a,0x36,
0x32,0x34,0x36,0x38,0x38,0x37,0x36,0x36,0x38,0x39,0x3a,0x38,0x35,0x35,0x34,0x34,
0x35,0x38,0x39,0x38,0x36,0x34,0x35,0x3f,0x4b,0x5b,0x6d,0x77,0x7a,0x75,0x68,0x5c,
0x57,0x5a,0x63,0x6f,0x76,0x78,0x73,0x6b,0x62,0x5f,0x60,0x65,0x6c,0x73,0x74,0x71,
0x6d,0x67,0x61,0x5f,0x60,0x66,0x6e,0x76,0x7b,0x7b,0x74,0x6b,0x62,0x5f,0x5e,0x62,
0x6a,0x72,0x75,0x72,0x6b,0x63,0x5f,0x5f,0x62,0x67,0x6d,0x72,0x74,0x73,0x6e,0x68,
0x60,0x5c,0x5d,0x65,0x6d,0x76,0x7c,0x7b,0x73,0x6a,0x61,0x5e,0x61,0x69,0x72,0x79,
0x79,0x76,0x70,0x69,0x62,0x60,0x63,0x69,0x6d,0x70,0x70,0x70,0x73,0x7b,0x87,0x96,
0xa3,0xac,0xae,0xa9,0x9e,0x90,0x7f,0x70,0x66,0x60,0x59,0x52,0x49,0x41,0x3a,0x37,
0x3b,0x46,0x56,0x67,0x76,0x86,0x90,0x95,0x98,0x9a,0x9c,0x9e,0x9f,0x9d,0x96,0x8a,
0x7a,0x69,0x5c,0x55,0x57,0x60,0x6c,0x75,0x7a,0x7a,0x73,0x68,0x61,0x60,0x62,0x6a,
0x71,0x76,0x77,0x71,0x67,0x62,0x5f,0x62,0x69,0x6e,0x70,0x72,0x74,0x79,0x7e,0x89,
0x96,0xa4,0xac,0xac,0xa4,0x9c,0x97,0x97,0x9b,0x9f,0x9f,0x97,0x8a,0x7b,0x6c,0x61,
0x59,0x51,0x48,0x3f,0x35,0x34,0x3b,0x4c,0x63,0x77,0x7f,0x7e,0x75,0x68,0x5d,0x58,
0x51,0x4e,0x46,0x3c,0x31,0x35,0x41,0x57,0x70,0x81,0x84,0x7d,0x6d,0x5d,0x52,0x4e,
0x4d,0x4a,0x42,0x39,0x31,0x30,0x32,0x39,0x41,0x48,0x4e,0x56,0x5e,0x6a,0x79,0x87,
0x90,0x96,0x94,0x8e,0x83,0x74,0x63,0x55,0x49,0x42,0x3b,0x3e,0x3b,0x39,0x36,0x33,
0x31,0x37,0x3f,0x49,0x55,0x62,0x6d,0x7a,0x84,0x90,0x9a,0x9e,0x99,0x8d,0x7d,0x6c,
0x5e,0x5a,0x5c,0x64,0x71,0x7c,0x83,0x8a,0x92,0x9b,0xa4,0xaa,0xab,0xac,0xa9,0xa5,
0x9f,0x9c,0x9d,0xa1,0xa4,0xa5,0xa2,0x9e,0x99,0x96,0x98,0x9a,0x9b,0x99,0x90,0x85,
0x77,0x6d,0x62,0x5a,0x52,0x4c,0x44,0x3e,0x3b,0x41,0x4c,0x5c,0x6b,0x7b,0x89,0x92,
0x95,0x94,0x90,0x8d,0x84,0x78,0x67,0x57,0x4a,0x40,0x3e,0x3d,0x3e,0x3f,0x3b,0x37,
0x35,0x3a,0x44,0x54,0x67,0x73,0x78,0x76,0x6f,0x66,0x60,0x5b,0x56,0x50,0x46,0x3c,
0x36,0x35,0x40,0x56,0x6c,0x7e,0x84,0x7c,0x6c,0x5e,0x56,0x5a,0x65,0x75,0x80,0x82,
0x7c,0x72,0x67,0x61,0x60,0x63,0x67,0x69,0x6b,0x70,0x76,0x7f,0x8b,0x99,0xa5,0xad,
0xb1,0xae,0xa6,0x9a,0x8a,0x7a,0x6d,0x63,0x5f,0x60,0x61,0x67,0x6b,0x74,0x7b,0x87,
0x92,0x9b,0x9b,0x95,0x88,0x76,0x64,0x54,0x47,0x3e,0x39,0x37,0x37,0x38,0x38,0x38,
0x36,0x37,0x3d,0x4b,0x5c,0x6d,0x79,0x7b,0x73,0x69,0x5f,0x5b,0x61,0x6b,0x75,0x7a,
0x79,0x72,0x65,0x5c,0x57,0x59,0x5c,0x59,0x4c,0x41,0x32,0x2b,0x2c,0x33,0x3f,0x49,
0x49,0x42,0x39,0x31,0x30,0x38,0x47,0x58,0x69,0x77,0x84,0x8e,0x95,0x99,0x97,0x93,
0x87,0x76,0x65,0x5a,0x59,0x61,0x6d,0x77,0x7c,0x7b,0x72,0x68,0x5e,0x56,0x4f,0x4c,
0x44,0x3b,0x32,0x2c,0x29,0x31,0x37,0x3f,0x45,0x4d,0x54,0x5f,0x69,0x75,0x83,0x90,
0x99,0xa0,0xa3,0xa5,0xa5,0xa5,0xa2,0x9f,0x9c,0x9a,0x9a,0x9e,0xa1,0xa4,0xa3,0x9f,
0x95,0x89,0x7b,0x6c,0x5f,0x56,0x50,0x4b,0x46,0x3e,0x37,0x3c,0x48,0x5b,0x71,0x81,
0x84,0x7b,0x6b,0x5a,0x53,0x5b,0x6a,0x79,0x7f,0x7d,0x72,0x66,0x5b,0x58,0x59,0x5a,
0x54,0x49,0x3c,0x32,0x2c,0x2e,0x33,0x3c,0x42,0x44,0x3f,0x37,0x30,0x30,0x38,0x45,
0x54,0x66,0x76,0x82,0x8c,0x94,0x99,0x99,0x93,0x87,0x75,0x65,0x5a,0x57,0x60,0x6d,
0x75,0x7b,0x78,0x70,0x65,0x5c,0x55,0x53,0x4f,0x48,0x3b,0x2f,0x27,0x29,0x30,0x38,
0x3d,0x3f,0x3b,0x35,0x30,0x2f,0x30,0x36,0x3b,0x3c,0x39,0x35,0x33,0x37,0x39,0x38,
0x36,0x36,0x35,0x33,0x34,0x3b,0x49,0x5c,0x6e,0x7b,0x81,0x7b,0x6f,0x66,0x60,0x60,
0x64,0x6b,0x72,0x77,0x79,0x7d,0x83,0x8e,0x9a,0xa6,0xab,0xa7,0x9c,0x90,0x83,0x76,
0x6b,0x5f,0x54,0x4f,0x49,0x43,0x3e,0x3a,0x38,0x35,0x31,0x30,0x33,0x3f,0x4e,0x5c,
0x6b,0x76,0x78,0x74,0x69,0x62,0x60,0x66,0x70,0x7c,0x82,0x81,0x77,0x6b,0x61,0x5c,
0x5d,0x5e,0x58,0x4b,0x39,0x2c,0x2d,0x3d,0x55,0x72,0x85,0x8a,0x81,0x71,0x63,0x5b,
0x5b,0x60,0x67,0x6e,0x73,0x78,0x7f,0x8a,0x94,0xa1,0xa7,0xa8,0xa4,0x9f,0x9b,0x99,
0x98,0x9a,0x9b,0xa2,0xa2,0xa4,0xa3,0xa1,0x9d,0xa0,0x9e,0x9e,0xa0,0xa1,0xa0,0xa0,
0x9f,0x9f,0x9f,0x9f,0x9f,0x9e,0x9b,0x99,0x98,0x9a,0x9b,0x97,0x8e,0x83,0x76,0x6a,
0x5d,0x51,0x48,0x41,0x3c,0x3a,0x38,0x39,0x37,0x36,0x33,0x36,0x3e,0x4d,0x5d,0x6d,
0x79,0x7d,0x79,0x6d,0x61,0x5f,0x63,0x6d,0x78,0x7e,0x7d,0x74,0x6b,0x62,0x5d,0x63,
0x6c,0x73,0x75,0x72,0x71,0x79,0x84,0x92,0x9c,0xa2,0x9d,0x8f,0x7a,0x66,0x56,0x52,
0x56,0x61,0x6f,0x7b,0x84,0x8e,0x96,0x9c,0xa1,0xa4,0xa3,0xa1,0x9b,0x9a,0x9a,0x9a,
0x9c,0x9f,0xa0,0x9f,0x9e,0xa0,0x9f,0x9a,0x90,0x82,0x72,0x65,0x5d,0x5b,0x5e,0x67,
0x70,0x7a,0x83,0x8c,0x95,0x9e,0xa2,0xa5,0xa4,0x9f,0x98,0x90,0x84,0x75,0x69,0x5e,
0x57,0x59,0x60,0x6c,0x79,0x80,0x7e,0x74,0x67,0x5e,0x5b,0x62,0x6c,0x76,0x7a,0x77,
0x6d,0x65,0x5f,0x60,0x63,0x62,0x59,0x4c,0x3d,0x34,0x36,0x45,0x5c,0x74,0x83,0x84,
0x79,0x6b,0x5b,0x4f,0x4b,0x48,0x41,0x38,0x33,0x36,0x45,0x5c,0x75,0x86,0x8a,0x80,
0x6d,0x60,0x5a,0x5c,0x66,0x70,0x75,0x79,0x7b,0x83,0x8c,0x98,0x9f,0x9e,0x8f,0x79,
0x64,0x56,0x51,0x58,0x68,0x79,0x81,0x7f,0x75,0x69,0x60,0x5c,0x60,0x69,0x72,0x77,
0x79,0x74,0x6d,0x66,0x62,0x63,0x66,0x69,0x6a,0x6b,0x6d,0x72,0x79,0x84,0x91,0x9e,
0xa7,0xaa,0xa7,0x9f,0x90,0x83,0x72,0x69,0x60,0x5b,0x56,0x4f,0x44,0x3b,0x33,0x34,
0x44,0x59,0x6e,0x7c,0x81,0x79,0x6c,0x61,0x5c,0x5e,0x6b,0x73,0x77,0x7b,0x7f,0x84,
0x8c,0x95,0x99,0x97,0x89,0x76,0x62,0x54,0x4d,0x52,0x5d,0x6b,0x77,0x82,0x8a,0x93,
0x9b,0xa2,0xa5,0xa5,0xa2,0x9f,0x97,0x8a,0x7b,0x6c,0x5f,0x58,0x59,0x5f,0x68,0x6e,
0x79,0x81,0x87,0x90,0x99,0xa1,0xa8,0xa8,0xa2,0x9f,0x9a,0x97,0x97,0x98,0x9b,0x9f,
0xa0,0xa2,0xa2,0x9f,0x95,0x87,0x77,0x6a,0x5e,0x56,0x4d,0x44,0x3c,0x36,0x33,0x3a,
0x49,0x60,0x74,0x7f,0x81,0x76,0x69,0x5d,0x55,0x53,0x4f,0x48,0x3f,0x35,0x34,0x42,
0x58,0x71,0x81,0x85,0x7a,0x69,0x58,0x4f,0x54,0x63,0x71,0x79,0x79,0x72,0x68,0x61,
0x5c,0x5c,0x5a,0x54,0x48,0x3c,0x30,0x29,0x28,0x2e,0x36,0x40,0x49,0x53,0x5d,0x69,
0x74,0x81,0x8a,0x92,0x96,0x98,0x92,0x85,0x73,0x60,0x50,0x46,0x41,0x3f,0x3e,0x3f,
0x3c,0x39,0x38,0x3c,0x42,0x45,0x40,0x38,0x33,0x32,0x39,0x48,0x5b,0x70,0x7c,0x7b,
0x70,0x62,0x58,0x54,0x5a,0x66,0x72,0x79,0x79,0x73,0x6c,0x68,0x66,0x66,0x64,0x5c,
0x4d,0x3f,0x35,0x33,0x3b,0x50,0x65,0x79,0x87,0x91,0x95,0x97,0x93,0x8e,0x84,0x76,
0x65,0x59,0x53,0x58,0x64,0x71,0x79,0x79,0x74,0x69,0x5f,0x5d,0x62,0x6d,0x76,0x7a,
0x77,0x72,0x6a,0x63,0x5f,0x5d,0x59,0x52,0x48,0x3c,0x30,0x2c,0x29,0x2d,0x33,0x3c,
0x47,0x57,0x63,0x6d,0x76,0x7a,0x75,0x6c,0x60,0x5a,0x5e,0x69,0x74,0x7b,0x7a,0x73,
0x68,0x60,0x5c,0x63,0x6d,0x74,0x75,0x73,0x70,0x72,0x7b,0x89,0x97,0xa1,0x9f,0x90,
0x7a,0x64,0x57,0x56,0x5e,0x6b,0x77,0x7f,0x7c,0x72,0x69,0x60,0x5a,0x57,0x4d,0x40,
0x34,0x30,0x32,0x3c,0x54,0x6c,0x7d,0x83,0x7c,0x6e,0x61,0x5a,0x5b,0x65,0x6d,0x73,
0x77,0x7c,0x82,0x8c,0x98,0xa2,0xa8,0xa8,0xa4,0x9f,0x9a,0x99,0x99,0x9c,0x9c,0x98,
0x90,0x83,0x74,0x67,0x5c,0x58,0x5c,0x65,0x6f,0x77,0x7f,0x86,0x8c,0x94,0x97,0x94,
0x8b,0x7c,0x68,0x5b,0x54,0x58,0x65,0x71,0x7b,0x86,0x8c,0x92,0x96,0x9c,0xa1,0xa4,
0xa2,0x9d,0x95,0x8a,0x7b,0x70,0x67,0x5f,0x5b,0x5e,0x65,0x6d,0x77,0x81,0x89,0x8f,
0x95,0x9c,0xa2,0xa7,0xa7,0xa2,0x9a,0x8c,0x7c,0x71,0x66,0x60,0x60,0x62,0x68,0x70,
0x76,0x7d,0x82,0x8a,0x90,0x99,0xa0,0xa3,0xa1,0x9f,0x99,0x94,0x96,0x9a,0x9b,0x99,
0x8c,0x7d,0x6d,0x60,0x54,0x48,0x47,0x43,0x3c,0x38,0x34,0x34,0x36,0x37,0x37,0x36,
0x34,0x33,0x33,0x31,0x2e,0x30,0x31,0x32,0x31,0x32,0x33,0x36,0x38,0x38,0x36,0x36,
0x36,0x36,0x39,0x3f,0x48,0x55,0x62,0x6e,0x7b,0x88,0x90,0x95,0x9a,0x9f,0xa2,0xa4,
0x9e,0x94,0x86,0x75,0x64,0x58,0x4e,0x49,0x48,0x43,0x3b,0x35,0x32,0x33,0x36,0x3b,
0x3f,0x41,0x3f,0x3a,0x33,0x31,0x33,0x3f,0x51,0x63,0x72,0x7f,0x88,0x90,0x97,0x9d,
0xa5,0xa7,0xa8,0xa5,0x9c,0x90,0x80,0x6f,0x63,0x58,0x4f,0x49,0x44,0x41,0x3d,0x36,
0x2f,0x2f,0x32,0x37,0x3f,0x4a,0x55,0x61,0x6b,0x77,0x83,0x90,0x97,0x99,0x93,0x87,
0x76,0x66,0x5b,0x59,0x5e,0x68,0x72,0x7c,0x85,0x8d,0x96,0x9e,0xa0,0x99,0x8b,0x76,
0x5e,0x51,0x50,0x5a,0x6a,0x78,0x7e,0x7d,0x73,0x68,0x5f,0x5a,0x55,0x50,0x46,0x38,
0x2c,0x27,0x29,0x30,0x38,0x3f,0x41,0x3f,0x3a,0x36,0x34,0x34,0x34,0x34,0x33,0x33,
0x34,0x37,0x37,0x36,0x34,0x33,0x31,0x32,0x34,0x36,0x38,0x39,0x37,0x38,0x38,0x39,
// Line 17
0x39,0x39,0x39,0x3a,0x38,0x3a,0x3a,0x3a,0x38,0x37,0x37,0x3a,0x39,0x38,0x38,0x3a,
0x3b,0x3c,0x39,0x39,0x39,0x39,0x38,0x37,0x38,0x3a,0x38,0x38,0x37,0x36,0x37,0x37,
0x38,0x38,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x39,0x3a,0x3c,0x3b,0x39,0x38,0x36,
0x36,0x39,0x39,0x37,0x36,0x34,0x34,0x3a,0x48,0x5c,0x6f,0x7b,0x7d,0x78,0x6c,0x63,
0x5e,0x63,0x6c,0x75,0x7c,0x7d,0x76,0x6c,0x62,0x5e,0x62,0x6a,0x71,0x77,0x79,0x76,
0x70,0x6b,0x66,0x62,0x62,0x67,0x6f,0x77,0x79,0x79,0x76,0x6e,0x65,0x62,0x63,0x6a,
0x72,0x79,0x79,0x76,0x6f,0x68,0x61,0x60,0x62,0x6b,0x74,0x7b,0x7c,0x7b,0x73,0x6b,
0x64,0x61,0x64,0x6b,0x70,0x76,0x77,0x75,0x6f,0x67,0x60,0x5e,0x63,0x6e,0x77,0x7e,
0x7e,0x79,0x71,0x6b,0x66,0x65,0x68,0x6e,0x71,0x73,0x73,0x74,0x76,0x7f,0x8a,0x96,
0xa1,0xac,0xad,0xa9,0x9e,0x8f,0x80,0x71,0x66,0x5e,0x57,0x4f,0x48,0x40,0x3b,0x38,
0x3a,0x45,0x56,0x6d,0x7f,0x8e,0x96,0x9b,0x9c,0x9f,0xa0,0xa3,0xa4,0xa3,0x9a,0x8c,
0x7b,0x6a,0x5a,0x57,0x57,0x60,0x6b,0x76,0x7d,0x7d,0x76,0x6a,0x64,0x64,0x6a,0x73,
0x79,0x7d,0x7c,0x75,0x6c,0x65,0x63,0x66,0x6b,0x6f,0x72,0x72,0x73,0x77,0x7f,0x8c,
0x99,0xa5,0xac,0xab,0xa4,0x9e,0x99,0x97,0x97,0x9b,0x9b,0x95,0x8b,0x7e,0x6e,0x60,
0x52,0x48,0x42,0x3c,0x36,0x38,0x41,0x53,0x67,0x77,0x7f,0x7d,0x73,0x68,0x5e,0x59,
0x56,0x53,0x4b,0x40,0x39,0x3c,0x49,0x60,0x77,0x88,0x8a,0x7f,0x6e,0x60,0x57,0x5c,
0x64,0x6e,0x75,0x79,0x7a,0x85,0x8e,0x99,0xa4,0xab,0xa9,0xa3,0x96,0x89,0x7c,0x6f,
0x62,0x57,0x4f,0x49,0x46,0x46,0x44,0x42,0x3c,0x38,0x37,0x3d,0x44,0x4c,0x55,0x60,
0x69,0x74,0x7e,0x89,0x92,0x99,0x9a,0x93,0x83,0x6f,0x5e,0x55,0x57,0x61,0x6f,0x7c,
0x82,0x80,0x78,0x6b,0x60,0x5a,0x57,0x4f,0x48,0x3d,0x31,0x2d,0x2f,0x37,0x3f,0x44,
0x44,0x42,0x3b,0x35,0x32,0x32,0x33,0x36,0x36,0x38,0x39,0x3b,0x3d,0x3f,0x40,0x3f,
0x3c,0x3c,0x3b,0x3c,0x3b,0x38,0x34,0x32,0x34,0x3c,0x49,0x5a,0x6a,0x78,0x87,0x8f,
0x95,0x99,0x97,0x8f,0x83,0x73,0x61,0x53,0x48,0x42,0x3d,0x3d,0x3b,0x38,0x36,0x37,
0x39,0x3f,0x44,0x4e,0x5b,0x69,0x76,0x82,0x8b,0x91,0x95,0x93,0x8c,0x82,0x75,0x65,
0x55,0x4a,0x42,0x40,0x3e,0x3f,0x3f,0x3f,0x3e,0x3d,0x3e,0x44,0x4f,0x62,0x73,0x7c,
0x7b,0x72,0x67,0x5e,0x5c,0x63,0x6f,0x7b,0x7e,0x7b,0x72,0x67,0x60,0x63,0x63,0x60,
0x56,0x46,0x37,0x2f,0x35,0x49,0x64,0x7d,0x89,0x89,0x7e,0x6f,0x61,0x5b,0x55,0x4f,
0x44,0x39,0x32,0x36,0x48,0x61,0x77,0x84,0x86,0x7e,0x6f,0x61,0x58,0x54,0x4f,0x48,
0x3f,0x39,0x3a,0x44,0x56,0x6b,0x80,0x8d,0x93,0x95,0x96,0x9b,0xa0,0xa6,0xa9,0xa6,
0xa2,0xa0,0x9e,0xa2,0xa3,0x9f,0x95,0x84,0x6f,0x60,0x5a,0x5d,0x65,0x70,0x79,0x7d,
0x78,0x6f,0x67,0x62,0x5c,0x55,0x4f,0x46,0x3c,0x33,0x2d,0x2d,0x34,0x3e,0x45,0x46,
0x40,0x3a,0x34,0x36,0x3d,0x4b,0x5b,0x6b,0x78,0x86,0x90,0x9a,0xa0,0xa0,0x9a,0x8f,
0x7f,0x6f,0x62,0x5e,0x61,0x69,0x72,0x7c,0x85,0x8e,0x96,0x9b,0xa0,0xa5,0xa8,0xa6,
0xa1,0x99,0x8d,0x7e,0x6e,0x60,0x5c,0x60,0x6a,0x75,0x7e,0x81,0x82,0x77,0x6c,0x67,
0x67,0x6b,0x6f,0x70,0x71,0x76,0x7c,0x84,0x8e,0x9b,0xa6,0xaf,0xb0,0xab,0xa3,0x9e,
0x9a,0x99,0x9b,0x9e,0xa0,0xa1,0x9f,0x9c,0x9a,0x9a,0x9b,0x9c,0x9c,0x9d,0x9e,0x9f,
0xa1,0xa4,0xa7,0xa0,0x93,0x85,0x76,0x67,0x60,0x5e,0x61,0x6b,0x76,0x7f,0x84,0x8a,
0x91,0x9b,0xa4,0xa9,0xa9,0xa6,0x9d,0x90,0x82,0x73,0x67,0x5e,0x55,0x4e,0x45,0x3e,
0x39,0x37,0x36,0x38,0x3b,0x3f,0x42,0x44,0x42,0x3f,0x3a,0x3b,0x3b,0x3c,0x3a,0x38,
0x37,0x3a,0x3b,0x3b,0x3a,0x3a,0x3a,0x39,0x35,0x32,0x34,0x40,0x52,0x67,0x78,0x7f,
0x7e,0x79,0x6d,0x61,0x59,0x55,0x51,0x4a,0x3f,0x32,0x29,0x29,0x2f,0x35,0x40,0x48,
0x4e,0x59,0x65,0x71,0x7f,0x89,0x92,0x9b,0x9f,0xa3,0xa4,0xa6,0xa3,0x9a,0x8b,0x7b,
0x6b,0x62,0x5f,0x5f,0x63,0x6a,0x71,0x7a,0x80,0x86,0x8f,0x99,0xa0,0xa4,0xa3,0xa3,
0xa0,0x98,0x8c,0x7c,0x6d,0x63,0x60,0x61,0x66,0x6c,0x74,0x7b,0x80,0x88,0x91,0x9c,
0xa4,0xa9,0xa8,0xa5,0xa1,0x9e,0x9a,0x9e,0x9e,0x9b,0x95,0x89,0x7a,0x6c,0x5d,0x4f,
0x44,0x3e,0x3a,0x38,0x36,0x35,0x35,0x36,0x37,0x3c,0x44,0x52,0x61,0x72,0x7c,0x7d,
0x78,0x6e,0x64,0x61,0x63,0x68,0x6f,0x74,0x77,0x7c,0x83,0x8d,0x96,0xa5,0xac,0xaf,
0xac,0xa1,0x93,0x87,0x76,0x6a,0x61,0x59,0x51,0x49,0x3f,0x35,0x33,0x3a,0x4a,0x5e,
0x71,0x7e,0x81,0x7a,0x6c,0x60,0x56,0x50,0x4b,0x48,0x42,0x3a,0x32,0x2d,0x2c,0x32,
0x3c,0x4a,0x59,0x66,0x70,0x77,0x78,0x72,0x6b,0x67,0x60,0x5a,0x54,0x4c,0x42,0x36,
0x2e,0x2b,0x2f,0x39,0x43,0x45,0x41,0x39,0x32,0x31,0x33,0x37,0x3c,0x3f,0x3d,0x3b,
0x36,0x36,0x3a,0x3e,0x3d,0x3a,0x34,0x32,0x33,0x3e,0x4d,0x61,0x73,0x7e,0x7e,0x76,
0x6b,0x62,0x60,0x64,0x6a,0x72,0x78,0x7b,0x80,0x89,0x93,0x9a,0xa0,0x9c,0x8f,0x7c,
0x67,0x5a,0x57,0x5d,0x67,0x74,0x7f,0x8a,0x93,0x9b,0x9b,0x99,0x8e,0x7f,0x6c,0x5b,
0x4f,0x47,0x40,0x3b,0x37,0x37,0x40,0x51,0x66,0x79,0x83,0x82,0x76,0x67,0x5d,0x59,
0x56,0x53,0x4c,0x40,0x36,0x38,0x43,0x57,0x6f,0x84,0x90,0x95,0x93,0x93,0x96,0x9b,
0x9f,0xa1,0x9c,0x93,0x84,0x78,0x6b,0x60,0x54,0x4b,0x43,0x40,0x3f,0x3c,0x39,0x37,
0x35,0x38,0x3b,0x44,0x4f,0x5f,0x6d,0x78,0x80,0x88,0x8f,0x97,0x9e,0xa3,0xa9,0xa6,
0xa1,0x96,0x86,0x77,0x68,0x61,0x5a,0x54,0x4e,0x45,0x3c,0x3a,0x3f,0x4f,0x65,0x79,
0x83,0x83,0x78,0x68,0x5a,0x53,0x50,0x4f,0x48,0x3e,0x33,0x2d,0x2c,0x32,0x3a,0x42,
0x44,0x40,0x37,0x30,0x31,0x3a,0x4b,0x61,0x74,0x7f,0x81,0x79,0x6d,0x65,0x62,0x67,
0x6e,0x75,0x7b,0x7c,0x7f,0x85,0x8e,0x9c,0xa3,0xa0,0x92,0x7c,0x66,0x58,0x57,0x61,
0x71,0x81,0x86,0x80,0x74,0x67,0x5d,0x59,0x54,0x4c,0x42,0x35,0x2a,0x26,0x27,0x2f,
0x38,0x40,0x42,0x42,0x3e,0x3c,0x37,0x35,0x32,0x34,0x37,0x3a,0x39,0x38,0x33,0x2f,
0x31,0x3c,0x4f,0x63,0x76,0x7e,0x7c,0x73,0x68,0x60,0x5b,0x59,0x54,0x4a,0x3c,0x32,
0x35,0x43,0x57,0x6f,0x80,0x83,0x79,0x66,0x57,0x54,0x5b,0x69,0x74,0x7b,0x7a,0x74,
0x6e,0x69,0x63,0x5f,0x58,0x50,0x45,0x3c,0x34,0x2f,0x2f,0x2d,0x31,0x3a,0x4a,0x59,
0x68,0x73,0x76,0x75,0x6b,0x61,0x5e,0x5a,0x55,0x50,0x46,0x3a,0x31,0x36,0x44,0x5b,
0x73,0x86,0x88,0x7f,0x6e,0x5d,0x53,0x4e,0x4a,0x44,0x3d,0x36,0x30,0x2d,0x31,0x3a,
0x40,0x42,0x3d,0x39,0x36,0x34,0x34,0x36,0x36,0x39,0x38,0x37,0x36,0x37,0x37,0x36,
0x36,0x38,0x37,0x39,0x37,0x36,0x36,0x38,0x37,0x3b,0x3d,0x3d,0x3c,0x37,0x36,0x3b,
0x48,0x5d,0x6f,0x7b,0x7b,0x75,0x68,0x5e,0x5b,0x64,0x71,0x7e,0x82,0x7e,0x73,0x6a,
0x61,0x60,0x60,0x5e,0x55,0x47,0x37,0x2d,0x2d,0x42,0x5b,0x74,0x86,0x89,0x7e,0x70,
0x62,0x5d,0x62,0x68,0x6e,0x73,0x76,0x7b,0x84,0x90,0x9a,0x9f,0x9a,0x8a,0x76,0x63,
0x57,0x56,0x5d,0x6b,0x77,0x81,0x81,0x79,0x6e,0x66,0x61,0x62,0x67,0x71,0x76,0x76,
0x70,0x6b,0x65,0x65,0x67,0x6c,0x70,0x73,0x76,0x79,0x7d,0x88,0x90,0x9a,0xa5,0xab,
0xac,0xab,0xa3,0x95,0x84,0x74,0x66,0x5c,0x57,0x5c,0x66,0x73,0x79,0x7a,0x75,0x6d,
0x63,0x5e,0x5b,0x57,0x51,0x48,0x3f,0x35,0x2d,0x2b,0x2f,0x38,0x41,0x4c,0x56,0x60,
0x68,0x72,0x7e,0x89,0x94,0x9c,0xa3,0xa8,0xa8,0xa5,0xa0,0x9c,0x9b,0x9d,0x9d,0x9b,
0x96,0x8d,0x7e,0x6b,0x5d,0x51,0x46,0x42,0x3c,0x36,0x31,0x30,0x32,0x36,0x3a,0x3c,
0x37,0x36,0x30,0x2f,0x32,0x36,0x37,0x35,0x32,0x34,0x3d,0x4a,0x5a,0x6c,0x7a,0x82,
0x89,0x90,0x97,0x9f,0xa3,0xa4,0xa4,0xa3,0xa0,0x9f,0xa0,0xa0,0x9d,0x9b,0x91,0x83,
0x73,0x63,0x54,0x48,0x3d,0x39,0x36,0x38,0x36,0x33,0x2f,0x30,0x35,0x44,0x54,0x65,
0x74,0x7a,0x77,0x6f,0x65,0x5e,0x5b,0x5a,0x54,0x4a,0x3c,0x34,0x35,0x45,0x5d,0x76,
0x87,0x8b,0x7f,0x6d,0x5c,0x56,0x5e,0x6c,0x78,0x7f,0x7b,0x73,0x68,0x60,0x5a,0x57,
0x54,0x4f,0x44,0x3b,0x2d,0x28,0x29,0x30,0x3a,0x42,0x46,0x42,0x3b,0x34,0x31,0x38,
0x47,0x5b,0x6f,0x7d,0x80,0x79,0x6b,0x5f,0x5a,0x5e,0x67,0x72,0x79,0x7b,0x74,0x6b,
0x62,0x61,0x65,0x6b,0x72,0x79,0x7d,0x7a,0x75,0x70,0x6b,0x67,0x6a,0x6e,0x6f,0x70,
0x73,0x77,0x7c,0x84,0x8e,0x99,0xa4,0xa9,0xa7,0xa3,0x9b,0x91,0x84,0x76,0x67,0x5e,
0x58,0x5d,0x65,0x71,0x7a,0x7e,0x79,0x71,0x67,0x63,0x63,0x67,0x6e,0x71,0x73,0x75,
0x79,0x82,0x8f,0x9d,0xa6,0xac,0xab,0xa5,0x9e,0x99,0x96,0x96,0x99,0x9b,0x9d,0xa1,
0xa3,0xa1,0x9e,0x94,0x86,0x79,0x6b,0x5e,0x52,0x49,0x42,0x3e,0x3c,0x3c,0x39,0x36,
0x34,0x33,0x38,0x41,0x4c,0x5a,0x67,0x74,0x80,0x8a,0x91,0x9a,0xa3,0xa9,0xac,0xa9,
0xa3,0x9f,0x9d,0x9c,0x9b,0x9b,0x95,0x8b,0x7d,0x6e,0x5d,0x53,0x4c,0x48,0x3f,0x3c,
0x36,0x34,0x34,0x36,0x37,0x39,0x3a,0x38,0x34,0x32,0x31,0x33,0x35,0x37,0x39,0x3a,
0x37,0x36,0x35,0x34,0x36,0x38,0x3a,0x3a,0x39,0x3a,0x39,0x3c,0x3d,0x3e,0x3e,0x3d,
// Line 18
0x3b,0x39,0x38,0x35,0x34,0x36,0x36,0x36,0x35,0x35,0x35,0x33,0x33,0x34,0x36,0x37,
0x36,0x36,0x36,0x37,0x37,0x3a,0x3a,0x39,0x38,0x37,0x37,0x3a,0x3b,0x3d,0x3c,0x3c,
0x3b,0x3e,0x41,0x45,0x49,0x4c,0x4c,0x4d,0x4f,0x52,0x54,0x55,0x56,0x57,0x57,0x57,
0x58,0x57,0x5b,0x5c,0x5d,0x5f,0x5c,0x59,0x5a,0x5b,0x5b,0x5b,0x5b,0x5c,0x5e,0x5c,
0x59,0x58,0x58,0x5a,0x5b,0x5c,0x59,0x58,0x55,0x55,0x57,0x59,0x5b,0x5b,0x5a,0x5a,
0x58,0x58,0x56,0x59,0x5b,0x5c,0x5b,0x59,0x57,0x57,0x57,0x59,0x59,0x59,0x5c,0x5a,
0x57,0x58,0x59,0x5b,0x5c,0x5c,0x59,0x57,0x57,0x58,0x59,0x59,0x59,0x5a,0x5b,0x5c,
0x5b,0x5b,0x5a,0x5a,0x5a,0x58,0x57,0x58,0x56,0x56,0x57,0x59,0x59,0x5a,0x5a,0x5a,
0x5b,0x5e,0x5e,0x5d,0x5b,0x5a,0x58,0x5a,0x5a,0x5b,0x5b,0x5c,0x59,0x58,0x56,0x56,
0x55,0x56,0x55,0x55,0x55,0x56,0x56,0x5a,0x5a,0x59,0x5a,0x58,0x57,0x57,0x57,0x56,
0x57,0x58,0x5a,0x5a,0x58,0x57,0x5a,0x5c,0x5c,0x5b,0x5a,0x5a,0x59,0x59,0x59,0x5a,
0x5b,0x5c,0x5b,0x5b,0x5b,0x5d,0x5e,0x5c,0x5a,0x5b,0x5c,0x5d,0x5c,0x5d,0x5d,0x5b,
0x5a,0x58,0x58,0x5b,0x5b,0x5b,0x5a,0x5a,0x59,0x59,0x59,0x5a,0x5b,0x5c,0x5b,0x58,
0x5a,0x59,0x59,0x5b,0x5a,0x5a,0x5c,0x5b,0x59,0x5a,0x5b,0x5c,0x5a,0x5a,0x59,0x5b,
0x5c,0x5d,0x5b,0x5c,0x5b,0x5a,0x5a,0x5a,0x5a,0x5a,0x59,0x57,0x58,0x5a,0x5d,0x5c,
0x5b,0x59,0x5a,0x5a,0x59,0x57,0x57,0x57,0x56,0x58,0x58,0x59,0x5a,0x5b,0x5a,0x5a,
0x59,0x5a,0x5a,0x5a,0x59,0x58,0x59,0x59,0x59,0x5b,0x5d,0x5a,0x5b,0x5b,0x5a,0x5b,
0x5b,0x5b,0x5a,0x5a,0x5b,0x59,0x5a,0x5a,0x5c,0x5f,0x5e,0x5c,0x5a,0x59,0x5a,0x5f,
0x5d,0x5b,0x5b,0x5a,0x59,0x59,0x58,0x58,0x58,0x58,0x57,0x57,0x58,0x5d,0x60,0x60,
0x5d,0x5a,0x58,0x58,0x5b,0x61,0x61,0x5c,0x54,0x4e,0x4d,0x52,0x60,0x72,0x82,0x8a,
0x85,0x78,0x6c,0x65,0x64,0x69,0x6a,0x67,0x5e,0x54,0x4c,0x4c,0x54,0x5f,0x67,0x67,
0x60,0x58,0x53,0x52,0x55,0x59,0x5a,0x59,0x57,0x56,0x57,0x5c,0x5f,0x5e,0x5b,0x58,
0x57,0x58,0x5a,0x5c,0x5d,0x5e,0x5c,0x58,0x5a,0x5c,0x5d,0x5f,0x5f,0x5e,0x5e,0x5c,
0x5b,0x5b,0x5a,0x59,0x58,0x58,0x58,0x5b,0x5b,0x5b,0x59,0x58,0x58,0x5a,0x5b,0x5c,
0x5c,0x5c,0x5b,0x5a,0x5a,0x5c,0x5e,0x5f,0x5d,0x58,0x57,0x58,0x59,0x5b,0x5b,0x59,
0x58,0x59,0x58,0x57,0x59,0x5b,0x5b,0x5d,0x5d,0x5e,0x5e,0x5d,0x5a,0x58,0x58,0x57,
0x55,0x59,0x59,0x59,0x5a,0x59,0x59,0x5b,0x5e,0x5f,0x5e,0x5d,0x5d,0x5c,0x5a,0x58,
0x58,0x5a,0x5a,0x5a,0x58,0x57,0x57,0x59,0x59,0x5a,0x5c,0x5e,0x5d,0x5c,0x5a,0x5a,
0x59,0x59,0x59,0x58,0x57,0x57,0x55,0x57,0x58,0x5a,0x5d,0x5f,0x5f,0x60,0x5e,0x5b,
0x5b,0x5b,0x5b,0x5b,0x5a,0x59,0x59,0x59,0x59,0x59,0x58,0x57,0x57,0x5a,0x5a,0x59,
0x5a,0x5b,0x5a,0x59,0x57,0x59,0x5c,0x5d,0x5b,0x5a,0x58,0x58,0x57,0x59,0x5a,0x59,
0x5a,0x5a,0x57,0x56,0x57,0x58,0x59,0x5c,0x5f,0x5f,0x5e,0x5d,0x5c,0x5e,0x5f,0x5c,
0x5c,0x5b,0x59,0x59,0x58,0x57,0x58,0x59,0x58,0x59,0x5a,0x5b,0x5a,0x5a,0x5a,0x58,
0x57,0x58,0x59,0x59,0x58,0x57,0x57,0x57,0x58,0x5a,0x5c,0x5d,0x5d,0x5e,0x5f,0x60,
0x5f,0x5d,0x5c,0x5e,0x5e,0x5c,0x5b,0x5a,0x5a,0x5b,0x5a,0x59,0x58,0x59,0x59,0x59,
0x58,0x59,0x59,0x5a,0x59,0x59,0x59,0x5a,0x5c,0x5f,0x5d,0x5b,0x5b,0x5a,0x5a,0x5a,
0x5b,0x5b,0x5b,0x5b,0x5a,0x5b,0x5a,0x59,0x59,0x5b,0x5a,0x57,0x55,0x54,0x53,0x55,
0x56,0x56,0x55,0x54,0x54,0x55,0x56,0x58,0x59,0x5b,0x5c,0x5b,0x5b,0x5b,0x59,0x59,
0x57,0x54,0x50,0x4a,0x47,0x47,0x46,0x43,0x42,0x44,0x47,0x4a,0x49,0x48,0x47,0x49,
0x49,0x46,0x42,0x3f,0x3f,0x42,0x42,0x3f,0x3d,0x40,0x42,0x44,0x44,0x44,0x45,0x47,
0x45,0x43,0x43,0x47,0x4a,0x4e,0x4c,0x49,0x49,0x4a,0x49,0x49,0x47,0x45,0x44,0x44,
0x43,0x40,0x43,0x44,0x45,0x48,0x49,0x4a,0x4a,0x4b,0x4b,0x4c,0x4a,0x49,0x47,0x46,
0x44,0x43,0x43,0x44,0x44,0x47,0x48,0x49,0x4a,0x4b,0x4b,0x4c,0x4a,0x49,0x4a,0x4b,
0x49,0x47,0x45,0x45,0x45,0x47,0x47,0x45,0x47,0x47,0x45,0x45,0x45,0x45,0x47,0x45,
0x45,0x45,0x43,0x43,0x44,0x43,0x43,0x44,0x46,0x48,0x47,0x46,0x44,0x43,0x44,0x44,
0x45,0x47,0x46,0x44,0x44,0x44,0x44,0x44,0x43,0x44,0x45,0x45,0x43,0x41,0x43,0x44,
0x43,0x45,0x47,0x47,0x49,0x47,0x46,0x47,0x48,0x4a,0x4a,0x48,0x47,0x47,0x45,0x44,
0x44,0x45,0x45,0x45,0x45,0x47,0x47,0x47,0x45,0x46,0x47,0x48,0x48,0x48,0x47,0x47,
0x45,0x44,0x42,0x42,0x41,0x43,0x43,0x43,0x43,0x46,0x4d,0x51,0x59,0x65,0x72,0x7e,
0x89,0x94,0x9c,0xa4,0xaa,0xaf,0xb1,0xb2,0xb1,0xb0,0xae,0xac,0xac,0xae,0xaf,0xaf,
0xb1,0xb3,0xb4,0xb3,0xb0,0xae,0xaf,0xb0,0xaf,0xae,0xac,0xab,0xad,0xaf,0xaf,0xb1,
0xb4,0xb6,0xb3,0xb3,0xb1,0xb2,0xb2,0xb4,0xb1,0xb1,0xae,0xad,0xab,0xaf,0xae,0xad,
0xad,0xaf,0xb1,0xb1,0xaf,0xb0,0xb4,0xb5,0xb4,0xb4,0xb2,0xb1,0xb1,0xb1,0xb1,0xb1,
0xb1,0xb1,0xb2,0xb1,0xb0,0xb0,0xb1,0xb1,0xb0,0xb1,0xb0,0xae,0xad,0xad,0xae,0xb0,
0xb0,0xb0,0xad,0xaf,0xaf,0xae,0xb0,0xb0,0xaf,0xb1,0xb1,0xb0,0xb1,0xb3,0xb4,0xb4,
0xb3,0xb1,0xb1,0xb3,0xb2,0xb1,0xb1,0xb1,0xae,0xae,0xae,0xae,0xaf,0xb0,0xaf,0xb0,
0xb0,0xb1,0xb1,0xb1,0xb2,0xb4,0xb3,0xb1,0xb1,0xb1,0xb0,0xb0,0xb0,0xb0,0xae,0xb3,
0xae,0xae,0xb0,0xb1,0xb1,0xb2,0xb1,0xb0,0xb0,0xb1,0xb1,0xb3,0xb1,0xb1,0xb1,0xb2,
0xb1,0xb1,0xb4,0xb5,0xb4,0xb5,0xb5,0xb4,0xb4,0xb4,0xb3,0xb4,0xb3,0xb4,0xb3,0xb1,
0xb0,0xb1,0xb1,0xb1,0xb0,0xb0,0xae,0xad,0xab,0xaa,0xa8,0xa8,0xa5,0xa3,0xa2,0xa2,
0xa1,0x9f,0x9d,0x9c,0x9c,0x9f,0xa0,0xa0,0x9e,0x9d,0x9d,0x9f,0xa0,0xa1,0xa2,0xa1,
0x9f,0x9f,0x9f,0x9f,0xa0,0xa0,0x9e,0x9d,0x9b,0x9b,0x9d,0x9f,0x9f,0x9f,0xa0,0x9f,
0xa0,0xa2,0xa2,0xa2,0xa1,0xa0,0xa0,0x9f,0x9f,0x9f,0x9f,0xa1,0xa1,0xa3,0xa2,0xa2,
0x9f,0x9f,0x9f,0x9e,0x9d,0x9d,0x9e,0xa0,0xa0,0xa0,0x9f,0xa0,0x9f,0xa0,0xa1,0xa0,
0x9d,0xa0,0x9e,0x9c,0x9b,0x9b,0x9e,0x9f,0x9d,0x9d,0x9d,0x9f,0xa1,0xa0,0xa0,0xa0,
0xa2,0xa4,0xa4,0xa3,0xa0,0xa0,0x9f,0x9f,0x9f,0x9f,0x9f,0x9e,0x9c,0x9c,0x9d,0x9f,
0xa2,0xa4,0xa5,0xa5,0xa4,0xa4,0xa2,0xa1,0xa1,0xa0,0xa1,0xa0,0xa1,0xa2,0x9f,0x9e,
0x9f,0xa1,0xa3,0xa4,0xa5,0xa5,0xa4,0xa2,0xa0,0xa0,0xa3,0xa4,0xa3,0xa3,0xa1,0xa0,
0xa0,0xa0,0x9f,0xa1,0xa3,0xa4,0xa4,0xa3,0xa3,0xa4,0xa4,0xa3,0xa0,0x9f,0x9e,0x9d,
0x9e,0x9f,0xa0,0xa0,0x9f,0x9f,0xa0,0xa1,0xa3,0xa5,0xa5,0xa5,0xa3,0xa2,0xa0,0x9f,
0x9f,0xa1,0xa0,0xa0,0x9f,0x9f,0x9f,0x9f,0x9f,0xa3,0xa4,0xa5,0xa2,0xa3,0xa2,0xa4,
0xa4,0xa4,0xa1,0xa3,0xa0,0x9d,0x9c,0x9c,0x9d,0x9f,0x9d,0x9d,0x9e,0x9f,0xa0,0x9f,
0x9f,0xa0,0xa0,0xa0,0x9f,0x9e,0x9f,0xa0,0x9e,0x9d,0x9e,0xa0,0xa1,0xa1,0xa0,0xa2,
0xa2,0xa2,0xa0,0x9f,0x9f,0xa1,0xa2,0xa2,0xa0,0x9e,0x9e,0x9d,0x9f,0xa0,0xa1,0xa0,
0x9e,0x9c,0x9d,0x9e,0x9f,0x9f,0xa0,0x9f,0x9f,0x9f,0x9e,0x9e,0x9e,0x9e,0x9d,0x9d,
0x9c,0x9c,0x9e,0x9f,0x9f,0x9f,0x9f,0xa2,0xa3,0xa1,0x9f,0xa1,0xa1,0xa2,0xa2,0xa3,
0xa2,0x9f,0x9e,0x9b,0x98,0x99,0x9c,0x9f,0xa1,0xa0,0x9d,0x9a,0x99,0x9d,0xa3,0xaa,
0xaa,0xa3,0x93,0x7f,0x6f,0x6b,0x6f,0x7a,0x86,0x8d,0x8e,0x8e,0x90,0x97,0x9f,0xa7,
0xaa,0xaa,0xa5,0x9e,0x97,0x97,0x9b,0x9e,0xa2,0xa4,0xa3,0xa4,0xa2,0xa0,0xa0,0xa0,
0xa0,0x9f,0x9e,0x9f,0xa1,0xa4,0xa3,0x9e,0x9e,0x9d,0x9c,0x9e,0x9f,0xa0,0xa1,0xa0,
0x9d,0x9d,0x9d,0x9d,0x9d,0x9d,0x9c,0x9f,0xa1,0xa3,0xa3,0xa2,0xa0,0x9e,0x9e,0x9e,
0x9d,0x9e,0x9d,0x9b,0x9a,0x9b,0x9e,0xa1,0xa2,0xa2,0xa0,0x9f,0x9e,0x9f,0x9e,0x9f,
0xa0,0xa2,0xa0,0x9f,0xa0,0x9f,0x9e,0x9f,0x9f,0xa1,0xa1,0xa0,0xa0,0xa1,0xa1,0xa2,
0xa2,0xa3,0xa3,0xa2,0xa2,0xa0,0x9f,0xa2,0xa1,0x9e,0x9d,0x9c,0x9c,0x9e,0x9f,0xa0,
0xa3,0xa4,0xa3,0xa0,0xa0,0xa2,0xa2,0xa4,0xa4,0xa3,0xa3,0xa1,0x9f,0xa0,0xa1,0xa2,
0xa0,0xa0,0x9d,0x9e,0x9f,0xa0,0xa0,0xa0,0xa1,0xa2,0xa3,0xa2,0xa2,0xa4,0xa3,0xa1,
0x9e,0x9d,0x9c,0x9d,0x9c,0x9d,0x9e,0x9f,0x9f,0x9f,0x9f,0xa0,0xa1,0xa4,0xa4,0xa3,
0xa1,0x9f,0x9e,0x9f,0x9f,0xa0,0xa0,0xa0,0x9e,0x9f,0xa0,0xa2,0xa2,0xa2,0xa3,0xa4,
0xa4,0xa4,0xa4,0xa4,0xa2,0xa0,0x9f,0x9f,0x9e,0x9f,0x9e,0x9d,0x9a,0x9b,0x9c,0x9e,
0x9f,0xa2,0xa3,0xa4,0xa4,0xa4,0xa3,0xa0,0x9f,0xa2,0xa2,0xa1,0x9e,0x9e,0x9c,0x9d,
0x9d,0x9f,0xa0,0xa2,0xa1,0xa2,0xa3,0xa2,0xa1,0xa3,0xa3,0xa2,0xa1,0x9f,0x9e,0x9d,
0x9d,0x9d,0x9d,0x9e,0x9e,0x9e,0x9f,0xa1,0xa3,0xa5,0xa4,0xa2,0xa3,0xa0,0x9f,0x9e,
0x9d,0x9e,0x9d,0x9b,0x98,0x9a,0x9d,0x9e,0x9d,0x9e,0x9d,0x9c,0x9d,0x9e,0x9f,0xa1,
0x9f,0x9f,0x9f,0x9f,0xa1,0xa2,0xa4,0xa1,0x9f,0xa1,0xa1,0xa2,0xa2,0xa1,0xa1,0xa2,
0xa0,0xa0,0xa1,0x9f,0x9e,0x9d,0x9c,0x9d,0x9e,0x9f,0x9d,0x9d,0x9b,0x9b,0x9a,0x99,
0x96,0x93,0x8d,0x85,0x7b,0x70,0x65,0x5a,0x50,0x48,0x43,0x3b,0x39,0x35,0x33,0x34,
// Line 19
0x37,0x39,0x38,0x38,0x37,0x37,0x37,0x38,0x38,0x39,0x39,0x38,0x38,0x37,0x37,0x38,
0x37,0x36,0x36,0x37,0x37,0x39,0x3c,0x3e,0x41,0x46,0x4a,0x4e,0x50,0x54,0x57,0x5a,
0x5b,0x5d,0x5f,0x61,0x64,0x64,0x64,0x64,0x61,0x61,0x61,0x61,0x63,0x64,0x62,0x63,
0x60,0x60,0x61,0x61,0x5f,0x60,0x60,0x60,0x62,0x64,0x65,0x66,0x65,0x65,0x64,0x65,
0x66,0x66,0x66,0x65,0x63,0x62,0x62,0x62,0x64,0x64,0x63,0x61,0x60,0x60,0x62,0x64,
0x64,0x64,0x64,0x65,0x64,0x63,0x61,0x61,0x62,0x61,0x60,0x60,0x61,0x64,0x65,0x65,
0x64,0x64,0x65,0x64,0x63,0x64,0x65,0x64,0x64,0x62,0x60,0x63,0x62,0x62,0x62,0x60,
0x60,0x61,0x60,0x61,0x64,0x67,0x67,0x67,0x67,0x66,0x64,0x64,0x62,0x61,0x61,0x61,
0x5f,0x5f,0x60,0x61,0x64,0x65,0x66,0x65,0x65,0x65,0x65,0x66,0x65,0x64,0x64,0x64,
0x63,0x65,0x64,0x63,0x62,0x62,0x60,0x62,0x63,0x66,0x67,0x69,0x66,0x66,0x67,0x69,
0x6a,0x6b,0x69,0x67,0x67,0x69,0x68,0x68,0x68,0x69,0x69,0x67,0x67,0x69,0x6b,0x6b,
0x69,0x6a,0x6b,0x6d,0x6e,0x6f,0x70,0x70,0x6e,0x6d,0x6b,0x6d,0x6d,0x6e,0x6f,0x70,
0x70,0x72,0x73,0x73,0x77,0x78,0x78,0x78,0x77,0x76,0x78,0x78,0x78,0x7a,0x7c,0x7c,
0x7e,0x81,0x83,0x84,0x85,0x85,0x86,0x88,0x8a,0x8a,0x88,0x88,0x89,0x8b,0x8c,0x8c,
0x8c,0x8c,0x8d,0x8e,0x8f,0x92,0x92,0x96,0x95,0x93,0x94,0x94,0x95,0x98,0x96,0x91,
0x8e,0x8d,0x8c,0x8c,0x88,0x88,0x88,0x86,0x84,0x81,0x7f,0x7c,0x78,0x77,0x76,0x75,
0x73,0x6e,0x67,0x64,0x5f,0x5b,0x57,0x52,0x4e,0x49,0x43,0x3d,0x39,0x3a,0x39,0x37,
0x35,0x33,0x2f,0x2d,0x2a,0x29,0x28,0x28,0x28,0x29,0x2a,0x2b,0x2f,0x34,0x38,0x3a,
0x3c,0x41,0x48,0x4e,0x54,0x5a,0x5f,0x65,0x6a,0x71,0x78,0x80,0x85,0x88,0x88,0x8c,
0x8e,0x92,0x93,0x96,0x94,0x91,0x8f,0x8c,0x88,0x87,0x80,0x78,0x72,0x6c,0x64,0x5d,
0x54,0x4e,0x49,0x41,0x3a,0x35,0x32,0x31,0x2f,0x31,0x31,0x32,0x33,0x35,0x39,0x3f,
0x45,0x4c,0x52,0x57,0x5c,0x64,0x6d,0x77,0x81,0x8b,0x90,0x92,0x92,0x93,0x91,0x91,
0x8b,0x85,0x7e,0x76,0x6d,0x63,0x5a,0x51,0x4b,0x45,0x3d,0x37,0x31,0x2e,0x2d,0x2f,
0x30,0x33,0x37,0x3d,0x44,0x4e,0x58,0x61,0x6c,0x75,0x7e,0x86,0x8d,0x91,0x91,0x90,
0x8c,0x85,0x7d,0x74,0x69,0x5f,0x53,0x49,0x42,0x3e,0x3b,0x37,0x33,0x32,0x33,0x39,
0x3e,0x45,0x50,0x5b,0x65,0x72,0x7d,0x87,0x91,0x94,0x93,0x91,0x88,0x7d,0x71,0x65,
0x56,0x4d,0x43,0x3b,0x36,0x34,0x33,0x35,0x38,0x3e,0x46,0x52,0x5c,0x68,0x74,0x7e,
0x88,0x8e,0x8f,0x8b,0x86,0x7d,0x71,0x63,0x57,0x4c,0x41,0x39,0x33,0x31,0x36,0x38,
0x3d,0x49,0x55,0x62,0x6f,0x7c,0x84,0x8c,0x8f,0x8e,0x88,0x7e,0x71,0x65,0x56,0x48,
0x3d,0x36,0x2e,0x2b,0x2f,0x38,0x42,0x50,0x5f,0x70,0x80,0x8c,0x90,0x8d,0x87,0x7f,
0x75,0x6a,0x5d,0x50,0x42,0x38,0x30,0x2f,0x34,0x41,0x52,0x64,0x71,0x7f,0x89,0x8e,
0x8d,0x88,0x7e,0x73,0x64,0x55,0x48,0x3d,0x33,0x2e,0x33,0x3d,0x4b,0x5e,0x6e,0x7d,
0x88,0x8e,0x8d,0x86,0x7a,0x6e,0x61,0x55,0x48,0x3d,0x37,0x34,0x38,0x44,0x55,0x6a,
0x7d,0x88,0x8a,0x86,0x7d,0x71,0x63,0x57,0x4b,0x42,0x39,0x33,0x33,0x3d,0x4d,0x61,
0x75,0x84,0x8a,0x88,0x7e,0x71,0x65,0x5a,0x4e,0x43,0x38,0x33,0x36,0x43,0x54,0x68,
0x7c,0x86,0x85,0x80,0x76,0x6b,0x5e,0x51,0x45,0x3e,0x39,0x3d,0x46,0x58,0x6a,0x79,
0x81,0x84,0x7e,0x73,0x64,0x54,0x47,0x3d,0x39,0x3c,0x44,0x52,0x65,0x76,0x83,0x86,
0x81,0x78,0x6a,0x5c,0x4b,0x3e,0x37,0x38,0x40,0x50,0x63,0x76,0x82,0x84,0x7c,0x6f,
0x5f,0x52,0x45,0x40,0x3d,0x40,0x4b,0x58,0x66,0x79,0x80,0x7f,0x75,0x67,0x58,0x4b,
0x3e,0x39,0x3f,0x4f,0x5f,0x6d,0x77,0x7f,0x81,0x7b,0x6c,0x5b,0x4e,0x45,0x42,0x48,
0x4f,0x5b,0x69,0x72,0x74,0x71,0x69,0x5e,0x52,0x49,0x44,0x48,0x50,0x5e,0x6a,0x76,
0x79,0x78,0x71,0x65,0x58,0x4e,0x49,0x49,0x51,0x5f,0x6b,0x73,0x74,0x71,0x6a,0x60,
0x55,0x4d,0x4b,0x4e,0x54,0x5f,0x69,0x70,0x71,0x6d,0x64,0x5a,0x51,0x4e,0x50,0x56,
0x5c,0x65,0x6d,0x6e,0x6a,0x64,0x5c,0x54,0x51,0x51,0x58,0x5f,0x68,0x6d,0x6c,0x68,
0x60,0x57,0x54,0x51,0x54,0x5a,0x61,0x67,0x6a,0x6b,0x67,0x60,0x59,0x54,0x54,0x57,
0x5b,0x62,0x67,0x69,0x65,0x60,0x5a,0x58,0x5a,0x5d,0x61,0x65,0x66,0x66,0x63,0x5d,
0x58,0x57,0x58,0x5b,0x5f,0x65,0x69,0x66,0x62,0x5c,0x54,0x53,0x58,0x5f,0x69,0x6d,
0x6e,0x6c,0x62,0x58,0x50,0x4f,0x54,0x5f,0x69,0x70,0x71,0x6b,0x5e,0x53,0x50,0x52,
0x5b,0x67,0x70,0x73,0x6e,0x60,0x51,0x46,0x44,0x4d,0x5b,0x6c,0x77,0x79,0x70,0x5f,
0x50,0x48,0x4a,0x57,0x67,0x76,0x7c,0x76,0x64,0x4f,0x3f,0x3d,0x47,0x5b,0x6f,0x7c,
0x77,0x69,0x50,0x3e,0x3d,0x4b,0x5f,0x74,0x7e,0x7c,0x6b,0x54,0x40,0x3a,0x45,0x5b,
0x71,0x80,0x7f,0x6f,0x58,0x44,0x3e,0x49,0x5f,0x75,0x81,0x7c,0x66,0x4c,0x37,0x34,
0x45,0x60,0x79,0x83,0x7a,0x65,0x48,0x39,0x39,0x4f,0x6d,0x83,0x84,0x75,0x59,0x3f,
0x37,0x46,0x62,0x7e,0x8c,0x83,0x67,0x47,0x34,0x3a,0x53,0x70,0x85,0x86,0x70,0x50,
0x36,0x34,0x48,0x68,0x7e,0x83,0x72,0x54,0x3a,0x34,0x44,0x64,0x80,0x89,0x7b,0x5f,
0x44,0x39,0x46,0x63,0x7e,0x88,0x7c,0x61,0x43,0x37,0x41,0x5d,0x78,0x84,0x78,0x5c,
0x40,0x36,0x44,0x63,0x7c,0x86,0x78,0x5a,0x3f,0x3a,0x4b,0x67,0x7f,0x84,0x72,0x56,
0x41,0x44,0x57,0x74,0x84,0x7f,0x69,0x4f,0x3e,0x4a,0x5f,0x76,0x80,0x76,0x5c,0x46,
0x41,0x51,0x69,0x79,0x7a,0x69,0x51,0x43,0x48,0x5f,0x75,0x7d,0x72,0x5c,0x49,0x46,
0x54,0x6a,0x7a,0x78,0x67,0x52,0x47,0x50,0x64,0x76,0x78,0x6a,0x56,0x49,0x4b,0x5c,
0x6e,0x76,0x6e,0x5b,0x4b,0x49,0x56,0x69,0x76,0x73,0x62,0x50,0x4a,0x54,0x67,0x76,
0x76,0x66,0x58,0x4e,0x53,0x64,0x72,0x76,0x6d,0x5c,0x4e,0x50,0x5c,0x6a,0x6d,0x68,
0x5a,0x51,0x53,0x5d,0x67,0x6d,0x69,0x5f,0x58,0x58,0x5f,0x68,0x6b,0x66,0x5f,0x5a,
0x5c,0x63,0x6b,0x6e,0x69,0x5f,0x58,0x57,0x5c,0x64,0x67,0x65,0x5f,0x58,0x58,0x5d,
0x64,0x69,0x67,0x60,0x58,0x5a,0x5e,0x62,0x66,0x66,0x60,0x5c,0x5b,0x5f,0x65,0x67,
0x65,0x60,0x5d,0x5c,0x60,0x64,0x66,0x65,0x60,0x5c,0x5a,0x5f,0x64,0x65,0x62,0x5d,
0x5b,0x5e,0x60,0x64,0x68,0x67,0x64,0x60,0x5e,0x61,0x60,0x64,0x61,0x5e,0x5d,0x60,
0x63,0x66,0x66,0x64,0x64,0x63,0x62,0x64,0x66,0x65,0x63,0x5f,0x5a,0x59,0x5a,0x5b,
0x5c,0x5f,0x60,0x60,0x60,0x61,0x62,0x64,0x62,0x62,0x61,0x60,0x5f,0x5d,0x5b,0x5c,
0x5d,0x5f,0x60,0x61,0x64,0x66,0x64,0x64,0x5f,0x5f,0x61,0x60,0x5e,0x5f,0x5f,0x5f,
0x5f,0x5f,0x5f,0x60,0x60,0x60,0x60,0x62,0x62,0x64,0x63,0x60,0x5f,0x61,0x62,0x64,
0x64,0x62,0x5f,0x5e,0x5d,0x5f,0x60,0x60,0x5f,0x5f,0x5f,0x5f,0x5f,0x60,0x5f,0x5f,
0x60,0x63,0x64,0x63,0x63,0x63,0x63,0x61,0x5f,0x5f,0x61,0x61,0x5f,0x60,0x60,0x60,
0x62,0x66,0x66,0x66,0x64,0x64,0x64,0x63,0x62,0x63,0x62,0x61,0x60,0x61,0x60,0x5f,
0x60,0x61,0x60,0x5f,0x5d,0x5f,0x60,0x60,0x5f,0x60,0x62,0x64,0x64,0x65,0x65,0x65,
0x62,0x60,0x5e,0x5f,0x5f,0x5f,0x5e,0x5d,0x5c,0x5f,0x61,0x61,0x61,0x62,0x64,0x66,
0x66,0x67,0x66,0x67,0x65,0x61,0x5f,0x5f,0x5f,0x62,0x62,0x60,0x60,0x5f,0x60,0x60,
0x64,0x65,0x66,0x66,0x65,0x64,0x62,0x62,0x61,0x62,0x63,0x61,0x5f,0x5d,0x5c,0x5f,
0x60,0x62,0x61,0x60,0x60,0x60,0x60,0x61,0x62,0x64,0x63,0x62,0x61,0x61,0x62,0x62,
0x60,0x60,0x62,0x63,0x63,0x64,0x63,0x61,0x62,0x63,0x63,0x62,0x62,0x64,0x63,0x62,
0x61,0x60,0x61,0x61,0x60,0x62,0x63,0x64,0x63,0x62,0x60,0x5f,0x5f,0x5f,0x5f,0x60,
0x60,0x5f,0x5f,0x5f,0x5d,0x5d,0x5c,0x5d,0x5e,0x60,0x60,0x61,0x61,0x60,0x61,0x62,
0x64,0x65,0x67,0x66,0x62,0x62,0x60,0x60,0x5f,0x5f,0x60,0x62,0x63,0x63,0x61,0x60,
0x5f,0x60,0x61,0x63,0x60,0x62,0x5f,0x5d,0x5d,0x5e,0x61,0x64,0x64,0x64,0x65,0x64,
0x62,0x60,0x60,0x61,0x61,0x61,0x60,0x5f,0x5f,0x5f,0x5d,0x5f,0x60,0x60,0x5f,0x5c,
0x5a,0x5b,0x5c,0x5d,0x5d,0x60,0x60,0x60,0x61,0x62,0x61,0x65,0x65,0x64,0x65,0x64,
0x63,0x64,0x62,0x60,0x5f,0x60,0x60,0x5e,0x5d,0x5c,0x5c,0x5d,0x5f,0x60,0x62,0x63,
0x62,0x63,0x62,0x62,0x62,0x62,0x60,0x60,0x5e,0x5d,0x5d,0x5d,0x5d,0x5f,0x60,0x5f,
0x5f,0x62,0x62,0x62,0x63,0x63,0x61,0x62,0x5f,0x5d,0x5d,0x5e,0x5f,0x60,0x5f,0x5c,
0x5b,0x5b,0x5b,0x58,0x55,0x51,0x4e,0x49,0x43,0x3e,0x3c,0x39,0x39,0x39,0x37,0x34,
0x32,0x31,0x31,0x32,0x33,0x36,0x37,0x37,0x37,0x37,0x38,0x3a,0x39,0x3c,0x3a,0x38,
0x36,0x34,0x33,0x34,0x33,0x33,0x36,0x38,0x39,0x39,0x39,0x39,0x38,0x39,0x38,0x39,
0x38,0x37,0x36,0x36,0x37,0x39,0x3b,0x3a,0x38,0x39,0x37,0x36,0x33,0x33,0x36,0x37,
0x37,0x36,0x33,0x35,0x37,0x39,0x3a,0x3a,0x39,0x38,0x34,0x32,0x33,0x37,0x38,0x36,
0x36,0x35,0x34,0x35,0x34,0x34,0x34,0x35,0x33,0x33,0x32,0x31,0x31,0x32,0x33,0x35,
0x35,0x36,0x36,0x36,0x34,0x34,0x36,0x37,0x38,0x38,0x37,0x36,0x34,0x34,0x34,0x34,
// Line 20
0x3b,0x3d,0x3b,0x3a,0x38,0x3b,0x3d,0x3d,0x3b,0x3b,0x3a,0x3a,0x37,0x38,0x37,0x38,
0x37,0x39,0x39,0x3a,0x39,0x3a,0x39,0x3a,0x3a,0x3b,0x3b,0x3a,0x39,0x3b,0x3e,0x43,
0x4c,0x57,0x64,0x72,0x81,0x91,0xa1,0xb0,0xb9,0xc1,0xc4,0xc4,0xc2,0xc2,0xc3,0xc3,
0xc3,0xc3,0xbf,0xbf,0xbc,0xbc,0xc0,0xc1,0xbf,0xbf,0xbb,0xb8,0xb8,0xba,0xbc,0xbe,
0xbd,0xbd,0xbc,0xbd,0xbd,0xbc,0xbb,0xba,0xba,0xbb,0xba,0xbc,0xbf,0xbf,0xbe,0xbe,
0xbf,0xc1,0xc2,0xc0,0xbf,0xbe,0xbe,0xbf,0xbe,0xbd,0xbd,0xbc,0xbd,0xbf,0xbf,0xbf,
0xbd,0xbb,0xbb,0xbb,0xbd,0xbb,0xbd,0xbc,0xbb,0xbc,0xbd,0xbc,0xbc,0xbe,0xbd,0xbc,
0xba,0xb9,0xba,0xbb,0xbc,0xbc,0xbc,0xbc,0xbd,0xbe,0xbd,0xbf,0xc1,0xc2,0xc0,0xbe,
0xbc,0xbb,0xbe,0xbf,0xbf,0xc0,0xbf,0xbd,0xbe,0xbf,0xbf,0xbd,0xbe,0xbd,0xbc,0xbc,
0xbc,0xbb,0xbf,0xbd,0xbe,0xbf,0xbd,0xbc,0xbd,0xbe,0xbe,0xbf,0xbc,0xbb,0xbb,0xba,
0xba,0xbb,0xbe,0xbf,0xbe,0xbe,0xbd,0xbd,0xbf,0xbf,0xc0,0xc0,0xbf,0xbd,0xbc,0xbc,
0xbc,0xbc,0xbb,0xbb,0xbb,0xbe,0xbf,0xbc,0xbb,0xba,0xbb,0xbe,0xbf,0xbe,0xbf,0xbd,
0xbb,0xbd,0xbf,0xc3,0xc5,0xc7,0xc4,0xc2,0xc0,0xc1,0xc3,0xc5,0xc2,0xbf,0xbc,0xb9,
0xb8,0xbb,0xbf,0xc1,0xbf,0xb8,0xb1,0xae,0xae,0xb3,0xb6,0xb6,0xb0,0xa2,0x93,0x87,
0x87,0x95,0xa3,0xaa,0xa8,0x9b,0x89,0x81,0x86,0x97,0xaa,0xb5,0xb1,0x9f,0x88,0x78,
0x79,0x8b,0xa4,0xb3,0xb2,0xa0,0x87,0x76,0x76,0x8a,0xa3,0xb3,0xb1,0x9f,0x86,0x74,
0x75,0x89,0xa3,0xb4,0xb4,0xa3,0x8a,0x7a,0x7a,0x8c,0xa2,0xb2,0xb0,0x9f,0x88,0x79,
0x7b,0x8e,0xa4,0xb4,0xb4,0xa5,0x8c,0x7e,0x7e,0x8d,0xa5,0xb4,0xb2,0xa1,0x89,0x79,
0x79,0x89,0x9f,0xb0,0xb0,0xa1,0x8b,0x7a,0x7b,0x8e,0xa6,0xb4,0xb3,0xa3,0x8b,0x7b,
0x7c,0x8c,0xa2,0xb2,0xb2,0xa4,0x8c,0x7a,0x79,0x8c,0xa5,0xb4,0xb2,0xa2,0x8b,0x7b,
0x7d,0x8f,0xa5,0xb5,0xb4,0xa4,0x8b,0x79,0x79,0x8a,0xa2,0xb2,0xb2,0xa3,0x8c,0x7b,
0x7e,0x8e,0xa3,0xb4,0xb4,0xa4,0x8c,0x7a,0x79,0x8a,0xa1,0xb2,0xb3,0xa3,0x8a,0x77,
0x77,0x8a,0xa2,0xb4,0xb4,0xa5,0x90,0x7f,0x7c,0x8c,0xa2,0xb2,0xb3,0xa4,0x8d,0x7c,
0x7a,0x8c,0xa2,0xb4,0xb4,0xa5,0x90,0x7f,0x7c,0x8c,0xa2,0xb2,0xb2,0xa2,0x8c,0x7d,
0x7e,0x90,0xa6,0xb2,0xac,0x9c,0x89,0x7d,0x81,0x91,0xa3,0xab,0xa9,0x9c,0x8e,0x89,
0x8f,0x9b,0xa3,0x9f,0x92,0x84,0x7e,0x84,0x93,0x9f,0x9e,0x8d,0x77,0x69,0x6b,0x7f,
0x96,0xa5,0x9f,0x86,0x6a,0x5f,0x6b,0x89,0xa6,0xb3,0xa6,0x87,0x66,0x59,0x68,0x87,
0xa5,0xb0,0xa3,0x82,0x60,0x54,0x62,0x83,0xa3,0xaf,0xa2,0x80,0x63,0x55,0x62,0x83,
0xa2,0xae,0xa2,0x83,0x65,0x5b,0x69,0x89,0xa8,0xb4,0xa7,0x89,0x67,0x58,0x64,0x85,
0xa3,0xb1,0xa6,0x87,0x66,0x58,0x65,0x85,0xa6,0xb4,0xa8,0x89,0x67,0x57,0x64,0x83,
0xa2,0xb0,0xa3,0x83,0x61,0x54,0x61,0x80,0xa2,0xb0,0xa5,0x88,0x68,0x59,0x68,0x86,
0xa3,0xb1,0xa4,0x83,0x61,0x53,0x60,0x81,0xa1,0xb0,0xa3,0x85,0x64,0x56,0x66,0x87,
0xa4,0xb0,0xa2,0x83,0x64,0x57,0x64,0x85,0xa2,0xaf,0xa2,0x84,0x64,0x58,0x65,0x82,
0x9f,0xae,0xa4,0x87,0x69,0x5b,0x68,0x88,0xa6,0xb2,0xa5,0x86,0x64,0x55,0x60,0x81,
0xa0,0xae,0xa1,0x83,0x65,0x58,0x65,0x86,0xa4,0xb0,0xa4,0x84,0x63,0x55,0x64,0x84,
0xa2,0xaf,0xa2,0x82,0x66,0x58,0x63,0x83,0xa2,0xaf,0xa6,0x86,0x65,0x59,0x64,0x82,
0x9e,0xac,0xa2,0x87,0x67,0x58,0x62,0x7f,0x9c,0xac,0xa8,0x8f,0x6f,0x5b,0x5c,0x74,
0x91,0xa5,0xa3,0x8d,0x6d,0x55,0x52,0x66,0x83,0x9b,0x9e,0x8c,0x6f,0x58,0x52,0x61,
0x7f,0x9b,0xa4,0x97,0x78,0x5c,0x52,0x60,0x7c,0x98,0xa2,0x98,0x7a,0x63,0x54,0x5c,
0x7c,0x9c,0xa7,0x99,0x78,0x5a,0x50,0x5e,0x7b,0x97,0xa2,0x96,0x79,0x5c,0x50,0x5d,
0x7c,0x97,0xa1,0x94,0x76,0x5c,0x52,0x60,0x7b,0x96,0xa0,0x94,0x77,0x5c,0x51,0x60,
0x7c,0x97,0x9f,0x95,0x79,0x5e,0x54,0x63,0x7e,0x9a,0xa2,0x96,0x7a,0x5d,0x50,0x5e,
0x79,0x95,0xa0,0x94,0x79,0x5e,0x54,0x5f,0x7c,0x98,0xa4,0x97,0x7a,0x5b,0x4c,0x5a,
0x79,0x98,0xa4,0x97,0x7a,0x5e,0x52,0x60,0x7e,0x9c,0xa7,0x9a,0x7c,0x5c,0x4f,0x5d,
0x7c,0x9a,0xa5,0x96,0x76,0x57,0x4c,0x5a,0x7b,0x9a,0xa5,0x97,0x78,0x5a,0x4f,0x5e,
0x7c,0x9a,0xa5,0x97,0x77,0x58,0x4e,0x5f,0x7f,0x9b,0xa5,0x96,0x78,0x5c,0x50,0x5f,
0x7c,0x97,0xa1,0x90,0x72,0x58,0x4f,0x5e,0x7b,0x96,0xa1,0x95,0x79,0x5f,0x57,0x65,
0x7f,0x96,0x9f,0x93,0x79,0x60,0x57,0x63,0x7b,0x91,0x99,0x91,0x7c,0x68,0x5f,0x68,
0x79,0x8a,0x93,0x91,0x86,0x7b,0x70,0x6b,0x6c,0x6d,0x6e,0x71,0x74,0x78,0x7a,0x74,
0x69,0x59,0x54,0x5c,0x6b,0x7e,0x86,0x7c,0x69,0x50,0x42,0x4d,0x69,0x87,0x96,0x8c,
0x6c,0x4c,0x3c,0x4b,0x6c,0x8c,0x98,0x8b,0x6b,0x49,0x3a,0x4a,0x69,0x88,0x94,0x85,
0x63,0x45,0x3a,0x4c,0x6d,0x8b,0x94,0x85,0x66,0x4b,0x42,0x51,0x6e,0x8a,0x94,0x85,
0x64,0x47,0x3c,0x4c,0x6d,0x8a,0x94,0x88,0x6a,0x4c,0x3f,0x4d,0x69,0x88,0x95,0x87,
0x65,0x4a,0x3e,0x4c,0x6d,0x8b,0x96,0x87,0x67,0x49,0x3f,0x4f,0x70,0x8c,0x93,0x84,
0x64,0x47,0x3d,0x4b,0x6b,0x89,0x93,0x85,0x65,0x48,0x3e,0x4c,0x69,0x88,0x93,0x85,
0x66,0x48,0x3b,0x4a,0x68,0x87,0x93,0x8a,0x6b,0x4d,0x41,0x4d,0x69,0x87,0x91,0x83,
0x68,0x4c,0x40,0x4d,0x6a,0x86,0x91,0x86,0x68,0x4b,0x41,0x4f,0x6b,0x87,0x90,0x85,
0x6a,0x4c,0x41,0x4f,0x6e,0x8a,0x94,0x87,0x69,0x4e,0x44,0x52,0x6d,0x89,0x92,0x82,
0x64,0x47,0x3c,0x4e,0x6b,0x87,0x93,0x87,0x6b,0x4d,0x41,0x4f,0x6d,0x88,0x91,0x82,
0x67,0x4d,0x43,0x53,0x70,0x8b,0x94,0x86,0x67,0x4d,0x46,0x56,0x74,0x8c,0x8f,0x7d,
0x62,0x4b,0x48,0x5b,0x74,0x87,0x84,0x6b,0x4b,0x38,0x3d,0x57,0x75,0x87,0x81,0x65,
0x46,0x37,0x43,0x61,0x7f,0x8c,0x83,0x60,0x3e,0x32,0x40,0x62,0x83,0x8d,0x7d,0x5c,
0x3c,0x31,0x3e,0x60,0x7d,0x89,0x7c,0x5c,0x3e,0x34,0x44,0x65,0x85,0x8f,0x81,0x61,
0x3f,0x30,0x3d,0x5c,0x7b,0x89,0x7c,0x5c,0x3d,0x30,0x3c,0x5c,0x7c,0x8c,0x7e,0x5e,
0x3d,0x30,0x41,0x5f,0x7c,0x8c,0x80,0x5f,0x3c,0x2e,0x3a,0x5c,0x7c,0x8c,0x7e,0x60,
0x3f,0x32,0x40,0x60,0x80,0x8f,0x81,0x60,0x3f,0x32,0x3f,0x60,0x7f,0x8d,0x80,0x62,
0x41,0x33,0x3e,0x5d,0x7d,0x8c,0x7e,0x5e,0x3e,0x30,0x3a,0x5c,0x7c,0x8d,0x82,0x61,
0x3e,0x30,0x3e,0x5e,0x7e,0x8c,0x81,0x62,0x41,0x32,0x3e,0x5f,0x80,0x8f,0x82,0x61,
0x40,0x32,0x3f,0x5f,0x80,0x8f,0x83,0x62,0x3f,0x30,0x3c,0x5e,0x7e,0x8c,0x81,0x61,
0x3f,0x33,0x40,0x60,0x80,0x8c,0x7e,0x5e,0x3d,0x30,0x3e,0x5d,0x7c,0x8b,0x7f,0x60,
0x40,0x36,0x43,0x63,0x82,0x8f,0x82,0x65,0x46,0x37,0x42,0x5e,0x7a,0x84,0x7b,0x61,
0x45,0x3a,0x42,0x5a,0x79,0x89,0x82,0x6e,0x54,0x43,0x3e,0x4a,0x59,0x69,0x6d,0x67,
0x55,0x45,0x3a,0x3a,0x46,0x54,0x60,0x65,0x5f,0x50,0x3e,0x32,0x34,0x44,0x56,0x63,
0x64,0x56,0x42,0x30,0x2d,0x3f,0x59,0x6f,0x72,0x62,0x47,0x31,0x2b,0x3c,0x55,0x6a,
0x6d,0x5d,0x42,0x30,0x30,0x42,0x58,0x6b,0x6a,0x59,0x41,0x2e,0x2c,0x3f,0x58,0x6a,
0x6b,0x5b,0x44,0x35,0x35,0x43,0x58,0x69,0x6a,0x5b,0x44,0x32,0x30,0x40,0x57,0x68,
0x69,0x5a,0x43,0x34,0x32,0x42,0x5a,0x6c,0x6c,0x5c,0x43,0x30,0x2e,0x3f,0x56,0x69,
0x6a,0x5a,0x43,0x30,0x2f,0x41,0x5c,0x6e,0x70,0x61,0x48,0x35,0x34,0x44,0x5b,0x6b,
0x6b,0x5a,0x41,0x30,0x2e,0x3f,0x5a,0x6a,0x6a,0x5a,0x41,0x2f,0x2f,0x3f,0x55,0x67,
0x69,0x5a,0x40,0x31,0x2f,0x40,0x59,0x6b,0x6b,0x5f,0x45,0x31,0x31,0x44,0x5c,0x70,
0x6e,0x5d,0x44,0x32,0x30,0x3e,0x55,0x67,0x68,0x57,0x3e,0x2c,0x2e,0x41,0x59,0x6b,
0x6d,0x5f,0x48,0x36,0x32,0x43,0x5a,0x6b,0x6d,0x5c,0x42,0x30,0x2e,0x3e,0x54,0x68,
0x66,0x58,0x43,0x32,0x30,0x3f,0x57,0x67,0x67,0x59,0x45,0x35,0x32,0x3f,0x53,0x64,
0x65,0x5b,0x4a,0x3c,0x3a,0x43,0x50,0x59,0x5a,0x53,0x47,0x3e,0x3b,0x3f,0x46,0x48,
0x45,0x40,0x3b,0x38,0x38,0x3c,0x40,0x42,0x43,0x42,0x42,0x44,0x45,0x45,0x44,0x42,
0x40,0x40,0x41,0x43,0x44,0x47,0x46,0x45,0x46,0x44,0x43,0x46,0x46,0x46,0x45,0x44,
0x41,0x41,0x41,0x42,0x3f,0x42,0x42,0x43,0x43,0x41,0x3f,0x3f,0x3f,0x42,0x43,0x43,
0x44,0x46,0x44,0x43,0x44,0x45,0x46,0x46,0x43,0x41,0x3f,0x40,0x40,0x41,0x43,0x43,
0x43,0x45,0x46,0x45,0x44,0x43,0x43,0x43,0x43,0x44,0x41,0x41,0x3e,0x3c,0x3c,0x3e,
0x3e,0x41,0x42,0x41,0x43,0x43,0x43,0x44,0x46,0x47,0x48,0x47,0x47,0x46,0x45,0x43,
0x42,0x43,0x43,0x43,0x42,0x42,0x42,0x42,0x42,0x41,0x41,0x40,0x40,0x41,0x41,0x42,
0x42,0x42,0x40,0x40,0x42,0x44,0x45,0x46,0x46,0x43,0x43,0x42,0x41,0x43,0x44,0x44,
0x43,0x43,0x42,0x40,0x3e,0x3e,0x3e,0x41,0x42,0x42,0x41,0x40,0x3f,0x43,0x44,0x46,
0x46,0x44,0x43,0x43,0x42,0x44,0x44,0x42,0x40,0x3f,0x41,0x41,0x40,0x3f,0x3f,0x3e,
0x3f,0x3f,0x3f,0x43,0x43,0x42,0x41,0x41,0x43,0x45,0x44,0x43,0x44,0x44,0x44,0x41,
0x43,0x42,0x3f,0x3e,0x3c,0x3a,0x3a,0x39,0x38,0x39,0x3a,0x3b,0x3a,0x3a,0x37,0x38,
// Line 21
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//Field 8
// Line 10
0x39,0x37,0x36,0x36,0x36,0x36,0x37,0x37,0x36,0x35,0x36,0x36,0x37,0x38,0x39,0x38,
0x37,0x36,0x35,0x35,0x36,0x38,0x3a,0x3a,0x37,0x37,0x38,0x38,0x38,0x37,0x36,0x38,
0x3a,0x39,0x3a,0x39,0x39,0x3a,0x3a,0x39,0x37,0x35,0x34,0x33,0x33,0x33,0x35,0x37,
0x37,0x34,0x34,0x35,0x36,0x37,0x3a,0x3a,0x38,0x37,0x37,0x37,0x39,0x3a,0x3b,0x3b,
0x3a,0x38,0x37,0x37,0x37,0x39,0x39,0x37,0x37,0x37,0x36,0x37,0x36,0x36,0x38,0x39,
0x38,0x35,0x36,0x36,0x36,0x37,0x36,0x35,0x38,0x39,0x38,0x35,0x36,0x35,0x36,0x37,
0x37,0x34,0x34,0x34,0x35,0x38,0x39,0x3a,0x3a,0x39,0x38,0x38,0x36,0x36,0x37,0x36,
0x35,0x34,0x34,0x36,0x39,0x3b,0x3b,0x39,0x3a,0x3b,0x3c,0x3b,0x3b,0x3a,0x3b,0x3a,
0x38,0x38,0x37,0x37,0x38,0x39,0x39,0x38,0x38,0x37,0x37,0x39,0x3a,0x3a,0x3b,0x3a,
0x37,0x37,0x39,0x39,0x38,0x39,0x39,0x39,0x37,0x35,0x35,0x36,0x36,0x36,0x38,0x38,
0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3a,0x36,0x35,0x36,0x36,0x35,0x36,0x36,
0x35,0x36,0x36,0x36,0x36,0x36,0x35,0x37,0x39,0x39,0x37,0x38,0x38,0x3a,0x3a,0x3a,
0x38,0x3a,0x38,0x36,0x37,0x39,0x3a,0x3b,0x3a,0x3a,0x3b,0x3c,0x3a,0x39,0x38,0x38,
0x38,0x39,0x39,0x3a,0x3b,0x3a,0x37,0x38,0x36,0x37,0x3a,0x3a,0x38,0x37,0x37,0x39,
0x38,0x38,0x38,0x39,0x3a,0x39,0x37,0x37,0x36,0x37,0x39,0x39,0x3a,0x3a,0x39,0x38,
0x3a,0x3c,0x3d,0x3b,0x38,0x37,0x38,0x3a,0x38,0x36,0x37,0x37,0x35,0x35,0x34,0x36,
0x38,0x3a,0x3a,0x3b,0x3a,0x3b,0x3b,0x3a,0x39,0x38,0x38,0x38,0x36,0x3a,0x38,0x36,
0x36,0x37,0x37,0x38,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x35,0x35,0x36,0x36,0x36,
0x35,0x35,0x36,0x36,0x35,0x35,0x38,0x3a,0x3a,0x3a,0x3b,0x3c,0x3c,0x3b,0x3a,0x3b,
0x3a,0x39,0x36,0x36,0x36,0x36,0x38,0x39,0x39,0x39,0x39,0x37,0x38,0x3a,0x3a,0x36,
0x37,0x37,0x37,0x39,0x39,0x39,0x3b,0x3b,0x3b,0x3a,0x38,0x37,0x36,0x35,0x36,0x37,
0x39,0x3a,0x3a,0x39,0x37,0x37,0x3a,0x3a,0x3a,0x3a,0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,
0x37,0x35,0x35,0x36,0x38,0x37,0x3a,0x38,0x38,0x3a,0x3a,0x3a,0x3d,0x3c,0x3b,0x3a,
0x36,0x35,0x36,0x37,0x39,0x3a,0x3d,0x3d,0x3a,0x39,0x38,0x39,0x3a,0x3a,0x3b,0x3c,
0x3b,0x3b,0x3c,0x3b,0x3b,0x3b,0x3b,0x39,0x39,0x39,0x39,0x38,0x36,0x36,0x37,0x3b,
0x3b,0x3a,0x3b,0x3a,0x38,0x37,0x37,0x38,0x39,0x3a,0x39,0x36,0x35,0x36,0x36,0x3a,
0x39,0x39,0x3a,0x38,0x37,0x38,0x3a,0x3a,0x39,0x37,0x38,0x38,0x36,0x36,0x38,0x39,
0x38,0x36,0x37,0x3a,0x3d,0x3f,0x3e,0x3c,0x3a,0x39,0x39,0x3a,0x3b,0x3a,0x3a,0x38,
0x36,0x36,0x37,0x3b,0x3e,0x3e,0x3b,0x39,0x39,0x3a,0x3a,0x3a,0x3b,0x3a,0x39,0x38,
0x37,0x36,0x37,0x36,0x37,0x37,0x37,0x35,0x36,0x36,0x37,0x3b,0x3c,0x3c,0x3c,0x3a,
0x3a,0x3b,0x3c,0x3c,0x3b,0x3b,0x38,0x35,0x35,0x38,0x3a,0x3b,0x3a,0x37,0x38,0x38,
0x36,0x37,0x38,0x39,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x3a,0x39,0x39,0x36,
0x35,0x35,0x33,0x34,0x36,0x37,0x38,0x39,0x38,0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,
0x37,0x38,0x36,0x35,0x35,0x34,0x33,0x33,0x33,0x36,0x3a,0x3b,0x3a,0x39,0x38,0x39,
0x3a,0x3a,0x3b,0x3a,0x37,0x35,0x35,0x39,0x3b,0x3c,0x3d,0x3c,0x39,0x37,0x33,0x34,
0x36,0x37,0x36,0x35,0x33,0x33,0x35,0x36,0x36,0x36,0x37,0x3a,0x39,0x3a,0x3b,0x3a,
0x3a,0x3b,0x3c,0x3e,0x3c,0x3a,0x3a,0x37,0x36,0x36,0x36,0x37,0x37,0x39,0x38,0x35,
0x33,0x33,0x36,0x39,0x39,0x37,0x36,0x36,0x36,0x38,0x3a,0x3b,0x3c,0x3b,0x36,0x31,
0x32,0x35,0x36,0x38,0x36,0x34,0x37,0x38,0x37,0x36,0x36,0x37,0x39,0x39,0x37,0x37,
0x38,0x38,0x37,0x35,0x34,0x35,0x36,0x38,0x36,0x36,0x36,0x36,0x36,0x35,0x34,0x35,
0x36,0x3a,0x3a,0x39,0x36,0x35,0x36,0x38,0x38,0x37,0x37,0x38,0x3a,0x38,0x36,0x37,
0x3a,0x3b,0x3d,0x3c,0x3a,0x38,0x36,0x35,0x35,0x35,0x37,0x38,0x38,0x36,0x35,0x37,
0x38,0x39,0x3a,0x39,0x38,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x3a,0x38,0x36,0x34,
0x35,0x34,0x36,0x36,0x34,0x35,0x36,0x36,0x36,0x37,0x3a,0x3a,0x3a,0x37,0x36,0x37,
0x38,0x38,0x39,0x37,0x36,0x38,0x37,0x37,0x39,0x3b,0x3b,0x3b,0x39,0x38,0x38,0x38,
0x36,0x37,0x39,0x39,0x37,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x36,0x37,0x38,0x39,
0x3c,0x3e,0x3e,0x3b,0x39,0x3a,0x3a,0x39,0x3b,0x3c,0x3c,0x3c,0x3b,0x3a,0x3c,0x3e,
0x3d,0x3e,0x3d,0x3c,0x39,0x38,0x37,0x36,0x38,0x3a,0x39,0x38,0x36,0x36,0x39,0x3a,
0x3a,0x3a,0x3b,0x3a,0x38,0x35,0x35,0x35,0x35,0x36,0x39,0x39,0x38,0x37,0x37,0x36,
0x36,0x3a,0x3c,0x3b,0x3b,0x3a,0x38,0x38,0x39,0x3b,0x3d,0x3c,0x3a,0x37,0x37,0x39,
0x3a,0x38,0x37,0x37,0x39,0x38,0x36,0x36,0x37,0x38,0x3a,0x38,0x36,0x37,0x3a,0x3b,
0x3a,0x3a,0x3a,0x38,0x39,0x36,0x35,0x35,0x36,0x36,0x37,0x36,0x35,0x35,0x36,0x38,
0x39,0x3a,0x39,0x37,0x36,0x36,0x35,0x36,0x36,0x37,0x39,0x38,0x36,0x37,0x39,0x3b,
0x3d,0x3d,0x3c,0x39,0x38,0x35,0x34,0x35,0x35,0x34,0x34,0x33,0x33,0x35,0x36,0x38,
0x3a,0x39,0x38,0x38,0x38,0x38,0x38,0x39,0x3a,0x3a,0x38,0x37,0x37,0x39,0x3a,0x3a,
0x3b,0x3b,0x39,0x36,0x35,0x34,0x38,0x3b,0x3a,0x3a,0x38,0x37,0x36,0x36,0x38,0x3a,
0x3b,0x3a,0x37,0x37,0x36,0x36,0x37,0x38,0x3a,0x3b,0x3b,0x3a,0x39,0x39,0x38,0x39,
0x3a,0x3a,0x3a,0x39,0x36,0x32,0x33,0x35,0x36,0x37,0x39,0x38,0x38,0x36,0x35,0x36,
0x37,0x38,0x38,0x38,0x38,0x37,0x37,0x36,0x36,0x3a,0x38,0x37,0x37,0x36,0x36,0x37,
0x38,0x39,0x3a,0x3a,0x38,0x37,0x36,0x36,0x35,0x36,0x36,0x35,0x36,0x37,0x37,0x37,
0x35,0x35,0x37,0x38,0x36,0x35,0x37,0x37,0x37,0x38,0x3a,0x3b,0x3e,0x3b,0x39,0x39,
0x38,0x37,0x37,0x35,0x35,0x35,0x36,0x35,0x33,0x35,0x36,0x38,0x39,0x3a,0x3a,0x3a,
0x36,0x35,0x36,0x35,0x34,0x33,0x34,0x34,0x33,0x33,0x36,0x37,0x36,0x35,0x36,0x36,
0x38,0x3a,0x39,0x38,0x36,0x36,0x37,0x36,0x36,0x36,0x35,0x35,0x33,0x31,0x33,0x34,
0x36,0x37,0x39,0x3a,0x3b,0x3b,0x3a,0x37,0x37,0x38,0x37,0x37,0x33,0x32,0x33,0x33,
0x33,0x33,0x33,0x34,0x36,0x35,0x35,0x36,0x36,0x35,0x35,0x38,0x39,0x39,0x39,0x36,
0x33,0x35,0x35,0x36,0x37,0x37,0x37,0x36,0x36,0x36,0x36,0x39,0x39,0x38,0x3a,0x39,
0x38,0x38,0x36,0x35,0x37,0x38,0x38,0x38,0x37,0x36,0x35,0x34,0x35,0x37,0x3a,0x3b,
0x3b,0x3b,0x3a,0x39,0x39,0x38,0x38,0x3a,0x3b,0x3b,0x3a,0x38,0x36,0x37,0x38,0x38,
0x38,0x3a,0x3a,0x39,0x39,0x37,0x37,0x36,0x35,0x35,0x36,0x37,0x37,0x36,0x35,0x33,
0x33,0x34,0x35,0x36,0x36,0x36,0x36,0x37,0x39,0x38,0x3a,0x39,0x38,0x3a,0x3a,0x3a,
0x37,0x36,0x35,0x35,0x33,0x33,0x33,0x35,0x37,0x38,0x39,0x38,0x38,0x3a,0x3a,0x39,
0x39,0x3a,0x3a,0x3a,0x36,0x35,0x37,0x37,0x38,0x39,0x3a,0x3a,0x37,0x37,0x37,0x37,
0x39,0x39,0x38,0x3a,0x3a,0x39,0x37,0x35,0x35,0x37,0x37,0x36,0x34,0x35,0x36,0x37,
0x38,0x39,0x3a,0x3a,0x37,0x36,0x35,0x35,0x35,0x34,0x35,0x35,0x37,0x37,0x38,0x37,
0x39,0x37,0x36,0x37,0x36,0x36,0x3a,0x38,0x36,0x37,0x39,0x3a,0x3a,0x39,0x37,0x37,
0x37,0x36,0x35,0x35,0x33,0x33,0x36,0x36,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x36,
0x36,0x36,0x37,0x36,0x35,0x34,0x36,0x36,0x36,0x36,0x37,0x37,0x37,0x36,0x33,0x34,
0x35,0x35,0x33,0x33,0x33,0x33,0x33,0x35,0x35,0x38,0x39,0x37,0x37,0x36,0x34,0x34,
0x35,0x35,0x38,0x3a,0x3a,0x38,0x36,0x35,0x35,0x36,0x36,0x38,0x38,0x35,0x33,0x33,
0x35,0x36,0x38,0x39,0x39,0x3a,0x38,0x39,0x38,0x3a,0x39,0x39,0x39,0x37,0x35,0x35,
0x34,0x34,0x35,0x33,0x33,0x33,0x33,0x35,0x36,0x37,0x38,0x36,0x35,0x34,0x34,0x36,
0x38,0x39,0x39,0x38,0x38,0x3a,0x3a,0x3b,0x3b,0x3a,0x38,0x39,0x39,0x3a,0x38,0x37,
0x36,0x36,0x36,0x37,0x38,0x3a,0x3a,0x38,0x39,0x3a,0x3b,0x3e,0x3d,0x3b,0x3a,0x39,
0x37,0x35,0x35,0x35,0x33,0x35,0x33,0x33,0x35,0x37,0x3b,0x3e,0x3d,0x3d,0x3c,0x3a,
0x37,0x38,0x39,0x3a,0x3b,0x39,0x37,0x35,0x35,0x37,0x3a,0x3a,0x38,0x36,0x36,0x35,
0x33,0x32,0x33,0x35,0x37,0x39,0x39,0x34,0x37,0x37,0x37,0x3a,0x3a,0x39,0x39,0x38,
0x36,0x35,0x35,0x35,0x37,0x38,0x37,0x37,0x37,0x3a,0x3c,0x3c,0x3b,0x3a,0x38,0x37,
0x35,0x35,0x35,0x35,0x35,0x35,0x36,0x39,0x39,0x3a,0x3b,0x3c,0x3c,0x3a,0x38,0x37,
0x36,0x38,0x38,0x38,0x38,0x38,0x37,0x36,0x34,0x35,0x36,0x35,0x35,0x35,0x35,0x35,
0x35,0x36,0x36,0x38,0x3a,0x3a,0x38,0x36,0x34,0x35,0x37,0x36,0x36,0x37,0x38,0x39,
0x38,0x39,0x3a,0x37,0x3a,0x39,0x37,0x3a,0x39,0x37,0x36,0x37,0x36,0x37,0x38,0x38,
0x38,0x36,0x33,0x33,0x36,0x38,0x39,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,0x3b,0x3a,0x38,
0x35,0x33,0x34,0x36,0x36,0x35,0x35,0x37,0x37,0x36,0x35,0x35,0x36,0x37,0x36,0x34,
0x33,0x33,0x33,0x34,0x33,0x33,0x36,0x38,0x37,0x37,0x36,0x38,0x3a,0x3a,0x39,0x39,
0x3a,0x39,0x35,0x33,0x33,0x35,0x39,0x3a,0x39,0x39,0x39,0x39,0x39,0x39,0x3a,0x3a,
// Line 11
0x36,0x37,0x37,0x36,0x35,0x35,0x34,0x34,0x35,0x35,0x35,0x34,0x34,0x34,0x37,0x37,
0x38,0x38,0x38,0x38,0x39,0x38,0x38,0x38,0x37,0x35,0x34,0x35,0x36,0x37,0x37,0x37,
0x35,0x36,0x37,0x37,0x38,0x39,0x39,0x39,0x37,0x34,0x33,0x33,0x34,0x36,0x36,0x34,
0x2f,0x2f,0x33,0x3e,0x50,0x64,0x71,0x78,0x74,0x67,0x5b,0x54,0x56,0x5f,0x6b,0x75,
0x78,0x74,0x6c,0x64,0x5d,0x5b,0x61,0x6a,0x71,0x72,0x72,0x6c,0x64,0x5e,0x58,0x58,
0x5c,0x63,0x6a,0x6f,0x70,0x6c,0x63,0x5b,0x54,0x56,0x5f,0x69,0x71,0x77,0x77,0x70,
0x6a,0x64,0x5f,0x5d,0x61,0x67,0x6c,0x70,0x6f,0x6c,0x67,0x61,0x5d,0x5f,0x65,0x6d,
0x73,0x77,0x77,0x73,0x6a,0x60,0x5a,0x5b,0x61,0x69,0x72,0x78,0x77,0x71,0x68,0x60,
0x5c,0x5d,0x63,0x68,0x69,0x69,0x6a,0x6c,0x72,0x7b,0x8b,0x9a,0xa5,0xa9,0xa7,0x9c,
0x8e,0x7c,0x6d,0x64,0x5d,0x58,0x53,0x4c,0x43,0x3c,0x37,0x38,0x42,0x52,0x64,0x75,
0x81,0x89,0x8f,0x94,0x98,0x9a,0x9c,0x9b,0x97,0x96,0x94,0x96,0x99,0x99,0x94,0x89,
0x7a,0x6c,0x61,0x57,0x4e,0x45,0x3c,0x34,0x30,0x38,0x4a,0x60,0x74,0x7e,0x7d,0x76,
0x6b,0x62,0x5b,0x56,0x4e,0x45,0x3b,0x34,0x33,0x43,0x57,0x6e,0x7e,0x81,0x7b,0x72,
0x61,0x54,0x4d,0x49,0x44,0x3e,0x37,0x31,0x2b,0x2a,0x2e,0x38,0x43,0x50,0x5e,0x6a,
0x72,0x74,0x70,0x68,0x60,0x5b,0x58,0x51,0x47,0x3d,0x35,0x34,0x3b,0x4c,0x61,0x77,
0x87,0x90,0x94,0x95,0x94,0x8f,0x84,0x74,0x64,0x56,0x53,0x59,0x66,0x72,0x79,0x78,
0x72,0x69,0x62,0x5f,0x5b,0x56,0x49,0x38,0x30,0x2f,0x3e,0x59,0x73,0x84,0x88,0x7f,
0x6d,0x5f,0x56,0x53,0x4f,0x45,0x38,0x2d,0x2d,0x39,0x4d,0x67,0x7a,0x84,0x7f,0x6f,
0x5e,0x55,0x57,0x61,0x6f,0x77,0x79,0x76,0x6f,0x67,0x61,0x60,0x62,0x66,0x6a,0x6b,
0x69,0x6e,0x77,0x82,0x8e,0x9a,0xa3,0xa9,0xa8,0xa2,0x9c,0x97,0x96,0x97,0x9b,0x9f,
0xa0,0x9f,0x9e,0x9c,0x9a,0x9a,0x9a,0x99,0x98,0x99,0x9c,0x9e,0x9f,0x9c,0x94,0x88,
0x78,0x67,0x5b,0x50,0x49,0x42,0x3c,0x38,0x34,0x31,0x2e,0x31,0x35,0x3b,0x3f,0x3f,
0x39,0x33,0x31,0x36,0x44,0x57,0x6a,0x78,0x7b,0x75,0x6a,0x5e,0x58,0x59,0x61,0x6b,
0x73,0x78,0x7d,0x84,0x8f,0x98,0x9d,0x9c,0x91,0x81,0x6c,0x59,0x48,0x3f,0x3b,0x3b,
0x3b,0x3f,0x48,0x58,0x67,0x77,0x84,0x8e,0x93,0x93,0x93,0x90,0x86,0x78,0x66,0x56,
0x49,0x40,0x3c,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,0x3e,0x43,0x4c,0x56,0x60,0x6d,0x7a,
0x85,0x8f,0x94,0x9a,0xa0,0xa3,0xa3,0xa0,0x98,0x8e,0x80,0x71,0x63,0x5e,0x5d,0x62,
0x6e,0x78,0x7c,0x7d,0x74,0x68,0x60,0x5e,0x60,0x64,0x6a,0x6e,0x73,0x78,0x80,0x89,
0x97,0x9f,0x9c,0x90,0x7c,0x68,0x59,0x52,0x54,0x5f,0x6c,0x79,0x84,0x8c,0x94,0x9c,
0xa3,0xa5,0xa4,0xa2,0x9d,0x9a,0x9a,0x9a,0x9a,0x9b,0x9b,0x9c,0x9d,0x9e,0x9d,0x98,
0x8e,0x7f,0x70,0x64,0x5d,0x5a,0x5f,0x65,0x6d,0x78,0x81,0x89,0x93,0x99,0x9e,0xa2,
0xa2,0x9f,0x9a,0x96,0x93,0x96,0x9a,0x9d,0x9c,0x96,0x8a,0x7a,0x6a,0x5f,0x5b,0x5f,
0x64,0x6d,0x76,0x7e,0x87,0x91,0x9c,0xa4,0xa8,0xa7,0xa2,0x9a,0x97,0x94,0x95,0x99,
0x99,0x96,0x8f,0x82,0x71,0x63,0x57,0x4f,0x46,0x3e,0x38,0x38,0x3e,0x49,0x56,0x67,
0x78,0x86,0x90,0x94,0x97,0x9a,0x9f,0xa0,0xa2,0x9f,0x9d,0x9a,0x95,0x93,0x94,0x93,
0x8e,0x83,0x76,0x68,0x5d,0x5b,0x60,0x6b,0x78,0x7f,0x7c,0x76,0x6a,0x61,0x5b,0x60,
0x66,0x6f,0x77,0x79,0x73,0x6c,0x66,0x63,0x64,0x67,0x69,0x6c,0x6d,0x6f,0x75,0x7e,
0x8a,0x96,0xa0,0xa7,0xaa,0xa8,0xa3,0x9d,0x98,0x97,0x97,0x99,0x9b,0x9f,0xa3,0xa5,
0xa0,0x9c,0x98,0x98,0x97,0x9a,0x9a,0x9c,0x9e,0x9d,0x99,0x97,0x96,0x98,0x9d,0x9f,
0x9b,0x92,0x84,0x74,0x66,0x5d,0x5a,0x5c,0x61,0x69,0x73,0x7b,0x81,0x8a,0x94,0x9d,
0xa2,0xa3,0xa0,0x9b,0x93,0x85,0x76,0x69,0x5e,0x55,0x4d,0x46,0x3f,0x3d,0x3b,0x39,
0x39,0x3b,0x3d,0x3e,0x40,0x3f,0x3c,0x3b,0x38,0x38,0x37,0x36,0x35,0x38,0x3e,0x45,
0x50,0x5f,0x6e,0x7a,0x86,0x8b,0x93,0x9c,0xa3,0xa7,0xaa,0xa5,0x9a,0x8c,0x7d,0x6e,
0x61,0x56,0x4d,0x46,0x3f,0x3b,0x38,0x3b,0x43,0x50,0x63,0x74,0x82,0x8d,0x91,0x93,
0x95,0x97,0x98,0x9b,0x9b,0x9c,0x9b,0x9a,0x9a,0x98,0x99,0x9c,0xa0,0xa2,0xa0,0x98,
0x90,0x81,0x6f,0x61,0x59,0x58,0x5c,0x62,0x68,0x71,0x7c,0x88,0x90,0x96,0x94,0x8d,
0x80,0x70,0x61,0x54,0x4a,0x42,0x3c,0x37,0x38,0x40,0x50,0x63,0x75,0x81,0x83,0x7a,
0x6b,0x5d,0x54,0x52,0x4e,0x49,0x44,0x3b,0x32,0x2f,0x32,0x39,0x42,0x46,0x43,0x3d,
0x36,0x33,0x32,0x32,0x33,0x35,0x38,0x39,0x39,0x3b,0x3b,0x3c,0x3b,0x3a,0x3b,0x3e,
0x3f,0x3e,0x3d,0x3b,0x38,0x36,0x37,0x3a,0x3c,0x3c,0x39,0x34,0x33,0x34,0x37,0x3d,
0x3f,0x3c,0x37,0x2f,0x2d,0x36,0x49,0x5f,0x6e,0x79,0x79,0x73,0x69,0x5e,0x57,0x54,
0x4f,0x47,0x3c,0x33,0x33,0x3f,0x53,0x68,0x7b,0x83,0x80,0x71,0x60,0x4f,0x46,0x44,
0x42,0x3d,0x37,0x2f,0x2c,0x2f,0x36,0x3e,0x45,0x4c,0x54,0x5e,0x69,0x78,0x86,0x93,
0x96,0x93,0x8d,0x81,0x73,0x67,0x5e,0x4e,0x42,0x37,0x32,0x35,0x3d,0x4c,0x61,0x75,
0x81,0x83,0x7b,0x6e,0x62,0x5b,0x54,0x4d,0x45,0x3c,0x33,0x33,0x3c,0x51,0x69,0x7c,
0x83,0x7d,0x6e,0x5e,0x50,0x4c,0x4b,0x49,0x44,0x3a,0x2f,0x2b,0x2f,0x3b,0x46,0x4a,
0x45,0x39,0x2f,0x2d,0x34,0x46,0x5b,0x6c,0x76,0x76,0x71,0x6c,0x65,0x5e,0x59,0x52,
0x46,0x3b,0x35,0x37,0x42,0x55,0x69,0x7a,0x83,0x81,0x76,0x65,0x56,0x4d,0x49,0x46,
0x40,0x39,0x32,0x2c,0x2b,0x30,0x39,0x43,0x4c,0x56,0x5f,0x6c,0x7b,0x88,0x93,0x98,
0x99,0x96,0x8a,0x7b,0x6b,0x5e,0x53,0x50,0x54,0x61,0x73,0x81,0x8c,0x93,0x97,0x9e,
0xa3,0xa8,0xa8,0xa4,0x9c,0x8a,0x76,0x64,0x59,0x53,0x4f,0x48,0x40,0x39,0x35,0x37,
0x43,0x57,0x6e,0x7e,0x83,0x7b,0x6e,0x61,0x58,0x57,0x62,0x6f,0x78,0x7d,0x7a,0x73,
0x68,0x61,0x5f,0x61,0x66,0x6b,0x6f,0x71,0x74,0x7b,0x87,0x94,0x9e,0xa6,0xa8,0xa5,
0x9f,0x91,0x81,0x71,0x63,0x59,0x52,0x4e,0x4a,0x46,0x40,0x39,0x32,0x31,0x34,0x3b,
0x43,0x44,0x40,0x3a,0x34,0x32,0x37,0x41,0x4f,0x5f,0x70,0x7e,0x86,0x91,0x94,0x98,
0x9f,0xa3,0xa4,0xa3,0x9a,0x8d,0x80,0x72,0x66,0x5b,0x5c,0x60,0x67,0x6f,0x78,0x82,
0x8a,0x91,0x96,0x9b,0xa0,0xa2,0xa2,0x9d,0x94,0x87,0x76,0x67,0x5c,0x58,0x57,0x5c,
0x63,0x6a,0x71,0x7a,0x85,0x91,0x9c,0xa0,0x9c,0x8f,0x7c,0x68,0x59,0x53,0x56,0x5c,
0x67,0x72,0x7d,0x88,0x93,0x9b,0x9e,0x98,0x8a,0x78,0x64,0x56,0x51,0x57,0x64,0x73,
0x79,0x78,0x73,0x69,0x60,0x5a,0x54,0x4f,0x46,0x40,0x37,0x30,0x2f,0x32,0x37,0x3e,
0x46,0x50,0x5b,0x66,0x71,0x7b,0x84,0x8d,0x93,0x96,0x91,0x84,0x73,0x61,0x53,0x52,
0x59,0x68,0x78,0x81,0x80,0x78,0x6d,0x64,0x5e,0x59,0x52,0x47,0x38,0x2e,0x2b,0x3b,
0x51,0x69,0x7f,0x86,0x7f,0x71,0x5e,0x52,0x51,0x5b,0x69,0x72,0x78,0x75,0x6c,0x63,
0x5c,0x5a,0x61,0x69,0x71,0x78,0x78,0x71,0x68,0x60,0x5c,0x60,0x66,0x6b,0x6e,0x6f,
0x70,0x73,0x7b,0x87,0x95,0x9d,0x9b,0x90,0x7f,0x6c,0x5c,0x54,0x54,0x5b,0x6a,0x79,
0x87,0x93,0x9a,0x9d,0x9e,0x9f,0xa0,0xa0,0x9f,0x9a,0x8e,0x7e,0x6c,0x5b,0x54,0x57,
0x5f,0x6e,0x76,0x79,0x76,0x6e,0x67,0x61,0x5c,0x59,0x53,0x4a,0x3e,0x34,0x2f,0x2f,
0x31,0x36,0x3e,0x47,0x54,0x61,0x6e,0x72,0x75,0x6f,0x66,0x5e,0x59,0x54,0x52,0x4a,
0x3f,0x37,0x34,0x3b,0x4c,0x64,0x7a,0x8a,0x92,0x94,0x93,0x93,0x94,0x9a,0x9e,0x9f,
0x9c,0x9b,0x9a,0x9b,0x9c,0x99,0x90,0x82,0x72,0x60,0x53,0x49,0x40,0x3b,0x39,0x39,
0x39,0x39,0x3a,0x3b,0x3c,0x40,0x49,0x5a,0x69,0x74,0x78,0x72,0x64,0x5b,0x57,0x5d,
0x68,0x72,0x78,0x78,0x71,0x66,0x5e,0x5b,0x5b,0x5a,0x57,0x4d,0x3f,0x33,0x2c,0x2c,
0x33,0x3c,0x43,0x45,0x42,0x3b,0x36,0x31,0x30,0x32,0x35,0x36,0x36,0x3c,0x45,0x51,
0x63,0x72,0x80,0x8c,0x93,0x98,0x9d,0xa0,0xa2,0xa4,0xa0,0x97,0x87,0x78,0x68,0x5c,
0x56,0x51,0x49,0x43,0x37,0x32,0x36,0x43,0x57,0x6c,0x7a,0x7c,0x75,0x69,0x60,0x5b,
0x56,0x4f,0x45,0x3a,0x33,0x34,0x44,0x5d,0x73,0x84,0x87,0x80,0x73,0x67,0x60,0x5b,
0x56,0x4a,0x3c,0x30,0x2f,0x3b,0x54,0x6e,0x7d,0x81,0x7a,0x6a,0x5f,0x56,0x52,0x4d,
0x45,0x3b,0x33,0x2d,0x2c,0x32,0x3a,0x3f,0x3f,0x3d,0x3a,0x39,0x3a,0x39,0x36,0x34,
0x32,0x33,0x39,0x44,0x52,0x63,0x71,0x7c,0x84,0x8d,0x94,0x9a,0x9c,0xa0,0xa1,0xa0,
0x9a,0x90,0x84,0x76,0x66,0x5c,0x5a,0x61,0x6e,0x78,0x7d,0x7b,0x70,0x64,0x5d,0x5c,
0x5f,0x64,0x68,0x6c,0x70,0x78,0x81,0x8d,0x96,0x97,0x93,0x89,0x7a,0x68,0x54,0x48,
0x3c,0x34,0x32,0x34,0x3b,0x4f,0x63,0x73,0x7e,0x81,0x7b,0x70,0x64,0x5b,0x5b,0x63,
0x69,0x6e,0x72,0x77,0x7d,0x87,0x93,0xa0,0xa8,0xaa,0xa7,0xa2,0x9a,0x96,0x96,0x98,
0x9a,0x98,0x91,0x86,0x76,0x67,0x59,0x4d,0x44,0x3f,0x3b,0x36,0x33,0x32,0x35,0x37,
0x38,0x38,0x3a,0x3a,0x3a,0x38,0x36,0x32,0x36,0x37,0x38,0x38,0x37,0x36,0x36,0x34,
0x34,0x37,0x3b,0x3d,0x3e,0x3c,0x38,0x38,0x39,0x39,0x3b,0x3b,0x3b,0x3b,0x39,0x37,
// Line 12
0x38,0x38,0x39,0x39,0x38,0x39,0x39,0x38,0x37,0x35,0x33,0x35,0x37,0x38,0x37,0x37,
0x37,0x39,0x39,0x39,0x37,0x38,0x37,0x38,0x38,0x37,0x38,0x39,0x38,0x36,0x35,0x34,
0x34,0x33,0x32,0x33,0x36,0x3a,0x3d,0x3c,0x39,0x36,0x35,0x36,0x39,0x3b,0x3c,0x37,
0x2f,0x2d,0x33,0x40,0x53,0x66,0x76,0x7b,0x78,0x6b,0x5e,0x59,0x5a,0x60,0x6a,0x73,
0x76,0x74,0x6a,0x60,0x59,0x57,0x5e,0x67,0x6d,0x70,0x73,0x71,0x6a,0x60,0x5a,0x59,
0x5e,0x67,0x6f,0x74,0x73,0x6d,0x63,0x5b,0x55,0x57,0x5d,0x66,0x6c,0x71,0x71,0x6c,
0x63,0x5e,0x5a,0x59,0x60,0x6a,0x72,0x76,0x74,0x6d,0x65,0x5c,0x57,0x59,0x5f,0x67,
0x6d,0x6f,0x6e,0x67,0x61,0x5b,0x59,0x5d,0x63,0x6c,0x74,0x76,0x73,0x6e,0x67,0x63,
0x5f,0x5e,0x61,0x66,0x6a,0x6c,0x6d,0x6f,0x76,0x81,0x8f,0x9a,0xa3,0xa8,0xa8,0x9f,
0x91,0x7e,0x6f,0x62,0x59,0x53,0x4e,0x4a,0x42,0x39,0x34,0x34,0x3d,0x4f,0x65,0x77,
0x84,0x8b,0x8e,0x92,0x96,0x9b,0x9e,0x9e,0x9a,0x97,0x95,0x95,0x94,0x95,0x8f,0x85,
0x79,0x6b,0x5f,0x55,0x4d,0x42,0x38,0x30,0x2f,0x36,0x47,0x5c,0x6f,0x7b,0x7b,0x73,
0x68,0x5e,0x57,0x53,0x4d,0x44,0x3a,0x33,0x32,0x3f,0x55,0x6e,0x7d,0x85,0x7e,0x70,
0x61,0x53,0x4b,0x47,0x44,0x40,0x3b,0x34,0x2f,0x30,0x34,0x3c,0x48,0x56,0x64,0x6e,
0x72,0x72,0x6d,0x67,0x60,0x59,0x54,0x4e,0x44,0x3a,0x33,0x31,0x3a,0x4b,0x60,0x76,
0x86,0x91,0x95,0x97,0x95,0x91,0x87,0x78,0x65,0x56,0x53,0x5b,0x6a,0x78,0x7d,0x7b,
0x70,0x67,0x61,0x5e,0x5c,0x55,0x48,0x37,0x2b,0x2b,0x3b,0x55,0x70,0x81,0x85,0x7c,
0x6d,0x61,0x5b,0x55,0x4e,0x44,0x39,0x34,0x37,0x44,0x58,0x6f,0x81,0x85,0x78,0x6d,
0x5e,0x57,0x54,0x4e,0x44,0x3b,0x33,0x31,0x3c,0x53,0x6b,0x7e,0x87,0x7e,0x6c,0x5a,
0x4f,0x51,0x5c,0x68,0x71,0x77,0x76,0x70,0x69,0x65,0x65,0x68,0x6a,0x6e,0x70,0x72,
0x75,0x7b,0x87,0x94,0x9f,0xa7,0xab,0xa9,0xa3,0x9c,0x95,0x92,0x92,0x94,0x93,0x8d,
0x80,0x6f,0x5d,0x4f,0x46,0x42,0x40,0x3c,0x39,0x34,0x30,0x30,0x35,0x3c,0x43,0x40,
0x39,0x35,0x35,0x3b,0x48,0x5a,0x6d,0x7a,0x7d,0x78,0x6d,0x62,0x5c,0x5c,0x63,0x6a,
0x6f,0x74,0x7a,0x81,0x8d,0x97,0x9f,0xa6,0xaa,0xa7,0xa0,0x96,0x8b,0x7f,0x70,0x61,
0x54,0x54,0x5b,0x67,0x74,0x79,0x78,0x74,0x6c,0x63,0x5e,0x60,0x65,0x6a,0x6d,0x72,
0x76,0x7c,0x85,0x91,0x9e,0xa7,0xab,0xa9,0xa2,0x97,0x8a,0x79,0x6a,0x60,0x5b,0x5c,
0x5f,0x66,0x6f,0x74,0x7d,0x84,0x8e,0x99,0x9d,0x9b,0x91,0x7e,0x69,0x5b,0x53,0x54,
0x5d,0x6a,0x77,0x83,0x8a,0x91,0x94,0x9d,0xa0,0xa3,0xa4,0xa0,0x95,0x89,0x79,0x6b,
0x63,0x5c,0x54,0x4f,0x48,0x3e,0x38,0x39,0x44,0x55,0x67,0x76,0x81,0x8a,0x91,0x94,
0x97,0x9a,0x9f,0xa1,0x9f,0x9c,0x9b,0x9b,0x9d,0x9d,0x99,0x8d,0x7c,0x6c,0x5e,0x54,
0x4d,0x45,0x3d,0x37,0x34,0x37,0x45,0x5a,0x71,0x80,0x83,0x7b,0x6d,0x5f,0x57,0x57,
0x5b,0x60,0x67,0x70,0x76,0x7e,0x86,0x90,0x9a,0xa4,0xaa,0xa8,0xa1,0x94,0x84,0x75,
0x67,0x5e,0x59,0x55,0x4e,0x44,0x3a,0x33,0x33,0x40,0x53,0x68,0x78,0x7d,0x78,0x69,
0x5b,0x54,0x57,0x5f,0x6a,0x72,0x7b,0x80,0x84,0x8e,0x98,0x9d,0x9a,0x8e,0x7b,0x67,
0x56,0x4f,0x4f,0x5b,0x67,0x74,0x83,0x91,0x99,0xa0,0x9d,0x94,0x87,0x76,0x65,0x57,
0x49,0x3f,0x38,0x34,0x33,0x39,0x46,0x57,0x68,0x7a,0x85,0x8d,0x92,0x95,0x9a,0xa1,
0xa3,0xa2,0x9f,0x9b,0x98,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9c,0x9a,0x94,0x87,0x7b,
0x67,0x59,0x53,0x4e,0x48,0x41,0x39,0x35,0x39,0x46,0x5b,0x71,0x81,0x84,0x79,0x67,
0x59,0x55,0x59,0x60,0x67,0x6d,0x71,0x77,0x80,0x8b,0x95,0x9c,0x9a,0x8d,0x79,0x65,
0x56,0x4d,0x48,0x42,0x3e,0x3d,0x3f,0x47,0x55,0x65,0x73,0x80,0x87,0x8a,0x8e,0x94,
0x9b,0xa0,0xa2,0xa2,0x9f,0x9c,0x9a,0x9a,0x99,0x94,0x8b,0x7f,0x6f,0x60,0x52,0x46,
0x3f,0x3e,0x3d,0x3b,0x38,0x37,0x37,0x38,0x38,0x3d,0x44,0x57,0x63,0x6d,0x7b,0x87,
0x92,0x9a,0x9a,0x93,0x89,0x7a,0x69,0x57,0x4f,0x4f,0x57,0x65,0x74,0x82,0x8e,0x95,
0x98,0x9e,0xa2,0xa3,0xa4,0x9f,0x96,0x8a,0x79,0x6b,0x5f,0x57,0x56,0x5b,0x61,0x67,
0x6e,0x77,0x80,0x89,0x92,0x9a,0x9f,0xa1,0xa0,0x9b,0x99,0x97,0x97,0x97,0x98,0x99,
0x9a,0x9b,0x9d,0x9e,0x9a,0x8f,0x7e,0x6d,0x5b,0x53,0x55,0x5e,0x67,0x72,0x77,0x74,
0x6b,0x64,0x5d,0x5a,0x56,0x4f,0x44,0x3b,0x32,0x2a,0x27,0x29,0x2e,0x38,0x42,0x4f,
0x5e,0x6a,0x71,0x71,0x6e,0x68,0x63,0x5f,0x5a,0x51,0x47,0x3b,0x32,0x31,0x3b,0x4d,
0x63,0x7a,0x8c,0x96,0x9a,0x9a,0x95,0x8b,0x7f,0x70,0x60,0x51,0x44,0x3c,0x38,0x36,
0x36,0x35,0x35,0x39,0x3c,0x3d,0x3c,0x39,0x35,0x32,0x33,0x35,0x35,0x33,0x33,0x33,
0x39,0x45,0x57,0x6c,0x7b,0x7e,0x76,0x68,0x5b,0x58,0x5a,0x60,0x64,0x6b,0x70,0x75,
0x7d,0x89,0x94,0x9e,0x9b,0x8f,0x7d,0x67,0x54,0x44,0x3b,0x35,0x34,0x34,0x35,0x35,
0x31,0x2f,0x30,0x37,0x42,0x51,0x63,0x6f,0x73,0x70,0x67,0x5d,0x59,0x57,0x5c,0x64,
0x6c,0x71,0x76,0x7b,0x85,0x92,0x9d,0xa6,0xa8,0xa7,0xa1,0x9a,0x96,0x94,0x97,0x9c,
0xa0,0xa1,0xa6,0xa7,0xa5,0xa1,0x9c,0x9a,0x9a,0x9a,0x99,0x91,0x83,0x6f,0x5e,0x54,
0x52,0x5b,0x6a,0x76,0x7d,0x7b,0x72,0x67,0x5e,0x59,0x55,0x4f,0x44,0x38,0x2d,0x2b,
0x34,0x47,0x5e,0x74,0x84,0x8d,0x90,0x91,0x95,0x9a,0x9f,0xa1,0xa1,0xa0,0x9f,0x9e,
0x9d,0x9d,0x9c,0x9b,0x9a,0x99,0x96,0x8f,0x85,0x77,0x67,0x59,0x4e,0x46,0x42,0x3e,
0x3b,0x38,0x37,0x36,0x32,0x38,0x39,0x3d,0x43,0x4c,0x58,0x69,0x76,0x81,0x8c,0x93,
0x99,0x9c,0x9f,0x9e,0xa0,0x9e,0x9b,0x98,0x97,0x95,0x97,0x9a,0x9e,0xa1,0xa2,0x9c,
0x90,0x83,0x76,0x68,0x5e,0x5a,0x5a,0x61,0x6a,0x73,0x7a,0x81,0x8a,0x92,0x99,0x9d,
0xa1,0xa4,0xa1,0x98,0x8b,0x7b,0x6d,0x60,0x58,0x57,0x5b,0x63,0x6a,0x6f,0x78,0x80,
0x88,0x92,0x9a,0xa1,0xa8,0xa4,0x9e,0x94,0x87,0x79,0x6b,0x5e,0x54,0x4f,0x4b,0x45,
0x3c,0x34,0x30,0x2f,0x30,0x34,0x39,0x3e,0x3e,0x3a,0x37,0x34,0x35,0x37,0x39,0x39,
0x3b,0x3b,0x39,0x38,0x37,0x36,0x37,0x39,0x39,0x3a,0x3c,0x3b,0x38,0x36,0x34,0x35,
0x39,0x43,0x4f,0x5f,0x71,0x80,0x8c,0x95,0x99,0x98,0x92,0x87,0x78,0x65,0x53,0x46,
0x3f,0x3c,0x3b,0x38,0x39,0x38,0x35,0x34,0x36,0x3a,0x4a,0x57,0x63,0x6c,0x70,0x6d,
0x67,0x5c,0x54,0x50,0x4b,0x47,0x41,0x38,0x2f,0x2c,0x2d,0x33,0x3a,0x46,0x51,0x5a,
0x62,0x6b,0x77,0x85,0x90,0x96,0x97,0x91,0x85,0x74,0x63,0x55,0x53,0x59,0x65,0x70,
0x7a,0x7c,0x76,0x6c,0x61,0x57,0x54,0x4f,0x47,0x3d,0x34,0x2d,0x29,0x2f,0x38,0x42,
0x46,0x44,0x3a,0x31,0x2b,0x2f,0x3f,0x55,0x68,0x78,0x7d,0x77,0x6c,0x5f,0x5a,0x5d,
0x67,0x74,0x7d,0x7f,0x79,0x6d,0x61,0x5b,0x5d,0x5d,0x57,0x4a,0x3b,0x2d,0x2c,0x38,
0x50,0x6a,0x7e,0x83,0x7a,0x6a,0x5c,0x53,0x4b,0x49,0x44,0x3d,0x37,0x31,0x2e,0x30,
0x35,0x3a,0x3f,0x46,0x4e,0x5b,0x68,0x76,0x81,0x89,0x8f,0x96,0x9c,0xa2,0xa4,0xa2,
0x98,0x89,0x78,0x68,0x5b,0x54,0x4e,0x48,0x3f,0x37,0x32,0x34,0x3f,0x4f,0x63,0x76,
0x84,0x8d,0x95,0x98,0x9a,0x9f,0xa2,0xa1,0xa0,0x9d,0x99,0x95,0x92,0x92,0x95,0x98,
0x9b,0x9a,0x9a,0x93,0x87,0x7b,0x6a,0x5b,0x51,0x4b,0x47,0x42,0x3d,0x38,0x34,0x31,
0x31,0x36,0x3d,0x40,0x3b,0x34,0x2d,0x2b,0x33,0x40,0x54,0x69,0x77,0x7b,0x73,0x66,
0x5b,0x56,0x5b,0x67,0x71,0x7a,0x7b,0x74,0x6d,0x64,0x5f,0x5e,0x5d,0x54,0x49,0x39,
0x2b,0x27,0x30,0x45,0x60,0x79,0x8a,0x95,0x99,0x97,0x92,0x89,0x7e,0x71,0x64,0x54,
0x47,0x3d,0x37,0x35,0x35,0x36,0x37,0x36,0x34,0x35,0x3b,0x46,0x55,0x65,0x72,0x78,
0x74,0x6a,0x5e,0x56,0x59,0x62,0x6d,0x74,0x74,0x6a,0x60,0x57,0x55,0x59,0x5d,0x5b,
0x4c,0x3f,0x31,0x2f,0x3e,0x57,0x6f,0x80,0x82,0x78,0x66,0x55,0x4d,0x4a,0x46,0x3d,
0x33,0x2b,0x2d,0x39,0x51,0x6b,0x7f,0x87,0x80,0x70,0x61,0x59,0x59,0x60,0x68,0x6d,
0x70,0x75,0x7c,0x87,0x92,0x97,0x95,0x87,0x74,0x61,0x51,0x42,0x39,0x35,0x33,0x32,
0x33,0x37,0x3d,0x3f,0x3d,0x39,0x36,0x37,0x38,0x38,0x37,0x34,0x2f,0x2d,0x2d,0x35,
0x46,0x59,0x6a,0x75,0x76,0x70,0x68,0x5f,0x59,0x54,0x50,0x47,0x3b,0x31,0x30,0x3c,
0x51,0x67,0x7a,0x81,0x7e,0x71,0x61,0x56,0x53,0x58,0x62,0x68,0x6f,0x77,0x81,0x89,
0x95,0x9f,0xa5,0xa7,0xa4,0x9e,0x9a,0x97,0x94,0x95,0x97,0x97,0x99,0x9d,0x9d,0x9c,
0x96,0x8d,0x7e,0x6c,0x5b,0x52,0x53,0x5c,0x68,0x72,0x76,0x74,0x6e,0x66,0x5e,0x5a,
0x53,0x4b,0x44,0x3b,0x34,0x2f,0x2d,0x2d,0x32,0x3c,0x46,0x51,0x5e,0x6b,0x73,0x76,
0x71,0x66,0x5c,0x56,0x57,0x5c,0x63,0x69,0x70,0x77,0x7e,0x89,0x92,0x97,0x97,0x8e,
0x7d,0x67,0x56,0x47,0x3d,0x37,0x34,0x35,0x3b,0x45,0x54,0x65,0x74,0x7e,0x87,0x8d,
0x92,0x92,0x8d,0x85,0x78,0x67,0x56,0x48,0x40,0x3a,0x37,0x35,0x35,0x36,0x34,0x37,
0x38,0x37,0x38,0x36,0x32,0x33,0x32,0x33,0x36,0x37,0x36,0x35,0x35,0x34,0x34,0x35,
0x37,0x38,0x39,0x39,0x38,0x3a,0x3c,0x3c,0x3a,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3b,
// Line 13
0x36,0x37,0x38,0x39,0x3a,0x39,0x39,0x38,0x38,0x37,0x36,0x36,0x36,0x34,0x34,0x36,
0x36,0x35,0x34,0x34,0x34,0x36,0x36,0x37,0x37,0x38,0x38,0x37,0x36,0x37,0x37,0x37,
0x37,0x36,0x38,0x38,0x38,0x3a,0x38,0x37,0x37,0x38,0x37,0x37,0x38,0x38,0x38,0x36,
0x33,0x33,0x3d,0x45,0x57,0x69,0x77,0x7c,0x78,0x6d,0x61,0x5a,0x58,0x5e,0x68,0x74,
0x78,0x73,0x6c,0x62,0x5c,0x5a,0x5e,0x65,0x6f,0x73,0x72,0x6d,0x65,0x5d,0x59,0x5a,
0x60,0x69,0x72,0x76,0x75,0x70,0x68,0x5f,0x59,0x5a,0x5f,0x68,0x6e,0x71,0x71,0x6e,
0x66,0x61,0x5f,0x62,0x65,0x69,0x70,0x75,0x75,0x6f,0x65,0x5e,0x59,0x59,0x61,0x6a,
0x72,0x76,0x73,0x6a,0x62,0x5d,0x5b,0x5c,0x63,0x6d,0x76,0x79,0x76,0x73,0x6f,0x68,
0x62,0x61,0x63,0x68,0x6b,0x6c,0x6d,0x6f,0x75,0x7e,0x88,0x98,0xa2,0xa8,0xa8,0xa1,
0x90,0x81,0x70,0x62,0x5c,0x57,0x54,0x4d,0x44,0x3a,0x35,0x35,0x3e,0x4e,0x62,0x74,
0x80,0x89,0x8e,0x93,0x99,0x9c,0x9f,0x9f,0x9d,0x9b,0x9b,0x9c,0x9a,0x99,0x94,0x89,
0x79,0x68,0x5c,0x55,0x4f,0x47,0x3d,0x38,0x35,0x3d,0x4e,0x63,0x77,0x80,0x7f,0x73,
0x65,0x5a,0x54,0x50,0x4b,0x42,0x38,0x30,0x31,0x3f,0x56,0x6f,0x80,0x87,0x81,0x73,
0x61,0x54,0x4d,0x4a,0x46,0x40,0x3a,0x32,0x2d,0x2b,0x2f,0x38,0x46,0x57,0x64,0x6f,
0x76,0x76,0x71,0x67,0x5d,0x57,0x54,0x50,0x46,0x3b,0x34,0x34,0x3d,0x4e,0x64,0x7a,
0x8b,0x94,0x96,0x96,0x93,0x8e,0x84,0x73,0x61,0x56,0x55,0x5e,0x6b,0x77,0x7b,0x78,
0x70,0x67,0x61,0x61,0x5f,0x55,0x47,0x36,0x2a,0x2b,0x3c,0x55,0x6e,0x7d,0x80,0x73,
0x67,0x59,0x51,0x50,0x4e,0x47,0x3d,0x33,0x31,0x3d,0x54,0x6c,0x7d,0x83,0x7c,0x6d,
0x5e,0x54,0x53,0x5c,0x69,0x74,0x79,0x75,0x6c,0x64,0x5f,0x5e,0x61,0x68,0x71,0x76,
0x76,0x70,0x69,0x60,0x5b,0x5c,0x62,0x6b,0x73,0x77,0x75,0x6c,0x66,0x5e,0x5c,0x5f,
0x5f,0x5a,0x50,0x3e,0x2e,0x27,0x28,0x2f,0x38,0x3f,0x43,0x42,0x3c,0x35,0x31,0x31,
0x35,0x38,0x3a,0x39,0x38,0x38,0x37,0x37,0x3a,0x3a,0x38,0x35,0x32,0x33,0x3a,0x4a,
0x5c,0x6f,0x7c,0x80,0x7a,0x70,0x64,0x5d,0x5c,0x5f,0x65,0x6d,0x74,0x79,0x7b,0x85,
0x8e,0x9b,0xa8,0xae,0xaa,0xa3,0x94,0x84,0x77,0x6c,0x62,0x5b,0x52,0x49,0x40,0x38,
0x35,0x38,0x43,0x52,0x64,0x74,0x82,0x8e,0x97,0x9a,0x99,0x93,0x86,0x77,0x68,0x5b,
0x55,0x58,0x60,0x6b,0x75,0x7f,0x88,0x92,0x99,0x9a,0x94,0x88,0x77,0x64,0x54,0x47,
0x41,0x40,0x40,0x3e,0x3d,0x3a,0x3a,0x39,0x3b,0x3d,0x44,0x50,0x5e,0x6c,0x7b,0x87,
0x8f,0x97,0x9b,0x9e,0xa2,0xa4,0xa1,0x9b,0x8d,0x7b,0x6b,0x60,0x5a,0x5d,0x62,0x68,
0x6d,0x74,0x7b,0x82,0x8e,0x98,0x9c,0x98,0x8a,0x77,0x63,0x56,0x54,0x58,0x63,0x6d,
0x74,0x75,0x6f,0x62,0x5a,0x56,0x53,0x4f,0x47,0x3f,0x36,0x30,0x2d,0x33,0x3c,0x44,
0x48,0x46,0x3d,0x35,0x32,0x36,0x40,0x50,0x5e,0x6d,0x7a,0x86,0x8e,0x96,0x9c,0xa2,
0xa6,0xa7,0xa6,0x9c,0x8c,0x79,0x69,0x5f,0x57,0x51,0x4f,0x48,0x3e,0x39,0x3b,0x47,
0x5a,0x70,0x7e,0x80,0x76,0x67,0x59,0x54,0x59,0x65,0x74,0x7a,0x78,0x70,0x67,0x61,
0x5e,0x5c,0x59,0x52,0x47,0x3b,0x35,0x36,0x40,0x51,0x68,0x7b,0x8a,0x94,0x9a,0x9b,
0x99,0x8f,0x82,0x75,0x68,0x5f,0x5a,0x5d,0x61,0x6a,0x75,0x7e,0x86,0x8f,0x96,0x9c,
0xa3,0xa4,0xa1,0x9c,0x96,0x92,0x94,0x96,0x9a,0x99,0x94,0x85,0x73,0x61,0x55,0x52,
0x58,0x63,0x6d,0x73,0x73,0x6d,0x64,0x5d,0x5c,0x60,0x65,0x6c,0x71,0x75,0x7a,0x84,
0x90,0x9d,0xa2,0xa1,0x94,0x82,0x6f,0x5d,0x53,0x54,0x5f,0x6c,0x78,0x80,0x89,0x91,
0x97,0x9b,0x9d,0x9d,0x9d,0x9b,0x95,0x88,0x7a,0x6e,0x63,0x5a,0x57,0x5c,0x65,0x73,
0x7a,0x79,0x72,0x67,0x5f,0x5e,0x62,0x67,0x6c,0x70,0x75,0x79,0x7f,0x87,0x94,0xa0,
0xa8,0xa7,0xa0,0x99,0x96,0x95,0x97,0x99,0x9a,0x99,0x92,0x84,0x78,0x66,0x57,0x4d,
0x43,0x38,0x32,0x30,0x37,0x47,0x5a,0x6b,0x76,0x7a,0x73,0x67,0x5a,0x52,0x4e,0x4d,
0x49,0x43,0x3b,0x33,0x2e,0x31,0x38,0x3f,0x48,0x4f,0x57,0x60,0x6c,0x7a,0x8c,0x98,
0x9e,0x9c,0x91,0x84,0x76,0x6a,0x5d,0x50,0x43,0x36,0x2f,0x2f,0x39,0x4a,0x5f,0x71,
0x7a,0x7b,0x73,0x68,0x5d,0x57,0x52,0x4c,0x45,0x3d,0x34,0x36,0x3d,0x4e,0x68,0x7b,
0x83,0x7f,0x70,0x60,0x54,0x52,0x59,0x63,0x6c,0x71,0x79,0x84,0x8e,0x98,0xa1,0xa7,
0xa8,0xa6,0x9f,0x96,0x8a,0x7a,0x69,0x5b,0x54,0x57,0x61,0x6f,0x79,0x7c,0x77,0x6d,
0x61,0x59,0x56,0x54,0x52,0x4a,0x3d,0x33,0x2b,0x28,0x2f,0x3a,0x44,0x48,0x44,0x3b,
0x32,0x2f,0x34,0x42,0x54,0x68,0x77,0x7e,0x78,0x6c,0x5f,0x56,0x56,0x60,0x6d,0x77,
0x7a,0x76,0x6b,0x61,0x5c,0x5e,0x64,0x69,0x6b,0x6b,0x6c,0x6f,0x77,0x86,0x95,0xa0,
0xa6,0xa6,0xa3,0x9d,0x99,0x94,0x93,0x96,0x98,0x9b,0x9f,0xa3,0xa5,0xa4,0x9c,0x8d,
0x7c,0x6f,0x63,0x5d,0x5a,0x5c,0x60,0x68,0x6f,0x7a,0x88,0x95,0x9c,0x9b,0x91,0x81,
0x71,0x61,0x54,0x4c,0x43,0x3b,0x33,0x31,0x38,0x48,0x5d,0x72,0x81,0x86,0x7c,0x69,
0x5c,0x57,0x5a,0x68,0x74,0x7a,0x7b,0x72,0x65,0x5c,0x57,0x57,0x56,0x52,0x4a,0x40,
0x38,0x32,0x2f,0x31,0x37,0x3e,0x49,0x54,0x5e,0x68,0x6f,0x78,0x80,0x89,0x92,0x98,
0x97,0x8d,0x7a,0x65,0x54,0x4e,0x54,0x64,0x75,0x83,0x86,0x7e,0x71,0x65,0x60,0x5f,
0x61,0x65,0x68,0x6d,0x72,0x79,0x86,0x94,0x9f,0xa6,0xa7,0xa4,0xa0,0x97,0x8b,0x7b,
0x69,0x5b,0x57,0x59,0x62,0x6d,0x77,0x7a,0x77,0x6f,0x68,0x64,0x61,0x5c,0x52,0x47,
0x3a,0x31,0x32,0x3d,0x4e,0x65,0x79,0x87,0x8e,0x92,0x93,0x92,0x8d,0x82,0x72,0x62,
0x56,0x52,0x5a,0x68,0x75,0x7d,0x7e,0x77,0x6c,0x64,0x61,0x61,0x66,0x68,0x69,0x6d,
0x70,0x77,0x83,0x90,0x9b,0xa4,0xa8,0xa6,0x9d,0x90,0x82,0x74,0x68,0x5f,0x59,0x55,
0x4f,0x47,0x42,0x3d,0x3f,0x47,0x56,0x66,0x77,0x86,0x90,0x94,0x94,0x91,0x8c,0x82,
0x73,0x63,0x57,0x47,0x3d,0x3a,0x38,0x38,0x37,0x35,0x33,0x37,0x3c,0x43,0x4d,0x57,
0x60,0x6c,0x77,0x82,0x8b,0x93,0x9b,0x9f,0xa0,0x9d,0x9c,0x9b,0x96,0x92,0x93,0x95,
0x99,0x9b,0x9e,0x9e,0x9b,0x94,0x8a,0x7d,0x71,0x65,0x59,0x4f,0x46,0x3e,0x3a,0x35,
0x36,0x3e,0x4e,0x62,0x74,0x84,0x90,0x96,0x97,0x93,0x89,0x80,0x6f,0x5d,0x50,0x46,
0x3e,0x3b,0x38,0x37,0x3a,0x3c,0x3d,0x3e,0x40,0x3f,0x3d,0x3a,0x36,0x34,0x35,0x38,
0x3c,0x3e,0x3c,0x38,0x35,0x33,0x35,0x38,0x3a,0x3a,0x36,0x32,0x31,0x38,0x48,0x5c,
0x6e,0x7a,0x79,0x6f,0x63,0x5a,0x57,0x57,0x54,0x4d,0x43,0x3a,0x32,0x2d,0x30,0x38,
0x41,0x46,0x42,0x3a,0x31,0x2e,0x32,0x3f,0x4e,0x5e,0x6f,0x7f,0x8b,0x94,0x9b,0x9b,
0x93,0x84,0x74,0x66,0x59,0x50,0x47,0x40,0x38,0x32,0x35,0x42,0x57,0x6d,0x7c,0x7e,
0x77,0x66,0x57,0x50,0x54,0x5f,0x6d,0x78,0x7a,0x72,0x6c,0x64,0x5d,0x5c,0x58,0x53,
0x4a,0x3d,0x31,0x2b,0x2b,0x2f,0x34,0x3a,0x44,0x51,0x61,0x70,0x79,0x7c,0x77,0x6d,
0x61,0x58,0x58,0x61,0x6c,0x74,0x77,0x72,0x69,0x60,0x5a,0x5d,0x64,0x70,0x79,0x7b,
0x79,0x71,0x68,0x62,0x5e,0x5d,0x5b,0x54,0x48,0x3b,0x32,0x2c,0x2a,0x2b,0x30,0x3a,
0x46,0x55,0x63,0x6f,0x77,0x78,0x74,0x68,0x5d,0x59,0x5d,0x64,0x6b,0x70,0x74,0x77,
0x7d,0x87,0x95,0x9f,0x9f,0x95,0x84,0x6a,0x54,0x4d,0x50,0x5d,0x6c,0x77,0x7f,0x86,
0x8d,0x95,0x9b,0xa0,0x9f,0x9c,0x98,0x94,0x91,0x93,0x97,0x99,0x96,0x8b,0x7b,0x6c,
0x5d,0x50,0x48,0x45,0x41,0x3c,0x35,0x30,0x30,0x34,0x3b,0x40,0x42,0x40,0x39,0x33,
0x30,0x36,0x46,0x5a,0x6d,0x7a,0x7e,0x77,0x6a,0x61,0x5d,0x60,0x64,0x6a,0x6f,0x75,
0x7b,0x82,0x8e,0x97,0x9a,0x94,0x86,0x73,0x60,0x50,0x45,0x3c,0x33,0x2d,0x2f,0x37,
0x47,0x5c,0x6f,0x79,0x7b,0x76,0x6b,0x5e,0x56,0x50,0x4e,0x4b,0x44,0x3a,0x30,0x2d,
0x2d,0x32,0x3d,0x47,0x4e,0x5b,0x63,0x6f,0x7b,0x86,0x8e,0x96,0x95,0x8e,0x84,0x76,
0x65,0x55,0x46,0x3a,0x36,0x37,0x3a,0x3b,0x38,0x35,0x33,0x36,0x3f,0x4d,0x5f,0x6e,
0x75,0x75,0x71,0x69,0x60,0x59,0x53,0x4d,0x44,0x3b,0x34,0x33,0x3b,0x4b,0x61,0x76,
0x85,0x92,0x95,0x94,0x95,0x99,0x9c,0x9d,0x9b,0x9a,0x99,0x98,0x98,0x98,0x99,0x99,
0x9a,0x9c,0x9b,0x98,0x90,0x83,0x73,0x63,0x57,0x51,0x54,0x5e,0x69,0x74,0x7e,0x87,
0x8e,0x96,0x9c,0xa0,0xa2,0xa0,0x9d,0x9b,0x98,0x96,0x97,0x98,0x9b,0x9f,0xa4,0xa5,
0xa2,0x98,0x89,0x75,0x65,0x5c,0x57,0x53,0x4c,0x40,0x3a,0x34,0x37,0x46,0x5b,0x71,
0x7f,0x7f,0x75,0x65,0x59,0x56,0x58,0x5e,0x63,0x69,0x71,0x79,0x82,0x8d,0x97,0x9c,
0x9a,0x8f,0x7c,0x68,0x54,0x44,0x3c,0x37,0x36,0x35,0x35,0x35,0x33,0x32,0x33,0x39,
0x4a,0x5a,0x69,0x74,0x76,0x73,0x6b,0x61,0x58,0x54,0x4e,0x47,0x3d,0x36,0x35,0x3d,
0x4f,0x65,0x7a,0x8b,0x93,0x96,0x99,0x9b,0x9e,0xa1,0xa2,0x9e,0x9b,0x98,0x98,0x98,
0x97,0x91,0x86,0x77,0x67,0x58,0x4f,0x49,0x43,0x3e,0x38,0x34,0x33,0x33,0x34,0x38,
0x3c,0x3c,0x38,0x37,0x35,0x35,0x35,0x33,0x33,0x33,0x34,0x36,0x38,0x37,0x36,0x36,
0x34,0x34,0x36,0x3a,0x3c,0x3b,0x39,0x37,0x36,0x37,0x39,0x3a,0x39,0x3a,0x3a,0x3a,
// Line 14
0x36,0x34,0x33,0x34,0x35,0x37,0x38,0x38,0x37,0x36,0x37,0x37,0x3a,0x3b,0x3b,0x3b,
0x39,0x37,0x36,0x37,0x37,0x37,0x38,0x38,0x38,0x39,0x38,0x37,0x37,0x37,0x37,0x37,
0x35,0x34,0x34,0x33,0x32,0x33,0x36,0x37,0x36,0x35,0x33,0x32,0x34,0x37,0x3a,0x39,
0x3c,0x40,0x45,0x4d,0x55,0x5c,0x69,0x71,0x7a,0x81,0x87,0x8b,0x90,0x92,0x92,0x93,
0x95,0x95,0x96,0x97,0x96,0x96,0x98,0x9b,0x9c,0x9b,0x98,0x93,0x8e,0x86,0x7d,0x73,
0x6a,0x60,0x58,0x52,0x4d,0x45,0x40,0x3b,0x38,0x37,0x36,0x32,0x33,0x32,0x30,0x31,
0x32,0x32,0x33,0x34,0x34,0x35,0x36,0x38,0x3b,0x41,0x45,0x4b,0x52,0x5c,0x64,0x6f,
0x78,0x80,0x87,0x8a,0x8d,0x91,0x92,0x91,0x92,0x93,0x95,0x95,0x94,0x93,0x96,0x97,
0x98,0x97,0x96,0x94,0x8f,0x8a,0x82,0x79,0x6f,0x64,0x5a,0x54,0x4d,0x46,0x3e,0x3a,
0x37,0x35,0x36,0x37,0x37,0x3b,0x3b,0x38,0x37,0x38,0x37,0x37,0x35,0x35,0x37,0x38,
0x39,0x39,0x3d,0x41,0x49,0x53,0x5e,0x69,0x75,0x7e,0x84,0x8a,0x8f,0x94,0x98,0x9a,
0x98,0x97,0x94,0x92,0x91,0x93,0x94,0x96,0x96,0x96,0x94,0x96,0x91,0x8d,0x8a,0x83,
0x79,0x70,0x67,0x5f,0x56,0x4e,0x48,0x43,0x3e,0x3b,0x39,0x3b,0x3b,0x3b,0x39,0x37,
0x37,0x3b,0x3c,0x3c,0x3b,0x3a,0x39,0x39,0x38,0x3b,0x40,0x44,0x47,0x4d,0x55,0x5f,
0x68,0x73,0x7d,0x85,0x8d,0x92,0x94,0x98,0x98,0x98,0x98,0x96,0x96,0x94,0x93,0x93,
0x93,0x93,0x93,0x94,0x96,0x94,0x91,0x8c,0x85,0x7b,0x72,0x67,0x5c,0x55,0x4f,0x48,
0x41,0x3b,0x37,0x35,0x37,0x3a,0x3b,0x3d,0x3c,0x38,0x38,0x38,0x37,0x39,0x38,0x37,
0x36,0x36,0x36,0x39,0x3e,0x43,0x4c,0x56,0x5f,0x6a,0x74,0x7c,0x83,0x8c,0x90,0x92,
0x94,0x95,0x96,0x98,0x98,0x97,0x96,0x94,0x93,0x93,0x96,0x98,0x98,0x9a,0x96,0x91,
0x8c,0x85,0x7f,0x78,0x6e,0x62,0x59,0x51,0x4a,0x41,0x3d,0x39,0x37,0x38,0x39,0x38,
0x37,0x36,0x36,0x37,0x37,0x37,0x37,0x37,0x36,0x37,0x37,0x3b,0x3e,0x42,0x49,0x51,
0x5a,0x63,0x6f,0x79,0x82,0x89,0x90,0x95,0x98,0x9b,0x9c,0x9a,0x98,0x96,0x94,0x92,
0x93,0x92,0x94,0x95,0x95,0x92,0x96,0x95,0x91,0x8c,0x86,0x7c,0x71,0x65,0x5b,0x55,
0x4f,0x4a,0x42,0x3c,0x38,0x37,0x39,0x3c,0x3e,0x3e,0x3c,0x39,0x39,0x3a,0x3c,0x40,
0x3e,0x3b,0x39,0x39,0x3b,0x3e,0x42,0x46,0x4e,0x56,0x5e,0x66,0x73,0x7e,0x86,0x8e,
0x93,0x96,0x98,0x97,0x98,0x9b,0x9b,0x9a,0x97,0x95,0x93,0x94,0x94,0x95,0x96,0x97,
0x94,0x8e,0x88,0x81,0x7b,0x73,0x6a,0x60,0x58,0x51,0x4b,0x46,0x41,0x3b,0x39,0x39,
0x3a,0x39,0x3b,0x38,0x37,0x38,0x38,0x38,0x3b,0x3c,0x3c,0x3f,0x40,0x3f,0x3e,0x3b,
0x39,0x3a,0x3b,0x3b,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,0x3b,
0x39,0x39,0x38,0x37,0x37,0x38,0x39,0x38,0x37,0x37,0x38,0x39,0x39,0x3b,0x3d,0x3d,
0x3b,0x39,0x39,0x39,0x38,0x37,0x36,0x37,0x38,0x39,0x39,0x3a,0x38,0x37,0x38,0x39,
0x39,0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,0x3b,0x3b,0x3c,0x3d,0x3c,0x38,0x36,0x37,0x38,
0x38,0x39,0x3a,0x3b,0x3d,0x3c,0x3b,0x3c,0x3e,0x3f,0x3d,0x3b,0x39,0x39,0x3a,0x39,
0x37,0x37,0x39,0x3b,0x3e,0x42,0x4a,0x54,0x5e,0x68,0x72,0x7b,0x83,0x8b,0x91,0x93,
0x96,0x97,0x98,0x98,0x96,0x93,0x92,0x92,0x93,0x94,0x95,0x96,0x95,0x96,0x97,0x98,
0x97,0x95,0x95,0x96,0x96,0x96,0x93,0x94,0x92,0x91,0x92,0x93,0x92,0x94,0x94,0x94,
0x93,0x94,0x96,0x97,0x98,0x98,0x99,0x9a,0x98,0x98,0x97,0x98,0x97,0x97,0x99,0x9a,
0x9a,0x98,0x99,0x99,0x9a,0x9a,0x98,0x96,0x94,0x95,0x95,0x95,0x91,0x94,0x96,0x95,
0x93,0x91,0x8f,0x93,0x94,0x93,0x93,0x95,0x98,0x99,0x9a,0x98,0x98,0x9a,0x9c,0x9b,
0x98,0x96,0x96,0x9a,0x99,0x98,0x97,0x96,0x96,0x98,0x98,0x99,0x98,0x97,0x95,0x93,
0x92,0x93,0x93,0x94,0x8f,0x8a,0x82,0x7b,0x72,0x6a,0x61,0x59,0x53,0x4c,0x46,0x40,
0x3c,0x3a,0x39,0x3b,0x3e,0x3c,0x3b,0x3a,0x39,0x39,0x38,0x37,0x3b,0x3b,0x3a,0x39,
0x37,0x36,0x37,0x39,0x39,0x3a,0x3a,0x3a,0x3a,0x3b,0x3a,0x3b,0x3c,0x3b,0x38,0x35,
0x33,0x34,0x36,0x37,0x38,0x39,0x39,0x37,0x37,0x38,0x39,0x38,0x37,0x36,0x35,0x34,
0x33,0x33,0x37,0x37,0x36,0x37,0x37,0x37,0x36,0x34,0x34,0x36,0x38,0x39,0x39,0x3a,
0x3a,0x38,0x38,0x38,0x38,0x39,0x38,0x36,0x34,0x34,0x34,0x35,0x35,0x36,0x38,0x3a,
0x39,0x38,0x37,0x37,0x37,0x37,0x37,0x36,0x36,0x35,0x35,0x36,0x36,0x37,0x3a,0x39,
0x38,0x39,0x38,0x38,0x38,0x3a,0x3b,0x3d,0x41,0x47,0x4e,0x57,0x5f,0x67,0x70,0x77,
0x7d,0x83,0x88,0x8c,0x90,0x93,0x96,0x96,0x95,0x96,0x97,0x98,0x98,0x97,0x96,0x95,
0x93,0x93,0x93,0x94,0x97,0x97,0x97,0x98,0x99,0x9b,0x98,0x9a,0x99,0x98,0x97,0x96,
0x95,0x98,0x96,0x92,0x92,0x93,0x96,0x98,0x98,0x99,0x9a,0x9b,0x99,0x96,0x96,0x97,
0x98,0x98,0x96,0x93,0x93,0x95,0x94,0x93,0x93,0x94,0x95,0x93,0x91,0x91,0x92,0x95,
0x95,0x94,0x95,0x98,0x9a,0x99,0x98,0x96,0x95,0x93,0x93,0x93,0x93,0x95,0x93,0x90,
0x91,0x93,0x96,0x97,0x98,0x98,0x98,0x98,0x96,0x94,0x95,0x96,0x96,0x97,0x95,0x94,
0x93,0x92,0x92,0x95,0x99,0x9b,0x9b,0x9a,0x98,0x97,0x98,0x98,0x98,0x9a,0x9a,0x97,
0x95,0x94,0x94,0x95,0x95,0x96,0x97,0x97,0x98,0x95,0x95,0x94,0x94,0x96,0x98,0x99,
0x99,0x98,0x98,0x97,0x94,0x93,0x94,0x96,0x95,0x95,0x95,0x95,0x94,0x94,0x95,0x96,
0x98,0x99,0x98,0x98,0x97,0x95,0x95,0x94,0x94,0x95,0x94,0x93,0x94,0x93,0x93,0x92,
0x90,0x8b,0x87,0x82,0x7b,0x70,0x67,0x5e,0x54,0x4d,0x46,0x40,0x3b,0x38,0x36,0x37,
0x39,0x3b,0x3b,0x3b,0x3b,0x3c,0x3d,0x3d,0x3d,0x3d,0x3b,0x38,0x38,0x38,0x38,0x38,
0x38,0x37,0x36,0x37,0x39,0x3b,0x3b,0x3a,0x3a,0x3b,0x3c,0x3b,0x3b,0x3a,0x3b,0x3b,
0x3a,0x38,0x37,0x37,0x36,0x37,0x37,0x38,0x37,0x38,0x36,0x34,0x36,0x38,0x38,0x39,
0x37,0x36,0x37,0x36,0x36,0x38,0x39,0x38,0x37,0x36,0x37,0x37,0x38,0x38,0x38,0x38,
0x38,0x37,0x37,0x39,0x38,0x39,0x38,0x38,0x37,0x37,0x36,0x37,0x37,0x37,0x34,0x34,
0x34,0x34,0x36,0x37,0x36,0x39,0x38,0x37,0x38,0x37,0x37,0x37,0x38,0x37,0x37,0x37,
0x37,0x37,0x3b,0x3c,0x40,0x48,0x50,0x58,0x60,0x67,0x70,0x7a,0x83,0x8b,0x91,0x92,
0x92,0x92,0x94,0x95,0x95,0x96,0x97,0x96,0x96,0x95,0x95,0x98,0x96,0x97,0x97,0x96,
0x94,0x94,0x97,0x97,0x98,0x99,0x9c,0x9b,0x9c,0x99,0x98,0x99,0x99,0x99,0x99,0x9a,
0x98,0x99,0x98,0x9a,0x9c,0x9e,0x9d,0x9b,0x99,0x97,0x96,0x96,0x96,0x98,0x9a,0x99,
0x98,0x98,0x98,0x9a,0x9c,0x9c,0x9b,0x98,0x96,0x94,0x94,0x96,0x94,0x93,0x93,0x93,
0x92,0x95,0x98,0x98,0x9b,0x9a,0x98,0x98,0x98,0x9a,0x9b,0x9b,0x99,0x98,0x96,0x96,
0x98,0x98,0x9a,0x9a,0x9a,0x98,0x95,0x93,0x92,0x94,0x98,0x9a,0x9a,0x9a,0x99,0x98,
0x97,0x97,0x98,0x97,0x93,0x8d,0x84,0x7c,0x72,0x67,0x61,0x5a,0x53,0x4d,0x47,0x41,
0x3d,0x3b,0x38,0x38,0x39,0x38,0x38,0x37,0x36,0x36,0x38,0x3a,0x3a,0x3b,0x3b,0x3b,
0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x39,0x3b,0x3b,0x39,0x39,0x37,0x37,
0x35,0x34,0x35,0x37,0x37,0x37,0x38,0x38,0x37,0x37,0x38,0x39,0x39,0x39,0x38,0x37,
0x37,0x36,0x36,0x34,0x35,0x36,0x39,0x39,0x38,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3b,
0x3a,0x37,0x36,0x37,0x38,0x3a,0x3b,0x3a,0x38,0x38,0x37,0x37,0x38,0x38,0x38,0x38,
0x36,0x34,0x34,0x35,0x35,0x35,0x36,0x36,0x33,0x34,0x34,0x34,0x37,0x3a,0x3a,0x3a,
0x37,0x37,0x37,0x37,0x38,0x38,0x39,0x3b,0x40,0x45,0x4e,0x58,0x61,0x69,0x72,0x7a,
0x80,0x85,0x8a,0x8f,0x91,0x93,0x94,0x94,0x95,0x95,0x95,0x96,0x98,0x99,0x98,0x98,
0x93,0x92,0x93,0x94,0x94,0x96,0x97,0x95,0x94,0x93,0x94,0x97,0x98,0x97,0x96,0x95,
0x94,0x93,0x93,0x93,0x94,0x95,0x95,0x94,0x93,0x94,0x97,0x98,0x98,0x99,0x9a,0x98,
0x97,0x96,0x96,0x96,0x96,0x95,0x93,0x92,0x93,0x95,0x96,0x98,0x98,0x97,0x98,0x97,
0x96,0x95,0x96,0x95,0x94,0x93,0x94,0x94,0x96,0x95,0x95,0x96,0x93,0x92,0x93,0x93,
0x94,0x94,0x94,0x96,0x97,0x96,0x97,0x98,0x9a,0x99,0x98,0x97,0x96,0x96,0x97,0x97,
0x96,0x96,0x96,0x98,0x98,0x98,0x98,0x94,0x8f,0x88,0x80,0x79,0x70,0x67,0x5f,0x55,
0x4c,0x46,0x42,0x40,0x3c,0x3b,0x39,0x39,0x3b,0x3b,0x3d,0x3d,0x3b,0x3a,0x38,0x38,
0x38,0x39,0x39,0x37,0x38,0x37,0x35,0x35,0x36,0x37,0x3b,0x3b,0x39,0x38,0x38,0x38,
0x37,0x38,0x39,0x38,0x37,0x37,0x35,0x37,0x38,0x3a,0x3b,0x3b,0x38,0x38,0x39,0x39,
0x35,0x38,0x38,0x37,0x37,0x37,0x37,0x39,0x38,0x36,0x37,0x36,0x35,0x37,0x37,0x38,
0x39,0x39,0x3a,0x3a,0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x37,0x37,0x37,0x39,0x3a,0x39,
0x37,0x34,0x34,0x36,0x37,0x39,0x39,0x37,0x36,0x35,0x37,0x38,0x3a,0x3b,0x3a,0x35,
0x34,0x33,0x32,0x33,0x34,0x34,0x34,0x33,0x33,0x32,0x35,0x35,0x34,0x36,0x37,0x37,
0x37,0x35,0x36,0x37,0x36,0x34,0x34,0x33,0x33,0x36,0x38,0x39,0x38,0x37,0x38,0x3a,
0x3b,0x3b,0x3a,0x38,0x35,0x31,0x30,0x31,0x33,0x34,0x34,0x32,0x32,0x33,0x34,0x34,
// Line 15
0x36,0x37,0x37,0x37,0x36,0x37,0x38,0x3a,0x3b,0x3b,0x3b,0x3b,0x39,0x39,0x38,0x36,
0x37,0x37,0x37,0x36,0x35,0x34,0x35,0x33,0x33,0x33,0x35,0x36,0x37,0x38,0x38,0x39,
0x3c,0x3c,0x3b,0x39,0x3a,0x3a,0x3a,0x38,0x36,0x37,0x38,0x38,0x37,0x38,0x3b,0x3a,
0x3a,0x36,0x33,0x34,0x37,0x42,0x55,0x68,0x75,0x79,0x76,0x6b,0x62,0x5c,0x5d,0x65,
0x70,0x78,0x7b,0x79,0x71,0x6a,0x65,0x65,0x68,0x6d,0x75,0x7b,0x7a,0x76,0x6e,0x66,
0x61,0x61,0x64,0x6d,0x75,0x78,0x78,0x73,0x6b,0x66,0x61,0x62,0x67,0x71,0x79,0x7b,
0x79,0x72,0x6b,0x66,0x63,0x62,0x68,0x6f,0x75,0x78,0x78,0x72,0x6b,0x63,0x5d,0x5e,
0x63,0x6d,0x75,0x78,0x76,0x70,0x68,0x61,0x5d,0x62,0x6a,0x73,0x7a,0x7c,0x7a,0x74,
0x6d,0x68,0x67,0x69,0x6c,0x6f,0x70,0x6f,0x70,0x75,0x7c,0x85,0x94,0x9c,0xa5,0xab,
0xa8,0xa1,0x95,0x86,0x75,0x6a,0x62,0x5d,0x57,0x50,0x47,0x3e,0x39,0x3b,0x42,0x52,
0x64,0x75,0x83,0x8c,0x91,0x95,0x98,0x9c,0xa1,0xa3,0xa1,0x9b,0x8f,0x80,0x72,0x68,
0x61,0x5f,0x62,0x68,0x70,0x79,0x81,0x89,0x91,0x99,0x9d,0xa2,0xa6,0xa5,0x9f,0x9a,
0x95,0x94,0x98,0x99,0x97,0x92,0x86,0x73,0x61,0x52,0x4f,0x57,0x64,0x71,0x7a,0x7b,
0x78,0x6f,0x66,0x62,0x63,0x6b,0x73,0x78,0x79,0x75,0x6d,0x64,0x5e,0x5d,0x61,0x6a,
0x72,0x78,0x79,0x76,0x6d,0x66,0x62,0x64,0x6d,0x76,0x7a,0x7c,0x76,0x6d,0x67,0x61,
0x5e,0x5d,0x5b,0x53,0x48,0x3b,0x31,0x2c,0x2b,0x2d,0x35,0x40,0x4b,0x55,0x5f,0x6a,
0x73,0x78,0x75,0x6d,0x64,0x5f,0x60,0x69,0x75,0x7f,0x80,0x7a,0x6e,0x64,0x60,0x61,
0x67,0x76,0x7d,0x7b,0x78,0x70,0x69,0x64,0x61,0x60,0x5c,0x56,0x4e,0x42,0x36,0x2d,
0x2a,0x2e,0x36,0x3d,0x40,0x3f,0x39,0x35,0x31,0x2f,0x31,0x36,0x3a,0x3c,0x3b,0x3a,
0x3a,0x3b,0x3b,0x3b,0x39,0x38,0x35,0x39,0x3e,0x4d,0x60,0x71,0x7a,0x7f,0x79,0x70,
0x67,0x62,0x62,0x65,0x6c,0x72,0x78,0x7e,0x85,0x8e,0x99,0xa1,0xa6,0xa8,0xa5,0x9f,
0x96,0x8b,0x7f,0x73,0x66,0x61,0x61,0x6a,0x73,0x7c,0x82,0x81,0x78,0x6b,0x62,0x61,
0x67,0x70,0x76,0x79,0x78,0x6e,0x64,0x5b,0x58,0x57,0x59,0x52,0x49,0x3e,0x35,0x2d,
0x2e,0x32,0x39,0x42,0x46,0x43,0x3e,0x39,0x33,0x30,0x2f,0x31,0x34,0x36,0x37,0x36,
0x35,0x34,0x34,0x35,0x33,0x32,0x32,0x33,0x35,0x36,0x38,0x38,0x39,0x35,0x33,0x32,
0x34,0x35,0x39,0x3b,0x3a,0x35,0x37,0x3b,0x47,0x5c,0x70,0x7d,0x83,0x7f,0x72,0x64,
0x5b,0x5f,0x6b,0x77,0x7c,0x7d,0x78,0x6f,0x66,0x63,0x60,0x5e,0x5b,0x50,0x43,0x36,
0x2c,0x29,0x2d,0x34,0x3a,0x3d,0x3d,0x39,0x34,0x32,0x30,0x30,0x32,0x35,0x39,0x3c,
0x3a,0x35,0x31,0x31,0x37,0x47,0x5b,0x70,0x7c,0x82,0x7d,0x73,0x67,0x5e,0x57,0x53,
0x4d,0x44,0x3c,0x34,0x2f,0x2e,0x31,0x38,0x45,0x53,0x61,0x6b,0x71,0x72,0x6f,0x69,
0x61,0x59,0x56,0x51,0x49,0x40,0x35,0x2a,0x28,0x2c,0x34,0x3d,0x42,0x43,0x3d,0x36,
0x31,0x33,0x42,0x59,0x6d,0x7c,0x81,0x7c,0x73,0x69,0x62,0x63,0x67,0x71,0x7b,0x7f,
0x7a,0x70,0x68,0x62,0x62,0x68,0x71,0x79,0x7d,0x7c,0x76,0x6d,0x64,0x5e,0x60,0x66,
0x6e,0x77,0x7a,0x79,0x74,0x6c,0x65,0x63,0x64,0x63,0x5e,0x51,0x3e,0x31,0x30,0x3d,
0x54,0x6d,0x81,0x88,0x82,0x72,0x60,0x52,0x49,0x45,0x42,0x3e,0x36,0x2f,0x2c,0x2e,
0x34,0x3c,0x40,0x3e,0x38,0x33,0x30,0x31,0x34,0x36,0x35,0x36,0x34,0x33,0x35,0x39,
0x3b,0x39,0x35,0x31,0x31,0x35,0x40,0x4c,0x58,0x63,0x71,0x7d,0x8a,0x93,0x9e,0xa0,
0x9b,0x90,0x7e,0x6b,0x62,0x5d,0x61,0x6c,0x78,0x7f,0x7c,0x75,0x6c,0x64,0x5c,0x56,
0x4e,0x47,0x3d,0x31,0x28,0x25,0x2b,0x35,0x3b,0x3d,0x3c,0x3b,0x3a,0x39,0x37,0x36,
0x37,0x37,0x38,0x39,0x41,0x4f,0x60,0x70,0x7b,0x83,0x8a,0x91,0x98,0xa0,0xa6,0xa8,
0xa3,0x98,0x89,0x79,0x6b,0x62,0x5c,0x57,0x50,0x44,0x3c,0x37,0x3b,0x48,0x59,0x6b,
0x7b,0x80,0x7b,0x6d,0x5d,0x50,0x4c,0x4a,0x46,0x3e,0x36,0x2e,0x28,0x28,0x2c,0x35,
0x42,0x4c,0x55,0x60,0x69,0x77,0x87,0x95,0x9c,0x9e,0x99,0x90,0x81,0x70,0x62,0x59,
0x59,0x5f,0x68,0x74,0x7e,0x88,0x92,0x9a,0x9e,0xa4,0xa6,0xa4,0xa1,0x9b,0x91,0x81,
0x75,0x68,0x60,0x5e,0x63,0x6b,0x78,0x7d,0x7b,0x76,0x6b,0x63,0x61,0x61,0x65,0x6b,
0x6e,0x72,0x76,0x7e,0x89,0x96,0xa2,0xa9,0xaa,0xa6,0x9d,0x95,0x8c,0x81,0x73,0x65,
0x5a,0x59,0x61,0x6d,0x78,0x7d,0x7b,0x72,0x65,0x5d,0x5b,0x61,0x6f,0x78,0x7a,0x79,
0x73,0x6b,0x64,0x61,0x5e,0x59,0x50,0x47,0x3a,0x33,0x2e,0x2d,0x31,0x37,0x3e,0x49,
0x56,0x63,0x72,0x7b,0x7c,0x76,0x6a,0x60,0x5b,0x61,0x6c,0x78,0x7d,0x7c,0x76,0x6b,
0x61,0x5a,0x5a,0x5a,0x58,0x50,0x42,0x33,0x28,0x26,0x2a,0x35,0x3f,0x46,0x44,0x3e,
0x33,0x2d,0x32,0x42,0x56,0x6d,0x7b,0x7d,0x79,0x6e,0x63,0x5e,0x5e,0x67,0x75,0x7d,
0x7d,0x76,0x6f,0x68,0x63,0x5f,0x5b,0x54,0x4c,0x41,0x36,0x2e,0x28,0x28,0x2f,0x38,
0x44,0x54,0x63,0x6f,0x74,0x73,0x6c,0x66,0x61,0x5e,0x5a,0x51,0x43,0x36,0x2e,0x2f,
0x3c,0x56,0x70,0x80,0x87,0x81,0x75,0x64,0x5a,0x52,0x4e,0x4a,0x42,0x39,0x37,0x33,
0x32,0x35,0x3a,0x41,0x4b,0x58,0x66,0x73,0x7a,0x79,0x70,0x64,0x5c,0x5f,0x6b,0x78,
0x7f,0x7e,0x76,0x6b,0x61,0x5e,0x63,0x6c,0x72,0x73,0x73,0x73,0x77,0x7f,0x8c,0x99,
0xa3,0xa4,0x99,0x83,0x6c,0x5a,0x4f,0x54,0x62,0x72,0x7c,0x7d,0x76,0x69,0x5d,0x5a,
0x5d,0x69,0x73,0x7a,0x79,0x72,0x69,0x64,0x61,0x60,0x5f,0x58,0x4c,0x3e,0x32,0x2b,
0x2b,0x31,0x39,0x41,0x42,0x3e,0x38,0x34,0x32,0x36,0x42,0x51,0x62,0x73,0x81,0x8c,
0x94,0x96,0x94,0x8e,0x84,0x76,0x63,0x58,0x4c,0x45,0x43,0x41,0x3b,0x3b,0x38,0x36,
0x39,0x3c,0x3c,0x38,0x32,0x2d,0x2d,0x35,0x46,0x59,0x6d,0x78,0x7b,0x75,0x6b,0x63,
0x5e,0x57,0x51,0x49,0x40,0x39,0x39,0x42,0x52,0x67,0x7b,0x8c,0x93,0x94,0x95,0x99,
0x9d,0x9f,0x9e,0x9f,0x9c,0x99,0x9b,0x9e,0x9f,0x9b,0x8e,0x7b,0x6a,0x5d,0x56,0x4f,
0x49,0x41,0x39,0x36,0x39,0x46,0x5e,0x76,0x86,0x89,0x81,0x73,0x65,0x5e,0x5c,0x61,
0x68,0x70,0x73,0x76,0x7a,0x85,0x92,0x9e,0xa7,0xab,0xa9,0xa3,0x98,0x8c,0x80,0x73,
0x69,0x61,0x5a,0x53,0x4b,0x3f,0x3b,0x3b,0x42,0x4f,0x61,0x72,0x81,0x8a,0x8e,0x91,
0x95,0x9a,0xa1,0xa5,0xa1,0x98,0x89,0x78,0x69,0x5f,0x56,0x4f,0x49,0x44,0x3d,0x3c,
0x3d,0x4b,0x60,0x73,0x80,0x83,0x7d,0x72,0x64,0x5c,0x5c,0x5e,0x67,0x6f,0x75,0x7c,
0x81,0x87,0x96,0x9f,0xa6,0xa9,0xa5,0xa0,0x9b,0x98,0x98,0x9b,0x9d,0x9c,0x95,0x89,
0x78,0x69,0x61,0x5d,0x5d,0x62,0x6b,0x75,0x7f,0x88,0x8f,0x96,0x9b,0xa0,0xa3,0xa2,
0x9d,0x91,0x82,0x72,0x65,0x5e,0x59,0x52,0x4d,0x44,0x3b,0x38,0x3e,0x4e,0x64,0x77,
0x81,0x82,0x79,0x6d,0x62,0x59,0x54,0x51,0x4b,0x41,0x39,0x39,0x42,0x56,0x6e,0x81,
0x88,0x83,0x74,0x63,0x58,0x59,0x63,0x70,0x78,0x79,0x75,0x6e,0x67,0x63,0x65,0x68,
0x69,0x6d,0x6f,0x72,0x7a,0x82,0x8c,0x97,0xa1,0xa9,0xac,0xaa,0xa4,0x9a,0x8d,0x7c,
0x6d,0x64,0x60,0x61,0x64,0x6b,0x72,0x7b,0x81,0x89,0x91,0x97,0x9a,0x96,0x89,0x76,
0x62,0x50,0x44,0x3c,0x39,0x38,0x37,0x36,0x34,0x34,0x37,0x3b,0x3c,0x3d,0x39,0x34,
0x2e,0x36,0x42,0x58,0x6d,0x7d,0x82,0x7c,0x70,0x63,0x5e,0x61,0x6a,0x76,0x7d,0x7f,
0x7b,0x72,0x6b,0x67,0x66,0x69,0x6d,0x71,0x73,0x75,0x78,0x7c,0x84,0x8f,0x9b,0xa6,
0xac,0xac,0xa4,0x96,0x87,0x78,0x69,0x61,0x5b,0x58,0x51,0x47,0x3b,0x36,0x3a,0x46,
0x5a,0x70,0x7f,0x84,0x7b,0x6b,0x5e,0x54,0x4e,0x4c,0x49,0x42,0x37,0x2f,0x2b,0x2c,
0x34,0x3d,0x43,0x42,0x38,0x30,0x2f,0x36,0x47,0x5b,0x70,0x7f,0x82,0x7c,0x73,0x68,
0x61,0x5e,0x5e,0x66,0x6c,0x73,0x7b,0x83,0x8b,0x95,0x9e,0xa6,0xac,0xad,0xa8,0x9e,
0x8f,0x7c,0x6b,0x5f,0x5b,0x5f,0x6a,0x73,0x7a,0x7c,0x77,0x6c,0x63,0x5d,0x5b,0x59,
0x52,0x47,0x39,0x2f,0x2e,0x3d,0x58,0x73,0x85,0x89,0x7f,0x6f,0x5f,0x56,0x53,0x54,
0x4d,0x42,0x38,0x37,0x42,0x56,0x71,0x83,0x88,0x80,0x6d,0x5b,0x53,0x57,0x62,0x70,
0x78,0x78,0x73,0x6b,0x64,0x61,0x5f,0x5d,0x54,0x48,0x3b,0x33,0x34,0x3e,0x4e,0x64,
0x78,0x89,0x95,0x9b,0x9d,0x9b,0x94,0x89,0x7b,0x6c,0x61,0x5a,0x5e,0x65,0x6d,0x78,
0x82,0x87,0x8f,0x94,0x96,0x94,0x8b,0x7b,0x68,0x54,0x47,0x40,0x40,0x42,0x42,0x3e,
0x38,0x35,0x35,0x38,0x3d,0x46,0x50,0x5c,0x69,0x75,0x81,0x8c,0x95,0x9c,0xa1,0xa3,
0xa4,0xa2,0x9f,0x9c,0x9b,0x9b,0x9d,0x9c,0x96,0x8a,0x7a,0x6d,0x61,0x5b,0x5d,0x65,
0x6d,0x78,0x81,0x89,0x8d,0x97,0x9d,0xa3,0xa6,0xa6,0xa1,0x98,0x8b,0x7c,0x6f,0x64,
0x5e,0x5e,0x61,0x67,0x6f,0x78,0x81,0x8b,0x93,0x99,0x9b,0x95,0x87,0x76,0x64,0x56,
0x49,0x42,0x3d,0x3b,0x39,0x3c,0x46,0x58,0x6e,0x7f,0x81,0x7c,0x6f,0x60,0x59,0x5c,
0x68,0x78,0x80,0x80,0x78,0x6d,0x64,0x61,0x63,0x6a,0x70,0x73,0x73,0x75,0x7a,0x81,
0x8a,0x97,0xa3,0xab,0xad,0xaa,0xa3,0x9e,0x98,0x96,0x97,0x99,0x9d,0xa1,0xa0,0x9c,
0x98,0x96,0x94,0x95,0x98,0x98,0x94,0x8b,0x7c,0x6d,0x60,0x54,0x4b,0x43,0x3e,0x3b,
// Line 16
0x37,0x37,0x38,0x38,0x38,0x36,0x35,0x35,0x35,0x36,0x37,0x37,0x35,0x34,0x36,0x38,
0x38,0x39,0x3b,0x3a,0x3a,0x38,0x36,0x36,0x37,0x37,0x37,0x34,0x32,0x32,0x34,0x34,
0x33,0x34,0x32,0x32,0x35,0x36,0x37,0x39,0x38,0x36,0x34,0x34,0x34,0x38,0x3d,0x3d,
0x39,0x35,0x30,0x32,0x3c,0x4c,0x5f,0x71,0x7a,0x7a,0x74,0x68,0x5d,0x57,0x5d,0x67,
0x70,0x78,0x78,0x73,0x6a,0x60,0x5a,0x5e,0x66,0x70,0x78,0x7a,0x78,0x72,0x69,0x62,
0x60,0x63,0x68,0x70,0x75,0x76,0x71,0x6a,0x62,0x5c,0x5d,0x60,0x67,0x71,0x78,0x7a,
0x75,0x70,0x6a,0x63,0x61,0x61,0x66,0x6e,0x72,0x71,0x70,0x6c,0x65,0x63,0x60,0x63,
0x6a,0x70,0x75,0x77,0x74,0x6d,0x65,0x5f,0x5c,0x60,0x68,0x71,0x77,0x7a,0x75,0x6d,
0x65,0x5f,0x5d,0x60,0x65,0x6a,0x6f,0x72,0x73,0x76,0x7c,0x87,0x94,0xa2,0xab,0xab,
0xa6,0x9a,0x8a,0x7c,0x6f,0x65,0x60,0x59,0x51,0x49,0x41,0x3b,0x39,0x3f,0x4a,0x5a,
0x6b,0x7b,0x88,0x91,0x96,0x98,0x9b,0x9f,0xa1,0xa2,0x9e,0x96,0x8c,0x7e,0x6f,0x62,
0x59,0x59,0x61,0x6d,0x77,0x7b,0x7a,0x73,0x67,0x5f,0x5d,0x63,0x6e,0x78,0x7d,0x7d,
0x76,0x6e,0x69,0x66,0x67,0x6d,0x71,0x71,0x6f,0x71,0x76,0x7e,0x8b,0x99,0xa4,0xab,
0xaa,0xa4,0x9f,0x9b,0x9a,0x99,0x9b,0x9a,0x94,0x89,0x7b,0x6c,0x5e,0x53,0x49,0x42,
0x3a,0x34,0x35,0x3f,0x4f,0x65,0x77,0x80,0x7b,0x73,0x66,0x5c,0x55,0x52,0x4b,0x46,
0x3a,0x31,0x35,0x43,0x5b,0x75,0x84,0x86,0x7c,0x6c,0x5e,0x54,0x4f,0x4e,0x4c,0x46,
0x3b,0x31,0x2e,0x32,0x38,0x42,0x49,0x50,0x57,0x63,0x71,0x80,0x8c,0x95,0x98,0x95,
0x8c,0x81,0x73,0x62,0x52,0x46,0x3c,0x36,0x37,0x39,0x3c,0x3c,0x38,0x35,0x38,0x42,
0x50,0x60,0x70,0x7a,0x7d,0x78,0x6c,0x61,0x59,0x5c,0x64,0x70,0x78,0x7a,0x75,0x69,
0x5e,0x5b,0x5f,0x6b,0x78,0x7f,0x7e,0x78,0x70,0x69,0x64,0x67,0x67,0x68,0x6a,0x6b,
0x6b,0x6f,0x73,0x7a,0x87,0x94,0x9f,0xa8,0xac,0xaa,0xa2,0x94,0x82,0x73,0x69,0x63,
0x5e,0x57,0x4c,0x41,0x38,0x37,0x3c,0x49,0x59,0x6b,0x7d,0x88,0x8e,0x92,0x93,0x90,
0x8a,0x7e,0x6f,0x5e,0x51,0x47,0x42,0x42,0x3e,0x3c,0x3b,0x3a,0x38,0x38,0x3c,0x43,
0x4e,0x5b,0x68,0x71,0x80,0x8b,0x96,0x9a,0x96,0x8c,0x80,0x72,0x63,0x56,0x4a,0x40,
0x3b,0x38,0x3b,0x43,0x52,0x64,0x74,0x80,0x89,0x8f,0x94,0x99,0x9e,0xa1,0xa2,0xa0,
0x9f,0x9c,0x9b,0x9a,0x9a,0x9b,0x9d,0x9f,0xa1,0x9d,0x9a,0x90,0x82,0x75,0x67,0x5c,
0x57,0x51,0x4a,0x42,0x3b,0x39,0x40,0x50,0x62,0x73,0x7f,0x7f,0x75,0x66,0x5c,0x59,
0x60,0x69,0x72,0x78,0x7a,0x7d,0x85,0x92,0x9d,0xa3,0x9e,0x8b,0x73,0x60,0x57,0x5a,
0x67,0x75,0x7f,0x81,0x7b,0x73,0x6d,0x67,0x61,0x5a,0x4e,0x3e,0x31,0x2e,0x34,0x46,
0x5d,0x73,0x7d,0x80,0x76,0x69,0x61,0x5c,0x56,0x4f,0x47,0x3f,0x3a,0x39,0x41,0x54,
0x68,0x7a,0x88,0x8f,0x93,0x97,0x9a,0x9d,0x9f,0xa2,0x9f,0x9c,0x99,0x97,0x98,0x9c,
0x9e,0x9e,0x9e,0x9d,0x9a,0x9a,0x9c,0x9f,0x9f,0x9a,0x93,0x87,0x7b,0x6e,0x62,0x59,
0x4e,0x45,0x40,0x3a,0x37,0x3c,0x47,0x56,0x67,0x77,0x84,0x8d,0x92,0x94,0x99,0x9f,
0xa4,0xa4,0x9f,0x92,0x81,0x72,0x65,0x5c,0x56,0x4f,0x45,0x3d,0x36,0x36,0x3e,0x51,
0x65,0x76,0x7e,0x7b,0x71,0x69,0x5e,0x57,0x53,0x4c,0x42,0x38,0x32,0x34,0x43,0x59,
0x71,0x82,0x86,0x7b,0x6a,0x5e,0x59,0x5d,0x66,0x71,0x7a,0x7f,0x81,0x87,0x91,0x9c,
0xa0,0x9c,0x8e,0x79,0x62,0x51,0x4e,0x57,0x68,0x78,0x7e,0x81,0x78,0x6d,0x65,0x62,
0x63,0x6b,0x73,0x76,0x77,0x72,0x6b,0x62,0x5c,0x5d,0x65,0x71,0x79,0x7b,0x78,0x70,
0x69,0x65,0x63,0x65,0x6a,0x6f,0x70,0x70,0x70,0x76,0x82,0x8f,0x99,0xa2,0xaa,0xac,
0xa7,0x9b,0x8c,0x7d,0x72,0x67,0x5e,0x56,0x4e,0x47,0x41,0x3a,0x36,0x38,0x45,0x57,
0x6a,0x7c,0x87,0x8f,0x94,0x97,0x99,0x9d,0x9e,0x9f,0x9e,0x9b,0x97,0x97,0x9a,0x9e,
0xa1,0xa1,0x9f,0xa0,0xa3,0xa4,0xa4,0xa2,0x9f,0x9d,0x9e,0x9e,0x9f,0x9f,0x9b,0x93,
0x85,0x73,0x66,0x5b,0x52,0x47,0x3f,0x38,0x32,0x33,0x3e,0x4e,0x60,0x73,0x81,0x8a,
0x8f,0x94,0x97,0x99,0x94,0x88,0x75,0x62,0x55,0x55,0x5f,0x6f,0x7b,0x81,0x7d,0x73,
0x69,0x61,0x60,0x67,0x6b,0x6e,0x6f,0x70,0x75,0x7e,0x8c,0x98,0x9d,0x98,0x87,0x71,
0x5e,0x54,0x54,0x60,0x6e,0x7a,0x7e,0x7b,0x71,0x67,0x61,0x5c,0x53,0x4b,0x40,0x35,
0x2e,0x2c,0x2e,0x37,0x3c,0x3d,0x3f,0x3b,0x38,0x36,0x36,0x35,0x35,0x33,0x32,0x35,
0x3d,0x4c,0x5e,0x6d,0x75,0x76,0x70,0x67,0x5e,0x58,0x53,0x4f,0x4b,0x43,0x3b,0x33,
0x2e,0x31,0x36,0x3f,0x47,0x50,0x5a,0x64,0x70,0x7e,0x8b,0x95,0x9a,0x98,0x8e,0x82,
0x72,0x64,0x58,0x4b,0x40,0x35,0x31,0x34,0x3f,0x53,0x68,0x78,0x7f,0x7e,0x72,0x66,
0x5d,0x59,0x58,0x54,0x48,0x3d,0x34,0x36,0x42,0x59,0x71,0x81,0x84,0x7a,0x68,0x5a,
0x54,0x5c,0x6b,0x78,0x7c,0x7a,0x73,0x6b,0x64,0x5f,0x5c,0x54,0x4c,0x3f,0x35,0x2e,
0x2c,0x2b,0x2f,0x33,0x39,0x46,0x55,0x66,0x73,0x7a,0x79,0x72,0x68,0x61,0x60,0x64,
0x68,0x6c,0x70,0x73,0x76,0x7d,0x87,0x93,0xa0,0xa8,0xab,0xa8,0x9f,0x92,0x82,0x74,
0x69,0x62,0x5c,0x55,0x4c,0x43,0x3c,0x34,0x36,0x3e,0x50,0x66,0x77,0x82,0x89,0x8d,
0x8f,0x94,0x9a,0xa0,0xa3,0x9e,0x92,0x83,0x75,0x68,0x5e,0x58,0x51,0x48,0x41,0x3b,
0x3b,0x3f,0x4a,0x59,0x6a,0x79,0x84,0x8c,0x8f,0x92,0x97,0x9a,0x9c,0x9b,0x9c,0x9c,
0x9a,0x9b,0x9d,0x9e,0xa0,0xa1,0xa0,0xa2,0xa1,0xa1,0xa1,0xa0,0x9d,0x9c,0x9c,0x9d,
0x9e,0x9f,0x9f,0x9e,0x9e,0x9d,0x9b,0x9b,0x9b,0x9c,0x9f,0x9d,0x98,0x8e,0x81,0x70,
0x61,0x56,0x4f,0x4a,0x45,0x3f,0x39,0x36,0x35,0x36,0x3c,0x41,0x42,0x41,0x3b,0x37,
0x35,0x3a,0x3f,0x4a,0x57,0x66,0x73,0x7f,0x89,0x92,0x96,0x94,0x8c,0x7f,0x72,0x66,
0x5c,0x51,0x48,0x42,0x3c,0x3b,0x40,0x4c,0x5c,0x6c,0x7b,0x85,0x8b,0x90,0x95,0x99,
0x9d,0xa1,0xa2,0xa2,0x9f,0x9b,0x9a,0x9d,0x9f,0xa1,0xa3,0xa4,0xa2,0x9e,0x9a,0x97,
0x98,0x9a,0x9c,0x99,0x91,0x83,0x73,0x65,0x5d,0x5f,0x68,0x73,0x7b,0x7f,0x7b,0x71,
0x67,0x5f,0x5e,0x62,0x67,0x6b,0x6e,0x71,0x77,0x82,0x90,0x9b,0xa0,0x9e,0x90,0x7b,
0x65,0x59,0x55,0x60,0x6b,0x78,0x7f,0x7d,0x73,0x6a,0x61,0x5f,0x63,0x68,0x6e,0x73,
0x77,0x7c,0x87,0x93,0x9d,0xa0,0x99,0x88,0x71,0x5f,0x55,0x54,0x59,0x63,0x70,0x7e,
0x87,0x8f,0x97,0x9e,0x9e,0x97,0x88,0x76,0x63,0x5a,0x57,0x5c,0x67,0x72,0x7c,0x84,
0x88,0x8e,0x98,0x9e,0xa3,0xa4,0xa3,0x9d,0x99,0x98,0x9a,0x9e,0xa1,0xa2,0xa1,0xa0,
0x9f,0x9e,0x9f,0x9e,0x9d,0x9e,0x9e,0x9e,0x9f,0xa2,0xa3,0xa1,0x98,0x8c,0x7d,0x6f,
0x63,0x5c,0x5c,0x60,0x65,0x6d,0x73,0x7c,0x88,0x92,0x97,0x95,0x8c,0x7f,0x6e,0x5d,
0x51,0x47,0x40,0x39,0x35,0x39,0x43,0x51,0x63,0x72,0x7e,0x81,0x7a,0x6c,0x60,0x5c,
0x5e,0x66,0x6e,0x73,0x76,0x7d,0x82,0x8c,0x98,0xa3,0xaa,0xa9,0xa2,0x9b,0x98,0x9a,
0x9f,0xa1,0x9f,0x98,0x8d,0x7f,0x70,0x61,0x58,0x4a,0x3d,0x35,0x31,0x33,0x3c,0x47,
0x54,0x66,0x77,0x85,0x8c,0x94,0x95,0x90,0x87,0x7b,0x6c,0x61,0x55,0x4b,0x44,0x3f,
0x3d,0x3d,0x3b,0x3b,0x3c,0x3d,0x3e,0x42,0x4a,0x55,0x63,0x72,0x7e,0x89,0x91,0x95,
0x98,0x9c,0x9e,0x9c,0x97,0x8e,0x7f,0x71,0x63,0x59,0x53,0x50,0x4e,0x49,0x42,0x3b,
0x35,0x33,0x36,0x3c,0x40,0x3f,0x3a,0x32,0x2b,0x2b,0x36,0x48,0x5c,0x6b,0x75,0x75,
0x6e,0x64,0x5c,0x55,0x52,0x4d,0x47,0x40,0x38,0x32,0x32,0x36,0x3e,0x46,0x49,0x43,
0x3b,0x34,0x32,0x38,0x43,0x53,0x63,0x74,0x7f,0x88,0x93,0x9a,0x9b,0x95,0x86,0x73,
0x63,0x5a,0x58,0x5c,0x64,0x70,0x7a,0x85,0x8d,0x95,0x9e,0x9d,0x96,0x8a,0x78,0x62,
0x51,0x43,0x39,0x36,0x36,0x39,0x39,0x37,0x31,0x2f,0x32,0x3d,0x4c,0x62,0x73,0x7b,
0x7a,0x70,0x66,0x5f,0x5c,0x60,0x68,0x70,0x73,0x75,0x79,0x82,0x90,0x9e,0xa6,0xa2,
0x94,0x7f,0x68,0x57,0x50,0x54,0x61,0x6e,0x78,0x82,0x8b,0x94,0x9a,0x9e,0xa2,0xa4,
0xa2,0x9d,0x95,0x8c,0x7f,0x70,0x66,0x60,0x5f,0x66,0x70,0x78,0x7f,0x85,0x8a,0x8f,
0x97,0x9f,0xa6,0xa8,0xa6,0xa2,0x9e,0x9a,0x99,0x9d,0xa1,0xa2,0xa3,0xa2,0x9f,0x9e,
0x9e,0x9d,0x99,0x97,0x97,0x98,0x9c,0x9f,0x9e,0x9a,0x91,0x85,0x77,0x6b,0x61,0x5a,
0x51,0x47,0x40,0x3b,0x3a,0x3e,0x48,0x57,0x67,0x76,0x80,0x88,0x8d,0x91,0x95,0x9a,
0x9d,0x9f,0xa1,0x9f,0x9c,0x9c,0x9b,0x99,0x90,0x87,0x78,0x6b,0x5f,0x57,0x4e,0x4a,
0x43,0x3c,0x3b,0x40,0x4e,0x65,0x7a,0x82,0x83,0x7a,0x6d,0x60,0x59,0x59,0x60,0x68,
0x6e,0x73,0x78,0x7f,0x87,0x95,0xa2,0xaa,0xad,0xa9,0xa0,0x94,0x82,0x72,0x65,0x5b,
0x54,0x50,0x4a,0x43,0x39,0x36,0x3a,0x44,0x56,0x6a,0x7d,0x8b,0x8f,0x91,0x94,0x9a,
0xa2,0xa6,0xa6,0xa2,0x9e,0x9b,0x9a,0x98,0x9b,0x99,0x8f,0x81,0x6e,0x5e,0x59,0x5b,
0x64,0x70,0x79,0x7d,0x7a,0x70,0x66,0x5d,0x56,0x51,0x4b,0x42,0x37,0x2c,0x26,0x26,
0x2b,0x33,0x3a,0x3f,0x3f,0x3c,0x36,0x31,0x2f,0x32,0x37,0x3b,0x3d,0x3c,0x3b,0x37,
0x35,0x35,0x37,0x39,0x3b,0x3b,0x38,0x38,0x37,0x38,0x3a,0x38,0x36,0x37,0x36,0x34,
// Line 17
0x36,0x37,0x37,0x38,0x39,0x38,0x37,0x36,0x34,0x37,0x3a,0x39,0x38,0x38,0x3a,0x3b,
0x39,0x39,0x37,0x36,0x36,0x34,0x32,0x32,0x32,0x32,0x34,0x34,0x34,0x33,0x34,0x35,
0x34,0x34,0x34,0x35,0x39,0x39,0x39,0x39,0x3a,0x3a,0x3d,0x3d,0x3a,0x37,0x34,0x35,
0x3c,0x49,0x5a,0x6c,0x7a,0x80,0x7a,0x6f,0x63,0x5c,0x5f,0x68,0x72,0x7b,0x7c,0x77,
0x6f,0x65,0x60,0x60,0x64,0x6b,0x72,0x76,0x76,0x71,0x6c,0x65,0x60,0x62,0x66,0x6c,
0x72,0x76,0x76,0x71,0x69,0x63,0x61,0x63,0x68,0x71,0x78,0x7b,0x78,0x72,0x68,0x5f,
0x5e,0x63,0x68,0x71,0x76,0x76,0x76,0x6f,0x68,0x61,0x61,0x61,0x68,0x70,0x78,0x7a,
0x7b,0x76,0x6d,0x67,0x63,0x64,0x6c,0x73,0x79,0x7b,0x78,0x70,0x68,0x61,0x60,0x63,
0x69,0x6f,0x72,0x72,0x71,0x73,0x7b,0x86,0x93,0xa0,0xaa,0xac,0xa7,0x9d,0x8e,0x7d,
0x6f,0x65,0x5d,0x57,0x50,0x48,0x41,0x3c,0x3b,0x40,0x4a,0x5b,0x6f,0x7e,0x88,0x90,
0x94,0x97,0x99,0x9b,0x9c,0x9c,0x9a,0x94,0x8a,0x7c,0x6e,0x62,0x5d,0x5d,0x61,0x6e,
0x78,0x7b,0x7b,0x76,0x6b,0x63,0x60,0x62,0x6b,0x76,0x7d,0x7d,0x77,0x6e,0x66,0x63,
0x64,0x68,0x6c,0x6e,0x6e,0x6f,0x71,0x79,0x86,0x96,0xa3,0xab,0xac,0xa8,0xa2,0x9b,
0x98,0x98,0x9b,0x9c,0x96,0x8b,0x7d,0x6d,0x60,0x54,0x4b,0x43,0x3a,0x33,0x33,0x3c,
0x4e,0x60,0x73,0x7b,0x79,0x71,0x64,0x59,0x54,0x52,0x4e,0x46,0x3c,0x35,0x38,0x46,
0x5c,0x74,0x85,0x89,0x81,0x72,0x63,0x5a,0x5c,0x63,0x6d,0x75,0x77,0x7a,0x82,0x8d,
0x98,0xa3,0xa7,0xa7,0xa2,0x98,0x8d,0x7f,0x73,0x68,0x5d,0x55,0x4f,0x49,0x47,0x43,
0x3e,0x3a,0x3a,0x39,0x3a,0x3d,0x43,0x4b,0x57,0x64,0x71,0x7c,0x84,0x89,0x91,0x99,
0x9f,0xa3,0xa3,0x9e,0x92,0x84,0x74,0x68,0x61,0x5d,0x58,0x51,0x47,0x3e,0x3c,0x42,
0x52,0x66,0x79,0x83,0x82,0x77,0x6a,0x61,0x5a,0x56,0x4d,0x46,0x39,0x33,0x35,0x44,
0x5a,0x71,0x80,0x83,0x7a,0x6c,0x5f,0x58,0x52,0x4d,0x4b,0x47,0x3e,0x33,0x32,0x34,
0x39,0x41,0x49,0x52,0x5a,0x65,0x71,0x7f,0x8a,0x91,0x96,0x96,0x91,0x88,0x7b,0x69,
0x59,0x49,0x3e,0x38,0x3a,0x3e,0x41,0x3f,0x38,0x35,0x39,0x43,0x54,0x66,0x73,0x7b,
0x7d,0x78,0x6e,0x62,0x60,0x61,0x67,0x6b,0x6f,0x71,0x7a,0x83,0x8c,0x98,0xa4,0xac,
0xad,0xa9,0xa2,0x9b,0x97,0x98,0x9b,0x9f,0xa1,0xa2,0xa1,0xa0,0x9c,0x94,0x89,0x7b,
0x6e,0x61,0x55,0x4b,0x43,0x3d,0x3b,0x39,0x36,0x31,0x30,0x31,0x37,0x44,0x53,0x61,
0x71,0x79,0x79,0x76,0x6c,0x63,0x5e,0x58,0x4e,0x46,0x3c,0x35,0x34,0x3e,0x52,0x6c,
0x83,0x93,0x9c,0x9f,0x9d,0x96,0x8e,0x84,0x77,0x69,0x5a,0x4c,0x42,0x3b,0x38,0x3a,
0x43,0x51,0x64,0x76,0x81,0x82,0x7b,0x6f,0x63,0x5c,0x56,0x51,0x4a,0x3f,0x36,0x37,
0x45,0x5c,0x71,0x81,0x82,0x79,0x6a,0x5a,0x50,0x4d,0x4b,0x45,0x3b,0x31,0x2b,0x2c,
0x32,0x39,0x41,0x42,0x3e,0x37,0x36,0x35,0x36,0x3a,0x3b,0x3b,0x39,0x38,0x39,0x3c,
0x3b,0x39,0x36,0x32,0x32,0x34,0x38,0x3b,0x3a,0x38,0x33,0x33,0x34,0x37,0x39,0x3b,
0x3a,0x39,0x37,0x34,0x33,0x37,0x3e,0x48,0x57,0x65,0x73,0x7c,0x87,0x8f,0x98,0xa1,
0xa7,0xa8,0xa9,0xa5,0x9e,0x99,0x98,0x9a,0x9c,0x96,0x8d,0x80,0x6f,0x5f,0x53,0x4a,
0x44,0x40,0x3b,0x38,0x34,0x34,0x35,0x36,0x38,0x39,0x38,0x37,0x34,0x35,0x36,0x36,
0x36,0x36,0x38,0x3e,0x48,0x56,0x65,0x73,0x7f,0x89,0x90,0x98,0x9c,0xa2,0xa7,0xa8,
0xa2,0x98,0x8b,0x7c,0x6e,0x62,0x5d,0x5e,0x62,0x69,0x70,0x7a,0x81,0x89,0x94,0x9d,
0x9f,0x9c,0x8f,0x7a,0x68,0x5c,0x58,0x5a,0x64,0x71,0x7e,0x87,0x8c,0x90,0x96,0x9f,
0xa5,0xa7,0xa4,0xa0,0x9d,0x99,0x98,0x9b,0x9e,0x9d,0x96,0x86,0x6f,0x5e,0x57,0x5a,
0x64,0x6f,0x78,0x7c,0x7b,0x72,0x67,0x61,0x59,0x54,0x50,0x46,0x3b,0x2e,0x27,0x25,
0x2b,0x34,0x3d,0x42,0x40,0x39,0x2f,0x2d,0x34,0x46,0x5c,0x6e,0x79,0x7c,0x78,0x6f,
0x66,0x60,0x60,0x66,0x6c,0x75,0x7b,0x81,0x86,0x8e,0x99,0xa3,0xaa,0xae,0xac,0xa6,
0x9a,0x8a,0x7a,0x6c,0x61,0x5b,0x5c,0x60,0x68,0x6f,0x77,0x7e,0x84,0x8d,0x96,0x9d,
0xa3,0xa4,0xa3,0xa0,0x9b,0x97,0x96,0x97,0x9b,0x9f,0xa2,0xa3,0xa1,0x9f,0x9c,0x99,
0x98,0x99,0x9b,0xa2,0xa2,0xa1,0xa0,0x9f,0x9d,0x9c,0x9f,0x9f,0x9b,0x92,0x84,0x73,
0x68,0x5d,0x54,0x4e,0x47,0x3e,0x3a,0x38,0x3e,0x50,0x66,0x78,0x82,0x7e,0x72,0x66,
0x5c,0x56,0x51,0x4b,0x43,0x39,0x34,0x3a,0x49,0x61,0x77,0x84,0x85,0x7b,0x6c,0x5e,
0x55,0x4e,0x48,0x40,0x37,0x31,0x36,0x46,0x5d,0x77,0x86,0x89,0x82,0x72,0x61,0x55,
0x4f,0x4a,0x46,0x3e,0x35,0x2e,0x2c,0x2d,0x32,0x3c,0x47,0x54,0x61,0x6c,0x71,0x72,
0x6c,0x62,0x5a,0x55,0x51,0x4e,0x48,0x3e,0x34,0x2d,0x2d,0x32,0x3a,0x41,0x43,0x40,
0x39,0x34,0x32,0x33,0x35,0x38,0x38,0x39,0x3c,0x44,0x50,0x62,0x73,0x7e,0x85,0x8a,
0x8f,0x94,0x9e,0xa4,0xa5,0xa2,0x9a,0x8e,0x7f,0x71,0x67,0x63,0x62,0x64,0x69,0x71,
0x79,0x82,0x8a,0x91,0x97,0x9b,0x96,0x8a,0x77,0x63,0x50,0x44,0x3e,0x3d,0x3b,0x3c,
0x38,0x36,0x36,0x39,0x3b,0x40,0x41,0x3d,0x38,0x34,0x33,0x38,0x3b,0x3d,0x3e,0x3c,
0x39,0x35,0x33,0x34,0x3d,0x4b,0x5d,0x6c,0x78,0x7c,0x77,0x6f,0x65,0x5e,0x5e,0x61,
0x68,0x6f,0x73,0x78,0x7d,0x86,0x92,0xa0,0xaa,0xae,0xa9,0xa1,0x99,0x96,0x99,0x9c,
0x9e,0x9c,0x93,0x85,0x73,0x64,0x5d,0x5b,0x61,0x66,0x6e,0x78,0x80,0x87,0x8f,0x95,
0x98,0x96,0x8a,0x79,0x66,0x59,0x53,0x5a,0x68,0x79,0x83,0x83,0x78,0x6a,0x5f,0x5c,
0x5f,0x68,0x71,0x76,0x76,0x72,0x6c,0x67,0x65,0x66,0x6b,0x6e,0x71,0x71,0x75,0x79,
0x81,0x8d,0x96,0x9b,0x96,0x8a,0x76,0x64,0x51,0x44,0x3d,0x39,0x38,0x3c,0x46,0x55,
0x66,0x73,0x7c,0x7d,0x75,0x68,0x5d,0x56,0x51,0x4d,0x46,0x3a,0x32,0x32,0x3e,0x55,
0x6e,0x80,0x86,0x7d,0x6c,0x5b,0x55,0x5c,0x69,0x75,0x7b,0x78,0x71,0x6a,0x65,0x64,
0x64,0x5f,0x55,0x48,0x39,0x32,0x34,0x3f,0x50,0x64,0x79,0x89,0x92,0x97,0x98,0x96,
0x98,0x9b,0x9c,0x9e,0x9a,0x91,0x83,0x73,0x65,0x5a,0x5f,0x68,0x72,0x7d,0x82,0x7d,
0x76,0x69,0x62,0x61,0x64,0x68,0x6f,0x72,0x74,0x7b,0x84,0x90,0x99,0x9c,0x94,0x86,
0x72,0x5f,0x4f,0x44,0x3c,0x37,0x35,0x36,0x3e,0x50,0x65,0x77,0x81,0x81,0x79,0x6a,
0x5e,0x56,0x53,0x51,0x4b,0x41,0x39,0x2d,0x28,0x2d,0x34,0x3a,0x3d,0x3c,0x37,0x33,
0x32,0x32,0x34,0x38,0x3b,0x3d,0x3d,0x3c,0x3a,0x39,0x37,0x34,0x35,0x35,0x36,0x36,
0x36,0x36,0x39,0x3b,0x3c,0x3c,0x39,0x35,0x33,0x36,0x3d,0x47,0x54,0x62,0x6f,0x7c,
0x85,0x8c,0x93,0x9b,0xa0,0xa5,0xa4,0xa1,0x9b,0x9c,0x9d,0x9e,0xa0,0xa1,0xa3,0xa4,
0xa0,0x9c,0x9c,0x9b,0x99,0x99,0x98,0x91,0x87,0x79,0x6a,0x5d,0x51,0x49,0x44,0x41,
0x3d,0x39,0x35,0x33,0x34,0x39,0x3e,0x3d,0x39,0x31,0x2c,0x30,0x3c,0x4c,0x61,0x75,
0x80,0x81,0x7b,0x71,0x66,0x5f,0x57,0x4f,0x48,0x41,0x38,0x35,0x30,0x30,0x35,0x3e,
0x49,0x57,0x65,0x71,0x76,0x76,0x72,0x69,0x5d,0x55,0x51,0x4d,0x46,0x3c,0x32,0x28,
0x24,0x2b,0x34,0x3e,0x43,0x41,0x3b,0x34,0x31,0x38,0x47,0x5a,0x6a,0x76,0x81,0x8b,
0x91,0x96,0x9b,0x9e,0xa1,0xa0,0x9e,0x9c,0x9b,0x9c,0x9d,0x9e,0x9c,0x96,0x8a,0x7b,
0x6c,0x61,0x5c,0x60,0x69,0x74,0x7c,0x7d,0x76,0x6a,0x60,0x5d,0x60,0x68,0x73,0x7a,
0x78,0x73,0x68,0x60,0x5f,0x63,0x69,0x71,0x73,0x73,0x76,0x7a,0x82,0x8e,0x9b,0xa1,
0x9e,0x92,0x7f,0x6b,0x5d,0x57,0x5a,0x65,0x72,0x7e,0x86,0x8a,0x8f,0x97,0x9e,0xa2,
0xa2,0x9f,0x9b,0x97,0x96,0x99,0x9c,0x9b,0x94,0x89,0x7c,0x6d,0x5d,0x52,0x4a,0x43,
0x3f,0x3b,0x38,0x35,0x36,0x34,0x34,0x39,0x42,0x4f,0x61,0x70,0x79,0x7a,0x72,0x66,
0x5b,0x54,0x50,0x4e,0x48,0x3f,0x34,0x2b,0x29,0x2f,0x39,0x43,0x47,0x43,0x39,0x2e,
0x2e,0x3b,0x4f,0x64,0x74,0x7b,0x79,0x71,0x64,0x5d,0x57,0x51,0x48,0x3e,0x34,0x2c,
0x33,0x42,0x57,0x6f,0x7f,0x83,0x7e,0x70,0x63,0x5c,0x5d,0x61,0x68,0x6f,0x75,0x7a,
0x81,0x89,0x95,0x9f,0xa5,0xa6,0xa4,0x9d,0x94,0x86,0x77,0x66,0x59,0x51,0x4a,0x46,
0x40,0x3d,0x39,0x35,0x31,0x31,0x37,0x3a,0x3b,0x3c,0x3a,0x36,0x35,0x34,0x36,0x39,
0x3b,0x3b,0x39,0x37,0x36,0x37,0x38,0x39,0x36,0x31,0x2f,0x32,0x3f,0x51,0x65,0x75,
0x7b,0x78,0x72,0x6a,0x63,0x5e,0x5a,0x52,0x46,0x3a,0x32,0x34,0x44,0x5b,0x72,0x81,
0x82,0x77,0x6a,0x5a,0x51,0x4d,0x4b,0x44,0x37,0x32,0x33,0x40,0x56,0x6e,0x80,0x86,
0x7d,0x6c,0x5e,0x59,0x5d,0x67,0x6f,0x76,0x7a,0x7e,0x84,0x8c,0x98,0xa3,0xa9,0xa7,
0xa1,0x9a,0x96,0x94,0x96,0x99,0x98,0x94,0x8a,0x7c,0x6c,0x5e,0x53,0x4a,0x3f,0x38,
0x31,0x2d,0x2c,0x2c,0x2d,0x33,0x36,0x35,0x36,0x34,0x34,0x36,0x36,0x36,0x37,0x38,
0x39,0x3c,0x44,0x51,0x61,0x72,0x80,0x8a,0x93,0x98,0x98,0x92,0x86,0x77,0x67,0x57,
0x4a,0x42,0x40,0x3f,0x3e,0x3b,0x38,0x39,0x3a,0x3c,0x3a,0x3c,0x36,0x30,0x2f,0x2f,
0x2f,0x31,0x30,0x31,0x33,0x37,0x38,0x36,0x37,0x38,0x39,0x3a,0x39,0x38,0x3b,0x3a,
0x37,0x35,0x34,0x36,0x37,0x38,0x37,0x38,0x38,0x39,0x39,0x39,0x38,0x37,0x35,0x34,
// Line 18
0x3c,0x3c,0x3b,0x39,0x36,0x35,0x34,0x36,0x37,0x38,0x38,0x39,0x39,0x38,0x37,0x35,
0x33,0x34,0x39,0x3b,0x3b,0x37,0x34,0x2e,0x2e,0x30,0x36,0x3e,0x41,0x3d,0x35,0x2d,
0x2a,0x2e,0x37,0x41,0x46,0x42,0x3a,0x2f,0x29,0x2a,0x36,0x45,0x4c,0x47,0x3c,0x2d,
0x23,0x26,0x32,0x41,0x4a,0x46,0x39,0x2c,0x24,0x29,0x35,0x44,0x4a,0x45,0x3a,0x2d,
0x24,0x29,0x36,0x43,0x4a,0x46,0x3a,0x2d,0x24,0x27,0x34,0x42,0x49,0x46,0x39,0x2a,
0x23,0x29,0x36,0x44,0x4e,0x49,0x3a,0x2d,0x25,0x27,0x34,0x43,0x48,0x42,0x37,0x2a,
0x1f,0x27,0x36,0x44,0x4e,0x4a,0x3c,0x2e,0x24,0x29,0x36,0x44,0x4b,0x47,0x37,0x27,
0x20,0x27,0x37,0x46,0x4e,0x48,0x39,0x2b,0x22,0x26,0x37,0x47,0x4c,0x47,0x36,0x26,
0x1e,0x23,0x31,0x40,0x49,0x44,0x37,0x27,0x21,0x2a,0x3d,0x4f,0x58,0x57,0x4c,0x3f,
0x3b,0x41,0x50,0x60,0x64,0x5b,0x4e,0x40,0x39,0x3e,0x4d,0x5b,0x60,0x5b,0x4e,0x40,
0x3c,0x42,0x51,0x60,0x64,0x5d,0x4e,0x40,0x37,0x3d,0x4c,0x5d,0x61,0x5d,0x4c,0x3c,
0x38,0x40,0x50,0x61,0x67,0x5f,0x51,0x41,0x39,0x3f,0x4e,0x5d,0x64,0x5e,0x4e,0x3e,
0x37,0x3b,0x4a,0x5a,0x62,0x5e,0x53,0x43,0x3b,0x3f,0x4c,0x5c,0x64,0x5e,0x4f,0x40,
0x39,0x3e,0x4b,0x59,0x60,0x5c,0x4f,0x3f,0x36,0x3b,0x49,0x57,0x61,0x5d,0x51,0x45,
0x40,0x44,0x55,0x67,0x71,0x6c,0x64,0x55,0x4e,0x56,0x65,0x74,0x7b,0x76,0x69,0x5b,
0x53,0x56,0x64,0x73,0x78,0x74,0x67,0x58,0x50,0x55,0x62,0x71,0x78,0x74,0x65,0x56,
0x4e,0x53,0x62,0x71,0x78,0x74,0x65,0x57,0x50,0x56,0x65,0x74,0x7a,0x73,0x64,0x55,
0x4e,0x54,0x62,0x71,0x78,0x74,0x66,0x56,0x50,0x55,0x62,0x71,0x78,0x73,0x64,0x53,
0x4a,0x50,0x61,0x71,0x77,0x75,0x69,0x5a,0x54,0x56,0x63,0x74,0x7d,0x77,0x68,0x58,
0x4f,0x52,0x60,0x6d,0x75,0x73,0x69,0x5a,0x56,0x5c,0x6c,0x80,0x8a,0x87,0x7d,0x70,
0x67,0x6a,0x78,0x88,0x8e,0x87,0x78,0x6a,0x64,0x6a,0x78,0x88,0x8f,0x8b,0x7f,0x70,
0x68,0x6e,0x7d,0x8a,0x8f,0x89,0x7b,0x6c,0x64,0x68,0x76,0x86,0x8e,0x89,0x7b,0x6d,
0x67,0x6c,0x78,0x86,0x8d,0x86,0x77,0x69,0x61,0x67,0x77,0x86,0x8a,0x85,0x7b,0x6d,
0x64,0x6b,0x7a,0x86,0x8d,0x88,0x7c,0x6f,0x69,0x6d,0x7c,0x89,0x90,0x8b,0x7e,0x6e,
0x67,0x6c,0x7a,0x88,0x93,0x8b,0x7e,0x71,0x6a,0x6f,0x7d,0x8c,0x92,0x90,0x86,0x7c,
0x77,0x7d,0x8c,0x9c,0xa5,0xa1,0x94,0x85,0x7e,0x82,0x91,0x9f,0xa4,0x9f,0x92,0x83,
0x7d,0x82,0x8f,0x9c,0xa5,0x9f,0x8e,0x7f,0x78,0x7e,0x8f,0x9d,0xa3,0x9f,0x91,0x82,
0x7b,0x7f,0x8e,0x9e,0xa5,0xa1,0x92,0x83,0x79,0x7d,0x8c,0x9c,0xa3,0x9f,0x91,0x83,
0x7c,0x7f,0x8b,0x9b,0xa3,0x9f,0x91,0x80,0x78,0x7e,0x8c,0x9b,0xa1,0x9d,0x92,0x85,
0x7e,0x82,0x8f,0x9f,0xa6,0xa4,0x97,0x88,0x7f,0x85,0x93,0xa1,0xa7,0xa2,0x95,0x88,
0x82,0x85,0x91,0xa0,0xa8,0xa7,0x9d,0x92,0x8c,0x92,0xa0,0xaf,0xb7,0xb5,0xaa,0x99,
0x94,0x97,0xa3,0xb0,0xb7,0xb3,0xa9,0x97,0x8e,0x94,0xa4,0xb3,0xb9,0xb5,0xa9,0x9b,
0x94,0x9a,0xa7,0xb7,0xbb,0xb3,0xa6,0x98,0x91,0x96,0xa4,0xb1,0xb7,0xb0,0xa3,0x96,
0x92,0x98,0xa5,0xb3,0xba,0xb5,0xa7,0x99,0x94,0x99,0xa6,0xb2,0xb6,0xaf,0xa3,0x97,
0x92,0x97,0xa3,0xb0,0xb3,0xae,0xa4,0x99,0x94,0x9a,0xa8,0xb3,0xb7,0xb1,0xa4,0x9b,
0x95,0x98,0xa5,0xb0,0xb3,0xb0,0xa7,0x9d,0x99,0x9b,0xa3,0xa9,0xac,0xaa,0xa4,0x9f,
0x9c,0x9f,0xa5,0xa8,0xa9,0xa7,0xa5,0xa3,0xa0,0xa0,0xa1,0xa5,0xa6,0xa7,0xa8,0xa8,
0xa7,0xa7,0xa9,0xaa,0xaa,0xa8,0xa5,0xa4,0xa6,0xa4,0xa4,0xa3,0xa3,0xa5,0xa7,0xa7,
0xa5,0xa6,0xa7,0xa7,0xa6,0xa8,0xa8,0xa7,0xa7,0xa5,0xa3,0xa2,0xa3,0xa4,0xa5,0xa3,
0xa0,0xa1,0xa5,0xa9,0xa9,0xab,0xaa,0xa9,0xaa,0xa9,0xa7,0xa8,0xa6,0xa5,0xa4,0xa2,
0xa0,0xa0,0xa3,0xa4,0xa5,0xa5,0xa5,0xa4,0xa3,0xa0,0x9c,0x98,0x92,0x8a,0x80,0x74,
0x68,0x5e,0x54,0x4b,0x42,0x3c,0x38,0x38,0x38,0x39,0x39,0x39,0x38,0x39,0x3b,0x3a,
0x39,0x39,0x39,0x37,0x35,0x36,0x37,0x38,0x38,0x37,0x37,0x37,0x37,0x37,0x39,0x38,
0x37,0x37,0x39,0x3a,0x39,0x37,0x37,0x3a,0x39,0x37,0x36,0x36,0x35,0x36,0x36,0x36,
0x36,0x36,0x35,0x34,0x36,0x36,0x37,0x37,0x37,0x37,0x37,0x36,0x36,0x36,0x36,0x35,
0x36,0x36,0x35,0x36,0x38,0x39,0x3a,0x3b,0x3a,0x39,0x39,0x37,0x37,0x37,0x37,0x37,
0x36,0x36,0x34,0x35,0x36,0x37,0x37,0x36,0x36,0x34,0x35,0x35,0x36,0x37,0x37,0x37,
0x39,0x37,0x37,0x37,0x39,0x39,0x3a,0x39,0x38,0x37,0x38,0x39,0x39,0x3c,0x3d,0x3a,
0x37,0x32,0x34,0x3e,0x50,0x67,0x7f,0x91,0x9b,0x9c,0x94,0x87,0x79,0x6d,0x64,0x58,
0x4c,0x40,0x36,0x31,0x2f,0x35,0x3d,0x41,0x40,0x3d,0x37,0x31,0x2d,0x2c,0x2e,0x32,
0x36,0x38,0x37,0x39,0x3a,0x39,0x37,0x35,0x34,0x36,0x36,0x36,0x36,0x36,0x37,0x39,
0x39,0x37,0x34,0x37,0x37,0x39,0x3b,0x3c,0x3a,0x3b,0x37,0x32,0x35,0x39,0x3e,0x41,
0x3f,0x3a,0x36,0x36,0x3c,0x49,0x55,0x5a,0x56,0x4a,0x3f,0x3e,0x48,0x5b,0x6c,0x73,
0x6b,0x58,0x47,0x41,0x4e,0x6a,0x83,0x8e,0x83,0x68,0x4f,0x4a,0x5d,0x7e,0x9b,0xa7,
0x99,0x79,0x5b,0x51,0x61,0x81,0x9d,0xa5,0x96,0x76,0x58,0x4a,0x5b,0x7b,0x97,0x9d,
0x8c,0x6c,0x53,0x4b,0x56,0x6d,0x80,0x85,0x76,0x5d,0x47,0x41,0x49,0x57,0x61,0x61,
0x54,0x44,0x37,0x36,0x3c,0x46,0x4c,0x4b,0x46,0x3e,0x37,0x34,0x36,0x37,0x3a,0x3a,
0x39,0x36,0x33,0x31,0x33,0x33,0x33,0x31,0x38,0x37,0x37,0x37,0x38,0x38,0x3b,0x3b,
0x3a,0x3c,0x3d,0x3d,0x3b,0x39,0x37,0x37,0x37,0x37,0x37,0x37,0x36,0x35,0x36,0x36,
0x36,0x36,0x36,0x37,0x37,0x36,0x35,0x34,0x33,0x34,0x34,0x34,0x34,0x35,0x36,0x36,
0x35,0x37,0x37,0x39,0x3c,0x3b,0x39,0x38,0x38,0x37,0x35,0x35,0x34,0x35,0x35,0x34,
0x34,0x36,0x37,0x37,0x37,0x37,0x38,0x39,0x38,0x36,0x37,0x38,0x37,0x36,0x34,0x33,
0x33,0x33,0x34,0x35,0x38,0x3d,0x44,0x4c,0x56,0x64,0x75,0x85,0x92,0x9f,0xac,0xb5,
0xba,0xbc,0xbe,0xc0,0xc1,0xc0,0xbe,0xbf,0xbe,0xbd,0xc0,0xc2,0xc3,0xc4,0xc3,0xc1,
0xc0,0xc0,0xc0,0xbf,0xbe,0xbc,0xbb,0xba,0xbb,0xbc,0xbd,0xbe,0xbc,0xbc,0xba,0xb9,
0xba,0xbb,0xbc,0xbd,0xbd,0xbd,0xbc,0xbb,0xbb,0xbc,0xbe,0xbe,0xbd,0xbf,0xbe,0xbd,
0xbe,0xbd,0xbe,0xbf,0xbe,0xbc,0xbd,0xbe,0xbd,0xbc,0xbc,0xbc,0xbe,0xc0,0xbf,0xbd,
0xbc,0xbc,0xbc,0xbc,0xbd,0xbc,0xbb,0xba,0xb7,0xb8,0xba,0xbc,0xbd,0xbe,0xbd,0xbc,
0xbc,0xba,0xba,0xba,0xba,0xba,0xba,0xba,0xba,0xbc,0xbd,0xbc,0xbd,0xbd,0xbe,0xbd,
0xbb,0xba,0xba,0xbc,0xbd,0xbd,0xbe,0xbe,0xbe,0xbd,0xbc,0xbb,0xbb,0xbc,0xbb,0xba,
0xb9,0xbb,0xbc,0xbc,0xbb,0xbc,0xbf,0xbe,0xba,0xba,0xba,0xba,0xbb,0xba,0xbb,0xbb,
0xba,0xba,0xba,0xbb,0xbc,0xbb,0xbc,0xbb,0xbc,0xbf,0xbf,0xbf,0xbe,0xbd,0xbc,0xbc,
0xbb,0xbc,0xbe,0xbf,0xbe,0xbd,0xbc,0xbd,0xbe,0xbe,0xbe,0xbe,0xbf,0xbd,0xbb,0xb8,
0xb7,0xb8,0xbb,0xbc,0xbd,0xbd,0xbc,0xb9,0xb8,0xba,0xbd,0xbf,0xbe,0xbd,0xbc,0xbb,
0xba,0xba,0xbc,0xbc,0xbc,0xbc,0xba,0xb9,0xb9,0xba,0xba,0xbc,0xbc,0xbc,0xba,0xba,
0xb4,0xb7,0xba,0xbf,0xc1,0xc2,0xbd,0xbc,0xb9,0xb8,0xb7,0xb7,0xb9,0xb8,0xb9,0xb9,
0xb9,0xba,0xba,0xb9,0xb8,0xb9,0xbb,0xbc,0xbc,0xba,0xb9,0xb9,0xb7,0xb6,0xb6,0xb7,
0xb9,0xbb,0xbb,0xbb,0xbc,0xbb,0xbc,0xbc,0xbd,0xbd,0xbc,0xbc,0xba,0xba,0xbc,0xbd,
0xbc,0xbc,0xbb,0xbb,0xbc,0xbc,0xbd,0xbd,0xbc,0xba,0xba,0xbd,0xbe,0xbe,0xbd,0xbd,
0xbc,0xbc,0xbb,0xbc,0xbf,0xbe,0xbc,0xbc,0xbc,0xbe,0xbf,0xbf,0xbe,0xbe,0xc0,0xbf,
0xbe,0xbe,0xbe,0xbe,0xbe,0xbd,0xbc,0xbb,0xba,0xbb,0xbc,0xbc,0xbc,0xbc,0xbc,0xba,
0xb9,0xbb,0xba,0xbb,0xbc,0xbd,0xbc,0xbc,0xb9,0xba,0xbc,0xbe,0xbd,0xbd,0xbd,0xbc,
0xbc,0xbc,0xbc,0xbc,0xbd,0xbe,0xbd,0xbc,0xbc,0xbd,0xc0,0xc0,0xbe,0xbd,0xbc,0xbc,
0xbc,0xbb,0xbc,0xb9,0xbc,0xb9,0xb9,0xba,0xba,0xb9,0xbb,0xbb,0xbc,0xbd,0xbe,0xbf,
0xc1,0xc1,0xc0,0xc0,0xbe,0xbe,0xbf,0xc0,0xbf,0xbf,0xc0,0xc0,0xbf,0xbe,0xbe,0xbe,
0xbf,0xbf,0xbe,0xbe,0xbd,0xbc,0xbc,0xbc,0xbd,0xbe,0xbd,0xbc,0xbc,0xbc,0xbd,0xbe,
0xbe,0xbe,0xbe,0xbe,0xbd,0xbe,0xbf,0xbe,0xbd,0xbc,0xba,0xb9,0xb8,0xb8,0xba,0xbd,
0xbd,0xbd,0xbc,0xbc,0xbb,0xbb,0xbf,0xc0,0xbe,0xbd,0xbb,0xb9,0xb9,0xba,0xbd,0xbe,
0xbf,0xbd,0xbd,0xbd,0xbd,0xbc,0xc0,0xbe,0xbd,0xbd,0xbd,0xbc,0xbd,0xbc,0xbc,0xbe,
0xbe,0xbe,0xbc,0xbe,0xbd,0xbd,0xbd,0xbf,0xbe,0xbf,0xbe,0xbd,0xbd,0xbd,0xbd,0xbc,
0xb9,0xb9,0xba,0xba,0xb9,0xb8,0xb9,0xb9,0xbb,0xbc,0xbd,0xbd,0xbd,0xbc,0xbc,0xbe,
0xbf,0xbe,0xbd,0xbc,0xbb,0xbc,0xba,0xb9,0xba,0xbb,0xba,0xba,0xba,0xbd,0xbe,0xc1,
0xc1,0xbf,0xbe,0xbd,0xba,0xb9,0xb8,0xb8,0xba,0xba,0xb9,0xba,0xba,0xba,0xbc,0xbe,
0xc0,0xc1,0xbf,0xbc,0xbb,0xbd,0xbe,0xbe,0xbe,0xbe,0xbe,0xbe,0xbe,0xbf,0xbe,0xbd,
0xbc,0xbc,0xbc,0xbd,0xba,0xb7,0xb0,0xa8,0xa0,0x97,0x8b,0x7e,0x70,0x62,0x56,0x4c,
0x44,0x3d,0x38,0x35,0x32,0x32,0x33,0x36,0x37,0x36,0x36,0x37,0x36,0x35,0x35,0x37,
// Line 19
0x35,0x32,0x35,0x35,0x35,0x36,0x37,0x38,0x36,0x35,0x36,0x36,0x36,0x36,0x37,0x3a,
0x3c,0x3e,0x43,0x47,0x4a,0x50,0x54,0x58,0x5a,0x5e,0x61,0x63,0x63,0x63,0x62,0x63,
0x62,0x61,0x61,0x60,0x60,0x61,0x60,0x60,0x62,0x62,0x62,0x63,0x62,0x61,0x62,0x62,
0x64,0x63,0x63,0x61,0x60,0x61,0x62,0x62,0x62,0x61,0x61,0x61,0x61,0x61,0x63,0x64,
0x63,0x64,0x63,0x62,0x5f,0x61,0x5f,0x5e,0x5d,0x5e,0x5e,0x62,0x61,0x5e,0x60,0x61,
0x62,0x64,0x66,0x66,0x66,0x65,0x64,0x63,0x63,0x63,0x63,0x64,0x62,0x61,0x61,0x5e,
0x5c,0x5f,0x62,0x63,0x64,0x63,0x62,0x63,0x62,0x63,0x64,0x64,0x62,0x62,0x62,0x61,
0x60,0x60,0x5f,0x5f,0x5f,0x5f,0x5f,0x5e,0x5c,0x5e,0x60,0x62,0x61,0x62,0x62,0x60,
0x5e,0x5d,0x5e,0x61,0x62,0x61,0x61,0x64,0x64,0x64,0x65,0x66,0x66,0x68,0x69,0x68,
0x64,0x64,0x62,0x62,0x64,0x66,0x66,0x68,0x66,0x64,0x66,0x67,0x69,0x6b,0x6b,0x6a,
0x69,0x69,0x69,0x69,0x69,0x66,0x65,0x65,0x66,0x68,0x6b,0x6d,0x6d,0x6d,0x6d,0x6d,
0x6d,0x6f,0x71,0x71,0x71,0x71,0x71,0x72,0x73,0x74,0x76,0x76,0x76,0x77,0x77,0x74,
0x75,0x76,0x75,0x74,0x73,0x75,0x78,0x7a,0x7a,0x79,0x7a,0x7c,0x7d,0x7f,0x81,0x82,
0x84,0x84,0x84,0x87,0x89,0x8a,0x8a,0x8a,0x89,0x8c,0x8d,0x8e,0x8e,0x8f,0x90,0x90,
0x8f,0x8e,0x90,0x91,0x90,0x8d,0x8e,0x8f,0x90,0x90,0x8f,0x8e,0x8d,0x8d,0x8d,0x8c,
0x89,0x86,0x82,0x7f,0x7c,0x78,0x76,0x73,0x6f,0x6c,0x68,0x64,0x60,0x5b,0x57,0x55,
0x52,0x4f,0x4a,0x46,0x41,0x3c,0x3a,0x37,0x33,0x31,0x2d,0x2a,0x26,0x26,0x27,0x26,
0x26,0x26,0x27,0x2a,0x2c,0x2f,0x36,0x39,0x3c,0x41,0x47,0x4c,0x53,0x57,0x5b,0x62,
0x69,0x6e,0x73,0x78,0x7e,0x85,0x8b,0x8d,0x8f,0x93,0x96,0x97,0x96,0x94,0x93,0x92,
0x8e,0x88,0x82,0x7c,0x78,0x71,0x69,0x5f,0x57,0x52,0x4d,0x46,0x3e,0x39,0x35,0x32,
0x2f,0x2c,0x2e,0x2f,0x2f,0x30,0x33,0x36,0x3a,0x3e,0x43,0x4b,0x54,0x5d,0x64,0x6f,
0x76,0x7d,0x87,0x8e,0x94,0x98,0x97,0x94,0x90,0x8a,0x86,0x7f,0x76,0x6d,0x62,0x58,
0x4d,0x46,0x42,0x3d,0x37,0x33,0x31,0x30,0x32,0x32,0x34,0x38,0x3d,0x44,0x4c,0x56,
0x5f,0x6a,0x76,0x7f,0x84,0x8d,0x90,0x92,0x91,0x8c,0x84,0x7c,0x72,0x68,0x5e,0x55,
0x4d,0x44,0x3c,0x36,0x31,0x30,0x30,0x30,0x36,0x39,0x3f,0x4c,0x58,0x65,0x72,0x7e,
0x86,0x8c,0x90,0x91,0x90,0x88,0x7d,0x73,0x67,0x5b,0x4d,0x45,0x3e,0x37,0x33,0x30,
0x31,0x36,0x3a,0x41,0x4c,0x5a,0x69,0x75,0x7e,0x84,0x89,0x8a,0x88,0x83,0x7c,0x72,
0x64,0x56,0x4a,0x40,0x3b,0x37,0x35,0x36,0x37,0x3d,0x46,0x51,0x5e,0x6f,0x7d,0x88,
0x8e,0x8e,0x8b,0x86,0x7d,0x71,0x62,0x55,0x48,0x3c,0x32,0x2c,0x2b,0x2f,0x38,0x43,
0x51,0x62,0x74,0x82,0x8b,0x8f,0x8e,0x89,0x7e,0x72,0x65,0x56,0x48,0x3e,0x36,0x33,
0x34,0x39,0x41,0x51,0x62,0x74,0x80,0x87,0x8b,0x8a,0x86,0x7b,0x6e,0x62,0x56,0x48,
0x3a,0x32,0x2f,0x30,0x38,0x45,0x57,0x6c,0x7d,0x84,0x8b,0x87,0x7d,0x72,0x64,0x57,
0x4b,0x41,0x38,0x33,0x32,0x3a,0x49,0x5b,0x6d,0x7f,0x8a,0x8c,0x85,0x7b,0x6f,0x62,
0x56,0x4a,0x3f,0x37,0x33,0x36,0x42,0x54,0x69,0x7d,0x89,0x8d,0x88,0x7d,0x70,0x60,
0x54,0x48,0x3c,0x37,0x35,0x39,0x48,0x5a,0x6d,0x7e,0x88,0x8a,0x82,0x73,0x63,0x56,
0x4a,0x40,0x39,0x36,0x3b,0x48,0x5c,0x6f,0x7d,0x85,0x85,0x7d,0x70,0x60,0x52,0x46,
0x3e,0x39,0x3a,0x45,0x55,0x69,0x7a,0x83,0x83,0x7c,0x6f,0x61,0x56,0x48,0x3e,0x39,
0x3a,0x44,0x54,0x68,0x78,0x84,0x88,0x81,0x71,0x5e,0x50,0x44,0x3e,0x3d,0x41,0x4c,
0x5b,0x6b,0x78,0x7e,0x7c,0x75,0x68,0x57,0x46,0x3c,0x3b,0x42,0x4b,0x58,0x67,0x76,
0x7e,0x7e,0x74,0x64,0x54,0x4c,0x46,0x45,0x4a,0x54,0x62,0x6e,0x76,0x79,0x75,0x6c,
0x60,0x51,0x46,0x42,0x45,0x50,0x5e,0x6a,0x72,0x74,0x72,0x6e,0x62,0x53,0x4a,0x48,
0x4c,0x51,0x5e,0x68,0x6e,0x72,0x6e,0x64,0x5d,0x51,0x4a,0x4b,0x50,0x5a,0x64,0x6f,
0x72,0x71,0x6c,0x61,0x55,0x4d,0x49,0x4b,0x52,0x5b,0x64,0x6b,0x6d,0x68,0x62,0x58,
0x50,0x4e,0x53,0x59,0x62,0x69,0x6f,0x6f,0x69,0x62,0x5c,0x58,0x55,0x56,0x5b,0x61,
0x65,0x69,0x69,0x66,0x61,0x5b,0x56,0x56,0x58,0x5d,0x61,0x65,0x64,0x62,0x60,0x5a,
0x56,0x55,0x57,0x5c,0x62,0x66,0x66,0x63,0x5c,0x55,0x51,0x53,0x5a,0x62,0x68,0x69,
0x63,0x5e,0x57,0x51,0x52,0x58,0x61,0x69,0x6e,0x6d,0x69,0x60,0x56,0x51,0x50,0x57,
0x61,0x69,0x6d,0x6c,0x66,0x5b,0x51,0x4c,0x4f,0x59,0x67,0x71,0x74,0x6f,0x64,0x57,
0x4d,0x4c,0x55,0x62,0x71,0x76,0x72,0x68,0x57,0x46,0x3f,0x46,0x57,0x6c,0x79,0x7d,
0x74,0x62,0x4f,0x43,0x44,0x53,0x67,0x79,0x81,0x7b,0x69,0x54,0x43,0x40,0x4d,0x60,
0x74,0x7d,0x78,0x67,0x4e,0x3b,0x37,0x46,0x60,0x77,0x83,0x7a,0x68,0x51,0x3f,0x3c,
0x4b,0x64,0x7b,0x86,0x7d,0x65,0x4a,0x39,0x39,0x4d,0x69,0x7e,0x84,0x78,0x5f,0x44,
0x37,0x41,0x5a,0x74,0x83,0x7f,0x6b,0x50,0x3a,0x37,0x48,0x65,0x7e,0x86,0x7a,0x60,
0x43,0x35,0x3f,0x5a,0x76,0x87,0x83,0x6b,0x4c,0x39,0x3a,0x50,0x6d,0x82,0x83,0x6f,
0x51,0x3b,0x39,0x4e,0x6d,0x83,0x89,0x78,0x58,0x3f,0x36,0x45,0x63,0x7c,0x81,0x70,
0x53,0x39,0x32,0x44,0x63,0x7d,0x84,0x73,0x56,0x3e,0x3b,0x4e,0x6c,0x82,0x85,0x73,
0x54,0x3d,0x3c,0x50,0x6b,0x7f,0x7f,0x6b,0x4d,0x3b,0x40,0x58,0x74,0x83,0x7b,0x64,
0x46,0x3c,0x4a,0x65,0x7d,0x82,0x75,0x5b,0x45,0x43,0x57,0x71,0x7f,0x7a,0x63,0x4b,
0x40,0x4a,0x63,0x78,0x7d,0x70,0x56,0x43,0x42,0x52,0x69,0x78,0x73,0x61,0x4c,0x45,
0x4e,0x64,0x78,0x7b,0x6d,0x58,0x4c,0x50,0x62,0x73,0x79,0x72,0x5f,0x4f,0x4e,0x5b,
0x6c,0x76,0x71,0x61,0x52,0x50,0x5a,0x69,0x75,0x74,0x67,0x59,0x52,0x57,0x63,0x6d,
0x6c,0x60,0x52,0x4d,0x50,0x5f,0x6b,0x6c,0x66,0x5c,0x55,0x5c,0x65,0x6d,0x71,0x6b,
0x5e,0x55,0x54,0x5e,0x69,0x6d,0x67,0x5e,0x57,0x59,0x60,0x69,0x6d,0x68,0x60,0x58,
0x57,0x5e,0x64,0x68,0x64,0x5d,0x57,0x57,0x5c,0x62,0x66,0x64,0x5e,0x58,0x5a,0x60,
0x66,0x6b,0x65,0x5e,0x5b,0x5c,0x60,0x65,0x67,0x64,0x5e,0x5a,0x5a,0x5e,0x65,0x68,
0x64,0x61,0x5e,0x5f,0x63,0x66,0x67,0x64,0x5f,0x5b,0x5b,0x5e,0x63,0x64,0x62,0x5e,
0x5c,0x5c,0x62,0x66,0x69,0x66,0x61,0x5c,0x5b,0x5e,0x62,0x64,0x63,0x61,0x5f,0x5e,
0x60,0x62,0x64,0x62,0x62,0x60,0x5f,0x61,0x61,0x62,0x62,0x5f,0x5c,0x5e,0x61,0x62,
0x61,0x60,0x5f,0x61,0x60,0x61,0x62,0x62,0x60,0x5c,0x5c,0x5f,0x62,0x62,0x62,0x60,
0x61,0x60,0x61,0x63,0x64,0x64,0x63,0x61,0x5e,0x5a,0x5f,0x61,0x62,0x62,0x62,0x5f,
0x62,0x5f,0x5c,0x5f,0x62,0x63,0x63,0x61,0x60,0x60,0x5e,0x5c,0x5c,0x5e,0x61,0x62,
0x62,0x62,0x61,0x5f,0x5f,0x60,0x62,0x65,0x66,0x67,0x64,0x62,0x61,0x60,0x61,0x62,
0x61,0x60,0x5f,0x5e,0x5c,0x5b,0x5f,0x5f,0x5e,0x60,0x60,0x60,0x5e,0x5e,0x5e,0x61,
0x62,0x62,0x60,0x5f,0x5f,0x60,0x62,0x64,0x64,0x66,0x64,0x63,0x63,0x64,0x65,0x68,
0x65,0x62,0x62,0x61,0x61,0x62,0x63,0x63,0x63,0x64,0x64,0x64,0x63,0x63,0x62,0x62,
0x61,0x61,0x61,0x62,0x62,0x62,0x62,0x62,0x61,0x62,0x62,0x61,0x62,0x61,0x60,0x61,
0x60,0x5f,0x60,0x61,0x61,0x60,0x60,0x60,0x62,0x62,0x63,0x62,0x61,0x5e,0x5c,0x5e,
0x5e,0x5f,0x60,0x5f,0x5d,0x5e,0x5f,0x60,0x62,0x61,0x62,0x62,0x62,0x62,0x60,0x64,
0x62,0x62,0x61,0x61,0x61,0x62,0x62,0x61,0x61,0x61,0x61,0x62,0x61,0x62,0x64,0x66,
0x64,0x5f,0x5e,0x5d,0x5d,0x5f,0x5f,0x61,0x61,0x5f,0x5e,0x5e,0x5e,0x60,0x62,0x62,
0x5f,0x5e,0x60,0x60,0x5f,0x61,0x62,0x62,0x62,0x60,0x60,0x61,0x61,0x5f,0x60,0x60,
0x5f,0x5f,0x5e,0x5e,0x60,0x61,0x61,0x5d,0x61,0x62,0x61,0x62,0x62,0x61,0x61,0x5f,
0x5e,0x5f,0x60,0x5f,0x5d,0x5c,0x5e,0x60,0x60,0x5f,0x5e,0x5e,0x5d,0x5c,0x5d,0x5e,
0x5e,0x5f,0x60,0x60,0x60,0x62,0x63,0x64,0x61,0x5c,0x5c,0x5f,0x62,0x5f,0x62,0x61,
0x5f,0x62,0x62,0x62,0x63,0x62,0x5f,0x5d,0x5c,0x5e,0x5f,0x61,0x61,0x61,0x60,0x5e,
0x5c,0x5d,0x5e,0x61,0x62,0x60,0x5d,0x5c,0x5c,0x5c,0x5e,0x60,0x61,0x5f,0x5c,0x5c,
0x5c,0x5e,0x61,0x62,0x65,0x63,0x63,0x64,0x64,0x62,0x63,0x61,0x5e,0x5c,0x5c,0x5c,
0x5a,0x5b,0x5a,0x5c,0x60,0x62,0x62,0x64,0x66,0x67,0x68,0x66,0x64,0x63,0x61,0x5f,
0x5e,0x5c,0x5e,0x5f,0x5f,0x5e,0x5e,0x5f,0x60,0x60,0x5f,0x5d,0x5a,0x55,0x4e,0x48,
0x44,0x3f,0x39,0x35,0x35,0x35,0x2f,0x2f,0x2f,0x31,0x34,0x37,0x37,0x3b,0x3b,0x39,
0x38,0x37,0x36,0x38,0x39,0x39,0x37,0x33,0x30,0x30,0x30,0x32,0x35,0x37,0x38,0x37,
0x36,0x35,0x35,0x37,0x36,0x35,0x35,0x33,0x31,0x30,0x31,0x32,0x33,0x34,0x33,0x35,
0x36,0x36,0x35,0x37,0x36,0x35,0x37,0x38,0x38,0x39,0x39,0x37,0x36,0x35,0x35,0x35,
0x34,0x34,0x34,0x35,0x33,0x33,0x33,0x35,0x37,0x39,0x3a,0x3b,0x3d,0x3b,0x37,0x35,
0x34,0x35,0x35,0x32,0x2f,0x30,0x32,0x34,0x34,0x35,0x37,0x36,0x37,0x36,0x36,0x37,
0x36,0x34,0x33,0x31,0x2f,0x2e,0x2f,0x2f,0x30,0x30,0x30,0x2f,0x2f,0x30,0x32,0x36,
// Line 20
0x37,0x37,0x38,0x38,0x38,0x36,0x36,0x35,0x34,0x36,0x36,0x35,0x36,0x38,0x39,0x37,
0x35,0x35,0x36,0x38,0x39,0x39,0x39,0x3b,0x40,0x4a,0x58,0x67,0x78,0x88,0x97,0xa5,
0xaf,0xb9,0xc0,0xc5,0xc6,0xc3,0xc0,0xbe,0xbb,0xbb,0xba,0xbc,0xbe,0xc0,0xc1,0xc2,
0xc0,0xc0,0xbe,0xbd,0xbd,0xbe,0xbe,0xbc,0xbb,0xbc,0xbb,0xba,0xbb,0xbb,0xbc,0xbe,
0xc0,0xc0,0xc0,0xbe,0xbc,0xbd,0xbd,0xbd,0xbc,0xbd,0xbc,0xbc,0xbc,0xbb,0xbb,0xbd,
0xbc,0xbd,0xbe,0xbe,0xbc,0xbb,0xbb,0xbc,0xbd,0xbd,0xbd,0xbb,0xbc,0xba,0xba,0xbc,
0xbc,0xba,0xbe,0xbc,0xbb,0xbd,0xbe,0xbe,0xbe,0xbe,0xbd,0xbe,0xbf,0xc0,0xc0,0xc0,
0xbe,0xbd,0xbe,0xbe,0xbe,0xbd,0xbc,0xbb,0xbc,0xbc,0xbd,0xbe,0xbd,0xbd,0xbd,0xbd,
0xbe,0xc0,0xc2,0xc3,0xc2,0xc0,0xbe,0xbd,0xbc,0xbd,0xbe,0xc0,0xc0,0xbc,0xbb,0xbc,
0xbc,0xbf,0xc0,0xc2,0xbe,0xc0,0xbd,0xba,0xba,0xbb,0xb9,0xbd,0xba,0xb7,0xb9,0xba,
0xb9,0xba,0xbc,0xbd,0xbd,0xbd,0xbe,0xbf,0xbe,0xbe,0xbe,0xbe,0xbe,0xbc,0xba,0xb8,
0xb8,0xbb,0xbd,0xbc,0xbd,0xbe,0xbe,0xbf,0xbf,0xc0,0xc2,0xc2,0xc0,0xc0,0xbd,0xba,
0xb6,0xb3,0xac,0xa6,0xa0,0x99,0x90,0x89,0x83,0x7b,0x76,0x72,0x70,0x70,0x6f,0x6e,
0x6d,0x6f,0x71,0x71,0x71,0x70,0x70,0x71,0x71,0x71,0x71,0x70,0x71,0x73,0x73,0x71,
0x71,0x73,0x75,0x75,0x73,0x73,0x73,0x73,0x72,0x72,0x73,0x74,0x73,0x72,0x71,0x70,
0x70,0x71,0x71,0x70,0x6f,0x6c,0x6b,0x6d,0x6e,0x6d,0x71,0x6e,0x6c,0x6d,0x6d,0x6d,
0x6f,0x70,0x70,0x70,0x70,0x70,0x72,0x7a,0x7e,0x82,0x84,0x89,0x8e,0x91,0x95,0x97,
0x97,0x98,0x96,0x97,0x95,0x93,0x91,0x8f,0x8b,0x89,0x85,0x80,0x7c,0x7a,0x76,0x72,
0x6b,0x65,0x5f,0x5d,0x5a,0x58,0x57,0x54,0x51,0x4f,0x4b,0x4a,0x46,0x49,0x4a,0x48,
0x48,0x4a,0x4b,0x4e,0x4e,0x4f,0x54,0x58,0x5c,0x61,0x65,0x6a,0x6f,0x74,0x77,0x7b,
0x80,0x85,0x8a,0x8e,0x91,0x94,0x95,0x96,0x95,0x97,0x99,0x99,0x98,0x96,0x95,0x94,
0x90,0x8b,0x85,0x84,0x82,0x7f,0x7c,0x79,0x74,0x71,0x68,0x61,0x5e,0x5d,0x5a,0x57,
0x51,0x4c,0x48,0x46,0x45,0x45,0x45,0x46,0x45,0x45,0x46,0x4a,0x4e,0x50,0x51,0x55,
0x59,0x5c,0x5f,0x61,0x65,0x6c,0x73,0x76,0x78,0x7c,0x82,0x88,0x8c,0x8f,0x93,0x95,
0x96,0x97,0x9a,0x9a,0x9a,0x98,0x96,0x95,0x93,0x8f,0x8d,0x88,0x88,0x82,0x7d,0x7b,
0x78,0x74,0x71,0x6d,0x66,0x62,0x60,0x5c,0x58,0x54,0x4f,0x4e,0x4c,0x4b,0x48,0x47,
0x45,0x44,0x44,0x46,0x48,0x4c,0x4e,0x51,0x57,0x5b,0x5e,0x61,0x62,0x66,0x6d,0x73,
0x76,0x78,0x7c,0x80,0x84,0x87,0x8b,0x90,0x96,0x98,0x98,0x99,0x9a,0x9b,0x9c,0x9b,
0x99,0x97,0x94,0x8f,0x85,0x84,0x83,0x80,0x7c,0x78,0x74,0x71,0x6b,0x66,0x64,0x61,
0x5f,0x5c,0x54,0x4e,0x4b,0x4a,0x4c,0x4b,0x4a,0x49,0x49,0x4b,0x4a,0x4b,0x51,0x57,
0x5d,0x64,0x66,0x6b,0x6d,0x6f,0x70,0x72,0x71,0x71,0x6f,0x6f,0x6d,0x6d,0x6c,0x6c,
0x6d,0x6f,0x71,0x72,0x73,0x73,0x73,0x73,0x71,0x6f,0x70,0x72,0x73,0x72,0x72,0x70,
0x6e,0x6f,0x70,0x72,0x75,0x73,0x71,0x71,0x71,0x71,0x73,0x73,0x73,0x73,0x75,0x75,
0x71,0x72,0x72,0x72,0x72,0x70,0x6f,0x73,0x72,0x71,0x72,0x72,0x72,0x72,0x71,0x70,
0x70,0x72,0x72,0x71,0x70,0x6f,0x6f,0x6f,0x6f,0x70,0x71,0x70,0x70,0x6f,0x6d,0x6b,
0x69,0x64,0x5f,0x5b,0x58,0x56,0x54,0x55,0x5a,0x60,0x6a,0x73,0x7c,0x86,0x8f,0x94,
0x96,0x94,0x90,0x88,0x7d,0x71,0x68,0x5e,0x55,0x4f,0x49,0x46,0x44,0x48,0x4f,0x58,
0x63,0x6c,0x74,0x7f,0x88,0x90,0x96,0x98,0x94,0x8f,0x88,0x7f,0x71,0x65,0x5d,0x58,
0x53,0x4c,0x48,0x49,0x4c,0x51,0x58,0x60,0x6a,0x76,0x81,0x88,0x8d,0x91,0x94,0x91,
0x8b,0x83,0x79,0x6f,0x64,0x5a,0x51,0x4b,0x46,0x47,0x49,0x4e,0x53,0x5c,0x65,0x71,
0x7b,0x84,0x8b,0x92,0x94,0x94,0x8f,0x88,0x7f,0x7a,0x6f,0x63,0x58,0x50,0x4b,0x49,
0x47,0x48,0x4b,0x51,0x59,0x60,0x69,0x73,0x80,0x8b,0x91,0x91,0x90,0x8b,0x85,0x7d,
0x73,0x6a,0x61,0x59,0x51,0x4e,0x4c,0x4c,0x4d,0x51,0x57,0x5d,0x64,0x6e,0x76,0x83,
0x88,0x8d,0x91,0x91,0x8d,0x87,0x7f,0x73,0x6a,0x61,0x59,0x50,0x49,0x45,0x45,0x48,
0x4b,0x51,0x5d,0x68,0x6f,0x77,0x80,0x86,0x8a,0x89,0x88,0x86,0x83,0x7e,0x79,0x74,
0x70,0x6f,0x6f,0x6e,0x6e,0x6f,0x6f,0x6f,0x6f,0x6f,0x70,0x70,0x70,0x70,0x70,0x70,
0x70,0x6f,0x6d,0x6e,0x6e,0x6d,0x6b,0x6a,0x6a,0x6a,0x6a,0x6c,0x6c,0x6e,0x6f,0x70,
0x6e,0x6f,0x70,0x72,0x70,0x73,0x72,0x73,0x74,0x73,0x71,0x6f,0x6d,0x6e,0x6e,0x6f,
0x6f,0x70,0x6f,0x6d,0x6c,0x6d,0x70,0x71,0x71,0x71,0x71,0x72,0x70,0x6e,0x6e,0x6d,
0x6b,0x69,0x66,0x64,0x64,0x66,0x6b,0x73,0x7b,0x82,0x85,0x84,0x80,0x7a,0x70,0x66,
0x5d,0x58,0x55,0x55,0x5a,0x63,0x71,0x80,0x88,0x8a,0x88,0x84,0x7b,0x6e,0x60,0x58,
0x54,0x53,0x56,0x5c,0x68,0x77,0x83,0x8b,0x8b,0x86,0x7e,0x71,0x63,0x59,0x53,0x52,
0x54,0x5d,0x6a,0x78,0x84,0x89,0x87,0x88,0x7e,0x71,0x65,0x5b,0x53,0x51,0x51,0x55,
0x61,0x70,0x81,0x8c,0x8f,0x8a,0x83,0x7a,0x6e,0x60,0x57,0x51,0x4f,0x54,0x5d,0x6b,
0x7b,0x85,0x8b,0x8a,0x84,0x7b,0x70,0x66,0x5b,0x55,0x52,0x54,0x5a,0x69,0x78,0x83,
0x89,0x8a,0x84,0x7b,0x70,0x65,0x5c,0x54,0x51,0x52,0x58,0x64,0x73,0x83,0x8d,0x90,
0x8b,0x82,0x76,0x6b,0x63,0x5e,0x5b,0x59,0x59,0x5d,0x64,0x6c,0x72,0x77,0x79,0x78,
0x75,0x72,0x6f,0x6e,0x6c,0x6d,0x71,0x72,0x72,0x76,0x78,0x76,0x72,0x70,0x70,0x70,
0x6e,0x6d,0x6f,0x72,0x73,0x73,0x72,0x73,0x73,0x73,0x70,0x70,0x70,0x70,0x6e,0x6f,
0x6f,0x6f,0x70,0x6d,0x6d,0x6f,0x73,0x75,0x71,0x71,0x6e,0x6b,0x6b,0x6f,0x74,0x7b,
0x7c,0x7a,0x71,0x66,0x5e,0x5c,0x65,0x6f,0x79,0x80,0x7f,0x74,0x68,0x5f,0x5c,0x64,
0x6f,0x79,0x80,0x7c,0x71,0x66,0x5e,0x5c,0x61,0x6b,0x75,0x7c,0x7e,0x7a,0x70,0x66,
0x5f,0x60,0x69,0x73,0x7b,0x7f,0x7c,0x73,0x67,0x5c,0x58,0x5d,0x69,0x75,0x7e,0x80,
0x7a,0x6c,0x62,0x5c,0x5c,0x68,0x75,0x80,0x84,0x7f,0x73,0x68,0x5e,0x5c,0x5f,0x6b,
0x75,0x7b,0x7e,0x7b,0x73,0x68,0x61,0x60,0x68,0x73,0x7d,0x82,0x81,0x77,0x6b,0x5f,
0x5a,0x5d,0x67,0x75,0x7f,0x83,0x7e,0x72,0x64,0x5a,0x5a,0x63,0x6e,0x79,0x80,0x7d,
0x72,0x67,0x60,0x5f,0x64,0x6e,0x77,0x7b,0x78,0x71,0x6a,0x65,0x64,0x6b,0x75,0x7a,
0x7a,0x76,0x6f,0x6a,0x68,0x68,0x6c,0x72,0x75,0x75,0x73,0x70,0x6d,0x69,0x6a,0x6a,
0x6a,0x6f,0x72,0x73,0x72,0x70,0x6f,0x6e,0x6d,0x6e,0x70,0x71,0x70,0x6f,0x6f,0x6f,
0x6f,0x70,0x70,0x71,0x70,0x6e,0x6c,0x6f,0x71,0x71,0x73,0x73,0x73,0x71,0x71,0x6f,
0x6c,0x6d,0x6f,0x6d,0x70,0x6f,0x6f,0x6f,0x6b,0x69,0x6c,0x71,0x77,0x7b,0x77,0x70,
0x66,0x60,0x60,0x6b,0x7a,0x83,0x83,0x77,0x65,0x5a,0x5d,0x6a,0x7b,0x86,0x86,0x78,
0x64,0x54,0x57,0x69,0x7e,0x8b,0x8a,0x7b,0x64,0x51,0x51,0x61,0x7a,0x8a,0x88,0x75,
0x5f,0x50,0x52,0x66,0x7f,0x8f,0x8e,0x7d,0x64,0x51,0x53,0x66,0x7e,0x8d,0x8a,0x78,
0x62,0x54,0x54,0x6a,0x80,0x8e,0x8b,0x77,0x5f,0x51,0x53,0x64,0x7a,0x88,0x88,0x76,
0x5d,0x4e,0x51,0x66,0x7c,0x89,0x89,0x79,0x62,0x53,0x56,0x69,0x7f,0x8c,0x88,0x76,
0x5f,0x51,0x54,0x65,0x7b,0x88,0x89,0x7a,0x64,0x58,0x59,0x68,0x7b,0x86,0x85,0x79,
0x68,0x5a,0x59,0x64,0x73,0x7c,0x7c,0x73,0x68,0x62,0x61,0x68,0x70,0x76,0x76,0x72,
0x6d,0x6b,0x6c,0x6e,0x70,0x71,0x73,0x73,0x72,0x70,0x6f,0x6f,0x70,0x6f,0x6f,0x70,
0x71,0x71,0x71,0x6f,0x6c,0x6c,0x6e,0x6f,0x6f,0x70,0x71,0x71,0x70,0x70,0x71,0x74,
0x74,0x72,0x72,0x6f,0x6e,0x70,0x70,0x6f,0x70,0x70,0x6f,0x6f,0x6d,0x6c,0x6d,0x6e,
0x6f,0x70,0x73,0x72,0x70,0x6e,0x6b,0x6c,0x70,0x73,0x75,0x73,0x6e,0x68,0x65,0x68,
0x6e,0x75,0x78,0x73,0x6b,0x68,0x68,0x6c,0x75,0x7a,0x7b,0x75,0x6c,0x67,0x66,0x6d,
0x73,0x76,0x73,0x6b,0x62,0x60,0x66,0x6f,0x77,0x79,0x73,0x6b,0x67,0x6a,0x73,0x7b,
0x7b,0x75,0x6c,0x68,0x69,0x70,0x77,0x7a,0x73,0x6b,0x65,0x69,0x70,0x77,0x7a,0x75,
0x6c,0x66,0x68,0x70,0x7a,0x7c,0x76,0x6e,0x67,0x68,0x70,0x78,0x7a,0x75,0x6d,0x67,
0x67,0x6e,0x76,0x7a,0x75,0x6d,0x67,0x6a,0x71,0x7a,0x7c,0x77,0x6c,0x62,0x65,0x6f,
0x77,0x7c,0x76,0x69,0x62,0x62,0x6b,0x79,0x7f,0x78,0x6a,0x5f,0x5c,0x66,0x75,0x7f,
0x7d,0x71,0x62,0x5c,0x63,0x71,0x7a,0x7b,0x6f,0x63,0x5f,0x63,0x6d,0x76,0x7a,0x74,
0x6b,0x66,0x6a,0x73,0x79,0x7a,0x72,0x6b,0x66,0x68,0x6f,0x73,0x72,0x6f,0x6b,0x6a,
0x6b,0x71,0x76,0x78,0x73,0x6e,0x6a,0x6c,0x6f,0x71,0x70,0x6c,0x69,0x69,0x6a,0x6e,
0x71,0x72,0x70,0x6d,0x6c,0x6f,0x72,0x73,0x72,0x6f,0x6e,0x6b,0x6b,0x6f,0x70,0x70,
0x6e,0x6c,0x6d,0x70,0x71,0x72,0x73,0x71,0x6e,0x6f,0x71,0x74,0x75,0x74,0x71,0x70,
0x72,0x73,0x73,0x73,0x70,0x6d,0x6e,0x6f,0x70,0x70,0x70,0x6e,0x6d,0x6c,0x6c,0x6c,
0x70,0x6f,0x6c,0x6c,0x6c,0x6c,0x6c,0x6b,0x69,0x66,0x62,0x5d,0x57,0x50,0x4a,0x45,
0x40,0x3c,0x3b,0x3a,0x37,0x35,0x34,0x35,0x36,0x38,0x38,0x37,0x39,0x39,0x38,0x38,
// Line 21
0x3c,0x3b,0x39,0x38,0x38,0x37,0x35,0x35,0x36,0x35,0x34,0x36,0x36,0x38,0x3a,0x3c,
0x3c,0x3d,0x3c,0x3a,0x39,0x3a,0x39,0x37,0x34,0x33,0x36,0x36,0x36,0x35,0x36,0x36,
0x37,0x38,0x39,0x3a,0x3c,0x3a,0x39,0x38,0x38,0x3a,0x3c,0x3e,0x3d,0x3c,0x3e,0x3f,
0x3f,0x42,0x44,0x47,0x4b,0x4e,0x50,0x55,0x57,0x59,0x5c,0x5f,0x61,0x63,0x63,0x64,
0x65,0x65,0x66,0x65,0x65,0x66,0x66,0x66,0x63,0x61,0x60,0x5e,0x5b,0x59,0x57,0x57,
0x54,0x50,0x4c,0x49,0x47,0x47,0x46,0x45,0x43,0x40,0x3e,0x3d,0x3c,0x3d,0x3d,0x3d,
0x3e,0x3e,0x3d,0x3c,0x3b,0x3b,0x3e,0x43,0x46,0x47,0x49,0x49,0x48,0x49,0x4b,0x50,
0x58,0x5a,0x5b,0x5c,0x5d,0x60,0x62,0x65,0x64,0x66,0x68,0x69,0x67,0x67,0x68,0x68,
0x67,0x67,0x66,0x65,0x61,0x5f,0x5e,0x5c,0x57,0x55,0x53,0x50,0x4e,0x4c,0x4b,0x49,
0x46,0x43,0x3f,0x3f,0x3c,0x3b,0x3b,0x3c,0x3b,0x3b,0x3b,0x3c,0x3d,0x3e,0x40,0x43,
0x46,0x47,0x47,0x49,0x4a,0x4d,0x51,0x55,0x55,0x57,0x59,0x5a,0x5d,0x61,0x64,0x67,
0x67,0x66,0x67,0x68,0x6a,0x6a,0x69,0x67,0x66,0x65,0x63,0x61,0x60,0x5e,0x5b,0x59,
0x57,0x55,0x53,0x50,0x4d,0x4c,0x4c,0x4d,0x49,0x49,0x46,0x44,0x43,0x3f,0x3b,0x3e,
0x3d,0x3d,0x3c,0x3c,0x3e,0x40,0x42,0x41,0x42,0x45,0x47,0x47,0x49,0x47,0x49,0x4c,
0x4f,0x52,0x56,0x59,0x5a,0x5c,0x5d,0x60,0x62,0x65,0x66,0x68,0x67,0x68,0x68,0x68,
0x68,0x69,0x69,0x65,0x60,0x5d,0x5c,0x5d,0x5d,0x5a,0x59,0x57,0x53,0x4f,0x4d,0x4c,
0x4b,0x46,0x44,0x40,0x3b,0x3a,0x3a,0x38,0x3c,0x3c,0x3b,0x3b,0x3c,0x3d,0x3e,0x3f,
0x3f,0x41,0x43,0x46,0x46,0x47,0x49,0x4c,0x4e,0x50,0x53,0x57,0x59,0x5b,0x5d,0x5e,
0x61,0x64,0x65,0x66,0x68,0x69,0x6b,0x6c,0x6b,0x69,0x68,0x68,0x65,0x61,0x5e,0x5c,
0x5a,0x59,0x57,0x57,0x57,0x54,0x52,0x50,0x4f,0x4f,0x4c,0x49,0x46,0x45,0x44,0x42,
0x3f,0x3d,0x3d,0x3b,0x39,0x36,0x36,0x38,0x3b,0x3d,0x3f,0x41,0x45,0x48,0x4c,0x50,
0x54,0x59,0x5a,0x57,0x59,0x57,0x59,0x5d,0x5f,0x61,0x62,0x63,0x63,0x64,0x66,0x6c,
0x6d,0x6d,0x6b,0x69,0x68,0x65,0x62,0x60,0x5f,0x5d,0x5c,0x57,0x53,0x53,0x53,0x51,
0x4e,0x4c,0x4a,0x47,0x44,0x41,0x3f,0x40,0x40,0x3d,0x3b,0x3a,0x3a,0x3b,0x3b,0x3b,
0x3b,0x3c,0x3c,0x3d,0x3f,0x43,0x46,0x4c,0x4d,0x4f,0x51,0x53,0x55,0x57,0x5a,0x5c,
0x5e,0x5e,0x60,0x61,0x62,0x63,0x66,0x68,0x6a,0x69,0x68,0x66,0x64,0x65,0x65,0x63,
0x61,0x5e,0x5c,0x5a,0x57,0x54,0x51,0x4f,0x4c,0x4a,0x49,0x49,0x47,0x47,0x46,0x43,
0x42,0x3f,0x3d,0x3b,0x3a,0x39,0x3a,0x3a,0x3b,0x3c,0x3c,0x3b,0x39,0x39,0x3c,0x3d,
0x3d,0x3c,0x3c,0x3f,0x3e,0x3c,0x3e,0x3d,0x3d,0x3c,0x3a,0x37,0x36,0x38,0x39,0x38,
0x37,0x36,0x35,0x38,0x36,0x36,0x38,0x3a,0x39,0x3a,0x38,0x36,0x38,0x3a,0x3a,0x3a,
0x38,0x37,0x37,0x38,0x3a,0x3b,0x3d,0x3e,0x3c,0x3c,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,
0x38,0x36,0x36,0x36,0x35,0x36,0x36,0x36,0x37,0x38,0x39,0x3a,0x3c,0x3d,0x3d,0x3b,
0x3a,0x39,0x39,0x38,0x36,0x36,0x38,0x36,0x37,0x37,0x37,0x37,0x36,0x36,0x34,0x35,
0x37,0x38,0x3a,0x39,0x38,0x3e,0x44,0x49,0x50,0x55,0x59,0x5d,0x5f,0x62,0x66,0x6a,
0x6c,0x6b,0x69,0x67,0x66,0x67,0x67,0x68,0x67,0x66,0x65,0x65,0x65,0x66,0x68,0x6a,
0x6b,0x6a,0x69,0x68,0x68,0x6c,0x6d,0x6c,0x6b,0x68,0x67,0x69,0x68,0x69,0x6c,0x6c,
0x6b,0x69,0x66,0x65,0x65,0x67,0x67,0x66,0x68,0x69,0x68,0x68,0x66,0x63,0x61,0x5f,
0x5a,0x54,0x4d,0x46,0x3f,0x3b,0x39,0x38,0x38,0x36,0x36,0x38,0x3a,0x3c,0x3d,0x3d,
0x3e,0x3e,0x3b,0x37,0x35,0x34,0x36,0x3a,0x3a,0x38,0x36,0x39,0x3a,0x39,0x39,0x39,
0x39,0x3c,0x36,0x33,0x32,0x34,0x38,0x3a,0x3b,0x3a,0x3a,0x3c,0x3c,0x3b,0x3a,0x3a,
0x39,0x3a,0x38,0x36,0x36,0x35,0x37,0x38,0x38,0x36,0x37,0x37,0x37,0x38,0x3a,0x39,
0x36,0x36,0x34,0x32,0x32,0x34,0x36,0x39,0x36,0x33,0x36,0x38,0x3a,0x3a,0x3a,0x3a,
0x39,0x38,0x38,0x3a,0x3a,0x38,0x38,0x37,0x36,0x34,0x35,0x36,0x37,0x38,0x36,0x36,
0x36,0x36,0x37,0x38,0x37,0x36,0x36,0x37,0x36,0x36,0x37,0x38,0x38,0x38,0x39,0x3a,
0x3f,0x43,0x47,0x4c,0x52,0x57,0x5f,0x64,0x68,0x68,0x6a,0x69,0x69,0x69,0x69,0x67,
0x65,0x62,0x62,0x66,0x68,0x69,0x6b,0x6b,0x69,0x6a,0x69,0x68,0x68,0x68,0x68,0x67,
0x66,0x67,0x67,0x67,0x68,0x68,0x6b,0x6b,0x6b,0x6c,0x6c,0x6a,0x68,0x68,0x67,0x64,
0x65,0x63,0x63,0x63,0x64,0x62,0x62,0x61,0x5d,0x5c,0x5a,0x55,0x51,0x4c,0x47,0x45,
0x40,0x3c,0x3a,0x38,0x36,0x35,0x36,0x37,0x38,0x37,0x37,0x36,0x36,0x36,0x36,0x38,
0x39,0x3a,0x3b,0x3a,0x38,0x37,0x38,0x38,0x37,0x38,0x36,0x33,0x35,0x35,0x36,0x3a,
0x3b,0x3a,0x3a,0x3a,0x39,0x38,0x38,0x38,0x38,0x37,0x34,0x32,0x30,0x33,0x36,0x38,
0x3a,0x3b,0x40,0x45,0x49,0x4f,0x55,0x5b,0x60,0x63,0x65,0x66,0x66,0x66,0x66,0x66,
0x65,0x66,0x68,0x66,0x62,0x63,0x66,0x68,0x67,0x66,0x65,0x66,0x65,0x64,0x64,0x66,
0x67,0x66,0x66,0x66,0x66,0x66,0x66,0x67,0x69,0x6a,0x68,0x67,0x66,0x67,0x69,0x6b,
0x6b,0x6c,0x6c,0x6b,0x68,0x68,0x68,0x6a,0x69,0x65,0x5e,0x5b,0x57,0x53,0x4e,0x49,
0x45,0x43,0x3e,0x3a,0x37,0x38,0x38,0x37,0x36,0x37,0x38,0x3b,0x3a,0x39,0x3a,0x3a,
0x37,0x36,0x34,0x35,0x36,0x38,0x38,0x36,0x35,0x34,0x36,0x36,0x36,0x37,0x38,0x39,
0x36,0x38,0x3a,0x3b,0x3c,0x3b,0x3a,0x38,0x36,0x35,0x31,0x33,0x33,0x34,0x36,0x37,
0x36,0x37,0x35,0x33,0x35,0x36,0x36,0x36,0x34,0x31,0x30,0x30,0x32,0x34,0x38,0x39,
0x38,0x38,0x36,0x35,0x36,0x36,0x35,0x36,0x36,0x36,0x35,0x34,0x34,0x36,0x37,0x39,
0x3a,0x3c,0x3e,0x3c,0x3a,0x38,0x38,0x39,0x37,0x34,0x34,0x34,0x34,0x34,0x34,0x35,
0x38,0x3b,0x3d,0x3c,0x3d,0x3f,0x3f,0x3e,0x3a,0x38,0x37,0x37,0x39,0x3e,0x43,0x47,
0x4b,0x50,0x56,0x5c,0x61,0x65,0x65,0x68,0x67,0x67,0x69,0x69,0x68,0x68,0x69,0x66,
0x67,0x68,0x6b,0x6a,0x67,0x64,0x64,0x68,0x69,0x6a,0x6a,0x68,0x66,0x66,0x66,0x67,
0x6b,0x6c,0x69,0x68,0x67,0x67,0x6a,0x6c,0x6b,0x6b,0x6b,0x69,0x67,0x65,0x66,0x67,
0x69,0x68,0x66,0x64,0x60,0x5c,0x59,0x55,0x51,0x4c,0x45,0x40,0x3d,0x3c,0x3b,0x37,
0x38,0x36,0x36,0x36,0x36,0x36,0x39,0x39,0x37,0x36,0x36,0x38,0x38,0x38,0x38,0x3a,
0x3c,0x3c,0x3a,0x39,0x37,0x37,0x39,0x3a,0x3a,0x3b,0x3a,0x37,0x35,0x36,0x37,0x39,
0x3a,0x3a,0x3b,0x3b,0x3c,0x3a,0x3b,0x3c,0x3c,0x3e,0x3d,0x3a,0x3b,0x3d,0x3d,0x3e,
0x42,0x49,0x50,0x55,0x56,0x5a,0x5f,0x63,0x63,0x65,0x66,0x69,0x69,0x68,0x67,0x68,
0x68,0x66,0x67,0x67,0x67,0x68,0x68,0x68,0x69,0x6b,0x6c,0x6c,0x6c,0x6b,0x6c,0x6c,
0x6b,0x69,0x6c,0x6a,0x67,0x67,0x69,0x6c,0x6b,0x6a,0x68,0x68,0x66,0x65,0x65,0x66,
0x66,0x68,0x69,0x68,0x66,0x67,0x68,0x67,0x66,0x67,0x6a,0x6a,0x68,0x66,0x68,0x69,
0x68,0x67,0x66,0x66,0x65,0x65,0x66,0x66,0x66,0x65,0x65,0x68,0x68,0x69,0x6a,0x69,
0x68,0x67,0x68,0x69,0x68,0x68,0x69,0x69,0x69,0x69,0x6a,0x6c,0x6c,0x6c,0x6c,0x6b,
0x68,0x69,0x67,0x66,0x65,0x65,0x66,0x66,0x65,0x65,0x65,0x66,0x66,0x66,0x66,0x63,
0x5e,0x59,0x53,0x4e,0x4a,0x46,0x41,0x3d,0x3a,0x37,0x36,0x35,0x36,0x39,0x3d,0x3f,
0x3e,0x3c,0x3c,0x3c,0x3c,0x3a,0x39,0x37,0x35,0x33,0x34,0x34,0x34,0x35,0x37,0x38,
0x38,0x38,0x37,0x34,0x36,0x37,0x38,0x38,0x38,0x37,0x38,0x38,0x36,0x36,0x3a,0x3c,
0x38,0x36,0x34,0x35,0x37,0x3a,0x3b,0x3e,0x40,0x43,0x47,0x4b,0x4f,0x55,0x59,0x5a,
0x5c,0x5f,0x62,0x64,0x65,0x65,0x66,0x67,0x66,0x66,0x68,0x6a,0x6b,0x6b,0x68,0x68,
0x68,0x69,0x68,0x68,0x67,0x66,0x64,0x62,0x61,0x62,0x65,0x67,0x66,0x68,0x68,0x6a,
0x6c,0x6c,0x6d,0x6e,0x6c,0x69,0x68,0x65,0x63,0x63,0x62,0x62,0x62,0x65,0x67,0x67,
0x67,0x68,0x69,0x6a,0x69,0x68,0x68,0x66,0x64,0x64,0x66,0x68,0x68,0x67,0x66,0x66,
0x68,0x69,0x69,0x69,0x68,0x67,0x66,0x65,0x66,0x68,0x69,0x68,0x67,0x66,0x65,0x65,
0x66,0x65,0x66,0x68,0x69,0x6a,0x6b,0x6a,0x69,0x6a,0x6b,0x6b,0x6b,0x6a,0x68,0x67,
0x67,0x67,0x68,0x68,0x68,0x68,0x69,0x68,0x66,0x64,0x64,0x65,0x66,0x69,0x6b,0x6c,
0x6d,0x6c,0x6c,0x6c,0x6d,0x6c,0x6c,0x6b,0x68,0x68,0x67,0x67,0x67,0x67,0x67,0x69,
0x68,0x69,0x6a,0x6a,0x68,0x68,0x69,0x6a,0x6a,0x69,0x69,0x68,0x69,0x69,0x67,0x6a,
0x6b,0x6a,0x6c,0x6b,0x69,0x69,0x6a,0x6a,0x6c,0x6c,0x6c,0x6a,0x68,0x66,0x65,0x66,
0x65,0x62,0x5f,0x5d,0x58,0x54,0x4e,0x4a,0x47,0x46,0x42,0x3f,0x3c,0x3a,0x3a,0x3a,
0x38,0x37,0x3b,0x3c,0x3b,0x3a,0x38,0x38,0x3a,0x3b,0x3a,0x3a,0x39,0x37,0x36,0x35,
0x36,0x37,0x3a,0x3a,0x38,0x39,0x3a,0x38,0x3a,0x39,0x3a,0x3b,0x39,0x38,0x38,0x3a,
0x39,0x37,0x37,0x38,0x38,0x37,0x36,0x37,0x38,0x38,0x36,0x35,0x35,0x35,0x35,0x33,
0x31,0x30,0x32,0x32,0x32,0x33,0x36,0x38,0x38,0x37,0x35,0x35,0x34,0x33,0x34,0x34,
0x35,0x37,0x36,0x33,0x33,0x34,0x34,0x34,0x36,0x38,0x38,0x36,0x35,0x34,0x36,0x37,
//Field 9
// Line 10
0x34,0x34,0x35,0x37,0x35,0x36,0x37,0x39,0x3b,0x3c,0x3a,0x3b,0x3a,0x3b,0x3c,0x39,
0x37,0x38,0x37,0x35,0x35,0x36,0x37,0x38,0x37,0x36,0x37,0x39,0x3a,0x3b,0x3b,0x3a,
0x38,0x38,0x38,0x38,0x38,0x38,0x37,0x37,0x34,0x33,0x31,0x32,0x32,0x34,0x36,0x36,
0x36,0x38,0x38,0x36,0x37,0x37,0x37,0x39,0x39,0x38,0x36,0x35,0x35,0x36,0x37,0x38,
0x39,0x3b,0x3b,0x38,0x36,0x36,0x36,0x38,0x37,0x37,0x37,0x37,0x35,0x36,0x38,0x39,
0x38,0x37,0x36,0x36,0x37,0x39,0x39,0x3a,0x39,0x39,0x3b,0x3b,0x3b,0x3c,0x3c,0x3b,
0x39,0x38,0x37,0x35,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x35,0x37,0x3a,0x3a,0x38,
0x38,0x39,0x39,0x39,0x39,0x38,0x37,0x36,0x35,0x35,0x38,0x39,0x3a,0x3a,0x38,0x38,
0x3a,0x3c,0x3c,0x3e,0x3c,0x3b,0x38,0x36,0x35,0x36,0x38,0x37,0x37,0x39,0x37,0x36,
0x35,0x35,0x35,0x37,0x37,0x36,0x36,0x35,0x34,0x35,0x35,0x36,0x37,0x37,0x37,0x37,
0x38,0x38,0x37,0x37,0x37,0x38,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,0x3a,0x3a,0x38,0x36,
0x35,0x35,0x35,0x36,0x36,0x35,0x34,0x34,0x32,0x35,0x37,0x38,0x3a,0x3b,0x39,0x37,
0x37,0x39,0x3c,0x3b,0x39,0x39,0x38,0x37,0x36,0x37,0x37,0x38,0x39,0x38,0x37,0x39,
0x39,0x3a,0x3b,0x39,0x39,0x39,0x38,0x38,0x36,0x36,0x37,0x38,0x38,0x37,0x37,0x3a,
0x3a,0x39,0x3a,0x39,0x37,0x37,0x35,0x35,0x35,0x35,0x36,0x36,0x38,0x38,0x36,0x37,
0x36,0x38,0x3a,0x3a,0x3a,0x3b,0x39,0x37,0x36,0x37,0x37,0x37,0x37,0x37,0x37,0x37,
0x38,0x39,0x37,0x35,0x35,0x37,0x37,0x36,0x36,0x37,0x37,0x37,0x38,0x3c,0x3d,0x3e,
0x3a,0x3a,0x3a,0x38,0x36,0x38,0x37,0x35,0x35,0x34,0x34,0x36,0x37,0x38,0x39,0x39,
0x38,0x39,0x38,0x37,0x37,0x38,0x3a,0x3b,0x3a,0x38,0x36,0x37,0x37,0x38,0x39,0x3a,
0x38,0x3a,0x39,0x38,0x38,0x3b,0x3c,0x3c,0x3b,0x3b,0x39,0x39,0x36,0x35,0x37,0x37,
0x37,0x36,0x38,0x37,0x38,0x37,0x37,0x38,0x38,0x38,0x38,0x38,0x39,0x39,0x39,0x38,
0x38,0x39,0x38,0x38,0x3a,0x3c,0x3c,0x3d,0x3c,0x3b,0x3a,0x39,0x37,0x38,0x3a,0x3c,
0x3b,0x3a,0x38,0x36,0x36,0x37,0x37,0x3a,0x38,0x37,0x35,0x33,0x34,0x36,0x38,0x38,
0x39,0x39,0x39,0x37,0x37,0x38,0x38,0x39,0x37,0x37,0x35,0x34,0x33,0x36,0x38,0x39,
0x3a,0x39,0x36,0x35,0x37,0x3b,0x3b,0x3c,0x3a,0x38,0x37,0x36,0x36,0x37,0x37,0x38,
0x38,0x37,0x36,0x36,0x39,0x3b,0x3b,0x3a,0x3a,0x3a,0x39,0x38,0x37,0x39,0x3a,0x3a,
0x39,0x39,0x38,0x38,0x38,0x3a,0x3a,0x3b,0x38,0x37,0x37,0x37,0x38,0x38,0x38,0x38,
0x3b,0x3c,0x3b,0x39,0x3a,0x3b,0x3c,0x3a,0x38,0x36,0x38,0x37,0x36,0x37,0x39,0x3b,
0x3c,0x3c,0x3c,0x3d,0x3c,0x3b,0x39,0x36,0x34,0x34,0x33,0x33,0x33,0x33,0x33,0x36,
0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3b,0x3a,0x37,0x35,0x34,0x35,0x36,0x38,
0x39,0x39,0x37,0x36,0x37,0x39,0x3c,0x3b,0x39,0x3b,0x3a,0x38,0x38,0x37,0x38,0x3b,
0x3a,0x39,0x37,0x39,0x39,0x3a,0x3a,0x3b,0x3b,0x3b,0x3a,0x39,0x39,0x39,0x39,0x37,
0x36,0x36,0x37,0x36,0x34,0x34,0x36,0x37,0x38,0x3a,0x3c,0x3e,0x3e,0x3d,0x3c,0x3c,
0x3d,0x3c,0x3b,0x38,0x36,0x37,0x37,0x37,0x36,0x36,0x35,0x34,0x36,0x38,0x38,0x3a,
0x3a,0x3b,0x3c,0x3b,0x3a,0x3b,0x39,0x39,0x38,0x38,0x37,0x37,0x36,0x37,0x37,0x37,
0x38,0x39,0x39,0x39,0x38,0x39,0x3a,0x3b,0x3c,0x3b,0x39,0x39,0x3a,0x3a,0x3a,0x3a,
0x38,0x37,0x37,0x36,0x35,0x37,0x38,0x38,0x39,0x3a,0x39,0x3a,0x38,0x3a,0x3b,0x3a,
0x37,0x36,0x35,0x35,0x35,0x35,0x35,0x34,0x34,0x34,0x33,0x35,0x37,0x39,0x3b,0x3a,
0x37,0x38,0x38,0x39,0x3a,0x39,0x37,0x36,0x34,0x35,0x34,0x38,0x38,0x3b,0x3c,0x3b,
0x39,0x38,0x38,0x38,0x39,0x38,0x37,0x35,0x36,0x37,0x38,0x38,0x3a,0x3a,0x3c,0x39,
0x36,0x37,0x39,0x3a,0x3a,0x37,0x34,0x34,0x35,0x36,0x35,0x35,0x36,0x39,0x3a,0x38,
0x37,0x39,0x3b,0x3c,0x3c,0x3b,0x3a,0x3b,0x3a,0x39,0x38,0x37,0x36,0x34,0x37,0x35,
0x35,0x36,0x37,0x36,0x37,0x35,0x33,0x34,0x36,0x38,0x38,0x36,0x36,0x37,0x37,0x37,
0x36,0x38,0x39,0x38,0x36,0x35,0x34,0x34,0x34,0x35,0x36,0x35,0x37,0x38,0x37,0x36,
0x38,0x38,0x37,0x35,0x34,0x36,0x37,0x37,0x36,0x38,0x3c,0x3a,0x38,0x3b,0x3d,0x3e,
0x3f,0x3d,0x38,0x38,0x38,0x38,0x36,0x35,0x33,0x33,0x33,0x33,0x33,0x36,0x37,0x38,
0x3a,0x3b,0x3b,0x3b,0x39,0x39,0x3b,0x3c,0x3b,0x38,0x37,0x36,0x37,0x37,0x37,0x37,
0x38,0x39,0x36,0x35,0x34,0x36,0x38,0x37,0x35,0x36,0x37,0x38,0x36,0x37,0x37,0x37,
0x36,0x35,0x34,0x37,0x37,0x37,0x37,0x36,0x37,0x38,0x39,0x39,0x3c,0x3d,0x3c,0x3a,
0x39,0x38,0x38,0x38,0x37,0x37,0x36,0x35,0x34,0x36,0x38,0x39,0x3b,0x3b,0x39,0x39,
0x38,0x38,0x37,0x39,0x39,0x3c,0x3c,0x3b,0x38,0x39,0x3a,0x38,0x37,0x37,0x37,0x38,
0x35,0x33,0x34,0x36,0x37,0x38,0x37,0x35,0x34,0x36,0x37,0x38,0x39,0x3b,0x39,0x39,
0x38,0x39,0x3a,0x3a,0x39,0x3a,0x39,0x3a,0x3b,0x3b,0x3a,0x39,0x38,0x36,0x34,0x35,
0x35,0x34,0x35,0x34,0x34,0x36,0x36,0x37,0x3a,0x3c,0x3d,0x3b,0x38,0x35,0x35,0x35,
0x36,0x38,0x3a,0x39,0x36,0x35,0x35,0x38,0x3b,0x3b,0x38,0x39,0x39,0x3b,0x3a,0x3a,
0x39,0x3a,0x39,0x38,0x37,0x38,0x3a,0x38,0x37,0x36,0x35,0x37,0x37,0x37,0x38,0x39,
0x39,0x38,0x37,0x37,0x38,0x3a,0x38,0x36,0x36,0x35,0x34,0x34,0x34,0x34,0x35,0x35,
0x34,0x35,0x36,0x37,0x37,0x37,0x37,0x37,0x37,0x38,0x38,0x38,0x37,0x37,0x37,0x37,
0x37,0x38,0x38,0x36,0x34,0x35,0x37,0x38,0x39,0x39,0x3a,0x3a,0x39,0x38,0x37,0x38,
0x3a,0x3c,0x3b,0x3a,0x39,0x37,0x34,0x33,0x34,0x36,0x35,0x32,0x30,0x31,0x33,0x35,
0x35,0x37,0x39,0x39,0x38,0x38,0x37,0x37,0x38,0x37,0x38,0x38,0x38,0x37,0x36,0x37,
0x38,0x3a,0x3b,0x3a,0x3b,0x39,0x37,0x37,0x36,0x37,0x38,0x38,0x35,0x36,0x36,0x36,
0x36,0x35,0x36,0x36,0x36,0x36,0x35,0x35,0x34,0x35,0x35,0x36,0x37,0x38,0x3a,0x39,
0x3a,0x3b,0x39,0x39,0x37,0x37,0x37,0x39,0x39,0x38,0x38,0x36,0x35,0x36,0x35,0x35,
0x36,0x37,0x37,0x38,0x38,0x39,0x3a,0x39,0x38,0x3a,0x3c,0x3c,0x37,0x37,0x36,0x37,
0x38,0x38,0x37,0x37,0x35,0x33,0x32,0x33,0x34,0x37,0x36,0x35,0x34,0x35,0x37,0x39,
0x3b,0x3c,0x3c,0x3b,0x39,0x36,0x35,0x35,0x35,0x37,0x37,0x37,0x36,0x35,0x34,0x34,
0x35,0x37,0x37,0x39,0x39,0x3a,0x3b,0x39,0x38,0x3a,0x39,0x37,0x38,0x38,0x38,0x37,
0x35,0x34,0x34,0x35,0x38,0x39,0x39,0x38,0x39,0x3b,0x3b,0x3a,0x39,0x3a,0x39,0x38,
0x36,0x35,0x35,0x35,0x35,0x37,0x37,0x39,0x38,0x36,0x34,0x34,0x35,0x36,0x35,0x34,
0x34,0x31,0x33,0x34,0x36,0x38,0x39,0x37,0x36,0x36,0x36,0x36,0x37,0x38,0x39,0x38,
0x36,0x36,0x37,0x38,0x38,0x38,0x37,0x38,0x39,0x38,0x36,0x36,0x38,0x39,0x38,0x37,
0x36,0x37,0x37,0x35,0x34,0x34,0x34,0x36,0x38,0x38,0x38,0x3b,0x39,0x38,0x38,0x39,
0x3b,0x39,0x39,0x37,0x36,0x37,0x38,0x37,0x3a,0x38,0x38,0x38,0x36,0x36,0x36,0x36,
0x35,0x35,0x35,0x38,0x37,0x36,0x36,0x37,0x38,0x38,0x37,0x37,0x37,0x37,0x37,0x36,
0x38,0x3a,0x39,0x38,0x38,0x38,0x39,0x38,0x37,0x37,0x38,0x38,0x36,0x34,0x37,0x3a,
0x3b,0x3b,0x37,0x36,0x36,0x34,0x30,0x32,0x34,0x37,0x37,0x36,0x35,0x37,0x39,0x3b,
0x3b,0x3b,0x38,0x36,0x37,0x36,0x34,0x35,0x37,0x38,0x38,0x37,0x37,0x39,0x39,0x37,
0x36,0x37,0x38,0x38,0x38,0x38,0x39,0x3c,0x3b,0x3b,0x3b,0x3a,0x37,0x37,0x37,0x37,
0x33,0x35,0x34,0x33,0x33,0x34,0x34,0x38,0x38,0x39,0x3a,0x39,0x38,0x38,0x36,0x35,
0x36,0x37,0x37,0x36,0x34,0x33,0x34,0x37,0x38,0x38,0x39,0x39,0x38,0x3a,0x39,0x3a,
0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,0x3a,0x38,0x34,0x33,0x34,0x33,0x34,0x36,0x36,0x36,
0x37,0x38,0x37,0x38,0x39,0x39,0x38,0x36,0x35,0x35,0x35,0x35,0x37,0x3a,0x3b,0x3b,
0x39,0x39,0x39,0x3a,0x3b,0x3b,0x3a,0x39,0x37,0x38,0x38,0x38,0x36,0x34,0x34,0x35,
0x37,0x37,0x37,0x37,0x36,0x37,0x38,0x38,0x39,0x3a,0x38,0x37,0x35,0x36,0x37,0x37,
0x39,0x3a,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x39,0x39,0x39,0x39,0x38,0x37,0x36,
0x36,0x38,0x38,0x39,0x38,0x38,0x38,0x38,0x37,0x38,0x38,0x39,0x3a,0x3a,0x39,0x3a,
0x39,0x38,0x38,0x38,0x3a,0x3b,0x3b,0x39,0x36,0x37,0x36,0x36,0x37,0x38,0x38,0x38,
0x38,0x37,0x38,0x38,0x39,0x39,0x3a,0x39,0x38,0x36,0x35,0x34,0x35,0x36,0x36,0x37,
0x36,0x36,0x38,0x38,0x39,0x3b,0x3b,0x3a,0x37,0x36,0x36,0x34,0x36,0x35,0x36,0x37,
0x37,0x37,0x37,0x37,0x38,0x3b,0x3a,0x38,0x36,0x35,0x32,0x32,0x34,0x37,0x38,0x38,
0x35,0x34,0x36,0x37,0x37,0x36,0x35,0x34,0x34,0x33,0x33,0x34,0x37,0x38,0x38,0x38,
0x38,0x35,0x36,0x34,0x34,0x35,0x35,0x34,0x35,0x34,0x34,0x36,0x36,0x37,0x38,0x39,
0x39,0x3a,0x38,0x38,0x37,0x36,0x34,0x33,0x35,0x37,0x37,0x36,0x34,0x34,0x35,0x36,
0x36,0x36,0x35,0x35,0x36,0x35,0x35,0x35,0x36,0x37,0x37,0x38,0x37,0x39,0x38,0x36,
0x34,0x35,0x35,0x35,0x35,0x37,0x37,0x38,0x37,0x36,0x34,0x34,0x33,0x34,0x34,0x32,
// Line 11
0x3c,0x3d,0x3c,0x37,0x34,0x36,0x3a,0x3a,0x39,0x37,0x35,0x35,0x35,0x35,0x35,0x36,
0x36,0x35,0x35,0x34,0x35,0x38,0x3a,0x39,0x39,0x39,0x3a,0x39,0x37,0x36,0x35,0x35,
0x35,0x35,0x35,0x35,0x35,0x38,0x39,0x3a,0x3b,0x3b,0x3a,0x38,0x36,0x36,0x36,0x39,
0x38,0x36,0x32,0x2f,0x2e,0x38,0x48,0x5b,0x6d,0x79,0x7a,0x75,0x68,0x5c,0x55,0x58,
0x62,0x6d,0x71,0x72,0x6e,0x69,0x61,0x5b,0x5c,0x61,0x6b,0x73,0x76,0x75,0x71,0x6a,
0x62,0x5e,0x5d,0x61,0x68,0x6f,0x72,0x72,0x6d,0x66,0x5c,0x5c,0x5c,0x63,0x6e,0x76,
0x78,0x76,0x6f,0x66,0x61,0x5e,0x61,0x66,0x6c,0x71,0x73,0x70,0x6b,0x64,0x5e,0x5a,
0x5c,0x63,0x6c,0x73,0x74,0x70,0x6b,0x65,0x60,0x5f,0x60,0x65,0x6c,0x74,0x78,0x77,
0x71,0x6b,0x63,0x5e,0x5d,0x61,0x65,0x6c,0x6d,0x6d,0x70,0x76,0x80,0x8f,0x9c,0xa4,
0xa9,0xa7,0x9d,0x8c,0x7b,0x6c,0x61,0x59,0x54,0x51,0x4d,0x44,0x3a,0x35,0x3a,0x46,
0x56,0x68,0x76,0x82,0x88,0x8e,0x91,0x94,0x98,0x9c,0x9c,0x99,0x95,0x96,0x98,0x9a,
0x9a,0x94,0x87,0x78,0x67,0x5c,0x55,0x4f,0x46,0x3b,0x33,0x31,0x39,0x4d,0x65,0x77,
0x81,0x7f,0x75,0x68,0x5e,0x59,0x54,0x4a,0x3d,0x33,0x2c,0x2f,0x3e,0x56,0x6e,0x80,
0x83,0x7c,0x6f,0x63,0x56,0x4e,0x49,0x46,0x3f,0x39,0x33,0x2f,0x2e,0x33,0x3b,0x44,
0x55,0x64,0x6e,0x75,0x73,0x6b,0x66,0x5f,0x59,0x56,0x50,0x48,0x3d,0x38,0x36,0x42,
0x54,0x6a,0x7c,0x89,0x8f,0x93,0x94,0x92,0x8b,0x80,0x6f,0x5e,0x54,0x56,0x60,0x6f,
0x7a,0x7d,0x77,0x6e,0x65,0x61,0x60,0x5d,0x52,0x42,0x30,0x25,0x2d,0x42,0x5b,0x72,
0x7e,0x7d,0x75,0x66,0x5b,0x58,0x57,0x51,0x42,0x35,0x2d,0x32,0x44,0x5d,0x72,0x7f,
0x80,0x75,0x67,0x5b,0x56,0x55,0x50,0x44,0x38,0x32,0x35,0x43,0x58,0x70,0x80,0x83,
0x77,0x66,0x58,0x4f,0x4c,0x4c,0x49,0x40,0x38,0x30,0x2d,0x33,0x3c,0x46,0x46,0x44,
0x3d,0x39,0x37,0x38,0x3a,0x3d,0x3d,0x3a,0x38,0x37,0x38,0x3b,0x3a,0x39,0x38,0x37,
0x38,0x38,0x39,0x3b,0x3d,0x3d,0x3b,0x38,0x38,0x38,0x39,0x3a,0x3a,0x3a,0x38,0x33,
0x32,0x39,0x48,0x5a,0x6b,0x77,0x7a,0x75,0x6a,0x60,0x5a,0x5b,0x63,0x6b,0x74,0x78,
0x7b,0x82,0x8c,0x98,0xa5,0xaf,0xb0,0xab,0xa1,0x99,0x93,0x94,0x98,0x9c,0x9f,0xa1,
0xa1,0xa1,0x9e,0x9e,0x9e,0x9e,0x9b,0x98,0x93,0x8a,0x79,0x6c,0x5e,0x52,0x4a,0x43,
0x3e,0x3b,0x38,0x33,0x33,0x36,0x3b,0x40,0x40,0x3e,0x3c,0x3a,0x39,0x36,0x3a,0x3a,
0x3a,0x3b,0x3a,0x39,0x3c,0x3b,0x3d,0x3f,0x3c,0x3a,0x3b,0x3c,0x3f,0x47,0x55,0x66,
0x75,0x83,0x8c,0x92,0x98,0x9c,0xa0,0xa4,0xa6,0xa2,0x97,0x85,0x73,0x67,0x5e,0x58,
0x53,0x4e,0x46,0x3d,0x37,0x3b,0x4a,0x5f,0x73,0x80,0x84,0x79,0x6c,0x62,0x5d,0x5f,
0x65,0x6c,0x6f,0x72,0x76,0x7f,0x88,0x94,0x9e,0xa6,0xa9,0xa5,0x9e,0x99,0x98,0x97,
0x98,0x97,0x92,0x89,0x7a,0x6a,0x5b,0x4e,0x48,0x43,0x3e,0x39,0x36,0x36,0x37,0x38,
0x3a,0x3c,0x3d,0x3c,0x38,0x36,0x35,0x37,0x39,0x3d,0x3e,0x3d,0x39,0x36,0x35,0x37,
0x3b,0x3d,0x3a,0x38,0x34,0x33,0x3c,0x4b,0x5e,0x75,0x80,0x7f,0x76,0x6a,0x63,0x5e,
0x62,0x69,0x6f,0x75,0x77,0x7d,0x84,0x8e,0x98,0xa0,0x9d,0x8f,0x79,0x63,0x52,0x4f,
0x56,0x66,0x74,0x7f,0x80,0x7b,0x71,0x66,0x5e,0x5e,0x63,0x6b,0x72,0x73,0x6f,0x67,
0x5e,0x59,0x5d,0x65,0x6f,0x79,0x7d,0x77,0x6f,0x69,0x63,0x61,0x60,0x5e,0x56,0x4b,
0x3d,0x32,0x2b,0x29,0x2b,0x32,0x3b,0x44,0x4c,0x57,0x60,0x6d,0x7c,0x89,0x91,0x96,
0x96,0x90,0x84,0x72,0x5c,0x4e,0x43,0x3c,0x38,0x36,0x36,0x35,0x39,0x3c,0x40,0x44,
0x45,0x40,0x38,0x30,0x2f,0x39,0x4a,0x5e,0x6d,0x75,0x74,0x6f,0x68,0x61,0x59,0x52,
0x4b,0x46,0x40,0x39,0x33,0x32,0x33,0x36,0x3d,0x48,0x57,0x68,0x76,0x7b,0x78,0x6f,
0x65,0x5c,0x57,0x51,0x4d,0x49,0x41,0x35,0x2f,0x2a,0x2d,0x38,0x41,0x48,0x4f,0x57,
0x61,0x6f,0x7c,0x89,0x93,0x9a,0x9a,0x95,0x89,0x7a,0x6a,0x5b,0x4e,0x44,0x3e,0x3a,
0x3a,0x3f,0x47,0x52,0x62,0x74,0x83,0x8e,0x91,0x91,0x94,0x9a,0xa0,0xa2,0x9e,0x96,
0x86,0x75,0x62,0x52,0x4d,0x47,0x44,0x41,0x3c,0x39,0x35,0x36,0x35,0x37,0x3d,0x48,
0x51,0x5d,0x65,0x6f,0x7b,0x86,0x8d,0x93,0x94,0x90,0x84,0x70,0x5e,0x54,0x52,0x5b,
0x68,0x77,0x7f,0x7e,0x77,0x6d,0x65,0x61,0x5c,0x55,0x4c,0x41,0x35,0x2e,0x2a,0x2c,
0x33,0x3c,0x44,0x4c,0x57,0x63,0x6d,0x79,0x83,0x8e,0x98,0x9b,0x95,0x8a,0x78,0x67,
0x5a,0x55,0x5c,0x69,0x76,0x7d,0x7d,0x76,0x6c,0x62,0x5c,0x5c,0x5f,0x67,0x6d,0x72,
0x78,0x82,0x8c,0x99,0xa3,0xaa,0xac,0xa9,0x9e,0x90,0x7d,0x6c,0x5f,0x58,0x52,0x4d,
0x49,0x40,0x36,0x31,0x36,0x48,0x5e,0x73,0x82,0x83,0x78,0x67,0x57,0x4f,0x4d,0x4c,
0x48,0x3f,0x35,0x2f,0x2f,0x32,0x39,0x42,0x47,0x47,0x41,0x3c,0x37,0x3a,0x3b,0x3c,
0x3d,0x3f,0x3f,0x40,0x3d,0x37,0x39,0x3f,0x48,0x55,0x63,0x72,0x80,0x8b,0x90,0x8f,
0x8f,0x88,0x7e,0x72,0x64,0x56,0x4d,0x44,0x3c,0x3a,0x3a,0x40,0x4c,0x5b,0x69,0x78,
0x82,0x89,0x8c,0x90,0x94,0x9a,0x9e,0xa0,0xa0,0x9e,0x9b,0x9a,0x9c,0xa1,0xa4,0xa3,
0x9f,0x9e,0x9e,0x9d,0x9e,0x9f,0x9e,0x9b,0x99,0x9c,0x9f,0xa1,0xa0,0x97,0x86,0x76,
0x66,0x5d,0x57,0x52,0x4a,0x3f,0x35,0x31,0x36,0x4b,0x63,0x76,0x7f,0x7d,0x71,0x65,
0x5c,0x59,0x58,0x52,0x46,0x3a,0x31,0x33,0x43,0x5b,0x73,0x82,0x85,0x7b,0x6c,0x5d,
0x53,0x4f,0x4c,0x46,0x3e,0x37,0x32,0x2f,0x2f,0x34,0x3c,0x48,0x53,0x61,0x6d,0x79,
0x7b,0x77,0x6f,0x65,0x5e,0x60,0x65,0x6a,0x71,0x77,0x7a,0x7e,0x84,0x8f,0x9e,0xa9,
0xac,0xa8,0x9e,0x8f,0x80,0x71,0x66,0x60,0x5c,0x56,0x4c,0x43,0x3b,0x38,0x3d,0x4a,
0x5c,0x70,0x7e,0x82,0x7a,0x6c,0x5e,0x56,0x58,0x5e,0x66,0x71,0x75,0x79,0x7f,0x88,
0x94,0xa1,0xa8,0xaa,0xa6,0x9e,0x91,0x80,0x74,0x68,0x5d,0x55,0x4d,0x48,0x41,0x3a,
0x35,0x38,0x40,0x50,0x65,0x77,0x85,0x90,0x95,0x98,0x99,0x9b,0x9e,0xa0,0x9f,0x98,
0x8b,0x7b,0x69,0x5c,0x55,0x57,0x60,0x6c,0x77,0x7e,0x7e,0x75,0x67,0x5c,0x5c,0x61,
0x69,0x73,0x78,0x75,0x6f,0x66,0x5e,0x5f,0x5f,0x5d,0x54,0x46,0x38,0x2f,0x31,0x3d,
0x50,0x67,0x7d,0x8d,0x97,0x9a,0x98,0x92,0x87,0x7a,0x6d,0x62,0x58,0x4f,0x43,0x3a,
0x33,0x33,0x3a,0x49,0x5d,0x71,0x7e,0x80,0x78,0x69,0x5e,0x52,0x4a,0x48,0x43,0x3c,
0x34,0x2d,0x2b,0x2f,0x37,0x3f,0x43,0x43,0x40,0x3a,0x34,0x30,0x31,0x35,0x39,0x3c,
0x3f,0x40,0x3d,0x3a,0x37,0x3c,0x49,0x5d,0x70,0x7c,0x7e,0x78,0x6e,0x63,0x5d,0x5c,
0x62,0x69,0x6f,0x74,0x78,0x7f,0x8b,0x96,0xa1,0xab,0xad,0xa9,0xa2,0x9b,0x98,0x96,
0x98,0x9b,0x9c,0x9f,0x9f,0x9e,0x9c,0x94,0x89,0x7c,0x6c,0x5e,0x56,0x57,0x5f,0x6b,
0x77,0x7e,0x7d,0x76,0x6a,0x61,0x5f,0x62,0x68,0x6f,0x73,0x71,0x6c,0x63,0x5b,0x5b,
0x5c,0x5c,0x54,0x4b,0x3e,0x34,0x2d,0x2c,0x31,0x3c,0x43,0x45,0x46,0x41,0x3b,0x38,
0x35,0x36,0x3a,0x3e,0x3e,0x3a,0x39,0x37,0x35,0x37,0x3d,0x45,0x55,0x65,0x71,0x80,
0x8c,0x98,0x9d,0x9b,0x92,0x85,0x74,0x65,0x5a,0x58,0x5c,0x63,0x6c,0x77,0x82,0x8c,
0x94,0x9a,0x9c,0x97,0x89,0x75,0x61,0x55,0x52,0x57,0x60,0x6d,0x79,0x84,0x8e,0x96,
0x9a,0x99,0x93,0x86,0x75,0x64,0x56,0x4d,0x4a,0x43,0x3c,0x39,0x3b,0x46,0x57,0x69,
0x79,0x85,0x8c,0x8f,0x91,0x96,0x9e,0xa5,0xa9,0xa4,0x95,0x83,0x70,0x63,0x5c,0x56,
0x52,0x4b,0x40,0x38,0x35,0x3c,0x4a,0x5e,0x71,0x7f,0x81,0x7a,0x6d,0x60,0x58,0x57,
0x5d,0x67,0x71,0x78,0x7c,0x81,0x89,0x94,0x9f,0xa9,0xad,0xa9,0x9e,0x91,0x82,0x74,
0x69,0x62,0x59,0x50,0x48,0x41,0x3d,0x37,0x3c,0x46,0x55,0x69,0x7b,0x89,0x95,0x9a,
0x98,0x94,0x8a,0x80,0x76,0x67,0x55,0x4a,0x40,0x3a,0x34,0x38,0x3e,0x4a,0x57,0x68,
0x78,0x88,0x93,0x98,0x98,0x93,0x8a,0x81,0x73,0x64,0x55,0x48,0x3d,0x36,0x34,0x37,
0x40,0x4d,0x5a,0x67,0x75,0x82,0x8e,0x98,0x9a,0x99,0x92,0x85,0x75,0x67,0x5d,0x58,
0x59,0x5e,0x69,0x76,0x83,0x8e,0x93,0x9e,0xa0,0xa1,0xa3,0xa2,0x9c,0x93,0x85,0x74,
0x65,0x5a,0x55,0x58,0x60,0x6b,0x74,0x7a,0x77,0x71,0x69,0x63,0x5e,0x5b,0x53,0x49,
0x3e,0x34,0x30,0x39,0x4d,0x67,0x7f,0x8e,0x94,0x98,0x99,0x98,0x92,0x89,0x7a,0x69,
0x5b,0x55,0x59,0x67,0x76,0x7e,0x7d,0x75,0x69,0x5e,0x5e,0x61,0x6a,0x74,0x79,0x76,
0x75,0x6d,0x65,0x63,0x63,0x66,0x6b,0x6f,0x6f,0x73,0x78,0x81,0x8c,0x96,0x9b,0x9a,
0x8f,0x7e,0x68,0x54,0x47,0x40,0x3c,0x3a,0x3c,0x43,0x4b,0x57,0x65,0x76,0x83,0x8e,
0x92,0x94,0x93,0x8e,0x83,0x74,0x67,0x57,0x49,0x40,0x3a,0x36,0x39,0x3d,0x44,0x52,
0x64,0x75,0x83,0x8c,0x90,0x93,0x97,0x9c,0xa0,0xa4,0xa3,0x9c,0x8f,0x80,0x70,0x64,
0x5d,0x5d,0x65,0x6f,0x7a,0x7f,0x7c,0x71,0x65,0x5c,0x5a,0x5e,0x6a,0x73,0x77,0x76,
0x6d,0x64,0x60,0x5e,0x5d,0x5e,0x58,0x4d,0x40,0x32,0x2b,0x2b,0x33,0x3d,0x43,0x46,
0x45,0x42,0x3e,0x38,0x34,0x36,0x3a,0x3c,0x3d,0x3c,0x3c,0x3b,0x38,0x35,0x36,0x39,
0x3d,0x3f,0x3f,0x3e,0x3c,0x3b,0x3a,0x38,0x38,0x3a,0x39,0x39,0x39,0x38,0x36,0x38,
// Line 12
0x36,0x35,0x35,0x38,0x3a,0x3a,0x38,0x34,0x33,0x37,0x39,0x39,0x38,0x37,0x37,0x38,
0x39,0x3a,0x39,0x39,0x39,0x3a,0x39,0x38,0x38,0x3a,0x39,0x38,0x38,0x3a,0x3a,0x3a,
0x38,0x37,0x37,0x37,0x38,0x39,0x3a,0x3a,0x3a,0x39,0x39,0x37,0x35,0x33,0x34,0x36,
0x37,0x36,0x34,0x32,0x33,0x3a,0x48,0x59,0x6a,0x79,0x7c,0x77,0x6b,0x5e,0x57,0x5b,
0x62,0x6b,0x75,0x79,0x74,0x6c,0x61,0x5a,0x5c,0x62,0x6b,0x71,0x75,0x74,0x6f,0x67,
0x5f,0x5c,0x5c,0x62,0x6b,0x74,0x79,0x76,0x6e,0x66,0x5e,0x5c,0x5d,0x65,0x6e,0x73,
0x75,0x73,0x6e,0x69,0x62,0x5e,0x5e,0x61,0x6a,0x72,0x75,0x75,0x6c,0x62,0x5d,0x5a,
0x5d,0x64,0x6e,0x75,0x77,0x74,0x6c,0x65,0x5e,0x5b,0x5d,0x66,0x6f,0x76,0x79,0x78,
0x72,0x6c,0x65,0x61,0x62,0x66,0x69,0x6b,0x6d,0x6e,0x71,0x77,0x81,0x8d,0x9b,0xa8,
0xad,0xa9,0xa0,0x8f,0x7e,0x6f,0x63,0x5b,0x58,0x54,0x4e,0x45,0x3c,0x32,0x38,0x44,
0x56,0x6c,0x7e,0x89,0x8e,0x91,0x94,0x99,0x9d,0xa0,0x9e,0x9b,0x97,0x97,0x98,0x9b,
0x9a,0x94,0x86,0x75,0x67,0x5e,0x57,0x4e,0x44,0x3a,0x34,0x32,0x3a,0x4d,0x63,0x76,
0x7f,0x7c,0x70,0x62,0x5b,0x54,0x4e,0x4a,0x42,0x37,0x30,0x30,0x3f,0x58,0x70,0x80,
0x82,0x7b,0x6b,0x5c,0x4f,0x49,0x46,0x44,0x3e,0x37,0x31,0x2e,0x2e,0x32,0x3a,0x47,
0x57,0x65,0x6f,0x74,0x72,0x6c,0x65,0x5e,0x59,0x54,0x4e,0x44,0x3b,0x36,0x35,0x3f,
0x54,0x6b,0x7e,0x8c,0x94,0x98,0x98,0x96,0x8e,0x83,0x72,0x63,0x59,0x59,0x62,0x70,
0x7a,0x7e,0x79,0x6e,0x64,0x5f,0x60,0x5d,0x53,0x43,0x31,0x28,0x2e,0x42,0x5d,0x74,
0x81,0x7f,0x72,0x64,0x5a,0x57,0x55,0x4e,0x42,0x39,0x30,0x30,0x3c,0x56,0x71,0x83,
0x85,0x78,0x61,0x54,0x50,0x58,0x67,0x74,0x7b,0x7b,0x72,0x66,0x61,0x65,0x67,0x64,
0x58,0x46,0x34,0x2a,0x2e,0x3f,0x59,0x70,0x7c,0x7f,0x78,0x6c,0x62,0x5a,0x55,0x50,
0x49,0x3f,0x38,0x3c,0x4b,0x62,0x76,0x81,0x81,0x79,0x6b,0x5d,0x54,0x50,0x4b,0x44,
0x39,0x2e,0x2b,0x2d,0x32,0x3b,0x40,0x3f,0x3c,0x3a,0x38,0x38,0x3d,0x3c,0x3a,0x35,
0x36,0x3f,0x4f,0x62,0x74,0x81,0x81,0x78,0x69,0x5c,0x58,0x5c,0x63,0x6a,0x6d,0x74,
0x79,0x81,0x8d,0x98,0x9d,0x9b,0x8c,0x76,0x5d,0x4a,0x3f,0x3a,0x3a,0x3a,0x3a,0x3a,
0x39,0x3a,0x3c,0x3f,0x40,0x3f,0x39,0x33,0x32,0x3a,0x49,0x5f,0x73,0x7f,0x81,0x79,
0x6c,0x61,0x5b,0x5d,0x66,0x71,0x76,0x75,0x70,0x69,0x63,0x61,0x5e,0x5c,0x57,0x4f,
0x46,0x3c,0x33,0x2d,0x2c,0x32,0x3a,0x45,0x55,0x65,0x6f,0x76,0x74,0x6d,0x66,0x5d,
0x5a,0x5a,0x56,0x4b,0x3e,0x33,0x32,0x3f,0x55,0x6f,0x82,0x88,0x80,0x6f,0x5d,0x55,
0x58,0x63,0x6c,0x73,0x79,0x7e,0x85,0x8f,0x98,0xa2,0xa7,0xa5,0xa1,0x9b,0x98,0x97,
0x97,0x9a,0x9b,0x9e,0xa2,0xa5,0xa7,0xa4,0x9c,0x8e,0x7b,0x6a,0x5d,0x55,0x4f,0x4a,
0x41,0x3b,0x32,0x2e,0x2d,0x31,0x36,0x3a,0x38,0x36,0x35,0x35,0x35,0x38,0x3a,0x3f,
0x43,0x44,0x41,0x3d,0x3e,0x3a,0x3a,0x3f,0x49,0x56,0x65,0x74,0x81,0x8d,0x96,0x9a,
0x96,0x8f,0x81,0x73,0x63,0x56,0x4b,0x43,0x3e,0x3a,0x39,0x39,0x3a,0x41,0x42,0x42,
0x3f,0x3c,0x38,0x34,0x33,0x3b,0x49,0x5a,0x68,0x73,0x7e,0x8a,0x95,0x9b,0x9c,0x96,
0x8a,0x76,0x61,0x55,0x53,0x5d,0x6b,0x77,0x7b,0x7a,0x74,0x6a,0x60,0x5b,0x55,0x4c,
0x43,0x36,0x2a,0x27,0x26,0x2c,0x38,0x3f,0x41,0x3c,0x37,0x33,0x34,0x38,0x3a,0x3a,
0x37,0x36,0x3c,0x4a,0x5c,0x6e,0x7a,0x7a,0x72,0x67,0x5d,0x58,0x5a,0x61,0x68,0x70,
0x75,0x7a,0x81,0x8c,0x97,0x9b,0x98,0x8c,0x7a,0x66,0x53,0x45,0x3e,0x3a,0x3a,0x39,
0x36,0x33,0x33,0x36,0x3a,0x3f,0x47,0x51,0x5d,0x6d,0x7c,0x88,0x93,0x99,0x97,0x93,
0x85,0x76,0x65,0x5a,0x55,0x5b,0x63,0x6e,0x76,0x84,0x8d,0x94,0x9a,0x9e,0xa1,0xa3,
0xa1,0x9a,0x95,0x93,0x96,0x99,0x9a,0x99,0x9c,0xa0,0xa0,0x9a,0x8f,0x84,0x76,0x69,
0x5c,0x51,0x4a,0x45,0x3f,0x3a,0x38,0x3a,0x44,0x54,0x66,0x79,0x85,0x8c,0x8e,0x91,
0x96,0x9d,0xa2,0xa4,0xa0,0x95,0x83,0x70,0x62,0x5b,0x56,0x50,0x46,0x3a,0x32,0x31,
0x39,0x49,0x5f,0x74,0x81,0x85,0x7b,0x6b,0x61,0x5c,0x5c,0x63,0x69,0x6f,0x73,0x76,
0x79,0x83,0x92,0xa0,0xa9,0xa8,0xa2,0x9d,0x98,0x96,0x97,0x9b,0x9d,0x96,0x8a,0x79,
0x6b,0x61,0x56,0x4c,0x44,0x3e,0x38,0x33,0x39,0x49,0x5f,0x73,0x7c,0x7b,0x71,0x62,
0x55,0x51,0x53,0x5b,0x65,0x6e,0x70,0x76,0x7e,0x8a,0x95,0x9e,0x9d,0x8f,0x79,0x60,
0x4e,0x4c,0x54,0x64,0x74,0x7c,0x7d,0x74,0x66,0x5d,0x5a,0x5e,0x65,0x6a,0x6d,0x6d,
0x73,0x7e,0x8b,0x98,0xa0,0x9d,0x8e,0x77,0x5e,0x4f,0x4c,0x56,0x64,0x73,0x7b,0x7c,
0x74,0x6a,0x61,0x59,0x54,0x4d,0x43,0x3c,0x33,0x2b,0x2b,0x2e,0x34,0x3c,0x41,0x4a,
0x59,0x6b,0x77,0x78,0x71,0x67,0x5e,0x5b,0x5e,0x67,0x73,0x79,0x77,0x6e,0x61,0x5a,
0x57,0x59,0x59,0x53,0x47,0x39,0x2f,0x2b,0x2c,0x34,0x3e,0x44,0x45,0x44,0x3e,0x39,
0x35,0x34,0x31,0x2c,0x28,0x2a,0x36,0x4b,0x60,0x6f,0x79,0x77,0x6f,0x67,0x5f,0x59,
0x56,0x51,0x48,0x3c,0x30,0x2f,0x3c,0x52,0x6a,0x7e,0x85,0x7f,0x6f,0x5d,0x52,0x51,
0x5b,0x67,0x71,0x76,0x75,0x6f,0x66,0x5f,0x5f,0x67,0x6c,0x70,0x75,0x79,0x75,0x6b,
0x62,0x5c,0x5d,0x65,0x70,0x79,0x7c,0x78,0x6d,0x64,0x5c,0x5b,0x5e,0x65,0x67,0x67,
0x66,0x6a,0x71,0x7c,0x8b,0x97,0x9c,0x98,0x89,0x77,0x64,0x54,0x49,0x41,0x3c,0x3c,
0x3c,0x40,0x49,0x58,0x68,0x77,0x81,0x89,0x8f,0x95,0x99,0x9b,0x9d,0xa0,0xa0,0x9b,
0x8e,0x7c,0x6a,0x5d,0x54,0x54,0x5c,0x69,0x75,0x7d,0x7a,0x6f,0x65,0x5d,0x5b,0x62,
0x6c,0x75,0x78,0x72,0x6a,0x62,0x5d,0x59,0x59,0x59,0x54,0x49,0x39,0x2e,0x2d,0x3a,
0x4e,0x65,0x7a,0x8c,0x98,0x9f,0x9a,0x91,0x85,0x7a,0x6f,0x65,0x58,0x4e,0x3f,0x36,
0x2e,0x2c,0x37,0x4a,0x5f,0x75,0x7e,0x7a,0x73,0x68,0x5e,0x59,0x55,0x50,0x48,0x3c,
0x33,0x32,0x39,0x49,0x5f,0x79,0x8a,0x92,0x93,0x92,0x95,0x9b,0xa1,0xa3,0xa2,0x99,
0x8b,0x7c,0x6d,0x62,0x5b,0x5c,0x5d,0x64,0x6d,0x78,0x7f,0x8b,0x92,0x97,0x97,0x91,
0x86,0x79,0x69,0x58,0x49,0x40,0x3b,0x3a,0x3b,0x3f,0x49,0x56,0x65,0x74,0x82,0x8b,
0x90,0x96,0x99,0x9b,0xa0,0xa0,0x9a,0x91,0x84,0x76,0x66,0x59,0x4e,0x47,0x42,0x3c,
0x39,0x38,0x35,0x34,0x34,0x36,0x3a,0x42,0x4c,0x57,0x65,0x71,0x7b,0x83,0x89,0x8f,
0x97,0xa0,0xa2,0x9e,0x9c,0x98,0x96,0x99,0x9a,0x98,0x92,0x87,0x79,0x6b,0x5d,0x54,
0x4e,0x47,0x3e,0x36,0x34,0x39,0x44,0x55,0x67,0x77,0x83,0x88,0x8b,0x8f,0x96,0x9d,
0xa2,0xa4,0xa2,0x9c,0x95,0x92,0x93,0x96,0x96,0x8f,0x80,0x6a,0x5a,0x55,0x59,0x64,
0x73,0x7e,0x7f,0x78,0x6c,0x65,0x61,0x5f,0x59,0x4d,0x3d,0x2f,0x28,0x2e,0x40,0x5a,
0x73,0x81,0x83,0x7c,0x6f,0x62,0x59,0x54,0x4f,0x48,0x3e,0x34,0x2f,0x31,0x36,0x3c,
0x3f,0x3e,0x3a,0x37,0x33,0x34,0x37,0x36,0x32,0x2f,0x30,0x3a,0x4b,0x61,0x73,0x7d,
0x7d,0x75,0x67,0x5e,0x58,0x53,0x50,0x47,0x3b,0x33,0x31,0x3a,0x4c,0x64,0x7b,0x8e,
0x95,0x96,0x95,0x94,0x96,0x99,0x9a,0x98,0x96,0x97,0x96,0x95,0x95,0x98,0x9b,0x9f,
0xa0,0x9d,0x95,0x89,0x78,0x69,0x5c,0x54,0x4f,0x49,0x3f,0x36,0x32,0x38,0x47,0x5d,
0x70,0x7b,0x7d,0x75,0x68,0x5b,0x59,0x5a,0x60,0x69,0x6f,0x74,0x79,0x81,0x8b,0x95,
0x98,0x92,0x83,0x6f,0x5c,0x4e,0x42,0x3a,0x37,0x38,0x37,0x37,0x3a,0x3e,0x41,0x41,
0x3c,0x36,0x33,0x31,0x32,0x35,0x36,0x35,0x34,0x33,0x3a,0x45,0x5a,0x6d,0x79,0x7e,
0x77,0x69,0x5d,0x56,0x5b,0x69,0x76,0x7c,0x7c,0x78,0x6f,0x66,0x60,0x5e,0x5b,0x55,
0x49,0x38,0x2b,0x22,0x22,0x2a,0x32,0x3a,0x40,0x41,0x3f,0x38,0x32,0x2e,0x30,0x32,
0x36,0x3a,0x3c,0x3b,0x38,0x36,0x36,0x3b,0x46,0x55,0x62,0x73,0x7d,0x85,0x8a,0x90,
0x98,0xa0,0xa4,0xa4,0x9f,0x9d,0x9b,0x9d,0x9e,0x9d,0x97,0x8b,0x79,0x68,0x5a,0x51,
0x4b,0x46,0x3d,0x35,0x32,0x36,0x45,0x5b,0x72,0x82,0x85,0x7d,0x6c,0x5d,0x56,0x58,
0x60,0x6d,0x76,0x78,0x71,0x68,0x5f,0x5a,0x5c,0x62,0x69,0x74,0x79,0x79,0x73,0x6b,
0x64,0x61,0x61,0x65,0x6e,0x74,0x76,0x73,0x6b,0x62,0x5d,0x5c,0x5b,0x5a,0x57,0x4e,
0x40,0x33,0x2a,0x25,0x28,0x30,0x39,0x42,0x4c,0x56,0x60,0x6b,0x77,0x86,0x92,0x98,
0x99,0x93,0x88,0x78,0x69,0x5b,0x4e,0x44,0x3c,0x35,0x37,0x3f,0x4e,0x5e,0x70,0x79,
0x7a,0x74,0x68,0x5b,0x51,0x4c,0x47,0x41,0x3a,0x33,0x2e,0x2c,0x2d,0x34,0x3c,0x40,
0x40,0x3c,0x36,0x36,0x36,0x35,0x33,0x34,0x38,0x3f,0x4b,0x5a,0x69,0x78,0x82,0x88,
0x90,0x97,0x98,0x91,0x83,0x70,0x60,0x54,0x4f,0x50,0x5c,0x69,0x76,0x83,0x8d,0x97,
0x9e,0xa0,0x95,0x85,0x70,0x5e,0x51,0x47,0x40,0x3b,0x36,0x34,0x39,0x49,0x5c,0x70,
0x7e,0x81,0x7a,0x6d,0x5e,0x57,0x59,0x60,0x67,0x6e,0x73,0x79,0x81,0x8c,0x95,0x9b,
0xa4,0xa7,0xa4,0x9d,0x91,0x83,0x77,0x66,0x57,0x50,0x4c,0x4b,0x47,0x3f,0x36,0x30,
0x2d,0x30,0x35,0x3a,0x3c,0x3a,0x36,0x30,0x2e,0x31,0x33,0x33,0x35,0x36,0x36,0x36,
0x35,0x36,0x38,0x3a,0x39,0x37,0x36,0x38,0x38,0x3a,0x39,0x38,0x38,0x35,0x33,0x33,
// Line 13
0x38,0x38,0x39,0x3a,0x38,0x36,0x37,0x39,0x3a,0x39,0x36,0x35,0x35,0x37,0x37,0x37,
0x37,0x35,0x32,0x31,0x32,0x35,0x39,0x39,0x37,0x36,0x35,0x36,0x37,0x38,0x38,0x37,
0x38,0x37,0x34,0x33,0x33,0x33,0x35,0x35,0x35,0x36,0x35,0x34,0x33,0x34,0x37,0x37,
0x3b,0x3a,0x37,0x34,0x33,0x37,0x45,0x56,0x67,0x73,0x77,0x72,0x69,0x5f,0x59,0x5b,
0x65,0x71,0x78,0x79,0x74,0x6b,0x64,0x5f,0x5e,0x64,0x6b,0x71,0x76,0x75,0x70,0x69,
0x62,0x5e,0x5e,0x64,0x6c,0x73,0x75,0x72,0x6d,0x67,0x5f,0x59,0x5a,0x60,0x68,0x71,
0x75,0x75,0x71,0x69,0x5f,0x5b,0x5b,0x61,0x6a,0x73,0x75,0x73,0x6d,0x64,0x5b,0x5a,
0x5d,0x64,0x6d,0x72,0x74,0x71,0x69,0x60,0x5a,0x59,0x5d,0x65,0x6d,0x72,0x75,0x74,
0x6e,0x66,0x60,0x5e,0x5f,0x64,0x67,0x69,0x6b,0x6f,0x71,0x78,0x83,0x91,0x9b,0xa6,
0xa8,0xa8,0xa0,0x91,0x7f,0x6f,0x61,0x59,0x55,0x52,0x4c,0x44,0x3c,0x35,0x37,0x42,
0x55,0x6a,0x7c,0x87,0x8c,0x90,0x93,0x96,0x9b,0x9f,0xa0,0x9d,0x9a,0x97,0x97,0x98,
0x98,0x93,0x8a,0x7c,0x6e,0x60,0x55,0x4e,0x48,0x3f,0x36,0x37,0x3d,0x4b,0x63,0x75,
0x7f,0x7e,0x74,0x66,0x5c,0x56,0x53,0x4d,0x44,0x37,0x30,0x35,0x44,0x59,0x6f,0x7f,
0x84,0x7d,0x6f,0x60,0x56,0x50,0x4b,0x46,0x40,0x39,0x33,0x2e,0x2b,0x2f,0x38,0x45,
0x54,0x63,0x6f,0x76,0x77,0x71,0x68,0x61,0x5c,0x58,0x52,0x49,0x3f,0x35,0x37,0x40,
0x52,0x6a,0x7f,0x8e,0x95,0x96,0x94,0x92,0x8c,0x82,0x72,0x61,0x56,0x58,0x62,0x70,
0x7b,0x7e,0x78,0x6d,0x64,0x61,0x5f,0x5c,0x53,0x44,0x35,0x2b,0x2f,0x44,0x5e,0x75,
0x81,0x80,0x75,0x67,0x5e,0x57,0x52,0x4e,0x45,0x3a,0x35,0x37,0x46,0x5f,0x74,0x81,
0x83,0x7a,0x6d,0x60,0x57,0x50,0x49,0x41,0x38,0x33,0x34,0x3f,0x51,0x69,0x7d,0x8b,
0x91,0x95,0x98,0x9c,0xa0,0xa3,0xa3,0xa0,0x9c,0x98,0x98,0x98,0x9a,0x9a,0x92,0x81,
0x6d,0x5d,0x56,0x5a,0x63,0x6d,0x75,0x77,0x72,0x6c,0x64,0x5d,0x59,0x54,0x4a,0x3f,
0x34,0x2f,0x2b,0x2e,0x34,0x3a,0x41,0x44,0x40,0x40,0x3e,0x3b,0x3b,0x39,0x38,0x36,
0x39,0x3f,0x4d,0x60,0x73,0x7e,0x7e,0x75,0x68,0x5f,0x5c,0x5e,0x66,0x6e,0x73,0x77,
0x7b,0x83,0x8e,0x9a,0x9f,0x9b,0x8e,0x7a,0x64,0x54,0x4e,0x51,0x5e,0x6c,0x78,0x85,
0x8d,0x95,0x9c,0xa0,0xa2,0xa1,0xa1,0x9d,0x9a,0x9b,0x9c,0x9d,0x9e,0xa0,0xa1,0xa2,
0x9f,0x9a,0x90,0x83,0x74,0x67,0x5b,0x51,0x4a,0x44,0x3e,0x39,0x36,0x35,0x36,0x38,
0x3a,0x3b,0x3c,0x3b,0x38,0x37,0x37,0x38,0x3a,0x3c,0x3e,0x3a,0x39,0x38,0x37,0x3a,
0x3c,0x3b,0x3b,0x35,0x31,0x34,0x3d,0x4d,0x60,0x70,0x79,0x7a,0x73,0x6a,0x61,0x5d,
0x59,0x52,0x49,0x3d,0x33,0x34,0x3f,0x56,0x70,0x83,0x8a,0x82,0x6f,0x5e,0x59,0x5c,
0x64,0x6c,0x71,0x75,0x7a,0x82,0x8c,0x94,0x9c,0x97,0x87,0x75,0x60,0x50,0x45,0x41,
0x3b,0x38,0x35,0x36,0x39,0x3e,0x3f,0x3e,0x3b,0x37,0x34,0x33,0x35,0x3a,0x3e,0x3c,
0x39,0x38,0x3e,0x4b,0x5e,0x71,0x7d,0x80,0x77,0x68,0x5b,0x57,0x5c,0x69,0x76,0x7c,
0x7b,0x75,0x6d,0x64,0x5f,0x5d,0x5b,0x55,0x4b,0x3e,0x2f,0x2a,0x29,0x2c,0x35,0x3c,
0x41,0x41,0x3d,0x36,0x34,0x31,0x31,0x35,0x39,0x3e,0x3f,0x3e,0x3a,0x37,0x38,0x3b,
0x44,0x55,0x66,0x75,0x80,0x87,0x8c,0x93,0x99,0x9f,0xa1,0xa1,0x9e,0x9c,0x98,0x98,
0x98,0x99,0x96,0x8b,0x7c,0x6b,0x5a,0x50,0x46,0x41,0x42,0x3e,0x3a,0x37,0x35,0x35,
0x39,0x3d,0x3e,0x3b,0x34,0x2f,0x2f,0x36,0x42,0x51,0x61,0x71,0x80,0x8e,0x97,0x9b,
0x9a,0x91,0x84,0x74,0x63,0x58,0x4e,0x47,0x3e,0x37,0x35,0x3b,0x49,0x61,0x74,0x80,
0x81,0x77,0x66,0x59,0x51,0x55,0x63,0x72,0x7a,0x79,0x6f,0x62,0x5b,0x5c,0x5f,0x5e,
0x57,0x44,0x33,0x2c,0x30,0x40,0x5a,0x73,0x83,0x85,0x7b,0x6d,0x61,0x5a,0x55,0x4d,
0x43,0x38,0x32,0x38,0x47,0x5c,0x71,0x80,0x82,0x78,0x67,0x59,0x52,0x4f,0x4b,0x43,
0x39,0x33,0x34,0x3f,0x51,0x65,0x7c,0x8b,0x91,0x96,0x97,0x98,0x9c,0x9e,0x9e,0x9d,
0x9b,0x9a,0x9a,0x9a,0x99,0x9a,0x9b,0x9c,0x9c,0x9a,0x90,0x83,0x75,0x67,0x5a,0x50,
0x47,0x45,0x43,0x3d,0x36,0x32,0x31,0x35,0x3a,0x3d,0x3b,0x37,0x33,0x30,0x30,0x34,
0x39,0x3d,0x3d,0x3a,0x38,0x3a,0x3d,0x40,0x43,0x42,0x3e,0x37,0x31,0x32,0x3a,0x49,
0x5d,0x6c,0x75,0x75,0x6e,0x66,0x5b,0x52,0x50,0x4f,0x48,0x3e,0x32,0x2a,0x2b,0x32,
0x3c,0x43,0x49,0x43,0x37,0x2f,0x2d,0x34,0x42,0x51,0x61,0x71,0x7c,0x85,0x8d,0x93,
0x9c,0xa1,0xa1,0x9d,0x9a,0x98,0x98,0x98,0x98,0x98,0x92,0x88,0x78,0x6a,0x5f,0x56,
0x4d,0x43,0x39,0x33,0x33,0x3a,0x48,0x59,0x6d,0x77,0x76,0x6e,0x63,0x59,0x52,0x4d,
0x46,0x42,0x3b,0x33,0x2e,0x2f,0x33,0x3a,0x3f,0x41,0x3e,0x3c,0x3a,0x39,0x3a,0x39,
0x34,0x31,0x31,0x37,0x48,0x5d,0x6e,0x78,0x76,0x70,0x68,0x5f,0x59,0x55,0x51,0x4b,
0x3f,0x35,0x2e,0x2d,0x33,0x39,0x3d,0x41,0x40,0x3f,0x3b,0x36,0x32,0x31,0x33,0x36,
0x3a,0x3d,0x3c,0x38,0x34,0x35,0x3d,0x49,0x59,0x69,0x77,0x79,0x71,0x64,0x59,0x52,
0x50,0x4f,0x4b,0x43,0x3e,0x37,0x31,0x34,0x39,0x3e,0x47,0x4a,0x4f,0x5a,0x68,0x75,
0x80,0x88,0x8f,0x96,0x9e,0xa4,0xa5,0xa0,0x93,0x81,0x6d,0x5c,0x54,0x53,0x51,0x4a,
0x41,0x36,0x31,0x36,0x43,0x59,0x70,0x7e,0x80,0x74,0x64,0x56,0x50,0x56,0x5f,0x6c,
0x73,0x73,0x6c,0x63,0x5c,0x5a,0x56,0x55,0x4f,0x45,0x3a,0x30,0x2b,0x30,0x37,0x3e,
0x45,0x47,0x45,0x41,0x39,0x36,0x36,0x36,0x34,0x32,0x32,0x39,0x48,0x5e,0x70,0x7b,
0x7d,0x78,0x6b,0x5e,0x56,0x5b,0x66,0x72,0x78,0x79,0x73,0x69,0x61,0x5f,0x61,0x67,
0x6c,0x6d,0x6d,0x70,0x75,0x7d,0x8a,0x94,0x98,0x95,0x87,0x73,0x5f,0x50,0x44,0x3b,
0x34,0x30,0x32,0x3c,0x4a,0x5b,0x70,0x7c,0x7f,0x79,0x69,0x5a,0x53,0x55,0x5e,0x6c,
0x77,0x7b,0x76,0x6b,0x5f,0x59,0x5a,0x62,0x6c,0x75,0x76,0x72,0x6b,0x64,0x5e,0x5d,
0x5c,0x5b,0x56,0x4d,0x42,0x36,0x2c,0x27,0x28,0x2f,0x38,0x41,0x51,0x60,0x6b,0x72,
0x74,0x6f,0x68,0x5e,0x59,0x5d,0x66,0x71,0x77,0x76,0x70,0x68,0x62,0x61,0x64,0x6b,
0x71,0x73,0x72,0x70,0x72,0x7b,0x88,0x96,0xa3,0xab,0xad,0xa8,0x9f,0x96,0x93,0x93,
0x95,0x96,0x92,0x88,0x79,0x6b,0x5b,0x4e,0x47,0x43,0x3f,0x3b,0x37,0x34,0x32,0x34,
0x38,0x3f,0x41,0x3c,0x32,0x2c,0x2d,0x36,0x47,0x5b,0x6c,0x78,0x79,0x71,0x67,0x60,
0x5d,0x5e,0x61,0x66,0x6b,0x72,0x79,0x80,0x8a,0x93,0x9c,0xa5,0xa8,0xa6,0xa2,0x97,
0x8a,0x7b,0x6c,0x5f,0x55,0x56,0x5c,0x66,0x72,0x78,0x74,0x6c,0x5e,0x55,0x57,0x5f,
0x6b,0x76,0x7a,0x76,0x6e,0x66,0x62,0x64,0x64,0x60,0x58,0x49,0x38,0x2d,0x2e,0x39,
0x4d,0x66,0x7b,0x8a,0x95,0x9a,0x97,0x93,0x89,0x7f,0x70,0x5f,0x50,0x48,0x42,0x3f,
0x3b,0x3b,0x39,0x39,0x3b,0x3e,0x41,0x44,0x42,0x3c,0x36,0x34,0x39,0x44,0x52,0x62,
0x71,0x7e,0x88,0x8f,0x94,0x9b,0x9f,0xa3,0xa2,0x9f,0x9b,0x9b,0x9b,0x9e,0x9c,0x97,
0x8d,0x7d,0x6d,0x5f,0x55,0x4d,0x43,0x3a,0x32,0x31,0x3a,0x4a,0x5f,0x76,0x81,0x7e,
0x75,0x67,0x5d,0x56,0x50,0x48,0x3f,0x37,0x33,0x31,0x3e,0x4e,0x64,0x7b,0x8b,0x93,
0x97,0x97,0x92,0x8a,0x7f,0x71,0x63,0x54,0x49,0x42,0x3d,0x39,0x36,0x35,0x35,0x37,
0x3c,0x3d,0x3b,0x39,0x36,0x36,0x37,0x37,0x38,0x38,0x35,0x33,0x3a,0x4b,0x5f,0x70,
0x79,0x79,0x71,0x65,0x5a,0x57,0x5b,0x63,0x6a,0x6f,0x72,0x79,0x82,0x8c,0x94,0x9b,
0x97,0x8a,0x74,0x5d,0x47,0x3b,0x35,0x32,0x31,0x34,0x36,0x35,0x34,0x35,0x37,0x3e,
0x4d,0x5c,0x6c,0x75,0x79,0x73,0x6c,0x62,0x5c,0x5d,0x60,0x64,0x6d,0x71,0x78,0x80,
0x88,0x93,0x9f,0xa4,0xa5,0xa3,0x9e,0x96,0x8a,0x7b,0x6b,0x5e,0x58,0x59,0x60,0x6a,
0x73,0x78,0x75,0x6d,0x63,0x5e,0x5f,0x63,0x69,0x6d,0x71,0x74,0x78,0x80,0x8b,0x98,
0x9d,0x98,0x8c,0x78,0x64,0x59,0x52,0x54,0x5c,0x6b,0x79,0x85,0x8e,0x97,0x9a,0x96,
0x8d,0x7e,0x70,0x60,0x50,0x45,0x3d,0x3b,0x3b,0x3a,0x39,0x3a,0x39,0x36,0x38,0x40,
0x4d,0x59,0x66,0x71,0x7d,0x8a,0x91,0x98,0x9c,0x96,0x87,0x75,0x65,0x5b,0x58,0x5d,
0x64,0x6f,0x7b,0x84,0x8b,0x96,0x9a,0x9a,0x93,0x84,0x6e,0x5a,0x4d,0x4c,0x55,0x62,
0x6e,0x75,0x75,0x6e,0x66,0x5f,0x5b,0x56,0x50,0x47,0x3c,0x34,0x2f,0x2f,0x32,0x39,
0x3e,0x46,0x4f,0x5b,0x66,0x71,0x7c,0x87,0x8e,0x94,0x93,0x8f,0x83,0x73,0x64,0x52,
0x44,0x3f,0x3d,0x3b,0x3b,0x39,0x38,0x38,0x3b,0x3e,0x3f,0x3e,0x3b,0x37,0x36,0x39,
0x44,0x54,0x66,0x73,0x80,0x87,0x8d,0x94,0x98,0x9f,0xa3,0xa3,0x9f,0x98,0x8e,0x7f,
0x6d,0x61,0x59,0x58,0x63,0x70,0x79,0x7c,0x77,0x6d,0x62,0x5b,0x59,0x5c,0x61,0x65,
0x67,0x6b,0x74,0x81,0x8f,0x9a,0x9c,0x96,0x89,0x76,0x64,0x51,0x46,0x3e,0x37,0x34,
0x37,0x3f,0x4c,0x5b,0x6c,0x7b,0x87,0x8e,0x93,0x94,0x92,0x8a,0x7c,0x6e,0x5d,0x4e,
0x44,0x3c,0x37,0x34,0x34,0x36,0x37,0x3a,0x3e,0x3e,0x3e,0x3b,0x37,0x37,0x37,0x39,
0x3a,0x3b,0x39,0x39,0x37,0x39,0x39,0x39,0x39,0x38,0x36,0x34,0x35,0x36,0x37,0x37,
0x38,0x38,0x37,0x37,0x37,0x3a,0x3d,0x3d,0x3a,0x37,0x35,0x34,0x35,0x37,0x36,0x38,
// Line 14
0x37,0x37,0x37,0x37,0x38,0x39,0x39,0x38,0x38,0x38,0x3a,0x3c,0x3c,0x3c,0x3a,0x39,
0x3a,0x3a,0x39,0x38,0x39,0x39,0x39,0x39,0x38,0x3a,0x3b,0x3a,0x36,0x37,0x38,0x38,
0x37,0x35,0x35,0x36,0x38,0x39,0x37,0x36,0x35,0x35,0x35,0x35,0x37,0x38,0x37,0x33,
0x35,0x36,0x39,0x3d,0x42,0x49,0x51,0x59,0x5f,0x68,0x73,0x7e,0x88,0x8e,0x91,0x95,
0x99,0x9a,0x9a,0x9b,0x9b,0x9b,0x99,0x97,0x96,0x98,0x9b,0x9c,0x9a,0x97,0x91,0x8a,
0x83,0x7d,0x76,0x6d,0x63,0x58,0x50,0x4a,0x46,0x43,0x3e,0x3a,0x3a,0x39,0x39,0x34,
0x37,0x37,0x35,0x35,0x35,0x35,0x38,0x38,0x38,0x3a,0x3c,0x3f,0x43,0x49,0x50,0x59,
0x61,0x69,0x70,0x78,0x80,0x88,0x8e,0x91,0x93,0x93,0x93,0x93,0x93,0x94,0x97,0x97,
0x94,0x93,0x93,0x95,0x97,0x98,0x98,0x93,0x8c,0x85,0x7c,0x72,0x6b,0x62,0x57,0x4d,
0x46,0x41,0x3e,0x3a,0x37,0x3a,0x3c,0x3d,0x3c,0x3b,0x3a,0x38,0x38,0x36,0x34,0x35,
0x36,0x35,0x36,0x38,0x3c,0x43,0x48,0x50,0x5b,0x66,0x6f,0x77,0x7e,0x85,0x8b,0x90,
0x92,0x92,0x94,0x94,0x93,0x94,0x95,0x96,0x97,0x97,0x96,0x97,0x98,0x97,0x93,0x93,
0x8e,0x86,0x7e,0x75,0x6d,0x66,0x5d,0x52,0x4c,0x47,0x44,0x40,0x3b,0x39,0x39,0x3a,
0x3c,0x3b,0x3a,0x38,0x37,0x36,0x36,0x37,0x39,0x3c,0x3b,0x3b,0x3c,0x3f,0x44,0x4a,
0x51,0x5a,0x65,0x6d,0x73,0x7e,0x86,0x8d,0x92,0x94,0x94,0x99,0x9a,0x9a,0x9b,0x9b,
0x9b,0x9b,0x98,0x96,0x97,0x9a,0x9c,0x9b,0x96,0x90,0x88,0x82,0x7a,0x72,0x6a,0x5f,
0x54,0x4c,0x44,0x3f,0x3d,0x3d,0x3d,0x3e,0x3e,0x3e,0x3b,0x3a,0x39,0x3a,0x3b,0x3a,
0x38,0x39,0x38,0x35,0x36,0x38,0x3c,0x41,0x49,0x4e,0x58,0x62,0x6e,0x78,0x82,0x89,
0x90,0x95,0x97,0x98,0x9a,0x97,0x94,0x94,0x94,0x96,0x97,0x97,0x95,0x95,0x96,0x97,
0x97,0x96,0x91,0x89,0x80,0x78,0x6e,0x65,0x5c,0x53,0x4d,0x48,0x43,0x41,0x3e,0x3b,
0x3b,0x3c,0x3c,0x39,0x39,0x39,0x3a,0x3d,0x3d,0x3c,0x3b,0x3b,0x3b,0x3c,0x3d,0x3d,
0x41,0x47,0x4f,0x5a,0x65,0x70,0x7a,0x82,0x88,0x8e,0x93,0x97,0x97,0x98,0x98,0x97,
0x97,0x97,0x97,0x97,0x97,0x96,0x97,0x97,0x98,0x97,0x93,0x8c,0x86,0x7e,0x76,0x6d,
0x66,0x5c,0x51,0x49,0x42,0x3f,0x3d,0x3d,0x3c,0x3d,0x3b,0x3a,0x3a,0x39,0x39,0x3d,
0x3f,0x3f,0x3e,0x3d,0x3d,0x3d,0x3e,0x3f,0x41,0x47,0x4c,0x52,0x5a,0x65,0x6f,0x79,
0x81,0x8a,0x92,0x98,0x9b,0x9a,0x9a,0x98,0x97,0x98,0x98,0x97,0x97,0x97,0x96,0x97,
0x97,0x99,0x98,0x94,0x8d,0x87,0x81,0x7a,0x73,0x6b,0x61,0x56,0x4d,0x47,0x44,0x42,
0x40,0x3b,0x3a,0x3b,0x3d,0x3e,0x3e,0x3e,0x3f,0x40,0x3f,0x3e,0x3d,0x3d,0x3b,0x39,
0x36,0x35,0x39,0x3b,0x3c,0x3d,0x3c,0x3a,0x3a,0x3a,0x3c,0x3d,0x3e,0x3e,0x3e,0x3c,
0x3a,0x3a,0x3c,0x3d,0x3d,0x3e,0x3c,0x39,0x3a,0x3b,0x3d,0x3a,0x3a,0x3a,0x3a,0x3c,
0x3c,0x3c,0x3e,0x3e,0x3c,0x3d,0x3b,0x3a,0x3a,0x3b,0x3c,0x3c,0x3b,0x3d,0x3e,0x3d,
0x3b,0x3c,0x3e,0x3e,0x3c,0x3a,0x39,0x37,0x36,0x35,0x37,0x3a,0x3b,0x3c,0x3c,0x3b,
0x3b,0x3b,0x3a,0x3a,0x3a,0x3d,0x3e,0x3d,0x3c,0x3a,0x38,0x39,0x39,0x38,0x3a,0x3a,
0x38,0x37,0x36,0x37,0x3a,0x3e,0x41,0x45,0x4a,0x50,0x56,0x5e,0x66,0x6f,0x78,0x7f,
0x86,0x8d,0x91,0x94,0x96,0x97,0x98,0x99,0x97,0x97,0x97,0x97,0x97,0x97,0x98,0x98,
0x98,0x9b,0x9b,0x99,0x99,0x99,0x98,0x9a,0x9a,0x9a,0x98,0x98,0x97,0x97,0x98,0x9a,
0x9a,0x9a,0x97,0x94,0x95,0x97,0x98,0x99,0x9a,0x99,0x97,0x97,0x98,0x9a,0x9a,0x98,
0x97,0x99,0x9a,0x98,0x98,0x97,0x98,0x99,0x99,0x99,0x99,0x9b,0x99,0x98,0x96,0x94,
0x94,0x96,0x95,0x93,0x93,0x93,0x93,0x94,0x96,0x97,0x9a,0x9c,0x9b,0x9a,0x97,0x95,
0x95,0x97,0x98,0x96,0x94,0x93,0x93,0x95,0x97,0x98,0x9a,0x9b,0x9a,0x9a,0x95,0x94,
0x97,0x98,0x99,0x98,0x97,0x96,0x93,0x91,0x8a,0x82,0x7b,0x75,0x6b,0x61,0x57,0x4e,
0x4b,0x46,0x41,0x3f,0x3f,0x3e,0x3d,0x3b,0x3a,0x3a,0x39,0x38,0x39,0x3a,0x3a,0x3a,
0x3b,0x3c,0x3d,0x41,0x41,0x40,0x3d,0x39,0x37,0x37,0x39,0x3c,0x3d,0x3b,0x38,0x38,
0x39,0x3b,0x3d,0x40,0x3d,0x3a,0x3a,0x3a,0x38,0x37,0x3a,0x3c,0x3b,0x3a,0x38,0x38,
0x3a,0x3d,0x40,0x46,0x4e,0x58,0x61,0x68,0x71,0x7d,0x86,0x8d,0x92,0x95,0x97,0x96,
0x95,0x96,0x97,0x96,0x94,0x93,0x95,0x95,0x95,0x97,0x97,0x97,0x98,0x9a,0x99,0x9a,
0x9b,0x9b,0x9b,0x99,0x97,0x97,0x97,0x97,0x95,0x95,0x95,0x95,0x95,0x96,0x97,0x9a,
0x9b,0x9b,0x98,0x97,0x97,0x98,0x97,0x95,0x93,0x8e,0x86,0x7e,0x78,0x70,0x67,0x5f,
0x57,0x4e,0x49,0x43,0x3f,0x3b,0x3b,0x3a,0x3a,0x3a,0x3a,0x38,0x3a,0x39,0x36,0x37,
0x39,0x3a,0x3c,0x39,0x39,0x3a,0x3a,0x3a,0x39,0x3c,0x3d,0x3d,0x3d,0x3d,0x3d,0x3d,
0x3b,0x3a,0x3c,0x3d,0x3e,0x3d,0x3a,0x37,0x39,0x3a,0x3b,0x3b,0x3c,0x3d,0x3d,0x3c,
0x39,0x39,0x3d,0x41,0x46,0x4c,0x52,0x5c,0x67,0x70,0x78,0x82,0x8a,0x90,0x92,0x93,
0x94,0x97,0x98,0x98,0x97,0x98,0x98,0x95,0x96,0x98,0x99,0x9a,0x98,0x98,0x99,0x99,
0x98,0x98,0x98,0x98,0x9a,0x98,0x97,0x97,0x97,0x96,0x95,0x97,0x97,0x98,0x9c,0x9b,
0x9a,0x9b,0x9b,0x9a,0x98,0x98,0x9a,0x9c,0x9b,0x9b,0x9b,0x9b,0x99,0x9a,0x9b,0x9e,
0x9e,0x9e,0x9b,0x98,0x9a,0x9a,0x99,0x98,0x98,0x9a,0x9b,0x99,0x97,0x96,0x97,0x97,
0x95,0x97,0x97,0x97,0x97,0x96,0x94,0x95,0x97,0x99,0x9b,0x9b,0x9c,0x9d,0x9c,0x9c,
0x9b,0x9c,0x9e,0x9d,0x9d,0x9c,0x9c,0x9b,0x98,0x97,0x98,0x99,0x98,0x96,0x94,0x94,
0x95,0x94,0x92,0x8e,0x8e,0x86,0x7b,0x72,0x6b,0x64,0x5c,0x53,0x4c,0x47,0x42,0x3e,
0x3d,0x3d,0x3d,0x3c,0x39,0x38,0x37,0x39,0x36,0x35,0x36,0x37,0x37,0x37,0x35,0x36,
0x39,0x3a,0x39,0x39,0x38,0x37,0x39,0x39,0x3a,0x39,0x3d,0x3d,0x3e,0x3e,0x3e,0x3e,
0x40,0x3c,0x3b,0x3c,0x3c,0x3e,0x3e,0x3b,0x39,0x39,0x39,0x39,0x38,0x38,0x37,0x36,
0x37,0x37,0x38,0x39,0x38,0x36,0x37,0x38,0x39,0x38,0x37,0x35,0x37,0x39,0x3a,0x3a,
0x3c,0x3c,0x3c,0x3b,0x3b,0x3a,0x3c,0x3b,0x3a,0x3b,0x3a,0x3a,0x3a,0x3a,0x38,0x39,
0x3a,0x3b,0x3b,0x3c,0x3c,0x3b,0x39,0x39,0x3a,0x3e,0x3a,0x39,0x3a,0x3b,0x3a,0x39,
0x39,0x3a,0x3c,0x3d,0x3c,0x3b,0x3c,0x3d,0x41,0x48,0x51,0x5b,0x68,0x73,0x7a,0x82,
0x8a,0x91,0x94,0x97,0x98,0x99,0x98,0x96,0x94,0x94,0x94,0x93,0x96,0x97,0x96,0x97,
0x97,0x97,0x98,0x97,0x98,0x9a,0x99,0x9a,0x9b,0x9c,0x9c,0x9a,0x99,0x9a,0x9a,0x9a,
0x9a,0x99,0x97,0x94,0x93,0x93,0x93,0x94,0x96,0x96,0x95,0x95,0x95,0x96,0x92,0x91,
0x8a,0x81,0x79,0x6e,0x64,0x5d,0x55,0x50,0x4b,0x48,0x44,0x40,0x3d,0x3b,0x3c,0x3c,
0x3b,0x39,0x3d,0x3a,0x38,0x37,0x38,0x3a,0x3c,0x3c,0x3c,0x3d,0x3c,0x3b,0x39,0x37,
0x37,0x39,0x3a,0x39,0x37,0x37,0x37,0x37,0x39,0x3b,0x3b,0x3b,0x3b,0x3b,0x3a,0x39,
0x39,0x3b,0x3b,0x3b,0x3c,0x3c,0x3c,0x3b,0x3c,0x3d,0x3d,0x3c,0x3b,0x3b,0x3b,0x3b,
0x3a,0x3a,0x3b,0x3b,0x3a,0x3b,0x3a,0x39,0x3a,0x3a,0x38,0x3a,0x39,0x39,0x3a,0x37,
0x35,0x35,0x34,0x35,0x37,0x39,0x3b,0x3a,0x3a,0x38,0x38,0x39,0x39,0x39,0x39,0x38,
0x37,0x37,0x37,0x35,0x36,0x38,0x39,0x3a,0x3a,0x3a,0x3b,0x39,0x38,0x3a,0x3b,0x3a,
0x38,0x37,0x38,0x37,0x38,0x38,0x38,0x39,0x37,0x37,0x38,0x3a,0x3c,0x3c,0x3a,0x39,
0x38,0x3a,0x3b,0x3b,0x3b,0x3d,0x3d,0x3d,0x3b,0x3a,0x3d,0x3e,0x3d,0x3d,0x3d,0x3d,
0x3b,0x38,0x35,0x34,0x35,0x35,0x34,0x32,0x33,0x33,0x35,0x36,0x3a,0x3d,0x3e,0x3d,
0x3c,0x3c,0x3d,0x3d,0x3e,0x3b,0x3a,0x3a,0x3a,0x39,0x3e,0x44,0x4b,0x55,0x5d,0x64,
0x6d,0x77,0x7e,0x86,0x8b,0x8f,0x93,0x93,0x91,0x90,0x91,0x93,0x94,0x96,0x95,0x96,
0x98,0x99,0x97,0x97,0x96,0x96,0x97,0x97,0x97,0x98,0x97,0x95,0x97,0x98,0x98,0x93,
0x93,0x92,0x92,0x92,0x92,0x93,0x95,0x96,0x94,0x95,0x94,0x95,0x97,0x98,0x97,0x96,
0x96,0x97,0x97,0x97,0x97,0x9a,0x9c,0x9b,0x9a,0x98,0x97,0x98,0x9a,0x9b,0x9c,0x9c,
0x9b,0x9a,0x99,0x98,0x99,0x9b,0x9a,0x98,0x95,0x94,0x95,0x95,0x99,0x9a,0x9a,0x99,
0x96,0x94,0x94,0x97,0x98,0x9a,0x9b,0x9b,0x9a,0x99,0x98,0x98,0x99,0x9a,0x9b,0x99,
0x97,0x94,0x94,0x93,0x92,0x92,0x93,0x93,0x93,0x93,0x91,0x8c,0x86,0x7e,0x78,0x70,
0x68,0x5e,0x54,0x4d,0x46,0x41,0x3b,0x38,0x38,0x39,0x38,0x38,0x38,0x3a,0x38,0x38,
0x37,0x39,0x3b,0x3a,0x38,0x38,0x38,0x36,0x35,0x35,0x35,0x37,0x38,0x39,0x3a,0x39,
0x3a,0x3a,0x3b,0x3a,0x3a,0x3c,0x3c,0x3a,0x39,0x38,0x37,0x37,0x37,0x37,0x38,0x37,
0x34,0x33,0x34,0x35,0x35,0x35,0x36,0x37,0x3a,0x3a,0x3a,0x3a,0x3c,0x3c,0x3b,0x3a,
0x39,0x3a,0x3a,0x38,0x37,0x37,0x37,0x37,0x36,0x36,0x38,0x3a,0x3b,0x3a,0x3a,0x39,
0x38,0x39,0x38,0x39,0x3b,0x3a,0x35,0x35,0x34,0x35,0x34,0x36,0x38,0x3b,0x3c,0x39,
0x35,0x37,0x38,0x38,0x3a,0x3a,0x3a,0x3b,0x38,0x36,0x35,0x38,0x3b,0x3c,0x3a,0x36,
0x35,0x38,0x3a,0x3a,0x3b,0x3c,0x3b,0x3a,0x37,0x34,0x35,0x36,0x35,0x35,0x35,0x36,
0x37,0x37,0x37,0x37,0x3a,0x3d,0x3b,0x3c,0x37,0x35,0x37,0x37,0x37,0x39,0x3a,0x3a,
// Line 15
0x39,0x39,0x36,0x34,0x34,0x34,0x35,0x37,0x39,0x39,0x39,0x3b,0x39,0x3a,0x3c,0x3c,
0x3b,0x3a,0x39,0x3a,0x3c,0x3b,0x39,0x38,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
0x35,0x37,0x38,0x38,0x37,0x36,0x36,0x38,0x3a,0x3c,0x3c,0x39,0x34,0x33,0x34,0x38,
0x3a,0x3d,0x3c,0x37,0x34,0x32,0x36,0x41,0x52,0x65,0x76,0x7d,0x7c,0x74,0x6a,0x5f,
0x5b,0x60,0x6b,0x74,0x79,0x78,0x73,0x6b,0x64,0x61,0x64,0x6a,0x71,0x77,0x78,0x74,
0x6f,0x68,0x62,0x60,0x63,0x6b,0x74,0x7a,0x7b,0x77,0x72,0x69,0x62,0x64,0x69,0x70,
0x79,0x7d,0x7d,0x7a,0x73,0x6b,0x66,0x66,0x6a,0x71,0x76,0x78,0x78,0x76,0x71,0x6b,
0x64,0x63,0x67,0x6f,0x76,0x7b,0x7d,0x7a,0x71,0x68,0x60,0x60,0x65,0x6f,0x77,0x7b,
0x7c,0x77,0x6e,0x67,0x63,0x65,0x6c,0x70,0x73,0x75,0x76,0x76,0x7a,0x84,0x90,0x9d,
0xa9,0xaf,0xae,0xa8,0x9b,0x8c,0x7d,0x6e,0x62,0x5c,0x56,0x4f,0x47,0x3f,0x37,0x34,
0x3a,0x48,0x5c,0x70,0x80,0x8c,0x94,0x97,0x99,0x9c,0xa0,0xa3,0xa5,0xa2,0x95,0x85,
0x75,0x66,0x5c,0x58,0x5b,0x61,0x6b,0x72,0x79,0x82,0x8c,0x95,0xa0,0xa6,0xa8,0xa8,
0xa3,0x9f,0x9a,0x96,0x95,0x97,0x97,0x94,0x8a,0x7b,0x6a,0x5b,0x56,0x5a,0x65,0x73,
0x7c,0x7e,0x7d,0x76,0x6c,0x65,0x64,0x67,0x6e,0x75,0x78,0x76,0x70,0x6a,0x63,0x60,
0x62,0x6a,0x74,0x7b,0x7b,0x78,0x71,0x69,0x64,0x64,0x6a,0x73,0x7a,0x7f,0x7b,0x76,
0x6c,0x63,0x60,0x5d,0x5c,0x59,0x50,0x43,0x38,0x31,0x2e,0x2e,0x32,0x39,0x44,0x50,
0x5c,0x68,0x73,0x79,0x78,0x71,0x67,0x5e,0x5c,0x62,0x6d,0x78,0x7d,0x7b,0x73,0x68,
0x60,0x60,0x68,0x71,0x78,0x7e,0x7b,0x73,0x6c,0x67,0x63,0x62,0x60,0x5d,0x57,0x4d,
0x40,0x35,0x2f,0x2e,0x34,0x3b,0x43,0x4c,0x55,0x5d,0x68,0x75,0x82,0x8d,0x96,0x9d,
0xa2,0xa8,0xa9,0xa5,0x9c,0x90,0x7f,0x70,0x61,0x59,0x51,0x4e,0x48,0x41,0x3c,0x38,
0x36,0x37,0x39,0x3c,0x45,0x4e,0x57,0x61,0x6e,0x7a,0x85,0x8f,0x95,0x9a,0x9f,0xa2,
0xa2,0xa2,0x9d,0x94,0x87,0x77,0x69,0x62,0x60,0x66,0x71,0x7c,0x84,0x86,0x80,0x75,
0x6a,0x64,0x63,0x68,0x70,0x77,0x79,0x76,0x6c,0x61,0x5c,0x5c,0x5c,0x5b,0x55,0x49,
0x3c,0x30,0x2a,0x29,0x36,0x40,0x46,0x46,0x3f,0x36,0x30,0x31,0x3b,0x4f,0x63,0x73,
0x7b,0x7b,0x73,0x6a,0x62,0x62,0x66,0x6c,0x71,0x77,0x7d,0x83,0x89,0x93,0x9d,0xa6,
0xac,0xad,0xa9,0xa1,0x9b,0x99,0x9b,0x9c,0x9a,0x92,0x88,0x77,0x65,0x55,0x4a,0x44,
0x41,0x3d,0x39,0x36,0x36,0x36,0x39,0x3a,0x3c,0x3f,0x3d,0x3b,0x36,0x34,0x33,0x33,
0x36,0x38,0x38,0x36,0x33,0x2f,0x31,0x39,0x46,0x58,0x6a,0x78,0x80,0x7f,0x78,0x6e,
0x64,0x5c,0x54,0x4b,0x43,0x3b,0x39,0x3d,0x47,0x59,0x6e,0x81,0x92,0x99,0x9b,0x9b,
0x96,0x8c,0x7b,0x6c,0x5c,0x51,0x4a,0x44,0x3f,0x3a,0x36,0x2f,0x2c,0x2e,0x34,0x3c,
0x40,0x3f,0x38,0x32,0x33,0x40,0x54,0x6b,0x7c,0x84,0x81,0x77,0x6b,0x60,0x5d,0x64,
0x6e,0x76,0x7b,0x7b,0x7f,0x8a,0x94,0x9e,0xa7,0xad,0xae,0xa9,0xa2,0x9c,0x97,0x99,
0x98,0x9a,0xa0,0xa4,0xa6,0xa4,0x9c,0x90,0x83,0x74,0x68,0x5f,0x58,0x51,0x47,0x3e,
0x39,0x3d,0x49,0x5b,0x6e,0x7e,0x84,0x80,0x75,0x66,0x5c,0x58,0x55,0x4d,0x43,0x3a,
0x38,0x3e,0x4e,0x63,0x77,0x81,0x7f,0x72,0x65,0x59,0x53,0x51,0x4e,0x48,0x41,0x39,
0x34,0x32,0x36,0x3b,0x43,0x4a,0x52,0x5c,0x6a,0x78,0x84,0x8e,0x95,0x9a,0x9f,0xa3,
0xa6,0xa8,0xa3,0x97,0x85,0x74,0x68,0x63,0x64,0x69,0x6e,0x73,0x79,0x7e,0x87,0x91,
0x99,0xa1,0xa1,0x97,0x87,0x73,0x62,0x53,0x56,0x62,0x71,0x7e,0x82,0x7d,0x75,0x68,
0x5e,0x5e,0x64,0x6c,0x71,0x73,0x73,0x77,0x84,0x93,0x9e,0xa3,0x9b,0x89,0x74,0x60,
0x56,0x5b,0x65,0x73,0x7e,0x82,0x7d,0x72,0x66,0x60,0x60,0x62,0x64,0x69,0x70,0x78,
0x7f,0x88,0x92,0x9b,0xa0,0x9a,0x89,0x73,0x5d,0x4e,0x44,0x3c,0x39,0x3c,0x3f,0x3d,
0x3b,0x37,0x36,0x3c,0x45,0x50,0x5d,0x6c,0x7b,0x84,0x8f,0x96,0x97,0x93,0x8a,0x7d,
0x6e,0x5e,0x50,0x45,0x3e,0x3c,0x3c,0x3b,0x39,0x3b,0x3d,0x3f,0x44,0x4a,0x52,0x5e,
0x6a,0x76,0x7f,0x8b,0x96,0x9d,0x9f,0x9f,0x9f,0x9e,0x9c,0x94,0x87,0x79,0x6c,0x62,
0x5e,0x60,0x69,0x73,0x79,0x80,0x87,0x8d,0x94,0x9b,0xa1,0xa4,0xa4,0xa1,0x9c,0x99,
0x98,0x9a,0x9b,0x9b,0x96,0x8c,0x7d,0x6e,0x60,0x5b,0x5c,0x64,0x6e,0x78,0x80,0x89,
0x94,0x9b,0x9e,0x9f,0x98,0x88,0x74,0x5f,0x54,0x54,0x5d,0x6c,0x79,0x80,0x7d,0x70,
0x66,0x5f,0x61,0x6d,0x78,0x7e,0x7f,0x79,0x70,0x68,0x63,0x63,0x63,0x5d,0x50,0x41,
0x36,0x31,0x36,0x4c,0x64,0x79,0x85,0x82,0x76,0x6c,0x61,0x5d,0x61,0x69,0x72,0x79,
0x7f,0x83,0x8a,0x94,0x9c,0x98,0x90,0x7e,0x6a,0x58,0x49,0x40,0x3f,0x3f,0x3c,0x39,
0x36,0x37,0x3a,0x3b,0x3a,0x39,0x36,0x33,0x31,0x33,0x3d,0x4c,0x5c,0x6b,0x78,0x85,
0x90,0x98,0x9c,0x9a,0x90,0x82,0x73,0x64,0x57,0x4e,0x47,0x3d,0x3d,0x3d,0x43,0x51,
0x60,0x6f,0x7d,0x88,0x8e,0x93,0x96,0x9b,0xa1,0xa3,0xa0,0x99,0x8e,0x82,0x73,0x66,
0x5b,0x54,0x4f,0x49,0x41,0x3d,0x3d,0x44,0x50,0x5f,0x71,0x81,0x8c,0x93,0x98,0x9b,
0x9f,0xa1,0xa2,0xa1,0xa0,0x9d,0x9a,0x98,0x99,0x9d,0xa1,0xa3,0xa1,0x9f,0x9c,0x9c,
0x9b,0x9d,0x9e,0x9e,0x97,0x8c,0x7d,0x6e,0x67,0x63,0x62,0x68,0x71,0x7a,0x82,0x87,
0x8e,0x96,0x9d,0xa0,0xa2,0xa2,0x9f,0x99,0x94,0x93,0x95,0x99,0x98,0x93,0x88,0x79,
0x6a,0x5d,0x52,0x4a,0x46,0x41,0x3b,0x36,0x32,0x33,0x36,0x3c,0x40,0x40,0x3d,0x36,
0x2f,0x34,0x3f,0x50,0x65,0x76,0x7e,0x7b,0x6f,0x61,0x59,0x5c,0x68,0x76,0x7e,0x7f,
0x79,0x72,0x6a,0x64,0x63,0x62,0x5e,0x55,0x47,0x39,0x36,0x3c,0x4a,0x5e,0x73,0x85,
0x93,0x9a,0x9a,0x95,0x90,0x85,0x76,0x6b,0x5d,0x54,0x4c,0x44,0x3c,0x3b,0x3e,0x48,
0x59,0x6e,0x7e,0x84,0x81,0x73,0x64,0x58,0x52,0x4d,0x49,0x44,0x3c,0x36,0x30,0x2f,
0x35,0x3d,0x46,0x4d,0x55,0x5f,0x6b,0x76,0x81,0x8b,0x95,0x9b,0xa1,0xa4,0xa6,0xa7,
0xa5,0xa1,0x9d,0x9a,0x9a,0x9e,0xa2,0xa5,0xa7,0xa4,0xa0,0x9a,0x98,0x9b,0x9e,0x9d,
0x97,0x8b,0x7d,0x6d,0x5e,0x59,0x5d,0x68,0x75,0x7e,0x80,0x7b,0x6e,0x67,0x61,0x64,
0x6b,0x73,0x75,0x78,0x78,0x7b,0x84,0x8f,0x99,0x9e,0x95,0x7f,0x67,0x52,0x46,0x3f,
0x3f,0x3f,0x3d,0x3b,0x38,0x37,0x3a,0x3f,0x41,0x42,0x3c,0x36,0x32,0x36,0x43,0x55,
0x69,0x78,0x7d,0x79,0x6f,0x65,0x5e,0x58,0x55,0x4e,0x46,0x3d,0x36,0x31,0x30,0x34,
0x3a,0x42,0x49,0x50,0x5b,0x68,0x78,0x82,0x88,0x92,0x99,0xa0,0xa6,0xa9,0xa8,0xa2,
0x91,0x7b,0x6a,0x5f,0x59,0x58,0x54,0x4e,0x44,0x3c,0x39,0x42,0x55,0x6c,0x7c,0x84,
0x7f,0x72,0x64,0x58,0x55,0x5c,0x69,0x75,0x7b,0x79,0x72,0x6a,0x65,0x63,0x67,0x6e,
0x75,0x77,0x76,0x76,0x7d,0x8b,0x98,0xa1,0xa4,0xa0,0x90,0x7b,0x68,0x5b,0x59,0x61,
0x6c,0x77,0x83,0x8b,0x92,0x97,0x9b,0xa0,0xa6,0xa8,0xa2,0x9b,0x8e,0x7e,0x6e,0x60,
0x57,0x4e,0x4c,0x46,0x3f,0x3b,0x37,0x33,0x36,0x38,0x3c,0x41,0x3f,0x39,0x33,0x31,
0x36,0x42,0x51,0x62,0x73,0x7f,0x86,0x8b,0x92,0x99,0x9a,0x93,0x83,0x70,0x63,0x5c,
0x5d,0x68,0x74,0x7d,0x80,0x7b,0x71,0x68,0x62,0x62,0x66,0x6c,0x70,0x74,0x7a,0x7e,
0x88,0x95,0x9c,0x9a,0x91,0x81,0x6d,0x5a,0x49,0x40,0x3a,0x39,0x3a,0x3d,0x47,0x54,
0x63,0x74,0x82,0x8c,0x93,0x96,0x98,0x9b,0x9e,0xa0,0x9f,0x99,0x8d,0x7f,0x6f,0x5f,
0x55,0x51,0x4d,0x49,0x44,0x3f,0x3b,0x39,0x36,0x38,0x39,0x41,0x49,0x53,0x5e,0x69,
0x75,0x81,0x8c,0x93,0x9a,0xa0,0xa3,0xa3,0xa0,0x9c,0x9c,0x9e,0x9e,0xa0,0xa1,0xa1,
0xa3,0xa5,0xa5,0xa2,0x9a,0x8b,0x79,0x6a,0x61,0x5d,0x60,0x66,0x6f,0x78,0x7f,0x86,
0x8f,0x99,0xa1,0xa1,0x95,0x82,0x6e,0x60,0x57,0x58,0x60,0x6d,0x77,0x84,0x8b,0x92,
0x9a,0x9d,0x9b,0x93,0x82,0x6d,0x59,0x49,0x40,0x3b,0x3a,0x3a,0x3b,0x3c,0x3b,0x39,
0x39,0x3f,0x49,0x5a,0x6a,0x77,0x7c,0x79,0x71,0x68,0x61,0x5f,0x66,0x6f,0x75,0x78,
0x7b,0x7f,0x88,0x95,0x9d,0x9f,0x9b,0x8b,0x76,0x63,0x57,0x55,0x5e,0x6a,0x76,0x81,
0x8a,0x92,0x97,0x9d,0xa2,0xa7,0xa8,0xa3,0x9c,0x95,0x88,0x77,0x66,0x5c,0x5b,0x63,
0x6d,0x77,0x7d,0x7c,0x73,0x69,0x62,0x60,0x5f,0x59,0x4e,0x3d,0x33,0x30,0x37,0x4a,
0x61,0x78,0x88,0x90,0x92,0x92,0x97,0x95,0x8f,0x82,0x71,0x61,0x58,0x5a,0x65,0x75,
0x82,0x84,0x7d,0x6e,0x62,0x5e,0x61,0x6a,0x73,0x7a,0x7b,0x75,0x6d,0x66,0x64,0x65,
0x67,0x60,0x55,0x48,0x3b,0x35,0x39,0x48,0x5e,0x76,0x88,0x90,0x96,0x98,0x9a,0x9e,
0xa3,0xa6,0xa8,0xa3,0x9e,0x9c,0x9b,0x9b,0x99,0x8f,0x7f,0x6f,0x5f,0x53,0x4b,0x46,
0x42,0x3d,0x36,0x30,0x2f,0x34,0x38,0x3d,0x41,0x43,0x3e,0x39,0x36,0x39,0x44,0x51,
0x60,0x6f,0x7d,0x89,0x92,0x96,0x9b,0x9e,0xa3,0xa4,0xa1,0x9c,0x92,0x82,0x73,0x62,
0x57,0x50,0x4b,0x46,0x41,0x3c,0x37,0x32,0x32,0x34,0x38,0x3f,0x45,0x4e,0x5b,0x6a,
0x79,0x85,0x8e,0x96,0x9e,0xa4,0xa9,0xa6,0xa9,0xa6,0xa0,0x9c,0x9a,0x9b,0xa1,0xa3,
0xa6,0xa7,0xa6,0xa3,0xa1,0xa1,0xa0,0xa1,0x9e,0x95,0x88,0x76,0x64,0x56,0x4e,0x48,
// Line 16
0x3b,0x3a,0x3b,0x3c,0x3c,0x3b,0x39,0x38,0x37,0x35,0x34,0x35,0x38,0x3a,0x3a,0x39,
0x38,0x39,0x3b,0x3a,0x3a,0x3b,0x3b,0x3b,0x3b,0x39,0x37,0x36,0x36,0x35,0x35,0x37,
0x38,0x39,0x38,0x36,0x34,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x34,0x34,0x34,0x36,
0x36,0x38,0x3a,0x39,0x35,0x33,0x35,0x3d,0x4e,0x5f,0x6f,0x79,0x7b,0x74,0x68,0x5d,
0x59,0x5e,0x68,0x70,0x77,0x77,0x72,0x6a,0x62,0x5e,0x60,0x68,0x71,0x78,0x7a,0x77,
0x72,0x6a,0x64,0x61,0x65,0x6b,0x70,0x75,0x76,0x72,0x69,0x61,0x5b,0x5a,0x60,0x69,
0x73,0x7c,0x7c,0x77,0x70,0x68,0x61,0x60,0x62,0x68,0x6e,0x74,0x76,0x71,0x69,0x61,
0x5d,0x5e,0x63,0x6a,0x73,0x78,0x79,0x76,0x6d,0x64,0x5f,0x5d,0x60,0x68,0x72,0x79,
0x7c,0x77,0x6e,0x67,0x65,0x66,0x69,0x6e,0x72,0x74,0x74,0x72,0x76,0x81,0x8f,0x9b,
0xa5,0xaa,0xac,0xa6,0x99,0x88,0x79,0x6d,0x64,0x5d,0x56,0x51,0x4a,0x46,0x3f,0x3b,
0x3f,0x49,0x59,0x6c,0x7e,0x8d,0x95,0x97,0x98,0x99,0x9c,0xa1,0xa1,0xa0,0x96,0x86,
0x74,0x61,0x55,0x54,0x58,0x5f,0x6b,0x75,0x79,0x77,0x6d,0x64,0x5f,0x60,0x66,0x6e,
0x76,0x79,0x77,0x70,0x69,0x65,0x65,0x69,0x6e,0x72,0x72,0x72,0x72,0x76,0x7e,0x8c,
0x9c,0xa7,0xaa,0xa9,0xa3,0x9d,0x9b,0x9b,0x9c,0x9f,0x9c,0x93,0x85,0x77,0x69,0x5b,
0x53,0x48,0x3f,0x38,0x36,0x38,0x45,0x57,0x6b,0x7c,0x81,0x7c,0x72,0x67,0x5d,0x56,
0x50,0x49,0x3c,0x37,0x32,0x39,0x4b,0x62,0x77,0x84,0x81,0x77,0x69,0x5c,0x53,0x4e,
0x4b,0x46,0x3f,0x37,0x31,0x2f,0x33,0x38,0x3d,0x47,0x52,0x59,0x66,0x71,0x7d,0x8b,
0x92,0x95,0x94,0x8c,0x7f,0x6e,0x5d,0x4e,0x45,0x41,0x3f,0x3e,0x3d,0x3b,0x38,0x35,
0x36,0x3b,0x46,0x53,0x5e,0x69,0x75,0x81,0x8d,0x96,0x9b,0x9b,0x93,0x83,0x70,0x61,
0x58,0x59,0x61,0x6d,0x79,0x81,0x7f,0x75,0x68,0x5e,0x5c,0x63,0x6d,0x75,0x78,0x74,
0x6c,0x64,0x5f,0x5f,0x5e,0x5c,0x53,0x46,0x3a,0x30,0x2d,0x30,0x37,0x3c,0x3f,0x3f,
0x3f,0x3d,0x3b,0x37,0x34,0x34,0x34,0x36,0x3b,0x43,0x4e,0x5d,0x6a,0x77,0x83,0x8d,
0x94,0x98,0x96,0x8e,0x81,0x72,0x5f,0x4f,0x44,0x3f,0x3d,0x3e,0x3d,0x3d,0x3e,0x3e,
0x3e,0x40,0x45,0x4f,0x5c,0x69,0x74,0x7f,0x88,0x8f,0x96,0x9c,0xa1,0xa3,0xa5,0xa0,
0x9b,0x99,0x99,0x9b,0x9a,0x98,0x90,0x81,0x71,0x65,0x5e,0x60,0x66,0x6e,0x78,0x81,
0x88,0x8f,0x95,0x99,0x9b,0x95,0x86,0x73,0x63,0x5a,0x59,0x5f,0x6a,0x77,0x80,0x86,
0x8d,0x96,0x9d,0xa2,0xa5,0xa5,0xa3,0xa1,0x9e,0x9c,0x9c,0x9f,0xa0,0xa2,0xa4,0xa6,
0xa6,0xa6,0xa3,0x9f,0x9c,0x9b,0x9c,0xa0,0xa0,0xa0,0xa1,0xa0,0x9d,0x9b,0x9c,0x9f,
0x9d,0x98,0x8e,0x80,0x70,0x63,0x5c,0x5e,0x67,0x73,0x7c,0x7f,0x78,0x6f,0x64,0x5b,
0x5c,0x64,0x6d,0x74,0x77,0x75,0x6e,0x66,0x61,0x5e,0x5f,0x5d,0x56,0x4e,0x3e,0x33,
0x2e,0x30,0x36,0x3c,0x45,0x4d,0x55,0x5e,0x69,0x77,0x86,0x91,0x98,0x9c,0x99,0x8f,
0x83,0x73,0x64,0x54,0x47,0x3e,0x38,0x36,0x3b,0x46,0x53,0x62,0x71,0x7f,0x8a,0x92,
0x98,0x9b,0x98,0x91,0x80,0x6d,0x60,0x59,0x5a,0x61,0x6c,0x76,0x7f,0x88,0x90,0x96,
0xa1,0xa0,0x96,0x85,0x70,0x5e,0x53,0x56,0x63,0x75,0x7e,0x7e,0x77,0x6c,0x62,0x5c,
0x57,0x52,0x4a,0x40,0x34,0x2b,0x2a,0x2f,0x37,0x3e,0x40,0x3e,0x3b,0x39,0x38,0x37,
0x34,0x32,0x32,0x32,0x38,0x41,0x51,0x5f,0x6d,0x7c,0x86,0x8e,0x98,0x9d,0x9a,0x94,
0x85,0x74,0x65,0x5c,0x5a,0x61,0x69,0x76,0x82,0x8c,0x94,0x99,0x9b,0x97,0x8b,0x7a,
0x66,0x53,0x47,0x3e,0x3a,0x39,0x36,0x32,0x30,0x31,0x34,0x39,0x3c,0x3c,0x38,0x32,
0x2f,0x33,0x42,0x54,0x66,0x74,0x78,0x75,0x6e,0x68,0x5e,0x59,0x52,0x4b,0x43,0x3b,
0x36,0x39,0x48,0x5d,0x71,0x81,0x8c,0x94,0x99,0x98,0x91,0x86,0x7b,0x6d,0x62,0x5a,
0x59,0x60,0x69,0x73,0x7c,0x86,0x8f,0x97,0x9c,0x9a,0x8d,0x7d,0x6a,0x5a,0x51,0x53,
0x60,0x71,0x7c,0x7f,0x79,0x6f,0x66,0x61,0x5e,0x5a,0x52,0x44,0x35,0x2c,0x32,0x45,
0x60,0x7c,0x89,0x87,0x7c,0x69,0x5c,0x57,0x61,0x6d,0x77,0x7c,0x78,0x6e,0x67,0x60,
0x5d,0x5e,0x5b,0x50,0x43,0x36,0x30,0x36,0x45,0x5c,0x6f,0x80,0x83,0x7a,0x6c,0x5e,
0x53,0x4d,0x48,0x43,0x3f,0x39,0x35,0x32,0x34,0x39,0x40,0x4a,0x54,0x5e,0x69,0x75,
0x80,0x89,0x90,0x96,0x9b,0x9e,0x9f,0x9f,0x9d,0x9b,0x99,0x98,0x97,0x98,0x94,0x88,
0x77,0x68,0x5d,0x54,0x4b,0x44,0x3d,0x3a,0x3a,0x40,0x52,0x68,0x7c,0x86,0x82,0x73,
0x64,0x5a,0x57,0x5b,0x64,0x6c,0x72,0x77,0x7c,0x85,0x93,0x98,0x9b,0x97,0x89,0x76,
0x61,0x4f,0x44,0x42,0x41,0x42,0x3e,0x3d,0x3b,0x39,0x38,0x3a,0x41,0x4d,0x5a,0x64,
0x72,0x81,0x8d,0x97,0x99,0x96,0x8d,0x80,0x6f,0x5f,0x52,0x48,0x41,0x3b,0x38,0x3a,
0x40,0x4a,0x59,0x69,0x79,0x86,0x8f,0x93,0x95,0x9b,0xa1,0xa5,0xa4,0xa1,0x9d,0x9c,
0x9b,0x99,0x99,0x9f,0xa1,0xa1,0xa1,0x9f,0xa0,0xa3,0xa1,0x9f,0xa0,0xa1,0xa0,0x9e,
0x9d,0x9e,0x9f,0x9e,0x9b,0x9b,0x98,0x90,0x81,0x71,0x62,0x56,0x4f,0x49,0x42,0x3d,
0x38,0x38,0x3c,0x4d,0x62,0x77,0x83,0x81,0x74,0x65,0x59,0x57,0x60,0x6d,0x79,0x7f,
0x7c,0x72,0x6a,0x65,0x64,0x63,0x68,0x6c,0x6d,0x6f,0x71,0x77,0x7f,0x8b,0x97,0xa3,
0xaa,0xac,0xaa,0x9f,0x8f,0x7f,0x70,0x65,0x5d,0x56,0x4e,0x46,0x3c,0x34,0x32,0x3b,
0x49,0x5c,0x70,0x80,0x8c,0x95,0x96,0x93,0x90,0x8c,0x81,0x6f,0x5f,0x4f,0x44,0x3d,
0x39,0x35,0x3a,0x38,0x36,0x34,0x35,0x3a,0x46,0x57,0x67,0x74,0x7a,0x7a,0x72,0x66,
0x5c,0x56,0x52,0x4d,0x45,0x3d,0x35,0x2b,0x28,0x2b,0x35,0x43,0x4d,0x56,0x61,0x6c,
0x78,0x86,0x94,0x9c,0x9f,0x9b,0x8d,0x7b,0x6d,0x60,0x51,0x46,0x3c,0x35,0x32,0x35,
0x40,0x53,0x69,0x7c,0x83,0x7f,0x74,0x69,0x63,0x60,0x62,0x69,0x70,0x75,0x7a,0x7f,
0x88,0x94,0x9d,0x9f,0x98,0x89,0x74,0x60,0x54,0x52,0x5b,0x66,0x72,0x7a,0x87,0x90,
0x97,0x9d,0x9c,0x96,0x86,0x71,0x5d,0x52,0x53,0x5d,0x6b,0x74,0x77,0x76,0x6f,0x68,
0x61,0x61,0x65,0x6b,0x6f,0x73,0x77,0x7e,0x87,0x92,0x9c,0xa5,0xaa,0xaa,0xa4,0x9c,
0x98,0x96,0x96,0x94,0x9b,0x9c,0x9f,0xa1,0xa0,0x9e,0x99,0x90,0x80,0x72,0x64,0x5c,
0x5b,0x63,0x6d,0x77,0x7c,0x79,0x6e,0x65,0x5d,0x5d,0x63,0x6c,0x75,0x78,0x76,0x6d,
0x65,0x62,0x64,0x6c,0x71,0x75,0x77,0x78,0x78,0x7c,0x85,0x92,0x9c,0x9f,0x97,0x86,
0x72,0x5f,0x54,0x54,0x5d,0x6b,0x78,0x83,0x8c,0x96,0x9c,0x9e,0x97,0x8c,0x7b,0x68,
0x56,0x4a,0x42,0x3f,0x3a,0x35,0x34,0x3b,0x4c,0x63,0x77,0x81,0x81,0x77,0x68,0x5b,
0x59,0x63,0x71,0x7e,0x81,0x7c,0x73,0x69,0x64,0x65,0x65,0x60,0x56,0x45,0x34,0x2c,
0x31,0x41,0x54,0x6e,0x82,0x90,0x99,0x9c,0x9b,0x9a,0x90,0x80,0x6e,0x5e,0x56,0x57,
0x5e,0x69,0x74,0x7b,0x7b,0x73,0x69,0x63,0x61,0x64,0x68,0x6c,0x72,0x77,0x7d,0x86,
0x91,0x9d,0xa8,0xae,0xac,0xa6,0x9c,0x8d,0x7c,0x6d,0x64,0x5d,0x59,0x51,0x47,0x42,
0x39,0x38,0x41,0x52,0x66,0x78,0x81,0x7d,0x74,0x6b,0x62,0x59,0x52,0x4b,0x46,0x3e,
0x37,0x39,0x46,0x5a,0x6e,0x7e,0x89,0x91,0x94,0x96,0x98,0x9e,0xa2,0xa4,0xa1,0x9d,
0x9d,0x9c,0x9c,0x9b,0x99,0x99,0x9b,0x9a,0x98,0x93,0x8a,0x7c,0x6d,0x60,0x5b,0x5e,
0x68,0x6e,0x7a,0x80,0x86,0x8d,0x95,0x9c,0xa6,0xaa,0xa8,0xa2,0x9b,0x97,0x95,0x96,
0x98,0x9b,0x98,0x8f,0x7e,0x6b,0x5c,0x58,0x5d,0x68,0x72,0x7c,0x7e,0x78,0x6d,0x61,
0x59,0x56,0x53,0x4d,0x44,0x3a,0x2e,0x25,0x27,0x2e,0x3b,0x47,0x49,0x42,0x3b,0x32,
0x32,0x3b,0x4f,0x68,0x7c,0x86,0x84,0x78,0x6d,0x64,0x61,0x63,0x6b,0x73,0x79,0x7c,
0x7d,0x83,0x89,0x93,0xa0,0xa9,0xac,0xa8,0x9f,0x96,0x92,0x94,0x99,0x9c,0x99,0x8f,
0x81,0x70,0x60,0x58,0x5b,0x66,0x71,0x7b,0x7c,0x78,0x6d,0x64,0x5c,0x5b,0x61,0x6a,
0x71,0x75,0x71,0x6a,0x63,0x5c,0x57,0x57,0x57,0x53,0x48,0x3a,0x2e,0x2a,0x2d,0x33,
0x3d,0x46,0x49,0x42,0x37,0x30,0x32,0x3c,0x4b,0x5c,0x6d,0x7c,0x85,0x8e,0x96,0x9b,
0x9a,0x92,0x81,0x6e,0x5e,0x57,0x56,0x63,0x6f,0x79,0x7d,0x78,0x6e,0x66,0x60,0x5a,
0x57,0x50,0x46,0x3a,0x2f,0x28,0x28,0x2e,0x3a,0x41,0x41,0x3a,0x32,0x30,0x32,0x3d,
0x50,0x65,0x77,0x7e,0x79,0x70,0x68,0x5f,0x58,0x52,0x4d,0x44,0x3b,0x38,0x3b,0x4b,
0x63,0x77,0x83,0x84,0x7a,0x69,0x59,0x4d,0x47,0x45,0x40,0x38,0x2f,0x2b,0x2a,0x2d,
0x34,0x3d,0x46,0x53,0x5f,0x6b,0x73,0x74,0x6f,0x68,0x61,0x5d,0x61,0x68,0x6f,0x75,
0x7a,0x7f,0x86,0x92,0x9e,0xa8,0xaf,0xae,0xa7,0x9f,0x99,0x98,0x99,0x9b,0x9c,0x9c,
0x9f,0x9d,0x9b,0x98,0x90,0x83,0x75,0x64,0x58,0x51,0x4a,0x45,0x41,0x3c,0x38,0x34,
0x32,0x31,0x34,0x3a,0x41,0x4a,0x55,0x63,0x71,0x80,0x8a,0x94,0x9d,0xa3,0xa6,0xa8,
0xa6,0xa5,0xa3,0xa3,0xa0,0x9f,0x9e,0x9f,0xa0,0xa1,0xa1,0x9c,0x92,0x83,0x73,0x67,
0x5b,0x52,0x4b,0x45,0x40,0x3a,0x34,0x30,0x30,0x33,0x36,0x36,0x35,0x34,0x33,0x31,
0x2f,0x32,0x35,0x36,0x36,0x36,0x36,0x36,0x3a,0x3b,0x3a,0x3a,0x3a,0x38,0x38,0x3a,
0x3d,0x3d,0x3e,0x38,0x33,0x33,0x35,0x36,0x38,0x39,0x38,0x39,0x39,0x38,0x38,0x38,
// Line 17
0x39,0x3c,0x3e,0x3e,0x3e,0x3e,0x3d,0x3b,0x39,0x3a,0x3a,0x39,0x38,0x36,0x34,0x37,
0x38,0x3a,0x3a,0x38,0x39,0x3a,0x3b,0x3a,0x3b,0x3d,0x3d,0x3c,0x3a,0x38,0x38,0x37,
0x38,0x39,0x3a,0x39,0x38,0x37,0x36,0x36,0x39,0x3d,0x3e,0x3c,0x38,0x34,0x31,0x32,
0x36,0x3a,0x3d,0x3a,0x35,0x34,0x38,0x42,0x52,0x67,0x76,0x7e,0x7c,0x71,0x63,0x5b,
0x5a,0x5f,0x6a,0x75,0x7b,0x7a,0x71,0x67,0x62,0x62,0x66,0x6d,0x74,0x77,0x79,0x76,
0x70,0x67,0x63,0x62,0x64,0x6b,0x73,0x7a,0x7c,0x78,0x6f,0x67,0x5f,0x5f,0x66,0x6e,
0x75,0x7b,0x7c,0x77,0x6e,0x69,0x64,0x62,0x67,0x6d,0x74,0x78,0x76,0x73,0x6d,0x67,
0x61,0x60,0x65,0x6d,0x75,0x79,0x77,0x71,0x6a,0x63,0x5e,0x60,0x67,0x72,0x7a,0x7c,
0x79,0x74,0x6d,0x67,0x63,0x63,0x65,0x6a,0x6e,0x70,0x6e,0x73,0x78,0x82,0x8e,0x9a,
0xa5,0xaf,0xaf,0xa6,0x98,0x88,0x79,0x6b,0x61,0x59,0x55,0x53,0x4e,0x46,0x3e,0x3b,
0x40,0x4d,0x5f,0x74,0x85,0x8f,0x93,0x94,0x96,0x9a,0x9f,0xa2,0xa4,0xa2,0x98,0x88,
0x75,0x67,0x5e,0x5b,0x5e,0x67,0x71,0x78,0x79,0x76,0x70,0x67,0x61,0x64,0x6a,0x73,
0x7b,0x7d,0x7a,0x71,0x69,0x63,0x64,0x6a,0x70,0x73,0x74,0x72,0x71,0x76,0x81,0x90,
0x9d,0xa5,0xa8,0xa7,0xa2,0x9c,0x98,0x9a,0x9f,0xa1,0x9f,0x96,0x86,0x79,0x69,0x59,
0x50,0x47,0x3e,0x37,0x32,0x35,0x42,0x57,0x6e,0x7c,0x80,0x79,0x6e,0x64,0x5d,0x58,
0x55,0x4e,0x44,0x38,0x35,0x3d,0x51,0x69,0x7c,0x88,0x85,0x78,0x68,0x5e,0x5e,0x64,
0x6d,0x72,0x75,0x79,0x7f,0x87,0x92,0x9d,0xa7,0xaa,0xa6,0x9e,0x95,0x8b,0x80,0x70,
0x65,0x59,0x4e,0x47,0x43,0x40,0x42,0x3d,0x36,0x32,0x32,0x38,0x40,0x4a,0x54,0x61,
0x6d,0x79,0x82,0x8b,0x94,0x9b,0x9c,0x94,0x84,0x75,0x67,0x5e,0x5d,0x63,0x6e,0x7c,
0x86,0x8b,0x90,0x95,0x9c,0xa2,0xa5,0xa4,0xa1,0x9c,0x97,0x94,0x96,0x9b,0x9d,0x98,
0x8b,0x79,0x67,0x59,0x54,0x5b,0x67,0x74,0x7b,0x7a,0x73,0x6b,0x64,0x5e,0x5b,0x59,
0x54,0x4b,0x40,0x36,0x30,0x30,0x34,0x3a,0x44,0x4f,0x59,0x5d,0x6a,0x74,0x80,0x8b,
0x93,0x96,0x97,0x8e,0x7f,0x6e,0x5d,0x4e,0x44,0x3f,0x3c,0x3e,0x40,0x40,0x3e,0x3a,
0x38,0x3e,0x4a,0x5a,0x69,0x75,0x7c,0x79,0x71,0x66,0x5d,0x5b,0x61,0x69,0x71,0x76,
0x75,0x70,0x68,0x61,0x61,0x65,0x6d,0x74,0x7a,0x7b,0x74,0x6c,0x65,0x62,0x64,0x69,
0x6d,0x70,0x73,0x76,0x79,0x80,0x8a,0x95,0xa0,0xa3,0x9b,0x8c,0x77,0x63,0x56,0x53,
0x5a,0x69,0x77,0x83,0x8c,0x93,0x98,0x9c,0x9f,0xa3,0xa4,0xa1,0x97,0x8a,0x7d,0x71,
0x66,0x5b,0x51,0x4a,0x44,0x41,0x3c,0x39,0x39,0x39,0x36,0x38,0x3a,0x44,0x53,0x63,
0x70,0x7a,0x7c,0x75,0x6b,0x63,0x65,0x6d,0x76,0x7d,0x81,0x7d,0x74,0x6a,0x62,0x5e,
0x5b,0x5a,0x53,0x48,0x3d,0x34,0x2e,0x30,0x35,0x3d,0x48,0x53,0x5e,0x6a,0x74,0x79,
0x77,0x70,0x65,0x60,0x63,0x6b,0x71,0x77,0x7a,0x7b,0x7e,0x84,0x90,0x9f,0xa5,0x9d,
0x8b,0x74,0x63,0x5a,0x5a,0x64,0x71,0x7d,0x80,0x7b,0x74,0x6d,0x68,0x67,0x69,0x6e,
0x73,0x77,0x7b,0x82,0x8d,0x99,0xa1,0xa9,0xa8,0xa6,0xa1,0x9a,0x94,0x95,0x98,0x9a,
0x9b,0x95,0x8a,0x7c,0x70,0x61,0x55,0x49,0x43,0x3f,0x3c,0x38,0x37,0x37,0x36,0x36,
0x3a,0x44,0x53,0x66,0x75,0x7e,0x7e,0x73,0x5e,0x5d,0x63,0x76,0x81,0x89,0x86,0x7d,
0x70,0x64,0x5d,0x5e,0x61,0x5d,0x51,0x40,0x31,0x2d,0x38,0x4e,0x69,0x80,0x8a,0x84,
0x76,0x64,0x58,0x53,0x4f,0x49,0x46,0x3d,0x3a,0x40,0x50,0x69,0x7f,0x8b,0x87,0x79,
0x69,0x5d,0x5b,0x62,0x6d,0x79,0x81,0x7d,0x73,0x69,0x62,0x61,0x66,0x6e,0x75,0x79,
0x79,0x75,0x6e,0x67,0x61,0x5d,0x5d,0x5a,0x53,0x49,0x3d,0x32,0x31,0x2f,0x31,0x39,
0x44,0x4e,0x54,0x5b,0x64,0x73,0x82,0x8f,0x97,0x9a,0x9b,0xa0,0xa5,0xa6,0xa0,0x94,
0x85,0x74,0x64,0x59,0x5a,0x67,0x74,0x7c,0x7e,0x7b,0x75,0x6e,0x67,0x63,0x5f,0x5a,
0x51,0x43,0x37,0x2f,0x33,0x44,0x5b,0x71,0x84,0x8e,0x91,0x93,0x93,0x97,0x9a,0x9e,
0x9d,0x98,0x8f,0x80,0x70,0x66,0x5b,0x51,0x49,0x42,0x3e,0x3c,0x3b,0x38,0x37,0x36,
0x39,0x40,0x47,0x4f,0x5d,0x6e,0x7b,0x84,0x8a,0x91,0x97,0x9f,0xa2,0xa2,0xa0,0x99,
0x8e,0x7e,0x6e,0x61,0x57,0x51,0x4b,0x46,0x42,0x3c,0x36,0x36,0x34,0x38,0x3e,0x3f,
0x3d,0x3b,0x37,0x34,0x36,0x3e,0x4c,0x5a,0x6d,0x7a,0x85,0x8f,0x95,0x9a,0x9c,0x9f,
0xa2,0xa4,0xa1,0x97,0x89,0x79,0x6a,0x61,0x5e,0x64,0x6d,0x76,0x7c,0x81,0x88,0x90,
0x97,0x9d,0x9b,0x91,0x80,0x69,0x55,0x4c,0x51,0x60,0x70,0x7b,0x80,0x7d,0x75,0x6c,
0x67,0x67,0x69,0x6a,0x6f,0x72,0x77,0x81,0x8c,0x97,0xa3,0xa9,0xab,0xaa,0xa6,0x9e,
0x92,0x83,0x71,0x63,0x5b,0x5d,0x64,0x6e,0x76,0x7b,0x79,0x6f,0x66,0x5f,0x5c,0x58,
0x53,0x4a,0x40,0x35,0x2c,0x28,0x2b,0x34,0x3d,0x3f,0x3f,0x39,0x32,0x33,0x39,0x43,
0x53,0x64,0x72,0x7e,0x88,0x91,0x98,0x9c,0x9a,0x90,0x80,0x6d,0x60,0x5d,0x61,0x6a,
0x76,0x80,0x82,0x7c,0x72,0x67,0x5f,0x5a,0x54,0x4d,0x44,0x3b,0x34,0x30,0x31,0x36,
0x3b,0x41,0x4b,0x59,0x64,0x6d,0x71,0x73,0x6a,0x60,0x56,0x56,0x5a,0x69,0x74,0x7c,
0x7d,0x78,0x70,0x67,0x64,0x69,0x73,0x7b,0x7d,0x7c,0x74,0x6b,0x64,0x61,0x62,0x67,
0x6e,0x72,0x73,0x73,0x74,0x78,0x80,0x8c,0x9a,0xa9,0xaf,0xac,0xa3,0x9a,0x93,0x92,
0x95,0x9b,0x9d,0x99,0x8d,0x7c,0x6c,0x61,0x5d,0x60,0x64,0x6a,0x74,0x7d,0x86,0x8f,
0x97,0x9d,0x9c,0x92,0x82,0x6d,0x62,0x5a,0x5a,0x64,0x71,0x7c,0x88,0x90,0x97,0x9f,
0xa1,0x9f,0x94,0x84,0x70,0x61,0x59,0x5a,0x64,0x70,0x7a,0x82,0x8c,0x94,0x9b,0x9d,
0x97,0x8c,0x7c,0x67,0x53,0x47,0x41,0x3d,0x3b,0x38,0x35,0x35,0x37,0x3b,0x3d,0x3c,
0x38,0x35,0x34,0x36,0x38,0x3c,0x3c,0x38,0x34,0x37,0x41,0x54,0x6a,0x79,0x7e,0x79,
0x6c,0x5f,0x5a,0x5e,0x67,0x71,0x74,0x76,0x7b,0x82,0x8d,0x98,0x9f,0x9f,0x94,0x81,
0x6b,0x58,0x49,0x3f,0x39,0x39,0x3b,0x3f,0x47,0x53,0x5f,0x70,0x7e,0x8a,0x92,0x96,
0x94,0x8f,0x85,0x77,0x6a,0x5e,0x52,0x48,0x41,0x3d,0x39,0x38,0x37,0x38,0x3e,0x44,
0x47,0x44,0x40,0x3a,0x37,0x39,0x40,0x4e,0x5e,0x6d,0x78,0x80,0x85,0x8d,0x95,0x9c,
0xa1,0xa5,0xa4,0x9f,0x93,0x85,0x78,0x6d,0x62,0x58,0x4e,0x46,0x40,0x3d,0x3d,0x42,
0x4e,0x5e,0x70,0x7f,0x8c,0x93,0x97,0x98,0x9a,0x9d,0xa0,0x9f,0x9c,0x93,0x89,0x7a,
0x6c,0x62,0x5d,0x5e,0x67,0x71,0x7b,0x7f,0x7c,0x74,0x69,0x60,0x5f,0x69,0x75,0x7d,
0x7c,0x76,0x6c,0x61,0x5d,0x5e,0x60,0x5d,0x51,0x41,0x34,0x2f,0x38,0x4e,0x68,0x7e,
0x89,0x86,0x79,0x65,0x5d,0x59,0x5d,0x67,0x6e,0x73,0x7e,0x85,0x8c,0x95,0x9b,0x9b,
0x93,0x83,0x6c,0x59,0x4b,0x42,0x3d,0x3c,0x3d,0x3c,0x3a,0x38,0x38,0x3b,0x40,0x47,
0x52,0x5f,0x6d,0x7b,0x88,0x93,0x9b,0x9c,0x98,0x8f,0x82,0x71,0x63,0x55,0x48,0x3d,
0x3b,0x39,0x3b,0x44,0x51,0x5f,0x70,0x7e,0x89,0x94,0x9a,0x98,0x91,0x87,0x79,0x6c,
0x5e,0x53,0x48,0x40,0x38,0x32,0x37,0x44,0x58,0x6d,0x7b,0x84,0x84,0x7b,0x6c,0x60,
0x5c,0x61,0x6a,0x71,0x75,0x78,0x7c,0x82,0x8b,0x98,0xa4,0xa9,0xa9,0xa2,0x9a,0x96,
0x97,0x9b,0x9e,0xa4,0xa5,0xa4,0xa2,0xa0,0x9e,0x9f,0x9c,0x9a,0x99,0x9a,0x9a,0x9b,
0x9c,0x9c,0x9b,0x93,0x88,0x7a,0x6c,0x60,0x59,0x5d,0x67,0x73,0x7b,0x7a,0x73,0x6b,
0x62,0x60,0x63,0x69,0x6e,0x73,0x76,0x78,0x7b,0x89,0x95,0x9f,0xa0,0x95,0x81,0x6f,
0x5d,0x53,0x57,0x64,0x73,0x7d,0x80,0x7c,0x75,0x6c,0x63,0x5a,0x54,0x4f,0x47,0x3e,
0x33,0x2e,0x2f,0x34,0x3b,0x44,0x4d,0x57,0x62,0x6c,0x75,0x82,0x8e,0x97,0x9a,0x98,
0x8f,0x82,0x70,0x5d,0x4c,0x42,0x3b,0x36,0x38,0x39,0x38,0x35,0x31,0x31,0x3a,0x49,
0x5a,0x6a,0x76,0x7b,0x79,0x71,0x67,0x61,0x61,0x65,0x69,0x6e,0x73,0x78,0x7e,0x85,
0x8f,0x9e,0xab,0xb0,0xaf,0xa8,0xa0,0x99,0x98,0x9b,0x9e,0xa0,0x9e,0x90,0x7f,0x6d,
0x61,0x5c,0x5e,0x64,0x70,0x79,0x7d,0x78,0x70,0x66,0x60,0x61,0x66,0x70,0x79,0x7c,
0x79,0x70,0x65,0x5e,0x5f,0x67,0x70,0x79,0x7e,0x7e,0x77,0x6e,0x69,0x68,0x69,0x67,
0x5e,0x51,0x42,0x33,0x2e,0x37,0x4c,0x67,0x7b,0x85,0x83,0x76,0x65,0x54,0x4d,0x4a,
0x49,0x45,0x3c,0x32,0x2e,0x30,0x37,0x41,0x47,0x47,0x40,0x35,0x30,0x36,0x44,0x57,
0x69,0x76,0x7a,0x77,0x6f,0x65,0x5b,0x57,0x53,0x4e,0x48,0x3e,0x36,0x30,0x2d,0x2f,
0x37,0x40,0x44,0x3c,0x38,0x31,0x34,0x40,0x51,0x66,0x79,0x7e,0x79,0x6f,0x61,0x58,
0x59,0x61,0x6b,0x74,0x79,0x79,0x74,0x6c,0x66,0x62,0x60,0x5d,0x55,0x4a,0x3b,0x2f,
0x29,0x2b,0x32,0x3a,0x3f,0x40,0x3c,0x35,0x30,0x2d,0x2e,0x30,0x34,0x38,0x39,0x36,
0x38,0x3b,0x3c,0x3a,0x36,0x32,0x32,0x33,0x37,0x40,0x4e,0x5e,0x6c,0x78,0x82,0x8e,
0x98,0x9f,0x9d,0x96,0x88,0x77,0x67,0x5d,0x5c,0x67,0x73,0x7c,0x81,0x7c,0x72,0x66,
0x5e,0x5e,0x67,0x71,0x77,0x76,0x71,0x68,0x5f,0x5b,0x5a,0x5a,0x59,0x50,0x42,0x35,
0x2b,0x2a,0x2b,0x35,0x3c,0x41,0x42,0x3e,0x37,0x33,0x31,0x31,0x36,0x38,0x39,0x3a,
0x38,0x36,0x36,0x36,0x37,0x37,0x35,0x33,0x34,0x37,0x3a,0x3a,0x3b,0x39,0x38,0x36,
// Line 18
0x38,0x38,0x37,0x38,0x38,0x38,0x38,0x38,0x38,0x3a,0x3b,0x3a,0x39,0x38,0x38,0x38,
0x38,0x38,0x38,0x37,0x35,0x34,0x34,0x35,0x38,0x39,0x38,0x36,0x36,0x36,0x34,0x35,
0x38,0x3d,0x40,0x43,0x46,0x4a,0x50,0x53,0x55,0x58,0x59,0x59,0x5a,0x5b,0x5c,0x5a,
0x5c,0x5b,0x5b,0x5b,0x5c,0x5b,0x5c,0x59,0x56,0x57,0x56,0x53,0x54,0x56,0x57,0x59,
0x58,0x57,0x57,0x59,0x59,0x58,0x59,0x5b,0x5c,0x5b,0x5a,0x59,0x5a,0x5a,0x59,0x58,
0x58,0x57,0x57,0x57,0x59,0x5a,0x5b,0x5b,0x5c,0x5d,0x5e,0x5c,0x5c,0x5a,0x57,0x57,
0x57,0x55,0x57,0x56,0x57,0x57,0x56,0x57,0x59,0x5a,0x5b,0x5b,0x5b,0x5c,0x5b,0x59,
0x57,0x57,0x56,0x56,0x55,0x55,0x55,0x57,0x59,0x5a,0x5b,0x5c,0x5d,0x5d,0x5d,0x5c,
0x5b,0x5a,0x5b,0x59,0x58,0x59,0x59,0x57,0x57,0x57,0x59,0x5a,0x5a,0x5a,0x59,0x5b,
0x5a,0x5a,0x5b,0x5c,0x5c,0x5a,0x57,0x56,0x57,0x57,0x57,0x56,0x57,0x56,0x56,0x56,
0x56,0x58,0x5a,0x5a,0x59,0x59,0x5b,0x5b,0x5a,0x5b,0x5c,0x5d,0x5d,0x5b,0x59,0x56,
0x55,0x56,0x55,0x54,0x54,0x57,0x57,0x59,0x59,0x5c,0x5e,0x5d,0x5b,0x58,0x58,0x59,
0x58,0x57,0x54,0x54,0x54,0x53,0x54,0x57,0x5b,0x5e,0x5d,0x5c,0x5b,0x5b,0x5a,0x59,
0x59,0x5b,0x5b,0x5a,0x5a,0x59,0x5a,0x5c,0x5b,0x59,0x59,0x5a,0x5b,0x5b,0x59,0x59,
0x58,0x58,0x57,0x57,0x59,0x5d,0x5e,0x5e,0x59,0x57,0x59,0x59,0x5b,0x5b,0x5c,0x5b,
0x5b,0x59,0x5a,0x5b,0x5d,0x5d,0x5b,0x59,0x59,0x59,0x59,0x59,0x59,0x5b,0x5a,0x58,
0x57,0x57,0x59,0x5a,0x5b,0x5b,0x5a,0x59,0x57,0x57,0x59,0x59,0x5b,0x5c,0x59,0x57,
0x58,0x57,0x56,0x57,0x59,0x5b,0x5b,0x5a,0x59,0x5a,0x5b,0x5a,0x59,0x5b,0x5d,0x5c,
0x59,0x55,0x53,0x56,0x57,0x57,0x57,0x56,0x55,0x54,0x55,0x56,0x59,0x5d,0x5e,0x5c,
0x59,0x57,0x56,0x59,0x5f,0x61,0x61,0x5c,0x56,0x4e,0x4e,0x57,0x67,0x7a,0x87,0x88,
0x82,0x73,0x67,0x62,0x64,0x67,0x68,0x60,0x56,0x4e,0x4b,0x4e,0x57,0x61,0x69,0x67,
0x60,0x59,0x56,0x55,0x57,0x5a,0x5e,0x5d,0x5b,0x5b,0x5a,0x5b,0x5d,0x5c,0x5a,0x58,
0x59,0x59,0x5a,0x5b,0x5a,0x59,0x5c,0x5a,0x58,0x59,0x5d,0x5d,0x5c,0x5b,0x5a,0x5b,
0x5c,0x5b,0x59,0x57,0x57,0x59,0x59,0x59,0x59,0x5b,0x5c,0x5c,0x5d,0x5f,0x5f,0x5d,
0x5b,0x59,0x59,0x58,0x59,0x5b,0x5a,0x59,0x59,0x5a,0x5b,0x5a,0x5d,0x5c,0x59,0x57,
0x58,0x59,0x59,0x57,0x57,0x58,0x57,0x57,0x56,0x58,0x59,0x59,0x59,0x57,0x57,0x59,
0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5d,0x5c,0x5c,0x5b,0x5b,0x59,0x59,0x59,0x59,0x58,
0x57,0x58,0x59,0x5a,0x5a,0x5d,0x5d,0x5c,0x5c,0x5b,0x59,0x5a,0x5c,0x5c,0x5a,0x58,
0x57,0x57,0x59,0x59,0x59,0x5b,0x5c,0x5b,0x5b,0x59,0x59,0x5a,0x5b,0x5a,0x5b,0x5c,
0x5c,0x5d,0x5b,0x59,0x59,0x5b,0x5b,0x5a,0x5a,0x59,0x59,0x5a,0x5b,0x5c,0x5d,0x5c,
0x5b,0x5c,0x5b,0x59,0x56,0x55,0x56,0x57,0x58,0x58,0x57,0x59,0x5b,0x59,0x5a,0x5a,
0x5b,0x5c,0x5c,0x59,0x5a,0x5c,0x5c,0x5b,0x5b,0x5b,0x5a,0x59,0x59,0x59,0x5b,0x59,
0x59,0x59,0x58,0x57,0x58,0x59,0x59,0x5a,0x5b,0x5b,0x57,0x57,0x58,0x59,0x5b,0x5a,
0x59,0x59,0x58,0x55,0x57,0x59,0x5b,0x5e,0x5d,0x5d,0x5c,0x5b,0x5c,0x5c,0x5d,0x5a,
0x59,0x57,0x56,0x54,0x54,0x56,0x59,0x5a,0x5b,0x5c,0x5d,0x5c,0x5b,0x5c,0x5d,0x5e,
0x5c,0x5a,0x57,0x57,0x56,0x56,0x55,0x54,0x55,0x54,0x56,0x57,0x57,0x58,0x59,0x5a,
0x5c,0x5c,0x5f,0x5f,0x5f,0x5d,0x59,0x59,0x58,0x57,0x57,0x55,0x55,0x57,0x57,0x57,
0x57,0x57,0x57,0x59,0x5c,0x5d,0x5d,0x5d,0x5b,0x5b,0x59,0x58,0x57,0x57,0x59,0x58,
0x56,0x51,0x4d,0x4c,0x4b,0x49,0x47,0x46,0x48,0x48,0x47,0x43,0x42,0x44,0x46,0x44,
0x44,0x42,0x40,0x40,0x40,0x40,0x42,0x41,0x40,0x42,0x44,0x44,0x44,0x45,0x47,0x47,
0x46,0x46,0x46,0x47,0x49,0x4b,0x49,0x44,0x44,0x47,0x49,0x47,0x47,0x48,0x49,0x47,
0x45,0x44,0x48,0x4b,0x4b,0x47,0x45,0x43,0x41,0x42,0x44,0x44,0x45,0x46,0x44,0x45,
0x46,0x47,0x46,0x49,0x47,0x47,0x46,0x44,0x42,0x43,0x43,0x42,0x42,0x42,0x42,0x44,
0x43,0x42,0x43,0x46,0x49,0x4b,0x4a,0x49,0x49,0x4b,0x49,0x47,0x47,0x47,0x45,0x45,
0x44,0x44,0x44,0x45,0x44,0x46,0x46,0x47,0x48,0x47,0x45,0x45,0x45,0x46,0x44,0x42,
0x42,0x42,0x41,0x40,0x40,0x43,0x45,0x44,0x44,0x46,0x49,0x49,0x48,0x47,0x49,0x49,
0x47,0x44,0x45,0x44,0x45,0x47,0x46,0x44,0x46,0x45,0x44,0x43,0x45,0x49,0x49,0x46,
0x45,0x47,0x49,0x48,0x45,0x45,0x45,0x45,0x45,0x43,0x43,0x44,0x42,0x41,0x42,0x44,
0x48,0x49,0x46,0x43,0x42,0x43,0x44,0x44,0x46,0x49,0x4e,0x54,0x5a,0x64,0x71,0x7f,
0x8c,0x98,0xa0,0xa7,0xae,0xb1,0xb2,0xb5,0xb6,0xb6,0xb3,0xb3,0xb3,0xb3,0xb3,0xb2,
0xb1,0xb1,0xb2,0xb1,0xb0,0xb0,0xb1,0xb2,0xb1,0xb0,0xb0,0xb3,0xb6,0xb6,0xb5,0xb1,
0xb0,0xb1,0xb1,0xaf,0xaf,0xaf,0xb0,0xae,0xac,0xac,0xae,0xae,0xaf,0xb1,0xb1,0xb2,
0xb3,0xb3,0xb4,0xb3,0xb5,0xb4,0xb3,0xb5,0xb3,0xb0,0xaf,0xaf,0xb0,0xb1,0xb0,0xad,
0xae,0xaf,0xb1,0xb1,0xb2,0xb2,0xb2,0xb2,0xb1,0xb0,0xb0,0xb1,0xb0,0xb1,0xaf,0xaf,
0xb0,0xb0,0xb0,0xb0,0xb2,0xb3,0xb2,0xb0,0xae,0xaf,0xb1,0xb0,0xaf,0xaf,0xb0,0xad,
0xad,0xac,0xaf,0xaf,0xb1,0xae,0xaf,0xb0,0xb2,0xb2,0xb2,0xb0,0xaf,0xb0,0xb0,0xb0,
0xb2,0xb1,0xb0,0xaf,0xae,0xaf,0xb1,0xb0,0xaf,0xb0,0xb0,0xb1,0xaf,0xb0,0xb1,0xb2,
0xb3,0xb2,0xb0,0xb0,0xaf,0xaf,0xaf,0xae,0xaf,0xb0,0xaf,0xae,0xaf,0xb2,0xb3,0xb2,
0xb2,0xb1,0xb1,0xb2,0xb0,0xaf,0xaf,0xaf,0xae,0xae,0xae,0xb0,0xb1,0xb1,0xb0,0xaf,
0xaf,0xb0,0xb1,0xb2,0xb2,0xb0,0xaf,0xac,0xa9,0xa7,0xa6,0xa6,0xa4,0xa0,0x9d,0x9d,
0x9d,0x9d,0x9e,0xa1,0xa3,0xa4,0xa3,0xa1,0x9f,0xa1,0xa1,0xa0,0x9f,0x9d,0x9d,0x9c,
0x9c,0x9c,0x9c,0x9d,0x9d,0x9f,0xa0,0xa1,0xa0,0xa2,0xa1,0xa0,0xa1,0xa2,0xa1,0xa1,
0xa0,0x9f,0x9e,0x9d,0x9e,0x9f,0x9e,0x9e,0xa0,0xa1,0xa2,0xa1,0xa0,0x9d,0x9c,0x9d,
0x9e,0x9f,0xa0,0x9f,0x9d,0x9d,0x9c,0x9d,0x9f,0xa1,0xa1,0xa0,0x9e,0x9d,0x9c,0x9c,
0x9d,0xa0,0xa2,0xa2,0xa0,0x9e,0x9d,0x9e,0x9f,0x9f,0x9f,0xa1,0xa0,0x9f,0x9d,0x9f,
0xa1,0xa4,0xa4,0xa2,0xa1,0xa1,0xa1,0xa0,0x9f,0x9f,0x9e,0x9f,0x9f,0x9e,0x9c,0x9e,
0x9d,0x9d,0x9c,0x9c,0x9a,0x9d,0x9d,0x9e,0xa1,0xa2,0xa2,0xa2,0xa2,0xa4,0xa5,0xa5,
0xa4,0xa4,0xa2,0x9f,0x9f,0xa0,0xa0,0xa1,0xa1,0xa1,0xa1,0xa3,0xa4,0xa3,0xa1,0xa0,
0x9f,0xa0,0x9f,0x9d,0x9e,0x9f,0x9e,0x9d,0x9e,0xa0,0xa0,0xa2,0xa0,0x9e,0x9f,0xa0,
0x9e,0x9e,0x9d,0x9e,0x9f,0x9f,0xa0,0xa1,0xa1,0xa1,0xa0,0x9e,0x9e,0x9f,0xa0,0x9f,
0x9e,0x9f,0x9f,0x9f,0xa0,0xa1,0xa0,0xa2,0xa1,0xa0,0xa1,0xa1,0xa0,0x9f,0x9f,0xa0,
0xa0,0xa0,0x9d,0x9e,0xa0,0xa0,0x9e,0x9c,0x9a,0x9d,0xa0,0xa1,0xa1,0xa1,0xa1,0x9e,
0x9d,0x9e,0x9e,0x9f,0xa0,0xa0,0x9f,0xa0,0xa0,0xa0,0x9f,0x9f,0x9f,0xa1,0xa1,0xa1,
0xa1,0xa1,0xa0,0x9e,0x9f,0xa2,0xa0,0xa2,0x9e,0x9b,0x9c,0x9d,0x9d,0xa1,0xa1,0x9f,
0xa1,0xa1,0xa1,0xa1,0xa4,0xa1,0x9f,0x9d,0x9d,0x9d,0xa1,0xa0,0x9f,0xa0,0x9f,0x9e,
0xa0,0xa1,0xa2,0xa4,0xa2,0xa1,0xa1,0xa1,0xa1,0xa1,0xa0,0xa1,0xa1,0xa0,0x9e,0x9e,
0x9f,0xa0,0x9f,0x9d,0x9c,0x9e,0xa2,0xa4,0xa1,0x9f,0x9d,0x9a,0x9b,0x9d,0xa1,0xa5,
0xa2,0x98,0x87,0x77,0x6c,0x68,0x71,0x79,0x85,0x90,0x94,0x94,0x97,0x9c,0xa3,0xaa,
0xad,0xac,0xa4,0x9d,0x96,0x93,0x98,0x9e,0xa2,0xa3,0xa1,0xa0,0xa0,0x9f,0x9e,0xa0,
0xa2,0xa2,0xa1,0xa0,0xa1,0xa4,0xa2,0x9e,0x9d,0x9d,0x9c,0x9d,0x9e,0x9f,0xa0,0xa0,
0x9e,0x9f,0xa0,0xa0,0x9f,0x9f,0x9f,0xa0,0x9f,0xa1,0xa1,0x9f,0x9e,0x9e,0x9c,0x9d,
0x9d,0x9d,0x9f,0xa0,0xa0,0xa1,0xa1,0xa2,0xa4,0xa2,0xa1,0xa1,0xa0,0xa0,0x9e,0x9e,
0x9d,0x9c,0x9d,0x9d,0x9d,0xa0,0xa2,0xa1,0x9f,0x9e,0xa0,0xa2,0xa2,0xa2,0xa0,0xa1,
0xa0,0x9e,0xa0,0xa1,0xa3,0xa4,0x9e,0x9c,0x9c,0x9d,0x9e,0x9d,0xa0,0xa0,0xa0,0xa0,
0xa0,0xa1,0xa2,0xa0,0x9e,0x9d,0x9c,0x9c,0x9c,0x9b,0x9c,0x9e,0xa1,0xa1,0x9f,0x9d,
0x9d,0x9f,0x9f,0x9e,0x9e,0x9d,0x9c,0x9a,0x9b,0x9d,0x9e,0x9f,0x9e,0x9d,0x9e,0xa0,
0xa2,0xa2,0xa2,0xa2,0xa2,0xa1,0x9f,0x9d,0xa1,0xa1,0x9f,0x9e,0x9e,0x9f,0x9f,0x9e,
0x9c,0x9e,0x9e,0x9d,0x9c,0x9b,0x9b,0x9c,0x9c,0x9d,0xa0,0xa1,0xa1,0x9f,0x9f,0x9e,
0x9f,0x9f,0x9e,0x9d,0x9e,0x9e,0x9f,0xa0,0xa0,0xa1,0xa1,0xa0,0xa0,0x9e,0xa2,0xa1,
0xa1,0xa3,0xa3,0xa1,0xa0,0x9f,0x9d,0x9e,0x9d,0x9d,0x9b,0x9a,0x99,0x9b,0x9d,0x9d,
0x9e,0x9f,0x9e,0x9c,0x9d,0x9e,0xa0,0xa1,0xa0,0x9d,0x9d,0x9d,0x9d,0x9e,0x9f,0xa0,
0x9f,0x9d,0x9c,0x9c,0x9d,0x9f,0x9f,0xa0,0x9f,0xa0,0x9f,0x9e,0x9d,0x9f,0xa0,0xa0,
0xa0,0x9f,0x9f,0xa0,0xa1,0xa1,0x9f,0x9e,0x9d,0x9c,0x9c,0x9c,0x9c,0x9d,0x9c,0x9c,
0x9d,0x9d,0x9e,0x9d,0x9c,0x9d,0x9f,0xa1,0xa2,0xa3,0xa7,0xa6,0xa4,0xa2,0xa2,0xa3,
0xa6,0xa4,0xa0,0x9e,0x9d,0x9e,0x9c,0x9c,0x9e,0xa2,0xa3,0xa1,0x9e,0x9d,0x9c,0x9b,
0x99,0x91,0x88,0x7e,0x72,0x66,0x5c,0x54,0x4c,0x44,0x3c,0x36,0x36,0x38,0x3a,0x3b,
// Line 19
0x35,0x36,0x37,0x36,0x35,0x33,0x33,0x33,0x34,0x37,0x39,0x39,0x38,0x38,0x39,0x3c,
0x3a,0x38,0x38,0x39,0x38,0x36,0x35,0x36,0x38,0x3b,0x3c,0x3e,0x44,0x4b,0x50,0x54,
0x57,0x5a,0x5f,0x61,0x60,0x60,0x62,0x63,0x62,0x60,0x60,0x60,0x5f,0x5e,0x5d,0x61,
0x61,0x61,0x62,0x63,0x63,0x62,0x60,0x5e,0x61,0x64,0x67,0x66,0x64,0x61,0x61,0x60,
0x5f,0x5f,0x61,0x63,0x61,0x60,0x5f,0x61,0x63,0x63,0x62,0x63,0x65,0x65,0x63,0x64,
0x62,0x61,0x61,0x62,0x62,0x63,0x62,0x61,0x61,0x60,0x61,0x63,0x63,0x62,0x62,0x62,
0x63,0x62,0x61,0x61,0x61,0x62,0x61,0x60,0x60,0x5f,0x5f,0x60,0x61,0x61,0x62,0x62,
0x61,0x60,0x60,0x62,0x62,0x60,0x5e,0x5e,0x5f,0x5e,0x5d,0x60,0x60,0x60,0x60,0x5e,
0x60,0x61,0x61,0x60,0x61,0x62,0x65,0x63,0x62,0x60,0x5e,0x5f,0x5f,0x5f,0x60,0x60,
0x5f,0x5e,0x5d,0x5d,0x60,0x60,0x5e,0x5d,0x5d,0x5e,0x5d,0x5b,0x5c,0x5d,0x5e,0x5d,
0x5d,0x5d,0x5f,0x5f,0x5e,0x5c,0x5a,0x5b,0x5c,0x5b,0x5c,0x5d,0x5d,0x5b,0x58,0x57,
0x58,0x5b,0x5b,0x59,0x59,0x56,0x54,0x53,0x53,0x54,0x56,0x55,0x52,0x51,0x51,0x54,
0x53,0x51,0x50,0x50,0x50,0x4f,0x4d,0x4b,0x4b,0x4b,0x4b,0x49,0x49,0x4a,0x49,0x47,
0x47,0x46,0x45,0x44,0x43,0x40,0x3d,0x3e,0x3d,0x3b,0x39,0x3a,0x3a,0x38,0x36,0x36,
0x38,0x38,0x36,0x34,0x32,0x31,0x31,0x30,0x2f,0x2e,0x2f,0x30,0x2e,0x2f,0x2f,0x2f,
0x32,0x33,0x33,0x35,0x35,0x35,0x37,0x3a,0x3c,0x3c,0x3c,0x3d,0x40,0x44,0x47,0x4b,
0x4c,0x4f,0x51,0x54,0x56,0x59,0x61,0x68,0x6b,0x6e,0x72,0x78,0x7d,0x81,0x84,0x8a,
0x91,0x91,0x8f,0x91,0x91,0x94,0x95,0x96,0x96,0x97,0x95,0x92,0x91,0x91,0x8f,0x8e,
0x8a,0x85,0x80,0x7c,0x79,0x73,0x6a,0x62,0x5b,0x55,0x4e,0x47,0x44,0x40,0x3b,0x36,
0x31,0x30,0x2f,0x2d,0x2b,0x29,0x2b,0x2e,0x2f,0x31,0x35,0x39,0x40,0x44,0x4b,0x53,
0x58,0x5e,0x65,0x6d,0x76,0x7b,0x85,0x8d,0x92,0x97,0x9a,0x9b,0x99,0x96,0x93,0x8f,
0x87,0x7f,0x78,0x6e,0x65,0x5e,0x57,0x50,0x4a,0x44,0x3d,0x38,0x34,0x31,0x2e,0x2d,
0x2d,0x2f,0x33,0x34,0x36,0x3d,0x45,0x4f,0x5b,0x67,0x73,0x7c,0x86,0x8b,0x90,0x95,
0x97,0x94,0x91,0x89,0x80,0x79,0x70,0x66,0x5d,0x53,0x49,0x40,0x38,0x34,0x31,0x2f,
0x2e,0x2e,0x32,0x38,0x3d,0x45,0x4c,0x57,0x64,0x70,0x7a,0x85,0x8b,0x8d,0x8f,0x8d,
0x89,0x84,0x7b,0x70,0x64,0x59,0x50,0x45,0x41,0x3a,0x37,0x35,0x34,0x34,0x37,0x3d,
0x45,0x50,0x5c,0x69,0x76,0x82,0x89,0x8d,0x8f,0x8d,0x86,0x7d,0x72,0x66,0x5b,0x4d,
0x41,0x3a,0x36,0x35,0x36,0x37,0x3c,0x43,0x4b,0x54,0x61,0x70,0x7d,0x86,0x8d,0x8d,
0x89,0x85,0x7d,0x72,0x64,0x57,0x49,0x3f,0x36,0x32,0x31,0x33,0x37,0x3f,0x4c,0x5d,
0x6d,0x7b,0x86,0x8b,0x8d,0x89,0x83,0x79,0x6d,0x5e,0x4f,0x42,0x38,0x31,0x2d,0x2d,
0x33,0x3e,0x4c,0x5c,0x6c,0x79,0x84,0x8c,0x8b,0x84,0x7b,0x73,0x68,0x5b,0x4d,0x41,
0x36,0x30,0x2e,0x31,0x3d,0x4e,0x61,0x73,0x7f,0x87,0x8a,0x88,0x81,0x77,0x6c,0x5f,
0x50,0x40,0x36,0x30,0x2f,0x34,0x41,0x55,0x6a,0x7c,0x89,0x8c,0x8b,0x87,0x7d,0x70,
0x63,0x56,0x4a,0x3d,0x36,0x33,0x37,0x49,0x59,0x6c,0x7c,0x87,0x8a,0x84,0x78,0x6c,
0x62,0x54,0x47,0x3c,0x34,0x30,0x35,0x44,0x57,0x68,0x7e,0x87,0x89,0x83,0x79,0x6d,
0x60,0x51,0x46,0x3f,0x3b,0x3c,0x45,0x56,0x68,0x79,0x83,0x86,0x82,0x77,0x6a,0x5b,
0x4f,0x43,0x3a,0x38,0x3c,0x47,0x59,0x6d,0x7e,0x85,0x84,0x7a,0x6d,0x5f,0x53,0x46,
0x3f,0x39,0x3a,0x44,0x53,0x66,0x77,0x83,0x86,0x83,0x76,0x64,0x53,0x47,0x41,0x41,
0x45,0x4e,0x5b,0x6c,0x78,0x81,0x81,0x78,0x6c,0x5d,0x4f,0x43,0x3f,0x43,0x4d,0x5c,
0x6b,0x77,0x7f,0x81,0x79,0x6c,0x5a,0x4a,0x3d,0x3c,0x40,0x4a,0x5a,0x67,0x71,0x7c,
0x7f,0x77,0x6a,0x59,0x4c,0x44,0x43,0x48,0x53,0x62,0x6d,0x74,0x76,0x72,0x6a,0x5e,
0x51,0x46,0x43,0x48,0x52,0x60,0x6a,0x72,0x77,0x74,0x6b,0x5f,0x54,0x4d,0x4c,0x51,
0x59,0x63,0x6e,0x73,0x70,0x6b,0x61,0x57,0x4e,0x4a,0x4b,0x52,0x5d,0x67,0x70,0x73,
0x70,0x66,0x5d,0x55,0x50,0x4f,0x53,0x59,0x64,0x6a,0x6c,0x68,0x61,0x59,0x56,0x53,
0x54,0x59,0x60,0x68,0x6c,0x6c,0x69,0x62,0x5c,0x57,0x54,0x55,0x59,0x5e,0x65,0x66,
0x67,0x65,0x61,0x5d,0x58,0x58,0x59,0x5c,0x61,0x66,0x68,0x65,0x5d,0x55,0x54,0x57,
0x5a,0x61,0x65,0x66,0x65,0x5f,0x58,0x54,0x54,0x59,0x60,0x64,0x67,0x66,0x62,0x5a,
0x52,0x4f,0x50,0x55,0x5d,0x65,0x6c,0x6e,0x68,0x5d,0x52,0x50,0x51,0x59,0x64,0x6d,
0x6e,0x6d,0x60,0x53,0x4c,0x4c,0x55,0x63,0x70,0x76,0x77,0x6c,0x5a,0x49,0x40,0x44,
0x51,0x63,0x73,0x79,0x74,0x64,0x50,0x43,0x42,0x4c,0x5f,0x71,0x7b,0x79,0x6b,0x57,
0x47,0x43,0x4b,0x5e,0x71,0x7c,0x7b,0x70,0x57,0x3f,0x37,0x40,0x56,0x70,0x7f,0x80,
0x73,0x5d,0x45,0x39,0x41,0x59,0x73,0x84,0x82,0x70,0x57,0x40,0x38,0x45,0x5e,0x77,
0x84,0x7f,0x6c,0x52,0x3d,0x3a,0x4b,0x65,0x7a,0x83,0x7a,0x61,0x44,0x33,0x39,0x4f,
0x6c,0x80,0x83,0x72,0x54,0x38,0x34,0x48,0x66,0x7f,0x8a,0x7f,0x63,0x47,0x38,0x41,
0x5e,0x7c,0x8a,0x83,0x69,0x4b,0x38,0x3a,0x51,0x72,0x87,0x85,0x6e,0x4f,0x3a,0x3a,
0x50,0x6e,0x84,0x86,0x70,0x51,0x3c,0x3a,0x4e,0x6c,0x81,0x82,0x70,0x54,0x40,0x3b,
0x51,0x6f,0x84,0x84,0x6d,0x50,0x3d,0x40,0x54,0x6e,0x7f,0x7d,0x68,0x4b,0x3b,0x43,
0x5c,0x78,0x81,0x7c,0x62,0x49,0x40,0x4e,0x67,0x81,0x83,0x70,0x55,0x41,0x41,0x55,
0x6f,0x81,0x81,0x6d,0x53,0x43,0x4a,0x62,0x79,0x81,0x72,0x5a,0x47,0x44,0x53,0x6d,
0x7c,0x7b,0x68,0x51,0x46,0x50,0x66,0x79,0x7f,0x72,0x5d,0x4b,0x4c,0x5c,0x6f,0x78,
0x6e,0x5a,0x4b,0x48,0x55,0x67,0x73,0x71,0x62,0x52,0x4b,0x51,0x66,0x74,0x75,0x69,
0x57,0x4d,0x52,0x61,0x6e,0x72,0x69,0x59,0x50,0x52,0x5d,0x6c,0x73,0x6d,0x5f,0x53,
0x52,0x5d,0x6c,0x73,0x70,0x65,0x5b,0x57,0x5d,0x68,0x6e,0x6c,0x60,0x54,0x51,0x58,
0x63,0x6a,0x6a,0x64,0x5d,0x5b,0x5f,0x65,0x6d,0x6c,0x63,0x5b,0x57,0x5a,0x62,0x68,
0x65,0x5e,0x58,0x56,0x59,0x61,0x65,0x67,0x63,0x5c,0x59,0x5c,0x63,0x67,0x69,0x65,
0x61,0x5f,0x5f,0x62,0x67,0x68,0x65,0x60,0x5d,0x5e,0x62,0x66,0x66,0x63,0x63,0x61,
0x61,0x63,0x64,0x66,0x65,0x63,0x5e,0x60,0x62,0x65,0x63,0x61,0x60,0x60,0x63,0x64,
0x63,0x63,0x62,0x61,0x60,0x5f,0x61,0x62,0x60,0x5b,0x59,0x5c,0x5f,0x61,0x61,0x60,
0x5f,0x5f,0x5f,0x60,0x63,0x66,0x66,0x65,0x62,0x61,0x62,0x63,0x62,0x63,0x63,0x63,
0x61,0x5e,0x5c,0x5b,0x5d,0x5e,0x5f,0x61,0x62,0x62,0x60,0x5e,0x60,0x63,0x64,0x64,
0x63,0x62,0x61,0x5f,0x5e,0x5f,0x62,0x65,0x65,0x63,0x63,0x63,0x65,0x65,0x64,0x63,
0x62,0x5f,0x5c,0x5d,0x60,0x62,0x5f,0x60,0x5e,0x5f,0x61,0x63,0x63,0x65,0x65,0x61,
0x60,0x5e,0x5e,0x60,0x60,0x5e,0x5f,0x60,0x61,0x60,0x5f,0x5e,0x5f,0x60,0x5f,0x5f,
0x61,0x62,0x62,0x64,0x62,0x61,0x61,0x62,0x63,0x63,0x63,0x63,0x62,0x5f,0x5d,0x5f,
0x61,0x63,0x62,0x63,0x61,0x5e,0x5f,0x5f,0x60,0x63,0x63,0x60,0x5f,0x5f,0x61,0x61,
0x61,0x5e,0x5b,0x5b,0x5b,0x5b,0x5c,0x5d,0x60,0x62,0x62,0x61,0x62,0x63,0x63,0x65,
0x65,0x62,0x60,0x5d,0x5b,0x5d,0x60,0x61,0x61,0x61,0x61,0x60,0x61,0x62,0x64,0x66,
0x66,0x64,0x63,0x61,0x61,0x60,0x5e,0x5d,0x5d,0x5d,0x5e,0x5f,0x60,0x5f,0x5f,0x61,
0x60,0x60,0x60,0x61,0x60,0x5f,0x5d,0x5e,0x5e,0x5d,0x5c,0x5e,0x5f,0x5f,0x5e,0x5e,
0x5f,0x5f,0x61,0x60,0x60,0x63,0x63,0x62,0x61,0x60,0x61,0x62,0x62,0x61,0x60,0x60,
0x5e,0x5c,0x5c,0x5d,0x5f,0x61,0x60,0x5f,0x60,0x62,0x63,0x65,0x66,0x65,0x64,0x62,
0x60,0x60,0x60,0x61,0x5f,0x5e,0x5d,0x5e,0x60,0x61,0x61,0x62,0x61,0x60,0x5f,0x61,
0x63,0x64,0x62,0x5f,0x5d,0x5f,0x60,0x60,0x61,0x62,0x62,0x62,0x5f,0x5e,0x60,0x62,
0x62,0x61,0x61,0x61,0x61,0x61,0x61,0x61,0x62,0x62,0x60,0x61,0x60,0x5f,0x5e,0x5d,
0x5d,0x5f,0x61,0x62,0x63,0x63,0x63,0x61,0x63,0x63,0x64,0x65,0x65,0x63,0x61,0x5f,
0x5d,0x5f,0x5e,0x5d,0x5c,0x5d,0x5e,0x5f,0x5f,0x61,0x63,0x63,0x61,0x61,0x63,0x64,
0x63,0x61,0x60,0x60,0x62,0x63,0x62,0x63,0x65,0x64,0x64,0x63,0x63,0x62,0x61,0x60,
0x5e,0x5e,0x5e,0x5d,0x60,0x5e,0x5e,0x61,0x62,0x62,0x63,0x64,0x64,0x63,0x61,0x61,
0x63,0x62,0x60,0x5f,0x5f,0x5f,0x5e,0x5e,0x5e,0x60,0x61,0x60,0x60,0x60,0x62,0x62,
0x62,0x62,0x62,0x61,0x5d,0x56,0x51,0x4d,0x4a,0x44,0x3e,0x3a,0x38,0x39,0x38,0x37,
0x37,0x38,0x38,0x3a,0x3b,0x39,0x38,0x38,0x36,0x34,0x34,0x36,0x35,0x34,0x33,0x32,
0x34,0x35,0x35,0x36,0x37,0x37,0x38,0x38,0x39,0x3a,0x3a,0x38,0x35,0x33,0x34,0x35,
0x35,0x35,0x36,0x38,0x37,0x35,0x36,0x37,0x35,0x35,0x34,0x35,0x35,0x35,0x35,0x33,
0x35,0x38,0x38,0x38,0x35,0x34,0x35,0x34,0x32,0x33,0x35,0x36,0x37,0x36,0x37,0x39,
0x39,0x38,0x37,0x38,0x39,0x37,0x34,0x32,0x33,0x34,0x35,0x34,0x33,0x33,0x34,0x37,
0x37,0x37,0x38,0x39,0x38,0x35,0x35,0x35,0x34,0x36,0x35,0x33,0x34,0x35,0x35,0x36,
// Line 20
0x38,0x36,0x38,0x38,0x39,0x39,0x37,0x34,0x32,0x33,0x35,0x36,0x38,0x37,0x37,0x37,
0x39,0x3b,0x3b,0x3a,0x3b,0x39,0x38,0x36,0x34,0x35,0x36,0x38,0x39,0x3d,0x42,0x49,
0x53,0x60,0x6e,0x7e,0x8d,0x9b,0xa6,0xb1,0xb8,0xbd,0xc0,0xc3,0xc2,0xc1,0xc0,0xbc,
0xb9,0xba,0xb9,0xba,0xbd,0xbf,0xc0,0xc2,0xc1,0xbe,0xbd,0xbd,0xbd,0xbc,0xbc,0xbb,
0xbc,0xbc,0xbb,0xbb,0xbc,0xbe,0xbd,0xbd,0xbc,0xbd,0xbd,0xbc,0xbc,0xbd,0xbe,0xbf,
0xbf,0xc0,0xc0,0xbf,0xbf,0xbf,0xbe,0xbc,0xbc,0xbb,0xbc,0xbc,0xbd,0xbe,0xbd,0xbd,
0xbe,0xbd,0xbb,0xb9,0xb9,0xbb,0xbb,0xba,0xba,0xb8,0xbc,0xbb,0xba,0xbc,0xbd,0xbe,
0xbf,0xbc,0xba,0xba,0xba,0xbb,0xbb,0xba,0xba,0xb8,0xb8,0xb9,0xbb,0xbc,0xbd,0xbb,
0xbc,0xbc,0xbd,0xbd,0xbc,0xbc,0xbe,0xbf,0xbe,0xbd,0xbd,0xbd,0xbe,0xbd,0xbc,0xbc,
0xbd,0xbd,0xbd,0xbe,0xc0,0xc2,0xc4,0xc5,0xc2,0xc2,0xc1,0xc1,0xbf,0xbe,0xbc,0xbc,
0xbc,0xbc,0xbb,0xba,0xbb,0xbb,0xbc,0xbc,0xbd,0xbe,0xbd,0xbc,0xbc,0xbe,0xbf,0xc0,
0xc1,0xbf,0xbf,0xbd,0xbc,0xbc,0xbf,0xc1,0xbf,0xbe,0xbc,0xbc,0xbc,0xbb,0xbb,0xbe,
0xbf,0xbf,0xbc,0xb8,0xb8,0xbb,0xbd,0xbe,0xbc,0xbc,0xbb,0xb9,0xba,0xbc,0xbf,0xc4,
0xc2,0xbc,0xb8,0xb8,0xbc,0xc2,0xc3,0xc0,0xb9,0xac,0xa0,0x98,0x9a,0xa3,0xaa,0xaa,
0xa0,0x92,0x86,0x7f,0x84,0x95,0xa6,0xac,0xa5,0x92,0x7f,0x79,0x82,0x96,0xaa,0xb3,
0xab,0x97,0x81,0x76,0x7e,0x95,0xa9,0xb1,0xaa,0x96,0x7f,0x73,0x7b,0x91,0xa9,0xb4,
0xac,0x97,0x81,0x76,0x7d,0x93,0xa8,0xb1,0xaa,0x94,0x7c,0x72,0x7c,0x93,0xa9,0xb3,
0xaa,0x98,0x82,0x77,0x80,0x95,0xa9,0xb2,0xab,0x96,0x80,0x75,0x7c,0x8f,0xa7,0xb2,
0xac,0x98,0x81,0x75,0x7e,0x94,0xa9,0xaf,0xab,0x98,0x82,0x77,0x7e,0x94,0xac,0xb6,
0xad,0x97,0x81,0x78,0x82,0x97,0xaa,0xb6,0xaf,0x9c,0x84,0x79,0x82,0x98,0xae,0xb6,
0xae,0x98,0x81,0x77,0x80,0x94,0xab,0xb4,0xab,0x97,0x83,0x7b,0x83,0x97,0xaf,0xb8,
0xaf,0x9b,0x84,0x79,0x80,0x94,0xa6,0xaf,0xa7,0x93,0x7f,0x76,0x7e,0x93,0xa9,0xb3,
0xab,0x98,0x83,0x78,0x81,0x94,0xa9,0xb3,0xab,0x97,0x81,0x77,0x80,0x96,0xab,0xb3,
0xad,0x9b,0x86,0x7a,0x81,0x96,0xaa,0xb4,0xad,0x98,0x82,0x76,0x7c,0x91,0xa5,0xae,
0xa8,0x96,0x83,0x7b,0x84,0x97,0xa9,0xb1,0xa9,0x98,0x87,0x81,0x88,0x98,0xa4,0xa3,
0x99,0x8e,0x8a,0x8d,0x94,0x9b,0x99,0x8f,0x7e,0x72,0x7b,0x8a,0x9b,0xa2,0x97,0x80,
0x6b,0x64,0x71,0x8b,0xa1,0xa6,0x94,0x76,0x5b,0x58,0x70,0x92,0xa9,0xae,0x99,0x75,
0x58,0x52,0x68,0x8d,0xa8,0xac,0x98,0x75,0x5b,0x57,0x6d,0x8f,0xab,0xb3,0xa0,0x7e,
0x61,0x5b,0x71,0x92,0xaa,0xae,0x9a,0x79,0x5b,0x54,0x67,0x88,0xa4,0xa9,0x95,0x75,
0x5b,0x58,0x69,0x8f,0xaa,0xaf,0x9d,0x7c,0x60,0x5c,0x70,0x8f,0xa9,0xae,0x9a,0x78,
0x5a,0x54,0x6b,0x8f,0xa9,0xad,0x99,0x77,0x5c,0x59,0x6d,0x8e,0xa8,0xab,0x96,0x73,
0x58,0x56,0x6d,0x90,0xa9,0xae,0x9b,0x7a,0x5f,0x5b,0x71,0x92,0xae,0xb2,0x9e,0x7b,
0x5e,0x58,0x6d,0x8d,0xa7,0xac,0x98,0x76,0x59,0x56,0x6d,0x8e,0xa9,0xaf,0x9d,0x7d,
0x5f,0x58,0x6c,0x8d,0xa6,0xab,0x99,0x79,0x5b,0x56,0x6b,0x8b,0xa7,0xac,0x97,0x78,
0x5a,0x54,0x6b,0x8d,0xa7,0xae,0x9a,0x77,0x5b,0x56,0x6d,0x8c,0xa8,0xad,0x98,0x79,
0x60,0x59,0x71,0x90,0xa8,0xaf,0x9c,0x79,0x5e,0x5a,0x6d,0x8d,0xa5,0xaa,0x99,0x79,
0x5c,0x54,0x67,0x89,0xa6,0xaf,0xa0,0x81,0x66,0x5d,0x6b,0x88,0xa3,0xae,0xa1,0x82,
0x61,0x50,0x56,0x6e,0x8a,0x9d,0x99,0x7f,0x63,0x51,0x54,0x70,0x8e,0xa1,0xa1,0x8b,
0x6b,0x54,0x52,0x66,0x82,0x9d,0x9f,0x8b,0x6b,0x53,0x53,0x69,0x89,0xa0,0xa4,0x91,
0x72,0x59,0x54,0x67,0x85,0x9d,0xa0,0x8b,0x6b,0x52,0x51,0x69,0x89,0x9f,0xa0,0x8a,
0x6b,0x54,0x51,0x63,0x83,0x9b,0x9e,0x8b,0x6b,0x54,0x50,0x68,0x84,0x9a,0x9d,0x8b,
0x6d,0x56,0x51,0x64,0x84,0x9d,0xa0,0x8f,0x6e,0x56,0x53,0x69,0x89,0xa0,0xa0,0x88,
0x69,0x51,0x50,0x65,0x83,0x9b,0x9d,0x8a,0x6b,0x52,0x53,0x6b,0x8c,0xa2,0xa0,0x8b,
0x6d,0x57,0x55,0x6b,0x8a,0xa1,0xa0,0x8c,0x6a,0x51,0x51,0x67,0x85,0x9e,0x9f,0x8d,
0x6f,0x56,0x53,0x66,0x86,0x9c,0x9f,0x8c,0x6e,0x54,0x51,0x63,0x83,0x9c,0xa0,0x8d,
0x6d,0x56,0x53,0x69,0x86,0x9b,0xa0,0x8d,0x6d,0x54,0x53,0x6b,0x89,0x9d,0x9d,0x88,
0x6b,0x55,0x53,0x68,0x86,0x9d,0x9f,0x8a,0x6b,0x54,0x56,0x69,0x86,0x9a,0x9c,0x85,
0x6b,0x53,0x53,0x6a,0x87,0x9b,0x9d,0x8b,0x71,0x5f,0x5e,0x6d,0x86,0x96,0x96,0x86,
0x73,0x66,0x63,0x6b,0x76,0x80,0x85,0x82,0x7b,0x75,0x70,0x6b,0x65,0x5f,0x5e,0x65,
0x72,0x7c,0x7c,0x71,0x5e,0x4e,0x4c,0x59,0x72,0x89,0x8c,0x76,0x59,0x40,0x3d,0x56,
0x77,0x91,0x95,0x80,0x5a,0x3b,0x36,0x50,0x76,0x91,0x92,0x79,0x58,0x40,0x3e,0x56,
0x76,0x8e,0x92,0x7e,0x5f,0x47,0x44,0x5b,0x79,0x8e,0x8f,0x79,0x59,0x40,0x3e,0x53,
0x71,0x88,0x8b,0x79,0x5b,0x45,0x40,0x53,0x72,0x8b,0x8f,0x7c,0x5c,0x44,0x41,0x53,
0x70,0x8a,0x90,0x7e,0x5d,0x43,0x3e,0x51,0x72,0x8c,0x90,0x7d,0x5d,0x43,0x40,0x56,
0x75,0x8e,0x92,0x7e,0x5d,0x44,0x41,0x56,0x74,0x8c,0x90,0x7c,0x5c,0x43,0x42,0x56,
0x75,0x8f,0x92,0x7e,0x5e,0x45,0x40,0x55,0x77,0x8f,0x90,0x7a,0x5a,0x40,0x3e,0x52,
0x71,0x8d,0x93,0x7e,0x5d,0x44,0x43,0x57,0x79,0x90,0x92,0x7e,0x5c,0x40,0x40,0x52,
0x71,0x8b,0x8f,0x7b,0x5c,0x44,0x42,0x57,0x76,0x8f,0x93,0x80,0x5f,0x45,0x42,0x56,
0x74,0x8c,0x8e,0x7a,0x5c,0x43,0x3f,0x53,0x73,0x8d,0x8f,0x7a,0x5b,0x44,0x46,0x59,
0x76,0x8e,0x90,0x7b,0x5f,0x48,0x47,0x5f,0x7c,0x8f,0x8a,0x73,0x56,0x46,0x4b,0x63,
0x80,0x8e,0x83,0x66,0x49,0x3e,0x49,0x65,0x7d,0x85,0x78,0x58,0x3b,0x32,0x44,0x65,
0x7f,0x85,0x73,0x53,0x39,0x34,0x48,0x6b,0x85,0x88,0x72,0x4f,0x33,0x31,0x47,0x68,
0x81,0x84,0x6f,0x4d,0x32,0x32,0x4a,0x6e,0x88,0x8d,0x78,0x56,0x39,0x34,0x48,0x69,
0x84,0x89,0x75,0x53,0x36,0x31,0x47,0x6a,0x85,0x8a,0x79,0x55,0x36,0x31,0x47,0x68,
0x85,0x89,0x73,0x52,0x35,0x30,0x44,0x6a,0x85,0x8b,0x77,0x56,0x38,0x38,0x4b,0x6b,
0x83,0x86,0x70,0x4e,0x30,0x2d,0x46,0x68,0x83,0x86,0x71,0x51,0x38,0x33,0x48,0x6a,
0x85,0x8a,0x76,0x55,0x3b,0x35,0x49,0x69,0x83,0x8b,0x77,0x55,0x38,0x32,0x46,0x6a,
0x86,0x8c,0x78,0x57,0x39,0x31,0x46,0x69,0x86,0x8f,0x77,0x51,0x35,0x30,0x46,0x69,
0x84,0x8b,0x77,0x53,0x36,0x32,0x4a,0x6d,0x86,0x8b,0x77,0x54,0x36,0x30,0x45,0x68,
0x83,0x8a,0x75,0x53,0x38,0x34,0x49,0x6a,0x83,0x88,0x73,0x50,0x34,0x30,0x47,0x6b,
0x83,0x88,0x76,0x56,0x3b,0x35,0x49,0x69,0x83,0x88,0x74,0x53,0x3a,0x34,0x46,0x66,
0x81,0x8a,0x7b,0x5d,0x41,0x38,0x44,0x5b,0x71,0x7c,0x76,0x63,0x4d,0x3d,0x3b,0x45,
0x54,0x60,0x65,0x5f,0x52,0x44,0x38,0x36,0x42,0x55,0x64,0x66,0x5e,0x4c,0x38,0x2c,
0x30,0x40,0x5b,0x6a,0x66,0x54,0x3e,0x30,0x37,0x47,0x5c,0x6b,0x68,0x53,0x3a,0x2a,
0x2f,0x45,0x5e,0x6b,0x67,0x54,0x3e,0x30,0x36,0x4a,0x61,0x6d,0x65,0x4f,0x39,0x2d,
0x34,0x48,0x5e,0x69,0x64,0x50,0x39,0x2c,0x34,0x47,0x5c,0x69,0x66,0x54,0x3e,0x2f,
0x32,0x49,0x61,0x6d,0x67,0x53,0x3b,0x2f,0x33,0x48,0x5d,0x6d,0x68,0x51,0x38,0x2a,
0x30,0x49,0x5f,0x6a,0x66,0x53,0x3b,0x2b,0x30,0x46,0x5f,0x6d,0x66,0x51,0x38,0x2b,
0x31,0x47,0x5e,0x6b,0x67,0x52,0x39,0x2d,0x33,0x49,0x60,0x6d,0x65,0x51,0x38,0x2a,
0x2f,0x45,0x5d,0x69,0x63,0x4e,0x35,0x2b,0x2f,0x43,0x5e,0x6b,0x66,0x51,0x38,0x2a,
0x2f,0x44,0x5d,0x68,0x64,0x4f,0x36,0x2b,0x32,0x48,0x62,0x6f,0x6b,0x58,0x41,0x32,
0x37,0x4a,0x61,0x6d,0x65,0x4f,0x36,0x2c,0x31,0x47,0x5e,0x69,0x64,0x52,0x3a,0x2d,
0x32,0x48,0x5f,0x6a,0x61,0x4c,0x38,0x2f,0x35,0x49,0x5e,0x69,0x64,0x54,0x42,0x36,
0x3d,0x4d,0x5b,0x64,0x61,0x55,0x46,0x3b,0x3b,0x45,0x4d,0x4e,0x4a,0x42,0x3b,0x38,
0x3a,0x40,0x47,0x4a,0x47,0x42,0x3f,0x3e,0x40,0x43,0x42,0x3f,0x3e,0x3e,0x40,0x42,
0x43,0x44,0x44,0x42,0x3f,0x3f,0x41,0x43,0x43,0x44,0x43,0x41,0x41,0x41,0x41,0x43,
0x44,0x44,0x42,0x41,0x40,0x3f,0x3f,0x3f,0x3e,0x42,0x40,0x3f,0x41,0x43,0x43,0x44,
0x43,0x43,0x43,0x44,0x44,0x43,0x42,0x41,0x41,0x42,0x41,0x40,0x42,0x42,0x42,0x43,
0x43,0x43,0x43,0x43,0x42,0x42,0x43,0x44,0x43,0x42,0x41,0x42,0x41,0x40,0x40,0x45,
0x44,0x43,0x42,0x40,0x40,0x40,0x41,0x40,0x41,0x42,0x41,0x3b,0x3b,0x3b,0x3e,0x40,
0x43,0x46,0x48,0x47,0x45,0x44,0x44,0x44,0x45,0x44,0x42,0x42,0x43,0x42,0x41,0x41,
0x42,0x43,0x44,0x43,0x43,0x42,0x40,0x3e,0x3b,0x3b,0x3e,0x42,0x43,0x42,0x42,0x40,
0x40,0x3f,0x40,0x41,0x44,0x45,0x44,0x41,0x42,0x43,0x42,0x44,0x42,0x44,0x46,0x44,
0x41,0x41,0x42,0x44,0x41,0x40,0x3f,0x40,0x40,0x40,0x3f,0x40,0x43,0x46,0x46,0x45,
0x45,0x46,0x44,0x41,0x40,0x42,0x43,0x41,0x3f,0x3c,0x3b,0x3e,0x40,0x42,0x45,0x43,
0x42,0x43,0x43,0x42,0x42,0x41,0x3e,0x3b,0x38,0x37,0x36,0x37,0x38,0x39,0x3a,0x39,
// Line 21
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
unsigned int VBIfieldSize = sizeof (VBIsamples[0]);
unsigned int VBIfieldCount = sizeof (VBIsamples) / sizeof (VBIsamples[0]);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mcamdrv.c ===
/*++

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mcamdrv.c.c

Abstract:     driver for the philips camera.

Author:       Paul Oosterhof

Environment:  Kernel mode only

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5
Nov.30 , Frozen video frame for corrupted usb frames
Nov.30 , properties added to deliver VID/PID actual used camera to app
--*/	   

#include "mwarn.h"
#include "wdm.h"
#include "mcamdrv.h"
#include "strmini.h"
#include "mprpobj.h"
#include "mprpobjx.h"
#include "mprpftn.h"
#include "mcodec.h"
#include "mstreams.h"
#include "mssidef.h"


/*
 * Local function definitions
 */
static USHORT 
MapFrPeriodFrRate(LONGLONG llFramePeriod);

static NTSTATUS
PHILIPSCAM_SetFrRate_AltInterface(IN PVOID DeviceContext);
/*
   Here the mapping is defined to alternate interfaces dependent from
   picture format and framerate
*/
UCHAR InterfaceMap[9][10] = {
                // Size
//Framerate	// CIF, QCIF, SQCIF, QQCIF, VGA, SIF, SSIF, QSIF, SQSIF, SCIF  
/*  VGA  */	{   0 ,   0 ,    0 ,   0,    1,   0 ,   0 ,   0 ,   0  ,   0 },
/*  3.75 */	{   4 ,   0 ,    0 ,   0,    0,   4 ,   4 ,   0 ,   0  ,   4 },
/* 	5 */ 	{   7 ,   8 ,    8 ,   8,    0,   7 ,   7 ,   8 ,   8  ,   7 },
/*  7.5 */  {   6 ,   7 ,    7 ,   7,    0,   6 ,   6 ,   7 ,   7  ,   6 },
/* 10 */    {   4 ,   6 ,    7 ,   7,    0,   4 ,   4 ,   6 ,   7  ,   4 },
/* 12 */    {   3 ,   5 ,    6 ,   6,    0,   3 ,   3 ,   5 ,   6  ,   3 },
/* 15 */    {   2 ,   4 ,    5 ,   5,    0,   2 ,   2 ,   4 ,   5  ,   2 },
/* 20 */    {   0 ,   1 ,    3 ,   3,    0,   0 ,   0 ,   1 ,   3  ,   0 },
/* 24 */    {   0 ,   1 ,    3 ,   3,    0,   0 ,   0 ,   1 ,   3  ,   0 },
};

//QCIF20 alt.intfc. 2 is sufficient, however 20Fr/sec is asked as default by PM;
//to enable the user to select as well 24Fr/sec, also alt.intfc. 1 is selected
//SQCIF20 alt.intfc. 4 is sufficient, however 20Fr/sec is asked as default by PM;
//to enable the user to select as well 24Fr/sec, also alt.intfc. 3 is selected

ULONG PHILIPSCAM_DebugTraceLevel
#ifdef MAX_DEBUG
    = MAX_TRACE;
#else
    = MIN_TRACE;
#endif

#ifndef mmioFOURCC   
#define mmioFOURCC( ch0, ch1, ch2, ch3 )                                \
		( (DWORD)(BYTE)(ch0) | ( (DWORD)(BYTE)(ch1) << 8 ) |    \
		( (DWORD)(BYTE)(ch2) << 16 ) | ( (DWORD)(BYTE)(ch3) << 24 ) )
#endif

KSPIN_MEDIUM StandardMedium =
{
	STATIC_KSMEDIUMSETID_Standard,
	0, 0
};


// ------------------------------------------------------------------------
// Property sets for all video capture streams 
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VideoStreamConnectionProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY),                     // MinProperty
        sizeof(KSALLOCATOR_FRAMING),            // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
};

DEFINE_KSPROPERTY_TABLE(VideoStreamDroppedFramesProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_DROPPEDFRAMES_CURRENT,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinProperty
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};


// ------------------------------------------------------------------------
// Array of all of the property sets supported by video streams
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_SET_TABLE(VideoStreamProperties)
{
    DEFINE_KSPROPERTY_SET
    ( 
        &KSPROPSETID_Connection,                        // Set
        SIZEOF_ARRAY(VideoStreamConnectionProperties),  // PropertiesCount
        VideoStreamConnectionProperties,                // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_DROPPEDFRAMES,                // Set
        SIZEOF_ARRAY(VideoStreamDroppedFramesProperties),  // PropertiesCount
        VideoStreamDroppedFramesProperties,                // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
};
#define NUMBER_VIDEO_STREAM_PROPERTIES (SIZEOF_ARRAY(VideoStreamProperties))

KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_QCIF_I420   = STREAMFORMAT_QCIF_I420 ;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_CIF_I420  = STREAMFORMAT_CIF_I420;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_SQCIF_I420 = STREAMFORMAT_SQCIF_I420;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_QQCIF_I420 = STREAMFORMAT_QQCIF_I420;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_SIF_I420   = STREAMFORMAT_SIF_I420 ;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_SSIF_I420  = STREAMFORMAT_SSIF_I420 ;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_QSIF_I420  = STREAMFORMAT_QSIF_I420 ;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_SQSIF_I420 = STREAMFORMAT_SQSIF_I420 ;
KS_DATARANGE_VIDEO PHILIPSCAM_StreamFormat_SCIF_I420  = STREAMFORMAT_SCIF_I420 ;

static PKSDATAFORMAT PHILIPSCAM_MovingStreamFormats[]={
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_QCIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_CIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_SQCIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_QQCIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_SIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_SSIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_QSIF_I420,
					 (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_SQSIF_I420,
                     (PKSDATAFORMAT) &PHILIPSCAM_StreamFormat_SCIF_I420
  };

#define NUM_PHILIPSCAM_STREAM_FORMATS (SIZEOF_ARRAY(PHILIPSCAM_MovingStreamFormats))

//---------------------------------------------------------------------------
// Create an array that holds the list of all of the streams supported
//---------------------------------------------------------------------------

HW_STREAM_INFORMATION Streams [] = {
    // -----------------------------------------------------------------
    // PHILIPSCAM_Moving_Stream
    // -----------------------------------------------------------------

    // HW_STREAM_INFORMATION -------------------------------------------
    1,                                      // NumberOfPossibleInstances
    KSPIN_DATAFLOW_OUT,                     // DataFlow
    TRUE,                                   // DataAccessible
    NUM_PHILIPSCAM_STREAM_FORMATS,          // NumberOfFormatArrayEntries
    PHILIPSCAM_MovingStreamFormats,         // StreamFormatsArray
    NULL,                                   // ClassReserved[0]
    NULL,                                   // ClassReserved[1]
    NULL,                                   // ClassReserved[2]
    NULL,                                   // ClassReserved[3]
    NUMBER_VIDEO_STREAM_PROPERTIES,         // NumStreamPropArrayEntries
    (PKSPROPERTY_SET) VideoStreamProperties,// StreamPropertiesArray
    0,                                      // NumStreamEventArrayEntries;
    0,                                      // StreamEventsArray;
    (GUID *)&PINNAME_VIDEO_CAPTURE,         // Category;
    (GUID *)&PINNAME_VIDEO_CAPTURE,         // Name;
	0,										// MediumsCount
	&StandardMedium,						// Mediums
    FALSE,									// BridgeStream 
    0,                                      // Reserved[0]
    0                                       // Reserved[1]
};


/*****************************************************************************/
/*****************************************************************************/
/************       Start  of   Function  Blocks        **********************/
/*****************************************************************************/
/*****************************************************************************/

/*
// This function searches the maximal framerate for a given picture format
// dependent from the USB bus load and selects the belonging alternate interface.
//
*/
NTSTATUS
PHILIPSCAM_SetFrRate_AltInterface(IN PVOID DeviceContext){

  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  NTSTATUS ntStatus  = STATUS_SUCCESS;
  USHORT PhFormat    = deviceContext->CamStatus.PictureFormat;
  USHORT PhFrameRate = deviceContext->CamStatus.PictureFrameRate;
  USHORT j; 

  // reset permitted framerates
  for (j = FRRATEVGA; j <= FRRATE24; j++){
    deviceContext->FrrSupported[j] = FALSE;
  }
  // set permitted framerates dependent on selected format and sensortype
  switch (PhFormat) {
    case FORMATCIF:
	  for ( j = FRRATE375 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATQCIF:
	  for ( j = FRRATE5 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATSQCIF:
	  for ( j = FRRATE5 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATQQCIF:
	  for ( j = FRRATE5 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATSIF:
	  for ( j = FRRATE375 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATSSIF:
	  for ( j = FRRATE375 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATQSIF:
	  for ( j = FRRATE5 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATSQSIF:
	  for ( j = FRRATE5 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
    break;
    case FORMATSCIF:
	  for ( j = FRRATE375 ; j <= PhFrameRate; j++){
	    deviceContext->FrrSupported[j] = TRUE;
	  }
 
    default:
	  ; // no permitted framerates;
  }
  // select framerate dependent on available USB bandwidth
  ntStatus = STATUS_NOT_FOUND;
  for ( PhFrameRate ;
	    (!NT_SUCCESS(ntStatus) && (PhFrameRate != FRRATEVGA));
		 PhFrameRate --) {
	if (deviceContext->FrrSupported[PhFrameRate]){
	  if ( InterfaceMap[PhFrameRate][PhFormat] != 0 ){
        deviceContext->Interface->AlternateSetting =
				InterfaceMap[PhFrameRate][PhFormat];
        ntStatus = USBCAMD_SelectAlternateInterface(
    		               deviceContext,
			               deviceContext->Interface);
	  }
	  if (!NT_SUCCESS(ntStatus)){
	    deviceContext->FrrSupported[PhFrameRate]= FALSE;
	  }else{
	     PHILIPSCAM_KdPrint (MIN_TRACE, ("Alt Setting # %d, Max.allowed FPS %s\n", 
  						InterfaceMap[PhFrameRate][PhFormat] , FRString(PhFrameRate)));
 		 deviceContext->CamStatus.PictureFrameRate = PhFrameRate ;
	  }
	}
  }
  return ntStatus;
}


   
/*
** AdapterCompareGUIDsAndFormatSize()
**
**   Checks for a match on the three GUIDs and FormatSize
**
** Arguments:
**
**         IN DataRange1
**         IN DataRange2
**
** Returns:
**
**   TRUE if all elements match
**   FALSE if any are different
**
** Side Effects:  none
*/

BOOLEAN
AdapterCompareGUIDsAndFormatSize(
    IN PKSDATARANGE DataRange1,
    IN PKSDATARANGE DataRange2)
{
  return (
    IsEqualGUID (
	    &DataRange1->MajorFormat,
	    &DataRange2->MajorFormat) &&
	IsEqualGUID (
	    &DataRange1->SubFormat,
	    &DataRange2->SubFormat) &&
	IsEqualGUID (
	    &DataRange1->Specifier,
	    &DataRange2->Specifier) &&
	(DataRange1->FormatSize == DataRange2->FormatSize));
}

/*
** AdapterFormatFromRange()
**
**   Returns a DATAFORMAT from a DATARANGE
**
** Arguments:
**
**         IN PHW_STREAM_REQUEST_BLOCK pSrb
**
** Returns:
**
**  STATUS_SUCCESS if format is supported
**
** Side Effects:  none
*/

NTSTATUS
AdapterFormatFromRange(
	IN PHW_STREAM_REQUEST_BLOCK Srb)
{
  PSTREAM_DATA_INTERSECT_INFO intersectInfo;
  PKSDATARANGE  dataRange;
  BOOL onlyWantsSize;
  ULONG formatSize = 0;
  ULONG streamNumber;
  ULONG j;
  ULONG numberOfFormatArrayEntries;
  PKSDATAFORMAT *availableFormats;
  NTSTATUS ntStatus = STATUS_SUCCESS;
   
  intersectInfo = Srb->CommandData.IntersectInfo;
  streamNumber = intersectInfo->StreamNumber;
  dataRange = intersectInfo->DataRange;

    //
    // Check that the stream number is valid
    //

//  ASSERT(streamNumber == 0);
   
  numberOfFormatArrayEntries = Streams[0].NumberOfFormatArrayEntries;

    //
    // Get the pointer to the array of available formats
    //

  availableFormats = Streams[0].StreamFormatsArray;

    //
    // Is the caller trying to get the format, or the size of the format?
    //

  onlyWantsSize =
	    (intersectInfo->SizeOfDataFormatBuffer == sizeof(ULONG));

    //
    // Walk the formats supported by the stream searching for a match
    // of the three GUIDs which together define a DATARANGE
    //

  for (j = 0; j < numberOfFormatArrayEntries; j++, availableFormats++) {

	if (!AdapterCompareGUIDsAndFormatSize(dataRange,
						      *availableFormats)) {
	    // not the format we want                                           
     
	    continue;
	}

	//
	// Now that the three GUIDs match, switch on the Specifier
	// to do a further type specific check
	//

	// -------------------------------------------------------------------
	// Specifier FORMAT_VideoInfo for VIDEOINFOHEADER
	// -------------------------------------------------------------------

	if (IsEqualGUID (&dataRange->Specifier, 
                     &KSDATAFORMAT_SPECIFIER_VIDEOINFO)) {

	  PKS_DATARANGE_VIDEO dataRangeVideoToVerify =
		    (PKS_DATARANGE_VIDEO) dataRange;
	  PKS_DATARANGE_VIDEO dataRangeVideo =
		    (PKS_DATARANGE_VIDEO) *availableFormats;
      PKS_DATAFORMAT_VIDEOINFOHEADER DataFormatVideoInfoHeaderOut;

	    //
	    // Check that the other fields match
	    //
	  if ((dataRangeVideoToVerify->bFixedSizeSamples !=
					 dataRangeVideo->bFixedSizeSamples) ||
	      (dataRangeVideoToVerify->bTemporalCompression !=
					     dataRangeVideo->bTemporalCompression) ||
		  (dataRangeVideoToVerify->StreamDescriptionFlags !=
					     dataRangeVideo->StreamDescriptionFlags) ||
		  (dataRangeVideoToVerify->MemoryAllocationFlags !=
					     dataRangeVideo->MemoryAllocationFlags) ||
		  (RtlCompareMemory (&dataRangeVideoToVerify->ConfigCaps,
			&dataRangeVideo->ConfigCaps,
			sizeof (KS_VIDEO_STREAM_CONFIG_CAPS)) !=
			sizeof (KS_VIDEO_STREAM_CONFIG_CAPS))) {
		// not the format want                       
		continue;
	  }

      if ((dataRangeVideoToVerify->VideoInfoHeader.bmiHeader.biWidth != 
           dataRangeVideo->VideoInfoHeader.bmiHeader.biWidth ) ||
          (dataRangeVideoToVerify->VideoInfoHeader.bmiHeader.biHeight != 
           dataRangeVideo->VideoInfoHeader.bmiHeader.biHeight )) {
         continue;
      }

      // we will not allow setting FPS below our minimum FPS.
	  if ((dataRangeVideoToVerify->VideoInfoHeader.AvgTimePerFrame >
			 dataRangeVideo->ConfigCaps.MaxFrameInterval) ) {
            dataRangeVideoToVerify->VideoInfoHeader.AvgTimePerFrame =
            	dataRangeVideo->ConfigCaps.MaxFrameInterval;
            dataRangeVideoToVerify->VideoInfoHeader.dwBitRate = 
                dataRangeVideo->ConfigCaps.MinBitsPerSecond;
	  }

      // we will not allow setting FPS above our maximum FPS.
	  if ((dataRangeVideoToVerify->VideoInfoHeader.AvgTimePerFrame <
			 dataRangeVideo->ConfigCaps.MinFrameInterval) ) {
            dataRangeVideoToVerify->VideoInfoHeader.AvgTimePerFrame =
            	dataRangeVideo->ConfigCaps.MinFrameInterval;
            dataRangeVideoToVerify->VideoInfoHeader.dwBitRate = 
                dataRangeVideo->ConfigCaps.MaxBitsPerSecond;
	  }


	  formatSize = sizeof (KSDATAFORMAT) +
		           KS_SIZE_VIDEOHEADER (&dataRangeVideoToVerify->
						                                  VideoInfoHeader);

	  if (onlyWantsSize) {
		break;
	  }

      // Is the return buffer size = 0 ?
      if(intersectInfo->SizeOfDataFormatBuffer == 0) {

          ntStatus = Srb->Status = STATUS_BUFFER_OVERFLOW;
          // the proxy wants to know the actual buffer size to allocate.
          Srb->ActualBytesTransferred = formatSize;
          break;
      }
	   
	    // Caller wants the full data format, make sure we have room
	  if (intersectInfo->SizeOfDataFormatBuffer < formatSize) {
		Srb->Status = ntStatus = STATUS_BUFFER_TOO_SMALL;
		break;
	  }

      DataFormatVideoInfoHeaderOut = 
          (PKS_DATAFORMAT_VIDEOINFOHEADER) intersectInfo->DataFormatBuffer;

	    // Copy over the KSDATAFORMAT, followed by the
	    // actual VideoInfoHeader
	
	  RtlCopyMemory(
		&DataFormatVideoInfoHeaderOut->DataFormat,
		&dataRangeVideoToVerify->DataRange,
		sizeof (KSDATARANGE));

	  DataFormatVideoInfoHeaderOut->DataFormat.FormatSize = formatSize;

	  RtlCopyMemory(
		&DataFormatVideoInfoHeaderOut->VideoInfoHeader,
		&dataRangeVideoToVerify->VideoInfoHeader,
		KS_SIZE_VIDEOHEADER (&dataRangeVideoToVerify->
								VideoInfoHeader));

                  // Calculate biSizeImage for this request, and put the result in both
            // the biSizeImage field of the bmiHeader AND in the SampleSize field
            // of the DataFormat.
            //
            // Note that for compressed sizes, this calculation will probably not
            // be just width * height * bitdepth

        DataFormatVideoInfoHeaderOut->VideoInfoHeader.bmiHeader.biSizeImage =
          DataFormatVideoInfoHeaderOut->DataFormat.SampleSize = 
          KS_DIBSIZE(DataFormatVideoInfoHeaderOut->VideoInfoHeader.bmiHeader);

            //
            // TODO: Perform other validation such as cropping and scaling checks
            // 


	  break;

	}else{
	  Srb->Status = ntStatus = STATUS_NO_MATCH;
	  break;
	}

  } // End of loop on all formats for this stream

  if (NT_SUCCESS(ntStatus)) {
	if (onlyWantsSize) {
	  *(PULONG) intersectInfo->DataFormatBuffer = formatSize;
	  Srb->ActualBytesTransferred = sizeof(ULONG);
	}else {      
	  Srb->ActualBytesTransferred = formatSize;
	}
  }   
   
  return ntStatus;
}

/*
** AdapterVerifyFormat()
**
**   Checks the validity of a format request by walking through the
**       array of supported KSDATA_RANGEs for a given stream.
**
** Arguments:
**
**   pKSDataFormat - pointer of a KS_DATAFORMAT_VIDEOINFOHEADER structure.
**   StreamNumber - index of the stream being queried / opened.
**
** Returns:
**
**   TRUE if the format is supported
**   FALSE if the format cannot be suppored
**
** Side Effects:  none
*/

BOOL
AdapterVerifyFormat(
    PKS_DATAFORMAT_VIDEOINFOHEADER pKSDataFormatToVerify,
    int StreamNumber
    )
{
  PKS_VIDEOINFOHEADER         pVideoInfoHdrToVerify =
                                   &pKSDataFormatToVerify->VideoInfoHeader;
  PKS_VIDEOINFOHEADER         pVideoInfoHdr;
  PKSDATAFORMAT               *pAvailableFormats;
  PKS_DATARANGE_VIDEO         pKSDataRange;
  KS_VIDEO_STREAM_CONFIG_CAPS *pConfigCaps;
  int                         NumberOfFormatArrayEntries;
  int                         nSize;
  int                         j;
  RECT                        rcImage;
    
    //
    // Make sure the stream index is valid
    //
  if (StreamNumber >= 2 || StreamNumber < 0) {
	return FALSE;
  }

    //
    // How many formats does this stream support?
    //
  NumberOfFormatArrayEntries =
		Streams[StreamNumber].NumberOfFormatArrayEntries;

  nSize = sizeof (KS_VIDEOINFOHEADER) +
		                          pVideoInfoHdrToVerify->bmiHeader.biSize;

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: Stream=%d\n",
	    StreamNumber));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: FormatSize=%d\n",
	    pKSDataFormatToVerify->DataFormat.FormatSize));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: MajorFormat=%x\n",
	    pKSDataFormatToVerify->DataFormat.MajorFormat));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: pVideoInfoHdrToVerify=%x\n",
		pVideoInfoHdrToVerify));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: KS_VIDEOINFOHEADER size =%d\n",
		nSize));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: Width=%d Height=%d  biBitCount=%d\n",
		pVideoInfoHdrToVerify->bmiHeader.biWidth,
		pVideoInfoHdrToVerify->bmiHeader.biHeight,
		pVideoInfoHdrToVerify->bmiHeader.biBitCount));

  PHILIPSCAM_KdPrint (MAX_TRACE, ("AdapterVerifyFormat: biSizeImage =%d\n",
		pVideoInfoHdrToVerify->bmiHeader.biSizeImage));

    //
    // Get the pointer to the array of available formats
    //
  pAvailableFormats  = Streams[StreamNumber].StreamFormatsArray;

    //
    // Walk the array, searching for a match
    //
  for (j = 0; j < NumberOfFormatArrayEntries; j++, pAvailableFormats++)	{
	pKSDataRange = (PKS_DATARANGE_VIDEO) *pAvailableFormats;
	pVideoInfoHdr = &pKSDataRange->VideoInfoHeader;
	pConfigCaps = &pKSDataRange->ConfigCaps;
	//
	// Check for matching size, Major Type, Sub Type, and Specifier
	//

	if (!IsEqualGUID (&pKSDataRange->DataRange.MajorFormat,
	          &pKSDataFormatToVerify->DataFormat.MajorFormat)) {
	  continue;
	}
	if (!IsEqualGUID (&pKSDataRange->DataRange.SubFormat,
	        &pKSDataFormatToVerify->DataFormat.SubFormat)) {
	  continue;
	}

	if (!IsEqualGUID (&pKSDataRange->DataRange.Specifier,
	          &pKSDataFormatToVerify->DataFormat.Specifier)) {
	  continue;
	}

	/*
	**  HOW BIG IS THE IMAGE REQUESTED (pseudocode follows)
	**
	**  if (IsRectEmpty (&rcTarget) {
	**      SetRect (&rcImage, 0, 0,
	**              BITMAPINFOHEADER.biWidth,
			BITMAPINFOHEADER.biHeight);
	**  }
	**  else {
	**      // Probably rendering to a DirectDraw surface,
	**      // where biWidth is used to expressed the "stride"
	**      // in units of pixels (not bytes) of the destination surface.
	**      // Therefore, use rcTarget to get the actual image size
	**     
	**      rcImage = rcTarget;
	**  }
	*/

	if ((pVideoInfoHdrToVerify->rcTarget.right -
	     pVideoInfoHdrToVerify->rcTarget.left <= 0) ||
	    (pVideoInfoHdrToVerify->rcTarget.bottom -
	     pVideoInfoHdrToVerify->rcTarget.top <= 0))	{
	  rcImage.left = rcImage.top = 0;
	  rcImage.right = pVideoInfoHdrToVerify->bmiHeader.biWidth;
	  rcImage.bottom = pVideoInfoHdrToVerify->bmiHeader.biHeight;
	} else {
	  rcImage = pVideoInfoHdrToVerify->rcTarget;
	}
    if ((pVideoInfoHdrToVerify->bmiHeader.biWidth != 
                      pVideoInfoHdr->bmiHeader.biWidth ) ||
        (pVideoInfoHdrToVerify->bmiHeader.biHeight != 
                      pVideoInfoHdr->bmiHeader.biHeight )) {
      continue;
    }

    if ( pVideoInfoHdrToVerify->bmiHeader.biSizeImage != 
                      pVideoInfoHdr->bmiHeader.biSizeImage) {
      PHILIPSCAM_KdPrint (MIN_TRACE, ("***Error**:Format mismatch Width=%d Height=%d  image size=%d\n", 
        pVideoInfoHdrToVerify->bmiHeader.biWidth, 
        pVideoInfoHdrToVerify->bmiHeader.biHeight,
        pVideoInfoHdrToVerify->bmiHeader.biSizeImage));
      continue;
    }  

	//
	// HOORAY, the format passed all of the tests, so we support it
	//
	return TRUE;
  }
    //
    // The format requested didn't match any of our listed ranges,
    // so refuse the connection.
    //
  return FALSE;

}

//
// hooks for stream SRBs
//

VOID STREAMAPI
PHILIPSCAM_ReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PVOID DeviceContext,
    IN PBOOLEAN Completed
    )
{
//     PHILIPSCAM_KdPrint (MAX_TRACE, ("P*_ReceiveDataPacket\n"));
}


VOID STREAMAPI
PHILIPSCAM_ReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PVOID DeviceContext,
    IN PBOOLEAN Completed
    )
{
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("'PHILIPSCAM: Receive Ctrl SRB  %x\n", Srb->Command));
	
  *Completed = TRUE; 
  Srb->Status = STATUS_SUCCESS;

  switch (Srb->Command)	{

	case SRB_PROPOSE_DATA_FORMAT:
	  PHILIPSCAM_KdPrint(MIN_TRACE, ("'Receiving SRB_PROPOSE_DATA_FORMAT  SRB  \n"));
	  if ( !(AdapterVerifyFormat (
				(PKS_DATAFORMAT_VIDEOINFOHEADER)Srb->CommandData.OpenFormat, 
				Srb->StreamObject->StreamNumber))) {
		Srb->Status = STATUS_NO_MATCH;
		PHILIPSCAM_KdPrint(MIN_TRACE,("SRB_PROPOSE_DATA_FORMAT FAILED\n"));
	  }
	  break;

	case SRB_SET_DATA_FORMAT:  
      {
        PKS_DATAFORMAT_VIDEOINFOHEADER pKSDataFormat = 
                (PKS_DATAFORMAT_VIDEOINFOHEADER) Srb->CommandData.OpenFormat;
        PKS_VIDEOINFOHEADER  pVideoInfoHdrRequested = 
                                             &pKSDataFormat->VideoInfoHeader;

	    PHILIPSCAM_KdPrint(MIN_TRACE, ("'SRB_SET_DATA_FORMAT\n"));

	    if ((AdapterVerifyFormat(pKSDataFormat,Srb->StreamObject->StreamNumber))) {
          
//        if (deviceContext->UsbcamdInterface.USBCAMD_SetVideoFormat(DeviceContext,Srb)) {
//          deviceContext->CurrentProperty.Format.lWidth = 
//                                pVideoInfoHdrRequested->bmiHeader.biWidth;
//          deviceContext->CurrentProperty.Format.lHeight =
//                               pVideoInfoHdrRequested->bmiHeader.biHeight;
//        }
        }else {
		  Srb->Status = STATUS_NO_MATCH;
	  	  PHILIPSCAM_KdPrint(MIN_TRACE,(" SRB_SET_DATA_FORMAT FAILED\n"));
        }
      }
      break;
     
	case SRB_GET_DATA_FORMAT:
	  PHILIPSCAM_KdPrint(MIN_TRACE, ("' SRB_GET_DATA_FORMAT\n"));
	  Srb->Status = STATUS_NOT_IMPLEMENTED;
	  break;


	case SRB_SET_STREAM_STATE:

	case SRB_GET_STREAM_STATE:

	case SRB_GET_STREAM_PROPERTY:

	case SRB_SET_STREAM_PROPERTY:

	case SRB_INDICATE_MASTER_CLOCK:

	default:

 	  *Completed = FALSE; // let USBCAMD handle these control SRBs
  }
  if (*Completed == TRUE) {
    StreamClassStreamNotification(StreamRequestComplete,Srb->StreamObject,Srb);
  }

  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_ReceiveCtrlPacket\n"));
}



// **
// Describe the camera
//

USBCAMD_DEVICE_DATA PHILIPSCAM_DeviceData  = {
  0,
  PHILIPSCAM_Initialize,
  PHILIPSCAM_UnInitialize,
  PHILIPSCAM_ProcessUSBPacket,
  PHILIPSCAM_NewFrame,
  PHILIPSCAM_ProcessRawVideoFrame,
  PHILIPSCAM_StartVideoCapture,
  PHILIPSCAM_StopVideoCapture,
  PHILIPSCAM_Configure,
  PHILIPSCAM_SaveState,
  PHILIPSCAM_RestoreState,
  PHILIPSCAM_AllocateBandwidth,
  PHILIPSCAM_FreeBandwidth
};
/*		  Function                      Caller
    PHILIPSCAM_Initialize,              USBCAMD.c : USBCAMD_ConfigureDevice()
    PHILIPSCAM_UnInitialize,            USBCAMD.c : USBCAMD_RemoveDevice
    PHILIPSCAM_ProcessUSBPacket,        iso.c :     USBCAMD_TransferComplete()
    PHILIPSCAM_NewFrame,                iso.c :     USBCAMD_TransferComplete()
    PHILIPSCAM_ProcessRawVideoFrame,    iso.c :     USBCAMD_ProcessWorkItem()
    PHILIPSCAM_StartVideoCapture,       USBCAMD.c : USBCAMD_PrepareChannel()       
                                        reset.c		USBCAMD_ResetPipes()
    PHILIPSCAM_StopVideoCapture,        USBCAMD.c : USBCAMD_UnPrepareChannel()      
                                        reset.c:    USBCAMD_ResetPipes()
    PHILIPSCAM_Configure,               USBCAMD.c : USBCAMD_SelectConfiguration()
    PHILIPSCAM_SaveState,
    PHILIPSCAM_RestoreState,
    PHILIPSCAM_AllocateBandwidth,       		<--+
	   USBCAMD.c : USBCAMD_PrepareChannel()		  -+		<--+
	      STREAM.c : AdapterOpenStream() 					  -+		<--+
		      USBCAMD_AdapterReceivePacket(SRB = SRB_OPEN_STREAM)		  -+
    PHILIPSCAM_FreeBandwidth            USBCAMD.c : USBCAMD_UnPrepareChannel()

*/

VOID
PHILIPSCAM_AdapterReceivePacket( IN PHW_STREAM_REQUEST_BLOCK Srb ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext;
  PHW_STREAM_INFORMATION streamInformation =
                      &(Srb->CommandData.StreamBuffer->StreamInfo);
  PHW_STREAM_HEADER streamHeader =
                      &(Srb->CommandData.StreamBuffer->StreamHeader);       
  PDEVICE_OBJECT deviceObject;       
    
  switch (Srb->Command) {
    case SRB_GET_STREAM_INFO:
	//
	// this is a request for the driver to enumerate requested streams
	//
	  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_AdapterReceivePacket: SRB_GET_STREAM_INFO\n"));

       // get our device ext. from USBCAMD.
 	  deviceContext     =
		USBCAMD_AdapterReceivePacket(Srb, NULL, NULL, FALSE);  
    //
	// we support one stream
	//
	  streamHeader->NumberOfStreams = 1;

	  streamInformation->StreamFormatsArray  = 
	           &PHILIPSCAM_MovingStreamFormats[0];
	  streamInformation->NumberOfFormatArrayEntries =
               Streams[0].NumberOfFormatArrayEntries;
	//
	// set the property information for the video stream
	//
	  streamHeader->DevicePropertiesArray =
         PHILIPSCAM_GetAdapterPropertyTable(&streamHeader->
                                                    NumDevPropArrayEntries) ;

        // pass to usbcamd to finish the job
 	  deviceContext     =
		USBCAMD_AdapterReceivePacket(Srb, &PHILIPSCAM_DeviceData, NULL, TRUE);  
	   
	  ASSERT_DEVICE_CONTEXT(deviceContext);
	break;

    case SRB_GET_DEVICE_PROPERTY:
	//
	// we handle all the property stuff
	//
	  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_AdapterReceivePacket: SRB_GET_DEVICE_PROPERTY\n"));

	  deviceContext     =
		USBCAMD_AdapterReceivePacket(Srb, &PHILIPSCAM_DeviceData, 
		                                          &deviceObject, FALSE);  
	  ASSERT_DEVICE_CONTEXT(deviceContext); 

	  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("SRB_GET_STREAM_INFO\n"));
	  PHILIPSCAM_PropertyRequest( FALSE, deviceObject, deviceContext, Srb);

	  StreamClassDeviceNotification(DeviceRequestComplete,
				                    Srb->HwDeviceExtension,
				                    Srb);
	break;           
	   
    case SRB_SET_DEVICE_PROPERTY:
	//
	// we handle all the property stuff
	//
	  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_AdapterReceivePacket: SRB_SET_DEVICE_PROPERTY\n"));

	  deviceContext =    
	    USBCAMD_AdapterReceivePacket(Srb, &PHILIPSCAM_DeviceData, 
	                                      &deviceObject, FALSE);  
	  ASSERT_DEVICE_CONTEXT(deviceContext); 

	  PHILIPSCAM_KdPrint (ULTRA_TRACE, ("SRB_GET_STREAM_INFO\n"));
	  PHILIPSCAM_PropertyRequest( TRUE, deviceObject, deviceContext, Srb);

	  StreamClassDeviceNotification(DeviceRequestComplete,
				                    Srb->HwDeviceExtension,
				                    Srb);
	break;

    case SRB_OPEN_STREAM:  {
      PKS_DATAFORMAT_VIDEOINFOHEADER  pKSDataFormat =
	    	(PKS_DATAFORMAT_VIDEOINFOHEADER) Srb->CommandData.OpenFormat;
	  PKS_VIDEOINFOHEADER  pVideoInfoHdrRequested =
		                           &pKSDataFormat->VideoInfoHeader;
      PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_AdapterReceivePacket: SRB_OPEN_STREAM\n"));
	// pass to usbcamd to finish the job
      Srb->StreamObject->ReceiveDataPacket = 
                            (PVOID) PHILIPSCAM_ReceiveDataPacket;
	  Srb->StreamObject->ReceiveControlPacket = 
	                        (PVOID) PHILIPSCAM_ReceiveCtrlPacket;

      if (AdapterVerifyFormat(pKSDataFormat,
		                      Srb->StreamObject->StreamNumber)) {
	    deviceContext =
		   USBCAMD_AdapterReceivePacket(Srb, &PHILIPSCAM_DeviceData, 
		                                NULL, TRUE);
//		deviceContext->StreamOpen = TRUE;     
	  }else{
	    Srb->Status = STATUS_INVALID_PARAMETER;
	    StreamClassDeviceNotification(DeviceRequestComplete,
				      Srb->HwDeviceExtension,
				      Srb);
	  }
	}
	break;                   


    case SRB_GET_DATA_INTERSECTION:
		//
		// Return a format, given a range
		//
	//deviceContext =    
	//    USBCAMD_AdapterReceivePacket(Srb,
		//                                   &PHILIPSCAM_DeviceData,
		//                                   &deviceObject,
		//                                                               FALSE);  
      PHILIPSCAM_KdPrint (MAX_TRACE, ("P*_AdapterReceivePacket: SRB_GET_DATA_INTERSECTION\n"));
 										
	  Srb->Status = AdapterFormatFromRange(Srb);
	  StreamClassDeviceNotification(DeviceRequestComplete,
				                    Srb->HwDeviceExtension,
				                    Srb);   
    break;   

    case SRB_CLOSE_STREAM:         // close the specified stream

    case SRB_CHANGE_POWER_STATE:   // change power state

    case SRB_SET_STREAM_RATE:	   // set the rate at which the stream should run

    default:
	//
	// let usbcamd handle it
	//
      PHILIPSCAM_KdPrint (ULTRA_TRACE, ("P*_AdapterReceivePacket: SRB_HANDLED BY USBCAMD\n"));
  
  	  deviceContext =    
	    USBCAMD_AdapterReceivePacket(Srb, 
	                                 &PHILIPSCAM_DeviceData, NULL, TRUE);           
	  ASSERT_DEVICE_CONTEXT(deviceContext); 
  }
}


/*
** DriverEntry()
**
** This routine is called when the mini driver is first loaded.  The driver
** should then call the StreamClassRegisterAdapter function to register with
** the stream class driver
**
** Arguments:
**
**  Context1:  The context arguments are private plug and play structures
**             used by the stream class driver to find the resources for this
**             adapter
**  Context2:
**
** Returns:
**
** This routine returns an NT_STATUS value indicating the result of the
** registration attempt. If a value other than STATUS_SUCCESS is returned, the
** minidriver will be unloaded.
**
** Side Effects:  none
*/

ULONG
DriverEntry(
  PVOID Context1,
  PVOID Context2 ){
    PHILIPSCAM_KdPrint (MAX_TRACE, ("'Driver Entry\n"));
    return USBCAMD_DriverEntry(Context1,
			                   Context2,
			                   sizeof(PHILIPSCAM_DEVICE_CONTEXT),
			                   sizeof(PHILIPSCAM_FRAME_CONTEXT),
			                   PHILIPSCAM_AdapterReceivePacket);
}


/*
** PHILIPSCAM_Initialize()
**
** On entry the device has been configured and the initial alt
** interface selected -- this is where we may send additional
** vendor commands to enable the device.
**
** Philips actions:
** 1.	 Find out what type of camera is available, VGA or medium-Res
**       This has consequences for the available streamformats.
**
** Arguments:
**
** BusDeviceObject - pdo associated with this device
**
** DeviceContext - driver specific context
**
** Returns:
**
** NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_Initialize( PDEVICE_OBJECT BusDeviceObject,
                       PVOID DeviceContext	) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext=DeviceContext;
  NTSTATUS ntStatus = STATUS_SUCCESS;
  ASSERT_DEVICE_CONTEXT(deviceContext);
    //
    // perform any hardware specific
    // initialization
    //
  ntStatus = PHILIPSCAM_GetSensorType(deviceContext);
  if  (NT_SUCCESS(ntStatus)) {
    ntStatus = PHILIPSCAM_GetReleaseNumber(deviceContext);
  }
  deviceContext->EmptyPacketCounter = 0; // (Initialize this counter)
  if  (NT_SUCCESS(ntStatus)) {
    ntStatus = PHILIPSCAM_InitPrpObj(deviceContext);
  }
  PHILIPSCAM_KdPrint (MIN_TRACE, ("'X P*_Initialize 0x%x\n", ntStatus));
  ILOGENTRY("inHW", 0, 0, ntStatus);
   
  return ntStatus;
}


/*
** PHILIPSCAM_UnInitialize()
**
** Assume the device hardware is gone -- all that needs to be done is to 
** free any allocated resources (like memory).
**
** Arguments:
**
** BusDeviceObject - pdo associated with this device
**
** DeviceContext - driver specific context
**
** Returns:
**
** NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_UnInitialize( PDEVICE_OBJECT BusDeviceObject,
                         PVOID DeviceContext ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext;
  NTSTATUS ntStatus = STATUS_SUCCESS;

  deviceContext = DeviceContext;
  ASSERT_DEVICE_CONTEXT(deviceContext);
  if ( deviceContext->Interface) { 
   	ExFreePool(deviceContext->Interface);
   	deviceContext->Interface = NULL;
  }
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'P*_UnInitialize 0x%x\n", ntStatus));
  return ntStatus;
}


/*
** PHILIPSCAM_Configure()
**
** Configure the iso streaming Interface:
**
** Called just before the device is configured, this is where we tell
** usbcamd which interface and alternate setting to use for the idle state.
**
** NOTE: The assumption here is that the device will have a single interface
**  with multiple alt settings and each alt setting has the same number of
**  pipes.
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub whe can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
**  Interface - USBD interface structure initialized with the proper values
**              for select_configuration. This Interface structure corresponds
**              a single iso interafce on the device.  This is the drivers
**              chance to pick a particular alternate setting and pipe
**              parameters.
**
**
**  ConfigurationDescriptor - USB configuration Descriptor for
**      this device.
**
** Returns:
**
**  NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_Configure(IN PDEVICE_OBJECT BusDeviceObject,
                     IN PVOID DeviceContext,
                     IN OUT PUSBD_INTERFACE_INFORMATION Interface,
                     IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,
                     IN OUT PLONG DataPipeIndex,
                     IN OUT PLONG SyncPipeIndex	) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext;
  NTSTATUS ntStatus = STATUS_SUCCESS;

  deviceContext = DeviceContext;
  deviceContext->Sig = PHILIPSCAM_DEVICE_SIG;
    //
    // initilialize any other context stuff
    //
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'E P*_Configure \n"));

  if ( Interface == NULL) {
    	//
    	// this is a signal from usbcamd that I need to free my previousely 
    	// allocated space for interface descriptor due to error conditions
    	// during IRP_MN_START_DEVICE processing and driver will be unloaded soon.
    	//
    	if (deviceContext->Interface) {
    		ExFreePool(deviceContext->Interface);
    		deviceContext->Interface = NULL;
    	}
    	return ntStatus;
  }

  deviceContext->Interface = ExAllocatePool(NonPagedPool,
     					                    Interface->Length);

  *DataPipeIndex = 1;
  *SyncPipeIndex = -1;  //  no sync pipe 

  if (deviceContext->Interface) {
	Interface->AlternateSetting = ALT_INTERFACE_0 ;
	  // This interface has two pipes,
	  // initialize input parameters to USBD for both pipes.
	  // The MaximumTransferSize is the size of the largest
	  // buffer we want to submit for a single iso urb
	  // request.
	  //
    Interface->Pipes[PHILIPSCAM_SYNC_PIPE].MaximumTransferSize =
           USBD_DEFAULT_MAXIMUM_TRANSFER_SIZE;        //  = PAGE SIZE ??
	Interface->Pipes[PHILIPSCAM_DATA_PIPE].MaximumTransferSize =
//	    1024*32;       // 32k transfer per urb       ??
                                      1024*198;       // CIF: 352x288x16/8 
    RtlCopyMemory(deviceContext->Interface,
	     	      Interface,
		          Interface->Length);                
	PHILIPSCAM_KdPrint (MAX_TRACE, ("'size of interface request  = %d\n", 
	                                  Interface->Length));
  }else{
	ntStatus = STATUS_INSUFFICIENT_RESOURCES;
  }
  //
  // return interface number and alternate setting
  //
  PHILIPSCAM_KdPrint (MIN_TRACE, ("'X P*_Configure 0x%x\n", ntStatus));

  return ntStatus;
}


/*
** PHILIPSCAM_StartVideoCapture()
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub we can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
** Returns:
**
** NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_StartVideoCapture( IN PDEVICE_OBJECT BusDeviceObject,
                              IN PVOID DeviceContext ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  NTSTATUS ntStatus= STATUS_SUCCESS;
   
  ASSERT_DEVICE_CONTEXT(deviceContext);
    //
    // This is where we select the interface we need and send
    // commands to start capturing
    //
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'E P*_StartVideoCapture \n"));
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'X P*_StartVideocapture 0x%x\n", ntStatus));

  return ntStatus;       
}

/*
** PHILIPSCAM_AllocateBandwidth()
**
** Called just before the iso video capture stream is
** started, here is where we select the appropriate
** alternate interface and set up the device to stream.
**
**  Called in connection with the stream class RUN command
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub we can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
**  RawFrameLength - pointer to be filled in with size of buffer needed to
**                  receive the raw frame data from the packet stream.
**
**  Format - pointer to PKS_DATAFORMAT_VIDEOINFOHEADER associated with this
**          stream.         
**
** Returns:
**
** NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_AllocateBandwidth( IN PDEVICE_OBJECT BusDeviceObject,
                              IN PVOID DeviceContext,
                              OUT PULONG RawFrameLength,
                              IN PVOID Format             ){ 
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  NTSTATUS ntStatus = STATUS_SUCCESS;
  PKS_DATAFORMAT_VIDEOINFOHEADER pdataFormatHeader;
  PKS_BITMAPINFOHEADER bmInfoHeader;
  LONGLONG llDefaultFramePeriod ;
  USHORT usReqFrRate;
  ASSERT_DEVICE_CONTEXT(deviceContext);
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'E P*_AllocateBandwidth \n"));
    //
    // This is where we select the interface we need and send
    // commands to start capturing
    //
  *RawFrameLength = 0;
  pdataFormatHeader = Format;
  bmInfoHeader = &pdataFormatHeader->VideoInfoHeader.bmiHeader;
//  deviceContext->pSelectedStreamFormat = &pdataFormatHeader->DataFormat; // removed RMR

  RtlCopyMemory (&deviceContext->CamStatus.PictureSubFormat,    // added RMR
                 &pdataFormatHeader->DataFormat.SubFormat,
				 sizeof (GUID));

  PHILIPSCAM_KdPrint (MIN_TRACE, 
	                    ("'req.format %d x %d\n", bmInfoHeader->biWidth,
			               bmInfoHeader->biHeight));

  switch (bmInfoHeader->biWidth) {
	case QQCIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATQQCIF;
      *RawFrameLength = (SQCIF_X * SQCIF_Y * 12)/8;
    break;
	case SQCIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATSQCIF;
      *RawFrameLength = (SQCIF_X * SQCIF_Y * 12)/8;
    break;
	case QCIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATQCIF;
      *RawFrameLength = (QCIF_X * QCIF_Y * 12)/8;
    break;
    case CIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATCIF;
      *RawFrameLength = (CIF_X * CIF_Y * 12)/8;
    break;
    case SQSIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATSQSIF;
      *RawFrameLength = (SQCIF_X * SQCIF_Y * 12)/8;
    break;
    case QSIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATQSIF;
      *RawFrameLength = (QCIF_X * QCIF_Y * 12)/8;
    break;
    case SSIF_X:
	  if (bmInfoHeader->biHeight == SSIF_Y){
        deviceContext->CamStatus.PictureFormat = FORMATSSIF;
      }else{
        deviceContext->CamStatus.PictureFormat = FORMATSCIF;
      }
      *RawFrameLength = (CIF_X * CIF_Y * 12)/8;
    break;
    case SIF_X:
      deviceContext->CamStatus.PictureFormat = FORMATSIF;
      *RawFrameLength = (CIF_X * CIF_Y * 12)/8;
    break;
    default:
      deviceContext->CamStatus.PictureFormat = FORMATQCIF;
      *RawFrameLength = (QCIF_X * QCIF_Y * 12)/8;
  }

  llDefaultFramePeriod = pdataFormatHeader->VideoInfoHeader.AvgTimePerFrame; // [100nS]
  usReqFrRate = MapFrPeriodFrRate(llDefaultFramePeriod);
  deviceContext->CamStatus.PictureFrameRate = usReqFrRate;

  PHILIPSCAM_KdPrint (MIN_TRACE,("Req.frperiod: %d us \n", 
	                             llDefaultFramePeriod / 10));
  PHILIPSCAM_KdPrint (MIN_TRACE,("Req.frperiod index: %d = %s fps\n",
	                            usReqFrRate, FRString(usReqFrRate)));


  // Define framerate based on available USB=bandwidth
  // if not suff.BW, frame rate is decreased.
  ntStatus = PHILIPSCAM_SetFrRate_AltInterface(deviceContext);

 
  // Send from here the format/framerate to the camera hardware:
  if (NT_SUCCESS(ntStatus)) {
    ntStatus = PHILIPSCAM_SetFormatFramerate( deviceContext );
  }
  if (NT_SUCCESS(ntStatus)) {
    ntStatus = PHILIPSCAM_StartCodec( deviceContext );
  }

  if (NT_SUCCESS(ntStatus)) {
	deviceContext->FrameLength = *RawFrameLength;
  }
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'X P*_AllocateBandwidth  0x%x\n", ntStatus));

  return ntStatus;       
}

/*
** PHILIPSCAM_FreeBandwidth()
**
** Called after the iso video stream is stopped, this is where we
** select an alternate interface that uses no bandwidth.
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub we can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
** Returns:
**
**  NTSTATUS code
**
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_FreeBandwidth(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext	 ){
  NTSTATUS ntStatus;
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
    // turn off streaming on the device
  ASSERT_DEVICE_CONTEXT(deviceContext);
  ntStatus = PHILIPSCAM_StopCodec(deviceContext);
  deviceContext->Interface->AlternateSetting = ALT_INTERFACE_0 ;
  ntStatus = USBCAMD_SelectAlternateInterface(
		   deviceContext,
		   deviceContext->Interface);

  PHILIPSCAM_KdPrint (MAX_TRACE, ("'X P*_FreeBandWidth 0x%x\n", ntStatus));
  return ntStatus;
}


/*
** PHILIPSCAM_StopVideoCapture()
**
** Called after the iso video stream is stopped, this is where we
** select an alternate interface that uses no bandwidth.
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub we can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
** Returns:
**
**  NTSTATUS code
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_StopVideoCapture( PDEVICE_OBJECT BusDeviceObject,
                             PVOID DeviceContext ) {
  NTSTATUS ntStatus = STATUS_SUCCESS;
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
    // turn off streaming on the device
  ASSERT_DEVICE_CONTEXT(deviceContext);
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'X P*_StopVideoCapture 0x%x\n", ntStatus));
  return ntStatus;
}


/*
** PHILIPSCAM_NewFrame()
**
**  called at DPC level to allow driver to initialize a new video frame
**  context structure
**
** Arguments:
**
**  DeviceContext - minidriver device  context
**
**  FrameContext - frame context to be initialized
**
** Returns:
**
**  NTSTATUS code
** 
** Side Effects:  none
*/

VOID
PHILIPSCAM_NewFrame( PVOID DeviceContext,
                     PVOID FrameContext	 ){
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  PPHILIPSCAM_FRAME_CONTEXT pFrameContext = FrameContext;

  pFrameContext->USBByteCounter = 0;

//  PHILIPSCAM_KdPrint (MAX_TRACE, ("'P*_NewFrame\n"));
  ASSERT_DEVICE_CONTEXT(deviceContext);
}


/*
** PHILIPSCAM_ProcessUSBPacket()
**
**  called at DPC level to allow driver to determine if this packet is part
**  of the current video frame or a new video frame.
**
**  This function should complete as quickly as possible, any image processing
**  should be deferred to the ProcessRawFrame routine.
**
** Arguments:
**
**  BusDeviceObject - device object created by the hub we can submit
**                  urbs to our device through this deviceObject
**
**  DeviceContext - minidriver device  context
**
**  CurrentFrameContext - some context for this particular frame
**
**  SyncPacket - iso packet descriptor from sync pipe, not used if the interface
**              has only one pipe.
**
**  SyncBuffer - pointer to data for the sync packet
**
**  DataPacket - iso packet descriptor from data pipe
**
**  DataBuffer - pointer to data for the data packet
**
**  FrameComplete - indicates to usbcamd that this is the first data packet
**          for a new video frame
**
** Returns:
** 
** number of bytes that should be copied in to the rawFrameBuffer of FrameBuffer.
**
** Side Effects:  none


*/
ULONG
PHILIPSCAM_ProcessUSBPacket(
              PDEVICE_OBJECT BusDeviceObject,
              PVOID DeviceContext,
              PVOID CurrentFrameContext,
              PUSBD_ISO_PACKET_DESCRIPTOR SyncPacket,
              PVOID SyncBuffer,
              PUSBD_ISO_PACKET_DESCRIPTOR DataPacket,
              PVOID DataBuffer,
              PBOOLEAN FrameComplete,
              PBOOLEAN NextFrameIsStill	) {
  static BOOLEAN  EndOfFrameFound = FALSE;
  static BOOLEAN  StartOfFrameFound = FALSE;
  static ULONG previous_packetSize= 0;
  static ULONG ActualBytesReceived = 0 ;

#if DBG
#if DBGHARD

  typedef struct {
    ULONG PSize;
    ULONG DeltaT;
  } PACKETINFO;
#define  MAXI 2048
  static ULONG ulRcvdFrameSize[MAXI];
  static ULONG ulPHistory[MAXI][2];
  static ULONG ulPcktCntr  = 0;
  static ULONG ulFrSCntr = 0;
  static LARGE_INTEGER liCurTicks, liPrevTicks;
  static ULONG ElapsedTicks;
  static ULONG TickPeriod ; 

#endif
#endif
  
  PUSBD_ISO_PACKET_DESCRIPTOR dataPacket = DataPacket;
  PPHILIPSCAM_FRAME_CONTEXT pFrameContext = CurrentFrameContext;

  ULONG  packetSize;

  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  *NextFrameIsStill = FALSE;
//    PHILIPSCAM_KdPrint (MAX_TRACE, ("'E P*_ProcessPacket\n"));
  ASSERT_DEVICE_CONTEXT(deviceContext);

  packetSize = dataPacket->Length ;


//            Synchronization:
//            ----------------
  if (packetSize != previous_packetSize){
	                              //end or start of frame
	if (packetSize < previous_packetSize) {
	  EndOfFrameFound = TRUE;
	}else{
	  StartOfFrameFound = TRUE;
	}
  }

  if ( StartOfFrameFound == TRUE ){
	*FrameComplete = TRUE;
	EndOfFrameFound = FALSE;
	StartOfFrameFound = FALSE;

#if DBG
#if DBGHARD
    ulRcvdFrameSize[ulFrSCntr] = ActualBytesReceived;
	if (ulFrSCntr==MAXI)	ulFrSCntr = 0;
#endif
#endif

	if (pFrameContext)	
		pFrameContext->USBByteCounter = ActualBytesReceived;
    ActualBytesReceived = 0;
  }

  ActualBytesReceived += packetSize;

#if DBG
#if DBGHARD

//  KeQueryTickCount(&liCurTicks);
  ElapsedTicks = (ULONG)( liCurTicks.QuadPart - liPrevTicks.QuadPart);
  ulPHistory[ulPcktCntr][0]  = packetSize;
  ulPHistory[ulPcktCntr][1]  = ElapsedTicks  ;
  liPrevTicks.QuadPart = liCurTicks.QuadPart;
  ulPcktCntr++;
  if (ulPcktCntr==MAXI) ulPcktCntr = 0;
#endif
#endif
	 
                           // Added to improve robustness
  if ( ActualBytesReceived > deviceContext->FrameLength){
	*FrameComplete = TRUE;
	ActualBytesReceived = 0;
  } 
  previous_packetSize = packetSize;
  return packetSize;
}

/*
** PHILIPSCAM_ProcessRawVideoFrame()
**
**  Called at PASSIVE level to allow driver to perform any decoding of the
**  raw video frame.
**
**    This routine will convert the packetized data in to the fromat
**    the CODEC expects, ie y,u,v
**
**    data is always of the form 256y 64u 64v (384 byte chunks) regardless of USB
**    packet size.
**
**
** Arguments:
**
**  DeviceContext - driver context
**
**  FrameContext - driver context for this frame
**
**  FrameBuffer - pointer to the buffer that should receive the final
**              processed video frame.
**
**  FrameLength - length of the Frame buffer (from the original read
**                  request)
**
**  RawFrameBuffer - pointer to buffer containing the received USB packets
**
**  RawFrameLength - length of the raw frame.
**
**  NumberOfPackets - number of USB packets received in to the RawFrameBuffer
**
**  BytesReturned - pointer to value to return for number of bytes read.
**             
** Returns:
**
**  NT status completion code for the read irp
** 
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_ProcessRawVideoFrame( PDEVICE_OBJECT BusDeviceObject,
                                 PVOID DeviceContext,
                                 PVOID FrameContext,
                                 PVOID FrameBuffer,
                                 ULONG FrameLength,
                                 PVOID RawFrameBuffer,
                                 ULONG RawFrameLength,
                                 ULONG NumberOfPackets,
                                 PULONG BytesReturned  ) {
NTSTATUS ntStatus = STATUS_SUCCESS;
PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
PPHILIPSCAM_FRAME_CONTEXT frameContext = FrameContext;
ULONG  rawDataLength, processedDataLength;
PUCHAR frameBuffer    = FrameBuffer;
PUCHAR rawFrameBuffer = RawFrameBuffer;
ULONG  rawFrameLength = RawFrameLength;
ULONG  frameLength    = FrameLength;
ULONG  ExpectedNumberOfBytes;

    //TEST_TRAP();
  ASSERT_DEVICE_CONTEXT(deviceContext);

  switch (deviceContext->CamStatus.PictureFormat){
    case FORMATCIF:
	  if ( deviceContext->CamStatus.PictureCompressing == COMPRESSION0 ){
		ExpectedNumberOfBytes = CIF_X * CIF_Y * 3/2 ;
	  }else{
		ExpectedNumberOfBytes = CIF_X * CIF_Y / 2 ;
	  }  
	break;
    case FORMATQCIF:
	  ExpectedNumberOfBytes = QCIF_X * QCIF_Y * 3/2 ;
	break;
    case FORMATSQCIF:
	  ExpectedNumberOfBytes = SQCIF_X * SQCIF_Y * 3/2 ;
	break;
    case FORMATQQCIF:
	  ExpectedNumberOfBytes = SQCIF_X * SQCIF_Y * 3/2 ;
	break;
    case FORMATVGA:
	  ExpectedNumberOfBytes = VGA_X * VGA_Y * 3/2 ;
	break;
    case FORMATSIF:
	  if ( deviceContext->CamStatus.PictureCompressing == COMPRESSION0 ){
		ExpectedNumberOfBytes = CIF_X * CIF_Y * 3/2 ;
	  }else{
		ExpectedNumberOfBytes = CIF_X * CIF_Y / 2 ;
	  }  
	break;
    case FORMATSSIF:
	  if ( deviceContext->CamStatus.PictureCompressing == COMPRESSION0 ){
		ExpectedNumberOfBytes = CIF_X * CIF_Y * 3/2 ;
	  }else{
		ExpectedNumberOfBytes = CIF_X * CIF_Y / 2 ;
	  }  
	break;
    case FORMATSCIF:
	  if ( deviceContext->CamStatus.PictureCompressing == COMPRESSION0 ){
		ExpectedNumberOfBytes = CIF_X * CIF_Y * 3/2 ;
	  }else{
		ExpectedNumberOfBytes = CIF_X * CIF_Y / 2 ;
	  }  
	break;
    case FORMATQSIF:
	  ExpectedNumberOfBytes = QCIF_X * QCIF_Y * 3/2 ;
	break;
    case FORMATSQSIF:
	  ExpectedNumberOfBytes = SQCIF_X * SQCIF_Y * 3/2 ;
	break;
    default:
      ExpectedNumberOfBytes = 0;
  }

  if (ExpectedNumberOfBytes == frameContext->USBByteCounter ) {
    ntStatus =  PHILIPSCAM_DecodeUsbData(deviceContext, 
                                       frameBuffer,
	  		  			               frameLength,
						               rawFrameBuffer,
						               rawFrameLength);
    *BytesReturned = frameLength ;
  }else{
    PHILIPSCAM_KdPrint (MIN_TRACE, ("Actual (%d) < Expected (%d) \n",
    	frameContext->USBByteCounter,ExpectedNumberOfBytes));

//	Green screen complaints bug fix : At the moment USBCAMD delivers a frame for
//	processing, we check whether the size of that frame is correct.
//	If not we return to USBCAMD a framelength to be copied of zero and we won't
//	process the frame.
//	The workaround is to let USBCAMD copy the buffer with the actual buffer length
//	and not to process the frame. Apparantly, returning a bufferlength zero has as
//	consequence that USB packets gets lost.
//	This causes subsequent frames to be incorrect, returning again bufferlength
//	zero. And so on. Not processing buffers has as consequence that the renderer
//	sees empty buffers resulting in a green screen.
//	Sometimes, if this happens  during streaming, old buffers are being rerendered.

    *BytesReturned = 0 ;  
    
	// 2001/01/29: This workaround was causing the first few frames
	// captured to remain uninitialized due to insufficient framelength.
	// Returning 0 to indicate a dropped frame is the correct behavior.
    //*BytesReturned = frameLength ;
  }

  return ntStatus;
}

/*
** PHILIPSCAM_PropertyRequest()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code for the read irp
** 
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_PropertyRequest( BOOLEAN SetProperty,
                            PDEVICE_OBJECT BusDeviceObject,
                            PVOID DeviceContext,
                            PVOID PropertyContext ) {
  NTSTATUS ntStatus = STATUS_SUCCESS;
  PHW_STREAM_REQUEST_BLOCK srb = (PHW_STREAM_REQUEST_BLOCK)PropertyContext;
  PSTREAM_PROPERTY_DESCRIPTOR propertyDescriptor;

  propertyDescriptor = srb->CommandData.PropertyInfo;
    //
    // identify the property to set
    //
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'E P*_PropertyRequest\n"));

    if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOPROCAMP, &propertyDescriptor->Property->Set)) 
		if (SetProperty) 
			ntStatus = PHILIPSCAM_SetCameraProperty(DeviceContext, srb);
		else 
			ntStatus = PHILIPSCAM_GetCameraProperty(DeviceContext, srb);
	else if (IsEqualGUID(&PROPSETID_PHILIPS_CUSTOM_PROP, &propertyDescriptor->Property->Set)) 
		if (SetProperty) 
			ntStatus = PHILIPSCAM_SetCustomProperty(DeviceContext, srb);
		else 
			ntStatus = PHILIPSCAM_GetCustomProperty(DeviceContext, srb);
	else if  (IsEqualGUID(&PROPSETID_PHILIPS_FACTORY_PROP, &propertyDescriptor->Property->Set)) 
		if (SetProperty) 
			ntStatus = PHILIPSCAM_SetFactoryProperty(DeviceContext, srb);
		else 
			ntStatus = PHILIPSCAM_GetFactoryProperty(DeviceContext, srb);
	else if (IsEqualGUID(&PROPSETID_VIDCAP_VIDEOCONTROL, &propertyDescriptor->Property->Set))	
	{
		if (SetProperty) 
			ntStatus = PHILIPSCAM_SetVideoControlProperty(DeviceContext, srb);
		else
			ntStatus = PHILIPSCAM_GetVideoControlProperty(DeviceContext, srb);
	}
	else 
		ntStatus = STATUS_NOT_SUPPORTED;

  PHILIPSCAM_KdPrint (MAX_TRACE, ("'X P*_PropertyRequest 0x%x\n",ntStatus));

  return ntStatus;
}

/*
** PHILIPSCAM_SaveState()
**
** Arguments:
**
** Returns:
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_SaveState( PDEVICE_OBJECT BusDeviceObject,
                      PVOID DeviceContext ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'P*_SaveState\n"));
  return STATUS_SUCCESS;
}   


/*
** PHILIPSCAM_RestoreState()
**
** Arguments:
**
** Returns:
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_RestoreState( PDEVICE_OBJECT BusDeviceObject,
                         PVOID DeviceContext ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  PHILIPSCAM_KdPrint (MAX_TRACE, ("'RestoreState\n"));
  return STATUS_SUCCESS;
}   


/*
** PHILIPSCAM_ReadRegistry()
**
** Arguments:
**
** Returns:
**
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_ReadRegistry( PDEVICE_OBJECT BusDeviceObject,
                         PVOID DeviceContext  ) {
  PPHILIPSCAM_DEVICE_CONTEXT deviceContext = DeviceContext;
  NTSTATUS ntStatus=STATUS_SUCCESS;
  HANDLE handle;

  return ntStatus;
}   


USHORT 
MapFrPeriodFrRate(LONGLONG llFramePeriod)
{
	USHORT FrameRate;
		
    if       (llFramePeriod <= 420000 ){        // 41.6 rounded to 42 ms
	  FrameRate = FRRATE24;
	}else if (llFramePeriod <= 510000 ){		// 50.0 rounded to 51 ma
	  FrameRate = FRRATE20;
	}else if (llFramePeriod <= 670000 ){		// 66.6 rounded to 67 ms
	  FrameRate = FRRATE15;
	}else if (llFramePeriod <= 840000 ){		// 83.3 rounded to 84 ms
	  FrameRate = FRRATE12;
	}else if (llFramePeriod <= 1010000 ){	    // 100.0 rounded to 101 ms
	  FrameRate = FRRATE10;
													// HR: changed from 134 to 143ms.				
	}else if (llFramePeriod <= 1430000 ){		// 133.3 rounded to 134 ms
	  FrameRate = FRRATE75;
	}else if (llFramePeriod <= 2010000 ){		// 200 rounded to 201 ms
	  FrameRate = FRRATE5;
	}else {
	  FrameRate = FRRATE375;
	}
  // rounding was necessary as the OS returns e.g. #667.111 for 15 fps

    return FrameRate;
}

#if DBG

PCHAR
FRString (
    USHORT index
)
{
	switch (index) 
	{
	    case FRRATEVGA: return "VGA";
   	    case FRRATE375: return "3.75";
   	    case FRRATE5: return "5";
   		case FRRATE75: return "7.5";
   		case FRRATE10: return "10";
   		case FRRATE12: return "12";
   		case FRRATE15: return "15";
   		case FRRATE20: return "20";
   		case FRRATE24:return "24";
   		default:
   			return "";break;
   	}

}



#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mcodec.h ===
/*++                            
Copyright (c) 1996, 1997, 1998  Philips CE-I&C

Module Name:

   mcodec.h

Abstract:

   This module converts the raw USB data to standard video data.

Original Author:

   Ronald v.d.Meer


Environment:

   Kernel mode only


Revision History:

Date       Change
14-04-1998 Initial version 

--*/

#ifndef __MCODEC_H__
#define __MCODEC_H__

#include <stdio.h>
#include "mcamdrv.h"
#include "resource.h"


/*******************************************************************************
 *
 * START DEFINES
 *
 ******************************************************************************/

/* defines for I420 space */

#define I420_NO_Y(w, h)           ((w) * (h))

#define I420_NO_Y_CIF              (CIF_X * CIF_Y)
#define I420_NO_U_CIF             ((CIF_X * CIF_Y) / 4)
#define I420_NO_V_CIF             ((CIF_X * CIF_Y) / 4)

#define I420_NO_Y_SIF              (SIF_X * SIF_Y)
#define I420_NO_U_SIF             ((SIF_X * SIF_Y) / 4)
#define I420_NO_V_SIF             ((SIF_X * SIF_Y) / 4)

#define I420_NO_Y_SSIF             (SSIF_X * SSIF_Y)
#define I420_NO_U_SSIF            ((SSIF_X * SSIF_Y) / 4)
#define I420_NO_V_SSIF            ((SSIF_X * SSIF_Y) / 4)

#define I420_NO_Y_SCIF             (SCIF_X * SCIF_Y)
#define I420_NO_U_SCIF            ((SCIF_X * SCIF_Y) / 4)
#define I420_NO_V_SCIF            ((SCIF_X * SCIF_Y) / 4)

/*******************************************************************************
 *
 * START FUNCTION DECLARATIONS
 *
 ******************************************************************************/

extern NTSTATUS
PHILIPSCAM_DecodeUsbData(PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
                         PUCHAR frameBuffer,
                         ULONG  frameLength,
                         PUCHAR rawFrameBuffer,
                         ULONG  rawFrameLength);

extern NTSTATUS
PHILIPSCAM_StartCodec(PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);

extern NTSTATUS
PHILIPSCAM_StopCodec(PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);

extern NTSTATUS
PHILIPSCAM_FrameRateChanged(PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);

#endif  // __MCODEC_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mcodec.c ===
/*++

Copyright (c) 1998  Philips B.V. CE - I&C

Module Name:

   mcodec.c

Abstract:

   this module converts the raw USB data to video data.

Original Author:

    Ronald v.d.Meer

Environment:

   Kernel mode only


Revision History:

Date        Reason
14-04-1998  Initial version
--*/       

#include "wdm.h"
#include "mcamdrv.h"
#include "mstreams.h"
#include "mdecoder.h"
#include "mcodec.h"

/*******************************************************************************
 *
 * START DEFINES
 *
 ******************************************************************************/

#define NO_BANDS_CIF       (CIF_Y / 4)  /* Number of YUV bands per frame */
#define NO_BANDS_SIF       (SIF_Y / 4)  /* Number of YUV bands per frame */
#define NO_BANDS_SSIF     (SSIF_Y / 4)  /* Number of YUV bands per frame */
#define NO_BANDS_SCIF     (SCIF_Y / 4)  /* Number of YUV bands per frame */

#define NO_LINES_IN_BAND  4

/*
 * one line contains "Width * 3/2" bytes (12 bits per pixel)
 * one YYYYCC block is 6 bytes
 * NO_YYYYCC_PER_LINE = (Width * 3/2 / 6) = (Width / 4)
 */
#define NO_YYYYCC_PER_LINE(width) (width >> 2)

#define QQCIF_DY                  ((SQCIF_Y - QQCIF_Y) / 2)
#define QQCIF_DX                  ((SQCIF_X - QQCIF_X) / 2)

#define SQSIF_DY                  ((SQCIF_Y - SQSIF_Y) / 2)
#define SQSIF_DX                  ((SQCIF_X - SQSIF_X) / 2)

#define  QSIF_DY                  (( QCIF_Y -  QSIF_Y) / 2)
#define  QSIF_DX                  (( QCIF_X -  QSIF_X) / 2)

#define  SSIF_DY                  ((  CIF_Y -  SSIF_Y) / 2)
#define  SSIF_DX                  ((  CIF_X -  SSIF_X) / 2)

#define   SIF_DY                  ((  CIF_Y -   SIF_Y) / 2)
#define   SIF_DX                  ((  CIF_X -   SIF_X) / 2)

#define  SCIF_DY                  ((  CIF_Y -  SCIF_Y) / 2)
#define  SCIF_DX                  ((  CIF_X -  SCIF_X) / 2)



/*******************************************************************************
 *
 * START STATIC VARIABLES
 *
 ******************************************************************************/

static WORD    FixGreenbarArray[CIF_Y][4];

/*******************************************************************************
 *
 * START STATIC METHODS DECLARATIONS
 *
 ******************************************************************************/


static void TranslateP420ToI420 (PBYTE pInput, PBYTE pOutput, int w, int h,
                                 DWORD camVersion);

extern void TranslatePCFxToI420 (PBYTE pInput, PBYTE pOutput, int width,
                                 int height, DWORD camVersion);

#ifdef PIX12_FIX
static void FixPix12InI420 (PBYTE p, BOOLEAN Compress, int w, int h,
                            DWORD camVersion);
#endif

static void Fix16PixGreenbarInI420 (PBYTE pStart, int w);

/*******************************************************************************
 *
 * START EXPORTED METHODS DEFINITIONS
 *
 ******************************************************************************/

/*
 * This routine is called at selection of a new stream
 */

extern NTSTATUS 
PHILIPSCAM_DecodeUsbData (PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
                          PUCHAR FrameBuffer,
                          ULONG  FrameLength,
                          PUCHAR RawFrameBuffer,
                          ULONG  RawFrameLength)
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    int      width;
    int      height;

    switch (DeviceContext->CamStatus.PictureFormat)
    {
        case FORMATCIF :
            width  = CIF_X; 
            height = CIF_Y;
            break;
        case FORMATQCIF :
            width  = QCIF_X;
            height = QCIF_Y;
            break;
        case FORMATSQCIF :
            width  = SQCIF_X;
            height = SQCIF_Y;
            break;
        case FORMATSIF :
            width  = SIF_X;
            height = SIF_Y;
            break;
        case FORMATQSIF :
            width  = QSIF_X;
            height = QSIF_Y;
            break;
        case FORMATSQSIF :
            width  = SQSIF_X;
            height = SQSIF_Y;
            break;
        case FORMATQQCIF :
            width  = QQCIF_X;
            height = QQCIF_Y;
            break;
        case FORMATSSIF :
            width  = SSIF_X;
            height = SSIF_Y;
            break;
        case FORMATSCIF :
            width  = SCIF_X;
            height = SCIF_Y;
            break;
        default        :    // VGA
            width  = VGA_X;
            height = VGA_Y;
            break;
    }


    if (DeviceContext->CamStatus.PictureCompressing == COMPRESSION0)
    {
        // convert Philips P420 format to Intel I420 format
        TranslateP420ToI420 ((PBYTE) RawFrameBuffer, (PBYTE) FrameBuffer,
                             width, height,
                             DeviceContext->CamStatus.ReleaseNumber);
    }
    else
    {
        // convert Philips PCFx format to Intel I420 format
        TranslatePCFxToI420 ((PBYTE) RawFrameBuffer, (PBYTE) FrameBuffer,
                             width, height,
                             DeviceContext->CamStatus.ReleaseNumber);
    }

    return (ntStatus);
}


//------------------------------------------------------------------------------

/*
 * This routine is called at selection of a new stream
 */

extern NTSTATUS
PHILIPSCAM_StartCodec (PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
{
    NTSTATUS ntStatus = STATUS_SUCCESS;

    InitDecoder ();

    if (DeviceContext->CamStatus.ReleaseNumber < SSI_8117_N3)
    {
        int line, pix;

        for (line = 0; line < CIF_Y; line++)
        {
            for (pix = 0; pix < 4; pix++)
            {
                FixGreenbarArray[line][pix] = (WORD) 0x8080;
            }
        }
    }

    return (ntStatus);
}


//------------------------------------------------------------------------------
  
/*
 * This routine is called after stopping a stream.
 * Used resources have to be made free.
 */
   
extern NTSTATUS
PHILIPSCAM_StopCodec(PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
{
    NTSTATUS ntStatus = STATUS_SUCCESS;

    return (ntStatus);
}

//------------------------------------------------------------------------------

/*
 * This routine is called by mprpobj.c to announce a framerate selection
 * in CIF mode, eventually resulting in change from compressed <-> uncompressed.
 */

extern NTSTATUS
PHILIPSCAM_FrameRateChanged (PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
{
    NTSTATUS ntStatus = STATUS_SUCCESS;

    return (ntStatus);
}

/*******************************************************************************
 *
 * START STATIC METHODS DEFINITIONS
 *
 ******************************************************************************/

#ifdef PIX12_FIX


static void
FixPix12InI420 (PBYTE p, BOOLEAN Compress, int width, int height,
                DWORD camVersion)
{
    int   line;
    PBYTE pStart;

    if (width == SQCIF_X)
    {
        return;
    }

    // only QCIF and CIF have to be fixed

    pStart = p;

    if (Compress)
    {
        for (line = height; line > 0; line--)
        {
            *(p + 0) = *(p + 1);
            *(p + 2) = *(p + 3);

            p += width;
        }
    }
    else
    {
        for (line = height; line > 0; line--)
        {
            *(p + 0) = *(p + 1);
            *(p + 1) = *(p + 2);

            p += width;
        }

        p = pStart + I420_NO_Y (width, height);

        width >>= 1;

        if (camVersion >= SSI_PIX12_FIX)
        {
            for (line = height; line > 0; line--)
            {
                // First all U's then all V's

                *(p + 0) = *(p + 1);

                p += width;
            }
        }
        else
        {
            for (line = height; line > 0; line--)
            {
                // First all U's then all V's

                *(p + 0) = *(p + 2);
                *(p + 1) = *(p + 2);

                p += width;
            }
        }
    }
}
#endif    // PIX12_FIX

//------------------------------------------------------------------------------

    // In the 8117 silicum versions N2 and before, the CIF decompressed
    // picture contains little green bars at the end of the picture.
    // These greenbars are 16 pixels width and 4 pixels height.
    // This bug is fixed in the 3rd silicium version of the 8117 (N3)
    // UV components of last 16 pixels in line : YYYYUU YYYYUU YYYYUU YYYYUU
    //                                           YYYYVV YYYYVV YYYYVV YYYYVV
    // This are 2 blocks
    // Greenbar bug : all V's do have the same value.
    // This value is less then 'VREF_VALUE'
    // pU points to 1st UUUU block, pU + 1 points to 1st VVVV block



static void
Fix16PixGreenbarInI420 (PBYTE pStart, int width)
{
    int     line;
    int     band;
    PWORD   pU;
    PWORD   pV;

#define VREF_VALUE        0x40
#define C_INC    (I420_NO_C_PER_LINE_CIF / sizeof (WORD))

    /* point to start of last 8 V's of first band V line */

    pU = (PWORD) ((PBYTE) pStart + I420_NO_Y_CIF + I420_NO_C_PER_LINE_CIF - 8);
    pV = (PWORD) ((PBYTE) pStart + I420_NO_Y_CIF + I420_NO_U_CIF + I420_NO_C_PER_LINE_CIF - 8);


    for (band = 0; band < NO_BANDS_CIF; band++)
    {
        line = band * 4;

        /*
         * band : UUUU UUUU ...
         *        UUUU UUUU ...
         *        VVVV VVVV ... --> check the last 8 V's for error condition
         *        VVVV VVVV ...
         *
         * V1V2 V3V4 V5V6 V7V8 (last V's in first BLOCK_BAND V line)
         * all V's have to be the same value. This value is < VREF_VALUE
         * If so, a green bar will be visible --> correct with last correct
         * pixel information
         */

        if ( (*(pV + 0) == *(pV + 1)) &&
             (*(pV + 0) == *(pV + 2)) &&
             (*(pV + 0) == *(pV + 3)) &&
            ((*(pV + 0) & 0x00FF) == (((*pV + 0) & 0xFF00) >> 8)) &&
            ((*(pV + 0) & 0x00FF) <  VREF_VALUE))
        {
            *(pU + (C_INC * 0) + 0) = FixGreenbarArray[line + 0][0];
            *(pU + (C_INC * 0) + 1) = FixGreenbarArray[line + 0][1];
            *(pU + (C_INC * 0) + 2) = FixGreenbarArray[line + 0][2];
            *(pU + (C_INC * 0) + 3) = FixGreenbarArray[line + 0][3];

            *(pV + (C_INC * 0) + 0) = FixGreenbarArray[line + 1][0];
            *(pV + (C_INC * 0) + 1) = FixGreenbarArray[line + 1][1];
            *(pV + (C_INC * 0) + 2) = FixGreenbarArray[line + 1][2];
            *(pV + (C_INC * 0) + 3) = FixGreenbarArray[line + 1][3];

            *(pU + (C_INC * 1) + 0) = FixGreenbarArray[line + 2][0];
            *(pU + (C_INC * 1) + 1) = FixGreenbarArray[line + 2][1];
            *(pU + (C_INC * 1) + 2) = FixGreenbarArray[line + 2][2];
            *(pU + (C_INC * 1) + 3) = FixGreenbarArray[line + 2][3];

            *(pV + (C_INC * 1) + 0) = FixGreenbarArray[line + 3][0];
            *(pV + (C_INC * 1) + 1) = FixGreenbarArray[line + 3][1];
            *(pV + (C_INC * 1) + 2) = FixGreenbarArray[line + 3][2];
            *(pV + (C_INC * 1) + 3) = FixGreenbarArray[line + 3][3];
        }
        else
        {
            FixGreenbarArray[line + 0][0] = *(pU + (C_INC * 0) + 0);
            FixGreenbarArray[line + 0][1] = *(pU + (C_INC * 0) + 1);
            FixGreenbarArray[line + 0][2] = *(pU + (C_INC * 0) + 2);
            FixGreenbarArray[line + 0][3] = *(pU + (C_INC * 0) + 3);

            FixGreenbarArray[line + 1][0] = *(pV + (C_INC * 0) + 0);
            FixGreenbarArray[line + 1][1] = *(pV + (C_INC * 0) + 1);
            FixGreenbarArray[line + 1][2] = *(pV + (C_INC * 0) + 2);
            FixGreenbarArray[line + 1][3] = *(pV + (C_INC * 0) + 3);

            FixGreenbarArray[line + 2][0] = *(pU + (C_INC * 1) + 0);
            FixGreenbarArray[line + 2][1] = *(pU + (C_INC * 1) + 1);
            FixGreenbarArray[line + 2][2] = *(pU + (C_INC * 1) + 2);
            FixGreenbarArray[line + 2][3] = *(pU + (C_INC * 1) + 3);

            FixGreenbarArray[line + 3][0] = *(pV + (C_INC * 1) + 0);
            FixGreenbarArray[line + 3][1] = *(pV + (C_INC * 1) + 1);
            FixGreenbarArray[line + 3][2] = *(pV + (C_INC * 1) + 2);
            FixGreenbarArray[line + 3][3] = *(pV + (C_INC * 1) + 3);
        }

        pU += (2 * C_INC);
        pV += (2 * C_INC);
    }
}
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------

/*
 *
 */

static void
TranslateP420ToI420 (PBYTE pInput, PBYTE pOutput, int width, int height,
                     DWORD camVersion)
{
    int    line;
    int    byte;
    int    dxSrc;

    PDWORD pdwSrc;
    PDWORD pdwY;
    PWORD  pwU;
    PWORD  pwV;

    PBYTE  pbSrc;
    PBYTE  pbY;


    if (camVersion == SSI_YGAIN_MUL2)
    {
        // SSI version 4 --> Ygain has to be doubled

        pbSrc = (PBYTE) pInput;
        pbY   = (PBYTE) pOutput;
        pwU   = (PWORD) ((PBYTE) pbY +  (width * height));
        pwV   = (PWORD) ((PBYTE) pwU  + ((width * height) >> 2));

        switch (width)
        {
        case SQSIF_X :
            pbSrc += ((((SQSIF_DY * SQCIF_X) + SQSIF_DX) * 3) / 2);
            dxSrc = ((2 * SQSIF_DX) * 3) / 2;
            break;
        case QSIF_X  :
            pbSrc += ((((QSIF_DY * QCIF_X) + QSIF_DX) * 3) / 2);
            dxSrc = ((2 * QSIF_DX) * 3) / 2;
            break;
        case SIF_X   :
            pbSrc += ((((SIF_DY * CIF_X) + SIF_DX) * 3) / 2);
            dxSrc = ((2 * SIF_DX) * 3) / 2;
            break;
        case QQCIF_X   :
            pbSrc += ((((QQCIF_DY * SQCIF_X) + QQCIF_DX) * 3) / 2);
            dxSrc = ((2 * QQCIF_DX) * 3) / 2;
            break;
        case SSIF_X :       // SSIF || SCIF
			if (height == SSIF_Y) {
              pbSrc += ((((SSIF_DY * CIF_X) + SSIF_DX) * 3) / 2);
              dxSrc = ((2 * SSIF_DX) * 3) / 2;
			}else{
              pbSrc += ((((SCIF_DY * CIF_X) + SCIF_DX) * 3) / 2);
              dxSrc = ((2 * SCIF_DX) * 3) / 2;
            }
            break;
        default    :    // xxCIF
            dxSrc = 0;
            break;
        }

        for (line = height >> 1; line > 0; line--)
        {
            for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
            {
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;

                *pwU++ = (WORD) (* (PWORD) pbSrc);
                pbSrc += 2;
            }

            pbSrc += dxSrc;

            for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
            {
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;
                *pbY++ = (*pbSrc < 0x7F) ? (*pbSrc << 1) : 0xFF;
                pbSrc++;

                *pwV++ = (WORD) (* (PWORD) pbSrc);
                pbSrc += 2;
            }

            pbSrc += dxSrc;
        }
    }
    else    // NO_YGAIN_MULTIPLY
    {
        pdwY  = (PDWORD) pOutput;
        pwU   = (PWORD) ((PBYTE) pdwY +  (width * height));
        pwV   = (PWORD) ((PBYTE) pwU  + ((width * height) >> 2));

        if (width == QQCIF_X)
        {
            pbSrc = (PBYTE) (pInput + ((((QQCIF_DY * SQCIF_X) + QQCIF_DX) * 3) / 2));
            dxSrc = ((2 * QQCIF_DX) * 3) / 2;

            for (line = height >> 1; line > 0; line--)
            {
                for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
                {
                    *pdwY++ = *((PDWORD) pbSrc)++;
                    *pwU++ = (WORD) (* (PWORD) pbSrc);
                    pbSrc += 2;
                }

                pbSrc += dxSrc;

                for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
                {
                    *pdwY++ = *((PDWORD) pbSrc)++;
                    *pwV++ = (WORD) (* (PWORD) pbSrc);
                    pbSrc += 2;
                }

                pbSrc += dxSrc;
            }
        }
        else
        {
            pdwSrc = (PDWORD) pInput;

            switch (width)
            {
            case SQSIF_X :
                pdwSrc += (((((SQSIF_DY * SQCIF_X) + SQSIF_DX) * 3) / 2) / sizeof (DWORD));
                dxSrc = (((2 * SQSIF_DX) * 3) / 2) / sizeof (DWORD);
                break;
            case QSIF_X  :
                pdwSrc += (((((QSIF_DY * QCIF_X) + QSIF_DX) * 3) / 2) / sizeof (DWORD));
                dxSrc = (((2 * QSIF_DX) * 3) / 2) / sizeof (DWORD);
                break;
            case SIF_X   :
                pdwSrc += (((((SIF_DY * CIF_X) + SIF_DX) * 3) / 2) / sizeof (DWORD));
                dxSrc = (((2 * SIF_DX) * 3) / 2) / sizeof (DWORD);
                break;
            case SSIF_X :    // SSIF || SCIF
			    if (height == SSIF_Y) {
                  pdwSrc += (((((SSIF_DY * CIF_X) + SSIF_DX) * 3) / 2) / sizeof (DWORD));
                  dxSrc = (((2 * SSIF_DX) * 3) / 2) / sizeof (DWORD);
				}else{
                  pdwSrc += (((((SCIF_DY * CIF_X) + SCIF_DX) * 3) / 2) / sizeof (DWORD));
                  dxSrc = (((2 * SCIF_DX) * 3) / 2) / sizeof (DWORD);
				}
                break;
             default    :    // xxCIF
                dxSrc = 0;
                break;
            }

            for (line = height >> 1; line > 0; line--)
            {
                for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
                {
                    *pdwY++ = *pdwSrc++;
                    *pwU++ = (WORD) (* (PWORD) pdwSrc);
                    pdwSrc = (PDWORD) ((PBYTE) pdwSrc + 2);
                }

                pdwSrc += dxSrc;

                for (byte = NO_YYYYCC_PER_LINE(width); byte > 0; byte--)
                {
                    *pdwY++ = *pdwSrc++;
                    *pwV++ = (WORD) (* (PWORD) pdwSrc);
                    pdwSrc = (PDWORD) ((PBYTE) pdwSrc + 2);
                }

                pdwSrc += dxSrc;
            }
        }
    }

#ifdef PIX12_FIX
    if (width == CIF_X || width == QCIF_X || width == SQCIF_X)
    {
        FixPix12InI420 (pOutput, FALSE, width, height, camVersion);
    }
#endif
}



/*
 ===========================================================================
 */

static void
TranslatePCFxToI420 (PBYTE pInput, PBYTE pOutput, int width, int height,
                     DWORD camVersion)
{
    int     band;
    int     line;
    int     byte;
    PBYTE   pSrc;
    PDWORD  pYDst;
    PDWORD  pCDst;

    PDWORD  pSIF_Y;
    PDWORD  pSIF_C;
    /*
     * For formats != 352x288, cropping has to be done.
     * The formats 320x240 and 240x180 can be derived from the 352x288 format.
     * The compressed data consists of 72 bands. A band contains the data for
     * 4 uncompressed lines. For the not 352x240 formats, the first 6 bands or
     * first 13 bands (320x240 or 240x180) of compressed data can be skipped. 
     * This will be the cropping in the Y-direction.
     * One band is 528 bytes big for 4x compressed mode and 704 bytes big for
     * 3x compressed mode. It's dependent of the camera version which
     * compression mode will be selected.
     * For the not 352x288 formats, the uncompressed data is temporary stored
     * in the first not used bands.
     * One uncompressed band consists of 4x352=1408 bytes of Y followed by
     * 2x176=352 bytes of U and followed by 2x176 bytes of V.
     * This is a total of 2112 uncompressed bytes. So there's enough place
     * for this temporary storage (6x528-2112=1056 bytes left worst case)
     * This temporary uncompressed data is then cropped in the X direction.
     * The result is written to the buffer pointed by 'pOutput'
     */

    if (width == CIF_X)
    {
        pSrc  = pInput;
        pYDst = (PDWORD) pOutput;
        pCDst = (PDWORD) pOutput + (I420_NO_Y_CIF / sizeof (DWORD));
        band = NO_BANDS_CIF;
    }
    else
    {
        pSrc   = pInput;
        pYDst  = (PDWORD) pInput;
        pCDst  = (PDWORD) pInput + (I420_NO_Y_PER_BAND_CIF / sizeof (DWORD));
        pSIF_Y = (PDWORD) pOutput;

        if (width == SIF_X)
        {
            pSIF_C = (PDWORD) pOutput + (I420_NO_Y_SIF / sizeof (DWORD));

            if (camVersion >= SSI_CIF3)
            {
                pSrc += ((SIF_DY / NO_LINES_IN_BAND) * BytesPerBandCIF3);
            }
            else
            {
                pSrc += ((SIF_DY / NO_LINES_IN_BAND) * BytesPerBandCIF4);
            }

            band = NO_BANDS_SIF;
        }
        else    // width == SSIF_X || width == SCIF
        {
			if (height == SSIF_Y) {
              pSIF_C = (PDWORD) pOutput + (I420_NO_Y_SSIF / sizeof (DWORD));

            // 13,5 bands to skip in start en 13,5 bands to skip at end
            // To make it easier : 13 bands to skip in start and 14 bytes at end

              if (camVersion >= SSI_CIF3)
			  {
                pSrc += (((SSIF_DY - 2) / NO_LINES_IN_BAND) * BytesPerBandCIF3);
			  }
              else
			  {
                pSrc += (((SSIF_DY - 2) / NO_LINES_IN_BAND) * BytesPerBandCIF4);
			  }

              band = NO_BANDS_SSIF;
            }else{
              pSIF_C = (PDWORD) pOutput + (I420_NO_Y_SCIF / sizeof (DWORD));

              if (camVersion >= SSI_CIF3)
			  {
                pSrc += (((SCIF_DY - 2) / NO_LINES_IN_BAND) * BytesPerBandCIF3);
			  }
              else
			  {
                pSrc += (((SCIF_DY - 2) / NO_LINES_IN_BAND) * BytesPerBandCIF4);
			  }

              band = NO_BANDS_SCIF;
            }
        }
    }

    for (; band > 0; band--)
    {
        DcDecompressBandToI420 (pSrc, (PBYTE) pYDst, camVersion,
                                Y_BLOCK_BAND, (BOOLEAN) (width != CIF_X));
        
        if (width == CIF_X)
        {
            pYDst += (I420_NO_Y_PER_BAND_CIF / sizeof (DWORD));
        }
        else
        {
            if (width == SIF_X)
            {
                pYDst += (SIF_DX / sizeof (DWORD));

                for (line = NO_LINES_IN_BAND; line > 0; line--)
                {
                    for (byte = (SIF_X / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_Y++ = *pYDst++;
                    }

                    pYDst += (( 2 * SIF_DX) / sizeof (DWORD));
                }

                pYDst = (PDWORD) pInput;
            }
            else    // width == SSIF_X || width == SCIF_X
            {
			  if ( height == SSIF_Y ){
                pYDst += (SSIF_DX / sizeof (DWORD));

                for (line = NO_LINES_IN_BAND ; line > 0; line--)
                {
                    for (byte = (SSIF_X / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_Y++ = *pYDst++;
                    }

                    pYDst += (( 2 * SSIF_DX) / sizeof (DWORD));
                }

                pYDst = (PDWORD) pInput;
              }else{
                pYDst += (SCIF_DX / sizeof (DWORD));

                for (line = NO_LINES_IN_BAND ; line > 0; line--)
                {
                    for (byte = (SCIF_X / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_Y++ = *pYDst++;
                    }

                    pYDst += (( 2 * SCIF_DX) / sizeof (DWORD));
                }

                pYDst = (PDWORD) pInput;
              } 
            }
        }

        DcDecompressBandToI420 (pSrc, (PBYTE) pCDst, camVersion,
                                UV_BLOCK_BAND, (BOOLEAN) (width != CIF_X));

        if (width == CIF_X)
        {
            pCDst += (I420_NO_U_PER_BAND_CIF / sizeof (DWORD));
        }
        else
        {
            if (width == SIF_X)
            {
                pCDst += ((SIF_DX / 2) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SIF_DX / 2)) / sizeof (DWORD));
                }

                pSIF_C += ((I420_NO_U_SIF - I420_NO_U_PER_BAND_SIF) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SIF_DX / 2)) / sizeof (DWORD));
                }

                pCDst   = (PDWORD) pInput + (I420_NO_Y_PER_BAND_CIF / sizeof (DWORD));
                pSIF_C -= (I420_NO_U_SIF / sizeof (DWORD));
            }
            else    // width == SSIF_X || width == SCIF_X
            {
			  if  (height == SSIF_Y){
                pCDst += ((SSIF_DX / 2) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SSIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SSIF_DX / 2)) / sizeof (DWORD));
                }

                pSIF_C += ((I420_NO_U_SSIF - I420_NO_U_PER_BAND_SSIF) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SSIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SSIF_DX / 2)) / sizeof (DWORD));
                }

                pCDst   = (PDWORD) pInput + (I420_NO_Y_PER_BAND_CIF / sizeof (DWORD));
                pSIF_C -= (I420_NO_U_SSIF / sizeof (DWORD));
              }else{
                pCDst += ((SCIF_DX / 2) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SCIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SCIF_DX / 2)) / sizeof (DWORD));
                }

                pSIF_C += ((I420_NO_U_SCIF - I420_NO_U_PER_BAND_SCIF) / sizeof (DWORD));

                for (line = (NO_LINES_IN_BAND / 2); line > 0; line--)
                {
                    for (byte = ((SCIF_X / 2) / sizeof (DWORD)); byte > 0; byte--)
                    {
                        *pSIF_C++ = *pCDst++;
                    }

                    pCDst += ((2 * (SCIF_DX / 2)) / sizeof (DWORD));
                }

                pCDst   = (PDWORD) pInput + (I420_NO_Y_PER_BAND_CIF / sizeof (DWORD));
                pSIF_C -= (I420_NO_U_SCIF / sizeof (DWORD));

			  }	  
            }
        }

        pSrc += (camVersion >= SSI_CIF3) ? BytesPerBandCIF3 : BytesPerBandCIF4;
    }

    if (width == CIF_X)
    {
        if (camVersion < SSI_8117_N3)
        {
            Fix16PixGreenbarInI420 (pOutput, width);
        }
#ifdef PIX12_FIX
        FixPix12InI420 (pOutput, TRUE, width, height, camVersion);
#endif
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mdecoder.c ===
/*++

Copyright (c) 1998  Philips  CE - I&C

Module Name:

   mdecoder.c

Abstract:

   this module converts the raw USB data to video data.

Original Author:

    Ronald v.d.Meer

Environment:

   Kernel mode only


Revision History:

Date        Reason
14-04-1998  Initial version
--*/       

#include "wdm.h"
#include "mcamdrv.h"
#include "mstreams.h"
#include "mcodec.h"
#include "mdecoder.h"


/*******************************************************************************
 *
 * START LOCAL DEFINES
 *
 ******************************************************************************/

#define CLIP(x)           (((unsigned) (x) > 255) ? (((x) < 0) ? 0 : 255) : (x))

/*
 * The following code clips x between 0 and 255, it is crafted to let the
 * compiler generate good code:
 */
#define CLIP2(i1, i2)    \
{\
    long x = b[i2] >> 15;\
    *(pDst + i1) = (BYTE) ((DWORD) x > 255) ? ((x < 0) ? 0 : 255) : (BYTE) x;\
}

/*
 * The following code clips x between 0 and 255, it is crafted to let the
 * compiler generate good code:
 * YGain is doubled (used for camera's with SII version 4)
 */
#define CLIP2YGAIN(i1, i2)    \
{\
    long x = (b[i2] << 1) >> 15;\
    *(pDst + i1) = (BYTE) ((DWORD) x > 255) ? ((x < 0) ? 0 : 255) : (BYTE) x;\
}

/* these values are used in table[]: */
#define SHORT_SYMBOL    0
#define LONG_SYMBOL     1
#define END_OF_BLOCK    2
#define UNUSED          0

/*******************************************************************************
 *
 * START TYPEDEFS
 *
 ******************************************************************************/

typedef struct
{
    BYTE   bitc;
    BYTE   qsteplog;
} QB;

typedef struct
{
    BYTE   level;
    BYTE   length;
    BYTE   run;
    BYTE   index;
} TABLE_ELEMENT;

/*******************************************************************************
 *
 * START STATIC VARIABLES
 *
 ******************************************************************************/

/*
 * Order of arrays emperically optimized for cache behaviour:
 */
#define STRAT    8
#define DRAC     4
#define DC       512

static short   rs[STRAT][DRAC][8][16];    /* if long, then table[].index wouldn't fit in a byte */
static QB      qb[STRAT][DRAC][16];       /* qsteplog/bitc table */
static long    multiply[DC][6];
static long    table_val[9][DC];
static DWORD   valuesDC[DC];
static DWORD   value0coef[DC];

/*
 * This table is used by the variable length decoder part of the decompressor.
 * The first 6 bits of the next symbol(s) are used as index into this table.
 *
 * table[].level  : classifies the kind of symbol encountered.
 *
 * The following entries are only used in case of a short (<= 6 bits) symbol.
 *
 * table[].length : the number of bits of the symbol.
 * table[].run    : the number of 0 coeficients until the next non-zeo
 *                  coeficient, + 1.
 * table[].index  : used to index the rs[] table, it is optimized for the
 *                  assembly version, not the C version.
 */

static TABLE_ELEMENT table[64] = {
    /*       level:        length: run:    index: */
    /*  0 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /*  1 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /*  2 */ SHORT_SYMBOL, 4,      1,      1 * 16 * 2,
    /*  3 */ SHORT_SYMBOL, 6,      1,      3 * 16 * 2,
    /*  4 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /*  5 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /*  6 */ SHORT_SYMBOL, 5,      1,      2 * 16 * 2,
    /*  7 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /*  8 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /*  9 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 10 */ SHORT_SYMBOL, 4,      1,      5 * 16 * 2,
    /* 11 */ SHORT_SYMBOL, 5,      2,      0 * 16 * 2,
    /* 12 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 13 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 14 */ SHORT_SYMBOL, 5,      3,      0 * 16 * 2,
    /* 15 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 16 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 17 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 18 */ SHORT_SYMBOL, 4,      1,      1 * 16 * 2,
    /* 19 */ SHORT_SYMBOL, 6,      2,      1 * 16 * 2,
    /* 20 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 21 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 22 */ SHORT_SYMBOL, 5,      1,      6 * 16 * 2,
    /* 23 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 24 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 25 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 26 */ SHORT_SYMBOL, 4,      1,      5 * 16 * 2,
    /* 27 */ SHORT_SYMBOL, 5,      2,      4 * 16 * 2,
    /* 28 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 29 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 30 */ SHORT_SYMBOL, 5,      3,      4 * 16 * 2,
    /* 31 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 32 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 33 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 34 */ SHORT_SYMBOL, 4,      1,      1 * 16 * 2,
    /* 35 */ SHORT_SYMBOL, 6,      1,      7 * 16 * 2,
    /* 36 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 37 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 38 */ SHORT_SYMBOL, 5,      1,      2 * 16 * 2,
    /* 39 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 40 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 41 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 42 */ SHORT_SYMBOL, 4,      1,      5 * 16 * 2,
    /* 43 */ SHORT_SYMBOL, 5,      2,      0 * 16 * 2,
    /* 44 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 45 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 46 */ SHORT_SYMBOL, 5,      3,      0 * 16 * 2,
    /* 47 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 48 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 49 */ SHORT_SYMBOL, 3,      1,      0 * 16 * 2,
    /* 50 */ SHORT_SYMBOL, 4,      1,      1 * 16 * 2,
    /* 51 */ SHORT_SYMBOL, 6,      2,      5 * 16 * 2,
    /* 52 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 53 */ SHORT_SYMBOL, 3,      1,      4 * 16 * 2,
    /* 54 */ SHORT_SYMBOL, 5,      1,      6 * 16 * 2,
    /* 55 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED,
    /* 56 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 57 */ SHORT_SYMBOL, 2 + 1,  1,      0 * 16 * 2,
    /* 58 */ SHORT_SYMBOL, 3 + 1,  1,      5 * 16 * 2,
    /* 59 */ SHORT_SYMBOL, 4 + 1,  2,      4 * 16 * 2,
    /* 60 */ END_OF_BLOCK, UNUSED, UNUSED, UNUSED,
    /* 61 */ SHORT_SYMBOL, 2 + 1,  1,      4 * 16 * 2,
    /* 62 */ SHORT_SYMBOL, 4 + 1,  3,      4 * 16 * 2,
    /* 63 */ LONG_SYMBOL,  UNUSED, UNUSED, UNUSED
};

/*******************************************************************************
 *
 * START STATIC VARIABLES
 *
 ******************************************************************************/

/* init the bit cost array for the different strategies and dynamic ranges */

static int bitzz[512] =
{
 // strategy 0
 9,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  
 9,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  
 9,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  
 9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  
 
 // strategy 1
 9,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  
 9,  4,  4,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  
 9,  6,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5,  5,  4,  4,  4,  
 9,  8,  8,  8,  8,  8,  7,  7,  7,  7,  7,  7,  7,  6,  6,  6,  
 
 // strategy 2
 9,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  
 9,  3,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  
 9,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  4,  4,  4,  
 9,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  6,  6,  6,  
 
 // strategy 3
 9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  
 9,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  
 9,  5,  5,  5,  5,  5,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,  
 9,  7,  7,  7,  7,  7,  6,  6,  6,  6,  6,  6,  6,  5,  5,  5,  
 
 // strategy 4
 9,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  
 9,  5,  5,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  
 9,  7,  7,  6,  6,  6,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5,  
 
 // strategy 5
 9,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  4,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  
 9,  6,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5,  5,  4,  4,  4,  
 
 // strategy 6
 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  4,  4,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  
 9,  6,  6,  5,  5,  5,  5,  5,  5,  5,  4,  4,  4,  4,  4,  4,  
 
 // strategy 7
 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  
 9,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  2,  1,  1,  1,  
 9,  5,  5,  5,  5,  5,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3
};

/*
 * quantizatioon array for the different strategies and dynamic ranges
 */

static int qzz[512] =
{
 // strategy 0
 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  
 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  
 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  
 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  

 // strategy 1
 1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  
 1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  
 1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  
 1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  

 // strategy 2
 1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  
 1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  
 1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  
 1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  

 // strategy 3
 1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  
 1,  4,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16,  
 1,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  
 1,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  

 // strategy 4
 1,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  
 1,  8,  8,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 
 1,  2,  2,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  
 1,  2,  2,  4,  4,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  

 // strategy 5
 1,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  
 1,  8,  8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
 1,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 
 1,  4,  4,  4,  4,  4,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 

 // strategy 6
 1,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 4, 
 1,  8,  8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
 1,  4,  4,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 
 1,  4,  4,  8,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 

 // strategy 7
 1,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
 1,  8,  8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
 1,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 
 1,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32 
};


/*******************************************************************************
 *
 * START EXPORTED METHODS DEFINITIONS
 *
 ******************************************************************************/

/*
 *
 */

extern void
InitDecoder ()
{
    int          i;
    int          j;
	int          dc;
    int          strat;
	int          drac;
    DWORD        x;
    int          val;
    int          *p_zz;


    for (dc = 0; dc < 512; dc++)
    {
        x = CLIP ((dc * 31684L + 32768L / 2L) >> 15);
        x |= x << 8;
        x |= x << 16;
        value0coef[dc] = x;

        i = dc - 256;
        valuesDC[dc]    = dc * 31684L;
        multiply[dc][0] = i * 31684L;
        multiply[dc][1] = i * 42186L;
        multiply[dc][2] = i * 17444L;
        multiply[dc][3] = i * 56169L;
        multiply[dc][4] = i * 23226L;
        multiply[dc][5] = i * 9604L;
    }

    /* Warning: it is assumed that the qstep values are of the form 2^n, n e [0,7] */

    p_zz = &qzz[0];

    for (strat = 0; strat < 8; strat++)
    {
        for (drac = 0; drac <= 3; drac++)
        {
            for (i = 0; i <= 15; i++)
            {
                val = *p_zz++;
                
                for (j = 0; j < 8; j++)
                {
                    if (val & (1 << j))
                    {
                        qb[strat][drac][i].qsteplog = (BYTE) j;
                        break;
                    }
                }
                
                rs[strat][drac][0][i] = (short) ( val * 1 + 256) * 3;
                rs[strat][drac][1][i] = (short) ( val * 2 + 256) * 3;
                rs[strat][drac][2][i] = (short) ( val * 3 + 256) * 3;
                rs[strat][drac][3][i] = (short) ( val * 4 + 256) * 3;
                rs[strat][drac][4][i] = (short) (-val * 1 + 256) * 3;
                rs[strat][drac][5][i] = (short) (-val * 2 + 256) * 3;
                rs[strat][drac][6][i] = (short) (-val * 3 + 256) * 3;
                rs[strat][drac][7][i] = (short) (-val * 4 + 256) * 3;
            }
        }
    }

    p_zz = &bitzz[0];

    for (strat = 0; strat < 8; strat++)
    {
        for (drac = 0; drac <= 3; drac++)
        {
            for (i = 0; i <= 15; i++)
            {
                qb[strat][drac][i].bitc = (BYTE) *p_zz++;
            }
        }
    }
  
    for (dc = 0; dc < 512; dc++)
    {
        table_val[0][dc] = 0;
    }
    
    for (i = 1; i <= 8; i++)
    {
        j = 0;
        
        while ((j * (1 << i)) < 512)
        {
            for (dc = j * (1 << i); dc < 512; dc++)
            {
                if ((j % 2) == 0)
                {
                    table_val[i][dc] =   dc & ((1 << i) - 1);
                }
                else
                {
                    table_val[i][dc] = -(dc & ((1 << i) - 1));
                }
            }
            j++;
        }
    }
}


/*
 *
 */



//------------------------------------------------------------------------------

/*
 *
 */

extern void
DcDecompressBandToI420 (PBYTE pSrc, PBYTE pDst, DWORD camVersion,
                        BOOLEAN YBlockBand, BOOLEAN Cropping)
{
    long            b[16];
    long            k;
    long            level;
    DWORD           code_word;
    DWORD           strat;
    QB              *p_qb;
    long            result;
    BOOLEAN         Uval;
    PBYTE           pDstEnd;
    long            cm1, cm2, cm3;
    int             ix;
    unsigned short  *p_rs;
    PBYTE           pInputLimit;
    long            *pMultiply = (long *) multiply;     /* Help compiler avoid a divide. */

    static BYTE     bitIndex;
    static PBYTE    bytePtr;

//    BYTE            DummyRead; /* Force data cache line loads before repeated writes. */

    /*
     * The way input bits are read via *bit_pt is dependant on the endianess
     * of the machine.
     */

    if (YBlockBand)
    {
        bytePtr  = pSrc + 1;   // 1st bit and band_nr (7 bits) are not used
        bitIndex = 3;
        strat    = (* (PDWORD) (bytePtr)) & 0x7;
        pDstEnd  = pDst + CIF_X;
    }
    else    // UV BlockBand
    {
        // derive the strategy used for the UV data
        // from the strategy used for the Y data

        strat = (* (PDWORD) ((PBYTE) pSrc + 1)) & 0x7;

        if (strat != 0)
        {
            if (strat >= 6)
            {
                strat = 7;
            }
            else if (strat == 5)
            {
                strat = 6;
            }
            else
            {
                strat += 2;
            }
        }

        pDstEnd = pDst + (CIF_X / 2);
    }

    Uval = TRUE;

    pInputLimit = pSrc + ((camVersion >= SSI_CIF3) ? BytesPerBandCIF3
                                                   : BytesPerBandCIF4);

    do
    {
        if (bytePtr >= pInputLimit)
        {
            return;
        }

        bytePtr += (bitIndex / 8);
        bitIndex = (bitIndex % 8);

        code_word = (* (PDWORD) bytePtr) >> bitIndex;
        bitIndex += 11;

        result = (code_word >> 2) & 0x1FF;   // dc value

        if ((code_word & 0x00001800) == 0x00)  // the same as statement below
//        if (((code_word >> 11) & 0x3) == 0x0)
        {
            /*
             * EOB detected, 4x4 block contains only DC
             * Executed 0.27 times per IDCT block.
             */
             
            DWORD yuvVal = value0coef[result];
//          DummyRead += pDst[0];
//          DummyRead += pDst[BLOCK_BAND_WIDTH];

            if (YBlockBand)
            {
                if (camVersion == SSI_YGAIN_MUL2)
                {
                    yuvVal <<= 1;
                }

                * (PDWORD) (pDst + (0 * CIF_X) + 0) = yuvVal;
                * (PDWORD) (pDst + (1 * CIF_X) + 0) = yuvVal;
//                DummyRead += pDst[2 * CIF_X];
                * (PDWORD) (pDst + (2 * CIF_X) + 0) = yuvVal;
//                DummyRead += pDst[3 * CIF_X];
                * (PDWORD) (pDst + (3 * CIF_X) + 0) = yuvVal;
                pDst += 4;
            }
            else    // UV_BLOCK_BAND
            {
                if (Cropping)
                {
                    if (Uval)
                    {
                        * (PDWORD) (pDst + 0              + (0 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + 0              + (0 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        * (PDWORD) (pDst + 0              + (1 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + 0              + (1 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        Uval = FALSE;
                    }
                    else  // Vval
                    {
                        * (PDWORD) (pDst + I420_NO_U_PER_BAND_CIF + (0 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_PER_BAND_CIF + (0 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_PER_BAND_CIF + (1 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_PER_BAND_CIF + (1 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        Uval = TRUE;
                        pDst += 8;
                    }
                }
                else    // CIF OUT
                {
                    if (Uval)
                    {
                        * (PDWORD) (pDst + 0              + (0 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + 0              + (0 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        * (PDWORD) (pDst + 0              + (1 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + 0              + (1 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        Uval = FALSE;
                    }
                    else  // Vval
                    {
                        * (PDWORD) (pDst + I420_NO_U_CIF + (0 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_CIF + (0 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_CIF + (1 * I420_NO_C_PER_LINE_CIF) + 0) = yuvVal;
                        * (PDWORD) (pDst + I420_NO_U_CIF + (1 * I420_NO_C_PER_LINE_CIF) + 4) = yuvVal;
                        Uval = TRUE;
                        pDst += 8;
                    }
                }
            }
            bitIndex += 2;
            continue;
        }

        k = 0;

        if (camVersion < SSI_8117_N3)
        {
            // for old 8117 versions (N2 and before) sometimes a decompressed
            // line contains coloured artifacts.  This occurs when the DC
            // value equals 256. The code below fixes this.

            if (result == 256)
            {
                k = 0 - 1;
            }
        }
        
        p_qb = qb[strat][code_word & 0x3];
        p_rs = (unsigned short *) &rs[strat][code_word & 0x3];
        result = valuesDC[result];

        b[ 0] = result; b[ 1] = result; b[ 2] = result; b[ 3] = result;
        b[ 4] = result; b[ 5] = result; b[ 6] = result; b[ 7] = result;
        b[ 8] = result; b[ 9] = result; b[10] = result; b[11] = result;
        b[12] = result; b[13] = result; b[14] = result; b[15] = result;

        while (1)
        {
            /*
             * On average 4.32 iterations per IDCT block.
             */
             
            if (bytePtr >= pInputLimit)
            {
                return;
            }

            bytePtr += (bitIndex / 8);
            bitIndex = (bitIndex % 8);

            code_word = (* (PDWORD) bytePtr) >> bitIndex;
            ix = code_word & 0x3F;
            level = table[ix].level;
            
            if (level >= LONG_SYMBOL) /* level == LONG_SYMBOL or END_OF_BLOCK */
            {
                if (level > LONG_SYMBOL) /* level == END_OF_BLOCK */
                {
                    /*
                     * Executed 0.73 times per IDCT block.
                     */
                    bitIndex += 2;
                    break;
                }
                
                /*
                 * Executed 0.81 times per IDCT block.
                 */
                k += ((code_word >> 3) & 15) + 1;
                k &= 0xF;
                level = p_qb[k].bitc;
                bitIndex += ((BYTE) level + 8);
                level = table_val[level][(code_word >> 7) & 511];
                result = level << p_qb[k].qsteplog;
                result += 256;
                result *= (3 * 2);
            }
            else /* level == SHORT_SYMBOL */
            {
                /*
                 * Executed 2.79 times per IDCT block.
                 */

                k += table[ix].run;
                k &= 0xF;
                bitIndex += table[ix].length;            // max 6
                result = (p_rs[table[ix].index / 2 + k]) * 2;
            }

            switch (k)
            {
            case 0:
                b[15] += 1; /* Fill slot 0 of jump table */
                break;
            case 1:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm1;
                b[ 1] += cm2;
                b[ 2] -= cm2;
                b[ 3] -= cm1;
                b[ 4] += cm1;
                b[ 5] += cm2;
                b[ 6] -= cm2;
                b[ 7] -= cm1;
                b[ 8] += cm1;
                b[ 9] += cm2;
                b[10] -= cm2;
                b[11] -= cm1;
                b[12] += cm1;
                b[13] += cm2;
                b[14] -= cm2;
                b[15] -= cm1;
                break;
            case 5:
                cm1 = pMultiply[result + 0];

                b[ 0] += cm1;
                b[ 1] -= cm1;
                b[ 2] -= cm1;
                b[ 3] += cm1;
                b[ 4] += cm1;
                b[ 5] -= cm1;
                b[ 6] -= cm1;
                b[ 7] += cm1;
                b[ 8] += cm1;
                b[ 9] -= cm1;
                b[10] -= cm1;
                b[11] += cm1;
                b[12] += cm1;
                b[13] -= cm1;
                b[14] -= cm1;
                b[15] += cm1;
                break;
            case 6:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm2;
                b[ 1] -= cm1;
                b[ 2] += cm1;
                b[ 3] -= cm2;
                b[ 4] += cm2;
                b[ 5] -= cm1;
                b[ 6] += cm1;
                b[ 7] -= cm2;
                b[ 8] += cm2;
                b[ 9] -= cm1;
                b[10] += cm1;
                b[11] -= cm2;
                b[12] += cm2;
                b[13] -= cm1;
                b[14] += cm1;
                b[15] -= cm2;
                break;
            case 2:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm1;
                b[ 1] += cm1;
                b[ 2] += cm1;
                b[ 3] += cm1;
                b[ 4] += cm2;
                b[ 5] += cm2;
                b[ 6] += cm2;
                b[ 7] += cm2;
                b[ 8] -= cm2;
                b[ 9] -= cm2;
                b[10] -= cm2;
                b[11] -= cm2;
                b[12] -= cm1;
                b[13] -= cm1;
                b[14] -= cm1;
                b[15] -= cm1;
                break;
            case 4:
                cm1 = pMultiply[result + 3];
                cm2 = pMultiply[result + 4];
                cm3 = pMultiply[result + 5];

                b[ 0] += cm1;
                b[ 1] += cm2;
                b[ 2] -= cm2;
                b[ 3] -= cm1;
                b[ 4] += cm2;
                b[ 5] += cm3;
                b[ 6] -= cm3;
                b[ 7] -= cm2;
                b[ 8] -= cm2;
                b[ 9] -= cm3;
                b[10] += cm3;
                b[11] += cm2;
                b[12] -= cm1;
                b[13] -= cm2;
                b[14] += cm2;
                b[15] += cm1;
                break;
            case 7:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm1;
                b[ 1] -= cm1;
                b[ 2] -= cm1;
                b[ 3] += cm1;
                b[ 4] += cm2;
                b[ 5] -= cm2;
                b[ 6] -= cm2;
                b[ 7] += cm2;
                b[ 8] -= cm2;
                b[ 9] += cm2;
                b[10] += cm2;
                b[11] -= cm2;
                b[12] -= cm1;
                b[13] += cm1;
                b[14] += cm1;
                b[15] -= cm1;
                break;
            case 12:
                cm1 = pMultiply[result + 3];
                cm2 = pMultiply[result + 4];
                cm3 = pMultiply[result + 5];

                b[ 0] += cm2;
                b[ 1] -= cm1;
                b[ 2] += cm1;
                b[ 3] -= cm2;
                b[ 4] += cm3;
                b[ 5] -= cm2;
                b[ 6] += cm2;
                b[ 7] -= cm3;
                b[ 8] -= cm3;
                b[ 9] += cm2;
                b[10] -= cm2;
                b[11] += cm3;
                b[12] -= cm2;
                b[13] += cm1;
                b[14] -= cm1;
                b[15] += cm2;
                break;
            case 3:
                cm1 = pMultiply[result + 0];

                b[ 0] += cm1;
                b[ 1] += cm1;
                b[ 2] += cm1;
                b[ 3] += cm1;
                b[ 4] -= cm1;
                b[ 5] -= cm1;
                b[ 6] -= cm1;
                b[ 7] -= cm1;
                b[ 8] -= cm1;
                b[ 9] -= cm1;
                b[10] -= cm1;
                b[11] -= cm1;
                b[12] += cm1;
                b[13] += cm1;
                b[14] += cm1;
                b[15] += cm1;
                break;
            case 8:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm1;
                b[ 1] += cm2;
                b[ 2] -= cm2;
                b[ 3] -= cm1;
                b[ 4] -= cm1;
                b[ 5] -= cm2;
                b[ 6] += cm2;
                b[ 7] += cm1;
                b[ 8] -= cm1;
                b[ 9] -= cm2;
                b[10] += cm2;
                b[11] += cm1;
                b[12] += cm1;
                b[13] += cm2;
                b[14] -= cm2;
                b[15] -= cm1;
                break;
            case 11:
                cm1 = pMultiply[result + 0];

                b[ 0] += cm1;
                b[ 1] -= cm1;
                b[ 2] -= cm1;
                b[ 3] += cm1;
                b[ 4] -= cm1;
                b[ 5] += cm1;
                b[ 6] += cm1;
                b[ 7] -= cm1;
                b[ 8] -= cm1;
                b[ 9] += cm1;
                b[10] += cm1;
                b[11] -= cm1;
                b[12] += cm1;
                b[13] -= cm1;
                b[14] -= cm1;
                b[15] += cm1;
                break;
            case 13:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm2;
                b[ 1] -= cm1;
                b[ 2] += cm1;
                b[ 3] -= cm2;
                b[ 4] -= cm2;
                b[ 5] += cm1;
                b[ 6] -= cm1;
                b[ 7] += cm2;
                b[ 8] -= cm2;
                b[ 9] += cm1;
                b[10] -= cm1;
                b[11] += cm2;
                b[12] += cm2;
                b[13] -= cm1;
                b[14] += cm1;
                b[15] -= cm2;
                break;
            case 9:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm2;
                b[ 1] += cm2;
                b[ 2] += cm2;
                b[ 3] += cm2;
                b[ 4] -= cm1;
                b[ 5] -= cm1;
                b[ 6] -= cm1;
                b[ 7] -= cm1;
                b[ 8] += cm1;
                b[ 9] += cm1;
                b[10] += cm1;
                b[11] += cm1;
                b[12] -= cm2;
                b[13] -= cm2;
                b[14] -= cm2;
                b[15] -= cm2;
                break;
            case 10:
                cm1 = pMultiply[result + 3];
                cm2 = pMultiply[result + 4];
                cm3 = pMultiply[result + 5];

                b[ 0] += cm2;
                b[ 1] += cm3;
                b[ 2] -= cm3;
                b[ 3] -= cm2;
                b[ 4] -= cm1;
                b[ 5] -= cm2;
                b[ 6] += cm2;
                b[ 7] += cm1;
                b[ 8] += cm1;
                b[ 9] += cm2;
                b[10] -= cm2;
                b[11] -= cm1;
                b[12] -= cm2;
                b[13] -= cm3;
                b[14] += cm3;
                b[15] += cm2;
                break;
            case 14:
                cm1 = pMultiply[result + 1];
                cm2 = pMultiply[result + 2];

                b[ 0] += cm2;
                b[ 1] -= cm2;
                b[ 2] -= cm2;
                b[ 3] += cm2;
                b[ 4] -= cm1;
                b[ 5] += cm1;
                b[ 6] += cm1;
                b[ 7] -= cm1;
                b[ 8] += cm1;
                b[ 9] -= cm1;
                b[10] -= cm1;
                b[11] += cm1;
                b[12] -= cm2;
                b[13] += cm2;
                b[14] += cm2;
                b[15] -= cm2;
                break;
            case 15:
                cm1 = pMultiply[result + 3];
                cm2 = pMultiply[result + 4];
                cm3 = pMultiply[result + 5];

                b[ 0] += cm3;
                b[ 1] -= cm2;
                b[ 2] += cm2;
                b[ 3] -= cm3;
                b[ 4] -= cm2;
                b[ 5] += cm1;
                b[ 6] -= cm1;
                b[ 7] += cm2;
                b[ 8] += cm2;
                b[ 9] -= cm1;
                b[10] += cm1;
                b[11] -= cm2;
                b[12] -= cm3;
                b[13] += cm2;
                b[14] -= cm2;
                b[15] += cm3;
                break;
            }
        }

//      DummyRead += pDst[     0];
//      DummyRead += pDst[BLOCK_BAND_WIDTH];

        if (YBlockBand)
        {
            if (camVersion == SSI_YGAIN_MUL2)
            {
                CLIP2YGAIN (0 * CIF_X + 0,  0);       // Y1, line 1
                CLIP2YGAIN (0 * CIF_X + 1,  1);       // Y2, line 1
                CLIP2YGAIN (0 * CIF_X + 2,  2);       // Y3, line 1
                CLIP2YGAIN (0 * CIF_X + 3,  3);       // Y4, line 1
                CLIP2YGAIN (1 * CIF_X + 0,  4);       // Y1, line 2
                CLIP2YGAIN (1 * CIF_X + 1,  5);       // Y2, line 2
                CLIP2YGAIN (1 * CIF_X + 2,  6);       // Y3, line 2
                CLIP2YGAIN (1 * CIF_X + 3,  7);       // Y4, line 2
//              DummyRead += pDst[2 * CIF_X];
                CLIP2YGAIN (2 * CIF_X + 0,  8);       // Y1, line 3
                CLIP2YGAIN (2 * CIF_X + 1,  9);       // Y2, line 3
                CLIP2YGAIN (2 * CIF_X + 2, 10);       // Y3, line 3
                CLIP2YGAIN (2 * CIF_X + 3, 11);       // Y4, line 3
//              DummyRead += pDst[3 * CIF_X];
                CLIP2YGAIN (3 * CIF_X + 0, 12);       // Y1, line 4
                CLIP2YGAIN (3 * CIF_X + 1, 13);       // Y2, line 4
                CLIP2YGAIN (3 * CIF_X + 2, 14);       // Y3, line 4
                CLIP2YGAIN (3 * CIF_X + 3, 15);       // Y4, line 4
            }
            else
            {
                CLIP2 (0 * CIF_X + 0,  0);            // Y1, line 1
                CLIP2 (0 * CIF_X + 1,  1);            // Y2, line 1
                CLIP2 (0 * CIF_X + 2,  2);            // Y3, line 1
                CLIP2 (0 * CIF_X + 3,  3);            // Y4, line 1
                CLIP2 (1 * CIF_X + 0,  4);            // Y1, line 2
                CLIP2 (1 * CIF_X + 1,  5);            // Y2, line 2
                CLIP2 (1 * CIF_X + 2,  6);            // Y3, line 2
                CLIP2 (1 * CIF_X + 3,  7);            // Y4, line 2
//              DummyRead += pDst[2 * CIF_X];
                CLIP2 (2 * CIF_X + 0,  8);            // Y1, line 3
                CLIP2 (2 * CIF_X + 1,  9);            // Y2, line 3
                CLIP2 (2 * CIF_X + 2, 10);            // Y3, line 3
                CLIP2 (2 * CIF_X + 3, 11);            // Y4, line 3
//              DummyRead += pDst[3 * CIF_X];
                CLIP2 (3 * CIF_X + 0, 12);            // Y1, line 4
                CLIP2 (3 * CIF_X + 1, 13);            // Y2, line 4
                CLIP2 (3 * CIF_X + 2, 14);            // Y3, line 4
                CLIP2 (3 * CIF_X + 3, 15);            // Y4, line 4
            }
            pDst += 4;
        }
        else    // UV_BLOCK_BAND
        {
            if (Cropping)
            {
                if (Uval)
                {
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 0,  0);       // U1, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 1,  1);       // U2, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 2,  2);       // U3, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 3,  3);       // U4, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 4,  4);       // U5, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 5,  5);       // U6, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 6,  6);       // U7, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 7,  7);       // U8, line 1
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 0,  8);       // U1, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 1,  9);       // U2, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 2, 10);       // U3, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 3, 11);       // U4, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 4, 12);       // U5, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 5, 13);       // U6, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 6, 14);       // U7, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 7, 15);       // U8, line 3
                    Uval = FALSE;
                }
                else    // Vval
                {
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 0,  0);       // V1, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 1,  1);       // V2, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 2,  2);       // V3, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 3,  3);       // V4, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 4,  4);       // V5, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 5,  5);       // V6, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 6,  6);       // V7, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 0 * I420_NO_C_PER_LINE_CIF + 7,  7);       // V8, line 2
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 0,  8);       // V1, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 1,  9);       // V2, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 2, 10);       // V3, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 3, 11);       // V4, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 4, 12);       // V5, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 5, 13);       // V6, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 6, 14);       // V7, line 4
                    CLIP2 (I420_NO_U_PER_BAND_CIF + 1 * I420_NO_C_PER_LINE_CIF + 7, 15);       // V8, line 4
                    Uval = TRUE;
                    pDst += 8;
                }
            }
            else    // CIF OUT
            {
                if (Uval)
                {
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 0,  0);       // U1, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 1,  1);       // U2, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 2,  2);       // U3, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 3,  3);       // U4, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 4,  4);       // U5, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 5,  5);       // U6, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 6,  6);       // U7, line 1
                    CLIP2 (0              + 0 * I420_NO_C_PER_LINE_CIF + 7,  7);       // U8, line 1
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 0,  8);       // U1, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 1,  9);       // U2, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 2, 10);       // U3, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 3, 11);       // U4, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 4, 12);       // U5, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 5, 13);       // U6, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 6, 14);       // U7, line 3
                    CLIP2 (0              + 1 * I420_NO_C_PER_LINE_CIF + 7, 15);       // U8, line 3
                    Uval = FALSE;
                }
                else    // Vval
                {
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 0,  0);       // V1, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 1,  1);       // V2, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 2,  2);       // V3, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 3,  3);       // V4, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 4,  4);       // V5, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 5,  5);       // V6, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 6,  6);       // V7, line 2
                    CLIP2 (I420_NO_U_CIF + 0 * I420_NO_C_PER_LINE_CIF + 7,  7);       // V8, line 2
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 0,  8);       // V1, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 1,  9);       // V2, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 2, 10);       // V3, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 3, 11);       // V4, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 4, 12);       // V5, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 5, 13);       // V6, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 6, 14);       // V7, line 4
                    CLIP2 (I420_NO_U_CIF + 1 * I420_NO_C_PER_LINE_CIF + 7, 15);       // V8, line 4
                    Uval = TRUE;
                    pDst += 8;
                }
            }
        }
    }
    while (pDst < pDstEnd);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mcamdrv.h ===
#ifndef __MCAMDRV_H__
#define __MCAMDRV_H__

/*++

Copyright (c) 1997 1998,  Philips I&C

Module Name:

   mcamdrv.h

Abstract:

   driver for the philips camera.

Author:

	Paul Oosterhof

Environment:

   Kernel mode only


Revision History:

Date        Change
sept.22 98  Optimized for NT5

--*/

#include <strmini.h>
#include <ksmedia.h>

#include "usbdi.h"
#include "usbcamdi.h"

#include "mprpobj.h"
#include "mprpobjx.h"

//--- Compiler switches:------------------------------

                    // DEFINES FOR CODEC
// Copy for each line pixel 3 to pixel 2, pixel 2 to pixel 1.
#define PIX12_FIX

//--- end Compiler switches:------------------------------

#define DRIVERVERSION 001

                    // SSI numbers + added functionality

#define SSI_INITIAL         1
#define SSI_AUDIO_8KHZ      2    // 8kHz audio i.s.o. 11kHz
#define SSI_STRINGS         3    // strings added
#define SSI_YGAIN_MUL2      4    // Ygain divided by two in camera. Only this version !!
#define SSI_CIF3            5    // PCF4 substituted by PCF3
#define SSI_PIX12_FIX       5    // vertical black line pixel 1/2 change
#define SSI_8117_N3         8    // new N3 silicium for 8117


typedef struct _PHILIPSCAM_CAMSTATUS {
	DWORD  ReleaseNumber;
    USHORT SensorType;
    USHORT PictureFormat;
	USHORT PictureFrameRate;
	USHORT PictureCompressing;
	GUID   PictureSubFormat;					// added RMR
    } PHILIPSCAM_CAMSTATUS, *PPHILIPSCAM_CAMSTATUS;

typedef struct _PHILIPSCAM_DEVICE_CONTEXT {
    ULONG Sig;
	ULONG EmptyPacketCounter;
	PHILIPSCAM_CAMSTATUS CamStatus;
	PHILIPSCAM_CAMSTATUS PreviousCamStatus;
	BOOLEAN FrrSupported[9];
    // internal counters
    ULONG FrameLength;
    PUSBD_INTERFACE_INFORMATION Interface;
    } PHILIPSCAM_DEVICE_CONTEXT, *PPHILIPSCAM_DEVICE_CONTEXT;

typedef struct _PHILIPSCAM_FRAME_CONTEXT {
    ULONG Sig;
    ULONG USBByteCounter;    
} PHILIPSCAM_FRAME_CONTEXT, *PPHILIPSCAM_FRAME_CONTEXT;

#define PHILIPSCAM_DEVICE_SIG 0x45544e49     //"INTE"

#if DBG
#define ASSERT_DEVICE_CONTEXT(d) ASSERT((d)->Sig == PHILIPSCAM_DEVICE_SIG)
#else
#define ASSERT_DEVICE_CONTEXT(d) 
#endif

#define PHILIPSCAM_DEFAULT_FRAME_RATE     15
#define PHILIPSCAM_MAX_FRAME_RATE 24
#define PHILIPSCAM_SYNC_PIPE    0
#define PHILIPSCAM_DATA_PIPE    1

#define ULTRA_TRACE 3
#define MAX_TRACE 2
#define MIN_TRACE 1

#define CIF_X   352
#define CIF_Y   288
#define QCIF_X  176
#define QCIF_Y  144
#define SQCIF_X 128
#define SQCIF_Y  96
#define QQCIF_X  88
#define QQCIF_Y	 72
#define VGA_X   640
#define VGA_Y   480
#define SIF_X   320
#define SIF_Y   240
#define SSIF_X  240
#define SSIF_Y  180
#define QSIF_X  160
#define QSIF_Y  120
#define SQSIF_X  80
#define SQSIF_Y	 60
#define SCIF_X  240
#define SCIF_Y  176

#define ALT_INTERFACE_0    0

typedef enum {
   FORMATCIF,
   FORMATQCIF,
   FORMATSQCIF,
   FORMATQQCIF,
   FORMATVGA,
   FORMATSIF,
   FORMATSSIF,
   FORMATQSIF,
   FORMATSQSIF,
   FORMATSCIF
} PHFORMAT;

typedef enum {
   FRRATEVGA,
   FRRATE375,
   FRRATE5,
   FRRATE75,
   FRRATE10,
   FRRATE12,
   FRRATE15,
   FRRATE20,
   FRRATE24
} PHFRAMERATE;

typedef enum{
   COMPRESSION0,
   COMPRESSION3,
   COMPRESSION4
} PHCOMPRESSION;

typedef enum{
   SUBTYPEP420,
   SUBTYPEI420,
   SUBTYPEIYUV
} PHSUBTYPE;

#if DBG
extern ULONG PHILIPSCAM_DebugTraceLevel;

#define PHILIPSCAM_KdPrint(_t_, _x_) \
    if (PHILIPSCAM_DebugTraceLevel >= _t_) { \
	DbgPrint("PHILCAM1.SYS: "); \
	DbgPrint _x_ ;\
    }
    
PCHAR
FRString (
    USHORT index
);

#ifdef NTKERN
#define TRAP()  _asm {int 3}
#define TEST_TRAP() _asm {int 3}
#define TRAP_ERROR(e) if (!NT_SUCCESS(e)) { _asm {int 3} }
#else
#define TRAP()  DbgBreakPoint()
#define TEST_TRAP() DbgBreakPoint()
#define TRAP_ERROR(e) if (!NT_SUCCESS(e)) { DbgBreakPoint(); }
#endif
#else
#define PHILIPSCAM_KdPrint(_t_, _x_)
#define TEST_TRAP()
#define TRAP()
#endif /* DBG */

NTSTATUS
PHILIPSCAM_Initialize(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );

NTSTATUS
PHILIPSCAM_UnInitialize(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );    

NTSTATUS
PHILIPSCAM_StartVideoCapture(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );

NTSTATUS
PHILIPSCAM_StopVideoCapture(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );    

ULONG
PHILIPSCAM_ProcessUSBPacket(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext,
    PVOID CurrentFrameContext,
    PUSBD_ISO_PACKET_DESCRIPTOR SyncPacket,
    PVOID SyncBuffer,
    PUSBD_ISO_PACKET_DESCRIPTOR DataPacket,
    PVOID DataBuffer,
    PBOOLEAN FrameComplete,
    PBOOLEAN NextFrameIsStill
    );

VOID
PHILIPSCAM_NewFrame(
    PVOID DeviceContext,
    PVOID FrameContext
    );

NTSTATUS
PHILIPSCAM_ProcessRawVideoFrame(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext,
    PVOID FrameContext,
    PVOID FrameBuffer,
    ULONG FrameLength,
    PVOID RawFrameBuffer,
    ULONG RawFrameLength,
    ULONG NumberOfPackets,
    PULONG BytesReturned
    );

NTSTATUS
PHILIPSCAM_Configure(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext,
    PUSBD_INTERFACE_INFORMATION Interface,
    PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor,
    PLONG DataPipeIndex,
    PLONG SyncPipeIndex
    );    

NTSTATUS
PHILIPSCAM_SaveState(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );

NTSTATUS
PHILIPSCAM_RestoreState(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );    

NTSTATUS
PHILIPSCAM_ReadRegistry(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );    

NTSTATUS
PHILIPSCAM_AllocateBandwidth(
    IN PDEVICE_OBJECT BusDeviceObject,
    IN PVOID DeviceContext,
    OUT PULONG RawFrameLength,
    IN PVOID Format           
    );    

NTSTATUS
PHILIPSCAM_FreeBandwidth(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );      


NTSTATUS
PHILIPSCAM_CameraToDriverDefaults(
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext
    );


NTSTATUS
PHILIPSCAM_SaveControlsToRegistry(
PDEVICE_OBJECT BusDeviceObject,
    PVOID pDeviceContext
    );


NTSTATUS
PHILIPSCAM_PropertyRequest(
    BOOLEAN SetProperty,
    PDEVICE_OBJECT BusDeviceObject,
    PVOID DeviceContext,
    PVOID PropertyContext
    );


VOID STREAMAPI
PHILIPSCAM_ReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PVOID DeviceContext,
    IN PBOOLEAN Completed
    );

VOID STREAMAPI
PHILIPSCAM_ReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PVOID DeviceContext,
    IN PBOOLEAN Completed
    );

BOOL 
AdapterVerifyFormat(
    PKS_DATAFORMAT_VIDEOINFOHEADER pKSDataFormatToVerify, 
    int StreamNumber
    );    

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpdef.c ===
/*

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpdef.c.c

Abstract:     property set definition

Author:       Michael verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5 
Nov. 30, 98 VID and PID added as custom properties


 * This file defines the following property sets:
 *
 * PROPSETID_VIDCAP_VIDEOPROCAMP
 * PROPSETID_VIDCAP_CAMERACONTROL
 * PROPSETID_PHILIPS_CUSTOM_PROP
 *
*/
#include "mwarn.h"
#include "wdm.h"
#include <strmini.h>
#include <ks.h>
#include <ksmedia.h>
#include "mprpobj.h"
#include "mprpobjx.h"
#include "mprpdef.h"


/*--------------------------------------------------------------------------  
 * PROPSETID_VIDCAP_VIDEOPROCAMP 
 *
 * Supported:
 *
 * Brightness, 
 * Contrast, 
 * Gamma
 * Color Enable 
 * BackLightCompensation, 
 *
 *--------------------------------------------------------------------------*/  

/*
 * Brightness
 */
KSPROPERTY_STEPPING_LONG Brightness_RangeAndStep [] = 
{
    {
        BRIGHTNESS_DELTA,				// SteppingDelta (range / steps)
        0,								// Reserved
        BRIGHTNESS_MIN,					// Minimum in (IRE * 100) units
        BRIGHTNESS_MAX					// Maximum in (IRE * 100) units
    }
};

LONG Brightness_Default = 15;

KSPROPERTY_MEMBERSLIST Brightness_MembersList [] = 
{
    {
		{
		    KSPROPERTY_MEMBER_RANGES,
			sizeof (Brightness_RangeAndStep),
			SIZEOF_ARRAY (Brightness_RangeAndStep),
			0
		},
		(PVOID) Brightness_RangeAndStep
	},
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (Brightness_Default),
            sizeof (Brightness_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &Brightness_Default,
    }    
};

KSPROPERTY_VALUES Brightness_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (Brightness_MembersList),
    Brightness_MembersList
};

/*
 * Contrast
 */
KSPROPERTY_STEPPING_LONG Contrast_RangeAndStep [] = 
{
    {
		CONTRAST_DELTA,					// SteppingDelta
		0,								// Reserved
		CONTRAST_MIN,					// Minimum 
		CONTRAST_MAX					// Maximum 
    }
};

LONG Contrast_Default = 15;

KSPROPERTY_MEMBERSLIST Contrast_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (Contrast_RangeAndStep),
			SIZEOF_ARRAY (Contrast_RangeAndStep),
			0
		},
		(PVOID) Contrast_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (Contrast_Default),
            sizeof (Contrast_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &Contrast_Default,
    }    
};

KSPROPERTY_VALUES Contrast_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (Contrast_MembersList),
    Contrast_MembersList
};

/* 
 * Gamma
 */
KSPROPERTY_STEPPING_LONG Gamma_RangeAndStep [] = 
{
    {
		GAMMA_DELTA,					// SteppingDelta
		0,								// Reserved
		GAMMA_MIN,						// Minimum 
		GAMMA_MAX						// Maximum 
    }
};

LONG Gamma_Default = 15;

KSPROPERTY_MEMBERSLIST Gamma_MembersList [] = 
{
    {
	{
	    KSPROPERTY_MEMBER_RANGES,
	    sizeof (Gamma_RangeAndStep),
	    SIZEOF_ARRAY (Gamma_RangeAndStep),
	    0
	},
	(PVOID) Gamma_RangeAndStep
    },    
    {
	    {
		    KSPROPERTY_MEMBER_VALUES,
            sizeof (Gamma_Default),
            sizeof (Gamma_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &Gamma_Default,
    }    
};

KSPROPERTY_VALUES Gamma_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (Gamma_MembersList),
    Gamma_MembersList
};

/*
 * ColorEnable
 */
KSPROPERTY_STEPPING_LONG ColorEnable_RangeAndStep [] = 
{
    {
		COLORENABLE_DELTA,				// SteppingDelta
		0,								// Reserved
		COLORENABLE_MIN,				// Minimum 
		COLORENABLE_MAX					// Maximum 
    }
};

LONG ColorEnable_Default = 1;

KSPROPERTY_MEMBERSLIST ColorEnable_MembersList [] = 
{
    {
	{
	    KSPROPERTY_MEMBER_RANGES,
	    sizeof (ColorEnable_RangeAndStep),
	    SIZEOF_ARRAY (ColorEnable_RangeAndStep),
	    0
	},
	(PVOID) ColorEnable_RangeAndStep
    },    
    {
	    {
		    KSPROPERTY_MEMBER_VALUES,
            sizeof (ColorEnable_Default),
            sizeof (ColorEnable_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &ColorEnable_Default,
    }    
};

KSPROPERTY_VALUES ColorEnable_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (ColorEnable_MembersList),
    ColorEnable_MembersList
};

/*
 * BackLight Compensation
 */
KSPROPERTY_STEPPING_LONG BackLight_Compensation_RangeAndStep [] = 
{
    {
		BACKLIGHT_COMPENSATION_DELTA,	// SteppingDelta
		0,								// Reserved
		BACKLIGHT_COMPENSATION_MIN,		// Minimum 
		BACKLIGHT_COMPENSATION_MAX		// Maximum 
    }
};

LONG BackLight_Compensation_Default = 1;

KSPROPERTY_MEMBERSLIST BackLight_Compensation_MembersList [] = 
{
    {
	{
	    KSPROPERTY_MEMBER_RANGES,
	    sizeof (BackLight_Compensation_RangeAndStep),
	    SIZEOF_ARRAY (BackLight_Compensation_RangeAndStep),
	    0
	},
	(PVOID) BackLight_Compensation_RangeAndStep
    },    
    {
	    {
		    KSPROPERTY_MEMBER_VALUES,
            sizeof (BackLight_Compensation_Default),
            sizeof (BackLight_Compensation_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &BackLight_Compensation_Default,
    }    
};

KSPROPERTY_VALUES BackLight_Compensation_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (BackLight_Compensation_MembersList),
    BackLight_Compensation_MembersList
};

/*
 * Proc Amp propertyset
 */
DEFINE_KSPROPERTY_TABLE(VideoProcAmpProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS,
		TRUE,                                   // GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
		TRUE,                                   // SetSupported or Handler
		&Brightness_Values,                     // Values
		0,                                      // RelationsCount
		NULL,                                   // Relations
		NULL,                                   // SupportHandler
		sizeof(ULONG)                           // SerializedSize
    ),	

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_VIDEOPROCAMP_CONTRAST,
		TRUE,                                   // GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
		TRUE,                                   // SetSupported or Handler
		&Contrast_Values,                       // Values
		0,                                      // RelationsCount
		NULL,                                   // Relations
		NULL,                                   // SupportHandler
		sizeof(ULONG)                           // SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_VIDEOPROCAMP_GAMMA,
		TRUE,                                   // GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
		TRUE,                                   // SetSupported or Handler
		&Gamma_Values,                          // Values
		0,                                      // RelationsCount
		NULL,                                   // Relations
		NULL,                                   // SupportHandler
		sizeof(ULONG)                           // SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_VIDEOPROCAMP_COLORENABLE,
		TRUE,                                   // GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
		TRUE,                                   // SetSupported or Handler
		&ColorEnable_Values,					// Values
		0,                                      // RelationsCount
		NULL,                                   // Relations
		NULL,                                   // SupportHandler
		sizeof(ULONG)                           // SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION,
		TRUE,                                   // GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinProperty
		sizeof(KSPROPERTY_VIDEOPROCAMP_S),      // MinData
		TRUE,                                   // SetSupported or Handler
		&BackLight_Compensation_Values,			// Values
		0,                                      // RelationsCount
		NULL,                                   // Relations
		NULL,                                   // SupportHandler
		sizeof(ULONG)                           // SerializedSize
    )
};


/*--------------------------------------------------------------------------  
 * PROPSETID_PHILIPS_CUSTOM_PROP
 *
 * Supported:
 *
 * WhiteBalance Mode, 
 * WhiteBalance Speed,
 * WhiteBalance Delay, 
 * WhiteBalance Red Gain, 
 * WhiteBalance Blue Gain, 
 * AutoExposure ControlSpeed
 * AutoExposure Flickerless
 * AutoExposure Shutter Mode
 * AutoExposure Shutter Speed
 * AutoExposure Shutter Status
 * AutoExposure AGC Mode
 * AutoExposure AGC Speed
 * DriverVersion
 * Framerate, 
 * Video Format
 * SensorType
 * VideoCompression,
 * Defaults
 * Release Number
 * VendorId
 * ProductId
 *
 *--------------------------------------------------------------------------*/  

/*
 * White balance Mode
 */
LONG WB_Mode_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO;

KSPROPERTY_MEMBERSLIST WB_Mode_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (WB_Mode_Default),
            sizeof (WB_Mode_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &WB_Mode_Default,
    }    
};

KSPROPERTY_VALUES WB_Mode_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (WB_Mode_MembersList),
    WB_Mode_MembersList
};


/*
 * White balance Speed
 */
KSPROPERTY_STEPPING_LONG WB_Speed_RangeAndStep [] = 
{
    {
		WB_SPEED_DELTA,		// SteppingDelta
		0,					// Reserved
		WB_SPEED_MIN,		// Minimum 
		WB_SPEED_MAX		// Maximum 
    }
};

LONG WB_Speed_Default = 15;

KSPROPERTY_MEMBERSLIST WB_Speed_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (WB_Speed_RangeAndStep),
			SIZEOF_ARRAY (WB_Speed_RangeAndStep),
			0
		},
		(PVOID) WB_Speed_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (WB_Speed_Default),
            sizeof (WB_Speed_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &WB_Speed_Default,
    }    
};

KSPROPERTY_VALUES WB_Speed_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (WB_Speed_MembersList),
    WB_Speed_MembersList
};


/*
 * White balance Delay
 */
KSPROPERTY_STEPPING_LONG WB_Delay_RangeAndStep [] = 
{
    {
		WB_DELAY_DELTA,		// SteppingDelta
		0,					// Reserved
		WB_DELAY_MIN,		// Minimum 
		WB_DELAY_MAX		// Maximum 
    }
};

LONG WB_Delay_Default = 32;

KSPROPERTY_MEMBERSLIST WB_Delay_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (WB_Delay_RangeAndStep),
			SIZEOF_ARRAY (WB_Delay_RangeAndStep),
			0
		},
		(PVOID) WB_Delay_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (WB_Delay_Default),
            sizeof (WB_Delay_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &WB_Delay_Default,
    }    
};

KSPROPERTY_VALUES WB_Delay_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (WB_Delay_MembersList),
    WB_Delay_MembersList
};

/*
 * White balance Red Gain
 */
KSPROPERTY_STEPPING_LONG WB_Red_Gain_RangeAndStep [] = 
{
    {
		WB_RED_GAIN_DELTA,	// SteppingDelta
		0,					// Reserved
		WB_RED_GAIN_MIN,	// Minimum 
		WB_RED_GAIN_MAX		// Maximum 
    }
};

LONG WB_Red_Gain_Default = 127;

KSPROPERTY_MEMBERSLIST WB_Red_Gain_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (WB_Red_Gain_RangeAndStep),
			SIZEOF_ARRAY (WB_Red_Gain_RangeAndStep),
			0
		},
		(PVOID) WB_Red_Gain_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (WB_Red_Gain_Default),
            sizeof (WB_Red_Gain_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &WB_Red_Gain_Default,
    }    
};

KSPROPERTY_VALUES WB_Red_Gain_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (WB_Red_Gain_MembersList),
    WB_Red_Gain_MembersList
};

/*
 * White balance Blue Gain
 */
KSPROPERTY_STEPPING_LONG WB_Blue_Gain_RangeAndStep [] = 
{
    {
		WB_BLUE_GAIN_DELTA,	// SteppingDelta
		0,					// Reserved
		WB_BLUE_GAIN_MIN,	// Minimum 
		WB_BLUE_GAIN_MAX	// Maximum 
    }
};

LONG WB_Blue_Gain_Default = 127;

KSPROPERTY_MEMBERSLIST WB_Blue_Gain_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (WB_Blue_Gain_RangeAndStep),
			SIZEOF_ARRAY (WB_Blue_Gain_RangeAndStep),
			0
		},
		(PVOID) WB_Blue_Gain_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (WB_Blue_Gain_Default),
            sizeof (WB_Blue_Gain_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &WB_Blue_Gain_Default,
    }    
};

KSPROPERTY_VALUES WB_Blue_Gain_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (WB_Blue_Gain_MembersList),
    WB_Blue_Gain_MembersList
};

/*
 * Auto Exposure Control Speed
 */
KSPROPERTY_STEPPING_LONG AE_Control_Speed_RangeAndStep [] = 
{
    {
		AE_CONTROL_SPEED_DELTA,		// SteppingDelta
		0,							// Reserved
		AE_CONTROL_SPEED_MIN,		// Minimum 
		AE_CONTROL_SPEED_MAX		// Maximum 
    }
};

LONG AE_Control_Speed_Default = 127;

KSPROPERTY_MEMBERSLIST AE_Control_Speed_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (AE_Control_Speed_RangeAndStep),
			SIZEOF_ARRAY (AE_Control_Speed_RangeAndStep),
			0
		},
		(PVOID) AE_Control_Speed_RangeAndStep
    },
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_Control_Speed_Default),
            sizeof (AE_Control_Speed_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_Control_Speed_Default,
    }    
};

KSPROPERTY_VALUES AE_Control_Speed_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_Control_Speed_MembersList),
	AE_Control_Speed_MembersList
};

/*
 * Auto Exposure Flickerless
 */
LONG AE_Flickerless_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_ON;

KSPROPERTY_MEMBERSLIST AE_Flickerless_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_Flickerless_Default),
            sizeof (AE_Flickerless_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_Flickerless_Default,
    }    
};

KSPROPERTY_VALUES AE_Flickerless_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_Flickerless_MembersList),
    AE_Flickerless_MembersList
};

/*
 * Auto Exposure Shutter Mode
 */
LONG AE_Shutter_Mode_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO;

KSPROPERTY_MEMBERSLIST AE_Shutter_Mode_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_Shutter_Mode_Default),
            sizeof (AE_Shutter_Mode_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_Shutter_Mode_Default,
    }    
};

KSPROPERTY_VALUES AE_Shutter_Mode_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_Shutter_Mode_MembersList),
    AE_Shutter_Mode_MembersList
};

/*
 * Auto Exposure Shutter Speed
 */
KSPROPERTY_STEPPING_LONG AE_Shutter_Speed_RangeAndStep [] = 
{
    {
		AE_SHUTTER_SPEED_DELTA,	// SteppingDelta
		0,						// Reserved
		AE_SHUTTER_SPEED_MIN,	// Minimum 
		AE_SHUTTER_SPEED_MAX	// Maximum 
    }
};

LONG AE_Shutter_Speed_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_250;

KSPROPERTY_MEMBERSLIST AE_Shutter_Speed_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (AE_Shutter_Speed_RangeAndStep),
			SIZEOF_ARRAY (AE_Shutter_Speed_RangeAndStep),
			0
		},
		(PVOID) AE_Shutter_Speed_RangeAndStep
    },

    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_Shutter_Speed_Default),
            sizeof (AE_Shutter_Speed_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_Shutter_Speed_Default,
    }    
};

KSPROPERTY_VALUES AE_Shutter_Speed_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_Shutter_Speed_MembersList),
    AE_Shutter_Speed_MembersList
};

/*
 * Auto Exposure Shutter Status
 */
KSPROPERTY_VALUES AE_Shutter_Status_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
	NULL
};

/*
 * Auto exposure AGC Mode
 */
LONG AE_AGC_Mode_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO;

KSPROPERTY_MEMBERSLIST AE_AGC_Mode_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_AGC_Mode_Default),
            sizeof (AE_AGC_Mode_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_AGC_Mode_Default,
    }    
};

KSPROPERTY_VALUES AE_AGC_Mode_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_AGC_Mode_MembersList),
    AE_AGC_Mode_MembersList
};

/*
 * Auto exposure AGC speed
 */
KSPROPERTY_STEPPING_LONG AE_AGC_RangeAndStep [] = 
{
    {
		AE_AGC_DELTA,			// SteppingDelta
		0,						// Reserved
		AE_AGC_MIN,				// Minimum 
		AE_AGC_MAX				// Maximum 
    }
};

LONG AE_AGC_Default = 10;

KSPROPERTY_MEMBERSLIST AE_AGC_MembersList [] = 
{
    {
		{
			KSPROPERTY_MEMBER_RANGES,
			sizeof (AE_AGC_RangeAndStep),
			SIZEOF_ARRAY (AE_AGC_RangeAndStep),
			0
		},
		(PVOID) AE_AGC_RangeAndStep
    },

    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (AE_AGC_Default),
            sizeof (AE_AGC_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &AE_AGC_Default,
    }    
};

KSPROPERTY_VALUES AE_AGC_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (AE_AGC_MembersList),
    AE_AGC_MembersList
};

/*
 * Driver Version
 */
KSPROPERTY_VALUES DriverVersion_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};

/*
 * Framerate
 */
LONG Framerate_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75;

KSPROPERTY_MEMBERSLIST Framerate_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (Framerate_Default),
            sizeof (Framerate_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &Framerate_Default,
    }    
};

KSPROPERTY_VALUES Framerate_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (Framerate_MembersList),
    Framerate_MembersList
};

/*
 * Framerates Supported
 */

KSPROPERTY_VALUES Framerates_Supported_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};


/*
 * Videoformat
 */
LONG VideoFormat_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT_QCIF;

KSPROPERTY_MEMBERSLIST VideoFormat_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (VideoFormat_Default),
            sizeof (VideoFormat_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &VideoFormat_Default,
    }    
};

KSPROPERTY_VALUES VideoFormat_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (VideoFormat_MembersList),
    VideoFormat_MembersList
};

/*
 * Sensor Type
 */
KSPROPERTY_VALUES SensorType_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};

/*
 * VideoCompression
 */
LONG VideoCompression_Default = KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION_UNCOMPRESSED;

KSPROPERTY_MEMBERSLIST VideoCompression_MembersList [] = 
{
    {
        {
            KSPROPERTY_MEMBER_VALUES,
            sizeof (VideoCompression_Default),
            sizeof (VideoCompression_Default),
            KSPROPERTY_MEMBER_FLAG_DEFAULT
        },
        (PVOID) &VideoCompression_Default,
    }    
};

KSPROPERTY_VALUES VideoCompression_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    SIZEOF_ARRAY (VideoCompression_MembersList),
    VideoCompression_MembersList
};

/*
 * Defaults
 */
KSPROPERTY_VALUES Default_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};

/*
 * Release Number
 */
KSPROPERTY_VALUES Release_Number_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};

/*
 * VendorId
 */
KSPROPERTY_VALUES Vendor_Id_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};

/*
 * ProductId
 */
KSPROPERTY_VALUES Product_Id_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};


/*--------------------------------------------------------------------------  
 * PROPSETID_PHILIPS_FACTORY_PROP
 *
 * Supported:
 *
 * Register
 * Factory Mode
 * Register Address
 * Register Data
 *--------------------------------------------------------------------------*/  

/*
 * Register Address
 */
KSPROPERTY_VALUES RegisterAddress_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
	NULL
};

/*
 * Register Data
 */
KSPROPERTY_VALUES RegisterData_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
	NULL
};

/*
 * Factory Mode
 */
KSPROPERTY_VALUES Factory_Mode_Values =
{
    {
		STATICGUIDOF (KSPROPTYPESETID_General),
		VT_I4,
		0
    },
    0,
    NULL
};


/*--------------------------------------------------------------------------  
 * PROPSETID_PHILIPS_CUSTOM_PROP
 *
 * Supported:
 *
 * WhiteBalance Mode			get		set				default
 * WhiteBalance Speed,			get		set		range	default
 * WhiteBalance Delay,			get		set		range	default
 * WhiteBalance Red Gain,		get		set		range	default
 * WhiteBalance Blue Gain,		get		set		range	default
 * AutoExposure ControlSpeed	get		set		range	default
 * AutoExposure Flickerless		get		set		ranges	default	
 * AutoExposure Shutter Mode	get		set				default
 * AutoExposure Shutter Speed	get		set		range	default
 * AutoExposure Shutter Status	get				
 * AutoExposure AGC Mode		get		set				default
 * AutoExposure AGC Speed		get		set		range	default
 * DriverVersion				get				
 * Framerate,					get		set				default
 * Framerates Supported			get		
 * Video Format					get						default
 * SensorType					get
 * VideoCompression,			get						default
 * Defaults								set
 * Release Number				get
 * VendorId						get
 * ProductId					get
 *
 *--------------------------------------------------------------------------*/  


DEFINE_KSPROPERTY_TABLE(CustomProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE,				// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&WB_Mode_Values,									// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&WB_Speed_Values,									// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_DELAY,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&WB_Delay_Values,									// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&WB_Red_Gain_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN,		// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&WB_Blue_Gain_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED,	// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_Control_Speed_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS,		// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_Flickerless_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,		// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_Shutter_Mode_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,	// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_Shutter_Speed_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS,	// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_Shutter_Status_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_AGC_Mode_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC,				// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&AE_AGC_Values,										// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_DRIVERVERSION,		// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		FALSE,			                                    // SetSupported or Handler
		&DriverVersion_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&Framerate_Values,									// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATES_SUPPORTED,// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&Framerates_Supported_Values,						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT,			// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		FALSE,	// !! TBD	                                // SetSupported or Handler
		&VideoFormat_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE,		    // PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		FALSE,	// !! TBD	                                // SetSupported or Handler
		&SensorType_Values,		    						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION,	// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		FALSE,	// !! TBD	                                // SetSupported or Handler
		&VideoCompression_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS,		    // PropertyId
		FALSE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,				                                // SetSupported or Handler
		&Default_Values,		    						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_RELEASE_NUMBER,	    // PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,				                                // SetSupported or Handler
		&Release_Number_Values,	    						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_VENDOR_ID,		    // PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,				                                // SetSupported or Handler
		&Vendor_Id_Values,		    						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_CUSTOM_PROP_PRODUCT_ID,		    // PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S),			// MinData
		TRUE,				                                // SetSupported or Handler
		&Product_Id_Values,		    						// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

};

/*--------------------------------------------------------------------------  
 * PROPSETID_PHILIPS_FACTORY_PROP
 *
 * Supported:
 *
 * Register			set		get
 * Factory_Mode		set
 *
 *--------------------------------------------------------------------------*/  

DEFINE_KSPROPERTY_TABLE(FactoryProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_ADDRESS,  	// PropertyId
		FALSE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&RegisterAddress_Values,							// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_DATA,  	// PropertyId
		TRUE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&RegisterData_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
		KSPROPERTY_PHILIPS_FACTORY_PROP_FACTORY_MODE,	   	// PropertyId
		FALSE,												// GetSupported or Handler
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinProperty
		sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S),			// MinData
		TRUE,			                                    // SetSupported or Handler
		&Factory_Mode_Values,								// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		sizeof(ULONG)										// SerializedSize
    ),
};

/*--------------------------------------------------------------------------  
 | VideoControlProperties Table
 |
 | Supported:
 |
 | Videocontrol Capabilities
 | Videocontrol Mode						set
 |
 --------------------------------------------------------------------------*/  


DEFINE_KSPROPERTY_TABLE(FrameRateProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_CAPS,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S), // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S), // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
	
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_FRAME_RATES,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S),    // MinProperty
        0 ,                                     // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_MODE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S), // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S), // MinData
        TRUE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

};
    

/*--------------------------------------------------------------------------  
 * Definition of property set table
 *--------------------------------------------------------------------------*/  
DEFINE_KSPROPERTY_SET_TABLE(AdapterPropertyTable)
{
    DEFINE_KSPROPERTY_SET
    ( 
		&PROPSETID_VIDCAP_VIDEOPROCAMP,					// Set
		SIZEOF_ARRAY(VideoProcAmpProperties),           // PropertiesCount
		VideoProcAmpProperties,                         // PropertyItem
		0,                                              // FastIoCount
		NULL                                            // FastIoTable
    ),

    DEFINE_KSPROPERTY_SET
    ( 
		&PROPSETID_PHILIPS_CUSTOM_PROP,					// Set
		SIZEOF_ARRAY(CustomProperties),                 // PropertiesCount
		CustomProperties,                               // PropertyItem
		0,                                              // FastIoCount
		NULL                                            // FastIoTable
    ),

	DEFINE_KSPROPERTY_SET
    ( 
		&PROPSETID_PHILIPS_FACTORY_PROP,				// Set
		SIZEOF_ARRAY(FactoryProperties),                // PropertiesCount
		FactoryProperties,                              // PropertyItem
		0,                                              // FastIoCount
		NULL                                            // FastIoTable
    ),

    DEFINE_KSPROPERTY_SET
    ( 
        &PROPSETID_VIDCAP_VIDEOCONTROL,           // Set
        SIZEOF_ARRAY(FrameRateProperties),        // PropertiesCount
        FrameRateProperties,                      // PropertyItem
        0,                                        // FastIoCount
        NULL                                      // FastIoTable
    )
};

const NUMBER_OF_ADAPTER_PROPERTY_SETS = (SIZEOF_ARRAY (AdapterPropertyTable));



/*--------------------------------------------------------------------------  
 | VideoControlProperties Table
 |
 | Supported:
 |
 | Videocontrol Capabilities
 | Videocontrol Mode						set
 |
 --------------------------------------------------------------------------*/  


DEFINE_KSPROPERTY_TABLE(VideoControlProperties)
{
	DEFINE_KSPROPERTY_ITEM
	(
		KSPROPERTY_VIDEOCONTROL_CAPS,					  	// PropertyId
		FALSE,												// GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S),				// MinProperty
		sizeof(KSPROPERTY_VIDEOCONTROL_CAPS_S),				// MinData
		FALSE,												// SetSupported or Handler
		NULL,												// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		0													// SerializedSize
	),

   DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinProperty
        sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S),      // MinData
        TRUE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_VIDEOCONTROL_FRAME_RATES,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S),    // MinProperty
        0 ,                                     // MinData
        FALSE,                                   // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),

	DEFINE_KSPROPERTY_ITEM
	(
		KSPROPERTY_VIDEOCONTROL_MODE,					  	// PropertyId
		FALSE,												// GetSupported or Handler
		sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S),				// MinProperty
		sizeof(KSPROPERTY_VIDEOCONTROL_MODE_S),				// MinData
		TRUE,												// SetSupported or Handler
		NULL,												// Values
		0,													// RelationsCount
		NULL,												// Relations
		NULL,												// SupportHandler
		0													// SerializedSize
	)
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mdecoder.h ===
/*++                            
Copyright (c) 1996, 1997  Philips B.V. CE-VCM

Module Name:

   mdecoder.h

Abstract:

   This module converts the compressed video data to uncompressed video data.

Original Author:

   Ronald v.d.Meer


Environment:

   Kernel mode only


Revision History:

Date       Change
14-04-1998 Initial version 

--*/

#ifndef __MDECODER_H__
#define __MDECODER_H__

#include <stdio.h>
#include "mcamdrv.h"
#include "resource.h"


/*******************************************************************************
 *
 * START DEFINES
 *
 ******************************************************************************/

#define BytesPerBandCIF3  704
#define BytesPerBandCIF4  528

#define BLOCK_BAND_WIDTH  ((CIF_X * 3) / 2)

#define Y_BLOCK_BAND      TRUE
#define UV_BLOCK_BAND     FALSE

/* defines for I420 space */

#define I420_NO_Y_PER_LINE_CIF    (CIF_X)
#define I420_NO_C_PER_LINE_CIF    (CIF_X >> 1)

#define I420_NO_Y_PER_LINE_SIF    (SIF_X)
#define I420_NO_C_PER_LINE_SIF    (SIF_X >> 1)

#define I420_NO_Y_PER_LINE_SSIF   (SSIF_X)
#define I420_NO_C_PER_LINE_SSIF   (SSIF_X >> 1)

#define I420_NO_Y_PER_LINE_SCIF   (SCIF_X)
#define I420_NO_C_PER_LINE_SCIF   (SCIF_X >> 1)

#define I420_NO_Y_PER_BAND_CIF    (4 * CIF_X)
#define I420_NO_U_PER_BAND_CIF    (2 * (CIF_X >> 1))
#define I420_NO_V_PER_BAND_CIF    (2 * (CIF_X >> 1))
#define I420_NO_C_PER_BAND_CIF    (CIF_X >> 1)

#define I420_NO_Y_PER_BAND_SIF    (4 * SIF_X)
#define I420_NO_U_PER_BAND_SIF    (2 * (SIF_X >> 1))
#define I420_NO_V_PER_BAND_SIF    (2 * (SIF_X >> 1))
#define I420_NO_C_PER_BAND_SIF    (SIF_X >> 1)

#define I420_NO_Y_PER_BAND_SSIF   (4 * SSIF_X)
#define I420_NO_U_PER_BAND_SSIF   (2 * (SSIF_X >> 1))
#define I420_NO_V_PER_BAND_SSIF   (2 * (SSIF_X >> 1))
#define I420_NO_C_PER_BAND_SSIF   (SSIF_X >> 1)

#define I420_NO_Y_PER_BAND_SCIF   (4 * SCIF_X)
#define I420_NO_U_PER_BAND_SCIF   (2 * (SCIF_X >> 1))
#define I420_NO_V_PER_BAND_SCIF   (2 * (SCIF_X >> 1))
#define I420_NO_C_PER_BAND_SCIF   (SCIF_X >> 1)

/*******************************************************************************
 *
 * START FUNCTION DECLARATIONS
 *
 ******************************************************************************/

extern void InitDecoder ();


extern void DcDecompressBandToI420 (PBYTE pSrc, PBYTE pDst, DWORD camVersion,
                                    BOOLEAN YBlockBand, BOOLEAN Cropping);

#endif  // __MDECODER_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpdef.h ===
#ifndef __PRPDEF_H__
#define __PRPDEF_H__

/*

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpdef.h

Abstract:     Property sets definition

Author:       Michael Verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5

 * This file defines the following property sets:
 *
 * PROPSETID_VIDCAP_VIDEOPROCAMP
 * PROPSETID_VIDCAP_CAMERACONTROL
 * PROPSETID_PHILIPS_CUSTOM_PROP
 *
*/

/*
 * Following values are the ranges and stepping delta's
 */
#define BRIGHTNESS_MIN                                  0x0
#define BRIGHTNESS_MAX                                  0x7f    
#define BRIGHTNESS_DELTA                                0x1

#define CONTRAST_MIN                                    0x0
#define CONTRAST_MAX                                    0x3f
#define CONTRAST_DELTA                                  0x1

#define GAMMA_MIN                                       0x0
#define GAMMA_MAX                                       0x1f
#define GAMMA_DELTA                                     0x1

#define COLORENABLE_MIN                                 0x0
#define COLORENABLE_MAX                                 0x1
#define COLORENABLE_DELTA                               0x1

#define BACKLIGHT_COMPENSATION_MIN                      0x0
#define BACKLIGHT_COMPENSATION_MAX                      0x1
#define BACKLIGHT_COMPENSATION_DELTA                    0x1     

#define WB_SPEED_MIN                                    0x1
#define WB_SPEED_MAX                                    0x20
#define WB_SPEED_DELTA                                  0x1

#define WB_DELAY_MIN                                    0x1
#define WB_DELAY_MAX                                    0x3f
#define WB_DELAY_DELTA                                  0x1

#define WB_RED_GAIN_MIN                                 0x0
#define WB_RED_GAIN_MAX                                 0xff
#define WB_RED_GAIN_DELTA                               0x1

#define WB_BLUE_GAIN_MIN                                0x0
#define WB_BLUE_GAIN_MAX                                0xff
#define WB_BLUE_GAIN_DELTA                              0x1

#define AE_CONTROL_SPEED_MIN                            0x8
#define AE_CONTROL_SPEED_MAX                            0xff
#define AE_CONTROL_SPEED_DELTA                          0x1

#define AE_SHUTTER_SPEED_MIN                            0x0
#define AE_SHUTTER_SPEED_MAX                            0xa
#define AE_SHUTTER_SPEED_DELTA                          0x1

#define AE_AGC_MIN                                      0x0
#define AE_AGC_MAX                                      0x3f 
#define AE_AGC_DELTA                                    0x1

/*
 * Following are default values
 * These values may change during runtime !
 */
extern LONG Brightness_Default;
extern LONG Contrast_Default;
extern LONG Gamma_Default;
extern LONG ColorEnable_Default;
extern LONG BackLight_Compensation_Default;

extern LONG WB_Mode_Default;
extern LONG WB_Speed_Default;
extern LONG WB_Delay_Default;
extern LONG WB_Red_Gain_Default;
extern LONG WB_Blue_Gain_Default;

extern LONG AE_Control_Speed_Default;
extern LONG AE_Flickerless_Default;
extern LONG AE_Shutter_Mode_Default;
extern LONG AE_Shutter_Speed_Default;
extern LONG AE_AGC_Mode_Default;
extern LONG AE_AGC_Default;

extern LONG Framerate_Default;
extern LONG VideoFormat_Default;
extern LONG VideoCompression_Default;
extern LONG SensorType_Default;

/*
 * Complete property table for ProcAmp and Philips
 * Custom properties
 */
extern const KSPROPERTY_SET AdapterPropertyTable[];

/*
 * Number of propertysets in the table
 */
extern const NUMBER_OF_ADAPTER_PROPERTY_SETS;

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpobj.h ===
#ifndef __MPRPOBJ_H__
#define __MPRPOBJ_H__

/*++

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpobj.c

Abstract:     Property handling module

Author:       Michael Verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5
Nov. 30, 98 PID, VID and pushbutton flag added as custom properties

--*/	

/*
 * This file defines custom properties for the 
 * camera. These properties are additional to the 
 * property sets VideoProcAmp and CameraControl as 
 * defined in ksmedia.h
 *
 * The set of properties that is currently supported 
 * by the minidriver is a subset of the properties 
 * defined in the CRS (VGAUSB13.DOC) 
 *
 * Note 1: Most of the ranges in the table(s) above
 * follow from the SSI Lionsoft Philips Desktop Video 
 * Camera
 * 
 * Note 2: The Pan and Tilt properties (in SQ-CIF) are 
 * part of PROPSETID_VIDCAP_CAMERACONTROL. These 
 * properties must be added at a later stage.
 *
 * Note 3: Color Saturation is part of 
 * PROPSETID_VIDCAP_VIDEOPROCAMP. This must be added 
 * at a later stage.
 *
 *-------------------------------------------------------
 * Properties defined in PROPSETID_VIDCAP_VIDEOPROCAMP
 *
 * PROPERTY					RANGE			ACTIVE STATE
 *
 * Contrast					-32..31			Always
 *
 * Brightness				?? 0..31		Always
 *
 * Back_Light_Compensation	0 = Off			Always
 *							1 = On
 *
 * Color Enable				0 = Off			Always
 *							1 = On
 *
 * Gamma					0..100			Always
 *
 *-------------------------------------------------------
 * Properties defined in PROPSETID_PHILIPS_CUSTOM_PROP
 *
 * PROPERTY					RANGE			ACTIVE STATE
 *
 * White Balance			0 = Indoor |	Always
 *							1 = Outdoor |
 *							2 = FL |
 *							3 = Auto |
 *							4 = Manual
 *
 * White Balance Speed		1..32			In WB_Auto
 *
 * White Balance Delay		1..63			In WB_Auto
 *
 * White Balance Red Gain	0..255			In WB_Manual
 *
 * White Balance Blue_Gain	0..255			In WB_Manual
 *
 * Auto exposure			8..255
 * speed control			
 *
 * Shutterspeed				0 = 1/25,		In Shutter Fixed
 *							1 = 1/33, 
 *							2 = 1/50, 
 *							3 = 1/100, 
 *							4 = 1/250,
 *							5 = 1/500,
 *							6 = 1/1000
 *							7 = 1/1500
 *							8 = 1/2500
 *							9 = 1/5000
 *							a = 1/10000
 *
 * Shutter Mode 			0				Auto Mode
 *							0xff			Fixed Mode
 *
 * Shutter Status			0				Smaller
 *							1				Equal
 *							2				Greater
 *
 * AGC Mode					0				Auto Mode
 *							0xff			Fixed Mode
 *
 * AGC Speed				0..0x9f			In AGC Mode Auto
 *
 * Framerate				ff = VGA,		still image for VGA
 *							1 = 3.75		CIF
 *							2 = 5,			Always
 *							3 = 7,5			Always
 *							4 = 10,			Always
 *							5 = 12,			Not for VGA
 *							6 = 15,			Always
 *							7 = 20,			Q-CIF/SQ-CIF
 *							8 = 24			Q-CIF/SQ-CIF
 *
 * Framerate supported		returns a long representing 
 *							the currently available 
 *							framerates
 *							b0			VGA
 *							b1			3_75
 *							b2			5
 *							b3			7.5
 *							b4			10
 *							b5			12
 *							b6			15
 *							b7			20
 *							b8			24
 *							b9...b31	not used
 *
 * Video format				3 = SQ-CIF		Always			
 *							2 = Q-CIF
 *							1 = CIF
 *							4 = VGA
 *
 * Exposure Control			0 = Auto		Always			
 *							ff= Shutter Fixed
 *
 *
 */

#include "windef.h"
#include "mmsystem.h"
#include "ks.h"

// Whitebalance mode values 
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_INDOOR			0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_OUTDOOR			1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_TL				2
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL			3
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO				4

// Auto Exposure shutter mode values 
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO		0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED	0xff

// Auto Exposure agc mode values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO			0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED		0xff

// Auto Exposure flickerless values 
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_ON		0xff
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_OFF		0x0

// Auto Exposure shutterspeed values (1/xx s) 
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_25		0x0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_33		0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_50		0x2
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_100		0x3
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_250		0x4
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_500		0x5
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_1000	0x6
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_1500	0x7
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_2500	0x8
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_5000	0x9
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED_10000	0xa

// Auto Exposure shutterspeed status values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS_SMALLER	0x0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS_EQUAL		0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS_GREATER	0x2

// Framerate values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_VGA			0xff
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_375			0x4
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_5  			0x5
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75				0x8
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10				0xa
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_12				0xc
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_15				0xf
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_20				0x14
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_24				0x18

// Video format values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT_CIF			0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT_QCIF			0x2
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT_SQCIF		0x3
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT_VGA			0x4

// Video compression values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION_UNCOMPRESSED 0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION_COMPRESSED3X 0x3
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION_COMPRESSED4X 0x4

// Sensortype values
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE_PAL_MR		0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE_VGA			0x0

// Commands for camera default
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_USER	0x0
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_SAVE_USER		0x1
#define KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_FACTORY	0x2

// define the GUID of the custom propertyset
#define STATIC_PROPSETID_PHILIPS_CUSTOM_PROP \
	0xb5ca8702, 0xc487, 0x11d1, 0xb3, 0xd, 0x0, 0x60, 0x97, 0xd1, 0xcd, 0x79
DEFINE_GUIDEX(PROPSETID_PHILIPS_CUSTOM_PROP);

// define property id's for the custom property set
typedef enum {
	KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE,		
	KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED,	
	KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_DELAY,		
	KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN,

	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC,

	KSPROPERTY_PHILIPS_CUSTOM_PROP_DRIVERVERSION,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATES_SUPPORTED,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_RELEASE_NUMBER,
    KSPROPERTY_PHILIPS_CUSTOM_PROP_PUSHBUTTON_FLAG,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_VENDOR_ID,
	KSPROPERTY_PHILIPS_CUSTOM_PROP_PRODUCT_ID
} KSPROPERTY_PHILIPS_CUSTOM_PROP;


// define a generic structure which will be used to pass
// the properties Currently, this is the same as for 
// KSPROPERTY_PROCAMP_S.
//
// Note: There are currently no 
// KSPROPERTY_PHILIPS_CUSTOM_PROP_FLAGS defined
typedef struct {
    KSPROPERTY Property;
    ULONG  Instance;                    
    LONG   Value;			// Value to set or get
    ULONG  Flags;			// KSPROPERTY_PHILIPS_CUSTOM_PROP_FLAGS_
    ULONG  Capabilities;	// KSPROPERTY_PHILIPS_CUSTOM_PROP_FLAGS_
} KSPROPERTY_PHILIPS_CUSTOM_PROP_S, *PKSPROPERTY_PHILIPS_CUSTOM_PROP_S;


#endif	/* __MPRPOBJ_H__ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mssidef.h ===
#ifndef __MSSIDEF_H__
#define __MSSIDEF_H__

/**
Copyright (c) 1997 Philips  CE - I&C

Module Name 	: vendorcm.h

Creation Date	: 12 September 1997

First Author	: Paul Oosterhof

Product			: nala camera

Description		: This include file contains the definition of the
                  vendor specific command values.
                  The values are derived from the SSI: AR18-97-D051. 
				  It has been placed in a separate file to increase 
				  the readability of philpcam.c, which includes this file.

History			:

------------+---------------+---------------------------------------------------
Date	    | Author		| reason
------------+---------------+---------------------------------------------------
sept.22, 98 | Paul          | optimized for NT5
------------+---------------+---------------------------------------------------
            |               |
------------+---------------+---------------------------------------------------
            |               |
------------+---------------+---------------------------------------------------
**/



/*
The vendor specific control commands are defined by the USB spec as follows:

+---------------+----------+--------+--------+---------++------------+
| bmRequestType | bRequest | wValue | wIndex | wLength || Data-field | 
+---------------+----------+--------+--------+---------++------------+

bmRequestType: D7 defines transfer direction: 0 = Host to device; 1 = Device to host.
        	   D6..5:  2 equals vendor specific 
			   D4..0:  Recipient ; 2 = endpoint
bRequest	 : Specifies requests, see define table
wValue		 : Content of this field depends on the request, see define table
wIndex		 : Content of this field depends on the request, see define table
wLength		 : Length of the datafield transferred in the second phase 
               of the control transfer
data-field	 : Depends on the request.




    


NTSTATUS
USBCAMD_ControlVendorCommand(
    IN PVOID DeviceContext,
    IN UCHAR Request,
    IN USHORT Value,
    IN USHORT Index,
    IN PVOID Buffer,
    IN OUT PULONG BufferLength,
    IN BOOLEAN GetData,
    IN PCOMMAND_COMPLETE_FUNCTION CommandComplete,
    IN PVOID CommandContext
    );    


Returns:
    Returns NTSTATUS code from command of STATUS_PENDING if command is deferred.


DeviceContext: Minidriver device context
Request      : value for the bRequest field in the USB vendor command
               This field contains the Vendor-Specific Video Request codes.
Value        : value for the wValue field in the vendor command
               This field contains the formatter information belonging to
			   the previous defined request code.
Index        : value for the wIndex field in the vendor command
               This field contains the endpoint or interface number to which
			   the command or request is addressed.
Buffer       : data buffer if the command has data, may be NULL
BufferLength : Pointer to bufferlength of buffer in bytes, may be NULL if
               Buffer is NULL.
               Will be filled with number of bytes returned if getData == TRUE.
GetData      : Indicates that the data is to be transferred from device to host
CommandComplete: function called when command is completed.
CommandContext:  context passed to CommandComplete function

*/


#define SEND                 FALSE
#define GET	                 TRUE

#define SELECT_INTERFACE	 1
#define SELECT_ENDPOINT		 2

#define AC_INTERFACE         0
#define AS_INTERFACE         1
#define VC_INTERFACE         2
#define VS_INTERFACE         3
#define HID_INTERFACE        4
#define FACTORY_INTERFACE 0xFF

#define AUDIO_ENDPOINT 5
#define VIDEO_ENDPOINT 4
#define INTERRUPT_ENDPOINT 2

// The following defines will be used to fill the bRequest field of the vendor 
// specific commands.

#define REQUEST_UNDEFINED        0X00
#define SET_LUM_CTL			     0x01
#define GET_LUM_CTL			     0x02
#define SET_CHROM_CTL		     0x03
#define GET_CHROM_CTL		     0x04
#define SET_STATUS_CTL		     0x05
#define GET_STATUS_CTL		     0x06
#define SET_EP_STREAM_CTL	     0x07
#define GET_EP_STREAM_CTL	     0x08
#define SET_FACTORY_CTL		     0x09
#define GET_FACTORY_CTL	         0x0A


// The following defines will be used to fill the  Value field of the vendor 
// specific commands.


// Luminance formatters

#define LUM_UNDEFINED			 0x0000
#define AGC_MODE				 0x2000
#define	PRESET_AGC				 0x2100
#define	SHUTTER_MODE			 0x2200
#define	PRESET_SHUTTER			 0x2300
#define	PRESET_CONTOUR			 0x2400
#define	AUTO_CONTOUR			 0x2500
#define	BACK_LIGHT_COMPENSATION	 0x2600
#define	CONTRAST				 0x2700
#define	DYNAMIC_NOISE_CONTROL	 0x2800
#define	FLICKERLESS				 0x2900
#define BRIGHTNESS				 0x2B00
#define	GAMMA					 0x2C00
#define AE_CONTROL_SPEED		 0x2A00

// Chrominance Formatters

#define CHROM_UNDEFINED			 0x0000
#define	WB_MODE					 0x1000
#define	AWB_CONTROL_SPEED		 0x1100
#define	AWB_CONTROL_DELAY		 0x1200
#define	RED_GAIN				 0x1300
#define	BLUE_GAIN				 0x1400
#define	COLOR_MODE				 0x1500
#define	SATURATION			     0x1700 //  ????? No number 0x16


// Status Formatters

#define	STATUS_UNDEFINED		 0x0000
#define	SAVE_USER_DEFAULTS		 0x0200
#define	RESTORE_USER_DEFAULTS	 0x0300
#define	RESTORE_FACTORY_DEFAULTS 0x0400
#define	EEPROM_READ_PTR			 0x0500
#define	VCMDSP_READ_PTR			 0x0600 // ????? No number 0x07
#define	SNAPSHOT_MODE			 0x0800
#define	AE_WB_VARIABLES			 0x0900
#define	PAN						 0x0A00
#define	TILT					 0x0B00
#define	SENSOR_TYPE				 0x0C00
#define FACTORY_MODE			 0x3000
#define RELEASE_NUMBER			 0x0D00

#define PAL_MR_SENSOR        1
#define VGA_SENSOR           0


// Endpoint Stream Control Formatters

#define VIDEO_OUTPUT_CONTROL_FORMATTER 0x0100

// endpoint stream data definitions
#define bFRAMERATE               0X00
#define bCOMPRESSIONFACT         0X01
#define bVIDEOOUTPUTTYPE         0X02

#define FRAMERATE_375            0x04
#define	FRAMERATE_5	             0x05
#define	FRAMERATE_75             0x08
#define	FRAMERATE_10             0x0A
#define	FRAMERATE_12             0x0C
#define	FRAMERATE_15             0x0F
#define	FRAMERATE_20             0x14
#define	FRAMERATE_24             0x18
#define	FRAMERATE_VGA            0xFF

#define	UNCOMPRESSED             0x01
#define	COMPRESSED_3             0x03
#define	COMPRESSED_4             0x04

#define CIF_FORMAT	             0x01
#define	QCIF_FORMAT	             0x02
#define	SQCIF_FORMAT             0x03
#define	VGA_FORMAT			     0x04


// Factory Control Formatters 



// The following defines will be used to fill the wIndex field of the vendor 
// specific commands.

#define INDEX_UNDEFINED          0X00#

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mstreams.h ===
#ifndef __MSTREAMS_H__
#define __MSTREAMS_H__
/**
Copyright (c) 1997 1998 Philips  CE  I&C

Module Name 	: phvcm_streamformats

Creation Date	: 13 August 1997

First Author	: Paul Oosterhof

Product			: nala camera

Description		: This include file contains the definition of the
                  streamformats. 
				  It has been placed in a separate file to increase 
				  the readability of philpcam.c, which includes this file.

History			:

--------+---------------+---------------------------------------------------
Date	| Author		| reason
--------+---------------+---------------------------------------------------
29-09-97|P.J.O.         |equal streams with diferent framerates can be combined
--------+---------------+---------------------------------------------------
11-03-98|P.J.O.         |PCF3 & prototype stream deleted
--------+---------------+---------------------------------------------------
14-04-98|P.J.O.         |PCFx Deleted and I420/IYUV added
--------+---------------+---------------------------------------------------
01-07-98|P.J.O.         |QQCIF/SIF/QSIF/SQSIF/SSIF added 
--------+---------------+---------------------------------------------------
22-09-98|P.J.O.         |Optimized for NT5
--------+---------------+---------------------------------------------------
30-12-98|P.J.O.         |SCIF (240x176) added
--------+---------------+---------------------------------------------------

	Here defined formats:
												       \
#define STREAMFORMAT_CIF_I420 													   \
#define STREAMFORMAT_QCIF_I420													       \
#define STREAMFORMAT_SQCIF_I420												       \
#define STREAMFORMAT_VGA_I420												           \
#define STREAMFORMAT_QQCIF_I420	( 88x 72)  CROPPED FROM QCIF  (176X144)
#define STREAMFORMAT_SIF_I420   (320x240)  CROPPED FROM CIF   (352X288)
#define STREAMFORMAT_QSIF_I420  (160X120)  CROPPED FROM QCIF  (176X144)
#define STREAMFORMAT_SQSIF_I420	( 80X 60)  CROPPED FROM SQCIF (128X 96)
#define STREAMFORMAT_SSIF_I420  (240x180)  CROPPED FROM CIF   (352X288)
#define STREAMFORMAT_SCIF_I420  (240x176)  CROPPED FROM CIF   (352X288)

**/

#define FCC_FORMAT_I420 mmioFOURCC('I','4','2','0')

#define	BIBITCOUNT_PRODUCT 12             	
#define	BPPXL 12    // bits per pixel            	

#define FORMAT_MEDIASUBTYPE_I420 {0x30323449, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71}

#define FRAMERATE24_INTV    416667  // 100 NS UNITS
#define FRAMERATE20_INTV    500000  // 100 NS UNITS
#define FRAMERATE15_INTV    666667  // 100 NS UNITS
#define FRAMERATE12_INTV    833333
#define FRAMERATE125_INTV   800000
#define FRAMERATE10_INTV   1000000
#define FRAMERATE75_INTV   1333333
#define FRAMERATE5_INTV    2000000
#define FRAMERATE375_INTV  2666667
#define FRAMERATE05_INTV  20000000		// 2 SEC 



/****************************************************************************** 
--------+---------+---------+---------+---------------+
Format  |Framerate|Compressd|Bitstream|Application	  |
--------+---------+---------+---------+---------------+
QCIF    |24       |    0    | 7.2     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
QCIF    |20       |    0    | 6.2     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
QCIF    |15       |    0    | 5.0     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
QCIF    |12       |    0    | 4.0     |PAL            |  
--------+---------+---------+---------+---------------+
QCIF    |10       |    0    | 3.3     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
QCIF    |7.5      |    0    | 2.5     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
QCIF    | 5       |    0    | 1.25    |PAL + VGA      |  
*/

																		   
#define STREAMFORMAT_QCIF_I420													       \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (QCIF_X * QCIF_Y * BIBITCOUNT_PRODUCT)/8, /* SampleSize, 12 bits per pixel */  \
    0,                                    /* Reserved	  */      	    		   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,       /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,			  /* MEDIASUBTYPE_I420 (SubFormat) */      \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard */                                    \
	QCIF_X,QCIF_Y,  /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	QCIF_X,QCIF_Y,  /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	QCIF_X,QCIF_Y,  /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	QCIF_X,QCIF_Y,  /* MinOutputSize, smallest bitmap stream can produce */		   \
	QCIF_X,QCIF_Y,  /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,              /* StretchTapsX */                                             \
    0,              /* StretchTapsY */                                             \
    0,              /* ShrinkTapsX  */                                             \
    0,              /* ShrinkTapsY  */                                             \
	FRAMERATE24_INTV,         /* MinFrameInterval, 100 nS units  (24 Hz)   */	   \
	FRAMERATE5_INTV,          /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL * 5 * QCIF_X * QCIF_Y,  /* MinBitsPerSecond   3 ??? JOHN			  */	   \
	BPPXL * 24 * QCIF_X * QCIF_Y  /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource    */	          		   \
	0,0,0,0,                            /* RECT  rcTarget   */	         		   \
	QCIF_X * QCIF_Y * BPPXL * 24,           /* DWORD dwBitRate 	*/         			   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE24_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */		    	   \
	QCIF_X,                             /* LONG       biWidth   */     	           \
	QCIF_Y,                             /* LONG       biHeight  */     		       \
	1,                                  /* WORD       biPlanes  */		       	   \
	BIBITCOUNT_PRODUCT, 				/* WORD       biBitCount */		       	   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */	       	   \
	(QCIF_X * QCIF_Y * BPPXL ) /8,      /* DWORD      biSizeImage   */	       	   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   

/****************************************************************************** 
--------+---------+---------+---------+---------------+
Format  |Framerate|Compressd|Bitstream|Application	  |
--------+---------+---------+---------+---------------+
CIF     |15       |    0    |     Mb/s|VGA+Pal        | 
--------+---------+---------+---------+---------------+
CIF     |12       |    0    |         |PAL            |  
--------+---------+---------+---------+---------------+
CIF     |10       |    0    |         |PAL + VGA      |  
--------+---------+---------+---------+---------------+
CIF     |7.5      |    0    |         |PAL + VGA      |  
--------+---------+---------+---------+---------------+
CIF     |5        |    0    |         |PAL + VGA      |  
--------+---------+---------+---------+---------------+
CIF     |3.75     |    0    |         |PAL + VGA      |  
*/


																			   

#define STREAMFORMAT_CIF_I420 													   \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),             /* ULONG   FormatSize*/			   \
	0,										 /* ULONG   Flags  */				   \
    (CIF_X * CIF_Y * BPPXL )/8,              /* SampleSize, 12 bits per pixel */   \
    0,                                       /* Reserved	  */			       \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,          /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,				 /*MEDIASUBTYPE_I420 (SubFormat) */	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	                                	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard   */                                  \
	CIF_X,CIF_Y,    /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	CIF_X,CIF_Y,    /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	CIF_X,CIF_Y,    /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	CIF_X,CIF_Y,    /* MinOutputSize, smallest bitmap stream can produce */		   \
	CIF_X,CIF_Y,    /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,                      /* StretchTapsX */                                     \
    0,                      /* StretchTapsY */                                     \
    0,                      /* ShrinkTapsX  */                                     \
    0,                      /* ShrinkTapsY  */                                     \
	FRAMERATE15_INTV,       /* MinFrameInterval, 100 nS units  (15 Hz)   */	   \
	FRAMERATE375_INTV,         /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL *  3 * CIF_X * CIF_Y,  /* MinBitsPerSecond     			  */	   \
	BPPXL * 15 * CIF_X * CIF_Y   /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource  	  */    			   \
	0,0,0,0,                            /* RECT  rcTarget  	 */		    		   \
	CIF_X * CIF_Y * BPPXL * 15,             /* DWORD dwBitRate 	 */			    	   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE15_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */			       \
	CIF_X,                              /* LONG       biWidth   */		           \
	CIF_Y,                              /* LONG       biHeight  */			       \
	1,                                  /* WORD       biPlanes  */			       \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */			       \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */		       \
	(CIF_X * CIF_Y * BPPXL )/8,         /* DWORD      biSizeImage   */		   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   



/****************************************************************************** 
--------+---------+---------+---------+---------------+
Format  |Framerate|Compressd|Bitstream|Application	  |
--------+---------+---------+---------+---------------+
SQCIF   |24       |    0    | 7.2     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
SQCIF   |20       |    0    | 6.0     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
SQCIF   |15       |    0    | 5.0     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
SQCIF   |12       |    0    | 4.0     |PAL            |  
--------+---------+---------+---------+---------------+
SQCIF   |10       |    0    | 3.3     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
SQCIF   |7.5      |    0    | 2.5     |PAL + VGA      |  
--------+---------+---------+---------+---------------+
SQCIF   |5        |    0    | 1.25    |PAL + VGA      |  
*/


																		   
																			   
#define STREAMFORMAT_SQCIF_I420												       \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (SQCIF_X * SQCIF_Y * BIBITCOUNT_PRODUCT)/8, /* SampleSize, 12 bits per pixel */	   \
    0,                                    /* Reserved	  */        			   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,       /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,			  /* MEDIASUBTYPE_I420 (SubFormat) */      \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /*VideoStandard   */                                   \
	SQCIF_X,SQCIF_Y,/* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	SQCIF_X,SQCIF_Y,/* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	SQCIF_X,SQCIF_Y,/* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	SQCIF_X,SQCIF_Y,/* MinOutputSize, smallest bitmap stream can produce */		   \
	SQCIF_X,SQCIF_Y,/* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,              /* StretchTapsX */                                             \
    0,              /* StretchTapsY */                                             \
    0,              /* ShrinkTapsX  */                                             \
    0,              /* ShrinkTapsY  */                                             \
	FRAMERATE24_INTV,            /* MinFrameInterval, 100 nS units	     */    	   \
	FRAMERATE5_INTV ,            /* MaxFrameInterval, 100 nS units 	 */      	   \
	BPPXL *  5 * SQCIF_X * SQCIF_Y,  /* MinBitsPerSecond   3 ??? JOHN		  */	   \
	BPPXL * 24 * SQCIF_X * SQCIF_Y   /* MaxBitsPerSecond 					 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource    */	        		   \
	0,0,0,0,                            /* RECT  rcTarget  	 */	        		   \
	SQCIF_X * SQCIF_Y * BPPXL * 24,        /* DWORD dwBitRate 	 */	          		   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE24_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */     			   \
	SQCIF_X,                            /* LONG       biWidth   */	    	       \
	SQCIF_Y,                            /* LONG       biHeight  */	     		   \
	1,                                  /* WORD       biPlanes  */     			   \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */	      		   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */     		   \
	(SQCIF_X * SQCIF_Y * BPPXL )/8,     /* DWORD      biSizeImage   */	    	   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   

#define STREAMFORMAT_QQCIF_I420												       \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (QQCIF_X * QQCIF_Y * BIBITCOUNT_PRODUCT)/8, /* SampleSize, 12 bits per pixel */	   \
    0,                                    /* Reserved	  */        			   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,       /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,			  /* MEDIASUBTYPE_I420 (SubFormat) */      \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /*VideoStandard   */                                   \
	QQCIF_X,QQCIF_Y,/* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	QQCIF_X,QQCIF_Y,/* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	QQCIF_X,QQCIF_Y,/* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	QQCIF_X,QQCIF_Y,/* MinOutputSize, smallest bitmap stream can produce */		   \
	QQCIF_X,QQCIF_Y,/* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,              /* StretchTapsX */                                             \
    0,              /* StretchTapsY */                                             \
    0,              /* ShrinkTapsX  */                                             \
    0,              /* ShrinkTapsY  */                                             \
	FRAMERATE24_INTV,            /* MinFrameInterval, 100 nS units	     */    	   \
	FRAMERATE5_INTV ,            /* MaxFrameInterval, 100 nS units 	 */      	   \
	BPPXL *  5 * QQCIF_X * QQCIF_Y,  /* MinBitsPerSecond   3 ??? JOHN		  */	   \
	BPPXL * 24 * QQCIF_X * QQCIF_Y   /* MaxBitsPerSecond 					 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource    */	        		   \
	0,0,0,0,                            /* RECT  rcTarget  	 */	        		   \
	QQCIF_X * QQCIF_Y * BPPXL * 24,        /* DWORD dwBitRate 	 */	          		   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE24_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */     			   \
	QQCIF_X,                            /* LONG       biWidth   */	    	       \
	QQCIF_Y,                            /* LONG       biHeight  */	     		   \
	1,                                  /* WORD       biPlanes  */     			   \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */	      		   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */     		   \
	(QQCIF_X * QQCIF_Y * BPPXL )/8,     /* DWORD      biSizeImage   */	    	   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   

																			   
																		   

/****************************************************************************** 
--------+---------+---------+---------+---------------+
Format  |Framerate|Compressd|Bitstream|Application	  |
--------+---------+---------+---------+---------------+
VGA     |1        |    0    | 4.0     |VGA            |  
*/




#define STREAMFORMAT_VGA_I420												           \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (VGA_X * VGA_Y * BIBITCOUNT_PRODUCT)/8,  /* SampleSize, 12 bits per pixel */   \
    0,                                       /* Reserved	  */     			   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,          /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,				 /* MEDIASUBTYPE_I420 (SubFormat) */   \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,                 /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,                 /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_STILL, /* StreamDescriptionFlags		   */				       \
  0,                    /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /*VideoStandard   */                                   \
	VGA_X,VGA_Y,    /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	VGA_X,VGA_Y,/* MinCroppingSize, smallest rcSrc cropping rect allowed*/	       \
	VGA_X,VGA_Y,/* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	       \
	1,          /* CropGranularityX, granularity of cropping size */               \
	1,          /* CropGranularityY	   */									       \
	1,          /* CropAlignX, alignment of cropping rect  */	       			   \
	1,          /* CropAlignY 							*/	     				   \
	VGA_X,VGA_Y,/* MinOutputSize, smallest bitmap stream can produce */		       \
	VGA_X,VGA_Y,/* MaxOutputSize, largest  bitmap stream can produce */		       \
	1,          /* OutputGranularityX, granularity of output bitmap size */	       \
	1,          /* OutputGranularityY 								   */    	   \
    0,          /* StretchTapsX */                                                 \
    0,          /* StretchTapsY */                                                 \
    0,          /* ShrinkTapsX  */                                                 \
    0,          /* ShrinkTapsY  */                                                 \
	FRAMERATE05_INTV,         /* MinFrameInterval, 100 nS units			   */	   \
	FRAMERATE05_INTV,         /* MaxFrameInterval, 100 nS units			  */	   \
    BPPXL * 1 * VGA_X * VGA_Y,    /* MinBitsPerSecond   3 ??? JOHN			  */	   \
	BPPXL * 1 * VGA_X * VGA_Y     /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource  	  */       			   \
	0,0,0,0,                            /* RECT  rcTarget  	 */	     			   \
	VGA_X * VGA_Y * BPPXL * 1,              /* DWORD dwBitRate 	 */	     			   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE05_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */	    		   \
	VGA_X,                              /* LONG       biWidth   */	     	       \
	VGA_Y,                              /* LONG       biHeight  */     			   \
	1,                                  /* WORD       biPlanes  */	     		   \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */	     		   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */	     	   \
	(VGA_X * VGA_Y * BIBITCOUNT_PRODUCT)/8, /* DWORD      biSizeImage   */     		   \
	0,                                  /* LONG       biXPelsPerMeter */   		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
}



#define STREAMFORMAT_SIF_I420 													   \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),             /* ULONG   FormatSize*/			   \
	0,										 /* ULONG   Flags  */				   \
    (SIF_X * SIF_Y * BPPXL )/8,              /* SampleSize, 12 bits per pixel */   \
    0,                                       /* Reserved	  */			       \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,          /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,				 /*MEDIASUBTYPE_I420 (SubFormat) */	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	                                	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard   */                                  \
	SIF_X,SIF_Y,    /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	SIF_X,SIF_Y,    /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	SIF_X,SIF_Y,    /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	SIF_X,SIF_Y,    /* MinOutputSize, smallest bitmap stream can produce */		   \
	SIF_X,SIF_Y,    /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,                      /* StretchTapsX */                                     \
    0,                      /* StretchTapsY */                                     \
    0,                      /* ShrinkTapsX  */                                     \
    0,                      /* ShrinkTapsY  */                                     \
	FRAMERATE15_INTV,       /* MinFrameInterval, 100 nS units  (15 Hz)   */	   \
	FRAMERATE375_INTV,         /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL *  3 * SIF_X * SIF_Y,  /* MinBitsPerSecond     			  */	   \
	BPPXL * 15 * SIF_X * SIF_Y   /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource  	  */    			   \
	0,0,0,0,                            /* RECT  rcTarget  	 */		    		   \
	SIF_X * SIF_Y * BPPXL * 15,             /* DWORD dwBitRate 	 */			    	   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE15_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */			       \
	SIF_X,                              /* LONG       biWidth   */		           \
	SIF_Y,                              /* LONG       biHeight  */			       \
	1,                                  /* WORD       biPlanes  */			       \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */			       \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */		       \
	(SIF_X * SIF_Y * BPPXL )/8,         /* DWORD      biSizeImage   */		   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
}

#define STREAMFORMAT_SSIF_I420 													   \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),             /* ULONG   FormatSize*/			   \
	0,										 /* ULONG   Flags  */				   \
    (SSIF_X * SSIF_Y * BPPXL )/8,              /* SampleSize, 12 bits per pixel */   \
    0,                                       /* Reserved	  */			       \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,          /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,				 /*MEDIASUBTYPE_I420 (SubFormat) */	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	                                	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard   */                                  \
	SSIF_X,SSIF_Y,    /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	SSIF_X,SSIF_Y,    /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	SSIF_X,SSIF_Y,    /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	SSIF_X,SSIF_Y,    /* MinOutputSize, smallest bitmap stream can produce */		   \
	SSIF_X,SSIF_Y,    /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,                      /* StretchTapsX */                                     \
    0,                      /* StretchTapsY */                                     \
    0,                      /* ShrinkTapsX  */                                     \
    0,                      /* ShrinkTapsY  */                                     \
	FRAMERATE15_INTV,       /* MinFrameInterval, 100 nS units  (15 Hz)   */	   \
	FRAMERATE375_INTV,         /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL *  3 * SSIF_X * SSIF_Y,  /* MinBitsPerSecond     			  */	   \
	BPPXL * 15 * SSIF_X * SSIF_Y   /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource  	  */    			   \
	0,0,0,0,                            /* RECT  rcTarget  	 */		    		   \
	SSIF_X * SSIF_Y * BPPXL * 15,             /* DWORD dwBitRate 	 */			    	   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE15_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */			       \
	SSIF_X,                              /* LONG       biWidth   */		           \
	SSIF_Y,                              /* LONG       biHeight  */			       \
	1,                                  /* WORD       biPlanes  */			       \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */			       \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */		       \
	(SSIF_X * SSIF_Y * BPPXL )/8,         /* DWORD      biSizeImage   */		   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
}
#define STREAMFORMAT_SCIF_I420 													   \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),             /* ULONG   FormatSize*/			   \
	0,										 /* ULONG   Flags  */				   \
    (SCIF_X * SCIF_Y * BPPXL )/8,              /* SampleSize, 12 bits per pixel */   \
    0,                                       /* Reserved	  */			       \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,          /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,				 /*MEDIASUBTYPE_I420 (SubFormat) */	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	                                	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard   */                                  \
	SCIF_X,SCIF_Y,    /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	SCIF_X,SCIF_Y,    /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	SCIF_X,SCIF_Y,    /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	SCIF_X,SCIF_Y,    /* MinOutputSize, smallest bitmap stream can produce */		   \
	SCIF_X,SCIF_Y,    /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,                      /* StretchTapsX */                                     \
    0,                      /* StretchTapsY */                                     \
    0,                      /* ShrinkTapsX  */                                     \
    0,                      /* ShrinkTapsY  */                                     \
	FRAMERATE15_INTV,       /* MinFrameInterval, 100 nS units  (15 Hz)   */	   \
	FRAMERATE375_INTV,         /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL *  3 * SCIF_X * SCIF_Y,  /* MinBitsPerSecond     			  */	   \
	BPPXL * 15 * SCIF_X * SCIF_Y   /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource  	  */    			   \
	0,0,0,0,                            /* RECT  rcTarget  	 */		    		   \
	SCIF_X * SCIF_Y * BPPXL * 15,             /* DWORD dwBitRate 	 */			    	   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE15_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */			       \
	SCIF_X,                              /* LONG       biWidth   */		           \
	SCIF_Y,                              /* LONG       biHeight  */			       \
	1,                                  /* WORD       biPlanes  */			       \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */			       \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */		       \
	(SCIF_X * SCIF_Y * BPPXL )/8,         /* DWORD      biSizeImage   */		   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
}


#define STREAMFORMAT_QSIF_I420													       \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (QSIF_X * QSIF_Y * BIBITCOUNT_PRODUCT)/8, /* SampleSize, 12 bits per pixel */  \
    0,                                    /* Reserved	  */      	    		   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,       /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,			  /* MEDIASUBTYPE_I420 (SubFormat) */      \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /* VideoStandard */                                    \
	QSIF_X,QSIF_Y,  /* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	QSIF_X,QSIF_Y,  /* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	QSIF_X,QSIF_Y,  /* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	QSIF_X,QSIF_Y,  /* MinOutputSize, smallest bitmap stream can produce */		   \
	QSIF_X,QSIF_Y,  /* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,              /* StretchTapsX */                                             \
    0,              /* StretchTapsY */                                             \
    0,              /* ShrinkTapsX  */                                             \
    0,              /* ShrinkTapsY  */                                             \
	FRAMERATE24_INTV,         /* MinFrameInterval, 100 nS units  (24 Hz)   */	   \
	FRAMERATE5_INTV,          /* MaxFrameInterval, 100 nS units			  */	   \
	BPPXL * 5 * QSIF_X * QSIF_Y,  /* MinBitsPerSecond   3 ??? JOHN			  */	   \
	BPPXL * 24 * QSIF_X * QSIF_Y  /* MaxBitsPerSecond 						 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource    */	          		   \
	0,0,0,0,                            /* RECT  rcTarget   */	         		   \
	QSIF_X * QSIF_Y * BPPXL * 24,           /* DWORD dwBitRate 	*/         			   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE24_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */		    	   \
	QSIF_X,                             /* LONG       biWidth   */     	           \
	QSIF_Y,                             /* LONG       biHeight  */     		       \
	1,                                  /* WORD       biPlanes  */		       	   \
	BIBITCOUNT_PRODUCT, 				/* WORD       biBitCount */		       	   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */	       	   \
	(QSIF_X * QSIF_Y * BPPXL ) /8,      /* DWORD      biSizeImage   */	       	   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   

#define STREAMFORMAT_SQSIF_I420												       \
{																				   \
  /* KSDATARANGE	 */															   \
  {     																		   \
	sizeof (KS_DATARANGE_VIDEO),												   \
	0,																			   \
    (SQSIF_X * SQSIF_Y * BIBITCOUNT_PRODUCT)/8, /* SampleSize, 12 bits per pixel */	   \
    0,                                    /* Reserved	  */        			   \
	STATIC_KSDATAFORMAT_TYPE_VIDEO,       /*MEDIATYPE_Video (MajorFormat) */	   \
	FORMAT_MEDIASUBTYPE_I420,			  /* MEDIASUBTYPE_I420 (SubFormat) */      \
	STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO	 /*FORMAT_VideoInfo	 (Specifier) */	   \
  },																			   \
                                                                                   \
  TRUE,               /* BOOL,  bFixedSizeSamples (all samples same size?)*/	   \
  TRUE,               /* BOOL,  bTemporalCompression (all I frames?)	*/		   \
  KS_VIDEOSTREAM_CAPTURE,   /* StreamDescriptionFlags		   */				   \
  0,                  /* MemoryAllocationFlags   (KS_VIDEO_ALLOC_*)*/			   \
                                                                                   \
  /* _KS_VIDEO_STREAM_CONFIG_CAPS  									   */	       \
  { 																	     	   \
    STATIC_KSDATAFORMAT_SPECIFIER_VIDEOINFO,                                       \
    KS_AnalogVideo_None,    /*VideoStandard   */                                   \
	SQSIF_X,SQSIF_Y,/* InputSize, (the inherent size of the incoming signal	*/	   \
			        /*             with every digitized pixel unique)	*/		   \
	SQSIF_X,SQSIF_Y,/* MinCroppingSize, smallest rcSrc cropping rect allowed*/	   \
	SQSIF_X,SQSIF_Y,/* MaxCroppingSize, largest  rcSrc cropping rect allowed*/	   \
	1,              /* CropGranularityX, granularity of cropping size */		   \
	1,              /* CropGranularityY	   */									   \
	1,              /* CropAlignX, alignment of cropping rect  */				   \
	1,              /* CropAlignY 							*/					   \
	SQSIF_X,SQSIF_Y,/* MinOutputSize, smallest bitmap stream can produce */		   \
	SQSIF_X,SQSIF_Y,/* MaxOutputSize, largest  bitmap stream can produce */		   \
	1,              /* OutputGranularityX, granularity of output bitmap size */	   \
	1,              /* OutputGranularityY 								   */	   \
    0,              /* StretchTapsX */                                             \
    0,              /* StretchTapsY */                                             \
    0,              /* ShrinkTapsX  */                                             \
    0,              /* ShrinkTapsY  */                                             \
	FRAMERATE24_INTV,            /* MinFrameInterval, 100 nS units	     */    	   \
	FRAMERATE5_INTV ,            /* MaxFrameInterval, 100 nS units 	 */      	   \
	BPPXL *  5 * SQSIF_X * SQSIF_Y,  /* MinBitsPerSecond   3 ??? JOHN		  */	   \
	BPPXL * 24 * SQSIF_X * SQSIF_Y   /* MaxBitsPerSecond 					 */		   \
  }, 																			   \
                                                                                   \
  /* KS_VIDEOINFOHEADER (default format)					   */				   \
  { 																			   \
	0,0,0,0,                            /* RECT  rcSource    */	        		   \
	0,0,0,0,                            /* RECT  rcTarget  	 */	        		   \
	SQSIF_X * SQSIF_Y * BPPXL * 24,        /* DWORD dwBitRate 	 */	          		   \
	0L,                                 /* DWORD dwBitErrorRate   */			   \
	FRAMERATE24_INTV,                   /* REFERENCE_TIME  AvgTimePerFrame  */     \
	sizeof (KS_BITMAPINFOHEADER),       /* DWORD      biSize    */     			   \
	SQSIF_X,                            /* LONG       biWidth   */	    	       \
	SQSIF_Y,                            /* LONG       biHeight  */	     		   \
	1,                                  /* WORD       biPlanes  */     			   \
	BIBITCOUNT_PRODUCT,					/* WORD       biBitCount */	      		   \
	FCC_FORMAT_I420,                    /* DWORD      biCompression */     		   \
	(SQSIF_X * SQSIF_Y * BPPXL )/8,     /* DWORD      biSizeImage   */	    	   \
	0,                                  /* LONG       biXPelsPerMeter */		   \
	0,                                  /* LONG       biYPelsPerMeter */		   \
	0,                                  /* DWORD      biClrUsed 		 */		   \
	0                                   /* DWORD      biClrImportant  */		   \
  }																				   \
} 																			   
																			   
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mwarn.h ===
/*
4214
4201 nonstandard extension using nameless struct/union
4115
4200
4514 unreferenced inline function
**4100 unreferenced formal parameter
4057
*/

#pragma warning(disable:4214 4201 4115 4200 4100 4514 4057)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpftn.h ===
#ifndef __PRPFTN_H__
#define __PRPFTN_H__

/*++

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpftn.h

Abstract:     

Author:       Michael Verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5

--*/	
NTSTATUS
PHILIPSCAM_InitPrpObj(
	PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	);

NTSTATUS
PHILIPSCAM_PassCurrentStreamFormat(
	PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	);

PVOID 
PHILIPSCAM_GetAdapterPropertyTable(
    PULONG NumberOfPropertySets
    );    

NTSTATUS
PHILIPSCAM_GetCameraProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    );

NTSTATUS
PHILIPSCAM_SetCameraProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    );

NTSTATUS
PHILIPSCAM_GetCameraControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK Srb
    );

NTSTATUS
PHILIPSCAM_SetCameraControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK Srb
    );

NTSTATUS
PHILIPSCAM_GetCustomProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    );


NTSTATUS
PHILIPSCAM_SetCustomProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    );

NTSTATUS
PHILIPSCAM_SetFormatFramerate(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	);

NTSTATUS
PHILIPSCAM_GetSensorType(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	);

NTSTATUS
PHILIPSCAM_GetReleaseNumber(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	);

NTSTATUS
PHILIPSCAM_GetFactoryProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    );


NTSTATUS
PHILIPSCAM_SetFactoryProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    );

NTSTATUS
PHILIPSCAM_GetVideoControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    );
NTSTATUS
PHILIPSCAM_SetVideoControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    IN OUT PHW_STREAM_REQUEST_BLOCK pSrb
    );

#endif  /* __PRPFTN_H__ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpobjx.h ===
#ifndef __MPRPOBJEX_H__
#define __MPRPOBJEX_H__
/*++

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpobj.c

Abstract:     factory property definitions

Author:       Michael Verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5

--*/	

#include "windef.h"
#include "mmsystem.h"
#include "ks.h"


// define the GUID of the factory propertyset
#define STATIC_PROPSETID_PHILIPS_FACTORY_PROP \
	0xfcf75730, 0x5b4c, 0x11d1, 0xbd, 0x77, 0x0, 0x60, 0x97, 0xd1, 0xcd, 0x79
DEFINE_GUIDEX(PROPSETID_PHILIPS_FACTORY_PROP);

// define property id's for the custom property set
typedef enum {
	KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_ADDRESS,
	KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_DATA,
	KSPROPERTY_PHILIPS_FACTORY_PROP_FACTORY_MODE
} KSPROPERTY_PHILIPS_FACTORY_PROP;

// define a generic structure which will be used to pass
// register values
// Note: There are currently no 
// KSPROPERTY_PHILIPS_FACTORY_PROP_FLAGS defined
typedef struct {
    KSPROPERTY Property;
    ULONG  Instance;                    
    LONG   Value;			// Value to set or get
    ULONG  Flags;			// KSPROPERTY_PHILIPS_FACTORY_PROP_FLAGS_
    ULONG  Capabilities;	// KSPROPERTY_PHILIPS_FACTORY_PROP_FLAGS_
} KSPROPERTY_PHILIPS_FACTORY_PROP_S, *PKSPROPERTY_PHILIPS_FACTORY_PROP_S;

#endif	/* __MPRPOBJ_H__ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\mprpobj.c ===
/*++

Copyright (c) 1997 1998 PHILIPS  I&C

Module Name:  mprpobj.c

Abstract:     Property handling module

Author:       Michael Verberne

Revision History:

Date        Reason

Sept.22, 98 Optimized for NT5
Nov. 30, 98 PID and VID properties added

--*/	
#include "mwarn.h"
#include "wdm.h"
#include <strmini.h>
#include <ksmedia.h>
#include "usbdi.h"
#include "usbcamdi.h"
#include "mcamdrv.h"
#include "mssidef.h"
#include "mprpobj.h"
#include "mprpobjx.h"
#include "mprpdef.h"
#include "mprpftn.h"

/*
 * defines 
 */
#define WAIT_FOR_COMPLETION 2000		// timeout value for USB in msec

#define NUM_100NANOSEC_UNITS_PERFRAME(x) ((x > 0) ? ((LONGLONG)10000000 / x) :0 )

/*
 * exported data
 */
const GUID PROPSETID_PHILIPS_CUSTOM_PROP  = { 
	STATIC_PROPSETID_PHILIPS_CUSTOM_PROP };
const GUID PROPSETID_PHILIPS_FACTORY_PROP = { 
	STATIC_PROPSETID_PHILIPS_FACTORY_PROP };

/*
 * Local data
 */
//static PHW_STREAM_REQUEST_BLOCK CurrentpSrb;
LONG Address = 0;

/*
 * Local function definitions
 */
static NTSTATUS 
Get_Brightness(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pBrightness);
static NTSTATUS 
Set_Brightness(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Brightness);
static NTSTATUS 
Get_Contrast(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pContrast);
static NTSTATUS 
Set_Contrast(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Contrast);
static NTSTATUS 
Get_Gamma(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pGamma);
static NTSTATUS 
Set_Gamma(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Gamma);
static NTSTATUS 
Get_ColorEnable(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pColorEnable);
static NTSTATUS 
Set_ColorEnable(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG ColorEnable);
static NTSTATUS 
Get_BackLight_Compensation(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pBackLight_Compensation);
static NTSTATUS 
Set_BackLight_Compensation(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG BackLight_Compensation);
static NTSTATUS 
Get_WB_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Mode);
static NTSTATUS 
Set_WB_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Mode);
static NTSTATUS 
Get_WB_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Speed);
static NTSTATUS 
Set_WB_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Speed);
static NTSTATUS 
Get_WB_Delay(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Delay);
static NTSTATUS 
Set_WB_Delay(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Delay);
static NTSTATUS 
Get_WB_Red_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Red_Gain);
static NTSTATUS 
Set_WB_Red_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Red_Gain);
static NTSTATUS 
Get_WB_Blue_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Blue_Gain);
static NTSTATUS 
Set_WB_Blue_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Blue_Gain);
static NTSTATUS 
Get_AE_Control_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Control_Speed);
static NTSTATUS 
Set_AE_Control_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Control_Speed);
static NTSTATUS 
Get_AE_Flickerless(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Flickerless);
static NTSTATUS 
Set_AE_Flickerless(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Flickerless);
static NTSTATUS 
Get_AE_Shutter_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Mode);
static NTSTATUS 
Set_AE_Shutter_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Shutter_Mode);
static NTSTATUS 
Get_AE_Shutter_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Speed);
static NTSTATUS 
Set_AE_Shutter_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Shutter_Speed);
static NTSTATUS 
Get_AE_Shutter_Status(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Status);
static NTSTATUS 
Get_AE_AGC_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_AGC_Mode);
static NTSTATUS 
Set_AE_AGC_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_AGC_Mode);
static NTSTATUS 
Get_AE_AGC(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_AGC);
static NTSTATUS 
Set_AE_AGC(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_AGC);
static NTSTATUS 
Get_DriverVersion(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pDriverVersion);
static NTSTATUS 
Get_Framerate(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pFramerate);
static NTSTATUS 
Set_Framerate(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Framerate);
static NTSTATUS
Get_Framerates_Supported(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pFramerates_Supported);
static NTSTATUS 
Get_VideoFormat(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVideoFormat);
static NTSTATUS 
Get_SensorType(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pSensorType);
static NTSTATUS 
Get_VideoCompression(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVideoCompression);
static NTSTATUS 
Set_Defaults(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Command);
static NTSTATUS 
Get_Release_Number(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pRelease_Number);
static NTSTATUS 
Get_Vendor_Id(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVendor_Id);
static NTSTATUS 
Get_Product_Id(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pProduct_Id);

static NTSTATUS 
PHILIPSCAM_Defaults_Restore_User(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);
static NTSTATUS 
PHILIPSCAM_Defaults_Save_User(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);
static NTSTATUS 
PHILIPSCAM_Defaults_Restore_Factory(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);

static NTSTATUS 
Get_RegisterData(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		PLONG pValue);
static NTSTATUS 
Set_RegisterAddress(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG AddressToSet);
static NTSTATUS 
Set_RegisterData(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG Value);
static NTSTATUS 
Set_Factory_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG Factory_Mode);

static NTSTATUS 
PHILIPSCAM_RestoreDriverDefaults(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext);


static NTSTATUS
PHILPCAM_ControlVendorCommand(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		UCHAR Request,
		USHORT Value,
		USHORT Index,
		PVOID Buffer,
		PULONG BufferLength,
		BOOLEAN GetData,
		PCOMMAND_COMPLETE_FUNCTION CommandComplete,
		PVOID CommandContext);

static NTSTATUS Map_Framerate_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pFramerate);
static NTSTATUS Map_Framerate_KS_to_Drv(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		LONG Framerate);
static NTSTATUS Map_VideoFormat_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pVideoFormat);
static NTSTATUS Map_VideoCompression_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pVideoCompression);


//static VOID
//PHILIPSCAM_TimeoutDPC(
//    PKDPC Dpc,
//    PVOID DeferredContext,
//    PVOID SystemArgument1,
//    PVOID SystemArgument2
//    );


/*
** PHILIPSCAM_InitPrpObj()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_InitPrpObj(
	PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	)
{
	NTSTATUS status = STATUS_SUCCESS;

	// Read defaults from camera, could also be done
	// using PHILIPSCAM_RestoreDriverDefaults() but this
	// is more save
	status = PHILIPSCAM_Defaults_Restore_User(DeviceContext);

	return status;
}


/*
** PHILIPSCAM_GetAdapterPropertyTable()
**
** Arguments:
**
** NumberOfPropertySets
**
** Returns:
**
** Addres of property table
**  
** Side Effects:  none
*/
PVOID 
PHILIPSCAM_GetAdapterPropertyTable(
    PULONG NumberOfPropertySets
    )
{
    *NumberOfPropertySets = NUMBER_OF_ADAPTER_PROPERTY_SETS;
    return (PVOID) AdapterPropertyTable;
}


/*
** PHILIPSCAM_GetCameraProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_GetCameraProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_VIDEOPROCAMP_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;
    ULONG propertyID = streamPropertyDescr->Property->Id;	
    NTSTATUS status = STATUS_SUCCESS;

    ASSERT(streamPropertyDescr->PropertyOutputSize 
			>= sizeof(KSPROPERTY_VIDEOPROCAMP_S));

    switch(propertyID) {
	    case  KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS:
			status = Get_Brightness(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_VIDEOPROCAMP_CONTRAST:
			status = Get_Contrast(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_VIDEOPROCAMP_GAMMA:
			status = Get_Gamma(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_VIDEOPROCAMP_COLORENABLE:
			status = Get_ColorEnable(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION:
			status = Get_BackLight_Compensation(DeviceContext, &propertyData->Value);
			break;
		default:
			status = STATUS_NOT_SUPPORTED;
    }

	if (NT_SUCCESS(status)) 
	{
		pSrb->ActualBytesTransferred = sizeof(KSPROPERTY_VIDEOPROCAMP_S);
		propertyData->Capabilities = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL;
		propertyData->Flags = KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL;
	}	
	
	pSrb->Status = status;    

    return status;
}


/*
** PHILIPSCAM_SetCameraProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_SetCameraProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
	PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_VIDEOPROCAMP_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;            
    ULONG propertyID = streamPropertyDescr->Property->Id;     
    NTSTATUS status = STATUS_SUCCESS;

    switch (propertyID) {
	    case  KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS:
			status = Set_Brightness(DeviceContext, propertyData->Value);
			break;
	    case  KSPROPERTY_VIDEOPROCAMP_CONTRAST:
			status = Set_Contrast(DeviceContext, propertyData->Value);
			break;
		case  KSPROPERTY_VIDEOPROCAMP_GAMMA:
			status = Set_Gamma(DeviceContext, propertyData->Value);
			break;
	    case  KSPROPERTY_VIDEOPROCAMP_COLORENABLE:
			status = Set_ColorEnable(DeviceContext, propertyData->Value);
			break;
		case  KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION:
			status = Set_BackLight_Compensation(DeviceContext, propertyData->Value);
			break;
	    default:
			status = STATUS_NOT_SUPPORTED;
	}

    pSrb->Status = status;

    return status;
}


/*
** PHILIPSCAM_GetCameraControlProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_GetCameraControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_CAMERACONTROL_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;            
    ULONG propertyID = streamPropertyDescr->Property->Id;     
    NTSTATUS status = STATUS_SUCCESS;
    
    ASSERT(streamPropertyDescr->PropertyOutputSize 
			>= sizeof(KSPROPERTY_CAMERACONTROL_S));

    switch(propertyID) 
	{
		default:
			status = STATUS_NOT_SUPPORTED;
    }

    pSrb->Status = status;    

    return status;
}


/*
** PHILIPSCAM_SetCameraControlProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_SetCameraControlProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
	PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_CAMERACONTROL_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;            
    ULONG propertyID = streamPropertyDescr->Property->Id;     
    NTSTATUS status = STATUS_SUCCESS;

    switch (propertyID) 
	{
	    default:
			status = STATUS_NOT_SUPPORTED;
    }

    pSrb->Status = status;

    return status;
}


/*
** PHILIPSCAM_GetCustomProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_GetCustomProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_PHILIPS_CUSTOM_PROP_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;            
    ULONG propertyID = streamPropertyDescr->Property->Id;	
    NTSTATUS status = STATUS_SUCCESS;

    ASSERT(streamPropertyDescr->PropertyOutputSize 
			>= sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S));

    switch(propertyID) 
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE:
			status = Get_WB_Mode(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED:
			status = Get_WB_Speed(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_DELAY:
			status = Get_WB_Delay(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN:
			status = Get_WB_Red_Gain(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN:
			status = Get_WB_Blue_Gain(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED:
			status = Get_AE_Control_Speed(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS:
			status = Get_AE_Flickerless(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE:
			status = Get_AE_Shutter_Mode(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED:
			status = Get_AE_Shutter_Speed(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS:
			status = Get_AE_Shutter_Status(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE:
			status = Get_AE_AGC_Mode(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC:
			status = Get_AE_AGC(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DRIVERVERSION:
			status = Get_DriverVersion(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE:
			status = Get_Framerate(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATES_SUPPORTED:
			status = Get_Framerates_Supported(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT:
			status = Get_VideoFormat(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE:
			status = Get_SensorType(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION:
			status = Get_VideoCompression(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_RELEASE_NUMBER:
			status = Get_Release_Number(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_VENDOR_ID:
			status = Get_Vendor_Id(DeviceContext, &propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_PRODUCT_ID:
			status = Get_Product_Id(DeviceContext, &propertyData->Value);
			break;

        default:
			status = STATUS_NOT_SUPPORTED;
    }

	if (NT_SUCCESS(status)) 
	{
		pSrb->ActualBytesTransferred = sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S);
		propertyData->Capabilities = 0;
	}

    pSrb->Status = status;    

    return status;
}



/*
** PHILIPSCAM_SetCustomProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/

NTSTATUS
PHILIPSCAM_SetCustomProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
	PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
	    pSrb->CommandData.PropertyInfo;
	PKSPROPERTY_PHILIPS_CUSTOM_PROP_S propertyData = 
		streamPropertyDescr->PropertyInfo;
    ULONG propertyID = streamPropertyDescr->Property->Id;     
	ULONG length, slength;
	PVOID pValue  = NULL;
    NTSTATUS status = STATUS_SUCCESS;

    switch(propertyID) 
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE:
			status = Set_WB_Mode(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED:
			status = Set_WB_Speed(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_DELAY:
			status = Set_WB_Delay(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN:
			status = Set_WB_Red_Gain(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN:
			status = Set_WB_Blue_Gain(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED:
			status = Set_AE_Control_Speed(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS:
			status = Set_AE_Flickerless(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE:
			status = Set_AE_Shutter_Mode(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED:
			status = Set_AE_Shutter_Speed(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE:
			status = Set_AE_AGC_Mode(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC:
			status = Set_AE_AGC(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE:
			status = Set_Framerate(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS:
			status = Set_Defaults(DeviceContext, propertyData->Value);
			break;
		default:
			status = STATUS_NOT_SUPPORTED;
    }

    pSrb->Status = status;

    return status;
}

/*
** PHILIPSCAM_GetFactoryProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_GetFactoryProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
		    pSrb->CommandData.PropertyInfo;
    PKSPROPERTY_PHILIPS_FACTORY_PROP_S propertyData = 
			streamPropertyDescr->PropertyInfo;
    ULONG flags = propertyData->Flags;            
    ULONG propertyID = streamPropertyDescr->Property->Id;	
    NTSTATUS status = STATUS_SUCCESS;

    ASSERT(streamPropertyDescr->PropertyOutputSize 
			>= sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S));

	RtlCopyMemory( propertyData, streamPropertyDescr->Property,
          sizeof( KSPROPERTY_PHILIPS_FACTORY_PROP_S ) );

    switch(propertyID) 
	{
		case KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_DATA:
			status = Get_RegisterData(DeviceContext, &propertyData->Value);
			break;
		default:
			status = STATUS_NOT_SUPPORTED;
    }

	if (NT_SUCCESS(status)) 
	{
		pSrb->ActualBytesTransferred = sizeof(KSPROPERTY_PHILIPS_FACTORY_PROP_S);
		propertyData->Capabilities = 0;
	}

    pSrb->Status = status;    

    return status;
}

/*
** PHILIPSCAM_SetFactoryProperty()
**
** Arguments:
**
**  DeviceContext - driver context
**
** Returns:
**
**  NT status completion code 
**  
** Side Effects:  none
*/
NTSTATUS
PHILIPSCAM_SetFactoryProperty(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext,
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
	PSTREAM_PROPERTY_DESCRIPTOR streamPropertyDescr = 
	    pSrb->CommandData.PropertyInfo;
	PKSPROPERTY_PHILIPS_FACTORY_PROP_S propertyData = 
		streamPropertyDescr->PropertyInfo;
    ULONG propertyID = streamPropertyDescr->Property->Id;     
	ULONG length, slength;
	PVOID pValue  = NULL;
    NTSTATUS status = STATUS_SUCCESS;

//	RtlCopyMemory( propertyData, streamPropertyDescr->Property,
//            sizeof( KSPROPERTY_PHILIPS_FACTORY_PROP_S ) );

    switch(propertyID) 
	{
		case KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_ADDRESS:
			status = Set_RegisterAddress(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_FACTORY_PROP_REGISTER_DATA:
			status = Set_RegisterData(DeviceContext, propertyData->Value);
			break;
		case KSPROPERTY_PHILIPS_FACTORY_PROP_FACTORY_MODE:
			status = Set_Factory_Mode(DeviceContext, propertyData->Value);
			break;

		default:
			status = STATUS_NOT_SUPPORTED;
    }

    pSrb->Status = status;

    return status;
}

/*==============================================================================
 *
 * Function:	PHILIPSCAM_GetVideoControlProperty
 *
 * Abstract:	
 *
 * Arguments:	
 *
 * Returns:		NTSTATUS
 *
 * SideEffects:	None
 * 
 *============================================================================*/

NTSTATUS
PHILIPSCAM_GetVideoControlProperty(
		PPHILIPSCAM_DEVICE_CONTEXT pDc, 
		PHW_STREAM_REQUEST_BLOCK pSrb)
{
	NTSTATUS ntStatus = STATUS_SUCCESS;
	PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo; 
	DWORD dwPropertyID = pSPD->Property->Id;	 // index of the property
	DWORD dwSize  = pSPD->PropertyOutputSize;		// size of data supplied
	LONGLONG FramePeriod[] = {
			NUM_100NANOSEC_UNITS_PERFRAME(1),
			0x28B0AA						,		// 3.75 fps
            NUM_100NANOSEC_UNITS_PERFRAME(5),
			0x145855                        ,		// 7.5 fps
			NUM_100NANOSEC_UNITS_PERFRAME(10),
			NUM_100NANOSEC_UNITS_PERFRAME(12),
			NUM_100NANOSEC_UNITS_PERFRAME(15),
			NUM_100NANOSEC_UNITS_PERFRAME(20),
			NUM_100NANOSEC_UNITS_PERFRAME(24)
	};
    USHORT	CIFFrameRatesList[] = 
	{
		   FRRATE375,
           FRRATE5,
           FRRATE75,
           FRRATE10,
           FRRATE12,
           FRRATE15
	};
	USHORT QCIFFrameRatesList[] =
	{
		   FRRATE5,
           FRRATE75,
           FRRATE10,
           FRRATE12,
           FRRATE15,
           FRRATE20,
           FRRATE24
	};

	ULONG i;


	PHILIPSCAM_KdPrint(MAX_TRACE, ("enter GetVideoControlProperty\n"));

	switch(dwPropertyID)
	{
	case KSPROPERTY_VIDEOCONTROL_CAPS:
		ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;
		break;
  	case KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE:
	{
		PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S pInputData = 
			(PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S) pSPD->Property;
		PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S pOutputData = 
			(PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S) pSPD->PropertyInfo;

    	if (pInputData->StreamIndex != 0) {
            ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;
            return ntStatus;
		}

		if (dwSize == 0)
		{
			pSrb->ActualBytesTransferred =
					sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S);
			ntStatus = pSrb->Status = STATUS_BUFFER_OVERFLOW;
		}
		else if (dwSize >=
					sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S))
		{
			pSrb->ActualBytesTransferred =
					sizeof(KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S);
			
			pOutputData->CurrentActualFrameRate = 
				FramePeriod[pDc->CamStatus.PictureFrameRate];

			for (i = FRRATE24; (i > FRRATEVGA)&&(pDc->FrrSupported[i] == FALSE); i--);

			pOutputData->CurrentMaxAvailableFrameRate = FramePeriod[i];
            ntStatus = pSrb->Status = STATUS_SUCCESS;
		}
	}
		break;
	case KSPROPERTY_VIDEOCONTROL_FRAME_RATES:
	{
        PKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S pFrRInfo =
        	(PKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S) pSPD->Property;
        ULONG BytesNeeded;

        // First value of Framerate table (FRRATEVGA) disabled as selectable value.
        PKSMULTIPLE_ITEM pOutputBuf = (PKSMULTIPLE_ITEM) pSPD->PropertyInfo;
        LONGLONG * pDataPtr = (LONGLONG*) (pOutputBuf + 1);

        if (pFrRInfo->Dimensions.cx > QCIF_X)
        {
            BytesNeeded = sizeof(KSMULTIPLE_ITEM) + 					
        	    	SIZEOF_ARRAY(CIFFrameRatesList) * sizeof(LONGLONG);		
        }
        else		
        {
            BytesNeeded = sizeof(KSMULTIPLE_ITEM) + 					
        	    	SIZEOF_ARRAY(QCIFFrameRatesList) * sizeof(LONGLONG);
        }

        if (dwSize == 0)
        {
        	pSrb->ActualBytesTransferred = BytesNeeded;
        	ntStatus = pSrb->Status = STATUS_BUFFER_OVERFLOW;
        }
        else
        {
        	if (dwSize >= BytesNeeded)
        	{
            //framerate list depends on requested pict.size
        		if (pFrRInfo->Dimensions.cx > QCIF_X)
        		{
        			//Use CIF Frame rate list
        		    pOutputBuf->Size = (SIZEOF_ARRAY(CIFFrameRatesList) * sizeof(LONGLONG));
        		    pOutputBuf->Count = SIZEOF_ARRAY(CIFFrameRatesList);
        		    for ( i=0 ; i < SIZEOF_ARRAY(CIFFrameRatesList) ; i++)
        			{
        			    pDataPtr[i] = FramePeriod[CIFFrameRatesList[i]];
        			}

        		    pSrb->ActualBytesTransferred = sizeof(KSMULTIPLE_ITEM) + 					
        			    	SIZEOF_ARRAY(CIFFrameRatesList) * sizeof(LONGLONG);
        		}
        		else
        		{
        			// Use QCIF Frame rate list
        		    pOutputBuf->Size = (SIZEOF_ARRAY(QCIFFrameRatesList) * sizeof(LONGLONG));
        		    pOutputBuf->Count = SIZEOF_ARRAY(QCIFFrameRatesList);
        		    for ( i=0 ; i < SIZEOF_ARRAY(QCIFFrameRatesList) ; i++)
        			{
        			    pDataPtr[i] = FramePeriod[QCIFFrameRatesList[i]];
        			}

        		    pSrb->ActualBytesTransferred = sizeof(KSMULTIPLE_ITEM) + 					
        			    	SIZEOF_ARRAY(QCIFFrameRatesList) * sizeof(LONGLONG);
        		}
        		ntStatus = pSrb->Status = STATUS_SUCCESS;
        	}

#if NOTACTIVE
			{
				pOutputBuf->Size = ((SIZEOF_ARRAY(FramePeriod)-1) * sizeof(LONGLONG));
				pOutputBuf->Count = SIZEOF_ARRAY(FramePeriod)-1;

				for ( i=1 ; i < SIZEOF_ARRAY(FramePeriod) ; i++)
				{
					pDataPtr[i-1] = FramePeriod[i];
				}

				pSrb->ActualBytesTransferred = sizeof(KSMULTIPLE_ITEM) + 
									(SIZEOF_ARRAY(FramePeriod) - 1) * sizeof(LONGLONG);

				ntStatus = pSrb->Status = STATUS_SUCCESS;
			}
#endif
			else
			{
				ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;
			}
		}
	}
		break;
	case KSPROPERTY_VIDEOCONTROL_MODE:
	{
		ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;
	}
		break;  

	default:
		ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;
	}
	
	return ntStatus;
}

/*==============================================================================
 *
 * Function:	PHILIPSCAM_SetVideoControlProperty
 *
 * Abstract:	
 *
 * Arguments:	
 *
 * Returns:		NTSTATUS
 *
 * SideEffects:	None
 * 
 *============================================================================*/

NTSTATUS
PHILIPSCAM_SetVideoControlProperty(
		PPHILIPSCAM_DEVICE_CONTEXT  pDc, 
		PHW_STREAM_REQUEST_BLOCK pSrb)
{
	NTSTATUS ntStatus = STATUS_SUCCESS;
	PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo; 
	DWORD dwPropertyID = pSPD->Property->Id;	 // index of the property


	PHILIPSCAM_KdPrint(MAX_TRACE, ("enter SetVideoControlProperty\n"));

	ASSERT (pSPD->PropertyInputSize >= sizeof (KSPROPERTY_VIDEOCONTROL_MODE_S));

	switch(dwPropertyID)
	case KSPROPERTY_VIDEOCONTROL_CAPS:
  	case KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE:
	case KSPROPERTY_VIDEOCONTROL_FRAME_RATES:
	case KSPROPERTY_VIDEOCONTROL_MODE:
	default:
		ntStatus = pSrb->Status = STATUS_NOT_SUPPORTED;

	return ntStatus;
}


/*===========================================================================*/
NTSTATUS
PHILIPSCAM_SetFormatFramerate(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	)
/*===========================================================================*/
{
	UCHAR Buffer[3]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;
	LONG hVideoFormat, hFramerate, hCompression;

    if ( (DeviceContext->CamStatus.PictureFormat == FORMATCIF) ||
         (DeviceContext->CamStatus.PictureFormat == FORMATSIF) ||
         (DeviceContext->CamStatus.PictureFormat == FORMATSSIF)||
		 (DeviceContext->CamStatus.PictureFormat == FORMATSCIF)  ){
	  if (DeviceContext->CamStatus.PictureFrameRate == 	FRRATE375){
	    DeviceContext->CamStatus.PictureCompressing = COMPRESSION0;
	  }else{
	    if (DeviceContext->CamStatus.ReleaseNumber >= SSI_CIF3){
	      DeviceContext->CamStatus.PictureCompressing = COMPRESSION3;
	    }else{
	      DeviceContext->CamStatus.PictureCompressing = COMPRESSION4;
	    }
	  }
	}else{
	  DeviceContext->CamStatus.PictureCompressing = COMPRESSION0;
	}
	status = Map_Framerate_Drv_to_KS(DeviceContext, &hFramerate);
	if (!NT_SUCCESS(status)) 
		return status;
	status = Map_VideoFormat_Drv_to_KS(DeviceContext, &hVideoFormat);
	if (!NT_SUCCESS(status)) 
		return status;
	status = Map_VideoCompression_Drv_to_KS(DeviceContext, &hCompression);
	if (!NT_SUCCESS(status)) 
		return status;

	Buffer[bFRAMERATE] = (BYTE)hFramerate;
	Buffer[bVIDEOOUTPUTTYPE] = (BYTE)hVideoFormat;
	Buffer[bCOMPRESSIONFACT] = (BYTE)hCompression;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			SET_EP_STREAM_CTL, VIDEO_OUTPUT_CONTROL_FORMATTER, VIDEO_ENDPOINT,
	           Buffer, &BufferLength, SEND, NULL, NULL);
	   

    return status;

}

/*===========================================================================*/
NTSTATUS
PHILIPSCAM_GetSensorType(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			GET_STATUS_CTL, SENSOR_TYPE, VC_INTERFACE,
	           Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			DeviceContext->CamStatus.SensorType = Buffer[0];

	return status;
}

/*===========================================================================*/
NTSTATUS
PHILIPSCAM_GetReleaseNumber(
    PPHILIPSCAM_DEVICE_CONTEXT DeviceContext
	)
/*===========================================================================*/
{
	UCHAR Buffer[2]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			GET_STATUS_CTL, RELEASE_NUMBER, VC_INTERFACE,
		    Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) // ?? need to map to camera value ranges ??
	{
		DeviceContext->CamStatus.ReleaseNumber = 
				(((LONG)Buffer[1] << 8) | (LONG)Buffer[0]);
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Brightness(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pBrightness)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, BRIGHTNESS, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pBrightness) = Buffer[0] * BRIGHTNESS_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Brightness(
	   PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
	   LONG Brightness)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(Brightness / BRIGHTNESS_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, BRIGHTNESS, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Contrast(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pContrast)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, CONTRAST, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pContrast) = Buffer[0] * CONTRAST_DELTA;
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Contrast(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Contrast)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(Contrast / CONTRAST_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, CONTRAST, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Gamma(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pGamma)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, GAMMA, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pGamma) = Buffer[0] * GAMMA_DELTA;
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Gamma(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Gamma)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(Gamma / GAMMA_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, GAMMA, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_ColorEnable(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pColorEnable)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_CHROM_CTL, COLOR_MODE, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
	{
		if (Buffer[0] ==(UCHAR)0)
			(*pColorEnable) = COLORENABLE_MIN;
		else
			(*pColorEnable) = COLORENABLE_MAX;
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_ColorEnable(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG ColorEnable)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	if (ColorEnable == COLORENABLE_MIN)
		Buffer[0] = (UCHAR)0;
	else
		Buffer[0] = (UCHAR)0xff;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_CHROM_CTL, COLOR_MODE, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_BackLight_Compensation(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pBackLight_Compensation)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, BACK_LIGHT_COMPENSATION, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
	{
		if (Buffer[0] ==(UCHAR)0)
			(*pBackLight_Compensation) = BACKLIGHT_COMPENSATION_MIN;
		else
			(*pBackLight_Compensation) = BACKLIGHT_COMPENSATION_MAX;
	}
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_BackLight_Compensation(
	  PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
	  LONG BackLight_Compensation)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	if (BackLight_Compensation == BACKLIGHT_COMPENSATION_MIN)
		Buffer[0] = (UCHAR)0;
	else
		Buffer[0] = (UCHAR)0xff;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, BACK_LIGHT_COMPENSATION, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_WB_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;
	
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
					GET_CHROM_CTL, WB_MODE, VC_INTERFACE,
					Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pWB_Mode) = Buffer[0];
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_WB_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;
		
	/*
	 * switch to new mode
	 */
	Buffer[0] = (UCHAR)WB_Mode;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
					SET_CHROM_CTL, WB_MODE, VC_INTERFACE,
					Buffer, &BufferLength, SEND, NULL, NULL);
	if (!NT_SUCCESS(status)) 
		return status;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_WB_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_CHROM_CTL, AWB_CONTROL_SPEED, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pWB_Speed) = Buffer[0] * WB_SPEED_DELTA;
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_WB_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(WB_Speed / WB_SPEED_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_CHROM_CTL, AWB_CONTROL_SPEED, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_WB_Delay(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Delay)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_CHROM_CTL, AWB_CONTROL_DELAY, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pWB_Delay) = Buffer[0] * WB_DELAY_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_WB_Delay(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Delay)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(WB_Delay / WB_DELAY_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_CHROM_CTL, AWB_CONTROL_DELAY, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_WB_Red_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Red_Gain)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_CHROM_CTL, RED_GAIN, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pWB_Red_Gain) = Buffer[0] * WB_RED_GAIN_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_WB_Red_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Red_Gain)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(WB_Red_Gain / WB_RED_GAIN_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_CHROM_CTL, RED_GAIN, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);
	
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_WB_Blue_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pWB_Blue_Gain)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			GET_CHROM_CTL, BLUE_GAIN, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
		(*pWB_Blue_Gain) = Buffer[0] * WB_BLUE_GAIN_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_WB_Blue_Gain(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG WB_Blue_Gain)
/*===========================================================================*/
{
	UCHAR Buffer[1] = {0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(WB_Blue_Gain / WB_BLUE_GAIN_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_CHROM_CTL, BLUE_GAIN, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_Control_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Control_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[1] = {0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, AE_CONTROL_SPEED, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pAE_Control_Speed) = Buffer[0] * AE_CONTROL_SPEED_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_AE_Control_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Control_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(AE_Control_Speed / AE_CONTROL_SPEED_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, AE_CONTROL_SPEED, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);
	
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_Flickerless(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Flickerless)
/*===========================================================================*/
{
	UCHAR Buffer[1] = {0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, FLICKERLESS, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
	{
		if (Buffer[0] == (UCHAR)0)
			(*pAE_Flickerless) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_OFF;
		else
			(*pAE_Flickerless) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_ON;
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_AE_Flickerless(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Flickerless)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

   	if (AE_Flickerless == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_OFF)
		Buffer[0] = (UCHAR)0;
	else
		Buffer[0] = (UCHAR)0xff;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, FLICKERLESS, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_Shutter_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, SHUTTER_MODE, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
	{
		if (Buffer[0] == (UCHAR)0)
			(*pAE_Shutter_Mode) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO;
		else
			(*pAE_Shutter_Mode) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED;
	}

	return status;
}


/*===========================================================================*/
static NTSTATUS 
Set_AE_Shutter_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Shutter_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	if (AE_Shutter_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO)
		Buffer[0] = (UCHAR)0;
	else
		Buffer[0] = (UCHAR)0xff;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			SET_LUM_CTL, SHUTTER_MODE, VC_INTERFACE,
	           Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_Shutter_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[2]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, PRESET_SHUTTER, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) // ?? need to map to camera value ranges ??
	{
		(*pAE_Shutter_Speed) = (LONG)Buffer[0];
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_AE_Shutter_Speed(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_Shutter_Speed)
/*===========================================================================*/
{
	UCHAR Buffer[2]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

		// ?? need to map to camera value ranges ??
   	Buffer[0] = (UCHAR)(AE_Shutter_Speed);

		// status field always equal in set command
	Buffer[1] = (UCHAR)KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS_EQUAL;		

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, PRESET_SHUTTER, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_Shutter_Status(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_Shutter_Status)
/*===========================================================================*/
{
	UCHAR Buffer[2]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, PRESET_SHUTTER, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) // ?? need to map to camera value ranges ??
	{
		(*pAE_Shutter_Status) = (LONG)Buffer[1];
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_AGC_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_AGC_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, AGC_MODE, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
	{
		if (Buffer[0] == (UCHAR)0)
			(*pAE_AGC_Mode) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO;
		else
			(*pAE_AGC_Mode) = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED;
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_AE_AGC_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_AGC_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1] = {0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	if (AE_AGC_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO)
		Buffer[0] = (UCHAR)0;
	else
		Buffer[0] = (UCHAR)0xff;
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
			SET_LUM_CTL, AGC_MODE, VC_INTERFACE,
	           Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_AE_AGC(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pAE_AGC)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				GET_LUM_CTL, PRESET_AGC, VC_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pAE_AGC) = Buffer[0] * AE_AGC_DELTA;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_AE_AGC(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG AE_AGC)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)(AE_AGC / AE_AGC_DELTA);
	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_LUM_CTL, PRESET_AGC, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_DriverVersion(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pDriverVersion)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	(*pDriverVersion) = DRIVERVERSION; //DeviceContext->DriverVersion;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Framerate(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pFramerate)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	
	status = Map_Framerate_Drv_to_KS(DeviceContext, pFramerate);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Framerate(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		LONG Framerate)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	
	status = Map_Framerate_KS_to_Drv(DeviceContext, Framerate);
	if (!NT_SUCCESS(status)) 
			return status;

	status = PHILIPSCAM_SetFormatFramerate(DeviceContext);

	return status;
}

/*===========================================================================*/
static NTSTATUS
Get_Framerates_Supported(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pFramerates_Supported)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	int i;

	(*pFramerates_Supported) = 0x0;
	for (i = 0; i < 9; i++)
	{
		if (DeviceContext->FrrSupported[i])
			(*pFramerates_Supported) |= (0x1 << i);
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_VideoFormat(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVideoFormat)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	status = Map_VideoFormat_Drv_to_KS(DeviceContext, pVideoFormat);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_SensorType(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pSensorType)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	(*pSensorType) = DeviceContext->CamStatus.SensorType;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_VideoCompression(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVideoCompression)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	status = Map_VideoCompression_Drv_to_KS(DeviceContext, pVideoCompression);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Defaults(
	PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
	LONG Command)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	switch(Command)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_USER:
			status = PHILIPSCAM_Defaults_Restore_User(DeviceContext);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_SAVE_USER:
			status = PHILIPSCAM_Defaults_Save_User(DeviceContext);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_FACTORY:
			status = PHILIPSCAM_Defaults_Restore_Factory(DeviceContext);
			break;
		default:
			status = STATUS_NOT_SUPPORTED;
	}

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Release_Number(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pRelease_Number)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	(*pRelease_Number) = DeviceContext->CamStatus.ReleaseNumber;

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Vendor_Id(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pVendor_Id)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	LONG lVendor_Id_Hsb, lVendor_Id_Lsb;

	// set to factorymode
	status = Set_Factory_Mode(DeviceContext, 0x6d);
	if (status != STATUS_SUCCESS)
		return status;

	// set LSB address
	status = Set_RegisterAddress(DeviceContext, 0x1A5);
	if (status != STATUS_SUCCESS)
		goto Get_Vendor_Id_Err;

	// get LSB of vendor id
	status = Get_RegisterData(DeviceContext, &lVendor_Id_Lsb);
	if (status != STATUS_SUCCESS)
		goto Get_Vendor_Id_Err;

	// set HSB address
	status = Set_RegisterAddress(DeviceContext, 0x1A6);
	if (status != STATUS_SUCCESS)
		goto Get_Vendor_Id_Err;

	// get HSB of vendor id
	status = Get_RegisterData(DeviceContext, &lVendor_Id_Hsb);
	if (status != STATUS_SUCCESS)
		goto Get_Vendor_Id_Err;

	// revert to normal operation
	Set_Factory_Mode(DeviceContext, 0x0);
	
	// compose vendor id from lsb and hsb
	(*pVendor_Id) = ((lVendor_Id_Hsb & 0xff) << 8) | (lVendor_Id_Lsb & 0xff);

	return status;

Get_Vendor_Id_Err:
	// revert to normal operation
	Set_Factory_Mode(DeviceContext, 0x0);
	return status;
}

/*===========================================================================*/
static NTSTATUS 
Get_Product_Id(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext, 
		PLONG pProduct_Id)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	LONG lProduct_Id_Hsb, lProduct_Id_Lsb;

	// set to factorymode
	status = Set_Factory_Mode(DeviceContext, 0x6d);
	if (status != STATUS_SUCCESS)
		return status;

	// set LSB address
	status = Set_RegisterAddress(DeviceContext, 0x1A7);
	if (status != STATUS_SUCCESS)
		goto Get_Product_Id_Err;

	// get LSB of Product id
	status = Get_RegisterData(DeviceContext, &lProduct_Id_Lsb);
	if (status != STATUS_SUCCESS)
		goto Get_Product_Id_Err;

	// set HSB address
	status = Set_RegisterAddress(DeviceContext, 0x1A8);
	if (status != STATUS_SUCCESS)
		goto Get_Product_Id_Err;

	// get HSB of Product id
	status = Get_RegisterData(DeviceContext, &lProduct_Id_Hsb);
	if (status != STATUS_SUCCESS)
		goto Get_Product_Id_Err;

	// revert to normal operation
	Set_Factory_Mode(DeviceContext, 0x0);
	
	// compose Product id from lsb and hsb
	(*pProduct_Id) = ((lProduct_Id_Hsb & 0xff) << 8) | (lProduct_Id_Lsb & 0xff);

	return status;

Get_Product_Id_Err:
	// revert to normal operation
	Set_Factory_Mode(DeviceContext, 0x0);
	return status;
}


/*===========================================================================*/
static NTSTATUS 
Get_RegisterData(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		PLONG pValue)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(pDeviceContext,
				GET_FACTORY_CTL, (USHORT)Address, FACTORY_INTERFACE,
	            Buffer, &BufferLength, GET, NULL, NULL);
	if (NT_SUCCESS(status)) 
			(*pValue) = Buffer[0];

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_RegisterAddress(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG AddressToSet)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	// swap high/low byte of address
	Address = HIBYTE(AddressToSet) | (LOBYTE(AddressToSet) << 8);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_RegisterData(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG Value)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (BYTE)Value;
	status = PHILPCAM_ControlVendorCommand(pDeviceContext,
				SET_FACTORY_CTL, (USHORT)Address, FACTORY_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
Set_Factory_Mode(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext, 
		LONG Factory_Mode)
/*===========================================================================*/
{
	UCHAR Buffer[1]={0};
	ULONG BufferLength = sizeof(Buffer);
	NTSTATUS status = STATUS_SUCCESS;

	Buffer[0] = (UCHAR)Factory_Mode;

	status = PHILPCAM_ControlVendorCommand(pDeviceContext,
				SET_STATUS_CTL, FACTORY_MODE, VC_INTERFACE,
	            Buffer, &BufferLength, SEND, NULL, NULL);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
PHILIPSCAM_Defaults_Restore_User(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_STATUS_CTL, RESTORE_USER_DEFAULTS, VC_INTERFACE,
			    NULL, 0, SEND, NULL, NULL);
	
	// restore all driver defaults
	if (NT_SUCCESS(status)) 
		status = PHILIPSCAM_RestoreDriverDefaults(DeviceContext);

	return status;
}

/*===========================================================================*/
static NTSTATUS 
PHILIPSCAM_Defaults_Save_User(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

   	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_STATUS_CTL, SAVE_USER_DEFAULTS, VC_INTERFACE,
			    NULL, 0, SEND, NULL, NULL);

	return status;
}


/*===========================================================================*/
static NTSTATUS 
PHILIPSCAM_Defaults_Restore_Factory(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	status = PHILPCAM_ControlVendorCommand(DeviceContext,
				SET_STATUS_CTL, RESTORE_FACTORY_DEFAULTS, VC_INTERFACE,
			    NULL, 0, SEND, NULL, NULL);

	// restore all driver defaults
	if (NT_SUCCESS(status)) 
		status = PHILIPSCAM_RestoreDriverDefaults(DeviceContext);

	return status;

}

/*===========================================================================*/
static NTSTATUS 
PHILIPSCAM_RestoreDriverDefaults(
		PPHILIPSCAM_DEVICE_CONTEXT DeviceContext)
/*===========================================================================*/
{
    NTSTATUS ntStatus, status = STATUS_SUCCESS;

    ntStatus = Get_Brightness(DeviceContext, &Brightness_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_Contrast(DeviceContext, &Contrast_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_Gamma(DeviceContext, &Gamma_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_ColorEnable(DeviceContext, &ColorEnable_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_BackLight_Compensation(DeviceContext, &BackLight_Compensation_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;

    ntStatus = Get_WB_Mode(DeviceContext, &WB_Mode_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_WB_Speed(DeviceContext, &WB_Speed_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_WB_Delay(DeviceContext, &WB_Delay_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_WB_Red_Gain(DeviceContext, &WB_Red_Gain_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_WB_Blue_Gain(DeviceContext, &WB_Blue_Gain_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;

    ntStatus = Get_AE_Control_Speed(DeviceContext, &AE_Control_Speed_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_AE_Flickerless(DeviceContext, &AE_Flickerless_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_AE_Shutter_Mode(DeviceContext, &AE_Shutter_Mode_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_AE_Shutter_Speed(DeviceContext, &AE_Shutter_Speed_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_AE_AGC_Mode(DeviceContext, &AE_AGC_Mode_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_AE_AGC(DeviceContext, &AE_AGC_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;

    ntStatus = Get_Framerate(DeviceContext, &Framerate_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_VideoFormat(DeviceContext, &VideoFormat_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;
    ntStatus = Get_VideoCompression(DeviceContext, &VideoCompression_Default);
    if (STATUS_DEVICE_NOT_CONNECTED == ntStatus)
        return STATUS_DEVICE_NOT_CONNECTED;
    else
        status |= ntStatus;

	// hack; not all defaults are accesible yet, thus 
	// status will be FAIL
	// this must be removed when all supported
	status = STATUS_SUCCESS; 

	return status;
}

/*===========================================================================*/
static NTSTATUS Map_Framerate_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pFramerate)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	static BYTE Map_PHFRAMERATE_To_SSI[] = 
		{	
			FRAMERATE_VGA,
			FRAMERATE_375,
			FRAMERATE_5,
			FRAMERATE_75,
			FRAMERATE_10,
			FRAMERATE_12,
			FRAMERATE_15,
			FRAMERATE_20,
			FRAMERATE_24,
		};
	if (pDeviceContext->CamStatus.PictureFrameRate < 0 || 
			pDeviceContext->CamStatus.PictureFrameRate >= 9)
		return STATUS_INVALID_PARAMETER;

	(*pFramerate) = 
			Map_PHFRAMERATE_To_SSI[pDeviceContext->CamStatus.PictureFrameRate];

	return status;
}

/*===========================================================================*/
static NTSTATUS Map_Framerate_KS_to_Drv(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		LONG Framerate)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;

	switch(Framerate)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_VGA: 
			pDeviceContext->CamStatus.PictureFrameRate = FRRATEVGA;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_375:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE375;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_5:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE5;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE75;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE10;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_12:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE12;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_15:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE15;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_20:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE20;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_24:
			pDeviceContext->CamStatus.PictureFrameRate = FRRATE24;
			break;
		default:
			status = STATUS_INVALID_PARAMETER;
	}
	PHILIPSCAM_KdPrint (MIN_TRACE, ("Picture Frame Rate = %d\n",
						pDeviceContext->CamStatus.PictureFrameRate));
	return status;
}

/*===========================================================================*/
static NTSTATUS Map_VideoFormat_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pVideoFormat)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	static BYTE Map_PHFORMAT_To_SSI[] = 
		{// SSI	(camera)	 STREAM (UserInterface)
			CIF_FORMAT,      //  FORMATCIF
			QCIF_FORMAT,	 //  FORMATQCIF
			SQCIF_FORMAT,	 //  FORMATSQCIF
			SQCIF_FORMAT,	 //  FORMATQQCIF
			VGA_FORMAT,		 //  FORMATVGA
			CIF_FORMAT,		 //  FORMATSIF
			CIF_FORMAT,		 //  FORMATSSIF
			QCIF_FORMAT,	 //  FORMATQSIF
			SQCIF_FORMAT,	 //  FORMATSQSIF 
			CIF_FORMAT,      //  FORMATSCIF
		};	

	if (pDeviceContext->CamStatus.PictureFormat < FORMATCIF || 
			pDeviceContext->CamStatus.PictureFormat > FORMATSCIF)
		return STATUS_INVALID_PARAMETER;

	(*pVideoFormat) = 
			Map_PHFORMAT_To_SSI[pDeviceContext->CamStatus.PictureFormat];

	return status;
}

/*===========================================================================*/
static NTSTATUS Map_VideoCompression_Drv_to_KS(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		PLONG pVideoCompression)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	static BYTE Map_PHCOMPRESSION_To_SSI[] = 
		{
			UNCOMPRESSED,
			COMPRESSED_3,
			COMPRESSED_4
		};

	if (pDeviceContext->CamStatus.PictureCompressing < 0 ||
			pDeviceContext->CamStatus.PictureCompressing > 2)
		return STATUS_INVALID_PARAMETER;
	(*pVideoCompression) = 
			Map_PHCOMPRESSION_To_SSI[pDeviceContext->CamStatus.PictureCompressing];
	
	return status;
}

/*===========================================================================*/
//static VOID
//PHILIPSCAM_TimeoutDPC(
//    PKDPC Dpc,
//    PVOID DeferredContext,
//    PVOID SystemArgument1,
//    PVOID SystemArgument2
//    )
/*===========================================================================*/
//{
//	bTimerExpired = TRUE;    
//}

/*===========================================================================*/
static NTSTATUS
PHILPCAM_ControlVendorCommand(
		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
		UCHAR Request,
		USHORT Value,
		USHORT Index,
		PVOID Buffer,
		PULONG BufferLength,
		BOOLEAN GetData,
		PCOMMAND_COMPLETE_FUNCTION CommandComplete,
		PVOID CommandContext)
/*===========================================================================*/
{
	NTSTATUS status = STATUS_SUCCESS;
	LARGE_INTEGER SystemTimeCurrent = {0};
	LARGE_INTEGER SystemTimeStart = {0};

	KeQuerySystemTime(&SystemTimeStart);

	while(1)
	{
		status = USBCAMD_ControlVendorCommand(
				pDeviceContext,
				Request,
				Value,
				Index,
				Buffer,
				BufferLength,
				GetData,
				CommandComplete,
				CommandContext);
		if (NT_SUCCESS(status) || STATUS_DEVICE_NOT_CONNECTED == status) 
			break;

		KeQuerySystemTime(&SystemTimeCurrent);
		if ((SystemTimeCurrent.QuadPart - SystemTimeStart.QuadPart) > (10000 * WAIT_FOR_COMPLETION))
			break;
	}

	return status;	
}

/*===========================================================================*/
//static NTSTATUS
//PHILPCAM_ControlVendorCommand(
//		PPHILIPSCAM_DEVICE_CONTEXT pDeviceContext,
//		UCHAR Request,
//		USHORT Value,
//		USHORT Index,
//		PVOID Buffer,
//		PULONG BufferLength,
//		BOOLEAN GetData,
//		PCOMMAND_COMPLETE_FUNCTION CommandComplete,
//		PVOID CommandContext)
/*===========================================================================*/
//{
//	NTSTATUS status = STATUS_SUCCESS;
//	int i;
//  KTIMER TimeoutTimer;
//    KDPC TimeoutDpc;
//	LARGE_INTEGER dueTime;

//	bTimerExpired = FALSE;


	// start timer
//	KeInitializeTimer(&TimeoutTimer);
//  KeInitializeDpc(&TimeoutDpc,
//                PHILIPSCAM_TimeoutDPC,
//                CurrentpSrb->Irp);
		
//    dueTime.QuadPart = -10000 * WAIT_FOR_COMPLETION;

//    KeSetTimer(&TimeoutTimer,
//				dueTime,
//                &TimeoutDpc);        

//	while(!bTimerExpired)
//	{
//		status = USBCAMD_ControlVendorCommand(
//				pDeviceContext,
//				Request,
//				Value,
//				Index,
//				Buffer,
//				BufferLength,
//				GetData,
//				CommandComplete,
//				CommandContext);
/*		if (NT_SUCCESS(status)) 
			break;*/
//	}

//    KeCancelTimer(&TimeoutTimer);

//	return status;	
//}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\pca645vc\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by musbvcm.rc
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prpcom.cpp ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C

 * FILE			PRPCOM.CPP
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Property transfer
 * HISTORY		
 */
#include <windows.h>
#include <winioctl.h>
#include <olectl.h>
#include <ks.h>
#include <ksmedia.h>
#include <ksguid.h>

#include "enre.h"
#include "debug.h"
#include "prpcom.h"
#include "phvcmext.h"

/*======================== DEFINES =======================================*/
#define FILE_DEVICE_KS                  0x0000002f	// needed by ks header,
													// bug of Microsoft

/*======================== DATA TYPES ====================================*/
typedef struct {
	KSPROPERTY_DESCRIPTION	    PropertyDescription;
	KSPROPERTY_MEMBERSHEADER    MembersHeader;
    ULONG                       DefaultValue;
} VIDEOPROCAMP_DEFAULTLIST;


typedef struct {
	KSPROPERTY_DESCRIPTION	    PropertyDescription;
	KSPROPERTY_MEMBERSHEADER    MembersHeader;
	KSPROPERTY_STEPPING_LONG    SteppingLong;
} VIDEOPROCAMP_MEMBERSLIST;

/*======================== LOCAL FUNCTION DEFINITIONS ====================*/
static BOOL PRPCOM_GetVideoProcAmpPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plValue);
static BOOL PRPCOM_SetVideoProcAmpPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG ulPropertyId,     
	LONG  lValue);
static BOOL PRPCOM_GetVideoProcAmpPropertyRange(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plMin,
	PLONG  plMax);
static BOOL PRPCOM_GetCustomPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plValue);
static BOOL PRPCOM_SetCustomPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG ulPropertyId,     
	LONG  lValue);
static BOOL PRPCOM_GetCustomPropertyRange(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plMin,
	PLONG  plMax);
static BOOL PRPCOM_ExtDeviceIoControl(
	LPFNEXTDEVIO	pfnDeviceIoControl,
	LPARAM lParam, 
	DWORD dwVfWFlags, 
	DWORD dwIoControlCode,	
	LPVOID lpInBuffer,	
	DWORD cbInBufferSize,
	LPVOID lpOutBuffer, 
	DWORD cbOutBufferSize, 
	LPDWORD pcbReturned);

#ifdef _DEBUG

static void PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyValue(
	ULONG ulPropertyId, 
	PLONG plValue, 
	BOOL bRet);

static void PRPCOM_Debug_PRPCOM_SetVideoProcAmpPropertyValue(
	ULONG ulPropertyId, 
	LONG lValue, 
	BOOL bRet);

static void PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyRange(
	ULONG ulPropertyId, 
	PLONG plMin, 
	PLONG plMax, 
	BOOL bRet);

static void PRPCOM_Debug_GetVideoProcAmpPropertyIdStr(
	ULONG ulPropertyId, 
	char *PropertyIdStr, 
	UINT MaxLen);

static void PRPCOM_Debug_PRPCOM_GetCustomPropertyValue(
	ULONG ulPropertyId, 
	PLONG plValue, 
	BOOL bRet);

static void PRPCOM_Debug_PRPCOM_SetCustomPropertyValue(
	ULONG ulPropertyId, 
	LONG lValue, 
	BOOL bRet);

static void PRPCOM_Debug_PRPCOM_GetCustomPropertyRange(
	ULONG ulPropertyId, 
	PLONG plMin, 
	PLONG plMax, 
	BOOL bRet);

static void PRPCOM_Debug_PRPCOM_GetCustomPropertyIdStr(
	ULONG ulPropertyId, 
	char *PropertyIdStr, 
	UINT MaxLen);

#endif


/*======================== EXPORTED FUNCTIONS =============================*/

/*-------------------------------------------------------------------------*/
BOOL PRPCOM_HasDeviceChanged(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bRet = TRUE;

	bRet = pfnDeviceIoControl (
				lParam, 
				VFW_QUERY_DEV_CHANGED,
				0,0,0,0,0,0, 0);
	return bRet;
}

/*-------------------------------------------------------------------------*/
BOOL PRPCOM_Get_Value(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	PLONG plValue)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;

	if (IsEqualGUID(PropertySet, PROPSETID_VIDCAP_VIDEOPROCAMP))
	{
		// get VIDEOPROCAMP value
		bResult = PRPCOM_GetVideoProcAmpPropertyValue(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				plValue);
	}
	else if (IsEqualGUID(PropertySet, PROPSETID_PHILIPS_CUSTOM_PROP))
	{
		// get custom value
		bResult = PRPCOM_GetCustomPropertyValue(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				plValue);
	}
	else
		return FALSE;

	return bResult;
}

/*-------------------------------------------------------------------------*/
BOOL PRPCOM_Set_Value(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	LONG lValue)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;

	if (IsEqualGUID(PropertySet, PROPSETID_VIDCAP_VIDEOPROCAMP))	
	{
		// set VIDEOPROCAMP value
		bResult = PRPCOM_SetVideoProcAmpPropertyValue(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				lValue);
	}
	else if (IsEqualGUID(PropertySet, PROPSETID_PHILIPS_CUSTOM_PROP))
	{
		// set custom value
		bResult = PRPCOM_SetCustomPropertyValue(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				lValue);
	}
	else
		return FALSE;

	return bResult;
}

/*-------------------------------------------------------------------------*/
BOOL PRPCOM_Get_Range(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	PLONG plMin, PLONG plMax)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;
	
	if (IsEqualGUID(PropertySet, PROPSETID_VIDCAP_VIDEOPROCAMP))
	{
		// get VIDEOPROCAMP range
		bResult = PRPCOM_GetVideoProcAmpPropertyRange(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				plMin,
				plMax);
	}
	else if (IsEqualGUID(PropertySet, PROPSETID_PHILIPS_CUSTOM_PROP))
	{
		// get custom range
		bResult = PRPCOM_GetCustomPropertyRange(
				pfnDeviceIoControl,
				lParam,
				ulPropertyId,     
				plMin,
				plMax);
	}
	else
		return FALSE;

	return bResult;
}


/*======================== LOCAL FUNCTIONS ================================*/

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_GetVideoProcAmpPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plValue)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_VIDEOPROCAMP_S  VideoProperty;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_VIDEOPROCAMP_S) );
	VideoProperty.Property.Set   = PROPSETID_VIDCAP_VIDEOPROCAMP;
	VideoProperty.Property.Id    = ulPropertyId;         
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_GET;
	VideoProperty.Flags          = 0;
	VideoProperty.Capabilities   = 0;

	if ((bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,	
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&VideoProperty, 
					sizeof(VideoProperty), 
					&cbRet))) 
	{
		if (plValue != NULL)
			*plValue         = VideoProperty.Value;
/*		if (pulFlags != NULL)
			*pulFlags        = VideoProperty.Flags;
		if (pulCapabilities != NULL)
			*pulCapabilities = VideoProperty.Capabilities;*/
	} 	

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyValue(ulPropertyId, plValue, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_SetVideoProcAmpPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG ulPropertyId,     
	LONG  lValue)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_VIDEOPROCAMP_S  VideoProperty;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_VIDEOPROCAMP_S) );
	VideoProperty.Property.Set   = PROPSETID_VIDCAP_VIDEOPROCAMP;      
	VideoProperty.Property.Id    = ulPropertyId;         
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_SET;
	VideoProperty.Value			 = lValue;        
	VideoProperty.Flags			 = 0;
	VideoProperty.Capabilities   = 0;
	
	
	bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&VideoProperty, 
					sizeof(VideoProperty), 
					&cbRet); 

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_SetVideoProcAmpPropertyValue(ulPropertyId, lValue, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_GetVideoProcAmpPropertyRange(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plMin,
	PLONG  plMax)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_VIDEOPROCAMP_S VideoProperty;
	VIDEOPROCAMP_MEMBERSLIST PropertyList;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_VIDEOPROCAMP_S) );
	VideoProperty.Property.Set   = PROPSETID_VIDCAP_VIDEOPROCAMP;      
	VideoProperty.Property.Id    = ulPropertyId;
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_BASICSUPPORT;
	VideoProperty.Flags		     = 0;
	VideoProperty.Capabilities   = 0;

	bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&PropertyList,
					sizeof(PropertyList),
					&cbRet); 
	if (plMin != NULL)
		*plMin  = PropertyList.SteppingLong.Bounds.SignedMinimum;
	if (plMax != NULL)
		*plMax  = PropertyList.SteppingLong.Bounds.SignedMaximum;

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyRange(ulPropertyId, plMin, plMax, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_GetCustomPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plValue)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_PHILIPS_CUSTOM_PROP_S  VideoProperty;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S) );
	VideoProperty.Property.Set   = PROPSETID_PHILIPS_CUSTOM_PROP;      
	VideoProperty.Property.Id    = ulPropertyId;         
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_GET;
	VideoProperty.Flags          = 0;
	VideoProperty.Capabilities   = 0;

	if ((bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,	
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&VideoProperty, 
					sizeof(VideoProperty), 
					&cbRet))) 
	{
		if (plValue != NULL)
			*plValue         = VideoProperty.Value;
/*		if (pulFlags != NULL)
			*pulFlags        = VideoProperty.Flags;
		if (pulCapabilities != NULL)
			*pulCapabilities = VideoProperty.Capabilities;*/
	} 	

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_GetCustomPropertyValue(ulPropertyId, plValue, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_SetCustomPropertyValue(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG ulPropertyId,     
	LONG  lValue)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_PHILIPS_CUSTOM_PROP_S VideoProperty;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S) );
	VideoProperty.Property.Set   = PROPSETID_PHILIPS_CUSTOM_PROP;      
	VideoProperty.Property.Id    = ulPropertyId;         
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_SET;
	VideoProperty.Value			 = lValue;        
	VideoProperty.Flags			 = 0;
	VideoProperty.Capabilities   = 0;
	
	bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&VideoProperty, 
					sizeof(VideoProperty), 
					&cbRet); 

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_SetCustomPropertyValue(ulPropertyId, lValue, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_GetCustomPropertyRange(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	ULONG  ulPropertyId,     
	PLONG  plMin,
	PLONG  plMax)
/*-------------------------------------------------------------------------*/
{
	BOOL	bRet;
	DWORD	cbRet;    	
	KSPROPERTY_PHILIPS_CUSTOM_PROP_S VideoProperty;
	VIDEOPROCAMP_MEMBERSLIST PropertyList;

	ZeroMemory(&VideoProperty, sizeof(KSPROPERTY_PHILIPS_CUSTOM_PROP_S) );
	VideoProperty.Property.Set   = PROPSETID_PHILIPS_CUSTOM_PROP;      
	VideoProperty.Property.Id    = ulPropertyId;         
	VideoProperty.Property.Flags = KSPROPERTY_TYPE_BASICSUPPORT;
	VideoProperty.Flags          = 0;
	VideoProperty.Capabilities   = 0;

	bRet = PRPCOM_ExtDeviceIoControl(
					pfnDeviceIoControl,
					lParam,
					VFW_USE_DEVICE_HANDLE,
					IOCTL_KS_PROPERTY,
					&VideoProperty,	
					sizeof(VideoProperty), 
					&PropertyList,
					sizeof(PropertyList),
					&cbRet); 
	if (plMin != NULL)
		*plMin  = PropertyList.SteppingLong.Bounds.SignedMinimum;
	if (plMax != NULL)
		*plMax  = PropertyList.SteppingLong.Bounds.SignedMaximum;

#ifdef _DEBUG
	PRPCOM_Debug_PRPCOM_GetCustomPropertyRange(ulPropertyId, plMin, plMax, bRet);
#endif

	return bRet;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPCOM_ExtDeviceIoControl(
	LPFNEXTDEVIO	pfnDeviceIoControl,
	LPARAM		lParam, 
	DWORD		dwVfWFlags, 
	DWORD		dwIoControlCode,	
	LPVOID		lpInBuffer,	
	DWORD		cbInBufferSize,
	LPVOID		lpOutBuffer, 
	DWORD		cbOutBufferSize, 
	LPDWORD		pcbReturned)
/*-------------------------------------------------------------------------*/
{
	OVERLAPPED	ov;
	BOOL bRet;

	ov.Offset		= 0;
	ov.OffsetHigh	= 0;
	ov.hEvent		= CreateEvent( NULL, FALSE, FALSE, NULL );

	if (ov.hEvent == (HANDLE) 0) 
		bRet= FALSE;
	else 
	{
		bRet = pfnDeviceIoControl (
				lParam,
			    dwVfWFlags,
				dwIoControlCode, 
				lpInBuffer, 
				cbInBufferSize, 
				lpOutBuffer, 
				cbOutBufferSize, 
				pcbReturned,
				&ov);
		if (!bRet && GetLastError() == ERROR_IO_PENDING) 
			bRet = WaitForSingleObject( ov.hEvent, 2000 ) == WAIT_OBJECT_0;
		CloseHandle(ov.hEvent);
	}
		
	return bRet;
}


/*======================== DEBUGGING CODE =================================*/

#ifdef _DEBUG

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyValue(
	ULONG ulPropertyId, 
	PLONG plValue, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_GetVideoProcAmpPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_GetVideoProcAmpPropertyValue(%s) --> %s, Value: %li", 
			PropertyIdStr, RetStr, *plValue);
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_SetVideoProcAmpPropertyValue(
	ULONG ulPropertyId, 
	LONG lValue, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_GetVideoProcAmpPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_SetVideoProcAmpPropertyValue(%s, %li) --> %s", 
			PropertyIdStr, lValue, RetStr);

}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_GetVideoProcAmpPropertyRange(
	ULONG ulPropertyId, 
	PLONG plMin, 
	PLONG plMax, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_GetVideoProcAmpPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_GetVideoProcAmpPropertyRange(%s) --> %s, Min: %li, Max : %li", 
			PropertyIdStr, RetStr, *plMin, *plMax, *plMax);
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_GetVideoProcAmpPropertyIdStr(
	ULONG ulPropertyId, 
	char *PropertyIdStr, 
	UINT MaxLen)
/*-------------------------------------------------------------------------*/
{
	if (MaxLen == 0)
		return;

	switch(ulPropertyId)
	{
		case KSPROPERTY_VIDEOPROCAMP_COLORENABLE:
			strncpy(PropertyIdStr, "COLORENABLE", MaxLen - 1);
			break;
		case KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION:
			strncpy(PropertyIdStr, "BACKLIGHT_COMPENSATION", MaxLen - 1);
			break;
		case KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS:
			strncpy(PropertyIdStr, "BRIGHTNESS", MaxLen - 1);
			break;
		case KSPROPERTY_VIDEOPROCAMP_CONTRAST:
			strncpy(PropertyIdStr, "CONTRAST", MaxLen - 1);
			break;
		case KSPROPERTY_VIDEOPROCAMP_GAMMA:
			strncpy(PropertyIdStr, "GAMMA", MaxLen - 1);
			break;
		default:
			strncpy(PropertyIdStr, "??", MaxLen - 1);
	}
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_GetCustomPropertyValue(
	ULONG ulPropertyId, 
	PLONG plValue, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_PRPCOM_GetCustomPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_GetCustomPropertyValue(%s) --> %s, Value: %li", 
			PropertyIdStr, RetStr, *plValue);
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_SetCustomPropertyValue(
	ULONG ulPropertyId, 
	LONG lValue, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_PRPCOM_GetCustomPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_SetCustomPropertyValue(%s, %li) --> %s", 
			PropertyIdStr, lValue, RetStr);
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_GetCustomPropertyRange(
	ULONG ulPropertyId, 
	PLONG plMin, 
	PLONG plMax, 
	BOOL bRet)
/*-------------------------------------------------------------------------*/
{
	char PropertyIdStr[132], RetStr[132];

	PRPCOM_Debug_PRPCOM_GetCustomPropertyIdStr(
		ulPropertyId, PropertyIdStr, 132);

	strcpy(RetStr, bRet ? "TRUE" : "FALSE");

	printf("\nPRPCOM_GetCustomPropertyRange(%s) --> %s, Min: %li, Max : %li", 
			PropertyIdStr, RetStr, *plMin, *plMax, *plMax);
}

/*-------------------------------------------------------------------------*/
static void PRPCOM_Debug_PRPCOM_GetCustomPropertyIdStr(
	ULONG ulPropertyId, 
	char *PropertyIdStr, 
	UINT MaxLen)
/*-------------------------------------------------------------------------*/
{
	if (MaxLen == 0)
		return;

	switch(ulPropertyId)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE:		
			strncpy(PropertyIdStr, "WB_MODE", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED:	
			strncpy(PropertyIdStr, "WB_SPEED", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_DELAY:		
			strncpy(PropertyIdStr, "WB_DELAY", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN:
			strncpy(PropertyIdStr, "RED_GAIN", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN:
			strncpy(PropertyIdStr, "BLUE_GAIN", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED:  
			strncpy(PropertyIdStr, "EXPOSURE_SPEED", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS:
			strncpy(PropertyIdStr, "FLICKERLESS", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE:
			strncpy(PropertyIdStr, "EXPOSURE_SHUTTER_MODE", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED:
			strncpy(PropertyIdStr, "SHUTTERSPEED", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_STATUS:
			strncpy(PropertyIdStr, "SHUTTERSTATUS", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE:	    
			strncpy(PropertyIdStr, "EXPOSURE_AGC_MODE", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC:
			strncpy(PropertyIdStr, "EXPOSURE_AGC_SPEED", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DRIVERVERSION:
			strncpy(PropertyIdStr, "DRIVERVERSION", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE:
			strncpy(PropertyIdStr, "FRAMERATE", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOFORMAT:
			strncpy(PropertyIdStr, "VIDEOFORMAT", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE:
			strncpy(PropertyIdStr, "SENSORTYPE", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_VIDEOCOMPRESSION:
			strncpy(PropertyIdStr, "VIDEOCOMPRESSION", MaxLen - 1);
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS:
			strncpy(PropertyIdStr, "DEFAULTS", MaxLen - 1);
			break;
		default:
			strncpy(PropertyIdStr, "??", MaxLen - 1);
	}
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\debug.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			DEBUG.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Defines printf which is used for 
 *              debugging output to the console
 * HISTORY		
 */

#ifndef _DEBUG_
#define _DEBUG_

#include <stdio.h>

#ifndef _DEBUG

#define printf

#else

#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\phvcmext.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PHVCMEXT.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Main of extension DLL
 * HISTORY		This header file originates
 *              from Microsoft. 
 */
#ifndef _PHVCMEXT_
#define _PHVCMEXT_

#include <prsht.h>

/*======================== DEFINES =======================================*/
#define VFW_HIDE_SETTINGS_PAGE       0x00000001
#define VFW_HIDE_IMAGEFORMAT_PAGE    0x00000002
#define VFW_HIDE_CAMERACONTROL_PAGE  0x00000004
#define VFW_HIDE_ALL_PAGES           (VFW_HIDE_SETTINGS_PAGE | VFW_HIDE_IMAGEFORMAT_PAGE | VFW_HIDE_CAMERACONTROL_PAGE)
#define VFW_OEM_ADD_PAGE             0x80000000  // If OEM has added any page


#define VFW_USE_DEVICE_HANDLE        0x00000001
#define VFW_USE_STREAM_HANDLE        0x00000002
#define VFW_QUERY_DEV_CHANGED        0x00000100  // Selected_dev == streaming_dev


/*======================== DATA TYPES ====================================*/
//
// This is the function pointer that vfwwdm mapper calls to add an page
//
typedef 
DWORD (CALLBACK FAR * VFWWDMExtensionProc)(
	LPVOID					pfnDeviceIoControl, 
	LPFNADDPROPSHEETPAGE	pfnAddPropertyPage, 
	LPARAM					lParam);

//
// This is the function pointer that you can call to make DeviceIoControl() calls.
//
typedef 
BOOL (CALLBACK FAR * LPFNEXTDEVIO)(
					LPARAM lParam,	
					DWORD dwFlags,
					DWORD dwIoControlCode, 
					LPVOID lpInBuffer, 
					DWORD nInBufferSize, 
					LPVOID lpOutBuffer, 
					DWORD nOutBufferSize, 
					LPDWORD lpBytesReturned,
					LPOVERLAPPED lpOverlapped);

//
// This struture is used to record the device pointer
//
typedef 
struct _VFWEXT_INFO 
{
	LPFNEXTDEVIO pfnDeviceIoControl;
	LPARAM lParam;
} VFWEXT_INFO, * PVFWEXT_INFO;


/*======================== GLOBAL DATA ===================================*/

// instance handle of this module
extern HINSTANCE hInst; 

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\phvcmext.cpp ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PHVCMEXT.CPP
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Main of extension DLL
 * HISTORY		
 */
#include <windows.h>
#include <winioctl.h>
#include <ks.h>
#include <ksmedia.h>
#include <commctrl.h>

#include "resource.h"
#include "prpcom.h"
#include "prppage1.h"
#include "prppage2.h"

#ifdef _SERVICE
#include "prppage3.h"
#endif

#ifdef _DEBUG
#include "enre.h"
#endif

#include "debug.h"
#include "phvcmext.h"

/*======================== LOCAL DATA =====================================*/
HINSTANCE hInst = NULL;  


/*======================== EXPORTED FUNCTIONS =============================*/

/*-------------------------------------------------------------------------*/
int WINAPI
DllMain (HINSTANCE hInstance, DWORD fdwReason, PVOID pvReserved)
/*-------------------------------------------------------------------------*/
{
	switch (fdwReason)
	{
		case DLL_PROCESS_ATTACH:
		case DLL_THREAD_ATTACH:
			hInst = hInstance;
#ifdef _DEBUG
			ENRE_init();
#endif
			break;
		case DLL_PROCESS_DETACH:
		case DLL_THREAD_DETACH:
#ifdef _DEBUG
			ENRE_exit();
#endif
			break;
	}
	return TRUE;
}
  

/*-------------------------------------------------------------------------*/
DWORD CALLBACK VFWWDMExtension(
	LPVOID					pfnDeviceIoControl, 
	LPFNADDPROPSHEETPAGE	pfnAddPropertyPage, 
	LPARAM					lParam)
/*-------------------------------------------------------------------------*/
{
	DWORD dwFlags = 0;
	HPROPSHEETPAGE hPage;
	
	// load comctl32.dll
	InitCommonControls () ;

	hPage = PRPPAGE1_CreatePage((LPFNEXTDEVIO) pfnDeviceIoControl, lParam, hInst);
	if (hPage) 
	{
		if (pfnAddPropertyPage(hPage,lParam))
			dwFlags |= VFW_OEM_ADD_PAGE;
	}
	hPage = PRPPAGE2_CreatePage((LPFNEXTDEVIO) pfnDeviceIoControl, lParam, hInst);
	if (hPage) 
	{
		if (pfnAddPropertyPage(hPage,lParam))
			dwFlags |= VFW_OEM_ADD_PAGE;
	}

#ifdef _SERVICE
	hPage = PRPPAGE3_CreatePage((LPFNEXTDEVIO) pfnDeviceIoControl, lParam, hInst);
	if (hPage) 
	{
		if (pfnAddPropertyPage(hPage,lParam))
			dwFlags |= VFW_OEM_ADD_PAGE;
	}
#endif

	dwFlags |= (VFW_HIDE_CAMERACONTROL_PAGE  | VFW_HIDE_SETTINGS_PAGE);
	
	return dwFlags;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\enre.h ===
/*MPD::
 * Copyright (c) 1996, 1997, 1998 Philips CE I&C
 * Project		: Real-i
 * module prefix: ENRE
 * creation date: Nov, 1996
 * author		: M.J. Verberne
 * description	: 
 *MPE::*/

#ifndef _ENRE_DEFINED
#define _ENRE_DEFINED

/* ----- CONSTANTS----------------------------------------------------------- */
/* ----- TYPES -------------------------------------------------------------- */
/* ----- EXTERNAL FUNCTIONS ------------------------------------------------- */

extern void ENRE_init(void);
extern void ENRE_exit(void);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prpcom.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C

 * FILE			PRPCOM.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Transfer of custom properties
 * HISTORY		
 */

#ifndef _PRPCOM_
#define _PRPCOM_

#include "phvcmext.h"

#ifdef MRES
#include "mprpobj.h"
#else 
#ifdef HRES
#include "hprpobj.h"
#endif
#endif

/*======================== EXPORTED FUNCTIONS =============================*/
BOOL PRPCOM_HasDeviceChanged(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam);


BOOL PRPCOM_Get_Value(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	PLONG plValue);

BOOL PRPCOM_Set_Value(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	LONG lValue);

BOOL PRPCOM_Get_Range(
	GUID PropertySet,
	ULONG ulPropertyId,
	LPFNEXTDEVIO pfnDeviceIoControl, 
	LPARAM lParam, 
	PLONG plMin, PLONG plMax);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\enre.cpp ===
/*MPD::
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * Project		: Real-i
 * module prefix: IMTD
 * creation date: Nov, 1996
 * author		: M.J. Verberne
 * description	:
 *MPE::*/
#include <windows.h>
#include <io.h>
#include <stdio.h>
#include <fcntl.h>
#include "enre.h"

/* ----- CONSTANTS----------------------------------------------------------- */
/* ----- TYPES -------------------------------------------------------------- */
/* ----- GLOBAL VARIABLES --------------------------------------------------- */
/* ----- STATIC VARIABLES --------------------------------------------------- */
/* ----- STATIC FUNCTION DECLARATIONS --------------------------------------- */
/* ----- EXTERNAL FUNCTIONS ------------------------------------------------- */

/******************************************************************************/
void ENRE_init(void)
/******************************************************************************/
{
	int hCrt;
	FILE *hf;
	int i;
	COORD size;
	HWND hWnd;
	char title[256];
	int width, height;

	AllocConsole();
	SetConsoleTitle("Debugging Output");
	size = GetLargestConsoleWindowSize(GetStdHandle(STD_OUTPUT_HANDLE));
	size.Y = 65356 / size.X;
	SetConsoleScreenBufferSize(GetStdHandle(STD_OUTPUT_HANDLE), size);
	GetConsoleTitle(title, 256);
	hWnd=FindWindow(NULL, title);
//	width = GetSystemMetrics(SM_CXFULLSCREEN);
//	height =GetSystemMetrics(SM_CYFULLSCREEN)- 480;
	width = GetSystemMetrics(SM_CXFULLSCREEN) /2;
	height =GetSystemMetrics(SM_CYFULLSCREEN) / 2;
//	SetWindowPos(hWnd, HWND_TOP, 0, 480, width, height, 0);
	SetWindowPos(hWnd, HWND_TOP, 0, 0, width, height, SWP_NOMOVE | SWP_FRAMECHANGED);

	if ( hCrt = _open_osfhandle( 
		(LONG_PTR) GetStdHandle(STD_OUTPUT_HANDLE),
		_O_TEXT ) )
        {
	        if ( hf = _fdopen( hCrt, "w" ) )
		{
			*stdout = *hf;
		}
	}

	if ( hCrt = _open_osfhandle( 
		(LONG_PTR) GetStdHandle(STD_ERROR_HANDLE),
		_O_TEXT ) )
	{
		if ( hf = _fdopen( hCrt, "w" ) )
		{
			*stderr = *hf;
			i = setvbuf( stderr, NULL, _IONBF, 0 );
		}
	}

	if ( hCrt = _open_osfhandle(
		(LONG_PTR) GetStdHandle(STD_INPUT_HANDLE),
		_O_TEXT ) )
        {
		if ( hf = _fdopen( hCrt, "r" ) )
		{
			*stdin = *hf;
			i = setvbuf( stdin, NULL, _IONBF, 0 );
		}
	}
}

/******************************************************************************/
void ENRE_exit(void)
/******************************************************************************/
{
	FreeConsole();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prpctrl.cpp ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPCTRL.CPP
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Handle controls associated with
 *              properties
 * HISTORY		
 */
#include <windows.h>
#include <winioctl.h>
#include <ks.h>
#include <ksmedia.h>
#include <commctrl.h>
#include "prpcom.h"
#include "debug.h"
#include "phvcmext.h"
#include "prpctrl.h"

/*======================== LOCAL FUNCTION DEFINITIONS ====================*/
static void PRPCTRL_ScaleToPercent(LONG *plValue, LONG lMin, LONG lMax);

/*======================== EXPORTED FUNCTIONS =============================*/

/*-------------------------------------------------------------------------*/
BOOL PRPCTRL_Init(
		HWND hDlg,
		PRPCTRL_INFO *pCtrl,
		BOOL bEnable)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult = TRUE;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	// check control
	if (!pCtrl->PrpCtrl)
		return FALSE;

	// get and set the ranges for slider controls
	if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_SLIDER)
	{
		// preinit min and max for savety reasons
		pCtrl->lMin = 0;
		pCtrl->lMax = 0;

		// get property range
		bResult = PRPCOM_Get_Range(
			pCtrl->PropertySet,
			pCtrl->ulPropertyId,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&pCtrl->lMin, &pCtrl->lMax);
		if (!bResult)
			return FALSE;

		// check ranges
		if (pCtrl->lMin > pCtrl->lMax)
			return FALSE;

		// set property range
		SendMessage(
			GetDlgItem(hDlg, pCtrl->PrpCtrl),
			TBM_SETRANGE, TRUE, MAKELONG(pCtrl->lMin, pCtrl->lMax));

		// set the thick marks
		SendMessage(
			GetDlgItem(hDlg, pCtrl->PrpCtrl),
			TBM_SETTICFREQ, (WPARAM) ((pCtrl->lMax - pCtrl->lMin) / 10), (LPARAM) 0);
	}
	else if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_CHECKBOX)
	{
		// already filled in by user
	}
	else
		return FALSE;

	// update actual state
	bResult = PRPCTRL_Enable(hDlg, pCtrl, bEnable);
	
	return bResult;
}

/*-------------------------------------------------------------------------*/
BOOL PRPCTRL_Enable(
		HWND hDlg,
		PRPCTRL_INFO *pCtrl,
		BOOL bEnable)
/*-------------------------------------------------------------------------*/
{
	LONG lValue;
	BOOL bResult = TRUE;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	// check control
	if (!pCtrl->PrpCtrl)
		return FALSE;

	// get value if enable
	if (bEnable)
	{
		// get value of the control
		bResult = PRPCOM_Get_Value(
			pCtrl->PropertySet,
			pCtrl->ulPropertyId,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lValue);
		if (!bResult)
			return FALSE;

		// bring it into range of slider
		if (lValue < pCtrl->lMin)
			lValue = pCtrl->lMin;
		else if (lValue > pCtrl->lMax)
			lValue = pCtrl->lMax;

		// adjust if reverse
		if (pCtrl->bReverse)
		{
			lValue = pCtrl->lMin + pCtrl->lMax - lValue;
		}

		if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_SLIDER)
		{	
			// update slider pos
			SendMessage(
				GetDlgItem(hDlg, pCtrl->PrpCtrl),
				TBM_SETPOS, TRUE,  (LPARAM)(LONG) lValue);
		}
		else if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_CHECKBOX)
		{
			// update checkbox state
			SendMessage(GetDlgItem(hDlg, pCtrl->PrpCtrl), BM_SETCHECK, lValue, 0);
		}
		else
			return FALSE;

		// update buddy
		if (pCtrl->BuddyCtrl)
		{
			if (pCtrl->BuddyStrings != NULL)
			{
				SetDlgItemText(hDlg, pCtrl->BuddyCtrl, pCtrl->BuddyStrings[lValue]);
			}
			else
			{
				PRPCTRL_ScaleToPercent(&lValue, pCtrl->lMin, pCtrl->lMax);
				SetDlgItemInt(hDlg, pCtrl->BuddyCtrl, lValue, FALSE);
			}
		}
	}
	else
	{
		if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_SLIDER)
		{
			// set the thumb to the middle of the slider
			lValue = pCtrl->lMin + (pCtrl->lMax - pCtrl->lMin) / 2;
			SendMessage(
				GetDlgItem(hDlg, pCtrl->PrpCtrl),
				TBM_SETPOS, TRUE,  (LPARAM)(LONG) lValue);
		}

		// clear the buddy
		if (pCtrl->BuddyCtrl)
			SetDlgItemText(hDlg, pCtrl->BuddyCtrl, "");
	}

	// enable / disable controls.
	EnableWindow(GetDlgItem(hDlg, pCtrl->PrpCtrl), bEnable);
	if (pCtrl->BuddyCtrl)
		EnableWindow(GetDlgItem(hDlg, pCtrl->BuddyCtrl), bEnable);
	if (pCtrl->TextCtrl)
		EnableWindow(GetDlgItem(hDlg, pCtrl->TextCtrl), bEnable);

	return bResult;

}

/*-------------------------------------------------------------------------*/
BOOL PRPCTRL_Handle_Msg(
		HWND hDlg,
		PRPCTRL_INFO *pCtrl)
/*-------------------------------------------------------------------------*/
{
	LONG lValue, lPos;
	BOOL bResult;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_SLIDER)
	{	
		// get position of slider
		lPos = (LONG)SendMessage(
			GetDlgItem(hDlg, pCtrl->PrpCtrl),
			TBM_GETPOS, (WPARAM) 0, (LPARAM) 0);

		// bring it into range of slider
		if (lPos < pCtrl->lMin)
			lPos = pCtrl->lMin;
		else if (lPos > pCtrl->lMax)
			lPos = pCtrl->lMax;
	}			
	else if (pCtrl->PrpCtrlType == PRPCTRL_TYPE_CHECKBOX)
	{
		// get state of checkbox
		if (SendMessage(GetDlgItem(hDlg, pCtrl->PrpCtrl),
				BM_GETCHECK, 0, 0) == BST_CHECKED)
			lPos = pCtrl->lMax;
		else
			lPos = pCtrl->lMin;
	}
	else
		return FALSE;

	// reverse if needed
	if (pCtrl->bReverse)
		lValue = pCtrl->lMin + pCtrl->lMax - lPos;
	else
		lValue = lPos;

	// Set value of property
	bResult = PRPCOM_Set_Value(
			pCtrl->PropertySet,
			pCtrl->ulPropertyId,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lValue);
	if (!bResult)
		return FALSE;

	// update buddy
	if (pCtrl->BuddyCtrl)
	{
		if (pCtrl->BuddyStrings != NULL)
		{
			SetDlgItemText(hDlg, pCtrl->BuddyCtrl, pCtrl->BuddyStrings[lPos]);
		}
		else
		{
			PRPCTRL_ScaleToPercent(&lPos, pCtrl->lMin, pCtrl->lMax);
			SetDlgItemInt(hDlg, pCtrl->BuddyCtrl, lPos, FALSE);
		}
	}

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static void PRPCTRL_ScaleToPercent(LONG *plValue, LONG lMin, LONG lMax)
/*-------------------------------------------------------------------------*/
{
	// validate
	if (lMin >= lMax)
	{
		(*plValue) = lMin;
		return;
	}

	// check borders
	if ((*plValue) < lMin)
	{
		(*plValue) = 0;
		return;
	}
	if ((*plValue) > lMax)
	{
		(*plValue) = 10000;
		return;
	}
	
	(*plValue) = (((*plValue) - lMin) * 100) / (lMax - lMin);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prppage1.cpp ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPPAGE1.CPP
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Property page 1
 * HISTORY		
 */
#include <windows.h>
#include <winioctl.h>
#include <ks.h>
#include <ksmedia.h>
#include <commctrl.h>
#include "resource.h"
#include "prpcom.h"
#include "debug.h"
#include "phvcmext.h"
#include "prpctrl.h"
#include "prppage1.h"

/*======================== LOCAL DATA ====================================*/
static BOOL bInitialized = FALSE;
static BOOL bWB_Freeze = TRUE;
static BOOL bAE_Freeze = TRUE;

static VFWEXT_INFO VfWExtInfo;
static char *Shutter_Speed_Strings[11] =
	{
		"1/10000",	"1/5000",
		"1/2500",	"1/1500",
		"1/1000",	"1/500",	
		"1/250",	"1/100",
		"1/50",		"1/33",	
		"1/25",
	};

static PRPCTRL WB_Red_Gain_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_WB_RED_GAIN,
		IDE_WB_RED_GAIN,
		IDT_WB_RED_GAIN,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_RED_GAIN,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL WB_Blue_Gain_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_WB_BLUE_GAIN,
		IDE_WB_BLUE_GAIN,
		IDT_WB_BLUE_GAIN,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_BLUE_GAIN,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL WB_Speed_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_WB_SPEED,
		IDE_WB_SPEED,
		IDT_WB_SPEED,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_SPEED,
		TRUE,
		NULL,
		0,
		0
	};
static PRPCTRL AE_AGC_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_AE_AGC,
		IDE_AE_AGC,
		IDT_AE_AGC,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL AE_Shutter_Speed_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_AE_SHUTTER_SPEED,
		IDE_AE_SHUTTER_SPEED,
		IDT_AE_SHUTTER_SPEED,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
		TRUE,
		Shutter_Speed_Strings,
		0,
		0
	};
static PRPCTRL AE_Control_Speed_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_AE_CONTROL_SPEED,
		IDE_AE_CONTROL_SPEED,
		IDT_AE_CONTROL_SPEED,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_CONTROL_SPEED,
		TRUE,
		NULL,
		0,
		0
	};
static PRPCTRL AE_FlickerlessCtrl =
	{
		PRPCTRL_TYPE_CHECKBOX,
		IDC_AE_FLICKERLESS,
		0,
		0,
		STATIC_PROPSETID_PHILIPS_CUSTOM_PROP,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS,
		FALSE,
		NULL,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_OFF,
		KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_FLICKERLESS_ON
	};

/*======================== LOCAL FUNCTION DEFINITIONS ====================*/
static BOOL CALLBACK PRPPAGE1_PageDlgProc(
	HWND hDlg,
	UINT uMessage,
	WPARAM wParam,
	LPARAM lParam);
static UINT _stdcall PRPPAGE1_PageCallback(
	HWND hwnd,
	UINT uMsg,
	LPPROPSHEETPAGE ppsp);
static BOOL PRPPAGE1_ExtSetActive(
	HWND hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL PRPPAGE1_PageDlgProc_DoCommand(
	HWND hDlg,
    WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE1_Init_WB(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE1_Init_AE(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE1_Handle_WB_Mode(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL PRPPAGE1_Handle_AE_Mode(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL	PRPPAGE1_Handle_Slider(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL PRPPAGE1_Handle_AE_Flickerless(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static void PRPPAGE1_EnableControls(
	HWND hDlg,
	BOOL bEnable);
static void PRPPAGE1_Handle_Err_Comm(
	HWND hDlg);
static void PRPPAGE1_Handle_Err_Dev_Chg(
	HWND hDlg);

/*======================== EXPORTED FUNCTIONS =============================*/

/*-------------------------------------------------------------------------*/
HPROPSHEETPAGE PRPPAGE1_CreatePage(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	HINSTANCE hInst)
/*-------------------------------------------------------------------------*/
{
	PROPSHEETPAGE psPage;
	HPROPSHEETPAGE hPage;

	// save device info
	VfWExtInfo.pfnDeviceIoControl = pfnDeviceIoControl;
	VfWExtInfo.lParam = lParam;

	// create page
    psPage.dwSize		= sizeof(psPage);
    psPage.dwFlags		= PSP_USEREFPARENT | PSP_USECALLBACK;
    psPage.hInstance	= hInst;
    psPage.pszTemplate	= MAKEINTRESOURCE(IDD_VCM_NALA1);
	psPage.pszIcon      = NULL;
    psPage.pfnDlgProc	= (DLGPROC)PRPPAGE1_PageDlgProc;
    psPage.pcRefParent	= 0;
    psPage.pfnCallback	= (LPFNPSPCALLBACK) PRPPAGE1_PageCallback;	
    psPage.lParam		= (LPARAM) &VfWExtInfo;

	hPage = CreatePropertySheetPage(&psPage);

	return hPage;
}


/*======================== LOCAL FUNCTIONS ================================*/

/*-------------------------------------------------------------------------*/
static BOOL CALLBACK PRPPAGE1_PageDlgProc(
	HWND	hDlg,
	UINT	uMessage,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	switch (uMessage)
	{
		case WM_INITDIALOG:
			SetWindowLongPtr(hDlg,DWLP_USER, (LPARAM) &VfWExtInfo);
			return TRUE;
		case WM_COMMAND:
			return PRPPAGE1_PageDlgProc_DoCommand(hDlg, wParam, lParam);
		case WM_NOTIFY:
			if (((NMHDR FAR *)lParam)->code == PSN_SETACTIVE)
				return PRPPAGE1_ExtSetActive(hDlg, wParam, lParam);	
			break;
		case WM_HSCROLL:
			PRPPAGE1_Handle_Slider(hDlg, wParam, lParam);
			return TRUE;
	}
	return FALSE;	// default processing
}

/*-------------------------------------------------------------------------*/
static UINT _stdcall PRPPAGE1_PageCallback(
   HWND hwnd,
   UINT uMsg,
   LPPROPSHEETPAGE ppsp)
/*-------------------------------------------------------------------------*/
{
	switch(uMsg)
	{
		case PSPCB_CREATE:
			return 1;
		case PSPCB_RELEASE:
			return 0;
	}
	return 0;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_ExtSetActive(
	HWND hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	BOOL bResult;

	// Open the device and initialize the controls
	if (PRPCOM_HasDeviceChanged(
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam))
	{
		// Oops, device is not the same anymore
		goto PRPPAGE1_ExtSetActive_Err_Dev_Chg;
	}

	// enable all controls
	PRPPAGE1_EnableControls(hDlg, TRUE);

	// initialize WB
	bResult = PRPPAGE1_Init_WB(hDlg, wParam, lParam);
	if (!bResult)
		goto PRPPAGE1_ExtSetActive_Err_Comm;

	// initialize AE
	bResult &= PRPPAGE1_Init_AE(hDlg, wParam, lParam);
	if (!bResult)
		goto PRPPAGE1_ExtSetActive_Err_Comm;

	// All ok
	bInitialized = TRUE;

	return TRUE;

PRPPAGE1_ExtSetActive_Err_Dev_Chg:

	PRPPAGE1_Handle_Err_Dev_Chg(hDlg);

	return FALSE;

PRPPAGE1_ExtSetActive_Err_Comm:

	PRPPAGE1_Handle_Err_Comm(hDlg);

	return FALSE;

}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_PageDlgProc_DoCommand(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;

	switch(LOWORD(wParam))
	{
		case IDR_WB_MODE_AUTO:
		case IDR_WB_MODE_FIXED:
		case IDR_WB_MODE_MANUAL:
			bResult = PRPPAGE1_Handle_WB_Mode(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE1_PageDlgProc_DoCommand_Err_Comm;
			break;
		case IDR_AE_MODE_AUTO:
		case IDR_AE_MODE_FIXED:
		case IDR_AE_MODE_MANUAL:
			bResult = PRPPAGE1_Handle_AE_Mode(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE1_PageDlgProc_DoCommand_Err_Comm;
			break;
		case IDC_AE_FLICKERLESS:
			bResult = PRPPAGE1_Handle_AE_Flickerless(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE1_PageDlgProc_DoCommand_Err_Comm;
			break;
		default:
			return FALSE; // default processing
	}

	return TRUE;	// message processed

PRPPAGE1_PageDlgProc_DoCommand_Err_Comm:

	PRPPAGE1_Handle_Err_Comm(hDlg);
	
	return TRUE;	// message processed
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_Init_WB(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	LONG lWB_Mode;
	BOOL bResult, bAuto, bFreeze, bManual;

	// Get white balance mode from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lWB_Mode);
	if (!bResult)
		return FALSE;

	// check whitebalance mode
	switch(lWB_Mode)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_INDOOR:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_OUTDOOR:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_TL:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL:
			break;
		default:
			return FALSE;
	}

	// switch to freeze mode if indoor, outdoor or tl
	// (these are not supported by the ui)
	if (lWB_Mode != KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO &&
			lWB_Mode != KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL)
	{

		lWB_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL;

		// Set new WhiteBalance mode
		bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lWB_Mode);
		if (!bResult)
			return FALSE;
	}

	// set radio buttons
	bAuto = lWB_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO;
	if (bInitialized)
	{
		bFreeze = !bAuto && bWB_Freeze;
		bManual = !bAuto && !bWB_Freeze;
	}
	else
	{
		// if not initialized assume fixed mode when not auto
		bFreeze = !bAuto;
		bManual = FALSE;
	}
	bWB_Freeze = bFreeze;

	SendMessage(GetDlgItem(hDlg, IDR_WB_MODE_AUTO),
			BM_SETCHECK, bAuto, 0);
	SendMessage(GetDlgItem(hDlg, IDR_WB_MODE_FIXED),
			BM_SETCHECK, bFreeze, 0);
	SendMessage(GetDlgItem(hDlg, IDR_WB_MODE_MANUAL),
			BM_SETCHECK, bManual, 0);

	// update controls
	bResult = PRPCTRL_Init(hDlg, &WB_Red_Gain_Ctrl, bManual);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &WB_Blue_Gain_Ctrl, bManual);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &WB_Speed_Ctrl, bAuto);
	if (!bResult)
		return FALSE;

	return TRUE;	
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_Init_AE(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	LONG lAE_Shutter_Mode, lAE_AGC_Mode;
	BOOL bResult, bAuto, bFreeze, bManual;;

	// Get Shutter Mode from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,			
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lAE_Shutter_Mode);
	if (!bResult)
		return FALSE;

	// check Shutter Mode
	switch(lAE_Shutter_Mode)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED:
			break;
		default:
			return FALSE;
	}

	// Get AGC Mode from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE,			
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lAE_AGC_Mode);
	if (!bResult)
		return FALSE;

	// check AGC Mode
	switch(lAE_AGC_Mode)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED:
			break;
		default:
			return FALSE;
	}

	// Situation where Shutter Mode = Auto and AGC Mode = Fixed or vice versa
	// not supported. In those cases, switch to fixed
	if (lAE_Shutter_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO &&
			lAE_AGC_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED)
	{
		// Set Shutter Mode to Fixed
		bResult = PRPCOM_Set_Value(
				PROPSETID_PHILIPS_CUSTOM_PROP,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,
				pVfWExtInfo->pfnDeviceIoControl,
				pVfWExtInfo->lParam,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED);
		if (!bResult)
			return FALSE;
		lAE_Shutter_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED;
	}
	else if (lAE_Shutter_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED &&
			lAE_AGC_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO)
	{
		// Set AGC Mode to Fixed
		bResult = PRPCOM_Set_Value(
				PROPSETID_PHILIPS_CUSTOM_PROP,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE,
				pVfWExtInfo->pfnDeviceIoControl,
				pVfWExtInfo->lParam,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED);
		if (!bResult)
			return FALSE;
		lAE_AGC_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED;
	}

	// set radio buttons
	bAuto = lAE_Shutter_Mode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO;
	if (bInitialized)
	{
		bFreeze = !bAuto && bAE_Freeze;
		bManual = !bAuto && !bAE_Freeze;
	}
	else
	{
		// if not initialized assume fixed mode when not auto
		bFreeze = !bAuto;
		bManual = FALSE;
	}
	bAE_Freeze = bFreeze;

	SendMessage(GetDlgItem(hDlg, IDR_AE_MODE_AUTO),
			BM_SETCHECK, bAuto, 0);
	SendMessage(GetDlgItem(hDlg, IDR_AE_MODE_FIXED),
			BM_SETCHECK, bFreeze, 0);
	SendMessage(GetDlgItem(hDlg, IDR_AE_MODE_MANUAL),
			BM_SETCHECK, bManual, 0);

	// update controls
	bResult = PRPCTRL_Init(hDlg, &AE_AGC_Ctrl, bManual);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &AE_Shutter_Speed_Ctrl, bManual);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &AE_Control_Speed_Ctrl, bAuto);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &AE_FlickerlessCtrl, bAuto);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_Handle_WB_Mode(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult = TRUE;
	LONG lWB_Mode;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	// Only process checked events for these radio buttons
	if (SendMessage((HWND)lParam, BM_GETCHECK, 0, 0) != BST_CHECKED)
		return TRUE;
	
	// get new mode
	switch(LOWORD(wParam))
	{
		case IDR_WB_MODE_AUTO:
			lWB_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_AUTO;
			bWB_Freeze = FALSE;
			break;
		case IDR_WB_MODE_FIXED:
			lWB_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL;
			bWB_Freeze = TRUE;
			break;
		case IDR_WB_MODE_MANUAL:
			lWB_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE_MANUAL;
			bWB_Freeze = FALSE;
			break;
		default:
			return FALSE;
	}

	// Set new WhiteBalance mode
	bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_WB_MODE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lWB_Mode);
	if (!bResult)
		return FALSE;

	// update controls
	bResult = PRPCTRL_Enable(hDlg, &WB_Red_Gain_Ctrl,
			LOWORD(wParam) == IDR_WB_MODE_MANUAL);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Enable(hDlg, &WB_Blue_Gain_Ctrl,
			LOWORD(wParam) == IDR_WB_MODE_MANUAL);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Enable(hDlg, &WB_Speed_Ctrl,
			LOWORD(wParam) == IDR_WB_MODE_AUTO);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_Handle_AE_Mode(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult = TRUE;
	LONG lAE_Shutter_Mode, lAE_AGC_Mode, lAE_Shutter_Speed;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	// Only process checked events for these radio buttons
	if (SendMessage((HWND)lParam, BM_GETCHECK, 0, 0) != BST_CHECKED)
		return TRUE;
	
	// get new mode
	switch(LOWORD(wParam))
	{
		case IDR_AE_MODE_AUTO:
			lAE_Shutter_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO;
			lAE_AGC_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_AUTO;
			bAE_Freeze = FALSE;
			break;
		case IDR_AE_MODE_FIXED:
			lAE_Shutter_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED;
			lAE_AGC_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED;
			bAE_Freeze = TRUE;
			break;
		case IDR_AE_MODE_MANUAL:
			lAE_Shutter_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED;
			lAE_AGC_Mode = KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE_FIXED;
			bAE_Freeze = FALSE;
			break;
		default:
			return FALSE;
	}

	// Set new shutter mode
	bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lAE_Shutter_Mode);
	if (!bResult)
		return FALSE;

	// Set new AGC Mode
	bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_AGC_MODE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lAE_AGC_Mode);
	if (!bResult)
		return FALSE;

	// pitfall for shutter speed: if switched to manual
	// we must set the value to one of the 11 discrete
	// values available
	if (LOWORD(wParam) == IDR_AE_MODE_MANUAL)
	{
		// Get shutterspeed
		bResult = PRPCOM_Get_Value(
				PROPSETID_PHILIPS_CUSTOM_PROP,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
				pVfWExtInfo->pfnDeviceIoControl,
				pVfWExtInfo->lParam,
				&lAE_Shutter_Speed);
		if (!bResult)
			return FALSE;

		// Set shutterspeed
		bResult = PRPCOM_Set_Value(
				PROPSETID_PHILIPS_CUSTOM_PROP,
				KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
				pVfWExtInfo->pfnDeviceIoControl,
				pVfWExtInfo->lParam,
				lAE_Shutter_Speed);
		if (!bResult)
			return FALSE;
	}

	// update controls
	bResult = PRPCTRL_Enable(hDlg, &AE_AGC_Ctrl,
			LOWORD(wParam) == IDR_AE_MODE_MANUAL);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Enable(hDlg, &AE_Shutter_Speed_Ctrl,
			LOWORD(wParam) == IDR_AE_MODE_MANUAL);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Enable(hDlg, &AE_Control_Speed_Ctrl,
			LOWORD(wParam) == IDR_AE_MODE_AUTO);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Enable(hDlg, &AE_FlickerlessCtrl,
			LOWORD(wParam) == IDR_AE_MODE_AUTO);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL	PRPPAGE1_Handle_Slider(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PRPCTRL_INFO *pCtrl;
	WORD Ctrl;
	BOOL bResult = TRUE;

	// only process when scrolling is done
	if (LOWORD(wParam) != SB_ENDSCROLL && LOWORD(wParam) != SB_THUMBTRACK)
		return TRUE;

	// get control id
	Ctrl = (WORD)GetWindowLong((HWND)lParam, GWL_ID);

	// get control object
	switch(Ctrl)
	{
		case IDS_WB_RED_GAIN:
			pCtrl = &WB_Red_Gain_Ctrl;
			break;
		case IDS_WB_BLUE_GAIN:
			pCtrl = &WB_Blue_Gain_Ctrl;
			break;
		case IDS_WB_SPEED:
			pCtrl = &WB_Speed_Ctrl;
			break;
		case IDS_AE_CONTROL_SPEED:
			pCtrl = &AE_Control_Speed_Ctrl;
			break;
		case IDS_AE_SHUTTER_SPEED:
			pCtrl = &AE_Shutter_Speed_Ctrl;
			break;
		case IDS_AE_AGC:
			pCtrl = &AE_AGC_Ctrl;
			break;
		default:
			return FALSE;
	}								

	// process the message
	bResult = PRPCTRL_Handle_Msg(hDlg, pCtrl);
	if (!bResult)
		goto PRPPAGE1_Handle_Slider_Err_Comm;

	return TRUE;

PRPPAGE1_Handle_Slider_Err_Comm:

	PRPPAGE1_Handle_Err_Comm(hDlg);
	
	return TRUE;	// message processed
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE1_Handle_AE_Flickerless(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PRPCTRL_INFO *pCtrl;
	BOOL bResult;

	// get control object
	pCtrl = &AE_FlickerlessCtrl;

	// process the message
	bResult = PRPCTRL_Handle_Msg(hDlg, pCtrl);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE1_EnableControls(
	HWND hDlg,
	BOOL bEnable)
/*-------------------------------------------------------------------------*/
{
	static WORD Controls[] =
	{
		IDR_WB_MODE_AUTO,		IDR_WB_MODE_FIXED,	
		IDR_WB_MODE_MANUAL,		IDR_AE_MODE_AUTO,
		IDR_AE_MODE_FIXED,		IDR_AE_MODE_MANUAL,

		IDS_WB_SPEED,			IDS_WB_RED_GAIN,	
		IDS_WB_BLUE_GAIN,		IDS_AE_AGC,		
		IDS_AE_SHUTTER_SPEED,	IDS_AE_CONTROL_SPEED,

		IDE_WB_SPEED,			IDE_WB_RED_GAIN,	
		IDE_WB_BLUE_GAIN,		IDE_AE_AGC,		
		IDE_AE_SHUTTER_SPEED,	IDE_AE_CONTROL_SPEED,

		IDC_AE_FLICKERLESS,

		IDT_WB_MODE,			IDT_WB_SPEED,		
		IDT_WB_RED_GAIN,		IDT_WB_BLUE_GAIN,
		IDT_WB,					IDT_AE_MODE,		
		IDT_AE_AGC,		IDT_AE_SHUTTER_SPEED,
		IDT_AE,					IDT_AE_CONTROL_SPEED,

		0
	};
	int i = 0;

	while(Controls[i] != 0)
		EnableWindow(GetDlgItem(hDlg, Controls[i++]), bEnable);
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE1_Handle_Err_Comm(
	HWND hDlg)
/*-------------------------------------------------------------------------*/
{
	char Msg_Err_Comm[132] = "";

	// disable everything
	PRPPAGE1_EnableControls(hDlg, FALSE);

	// load the message text from resource
	LoadString(hInst, IDS_MSG_ERR_COMM, Msg_Err_Comm, 132);

	// notify the user
	MessageBox(hDlg, Msg_Err_Comm,"Error", MB_OK | MB_ICONERROR);
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE1_Handle_Err_Dev_Chg(
	HWND hDlg)
/*-------------------------------------------------------------------------*/
{
	char Msg_Err_Dev_Chg[132] = "";

	// disable everything
	PRPPAGE1_EnableControls(hDlg, FALSE);

	// load the message text from resource
	LoadString(hInst, IDS_MSG_ERR_DEV_CHG, Msg_Err_Dev_Chg, 132);

	// notify the user
	MessageBox(hDlg, Msg_Err_Dev_Chg,"Warning", MB_OK);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by phvcmext.rc
//
#define IDS_MSG_ERR_DEV_CHG             1
#define IDS_MSG_ERR_COMM                2
#define IDD_VCM_NALA2                   107
#define IDD_VCM_NALA1                   109
#define IDD_VCM_NALA2_OLD               110
#define IDE_BRIGHTNESS                  1012
#define IDE_CONTRAST                    1013
#define IDE_GAMMA                       1014
#define IDE_WB_SPEED                    1015
#define IDS_WB_SPEED                    1016
#define IDE_WB_RED_GAIN                 1017
#define IDS_WB_RED_GAIN                 1018
#define IDE_WB_BLUE_GAIN                1019
#define IDS_WB_BLUE_GAIN                1020
#define IDS_BRIGHTNESS                  1021
#define IDC_COLORENABLE                 1022
#define IDC_BACKLIGHTCOMPENSATION       1023
#define IDS_CONTRAST                    1024
#define IDS_GAMMA                       1025
#define IDB_RESTORE_UD                  1058
#define IDB_RESTORE_FD                  1059
#define IDB_SAVE_UD                     1060
#define IDR_WB_MODE_AUTO                1063
#define IDR_WB_MODE_MANUAL              1065
#define IDT_WB_SPEED                    1069
#define IDT_WB_RED_GAIN                 1070
#define IDT_WB_BLUE_GAIN                1071
#define IDC_FRAMERATE                   1146
#define IDR_AE_MODE_AUTO                1158
#define IDR_AE_MODE_FIXED               1160
#define IDR_AE_MODE_MANUAL              1161
#define IDR_WB_MODE_FIXED               1162
#define IDT_WB_MODE                     1163
#define IDT_AE_CONTROL_SPEED            1164
#define IDT_AE_SHUTTER_SPEED            1165
#define IDS_AE_CONTROL_SPEED            1166
#define IDS_AE_SHUTTER_SPEED            1167
#define IDS_AE_AGC                      1168
#define IDC_AE_FLICKERLESS              1169
#define IDE_AE_CONTROL_SPEED            1170
#define IDE_AE_SHUTTER_SPEED            1171
#define IDT_WB                          1172
#define IDT_AE                          1173
#define IDT_AE_MODE                     1174
#define IDE_AE_AGC                      1175
#define IDT_AE_AGC                      1176
#define IDT_FRAMERATE                   1178
#define IDT_IMAGECONTROLS               1179
#define IDT_BRIGHTNESS                  1180
#define IDT_CONTRAST                    1181
#define IDT_GAMMA                       1182
#define IDT_DEFAULTS                    1183
#define IDT_UD                          1184
#define IDT_FD                          1185
#define IDC_BACKLIGHT_COMPENSATION      1186
#define IDR_FRAMERATE_B0                1188
#define IDR_FRAMERATE_B1                1189
#define IDR_FRAMERATE_B2                1190
#define IDR_FRAMERATE_B3                1191
#define IDR_FRAMERATE_B4                1192
#define IDR_FRAMERATE_B5                1193
#define IDR_FRAMERATE_B6                1194
#define IDR_FRAMERATE_B7                1195
#define IDR_FRAMERATE_MR_375            1196
#define IDR_FRAMERATE_MR_5              1197
#define IDR_FRAMERATE_MR_75             1198
#define IDR_FRAMERATE_MR_10             1199
#define IDR_FRAMERATE_MR_12             1200
#define IDR_FRAMERATE_MR_15             1201
#define IDR_FRAMERATE_MR_20             1202
#define IDR_FRAMERATE_MR_24             1203
#define IDR_FRAMERATE_VGA_375           1205
#define IDR_FRAMERATE_VGA_5             1206
#define IDR_FRAMERATE_VGA_75            1207
#define IDR_FRAMERATE_VGA_10            1208
#define IDR_FRAMERATE_VGA_15            1209
#define IDR_FRAMERATE_VGA_20            1210
#define IDR_FRAMERATE_VGA_24            1211

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        123
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1204
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prppage1.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPPAGE1.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Implements the first property page
 * HISTORY		
 */

#ifndef _PRPPAGE1_
#define _PRPPAGE1_

#include "phvcmext.h"

/*======================== EXPORTED FUNCTIONS =============================*/
HPROPSHEETPAGE PRPPAGE1_CreatePage(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	HINSTANCE hInst);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prpctrl.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPCTRL.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Handle controls associated with 
 *              properties
 * HISTORY		
 */
#ifndef _PRPCTRL_
#define _PRPCTRL_

/*======================== DEFINES =======================================*/
#define PRPCTRL_TYPE_SLIDER		0
#define PRPCTRL_TYPE_CHECKBOX	1

/*======================== DATA TYPES ====================================*/
typedef struct PRPCTRL
{
	BOOL PrpCtrlType;
	WORD PrpCtrl;
	WORD BuddyCtrl;
	WORD TextCtrl;
	GUID PropertySet;
	ULONG ulPropertyId;
	BOOL bReverse;
	char **BuddyStrings;
	LONG lMin;
	LONG lMax;
} PRPCTRL_INFO;

/*======================== EXPORTED FUNCTIONS =============================*/
BOOL PRPCTRL_Init(
		HWND hDlg,
		PRPCTRL_INFO *pCtrl, 
		BOOL bEnable);

BOOL PRPCTRL_Enable(
		HWND hDlg,
		PRPCTRL_INFO *pCtrl, 
		BOOL bEnable);

BOOL PRPCTRL_Handle_Msg(
		HWND hDlg, 
		PRPCTRL_INFO *pCtrl);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prppage2.h ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPPAGE2.H
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Implements the first property page
 * HISTORY		
 */

#ifndef _PRPPAGE2_
#define _PRPPAGE2_

#include "phvcmext.h"

HPROPSHEETPAGE PRPPAGE2_CreatePage(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	HINSTANCE hInst);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\philips\vfwext\prppage2.cpp ===
/*
 * Copyright (c) 1996 1997, 1998 Philips CE I&C
 *
 * FILE			PRPPAGE2.CPP
 * DATE			7-1-97
 * VERSION		1.00
 * AUTHOR		M.J. Verberne
 * DESCRIPTION	Property page 1
 * HISTORY		
 *
*/
#include <windows.h>
#include <winioctl.h>
#include <ks.h>
#include <ksmedia.h>
#include "resource.h"
#include "prpcom.h"
#include "prpctrl.h"
#include "debug.h"
#include "phvcmext.h"
#include "prppage2.h"

/*-- Data types ----------------------------------------------------------*/

/*-- Local data definitions ----------------------------------------------*/
static VFWEXT_INFO VfWExtInfo;
static PRPCTRL Brightness_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_BRIGHTNESS,
		IDE_BRIGHTNESS,
		IDT_BRIGHTNESS,
		STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP,
		KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL Contrast_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_CONTRAST,
		IDE_CONTRAST,
		IDT_CONTRAST,
		STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP,
		KSPROPERTY_VIDEOPROCAMP_CONTRAST,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL Gamma_Ctrl =
	{
		PRPCTRL_TYPE_SLIDER,
		IDS_GAMMA,
		IDE_GAMMA,
		IDT_GAMMA,
		STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP,
		KSPROPERTY_VIDEOPROCAMP_GAMMA,
		FALSE,
		NULL,
		0,
		0
	};
static PRPCTRL ColorEnable_Ctrl =
	{
		PRPCTRL_TYPE_CHECKBOX,
		IDC_COLORENABLE,
		0,
		0,
		STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP,
		KSPROPERTY_VIDEOPROCAMP_COLORENABLE,
		FALSE,
		NULL,
		0,
		0xff
	};
static PRPCTRL BackLight_Compensation_Ctrl =
	{
		PRPCTRL_TYPE_CHECKBOX,
		IDC_BACKLIGHT_COMPENSATION,
		0,
		0,
		STATIC_PROPSETID_VIDCAP_VIDEOPROCAMP,
		KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION,
		FALSE,
		NULL,
		0,
		0xff
	};

/*-- Local function definitions ------------------------------------------*/
static BOOL CALLBACK PRPPAGE2_PageDlgProc(
	HWND hDlg,
	UINT uMessage,
	WPARAM wParam,
	LPARAM lParam);
static UINT _stdcall PRPPAGE2_PageCallback(
	HWND hwnd,
	UINT uMsg,
	LPPROPSHEETPAGE ppsp);
static BOOL PRPPAGE2_ExtSetActive(
	HWND hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL PRPPAGE2_PageDlgProc_DoCommand(
	HWND hDlg,
    WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE2_Init_Framerate(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE2_Init_ImageControls(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE2_Init_Defaults(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL PRPPAGE2_Handle_Framerate(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL	PRPPAGE2_Handle_Slider(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL	PRPPAGE2_Handle_CheckBox(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam);
static BOOL PRPPAGE2_Handle_Defaults(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam);
static BOOL	PRPPAGE2_Get_Framerate_Ctrl(
	HWND hDlg,
	BOOL bVGA,
	LONG lFramerate,
	WORD *pCtrl_Id);
static BOOL	PRPPAGE2_Get_Framerate_Value(
	HWND hDlg,
	PLONG plFramerate,
	WORD Ctrl_Id);
static void PRPPAGE2_EnableControls(
	HWND hDlg,
	BOOL bEnable);
static void PRPPAGE2_Handle_Err_Comm(
	HWND hDlg);
static void PRPPAGE2_Handle_Err_Dev_Chg(
	HWND hDlg);


/*======================== EXPORTED FUNCTIONS =============================*/

/*-------------------------------------------------------------------------*/
HPROPSHEETPAGE PRPPAGE2_CreatePage(
	LPFNEXTDEVIO pfnDeviceIoControl,
	LPARAM lParam,
	HINSTANCE hInst)
/*-------------------------------------------------------------------------*/
{
	PROPSHEETPAGE psPage;
	HPROPSHEETPAGE hPage;

	// save device info
	VfWExtInfo.pfnDeviceIoControl = pfnDeviceIoControl;
	VfWExtInfo.lParam = lParam;

	// create page
    psPage.dwSize		= sizeof(psPage);
    psPage.dwFlags		= PSP_USEREFPARENT | PSP_USECALLBACK;
    psPage.hInstance	= hInst;
    psPage.pszTemplate	= MAKEINTRESOURCE(IDD_VCM_NALA2);
	psPage.pszIcon      = NULL;
    psPage.pfnDlgProc	= (DLGPROC)PRPPAGE2_PageDlgProc;
    psPage.pcRefParent	= 0;
    psPage.pfnCallback	= (LPFNPSPCALLBACK) PRPPAGE2_PageCallback;	
    psPage.lParam		= (LPARAM) &VfWExtInfo;

	hPage = CreatePropertySheetPage(&psPage);

	return hPage;
}

/*-- Local functions ------------------------------------------------------*/


/*-------------------------------------------------------------------------*/
static BOOL CALLBACK PRPPAGE2_PageDlgProc(
	HWND	hDlg,
	UINT	uMessage,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	switch (uMessage)
	{
		case WM_INITDIALOG:
			SetWindowLongPtr(hDlg,DWLP_USER, (LPARAM) &VfWExtInfo);
			return TRUE;
		case WM_COMMAND:
			return PRPPAGE2_PageDlgProc_DoCommand(hDlg, wParam, lParam);
		case WM_NOTIFY:
			if (((NMHDR FAR *)lParam)->code == PSN_SETACTIVE)
				return PRPPAGE2_ExtSetActive(hDlg, wParam, lParam);	
			break;
		case WM_HSCROLL:
			PRPPAGE2_Handle_Slider(hDlg, wParam, lParam);
			return TRUE;
	}
	return FALSE;	// default processing
}

/*-------------------------------------------------------------------------*/
static UINT _stdcall PRPPAGE2_PageCallback(
   HWND hwnd,
   UINT uMsg,
   LPPROPSHEETPAGE ppsp)
/*-------------------------------------------------------------------------*/
{
	switch(uMsg)
	{
		case PSPCB_CREATE:
			return 1;
		case PSPCB_RELEASE:
			return 0;
	}
	return 0;
}


/*-------------------------------------------------------------------------*/
static int PRPPAGE2_ExtSetActive(
	HWND hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	BOOL bResult;

	// Open the device and initialize the controls
	if (PRPCOM_HasDeviceChanged(
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam))
	{
		// Oops, device is not the same anymore
		goto PRPPAGE2_ExtSetActive_Err_Dev_Chg;
	}

	// enable all controls
	PRPPAGE2_EnableControls(hDlg, TRUE);

	// initialize Framerate
	bResult = PRPPAGE2_Init_Framerate(hDlg, wParam, lParam);
	if (!bResult)
		goto PRPPAGE2_ExtSetActive_Err_Comm;

	// initialize Image controls
	bResult = PRPPAGE2_Init_ImageControls(hDlg, wParam, lParam);
	if (!bResult)
		goto PRPPAGE2_ExtSetActive_Err_Comm;

	// initialize Defaults
	bResult = PRPPAGE2_Init_Defaults(hDlg, wParam, lParam);
	if (!bResult)
		goto PRPPAGE2_ExtSetActive_Err_Comm;

	return TRUE;

PRPPAGE2_ExtSetActive_Err_Dev_Chg:

	PRPPAGE2_Handle_Err_Dev_Chg(hDlg);

	return FALSE;

PRPPAGE2_ExtSetActive_Err_Comm:

	PRPPAGE2_Handle_Err_Comm(hDlg);

	return FALSE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_PageDlgProc_DoCommand(
	HWND hDlg,
    WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;

	switch(LOWORD(wParam))
	{
		case IDR_FRAMERATE_VGA_375:	
		case IDR_FRAMERATE_MR_375:
		case IDR_FRAMERATE_VGA_5:	
		case IDR_FRAMERATE_MR_5:
		case IDR_FRAMERATE_VGA_75:	
		case IDR_FRAMERATE_MR_75:
		case IDR_FRAMERATE_VGA_10:	
		case IDR_FRAMERATE_MR_10:
		case IDR_FRAMERATE_MR_12:	
		case IDR_FRAMERATE_VGA_15:
		case IDR_FRAMERATE_MR_15:	
		case IDR_FRAMERATE_VGA_20:
		case IDR_FRAMERATE_MR_20:	
		case IDR_FRAMERATE_VGA_24:
		case IDR_FRAMERATE_MR_24:
			bResult = PRPPAGE2_Handle_Framerate(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE2_PageDlgProc_DoCommand_Err_Comm;
			break;
		case IDC_COLORENABLE:
		case IDC_BACKLIGHT_COMPENSATION:
			bResult = PRPPAGE2_Handle_CheckBox(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE2_PageDlgProc_DoCommand_Err_Comm;
			break;
		case IDB_RESTORE_UD:
		case IDB_RESTORE_FD:
		case IDB_SAVE_UD:
			bResult = PRPPAGE2_Handle_Defaults(hDlg, wParam, lParam);
			if (!bResult)
				goto PRPPAGE2_PageDlgProc_DoCommand_Err_Comm;
			break;
		default:
			return FALSE;	// default processing
	}

	return TRUE;	// message processed

PRPPAGE2_PageDlgProc_DoCommand_Err_Comm:

	PRPPAGE2_Handle_Err_Comm(hDlg);
	
	return TRUE;	// message processed
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_Init_Framerate(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	BOOL bResult = TRUE, bVGA;
	LONG lSensorType, lFramerate, lFramerates_Supported;
	WORD Ctrl_Id;
	WORD VGA_Button_Ids[7] = {	
		IDR_FRAMERATE_VGA_375,	IDR_FRAMERATE_VGA_5,	
		IDR_FRAMERATE_VGA_75,	IDR_FRAMERATE_VGA_10,	
		IDR_FRAMERATE_VGA_15,	IDR_FRAMERATE_VGA_20,	
		IDR_FRAMERATE_VGA_24 };
	WORD MR_Button_Ids[8] = {	
		IDR_FRAMERATE_MR_375,	IDR_FRAMERATE_MR_5,	
		IDR_FRAMERATE_MR_75,	IDR_FRAMERATE_MR_10,	
		IDR_FRAMERATE_MR_12,	IDR_FRAMERATE_MR_15,	
		IDR_FRAMERATE_MR_20,	IDR_FRAMERATE_MR_24 };
	int VGA_Bits[7] = { 1, 2, 3, 4, 6, 7, 8 };
	int MR_Bits[8] =  { 1, 2, 3, 4, 5, 6, 7, 8 };
	int i;

	// get sensortype from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lSensorType);
	if (!bResult)
		return FALSE;

	// check sensortype
	switch(lSensorType)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE_PAL_MR:
			bVGA = FALSE;
			break;
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_SENSORTYPE_VGA:
			bVGA = TRUE;
			break;
		default:
			return FALSE;
	}

	// hide / show control set
	for (i = 0; i < 7; i++)
		ShowWindow(GetDlgItem(hDlg, VGA_Button_Ids[i]),	bVGA ? SW_SHOW: SW_HIDE);
	for (i = 0; i < 8; i++)
		ShowWindow(GetDlgItem(hDlg, MR_Button_Ids[i]), bVGA ? SW_HIDE : SW_SHOW);

	// reset framerate controls
	if (bVGA)
		for (i = 0; i < 7; i++)
			SendMessage(GetDlgItem(hDlg, VGA_Button_Ids[i]), BM_SETCHECK, 0, 0);
	else
		for (i = 0; i < 8; i++)
			SendMessage(GetDlgItem(hDlg, MR_Button_Ids[i]), BM_SETCHECK, 0, 0);

	// get framerate from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lFramerate);
	if (!bResult)
		return FALSE;

	// get control id associated with the framerate and sensortype
	bResult = PRPPAGE2_Get_Framerate_Ctrl(hDlg, bVGA, lFramerate, &Ctrl_Id);
	if (!bResult)
		return FALSE;
	if (Ctrl_Id)
		SendMessage(GetDlgItem(hDlg, Ctrl_Id), BM_SETCHECK, 1, 0);

	// get supported framerates
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATES_SUPPORTED,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lFramerates_Supported);
	if (!bResult)
		return FALSE;

	// enable / disable controls
	if (bVGA)
		for (i = 0; i < 7; i++)
			EnableWindow(GetDlgItem(hDlg, VGA_Button_Ids[i]), lFramerates_Supported & (0x1 << VGA_Bits[i]));
	else
		for (i = 0; i < 8; i++)
			EnableWindow(GetDlgItem(hDlg, MR_Button_Ids[i]), lFramerates_Supported & (0x1 << MR_Bits[i]));

	// 10 hz not supported in 1st silicium
//	PRPPAGE2_Get_Framerate_Ctrl(
//			hDlg,
//			bVGA,
//			KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10,
//			&Ctrl_Id);
//	EnableWindow(GetDlgItem(hDlg, Ctrl_Id), FALSE);

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_Init_ImageControls(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;
	LONG lEXP_ShutterMode;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	// Get Shutter Mode from camera
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE,			
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lEXP_ShutterMode);
	if (!bResult)
		return FALSE;

	// check Shutter Mode
	switch(lEXP_ShutterMode)
	{
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO:
		case KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_FIXED:
			break;
		default:
			return FALSE;
	}

	// update controls
	bResult = PRPCTRL_Init(hDlg, &Brightness_Ctrl, TRUE);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &Contrast_Ctrl,
			lEXP_ShutterMode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &Gamma_Ctrl, TRUE);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &ColorEnable_Ctrl, TRUE);
	if (!bResult)
		return FALSE;
	bResult = PRPCTRL_Init(hDlg, &BackLight_Compensation_Ctrl,
			lEXP_ShutterMode == KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_MODE_AUTO);
	if (!bResult)
		return FALSE;

	return TRUE;	
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_Init_Defaults(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	// nothing to do

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_Handle_Framerate(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);
	BOOL bResult;
	LONG lFramerate, lShutter_Speed;

	// get value corresponding to control id
	bResult = PRPPAGE2_Get_Framerate_Value(
			hDlg,
			&lFramerate,
			LOWORD(wParam));
	if (!bResult)
		return FALSE;

	// Save current Shutterspeed and shutter status
	bResult = PRPCOM_Get_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			&lShutter_Speed);
	if (!bResult)
		return FALSE;

	// Set new framerate
	bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lFramerate);
	if (!bResult)
		return FALSE;

	// Set shutterspeed back to old value
	bResult = PRPCOM_Set_Value(
			PROPSETID_PHILIPS_CUSTOM_PROP,
			KSPROPERTY_PHILIPS_CUSTOM_PROP_AE_SHUTTER_SPEED,
			pVfWExtInfo->pfnDeviceIoControl,
			pVfWExtInfo->lParam,
			lShutter_Speed);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL	PRPPAGE2_Handle_Slider(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PRPCTRL_INFO *pCtrl;
	WORD Ctrl;
	BOOL bResult = TRUE;

	// only process when scrolling is done
	if (LOWORD(wParam) != SB_ENDSCROLL && LOWORD(wParam) != SB_THUMBTRACK)
		return TRUE;

	// get control id
	Ctrl = (WORD)GetWindowLong((HWND)lParam, GWL_ID);

	// get control object
	switch(Ctrl)
	{
		case IDS_BRIGHTNESS:
			pCtrl = &Brightness_Ctrl;
			break;
		case IDS_CONTRAST:
			pCtrl = &Contrast_Ctrl;
			break;
		case IDS_GAMMA:
			pCtrl = &Gamma_Ctrl;
			break;
		default:
			return FALSE;
	}								

	// process the message
	bResult = PRPCTRL_Handle_Msg(hDlg, pCtrl);
	if (!bResult)
		goto PRPPAGE2_Handle_Slider_Err_Comm;
		
	return TRUE;

PRPPAGE2_Handle_Slider_Err_Comm:

	PRPPAGE2_Handle_Err_Comm(hDlg);

	return FALSE;
}

/*-------------------------------------------------------------------------*/
static BOOL	PRPPAGE2_Handle_CheckBox(
	HWND	hDlg,
	WPARAM	wParam,
	LPARAM	lParam)
/*-------------------------------------------------------------------------*/
{
	PRPCTRL_INFO *pCtrl;
	BOOL bResult;
	WORD Ctrl;

	// get control id
	Ctrl = (WORD)GetWindowLong((HWND)lParam, GWL_ID);

	// get control object
	switch(Ctrl)
	{
		case IDC_COLORENABLE:
			pCtrl = &ColorEnable_Ctrl;
			break;
		case IDC_BACKLIGHT_COMPENSATION:
			pCtrl = &BackLight_Compensation_Ctrl;
			break;
		default:
			return FALSE;
	}								

	// process the message
	bResult = PRPCTRL_Handle_Msg(hDlg, pCtrl);
	if (!bResult)
		return FALSE;

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL PRPPAGE2_Handle_Defaults(
	HWND hDlg,
	WPARAM wParam,
	LPARAM lParam)
/*-------------------------------------------------------------------------*/
{
	BOOL bResult;
	PVFWEXT_INFO pVfWExtInfo = (PVFWEXT_INFO) GetWindowLongPtr(hDlg, DWLP_USER);

	switch(LOWORD(wParam))
	{
		case IDB_RESTORE_UD:
			bResult = PRPCOM_Set_Value(
					PROPSETID_PHILIPS_CUSTOM_PROP,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS,
					pVfWExtInfo->pfnDeviceIoControl,
					pVfWExtInfo->lParam,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_USER);
			if (!bResult)
				return FALSE;
			break;
		case IDB_RESTORE_FD:
			bResult = PRPCOM_Set_Value(
					PROPSETID_PHILIPS_CUSTOM_PROP,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS,
					pVfWExtInfo->pfnDeviceIoControl,
					pVfWExtInfo->lParam,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_RESTORE_FACTORY);
			if (!bResult)
				return FALSE;
			break;
		case IDB_SAVE_UD:
			bResult = PRPCOM_Set_Value(
					PROPSETID_PHILIPS_CUSTOM_PROP,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS,
					pVfWExtInfo->pfnDeviceIoControl,
					pVfWExtInfo->lParam,
					KSPROPERTY_PHILIPS_CUSTOM_PROP_DEFAULTS_SAVE_USER);
			if (!bResult)
				return FALSE;
			break;
		default:
			return FALSE;
	}

	// reinitialize the property page
	bResult = PRPPAGE2_ExtSetActive(hDlg, wParam, lParam);
	if (!bResult)
		return FALSE;
	
	return TRUE;
}

/*-------------------------------------------------------------------------*/
static BOOL	PRPPAGE2_Get_Framerate_Ctrl(
	HWND hDlg,
	BOOL bVGA,
	LONG lFramerate,
	WORD *pCtrl_Id)
/*-------------------------------------------------------------------------*/
{
	if (bVGA)
	{
		switch(lFramerate)
		{
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_VGA:
				(*pCtrl_Id) = 0;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_375:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_375;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_5:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_5;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_75;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_10;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_15:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_15;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_20:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_20;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_24:
				(*pCtrl_Id) = IDR_FRAMERATE_VGA_24;
				break;
			default:
				return FALSE;
		}
	}
	else
	{
		switch(lFramerate)
		{
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_375:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_375;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_5:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_5;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_75;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_10;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_12:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_12;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_15:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_15;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_20:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_20;
				break;
			case KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_24:
				(*pCtrl_Id) = IDR_FRAMERATE_MR_24;
				break;
			default:
				return FALSE;
		}
	}

	return TRUE;
}


/*-------------------------------------------------------------------------*/
static BOOL	PRPPAGE2_Get_Framerate_Value(
	HWND hDlg,
	PLONG plFramerate,
	WORD Ctrl_Id)
/*-------------------------------------------------------------------------*/
{
	switch(Ctrl_Id)
	{
		case IDR_FRAMERATE_VGA_375:
		case IDR_FRAMERATE_MR_375:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_375;
			break;
		case IDR_FRAMERATE_VGA_5:
		case IDR_FRAMERATE_MR_5:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_5;
			break;
		case IDR_FRAMERATE_VGA_75:
		case IDR_FRAMERATE_MR_75:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_75;
			break;
		case IDR_FRAMERATE_VGA_10:
		case IDR_FRAMERATE_MR_10:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_10;
			break;
		case IDR_FRAMERATE_MR_12:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_12;
			break;
		case IDR_FRAMERATE_VGA_15:
		case IDR_FRAMERATE_MR_15:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_15;
			break;
		case IDR_FRAMERATE_VGA_20:
		case IDR_FRAMERATE_MR_20:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_20;
			break;
		case IDR_FRAMERATE_VGA_24:
		case IDR_FRAMERATE_MR_24:
			(*plFramerate) = KSPROPERTY_PHILIPS_CUSTOM_PROP_FRAMERATE_24;
			break;
	}

	return TRUE;
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE2_EnableControls(
	HWND hDlg,
	BOOL bEnable)
/*-------------------------------------------------------------------------*/
{
	static WORD Controls[] =
	{
		IDR_FRAMERATE_VGA_375,	IDR_FRAMERATE_MR_375,
		IDR_FRAMERATE_VGA_5,	IDR_FRAMERATE_MR_5,
		IDR_FRAMERATE_VGA_75,	IDR_FRAMERATE_MR_75,
		IDR_FRAMERATE_VGA_10,	IDR_FRAMERATE_MR_10,
		IDR_FRAMERATE_MR_12,	IDR_FRAMERATE_VGA_15,
		IDR_FRAMERATE_MR_15,	IDR_FRAMERATE_VGA_20,
		IDR_FRAMERATE_MR_20,	IDR_FRAMERATE_VGA_24,
		IDR_FRAMERATE_MR_24,

		IDS_BRIGHTNESS,			IDS_CONTRAST,	
		IDS_GAMMA,

		IDE_BRIGHTNESS,			IDE_CONTRAST,	
		IDE_GAMMA,

		IDT_BRIGHTNESS,			IDT_CONTRAST,	
		IDT_GAMMA,				IDT_FRAMERATE,
		IDT_IMAGECONTROLS,		IDT_DEFAULTS,
		IDT_UD,					IDT_FD,

		IDC_COLORENABLE,		IDC_BACKLIGHT_COMPENSATION,

		IDB_RESTORE_UD,			IDB_SAVE_UD,
		IDB_RESTORE_FD,

		0
	};
	int i = 0;

	while(Controls[i] != 0)
		EnableWindow(GetDlgItem(hDlg, Controls[i++]), bEnable);
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE2_Handle_Err_Comm(
	HWND hDlg)
/*-------------------------------------------------------------------------*/
{
	char Msg_Err_Comm[132] = "";

	// disable everything
	PRPPAGE2_EnableControls(hDlg, FALSE);

	// load the message text from resource
	LoadString(hInst, IDS_MSG_ERR_COMM, Msg_Err_Comm, 132);

	// notify the user
	MessageBox(hDlg, Msg_Err_Comm,"Error", MB_OK | MB_ICONERROR);
}

/*-------------------------------------------------------------------------*/
static void PRPPAGE2_Handle_Err_Dev_Chg(
	HWND hDlg)
/*-------------------------------------------------------------------------*/
{
	char Msg_Err_Dev_Chg[132] = "";

	// disable everything
	PRPPAGE2_EnableControls(hDlg, FALSE);

	// load the message text from resource
	LoadString(hInst, IDS_MSG_ERR_DEV_CHG, Msg_Err_Dev_Chg, 132);

	// notify the user
	MessageBox(hDlg, Msg_Err_Dev_Chg,"Warning", MB_OK);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\usbcamd\intbulk.c ===
/*++


Module Name:

    IntBulk.c

Abstract:
        
    this module handle all interfaces to bulk & interrupt pipes 
    and performs read and write operations on these pipes.

Author:

    3/9/98 Husni Roukbi

Environment:

    kernel mode only

Notes:

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
  PURPOSE.

  Copyright (c) 1998  Microsoft Corporation

Revision History:

--*/

#include "usbcamd.h"


VOID
USBCAMD_RecycleIrp(
    IN PUSBCAMD_TRANSFER_EXTENSION TransferExtension,
    IN PIRP Irp,
    IN PURB Urb,
    IN PIO_COMPLETION_ROUTINE CompletionRoutine
    )
/*++

Routine Description:

    Get the current USB frame number.

Arguments:

    TransferExtension - context information for this transfer (pair of iso 
        urbs).

    Irp - Irp to recycle.

    Urb - Urb associated with this irp.

Return Value:

    None.

--*/    
{
    PIO_STACK_LOCATION nextStack;
    
    nextStack = IoGetNextIrpStackLocation(Irp);
    ASSERT(nextStack != NULL);

    nextStack->Parameters.Others.Argument1 = Urb;
    nextStack->Parameters.DeviceIoControl.IoControlCode = 
        IOCTL_INTERNAL_USB_SUBMIT_URB;                    
    nextStack->MajorFunction = IRP_MJ_INTERNAL_DEVICE_CONTROL;

#pragma warning(disable:4127)
    IoSetCompletionRoutine(Irp,
            CompletionRoutine,
            TransferExtension,
            TRUE,
            TRUE,
            TRUE);
#pragma warning(default:4127)            

}   


/*++

Routine Description:

    This routine performs a read or write operation on a specified 
    bulk pipe. 

Arguments:

    DeviceContext - 

    PipeIndex - 

    Buffer - 

    BufferLength - 

    CommandComplete -

    CommandContext -


Return Value:

    NT status code

--*/

NTSTATUS
USBCAMD_BulkReadWrite( 
    IN PVOID DeviceContext,
    IN USHORT PipeIndex,
    IN PVOID Buffer,
    IN ULONG BufferLength,
    IN PCOMMAND_COMPLETE_FUNCTION CommandComplete,
    IN PVOID CommandContext
    )
{

    NTSTATUS ntStatus = STATUS_SUCCESS;
   
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBD_PIPE_INFORMATION pipeHandle ;
    PEVENTWAIT_WORKITEM workitem;
    PLIST_ENTRY listEntry =NULL;
    ULONG i;

    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);


    USBCAMD_KdPrint ( MAX_TRACE, ("Enter USBCAMD_BulkReadWrite\n"));


    //
    // check if port is still connected.
    //
    if (deviceExtension ->CameraUnplugged ) {
        USBCAMD_KdPrint(MIN_TRACE,("Bulk Read/Write request after device removed!\n"));
        ntStatus = STATUS_FILE_CLOSED;        
        return ntStatus;        
    }
  
    //
    // do some parameter validation.
    //

    if (PipeIndex > deviceExtension->Interface->NumberOfPipes) {
        
        USBCAMD_KdPrint(MIN_TRACE,("BulkReadWrite invalid pipe index!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    // check if we have a pending read or write already. 
    // we only accept one read and one write at atime.

    if (USBCAMD_OutstandingIrp(deviceExtension, PipeIndex) ) {
        USBCAMD_KdPrint(MIN_TRACE,("Bulk Read/Write Ovelapping request !\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;            
    }
    
    
    pipeHandle = &deviceExtension->Interface->Pipes[PipeIndex];

    if (pipeHandle->PipeType != UsbdPipeTypeBulk ) {
     
        USBCAMD_KdPrint(MIN_TRACE,("BulkReadWrite invalid pipe type!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    if ( Buffer == NULL ) {
        USBCAMD_KdPrint(MIN_TRACE,("BulkReadWrite NULL buffer pointer!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    
    //  
    // call the transfer function
    //

    if (KeGetCurrentIrql() < DISPATCH_LEVEL) {
        //
        // we are at passive level, just do the command
        //
        ntStatus = USBCAMD_IntOrBulkTransfer(deviceExtension,
                                             NULL,
                                             Buffer,
                                             BufferLength,
                                             PipeIndex,
                                             CommandComplete,
                                             CommandContext,
                                             0,
                                             BULK_TRANSFER);        
        if (ntStatus != STATUS_SUCCESS) {
            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_BulkReadWrite: USBCAMD_IntOrBulkTransfer()=0x%x!\n", ntStatus));
        }

    } else {

//        TEST_TRAP();
        //
        // schedule a work item
        //
        ntStatus = STATUS_PENDING;

        workitem = USBCAMD_ExAllocatePool(NonPagedPool,
                                          sizeof(EVENTWAIT_WORKITEM));
        if (workitem) {
        
            ExInitializeWorkItem(&workitem->WorkItem,
                                 USBCAMD_EventWaitWorkItem,
                                 workitem);

            workitem->DeviceExtension = deviceExtension;
            workitem->ChannelExtension = NULL;
            workitem->PipeIndex = PipeIndex;
            workitem->Buffer = Buffer;
            workitem->BufferLength = BufferLength;
            workitem->EventComplete = CommandComplete;
            workitem->EventContext = CommandContext;
            workitem->LoopBack = 0;
            workitem->TransferType = BULK_TRANSFER;

            ExQueueWorkItem(&workitem->WorkItem,
                            DelayedWorkQueue);
   
        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_BulkReadWrite: USBCAMD_ExAllocatePool(%d) failed!\n", sizeof(EVENTWAIT_WORKITEM)));
        }
    }
    
    return ntStatus;
}

/*++

Routine Description:

    This routine performs a read from an interrupt pipe. 

Arguments:

    DeviceContext - 

    PipeIndex - 

    Buffer - 

    BufferLength - 

    EventComplete -

    EventContext -


Return Value:

    NT status code

--*/

NTSTATUS
USBCAMD_WaitOnDeviceEvent( 
    IN PVOID DeviceContext,
    IN ULONG PipeIndex,
    IN PVOID Buffer,
    IN ULONG BufferLength,
    IN PCOMMAND_COMPLETE_FUNCTION   EventComplete,
    IN PVOID EventContext,
    IN BOOLEAN LoopBack
    )
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PUSBD_PIPE_INFORMATION pipeHandle ;
    PEVENTWAIT_WORKITEM workitem;

    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);


    USBCAMD_KdPrint ( MIN_TRACE, ("Enter USBCAMD_WaitOnDeviceEvent\n"));
   
    //
    // check if port is still connected.
    //

    if (deviceExtension->CameraUnplugged ) {
        USBCAMD_KdPrint(MIN_TRACE,("WaitOnDeviceEvent after device removed!\n"));
        ntStatus = STATUS_FILE_CLOSED;        
        return ntStatus;        
    }

    //
    // do some parameter validation.
    //

    if (PipeIndex > deviceExtension->Interface->NumberOfPipes) {
        
        USBCAMD_KdPrint(MIN_TRACE,("WaitOnDeviceEvent invalid pipe index!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }
    
    // check if we have a pending interrupt request already. 
    // we only accept one interrupt request at atime.

    if (USBCAMD_OutstandingIrp(deviceExtension, PipeIndex) ) {
        USBCAMD_KdPrint(MIN_TRACE,("Ovelapping Interrupt request !\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;            
    }
   
    pipeHandle = &deviceExtension->Interface->Pipes[PipeIndex];

    if (pipeHandle->PipeType != UsbdPipeTypeInterrupt ) {
     
        USBCAMD_KdPrint(MIN_TRACE,("WaitOnDeviceEvent invalid pipe type!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    if ( Buffer == NULL ) {
        USBCAMD_KdPrint(MIN_TRACE,("WaitOnDeviceEvent NULL buffer pointer!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    if ( BufferLength < (ULONG) pipeHandle->MaximumPacketSize ) {
        USBCAMD_KdPrint(MIN_TRACE,("WaitOnDeviceEvent buffer is smaller than max. pkt size!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }
   
    //  
    // call the transfer function
    //

    if (KeGetCurrentIrql() < DISPATCH_LEVEL) {
        //
        // we are at passive level, just do the command
        //
        ntStatus = USBCAMD_IntOrBulkTransfer(deviceExtension,
                                             NULL,
                                             Buffer,
                                             BufferLength,
                                             PipeIndex,
                                             EventComplete,
                                             EventContext,
                                             LoopBack,
                                             INTERRUPT_TRANSFER);        
        if (ntStatus != STATUS_SUCCESS) {
            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_WaitOnDeviceEvent: USBCAMD_IntOrBulkTransfer()=0x%x!\n", ntStatus));
        }
    } else {

        //
        // schedule a work item
        //
        ntStatus = STATUS_PENDING;

        workitem = USBCAMD_ExAllocatePool(NonPagedPool,sizeof(EVENTWAIT_WORKITEM));
        if (workitem) {
        
            ExInitializeWorkItem(&workitem->WorkItem,
                                 USBCAMD_EventWaitWorkItem,
                                 workitem);

            workitem->DeviceExtension = deviceExtension;
            workitem->ChannelExtension = NULL;
            workitem->PipeIndex = PipeIndex;
            workitem->Buffer = Buffer;
            workitem->BufferLength = BufferLength;
            workitem->EventComplete = EventComplete;
            workitem->EventContext = EventContext; 
            workitem->LoopBack = LoopBack;
            workitem->TransferType = INTERRUPT_TRANSFER;

            ExQueueWorkItem(&workitem->WorkItem,DelayedWorkQueue);
   
        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_WaitOnDeviceEvent: USBCAMD_ExAllocatePool(%d) failed!\n", sizeof(EVENTWAIT_WORKITEM)));
        }
    }

    return ntStatus;
}

/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/
VOID
USBCAMD_EventWaitWorkItem(
    PVOID Context
    )
{
    NTSTATUS ntStatus;
    PEVENTWAIT_WORKITEM workItem = Context;
    ntStatus = USBCAMD_IntOrBulkTransfer(workItem->DeviceExtension,
                                         workItem->ChannelExtension,
                                         workItem->Buffer,
                                         workItem->BufferLength,
                                         workItem->PipeIndex,
                                         workItem->EventComplete,
                                         workItem->EventContext,
                                         workItem->LoopBack,
                                         workItem->TransferType);
    USBCAMD_ExFreePool(workItem);
}


/*++

Routine Description:

Arguments:

Return Value:
    NT Status - STATUS_SUCCESS

--*/

NTSTATUS
USBCAMD_IntOrBulkTransfer(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN PVOID    pBuffer,        
    IN ULONG    TransferSize,
    IN ULONG    PipeIndex,
    IN PCOMMAND_COMPLETE_FUNCTION commandComplete,
    IN PVOID    commandContext,
    IN BOOLEAN  LoopBack,
    IN UCHAR    TransferType
)
{
    NTSTATUS                    ntStatus = STATUS_SUCCESS;
    PUSBCAMD_TRANSFER_EXTENSION pTransferContext;
    ULONG                       siz = 0;
    ULONG                       MaxPacketSize;
    ULONG                       MaxTransferSize;
    PUSBCAMD_PIPE_PIN_RELATIONS PipePinRelations;
    KIRQL                       Irql;

    USBCAMD_KdPrint(MAX_TRACE,("Bulk transfer called. size = %d, pBuffer = 0x%X\n",
                                TransferSize, pBuffer));

    PipePinRelations = &DeviceExtension->PipePinRelations[PipeIndex];

    MaxTransferSize = DeviceExtension->Interface->Pipes[PipeIndex].MaximumTransferSize;
    MaxPacketSize   = DeviceExtension->Interface->Pipes[PipeIndex].MaximumPacketSize;

    if ( TransferSize > MaxTransferSize) {
        USBCAMD_KdPrint(MIN_TRACE,("Bulk Transfer > Max transfer size.\n"));
    }

    //
    // Allocate and initialize Transfer Context
    //
    
    if ( ChannelExtension == NULL ) {

        pTransferContext = USBCAMD_ExAllocatePool(NonPagedPool, sizeof(USBCAMD_TRANSFER_EXTENSION));

        if (pTransferContext) {
            RtlZeroMemory(pTransferContext, sizeof(USBCAMD_TRANSFER_EXTENSION));  
            ntStatus = USBCAMD_InitializeBulkTransfer(DeviceExtension,
                                                  ChannelExtension,
                                                  DeviceExtension->Interface,
                                                  pTransferContext,
                                                  PipeIndex);
            if (ntStatus != STATUS_SUCCESS) {
                USBCAMD_ExFreePool(pTransferContext);
                USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_IntOrBulkTransfer: USBCAMD_InitializeBulkTransfer()=0x%x\n",ntStatus));
                ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                return ntStatus;
            }     
        }
        else {
            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_IntOrBulkTransfer: USBCAMD_ExAllocatePool(%d) failed.  cannot allocate Transfer Context\n", sizeof(USBCAMD_TRANSFER_EXTENSION)));
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
            return ntStatus;
        }
        
    }
    else {
        pTransferContext = &ChannelExtension->TransferExtension[ChannelExtension->CurrentBulkTransferIndex];
    }
    
    ASSERT(pTransferContext);

    pTransferContext->BulkContext.fDestinedForReadBuffer = FALSE;
    pTransferContext->BulkContext.RemainingTransferLength = TransferSize;
    pTransferContext->BulkContext.ChunkSize = TransferSize;
    pTransferContext->BulkContext.PipeIndex = PipeIndex;
    pTransferContext->BulkContext.pTransferBuffer = pBuffer;
    pTransferContext->BulkContext.pOriginalTransferBuffer = pBuffer;
    pTransferContext->BulkContext.CommandCompleteCallback = commandComplete;
    pTransferContext->BulkContext.CommandCompleteContext = commandContext;
    pTransferContext->BulkContext.LoopBack = LoopBack;
    pTransferContext->BulkContext.TransferType = TransferType;
    pTransferContext->BulkContext.NBytesTransferred = 0;

   
    //
    // If chunksize is bigger than MaxTransferSize, then set it to MaxTransferSize.  The
    // transfer completion routine will issue additional transfers until the total size has
    // been transferred.
    // 

    if (pTransferContext->BulkContext.ChunkSize > MaxTransferSize) {
        pTransferContext->BulkContext.ChunkSize = MaxTransferSize;
    }

    if  (PipePinRelations->PipeDirection == INPUT_PIPE) {

        //
        // If this read is smaller than a USB packet, then issue a request for a 
        // whole usb packet and make sure it goes into the read buffer first.
        //

        if (pTransferContext->BulkContext.ChunkSize < MaxPacketSize) {
            USBCAMD_KdPrint(MAX_TRACE,("Request is < packet size - transferring whole packet into read buffer.\n"));
            pTransferContext->BulkContext.fDestinedForReadBuffer = TRUE;
            pTransferContext->BulkContext.pOriginalTransferBuffer = 
                pTransferContext->BulkContext.pTransferBuffer;  // save off original transfer ptr.
            pTransferContext->BulkContext.pTransferBuffer = pTransferContext->WorkBuffer =
                    USBCAMD_ExAllocatePool(NonPagedPool,MaxPacketSize); 
            if (pTransferContext->WorkBuffer == NULL ) {
                if (ChannelExtension == NULL) {
                    USBCAMD_FreeBulkTransfer(pTransferContext);
                    USBCAMD_ExFreePool(pTransferContext);
                }
                USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_IntOrBulkTransfer: USBCAMD_ExAllocatePool(%d) failed\n", MaxPacketSize));
                ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                return ntStatus;
            }
            pTransferContext->BulkContext.ChunkSize = MaxPacketSize;
        }
        else {
            //
            // Truncate the size of the read to an integer number of packets.  If necessary, 
            // the completion routine will handle any fractional remaining packets (with the read buffer).
            //         
            pTransferContext->BulkContext.ChunkSize = (pTransferContext->BulkContext.ChunkSize 
                                                            / MaxPacketSize) * MaxPacketSize;
        }
    }

    ASSERT(pTransferContext->BulkContext.RemainingTransferLength);
    ASSERT(pTransferContext->BulkContext.pTransferBuffer);    
    ASSERT(pTransferContext->DataUrb);

    //
    // Initialize URB
    //

    UsbBuildInterruptOrBulkTransferRequest(pTransferContext->DataUrb,
                                           sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER),
                                           DeviceExtension->Interface->Pipes[PipeIndex].PipeHandle,
                                           pTransferContext->BulkContext.pTransferBuffer,
                                           NULL,
                                           pTransferContext->BulkContext.ChunkSize,
                                           USBD_SHORT_TRANSFER_OK,
                                           NULL);

    KeAcquireSpinLock(&PipePinRelations->OutstandingIrpSpinlock, &Irql);

    //
    // Build the data request
    //
    ASSERT(pTransferContext->DataIrp == NULL);
    if (ChannelExtension) {
        ntStatus = USBCAMD_AcquireIdleLock(&ChannelExtension->IdleLock);
    }

    if (STATUS_SUCCESS == ntStatus) {

        pTransferContext->DataIrp = USBCAMD_BuildIoRequest(
            DeviceExtension,
            pTransferContext,
            pTransferContext->DataUrb,
            USBCAMD_BulkTransferComplete
            );
        if (pTransferContext->DataIrp == NULL) {

            USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_IntOrBulkTransfer: USBCAMD_BuildIoRequest failed\n"));
            if (ChannelExtension == NULL) {
                USBCAMD_FreeBulkTransfer(pTransferContext);
                USBCAMD_ExFreePool(pTransferContext);
            }
            else {
                USBCAMD_ReleaseIdleLock(&ChannelExtension->IdleLock);
            }
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        }
        else {

            InsertTailList(&PipePinRelations->IrpPendingQueue, &pTransferContext->ListEntry);
        }
    }

    KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

    if (pTransferContext->DataIrp) {

        ntStatus = IoCallDriver(DeviceExtension->StackDeviceObject, pTransferContext->DataIrp);

        //
        // Note the completion routine will handle cleanup
        //

        if (STATUS_PENDING == ntStatus) {
            ntStatus = STATUS_SUCCESS;
        }
    }

    USBCAMD_KdPrint(MAX_TRACE,("USBCAMD_IntOrBulkTransfer exit (0x%X).\n", ntStatus));
        
    return ntStatus;
}

/*++

Routine Description:

Arguments:
    DeviceExtension    - Pointer to Device Extension.
    PipeIndex       - Pipe index.

Return Value:
    NT Status - STATUS_SUCCESS
    
--*/

PUSBCAMD_TRANSFER_EXTENSION
USBCAMD_DequeueFirstIrp(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN ULONG    PipeIndex,
    IN PLIST_ENTRY pListHead)
{

    KIRQL Irql;
    PLIST_ENTRY pListEntry;
    PUSBCAMD_TRANSFER_EXTENSION pTransExt ;

    KeAcquireSpinLock(&DeviceExtension->PipePinRelations[PipeIndex].OutstandingIrpSpinlock, &Irql);

    if ( IsListEmpty(pListHead)) 
        pTransExt = NULL;
    else {
        pListEntry = RemoveHeadList(pListHead); 
        pTransExt = (PUSBCAMD_TRANSFER_EXTENSION) CONTAINING_RECORD(pListEntry, 
                                USBCAMD_TRANSFER_EXTENSION, ListEntry);   
        ASSERT_TRANSFER(pTransExt);
    }
   
    KeReleaseSpinLock(&DeviceExtension->PipePinRelations[PipeIndex].OutstandingIrpSpinlock, Irql);
    return pTransExt;
}    


/*++

Routine Description:

Arguments:
    DeviceExtension    - Pointer to Device Extension.
    PipeIndex       - Pipe index.

Return Value:
    NT Status - STATUS_SUCCESS
    
--*/

BOOLEAN
USBCAMD_OutstandingIrp(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN ULONG    PipeIndex)
{

    KIRQL Irql;
    BOOLEAN Pending = FALSE;
    PLIST_ENTRY pListHead; 

    KeAcquireSpinLock(&DeviceExtension->PipePinRelations[PipeIndex].OutstandingIrpSpinlock, &Irql);

    pListHead = &DeviceExtension->PipePinRelations[PipeIndex].IrpPendingQueue;
    Pending = IsListEmpty(pListHead);

    KeReleaseSpinLock(&DeviceExtension->PipePinRelations[PipeIndex].OutstandingIrpSpinlock, Irql);

    return (!Pending);
}    

NTSTATUS
USBCAMD_BulkTransferComplete(
    IN PDEVICE_OBJECT   pDeviceObject,
    IN PIRP             pIrp,
    IN PVOID            Context
)
/*++

Routine Description:

Arguments:
    pDeviceObject    - Device object for a device.
    pIrp             - Read/write request packet
    pTransferContext - context info for transfer

Return Value:
    NT Status - STATUS_SUCCESS
    
--*/
{
    PURB                        pUrb;
    ULONG                       CompletedTransferLength;
    NTSTATUS                    CompletedTransferStatus;
    ULONG                       MaxPacketSize,PipeIndex;
    PUSBCAMD_TRANSFER_EXTENSION pTransferContext, pQueTransfer;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    NTSTATUS ntStatus = STATUS_SUCCESS;
    BOOLEAN                     fShortTransfer = FALSE;
    PLIST_ENTRY listEntry;
    PUSBCAMD_PIPE_PIN_RELATIONS PipePinRelations;
    KIRQL Irql;

    USBCAMD_KdPrint (ULTRA_TRACE, ("enter USBCAMD_BulkTransferComplete \n"));
   
    pTransferContext = Context;
    ASSERT_TRANSFER(pTransferContext);
    channelExtension = pTransferContext->ChannelExtension;
    deviceExtension = pTransferContext->DeviceExtension;
    PipeIndex = pTransferContext->BulkContext.PipeIndex;
    PipePinRelations = &deviceExtension->PipePinRelations[PipeIndex];

    KeAcquireSpinLock(&PipePinRelations->OutstandingIrpSpinlock, &Irql);

    ASSERT(pIrp == pTransferContext->DataIrp);
    pTransferContext->DataIrp = NULL;

    if (pIrp->Cancel) {

        // The IRP has been cancelled
        KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

        IoFreeIrp(pIrp);

        // 
        // signal the cancel event
        //
        KeSetEvent(&pTransferContext->BulkContext.CancelEvent,1,FALSE);

        USBCAMD_KdPrint(MIN_TRACE,("**** Bulk transfer Irp Cancelled.\n"));

        // return w/o freeing transfercontext. We will use later when we resubmit
        // the transfer again to USBD.

        if (channelExtension) {
            USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
        }

        return STATUS_MORE_PROCESSING_REQUIRED;
    }


    // The IRP hasn't been cancelled, so the context should be intact
    // Get this context out of the list, and mark it as such
    RemoveEntryList(&pTransferContext->ListEntry);
    InitializeListHead(&pTransferContext->ListEntry);

    if (channelExtension && (channelExtension->Flags & USBCAMD_STOP_STREAM)) {

        KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

        IoFreeIrp(pIrp);

        USBCAMD_KdPrint(MIN_TRACE,("USBCAMD_BulkTransferComplete: Transfer completed after STOP.\n"));

        USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);

        return STATUS_MORE_PROCESSING_REQUIRED;
    }

    if (!NT_SUCCESS(pIrp->IoStatus.Status)) {

        ntStatus = pIrp->IoStatus.Status;

        KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

        IoFreeIrp(pIrp);

        USBCAMD_KdPrint(MIN_TRACE,("Int/Bulk transfer error. IO status = 0x%X\n", ntStatus));

        if ( channelExtension == NULL ) {
            USBCAMD_FreeBulkTransfer(pTransferContext);
            USBCAMD_ExFreePool(pTransferContext);
        }
        else {
            USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
            USBCAMD_ProcessResetRequest(deviceExtension,channelExtension); 
        }

        return STATUS_MORE_PROCESSING_REQUIRED;
    }

    pUrb = pTransferContext->DataUrb;
    CompletedTransferLength = pUrb->UrbBulkOrInterruptTransfer.TransferBufferLength;
    CompletedTransferStatus = pUrb->UrbBulkOrInterruptTransfer.Hdr.Status;

    if (STATUS_SUCCESS != CompletedTransferStatus) {

        KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

        IoFreeIrp(pIrp);

        USBCAMD_KdPrint(MIN_TRACE,("Int/Bulk transfer error. USB status = 0x%X\n",CompletedTransferStatus));

        if ( channelExtension == NULL ) {
            USBCAMD_FreeBulkTransfer(pTransferContext);
            USBCAMD_ExFreePool(pTransferContext);
        }
        else {
            USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
            USBCAMD_ProcessResetRequest(deviceExtension,channelExtension); 
        }

        return STATUS_MORE_PROCESSING_REQUIRED;
    }

    MaxPacketSize =  deviceExtension->Interface->Pipes[PipeIndex].MaximumPacketSize;    

    if (CompletedTransferLength < pTransferContext->BulkContext.ChunkSize) {
        USBCAMD_KdPrint(MIN_TRACE,("Short bulk transfer received. Length = %d, ChunkSize = %d\n",
                                   CompletedTransferLength, pTransferContext->BulkContext.ChunkSize));
        fShortTransfer = TRUE;
    }
    
    //
    // If this transfer went into the read buffer, then this should be the final read 
    // of  a single very small read (< single usb packet).
    // In either case, we need to copy the appropriate amount of data into the user's irp, update the
    // read buffer variables, and complete the user's irp.
    //

    if (pTransferContext->BulkContext.fDestinedForReadBuffer) {
        USBCAMD_KdPrint(MAX_TRACE,("Read bulk buffer transfer completed. size = %d\n", CompletedTransferLength));
        ASSERT(CompletedTransferLength <= MaxPacketSize);
        ASSERT(pTransferContext->BulkContext.pOriginalTransferBuffer);
        ASSERT(pTransferContext->BulkContext.pTransferBuffer);
        ASSERT(pTransferContext->WorkBuffer == pTransferContext->BulkContext.pTransferBuffer);
        ASSERT(pTransferContext->BulkContext.RemainingTransferLength < MaxPacketSize);

        ASSERT(CompletedTransferLength < MaxPacketSize);            
        RtlCopyMemory(pTransferContext->BulkContext.pOriginalTransferBuffer,
                      pTransferContext->WorkBuffer,
                      CompletedTransferLength);
        pTransferContext->BulkContext.pTransferBuffer = 
            pTransferContext->BulkContext.pOriginalTransferBuffer;            
    }

    //
    // Update the number of bytes transferred, remaining bytes to transfer 
    // and advance the transfer buffer pointer appropriately.
    //

    pTransferContext->BulkContext.NBytesTransferred += CompletedTransferLength;
    pTransferContext->BulkContext.pTransferBuffer += CompletedTransferLength;
    pTransferContext->BulkContext.RemainingTransferLength -= CompletedTransferLength;

    //
    // If there is still data to transfer and the previous transfer was NOT a
    // short transfer, then issue another request to move the next chunk of data.
    //
    
    if (pTransferContext->BulkContext.RemainingTransferLength > 0) {
        if (!fShortTransfer) {

            USBCAMD_KdPrint(MAX_TRACE,("Queuing next chunk. RemainingSize = %d, pBuffer = 0x%x\n",
                                       pTransferContext->BulkContext.RemainingTransferLength,
                                       pTransferContext->BulkContext.pTransferBuffer));

            if (pTransferContext->BulkContext.RemainingTransferLength < pTransferContext->BulkContext.ChunkSize) {
                pTransferContext->BulkContext.ChunkSize = pTransferContext->BulkContext.RemainingTransferLength;
            }

            //
            // Reinitialize URB
            //
            // If the next transfer is < than 1 packet, change it's destination to be
            // the read buffer.  When this transfer completes, the appropriate amount of data will be
            // copied out of the read buffer and into the user's irp.  
            //

            if  (deviceExtension->PipePinRelations[PipeIndex].PipeDirection == INPUT_PIPE){
                if (pTransferContext->BulkContext.ChunkSize < MaxPacketSize) {
                    pTransferContext->BulkContext.fDestinedForReadBuffer = TRUE;
                    pTransferContext->BulkContext.pOriginalTransferBuffer = pTransferContext->BulkContext.pTransferBuffer;
                    if (pTransferContext->WorkBuffer)
                        pTransferContext->BulkContext.pTransferBuffer = pTransferContext->WorkBuffer;
                    else {
                        pTransferContext->BulkContext.pTransferBuffer = 
                        pTransferContext->WorkBuffer =
                                    USBCAMD_ExAllocatePool(NonPagedPool,MaxPacketSize); 
                        if (pTransferContext->WorkBuffer == NULL ){
                            USBCAMD_KdPrint (MIN_TRACE, ("Error allocating bulk transfer work buffer. \n"));
                            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                        }
                    }   
                    pTransferContext->BulkContext.ChunkSize = MaxPacketSize;
                }
                pTransferContext->BulkContext.ChunkSize = (pTransferContext->BulkContext.ChunkSize / MaxPacketSize) * MaxPacketSize;
            }

            ASSERT(pTransferContext->BulkContext.ChunkSize >= MaxPacketSize);
            ASSERT(0 == pTransferContext->BulkContext.ChunkSize % MaxPacketSize);     
            
            if (STATUS_SUCCESS == ntStatus) {

                // Restore the Irp to the transfer context
                pTransferContext->DataIrp = pIrp;

                // save outstanding IRP in device extension.
                InsertTailList(&PipePinRelations->IrpPendingQueue, &pTransferContext->ListEntry);

                KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

                UsbBuildInterruptOrBulkTransferRequest(pUrb,
                    sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER),
                    deviceExtension->Interface->Pipes[PipeIndex].PipeHandle,
                    pTransferContext->BulkContext.pTransferBuffer,
                    NULL,
                    pTransferContext->BulkContext.ChunkSize,
                    USBD_SHORT_TRANSFER_OK,
                    NULL);

                USBCAMD_RecycleIrp(pTransferContext, 
                                   pTransferContext->DataIrp,
                                   pTransferContext->DataUrb,
                                   USBCAMD_BulkTransferComplete);

                IoCallDriver(deviceExtension->StackDeviceObject, pTransferContext->DataIrp);
            }
            else {

                KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

                IoFreeIrp(pIrp);

                if ( channelExtension == NULL ) {
                    USBCAMD_FreeBulkTransfer(pTransferContext);
                    USBCAMD_ExFreePool(pTransferContext);
                }
                else {
                    USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
                }
            }

            return STATUS_MORE_PROCESSING_REQUIRED;               
        }
    }

    KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

    IoFreeIrp(pIrp);

    USBCAMD_KdPrint(MAX_TRACE,("Completing bulk transfer request. nbytes transferred = %d \n",
                               pTransferContext->BulkContext.NBytesTransferred));        

    //
    // we need to complete the read/write erequest.
    //
    
    if ( channelExtension == NULL ) {
        

        //
        // notify STI monitor if any and schedule a work item to resumbit
        // the interrupt transfer.
        //
        USBCAMD_ResubmitInterruptTransfer(deviceExtension,PipeIndex ,pTransferContext);
    }
    else {

        //
        // this is a stream class bulk read request on the video/still pin.
        //
        USBCAMD_CompleteBulkRead(channelExtension, CompletedTransferStatus);

        USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
    }

    return STATUS_MORE_PROCESSING_REQUIRED;
}

NTSTATUS
USBCAMD_InitializeBulkTransfer(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN PUSBD_INTERFACE_INFORMATION InterfaceInformation,
    IN PUSBCAMD_TRANSFER_EXTENSION TransferExtension,
    IN ULONG PipeIndex
    )
/*++

Routine Description:

    Initializes a bulk or interrupt transfer.

Arguments:

    DeviceExtension - pointer to the device extension for this instance of the USB camera
                    devcice.

    ChannelExtension - extension specific to this video channel

    InterfaceInformation - pointer to USBD interface information structure 
        describing the currently active interface.

    TransferExtension - context information assocaited with this transfer set.        


Return Value:

    NT status code

--*/
{
    ULONG packetSize;
    NTSTATUS ntStatus = STATUS_SUCCESS;

#if DBG
    if ( ChannelExtension != NULL ) {
        ASSERT_CHANNEL(ChannelExtension);
    }
#endif
       
    USBCAMD_KdPrint (ULTRA_TRACE, ("enter USBCAMD_InitializeBulkTransfer\n"));

    TransferExtension->Sig = USBCAMD_TRANSFER_SIG;     
    TransferExtension->DeviceExtension = DeviceExtension;
    TransferExtension->ChannelExtension = ChannelExtension;
    TransferExtension->BulkContext.PipeIndex = PipeIndex;

    KeInitializeEvent(&TransferExtension->BulkContext.CancelEvent, SynchronizationEvent, FALSE);

    ASSERT(
        NULL == TransferExtension->DataUrb &&
        NULL == TransferExtension->SyncBuffer &&
        NULL == TransferExtension->WorkBuffer &&
        NULL == TransferExtension->SyncIrp
        );

    //
    // No pending transfers yet
    //
    packetSize = InterfaceInformation->Pipes[PipeIndex].MaximumPacketSize;

    //
    // Allocate and initialize URB
    //
    
    TransferExtension->DataUrb = USBCAMD_ExAllocatePool(NonPagedPool, 
                                                sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER));
    if (NULL == TransferExtension->DataUrb) {
        USBCAMD_KdPrint(MIN_TRACE,(" cannot allocated bulk URB\n"));
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        return ntStatus;
    }

    RtlZeroMemory(TransferExtension->DataUrb, sizeof(struct _URB_BULK_OR_INTERRUPT_TRANSFER));

    USBCAMD_KdPrint (MAX_TRACE, ("exit USBCAMD_InitializeBulkTransfer 0x%x\n", ntStatus));

    return ntStatus;
}

NTSTATUS
USBCAMD_FreeBulkTransfer(
    IN PUSBCAMD_TRANSFER_EXTENSION TransferExtension
    )
/*++

Routine Description:

    Opposite of USBCAMD_InitializeBulkTransfer, frees resources allocated for an 
    iso transfer.

Arguments:


    TransferExtension - context information for this transfer (pair of iso 
        urbs).

Return Value:

    NT status code

--*/
{
    ASSERT_TRANSFER(TransferExtension);
  
    USBCAMD_KdPrint (MAX_TRACE, ("Free Bulk Transfer\n"));
    
    ASSERT(TransferExtension->DataIrp == NULL);

    if (TransferExtension->WorkBuffer) {
        USBCAMD_ExFreePool(TransferExtension->WorkBuffer);
        TransferExtension->WorkBuffer = NULL;
    }
    
    if (TransferExtension->DataUrb) {
        USBCAMD_ExFreePool(TransferExtension->DataUrb);
        TransferExtension->DataUrb = NULL;
    }

    return STATUS_SUCCESS;
}



VOID
USBCAMD_ResubmitInterruptTransfer(
        IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
        IN ULONG PipeIndex,
        IN PUSBCAMD_TRANSFER_EXTENSION pTransferContext
    )
/*++

Routine Description:

    This routine completes the bnulk read/write request for the video/still pin

Arguments:

Return Value:

--*/    
{
    PINTERRUPT_WORK_ITEM pIntWorkItem;

    //
    // Queue a work item for this Irp
    //

    pIntWorkItem = USBCAMD_ExAllocatePool(NonPagedPool, sizeof(*pIntWorkItem));
    if (pIntWorkItem) {
        ExInitializeWorkItem(&pIntWorkItem->WorkItem,
                             USBCAMD_ProcessInterruptTransferWorkItem,
                             pIntWorkItem);

        pIntWorkItem->pDeviceExt = deviceExtension;       
        pIntWorkItem->pTransferExt = pTransferContext;
        pIntWorkItem->PipeIndex = PipeIndex;
        ExQueueWorkItem(&pIntWorkItem->WorkItem,DelayedWorkQueue);

    } 
    else
        TEST_TRAP();
}

//
// code to handle packet processing outside the DPC routine
//

VOID
USBCAMD_ProcessInterruptTransferWorkItem(
    PVOID Context
    )
/*++

Routine Description:

    Call the mini driver to convert a raw still frame to the proper format.

Arguments:

Return Value:

    None.

--*/
{
    PINTERRUPT_WORK_ITEM pIntWorkItem = Context;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBCAMD_TRANSFER_EXTENSION pTransferContext;
    NTSTATUS ntStatus = STATUS_SUCCESS;
    
    pTransferContext = pIntWorkItem->pTransferExt;
    ASSERT_TRANSFER(pTransferContext);
    deviceExtension = pIntWorkItem->pDeviceExt;

    //
    // this is an external read/write request.
    //

    if (pTransferContext->BulkContext.CommandCompleteCallback) {
        // call the completion handler
        (*pTransferContext->BulkContext.CommandCompleteCallback)
                             (USBCAMD_GET_DEVICE_CONTEXT(deviceExtension), 
                              pTransferContext->BulkContext.CommandCompleteContext, 
                              ntStatus);
    }   

    // notify STI mon if this was an interrupt event.
    if ( pTransferContext->BulkContext.TransferType == INTERRUPT_TRANSFER) 
        if (deviceExtension->CamControlFlag & USBCAMD_CamControlFlag_EnableDeviceEvents) 
            USBCAMD_NotifyStiMonitor(deviceExtension);

    // check if we need to loop back.
    if ( pTransferContext->BulkContext.LoopBack ) 
        ntStatus = USBCAMD_RestoreOutstandingIrp(deviceExtension,pIntWorkItem->PipeIndex,pTransferContext);

   if (ntStatus != STATUS_SUCCESS) {
        // we have an error on the submission set the stream error flag
        // and exit.
        TEST_TRAP();
   }

    USBCAMD_ExFreePool(pIntWorkItem);
}   



VOID
USBCAMD_CompleteBulkRead(
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN NTSTATUS ntStatus
    )
/*++

Routine Description:

    This routine completes the bnulk read/write request for the video/still pin

Arguments:

Return Value:

--*/    
{
    PUSBCAMD_WORK_ITEM usbWorkItem;

#if DBG
    // 
    // we increment capture frame counter in ch ext. regardles of read srb
    // availability
    ChannelExtension->FrameCaptured++;  
#endif

    //
    // Queue a work item for this Irp
    //

    usbWorkItem = USBCAMD_ExAllocatePool(NonPagedPool, sizeof(*usbWorkItem));
    if (usbWorkItem) {
        ExInitializeWorkItem(&usbWorkItem->WorkItem,
                             USBCAMD_ProcessStillReadWorkItem,
                             usbWorkItem);

        usbWorkItem->ChannelExtension = ChannelExtension;
        usbWorkItem->status = ntStatus;
        ExQueueWorkItem(&usbWorkItem->WorkItem,
                        DelayedWorkQueue);

    } 
    else
        TEST_TRAP();
}

//
// code to handle packet processing outside the DPC routine
//

VOID
USBCAMD_ProcessStillReadWorkItem(
    PVOID Context
    )
/*++

Routine Description:

    Call the mini driver to convert a raw still frame to the proper format.

Arguments:

Return Value:

    None.

--*/
{
    PUSBCAMD_WORK_ITEM usbWorkItem = Context;
    PVOID frameBuffer;
    ULONG maxLength,i;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;    
    PUSBCAMD_READ_EXTENSION readExtension;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    ULONG bytesTransferred, index;
    NTSTATUS status;
    PHW_STREAM_REQUEST_BLOCK srb;
    PKSSTREAM_HEADER dataPacket;
    PUSBCAMD_TRANSFER_EXTENSION pTransferContext;
    PLIST_ENTRY listEntry = NULL;
    LARGE_INTEGER DelayTime = {(ULONG)(-5 * 1000 * 10), -1};

    status = usbWorkItem->status;
    channelExtension = usbWorkItem->ChannelExtension;
    ASSERT_CHANNEL(channelExtension);

    
    pTransferContext = &channelExtension->TransferExtension[channelExtension->CurrentBulkTransferIndex];  
    //
    // DSHOW buffer len returned will be equal raw frame len unless we 
    // process raw frame buffer in ring 0.
    //
    bytesTransferred = pTransferContext->BulkContext.NBytesTransferred;
    deviceExtension = channelExtension->DeviceExtension;

    //
    // get a pending read srb
    //

    for ( i=0; i < 2; i++) {
        listEntry =  ExInterlockedRemoveHeadList( &(channelExtension->PendingIoList),
                                             &channelExtension->PendingIoListSpin);
        if (listEntry )
            break;

        USBCAMD_KdPrint (MIN_TRACE, ("No Read Srbs available. Delay excution \n"));

        KeDelayExecutionThread(KernelMode,FALSE,&DelayTime);
    }   
    
    if ( listEntry ) { // chk if no more read SRBs in Q. 

        readExtension = (PUSBCAMD_READ_EXTENSION) CONTAINING_RECORD(listEntry, 
                                                     USBCAMD_READ_EXTENSION, 
                                                     ListEntry);       

        ASSERT_READ(readExtension);

        // Let client driver initiate the SRB extension.
        
        (*deviceExtension->DeviceDataEx.DeviceData2.CamNewVideoFrameEx)
                                       (USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                                        USBCAMD_GET_FRAME_CONTEXT(readExtension),
                                        channelExtension->StreamNumber,
                                        &readExtension->ActualRawFrameLen);
        

        srb = readExtension->Srb;
        dataPacket = srb->CommandData.DataBufferArray;
        dataPacket->OptionsFlags =0;    

        if ((status == STATUS_SUCCESS) && (!channelExtension->NoRawProcessingRequired)) {

            frameBuffer = USBCAMD_GetFrameBufferFromSrb(readExtension->Srb,&maxLength);

            // Ensure that the buffer size appears to be exactly what was requested
            ASSERT(maxLength >= channelExtension->VideoInfoHeader->bmiHeader.biSizeImage);
            maxLength = channelExtension->VideoInfoHeader->bmiHeader.biSizeImage;

            USBCAMD_DbgLog(TL_SRB_TRACE, '0ypC', srb, frameBuffer, 0);

            status = 
                (*deviceExtension->DeviceDataEx.DeviceData2.CamProcessRawVideoFrameEx)(
                    deviceExtension->StackDeviceObject,
                    USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                    USBCAMD_GET_FRAME_CONTEXT(readExtension),
                    frameBuffer,
                    maxLength,
                    pTransferContext->DataBuffer,
                    readExtension->RawFrameLength,
                    0,
                    &bytesTransferred,
                    pTransferContext->BulkContext.NBytesTransferred,
                    srb->StreamObject->StreamNumber);                   
        }

        USBCAMD_KdPrint (MAX_TRACE, ("CamProcessRawframeEx Completed, length = %d status = 0x%X \n",
                                        bytesTransferred,status));

        // The number of bytes transfer of the read is set above just before
        // USBCAMD_CompleteReadRequest is called.

        USBCAMD_CompleteRead(channelExtension,readExtension,status,bytesTransferred); 
    }
    else {
            USBCAMD_KdPrint (MIN_TRACE, ("Dropping Video Frame.\n"));
#if DBG
            pTransferContext->ChannelExtension->VideoFrameLostCount++;
#endif

            
            // and send a note to the camera driver about the cancellation.
            // send a CamProcessrawFrameEx with null buffer ptr.
            if ( !channelExtension->NoRawProcessingRequired) {

                status = 
                        (*deviceExtension->DeviceDataEx.DeviceData2.CamProcessRawVideoFrameEx)(
                             deviceExtension->StackDeviceObject,
                             USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                             NULL,
                             NULL,
                             0,
                             NULL,
                             0,
                             0,
                             NULL,
                             0,
                             0);
            }
            
    }

    channelExtension->CurrentBulkTransferIndex ^= 1; // toggle index.
    index = channelExtension->CurrentBulkTransferIndex;
    status = USBCAMD_IntOrBulkTransfer(deviceExtension,
                        channelExtension,
                        channelExtension->TransferExtension[index].DataBuffer,
                        channelExtension->TransferExtension[index].BufferLength,
                        channelExtension->DataPipe,
                        NULL,
                        NULL,
                        0,
                        BULK_TRANSFER);        

    USBCAMD_ExFreePool(usbWorkItem);
}   


/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/

NTSTATUS
USBCAMD_CancelOutstandingBulkIntIrps(
        IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
        IN BOOLEAN bSaveIrp
        )
{

    NTSTATUS ntStatus= STATUS_SUCCESS;
    ULONG PipeIndex;


   for ( PipeIndex = 0; PipeIndex < deviceExtension->Interface->NumberOfPipes; PipeIndex++ ) {

        if ( USBCAMD_OutstandingIrp(deviceExtension, PipeIndex)) {

            // there is a pending IRP on this Pipe. Cancel it
            ntStatus = USBCAMD_CancelOutstandingIrp(deviceExtension,PipeIndex,bSaveIrp);
        }
    }

    return ntStatus;
}

/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/

NTSTATUS
USBCAMD_CancelOutstandingIrp(
        IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
        IN ULONG PipeIndex,
        IN BOOLEAN bSaveIrp
        )
{
    PUSBCAMD_PIPE_PIN_RELATIONS PipePinRelations = &deviceExtension->PipePinRelations[PipeIndex];
    LIST_ENTRY LocalList;
    KIRQL Irql;
    NTSTATUS ntStatus = STATUS_SUCCESS;

    InitializeListHead(&LocalList);

    // Cancel all the outstanding IRPs at once, saving them in a local queue for post-processing
    KeAcquireSpinLock(&PipePinRelations->OutstandingIrpSpinlock, &Irql);

    while (!IsListEmpty(&PipePinRelations->IrpPendingQueue)) {

        PLIST_ENTRY pListEntry;
        PUSBCAMD_TRANSFER_EXTENSION pTransferContext;

        pListEntry = RemoveHeadList(&PipePinRelations->IrpPendingQueue);
        pTransferContext = (PUSBCAMD_TRANSFER_EXTENSION)
            CONTAINING_RECORD(pListEntry, USBCAMD_TRANSFER_EXTENSION, ListEntry);

        ASSERT_TRANSFER(pTransferContext);
        ASSERT(pTransferContext->DataIrp != NULL);

        IoCancelIrp(pTransferContext->DataIrp);

        InsertTailList(&LocalList, &pTransferContext->ListEntry);
    }

    KeReleaseSpinLock(&PipePinRelations->OutstandingIrpSpinlock, Irql);

    while (!IsListEmpty(&LocalList)) {

        PLIST_ENTRY pListEntry;
        PUSBCAMD_TRANSFER_EXTENSION pTransferContext;

        pListEntry = RemoveHeadList(&LocalList);
        pTransferContext = (PUSBCAMD_TRANSFER_EXTENSION)
            CONTAINING_RECORD(pListEntry, USBCAMD_TRANSFER_EXTENSION, ListEntry);

        if (pTransferContext->ChannelExtension) {

            USBCAMD_ResetPipes(
                deviceExtension,
                pTransferContext->ChannelExtension,
                deviceExtension->Interface,
                TRUE
                );   
        }

        USBCAMD_KdPrint (MAX_TRACE, ("Wait for Bulk transfer Irp to complete with Cancel.\n"));

        ntStatus = KeWaitForSingleObject(
                   &pTransferContext->BulkContext.CancelEvent,
                   Executive,
                   KernelMode,
                   FALSE,
                   NULL);   

        if (!bSaveIrp) {

            // Inform Cam minidriver only if cancellation is permanent.
            if (pTransferContext->BulkContext.CommandCompleteCallback) {
                // call the completion handler
                (*pTransferContext->BulkContext.CommandCompleteCallback)
                                (USBCAMD_GET_DEVICE_CONTEXT(deviceExtension), 
                                 pTransferContext->BulkContext.CommandCompleteContext, 
                                 STATUS_CANCELLED);
            }
   
            // recycle allocate resources for the cancelled transfer.
            if ( pTransferContext->ChannelExtension == NULL ) {
                USBCAMD_FreeBulkTransfer(pTransferContext);  
                USBCAMD_ExFreePool(pTransferContext);
            }
        }
        else {

            // Save this in the restore queue (no need to protect with the spinlock)
            InsertTailList(&PipePinRelations->IrpRestoreQueue, &pTransferContext->ListEntry);
        }
    }

    return ntStatus;
}


/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/

NTSTATUS
USBCAMD_RestoreOutstandingBulkIntIrps(
        IN PUSBCAMD_DEVICE_EXTENSION deviceExtension
        )
{

    NTSTATUS ntStatus= STATUS_SUCCESS;
    ULONG PipeIndex;
    PUSBCAMD_TRANSFER_EXTENSION pTransExt;

    for ( PipeIndex = 0; PipeIndex < deviceExtension->Interface->NumberOfPipes; PipeIndex++ ) {

        // there are pending IRPs on this Pipe. restore them
        for ( ;;) {
            // Dequeue this irp from the restore Q.

            pTransExt = USBCAMD_DequeueFirstIrp(deviceExtension,
                PipeIndex,
                &deviceExtension->PipePinRelations[PipeIndex].IrpRestoreQueue);

            if ( pTransExt == NULL ) 
                break;

            ntStatus = USBCAMD_RestoreOutstandingIrp(deviceExtension,PipeIndex,pTransExt);
        }
    }
    return ntStatus;
}


/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/

NTSTATUS
USBCAMD_RestoreOutstandingIrp(
        IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
        IN ULONG PipeIndex,
        IN PUSBCAMD_TRANSFER_EXTENSION pTransferContext
        )
{

    NTSTATUS ntStatus = STATUS_SUCCESS;
    PVOID pBuffer,commandContext;
    ULONG TransferSize;
    PCOMMAND_COMPLETE_FUNCTION commandComplete;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;
    BOOLEAN LoopBack;
    UCHAR TransferType;
            

    ASSERT_TRANSFER(pTransferContext);
    USBCAMD_KdPrint (MAX_TRACE, ("Restore Bulk/int transfer .\n"));

    // get all the relavent data from transfer context.
    pBuffer = pTransferContext->BulkContext.pOriginalTransferBuffer;
    TransferSize = pTransferContext->BulkContext.ChunkSize;
    commandComplete = pTransferContext->BulkContext.CommandCompleteCallback;
    commandContext = pTransferContext->BulkContext.CommandCompleteContext;
    LoopBack = pTransferContext->BulkContext.LoopBack;
    TransferType = pTransferContext->BulkContext.TransferType;
    channelExtension = pTransferContext->ChannelExtension;
   
    // recycle allocate resources for the cancelled transfer.

    if ( channelExtension == NULL ) {
       USBCAMD_FreeBulkTransfer(pTransferContext);  
       USBCAMD_ExFreePool(pTransferContext);
    }

    // request a new transfer with the resotred data.
    ntStatus = USBCAMD_IntOrBulkTransfer(deviceExtension,
                                         channelExtension,
                                         pBuffer,
                                         TransferSize,
                                         PipeIndex,
                                         commandComplete,
                                         commandContext,
                                         LoopBack,
                                         TransferType);        
    return ntStatus;
}

/*++

Routine Description:

    This routine will cancel any pending a read or write operation on a specified 
    bulk pipe. 

Arguments:

    DeviceContext - 

    PipeIndex - 



Return Value:

    NT status code

--*/

NTSTATUS
USBCAMD_CancelBulkReadWrite( 
    IN PVOID DeviceContext,
    IN ULONG PipeIndex
    )
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
 
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBD_PIPE_INFORMATION pipeHandle ;

    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);


    USBCAMD_KdPrint ( MAX_TRACE, ("Enter USBCAMD_CancelBulkReadWrite\n"));

    //
    // do some parameter validation.
    //

    if (PipeIndex > deviceExtension->Interface->NumberOfPipes) {
        
        USBCAMD_KdPrint(MIN_TRACE,("invalid pipe index!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    // check if we have a pending read or write already. 

    if (!USBCAMD_OutstandingIrp(deviceExtension, PipeIndex) ) {
        // no pending IRP for this pipe ...
        ntStatus = STATUS_SUCCESS;        
        return ntStatus;            
    }
        
    pipeHandle = &deviceExtension->Interface->Pipes[PipeIndex];

    if (pipeHandle->PipeType < UsbdPipeTypeBulk ) {
     
        USBCAMD_KdPrint(MIN_TRACE,("invalid pipe type!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;        
        return ntStatus;        
    }

    if (KeGetCurrentIrql() >= DISPATCH_LEVEL) {
        USBCAMD_KdPrint(MIN_TRACE,("BulkCancel is cancelable at Passive Level Only!\n"));
        ntStatus = STATUS_INVALID_PARAMETER;   
        TEST_TRAP();
        return ntStatus;       
    }
  
    // there is a pending IRP on this Pipe. Cancel it
    ntStatus = USBCAMD_CancelOutstandingIrp(deviceExtension,PipeIndex,FALSE);

    return ntStatus;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\usbcamd\dbglog.c ===
/*++

Copyright (c) 1998  Microsoft Corporation

Module Name:

  dbglog.c

Abstract:

   Debug logging code USB camera driver

Environment:

    kernel mode only

Notes:

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
  PURPOSE.

  Copyright (c) 1998 Microsoft Corporation.  All Rights Reserved.


Revision History:

    Original 3/96 John Dunn
    Updated  3/98 Husni Roukbi

--*/

#include "usbcamd.h"


VOID
USBCAMD_Debug_LogEntry(
    IN CHAR *Name,
    IN ULONG_PTR Info1,
    IN ULONG Info2,
    IN ULONG Info3
    )

{
#if DBG
    // If any vendor log level selected, then all vendor-initiated logs are enabled
    if (USBCAMD_LogBuffer && (TL_VND_MASK & USBCAMD_LogMask)) {

        ULONG Tag;
        int idx;

        // Fill the tag with the vendor-supplied characters
        for (Tag = '    ', idx = 0; idx < sizeof(ULONG) && Name[idx]; idx++) {
            Tag |= Name[idx] << (idx*8);
        }

        USBCAMD_DbgLogInternal(Tag, (ULONG_PTR)Info1, (ULONG_PTR)Info2, (ULONG_PTR)Info3);
    }
#endif
}

#if DBG
PCHAR PnPSystemPowerStateString(
        ULONG SystemPowerState
)
{
    static char szBuffer[80];
    switch (SystemPowerState) {
    case PowerSystemUnspecified:
        return "<PowerSystemUnspecified>"; 
    case PowerSystemWorking:
        return "S0(Working)";
    case PowerSystemSleeping1:
        return "S1(Sleeping1)";
    case PowerSystemSleeping2:
        return "S2(Sleeping2)";
    case PowerSystemSleeping3:
        return "S3(Sleeping3)";
    case PowerSystemHibernate:
        return "S4(Hibernate)";
    case PowerSystemShutdown:
        return "S5(Shutdown)";
    case PowerSystemMaximum:
        return "<PowerSystemMaximum>";
    default: 
        sprintf(szBuffer,"Unknown SystemPowerState(0x%x)", SystemPowerState);
        return szBuffer;
    }
}

PCHAR PnPDevicePowerStateString(
        ULONG DevicePowerState
)
{
    static char szBuffer[80];
    switch (DevicePowerState)
    {
    case PowerDeviceUnspecified:
        return "<PowerDeviceUnspecified>";
    case PowerDeviceD0:
        return "D0(Fully On)";
    case PowerDeviceD1:
        return "D1(Almost On)";
    case PowerDeviceD2:
        return "D2(Almost Off)";
    case PowerDeviceD3:
        return "D3(Fully Off)";
    case PowerDeviceMaximum:
        return "<PowerDeviceMaximum>";
    default:
        sprintf(szBuffer,"Unknown DevicePowerState(0x%x)", DevicePowerState);
        return szBuffer;
    }
}


PCHAR
PnPPowerString (
    UCHAR MinorFunction
)
{
    static char szBuffer[80];
    switch (MinorFunction) 
    {
        case IRP_MN_WAIT_WAKE:
            return "IRP_MN_WAIT_WAKE";
        case IRP_MN_POWER_SEQUENCE:
            return "IRP_MN_POWER_SEQUENCE";
        case IRP_MN_SET_POWER:
            return "IRP_MN_SET_POWER";
        case IRP_MN_QUERY_POWER:
            return "IRP_MN_QUERY_POWER";
        default:
            sprintf(szBuffer,"Unknown Power Irp: MinorFunction=0x%x", MinorFunction);
            return szBuffer;
    }
}
//*****************************************************************************
//
// PnPMinorFunctionString()
//
// MinorFunction - The IRP_MJ_PNP minor function
//
//*****************************************************************************

PCHAR
PnPMinorFunctionString (
    UCHAR MinorFunction
)
{
    static char szBuffer[80];
    switch (MinorFunction)
    {
        case IRP_MN_START_DEVICE:
            return "IRP_MN_START_DEVICE";
        case IRP_MN_QUERY_REMOVE_DEVICE:
            return "IRP_MN_QUERY_REMOVE_DEVICE";
        case IRP_MN_REMOVE_DEVICE:
            return "IRP_MN_REMOVE_DEVICE";
        case IRP_MN_CANCEL_REMOVE_DEVICE:
            return "IRP_MN_CANCEL_REMOVE_DEVICE";
        case IRP_MN_STOP_DEVICE:
            return "IRP_MN_STOP_DEVICE";
        case IRP_MN_QUERY_STOP_DEVICE:
            return "IRP_MN_QUERY_STOP_DEVICE";
        case IRP_MN_CANCEL_STOP_DEVICE:
            return "IRP_MN_CANCEL_STOP_DEVICE";
        case IRP_MN_QUERY_DEVICE_RELATIONS:
            return "IRP_MN_QUERY_DEVICE_RELATIONS";
        case IRP_MN_QUERY_INTERFACE:
            return "IRP_MN_QUERY_INTERFACE";
        case IRP_MN_QUERY_CAPABILITIES:
            return "IRP_MN_QUERY_CAPABILITIES";
        case IRP_MN_QUERY_RESOURCES:
            return "IRP_MN_QUERY_RESOURCES";
        case IRP_MN_QUERY_RESOURCE_REQUIREMENTS:
            return "IRP_MN_QUERY_RESOURCE_REQUIREMENTS";
        case IRP_MN_QUERY_DEVICE_TEXT:
            return "IRP_MN_QUERY_DEVICE_TEXT";
        case IRP_MN_FILTER_RESOURCE_REQUIREMENTS:
            return "IRP_MN_FILTER_RESOURCE_REQUIREMENTS";
        case IRP_MN_READ_CONFIG:
            return "IRP_MN_READ_CONFIG";
        case IRP_MN_WRITE_CONFIG:
            return "IRP_MN_WRITE_CONFIG";
        case IRP_MN_EJECT:
            return "IRP_MN_EJECT";
        case IRP_MN_SET_LOCK:
            return "IRP_MN_SET_LOCK";
        case IRP_MN_QUERY_ID:
            return "IRP_MN_QUERY_ID";
        case IRP_MN_QUERY_PNP_DEVICE_STATE:
            return "IRP_MN_QUERY_PNP_DEVICE_STATE";
        case IRP_MN_QUERY_BUS_INFORMATION:
            return "IRP_MN_QUERY_BUS_INFORMATION";
        case IRP_MN_DEVICE_USAGE_NOTIFICATION:
            return "IRP_MN_DEVICE_USAGE_NOTIFICATION";
        case IRP_MN_SURPRISE_REMOVAL:
            return "IRP_MN_SURPRISE_REMOVAL";
        default:
            sprintf(szBuffer,"Unknown PnP Irp: MinorFunction=0x%x", MinorFunction);
            return szBuffer;
    }
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\usbcamd\stream.c ===
/*++

Copyright (c) 1998  Microsoft Corporation

Module Name:

   stream.c

Abstract:

    contains all the code that interfaces with the WDM stream class driver.


Environment:

   Kernel mode only


Revision History:

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
  PURPOSE.

  Copyright (c) 1998 Microsoft Corporation.  All Rights Reserved.

    Original 3/96 John Dunn
    Updated  3/98 Husni Roukbi

--*/


#define INITGUID
#include "usbcamd.h"


VOID STREAMAPI
AdapterReceivePacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID
AdapterTimeoutPacket(
    PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID
AdapterCancelPacket(
    PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID STREAMAPI
USBCAMD_ReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID STREAMAPI
USBCAMD_ReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID
AdapterCloseStream(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID
AdapterOpenStream(
    PHW_STREAM_REQUEST_BLOCK Srb
    );

VOID
AdapterStreamInfo(
    PHW_STREAM_REQUEST_BLOCK Srb
    );

__inline void
COMPLETE_STREAM_READ(
    PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    if (Srb->Command == SRB_READ_DATA) {

        if (0 == Srb->CommandData.DataBufferArray->DataUsed) {
#if 0
            // Enable this code if you want to see intermittent green frames
            ULONG maxLength;
            PVOID frameBuffer;

            frameBuffer = USBCAMD_GetFrameBufferFromSrb(Srb,&maxLength);

            RtlZeroMemory(frameBuffer, maxLength);
#else
            Srb->Status = STATUS_CANCELLED;
#endif
        }
    }

    USBCAMD_DbgLog(TL_SRB_TRACE, '-brS', Srb, Srb->Command, (ULONG_PTR)Srb->Status);
    StreamClassStreamNotification(StreamRequestComplete, Srb->StreamObject, Srb);
}

#if DBG
ULONG USBCAMD_HeapCount = 0;
#endif


//////////////////////
// EVENTS
//////////////////////

KSEVENT_ITEM VIDCAPTOSTIItem[] =
{
    {
        KSEVENT_VIDCAPTOSTI_EXT_TRIGGER,
        0,
        0,
        NULL,
        NULL,
        NULL
    }
};

GUID USBCAMD_KSEVENTSETID_VIDCAPTOSTI = {STATIC_KSEVENTSETID_VIDCAPTOSTI};

KSEVENT_SET VIDCAPTOSTIEventSet[] =
{
    {
        &USBCAMD_KSEVENTSETID_VIDCAPTOSTI,
        SIZEOF_ARRAY(VIDCAPTOSTIItem),
        VIDCAPTOSTIItem,
    }
};



//---------------------------------------------------------------------------
// Topology
//---------------------------------------------------------------------------

// Categories define what the device does.

static GUID Categories[] = {
    STATIC_KSCATEGORY_VIDEO,
    STATIC_PINNAME_VIDEO_STILL,
    STATIC_KSCATEGORY_CAPTURE
};

#define NUMBER_OF_CATEGORIES  SIZEOF_ARRAY (Categories)

static KSTOPOLOGY Topology = {
    NUMBER_OF_CATEGORIES,
    (GUID*) &Categories,
    0,
    NULL,
    0,
    NULL
};

// ------------------------------------------------------------------------
// Property sets for all video capture streams
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_TABLE(VideoStreamConnectionProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY),                     // MinProperty
        sizeof(KSALLOCATOR_FRAMING),            // MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        sizeof(ULONG)                           // SerializedSize
    ),
};

DEFINE_KSPROPERTY_TABLE(VideoStreamDroppedFramesProperties)
{
    DEFINE_KSPROPERTY_ITEM
    (
        KSPROPERTY_DROPPEDFRAMES_CURRENT,
        TRUE,                                   // GetSupported or Handler
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinProperty
        sizeof(KSPROPERTY_DROPPEDFRAMES_CURRENT_S),// MinData
        FALSE,                                  // SetSupported or Handler
        NULL,                                   // Values
        0,                                      // RelationsCount
        NULL,                                   // Relations
        NULL,                                   // SupportHandler
        0                                       // SerializedSize
    ),
};


// ------------------------------------------------------------------------
// Array of all of the property sets supported by video streams
// ------------------------------------------------------------------------

DEFINE_KSPROPERTY_SET_TABLE(VideoStreamProperties)
{
    DEFINE_KSPROPERTY_SET
    (
        &KSPROPSETID_Connection,                        // Set
        SIZEOF_ARRAY(VideoStreamConnectionProperties),  // PropertiesCount
        VideoStreamConnectionProperties,                // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
    DEFINE_KSPROPERTY_SET
    (
        &PROPSETID_VIDCAP_DROPPEDFRAMES,                // Set
        SIZEOF_ARRAY(VideoStreamDroppedFramesProperties),  // PropertiesCount
        VideoStreamDroppedFramesProperties,                // PropertyItem
        0,                                              // FastIoCount
        NULL                                            // FastIoTable
    ),
};

#define NUMBER_VIDEO_STREAM_PROPERTIES (SIZEOF_ARRAY(VideoStreamProperties))


NTSTATUS
DllUnload(
          void
)
{
    USBCAMD_KdPrint(MIN_TRACE, ("Unloading USBCAMD\n"));
    return (STATUS_SUCCESS);
}



ULONG
DriverEntry(
    PVOID Context1,
    PVOID Context2
    )
{
    // this function is not used
    return STATUS_SUCCESS;
}


/*
** DriverEntry()
**
** This routine is called when the mini driver is first loaded.  The driver
** should then call the StreamClassRegisterAdapter function to register with
** the stream class driver
**
** Arguments:
**
**  Context1:  The context arguments are private plug and play structures
**             used by the stream class driver to find the resources for this
**             adapter
**  Context2:
**
**      NOTICE if we take the config descriptor and the interface number
**              we can support multiple interafces
**
** Returns:
**
** This routine returns an NT_STATUS value indicating the result of the
** registration attempt. If a value other than STATUS_SUCCESS is returned, the
** minidriver will be unloaded.
**
** Side Effects:  none
*/

ULONG
USBCAMD_DriverEntry(
    PVOID Context1,
    PVOID Context2,
    ULONG DeviceContextSize,
    ULONG FrameContextSize,
    PADAPTER_RECEIVE_PACKET_ROUTINE AdapterReceivePacket
    )
{

    // Hardware Initialization data structure
    HW_INITIALIZATION_DATA hwInitData;

    // Note: all unused fields should be zero

    hwInitData.HwInitializationDataSize = sizeof(hwInitData);

    // Entry points for the mini Driver.

    hwInitData.HwInterrupt = NULL;  // IRQ handling routine

    //
    // data handling routines
    //

    hwInitData.HwReceivePacket = AdapterReceivePacket;
    hwInitData.HwCancelPacket = AdapterCancelPacket;
    hwInitData.HwRequestTimeoutHandler = AdapterTimeoutPacket;

    // Sizes for data structure extensions.  See mpinit.h for definitions

    hwInitData.DeviceExtensionSize = sizeof(USBCAMD_DEVICE_EXTENSION) +
        DeviceContextSize;
    hwInitData.PerRequestExtensionSize = sizeof(USBCAMD_READ_EXTENSION) +
        FrameContextSize;
    hwInitData.FilterInstanceExtensionSize = 0;
    hwInitData.PerStreamExtensionSize = sizeof(USBCAMD_CHANNEL_EXTENSION);

    // We do not use DMA in our driver,
    // since it does not use the hardware directly.

    hwInitData.BusMasterDMA = FALSE;
    hwInitData.Dma24BitAddresses = FALSE;
    hwInitData.DmaBufferSize = 0;
    hwInitData.BufferAlignment = 3;

    // Turn off synchronization - we support re-entrancy.

    hwInitData.TurnOffSynchronization = TRUE;

    //
    // attempt to register with the streaming class driver.  Note, this will
    // result in calls to the HwReceivePacket routine.
    //

    return (StreamClassRegisterAdapter(Context1,
                                       Context2,
                                       &hwInitData));

}


/*
** HwInitialize()
**
**   Initializes an adapter accessed through the information provided in the
**   ConfigInfo structure
**
** Arguments:
**
**   SRB - pointer to the request packet for the initialise command
**
**    ->ConfigInfo - provides the I/O port, memory windows, IRQ, and DMA levels
**                that should be used to access this instance of the device
**
** Returns:
**
**       STATUS_SUCCESS - if the card initializes correctly
**       STATUS_NO_SUCH_DEVICE - or other if the card is not found, or does
**                               not initialize correctly.
**
**
** Side Effects:  none
*/

NTSTATUS
HwInitialize(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PUSBCAMD_DEVICE_DATA DeviceData
    )
{
    int i;
    PPORT_CONFIGURATION_INFORMATION configInfo = Srb->CommandData.ConfigInfo;
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) configInfo->HwDeviceExtension;
    PDEVICE_OBJECT physicalDeviceObject = configInfo->PhysicalDeviceObject;

#if DBG
    USBCAMD_InitDbg();

    USBCAMD_KdPrint(MIN_TRACE, ("Enter HwInitialize\n"));
#endif

    if (configInfo->NumberOfAccessRanges > 0) {
        TRAP();
        USBCAMD_KdPrint(MIN_TRACE, ("illegal config info"));

        return (STATUS_NO_SUCH_DEVICE);
    }
    // Initialize flags for the device object
    configInfo->ClassDeviceObject->Flags |= DO_DIRECT_IO;
    configInfo->ClassDeviceObject->Flags &= ~DO_DEVICE_INITIALIZING;

    //
    // remember the Physical device Object for apis to the
    // usb stack
    //
    deviceExtension->StackDeviceObject = physicalDeviceObject;
    // and our FDO.
    deviceExtension->SCDeviceObject = configInfo->ClassDeviceObject;
    // and our PNP PDO
    deviceExtension->RealPhysicalDeviceObject = configInfo->RealPhysicalDeviceObject;
  #if DBG
    deviceExtension->TimeIncrement = KeQueryTimeIncrement();
  #endif

    InitializeListHead( &deviceExtension->CompletedReadSrbList);
    KeInitializeSemaphore(&deviceExtension->CompletedSrbListSemaphore,0,0x7fffffff);
    
    // In case usbcamd is used with old stream.sys,
    // which has not implemented RealPhysicalDeviceObject.
    if(!deviceExtension->RealPhysicalDeviceObject)
        deviceExtension->RealPhysicalDeviceObject =
                    deviceExtension->StackDeviceObject;

    ASSERT(deviceExtension->StackDeviceObject != 0);
    deviceExtension->IsoThreadObject = NULL;
    deviceExtension->Sig = USBCAMD_EXTENSION_SIG;

    if ( deviceExtension->Usbcamd_version != USBCAMD_VERSION_200) {
        deviceExtension->DeviceDataEx.DeviceData =  *DeviceData;
    }

    // we initialize stream count to 1. USBCAMD_ConfigureDevice will set it to the right
    // number eventually on successfull return.

    deviceExtension->StreamCount = 1; // in this mode we support one stream only.

    for ( i=0; i < MAX_STREAM_COUNT; i++) {
        deviceExtension->ChannelExtension[i] = NULL;
    }

    deviceExtension->CurrentPowerState = PowerDeviceD0;
    deviceExtension->Initialized = DEVICE_INIT_STARTED;

    //
    // Configure the USB device
    //

    ntStatus = USBCAMD_StartDevice(deviceExtension);

    if ( NT_SUCCESS(ntStatus)) {

        //
        // initialize the size of stream descriptor information.
        // we have one stream descriptor, and we attempt to dword align the
        // structure.
        //

        configInfo->StreamDescriptorSize =
            deviceExtension->StreamCount * (sizeof (HW_STREAM_INFORMATION)) + // n stream descriptor
            sizeof (HW_STREAM_HEADER);             // and 1 stream header

        USBCAMD_KdPrint(MAX_TRACE, ("StreamDescriptorSize = %d\n", configInfo->StreamDescriptorSize));

        for ( i=0; i < MAX_STREAM_COUNT; i++ ) {
            InitializeListHead (&deviceExtension->StreamControlSRBList[i]);
            deviceExtension->ProcessingControlSRB[i] = FALSE;
        }

        KeInitializeSpinLock (&deviceExtension->ControlSRBSpinLock);
        KeInitializeSpinLock (&deviceExtension->DispatchSpinLock);
    //    KeInitializeEvent(&deviceExtension->BulkReadSyncEvent,SynchronizationEvent, TRUE);

        deviceExtension->CameraUnplugged = FALSE;
        deviceExtension->Initialized = DEVICE_INIT_COMPLETED;
#if DBG
        deviceExtension->InitCount++;
#endif
        deviceExtension->EventCount = 0;  // initialize event to disable state.

    }
#if DBG
    else {
        USBCAMD_ExitDbg();
    }
#endif

    return (ntStatus);
}

/*
** HwUnInitialize()
**
**   Release all resources and clean up the hardware
**
** Arguments:
**
**      DeviceExtension - pointer to the deviceextension structure for the
**                       the device to be free'd
**
** Returns:
**
** Side Effects:  none
*/

NTSTATUS
HwUnInitialize(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    ULONG i;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;

    USBCAMD_KdPrint(MIN_TRACE, ("HwUnintialize\n"));

    //
    // delay the call to remove until every stream is closed
    //
    for ( i=0 ; i < deviceExtension->StreamCount; i++) {
        channelExtension = deviceExtension->ChannelExtension[i];
        if (channelExtension) 
            USBCAMD_CleanupChannel(deviceExtension, channelExtension, i);
    }
    deviceExtension->Initialized = DEVICE_UNINITIALIZED;

    USBCAMD_KdPrint(MIN_TRACE, ("HwUnintialize, remove device\n"));

    USBCAMD_RemoveDevice(deviceExtension);

#if DBG
    deviceExtension->InitCount--;
    ASSERT (deviceExtension->InitCount == 0);

    USBCAMD_ExitDbg();
#endif

    return STATUS_SUCCESS;
}


/*
** AdapterCancelPacket()
**
**   Request to cancel a packet that is currently in process in the minidriver
**
** Arguments:
**
**   Srb - pointer to request packet to cancel
**
** Returns:
**
** Side Effects:  none
*/

VOID
AdapterCancelPacket(
    PHW_STREAM_REQUEST_BLOCK pSrbToCancel
    )
{
    USBCAMD_KdPrint(MIN_TRACE, ("Request to cancel SRB %x \n", pSrbToCancel));

    USBCAMD_DbgLog(TL_SRB_TRACE, 'lcnC',
        pSrbToCancel,
        0,
        0
        );

    // check  on SRB type : adapter, stream data or control?

    if (pSrbToCancel->Flags & (SRB_HW_FLAGS_DATA_TRANSFER | SRB_HW_FLAGS_STREAM_REQUEST)) {

        PLIST_ENTRY ListEntry;
        BOOL Found= FALSE;
        PUSBCAMD_READ_EXTENSION pSrbExt;
        PUSBCAMD_CHANNEL_EXTENSION channelExtension =
            (PUSBCAMD_CHANNEL_EXTENSION) pSrbToCancel->StreamObject->HwStreamExtension;
        PUSBCAMD_DEVICE_EXTENSION deviceExtension =
            (PUSBCAMD_DEVICE_EXTENSION) pSrbToCancel->HwDeviceExtension;

        //
        // check for data stream SRBs in here.
        //
        if (channelExtension->DataPipeType == UsbdPipeTypeIsochronous) {

            KeAcquireSpinLockAtDpcLevel(&channelExtension->CurrentRequestSpinLock);

            //
            // check and see if the SRB is being processed by the bus stack currently.
            //
            pSrbExt = channelExtension->CurrentRequest;

            if (pSrbExt && pSrbExt->Srb == pSrbToCancel) {

                channelExtension->CurrentRequest = NULL;
                Found = TRUE;
                USBCAMD_KdPrint(MIN_TRACE, ("Current Srb %x is Cancelled\n", pSrbToCancel));
            }
            else {

                //
                // Loop through the circular doubly linked list of pending read SRBs
                // from the beginning to end,trying to find the SRB to cancel
                //
                KeAcquireSpinLockAtDpcLevel(&channelExtension->PendingIoListSpin);

                ListEntry =  channelExtension->PendingIoList.Flink;
                while (ListEntry != &channelExtension->PendingIoList) {

                    pSrbExt = CONTAINING_RECORD(ListEntry, USBCAMD_READ_EXTENSION,ListEntry);
                    if (pSrbExt->Srb == pSrbToCancel) {

                        RemoveEntryList(ListEntry);
                        USBCAMD_KdPrint(MIN_TRACE, ("Queued Srb %x is Cancelled\n", pSrbToCancel));
                        Found = TRUE;

                        break;
                    }
                    ListEntry = ListEntry->Flink;
                }

                KeReleaseSpinLockFromDpcLevel(&channelExtension->PendingIoListSpin);
            }

            KeReleaseSpinLockFromDpcLevel(&channelExtension->CurrentRequestSpinLock);
        }
        else {

            // for Bulk. we need to cancel the pending bulk transfer.
            USBCAMD_CancelOutstandingIrp(deviceExtension,
                                         channelExtension->DataPipe,
                                         FALSE);

            //
            // Loop through the circular doubly linked list of pending read SRBs
            // from the beginning to end,trying to find the SRB to cancel
            //
            KeAcquireSpinLockAtDpcLevel(&channelExtension->PendingIoListSpin);

            ListEntry =  channelExtension->PendingIoList.Flink;
            while (ListEntry != &channelExtension->PendingIoList) {

                pSrbExt = CONTAINING_RECORD(ListEntry, USBCAMD_READ_EXTENSION,ListEntry);
                if (pSrbExt->Srb == pSrbToCancel) {

                    RemoveEntryList(ListEntry);
                    USBCAMD_KdPrint(MIN_TRACE, ("Queued Srb %x is Cancelled\n", pSrbToCancel));
                    Found = TRUE;

                    break;
                }
                ListEntry = ListEntry->Flink;
            }

            KeReleaseSpinLockFromDpcLevel(&channelExtension->PendingIoListSpin);

            // and send a note to the camera driver about the cancellation.
            // send a CamProcessrawFrameEx with null buffer ptr.
            if ( !channelExtension->NoRawProcessingRequired) {

                (*deviceExtension->DeviceDataEx.DeviceData2.CamProcessRawVideoFrameEx)(
                     deviceExtension->StackDeviceObject,
                     USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                     USBCAMD_GET_FRAME_CONTEXT(channelExtension->CurrentRequest),
                     NULL,
                     0,
                     NULL,
                     0,
                     0,
                     NULL,
                     0,
                     pSrbToCancel->StreamObject->StreamNumber);
            }
        }

        if (Found) {

            USBCAMD_CompleteRead(channelExtension, pSrbExt, STATUS_CANCELLED, 0);
        }
        else {

            USBCAMD_KdPrint(MIN_TRACE, ("Srb %x type (%d) for stream # %d was not found\n",
                pSrbToCancel,
                pSrbToCancel->Flags,
                pSrbToCancel->StreamObject->StreamNumber));
        }
    } // end of data stream SRB.
    else {

        USBCAMD_KdPrint(MIN_TRACE, ("Srb %x type (%d) for stream # %d not cancelled\n",
            pSrbToCancel,
            pSrbToCancel->Flags,
            pSrbToCancel->StreamObject->StreamNumber));
    }
}

#ifdef MAX_DEBUG
VOID
USBCAMD_DumpReadQueues(
    PUSBCAMD_DEVICE_EXTENSION deviceExtension
    )
{
    KIRQL oldIrql;
    PLIST_ENTRY ListEntry;
    PUSBCAMD_READ_EXTENSION pSrbExt;
    PHW_STREAM_REQUEST_BLOCK pSrb;
    ULONG i;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;

//    TEST_TRAP();

    for ( i=0; i < MAX_STREAM_COUNT ; i++) {

        channelExtension = deviceExtension->ChannelExtension[i];

        if ( (!channelExtension ) || (!channelExtension->ImageCaptureStarted)) {
            continue;
        }

        KeAcquireSpinLock(&channelExtension->CurrentRequestSpinLock, &oldIrql);

        if (channelExtension->CurrentRequest != NULL) {
            USBCAMD_KdPrint(MAX_TRACE, ("Stream %d current Srb is %x \n",
                    channelExtension->StreamNumber,
                    channelExtension->CurrentRequest->Srb));
        }
    
        KeAcquireSpinLockAtDpcLevel(&channelExtension->PendingIoListSpin);
        ListEntry =  channelExtension->PendingIoList.Flink;

        while (ListEntry != &channelExtension->PendingIoList) {
            pSrbExt = CONTAINING_RECORD(ListEntry, USBCAMD_READ_EXTENSION,ListEntry);
            pSrb = pSrbExt->Srb;
            USBCAMD_KdPrint(MAX_TRACE, ("Stream %d Queued Srb %x \n",
                                         channelExtension->StreamNumber,
                                         pSrb));
            ListEntry = ListEntry->Flink;
        }
        KeReleaseSpinLockFromDpcLevel(&channelExtension->PendingIoListSpin);

        KeReleaseSpinLock(&channelExtension->CurrentRequestSpinLock, oldIrql);
    }
}

#endif

/*
** AdapterTimeoutPacket()
**
**   This routine is called when a packet has been in the minidriver for
**   too long.  The adapter must decide what to do with the packet.
**   Note: This function is called at DISPATCH_LEVEL
**
** Arguments:
**
**   Srb - pointer to the request packet that timed out
**
** Returns:
**
** Side Effects:  none
*/

VOID
AdapterTimeoutPacket(
    PHW_STREAM_REQUEST_BLOCK Srb
    )
{
#if DBG
    // is this a stream data srb?
    if ( !(Srb->Flags & (SRB_HW_FLAGS_DATA_TRANSFER | SRB_HW_FLAGS_STREAM_REQUEST)) ) {

        USBCAMD_KdPrint(MIN_TRACE, ("Timeout in Device Srb %x \n", Srb));
    }
#endif
    Srb->TimeoutCounter = Srb->TimeoutOriginal;
}


/*
** AdapterReceivePacket()
**
**   Main entry point for receiving adapter based request SRBs.  This routine
**   will always be called at High Priority.
**
**   Note: This is an asynchronous entry point.  The request does not complete
**         on return from this function, the request only completes when a
**         StreamClassDeviceNotification on this request block, of type
**         DeviceRequestComplete, is issued.
**
** Arguments:
**
**   Srb - Pointer to the STREAM_REQUEST_BLOCK
**        Srb->HwDeviceExtension - will be the hardware device extension for
**                                 as initialized in HwInitialize
**
** Returns:
**
** Side Effects:  none
*/

PVOID
USBCAMD_AdapterReceivePacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PUSBCAMD_DEVICE_DATA DeviceData,
    IN PDEVICE_OBJECT *deviceObject,
    IN BOOLEAN NeedsCompletion
    )
{
    ULONG i;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;

    //
    // determine the type of packet.
    //

    USBCAMD_KdPrint(MAX_TRACE, ("USBCAMD_ReceivePacket command = %x\n", Srb->Command));

    if (deviceObject) {
        *deviceObject = deviceExtension->StackDeviceObject;
    }

    if (!NeedsCompletion) {
        //
        // the cam driver will handled it, just return
        //
        return USBCAMD_GET_DEVICE_CONTEXT(deviceExtension);
    }

    switch (Srb->Command) {

    case SRB_OPEN_STREAM:

        //
        // this is a request to open a specified stream.
        //

        USBCAMD_KdPrint(MIN_TRACE, ("SRB_OPEN_STREAM\n"));
        AdapterOpenStream(Srb);
        break;

    case SRB_GET_STREAM_INFO:

        //
        // this is a request for the driver to enumerate requested streams
        //

        USBCAMD_KdPrint(MAX_TRACE, ("SRB_GET_STREAM_INFO\n"));
        AdapterStreamInfo(Srb);
        break;

    case SRB_INITIALIZE_DEVICE:

        USBCAMD_KdPrint(MIN_TRACE, ("SRB_INITIALIZE_DEVICE\n"));
        Srb->Status = HwInitialize(Srb, DeviceData);
        break;

    case SRB_INITIALIZATION_COMPLETE:

        // Get a copy of the physical device's capabilities into a
        // DEVICE_CAPABILITIES struct in our device extension;
        // We are most interested in learning which system power states
        // are to be mapped to which device power states for handling
        // IRP_MJ_SET_POWER Irps.

        USBCAMD_QueryCapabilities(deviceExtension);
        Srb->Status = STATUS_SUCCESS;
#if DBG
        //
        // display the device  caps
        //

        USBCAMD_KdPrint( MIN_TRACE,("USBCAMD: Device Power Caps Map:\n"));
        for (i=PowerSystemWorking; i< PowerSystemMaximum; i++)
            USBCAMD_KdPrint( MIN_TRACE,("%s -> %s\n",PnPSystemPowerStateString(i),
                            PnPDevicePowerStateString(deviceExtension->DeviceCapabilities.DeviceState[i] ) ));
#endif
        break;

    case SRB_UNINITIALIZE_DEVICE:

        USBCAMD_KdPrint(MIN_TRACE, ("SRB_UNINITIALIZE_DEVICE\n"));
        Srb->Status = HwUnInitialize(Srb);
        break;

    case SRB_CHANGE_POWER_STATE:
    {
        PIRP irp;
        PIO_STACK_LOCATION ioStackLocation;
        irp = Srb->Irp;
        ioStackLocation = IoGetCurrentIrpStackLocation(irp);

        USBCAMD_KdPrint(MIN_TRACE, ("(%s)\n", PnPPowerString(ioStackLocation->MinorFunction)));
        USBCAMD_KdPrint(MIN_TRACE, ("SRB_CHANGE_POWER_STATE\n"));

        Srb->Status = USBCAMD_SetDevicePowerState(deviceExtension,Srb);
        break;
    }
    case SRB_PAGING_OUT_DRIVER:
        USBCAMD_KdPrint(MAX_TRACE, ("SRB_PAGING_OUT_DRIVER\n"));
        Srb->Status = STATUS_SUCCESS;
        break;

    case SRB_CLOSE_STREAM:

        USBCAMD_KdPrint(MIN_TRACE, ("SRB_CLOSE_STREAM\n"));
        AdapterCloseStream(Srb);
        break;


    case SRB_SURPRISE_REMOVAL:
        //
        // this SRB is available on NT5 only to handle surprise removal.
        // because of that, we need to keep the old code path that handles
        // surprise removal in the timeout handler.
        // In a typical surpirse removal scenario, this SRB will be called before
        // the timeout handler or SRB_UNINITIALIZE_DEVICE. It corresponds to
        // IRP_MN_SURPRISE_REMOVAL PnP IRP.
        //

        // set the camera unplugged flag.
        deviceExtension->CameraUnplugged = TRUE;
        USBCAMD_KdPrint(MIN_TRACE, ("SRB_SURPRISE_REMOVAL\n"));

        for (i=0; i<MAX_STREAM_COUNT;i++) {
            if (deviceExtension->ChannelExtension[i]) {
                PUSBCAMD_CHANNEL_EXTENSION channelExtension;

                channelExtension = deviceExtension->ChannelExtension[i];
                if ( channelExtension->ImageCaptureStarted) {
                    //
                    // stop this channel and cancel all IRPs, SRBs.
                    //
                    USBCAMD_KdPrint(MIN_TRACE,("S#%d stopping.\n", i));
                    USBCAMD_StopChannel(deviceExtension,channelExtension);
                }

                if ( channelExtension->ChannelPrepared) {
                    //
                    // Free memory and bandwidth
                    //
                    USBCAMD_KdPrint(MIN_TRACE,("S#%d unpreparing.\n", i));
		            USBCAMD_UnPrepareChannel(deviceExtension,channelExtension);
                }
            }
        }
        Srb->Status = STATUS_SUCCESS;
        break;

    case SRB_UNKNOWN_DEVICE_COMMAND:

        {
            PIRP irp;
            PIO_STACK_LOCATION ioStackLocation;
            irp = Srb->Irp;
            ioStackLocation = IoGetCurrentIrpStackLocation(irp);
            //
            // we handle Pnp irps for
            // 1) Camera minidrivers sends QI PnP to USBCAMD.
            //
            if ( ioStackLocation->MajorFunction == IRP_MJ_PNP  ) {
               USBCAMD_KdPrint(MIN_TRACE, ("(%s)\n", PnPMinorFunctionString(ioStackLocation->MinorFunction)));
               USBCAMD_PnPHandler(Srb, irp, deviceExtension, ioStackLocation);
            }
            else {
                Srb->Status = STATUS_NOT_IMPLEMENTED;
                USBCAMD_KdPrint(MIN_TRACE, ("SRB_UNKNOWN_DEVICE_COMMAND %x\n", Srb->Command));
            }
        }
        break;

    default:

        USBCAMD_KdPrint(MAX_TRACE, ("Unknown SRB command %x\n", Srb->Command));

        //
        // this is a request that we do not understand.  Indicate invalid
        // command and complete the request
        //

        Srb->Status = STATUS_NOT_IMPLEMENTED;
    }

    //
    // all commands complete synchronously
    //

    StreamClassDeviceNotification(DeviceRequestComplete,
                                  Srb->HwDeviceExtension,
                                  Srb);

    return USBCAMD_GET_DEVICE_CONTEXT(deviceExtension);
}

/*++

Routine Description: handles certain Pnp Irps.

Arguments:
    Srb             - pointer to stream request block
    DeviceExtension    - Pointer to Device Extension.
    ioStacklocation   - ptr to io stack location for this Pnp Irp.

Return Value:
    none.
--*/

VOID
USBCAMD_PnPHandler(
    IN PHW_STREAM_REQUEST_BLOCK Srb,
    IN PIRP pIrp,
    IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
    IN PIO_STACK_LOCATION ioStackLocation)
{

    switch (ioStackLocation->MinorFunction ) {
    case IRP_MN_QUERY_INTERFACE:

        if (IsEqualGUID(
                ioStackLocation->Parameters.QueryInterface.InterfaceType,
                &GUID_USBCAMD_INTERFACE) &&
            (ioStackLocation->Parameters.QueryInterface.Size ==
                sizeof( USBCAMD_INTERFACE )) &&
            (ioStackLocation->Parameters.QueryInterface.Version ==
                USBCAMD_VERSION_200 )) {

            PUSBCAMD_INTERFACE UsbcamdInterface;

            UsbcamdInterface =
                (PUSBCAMD_INTERFACE)ioStackLocation->Parameters.QueryInterface.Interface;
            UsbcamdInterface->Interface.Size = sizeof( USBCAMD_INTERFACE );
            UsbcamdInterface->Interface.Version = USBCAMD_VERSION_200;

            UsbcamdInterface->USBCAMD_SetVideoFormat = USBCAMD_SetVideoFormat;
            UsbcamdInterface->USBCAMD_WaitOnDeviceEvent = USBCAMD_WaitOnDeviceEvent;
            UsbcamdInterface->USBCAMD_BulkReadWrite = USBCAMD_BulkReadWrite;
            UsbcamdInterface->USBCAMD_CancelBulkReadWrite = USBCAMD_CancelBulkReadWrite;
            UsbcamdInterface->USBCAMD_SetIsoPipeState = USBCAMD_SetIsoPipeState;
            Srb->Status = pIrp->IoStatus.Status = STATUS_SUCCESS;
            USBCAMD_KdPrint(MIN_TRACE, ("USBCAMD2 QI \n"));

        } else {
            Srb->Status = STATUS_NOT_SUPPORTED; // STATUS_INVALID_PARAMETER_1;
        }
        break;

    default:
        Srb->Status = STATUS_NOT_IMPLEMENTED;
        USBCAMD_KdPrint(MAX_TRACE,("USBCAMD: Stream class did not translate IRP_MJ = 0x%x IRP_MN = 0x%x\n",
                    ioStackLocation->MajorFunction,
                    ioStackLocation->MinorFunction));
        break;
    }
}



/*++

Routine Description:

Arguments:

Note: in order to save one buffer copy. set CamProcessRawStill to NULL
    if still data is VGA or decompression occur in ring 3.

Return:
    Nothing.

--*/


ULONG
USBCAMD_InitializeNewInterface(
    IN PVOID DeviceContext,
    IN PVOID DeviceData,
    IN ULONG Version,
    IN ULONG CamControlFlag
    )
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;

    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);
    if (Version == USBCAMD_VERSION_200 ) {
        deviceExtension->DeviceDataEx.DeviceData2 = *((PUSBCAMD_DEVICE_DATA2) DeviceData);
        deviceExtension->Usbcamd_version = USBCAMD_VERSION_200;
        deviceExtension->CamControlFlag = CamControlFlag;
    }
    return USBCAMD_VERSION_200;
}


NTSTATUS
USBCAMD_SetIsoPipeState(
    IN PVOID DeviceContext,
    IN ULONG PipeStateFlags
    )
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;
    PEVENTWAIT_WORKITEM workitem;
    NTSTATUS ntStatus = STATUS_SUCCESS;

    //
    // we only do this for ISO streams on the video pin.
    //

    USBCAMD_KdPrint ( MIN_TRACE, ("%s\n",PipeStateFlags ? "StopIsoStream":"StartIsoStream"));

    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);
    channelExtension = deviceExtension->ChannelExtension[STREAM_Capture];

    if (channelExtension == NULL) {
        // Video open is not open for business yet.
        USBCAMD_KdPrint (MIN_TRACE, ("stop before open \n"));
        ntStatus = STATUS_SUCCESS;
        return ntStatus;
    }

    if ( !(channelExtension->IdleIsoStream ^ PipeStateFlags) ){
        USBCAMD_KdPrint ( MIN_TRACE, ("Requested iso stream state is same as previous.\n"));
        ntStatus = STATUS_INVALID_PARAMETER;
        return ntStatus;
    }

    if (KeGetCurrentIrql() < DISPATCH_LEVEL) {
        //
        // we are at passive level, just do the command
        //
        USBCAMD_ProcessSetIsoPipeState(deviceExtension,
                                                  channelExtension,
                                                  PipeStateFlags);

    } else {

//        TEST_TRAP();
        USBCAMD_KdPrint(MIN_TRACE, ("Calling SetIsoPipeState from Dispatch level\n"));

        //
        // schedule a work item
        //
        ntStatus = STATUS_PENDING;

        workitem = USBCAMD_ExAllocatePool(NonPagedPool,
                                          sizeof(EVENTWAIT_WORKITEM));
        if (workitem) {

            ExInitializeWorkItem(&workitem->WorkItem,
                                 USBCAMD_SetIsoPipeWorkItem,
                                 workitem);

            workitem->DeviceExtension = deviceExtension;
            workitem->ChannelExtension = channelExtension;
            workitem->Flag = PipeStateFlags;

            ExQueueWorkItem(&workitem->WorkItem,
                            DelayedWorkQueue);

        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        }
    }

    return ntStatus;
}

/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/
VOID
USBCAMD_SetIsoPipeWorkItem(
    PVOID Context
    )
{
    PEVENTWAIT_WORKITEM workItem = Context;

    USBCAMD_ProcessSetIsoPipeState(workItem->DeviceExtension,
                                              workItem->ChannelExtension,
                                              workItem->Flag);
    USBCAMD_ExFreePool(workItem);
}

/*++

Routine Description:


Arguments:

Return Value:

    None.

--*/
VOID
USBCAMD_ProcessSetIsoPipeState(
    PUSBCAMD_DEVICE_EXTENSION deviceExtension,
    PUSBCAMD_CHANNEL_EXTENSION channelExtension,
    ULONG Flag
    )
{
    ULONG portStatus;
    ULONG ntStatus = STATUS_SUCCESS;

    if ( Flag == USBCAMD_STOP_STREAM ) {
        // time to idle the iso pipe.
        channelExtension->IdleIsoStream = TRUE;
        // save the max. pkt size of the current alt. interface.
        deviceExtension->currentMaxPkt =
            deviceExtension->Interface->Pipes[channelExtension->DataPipe].MaximumPacketSize;
        ntStatus = USBCAMD_StopChannel(deviceExtension,channelExtension);
    }
    else {

        USBCAMD_ClearIdleLock(&channelExtension->IdleLock);
        channelExtension->IdleIsoStream = FALSE;
       // channelExtension->ImageCaptureStarted = TRUE;
        //
        // Check the port state, if it is disabled we will need
        // to re-enable it
        //
        ntStatus = USBCAMD_GetPortStatus(deviceExtension,channelExtension, &portStatus);

        if (NT_SUCCESS(ntStatus) && !(portStatus & USBD_PORT_ENABLED)) {
        //
        // port is disabled, attempt reset
        //
            ntStatus = USBCAMD_EnablePort(deviceExtension);
            if (!NT_SUCCESS(ntStatus) ) {
                USBCAMD_KdPrint (MIN_TRACE, ("Failed to Enable usb port(0x%X)\n",ntStatus ));
                TEST_TRAP();
                return ;
            }
        }

        //
        // check if camera mini driver has requested a change for alt. interface
        // while iso pipe is stopped.
        //
        if (deviceExtension->currentMaxPkt !=
            deviceExtension->Interface->Pipes[channelExtension->DataPipe].MaximumPacketSize) {
            // CAMERA MINIDRIVER HAS CHANGED THE ALT. INTERFACE. we have to tear
            // down the ISO pipe and start over.
            TEST_TRAP();
        }


        ntStatus = USBCAMD_ResetPipes(deviceExtension,
                                      channelExtension,
                                      deviceExtension->Interface,
                                      FALSE);


        if (deviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

            // send hardware stop and re-start
            if (NT_SUCCESS(ntStatus)) {
                ntStatus = (*deviceExtension->DeviceDataEx.DeviceData2.CamStopCaptureEx)(
                            deviceExtension->StackDeviceObject,
                            USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                            STREAM_Capture);
            }

            if (NT_SUCCESS(ntStatus)) {
                ntStatus = (*deviceExtension->DeviceDataEx.DeviceData2.CamStartCaptureEx)(
                            deviceExtension->StackDeviceObject,
                            USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                            STREAM_Capture);
            }
        }
        else {
            // send hardware stop and re-start
            if (NT_SUCCESS(ntStatus)) {
                ntStatus = (*deviceExtension->DeviceDataEx.DeviceData.CamStopCapture)(
                            deviceExtension->StackDeviceObject,
                            USBCAMD_GET_DEVICE_CONTEXT(deviceExtension));
            }

            if (NT_SUCCESS(ntStatus)) {
                ntStatus = (*deviceExtension->DeviceDataEx.DeviceData.CamStartCapture)(
                            deviceExtension->StackDeviceObject,
                            USBCAMD_GET_DEVICE_CONTEXT(deviceExtension));
            }

        }

        channelExtension->SyncPipe = deviceExtension->SyncPipe;
        channelExtension->DataPipe = deviceExtension->DataPipe;
        channelExtension->DataPipeType = UsbdPipeTypeIsochronous;

        ntStatus = USBCAMD_StartIsoStream(deviceExtension, channelExtension);
    }
#if DBG
    if (ntStatus != STATUS_SUCCESS)
        USBCAMD_KdPrint (MIN_TRACE, ("USBCAMD_ProcessSetIsoPipeState exit (0x%X)\n",ntStatus ));
#endif
//    TRAP_ERROR(ntStatus);
}



/*
** AdapterStreamInfo()
**
**   Returns the information of all streams that are supported by the
**   mini-driver
**
** Arguments:
**
**   Srb - Pointer to the STREAM_REQUEST_BLOCK
**        Srb->HwDeviceExtension - will be the hardware device extension for
**                                  as initialised in HwInitialise
**
** Returns:
**
** Side Effects:  none
*/

VOID
AdapterStreamInfo(
    PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    ULONG i;
    //
    // pick up the pointer to the stream information data structures array.
    //

    PHW_STREAM_INFORMATION streamInformation =
       (PHW_STREAM_INFORMATION) &(Srb->CommandData.StreamBuffer->StreamInfo);

    PHW_STREAM_HEADER streamHeader =
        (PHW_STREAM_HEADER) &(Srb->CommandData.StreamBuffer->StreamHeader);

    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;

    USBCAMD_KdPrint(MAX_TRACE, ("AdapterStreamInfo\n"));

    //
    // set number of streams
    //

    ASSERT (Srb->NumberOfBytesToTransfer >=
            sizeof (HW_STREAM_HEADER) +
            deviceExtension->StreamCount * sizeof (HW_STREAM_INFORMATION));

    //
    // initialize stream header
    //

    streamHeader->SizeOfHwStreamInformation = sizeof(HW_STREAM_INFORMATION);
    streamHeader->NumberOfStreams = deviceExtension->StreamCount;

    //
    // store a pointer to the topology for the device
    //

    streamHeader->Topology = &Topology;

//#if VIDCAP_TO_STI

    // expose device event table if Camera minidriver indicated so.
    // this event table will notify STI stack when a snapshot button is pressed on the camera.
    //
    if (deviceExtension->CamControlFlag & USBCAMD_CamControlFlag_EnableDeviceEvents) {
        streamHeader->NumDevEventArrayEntries = SIZEOF_ARRAY(VIDCAPTOSTIEventSet);
        streamHeader->DeviceEventsArray = VIDCAPTOSTIEventSet;
        streamHeader->DeviceEventRoutine = USBCAMD_DeviceEventProc;
    }

//#endif

    //
    // initialize the stream information array
    //
    // The NumberOfInstances field indicates the number of concurrent
    // streams of this type the device can support.
    //
    for ( i=0; i < deviceExtension->StreamCount; i++) {

        streamInformation[i].NumberOfPossibleInstances = 1;

        //
        // indicates the direction of data flow for this stream, relative to the
        // driver
        //

        streamInformation[i].DataFlow = KSPIN_DATAFLOW_OUT;

        //
        // dataAccessible - Indicates whether the data is "seen" by the host
        // processor.
        //

        streamInformation[i].DataAccessible = TRUE;

        //
        // indicate the pin name and category.
        //

        streamInformation[i].Name = (i == STREAM_Capture) ? (GUID *)&PINNAME_VIDEO_CAPTURE:
                                                            (GUID *)&PINNAME_VIDEO_STILL;
        streamInformation[i].Category = streamInformation[i].Name;

        streamInformation[i].StreamPropertiesArray =
                 (PKSPROPERTY_SET) VideoStreamProperties;
        streamInformation[i].NumStreamPropArrayEntries = NUMBER_VIDEO_STREAM_PROPERTIES;

    }


    //
    // indicate success
    //

    Srb->Status = STATUS_SUCCESS;
}

/*
** AdapterOpenStream()
**
**   This routine is called when an OpenStream SRB request is received
**
** Arguments:
**
**   Srb - pointer to stream request block for the Open command
**
** Returns:
**
** Side Effects:  none
*/

VOID
AdapterOpenStream(
    IN PHW_STREAM_REQUEST_BLOCK Srb)
{
    ULONG  StreamNumber = Srb->StreamObject->StreamNumber;

    //
    // the stream extension structure is allocated by the stream class driver
    //

    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        (PUSBCAMD_CHANNEL_EXTENSION) Srb->StreamObject->HwStreamExtension;


    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;
    NTSTATUS status = STATUS_SUCCESS;
    ULONG nSize;
    PKS_DATAFORMAT_VIDEOINFOHEADER  pKSDataFormat =
                (PKS_DATAFORMAT_VIDEOINFOHEADER) Srb->CommandData.OpenFormat;
    PKS_VIDEOINFOHEADER     pVideoInfoHdrRequested =
                &pKSDataFormat->VideoInfoHeader;
    PKS_VIDEOINFOHEADER  VideoPinInfoHeader;

    USBCAMD_KdPrint(MAX_TRACE, ("Request to open stream %d \n",StreamNumber));

    USBCAMD_DbgLog(TL_CHN_TRACE|TL_PRF_TRACE, '+npo', StreamNumber, USBCAMD_StartClock(), status);

    ASSERT(channelExtension);

    //
    // check that the stream index requested isn't too high
    // or that the maximum number of instances hasn't been exceeded
    //

    if (StreamNumber >= deviceExtension->StreamCount ) {
        Srb->Status = STATUS_INVALID_PARAMETER;
        return;
    }

    //
    // Check that we haven't exceeded the instance count for this stream
    //

    if (deviceExtension->ActualInstances[StreamNumber] >= MAX_STREAM_INSTANCES ){
        Srb->Status = STATUS_INVALID_PARAMETER;
        return;
    }


    //
    // check to see if the request is to open a still virtual pin.
    // VirtualStillPin Rules;
    // 1) you can't open virtual still pin till after you open the streaming pin.
    // 2) you can't start virtual still pin till after starting the streaming pin.
    // 3) you can stop virtual still pin w/o stopping the stream pin.
    // 4) you can close virtual still pin w/o closing the streaming pin.
    // 5) you can close capture pin w/o closing virtual still pin. however, you can only manipulate
    //    still pin properties then but can't change pin streaming state.
    //

    if ((StreamNumber == STREAM_Still) &&  (deviceExtension->VirtualStillPin)) {
        channelExtension->VirtualStillPin = TRUE;
        // video stream has to be open before we can succeed this still open.
        if (deviceExtension->ChannelExtension[STREAM_Capture] == NULL) {
            Srb->Status = STATUS_INVALID_PARAMETER;
            return;
        }
        if (deviceExtension->CamControlFlag & USBCAMD_CamControlFlag_AssociatedFormat) {
            //
            // if still pin is just an instance frame from the video pin, then still
            // pin has to open with the same format as video.
            //
            nSize = pVideoInfoHdrRequested->bmiHeader.biSize;
            VideoPinInfoHeader = deviceExtension->ChannelExtension[STREAM_Capture]->VideoInfoHeader;
            if (RtlCompareMemory (&pVideoInfoHdrRequested->bmiHeader,
                                  &VideoPinInfoHeader->bmiHeader,nSize) != nSize) {
                Srb->Status = STATUS_INVALID_PARAMETER;
                return;
            }
        }
    }
    else {
        channelExtension->VirtualStillPin = FALSE;
    }


    //
    // determine which stream number is being opened.  This number indicates
    // the offset into the array of streaminfo structures that was filled out
    // in the AdapterStreamInfo call.
    //

    channelExtension->StreamNumber = (UCHAR) StreamNumber;

    // save the channel extension for remove
    deviceExtension->ChannelExtension[StreamNumber] = channelExtension;

    channelExtension->NoRawProcessingRequired = (UCHAR) ((deviceExtension->CamControlFlag >> StreamNumber) & CAMCONTROL_FLAG_MASK );


    status = USBCAMD_OpenChannel(deviceExtension,
                                 channelExtension,
                                 Srb->CommandData.OpenFormat);

    if (NT_SUCCESS(status)) {

        //
        // this gets the bandwidth and memory we will need
        // for iso video streaming.
        //
        status = USBCAMD_PrepareChannel(deviceExtension,
                                        channelExtension);
    }

    // Check for valid framerate
    if (pVideoInfoHdrRequested->AvgTimePerFrame == 0) {
        USBCAMD_KdPrint(MAX_TRACE, ("WARNING: Zero AvgTimePerFrame \n"));
        Srb->Status = STATUS_INVALID_PARAMETER;
        return;
    }
    

    if (NT_SUCCESS(status)) {

        //
        // srb has been to the mini driver
        //
        // save their routines

        channelExtension->CamReceiveDataPacket = (PSTREAM_RECEIVE_PACKET)
            Srb->StreamObject->ReceiveDataPacket;
        channelExtension->CamReceiveCtrlPacket = (PSTREAM_RECEIVE_PACKET)
            Srb->StreamObject->ReceiveControlPacket;
        Srb->StreamObject->ReceiveDataPacket = (PVOID) USBCAMD_ReceiveDataPacket;
        Srb->StreamObject->ReceiveControlPacket = (PVOID) USBCAMD_ReceiveCtrlPacket;
        channelExtension->KSState = KSSTATE_STOP;

        Srb->StreamObject->HwClockObject.HwClockFunction = NULL;
        Srb->StreamObject->HwClockObject.ClockSupportFlags = 0;

        nSize = KS_SIZE_VIDEOHEADER (pVideoInfoHdrRequested);

        channelExtension->VideoInfoHeader =
            USBCAMD_ExAllocatePool(NonPagedPool, nSize);

        if (channelExtension->VideoInfoHeader == NULL) {
            Srb->Status = STATUS_INSUFFICIENT_RESOURCES;
            return;
        }

        deviceExtension->ActualInstances[StreamNumber]++;

        // Copy the VIDEOINFOHEADER requested to our storage
        RtlCopyMemory(
                channelExtension->VideoInfoHeader,
                pVideoInfoHdrRequested,
                nSize);


        USBCAMD_KdPrint(MIN_TRACE, ("USBCAMD: VideoInfoHdrRequested for stream %d\n", StreamNumber));
        USBCAMD_KdPrint(MIN_TRACE, ("Width=%d  Height=%d  FrameTime (ms)= %d\n",
                                    pVideoInfoHdrRequested->bmiHeader.biWidth,
                                    pVideoInfoHdrRequested->bmiHeader.biHeight,
                                    pVideoInfoHdrRequested->AvgTimePerFrame/10000));

        // We don't use DMA.

        Srb->StreamObject->Dma = FALSE;
        Srb->StreamObject->StreamHeaderMediaSpecific = sizeof(KS_FRAME_INFO);

        //
        // The PIO flag must be set when the mini driver will be accessing the
        // data
        // buffers passed in using logical addressing
        //
#if 0
        Srb->StreamObject->Pio = FALSE;
#else
        Srb->StreamObject->Pio = TRUE;
#endif
    }
    else {
        USBCAMD_KdPrint(MIN_TRACE, ("AdapterOpenStream failed for stream %d\n", StreamNumber));
        // Reset channel extension in the device ext. for this stream.
        deviceExtension->ChannelExtension[StreamNumber] = NULL;
        status = STATUS_INVALID_PARAMETER;
    }

    Srb->Status = status;

    USBCAMD_DbgLog(TL_CHN_TRACE|TL_PRF_TRACE, '-npo', StreamNumber, USBCAMD_StopClock(), status);
}

/*
** AdapterCloseStream()
**
**   Close the requested data stream
**
** Arguments:
**
**   Srb the request block requesting to close the stream
**
** Returns:
**
** Side Effects:  none
*/

VOID
AdapterCloseStream(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    ULONG  StreamNumber = Srb->StreamObject->StreamNumber;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        (PUSBCAMD_CHANNEL_EXTENSION) Srb->StreamObject->HwStreamExtension;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;

    USBCAMD_KdPrint(MIN_TRACE, ("AdapterCloseStream # %d\n", StreamNumber));

    Srb->Status = STATUS_SUCCESS;   // Not permitted to fail

    USBCAMD_DbgLog(TL_CHN_TRACE, '+slc', StreamNumber, 0, 0);

    if (StreamNumber >= deviceExtension->StreamCount ) {
        USBCAMD_DbgLog(TL_CHN_TRACE, '-slc', StreamNumber, 0, 0);
        return;
    }

    ASSERT_CHANNEL(channelExtension);

    USBCAMD_CleanupChannel(deviceExtension, channelExtension, StreamNumber);

    USBCAMD_DbgLog(TL_CHN_TRACE, '-slc', StreamNumber, 0, 0);
}


NTSTATUS 
USBCAMD_CleanupChannel(
    IN PUSBCAMD_DEVICE_EXTENSION deviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION channelExtension,
    IN ULONG StreamNumber
    )
{
    NTSTATUS status;

    if (!deviceExtension || !channelExtension) {
        ASSERT(0);
        return STATUS_INVALID_PARAMETER;
    }

    if (deviceExtension->ChannelExtension[StreamNumber]) {

        ASSERT(deviceExtension->ChannelExtension[StreamNumber] == channelExtension);

        //
        // stop streaming capture
        //
        if (channelExtension->ImageCaptureStarted) {
        //        TEST_TRAP();
            USBCAMD_StopChannel(deviceExtension,
                                channelExtension);
        }

        if (channelExtension->ChannelPrepared) {
            //
            // Free memory and bandwidth
            //
            USBCAMD_UnPrepareChannel(deviceExtension,
                                     channelExtension);
        }

        status = USBCAMD_CloseChannel(deviceExtension, channelExtension);

        if (channelExtension->VideoInfoHeader) {
            USBCAMD_ExFreePool(channelExtension->VideoInfoHeader);
            channelExtension->VideoInfoHeader = NULL;
        }

        //
        // we no longer have a channel
        //
        deviceExtension->ChannelExtension[StreamNumber] = NULL;
    }

    return status;
}


VOID STREAMAPI
USBCAMD_ReceiveDataPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    ULONG StreamNumber;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
        (PUSBCAMD_DEVICE_EXTENSION) Srb->HwDeviceExtension;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        (PUSBCAMD_CHANNEL_EXTENSION) Srb->StreamObject->HwStreamExtension;
    PUSBCAMD_READ_EXTENSION readExtension =
        (PUSBCAMD_READ_EXTENSION) Srb->SRBExtension;
    BOOLEAN completedByCam = FALSE;
    PKSSTREAM_HEADER streamHeader;

    StreamNumber = channelExtension->StreamNumber;
    if ( StreamNumber != Srb->StreamObject->StreamNumber ) {
        TEST_TRAP();
    }

    USBCAMD_KdPrint(ULTRA_TRACE, ("USBCAMD_ReceiveDataPacket on stream %d\n",StreamNumber));

    USBCAMD_DbgLog(TL_SRB_TRACE, '+brS',
        Srb,
        Srb->Command,
        0
        );

    //
    // call the cam driver first
    //
    if (channelExtension->CamReceiveDataPacket) {
        (*channelExtension->CamReceiveDataPacket)(
            Srb,
            USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
            &completedByCam);
    }

    if (completedByCam == TRUE) {

        USBCAMD_DbgLog(TL_SRB_TRACE, '-brS',
            Srb,
            Srb->Command,
            Srb->Status
            );

        return;
    }

    switch (Srb->Command) {
    case SRB_READ_DATA:

        if (!deviceExtension->CameraUnplugged) {

            PKSSTREAM_HEADER dataPacket = Srb->CommandData.DataBufferArray;

            dataPacket->PresentationTime.Numerator = 1;
            dataPacket->PresentationTime.Denominator = 1;
            dataPacket->PresentationTime.Time = 0;
            dataPacket->Duration = channelExtension->VideoInfoHeader->AvgTimePerFrame;
            dataPacket->DataUsed = 0;

            // Attempt to lock out the idle state (will be released before leaving)
            if (NT_SUCCESS(USBCAMD_AcquireIdleLock(&channelExtension->IdleLock))) {

                if (channelExtension->KSState != KSSTATE_STOP) {

                    // initialize the SRB extension

                    readExtension->Srb = (PVOID) Srb;
                    readExtension->Sig = USBCAMD_READ_SIG;

                    // Queue the read to the camera driver
                    // This request will be completed asynchronously...

                    USBCAMD_KdPrint(MAX_TRACE, ("READ SRB (%d)\n",StreamNumber));

                    // make sure that the buffer passed down from DirectShow is Bigger or equal the one
                    // in biSizeImage associated with open stream. This only apply to the video pin.

                    streamHeader = ((PHW_STREAM_REQUEST_BLOCK) Srb)->CommandData.DataBufferArray;


                    if ((streamHeader->FrameExtent >= channelExtension->VideoInfoHeader->bmiHeader.biSizeImage) ||
                        (StreamNumber != STREAM_Capture)) {

                        if( StreamNumber == STREAM_Capture ) {
                            // video srbs timeout in less time than 15 sec. default.
                            Srb->TimeoutCounter = Srb->TimeoutOriginal = STREAM_CAPTURE_TIMEOUT;
                        }
                        else {
                            // we timeout the still read request every 30 secs.
                            Srb->TimeoutCounter = Srb->TimeoutOriginal = STREAM_STILL_TIMEOUT;
                        }

                        Srb->Status =
                            USBCAMD_ReadChannel(deviceExtension,
                                                channelExtension,
                                                readExtension);

                        if (!NT_SUCCESS(Srb->Status)) {
                            COMPLETE_STREAM_READ(Srb);
                        }
                    }
                    else {
                       Srb->Status = STATUS_INSUFFICIENT_RESOURCES;
                       USBCAMD_KdPrint(MIN_TRACE, ("Frame buffer (%d)< biSizeImage (%d)\n",
                                     streamHeader->FrameExtent,
                                     channelExtension->VideoInfoHeader->bmiHeader.biSizeImage ));
                       COMPLETE_STREAM_READ(Srb);
                    }
                }
                else {

                    // Stream not started, return immediately
                    Srb->Status = STATUS_SUCCESS;
                    COMPLETE_STREAM_READ(Srb);
                }

                USBCAMD_ReleaseIdleLock(&channelExtension->IdleLock);
            }
            else {

                // Stream being stopped, return immediately
                Srb->Status = STATUS_SUCCESS;
                COMPLETE_STREAM_READ(Srb);
            }
        }
        else {
            // camera is unplugged, complete read with error.
            Srb->Status = STATUS_CANCELLED;
            COMPLETE_STREAM_READ(Srb);
        }

        break;

    case SRB_WRITE_DATA:
        {
        ULONG i, PipeIndex, BufferLength;
        BOOLEAN found = FALSE;
        PVOID pBuffer;
        //
        // we will handle SRB write in order to let an app sends a bulk out request for
        // the driver if needed. USBCAMD_BulkReadWrite() should be used instead from kernel
        // level.
        //

        for ( i=0, PipeIndex =0; i < deviceExtension->Interface->NumberOfPipes; i++ ) {
            // find the bulk-out pipe if any.
            if (( deviceExtension->PipePinRelations[i].PipeDirection == OUTPUT_PIPE) &&
                ( deviceExtension->PipePinRelations[i].PipeType == UsbdPipeTypeBulk) ) {
                PipeIndex = i;
                found = TRUE;
                break;
            }
        }

        if (found  && (StreamNumber == STREAM_Still) ) {

            // we only allow bulk out transfer on a still pin.
            TEST_TRAP();
            readExtension->Srb = (PVOID) Srb;
            readExtension->Sig = USBCAMD_READ_SIG;
            streamHeader = ((PHW_STREAM_REQUEST_BLOCK) Srb)->CommandData.DataBufferArray;

            pBuffer = streamHeader->Data;
            ASSERT(pBuffer != NULL);
            BufferLength = readExtension->ActualRawFrameLen = streamHeader->DataUsed;

            if ( (pBuffer == NULL) || (BufferLength == 0) ) {
                Srb->Status = STATUS_INVALID_PARAMETER;
                COMPLETE_STREAM_READ(Srb);
                return;
            }

            USBCAMD_KdPrint(MIN_TRACE, ("Write Srb : buf= %X, len = %x\n",
                                pBuffer, BufferLength));

            // inform camera driver that we are ready to start a bulk transfer.

            (*deviceExtension->DeviceDataEx.DeviceData2.CamNewVideoFrameEx)
                                        (USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                                         USBCAMD_GET_FRAME_CONTEXT(readExtension),
                                         StreamNumber,
                                         &readExtension->ActualRawFrameLen);


            Srb->Status = USBCAMD_IntOrBulkTransfer(deviceExtension,
                                                 NULL,
                                                 pBuffer,
                                                 BufferLength,
                                                 PipeIndex,
                                                 USBCAMD_BulkOutComplete,
                                                 readExtension,
                                                 0,
                                                 BULK_TRANSFER);
        }
        else {
            Srb->Status = STATUS_NOT_IMPLEMENTED;
            COMPLETE_STREAM_READ(Srb);
        }
        }
        break;

    default:

        Srb->Status = STATUS_NOT_IMPLEMENTED;
        COMPLETE_STREAM_READ(Srb);
    }
}

/*
** USBCAMD_BulkOutComplete()
**
**    Routine to complete a write SRB.
**
** Arguments:
**
**    DeviceEontext - pointer to the device extension.
**
**    Context - pointer to SRB
**
**
**    ntStatus - status return
**
** Returns:
**
** Side Effects:  none
*/


NTSTATUS
USBCAMD_BulkOutComplete(
    PVOID DeviceContext,
    PVOID Context,
    NTSTATUS ntStatus
    )
{

    PUSBCAMD_READ_EXTENSION readExtension =
        (PUSBCAMD_READ_EXTENSION) Context;
    PHW_STREAM_REQUEST_BLOCK srb = readExtension->Srb;

    srb->Status = ntStatus;
    USBCAMD_KdPrint(MIN_TRACE, ("Write Srb %x is completed, status = %x\n",
                                srb, srb->Status));
    COMPLETE_STREAM_READ(srb);
    return ntStatus;
}




/*
** VideoGetProperty()
**
**    Routine to process video property requests
**
** Arguments:
**
**    Srb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID VideoGetProperty(PHW_STREAM_REQUEST_BLOCK Srb)
{
    PSTREAM_PROPERTY_DESCRIPTOR pSPD;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        Srb->StreamObject->HwStreamExtension;
    ULONG StreamNumber = channelExtension->StreamNumber;

    pSPD = Srb->CommandData.PropertyInfo;

    if (IsEqualGUID (&KSPROPSETID_Connection, &pSPD->Property->Set)) {
        VideoStreamGetConnectionProperty (Srb);
    }
    else if (IsEqualGUID (&PROPSETID_VIDCAP_DROPPEDFRAMES, &pSPD->Property->Set)) {
        if (StreamNumber == STREAM_Capture) {
            VideoStreamGetDroppedFramesProperty (Srb);
        }
        else {
          Srb->Status = STATUS_NOT_IMPLEMENTED;
        }
    }
    else {
       Srb->Status = STATUS_NOT_IMPLEMENTED;
    }
}

/*
** VideoStreamGetConnectionProperty()
**
**    Reports Frame size for the allocater.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID VideoStreamGetConnectionProperty(
    PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        Srb->StreamObject->HwStreamExtension;
    ULONG StreamNumber = channelExtension->StreamNumber;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = Srb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_CONNECTION_ALLOCATORFRAMING:
        if (channelExtension->VideoInfoHeader) {
            PKSALLOCATOR_FRAMING Framing =
                (PKSALLOCATOR_FRAMING) pSPD->PropertyInfo;

            Framing->RequirementsFlags =
                KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY |
                KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER |
                KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY;
            Framing->PoolType = PagedPool;
            // allocate one frame per still pin only.
            Framing->Frames = (StreamNumber == STREAM_Capture) ? 5:2;
            Framing->FrameSize =
                channelExtension->VideoInfoHeader->bmiHeader.biSizeImage;

             USBCAMD_KdPrint(ULTRA_TRACE,
                ("'KSPROPERTY_CONNECTION_ALLOCATORFRAMING (%d)\n",
                     Framing->FrameSize));

            Framing->FileAlignment = 0; // FILE_BYTE_ALIGNMENT;
            Framing->Reserved = 0;
            Srb->ActualBytesTransferred = sizeof (KSALLOCATOR_FRAMING);
            Srb->Status = STATUS_SUCCESS;
        } else {
            Srb->Status = STATUS_INVALID_PARAMETER;
        }
        break;

    default:
//        TEST_TRAP();
        break;
    }
}

/*
** VideoStreamGetDroppedFramesProperty()
**
**    Reports the number of dropped frmaes since START.
**
** Arguments:
**
**    pSrb - pointer to the stream request block for properties
**
** Returns:
**
** Side Effects:  none
*/

VOID
VideoStreamGetDroppedFramesProperty(
    PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PUSBCAMD_CHANNEL_EXTENSION channelExtension = pSrb->StreamObject->HwStreamExtension;
    PSTREAM_PROPERTY_DESCRIPTOR pSPD = pSrb->CommandData.PropertyInfo;
    ULONG Id = pSPD->Property->Id;              // index of the property

    switch (Id) {

    case KSPROPERTY_DROPPEDFRAMES_CURRENT:
        {
            PKSPROPERTY_DROPPEDFRAMES_CURRENT_S pDroppedFrames =
                (PKSPROPERTY_DROPPEDFRAMES_CURRENT_S) pSPD->PropertyInfo;

            pDroppedFrames->PictureNumber = channelExtension->FrameInfo.PictureNumber;
            pDroppedFrames->DropCount = channelExtension->FrameInfo.DropCount;
            pDroppedFrames->AverageFrameSize = channelExtension->VideoInfoHeader->bmiHeader.biSizeImage;

            pSrb->ActualBytesTransferred = sizeof (KSPROPERTY_DROPPEDFRAMES_CURRENT_S);
            pSrb->Status = STATUS_SUCCESS;
            USBCAMD_KdPrint(MAX_TRACE, ("Drop# = %d, Pic.#= %d\n",
                                         (ULONG) channelExtension->FrameInfo.DropCount,
                                         (ULONG) channelExtension->FrameInfo.PictureNumber));

        }
        break;

    default:
//        TEST_TRAP();
        break;
    }
}



//==========================================================================;
//                   Clock Handling Routines
//==========================================================================;

//
// Another clock is being assigned as the Master clock
//

VOID VideoIndicateMasterClock (PHW_STREAM_REQUEST_BLOCK Srb)
{
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        Srb->StreamObject->HwStreamExtension;

    USBCAMD_KdPrint(MIN_TRACE,
        ("VideoIndicateMasterClock\n"));

    if (channelExtension->StreamNumber == STREAM_Capture ) {
        channelExtension->MasterClockHandle =
            Srb->CommandData.MasterClockHandle;
    }
    else {
        channelExtension->MasterClockHandle = NULL;
    }

    Srb->Status = STATUS_SUCCESS;
}


/*
** VideoSetFormat()
**
**   Sets the format for a video stream.  This happens both when the
**   stream is first opened, and also when dynamically switching formats
**   on the preview pin.
**
**   It is assumed that the format has been verified for correctness before
**   this call is made.
**
** Arguments:
**
**   pSrb - Stream request block for the Video stream
**
** Returns:
**
**   TRUE if the format could be set, else FALSE
**
** Side Effects:  none
*/

NTSTATUS
USBCAMD_SetVideoFormat(
    IN PVOID DeviceContext,
    IN  PHW_STREAM_REQUEST_BLOCK pSrb
    )
{
    PUSBCAMD_DEVICE_EXTENSION pHwDevExt;
    UINT                    nSize;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;
    PKSDATAFORMAT           pKSDataFormat;

    pHwDevExt = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);

    channelExtension =
        (PUSBCAMD_CHANNEL_EXTENSION) pSrb->StreamObject->HwStreamExtension;
    pKSDataFormat = pSrb->CommandData.OpenFormat;

    // -------------------------------------------------------------------
    // Specifier FORMAT_VideoInfo for VIDEOINFOHEADER
    // -------------------------------------------------------------------

    if (IsEqualGUID (&pKSDataFormat->Specifier,
                &KSDATAFORMAT_SPECIFIER_VIDEOINFO)) {

        PKS_DATAFORMAT_VIDEOINFOHEADER  pVideoInfoHeader =
                    (PKS_DATAFORMAT_VIDEOINFOHEADER) pSrb->CommandData.OpenFormat;
        PKS_VIDEOINFOHEADER     pVideoInfoHdrRequested =
                    &pVideoInfoHeader->VideoInfoHeader;

        nSize = KS_SIZE_VIDEOHEADER (pVideoInfoHdrRequested);

        USBCAMD_KdPrint(MIN_TRACE, ("USBCAMD: New VideoInfoHdrRequested\n"));
        USBCAMD_KdPrint(MIN_TRACE, ("Width=%d  Height=%d  FrameTime (ms)= %d\n",
                                pVideoInfoHdrRequested->bmiHeader.biWidth,
                                pVideoInfoHdrRequested->bmiHeader.biHeight,
                                pVideoInfoHdrRequested->AvgTimePerFrame/10000));
        //
        // If a previous format was in use, release the memory
        //
        if (channelExtension->VideoInfoHeader) {
            USBCAMD_ExFreePool(channelExtension->VideoInfoHeader);
            channelExtension->VideoInfoHeader = NULL;
        }

        // Since the VIDEOINFOHEADER is of potentially variable size
        // allocate memory for it

        channelExtension->VideoInfoHeader = USBCAMD_ExAllocatePool(NonPagedPool, nSize);

        if (channelExtension->VideoInfoHeader == NULL) {
            USBCAMD_KdPrint(MIN_TRACE, ("USBCAMD: ExAllocatePool failed\n"));
            pSrb->Status = STATUS_INSUFFICIENT_RESOURCES;
            return FALSE;
        }

        // Copy the VIDEOINFOHEADER requested to our storage
        RtlCopyMemory(
                channelExtension->VideoInfoHeader,
                pVideoInfoHdrRequested,
                nSize);
    }

    else {
        // Unknown format
        pSrb->Status = STATUS_INVALID_PARAMETER;
        return FALSE;
    }

    return TRUE;
}

/*
** USBCAMD_ReceiveCtrlPacket()
**
**   Receives packet commands that control the Audio stream
**
** Arguments:
**
**   Srb - The stream request block for the Audio stream
**
** Returns:
**
** Side Effects:  none
*/

VOID STREAMAPI
USBCAMD_ReceiveCtrlPacket(
    IN PHW_STREAM_REQUEST_BLOCK Srb
    )
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension =
         Srb->HwDeviceExtension;
    BOOLEAN completedByCam = FALSE;
    KSSTATE    PreviousState;
    BOOL       Busy;
    int        StreamNumber = Srb->StreamObject->StreamNumber;
    
    PUSBCAMD_CHANNEL_EXTENSION channelExtension =
        (PUSBCAMD_CHANNEL_EXTENSION) Srb->StreamObject->HwStreamExtension;
    PreviousState = channelExtension->KSState;

    USBCAMD_KdPrint(MAX_TRACE, ("USBCAMD_ReceiveCtrlPacket %x\n", Srb->Command));

    //
    // If we're already processing an SRB, add it to the queue
    //
    Busy = AddToListIfBusy (
                        Srb,
                        &deviceExtension->ControlSRBSpinLock,
                        &deviceExtension->ProcessingControlSRB[StreamNumber],
                        &deviceExtension->StreamControlSRBList[StreamNumber]);

    if (Busy) {
        return;
    }

    while (TRUE) {

        USBCAMD_DbgLog(TL_SRB_TRACE, '+brS',
            Srb,
            Srb->Command,
            0
            );

        //
        // call the cam driver first
        //

        if (channelExtension->CamReceiveCtrlPacket) {
            (*channelExtension->CamReceiveCtrlPacket)(
                Srb,
                USBCAMD_GET_DEVICE_CONTEXT(deviceExtension),
                &completedByCam);
        }

        if (completedByCam == TRUE) {

            USBCAMD_DbgLog(TL_SRB_TRACE, '-brS',
                Srb,
                Srb->Command,
                Srb->Status
                );

            goto CtrlPacketDone;
        }

        switch (Srb->Command) {

        case SRB_PROPOSE_DATA_FORMAT:

            USBCAMD_KdPrint(MAX_TRACE, ("Cam driver should have handled PrposeDataFormat SRB.\n"));
            Srb->Status = STATUS_NOT_IMPLEMENTED;
            break;

        case SRB_SET_DATA_FORMAT:

            USBCAMD_KdPrint(MAX_TRACE, ("Cam driver should have handled SetDataFormat SRB.\n"));
            Srb->Status = STATUS_NOT_IMPLEMENTED;
            break;

        case SRB_GET_DATA_FORMAT:

            USBCAMD_KdPrint(MAX_TRACE, ("Cam driver should have handled GetDataFormat SRB.\n"));
            Srb->Status = STATUS_NOT_IMPLEMENTED;
            break;

        case SRB_GET_STREAM_STATE:

            Srb->CommandData.StreamState = channelExtension->KSState;
            Srb->ActualBytesTransferred = sizeof (KSSTATE);
            Srb->Status = STATUS_SUCCESS;

            // A very odd rule:
            // When transitioning from stop to pause, DShow tries to preroll
            // the graph.  Capture sources can't preroll, and indicate this
            // by returning VFW_S_CANT_CUE in user mode.  To indicate this
            // condition from drivers, they must return ERROR_NO_DATA_DETECTED

            if (channelExtension->KSState == KSSTATE_PAUSE) {
                Srb->Status = STATUS_NO_DATA_DETECTED;
            }

            break;

        case SRB_SET_STREAM_STATE:
            {
            // we will not allow virtual still pin's stata to change if capture pin is
            // not streaming.
            if ((StreamNumber == STREAM_Still) &&
                 (deviceExtension->ChannelExtension[STREAM_Capture] == NULL) &&
                 (channelExtension->VirtualStillPin )){
                Srb->Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // don't allow stream state change if we are not in D0 state.
            if (deviceExtension->CurrentPowerState != PowerDeviceD0 ) {
                Srb->Status = STATUS_INVALID_PARAMETER;
                break;
            }

            USBCAMD_KdPrint(MAX_TRACE, ("set stream state %x\n", Srb->CommandData.StreamState));

            switch (Srb->CommandData.StreamState)  {

            case KSSTATE_STOP:

                USBCAMD_KdPrint(MIN_TRACE, ("Stream %d STOP  \n",StreamNumber));

                if (channelExtension->ImageCaptureStarted) {
#if DBG
                    LARGE_INTEGER StopTime;
                    ULONG FramesPerSec = 0;

                    KeQuerySystemTime(&StopTime);

                    StopTime.QuadPart -= channelExtension->StartTime.QuadPart;
                    StopTime.QuadPart /= 10000; // convert to milliseconds

                    if (StopTime.QuadPart != 0) {

                        // Calculate the Frames/Sec (with enough precision to show one decimal place)
                        FramesPerSec = (ULONG)(
                            (channelExtension->FrameCaptured * 10000) / StopTime.QuadPart
                            );
                    }

                    USBCAMD_KdPrint(MIN_TRACE, ("**ActualFramesPerSecond: %d.%d\n",
                        FramesPerSec / 10, FramesPerSec % 10
                        ));
#endif
                    Srb->Status =
                        USBCAMD_StopChannel(deviceExtension,
                                            channelExtension);

                } else {
                    Srb->Status = STATUS_SUCCESS;
                }

                break;

            case KSSTATE_PAUSE:

                USBCAMD_KdPrint(MIN_TRACE, ("Stream %d PAUSE\n",StreamNumber));
                //
                // On a transition to pause from acquire or stop, start our timer running.
                //

                if (PreviousState == KSSTATE_ACQUIRE || PreviousState == KSSTATE_STOP) {

                    // Zero the frame counters
#if DBG
                    channelExtension->FrameCaptured = 0;                // actual frames captured
                    channelExtension->VideoFrameLostCount = 0;          // actual dropped frames
                    KeQuerySystemTime(&channelExtension->StartTime);    // the tentative start time
#endif
                    channelExtension->FrameInfo.PictureNumber = 0;
                    channelExtension->FrameInfo.DropCount = 0;
                    channelExtension->FrameInfo.dwFrameFlags = 0;
                    channelExtension->FirstFrame = TRUE;
                }
                Srb->Status = STATUS_SUCCESS;
                break;

            case KSSTATE_ACQUIRE:

                USBCAMD_KdPrint(MIN_TRACE, ("Stream %d ACQUIRE\n",StreamNumber));
                Srb->Status = STATUS_SUCCESS;
                break;

            case KSSTATE_RUN:

                USBCAMD_KdPrint(MIN_TRACE, ("Stream %d RUN\n",StreamNumber));

                // we will not start the channel again if we are toggling between pause & run.
                if (!channelExtension->ImageCaptureStarted && !deviceExtension->InPowerTransition) {

                    Srb->Status = USBCAMD_StartChannel(deviceExtension,channelExtension);
#if DBG
                    KeQuerySystemTime(&channelExtension->StartTime);        // the real start time
#endif
                }
                else
                    Srb->Status = STATUS_SUCCESS;
                break;

            default:

//              TEST_TRAP();
                Srb->Status = STATUS_NOT_IMPLEMENTED;
                break;
            }
            
            channelExtension->KSState = Srb->CommandData.StreamState;
            
            }
            break;

        case SRB_INDICATE_MASTER_CLOCK:

            //
            // Assigns a clock to a stream
            //

            VideoIndicateMasterClock (Srb);

            break;

        case SRB_GET_STREAM_PROPERTY:

            // Ensure the return code reflects the state of the device
            if (deviceExtension->CameraUnplugged) {

                Srb->Status = STATUS_NO_SUCH_DEVICE;
            }
            else {

                VideoGetProperty(Srb);
            }
            break;

        default:

            //
            // invalid / unsupported command. Fail it as such
            //

//          TEST_TRAP();

            Srb->Status = STATUS_NOT_IMPLEMENTED;
        }

        
        COMPLETE_STREAM_READ(Srb);

CtrlPacketDone:

        //
        // See if there's anything else on the queue
        //
        Busy = RemoveFromListIfAvailable (
                        &Srb,
                        &deviceExtension->ControlSRBSpinLock,
                        &deviceExtension->ProcessingControlSRB[StreamNumber],
                        &deviceExtension->StreamControlSRBList[StreamNumber]);

        if (!Busy) {
            break;
        }

    }
}



/*
** USBCAMD_CompleteRead()
**
**   Complete am Srb
**
** Arguments:
**
**
** Returns:
**
** Side Effects:  none
*/

VOID
USBCAMD_CompleteRead(
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN PUSBCAMD_READ_EXTENSION ReadExtension,
    IN NTSTATUS NtStatus,
    IN ULONG BytesTransferred
    )
{
    PHW_STREAM_REQUEST_BLOCK srb;
    PKSSTREAM_HEADER dataPacket;
    PKS_FRAME_INFO    pFrameInfo;
    ULONG StreamNumber ;
    
    srb = ReadExtension->Srb;
    StreamNumber = srb->StreamObject->StreamNumber;
    srb->Status = NtStatus;
    dataPacket = srb->CommandData.DataBufferArray;
    dataPacket->DataUsed = BytesTransferred;

    if ( StreamNumber == STREAM_Capture ) {
        pFrameInfo = (PKS_FRAME_INFO) (dataPacket + 1);
        ChannelExtension->FrameInfo.ExtendedHeaderSize = pFrameInfo->ExtendedHeaderSize;
    }
    
    if ( ChannelExtension->MasterClockHandle && (StreamNumber == STREAM_Capture ) &&
         (NtStatus != STATUS_CANCELLED) ){

        dataPacket->PresentationTime.Time = (LONGLONG)GetStreamTime(srb, ChannelExtension);

        // Check if we've seen frames yet (we cannot depend on the frame number...
        // ... 1+ frames may have been dropped before the first SRB was available)
        if (!ChannelExtension->FirstFrame) {
            LONGLONG PictureNumber =    // calculate a picture number (rounded properly)
                (dataPacket->Duration / 2 + dataPacket->PresentationTime.Time) / dataPacket->Duration;

            // Is the PictureNumber guess okay?
            if (PictureNumber > ChannelExtension->FrameInfo.PictureNumber) {

                // Calculate the delta between picture numbers
                ULONG PictureDelta = (ULONG)
                    (PictureNumber - ChannelExtension->FrameInfo.PictureNumber);

                // Update the Picture Number
                ChannelExtension->FrameInfo.PictureNumber += PictureDelta;

                // Update the drop count (never calculated directly to avoid decreasing values)
                ChannelExtension->FrameInfo.DropCount += PictureDelta - 1;
#if DBG
                if (PictureDelta - 1) {
                    USBCAMD_KdPrint(MAX_TRACE, ("Graph dropped %d frame(s): P#%d,D#%d,P-T=%d\n",
                        (LONG) (PictureDelta - 1),
                        (LONG) ChannelExtension->FrameInfo.PictureNumber,
                        (LONG) ChannelExtension->FrameInfo.DropCount,
                        (ULONG) dataPacket->PresentationTime.Time /10000));
                }
#endif
            }
            else {

                // Is clock running backwards?
                if (dataPacket->PresentationTime.Time < ChannelExtension->PreviousStreamTime) {

                    USBCAMD_KdPrint(MIN_TRACE, ("Clock went backwards: PT=%d, Previous PT=%d\n",
                        (ULONG) dataPacket->PresentationTime.Time / 10000,
                        (ULONG) ChannelExtension->PreviousStreamTime / 10000 ));

                    // Use the previous stream time
                    dataPacket->PresentationTime.Time = ChannelExtension->PreviousStreamTime;
                }

                // All we can do is bump the Picture Number by one while the clock is lagging
                ChannelExtension->FrameInfo.PictureNumber += 1;
            }
        }
        else {

            ChannelExtension->FirstFrame = FALSE;

            // Initialize the Picture Number
            ChannelExtension->FrameInfo.PictureNumber = 1;

            // Initialize the drop count (nothing dropped before this frame)
            ChannelExtension->FrameInfo.DropCount = 0;
        }

        // Save presentation time for use with the next frame
        ChannelExtension->PreviousStreamTime = dataPacket->PresentationTime.Time;

#if DBG
        USBCAMD_KdPrint(MAX_TRACE, ("P#%d,D#%d,P-T=%d,LF=%d\n",
            (LONG) ChannelExtension->FrameInfo.PictureNumber,
            (LONG) ChannelExtension->FrameInfo.DropCount,
            (ULONG) dataPacket->PresentationTime.Time /10000,
            ReadExtension->CurrentLostFrames));

#endif
    }
                                                
    // we set the options flags to key frames only if Cam driver didn't indicate otherwise.
    if ( dataPacket->OptionsFlags == 0 ) {
        // Every frame we generate is a key frame (aka SplicePoint)
        dataPacket->OptionsFlags |= KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT;
    }

    //
    // if we have a master clock
    //
    if (ChannelExtension->MasterClockHandle ) {
            dataPacket->OptionsFlags |=
                KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                KSSTREAM_HEADER_OPTIONSF_DURATIONVALID;
    }
    else {
    // clear the timestamp valid flags
            dataPacket->OptionsFlags &=
                ~(KSSTREAM_HEADER_OPTIONSF_TIMEVALID |
                KSSTREAM_HEADER_OPTIONSF_DURATIONVALID);
    }

    if ( StreamNumber == STREAM_Capture )
       *pFrameInfo = ChannelExtension->FrameInfo ;

    // only free the buffer if we allocate not DSHOW.
    if ( !ChannelExtension->NoRawProcessingRequired) {
        if ( ReadExtension->RawFrameBuffer) {
            USBCAMD_FreeRawFrameBuffer(ReadExtension->RawFrameBuffer);
        }
    }

    // Enforce that we are done with this destination
    ReadExtension->RawFrameBuffer = NULL;

    if ( ChannelExtension->StreamNumber == 1) {
        USBCAMD_KdPrint(MAX_TRACE, ("Read Srb %x for stream %d is completed, status = %x\n",
                                    srb,ChannelExtension->StreamNumber, srb->Status));
    }
    COMPLETE_STREAM_READ(srb);
}

/*
** USBCAMD_GetFrameBufferFromSrb()
**
**   Complete am Srb
**
** Arguments:
**
**
** Returns:
**
** Side Effects:  none
*/

PVOID
USBCAMD_GetFrameBufferFromSrb(
    IN PVOID Srb,
    OUT PULONG MaxLength
    )
{
    PVOID frameBuffer =NULL;
    PKSSTREAM_HEADER streamHeader;

#if 0   // PIO = FALSE
    PIRP irp;

    irp = ((PHW_STREAM_REQUEST_BLOCK) Srb)->Irp;

    USBCAMD_KdPrint(MIN_TRACE, ("'SRB MDL = %x\n",
        irp->MdlAddress));

    frameBuffer = MmGetSystemAddressForMdl(irp->MdlAddress);
#else
    // PIO = TRUE
    frameBuffer = ((PHW_STREAM_REQUEST_BLOCK) Srb)->CommandData.DataBufferArray->Data;
#endif
    streamHeader = ((PHW_STREAM_REQUEST_BLOCK) Srb)->CommandData.DataBufferArray;
    USBCAMD_KdPrint(ULTRA_TRACE, ("SRB Length = %x\n",
        streamHeader->FrameExtent));
    USBCAMD_KdPrint(ULTRA_TRACE, ("frame buffer = %x\n", frameBuffer));
    *MaxLength = streamHeader->FrameExtent;

    return frameBuffer;
}

/*
** AddToListIfBusy ()
**
**   Grabs a spinlock, checks the busy flag, and if set adds an SRB to a queue
**
** Arguments:
**
**   pSrb - Stream request block
**
**   SpinLock - The spinlock to use when checking the flag
**
**   BusyFlag - The flag to check
**
**   ListHead - The list onto which the Srb will be added if the busy flag is set
**
** Returns:
**
**   The state of the busy flag on entry.  This will be TRUE if we're already
**   processing an SRB, and FALSE if no SRB is already in progress.
**
** Side Effects:  none
*/

BOOL
STREAMAPI
AddToListIfBusy (
    IN PHW_STREAM_REQUEST_BLOCK pSrb,
    IN KSPIN_LOCK              *SpinLock,
    IN OUT BOOL                *BusyFlag,
    IN LIST_ENTRY              *ListHead
    )
{
    KIRQL                       Irql;
    PUSBCAMD_READ_EXTENSION    pSrbExt = (PUSBCAMD_READ_EXTENSION)pSrb->SRBExtension;

    KeAcquireSpinLock (SpinLock, &Irql);

    // If we're already processing another SRB, add this current request
    // to the queue and return TRUE

    if (*BusyFlag == TRUE) {
        // Save the SRB pointer away in the SRB Extension
        pSrbExt->Srb = pSrb;
        USBCAMD_KdPrint(ULTRA_TRACE, ("Queuing CtrlPacket %x\n", pSrb->Command));
        InsertTailList(ListHead, &pSrbExt->ListEntry);
        KeReleaseSpinLock(SpinLock, Irql);
        return TRUE;
    }

    // Otherwise, set the busy flag, release the spinlock, and return FALSE

    *BusyFlag = TRUE;
    KeReleaseSpinLock(SpinLock, Irql);

    return FALSE;
}

/*
** RemoveFromListIfAvailable ()
**
**   Grabs a spinlock, checks for an available SRB, and removes it from the list
**
** Arguments:
**
**   &pSrb - where to return the Stream request block if available
**
**   SpinLock - The spinlock to use
**
**   BusyFlag - The flag to clear if the list is empty
**
**   ListHead - The list from which an SRB will be removed if available
**
** Returns:
**
**   TRUE if an SRB was removed from the list
**   FALSE if the list is empty
**
** Side Effects:  none
*/

BOOL
STREAMAPI
RemoveFromListIfAvailable (
    IN OUT PHW_STREAM_REQUEST_BLOCK *pSrb,
    IN KSPIN_LOCK                   *SpinLock,
    IN OUT BOOL                     *BusyFlag,
    IN LIST_ENTRY                   *ListHead
    )
{
    KIRQL                       Irql;

    KeAcquireSpinLock (SpinLock, &Irql);

    //
    // If the queue is now empty, clear the busy flag, and return
    //
    if (IsListEmpty(ListHead)) {
        *BusyFlag = FALSE;
        KeReleaseSpinLock(SpinLock, Irql);
        return FALSE;
    }
    //
    // otherwise extract the SRB
    //
    else {
        PUSBCAMD_READ_EXTENSION  pSrbExt;
        PLIST_ENTRY listEntry;

        listEntry = RemoveHeadList(ListHead);

        pSrbExt = (PUSBCAMD_READ_EXTENSION) CONTAINING_RECORD(listEntry,
                                             USBCAMD_READ_EXTENSION,
                                             ListEntry);
        *BusyFlag = TRUE;
        KeReleaseSpinLock(SpinLock, Irql);
        *pSrb = pSrbExt->Srb;
    }
    return TRUE;
}

/*
** GetStreamTime ()
**
**   Get current stream time from the graph master clock
**
** Arguments:
**
**   Srb - pointer to current SRB
**
**   ChannelExtension - ptr to current channel extension
**
**
** Returns:
**
**   current stream time in ULONGULONG
**
** Side Effects:  none
*/

ULONGLONG GetStreamTime(
            IN PHW_STREAM_REQUEST_BLOCK Srb,
            IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension)
{

    HW_TIME_CONTEXT  timeContext;

    timeContext.HwDeviceExtension =
        (struct _HW_DEVICE_EXTENSION *)ChannelExtension->DeviceExtension;
    timeContext.HwStreamObject = Srb->StreamObject;
    timeContext.Function = TIME_GET_STREAM_TIME;
    timeContext.Time = timeContext.SystemTime =0;

    if ( ChannelExtension->MasterClockHandle)
        StreamClassQueryMasterClockSync(ChannelExtension->MasterClockHandle,&timeContext);

    return (timeContext.Time);
}


/*++

Routine Description:

    This routine will notify STI stack that a trigger button has been pressd

Arguments:



Return Value:

    NT status code

--*/


VOID USBCAMD_NotifyStiMonitor(PUSBCAMD_DEVICE_EXTENSION deviceExtension)
{

    if (deviceExtension->EventCount)
    {
        StreamClassDeviceNotification(
            SignalMultipleDeviceEvents,
            deviceExtension,
            &USBCAMD_KSEVENTSETID_VIDCAPTOSTI,
            KSEVENT_VIDCAPTOSTI_EXT_TRIGGER);
    }
}


/*++

Routine Description:

    This routine will get called by stream class to enable/disable device events.

Arguments:



Return Value:

    NT status code

--*/

NTSTATUS STREAMAPI USBCAMD_DeviceEventProc (PHW_EVENT_DESCRIPTOR pEvent)
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension=
            (PUSBCAMD_DEVICE_EXTENSION)(pEvent->DeviceExtension);

    if (pEvent->Enable)
    {
        deviceExtension->EventCount++;
    }
    else
    {
        deviceExtension->EventCount--;
    }
    return STATUS_SUCCESS;
}

#if DBG

ULONGLONG
GetSystemTime( IN PUSBCAMD_DEVICE_EXTENSION DevExt )
{

    ULONGLONG ticks;

    KeQueryTickCount((PLARGE_INTEGER)&ticks);
    ticks *= DevExt->TimeIncrement;
    return(ticks);
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\usbcamd\reset.c ===
/*++

Copyright (c) 1998  Microsoft Corporation

Module Name:

  reset.c

Abstract:

   Isochronous transfer code for usbcamd USB camera driver

Environment:

    kernel mode only

Notes:

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
  PURPOSE.

  Copyright (c) 1998 Microsoft Corporation.  All Rights Reserved.


Revision History:

    Original 3/96 John Dunn
    Updated  3/98 Husni Roukbi

--*/

#include "usbcamd.h"


NTSTATUS
USBCAMD_GetPortStatus(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION channelExtension,
    IN PULONG PortStatus
    )
/*++

Routine Description:

    Passes a URB to the USBD class driver

Arguments:

    DeviceExtension - pointer to the device extension for this instance of an USB camera

    Urb - pointer to Urb request block

Return Value:

    STATUS_SUCCESS if successful,
    STATUS_UNSUCCESSFUL otherwise

--*/
{
    NTSTATUS ntStatus; 
    
    USBCAMD_SERIALIZE(DeviceExtension);

    USBCAMD_KdPrint (MAX_TRACE, ("enter USBCAMD_GetPortStatus on Stream #%d \n",
                     channelExtension->StreamNumber));

    *PortStatus = 0;
    ntStatus = USBCAMD_CallUSBD(DeviceExtension, NULL, 
                                IOCTL_INTERNAL_USB_GET_PORT_STATUS,PortStatus);    

    USBCAMD_KdPrint(MIN_TRACE, ("GetPortStatus returns (0x%x), Port Status (0x%x)\n",ntStatus, *PortStatus));
    
    USBCAMD_RELEASE(DeviceExtension);

    return ntStatus;
}


NTSTATUS
USBCAMD_EnablePort(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension
    )
/*++

Routine Description:

    Passes a URB to the USBD class driver

Arguments:

    DeviceExtension - pointer to the device extension for this instance of an USB camera

    Urb - pointer to Urb request block

Return Value:

    STATUS_SUCCESS if successful,
    STATUS_UNSUCCESSFUL otherwise

--*/
{
    NTSTATUS ntStatus;

    USBCAMD_KdPrint (MIN_TRACE, ("enter USBCAMD_EnablePort\n"));
    //
    // issue a synchronous request
    //
    ntStatus = USBCAMD_CallUSBD(DeviceExtension, NULL, 
                                 IOCTL_INTERNAL_USB_ENABLE_PORT,NULL);
    if (STATUS_NOT_SUPPORTED == ntStatus) {
        // This means the device is not on a root hub, so try resetting instead
        ntStatus = USBCAMD_CallUSBD(DeviceExtension, NULL, 
                                     IOCTL_INTERNAL_USB_RESET_PORT,NULL);
    }

    if (!NT_SUCCESS(ntStatus)) {
        USBCAMD_KdPrint (MIN_TRACE, ("Failed to enable port (%x) \n", ntStatus));
        // TEST_TRAP(); // This can happen during surprise removal.
    }
    return ntStatus;
}


/*++

Routine Description:

    This function restarts the streaming process from an error state at 
    PASSIVE_LEVEL.

Arguments:

    DeviceExtension - pointer to the device extension for this instance of the USB camera
                    devcice.
                    
    ChannelExtension - Channel to reset.    

Return Value:

--*/   
NTSTATUS
USBCAMD_ResetChannel(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN ULONG portUsbStatus,
    IN ULONG portNtStatus
    )    
{
    NTSTATUS ntStatus ;
    ULONG status;
    LONG StreamNumber;

    USBCAMD_SERIALIZE(DeviceExtension);

    ntStatus = STATUS_SUCCESS;

    StreamNumber = ChannelExtension->StreamNumber;
    USBCAMD_KdPrint (MAX_TRACE, ("USBCAMD_ResetChannel #%d\n", StreamNumber));
    ASSERT_CHANNEL(ChannelExtension);

    if (!ChannelExtension->ChannelPrepared) {

        USBCAMD_RELEASE(DeviceExtension);

        return ntStatus;
    }

    if (NT_SUCCESS(portNtStatus) && !(portUsbStatus & USBD_PORT_ENABLED)) {
        ntStatus = USBCAMD_EnablePort(DeviceExtension); // re-enable the disabled port.
        if (!NT_SUCCESS(ntStatus) ) {
            USBCAMD_RELEASE(DeviceExtension);
            USBCAMD_KdPrint (MIN_TRACE, ("Failed to Enable usb port(0x%X)\n",ntStatus ));
            // TEST_TRAP(); // This can happen during surprise removal.
            return ntStatus;
        }
    }

    //
    // channel may not be in error mode, make sure and issue 
    // an abort before waiting for the channel to spin down
    //

    ntStatus = USBCAMD_ResetPipes(DeviceExtension,
                       ChannelExtension, 
                       DeviceExtension->Interface,
                       TRUE);   
    
    if (NT_SUCCESS(ntStatus)) {

        //
        // Block the reset for now, waiting for all iso irps to be completed
        //
        ntStatus = USBCAMD_WaitForIdle(&ChannelExtension->IdleLock, USBCAMD_RESET_STREAM);
        if (STATUS_TIMEOUT == ntStatus) {

            KIRQL oldIrql;
            int idx;

            // A timeout requires that we take harsher measures to reset the stream

            // Hold the spin lock while cancelling the IRPs
            KeAcquireSpinLock(&ChannelExtension->TransferSpinLock, &oldIrql);

            // Cancel the IRPs
            for (idx = 0; idx < USBCAMD_MAX_REQUEST; idx++) {

                PUSBCAMD_TRANSFER_EXTENSION TransferExtension = &ChannelExtension->TransferExtension[idx];

                if (TransferExtension->SyncIrp) {
                    IoCancelIrp(TransferExtension->SyncIrp);
                }

                if (TransferExtension->DataIrp) {
                    IoCancelIrp(TransferExtension->DataIrp);
                }
            }

            KeReleaseSpinLock(&ChannelExtension->TransferSpinLock, oldIrql);

            // Try waiting one more time
            ntStatus = USBCAMD_WaitForIdle(&ChannelExtension->IdleLock, USBCAMD_RESET_STREAM);
        }

        if (STATUS_SUCCESS == ntStatus) {

            // go ahead and attempt to restart the channel.
            //
            // now reset the pipes
            //

            ntStatus = USBCAMD_ResetPipes(DeviceExtension,
                                          ChannelExtension,
                                          DeviceExtension->Interface,
                                          FALSE);
            if (NT_SUCCESS(ntStatus)) {

                //
                // Idle lock Acquire/Release is done here to detect if the stream is being
                // stopped during a reset. The real acquires are done later when the bulk or
                // iso streams are started, and the real releases are done in the completion
                // routines.
                //
                ntStatus = USBCAMD_AcquireIdleLock(&ChannelExtension->IdleLock);
                if (NT_SUCCESS(ntStatus)) {

                    //
                    // only restart the stream if it is already in the running state
                    //

                    if (ChannelExtension->ImageCaptureStarted) {

                        if (DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

                            // send hardware stop and re-start
                            ntStatus = (*DeviceExtension->DeviceDataEx.DeviceData2.CamStopCaptureEx)(
                                        DeviceExtension->StackDeviceObject,      
                                        USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                                        StreamNumber);

                            if (NT_SUCCESS(ntStatus)) {
                                ntStatus = (*DeviceExtension->DeviceDataEx.DeviceData2.CamStartCaptureEx)(
                                            DeviceExtension->StackDeviceObject,
                                            USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                                            StreamNumber);    
   
                            }                    
                        }
                        else {

                            // send hardware stop and re-start
                            ntStatus = (*DeviceExtension->DeviceDataEx.DeviceData.CamStopCapture)(
                                        DeviceExtension->StackDeviceObject,      
                                        USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));

                            if (NT_SUCCESS(ntStatus)) {
                                ntStatus = (*DeviceExtension->DeviceDataEx.DeviceData.CamStartCapture)(
                                            DeviceExtension->StackDeviceObject,
                                            USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));    
                            }                    

                        }

                        if (NT_SUCCESS(ntStatus)) {

                            ChannelExtension->SyncPipe = DeviceExtension->SyncPipe;
                            if (StreamNumber == DeviceExtension->IsoPipeStreamType ) {
                                ChannelExtension->DataPipe = DeviceExtension->DataPipe;
                                ChannelExtension->DataPipeType = UsbdPipeTypeIsochronous;   
                                USBCAMD_StartIsoStream(DeviceExtension, ChannelExtension);
                            }
                            else if (StreamNumber == DeviceExtension->BulkPipeStreamType ) {
                                ChannelExtension->DataPipe = DeviceExtension->BulkDataPipe;
                                ChannelExtension->DataPipeType = UsbdPipeTypeBulk;  
                                USBCAMD_StartBulkStream(DeviceExtension, ChannelExtension);                    
                            }
                        }        
                    }
                    else {
                        USBCAMD_KdPrint (MIN_TRACE, ("ImageCaptureStarted is False. \n"));
                    }

                    USBCAMD_ReleaseIdleLock(&ChannelExtension->IdleLock);
                }
                else {
                    USBCAMD_KdPrint (MIN_TRACE, ("Stream stopped during reset. \n"));
                }
            }
        }
        else {
            USBCAMD_KdPrint (MIN_TRACE, ("Stream requests not aborting, giving up.\n"));
        }
    }

    USBCAMD_KdPrint (MIN_TRACE, ("USBCAMD_ResetChannel exit (0x%X) \n", ntStatus));
    USBCAMD_RELEASE(DeviceExtension);

    return ntStatus;
}            


NTSTATUS
USBCAMD_ResetPipes(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN PUSBD_INTERFACE_INFORMATION InterfaceInformation,
    IN BOOLEAN Abort
    )
/*++

Routine Description:

    Reset both pipes associated with a video channel on the
    camera.

Arguments:

Return Value:


--*/
{
    NTSTATUS ntStatus;
    PURB urb;

    USBCAMD_KdPrint (MAX_TRACE, ("USBCAMD_ResetPipes\n"));

    urb = USBCAMD_ExAllocatePool(NonPagedPool, 
                         sizeof(struct _URB_PIPE_REQUEST));

    if (urb) {
    
        urb->UrbHeader.Length = (USHORT) sizeof (struct _URB_PIPE_REQUEST);
        urb->UrbHeader.Function = (USHORT) (Abort ? URB_FUNCTION_ABORT_PIPE : 
                                                    URB_FUNCTION_RESET_PIPE);
                                                            
        urb->UrbPipeRequest.PipeHandle = 
            InterfaceInformation->Pipes[ChannelExtension->DataPipe].PipeHandle;

        ntStatus = USBCAMD_CallUSBD(DeviceExtension, urb,0,NULL);
        if ( !NT_SUCCESS(ntStatus) )  {
            if (Abort) {
                USBCAMD_KdPrint (MIN_TRACE, ("Abort Data Pipe Failed (0x%x) \n", ntStatus));
               // TEST_TRAP();
            }
        }

        if (NT_SUCCESS(ntStatus) && ChannelExtension->SyncPipe != -1)  {
            urb->UrbHeader.Length = (USHORT) sizeof (struct _URB_PIPE_REQUEST);
            urb->UrbHeader.Function =(USHORT) (Abort ? URB_FUNCTION_ABORT_PIPE : 
                                                        URB_FUNCTION_RESET_PIPE);
            urb->UrbPipeRequest.PipeHandle = 
                InterfaceInformation->Pipes[ChannelExtension->SyncPipe].PipeHandle;
                
            ntStatus = USBCAMD_CallUSBD(DeviceExtension, urb,0,NULL);
            if ( !NT_SUCCESS(ntStatus) )  {
                if (Abort) {
                    USBCAMD_KdPrint (MIN_TRACE, ("Abort Sync Pipe Failed (0x%x) \n", ntStatus));
                 //   TEST_TRAP();
                }
            }
        }            

        USBCAMD_ExFreePool(urb);
        
    } else {
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;       
    }       

    return ntStatus;
}   


VOID
USBCAMD_CancelQueuedSRBs(
    PUSBCAMD_CHANNEL_EXTENSION channelExtension
    )
/*++

Routine Description:

    Cancel or set aside all queued SRBs 
    
Arguments:

    channelExtension - Pointer to the ChannelExtension object.

Return Value:

    None.

--*/
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBCAMD_READ_EXTENSION readExtension = NULL;
    LIST_ENTRY LocalList;
    KIRQL Irql;

    deviceExtension = channelExtension->DeviceExtension;
        
    ASSERT_CHANNEL(channelExtension);
    ASSERT(channelExtension->ChannelPrepared == TRUE);
    ASSERT(channelExtension->ImageCaptureStarted);
    
    InitializeListHead(&LocalList);

    //
    // complete any pending reads in queue
    //

    // Always grab these spinlocks in this order
    KeAcquireSpinLock(&channelExtension->CurrentRequestSpinLock, &Irql);
    KeAcquireSpinLockAtDpcLevel(&channelExtension->PendingIoListSpin);

    //
    // If we have an SRB for the current frame, move it to the head of the
    // PendingIoList
    //
    if (channelExtension->CurrentRequest) {
    
        readExtension = channelExtension->CurrentRequest;              
        channelExtension->CurrentRequest = NULL;

        InsertHeadList(&channelExtension->PendingIoList, &readExtension->ListEntry);
    }

    //
    // If not intentionally going idle, or the camera has been unplugged,
    // then the SRBs need to be cancelled
    //
    if (!channelExtension->IdleIsoStream || deviceExtension->CameraUnplugged) {

        // Move these to a private list before calling USBCAMD_CompleteRead
        while (!IsListEmpty(&channelExtension->PendingIoList)) {

            PLIST_ENTRY listEntry = RemoveHeadList(&channelExtension->PendingIoList);

            InsertTailList(&LocalList, listEntry);
        }
    }

    // Always release these spinlocks in the reverse order
    KeReleaseSpinLockFromDpcLevel(&channelExtension->PendingIoListSpin);
    KeReleaseSpinLock(&channelExtension->CurrentRequestSpinLock, Irql);

    // Now that we're outside the spinlocks, do the actual cancellation
    while (!IsListEmpty(&LocalList)) {

        PLIST_ENTRY listEntry = RemoveHeadList(&LocalList);

        readExtension = (PUSBCAMD_READ_EXTENSION)
            CONTAINING_RECORD(listEntry, USBCAMD_READ_EXTENSION, ListEntry);

        USBCAMD_KdPrint(MIN_TRACE, ("Cancelling queued read SRB on stream %d, Ch. Flag(0x%x)\n",
            channelExtension->StreamNumber,
            channelExtension->Flags
            ));    
   
        USBCAMD_CompleteRead(channelExtension,readExtension,STATUS_CANCELLED,0);
    }
}


BOOLEAN
USBCAMD_ProcessResetRequest(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension
    )
/*++

Routine Description:

    Request a reset of the ISO stream.
    This function is re-entarnt and can be called at DPC level

Arguments:

Return Value:

    None.

--*/
{
    PUSBCAMD_WORK_ITEM pWorkItem;

    ASSERT_CHANNEL(ChannelExtension);


    if (InterlockedIncrement(&DeviceExtension->TimeoutCount[ChannelExtension->StreamNumber]) > 0) {
        USBCAMD_KdPrint (MIN_TRACE, ("Stream # %d reset already scheduled\n", ChannelExtension->StreamNumber));
        InterlockedDecrement(&DeviceExtension->TimeoutCount[ChannelExtension->StreamNumber]);
        return FALSE;
    }
    
    USBCAMD_KdPrint (MAX_TRACE, ("Stream # %d reset scheduled\n", ChannelExtension->StreamNumber));
    pWorkItem = (PUSBCAMD_WORK_ITEM)USBCAMD_ExAllocatePool(NonPagedPool, sizeof(USBCAMD_WORK_ITEM));

    if (pWorkItem) {

        ExInitializeWorkItem(&pWorkItem->WorkItem,
                             USBCAMD_ResetWorkItem,
                             pWorkItem);

        pWorkItem->ChannelExtension = ChannelExtension;

        ChannelExtension->StreamError = TRUE;

        ExQueueWorkItem(&pWorkItem->WorkItem, CriticalWorkQueue);

    } else {
        //
        // failed to schedule the timeout
        //
        InterlockedDecrement(&DeviceExtension->TimeoutCount[ChannelExtension->StreamNumber]);
    }
    return TRUE;
}


VOID
USBCAMD_ResetWorkItem(
    PVOID Context
    )
/*++

Routine Description:

    Work item executed at passive level to reset the camera

Arguments:

Return Value:

    None.

--*/
{
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;
    PUSBCAMD_CHANNEL_EXTENSION channelExtension;
    ULONG StreamNumber;

    channelExtension = ((PUSBCAMD_WORK_ITEM)Context)->ChannelExtension;
    ASSERT_CHANNEL(channelExtension);
    deviceExtension = channelExtension->DeviceExtension;
    StreamNumber = channelExtension->StreamNumber;
    
    // if we are dealing with a virtual still channel. then no HW reset is required on 
    // this channel. The video channel will eventually reset the ISO pipe since they both
    // use the same pipe.

    if (!channelExtension->VirtualStillPin) {
        NTSTATUS ntStatus;
        ULONG portStatus;

        //
        // Check the port state.
        //

        ntStatus = USBCAMD_GetPortStatus(
            deviceExtension,
            channelExtension, 
            &portStatus
            );

        if (NT_SUCCESS(ntStatus)) {

            if (!(portStatus & USBD_PORT_CONNECTED) ) {

                USBCAMD_KdPrint (MIN_TRACE, ("***ERROR*** :USB Port Disconnected...\n"));
            }
        
            // Either an ISO or BULK transfer has gone bad, and we need
            // to reset the pipe associated with this channel
    
            USBCAMD_KdPrint(MIN_TRACE, ("USB Error on Stream # %d. Reset Pipe.. \n", StreamNumber));

    #ifdef MAX_DEBUG
            USBCAMD_DumpReadQueues(deviceExtension);
    #endif

            USBCAMD_ResetChannel(deviceExtension,
                                 channelExtension,
                                 portStatus,
                                 ntStatus);  

            // Indicate that the stream error condition is over (for now)
            channelExtension->StreamError = FALSE;
        }
        else {
            USBCAMD_KdPrint(MIN_TRACE, ("Fatal USB Error on Stream # %d... \n", StreamNumber));

            if ( channelExtension->ImageCaptureStarted) {
                //
                // stop this channel and cancel all IRPs, SRBs.
                //
                USBCAMD_KdPrint(MIN_TRACE,("S#%d stopping on error.\n", StreamNumber));
                USBCAMD_StopChannel(deviceExtension,channelExtension);
            }

            if ( channelExtension->ChannelPrepared) {
                //
                // Free memory and bandwidth
                //
                USBCAMD_KdPrint(MIN_TRACE,("S#%d unpreparing on error.\n", StreamNumber));
                USBCAMD_UnPrepareChannel(deviceExtension,channelExtension);
            }
        }
    }

    // OK to handle another reset now
    InterlockedDecrement(&deviceExtension->TimeoutCount[StreamNumber]);
    
    USBCAMD_ExFreePool(Context);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\wdm\capture\mini\usbcamd\usbcamd\usbcamd.c ===
/*++

Copyright (c) 1998  Microsoft Corporation

Module Name:

    usbcamd.c

Abstract:

    USB device driver for camera

Environment:

    kernel mode only

Notes:

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
  PURPOSE.

  Copyright (c) 1998 Microsoft Corporation.  All Rights Reserved.


Revision History:

    Original 3/96 John Dunn
    Updated  3/98 Husni Roukbi
    Updated  3/01 David Goll

--*/

#include "usbcamd.h"

BOOLEAN Win98 = FALSE;

#if DBG
// Global debug vars
ULONG USBCAMD_StreamEnable = 1;                 // Non-zero permits streaming
ULONG USBCAMD_DebugTraceLevel = NON_TRACE;      // Governs debug output
PUSBCAMD_LOG_ENTRY USBCAMD_LogBuffer = NULL;    // Address of memory log buffer (if used)
ULONG USBCAMD_LogRefCnt = 0;                    // The number of instances using the log buffer
ULONG USBCAMD_LogMask = 0;                      // Determines the type of log entries
LONG USBCAMD_MaxLogEntries = 0;                 // The number of 16-byte log entries to allow
LONG USBCAMD_LastLogEntry = -1;                 // The index into the log buffer (16-byte boundary)

NTSTATUS
USBCAMD_GetRegValue(
    IN HANDLE KeyHandle,
    IN PWSTR  ValueName,
    OUT PKEY_VALUE_FULL_INFORMATION *Information
    )

/*++

Routine Description:

    Copied from IopGetRegistryValue().
    This routine is invoked to retrieve the data for a registry key's value.
    This is done by querying the value of the key with a zero-length buffer
    to determine the size of the value, and then allocating a buffer and
    actually querying the value into the buffer.

    It is the responsibility of the caller to free the buffer.

Arguments:

    KeyHandle - Supplies the key handle whose value is to be queried

    ValueName - Supplies the null-terminated Unicode name of the value.

    Information - Returns a pointer to the allocated data buffer.

Return Value:

    The function value is the final status of the query operation.

--*/

{
    UNICODE_STRING unicodeString;
    NTSTATUS status;
    PKEY_VALUE_FULL_INFORMATION infoBuffer;
    ULONG keyValueLength;

    PAGED_CODE();

    RtlInitUnicodeString( &unicodeString, ValueName );

    //
    // Figure out how big the data value is so that a buffer of the
    // appropriate size can be allocated.
    //

    status = ZwQueryValueKey( KeyHandle,
                              &unicodeString,
                              KeyValueFullInformation,
                              (PVOID) NULL,
                              0,
                              &keyValueLength );
    if (status != STATUS_BUFFER_OVERFLOW &&
        status != STATUS_BUFFER_TOO_SMALL) {
        return status;
    }

    //
    // Allocate a buffer large enough to contain the entire key data value.
    //

    infoBuffer = ExAllocatePool( NonPagedPool, keyValueLength );
    if (!infoBuffer) {
        return STATUS_INSUFFICIENT_RESOURCES;
    }

    //
    // Query the data for the key value.
    //

    status = ZwQueryValueKey( KeyHandle,
                              &unicodeString,
                              KeyValueFullInformation,
                              infoBuffer,
                              keyValueLength,
                              &keyValueLength );
    if (!NT_SUCCESS( status )) {
        ExFreePool( infoBuffer );
        return status;
    }

    //
    // Everything worked, so simply return the address of the allocated
    // buffer to the caller, who is now responsible for freeing it.
    //

    *Information = infoBuffer;
    return STATUS_SUCCESS;
}

NTSTATUS
USBCAMD_GetRegDword(
    HANDLE h,
    PWCHAR ValueName,
    PULONG pDword)
{
    NTSTATUS Status;
    PKEY_VALUE_FULL_INFORMATION pFullInfo;

    Status = USBCAMD_GetRegValue( h, ValueName, &pFullInfo );
    if ( NT_SUCCESS( Status ) ) {
        *pDword = *(PULONG)((PUCHAR)pFullInfo+pFullInfo->DataOffset);
        ExFreePool( pFullInfo );
    }
    return Status;
}

NTSTATUS
USBCAMD_SetRegDword(
    IN HANDLE KeyHandle,
    IN PWCHAR ValueName,
    IN ULONG  ValueData
    )

/*++

Routine Description:

    Sets a value key in the registry to a specific value of string (REG_SZ) 
type.

Parameters:

    KeyHandle - A handle to the key under which the value is stored.

    ValueName - Supplies a pointer to the name of the value key

    ValueData - Supplies a pointer to the value to be stored in the key.  

Return Value:

    Status code that indicates whether or not the function was successful.

--*/

{
    NTSTATUS Status;
    UNICODE_STRING unicodeString;

    PAGED_CODE();

    ASSERT(ValueName);

    RtlInitUnicodeString( &unicodeString, ValueName );

    //
    // Set the registry value
    //
    Status = ZwSetValueKey(KeyHandle,
                    &unicodeString,
                    0,
                    REG_DWORD,
                    &ValueData,
                    sizeof(ValueData));
    
    return Status;
}


NTSTATUS
USBCAMD_CreateDbgReg(void)
{
    NTSTATUS Status;
    HANDLE   hDebugRegKey;
    OBJECT_ATTRIBUTES objectAttributes;
    UNICODE_STRING  PathName;
    ULONG ulDisposition;
    ULONG dword;
    static WCHAR strDebugTraceLevel[]=L"DebugTraceLevel";
    static WCHAR strMaxLogEntries[]=L"MaxLogEntries";
    static WCHAR strLogMask[]=L"LogMask";

    RtlInitUnicodeString(&PathName, USBCAMD_REG_DBG_STREAM);
    
    InitializeObjectAttributes(
        &objectAttributes,
        &PathName,
        OBJ_CASE_INSENSITIVE,
        NULL,
        NULL
        );
    
    Status = ZwCreateKey(
        &hDebugRegKey,
        KEY_ALL_ACCESS,
        &objectAttributes,
        0,                  // title index
        NULL,               // class
        0,                  // create options
        &ulDisposition
        );
    if (NT_SUCCESS(Status)) {
        //
        // getset USBCAMD_DebugTraceLevel
        //
        Status = USBCAMD_GetRegDword( hDebugRegKey, strDebugTraceLevel, &dword);
        if ( NT_SUCCESS( Status )) {
            USBCAMD_DebugTraceLevel = dword;
        }
        else if ( STATUS_OBJECT_NAME_NOT_FOUND == Status ) {
            //
            // create one with the default value
            //
            Status = USBCAMD_SetRegDword(hDebugRegKey, strDebugTraceLevel, NON_TRACE);
            ASSERT( NT_SUCCESS( Status ));

            USBCAMD_DebugTraceLevel = NON_TRACE;
        }

        //
        // getset LogMask
        //        
        Status = USBCAMD_GetRegDword( hDebugRegKey, strLogMask, &dword);
        if ( NT_SUCCESS( Status )) {
            USBCAMD_LogMask=dword;
        }
        else if ( STATUS_OBJECT_NAME_NOT_FOUND == Status ) {
            //
            // create one with the default
            //
            Status = USBCAMD_SetRegDword(hDebugRegKey, strLogMask, DEFAULT_LOG_LEVEL);
            ASSERT( NT_SUCCESS( Status ));

            USBCAMD_LogMask = DEFAULT_LOG_LEVEL;
        }        
        
        //
        // getset MaxLogEntries
        //
        Status = USBCAMD_GetRegDword( hDebugRegKey, strMaxLogEntries, &dword);
        if ( NT_SUCCESS( Status )) {
            USBCAMD_MaxLogEntries=(LONG)dword;
        }
        
        else if ( STATUS_OBJECT_NAME_NOT_FOUND == Status ) {
            //
            // create one with the default value
            //
            Status = USBCAMD_SetRegDword(hDebugRegKey, strMaxLogEntries, DEFAULT_MAX_LOG_ENTRIES);
            ASSERT( NT_SUCCESS( Status ));

            USBCAMD_MaxLogEntries = DEFAULT_MAX_LOG_ENTRIES;
        }

        ZwClose(hDebugRegKey);
    }

    return Status;
}

NTSTATUS
USBCAMD_InitDbg(void)
{
    NTSTATUS Status = STATUS_SUCCESS;

    if (InterlockedIncrement(&USBCAMD_LogRefCnt) == 1) {

        // First one here, so go ahead and initialize

        Status = USBCAMD_CreateDbgReg(); // read or create

        if (NT_SUCCESS(Status)) {

            if (USBCAMD_MaxLogEntries) {

                USBCAMD_LogBuffer = ExAllocatePool( NonPagedPool, USBCAMD_MaxLogEntries*sizeof(USBCAMD_LOG_ENTRY));            
                if (NULL == USBCAMD_LogBuffer ) {

                    USBCAMD_KdPrint(MIN_TRACE, ("Cannot allocate log buffer for %d entries\n", USBCAMD_MaxLogEntries));
                    USBCAMD_LogMask = 0; // disable logging

                    Status = STATUS_INSUFFICIENT_RESOURCES;
                }
                else {
                    USBCAMD_KdPrint(MIN_TRACE, ("Allocated log buffer for %d entries\n", USBCAMD_MaxLogEntries));
                }
            }
        }
    }
    return Status;
}

NTSTATUS
USBCAMD_ExitDbg(void)
{
    if (InterlockedDecrement(&USBCAMD_LogRefCnt) == 0) {

        // Last one out, free the buffer

        if (USBCAMD_LogBuffer) {

            USBCAMD_KdPrint(MIN_TRACE, ("Log buffer released\n"));

            ExFreePool(USBCAMD_LogBuffer);
            USBCAMD_LogBuffer = NULL;
        }
    }

    return STATUS_SUCCESS;
}

void
USBCAMD_DbgLogInternal(
    ULONG Tag,
    ULONG_PTR Arg1,
    ULONG_PTR Arg2,
    ULONG_PTR Arg3
    )
{
    PUSBCAMD_LOG_ENTRY LogEntry;
    LONG Index;

    // The following loop allows for rolling the index over when multiple threads are
    // competing for the privilege.
    while ( (Index = InterlockedIncrement(&USBCAMD_LastLogEntry)) >= USBCAMD_MaxLogEntries) {

        // Attempt to be the first to restart the counter. Even if another thread beat us
        // to it, the next iteration will dump us out of the loop with a valid index.
        InterlockedCompareExchange(&USBCAMD_LastLogEntry, -1L, USBCAMD_MaxLogEntries);
    }

    LogEntry = &USBCAMD_LogBuffer[Index];
    
    LogEntry->u.Tag = Tag;
    LogEntry->Arg1 = Arg1;
    LogEntry->Arg2 = Arg2;
    LogEntry->Arg3 = Arg3;

    return;
}

#define USBCAMD_DBG_TIMER_LIMIT 8
static LARGE_INTEGER StartTimes[USBCAMD_DBG_TIMER_LIMIT] = { 0 };
static int TimeIndex = 0;

NTSTATUS
USBCAMD_StartClock(void)
{
    NTSTATUS ntStatus = STATUS_SUCCESS;

    if (TimeIndex < USBCAMD_DBG_TIMER_LIMIT) {

        KeQuerySystemTime(&StartTimes[TimeIndex]);
        TimeIndex++;
    }
    else
        ntStatus = STATUS_UNSUCCESSFUL;

    return ntStatus;
}

ULONG
USBCAMD_StopClock(void)
{
    ULONG rc = 0;

    if (TimeIndex > 0) {

        LARGE_INTEGER StopTime;

        KeQuerySystemTime(&StopTime);
        TimeIndex--;

        StopTime.QuadPart -= StartTimes[TimeIndex].QuadPart;
        StopTime.QuadPart /= 10000; // convert to ms

        rc = (ULONG)StopTime.QuadPart;
    }

    return rc;
}

#endif // DBG

NTSTATUS
USBCAMD_QueryCapabilities(
    IN PUSBCAMD_DEVICE_EXTENSION pDeviceExt
    )

/*++

Routine Description:

    This routine generates an internal IRP from this driver to the PDO
    to obtain information on the Physical Device Object's capabilities.
    We are most interested in learning which system power states
    are to be mapped to which device power states for honoring 
IRP_MJ_SET_POWER Irps.

    This is a blocking call which waits for the IRP completion routine
    to set an event on finishing.

Arguments:


Return Value:

    NTSTATUS value from the IoCallDriver() call.

--*/

{
    PDEVICE_CAPABILITIES pDeviceCapabilities = &pDeviceExt->DeviceCapabilities;
    PIO_STACK_LOCATION nextStack;
    PIRP irp;
    NTSTATUS ntStatus;
    KEVENT event;

    // Build an IRP for us to generate an internal query request to the PDO
    irp = IoAllocateIrp(pDeviceExt->StackDeviceObject->StackSize, FALSE);

    if (!irp) 
        return STATUS_INSUFFICIENT_RESOURCES;
    
    nextStack = IoGetNextIrpStackLocation(irp);
    nextStack->MajorFunction= IRP_MJ_PNP;
    nextStack->MinorFunction= IRP_MN_QUERY_CAPABILITIES;

    // init an event to tell us when the completion routine's been called
    KeInitializeEvent(&event, NotificationEvent, FALSE);

    // Set a completion routine so it can signal our event when
    //  the next lower driver is done with the Irp
    IoSetCompletionRoutine(irp,USBCAMD_CallUsbdCompletion,&event,TRUE,TRUE,TRUE);   

    RtlZeroMemory(pDeviceCapabilities, sizeof(*pDeviceCapabilities));
    pDeviceCapabilities->Size = sizeof(*pDeviceCapabilities);
    pDeviceCapabilities->Version = 1;
    pDeviceCapabilities->Address = -1;
    pDeviceCapabilities->UINumber = -1;

    // set our pointer to the DEVICE_CAPABILITIES struct
    nextStack->Parameters.DeviceCapabilities.Capabilities = pDeviceCapabilities;

    irp->IoStatus.Status = STATUS_NOT_SUPPORTED;
    ntStatus = IoCallDriver(pDeviceExt->StackDeviceObject,irp);

    if (ntStatus == STATUS_PENDING) {       // wait for irp to complete
       KeWaitForSingleObject(&event,Suspended,KernelMode,FALSE,NULL);
       ntStatus = irp->IoStatus.Status;
    }

    IoFreeIrp(irp);
    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_StartDevice
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_StartDevice(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension
    )
/*++

Routine Description:

    Initializes a given instance of the camera device on the USB.

Arguments:

    deviceExtension - points to the driver specific DeviceExtension

    Irp - Irp associated with this request


Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus;
    PUSB_DEVICE_DESCRIPTOR deviceDescriptor = NULL;
    PURB urb;
    ULONG siz,i;

    USBCAMD_KdPrint (MIN_TRACE, ("enter USBCAMD_StartDevice\n"));

    KeInitializeSemaphore(&DeviceExtension->Semaphore, 1, 1);
    KeInitializeSemaphore(&DeviceExtension->CallUSBSemaphore, 1, 1);

    //
    // Fetch the device descriptor for the device
    //
    urb = USBCAMD_ExAllocatePool(NonPagedPool,
                         sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));

    if (urb) {

        siz = sizeof(USB_DEVICE_DESCRIPTOR);

        deviceDescriptor = USBCAMD_ExAllocatePool(NonPagedPool,
                                                  siz);

        if (deviceDescriptor) {

            UsbBuildGetDescriptorRequest(urb,
                                         (USHORT) sizeof (struct _URB_CONTROL_DESCRIPTOR_REQUEST),
                                         USB_DEVICE_DESCRIPTOR_TYPE,
                                         0,
                                         0,
                                         deviceDescriptor,
                                         NULL,
                                         siz,
                                         NULL);

            ntStatus = USBCAMD_CallUSBD(DeviceExtension, urb,0,NULL);

            if (NT_SUCCESS(ntStatus)) {
                USBCAMD_KdPrint (MAX_TRACE, ("'Device Descriptor = %x, len %x\n",
                                deviceDescriptor,
                                urb->UrbControlDescriptorRequest.TransferBufferLength));

                USBCAMD_KdPrint (MAX_TRACE, ("'USBCAMD Device Descriptor:\n"));
                USBCAMD_KdPrint (MAX_TRACE, ("'-------------------------\n"));
                USBCAMD_KdPrint (MAX_TRACE, ("'bLength %d\n", deviceDescriptor->bLength));
                USBCAMD_KdPrint (MAX_TRACE, ("'bDescriptorType 0x%x\n", deviceDescriptor->bDescriptorType));
                USBCAMD_KdPrint (MAX_TRACE, ("'bcdUSB 0x%x\n", deviceDescriptor->bcdUSB));
                USBCAMD_KdPrint (MAX_TRACE, ("'bDeviceClass 0x%x\n", deviceDescriptor->bDeviceClass));
                USBCAMD_KdPrint (MAX_TRACE, ("'bDeviceSubClass 0x%x\n", deviceDescriptor->bDeviceSubClass));
                USBCAMD_KdPrint (MAX_TRACE, ("'bDeviceProtocol 0x%x\n", deviceDescriptor->bDeviceProtocol));
                USBCAMD_KdPrint (MAX_TRACE, ("'bMaxPacketSize0 0x%x\n", deviceDescriptor->bMaxPacketSize0));
                USBCAMD_KdPrint (MAX_TRACE, ("'idVendor 0x%x\n", deviceDescriptor->idVendor));
                USBCAMD_KdPrint (MAX_TRACE, ("'idProduct 0x%x\n", deviceDescriptor->idProduct));
                USBCAMD_KdPrint (MAX_TRACE, ("'bcdDevice 0x%x\n", deviceDescriptor->bcdDevice));
                USBCAMD_KdPrint (MIN_TRACE, ("'iManufacturer 0x%x\n", deviceDescriptor->iManufacturer));
                USBCAMD_KdPrint (MAX_TRACE, ("'iProduct 0x%x\n", deviceDescriptor->iProduct));
                USBCAMD_KdPrint (MAX_TRACE, ("'iSerialNumber 0x%x\n", deviceDescriptor->iSerialNumber));
                USBCAMD_KdPrint (MAX_TRACE, ("'bNumConfigurations 0x%x\n", deviceDescriptor->bNumConfigurations));
            }
        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        }

        if (NT_SUCCESS(ntStatus)) {
            DeviceExtension->DeviceDescriptor = deviceDescriptor;
        } else if (deviceDescriptor) {
            USBCAMD_ExFreePool(deviceDescriptor);
        }

        USBCAMD_ExFreePool(urb);

    } else {
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;
    }

    //
    // Now configure the device.
    //

    if (NT_SUCCESS(ntStatus)) {
        ntStatus = USBCAMD_ConfigureDevice(DeviceExtension);
    }

    if (NT_SUCCESS(ntStatus)) {
        //
        // initialize our f ref count and semaphores
        //
        for ( i=0; i< MAX_STREAM_COUNT; i++) {
            DeviceExtension->ActualInstances[i] = 0;
        }


        for (i=0; i < MAX_STREAM_COUNT; i++) {
            DeviceExtension->TimeoutCount[i] = -1;
        }
    }

    if (ntStatus != STATUS_SUCCESS){
    //
    // since this failure will return all the way in the IRP_MN_SATRT_DEVICE.
    // the driver will unload w/o sending IRP_MN_REMOVE_DEVICE where we typically
    // do the clean up of our allocated memory. Hence, we need to do it now.
    //
        if (DeviceExtension->DeviceDescriptor) {
            USBCAMD_ExFreePool(DeviceExtension->DeviceDescriptor);
            DeviceExtension->DeviceDescriptor = NULL;
        }
        if (DeviceExtension->Interface) {
            USBCAMD_ExFreePool(DeviceExtension->Interface);
            DeviceExtension->Interface = NULL;
        }
        if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
            if (DeviceExtension->PipePinRelations) {
                USBCAMD_ExFreePool(DeviceExtension->PipePinRelations);
                DeviceExtension->PipePinRelations = NULL;
            }
        }
        //
        // call client driver in order to do some clean up as well
        //
        if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
                     (*DeviceExtension->DeviceDataEx.DeviceData2.CamConfigureEx)(
                                DeviceExtension->StackDeviceObject,
                                USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                                NULL,
                                NULL,
                                0,
                                NULL,
                                NULL);

        }
        else {
                (*DeviceExtension->DeviceDataEx.DeviceData.CamConfigure)(
                     DeviceExtension->StackDeviceObject,
                     USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                     NULL,
                     NULL,
                     NULL,
                     NULL);
        }
    }

    USBCAMD_KdPrint (MIN_TRACE, ("exit USBCAMD_StartDevice (%x)\n", ntStatus));
    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_RemoveDevice
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_RemoveDevice(
    IN PUSBCAMD_DEVICE_EXTENSION  DeviceExtension
    )
/*++

Routine Description:

    Removes a given instance of the USB camera.

    NOTE: When we get a remove we can asume the device is gone.

Arguments:

    deviceExtension - points to the driver specific DeviceExtension

    Irp - Irp associated with this request

Return Value:

    NT status code

--*/
{
    USBCAMD_KdPrint (MIN_TRACE, ("enter USBCAMD_RemoveDevice\n"));

    if (DeviceExtension->DeviceDescriptor) {

        ASSERT((DeviceExtension->ActualInstances[STREAM_Capture] == 0) &&
            (DeviceExtension->ActualInstances[STREAM_Still] == 0));

        (*DeviceExtension->DeviceDataEx.DeviceData.CamUnInitialize)(
            DeviceExtension->StackDeviceObject,
            USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension)
            );

        if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
            //
            // make sure that camera driver has cancelled a bulk or Interrupt
            // transfer request.
            //

            USBCAMD_CancelOutstandingBulkIntIrps(DeviceExtension,FALSE);

            //
            // and any pipeconif structures.
            //

            if (DeviceExtension->PipePinRelations) {

                USBCAMD_ExFreePool(DeviceExtension->PipePinRelations);
                DeviceExtension->PipePinRelations = NULL;
            }
        }
    
        //
        // Free up any interface structures
        //

        if (DeviceExtension->Interface) {

            USBCAMD_ExFreePool(DeviceExtension->Interface);
            DeviceExtension->Interface = NULL;
        }

        USBCAMD_ExFreePool(DeviceExtension->DeviceDescriptor);
        DeviceExtension->DeviceDescriptor = NULL;
    }

    USBCAMD_KdPrint (MIN_TRACE, ("exit USBCAMD_RemoveDevice\n"));

    return STATUS_SUCCESS;
}

//******************************************************************************
//
// USBCAMD_CallUsbdCompletion()
//
// Completion routine used by USBCAMD_CallUsbd() 
//
//******************************************************************************

NTSTATUS
USBCAMD_CallUsbdCompletion (
    IN PDEVICE_OBJECT   DeviceObject,
    IN PIRP             Irp,
    IN PVOID            Context
    )
{
    PKEVENT kevent = (PKEVENT)Context;
    KeSetEvent(kevent, IO_NO_INCREMENT,FALSE);
    return STATUS_MORE_PROCESSING_REQUIRED;
}

//---------------------------------------------------------------------------
// USBCAMD_CallUSBD
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_CallUSBD(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PURB Urb,
    IN ULONG IoControlCode,
    IN PVOID pArgument1
)
/*++

Routine Description:

    Passes a URB to the USBD class driver

Arguments:

    DeviceExtension - pointer to the device extension for this instance of an USB camera

    Urb - pointer to Urb request block
    IoControlCode - If null, will default to IOCTL_INTERNAL_USB_SUBMIT_URB

    pArgument1 - if null, will default to Urb
Return Value:

    STATUS_SUCCESS if successful,
    STATUS_UNSUCCESSFUL otherwise

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PIRP irp;
    KEVENT TimeoutEvent;
    PIO_STACK_LOCATION nextStack;

    USBCAMD_DbgLog(TL_PRF_TRACE, '+bsU', 0, USBCAMD_StartClock(), ntStatus);
    KeWaitForSingleObject(&DeviceExtension->CallUSBSemaphore,Executive,KernelMode,FALSE,NULL);

    // Initialize the event we'll wait on
    //
    KeInitializeEvent(&TimeoutEvent,SynchronizationEvent,FALSE);

    // Allocate the Irp
    //
    irp = IoAllocateIrp(DeviceExtension->StackDeviceObject->StackSize, FALSE);

    if (irp == NULL){
        ntStatus =  STATUS_INSUFFICIENT_RESOURCES;
        goto Exit_CallUSB;
    }
    //
    // Set the Irp parameters
    //
    nextStack = IoGetNextIrpStackLocation(irp);
    ASSERT(nextStack != NULL);
    nextStack->MajorFunction = IRP_MJ_INTERNAL_DEVICE_CONTROL;
    nextStack->Parameters.DeviceIoControl.IoControlCode =  IoControlCode ? IoControlCode: IOCTL_INTERNAL_USB_SUBMIT_URB;
    nextStack->Parameters.Others.Argument1 = pArgument1? pArgument1: Urb;
    //
    // Set the completion routine.
    //
    IoSetCompletionRoutine(irp,USBCAMD_CallUsbdCompletion,&TimeoutEvent, TRUE, TRUE,TRUE);   
    //
    // pass the irp down usb stack
    //
    if (DeviceExtension->Initialized ) {
        irp->IoStatus.Status = STATUS_NOT_SUPPORTED;
        ntStatus = IoCallDriver(DeviceExtension->StackDeviceObject,irp);
    } else {
        ntStatus = STATUS_DEVICE_NOT_CONNECTED;
    }

    if (ntStatus == STATUS_PENDING) {
        // Irp is pending. we have to wait till completion..
        LARGE_INTEGER timeout;

        // Specify a timeout of 5 seconds to wait for this call to complete.
        //
        timeout.QuadPart = -5 * SECONDS;

        ntStatus = KeWaitForSingleObject(&TimeoutEvent, Executive,KernelMode,FALSE, &timeout);
        if (ntStatus == STATUS_TIMEOUT) {
            ntStatus = STATUS_IO_TIMEOUT;

            // Cancel the Irp we just sent.
            //
            IoCancelIrp(irp);

            // And wait until the cancel completes
            //
            KeWaitForSingleObject(&TimeoutEvent,Executive, KernelMode, FALSE,NULL);
        }
        else {
            ntStatus = irp->IoStatus.Status;
        }
    }
#if DBG
    else {

        USBCAMD_KdPrint (MAX_TRACE, ("return from IoCallDriver USBD %x\n", ntStatus));
    }
#endif

    // Done with the Irp, now free it.
    //
    IoFreeIrp(irp);

Exit_CallUSB:

    USBCAMD_DbgLog(TL_PRF_TRACE, '-bsU', 0, USBCAMD_StopClock(), ntStatus);
    KeReleaseSemaphore(&DeviceExtension->CallUSBSemaphore,LOW_REALTIME_PRIORITY,1,FALSE);

    if (NT_ERROR(ntStatus)) {
        USBCAMD_KdPrint(MIN_TRACE, ("***Error*** USBCAMD_CallUSBD (%x)\n", ntStatus));
    }

    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_ConfigureDevice
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_ConfigureDevice(
    IN  PUSBCAMD_DEVICE_EXTENSION DeviceExtension
    )
/*++

Routine Description:

    Configure the USB camera.

Arguments:

    DeviceExtension - pointer to the device object for this instance of the USB camera
                    devcice.


Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PURB urb;
    ULONG siz;
    PUSB_CONFIGURATION_DESCRIPTOR configurationDescriptor = NULL;

    USBCAMD_KdPrint (MIN_TRACE, ("enter USBCAMD_ConfigureDevice\n"));

    //
    // configure the device
    //

    urb = USBCAMD_ExAllocatePool(NonPagedPool,
                         sizeof(struct _URB_CONTROL_DESCRIPTOR_REQUEST));

    if (urb) {

        siz = 0x40;

get_config_descriptor_retry:

        configurationDescriptor = USBCAMD_ExAllocatePool(NonPagedPool,
                                                 siz);

        if (configurationDescriptor) {

            UsbBuildGetDescriptorRequest(urb,
                                         (USHORT) sizeof (struct _URB_CONTROL_DESCRIPTOR_REQUEST),
                                         USB_CONFIGURATION_DESCRIPTOR_TYPE,
                                         0,
                                         0,
                                         configurationDescriptor,
                                         NULL,
                                         siz,
                                         NULL);

            ntStatus = USBCAMD_CallUSBD(DeviceExtension, urb,0,NULL);

            USBCAMD_KdPrint (MAX_TRACE, ("'Configuration Descriptor = %x, len %x\n",
                            configurationDescriptor,
                            urb->UrbControlDescriptorRequest.TransferBufferLength));
        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        }

        //
        // if we got some data see if it was enough.
        //
        // NOTE: we may get an error in URB because of buffer overrun
        //
        if (urb->UrbControlDescriptorRequest.TransferBufferLength>0 &&
                configurationDescriptor->wTotalLength > siz) {

            siz = configurationDescriptor->wTotalLength;
            USBCAMD_ExFreePool(configurationDescriptor);
            configurationDescriptor = NULL;
            goto get_config_descriptor_retry;
        }

        USBCAMD_ExFreePool(urb);

    } else {
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;
    }

    if (configurationDescriptor) {

        //
        // Get our pipes
        //
        if (NT_SUCCESS(ntStatus)) {
            ntStatus = USBCAMD_SelectConfiguration(DeviceExtension, configurationDescriptor);

            if (NT_SUCCESS(ntStatus)) {
                ntStatus = (*DeviceExtension->DeviceDataEx.DeviceData.CamInitialize)(
                      DeviceExtension->StackDeviceObject,
                      USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));
            }
        }

        USBCAMD_ExFreePool(configurationDescriptor);
    }

    USBCAMD_KdPrint (MIN_TRACE, ("'exit USBCAMD_ConfigureDevice (%x)\n", ntStatus));

//    TRAP_ERROR(ntStatus);

    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_SelectConfiguration
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_SelectConfiguration(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor
    )
/*++

Routine Description:

    Initializes the USBCAMD camera to configuration one, interface zero

Arguments:

    DeviceExtension - pointer to the device extension for this instance of the USB camera
                    devcice.

    ConfigurationDescriptor - pointer to the USB configuration
                    descriptor containing the interface and endpoint
                    descriptors.

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus;
    PURB urb = NULL;
    ULONG numberOfInterfaces, numberOfPipes,i;
    PUSB_INTERFACE_DESCRIPTOR interfaceDescriptor;
    PUSBD_INTERFACE_INFORMATION interface;
    PUSBD_INTERFACE_LIST_ENTRY interfaceList, tmp;
    PUSBCAMD_Pipe_Config_Descriptor PipeConfig = NULL;

    USBCAMD_KdPrint (MIN_TRACE, ("'enter USBCAMD_SelectConfiguration\n"));

    //
    // get this from the config descriptor
    //
    numberOfInterfaces = ConfigurationDescriptor->bNumInterfaces;

    // We only support cameras with one interface
  //  ASSERT(numberOfInterfaces == 1);


    tmp = interfaceList =
        USBCAMD_ExAllocatePool(PagedPool, sizeof(USBD_INTERFACE_LIST_ENTRY) *
                       (numberOfInterfaces+1));


    if (tmp) {
        
        for ( i = 0; i < numberOfInterfaces; i++ ) {

            interfaceDescriptor =
                USBD_ParseConfigurationDescriptorEx(
                    ConfigurationDescriptor,
                    ConfigurationDescriptor,
                    i,    // interface number
                    -1, //alt setting, don't care
                    -1, // hub class
                    -1, // subclass, don't care
                    -1); // protocol, don't care

            interfaceList->InterfaceDescriptor =
                interfaceDescriptor;
            interfaceList++;

        }
        interfaceList->InterfaceDescriptor = NULL;

        //
        // Allocate a URB big enough for this request
        //

        urb = USBD_CreateConfigurationRequestEx(ConfigurationDescriptor, tmp);

        if (urb) {

            if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
                numberOfPipes = tmp->Interface->NumberOfPipes;
                PipeConfig = USBCAMD_ExAllocatePool(PagedPool,
                                    sizeof(USBCAMD_Pipe_Config_Descriptor) * numberOfPipes);
                if (PipeConfig ) {

                    ntStatus =
                        (*DeviceExtension->DeviceDataEx.DeviceData2.CamConfigureEx)(
                                DeviceExtension->StackDeviceObject,
                                USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                                tmp->Interface,
                                ConfigurationDescriptor,
                                numberOfPipes,
                                PipeConfig,
                                DeviceExtension->DeviceDescriptor);

                }
                else {
                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                }
            }
            else {
                ntStatus =
                    (*DeviceExtension->DeviceDataEx.DeviceData.CamConfigure)(
                            DeviceExtension->StackDeviceObject,
                            USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                            tmp->Interface,
                            ConfigurationDescriptor,
                            &DeviceExtension->DataPipe,
                            &DeviceExtension->SyncPipe);
                //
                // initialize the new parameters to default values in order to
                // insure backward compatibilty.
                //

                DeviceExtension->IsoPipeStreamType = STREAM_Capture;
                DeviceExtension->BulkPipeStreamType = -1;
                DeviceExtension->BulkDataPipe = -1;
                DeviceExtension->VirtualStillPin = FALSE;
            }
        } else {
            ntStatus = STATUS_INSUFFICIENT_RESOURCES;
        }
        USBCAMD_ExFreePool(tmp);

    }
    else {
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;
    }

    if (NT_SUCCESS(ntStatus)) {

        interface = &urb->UrbSelectConfiguration.Interface;

        USBCAMD_KdPrint (MAX_TRACE, ("'size of interface request = %d\n", interface->Length));

        ntStatus = USBCAMD_CallUSBD(DeviceExtension, urb,0,NULL);

        if (NT_SUCCESS(ntStatus) && USBD_SUCCESS(URB_STATUS(urb))) {

            if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

                DeviceExtension->PipePinRelations = USBCAMD_ExAllocatePool(NonPagedPool,
                        sizeof(USBCAMD_PIPE_PIN_RELATIONS) * numberOfPipes);
                if ( DeviceExtension->PipePinRelations) {
                    for (i=0; i < numberOfPipes; i++) {
                        DeviceExtension->PipePinRelations[i].PipeType =
                            interface->Pipes[i].PipeType & USB_ENDPOINT_TYPE_MASK;
                        DeviceExtension->PipePinRelations[i].PipeDirection =
                            (interface->Pipes[i].EndpointAddress & USB_ENDPOINT_DIRECTION_MASK) ? INPUT_PIPE : OUTPUT_PIPE;
                        DeviceExtension->PipePinRelations[i].MaxPacketSize =
                            interface->Pipes[i].MaximumPacketSize;
                        DeviceExtension->PipePinRelations[i].PipeConfig = PipeConfig[i];
                        InitializeListHead(&DeviceExtension->PipePinRelations[i].IrpPendingQueue);
                        InitializeListHead(&DeviceExtension->PipePinRelations[i].IrpRestoreQueue);
                        KeInitializeSpinLock (&DeviceExtension->PipePinRelations[i].OutstandingIrpSpinlock);
                    }
                    ntStatus = USBCAMD_Parse_PipeConfig(DeviceExtension,numberOfPipes);
                }
                else {
                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                }
            }

            //
            // Save the configuration handle for this device
            //

            DeviceExtension->ConfigurationHandle =
                urb->UrbSelectConfiguration.ConfigurationHandle;


            DeviceExtension->Interface = USBCAMD_ExAllocatePool(NonPagedPool,
                                                        interface->Length);

            if (DeviceExtension->Interface) {
                ULONG j;

                //
                // save a copy of the interface information returned
                //
                RtlCopyMemory(DeviceExtension->Interface, interface, interface->Length);

                //
                // Dump the interface to the debugger
                //
                USBCAMD_KdPrint (MAX_TRACE, ("'---------\n"));
                USBCAMD_KdPrint (MAX_TRACE, ("'NumberOfPipes 0x%x\n", DeviceExtension->Interface->NumberOfPipes));
                USBCAMD_KdPrint (MAX_TRACE, ("'Length 0x%x\n", DeviceExtension->Interface->Length));
                USBCAMD_KdPrint (MAX_TRACE, ("'Alt Setting 0x%x\n", DeviceExtension->Interface->AlternateSetting));
                USBCAMD_KdPrint (MAX_TRACE, ("'Interface Number 0x%x\n", DeviceExtension->Interface->InterfaceNumber));

                // Dump the pipe info

                for (j=0; j<interface->NumberOfPipes; j++) {
                    PUSBD_PIPE_INFORMATION pipeInformation;

                    pipeInformation = &DeviceExtension->Interface->Pipes[j];

                    USBCAMD_KdPrint (MAX_TRACE, ("'---------\n"));
                    USBCAMD_KdPrint (MAX_TRACE, ("'PipeType 0x%x\n", pipeInformation->PipeType));
                    USBCAMD_KdPrint (MAX_TRACE, ("'EndpointAddress 0x%x\n", pipeInformation->EndpointAddress));
                    USBCAMD_KdPrint (MAX_TRACE, ("'MaxPacketSize 0x%x\n", pipeInformation->MaximumPacketSize));
                    USBCAMD_KdPrint (MAX_TRACE, ("'Interval 0x%x\n", pipeInformation->Interval));
                    USBCAMD_KdPrint (MAX_TRACE, ("'Handle 0x%x\n", pipeInformation->PipeHandle));
                }

                USBCAMD_KdPrint (MAX_TRACE, ("'---------\n"));

            }
            else {
                ntStatus = STATUS_INSUFFICIENT_RESOURCES;
            }
        }
    }

    if (urb)
    {
        ExFreePool(urb);
        urb = NULL;
    }

    USBCAMD_KdPrint (MIN_TRACE, ("'exit USBCAMD_SelectConfiguration (%x)\n", ntStatus));

    if ( DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
        if (PipeConfig) 
            USBCAMD_ExFreePool(PipeConfig);
    }

    return ntStatus;
}

/*++

Routine Description:


Arguments:

    DeviceExtension - pointer to the device extension for this instance of the USB camera
                    devcice.


Return Value:

    NT status code

--*/

NTSTATUS
USBCAMD_Parse_PipeConfig(
     IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
     IN ULONG NumberOfPipes
     )
{
    int i;
    ULONG PinCount;
    NTSTATUS ntStatus= STATUS_SUCCESS;

    PUSBCAMD_PIPE_PIN_RELATIONS PipePinArray;

    PipePinArray = DeviceExtension->PipePinRelations;

    DeviceExtension->VirtualStillPin = FALSE;
    DeviceExtension->DataPipe = -1;
    DeviceExtension->SyncPipe = -1;
    DeviceExtension->BulkDataPipe = -1;
    DeviceExtension->IsoPipeStreamType = -1;
    DeviceExtension->BulkPipeStreamType = -1;
    PinCount = 0;

    ASSERT (PipePinArray);

    for ( i=0; i < (int)NumberOfPipes; i++) {

        if (PipePinArray[i].PipeConfig.PipeConfigFlags & USBCAMD_DONT_CARE_PIPE) {
            continue; // this pipe has no use for us.
        }
        switch ( PipePinArray[i].PipeConfig.PipeConfigFlags) {

        case USBCAMD_MULTIPLEX_PIPE:

            if ((PipePinArray[i].PipeConfig.StreamAssociation & USBCAMD_VIDEO_STILL_STREAM) &&
                (PipePinArray[i].PipeDirection & INPUT_PIPE  ) ) {
                    // we found an input data pipe (iso or bulk) that is used for both
                    // video & still.
                    if ( PipePinArray[i].PipeType & UsbdPipeTypeIsochronous) {
                        // we found an input iso pipe that is used for video data.
                        DeviceExtension->DataPipe = i;
                        DeviceExtension->IsoPipeStreamType = STREAM_Capture;
                    }
                    else if (PipePinArray[i].PipeType & UsbdPipeTypeBulk) {
                        // we found an input bulk pipe that is used for video data.
                        DeviceExtension->BulkDataPipe = i;
                        DeviceExtension->BulkPipeStreamType = STREAM_Capture;
                    }
                    DeviceExtension->VirtualStillPin = TRUE;
                    PinCount += 2;
            }
            break;

        case USBCAMD_SYNC_PIPE:

            if ((PipePinArray[i].PipeType & UsbdPipeTypeIsochronous) &&
                (PipePinArray[i].PipeDirection & INPUT_PIPE  ) ) {
                    // we found an input iso pipe that is used for out of band signalling.
                    DeviceExtension->SyncPipe = i;
            }
            break;

        case USBCAMD_DATA_PIPE:

            if ((PipePinArray[i].PipeConfig.StreamAssociation != USBCAMD_VIDEO_STILL_STREAM )&&
                (PipePinArray[i].PipeDirection & INPUT_PIPE  ) ) {
                // we found an input iso or bulk pipe that is used exclusively per video or still
                // stream.
                if ( PipePinArray[i].PipeType & UsbdPipeTypeIsochronous) {
                    // we found an input iso pipe that is used for video or still.
                    DeviceExtension->DataPipe = i;
                    DeviceExtension->IsoPipeStreamType =
                        (PipePinArray[i].PipeConfig.StreamAssociation & USBCAMD_VIDEO_STREAM ) ?
                            STREAM_Capture: STREAM_Still;
                }
                else if (PipePinArray[i].PipeType & UsbdPipeTypeBulk) {
                    // we found an input bulk pipe that is used for video or still data.
                    DeviceExtension->BulkDataPipe = i;
                    DeviceExtension->BulkPipeStreamType =
                        PipePinArray[i].PipeConfig.StreamAssociation & USBCAMD_VIDEO_STREAM  ?
                            STREAM_Capture: STREAM_Still;
                }
                PinCount++;
            }
            break;

        default:
            break;
        }
    }

    // override the default pin count of one with the actual pin count.
    if ( PinCount != 0 ) {
        DeviceExtension->StreamCount = PinCount;
    }

    //
    // Dump the result to the debugger
    //
    USBCAMD_KdPrint (MIN_TRACE, ("NumberOfPins %d\n", PinCount));
    USBCAMD_KdPrint (MIN_TRACE, ("IsoPipeIndex %d\n", DeviceExtension->DataPipe));
    USBCAMD_KdPrint (MIN_TRACE, ("IsoPipeStreamtype %d\n", DeviceExtension->IsoPipeStreamType));
    USBCAMD_KdPrint (MIN_TRACE, ("Sync Pipe Index %d\n", DeviceExtension->SyncPipe));
    USBCAMD_KdPrint (MIN_TRACE, ("Bulk Pipe Index %d\n", DeviceExtension->BulkDataPipe));
    USBCAMD_KdPrint (MIN_TRACE, ("BulkPipeStreamType %d\n", DeviceExtension->BulkPipeStreamType));

    // do some error checing in here.
    // if both data pipe and bulk data pipes are not set, then return error.
    if (((DeviceExtension->DataPipe == -1) && (DeviceExtension->BulkDataPipe == -1)) ||
         (PinCount > MAX_STREAM_COUNT)){
        // cam driver provided mismatched data.
        ntStatus = STATUS_INVALID_PARAMETER;
    }
    return ntStatus;
}

//---------------------------------------------------------------------------
// USBCAMD_SelectAlternateInterface
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_SelectAlternateInterface(
    IN PVOID DeviceContext,
    IN PUSBD_INTERFACE_INFORMATION RequestInterface
    )
/*++

Routine Description:

    Select one of the cameras alternate interfaces

Arguments:

    DeviceExtension - pointer to the device extension for this instance of the USB camera
                    devcice.

    ChannelExtension - extension specific to this video channel

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus;
    PURB urb;
    ULONG siz;
    PUSBD_INTERFACE_INFORMATION interface;
    PUSBCAMD_DEVICE_EXTENSION deviceExtension;

    USBCAMD_KdPrint (MIN_TRACE, ("'enter USBCAMD_SelectAlternateInterface\n"));

    USBCAMD_DbgLog(TL_PRF_TRACE, '+IAS', 0, USBCAMD_StartClock(), 0);
    deviceExtension = USBCAMD_GET_DEVICE_EXTENSION(DeviceContext);

    if (deviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

        //
        // before we process this request, we need to cancel all outstanding
        // IRPs for this interface on all pipes (bulk, interupt)
        //
        ntStatus = USBCAMD_CancelOutstandingBulkIntIrps(deviceExtension,TRUE);

        if (!NT_SUCCESS(ntStatus)) {
            USBCAMD_KdPrint (MIN_TRACE, ("Failed to Cancel outstanding (Bulk/Int.)IRPs.\n"));
            ntStatus = STATUS_DEVICE_DATA_ERROR;
            return ntStatus;
        }
    }

    //
    // Dump the current interface
    //

    ASSERT(deviceExtension->Interface != NULL);


    siz = GET_SELECT_INTERFACE_REQUEST_SIZE(deviceExtension->Interface->NumberOfPipes);

    USBCAMD_KdPrint (MAX_TRACE, ("size of interface request Urb = %d\n", siz));

    urb = USBCAMD_ExAllocatePool(NonPagedPool, siz);

    if (urb) {

        interface = &urb->UrbSelectInterface.Interface;

        RtlCopyMemory(interface,
                      RequestInterface,
                      RequestInterface->Length);

        // set up the request for the first and only interface

        USBCAMD_KdPrint (MAX_TRACE, ("'size of interface request = %d\n", interface->Length));

        urb->UrbHeader.Function = URB_FUNCTION_SELECT_INTERFACE;
        urb->UrbHeader.Length = (int)siz;
        urb->UrbSelectInterface.ConfigurationHandle =
            deviceExtension->ConfigurationHandle;

        ntStatus = USBCAMD_CallUSBD(deviceExtension, urb,0,NULL);


        if (NT_SUCCESS(ntStatus) && USBD_SUCCESS(URB_STATUS(urb))) {

            ULONG j;

            //
            // save a copy of the interface information returned
            //
            RtlCopyMemory(deviceExtension->Interface, interface, interface->Length);
            RtlCopyMemory(RequestInterface, interface, interface->Length);

            //
            // Dump the interface to the debugger
            //
            USBCAMD_KdPrint (MAX_TRACE, ("'---------\n"));
            USBCAMD_KdPrint (MAX_TRACE, ("'NumberOfPipes 0x%x\n", deviceExtension->Interface->NumberOfPipes));
            USBCAMD_KdPrint (MAX_TRACE, ("'Length 0x%x\n", deviceExtension->Interface->Length));
            USBCAMD_KdPrint (MIN_TRACE, ("'Alt Setting 0x%x\n", deviceExtension->Interface->AlternateSetting));
            USBCAMD_KdPrint (MAX_TRACE, ("'Interface Number 0x%x\n", deviceExtension->Interface->InterfaceNumber));

            // Dump the pipe info

            for (j=0; j<interface->NumberOfPipes; j++) {
                PUSBD_PIPE_INFORMATION pipeInformation;

                pipeInformation = &deviceExtension->Interface->Pipes[j];

                USBCAMD_KdPrint (MAX_TRACE, ("'---------\n"));
                USBCAMD_KdPrint (MAX_TRACE, ("'PipeType 0x%x\n", pipeInformation->PipeType));
                USBCAMD_KdPrint (MAX_TRACE, ("'EndpointAddress 0x%x\n", pipeInformation->EndpointAddress));
                USBCAMD_KdPrint (MAX_TRACE, ("'MaxPacketSize 0x%x\n", pipeInformation->MaximumPacketSize));
                USBCAMD_KdPrint (MAX_TRACE, ("'Interval 0x%x\n", pipeInformation->Interval));
                USBCAMD_KdPrint (MAX_TRACE, ("'Handle 0x%x\n", pipeInformation->PipeHandle));
            }

            //
            // success update our internal state to
            // indicate the new frame rate
            //

            USBCAMD_KdPrint (MAX_TRACE, ("'Selecting Camera Interface\n"));
        }

        USBCAMD_ExFreePool(urb);

    } else {
        ntStatus = STATUS_INSUFFICIENT_RESOURCES;
    }

    if (deviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

        // restore the cancelled Interrupt or bulk IRPs if any.
        USBCAMD_RestoreOutstandingBulkIntIrps(deviceExtension);
    }

    USBCAMD_KdPrint (MIN_TRACE, ("'exit USBCAMD_SelectAlternateInterface (%x)\n", ntStatus));

//    TRAP_ERROR(ntStatus);
    USBCAMD_DbgLog(TL_PRF_TRACE, '-IAS', 0, USBCAMD_StopClock(), ntStatus);

    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_OpenChannel
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_OpenChannel(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension,
    IN PVOID Format
    )
/*++

Routine Description:

    Opens a video or still stream on the device.

Arguments:

    DeviceExtension - points to the driver specific DeviceExtension
    ChannelExtension - context data for this channel.
    Format - pointer to format information associated with this
            channel.

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    ULONG i,StreamNumber;

    USBCAMD_SERIALIZE(DeviceExtension);

    USBCAMD_KdPrint( MIN_TRACE, ("'enter USBCAMD_OpenChannel %x\n", Format));

    //
    // Initialize structures for this channel
    //
    ChannelExtension->Sig = USBCAMD_CHANNEL_SIG;
    ChannelExtension->DeviceExtension = DeviceExtension;
    ChannelExtension->CurrentFormat = Format;
    ChannelExtension->RawFrameLength = 0;
    ChannelExtension->CurrentFrameIsStill = FALSE;
    ChannelExtension->IdleIsoStream = FALSE;


#if DBG
    // verify our serialization is working
    ChannelExtension->InCam = 0;
    ChannelExtension->InCam++;
    ASSERT(ChannelExtension->InCam == 1);
#endif

    StreamNumber = ChannelExtension->StreamNumber;

    if (DeviceExtension->ActualInstances[StreamNumber] > 0) {
        // channel already open
        ntStatus = STATUS_DEVICE_DATA_ERROR;
        goto USBCAMD_OpenChannel_Done;
    }


    //
    // empty read list
    //
    InitializeListHead(&ChannelExtension->PendingIoList);

    //
    // no current Irp
    //
    ChannelExtension->CurrentRequest = NULL;

    //
    // streaming is off
    //
    ChannelExtension->ImageCaptureStarted = FALSE;

    //
    // Channel not prepared
    //
    ChannelExtension->ChannelPrepared = FALSE;

    //
    // No error condition
    //
    ChannelExtension->StreamError = FALSE;

    //
    // no stop requests are pending
    //
    ChannelExtension->Flags = 0;

    //
    // initialize the io list spin lock
    //

    KeInitializeSpinLock(&ChannelExtension->PendingIoListSpin);

    //
    // and current request spin lock.
    //
    KeInitializeSpinLock(&ChannelExtension->CurrentRequestSpinLock);

    //
    // and current transfer spin lock.
    //
    KeInitializeSpinLock(&ChannelExtension->TransferSpinLock);

    //
    // initialize the idle transfer lock
    //
    USBCAMD_InitializeIdleLock(&ChannelExtension->IdleLock);

    //
    // initialize streaming structures
    //

    for (i=0; i< USBCAMD_MAX_REQUEST; i++) {
        ChannelExtension->TransferExtension[i].ChannelExtension = NULL;
        ChannelExtension->TransferExtension[i].DataIrp = NULL;
        ChannelExtension->TransferExtension[i].DataUrb = NULL;
        ChannelExtension->TransferExtension[i].SyncIrp = NULL;
        ChannelExtension->TransferExtension[i].SyncUrb = NULL;
        ChannelExtension->TransferExtension[i].WorkBuffer = NULL;
    }


USBCAMD_OpenChannel_Done:

    USBCAMD_KdPrint( MIN_TRACE, ("'exit USBCAMD_OpenChannel (%x)\n", ntStatus));


#if DBG
    ChannelExtension->InCam--;
    ASSERT(ChannelExtension->InCam == 0);
#endif

    USBCAMD_RELEASE(DeviceExtension);

    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_CloseChannel
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_CloseChannel(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension
    )
/*++

Routine Description:

    Closes a video channel.

Arguments:

    DeviceExtension - points to the driver specific DeviceExtension

    ChannelExtension - context data for this channel.

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    PUSBCAMD_READ_EXTENSION readExtension;
    int StreamNumber;
    USBCAMD_SERIALIZE(DeviceExtension);

    USBCAMD_KdPrint( MIN_TRACE, ("'enter USBCAMD_CloseChannel\n"));

#if DBG
    ChannelExtension->InCam++;
    ASSERT(ChannelExtension->InCam == 1);
#endif


    StreamNumber = ChannelExtension->StreamNumber;
    DeviceExtension->ActualInstances[StreamNumber]--;

    //
    // since we only support one channel this
    // should be zero
    //
    ASSERT(DeviceExtension->ActualInstances[StreamNumber] == 0);

    //
    // NOTE:
    // image capture should be stopped/unprepared when we get here
    //

    ASSERT_CHANNEL(ChannelExtension);
    ASSERT(ChannelExtension->ImageCaptureStarted == FALSE);
    ASSERT(ChannelExtension->CurrentRequest == NULL);
    ASSERT(ChannelExtension->ChannelPrepared == FALSE);

#if DBG
    ChannelExtension->InCam--;
    ASSERT(ChannelExtension->InCam == 0);
#endif

    USBCAMD_RELEASE(DeviceExtension);

    //
    // allow any pending reset events to run now
    //
    while (DeviceExtension->TimeoutCount[StreamNumber] >= 0) {

        LARGE_INTEGER dueTime;

        dueTime.QuadPart = -2 * MILLISECONDS;

        KeDelayExecutionThread(KernelMode,
                                      FALSE,
                                      &dueTime);
    }

    USBCAMD_KdPrint( MIN_TRACE, ("'exit USBCAMD_CloseChannel (%x)\n", ntStatus));

    return ntStatus;
}


//---------------------------------------------------------------------------
// USBCAMD_PrepareChannel
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_PrepareChannel(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension
    )
/*++

Routine Description:

    Prepare the Video channel for streaming, this is where the necessary
        USB BW is allocated.

Arguments:

    DeviceExtension - points to the driver specific DeviceExtension

    Irp - Irp associated with this request.

    ChannelExtension - context data for this channel.

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    LONG StreamNumber;
    ULONG i;
    HANDLE hThread;

    USBCAMD_SERIALIZE(DeviceExtension);

    USBCAMD_KdPrint (MIN_TRACE, ("'enter USBCAMD_PrepareChannel\n"));

    StreamNumber = ChannelExtension->StreamNumber;

    ASSERT_CHANNEL(ChannelExtension);

    if (ChannelExtension->ChannelPrepared ||
        ChannelExtension->ImageCaptureStarted) {
        // fail the call if the channel is not in the
        // proper state.
        TRAP();
        ntStatus = STATUS_UNSUCCESSFUL;
        goto USBCAMD_PrepareChannel_Done;
    }

    //
    // This driver function will select the appropriate alternate
    // interface.
    // This code performs the select_alt interface and gets us the
    // pipehandles
    //
    USBCAMD_DbgLog(TL_PRF_TRACE, '+WBa', StreamNumber, USBCAMD_StartClock(), ntStatus);
    if (DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {

        ntStatus =
            (*DeviceExtension->DeviceDataEx.DeviceData2.CamAllocateBandwidthEx)(
                    DeviceExtension->StackDeviceObject,
                    USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                    &ChannelExtension->RawFrameLength,
                    ChannelExtension->CurrentFormat,
                    StreamNumber);

        if (NT_SUCCESS(ntStatus)) {
            ntStatus =
                (*DeviceExtension->DeviceDataEx.DeviceData2.CamStartCaptureEx)(
                        DeviceExtension->StackDeviceObject,
                        USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                        StreamNumber);
        }

    }
    else {

        ntStatus =
            (*DeviceExtension->DeviceDataEx.DeviceData.CamAllocateBandwidth)(
                    DeviceExtension->StackDeviceObject,
                    USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                    &ChannelExtension->RawFrameLength,
                    ChannelExtension->CurrentFormat);

        if (NT_SUCCESS(ntStatus)) {
            ntStatus =
                (*DeviceExtension->DeviceDataEx.DeviceData.CamStartCapture)(
                        DeviceExtension->StackDeviceObject,
                        USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));
        }
    }
    USBCAMD_DbgLog(TL_PRF_TRACE, '-WBa', StreamNumber, USBCAMD_StopClock(), ntStatus);

    if ( ChannelExtension->RawFrameLength == 0 ) {
        ntStatus = STATUS_DEVICE_DATA_ERROR;  // client driver provided false info.
        goto USBCAMD_PrepareChannel_Done;   // pin open will fail.
    }
    
    if (NT_SUCCESS(ntStatus)) {

        //
        // we have the BW, go ahead and initailize our iso or bulk structures
        //

        // associate the right pipe index with this channel datapipe index.
        // we will never get here for a virtual still pin open.

        if (StreamNumber == DeviceExtension->IsoPipeStreamType ) {
            ChannelExtension->DataPipe = DeviceExtension->DataPipe;
            ChannelExtension->DataPipeType = UsbdPipeTypeIsochronous;

            ntStatus = USBCAMD_StartIsoThread(DeviceExtension); // start iso thread.
            if (!NT_SUCCESS(ntStatus))
                goto USBCAMD_PrepareChannel_Done;
            else 
                USBCAMD_KdPrint (MIN_TRACE,("Iso Thread Started\n"));
        }
        else if (StreamNumber == DeviceExtension->BulkPipeStreamType ) {
            ChannelExtension->DataPipe = DeviceExtension->BulkDataPipe;
            ChannelExtension->DataPipeType = UsbdPipeTypeBulk;
            //
            // allocate bulk buffers for each transfer extension.
            //
            for ( i =0; i < USBCAMD_MAX_REQUEST; i++) {
                ChannelExtension->TransferExtension[i].DataBuffer =
                    USBCAMD_AllocateRawFrameBuffer(ChannelExtension->RawFrameLength);

                if (ChannelExtension->TransferExtension[i].DataBuffer == NULL) {
                    USBCAMD_KdPrint (MIN_TRACE, ("'Bulk buffer alloc failed\n"));
                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                    goto USBCAMD_PrepareChannel_Done;
                }
                ChannelExtension->TransferExtension[i].BufferLength =
                    ChannelExtension->RawFrameLength;   

                // initilize bulk transfer parms.                                        
                ntStatus = USBCAMD_InitializeBulkTransfer(DeviceExtension,
                                                    ChannelExtension,
                                                    DeviceExtension->Interface,
                                                    &ChannelExtension->TransferExtension[i],
                                                    ChannelExtension->DataPipe);
                if (ntStatus != STATUS_SUCCESS) {
                    USBCAMD_KdPrint (MIN_TRACE, ("Bulk Transfer Init failed\n"));
                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;
                    goto USBCAMD_PrepareChannel_Done;
                }
            }
        }
        else if ( ChannelExtension->VirtualStillPin) {
            ChannelExtension->DataPipe = DeviceExtension->ChannelExtension[STREAM_Capture]->DataPipe;
            ChannelExtension->DataPipeType = DeviceExtension->ChannelExtension[STREAM_Capture]->DataPipeType;
        }
        else {
            TEST_TRAP();
        }

        ChannelExtension->SyncPipe = DeviceExtension->SyncPipe;

        if ( ChannelExtension->DataPipeType == UsbdPipeTypeIsochronous ) {

            for (i=0; i< USBCAMD_MAX_REQUEST; i++) {

                ntStatus = USBCAMD_InitializeIsoTransfer(DeviceExtension, ChannelExtension, i);

                if (!NT_SUCCESS(ntStatus)) {

                    // The close channel code will clean up anything we
                    // allocated
                    //
                    break;
                }
            }
        }
    }

    if (NT_SUCCESS(ntStatus)) {

        //
        // we have the BW and memory we need
        //

        ChannelExtension->ChannelPrepared = TRUE;
    }

USBCAMD_PrepareChannel_Done:

    USBCAMD_KdPrint (MIN_TRACE, ("'exit USBCAMD_PrepareChannel (%x)\n", ntStatus));

    USBCAMD_RELEASE(DeviceExtension);

    return ntStatus;
}


NTSTATUS
USBCAMD_StartIsoThread(
IN PUSBCAMD_DEVICE_EXTENSION pDeviceExt
)
{
    NTSTATUS ntStatus ;
    HANDLE hThread;
    
    //
    // we are ready to start the thread that handle read SRb completeion 
    // after iso transfer completion routine puts them in the que.
    //
    pDeviceExt->StopIsoThread = FALSE;
    ntStatus = PsCreateSystemThread(&hThread,
                                    (ACCESS_MASK)0,
                                    NULL,
                                    (HANDLE) 0,
                                    NULL,
                                    USBCAMD_ProcessIsoIrps,
                                    pDeviceExt);
        
    if (!NT_SUCCESS(ntStatus)) {                                
        USBCAMD_KdPrint (MIN_TRACE, ("Iso Thread Creation Failed\n"));
        return ntStatus;
    }

    // assert that this DO does not already have a thread
    ASSERT(!pDeviceExt->IsoThreadObject);

    // get a pointer to the thread object.
    ntStatus = ObReferenceObjectByHandle(hThread,
                              THREAD_ALL_ACCESS,
                              NULL,
                              KernelMode,
                              (PVOID *) &pDeviceExt->IsoThreadObject,
                              NULL);
                                  
    if (!NT_SUCCESS(ntStatus)) {
        USBCAMD_KdPrint (MIN_TRACE, ("Failed to get thread object.\n"));
        pDeviceExt->StopIsoThread = TRUE; // Set the thread stop flag
        KeReleaseSemaphore(&pDeviceExt->CompletedSrbListSemaphore,0,1,FALSE);
    }

    // release the thread handle.
    ZwClose( hThread);

    return ntStatus;
}

//---------------------------------------------------------------------------
// USBCAMD_UnPrepareChannel
//---------------------------------------------------------------------------
NTSTATUS
USBCAMD_UnPrepareChannel(
    IN PUSBCAMD_DEVICE_EXTENSION DeviceExtension,
    IN PUSBCAMD_CHANNEL_EXTENSION ChannelExtension
    )
/*++

Routine Description:

    Frees resources allocated in PrepareChannel.

Arguments:

    DeviceExtension - points to the driver specific DeviceExtension

    Irp - Irp associated with this request.

    ChannelExtension - context data for this channel.

Return Value:

    NT status code

--*/
{
    NTSTATUS ntStatus = STATUS_SUCCESS;
    ULONG i,StreamNumber;

    USBCAMD_SERIALIZE(DeviceExtension);

    USBCAMD_KdPrint (MIN_TRACE, ("'enter USBCAMD_UnPrepareChannel\n"));
    StreamNumber = ChannelExtension->StreamNumber;

    ASSERT_CHANNEL(ChannelExtension);

    if (!ChannelExtension->ChannelPrepared ||
        ChannelExtension->ImageCaptureStarted) {
        // fail the call if the channel is not in the
        // proper state.
        USBCAMD_KdPrint (MIN_TRACE, ("USBCAMD_UnPrepareChannel: Channel not in proper state!\n"));
        TRAP();
        ntStatus = STATUS_UNSUCCESSFUL;
        goto USBCAMD_UnPrepareChannel_Done;
    }


    //
    // hopefully put us in the mode that uses no bandwidth
    // ie select and alt interface that has a minimum iso
    // packet size
    //

    if (ChannelExtension->VirtualStillPin == TRUE) {
        ntStatus = STATUS_SUCCESS;
        goto USBCAMD_UnPrepareChannel_Done;
    }

    // attempt to stop
    if (DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
        (*DeviceExtension->DeviceDataEx.DeviceData2.CamStopCaptureEx)(
                DeviceExtension->StackDeviceObject,
                USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                StreamNumber);
    }
    else {
        (*DeviceExtension->DeviceDataEx.DeviceData.CamStopCapture)(
                DeviceExtension->StackDeviceObject,
                USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));

    }

    if (DeviceExtension->Usbcamd_version == USBCAMD_VERSION_200) {
        ntStatus =
            (*DeviceExtension->DeviceDataEx.DeviceData2.CamFreeBandwidthEx)(
                    DeviceExtension->StackDeviceObject,
                    USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension),
                    StreamNumber);
    }
    else {
        ntStatus =
            (*DeviceExtension->DeviceDataEx.DeviceData.CamFreeBandwidth)(
                    DeviceExtension->StackDeviceObject,
                    USBCAMD_GET_DEVICE_CONTEXT(DeviceExtension));
    }

    if (!NT_SUCCESS(ntStatus)) {
        USBCAMD_KdPrint (MIN_TRACE, (
            "USBCAMD_UnPrepareChannel failed stop capture  (%x)\n", ntStatus));

        //
        // ignore any errors on the stop
        //
        ntStatus = STATUS_SUCCESS;
    }

    //
    // Note:
    // We may get an error here if the camera hs been unplugged,
    // if