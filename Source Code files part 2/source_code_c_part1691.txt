 Propagate the message to all currently registered windows
        //
        m_WindowList.SendMessage( m_nWiaEventMessage, wParam, lParam );

        //
        // Make sure we ask for the new thumbnail *AFTER* we tell the views the item exists
        //
        if (pEventMessage->EventId() == WIA_EVENT_ITEM_CREATED)
        {
            RequestThumbnailForNewItem( pEventMessage );
        }

        //
        // If this is a deleted item event, mark this item deleted
        //
        if (pEventMessage->EventId() == WIA_EVENT_ITEM_DELETED)
        {
            CWiaItem *pWiaItem = m_WiaItemList.Find(pEventMessage->FullItemName());
            if (pWiaItem)
            {
                pWiaItem->MarkDeleted();
            }
        }

        //
        // On a connect event for this device, close the wizard
        //
        if (pEventMessage->EventId() == WIA_EVENT_DEVICE_CONNECTED)
        {
            if (m_bDisconnected && m_hWndWizard)
            {
                PropSheet_PressButton(m_hWndWizard,PSBTN_CANCEL);
            }
        }

        //
        // Free the event message
        //
        delete pEventMessage;
    }
    return HANDLED_EVENT_MESSAGE;
}

LRESULT CAcquisitionManagerControllerWindow::OnPowerBroadcast( WPARAM wParam, LPARAM lParam )
{
    if (PBT_APMQUERYSUSPEND == wParam)
    {
    }
    return TRUE;
}

LRESULT CALLBACK CAcquisitionManagerControllerWindow::WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_REFCOUNTED_MESSAGE_HANDLERS(CAcquisitionManagerControllerWindow)
    {
        SC_HANDLE_MESSAGE( WM_CREATE, OnCreate );
        SC_HANDLE_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_MESSAGE( PWM_POSTINITIALIZE, OnPostInitialize );
        SC_HANDLE_MESSAGE( WM_POWERBROADCAST, OnPowerBroadcast );
    }
    SC_HANDLE_REGISTERED_MESSAGE(m_nThreadNotificationMessage,OnThreadNotification);
    SC_HANDLE_REGISTERED_MESSAGE(m_nWiaEventMessage,OnEventNotification);
    SC_END_MESSAGE_HANDLERS();
}


bool CAcquisitionManagerControllerWindow::Register( HINSTANCE hInstance )
{
    WIA_PUSHFUNCTION(TEXT("CAcquisitionManagerControllerWindow::Register"));
    WNDCLASSEX WndClassEx;
    memset( &WndClassEx, 0, sizeof(WndClassEx) );
    WndClassEx.cbSize = sizeof(WNDCLASSEX);
    WndClassEx.lpfnWndProc = WndProc;
    WndClassEx.hInstance = hInstance;
    WndClassEx.hCursor = LoadCursor(NULL,IDC_ARROW);
    WndClassEx.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
    WndClassEx.lpszClassName = ACQUISITION_MANAGER_CONTROLLER_WINDOW_CLASSNAME;
    BOOL bResult = (::RegisterClassEx(&WndClassEx) != 0);
    DWORD dw = GetLastError();
    return(bResult != 0);
}


HWND CAcquisitionManagerControllerWindow::Create( HINSTANCE hInstance, CEventParameters *pEventParameters )
{
    return CreateWindowEx( 0, ACQUISITION_MANAGER_CONTROLLER_WINDOW_CLASSNAME,
                           TEXT("WIA Acquisition Manager Controller Window"),
                           WS_OVERLAPPEDWINDOW,
                           CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
                           NULL, NULL, hInstance, pEventParameters );
}


//
// Reference counting for our object
//
STDMETHODIMP_(ULONG) CAcquisitionManagerControllerWindow::AddRef(void)
{
    WIA_PUSHFUNCTION(TEXT("CAcquisitionManagerControllerWindow::AddRef"));
    ULONG nRes = InterlockedIncrement(&m_cRef);
    WIA_TRACE((TEXT("m_cRef: %d"),m_cRef));
    return nRes;
}


STDMETHODIMP_(ULONG) CAcquisitionManagerControllerWindow::Release(void)
{
    WIA_PUSHFUNCTION(TEXT("CAcquisitionManagerControllerWindow::Release"));
    if (InterlockedDecrement(&m_cRef)==0)
    {
        WIA_TRACE((TEXT("m_cRef: 0")));

        //
        // Cause this thread to exit
        //
        PostQuitMessage(0);

        //
        // Delete this instance of the wizard
        //
        delete this;
        return 0;
    }
    WIA_TRACE((TEXT("m_cRef: %d"),m_cRef));
    return(m_cRef);
}

HRESULT CAcquisitionManagerControllerWindow::QueryInterface( REFIID riid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CAcquisitionManagerControllerWindow::QueryInterface"));
    HRESULT hr = S_OK;
    *ppvObject = NULL;
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IWizardSite*>(this);
        reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    }
    else if (IsEqualIID( riid, IID_IWizardSite ))
    {
        *ppvObject = static_cast<IWizardSite*>(this);
        reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    }
    else if (IsEqualIID( riid, IID_IServiceProvider ))
    {
        *ppvObject = static_cast<IServiceProvider*>(this);
        reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    }
    else
    {
        WIA_PRINTGUID((riid,TEXT("Unknown interface")));
        *ppvObject = NULL;
        hr = E_NOINTERFACE;
    }

    return hr;
}


//
// IWizardSite
//
HRESULT CAcquisitionManagerControllerWindow::GetPreviousPage(HPROPSHEETPAGE *phPage)
{
    if (!phPage)
    {
        return E_INVALIDARG;
    }
    *phPage = PropSheet_IndexToPage( m_hWndWizard, m_nUploadQueryPageIndex );
    if (*phPage)
    {
        return S_OK;
    }
    return E_FAIL;
}

HRESULT CAcquisitionManagerControllerWindow::GetNextPage(HPROPSHEETPAGE *phPage)
{
    if (!phPage)
    {
        return E_INVALIDARG;
    }
    *phPage = PropSheet_IndexToPage( m_hWndWizard, m_nFinishPageIndex );
    if (*phPage)
    {
        return S_OK;
    }
    return E_FAIL;
}


HRESULT CAcquisitionManagerControllerWindow::GetCancelledPage(HPROPSHEETPAGE *phPage)
{
    return GetNextPage(phPage);
}

//
// IServiceProvider
//
HRESULT CAcquisitionManagerControllerWindow::QueryService( REFGUID guidService, REFIID riid, void **ppv )
{
    WIA_PUSHFUNCTION(TEXT("CAcquisitionManagerControllerWindow::QueryService"));
    WIA_PRINTGUID((guidService,TEXT("guidService")));
    WIA_PRINTGUID((riid,TEXT("riid")));
    
    if (!ppv)
    {
        return E_INVALIDARG;
    }

    //
    // Initialize result
    //
    *ppv = NULL;

    if (guidService == SID_PublishingWizard)
    {
    }
    else
    {
    }

    return E_FAIL;
}


static CSimpleString GetDisplayName( IShellItem *pShellItem )
{
    CSimpleString strResult;
    if (pShellItem)
    {
        LPOLESTR pszStr = NULL;
        if (SUCCEEDED(pShellItem->GetDisplayName( SIGDN_FILESYSPATH, &pszStr )) && pszStr)
        {
            strResult = CSimpleStringConvert::NaturalString(CSimpleStringWide(pszStr));

            CComPtr<IMalloc> pMalloc;
            if (SUCCEEDED(SHGetMalloc(&pMalloc)))
            {
                pMalloc->Free( pszStr );
            }
        }
    }
    return strResult;
}

//
// These two functions are needed to use the generic event handler class
//
void DllAddRef(void)
{
#if !defined(DBG_GENERATE_PRETEND_EVENT)
    _Module.Lock();
#endif
}

void DllRelease(void)
{
#if !defined(DBG_GENERATE_PRETEND_EVENT)
    _Module.Unlock();
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\acqthrd.h ===
#ifndef __ACQTHRD_H_INCLUDED
#define __ACQTHRD_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "evntparm.h"

class CAcquisitionThread
{
private:
    CEventParameters m_EventParameters;

private:
    explicit CAcquisitionThread( const CEventParameters &EventParameters )
    : m_EventParameters( EventParameters )
    {
    }

    ~CAcquisitionThread(void)
    {
    }

    HRESULT Run(void)
    {
        WIA_PUSHFUNCTION(TEXT("CAcquisitionThread::Run"));
        HRESULT hr = CoInitialize(NULL);
        if (SUCCEEDED(hr))
        {
            CAcquisitionManagerControllerWindow::Register( g_hInstance );
            HWND hWnd = CAcquisitionManagerControllerWindow::Create( g_hInstance, &m_EventParameters );
            if (!hWnd)
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                if (!SUCCEEDED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("CAcquisitionManagerControllerWindow::Create failed")));
                }
            }
            MSG msg;
            while (GetMessage(&msg,0,0,0))
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
            CoUninitialize();
        }
        return hr;
    }

    static DWORD ThreadProc( LPVOID pvParam )
    {
        WIA_PUSHFUNCTION(TEXT("CAcquisitionThread::ThreadProc"));
#if !defined(DBG_GENERATE_PRETEND_EVENT)
        _Module.Lock();
#endif
        DWORD dwResult = static_cast<DWORD>(E_FAIL);
        CAcquisitionThread *pAcquisitionThread = reinterpret_cast<CAcquisitionThread*>(pvParam);
        if (pAcquisitionThread)
        {
            dwResult = static_cast<DWORD>(pAcquisitionThread->Run());
            delete pAcquisitionThread;
        }
#if !defined(DBG_GENERATE_PRETEND_EVENT)
        _Module.Unlock();
#endif
        return dwResult;
    }

public:
    static HANDLE Create( const CEventParameters &EventParameters )
    {
        WIA_PUSHFUNCTION(TEXT("CAcquisitionThread::Create"));
        HANDLE hThreadResult = NULL;
        CAcquisitionThread *pAcquisitionThread = new CAcquisitionThread(EventParameters);
        if (pAcquisitionThread)
        {
            DWORD dwThreadId;
            hThreadResult = CreateThread( NULL, 0, ThreadProc, pAcquisitionThread, 0, &dwThreadId );
            if (!hThreadResult)
            {
                delete pAcquisitionThread;
            }
        }
        return hThreadResult;
    }
};

#endif // __ACQTHRD_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comdelp.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMDELP.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Delete progress dialog.  Displays the thumbnail and download progress.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <commctrl.h>
#include "comdelp.h"
#include "resource.h"
#include "pviewids.h"
#include "simcrack.h"
#include "mboxex.h"
#include "runnpwiz.h"

CCommonDeleteProgressPage::CCommonDeleteProgressPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_hCancelDeleteEvent(CreateEvent(NULL,TRUE,FALSE,TEXT(""))),
    m_nThreadNotificationMessage(RegisterWindowMessage(STR_THREAD_NOTIFICATION_MESSAGE)),
    m_hSwitchToNextPage(NULL),
    m_bQueryingUser(false),
    m_nPictureCount(0),
    m_bDeleteCancelled(false)
{
}

CCommonDeleteProgressPage::~CCommonDeleteProgressPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
    if (m_hCancelDeleteEvent)
    {
        CloseHandle(m_hCancelDeleteEvent);
        m_hCancelDeleteEvent = NULL;
    }
}


void CCommonDeleteProgressPage::UpdateCurrentPicture( int nPicture )
{
    if (nPicture >= 0)
    {
        SendDlgItemMessage( m_hWnd, IDC_COMDEL_CURRENTIMAGE, PBM_SETPOS, nPicture+1, 0 );
        CSimpleString().Format( IDS_DELETING_FILEN_OF_M, g_hInstance, nPicture+1, m_nPictureCount ).SetWindowText( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTIMAGE_TEXT ) );
    }
    else
    {
        SendDlgItemMessage( m_hWnd, IDC_COMDEL_CURRENTIMAGE, PBM_SETPOS, 0, 0 );
        SendDlgItemMessage( m_hWnd, IDC_COMDEL_CURRENTIMAGE_TEXT, WM_SETTEXT, 0, reinterpret_cast<LPARAM>("") );
    }
}

void CCommonDeleteProgressPage::UpdateThumbnail( HBITMAP hBitmap, CWiaItem *pWiaItem )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonDeleteProgressPage::UpdateThumbnail( HBITMAP hBitmap=0x%08X, CWiaItem *pWiaItem=0x%08X )"), hBitmap, pWiaItem ));


    HWND hWndPreview = GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL );
    if (hWndPreview)
    {
        if (pWiaItem && m_pControllerWindow && hBitmap)
        {
            switch (m_pControllerWindow->m_DeviceTypeMode)
            {
            case CAcquisitionManagerControllerWindow::ScannerMode:
                {
                    //
                    // If the item has a bitmap image, it already has a preview scan available
                    //
                    WIA_TRACE((TEXT("pWiaItem->BitmapImage() = %08X"), pWiaItem->BitmapImage() ));
                    if (pWiaItem->BitmapImage())
                    {
                        //
                        // Hide the preview window while we are futzing with it
                        //
                        ShowWindow( hWndPreview, SW_HIDE );

                        //
                        // Crop the image to the selected region
                        //
                        WiaPreviewControl_SetResolution( hWndPreview, &pWiaItem->ScanRegionSettings().sizeResolution );
                        WiaPreviewControl_SetSelOrigin( hWndPreview, 0, FALSE, &pWiaItem->ScanRegionSettings().ptOrigin );
                        WiaPreviewControl_SetSelExtent( hWndPreview, 0, FALSE, &pWiaItem->ScanRegionSettings().sizeExtent );

                        //
                        // Set the control to preview mode
                        //
                        WiaPreviewControl_SetPreviewMode( hWndPreview, TRUE );

                        //
                        // If this is a scanner item, we don't want to let the preview control take ownership of the bitmap.
                        // We don't want it to be deleted
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, hBitmap );

                        //
                        // Show the preview window
                        //
                        ShowWindow( hWndPreview, SW_SHOW );
                    }
                    else
                    {
                        //
                        // This means we are getting a preview image from the driver
                        // We don't want to delete this image
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, hBitmap );

                        //
                        // Make sure the window is visible
                        //
                        ShowWindow( hWndPreview, SW_SHOW );
                    }
                }
                break;

            default:
                {
                    //
                    // Go ahead and rotate the bitmap, even if it isn't necessary.
                    //
                    HBITMAP hRotatedThumbnail = NULL;
                    if (SUCCEEDED(m_GdiPlusHelper.Rotate( hBitmap, hRotatedThumbnail, pWiaItem->Rotation())))
                    {
                        //
                        // Set it to the rotated bitmap, and ALLOW this bitmap to be deleted
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, FALSE, hRotatedThumbnail );
                    }

                    //
                    // Make sure the window is visible
                    //
                    ShowWindow( hWndPreview, SW_SHOW );

                    //
                    // Delete the source bitmap
                    //
                    DeleteObject(hBitmap);
                }
            }
        }
        else
        {
            ShowWindow( hWndPreview, SW_HIDE );
            WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, NULL );
        }
    }
}


LRESULT CCommonDeleteProgressPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;


    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    //
    // Prepare the preview control
    //
    HWND hWndThumbnail = GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL );
    if (hWndThumbnail)
    {
        //
        // We only want to set the preview mode for scanners
        //
        if (CAcquisitionManagerControllerWindow::ScannerMode==m_pControllerWindow->m_DeviceTypeMode)
        {
            WiaPreviewControl_SetPreviewMode( hWndThumbnail, TRUE );
        }
        else
        {
            WiaPreviewControl_AllowNullSelection( hWndThumbnail, TRUE );
            WiaPreviewControl_ClearSelection( hWndThumbnail );
        }
        WiaPreviewControl_SetBgAlpha( hWndThumbnail, FALSE, 0xFF );
        WiaPreviewControl_DisableSelection( hWndThumbnail, TRUE );
        WiaPreviewControl_SetEnableStretch( hWndThumbnail, FALSE );
        WiaPreviewControl_SetBkColor( hWndThumbnail, FALSE, TRUE, GetSysColor(COLOR_WINDOW) );
        WiaPreviewControl_HideEmptyPreview( hWndThumbnail, TRUE );
        WiaPreviewControl_SetPreviewAlignment( hWndThumbnail, PREVIEW_WINDOW_CENTER, PREVIEW_WINDOW_CENTER, FALSE );

    }

    return 0;
}

void CCommonDeleteProgressPage::OnNotifyDeleteImage( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    WIA_PUSHFUNCTION(TEXT("CCommonDeleteProgressPage::OnNotifyDeleteImage()"));

    //
    // Don't handle delete messages if we are not on this page
    //
    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) != m_hWnd)
    {
        return;
    }

    CDeleteImagesThreadNotifyMessage *pDeleteImageThreadNotifyMessage = dynamic_cast<CDeleteImagesThreadNotifyMessage*>(pThreadNotificationMessage);
    if (pDeleteImageThreadNotifyMessage && m_pControllerWindow)
    {
        switch (pDeleteImageThreadNotifyMessage->Status())
        {
        case CDeleteImagesThreadNotifyMessage::Begin:
            {
                switch (pDeleteImageThreadNotifyMessage->Operation())
                {
                case CDeleteImagesThreadNotifyMessage::DeleteAll:
                    {
                        //
                        // Store the number of images we'll be deleting
                        //
                        m_nPictureCount = pDeleteImageThreadNotifyMessage->PictureCount();

                        //
                        // Initialize current image count progress bar
                        //
                        SendDlgItemMessage( m_hWnd, IDC_COMDEL_CURRENTIMAGE, PBM_SETRANGE32, 0, m_nPictureCount);
                        UpdateCurrentPicture(0);
                    }
                    break;

                case CDeleteImagesThreadNotifyMessage::DeleteImage:
                    {
                        HBITMAP hBitmapThumbnail = NULL;
                        CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDeleteImageThreadNotifyMessage->Cookie() );
                        if (pWiaItem)
                        {
                            //
                            // This will only work if it is a scanner item
                            //
                            hBitmapThumbnail = pWiaItem->BitmapImage();
                            if (!hBitmapThumbnail)
                            {
                                //
                                // Since it didn't work, this is a camera item, so create a thumbnail.
                                // We have to make sure we nuke this bitmap or it is a leak!
                                //
                                HDC hDC = GetDC(NULL);
                                if (hDC)
                                {
                                    hBitmapThumbnail = pWiaItem->CreateThumbnailBitmap(hDC);
                                    ReleaseDC(NULL,hDC);
                                }
                            }
                        }
                        //
                        // Update the thumbnail in the progress window
                        //
                        UpdateThumbnail( hBitmapThumbnail, pWiaItem );

                        //
                        // Increment file queue progress
                        //
                        UpdateCurrentPicture(pDeleteImageThreadNotifyMessage->CurrentPicture());
                    }
                }
            }
            break;

        case CDeleteImagesThreadNotifyMessage::End:
            {
                switch (pDeleteImageThreadNotifyMessage->Operation())
                {
                case CDeleteImagesThreadNotifyMessage::DeleteAll:
                    {
                        //
                        // Save the delete result
                        //
                        m_pControllerWindow->m_hrDeleteResult = pDeleteImageThreadNotifyMessage->hr();
                        WIA_PRINTHRESULT((m_pControllerWindow->m_hrDeleteResult,TEXT("m_pControllerWindow->m_hrDeleteResult")));

                        //
                        // Assume the upload query page
                        //
                        HPROPSHEETPAGE hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nUploadQueryPageIndex );

                        //
                        // If there is a message box active, save this page till the message box is dismissed
                        //
                        if (m_bQueryingUser)
                        {
                            m_hSwitchToNextPage = hNextPage;
                        }
                        else
                        {
                            //
                            // Set the next page
                            //
                            PropSheet_SetCurSel( GetParent(m_hWnd), hNextPage, -1 );
                        }
                    }
                    break;
                }
            }
        }
    }
}

LRESULT CCommonDeleteProgressPage::OnSetActive( WPARAM, LPARAM )
{
    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    //
    // Make sure we are actually supposed to delete the images
    //
    if (!m_pControllerWindow->m_bDeletePicturesIfSuccessful)
    {
        return -1;
    }

    //
    // Initialize the download error message
    //
    m_pControllerWindow->m_strErrorMessage = TEXT("");

    //
    // Initialize the delete result
    //
    m_pControllerWindow->m_hrDeleteResult = S_OK;

    //
    // Reset the cancelled flag
    //
    m_bDeleteCancelled = false;

    //
    // Clear all of the controls
    //
    UpdateCurrentPicture(-1);
    UpdateThumbnail(NULL,NULL);

    //
    // Reset the selected region, in case this is a scanner
    //
    WiaPreviewControl_SetResolution( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), NULL );
    WiaPreviewControl_SetSelOrigin( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), 0, FALSE, NULL );
    WiaPreviewControl_SetSelExtent( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), 0, FALSE, NULL );

    //
    // Set the control to preview mode
    //
    WiaPreviewControl_SetPreviewMode( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), TRUE );

    //
    // Reset the download event cancel
    //
    if (m_hCancelDeleteEvent)
    {
        ResetEvent(m_hCancelDeleteEvent);
    }

    //
    // Cancel thumbnail downloading
    //
    m_pControllerWindow->m_EventThumbnailCancel.Signal();

    //
    // We don't want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectFailDelete|CAcquisitionManagerControllerWindow::DontAllowSuspend;


    //
    //  Start the download
    //
    if (!m_pControllerWindow->DeleteDownloadedImages(m_hCancelDeleteEvent))
    {
        WIA_ERROR((TEXT("m_pControllerWindow->DeleteDownloadedImages FAILED!")));
        return -1;
    }

    //
    // No next, back or finish
    //
    PropSheet_SetWizButtons( GetParent(m_hWnd), 0 );

    return 0;
}


LRESULT CCommonDeleteProgressPage::OnWizNext( WPARAM, LPARAM )
{
    return 0;
}


LRESULT CCommonDeleteProgressPage::OnWizBack( WPARAM, LPARAM )
{
    return 0;
}

LRESULT CCommonDeleteProgressPage::OnReset( WPARAM, LPARAM )
{
    //
    // Cancel the current download
    //
    if (m_hCancelDeleteEvent)
    {
        SetEvent(m_hCancelDeleteEvent);
    }
    return 0;
}

bool CCommonDeleteProgressPage::QueryCancel(void)
{
    //
    //  Make sure this is the current page
    //
    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) != m_hWnd)
    {
        return true;
    }

    //
    // Pause the background thread
    //
    m_pControllerWindow->m_EventPauseBackgroundThread.Reset();


    //
    // Assume the user doesn't want to cancel
    //
    bool bResult = false;

    //
    // Set the querying user flag so the event handler won't change pages
    //
    m_bQueryingUser = true;

    //
    // We may be called on to switch pages when we are done here.  If so, this will be non-NULL then.
    //
    m_hSwitchToNextPage = NULL;

    //
    // Don't ask again if we've already asked
    //
    if (!m_bDeleteCancelled)
    {
        //
        // Ask the user if they want to cancel
        //
        if (CMessageBoxEx::IDMBEX_YES == CMessageBoxEx::MessageBox( m_hWnd, CSimpleString(IDS_CONFIRM_CANCEL_DELETE,g_hInstance), CSimpleString(IDS_ERROR_TITLE,g_hInstance), CMessageBoxEx::MBEX_YESNO|CMessageBoxEx::MBEX_ICONQUESTION ))
        {
            //
            // The user does want to cancel, so set the cancel event
            //
            if (m_hCancelDeleteEvent)
            {
                SetEvent(m_hCancelDeleteEvent);
            }

            //
            // Ensure we are cancelled so we don't get here again
            //
            m_bDeleteCancelled = true;

            //
            // Make sure the cancel button is disabled
            //
            EnableWindow( GetDlgItem( GetParent(m_hWnd), IDCANCEL ), FALSE );

            //
            // return true
            //
            bResult = true;
        }
    }

    //
    // If we are supposed to switch pages, switch now
    //
    if (m_hSwitchToNextPage)
    {
        PropSheet_SetCurSel( GetParent(m_hWnd), m_hSwitchToNextPage, -1 );
    }

    //
    // Reset the querying user flag so the event handler can change pages as needed
    //
    m_bQueryingUser = false;

    //
    // Unpause the background thread
    //
    m_pControllerWindow->m_EventPauseBackgroundThread.Signal();

    return bResult;
}

LRESULT CCommonDeleteProgressPage::OnQueryCancel( WPARAM, LPARAM )
{
    //
    // The user is not allowed to cancel out of this page
    //
    BOOL bResult = TRUE;

    //
    // Since we don't let them cancel in this page, just ignore the result
    //
    QueryCancel();


    return bResult;
}


LRESULT CCommonDeleteProgressPage::OnKillActive( WPARAM, LPARAM )
{
    //
    // Make sure the cancel button is enabled
    //
    EnableWindow( GetDlgItem( GetParent(m_hWnd), IDCANCEL ), TRUE );

    return 0;
}


LRESULT CCommonDeleteProgressPage::OnQueryEndSession( WPARAM, LPARAM )
{
    bool bCancel = QueryCancel();
    if (bCancel)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

LRESULT CCommonDeleteProgressPage::OnSysColorChange( WPARAM wParam, LPARAM lParam )
{
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), TRUE, TRUE, GetSysColor(COLOR_WINDOW) );
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_COMDEL_CURRENTTHUMBNAIL ), TRUE, FALSE, GetSysColor(COLOR_WINDOW) );
    return 0;
}

LRESULT CCommonDeleteProgressPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CCommonDeleteProgressPage::OnThreadNotification( WPARAM wParam, LPARAM lParam )
{
    WTM_BEGIN_THREAD_NOTIFY_MESSAGE_HANDLERS()
    {
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_DOWNLOADIMAGE, OnNotifyDeleteImage );
    }
    WTM_END_THREAD_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CCommonDeleteProgressPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_KILLACTIVE,OnKillActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_RESET,OnReset);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_QUERYCANCEL,OnQueryCancel);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonDeleteProgressPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonDeleteProgressPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_QUERYENDSESSION, OnQueryEndSession );
        SC_HANDLE_DIALOG_MESSAGE( WM_SYSCOLORCHANGE, OnSysColorChange );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nThreadNotificationMessage, OnThreadNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\camsel.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       CAMSEL.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Camera selection page.  Displays thumbnails, and lets the user select which
 *               ones to download.
 *
 *******************************************************************************/
#ifndef __CAMSEL_H_INCLUDED
#define __CAMSEL_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "simarray.h"
#include "gphelper.h"
#include "itranhlp.h"
#include "createtb.h"
#include "wiavideo.h"

class CCameraSelectionPage
{
private:
    //
    // Used for icon grouping
    //
    class CListviewGroupInfo
    {
    private:
        CSimpleStringWide m_strGroupName;
        int               m_nGroupId;

    public:
        CListviewGroupInfo(void)
          : m_strGroupName(TEXT("")),
            m_nGroupId(-1)
        {
        }
        CListviewGroupInfo( const CListviewGroupInfo &other )
          : m_strGroupName(other.GroupName()),
            m_nGroupId(other.GroupId())
        {
        }
        CListviewGroupInfo( const CSimpleStringWide &strGroupName, int nGroupId=-1 )
          : m_strGroupName(strGroupName),
            m_nGroupId(nGroupId)
        {
        }
        ~CListviewGroupInfo(void)
        {
        }
        CListviewGroupInfo &operator=( const CListviewGroupInfo &other )
        {
            if (this != &other)
            {
                m_strGroupName = other.GroupName();
                m_nGroupId = other.GroupId();
            }
            return *this;
        }
        bool operator==( const CListviewGroupInfo &other )
        {
            return (other.GroupName() == m_strGroupName);
        }
        bool operator==( const CSimpleStringWide &strGroupName )
        {
            return (strGroupName == m_strGroupName);
        }
        CSimpleStringWide GroupName(void) const
        {
            return m_strGroupName;
        }
        int GroupId(void) const
        {
            return m_nGroupId;
        }
    };

    class CIconGroupList : public CSimpleDynamicArray<CListviewGroupInfo>
    {
    private:
        CIconGroupList( const CIconGroupList & );
        CIconGroupList& operator=( const CIconGroupList & );

    public:
        CIconGroupList(void)
        {
        }
        ~CIconGroupList(void)
        {
        }
        int Add( HWND hwndList, const CSimpleStringWide &strwGroupName )
        {
            int nResult = -1;
            CSimpleString strGroupName = CSimpleStringConvert::NaturalString(strwGroupName);
            if (strGroupName.Length())
            {
                LVGROUP LvGroup = {0};
                LvGroup.cbSize = sizeof(LvGroup);
                LvGroup.pszHeader = const_cast<LPTSTR>(strGroupName.String());
                LvGroup.mask = LVGF_HEADER | LVGF_ALIGN | LVGF_GROUPID | LVGF_STATE;
                LvGroup.uAlign = LVGA_HEADER_LEFT;
                LvGroup.iGroupId = Size();
                LvGroup.state = LVGS_NORMAL;
                nResult = static_cast<int>(ListView_InsertGroup( hwndList, Size(), &LvGroup ));
                WIA_TRACE((TEXT("ListView_InsertGroup on %s returned %d"), strGroupName.String(), nResult ));
                if (nResult >= 0)
                {
                    Append( CListviewGroupInfo( strwGroupName, nResult ) );
                }
            }
            return nResult;
        }
        int GetGroupId( CWiaItem *pWiaItem, HWND hwndList )
        {
            WIA_PUSH_FUNCTION((TEXT("GetGroupId(%ws)"),pWiaItem->ItemName().String()));
            int nResult = -1;
            if (Size())
            {
                nResult = (*this)[0].GroupId();
                if (pWiaItem)
                {
                    CWiaItem *pWiaItemParent = pWiaItem->Parent();
                    if (pWiaItemParent)
                    {
                        CSimpleStringWide strwFolderName = pWiaItemParent->ItemName();
                        if (strwFolderName.Length())
                        {
                            int nIndex = Find(strwFolderName);
                            if (nIndex < 0)
                            {
                                CSimpleString strFolderName = CSimpleStringConvert::NaturalString(strwFolderName);
                                if (strFolderName.Length())
                                {
                                    LVGROUP LvGroup = {0};
                                    LvGroup.cbSize = sizeof(LvGroup);
                                    LvGroup.pszHeader = const_cast<LPTSTR>(strFolderName.String());
                                    LvGroup.mask = LVGF_HEADER | LVGF_ALIGN | LVGF_GROUPID | LVGF_STATE;
                                    LvGroup.uAlign = LVGA_HEADER_LEFT;
                                    LvGroup.iGroupId = Size();
                                    LvGroup.state = LVGS_NORMAL;
                                    nResult = static_cast<int>(ListView_InsertGroup( hwndList, Size(), &LvGroup ));
                                    WIA_TRACE((TEXT("ListView_InsertGroup on %s returned %d"), strFolderName.String(), nResult ));
                                    if (nResult >= 0)
                                    {
                                        Append( CListviewGroupInfo( strwFolderName, nResult ) );
                                    }
                                }
                            }
                            else
                            {
                                nResult = (*this)[nIndex].GroupId();
                            }
                        }
                    }
                }
            }
            return nResult;
        }
    };

    CIconGroupList m_GroupInfoList;

    // Private data
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    int                                  m_nDefaultThumbnailImageListIndex;
    int                                  m_nProgrammaticSetting;
    CGdiPlusHelper                       m_GdiPlusHelper;
    UINT                                 m_nThreadNotificationMessage;
    UINT                                 m_nWiaEventMessage;
    bool                                 m_bThumbnailsRequested;
    HICON                                m_hIconAudioAnnotation;
    HICON                                m_hIconMiscellaneousAnnotation;
    CComPtr<IWiaAnnotationHelpers>       m_pWiaAnnotationHelpers;
    CComPtr<IWiaVideo>                   m_pWiaVideo;
    ToolbarHelper::CToolbarBitmapInfo    m_CameraSelectionButtonBarBitmapInfo;
    ToolbarHelper::CToolbarBitmapInfo    m_CameraTakePictureButtonBarBitmapInfo;
    ToolbarHelper::CToolbarBitmapInfo    m_CameraActionButtonBarBitmapInfo;
    HACCEL                               m_hAccelerators;

private:
    // No implementation
    CCameraSelectionPage(void);
    CCameraSelectionPage( const CCameraSelectionPage & );
    CCameraSelectionPage &operator=( const CCameraSelectionPage & );

private:
    // Constructor and destructor
    explicit CCameraSelectionPage( HWND hWnd );
    ~CCameraSelectionPage(void);

private:
    int AddItem( HWND hwndList, CWiaItem *pWiaItem, bool bEnsureVisible=false );
    void AddEnumeratedItems( HWND hwndList, CWiaItem *pFirstItem );
    void PopulateListView(void);
    CWiaItem *GetItemFromListByIndex( HWND hwndList, int nItem );
    int FindItemListIndex( HWND hwndList, CWiaItem *pWiaItem );
    int AddThumbnailToListViewImageList( HWND hwndList, CWiaItem *pWiaItem, int nIndex );
    int GetSelectionIndices( CSimpleDynamicArray<int> &aIndices );
    void UpdateControls(void);
    void InitializeVideoCamera(void);
    void DrawAnnotationIcons( HDC hDC, CWiaItem *pWiaItem, HBITMAP hBitmap );
    void MyEnableToolbarButton( int nButtonId, bool bEnable );
    void RepaintAllThumbnails();

private:
    // WM_COMMAND handlers
    void OnSelectAll( WPARAM, LPARAM );
    void OnClearAll( WPARAM, LPARAM );
    void OnProperties( WPARAM, LPARAM );
    void OnRotate( WPARAM, LPARAM );
    void OnTakePicture( WPARAM, LPARAM );
    void OnDelete( WPARAM, LPARAM );

    // WM_NOTIFY handlers
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnTranslateAccelerator( WPARAM, LPARAM );
    LRESULT OnGetToolTipDispInfo( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    LRESULT OnThumbnailListSelChange( WPARAM, LPARAM );
    LRESULT OnThumbnailListKeyDown( WPARAM, LPARAM );
    LRESULT OnShowWindow( WPARAM, LPARAM );
    LRESULT OnTimer( WPARAM wParam, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );
    LRESULT OnThemeChanged( WPARAM, LPARAM );
    LRESULT OnSettingChange( WPARAM, LPARAM );

    // Thread notification message handlers
    void OnNotifyDownloadThumbnail( UINT, CThreadNotificationMessage * );
    void OnNotifyDownloadImage( UINT, CThreadNotificationMessage * );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __CAMSEL_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\camsel.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       CAMSEL.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Camera selection page.  Displays thumbnails, and lets the user select which
 *               ones to download.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <vcamprop.h>
#include <psutil.h>
#include "camsel.h"
#include "resource.h"
#include "simcrack.h"
#include "waitcurs.h"
#include "mboxex.h"
#include "wiatextc.h"
#include <commctrl.h>
#include <comctrlp.h>
#include "gwiaevnt.h"
#include <itranhlp.h>
#include "createtb.h"
#include <simrect.h>

//
// We use this instead of GetSystemMetrics(SM_CXSMICON)/GetSystemMetrics(SM_CYSMICON) because
// large "small" icons wreak havoc with dialog layout
//
#define SMALL_ICON_SIZE 16

//
// Quickly check a listview state flag to see if it is selected or not
//
static inline bool IsStateChecked( UINT nState )
{
    //
    // State image indices are stored in bits 12 through 15 of the listview
    // item state, so we shift the state right 12 bits.  We subtract 1, because
    // the selected image is stored as index 2, an unselected image is stored as index 1.
    //
    return (((nState >> 12) - 1) != 0);
}

#undef VAISHALEE_LETS_ME_PUT_DELETE_IN


#define IDC_ACTION_BUTTON_BAR      1200
#define IDC_SELECTION_BUTTON_BAR   1201
#define IDC_TAKEPICTURE_BUTTON_BAR 1202


//
// Delete item command, doesn't appear in resource header, because there is no UI for it
//
#define IDC_CAMSEL_DELETE 1113

//
// Timer ID for updating the status line
//
#define IDT_UPDATESTATUS 1

//
// Amount of time to wait to update the status line
//
static const UINT c_UpdateStatusTimeout = 200;

// Thumbnail whitespace: the space in between images and their selection rectangles
// These values were discovered by trail and error.  For instance, if you reduce
// c_nAdditionalMarginY to 20, you get really bizarre spacing problems in the list view
// in vertical mode.  These values could become invalid in future versions of the listview.
static const int c_nAdditionalMarginX       = 9;
static const int c_nAdditionalMarginY       = 21;


CCameraSelectionPage::CCameraSelectionPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_nDefaultThumbnailImageListIndex(-1),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE)),
    m_nThreadNotificationMessage(RegisterWindowMessage(STR_THREAD_NOTIFICATION_MESSAGE)),
    m_bThumbnailsRequested(false),
    m_hIconAudioAnnotation(NULL),
    m_hIconMiscellaneousAnnotation(NULL),
    m_nProgrammaticSetting(0),
    m_CameraSelectionButtonBarBitmapInfo( g_hInstance, IDB_CAMSEL_TOOLBAR ),
    m_CameraTakePictureButtonBarBitmapInfo( g_hInstance, IDB_CAMSEL_TOOLBAR ),
    m_CameraActionButtonBarBitmapInfo( g_hInstance, IDB_CAMSEL_TOOLBAR ),
    m_hAccelerators(NULL)
{
}

CCameraSelectionPage::~CCameraSelectionPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
    if (m_hIconAudioAnnotation)
    {
        DestroyIcon(m_hIconAudioAnnotation);
        m_hIconAudioAnnotation = NULL;
    }
    if (m_hIconMiscellaneousAnnotation)
    {
        DestroyIcon(m_hIconMiscellaneousAnnotation);
        m_hIconMiscellaneousAnnotation = NULL;
    }
    if (m_hAccelerators)
    {
        DestroyAcceleratorTable(m_hAccelerators);
        m_hAccelerators = NULL;
    }
}


LRESULT CCameraSelectionPage::OnWizNext( WPARAM, LPARAM )
{
    return 0;
}

LRESULT CCameraSelectionPage::OnWizBack( WPARAM, LPARAM )
{
    return 0;
}

//
// Slightly optimized version of EnableWindow
//
static void MyEnableWindow( HWND hWnd, BOOL bEnable )
{
    if (IsWindowEnabled(hWnd) != bEnable)
    {
        EnableWindow( hWnd, bEnable );
    }
}

void CCameraSelectionPage::MyEnableToolbarButton( int nButtonId, bool bEnable )
{
    ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_ACTION_BUTTON_BAR ), nButtonId, bEnable );
    ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_SELECTION_BUTTON_BAR ), nButtonId, bEnable );
    ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_TAKEPICTURE_BUTTON_BAR ), nButtonId, bEnable );
}

LRESULT CCameraSelectionPage::OnTimer( WPARAM wParam, LPARAM )
{
    //
    // Update the status line
    //
    if (wParam == IDT_UPDATESTATUS)
    {
        KillTimer( m_hWnd, IDT_UPDATESTATUS );

        //
        // Get the item count and selected count
        //
        int nItemCount = ListView_GetItemCount( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ) );
        int nCheckedCount = m_pControllerWindow->GetSelectedImageCount();

        if (!nItemCount)
        {
            //
            // If there are no items, tell the user there are no items on the device
            //
            CSimpleString( IDS_SELECTED_NO_PICTURES, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );
        }
        else if (!nCheckedCount)
        {
            //
            // If none of the items are selected, tell the user there are none selected
            //
            CSimpleString( IDS_SELECTED_NO_IMAGES_SELECTED, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );
        }
        else
        {
            //
            // Just tell them how many selected items there are
            //
            CSimpleString().Format( IDS_CAMERA_SELECT_NUMSEL, g_hInstance, nCheckedCount, nItemCount ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );
        }
    }
    return 0;
}

void CCameraSelectionPage::UpdateControls(void)
{
    int nItemCount = ListView_GetItemCount( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ) );
    int nSelCount = ListView_GetSelectedCount( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ) );
    int nCheckedCount = m_pControllerWindow->GetSelectedImageCount();

    //
    // Figure out which wizard buttons to enable
    //
    int nWizButtons = 0;

    //
    // Only enable "back" if the first page is available
    //
    if (!m_pControllerWindow->SuppressFirstPage())
    {
        nWizButtons |= PSWIZB_BACK;
    }

    //
    // Only enable "next" if there are selected images
    //
    if (nCheckedCount)
    {
        nWizButtons |= PSWIZB_NEXT;
    }

    //
    // Set the buttons
    //
    PropSheet_SetWizButtons( GetParent(m_hWnd), nWizButtons );

    //
    // Properties are only available for one item at a time
    //
    MyEnableToolbarButton( IDC_CAMSEL_PROPERTIES, nSelCount == 1 );
    

    //
    // Select All is only available if there are images
    //
    MyEnableToolbarButton( IDC_CAMSEL_SELECT_ALL, (nItemCount != 0) && (nItemCount != nCheckedCount) );

    //
    // Clear all is only available if there are selected images
    //
    MyEnableToolbarButton( IDC_CAMSEL_CLEAR_ALL, nCheckedCount != 0 );

    //
    // Rotate is only available if there are selected images
    //
    MyEnableToolbarButton( IDC_CAMSEL_ROTATE_RIGHT, nSelCount != 0 );
    MyEnableToolbarButton( IDC_CAMSEL_ROTATE_LEFT, nSelCount != 0 );
    
    //
    // Set a timer to tell the user how many images are selected.  We don't do this
    // here because it is kind of slow, and the static control flickers a bit.
    //
    KillTimer( m_hWnd, IDT_UPDATESTATUS );
    SetTimer( m_hWnd, IDT_UPDATESTATUS, c_UpdateStatusTimeout, NULL );

    //
    // Disable capture if we can't create the dshow graph
    //
    if (m_pControllerWindow->m_DeviceTypeMode == CAcquisitionManagerControllerWindow::VideoMode)
    {
        WIAVIDEO_STATE  VideoState = WIAVIDEO_NO_VIDEO;

        if (m_pWiaVideo)
        {
            m_pWiaVideo->GetCurrentState(&VideoState);
        }

        if (VideoState == WIAVIDEO_NO_VIDEO)
        {
            MyEnableToolbarButton( IDC_CAMSEL_TAKE_PICTURE, FALSE );
        }
        else
        {
            MyEnableToolbarButton( IDC_CAMSEL_TAKE_PICTURE, TRUE );
        }
    }
    else
    {
        if (!m_pControllerWindow->m_bTakePictureIsSupported)
        {
            MyEnableToolbarButton( IDC_CAMSEL_TAKE_PICTURE, FALSE );
        }
        else
        {
            MyEnableToolbarButton( IDC_CAMSEL_TAKE_PICTURE, TRUE );
        }
    }
}


LRESULT CCameraSelectionPage::OnSetActive( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCameraSelectionPage::OnSetActive")));
    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    //
    // In case it failed the first time, try creating the graph again
    //
    InitializeVideoCamera();
    
    //
    // Update the enabled state for all affected controls
    //
    UpdateControls();

    //
    // We do want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectGotoLastpage|CAcquisitionManagerControllerWindow::OnDisconnectFailDownload|CAcquisitionManagerControllerWindow::OnDisconnectFailUpload|CAcquisitionManagerControllerWindow::OnDisconnectFailDelete;

    return 0;
}


LRESULT CCameraSelectionPage::OnShowWindow( WPARAM, LPARAM )
{
    if (!m_bThumbnailsRequested)
    {
        //
        // Request the thumbnails
        //
        m_pControllerWindow->DownloadAllThumbnails();

        //
        // Make sure we don't ask for the thumbnails again
        //
        m_bThumbnailsRequested = true;
    }

    return 0;
}


LRESULT CCameraSelectionPage::OnDestroy( WPARAM, LPARAM )
{
    m_pControllerWindow->m_WindowList.Remove(m_hWnd);

    //
    // Nuke the imagelists
    //
    HIMAGELIST hImageList = ListView_SetImageList( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), NULL, LVSIL_NORMAL );
    if (hImageList)
    {
        ImageList_Destroy(hImageList);
    }

    hImageList = ListView_SetImageList( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), NULL, LVSIL_SMALL );
    if (hImageList)
    {
        ImageList_Destroy(hImageList);
    }

    if (m_pWiaVideo)
    {
        HRESULT hr = m_pWiaVideo->DestroyVideo();
    }

    return 0;
}


LRESULT CCameraSelectionPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CCameraSelectionPage::OnInitDialog"));
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    
    //
    // Get the annotation helper interface and initialize the annotation icon
    //
    if (SUCCEEDED(CoCreateInstance( CLSID_WiaDefaultUi, NULL,CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers,(void**)&m_pWiaAnnotationHelpers )))
    {
        m_pWiaAnnotationHelpers->GetAnnotationOverlayIcon( AnnotationAudio, &m_hIconAudioAnnotation, SMALL_ICON_SIZE );
        m_pWiaAnnotationHelpers->GetAnnotationOverlayIcon( AnnotationUnknown, &m_hIconMiscellaneousAnnotation, SMALL_ICON_SIZE );
    }

    //
    // Initialize Thumbnail Listview control
    //
    HWND hwndList = GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS );
    if (hwndList)
    {
        //
        // Get the device name for the root folder group
        //
        if (m_pControllerWindow->m_strwDeviceName.Length())
        {
            m_GroupInfoList.Add( hwndList, m_pControllerWindow->m_strwDeviceName );
        }

        //
        // Get the number of items
        //
        LONG nItemCount = m_pControllerWindow->m_WiaItemList.Count();

        //
        // Hide the labels and use border selection
        //
        ListView_SetExtendedListViewStyleEx( hwndList, LVS_EX_DOUBLEBUFFER|LVS_EX_BORDERSELECT|LVS_EX_HIDELABELS|LVS_EX_SIMPLESELECT|LVS_EX_CHECKBOXES, LVS_EX_DOUBLEBUFFER|LVS_EX_BORDERSELECT|LVS_EX_HIDELABELS|LVS_EX_SIMPLESELECT|LVS_EX_CHECKBOXES );

        //
        // Create the image list
        //
        HIMAGELIST hImageList = ImageList_Create( m_pControllerWindow->m_sizeThumbnails.cx, m_pControllerWindow->m_sizeThumbnails.cy, ILC_COLOR24|ILC_MIRROR, nItemCount, 50 );
        if (hImageList)
        {
            //
            // Create the default thumbnail
            //
            HBITMAP hBmpDefaultThumbnail = WiaUiUtil::CreateIconThumbnail( hwndList, m_pControllerWindow->m_sizeThumbnails.cx, m_pControllerWindow->m_sizeThumbnails.cy, g_hInstance, IDI_UNAVAILABLE, CSimpleString( IDS_DOWNLOADINGTHUMBNAIL, g_hInstance ));
            if (hBmpDefaultThumbnail)
            {
                m_nDefaultThumbnailImageListIndex = ImageList_Add( hImageList, hBmpDefaultThumbnail, NULL );
                DeleteObject( hBmpDefaultThumbnail );
            }

            //
            // Set the image list
            //
            ListView_SetImageList( hwndList, hImageList, LVSIL_NORMAL );

            //
            // Set the spacing
            //
            ListView_SetIconSpacing( hwndList, m_pControllerWindow->m_sizeThumbnails.cx + c_nAdditionalMarginX, m_pControllerWindow->m_sizeThumbnails.cy + c_nAdditionalMarginY );

            //
            // Set the item count, to minimize recomputing the list size
            //
            ListView_SetItemCount( hwndList, nItemCount );

        }

        //
        // Create a small image list, to prevent the checkbox state images from being resized in WM_SYSCOLORCHANGE
        //
        HIMAGELIST hImageListSmall = ImageList_Create( GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), ILC_COLOR24|ILC_MASK, 1, 1 );
        if (hImageListSmall)
        {
            ListView_SetImageList( hwndList, hImageListSmall, LVSIL_SMALL );
        }
    }


    //
    // Populate the list view
    //
    PopulateListView();

    //
    // Initialize the video camera
    //
    InitializeVideoCamera();

    //
    // Dismiss the progress dialog if it is still up
    //
    if (m_pControllerWindow->m_pWiaProgressDialog)
    {
        m_pControllerWindow->m_pWiaProgressDialog->Destroy();
        m_pControllerWindow->m_pWiaProgressDialog = NULL;
    }
    
    //
    // Make sure the wizard still has the focus.  This weird hack is necessary
    // because user seems to think the wizard is already the foreground window,
    // so the second call doesn't do anything
    //
    SetForegroundWindow( m_pControllerWindow->m_hWnd );
    SetForegroundWindow( GetParent(m_hWnd) );
    

    if (m_pControllerWindow->m_DeviceTypeMode == CAcquisitionManagerControllerWindow::CameraMode)
    {
        
        bool bShowTakePicture = m_pControllerWindow->m_bTakePictureIsSupported;
        
        ToolbarHelper::CButtonDescriptor ActionButtonDescriptors[] =
        {
            { 0, IDC_CAMSEL_ROTATE_RIGHT, TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, 0 },
            { 1, IDC_CAMSEL_ROTATE_LEFT,  TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, 0 },
            { 2, IDC_CAMSEL_PROPERTIES,   TBSTATE_ENABLED, BTNS_BUTTON, bShowTakePicture,  NULL, 0 },
            { 3, IDC_CAMSEL_TAKE_PICTURE, TBSTATE_ENABLED, BTNS_BUTTON, false, &bShowTakePicture, 0 }
        };
    
        HWND hWndActionToolbar = ToolbarHelper::CreateToolbar( 
            m_hWnd, 
            GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS),
            GetDlgItem(m_hWnd,IDC_CAMSEL_CAMERA_BUTTON_BAR_GUIDE),
            ToolbarHelper::AlignLeft|ToolbarHelper::AlignTop,
            IDC_ACTION_BUTTON_BAR,
            m_CameraActionButtonBarBitmapInfo, 
            ActionButtonDescriptors, 
            ARRAYSIZE(ActionButtonDescriptors) );

        ToolbarHelper::CButtonDescriptor SelectionButtonDescriptors[] =
        {
            { -1, IDC_CAMSEL_CLEAR_ALL,    TBSTATE_ENABLED, BTNS_BUTTON, true, NULL, IDS_CAMSEL_CLEAR_ALL },
            { -1, IDC_CAMSEL_SELECT_ALL,   TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, IDS_CAMSEL_SELECT_ALL }
        };
    
        HWND hWndSelectionToolbar = ToolbarHelper::CreateToolbar( 
            m_hWnd, 
            hWndActionToolbar,
            GetDlgItem(m_hWnd,IDC_CAMSEL_CAMERA_BUTTON_BAR_GUIDE),
            ToolbarHelper::AlignRight|ToolbarHelper::AlignTop,
            IDC_SELECTION_BUTTON_BAR,
            m_CameraSelectionButtonBarBitmapInfo, 
            SelectionButtonDescriptors, 
            ARRAYSIZE(SelectionButtonDescriptors) );
        
        //
        // Nuke the guide window
        //
        DestroyWindow( GetDlgItem(m_hWnd,IDC_CAMSEL_CAMERA_BUTTON_BAR_GUIDE) );
        
        //
        // Make sure the toolbars are visible
        //
        ShowWindow( hWndActionToolbar, SW_SHOW );
        UpdateWindow( hWndActionToolbar );
        ShowWindow( hWndSelectionToolbar, SW_SHOW );
        UpdateWindow( hWndSelectionToolbar );
    }
    else
    {
        ToolbarHelper::CButtonDescriptor TakePictureButtonDescriptors[] =
        {
            { 3, IDC_CAMSEL_TAKE_PICTURE, TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, IDS_CAMSEL_TAKE_PICTURE }
        };
    
        HWND hWndTakePictureToolbar = ToolbarHelper::CreateToolbar( 
            m_hWnd, 
            GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS),
            GetDlgItem(m_hWnd,IDC_CAMSEL_VIDEO_PREVIEW_BUTTON_BAR_GUIDE),
            ToolbarHelper::AlignHCenter|ToolbarHelper::AlignTop,
            IDC_TAKEPICTURE_BUTTON_BAR,
            m_CameraTakePictureButtonBarBitmapInfo, 
            TakePictureButtonDescriptors, 
            ARRAYSIZE(TakePictureButtonDescriptors) );

        ToolbarHelper::CButtonDescriptor ActionButtonDescriptors[] =
        {
            { 0, IDC_CAMSEL_ROTATE_RIGHT, TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, 0 },
            { 1, IDC_CAMSEL_ROTATE_LEFT,  TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, 0 },
            { 2, IDC_CAMSEL_PROPERTIES,   TBSTATE_ENABLED, BTNS_BUTTON, true,  NULL, 0 }
        };
    
        HWND hWndActionToolbar = ToolbarHelper::CreateToolbar( 
            m_hWnd, 
            hWndTakePictureToolbar,
            GetDlgItem(m_hWnd,IDC_CAMSEL_VIDEO_SELECTION_BUTTON_BAR_GUIDE),
            ToolbarHelper::AlignLeft|ToolbarHelper::AlignTop,
            IDC_ACTION_BUTTON_BAR,
            m_CameraActionButtonBarBitmapInfo, 
            ActionButtonDescriptors, 
            ARRAYSIZE(ActionButtonDescriptors) );

        ToolbarHelper::CButtonDescriptor SelectionButtonDescriptors[] =
        {
            { -1, IDC_CAMSEL_CLEAR_ALL,    TBSTATE_ENABLED, BTNS_BUTTON, true, NULL, IDS_CAMSEL_CLEAR_ALL },
            { -1, IDC_CAMSEL_SELECT_ALL,   TBSTATE_ENABLED, BTNS_BUTTON, false, NULL, IDS_CAMSEL_SELECT_ALL }
        };
    
        HWND hWndSelectionToolbar = ToolbarHelper::CreateToolbar( 
            m_hWnd, 
            hWndActionToolbar,
            GetDlgItem(m_hWnd,IDC_CAMSEL_VIDEO_SELECTION_BUTTON_BAR_GUIDE),
            ToolbarHelper::AlignRight|ToolbarHelper::AlignTop,
            IDC_SELECTION_BUTTON_BAR,
            m_CameraSelectionButtonBarBitmapInfo, 
            SelectionButtonDescriptors, 
            ARRAYSIZE(SelectionButtonDescriptors) );

        //
        // Nuke the guide windows
        //
        DestroyWindow( GetDlgItem(m_hWnd,IDC_CAMSEL_VIDEO_PREVIEW_BUTTON_BAR_GUIDE) );
        DestroyWindow( GetDlgItem(m_hWnd,IDC_CAMSEL_VIDEO_SELECTION_BUTTON_BAR_GUIDE) );
        
        //
        // Make sure the toolbars are visible
        //
        ShowWindow( hWndTakePictureToolbar, SW_SHOW );
        UpdateWindow( hWndTakePictureToolbar );
        ShowWindow( hWndActionToolbar, SW_SHOW );
        UpdateWindow( hWndActionToolbar );
        ShowWindow( hWndSelectionToolbar, SW_SHOW );
        UpdateWindow( hWndSelectionToolbar );
    }

    m_hAccelerators = LoadAccelerators( g_hInstance, MAKEINTRESOURCE(IDR_CAMERASELECTIONACCEL) );
    
    return 0;
}


LRESULT CCameraSelectionPage::OnTranslateAccelerator( WPARAM, LPARAM lParam )
{
    //
    // Assume we won't be handling this message
    //
    LRESULT lResult = PSNRET_NOERROR;

    //
    // Make sure this is the current window
    //
    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
    {
        //
        // Make sure we have a valid accelerator table
        //
        if (m_hAccelerators)
        {
            //
            // Get the WM_NOTIFY message goo for this message
            //
            PSHNOTIFY *pPropSheetNotify = reinterpret_cast<PSHNOTIFY*>(lParam);
            if (pPropSheetNotify)
            {
                //
                // Get the MSG
                //
                MSG *pMsg = reinterpret_cast<MSG*>(pPropSheetNotify->lParam);
                if (pMsg)
                {
                    //
                    // Try to translate the accelerator
                    //
                    if (TranslateAccelerator( m_hWnd, m_hAccelerators, pMsg ))
                    {
                        //
                        // If we were able to 
                        //
                        lResult = PSNRET_MESSAGEHANDLED;
                    }
                }
            }
        }
    }
    return lResult;
}

void CCameraSelectionPage::InitializeVideoCamera(void)
{
    //
    // Make sure this is a video camera
    //
    if (m_pControllerWindow->m_DeviceTypeMode != CAcquisitionManagerControllerWindow::VideoMode)
    {
        return;
    }

    HRESULT             hr = S_OK;
    WIAVIDEO_STATE      VideoState = WIAVIDEO_NO_VIDEO;
    CSimpleStringWide   strImagesDirectory;

    if (m_pWiaVideo == NULL)
    {
        hr = CoCreateInstance(CLSID_WiaVideo, 
                              NULL, 
                              CLSCTX_INPROC_SERVER, 
                              IID_IWiaVideo,
                              (void**) &m_pWiaVideo);
    }

    //
    // No point continuing if we can't create the video interface
    //
    if (!m_pWiaVideo)
    {
        return;
    }

    if (hr == S_OK)
    {
        BOOL bSuccess = FALSE;
        
        //
        // Get the IMAGES_DIRECTORY property from the Wia Video Driver.
        //
        bSuccess = PropStorageHelpers::GetProperty(m_pControllerWindow->m_pWiaItemRoot, 
                                                   WIA_DPV_IMAGES_DIRECTORY, 
                                                   strImagesDirectory);

        if (!bSuccess)
        {
            hr = E_FAIL;
        }
    }

    if (hr == S_OK)
    {
        //
        // Get the current state of the WiaVideo object.  If we just created it
        // then the state will be NO_VIDEO, otherwise, it could already be previewing video,
        // in which case we shouldn't do anything.
        //
        hr = m_pWiaVideo->GetCurrentState(&VideoState);

        if (VideoState == WIAVIDEO_NO_VIDEO)
        {
            //
            // Set the directory we want to save our images to.  We got the image directory
            // from the Wia Video Driver IMAGES_DIRECTORY property
            //
            if (hr == S_OK)
            {
                hr = m_pWiaVideo->put_ImagesDirectory(CSimpleBStr(strImagesDirectory));
            }
    
            //
            // Create the video preview as a child of the IDC_VIDSEL_PREVIEW dialog item
            // and automatically begin playback after creating the preview.
            //
            if (hr == S_OK)
            {
                hr = m_pWiaVideo->CreateVideoByWiaDevID(
                                CSimpleBStr(m_pControllerWindow->m_pEventParameters->strDeviceID),
                                GetDlgItem(m_hWnd, IDC_VIDSEL_PREVIEW),
                                FALSE,
                                TRUE);
            }
        }
    }

    //
    // If there was a failure, tell the user
    //
    if (hr != S_OK)
    {
        CSimpleString( IDS_VIDEOPREVIEWUNAVAILABLE, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_VIDSEL_PREVIEW ) );

    }
    else
    {
        SetWindowText( GetDlgItem( m_hWnd, IDC_VIDSEL_PREVIEW ), TEXT("") );
    }
}


CWiaItem *CCameraSelectionPage::GetItemFromListByIndex( HWND hwndList, int nItem )
{
    LVITEM LvItem;
    ZeroMemory( &LvItem, sizeof(LvItem) );
    LvItem.iItem = nItem;
    LvItem.mask = LVIF_PARAM;
    if (ListView_GetItem( hwndList, &LvItem ))
    {
        return reinterpret_cast<CWiaItem*>(LvItem.lParam);
    }
    return NULL;
}

int CCameraSelectionPage::FindItemListIndex( HWND hwndList, CWiaItem *pWiaItem )
{
    for (int i=0;i<ListView_GetItemCount(hwndList);i++)
    {
        CWiaItem *pItem = GetItemFromListByIndex( hwndList, i );
        if (pWiaItem && pWiaItem == pItem)
            return i;
    }
    return -1;
}

void CCameraSelectionPage::DrawAnnotationIcons( HDC hDC, CWiaItem *pWiaItem, HBITMAP hBitmap )
{
    if (hDC && hBitmap && pWiaItem)
    {
        //
        // Create a memory DC
        //
        HDC hMemDC = CreateCompatibleDC( hDC );
        if (hMemDC)
        {
            //
            // Select the bitmap into the memory DC
            //
            HBITMAP hOldBitmap = SelectBitmap( hMemDC, hBitmap );

            //
            // Assume we will not neen an annotation icon
            //
            HICON hIcon = NULL;

            //
            // Figure out which icon to use
            //
            CAnnotationType AnnotationType = pWiaItem->AnnotationType();
            if (AnnotationAudio == AnnotationType)
            {
                hIcon = m_hIconAudioAnnotation;
            }
            else if (AnnotationUnknown == AnnotationType)
            {
                hIcon = m_hIconMiscellaneousAnnotation;
            }
            

            //
            // If we need an annotation icon
            //
            if (hIcon)
            {
                //
                // Get the icon's dimensions
                //
                SIZE sizeIcon = {0};
                if (PrintScanUtil::GetIconSize( hIcon, sizeIcon ))
                {
                    //
                    // Get the bitmap's dimensions
                    //
                    SIZE sizeBitmap = {0};
                    if (PrintScanUtil::GetBitmapSize( hBitmap, sizeBitmap ))
                    {
                        //
                        // Set up a good margin for this icon, so it isn't right up against the edge
                        //
                        const int nMargin = 3;

                        //
                        // Draw the icon
                        //
                        DrawIconEx( hMemDC, sizeBitmap.cx-sizeIcon.cx-nMargin, sizeBitmap.cy-sizeIcon.cy-nMargin, hIcon, sizeIcon.cx, sizeIcon.cy, 0, NULL, DI_NORMAL );
                    }

                }

            }

            //
            // Restore the old bitmap and delete the DC
            //
            SelectBitmap( hMemDC, hOldBitmap );
            DeleteDC(hMemDC);
        }
    }
}

int CCameraSelectionPage::AddThumbnailToListViewImageList( HWND hwndList, CWiaItem *pWiaItem, int nIndex )
{
    WIA_PUSH_FUNCTION((TEXT("CCameraSelectionPage::AddThumbnailToListViewImageList")));

    //
    // Assume we have the default thumbnail.  If there are any problems, this is what we will use.
    //
    int nImageListIndex = m_nDefaultThumbnailImageListIndex;

    //
    // Make sure we have a valid item
    //
    if (pWiaItem)
    {
        //
        // We need a DC to create and scale the thumbnail
        //
        HDC hDC = GetDC(m_hWnd);
        if (hDC)
        {
            //
            // Is there a valid thumbnail for this image?  If so, prepare it.
            //
            HBITMAP hThumbnail = pWiaItem->CreateThumbnailBitmap( m_hWnd, m_GdiPlusHelper, m_pControllerWindow->m_sizeThumbnails.cx, m_pControllerWindow->m_sizeThumbnails.cy );
            if (hThumbnail)
            {
                //
                // Draw any annotation icons
                //
                DrawAnnotationIcons( hDC, pWiaItem, hThumbnail );

                //
                // Find out if we already have a thumbnail in the list
                // If we do have a thumbnail, we want to replace it in the image list
                //
                LVITEM LvItem = {0};
                LvItem.mask = LVIF_IMAGE;
                LvItem.iItem = nIndex;
                if (ListView_GetItem( hwndList, &LvItem ) && LvItem.iImage != m_nDefaultThumbnailImageListIndex)
                {
                    //
                    // Get the image list
                    //
                    HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_NORMAL );
                    if (hImageList)
                    {
                        //
                        // Replace the image and save the index
                        //
                        if (ImageList_Replace( hImageList, LvItem.iImage, hThumbnail, NULL ))
                        {
                            nImageListIndex = LvItem.iImage;
                        }
                    }
                }
                else
                {
                    //
                    // Get the image list
                    //
                    HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_NORMAL );
                    if (hImageList)
                    {
                        //
                        // Add this image to the listview's imagelist and save the index
                        //
                        nImageListIndex = ImageList_Add( hImageList, hThumbnail, NULL );
                    }
                }

                //
                // Delete the thumbnail to prevent a leak
                //
                DeleteBitmap(hThumbnail);
            }

            //
            // Release the client DC
            //
            ReleaseDC( m_hWnd, hDC );
        }
    }

    //
    // Return the index of the image in the imagelist
    //
    return nImageListIndex;
}

int CCameraSelectionPage::AddItem( HWND hwndList, CWiaItem *pWiaItem, bool bEnsureVisible )
{
    //
    // Prevent handling of change notifications while we do this.
    //
    m_nProgrammaticSetting++;
    int nResult = -1;
    if (pWiaItem && hwndList)
    {
        //
        // Find out where we are going to insert this image
        //
        int nIndex = ListView_GetItemCount( hwndList );

        //
        // Add or replace the thumbnail
        //
        int nImageListIndex = AddThumbnailToListViewImageList( hwndList, pWiaItem, nIndex );
        if (nImageListIndex >= 0)
        {
            //
            // Get the item ready to insert and insert it
            //
            LVITEM lvItem = {0};
            lvItem.iItem = nIndex;
            lvItem.mask = LVIF_IMAGE|LVIF_PARAM|LVIF_STATE|LVIF_GROUPID;
            lvItem.iImage = nImageListIndex;
            lvItem.lParam = reinterpret_cast<LPARAM>(pWiaItem);
            lvItem.state = !nIndex ? LVIS_SELECTED|LVIS_FOCUSED : 0;
            lvItem.iGroupId = m_GroupInfoList.GetGroupId(pWiaItem,hwndList);
            nResult = ListView_InsertItem( hwndList, &lvItem );
            if (nResult >= 0)
            {
                //
                // Set the check if the item is selected
                //
                ListView_SetCheckState( hwndList, nIndex, pWiaItem->SelectedForDownload() );

                //
                // Ensure the item is visible, if necessary
                //
                if (bEnsureVisible)
                {
                    ListView_EnsureVisible( hwndList, nResult, FALSE );
                }
            }
        }
    }
    //
    // Enable handling of change notifications
    //
    m_nProgrammaticSetting--;
    return nResult;
}

void CCameraSelectionPage::AddEnumeratedItems( HWND hwndList, CWiaItem *pFirstItem )
{
    //
    // First, enumerate all of the images on this level and add them
    //
    CWiaItem *pCurrItem = pFirstItem;
    while (pCurrItem)
    {
        if (pCurrItem->IsDownloadableItemType())
        {
            AddItem( hwndList, pCurrItem );
        }
        pCurrItem = pCurrItem->Next();
    }

    //
    // Now look for children, and recursively add them
    //
    pCurrItem = pFirstItem;
    while (pCurrItem)
    {
        AddEnumeratedItems( hwndList, pCurrItem->Children() );
        pCurrItem = pCurrItem->Next();
    }
}

void CCameraSelectionPage::PopulateListView(void)
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS );
    if (hwndList)
    {
        //
        // Tell the window not to redraw while we add these items
        //
        SendMessage( hwndList, WM_SETREDRAW, FALSE, 0 );

        //
        // Begin recursively adding all of the items
        //
        AddEnumeratedItems( hwndList, m_pControllerWindow->m_WiaItemList.Root() );

        //
        // If we have any folders, allow group view
        //
        if (m_GroupInfoList.Size() > 1)
        {
            ListView_EnableGroupView( hwndList, TRUE );
        }

        //
        // Tell the window to redraw now, because we are done.  Invalidate the window, in case it is visible
        //
        SendMessage( hwndList, WM_SETREDRAW, TRUE, 0 );
        InvalidateRect( hwndList, NULL, FALSE );
    }
}


int CCameraSelectionPage::GetSelectionIndices( CSimpleDynamicArray<int> &aIndices )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS );
    if (!hwndList)
        return(0);
    int iCount = ListView_GetItemCount(hwndList);
    for (int i=0;i<iCount;i++)
        if (ListView_GetItemState(hwndList,i,LVIS_SELECTED) & LVIS_SELECTED)
            aIndices.Append(i);
    return(aIndices.Size());
}

// This function gets called in response to an image downloading.  We're only interested in items being deleted.
void CCameraSelectionPage::OnNotifyDownloadImage( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    CDownloadImagesThreadNotifyMessage *pDownloadImageThreadNotifyMessage = dynamic_cast<CDownloadImagesThreadNotifyMessage*>(pThreadNotificationMessage);
    if (pDownloadImageThreadNotifyMessage && m_pControllerWindow)
    {
        switch (pDownloadImageThreadNotifyMessage->Status())
        {
        case CDownloadImagesThreadNotifyMessage::End:
            {
                switch (pDownloadImageThreadNotifyMessage->Operation())
                {

                case CDownloadImagesThreadNotifyMessage::DownloadAll:
                    {
                        //
                        // Make sure the download was successful, and not cancelled
                        //
                        if (S_OK == pDownloadImageThreadNotifyMessage->hr())
                        {
                            //
                            // Mark each successfully downloaded image as not-downloadable, and clear its selection state
                            //
                            for (int i=0;i<pDownloadImageThreadNotifyMessage->DownloadedFileInformation().Size();i++)
                            {
                                CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadImageThreadNotifyMessage->DownloadedFileInformation()[i].Cookie() );
                                if (pWiaItem)
                                {
                                    pWiaItem->SelectedForDownload( false );
                                    int nItem = FindItemListIndex( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem );
                                    if (nItem >= 0)
                                    {
                                        ListView_SetCheckState( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), nItem, FALSE );
                                    }
                                }
                            }
                        }
                    }
                    break;
                }
            }
            break;
        }
    }
}


// This function gets called in response to a thumbnail download finishing.
void CCameraSelectionPage::OnNotifyDownloadThumbnail( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    CDownloadThumbnailsThreadNotifyMessage *pDownloadThumbnailsThreadNotifyMessage= dynamic_cast<CDownloadThumbnailsThreadNotifyMessage*>(pThreadNotificationMessage);
    if (pDownloadThumbnailsThreadNotifyMessage)
    {
        switch (pDownloadThumbnailsThreadNotifyMessage->Status())
        {
        case CDownloadThumbnailsThreadNotifyMessage::End:
            {
                switch (pDownloadThumbnailsThreadNotifyMessage->Operation())
                {
                case CDownloadThumbnailsThreadNotifyMessage::DownloadThumbnail:
                    {
                        // Find the item in the list
                        CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadThumbnailsThreadNotifyMessage->Cookie() );
                        if (pWiaItem)
                        {
                            int nItem = FindItemListIndex( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem );
                            if (nItem >= 0)
                            {
                                int nImageListIndex = AddThumbnailToListViewImageList( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem, nItem );
                                if (nImageListIndex >= 0)
                                {
                                    LVITEM LvItem;
                                    ZeroMemory( &LvItem, sizeof(LvItem) );
                                    LvItem.iItem = nItem;
                                    LvItem.mask = LVIF_IMAGE;
                                    LvItem.iImage = nImageListIndex;
                                    ListView_SetItem( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), &LvItem );

                                    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
                                    {
                                        UpdateControls();
                                    }
                                }
                            }
                        }
                    }
                    break;
                }
            }
            break;
        }
    }
}

LRESULT CCameraSelectionPage::OnThumbnailListSelChange( WPARAM wParam, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CCameraSelectionPage::OnThumbnailListSelChange"));
    if (!m_nProgrammaticSetting)
    {
        NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW*>(lParam);
        if (pNmListView)
        {
            WIA_TRACE((TEXT("pNmListView->uChanged: %08X, pNmListView->uOldState: %08X, pNmListView->uNewState: %08X"), pNmListView->uChanged, pNmListView->uOldState, pNmListView->uNewState ));
            //
            // If this is a check state change
            //
            if ((pNmListView->uChanged & LVIF_STATE) && ((pNmListView->uOldState&LVIS_STATEIMAGEMASK) ^ (pNmListView->uNewState&LVIS_STATEIMAGEMASK)))
            {
                //
                // Get the item * from the LVITEM structure
                //
                CWiaItem *pWiaItem = reinterpret_cast<CWiaItem *>(pNmListView->lParam);
                if (pWiaItem)
                {
                    //
                    // Set selected flag in the item
                    //
                    pWiaItem->SelectedForDownload( IsStateChecked(pNmListView->uNewState) );

                    //
                    // If this is the current page, update the control state
                    //
                    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
                    {
                        UpdateControls();
                    }
                }
            }
            else if ((pNmListView->uChanged & LVIF_STATE) && ((pNmListView->uOldState&LVIS_SELECTED) ^ (pNmListView->uNewState&LVIS_SELECTED)))
            {
                //
                // If this is the current page, update the control state
                //
                if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
                {
                    UpdateControls();
                }
            }
        }
    }
    return 0;
}

void CCameraSelectionPage::OnProperties( WPARAM, LPARAM )
{
    CSimpleDynamicArray<int> aSelIndices;
    if (GetSelectionIndices( aSelIndices ))
    {
        if (aSelIndices.Size() == 1)
        {
            CWiaItem *pWiaItem = GetItemFromListByIndex( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), aSelIndices[0]);
            if (pWiaItem && pWiaItem->WiaItem())
            {
                m_pControllerWindow->m_pThreadMessageQueue->Pause();
                HRESULT hr = WiaUiUtil::SystemPropertySheet( g_hInstance, m_hWnd, pWiaItem->WiaItem(), CSimpleString(IDS_ADVANCEDPROPERTIES, g_hInstance) );
                m_pControllerWindow->m_pThreadMessageQueue->Resume();

                if (FAILED(hr))
                {
                    CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_PROPERTY_SHEET_ERROR, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONINFORMATION );
                }
            }
        }
    }
}

void CCameraSelectionPage::OnSelectAll( WPARAM, LPARAM )
{
    HWND hwndList = GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS);
    if (hwndList)
    {
        ListView_SetCheckState( hwndList, -1, TRUE );
    }
}

void CCameraSelectionPage::OnClearAll( WPARAM, LPARAM )
{
    HWND hwndList = GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS);
    if (hwndList)
    {
        ListView_SetCheckState( hwndList, -1, FALSE );
    }
}

LRESULT CCameraSelectionPage::OnThumbnailListKeyDown( WPARAM, LPARAM lParam )
{
    NMLVKEYDOWN *pNmLvKeyDown = reinterpret_cast<NMLVKEYDOWN*>(lParam);
    bool bControl = (GetKeyState(VK_CONTROL) & 0x8000) != 0;
    bool bShift = (GetKeyState(VK_SHIFT) & 0x8000) != 0;
    bool bAlt = (GetKeyState(VK_MENU) & 0x8000) != 0;
    if (pNmLvKeyDown->wVKey == TEXT('A') && bControl && !bShift && !bAlt)
    {
        SendMessage( m_hWnd, WM_COMMAND, MAKEWPARAM(IDC_CAMSEL_SELECT_ALL,0), 0 );
    }
#if defined(VAISHALEE_LETS_ME_PUT_DELETE_IN)
    else if (VK_DELETE == pNmLvKeyDown->wVKey && !bAlt && !bControl && !bShift)
    {
        SendMessage( m_hWnd, WM_COMMAND, MAKEWPARAM(IDC_CAMSEL_DELETE,0), 0 );
    }
#endif
    return 0;
}


void CCameraSelectionPage::OnTakePicture( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCameraSelectionPage::OnTakePicture")));

    if (m_pControllerWindow->m_bTakePictureIsSupported)
    {
        CWaitCursor wc;

        //
        // Tell the user we are taking a picture
        //
        CSimpleString( IDS_TAKING_PICTURE, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );

        HRESULT hr = S_OK;

        //
        // If we are not a video camera, just tell the device to snap a picture
        //
        if (m_pControllerWindow->m_DeviceTypeMode == CAcquisitionManagerControllerWindow::CameraMode)
        {
            CComPtr<IWiaItem> pNewWiaItem;
            hr = m_pControllerWindow->m_pWiaItemRoot->DeviceCommand(0,&WIA_CMD_TAKE_PICTURE,&pNewWiaItem);
        }
        else if (m_pWiaVideo)
        {
            //
            // Take the picture
            //
            BSTR bstrNewImageFileName = NULL;
            hr = m_pWiaVideo->TakePicture(&bstrNewImageFileName);
            if (hr == S_OK)
            {
                //
                // Succeeded in taking the picture, setting the LAST_PICTURE_TAKEN property
                // on the video driver to create a new item.
                //
                PROPVARIANT pv = {0};
                PropVariantInit(&pv);

                pv.vt       = VT_BSTR;
                pv.bstrVal  = bstrNewImageFileName;
                BOOL bSuccess = PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPV_LAST_PICTURE_TAKEN, pv );
                if (!bSuccess)
                {
                    hr = E_FAIL;
                    WIA_PRINTHRESULT((hr,TEXT("PropStorageHelpers::SetProperty failed")));
                }

                //
                // Note that this will free the bstrNewImageFileName returned to
                // us by WiaVideo
                //
                PropVariantClear(&pv);
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("m_pWiaVideo->TakePicture failed")));
            }
        }

        //
        // Clear the status
        //
        if (SUCCEEDED(hr))
        {
            SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ), TEXT("") );
        }
        else
        {
            MessageBeep(MB_ICONEXCLAMATION);
            CSimpleString( IDS_UNABLE_TO_TAKE_PICTURE, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );
            WIA_PRINTHRESULT((hr,TEXT("Take picture failed")));
        }
    }
}


void CCameraSelectionPage::OnRotate( WPARAM wParam, LPARAM )
{
    //
    // This could take a while for a lot of images, especially since we don't cache DIBs,
    // so we'll display an hourglass cursor here.
    //
    CWaitCursor wc;

    bool bAtLeastOneWasSuccessful = false;
    bool bAtLeastOneWasInitialized = false;
    CSimpleDynamicArray<int> aIndices;
    if (CCameraSelectionPage::GetSelectionIndices( aIndices ))
    {
        for (int i=0;i<aIndices.Size();i++)
        {
            CWiaItem *pWiaItem = GetItemFromListByIndex( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), aIndices[i] );
            if (pWiaItem)
            {
                if (pWiaItem->RotationEnabled(true))
                {
                    bool bRotateRight = true;
                    if (IDC_CAMSEL_ROTATE_LEFT == LOWORD(wParam))
                    {
                        bRotateRight = false;
                    }
                    pWiaItem->Rotate(bRotateRight);
                    int nImageListIndex = AddThumbnailToListViewImageList( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), pWiaItem, aIndices[i] );

                    LVITEM LvItem;
                    ZeroMemory( &LvItem, sizeof(LvItem) );
                    LvItem.iItem = aIndices[i];
                    LvItem.mask = LVIF_IMAGE;
                    LvItem.iImage = nImageListIndex;
                    ListView_SetItem( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), &LvItem );
                    bAtLeastOneWasSuccessful = true;
                }
                //
                // We don't want to warn the user about failure to rotate images for which we haven't downloaded the preferred format
                //
                else if (pWiaItem->DefaultFormat() == IID_NULL)
                {
                    bAtLeastOneWasSuccessful = true;
                }
                else
                {
                    bAtLeastOneWasInitialized = true;
                }
            }
        }
        //
        // If not one picture could be rotated AND at least one had already been initialized, warn the user
        //
        if (!bAtLeastOneWasSuccessful && bAtLeastOneWasInitialized)
        {
            //
            // Beep and tell the user
            //
            MessageBeep(MB_ICONEXCLAMATION);
            CSimpleString( IDS_UNABLETOROTATE, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_CAMSEL_STATUS ) );
        }
        //
        // Repaint the items
        //
        ListView_RedrawItems( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), aIndices[0], aIndices[aIndices.Size()-1] );

        //
        // Force an immediate update
        //
        UpdateWindow( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS) );
    }
}

LRESULT CCameraSelectionPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonFirstPage::OnEventNotification") ));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        //
        // Handle the deleted item event
        //
        if (pEventMessage->EventId() == WIA_EVENT_ITEM_DELETED)
        {
            //
            // Try to find this item in the item list
            //
            CWiaItem *pWiaItem = m_pControllerWindow->FindItemByName( pEventMessage->FullItemName() );
            if (pWiaItem)
            {
                //
                // Find the item in the listview and delete it from the listview
                //
                int nItem = FindItemListIndex( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem );
                if (nItem >= 0)
                {
                    ListView_DeleteItem( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), nItem );
                }
            }

            if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
            {
                UpdateControls();
            }
        }
        else if (pEventMessage->EventId() == WIA_EVENT_ITEM_CREATED)
        {
            //
            // Make sure we have a valid controller window
            //
            //
            // Find the new item
            //
            CWiaItem *pWiaItem = m_pControllerWindow->FindItemByName( pEventMessage->FullItemName() );
            if (pWiaItem)
            {
                //
                // If this is the current page, select the image.
                //
                if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
                {
                    pWiaItem->SelectedForDownload(true);
                }

                //
                // Make sure it isn't already in the list
                //
                if (FindItemListIndex( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem ) < 0)
                {
                    //
                    // Add it to the list view
                    //
                    AddItem( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), pWiaItem, true );
                }
            }

            if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
            {
                UpdateControls();
            }
        }

        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}


void CCameraSelectionPage::OnDelete( WPARAM, LPARAM )
{
    int nSelCount = ListView_GetSelectedCount( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ) );
    if (nSelCount)
    {
        if (m_pControllerWindow->CanSomeSelectedImagesBeDeleted())
        {
            if (CMessageBoxEx::IDMBEX_YES == CMessageBoxEx::MessageBox( m_hWnd, CSimpleString(IDS_CONFIRMDELETE,g_hInstance), CSimpleString(IDS_ERROR_TITLE,g_hInstance), CMessageBoxEx::MBEX_ICONQUESTION|CMessageBoxEx::MBEX_YESNO|CMessageBoxEx::MBEX_DEFBUTTON2))
            {
                m_pControllerWindow->DeleteSelectedImages();
            }
        }
    }
}

LRESULT CCameraSelectionPage::OnGetToolTipDispInfo( WPARAM wParam, LPARAM lParam )
{
    TOOLTIPTEXT *pToolTipText = reinterpret_cast<TOOLTIPTEXT*>(lParam);
    if (pToolTipText)
    {

        switch (pToolTipText->hdr.idFrom)
        {
        case IDC_CAMSEL_ROTATE_RIGHT:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_ROTATE_RIGHT);
            break;
        case IDC_CAMSEL_ROTATE_LEFT:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_ROTATE_LEFT);
            break;
        case IDC_CAMSEL_PROPERTIES:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_PROPERTIES);
            break;
        case IDC_CAMSEL_TAKE_PICTURE:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_TAKE_PICTURE);
                break;
        case IDC_CAMSEL_CLEAR_ALL:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_CLEAR_ALL);
            break;
        case IDC_CAMSEL_SELECT_ALL:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_CAMSEL_TOOLTIP_SELECT_ALL);
            break;
        }
    }
    return 0;
}

void CCameraSelectionPage::RepaintAllThumbnails()
{
    //
    // This could take a while for a lot of images, especially since we don't cache DIBs,
    // so we'll display an hourglass cursor here.
    //
    CWaitCursor wc;
    for (int i=0;i<ListView_GetItemCount(GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS));i++)
    {
        CWiaItem *pWiaItem = GetItemFromListByIndex( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), i );
        if (pWiaItem)
        {
            int nImageListIndex = AddThumbnailToListViewImageList( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), pWiaItem, i );
            if (nImageListIndex >= 0)
            {
                LVITEM LvItem = {0};
                LvItem.iItem = i;
                LvItem.mask = LVIF_IMAGE;
                LvItem.iImage = nImageListIndex;
                ListView_SetItem( GetDlgItem(m_hWnd,IDC_CAMSEL_THUMBNAILS), &LvItem );
            }
        }
    }
    UpdateWindow( m_hWnd );
}


LRESULT CCameraSelectionPage::OnSysColorChange( WPARAM wParam, LPARAM lParam )
{
    SendDlgItemMessage( m_hWnd, IDC_CAMSEL_THUMBNAILS, WM_SYSCOLORCHANGE, wParam, lParam );
    SendDlgItemMessage( m_hWnd, IDC_ACTION_BUTTON_BAR, WM_SYSCOLORCHANGE, wParam, lParam );
    SendDlgItemMessage( m_hWnd, IDC_SELECTION_BUTTON_BAR, WM_SYSCOLORCHANGE, wParam, lParam );
    SendDlgItemMessage( m_hWnd, IDC_TAKEPICTURE_BUTTON_BAR, WM_SYSCOLORCHANGE, wParam, lParam );
    m_CameraSelectionButtonBarBitmapInfo.ReloadAndReplaceBitmap();
    m_CameraTakePictureButtonBarBitmapInfo.ReloadAndReplaceBitmap();
    m_CameraActionButtonBarBitmapInfo.ReloadAndReplaceBitmap();
    RepaintAllThumbnails();
    return 0;
}

LRESULT CCameraSelectionPage::OnThemeChanged( WPARAM wParam, LPARAM lParam )
{
    SendDlgItemMessage( m_hWnd, IDC_CAMSEL_THUMBNAILS, WM_THEMECHANGED, wParam, lParam );
    return 0;
}

LRESULT CCameraSelectionPage::OnSettingChange( WPARAM wParam, LPARAM lParam )
{
    //
    // Create a small image list, to prevent the checkbox state images from being resized in WM_SYSCOLORCHANGE
    //
    HIMAGELIST hImageListSmall = ImageList_Create( GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), ILC_COLOR24|ILC_MASK, 1, 1 );
    if (hImageListSmall)
    {
        HIMAGELIST hImgListOld = ListView_SetImageList( GetDlgItem( m_hWnd, IDC_CAMSEL_THUMBNAILS ), hImageListSmall, LVSIL_SMALL );
        if (hImgListOld)
        {
            ImageList_Destroy(hImgListOld);
        }
    }

    SendDlgItemMessage( m_hWnd, IDC_CAMSEL_THUMBNAILS, WM_SETTINGCHANGE, wParam, lParam );
    return 0;
}

LRESULT CCameraSelectionPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND( IDC_CAMSEL_SELECT_ALL, OnSelectAll );
        SC_HANDLE_COMMAND( IDC_CAMSEL_CLEAR_ALL, OnClearAll );
        SC_HANDLE_COMMAND( IDC_CAMSEL_PROPERTIES, OnProperties );
        SC_HANDLE_COMMAND( IDC_CAMSEL_ROTATE_RIGHT, OnRotate );
        SC_HANDLE_COMMAND( IDC_CAMSEL_ROTATE_LEFT, OnRotate );
        SC_HANDLE_COMMAND( IDC_CAMSEL_TAKE_PICTURE, OnTakePicture );
        SC_HANDLE_COMMAND( IDC_CAMSEL_DELETE, OnDelete );
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CCameraSelectionPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_TRANSLATEACCELERATOR,OnTranslateAccelerator);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(TTN_GETDISPINFO,OnGetToolTipDispInfo);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_ITEMCHANGED,IDC_CAMSEL_THUMBNAILS,OnThumbnailListSelChange);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_KEYDOWN,IDC_CAMSEL_THUMBNAILS,OnThumbnailListKeyDown);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CCameraSelectionPage::OnThreadNotification( WPARAM wParam, LPARAM lParam )
{
    WTM_BEGIN_THREAD_NOTIFY_MESSAGE_HANDLERS()
    {
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_DOWNLOADTHUMBNAIL, OnNotifyDownloadThumbnail );
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_DOWNLOADIMAGE, OnNotifyDownloadImage );
    }
    WTM_END_THREAD_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCameraSelectionPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCameraSelectionPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_SHOWWINDOW, OnShowWindow );
        SC_HANDLE_DIALOG_MESSAGE( WM_TIMER, OnTimer );
        SC_HANDLE_DIALOG_MESSAGE( WM_SYSCOLORCHANGE, OnSysColorChange );
        SC_HANDLE_DIALOG_MESSAGE( WM_THEMECHANGED, OnThemeChanged );
        SC_HANDLE_DIALOG_MESSAGE( WM_SETTINGCHANGE, OnSettingChange );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nThreadNotificationMessage, OnThreadNotification );
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comfin.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMFIN.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Transfer page.  Gets the destination path and filename.
 *
 *******************************************************************************/
#ifndef __COMFIN_H_INCLUDED
#define __COMFIN_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"

class CCommonFinishPage
{
private:
    // Private data
    HWND                                  m_hWnd;
    CAcquisitionManagerControllerWindow  *m_pControllerWindow;
    HFONT                                 m_hBigTitleFont;
    UINT                                  m_nWiaEventMessage;
    CSimpleString                         m_strSiteUrl;

private:
    // No implementation
    CCommonFinishPage(void);
    CCommonFinishPage( const CCommonFinishPage & );
    CCommonFinishPage &operator=( const CCommonFinishPage & );

private:
    // Constructor and destructor
    explicit CCommonFinishPage( HWND hWnd );
    ~CCommonFinishPage(void);

    void OpenLocalStorage();
    void OpenRemoteStorage();
    HRESULT GetManifestInfo( IXMLDOMDocument *pXMLDOMDocumentManifest, CSimpleString &strSiteName, CSimpleString &strSiteURL );

private:
    LRESULT OnEventNotification( WPARAM, LPARAM );

    // WM_NOTIFY handlers
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnWizFinish( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnHyperlinkClick( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __COMFIN_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comdelp.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMDELP.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Delete progress page.  Displays the thumbnail and download progress.
 *
 *******************************************************************************/
#ifndef __COMDELP_H_INCLUDED
#define __COMDELP_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "gphelper.h"

class CCommonDeleteProgressPage
{
private:
    // Private data
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    int                                  m_nPictureCount;
    HANDLE                               m_hCancelDeleteEvent;
    CGdiPlusHelper                       m_GdiPlusHelper;
    UINT                                 m_nThreadNotificationMessage;
    HPROPSHEETPAGE                       m_hSwitchToNextPage;
    bool                                 m_bQueryingUser;
    bool                                 m_bDeleteCancelled;

private:
    // No implementation
    CCommonDeleteProgressPage(void);
    CCommonDeleteProgressPage( const CCommonDeleteProgressPage & );
    CCommonDeleteProgressPage &operator=( const CCommonDeleteProgressPage & );

private:
    // Constructor and destructor
    explicit CCommonDeleteProgressPage( HWND hWnd );
    ~CCommonDeleteProgressPage(void);

private:
    // Helpers
    void UpdatePercentComplete( int nPercent, bool bUploading );
    void UpdateCurrentPicture( int nPicture );
    void UpdateThumbnail( HBITMAP hBitmap, CWiaItem *pWiaItem );
    bool QueryCancel(void);

private:
    // WM_COMMAND handlers

    // Thread Message handlers
    void OnNotifyDeleteImage( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage );

    // WM_NOTIFY handlers
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnKillActive( WPARAM, LPARAM );
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnReset( WPARAM, LPARAM );
    LRESULT OnQueryCancel( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    LRESULT OnQueryEndSession( WPARAM, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __COMDELP_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comfin.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMFIN.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Transfer page.  Gets the destination path and filename.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "comfin.h"
#include "simcrack.h"
#include "resource.h"
#include "svselfil.h"
#include "simrect.h"
#include "movewnd.h"
#include "runnpwiz.h"
#include "mboxex.h"
#include <wininet.h>

#define STR_LOCAL_LINK_ID     TEXT("LocalLinkId")
#define STR_REMOTE_LINK_ID    TEXT("RemoteLinkId")
#define STR_DETAILED_DOWNLOAD_ERROR_ID TEXT("DetailedDownloadErrorId")
#define STR_DETAILED_UPLOAD_ERROR_ID TEXT("DetailedUploadErrorId")

#define ID_FINISHBUTTON 0x3025

//
// Sole constructor
//
CCommonFinishPage::CCommonFinishPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE)),
    m_pControllerWindow(NULL),
    m_hBigTitleFont(NULL)
{
}

//
// Destructor
//
CCommonFinishPage::~CCommonFinishPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
}


HRESULT CCommonFinishPage::GetManifestInfo( IXMLDOMDocument *pXMLDOMDocumentManifest, CSimpleString &strSiteName, CSimpleString &strSiteURL )
{
    WCHAR wszSiteName[MAX_PATH] = {0};
    WCHAR wszSiteURL[INTERNET_MAX_URL_LENGTH] = {0};
    
    HRESULT hr;
    if (pXMLDOMDocumentManifest)
    {
        //
        // lets crack the manifest and work out whats what with the publish that
        // we just performed.
        //
        CComPtr<IXMLDOMNode> pXMLDOMNodeUploadInfo;
        hr = pXMLDOMDocumentManifest->selectSingleNode( L"transfermanifest/uploadinfo", &pXMLDOMNodeUploadInfo );
        if (S_OK == hr)
        {
            //
            // lets pick up the site name from the manifest, this will be an attribute on the
            // upload info element.
            //
            CComPtr<IXMLDOMElement> pXMLDOMElement;
            hr = pXMLDOMNodeUploadInfo->QueryInterface( IID_IXMLDOMElement, (void**)&pXMLDOMElement );
            if (SUCCEEDED(hr))
            {
                VARIANT var = {0};
                hr = pXMLDOMElement->getAttribute( L"friendlyname", &var );
                if (S_OK == hr)
                {
                    StrCpyNW( wszSiteName, var.bstrVal, ARRAYSIZE(wszSiteName) );
                    VariantClear(&var);
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("pXMLDOMElement->getAttribute( \"friendlyname\" ) failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("pXMLDOMNodeUploadInfo->QueryInterface( IID_IXMLDOMElement ) failed on line %d"), __LINE__ ));
            }

            //
            // lets now try and pick up the site URL node, this is going to either
            // be the file target, or HTML UI element.
            //
            CComPtr<IXMLDOMNode> pXMLDOMNodeURL;
            hr = pXMLDOMNodeUploadInfo->selectSingleNode( L"htmlui", &pXMLDOMNodeURL);

            if (S_FALSE == hr)
            {
                WIA_PRINTHRESULT((hr,TEXT("pXMLDOMDocumentManifest->selectSingleNode \"htmlui\" failed")));
                hr = pXMLDOMNodeUploadInfo->selectSingleNode( L"netplace", &pXMLDOMNodeURL);
            }

            if (S_FALSE == hr)
            {
                WIA_PRINTHRESULT((hr,TEXT("pXMLDOMDocumentManifest->selectSingleNode \"target\" failed")));
                hr = pXMLDOMNodeUploadInfo->selectSingleNode( L"target", &pXMLDOMNodeURL);
            }

            if (S_OK == hr)
            {
                CComPtr<IXMLDOMElement> pXMLDOMElement;
                hr = pXMLDOMNodeURL->QueryInterface( IID_IXMLDOMElement, (void**)&pXMLDOMElement );
                if (SUCCEEDED(hr))
                {                                                           
                    
                    //
                    // attempt to read the HREF attribute, if that is defined
                    // the we use it, otherwise (for compatibility with B2, we need
                    // to get the node text and use that instead).
                    //
                    VARIANT var = {0};
                    hr = pXMLDOMElement->getAttribute( L"href", &var );
                    if (hr != S_OK)
                    {
                        hr = pXMLDOMElement->get_nodeTypedValue( &var );
                    }

                    if (S_OK == hr)
                    {
                        StrCpyNW(wszSiteURL, var.bstrVal, ARRAYSIZE(wszSiteURL) );
                        VariantClear(&var);
                    }
                    else
                    {
                        WIA_PRINTHRESULT((hr,TEXT("pXMLDOMElement->getAttribute or pXMLDOMElement->get_nodeTypedValue failed")));
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("pXMLDOMNodeUploadInfo->QueryInterface( IID_IXMLDOMElement ) failed on line %d"), __LINE__ ));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("pXMLDOMDocumentManifest->selectSingleNode \"target\" failed")));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("pXMLDOMDocumentManifest->selectSingleNode \"transfermanifest\\uploadinfo\" failed")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("pXMLDOMDocumentManifest is NULL")));
        hr = E_INVALIDARG;
    }

    strSiteName = CSimpleStringConvert::NaturalString( CSimpleStringWide( wszSiteName ) );
    strSiteURL = CSimpleStringConvert::NaturalString( CSimpleStringWide( wszSiteURL ) );

    return hr;
}


LRESULT CCommonFinishPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    //
    // Set the font size for the title
    //
    m_hBigTitleFont = WiaUiUtil::CreateFontWithPointSizeFromWindow( GetDlgItem(m_hWnd,IDC_FINISH_TITLE), 14, false, false );
    if (m_hBigTitleFont)
    {
        SendDlgItemMessage( m_hWnd, IDC_FINISH_TITLE, WM_SETFONT, reinterpret_cast<WPARAM>(m_hBigTitleFont), MAKELPARAM(TRUE,0));
    }


    return 0;
}


LRESULT CCommonFinishPage::OnWizFinish( WPARAM, LPARAM )
{
    LRESULT nResult = FALSE;

    //
    // Open the shell folder containing the images
    //
    OpenLocalStorage();
    return nResult;
}

/*

 From finish page:
 
 if (error_occurred)
 {
    if (no_images)
    {
        goto SelectionPage
    }
    else
    {
        goto DestinationPage
    }
 }
 else
 {
    goto UploadQueryPage
 }

*/

//
// handler for PSN_WIZBACK
//
LRESULT CCommonFinishPage::OnWizBack( WPARAM, LPARAM )
{
    //
    // If no errors occurred, go to the upload query page
    //
    HPROPSHEETPAGE hNextPage = NULL;
    if (S_OK==m_pControllerWindow->m_hrDownloadResult && !m_pControllerWindow->m_bDownloadCancelled)
    {
        hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nUploadQueryPageIndex );
    }
    else
    {
        if (m_pControllerWindow->GetSelectedImageCount())
        {
            hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nDestinationPageIndex );
        }
        else
        {
            hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nSelectionPageIndex );
        }
    }
    PropSheet_SetCurSel( GetParent(m_hWnd), hNextPage, -1 );
    return -1;
}

//
// handler for PSN_SETACTIVE
//
LRESULT CCommonFinishPage::OnSetActive( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION(TEXT("CCommonFinishPage::OnSetActive"));

    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    //
    // Assume we are displaying a success message
    //
    int nPageTitle = IDS_FINISH_SUCCESS_TITLE;

    //
    // Assume we failed for this message
    //
    int nFinishPrompt = IDS_FINISH_PROMPT_FAILURE;

    //
    // Only disable the back button if (a) we are disconnected and (b) we hit an error or were cancelled
    //
    if (m_pControllerWindow->m_bDisconnected && (S_OK != m_pControllerWindow->m_hrDownloadResult || m_pControllerWindow->m_bDownloadCancelled))
    {
        //
        // Basically, this disables the Cancel button.
        //
        PropSheet_CancelToClose( GetParent(m_hWnd) );
        
        //
        // Change the finish button to a close button
        //
        PropSheet_SetFinishText( GetParent(m_hWnd), CSimpleString( IDS_FINISH_TO_CLOSE_TITLE, g_hInstance ).String() );
        
        //
        // Disable back
        //
        PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_FINISH );

        //
        // Tell the user to use Close to close the wizard.
        //
        nFinishPrompt = IDS_FINISH_PROMPT_FAILURE_DISCONNECT;
    }
    else
    {
        //
        // Allow finish and back
        //
        PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_FINISH|PSWIZB_BACK );

    }


#if defined(DBG)
    //
    // Display statistics for debugging
    //
    WIA_TRACE((TEXT("m_pControllerWindow->m_DownloadedFileList.Size(): %d"), m_pControllerWindow->m_DownloadedFileInformationList.Size()));
    for (int i=0;i<m_pControllerWindow->m_DownloadedFileInformationList.Size();i++)
    {
        WIA_TRACE((TEXT("    m_pControllerWindow->m_DownloadedFileList[%d]==%s"), i, m_pControllerWindow->m_DownloadedFileInformationList[i].Filename().String()));
    }
    WIA_TRACE((TEXT("m_pControllerWindow->m_nFailedImagesCount: %d"), m_pControllerWindow->m_nFailedImagesCount ));
    WIA_TRACE((TEXT("m_pControllerWindow->m_strErrorMessage: %s"), m_pControllerWindow->m_strErrorMessage.String()));
    WIA_PRINTHRESULT((m_pControllerWindow->m_hrDownloadResult,TEXT("m_pControllerWindow->m_hrDownloadResult")));
    WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("m_pControllerWindow->m_hrUploadResult")));
    WIA_PRINTHRESULT((m_pControllerWindow->m_hrDeleteResult,TEXT("m_pControllerWindow->m_hrDeleteResult")));
#endif
    
    CSimpleString strStatusMessage;

    //
    // If the transfer succeeded, and the user didn't cancel
    //
    if (S_OK==m_pControllerWindow->m_hrDownloadResult && !m_pControllerWindow->m_bDownloadCancelled)
    {

        CSimpleString strSuccessfullyDownloaded;
        CSimpleString strSuccessfullyUploaded;
        CSimpleString strSuccessfullyDeleted;
        CSimpleString strHyperlinks;

        CSimpleString strLocalHyperlink;
        CSimpleString strRemoteHyperlink;

        int nSuccessCount = 0;


        //
        // If we have successfully transferred images, display the count and show the associated controls
        //
        if (m_pControllerWindow->m_DownloadedFileInformationList.Size())
        {
            //
            // Count up all of the "countable" files (we don't include attachments in the count)
            //
            for (int i=0;i<m_pControllerWindow->m_DownloadedFileInformationList.Size();i++)
            {
                if (m_pControllerWindow->m_DownloadedFileInformationList[i].IncludeInFileCount())
                {
                    nSuccessCount++;
                }
            }
            
            //
            // If we had any errors while deleting images, let the user know
            //
            if (m_pControllerWindow->m_bDeletePicturesIfSuccessful && FAILED(m_pControllerWindow->m_hrDeleteResult))
            {
                strSuccessfullyDeleted.LoadString( IDS_DELETION_FAILED, g_hInstance );
            }

            //
            // If we uploaded to the web, set the destination text
            //
            if (m_pControllerWindow->m_bUploadToWeb)
            {
                //
                // If we have a valid publishing wizard, get the manifest and hresult
                //
                if (m_pControllerWindow->m_pPublishingWizard)
                {
                    //
                    // Get the transfer manifest
                    //
                    CComPtr<IXMLDOMDocument> pXMLDOMDocumentManifest;
                    if (SUCCEEDED(m_pControllerWindow->m_pPublishingWizard->GetTransferManifest( &m_pControllerWindow->m_hrUploadResult, &pXMLDOMDocumentManifest )))
                    {
                        WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("m_pControllerWindow->m_hrUploadResult")));
                        
                        //
                        // Get the destination URL and friendly name out of the manifest
                        //
                        CSimpleString strUploadDestination;
                        if (S_OK==m_pControllerWindow->m_hrUploadResult && SUCCEEDED(CCommonFinishPage::GetManifestInfo( pXMLDOMDocumentManifest, strUploadDestination, m_strSiteUrl )))
                        {
                            //
                            // If we have a friendly name, use it.  Otherwise, use the URL
                            //
                            strRemoteHyperlink = strUploadDestination;
                            if (!strRemoteHyperlink.Length())
                            {
                                strRemoteHyperlink = m_strSiteUrl;
                            }
                        }
                    }
                }
                if (HRESULT_FROM_WIN32(ERROR_CANCELLED) == m_pControllerWindow->m_hrUploadResult)
                {
                    strSuccessfullyUploaded.LoadString( IDS_FINISH_UPLOAD_CANCELLED, g_hInstance );
                }
                else if (FAILED(m_pControllerWindow->m_hrUploadResult))
                {
                    strSuccessfullyUploaded.LoadString( IDS_FINISH_UPLOAD_FAILED, g_hInstance );
                }
            }

            if (nSuccessCount)
            {
                strLocalHyperlink = m_pControllerWindow->m_CurrentDownloadDestination.DisplayName(m_pControllerWindow->m_DestinationNameData).String();

                nFinishPrompt = IDS_FINISH_PROMPT_SUCCESS;
            }
        }


        int nCountOfSuccessfulDestinations = 0;

        if (strLocalHyperlink.Length() || strRemoteHyperlink.Length())
        {
            strHyperlinks += TEXT("\n");
        }

        //
        // Get the client rect for calculating the allowable size of the hyperlink string
        //
        RECT rcControl;
        GetClientRect( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ), &rcControl );

        if (strLocalHyperlink.Length())
        {
            nCountOfSuccessfulDestinations++;
            strHyperlinks += CSimpleString( IDS_FINISH_LOCAL_LINK_PROMPT, g_hInstance );
            strHyperlinks += TEXT("\n");
            strHyperlinks += TEXT("<a id=\"") STR_LOCAL_LINK_ID TEXT("\">");
            strHyperlinks += WiaUiUtil::TruncateTextToFitInRect( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ), strLocalHyperlink, rcControl, DT_END_ELLIPSIS|DT_NOPREFIX );
            strHyperlinks += TEXT("</a>");
        }
        if (strRemoteHyperlink.Length())
        {
            nCountOfSuccessfulDestinations++;
            strHyperlinks += TEXT("\n\n");
            strHyperlinks += CSimpleString( IDS_FINISH_REMOTE_LINK_PROMPT, g_hInstance );
            strHyperlinks += TEXT("\n");
            strHyperlinks += TEXT("<a id=\"")  STR_REMOTE_LINK_ID TEXT("\">");
            strHyperlinks += WiaUiUtil::TruncateTextToFitInRect( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ), strRemoteHyperlink, rcControl, DT_END_ELLIPSIS|DT_NOPREFIX );
            strHyperlinks += TEXT("</a>");
        }

        if (strHyperlinks.Length())
        {
            strHyperlinks += TEXT("\n");
        }

        //
        // Format the success string
        //
        if (nCountOfSuccessfulDestinations)
        {
            strSuccessfullyDownloaded.Format( IDS_SUCCESSFUL_DOWNLOAD, g_hInstance, nSuccessCount );
        }


        //
        // Append the individual status messages to the main status message
        //
        if (strSuccessfullyDownloaded.Length())
        {
            if (strStatusMessage.Length())
            {
                strStatusMessage += TEXT("\n");
            }
            strStatusMessage += strSuccessfullyDownloaded;
        }
        if (strHyperlinks.Length())
        {
            if (strStatusMessage.Length())
            {
                strStatusMessage += TEXT("\n");
            }
            strStatusMessage += strHyperlinks;
        }
        if (strSuccessfullyUploaded.Length())
        {
            if (strStatusMessage.Length())
            {
                strStatusMessage += TEXT("\n");
            }
            strStatusMessage += strSuccessfullyUploaded;
        }
        if (strSuccessfullyDeleted.Length())
        {
            if (strStatusMessage.Length())
            {
                strStatusMessage += TEXT("\n");
            }
            strStatusMessage += strSuccessfullyDeleted;
        }


        strStatusMessage.SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ) );
    }

    //
    // Else if there was an offline error
    //
    else if (WIA_ERROR_OFFLINE == m_pControllerWindow->m_hrDownloadResult || m_pControllerWindow->m_bDisconnected)
    {
        nPageTitle = IDS_FINISH_FAILURE_TITLE;

        (CSimpleString( IDS_DEVICE_DISCONNECTED, g_hInstance )).SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ) );
    }

    //
    // Else, if the user cancelled
    //
    else if (m_pControllerWindow->m_bDownloadCancelled)
    {
        nPageTitle = IDS_FINISH_FAILURE_TITLE;

        CSimpleString( IDS_USER_CANCELLED, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ) );
    }

    //
    // Otherwise there was an error
    //
    else
    {
        nPageTitle = IDS_FINISH_FAILURE_TITLE;

        CSimpleString( IDS_FINISH_ERROR_MESSAGE, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_STATUS ) );
    }

    //
    // Display the finish title message
    //
    CSimpleString( nPageTitle, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_TITLE ) );

    //
    // Display the finish prompt.
    //
    CSimpleString( nFinishPrompt, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_FINISH_PROMPT ) );
    

    //
    // Don't do anything on disconnect messages
    //
    m_pControllerWindow->m_OnDisconnect = 0;

    //
    // Get the focus off the stinkin' hyperlink control
    //
    PostMessage( m_hWnd, WM_NEXTDLGCTL, reinterpret_cast<WPARAM>(GetDlgItem(GetParent(m_hWnd),ID_FINISHBUTTON)), MAKELPARAM(TRUE,0));

    return 0;
}

LRESULT CCommonFinishPage::OnDestroy( WPARAM, LPARAM )
{
    if (m_hBigTitleFont)
    {
        DeleteObject(m_hBigTitleFont);
        m_hBigTitleFont = NULL;
    }
    return 0;
}

void CCommonFinishPage::OpenLocalStorage()
{
    CWaitCursor wc;

    //
    // Assume we do need to open the shell folder
    //
    bool bNeedToOpenShellFolder = true;

    //
    // Special case for CD burning--attempt to open the CD burner folder
    //
    if (CDestinationData( CSIDL_CDBURN_AREA ) == m_pControllerWindow->m_CurrentDownloadDestination)
    {
        //
        // Create the CD burner interface, so we can get the drive letter
        //
        CComPtr<ICDBurn> pCDBurn;
        HRESULT hr = CoCreateInstance( CLSID_CDBurn, NULL, CLSCTX_SERVER, IID_ICDBurn, (void**)&pCDBurn );
        if (SUCCEEDED(hr))
        {
            //
            // Get the drive letter of the available CD burner
            //
            WCHAR szDriveLetter[MAX_PATH];
            hr = pCDBurn->GetRecorderDriveLetter( szDriveLetter, ARRAYSIZE(szDriveLetter) );

            //
            // Make sure the function returned success and that we have a string
            //
            if (S_OK == hr && szDriveLetter[0] != L'\0')
            {
                //
                // Convert the drive to a TCHAR string
                //
                CSimpleString strShellLocation = CSimpleStringConvert::NaturalString(CSimpleStringWide(szDriveLetter));
                if (strShellLocation.Length())
                {
                    //
                    // Attempt to open the CD drive.  If we can't, we will fail gracefully and open the staging area
                    //
                    SHELLEXECUTEINFO ShellExecuteInfo = {0};
                    ShellExecuteInfo.cbSize = sizeof(ShellExecuteInfo);
                    ShellExecuteInfo.hwnd = m_hWnd;
                    ShellExecuteInfo.nShow = SW_SHOW;
                    ShellExecuteInfo.lpVerb = TEXT("open");
                    ShellExecuteInfo.lpFile = const_cast<LPTSTR>(strShellLocation.String());
                    if (ShellExecuteEx( &ShellExecuteInfo ))
                    {
                        bNeedToOpenShellFolder = false;
                    }
                    else
                    {
                        WIA_PRINTHRESULT((HRESULT_FROM_WIN32(GetLastError()),TEXT("ShellExecuteEx failed")));
                    }
                }
            }
        }
    }

    //
    // If we still need to open the shell folder, do so.
    //
    if (bNeedToOpenShellFolder)
    {
        CSimpleDynamicArray<CSimpleString> DownloadedFiles;
        if (SUCCEEDED(m_pControllerWindow->m_DownloadedFileInformationList.GetUniqueFiles(DownloadedFiles)))
        {
            OpenShellFolder::OpenShellFolderAndSelectFile( GetParent(m_hWnd), DownloadedFiles );
        }
    }
}


void CCommonFinishPage::OpenRemoteStorage()
{
    CWaitCursor wc;
    if (m_strSiteUrl.Length())
    {
        SHELLEXECUTEINFO ShellExecuteInfo = {0};
        ShellExecuteInfo.cbSize = sizeof(ShellExecuteInfo);
        ShellExecuteInfo.fMask = SEE_MASK_FLAG_NO_UI;
        ShellExecuteInfo.nShow = SW_SHOWNORMAL;
        ShellExecuteInfo.lpFile = const_cast<LPTSTR>(m_strSiteUrl.String());
        ShellExecuteInfo.lpVerb = TEXT("open");
        ShellExecuteEx(&ShellExecuteInfo);
    }
}


LRESULT CCommonFinishPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonFinishPage::OnEventNotification") ));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        if (pEventMessage->EventId() == WIA_EVENT_DEVICE_DISCONNECTED)
        {
            if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
            {
                //
                // If there were any errors, disable back, since we can't upload
                //
                if (S_OK != m_pControllerWindow->m_hrDownloadResult || m_pControllerWindow->m_bDownloadCancelled)
                {
                    //
                    // Disable "back"
                    //
                    PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_FINISH );
                }
            }
        }

        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}

LRESULT CCommonFinishPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
    }
    SC_END_COMMAND_HANDLERS();
}



LRESULT CCommonFinishPage::OnHyperlinkClick( WPARAM, LPARAM lParam )
{
    LRESULT lResult = FALSE;
    NMLINK *pNmLink = reinterpret_cast<NMLINK*>(lParam);
    if (pNmLink)
    {
        WIA_TRACE((TEXT("ID: %s"),pNmLink->item.szID));
        switch (pNmLink->hdr.idFrom)
        {
        case IDC_FINISH_STATUS:
            {
                if (!lstrcmp(pNmLink->item.szID,STR_DETAILED_DOWNLOAD_ERROR_ID))
                {
                    CSimpleString strMessage( IDS_TRANSFER_ERROR, g_hInstance );
                    strMessage += m_pControllerWindow->m_strErrorMessage;
                    CMessageBoxEx::MessageBox( m_hWnd, strMessage, CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING );
                    lResult = TRUE;
                }
                else if (!lstrcmp(pNmLink->item.szID,STR_DETAILED_UPLOAD_ERROR_ID))
                {
                    CSimpleString strMessage( IDS_UPLOAD_ERROR, g_hInstance );
                    CSimpleString strError = WiaUiUtil::GetErrorTextFromHResult(m_pControllerWindow->m_hrUploadResult);
                    if (!strError.Length())
                    {
                        strError.Format( CSimpleString( IDS_TRANSFER_ERROR_OCCURRED, g_hInstance ), m_pControllerWindow->m_hrUploadResult );
                    }
                    strMessage += strError;
                    CMessageBoxEx::MessageBox( m_hWnd, strMessage, CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING );
                    lResult = TRUE;
                }
                else if (!lstrcmp(pNmLink->item.szID,STR_LOCAL_LINK_ID))
                {
                    OpenLocalStorage();
                    lResult = TRUE;
                }
                else if (!lstrcmp(pNmLink->item.szID,STR_REMOTE_LINK_ID))
                {
                    OpenRemoteStorage();
                    lResult = TRUE;
                }
            }
            break;
        }
    }
    return lResult;
}

LRESULT CCommonFinishPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_RETURN,IDC_FINISH_STATUS,OnHyperlinkClick);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_CLICK,IDC_FINISH_STATUS,OnHyperlinkClick);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZFINISH,OnWizFinish);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonFinishPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonFinishPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comfirst.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMFIRST.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: First wizard page for cameras
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "comfirst.h"
#include <shlobj.h>
#include "resource.h"
#include "shellext.h"
#include "wiatextc.h"
#include "simcrack.h"
#include "gwiaevnt.h"

static int c_nMaxThumbnailWidth  = 120;
static int c_nMaxThumbnailHeight = 120;

CCommonFirstPage::CCommonFirstPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_bThumbnailsRequested(false),
    m_hBigTitleFont(NULL),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE))
{
}

CCommonFirstPage::~CCommonFirstPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
}


LRESULT CCommonFirstPage::OnWizNext( WPARAM, LPARAM )
{
    return 0;
}

LRESULT CCommonFirstPage::OnActivate( WPARAM wParam, LPARAM )
{
    //
    // We also update on activate messages, because we can't set
    // wizard buttons when we are not the active process
    //
    if (WA_INACTIVE != wParam)
    {
        HandleImageCountChange(true);
    }
    return 0;
}

void CCommonFirstPage::HandleImageCountChange( bool bUpdateWizButtons )
{
    //
    // How many items are available?
    //
    int nCount = m_pControllerWindow->m_WiaItemList.Count();

    //
    // Figure out which message and buttons to display
    //
    int nMessageResourceId = 0;
    int nButtons = 0;
    switch (m_pControllerWindow->m_DeviceTypeMode)
    {
    case CAcquisitionManagerControllerWindow::ScannerMode:
        nMessageResourceId = nCount ? IDS_FIRST_PAGE_INSTRUCTIONS_SCANNER : IDS_SCANNER_NO_IMAGES;
        nButtons = nCount ? PSWIZB_NEXT : 0;
        break;

    case CAcquisitionManagerControllerWindow::CameraMode:
        //
        // If we can take pictures, enable the next button and don't tell the user there are no images.
        //
        if (m_pControllerWindow->m_bTakePictureIsSupported)
        {
            nButtons = PSWIZB_NEXT;
            nMessageResourceId = IDS_FIRST_PAGE_INSTRUCTIONS_CAMERA;
        }
        else
        {
            nButtons = nCount ? PSWIZB_NEXT : 0;
            nMessageResourceId = nCount ? IDS_FIRST_PAGE_INSTRUCTIONS_CAMERA : IDS_CAMERA_NO_IMAGES;
        }
        break;

    case CAcquisitionManagerControllerWindow::VideoMode:
        nMessageResourceId = IDS_FIRST_PAGE_INSTRUCTIONS_VIDEO;
        nButtons = PSWIZB_NEXT;
        break;
    };

    //
    // Set the buttons
    //
    if (bUpdateWizButtons)
    {
        PropSheet_SetWizButtons( GetParent(m_hWnd), nButtons );
    }

    //
    // Set the message
    //
    CSimpleString( nMessageResourceId, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_FIRST_INSTRUCTIONS ) );
}

LRESULT CCommonFirstPage::OnSetActive( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION(TEXT("CCommonFirstPage::OnSetActive"));
    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    HandleImageCountChange(true);
    
    //
    // We do want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectGotoLastpage|CAcquisitionManagerControllerWindow::OnDisconnectFailDownload|CAcquisitionManagerControllerWindow::OnDisconnectFailUpload|CAcquisitionManagerControllerWindow::OnDisconnectFailDelete;

    //
    // Get the focus off the hyperlink control
    //
    if (GetDlgItem( m_hWnd, IDC_CAMFIRST_EXPLORE ))
    {
        PostMessage( m_hWnd, WM_NEXTDLGCTL, 0, 0 );
    }

    return 0;
}


LRESULT CCommonFirstPage::OnShowWindow( WPARAM, LPARAM )
{
    if (!m_bThumbnailsRequested)
    {
        //
        // Request the thumbnails
        //
        m_pControllerWindow->DownloadAllThumbnails();

        //
        // Make sure we don't ask for the thumbnails again
        //
        m_bThumbnailsRequested = true;
    }

    return 0;
}


LRESULT CCommonFirstPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CCommonFirstPage::OnInitDialog"));
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    //
    // Hide the explore camera link and label if this is one of those icky serial cameras or dv cameras
    //
    if (m_pControllerWindow->IsSerialCamera() || m_pControllerWindow->m_DeviceTypeMode==CAcquisitionManagerControllerWindow::VideoMode)
    {
        //
        // Hide the link
        //
        if (GetDlgItem( m_hWnd, IDC_CAMFIRST_EXPLORE ))
        {
            ShowWindow( GetDlgItem( m_hWnd, IDC_CAMFIRST_EXPLORE ), SW_HIDE );
            EnableWindow( GetDlgItem( m_hWnd, IDC_CAMFIRST_EXPLORE ), FALSE );
        }
    }

    //
    // Set the font size for the title and device name
    //
    m_hBigTitleFont = WiaUiUtil::CreateFontWithPointSizeFromWindow( GetDlgItem(m_hWnd,IDC_FIRST_TITLE), 14, false, false );
    if (m_hBigTitleFont)
    {
        SendDlgItemMessage( m_hWnd, IDC_FIRST_TITLE, WM_SETFONT, reinterpret_cast<WPARAM>(m_hBigTitleFont), MAKELPARAM(TRUE,0));
    }

    m_hBigDeviceFont = WiaUiUtil::ChangeFontFromWindow( GetDlgItem(m_hWnd,IDC_FIRST_DEVICE_NAME), 2 );
    if (m_hBigDeviceFont)
    {
        SendDlgItemMessage( m_hWnd, IDC_FIRST_DEVICE_NAME, WM_SETFONT, reinterpret_cast<WPARAM>(m_hBigDeviceFont), MAKELPARAM(TRUE,0));
    }


    WiaUiUtil::CenterWindow( GetParent(m_hWnd), NULL );

    //
    // Set the wizard's icon
    //
    if (m_pControllerWindow->m_hWizardIconSmall && m_pControllerWindow->m_hWizardIconBig)
    {
        SendMessage( GetParent(m_hWnd), WM_SETICON, ICON_SMALL, reinterpret_cast<LPARAM>(m_pControllerWindow->m_hWizardIconSmall) );
        SendMessage( GetParent(m_hWnd), WM_SETICON, ICON_BIG, reinterpret_cast<LPARAM>(m_pControllerWindow->m_hWizardIconBig) );
    }

    //
    // Get the device name and truncate it to fit in the static control
    //
    CSimpleString strDeviceName = CSimpleStringConvert::NaturalString(m_pControllerWindow->m_strwDeviceName);
    strDeviceName = WiaUiUtil::FitTextInStaticWithEllipsis( strDeviceName, GetDlgItem( m_hWnd, IDC_FIRST_DEVICE_NAME ), DT_END_ELLIPSIS|DT_NOPREFIX );

    //
    // Set the text in the "device name" box
    //
    strDeviceName.SetWindowText( GetDlgItem( m_hWnd, IDC_FIRST_DEVICE_NAME ) );

    //
    // This only has to be done in one page.
    //
    m_pControllerWindow->SetMainWindowInSharedMemory( GetParent(m_hWnd) );

    //
    // If we have a parent window, center the wizard on it.
    //
    if (m_pControllerWindow->m_pEventParameters->hwndParent)
    {
        WiaUiUtil::CenterWindow( GetParent(m_hWnd), m_pControllerWindow->m_pEventParameters->hwndParent );
    }

    return 0;
}


LRESULT CCommonFirstPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CCommonFirstPage::OnEventNotification"));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        if (pEventMessage->EventId() == WIA_EVENT_ITEM_CREATED || pEventMessage->EventId() == WIA_EVENT_ITEM_DELETED)
        {
            //
            // Only update controls if we are the active page
            //
            if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
            {
                //
                // Because of some weirdness in prsht.c when calling PSM_SETWIZBUTTONS,
                // we only want to call PSM_SETWIZBUTTONS when we are the foreground app,
                // so I try to figure out if our process owns the foreground window.
                // Assume we won't be updating the buttons
                //
                bool bUpdateWizButtons = false;

                //
                // Get the foreground window
                //
                HWND hForegroundWnd = GetForegroundWindow();
                if (hForegroundWnd)
                {
                    //
                    // Get the process id of the foreground window.  If it is the
                    // same process ID as ours, we will update the wizard buttons
                    //
                    DWORD dwProcessId = 0;
                    GetWindowThreadProcessId(hForegroundWnd,&dwProcessId);
                    if (dwProcessId == GetCurrentProcessId())
                    {
                        bUpdateWizButtons = true;
                    }
                }

                //
                // Update the controls
                //
                HandleImageCountChange(bUpdateWizButtons);
            }
        }
        
        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}


LRESULT CCommonFirstPage::OnDestroy( WPARAM, LPARAM )
{
    if (m_hBigTitleFont)
    {
        DeleteObject(m_hBigTitleFont);
        m_hBigTitleFont = NULL;
    }
    if (m_hBigDeviceFont)
    {
        DeleteObject(m_hBigDeviceFont);
        m_hBigDeviceFont = NULL;
    }
    return 0;
}


LRESULT CCommonFirstPage::OnHyperlinkClick( WPARAM, LPARAM lParam )
{
    LRESULT lResult = FALSE;
    NMLINK *pNmLink = reinterpret_cast<NMLINK*>(lParam);
    if (pNmLink)
    {
        CWaitCursor wc;
        HRESULT hr = E_FAIL;
        CSimpleStringWide strwShellLocation;
        if (PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPF_MOUNT_POINT, strwShellLocation ))
        {
            CSimpleString strShellLocation = CSimpleStringConvert::NaturalString(strwShellLocation);
            if (strShellLocation.Length())
            {
                SHELLEXECUTEINFO ShellExecuteInfo = {0};
                ShellExecuteInfo.cbSize = sizeof(ShellExecuteInfo);
                ShellExecuteInfo.hwnd = m_hWnd;
                ShellExecuteInfo.nShow = SW_SHOW;
                ShellExecuteInfo.lpVerb = TEXT("open");
                ShellExecuteInfo.lpFile = const_cast<LPTSTR>(strShellLocation.String());
                if (ShellExecuteEx( &ShellExecuteInfo ))
                {
                    hr = S_OK;
                }
                else
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                    WIA_PRINTHRESULT((hr,TEXT("ShellExecuteEx failed")));
                }
            }
        }
        else if (PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DIP_DEV_ID, strwShellLocation ) && strwShellLocation.Length())
        {
            hr = WiaUiUtil::ExploreWiaDevice(strwShellLocation);
        }
        if (!SUCCEEDED(hr))
        {
            MessageBox( m_hWnd, CSimpleString( IDS_UNABLE_OPEN_EXPLORER, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), MB_ICONHAND );
        }
    }
    return lResult;
}

LRESULT CCommonFirstPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_RETURN,IDC_CAMFIRST_EXPLORE,OnHyperlinkClick);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_CLICK,IDC_CAMFIRST_EXPLORE,OnHyperlinkClick);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonFirstPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonFirstPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_SHOWWINDOW, OnShowWindow );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_ACTIVATE, OnActivate );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comfirst.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMFIRST.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: First wizard page for cameras
 *
 *******************************************************************************/
#ifndef __COMFIRST_H_INCLUDED
#define __COMFIRST_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"

class CCommonFirstPage
{
private:
    // Private data
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    bool                                 m_bThumbnailsRequested;  // Used to initiate thumbnail download
    HFONT                                m_hBigTitleFont;
    HFONT                                m_hBigDeviceFont;
    UINT                                 m_nWiaEventMessage;

private:
    // No implementation
    CCommonFirstPage(void);
    CCommonFirstPage( const CCommonFirstPage & );
    CCommonFirstPage &operator=( const CCommonFirstPage & );

private:
    // Constructor and destructor
    explicit CCommonFirstPage( HWND hWnd );
    ~CCommonFirstPage(void);

private:
    void HandleImageCountChange( bool bUpdateWizButtons );

private:

    // WM_NOTIFY handlers
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnShowWindow( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    LRESULT OnActivate( WPARAM, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );
    LRESULT OnHyperlinkClick( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __COMFIRST_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comprog.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMPROG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Download page.  Displays the thumbnail and download progress.
 *
 *******************************************************************************/
#ifndef __COMPROG_H_INCLUDED
#define __COMPROG_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "gphelper.h"

class CCommonProgressPage
{
private:
    // Private data
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    int                                  m_nPictureCount;
    HANDLE                               m_hCancelDownloadEvent;
    CGdiPlusHelper                       m_GdiPlusHelper;
    UINT                                 m_nThreadNotificationMessage;
    UINT                                 m_nWiaEventMessage;
    HPROPSHEETPAGE                       m_hSwitchToNextPage;
    bool                                 m_bQueryingUser;

private:
    // No implementation
    CCommonProgressPage(void);
    CCommonProgressPage( const CCommonProgressPage & );
    CCommonProgressPage &operator=( const CCommonProgressPage & );

private:
    // Constructor and destructor
    explicit CCommonProgressPage( HWND hWnd );
    ~CCommonProgressPage(void);

private:
    // Helpers
    void UpdatePercentComplete( int nPercent, bool bUploading );
    void UpdateCurrentPicture( int nPicture );
    void UpdateThumbnail( HBITMAP hBitmap, CWiaItem *pWiaItem );
    bool QueryCancel(void);

private:
    // WM_COMMAND handlers

    // Thread Message handlers
    void OnNotifyDownloadImage( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage );
    void OnNotifyDownloadError( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage );

    // WM_NOTIFY handlers
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnKillActive( WPARAM, LPARAM );
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnReset( WPARAM, LPARAM );
    LRESULT OnQueryCancel( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    LRESULT OnQueryEndSession( WPARAM, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __COMPROG_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comprog.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMPROG.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Download progress dialog.  Displays the thumbnail and download progress.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <commctrl.h>
#include "comprog.h"
#include "resource.h"
#include "pviewids.h"
#include "simcrack.h"
#include "gwiaevnt.h"
#include "mboxex.h"
#include "runnpwiz.h"

#define PWM_SETDEFBUTTON (WM_USER+1)

CCommonProgressPage::CCommonProgressPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_hCancelDownloadEvent(CreateEvent(NULL,TRUE,FALSE,TEXT(""))),
    m_nThreadNotificationMessage(RegisterWindowMessage(STR_THREAD_NOTIFICATION_MESSAGE)),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE)),
    m_hSwitchToNextPage(NULL),
    m_bQueryingUser(false)
{
}

CCommonProgressPage::~CCommonProgressPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
    if (m_hCancelDownloadEvent)
    {
        CloseHandle(m_hCancelDownloadEvent);
        m_hCancelDownloadEvent = NULL;
    }
}


void CCommonProgressPage::UpdatePercentComplete( int nPercent, bool bUploading )
{
    if (nPercent >= 0)
    {
        int nPercentStringResId;
        if (bUploading)
        {
            nPercentStringResId = IDS_PERCENT_COMPLETE_UPLOADING;
        }
        else
        {
            // Assume copying is the appropropriate description
            nPercentStringResId = IDS_PERCENT_COMPLETE_COPYING;
            switch (m_pControllerWindow->m_DeviceTypeMode)
            {
            case CAcquisitionManagerControllerWindow::ScannerMode:
                nPercentStringResId = IDS_PERCENT_COMPLETE_SCANNING;
                break;
            };
        }

        SendDlgItemMessage( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS, PBM_SETPOS, nPercent, 0 );
        CSimpleString().Format( nPercentStringResId, g_hInstance, nPercent ).SetWindowText( GetDlgItem( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS_TEXT ) );
    }
    else
    {
        SendDlgItemMessage( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS, PBM_SETPOS, 0, 0 );
        SendDlgItemMessage( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS_TEXT, WM_SETTEXT, 0, reinterpret_cast<LPARAM>("") );
    }
}

void CCommonProgressPage::UpdateCurrentPicture( int nPicture )
{
    if (nPicture >= 0)
    {
        SendDlgItemMessage( m_hWnd, IDC_COMPROG_CURRENTIMAGE, PBM_SETPOS, nPicture, 0 );
        CSimpleString().Format( IDS_FILEN_OF_M, g_hInstance, nPicture+1, m_nPictureCount ).SetWindowText( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTIMAGE_TEXT ) );
    }
    else
    {
        SendDlgItemMessage( m_hWnd, IDC_COMPROG_CURRENTIMAGE, PBM_SETPOS, 0, 0 );
        SendDlgItemMessage( m_hWnd, IDC_COMPROG_CURRENTIMAGE_TEXT, WM_SETTEXT, 0, reinterpret_cast<LPARAM>("") );
    }
}

void CCommonProgressPage::UpdateThumbnail( HBITMAP hBitmap, CWiaItem *pWiaItem )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonProgressPage::UpdateThumbnail( HBITMAP hBitmap=0x%08X, CWiaItem *pWiaItem=0x%08X )"), hBitmap, pWiaItem ));


    HWND hWndPreview = GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL );
    if (hWndPreview)
    {
        if (pWiaItem && m_pControllerWindow && hBitmap)
        {
            switch (m_pControllerWindow->m_DeviceTypeMode)
            {
            case CAcquisitionManagerControllerWindow::ScannerMode:
                {
                    //
                    // If the item has a bitmap image, it already has a preview scan available
                    //
                    WIA_TRACE((TEXT("pWiaItem->BitmapImage() = %08X"), pWiaItem->BitmapImage() ));
                    if (pWiaItem->BitmapImage())
                    {
                        //
                        // Hide the preview window while we are futzing with it
                        //
                        ShowWindow( hWndPreview, SW_HIDE );

                        //
                        // Crop the image to the selected region
                        //
                        WiaPreviewControl_SetResolution( hWndPreview, &pWiaItem->ScanRegionSettings().sizeResolution );
                        WiaPreviewControl_SetSelOrigin( hWndPreview, 0, FALSE, &pWiaItem->ScanRegionSettings().ptOrigin );
                        WiaPreviewControl_SetSelExtent( hWndPreview, 0, FALSE, &pWiaItem->ScanRegionSettings().sizeExtent );

                        //
                        // Set the control to preview mode
                        //
                        WiaPreviewControl_SetPreviewMode( hWndPreview, TRUE );

                        //
                        // If this is a scanner item, we don't want to let the preview control take ownership of the bitmap.
                        // We don't want it to be deleted
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, hBitmap );

                        //
                        // Show the preview window
                        //
                        ShowWindow( hWndPreview, SW_SHOW );
                    }
                    else
                    {
                        //
                        // This means we are getting a preview image from the driver
                        // We don't want to delete this image
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, hBitmap );

                        //
                        // Make sure the window is visible
                        //
                        ShowWindow( hWndPreview, SW_SHOW );
                    }
                }
                break;

            default:
                {
                    //
                    // Go ahead and rotate the bitmap, even if it isn't necessary.
                    //
                    HBITMAP hRotatedThumbnail = NULL;
                    if (SUCCEEDED(m_GdiPlusHelper.Rotate( hBitmap, hRotatedThumbnail, pWiaItem->Rotation())))
                    {
                        //
                        // Set it to the rotated bitmap, and ALLOW this bitmap to be deleted
                        //
                        WiaPreviewControl_SetBitmap( hWndPreview, TRUE, FALSE, hRotatedThumbnail );
                    }

                    //
                    // Make sure the window is visible
                    //
                    ShowWindow( hWndPreview, SW_SHOW );

                    //
                    // Delete the source bitmap
                    //
                    DeleteObject(hBitmap);
                }
            }
        }
        else
        {
            ShowWindow( hWndPreview, SW_HIDE );
            WiaPreviewControl_SetBitmap( hWndPreview, TRUE, TRUE, NULL );
        }
    }
}


LRESULT CCommonProgressPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }


    //
    // Prepare the preview control
    //
    HWND hWndThumbnail = GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL );
    if (hWndThumbnail)
    {
        //
        // We only want to set the preview mode for scanners
        //
        if (CAcquisitionManagerControllerWindow::ScannerMode==m_pControllerWindow->m_DeviceTypeMode)
        {
            WiaPreviewControl_SetPreviewMode( hWndThumbnail, TRUE );
        }
        else
        {
            WiaPreviewControl_AllowNullSelection( hWndThumbnail, TRUE );
            WiaPreviewControl_ClearSelection( hWndThumbnail );
        }
        WiaPreviewControl_SetBgAlpha( hWndThumbnail, FALSE, 0xFF );
        WiaPreviewControl_DisableSelection( hWndThumbnail, TRUE );
        WiaPreviewControl_SetEnableStretch( hWndThumbnail, FALSE );
        WiaPreviewControl_SetBkColor( hWndThumbnail, FALSE, TRUE, GetSysColor(COLOR_WINDOW) );
        WiaPreviewControl_HideEmptyPreview( hWndThumbnail, TRUE );
        WiaPreviewControl_SetPreviewAlignment( hWndThumbnail, PREVIEW_WINDOW_CENTER, PREVIEW_WINDOW_CENTER, FALSE );

    }

    return 0;
}

void CCommonProgressPage::OnNotifyDownloadError( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonProgressPage::OnNotifyDownloadError")));
    CDownloadErrorNotificationMessage *pDownloadErrorNotificationMessage = dynamic_cast<CDownloadErrorNotificationMessage*>(pThreadNotificationMessage);
    if (pDownloadErrorNotificationMessage && m_pControllerWindow)
    {
        pDownloadErrorNotificationMessage->Handled();
        if (m_pControllerWindow->m_bDisconnected)
        {
            pDownloadErrorNotificationMessage->Response( IDCANCEL );
        }
        else
        {
            WIA_TRACE((TEXT("MessageBox flags: %08X"), pDownloadErrorNotificationMessage->MessageBoxFlags() ));
            int nResponse = CMessageBoxEx::MessageBox( m_hWnd, pDownloadErrorNotificationMessage->Message(), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), pDownloadErrorNotificationMessage->MessageBoxFlags() );
            pDownloadErrorNotificationMessage->Response( nResponse );
        }
    }
}

void CCommonProgressPage::OnNotifyDownloadImage( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    WIA_PUSHFUNCTION(TEXT("CCommonProgressPage::OnNotifyDownloadImage"));
    CDownloadImagesThreadNotifyMessage *pDownloadImageThreadNotifyMessage = dynamic_cast<CDownloadImagesThreadNotifyMessage*>(pThreadNotificationMessage);
    if (pDownloadImageThreadNotifyMessage && m_pControllerWindow)
    {
        switch (pDownloadImageThreadNotifyMessage->Status())
        {
        case CDownloadImagesThreadNotifyMessage::Begin:
            {
                switch (pDownloadImageThreadNotifyMessage->Operation())
                {
                case CDownloadImagesThreadNotifyMessage::DownloadAll:
                    {
                        //
                        // Store the number of images we'll be downloading
                        //
                        m_nPictureCount = pDownloadImageThreadNotifyMessage->PictureCount();

                        //
                        // Show the current picture controls if there are multiple pictures being downloaded
                        //
                        if (m_nPictureCount > 1)
                        {
                            ShowWindow( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTIMAGE_TEXT ), SW_SHOW );
                            ShowWindow( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTIMAGE ), SW_SHOW );
                        }

                        //
                        // Initialize current image count progress bar
                        //
                        SendDlgItemMessage( m_hWnd, IDC_COMPROG_CURRENTIMAGE, PBM_SETRANGE32, 0, m_nPictureCount);
                        UpdateCurrentPicture(0);

                        //
                        // Enable the file download progress controls
                        //
                        EnableWindow( GetDlgItem( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS_TEXT ), TRUE );
                        EnableWindow( GetDlgItem( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS ), TRUE );

                        //
                        // Initialize download progress bar
                        //
                        SendDlgItemMessage( m_hWnd, IDC_COMPROG_DOWNLOADPROGRESS, PBM_SETRANGE, 0, MAKELPARAM(0,100));
                        UpdatePercentComplete(0,false);
                    }
                    break;

                case CDownloadImagesThreadNotifyMessage::DownloadImage:
                    {
                        //
                        // Display thumbnail
                        //
                        HBITMAP hBitmapThumbnail = NULL;
                        CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadImageThreadNotifyMessage->Cookie() );
                        if (pWiaItem)
                        {
                            //
                            // This will only work if it is a scanner item
                            //
                            hBitmapThumbnail = pWiaItem->BitmapImage();
                            if (!hBitmapThumbnail)
                            {
                                //
                                // Since it didn't work, this is a camera item, so create a thumbnail.
                                // We have to make sure we nuke this bitmap or it is a leak!
                                //
                                HDC hDC = GetDC(NULL);
                                if (hDC)
                                {
                                    hBitmapThumbnail = pWiaItem->CreateThumbnailBitmap(hDC);
                                    ReleaseDC( NULL, hDC );
                                }
                            }
                        }
                        else
                        {
                            WIA_ERROR((TEXT("Unable to find the item with the cookie %08X"), pDownloadImageThreadNotifyMessage->Cookie() ));
                        }

                        //
                        // Update the thumbnail in the progress window
                        //
                        UpdateThumbnail( hBitmapThumbnail, pWiaItem );

                        //
                        // Increment file queue progress
                        //
                        UpdateCurrentPicture(pDownloadImageThreadNotifyMessage->CurrentPicture());

                        //
                        // Clear file download progress
                        //
                        UpdatePercentComplete(0,false);

                        //
                        // Display the filename we are downloading
                        //
                        TCHAR szFileTitle[MAX_PATH] = TEXT("");
                        GetFileTitle( pDownloadImageThreadNotifyMessage->Filename(), szFileTitle, ARRAYSIZE(szFileTitle) );
                        SetDlgItemText( m_hWnd, IDC_COMPROG_IMAGENAME, szFileTitle );
                    }
                    break;

                case CDownloadImagesThreadNotifyMessage::PreviewImage:
                    {
                        CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadImageThreadNotifyMessage->Cookie() );
                        if (pWiaItem && !pWiaItem->BitmapImage() && !pWiaItem->BitmapData())
                        {
                            UpdateThumbnail( pDownloadImageThreadNotifyMessage->PreviewBitmap(), pWiaItem );
                        }
                    }
                    break;
                }
            }
            break;

        case CDownloadImagesThreadNotifyMessage::Update:
            {
                switch (pDownloadImageThreadNotifyMessage->Operation())
                {
                case CDownloadImagesThreadNotifyMessage::DownloadImage:
                    {
                        //
                        // Update file download progress
                        //
                        UpdatePercentComplete(pDownloadImageThreadNotifyMessage->PercentComplete(),false);
                    }
                    break;
                case CDownloadImagesThreadNotifyMessage::PreviewImage:
                    {
                        CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadImageThreadNotifyMessage->Cookie() );
                        if (pWiaItem && !pWiaItem->BitmapImage() && !pWiaItem->BitmapData())
                        {
                            WiaPreviewControl_RefreshBitmap( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ) );
                        }
                    }
                    break;
                }
            }
            break;

        case CDownloadImagesThreadNotifyMessage::End:
            switch (pDownloadImageThreadNotifyMessage->Operation())
            {
            case CDownloadImagesThreadNotifyMessage::DownloadImage:
                {
                    if (!SUCCEEDED(pDownloadImageThreadNotifyMessage->hr()))
                    {
                        //
                        // Clear the thumbnail in the progress window
                        //
                        UpdateThumbnail( NULL, NULL );
                        
                        //
                        // Clear file download progress
                        //
                        UpdatePercentComplete(0,false);

                        //
                        // Increment file queue progress
                        //
                        UpdateCurrentPicture(pDownloadImageThreadNotifyMessage->CurrentPicture());

                        //
                        // Clear the filename
                        //
                        SetDlgItemText( m_hWnd, IDC_COMPROG_IMAGENAME, TEXT("") );
                    }
                    else
                    {
                        //
                        // Update file download progress
                        //
                        UpdatePercentComplete(100,false);
                    }
                }
                break;

            case CDownloadImagesThreadNotifyMessage::DownloadAll:
                {
                    //
                    // Clear the filename when we are all done
                    //
                    SetDlgItemText( m_hWnd, IDC_COMPROG_IMAGENAME, TEXT("") );
                    
                    CSimpleString strMessage;

                    if (FAILED(pDownloadImageThreadNotifyMessage->hr()))
                    {
                        WIA_PRINTHRESULT((pDownloadImageThreadNotifyMessage->hr(),TEXT("CDownloadImagesThreadNotifyMessage::DownloadAll (%s)"), pDownloadImageThreadNotifyMessage->ExtendedErrorInformation().String()));
                        
                        //
                        // If we already have a good error message, let's use it
                        //
                        if (pDownloadImageThreadNotifyMessage->ExtendedErrorInformation().Length())
                        {
                            strMessage = pDownloadImageThreadNotifyMessage->ExtendedErrorInformation();
                        }
                        else
                        {
                            //
                            // If we haven't already created a good error message, and we think we can here, let's do it
                            //
                            switch (pDownloadImageThreadNotifyMessage->hr())
                            {
                            case HRESULT_FROM_WIN32(ERROR_DISK_FULL):
                                strMessage.LoadString( IDS_DISKFULL, g_hInstance );
                                break;

                            case HRESULT_FROM_WIN32(RPC_S_SERVER_UNAVAILABLE):
                                strMessage.LoadString( IDS_UNABLETOTRANSFER, g_hInstance );
                                break;

                            case WIA_ERROR_PAPER_JAM:
                                strMessage.LoadString( IDS_WIA_ERROR_PAPER_JAM, g_hInstance );
                                break;

                            case WIA_ERROR_PAPER_EMPTY:
                                strMessage.LoadString( IDS_WIA_ERROR_PAPER_EMPTY, g_hInstance );
                                break;

                            case WIA_ERROR_PAPER_PROBLEM:
                                strMessage.LoadString( IDS_WIA_ERROR_PAPER_PROBLEM, g_hInstance );
                                break;

                            case WIA_ERROR_OFFLINE:
                                strMessage.LoadString( IDS_WIA_ERROR_OFFLINE, g_hInstance );
                                break;

                            case WIA_ERROR_BUSY:
                                strMessage.LoadString( IDS_WIA_ERROR_BUSY, g_hInstance );
                                break;

                            case WIA_ERROR_WARMING_UP:
                                strMessage.LoadString( IDS_WIA_ERROR_WARMING_UP, g_hInstance );
                                break;

                            case WIA_ERROR_USER_INTERVENTION:
                                strMessage.LoadString( IDS_WIA_ERROR_USER_INTERVENTION, g_hInstance );
                                break;

                            case WIA_ERROR_ITEM_DELETED:
                                strMessage.LoadString( IDS_WIA_ERROR_ITEM_DELETED, g_hInstance );
                                break;

                            case WIA_ERROR_DEVICE_COMMUNICATION:
                                strMessage.LoadString( IDS_WIA_ERROR_DEVICE_COMMUNICATION, g_hInstance );
                                break;

                            case WIA_ERROR_INVALID_COMMAND:
                                strMessage.LoadString( IDS_WIA_ERROR_INVALID_COMMAND, g_hInstance );
                                break;

                            case WIA_ERROR_INCORRECT_HARDWARE_SETTING:
                                strMessage.LoadString( IDS_WIA_ERROR_INCORRECT_HARDWARE_SETTING, g_hInstance );
                                break;

                            case WIA_ERROR_DEVICE_LOCKED:
                                strMessage.LoadString( IDS_WIA_ERROR_DEVICE_LOCKED, g_hInstance );
                                break;

                            default:
                                strMessage = WiaUiUtil::GetErrorTextFromHResult(pDownloadImageThreadNotifyMessage->hr());
                                if (!strMessage.Length())
                                {
                                    strMessage.Format( CSimpleString( IDS_TRANSFER_ERROR_OCCURRED, g_hInstance ), pDownloadImageThreadNotifyMessage->hr() );
                                }
                                break;
                            }
                        }
                        WIA_TRACE((TEXT("strMessage: (%s)"), strMessage.String()));

                        //
                        // Tell the user something bad happened.  Save the error message.
                        //
                        m_pControllerWindow->m_strErrorMessage = strMessage;
                    }

                    //
                    // Save the hresult
                    //
                    m_pControllerWindow->m_hrDownloadResult = pDownloadImageThreadNotifyMessage->hr();

                    //
                    // Just to be sure we catch cancels
                    //
                    if (S_FALSE == m_pControllerWindow->m_hrDownloadResult)
                    {
                        m_pControllerWindow->m_bDownloadCancelled = true;
                    }

                    //
                    // Continue downloading thumbnails, in case it was paused
                    //
                    m_pControllerWindow->DownloadAllThumbnails();

                    //
                    // Go to the next page.  Assume it will be the upload query page.
                    //
                    HPROPSHEETPAGE hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nFinishPageIndex );

                    //
                    // If the transfer was successful
                    //
                    if (!m_pControllerWindow->m_bDownloadCancelled && S_OK==m_pControllerWindow->m_hrDownloadResult)
                    {
                        //
                        // If we are deleting from the device, send us to the delete progress page
                        //
                        if (m_pControllerWindow->m_bDeletePicturesIfSuccessful)
                        {
                            hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nDeleteProgressPageIndex );
                        }

                        //
                        // Otherwise, go to the upload query page
                        //
                        else
                        {
                            hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nUploadQueryPageIndex );
                        }
                    }

                    //
                    // If there is a message box active, save this page till the message box is dismissed
                    //
                    if (m_bQueryingUser)
                    {
                        m_hSwitchToNextPage = hNextPage;
                    }
                    else
                    {
                        //
                        // Set the next page
                        //
                        PropSheet_SetCurSel( GetParent(m_hWnd), hNextPage, -1 );
                    }

                }
                break;

            case CDownloadImagesThreadNotifyMessage::PreviewImage:
                {
                    CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pDownloadImageThreadNotifyMessage->Cookie() );
                    UpdateThumbnail( NULL, pWiaItem );
                }
                break;
            }
        }
    }
}

LRESULT CCommonProgressPage::OnSetActive( WPARAM, LPARAM )
{
    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    //
    // Initialize the download error message
    //
    m_pControllerWindow->m_strErrorMessage = TEXT("");

    //
    // Initialize the download result
    //
    m_pControllerWindow->m_hrDownloadResult = S_OK;

    //
    // Initialize upload result to S_OK
    //
    m_pControllerWindow->m_hrUploadResult = S_OK;

    //
    // Initialize delete result to E_FAIL
    //
    m_pControllerWindow->m_hrDeleteResult = E_FAIL;

    //
    // Reset the cancelled flag
    //
    m_pControllerWindow->m_bDownloadCancelled = false;

    //
    // Clear the downloaded file list
    //
    m_pControllerWindow->m_DownloadedFileInformationList.Destroy();

    //
    // Clear all of the controls
    //
    UpdatePercentComplete(-1,false);
    UpdateCurrentPicture(-1);
    UpdateThumbnail(NULL,NULL);

    //
    // Reset the selected region, in case this is a scanner
    //
    WiaPreviewControl_SetResolution( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), NULL );
    WiaPreviewControl_SetSelOrigin( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), 0, FALSE, NULL );
    WiaPreviewControl_SetSelExtent( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), 0, FALSE, NULL );

    //
    // Set the control to preview mode
    //
    WiaPreviewControl_SetPreviewMode( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), TRUE );

    //
    // Reset the download event cancel
    //
    if (m_hCancelDownloadEvent)
    {
        ResetEvent(m_hCancelDownloadEvent);
    }

    //
    // Cancel thumbnail downloading
    //
    m_pControllerWindow->m_EventThumbnailCancel.Signal();


    //
    //  Start the download
    //
    if (!m_pControllerWindow->DownloadSelectedImages(m_hCancelDownloadEvent))
    {
        WIA_ERROR((TEXT("m_pControllerWindow->DownloadSelectedImages FAILED!")));
        MessageBox( m_hWnd, CSimpleString( IDS_UNABLETOTRANSFER, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), MB_ICONHAND );
        return -1;
    }

    //
    // Tell the user where the pictures are going
    //
    CSimpleString strDestinationDisplayName = m_pControllerWindow->m_CurrentDownloadDestination.DisplayName(m_pControllerWindow->m_DestinationNameData);
    strDestinationDisplayName.SetWindowText( GetDlgItem( m_hWnd, IDC_COMPROG_DESTNAME) );
    SendDlgItemMessage( m_hWnd, IDC_COMPROG_DESTNAME, EM_SETSEL, strDestinationDisplayName.Length(), strDestinationDisplayName.Length() );
    SendDlgItemMessage( m_hWnd, IDC_COMPROG_DESTNAME, EM_SCROLLCARET, 0, 0 );

    //
    // Hide the current image controls in case there is only one image
    //
    ShowWindow( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTIMAGE_TEXT ), SW_HIDE );
    ShowWindow( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTIMAGE ), SW_HIDE );

    //
    // No next, back or finish
    //
    PropSheet_SetWizButtons( GetParent(m_hWnd), 0 );

    //
    // We do want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectGotoLastpage|CAcquisitionManagerControllerWindow::OnDisconnectFailDownload|CAcquisitionManagerControllerWindow::OnDisconnectFailUpload|CAcquisitionManagerControllerWindow::OnDisconnectFailDelete|CAcquisitionManagerControllerWindow::DontAllowSuspend;

    return 0;
}


LRESULT CCommonProgressPage::OnWizNext( WPARAM, LPARAM )
{
    return 0;
}


LRESULT CCommonProgressPage::OnWizBack( WPARAM, LPARAM )
{
    return 0;
}

LRESULT CCommonProgressPage::OnReset( WPARAM, LPARAM )
{
    //
    // Cancel the current download
    //
    if (m_hCancelDownloadEvent)
    {
        SetEvent(m_hCancelDownloadEvent);
    }
    return 0;
}

LRESULT CCommonProgressPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CCommonFirstPage::OnEventNotification"));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}

bool CCommonProgressPage::QueryCancel(void)
{
    //
    //  Make sure this is the current page
    //
    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) != m_hWnd)
    {
        return true;
    }

    //
    // Pause the background thread
    //
    m_pControllerWindow->m_EventPauseBackgroundThread.Reset();

    //
    // Assume the user doesn't want to cancel
    //
    bool bResult = false;

    //
    // Set the querying user flag so the event handler won't change pages
    //
    m_bQueryingUser = true;

    //
    // We may be called on to switch pages when we are done here.  If so, this will be non-NULL then.
    //
    m_hSwitchToNextPage = NULL;

    //
    // Don't ask again if we've already asked
    //
    if (!m_pControllerWindow->m_bDownloadCancelled)
    {
        //
        // Ask the user if they want to cancel
        //
        if (CMessageBoxEx::IDMBEX_YES == CMessageBoxEx::MessageBox( m_hWnd, CSimpleString(IDS_CONFIRM_CANCEL_DOWNLOAD,g_hInstance), CSimpleString(IDS_ERROR_TITLE,g_hInstance), CMessageBoxEx::MBEX_YESNO|CMessageBoxEx::MBEX_ICONQUESTION ))
        {
            //
            // The user does want to cancel, so set the cancel event, set the cancel flag and return false
            //
            m_pControllerWindow->m_bDownloadCancelled = true;

            //
            // Tell the device to cancel the current operation
            //
            WiaUiUtil::IssueWiaCancelIO(m_pControllerWindow->m_pWiaItemRoot);
            
            //
            // Make sure the cancel button is disabled
            //
            EnableWindow( GetDlgItem( GetParent(m_hWnd), IDCANCEL ), FALSE );

            //
            // Set the event that tells the background thread to stop transferring images
            //
            if (m_hCancelDownloadEvent)
            {
                SetEvent(m_hCancelDownloadEvent);
            }

            //
            // Return true to indicate we are cancelling
            //
            bResult = true;
        }
    }

    //
    // If we are supposed to switch pages, switch now
    //
    if (m_hSwitchToNextPage)
    {
        PropSheet_SetCurSel( GetParent(m_hWnd), m_hSwitchToNextPage, -1 );
    }

    //
    // Reset the querying user flag so the event handler can change pages as needed
    //
    m_bQueryingUser = false;

    //
    // Unpause the background thread
    //
    m_pControllerWindow->m_EventPauseBackgroundThread.Signal();

    return bResult;
}

LRESULT CCommonProgressPage::OnQueryCancel( WPARAM, LPARAM )
{
    //
    // The user is not allowed to cancel out of this page
    //
    BOOL bResult = TRUE;

    //
    // Since we don't let them cancel in this page, just ignore the result
    //
    QueryCancel();


    return bResult;
}


LRESULT CCommonProgressPage::OnKillActive( WPARAM, LPARAM )
{
    //
    // If we cancelled, make sure we delete any already downloaded files here.
    //
    if (m_pControllerWindow->m_bDownloadCancelled)
    {
        m_pControllerWindow->m_DownloadedFileInformationList.DeleteAllFiles();
    }

    //
    // Make sure the cancel button is enabled
    //
    EnableWindow( GetDlgItem( GetParent(m_hWnd), IDCANCEL ), TRUE );

    return 0;
}


LRESULT CCommonProgressPage::OnQueryEndSession( WPARAM, LPARAM )
{
    bool bCancel = QueryCancel();
    if (bCancel)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

LRESULT CCommonProgressPage::OnSysColorChange( WPARAM wParam, LPARAM lParam )
{
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), TRUE, TRUE, GetSysColor(COLOR_WINDOW) );
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_COMPROG_CURRENTTHUMBNAIL ), TRUE, FALSE, GetSysColor(COLOR_WINDOW) );
    return 0;
}

LRESULT CCommonProgressPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CCommonProgressPage::OnThreadNotification( WPARAM wParam, LPARAM lParam )
{
    WTM_BEGIN_THREAD_NOTIFY_MESSAGE_HANDLERS()
    {
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_DOWNLOADIMAGE, OnNotifyDownloadImage );
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_DOWNLOADERROR, OnNotifyDownloadError );
    }
    WTM_END_THREAD_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CCommonProgressPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_KILLACTIVE,OnKillActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_RESET,OnReset);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_QUERYCANCEL,OnQueryCancel);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonProgressPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonProgressPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_QUERYENDSESSION, OnQueryEndSession );
        SC_HANDLE_DIALOG_MESSAGE( WM_SYSCOLORCHANGE, OnSysColorChange );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nThreadNotificationMessage, OnThreadNotification );
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comtrans.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMTRANS.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Transfer page.  Gets the destination path and filename.
 *
 *******************************************************************************/
#ifndef __COMTRANS_H_INCLUDED
#define __COMTRANS_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "mru.h"

class CCommonTransferPage
{
private:
    // Private data
    HWND                                               m_hWnd;
    UINT                                               m_nWiaEventMessage;
    CAcquisitionManagerControllerWindow               *m_pControllerWindow;
    CMruStringList                                     m_MruRootFilename;
    CMruDestinationData                                m_MruDirectory;
    bool                                               m_bUseSubdirectory;
    GUID                                               m_guidLastSelectedType;
    HFONT                                              m_hFontBold;

private:
    // No implementation
    CCommonTransferPage(void);
    CCommonTransferPage( const CCommonTransferPage & );
    CCommonTransferPage &operator=( const CCommonTransferPage & );

private:
    // Constructor and destructor
    explicit CCommonTransferPage( HWND hWnd );
    ~CCommonTransferPage(void);

private:
    // Miscellaneous functions
    CSimpleString GetFolderName( LPCITEMIDLIST pidl );
    LRESULT AddPathToComboBoxExOrListView( HWND hwndCombo, CDestinationData &Path, bool bComboBoxEx );
    void PopulateDestinationList(void);
    CDestinationData *GetCurrentDestinationFolder( bool bStore );
    bool ValidateFilename( LPCTSTR pszFilename );
    void DisplayProposedFilenames(void);
    void RestartFilenameInfoTimer(void);
    HWND ValidatePathAndFilename(void);
    bool StorePathAndFilename(void);
    bool ValidatePathname( LPCTSTR pszPath );
    void PopulateSaveAsTypeList( IWiaItem *pWiaItem );
    GUID *GetCurrentOutputFormat(void);
    void UpdateDynamicPaths( bool bSelectionChanged = false );
    CDestinationData::CNameData PrepareNameDecorationData( bool bUseCurrentSelection=false );

    // SHBrowseForFolder callback
    static int CALLBACK BrowseCallbackProc(HWND hWnd, UINT uMsg, LPARAM lParam, LPARAM lpData );

private:
    LRESULT OnEventNotification( WPARAM, LPARAM );

    // WM_COMMAND handlers
    void OnBrowseDestination( WPARAM, LPARAM );
    void OnCreateTopicalDirectory( WPARAM, LPARAM );
    void OnAdvanced( WPARAM, LPARAM );
    void OnRootNameChange( WPARAM, LPARAM );

    // WM_NOTIFY handlers
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnDestinationEndEdit( WPARAM, LPARAM );
    LRESULT OnImageTypeDeleteItem( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __COMTRANS_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\destdata.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       DESTDATA.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4/6/2000
 *
 *  DESCRIPTION: wrapper class to encapsulate plugins and directories
 *
 *******************************************************************************/

#ifndef __DESTDATA_H_INCLUDED
#define __DESTDATA_H_INCLUDED

#include <windows.h>
#include <uicommon.h>
#include "simidlst.h"
#include "simstr.h"



class CDestinationData
{
public:
    enum
    {
        APPEND_DATE_TO_PATH  = 0x00000001,
        APPEND_TOPIC_TO_PATH = 0x00000002,
        DECORATION_MASK      = 0x0000000F,
        SPECIAL_FOLDER       = 0x00000020
    };

    struct CNameData
    {
    public:
        CSimpleString strDate;
        CSimpleString strTopic;
        CSimpleString strDateAndTopic;
    };

private:
    CSimpleIdList    m_IdList;
    DWORD            m_dwFlags;
    CNameData        m_NameData;
    DWORD            m_dwCsidl;
    HICON            m_hSmallIcon;

public:
    CDestinationData(void)
      : m_dwFlags(0),
        m_dwCsidl(0)
    {
    }
    CDestinationData( const CDestinationData &other )
      : m_IdList(other.IdList()),
        m_dwFlags(other.Flags()),
        m_dwCsidl(other.Csidl())
    {
    }
    void AssignFromIdList( const CSimpleIdList &idList, DWORD dwDecorationFlags )
    {
        Destroy();

        //
        // Here is the list of special folders we want to display
        // with their short names.  Others will be stored as full paths
        // in PIDLs.
        //
        static const DWORD cs_SpecialFolders[] =
        {
            CSIDL_MYPICTURES,
            CSIDL_PERSONAL,
            CSIDL_COMMON_PICTURES
        };

        //
        // Try to find a matching PIDL in the list.
        //
        for (int i=0;i<ARRAYSIZE(cs_SpecialFolders);i++)
        {
            //
            // If we've found one, store the CSIDL and mark this one as a special folder.
            // Then exit the loop.
            //
            if (CSimpleIdList().GetSpecialFolder(NULL,cs_SpecialFolders[i]|CSIDL_FLAG_CREATE) == idList)
            {
                m_dwFlags |= SPECIAL_FOLDER;
                m_dwCsidl = cs_SpecialFolders[i];
                break;
            }
        }

        //
        // If we didn't find a special pidl, store it as a full path
        //
        if (!m_dwCsidl)
        {
            m_IdList = idList;
        }

        //
        // Add in any decoration flags
        //
        m_dwFlags |= dwDecorationFlags;
    }
    CDestinationData( LPITEMIDLIST pidl, DWORD dwDecorationFlags=0)
      : m_dwFlags(0),
        m_dwCsidl(0)
    {
        AssignFromIdList( pidl, dwDecorationFlags );
    }
    CDestinationData( CSimpleIdList idList, DWORD dwDecorationFlags=0 )
      : m_dwFlags(0),
        m_dwCsidl(0)
    {
        AssignFromIdList( idList, dwDecorationFlags );
    }
    CDestinationData( int nCsidl, DWORD dwDecorationFlags=0 )
      : m_dwFlags(dwDecorationFlags | SPECIAL_FOLDER),
        m_dwCsidl(static_cast<DWORD>(nCsidl))
    {
    }

    DWORD Flags(void) const
    {
        return m_dwFlags;
    }

    DWORD Csidl(void) const
    {
        return m_dwCsidl;
    }
    CDestinationData &operator=( const CDestinationData &other )
    {
        if (this != &other)
        {
            Destroy();
            m_IdList = other.IdList();
            m_dwFlags = other.Flags();
            m_dwCsidl = other.Csidl();
        }
        return *this;
    }
    ~CDestinationData(void)
    {
        Destroy();
    }
    void Destroy(void)
    {
        m_IdList.Destroy();
        m_dwFlags = 0;
        m_dwCsidl = 0;
        if (m_hSmallIcon)
        {
            DestroyIcon(m_hSmallIcon);
            m_hSmallIcon = NULL;
        }
    }

    const CSimpleIdList &IdList(void) const
    {
        return m_IdList;
    }
    bool IsSpecialFolder(void) const
    {
        if (m_dwFlags & SPECIAL_FOLDER)
        {
            return true;
        }
        return false;
    }
    bool operator==( const CDestinationData &other ) const
    {
        if (IsSpecialFolder() && other.IsSpecialFolder())
        {
            if (Csidl() == other.Csidl())
            {
                if ((Flags() & DECORATION_MASK) == (other.Flags() & DECORATION_MASK))
                {
                    return true;
                }
            }
            return false;
        }
        else if (m_IdList.Name() == other.IdList().Name())
        {
            if ((Flags() & DECORATION_MASK) == (other.Flags() & DECORATION_MASK))
            {
                return true;
            }
        }
        return false;
    }
    bool GetDecoration( CSimpleString &strResult, const CNameData &NameData ) const
    {
        if ((Flags() & DECORATION_MASK)==(APPEND_TOPIC_TO_PATH|APPEND_DATE_TO_PATH))
        {
            strResult = NameData.strDateAndTopic;
        }
        else if ((Flags() & DECORATION_MASK)==APPEND_DATE_TO_PATH)
        {
            strResult = NameData.strDate;
        }
        else if ((Flags() & DECORATION_MASK)==APPEND_TOPIC_TO_PATH)
        {
            strResult = NameData.strTopic;
        }
        return (strResult.Length() != 0);
    }
    void AppendDecoration( CSimpleString &strResult, const CNameData &NameData ) const
    {
        if ((Flags() & DECORATION_MASK)==(APPEND_TOPIC_TO_PATH|APPEND_DATE_TO_PATH))
        {
            strResult += TEXT("\\");
            strResult += NameData.strDateAndTopic;
        }
        else if ((Flags() & DECORATION_MASK)==APPEND_DATE_TO_PATH)
        {
            strResult += TEXT("\\");
            strResult += NameData.strDate;
        }
        else if ((Flags() & DECORATION_MASK)==APPEND_TOPIC_TO_PATH)
        {
            strResult += TEXT("\\");
            strResult += NameData.strTopic;
        }
    }
    CSimpleString Path( const CNameData &NameData ) const
    {
        CSimpleString strResult;

        if (IsSpecialFolder())
        {
            strResult = CSimpleIdList().GetSpecialFolder(NULL,m_dwCsidl|CSIDL_FLAG_CREATE).Name();
            AppendDecoration( strResult, NameData );
        }
        else
        {
            strResult = m_IdList.Name();
            AppendDecoration( strResult, NameData );
        }
        return strResult;
    }
    bool IsValidFileSystemPath( const CNameData &NameData ) const
    {
        bool bResult = true;
        CSimpleString strDecoration;
        if (GetDecoration( strDecoration, NameData ))
        {
            for (LPCTSTR pszCurr = strDecoration.String();pszCurr && *pszCurr && bResult;pszCurr = CharNext(pszCurr))
            {
                if (*pszCurr == TEXT(':') ||
                    *pszCurr == TEXT('\\') ||
                    *pszCurr == TEXT('/') ||
                    *pszCurr == TEXT('?') ||
                    *pszCurr == TEXT('"') ||
                    *pszCurr == TEXT('<') ||
                    *pszCurr == TEXT('>') ||
                    *pszCurr == TEXT('|') ||
                    *pszCurr == TEXT('*'))
                {
                    bResult = false;
                }
            }
        }
        return bResult;
    }
    bool operator!=( const CDestinationData &other ) const
    {
        return ((*this == other) == false);
    }
    bool IsValid(void) const
    {
        if (IsSpecialFolder())
        {
            return true;
        }
        else
        {
            return m_IdList.IsValid();
        }
    }
    HICON SmallIcon()
    {
        if (m_hSmallIcon)
        {
            return m_hSmallIcon;
        }

        if (IsValid())
        {
            if (IsSpecialFolder())
            {
                //
                // Get the folder's small icon
                //
                SHFILEINFO shfi = {0};
                HIMAGELIST hShellImageList = reinterpret_cast<HIMAGELIST>(SHGetFileInfo( reinterpret_cast<LPCTSTR>(CSimpleIdList().GetSpecialFolder(NULL,m_dwCsidl|CSIDL_FLAG_CREATE).IdList()), 0, &shfi, sizeof(shfi), SHGFI_SMALLICON | SHGFI_ICON | SHGFI_PIDL ));
                if (hShellImageList)
                {
                    m_hSmallIcon = shfi.hIcon;
                }
            }
            else
            {
                //
                // Get the folder's small icon
                //
                SHFILEINFO shfi = {0};
                HIMAGELIST hShellImageList = reinterpret_cast<HIMAGELIST>(SHGetFileInfo( reinterpret_cast<LPCTSTR>(m_IdList.IdList()), 0, &shfi, sizeof(shfi), SHGFI_SMALLICON | SHGFI_ICON | SHGFI_PIDL ));
                if (hShellImageList)
                {
                    m_hSmallIcon = shfi.hIcon;
                }
            }
        }
        return m_hSmallIcon;
    }
    CSimpleString DisplayName( const CNameData &NameData )
    {
        CSimpleString strDisplayName;

        //
        // Get the folder's display name
        //
        if (IsSpecialFolder())
        {
            SHFILEINFO shfi = {0};
            if (SHGetFileInfo( reinterpret_cast<LPCTSTR>(CSimpleIdList().GetSpecialFolder(NULL,m_dwCsidl|CSIDL_FLAG_CREATE).IdList()), 0, &shfi, sizeof(shfi), SHGFI_PIDL | SHGFI_DISPLAYNAME ))
            {
                strDisplayName = shfi.szDisplayName;
            }
            AppendDecoration( strDisplayName, NameData );
        }
        else if (m_IdList.IsValid())
        {
            TCHAR szPath[MAX_PATH];
            if (SHGetPathFromIDList( m_IdList.IdList(), szPath ))
            {
                strDisplayName = szPath;
            }
            AppendDecoration( strDisplayName, NameData );
        }
        return strDisplayName;
    }
    UINT RegistryDataSize(void) const
    {
        if (m_dwCsidl)
        {
            return sizeof(DWORD) + sizeof(DWORD);
        }
        else
        {
            return sizeof(DWORD) + sizeof(DWORD) + m_IdList.Size();
        }
    }
    UINT GetRegistryData( PBYTE pData, UINT nLength ) const
    {
        UINT nResult = 0;
        if (pData)
        {
            if (nLength >= RegistryDataSize())
            {
                if (IsSpecialFolder())
                {
                    CopyMemory(pData,&m_dwFlags,sizeof(DWORD));
                    pData += sizeof(DWORD);

                    CopyMemory( pData, &m_dwCsidl, sizeof(DWORD));
                }
                else
                {
                    CopyMemory(pData,&m_dwFlags,sizeof(DWORD));
                    pData += sizeof(DWORD);

                    DWORD dwSize = m_IdList.Size();
                    CopyMemory(pData,&dwSize,sizeof(DWORD));
                    pData += sizeof(DWORD);

                    CopyMemory(pData,m_IdList.IdList(),dwSize);
                }
                nResult = RegistryDataSize();
            }
        }
        return nResult;
    }
    UINT SetRegistryData( PBYTE pData, UINT nLength )
    {
        UINT nResult = 0;

        Destroy();

        if (pData)
        {
            //
            // Copy the flags
            //
            CopyMemory( &m_dwFlags, pData, sizeof(DWORD) );
            pData += sizeof(DWORD);
            nLength -= sizeof(DWORD);

            //
            // If this is a web destination, we already have what we need
            //
            if (m_dwFlags & SPECIAL_FOLDER)
            {
                CopyMemory(&m_dwCsidl,pData,sizeof(DWORD));
                nLength -= sizeof(DWORD);
                nResult = nLength;
            }
            else
            {
                DWORD dwPidlLength = 0;
                CopyMemory(&dwPidlLength,pData,sizeof(DWORD));
                pData += sizeof(DWORD);
                nLength -= sizeof(DWORD);
                if (nLength >= dwPidlLength)
                {
                    m_IdList = CSimpleIdList(pData,dwPidlLength);
                    if (m_IdList.IsValid())
                    {
                        nResult = nLength;
                    }
                }
            }
        }
        return nResult;
    }
};

#endif // __DESTDATA_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\eventprompt.cpp ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1999
//
//  File:       eventprompt.cpp
//
//--------------------------------------------------------------------------
#include <precomp.h>
#pragma hdrstop
#include "eventprompt.h"
#include "resource.h"
#include "wiacsh.h"
#include "psutil.h"
//


#define COL_NAME           0
#define COL_DESCRIPTION    1

const UINT c_auTileColumns[] = {COL_NAME, COL_DESCRIPTION};
const UINT c_auTileSubItems[] = {COL_DESCRIPTION};

static const DWORD HelpIds [] =
{
    IDC_EVENTNAME, IDH_WIA_EVENT_OCCURRED,
    IDC_HANDLERLIST, IDH_WIA_PROGRAM_LIST,
    IDC_NOPROMPT, IDH_WIA_ALWAYS_USE,
    IDOK, IDH_OK,
    IDCANCEL, IDH_CANCEL,
    0,0
};

INT_PTR CALLBACK
CEventPromptDlg::DlgProc (HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
{
    CEventPromptDlg *pThis;
    pThis = reinterpret_cast<CEventPromptDlg*>(GetWindowLongPtr(hwnd,DWLP_USER));
    switch (msg)
    {
        case WM_INITDIALOG:

            SetWindowLongPtr (hwnd, DWLP_USER, lp);
            pThis = reinterpret_cast<CEventPromptDlg*>(lp);
            pThis->m_hwnd = hwnd;
            pThis->OnInit ();
            
            //
            // Initially disable the OK button, unless there is something selected
            //
            EnableWindow(GetDlgItem(hwnd,IDOK),(0!=ListView_GetSelectedCount(GetDlgItem(hwnd,IDC_HANDLERLIST))));

            return TRUE;

        case WM_COMMAND:
            if (pThis)
            {
                return pThis->OnCommand(HIWORD(wp), LOWORD(wp));
            }
            break;

        case WM_DESTROY:
            {
                //
                // Delete the listview's image list
                //
                HIMAGELIST hImageList = ListView_SetImageList(GetDlgItem(hwnd,IDC_HANDLERLIST), NULL, LVSIL_NORMAL);
                if (hImageList)
                {
                    ImageList_Destroy(hImageList);
                }

                if (pThis)
                {
                    pThis->m_PromptData->Close();
                }

                SetWindowLongPtr(hwnd, DWLP_USER, NULL);
            }
            return TRUE;

        case WM_HELP:
            WiaHelp::HandleWmHelp( wp, lp, HelpIds );
            return TRUE;

        case WM_CONTEXTMENU:
            WiaHelp::HandleWmContextMenu( wp, lp, HelpIds );
            return TRUE;

        case WM_NOTIFY:
             {
                 //
                 // Get the notification struct
                 //
                 NMHDR *pNmHdr = reinterpret_cast<NMHDR*>(lp);
                 if (pNmHdr)
                 {
                     //
                     // Is this the handler listview?
                     //
                     if (IDC_HANDLERLIST == pNmHdr->idFrom)
                     {
                         //
                         // Get the listview notification stuff
                         //
                         NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW*>(lp);

                         //
                         // If this is an item changed notification message
                         //
                         if (LVN_ITEMCHANGED == pNmHdr->code)
                         {
                             //
                             // If the state changed
                             //
                             if (pNmListView->uChanged & LVIF_STATE)
                             {
                                 //
                                 // Enable the OK button iff there is a selected item
                                 //
                                 EnableWindow(GetDlgItem(hwnd,IDOK),(0!=ListView_GetSelectedCount(GetDlgItem(hwnd,IDC_HANDLERLIST))));
                                 return TRUE;
                             }
                         }
                         //
                         // Double click?
                         //
                         else if (NM_DBLCLK == pNmHdr->code)
                         {
                             //
                             // Check to make sure something is selected
                             //
                             if (ListView_GetSelectedCount(GetDlgItem(hwnd,IDC_HANDLERLIST)))
                             {
                                 //
                                 // Simulate an OK message
                                 //
                                 SendMessage( hwnd, WM_COMMAND, MAKEWPARAM(IDOK,BN_CLICKED), 0 );
                                 return TRUE;
                             }
                         }

                         //
                         // Deleting an item
                         //
                         else if (LVN_DELETEITEM == pNmHdr->code)
                         {
                             //
                             // Get the event data
                             //
                             WIA_EVENT_HANDLER *peh = reinterpret_cast<WIA_EVENT_HANDLER*>(pNmListView->lParam);
                             if (peh)
                             {
                                 //
                                 // Free the bstrings
                                 //
                                 if (peh->bstrDescription)
                                 {
                                     SysFreeString (peh->bstrDescription);
                                 }
                                 if (peh->bstrIcon)
                                 {
                                     SysFreeString (peh->bstrIcon);
                                 }
                                 if (peh->bstrName)
                                 {
                                     SysFreeString (peh->bstrName);
                                 }

                                 //
                                 // Free the structure
                                 //
                                 delete peh;
                             }
                             return TRUE;
                         }
                     }
                 }
             }
             break;

        default:
            break;
    }
    return FALSE;
}

void
CEventPromptDlg::OnInit ()
{
    WIA_PUSHFUNCTION(TEXT("CEventPromptDlg::OnInit"));
    // update the shared memory section indicating we exist
    // use a unique name for  the shared memory
    LPWSTR wszGuid;
    StringFromCLSID (m_pEventParameters->EventGUID, &wszGuid);
    CSimpleStringWide strSection(wszGuid);
    strSection.Concat (m_pEventParameters->strDeviceID);
    CoTaskMemFree (wszGuid);
    m_PromptData = new CSharedMemorySection<HWND>(CSimpleStringConvert::NaturalString(strSection), true);
    if (m_PromptData)
    {
        HWND *pData = m_PromptData->Lock();
        if (pData)
        {
            *pData = m_hwnd;
            m_PromptData->Release();
        }
    }
    // fill in the list of handlers
    m_pList = new CHandlerList (GetDlgItem(m_hwnd, IDC_HANDLERLIST));
    if (m_pList)
    {
        m_pList->FillList (m_pEventParameters->strDeviceID,
                           m_pEventParameters->EventGUID);

    }
    // Set the dialog's caption to be the name of the device
    SetWindowText (m_hwnd, CSimpleStringConvert::NaturalString(m_pEventParameters->strDeviceDescription));

    // Set the event description text
    SetDlgItemText (m_hwnd, IDC_EVENTNAME, CSimpleStringConvert::NaturalString(m_pEventParameters->strEventDescription));

    //
    // Disable the "always make this the handler" checkbox for low privilege users
    SC_HANDLE hSCM = ::OpenSCManager(NULL,NULL,SC_MANAGER_ALL_ACCESS);

    if (!hSCM) 
    {
        EnableWindow(GetDlgItem(m_hwnd, IDC_NOPROMPT), FALSE);
    }
    else
    {
        CloseServiceHandle(hSCM);
    }
}


INT_PTR
CEventPromptDlg::OnCommand (WORD wCode, WORD widItem)
{
    INT_PTR iRet = TRUE;
    // we only care about IDOK or IDCANCEL

    switch (widItem)
    {
        case IDOK:
            iRet = OnOK ();
            if (!iRet)
            {
                break;;
            }
            // fall through
        case IDCANCEL:
            EndDialog (m_hwnd, 1);
            break;
    }
    return iRet;
}


// When the user presses OK, invoke the selected application and make it
// the default if requested
INT_PTR
CEventPromptDlg::OnOK ()
{
    WIA_PUSHFUNCTION(TEXT("CEventPromptDlg::OnOK"));
    WIA_EVENT_HANDLER *pSelHandler = NULL;
    if (m_pList)
    {
        pSelHandler = m_pList->GetSelectedHandler ();
    }
    if (pSelHandler)
    {
        if (IsDlgButtonChecked (m_hwnd, IDC_NOPROMPT))
        {
            // Set this handler as the default
            SetDefaultHandler (pSelHandler);
        }
        if (!InvokeHandler(pSelHandler))
        {
            WIA_ERROR((TEXT("InvokeHandler failed")));
            return FALSE;
        }
    }
    return TRUE;
}


void
CEventPromptDlg::SetDefaultHandler (WIA_EVENT_HANDLER *pHandler)
{
    WIA_PUSHFUNCTION(TEXT("CEventPromptDlg::SetDefaultHandler"));
    CComPtr<IWiaDevMgr> pDevMgr;


    if (SUCCEEDED(CoCreateInstance (CLSID_WiaDevMgr,
                                    NULL,
                                    CLSCTX_LOCAL_SERVER,
                                    IID_IWiaDevMgr,
                                    reinterpret_cast<LPVOID*>(&pDevMgr))))
    {


            pDevMgr->RegisterEventCallbackCLSID (WIA_SET_DEFAULT_HANDLER,
                                                 CComBSTR(m_pEventParameters->strDeviceID),
                                                 &m_pEventParameters->EventGUID,
                                                 &pHandler->guid,
                                                 pHandler->bstrName,
                                                 pHandler->bstrDescription,
                                                 pHandler->bstrIcon);


    }
}

bool
CEventPromptDlg::InvokeHandler(WIA_EVENT_HANDLER *pHandler)
{
    WIA_PUSHFUNCTION(TEXT("CEventPromptDlg::InvokeHandler"));
    CComPtr<IWiaEventCallback> pCallback;

    if (pHandler->bstrCommandline) {

        PROCESS_INFORMATION pi;
        STARTUPINFO si;

        TCHAR szCommand[MAX_PATH*2];
        ZeroMemory (&si, sizeof(si));
        ZeroMemory (&pi, sizeof(pi));
        si.cb = sizeof(si);
        si.wShowWindow = SW_SHOW;

        #ifdef UNICODE
        wcscpy (szCommand, pHandler->bstrCommandline);
        #else
        WideCharToMultiByte (CP_ACP, 0,
                             pHandler->bstrCommandline, -1,
                             szCommand, ARRAYSIZE(szCommand),
                             NULL, NULL);
        #endif

        // Trace(TEXT("Command line for STI app is %s"), szCommand);
        if (CreateProcess (NULL,
                           szCommand,
                           NULL,
                           NULL,
                           FALSE,
                           0,
                           NULL,
                           NULL,
                           &si,
                           &pi))
        {
            CloseHandle (pi.hProcess);
            CloseHandle (pi.hThread);

            return true;
        }
        else
        {
            WIA_PRINTHRESULT((HRESULT_FROM_WIN32(GetLastError()),TEXT("Execution of pHandler->bstrCommandline [%ws] FAILED"),pHandler->bstrCommandline));
        }
    }
    else
    {

        HRESULT hr = CoCreateInstance(pHandler->guid,
                                       NULL,
                                       CLSCTX_LOCAL_SERVER,
                                       IID_IWiaEventCallback,
                                       reinterpret_cast<LPVOID*>(&pCallback));
        if (SUCCEEDED(hr))
        {
            hr = pCallback->ImageEventCallback (&m_pEventParameters->EventGUID,
                                                CComBSTR(m_pEventParameters->strEventDescription),
                                                CComBSTR(m_pEventParameters->strDeviceID),
                                                CComBSTR(m_pEventParameters->strDeviceDescription),
                                                m_pEventParameters->dwDeviceType,
                                                CComBSTR(m_pEventParameters->strFullItemName),
                                                &m_pEventParameters->ulEventType,
                                                m_pEventParameters->ulReserved);

        }
        if (FAILED(hr))
        {
            // inform the user something went wrong
            UIErrors::ReportMessage(m_hwnd,g_hInstance,
                                    NULL,
                                    MAKEINTRESOURCE(IDS_HANDLERERR_CAPTION),
                                    MAKEINTRESOURCE(IDS_HANDLERERR),
                                    MB_OK);

        }
        else
        {
            return true;
        }
    }

    return false;

}


// Parse the bstrIconPath to get the image name and resource id
// Note that -1 is not a valid id for ExtractIconEx
int
AddIconToImageList (HIMAGELIST himl, BSTR strIconPath)
{
    int iRet = 0;


    TCHAR szPath[MAX_PATH];
    LONG  nIcon;
    INT   nComma=0;
    HICON hIcon = NULL;
    HRESULT hr;

    if (!strIconPath)
    {
        return 0;
    }
    while (strIconPath[nComma] && strIconPath[nComma] != L',')
    {
        nComma++;
    }
    if (strIconPath[nComma])
    {
        ZeroMemory (szPath, sizeof(szPath));
        nIcon = wcstol (strIconPath+nComma+1, NULL, 10);
#ifdef UNICODE
        wcsncpy (szPath, strIconPath, nComma);
        *(szPath+nComma)=L'\0';
#else
        WideCharToMultiByte (CP_ACP,
                             0,
                             strIconPath, nComma,
                             szPath, MAX_PATH,
                             NULL,NULL);
#endif

        ExtractIconEx (szPath, nIcon, &hIcon, NULL, 1);


        if (hIcon)
        {
            iRet = ImageList_AddIcon (himl, hIcon);
            DestroyIcon (hIcon);
        }
    }

    return iRet;
}

static int CALLBACK HandlerListCompareFunction( LPARAM lParam1, LPARAM lParam2, LPARAM )
{
    int nResult = 0;
    LVITEM *pItem1 = reinterpret_cast<LVITEM*>(lParam1);
    LVITEM *pItem2 = reinterpret_cast<LVITEM*>(lParam2);
    if (pItem1 && pItem2 && pItem1->pszText && pItem2->pszText)
    {
        int nCompareResult = CompareString( LOCALE_USER_DEFAULT, NORM_IGNORECASE, pItem1->pszText, -1, pItem2->pszText, -1 );
        switch (nCompareResult)
        {
        case CSTR_LESS_THAN:
            nResult = -1;
            break;
        case CSTR_GREATER_THAN:
            nResult = 1;
            break;
        }
    }
    return nResult;
}

// Enumerate the installed handlers for the event and add them to the listview
// return the number of handlers we added
UINT
CHandlerList::FillList (const CSimpleStringWide &strDeviceId, GUID &guidEvent)
{
    WIA_PUSHFUNCTION(TEXT("CHandlerList::FillList"));
    CComPtr<IWiaDevMgr> pDevMgr;
    CComPtr<IWiaItem> pItem;
    UINT uRet = 0;
    //
    // Remove all existing items
    //
    ListView_DeleteAllItems(m_hwnd);
    if (SUCCEEDED(CoCreateInstance( CLSID_WiaDevMgr,
                                    NULL,
                                    CLSCTX_LOCAL_SERVER,
                                    IID_IWiaDevMgr,
                                    reinterpret_cast<LPVOID*>(&pDevMgr))))
    {
        if (SUCCEEDED(pDevMgr->CreateDevice(CComBSTR(strDeviceId.String()),
                                            &pItem)))
        {
            RECT rc = {0};
            LVTILEVIEWINFO lvtvi = {0};
            // set up the listview style
            ListView_SetView(m_hwnd, LV_VIEW_TILE);
            for (int i = 0; i < ARRAYSIZE(c_auTileColumns); ++i)
            {
                LVCOLUMN lvcolumn = {0};

                lvcolumn.mask = LVCF_SUBITEM;
                lvcolumn.iSubItem = c_auTileColumns[i];
                ListView_InsertColumn(m_hwnd, i, &lvcolumn);
            }

            GetClientRect(m_hwnd, &rc);

            lvtvi.cbSize = sizeof(lvtvi);
            lvtvi.dwMask = LVTVIM_TILESIZE | LVTVIM_COLUMNS;
            lvtvi.dwFlags = LVTVIF_FIXEDWIDTH;
    
            // Leave room for the scroll bar when setting tile sizes or listview gets screwed up.
            lvtvi.sizeTile.cx = ((rc.right - rc.left) - GetSystemMetrics(SM_CXVSCROLL));
            lvtvi.cLines = ARRAYSIZE(c_auTileSubItems);
            ListView_SetTileViewInfo(m_hwnd, &lvtvi);

            CComPtr<IEnumWIA_DEV_CAPS> pEnum;
            if (SUCCEEDED(pItem->EnumRegisterEventInfo(0,
                                                       &guidEvent,
                                                       &pEnum)) )
            {

                WIA_EVENT_HANDLER *pHandler;
                ULONG ul;
                LVITEM lvi = {0};
                HICON hicon;
                HRESULT hr = NOERROR;
                CSimpleString strText;
                // Create a new imagelist
                HIMAGELIST hImageList = ImageList_Create (GetSystemMetrics(SM_CXICON),
                                           GetSystemMetrics(SM_CYICON),
                                           PrintScanUtil::CalculateImageListColorDepth() | ILC_MASK,
                                           2,
                                           2);
                // Add the "default" icon
                hicon =reinterpret_cast<HICON>(LoadImage (g_hInstance,
                                                          MAKEINTRESOURCE(IDI_SCANCAM),
                                                          IMAGE_ICON,
                                                          GetSystemMetrics(SM_CXICON),
                                                          GetSystemMetrics(SM_CYICON),
                                                          LR_SHARED | LR_DEFAULTCOLOR));
                ImageList_AddIcon (hImageList, hicon);
                SendMessage (m_hwnd, LVM_SETIMAGELIST, LVSIL_NORMAL,
                             reinterpret_cast<LPARAM>(hImageList));
                // enum the items and add them to the listview
                
                lvi.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM;

                while (S_OK == hr)
                {
                    pHandler = new WIA_EVENT_HANDLER;
                    if (!pHandler)
                    {
                        break;
                    }
                    hr = pEnum->Next (1, pHandler, &ul);

                    if (IsEqualCLSID(pHandler->guid, CLSID_EventPrompter) ||
                        IsEqualCLSID(pHandler->guid, WIA_EVENT_HANDLER_NO_ACTION) ||
                        IsEqualCLSID(pHandler->guid, WIA_EVENT_HANDLER_PROMPT) ||
                        !lstrcmpiW(pHandler->bstrName, L"Internal"))
                    {
                        delete pHandler;
                        continue;
                    }

                    if (S_OK == hr)
                    {
                        // get the string
                        strText = CSimpleStringConvert::NaturalString (CSimpleStringWide(pHandler->bstrName));
                        lvi.pszText = const_cast<LPTSTR>(strText.String());
                        lvi.lParam = reinterpret_cast<LPARAM>(pHandler);
                        // get the icon
                        lvi.iImage = AddIconToImageList (hImageList, pHandler->bstrIcon);
                        // get the index
                        lvi.iItem = ListView_GetItemCount(m_hwnd);
                        // add the item
                        int nIndex = ListView_InsertItem(m_hwnd, &lvi);
                        if (-1 != nIndex)
                        {   
                            // add the description subitem
                            strText = CSimpleStringConvert::NaturalString (CSimpleStringWide(pHandler->bstrDescription));
                            LVTILEINFO lvti = {0};
                            lvti.cbSize = sizeof(LVTILEINFO);
                            lvti.iItem = nIndex;
                            lvti.cColumns = 1;
                            lvti.puColumns = (UINT*)c_auTileSubItems;
                            ListView_SetTileInfo(m_hwnd, &lvti);
                            ListView_SetItemText(m_hwnd, nIndex, 1, (LPTSTR)strText.String());
                            uRet++;
                        }
                    }
                    else
                    {
                        if (pHandler)
                        {
                            delete pHandler;
                        }
                    }
                }

                // Sort the list
                ListView_SortItems( m_hwnd, HandlerListCompareFunction, 0 );

                // set the default to the first item
                lvi.iItem = 0;
                lvi.mask = LVIF_STATE;
                lvi.stateMask = LVIS_FOCUSED|LVIS_SELECTED;
                lvi.state = LVIS_FOCUSED|LVIS_SELECTED;
                ListView_SetItem(m_hwnd, &lvi);
                ListView_EnsureVisible(m_hwnd, lvi.iItem, FALSE);
            }
        }
    }
    return uRet;
}

WIA_EVENT_HANDLER *
CHandlerList::GetSelectedHandler ()
{
    WIA_PUSHFUNCTION(TEXT("CHandlerList::GetSelectedHandler"));
    WIA_EVENT_HANDLER *pRet = NULL;

    int nIndex = ListView_GetNextItem( m_hwnd, -1, LVNI_SELECTED );
    if (-1 != nIndex)
    {
        LVITEM lvi = {0};
        lvi.mask = LVIF_PARAM;
        lvi.iItem = nIndex;
        if (ListView_GetItem(m_hwnd, &lvi))
        {
            pRet = reinterpret_cast<WIA_EVENT_HANDLER*>(lvi.lParam);
        }
    }
    return pRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\eventprompt.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1999
//
//  File:       eventprompt.h
//
//--------------------------------------------------------------------------

#ifndef _EVENTPROMPT_H_
#define _EVENTPROMPT_H_
#include <windows.h>
#include "wiaacmgr.h"
#include "acqmgrcw.h"
#include "evntparm.h"
#include "resource.h"
#include <commctrl.h>
// CHandlerList does all our comboboxex operations for the list of event handlers
class CHandlerList
{
private:
    HWND m_hwnd;

public:
    CHandlerList (HWND hwnd)
    : m_hwnd(hwnd)
    {
    }

    ~CHandlerList ()
    {
    }

    UINT FillList (const CSimpleStringWide &strDeviceId, GUID &guidEvent);
    WIA_EVENT_HANDLER *GetSelectedHandler ();
};

// CEventPromptDlg does the work of asking the user which handler to run
// and invoking the specified handler
class CEventPromptDlg
{
private:
    CHandlerList *m_pList;
    HWND m_hwnd;

    CSharedMemorySection<HWND> *m_PromptData;
    CEventParameters *m_pEventParameters;
    CEventPromptDlg (CEventParameters *pEventParameters)
    : m_pEventParameters (pEventParameters), m_hwnd(NULL), m_PromptData(NULL),
      m_pList(NULL)
    {
    }
    ~CEventPromptDlg ()
    {
        if (m_PromptData)
        {
            delete m_PromptData;
        }
        if (m_pList)
        {
            delete m_pList;
        }
    }

    static INT_PTR CALLBACK DlgProc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp);
    void OnInit ();
    INT_PTR OnCommand (WORD wCode, WORD widItem);
    INT_PTR OnOK ();
    void SetDefaultHandler (WIA_EVENT_HANDLER *pHandler);
    bool InvokeHandler (WIA_EVENT_HANDLER *pHandler);

public:
    static HRESULT Invoke (HINSTANCE hInst, CEventParameters *pEventParameters)
    {
        WIA_PUSHFUNCTION(TEXT("CEventPromptDlg::Invoke"));
        
        HRESULT hr = S_OK;
        // Register common controls
        INITCOMMONCONTROLSEX icce;
        icce.dwSize = sizeof(icce);
        icce.dwICC  = ICC_USEREX_CLASSES ;
        InitCommonControlsEx( &icce );
        CEventPromptDlg *pDlg = new CEventPromptDlg (pEventParameters);
        if (!pDlg)
        {
            hr = E_OUTOFMEMORY;
        }
        else if (-1 == DialogBoxParam(hInst, MAKEINTRESOURCE(IDD_EVENTPROMPT), NULL, DlgProc,reinterpret_cast<LPARAM>(pDlg)))
        {
            DWORD dw = GetLastError();
            hr =  HRESULT_FROM_WIN32(dw);
        }
        if (pDlg)
        {
            delete pDlg;
        }
        return hr;
    }
}; //CEventPromptDlg

// CPromptThread invokes the event handler prompt dialog
class CPromptThread
{
private:
    CEventParameters m_EventParameters;

    CPromptThread (const CEventParameters &EventParameters)
    : m_EventParameters (EventParameters)
    {
    }

    ~CPromptThread ()
    {
    }

    HRESULT Run(void)
    {
        WIA_PUSHFUNCTION(TEXT("CPromptThread::Run"));
        HRESULT hr = CoInitialize (NULL);
        if (SUCCEEDED(hr))
        {
            hr = CEventPromptDlg::Invoke (g_hInstance, &m_EventParameters);
            CoUninitialize();
        }
        return hr;
    }

    static DWORD ThreadProc( LPVOID pvParam )
    {
        WIA_PUSHFUNCTION(TEXT("CPromptThread::ThreadProc"));
#if !defined(DBG_GENERATE_PRETEND_EVENT)
        _Module.Lock();
#endif
        DWORD dwResult = static_cast<DWORD>(E_FAIL);
        CPromptThread *pThread = reinterpret_cast<CPromptThread*>(pvParam);
        if (pThread)
        {
            dwResult = static_cast<DWORD>(pThread->Run());
            delete pThread;
        }
#if !defined(DBG_GENERATE_PRETEND_EVENT)
        _Module.Unlock();
#endif
        return dwResult;
    }

public:
    static HANDLE Create( const CEventParameters &EventParameters )
    {
        WIA_PUSHFUNCTION(TEXT("CPromptThread::Create"));
        HANDLE hThreadResult = NULL;
        CPromptThread *pThread = new CPromptThread(EventParameters);
        if (pThread)
        {
            DWORD dwThreadId;
            hThreadResult = CreateThread( NULL, 0, ThreadProc, pThread, 0, &dwThreadId );
            if (!hThreadResult)
            {
                delete pThread;
            }
        }
        return hThreadResult;
    }
}; // CPromptThread

// CEventPrompt responds to the event by asking the user which event handler
// to run
class ATL_NO_VTABLE CEventPrompt :
    public CComObjectRootEx<CComSingleThreadModel>,
    public CComCoClass<CEventPrompt, &CLSID_EventPrompter>,
    public IWiaEventCallback
{
public:
    CEventPrompt()
    {
    }
    ~CEventPrompt()
    {
    }

    DECLARE_REGISTRY_RESOURCEID(IDR_EVENTPROMPT)
    DECLARE_PROTECT_FINAL_CONSTRUCT()

    BEGIN_COM_MAP(CEventPrompt)
        COM_INTERFACE_ENTRY(IWiaEventCallback)
    END_COM_MAP()


public:
    // IWiaEventCallback
    STDMETHODIMP ImageEventCallback (const GUID __RPC_FAR *pEventGUID,
                                      BSTR bstrEventDescription,
                                      BSTR bstrDeviceID,
                                      BSTR bstrDeviceDescription,
                                      DWORD dwDeviceType,
                                      BSTR  bstrFullItemName,
                                      ULONG *pulEventType,
                                      ULONG ulReserved)
    {
        WIA_PUSHFUNCTION(TEXT("CEventPrompt::ImageEventCallback"));
        bool bRun = true;

        // Find out if we already have a prompt for this event open.
        // If the user just keeps pressing the same button we ignore
        // successive presses until the choice is made.
        CSharedMemorySection<HWND> PromptSharedMemory;
        LPWSTR wszGuid;
        StringFromCLSID (*pEventGUID, &wszGuid);
        // use a unique name for  the shared memory
        CSimpleStringWide strSection(wszGuid);
        strSection.Concat (CSimpleStringWide(bstrDeviceID));
        CoTaskMemFree (wszGuid);
        if (CSharedMemorySection<HWND>::SmsOpened == PromptSharedMemory.Open(CSimpleStringConvert::NaturalString(strSection), false))
        {
            HWND *pHwnd = PromptSharedMemory.Lock();
            if (pHwnd)
            {
                bRun = false;
                if (*pHwnd && IsWindow(*pHwnd))
                {
                    SetForegroundWindow(*pHwnd);
                }
                PromptSharedMemory.Release();
            }
        }
        if (bRun)
        {
            CEventParameters EventParameters;
            EventParameters.EventGUID = *pEventGUID;
            EventParameters.strEventDescription = static_cast<LPCWSTR>(bstrEventDescription);
            EventParameters.strDeviceID = static_cast<LPCWSTR>(bstrDeviceID);
            EventParameters.strDeviceDescription = static_cast<LPCWSTR>(bstrDeviceDescription);
            EventParameters.ulEventType = *pulEventType;
            EventParameters.ulReserved = ulReserved;
            EventParameters.strFullItemName = bstrFullItemName;

            HANDLE hThread = CPromptThread::Create (EventParameters);
            if (hThread)
            {
                CloseHandle(hThread);
            }
        }
        return S_OK;
    }
}; // CEventPrompt

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\comtrans.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       COMTRANS.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Transfer page.  Gets the destination path and filename.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <psutil.h>
#include "mboxex.h"
#include "comtrans.h"
#include "simcrack.h"
#include "waitcurs.h"
#include "resource.h"
#include "wiatextc.h"
#include "flnfile.h"
#include "itranhlp.h"
#include "itranspl.h"
#include "isuppfmt.h"
#include "wiadevdp.h"
#include "destdata.h"
#include "simrect.h"
#include "wiaffmt.h"

//
// We use this instead of GetSystemMetrics(SM_CXSMICON)/GetSystemMetrics(SM_CYSMICON) because
// large "small" icons wreak havoc with dialog layout
//
#define SMALL_ICON_SIZE 16

//
// Maximum length of the filename we allow
//
#define MAXIMUM_ALLOWED_FILENAME_LENGTH 64

//
// These are the formats we will put in the save as list
//
static const GUID *g_pSupportedOutputFormats[] =
{
    &WiaImgFmt_JPEG,
    &WiaImgFmt_BMP,
    &WiaImgFmt_TIFF,
    &WiaImgFmt_PNG
};

//
// Sole constructor
//
CCommonTransferPage::CCommonTransferPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE)),
    m_pControllerWindow(NULL),
    m_bUseSubdirectory(true),
    m_hFontBold(NULL)
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::CCommonTransferPage")));
}

//
// Destructor
//
CCommonTransferPage::~CCommonTransferPage(void)
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::~CCommonTransferPage")));
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
    m_hFontBold = NULL;
}

LRESULT CCommonTransferPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnInitDialog")));
    //
    // Open the registry key where we store various things
    //
    CSimpleReg reg( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, false );

    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    //
    // Get the right color-depth flag for this display
    //
    int nImageListColorDepth = PrintScanUtil::CalculateImageListColorDepth();

    //
    // Set the path control's image list
    //
    HIMAGELIST hDestImageList = ImageList_Create( SMALL_ICON_SIZE, SMALL_ICON_SIZE, nImageListColorDepth|ILC_MASK, 30, 10 );
    if (hDestImageList)
    {
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CBEM_SETIMAGELIST, 0, reinterpret_cast<LPARAM>(hDestImageList) );
    }


    //
    // Only create the file type image list if this control exists
    //
    if (GetDlgItem(m_hWnd,IDC_TRANSFER_IMAGETYPE))
    {
        //
        // Set the file type's image list
        //
        HIMAGELIST hFileTypeImageList = ImageList_Create( SMALL_ICON_SIZE, SMALL_ICON_SIZE, nImageListColorDepth|ILC_MASK, 3, 3 );
        if (hFileTypeImageList)
        {
            SendDlgItemMessage( m_hWnd, IDC_TRANSFER_IMAGETYPE, CBEM_SETIMAGELIST, 0, reinterpret_cast<LPARAM>(hFileTypeImageList) );
        }
    }


    //
    // Get the last selected type
    // Assume JPEG if nothing is defined
    //
    GUID guidResult;
    if (sizeof(GUID) == reg.QueryBin( REG_STR_LASTFORMAT, (PBYTE)&guidResult, sizeof(GUID) ))
    {
        m_guidLastSelectedType = guidResult;
    }
    else
    {
        m_guidLastSelectedType = WiaImgFmt_JPEG;
    }

    //
    // Add the file types if we are dealing with a scanner
    //
    if (m_pControllerWindow->m_DeviceTypeMode == CAcquisitionManagerControllerWindow::ScannerMode && m_pControllerWindow->m_pCurrentScannerItem)
    {
        PopulateSaveAsTypeList(m_pControllerWindow->m_pCurrentScannerItem->WiaItem());
    }


    //
    // Read the MRU lists from the registry
    //
    m_MruDirectory.Read( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REG_STR_DIRNAME_MRU );
    m_MruRootFilename.Read( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REG_STR_ROOTNAME_MRU );

    //
    // Make sure we have a default filename
    //
    if (m_MruRootFilename.Empty())
    {
        m_MruRootFilename.Add( CSimpleString( IDS_DEFAULT_BASE_NAME, g_hInstance ) );
    }

    //
    // Populate the rootname list
    //
    m_MruRootFilename.PopulateComboBox(GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ));
    
    //
    // Ensure the first item in the rootname combobox is selected
    //
    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_SETCURSEL, 0, 0 );

    //
    // Make sure we have My Pictures+topic in the list, even if it has fallen off the end
    //
    CDestinationData DestDataMyPicturesTopic( CSIDL_MYPICTURES, CDestinationData::APPEND_TOPIC_TO_PATH );
    if (m_MruDirectory.Find(DestDataMyPicturesTopic) == m_MruDirectory.End())
    {
        m_MruDirectory.Append(DestDataMyPicturesTopic);
    }

    //
    // Make sure we have My Pictures+date+topic in the list, even if it has fallen off the end
    //
    CDestinationData DestDataMyPicturesDateTopic( CSIDL_MYPICTURES, CDestinationData::APPEND_DATE_TO_PATH|CDestinationData::APPEND_TOPIC_TO_PATH );
    if (m_MruDirectory.Find(DestDataMyPicturesDateTopic) == m_MruDirectory.End())
    {
        m_MruDirectory.Append(DestDataMyPicturesDateTopic);
    }


    //
    // Make sure we have My Pictures+date in the list, even if it has fallen off the end
    //
    CDestinationData DestDataMyPicturesDate( CSIDL_MYPICTURES, CDestinationData::APPEND_DATE_TO_PATH );
    if (m_MruDirectory.Find(DestDataMyPicturesDate) == m_MruDirectory.End())
    {
        m_MruDirectory.Append(DestDataMyPicturesDate);
    }

    //
    // Make sure we have My Pictures in the list, even if it has fallen off the end
    //
    CDestinationData DestDataMyPictures( CSIDL_MYPICTURES );
    if (m_MruDirectory.Find(DestDataMyPictures) == m_MruDirectory.End())
    {
        m_MruDirectory.Append(DestDataMyPictures);
    }

    //
    // Make sure we have Common Pictures in the list, even if it has fallen off the end
    //
    CDestinationData DestDataCommonPicturesTopic( CSIDL_COMMON_PICTURES );
    if (m_MruDirectory.Find(DestDataCommonPicturesTopic) == m_MruDirectory.End())
    {
        m_MruDirectory.Append(DestDataCommonPicturesTopic);
    }

    bool bCdBurnerAvailable = false;

    //
    // Try to instantiate the CD burner helper interface
    //
    CComPtr<ICDBurn> pCDBurn;
    HRESULT hr = CoCreateInstance( CLSID_CDBurn, NULL, CLSCTX_SERVER, IID_ICDBurn, (void**)&pCDBurn );
    if (SUCCEEDED(hr))
    {
        //
        // Get the drive letter of the available CD burner
        //
        WCHAR szDriveLetter[MAX_PATH];
        hr = pCDBurn->GetRecorderDriveLetter( szDriveLetter, ARRAYSIZE(szDriveLetter) );
        if (S_OK == hr && lstrlenW(szDriveLetter))
        {
            //
            // Make sure we have CD Burning in the list, even if it has fallen off the end
            //
            CDestinationData DestDataCDBurningArea( CSIDL_CDBURN_AREA );
            WIA_TRACE((TEXT("Adding DestDataCDBurningArea (%s)"),CSimpleIdList().GetSpecialFolder(m_hWnd,CSIDL_CDBURN_AREA).Name().String()));
            if (m_MruDirectory.Find(DestDataCDBurningArea) == m_MruDirectory.End())
            {
                m_MruDirectory.Append(DestDataCDBurningArea);
            }
            bCdBurnerAvailable = true;
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("pCDBurn->GetRecorderDriveLetter failed")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("CoCreateInstance on CLSID_CDBurn failed")));
    }

    //
    // If there is no CD available, remove CD burner from the list
    //
    if (!bCdBurnerAvailable)
    {
        m_MruDirectory.Remove(CDestinationData( CSIDL_CDBURN_AREA ));
    }

    //
    // Populate the controls with the MRU data
    //
    PopulateDestinationList();
    
    //
    // Limit the length of the filename
    //
    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_LIMITTEXT, MAXIMUM_ALLOWED_FILENAME_LENGTH, 0 );

    //
    // Figure out where we are storing per-device-type data
    //
    LPTSTR pszStoreInSubDirectory, pszSubdirectoryDated;
    bool bDefaultUseSubdirectory;
    switch (m_pControllerWindow->m_DeviceTypeMode)
    {
    case CAcquisitionManagerControllerWindow::ScannerMode:
        //
        // Scanners
        //
        pszStoreInSubDirectory = REG_STR_STORE_IN_SUBDIRECTORY_SCANNER;
        pszSubdirectoryDated = REG_STR_SUBDIRECTORY_DATED_SCANNER;
        bDefaultUseSubdirectory = false;
        break;

    default:
        //
        // Cameras and video cameras
        //
        pszStoreInSubDirectory = REG_STR_STORE_IN_SUBDIRECTORY_CAMERA;
        pszSubdirectoryDated = REG_STR_SUBDIRECTORY_DATED_CAMERA;
        bDefaultUseSubdirectory = true;
        break;
    };

    UpdateDynamicPaths();

    //
    // Fix up the behavior of ComboBoxEx32s
    //
    WiaUiUtil::SubclassComboBoxEx( GetDlgItem( m_hWnd, IDC_TRANSFER_DESTINATION ) );
    WiaUiUtil::SubclassComboBoxEx( GetDlgItem( m_hWnd, IDC_TRANSFER_IMAGETYPE ) );

    //
    // Bold the number prompts
    //
    m_hFontBold = WiaUiUtil::CreateFontWithPointSizeFromWindow( GetDlgItem( m_hWnd, IDC_TRANSFER_1 ), 0, true, false );
    if (m_hFontBold)
    {
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_1, WM_SETFONT, reinterpret_cast<WPARAM>(m_hFontBold), FALSE );
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_2, WM_SETFONT, reinterpret_cast<WPARAM>(m_hFontBold), FALSE );
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_3, WM_SETFONT, reinterpret_cast<WPARAM>(m_hFontBold), FALSE );
    }

    //
    // Use the nifty balloon help to warn the user about invalid characters
    //
    CComPtr<IShellFolder> pShellFolder;
    hr = SHGetDesktopFolder( &pShellFolder );
    if (SUCCEEDED(hr))
    {
        SHLimitInputCombo( GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ), pShellFolder );
    }

    return 0;
}

//
// Validate a pathname and print a message if it is invalid
//
bool CCommonTransferPage::ValidatePathname( LPCTSTR pszPath )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::ValidatePathname")));
    //
    // Check if the path is valid
    //
    if (!CAcquisitionManagerControllerWindow::DirectoryExists(pszPath))
    {
        //
        // Get the reason why it was invalid
        //
        DWORD dwLastError = GetLastError();
        WIA_PRINTHRESULT((HRESULT_FROM_WIN32(dwLastError),TEXT("error from DirectoryExists")));

        if (!CAcquisitionManagerControllerWindow::DirectoryExists(pszPath))
        {
            //
            // If it isn't valid, display a message box explaining why not
            //
            bool bRetry;
            switch (dwLastError)
            {
            case ERROR_NOT_READY:
                {
                    bRetry = (CMessageBoxEx::IDMBEX_OK == CMessageBoxEx::MessageBox( m_hWnd, CSimpleString().Format( IDS_REPLACE_REMOVEABLE_MEDIA, g_hInstance, pszPath ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OKCANCEL|CMessageBoxEx::MBEX_ICONWARNING ));
                }
                break;

            default:
                {
                    bRetry = (CMessageBoxEx::IDMBEX_YES == CMessageBoxEx::MessageBox( m_hWnd, CSimpleString().Format( IDS_COMTRANS_BAD_DIRECTORY, g_hInstance, pszPath ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_YESNO|CMessageBoxEx::MBEX_ICONQUESTION ));
                }
                break;
            }

            if (bRetry)
            {
                //
                // Try to create the directory
                //
                CAcquisitionManagerControllerWindow::RecursiveCreateDirectory( pszPath );

                //
                // Check now if it exists
                //
                if (!CAcquisitionManagerControllerWindow::DirectoryExists(pszPath))
                {
                    //
                    // If it doesn't, give up
                    //
                    CMessageBoxEx::MessageBox( m_hWnd, CSimpleString().Format( IDS_COMTRANS_BAD_DIRECTORY_2ND_TRY, g_hInstance, pszPath ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING );
                    return false;
                }
            }
            else return false;
        }
    }
    return true;
}

bool CCommonTransferPage::StorePathAndFilename(void)
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::StorePathAndFilename")));
    bool bResult = true;
    //
    // Get the base file name
    //
    CSimpleString strRootName;
    strRootName.GetWindowText( GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ) );

    //
    // Store the base name
    //
    lstrcpyn( m_pControllerWindow->m_szRootFileName, strRootName, ARRAYSIZE(m_pControllerWindow->m_szRootFileName) );

    //
    // Store the currently selected path
    //
    GetCurrentDestinationFolder( true );

    return bResult;
}


//
// We return an HWND in case of error, and the property sheet code will set the focus
// to that control.  If nothing bad happens, return NULL
//
HWND CCommonTransferPage::ValidatePathAndFilename(void)
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::ValidatePathAndFilename")));
    //
    // Get the base file name
    //
    CSimpleString strRootName;
    strRootName.GetWindowText( GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ) );
    strRootName.Trim();

    //
    // Get the default base name if none was entered
    //
    if (!strRootName.Length())
    {
        //
        // Display a message box to the user telling them their lovely filename is invalid,
        // then set the focus on the combobox edit control and select the text in the control
        //
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_EMPTYFILENAME, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING );

        //
        // Return the window handle of the invalid control
        //
        return GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME );
    }

    if (ValidateFilename(strRootName))
    {
        //
        // Store the base name
        //
        lstrcpyn( m_pControllerWindow->m_szRootFileName, strRootName, ARRAYSIZE(m_pControllerWindow->m_szRootFileName) );

        //
        // Add this base filename to the filename MRU
        //
        m_MruRootFilename.Add(strRootName);

        //
        // If the string is already in the list, remove it
        //
        LRESULT lRes = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_FINDSTRINGEXACT, -1, reinterpret_cast<LPARAM>(strRootName.String() ));
        if (lRes != CB_ERR)
        {
            SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_DELETESTRING, lRes, 0 );
        }

        //
        // Add the new string and make sure it is selected.
        //
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_INSERTSTRING, 0, reinterpret_cast<LPARAM>(strRootName.String() ));
        SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_SETCURSEL, 0, 0 );

        //
        // Get the currently selected path, and save it for the output code
        //
        CDestinationData *pDestinationData = GetCurrentDestinationFolder( true );
        if (pDestinationData)
        {
            //
            // Validate path.  We don't validate special folders, because if they don't exist, we will create them.
            //
            if (!pDestinationData->IsSpecialFolder() && !ValidatePathname(m_pControllerWindow->m_szDestinationDirectory))
            {
                // Return the window handle of the invalid control
                return GetDlgItem( m_hWnd, IDC_TRANSFER_DESTINATION );
            }

            //
            // Save the current destination
            //
            m_pControllerWindow->m_CurrentDownloadDestination = *pDestinationData;
        }
        //
        // Make sure this is the first pDestinationData in the list next time
        // Store the destination MRU
        //
        if (pDestinationData)
        {
            m_MruDirectory.Add( *pDestinationData );
            PopulateDestinationList();
        }
    }
    else
    {
        //
        // Display a message box to the user telling them their lovely filename is invalid,
        // then set the focus on the combobox edit control and select the text in the control
        //
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString().Format( IDS_INVALIDFILENAME, g_hInstance, strRootName.String() ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING );

        //
        // Return the window handle of the invalid control
        //
        return GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME );
    }
    //
    // NULL means OK
    //
    return NULL;
}


LRESULT CCommonTransferPage::OnWizNext( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnWizNext")));
    //
    // Make sure everything is OK.  If it isn't, return the offending window handle to prevent closing the wizard.
    //
    HWND hWndFocus = ValidatePathAndFilename();
    if (hWndFocus)
    {
        SetFocus(hWndFocus);
        return -1;
    }

    //
    // Make sure there are selected images
    //
    if (!m_pControllerWindow || !m_pControllerWindow->GetSelectedImageCount())
    {
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_NO_IMAGES_SELECTED, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONINFORMATION );
        return -1;
    }

    //
    // Check the length of the generated filename, in case they chose a really deeply nested directory
    //
    int nPathLength = lstrlen(m_pControllerWindow->m_szDestinationDirectory)            +  // Directory
                      lstrlen(m_pControllerWindow->m_szRootFileName)                    +  // Filename
                      CSimpleString().Format( IDS_NUMBER_MASK,g_hInstance, 0 ).Length() +  // Number
                      5                                                                 +  // Extension + dot
                      4                                                                 +  // .tmp file
                      10;                                                                  // Extra digits in number mask
    if (nPathLength >= MAX_PATH)
    {
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_PATH_TOO_LONG, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONINFORMATION );
        return reinterpret_cast<LRESULT>(GetDlgItem( m_hWnd, IDC_TRANSFER_DESTINATION ));
    }

    //
    // Store the information needed to do the download
    //
    GUID *pCurrFormat = GetCurrentOutputFormat();
    if (pCurrFormat)
    {
        m_pControllerWindow->m_guidOutputFormat = *pCurrFormat;
    }
    else
    {
        m_pControllerWindow->m_guidOutputFormat = IID_NULL;
    }

    //
    // Decide if we should delete the pictures after we download them
    //
    m_pControllerWindow->m_bDeletePicturesIfSuccessful = (SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DELETEAFTERDOWNLOAD, BM_GETCHECK, 0, 0 )==BST_CHECKED);

    //
    // Prepare the name data we will be using for this transfer
    //
    m_pControllerWindow->m_DestinationNameData = PrepareNameDecorationData(false);

    //
    // Return
    //
    return 0;
}

//
// handler for PSN_WIZBACK
//
LRESULT CCommonTransferPage::OnWizBack( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnWizBack")));
    return 0;
}


CDestinationData::CNameData CCommonTransferPage::PrepareNameDecorationData( bool bUseCurrentSelection )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::PrepareNameDecorationData")));
    CDestinationData::CNameData NameData;
    //
    // If bUseCurrentSelection is true, we need to use CB_GETLBTEXT, because we don't get a CBN_EDITCHANGE message
    // when the user changes the selection
    //
    if (bUseCurrentSelection)
    {
        //
        // Find the currently selected item
        //
        LRESULT nCurSel = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_GETCURSEL, 0, 0 );
        if (nCurSel != CB_ERR)
        {
            //
            // Figure out the length of this item
            //
            LRESULT nTextLen = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_GETLBTEXTLEN, nCurSel, 0 );
            if (CB_ERR != nTextLen)
            {
                //
                // Allocate enough space to hold the string
                //
                LPTSTR pszText = new TCHAR[nTextLen+1];
                if (pszText)
                {
                    //
                    // Get the string
                    //
                    if (CB_ERR != SendDlgItemMessage( m_hWnd, IDC_TRANSFER_ROOTNAME, CB_GETLBTEXT, nCurSel, reinterpret_cast<LPARAM>(pszText)))
                    {
                        //
                        // Save the string
                        //
                        NameData.strTopic = pszText;
                    }
                    //
                    // Free the string
                    //
                    delete[] pszText;
                }
            }
        }
    }
    //
    // If the topic string length is still zero, just get the window text from the edit control
    //
    if (!NameData.strTopic.Length())
    {
        NameData.strTopic.GetWindowText( GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ) );
    }
    NameData.strDate = CAcquisitionManagerControllerWindow::GetCurrentDate();
    NameData.strDateAndTopic = CSimpleString().Format( IDS_DATEANDTOPIC, g_hInstance, NameData.strDate.String(), NameData.strTopic.String() );
    return NameData;
}

//
// handler for PSN_SETACTIVE
//
LRESULT CCommonTransferPage::OnSetActive( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION(TEXT("CCommonTransferPage::OnSetActive"));

    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    //
    // Put up a wait cursor.  It can take a while to find out if any images can be deleted
    //
    CWaitCursor wc;

    //
    // Disable the delete button if none of the images can be deleted
    //
    if (!m_pControllerWindow->CanSomeSelectedImagesBeDeleted())
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_TRANSFER_DELETEAFTERDOWNLOAD ), FALSE );
    }
    else
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_TRANSFER_DELETEAFTERDOWNLOAD ), TRUE );
    }

    //
    // Clear the delete check box
    //
    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DELETEAFTERDOWNLOAD, BM_SETCHECK, BST_UNCHECKED, 0 );

    //
    // Allow next and back
    //
    PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_NEXT|PSWIZB_BACK );

    //
    // We do want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectGotoLastpage|CAcquisitionManagerControllerWindow::OnDisconnectFailDownload|CAcquisitionManagerControllerWindow::OnDisconnectFailUpload|CAcquisitionManagerControllerWindow::OnDisconnectFailDelete;

    //
    // Make sure all of the strings fit
    //
    WiaUiUtil::ModifyComboBoxDropWidth(GetDlgItem( m_hWnd, IDC_TRANSFER_ROOTNAME ));

    //
    // Make sure the paths are updated
    //
    UpdateDynamicPaths();

    return 0;
}


void CCommonTransferPage::PopulateSaveAsTypeList( IWiaItem *pWiaItem )
{
    WIA_PUSHFUNCTION(TEXT("CCommonTransferPage::PopulateSaveAsTypeList"));
    //
    // Get the list control
    //
    HWND hWndList = GetDlgItem( m_hWnd, IDC_TRANSFER_IMAGETYPE );
    if (hWndList)
    {
        //
        // Clear the combo box
        //
        SendMessage( hWndList, CB_RESETCONTENT, 0, 0 );

        //
        // Get the list control's image list
        //
        HIMAGELIST hComboBoxExImageList = reinterpret_cast<HIMAGELIST>(SendMessage( hWndList, CBEM_GETIMAGELIST, 0, 0 ));
        if (hComboBoxExImageList)
        {
            //
            // Get the default icon, in case we run into an unknown type
            //
            HICON hDefaultImageTypeIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDI_DEFTYPE), IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR ));

            //
            // Get the GDI Plus types we can convert to
            //
            CWiaFileFormatList GdiPlusFileFormatList(g_pSupportedOutputFormats,ARRAYSIZE(g_pSupportedOutputFormats), hDefaultImageTypeIcon );

            //
            // Debug output
            //
            GdiPlusFileFormatList.Dump();

            //
            // Get the formats this object supports directly
            //
            CWiaFileFormatList WiaItemFileFormatList( pWiaItem, hDefaultImageTypeIcon );

            //
            // Debug output
            //
            WiaItemFileFormatList.Dump();

            //
            // Merge the GDI+ and native format lists
            //
            WiaItemFileFormatList.Union(GdiPlusFileFormatList);

            //
            // Loop through the merged list of formats and add each one to the list
            //
            for (int i=0;i<WiaItemFileFormatList.FormatList().Size();i++)
            {
                //
                // Make sure we have a valid format
                //
                if (WiaItemFileFormatList.FormatList()[i].IsValid() && WiaItemFileFormatList.FormatList()[i].Icon())
                {
                    //
                    // Add the icon to the image list
                    //
                    int nIconIndex = ImageList_AddIcon( hComboBoxExImageList, WiaItemFileFormatList.FormatList()[i].Icon() );

                    //
                    // Get the description string.  Like "BMP File"
                    //
                    CSimpleString strFormatDescription = WiaItemFileFormatList.FormatList()[i].Description();

                    //
                    // If we didn't get a description string, make one
                    //
                    if (!strFormatDescription.Length())
                    {
                        strFormatDescription.Format( IDS_BLANKFILETYPENAME, g_hInstance, WiaItemFileFormatList.FormatList()[i].Extension().ToUpper().String() );
                    }

                    //
                    // Create the full string description, like "BMP (BMP File)"
                    //
                    CSimpleString strFormatName;
                    strFormatName.Format( IDS_FILETYPE, g_hInstance, WiaItemFileFormatList.FormatList()[i].Extension().ToUpper().String(), strFormatDescription.String() );

                    //
                    // If we have a valid name
                    //
                    if (strFormatName.Length())
                    {
                        //
                        // Allocate a GUID to store the guid in as an LPARAM
                        //
                        GUID *pGuid = new GUID;
                        if (pGuid)
                        {
                            //
                            // Save the GUID
                            //
                            *pGuid = WiaItemFileFormatList.FormatList()[i].Format();

                            //
                            // Get the cbex item ready for an insert (really an append)
                            //
                            COMBOBOXEXITEM cbex = {0};
                            ZeroMemory( &cbex, sizeof(cbex) );
                            cbex.mask           = CBEIF_TEXT | CBEIF_IMAGE | CBEIF_SELECTEDIMAGE | CBEIF_LPARAM;
                            cbex.iItem          = -1;
                            cbex.pszText        = const_cast<LPTSTR>(strFormatName.String());
                            cbex.iImage         = nIconIndex;
                            cbex.iSelectedImage = nIconIndex;
                            cbex.lParam         = reinterpret_cast<LPARAM>(pGuid);

                            //
                            // Insert the item
                            //
                            SendMessage( hWndList, CBEM_INSERTITEM, 0, reinterpret_cast<LPARAM>(&cbex) );
                        }
                    }
                }
            }

            if (hDefaultImageTypeIcon)
            {
                DestroyIcon(hDefaultImageTypeIcon);
            }
        }

        //
        // Now set the current selection to the last selected type
        //
        int nSelectedItem = 0;

        //
        // Search the combo box for a match for this type
        //
        for (int i=0;i<SendMessage(hWndList,CB_GETCOUNT,0,0);i++)
        {
            //
            // Get an item from the combo box
            //
            COMBOBOXEXITEM ComboBoxExItem = {0};
            ComboBoxExItem.iItem = i;
            ComboBoxExItem.mask = CBEIF_LPARAM;
            if (SendMessage( hWndList, CBEM_GETITEM, 0, reinterpret_cast<LPARAM>(&ComboBoxExItem)))
            {
                //
                // Compare its guid with the MRU type
                //
                GUID *pGuid = reinterpret_cast<GUID*>(ComboBoxExItem.lParam);
                if (pGuid && *pGuid == m_guidLastSelectedType)
                {
                    //
                    // Save the index and exit the loop
                    //
                    nSelectedItem = i;
                    break;
                }
            }
        }

        //
        // Set the current selection
        //
        SendMessage(hWndList,CB_SETCURSEL,nSelectedItem,0);

        //
        // Make sure all of the strings fit
        //
        WiaUiUtil::ModifyComboBoxDropWidth(hWndList);
    }
}


GUID *CCommonTransferPage::GetCurrentOutputFormat(void)
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::GetCurrentOutputFormat")));
    HWND hWndList = GetDlgItem( m_hWnd, IDC_TRANSFER_IMAGETYPE );
    if (hWndList)
    {
        LRESULT lResult = SendMessage( hWndList, CB_GETCURSEL, 0, 0 );
        if (lResult != CB_ERR)
        {
            COMBOBOXEXITEM ComboBoxExItem;
            ZeroMemory( &ComboBoxExItem, sizeof(ComboBoxExItem) );
            ComboBoxExItem.mask = CBEIF_LPARAM;
            ComboBoxExItem.iItem = lResult;

            lResult = SendMessage( hWndList, CBEM_GETITEM, 0, reinterpret_cast<LPARAM>(&ComboBoxExItem) );
            if (lResult && ComboBoxExItem.lParam)
            {
                //
                // There's a GUID
                //
                return reinterpret_cast<GUID*>(ComboBoxExItem.lParam);
            }
        }
    }
    return NULL;
}

LRESULT CCommonTransferPage::OnDestroy( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnDestroy")));
    //
    // Save the MRU lists to the registry
    //
    m_MruDirectory.Write( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REG_STR_DIRNAME_MRU );
    m_MruRootFilename.Write( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REG_STR_ROOTNAME_MRU );

    //
    // Save page settings
    //
    CSimpleReg reg( HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, true, KEY_WRITE );

    //
    // Save current format
    //
    GUID *pCurrFormat = GetCurrentOutputFormat();
    if (pCurrFormat)
    {
        reg.SetBin( REG_STR_LASTFORMAT, (PBYTE)pCurrFormat, sizeof(GUID), REG_BINARY );
    }

    //
    //  Destroy the image lists
    //
    HIMAGELIST hImageList = reinterpret_cast<HIMAGELIST>(SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CBEM_SETIMAGELIST, 0, NULL ));
    if (hImageList)
    {
        ImageList_Destroy(hImageList);
    }
    if (GetDlgItem(m_hWnd,IDC_TRANSFER_IMAGETYPE))
    {
        hImageList = reinterpret_cast<HIMAGELIST>(SendDlgItemMessage( m_hWnd,  IDC_TRANSFER_IMAGETYPE, CBEM_SETIMAGELIST, 0, NULL ));
        if (hImageList)
        {
            ImageList_Destroy(hImageList);
        }
    }

    if (m_hFontBold)
    {
        DeleteFont(m_hFontBold);
        m_hFontBold = NULL;
    }

    return 0;
}

CSimpleString CCommonTransferPage::GetFolderName( LPCITEMIDLIST pidl )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::GetFolderName")));
    if (!pidl)
    {
        return CSimpleString(TEXT(""));
    }
    if (CSimpleIdList().GetSpecialFolder( NULL, CSIDL_MYPICTURES|CSIDL_FLAG_CREATE ) == pidl)
    {
        SHFILEINFO shfi;
        ZeroMemory( &shfi, sizeof(shfi) );
        if (SHGetFileInfo( reinterpret_cast<LPCTSTR>(pidl), 0, &shfi, sizeof(shfi), SHGFI_PIDL | SHGFI_DISPLAYNAME ))
        {
            return(shfi.szDisplayName);
        }
    }
    else if (CSimpleIdList().GetSpecialFolder( NULL, CSIDL_PERSONAL|CSIDL_FLAG_CREATE ) == pidl)
    {
        SHFILEINFO shfi;
        ZeroMemory( &shfi, sizeof(shfi) );
        if (SHGetFileInfo( reinterpret_cast<LPCTSTR>(pidl), 0, &shfi, sizeof(shfi), SHGFI_PIDL | SHGFI_DISPLAYNAME ))
        {
            return(shfi.szDisplayName);
        }
    }
    TCHAR szPath[MAX_PATH];
    if (SHGetPathFromIDList( pidl, szPath ))
    {
        return(szPath);
    }
    return(CSimpleString(TEXT("")));
}


LRESULT CCommonTransferPage::AddPathToComboBoxExOrListView( HWND hWnd, CDestinationData &Path, bool bComboBoxEx )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::AddPathToComboBoxExOrListView")));
    if (!IsWindow(hWnd))
    {
        return(-1);
    }

    if (Path.IsValid())
    {
        //
        // Make sure this path can be used in a folder name
        //
        if (Path.IsValidFileSystemPath(PrepareNameDecorationData()))
        {
            //
            // Get the name of the folder
            //
            CSimpleString strName = Path.DisplayName(PrepareNameDecorationData());
            if (!strName.Length())
            {
                return(CB_ERR);
            }

            //
            // Get the combobox's image list and add the shell's icon to it.
            //
            int nIconIndex = 0;
            HICON hIcon = Path.SmallIcon();
            if (hIcon)
            {
                if (bComboBoxEx)
                {
                    HIMAGELIST hImageList = reinterpret_cast<HIMAGELIST>(SendMessage( hWnd, CBEM_GETIMAGELIST, 0, 0 ));
                    if (hImageList)
                    {
                        nIconIndex = ImageList_AddIcon( hImageList, hIcon );
                    }
                }
                else
                {
                    HIMAGELIST hImageList = reinterpret_cast<HIMAGELIST>(SendMessage( hWnd, LVM_GETIMAGELIST, LVSIL_SMALL, 0 ));
                    if (hImageList)
                    {
                        nIconIndex = ImageList_AddIcon( hImageList, hIcon );
                    }
                }
            }

            //
            // If it already exists, don't add it
            //
            if (bComboBoxEx)
            {
                LRESULT nFind = SendMessage( hWnd, CB_FINDSTRINGEXACT, 0, reinterpret_cast<LPARAM>(strName.String()));
                if (nFind != CB_ERR)
                {
                    return(nFind);
                }
            }


            if (bComboBoxEx)
            {
                //
                // Prepare the cbex struct
                //
                COMBOBOXEXITEM cbex = {0};
                cbex.mask           = CBEIF_TEXT | CBEIF_IMAGE | CBEIF_SELECTEDIMAGE | CBEIF_LPARAM;
                cbex.iItem          = -1;
                cbex.pszText        = const_cast<LPTSTR>(strName.String());
                cbex.iImage         = nIconIndex;
                cbex.iSelectedImage = nIconIndex;
                cbex.lParam         = reinterpret_cast<LPARAM>(&Path);

                //
                // Add the item
                //
                LRESULT lRes = SendMessage( hWnd, CBEM_INSERTITEM, 0, reinterpret_cast<LPARAM>(&cbex) );

                //
                // Make sure all of the strings fit
                //
                WiaUiUtil::ModifyComboBoxDropWidth(hWnd);

                return lRes;

            }
            else
            {
                LVITEM lvItem  = {0};
                lvItem.mask    = LVIF_TEXT|LVIF_IMAGE|LVIF_PARAM;
                lvItem.iItem   = 0;
                lvItem.pszText = const_cast<LPTSTR>(strName.String());
                lvItem.iImage  = nIconIndex;
                lvItem.lParam  = reinterpret_cast<LPARAM>(&Path);

                //
                // Add the item
                //
                return SendMessage( hWnd, LVM_INSERTITEM, 0, reinterpret_cast<LPARAM>(&lvItem) );
            }
        }
    }
    return -1;
}


/*****************************************************************************

   PopulateDestinationList

   Fills in the destinatin drop down list w/the info from the MRU
   saved in the registry.

 *****************************************************************************/
void CCommonTransferPage::PopulateDestinationList(void)
{
    WIA_PUSHFUNCTION((TEXT("CCommonTransferPage::PopulateDestinationList")));

    //
    // Empty the list controls
    //
    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CB_RESETCONTENT, 0, 0 );

    //
    // Remove all of the images from the image list
    //
    HIMAGELIST hImageList = reinterpret_cast<HIMAGELIST>(SendDlgItemMessage( m_hWnd,IDC_TRANSFER_DESTINATION, CBEM_GETIMAGELIST, 0, 0 ));
    if (hImageList)
    {
        ImageList_RemoveAll(hImageList);
    }

    //
    // Add all of the paths in the MRU list.  Dupes will be ignored.
    //
    CMruDestinationData::Iterator ListIter = m_MruDirectory.Begin();
    while (ListIter != m_MruDirectory.End())
    {
        AddPathToComboBoxExOrListView( GetDlgItem(m_hWnd,IDC_TRANSFER_DESTINATION), *ListIter, true );
        ++ListIter;
    }

    //
    // Set the current selection to item 0, since the MRU should have taken care of ordering
    //
    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CB_SETCURSEL, 0, 0 );

    WiaUiUtil::ModifyComboBoxDropWidth(GetDlgItem(m_hWnd,IDC_TRANSFER_DESTINATION));
}



/*****************************************************************************

   GetCurrentDestinationFolder

   Given a handle to the dialog, return the path to the directory that
   the user has selected.

   pszPath is assumed to point to a MAX_PATH (or greater) character buffer

   Pass a NULL pszPath to get just the pidl

 *****************************************************************************/
CDestinationData *CCommonTransferPage::GetCurrentDestinationFolder( bool bStore )
{
    WIA_PUSHFUNCTION((TEXT("CCommonTransferPage::GetCurrentDestinationFolder")));

    //
    // Assume failure
    //
    CDestinationData *pResult = NULL;

    //
    // Saving to a folder?
    //
    LRESULT lResult = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CB_GETCURSEL, 0, 0 );
    if (lResult != CB_ERR)
    {
        //
        // Get the item
        //
        COMBOBOXEXITEM ComboBoxExItem = {0};
        ComboBoxExItem.mask = CBEIF_LPARAM;
        ComboBoxExItem.iItem = lResult;
        lResult = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CBEM_GETITEM, 0, reinterpret_cast<LPARAM>(&ComboBoxExItem) );

        //
        // If this message succeeded, and it has an lParam
        //
        if (lResult && ComboBoxExItem.lParam)
        {
            //
            // Get the data
            //
            pResult = reinterpret_cast<CDestinationData*>(ComboBoxExItem.lParam);
        }
    }

    if (pResult)
    {
        //
        // If this is an idlist, set the path and return an idlist
        //
        if (bStore && m_pControllerWindow)
        {
            //
            // Get the pathname, if requested
            //
            CSimpleString strPath = pResult->Path(PrepareNameDecorationData());
            if (strPath.Length())
            {
                lstrcpyn( m_pControllerWindow->m_szDestinationDirectory, strPath, MAX_PATH );
            }
        }
    }

    return pResult;
}


bool CCommonTransferPage::ValidateFilename( LPCTSTR pszFilename )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::ValidateFilename")));
    //
    // if the filename is NULL or empty, it is invalid
    //
    if (!pszFilename || !*pszFilename)
    {
        return false;
    }
    for (LPCTSTR pszCurr = pszFilename;*pszCurr;pszCurr=CharNext(pszCurr))
    {
        if (*pszCurr == TEXT(':') ||
            *pszCurr == TEXT('\\') ||
            *pszCurr == TEXT('/') ||
            *pszCurr == TEXT('?') ||
            *pszCurr == TEXT('"') ||
            *pszCurr == TEXT('<') ||
            *pszCurr == TEXT('>') ||
            *pszCurr == TEXT('|') ||
            *pszCurr == TEXT('*'))
        {
            return false;
        }
    }
    return true;
}

int CALLBACK CCommonTransferPage::BrowseCallbackProc(HWND hWnd, UINT uMsg, LPARAM lParam, LPARAM lpData )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::BrowseCallbackProc")));
    if (BFFM_INITIALIZED == uMsg && lpData)
    {
        SendMessage( hWnd, BFFM_SETSELECTION, FALSE, lpData );
        WIA_TRACE((TEXT("CSimpleIdList(reinterpret_cast<LPITEMIDLIST>(lpData)).Name().String(): %s"), CSimpleIdList(reinterpret_cast<LPITEMIDLIST>(lpData)).Name().String() ));
    }
    return(0);
}

void CCommonTransferPage::OnBrowseDestination( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CCommonTransferPage::OnBrowseDestination")));

    TCHAR szDisplay[MAX_PATH];

    //
    // Get the initial ID list
    //
    CSimpleIdList InitialIdList;
    CDestinationData *pResult = GetCurrentDestinationFolder( false );

    if (pResult)
    {
        CSimpleIdList InitialIdList;
        if (pResult->IsSpecialFolder())
        {
            InitialIdList.GetSpecialFolder( m_hWnd, pResult->Csidl() );
        }
        else
        {
            InitialIdList = pResult->IdList();
        }

        //
        // Load the title string
        //
        CSimpleString strBrowseTitle( IDS_BROWSE_TITLE, g_hInstance );

        //
        // Prepare the folder browsing structure
        //
        BROWSEINFO BrowseInfo;
        ZeroMemory( &BrowseInfo, sizeof(BrowseInfo) );
        BrowseInfo.hwndOwner = m_hWnd;
        BrowseInfo.pidlRoot  = NULL;
        BrowseInfo.pszDisplayName = szDisplay;
        BrowseInfo.lpszTitle = const_cast<LPTSTR>(strBrowseTitle.String());
        BrowseInfo.ulFlags = BIF_RETURNONLYFSDIRS | BIF_NEWDIALOGSTYLE | BIF_EDITBOX;
        BrowseInfo.lParam = reinterpret_cast<LPARAM>(InitialIdList.IdList());
        BrowseInfo.lpfn = BrowseCallbackProc;

        //
        // Open the folder browser
        //
        LPITEMIDLIST pidl = SHBrowseForFolder( &BrowseInfo );
        if (pidl)
        {
            //
            // Create a destination data for this PIDL
            //
            CDestinationData DestinationData(pidl);
            if (DestinationData.IsValid())
            {
                //
                // Add this pidl to the directory mru
                //
                m_MruDirectory.Add( DestinationData );

                //
                // Add this pidl to the destination list too, by repopulating the list
                //
                PopulateDestinationList();
            }

            //
            // Free pidl
            //
            LPMALLOC pMalloc = NULL;
            if (SUCCEEDED(SHGetMalloc(&pMalloc)) && pMalloc)
            {
                pMalloc->Free(pidl);
                pMalloc->Release();
            }
        }
    }
}


void CCommonTransferPage::UpdateDynamicPaths( bool bSelectionChanged )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::UpdateDynamicPaths")));
    CDestinationData::CNameData NameData = PrepareNameDecorationData( bSelectionChanged != false );

    //
    // Get the current selection
    //
    LRESULT nCurSel = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CB_GETCURSEL, 0, 0 );

    //
    // We will only redraw if a dynamic item is selected
    //
    bool bRedrawNeeded = false;

    //
    // Loop through all of the items in the list
    //
    LRESULT nCount = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CB_GETCOUNT, 0, 0 );
    for (LRESULT i=0;i<nCount;i++)
    {
        //
        // Get the item
        //
        COMBOBOXEXITEM ComboBoxExItem = {0};
        ComboBoxExItem.mask = CBEIF_LPARAM;
        ComboBoxExItem.iItem = i;
        LRESULT lResult = SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CBEM_GETITEM, 0, reinterpret_cast<LPARAM>(&ComboBoxExItem) );

        //
        // If this message succeeded, and it has an lParam
        //
        if (lResult && ComboBoxExItem.lParam)
        {
            //
            // Get the data
            //
            CDestinationData *pDestinationData = reinterpret_cast<CDestinationData*>(ComboBoxExItem.lParam);

            //
            // If this item has any dynamic decorations
            //
            if (pDestinationData && (pDestinationData->Flags() & CDestinationData::DECORATION_MASK))
            {
                //
                // Get the display name for this item.
                //
                CSimpleString strDisplayName = pDestinationData->DisplayName( NameData );

                //
                // Make sure we have a valid display name
                //
                if (strDisplayName.Length())
                {
                    //
                    // Set the data
                    //
                    COMBOBOXEXITEM ComboBoxExItem = {0};
                    ComboBoxExItem.mask = CBEIF_TEXT;
                    ComboBoxExItem.iItem = i;
                    ComboBoxExItem.pszText = const_cast<LPTSTR>(strDisplayName.String());
                    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_DESTINATION, CBEM_SETITEM, 0, reinterpret_cast<LPARAM>(&ComboBoxExItem) );

                    //
                    // If this item is currently selected, force a redraw
                    //
                    if (nCurSel == i)
                    {
                        bRedrawNeeded = true;
                    }
                }
            }
        }
    }

    //
    // Update the control, if necessary
    //
    if (bRedrawNeeded)
    {
        InvalidateRect( GetDlgItem( m_hWnd, IDC_TRANSFER_DESTINATION ), NULL, FALSE );
    }
}

void CCommonTransferPage::OnRootNameChange( WPARAM wParam, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnRootNameChange")));
    UpdateDynamicPaths(HIWORD(wParam) == CBN_SELCHANGE);
}

LRESULT CCommonTransferPage::OnImageTypeDeleteItem( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnImageTypeDeleteItem")));
    PNMCOMBOBOXEX pNmComboBoxEx = reinterpret_cast<PNMCOMBOBOXEX>(lParam);
    if (pNmComboBoxEx)
    {
        GUID *pGuid = reinterpret_cast<GUID*>(pNmComboBoxEx->ceItem.lParam);
        if (pGuid)
        {
            delete pGuid;
        }
    }
    return 0;
}

LRESULT CCommonTransferPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonTransferPage::OnEventNotification") ));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}

LRESULT CCommonTransferPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND( IDC_TRANSFER_BROWSE, OnBrowseDestination );
        SC_HANDLE_COMMAND_NOTIFY(CBN_EDITCHANGE,IDC_TRANSFER_ROOTNAME,OnRootNameChange);
        SC_HANDLE_COMMAND_NOTIFY(CBN_SELCHANGE,IDC_TRANSFER_ROOTNAME,OnRootNameChange);
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CCommonTransferPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(CBEN_DELETEITEM,IDC_TRANSFER_IMAGETYPE,OnImageTypeDeleteItem);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonTransferPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonTransferPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
    }
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\flnfile.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       FLNFILE.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/13/1999
 *
 *  DESCRIPTION: Find the lowest numbered files in a given directory with a given
 *               root filename.
 *
 *******************************************************************************/
#ifndef __FLNFILE_H_INCLUDED
#define __FLNFILE_H_INCLUDED

#include <windows.h>

namespace NumberedFileName
{
    enum
    {
        FlagOmitDirectory = 0x0000001,
        FlagOmitExtension = 0x0000002
    };
    bool DoesFileExist( LPCTSTR pszFilename );
    bool ConstructFilename( LPTSTR szFile, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension );
    int FindLowestAvailableFileSequence( LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, bool bAllowUnnumberedFile, int nCount, int nStart=1 );
    bool CreateNumberedFileName( DWORD dwFlags, LPTSTR pszPathName, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension, int nNumber );
    int GenerateLowestAvailableNumberedFileName( DWORD dwFlags, LPTSTR pszPathName, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension, bool bAllowUnnumberedFile, int nStart=1 );
    int FindHighestNumberedFile( LPCTSTR pszDirectory, LPCTSTR pszFilename );
}

#endif __FLNFILE_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\mintrans.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       MINTRANS.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        12/6/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
// mintrans.h : Declaration of the minimal transfer component

#ifndef __MINTRANS_H_INCLUDED
#define __MINTRANS_H_INCLUDED

#include <windows.h>

extern LRESULT MinimalTransferThreadProc( BSTR bstrDeviceId );

#endif //__MINTRANS_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\flnfile.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       FLNFILE.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/13/1999
 *
 *  DESCRIPTION: Find the lowest numbered files in a given directory with a given
 *               root filename.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "flnfile.h"

bool NumberedFileName::DoesFileExist( LPCTSTR pszFilename )
{
    WIA_PUSH_FUNCTION((TEXT("NumberedFileName::DoesFileExist(%s"), pszFilename ));
    bool bExists = false;
    WIN32_FIND_DATA FindFileData;
    ZeroMemory( &FindFileData, sizeof(FindFileData));
    HANDLE hFindFiles = FindFirstFile( pszFilename, &FindFileData );
    if (hFindFiles != INVALID_HANDLE_VALUE)
    {
        bExists = true;
        FindClose(hFindFiles);
    }
    return bExists;
}

bool NumberedFileName::ConstructFilename( LPTSTR szFile, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension )
{
    *szFile = TEXT('\0');

    if (pszDirectory && *pszDirectory)
    {
        //
        // Start with the directory name
        //
        lstrcpyn( szFile + lstrlen(szFile), pszDirectory, MAX_PATH-lstrlen(szFile) );

        //
        // Ensure there is a trailing slash on the filename
        //
        if (!CSimpleString(szFile).MatchLastCharacter(TEXT('\\')))
        {
            lstrcpyn( szFile + lstrlen(szFile), TEXT("\\"), MAX_PATH-lstrlen(szFile) );
        }
    }

    if (pszFilename && *pszFilename)
    {
        // Append the filename
        lstrcpyn( szFile + lstrlen(szFile), pszFilename, MAX_PATH-lstrlen(szFile) );
    }

    if (pszNumberFormat && *pszNumberFormat)
    {
        // Append a space
        lstrcpyn( szFile + lstrlen(szFile), TEXT(" "), MAX_PATH-lstrlen(szFile) );

        // Append the printf-style number format string
        lstrcpyn( szFile + lstrlen(szFile), pszNumberFormat, MAX_PATH-lstrlen(szFile) );

    }

    if (pszExtension && *pszExtension)
    {
        // Append the extension's . if necessary
        if (*pszExtension != TEXT('.'))
        {
            lstrcpyn( szFile + lstrlen(szFile), TEXT("."), MAX_PATH-lstrlen(szFile) );
        }

        // Append the extension
        lstrcpyn( szFile + lstrlen(szFile), pszExtension, MAX_PATH-lstrlen(szFile) );
    }

    return(lstrlen(szFile) != 0);
}

int NumberedFileName::FindLowestAvailableFileSequence( LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, bool bAllowUnnumberedFile, int nCount, int nStart )
{
    WIA_PUSH_FUNCTION((TEXT("NumberedFileName::FindLowestAvailableFileSequence(%s, %s, %s, %d, %d, %d"), pszDirectory, pszFilename, pszNumberFormat, bAllowUnnumberedFile, nCount, nStart ));
    if (!pszDirectory || !pszFilename || !pszNumberFormat || !nCount || !*pszDirectory || !*pszFilename || !*pszNumberFormat)
        return -1;

    TCHAR szFile[MAX_PATH + 10]=TEXT("");

    if (nCount == 1 && bAllowUnnumberedFile)
    {
        if (ConstructFilename(szFile,pszDirectory,pszFilename,NULL,TEXT("*")))
        {
            if (!DoesFileExist(szFile))
            {
                // 0 is a special return value that says "Don't put a number on this file"
                return 0;
            }
        }
    }

    int i=nStart;
    //
    // Make sure i is a valid number
    //
    if (i <= 0)
    {
        i = 1;
    }
    while (i<0x7FFFFFFF)
    {
        //
        // Assume we'll be able to store the sequence
        //
        bool bEnoughRoom = true;
        for (int j=0;j<nCount && bEnoughRoom;j++)
        {
            TCHAR szNumber[24];
            if (wnsprintf( szNumber, ARRAYSIZE(szNumber), pszNumberFormat, i+j ) >= 0)
            {
                if (ConstructFilename(szFile,pszDirectory,pszFilename,szNumber,TEXT("*")))
                {
                    if (DoesFileExist(szFile))
                    {
                        //
                        // Didn't make it
                        //
                        bEnoughRoom = false;

                        //
                        // Skip this series.  No need to start at the bottom.
                        //
                        i += j;
                    }
                }
            }
        }

        //
        // If we made it through, return the base number, otherwise increment by one
        //
        if (bEnoughRoom)
        {
            return i;
        }
        else i++;
    }

    return -1;
}

bool NumberedFileName::CreateNumberedFileName( DWORD dwFlags, LPTSTR pszPathName, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension, int nNumber )
{
    if (nNumber == 0)
    {
        return ConstructFilename(pszPathName,
                                 (dwFlags&FlagOmitDirectory) ? NULL : pszDirectory,
                                 pszFilename,
                                 NULL,
                                 (dwFlags&FlagOmitExtension) ? NULL : pszExtension);
    }
    else
    {
        TCHAR szNumber[24];
        if (wnsprintf( szNumber, ARRAYSIZE(szNumber), pszNumberFormat, nNumber ) >= 0)
        {
            return ConstructFilename(pszPathName,
                                     (dwFlags&FlagOmitDirectory) ? NULL : pszDirectory,
                                     pszFilename,
                                     szNumber,
                                     (dwFlags&FlagOmitExtension) ? NULL : pszExtension);
        }
    }
    return false;
}

int NumberedFileName::GenerateLowestAvailableNumberedFileName( DWORD dwFlags, LPTSTR pszPathName, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberFormat, LPCTSTR pszExtension, bool bAllowUnnumberedFile, int nStart )
{
    //
    // -1 is an error.  Default to failure
    //
    int nResult = -1;

    //
    // Find the lowest available file number
    //
    int nLowest = FindLowestAvailableFileSequence( pszDirectory, pszFilename, pszNumberFormat, bAllowUnnumberedFile, 1, nStart );
    if (nLowest >= 0)
    {
        //
        // If we can create the filename, return the number of the file
        //
        if (CreateNumberedFileName( dwFlags, pszPathName, pszDirectory, pszFilename, pszNumberFormat, pszExtension, nLowest ))
        {
            //
            // Return the file's number
            //
            nResult = nLowest;
        }
    }
    return nResult;
}

int NumberedFileName::FindHighestNumberedFile( LPCTSTR pszDirectory, LPCTSTR pszFilename )
{
    WIA_PUSH_FUNCTION((TEXT("NumberedFileName::FindHighestNumberedFile( %s, %s )"), pszDirectory, pszFilename ));
    //
    // Make sure we have reasonable args
    //
    if (!pszFilename || !pszDirectory || !*pszFilename || !*pszDirectory)
    {
        return -1;
    }

    //
    // Assume we won't be finding any files
    //
    int nHighest = 0;

    //
    // Construct a filename that looks like this: c:\path\file*.*
    //
    TCHAR szFile[MAX_PATH*2] = TEXT("");
    if (ConstructFilename(szFile,pszDirectory,pszFilename,TEXT("*"),TEXT("*")))
    {

        //
        // Find the first file which matches the path and wildcards
        //
        WIN32_FIND_DATA FindFileData = {0};
        HANDLE hFindFiles = FindFirstFile( szFile, &FindFileData );
        if (hFindFiles != INVALID_HANDLE_VALUE)
        {
            //
            // Loop while there are more matching files
            //
            BOOL bSuccess = TRUE;
            while (bSuccess)
            {
                //
                // Make sure the filename is long enough
                //
                WIA_TRACE((TEXT("FindFileData.cFileName: %s"), FindFileData.cFileName ));
                if (lstrlen(FindFileData.cFileName) >= lstrlen(pszFilename))
                {
                    //
                    // Copy the filename to a temp buffer MINUS the filename portion,
                    // so "c:\path\file 001.jpg" becomes " 001.jpg"
                    //
                    TCHAR szFoundFile[MAX_PATH] = TEXT("");
                    if (lstrcpyn( szFoundFile, FindFileData.cFileName+lstrlen(pszFilename), ARRAYSIZE(szFoundFile)-lstrlen(pszFilename)))
                    {
                        //
                        // Remove the extension, so
                        // " 001.jpg" becomes " 001"
                        //
                        PathRemoveExtension(szFoundFile);

                        //
                        // Remove spaces, so " 001" becomes "001"
                        //
                        StrTrim(szFoundFile,TEXT(" "));
                        WIA_TRACE((TEXT("szFoundFile: %s"), szFoundFile ));

                        //
                        // Convert the string to a number
                        //
                        int nCurrNumber = 0;
                        if (StrToIntEx(szFoundFile,STIF_DEFAULT,&nCurrNumber))
                        {
                            //
                            // Replace our current high if this one exceeds it
                            //
                            if (nCurrNumber > nHighest)
                            {
                                nHighest = nCurrNumber;
                            }
                        }
                    }
                }

                //
                // Continue finding files
                //
                bSuccess = FindNextFile( hFindFiles, &FindFileData );

            }

            //
            // Prevent handle leaks
            //
            FindClose(hFindFiles);
        }
    }

    WIA_TRACE((TEXT("nHighest: %d"), nHighest ));
    return nHighest+1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\evntparm.h ===
#ifndef __EVNTPARM_H_INCLUDED
#define __EVNTPARM_H_INCLUDED

#include <windows.h>
#include <uicommon.h>
#include "shmemsec.h"

struct CEventParameters
{
public:
    GUID                        EventGUID;
    CSimpleStringWide           strFullItemName;
    CSimpleStringWide           strEventDescription;
    CSimpleStringWide           strDeviceID;
    CSimpleStringWide           strDeviceDescription;
    DWORD                       dwDeviceType;
    ULONG                       ulEventType;
    ULONG                       ulReserved;
    HWND                        hwndParent;
    CSharedMemorySection<HWND> *pWizardSharedMemory;

public:

    CEventParameters( const CEventParameters &other )
      : EventGUID(other.EventGUID),
        strFullItemName(other.strFullItemName),
        strDeviceID(other.strDeviceID),
        strDeviceDescription(other.strDeviceDescription),
        dwDeviceType(other.dwDeviceType),
        ulEventType(other.ulEventType),
        ulReserved(other.ulReserved),
        hwndParent(other.hwndParent),
        pWizardSharedMemory(other.pWizardSharedMemory),
        strEventDescription(other.strEventDescription)
    {
    }

    CEventParameters &operator=( const CEventParameters &other )
    {
        if (this != &other)
        {
            EventGUID = other.EventGUID;
            strFullItemName = other.strFullItemName;
            strDeviceID = other.strDeviceID;
            strDeviceDescription = other.strDeviceDescription;
            dwDeviceType = other.dwDeviceType;
            ulEventType = other.ulEventType;
            ulReserved = other.ulReserved;
            hwndParent = other.hwndParent;
            pWizardSharedMemory = other.pWizardSharedMemory;
        }
        return *this;
    }

    CEventParameters()
      : EventGUID(IID_NULL),
        dwDeviceType(0),
        ulEventType(0),
        ulReserved(0),
        pWizardSharedMemory(NULL)
    {
    }

    ~CEventParameters()
    {
        if (pWizardSharedMemory)
        {
            pWizardSharedMemory = NULL;
        }
    }
};


class CStiEventData
{
public:
    
    class CStiEventHandler
    {
    private:
        CSimpleStringWide m_strApplicationName;
        CSimpleStringWide m_strCommandLine;

    public:
        CStiEventHandler()
        {
        }
        CStiEventHandler( const CSimpleStringWide &strApplicationName, const CSimpleStringWide &strCommandLine )
          : m_strApplicationName(strApplicationName),
            m_strCommandLine(strCommandLine)
        {
        }
        CStiEventHandler( const CStiEventHandler &other )
          : m_strApplicationName(other.ApplicationName()),
            m_strCommandLine(other.CommandLine())
        {
        }
        ~CStiEventHandler()
        {
        }
        CStiEventHandler &operator=( const CStiEventHandler &other )
        {
            if (this != &other)
            {
                m_strApplicationName = other.ApplicationName();
                m_strCommandLine = other.CommandLine();
            }
            return *this;
        }
        bool IsValid() const
        {
            return (m_strApplicationName.Length() && m_strCommandLine.Length());
        }
        CSimpleStringWide ApplicationName() const
        {
            return m_strApplicationName;
        }
        CSimpleStringWide CommandLine() const
        {
            return m_strCommandLine;
        }
    };

    typedef CSimpleDynamicArray<CStiEventHandler> CStiEventHandlerArray;

private:    
    GUID                  m_guidEvent;
    CSimpleStringWide     m_strEventDescription;
    CSimpleStringWide     m_strDeviceId;
    CSimpleStringWide     m_strDeviceDescription;
    DWORD                 m_dwDeviceType;
    ULONG                 m_ulEventType;
    ULONG                 m_ulReserved;
    CStiEventHandlerArray m_EventHandlers;

public:
    CStiEventData()
      : m_guidEvent(IID_NULL),
        m_dwDeviceType(0),
        m_ulEventType(0),
        m_ulReserved(0)
    {
    }

    CStiEventData( const GUID *pguidEvent, 
                   LPCWSTR     pwszEventDescription, 
                   LPCWSTR     pwszDeviceId, 
                   LPCWSTR     pwszDeviceDescription,
                   DWORD       dwDeviceType,
                   LPCWSTR     pwszFullItemName,
                   ULONG      *pulEventType,
                   ULONG       ulReserved
                   )
      : m_guidEvent(pguidEvent ? *pguidEvent : IID_NULL),
        m_strEventDescription(pwszEventDescription),
        m_strDeviceId(pwszDeviceId),
        m_strDeviceDescription(pwszDeviceDescription),
        m_dwDeviceType(dwDeviceType),
        m_ulEventType(pulEventType ? *pulEventType : 0),
        m_ulReserved(ulReserved)
    {
        //
        // Crack event handlers.
        //
        // Walk the string until we come to the end, marked by double \0 characters
        //
        LPCWSTR pwszCurr = pwszFullItemName;
        while (pwszCurr && *pwszCurr)
        {
            //
            // Save the application name
            //
            CSimpleStringWide strApplication = pwszCurr;

            //
            // Advance to the command line
            //
            pwszCurr += lstrlen(pwszCurr) + 1;
            
            //
            // Save the command line
            //
            CSimpleStringWide strCommandLine = pwszCurr;

            //
            // Advance to the next token
            //
            pwszCurr += lstrlen(pwszCurr) + 1;

            //
            // If both application and command line are valid strings, add them to the list
            //
            if (strApplication.Length() && strCommandLine.Length())
            {
                m_EventHandlers.Append( CStiEventHandler( strApplication, strCommandLine ) );
            }
        }
    }
    CStiEventData( const CStiEventData &other )
      : m_guidEvent(other.Event()),
        m_strEventDescription(other.EventDescription()),
        m_strDeviceId(other.DeviceId()),
        m_strDeviceDescription(other.DeviceDescription()),
        m_dwDeviceType(other.DeviceType()),
        m_ulEventType(other.EventType()),
        m_ulReserved(other.Reserved()),
        m_EventHandlers(other.EventHandlers())
    {
    }
    ~CStiEventData()
    {
    }
    CStiEventData &operator=( const CStiEventData &other )
    {
        if (this != &other)
        {
            m_guidEvent = other.Event();
            m_strEventDescription = other.EventDescription();
            m_strDeviceId = other.DeviceId();
            m_strDeviceDescription = other.DeviceDescription();
            m_dwDeviceType = other.DeviceType();
            m_ulEventType = other.EventType();
            m_ulReserved = other.Reserved();
            m_EventHandlers = other.EventHandlers();
        }
        return *this;
    }
    GUID Event() const
    {
        return m_guidEvent;
    }
    CSimpleStringWide EventDescription() const
    {
        return m_strEventDescription;
    }
    CSimpleStringWide DeviceId() const
    {
        return m_strDeviceId;
    }
    CSimpleStringWide DeviceDescription() const
    {
        return m_strDeviceDescription;
    }
    DWORD DeviceType() const
    {
        return m_dwDeviceType;
    }
    ULONG EventType() const
    {
        return m_ulEventType;
    }
    ULONG Reserved() const
    {
        return m_ulReserved;
    }
    const CStiEventHandlerArray &EventHandlers() const
    {
        return m_EventHandlers;
    }
};

#endif __EVNTPARM_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\mintrans.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998-2000
 *
 *  TITLE:       MINTRANS.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        12/6/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <initguid.h>
#include <wiaregst.h>
#include <shlguid.h>
#include "shellext.h"
#include "shlobj.h"
#include "resource.h"       // resource ids
#include "itranhlp.h"
#include "mintrans.h"
#include "comctrlp.h"
#include "shlwapip.h"
#include "acqmgrcw.h"

namespace
{

//
// Define constants for dwords stored in the registry
#define ACTION_RUNAPP    0
#define ACTION_AUTOSAVE  1
#define ACTION_NOTHING   2
#define ACTION_MAX       2

static const TCHAR c_szConnectionSettings[] = TEXT("OnConnect\\%ls");

struct CMinimalTransferSettings
{
    DWORD dwAction;
    BOOL bDeleteImages;
    CSimpleString strFolderPath;
    CComPtr<IWiaTransferHelper> pXfer;
    BOOL bSaveInDatedDir;
};


#ifndef REGSTR_VALUE_USEDATE
#define REGSTR_VALUE_USEDATE     TEXT("UseDate")
#endif

/*******************************************************************************

ConstructDatedFolderPath

Concatenate the date to an existing folder name

*******************************************************************************/
static
CSimpleString
ConstructDatedFolderPath(
                        const CSimpleString &strOriginal
                        )
{
    CSimpleString strPath = strOriginal;

    //
    // Get the current date and format it as a string
    //
    SYSTEMTIME SystemTime;
    TCHAR szDate[MAX_PATH] = TEXT("");
    GetLocalTime( &SystemTime );
    GetDateFormat( LOCALE_USER_DEFAULT, 0, &SystemTime, CSimpleString(IDS_DATEFORMAT,g_hInstance), szDate, ARRAYSIZE(szDate) );

    //
    // Make sure there is a trailing backslash
    //
    if (!strPath.MatchLastCharacter( TEXT('\\')))
    {
        strPath += CSimpleString(TEXT("\\"));
    }

    //
    // Append the date
    //
    strPath += szDate;

    return strPath;
}


/////////////////////////////////////////////////////////////////////////////
// CPersistCallback and helpers

/*******************************************************************************
CheckAndCreateFolder

Make sure the target path exists or can be created. Failing that, prompt the
user for a folder.

*******************************************************************************/
void
CheckAndCreateFolder (CSimpleString &strFolderPath)
{

    // Convert to a full path name. If strFolderPath is not a full path,
    // we want it to be a subfolder of My Pictures

    TCHAR szFullPath[MAX_PATH] = TEXT("");
    SHGetFolderPath (NULL, CSIDL_MYPICTURES, NULL, 0, szFullPath);
    LPTSTR szUnused;
    BOOL bPrompt = false;
    if (*szFullPath)
    {
        SetCurrentDirectory (szFullPath);
    }
    GetFullPathName (strFolderPath, ARRAYSIZE(szFullPath), szFullPath, &szUnused);
    strFolderPath = szFullPath;
    // make sure the folder exists
    DWORD dw = GetFileAttributes(strFolderPath);

    if (dw == 0xffffffff)
    {
        bPrompt = !CAcquisitionManagerControllerWindow::RecursiveCreateDirectory( strFolderPath );
    }
    else if (!(dw & FILE_ATTRIBUTE_DIRECTORY))
    {
        bPrompt = TRUE;
    }

    // Ask the user for a valid folder
    if (bPrompt)
    {
        BROWSEINFO bi;
        TCHAR szPath[MAX_PATH] = TEXT("\0");
        LPITEMIDLIST pidl;
        TCHAR szTitle[200];
        LoadString (g_hInstance,
                    IDS_MINTRANS_FOLDERPATH_CAPTION,
                    szTitle,
                    200);
        ZeroMemory (&bi, sizeof(bi));
        bi.hwndOwner = NULL;
        bi.lpszTitle = szTitle;
        bi.ulFlags = BIF_RETURNONLYFSDIRS | BIF_USENEWUI;
        pidl = SHBrowseForFolder (&bi);
        if (pidl)
        {
            SHGetPathFromIDList (pidl, szPath);
        }
        strFolderPath = szPath;
    }
}

/*******************************************************************************
GetSaveSettings

Find out what the user configured us to do with the images

*******************************************************************************/

void
GetSaveSettings (CMinimalTransferSettings &settings, BSTR bstrDeviceId)
{

    CSimpleReg regSettings(HKEY_CURRENT_USER,
                           REGSTR_PATH_USER_SETTINGS,
                           true,
                           KEY_READ);


    // Default to My Pictures/no delete if registry settings not there
    TCHAR szMyPictures[MAX_PATH];
    SHGetFolderPath (NULL, CSIDL_MYPICTURES, NULL, 0, szMyPictures);
    settings.bDeleteImages = 0;
    settings.strFolderPath = const_cast<LPCTSTR>(szMyPictures);
    settings.dwAction = ACTION_RUNAPP;
    settings.bSaveInDatedDir = FALSE;

    // BUGBUG: Should we prompt the user if the registry path
    // isn't set?
    if (regSettings.OK())
    {

        CSimpleString strSubKey;
        strSubKey.Format (c_szConnectionSettings, bstrDeviceId);
        CSimpleReg regActions (regSettings, strSubKey, true, KEY_READ);
        settings.bDeleteImages = regActions.Query (REGSTR_VALUE_AUTODELETE, 0);
        settings.strFolderPath = regActions.Query (REGSTR_VALUE_SAVEFOLDER,
                                                   CSimpleString(szMyPictures));
        settings.dwAction = regActions.Query (REGSTR_VALUE_CONNECTACT,
                                              ACTION_AUTOSAVE);
        settings.bSaveInDatedDir = (regActions.Query(REGSTR_VALUE_USEDATE,0) != 0);
        if (settings.bSaveInDatedDir)
        {
            settings.strFolderPath = ConstructDatedFolderPath( settings.strFolderPath );
        }
    }

}

// For the short term, have an array of format/extension pairs
struct MYFMTS
{
    const GUID *pFmt;
    LPCWSTR pszExt;
} FMTS [] =
{
    {&WiaImgFmt_BMP, L".bmp"},
    {&WiaImgFmt_JPEG, L".jpg"},
    {&WiaImgFmt_FLASHPIX, L".fpx"},
    {&WiaImgFmt_TIFF, L".tif"},
    {NULL, L""}
};


/*******************************************************************************

GetDropTarget

Get an IDropTarget interface for the given folder


*******************************************************************************/
HRESULT
GetDropTarget (IShellFolder *pDesktop, LPCTSTR szPath, IDropTarget **ppDrop)
{
    HRESULT hr;
    LPITEMIDLIST pidl;
    CSimpleStringWide strPath = CSimpleStringConvert::WideString (CSimpleString(szPath));
    CComPtr<IShellFolder> psf;
    hr = pDesktop->ParseDisplayName(NULL,
                                    NULL,
                                    const_cast<LPWSTR>(static_cast<LPCWSTR>(strPath)),
                                    NULL,
                                    &pidl,
                                    NULL);
    if (SUCCEEDED(hr))
    {
        hr = pDesktop->BindToObject(const_cast<LPCITEMIDLIST>(pidl),
                                    NULL,
                                    IID_IShellFolder,
                                    reinterpret_cast<LPVOID*>(&psf));
        if (SUCCEEDED(hr))
        {
            hr = psf->CreateViewObject (NULL,
                                        IID_IDropTarget,
                                        reinterpret_cast<LPVOID*>(ppDrop));
        }
    }
    return hr;
}


/*******************************************************************************
FreePidl
Called when the array of pidls is destroyed, to free the pidls
*******************************************************************************/
INT
FreePidl (LPITEMIDLIST pidl, IMalloc *pMalloc)
{
    pMalloc->Free (pidl);
    return 1;
}


HRESULT
SaveItemsFromFolder (IShellFolder *pRoot, CSimpleString &strPath, BOOL bDelete)
{
    CComPtr<IEnumIDList> pEnum;
    LPITEMIDLIST pidl;
    HRESULT hr = S_FALSE;

    CComPtr<IMalloc> pMalloc;
    if (SUCCEEDED(SHGetMalloc (&pMalloc)))
    {

        CComPtr<IShellFolder> pDesktop;
        if (SUCCEEDED(SHGetDesktopFolder (&pDesktop)))
        {
            // enum the non-folder objects first
            if (SUCCEEDED(pRoot->EnumObjects (NULL,
                                              SHCONTF_FOLDERS | SHCONTF_NONFOLDERS ,
                                              &pEnum)))
            {
                HDPA         dpaItems;

                dpaItems = DPA_Create(10);
                while (NOERROR == pEnum->Next(1, &pidl, NULL))
                {
                    DPA_AppendPtr (dpaItems, pidl);

                }
                //
                // Now create the array of pidls and get the IDataObject
                //
                INT nSize = DPA_GetPtrCount (dpaItems);
                if (nSize > 0)
                {
                    LPITEMIDLIST *aidl = new LPITEMIDLIST[nSize];
                    if (aidl)
                    {
                        CComPtr<IDataObject> pdo;
                        for (INT i=0;i<nSize;i++)
                        {
                            aidl[i] = reinterpret_cast<LPITEMIDLIST>(DPA_FastGetPtr(dpaItems, i));
                        }
                        hr = pRoot->GetUIObjectOf (NULL,
                                                   nSize,
                                                   const_cast<LPCITEMIDLIST*>(aidl),
                                                   IID_IDataObject,
                                                   NULL,
                                                   reinterpret_cast<LPVOID*>(&pdo));
                        if (SUCCEEDED(hr))
                        {
                            CComPtr<IDropTarget> pDrop;
                            CComQIPtr<IAsyncOperation, &IID_IAsyncOperation> pasync(pdo);
                            if (pasync.p)
                            {
                                pasync->SetAsyncMode(FALSE);
                            }
                            CheckAndCreateFolder (strPath);
                            if (strPath.Length())
                            {

                                //
                                // Get an IDropTarget for the destination folder
                                // and do the drag/drop
                                //

                                hr = GetDropTarget (pDesktop,
                                                    strPath,
                                                    &pDrop);
                            }
                            else
                            {
                                hr = S_FALSE;
                            }
                            if (S_OK == hr)
                            {
                                DWORD dwKeyState;
                                if (bDelete)
                                {
                                    // the "move" keys
                                    dwKeyState = MK_SHIFT | MK_LBUTTON;
                                }
                                else
                                {   // the copy keys
                                    dwKeyState = MK_CONTROL|MK_LBUTTON;
                                }
                                hr = SHSimulateDrop (pDrop,
                                                     pdo,
                                                     dwKeyState,
                                                     NULL,
                                                     NULL);
                            }
                        }
                    }
                    else
                    {
                        hr = E_OUTOFMEMORY;
                    }
                }
                else
                {
                    hr = S_FALSE; // no images to download
                }
                DPA_DestroyCallback (dpaItems,
                                     reinterpret_cast<PFNDPAENUMCALLBACK>(FreePidl),
                                     reinterpret_cast<LPVOID>(pMalloc.p));
            }
        }
    }
    return hr;
}


/*******************************************************************************

SaveItems

This function uses IShellFolder and IDataObject interfaces to simulate
a drag/drop operation from the WIA virtual folder for the given device.

*******************************************************************************/

#define STR_WIASHEXT TEXT("wiashext.dll")

static
HRESULT
SaveItems (BSTR strDeviceId, CMinimalTransferSettings &settings)
{
    WIA_PUSH_FUNCTION((TEXT("SaveItems( %ws, ... )"), strDeviceId ));
    
    CComPtr<IShellFolder>pRoot;
    HRESULT hr = SHGetDesktopFolder (&pRoot);
    if (SUCCEEDED(hr))
    {
        //
        // Get the system directory, which is where wiashext.dll lives
        //
        TCHAR szShellExtensionPath[MAX_PATH] = {0};
        if (GetSystemDirectory( szShellExtensionPath, ARRAYSIZE(szShellExtensionPath)))
        {
            //
            // Make sure the path variable is long enough to hold this path
            //
            if (lstrlen(szShellExtensionPath) + lstrlen(STR_WIASHEXT) + lstrlen(TEXT("\\")) < ARRAYSIZE(szShellExtensionPath))
            {
                //
                // Concatenate the backslash and module name to the system path
                //
                lstrcat( szShellExtensionPath, TEXT("\\") );
                lstrcat( szShellExtensionPath, STR_WIASHEXT );

                //
                // Load the DLL
                //
                HINSTANCE hInstanceShellExt = LoadLibrary(szShellExtensionPath);
                if (hInstanceShellExt)
                {
                    //
                    // Get the pidl making function
                    //
                    WIAMAKEFULLPIDLFORDEVICE pfnMakeFullPidlForDevice = reinterpret_cast<WIAMAKEFULLPIDLFORDEVICE>(GetProcAddress(hInstanceShellExt, "MakeFullPidlForDevice"));
                    if (pfnMakeFullPidlForDevice)
                    {
                        //
                        // Get the pidl
                        //
                        LPITEMIDLIST pidlDevice = NULL;
                        hr = pfnMakeFullPidlForDevice( strDeviceId, &pidlDevice );
                        if (SUCCEEDED(hr))
                        {
                            //
                            // Bind to the folder for this device
                            //
                            CComPtr<IShellFolder> pDevice;
                            hr = pRoot->BindToObject (const_cast<LPCITEMIDLIST> (pidlDevice), NULL, IID_IShellFolder, reinterpret_cast<LPVOID*>(&pDevice));
                            if (SUCCEEDED(hr))
                            {

                                hr = SaveItemsFromFolder (pDevice, settings.strFolderPath, settings.bDeleteImages);
                                if (S_OK == hr && settings.bDeleteImages)
                                {
                                    //
                                    // DoDeleteAllItems will pop up a dialog to confirm the delete.
                                    //
                                    DoDeleteAllItems (strDeviceId, NULL);
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("BindToObject failed!")));
                            }

                            CComPtr<IMalloc> pMalloc;
                            if (SUCCEEDED(SHGetMalloc(&pMalloc)) && pMalloc)
                            {
                                pMalloc->Free(pidlDevice);
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("MakeFullPidlForDevice failed!")));
                        }
                    }
                    else
                    {
                        hr = HRESULT_FROM_WIN32(GetLastError());
                        WIA_PRINTHRESULT((hr,TEXT("GetProcAddress for MakeFullPidlForDevice failed!")));
                    }
                    FreeLibrary(hInstanceShellExt);
                }
                else
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                    WIA_PRINTHRESULT((hr,TEXT("Unable to load wiashext.dll!")));
                }
            }
            else
            {
                hr = E_FAIL;
                WIA_PRINTHRESULT((hr,TEXT("Buffer size was too small")));
            }
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            WIA_PRINTHRESULT((hr,TEXT("Unable to get system folder!")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("SHGetDesktopFolder failed!")));
    }
    return hr;
}

} // End namespace MinimalTransfer

LRESULT
MinimalTransferThreadProc (BSTR bstrDeviceId)
{
    if (bstrDeviceId)
    {
        CMinimalTransferSettings settings;

        HRESULT hr = CoInitialize(NULL);
        if (SUCCEEDED(hr))
        {
            GetSaveSettings (settings, bstrDeviceId);
            // Bail if the default action is donothing or if the user cancelled
            // the browse for folder
            if (settings.dwAction == ACTION_AUTOSAVE)
            {
                hr = SaveItems (bstrDeviceId, settings);
                // Show the folder the user saved to
                if (NOERROR == hr)
                {
                    SHELLEXECUTEINFO sei;
                    ZeroMemory (&sei, sizeof(sei));
                    sei.cbSize = sizeof(sei);
                    sei.lpDirectory = settings.strFolderPath;
                    sei.nShow = SW_SHOW;
                    ShellExecuteEx (&sei);
                }
                else if (FAILED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("SaveItems failed!")));
                    // we can rely on SaveItems reporting errors to the user

                }
            }
            CoUninitialize();
        }
#ifndef DBG_GENERATE_PRETEND_EVENT
        WIA_TRACE((TEXT("Module::m_nLockCnt: %d"),_Module.m_nLockCnt));
        _Module.Unlock();
#endif
        SysFreeString(bstrDeviceId);
    }
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by wiaacmgr.rc
//
#define IDI_SCANCAM                     2
#define IDS_PROJNAME                    100
#define IDR_ACQUISITIONMANAGER          101
#define IDS_DOWNLOADMANAGER_NAME        101
#define IDI_TRANSFER_ERROR              101
#define IDS_DOWNLOADMANAGER_DESC        102
#define IDI_SCANNER_WIZARD              102
#define IDR_MINIMALTRANSFER             102
#define IDS_DOWNLOADMANAGER_ICON        103
#define IDI_TRANSFER_WARN               103
#define IDD_CHOOSE_STI_APPLICATION      103
#define IDS_CAMERA_SELECT_NUMSEL        104
#define IDS_UNABLE_OPEN_EXPLORER        105
#define IDS_CAMERA_SELECT_TITLE         106
#define IDS_CAMERA_SELECT_SUBTITLE      107
#define IDS_CAMERA_DOWNLOAD_TITLE       108
#define IDI_UNAVAILABLE                 109
#define IDS_CAMERA_DOWNLOAD_SUBTITLE    109
#define IDS_CAMERA_TRANSFER_TITLE       110
#define IDS_CAMERA_TRANSFER_SUBTITLE    111
#define IDS_SCANNER_TRANSFER_TITLE      112
#define IDS_SCANNER_TRANSFER_SUBTITLE   113
#define IDS_SCANNER_SELECT_TITLE        114
#define IDS_SCANNER_SELECT_SUBTITLE     115
#define IDS_DOWNLOADINGTHUMBNAIL        116
#define IDS_DOWNLOAD_MANAGER_TITLE      117
#define IDS_CAMSEL_CLEAR_ALL            118
#define IDS_DEFAULT_BASE_NAME           119
#define IDS_INVALIDFILENAME             120
#define IDS_ERROR_TITLE                 121
#define IDS_EMPTYFILENAME               122
#define IDS_BROWSE_TITLE                123
#define IDS_NUMBER_MASK                 124
#define IDS_CAMSEL_SELECT_ALL           125
#define IDS_CAMSEL_TAKE_PICTURE         126
#define IDS_FILEN_OF_M                  127
#define IDS_PERCENT_COMPLETE_COPYING    128
#define IDS_DEVICE_DISCONNECTED         129
#define IDS_SCANSEL_COLORPHOTO          130
#define IDS_SCANSEL_BW                  131
#define IDS_SCANSEL_TEXT                132
#define IDS_SCANSEL_CUSTOM              133
#define IDS_COMTRANS_BAD_DIRECTORY      134
#define IDS_COMTRANS_BAD_DIRECTORY_2ND_TRY 135
#define IDS_CONNECTED_TO                136
#define IDS_PERCENT_COMPLETE_SCANNING   137
#define IDS_CANCELWIZARDCONFIRM         138
#define IDS_SCANNER_DOWNLOAD_TITLE      139
#define IDS_SCANNER_DOWNLOAD_SUBTITLE   140
#define IDS_ADVANCEDPROPERTIES          141
#define IDS_UNABLETOCREATE              142
#define IDS_TRANSFER_ERROR_OCCURRED     143
#define IDS_INVALIDFILENAME_SHORT       144
#define IDS_UNABLETOROTATE              145
#define IDS_GETTINGSTARTED              146
#define IDS_WAIT                        147
#define IDS_CAMERA_NO_IMAGES            148
#define IDS_DELETINGPICTURE             149
#define IDS_DELETING                    150
#define IDS_DEVICE_OFFLINE              151
#define IDS_NO_DEVICE_TEXT              152
#define IDS_FILETYPE                    153
#define IDS_REPLACE_REMOVEABLE_MEDIA    154
#define IDS_UNABLE_TO_CREATE_FILE       155
#define IDS_UNABLE_TO_ROTATE_FILE       156
#define IDS_UNABLE_TO_SAVE_FILE         157
#define IDS_TRANSFER_ERROR              158
#define IDS_ITEM_WAS_DELETED            159
#define IDS_DEVICE_BUSY                 160
#define IDS_BLANKFILETYPENAME           161
#define IDS_MINIMALTRANSFER_NAME        162
#define IDS_MINIMALTRANSFER_DESC        163
#define IDS_MINIMALTRANSFER_ICON        164
#define IDS_DATEFORMAT                  165
#define IDS_UNABLETOTRANSFER            166
#define IDS_DISKFULL                    167
#define IDS_PREVIEWSCAN_ERROR           168
#define IDS_PATH_TOO_LONG               169
#define IDS_MINTRANS_FOLDERPATH_CAPTION 170
#define IDS_MINTRANS_DOCREATE_CAPTION   171
#define IDS_MINTRANS_DOCREATE_FOLDER    172
#define IDS_HANDLERERR_CAPTION          173
#define IDS_HANDLERERR                  174
#define IDS_SCANSEL_SCANNINGPREVIEW     175
#define IDS_SCANNER_NO_IMAGES           176
#define IDS_NO_IMAGES_SELECTED          177
#define IDS_ERROR_SETTING_PROPS         178
#define IDS_UPLOADINGPICTURE            179
#define IDS_UPLOADING                   180
#define IDS_UNABLE_TO_CREATE_PLUGIN     181
#define IDS_PERCENT_COMPLETE_UPLOADING  182
#define IDS_UPLOADED_STRING             183
#define IDS_PROGDLG_MESSAGE             184
#define IDS_TRANSFER_GENERICFAILURE     185
#define IDS_TRANSFER_DEVICEBUSY         186
#define IDS_FINISH_SCANNER              187
#define IDS_FINISH_CAMERA               188
#define IDS_FINISH_VIDEO                189
#define IDS_SUCCESSFUL_DOWNLOAD         190
#define IDS_SUCCESSFUL_UPLOAD           191
#define IDS_CAMERA_PROGRESS_TITLE       192
#define IDS_CAMERA_PROGRESS_SUBTITLE    193
#define IDS_UPLOADTOWEBITEMNAME         194
#define IDS_ELLIPSIS                    195
#define IDS_DATEANDTOPIC                196
#define IDS_SKIPPED_IMAGES              197
#define IDS_STOP_BUTTON                 198
#define IDS_USER_CANCELLED              199
#define IDS_FIRST_PAGE_INSTRUCTIONS_CAMERA 200
#define IDS_FIRST_PAGE_INSTRUCTIONS_SCANNER 201
#define IDI_TEXT                        202
#define IDS_FIRST_PAGE_INSTRUCTIONS_VIDEO 202
#define IDD_CAMERA_FIRST                203
#define IDI_CPHOTO                      203
#define IDS_VIDEO_NO_IMAGES             203
#define IDD_CAMERA_SELECT               204
#define IDI_CUSTOM                      204
#define IDS_DUPLICATE_FILE_WARNING      204
#define IDI_BWPHOTO                     205
#define IDS_TRANSFER_GENERICFAILURE_NO_CONTINUE 205
#define IDI_VIDEO_WIZARD                206
#define IDS_VIDEOPREVIEWUNAVAILABLE     206
#define IDB_VIDEO_HEADER                207
#define IDS_PREVIEWOUTOFPAPER           207
#define IDD_SCANNER_FIRST               208
#define IDS_ERROR_WRITE_PROTECT         208
#define IDD_SCANNER_SELECT              209
#define IDS_TRANSFER_PAPEREMPTY         209
#define IDC_SCANSEL_INTENT_1            210
#define IDD_EVENTPROMPT                 210
#define IDS_COMMON_UPLOAD_TITLE         210
#define IDC_SCANSEL_ICON_1              211
#define IDR_EVENTPROMPT                 211
#define IDS_COMMON_UPLOAD_SUBTITLE      211
#define IDC_SCANSEL_ICON_2              212
#define IDI_UPLOADTOWEB                 212
#define IDS_CONFIRM_CANCEL_DOWNLOAD     212
#define IDC_SCANSEL_INTENT_2            213
#define IDS_CONFIRM_CANCEL_UPLOAD       213
#define IDC_SCANSEL_INTENT_3            214
#define IDS_CONFIRM_SAVE_DOWNLOADED     214
#define IDC_SCANSEL_INTENT_4            215
#define IDS_SCANSEL_INITIALIZING_SCANNER 215
#define IDC_SCANSEL_ICON_3              216
#define IDS_CONFIRM_CANCEL_DELETE       216
#define IDC_SCANSEL_ICON_4              217
#define IDD_SCANNER_TRANSFER            217
#define IDS_COMMON_DELETE_TITLE         217
#define IDC_SCANSEL_PROPERTIES          218
#define IDD_VIDEO_FIRST                 218
#define IDS_COMMON_DELETE_SUBTITLE      218
#define IDD_SCANNER_ADF_SELECT          219
#define IDS_UNSUPPORTED_DEVICE          219
#define IDB_CAMSEL_TOOLBAR              219
#define IDC_TRANSFER_DELETEAFTERDOWNLOAD 220
#define IDS_ERROR_ACCESS_DENIED         220
#define IDC_CAMFIRST_EXPLORE            221
#define IDD_COMMON_FINISH               221
#define IDS_SCROLLFED_SELECT_SUBTITLE   221
#define IDB_SCANSEL_TOOLBAR             221
#define IDD_COMMON_PROGRESS             222
#define IDS_SCROLLFED_SELECT_TITLE      222
#define IDD_VIDEO_SELECT                223
#define IDS_ENUMERATIONCOUNT            223
#define IDR_STIEVENTHANDLER             223
#define IDS_CONFIRMDELETE               224
#define IDR_CAMERASELECTIONACCEL        224
#define IDD_COMMON_DELETE               225
#define IDS_SOUNDS_APPLICATION_NAME     225
#define IDS_SOUNDS_CONNECT_SOUND        226
#define IDD_CAMERA_TRANSFER             226
#define IDS_SOUNDS_DISCONNECT_SOUND     227
#define IDD_UPLOAD_QUERY                227
#define IDS_SOUNDS_CONNECT_LABEL        228
#define IDS_SOUNDS_DISCONNECT_LABEL     229
#define IDS_DUPLICATE_FILENAME_MASK     230
#define IDS_UNABLE_TO_OPEN_UPLOAD_WIZARD 231
#define IDC_TRANSFER_IMAGETYPE          232
#define IDS_CAMSEL_TOOLTIP_ROTATE_RIGHT 232
#define IDS_CAMSEL_TOOLTIP_ROTATE_LEFT  233
#define IDS_CAMSEL_TOOLTIP_PROPERTIES   234
#define IDS_CAMSEL_TOOLTIP_TAKE_PICTURE 235
#define IDC_FIRST_INSTRUCTIONS          236
#define IDS_CAMSEL_TOOLTIP_CLEAR_ALL    236
#define IDC_HANDLERLIST                 237
#define IDS_CAMSEL_TOOLTIP_SELECT_ALL   237
#define IDC_NOPROMPT                    238
#define IDS_SCANSEL_SHOW_SELECTION      238
#define IDC_EVENTNAME                   239
#define IDS_SCANSEL_SHOW_BED            239
#define IDS_VIDEO_SELECT_TITLE          240
#define IDS_VIDEO_SELECT_SUBTITLE       241
#define IDS_SCANNER_SELECT_SUBTITLE_NO_PREVIEW 242
#define IDS_SCANNER_PROGRESS_TITLE      243
#define IDS_SCANNER_PROGRESS_SUBTITLE   244
#define IDS_IMAGE_UPLOAD_PROGRESS       245
#define IDS_OVERALL_UPLOAD_PROGRESS     246
#define IDS_DELETING_FILEN_OF_M         247
#define IDS_FINISH_SHOW_ME_MY_PICTURES  248
#define IDS_FINISH_IN_A_FOLDER          249
#define IDS_FINISH_ON_A_SITE            250
#define IDC_FINISH_STATUS               251
#define IDS_FINISH_SUCCESS_TITLE        251
#define IDC_FINISH_TITLE                252
#define IDS_FINISH_FAILURE_TITLE        252
#define IDC_COMPROG_CURRENTIMAGE        253
#define IDS_PROPERTY_SHEET_ERROR        253
#define IDC_COMPROG_CURRENTIMAGE_TEXT   254
#define IDS_FINISH_ERROR_MESSAGE        254
#define IDC_COMPROG_DOWNLOADPROGRESS_TEXT 255
#define IDS_UNABLE_TO_PUBLISH           255
#define IDC_COMPROG_DOWNLOADPROGRESS    256
#define IDS_UPLOAD_ERROR                256
#define IDS_FINISH_UPLOAD_FAILED        257
#define IDC_COMPROG_CURRENTTHUMBNAIL    258
#define IDS_FINISH_UPLOAD_CANCELLED     258
#define IDC_COMPROG_DESTNAME            259
#define IDS_FINISH_UPLOAD_SUCCEEDED     259
#define IDC_COMPROG_IMAGENAME           260
#define IDS_FINISH_PROMPT_FAILURE       260
#define IDS_TAKING_PICTURE              261
#define IDS_TRANSFER_SCANNEDITEMMAYBETOOLARGE 262
#define IDS_UNABLE_TO_TAKE_PICTURE      263
#define IDS_SELECTED_NO_IMAGES_SELECTED 264
#define IDS_SELECTED_NO_PICTURES        265
#define IDS_FINISH_LOCAL_LINK_PROMPT    266
#define IDS_FINISH_REMOTE_LINK_PROMPT   267
#define IDS_DELETION_FAILED             268
#define IDS_FINISH_PROMPT_SUCCESS       269
#define IDS_STI_EVENT_ERROR_TITLE       270
#define IDS_STI_EVENT_ERROR_WITH_EXPLANATION 271
#define IDS_STI_EVENT_ERROR_NO_EXPLANATION 272
#define IDS_STI_EVENT_ERROR_APP_NAME    273
#define IDS_FINISH_TO_CLOSE_TITLE       274
#define IDS_FINISH_PROMPT_FAILURE_DISCONNECT 275
#define IDS_DOWNLOADMANAGER_AUTOPLAY    276
#define IDS_DEVICE_NOT_FOUND            277
#define IDS_MULTIPAGE_PAPER_PROBLEM     278
#define IDS_MULTIPAGE_FATAL_ERROR       279
#define IDC_COMDEL_CURRENTIMAGE_TEXT    289
#define IDC_COMDEL_CURRENTIMAGE         290
#define IDC_COMDEL_CURRENTTHUMBNAIL     293
#define IDC_TRANSFER_UPLOAD_TO_WEB      295
#define IDC_TRANSFER_UPLOAD_NO          296
#define IDC_TRANSFER_1                  297
#define IDC_TRANSFER_UPLOAD_TO_PRINT    297
#define IDC_TRANSFER_2                  298
#define IDC_TRANSFER_3                  299
#define IDC_TRANSFER_NAME_PROMPT        301
#define IDC_TRANSFER_FOLDER_PROMPT      302
#define IDC_TRANSFER_UPLOAD_PROMPT      303
#define IDC_TRANSFER_UPLOAD_SUCCESS     304
#define IDC_TRANSFER_FORMAT_PROMPT      305
#define IDC_CAMSEL_CAMERA_BUTTON_BAR_GUIDE 306
#define IDC_CAMSEL_VIDEO_PREVIEW_BUTTON_BAR_GUIDE 307
#define IDC_CAMSEL_VIDEO_SELECTION_BUTTON_BAR_GUIDE 308
#define IDC_SCANSEL_BUTTON_BAR_GUIDE    309
#define IDC_FINISH_PROMPT               317
#define IDC_STI_APPS_LIST_PROMPT        319
#define IDC_TRANSFER_UPLOAD_HELP        320
#define IDB_CAMERA_WATERMARK            400
#define IDC_TRANSFER_ROOTNAME           507
#define IDC_TRANSFER_DESTINATION        513
#define IDC_TRANSFER_BROWSE             514
#define IDC_CAMSEL_STATUS               526
#define IDC_FIRST_TITLE                 531
#define IDC_FIRST_DEVICE_NAME           533
#define IDB_CAMERA_HEADER               602
#define IDB_SCANNER_WATERMARK           603
#define IDB_SCANNER_HEADER              604
#define IDI_LITTLE_I                    604
#define IDI_CAMERA_WIZARD               605
#define IDB_VIDEO_WATERMARK             605
#define IDI_TRANSFER_OK                 606
#define IDI_DEFTYPE                     607
#define IDC_CAMSEL_THUMBNAILS           1000
#define IDC_STI_APPS_LIST               1002
#define IDC_VIDSEL_PREVIEW              1003
#define IDC_STI_APPS_SUB_TITLE          1005
#define IDC_STI_APPS_ICON               1006
#define IDC_SCANSEL_PREVIEW             1013
#define IDC_SCANSEL_RESCAN              1014
#define IDS_CONFIRM_DELETE              1017
#define IDS_CONFIRM_DELETE_CAPTION      1018
#define IDC_SCANSEL_PAPERSOURCE         1031
#define IDC_SCANSEL_PAPERSIZE           1032
#define IDC_SCANSEL_PAPERSIZE_STATIC    1033
#define IDC_SCANSEL_PAPERSOURCE_STATIC  1034
#define IDC_CAMSEL_ROTATE_RIGHT         1035
#define IDC_CAMSEL_ROTATE_LEFT          1036
#define IDC_CAMSEL_SELECT_ALL           1037
#define IDC_CAMSEL_CLEAR_ALL            1038
#define IDC_CAMSEL_PROPERTIES           1039
#define IDC_CAMSEL_TAKE_PICTURE         1040
#define IDS_SCANSEL_FLATBED             1100
#define IDS_SCANSEL_ADF                 1101
#define IDB_DEFAULT_SCANNER_BITMAP      4001
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        225
#define _APS_NEXT_COMMAND_VALUE         1041
#define _APS_NEXT_CONTROL_VALUE         322
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\precomp.h ===
// precomp.h : include file for standard system include files,
// or project specific include files that are used frequently,
// but are changed infrequently

#if !defined(AFX_precomp_H__29EDE425_AA9D_4D61_885A_F8A87EBFE078__INCLUDED_)
#define AFX_precomp_H__29EDE425_AA9D_4D61_885A_F8A87EBFE078__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#define STRICT
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0400
#endif
#define _ATL_APARTMENT_THREADED

#include <atlbase.h>
#include <uicommon.h>
#include <commctrl.h>
#include <wia.h>
#include <sti.h>
#include <wiavideo.h>
#include <shfusion.h>
#include <shpriv.h>
#include <shlwapi.h>
#include <shlwapip.h>
//You may derive a class from CComModule and use it if you want to override
//something, but do not change the name of _Module
class CExeModule : public CComModule
{
public:
    LONG Unlock();
    DWORD dwThreadID;
    HANDLE hEventShutdown;
    void MonitorShutdown();
    bool StartMonitor();
    bool bActivity;
};
extern CExeModule _Module;
#include <atlcom.h>


extern HINSTANCE g_hInstance;


//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_precomp_H__29EDE425_AA9D_4D61_885A_F8A87EBFE078__INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\mru.h ===
#ifndef __MRU_H_INCLUDED
#define __MRU_H_INCLUDED

#include <windows.h>
#include <shlobj.h>
#include <shlobjp.h>
#include "simstr.h"
#include "simidlst.h"
#include "destdata.h"

#define CURRENT_REGISTRY_DATA_FORMAT_VERSION 2

class CMruStringList : public CSimpleLinkedList<CSimpleString>
{
private:
    int m_nNumToWrite;
    enum
    {
        DefaultNumToWrite=20
    };
private:
    CMruStringList( const CMruStringList & );
    CMruStringList &operator=( const CMruStringList & );
public:
    CMruStringList( int nNumToWrite=DefaultNumToWrite )
    : m_nNumToWrite(nNumToWrite)
    {
    }
    bool Read( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, false, KEY_READ );
        if (reg.OK())
        {
            if (REG_MULTI_SZ==reg.Type(pszValueName))
            {
                int nSize = reg.Size(pszValueName);
                if (nSize)
                {
                    PBYTE pData = new BYTE[nSize];
                    if (pData)
                    {
                        if (reg.QueryBin( pszValueName, pData, nSize ))
                        {
                            for (LPTSTR pszCurr=reinterpret_cast<LPTSTR>(pData);*pszCurr;pszCurr+=lstrlen(pszCurr)+1)
                            {
                                Append( pszCurr );
                            }
                        }
                        delete[] pData;
                    }
                }
            }
        }
        return(true);
    }
    bool Write( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, true, KEY_WRITE );
        if (reg.OK())
        {
            int nLengthInChars = 0, nCount;
            Iterator i;
            for (i=Begin(),nCount=0;i != End() && nCount < m_nNumToWrite;++i,++nCount)
                nLengthInChars += (*i).Length() + 1;
            if (nLengthInChars)
            {
                ++nLengthInChars;
                LPTSTR pszMultiStr = new TCHAR[nLengthInChars];
                if (pszMultiStr)
                {
                    LPTSTR pszCurr = pszMultiStr;
                    for (i = Begin(), nCount=0;i != End() && nCount < m_nNumToWrite;++i,++nCount)
                    {
                        lstrcpy(pszCurr,(*i).String());
                        pszCurr += (*i).Length() + 1;
                    }
                    *pszCurr = TEXT('\0');
                    reg.SetBin( pszValueName, reinterpret_cast<PBYTE>(pszMultiStr), nLengthInChars*sizeof(TCHAR), REG_MULTI_SZ );
                    delete[] pszMultiStr;
                }
            }
        }
        return(true);
    }
    void Add( CSimpleString str )
    {
        if (str.Length())
        {
            Remove(str);
            Prepend(str);
        }
    }
    void PopulateComboBox( HWND hWnd )
    {
        SendMessage( hWnd, CB_RESETCONTENT, 0, 0 );
        for (Iterator i = Begin();i != End();++i)
        {
            SendMessage( hWnd, CB_ADDSTRING, 0, (LPARAM)((*i).String()));
        }
    }
};

class CMruShellIdList : public CSimpleLinkedList<CSimpleIdList>
{
private:
    int m_nNumToWrite;
    enum
    {
        DefaultNumToWrite=20
    };
    struct REGISTRY_SIGNATURE
    {
        DWORD dwSize;
        DWORD dwVersion;
        DWORD dwCount;
    };
private:
    CMruShellIdList( const CMruShellIdList & );
    CMruShellIdList &operator=( const CMruShellIdList & );
public:
    CMruShellIdList( int nNumToWrite=DefaultNumToWrite )
    : m_nNumToWrite(nNumToWrite)
    {
    }
    bool Read( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, false, KEY_READ );
        if (reg.OK())
        {
            if (REG_BINARY==reg.Type(pszValueName))
            {
                int nSize = reg.Size(pszValueName);
                if (nSize >= sizeof(REGISTRY_SIGNATURE))
                {
                    PBYTE pData = new BYTE[nSize];
                    if (pData)
                    {
                        if (reg.QueryBin( pszValueName, pData, nSize ))
                        {
                            REGISTRY_SIGNATURE rs;
                            CopyMemory( &rs, pData, sizeof(REGISTRY_SIGNATURE) );
                            if (rs.dwSize == sizeof(REGISTRY_SIGNATURE) && rs.dwVersion == CURRENT_REGISTRY_DATA_FORMAT_VERSION && rs.dwCount)
                            {
                                PBYTE pCurr = pData + sizeof(REGISTRY_SIGNATURE);
                                for (int i=0;i<(int)rs.dwCount;i++)
                                {
                                    DWORD dwItemSize;
                                    CopyMemory( &dwItemSize, pCurr, sizeof(DWORD) );
                                    if (dwItemSize)
                                    {
                                        Append( CSimpleIdList( pCurr+sizeof(DWORD), dwItemSize ) );
                                    }
                                    pCurr += dwItemSize + sizeof(DWORD);
                                }
                            }
                        }
                        delete[] pData;
                    }
                }
            }
        }
        return(true);
    }
    bool Write( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, true, KEY_WRITE );
        if (reg.OK())
        {
            int nLengthInBytes = sizeof(REGISTRY_SIGNATURE), nCount=0;
            Iterator ListIter=Begin();
            while (ListIter != End() && nCount < m_nNumToWrite)
            {
                nLengthInBytes += (*ListIter).Size() + sizeof(DWORD);
                ++ListIter;
                ++nCount;
            }
            PBYTE pItems = new BYTE[nLengthInBytes];
            if (pItems)
            {
                REGISTRY_SIGNATURE rs;
                rs.dwSize = sizeof(REGISTRY_SIGNATURE);
                rs.dwVersion = CURRENT_REGISTRY_DATA_FORMAT_VERSION;
                rs.dwCount = nCount;
                PBYTE pCurr = pItems;
                CopyMemory( pCurr, &rs, sizeof(REGISTRY_SIGNATURE) );
                pCurr += sizeof(REGISTRY_SIGNATURE);
                ListIter=Begin();
                while (ListIter != End() && nCount > 0)
                {
                    DWORD dwItemSize = (*ListIter).Size();
                    CopyMemory( pCurr, &dwItemSize, sizeof(DWORD) );
                    pCurr += sizeof(DWORD);
                    CopyMemory( pCurr, (*ListIter).IdList(), (*ListIter).Size() );
                    pCurr += (*ListIter).Size();
                    ++ListIter;
                    --nCount;
                }
                reg.SetBin( pszValueName, pItems, nLengthInBytes, REG_BINARY );
                delete[] pItems;
            }
        }
        return(true);
    }
    Iterator Add( CSimpleIdList item )
    {
        if (item.IsValid())
        {
            Remove(item);
            return Prepend(item);
        }
        return End();
    }
};

class CMruDestinationData : public CSimpleLinkedList<CDestinationData>
{
private:
    int m_nNumToWrite;
    enum
    {
        DefaultNumToWrite=20
    };
    struct REGISTRY_SIGNATURE
    {
        DWORD dwSize;
        DWORD dwVersion;
        DWORD dwCount;
    };
private:
    CMruDestinationData( const CMruDestinationData & );
    CMruDestinationData &operator=( const CMruDestinationData & );
public:
    CMruDestinationData( int nNumToWrite=DefaultNumToWrite )
      : m_nNumToWrite(nNumToWrite)
    {
    }
    bool Read( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, false, KEY_READ );
        if (reg.OK())
        {
            if (REG_BINARY==reg.Type(pszValueName))
            {
                int nSize = reg.Size(pszValueName);
                if (nSize >= sizeof(REGISTRY_SIGNATURE))
                {
                    PBYTE pData = new BYTE[nSize];
                    if (pData)
                    {
                        if (reg.QueryBin( pszValueName, pData, nSize ))
                        {
                            REGISTRY_SIGNATURE rs;
                            CopyMemory( &rs, pData, sizeof(REGISTRY_SIGNATURE) );
                            if (rs.dwSize == sizeof(REGISTRY_SIGNATURE) && rs.dwVersion == CURRENT_REGISTRY_DATA_FORMAT_VERSION && rs.dwCount)
                            {
                                PBYTE pCurr = pData + sizeof(REGISTRY_SIGNATURE);
                                for (int i=0;i<(int)rs.dwCount;i++)
                                {
                                    DWORD dwItemSize;
                                    CopyMemory( &dwItemSize, pCurr, sizeof(DWORD) );
                                    pCurr += sizeof(DWORD);

                                    if (dwItemSize)
                                    {
                                        CDestinationData DestinationData;
                                        DestinationData.SetRegistryData(pCurr,dwItemSize);
                                        Append( DestinationData );
                                    }

                                    pCurr += dwItemSize;
                                }
                            }
                        }
                        delete[] pData;
                    }
                }
            }
        }
        return(true);
    }
    bool Write( HKEY hRoot, LPCTSTR pszKey, LPCTSTR pszValueName )
    {
        CSimpleReg reg( hRoot, pszKey, true, KEY_WRITE );
        if (reg.OK())
        {
            //
            // Find the size needed for the data
            //
            int nLengthInBytes = sizeof(REGISTRY_SIGNATURE), nCount=0;
            Iterator ListIter=Begin();
            while (ListIter != End() && nCount < m_nNumToWrite)
            {
                nLengthInBytes += (*ListIter).RegistryDataSize() + sizeof(DWORD);
                ++nCount;
                ++ListIter;
            }
            PBYTE pItems = new BYTE[nLengthInBytes];
            if (pItems)
            {
                REGISTRY_SIGNATURE rs;
                rs.dwSize = sizeof(REGISTRY_SIGNATURE);
                rs.dwVersion = CURRENT_REGISTRY_DATA_FORMAT_VERSION;
                rs.dwCount = nCount;
                PBYTE pCurr = pItems;
                CopyMemory( pCurr, &rs, sizeof(REGISTRY_SIGNATURE) );
                pCurr += sizeof(REGISTRY_SIGNATURE);
                int nLengthRemaining = nLengthInBytes - sizeof(REGISTRY_SIGNATURE);
                ListIter=Begin();
                while (ListIter != End() && nCount > 0)
                {
                    DWORD dwSize = (*ListIter).RegistryDataSize();
                    CopyMemory( pCurr, &dwSize, sizeof(DWORD) );
                    pCurr += sizeof(DWORD);

                    (*ListIter).GetRegistryData( pCurr, nLengthRemaining );
                    pCurr += (*ListIter).RegistryDataSize();

                    --nCount;
                    ++ListIter;
                }
                reg.SetBin( pszValueName, pItems, nLengthInBytes, REG_BINARY );
                delete[] pItems;
            }
        }
        return(true);
    }
    Iterator Add( CDestinationData item )
    {
        if (item.IsValid())
        {
            Remove(item);
            return Prepend(item);
        }
        return End();
    }
};


#endif //__MRU_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\scansel.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SCANSEL.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Scanner region selection (preview) page
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "scansel.h"
#include "simcrack.h"
#include "resource.h"
#include "simstr.h"
#include "mboxex.h"
#include "createtb.h"
#include <vwiaset.h>

#define IDC_SCANSEL_SELECTION_BUTTON_BAR 1100
#define IDC_SCANSEL_SHOW_SELECTION       1200
#define IDC_SCANSEL_SHOW_BED             1201

//
// Associate a document handling flag with a string resource
//
static const struct
{
    int nFlag;
    int nStringId;
}
g_SupportedDocumentHandlingTypes[] =
{
    { FLATBED, IDS_SCANSEL_FLATBED },
    { FEEDER,  IDS_SCANSEL_ADF }
};
static const int g_SupportedDocumentHandlingTypesCount = ARRAYSIZE(g_SupportedDocumentHandlingTypes);

//
// Associate an icon control's resource id with a radio button's resource id
//
static const struct
{
    int nIconId;
    int nRadioId;
}
gs_IntentRadioButtonIconPairs[] =
{
    { IDC_SCANSEL_ICON_1, IDC_SCANSEL_INTENT_1 },
    { IDC_SCANSEL_ICON_2, IDC_SCANSEL_INTENT_2 },
    { IDC_SCANSEL_ICON_3, IDC_SCANSEL_INTENT_3 },
    { IDC_SCANSEL_ICON_4, IDC_SCANSEL_INTENT_4 }
};
static const int gs_nCountIntentRadioButtonIconPairs = ARRAYSIZE(gs_IntentRadioButtonIconPairs);


//
// Sole constructor
//
CScannerSelectionPage::CScannerSelectionPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_nThreadNotificationMessage(RegisterWindowMessage(STR_THREAD_NOTIFICATION_MESSAGE)),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE)),
    m_hBitmapDefaultPreviewBitmap(NULL),
    m_bAllowRegionPreview(false),
    m_hwndPreview(NULL),
    m_hwndSelectionToolbar(NULL),
    m_hwndRescan(NULL),
    m_ScannerSelectionButtonBarBitmapInfo( g_hInstance, IDB_SCANSEL_TOOLBAR )
{
    ZeroMemory( &m_sizeDocfeed, sizeof(m_sizeDocfeed) );
    ZeroMemory( &m_sizeFlatbed, sizeof(m_sizeFlatbed) );
}

//
// Destructor
//
CScannerSelectionPage::~CScannerSelectionPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;

    //
    // Free the paper sizes
    //
    if (m_pPaperSizes)
    {
        CComPtr<IWiaScannerPaperSizes> pWiaScannerPaperSizes;
        HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaScannerPaperSizes, (void**)&pWiaScannerPaperSizes );
        if (SUCCEEDED(hr))
        {
            hr = pWiaScannerPaperSizes->FreePaperSizes( &m_pPaperSizes, &m_nPaperSizeCount );
        }
    }
}

//
// Calculate the maximum scan size using the give DPI
//
static bool GetFullResolution( IWiaItem *pWiaItem, LONG nResX, LONG nResY, LONG &nExtX, LONG &nExtY )
{
    WIA_PUSHFUNCTION(TEXT("CScannerItem::GetFullResolution"));
    CComPtr<IWiaItem> pRootItem;
    if (SUCCEEDED(pWiaItem->GetRootItem(&pRootItem)) && pRootItem)
    {
        LONG lBedSizeX, lBedSizeY;
        if (PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_HORIZONTAL_BED_SIZE, lBedSizeX ) &&
            PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_VERTICAL_BED_SIZE, lBedSizeY ))
        {
            nExtX = WiaUiUtil::MulDivNoRound( nResX, lBedSizeX, 1000 );
            nExtY = WiaUiUtil::MulDivNoRound( nResY, lBedSizeY, 1000 );
            return(true);
        }
    }
    return(false);
}

//
// Calculate the maximum scan size using the give DPI
//
static bool GetBedAspectRatio( IWiaItem *pWiaItem, LONG &nResX, LONG &nResY )
{
    WIA_PUSHFUNCTION(TEXT("CScannerItem::GetFullResolution"));
    nResX = nResY = 0;
    if (pWiaItem)
    {
        CComPtr<IWiaItem> pRootItem;
        if (SUCCEEDED(pWiaItem->GetRootItem(&pRootItem)) && pRootItem)
        {
            if (PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_HORIZONTAL_BED_SIZE, nResX ) &&
                PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_VERTICAL_BED_SIZE, nResY ))
            {
                return true;
            }
        }
    }
    return(false);
}


bool CScannerSelectionPage::ApplyCurrentPreviewWindowSettings(void)
{
    WIA_PUSHFUNCTION(TEXT("CScannerSelectionPage::ApplyCurrentPreviewWindowSettings"));
    CWiaItem *pWiaItem = GetActiveScannerItem();
    if (pWiaItem)
    {
        CWiaItem::CScanRegionSettings &ScanRegionSettings = pWiaItem->ScanRegionSettings();

        //
        // m_hwndPreview will be NULL if the preview control is not active
        //
        if (m_hwndPreview)
        {
            //
            // Get the current resolution
            //
            SIZE sizeCurrentResolution;
            if (PropStorageHelpers::GetProperty( pWiaItem->WiaItem(), WIA_IPS_XRES, sizeCurrentResolution.cx ) &&
                PropStorageHelpers::GetProperty( pWiaItem->WiaItem(), WIA_IPS_YRES, sizeCurrentResolution.cy ))
            {
                //
                // Compute the full page resolution of the item
                //
                if (GetFullResolution( pWiaItem->WiaItem(), sizeCurrentResolution.cx, sizeCurrentResolution.cy, ScanRegionSettings.sizeResolution.cx, ScanRegionSettings.sizeResolution.cy ))
                {
                    //
                    // Set the resolution in the preview control
                    //
                    WiaPreviewControl_SetResolution( m_hwndPreview, &ScanRegionSettings.sizeResolution );

                    //
                    // Save the origin and extents
                    //
                    WiaPreviewControl_GetSelOrigin( m_hwndPreview, 0, FALSE, &ScanRegionSettings.ptOrigin );
                    WiaPreviewControl_GetSelExtent( m_hwndPreview, 0, FALSE, &ScanRegionSettings.sizeExtent );

                    WIA_TRACE((TEXT("ScanRegionSettings.sizeExtent: (%d,%d)"), ScanRegionSettings.sizeExtent.cx, ScanRegionSettings.sizeExtent.cy ));

                    //
                    // Set the origin and extents.  We don't set them directly, because they might not be a correct multiple
                    //
                    if (CValidWiaSettings::SetNumericPropertyOnBoundary( pWiaItem->WiaItem(), WIA_IPS_XPOS, ScanRegionSettings.ptOrigin.x ))
                    {
                        if (CValidWiaSettings::SetNumericPropertyOnBoundary( pWiaItem->WiaItem(), WIA_IPS_YPOS, ScanRegionSettings.ptOrigin.y ))
                        {
                            if (CValidWiaSettings::SetNumericPropertyOnBoundary( pWiaItem->WiaItem(), WIA_IPS_XEXTENT, ScanRegionSettings.sizeExtent.cx ))
                            {
                                if (CValidWiaSettings::SetNumericPropertyOnBoundary( pWiaItem->WiaItem(), WIA_IPS_YEXTENT, ScanRegionSettings.sizeExtent.cy ))
                                {
                                    return true;
                                }
                                else
                                {
                                    WIA_ERROR((TEXT("PropStorageHelpers::SetProperty on WIA_IPS_YEXTENT failed")));
                                }
                            }
                            else
                            {
                                WIA_ERROR((TEXT("PropStorageHelpers::SetProperty on WIA_IPS_XEXTENT failed")));
                            }
                        }
                        else
                        {
                            WIA_ERROR((TEXT("PropStorageHelpers::SetProperty on WIA_IPS_YPOS failed")));
                        }
                    }
                    else
                    {
                        WIA_ERROR((TEXT("PropStorageHelpers::SetProperty on WIA_IPS_XPOS failed")));
                    }
                }
            }
        }
    }
    return false;
}


//
// PSN_WIZNEXT
//
LRESULT CScannerSelectionPage::OnWizNext( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION(TEXT("CScannerSelectionPage::OnWizNext"));
    CWiaItem *pWiaItem = GetActiveScannerItem();
    if (pWiaItem)
    {
        pWiaItem->CustomPropertyStream().WriteToRegistry( pWiaItem->WiaItem(), HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REGSTR_KEYNAME_USER_SETTINGS_WIAACMGR );
    }

    //
    // Assume we'll use the preview window's settings, instead of the page size
    //
    bool bUsePreviewSettings = true;

    //
    // Assume there has been a problem
    //
    bool bSucceeded = false;

    //
    // Make sure we have all valid data
    //
    if (m_pControllerWindow->m_pWiaItemRoot && pWiaItem && pWiaItem->WiaItem())
    {
        //
        // Apply the current intent
        //
        if (ApplyCurrentIntent())
        {
            //
            // Find out if we're in the ADF capable dialog
            //
            HWND hWndPaperSize = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSIZE );
            if (hWndPaperSize)
            {
                WIA_TRACE((TEXT("ADF Mode")));
                //
                // See if we are in document feeder mode
                //
                if (InDocFeedMode())
                {
                    //
                    // Get the selected paper size
                    //
                    LRESULT nCurSel = SendMessage( hWndPaperSize, CB_GETCURSEL, 0, 0 );
                    if (CB_ERR != nCurSel)
                    {
                        //
                        // Which entry in the global paper size table is it?
                        //
                        LRESULT nPaperSizeIndex = SendMessage( hWndPaperSize, CB_GETITEMDATA, nCurSel, 0 );
                        if (CB_ERR != nPaperSizeIndex)
                        {
                            //
                            // If we have a valid page size
                            //
                            if (m_pPaperSizes[nPaperSizeIndex].nWidth && m_pPaperSizes[nPaperSizeIndex].nHeight)
                            {
                                //
                                // We won't be using the preview window
                                //
                                bUsePreviewSettings = false;

                                //
                                // Assume upper-left registration
                                //
                                POINT ptOrigin = { 0, 0 };
                                SIZE sizeExtent = { m_pPaperSizes[nPaperSizeIndex].nWidth, m_pPaperSizes[nPaperSizeIndex].nHeight };

                                //
                                // Get the registration, and shift the coordinates as necessary
                                //
                                LONG nSheetFeederRegistration;
                                if (!PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_SHEET_FEEDER_REGISTRATION, nSheetFeederRegistration ))
                                {
                                    nSheetFeederRegistration = LEFT_JUSTIFIED;
                                }
                                if (nSheetFeederRegistration == CENTERED)
                                {
                                    ptOrigin.x = (m_sizeDocfeed.cx - sizeExtent.cx) / 2;
                                }
                                else if (nSheetFeederRegistration == RIGHT_JUSTIFIED)
                                {
                                    ptOrigin.x = m_sizeDocfeed.cx - sizeExtent.cx;
                                }

                                //
                                // Get the current resolution, so we can calculate the full-bed resolution in terms of the current DPI
                                //
                                LONG nXRes = 0, nYRes = 0;
                                if (PropStorageHelpers::GetProperty( pWiaItem->WiaItem(), WIA_IPS_XRES, nXRes ) &&
                                    PropStorageHelpers::GetProperty( pWiaItem->WiaItem(), WIA_IPS_YRES, nYRes ))
                                {
                                    //
                                    // Make sure these are valid resolution settings
                                    //
                                    if (nXRes && nYRes)
                                    {
                                        //
                                        //  Calculate the full bed resolution in the current DPI
                                        //
                                        SIZE sizeFullBedResolution = { 0, 0 };
                                        sizeFullBedResolution.cx = WiaUiUtil::MulDivNoRound( nXRes, m_sizeDocfeed.cx, 1000 );
                                        sizeFullBedResolution.cy = WiaUiUtil::MulDivNoRound( nYRes, m_sizeDocfeed.cy, 1000 );

                                        //
                                        // Make sure these resolution numbers are valid
                                        //
                                        if (sizeFullBedResolution.cx && sizeFullBedResolution.cy)
                                        {
                                            //
                                            // Calculate the origin and extent in terms of the current DPI
                                            //
                                            ptOrigin.x = WiaUiUtil::MulDivNoRound( ptOrigin.x, sizeFullBedResolution.cx, m_sizeDocfeed.cx );
                                            ptOrigin.y = WiaUiUtil::MulDivNoRound( ptOrigin.y, sizeFullBedResolution.cy, m_sizeDocfeed.cy );

                                            sizeExtent.cx = WiaUiUtil::MulDivNoRound( sizeExtent.cx, sizeFullBedResolution.cx, m_sizeDocfeed.cx );
                                            sizeExtent.cy = WiaUiUtil::MulDivNoRound( sizeExtent.cy, sizeFullBedResolution.cy, m_sizeDocfeed.cy );

                                            //
                                            // Write the properties
                                            //
                                            if (PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_XPOS, ptOrigin.x ) &&
                                                PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_YPOS, ptOrigin.y ) &&
                                                PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_XEXTENT, sizeExtent.cx ) &&
                                                PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_YEXTENT, sizeExtent.cy ))
                                            {
                                                //
                                                // Tell the scanner to scan from the ADF and to scan one page only
                                                //
                                                if (PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, FEEDER ) &&
                                                    PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_PAGES, 1 ))
                                                {

                                                    //
                                                    // Everything seemed to work.  This item is ready for transfer.
                                                    //
                                                    bSucceeded = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            //
            // m_hwndPreview will be NULL if the preview control is not active
            //
            else if (!m_hwndPreview)
            {
                WIA_TRACE((TEXT("Scrollfed scanner")));
                //
                // Set the origin to 0,0 and the extent to max,0
                //

                //
                // Get the current x resolution, so we can calculate the full-bed width in terms of the current DPI
                //
                LONG nXRes = 0;
                if (PropStorageHelpers::GetProperty( pWiaItem->WiaItem(), WIA_IPS_XRES, nXRes ))
                {
                    //
                    // Make sure this is a valid resolution
                    //
                    if (nXRes)
                    {
                        //
                        //  Calculate the full bed resolution in the current DPI
                        //
                        LONG nWidth = WiaUiUtil::MulDivNoRound( nXRes, m_sizeDocfeed.cx, 1000 );
                        if (nWidth)
                        {
                            PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_XPOS, 0 );
                            PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_YPOS, 0 );
                            PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_XEXTENT, nWidth );
                            PropStorageHelpers::SetProperty( pWiaItem->WiaItem(), WIA_IPS_YEXTENT, 0 );
                            PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_PAGES, 1 );
                            bUsePreviewSettings = false;
                            bSucceeded = true;
                        }
                    }
                }
            }

            //
            // If we are scanning from the flatbed, apply the preview window settings
            //
            if (bUsePreviewSettings)
            {
                //
                // Tell the scanner to scan from the flatbed and and clear the page count
                //
                PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, FLATBED );
                PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_PAGES, 0 );

                //
                // Get the origin and extent from the preview control
                //
                if (ApplyCurrentPreviewWindowSettings())
                {
                    //
                    // Everything seemed to work.  This item is ready for transfer.
                    //
                    bSucceeded = true;
                }
            }
            else
            {
                //
                // Clear the preview bitmap.  It won't be doing us any good anyway.
                //
                pWiaItem->BitmapImage(NULL);
            }
        }
    }

    if (!bSucceeded)
    {
        //
        // If that icky code above failed, tell the user and let them try again
        //
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_ERROR_SETTING_PROPS, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONINFORMATION );
        return -1;
    }

    return 0;
}


//
// PSN_WIZBACK
//
LRESULT CScannerSelectionPage::OnWizBack( WPARAM, LPARAM )
{
    return 0;
}

//
// PSN_SETACTIVE
//
LRESULT CScannerSelectionPage::OnSetActive( WPARAM, LPARAM )
{
    //
    // Make sure we have a valid controller window
    //
    if (!m_pControllerWindow)
    {
        return -1;
    }

    int nWizButtons = PSWIZB_NEXT;

    //
    // Only enable "back" if the first page is available
    //
    if (!m_pControllerWindow->SuppressFirstPage())
    {
        nWizButtons |= PSWIZB_BACK;
    }

    //
    // Set the buttons
    //
    PropSheet_SetWizButtons( GetParent(m_hWnd), nWizButtons );

    //
    // We do want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = CAcquisitionManagerControllerWindow::OnDisconnectGotoLastpage|CAcquisitionManagerControllerWindow::OnDisconnectFailDownload|CAcquisitionManagerControllerWindow::OnDisconnectFailUpload|CAcquisitionManagerControllerWindow::OnDisconnectFailDelete;

    //
    // Make sure the preview related controls accurately reflect the current settings
    //
    UpdateControlState();

    return 0;
}

CWiaItem *CScannerSelectionPage::GetActiveScannerItem(void)
{
    // Return (for now) the first image in the list
    if (m_pControllerWindow->m_pCurrentScannerItem)
    {
        return m_pControllerWindow->m_pCurrentScannerItem;
    }
    return NULL;
}

bool CScannerSelectionPage::InPreviewMode(void)
{
    bool bResult = false;
    if (m_hwndSelectionToolbar)
    {
        bResult = (SendMessage(m_hwndSelectionToolbar,TB_GETSTATE,IDC_SCANSEL_SHOW_SELECTION,0) & TBSTATE_CHECKED);
    }
    return bResult;
}

void CScannerSelectionPage::OnRescan( WPARAM, LPARAM )
{
    if (!ApplyCurrentIntent())
    {
        //
        // Tell the user it failed, and to try again
        //
        CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_ERROR_SETTING_PROPS, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONINFORMATION );
        return;
    }
    CWiaItem *pWiaItem = GetActiveScannerItem();
    if (pWiaItem)
    {
        //
        // Turn off preview mode and disable all the controls
        //
        if (m_hwndPreview)
        {
            WiaPreviewControl_SetPreviewMode( m_hwndPreview, FALSE );
        }
        EnableControls(FALSE);

        //
        // Clear the cancel event
        //
        m_PreviewScanCancelEvent.Reset();

        //
        // If PerformPreviewScan fails, we won't get any messages, so return all controls to their normal state
        //
        if (!m_pControllerWindow->PerformPreviewScan( pWiaItem, m_PreviewScanCancelEvent.Event() ))
        {

            //
            // Restore the preview mode and re-enable the controls
            //
            if (m_hwndPreview && m_hwndSelectionToolbar)
            {
                WiaPreviewControl_SetPreviewMode( m_hwndPreview, InPreviewMode() );
            }
            EnableControls(TRUE);
        }
    }
}

bool CScannerSelectionPage::ApplyCurrentIntent(void)
{
    CWaitCursor wc;
    CWiaItem *pCurItem = GetActiveScannerItem();
    if (pCurItem)
    {
        for (int i=0;i<gs_nCountIntentRadioButtonIconPairs;i++)
        {
            if (SendDlgItemMessage( m_hWnd, gs_IntentRadioButtonIconPairs[i].nRadioId, BM_GETCHECK, 0, 0 )==BST_CHECKED)
            {
                LONG lIntent = static_cast<LONG>(GetWindowLongPtr( GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[i].nRadioId ), GWLP_USERDATA ) );
                if (lIntent) // This is a normal intent
                {
                    if (pCurItem->SavedPropertyStream().IsValid())
                    {
                        if (!SUCCEEDED(pCurItem->SavedPropertyStream().ApplyToWiaItem( pCurItem->WiaItem())))
                        {
                            return false;
                        }
                    }

                    if (PropStorageHelpers::SetProperty( pCurItem->WiaItem(), WIA_IPS_CUR_INTENT, lIntent ) &&
                        PropStorageHelpers::SetProperty( pCurItem->WiaItem(), WIA_IPS_CUR_INTENT, 0 ))
                    {
                        return true;
                    }
                }
                else if (pCurItem->CustomPropertyStream().IsValid()) // This is the "custom" intent
                {
                    return(SUCCEEDED(pCurItem->CustomPropertyStream().ApplyToWiaItem(pCurItem->WiaItem())));
                }
                break;
            }
        }
    }
    return false;
}

void CScannerSelectionPage::InitializeIntents(void)
{
    static const struct
    {
        int      nIconId;
        int      nStringId;
        LONG_PTR nIntent;
    }
    s_Intents[] =
    {
        { IDI_CPHOTO,  IDS_SCANSEL_COLORPHOTO, WIA_INTENT_IMAGE_TYPE_COLOR},
        { IDI_BWPHOTO, IDS_SCANSEL_BW,         WIA_INTENT_IMAGE_TYPE_GRAYSCALE},
        { IDI_TEXT,    IDS_SCANSEL_TEXT,       WIA_INTENT_IMAGE_TYPE_TEXT},
        { IDI_CUSTOM,  IDS_SCANSEL_CUSTOM,     0}
    };
    static const int s_nIntents = ARRAYSIZE(s_Intents);

    //
    // We are going to hide all of the controls we don't use
    //
    int nCurControlSet = 0;

    CWiaItem *pCurItem = GetActiveScannerItem();
    if (pCurItem)
    {
        LONG nIntents;
        if (PropStorageHelpers::GetPropertyFlags( pCurItem->WiaItem(), WIA_IPS_CUR_INTENT, nIntents ))
        {
            for (int i=0;i<s_nIntents;i++)
            {
                //
                // Make sure it is the special custom intent, OR it is a supported intent
                //
                if (!s_Intents[i].nIntent || (nIntents & s_Intents[i].nIntent))
                {
                    HICON hIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(s_Intents[i].nIconId), IMAGE_ICON, 32, 32, LR_DEFAULTCOLOR ));
                    SendDlgItemMessage( m_hWnd, gs_IntentRadioButtonIconPairs[nCurControlSet].nIconId, STM_SETICON, reinterpret_cast<WPARAM>(hIcon), 0 );
                    CSimpleString( s_Intents[i].nStringId, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[nCurControlSet].nRadioId ) );
                    //
                    // Only add the intent if there is one.  If we don't add it, it will be 0, signifying that we should use the custom settings
                    //
                    if (s_Intents[i].nIntent)
                    {
                        //
                        // Add in the WIA_INTENT_MINIMIZE_SIZE flag, to ensure the size is not too large
                        //
                        SetWindowLongPtr( GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[nCurControlSet].nRadioId ), GWLP_USERDATA, (s_Intents[i].nIntent|WIA_INTENT_MINIMIZE_SIZE));
                    }
                    nCurControlSet++;
                }
            }
        }
        //
        // Set the default intent to be the first in the list
        //
        SetIntentCheck(static_cast<LONG>(GetWindowLongPtr(GetDlgItem(m_hWnd, gs_IntentRadioButtonIconPairs[0].nRadioId ), GWLP_USERDATA )));

        //
        // Get the saved property stream
        //
        pCurItem->SavedPropertyStream().AssignFromWiaItem(pCurItem->WiaItem());

        //
        // Try to get our persisted settings and set them.  If an error occurs, we will get new custom settings.
        //
        if (!pCurItem->CustomPropertyStream().ReadFromRegistry( pCurItem->WiaItem(), HKEY_CURRENT_USER, REGSTR_PATH_USER_SETTINGS_WIAACMGR, REGSTR_KEYNAME_USER_SETTINGS_WIAACMGR ) ||
            FAILED(pCurItem->CustomPropertyStream().ApplyToWiaItem(pCurItem->WiaItem())))
        {
            //
            // Apply the current intent before getting the new custom intent
            //
            ApplyCurrentIntent();

            //
            // Get the default custom property stream
            //
            pCurItem->CustomPropertyStream().AssignFromWiaItem(pCurItem->WiaItem());
        }
    }

    //
    // Hide the controls we didn't use
    //
    for (int i=nCurControlSet;i<gs_nCountIntentRadioButtonIconPairs;i++)
    {
        ShowWindow( GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[i].nRadioId ), SW_HIDE );
        ShowWindow( GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[i].nIconId ), SW_HIDE );
    }
}

static void MyEnableWindow( HWND hWndControl, BOOL bEnable )
{
    if (hWndControl)
    {
        BOOL bEnabled = (IsWindowEnabled( hWndControl ) != FALSE);
        if (bEnable != bEnabled)
        {
            EnableWindow( hWndControl, bEnable );
        }
    }
}

void CScannerSelectionPage::EnableControl( int nControl, BOOL bEnable )
{
    HWND hWndControl = GetDlgItem( m_hWnd, nControl );
    if (hWndControl)
    {
        BOOL bEnabled = (IsWindowEnabled( hWndControl ) != FALSE);
        if (bEnable != bEnabled)
        {
            EnableWindow( hWndControl, bEnable );
        }
    }
}

void CScannerSelectionPage::ShowControl( int nControl, BOOL bShow )
{
    HWND hWndControl = GetDlgItem( m_hWnd, nControl );
    if (hWndControl)
    {
        ShowWindow( hWndControl, bShow ? SW_SHOW : SW_HIDE );
        if (!bShow)
        {
            EnableControl( nControl, FALSE );
        }
    }
}

//
// Update the preview-related controls' states
//
void CScannerSelectionPage::UpdateControlState(void)
{
    WIA_PUSH_FUNCTION((TEXT("CScannerSelectionPage::UpdateControlState") ));
    //
    // Assume we will be showing the preview control
    //
    BOOL bShowPreview = TRUE;

    //
    // First of all, we know we don't allow preview on scroll-fed scanners
    //
    if (m_pControllerWindow->m_nScannerType == CAcquisitionManagerControllerWindow::ScannerTypeScrollFed)
    {
        bShowPreview = FALSE;
    }

    else
    {
        //
        // If we are in feeder mode, we won't show the preview UNLESS the driver explicitly tells us to do so.
        //
        LONG nCurrentPaperSource = 0;
        if (PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, static_cast<LONG>(nCurrentPaperSource)))
        {
            if (FEEDER & nCurrentPaperSource)
            {
                WIA_TRACE((TEXT("FEEDER == nCurrentPaperSource")));

                m_bAllowRegionPreview = false;

                //
                // Remove the tabstop setting from the preview control if we are in feeder mode
                //
                SetWindowLongPtr( m_hwndPreview, GWL_STYLE, GetWindowLongPtr( m_hwndPreview, GWL_STYLE ) & ~WS_TABSTOP );

                LONG nShowPreviewControl = WIA_DONT_SHOW_PREVIEW_CONTROL;
                if (PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_SHOW_PREVIEW_CONTROL, static_cast<LONG>(nShowPreviewControl)))
                {
                    WIA_TRACE((TEXT("WIA_DPS_SHOW_PREVIEW_CONTROL = %d"),nShowPreviewControl));
                    if (WIA_DONT_SHOW_PREVIEW_CONTROL == nShowPreviewControl)
                    {
                        bShowPreview = FALSE;
                    }
                }
                else
                {
                    WIA_TRACE((TEXT("WIA_DPS_SHOW_PREVIEW_CONTROL was not available")));
                    bShowPreview = FALSE;
                }
            }
            else
            {
                //
                // Enable preview in flatbed mode
                //
                m_bAllowRegionPreview = false;
                CWiaItem *pWiaItem = GetActiveScannerItem();
                if (pWiaItem && pWiaItem->BitmapImage())
                {
                    m_bAllowRegionPreview = true;
                }

                //
                // Add the tabstop setting to the preview control if we are in flatbed mode
                //
                SetWindowLongPtr( m_hwndPreview, GWL_STYLE, GetWindowLongPtr( m_hwndPreview, GWL_STYLE ) | WS_TABSTOP );
            }
        }
        else
        {
            WIA_TRACE((TEXT("WIA_DPS_DOCUMENT_HANDLING_SELECT is not available")));
        }
    }

    //
    // Update the preview related controls
    //

    WIA_TRACE((TEXT("bShowPreview = %d"), bShowPreview ));
    if (bShowPreview)
    {
        ShowControl( IDC_SCANSEL_PREVIEW, TRUE );
        ShowControl( IDC_SCANSEL_SELECTION_BUTTON_BAR, TRUE );
        ShowControl( IDC_SCANSEL_RESCAN, TRUE );
        EnableControl( IDC_SCANSEL_PREVIEW, TRUE );
        if (m_bAllowRegionPreview)
        {
            ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR ), IDC_SCANSEL_SHOW_SELECTION, true );
            ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR ), IDC_SCANSEL_SHOW_BED, true );
        }
        else
        {
            ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR ), IDC_SCANSEL_SHOW_SELECTION, false );
            ToolbarHelper::EnableToolbarButton( GetDlgItem( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR ), IDC_SCANSEL_SHOW_BED, false );
        }
        EnableControl( IDC_SCANSEL_RESCAN, TRUE );
        m_hwndPreview = GetDlgItem( m_hWnd, IDC_SCANSEL_PREVIEW );
        m_hwndSelectionToolbar = GetDlgItem( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR );
        m_hwndRescan = GetDlgItem( m_hWnd, IDC_SCANSEL_RESCAN );
        PropSheet_SetHeaderSubTitle( GetParent(m_hWnd), PropSheet_HwndToIndex( GetParent(m_hWnd), m_hWnd ), CSimpleString( IDS_SCANNER_SELECT_SUBTITLE, g_hInstance ).String() );
    }
    else
    {
        ShowControl( IDC_SCANSEL_PREVIEW, FALSE );
        ShowControl( IDC_SCANSEL_SELECTION_BUTTON_BAR, FALSE );
        ShowControl( IDC_SCANSEL_RESCAN, FALSE );
        m_hwndPreview = NULL;
        m_hwndSelectionToolbar = NULL;
        m_hwndRescan = NULL;
        PropSheet_SetHeaderSubTitle( GetParent(m_hWnd), PropSheet_HwndToIndex( GetParent(m_hWnd), m_hWnd ), CSimpleString( IDS_SCANNER_SELECT_SUBTITLE_NO_PREVIEW, g_hInstance ).String() );
    }
}

LRESULT CScannerSelectionPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    //
    // Dismiss the progress dialog if it is still up
    //
    if (m_pControllerWindow->m_pWiaProgressDialog)
    {
        m_pControllerWindow->m_pWiaProgressDialog->Destroy();
        m_pControllerWindow->m_pWiaProgressDialog = NULL;
    }

    if (m_pControllerWindow->m_pWiaItemRoot)
    {
        //
        // Get the flatbed aspect ratio
        //
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_HORIZONTAL_BED_SIZE, m_sizeFlatbed.cx );
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_VERTICAL_BED_SIZE, m_sizeFlatbed.cy );

        //
        // Get the sheet feeder aspect ratio
        //
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_HORIZONTAL_SHEET_FEED_SIZE, m_sizeDocfeed.cx );
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_VERTICAL_SHEET_FEED_SIZE, m_sizeDocfeed.cy );

    }

    UpdateControlState();

    if (m_hwndPreview)
    {
        //
        // Set a bitmap, so we can select stuff even if the user doesn't do a preview scan
        //
        m_hBitmapDefaultPreviewBitmap = reinterpret_cast<HBITMAP>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDB_DEFAULT_SCANNER_BITMAP), IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION|LR_DEFAULTCOLOR ));
        if (m_hBitmapDefaultPreviewBitmap)
        {
            WiaPreviewControl_SetBitmap( m_hwndPreview, TRUE, TRUE, m_hBitmapDefaultPreviewBitmap );
        }

        //
        // Initialize the selection rectangle
        //
        WiaPreviewControl_ClearSelection( m_hwndPreview );

        //
        // Ensure that the aspect ratio is correct
        //
        WiaPreviewControl_SetDefAspectRatio( m_hwndPreview, &m_sizeFlatbed );
    }

    ToolbarHelper::CButtonDescriptor SelectionButtonDescriptors[] =
    {
        { 0, IDC_SCANSEL_SHOW_SELECTION, 0, BTNS_BUTTON|BTNS_CHECK, false, NULL, 0 },
        { 1, IDC_SCANSEL_SHOW_BED,  TBSTATE_CHECKED, BTNS_BUTTON|BTNS_CHECK, false, NULL, 0 }
    };

    HWND hWndSelectionToolbar = ToolbarHelper::CreateToolbar(
        m_hWnd,
        GetDlgItem(m_hWnd,IDC_SCANSEL_RESCAN),
        GetDlgItem(m_hWnd,IDC_SCANSEL_BUTTON_BAR_GUIDE),
        ToolbarHelper::AlignRight|ToolbarHelper::AlignTop,
        IDC_SCANSEL_SELECTION_BUTTON_BAR,
        m_ScannerSelectionButtonBarBitmapInfo,
        SelectionButtonDescriptors,
        ARRAYSIZE(SelectionButtonDescriptors) );

    //
    // Nuke the guide window
    //
    DestroyWindow( GetDlgItem(m_hWnd,IDC_SCANSEL_BUTTON_BAR_GUIDE) );

    //
    // Make sure the toolbars are visible
    //
    ShowWindow( hWndSelectionToolbar, SW_SHOW );
    UpdateWindow( hWndSelectionToolbar );

    //
    // Get the page sizes
    //
    CComPtr<IWiaScannerPaperSizes> pWiaScannerPaperSizes;
    HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaScannerPaperSizes, (void**)&pWiaScannerPaperSizes );
    if (SUCCEEDED(hr))
    {
        hr = pWiaScannerPaperSizes->GetPaperSizes( &m_pPaperSizes, &m_nPaperSizeCount );
        if (FAILED(hr))
        {
            EndDialog( m_hWnd, hr );
        }
    }


    //
    // Initialize the intent controls, set the initial intent, etc.
    //
    InitializeIntents();

    PopulateDocumentHandling();

    PopulatePageSize();

    HandlePaperSourceSelChange();

    HandlePaperSizeSelChange();

    return 0;
}

void CScannerSelectionPage::PopulateDocumentHandling(void)
{
    HWND hWndDocumentHandling = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSOURCE );
    if (m_pControllerWindow->m_pWiaItemRoot &&
        m_pControllerWindow->m_nScannerType == CAcquisitionManagerControllerWindow::ScannerTypeFlatbedAdf &&
        hWndDocumentHandling)
    {
        LONG nDocumentHandlingSelectFlags = 0;
        PropStorageHelpers::GetPropertyFlags( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, nDocumentHandlingSelectFlags );

        LONG nDocumentHandlingSelect = 0;
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, nDocumentHandlingSelect );

        if (!nDocumentHandlingSelectFlags)
        {
            nDocumentHandlingSelectFlags = FLATBED;
        }
        if (!nDocumentHandlingSelect)
        {
            nDocumentHandlingSelect = FLATBED;
        }

        int nSelectIndex = 0;
        for (int i=0;i<g_SupportedDocumentHandlingTypesCount;i++)
        {
            if (nDocumentHandlingSelectFlags & g_SupportedDocumentHandlingTypes[i].nFlag)
            {
                CSimpleString strDocumentHandlingName( g_SupportedDocumentHandlingTypes[i].nStringId, g_hInstance );
                if (strDocumentHandlingName.Length())
                {
                    LRESULT nIndex = SendMessage( hWndDocumentHandling, CB_ADDSTRING, 0, reinterpret_cast<LPARAM>(strDocumentHandlingName.String()));
                    if (nIndex != CB_ERR)
                    {
                        SendMessage( hWndDocumentHandling, CB_SETITEMDATA, nIndex, g_SupportedDocumentHandlingTypes[i].nFlag );
                        if (nDocumentHandlingSelect == g_SupportedDocumentHandlingTypes[i].nFlag)
                        {
                            nSelectIndex = (int)nIndex;
                        }
                    }
                }
            }
        }

        WIA_TRACE((TEXT("Selecting index %d"), nSelectIndex ));
        SendMessage( hWndDocumentHandling, CB_SETCURSEL, nSelectIndex, 0 );

        //
        // Make sure all of the strings fit
        //
        WiaUiUtil::ModifyComboBoxDropWidth(hWndDocumentHandling);
    }
}

void CScannerSelectionPage::PopulatePageSize(void)
{
    HWND hWndPaperSize = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSIZE );
    if (m_pControllerWindow->m_pWiaItemRoot &&
        m_pControllerWindow->m_nScannerType == CAcquisitionManagerControllerWindow::ScannerTypeFlatbedAdf &&
        hWndPaperSize)
    {
        LONG nWidth=0, nHeight=0;
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_HORIZONTAL_SHEET_FEED_SIZE, nWidth );
        PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_VERTICAL_SHEET_FEED_SIZE, nHeight );

        //
        // Which index will initially be selected?
        //
        LRESULT nSelectIndex = 0;

        //
        // Save the largest sheet as our initially selected size
        //
        __int64 nMaximumArea = 0;
        for (UINT i=0;i<m_nPaperSizeCount;i++)
        {
            //
            // If this page will fit in the scanner...
            //
            if (m_pPaperSizes[i].nWidth <= static_cast<UINT>(nWidth) && m_pPaperSizes[i].nHeight <= static_cast<UINT>(nHeight))
            {
                //
                // Get the string name for this paper size
                //
                CSimpleString strPaperSizeName( CSimpleStringConvert::NaturalString(CSimpleStringWide(m_pPaperSizes[i].pszName)) );
                if (strPaperSizeName.Length())
                {
                    //
                    // Add the string to the combobox
                    //
                    LRESULT nIndex = SendMessage( hWndPaperSize, CB_ADDSTRING, 0, reinterpret_cast<LPARAM>(strPaperSizeName.String()));
                    if (nIndex != CB_ERR)
                    {
                        //
                        // Save the index into our global array
                        //
                        SendMessage( hWndPaperSize, CB_SETITEMDATA, nIndex, i );

                        //
                        // Check to see if this is the largest page, if it is, save the area and the index
                        //
                        if (((__int64)m_pPaperSizes[i].nWidth * m_pPaperSizes[i].nHeight) > nMaximumArea)
                        {
                            nMaximumArea = m_pPaperSizes[i].nWidth * m_pPaperSizes[i].nHeight;
                            nSelectIndex = nIndex;
                        }
                    }
                }
            }
        }
        //
        // Select the default size
        //
        SendMessage( hWndPaperSize, CB_SETCURSEL, nSelectIndex, 0 );

        //
        // Make sure all of the strings fit
        //
        WiaUiUtil::ModifyComboBoxDropWidth(hWndPaperSize);
    }
}

void CScannerSelectionPage::HandlePaperSourceSelChange(void)
{
    //
    // Make sure we have a valid root item
    //
    if (m_pControllerWindow->m_pWiaItemRoot)
    {
        //
        // Get the paper source combobox and make sure it exists
        //
        HWND hWndPaperSource = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSOURCE );
        if (hWndPaperSource)
        {
            //
            // Get the currently selected paper source
            //
            LRESULT nCurSel = SendMessage( hWndPaperSource, CB_GETCURSEL, 0, 0 );
            if (nCurSel != CB_ERR)
            {
                //
                // Get the paper source
                //
                LRESULT nPaperSource = SendMessage( hWndPaperSource, CB_GETITEMDATA, nCurSel, 0 );
                if (nPaperSource)
                {
                    //
                    // Set the paper source on the actual item
                    //
                    PropStorageHelpers::SetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, static_cast<LONG>(nPaperSource) );

                    if (nPaperSource & FLATBED)
                    {
                        //
                        // Make sure all of the preview-related controls are visible and enabled
                        //
                        UpdateControlState();

                        if (m_hwndPreview)
                        {
                            //
                            // Adjust the preview control settings for allowing region selection
                            //
                            WiaPreviewControl_SetDefAspectRatio( m_hwndPreview, &m_sizeFlatbed );
                            WiaPreviewControl_DisableSelection( m_hwndPreview, FALSE );
                            WiaPreviewControl_SetBorderStyle( m_hwndPreview, TRUE, PS_DOT, 0 );
                            WiaPreviewControl_SetHandleSize( m_hwndPreview, TRUE, 6 );
                        }

                        //
                        // Disable the paper size controls
                        //
                        EnableControl( IDC_SCANSEL_PAPERSIZE, FALSE );
                        EnableControl( IDC_SCANSEL_PAPERSIZE_STATIC, FALSE );
                    }
                    else
                    {
                        //
                        // Make sure all of the preview-related controls are NOT visible
                        //
                        UpdateControlState();

                        if (m_hwndPreview)
                        {
                            //
                            // Adjust the preview control settings for displaying paper selection
                            //
                            WiaPreviewControl_SetDefAspectRatio( m_hwndPreview, &m_sizeDocfeed );
                            WiaPreviewControl_DisableSelection( m_hwndPreview, TRUE );
                            WiaPreviewControl_SetBorderStyle( m_hwndPreview, TRUE, PS_SOLID, 0 );
                            WiaPreviewControl_SetHandleSize( m_hwndPreview, TRUE, 0 );
                        }

                        //
                        // Enable the paper size controls
                        //
                        EnableControl( IDC_SCANSEL_PAPERSIZE, TRUE );
                        EnableControl( IDC_SCANSEL_PAPERSIZE_STATIC, TRUE );

                        //
                        // Update the region selection feedback
                        //
                        HandlePaperSizeSelChange();
                    }

                    //
                    // Reset the preview selection setting
                    //
                    WiaPreviewControl_SetPreviewMode( m_hwndPreview, FALSE );
                    ToolbarHelper::CheckToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_SELECTION, false );
                    ToolbarHelper::CheckToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_BED, true );
                }
            }
        }
    }
}


void CScannerSelectionPage::HandlePaperSizeSelChange(void)
{
    if (m_pControllerWindow->m_pWiaItemRoot)
    {
        HWND hWndPaperSize = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSIZE );
        if (InDocFeedMode() && hWndPaperSize)
        {
            LRESULT nCurSel = SendMessage( hWndPaperSize, CB_GETCURSEL, 0, 0 );
            if (nCurSel != CB_ERR)
            {
                LRESULT nPaperSizeIndex = SendMessage( hWndPaperSize, CB_GETITEMDATA, nCurSel, 0 );
                POINT ptOrigin = { 0, 0 };
                SIZE sizeExtent = { m_pPaperSizes[nPaperSizeIndex].nWidth, m_pPaperSizes[nPaperSizeIndex].nHeight };

                if (!sizeExtent.cx)
                {
                    sizeExtent.cx = m_sizeDocfeed.cx;
                }
                if (!sizeExtent.cy)
                {
                    sizeExtent.cy = m_sizeDocfeed.cy;
                }

                LONG nSheetFeederRegistration;
                if (!PropStorageHelpers::GetProperty( m_pControllerWindow->m_pWiaItemRoot, WIA_DPS_SHEET_FEEDER_REGISTRATION, nSheetFeederRegistration ))
                {
                    nSheetFeederRegistration = LEFT_JUSTIFIED;
                }
                if (nSheetFeederRegistration == CENTERED)
                {
                    ptOrigin.x = (m_sizeDocfeed.cx - sizeExtent.cx) / 2;
                }
                else if (nSheetFeederRegistration == RIGHT_JUSTIFIED)
                {
                    ptOrigin.x = m_sizeDocfeed.cx - sizeExtent.cx;
                }
                if (m_hwndPreview)
                {
                    WiaPreviewControl_SetResolution( m_hwndPreview, &m_sizeDocfeed );
                    WiaPreviewControl_SetSelOrigin( m_hwndPreview, 0, FALSE, &ptOrigin );
                    WiaPreviewControl_SetSelExtent( m_hwndPreview, 0, FALSE, &sizeExtent );
                }
            }
        }
    }
}


void CScannerSelectionPage::OnPaperSourceSelChange( WPARAM, LPARAM )
{
    HandlePaperSourceSelChange();
}

void CScannerSelectionPage::OnPaperSizeSelChange( WPARAM, LPARAM )
{
    HandlePaperSizeSelChange();
}


bool CScannerSelectionPage::InDocFeedMode(void)
{
    HWND hWndPaperSource = GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSOURCE );
    if (hWndPaperSource)
    {
        LRESULT nCurSel = SendMessage( hWndPaperSource, CB_GETCURSEL, 0, 0 );
        if (nCurSel != CB_ERR)
        {
            LRESULT nPaperSource = SendMessage( hWndPaperSource, CB_GETITEMDATA, nCurSel, 0 );
            if (nPaperSource)
            {
                if (nPaperSource & FEEDER)
                {
                    return true;
                }
            }
        }
    }
    return false;
}

void CScannerSelectionPage::EnableControls( BOOL bEnable )
{
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_INTENT_1 ), bEnable );
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_INTENT_2 ), bEnable );
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_INTENT_3 ), bEnable );
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_INTENT_4 ), bEnable );
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_PROPERTIES ), bEnable );

    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSOURCE_STATIC ), bEnable );
    MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSOURCE ), bEnable );

    if (m_hwndPreview)
    {
        MyEnableWindow( m_hwndPreview, bEnable );
    }

    if (m_hwndRescan)
    {
        MyEnableWindow( m_hwndRescan, bEnable );
    }

    //
    // Only disable/enable this control if we are in document feeder mode
    //
    if (InDocFeedMode())
    {
        MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSIZE_STATIC ), bEnable );
        MyEnableWindow( GetDlgItem( m_hWnd, IDC_SCANSEL_PAPERSIZE ), bEnable );
    }

    //
    // Only disable/enable this control if there is an image in it.
    //
    if (m_bAllowRegionPreview && m_hwndSelectionToolbar)
    {
        MyEnableWindow( m_hwndSelectionToolbar, bEnable );
        ToolbarHelper::EnableToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_SELECTION, bEnable != FALSE );
        ToolbarHelper::EnableToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_BED, bEnable != FALSE );
    }

    if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
    {
        if (bEnable)
        {
            PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_NEXT|PSWIZB_BACK );
        }
        else
        {
            PropSheet_SetWizButtons( GetParent(m_hWnd), 0 );
        }
    }
}

void CScannerSelectionPage::OnNotifyScanPreview( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage )
{
    //
    // If we don't have a preview window, we can't do previews
    //
    if (m_hwndPreview)
    {
        CPreviewScanThreadNotifyMessage *pPreviewScanThreadNotifyMessage = dynamic_cast<CPreviewScanThreadNotifyMessage*>(pThreadNotificationMessage);
        if (pPreviewScanThreadNotifyMessage)
        {
            switch (pPreviewScanThreadNotifyMessage->Status())
            {
            case CPreviewScanThreadNotifyMessage::Begin:
                {
                    //
                    // Erase the old bitmap
                    //
                    WiaPreviewControl_SetBitmap( m_hwndPreview, TRUE, TRUE, m_hBitmapDefaultPreviewBitmap );

                    //
                    // Tell the user we are initializing the device
                    //
                    CSimpleString( IDS_SCANSEL_INITIALIZING_SCANNER, g_hInstance ).SetWindowText( m_hwndPreview );

                    //
                    // Start the warming up progress bar
                    //
                    WiaPreviewControl_SetProgress( m_hwndPreview, TRUE );

                    //
                    // Don't allow zooming the selected region in case there are any problems
                    //
                    m_bAllowRegionPreview = false;
                }
                break;
            case CPreviewScanThreadNotifyMessage::Update:
                {
                    //
                    // Update the bitmap
                    //
                    if (WiaPreviewControl_GetBitmap(m_hwndPreview) && WiaPreviewControl_GetBitmap(m_hwndPreview) != m_hBitmapDefaultPreviewBitmap)
                    {
                        WiaPreviewControl_RefreshBitmap( m_hwndPreview );
                    }
                    else
                    {
                        WiaPreviewControl_SetBitmap( m_hwndPreview, TRUE, TRUE, pPreviewScanThreadNotifyMessage->Bitmap() );
                    }

                    //
                    // Tell the user we are scanning
                    //
                    CSimpleString( IDS_SCANSEL_SCANNINGPREVIEW, g_hInstance ).SetWindowText( m_hwndPreview );

                    //
                    // Hide the progress control
                    //
                    WiaPreviewControl_SetProgress( m_hwndPreview, FALSE );
                }
                break;
            case CPreviewScanThreadNotifyMessage::End:
                {
                    WIA_PRINTHRESULT((pPreviewScanThreadNotifyMessage->hr(),TEXT("Handling CPreviewScanThreadNotifyMessage::End")));

                    //
                    // Set the bitmap in the preview control
                    //
                    WiaPreviewControl_SetBitmap( m_hwndPreview, TRUE, TRUE, pPreviewScanThreadNotifyMessage->Bitmap() ? pPreviewScanThreadNotifyMessage->Bitmap() : m_hBitmapDefaultPreviewBitmap );

                    UpdateWindow( m_hwndPreview );

                    //
                    // Store the bitmap for later
                    //
                    CWiaItem *pWiaItem = m_pControllerWindow->m_WiaItemList.Find( pPreviewScanThreadNotifyMessage->Cookie() );
                    if (pWiaItem)
                    {
                        //
                        // Set the bitmap, whether it is NULL or not.
                        //
                        pWiaItem->BitmapImage(pPreviewScanThreadNotifyMessage->Bitmap());
                    }

                    if (SUCCEEDED(pPreviewScanThreadNotifyMessage->hr()))
                    {
                        //
                        // Only do the region detection if the user hasn't changed it manually,
                        // and only if we are not in document feeder mode.
                        //
                        if (!WiaPreviewControl_GetUserChangedSelection( m_hwndPreview ) && !InDocFeedMode())
                        {
                            WiaPreviewControl_DetectRegions( m_hwndPreview );
                        }
                        //
                        // Allow the user to zoom the selected region if there is a bitmap
                        //
                        if (pPreviewScanThreadNotifyMessage->Bitmap())
                        {
                            m_bAllowRegionPreview = true;
                        }
                    }
                    else if (m_pControllerWindow->m_bDisconnected || WIA_ERROR_OFFLINE == pPreviewScanThreadNotifyMessage->hr())
                    {
                        //
                        // Do nothing.
                        //
                    }
                    else
                    {
                        //
                        // Tell the user something bad happened
                        //
                        CSimpleString strMessage;
                        switch (pPreviewScanThreadNotifyMessage->hr())
                        {
                        case WIA_ERROR_PAPER_EMPTY:
                            strMessage.LoadString( IDS_PREVIEWOUTOFPAPER, g_hInstance );
                            break;

                        default:
                            strMessage.LoadString( IDS_PREVIEWSCAN_ERROR, g_hInstance );
                            break;
                        }

                        CMessageBoxEx::MessageBox( m_hWnd, strMessage, CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONWARNING );
                        WIA_PRINTHRESULT((pPreviewScanThreadNotifyMessage->hr(),TEXT("The preview scan FAILED!")));
                    }

                    //
                    // Re-enable all of the controls
                    //
                    EnableControls(TRUE);

                    //
                    // Update the preview-related controls
                    //
                    UpdateControlState();

                    //
                    // remove the status text
                    //
                    SetWindowText( m_hwndPreview, TEXT("") );

                    //
                    // Restore the preview mode
                    //
                    WiaPreviewControl_SetPreviewMode( m_hwndPreview, InPreviewMode() );

                    //
                    // Hide the animation
                    //
                    WiaPreviewControl_SetProgress( m_hwndPreview, FALSE );
                }
                break;
            }
        }
    }
}

void CScannerSelectionPage::SetIntentCheck( LONG nIntent )
{
    for (int i=0;i<gs_nCountIntentRadioButtonIconPairs;i++)
    {
        HWND hWndBtn = GetDlgItem( m_hWnd, gs_IntentRadioButtonIconPairs[i].nRadioId );
        if (hWndBtn)
        {
            // If this intent is the same as the one we've been asked to set, check it
            if (static_cast<LONG>(GetWindowLongPtr(hWndBtn,GWLP_USERDATA)) == nIntent)
            {
                SendMessage( hWndBtn, BM_SETCHECK, BST_CHECKED, 0 );
            }
            else
            {
                // Uncheck all others
                SendMessage( hWndBtn, BM_SETCHECK, BST_UNCHECKED, 0 );
            }
        }
    }
}


void CScannerSelectionPage::OnProperties( WPARAM, LPARAM )
{
    CWaitCursor wc;
    CWiaItem *pCurItem = GetActiveScannerItem();
    if (pCurItem && pCurItem->WiaItem())
    {
        if (!ApplyCurrentIntent())
        {
            //
            // Tell the user it failed, and to try again
            //
            CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_ERROR_SETTING_PROPS, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONINFORMATION );
            return;
        }

        HRESULT hr = WiaUiUtil::SystemPropertySheet( g_hInstance, m_hWnd, pCurItem->WiaItem(), CSimpleString(IDS_ADVANCEDPROPERTIES, g_hInstance) );
        if (SUCCEEDED(hr))
        {
            if (S_OK == hr)
            {
                pCurItem->CustomPropertyStream().AssignFromWiaItem(pCurItem->WiaItem());
                if (pCurItem->CustomPropertyStream().IsValid())
                {
                    SetIntentCheck(0);
                }
                else WIA_ERROR((TEXT("Unknown error: m_CustomPropertyStream is not valid")));
            }
            else WIA_TRACE((TEXT("User cancelled")));
        }
        else
        {
            CMessageBoxEx::MessageBox( m_hWnd, CSimpleString( IDS_PROPERTY_SHEET_ERROR, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), CMessageBoxEx::MBEX_ICONINFORMATION );
            WIA_PRINTHRESULT((hr,TEXT("SystemPropertySheet failed")));
        }
    }
    else WIA_TRACE((TEXT("No current item")));
}

void CScannerSelectionPage::OnPreviewSelection( WPARAM wParam, LPARAM )
{
    if (m_hwndPreview && m_hwndSelectionToolbar)
    {

        bool bNewPreviewSetting = (LOWORD(wParam) == IDC_SCANSEL_SHOW_SELECTION);
        bool bOldPreviewSetting = WiaPreviewControl_GetPreviewMode( m_hwndPreview ) != FALSE;
        ToolbarHelper::CheckToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_SELECTION, LOWORD(wParam) == IDC_SCANSEL_SHOW_SELECTION );
        ToolbarHelper::CheckToolbarButton( m_hwndSelectionToolbar, IDC_SCANSEL_SHOW_BED, LOWORD(wParam) == IDC_SCANSEL_SHOW_BED );
        if (bNewPreviewSetting != bOldPreviewSetting)
        {
            WiaPreviewControl_SetPreviewMode( m_hwndPreview, LOWORD(wParam) == IDC_SCANSEL_SHOW_SELECTION );
        }
    }
}

LRESULT CScannerSelectionPage::OnReset( WPARAM, LPARAM )
{
    m_PreviewScanCancelEvent.Signal();
    return 0;
}

LRESULT CScannerSelectionPage::OnGetToolTipDispInfo( WPARAM wParam, LPARAM lParam )
{
    TOOLTIPTEXT *pToolTipText = reinterpret_cast<TOOLTIPTEXT*>(lParam);
    if (pToolTipText)
    {

        switch (pToolTipText->hdr.idFrom)
        {
        case IDC_SCANSEL_SHOW_SELECTION:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_SCANSEL_SHOW_SELECTION);
            break;
        case IDC_SCANSEL_SHOW_BED:
            pToolTipText->hinst = g_hInstance;
            pToolTipText->lpszText = MAKEINTRESOURCE(IDS_SCANSEL_SHOW_BED);
            break;
        }
    }
    return 0;
}

LRESULT CScannerSelectionPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND(IDC_SCANSEL_RESCAN,OnRescan);
        SC_HANDLE_COMMAND(IDC_SCANSEL_PROPERTIES,OnProperties);
        SC_HANDLE_COMMAND(IDC_SCANSEL_SHOW_SELECTION,OnPreviewSelection);
        SC_HANDLE_COMMAND(IDC_SCANSEL_SHOW_BED,OnPreviewSelection);
        SC_HANDLE_COMMAND_NOTIFY( CBN_SELCHANGE, IDC_SCANSEL_PAPERSOURCE, OnPaperSourceSelChange );
        SC_HANDLE_COMMAND_NOTIFY( CBN_SELCHANGE, IDC_SCANSEL_PAPERSIZE, OnPaperSizeSelChange );
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CScannerSelectionPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_RESET,OnReset);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(TTN_GETDISPINFO,OnGetToolTipDispInfo);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CScannerSelectionPage::OnThreadNotification( WPARAM wParam, LPARAM lParam )
{
    WTM_BEGIN_THREAD_NOTIFY_MESSAGE_HANDLERS()
    {
        WTM_HANDLE_NOTIFY_MESSAGE( TQ_SCANPREVIEW, OnNotifyScanPreview );
    }
    WTM_END_THREAD_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CScannerSelectionPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonFirstPage::OnEventNotification") ));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}

LRESULT CScannerSelectionPage::OnDestroy( WPARAM, LPARAM )
{
    //
    // Nuke all of the intent icons we loaded
    //
    for (int i=0;i<gs_nCountIntentRadioButtonIconPairs;i++)
    {
        HICON hIcon = reinterpret_cast<HICON>(SendDlgItemMessage( m_hWnd, gs_IntentRadioButtonIconPairs[i].nIconId, STM_SETICON, 0, 0 ));
        if (hIcon)
        {
            DestroyIcon(hIcon);
        }
    }
    return 0;
}

LRESULT CScannerSelectionPage::OnSysColorChange( WPARAM wParam, LPARAM lParam )
{
    m_ScannerSelectionButtonBarBitmapInfo.ReloadAndReplaceBitmap();
    SendDlgItemMessage( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR, WM_SYSCOLORCHANGE, wParam, lParam );
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_SCANSEL_PREVIEW ), TRUE, TRUE, GetSysColor(COLOR_WINDOW) );
    WiaPreviewControl_SetBkColor( GetDlgItem( m_hWnd, IDC_SCANSEL_PREVIEW ), TRUE, FALSE, GetSysColor(COLOR_WINDOW) );
    return 0;
}

LRESULT CScannerSelectionPage::OnThemeChanged( WPARAM wParam, LPARAM lParam )
{
    SendDlgItemMessage( m_hWnd, IDC_SCANSEL_SELECTION_BUTTON_BAR, WM_THEMECHANGED, wParam, lParam );
    return 0;
}

INT_PTR CALLBACK CScannerSelectionPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CScannerSelectionPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_SYSCOLORCHANGE, OnSysColorChange );
        SC_HANDLE_DIALOG_MESSAGE( WM_THEMECHANGED, OnThemeChanged );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nThreadNotificationMessage, OnThreadNotification );
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\scansel.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SCANSEL.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Scanner region selection (preview) page
 *
 *******************************************************************************/
#ifndef __SCANSEL_H_INCLUDED
#define __SCANSEL_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"
#include "createtb.h"
#include "pviewids.h"

class CScannerSelectionPage
{
private:
    // Private data
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    UINT                                 m_nThreadNotificationMessage;
    UINT                                 m_nWiaEventMessage;
    HBITMAP                              m_hBitmapDefaultPreviewBitmap;
    SIZE                                 m_sizeFlatbed;
    SIZE                                 m_sizeDocfeed;
    bool                                 m_bAllowRegionPreview;
    HWND                                 m_hwndPreview;
    HWND                                 m_hwndSelectionToolbar;
    HWND                                 m_hwndRescan;
    CWiaPaperSize                       *m_pPaperSizes;
    UINT                                 m_nPaperSizeCount;
    ToolbarHelper::CToolbarBitmapInfo    m_ScannerSelectionButtonBarBitmapInfo;
    CSimpleEvent                         m_PreviewScanCancelEvent;

private:
    // No implementation
    CScannerSelectionPage(void);
    CScannerSelectionPage( const CScannerSelectionPage & );
    CScannerSelectionPage &operator=( const CScannerSelectionPage & );

private:
    // Constructor and destructor
    explicit CScannerSelectionPage( HWND hWnd );
    ~CScannerSelectionPage(void);

private:
    // Helpers
    CWiaItem *GetActiveScannerItem(void);
    void InitializeIntents(void);
    void EnableControls( BOOL bEnable );
    bool ApplyCurrentPreviewWindowSettings(void);
    bool ApplyCurrentIntent(void);
    void SetIntentCheck( LONG nIntent );
    void PopulateDocumentHandling(void);
    void PopulatePageSize(void);
    void HandlePaperSourceSelChange(void);
    void HandlePaperSizeSelChange(void);
    bool InDocFeedMode(void);
    void EnableControl( int nControl, BOOL bEnable );
    void ShowControl( int nControl, BOOL bShow );
    void UpdateControlState(void);
    bool InPreviewMode(void);

private:
    // Thread messages
    void OnNotifyScanPreview( UINT nMsg, CThreadNotificationMessage *pThreadNotificationMessage );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    
    // WM_COMMAND handlers
    void OnRescan( WPARAM, LPARAM );
    void OnProperties( WPARAM, LPARAM );
    void OnPreviewSelection( WPARAM, LPARAM );
    void OnPaperSourceSelChange( WPARAM, LPARAM );
    void OnPaperSizeSelChange( WPARAM, LPARAM );

    // WM_NOTIFY handlers
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnGetToolTipDispInfo( WPARAM, LPARAM );
    LRESULT OnReset( WPARAM, LPARAM );

    // Message handlers
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnThreadNotification( WPARAM, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );
    LRESULT OnThemeChanged( WPARAM, LPARAM );

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif __SCANSEL_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\stievent.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       STIEVENT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        12/6/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
// mintrans.h : Declaration of the minimal transfer component

#ifndef __STIEVENT_H_INCLUDED
#define __STIEVENT_H_INCLUDED

#include <windows.h>
#include "evntparm.h"

extern HRESULT StiEventHandler( CStiEventData &StiEventData );

#endif //__STIEVENT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\sources.inc ===
#
# include the WIA global build settings
#

USE_SHFUSION=1

!include $(PROJECT_ROOT)\ui\uienv.inc
SOURCES_USED = $(SOURCES_USED) $(PROJECT_ROOT)\ui\uienv.inc

#
# Our specific build settings
#
TARGETNAME=wiaacmgr
TARGETTYPE=PROGRAM
TARGETPATH=obj

USE_MSVCRT      = 1
NO_BROWSER_FILE = 1
USE_RTTI        = 1

ATL_VER         = 30
USE_STATIC_ATL  = 1

!IF $(ALPHA)
USE_NTDLL=1
!ELSE
USE_NOLIBS=1
!ENDIF

#
# if you set DBG_GENERATE_PRETEND_EVENT=1 in your environment, you can get a version of
# the download manager that runs without ATL at all.  Also, it doesn't CoCreateInstance
# IID_IWiaEventCallback which makes it easier to run under boundschecker or another
# debugger.
#
!IF "$(DBG_GENERATE_PRETEND_EVENT)"=="1"
C_DEFINES=$(C_DEFINES) -DDBG_GENERATE_PRETEND_EVENT
!ENDIF


!IF "$(WINHEC_DEMO)"=="1"
C_DEFINES=$(C_DEFINES) -DWINHEC_DEMO
!ENDIF

PASS0_HEADERDIR=$(O)
PASS0_SOURCEDIR=$(O)
MIDL_UUIDDIR=$(O)
MIDL_TLBDIR=$(O)

INCLUDES=\
        $(INCLUDES);                \
        $(PROJECT_ROOT)\ui\prevwnd; \
        $(O)

SOURCES=\
        ..\acqmgr.cpp      \
        ..\acqmgrcw.cpp    \
        ..\atl.cpp         \
        ..\camsel.cpp      \
        ..\comdelp.cpp     \
        ..\comfin.cpp      \
        ..\comprog.cpp     \
        ..\comfirst.cpp    \
        ..\comtrans.cpp    \
        ..\flnfile.cpp     \
        ..\scansel.cpp     \
        ..\thrdmsg.cpp     \
        ..\thrdntfy.cpp    \
        ..\wiaacmgr.cpp    \
        ..\mintrans.cpp    \
        ..\eventprompt.cpp \
        ..\stievent.cpp    \
        ..\upquery.cpp     \
        ..\wiaacmgr.idl    \
        ..\wiaacmgr.rc

TARGETLIBS=$(TARGETLIBS)\
        $(SHELL_LIB_PATH)\shfusion.lib                           \
        $(SHELL_LIB_PATH)\shguidp.lib                            \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\wiashext.lib \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\prevwnd.lib

PRECOMPILED_CXX=1
PRECOMPILED_INCLUDE=..\precomp.h
PRECOMPILED_PCH=precomp.pch
PRECOMPILED_OBJ=precomp.obj

#
#
# Fusion manifest
#
SXS_MANIFEST_RESOURCE_ID=123
SXS_APPLICATION_MANIFEST=wiaacmgr.Manifest
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\stievent.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998-2001
 *
 *  TITLE:       STIEVENT.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4-6-2001
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <wiaregst.h>
#include "simcrack.h"
#include "resource.h"
#include "stievent.h"
#include "evntparm.h"
#include "shmemsec.h"

//
// This dialog displays the sti application list and lets the user choose one.
//
class CStiEventHandlerDialog
{
public:
    struct CData
    { 
        //
        // This will contain the event information, including the application list,
        // which is really what we are interested in.
        //
        CStiEventData                   *pStiEventData;

        //
        // The OUT member is intended to contain the selected handler, which will
        // be copied from the list contained in the CStiEventData class
        //
        CStiEventData::CStiEventHandler  EventHandler;

        //
        // We will set the window handle in this shared memory section,
        // so we can activate ourselves.
        //
        CSharedMemorySection<HWND> *pStiEventHandlerSharedMemory;
    };

private:
    //
    // Not implemented
    //
    CStiEventHandlerDialog();
    CStiEventHandlerDialog( const CStiEventHandlerDialog & );
    CStiEventHandlerDialog &operator=( const CStiEventHandlerDialog & );

private:
    HWND   m_hWnd;
    CData *m_pData;

private:
    //
    // Sole constructor
    //
    explicit CStiEventHandlerDialog( HWND hWnd )
      : m_hWnd(hWnd),
        m_pData(NULL)
    {
    }

    //
    // Destructor
    //
    ~CStiEventHandlerDialog()
    {
        m_hWnd = NULL;
        m_pData = NULL;
    }

    //
    // WM_INITDIALOG handler.
    //
    LRESULT OnInitDialog( WPARAM, LPARAM lParam )
    {
        //
        // Get the dialog's data
        //
        m_pData = reinterpret_cast<CData*>(lParam);

        //
        // Make sure we have valid data
        //
        if (!m_pData || !m_pData->pStiEventData)
        {
            EndDialog( m_hWnd, -1 );
            SetLastError( ERROR_INVALID_PARAMETER );
            return 0;
        }

        //
        // Make sure we were supplied with a memory section
        //
        if (m_pData->pStiEventHandlerSharedMemory)
        {
            //
            // Get a pointer to the shared memory
            //
            HWND *phWnd = m_pData->pStiEventHandlerSharedMemory->Lock();
            if (phWnd)
            {
                //
                // Store our window handle
                //
                *phWnd = m_hWnd;

                //
                // Release the mutex
                //
                m_pData->pStiEventHandlerSharedMemory->Release();
            }
        }

        //
        // Add the handlers to the list
        //
        for (int i=0;i<m_pData->pStiEventData->EventHandlers().Size();++i)
        {
            //
            // Get the program name and make sure it is valid
            //
            CSimpleString strAppName = CSimpleStringConvert::NaturalString(m_pData->pStiEventData->EventHandlers()[i].ApplicationName());
            if (strAppName.Length())
            {
                //
                // Add the string and save the item id
                //
                LRESULT nIndex = SendDlgItemMessage( m_hWnd, IDC_STI_APPS_LIST, LB_ADDSTRING, 0, reinterpret_cast<LPARAM>(strAppName.String()) );
                if (LB_ERR != nIndex)
                {
                    //
                    // Set the item data to the index in our handler array 
                    //
                    SendDlgItemMessage( m_hWnd, IDC_STI_APPS_LIST, LB_SETITEMDATA, nIndex, i );
                }
            }
        }

        //
        // Select the first item
        //
        SendDlgItemMessage( m_hWnd, IDC_STI_APPS_LIST, LB_SETCURSEL, 0, 0 );

        //
        // Enable the OK button if we have a valid selected item
        //
        EnableWindow( GetDlgItem( m_hWnd, IDOK ), GetHandlerIndexOfCurrentSelection() != -1 );

        return 0;
    }

    void OnCancel( WPARAM, LPARAM )
    {
        //
        // Just close the dialog on cancel
        //
        EndDialog( m_hWnd, IDCANCEL );
    }

    int GetHandlerIndexOfCurrentSelection()
    {
        //
        // Assume failure
        //
        int nResult = -1;

        //
        // Make sure we have valid pointers still
        //
        if (m_pData && m_pData->pStiEventData)
        {
            //
            // Get the current selection index and make sure it is valid
            //
            LRESULT nCurIndex = SendDlgItemMessage( m_hWnd, IDC_STI_APPS_LIST, LB_GETCURSEL, 0, 0 );
            if (LB_ERR != nCurIndex)
            {
                //
                // Get the index into our event handler array from the item data for the current item
                //
                LRESULT nEventItemIndex = SendDlgItemMessage( m_hWnd, IDC_STI_APPS_LIST, LB_GETITEMDATA, nCurIndex, 0 );

                //
                // Make sure the index is valid
                //
                if (nEventItemIndex >= 0 && nEventItemIndex < m_pData->pStiEventData->EventHandlers().Size())
                {
                    nResult = static_cast<int>(nEventItemIndex);
                }
            }
        }

        return nResult;
    }

    void OnOK( WPARAM, LPARAM )
    {
        //
        // Make sure we have valid parameters
        //
        int nEventItemIndex = GetHandlerIndexOfCurrentSelection();
        if (-1 != nEventItemIndex)
        {
            //
            // Copy the event handler to our OUT parameter
            //
            m_pData->EventHandler = m_pData->pStiEventData->EventHandlers()[nEventItemIndex];

            //
            // Close the dialog
            //
            EndDialog( m_hWnd, IDOK );
        }
    }

    void OnAppsListDblClk( WPARAM, LPARAM )
    {
        //
        // Simulate the user pressing the OK button
        //
        SendMessage( m_hWnd, WM_COMMAND, MAKEWPARAM(IDOK,0), 0 );
    }

    void OnAppsListSelChange( WPARAM, LPARAM )
    {
        //
        // Enable the OK button if we have a valid selected item
        //
        EnableWindow( GetDlgItem( m_hWnd, IDOK ), GetHandlerIndexOfCurrentSelection() != -1 );
    }

    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_COMMAND_HANDLERS()
        {
            SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
            SC_HANDLE_COMMAND(IDOK,OnOK);
            SC_HANDLE_COMMAND_NOTIFY(LBN_DBLCLK,IDC_STI_APPS_LIST,OnAppsListDblClk);
            SC_HANDLE_COMMAND_NOTIFY(LBN_SELCHANGE,IDC_STI_APPS_LIST,OnAppsListSelChange);
        }
        SC_END_COMMAND_HANDLERS();
    }

public:
    static INT_PTR __stdcall DlgProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CStiEventHandlerDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};


HRESULT StiEventHandler( CStiEventData &StiEventData )
{
    HRESULT hr = S_OK;

#if defined(DBG)
    //
    // Dump the parameters
    //
    WIA_PUSH_FUNCTION((TEXT("StiEventHandler")));
    WIA_PRINTGUID((StiEventData.Event(),TEXT("  Event")));
    WIA_TRACE((TEXT("  EventDescription: %ws"), StiEventData.EventDescription().String()));
    WIA_TRACE((TEXT("  DeviceDescription: %ws"), StiEventData.DeviceDescription().String()));
    WIA_TRACE((TEXT("  DeviceId: %ws"), StiEventData.DeviceId().String()));
    WIA_TRACE((TEXT("  EventType: %08X"), StiEventData.EventType()));
    WIA_TRACE((TEXT("  Reserved: %08X"), StiEventData.Reserved()));
    for (int i=0;i<StiEventData.EventHandlers().Size();++i)
    {
        WIA_TRACE((TEXT("  Handler %d: [%ws] CommandLine: [%ws]"), i, StiEventData.EventHandlers()[i].ApplicationName().String(), StiEventData.EventHandlers()[i].CommandLine().String()));
    }
#endif // defined(DBG)

    //
    // Make sure we have some handlers
    //
    if (0 == StiEventData.EventHandlers().Size())
    {
        return E_INVALIDARG;
    }
    
    
    //
    // Create the mutex name
    //
    CSimpleStringWide strMutexName = StiEventData.DeviceId();

    //
    // Append the event ID
    //
    LPOLESTR pwszEventGuid = NULL;
    if (SUCCEEDED(StringFromIID( StiEventData.Event(), &pwszEventGuid )) && pwszEventGuid)
    {
        strMutexName += CSimpleStringWide(pwszEventGuid);
        CoTaskMemFree( pwszEventGuid );
    }

    WIA_TRACE((TEXT("strMutexName: %ws"), strMutexName.String() ));
    
    //
    // Create the shared memory section for excluding multiple instances
    //
    CSharedMemorySection<HWND> StiEventHandlerSharedMemory;
    
    //
    // If we were able to open the memory section
    //
    if (CSharedMemorySection<HWND>::SmsOpened == StiEventHandlerSharedMemory.Open( CSimpleStringConvert::NaturalString(CSimpleStringWide(strMutexName)), true ))
    {
        HWND *phWnd = StiEventHandlerSharedMemory.Lock();
        if (phWnd)
        {
            //
            // Make sure we have a valid window handle
            //
            if (*phWnd && IsWindow(*phWnd))
            {
                //
                // If it is a valid window, bring it to the foreground.
                //
                SetForegroundWindow(*phWnd);
            }
            
            //
            // Release the mutex
            //
            StiEventHandlerSharedMemory.Release();
        }
    }

    else
    {
        //
        // We will execute this handler below, after we decide which one to use
        //
        CStiEventData::CStiEventHandler EventHandler;

        //
        // If there is only one handler, save that handler
        //
        if (1 == StiEventData.EventHandlers().Size())
        {
            EventHandler = StiEventData.EventHandlers()[0];
        }

        //
        // Otherwise, if there is more than one handler, display the handler prompt dialog
        //
        else
        {
            //
            // Prepare the dialog data
            //
            CStiEventHandlerDialog::CData DialogData;
            DialogData.pStiEventData = &StiEventData;
            DialogData.pStiEventHandlerSharedMemory = &StiEventHandlerSharedMemory;

            //
            // Display the dialog
            //
            INT_PTR nDialogResult = DialogBoxParam( g_hInstance, MAKEINTRESOURCE(IDD_CHOOSE_STI_APPLICATION), NULL, CStiEventHandlerDialog::DlgProc, reinterpret_cast<LPARAM>(&DialogData) );

            //
            // If the user selected a program and hit OK, save the handler
            //
            if (IDOK == nDialogResult)
            {
                EventHandler = DialogData.EventHandler;
            }

            //
            // If the user cancelled, just return S_FALSE immediately (premature return)
            //
            else if (IDCANCEL == nDialogResult)
            {
                return S_FALSE;
            }

            //
            // If there was an internal error, save the correct error
            //
            else if (-1 == nDialogResult)
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
            }

            //
            // For all other return values, save a generic error
            //
            else
            {
                hr = E_FAIL;
            }
        }

        if (SUCCEEDED(hr))
        {
            //
            // Make sure we have a valid handler
            //
            if (EventHandler.IsValid())
            {
                //
                // Prepare the process information
                //
                STARTUPINFO StartupInfo = {0};
                StartupInfo.cb = sizeof(StartupInfo);

                //
                // Convert the command line to a TCHAR string
                //
                CSimpleString CommandLine = CSimpleStringConvert::NaturalString(EventHandler.CommandLine());

                //
                // Make sure we actually have a command line
                //
                if (CommandLine.Length())
                {
                    //
                    // Execute the program
                    //
                    PROCESS_INFORMATION ProcessInformation = {0};
                    if (CreateProcess( NULL, const_cast<LPTSTR>(CommandLine.String()), NULL, NULL, FALSE, 0, NULL, NULL, &StartupInfo, &ProcessInformation ))
                    {
                        //
                        // If the program succeeded, close the handles to prevent leaks
                        //
                        CloseHandle( ProcessInformation.hProcess );
                        CloseHandle( ProcessInformation.hThread );
                    }
                    else
                    {
                        //
                        // Save the error from CreateProcess
                        //
                        hr = HRESULT_FROM_WIN32(GetLastError());
                    }
                }
                else
                {
                    //
                    // Assume out of memory error if we couldn't create the string
                    //
                    hr = E_OUTOFMEMORY;
                }
            }
            else
            {
                //
                // Who knows what went wrong?
                //
                hr = E_FAIL;
            }
        }

        //
        // If we've failed, display an error message
        //
        if (FAILED(hr))
        {
            //
            // We will display this string, after we've constructed it
            //
            CSimpleString strMessage;

            //
            // Get the error text
            //
            CSimpleString strError = WiaUiUtil::GetErrorTextFromHResult(hr);

            //
            // Get the application name
            //
            CSimpleString strApplication = CSimpleStringConvert::NaturalString(EventHandler.ApplicationName());

            //
            // If we don't have an application name, use some default
            //
            if (!strApplication.Length())
            {
                strApplication.LoadString( IDS_STI_EVENT_ERROR_APP_NAME, g_hInstance );
            }

            //
            // If we have a specific error message, use it.
            //
            if (strError.Length())
            {
                strMessage.Format( IDS_STI_EVENT_ERROR_WITH_EXPLANATION, g_hInstance, strApplication.String(), strError.String() );
            }

            //
            // Otherwise, use a generic error message.
            //
            else
            {
                strMessage.Format( IDS_STI_EVENT_ERROR_NO_EXPLANATION, g_hInstance, strApplication.String() );
            }

            //
            // Display the error message.
            //
            MessageBox( NULL, strMessage, CSimpleString( IDS_STI_EVENT_ERROR_TITLE, g_hInstance ), MB_ICONHAND );
        }
    }
    
    //
    // We're done here
    //
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\thrdmsg.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       THRDMSG.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: These classes are instantiated for each message posted to the
 *               background thread.  Each is derived from CThreadMessage, and
 *               is sent to the thread message handler.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "itranhlp.h"
#include "isuppfmt.h"
#include "wiadevdp.h"
#include "acqmgrcw.h"
#include "propstrm.h"
#include "uiexthlp.h"
#include "flnfile.h"
#include "resource.h"
#include "itranspl.h"
#include "svselfil.h"
#include "uniqfile.h"
#include "mboxex.h"
#include "wiaffmt.h"

#define FILE_CREATION_MUTEX_NAME TEXT("Global\\WiaScannerAndCameraWizardFileNameCreationMutex")

#define UPLOAD_PROGRESS_GRANULARITY 10

#ifndef S_CONTINUE
#define S_CONTINUE ((HRESULT)0x00000002L)
#endif

//
// The delete progress page goes by too quickly, so we will slow it down here
//
#define DELETE_DELAY_BEFORE 1000
#define DELETE_DELAY_DURING 3000
#define DELETE_DELAY_AFTER  1000

//
// Some APIs claim to set the thread's last error, but don't
// For those which don't, we will return E_FAIL.  This function
// will not return S_OK
//
inline HRESULT MY_HRESULT_FROM_WIN32( DWORD gle )
{
    if (!gle)
    {
        return E_FAIL;
    }
    return HRESULT_FROM_WIN32(gle);
}

// -------------------------------------------------
// CGlobalInterfaceTableThreadMessage
// -------------------------------------------------
CGlobalInterfaceTableThreadMessage::CGlobalInterfaceTableThreadMessage( int nMessage, HWND hWndNotify, DWORD dwGlobalInterfaceTableCookie )
: CNotifyThreadMessage( nMessage, hWndNotify ),
m_dwGlobalInterfaceTableCookie(dwGlobalInterfaceTableCookie)
{
}

DWORD CGlobalInterfaceTableThreadMessage::GlobalInterfaceTableCookie(void) const
{
    return(m_dwGlobalInterfaceTableCookie);
}


// -------------------------------------------------
// CDownloadThumbnailThreadMessage
// -------------------------------------------------
CDownloadThumbnailsThreadMessage::CDownloadThumbnailsThreadMessage( HWND hWndNotify, const CSimpleDynamicArray<DWORD> &Cookies, HANDLE hCancelEvent )
: CNotifyThreadMessage( TQ_DOWNLOADTHUMBNAIL, hWndNotify ),
m_Cookies(Cookies),
m_hCancelEvent(NULL)
{
    DuplicateHandle( GetCurrentProcess(), hCancelEvent, GetCurrentProcess(), &m_hCancelEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
}

CDownloadThumbnailsThreadMessage::~CDownloadThumbnailsThreadMessage(void)
{
    if (m_hCancelEvent)
    {
        CloseHandle(m_hCancelEvent);
        m_hCancelEvent = NULL;
    }
}

// Helper function that gets the thumbnail data and creates a DIB from it
static HRESULT DownloadAndCreateThumbnail( IWiaItem *pWiaItem, PBYTE *ppBitmapData, LONG &nWidth, LONG &nHeight, LONG &nBitmapDataLength, GUID &guidPreferredFormat, LONG &nAccessRights, LONG &nImageWidth, LONG &nImageHeight, CAnnotationType &AnnotationType, CSimpleString &strDefExt )
{
#if 0 // defined(DBG)
    Sleep(3000);
#endif
    WIA_PUSH_FUNCTION((TEXT("DownloadAndCreateThumbnail")));
    CComPtr<IWiaPropertyStorage> pIWiaPropertyStorage;
    HRESULT hr = pWiaItem->QueryInterface(IID_IWiaPropertyStorage, (void**)&pIWiaPropertyStorage);
    if (SUCCEEDED(hr))
    {
        AnnotationType = AnnotationNone;
        CComPtr<IWiaAnnotationHelpers> pWiaAnnotationHelpers;
        if (SUCCEEDED(CoCreateInstance( CLSID_WiaDefaultUi, NULL,CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers,(void**)&pWiaAnnotationHelpers )))
        {
            pWiaAnnotationHelpers->GetAnnotationType( pWiaItem, AnnotationType );
        }

        const int c_NumProps = 7;
        PROPVARIANT PropVar[c_NumProps];
        PROPSPEC PropSpec[c_NumProps];

        PropSpec[0].ulKind = PRSPEC_PROPID;
        PropSpec[0].propid = WIA_IPC_THUMB_WIDTH;

        PropSpec[1].ulKind = PRSPEC_PROPID;
        PropSpec[1].propid = WIA_IPC_THUMB_HEIGHT;

        PropSpec[2].ulKind = PRSPEC_PROPID;
        PropSpec[2].propid = WIA_IPC_THUMBNAIL;

        PropSpec[3].ulKind = PRSPEC_PROPID;
        PropSpec[3].propid = WIA_IPA_PREFERRED_FORMAT;

        PropSpec[4].ulKind = PRSPEC_PROPID;
        PropSpec[4].propid = WIA_IPA_ACCESS_RIGHTS;

        PropSpec[5].ulKind = PRSPEC_PROPID;
        PropSpec[5].propid = WIA_IPA_PIXELS_PER_LINE;

        PropSpec[6].ulKind = PRSPEC_PROPID;
        PropSpec[6].propid = WIA_IPA_NUMBER_OF_LINES;

        hr = pIWiaPropertyStorage->ReadMultiple(ARRAYSIZE(PropSpec),PropSpec,PropVar );
        if (SUCCEEDED(hr))
        {
            //
            // Save the item type
            //
            if (VT_CLSID == PropVar[3].vt && PropVar[3].puuid)
            {
                guidPreferredFormat = *(PropVar[3].puuid);
            }
            else
            {
                guidPreferredFormat = IID_NULL;
            }

            //
            // Get the extension for the default format
            //
            strDefExt = CWiaFileFormat::GetExtension( guidPreferredFormat, TYMED_FILE, pWiaItem );

            //
            // Save the access rights
            //
            nAccessRights = PropVar[4].lVal;

            if ((PropVar[0].vt == VT_I4 || PropVar[0].vt == VT_UI4) &&
                (PropVar[1].vt == VT_I4 || PropVar[1].vt == VT_UI4) &&
                (PropVar[2].vt == (VT_UI1|VT_VECTOR)))
            {
                if (PropVar[2].caub.cElems >= PropVar[0].ulVal * PropVar[1].ulVal)
                {
                    //
                    // Allocate memory for the bitmap data.  It will be freed by the main thread.
                    //
                    *ppBitmapData = reinterpret_cast<PBYTE>(LocalAlloc( LPTR, PropVar[2].caub.cElems ));
                    if (*ppBitmapData)
                    {
                        WIA_TRACE((TEXT("We found a thumbnail!")));
                        CopyMemory( *ppBitmapData, PropVar[2].caub.pElems, PropVar[2].caub.cElems );
                        nWidth = PropVar[0].ulVal;
                        nHeight = PropVar[1].ulVal;
                        nImageWidth = PropVar[5].ulVal;
                        nImageHeight = PropVar[6].ulVal;
                        nBitmapDataLength = PropVar[2].caub.cElems;
                        WIA_TRACE((TEXT("nImageWidth = %d, nImageHeight = %d!"), nImageWidth, nImageHeight ));
                    }
                    else
                    {
                        hr = E_OUTOFMEMORY;
                        WIA_PRINTHRESULT((hr,TEXT("Unable to allocate bitmap data")));
                    }
                }
                else
                {
                    hr = E_FAIL;
                    WIA_PRINTHRESULT((hr,TEXT("Invalid bitmap data returned")));
                }
            }
            else
            {
                hr = E_FAIL;
                WIA_ERROR((TEXT("The bitmap data is in the wrong format! %d"),PropVar[2].vt));
            }
            //
            // Free any properties the array contains
            //
            FreePropVariantArray( ARRAYSIZE(PropVar), PropVar );
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("ReadMultiple failed")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("QueryInterface on IID_IWiaPropertyStorage failed")));
    }
    return hr;
}


HRESULT CDownloadThumbnailsThreadMessage::Download(void)
{
    WIA_PUSHFUNCTION((TEXT("CDownloadThumbnailsThreadMessage::Download")));
    //
    // Tell the main thread we are going to start downloading thumbnails
    //
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadThumbnailsThreadNotifyMessage::BeginDownloadAllMessage( m_Cookies.Size() ) );

    //
    // Get an instance of the GIT
    //
    CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
    HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
    if (SUCCEEDED(hr))
    {
        //
        // m_Cookies.Size() contains the number of thumbnails we need to get
        //
        for (int i=0;i<m_Cookies.Size() && hr == S_OK;i++)
        {
            //
            // Check to see if we're cancelled.  If we are, break out of the loop
            //
            if (m_hCancelEvent && WAIT_OBJECT_0==WaitForSingleObject(m_hCancelEvent,0))
            {
                hr = S_FALSE;
                break;
            }

            //
            // Get the item from the global interface table
            //
            CComPtr<IWiaItem> pWiaItem = NULL;
            hr = pGlobalInterfaceTable->GetInterfaceFromGlobal( m_Cookies[i], IID_IWiaItem, (void**)&pWiaItem );
            if (SUCCEEDED(hr))
            {
                //
                // Get the bitmap data and other properties we are reading now
                //
                PBYTE pBitmapData = NULL;
                GUID guidPreferredFormat;
                LONG nAccessRights = 0, nWidth = 0, nHeight = 0, nPictureWidth = 0, nPictureHeight = 0, nBitmapDataLength = 0;
                CAnnotationType AnnotationType = AnnotationNone;
                CSimpleString strDefExt;

                //
                // Notify the main thread that we are beginning to download the thumbnail and other props
                //
                CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadThumbnailsThreadNotifyMessage::BeginDownloadThumbnailMessage( i, m_Cookies[i] ) );

                //
                // Only send an End message if we were successful
                //
                if (SUCCEEDED(DownloadAndCreateThumbnail( pWiaItem, &pBitmapData, nWidth, nHeight, nBitmapDataLength, guidPreferredFormat, nAccessRights, nPictureWidth, nPictureHeight, AnnotationType, strDefExt )))
                {
                    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadThumbnailsThreadNotifyMessage::EndDownloadThumbnailMessage( i, m_Cookies[i], pBitmapData, nWidth, nHeight, nBitmapDataLength, guidPreferredFormat, nAccessRights, nPictureWidth, nPictureHeight, AnnotationType, strDefExt ) );
                }
            }
        }
    }

    //
    // Tell the main thread we are done
    //
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadThumbnailsThreadNotifyMessage::EndDownloadAllMessage( hr ) );
    return hr;
}


// -------------------------------------------------
// CDownloadImagesThreadMessage
// -------------------------------------------------
CDownloadImagesThreadMessage::CDownloadImagesThreadMessage(
                                                          HWND hWndNotify,
                                                          const CSimpleDynamicArray<DWORD> &Cookies,
                                                          const CSimpleDynamicArray<int> &Rotation,
                                                          LPCTSTR pszDirectory,
                                                          LPCTSTR pszFilename,
                                                          const GUID &guidFormat,
                                                          HANDLE hCancelDownloadEvent,
                                                          bool bStampTime,
                                                          HANDLE hPauseDownloadEvent
                                                          )
: CNotifyThreadMessage( TQ_DOWNLOADIMAGE, hWndNotify ),
m_Cookies(Cookies),
m_Rotation(Rotation),
m_strDirectory(pszDirectory),
m_strFilename(pszFilename),
m_guidFormat(guidFormat),
m_hCancelDownloadEvent(NULL),
m_bStampTime(bStampTime),
m_nLastStatusUpdatePercent(-1),
m_bFirstTransfer(true),
m_hPauseDownloadEvent(NULL),
m_hFilenameCreationMutex(NULL)
{
    DuplicateHandle( GetCurrentProcess(), hCancelDownloadEvent, GetCurrentProcess(), &m_hCancelDownloadEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
    DuplicateHandle( GetCurrentProcess(), hPauseDownloadEvent, GetCurrentProcess(), &m_hPauseDownloadEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
    m_hFilenameCreationMutex = CreateMutex( NULL, FALSE, FILE_CREATION_MUTEX_NAME );
}


CDownloadImagesThreadMessage::~CDownloadImagesThreadMessage(void)
{
    if (m_hCancelDownloadEvent)
    {
        CloseHandle(m_hCancelDownloadEvent);
        m_hCancelDownloadEvent = NULL;
    }
    if (m_hPauseDownloadEvent)
    {
        CloseHandle(m_hPauseDownloadEvent);
        m_hPauseDownloadEvent = NULL;
    }
    if (m_hFilenameCreationMutex)
    {
        CloseHandle(m_hFilenameCreationMutex);
        m_hFilenameCreationMutex = NULL;
    }
}

int CDownloadImagesThreadMessage::ReportError( HWND hWndNotify, const CSimpleString &strMessage, int nMessageBoxFlags )
{
    //
    // How long should we wait to find out if this is being handled?
    //
    const UINT c_nSecondsToWaitForHandler = 10;

    //
    // Cancel is the default, in case nobody handles the message, or we are out of resources
    //
    int nResult = CMessageBoxEx::IDMBEX_CANCEL;

    //
    // This event will be signalled by the handler when it is going to display some UI
    //
    HANDLE hHandledMessageEvent = CreateEvent( NULL, TRUE, FALSE, NULL );
    if (hHandledMessageEvent)
    {
        //
        // This event will be signalled when the user has responded
        //
        HANDLE hRespondedMessageEvent = CreateEvent( NULL, TRUE, FALSE, NULL );
        if (hRespondedMessageEvent)
        {
            //
            // Create a notification message class and make sure it isn't NULL
            //
            CDownloadErrorNotificationMessage *pDownloadErrorNotificationMessage = CDownloadErrorNotificationMessage::ReportDownloadError( strMessage, hHandledMessageEvent, hRespondedMessageEvent, nMessageBoxFlags, nResult );
            if (pDownloadErrorNotificationMessage)
            {
                //
                // Send the message
                //
                CThreadNotificationMessage::SendMessage( hWndNotify, pDownloadErrorNotificationMessage );

                //
                // Wait c_nSecondsToWaitForHandler seconds for someone to decide to handle the message
                //
                if (WiaUiUtil::MsgWaitForSingleObject(hHandledMessageEvent,c_nSecondsToWaitForHandler*1000))
                {
                    //
                    // Wait forever for user input
                    //
                    if (WiaUiUtil::MsgWaitForSingleObject(hRespondedMessageEvent,INFINITE))
                    {
                        //
                        // Nothing to do.
                        //
                    }
                }
            }
            //
            // Done with this event
            //
            CloseHandle(hRespondedMessageEvent);
        }
        //
        // Done with this event
        //
        CloseHandle(hHandledMessageEvent);
    }
    return nResult;
}


//
// This function will sort of arbitrarily try to decide if a
// it is possible the user chose an area that is too large
//
static bool ScannerImageSizeSeemsExcessive( IWiaItem *pWiaItem )
{
    WIA_PUSHFUNCTION(TEXT("ScannerImageSizeSeemsExcessive"));
    //
    // Assume it isn't too large
    //
    bool bResult = false;

    LONG nHorizontalExt=0, nVerticalExt=0;
    if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPS_XEXTENT, nHorizontalExt ) && PropStorageHelpers::GetProperty( pWiaItem, WIA_IPS_YEXTENT, nVerticalExt ))
    {
        LONG nColorDepth=0;
        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_DEPTH, nColorDepth ))
        {
            WIA_TRACE((TEXT("Scan Size: %d"), (nHorizontalExt * nVerticalExt * nColorDepth) / 8 ));
            //
            // If an uncompressed scan is larger than 50 MB
            //
            if ((nHorizontalExt * nVerticalExt * nColorDepth) / 8 > 1024*1024*50)
            {
                bResult = true;
            }
        }
    }

    return bResult;
}


int CDownloadImagesThreadMessage::ReportDownloadError( HWND hWndNotify, IWiaItem *pWiaItem, HRESULT &hr, bool bAllowContinue, bool bPageFeederActive, bool bUsableMultipageFileExists, bool bMultiPageTransfer )
{
    WIA_PUSH_FUNCTION((TEXT("CDownloadImagesThreadMessage::ReportDownloadError( hWndNotify: %p, pWiaItem: %p, hr: %08X, bAllowContinue: %d, bPageFeederActive: %d, bUsableMultipageFileExists: %d"), hWndNotify, pWiaItem, hr, bAllowContinue, bPageFeederActive, bUsableMultipageFileExists ));
    WIA_PRINTHRESULT((hr,TEXT("HRESULT:")));

    //
    // Get the device type property
    //
    LONG lDeviceType = 0;
    CComPtr<IWiaItem> pWiaItemRoot;
    if (pWiaItem && SUCCEEDED(pWiaItem->GetRootItem(&pWiaItemRoot)))
    {
        PropStorageHelpers::GetProperty( pWiaItemRoot, WIA_DIP_DEV_TYPE, lDeviceType );
    }

    //
    // Get the actual device type bits
    //
    lDeviceType = GET_STIDEVICE_TYPE(lDeviceType);

    //
    // Default message box buttons
    //
    int nMessageBoxFlags = 0;

    //
    // Default message
    //
    CSimpleString strMessage(TEXT(""));

    //
    // Take a first cut at getting the correct error message
    //
    switch (hr)
    {
    case WIA_ERROR_OFFLINE:
        //
        // The device is disconnected.  Nothing we can do here, so just return.
        //
        return CMessageBoxEx::IDMBEX_CANCEL;

    case WIA_ERROR_ITEM_DELETED:
        //
        // If the item has been deleted, just continue.
        //
        return CMessageBoxEx::IDMBEX_SKIP;

    case WIA_ERROR_BUSY:
        nMessageBoxFlags = CMessageBoxEx::MBEX_CANCELRETRY|CMessageBoxEx::MBEX_DEFBUTTON2|CMessageBoxEx::MBEX_ICONWARNING;
        strMessage = CSimpleString( IDS_TRANSFER_DEVICEBUSY, g_hInstance );
        break;

    case WIA_ERROR_PAPER_EMPTY:
        nMessageBoxFlags = CMessageBoxEx::MBEX_CANCELRETRY|CMessageBoxEx::MBEX_DEFBUTTON2|CMessageBoxEx::MBEX_ICONWARNING;
        strMessage = CSimpleString( IDS_TRANSFER_PAPEREMPTY, g_hInstance );
        break;

    case E_OUTOFMEMORY:
        if (StiDeviceTypeScanner == lDeviceType && ScannerImageSizeSeemsExcessive(pWiaItem))
        {
            //
            // Handle the case where we think the user may have chosen an insane image size
            //
            nMessageBoxFlags = CMessageBoxEx::MBEX_OK|CMessageBoxEx::MBEX_ICONWARNING;
            strMessage = CSimpleString( IDS_TRANSFER_SCANNEDITEMMAYBETOOLARGE, g_hInstance );
            break;
        }
    }

    //
    // If we still don't have an error message, see if this is a special case
    //
    if (!nMessageBoxFlags || !strMessage.Length())
    {
        if (bPageFeederActive)
        {
            if (bMultiPageTransfer)
            {
                if (bUsableMultipageFileExists)
                {
                    switch (hr)
                    {
                    case WIA_ERROR_PAPER_JAM:

                    case WIA_ERROR_PAPER_PROBLEM:
                        //
                        // We can recover the rest of the file in these cases.
                        //
                        nMessageBoxFlags = CMessageBoxEx::MBEX_ICONINFORMATION|CMessageBoxEx::MBEX_YESNO;
                        strMessage = CSimpleString( IDS_MULTIPAGE_PAPER_PROBLEM, g_hInstance );
                        break;

                    default:
                        nMessageBoxFlags = CMessageBoxEx::MBEX_ICONERROR|CMessageBoxEx::MBEX_OK;
                        strMessage = CSimpleString( IDS_MULTIPAGE_FATAL_ERROR, g_hInstance );
                        break;
                    }
                }
                else
                {
                    nMessageBoxFlags = CMessageBoxEx::MBEX_ICONERROR|CMessageBoxEx::MBEX_OK;
                    strMessage = CSimpleString( IDS_MULTIPAGE_FATAL_ERROR, g_hInstance );
                }
            }
        }
    }

    //
    // If we still don't have a message, use the default
    //
    if (!nMessageBoxFlags || !strMessage.Length())
    {
        if (bAllowContinue)
        {
            nMessageBoxFlags = CMessageBoxEx::MBEX_CANCELRETRYSKIPSKIPALL|CMessageBoxEx::MBEX_DEFBUTTON2|CMessageBoxEx::MBEX_ICONWARNING;
            strMessage = CSimpleString( IDS_TRANSFER_GENERICFAILURE, g_hInstance );
        }
        else
        {
            nMessageBoxFlags = CMessageBoxEx::MBEX_CANCELRETRY|CMessageBoxEx::MBEX_DEFBUTTON1|CMessageBoxEx::MBEX_ICONWARNING;
            strMessage = CSimpleString( IDS_TRANSFER_GENERICFAILURE_NO_CONTINUE, g_hInstance );
        }
    }

    //
    // Report the error
    //
    int nResult = ReportError( hWndNotify, strMessage, nMessageBoxFlags );

    //
    // Special cases, give us a chance to change the hresult and return value
    //
    if (bPageFeederActive && !bUsableMultipageFileExists && (CMessageBoxEx::IDMBEX_SKIP == nResult || CMessageBoxEx::IDMBEX_SKIPALL == nResult))
    {
        hr = WIA_ERROR_PAPER_EMPTY;
        nResult = CMessageBoxEx::IDMBEX_SKIP;
    }
    else if (bPageFeederActive && bUsableMultipageFileExists && (WIA_ERROR_PAPER_JAM == hr || WIA_ERROR_PAPER_PROBLEM == hr))
    {
        if (CMessageBoxEx::IDMBEX_YES == nResult)
        {
            hr = S_OK;
            nResult = CMessageBoxEx::IDMBEX_SKIP;
        }
        else
        {
            nResult = CMessageBoxEx::IDMBEX_CANCEL;
        }
    }

    return nResult;
}

static void GetIdealInputFormat( IWiaSupportedFormats *pWiaSupportedFormats, const GUID &guidOutputFormat, GUID &guidInputFormat )
{
    //
    // If we can get the input format and the output format to be the same, that is best
    // If we cannot, we will use DIB, which we can convert to the output format
    //

    //
    // Get the format count
    //
    LONG nCount = 0;
    HRESULT hr = pWiaSupportedFormats->GetFormatCount(&nCount);
    if (SUCCEEDED(hr))
    {
        //
        // Search for the output format
        //
        for (LONG i=0;i<nCount;i++)
        {
            GUID guidCurrentFormat;
            hr = pWiaSupportedFormats->GetFormatType( i, &guidCurrentFormat );
            if (SUCCEEDED(hr))
            {
                //
                // If we've found the output format, save it as the input format and return
                //
                if (guidCurrentFormat == guidOutputFormat)
                {
                    guidInputFormat = guidOutputFormat;
                    return;
                }
            }
        }
    }

    //
    // If we've gotten this far, we have to use BMP
    //
    guidInputFormat = WiaImgFmt_BMP;
}


HRESULT CDownloadImagesThreadMessage::GetListOfTransferItems( IWiaItem *pWiaItem, CSimpleDynamicArray<CTransferItem> &TransferItems )
{
    if (pWiaItem)
    {
        //
        // Add this item
        //
        TransferItems.Append(CTransferItem(pWiaItem));

        //
        // If this item has attachments, enumerate and add them
        //
        LONG nItemType = 0;
        if (SUCCEEDED(pWiaItem->GetItemType(&nItemType)) && (nItemType & WiaItemTypeHasAttachments))
        {
            CComPtr<IEnumWiaItem> pEnumWiaItem;
            if (SUCCEEDED(pWiaItem->EnumChildItems( &pEnumWiaItem )))
            {
                CComPtr<IWiaItem> pWiaItem;
                while (S_OK == pEnumWiaItem->Next(1,&pWiaItem,NULL))
                {
                    TransferItems.Append(CTransferItem(pWiaItem));
                    pWiaItem = NULL;
                }
            }
        }
    }
    return TransferItems.Size() ? S_OK : E_FAIL;
}

static int Find( const CSimpleDynamicArray<CTransferItem> &TransferItems, const CSimpleString &strFilename )
{
    WIA_PUSH_FUNCTION((TEXT("Find( %s )"),strFilename.String()));
    for (int i=0;i<TransferItems.Size();i++)
    {
        WIA_TRACE((TEXT("Comparing %s to %s"), strFilename.String(), TransferItems[i].Filename().String()));
        if (strFilename == TransferItems[i].Filename())
        {
            WIA_TRACE((TEXT("Returning %d"),i));
            return i;
        }
    }
    WIA_TRACE((TEXT("Returning -1")));
    return -1;
}

HRESULT CDownloadImagesThreadMessage::ReserveTransferItemFilenames( CSimpleDynamicArray<CTransferItem> &TransferItems, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberMask, bool bAllowUnNumberedFile, int &nPrevFileNumber )
{
    WIA_PUSH_FUNCTION((TEXT("CDownloadImagesThreadMessage::ReserveTransferItemFilenames")));

    //
    // The maximum number of identical attachments
    //
    int c_nMaxDuplicateFile = 1000;

    //
    // Assume success
    //
    HRESULT hr = S_OK;

    //
    // We can only release the mutex if we were able to grab it.
    //
    bool bGrabbedMutex = false;

    //
    // It is not an error if we can't grab the mutex here
    //
    if (m_hFilenameCreationMutex && WiaUiUtil::MsgWaitForSingleObject(m_hFilenameCreationMutex,2000))
    {
        bGrabbedMutex = true;
    }
    //
    // Get the root filename
    //
    TCHAR szFullPathname[MAX_PATH*2] = TEXT("");
    int nFileNumber = NumberedFileName::GenerateLowestAvailableNumberedFileName( 0, szFullPathname, pszDirectory, pszFilename, pszNumberMask, TEXT(""), bAllowUnNumberedFile, nPrevFileNumber );
    WIA_TRACE((TEXT("nFileNumber = %d"),nFileNumber));

    //
    // Make sure we got a valid file number
    //
    if (nFileNumber >= 0)
    {
        //
        // Now loop through the transfer items for this item and create a unique filename for each
        //
        for (int nCurrTransferItem=0;nCurrTransferItem<TransferItems.Size();nCurrTransferItem++)
        {
            CSimpleString strFilename = CSimpleString(szFullPathname);
            CSimpleString strExtension = CWiaFileFormat::GetExtension(TransferItems[nCurrTransferItem].OutputFormat(),TransferItems[nCurrTransferItem].MediaType(),TransferItems[nCurrTransferItem].WiaItem() );

            //
            // Now we are going to make sure there are no existing files with the same name
            // in this transfer group.  This could be caused by having multiple attachments of the same
            // type.  So we are going to loop until we find a filename that is unused.  The first file
            // will be named like this:
            //
            //    File NNN.ext
            //
            // Subsequent files will be named like this:
            //
            //    File NNN-X.ext
            //    File NNN-Y.ext
            //    File NNN-Z.ext
            //    ...
            //
            bool bFoundUniqueFile = false;
            for (int nCurrDuplicateCheckIndex=1;nCurrDuplicateCheckIndex<c_nMaxDuplicateFile && !bFoundUniqueFile;nCurrDuplicateCheckIndex++)
            {
                //
                // Append the extension, if there is one
                //
                if (strExtension.Length())
                {
                    strFilename += TEXT(".");
                    strFilename += strExtension;
                }

                //
                // If this filename exists in the transfer items list, append the new suffix, and remain in the loop.
                //
                WIA_TRACE((TEXT("Calling Find on %s"), strFilename.String()));
                if (Find(TransferItems,strFilename) >= 0)
                {
                    strFilename = szFullPathname;
                    strFilename += CSimpleString().Format(IDS_DUPLICATE_FILENAME_MASK,g_hInstance,nCurrDuplicateCheckIndex);
                }

                //
                // Otherwise, we are done.
                //
                else
                {
                    bFoundUniqueFile = true;
                }
            }

            //
            // Make sure we found a unique filename for this set of files
            //
            WIA_TRACE((TEXT("strFilename = %s"), strFilename.String()));
            if (bFoundUniqueFile && strFilename.Length())
            {
                TransferItems[nCurrTransferItem].Filename(strFilename);
                hr = TransferItems[nCurrTransferItem].OpenPlaceholderFile();
                if (FAILED(hr))
                {
                    break;
                }
            }

            //
            // If we didn't find a valid name, exit the loop and set the return value to an error
            //
            else
            {
                hr = E_FAIL;
                break;
            }
        }
        //
        // Save this number so the next search starts here
        //
        nPrevFileNumber = nFileNumber;
    }
    else
    {
        WIA_ERROR((TEXT("NumberedFileName::GenerateLowestAvailableNumberedFileName returned %d"), nFileNumber ));
        hr = E_FAIL;
    }
    
    //
    // If we grabbed the mutex, release it
    //
    if (bGrabbedMutex)
    {
        ReleaseMutex(m_hFilenameCreationMutex);
    }

    WIA_CHECK_HR(hr,"CDownloadImagesThreadMessage::ReserveTransferItemFilenames");
    return hr;
}

BOOL CDownloadImagesThreadMessage::GetCancelledState()
{
    BOOL bResult = FALSE;

    //
    // First, wait until we are not paused
    //
    if (m_hPauseDownloadEvent)
    {
        WiaUiUtil::MsgWaitForSingleObject(m_hPauseDownloadEvent,INFINITE);
    }

    //
    // Then check to see if we have been cancelled
    //
    if (m_hCancelDownloadEvent && WAIT_TIMEOUT!=WaitForSingleObject(m_hCancelDownloadEvent,0))
    {
        bResult = TRUE;
    }

    return bResult;
}

static void CloseAndDeletePlaceholderFiles(CSimpleDynamicArray<CTransferItem> &TransferItems)
{
    for (int nCurrTransferItem=0;nCurrTransferItem<TransferItems.Size();nCurrTransferItem++)
    {

        if (TransferItems[nCurrTransferItem].Filename().Length())
        {
            TransferItems[nCurrTransferItem].DeleteFile();
        }
    }
}



static void SnapExtentToRotatableSize( IUnknown *pUnknown, const GUID &guidFormat )
{
    WIA_PUSH_FUNCTION((TEXT("SnapExtentToRotatableSize")));
    //
    // Make sure we have a valid pointer
    //
    if (!pUnknown)
    {
        WIA_TRACE((TEXT("Invalid pointer")));
        return;
    }

    //
    // Make sure we have a JPEG file.
    //
    if (WiaImgFmt_JPEG != guidFormat)
    {
        return;
    }

    //
    // Make sure we can read the access flags
    //
    ULONG nHorizontalAccessFlags=0, nVerticalAccessFlags=0;
    if (!PropStorageHelpers::GetPropertyAccessFlags( pUnknown, WIA_IPS_XEXTENT, nHorizontalAccessFlags ) ||
        !PropStorageHelpers::GetPropertyAccessFlags( pUnknown, WIA_IPS_YEXTENT, nVerticalAccessFlags ))
    {
        WIA_TRACE((TEXT("Unable to read access flags")));
        return;
    }

    //
    // Make sure we have read/write access to the extent properties
    //
    if ((WIA_PROP_RW & nHorizontalAccessFlags)==0 || (WIA_PROP_RW & nVerticalAccessFlags)==0)
    {
        WIA_TRACE((TEXT("Invalid access flags")));
        return;
    }

    //
    // Get the ranges
    //
    PropStorageHelpers::CPropertyRange HorizontalRange, VerticalRange;
    if (!PropStorageHelpers::GetPropertyRange( pUnknown, WIA_IPS_XEXTENT, HorizontalRange ) ||
        !PropStorageHelpers::GetPropertyRange( pUnknown, WIA_IPS_YEXTENT, VerticalRange ))
    {
        WIA_TRACE((TEXT("Unable to read ranges")));
        return;
    }

    //
    // Make sure they are valid ranges.  We aren't going to mess with it if it doesn't have a step value of 1
    //
    if (!HorizontalRange.nMax || HorizontalRange.nStep != 1 || !VerticalRange.nMax || VerticalRange.nStep != 1)
    {
        WIA_TRACE((TEXT("Invalid ranges")));
        return;
    }

    //
    // Get the current values
    //
    LONG nHorizontalExt=0, nVerticalExt=0;
    if (!PropStorageHelpers::GetProperty( pUnknown, WIA_IPS_XEXTENT, nHorizontalExt ) ||
        !PropStorageHelpers::GetProperty( pUnknown, WIA_IPS_YEXTENT, nVerticalExt ))
    {
        WIA_TRACE((TEXT("Can't read current extents")));
        return;
    }

    //
    // Round to the nearest 8, ensuring we don't go over the maximum extent (which is often not a multiple of 16, but oh well)
    //
    PropStorageHelpers::SetProperty( pUnknown, WIA_IPS_XEXTENT, WiaUiUtil::Min( WiaUiUtil::Align( nHorizontalExt, 16 ), HorizontalRange.nMax ) );
    PropStorageHelpers::SetProperty( pUnknown, WIA_IPS_YEXTENT, WiaUiUtil::Min( WiaUiUtil::Align( nVerticalExt, 16 ), VerticalRange.nMax ) );
}


static void UpdateFolderTime( LPCTSTR pszFolder )
{
    if (pszFolder && lstrlen(pszFolder))
    {
        FILETIME ftCurrent = {0};
        GetSystemTimeAsFileTime(&ftCurrent);

        //
        // Private flag 0x100 lets us open a directory in write access
        //
        HANDLE hFolder = CreateFile( pszFolder, GENERIC_READ | 0x100, FILE_SHARE_READ | FILE_SHARE_DELETE, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL );
        if (INVALID_HANDLE_VALUE != hFolder)
        {
            SetFileTime( hFolder, NULL, NULL, &ftCurrent );
            CloseHandle( hFolder );
        }
    }
}

static bool FileExistsAndContainsData( LPCTSTR pszFileName )
{
    bool bResult = false;

    //
    // Make sure we have a filename
    //
    if (pszFileName && lstrlen(pszFileName))
    {
        //
        // Make sure the file exists
        //
        if (NumberedFileName::DoesFileExist(pszFileName))
        {
            //
            // Attempt to open the file
            //
            HANDLE hFile = CreateFile( pszFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
            if (INVALID_HANDLE_VALUE != hFile)
            {
                //
                // Get the file size and make sure we didn't have an error
                //
                ULARGE_INTEGER nFileSize = {0};
                nFileSize.LowPart = GetFileSize( hFile, &nFileSize.HighPart );
                if (nFileSize.LowPart != INVALID_FILE_SIZE && GetLastError() == NO_ERROR)
                {
                    if (nFileSize.QuadPart != 0)
                    {
                        //
                        // Success
                        //
                        bResult = true;
                    }
                }

                CloseHandle( hFile );
            }
        }
    }
    return bResult;
}

HRESULT CDownloadImagesThreadMessage::Download(void)
{
    WIA_PUSH_FUNCTION((TEXT("CDownloadImagesThreadMessage::Download")));

    CDownloadedFileInformationList DownloadedFileInformationList;

    //
    // Will be set to true if the user cancels
    //
    bool bCancelled = false;

    //
    // Will be set to true if some error prevents us from continuing
    //
    bool bStopTransferring = false;

    //
    // Tell the notification window we are going to start downloading images
    //
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::BeginDownloadAllMessage( m_Cookies.Size() ) );

    //
    // We will sometimes have more error information than we can fit in an HRESULT
    //
    CSimpleString strExtendedErrorInformation = TEXT("");

    //
    // Get an instance of the GIT
    //
    CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
    HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
    if (SUCCEEDED(hr))
    {
        //
        // Get an instance of our transfer helper classes
        //
        CComPtr<IWiaTransferHelper> pWiaTransferHelper;
        hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaTransferHelper, (void**)&pWiaTransferHelper );
        if (SUCCEEDED(hr))
        {
            //
            // Get an instance of our helper class for identifying supported formats
            //
            CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
            hr = pWiaTransferHelper->QueryInterface( IID_IWiaSupportedFormats, (void**)&pWiaSupportedFormats );
            if (SUCCEEDED(hr))
            {
                //
                // We (this) are an instance of the callback class.  Get an interface pointer to it.
                //
                CComPtr<IWiaDataCallback> pWiaDataCallback;
                hr = this->QueryInterface( IID_IWiaDataCallback, (void**)&pWiaDataCallback );
                if (SUCCEEDED(hr))
                {
                    //
                    // Initialize the uniqueness list
                    //
                    CFileUniquenessList FileUniquenessList( m_strDirectory );

                    //
                    // Skip all download errors?
                    //
                    bool bSkipAllDownloadErrors = false;

                    //
                    // If the most recent error was skipped, set this to true to ensure
                    // we don't pass back an error on the last image
                    //
                    bool bLastErrorSkipped = false;

                    //
                    // Save all or delete all duplicates?
                    //
                    int nPersistentDuplicateResult = 0;

                    //
                    // Save the previous file number, so we don't have to search the whole range of files
                    // to find an open section
                    //
                    int nPrevFileNumber = NumberedFileName::FindHighestNumberedFile( m_strDirectory, m_strFilename );

                    //
                    // Loop through all of the images
                    //
                    for ( int nCurrentImage=0; nCurrentImage<m_Cookies.Size() && !bCancelled && !bStopTransferring; nCurrentImage++ )
                    {
                        WIA_TRACE((TEXT("Preparing to transfer the %d'th image (Cookie %08X)"), nCurrentImage, m_Cookies[nCurrentImage] ));

                        //
                        // Assume we won't skip any transfer error that occurs
                        //
                        bLastErrorSkipped = false;

                        //
                        // Save the current cookie ID for the callback
                        //
                        m_nCurrentCookie = m_Cookies[nCurrentImage];

                        //
                        // If we have been cancelled, exit the loop
                        //
                        if (GetCancelledState())
                        {
                            hr = S_FALSE;
                            bCancelled = true;
                            break;
                        }

                        //
                        // Get the IWiaItem interface pointer from the GIT
                        //
                        CComPtr<IWiaItem> pWiaItem;
                        hr = pGlobalInterfaceTable->GetInterfaceFromGlobal(m_Cookies[nCurrentImage], IID_IWiaItem, (void**)&pWiaItem );
                        if (SUCCEEDED(hr))
                        {
                            bool bInPageFeederMode = false;

                            //
                            // Ensure the image is a multiple of eight pixels in size
                            //
                            SnapExtentToRotatableSize(pWiaItem,m_guidFormat);

                            //
                            // Get the root item
                            //
                            CComPtr<IWiaItem> pWiaItemRoot;
                            if (SUCCEEDED(pWiaItem->GetRootItem(&pWiaItemRoot)))
                            {
                                LONG nPaperSource = 0;
                                if (PropStorageHelpers::GetProperty( pWiaItemRoot, WIA_DPS_DOCUMENT_HANDLING_SELECT, static_cast<LONG>(nPaperSource)))
                                {
                                    if (nPaperSource & FEEDER)
                                    {
                                        bInPageFeederMode = true;
                                    }
                                }
                            }

                            //
                            // Download the thumbnail, in case we haven't already
                            //
                            GUID guidPreferredFormat;
                            LONG nAccessRights;
                            PBYTE pBitmapData = NULL;
                            LONG nWidth = 0, nHeight = 0, nPictureWidth = 0, nPictureHeight = 0, nBitmapDataLength = 0;
                            CAnnotationType AnnotationType = AnnotationNone;
                            CSimpleString strDefExt;
                            if (SUCCEEDED(DownloadAndCreateThumbnail( pWiaItem, &pBitmapData, nWidth, nHeight, nBitmapDataLength, guidPreferredFormat, nAccessRights, nPictureWidth, nPictureHeight, AnnotationType, strDefExt )))
                            {
                                WIA_TRACE((TEXT("DownloadAndCreateThumbnail succeeded")));
                                CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadThumbnailsThreadNotifyMessage::EndDownloadThumbnailMessage( nCurrentImage, m_Cookies[nCurrentImage], pBitmapData, nWidth, nHeight, nBitmapDataLength, guidPreferredFormat, nAccessRights, nPictureWidth, nPictureHeight, AnnotationType, strDefExt ) );
                            }

                            //
                            // If we are a scanner, and we are in feeder mode,
                            // determine whether or not the selected format is available
                            // in multipage format.  This won't work if the requested
                            // format is IID_NULL, so it rules out cameras implicitly
                            // (since we only transfer camera items in their default
                            // format.
                            //
                            LONG nMediaType = TYMED_FILE;
                            if (m_guidFormat != IID_NULL && bInPageFeederMode)
                            {
                                //
                                // Initialize the supported format helper for multipage files
                                //
                                if (SUCCEEDED(pWiaSupportedFormats->Initialize( pWiaItem, TYMED_MULTIPAGE_FILE )))
                                {
                                    //
                                    // See if there are any multipage formats supported
                                    //
                                    LONG nFormatCount;
                                    if (SUCCEEDED(pWiaSupportedFormats->GetFormatCount( &nFormatCount )))
                                    {
                                        //
                                        // Loop through the formats looking for the requested format
                                        //
                                        for (LONG nCurrFormat = 0;nCurrFormat<nFormatCount;nCurrFormat++)
                                        {
                                            //
                                            // Get the format
                                            //
                                            GUID guidCurrFormat = IID_NULL;
                                            if (SUCCEEDED(pWiaSupportedFormats->GetFormatType(nCurrFormat,&guidCurrFormat)))
                                            {
                                                //
                                                // If this is the same format, store the media type
                                                //
                                                if (guidCurrFormat == m_guidFormat)
                                                {
                                                    nMediaType = TYMED_MULTIPAGE_FILE;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            //
                            // Initialize the supported formats helper by telling it we are saving to a file or a multipage
                            // file
                            //
                            hr = WIA_FORCE_ERROR(FE_WIAACMGR,1,pWiaSupportedFormats->Initialize( pWiaItem, nMediaType ));
                            if (SUCCEEDED(hr))
                            {
                                //
                                //  Get the default format
                                //
                                GUID guidDefaultFormat = IID_NULL;
                                hr = pWiaSupportedFormats->GetDefaultClipboardFileFormat( &guidDefaultFormat );
                                if (SUCCEEDED(hr))
                                {
                                    //
                                    // Get the output format.  If the requested format is IID_NULL, we want to use the default format as the input format and output format (i.e., the preferrerd format).
                                    //
                                    GUID guidOutputFormat, guidInputFormat;
                                    if (IID_NULL == m_guidFormat)
                                    {
                                        guidOutputFormat = guidInputFormat = guidDefaultFormat;
                                    }
                                    else
                                    {
                                        guidOutputFormat = m_guidFormat;
                                        GetIdealInputFormat( pWiaSupportedFormats, m_guidFormat, guidInputFormat );
                                    }

                                    //
                                    // Verify the rotation setting is legal.  If it isn't, clear the rotation angle.
                                    //
                                    if (m_Rotation[nCurrentImage] && guidOutputFormat != IID_NULL && nPictureWidth && nPictureHeight && !WiaUiUtil::CanWiaImageBeSafelyRotated(guidOutputFormat,nPictureWidth,nPictureHeight))
                                    {
                                        m_Rotation[nCurrentImage] = 0;
                                    }
                                    //
                                    // Number of pages per scan.  We increment it at the end of each successful acquire.
                                    // This way, if we get an out of paper error when we haven't scanned any pages,
                                    // we can tell the user
                                    //
                                    int nPageCount = 0;

                                    //
                                    // We will store all of the successfully downloaded files for the following loop
                                    // in this list.
                                    //
                                    // If this is a single image transfer, that will be one filename.
                                    // If it is a multi-page transfer, it will be:
                                    //
                                    // (a) if the file format supports multi-page files (TIFF)--it will be one
                                    //     filename
                                    // (b) if the file format doesn't support multi-page files (everything but TIFF)--
                                    //     it will be multiple files
                                    //
                                    CDownloadedFileInformationList CurrentFileInformationList;

                                    //
                                    // This is the loop where we keep scanning pages until either:
                                    //
                                    // (a) the ADF-active device returns out-of-paper or
                                    // (b) we have retrieved one image from a non-ADF-active device
                                    //
                                    bool bContinueScanningPages = true;
                                    while (bContinueScanningPages)
                                    {
                                        //
                                        // Just before retrieving, let's make sure we've not been cancelled.  If we are, break out of the loop
                                        // and set the HRESULT to S_FALSE (which signifies cancel)
                                        //
                                        if (GetCancelledState())
                                        {
                                            hr = S_FALSE;
                                            bCancelled = true;
                                            break;
                                        }

                                        //
                                        // Get the item and the list of any attached items
                                        //
                                        CSimpleDynamicArray<CTransferItem> TransferItems;
                                        hr = WIA_FORCE_ERROR(FE_WIAACMGR,2,GetListOfTransferItems( pWiaItem, TransferItems ));
                                        if (SUCCEEDED(hr))
                                        {
                                            //
                                            // Set the output format of the first item (the image) to the desired output format
                                            //
                                            TransferItems[0].InputFormat(guidInputFormat);
                                            TransferItems[0].OutputFormat(guidOutputFormat);
                                            TransferItems[0].MediaType(nMediaType);

                                            //
                                            // Try to create the sub-directory.  Don't worry about failing.  We will catch any failures on the next call.
                                            //
                                            CAcquisitionManagerControllerWindow::RecursiveCreateDirectory(m_strDirectory);

                                            //
                                            // Find the correct filename, and reserve it
                                            //
                                            hr = WIA_FORCE_ERROR(FE_WIAACMGR,3,ReserveTransferItemFilenames( TransferItems, m_strDirectory, m_strFilename, CSimpleString(IDS_NUMBER_MASK,g_hInstance), m_Cookies.Size()==1 && !bInPageFeederMode, nPrevFileNumber ));
                                            if (SUCCEEDED(hr))
                                            {
                                                //
                                                // Loop through each item in the transfer list
                                                //
                                                for (int nCurrentTransferItem=0;nCurrentTransferItem<TransferItems.Size();nCurrentTransferItem++)
                                                {
                                                    //
                                                    // Save the final filename
                                                    //
                                                    CSimpleString strFinalFilename = TransferItems[nCurrentTransferItem].Filename();

                                                    //
                                                    // Create a temporary file to hold the unrotated/unconverted image
                                                    //
                                                    CSimpleString strIntermediateFilename = WiaUiUtil::CreateTempFileName();

                                                    //
                                                    // Make sure the filenames are valid
                                                    //
                                                    if (strFinalFilename.Length() && strIntermediateFilename.Length())
                                                    {
                                                        //
                                                        // Tell the notification window we are starting to download this item
                                                        //
                                                        CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::BeginDownloadImageMessage( nCurrentImage, m_Cookies[nCurrentImage], strFinalFilename ) );

                                                        //
                                                        // We are going to repeat failed images in this loop until the user cancels or skips them
                                                        //
                                                        bool bRetry = false;
                                                        do
                                                        {
                                                            //
                                                            // If this is a multi-page file transfer, set the page count to 0 (transfer all pages)
                                                            //
                                                            if (TYMED_MULTIPAGE_FILE == TransferItems[nCurrentTransferItem].MediaType())
                                                            {
                                                                //
                                                                // Get the root item and set the page count to 0
                                                                //
                                                                CComPtr<IWiaItem> pWiaItemRoot;
                                                                if (SUCCEEDED(TransferItems[nCurrentTransferItem].WiaItem()->GetRootItem(&pWiaItemRoot)))
                                                                {
                                                                    PropStorageHelpers::SetProperty( pWiaItemRoot, WIA_DPS_PAGES, 0 );
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //
                                                                // Get the root item and set the page count to 1
                                                                //
                                                                CComPtr<IWiaItem> pWiaItemRoot;
                                                                if (SUCCEEDED(TransferItems[nCurrentTransferItem].WiaItem()->GetRootItem(&pWiaItemRoot)))
                                                                {
                                                                    PropStorageHelpers::SetProperty( pWiaItemRoot, WIA_DPS_PAGES, 1 );
                                                                }
                                                            }

                                                            //
                                                            // Turn off preview mode
                                                            //
                                                            PropStorageHelpers::SetProperty( pWiaItem, WIA_DPS_PREVIEW, WIA_FINAL_SCAN );

                                                            //
                                                            // Download the file using our helper class
                                                            //
                                                            hr = WIA_FORCE_ERROR(FE_WIAACMGR,4,pWiaTransferHelper->TransferItemFile( TransferItems[nCurrentTransferItem].WiaItem(), NotifyWindow(), WIA_TRANSFERHELPER_NOPROGRESS|WIA_TRANSFERHELPER_PRESERVEFAILEDFILE, TransferItems[nCurrentTransferItem].InputFormat(), CSimpleStringConvert::WideString(strIntermediateFilename).String(), pWiaDataCallback, TransferItems[nCurrentTransferItem].MediaType()));

                                                            //
                                                            // Check to if the download was cancelled
                                                            //
                                                            if (GetCancelledState())
                                                            {
                                                                hr = S_FALSE;
                                                                bCancelled = true;
                                                                CloseAndDeletePlaceholderFiles(TransferItems);
                                                                break;
                                                            }

                                                            //
                                                            // We handle this special return differently later on
                                                            //
                                                            if (nPageCount && WIA_ERROR_PAPER_EMPTY == hr)
                                                            {
                                                                break;
                                                            }

                                                            //
                                                            // We will not treat this as an error
                                                            //
                                                            if (WIA_ERROR_ITEM_DELETED == hr)
                                                            {
                                                                break;
                                                            }

                                                            WIA_PRINTHRESULT((hr,TEXT("pWiaTransferHelper->TransferItemFile returned")));

                                                            //
                                                            // If there was a failure, we are going to aler the user
                                                            //
                                                            if (FAILED(hr))
                                                            {
                                                                int nResult;
                                                                
                                                                bool bUsableMultipageFileExists = false;
                                                                if (bInPageFeederMode)
                                                                {
                                                                    if (TYMED_MULTIPAGE_FILE == TransferItems[nCurrentTransferItem].MediaType())
                                                                    {
                                                                        if (FileExistsAndContainsData(strIntermediateFilename))
                                                                        {
                                                                            bUsableMultipageFileExists = true;
                                                                        }
                                                                    }
                                                                }

                                                                //
                                                                // If the user wants to skip all the images with download errors, set the result to SKIP
                                                                //
                                                                if (bSkipAllDownloadErrors)
                                                                {
                                                                    nResult = CMessageBoxEx::IDMBEX_SKIP;

                                                                    if (bInPageFeederMode && !bUsableMultipageFileExists)
                                                                    {
                                                                        hr = WIA_ERROR_PAPER_EMPTY;
                                                                    }
                                                                    else if (bInPageFeederMode && bUsableMultipageFileExists && (WIA_ERROR_PAPER_JAM == hr || WIA_ERROR_PAPER_PROBLEM == hr))
                                                                    {
                                                                        hr = S_OK;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //
                                                                    // Tell the notification window about the failure, and get a user decision
                                                                    //

                                                                    nResult = ReportDownloadError( NotifyWindow(), pWiaItem, hr, (m_Cookies.Size() != 1 || bInPageFeederMode), bInPageFeederMode, bUsableMultipageFileExists, TYMED_MULTIPAGE_FILE == TransferItems[nCurrentTransferItem].MediaType() );
                                                                }

                                                                if (CMessageBoxEx::IDMBEX_CANCEL == nResult)
                                                                {
                                                                    bCancelled = true;
                                                                    break;
                                                                }
                                                                else if (CMessageBoxEx::IDMBEX_SKIP == nResult)
                                                                {
                                                                    bRetry = false;
                                                                    bLastErrorSkipped = true;
                                                                }
                                                                else if (CMessageBoxEx::IDMBEX_SKIPALL == nResult)
                                                                {
                                                                    bSkipAllDownloadErrors = true;
                                                                    bRetry = false;
                                                                }
                                                                else if (CMessageBoxEx::IDMBEX_RETRY == nResult)
                                                                {
                                                                    bRetry = true;
                                                                }
                                                                else
                                                                {
                                                                    bRetry = false;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                bRetry = false;
                                                            }

                                                            //
                                                            // If the transfer returned S_FALSE, the user chose to cancel
                                                            //
                                                            if (S_FALSE == hr)
                                                            {
                                                                bCancelled = true;
                                                            }
                                                        }
                                                        while (bRetry);

                                                        //
                                                        // Close the file so we can overwrite it or delete it
                                                        //
                                                        TransferItems[nCurrentTransferItem].ClosePlaceholderFile();

                                                        //
                                                        // We only do this if and if the user didn't cancel and it didn't fail
                                                        //
                                                        if (S_OK == hr)
                                                        {
                                                            //
                                                            // If we need to rotate, and we are on the anchor image, perform the rotation
                                                            //
                                                            if (nCurrentTransferItem==0 && m_Rotation[nCurrentImage] != 0)
                                                            {
                                                                hr = WIA_FORCE_ERROR(FE_WIAACMGR,5,m_GdiPlusHelper.Rotate( CSimpleStringConvert::WideString(strIntermediateFilename).String(), CSimpleStringConvert::WideString(strFinalFilename).String(), m_Rotation[nCurrentImage], guidOutputFormat ));
                                                            }
                                                            else if (nCurrentTransferItem==0 && guidInputFormat != guidOutputFormat)
                                                            {
                                                                //
                                                                // Else if are saving as a different file type, use the conversion filter
                                                                //
                                                                hr = WIA_FORCE_ERROR(FE_WIAACMGR,6,m_GdiPlusHelper.Convert( CSimpleStringConvert::WideString(strIntermediateFilename).String(), CSimpleStringConvert::WideString(strFinalFilename).String(), guidOutputFormat ));
                                                            }
                                                            else
                                                            {
                                                                //
                                                                // Otherwise copy/delete or move the actual file over
                                                                //
                                                                hr = WIA_FORCE_ERROR(FE_WIAACMGR,7,WiaUiUtil::MoveOrCopyFile( strIntermediateFilename, strFinalFilename ));
                                                                WIA_PRINTHRESULT((hr,TEXT("WiaUiUtil::MoveOrCopyFile returned")));
                                                            }

                                                            //
                                                            // If we hit an error here, we are going to stop transferring
                                                            //
                                                            if (FAILED(hr))
                                                            {
                                                                bStopTransferring = true;
                                                                switch (hr)
                                                                {
                                                                case HRESULT_FROM_WIN32(ERROR_DISK_FULL):
                                                                    strExtendedErrorInformation.LoadString( IDS_DISKFULL, g_hInstance );
                                                                    break;

                                                                default:
                                                                    strExtendedErrorInformation.Format( IDS_UNABLE_TO_SAVE_FILE, g_hInstance, strFinalFilename.String() );
                                                                    break;
                                                                }
                                                            }
                                                        }


                                                        //
                                                        // Save a flag that says whether or not this was a duplicate image.  If it was, we don't want to delete
                                                        // it in case of an error or the user cancelling.
                                                        //
                                                        bool bDuplicateImage = false;

                                                        //
                                                        // Check to if the download was cancelled
                                                        //
                                                        if (GetCancelledState())
                                                        {
                                                            hr = S_FALSE;
                                                            bCancelled = true;
                                                            CloseAndDeletePlaceholderFiles(TransferItems);
                                                            break;
                                                        }

                                                        //
                                                        // Only check for duplicates if everything is OK AND
                                                        // we are not on page one of a multi-page scan AND
                                                        // we are on the anchor image (not an attachment).
                                                        //
                                                        // If we are on page 1 of a multipage scan, we have
                                                        // to save the first name, because we may be overwriting
                                                        // it with a multipage formatted file later.  In other
                                                        // words, we may be changing the file after this point,
                                                        // which is not true in any other case.
                                                        //
                                                        if (nCurrentTransferItem==0 && TransferItems[nCurrentTransferItem].MediaType() == TYMED_FILE && S_OK == hr && !(bInPageFeederMode && !nPageCount))
                                                        {
                                                            //
                                                            // Check to see if this file has already been downloaded
                                                            //
                                                            int nIdenticalFileIndex = FileUniquenessList.FindIdenticalFile(strFinalFilename,true);
                                                            if (nIdenticalFileIndex != -1)
                                                            {
                                                                //
                                                                // Get the duplicate's name
                                                                //
                                                                CSimpleString strDuplicateName = FileUniquenessList.GetFileName(nIdenticalFileIndex);

                                                                //
                                                                // Make sure the name is not empty
                                                                //
                                                                if (strDuplicateName.Length())
                                                                {
                                                                    //
                                                                    // Create the message to give the user
                                                                    //
                                                                    CSimpleString strMessage;
                                                                    strMessage.Format( IDS_DUPLICATE_FILE_WARNING, g_hInstance );

                                                                    //
                                                                    // Ask the user if they want to keep the new one
                                                                    //
                                                                    int nResult;
                                                                    if (CMessageBoxEx::IDMBEX_YESTOALL == nPersistentDuplicateResult)
                                                                    {
                                                                        nResult = CMessageBoxEx::IDMBEX_YES;
                                                                    }
                                                                    else if (CMessageBoxEx::IDMBEX_NOTOALL == nPersistentDuplicateResult)
                                                                    {
                                                                        nResult = CMessageBoxEx::IDMBEX_NO;
                                                                    }
                                                                    else
                                                                    {
                                                                        nResult = ReportError( NotifyWindow(), strMessage, CMessageBoxEx::MBEX_YESYESTOALLNONOTOALL|CMessageBoxEx::MBEX_ICONQUESTION );
                                                                        WIA_TRACE((TEXT("User's Response to \"Save Duplicate? %08X\""), nResult ));
                                                                    }

                                                                    //
                                                                    // Save persistent responses
                                                                    //
                                                                    if (nResult == CMessageBoxEx::IDMBEX_YESTOALL)
                                                                    {
                                                                        nPersistentDuplicateResult = CMessageBoxEx::IDMBEX_YESTOALL;
                                                                        nResult = CMessageBoxEx::IDMBEX_YES;
                                                                    }
                                                                    else if (nResult == CMessageBoxEx::IDMBEX_NOTOALL)
                                                                    {
                                                                        nPersistentDuplicateResult = CMessageBoxEx::IDMBEX_NOTOALL;
                                                                        nResult = CMessageBoxEx::IDMBEX_NO;
                                                                    }

                                                                    //
                                                                    // If the user doesn't want to keep new one, delete it, and save the filename
                                                                    //
                                                                    if (nResult == CMessageBoxEx::IDMBEX_NO)
                                                                    {
                                                                        DeleteFile( strFinalFilename );
                                                                        strFinalFilename = strDuplicateName;
                                                                        bDuplicateImage = true;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        //
                                                        // If everything is *still* OK
                                                        //
                                                        if (S_OK == hr)
                                                        {
                                                            //
                                                            // Save the audio, if any
                                                            //
                                                            CSimpleString strAudioFilename;
                                                            HRESULT hResAudio = WiaUiUtil::SaveWiaItemAudio( pWiaItem, strFinalFilename, strAudioFilename );
                                                            if (SUCCEEDED(hResAudio) && strAudioFilename.Length())
                                                            {
                                                                CurrentFileInformationList.Append(CDownloadedFileInformation(strAudioFilename,false,m_Cookies[nCurrentImage],false));
                                                            }
                                                            else
                                                            {
                                                                WIA_PRINTHRESULT((hResAudio,TEXT("SaveWiaItemAudio failed!")));
                                                            }

                                                            //
                                                            // Set the file time to the item time
                                                            //
                                                            if (m_bStampTime)
                                                            {
                                                                HRESULT hResFileTime = WiaUiUtil::StampItemTimeOnFile( pWiaItem, strFinalFilename );
                                                                if (!SUCCEEDED(hResFileTime))
                                                                {
                                                                    WIA_PRINTHRESULT((hResAudio,TEXT("StampItemTimeOnFile failed!")));
                                                                }
                                                            }

                                                            //
                                                            // Save the downloaded file information.  Mark it "IncludeInFileCount" if it is the first image in the group.
                                                            //
                                                            CurrentFileInformationList.Append(CDownloadedFileInformation(strFinalFilename,bDuplicateImage==false,m_Cookies[nCurrentImage],nCurrentTransferItem==0));
                                                        }
                                                        else
                                                        {
                                                            //
                                                            // Clean up the final filename, in case of failure
                                                            //
                                                            if (!DeleteFile( strFinalFilename ))
                                                            {
                                                                WIA_PRINTHRESULT((MY_HRESULT_FROM_WIN32(GetLastError()),TEXT("DeleteFile(%s) failed!"), strFinalFilename.String()));
                                                            }
                                                        }

                                                        //
                                                        // Make sure the intermediate file is removed
                                                        //
                                                        if (!DeleteFile( strIntermediateFilename ))
                                                        {
                                                            WIA_PRINTHRESULT((MY_HRESULT_FROM_WIN32(GetLastError()),TEXT("DeleteFile(%s) failed!"), strIntermediateFilename.String()));
                                                        }

                                                        //
                                                        // Tell the notify window we are done with this image
                                                        //
                                                        if (hr != WIA_ERROR_PAPER_EMPTY)
                                                        {
                                                            CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::EndDownloadImageMessage( nCurrentImage, m_Cookies[nCurrentImage], strFinalFilename, hr ) );
                                                        }
                                                    }
                                                    else
                                                    {
                                                        bStopTransferring = true;
                                                        hr = E_OUTOFMEMORY;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //
                                                // Tell the user specifically why we couldn't create the placeholder file
                                                //
                                                WIA_PRINTHRESULT((hr,TEXT("Unable to create a placeholder file")));
                                                bStopTransferring = true;
                                                switch (hr)
                                                {
                                                case E_ACCESSDENIED:
                                                    strExtendedErrorInformation.LoadString( IDS_ERROR_ACCESS_DENIED, g_hInstance );
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            WIA_PRINTHRESULT((hr,TEXT("Unable to create an output filename")));
                                            bStopTransferring = true;
                                        }

                                        //
                                        // Assume we will not be continuing
                                        //
                                        bContinueScanningPages = false;

                                        //
                                        // If we are out of paper, and we have one or more pages already, we are done, and there are no errors
                                        //
                                        if (nPageCount && WIA_ERROR_PAPER_EMPTY == hr)
                                        {
                                            //
                                            // If we are doing single-page TIFF output, we can create a multi-page TIFF file
                                            //
                                            if (Gdiplus::ImageFormatTIFF == guidOutputFormat && TYMED_FILE == nMediaType)
                                            {
                                                //
                                                // Get the list of all files we are going to concatenate
                                                //
                                                CSimpleDynamicArray<CSimpleStringWide> AllFiles;
                                                if (SUCCEEDED(CurrentFileInformationList.GetAllFiles(AllFiles)) && AllFiles.Size())
                                                {
                                                    //
                                                    // Create a temporary filename to save the images to, so we don't overwrite the original
                                                    //
                                                    CSimpleStringWide strwTempOutputFilename = CSimpleStringConvert::WideString(WiaUiUtil::CreateTempFileName(0));
                                                    if (strwTempOutputFilename.Length())
                                                    {
                                                        //
                                                        // Save the images as a multi-page TIFF file
                                                        //
                                                        if (SUCCEEDED(m_GdiPlusHelper.SaveMultipleImagesAsMultiPage( AllFiles, strwTempOutputFilename, Gdiplus::ImageFormatTIFF )))
                                                        {
                                                            //
                                                            // Save the first entry in the current list
                                                            //
                                                            CDownloadedFileInformation MultipageOutputFilename = CurrentFileInformationList[0];

                                                            //
                                                            // Mark the first entry as non-deletable
                                                            //
                                                            CurrentFileInformationList[0].DeleteOnError(false);

                                                            //
                                                            // Try to move the file from the temp folder to the final destination
                                                            //
                                                            if (SUCCEEDED(WiaUiUtil::MoveOrCopyFile( CSimpleStringConvert::NaturalString(strwTempOutputFilename), CurrentFileInformationList[0].Filename())))
                                                            {
                                                                //
                                                                // Delete all of the files (they are now part of the multi-page TIFF
                                                                //
                                                                CurrentFileInformationList.DeleteAllFiles();

                                                                //
                                                                // Destroy the list
                                                                //
                                                                CurrentFileInformationList.Destroy();

                                                                //
                                                                // Add the saved first image back to the list
                                                                //
                                                                CurrentFileInformationList.Append(MultipageOutputFilename);
                                                            }
                                                            else
                                                            {
                                                                //
                                                                // If we can't move the file, we have to delete it, to make sure we don't leave
                                                                // abandoned files laying around
                                                                //
                                                                DeleteFile( CSimpleStringConvert::NaturalString(strwTempOutputFilename) );
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            //
                                            // WIA_ERROR_PAPER_EMPTY is not an error in this context, so clear it
                                            //
                                            hr = S_OK;
                                        }
                                        else if (hr == S_OK)
                                        {
                                            //
                                            // if we are in page feeder mode, we should continue scanning since we didn't get any errors
                                            //
                                            if (bInPageFeederMode && TYMED_FILE == nMediaType)
                                            {
                                                bContinueScanningPages = true;
                                            }

                                            //
                                            // One more page transferred
                                            //
                                            nPageCount++;
                                        }

                                    } // End while loop

                                    //
                                    // Add all of the successfully transferred files to the complete file list
                                    //
                                    DownloadedFileInformationList.Append(CurrentFileInformationList);
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((hr,TEXT("pWiaSupportedFormats->GetDefaultClipboardFileFormat() failed")));
                                    bStopTransferring = true;
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("pWiaSupportedFormats->Initialize() failed")));
                                bStopTransferring = true;
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("Unable to retrieve interface %08X from the global interface table"),m_Cookies[nCurrentImage]));
                            bStopTransferring = true;
                        }

                        //
                        // Do this at the end of the loop, so we can pick up the item cookie it failed on
                        // This is only for handling errors specially
                        //
                        if (FAILED(hr))
                        {
                            //
                            // Make sure we send a message to the UI to alert it to errors, so it can update progress.
                            //
                            CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::EndDownloadImageMessage( nCurrentImage, m_Cookies[nCurrentImage], TEXT(""), hr ) );

                        } // end if (FAILED)
                    } // end for

                    //
                    // If there was a download error, but the user chose to suppress these errors
                    // AND there were some files downloaded, don't return an error.
                    //
                    if (FAILED(hr) && bLastErrorSkipped && DownloadedFileInformationList.Size())
                    {
                        hr = S_OK;
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("QueryInterface failed on IID_IWiaDataCallback")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("QueryInterface failed on IID_IWiaSupportedFormats")));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("Unable to create the transfer helper class")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("Unable to create the global interface table")));
    }

    //
    // If the user cancelled, delete all the files we downloaded
    //
    if (FAILED(hr) || bCancelled)
    {
        DownloadedFileInformationList.DeleteAllFiles();
    }

    //
    // Update the folder time, to cause the thumbnail to regenerate
    //
    if (SUCCEEDED(hr))
    {
        UpdateFolderTime( m_strDirectory );
    }

    //
    // Print the final result to the debugger
    //
    WIA_PRINTHRESULT((hr,TEXT("This is the result of downloading all of the images: %s"),strExtendedErrorInformation.String()));

    //
    // Tell the notification window we are done downloading images
    //
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::EndDownloadAllMessage( hr, strExtendedErrorInformation, &DownloadedFileInformationList ) );
    return S_OK;
}


CSimpleString CDownloadImagesThreadMessage::GetDateString(void)
{
    SYSTEMTIME LocalTime = {0};
    GetLocalTime(&LocalTime);
    TCHAR szDate[MAX_PATH] = {0};
    if (GetDateFormat( LOCALE_USER_DEFAULT, DATE_LONGDATE, &LocalTime, NULL, szDate, ARRAYSIZE(szDate)))
    {
        return CSimpleString().Format( IDS_UPLOADED_STRING, g_hInstance, szDate );
    }
    return TEXT("");
}


STDMETHODIMP CDownloadImagesThreadMessage::QueryInterface( REFIID riid, LPVOID *ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::QueryInterface"));
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IWiaDataCallback*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaDataCallback ))
    {
        *ppvObject = static_cast<IWiaDataCallback*>(this);
    }
    else
    {
        *ppvObject = NULL;
        return(E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CDownloadImagesThreadMessage::AddRef(void)
{
    return 1;
}

STDMETHODIMP_(ULONG) CDownloadImagesThreadMessage::Release(void)
{
    return 1;
}

STDMETHODIMP CDownloadImagesThreadMessage::BandedDataCallback(
                                                             LONG  lReason,
                                                             LONG  lStatus,
                                                             LONG  lPercentComplete,
                                                             LONG  lOffset,
                                                             LONG  lLength,
                                                             LONG  lReserved,
                                                             LONG  lResLength,
                                                             PBYTE pbBuffer )
{
    WIA_PUSH_FUNCTION(( TEXT("CDownloadImagesThreadMessage::BandedDataCallback(%X,%X,%d,%X,%X,%X,%X,%X"), lReason, lStatus, lPercentComplete, lOffset, lLength, lReserved, lResLength, pbBuffer ));
    //
    // First of all, check to see if we've been cancelled
    //
    if (m_hCancelDownloadEvent && WAIT_TIMEOUT!=WaitForSingleObject(m_hCancelDownloadEvent,0))
    {
        return S_FALSE;
    }

    switch (lReason)
    {
    case IT_MSG_STATUS:
        CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::UpdateDownloadImageMessage( lPercentComplete ) );
        break;

    case IT_MSG_FILE_PREVIEW_DATA_HEADER:
        //
        // Get rid of the old one
        //
        m_MemoryDib.Destroy();

        //
        // Make sure we start a new one
        //
        m_bFirstTransfer = true;
        m_nCurrentPreviewImageLine = 0;

        break;

    case IT_MSG_FILE_PREVIEW_DATA:
        if (lStatus & IT_STATUS_TRANSFER_TO_CLIENT)
        {
            if (m_bFirstTransfer)
            {
                //
                // Assuming there is no way we could get a lLength smaller than the image header size
                //
                m_bFirstTransfer = false;
                m_MemoryDib.Initialize( reinterpret_cast<PBITMAPINFO>(pbBuffer) );

                lLength -= WiaUiUtil::GetBmiSize(reinterpret_cast<PBITMAPINFO>(pbBuffer));
                lOffset += WiaUiUtil::GetBmiSize(reinterpret_cast<PBITMAPINFO>(pbBuffer));

                //
                // We're getting a preview image
                //
                CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::BeginPreviewMessage( m_nCurrentCookie, m_MemoryDib.Bitmap()) );
            }

            //
            // Make sure we are dealing with valid data
            //
            if (m_MemoryDib.IsValid())
            {
                //
                // This should be an even number of lines.  If it isn't, things are going to get messed up
                //
                int nLineCount = lLength / m_MemoryDib.GetUnpackedWidthInBytes();

                //
                // Scroll the data up if we are out of room
                //
                WIA_TRACE((TEXT("nLineCount = %d, nCurrentLine = %d, m_MemoryDib.GetHeight() = %d"), nLineCount, m_nCurrentPreviewImageLine, m_MemoryDib.GetHeight() ));
                if (nLineCount + m_nCurrentPreviewImageLine > m_MemoryDib.GetHeight())
                {
                    int nNumberOfLinesToScroll = (nLineCount + m_nCurrentPreviewImageLine) - m_MemoryDib.GetHeight();
                    m_MemoryDib.ScrollDataUp(nNumberOfLinesToScroll);
                    m_nCurrentPreviewImageLine = m_MemoryDib.GetHeight() - nLineCount;
                }


                WIA_TRACE((TEXT("nCurrentLine: %d, nLineCount: %d"), m_nCurrentPreviewImageLine, nLineCount ));

                //
                // Copy the data to our bitmap
                //
                m_MemoryDib.SetUnpackedData( pbBuffer, m_nCurrentPreviewImageLine, nLineCount );

                //
                // This is where we'll start next time
                //
                m_nCurrentPreviewImageLine += nLineCount;

                //
                // Tell the UI we have an update
                //
                CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::UpdatePreviewMessage( m_nCurrentCookie, m_MemoryDib.Bitmap() ) );

                //
                // If this is it for this preview, tell the UI
                //
                if (lPercentComplete == 100)
                {
                    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDownloadImagesThreadNotifyMessage::EndPreviewMessage( m_nCurrentCookie ) );
                }
            }
        } // IT_STATUS_TRANSFER_TO_CLIENT
        break;
    }
    return S_OK;
}


// -------------------------------------------------
// CDeleteImagesThreadMessage
// -------------------------------------------------
CDeleteImagesThreadMessage::CDeleteImagesThreadMessage(
                                                      HWND hWndNotify,
                                                      const CSimpleDynamicArray<DWORD> &Cookies,
                                                      HANDLE hCancelDeleteEvent,
                                                      HANDLE hPauseDeleteEvent,
                                                      bool bSlowItDown
                                                      )
: CNotifyThreadMessage( TQ_DELETEIMAGES, hWndNotify ),
m_Cookies(Cookies),
m_hCancelDeleteEvent(NULL),
m_hPauseDeleteEvent(NULL),
m_bSlowItDown(bSlowItDown)
{
    if (hCancelDeleteEvent)
    {
        DuplicateHandle( GetCurrentProcess(), hCancelDeleteEvent, GetCurrentProcess(), &m_hCancelDeleteEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
    }
    if (hPauseDeleteEvent)
    {
        DuplicateHandle( GetCurrentProcess(), hPauseDeleteEvent, GetCurrentProcess(), &m_hPauseDeleteEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
    }
}


CDeleteImagesThreadMessage::~CDeleteImagesThreadMessage(void)
{
    if (m_hCancelDeleteEvent)
    {
        CloseHandle(m_hCancelDeleteEvent);
        m_hCancelDeleteEvent = NULL;
    }
    if (m_hPauseDeleteEvent)
    {
        CloseHandle(m_hPauseDeleteEvent);
        m_hPauseDeleteEvent = NULL;
    }
}

HRESULT CDeleteImagesThreadMessage::DeleteImages(void)
{
    WIA_PUSH_FUNCTION((TEXT("CDeleteImagesThreadMessage::DeleteImages")));
    //
    // This is the result of downloading all of the images.  If any errors
    // occur, we will return an error.  Otherwise, we will return S_OK
    //
    HRESULT hrFinalResult = S_OK;

    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDeleteImagesThreadNotifyMessage::BeginDeleteAllMessage( m_Cookies.Size() ) );

    //
    // Pause a little while, so the user can read the wizard page
    //
    if (m_bSlowItDown)
    {
        Sleep(DELETE_DELAY_BEFORE);
    }


    //
    // Get an instance of the GIT
    //
    CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
    HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
    if (SUCCEEDED(hr))
    {
        for (int i=0;i<m_Cookies.Size();i++)
        {
            //
            // Tell the notification window which image we are deleting
            //
            CThreadNotificationMessage::SendMessage( NotifyWindow(), CDeleteImagesThreadNotifyMessage::BeginDeleteImageMessage( i, m_Cookies[i] ) );

            //
            // Get the item from the GIT
            //
            CComPtr<IWiaItem> pWiaItem;
            hr = pGlobalInterfaceTable->GetInterfaceFromGlobal(m_Cookies[i], IID_IWiaItem, (void**)&pWiaItem );
            if (SUCCEEDED(hr))
            {
                //
                // Wait forever if we are paused
                //
                if (m_hPauseDeleteEvent)
                {
                    WiaUiUtil::MsgWaitForSingleObject(m_hPauseDeleteEvent,INFINITE);
                }

                //
                // Check for a cancel
                //
                if (m_hCancelDeleteEvent && WAIT_OBJECT_0==WaitForSingleObject(m_hCancelDeleteEvent,0))
                {
                    hr = hrFinalResult = S_FALSE;
                    break;
                }

                //
                // Delete the item.  Note that we don't consider delete errors to be fatal, so we continue
                //
                hr = WIA_FORCE_ERROR(FE_WIAACMGR,8,WiaUiUtil::DeleteItemAndChildren(pWiaItem));
                if (S_OK != hr)
                {
                    hrFinalResult = hr;
                    WIA_PRINTHRESULT((hr,TEXT("DeleteItemAndChildren failed")));
                }
            }
            else
            {
                hrFinalResult = hr;
                WIA_PRINTHRESULT((hr,TEXT("Unable to retrieve interface %08X from the global interface table"),m_Cookies[i]));
            }

            //
            // Pause a little while, so the user can read the wizard page
            //
            if (m_bSlowItDown)
            {
                Sleep(DELETE_DELAY_DURING / m_Cookies.Size());
            }

            //
            // Save any errors
            //
            if (FAILED(hr))
            {
                hrFinalResult = hr;
            }

            //
            // If the device is disconnected, we may as well stop
            //
            if (WIA_ERROR_OFFLINE == hr)
            {
                break;
            }

            CThreadNotificationMessage::SendMessage( NotifyWindow(), CDeleteImagesThreadNotifyMessage::EndDeleteImageMessage( i, m_Cookies[i], hr ) );
        }
    }
    else
    {
        hrFinalResult = hr;
    }

    //
    // Pause a little while, so the user can read the wizard page
    //
    if (m_bSlowItDown)
    {
        Sleep(DELETE_DELAY_AFTER);
    }

    CThreadNotificationMessage::SendMessage( NotifyWindow(), CDeleteImagesThreadNotifyMessage::EndDeleteAllMessage( hrFinalResult ) );
    return S_OK;
}



// -------------------------------------------------
// CPreviewScanThreadMessage
// -------------------------------------------------
CPreviewScanThreadMessage::CPreviewScanThreadMessage(
                                                    HWND hWndNotify,
                                                    DWORD dwCookie,
                                                    HANDLE hCancelPreviewEvent
                                                    )
: CNotifyThreadMessage( TQ_SCANPREVIEW, hWndNotify ),
m_dwCookie(dwCookie),
m_bFirstTransfer(true)
{
    DuplicateHandle( GetCurrentProcess(), hCancelPreviewEvent, GetCurrentProcess(), &m_hCancelPreviewEvent, 0, FALSE, DUPLICATE_SAME_ACCESS );
}


CPreviewScanThreadMessage::~CPreviewScanThreadMessage()
{
    if (m_hCancelPreviewEvent)
    {
        CloseHandle(m_hCancelPreviewEvent);
        m_hCancelPreviewEvent = NULL;
    }
}


//
// Calculate the maximum scan size using the give DPI
//
static bool GetFullResolution( IWiaItem *pWiaItem, LONG nResX, LONG nResY, LONG &nExtX, LONG &nExtY )
{
    WIA_PUSHFUNCTION(TEXT("CScannerItem::GetFullResolution"));
    CComPtr<IWiaItem> pRootItem;
    if (SUCCEEDED(pWiaItem->GetRootItem(&pRootItem)) && pRootItem)
    {
        LONG lBedSizeX, lBedSizeY, nPaperSource;
        if (PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_DOCUMENT_HANDLING_SELECT, static_cast<LONG>(nPaperSource)) && nPaperSource & FEEDER)
        {
            if (PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_HORIZONTAL_SHEET_FEED_SIZE, lBedSizeX ) &&
                PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_VERTICAL_SHEET_FEED_SIZE, lBedSizeY ))
            {
                nExtX = WiaUiUtil::MulDivNoRound( nResX, lBedSizeX, 1000 );
                nExtY = WiaUiUtil::MulDivNoRound( nResY, lBedSizeY, 1000 );
                return(true);
            }
        }
        if (PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_HORIZONTAL_BED_SIZE, lBedSizeX ) &&
            PropStorageHelpers::GetProperty( pRootItem, WIA_DPS_VERTICAL_BED_SIZE, lBedSizeY ))
        {
            nExtX = WiaUiUtil::MulDivNoRound( nResX, lBedSizeX, 1000 );
            nExtY = WiaUiUtil::MulDivNoRound( nResY, lBedSizeY, 1000 );
            return(true);
        }
    }
    return(false);
}



static bool CalculatePreviewResolution( IWiaItem *pWiaItem, LONG &nResX, LONG &nResY )
{
    const LONG nDesiredResolution = 50;
    PropStorageHelpers::CPropertyRange XResolutionRange, YResolutionRange;
    if (PropStorageHelpers::GetPropertyRange( pWiaItem, WIA_IPS_XRES, XResolutionRange ) &&
        PropStorageHelpers::GetPropertyRange( pWiaItem, WIA_IPS_YRES, YResolutionRange ))
    {
        nResX = WiaUiUtil::GetMinimum<LONG>( XResolutionRange.nMin, nDesiredResolution, XResolutionRange.nStep );
        nResY = WiaUiUtil::GetMinimum<LONG>( YResolutionRange.nMin, nDesiredResolution, YResolutionRange.nStep );
        return(true);
    }
    else
    {
        CSimpleDynamicArray<LONG> XResolutionList, YResolutionList;
        if (PropStorageHelpers::GetPropertyList( pWiaItem, WIA_IPS_XRES, XResolutionList ) &&
            PropStorageHelpers::GetPropertyList( pWiaItem, WIA_IPS_YRES, YResolutionList ))
        {
            for (int i=0;i<XResolutionList.Size();i++)
            {
                nResX = XResolutionList[i];
                if (nResX >= nDesiredResolution)
                    break;
            }
            for (i=0;i<YResolutionList.Size();i++)
            {
                nResY = YResolutionList[i];
                if (nResY >= nDesiredResolution)
                    break;
            }
            return(true);
        }
    }
    return(false);
}


HRESULT CPreviewScanThreadMessage::Scan(void)
{
    WIA_PUSH_FUNCTION((TEXT("CPreviewScanThreadMessage::Download")));
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CPreviewScanThreadNotifyMessage::BeginDownloadMessage( m_dwCookie ) );
    HRESULT hr = S_OK;
    CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
    hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
    if (SUCCEEDED(hr))
    {
        CComPtr<IWiaTransferHelper> pWiaTransferHelper;
        hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaTransferHelper, (void**)&pWiaTransferHelper );
        if (SUCCEEDED(hr))
        {
            CComPtr<IWiaDataCallback> pWiaDataCallback;
            hr = this->QueryInterface( IID_IWiaDataCallback, (void**)&pWiaDataCallback );
            if (SUCCEEDED(hr))
            {
                CComPtr<IWiaItem> pWiaItem;
                hr = pGlobalInterfaceTable->GetInterfaceFromGlobal(m_dwCookie, IID_IWiaItem, (void**)&pWiaItem );
                if (SUCCEEDED(hr))
                {
                    LONG nResX, nResY;
                    if (CalculatePreviewResolution(pWiaItem,nResX,nResY))
                    {
                        LONG nExtX, nExtY;
                        if (GetFullResolution(pWiaItem,nResX,nResY,nExtX,nExtY))
                        {
                            CPropertyStream SavedProperties;
                            hr = SavedProperties.AssignFromWiaItem( pWiaItem );
                            if (SUCCEEDED(hr))
                            {
                                if (PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_XRES, nResX ) &&
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_YRES, nResY ) &&
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_XPOS, 0 ) &&
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_YPOS, 0 ) &&
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_XEXTENT, nExtX ) &&
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_IPS_YEXTENT, nExtY ))
                                {
                                    //
                                    // Set the preview property.  Ignore failure (it is an optional property)
                                    //
                                    PropStorageHelpers::SetProperty( pWiaItem, WIA_DPS_PREVIEW, 1 );
                                    hr = pWiaTransferHelper->TransferItemBanded( pWiaItem, NotifyWindow(), WIA_TRANSFERHELPER_NOPROGRESS, WiaImgFmt_MEMORYBMP, 0, pWiaDataCallback );
                                }
                                else
                                {
                                    hr = E_FAIL;
                                }
                                SavedProperties.ApplyToWiaItem( pWiaItem );
                            }
                        }
                        else
                        {
                            WIA_ERROR((TEXT("Unable to calculate the preview resolution size")));
                            hr = E_FAIL;
                        }
                    }
                    else
                    {
                        WIA_ERROR((TEXT("Unable to calculate the preview resolution")));
                        hr = E_FAIL;
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("Unable to retrieve interface %08X from the global interface table"),m_dwCookie));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("QueryInterface failed on IID_IWiaDataCallback")));
            }

        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("Unable to create the transfer helper class")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("Unable to create the global interface table")));
    }
    if (FAILED(hr) || hr == S_FALSE)
    {
        m_MemoryDib.Destroy();
    }
    CThreadNotificationMessage::SendMessage( NotifyWindow(), CPreviewScanThreadNotifyMessage::EndDownloadMessage( m_dwCookie, m_MemoryDib.DetachBitmap(), hr ) );
    return S_OK;
}

STDMETHODIMP CPreviewScanThreadMessage::QueryInterface( REFIID riid, LPVOID *ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::QueryInterface"));
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IWiaDataCallback*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaDataCallback ))
    {
        *ppvObject = static_cast<IWiaDataCallback*>(this);
    }
    else
    {
        *ppvObject = NULL;
        return(E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CPreviewScanThreadMessage::AddRef(void)
{
    return 1;
}

STDMETHODIMP_(ULONG) CPreviewScanThreadMessage::Release(void)
{
    return 1;
}

STDMETHODIMP CPreviewScanThreadMessage::BandedDataCallback(
                                                          LONG  lReason,
                                                          LONG  lStatus,
                                                          LONG  lPercentComplete,
                                                          LONG  lOffset,
                                                          LONG  lLength,
                                                          LONG  lReserved,
                                                          LONG  lResLength,
                                                          PBYTE pbBuffer )
{
    WIA_PUSH_FUNCTION(( TEXT("CPreviewScanThreadMessage::BandedDataCallback(%X,%X,%d,%X,%X,%X,%X,%X"), lReason, lStatus, lPercentComplete, lOffset, lLength, lReserved, lResLength, pbBuffer ));
    if (m_hCancelPreviewEvent && WAIT_OBJECT_0==WaitForSingleObject(m_hCancelPreviewEvent,0))
    {
        return S_FALSE;
    }

    HRESULT hr = S_OK;
    switch (lReason)
    {
    case IT_MSG_DATA_HEADER:
        {
            m_bFirstTransfer = true;
            break;
        } // IT_MSG_DATA_HEADER

    case IT_MSG_DATA:
        if (lStatus & IT_STATUS_TRANSFER_TO_CLIENT)
        {
            if (m_bFirstTransfer)
            {
                //
                // Assuming there is no way we could get a lLength smaller than the image header size
                //
                m_bFirstTransfer = false;
                m_MemoryDib.Initialize( reinterpret_cast<PBITMAPINFO>(pbBuffer) );
                lLength -= WiaUiUtil::GetBmiSize(reinterpret_cast<PBITMAPINFO>(pbBuffer));
                lOffset += WiaUiUtil::GetBmiSize(reinterpret_cast<PBITMAPINFO>(pbBuffer));
            }
            if (SUCCEEDED(hr))
            {
                //
                // Don't bother unless we have some data
                //
                if (lLength)
                {
                    //
                    // Figure out which line we are on
                    //
                    int nCurrentLine = (lOffset - m_MemoryDib.GetHeaderLength())/m_MemoryDib.GetUnpackedWidthInBytes();

                    //
                    // This should be an even number of lines.  If it isn't, things are going to get messed up
                    //
                    int nLineCount = lLength / m_MemoryDib.GetUnpackedWidthInBytes();

                    //
                    // Copy the data to our bitmap
                    //
                    m_MemoryDib.SetUnpackedData( pbBuffer, nCurrentLine, nLineCount );

                    //
                    // Tell the notification window we have some data
                    //
                    CThreadNotificationMessage::SendMessage( NotifyWindow(), CPreviewScanThreadNotifyMessage::UpdateDownloadMessage( m_dwCookie, m_MemoryDib.Bitmap() ) );
                }
            }
        } // IT_STATUS_TRANSFER_TO_CLIENT
        break;

    case IT_MSG_STATUS:
        {
        } // IT_MSG_STATUS
        break;

    case IT_MSG_TERMINATION:
        {
        } // IT_MSG_TERMINATION
        break;

    default:
        WIA_ERROR((TEXT("ImageDataCallback, unknown lReason: %d"), lReason ));
        break;
    }
    return(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\thrdmsg.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       THRDMSG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: These classes are instantiated for each message posted to the
 *               background thread.  Each is derived from CThreadMessage, and
 *               is sent to the thread message handler.
 *
 *******************************************************************************/
#ifndef __THRDMSG_H_INCLUDED
#define __THRDMSG_H_INCLUDED

#include <windows.h>
#include "bkthread.h"
#include "wia.h"
#include "memdib.h"
#include "gphelper.h"
#include "thrdntfy.h"
#include "itranspl.h"
#include "itranhlp.h"
#include "isuppfmt.h"
#include "wiadevdp.h"

// Thread queue messages
#define TQ_DESTROY               (WM_USER+1)
#define TQ_DOWNLOADIMAGE         (WM_USER+2)
#define TQ_DOWNLOADTHUMBNAIL     (WM_USER+3)
#define TQ_SCANPREVIEW           (WM_USER+4)
#define TQ_DOWNLOADERROR         (WM_USER+5)
#define TQ_DELETEIMAGES          (WM_USER+6)

// Base class for other thread messages messages
class CGlobalInterfaceTableThreadMessage : public CNotifyThreadMessage
{
private:
    DWORD m_dwGlobalInterfaceTableCookie;

private:
    // No implementation
    CGlobalInterfaceTableThreadMessage(void);
    CGlobalInterfaceTableThreadMessage &operator=( const CGlobalInterfaceTableThreadMessage & );
    CGlobalInterfaceTableThreadMessage( const CGlobalInterfaceTableThreadMessage & );

public:
    CGlobalInterfaceTableThreadMessage( int nMessage, HWND hWndNotify, DWORD dwGlobalInterfaceTableCookie );
    DWORD GlobalInterfaceTableCookie(void) const;
};



//
// Thread handler class for downloading all the camera thumbnails images
//
class CDownloadThumbnailsThreadMessage : public CNotifyThreadMessage
{
private:
    CSimpleDynamicArray<DWORD> m_Cookies;
    HANDLE                     m_hCancelEvent;

private:
    // No implementation
    CDownloadThumbnailsThreadMessage(void);
    CDownloadThumbnailsThreadMessage &operator=( const CDownloadThumbnailsThreadMessage & );
    CDownloadThumbnailsThreadMessage( const CDownloadThumbnailsThreadMessage & );

public:
    // Sole constructor
    CDownloadThumbnailsThreadMessage(
        HWND hWndNotify,
        const CSimpleDynamicArray<DWORD> &Cookies,
        HANDLE hCancelEvent
        );

    virtual ~CDownloadThumbnailsThreadMessage(void);

    HRESULT Download(void);
};


//
// Notification message that gets sent for each thumbnail download
//
class CDownloadThumbnailsThreadNotifyMessage : public CThreadNotificationMessage
{

public:
    enum COperation
    {
        DownloadAll,
        DownloadThumbnail
    };

    enum CStatus
    {
        Begin,
        Update,
        End
    };

private:
    COperation m_Operation;
    CStatus    m_Status;
    HRESULT    m_hr;
    UINT       m_nPictureCount;
    UINT       m_nCurrentPicture;
    DWORD      m_dwCookie;
    PBYTE      m_pBitmapData;
    LONG       m_nWidth;
    LONG       m_nHeight;
    LONG       m_nBitmapDataLength;
    GUID       m_guidDefaultFormat;
    LONG       m_nAccessRights;
    LONG       m_nPictureWidth;
    LONG       m_nPictureHeight;
    CAnnotationType m_AnnotationType;
    CSimpleString m_strDefExt;

private:
    CDownloadThumbnailsThreadNotifyMessage(void);
    CDownloadThumbnailsThreadNotifyMessage( const CDownloadThumbnailsThreadNotifyMessage & );
    CDownloadThumbnailsThreadNotifyMessage &operator=( const CDownloadThumbnailsThreadNotifyMessage & );

private:
    CDownloadThumbnailsThreadNotifyMessage( COperation Operation, CStatus Status, HRESULT hr, UINT nPictureCount, UINT nCurrentPicture, DWORD dwCookie, PBYTE pBitmapData, LONG nWidth, LONG nHeight, LONG nBitmapDataLength, const GUID &guidDefaultFormat, LONG nAccessRights, LONG nPictureWidth, LONG  nPictureHeight, CAnnotationType AnnotationType, const CSimpleString &strDefExt )
      : CThreadNotificationMessage( TQ_DOWNLOADTHUMBNAIL ),
        m_Operation(Operation),
        m_Status(Status),
        m_hr(hr),
        m_nPictureCount(nPictureCount),
        m_nCurrentPicture(nCurrentPicture),
        m_dwCookie(dwCookie),
        m_pBitmapData(pBitmapData),
        m_nWidth(nWidth),
        m_nHeight(nHeight),
        m_nBitmapDataLength(nBitmapDataLength),
        m_guidDefaultFormat(guidDefaultFormat),
        m_nAccessRights(nAccessRights),
        m_nPictureWidth(nPictureWidth),
        m_nPictureHeight(nPictureHeight),
        m_AnnotationType(AnnotationType),
        m_strDefExt(strDefExt)
    {
    }

public:
    virtual ~CDownloadThumbnailsThreadNotifyMessage(void)
    {
        if (m_pBitmapData)
        {
            LocalFree(m_pBitmapData);
            m_pBitmapData = NULL;
        }
    }
    COperation Operation(void) const
    {
        return m_Operation;
    }
    CStatus Status(void) const
    {
        return m_Status;
    }
    HRESULT hr(void) const
    {
        return m_hr;
    }
    UINT PictureCount(void) const
    {
        return m_nPictureCount;
    }
    UINT CurrentPicture(void) const
    {
        return m_nCurrentPicture;
    }
    DWORD Cookie(void) const
    {
        return m_dwCookie;
    }
    PBYTE BitmapData(void) const
    {
        return m_pBitmapData;
    }
    LONG Width(void) const
    {
        return m_nWidth;
    }
    LONG Height(void) const
    {
        return m_nHeight;
    }
    LONG BitmapDataLength(void) const
    {
        return m_nBitmapDataLength;
    }
    GUID DefaultFormat(void) const
    {
        return m_guidDefaultFormat;
    }
    LONG AccessRights(void) const
    {
        return m_nAccessRights;
    }
    LONG PictureWidth(void) const
    {
        return m_nPictureWidth;
    }
    LONG PictureHeight(void) const
    {
        return m_nPictureHeight;
    }
    PBYTE DetachBitmapData(void)
    {
        PBYTE pResult = m_pBitmapData;
        m_pBitmapData = NULL;
        return pResult;
    }
    CAnnotationType AnnotationType(void) const
    {
        return m_AnnotationType;
    }
    CSimpleString DefExt() const
    {
        return m_strDefExt;
    }

public:
    static CDownloadThumbnailsThreadNotifyMessage *BeginDownloadAllMessage( UINT nPictureCount )
    {
        return new CDownloadThumbnailsThreadNotifyMessage( DownloadAll, Begin, S_OK, nPictureCount, 0, 0, NULL, 0, 0, 0, IID_NULL, 0, 0, 0, AnnotationNone, TEXT("") );
    }
    static CDownloadThumbnailsThreadNotifyMessage *BeginDownloadThumbnailMessage( UINT nCurrentPicture, DWORD dwCookie )
    {
        return new CDownloadThumbnailsThreadNotifyMessage( DownloadThumbnail, Begin, S_OK, 0, nCurrentPicture, dwCookie, NULL, 0, 0, 0, IID_NULL, 0, 0, 0, AnnotationNone, TEXT("") );
    }
    static CDownloadThumbnailsThreadNotifyMessage *EndDownloadThumbnailMessage( UINT nCurrentPicture, DWORD dwCookie, PBYTE pBitmapData, LONG nWidth, LONG nHeight, LONG nBitmapDataLength, const GUID &guidFormat, LONG nAccessRights, LONG nPictureWidth, LONG nPictureHeight, CAnnotationType AnnotationType, const CSimpleString &strDefExt )
    {
        return new CDownloadThumbnailsThreadNotifyMessage( DownloadThumbnail, End, S_OK, 0, nCurrentPicture, dwCookie, pBitmapData, nWidth, nHeight, nBitmapDataLength, guidFormat, nAccessRights, nPictureWidth, nPictureHeight, AnnotationType, strDefExt );
    }
    static CDownloadThumbnailsThreadNotifyMessage *EndDownloadAllMessage( HRESULT hr )
    {
        return new CDownloadThumbnailsThreadNotifyMessage( DownloadAll, End, hr, 0, 0, 0, 0, 0, 0, NULL, IID_NULL, 0, 0, 0, AnnotationNone, TEXT("") );
    }
};


    
class CTransferItem
{
private:
    CComPtr<IWiaItem> m_pWiaItem;
    CSimpleString     m_strFilename;
    GUID              m_guidInputFormat;
    GUID              m_guidOutputFormat;
    HANDLE            m_hFile;
    LONG              m_nMediaType;

public:
    CTransferItem( IWiaItem *pWiaItem = NULL, const CSimpleString &strFilename=TEXT("") )
      : m_pWiaItem(pWiaItem),
        m_strFilename(strFilename),
        m_guidInputFormat(IID_NULL),
        m_guidOutputFormat(IID_NULL),
        m_hFile(INVALID_HANDLE_VALUE),
        m_nMediaType(TYMED_FILE)
    {
    }
    CTransferItem( const CTransferItem &other )
      : m_pWiaItem(other.WiaItem()),
        m_strFilename(other.Filename()),
        m_guidInputFormat(other.InputFormat()),
        m_guidOutputFormat(other.OutputFormat()),
        m_hFile(INVALID_HANDLE_VALUE),
        m_nMediaType(other.MediaType())
    {
        if (other.FileHandle() != INVALID_HANDLE_VALUE)
        {
            DuplicateHandle( GetCurrentProcess(), other.FileHandle(), GetCurrentProcess(), &m_hFile, 0, FALSE, DUPLICATE_SAME_ACCESS );
        }
    }
    void Destroy(void)
    {
        ClosePlaceholderFile();
        m_pWiaItem = NULL;
        m_strFilename = TEXT("");
        m_guidInputFormat = IID_NULL;
        m_guidOutputFormat = IID_NULL;
        m_nMediaType = 0;
    }
    ~CTransferItem(void)
    {
        Destroy();
    }
    CTransferItem &operator=( const CTransferItem &other )
    {
        if (&other != this)
        {
            Destroy();
            m_pWiaItem = other.WiaItem();
            m_strFilename = other.Filename();
            m_guidInputFormat = other.InputFormat();
            m_guidOutputFormat = other.OutputFormat();
            m_nMediaType = other.MediaType();
            if (other.FileHandle() != INVALID_HANDLE_VALUE)
            {
                DuplicateHandle( GetCurrentProcess(), other.FileHandle(), GetCurrentProcess(), &m_hFile, 0, FALSE, DUPLICATE_SAME_ACCESS );
            }
        }
        return *this;
    }
    bool operator==( const CTransferItem &other )
    {
        return (other.WiaItem() == WiaItem());
    }
    IWiaItem *WiaItem(void) const
    {
        return m_pWiaItem;
    }
    IWiaItem *WiaItem(void)
    {
        return m_pWiaItem;
    }
    void WiaItem( IWiaItem *pWiaItem )
    {
        m_pWiaItem = pWiaItem;
    }
    CSimpleString Filename(void) const
    {
        return m_strFilename;
    }
    void Filename( const CSimpleString &strFilename )
    {
        m_strFilename = strFilename;
    }
    GUID InputFormat(void) const
    {
        //
        // Assume IID_NULL;
        //
        GUID guidResult = m_guidInputFormat;

        if (guidResult == IID_NULL)
        {
            //
            // Get the InputFormat helpers
            //
            CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
            HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaSupportedFormats, (void**)&pWiaSupportedFormats );
            if (SUCCEEDED(hr))
            {
                //
                // Initialize the supported formats helper by telling it we are saving to a file
                //
                hr = pWiaSupportedFormats->Initialize( m_pWiaItem, TYMED_FILE );
                if (SUCCEEDED(hr))
                {
                    //
                    //  Get the default InputFormat
                    //
                    hr = pWiaSupportedFormats->GetDefaultClipboardFileFormat( &guidResult );
                }
            }
        }
        return guidResult;
    }
    GUID OutputFormat(void) const
    {
        //
        // Assume IID_NULL;
        //
        GUID guidResult = m_guidOutputFormat;

        if (guidResult == IID_NULL)
        {
            //
            // Get the OutputFormat helpers
            //
            CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
            HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaSupportedFormats, (void**)&pWiaSupportedFormats );
            if (SUCCEEDED(hr))
            {
                //
                // Initialize the supported formats helper by telling it we are saving to a file
                //
                hr = pWiaSupportedFormats->Initialize( m_pWiaItem, TYMED_FILE );
                if (SUCCEEDED(hr))
                {
                    //
                    //  Get the default OutputFormat
                    //
                    hr = pWiaSupportedFormats->GetDefaultClipboardFileFormat( &guidResult );
                }
            }
        }
        return guidResult;
    }
    void InputFormat( const GUID &guidInputFormat )
    {
        m_guidInputFormat = guidInputFormat;
    }
    void OutputFormat( const GUID &guidOutputFormat )
    {
        m_guidOutputFormat = guidOutputFormat;
    }
    HRESULT OpenPlaceholderFile(void)
    {
        HRESULT hr;
        if (m_strFilename.Length())
        {
            m_hFile = CreateFile( m_strFilename, GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL );
            if (m_hFile != INVALID_HANDLE_VALUE)
            {
                hr = S_OK;
            }
            else
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
            }
        }
        else
        {
            hr = E_FAIL;
        }
        return hr;
    }
    HRESULT ClosePlaceholderFile(void)
    {
        if (m_hFile != INVALID_HANDLE_VALUE)
        {
            CloseHandle(m_hFile);
            m_hFile = INVALID_HANDLE_VALUE;
        }
        return S_OK;
    }
    HRESULT DeleteFile(void)
    {
        ClosePlaceholderFile();
        if (m_strFilename.Length())
        {
            ::DeleteFile( m_strFilename );
        }
        return S_OK;
    }
    HANDLE FileHandle(void) const
    {
        return m_hFile;
    }
    LONG MediaType(void) const
    {
        return m_nMediaType;
    }
    void MediaType( LONG nMediaType )
    {
        m_nMediaType = nMediaType;
    }
};

//
// Thread handler class for downloading selected images
//
class CDownloadImagesThreadMessage : public CNotifyThreadMessage, public IWiaDataCallback
{
private:
    CSimpleDynamicArray<DWORD> m_Cookies;
    CSimpleDynamicArray<int>   m_Rotation;
    CSimpleString              m_strDirectory;
    CSimpleString              m_strFilename;
    GUID                       m_guidFormat;
    HANDLE                     m_hCancelDownloadEvent;
    HANDLE                     m_hPauseDownloadEvent;
    HANDLE                     m_hFilenameCreationMutex;
    CGdiPlusHelper             m_GdiPlusHelper;
    bool                       m_bStampTime;
    UINT                       m_nLastStatusUpdatePercent;
    CMemoryDib                 m_MemoryDib;
    bool                       m_bFirstTransfer;
    DWORD                      m_nCurrentCookie;
    int                        m_nCurrentPreviewImageLine;

private:
    //
    // No implementation
    //
    CDownloadImagesThreadMessage(void);
    CDownloadImagesThreadMessage &operator=( const CDownloadImagesThreadMessage & );
    CDownloadImagesThreadMessage( const CDownloadImagesThreadMessage & );

public:
    //
    // Sole constructor
    //
    CDownloadImagesThreadMessage(
        HWND hWndNotify,
        const CSimpleDynamicArray<DWORD> &Cookies,
        const CSimpleDynamicArray<int> &Rotation,
        LPCTSTR pszDirectory,
        LPCTSTR pszFilename,
        const GUID &guidFormat,
        HANDLE hCancelDownloadEvent,
        bool bStampTime,
        HANDLE hPauseDownloadEvent
        );

    virtual ~CDownloadImagesThreadMessage(void);

    //
    // Worker functions
    //
    HRESULT Download(void);

    //
    // Static helper functions
    //

    static CSimpleString GetDateString(void);
    static int ReportError( HWND hWndNotify, const CSimpleString &strMessage, int nMessageBoxFlags );
    static int ReportDownloadError( HWND hWndNotify, IWiaItem *pWiaItem, HRESULT &hr, bool bAllowContinue, bool bPageFeederActive, bool bMultipageFile, bool bMultiPageTransfer );
    static HRESULT GetListOfTransferItems( IWiaItem *pWiaItem, CSimpleDynamicArray<CTransferItem> &TransferItems );
    BOOL GetCancelledState();
    HRESULT ReserveTransferItemFilenames( CSimpleDynamicArray<CTransferItem> &TransferItems, LPCTSTR pszDirectory, LPCTSTR pszFilename, LPCTSTR pszNumberMask, bool bAllowUnNumberedFile, int &nPrevFileNumber );

    //
    // IUnknown
    //
    STDMETHODIMP QueryInterface( REFIID riid, LPVOID *ppvObject );
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    //
    // IWiaDataCallback
    //
    STDMETHODIMP BandedDataCallback( LONG, LONG, LONG, LONG, LONG, LONG, LONG, PBYTE );

    //
    // IImageTransferPluginProgressCallback methods
    //
    STDMETHODIMP SetProgressMessage( BSTR bstrMessage );
    STDMETHODIMP SetCurrentFile( UINT nIndex );
    STDMETHODIMP SetOverallPercent( UINT nPercent );
    STDMETHODIMP SetFilePercent( UINT nPercent );
    STDMETHODIMP Cancelled( UINT *bCancelled );
};


class CDownloadedFileInformation
{
private:
    bool          m_bDeleteOnError;
    CSimpleString m_strFilename;
    DWORD         m_dwCookie;
    bool          m_bIncludeInFileCount;

public:
    CDownloadedFileInformation( const CDownloadedFileInformation &other )
      : m_bDeleteOnError(other.DeleteOnError()),
        m_strFilename(other.Filename()),
        m_dwCookie(other.Cookie()),
        m_bIncludeInFileCount(other.IncludeInFileCount())
    {
    }
    CDownloadedFileInformation( const CSimpleString &strFilename, bool bDeleteOnError, DWORD dwCookie, bool bIncludeInFileCount )
      : m_bDeleteOnError(bDeleteOnError),
        m_strFilename(strFilename),
        m_dwCookie(dwCookie),
        m_bIncludeInFileCount(bIncludeInFileCount)
    {
    }
    CDownloadedFileInformation(void)
      : m_bDeleteOnError(false),
        m_strFilename(TEXT("")),
        m_dwCookie(0),
        m_bIncludeInFileCount(false)
    {
    }
    CDownloadedFileInformation &operator=( const CDownloadedFileInformation &other )
    {
        if (this != &other)
        {
            m_bDeleteOnError = other.DeleteOnError();
            m_strFilename = other.Filename();
            m_dwCookie = other.Cookie();
            m_bIncludeInFileCount = other.IncludeInFileCount();
        }
        return *this;
    }
    bool DeleteOnError(void) const
    {
        return m_bDeleteOnError;
    }
    void DeleteOnError( bool bDeleteOnError )
    {
        m_bDeleteOnError = bDeleteOnError;
    }
    const CSimpleString &Filename(void) const
    {
        return m_strFilename;
    }
    DWORD Cookie(void) const
    {
        return m_dwCookie;
    }
    bool IncludeInFileCount(void) const
    {
        return m_bIncludeInFileCount;
    }
};

class CDownloadedFileInformationList : public CSimpleDynamicArray<CDownloadedFileInformation>
{
public:
    CDownloadedFileInformationList(void)
    {
    }
    CDownloadedFileInformationList( const CDownloadedFileInformationList &other )
    {
        for (int i=0;i<other.Size();i++)
        {
            Append(other[i]);
        }
    }
    CDownloadedFileInformationList &operator=( const CDownloadedFileInformationList &other )
    {
        if (&other != this)
        {
            Destroy();
            for (int i=0;i<other.Size();i++)
            {
                Append(other[i]);
            }
        }
        return *this;
    }
    HRESULT DeleteAllFiles(void)
    {
        WIA_PUSHFUNCTION(TEXT("DeleteAllFiles"));
        HRESULT hr = S_OK;
        for (int i=0;i<Size();i++)
        {
            if ((*this)[i].DeleteOnError())
            {
                WIA_TRACE((TEXT("Calling DeleteFile on %s!"),(*this)[i].Filename().String()));
                if (!DeleteFile((*this)[i].Filename()))
                {
                    if (SUCCEEDED(hr))
                    {
                        hr = HRESULT_FROM_WIN32(GetLastError());
                    }
                    WIA_PRINTHRESULT((hr,TEXT("DeleteFile failed on %s!"),(*this)[i].Filename().String()));
                }
            }
        }
        return hr;
    }
    HRESULT GetAllFiles( CSimpleDynamicArray<CSimpleStringAnsi> &AllFiles )
    {
        AllFiles.Destroy();
        for (int i=0;i<Size();i++)
        {
            AllFiles.Append(CSimpleStringConvert::AnsiString((*this)[i].Filename()));
        }
        return S_OK;
    }
    HRESULT GetAllFiles( CSimpleDynamicArray<CSimpleStringWide> &AllFiles )
    {
        AllFiles.Destroy();
        for (int i=0;i<Size();i++)
        {
            AllFiles.Append(CSimpleStringConvert::WideString((*this)[i].Filename()));
        }
        return S_OK;
    }
    HRESULT GetUniqueFiles( CSimpleDynamicArray<CSimpleString> &UniqueFiles )
    {
        UniqueFiles.Destroy();
        for (int i=0;i<Size();i++)
        {
            if (UniqueFiles.Find((*this)[i].Filename()) < 0)
            {
                UniqueFiles.Append((*this)[i].Filename());
            }
        }
        return S_OK;
    }
    int Find( LPCTSTR pszFilename )
    {
        if (pszFilename && lstrlen(pszFilename))
        {
            for (int i=0;i<Size();i++)
            {
                if ((*this)[i].Filename().Length())
                {
                    if (!lstrcmp(pszFilename,(*this)[i].Filename()))
                    {
                        //
                        // Found a match
                        //
                        return i;
                    }
                }
            }
        }
        return -1;
    }
    int FindByFilenameOnly( LPCTSTR pszFilename )
    {
        if (pszFilename)
        {
            for (int i=0;i<Size();i++)
            {
                if ((*this)[i].Filename().Length())
                {
                    LPTSTR pszFilenameOnly = PathFindFileName( (*this)[i].Filename() );
                    if (pszFilenameOnly && !lstrcmp(pszFilenameOnly,pszFilename))
                    {
                        //
                        // Found a match
                        //
                        return i;
                    }
                }
            }
        }
        return -1;
    }
};

class CDownloadImagesThreadNotifyMessage : public CThreadNotificationMessage
{

public:
    enum COperation
    {
        DownloadAll,
        DownloadImage,
        PreviewImage
    };

    enum CStatus
    {
        Begin,
        Update,
        End
    };

private:
    COperation                     m_Operation;
    CStatus                        m_Status;
    HRESULT                        m_hr;
    UINT                           m_nPercentComplete;
    UINT                           m_nPictureCount;
    UINT                           m_nCurrentPicture;
    DWORD                          m_dwCookie;
    CSimpleString                  m_strExtendedErrorInformation;
    CSimpleString                  m_strFilename;
    CDownloadedFileInformationList m_DownloadedFileInformation;
    HBITMAP                        m_hPreviewBitmap;

private:
    CDownloadImagesThreadNotifyMessage(void);
    CDownloadImagesThreadNotifyMessage( const CDownloadImagesThreadNotifyMessage & );
    CDownloadImagesThreadNotifyMessage &operator=( const CDownloadImagesThreadNotifyMessage & );

private:
    CDownloadImagesThreadNotifyMessage( COperation Operation, CStatus Status, HRESULT hr, UINT nPercentComplete, UINT nPictureCount, UINT nCurrentPicture, DWORD dwCookie, const CSimpleString &strExtendedErrorInformation, const CSimpleString &strFilename, const CDownloadedFileInformationList *pDownloadedFileInformation, HBITMAP hPreviewBitmap )
      : CThreadNotificationMessage( TQ_DOWNLOADIMAGE ),
        m_Operation(Operation),
        m_Status(Status),
        m_hr(hr),
        m_nPercentComplete(nPercentComplete),
        m_nPictureCount(nPictureCount),
        m_nCurrentPicture(nCurrentPicture),
        m_dwCookie(dwCookie),
        m_strExtendedErrorInformation(strExtendedErrorInformation),
        m_strFilename(strFilename),
        m_hPreviewBitmap(hPreviewBitmap)
    {
        if (pDownloadedFileInformation)
        {
            m_DownloadedFileInformation = *pDownloadedFileInformation;
        }
    }

public:
    virtual ~CDownloadImagesThreadNotifyMessage(void)
    {
    }
    COperation Operation(void) const
    {
        return m_Operation;
    }
    CStatus Status(void) const
    {
        return m_Status;
    }
    HRESULT hr(void) const
    {
        return m_hr;
    }
    UINT PercentComplete(void) const
    {
        return m_nPercentComplete;
    }
    UINT PictureCount(void) const
    {
        return m_nPictureCount;
    }
    UINT CurrentPicture(void) const
    {
        return m_nCurrentPicture;
    }
    DWORD Cookie(void) const
    {
        return m_dwCookie;
    }
    CSimpleString ExtendedErrorInformation(void)
    {
        return m_strExtendedErrorInformation;
    }
    CSimpleString Filename(void)
    {
        return m_strFilename;
    }
    const CDownloadedFileInformationList &DownloadedFileInformation(void) const
    {
        return m_DownloadedFileInformation;
    }
    HBITMAP PreviewBitmap(void) const
    {
        return m_hPreviewBitmap;
    }

public:
    static CDownloadImagesThreadNotifyMessage *BeginDownloadAllMessage( UINT nPictureCount )
    {
        return new CDownloadImagesThreadNotifyMessage( DownloadAll, Begin, S_OK, 0, nPictureCount, 0, 0, TEXT(""), TEXT(""), NULL, NULL );
    }
    static CDownloadImagesThreadNotifyMessage *BeginDownloadImageMessage( UINT nCurrentPicture, DWORD dwCookie, const CSimpleString &strFilename  )
    {
        return new CDownloadImagesThreadNotifyMessage( DownloadImage, Begin, S_OK, 0, 0, nCurrentPicture, dwCookie, TEXT(""), strFilename, NULL, NULL );
    }
    static CDownloadImagesThreadNotifyMessage *UpdateDownloadImageMessage( UINT nPercentComplete )
    {
        return new CDownloadImagesThreadNotifyMessage( DownloadImage, Update, S_OK, nPercentComplete, 0, 0, 0, TEXT(""), TEXT(""), NULL, NULL );
    }
    static CDownloadImagesThreadNotifyMessage *EndDownloadImageMessage( UINT nCurrentPicture, DWORD dwCookie, const CSimpleString &strFilename, HRESULT hr )
    {
        return new CDownloadImagesThreadNotifyMessage( DownloadImage, End, hr, 100, 0, nCurrentPicture, dwCookie, TEXT(""), strFilename, NULL, NULL );
    }
    static CDownloadImagesThreadNotifyMessage *EndDownloadAllMessage( HRESULT hr, const CSimpleString &strExtendedErrorInformation, const CDownloadedFileInformationList *pDownloadedFileInformation )
    {
        return new CDownloadImagesThreadNotifyMessage( DownloadAll, End, hr, 0, 0, 0, 0, strExtendedErrorInformation, TEXT(""), pDownloadedFileInformation, NULL );
    }
    static CDownloadImagesThreadNotifyMessage *BeginPreviewMessage( DWORD dwCookie, HBITMAP hPreviewBitmap )
    {
        return new CDownloadImagesThreadNotifyMessage( PreviewImage, Begin, S_OK, 100, 0, 0, dwCookie, TEXT(""), TEXT(""), NULL, hPreviewBitmap );
    }
    static CDownloadImagesThreadNotifyMessage *UpdatePreviewMessage( DWORD dwCookie, HBITMAP hPreviewBitmap )
    {
        return new CDownloadImagesThreadNotifyMessage( PreviewImage, Update, S_OK, 100, 0, 0, dwCookie, TEXT(""), TEXT(""), NULL, hPreviewBitmap );
    }
    static CDownloadImagesThreadNotifyMessage *EndPreviewMessage( DWORD dwCookie )
    {
        return new CDownloadImagesThreadNotifyMessage( PreviewImage, End, S_OK, 100, 0, 0, dwCookie, TEXT(""), TEXT(""), NULL, NULL );
    }
};


//
// Thread handler class for deleting selected images
//
class CDeleteImagesThreadMessage : public CNotifyThreadMessage
{
private:
    CSimpleDynamicArray<DWORD> m_Cookies;
    HANDLE                     m_hCancelDeleteEvent;
    HANDLE                     m_hPauseDeleteEvent;
    bool                       m_bSlowItDown;

private:
    //
    // No implementation
    //
    CDeleteImagesThreadMessage(void);
    CDeleteImagesThreadMessage &operator=( const CDeleteImagesThreadMessage & );
    CDeleteImagesThreadMessage( const CDeleteImagesThreadMessage & );

public:
    //
    // Sole constructor
    //
    CDeleteImagesThreadMessage(
        HWND hWndNotify,
        const CSimpleDynamicArray<DWORD> &Cookies,
        HANDLE hCancelDeleteEvent,
        HANDLE hPauseDeleteEvent,
        bool bSlowItDown
        );

    virtual ~CDeleteImagesThreadMessage(void);

    //
    // Worker functions
    //
    HRESULT DeleteImages(void);
};


class CDeleteImagesThreadNotifyMessage : public CThreadNotificationMessage
{

public:
    enum COperation
    {
        DeleteAll,
        DeleteImage,
    };

    enum CStatus
    {
        Begin,
        End
    };

private:
    COperation                     m_Operation;
    CStatus                        m_Status;
    HRESULT                        m_hr;
    UINT                           m_nPictureCount;
    UINT                           m_nCurrentPicture;
    DWORD                          m_dwCookie;

private:
    CDeleteImagesThreadNotifyMessage(void);
    CDeleteImagesThreadNotifyMessage( const CDeleteImagesThreadNotifyMessage & );
    CDeleteImagesThreadNotifyMessage &operator=( const CDeleteImagesThreadNotifyMessage & );

private:
    CDeleteImagesThreadNotifyMessage( COperation Operation, CStatus Status, HRESULT hr, UINT nPictureCount, UINT nCurrentPicture, DWORD dwCookie )
      : CThreadNotificationMessage( TQ_DOWNLOADIMAGE ),
        m_Operation(Operation),
        m_Status(Status),
        m_hr(hr),
        m_nPictureCount(nPictureCount),
        m_nCurrentPicture(nCurrentPicture),
        m_dwCookie(dwCookie)
    {
    }

public:
    virtual ~CDeleteImagesThreadNotifyMessage(void)
    {
    }
    COperation Operation(void) const
    {
        return m_Operation;
    }
    CStatus Status(void) const
    {
        return m_Status;
    }
    HRESULT hr(void) const
    {
        return m_hr;
    }
    UINT PictureCount(void) const
    {
        return m_nPictureCount;
    }
    UINT CurrentPicture(void) const
    {
        return m_nCurrentPicture;
    }
    DWORD Cookie(void) const
    {
        return m_dwCookie;
    }

public:
    static CDeleteImagesThreadNotifyMessage *BeginDeleteAllMessage( UINT nPictureCount )
    {
        return new CDeleteImagesThreadNotifyMessage( DeleteAll, Begin, S_OK, nPictureCount, 0, 0 );
    }
    static CDeleteImagesThreadNotifyMessage *BeginDeleteImageMessage( UINT nCurrentPicture, DWORD dwCookie )
    {
        return new CDeleteImagesThreadNotifyMessage( DeleteImage, Begin, S_OK, 0, nCurrentPicture, dwCookie );
    }
    static CDeleteImagesThreadNotifyMessage *EndDeleteImageMessage( UINT nCurrentPicture, DWORD dwCookie, HRESULT hr )
    {
        return new CDeleteImagesThreadNotifyMessage( DeleteImage, End, hr, 0, nCurrentPicture, dwCookie );
    }
    static CDeleteImagesThreadNotifyMessage *EndDeleteAllMessage( HRESULT hr )
    {
        return new CDeleteImagesThreadNotifyMessage( DeleteAll, End, hr, 0, 0, 0 );
    }
};

//
// Notification message that gets sent when there is a download error
//
class CDownloadErrorNotificationMessage : public CThreadNotificationMessage
{

private:
    CSimpleString m_strMessage;
    HANDLE        m_hHandledMessageEvent;
    HANDLE        m_hRespondedMessageEvent;
    int           m_nMessageBoxFlags;
    int          &m_nResult;

private:
    CDownloadErrorNotificationMessage(void);
    CDownloadErrorNotificationMessage( const CDownloadErrorNotificationMessage & );
    CDownloadErrorNotificationMessage &operator=( const CDownloadErrorNotificationMessage & );

private:
    CDownloadErrorNotificationMessage( const CSimpleString &strMessage, HANDLE hHandledMessageEvent, HANDLE hRespondedMessageEvent, int nMessageBoxFlags, int &nResult )
      : CThreadNotificationMessage( TQ_DOWNLOADERROR ),
        m_strMessage(strMessage),
        m_hHandledMessageEvent(hHandledMessageEvent),
        m_hRespondedMessageEvent(hRespondedMessageEvent),
        m_nMessageBoxFlags(nMessageBoxFlags),
        m_nResult(nResult)
    {
    }

public:
    virtual ~CDownloadErrorNotificationMessage(void)
    {
    }
    CSimpleString Message(void) const
    {
        return m_strMessage;
    }
    int MessageBoxFlags(void)
    {
        return m_nMessageBoxFlags;
    }
    void Handled(void)
    {
       if (m_hHandledMessageEvent)
       {
           SetEvent(m_hHandledMessageEvent);
       }
    }
    void Response( int nResult )
    {
        m_nResult = nResult;
        if (m_hRespondedMessageEvent)
        {
            SetEvent(m_hRespondedMessageEvent);
        }
    }

public:
    static CDownloadErrorNotificationMessage *ReportDownloadError( const CSimpleString &strMessage, HANDLE hHandledMessageEvent, HANDLE hRespondedMessageEvent, int nMessageBoxFlags, int &nResult )
    {
        return new CDownloadErrorNotificationMessage( strMessage, hHandledMessageEvent, hRespondedMessageEvent, nMessageBoxFlags, nResult );
    }
};




// Thread handler class for downloading selected images
class CPreviewScanThreadMessage : public CNotifyThreadMessage, public IWiaDataCallback
{
private:
    HWND       m_hwndNotify;
    DWORD      m_dwCookie;
    CMemoryDib m_MemoryDib;
    bool       m_bFirstTransfer;
    HANDLE     m_hCancelPreviewEvent;

private:
    // No implementation
    CPreviewScanThreadMessage(void);
    CPreviewScanThreadMessage &operator=( const CPreviewScanThreadMessage & );
    CPreviewScanThreadMessage( const CPreviewScanThreadMessage & );

public:
    // Sole constructor
    CPreviewScanThreadMessage(
        HWND  hWndNotify,
        DWORD dwCookie,
        HANDLE hCancelPreviewEvent
        );

    ~CPreviewScanThreadMessage();

    HRESULT Scan(void);

    // IUnknown
    STDMETHODIMP QueryInterface( REFIID riid, LPVOID *ppvObject );
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    // IWiaDataCallback
    STDMETHODIMP BandedDataCallback( LONG, LONG, LONG, LONG, LONG, LONG, LONG, PBYTE );
};


class CPreviewScanThreadNotifyMessage : public CThreadNotificationMessage
{

public:
    enum CStatus
    {
        Begin,
        Update,
        End
    };

private:
    CStatus    m_Status;
    HRESULT    m_hr;
    DWORD      m_dwCookie;
    HBITMAP    m_hBitmap;

private:
    CPreviewScanThreadNotifyMessage(void);
    CPreviewScanThreadNotifyMessage( const CPreviewScanThreadNotifyMessage & );
    CPreviewScanThreadNotifyMessage &operator=( const CPreviewScanThreadNotifyMessage & );

private:
    CPreviewScanThreadNotifyMessage( CStatus Status, HRESULT hr, DWORD dwCookie, HBITMAP hBitmap )
      : CThreadNotificationMessage( TQ_SCANPREVIEW ),
        m_Status(Status),
        m_hr(hr),
        m_dwCookie(dwCookie),
        m_hBitmap(hBitmap)
    {
    }

public:
    virtual ~CPreviewScanThreadNotifyMessage(void)
    {
        m_hBitmap = NULL;
    }
    CStatus Status(void) const
    {
        return m_Status;
    }
    HRESULT hr(void) const
    {
        return m_hr;
    }
    DWORD Cookie(void) const
    {
        return m_dwCookie;
    }
    HBITMAP Bitmap(void) const
    {
        return m_hBitmap;
    }

public:
    static CPreviewScanThreadNotifyMessage *BeginDownloadMessage( DWORD dwCookie )
    {
        return new CPreviewScanThreadNotifyMessage( Begin, S_OK, dwCookie, NULL );
    }
    static CPreviewScanThreadNotifyMessage *UpdateDownloadMessage( DWORD dwCookie, HBITMAP hBitmap )
    {
        return new CPreviewScanThreadNotifyMessage( Update, S_OK, dwCookie, hBitmap );
    }
    static CPreviewScanThreadNotifyMessage *EndDownloadMessage( DWORD dwCookie, HBITMAP hBitmap, HRESULT hr )
    {
        return new CPreviewScanThreadNotifyMessage( End, hr, dwCookie, hBitmap );
    }
};


#endif // __THRDMSG_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\thrdntfy.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       THRDNTFY.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Class definitions for a class that is sent from the background
 *               thread to the UI thread.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "thrdntfy.h"

UINT CThreadNotificationMessage::s_nThreadNotificationMessage = 0;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\uniqfile.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       UNIQFILE.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        7/7/2000
 *
 *  DESCRIPTION: Creates a list of existing files in a directory, and ensures
 *               that there new ones are not duplicates of these.
 *
 *******************************************************************************/
#ifndef __UNIQFILE_H_INCLUDED
#define __UNIQFILE_H_INCLUDED

#include <windows.h>
#include <simstr.h>
#include <wiacrc32.h>

class CFileUniquenessInformation
{
public:
    CSimpleString m_strFileName;    // The full path to the file
    ULONGLONG     m_nFileSize;      // The size of the file
    mutable DWORD m_dwCrc;          // The file's CRC.  0 means uninitialized.  It is mutable because it can change in the accessor function

public:
    explicit CFileUniquenessInformation( LPCTSTR pszFileName=NULL, ULONGLONG nFileSize=0, DWORD dwCrc=0 )
      : m_strFileName(pszFileName),
        m_nFileSize(nFileSize),
        m_dwCrc(dwCrc)
    {
    }
    CFileUniquenessInformation( CFileUniquenessInformation &other )
      : m_strFileName(other.FileName()),
        m_nFileSize(other.FileSize()),
        m_dwCrc(other.Crc(false))
    {
    }
    CFileUniquenessInformation &operator=( const CFileUniquenessInformation &other )
    {
        if (this != &other)
        {
            m_strFileName = other.FileName();
            m_nFileSize = other.FileSize();
            m_dwCrc = other.Crc(false);
        }
        return *this;
    }
    const CSimpleString &FileName(void) const
    {
        return m_strFileName;
    }
    const ULONGLONG FileSize(void) const
    {
        return m_nFileSize;
    }
    DWORD Crc( bool bCalculate = true ) const
    {
        //
        // Only calculate it if we have to
        //
        if (!m_dwCrc && bCalculate)
        {
            m_dwCrc = WiaCrc32::GenerateCrc32File(m_strFileName);
        }
        return m_dwCrc;
    }
};

class CFileUniquenessList
{
private:
    CSimpleDynamicArray<CFileUniquenessInformation> m_FileList;

private:
    CFileUniquenessList( const CFileUniquenessList & );
    CFileUniquenessList &operator=( const CFileUniquenessList & );

public:
    CFileUniquenessList( LPCTSTR pszDirectory = NULL )
    {
        if (pszDirectory && lstrlen(pszDirectory))
        {
            InitializeFileList(pszDirectory);
        }
    }
    void InitializeFileList( LPCTSTR pszDirectory )
    {
        //
        // Empty the file list
        //
        m_FileList.Destroy();

        //
        // Save the directory name
        //
        CSimpleString strDirectory = pszDirectory;

        //
        // Make sure we have a trailing backslash
        //
        if (!strDirectory.MatchLastCharacter(TEXT('\\')))
        {
            strDirectory += TEXT("\\");
        }

        //
        //  Find all of the files in this directory
        //
        WIN32_FIND_DATA Win32FindData = {0};
        HANDLE hFind = FindFirstFile( strDirectory + CSimpleString(TEXT("*.*")), &Win32FindData );
        if (hFind != INVALID_HANDLE_VALUE)
        {
            BOOL bContinue = TRUE;
            while (bContinue)
            {
                //
                // Add the file to the list
                //
                ULARGE_INTEGER nFileSize;
                nFileSize.LowPart = Win32FindData.nFileSizeLow;
                nFileSize.HighPart = Win32FindData.nFileSizeHigh;
                m_FileList.Append( CFileUniquenessInformation( strDirectory + CSimpleString(Win32FindData.cFileName), nFileSize.QuadPart ));
                bContinue = FindNextFile( hFind, &Win32FindData );
            }
            FindClose(hFind);
        }
    }
    int FindIdenticalFile( LPCTSTR pszFileName, bool bAddIfUnsuccessful )
    {
        //
        // Assume failure
        //
        int nIndex = -1;

        //
        // Open the file for reading
        //
        HANDLE hFile = CreateFile( pszFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
        if (INVALID_HANDLE_VALUE != hFile)
        {
            //
            // Get the file size and make sure we didn't have an error
            //
            ULARGE_INTEGER nFileSize;
            nFileSize.LowPart = GetFileSize( hFile, &nFileSize.HighPart );
            if (nFileSize.LowPart != static_cast<DWORD>(-1) || GetLastError() == NO_ERROR)
            {
                //
                // We are only going to generate this file's CRC if we have to
                //
                DWORD dwCrc = 0;

                //
                // Loop through all of the files in this list
                //
                for (int i=0;i<m_FileList.Size();i++)
                {
                    //
                    // Look for ones that have have size
                    //
                    if (m_FileList[i].FileSize() == nFileSize.QuadPart)
                    {
                        //
                        // If we haven't calculated this file's CRC, do so now and save it
                        //
                        if (!dwCrc)
                        {
                            dwCrc = WiaCrc32::GenerateCrc32Handle(hFile);
                        }

                        //
                        // If these files have the same size and CRC, they are identical, so quit the loop
                        //
                        if (m_FileList[i].Crc() == dwCrc)
                        {
                            nIndex = i;
                            break;
                        }
                    }
                }

                //
                // If we didn't find it in the list, add it if the caller requested it
                //
                if (nIndex == -1 && bAddIfUnsuccessful)
                {
                    m_FileList.Append( CFileUniquenessInformation( pszFileName, nFileSize.QuadPart, dwCrc ) );
                }
            }

            //
            // Close the file
            //
            CloseHandle(hFile);
        }
        return nIndex;
    }
    CSimpleString GetFileName( int nIndex )
    {
        //
        // Get the file name at index nIndex
        //
        CSimpleString strResult;
        if (nIndex >= 0 && nIndex < m_FileList.Size())
        {
            strResult = m_FileList[nIndex].FileName();
        }
        return strResult;
    }
};


#endif //__UNIQFILE_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\upquery.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       UPQUERY.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        8/21/2000
 *
 *  DESCRIPTION: Upload progress page.
 *
 *******************************************************************************/
#ifndef __UPQUERY_H_INCLUDED
#define __UPQUERY_H_INCLUDED

#include <windows.h>
#include "acqmgrcw.h"

class CCommonUploadQueryPage
{
private:
    //
    // Private data
    //
    HWND                                 m_hWnd;
    CAcquisitionManagerControllerWindow *m_pControllerWindow;
    UINT                                 m_nWiaEventMessage;

private:
    //
    // No implementation
    //
    CCommonUploadQueryPage(void);
    CCommonUploadQueryPage( const CCommonUploadQueryPage & );
    CCommonUploadQueryPage &operator=( const CCommonUploadQueryPage & );

private:
    //
    // Constructor and destructor
    //
    explicit CCommonUploadQueryPage( HWND hWnd );
    ~CCommonUploadQueryPage(void);
    void CleanupUploadWizard();
    
private:
    //
    // WM_NOTIFY handlers
    //
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnWizNext( WPARAM, LPARAM );
    LRESULT OnWizBack( WPARAM, LPARAM );
    LRESULT OnQueryInitialFocus( WPARAM, LPARAM );
    LRESULT OnEventNotification( WPARAM, LPARAM );
    LRESULT OnHyperlinkClick( WPARAM, LPARAM );

    //
    // Message handlers
    //
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );


public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam );
};

#endif //__UPQUERY_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\upquery.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       UPQUERY.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Download progress dialog.  Displays the thumbnail and download progress.
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "upquery.h"
#include "resource.h"
#include "simcrack.h"
#include "mboxex.h"
#include "runnpwiz.h"
#include "pviewids.h"
#include <wininet.h>

//
// This is the ID of the help hyperlink
//
#define STR_WORKING_WITH_PICTURES_HYPERLINK TEXT("WorkingWithPictures")

//
// This is the URL to which we navigate to display the "working with pictures" help
//
#define STR_HELP_DESTINATION TEXT("hcp://services/subsite?node=TopLevelBucket_1/Music__video__games_and_photos&topic=MS-ITS%3A%25HELP_LOCATION%25%5Cfilefold.chm%3A%3A/manage_your_pictures.htm&select=TopLevelBucket_1/Music__video__games_and_photos/photos_and_other_digital_images")

CCommonUploadQueryPage::CCommonUploadQueryPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_pControllerWindow(NULL),
    m_nWiaEventMessage(RegisterWindowMessage(STR_WIAEVENT_NOTIFICATION_MESSAGE))
{
}

CCommonUploadQueryPage::~CCommonUploadQueryPage(void)
{
    m_hWnd = NULL;
    m_pControllerWindow = NULL;
}


LRESULT CCommonUploadQueryPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Make sure this starts out NULL
    //
    m_pControllerWindow = NULL;

    //
    // Get the PROPSHEETPAGE.lParam
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pControllerWindow = reinterpret_cast<CAcquisitionManagerControllerWindow*>(pPropSheetPage->lParam);
        if (m_pControllerWindow)
        {
            m_pControllerWindow->m_WindowList.Add(m_hWnd);
        }
    }

    //
    // Bail out
    //
    if (!m_pControllerWindow)
    {
        EndDialog(m_hWnd,IDCANCEL);
        return -1;
    }

    SendDlgItemMessage( m_hWnd, IDC_TRANSFER_UPLOAD_NO, BM_SETCHECK, BST_CHECKED, 0 );

    return 0;
}


LRESULT CCommonUploadQueryPage::OnSetActive( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonUploadQueryPage::OnSetActive")));

    //
    // We do NOT want to exit on disconnect if we are on this page
    //
    m_pControllerWindow->m_OnDisconnect = 0;

    //
    // Set the buttons
    //
    if (m_pControllerWindow->m_bDisconnected)
    {
        //
        // Don't allow "back" if we've been disabled
        //
        PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_NEXT );
    }
    else
    {
        //
        // Allow finish and back
        //
        PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_NEXT|PSWIZB_BACK );

    }

    return 0;
}


void CCommonUploadQueryPage::CleanupUploadWizard()
{
    //
    // Remove the old wizard's pages and clear everything
    //
    for (UINT i=0;i<m_pControllerWindow->m_nUploadWizardPageCount;++i)
    {
        if (m_pControllerWindow->m_PublishWizardPages[i])
        {
            PropSheet_RemovePage( GetParent( m_hWnd ), 0, m_pControllerWindow->m_PublishWizardPages[i] );
        }
    }
    ZeroMemory( m_pControllerWindow->m_PublishWizardPages, sizeof(m_pControllerWindow->m_PublishWizardPages[0])*MAX_WIZ_PAGES );
    m_pControllerWindow->m_nUploadWizardPageCount = 0;

    //
    // Release the old publish wizard
    //
    if (m_pControllerWindow->m_pPublishingWizard)
    {
        IUnknown_SetSite( m_pControllerWindow->m_pPublishingWizard, NULL );
    }
    m_pControllerWindow->m_pPublishingWizard = NULL;
}

LRESULT CCommonUploadQueryPage::OnWizNext( WPARAM, LPARAM )
{
    //
    // If the user has selected a web transfer, start the web transfer wizard
    //
    m_pControllerWindow->m_bUploadToWeb = false;

    //
    // Get the next page.  Assume the finish page.
    //
    HPROPSHEETPAGE hNextPage = PropSheet_IndexToPage( GetParent(m_hWnd), m_pControllerWindow->m_nFinishPageIndex );

    //
    // Assume we aren't uploading the pictures
    //
    m_pControllerWindow->m_bUploadToWeb = false;

    //
    // Initialize the hresult
    //
    m_pControllerWindow->m_hrUploadResult = S_OK;

    //
    // Destroy the existing wizard if it exists
    //
    CleanupUploadWizard();

    //
    // If the user wants to publish these pictures
    //
    if (BST_CHECKED != SendDlgItemMessage( m_hWnd, IDC_TRANSFER_UPLOAD_NO, BM_GETCHECK, 0, 0 ))
    {
        //
        // This means we are uploading
        //
        m_pControllerWindow->m_bUploadToWeb = true;

        //
        // Assume failure
        //
        m_pControllerWindow->m_hrUploadResult = E_FAIL;

        //
        // Which wizard?
        //
        DWORD dwFlags = SHPWHF_NONETPLACECREATE | SHPWHF_NORECOMPRESS;
        LPTSTR pszWizardDefn = TEXT("InternetPhotoPrinting");

        if (BST_CHECKED == SendDlgItemMessage( m_hWnd, IDC_TRANSFER_UPLOAD_TO_WEB, BM_GETCHECK, 0, 0 ))
        {
            dwFlags = 0;
            pszWizardDefn = TEXT("PublishingWizard");
        }

        //
        // Get all of the *UNIQUE* downloaded files
        //
        CSimpleDynamicArray<CSimpleString> UniqueFiles;
        m_pControllerWindow->m_DownloadedFileInformationList.GetUniqueFiles(UniqueFiles);

        //
        // Make sure we have some files
        //
        if (UniqueFiles.Size())
        {
            //
            // Get the data object for this file set
            //
            CComPtr<IDataObject> pDataObject;
            m_pControllerWindow->m_hrUploadResult = NetPublishingWizard::CreateDataObjectFromFileList( UniqueFiles, &pDataObject );
            if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult) && pDataObject)
            {
                //
                // Create a new publishing wizard
                //
                WIA_PRINTGUID((CLSID_PublishingWizard,TEXT("CLSID_PublishingWizard")));
                WIA_PRINTGUID((IID_IPublishingWizard,TEXT("IID_IPublishingWizard")));
                m_pControllerWindow->m_hrUploadResult = CoCreateInstance( CLSID_PublishingWizard, NULL, CLSCTX_INPROC_SERVER, IID_IPublishingWizard, (void**)&m_pControllerWindow->m_pPublishingWizard );
                if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                {
                    //
                    // Initialize the publishing wizard
                    //
                    m_pControllerWindow->m_hrUploadResult = m_pControllerWindow->m_pPublishingWizard->Initialize( pDataObject, dwFlags, pszWizardDefn);
                    if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                    {
                        //
                        // Get our wizard site
                        //
                        CComPtr<IWizardSite> pWizardSite;
                        m_pControllerWindow->m_hrUploadResult = m_pControllerWindow->QueryInterface( IID_IWizardSite, (void**)&pWizardSite );
                        if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                        {
                            //
                            // Set the wizard site
                            //
                            m_pControllerWindow->m_hrUploadResult = IUnknown_SetSite( m_pControllerWindow->m_pPublishingWizard, pWizardSite );
                            if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                            {
                                //
                                // Get the publishing wizard pages
                                //
                                m_pControllerWindow->m_hrUploadResult = m_pControllerWindow->m_pPublishingWizard->AddPages( m_pControllerWindow->m_PublishWizardPages, MAX_WIZ_PAGES, &m_pControllerWindow->m_nUploadWizardPageCount );
                                if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                                {
                                    //
                                    // Loop through and add all of the pages to the property sheet
                                    //
                                    for (UINT i=0;i<m_pControllerWindow->m_nUploadWizardPageCount && SUCCEEDED(m_pControllerWindow->m_hrUploadResult);++i)
                                    {
                                        //
                                        // Make sure this is a valid page
                                        //
                                        if (m_pControllerWindow->m_PublishWizardPages[i])
                                        {
                                            //
                                            // If we can't add a page, that is an error
                                            //
                                            if (!PropSheet_AddPage( GetParent( m_hWnd ), m_pControllerWindow->m_PublishWizardPages[i] ))
                                            {
                                                WIA_ERROR((TEXT("PropSheet_AddPage failed")));
                                                m_pControllerWindow->m_hrUploadResult = E_FAIL;
                                            }
                                        }
                                        else
                                        {
                                            WIA_ERROR((TEXT("m_pControllerWindow->m_PublishWizardPages[i] was NULL")));
                                            m_pControllerWindow->m_hrUploadResult = E_FAIL;
                                        }
                                    }

                                    //
                                    // If everything is OK up till now, we can transition to the first page of the publishing wizard
                                    //
                                    if (SUCCEEDED(m_pControllerWindow->m_hrUploadResult))
                                    {
                                        hNextPage = m_pControllerWindow->m_PublishWizardPages[0];
                                    }
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("m_pControllerWindow->m_pPublishingWizard->AddPages failed")));
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("IUnknown_SetSite failed")));
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("m_pControllerWindow->QueryInterface( IID_IWizardSite ) failed")));
                        }
                    }
                    else
                    {
                        WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("m_pPublishingWizard->Initialize failed")));
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("CoCreateInstance( CLSID_PublishingWizard failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((m_pControllerWindow->m_hrUploadResult,TEXT("NetPublishingWizard::CreateDataObjectFromFileList failed")));
            }
        }
        else
        {
            m_pControllerWindow->m_hrUploadResult = E_FAIL;
            WIA_ERROR((TEXT("There were no files")));
        }


        //
        // If an error occurred, alert the user and clean up
        //
        if (FAILED(m_pControllerWindow->m_hrUploadResult))
        {
            //
            // Clean up
            //
            CleanupUploadWizard();

            //
            // Tell the user
            //
            MessageBox( m_hWnd, CSimpleString(IDS_UNABLE_TO_PUBLISH,g_hInstance), CSimpleString(IDS_ERROR_TITLE,g_hInstance), MB_ICONERROR );
        }

    }

    //
    // If we have a next page, navigate to it.
    //
    if (hNextPage)
    {
        PropSheet_SetCurSel( GetParent(m_hWnd), hNextPage, -1 );
        return -1;
    }

    return 0;
}

LRESULT CCommonUploadQueryPage::OnWizBack( WPARAM, LPARAM )
{
    PropSheet_SetCurSel( GetParent(m_hWnd), 0, m_pControllerWindow->m_nDestinationPageIndex );
    return 0;
}

LRESULT CCommonUploadQueryPage::OnQueryInitialFocus( WPARAM, LPARAM )
{
    LRESULT lResult = 0;

    if (BST_CHECKED == SendDlgItemMessage( m_hWnd, IDC_TRANSFER_UPLOAD_TO_WEB, BM_GETCHECK, 0, 0 ))
    {
        lResult = reinterpret_cast<LRESULT>(GetDlgItem( m_hWnd, IDC_TRANSFER_UPLOAD_TO_WEB ));
    }
    else if (BST_CHECKED == SendDlgItemMessage( m_hWnd, IDC_TRANSFER_UPLOAD_TO_PRINT, BM_GETCHECK, 0, 0 ))
    {
        lResult = reinterpret_cast<LRESULT>(GetDlgItem( m_hWnd, IDC_TRANSFER_UPLOAD_TO_PRINT ));
    }
    else
    {
        lResult = reinterpret_cast<LRESULT>(GetDlgItem( m_hWnd, IDC_TRANSFER_UPLOAD_NO ));
    }

    return lResult;
}

LRESULT CCommonUploadQueryPage::OnEventNotification( WPARAM, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CCommonUploadQueryPage::OnEventNotification") ));
    CGenericWiaEventHandler::CEventMessage *pEventMessage = reinterpret_cast<CGenericWiaEventHandler::CEventMessage *>(lParam);
    if (pEventMessage)
    {
        if (pEventMessage->EventId() == WIA_EVENT_DEVICE_DISCONNECTED)
        {
            if (PropSheet_GetCurrentPageHwnd(GetParent(m_hWnd)) == m_hWnd)
            {
                //
                // Disable "back"
                //
                PropSheet_SetWizButtons( GetParent(m_hWnd), PSWIZB_NEXT );
            }
        }

        //
        // Don't delete the message, it is deleted in the controller window
        //
    }
    return 0;
}

LRESULT CCommonUploadQueryPage::OnHyperlinkClick( WPARAM wParam, LPARAM lParam )
{
    LRESULT lResult = FALSE;
    NMLINK *pNmLink = reinterpret_cast<NMLINK*>(lParam);
    if (pNmLink)
    {
        WIA_TRACE((TEXT("ID: %s"),pNmLink->item.szID));
        switch (pNmLink->hdr.idFrom)
        {
        case IDC_TRANSFER_UPLOAD_HELP:
            {
                if (!lstrcmp(pNmLink->item.szID,STR_WORKING_WITH_PICTURES_HYPERLINK))
                {
                    ShellExecute( m_hWnd, NULL, STR_HELP_DESTINATION, NULL, TEXT(""), SW_SHOWNORMAL );
                }
            }
        }
    }
    return lResult;
}

LRESULT CCommonUploadQueryPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
    }
    SC_END_COMMAND_HANDLERS();
}

LRESULT CCommonUploadQueryPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_RETURN,IDC_TRANSFER_UPLOAD_HELP,OnHyperlinkClick);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_CLICK,IDC_TRANSFER_UPLOAD_HELP,OnHyperlinkClick);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZBACK,OnWizBack);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_WIZNEXT,OnWizNext);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_QUERYINITIALFOCUS,OnQueryInitialFocus);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

INT_PTR CALLBACK CCommonUploadQueryPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CCommonUploadQueryPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( m_nWiaEventMessage, OnEventNotification );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\wiaacmgr.cpp ===
// wiaacmgr.cpp : Implementation of WinMain


// Note: Proxy/Stub Information
//      To build a separate proxy/stub DLL,
//      run nmake -f wiaacmgrps.mk in the project directory.

#include "precomp.h"
#include "resource.h"
#include "wiaacmgr.h"
#include <shpriv.h>
#include <shlguid.h>
#include <stdarg.h>
#include "wiaacmgr_i.c"
#include "acqmgr.h"
#include "eventprompt.h"
#include "runwiz.h"
#include <initguid.h>

HINSTANCE g_hInstance;

#if defined(DBG_GENERATE_PRETEND_EVENT)

extern "C" int WINAPI _tWinMain( HINSTANCE hInstance, HINSTANCE /*hPrevInstance*/, LPTSTR lpCmdLine, int /*nShowCmd*/)
{
    WIA_DEBUG_CREATE( hInstance );
    SHFusionInitializeFromModuleID( hInstance, 123 );
    g_hInstance = hInstance;
    HRESULT hr = CoInitialize(NULL);
    if (SUCCEEDED(hr))
    {
        IWiaDevMgr *pIWiaDevMgr = NULL;
        hr = CoCreateInstance( CLSID_WiaDevMgr, NULL, CLSCTX_LOCAL_SERVER, IID_IWiaDevMgr, (void**)&pIWiaDevMgr );
        if (SUCCEEDED(hr))
        {
            BSTR bstrDeviceID;
            hr = pIWiaDevMgr->SelectDeviceDlgID( NULL, 0, 0, &bstrDeviceID );
            if (hr == S_OK)
            {
                CEventParameters EventParameters;
                EventParameters.EventGUID = WIA_EVENT_DEVICE_CONNECTED;
                EventParameters.strEventDescription = L"";
                EventParameters.strDeviceID = static_cast<LPCWSTR>(bstrDeviceID);
                EventParameters.strDeviceDescription = L"";
                EventParameters.ulEventType = 0;
                EventParameters.ulReserved = 0;
                EventParameters.hwndParent = NULL;
                HANDLE hThread = CAcquisitionThread::Create( EventParameters );
                if (hThread)
                    WaitForSingleObject(hThread,INFINITE);
                SysFreeString(bstrDeviceID);
            }
            pIWiaDevMgr->Release();
        }
        CoUninitialize();
    }
    SHFusionUninitialize();
    WIA_REPORT_LEAKS();
    WIA_DEBUG_DESTROY();
    return 0;
}

#else // !defined(DBG_GENERATE_PRETEND_EVENT)

const DWORD dwTimeOut = 5000; // time for EXE to be idle before shutting down
const DWORD dwPause = 1000; // time to wait for threads to finish up

// Passed to CreateThread to monitor the shutdown event
static DWORD WINAPI MonitorProc(void* pv)
{
    CExeModule* p = (CExeModule*)pv;
    p->MonitorShutdown();
    return 0;
}

LONG CExeModule::Unlock()
{
    LONG l = CComModule::Unlock();
    if (l == 0)
    {
        bActivity = true;
        SetEvent(hEventShutdown); // tell monitor that we transitioned to zero
    }
    return l;
}

//Monitors the shutdown event
void CExeModule::MonitorShutdown()
{
    while (1)
    {
        WaitForSingleObject(hEventShutdown, INFINITE);
        DWORD dwWait=0;
        do
        {
            bActivity = false;
            dwWait = WaitForSingleObject(hEventShutdown, dwTimeOut);
        } while (dwWait == WAIT_OBJECT_0);
        // timed out
        if (!bActivity && m_nLockCnt == 0) // if no activity let's really bail
        {
#if _WIN32_WINNT >= 0x0400 & defined(_ATL_FREE_THREADED)
            CoSuspendClassObjects();
            if (!bActivity && m_nLockCnt == 0)
#endif
                break;
        }
    }
    CloseHandle(hEventShutdown);
    PostThreadMessage(dwThreadID, WM_QUIT, 0, 0);
}

bool CExeModule::StartMonitor()
{
    hEventShutdown = CreateEvent(NULL, false, false, NULL);
    if (hEventShutdown == NULL)
        return false;
    DWORD dwThreadID;
    HANDLE h = CreateThread(NULL, 0, MonitorProc, this, 0, &dwThreadID);
    return (h != NULL);
}

CExeModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
    OBJECT_ENTRY(CLSID_AcquisitionManager, CAcquisitionManager)
    OBJECT_ENTRY(CLSID_MinimalTransfer, CMinimalTransfer)
    OBJECT_ENTRY(WIA_EVENT_HANDLER_PROMPT, CEventPrompt)
    OBJECT_ENTRY(CLSID_StiEventHandler, CStiEventHandler)
END_OBJECT_MAP()


LPCTSTR FindOneOf(LPCTSTR p1, LPCTSTR p2)
{
    while (p1 != NULL && *p1 != NULL)
    {
        LPCTSTR p = p2;
        while (p != NULL && *p != NULL)
        {
            if (*p1 == *p)
                return CharNext(p1);
            p = CharNext(p);
        }
        p1 = CharNext(p1);
    }
    return NULL;
}

//
// This MUST be removed before we ship.  To remove it, remove
// the define ENABLE_SETUP_LOGGING from the sources file
//
#if defined(ENABLE_SETUP_LOGGING)

void _WizardPrintLogFileMessage( LPCTSTR pszFormat, ... )
{
    //
    // The name of the log file
    //
    static const TCHAR c_szLogFileName[] = TEXT("wiaacmgr.log");

    //
    // The path to the log file
    //
    static TCHAR szLogFilePathName[MAX_PATH] = {0};
    
    //
    // If we don't have a pathname, create it
    //
    if (!lstrlen(szLogFilePathName))
    {
        if (GetWindowsDirectory( szLogFilePathName, ARRAYSIZE(szLogFilePathName) ))
        {
            lstrcat( szLogFilePathName, TEXT("\\") );
            lstrcat( szLogFilePathName, c_szLogFileName );
        }
    }

    //
    // If we still don't have a pathname, return
    //
    if (!lstrlen(szLogFilePathName))
    {
        return;
    }
    
    //
    // Add the date and time to the output string
    //
    TCHAR szMessage[1500] = {0};
    GetDateFormat( LOCALE_SYSTEM_DEFAULT, 0, NULL, TEXT("MM'/'dd'/'yy' '"), szMessage+lstrlen(szMessage), ARRAYSIZE(szMessage)-lstrlen(szMessage) );
    GetTimeFormat( LOCALE_SYSTEM_DEFAULT, 0, NULL, TEXT("HH':'mm':'ss' '"), szMessage+lstrlen(szMessage), ARRAYSIZE(szMessage)-lstrlen(szMessage) );

    //
    // Add the process ID and thread ID to the output string
    //
    wsprintf( szMessage+lstrlen(szMessage), TEXT("%08X %08X : "), GetCurrentProcessId(), GetCurrentThreadId() );

    //
    // Format the output string
    //
    va_list pArgs;
    va_start( pArgs, pszFormat );
    wvsprintf( szMessage+lstrlen(szMessage), pszFormat, pArgs );
    va_end( pArgs );
    lstrcat( szMessage, TEXT("\r\n" ) );

    //
    // Open the file
    //
    HANDLE hFile = CreateFile( szLogFilePathName, GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL );
    if (hFile)
    {
        //
        // Go to the end of the file
        //
        if (INVALID_SET_FILE_POINTER != SetFilePointer(hFile,0,NULL,FILE_END))
        {
            //
            // Write out the string
            //
            DWORD dwWritten;
            WriteFile(hFile,szMessage,lstrlen(szMessage)*sizeof(TCHAR),&dwWritten,NULL);
        }

        //
        // Close the file
        //
        CloseHandle(hFile);
    }
}

#define LOG_MESSAGE(x) _WizardPrintLogFileMessage x

#else

#define LOG_MESSAGE(x)

#endif ENABLE_SETUP_LOGGING

static HRESULT RegisterForWiaEvents( LPCWSTR pszDevice, const CLSID &clsidHandler, const IID &iidEvent, int nName, int nDescription, int nIcon, bool bDefault, bool bRegister )
{
    WIA_PUSH_FUNCTION((TEXT("RegisterForWiaEvents( device: %ws, default: %d, register: %d )"), pszDevice, bDefault, bRegister ));
    WIA_PRINTGUID((clsidHandler,TEXT("Handler:")));
    WIA_PRINTGUID((iidEvent,TEXT("Event:")));
    CComPtr<IWiaDevMgr> pWiaDevMgr;
    HRESULT hr = CoCreateInstance( CLSID_WiaDevMgr, NULL, CLSCTX_LOCAL_SERVER, IID_IWiaDevMgr, (void**)&pWiaDevMgr );
    LOG_MESSAGE((TEXT("    0x%08X CoCreateInstance( CLSID_WiaDevMgr )"), hr ));
    if (SUCCEEDED(hr))
    {
        CSimpleBStr bstrDeviceId(pszDevice);
        CSimpleBStr bstrName(CSimpleString(nName,_Module.m_hInst));
        CSimpleBStr bstrDescription(CSimpleString(nDescription,_Module.m_hInst));
        CSimpleBStr bstrIcon(CSimpleString(nIcon,_Module.m_hInst));

        WIA_TRACE((TEXT("device: %ws"), pszDevice ));
        WIA_TRACE((TEXT("name  : %ws"), bstrName.BString() ));
        WIA_TRACE((TEXT("desc  : %ws"), bstrDescription.BString() ));
        WIA_TRACE((TEXT("icon  : %ws"), bstrIcon.BString() ));

        if (bRegister)
        {
            if (bstrName.BString() && bstrDescription.BString() && bstrIcon.BString())
            {
                hr = pWiaDevMgr->RegisterEventCallbackCLSID(
                    WIA_REGISTER_EVENT_CALLBACK,
                    pszDevice ? bstrDeviceId.BString() : NULL,
                    &iidEvent,
                    &clsidHandler,
                    bstrName,
                    bstrDescription,
                    bstrIcon
                );
                LOG_MESSAGE((TEXT("    0x%08X RegisterEventCallbackCLSID( WIA_REGISTER_EVENT_CALLBACK, \"%ws\" )"), hr, bstrDeviceId.BString() ));
                if (SUCCEEDED(hr) && bDefault)
                {
                    hr = pWiaDevMgr->RegisterEventCallbackCLSID(
                        WIA_SET_DEFAULT_HANDLER,
                        pszDevice ? bstrDeviceId.BString() : NULL,
                        &iidEvent,
                        &clsidHandler,
                        bstrName,
                        bstrDescription,
                        bstrIcon
                    );
                    LOG_MESSAGE((TEXT("    0x%08X RegisterEventCallbackCLSID( WIA_SET_DEFAULT_HANDLER, \"%ws\" )"), hr, bstrDeviceId.BString() ));
                    if (FAILED(hr))
                    {
                        WIA_PRINTHRESULT((hr,TEXT("WIA_SET_DEFAULT_HANDLER failed")));
                    }
                }
                else if (FAILED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("WIA_REGISTER_EVENT_CALLBACK failed")));
                }
            }
        }
        else
        {
            hr = pWiaDevMgr->RegisterEventCallbackCLSID(
                WIA_UNREGISTER_EVENT_CALLBACK,
                pszDevice ? bstrDeviceId.BString() : NULL,
                &iidEvent,
                &clsidHandler,
                bstrName,
                bstrDescription,
                bstrIcon
            );
            LOG_MESSAGE((TEXT("    0x%08X RegisterEventCallbackCLSID( WIA_UNREGISTER_EVENT_CALLBACK, \"%ws\" )"), hr, bstrDeviceId.BString() ));
            if (FAILED(hr))
            {
                WIA_PRINTHRESULT((hr,TEXT("WIA_SET_DEFAULT_HANDLER failed")));
            }
        }
    }
    if (FAILED(hr))
    {
        WIA_PRINTHRESULT((hr,TEXT("Unable to register for the event!")));
    }
    return hr;
}


struct CRegistryEntry
{
    HKEY    hKeyParent;
    LPCTSTR pszKey;
    LPCTSTR pszValueName;
    DWORD   dwType;
    LPARAM  nValue;
    DWORD   dwSize;
    bool    bOverwrite;
};

bool SetRegistryValues( CRegistryEntry *pRegistryEntries, int nEntryCount )
{
    if (!pRegistryEntries)
    {
        return FALSE;
    }

    //
    // Assume success
    //
    bool bResult = true;

    //
    // Create the registry entries
    //
    for (int i=0;i<nEntryCount && bResult;i++)
    {
        //
        // Create or open the key
        //
        HKEY hKey = NULL;
        if (ERROR_SUCCESS == RegCreateKeyEx( pRegistryEntries[i].hKeyParent, pRegistryEntries[i].pszKey, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_READ|KEY_WRITE, NULL, &hKey, NULL ))
        {
            //
            // If we have a value
            //
            if (pRegistryEntries[i].dwType && pRegistryEntries[i].pszValueName)
            {
                //
                // If we are preventing existing values from being overwritten, check to see if the value exists
                //
                if (!pRegistryEntries[i].bOverwrite)
                {
                    //
                    // Is the value present?
                    //
                    DWORD dwType = 0, dwSize = 0;
                    if (ERROR_SUCCESS == RegQueryValueEx( hKey, pRegistryEntries[i].pszValueName, NULL, &dwType, NULL, &dwSize ))
                    {
                        //
                        // The value exists, so continue
                        //
                        continue;
                    }
                }
                if (ERROR_SUCCESS != RegSetValueEx( hKey, pRegistryEntries[i].pszValueName, NULL, pRegistryEntries[i].dwType, reinterpret_cast<CONST BYTE *>(pRegistryEntries[i].nValue), pRegistryEntries[i].dwSize ))
                {
                    bResult = false;
                }
            }
        }
    }
    return bResult;
}


/////////////////////////////////////////////////////////////////////////////
//
extern "C" int WINAPI _tWinMain(HINSTANCE hInstance,
    HINSTANCE /*hPrevInstance*/, LPTSTR lpCmdLine, int /*nShowCmd*/)
{
    //
    // Save the global hInstance
    //
    g_hInstance = hInstance;

    LOG_MESSAGE((TEXT("Entering main: %s"), GetCommandLine()));

    //
    // Create the debugger
    //
    WIA_DEBUG_CREATE( hInstance );

    //
    // this line necessary for _ATL_MIN_CRT
    //
    lpCmdLine = GetCommandLine();

    //
    // Initialize fusion
    //
    SHFusionInitializeFromModuleID( hInstance, 123 );

#if _WIN32_WINNT >= 0x0400 & defined(_ATL_FREE_THREADED)
    HRESULT hRes = CoInitializeEx(NULL, COINIT_MULTITHREADED);
#else
    HRESULT hRes = CoInitialize(NULL);
#endif

    int nRet = 0;
    if (SUCCEEDED(hRes))
    {
        _Module.Init(ObjectMap, hInstance, &LIBID_WIAACMGRLib);
        _Module.dwThreadID = GetCurrentThreadId();
        TCHAR szTokens[] = _T("-/");

        //
        // Assume we'll be running as a server
        //
        BOOL bRun = TRUE;


        //
        // Assume we won't be selecting a device and running the wizard
        //
        BOOL bRunWizard = FALSE;

        //
        // If there are no switches, we are not going to run the server
        //
        int nSwitchCount = 0;

        LPCTSTR lpszToken = FindOneOf( lpCmdLine, szTokens );
        while (lpszToken != NULL)
        {
            //
            // One more switch.  If we don't have any, we are going to do the selection dialog instead.
            //
            nSwitchCount++;

            if (lstrcmpi(lpszToken, _T("RegServer"))==0)
            {
                //
                // Register the server
                //
                LOG_MESSAGE((TEXT("Begin handling /RegServer")));
                
                hRes = _Module.UpdateRegistryFromResource(IDR_ACQUISITIONMANAGER, TRUE);
                LOG_MESSAGE((TEXT("    0x%08X _Module.UpdateRegistryFromResource(IDR_ACQUISITIONMANAGER)"), hRes ));
                
                _Module.UpdateRegistryFromResource(IDR_MINIMALTRANSFER,TRUE);
                LOG_MESSAGE((TEXT("    0x%08X _Module.UpdateRegistryFromResource(IDR_MINIMALTRANSFER)"), hRes ));
                
                _Module.UpdateRegistryFromResource(IDR_STIEVENTHANDLER,TRUE);
                LOG_MESSAGE((TEXT("    0x%08X _Module.UpdateRegistryFromResource(IDR_STIEVENTHANDLER)"), hRes ));
                
                nRet = _Module.RegisterServer(TRUE);
                LOG_MESSAGE((TEXT("    0x%08X _Module.RegisterServer(TRUE)"), nRet ));
                
                hRes = RegisterForWiaEvents( NULL, CLSID_AcquisitionManager, WIA_EVENT_DEVICE_CONNECTED, IDS_DOWNLOADMANAGER_NAME, IDS_DOWNLOADMANAGER_DESC, IDS_DOWNLOADMANAGER_ICON, false, true );
                LOG_MESSAGE((TEXT("    0x%08X RegisterForWiaEvents( WIA_EVENT_DEVICE_CONNECTED )"), hRes ));

#if defined(TESTING_STI_EVENT_HANDLER)
                hRes = RegisterForWiaEvents( NULL, CLSID_StiEventHandler, WIA_EVENT_DEVICE_CONNECTED, IDS_DOWNLOADMANAGER_NAME, IDS_DOWNLOADMANAGER_DESC, IDS_DOWNLOADMANAGER_ICON, false, true );
                MessageBox( NULL, TEXT("Test-only code"), TEXT("DEBUG"), 0 );
#endif
                
                RegisterForWiaEvents( NULL, CLSID_AcquisitionManager, GUID_ScanImage, IDS_DOWNLOADMANAGER_NAME, IDS_DOWNLOADMANAGER_DESC, IDS_DOWNLOADMANAGER_ICON, false, true );
                LOG_MESSAGE((TEXT("    0x%08X RegisterForWiaEvents( GUID_ScanImage )"), hRes ));
                
                bRun = FALSE;
                LOG_MESSAGE((TEXT("End handling /RegServer\r\n")));
                break;
            }

            if (lstrcmpi(lpszToken, _T("UnregServer"))==0)
            {
                _Module.UpdateRegistryFromResource(IDR_ACQUISITIONMANAGER, FALSE);
                _Module.UpdateRegistryFromResource(IDR_MINIMALTRANSFER,FALSE);
                nRet = _Module.UnregisterServer(TRUE);
                RegisterForWiaEvents( NULL, CLSID_AcquisitionManager, WIA_EVENT_DEVICE_CONNECTED, IDS_DOWNLOADMANAGER_NAME, IDS_DOWNLOADMANAGER_DESC, IDS_DOWNLOADMANAGER_ICON, false, false );
                RegisterForWiaEvents( NULL, CLSID_AcquisitionManager, GUID_ScanImage, IDS_DOWNLOADMANAGER_NAME, IDS_DOWNLOADMANAGER_DESC, IDS_DOWNLOADMANAGER_ICON, false, false );
                bRun = FALSE;
                break;
            }

            if (CSimpleString(lpszToken).ToUpper().Left(12)==CSimpleString(TEXT("SELECTDEVICE")))
            {
                bRunWizard = TRUE;
                bRun = FALSE;
                break;
            }

            if (CSimpleString(lpszToken).ToUpper().Left(10)==CSimpleString(TEXT("REGCONNECT")))
            {
                lpszToken = FindOneOf(lpszToken, TEXT(" "));
                WIA_TRACE((TEXT("Handling RegConnect for %s"), lpszToken ));
                hRes = RegisterForWiaEvents( CSimpleStringConvert::WideString(CSimpleString(lpszToken)), CLSID_MinimalTransfer, WIA_EVENT_DEVICE_CONNECTED, IDS_MINIMALTRANSFER_NAME, IDS_MINIMALTRANSFER_DESC, IDS_MINIMALTRANSFER_ICON, true, true );
                bRun = FALSE;
                break;
            }

            if (CSimpleString(lpszToken).ToUpper().Left(12)==CSimpleString(TEXT("UNREGCONNECT")))
            {
                lpszToken = FindOneOf(lpszToken, TEXT(" "));
                WIA_TRACE((TEXT("Handling RegUnconnect for %s"), lpszToken ));
                hRes = RegisterForWiaEvents( CSimpleStringConvert::WideString(CSimpleString(lpszToken)), CLSID_MinimalTransfer, WIA_EVENT_DEVICE_CONNECTED, IDS_MINIMALTRANSFER_NAME, IDS_MINIMALTRANSFER_DESC, IDS_MINIMALTRANSFER_ICON, false, false );
                bRun = FALSE;
                break;
            }

            lpszToken = FindOneOf(lpszToken, szTokens);
        }

        //
        // if /SelectDevice was specified, or no arguments were specified, we want to start the wizard
        //
        if (bRunWizard || !nSwitchCount)
        {
            HRESULT hr = RunWiaWizard::RunWizard( NULL, NULL, TEXT("WiaWizardSingleInstanceDeviceSelection") );
            if (FAILED(hr))
            {
                MessageBox( NULL, CSimpleString( IDS_NO_DEVICE_TEXT, g_hInstance ), CSimpleString( IDS_ERROR_TITLE, g_hInstance ), MB_ICONHAND );
            }
        }

        //
        // Otherwise run embedded
        //
        else if (bRun)
        {
            _Module.StartMonitor();
#if _WIN32_WINNT >= 0x0400 & defined(_ATL_FREE_THREADED)
            hRes = _Module.RegisterClassObjects(CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE | REGCLS_SUSPENDED);
            _ASSERTE(SUCCEEDED(hRes));
            hRes = CoResumeClassObjects();
#else
            hRes = _Module.RegisterClassObjects(CLSCTX_LOCAL_SERVER, REGCLS_MULTIPLEUSE);
#endif
            _ASSERTE(SUCCEEDED(hRes));

            MSG msg;
            while (GetMessage(&msg, 0, 0, 0))
                DispatchMessage(&msg);

            _Module.RevokeClassObjects();
        }

        _Module.Term();
        CoUninitialize();
    }
    //
    // Uninitialize fusion
    //
    SHFusionUninitialize();
    WIA_REPORT_LEAKS();
    WIA_DEBUG_DESTROY();

    LOG_MESSAGE((TEXT("Exiting main\r\n")));

    return nRet;
}


#endif // DBG_GENERATE_PRETEND_EVENT
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\thrdntfy.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       THRDNTFY.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: Class declarations for a class that is sent from the background
 *               thread to the UI thread.
 *
 *******************************************************************************/
#ifndef __THRDNTFY_H_INCLUDED
#define __THRDNTFY_H_INCLUDED

#include <windows.h>

#define STR_THREAD_NOTIFICATION_MESSAGE   TEXT("WiaDowloadManagerThreadNotificationMessage")
#define STR_WIAEVENT_NOTIFICATION_MESSAGE TEXT("WiaDowloadManagerWiaEventNotificationMessage")

//
// If the callee doesn't return this value, we delete the message data ourselves.
//
#define HANDLED_THREAD_MESSAGE 1001

class CThreadNotificationMessage
{
private:
    UINT m_nMessage;

public:
    CThreadNotificationMessage( UINT nMessage = 0 )
    : m_nMessage(nMessage)
    {
    }
    virtual ~CThreadNotificationMessage(void)
    {
    }
    UINT Message(void) const
    {
        return m_nMessage;
    }
    void Message( UINT nMessage )
    {
        m_nMessage = nMessage;
    }


private:
    static UINT s_nThreadNotificationMessage;

public:
    static void SendMessage( HWND hWnd, CThreadNotificationMessage *pThreadNotificationMessage )
    {
        if (pThreadNotificationMessage)
        {
            LRESULT lRes = 0;
            if (!s_nThreadNotificationMessage)
            {
                s_nThreadNotificationMessage = RegisterWindowMessage(STR_THREAD_NOTIFICATION_MESSAGE);
            }
            if (s_nThreadNotificationMessage)
            {
                lRes = ::SendMessage( hWnd, s_nThreadNotificationMessage, pThreadNotificationMessage->Message(), reinterpret_cast<LPARAM>(pThreadNotificationMessage) );
            }
            if (HANDLED_THREAD_MESSAGE != lRes)
            {
                delete pThreadNotificationMessage;
            }
        }
    }
};


// Some handy message crackers.  Made to resemble the ones defined in simcrack.h
#define WTM_BEGIN_THREAD_NOTIFY_MESSAGE_HANDLERS()\
CThreadNotificationMessage *_pThreadNotificationMessage = reinterpret_cast<CThreadNotificationMessage*>(lParam);\
if (_pThreadNotificationMessage)\
{

#define WTM_HANDLE_NOTIFY_MESSAGE( _msg, _handler )\
if (_pThreadNotificationMessage->Message() == (_msg))\
    {\
        _handler( _msg, _pThreadNotificationMessage );\
    }

#define WTM_END_THREAD_NOTIFY_MESSAGE_HANDLERS()\
}\
return 0

#endif //__THRDNTFY_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\wiaitem.h ===
#ifndef __WIAITEM_H_INCLUDED
#define __WIAITEM_H_INCLUDED

#include <windows.h>
#include <windowsx.h>
#include <wia.h>
#include <uicommon.h>
#include <itranhlp.h>
#include "pshelper.h"
#include "propstrm.h"
#include "resource.h"
#include "gphelper.h"
#include "wiaffmt.h"

class CWiaItem
{
public:
    //
    // Used to store the region for the scanner
    //
    struct CScanRegionSettings
    {
        SIZE  sizeResolution;
        POINT ptOrigin;
        SIZE  sizeExtent;
    };


private:
    CComPtr<IWiaItem>   m_pWiaItem;
    DWORD               m_dwGlobalInterfaceTableCookie;
    bool                m_bSelectedForDownload;
    HBITMAP             m_hBitmapImage;
    PBYTE               m_pBitmapData;
    LONG                m_nWidth;
    LONG                m_nHeight;
    LONG                m_nBitmapDataLength;
    CScanRegionSettings m_ScanRegionSettings;
    CPropertyStream     m_SavedPropertyStream;
    CPropertyStream     m_CustomPropertyStream;
    bool                m_bDeleted;
    bool                m_bAttemptedThumbnailDownload;
    mutable LONG        m_nItemType;

    CWiaItem           *m_pParent;
    CWiaItem           *m_pChildren;
    CWiaItem           *m_pNext;

    GUID                m_guidDefaultFormat;
    LONG                m_nAccessRights;
    LONG                m_nImageWidth;
    LONG                m_nImageHeight;
    int                 m_nRotationAngle;

    CSimpleStringWide   m_strwFullItemName;
    CSimpleStringWide   m_strwItemName;

    CAnnotationType     m_AnnotationType;

    CSimpleString       m_strDefExt;

private:
    // No implementation
    CWiaItem(void);
    CWiaItem( const CWiaItem & );
    CWiaItem &operator=( const CWiaItem & );

public:
    explicit CWiaItem( IWiaItem *pWiaItem )
      : m_pWiaItem(pWiaItem),
        m_dwGlobalInterfaceTableCookie(0),
        m_bSelectedForDownload(false),
        m_hBitmapImage(NULL),
        m_pBitmapData(NULL),
        m_nWidth(0),
        m_nHeight(0),
        m_nBitmapDataLength(0),
        m_pParent(NULL),
        m_pChildren(NULL),
        m_pNext(NULL),
        m_guidDefaultFormat(IID_NULL),
        m_nRotationAngle(0),
        m_nAccessRights(0),
        m_nItemType(0),
        m_nImageWidth(0),
        m_nImageHeight(0),
        m_AnnotationType(AnnotationNone),
        m_bAttemptedThumbnailDownload(false)
    {
        WIA_PUSH_FUNCTION((TEXT("CWiaItem::CWiaItem")));
        if (m_pWiaItem)
        {
            CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
            HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
            if (SUCCEEDED(hr))
            {
                hr = pGlobalInterfaceTable->RegisterInterfaceInGlobal( pWiaItem, IID_IWiaItem, &m_dwGlobalInterfaceTableCookie );
                if (SUCCEEDED(hr))
                {
                    WIA_TRACE((TEXT("IGlobalInterfaceTable::RegisterInterfaceInGlobal gave us a cookie of %d"), m_dwGlobalInterfaceTableCookie ));
                }
            }
            //
            // NOTE: This is a here to get the item name so we can delete it later
            // in response to a delete event, because there is no other way to find an item
            // since ReadMultiple will fail after the item is deleted.  This is the only item
            // property I read on the foreground thread during initialization, unfortunately.
            // but i need it immediately.  One other awful alternative would be to just walk
            // the item tree and call ReadMultiple on each item and prune the ones that return
            // WIA_ERROR_ITEM_DELETED in response to delete item event.
            //
            PropStorageHelpers::GetProperty( m_pWiaItem, WIA_IPA_FULL_ITEM_NAME, m_strwFullItemName );
            PropStorageHelpers::GetProperty( m_pWiaItem, WIA_IPA_ITEM_NAME, m_strwItemName );
        }
    }
    ~CWiaItem(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CWiaItem::~CWiaItem")));
        //
        // Remove the item from the GIT
        //
        if (m_pWiaItem)
        {
            CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;
            HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable, NULL, CLSCTX_INPROC_SERVER, IID_IGlobalInterfaceTable, (VOID**)&pGlobalInterfaceTable );
            if (SUCCEEDED(hr))
            {
                hr = pGlobalInterfaceTable->RevokeInterfaceFromGlobal( m_dwGlobalInterfaceTableCookie );
                if (SUCCEEDED(hr))
                {
                    WIA_TRACE((TEXT("IGlobalInterfaceTable::RevokeInterfaceFromGlobal succeeded on %d"), m_dwGlobalInterfaceTableCookie ));
                }
            }
        }

        // Delete the item's Thumbnail
        if (m_hBitmapImage)
        {
            DeleteObject(m_hBitmapImage);
            m_hBitmapImage = NULL;
        }

        //
        // Delete the thumbnail data
        //
        if (m_pBitmapData)
        {
            LocalFree(m_pBitmapData);
            m_pBitmapData = NULL;
        }

        //
        // NULL out all the other members
        //
        m_pWiaItem = NULL;
        m_dwGlobalInterfaceTableCookie = 0;
        m_nWidth = m_nHeight = m_nImageWidth = m_nImageHeight = m_nBitmapDataLength = 0;
        m_pParent = m_pChildren = m_pNext = NULL;
    }

    LONG ItemType(void) const
    {
        //
        // If we've already read the item type, don't read it again
        //
        if (!m_nItemType && m_pWiaItem)
        {
            (void)m_pWiaItem->GetItemType(&m_nItemType);
        }

        //
        // Return m_nItemType even if IWiaItem::GetItemType fails, because it will still be 0, which
        // also works as an error result
        //
        return m_nItemType;
    }

    bool Deleted(void) const
    {
        return m_bDeleted;
    }

    void MarkDeleted(void)
    {
        m_bDeleted = true;
        m_bSelectedForDownload = false;
    }

    bool RotationEnabled( bool bAllowUninitializedRotation=false ) const
    {
        WIA_PUSH_FUNCTION((TEXT("CWiaItem::RotationEnabled(%d)"),bAllowUninitializedRotation));

        //
        // If this image doesn't have a thumbnail AND we tried to get the thumbnail, don't allow
        // rotation even if the caller says it is OK.  This image doesn't have a thumbnail
        // because it didn't provide one, not because we don't have one yet
        //
        if (m_bAttemptedThumbnailDownload && !HasThumbnail())
        {
            return false;
        }
        //
        // If this is an uninitialized image and we are told to allow uninitialized rotation,
        // we will allow rotation, which we will discard when the image is initialized.
        //
        if (bAllowUninitializedRotation && m_guidDefaultFormat==IID_NULL && m_nImageWidth==0 && m_nImageHeight==0)
        {
            WIA_TRACE((TEXT("Uninitialized image: returning true")));
            return true;
        }
        return WiaUiUtil::CanWiaImageBeSafelyRotated( m_guidDefaultFormat, m_nImageWidth, m_nImageHeight );
    }

    bool AttemptedThumbnailDownload( bool bAttemptedThumbnailDownload )
    {
        return (m_bAttemptedThumbnailDownload = bAttemptedThumbnailDownload);
    }

    bool AttemptedThumbnailDownload() const
    {
        return m_bAttemptedThumbnailDownload;
    }

    void DiscardRotationIfNecessary(void)
    {
        WIA_PUSHFUNCTION(TEXT("CWiaItem::DiscardRotationIfNecessary"));
        //
        // After the image is initialized, we will discard the rotation angle if it turns out the
        // image cannot be rotated
        //
        if (!RotationEnabled())
        {
            WIA_TRACE((TEXT("Discarding rotation")));
            m_nRotationAngle = 0;
        }
    }

    bool IsValid(void) const
    {
        return(m_pWiaItem && m_dwGlobalInterfaceTableCookie);
    }

    CSimpleStringWide FullItemName(void) const
    {
        return m_strwFullItemName;
    }
    CSimpleStringWide ItemName(void) const
    {
        return m_strwItemName;
    }

    GUID DefaultFormat(void)
    {
        return m_guidDefaultFormat;
    }
    void DefaultFormat( const GUID &guidDefaultFormat )
    {
        m_guidDefaultFormat = guidDefaultFormat;
    }

    LONG AccessRights(void) const
    {
        return m_nAccessRights;
    }
    void AccessRights( LONG nAccessRights )
    {
        m_nAccessRights = nAccessRights;
    }

    void Rotate( bool bRight )
    {
        switch (m_nRotationAngle)
        {
        case 0:
            m_nRotationAngle = bRight ? 90 : 270;
            break;
        case 90:
            m_nRotationAngle = bRight ? 180 : 0;
            break;
        case 180:
            m_nRotationAngle = bRight ? 270 : 90;
            break;
        case 270:
            m_nRotationAngle = bRight ? 0 : 180;
            break;
        }
    }
    int Rotation(void) const
    {
        return m_nRotationAngle;
    }

    CSimpleString DefExt() const
    {
        return m_strDefExt;
    }
    const CSimpleString &DefExt( const CSimpleString &strDefExt )
    {
        return (m_strDefExt = strDefExt );
    }

    CScanRegionSettings &ScanRegionSettings(void)
    {
        return m_ScanRegionSettings;
    }
    const CScanRegionSettings &ScanRegionSettings(void) const
    {
        return m_ScanRegionSettings;
    }

    CPropertyStream &SavedPropertyStream(void)
    {
        return m_SavedPropertyStream;
    }
    const CPropertyStream &SavedPropertyStream(void) const
    {
        return m_SavedPropertyStream;
    }

    CPropertyStream &CustomPropertyStream(void)
    {
        return m_CustomPropertyStream;
    }
    const CPropertyStream &CustomPropertyStream(void) const
    {
        return m_CustomPropertyStream;
    }
    bool SelectedForDownload(void) const
    {
        return m_bSelectedForDownload;
    }
    bool SelectedForDownload( bool bSelectedForDownload )
    {
        return(m_bSelectedForDownload = bSelectedForDownload);
    }

    HBITMAP BitmapImage(void) const
    {
        return m_hBitmapImage;
    }
    HBITMAP BitmapImage( HBITMAP hBitmapImage )
    {
        if (m_hBitmapImage)
        {
            DeleteObject(m_hBitmapImage);
        }
        return(m_hBitmapImage = hBitmapImage);
    }

    PBYTE BitmapData(void) const
    {
        return m_pBitmapData;
    }
    PBYTE BitmapData( PBYTE pBitmapData )
    {
        if (m_pBitmapData)
        {
            LocalFree(m_pBitmapData);
        }
        return(m_pBitmapData = pBitmapData);
    }

    LONG Width(void) const
    {
        return m_nWidth;
    }
    LONG Width( LONG nWidth )
    {
        return (m_nWidth = nWidth);
    }

    LONG Height(void) const
    {
        return m_nHeight;
    }
    LONG Height( LONG nHeight )
    {
        return (m_nHeight = nHeight);
    }

    LONG BitmapDataLength(void) const
    {
        return m_nBitmapDataLength;
    }
    LONG BitmapDataLength( LONG nBitmapDataLength )
    {
        return (m_nBitmapDataLength = nBitmapDataLength);
    }

    LONG ImageWidth(void) const
    {
        return m_nImageWidth;
    }
    LONG ImageWidth( LONG nImageWidth )
    {
        return (m_nImageWidth = nImageWidth);
    }

    LONG ImageHeight(void) const
    {
        return m_nImageHeight;
    }
    LONG ImageHeight( LONG nImageHeight )
    {
        return (m_nImageHeight = nImageHeight);
    }

    bool HasThumbnail() const
    {
        return (m_pBitmapData && m_nWidth && m_nHeight);
    }
    
    HBITMAP CreateThumbnailFromBitmapData( HDC hDC )
    {
        //
        // Assume failure
        //
        HBITMAP hbmpResult = NULL;

        //
        // If we've already attempted to download this image
        //
        if (m_bAttemptedThumbnailDownload)
        {
            //
            // Make sure we have good data
            //
            if (m_pBitmapData && m_nWidth && m_nHeight)
            {
                //
                // Initialize the bitmap info
                //
                BITMAPINFO BitmapInfo = {0};
                BitmapInfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
                BitmapInfo.bmiHeader.biWidth = m_nWidth;
                BitmapInfo.bmiHeader.biHeight = m_nHeight;
                BitmapInfo.bmiHeader.biPlanes = 1;
                BitmapInfo.bmiHeader.biBitCount = 24;
                BitmapInfo.bmiHeader.biCompression = BI_RGB;

                //
                // Create the bitmap
                //
                PBYTE pBits = NULL;
                hbmpResult = CreateDIBSection( hDC, &BitmapInfo, DIB_RGB_COLORS, (void**)&pBits, NULL, 0 );
                if (hbmpResult)
                {
                    //
                    // Calculate the size of the bitmap data
                    //
                    LONG nSizeOfBitmapData = WiaUiUtil::Align( m_nWidth * 3, sizeof(DWORD) ) * m_nHeight;

                    //
                    // Copy the bitmap data to the bitmap.  Make sure we use the minimum of the calculated
                    // and actual length
                    //
                    CopyMemory( pBits, m_pBitmapData, WiaUiUtil::Min(nSizeOfBitmapData,m_nBitmapDataLength) );
                }
                else
                {
                    WIA_PRINTHRESULT((HRESULT_FROM_WIN32(GetLastError()),TEXT("CreateDIBSection failed!")));
                }
            }
        }

        return hbmpResult;
    }
    
    HBITMAP CreateThumbnailBitmap( HWND hWnd, CGdiPlusHelper &GdiPlusHelper, int nSizeX, int nSizeY )
    {
        //
        // Initialize the return value.  Assume failure.
        //
        HBITMAP hThumbnail = NULL;

        //
        // Only return a bitmap if we've already attempted to download one
        //
        if (m_bAttemptedThumbnailDownload)
        {
            //
            // Make sure this is a real thumbnail.  If not, we will create a fake one below.
            //
            if (HasThumbnail())
            {
                //
                // Get the client DC
                //
                HDC hDC = GetDC( hWnd );
                if (hDC)
                {
                    //
                    // Create the bitmap from the raw bitmap data
                    //
                    HBITMAP hRawBitmap = CreateThumbnailFromBitmapData( hDC );
                    if (hRawBitmap)
                    {
                        //
                        // Rotate the thumbnail
                        //
                        HBITMAP hRotatedThumbnail = NULL;
                        if (SUCCEEDED(GdiPlusHelper.Rotate( hRawBitmap, hRotatedThumbnail, Rotation())))
                        {
                            //
                            // Make sure we got a valid rotated thumbnail
                            //
                            if (hRotatedThumbnail)
                            {
                                //
                                // Try to scale the image
                                //
                                SIZE sizeScaled = {nSizeX,nSizeY};
                                ScaleImage( hDC, hRotatedThumbnail, hThumbnail, sizeScaled );
                                
                                //
                                // Nuke the rotated bitmap
                                //
                                DeleteBitmap(hRotatedThumbnail);
                            }
                        }
                        
                        //
                        // Nuke the raw bitmap
                        //
                        DeleteBitmap(hRawBitmap);
                    }

                    //
                    // Release the client DC
                    //
                    ReleaseDC( hWnd, hDC );
                }
            }
            else
            {
                WIA_PRINTGUID((m_guidDefaultFormat,TEXT("m_guidDefaultFormat")));

                //
                // Create a file format object and load the type icon
                //
                CWiaFileFormat WiaFileFormat;
                WiaFileFormat.Format( m_guidDefaultFormat );
                WiaFileFormat.Extension( m_strDefExt );
                HICON hIcon = WiaFileFormat.AcquireIcon( NULL, false );

                //
                // Make sure we have an icon
                //
                if (hIcon)
                {
                    //
                    // Create the icon thumbnail with the type icon and the name of the file
                    //
                    hThumbnail = WiaUiUtil::CreateIconThumbnail( hWnd, nSizeX, nSizeY, hIcon, CSimpleStringConvert::NaturalString(m_strwItemName) );
                    WIA_TRACE((TEXT("hThumbnail: %p"),hThumbnail));
                    
                    //
                    // Destroy the icon to prevent leaks
                    //
                    DestroyIcon(hIcon);
                }
                else
                {
                    WIA_ERROR((TEXT("Unable to get the icon")));
                }
            }
        }

        return hThumbnail;
    }


    HBITMAP CreateThumbnailBitmap( HDC hDC )
    {
        //
        // Assume failure
        //
        HBITMAP hbmpResult = NULL;

        //
        // Make sure we have good data
        //
        WIA_TRACE((TEXT("m_pBitmapData: %08X, m_nWidth: %d, m_nWidth: %d"), m_pBitmapData, m_nWidth, m_nHeight ));
        if (m_pBitmapData && m_nWidth && m_nHeight)
        {
            //
            // Initialize the bitmap info
            //
            BITMAPINFO BitmapInfo = {0};
            BitmapInfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
            BitmapInfo.bmiHeader.biWidth = m_nWidth;
            BitmapInfo.bmiHeader.biHeight = m_nHeight;
            BitmapInfo.bmiHeader.biPlanes = 1;
            BitmapInfo.bmiHeader.biBitCount = 24;
            BitmapInfo.bmiHeader.biCompression = BI_RGB;

            //
            // Create the bitmap
            //
            PBYTE pBits = NULL;
            hbmpResult = CreateDIBSection( hDC, &BitmapInfo, DIB_RGB_COLORS, (void**)&pBits, NULL, 0 );
            if (hbmpResult)
            {
                LONG nSizeOfBitmapData = WiaUiUtil::Align( m_nWidth * 3, sizeof(DWORD) ) * m_nHeight;
                CopyMemory( pBits, m_pBitmapData, WiaUiUtil::Min(nSizeOfBitmapData,m_nBitmapDataLength) );
            }
            else
            {
                WIA_PRINTHRESULT((HRESULT_FROM_WIN32(GetLastError()),TEXT("CreateDIBSection failed!")));
            }
        }
        return hbmpResult;
    }

    IWiaItem *WiaItem(void) const
    {
        return m_pWiaItem.p;
    }
    IWiaItem *WiaItem(void)
    {
        return m_pWiaItem.p;
    }

    const CWiaItem *Next(void) const
    {
        return(m_pNext);
    }
    CWiaItem *Next(void)
    {
        return(m_pNext);
    }
    CWiaItem *Next( CWiaItem *pNext )
    {
        return(m_pNext = pNext);
    }

    const CWiaItem *Children(void) const
    {
        return(m_pChildren);
    }
    CWiaItem *Children(void)
    {
        return(m_pChildren);
    }
    CWiaItem *Children( CWiaItem *pChildren )
    {
        return(m_pChildren = pChildren);
    }

    const CWiaItem *Parent(void) const
    {
        return(m_pParent);
    }
    CWiaItem *Parent(void)
    {
        return(m_pParent);
    }
    CWiaItem *Parent( CWiaItem *pParent )
    {
        return(m_pParent = pParent);
    }

    DWORD GlobalInterfaceTableCookie(void) const
    {
        return m_dwGlobalInterfaceTableCookie;
    }
    bool operator==( const CWiaItem &WiaItem )
    {
        return(WiaItem.WiaItem() == m_pWiaItem.p);
    }
    bool operator==( DWORD dwGlobalInterfaceTableCookie )
    {
        return(dwGlobalInterfaceTableCookie == GlobalInterfaceTableCookie());
    }
    
    bool IsDownloadableItemType(void) const
    {
        LONG nItemType = ItemType();
        return ((nItemType & WiaItemTypeImage) || (nItemType & WiaItemTypeVideo));
    }

    CAnnotationType AnnotationType(void) const
    {
        return m_AnnotationType;
    }
    void AnnotationType( CAnnotationType AnnotationType )
    {
        m_AnnotationType = AnnotationType;
    }

};


class CWiaItemList
{
public:
    enum CEnumEvent
    {
        CountingItems,       // Recursing tree, counting items.  nData == current count
        ReadingItemInfo      // Recursing tree, reading info.  nData == current item
    };
    
    typedef bool (*WiaItemEnumerationCallbackFunction)( CEnumEvent EnumEvent, UINT nData, LPARAM lParam, bool bForceUpdate );
    
    
private:
    CWiaItem *m_pRoot;

private:
    // No implementation
    CWiaItemList( const CWiaItemList & );
    CWiaItemList &operator=( const CWiaItemList & );

public:
    CWiaItemList(void)
    : m_pRoot(NULL)
    {
    }

    ~CWiaItemList(void)
    {
        Destroy();
    }

    void Destroy( CWiaItem *pRoot )
    {
        while (pRoot)
        {
            Destroy(pRoot->Children());
            CWiaItem *pCurr = pRoot;
            pRoot = pRoot->Next();
            delete pCurr;
        }
    }

    void Destroy(void)
    {
        Destroy(m_pRoot);
        m_pRoot = NULL;
    }

    const CWiaItem *Root(void) const
    {
        return(m_pRoot);
    }
    CWiaItem *Root(void)
    {
        return(m_pRoot);
    }
    CWiaItem *Root( CWiaItem *pRoot )
    {
        return(m_pRoot = pRoot);
    }

    int Count( CWiaItem *pFirst )
    {
        int nCount = 0;
        for (CWiaItem *pCurr = pFirst;pCurr;pCurr = pCurr->Next())
        {
            if (pCurr->IsDownloadableItemType() && !pCurr->Deleted())
                nCount++;
            nCount += Count(pCurr->Children());
        }
        return nCount;
    }
    int Count(void)
    {
        return Count(m_pRoot);
    }

    int SelectedForDownloadCount( CWiaItem *pFirst )
    {
        int nCount = 0;
        for (CWiaItem *pCurr = pFirst;pCurr;pCurr = pCurr->Next())
        {
            if (pCurr->IsDownloadableItemType() && pCurr->SelectedForDownload())
                nCount++;
            nCount += SelectedForDownloadCount(pCurr->Children());
        }
        return nCount;
    }

    int SelectedForDownloadCount(void)
    {
        return SelectedForDownloadCount(Root());
    }

    static CWiaItem *Find( CWiaItem *pRoot, const CWiaItem *pNode )
    {
        for (CWiaItem *pCurr = pRoot;pCurr;pCurr = pCurr->Next())
        {
            if (*pCurr == *pNode)
            {
                if (!pCurr->Deleted())
                {
                    return pCurr;
                }
            }
            if (pCurr->Children())
            {
                CWiaItem *pFind = Find( pCurr->Children(), pNode );
                if (pFind)
                {
                    return pFind;
                }
            }
        }
        return(NULL);
    }
    CWiaItem *Find( CWiaItem *pNode )
    {
        return(Find( m_pRoot, pNode ));
    }
    static CWiaItem *Find( CWiaItem *pRoot, IWiaItem *pItem )
    {
        for (CWiaItem *pCurr = pRoot;pCurr;pCurr = pCurr->Next())
        {
            if (pCurr->WiaItem() == pItem)
            {
                if (!pCurr->Deleted())
                {
                    return pCurr;
                }
            }
            if (pCurr->Children())
            {
                CWiaItem *pFind = Find( pCurr->Children(), pItem );
                if (pFind)
                {
                    return pFind;
                }
            }
        }
        return(NULL);
    }
    CWiaItem *Find( IWiaItem *pItem )
    {
        return(Find( m_pRoot, pItem ));
    }
    static CWiaItem *Find( CWiaItem *pRoot, LPCWSTR pwszFindName )
    {
        for (CWiaItem *pCurr = pRoot;pCurr;pCurr = pCurr->Next())
        {
            if (CSimpleStringConvert::NaturalString(CSimpleStringWide(pwszFindName)) == CSimpleStringConvert::NaturalString(pCurr->FullItemName()))
            {
                if (!pCurr->Deleted())
                {
                    return pCurr;
                }
            }
            if (pCurr->Children())
            {
                CWiaItem *pFind = Find( pCurr->Children(), pwszFindName );
                if (pFind)
                {
                    return pFind;
                }
            }
        }
        return(NULL);
    }
    CWiaItem *Find( LPCWSTR pwszFindName )
    {
        return(Find( m_pRoot, pwszFindName ));
    }
    static CWiaItem *Find( CWiaItem *pRoot, DWORD dwGlobalInterfaceTableCookie )
    {
        for (CWiaItem *pCurr = pRoot;pCurr;pCurr = pCurr->Next())
        {
            if (pCurr->GlobalInterfaceTableCookie() == dwGlobalInterfaceTableCookie)
            {
                if (!pCurr->Deleted())
                {
                    return pCurr;
                }
            }
            if (pCurr->Children())
            {
                CWiaItem *pFind = Find( pCurr->Children(), dwGlobalInterfaceTableCookie );
                if (pFind)
                {
                    return pFind;
                }
            }
        }
        return(NULL);
    }
    CWiaItem *Find( DWORD dwGlobalInterfaceTableCookie )
    {
        return(Find( m_pRoot, dwGlobalInterfaceTableCookie ));
    }
    HRESULT Add( CWiaItem *pParent, CWiaItem *pNewWiaItemNode )
    {
        WIA_PUSHFUNCTION(TEXT("CWiaItemList::Add"));
        WIA_TRACE((TEXT("Root(): 0x%08X"), Root()));
        if (pNewWiaItemNode)
        {
            if (!Root())
            {
                Root(pNewWiaItemNode);
                pNewWiaItemNode->Parent(NULL);
                pNewWiaItemNode->Children(NULL);
                pNewWiaItemNode->Next(NULL);
            }
            else
            {
                if (!pParent)
                {
                    CWiaItem *pCurr=Root();
                    while (pCurr && pCurr->Next())
                    {
                        pCurr=pCurr->Next();
                    }
                    pCurr->Next(pNewWiaItemNode);
                    pNewWiaItemNode->Next(NULL);
                    pNewWiaItemNode->Children(NULL);
                    pNewWiaItemNode->Parent(NULL);
                }
                else if (!pParent->Children())
                {
                    pParent->Children(pNewWiaItemNode);
                    pNewWiaItemNode->Next(NULL);
                    pNewWiaItemNode->Children(NULL);
                    pNewWiaItemNode->Parent(pParent);
                }
                else
                {
                    CWiaItem *pCurr=pParent->Children();
                    while (pCurr && pCurr->Next())
                    {
                        pCurr=pCurr->Next();
                    }
                    pCurr->Next(pNewWiaItemNode);
                    pNewWiaItemNode->Next(NULL);
                    pNewWiaItemNode->Children(NULL);
                    pNewWiaItemNode->Parent(pParent);
                }
            }
        }
        return S_OK;
    }

    HRESULT EnumerateItems( CWiaItem *pCurrentParent, IEnumWiaItem *pEnumWiaItem, int &nCurrentItem, WiaItemEnumerationCallbackFunction pfnWiaItemEnumerationCallback = NULL, LPARAM lParam = 0 )
    {
        WIA_PUSHFUNCTION(TEXT("CWiaItemList::EnumerateItems"));

        //
        // Assume failure
        //
        HRESULT hr = E_FAIL;

        //
        // Make sure we have a valid enumerator
        //
        if (pEnumWiaItem != NULL)
        {
            //
            // Start at the beginning
            //
            hr = pEnumWiaItem->Reset();
            while (hr == S_OK)
            {
                //
                // Get the next item
                //
                CComPtr<IWiaItem> pWiaItem;
                hr = pEnumWiaItem->Next(1, &pWiaItem, NULL);
                if (S_OK == hr)
                {
                    if (pfnWiaItemEnumerationCallback)
                    {
                        bool bContinue = pfnWiaItemEnumerationCallback( ReadingItemInfo, nCurrentItem, lParam, false );
                        if (!bContinue)
                        {
                            hr = S_FALSE;
                            break;
                        }
                    }
                    //
                    // Create a CWiaItem wrapper
                    //
                    CWiaItem *pNewWiaItem = new CWiaItem( pWiaItem );
                    if (pNewWiaItem && pNewWiaItem->WiaItem())
                    {
                        //
                        // Get the item type
                        //
                        LONG nItemType = pNewWiaItem->ItemType();
                        if (nItemType)
                        {
                            //
                            // Add it to the list
                            //
                            Add( pCurrentParent, pNewWiaItem );

                            //
                            // If it is an image, mark it as downloadeable
                            //
                            if (pNewWiaItem->IsDownloadableItemType())
                            {
                                pNewWiaItem->SelectedForDownload(true);
                                nCurrentItem++;
                                WIA_TRACE((TEXT("Found an image")));
                            }
                            //
                            // If it is not an image, mark it as downloadeable
                            //
                            else
                            {
                                pNewWiaItem->SelectedForDownload(false);
                                WIA_TRACE((TEXT("Found something that is NOT an image")));
                            }

                            //
                            // If it is a folder, enumerate its child items and recurse
                            //
                            if (nItemType & WiaItemTypeFolder)
                            {
                                CComPtr <IEnumWiaItem> pIEnumChildItem;
                                if (S_OK == pWiaItem->EnumChildItems(&pIEnumChildItem))
                                {
                                    EnumerateItems( pNewWiaItem, pIEnumChildItem, nCurrentItem, pfnWiaItemEnumerationCallback, lParam );
                                }
                            }
                        }
                    }
                }
                //
                // Since we are using S_FALSE for cancel, we need to break out of this loop and set hr to S_OK
                //
                else if (S_FALSE == hr)
                {
                    hr = S_OK;
                    break;
                }
            }
        }
        //
        // Call the callback function one more time, and force the update
        //
        if (pfnWiaItemEnumerationCallback)
        {
            bool bContinue = pfnWiaItemEnumerationCallback( ReadingItemInfo, nCurrentItem, lParam, true );
            if (!bContinue)
            {
                hr = S_FALSE;
            }
        }
        return hr;
    }

    HRESULT EnumerateAllWiaItems( IWiaItem *pWiaRootItem, WiaItemEnumerationCallbackFunction pfnWiaItemEnumerationCallback = NULL, LPARAM lParam = 0 )
    {
        //
        // Make sure we have a valid root item
        //
        if (!pWiaRootItem)
        {
            return E_INVALIDARG;
        }

        //
        // Enumerate the child items
        //
        CComPtr<IEnumWiaItem> pEnumItem;
        HRESULT hr = pWiaRootItem->EnumChildItems(&pEnumItem);
        if (hr == S_OK)
        {
            int nItemCount = 0;
            //
            // Entry point to the recursive enumeration routine
            //
            hr = EnumerateItems( NULL, pEnumItem, nItemCount, pfnWiaItemEnumerationCallback, lParam );
        }
        return hr;
    }
};


#endif // __WIAITEM_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\wndlist.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WNDLIST.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/28/1999
 *
 *  DESCRIPTION: List of windows.  Lets us broadcast a message to all of the windows
 *               in the list at one time.
 *
 *******************************************************************************/

#ifndef __WNDLIST_H_INCLUDED
#define __WNDLIST_H_INCLUDED

class CWindowList : public CSimpleLinkedList<HWND>
{
private:
    // No implementation
    CWindowList( const CWindowList & );
    CWindowList &operator=( const CWindowList & );

public:
    CWindowList(void)
    {
    }
    void Add( HWND hWnd )
    {
        Prepend(hWnd);
    }
    void PostMessage( UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        for (Iterator i=Begin();i != End();++i)
        {
            ::PostMessage( *i, uMsg, wParam, lParam );
        }
    }
    void SendMessage( UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        for (Iterator i=Begin();i != End();++i)
        {
            ::SendMessage( *i, uMsg, wParam, lParam );
        }
    }
};

#endif // __WNDLIST_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\geturldlg.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       GETURLDLG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4/5/2000
 *
 *  DESCRIPTION: Get an URL
 *
 *******************************************************************************/
#ifndef __GETURL_H_INCLUDED
#define __GETURL_H_INCLUDED

#include <windows.h>
#include <simcrack.h>
#include <simstr.h>
#include "mru.h"

class CGetCommunityUrlDialog
{
public:
    class CData
    {
    private:
        CSimpleString m_strUrl;
        CSimpleString m_strMruRegistryKey;
        CSimpleString m_strMruRegistryValue;

    private:
        CData( const CData & );
        CData &operator=( const CData & );

    public:
        CData(void)
        {
        }
        ~CData(void)
        {
        }

        void MruRegistryKey( LPCTSTR pszMruRegistryKey )
        {
            m_strMruRegistryKey = pszMruRegistryKey;
        }
        void MruRegistryValue( LPCTSTR pszMruRegistryValue )
        {
            m_strMruRegistryValue = pszMruRegistryValue;
        }
        void Url( LPCTSTR pszUrl )
        {
            m_strUrl = pszUrl;
        }

        CSimpleString MruRegistryValue(void) const
        {
            return m_strMruRegistryValue;
        }
        CSimpleString MruRegistryKey(void) const
        {
            return m_strMruRegistryKey;
        }
        CSimpleString Url(void) const
        {
            return m_strUrl;
        }
    };

private:
    HWND            m_hWnd;
    CData          *m_pData;
    CMruStringList  m_UrlListMru;

private:
    CGetCommunityUrlDialog(void);
    CGetCommunityUrlDialog( const CGetCommunityUrlDialog & );
    CGetCommunityUrlDialog &operator=( const CGetCommunityUrlDialog & );

private:
    explicit CGetCommunityUrlDialog( HWND hWnd )
      : m_hWnd(hWnd),
        m_pData(NULL)
    {
    }
    ~CGetCommunityUrlDialog(void)
    {
        m_hWnd = NULL;
        m_pData = NULL;
    }

protected:
    LRESULT OnInitDialog( WPARAM, LPARAM lParam )
    {
        m_pData = reinterpret_cast<CData*>(lParam);
        if (!m_pData)
        {
            EndDialog( m_hWnd, IDCANCEL );
        }
        if (m_pData->MruRegistryKey().Length() && m_pData->MruRegistryValue().Length())
        {
            m_UrlListMru.Read( HKEY_CURRENT_USER, m_pData->MruRegistryKey(), m_pData->MruRegistryValue() );
        }
        m_UrlListMru.PopulateComboBox( GetDlgItem( m_hWnd, IDC_URL_LIST ) );
        SendDlgItemMessage( m_hWnd, IDC_URL_LIST, CB_SETCURSEL, 0, 0 );
        return 0;
    }
    void OnOK( WPARAM, LPARAM )
    {
        CSimpleString strUrl;
        strUrl.GetWindowText( GetDlgItem( m_hWnd, IDC_URL_LIST ) );
        if (strUrl.Length())
        {
            m_UrlListMru.Add(strUrl);
            m_pData->Url(strUrl);
            m_UrlListMru.Write( HKEY_CURRENT_USER, m_pData->MruRegistryKey(), m_pData->MruRegistryValue() );
            EndDialog( m_hWnd, IDOK );
        }
    }
    void OnCancel( WPARAM, LPARAM )
    {
        EndDialog( m_hWnd, IDCANCEL );
    }
    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_COMMAND_HANDLERS()
        {
            SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
            SC_HANDLE_COMMAND(IDOK,OnOK);
        }
        SC_END_COMMAND_HANDLERS();
    }

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CGetCommunityUrlDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};

#endif // __GETURL_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\module.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       MODULE.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        3/30/2000
 *
 *  DESCRIPTION: Main module definitions
 *
 *******************************************************************************/
#ifndef _MAIN_H_INCLUDED
#define _MAIN_H_INCLUDED

//
// DLL instance
//
extern HINSTANCE g_hInstance;

void DllAddRef();
void DllRelease();

extern "C" STDMETHODIMP DllRegisterServer(void);
extern "C" STDMETHODIMP DllUnregisterServer(void);
extern "C" STDMETHODIMP DllCanUnloadNow(void);
extern "C" STDAPI DllGetClassObject( const CLSID &clsid, const IID &iid, void **ppvObject );

#endif // _MAIN_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\module.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       MODULE.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4/11/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <initguid.h>
#include <itranspl.h>
#include <uicommon.h>
#include "postplug.h"

// DLL reference counters
static LONG g_nServerLocks = 0;
static LONG g_nComponents  = 0;

// DLL instance
HINSTANCE g_hInstance;

//
// {81ED8E37-5938-46BF-B504-3539FB345419}
//
DEFINE_GUID(CLSID_HttpPostPlugin,0x81ED8E37,0x5938,0x46BF,0xB5,0x04,0x35,0x39,0xFB,0x34,0x54,0x19);


void DllAddRef()
{
    InterlockedIncrement(&g_nComponents);
}

void DllRelease()
{
    InterlockedDecrement(&g_nComponents);
}



class CHttpPostPluginClassFactory : public IClassFactory
{
private:
    LONG   m_cRef;

public:
    // IUnknown
    STDMETHODIMP QueryInterface( const IID &iid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    // IClassFactory
    STDMETHODIMP CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject );
    STDMETHODIMP LockServer( BOOL bLock );

    CHttpPostPluginClassFactory()
    : m_cRef(1)
    {
    }
    ~CHttpPostPluginClassFactory(void)
    {
    }
};



STDMETHODIMP CHttpPostPluginClassFactory::QueryInterface( const IID &iid, void **ppvObject )
{
    if ((iid==IID_IUnknown) || (iid==IID_IClassFactory))
    {
        *ppvObject = static_cast<LPVOID>(this);
    }
    else
    {
        *ppvObject = NULL;
        return(E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CHttpPostPluginClassFactory::AddRef(void)
{
    return(InterlockedIncrement(&m_cRef));
}


STDMETHODIMP_(ULONG) CHttpPostPluginClassFactory::Release(void)
{
    if (InterlockedDecrement(&m_cRef)==0)
    {
        delete this;
        return 0;
    }
    return(m_cRef);
}


STDMETHODIMP CHttpPostPluginClassFactory::CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject )
{
    // No aggregation supported
    if (pUnknownOuter)
    {
        return(CLASS_E_NOAGGREGATION);
    }
    CHttpPostPlugin *pHttpPostPlugin = new CHttpPostPlugin();
    if (!pHttpPostPlugin)
    {
        return(E_OUTOFMEMORY);
    }

    HRESULT hr = pHttpPostPlugin->QueryInterface( iid, ppvObject );

    pHttpPostPlugin->Release();

    return (hr);
}

STDMETHODIMP CHttpPostPluginClassFactory::LockServer(BOOL bLock)
{
    if (bLock)
    {
        InterlockedIncrement(&g_nServerLocks);
    }
    else
    {
        InterlockedDecrement(&g_nServerLocks);
    }
    return(S_OK);
}


extern "C" BOOL WINAPI DllMain( HINSTANCE hinst, DWORD dwReason, LPVOID lpReserved )
{
    switch (dwReason)
    {
    case DLL_PROCESS_ATTACH:
        g_hInstance = hinst;
        DisableThreadLibraryCalls(hinst);
        break;
    }
    return(TRUE);
}


extern "C" STDMETHODIMP DllRegisterServer(void)
{
    return WiaUiUtil::InstallInfFromResource( g_hInstance, "RegDllCommon" );
}

extern "C" STDMETHODIMP DllUnregisterServer(void)
{
    return WiaUiUtil::InstallInfFromResource( g_hInstance, "UnregDllCommon" );
}

extern "C" STDMETHODIMP DllCanUnloadNow(void)
{
    if (g_nServerLocks == 0 && g_nComponents == 0)
    {
        return S_OK;
    }
    else
    {
        return S_FALSE;
    }
}

extern "C" STDAPI DllGetClassObject( const CLSID &clsid, const IID &iid, void **ppvObject )
{
    // Make sure we've got a valid ppvObject
    if (!ppvObject)
    {
        return(E_INVALIDARG);
    }

    // Make sure this component is supplied by this server
    if (clsid != CLSID_HttpPostPlugin)
    {
        return (CLASS_E_CLASSNOTAVAILABLE);
    }

    // Create class factory
    CHttpPostPluginClassFactory *pHttpPostPluginClassFactory = new CHttpPostPluginClassFactory;
    if (!pHttpPostPluginClassFactory)
    {
        return (E_OUTOFMEMORY);
    }

    HRESULT hr = pHttpPostPluginClassFactory->QueryInterface( iid, ppvObject );
    pHttpPostPluginClassFactory->Release();

    return (hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\precomp.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       PRECOMP.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        3/30/2000
 *
 *  DESCRIPTION: Precompiled header
 *
 *******************************************************************************/
#ifndef __PRECOMP_H_INCLUDED
#define __PRECOMP_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include <wininet.h>
#include <uicommon.h>
#include "resource.h"
#include "module.h"

#endif // __PRECOMP_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\postplug.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       POSTPLUG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4/11/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __POSTPLUG_H_INCLUDED
#define __POSTPLUG_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include <objbase.h>
#include "itranspl.h"
#include "progressinfo.h"
#include "httpfilepost.h"


class CHttpPostPlugin : public IImageTransferPlugin
{
private:
    class CCommunityInfo
    {
    private:
        CSimpleString m_strCommunityId;
        CSimpleString m_strCommunityName;

    public:
        CCommunityInfo(void)
        {
        }
        CCommunityInfo( const CCommunityInfo &other )
          : m_strCommunityId(other.CommunityId()),
            m_strCommunityName(other.CommunityName())
        {
        }
        CCommunityInfo( const CSimpleString &strCommunityId, const CSimpleString &strCommunityName )
          : m_strCommunityId(strCommunityId),
            m_strCommunityName(strCommunityName)
        {
        }
        ~CCommunityInfo(void)
        {
        }
        CCommunityInfo &operator=( const CCommunityInfo &other )
        {
            if (&other != this)
            {
                m_strCommunityId = other.CommunityId();
                m_strCommunityName = other.CommunityName();
            }
            return *this;
        }
        CSimpleString CommunityId(void) const
        {
            return m_strCommunityId;
        }
        CSimpleString CommunityName(void) const
        {
            return m_strCommunityName;
        }
        void CommunityId( const CSimpleString &strCommunityId )
        {
            m_strCommunityId = strCommunityId;
        }
        void CommunityName( const CSimpleString &strCommunityName )
        {
            m_strCommunityName = strCommunityName;
        }
    };

private:
    LONG                                  m_cRef;
    IImageTransferPluginProgressCallback *m_pImageTransferPluginProgressCallback;
    LONG                                  m_nCurrentPluginId;
    CHttpFilePoster                       m_HttpFilePoster;
    CSimpleDynamicArray<CCommunityInfo>   m_CommunityInfoArray;

    static bool EnumCommunitiesProc( CSimpleReg::CValueEnumInfo &enumInfo );
    static UINT ProgressProc( CProgressInfo *pProgressInfo );

public:
    ~CHttpPostPlugin(void);
    CHttpPostPlugin(void);

    //
    // IUnknown
    //
    STDMETHODIMP QueryInterface( REFIID riid, LPVOID *ppvObject );
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    //
    // IImageTransferPlugin
    //
    STDMETHODIMP GetPluginCount( ULONG *pnCount );
    STDMETHODIMP GetPluginName( ULONG nPluginId, BSTR *pbstrName );
    STDMETHODIMP GetPluginDescription( ULONG nPluginId, BSTR *pbstrDescription );
    STDMETHODIMP GetPluginIcon( ULONG nPluginId, HICON *phIcon, int nWidth, int nHeight );
    STDMETHODIMP OpenConnection( HWND hwndParent, ULONG nPluginId, IImageTransferPluginProgressCallback *pImageTransferPluginProgressCallback );
    STDMETHODIMP AddFile( BSTR bstrFilename, BSTR bstrDescription, const GUID &guidImageFormat, BOOL bDelete );
    STDMETHODIMP TransferFiles( BSTR bstrGlobalDescription );
    STDMETHODIMP OpenDestination(void);
    STDMETHODIMP CloseConnection(void);
};

#endif //__POSTPLUG_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by postplug.rc
//
#define IDS_MSN_COMMUNITIES             1
#define IDS_MSN_COMMUNITIES_DESCRIPTION 2
#define IDS_COMMUNITIES_MRU_VALUE       3
#define IDS_COMMUNITIES_MRU_KEY         4
#define IDS_COMMUNITIES_ACCOUNTS_KEY    5
#define IDS_COMMUNITY_PICK              6
#define IDI_MSN_COMMUNITIES             103
#define IDD_GETCOMMUNITY                104
#define IDC_COMBO1                      1000
#define IDC_URL_LIST                    1000
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        105
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\httpfilepost.h ===
//+-----------------------------------------------------------------------
//
//  Microsoft Network
//  Copyright (C) Microsoft Corporation, 1998
//
//  File:      HttpFilePost.h
//
//  Contents:
//  CHttpFilePoster
//  RFC 1867 file uploader
//
//  Posts files to an http server using HTTP POST
//
//  Links:
//  RFC 1867 - Form-based File Upload in HTML : http://www.ietf.org/rfc/rfc1867.txt
//  RFC 1521 - MIME (Multipurpose Internet Mail Extensions) : http://www.ietf.org/rfc/rfc1521.txt
//
//
//  Author:    Noah Booth (noahb@microsoft.com)
//
//  Revision History:
//
//     2/5/99   noahb   created
//    4/25/99   noahb   integration with MSN communities
//------------------------------------------------------------------------

#ifndef __HttpFilePost_h__
#define __HttpFilePost_h__


//#define _USE_INTERNAL_UTF8_ALWAYS_


#include "stdstring.h"
#include "utf8str.h"
#include <list>
#include <map>

class CUploaderException
{
public:
    DWORD m_dwError;

    CUploaderException(DWORD dwError = 0) : m_dwError(dwError) { }
    ~CUploaderException() { }
};

void ThrowUploaderException(DWORD dwError = -1);

#define UPLOAD_BUFFSIZE 4096
#define DELAY_TIME  0

#define UPLOAD_WM_THREAD_DONE WM_USER + 0x10


//forward decl
class CHFPInternetSession;
class CProgressInfo;


#define DEFAULT_DESCRIPTION ""

class CHttpFilePoster
{
public:
    static bool Mbcs2UTF8(CStdString& strOut, const CStdString& strIn)
    {
        USES_CONVERSION;
        bool bResult = false;

#ifdef _USE_INTERNAL_UTF8_ALWAYS_

        CUTF8String strUTF8(A2W(strIn.c_str()));
        strOut = (LPSTR) strUTF8;

        bResult = SUCCEEDED(strUTF8.GetError());
#else
        DWORD cbLength = 0;
        CHAR* psz = NULL;
        WCHAR* pwsz = A2W(strIn.c_str());

        cbLength = WideCharToMultiByte(CP_UTF8, 0, pwsz, -1, NULL, 0, NULL, NULL);
        if(cbLength)
        {
            psz = (CHAR*) _alloca(cbLength);
            cbLength = WideCharToMultiByte(CP_UTF8, 0, pwsz, -1, psz, cbLength, NULL, NULL);
            if(cbLength)
            {
                strOut = psz;
                bResult = true;
            }
            else
            {
                strOut = "";
            }
        }

        if(!bResult)    // only use CUTF8String if WideCharToMultiByte fails..
        {
            CUTF8String strUTF8(A2W(strIn.c_str()));
            strOut = (LPSTR) strUTF8;

            bResult = SUCCEEDED(strUTF8.GetError());

        }
#endif
        return bResult;
    }


protected:

    class CUploaderFile
    {
    public:
        CStdString  strName;        //UTF8 filename
        CStdString  strNameMBCS;    //MBCS Filename
        DWORD       dwSize;
        CStdString  strMime;        //UTF8
        CStdString  strTitle;       //UTF8
        CStdString  strDescription; //UTF8
        BOOL        bDelete;

        CUploaderFile(
            const CStdString& n,
            DWORD s,
            BOOL b,
            const CStdString& m,
            const CStdString& t,
            const CStdString& d = DEFAULT_DESCRIPTION) :
                strNameMBCS(n),
                bDelete(b),
                dwSize(s)
        {
            Mbcs2UTF8(strName, n);
            Mbcs2UTF8(strMime, m);
            Mbcs2UTF8(strTitle, t);
            Mbcs2UTF8(strDescription, d);
        }

        CUploaderFile(const CUploaderFile& o)
        {
            *this = o;
        }

        CUploaderFile& operator=(const CUploaderFile& o)
        {
            strName = o.strName;
            strNameMBCS = o.strNameMBCS;
            dwSize = o.dwSize;
            bDelete = o.bDelete;
            strMime = o.strMime;
            strTitle = o.strTitle;
            strDescription = o.strDescription;
            return *this;
        }

        ~CUploaderFile()
        {
            if(bDelete)
            {
                DeleteFileA(strName.c_str());
            }
        }
    };

    typedef std::list<CUploaderFile*> TFileList;
    typedef std::map<CStdString, CStdString> TFormMap;
    typedef TFileList::iterator TFileListIterator;
    typedef TFormMap::iterator TFormMapIterator;


    HWND        m_hWndParent;

    INTERNET_BUFFERS    m_internetBuffers;



    CStdString      m_strHttpServer;
    CStdString      m_strHttpObject;

    INTERNET_PORT   m_nPort;
    DWORD           m_dwService;
    bool            m_bSinglePost;

    CUploaderFile*  m_pCurrentFile;



    DWORD       m_dwFileCount;  //total number of files to be posted
    DWORD       m_dwTotalFileBytes; //total bumber of bytes to be posted from files, filenames, and mimetype strings

    TFileList   m_listFiles;
    TFormMap    m_mapFormData;

    DWORD_PTR   m_dwContext;


    HINTERNET   m_hSession;
    HINTERNET   m_hConnection;
    HINTERNET   m_hFile;


    int         m_iStatus;

    CStdString      m_strLoginName;
    CStdString      m_strPassword;

    CStdString      m_strSitePostingURL;

    CStdString      m_strBoundary;

    CStdString      m_strFileHeader;
    CStdString      m_strFilePost;
    CStdString      m_strCommonPost;



protected:

    void DrainSocket();
    bool QueryStatusCode(DWORD& dwStatus);


    bool CleanupUpload();
    bool BeginUpload(CProgressInfo* pProgressInfo);
    bool FinishUpload();
    bool CancelUpload();


    bool Connect();
    bool Disconnect();

    bool Startup();
    bool Shutdown();

    bool IsConnected();

    bool RequestHead();


    CStdString GetMimeType(const CHAR* szFilename);

    DWORD   CalculateContentLength(CUploaderFile* pFile);

    bool SendString(const CStdString& str);

    bool SendHeader();
    bool SendFile(CProgressInfo* pProgressInfo);

    static UINT UploadThreadProc(LPVOID pThis);

    static void CALLBACK InternetStatusCallback(
        HINTERNET hInternet,
        DWORD_PTR dwContext,
        DWORD dwInternetStatus,
        LPVOID lpvStatusInformation,
        DWORD dwStatusInformationLength
        );

    bool FindTempDirectory();

    void GenBoundaryString();

    void BuildFilePostHeader(CUploaderFile* pFile);
    void BuildFilePost(CUploaderFile* pFile);
    void BuildCommonPost();

    void CrackPostingURL();

public:

    enum
    {
        HFP_UNINITIALIZED,
        HFP_INITIALIZED,
        HFP_TRANSFERING,
        HFP_TRANSFERCOMPLETE
    };


    CHttpFilePoster();
    ~CHttpFilePoster();


    int GetStatus() { return m_iStatus; }

    bool DoUpload(CProgressInfo* pProgress);
    HRESULT ForegroundUpload( CProgressInfo *pProgressInfo );

    DWORD   AddFile(const CStdString& strFileName, const CStdString& strTitle, DWORD dwFileSize, BOOL bDelete);
    DWORD   RemoveFile(DWORD dwIndex);
    void    AddFormData(const CStdString& strName, const CStdString& strValue);
    DWORD   GetFileCount();
    void    Reset();


    void Initialize(const CStdString& strPostingURL, HWND hWndParent)
    {   SetPostingURL(strPostingURL); SetParentWnd(hWndParent); }

    inline DWORD GetTotalSize() { return m_dwTotalFileBytes; }

    void SetPostingURL(const CStdString& strURL) {
        m_strSitePostingURL = strURL;
        if(strURL != "") CrackPostingURL();
    }
    CStdString GetPostingURL(void) { return m_strSitePostingURL; }

    void SetParentWnd(HWND hWnd) { m_hWndParent = hWnd; }
    HWND GetParentWnd(void) { return m_hWndParent; }

};

#endif //__HttpFilePost_h__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\postplug.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       POSTPLUG.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        4/11/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <atlimpl.cpp>
#include "postplug.h"
#include "geturldlg.h"
#include "simreg.h"

CHttpPostPlugin::~CHttpPostPlugin(void)
{
    DllRelease();
}


CHttpPostPlugin::CHttpPostPlugin()
  : m_cRef(1),
    m_pImageTransferPluginProgressCallback(NULL),
    m_nCurrentPluginId(-1)
{
    DllAddRef();
    CSimpleReg reg( HKEY_CURRENT_USER, CSimpleString( IDS_COMMUNITIES_ACCOUNTS_KEY, g_hInstance ), false, KEY_READ );
    if (reg.OK())
    {
        reg.EnumValues( EnumCommunitiesProc, reinterpret_cast<LPARAM>(this) );
    }
    m_CommunityInfoArray.Append( CCommunityInfo( TEXT(""), CSimpleString( IDS_COMMUNITY_PICK, g_hInstance ) ) );
}

bool CHttpPostPlugin::EnumCommunitiesProc( CSimpleReg::CValueEnumInfo &enumInfo )
{
    CHttpPostPlugin *pHttpPostPlugin = reinterpret_cast<CHttpPostPlugin*>(enumInfo.lParam);
    if (pHttpPostPlugin)
    {
        if (enumInfo.strName.Length())
        {
            CSimpleString strCommunityName = enumInfo.reg.Query( enumInfo.strName, TEXT("") );
            if (strCommunityName.Length())
            {
                pHttpPostPlugin->m_CommunityInfoArray.Append( CCommunityInfo( enumInfo.strName, strCommunityName ) );
            }
        }
    }
    return true;
}

STDMETHODIMP CHttpPostPlugin::QueryInterface( REFIID riid, LPVOID *ppvObject )
{
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IImageTransferPlugin*>(this);
    }
    else if (IsEqualIID( riid, IID_IImageTransferPlugin ))
    {
        *ppvObject = static_cast<IImageTransferPlugin*>(this);
    }
    else
    {
        *ppvObject = NULL;
        return (E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CHttpPostPlugin::AddRef()
{
    return(InterlockedIncrement(&m_cRef));
}


STDMETHODIMP_(ULONG) CHttpPostPlugin::Release()
{
    LONG nRefCount = InterlockedDecrement(&m_cRef);
    if (!nRefCount)
    {
        delete this;
    }
    return(nRefCount);
}

STDMETHODIMP CHttpPostPlugin::GetPluginCount( ULONG *pnCount )
{
    if (!pnCount)
    {
        return E_POINTER;
    }
    //
    // Calculate the number of plugin destinations this object provides
    //
    *pnCount = m_CommunityInfoArray.Size();
    return S_OK;
}

STDMETHODIMP CHttpPostPlugin::GetPluginName( ULONG nPluginId, BSTR *pbstrName )
{
    if (nPluginId >= m_CommunityInfoArray.Size())
    {
        return E_INVALIDARG;
    }
    if (!pbstrName)
    {
        return E_POINTER;
    }

    *pbstrName = SysAllocString(CSimpleStringConvert::WideString(CSimpleString().Format( IDS_MSN_COMMUNITIES, g_hInstance, m_CommunityInfoArray[nPluginId].CommunityName().String())));
    if (NULL == *pbstrName)
    {
        return E_OUTOFMEMORY;
    }
    return S_OK;
}

STDMETHODIMP CHttpPostPlugin::GetPluginDescription( ULONG nPluginId, BSTR *pbstrDescription )
{
    if (nPluginId >= m_CommunityInfoArray.Size())
    {
        return E_INVALIDARG;
    }
    if (!pbstrDescription)
    {
        return E_POINTER;
    }
    *pbstrDescription = SysAllocString(CSimpleStringConvert::WideString(CSimpleString(IDS_MSN_COMMUNITIES_DESCRIPTION,g_hInstance)));
    if (NULL == *pbstrDescription)
    {
        return E_OUTOFMEMORY;
    }
    return S_OK;
}

STDMETHODIMP CHttpPostPlugin::GetPluginIcon( ULONG nPluginId, HICON *phIcon, int nWidth, int nHeight )
{
    if (nPluginId >= m_CommunityInfoArray.Size())
    {
        return E_INVALIDARG;
    }
    if (!phIcon)
    {
        return E_POINTER;
    }
    *phIcon = NULL;
    HICON hIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDI_MSN_COMMUNITIES), IMAGE_ICON, nWidth, nHeight, LR_DEFAULTCOLOR ));
    if (hIcon)
    {
        *phIcon = CopyIcon(hIcon);
        DestroyIcon(hIcon);
    }
    return S_OK;
}

STDMETHODIMP CHttpPostPlugin::OpenConnection( HWND hwndParent, ULONG nPluginId, IImageTransferPluginProgressCallback *pImageTransferPluginProgressCallback )
{
    if (nPluginId >= m_CommunityInfoArray.Size())
    {
        return E_INVALIDARG;
    }
    if (!pImageTransferPluginProgressCallback)
    {
        return E_INVALIDARG;
    }
    m_pImageTransferPluginProgressCallback = pImageTransferPluginProgressCallback;
    m_nCurrentPluginId = nPluginId;

    if (!m_CommunityInfoArray[m_nCurrentPluginId].CommunityId().Length())
    {
        CGetCommunityUrlDialog::CData UrlData;
        UrlData.MruRegistryKey( CSimpleString( IDS_COMMUNITIES_MRU_KEY, g_hInstance ) );
        UrlData.MruRegistryValue( CSimpleString( IDS_COMMUNITIES_MRU_VALUE, g_hInstance ) );

        INT_PTR nResult = DialogBoxParam( g_hInstance, MAKEINTRESOURCE(IDD_GETCOMMUNITY), hwndParent, CGetCommunityUrlDialog::DialogProc, reinterpret_cast<LPARAM>(&UrlData) );
        if (IDOK != nResult)
        {
            return S_FALSE;
        }
        //
        // Save the community id
        //
        int nCurrentPluginId = m_CommunityInfoArray.Append( CCommunityInfo( UrlData.Url(), UrlData.Url() ) );
        if (nCurrentPluginId < 0)
        {
            return E_OUTOFMEMORY;
        }
        m_nCurrentPluginId = nCurrentPluginId;
    }

    //
    // Open the connection with m_HttpFilePoster
    //
    CSimpleStringAnsi straCommunityId = CSimpleStringConvert::AnsiString(m_CommunityInfoArray[m_nCurrentPluginId].CommunityId());
    if (straCommunityId.Length())
    {
        m_HttpFilePoster.Initialize( "http://content.communities.msn.com/isapi/fetch.dll?action=add_photo", hwndParent );
        m_HttpFilePoster.AddFormData( "ID_Community", straCommunityId.String());
        m_HttpFilePoster.AddFormData( "ID_Topic", "1" );
    }
    else
    {
        return E_OUTOFMEMORY;
    }
    return S_OK;
}

STDMETHODIMP CHttpPostPlugin::AddFile( BSTR bstrFilename, BSTR bstrDescription, const GUID &guidImageFormat, BOOL bDelete )
{
    HRESULT hr;
    CSimpleString strFilename(CSimpleStringConvert::NaturalString(CSimpleStringWide(bstrFilename)));
    if (strFilename.Length())
    {
        HANDLE hFile = CreateFile( strFilename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
        if (hFile)
        {
            DWORD dwFileSize = GetFileSize( hFile, NULL );
            if (dwFileSize)
            {
                //
                // What do we get back from addfile?  Are there any errors?
                //
                m_HttpFilePoster.AddFile( CStdString(CSimpleStringConvert::AnsiString(strFilename).String()),
                                          CStdString(CSimpleStringConvert::AnsiString(CSimpleStringWide(bstrDescription)).String()),
                                          dwFileSize,
                                          bDelete );
                hr = S_OK;
            }
            else
            {
                hr = E_FAIL;
            }

            CloseHandle(hFile);
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }
    }
    else
    {
        hr = E_INVALIDARG;
    }
    return hr;
}

UINT CHttpPostPlugin::ProgressProc( CProgressInfo *pProgressInfo )
{
    UINT bCancelled = FALSE;
    if (pProgressInfo)
    {
        CHttpPostPlugin *pHttpPostPlugin = reinterpret_cast<CHttpPostPlugin*>(pProgressInfo->lParam);
        if (pHttpPostPlugin)
        {
            CComPtr<IImageTransferPluginProgressCallback> pImageTransferPluginProgressCallback = pHttpPostPlugin->m_pImageTransferPluginProgressCallback;
            if (pImageTransferPluginProgressCallback)
            {
                switch (pProgressInfo->dwStatus)
                {
                case TRANSFER_SESSION_INITIATE:
                    pImageTransferPluginProgressCallback->SetOverallPercent(0);
                    pImageTransferPluginProgressCallback->SetFilePercent(0);
                    break;
                case TRANSFER_FILE_INITATE:
                    pImageTransferPluginProgressCallback->SetCurrentFile(pProgressInfo->dwDoneFiles);
                    pImageTransferPluginProgressCallback->SetOverallPercent(pProgressInfo->dwOverallPercent);
                    pImageTransferPluginProgressCallback->SetFilePercent(0);
                    break;
                case TRANSFER_FILE_TRANSFERING:
                    pImageTransferPluginProgressCallback->SetFilePercent(pProgressInfo->dwCurrentPercent);
                    pImageTransferPluginProgressCallback->SetOverallPercent(pProgressInfo->dwOverallPercent);
                    break;
                case TRANSFER_FILE_COMPLETE:
                    pImageTransferPluginProgressCallback->SetFilePercent(100);
                    pImageTransferPluginProgressCallback->SetOverallPercent(pProgressInfo->dwOverallPercent);
                    break;
                case TRANSFER_SESSION_COMPLETE:
                    pImageTransferPluginProgressCallback->SetFilePercent(100);
                    pImageTransferPluginProgressCallback->SetOverallPercent(100);
                    break;

                }
                if (!SUCCEEDED(pImageTransferPluginProgressCallback->Cancelled(&bCancelled)))
                {
                    bCancelled = FALSE;
                }
            }
        }
    }
    return bCancelled ? 1 : 0;
}

STDMETHODIMP CHttpPostPlugin::TransferFiles( BSTR bstrGlobalDescription )
{
    CProgressInfo ProgressInfo;
    ProgressInfo.pfnProgress = ProgressProc;
    ProgressInfo.lParam = reinterpret_cast<LPARAM>(this);
    m_HttpFilePoster.AddFormData( "Message_Body", CSimpleStringConvert::AnsiString(CSimpleStringWide(bstrGlobalDescription)).String());
    return m_HttpFilePoster.ForegroundUpload(&ProgressInfo);
}

STDMETHODIMP CHttpPostPlugin::OpenDestination(void)
{
    CSimpleStringAnsi straCommunityId = CSimpleStringConvert::AnsiString(m_CommunityInfoArray[m_nCurrentPluginId].CommunityId());
    if (straCommunityId.Length())
    {
        CSimpleStringAnsi strDestinationExecuteName("http://content.communities.msn.com/isapi/fetch.dll?action=get_album&ID_Topic=1&ID_Community=");
        if (strDestinationExecuteName.Length())
        {
            strDestinationExecuteName += straCommunityId;
            if (strDestinationExecuteName.Length())
            {
                ShellExecuteA( NULL, "open", strDestinationExecuteName, "", "", SW_SHOWNORMAL );
                return S_OK;
            }
        }
    }
    return E_FAIL;
}

STDMETHODIMP CHttpPostPlugin::CloseConnection(void)
{
    m_pImageTransferPluginProgressCallback = NULL;
    m_nCurrentPluginId = -1;
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\httpfilepost.cpp ===
//+-----------------------------------------------------------------------
//
//  Microsoft Network
//  Copyright (C) Microsoft Corporation, 1998
//
//  File:      HttpFilePost.cpp
//
//  Contents:
//  CHttpFilePoster
//  RFC 1867 file uploader
//
//  Posts files to an http server using HTTP POST
//
//  Links:
//  RFC 1867 - Form-based File Upload in HTML : http://www.ietf.org/rfc/rfc1867.txt
//  RFC 1521 - MIME (Multipurpose Internet Mail Extensions) : http://www.ietf.org/rfc/rfc1521.txt
//
//
//  Author:    Noah Booth (noahb@microsoft.com)
//
//  Revision History:
//
//     2/5/99   noahb   created
//    4/25/99   noahb   integration with MSN communities
//   3/7/2000   noahb   integration with communities File Cabinet
//------------------------------------------------------------------------

#include "precomp.h"
#pragma hdrstop
#include <string>
#include <list>
#include <map>
#include "stdstring.h"
#include "HTTPFilePost.h"
#include "ProgressInfo.h"

using namespace std;

#pragma warning(disable: 4800)  //disable warning forcing int to bool

static void ThrowUploaderException(DWORD dwError /* = -1 */)
{
    if(dwError == -1)
        dwError = GetLastError();
    throw( new CUploaderException(dwError) );
}

#define USER_AGENT "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT 5.0) [MSN Communities Active-X Upload Control]"

#define UNKNOWN_MIME "application/octet-stream"     //MIME type to use when there is none other available
#define REG_CONTENT_TYPE "Content Type"             //name of content type value in HKCR key for a file extension
#define CONTENT_TYPE "Content-Type"                 //HTTP header content type string

#define MULTI_PART_FORM_DATA "multipart/form-data"



static DWORD g_dwContentLength = 0;

static const char szFileHeaderContentDisp[] = "Content-Disposition: form-data; name=\"Attachment\"; filename=\"";
static const char szFileHeaderContentType[] = "\"\r\nContent-Type: ";
static const char szFileHeaderEnd[] = "\r\n\r\n";
static const char szFormHeaderContentDisp[] = "Content-Disposition: form-data; name=\"";
static const char szFormHeaderEnd[] = "\"\r\n\r\n";
static const char szTitleName[] = "Subject";
static const char szDescName[] = "Message_Body";


#define CHECK_ERROR(cond, err) if (!(cond)) {pszErr=(err); goto done;}
#define SAFERELEASE(p) if (p) {(p)->Release(); p = NULL;} else ;


CHttpFilePoster::CHttpFilePoster()
{
    m_iStatus = HFP_UNINITIALIZED;
    m_dwFileCount = 0;
    m_dwTotalFileBytes = 0;

    m_bSinglePost = false;

    Initialize("", NULL);

    m_hSession = NULL;
    m_hConnection = NULL;
    m_hFile = NULL;
    m_dwContext = reinterpret_cast<DWORD_PTR>(this);

    GenBoundaryString();
}

CHttpFilePoster::~CHttpFilePoster()
{
    Reset(); //free up memory allocated for the file list

    if(m_hFile)
        InternetCloseHandle(m_hFile);
    if(m_hConnection)
        InternetCloseHandle(m_hConnection);
    if(m_hSession)
        InternetCloseHandle(m_hSession);
}

//generate a boundary string that is statistically likely to be unique
void CHttpFilePoster::GenBoundaryString()
{
    GUID guid;
    char buff[128];
    static const char* szFormat = "-------------%08lx-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x-------------";

    ::CoCreateGuid(&guid);

    //TODO: remove sprintf
    sprintf(buff, szFormat,
        guid.Data1, guid.Data2, guid.Data3,
        guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3],
        guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]);

    m_strBoundary = buff;

}

void CHttpFilePoster::BuildFilePostHeader(CUploaderFile* pFile)
{
    m_strFileHeader = "\r\n" + m_strBoundary + "\r\n";
    m_strFileHeader += szFileHeaderContentDisp;
    m_strFileHeader += pFile->strName;
    m_strFileHeader += szFileHeaderContentType;
    m_strFileHeader += pFile->strMime;
    m_strFileHeader += szFileHeaderEnd;
}

void CHttpFilePoster::BuildFilePost(CUploaderFile* pFile)
{
    m_strFilePost = "\r\n" + m_strBoundary + "\r\n";
    m_strFilePost += szFormHeaderContentDisp;
    m_strFilePost += szTitleName;
    m_strFilePost += szFormHeaderEnd;
    m_strFilePost += pFile->strTitle;
    m_strFilePost += "\r\n" + m_strBoundary + "\r\n";
    m_strFilePost += szFormHeaderContentDisp;
    m_strFilePost += szDescName;
    m_strFilePost += pFile->strDescription;
    m_strFilePost += szFormHeaderEnd;
    m_strFilePost += "\r\n";

}

void CHttpFilePoster::BuildCommonPost()
{
    WIA_PUSHFUNCTION(TEXT("CHttpFilePoster::BuildCommonPost"));
    TFormMapIterator begin = m_mapFormData.begin();
    TFormMapIterator end = m_mapFormData.end();
    TFormMapIterator it;

    m_strCommonPost = "";

    if(m_mapFormData.size())
    {
        for(it = begin; it != end; it++)
        {
            WIA_TRACE((TEXT("%hs: %hs"), it->first.c_str(), it->second.c_str()));
            m_strCommonPost += m_strBoundary + "\r\n";
            m_strCommonPost += szFormHeaderContentDisp;
            m_strCommonPost += it->first;
            m_strCommonPost += szFormHeaderEnd;
            m_strCommonPost += it->second;
            m_strCommonPost += "\r\n";
        }
    }

    m_strCommonPost += m_strBoundary + "--\r\n";
}




void CHttpFilePoster::CrackPostingURL()
{
    BOOL bResult;
    char szBuff[INTERNET_MAX_URL_LENGTH];
    char* pBuffer = szBuff;
    DWORD dwBufLen = INTERNET_MAX_URL_LENGTH;


    m_strHttpServer = "";
    m_strHttpObject = "";


    DWORD dwFlags = ICU_NO_ENCODE | ICU_DECODE | ICU_NO_META | ICU_ENCODE_SPACES_ONLY | ICU_BROWSER_MODE;

    bResult = InternetCanonicalizeUrlA(m_strSitePostingURL.c_str(), pBuffer, &dwBufLen, dwFlags);
    if(!bResult)
    {
        pBuffer = new char[dwBufLen];
        if(pBuffer)
        {
            bResult = InternetCanonicalizeUrlA(m_strSitePostingURL.c_str(), pBuffer, &dwBufLen, dwFlags);
        }
    }

    if(bResult)
    {
        //INTERNET_PORT iPort;
        URL_COMPONENTSA urlComponents;

        char szServer[INTERNET_MAX_URL_LENGTH + 1];
        char szObject[INTERNET_MAX_URL_LENGTH + 1];

        dwFlags = 0;

        ZeroMemory(&urlComponents, sizeof(urlComponents));
        urlComponents.dwStructSize = sizeof(urlComponents);

        urlComponents.dwHostNameLength = INTERNET_MAX_URL_LENGTH;
        urlComponents.lpszHostName = szServer;
        urlComponents.dwUrlPathLength = INTERNET_MAX_URL_LENGTH;
        urlComponents.lpszUrlPath = szObject;

        bResult = InternetCrackUrlA(pBuffer, 0, dwFlags, &urlComponents);
        if(bResult)
        {
            m_strHttpServer = szServer;
            m_strHttpObject = szObject;
        }
    }

    ATLASSERT(bResult);

    if(pBuffer != szBuff)
        delete pBuffer;

}



bool CHttpFilePoster::Connect()
{
    bool bResult = false;

    ATLASSERT(m_hSession);

    if(!m_hConnection)
    {
        m_hConnection = InternetConnectA(
            m_hSession,                     //session
            m_strHttpServer.c_str(),        //server name
            INTERNET_INVALID_PORT_NUMBER,   //server port
            NULL,                           //user name
            NULL,                           //password
            INTERNET_SERVICE_HTTP,
            0,                              //flags
            m_dwContext);

        if(m_hConnection)
            bResult = true;
    }
    if(!bResult)
        ThrowUploaderException();
    return bResult;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
bool CHttpFilePoster::Disconnect()
{
    if(NULL == m_hConnection || InternetCloseHandle(m_hConnection))
    {
        m_hConnection = NULL;
        return true;
    }
    else
    {
        return false;
    }
}

bool CHttpFilePoster::Startup()
{
    ATLASSERT(m_hSession == NULL);
    //CWaitCursor wait;

    DWORD dwAccessType = INTERNET_OPEN_TYPE_PRECONFIG;

    m_hSession = InternetOpenA(
        USER_AGENT,
        dwAccessType,
        NULL,   //proxy name
        NULL,   //proxy bypass
        INTERNET_FLAG_DONT_CACHE
    );

    InternetSetStatusCallback(m_hSession, CHttpFilePoster::InternetStatusCallback);

    if(m_hSession == NULL)
        ThrowUploaderException();

    return (m_hSession != NULL);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
bool CHttpFilePoster::Shutdown()
{
    if(IsConnected())
    {
        Disconnect();
    }

    InternetCloseHandle(m_hSession);
    m_hSession = NULL;

    return true;
}


///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
bool CHttpFilePoster::IsConnected()
{
    return (m_hConnection != NULL);
}


/*
RequestHead()   request posting acceptor headers

  Note: It is necessary to call this function before posting files because of the
  way HTTP authentication works. When you request an object that requires authentication
  the server will first read the entire body of the request. It then determines if
  authentication is required. If no authentication is required, it will service the
  request and send back the response, otherwise it will send back a response with status 401
  (access denied) and some other headers enumerating acceptable authentication schemes.

  When client sees these headers, it prompts the user if necessary, and resends the request
  with headers containing the requested credentials.

  For small posts the user barely notices, but for a large POST this is insane. You
  have to send up your entire post just to find out that you need to be authenticated.
  Then you have to supply your username/password to your user agent, which will then
  resend the POST.

  The upshot is that it's necessary to make sure the user is authenticated, if
  necessary, BEFORE we attempt to post a bunch of files. One way to do this is to
  send a HEAD request to the server, using HttpSendRequest, check the headers and authenticate
  if necessary. Then we can continue with the file post.

*/

bool CHttpFilePoster::RequestHead()
{
    bool bRet = false;
    DWORD dwRet = 0;

    return true;

    HINTERNET hFile;



    hFile = HttpOpenRequestA(m_hConnection, "HEAD", m_strHttpObject.c_str(),
        NULL, NULL, NULL, INTERNET_FLAG_EXISTING_CONNECT, m_dwContext);

    if(hFile)
    {
        do
        {
            HttpSendRequest(hFile, NULL, 0, NULL, 0);

#ifdef _DEBUG
            {
                //HACK: magic numbers
                DWORD dwLen = 1024;
                char buffer[1024];

                if(HttpQueryInfo(hFile, HTTP_QUERY_RAW_HEADERS_CRLF, buffer, &dwLen, NULL))
                {
                    ATLTRACE("---- HEADERS: \n");
                    ATLTRACE(buffer);
                    ATLTRACE("------ DONE --\n");
                }
            }

#endif
            dwRet = InternetErrorDlg(
                m_hWndParent,
                hFile,
                ERROR_INTERNET_INCORRECT_PASSWORD,
                FLAGS_ERROR_UI_FLAGS_GENERATE_DATA | FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS,
                NULL);


            if(dwRet== ERROR_SUCCESS)
                bRet = true;

        }
        while(dwRet == ERROR_INTERNET_FORCE_RETRY);
        InternetCloseHandle(hFile);
    }

    return bRet;
}


bool CHttpFilePoster::DoUpload(CProgressInfo* pProgress)
{
    DWORD dwThreadID;
    CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE) UploadThreadProc, (LPVOID) pProgress, 0, &dwThreadID);
    return TRUE;
}



//find the MIME type for a file based on the file extension by
// looking in the registry under HKEY_CLASSES_ROOT\.<ext>\Content Type
CStdString CHttpFilePoster::GetMimeType(const CHAR* pszFilename)
{
    CHAR*  pszExt, *pszRet;
    CHAR   pszBuff[MAX_PATH];
    DWORD   dwBuffSize = MAX_PATH;
    LONG    lResult;

    //get file extension
    pszExt = strrchr(pszFilename, _T('.'));

    if(pszExt == NULL)
    {
        pszRet = UNKNOWN_MIME;
    }
    else
    {
        HKEY hkey = NULL;
        lResult = RegOpenKeyExA(HKEY_CLASSES_ROOT, pszExt, 0, KEY_QUERY_VALUE, &hkey);
        if(lResult != ERROR_SUCCESS)
            pszRet = UNKNOWN_MIME;


        lResult = RegQueryValueExA(hkey, REG_CONTENT_TYPE, 0, NULL, (LPBYTE) pszBuff, &dwBuffSize);
        if(lResult != ERROR_SUCCESS)
            pszRet = UNKNOWN_MIME;
        else
            pszRet = pszBuff;

        if(hkey)
            RegCloseKey(hkey);
    }

    return pszRet;
}



bool CHttpFilePoster::SendString(const CStdString& str)
{
    bool bRet = false;
    DWORD dwWritten, dwLen;
    dwLen = str.length();

    if(InternetWriteFile(m_hFile, str.data(), dwLen, &dwWritten) && (dwWritten == dwLen))
    {
        g_dwContentLength -= dwLen;
        ATLTRACE((LPCSTR)str);
        bRet = true;
    }

    if(!bRet)
        ThrowUploaderException();
    return bRet;
}


DWORD CHttpFilePoster::CalculateContentLength(CUploaderFile* pFile)
{
    DWORD dwContentLength = 0;

    dwContentLength = m_strFileHeader.length();
    dwContentLength += pFile->dwSize;
    dwContentLength += m_strFilePost.length();
    dwContentLength += m_strCommonPost.length();

    g_dwContentLength = dwContentLength;
    return dwContentLength;
}

bool CHttpFilePoster::SendHeader()
{
    bool bResult = false;
    ATLASSERT(m_hFile);

    //HACK: magic number
    char szBuff[1000];
    // boundary string doesn't include the first two '-' characters
    sprintf(szBuff, "%s:%s; boundary=%s\r\n", CONTENT_TYPE, MULTI_PART_FORM_DATA, m_strBoundary.c_str() + 2);


    bResult = HttpAddRequestHeadersA(m_hFile, szBuff, -1, HTTP_ADDREQ_FLAG_REPLACE | HTTP_ADDREQ_FLAG_ADD);

    if(!bResult)
        ThrowUploaderException();

    return true;
}




bool CHttpFilePoster::BeginUpload(CProgressInfo* pProgressInfo)
{
    bool bResult = false;

    if(RequestHead())
    {
        BuildCommonPost();
        BuildFilePostHeader(m_pCurrentFile);
        BuildFilePost(m_pCurrentFile);

        m_hFile = HttpOpenRequestA(
            m_hConnection,          //connection
            "POST",                 //verb
            m_strHttpObject.c_str(),//object
            NULL,                   //http version, use default (1.0)
            NULL,                   //referer, none
            NULL,                   //accept types, use default
            INTERNET_FLAG_NO_CACHE_WRITE, //flags, don't write result to cache
            m_dwContext);

        if(m_hFile)
        {
            ZeroMemory(&m_internetBuffers, sizeof(m_internetBuffers));
            m_internetBuffers.dwBufferTotal = CalculateContentLength(m_pCurrentFile);
            m_internetBuffers.dwStructSize = sizeof(m_internetBuffers);

            if(SendHeader())
            {
                bResult = !!HttpSendRequestEx(m_hFile, &m_internetBuffers, NULL, HSR_INITIATE, 0);
            }
        }
    }

    if(!bResult)
    {
        ThrowUploaderException();
        //BUGBUG: do we really want to abort the entire upload, or just this file?
        //pProgressInfo->dwStatus = TRANSFER_SKIPPING_FILE;
        //pProgressInfo->NotifyCaller();
    }

    return bResult;
}

void CHttpFilePoster::DrainSocket()
{
    WIA_PUSHFUNCTION(TEXT("CHttpFilePoster::DrainSocket"));
    ATLASSERT(m_hFile);

    CHAR buffer[401];
    DWORD dwRead = 0;

    WIA_TRACE((TEXT("--response body--")));

    while(InternetReadFile(m_hFile, buffer, 400, &dwRead) && dwRead > 0)
    {
#ifdef DBG
        WIA_TRACE((TEXT("dwRead: %d"), dwRead ));
        buffer[dwRead] = '\0';
        WIA_TRACE((TEXT("%hs"), buffer));
#endif
    }

    WIA_TRACE((TEXT("--done--")));

    ATLASSERT(dwRead == 0);
}

bool CHttpFilePoster::QueryStatusCode(DWORD& dwStatus)
{
    ATLASSERT(m_hFile != NULL);

    TCHAR szBuffer[80];
    DWORD dwLen = 80;
    bool bRet;

    bRet = HttpQueryInfo(m_hFile, HTTP_QUERY_STATUS_CODE, szBuffer, &dwLen, NULL);

    if (bRet)
        dwStatus = (DWORD) _ttol(szBuffer);
    return bRet;
}

bool CHttpFilePoster::CleanupUpload()
{
    BOOL bSuccess = false;
    if(m_hFile)
    {
        bSuccess = HttpEndRequest(m_hFile, NULL, 0, 0);

        //drain socket
        DrainSocket();

        InternetCloseHandle(m_hFile);
        m_hFile = NULL;
    }

    if(!bSuccess)
        ThrowUploaderException();

    return bSuccess;
}

bool CHttpFilePoster::FinishUpload()
{
    return CleanupUpload();
}

bool CHttpFilePoster::CancelUpload()
{
    return CleanupUpload();
}


bool CHttpFilePoster::SendFile(CProgressInfo* pProgressInfo)
{
    HANDLE hFile = NULL;
    BYTE buffer[UPLOAD_BUFFSIZE];
    bool bRet = false;  // assume failure


    try
    {
        hFile = CreateFileA(
            pProgressInfo->strFilename.c_str(),
            GENERIC_READ,
            FILE_SHARE_READ,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN,
            NULL);


        if(INVALID_HANDLE_VALUE == hFile)
        {
            DWORD dwError = GetLastError();
            // file either doesn't exist, or is in use by another process, or
            // otherwise can't be opened, just skip the file and continue
            pProgressInfo->dwStatus = TRANSFER_SKIPPING_FILE;
            pProgressInfo->NotifyCaller();

            ThrowUploaderException(dwError);
            return bRet;
        }


        ATLASSERT(m_hFile);

        DWORD dwBytesTotal = GetFileSize(hFile, NULL);
        // this assertion should only fail if the file was modified since
        // the upload map was built, if this happens we just skip the file
        ATLASSERT(dwBytesTotal == pProgressInfo->dwCurrentBytes);
        if(dwBytesTotal != pProgressInfo->dwCurrentBytes)
        {
            pProgressInfo->dwStatus = TRANSFER_SKIPPING_FILE;
            pProgressInfo->NotifyCaller();
            CloseHandle(hFile);

            ThrowUploaderException();
            return bRet;
        }

        pProgressInfo->dwCurrentDone = 0;

        while(pProgressInfo->dwCurrentDone < pProgressInfo->dwCurrentBytes)
        {
            DWORD dwLeft = pProgressInfo->dwCurrentBytes - pProgressInfo->dwCurrentDone;
            DWORD dwToRead = min(UPLOAD_BUFFSIZE, dwLeft);
            DWORD dwRead;
            DWORD dwWritten;

            ReadFile(hFile, buffer, dwToRead, &dwRead, NULL);

            if(dwRead != dwToRead)
            {
                ATLTRACE("Error: enexpected end of file in SendFile\n");
                ThrowUploaderException();
            }

            if(!InternetWriteFile(m_hFile, &buffer, dwRead, &dwWritten))
            {
                ThrowUploaderException();
            }

            if(dwWritten != dwRead)
            {
                ATLTRACE("Error: InternetWriteFile sent less than requested!\n");
                ThrowUploaderException();
            }

            g_dwContentLength -= dwWritten;
            ATLTRACE("sent %d, %d left\n", dwWritten, g_dwContentLength);

            pProgressInfo->UpdateProgress(dwWritten);
        }
        if(hFile)
        {
            CloseHandle(hFile);
            hFile = NULL;
        }
    }
    catch(CUploaderException*)
    {
        if(hFile)
        {
            CloseHandle(hFile);
            hFile = NULL;
        }
        throw;
    }

    return bRet;
}

DWORD CHttpFilePoster::AddFile(const CStdString& sFileName, const CStdString& sTitle, DWORD dwFileSize, BOOL bDelete)
{
    //getting file size not supported
    ATLASSERT(dwFileSize > 0);

    CStdString strMime = GetMimeType(sFileName.c_str());

    m_dwTotalFileBytes += dwFileSize;

    m_listFiles.push_back(new CUploaderFile(sFileName, dwFileSize, bDelete, strMime, sTitle));

    return ++m_dwFileCount;
}

void CHttpFilePoster::AddFormData(const CStdString& strName, const CStdString& strValue)
{
    m_mapFormData[strName] = strValue;
}

DWORD CHttpFilePoster::RemoveFile(DWORD dwIndex)
{
    std::list<CUploaderFile*>::iterator it;
    int i;

    for(i = 0, it = m_listFiles.begin(); it != m_listFiles.end() && i <= dwIndex; i++ , it++)
        ;
    if(it != m_listFiles.end())
    {
        m_dwTotalFileBytes -= (*it)->dwSize;
        m_dwFileCount--;
        delete (*it);
        m_listFiles.erase(it);
        return i;
    }

    return -1;
}

DWORD CHttpFilePoster::GetFileCount()
{
    m_dwFileCount;
    return 0;
}

void CHttpFilePoster::Reset()
{
    m_dwTotalFileBytes = 0;
    m_dwFileCount = 0;
    m_listFiles.clear();
    m_mapFormData.clear();
}



///////////////////////////////////////////////////////////////////////////////
//  called by WinINet on various connection events
//  this function simply passes them to the caller though
//  the progress info callback.
//  note: this is a static member function, the dwContext parameter
//  contains the this pointer
void CALLBACK CHttpFilePoster::InternetStatusCallback(
    HINTERNET hInternet,
    DWORD_PTR dwContext,
    DWORD dwInternetStatus,
    LPVOID lpvStatusInformation,
    DWORD dwStatusInformationLength
    )
{
    CHttpFilePoster* pThis = (CHttpFilePoster*) dwContext;

    ATLTRACE("InternetStatusCallback dwContext=0x%08x  ", dwContext);

    switch(dwInternetStatus)
    {
    case INTERNET_STATUS_RESOLVING_NAME:
        ATLTRACE("Looking up the IP address of %s\n", (char*)lpvStatusInformation);
        break;

    case INTERNET_STATUS_NAME_RESOLVED:
        ATLTRACE("IP address is:  %s\n", (char*) lpvStatusInformation);
        break;

    case INTERNET_STATUS_CONNECTING_TO_SERVER:
        ATLTRACE("Connecting to server\n");
        //pSocketAddress = (SOCKADDR*) lpvStatusInformation;
        break;

    case INTERNET_STATUS_CONNECTED_TO_SERVER:
        ATLTRACE("Connected to the server\n");
        //pSocketAddress = (SOCKADDR*) lpvStatusInformation;
        break;

    case INTERNET_STATUS_SENDING_REQUEST:
        ATLTRACE("Sending request\n");
        break;

    case INTERNET_STATUS_REQUEST_SENT:
        ATLTRACE("Request sent\n");
        break;

    case INTERNET_STATUS_RECEIVING_RESPONSE:
        ATLTRACE("Waiting for server response\n");
        break;

    case INTERNET_STATUS_RESPONSE_RECEIVED:
        ATLTRACE("Response received\n");
        break;

    case INTERNET_STATUS_CLOSING_CONNECTION:
        ATLTRACE("Closing connection\n");
        break;

    case INTERNET_STATUS_CONNECTION_CLOSED:
        ATLTRACE("Connection closed\n");
        break;

    case INTERNET_STATUS_HANDLE_CREATED:
        ATLTRACE("Handle created\n");
        break;

    case INTERNET_STATUS_HANDLE_CLOSING:
        ATLTRACE("Handle closed\n");
        break;

    case INTERNET_STATUS_REQUEST_COMPLETE:
        ATLTRACE("Async request complete\n");
        break;
    default:
        ATLTRACE("Some other unknown callback\n");
        break;
    }
}


HRESULT CHttpFilePoster::ForegroundUpload( CProgressInfo *pProgress )
{
    WIA_PUSHFUNCTION(TEXT("CHttpFilePoster::ForegroundUpload"));
    DWORD dwError = 0;
    try
    {
        std::list<CHttpFilePoster::CUploaderFile*>::iterator it, begin, end;

        Startup();
        Connect();
        pProgress->StartSession(m_dwFileCount, m_dwTotalFileBytes);

        begin = m_listFiles.begin();
        end = m_listFiles.end();
        for(it = begin; it != end; it++)
        {
            m_pCurrentFile = *it;
            BeginUpload(pProgress);
            WIA_TRACE((TEXT("Filename: %hs, Title: %hs, Size: %d"), (*it)->strNameMBCS.c_str(), (*it)->strTitle.c_str(), (*it)->dwSize ));
            WIA_TRACE((TEXT("m_strFileHeader: %hs"), m_strFileHeader.c_str()));
            WIA_TRACE((TEXT("m_strFilePost: %hs"), m_strFilePost.c_str()));
            WIA_TRACE((TEXT("m_strCommonPost: %hs"), m_strCommonPost.c_str()));
            SendString(m_strFileHeader);
            pProgress->StartFile((*it)->strNameMBCS, (*it)->strTitle, (*it)->dwSize);
            SendFile(pProgress);
            SendString(m_strFilePost);
            SendString(m_strCommonPost);
            pProgress->EndFile();

            FinishUpload();
        }

        pProgress->EndSession(!dwError);

        Disconnect();
        Shutdown();

    }
    catch(CUploaderException* pE)
    {
        dwError = pE->m_dwError;
        delete pE;
    }
    return HRESULT_FROM_WIN32(dwError);
}

///////////////////////////////////////////////////////////////////////////////
UINT CHttpFilePoster::UploadThreadProc(LPVOID pVoid)
{
#if 0
    CProgressInfo* pProgress = (CProgressInfo*) pVoid;
    CUploadProgressDialog* pDialog = (CUploadProgressDialog*) pProgress->lParam;
    CHttpFilePoster* pThis = (CHttpFilePoster*) pDialog->m_pHttpFilePoster;
    DWORD dwError = 0;
    try
    {
        std::list<CHttpFilePoster::CUploaderFile*>::iterator it, begin, end;

        pThis->Startup();
        pThis->Connect();
        pProgress->StartSession(pThis->m_dwFileCount, pThis->m_dwTotalFileBytes);

        begin = pThis->m_listFiles.begin();
        end = pThis->m_listFiles.end();
        for(it = begin; it != end; it++)
        {
            pThis->m_pCurrentFile = *it;
            pThis->BeginUpload(pProgress);

            pThis->SendString(pThis->m_strFileHeader);
            pProgress->StartFile((*it)->strNameMBCS, (*it)->strTitle, (*it)->dwSize);
            pThis->SendFile(pProgress);
            pThis->SendString(pThis->m_strFilePost);
            pThis->SendString(pThis->m_strCommonPost);
            pProgress->EndFile();

            pThis->FinishUpload();
        }

        pProgress->EndSession(!dwError);

        pThis->Disconnect();
        pThis->Shutdown();

    }
    catch(CUploaderException* pE)
    {
        dwError = pE->m_dwError;
        delete pE;
    }


    ::SendMessage(pDialog->m_hWnd, UPLOAD_WM_THREAD_DONE, dwError, 0);
    ::SendMessage(pThis->m_hWndParent, UPLOAD_WM_THREAD_DONE, dwError, 0);

    return dwError;
#else
    return 0;
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\stdstring.cpp ===
#include "precomp.h"
#pragma hdrstop
#include "stdstring.h"

using namespace std;

extern HINSTANCE g_hInstance;

int CStdString::LoadString(UINT uID)
{
    ATLASSERT(uID);

    CHAR szBuff[1024];
    int iLen;

    iLen = ::LoadStringA(g_hInstance, uID, szBuff, 1024);
    if(iLen)
    {
        *this = szBuff;
    }
    else
    {
        ATLASSERT(FALSE);   //Test should catch this if there is an international string longer than 1024 chars. (not likely)
        *this = "";
    }

    return iLen;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\progressinfo.h ===
#ifndef __ProgressInfo_h__
#define __ProgressInfo_h__

#include <windows.h>
#include "stdstring.h"
#include "httpfilepost.h"

enum TRANSFER_STATUS
{
    TRANSFER_FATAL_ERROR = -1,      // transfer is aborting due to unrecoverable error
    TRANSFER_OK,                    // currently not used
    TRANSFER_SKIPPING_FILE,         // file transfer failed, non-fatal, continuing with remaining files
    TRANSFER_SESSION_INITIATE,      // beginning batch file transfer (only agragate vars are valid)
    TRANSFER_FILE_INITATE,          // starting the transfer of a file (current file vars are now valid)
    TRANSFER_FILE_TRANSFERING,      // all vars reflect current progress
    TRANSFER_FILE_COMPLETE,         // file has completed transfering
    TRANSFER_SESSION_COMPLETE,      // session compelete, last callback that will be sent unless
                                    //  there is an unrecoverable error in which case
                                    //  TRANSFER_FATAL_ERROR will be the final message
};
#include <MMSystem.h>       // Windows Multimedia Support (for timeGetTime())

class CProgressInfo;
class CWebCabPublisher;
typedef UINT (*CS_PROGRESS_PROC)(CProgressInfo*);

#define STATUS_BUFFSIZE 1024

class CProgressInfo
{
public:
    // while the upload/download thread is updating the variables,
    // critsec will be locked. users of this class must lock
    // this critsec before accessing the variables, or they
    // may get only partially updated values
    CRITICAL_SECTION critsec;

    DWORD       dwStatusCallback;   // status from WinInet
    char        szStatusString[STATUS_BUFFSIZE];    //buffer for status message

    TRANSFER_STATUS dwStatus;
    DWORD       dwErrorCount;       // count of errors encountered this transfer
    CStdString      strFilename;        // full path of the currently transfering file
    CStdString      strTitle;           // friendly (user specified) title of the file

    DWORD       dwTotalFiles;       // total count of files to transfer
    DWORD       dwDoneFiles;        // count of files done

    DWORD       dwTotalBytes;       // total bytes to transfer
    DWORD       dwTotalDone;        // bytes transfered

    DWORD       dwCurrentBytes;     // total bytes to transfer for this file
    DWORD       dwCurrentDone;      // bytes transfered for this file

    DWORD       dwStartMS;          // time started (milliseconds)

    DWORD       dwTransferRate;     // (estimated) transfer rate

    time_t      timeElapsed;        // time elapsed
    time_t      timeRemaining;      // (estimated) time remaining

    DWORD       dwOverallPercent;   // overall percent done
    DWORD       dwCurrentPercent;   // percent done for this file

                                    // these two are used for updating a progress ctrl
    DWORD       dwOverallPos;       // (estimated) overall progress (range 0-ffffffff)
    DWORD       dwCurrentPos;       // (estimated) current progress (range 0-ffffffff)

    CS_PROGRESS_PROC pfnProgress;   // pointer to callback function
    LPARAM      lParam;             // lParam (caller defined value passed back to caller)

    // caller returns 0 to continue, non-zero to abort (value will be reason for abort)
    // if caller didn't specify a callback, then assume continue (0)
    void NotifyCaller()
    {
        if(pfnProgress && (*pfnProgress)(this))
        {
            ThrowUploaderException(0);
        }
    }


    void StartSession(DWORD dwCountFiles, DWORD dwCountBytes)
    {
        InitializeCriticalSection(&critsec);
        EnterCriticalSection(&critsec);
        {   // critical section
            dwStatus = TRANSFER_SESSION_INITIATE;
            dwErrorCount = 0;
            strFilename = "";
            dwTotalFiles = dwCountFiles;
            dwDoneFiles = 0;
            dwTotalDone = 0;
            dwTotalBytes = dwCountBytes;
            dwTotalDone = 0;
            dwCurrentBytes = 0;
            dwCurrentDone = 0;
            dwStartMS = timeGetTime();
            dwTransferRate = 0;
            timeElapsed = 0;
            timeRemaining = 0;
            dwOverallPercent = 0;
            dwCurrentPercent = 0;
            dwOverallPos = 0;
            dwCurrentPos = 0;
        }
        LeaveCriticalSection(&critsec);
        NotifyCaller();
    }

    void EndSession(UINT uSuccess)
    {
        EnterCriticalSection(&critsec);
        {
            dwStatus = uSuccess ? TRANSFER_SESSION_COMPLETE : TRANSFER_FATAL_ERROR;
        }
        LeaveCriticalSection(&critsec);

        //DeleteCriticalSection(&critsec);

        NotifyCaller();
    }

    void StartFile(const CStdString& name, const CStdString& title, DWORD size)
    {
        EnterCriticalSection(&critsec);
        {   // critical section
            dwStatus = TRANSFER_FILE_INITATE;
            strFilename = name;
            strTitle = title;
            dwCurrentBytes = size;
            dwCurrentDone = 0;
            dwCurrentPercent = 0;
            dwCurrentPos = 0;
        }
        LeaveCriticalSection(&critsec);

        NotifyCaller();
    }

    void UpdateProgress(DWORD dwBytesTransfered)
    {
        EnterCriticalSection(&critsec);
        {   // critical section
            dwStatus = TRANSFER_FILE_TRANSFERING;
            dwTotalDone += dwBytesTransfered;
            dwCurrentDone += dwBytesTransfered;

            dwOverallPos = dwTotalBytes ? MulDiv(dwTotalDone, 0xFFFF, dwTotalBytes) : 0;
            dwCurrentPos = dwCurrentBytes ? MulDiv(dwCurrentDone, 0xFFFF, dwCurrentBytes) : 0;

            dwOverallPercent = (dwOverallPos * 100) / 0xFFFF;
            dwCurrentPercent = (dwCurrentPos * 100) / 0xFFFF;

            DWORD dwElapsedMS = timeGetTime() - dwStartMS;
            dwTransferRate = MulDiv(dwTotalDone, 1000, dwElapsedMS);

            DWORD dwTimeRemaining = MulDiv(dwElapsedMS, dwTotalBytes, dwTotalDone) - dwElapsedMS;
            timeRemaining = dwTimeRemaining / 1000;
            timeElapsed = dwElapsedMS / 1000;
        }
        LeaveCriticalSection(&critsec);

        NotifyCaller();
    }


    void EndFile()
    {
        EnterCriticalSection(&critsec);
        {   // critical section
            dwStatus = TRANSFER_FILE_COMPLETE;
            dwDoneFiles++;
        }
        LeaveCriticalSection(&critsec);

        NotifyCaller();
    }
};


#endif //__ProgressInfo_h__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\stdstring.h ===
#ifndef __STDSTRING_H_INCLUDED
#define __STDSTRING_H_INCLUDED

#include <string>

class CStdString: public std::string
{
public:
    typedef std::string _Base;

    explicit CStdString(allocator_type _Al)
        : _Base(_Al) {}
    CStdString(const _Myt& _X)
        : _Base(_X) {}
    CStdString(const _Myt& _X, size_type _P, size_type _M, allocator_type _Al = allocator_type())
        : _Base(_X, _P, _M, _Al) {}
    CStdString(const traits_type::char_type *_S, size_type _N, allocator_type _Al = allocator_type())
        : _Base(_S, _N, _Al) {}
    CStdString(const traits_type::char_type *_S, allocator_type _Al = allocator_type())
        : _Base(_S, _Al) {}
    CStdString(size_type _N, traits_type::char_type _C, allocator_type _Al = allocator_type())
        : _Base(_N, _C, _Al) {}

    CStdString(_It _F, _It _L, allocator_type _Al = allocator_type())
        : _Base(_F, _L, _Al) {}



    CStdString() {}
    explicit CStdString(UINT uID)
    {
        LoadString(uID);
    }

    int LoadString(UINT uID);

    operator const traits_type::char_type*() const { return c_str(); }

    /*
    _Myt& operator=(const _Myt& _X)
        {return (assign(_X)); }
    _Myt& operator=(const _E *_S)
        {return (assign(_S)); }
    _Myt& operator=(_E _C)
        {return (assign(1, _C)); }
    _Myt& operator+=(const _Myt& _X)
        {return (append(_X)); }
    _Myt& operator+=(const _E *_S)
        {return (append(_S)); }
    _Myt& operator+=(_E _C)
    */

};

#endif // __STDSTRING_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\sources.inc ===
!include          $(PROJECT_ROOT)\ui\uienv.inc
NO_BROWSER_FILE = 1
SOURCES_USED    = $(SOURCES_USED) $(PROJECT_ROOT)\ui\uienv.inc

CONDITIONAL_INCLUDES = list string map set $(CONDITIONAL_INCLUDES)

MAJORCOMP=  ImageIn
MINORCOMP=  wiaacmgr

TARGETNAME= postplug
TARGETTYPE= DYNLINK
TARGETPATH= obj
TARGETEXT=  dll

DLLDEF=..\postplug.def
DLLENTRY=_DllMainCRTStartup
DLLBASE=0x10080000

USE_MSVCRT=1

USE_STL=1

PASS0_HEADERDIR=$(O)
PASS0_SOURCEDIR=$(O)
MIDL_UUIDDIR=$(O)
MIDL_TLBDIR=$(O)

!IF $(ALPHA)
USE_NTDLL=1
!ELSE
USE_NOLIBS=1
!ENDIF

ATL_VER=30
USE_STATIC_ATL=1

USE_NATIVE_EH=1

INCLUDES= $(INCLUDES); \
          $(UI_DIR)\wiaacmgr; \
          $(DDK_INC_PATH); \
          $(O)


SOURCES=  ..\httpfilepost.cpp \
          ..\stdstring.cpp \
          ..\utf8str.cpp \
          ..\postplug.cpp \
          ..\module.cpp \
          ..\postplug.rc

TARGETLIBS= $(TARGETLIBS) \
        $(BASEDIR)\public\sdk\lib\*\comdlg32.lib          \
        $(BASEDIR)\public\sdk\lib\*\shell32.lib           \
        $(BASEDIR)\public\sdk\lib\*\comctl32.lib          \
        $(BASEDIR)\public\sdk\lib\*\shlwapi.lib           \
        $(BASEDIR)\public\sdk\lib\*\wininet.lib           \
        $(BASEDIR)\public\sdk\lib\*\winmm.lib             \
        $(BASEDIR)\public\sdk\lib\$(PLATFORM_SUFFIX)\*\wiaguid.lib  \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\uicommon.lib

PRECOMPILED_CXX=1
PRECOMPILED_INCLUDE=..\precomp.h
PRECOMPILED_PCH=precomp.pch
PRECOMPILED_OBJ=precomp.obj
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\utf8str.cpp ===
#include "precomp.h"
#pragma hdrstop
#include "utf8str.h"

CUTF8String::~CUTF8String()
{
    if (ALLOC_UNICODE & m_eAlloc)
    {
        delete m_pwszUnicode;
    }
    else if (ALLOC_UTF8 & m_eAlloc)
    {
        delete m_pszUTF8;
    }
}

CUTF8String::operator LPWSTR()
{
    if ((NULL == m_pwszUnicode) && (NULL != m_pszUTF8))
    {
        DecodeUTF8();
    }
    return m_pwszUnicode;
}

CUTF8String::operator LPSTR()
{
    if ((NULL == m_pszUTF8) && (NULL != m_pwszUnicode))
    {
        EncodeUTF8();
    }
    return m_pszUTF8;
}

VOID CUTF8String::EncodeUTF8()
{
    m_hr = S_OK;
    int cchUTF8 = 1; // always include a NULL terminator

    // First make a pass to see how many characters we will be converting.
    LPWSTR pwsz = m_pwszUnicode;
    while (L'\0' != *pwsz)
    {
        WCHAR wch = *pwsz++;
        if (wch < 0x80)
        {
            cchUTF8 += 1;
        }
        else if (wch < 0x800)
        {
            cchUTF8 += 2;
        }
        else
        {
            cchUTF8 += 3;
        }
    }

    m_pszUTF8 = new CHAR[cchUTF8];
    if (NULL != m_pszUTF8)
    {
        m_eAlloc = ALLOC_UTF8;
        // Start encoding here:
        const BYTE cUtf8FirstSignal[4] = {0x00, 0x00, 0xC0, 0xE0};
        const BYTE cMask   = 0xBF;
        const BYTE cSignal = 0x80;
        LPSTR pszStop = m_pszUTF8 + cchUTF8;
        LPSTR pszDst = m_pszUTF8;
        pwsz = m_pwszUnicode;
        while (pszDst < pszStop)
        {
            WCHAR wch = *pwsz++;
#ifdef DEBUG
            if (L'\0' == wch)
            {
            }
#endif // DEBUG
            int cchTotal;
            if (wch < 0x80)
            {
                cchTotal = 1;
            }
            else if (wch < 0x800)
            {
                cchTotal = 2;
            }
            else
            {
                cchTotal = 3;
            }

            pszDst += cchTotal;
            switch (cchTotal)
            {
                case 3:
                    *--pszDst = (wch | cSignal) & cMask;
                    wch >>= 6;
                    // FALL THROUGH
                case 2:
                    *--pszDst = (wch | cSignal) & cMask;
                    wch >>= 6;
                    // FALL THROUGH
                case 1:
                    *--pszDst = (wch | cUtf8FirstSignal[cchTotal]);
            }
            pszDst += cchTotal;
        }
        m_hr = S_OK;
    }
    else
    {
        m_hr = E_OUTOFMEMORY;
    }
}

VOID CUTF8String::DecodeUTF8()
{
    m_hr = S_OK;
    int cchUnicode = 1; // always include a NULL terminator

    LPSTR psz = m_pszUTF8;
    // First determine the destination size (cchUnicode)
    while ('\0' != *psz)
    {
        int cbChar = 0;
        BYTE bFirst = (BYTE) *psz;
        while (bFirst & 0x80)
        {
            cbChar++;
            bFirst <<= 1;
        }

        cbChar = max(1, cbChar);
        psz += cbChar;
        cchUnicode++;
    }

    m_pwszUnicode = new WCHAR[cchUnicode];
    if (NULL != m_pwszUnicode)
    {
        m_eAlloc = ALLOC_UNICODE;
        // Start decoding here:
        LPWSTR pwszStop = m_pwszUnicode + cchUnicode;
        LPWSTR pwszDst = m_pwszUnicode;
        psz = m_pszUTF8;
        while (pwszDst < pwszStop)
        {
            int cbChar = 0;
            BYTE bFirst = (BYTE) *psz;
            while (bFirst & 0x80)
            {
                cbChar++;
                bFirst <<= 1;
            }

            BOOL fValid = TRUE;
            WCHAR wch = L'\0';
            switch (cbChar)
            {
                case 6: psz++; // FALLTHROUGH               // we don't handle
                case 5: psz++; // FALLTHROUGH               // UCS-4; skip first
                case 4: psz++; // FALLTHROUGH               // three bytes
                case 3:
                    wch = WCHAR(*psz++ & 0x0f) << 12;      // 0x0800 - 0xffff
                    fValid = fValid && ((*psz & 0xc0) == 0x80);
                    // FALLTHROUGH
                case 2:
                    wch |= WCHAR(*psz++ & 0x3f) << 6;       // 0x0080 - 0x07ff
                    fValid = fValid && ((*psz & 0xc0) == 0x80);
                    wch |= WCHAR(*psz++ & 0x3f);
                    break;

                case 0:
                    wch = WCHAR(*psz++);                    // 0x0000 - 0x007f
                    break;

                default:
                    wch = L'?';
                    psz += cbChar;
                    break;
            }

            if (FALSE == fValid)
            {
                *pwszDst = L'\0';
                m_hr = E_FAIL;
                break;
            }
#ifdef DEBUG
            cchUnicode--;
#endif // DEBUG

            *pwszDst++ = wch;
        }
    }
    else
    {
        m_hr = E_OUTOFMEMORY;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadbgui\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by wiadbgui.rc
//
#define IDR_DBGWND_ACCEL                101
#define IDI_BUG                         102
#define IDD_FLAGS_DIALOG                103
#define IDR_MENU                        104
#define IDD_MODULENAME                  105
#define IDC_MODULE_LIST                 1002
#define IDC_MASK                        1003
#define IDC_ADD_MODULE                  1004
#define IDC_DELETE_MODULE               1006
#define IDC_MODULE_NAME                 1007
#define ID_COPY                         40001
#define ID_CUT                          40002
#define ID_DELETE                       40003
#define ID_SELECTALL                    40004
#define IDM_QUIT                        40005
#define IDM_FLAGS                       40006
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        106
#define _APS_NEXT_COMMAND_VALUE         40007
#define _APS_NEXT_CONTROL_VALUE         1009
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadbgui\sources.inc ===
!IF 0

Copyright (c) 1989-1991 Microsoft Corporation

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.

NOTE:   Commented description of this file is in \nt\public\oak\bin\sources.tpl

!ENDIF

#
# include the WIA global build settings
#

!include $(PROJECT_ROOT)\ui\uienv.inc
SOURCES_USED = $(SOURCES_USED) $(PROJECT_ROOT)\ui\uienv.inc

#
# Our specific build settings
#

TARGETNAME=wiadbgui
TARGETTYPE=PROGRAM
TARGETPATH=obj

SOURCES= \
        ..\wiadbgui.cpp \
        ..\wiadbgui.rc

TARGETLIBS=$(TARGETLIBS) \
        $(SHELL_LIB_PATH)\shfusion.lib \
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiaacmgr\postplug\utf8str.h ===
#ifndef _UTF8STR_H_
#define _UTF8STR_H_

class CUTF8String
{
public:
	CUTF8String(LPCWSTR pcwszUnicode) :
		m_pwszUnicode	((LPWSTR) pcwszUnicode),
		m_pszUTF8		(NULL),
		m_eAlloc		(ALLOC_NONE),
		m_hr			(S_OK) { };
	CUTF8String(LPCSTR pcszUTF8) :
		m_pszUTF8		((LPSTR) pcszUTF8),
		m_pwszUnicode	(NULL),
		m_eAlloc		(ALLOC_NONE),
		m_hr			(S_OK) { };
	~CUTF8String();

	operator LPWSTR();
	operator LPSTR();

	HRESULT GetError() { return m_hr; };
protected:
	VOID EncodeUTF8();
	VOID DecodeUTF8();

	HRESULT	m_hr;
	LPWSTR	m_pwszUnicode;
	LPSTR	m_pszUTF8;
	enum
	{
		ALLOC_NONE,
		ALLOC_UNICODE,
		ALLOC_UTF8,
	} m_eAlloc;
};

#endif // ! _UTF8STR_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadebug\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by wiadebug.rc
//

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadbgui\dbgmask.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       DBGMASK.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/13/1999
 *
 *  DESCRIPTION: Debug mask dialog
 *
 *******************************************************************************/
#ifndef __DGBMASK_H_INCLUDED
#define __DGBMASK_H_INCLUDED

#include <windows.h>
#include <uicommon.h>
#include <simstr.h>
#include <simreg.h>
#include <simrect.h>
#include <wiadebug.h>

class CAddModuleDialog
{
public:
    struct CData
    {
        CSimpleString strTitle;
        CSimpleString strName;
    };

private:
    HWND  m_hWnd;
    CData *m_pData;

private:
    // Not implemented
    CAddModuleDialog(void);
    CAddModuleDialog( const CAddModuleDialog & );
    CAddModuleDialog &operator=( const CAddModuleDialog & );

private:
    explicit CAddModuleDialog( HWND hWnd )
      : m_hWnd(hWnd),
        m_pData(NULL)
    {
    }
    ~CAddModuleDialog(void)
    {
    }

    void OnOK( WPARAM, LPARAM )
    {
        m_pData->strName.GetWindowText( GetDlgItem( m_hWnd, IDC_MODULE_NAME ) );
        EndDialog( m_hWnd, IDOK );
    }

    void OnCancel( WPARAM, LPARAM )
    {
        EndDialog( m_hWnd, IDCANCEL );
    }
    LRESULT OnInitDialog( WPARAM wParam, LPARAM lParam )
    {
        m_pData = reinterpret_cast<CData*>(lParam);
        if (!m_pData)
        {
            EndDialog( m_hWnd, -1 );
            return -1;
        }

        m_pData->strName.SetWindowText( GetDlgItem( m_hWnd, IDC_MODULE_NAME ) );

        if (m_pData->strTitle.Length())
            m_pData->strTitle.SetWindowText( m_hWnd );

        WiaUiUtil::CenterWindow( m_hWnd, GetParent(m_hWnd) );

        return 0;
    }

    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_COMMAND_HANDLERS()
        {
            SC_HANDLE_COMMAND(IDOK,OnOK);
            SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
        }
        SC_END_COMMAND_HANDLERS();
    }

public:
    static INT_PTR WINAPI DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CAddModuleDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};


template <class T_NUMBERTYPE>
static HRESULT DigitToNumber( WCHAR cDigit, int nRadix, T_NUMBERTYPE *pnValue )
{
    if (!pnValue)
        return E_POINTER;
    if (nRadix > 36)
        return E_INVALIDARG;
    static const WCHAR *pszUpperDigits = L"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static const WCHAR *pszLowerDigits = L"0123456789abcdefghijklmnopqrstuvwxyz";
    for (int i=0;i<nRadix;i++)
    {
        if (cDigit == pszUpperDigits[i])
        {
            *pnValue = static_cast<T_NUMBERTYPE>(i);
            return S_OK;
        }
        else if (cDigit == pszLowerDigits[i])
        {
            *pnValue = static_cast<T_NUMBERTYPE>(i);
            return S_OK;
        }
    }
    return E_FAIL;
}

template <class T_NUMBERTYPE>
static HRESULT StringToNumber( LPCWSTR strwNumber, int nRadix, T_NUMBERTYPE *pnNumber )
{
    // Assume this is not a base 10 negative number
    bool bNegate = false;

    // Check all of the arguments
    if (!strwNumber)
        return E_INVALIDARG;
    if (!pnNumber)
        return E_POINTER;
    if (nRadix > 36)
        return E_INVALIDARG;
    LPCWSTR pszCurr = strwNumber;

    // If this is a negative number, store it
    if (nRadix == 10 && lstrlenW(pszCurr) >= 1 && pszCurr[0] == TEXT('-'))
    {
        pszCurr++;
        bNegate = true;
    }

    // Skip the optional 0x or 0X that can prefix hex numbers
    if (nRadix == 16 && lstrlenW(pszCurr) >= 2 && pszCurr[0] == L'0' && (pszCurr[1] == L'x' || pszCurr[1] == L'X'))
    {
        pszCurr += 2;
    }

    *pnNumber = 0;
    while (*pszCurr)
    {
        T_NUMBERTYPE nCurrDigit;
        if (!SUCCEEDED(DigitToNumber<T_NUMBERTYPE>( *pszCurr, nRadix, &nCurrDigit )))
        {
            return E_FAIL;
        }
        *pnNumber *= nRadix;
        *pnNumber += nCurrDigit;
        pszCurr++;
    }
    if (bNegate)
        *pnNumber = static_cast<T_NUMBERTYPE>(-static_cast<__int64>(*pnNumber));
    return S_OK;
}

template <class T_NUMBERTYPE>
static HRESULT StringToNumber( LPCSTR strNumber, int nRadix, T_NUMBERTYPE *pnNumber )
{
    return StringToNumber<T_NUMBERTYPE>( CSimpleStringConvert::WideString(CSimpleStringAnsi(strNumber)), nRadix, pnNumber );
}


class CDebugMaskDialog
{
private:
    class CDebugModule
    {
    private:
        CSimpleString m_strName;
        DWORD         m_dwMask;

    public:
        CDebugModule( LPCTSTR pszName = TEXT(""), DWORD dwMask = 0)
        : m_strName(pszName),
        m_dwMask(dwMask)
        {
        }
        CDebugModule( const CDebugModule &other )
        : m_strName(other.Name()),
        m_dwMask(other.Mask())
        {
        }
        CDebugModule &operator=( const CDebugModule &other )
        {
            if (&other != this)
            {
                m_strName = other.Name();
                m_dwMask  = other.Mask();
            }
            return *this;
        }
        CSimpleString Name(void) const
        {
            return m_strName;
        }
        DWORD Mask(void) const
        {
            return m_dwMask;
        }
        void Mask( DWORD dwMask )
        {
            m_dwMask = dwMask;
        }
    };


private:
    HWND m_hWnd;

private:
    // Not implemented
    CDebugMaskDialog(void);
    CDebugMaskDialog( const CDebugMaskDialog & );
    CDebugMaskDialog &operator=( const CDebugMaskDialog & );

private:
    explicit CDebugMaskDialog( HWND hWnd )
    : m_hWnd(hWnd)
    {
    }
    ~CDebugMaskDialog(void)
    {
    }

    CDebugModule *GetDebugModule( int nItem )
    {
        LVITEM LvItem;
        ZeroMemory( &LvItem, sizeof(LvItem) );
        LvItem.mask = LVIF_PARAM;
        LvItem.iItem = nItem;
        if (ListView_GetItem( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), &LvItem ))
        {
            return reinterpret_cast<CDebugModule*>(LvItem.lParam);
        }
        return NULL;
    }

    int GetCurrentSelectionIndex(void)
    {
        int nResult = -1;
        int nSelectedCount = ListView_GetSelectedCount(GetDlgItem( m_hWnd, IDC_MODULE_LIST ));
        if (nSelectedCount == 1)
        {
            nResult = ListView_GetNextItem( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), -1, LVNI_SELECTED );
        }
        return nResult;
    }

    void SelectItem( int nIndex )
    {
        for (int i=0;i<ListView_GetItemCount(GetDlgItem( m_hWnd, IDC_MODULE_LIST ));i++)
        {
            int nFlags = (i == nIndex) ? LVIS_SELECTED|LVIS_FOCUSED : 0;
            ListView_SetItemState( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), i, nFlags, LVIS_SELECTED|LVIS_FOCUSED );
        }
    }

    void OnOK( WPARAM, LPARAM )
    {
        // Update the value for the currently selected item
        int nItem = GetCurrentSelectionIndex();
        if (nItem >= 0)
        {
            CDebugModule *pCurrSel = GetDebugModule(nItem);
            if (pCurrSel)
            {
                UpdateCurrentFlagsFromEdit( *pCurrSel, nItem );
            }
        }

        // Delete all of the old values
        CSimpleReg reg( HKEY_LOCAL_MACHINE, DEBUG_REGISTRY_PATH_FLAGS, true, KEY_WRITE );
        reg.EnumValues( DeleteValuesEnumProc, reinterpret_cast<LPARAM>(this) );

        // Save all the new ones
        for (int i=0;i<ListView_GetItemCount(GetDlgItem( m_hWnd, IDC_MODULE_LIST ));i++)
        {
            CDebugModule *pDebugModule = GetDebugModule(i);
            if (pDebugModule)
            {
                reg.Set( pDebugModule->Name(), pDebugModule->Mask() );
            }
        }

        EndDialog( m_hWnd, IDOK );
    }

    void OnCancel( WPARAM, LPARAM )
    {
        EndDialog( m_hWnd, IDCANCEL );
    }

    static bool ReadValuesEnumProc( CSimpleReg::CValueEnumInfo &enumInfo )
    {
        if (enumInfo.nType == REG_DWORD)
        {
            CDebugMaskDialog *This = reinterpret_cast<CDebugMaskDialog*>(enumInfo.lParam);
            if (This)
            {
                This->AddNewEntry( enumInfo.strName, enumInfo.reg.Query( enumInfo.strName, 0 ) );
            }
        }
        return true;
    }

    static bool DeleteValuesEnumProc( CSimpleReg::CValueEnumInfo &enumInfo )
    {
        bool bRes = enumInfo.reg.Delete( enumInfo.strName );
        return true;
    }

    int AddNewEntry( LPCTSTR pszName, DWORD dwMask )
    {
        int nIndex = -1;
        CDebugModule *pDebugModule = new CDebugModule( pszName, dwMask );
        if (pDebugModule)
        {
            LVITEM LvItem;

            ZeroMemory( &LvItem, sizeof(LvItem) );
            LvItem.mask = LVIF_TEXT | LVIF_PARAM;
            LvItem.pszText = const_cast<LPTSTR>(pszName);
            LvItem.lParam = reinterpret_cast<LPARAM>(pDebugModule);
            LvItem.iItem = 0;
            LvItem.iSubItem = 0;
            nIndex = ListView_InsertItem( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), &LvItem );

            CSimpleString strMask;
            strMask.Format( TEXT("0x%08X"), dwMask );
            LvItem.mask = LVIF_TEXT;
            LvItem.pszText = const_cast<LPTSTR>(strMask.String());
            LvItem.iItem = nIndex;
            LvItem.iSubItem = 1;
            ListView_SetItem( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), &LvItem );
        }
        return nIndex;
    }

    LRESULT OnInitDialog( WPARAM wParam, LPARAM lParam )
    {
        LVCOLUMN LvColumn;
        ZeroMemory( &LvColumn, sizeof(LvColumn) );
        LvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_WIDTH | LVCF_TEXT;
        LvColumn.fmt = LVCFMT_LEFT;
        LvColumn.pszText = TEXT("Module");
        LvColumn.iSubItem = 0;
        LvColumn.iOrder = 0;
        LvColumn.cx = CSimpleRect( GetDlgItem( m_hWnd, IDC_MODULE_LIST ) ).Width() * 3 / 5;
        ListView_InsertColumn( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), 0, &LvColumn );

        ZeroMemory( &LvColumn, sizeof(LvColumn) );
        LvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_WIDTH | LVCF_TEXT;
        LvColumn.fmt = LVCFMT_LEFT;
        LvColumn.pszText = TEXT("Mask");
        LvColumn.iSubItem = 1;
        LvColumn.iOrder = 1;
        LvColumn.cx = CSimpleRect( GetDlgItem( m_hWnd, IDC_MODULE_LIST ) ).Width() * 2 / 5;
        ListView_InsertColumn( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), 1, &LvColumn );

        CSimpleReg reg( HKEY_LOCAL_MACHINE, DEBUG_REGISTRY_PATH_FLAGS, false, KEY_READ );
        reg.EnumValues( ReadValuesEnumProc, reinterpret_cast<LPARAM>(this) );
        SelectItem(0);

        WiaUiUtil::CenterWindow( m_hWnd, GetParent(m_hWnd) );

        return 0;
    }

    LRESULT OnListDeleteItem( WPARAM, LPARAM lParam )
    {
        NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW *>(lParam);
        if (pNmListView)
        {
            if (pNmListView->iItem >= 0 && pNmListView->iSubItem == 0)
            {
                CDebugModule *pDebugModule = reinterpret_cast<CDebugModule *>(pNmListView->lParam);
                if (pDebugModule)
                {
                    delete pDebugModule;
                }
            }
        }
        return 0;
    }

    void UpdateCurrentFlagsFromEdit( CDebugModule &DebugModule, int nItem )
    {
        CSimpleString strMask;
        strMask.GetWindowText( GetDlgItem( m_hWnd, IDC_MASK ) );

        DWORD dwMask;
        if (SUCCEEDED(StringToNumber( strMask, 16, &dwMask )))
        {
            DebugModule.Mask(dwMask);
        }

        strMask.Format( TEXT("0x%08X"), DebugModule.Mask() );
        ListView_SetItemText( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), nItem, 1, const_cast<LPTSTR>(strMask.String()) );
    }

    LRESULT OnListItemChanged( WPARAM, LPARAM lParam )
    {
        NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW *>(lParam);
        if (pNmListView)
        {
            if (pNmListView->iItem >= 0 && (LVIF_STATE & pNmListView->uChanged) && ((pNmListView->uOldState & LVIS_SELECTED) ^ (pNmListView->uNewState & LVIS_SELECTED)))
            {
                CDebugModule *pDebugModule = reinterpret_cast<CDebugModule *>(pNmListView->lParam);
                if (pDebugModule)
                {
                    if (LVIS_SELECTED & pNmListView->uNewState)
                    {
                        CSimpleString strMask;
                        strMask.Format( TEXT("0x%08X"), pDebugModule->Mask() );
                        SetDlgItemText( m_hWnd, IDC_MASK, strMask );
                    }
                    else
                    {
                        UpdateCurrentFlagsFromEdit( *pDebugModule, pNmListView->iItem );
                    }
                }
            }
        }
        return 0;
    }

    void OnDeleteModule( WPARAM, LPARAM )
    {
        int nCurSel = GetCurrentSelectionIndex();
        if (nCurSel >= 0)
        {
            ListView_DeleteItem( GetDlgItem( m_hWnd, IDC_MODULE_LIST ), nCurSel );
            int nCount = ListView_GetItemCount( GetDlgItem( m_hWnd, IDC_MODULE_LIST ) );
            if (nCount)
            {
                SelectItem(nCurSel >= nCount ? nCount-1 : nCurSel );
            }
        }
    }

    void OnAddModule( WPARAM, LPARAM )
    {
        CAddModuleDialog::CData AddModuleData;
        AddModuleData.strName = TEXT("");
        AddModuleData.strTitle = TEXT("Add New Module");
        extern HINSTANCE g_hInstance;

        if (IDOK==DialogBoxParam( g_hInstance, MAKEINTRESOURCE(IDD_MODULENAME), m_hWnd, CAddModuleDialog::DialogProc, reinterpret_cast<LPARAM>(&AddModuleData)))
        {
            if (AddModuleData.strName.Length())
            {
                int nIndex = AddNewEntry( AddModuleData.strName, 0xFFFFFFFF );
                if (nIndex >= 0)
                {
                    SelectItem( nIndex );
                    SetFocus( GetDlgItem( m_hWnd, IDC_MASK ) );
                    SendDlgItemMessage( m_hWnd, IDC_MASK, EM_SETSEL, 0, static_cast<LPARAM>(-1) );
                }
            }
        }
    }

    LRESULT OnNotify( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
        {
            SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_DELETEITEM,IDC_MODULE_LIST,OnListDeleteItem);
            SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_ITEMCHANGED,IDC_MODULE_LIST,OnListItemChanged);
        }
        SC_END_NOTIFY_MESSAGE_HANDLERS();
    }

    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_COMMAND_HANDLERS()
        {
            SC_HANDLE_COMMAND(IDOK,OnOK);
            SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
            SC_HANDLE_COMMAND(IDC_DELETE_MODULE,OnDeleteModule);
            SC_HANDLE_COMMAND(IDC_ADD_MODULE,OnAddModule);
        }
        SC_END_COMMAND_HANDLERS();
    }

public:
    static INT_PTR WINAPI DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CDebugMaskDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
            SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadebug\sources.inc ===
!IF 0

Copyright (c) 1989-1991 Microsoft Corporation

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.

NOTE:   Commented description of this file is in \nt\public\oak\bin\sources.tpl

!ENDIF

!include        $(PROJECT_ROOT)\ui\uienv.inc
SOURCES_USED  = $(SOURCES_USED) $(PROJECT_ROOT)\ui\uienv.inc

TARGETNAME    = wiadebug
TARGETTYPE    = DYNLINK
TARGETPATH    = obj
TARGETPATHLIB = $(PROJECT_ROOT)\lib\$(PLATFORM_SUFFIX)
TARGETEXT     = dll
DLLDEF        = $O\wiadebug.def
DLLENTRY      = _DllMainCRTStartup




SOURCES=    ..\wiadebug.rc    \
            ..\wiadebug.cpp


TARGETLIBS=$(TARGETLIBS)\
        $(SDK_LIB_PATH)\dbghelp.lib
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadbgui\wiadbgui.h ===
/*******************************************************************************
*
*  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
*
*  TITLE:       WIADBGUI.H
*
*  VERSION:     1.0
*
*  AUTHOR:      ShaunIv
*
*  DATE:        5/11/1998
*
*  DESCRIPTION: Private interfaces for the debug window
*
*******************************************************************************/
#ifndef ___WIADBGUI_H_INCLUDED
#define ___WIADBGUI_H_INCLUDED

#include <windows.h>
#include "wiadebug.h"
#include "simreg.h"

#define DEBUGWINDOW_CLASSNAMEA  "WiaDebugWindow"
#define DEBUGWINDOW_CLASSNAMEW L"WiaDebugWindow"

#ifdef UNICODE
#define DEBUGWINDOW_CLASSNAME  DEBUGWINDOW_CLASSNAMEW
#else
#define DEBUGWINDOW_CLASSNAME  DEBUGWINDOW_CLASSNAMEA
#endif

#define DWM_ADDSTRING (WM_USER+1)

class CDebugWindowStringData
{
public:
    COLORREF            m_crBackground;
    COLORREF            m_crForeground;
    LPTSTR              m_pszString;

private:
    // No implementation
    CDebugWindowStringData(void);
    CDebugWindowStringData( const CDebugWindowStringData & );
    CDebugWindowStringData &operator=( const CDebugWindowStringData & );

private:
    CDebugWindowStringData( LPCTSTR pszString, COLORREF crBackground, COLORREF crForeground )
      : m_crBackground( crBackground == DEFAULT_DEBUG_COLOR ? GetSysColor(COLOR_WINDOW) : crBackground ),
        m_crForeground( crForeground == DEFAULT_DEBUG_COLOR ? GetSysColor(COLOR_WINDOWTEXT) : crForeground ),
        m_pszString(NULL)
    {
        if (m_pszString = new TCHAR[pszString ? lstrlen(pszString)+1 : 1])
        {
            lstrcpy( m_pszString, pszString );

            // Get rid of any trailing newlines
            for (int i=lstrlen(m_pszString);i>0;i--)
            {
                if (m_pszString[i-1] == TEXT('\n'))
                    m_pszString[i-1] = TEXT('\0');
                else break;
            }
        }
    }

public:
    static CDebugWindowStringData *Allocate( LPCTSTR pszString, COLORREF crBackground, COLORREF crForeground )
    {
        return new CDebugWindowStringData(pszString,crBackground,crForeground);
    }
    LPTSTR String(void) const
    {
        return m_pszString;
    }
    COLORREF BackgroundColor(void) const
    {
        return m_crBackground;
    }
    COLORREF ForegroundColor(void) const
    {
        return m_crForeground;
    }
    ~CDebugWindowStringData(void)
    {
        if (m_pszString)
            delete[] m_pszString;
    }
};


class CWiaDebugWindow
{
private:
    // No implementation
    CWiaDebugWindow(void);
    CWiaDebugWindow( const CWiaDebugWindow & );
    CWiaDebugWindow &operator=( const CWiaDebugWindow & );

private:
    // Per instance data
    HWND                m_hWnd;
    CGlobalDebugState   m_DebugData;
    HANDLE              m_hDebugUiMutex;

private:
    // Sole constructor
    explicit CWiaDebugWindow( HWND hWnd );

    // Destructor
    ~CWiaDebugWindow(void);

private:
    // Message handlers
    LRESULT OnCreate( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnSize( WPARAM, LPARAM );
    LRESULT OnMeasureItem( WPARAM, LPARAM );
    LRESULT OnDrawItem( WPARAM, LPARAM );
    LRESULT OnDeleteItem( WPARAM, LPARAM );
    LRESULT OnSetFocus( WPARAM, LPARAM );
    LRESULT OnAddString( WPARAM, LPARAM );
    LRESULT OnClose( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnCopyData( WPARAM, LPARAM );

    void OnCopy( WPARAM, LPARAM );
    void OnCut( WPARAM, LPARAM );
    void OnDelete( WPARAM, LPARAM );
    void OnSelectAll( WPARAM, LPARAM );
    void OnQuit( WPARAM, LPARAM );
    void OnFlags( WPARAM, LPARAM );

private:
    CDebugWindowStringData *GetStringData( int nIndex );

public:
    // Window Proc
    static LRESULT CALLBACK WndProc( HWND, UINT, WPARAM, LPARAM );

    // Miscellaneous
    static BOOL Register( HINSTANCE hInstance );
};

#endif // !defined(___WIADBGUI_H_INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\apdropt.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION
 *
 *  TITLE:       APDROPT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/22/2001
 *
 *  DESCRIPTION: Drop target for shell autoplay
 *
 *******************************************************************************/
#ifndef __APDROPT_H_INCLUDED
#define __APDROPT_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include <objbase.h>

class CWiaAutoPlayDropTarget : 
    public IDropTarget
{
private:
    LONG m_cRef;

public:
    CWiaAutoPlayDropTarget();
    ~CWiaAutoPlayDropTarget();

public:
    //
    // IUnknown
    //
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef();
    STDMETHODIMP_(ULONG) Release();
 
    //
    // IDropTarget ***
    //
    STDMETHODIMP DragEnter(IDataObject *pdtobj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
    STDMETHODIMP DragOver(DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
    STDMETHODIMP DragLeave();
    STDMETHODIMP Drop(IDataObject *pdtobj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
};

#endif // __APDROPT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadebug\wiadebug.cpp ===
/*******************************************************************************
*
*  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
*
*  TITLE:       WIADBG.CPP
*
*  VERSION:     1.0
*
*  AUTHOR:      ShaunIv
*
*  DATE:        9/6/1999
*
*  DESCRIPTION: Implementation of debug code
*
*******************************************************************************/

//
// need to define this so we don't get any recursion on our calls to "new"
//

#define  WIA_DONT_DO_LEAK_CHECKS 1

#include <nt.h>
#include <ntrtl.h>
#include <nturtl.h>

#include <windows.h>
#include "wianew.h"
#include "wiadebug.h"
#include "simstr.h"
#include "miscutil.h"
#include <shlguid.h>
#include <shlobj.h>
#include <shellapi.h>
#include <wia.h>
#include <dbghelp.h>

#define STACK_TRACE_DB_NAME     TEXT("ntdll!RtlpStackTraceDataBase")
#define SYMBOL_BUFFER_LEN       256
#define READVM(Addr, Buf, Sz)   ReadVa(__FILE__, __LINE__, (Globals.Target), (Addr), (Buf), (Sz))


#ifdef UNICODE
#define PrintDebugMessage PrintDebugMessageW
#else
#define PrintDebugMessage PrintDebugMessageA
#endif

/******************************************************************************
*
* Class definitions
*
******************************************************************************/

static CGlobalDebugState g_GlobalDebugState;

class CWiaDebugWindowThreadState
{
private:
    int   m_nIndentLevel;
    DWORD m_nDebugMask;

private:
    // Not implemented
    CWiaDebugWindowThreadState( const CWiaDebugWindowThreadState & );
    CWiaDebugWindowThreadState &operator=( const CWiaDebugWindowThreadState & );

public:
    CWiaDebugWindowThreadState(void);
    DWORD DebugMask(void) const;
    DWORD DebugMask( DWORD nDebugMask );
    int IndentLevel(void) const;
    int IncrementIndentLevel(void);
    int DecrementIndentLevel(void);
};



class CProcessGlobalDebugData
{
private:
    DWORD m_dwTlsIndex;
    BOOL  m_bSymLookupInitialized;
    PVOID m_pDatabase;
    HANDLE m_hProcess;
    CSimpleCriticalSection m_CriticalSection;

    typedef struct _STACK_NODE
    {
        LPVOID          pKeyAddress;
        size_t          Size;
        PVOID           aStack[32];
        ULONG           ulNumTraces;
        _STACK_NODE *   pNext;
    } STACK_NODE, *PSTACK_NODE;

    PSTACK_NODE m_pStackList;
    PSTACK_NODE m_pStackListEnd;
    LONG        m_Leaks;

private:
    static CProcessGlobalDebugData *m_pTheProcessGlobalDebugData;

private:
    // Not implemented
    CProcessGlobalDebugData( const CProcessGlobalDebugData & );
    CProcessGlobalDebugData &operator=( const CProcessGlobalDebugData & );

private:
    // Sole implemented constructor
    CProcessGlobalDebugData(void);

    // resolve symbols address into symbols names...
    LPTSTR GetSymbolicNameForAddress( ULONG_PTR Address );
    BOOL   IsSymbolLookupInitialized();


public:
    ~CProcessGlobalDebugData(void);
    DWORD TlsIndex(void) const;
    bool IsValid(void) const;
    void DoRecordAllocation( LPVOID pv, size_t Size );
    void DoRecordFree( LPVOID pv );
    void GenerateLeakReport( LPTSTR pszModuleName );
    HANDLE ProcessHandle( ) { return m_hProcess; }
    static CProcessGlobalDebugData *Allocate(void);
    static CProcessGlobalDebugData *ProcessData(void);
    static void Free(void);
};



/******************************************************************************
*
* Symbol functions
*
******************************************************************************/

BOOL
EnumerateModules(
    IN LPSTR ModuleName,
    IN ULONG_PTR BaseOfDll,
    IN PVOID UserContext
    )
/*
 * EnumerateModules
 *
 * Module enumeration 'proc' for imagehlp.  Call SymLoadModule on the
 * specified module and if that succeeds cache the module name.
 *
 * ModuleName is an LPSTR indicating the name of the module imagehlp is
 *      enumerating for us;
 * BaseOfDll is the load address of the DLL, which we don't care about, but
 *      SymLoadModule does;
 * UserContext is a pointer to the relevant SYMINFO, which identifies
 *      our connection.
 */
{
    DWORD64 Result;
    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();

    if (pProcessData && pProcessData->IsValid())
    {
        Result = SymLoadModule(pProcessData->ProcessHandle(),
                               NULL,             // hFile not used
                               NULL,             // use symbol search path
                               ModuleName,       // ModuleName from Enum
                               BaseOfDll,        // LoadAddress from Enum
                               0);               // Let ImageHlp figure out DLL size

        // SilviuC: need to understand exactly what does this function return

        if (Result)
        {
            return FALSE;
        }

        return TRUE;
    }

    return FALSE;

}





/******************************************************************************
*
* CWiaDebugWindowThreadState
*
******************************************************************************/
CWiaDebugWindowThreadState::CWiaDebugWindowThreadState(void)
  : m_nIndentLevel(0),
    m_nDebugMask(0xFFFFFFFF)
{
}


DWORD CWiaDebugWindowThreadState::DebugMask(void) const
{
    return m_nDebugMask;
}


DWORD CWiaDebugWindowThreadState::DebugMask( DWORD nDebugMask )
{
    DWORD nOldDebugMask = m_nDebugMask;
    m_nDebugMask = nDebugMask;
    return nOldDebugMask;
}


int CWiaDebugWindowThreadState::IndentLevel(void) const
{
    return m_nIndentLevel;
}


int CWiaDebugWindowThreadState::IncrementIndentLevel(void)
{
    return (++m_nIndentLevel);
}


int CWiaDebugWindowThreadState::DecrementIndentLevel(void)
{
    --m_nIndentLevel;
    if (m_nIndentLevel < 0)
        m_nIndentLevel = 0;
    return m_nIndentLevel;
}


/******************************************************************************
*
* CProcessGlobalDebugData
*
******************************************************************************/
// Sole implemented constructor
CProcessGlobalDebugData::CProcessGlobalDebugData(void)
  : m_dwTlsIndex(TLS_OUT_OF_INDEXES),
    m_hProcess(NULL),
    m_pDatabase(NULL),
    m_bSymLookupInitialized(FALSE),
    m_pStackList(NULL),
    m_pStackListEnd(NULL),
    m_Leaks(0)
{
    m_dwTlsIndex = TlsAlloc();
}



CProcessGlobalDebugData::~CProcessGlobalDebugData(void)
{
    if (m_dwTlsIndex != TLS_OUT_OF_INDEXES)
        TlsFree(m_dwTlsIndex);
    m_dwTlsIndex = TLS_OUT_OF_INDEXES;

    if (m_hProcess)
    {
        CloseHandle(m_hProcess);
        m_hProcess = NULL;
    }

    m_bSymLookupInitialized = FALSE;

    CAutoCriticalSection cs(m_CriticalSection);

    if (m_pStackList)
    {
        PSTACK_NODE pNextNode = NULL;
        for (PSTACK_NODE pNode = m_pStackList; pNode; )
        {
            if (pNode)
            {
                pNextNode = pNode->pNext;
                LocalFree( pNode );
            }

            pNode = pNextNode;
            pNextNode = NULL;
        }
    }
}



DWORD CProcessGlobalDebugData::TlsIndex(void) const
{
    return m_dwTlsIndex;
}



bool CProcessGlobalDebugData::IsValid(void) const
{
    return (m_dwTlsIndex != TLS_OUT_OF_INDEXES);
}


//
// Caller must free returned string via LocalFree
//

LPTSTR CProcessGlobalDebugData::GetSymbolicNameForAddress( ULONG_PTR Address )
{
    IMAGEHLP_MODULE ModuleInfo;
    TCHAR SymbolBuffer[512];
    PIMAGEHLP_SYMBOL Symbol;
    ULONG_PTR Offset;
    LPTSTR pName;
    BOOL bResult;

    if (!IsSymbolLookupInitialized())
    {
        return NULL;
    }

    if (Address == (ULONG_PTR)-1)
    {
        *SymbolBuffer = 0;
        lstrcpy( SymbolBuffer, TEXT("<< FUZZY STACK TRACE >>") );

        pName = (LPTSTR)LocalAlloc( LPTR, (lstrlen( SymbolBuffer ) + 1) * sizeof(TCHAR) );
        if (pName)
        {
            lstrcpy( pName, SymbolBuffer );
        }

        return pName;
    }

    ModuleInfo.SizeOfStruct = sizeof(IMAGEHLP_MODULE);

    if (!SymGetModuleInfo( m_hProcess, Address, &ModuleInfo ))
    {
        //
        // can't get the module info, so give back an error message...
        //

        *SymbolBuffer = 0;
        wsprintf( SymbolBuffer, TEXT("<< cannot identify module for address %p >>"), Address );

        pName = (LPTSTR)LocalAlloc( LPTR, (lstrlen( SymbolBuffer ) + 1) * sizeof(TCHAR) );
        if (pName)
        {
            lstrcpy( pName, SymbolBuffer );
        }

        return pName;
    }

    Symbol = (PIMAGEHLP_SYMBOL)SymbolBuffer;
    Symbol->MaxNameLength = 512 - sizeof(IMAGEHLP_SYMBOL) - 1;

    if (SymGetSymFromAddr( m_hProcess, Address, &Offset, Symbol ))
    {

        IMAGEHLP_LINE   LineInfo;
        DWORD           Displacement;
        BOOL            bLineInfoPresent;
        CHAR            szString[ 1024 ];


        bLineInfoPresent = SymGetLineFromAddr (m_hProcess,
                                               Address,
                                               &Displacement,
                                               &LineInfo);

        if (bLineInfoPresent)
        {
            //
            // construct string w/filename & linenumber...
            //

            wsprintfA( szString, "%s!%s (%s, line %u)", ModuleInfo.ModuleName, Symbol->Name, LineInfo.FileName, LineInfo.LineNumber );
        }
        else
        {
            //
            // no line numbers, so just show symbol + offset
            //

            wsprintfA( szString, "%s!%s+%08X", ModuleInfo.ModuleName, Symbol->Name, Offset );
        }

        INT iLen = (lstrlenA(szString)+1);

        pName = (LPTSTR) LocalAlloc( LPTR, (iLen * sizeof(TCHAR)) );

        if (pName == NULL)
        {
            return NULL;
        }

        #ifdef UNICODE
        MultiByteToWideChar( CP_ACP, 0, szString, -1, pName, iLen );
        #else
        lstrcpy( pName, szString);
        #endif

        return pName;
    }
    else
    {

        //
        // can't get the address info, so give back an error message...
        //

        *SymbolBuffer = 0;

        #ifdef UNICODE
        TCHAR szModW[ MAX_PATH ];

        MultiByteToWideChar( CP_ACP, 0, ModuleInfo.ModuleName, -1, szModW, MAX_PATH );
        wsprintf( SymbolBuffer, TEXT("<< incorrect symbols for module %s (address %p)"), szModW, Address );
        #else
        wsprintf( SymbolBuffer, TEXT("<< incorrect symbols for module %s (address %p)"), ModuleInfo.ModuleName, Address );
        #endif


        pName = (LPTSTR)LocalAlloc( LPTR, (lstrlen( SymbolBuffer ) + 1) * sizeof(TCHAR) );
        if (pName)
        {
            lstrcpy( pName, SymbolBuffer );
        }

        return pName;

    }

    return NULL;
}


void CProcessGlobalDebugData::DoRecordAllocation( LPVOID pv, size_t Size )
{
    if (!pv)
    {
        return;
    }

    PVOID StackTrace[32];
    ULONG Count;
    ULONG Index;
    ULONG Hash;

    //
    // Capture stack trace up to 32 items deep, but skip last three items
    // (because they'll always be the same)
    //

    Count = RtlCaptureStackBackTrace( 4, 32, StackTrace, NULL );

    if (Count)
    {
        CAutoCriticalSection cs(m_CriticalSection);

        //
        // Add this stack trace to list
        //

        PSTACK_NODE pNewNode = (PSTACK_NODE)LocalAlloc( LPTR, sizeof(STACK_NODE) );
        if (pNewNode)
        {
            pNewNode->pKeyAddress = pv;
            pNewNode->Size = Size;
            pNewNode->ulNumTraces = Count;
            memcpy( pNewNode->aStack, StackTrace, sizeof(pNewNode->aStack) );
        }

        if (!m_pStackList)
        {
            m_pStackList    = pNewNode;
            m_pStackListEnd = pNewNode;
        }
        else
        {
            m_pStackListEnd->pNext = pNewNode;
            m_pStackListEnd        = pNewNode;
        }

        m_Leaks++;
    }

}

void CProcessGlobalDebugData::DoRecordFree( LPVOID pv )
{
    if (!pv)
    {
        return;
    }

    CAutoCriticalSection cs(m_CriticalSection);

    //
    // Find item in allocation list...
    //

    PSTACK_NODE pNode  = NULL;
    PSTACK_NODE pTrail = NULL;

    for ( pNode = m_pStackList;
          pNode && (pNode->pKeyAddress!=pv);
          pTrail = pNode, pNode = pNode->pNext
         )
    {
        ;
    }

    if (pNode)
    {
        //
        // Remove this node from the list...
        //

        if (!pTrail)
        {
            //
            // It's the first item in list
            //

            m_pStackList = pNode->pNext;
            if (m_pStackListEnd == pNode)
            {
                m_pStackListEnd = NULL;
            }

            LocalFree( (HLOCAL) pNode );

            m_Leaks--;
        }
        else
        {
            //
            // We're somewhere in the middle of the list...
            //

            pTrail->pNext = pNode->pNext;
            if (m_pStackListEnd == pNode)
            {
                m_pStackListEnd = pTrail;
            }

            LocalFree( (HLOCAL) pNode );
            m_Leaks--;
        }

    }

}

void CProcessGlobalDebugData::GenerateLeakReport(LPTSTR pszModuleName)
{
    CAutoCriticalSection cs(m_CriticalSection);

    //
    // Report the numer of leaks...
    //



    TCHAR sz[ 512 ];
    TCHAR szNewLine[ 3 ];
    COLORREF crFore = static_cast<COLORREF>(0xFFFFFFFF), crBack = static_cast<COLORREF>(0xFFFFFFFF);
    if (m_Leaks > 0)
    {
        crFore = RGB(0x00,0x00,0x00);
        crBack = RGB(0xFF,0x7F,0x7F);
    }

    lstrcpy( szNewLine, TEXT("\n") );

    PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, szNewLine );


    wsprintf( sz, TEXT("**** Reporting leaks -- %d leaks found ****"), m_Leaks );


    PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, sz );

    //
    // Loop through the list...
    //

    LPTSTR      pSymbol = NULL;
    PSTACK_NODE pNode   = m_pStackList;
    INT i = 1;
    while (pNode)
    {
        PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, szNewLine );
        wsprintf( sz, TEXT("Leak %d - %d bytes allocated by:"), i++, pNode->Size );
        PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, sz );

        for (INT j=0; (j < (INT)pNode->ulNumTraces) && (pNode->aStack[j]); j++)
        {
            pSymbol = GetSymbolicNameForAddress( (ULONG_PTR)pNode->aStack[j] );
            if (pSymbol)
            {
                PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, pSymbol );
                LocalFree( (HLOCAL)pSymbol );
            }
            else
            {
                wsprintf( sz, TEXT("< could not resolve symbols for address %p >"),pNode->aStack[j] );
                PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, sz );
            }

        }

        pNode = pNode->pNext;
    }


    PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, szNewLine );
    PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, TEXT("**** End Leak Report ****") );
    PrintDebugMessage( 2, 0xFFFFFFFF, crFore, crBack, pszModuleName, szNewLine );

}


BOOL
CProcessGlobalDebugData::IsSymbolLookupInitialized()
{

    CAutoCriticalSection cs(m_CriticalSection);
    if (!m_bSymLookupInitialized)
    {
        if (m_hProcess)
        {
            CloseHandle( m_hProcess );
            m_hProcess = NULL;
        }

        m_hProcess = OpenProcess( PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,
                                  FALSE,
                                  GetCurrentProcessId()
                                 );

        if (m_hProcess)
        {
            if (SymInitialize( m_hProcess, NULL, TRUE ))
            {
                SymSetOptions(SYMOPT_CASE_INSENSITIVE |
                              SYMOPT_DEFERRED_LOADS |
                              SYMOPT_LOAD_LINES |
                              SYMOPT_UNDNAME);

                if (SymEnumerateModules( m_hProcess, EnumerateModules, m_hProcess))
                {
                    m_bSymLookupInitialized = TRUE;
                }


            }


        }
    }

    return m_bSymLookupInitialized;
}




CProcessGlobalDebugData *CProcessGlobalDebugData::Allocate(void)
{
    if (!m_pTheProcessGlobalDebugData)
        m_pTheProcessGlobalDebugData = new CProcessGlobalDebugData;
    return (m_pTheProcessGlobalDebugData);
}


CProcessGlobalDebugData *CProcessGlobalDebugData::ProcessData(void)
{
    return Allocate();
}



void CProcessGlobalDebugData::Free(void)
{
    if (m_pTheProcessGlobalDebugData)
    {
        delete m_pTheProcessGlobalDebugData;
        m_pTheProcessGlobalDebugData = NULL;
    }
}

CProcessGlobalDebugData *CProcessGlobalDebugData::m_pTheProcessGlobalDebugData = NULL;


/******************************************************************************
*
* DllMain
*
******************************************************************************/
BOOL WINAPI DllMain( HINSTANCE hInstance, DWORD dwReason, LPVOID )
{
    BOOL bResult = FALSE;
    switch (dwReason)
    {
    case DLL_PROCESS_ATTACH:
        {
            bResult = (CProcessGlobalDebugData::Allocate() != NULL);
        }
        break;

    case DLL_PROCESS_DETACH:
        {
            CProcessGlobalDebugData::Free();
            bResult = TRUE;
        }
        break;

    case DLL_THREAD_ATTACH:
        {
            CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
            if (pProcessData && pProcessData->IsValid())
            {
                CWiaDebugWindowThreadState *pThreadData = new CWiaDebugWindowThreadState;
                TlsSetValue( pProcessData->TlsIndex(), pThreadData );
                bResult = (pThreadData != NULL);
            }
        }
        break;

    case DLL_THREAD_DETACH:
        {
            CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
            if (pProcessData && pProcessData->IsValid())
            {
                CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState*>(TlsGetValue( pProcessData->TlsIndex()));
                if (pThreadData)
                {
                    delete pThreadData;
                    TlsSetValue( pProcessData->TlsIndex(), NULL );
                }
            }
            bResult = TRUE;
        }
        break;
    }
    return bResult;
}


/******************************************************************************
*
* Global Helper Functions
*
******************************************************************************/
static bool IsProcessDebugFlagSet( DWORD dwModuleMask )
{
    bool bResult = false;

    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (pThreadData)
        {
            bResult = ((pThreadData->DebugMask() & dwModuleMask) != 0);
        }
    }
    return (bResult);
}

static CWiaDebugWindowThreadState *ThreadData(void)
{
    CWiaDebugWindowThreadState *pThreadData = NULL;

    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (!pThreadData)
        {
            pThreadData = new CWiaDebugWindowThreadState;
            TlsSetValue( pProcessData->TlsIndex(), pThreadData );
        }
    }
    return (pThreadData);
}

template <class T>
static BOOL ContainsNonWhitespace( T *lpszMsg )
{
    for (T *lpszPtr = lpszMsg;*lpszPtr;lpszPtr++)
        if (*lpszPtr != ' ' && *lpszPtr != '\n' && *lpszPtr != '\r' && *lpszPtr != '\t')
            return TRUE;
        return FALSE;
}

static void InsertStackLevelIndent( LPSTR lpszMsg, int nStackLevel )
{
    const LPSTR lpszIndent = "  ";
    CHAR szTmp[1024], *pstrTmp, *pstrPtr;
    pstrTmp=szTmp;
    pstrPtr=lpszMsg;
    while (pstrPtr && *pstrPtr)
    {
        // if the current character is a newline and it isn't the
        // last character, append the indent string
        if (*pstrPtr=='\n' && ContainsNonWhitespace(pstrPtr))
        {
            *pstrTmp++ = *pstrPtr++;
            for (int i=0;i<WiaUiUtil::Min(nStackLevel,20);i++)
            {
                lstrcpyA(pstrTmp,lpszIndent);
                pstrTmp += lstrlenA(lpszIndent);
            }
        }
        // If this is the first character, insert the indent string before the
        // first character
        else if (pstrPtr == lpszMsg && ContainsNonWhitespace(pstrPtr))
        {
            for (int i=0;i<WiaUiUtil::Min(nStackLevel,20);i++)
            {
                lstrcpyA(pstrTmp,lpszIndent);
                pstrTmp += lstrlenA(lpszIndent);
            }
            *pstrTmp++ = *pstrPtr++;
        }
        else *pstrTmp++ = *pstrPtr++;
    }
    *pstrTmp = '\0';
    lstrcpyA( lpszMsg, szTmp );
}



static void InsertStackLevelIndent( LPWSTR lpszMsg, int nStackLevel )
{
    const LPWSTR lpszIndent = L"  ";
    WCHAR szTmp[1024], *pstrTmp, *pstrPtr;
    pstrTmp=szTmp;
    pstrPtr=lpszMsg;
    while (pstrPtr && *pstrPtr)
    {
        // if the current character is a newline and it isn't the
        // last character, append the indent string
        if (*pstrPtr==L'\n' && ContainsNonWhitespace(pstrPtr))
        {
            *pstrTmp++ = *pstrPtr++;
            for (int i=0;i<WiaUiUtil::Min(nStackLevel,20);i++)
            {
                lstrcpyW(pstrTmp,lpszIndent);
                pstrTmp += lstrlenW(lpszIndent);
            }
        }
        // If this is the first character, insert the indent string before the
        // first character
        else if (pstrPtr == lpszMsg && ContainsNonWhitespace(pstrPtr))
        {
            for (int i=0;i<WiaUiUtil::Min(nStackLevel,20);i++)
            {
                lstrcpyW(pstrTmp,lpszIndent);
                pstrTmp += lstrlenW(lpszIndent);
            }
            *pstrTmp++ = *pstrPtr++;
        }
        else *pstrTmp++ = *pstrPtr++;
    }
    *pstrTmp = L'\0';
    lstrcpyW( lpszMsg, szTmp );
}


static void PrependString( LPTSTR lpszTgt, LPCTSTR lpszStr )
{
    if (ContainsNonWhitespace(lpszTgt))
    {
        int iLen = lstrlen(lpszTgt);
        int iThreadIdLen = lstrlen(lpszStr);
        LPTSTR lpszTmp = (LPTSTR)LocalAlloc( LPTR, (iLen + iThreadIdLen + 2)*sizeof(TCHAR));
        if (lpszTmp)
        {
            lstrcpy( lpszTmp, lpszStr );
            lstrcat( lpszTmp, TEXT(" ") );
            lstrcat( lpszTmp, lpszTgt );
            lstrcpy( lpszTgt, lpszTmp );
            LocalFree(lpszTmp);
        }
    }
}


static void PrependThreadId( LPTSTR lpszMsg )
{
    if (ContainsNonWhitespace(lpszMsg))
    {
        TCHAR szThreadId[20];
        wsprintf( szThreadId, TEXT("[%08X]"), GetCurrentThreadId() );
        PrependString( lpszMsg, szThreadId );
    }
}


/******************************************************************************
*
* Exported Functions
*
******************************************************************************/
int WINAPI IncrementDebugIndentLevel(void)
{
    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (pThreadData)
        {
            return pThreadData->IncrementIndentLevel();
        }
    }
    return 0;
}

int WINAPI DecrementDebugIndentLevel(void)
{
    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (pThreadData)
        {
            return pThreadData->DecrementIndentLevel();
        }
    }
    return 0;
}


DWORD WINAPI GetDebugMask(void)
{
    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (pThreadData)
        {
            return pThreadData->DebugMask();
        }
    }
    return 0;
}


DWORD WINAPI SetDebugMask( DWORD dwNewMask )
{
    CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
    if (pProcessData && pProcessData->IsValid())
    {
        CWiaDebugWindowThreadState *pThreadData = reinterpret_cast<CWiaDebugWindowThreadState *>(TlsGetValue(pProcessData->TlsIndex()));
        if (pThreadData)
        {
            return pThreadData->DebugMask(dwNewMask);
        }
    }
    return 0;
}


BOOL WINAPI PrintDebugMessageW( DWORD dwSeverity, DWORD dwModuleMask, COLORREF crForeground, COLORREF crBackground, LPCWSTR pszModuleName, LPCWSTR pszMsg )
{
    BOOL bResult = FALSE;
#ifdef UNICODE
    CWiaDebugWindowThreadState *pThreadData = ThreadData();
    if (pThreadData && (dwSeverity || IsProcessDebugFlagSet(dwModuleMask)))
    {
        WCHAR szMsg[1024]=L"";

        // Print thread id
        wsprintfW( szMsg, L"[%ws-%08X] %ws", pszModuleName, GetCurrentThreadId(), pszMsg );

        InsertStackLevelIndent( szMsg, pThreadData->IndentLevel() );

        lstrcatW( szMsg, L"\n" );

        OutputDebugStringW( szMsg );

        // Make sure it is a valid window
        if (g_GlobalDebugState.DebugWindow())
        {
            CDebugStringMessageData DebugStringMessageData;
            DebugStringMessageData.crBackground = crBackground;
            DebugStringMessageData.crForeground = crForeground;
            DebugStringMessageData.bUnicode = TRUE;
            lstrcpyW( reinterpret_cast<LPWSTR>(DebugStringMessageData.szString), szMsg );

            COPYDATASTRUCT CopyDataStruct;
            CopyDataStruct.dwData = COPYDATA_DEBUG_MESSAGE_ID;
            CopyDataStruct.cbData = sizeof(DebugStringMessageData);
            CopyDataStruct.lpData = &DebugStringMessageData;

            g_GlobalDebugState.SendDebugWindowMessage( WM_COPYDATA, 0, reinterpret_cast<LPARAM>(&CopyDataStruct) );
        }
        bResult = TRUE;
    }
#else
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
#endif
    return bResult;
}


BOOL WINAPI PrintDebugMessageA( DWORD dwSeverity, DWORD dwModuleMask, COLORREF crForeground, COLORREF crBackground, LPCSTR pszModuleName, LPCSTR pszMsg )
{
    BOOL bResult = FALSE;
    CWiaDebugWindowThreadState *pThreadData = ThreadData();
    if (pThreadData && (dwSeverity || IsProcessDebugFlagSet(dwModuleMask)))
    {
        CHAR szMsg[1024]="";

        // Print thread id
        wsprintfA( szMsg, "[%hs-%08X] %hs", pszModuleName, GetCurrentThreadId(), pszMsg );

        InsertStackLevelIndent( szMsg, pThreadData->IndentLevel() );

        lstrcatA( szMsg, "\n" );

        OutputDebugStringA( szMsg );

        // Make sure it is a valid window
        if (g_GlobalDebugState.DebugWindow())
        {
            CDebugStringMessageData DebugStringMessageData;
            DebugStringMessageData.crBackground = crBackground;
            DebugStringMessageData.crForeground = crForeground;
            DebugStringMessageData.bUnicode = FALSE;
            lstrcpyA( static_cast<LPSTR>(DebugStringMessageData.szString), szMsg );

            COPYDATASTRUCT CopyDataStruct;
            CopyDataStruct.dwData = COPYDATA_DEBUG_MESSAGE_ID;
            CopyDataStruct.cbData = sizeof(DebugStringMessageData);
            CopyDataStruct.lpData = &DebugStringMessageData;

            g_GlobalDebugState.SendDebugWindowMessage( WM_COPYDATA, 0, reinterpret_cast<LPARAM>(&CopyDataStruct) );
        }
        bResult = TRUE;
    }
    return bResult;
}

COLORREF WINAPI AllocateDebugColor(void)
{
    DWORD dwIndex = g_GlobalDebugState.AllocateNextColorIndex();
    return g_GlobalDebugState.GetColorFromIndex( dwIndex );
}

#define GUID_DEBUG_ENTRY(guid)   { &guid, ""#guid }

static const struct
{
    const GUID *pGuid;
    LPCSTR      pszName;
}
s_GuidDebugStrings[] =
{
    GUID_DEBUG_ENTRY(IID_IClassFactory),
    GUID_DEBUG_ENTRY(IID_ICommDlgBrowser),
    GUID_DEBUG_ENTRY(IID_IContextMenu),
    GUID_DEBUG_ENTRY(IID_IContextMenu2),
    GUID_DEBUG_ENTRY(IID_IDataObject),
    GUID_DEBUG_ENTRY(IID_IDropTarget),
    GUID_DEBUG_ENTRY(IID_IEnumIDList),
    GUID_DEBUG_ENTRY(IID_IExtractIconA),
    GUID_DEBUG_ENTRY(IID_IExtractIconW),
    GUID_DEBUG_ENTRY(IID_IFileViewerA),
    GUID_DEBUG_ENTRY(IID_IFileViewerSite),
    GUID_DEBUG_ENTRY(IID_IFileViewerW),
    GUID_DEBUG_ENTRY(IID_IMoniker),
    GUID_DEBUG_ENTRY(IID_INewShortcutHookA),
    GUID_DEBUG_ENTRY(IID_INewShortcutHookW),
    GUID_DEBUG_ENTRY(IID_IOleWindow),
    GUID_DEBUG_ENTRY(IID_IPersist),
    GUID_DEBUG_ENTRY(IID_IPersistFile),
    GUID_DEBUG_ENTRY(IID_IPersistFolder),
    GUID_DEBUG_ENTRY(IID_IPersistFolder2),
    GUID_DEBUG_ENTRY(IID_IPropSheetPage),
    GUID_DEBUG_ENTRY(IID_IQueryInfo),
    GUID_DEBUG_ENTRY(IID_ISequentialStream),
    GUID_DEBUG_ENTRY(IID_IShellBrowser),
    GUID_DEBUG_ENTRY(IID_IShellCopyHookA),
    GUID_DEBUG_ENTRY(IID_IShellCopyHookW),
    GUID_DEBUG_ENTRY(IID_IShellDetails),
    GUID_DEBUG_ENTRY(IID_IShellExecuteHookA),
    GUID_DEBUG_ENTRY(IID_IShellExecuteHookW),
    GUID_DEBUG_ENTRY(IID_IShellExtInit),
    GUID_DEBUG_ENTRY(IID_IShellExtInit),
    GUID_DEBUG_ENTRY(IID_IShellFolder),
    GUID_DEBUG_ENTRY(IID_IShellIcon),
    GUID_DEBUG_ENTRY(IID_IShellIconOverlay),
    GUID_DEBUG_ENTRY(IID_IShellIconOverlay),
    GUID_DEBUG_ENTRY(IID_IShellLinkA),
    GUID_DEBUG_ENTRY(IID_IShellLinkW),
    GUID_DEBUG_ENTRY(IID_IShellPropSheetExt),
    GUID_DEBUG_ENTRY(IID_IShellPropSheetExt),
    GUID_DEBUG_ENTRY(IID_IShellView),
    GUID_DEBUG_ENTRY(IID_IShellView2),
    GUID_DEBUG_ENTRY(IID_IShellView2),
    GUID_DEBUG_ENTRY(IID_IStream),
    GUID_DEBUG_ENTRY(IID_IUniformResourceLocator),
    GUID_DEBUG_ENTRY(IID_IUnknown),
    GUID_DEBUG_ENTRY(WiaImgFmt_UNDEFINED),
    GUID_DEBUG_ENTRY(WiaImgFmt_MEMORYBMP),
    GUID_DEBUG_ENTRY(WiaImgFmt_BMP),
    GUID_DEBUG_ENTRY(WiaImgFmt_EMF),
    GUID_DEBUG_ENTRY(WiaImgFmt_WMF),
    GUID_DEBUG_ENTRY(WiaImgFmt_JPEG),
    GUID_DEBUG_ENTRY(WiaImgFmt_PNG),
    GUID_DEBUG_ENTRY(WiaImgFmt_GIF),
    GUID_DEBUG_ENTRY(WiaImgFmt_TIFF),
    GUID_DEBUG_ENTRY(WiaImgFmt_EXIF),
    GUID_DEBUG_ENTRY(WiaImgFmt_PHOTOCD),
    GUID_DEBUG_ENTRY(WiaImgFmt_FLASHPIX),
    GUID_DEBUG_ENTRY(WiaImgFmt_ICO),
    GUID_DEBUG_ENTRY(WiaImgFmt_CIFF),
    GUID_DEBUG_ENTRY(WiaImgFmt_PICT),
    GUID_DEBUG_ENTRY(WiaImgFmt_JPEG2K),
    GUID_DEBUG_ENTRY(WiaImgFmt_JPEG2KX),
    GUID_DEBUG_ENTRY(WiaImgFmt_RTF),
    GUID_DEBUG_ENTRY(WiaImgFmt_XML),
    GUID_DEBUG_ENTRY(WiaImgFmt_HTML),
    GUID_DEBUG_ENTRY(WiaImgFmt_TXT),
    GUID_DEBUG_ENTRY(WiaImgFmt_MPG),
    GUID_DEBUG_ENTRY(WiaImgFmt_AVI),
    GUID_DEBUG_ENTRY(WiaImgFmt_ASF),
    GUID_DEBUG_ENTRY(WiaImgFmt_SCRIPT),
    GUID_DEBUG_ENTRY(WiaImgFmt_EXEC),
    GUID_DEBUG_ENTRY(WiaImgFmt_UNICODE16),
    GUID_DEBUG_ENTRY(WiaImgFmt_DPOF),
    GUID_DEBUG_ENTRY(WiaAudFmt_WAV),
    GUID_DEBUG_ENTRY(WiaAudFmt_MP3),
    GUID_DEBUG_ENTRY(WiaAudFmt_AIFF),
    GUID_DEBUG_ENTRY(WiaAudFmt_WMA),
    GUID_DEBUG_ENTRY(WIA_EVENT_DEVICE_DISCONNECTED),
    GUID_DEBUG_ENTRY(WIA_EVENT_DEVICE_CONNECTED),
    GUID_DEBUG_ENTRY(WIA_EVENT_ITEM_DELETED),
    GUID_DEBUG_ENTRY(WIA_EVENT_ITEM_CREATED),
    GUID_DEBUG_ENTRY(WIA_EVENT_TREE_UPDATED),
    GUID_DEBUG_ENTRY(WIA_EVENT_VOLUME_INSERT),
    GUID_DEBUG_ENTRY(WIA_EVENT_SCAN_IMAGE),
    GUID_DEBUG_ENTRY(WIA_EVENT_SCAN_PRINT_IMAGE),
    GUID_DEBUG_ENTRY(WIA_EVENT_SCAN_FAX_IMAGE),
    GUID_DEBUG_ENTRY(WIA_EVENT_STORAGE_CREATED),
    GUID_DEBUG_ENTRY(WIA_EVENT_STORAGE_DELETED),
    GUID_DEBUG_ENTRY(WIA_EVENT_STI_PROXY),
    GUID_DEBUG_ENTRY(WIA_EVENT_HANDLER_NO_ACTION),
    GUID_DEBUG_ENTRY(WIA_EVENT_HANDLER_PROMPT),
    GUID_DEBUG_ENTRY(WIA_CMD_SYNCHRONIZE),
    GUID_DEBUG_ENTRY(WIA_CMD_TAKE_PICTURE),
    GUID_DEBUG_ENTRY(WIA_CMD_DELETE_ALL_ITEMS),
    GUID_DEBUG_ENTRY(WIA_CMD_CHANGE_DOCUMENT),
    GUID_DEBUG_ENTRY(WIA_CMD_UNLOAD_DOCUMENT),
    GUID_DEBUG_ENTRY(WIA_CMD_DIAGNOSTIC),
    GUID_DEBUG_ENTRY(WIA_CMD_DELETE_DEVICE_TREE),
    GUID_DEBUG_ENTRY(WIA_CMD_BUILD_DEVICE_TREE),
    GUID_DEBUG_ENTRY(IID_IWiaDevMgr),
    GUID_DEBUG_ENTRY(IID_IEnumWIA_DEV_INFO),
    GUID_DEBUG_ENTRY(IID_IWiaEventCallback),
    GUID_DEBUG_ENTRY(IID_IWiaDataCallback),
    GUID_DEBUG_ENTRY(IID_IWiaDataTransfer),
    GUID_DEBUG_ENTRY(IID_IWiaItem),
    GUID_DEBUG_ENTRY(IID_IWiaPropertyStorage),
    GUID_DEBUG_ENTRY(IID_IEnumWiaItem),
    GUID_DEBUG_ENTRY(IID_IEnumWIA_DEV_CAPS),
    GUID_DEBUG_ENTRY(IID_IEnumWIA_FORMAT_INFO),
    GUID_DEBUG_ENTRY(IID_IWiaLog),
    GUID_DEBUG_ENTRY(IID_IWiaLogEx),
    GUID_DEBUG_ENTRY(IID_IWiaNotifyDevMgr),
    GUID_DEBUG_ENTRY(LIBID_WiaDevMgr),
    GUID_DEBUG_ENTRY(CLSID_WiaDevMgr),
    GUID_DEBUG_ENTRY(CLSID_WiaLog),
    GUID_DEBUG_ENTRY(IID_IExtractImage2),
    GUID_DEBUG_ENTRY(IID_IExtractImage),
    GUID_DEBUG_ENTRY(IID_IShellDetails3),
    GUID_DEBUG_ENTRY(IID_IShellFolder2)
};

#define GUID_DEBUG_MAP_SIZE (sizeof(s_GuidDebugStrings)/sizeof(s_GuidDebugStrings[0]))

BOOL WINAPI GetStringFromGuidA( const IID *pGuid, LPSTR pszString, int nMaxLen )
{
    if (!pGuid || !pszString || !nMaxLen)
        return FALSE;
    for (int i=0;i<GUID_DEBUG_MAP_SIZE;i++)
    {
        if (*pGuid == *s_GuidDebugStrings[i].pGuid)
        {
            lstrcpynA( pszString, s_GuidDebugStrings[i].pszName, nMaxLen );
            return TRUE;
        }
    }
    LPOLESTR pszGuid = NULL;
    HRESULT hr = StringFromCLSID( *pGuid, &pszGuid );
    if (SUCCEEDED(hr))
    {
        if (pszGuid)
        {
            CSimpleStringAnsi strGuid = CSimpleStringConvert::AnsiString(CSimpleStringWide(pszGuid));
            lstrcpynA( pszString, strGuid, nMaxLen );
            CoTaskMemFree(pszGuid);
            return TRUE;
        }
    }
    return FALSE;
}


BOOL WINAPI GetStringFromGuidW( const IID *pGuid, LPWSTR pszString, int nMaxLen )
{
    BOOL bResult = FALSE;
#ifdef UNICODE
    if (!pGuid || !pszString || !nMaxLen)
        return FALSE;
    CHAR szGuid[MAX_PATH];
    if (!GetStringFromGuidA(pGuid,szGuid,MAX_PATH))
        return FALSE;
    lstrcpynW( pszString, CSimpleStringConvert::WideString(CSimpleStringAnsi(szGuid)), nMaxLen );
    bResult = TRUE;
#else
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
#endif
    return bResult;
}


#define MSG_DEBUG_ENTRY(msg)   { msg, ""#msg }

static const struct
{
    UINT       uMsg;
    LPCSTR     pszName;
}
s_MsgDebugStrings[] =
{
    MSG_DEBUG_ENTRY(BM_CLICK),
    MSG_DEBUG_ENTRY(BM_GETCHECK),
    MSG_DEBUG_ENTRY(BM_GETIMAGE),
    MSG_DEBUG_ENTRY(BM_GETSTATE),
    MSG_DEBUG_ENTRY(BM_SETCHECK),
    MSG_DEBUG_ENTRY(BM_SETIMAGE),
    MSG_DEBUG_ENTRY(BM_SETSTATE),
    MSG_DEBUG_ENTRY(BM_SETSTYLE),
    MSG_DEBUG_ENTRY(CB_ADDSTRING),
    MSG_DEBUG_ENTRY(CB_DELETESTRING),
    MSG_DEBUG_ENTRY(CB_DIR),
    MSG_DEBUG_ENTRY(CB_FINDSTRING),
    MSG_DEBUG_ENTRY(CB_FINDSTRINGEXACT),
    MSG_DEBUG_ENTRY(CB_GETCOMBOBOXINFO),
    MSG_DEBUG_ENTRY(CB_GETCOUNT),
    MSG_DEBUG_ENTRY(CB_GETCURSEL),
    MSG_DEBUG_ENTRY(CB_GETDROPPEDCONTROLRECT),
    MSG_DEBUG_ENTRY(CB_GETDROPPEDSTATE),
    MSG_DEBUG_ENTRY(CB_GETEDITSEL),
    MSG_DEBUG_ENTRY(CB_GETEXTENDEDUI),
    MSG_DEBUG_ENTRY(CB_GETITEMDATA),
    MSG_DEBUG_ENTRY(CB_GETITEMHEIGHT),
    MSG_DEBUG_ENTRY(CB_GETLBTEXT),
    MSG_DEBUG_ENTRY(CB_GETLBTEXTLEN),
    MSG_DEBUG_ENTRY(CB_GETLOCALE),
    MSG_DEBUG_ENTRY(CB_INITSTORAGE),
    MSG_DEBUG_ENTRY(CB_INSERTSTRING),
    MSG_DEBUG_ENTRY(CB_LIMITTEXT),
    MSG_DEBUG_ENTRY(CB_MSGMAX),
    MSG_DEBUG_ENTRY(CB_MSGMAX),
    MSG_DEBUG_ENTRY(CB_MSGMAX),
    MSG_DEBUG_ENTRY(CB_MSGMAX),
    MSG_DEBUG_ENTRY(CB_RESETCONTENT),
    MSG_DEBUG_ENTRY(CB_SELECTSTRING),
    MSG_DEBUG_ENTRY(CB_SETCURSEL),
    MSG_DEBUG_ENTRY(CB_SETDROPPEDWIDTH),
    MSG_DEBUG_ENTRY(CB_SETEDITSEL),
    MSG_DEBUG_ENTRY(CB_SETEXTENDEDUI),
    MSG_DEBUG_ENTRY(CB_SETITEMDATA),
    MSG_DEBUG_ENTRY(CB_SETITEMHEIGHT),
    MSG_DEBUG_ENTRY(CB_SETLOCALE),
    MSG_DEBUG_ENTRY(CB_SHOWDROPDOWN),
    MSG_DEBUG_ENTRY(EM_CANUNDO),
    MSG_DEBUG_ENTRY(EM_CHARFROMPOS),
    MSG_DEBUG_ENTRY(EM_EMPTYUNDOBUFFER),
    MSG_DEBUG_ENTRY(EM_FMTLINES),
    MSG_DEBUG_ENTRY(EM_GETFIRSTVISIBLELINE),
    MSG_DEBUG_ENTRY(EM_GETHANDLE),
    MSG_DEBUG_ENTRY(EM_GETIMESTATUS),
    MSG_DEBUG_ENTRY(EM_GETLIMITTEXT),
    MSG_DEBUG_ENTRY(EM_GETLINE),
    MSG_DEBUG_ENTRY(EM_GETLINECOUNT),
    MSG_DEBUG_ENTRY(EM_GETMARGINS),
    MSG_DEBUG_ENTRY(EM_GETMODIFY),
    MSG_DEBUG_ENTRY(EM_GETPASSWORDCHAR),
    MSG_DEBUG_ENTRY(EM_GETRECT),
    MSG_DEBUG_ENTRY(EM_GETSEL),
    MSG_DEBUG_ENTRY(EM_GETTHUMB),
    MSG_DEBUG_ENTRY(EM_GETWORDBREAKPROC),
    MSG_DEBUG_ENTRY(EM_LIMITTEXT),
    MSG_DEBUG_ENTRY(EM_LINEFROMCHAR),
    MSG_DEBUG_ENTRY(EM_LINEINDEX),
    MSG_DEBUG_ENTRY(EM_LINELENGTH),
    MSG_DEBUG_ENTRY(EM_LINESCROLL),
    MSG_DEBUG_ENTRY(EM_POSFROMCHAR),
    MSG_DEBUG_ENTRY(EM_REPLACESEL),
    MSG_DEBUG_ENTRY(EM_SCROLL),
    MSG_DEBUG_ENTRY(EM_SCROLLCARET),
    MSG_DEBUG_ENTRY(EM_SETHANDLE),
    MSG_DEBUG_ENTRY(EM_SETIMESTATUS),
    MSG_DEBUG_ENTRY(EM_SETMARGINS),
    MSG_DEBUG_ENTRY(EM_SETMODIFY),
    MSG_DEBUG_ENTRY(EM_SETPASSWORDCHAR),
    MSG_DEBUG_ENTRY(EM_SETREADONLY),
    MSG_DEBUG_ENTRY(EM_SETRECT),
    MSG_DEBUG_ENTRY(EM_SETRECTNP),
    MSG_DEBUG_ENTRY(EM_SETSEL),
    MSG_DEBUG_ENTRY(EM_SETTABSTOPS),
    MSG_DEBUG_ENTRY(EM_SETWORDBREAKPROC),
    MSG_DEBUG_ENTRY(EM_UNDO),
    MSG_DEBUG_ENTRY(LB_ADDFILE),
    MSG_DEBUG_ENTRY(LB_ADDSTRING),
    MSG_DEBUG_ENTRY(LB_DELETESTRING),
    MSG_DEBUG_ENTRY(LB_DIR),
    MSG_DEBUG_ENTRY(LB_FINDSTRING),
    MSG_DEBUG_ENTRY(LB_FINDSTRINGEXACT),
    MSG_DEBUG_ENTRY(LB_GETANCHORINDEX),
    MSG_DEBUG_ENTRY(LB_GETCARETINDEX),
    MSG_DEBUG_ENTRY(LB_GETCOUNT),
    MSG_DEBUG_ENTRY(LB_GETCURSEL),
    MSG_DEBUG_ENTRY(LB_GETHORIZONTALEXTENT),
    MSG_DEBUG_ENTRY(LB_GETITEMDATA),
    MSG_DEBUG_ENTRY(LB_GETITEMHEIGHT),
    MSG_DEBUG_ENTRY(LB_GETITEMRECT),
    MSG_DEBUG_ENTRY(LB_GETLISTBOXINFO),
    MSG_DEBUG_ENTRY(LB_GETLOCALE),
    MSG_DEBUG_ENTRY(LB_GETSEL),
    MSG_DEBUG_ENTRY(LB_GETSELCOUNT),
    MSG_DEBUG_ENTRY(LB_GETSELITEMS),
    MSG_DEBUG_ENTRY(LB_GETTEXT),
    MSG_DEBUG_ENTRY(LB_GETTEXTLEN),
    MSG_DEBUG_ENTRY(LB_GETTOPINDEX),
    MSG_DEBUG_ENTRY(LB_INITSTORAGE),
    MSG_DEBUG_ENTRY(LB_INSERTSTRING),
    MSG_DEBUG_ENTRY(LB_ITEMFROMPOINT),
    MSG_DEBUG_ENTRY(LB_MSGMAX),
    MSG_DEBUG_ENTRY(LB_MSGMAX),
    MSG_DEBUG_ENTRY(LB_MSGMAX),
    MSG_DEBUG_ENTRY(LB_MSGMAX),
    MSG_DEBUG_ENTRY(LB_RESETCONTENT),
    MSG_DEBUG_ENTRY(LB_SELECTSTRING),
    MSG_DEBUG_ENTRY(LB_SELITEMRANGE),
    MSG_DEBUG_ENTRY(LB_SELITEMRANGEEX),
    MSG_DEBUG_ENTRY(LB_SETANCHORINDEX),
    MSG_DEBUG_ENTRY(LB_SETCARETINDEX),
    MSG_DEBUG_ENTRY(LB_SETCOLUMNWIDTH),
    MSG_DEBUG_ENTRY(LB_SETCOUNT),
    MSG_DEBUG_ENTRY(LB_SETCURSEL),
    MSG_DEBUG_ENTRY(LB_SETHORIZONTALEXTENT),
    MSG_DEBUG_ENTRY(LB_SETITEMDATA),
    MSG_DEBUG_ENTRY(LB_SETITEMHEIGHT),
    MSG_DEBUG_ENTRY(LB_SETLOCALE),
    MSG_DEBUG_ENTRY(LB_SETSEL),
    MSG_DEBUG_ENTRY(LB_SETTABSTOPS),
    MSG_DEBUG_ENTRY(LB_SETTOPINDEX),
    MSG_DEBUG_ENTRY(PBT_APMBATTERYLOW),
    MSG_DEBUG_ENTRY(PBT_APMOEMEVENT),
    MSG_DEBUG_ENTRY(PBT_APMPOWERSTATUSCHANGE),
    MSG_DEBUG_ENTRY(PBT_APMQUERYSTANDBY),
    MSG_DEBUG_ENTRY(PBT_APMQUERYSTANDBYFAILED),
    MSG_DEBUG_ENTRY(PBT_APMQUERYSUSPEND),
    MSG_DEBUG_ENTRY(PBT_APMQUERYSUSPENDFAILED),
    MSG_DEBUG_ENTRY(PBT_APMRESUMEAUTOMATIC),
    MSG_DEBUG_ENTRY(PBT_APMRESUMECRITICAL),
    MSG_DEBUG_ENTRY(PBT_APMRESUMESTANDBY),
    MSG_DEBUG_ENTRY(PBT_APMRESUMESUSPEND),
    MSG_DEBUG_ENTRY(PBT_APMSTANDBY),
    MSG_DEBUG_ENTRY(PBT_APMSUSPEND),
    MSG_DEBUG_ENTRY(SBM_GETSCROLLBARINFO),
    MSG_DEBUG_ENTRY(SBM_GETSCROLLINFO),
    MSG_DEBUG_ENTRY(SBM_SETSCROLLINFO),
    MSG_DEBUG_ENTRY(STM_GETICON),
    MSG_DEBUG_ENTRY(STM_GETIMAGE),
    MSG_DEBUG_ENTRY(STM_MSGMAX),
    MSG_DEBUG_ENTRY(STM_SETICON),
    MSG_DEBUG_ENTRY(STM_SETIMAGE),
    MSG_DEBUG_ENTRY(WM_ACTIVATE),
    MSG_DEBUG_ENTRY(WM_ACTIVATEAPP),
    MSG_DEBUG_ENTRY(WM_APP),
    MSG_DEBUG_ENTRY(WM_APPCOMMAND),
    MSG_DEBUG_ENTRY(WM_ASKCBFORMATNAME),
    MSG_DEBUG_ENTRY(WM_CANCELJOURNAL),
    MSG_DEBUG_ENTRY(WM_CANCELMODE),
    MSG_DEBUG_ENTRY(WM_CAPTURECHANGED),
    MSG_DEBUG_ENTRY(WM_CHANGECBCHAIN),
    MSG_DEBUG_ENTRY(WM_CHANGEUISTATE),
    MSG_DEBUG_ENTRY(WM_CHAR),
    MSG_DEBUG_ENTRY(WM_CHARTOITEM),
    MSG_DEBUG_ENTRY(WM_CHILDACTIVATE),
    MSG_DEBUG_ENTRY(WM_CLEAR),
    MSG_DEBUG_ENTRY(WM_CLOSE),
    MSG_DEBUG_ENTRY(WM_COMMAND),
    MSG_DEBUG_ENTRY(WM_COMPACTING),
    MSG_DEBUG_ENTRY(WM_COMPAREITEM),
    MSG_DEBUG_ENTRY(WM_CONTEXTMENU),
    MSG_DEBUG_ENTRY(WM_COPY),
    MSG_DEBUG_ENTRY(WM_COPYDATA),
    MSG_DEBUG_ENTRY(WM_CREATE),
    MSG_DEBUG_ENTRY(WM_CTLCOLORBTN),
    MSG_DEBUG_ENTRY(WM_CTLCOLORDLG),
    MSG_DEBUG_ENTRY(WM_CTLCOLOREDIT),
    MSG_DEBUG_ENTRY(WM_CTLCOLORLISTBOX),
    MSG_DEBUG_ENTRY(WM_CTLCOLORMSGBOX),
    MSG_DEBUG_ENTRY(WM_CTLCOLORSCROLLBAR),
    MSG_DEBUG_ENTRY(WM_CTLCOLORSTATIC),
    MSG_DEBUG_ENTRY(WM_CUT),
    MSG_DEBUG_ENTRY(WM_DEADCHAR),
    MSG_DEBUG_ENTRY(WM_DELETEITEM),
    MSG_DEBUG_ENTRY(WM_DESTROY),
    MSG_DEBUG_ENTRY(WM_DESTROYCLIPBOARD),
    MSG_DEBUG_ENTRY(WM_DEVICECHANGE),
    MSG_DEBUG_ENTRY(WM_DEVMODECHANGE),
    MSG_DEBUG_ENTRY(WM_DISPLAYCHANGE),
    MSG_DEBUG_ENTRY(WM_DRAWCLIPBOARD),
    MSG_DEBUG_ENTRY(WM_DRAWITEM),
    MSG_DEBUG_ENTRY(WM_DROPFILES),
    MSG_DEBUG_ENTRY(WM_ENABLE),
    MSG_DEBUG_ENTRY(WM_ENDSESSION),
    MSG_DEBUG_ENTRY(WM_ENTERIDLE),
    MSG_DEBUG_ENTRY(WM_ENTERMENULOOP),
    MSG_DEBUG_ENTRY(WM_ENTERSIZEMOVE),
    MSG_DEBUG_ENTRY(WM_ERASEBKGND),
    MSG_DEBUG_ENTRY(WM_EXITMENULOOP),
    MSG_DEBUG_ENTRY(WM_EXITSIZEMOVE),
    MSG_DEBUG_ENTRY(WM_FONTCHANGE),
    MSG_DEBUG_ENTRY(WM_GETDLGCODE),
    MSG_DEBUG_ENTRY(WM_GETFONT),
    MSG_DEBUG_ENTRY(WM_GETHOTKEY),
    MSG_DEBUG_ENTRY(WM_GETICON),
    MSG_DEBUG_ENTRY(WM_GETMINMAXINFO),
    MSG_DEBUG_ENTRY(WM_GETOBJECT),
    MSG_DEBUG_ENTRY(WM_GETTEXT),
    MSG_DEBUG_ENTRY(WM_GETTEXTLENGTH),
    MSG_DEBUG_ENTRY(WM_HELP),
    MSG_DEBUG_ENTRY(WM_HOTKEY),
    MSG_DEBUG_ENTRY(WM_HSCROLL),
    MSG_DEBUG_ENTRY(WM_HSCROLLCLIPBOARD),
    MSG_DEBUG_ENTRY(WM_ICONERASEBKGND),
    MSG_DEBUG_ENTRY(WM_IME_CHAR),
    MSG_DEBUG_ENTRY(WM_IME_COMPOSITION),
    MSG_DEBUG_ENTRY(WM_IME_COMPOSITIONFULL),
    MSG_DEBUG_ENTRY(WM_IME_CONTROL),
    MSG_DEBUG_ENTRY(WM_IME_ENDCOMPOSITION),
    MSG_DEBUG_ENTRY(WM_IME_KEYDOWN),
    MSG_DEBUG_ENTRY(WM_IME_KEYLAST),
    MSG_DEBUG_ENTRY(WM_IME_KEYUP),
    MSG_DEBUG_ENTRY(WM_IME_NOTIFY),
    MSG_DEBUG_ENTRY(WM_IME_REQUEST),
    MSG_DEBUG_ENTRY(WM_IME_SELECT),
    MSG_DEBUG_ENTRY(WM_IME_SETCONTEXT),
    MSG_DEBUG_ENTRY(WM_IME_STARTCOMPOSITION),
    MSG_DEBUG_ENTRY(WM_INITDIALOG),
    MSG_DEBUG_ENTRY(WM_INITMENU),
    MSG_DEBUG_ENTRY(WM_INITMENUPOPUP),
    MSG_DEBUG_ENTRY(WM_INPUT),
    MSG_DEBUG_ENTRY(WM_INPUTLANGCHANGE),
    MSG_DEBUG_ENTRY(WM_INPUTLANGCHANGEREQUEST),
    MSG_DEBUG_ENTRY(WM_KEYDOWN),
    MSG_DEBUG_ENTRY(WM_KEYUP),
    MSG_DEBUG_ENTRY(WM_KILLFOCUS),
    MSG_DEBUG_ENTRY(WM_LBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_LBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_LBUTTONUP),
    MSG_DEBUG_ENTRY(WM_MBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_MBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_MBUTTONUP),
    MSG_DEBUG_ENTRY(WM_MDIACTIVATE),
    MSG_DEBUG_ENTRY(WM_MDICASCADE),
    MSG_DEBUG_ENTRY(WM_MDICREATE),
    MSG_DEBUG_ENTRY(WM_MDIDESTROY),
    MSG_DEBUG_ENTRY(WM_MDIGETACTIVE),
    MSG_DEBUG_ENTRY(WM_MDIICONARRANGE),
    MSG_DEBUG_ENTRY(WM_MDIMAXIMIZE),
    MSG_DEBUG_ENTRY(WM_MDINEXT),
    MSG_DEBUG_ENTRY(WM_MDIREFRESHMENU),
    MSG_DEBUG_ENTRY(WM_MDIRESTORE),
    MSG_DEBUG_ENTRY(WM_MDISETMENU),
    MSG_DEBUG_ENTRY(WM_MDITILE),
    MSG_DEBUG_ENTRY(WM_MEASUREITEM),
    MSG_DEBUG_ENTRY(WM_MENUCHAR),
    MSG_DEBUG_ENTRY(WM_MENUCOMMAND),
    MSG_DEBUG_ENTRY(WM_MENUDRAG),
    MSG_DEBUG_ENTRY(WM_MENUGETOBJECT),
    MSG_DEBUG_ENTRY(WM_MENURBUTTONUP),
    MSG_DEBUG_ENTRY(WM_MENUSELECT),
    MSG_DEBUG_ENTRY(WM_MOUSEACTIVATE),
    MSG_DEBUG_ENTRY(WM_MOUSEHOVER),
    MSG_DEBUG_ENTRY(WM_MOUSELEAVE),
    MSG_DEBUG_ENTRY(WM_MOUSEMOVE),
    MSG_DEBUG_ENTRY(WM_MOUSEWHEEL),
    MSG_DEBUG_ENTRY(WM_MOVE),
    MSG_DEBUG_ENTRY(WM_MOVING),
    MSG_DEBUG_ENTRY(WM_NCACTIVATE),
    MSG_DEBUG_ENTRY(WM_NCCALCSIZE),
    MSG_DEBUG_ENTRY(WM_NCCREATE),
    MSG_DEBUG_ENTRY(WM_NCDESTROY),
    MSG_DEBUG_ENTRY(WM_NCHITTEST),
    MSG_DEBUG_ENTRY(WM_NCLBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_NCLBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_NCLBUTTONUP),
    MSG_DEBUG_ENTRY(WM_NCMBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_NCMBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_NCMBUTTONUP),
    MSG_DEBUG_ENTRY(WM_NCMOUSEHOVER),
    MSG_DEBUG_ENTRY(WM_NCMOUSELEAVE),
    MSG_DEBUG_ENTRY(WM_NCMOUSEMOVE),
    MSG_DEBUG_ENTRY(WM_NCPAINT),
    MSG_DEBUG_ENTRY(WM_NCRBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_NCRBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_NCRBUTTONUP),
    MSG_DEBUG_ENTRY(WM_NCXBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_NCXBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_NCXBUTTONUP),
    MSG_DEBUG_ENTRY(WM_NEXTDLGCTL),
    MSG_DEBUG_ENTRY(WM_NEXTMENU),
    MSG_DEBUG_ENTRY(WM_NOTIFY),
    MSG_DEBUG_ENTRY(WM_NOTIFYFORMAT),
    MSG_DEBUG_ENTRY(WM_NULL),
    MSG_DEBUG_ENTRY(WM_PAINT),
    MSG_DEBUG_ENTRY(WM_PAINTCLIPBOARD),
    MSG_DEBUG_ENTRY(WM_PAINTICON),
    MSG_DEBUG_ENTRY(WM_PALETTECHANGED),
    MSG_DEBUG_ENTRY(WM_PALETTEISCHANGING),
    MSG_DEBUG_ENTRY(WM_PARENTNOTIFY),
    MSG_DEBUG_ENTRY(WM_PASTE),
    MSG_DEBUG_ENTRY(WM_POWER),
    MSG_DEBUG_ENTRY(WM_POWERBROADCAST),
    MSG_DEBUG_ENTRY(WM_PRINT),
    MSG_DEBUG_ENTRY(WM_PRINTCLIENT),
    MSG_DEBUG_ENTRY(WM_QUERYDRAGICON),
    MSG_DEBUG_ENTRY(WM_QUERYENDSESSION),
    MSG_DEBUG_ENTRY(WM_QUERYNEWPALETTE),
    MSG_DEBUG_ENTRY(WM_QUERYOPEN),
    MSG_DEBUG_ENTRY(WM_QUERYUISTATE),
    MSG_DEBUG_ENTRY(WM_QUEUESYNC),
    MSG_DEBUG_ENTRY(WM_QUIT),
    MSG_DEBUG_ENTRY(WM_RBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_RBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_RBUTTONUP),
    MSG_DEBUG_ENTRY(WM_RENDERALLFORMATS),
    MSG_DEBUG_ENTRY(WM_RENDERFORMAT),
    MSG_DEBUG_ENTRY(WM_SETCURSOR),
    MSG_DEBUG_ENTRY(WM_SETFOCUS),
    MSG_DEBUG_ENTRY(WM_SETFONT),
    MSG_DEBUG_ENTRY(WM_SETHOTKEY),
    MSG_DEBUG_ENTRY(WM_SETICON),
    MSG_DEBUG_ENTRY(WM_SETREDRAW),
    MSG_DEBUG_ENTRY(WM_SETTEXT),
    MSG_DEBUG_ENTRY(WM_SHOWWINDOW),
    MSG_DEBUG_ENTRY(WM_SIZE),
    MSG_DEBUG_ENTRY(WM_SIZECLIPBOARD),
    MSG_DEBUG_ENTRY(WM_SIZING),
    MSG_DEBUG_ENTRY(WM_SPOOLERSTATUS),
    MSG_DEBUG_ENTRY(WM_STYLECHANGED),
    MSG_DEBUG_ENTRY(WM_STYLECHANGING),
    MSG_DEBUG_ENTRY(WM_SYNCPAINT),
    MSG_DEBUG_ENTRY(WM_SYSCHAR),
    MSG_DEBUG_ENTRY(WM_SYSCOLORCHANGE),
    MSG_DEBUG_ENTRY(WM_SYSCOMMAND),
    MSG_DEBUG_ENTRY(WM_SYSDEADCHAR),
    MSG_DEBUG_ENTRY(WM_SYSKEYDOWN),
    MSG_DEBUG_ENTRY(WM_SYSKEYUP),
    MSG_DEBUG_ENTRY(WM_TCARD),
    MSG_DEBUG_ENTRY(WM_THEMECHANGED),
    MSG_DEBUG_ENTRY(WM_TIMECHANGE),
    MSG_DEBUG_ENTRY(WM_TIMER),
    MSG_DEBUG_ENTRY(WM_UNDO),
    MSG_DEBUG_ENTRY(WM_UNICHAR),
    MSG_DEBUG_ENTRY(WM_UNINITMENUPOPUP),
    MSG_DEBUG_ENTRY(WM_UPDATEUISTATE),
    MSG_DEBUG_ENTRY(WM_USER),
    MSG_DEBUG_ENTRY(WM_USERCHANGED),
    MSG_DEBUG_ENTRY(WM_VKEYTOITEM),
    MSG_DEBUG_ENTRY(WM_VSCROLL),
    MSG_DEBUG_ENTRY(WM_VSCROLLCLIPBOARD),
    MSG_DEBUG_ENTRY(WM_WINDOWPOSCHANGED),
    MSG_DEBUG_ENTRY(WM_WINDOWPOSCHANGING),
    MSG_DEBUG_ENTRY(WM_WININICHANGE),
    MSG_DEBUG_ENTRY(WM_WTSSESSION_CHANGE),
    MSG_DEBUG_ENTRY(WM_XBUTTONDBLCLK),
    MSG_DEBUG_ENTRY(WM_XBUTTONDOWN),
    MSG_DEBUG_ENTRY(WM_XBUTTONUP)
};

#define MSG_DEBUG_MAP_SIZE (sizeof(s_MsgDebugStrings)/sizeof(s_MsgDebugStrings[0]))

BOOL WINAPI GetStringFromMsgA( UINT uMsg, LPSTR pszString, int nMaxLen )
{
    if (!pszString || !nMaxLen)
    {
        return FALSE;
    }
    for (int i=0;i<MSG_DEBUG_MAP_SIZE;i++)
    {
        if (uMsg == s_MsgDebugStrings[i].uMsg)
        {
            lstrcpynA( pszString, s_MsgDebugStrings[i].pszName, nMaxLen );
            return TRUE;
        }
    }
    
    lstrcpynA( pszString, CSimpleStringAnsi().Format("Unknown Message: 0x%08X", uMsg ), nMaxLen );

    return TRUE;
}


BOOL WINAPI GetStringFromMsgW( UINT uMsg, LPWSTR pszString, int nMaxLen )
{
    BOOL bResult = FALSE;
#ifdef UNICODE
    if (!pszString || !nMaxLen)
    {
        return FALSE;
    }
    CHAR szMessage[MAX_PATH];
    if (!GetStringFromMsgA(uMsg,szMessage,MAX_PATH))
    {
        return FALSE;
    }
    lstrcpynW( pszString, CSimpleStringConvert::WideString(CSimpleStringAnsi(szMessage)), nMaxLen );
    bResult = TRUE;
#else
    SetLastError(ERROR_CALL_NOT_IMPLEMENTED);
#endif
    return bResult;
}


VOID WINAPI DoRecordAllocation( LPVOID pv, size_t Size )
{
    if (pv)
    {
        CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
        if (pProcessData && pProcessData->IsValid())
        {
            pProcessData->DoRecordAllocation( pv, Size );
        }
    }
}


VOID WINAPI DoRecordFree( LPVOID pv )
{
    if (pv)
    {
        CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
        if (pProcessData && pProcessData->IsValid())
        {
            pProcessData->DoRecordFree( pv );
        }
    }
}

VOID WINAPI DoReportLeaks( LPTSTR pszModuleName )
{
    if (pszModuleName)
    {
        CProcessGlobalDebugData *pProcessData = CProcessGlobalDebugData::ProcessData();
        if (pProcessData && pProcessData->IsValid())
        {
            pProcessData->GenerateLeakReport( pszModuleName );
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadbgui\wiadbgui.cpp ===
/*******************************************************************************
*
*  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
*
*  TITLE:       WIADBGUI.CPP
*
*  VERSION:     1.0
*
*  AUTHOR:      ShaunIv
*
*  DATE:        5/11/1998
*
*  DESCRIPTION: Private interfaces for the debug window
*
*******************************************************************************/
#include <windows.h>
#include <commctrl.h>
#include <shfusion.h>
#define IN_WIA_DEBUG_CODE 1
#include "wianew.h"
#include "wiadbgui.h"
#include "simstr.h"
#include "simcrack.h"
#include "waitcurs.h"
#include "resource.h"
#include "dbgmask.h"

HINSTANCE g_hInstance;

#define ID_LISTBOX 1000

/*
 * Constructor
 */
CWiaDebugWindow::CWiaDebugWindow( HWND hWnd )
  : m_hWnd(hWnd),
    m_hDebugUiMutex(NULL)
{
}

/*
 * Destructor
 */
CWiaDebugWindow::~CWiaDebugWindow(void)
{
}

/*
 * Add a string/color to the list and set the selection to the last
 * string, if the last string was already selected.
 */
LRESULT CWiaDebugWindow::OnAddString( WPARAM wParam, LPARAM lParam )
{
    HWND hWndListBox = GetDlgItem(m_hWnd,ID_LISTBOX);
    if (hWndListBox)
    {
        LRESULT nIndex = SendMessage( hWndListBox, LB_ADDSTRING, 0, lParam );
        // If the listbox is full, remove the first 1000 items
        if (nIndex == LB_ERR)
        {
            for (int i=0;i<1000;i++)
            {
                // Remove the 0th item, 1000 times
                SendMessage( hWndListBox, LB_DELETESTRING, 0, 0 );
            }
            nIndex = SendMessage( hWndListBox, LB_ADDSTRING, 0, lParam );
        }
        if (nIndex != LB_ERR)
        {
            int nSelCount = static_cast<int>(SendMessage( hWndListBox, LB_GETSELCOUNT, 0, 0 ));
            if (nSelCount == 0)
            {
                SendMessage(hWndListBox, LB_SETSEL, TRUE, nIndex );
                SendMessage(hWndListBox, LB_SETTOPINDEX, nIndex, 0 );
            }
            else if (nSelCount == 1)
            {
                int nSelIndex;
                SendMessage( hWndListBox, LB_GETSELITEMS, static_cast<WPARAM>(1), reinterpret_cast<LPARAM>(&nSelIndex) );
                if (nSelIndex == nIndex-1)
                {
                    SendMessage(hWndListBox, LB_SETSEL, FALSE, -1 );
                    SendMessage(hWndListBox, LB_SETSEL, TRUE, nIndex );
                    SendMessage(hWndListBox, LB_SETTOPINDEX, nIndex, 0 );
                }
            }
            UpdateWindow(hWndListBox);
            return(nIndex);
        }
    }
    return(-1);
}


/*
 * Copy selected strings in the listbox to the clipboard
 */
void CWiaDebugWindow::OnCopy( WPARAM, LPARAM )
{
    CWaitCursor wc;
    HWND hwndList = GetDlgItem( m_hWnd, ID_LISTBOX );
    if (hwndList)
    {
        int nSelCount;
        nSelCount = (int)SendMessage(hwndList,LB_GETSELCOUNT,0,0);
        if (nSelCount)
        {
            int *nSelIndices = new int[nSelCount];
            if (nSelIndices)
            {
                if (nSelCount == SendMessage( hwndList, LB_GETSELITEMS, (WPARAM)nSelCount, (LPARAM)nSelIndices ))
                {
                    int nTotalLength = 0;
                    for (int i=0;i<nSelCount;i++)
                    {
                        CDebugWindowStringData *pData = GetStringData(nSelIndices[i]);
                        if (pData)
                        {
                            int nLineCount = 1;
                            int nLen = pData->String() ? lstrlen(pData->String()) : 0;
                            for (LPTSTR pszTmpPtr = pData->String();pszTmpPtr && *pszTmpPtr;pszTmpPtr++)
                            {
                                if (TEXT('\n') == *pszTmpPtr)
                                {
                                    nLineCount++;
                                }
                            }
                            nTotalLength += (nLen + (nLineCount * 2));
                        }
                    }
                    HGLOBAL hGlobal = GlobalAlloc(GMEM_DDESHARE,(nTotalLength+1)*sizeof(TCHAR));
                    if (hGlobal)
                    {
                        LPTSTR pszBuffer = (LPTSTR)GlobalLock(hGlobal);
                        if (pszBuffer)
                        {
                            LPTSTR pszTgt = pszBuffer;
                            for (i = 0;i<nSelCount;i++)
                            {
                                CDebugWindowStringData *pData = GetStringData(nSelIndices[i]);
                                if (pData)
                                {
                                    for (LPTSTR pszSrc = pData->String();pszSrc && *pszSrc;pszSrc++)
                                    {
                                        if (TEXT('\n') == *pszSrc)
                                            *pszTgt++ = TEXT('\r');
                                        if (TEXT('\r') != *pszSrc) // Discard \r
                                            *pszTgt++ = *pszSrc;
                                    }
                                    if (i<nSelCount-1)
                                    {
                                        // Don't append a \r\n to the last string
                                        *pszTgt++ = TEXT('\r');
                                        *pszTgt++ = TEXT('\n');
                                    }
                                }
                            }
                            *pszTgt = TEXT('\0');
                            GlobalUnlock(pszBuffer);
                            if (OpenClipboard(hwndList))
                            {
                                EmptyClipboard();
                                SetClipboardData(sizeof(TCHAR)==sizeof(char) ? CF_TEXT : CF_UNICODETEXT,hGlobal);
                                CloseClipboard();
                            }
                        }
                    }
                }
                delete[] nSelIndices;
            }
        }
    }
}


/*
 * Delete selected strings
 */
void CWiaDebugWindow::OnDelete( WPARAM, LPARAM )
{
    CWaitCursor wc;
    HWND hwndList = GetDlgItem( m_hWnd, ID_LISTBOX );
    if (hwndList)
    {
        int nSelCount;
        nSelCount = (int)SendMessage(hwndList,LB_GETSELCOUNT,0,0);
        if (nSelCount)
        {
            int *nSelIndices = new int[nSelCount];
            if (nSelIndices)
            {
                if (nSelCount == SendMessage( hwndList, LB_GETSELITEMS, (WPARAM)nSelCount, (LPARAM)nSelIndices ))
                {
                    SendMessage( hwndList, WM_SETREDRAW, 0, 0 );
                    for (int i=0,nOffset=0;i<nSelCount;i++,nOffset++)
                    {
                        SendMessage( hwndList, LB_DELETESTRING, nSelIndices[i]-nOffset, 0 );
                    }
                    int nCount = (int)SendMessage( hwndList, LB_GETCOUNT, 0, 0 );
                    int nSel = nSelIndices[i-1]-nOffset+1;
                    if (nSel >= nCount)
                        nSel = nCount-1;
                    SendMessage( hwndList, LB_SETSEL, TRUE, nSel );
                    SendMessage( hwndList, WM_SETREDRAW, 1, 0 );
                    InvalidateRect( hwndList, NULL, FALSE );
                    UpdateWindow( hwndList );
                }
                delete[] nSelIndices;
            }
        }
    }
}


void CWiaDebugWindow::OnCut( WPARAM, LPARAM )
{
    SendMessage( m_hWnd, WM_COMMAND, ID_COPY, 0 );
    SendMessage( m_hWnd, WM_COMMAND, ID_DELETE, 0 );
}

/*
 * Respond to WM_CREATE
 */
LRESULT CWiaDebugWindow::OnCreate( WPARAM, LPARAM lParam )
{

    LPCREATESTRUCT pCreateStruct = reinterpret_cast<LPCREATESTRUCT>(lParam);

    m_hDebugUiMutex = CreateMutex( NULL, FALSE, WIADEBUG_DEBUGCLIENT_MUTEXNAME );
    if (!m_hDebugUiMutex)
    {
        HWND hWndOtherDbgWindow = m_DebugData.DebugWindow();
        if (hWndOtherDbgWindow)
            SetForegroundWindow(hWndOtherDbgWindow);
        return -1;
    }

    DWORD dwWait = WaitForSingleObject( m_hDebugUiMutex, 1000 );
    if (dwWait != WAIT_OBJECT_0)
    {
        HWND hWndOtherDbgWindow = m_DebugData.DebugWindow();
        if (hWndOtherDbgWindow)
            SetForegroundWindow(hWndOtherDbgWindow);
        return -1;
    }

    // Set the debug window
    if (!m_DebugData.DebugWindow(m_hWnd))
    {
        MessageBox( m_hWnd, TEXT("Unable to register debug window"), TEXT("Error"), MB_ICONHAND );
        return -1;
    }

    //
    // Set the icons
    //
    SendMessage( m_hWnd, WM_SETICON, ICON_BIG, (LPARAM)LoadImage(pCreateStruct->hInstance,MAKEINTRESOURCE(IDI_BUG),IMAGE_ICON,GetSystemMetrics(SM_CXICON),GetSystemMetrics(SM_CYICON),LR_DEFAULTCOLOR) );
    SendMessage( m_hWnd, WM_SETICON, ICON_SMALL, (LPARAM)LoadImage(pCreateStruct->hInstance,MAKEINTRESOURCE(IDI_BUG),IMAGE_ICON,GetSystemMetrics(SM_CXSMICON),GetSystemMetrics(SM_CYSMICON),LR_DEFAULTCOLOR) );

    // Create the listbox
    HWND hWndList = CreateWindowEx(WS_EX_CLIENTEDGE,TEXT("LISTBOX"), NULL,
                                   WS_CHILD|WS_VISIBLE|LBS_USETABSTOPS|WS_VSCROLL|LBS_NOINTEGRALHEIGHT|LBS_OWNERDRAWVARIABLE|LBS_EXTENDEDSEL|WS_HSCROLL
                                   , 0, 0, 0, 0, m_hWnd, reinterpret_cast<HMENU>(ID_LISTBOX), pCreateStruct->hInstance, NULL );
    if (hWndList == NULL)
        return(-1);

    // Set the font to a more readable fixed font
    SendMessage( hWndList, WM_SETFONT, reinterpret_cast<WPARAM>(GetStockObject(ANSI_FIXED_FONT)), MAKELPARAM(TRUE,0));
    SendMessage( hWndList, LB_SETHORIZONTALEXTENT, 32767, 0);


    return(0);
}

LRESULT CWiaDebugWindow::OnDestroy( WPARAM, LPARAM )
{
    DWORD dwWait = WaitForSingleObject( m_hDebugUiMutex, 1000 );
    if (dwWait == WAIT_OBJECT_0)
    {
        m_DebugData.DebugWindow(NULL);
        ReleaseMutex(m_hDebugUiMutex);
    }
    return 0;
}

/*
 * Respond to WM_SIZE
 */
LRESULT CWiaDebugWindow::OnSize( WPARAM wParam, LPARAM lParam )
{
    if (SIZE_MAXIMIZED == wParam || SIZE_RESTORED == wParam)
        MoveWindow(GetDlgItem(m_hWnd,ID_LISTBOX), 0, 0, LOWORD(lParam), HIWORD(lParam), TRUE);
    return(0);
}


CDebugWindowStringData *CWiaDebugWindow::GetStringData( int nIndex )
{
    return reinterpret_cast<CDebugWindowStringData*>(SendDlgItemMessage( m_hWnd, ID_LISTBOX, LB_GETITEMDATA, nIndex, 0 ));
}

LRESULT CWiaDebugWindow::OnDeleteItem( WPARAM wParam, LPARAM lParam )
{
    if (wParam == ID_LISTBOX)
    {
        LPDELETEITEMSTRUCT pDeleteItemStruct = reinterpret_cast<LPDELETEITEMSTRUCT>(lParam);
        if (pDeleteItemStruct)
        {
            CDebugWindowStringData *pDebugWindowStringData = reinterpret_cast<CDebugWindowStringData*>(pDeleteItemStruct->itemData);
            if (pDebugWindowStringData)
            {
                delete pDebugWindowStringData;
            }
        }
    }
    return 0;
}


/*
 * Respond to WM_MEASUREITEM
 */
LRESULT CWiaDebugWindow::OnMeasureItem( WPARAM wParam, LPARAM lParam )
{
    if (wParam == ID_LISTBOX)
    {
        LPMEASUREITEMSTRUCT pMeasureItemStruct = reinterpret_cast<LPMEASUREITEMSTRUCT>(lParam);
        if (pMeasureItemStruct)
        {
            // Get the font
            HFONT hFontWnd = NULL;
            HWND hWndListBox = GetDlgItem(m_hWnd,ID_LISTBOX);
            if (hWndListBox)
                hFontWnd = (HFONT)::SendMessage( hWndListBox, WM_GETFONT, 0, 0 );
            if (!hFontWnd)
                hFontWnd = (HFONT)::GetStockObject(SYSTEM_FONT);

            HDC hDC = GetDC( hWndListBox );
            if (hDC)
            {
                HFONT hOldFont = (HFONT)::SelectObject( hDC, (HGDIOBJ)hFontWnd );
                TEXTMETRIC tm;
                GetTextMetrics( hDC, &tm );

                int nLineHeight = tm.tmHeight + tm.tmExternalLeading + 2;
                int nLineCount = 1;

                if (pMeasureItemStruct->itemID != static_cast<UINT>(-1))
                {
                    CDebugWindowStringData *pDebugWindowStringData = reinterpret_cast<CDebugWindowStringData*>(pMeasureItemStruct->itemData);
                    if (pDebugWindowStringData)
                    {
                        for (LPTSTR lpszPtr = pDebugWindowStringData->String();lpszPtr && *lpszPtr;lpszPtr++)
                            if (*lpszPtr == TEXT('\n'))
                                nLineCount++;
                    }
                }

                pMeasureItemStruct->itemHeight = nLineHeight * nLineCount;

                SelectObject( hDC, hOldFont );
                ReleaseDC( hWndListBox, hDC );
            }
        }
    }
    return(0);
}


/*
 * Respond to WM_DRAWITEM
 */
LRESULT CWiaDebugWindow::OnDrawItem( WPARAM wParam, LPARAM lParam )
{
    if (wParam == ID_LISTBOX)
    {
        LPDRAWITEMSTRUCT pDrawItemStruct = reinterpret_cast<LPDRAWITEMSTRUCT>(lParam);
        if (pDrawItemStruct)
        {
            // Save the draw rect
            RECT rcItem = pDrawItemStruct->rcItem;

            // Get the data
            CDebugWindowStringData *pDebugWindowStringData = NULL;
            if (pDrawItemStruct->itemID != (UINT)-1)
                pDebugWindowStringData = reinterpret_cast<CDebugWindowStringData*>(pDrawItemStruct->itemData);

            // Get the foreground color
            COLORREF crForeground;
            if (pDrawItemStruct->itemState & ODS_SELECTED)
                crForeground = GetSysColor(COLOR_HIGHLIGHTTEXT);
            else if (pDebugWindowStringData)
                crForeground = pDebugWindowStringData->ForegroundColor();
            else crForeground = GetSysColor(COLOR_WINDOWTEXT);

            // Get the background color
            COLORREF crBackground;
            if (pDrawItemStruct->itemState & ODS_SELECTED)
                crBackground = GetSysColor(COLOR_HIGHLIGHT);
            else if (pDebugWindowStringData)
                crBackground = pDebugWindowStringData->BackgroundColor();
            else crBackground = GetSysColor(COLOR_WINDOW);

            // Paint the background
            COLORREF crOldBkColor = SetBkColor( pDrawItemStruct->hDC, crBackground );
            ExtTextOut( pDrawItemStruct->hDC, rcItem.left, rcItem.top, ETO_OPAQUE, &rcItem, NULL, 0, NULL );
            SetBkColor( pDrawItemStruct->hDC, crOldBkColor );

            if (pDebugWindowStringData)
            {
                COLORREF crOldColor = SetTextColor(pDrawItemStruct->hDC,crForeground);
                if (pDebugWindowStringData->String())
                {
                    int nLength = lstrlen(pDebugWindowStringData->String());
                    for (;nLength>0;nLength--)
                    {
                        if (pDebugWindowStringData->String()[nLength-1] != TEXT('\n'))
                            break;
                    }
                    int nOldBkMode = SetBkMode( pDrawItemStruct->hDC, TRANSPARENT );
                    InflateRect( &rcItem, -1, -1 );
                    DrawTextEx( pDrawItemStruct->hDC, pDebugWindowStringData->String(), nLength, &rcItem, DT_LEFT|DT_NOPREFIX|DT_EXPANDTABS, NULL );
                    SetBkMode( pDrawItemStruct->hDC, nOldBkMode );
                }
                SetTextColor(pDrawItemStruct->hDC,crOldColor);
            }

            if (pDrawItemStruct->itemState & ODS_FOCUS)
            {
                DrawFocusRect( pDrawItemStruct->hDC, &pDrawItemStruct->rcItem );
            }

        }
    }
    return(0);
}

/*
 * Respond to WM_SETFOCUS
 */
LRESULT CWiaDebugWindow::OnSetFocus( WPARAM, LPARAM )
{
    HWND hWndListBox = GetDlgItem(m_hWnd,ID_LISTBOX);
    if (hWndListBox)
        ::SetFocus(hWndListBox);
    return(0);
}


LRESULT CWiaDebugWindow::OnClose( WPARAM, LPARAM )
{
    PostQuitMessage(0);
    return(0);
}


void CWiaDebugWindow::OnSelectAll( WPARAM, LPARAM )
{
    SendDlgItemMessage(m_hWnd,ID_LISTBOX,LB_SETSEL,TRUE,-1);
}

LRESULT CWiaDebugWindow::OnCopyData( WPARAM wParam, LPARAM lParam )
{
    COPYDATASTRUCT *pCopyDataStruct = reinterpret_cast<COPYDATASTRUCT*>(lParam);
    if (pCopyDataStruct && pCopyDataStruct->dwData == 0xDEADBEEF)
    {
        CDebugStringMessageData *pDebugStringMessageData = reinterpret_cast<CDebugStringMessageData*>(pCopyDataStruct->lpData);
        if (pDebugStringMessageData)
        {
            CSimpleString strMsg = pDebugStringMessageData->bUnicode ?
                CSimpleStringConvert::NaturalString( CSimpleStringWide(reinterpret_cast<LPWSTR>(pDebugStringMessageData->szString) ) ) :
                CSimpleStringConvert::NaturalString( CSimpleStringAnsi(reinterpret_cast<LPSTR>(pDebugStringMessageData->szString) ) );
            CDebugWindowStringData *pDebugWindowStringData = CDebugWindowStringData::Allocate( strMsg, pDebugStringMessageData->crBackground, pDebugStringMessageData->crForeground );
            if (pDebugWindowStringData)
            {
                PostMessage( m_hWnd, DWM_ADDSTRING, 0, reinterpret_cast<LPARAM>(pDebugWindowStringData) );
            }
        }
    }
    return TRUE;
}

void CWiaDebugWindow::OnQuit( WPARAM, LPARAM )
{
    SendMessage( m_hWnd, WM_CLOSE, 0, 0 );
}

void CWiaDebugWindow::OnFlags( WPARAM, LPARAM )
{
    DialogBoxParam( g_hInstance, MAKEINTRESOURCE(IDD_FLAGS_DIALOG), m_hWnd, CDebugMaskDialog::DialogProc, NULL );
}

LRESULT CWiaDebugWindow::OnCommand( WPARAM wParam, LPARAM lParam )
{
   SC_BEGIN_COMMAND_HANDLERS()
   {
       SC_HANDLE_COMMAND(ID_COPY,OnCopy);
       SC_HANDLE_COMMAND(ID_CUT,OnCut);
       SC_HANDLE_COMMAND(ID_DELETE,OnDelete);
       SC_HANDLE_COMMAND(ID_SELECTALL,OnSelectAll);
       SC_HANDLE_COMMAND(IDM_QUIT,OnQuit);
       SC_HANDLE_COMMAND(IDM_FLAGS,OnFlags);
   }
   SC_END_COMMAND_HANDLERS();
}

/*
 * Main window proc
 */
LRESULT CALLBACK CWiaDebugWindow::WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_MESSAGE_HANDLERS(CWiaDebugWindow)
    {
        SC_HANDLE_MESSAGE( WM_CREATE, OnCreate );
        SC_HANDLE_MESSAGE( WM_DESTROY, OnDestroy );
        SC_HANDLE_MESSAGE( WM_SIZE, OnSize );
        SC_HANDLE_MESSAGE( WM_DELETEITEM, OnDeleteItem );
        SC_HANDLE_MESSAGE( WM_MEASUREITEM, OnMeasureItem );
        SC_HANDLE_MESSAGE( WM_DRAWITEM, OnDrawItem );
        SC_HANDLE_MESSAGE( WM_SETFOCUS, OnSetFocus );
        SC_HANDLE_MESSAGE( WM_CLOSE, OnClose );
        SC_HANDLE_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_MESSAGE( WM_COPYDATA, OnCopyData );
        SC_HANDLE_MESSAGE( DWM_ADDSTRING, OnAddString );
    }
    SC_END_MESSAGE_HANDLERS();
}


/*
 * Register the window class
 */
BOOL CWiaDebugWindow::Register( HINSTANCE hInstance )
{
    WNDCLASSEX wcex;
    ZeroMemory( &wcex, sizeof(wcex) );
    wcex.cbSize        = sizeof(wcex);
    wcex.style         = 0;
    wcex.lpfnWndProc   = WndProc;
    wcex.hInstance     = hInstance;
    wcex.hIcon         = NULL;
    wcex.hCursor       = ::LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = reinterpret_cast<HBRUSH>(COLOR_WINDOW+1);
    wcex.lpszClassName = DEBUGWINDOW_CLASSNAME;
    wcex.lpszMenuName  = MAKEINTRESOURCE(IDR_MENU);
    if (!::RegisterClassEx(&wcex))
        return(FALSE);
    return(TRUE);
}


int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE, LPSTR, int nShowCmd )
{
    g_hInstance = hInstance;
    InitCommonControls();
    SHFusionInitialize(NULL);
    if (CWiaDebugWindow::Register(hInstance))
    {
        HWND hWnd = CreateWindowEx( 0, DEBUGWINDOW_CLASSNAME, TEXT("Debug Window"), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, 0, hInstance, NULL );
        if (hWnd)
        {
            ShowWindow(hWnd,nShowCmd);
            UpdateWindow(hWnd);
            HACCEL hAccel = LoadAccelerators( hInstance, MAKEINTRESOURCE(IDR_DBGWND_ACCEL) );
            if (hAccel)
            {
                MSG msg;
                while (GetMessage(&msg,0,0,0))
                {
                    if (!TranslateAccelerator( hWnd, hAccel, &msg ))
                    {
                        TranslateMessage(&msg);
                        DispatchMessage(&msg);
                    }
                }
            }
        }
    }
    SHFusionUninitialize();
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\getimage.cpp ===
#include "precomp.h"
#pragma hdrstop
#include "itranhlp.h"
#include "wiadevdp.h"

HRESULT GetImageDialog( IWiaDevMgr *pIWiaDevMgr, HWND hwndParent, LONG lDeviceType, LONG lFlags, LONG lIntent, IWiaItem *pSuppliedItemRoot, BSTR bstrFilename, GUID *pguidFormat )
{
    HRESULT           hr;
    CComPtr<IWiaItem> pRootItem;

    // Put up a wait cursor
    CWaitCursor wc;

    if (!pIWiaDevMgr || !pguidFormat || !bstrFilename)
    {
        WIA_ERROR((TEXT("GetImageDlg: Invalid pIWiaDevMgr, pguidFormat or bstrFilename")));
        return(E_POINTER);
    }

    // If a root item wasn't passed, select the device.
    if (pSuppliedItemRoot == NULL)
    {
        hr = pIWiaDevMgr->SelectDeviceDlg( hwndParent, lDeviceType, lFlags, NULL, &pRootItem );
        if (FAILED(hr))
        {
            WIA_ERROR((TEXT("GetImageDlg, SelectDeviceDlg failed")));
            return(hr);
        }
        if (hr != S_OK)
        {
            WIA_ERROR((TEXT("GetImageDlg, DeviceDlg cancelled")));
            return(hr);
        }
    }
    else
    {
        pRootItem = pSuppliedItemRoot;
    }

    // Put up the device UI.
    LONG         nItemCount;
    IWiaItem    **ppIWiaItem;

    //
    // Specify WIA_DEVICE_DIALOG_SINGLE_IMAGE to prevent multiple selection
    //
    hr = pRootItem->DeviceDlg( hwndParent, lFlags|WIA_DEVICE_DIALOG_SINGLE_IMAGE, lIntent, &nItemCount, &ppIWiaItem );

    if (SUCCEEDED(hr) && hr == S_OK)
    {
        if (ppIWiaItem && nItemCount)
        {
            CComPtr<IWiaTransferHelper> pWiaTransferHelper;
            hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaTransferHelper, (void**)&pWiaTransferHelper );
            if (SUCCEEDED(hr))
            {
                hr = pWiaTransferHelper->TransferItemFile( ppIWiaItem[0], hwndParent, 0, *pguidFormat, bstrFilename, NULL, TYMED_FILE );
            }
        }
        // Release the items and free the array memory
        for (int i=0; ppIWiaItem && i<nItemCount; i++)
        {
            if (ppIWiaItem[i])
            {
                ppIWiaItem[i]->Release();
            }
        }
        if (ppIWiaItem)
            CoTaskMemFree(ppIWiaItem);
    }
    return(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\contrast.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       CONTRAST.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/11/2001
 *
 *  DESCRIPTION: Small preview window for illustrating brightness and contrast settings
 *
 *******************************************************************************/
#ifndef __CONTRAST_H_INCLUDED
#define __CONTRAST_H_INCLUDED

#include <windows.h>
#include <gphelper.h>

#define BCPWM_COLOR     0
#define BCPWM_GRAYSCALE 1
#define BCPWM_BW        2

#define NUMPREVIEWIMAGES 3

#define BCPWM_SETBRIGHTNESS (WM_USER+3141) // wParam=0, lParam=(int)brightness
#define BCPWM_SETCONTRAST   (WM_USER+3142) // wParam=0, lParam=(int)contrast
#define BCPWM_SETINTENT     (WM_USER+3143) // wParam=0, lParam=(int)intent
#define BCPWM_LOADIMAGE     (WM_USER+3144) // wParam = {BCPWM_COLOR, BCPWM_GRAYSCALE,BCPWM_BW}, wparam=(HBITMAP)previewBitmap

#define BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASSW L"WiaBrightnessContrastPreviewWindow"
#define BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASSA  "WiaBrightnessContrastPreviewWindow"

#define SHADOW_WIDTH 6

#if defined(UNICODE) || defined(_UNICODE)
#define BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASS BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASSW
#else
#define BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASS BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASSA
#endif

//
// Brightness Contrast Preview Control
//
class CBrightnessContrast
{
protected:
    HWND m_hWnd;

    BYTE m_nBrightness;
    BYTE m_nContrast;
    LONG m_nIntent;
    
    HBITMAP m_hBmpPreviewImage;
    HBITMAP m_PreviewBitmaps[NUMPREVIEWIMAGES];

#ifndef DONT_USE_GDIPLUS
    CGdiPlusHelper m_GdiPlusHelper;
#endif

private:
    explicit CBrightnessContrast( HWND hWnd );
    virtual ~CBrightnessContrast(void);

    int SetPreviewImage(LONG _fileName);
    static   LRESULT CALLBACK WndProc( HWND, UINT, WPARAM, LPARAM );

private:
    CBrightnessContrast(void);
    CBrightnessContrast( const CBrightnessContrast & );
    CBrightnessContrast &operator=( const CBrightnessContrast & );

private:
    LRESULT  ApplySettings();
    LRESULT  SetContrast(int contrast);
    LRESULT  SetBrightness(int brightness);
    LRESULT  SetIntent( LONG intent);
    LRESULT  KillBitmaps();

protected:
    //
    // Standard windows messages
    //
    LRESULT  OnPaint( WPARAM, LPARAM );
    LRESULT  OnCreate( WPARAM, LPARAM );
    LRESULT  OnEnable( WPARAM, LPARAM );

    //
    // The parent window needs to pass us bitmap handles
    //
    LRESULT OnLoadBitmap(WPARAM wParam, LPARAM lParam);

    //
    // Message interface functions
    //
    LRESULT  OnSetBrightness( WPARAM wParam, LPARAM lParam);
    LRESULT  OnSetContrast( WPARAM wParam, LPARAM lParam);
    LRESULT  OnSetIntent( WPARAM wParam, LPARAM lParam);

public:
    static   BOOL RegisterClass( HINSTANCE hInstance );

};

#endif //__CONTRAST_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\contrast.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       CONTRAST.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/11/2001
 *
 *  DESCRIPTION: Small preview window for illustrating brightness and contrast settings
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "contrast.h"

LRESULT CBrightnessContrast::OnCreate( WPARAM, LPARAM )
{
    return 0;
}

CBrightnessContrast::~CBrightnessContrast()
{
    KillBitmaps();
}

CBrightnessContrast::CBrightnessContrast( HWND hWnd )
  : m_hWnd(hWnd),
    m_nIntent(0),
    m_nBrightness(50),
    m_nContrast(50),
    m_hBmpPreviewImage(NULL)
{
    for (int i=0;i<NUMPREVIEWIMAGES;i++)
    {
        m_PreviewBitmaps[i] = NULL;
    }
}

LRESULT CBrightnessContrast::OnPaint(WPARAM, LPARAM)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnPaint")));
    PAINTSTRUCT ps;
    HDC hDC = BeginPaint(m_hWnd,&ps);
    if (hDC)
    {
        if (m_hBmpPreviewImage)
        {
            RECT rcClient;
            GetClientRect( m_hWnd, &rcClient );

            //
            // Create a halftone palette
            //
            HPALETTE hHalftonePalette = CreateHalftonePalette(hDC);
            if (hHalftonePalette)
            {
                //
                // Select the halftone palette and save the result
                //
                HPALETTE hOldPalette = SelectPalette( hDC, hHalftonePalette, FALSE );
                RealizePalette( hDC );
                SetBrushOrgEx( hDC, 0,0, NULL );

                //
                // Set halftone stretchblt mode
                //
                int nOldStretchBltMode = SetStretchBltMode(hDC,HALFTONE);

                //
                // Draw 3D Border
                //

                //
                // Draw shadow
                //
                RECT rcBottomShadow, rcRightShadow;
                MoveToEx(hDC,rcClient.left,rcClient.top,NULL);
                LineTo(hDC,rcClient.right-(SHADOW_WIDTH+1),rcClient.top);
                LineTo(hDC,rcClient.right-(SHADOW_WIDTH+1),rcClient.bottom-(SHADOW_WIDTH+1));
                LineTo(hDC,rcClient.left,rcClient.bottom-(SHADOW_WIDTH+1));
                LineTo(hDC,rcClient.left,rcClient.top);

                rcBottomShadow.left=rcClient.left+SHADOW_WIDTH;
                rcBottomShadow.right=rcClient.right+1;
                rcBottomShadow.top=rcClient.bottom-SHADOW_WIDTH;
                rcBottomShadow.bottom=rcClient.bottom+1;

                //
                // bottom edge:
                //
                FillRect(hDC,&rcBottomShadow,GetSysColorBrush(COLOR_3DSHADOW));

                //
                // Fill in bottom left corner:
                //
                rcBottomShadow.left=rcClient.left;
                rcBottomShadow.right=rcClient.left+SHADOW_WIDTH;
                rcBottomShadow.top=rcClient.bottom-SHADOW_WIDTH;
                rcBottomShadow.bottom=rcClient.bottom+1;

                FillRect(hDC,&rcBottomShadow,GetSysColorBrush(COLOR_3DFACE));

                rcRightShadow.left=rcClient.right-SHADOW_WIDTH;
                rcRightShadow.right=rcClient.right+1;
                rcRightShadow.top=rcClient.top+SHADOW_WIDTH;
                rcRightShadow.bottom=rcClient.bottom-SHADOW_WIDTH;

                //
                // right edge
                //
                FillRect(hDC,&rcRightShadow,GetSysColorBrush(COLOR_3DSHADOW));

                rcRightShadow.left=rcClient.right-5;
                rcRightShadow.right=rcClient.right+1;
                rcRightShadow.top=rcClient.top;
                rcRightShadow.bottom=rcClient.top+5;

                //
                // Top right corner
                //
                FillRect(hDC,&rcRightShadow,(HBRUSH)(COLOR_3DFACE+1));

                //
                // Paint Image
                //
                HDC hdcMem = CreateCompatibleDC(hDC);
                if (hdcMem)
                {
                    //
                    // Select and realize the halftone palette
                    //
                    HPALETTE hOldMemDCPalette = SelectPalette(hdcMem,hHalftonePalette,FALSE);
                    RealizePalette(hdcMem);
                    SetBrushOrgEx(hdcMem, 0,0, NULL );

                    //
                    // Select the old bitmap
                    //
                    HBITMAP hOldBitmap = (HBITMAP)SelectObject(hdcMem,m_hBmpPreviewImage);
                    
                    //
                    // Paint the preview bitmap
                    //
                    BITMAP bm = {0};
                    if (GetObject(m_hBmpPreviewImage,sizeof(BITMAP),&bm))
                    {
                        StretchBlt(hDC,rcClient.left+2,rcClient.top+2,WiaUiUtil::RectWidth(rcClient)-9,WiaUiUtil::RectHeight(rcClient)-9,hdcMem,0,0,bm.bmWidth,bm.bmHeight,SRCCOPY);
                    }

                    //
                    // Restore the palette
                    //
                    SelectPalette( hdcMem, hOldMemDCPalette, FALSE );

                    //
                    // Delete the DC
                    //
                    DeleteDC(hdcMem);
                }

                //
                // Restore the old palette and delete the halftone palette
                //
                SelectPalette( hDC, hOldPalette, FALSE );
                DeleteObject( hHalftonePalette );
            }

            //
            // We're done
            //
            EndPaint(m_hWnd,&ps);
        }
    }
    return 0;
}


LRESULT CBrightnessContrast::SetBrightness(int nBrightness)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::SetBrightness")));
    if (nBrightness >= 0 && nBrightness <= 100)
    {
        m_nBrightness = static_cast<BYTE>(nBrightness);
        ApplySettings();
    }
    return 0;
}

LRESULT CBrightnessContrast::SetContrast(int nContrast)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::SetContrast")));
    if (m_nContrast >= 0 && m_nContrast <= 100)
    {
        m_nContrast = static_cast<BYTE>(nContrast);
        ApplySettings();
    }
    return 0;
}

LRESULT CBrightnessContrast::SetIntent(LONG nIntent)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::SetIntent")));
    if (nIntent < NUMPREVIEWIMAGES && nIntent >= 0)
    {
        m_nIntent = nIntent;
        ApplySettings();
    }
    return 0;
}

LRESULT CBrightnessContrast::KillBitmaps()
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::KillBitmaps")));
    for (int i=0;i<NUMPREVIEWIMAGES;i++)
    {
        if (m_PreviewBitmaps[i])
        {
            DeleteObject( m_PreviewBitmaps[i] );
            m_PreviewBitmaps[i] = NULL;
        }
    }
    if (m_hBmpPreviewImage)
    {
        DeleteObject(m_hBmpPreviewImage);
        m_hBmpPreviewImage = NULL;
    }
    return 0;
}

LRESULT CBrightnessContrast::ApplySettings()
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::ApplySettings")));
    if (m_PreviewBitmaps[m_nIntent])
    {
        if (m_hBmpPreviewImage)
        {
            DeleteObject(m_hBmpPreviewImage);
            m_hBmpPreviewImage = NULL;
        }

#ifdef DONT_USE_GDIPLUS
        m_hBmpPreviewImage = reinterpret_cast<HBITMAP>(CopyImage( m_PreviewBitmaps[m_nIntent], IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION ));
#else        
        //
        // If the window is enabled, use the real brightness and contrast settings
        //
        if (IsWindowEnabled(m_hWnd))
        {
            if (BCPWM_BW == m_nIntent)
            {
                m_GdiPlusHelper.SetThreshold( m_PreviewBitmaps[m_nIntent], m_hBmpPreviewImage, m_nBrightness );
            }
            else
            {
                m_GdiPlusHelper.SetBrightnessAndContrast( m_PreviewBitmaps[m_nIntent], m_hBmpPreviewImage, m_nBrightness, m_nContrast );
            }
        }

        //
        // Otherwise, use the nominal settings, to prevent feedback
        //
        else
        {
            if (BCPWM_BW == m_nIntent)
            {
                m_GdiPlusHelper.SetThreshold( m_PreviewBitmaps[m_nIntent], m_hBmpPreviewImage, 50 );
            }
            else
            {
                m_GdiPlusHelper.SetBrightnessAndContrast( m_PreviewBitmaps[m_nIntent], m_hBmpPreviewImage, 50, 50 );
            }
        }
#endif // !DONT_USE_GDIPLUS
    }
    InvalidateRect(m_hWnd,NULL,FALSE);
    UpdateWindow(m_hWnd);
    return 0;
}

BOOL CBrightnessContrast::RegisterClass( HINSTANCE hInstance )
{
    WNDCLASS wc = {0};
    wc.style = CS_DBLCLKS;
    wc.cbWndExtra = sizeof(CBrightnessContrast*);
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.hbrBackground = (HBRUSH)(COLOR_3DFACE+1);
    wc.lpszClassName = BRIGHTNESS_CONTRAST_PREVIEW_WINDOW_CLASS;
    BOOL res = (::RegisterClass(&wc) != 0);
    return (res != 0);
}

LRESULT CBrightnessContrast::OnSetBrightness( WPARAM wParam, LPARAM lParam)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnSetBrightness")));
    SetBrightness(static_cast<BYTE>(lParam));
    return 0;
}

LRESULT CBrightnessContrast::OnSetContrast( WPARAM wParam, LPARAM lParam)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnSetContrast")));
    SetContrast(static_cast<BYTE>(lParam));
    return 0;
}

LRESULT CBrightnessContrast::OnSetIntent( WPARAM wParam, LPARAM lParam)
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnSetIntent")));
    SetIntent(static_cast<int>(lParam));
    return 0;
}

LRESULT CBrightnessContrast::OnLoadBitmap( WPARAM wParam, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnLoadBitmap")));
    int nId = static_cast<int>(wParam);
    if (nId < NUMPREVIEWIMAGES && nId >= 0)
    {
        if (m_PreviewBitmaps[nId])
        {
            DeleteObject(m_PreviewBitmaps[nId]);
            m_PreviewBitmaps[nId] = NULL;
        }
        m_PreviewBitmaps[nId] = reinterpret_cast<HBITMAP>(lParam);
    }
    return 0;
}

LRESULT CBrightnessContrast::OnEnable( WPARAM wParam, LPARAM )
{
    //
    // Update the control's appearance when we are enabled or disabled
    //
    WIA_PUSH_FUNCTION((TEXT("CBrightnessContrast::OnEnable")));
    if (wParam)
    {
        ApplySettings();
    }
    return 0;
}

LRESULT CALLBACK CBrightnessContrast::WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_MESSAGE_HANDLERS(CBrightnessContrast)
    {
        SC_HANDLE_MESSAGE( WM_CREATE, OnCreate );
        SC_HANDLE_MESSAGE( WM_ENABLE, OnEnable );
        SC_HANDLE_MESSAGE( WM_PAINT, OnPaint );
        SC_HANDLE_MESSAGE( BCPWM_SETBRIGHTNESS, OnSetBrightness );
        SC_HANDLE_MESSAGE( BCPWM_SETCONTRAST, OnSetContrast );
        SC_HANDLE_MESSAGE( BCPWM_SETINTENT, OnSetIntent);
        SC_HANDLE_MESSAGE( BCPWM_LOADIMAGE, OnLoadBitmap);
    }
    SC_END_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\apdropt.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION
 *
 *  TITLE:       APDROPT.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/22/2001
 *
 *  DESCRIPTION: Autoplay drop target
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "apdropt.h"
#include "wiadefui.h"
#include "runwiz.h"


CWiaAutoPlayDropTarget::CWiaAutoPlayDropTarget()
  : m_cRef(1)
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTarget::CWiaAutoPlayDropTarget"));
    DllAddRef();
}

CWiaAutoPlayDropTarget::~CWiaAutoPlayDropTarget()
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTarget::~CWiaAutoPlayDropTarget"));
    DllRelease();
}


STDMETHODIMP_(ULONG) CWiaAutoPlayDropTarget::AddRef()
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTarget::AddRef"));
    return InterlockedIncrement(&m_cRef);
}


STDMETHODIMP_(ULONG) CWiaAutoPlayDropTarget::Release()
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTarget::Release"));
    LONG nRefCount = InterlockedDecrement(&m_cRef);
    if (!nRefCount)
    {
        delete this;
    }
    return nRefCount;
}


HRESULT CWiaAutoPlayDropTarget::QueryInterface( REFIID riid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTarget::QueryInterface"));
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IDropTarget*>(this);
    }
    else if (IsEqualIID( riid, IID_IDropTarget ))
    {
        *ppvObject = static_cast<IDropTarget*>(this);
    }
    else
    {
        *ppvObject = NULL;
        return (E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}
 
HRESULT CWiaAutoPlayDropTarget::DragEnter(IDataObject *pdtobj, DWORD grfKeyState, POINTL ptl, DWORD *pdwEffect)
{
    *pdwEffect = DROPEFFECT_COPY;
    return S_OK;
}
 
HRESULT CWiaAutoPlayDropTarget::DragOver(DWORD grfKeyState, POINTL ptl, DWORD *pdwEffect)
{
    *pdwEffect = DROPEFFECT_COPY;
    return S_OK;
}
 
HRESULT CWiaAutoPlayDropTarget::DragLeave(void)
{
    return S_OK;
}
 
HRESULT GetPathFromDataObject( IDataObject *pdtobj, LPTSTR pszPath, UINT cchPath )
{
    FORMATETC fmte = { CF_HDROP, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL };
    STGMEDIUM medium = {0};

    HRESULT hr = pdtobj->GetData(&fmte, &medium);

    if (SUCCEEDED(hr))
    {
        if (DragQueryFile((HDROP)medium.hGlobal, 0, pszPath, cchPath))
            hr = S_OK;
        else
            hr = E_FAIL;

        ReleaseStgMedium(&medium);
    }

    return hr;
}
 
//
// Heres the meat of the change
//
HRESULT CWiaAutoPlayDropTarget::Drop( IDataObject *pdtobj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect )
{
    WCHAR szDrive[4] = {0};
    HRESULT hr = GetPathFromDataObject( pdtobj, szDrive, ARRAYSIZE(szDrive) );
    *pdwEffect = DROPEFFECT_COPY;
    if (SUCCEEDED(hr))
    {
        WIA_TRACE((TEXT("szDrive: %ws")));
        WCHAR szDeviceID[MAX_PATH + 2] = {0};
        wnsprintf(szDeviceID, ARRAYSIZE(szDeviceID), TEXT("{%wc:\\}"), szDrive[0] );
        hr = RunWiaWizard::RunWizard( szDeviceID );
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\attach.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       ATTACH.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/26/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __ATTACH_H_INCLUDED
#define __ATTACH_H_INCLUDED

#include <windows.h>
#include <simstr.h>
#include "wiaffmt.h"
#include "itranhlp.h"
#include "wiadevdp.h"

class CAnnotation
{
private:
    CComPtr<IWiaItem>      m_pWiaItem;
    mutable CWiaFileFormat m_WiaFileFormat;

public:
    CAnnotation( const CAnnotation &other )
      : m_pWiaItem(other.WiaItem()),
        m_WiaFileFormat(other.FileFormat())
    {
    }
    CAnnotation( IWiaItem *pWiaItem=NULL )
      : m_pWiaItem(pWiaItem)
    {
    }
    HRESULT InitializeFileFormat( HICON hDefIcon, const CSimpleString &strDefaultUnknownDescription, const CSimpleString &strEmptyDescriptionMask, const CSimpleString &strDefUnknownExtension )
    {
        WIA_PUSH_FUNCTION((TEXT("CAnnotation::InitializeFileFormat")));
        CComPtr<IWiaAnnotationHelpers> pWiaAnnotationHelpers;
        HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers, (void**)&pWiaAnnotationHelpers );
        if (SUCCEEDED(hr))
        {
            GUID guidFormat = IID_NULL;
            hr = pWiaAnnotationHelpers->GetAnnotationFormat(m_pWiaItem,guidFormat);
            if (SUCCEEDED(hr))
            {

                //
                // Get the extension
                //
                CSimpleString strExtension = CWiaFileFormat::GetExtension( guidFormat, TYMED_FILE, m_pWiaItem );

                //
                // Set the format information.  If we can't get them, we will compensate below.
                //
                m_WiaFileFormat.Format(guidFormat);
                m_WiaFileFormat.Extension(strExtension);
                m_WiaFileFormat.AcquireIcon(hDefIcon);
                m_WiaFileFormat.AcquireDescription();

                //
                // If we couldn't get an icon, use the default.
                //
                if (!m_WiaFileFormat.Icon())
                {
                    m_WiaFileFormat.Icon(hDefIcon);
                }
                
                //
                // If we couldn't get a description, create one
                //
                if (!m_WiaFileFormat.Description().Length())
                {
                    //
                    // If we have an extension, use it to create a description string
                    //
                    if (m_WiaFileFormat.Extension().Length())
                    {
                        CSimpleString strDescription;
                        strDescription.Format( strEmptyDescriptionMask, m_WiaFileFormat.Extension().String() );
                        m_WiaFileFormat.Description(strDescription);
                    }
                    //
                    // Otherwise, use the default unknown type description
                    //
                    else
                    {
                        m_WiaFileFormat.Description(strDefaultUnknownDescription);
                    }
                }

                //
                // If we don't have an extension, use the default
                //
                if (!m_WiaFileFormat.Extension().Length())
                {
                    m_WiaFileFormat.Extension(strDefUnknownExtension);
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("GetAnnotationFormat returned")));
            }
        }
        if (SUCCEEDED(hr))
        {
            if (m_WiaFileFormat.IsValid())
            {
                return S_OK;
            }
            else
            {
                WIA_TRACE((TEXT("m_WiaFileFormat returned false")));
                hr = E_FAIL;
            }
        }
        return hr;
    }
    ~CAnnotation(void)
    {
        Destroy();
    }
    void Destroy(void)
    {
        m_pWiaItem = NULL;
        m_WiaFileFormat.Destroy();
    }
    CAnnotation &operator=( const CAnnotation &other )
    {
        if (this != &other)
        {
            Destroy();
            m_pWiaItem = other.WiaItem();
            m_WiaFileFormat = other.FileFormat();
        }
        return *this;
    }
    bool operator==( const CAnnotation &other )
    {
        return (other.FullItemName() == FullItemName());
    }
    IWiaItem *WiaItem(void) const
    {
        return m_pWiaItem;
    }
    IWiaItem *WiaItem(void)
    {
        return m_pWiaItem;
    }
    const CWiaFileFormat &FileFormat(void) const
    {
        return m_WiaFileFormat;
    }
    CSimpleString Name(void) const
    {
        CSimpleStringWide strResult;
        PropStorageHelpers::GetProperty( m_pWiaItem, WIA_IPA_ITEM_NAME, strResult );
        return CSimpleStringConvert::NaturalString(strResult);
    }
    CSimpleStringWide FullItemName(void) const
    {
        CSimpleStringWide strResult;
        PropStorageHelpers::GetProperty( m_pWiaItem, WIA_IPA_FULL_ITEM_NAME, strResult );
        return strResult;
    }
    LONG Size(void)
    {
        LONG nSize = 0;
        CComPtr<IWiaAnnotationHelpers> pWiaAnnotationHelpers;
        HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers, (void**)&pWiaAnnotationHelpers );
        if (SUCCEEDED(hr))
        {
            GUID guidFormat = IID_NULL;
            pWiaAnnotationHelpers->GetAnnotationSize(m_pWiaItem,nSize,TYMED_FILE);
        }
        return nSize;
    }
};

#endif // __ATTACH_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\ppattach.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       PPATTACH.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/26/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "ppattach.h"
#include "psutil.h"
#include "resource.h"
#include "wiacsh.h"
#include "simrect.h"
#include "wiaffmt.h"
#include "itranhlp.h"
#include "wiadevdp.h"
#include "textdlg.h"

//
// We use this instead of GetSystemMetrics(SM_CXSMICON)/GetSystemMetrics(SM_CYSMICON) because
// large "small" icons wreak havoc with dialog layout
//
#define SMALL_ICON_SIZE 16

//
// Context Help IDs
//
static const DWORD g_HelpIDs[] =
{
    IDOK,                           IDH_OK,
    IDCANCEL,                       IDH_CANCEL,
    0, 0
};

extern HINSTANCE g_hInstance;

//
// The only constructor
//
CAttachmentCommonPropertyPage::CAttachmentCommonPropertyPage( HWND hWnd )
  : m_hWnd(hWnd)
{
}

CAttachmentCommonPropertyPage::~CAttachmentCommonPropertyPage(void)
{
    if (m_hDefAttachmentIcon)
    {
        DestroyIcon(m_hDefAttachmentIcon);
        m_hDefAttachmentIcon = NULL;
    }
    m_hWnd = NULL;
}

LRESULT CAttachmentCommonPropertyPage::OnKillActive( WPARAM , LPARAM )
{
    return FALSE;
}

LRESULT CAttachmentCommonPropertyPage::OnSetActive( WPARAM , LPARAM )
{
    //
    // Don't allow activation unless we have an item
    //
    if (!m_pWiaItem)
    {
        return -1;
    }
    CWaitCursor wc;
    Initialize();
    return 0;
}

LRESULT CAttachmentCommonPropertyPage::OnApply( WPARAM , LPARAM )
{
    return 0;
}

void CAttachmentCommonPropertyPage::AddAnnotation( HWND hwndList, const CAnnotation &Annotation )
{
    WIA_PUSH_FUNCTION((TEXT("CAttachmentCommonPropertyPage::AddAnnotation")));
    WIA_ASSERT(hwndList != NULL);
    if (hwndList)
    {
        HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_SMALL );
        if (hImageList)
        {
            WIA_TRACE((TEXT("Annotation.FileFormat().Icon(): %p"), Annotation.FileFormat().Icon() ));
            int nIconIndex = ImageList_AddIcon( hImageList, Annotation.FileFormat().Icon() );
            if (nIconIndex != -1)
            {
                WIA_TRACE((TEXT("nIconIndex: %d"), nIconIndex ));
                CAnnotation *pAnnotation = new CAnnotation(Annotation);
                if (pAnnotation)
                {
                    //
                    // Prepare Column 0, Name
                    //
                    LVITEM LvItem;
                    CSimpleString strText;

                    ZeroMemory(&LvItem,sizeof(LvItem));
                    strText = pAnnotation->Name();
                    LvItem.mask = LVIF_IMAGE | LVIF_PARAM | LVIF_TEXT | LVIF_STATE;
                    LvItem.iItem = ListView_GetItemCount(hwndList);
                    LvItem.iSubItem = 0;
                    LvItem.pszText = const_cast<LPTSTR>(strText.String());
                    LvItem.iImage = nIconIndex;
                    LvItem.lParam = reinterpret_cast<LPARAM>(pAnnotation);
                    LvItem.state = ListView_GetItemCount(hwndList) ? 0 : LVIS_FOCUSED | LVIS_SELECTED;
                    LvItem.stateMask = LVIS_FOCUSED | LVIS_SELECTED;

                    //
                    // Insert the item
                    //
                    int nItemIndex = ListView_InsertItem( hwndList, &LvItem );
                    if (nItemIndex != -1)
                    {
                        //
                        // Prepare the description
                        //
                        ZeroMemory(&LvItem,sizeof(LvItem));
                        strText = pAnnotation->FileFormat().Description();
                        LvItem.mask = LVIF_TEXT;
                        LvItem.iItem = nItemIndex;
                        LvItem.iSubItem = 1;
                        LvItem.pszText = const_cast<LPTSTR>(strText.String());

                        //
                        // Set the subitem
                        //
                        ListView_SetItem( hwndList, &LvItem );

                        //
                        // Prepare the description
                        //
                        ZeroMemory(&LvItem,sizeof(LvItem));
                        TCHAR szSize[MAX_PATH] = {0};
                        StrFormatByteSize( pAnnotation->Size(), szSize, ARRAYSIZE(szSize) );

                        LvItem.mask = LVIF_TEXT;
                        LvItem.iItem = nItemIndex;
                        LvItem.iSubItem = 2;
                        LvItem.pszText = szSize;

                        //
                        // Set the subitem
                        //
                        ListView_SetItem( hwndList, &LvItem );

                    }
                    else
                    {
                        WIA_ERROR((TEXT("Couldn't insert the item")));
                    }
                }
                else
                {
                    WIA_ERROR((TEXT("Couldn't create the annotation")));
                }
            }
            else
            {
                WIA_ERROR((TEXT("Couldn't add the icon")));
            }
        }
        else
        {
            WIA_ERROR((TEXT("Couldn't get the image list")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("Couldn't get the window")));
    }
}

void CAttachmentCommonPropertyPage::Initialize()
{
    WIA_PUSH_FUNCTION((TEXT("CAttachmentCommonPropertyPage::Initialize")));
    //
    // Get the listview
    //
    HWND hwndList = GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST );
    if (hwndList)
    {
        //
        // Remove all of the items from the list
        //
        ListView_DeleteAllItems(hwndList);

        //
        // Get the current image list
        //
        HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_SMALL );
        WIA_ASSERT(hImageList != NULL);
        if (hImageList)
        {
            //
            // Remove all of the icons from the current image list
            //
            ImageList_RemoveAll(hImageList);

            //
            // Get the item type so we can see if this item has attachments
            //
            LONG nItemType = 0;
            if (SUCCEEDED(m_pWiaItem->GetItemType(&nItemType)))
            {
                //
                // If this item has attachments, enumerate and add them
                //
                if (nItemType & WiaItemTypeHasAttachments)
                {
                    //
                    // Enumerate the child items
                    //
                    CComPtr<IEnumWiaItem> pEnumWiaItem;
                    if (SUCCEEDED(m_pWiaItem->EnumChildItems( &pEnumWiaItem )))
                    {
                        //
                        // Get the next item
                        //
                        CComPtr<IWiaItem> pWiaItem;
                        while (S_OK == pEnumWiaItem->Next(1,&pWiaItem,NULL))
                        {
                            //
                            // Create an annotation and try to get all its info
                            //
                            CAnnotation Annotation(pWiaItem);
                            if (SUCCEEDED(Annotation.InitializeFileFormat( m_hDefAttachmentIcon, m_strDefaultUnknownDescription, m_strEmptyDescriptionMask, m_strDefUnknownExtension )))
                            {
                                //
                                // Add the annotation
                                //
                                AddAnnotation(hwndList,Annotation);
                            }
                            else
                            {
                                WIA_ERROR((TEXT("InitializeFileFormat failed")));
                            }

                            //
                            // Free this item
                            //
                            pWiaItem = NULL;
                        }
                    }
                    else
                    {
                        WIA_ERROR((TEXT("EnumChildItems failed")));
                    }
                }
                else
                {
                    CAnnotation Annotation(m_pWiaItem);
                    if (SUCCEEDED(Annotation.InitializeFileFormat( m_hDefAttachmentIcon, m_strDefaultUnknownDescription, m_strEmptyDescriptionMask, m_strDefUnknownExtension )))
                    {
                        //
                        // Add the annotation
                        //
                        AddAnnotation(hwndList,Annotation);
                    }
                }
            }
        }
    }
    else
    {
        WIA_ERROR((TEXT("Can't get the listview window")));
    }
    UpdateControls();
}


LRESULT CAttachmentCommonPropertyPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Get the WIA item
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pWiaItem = reinterpret_cast<IWiaItem*>(pPropSheetPage->lParam);
    }
    if (!m_pWiaItem)
    {
        return -1;
    }
    CSimpleRect rcClient( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST ) );
    CSimpleString strColumnTitle;
    LVCOLUMN LvColumn = {0};
    
    //
    // Set up the various columns
    //
    ZeroMemory( &LvColumn, sizeof(LvColumn) );
    strColumnTitle.LoadString( IDS_ATTACHMENTS_COLTITLE_NAME, g_hInstance );
    LvColumn.pszText = const_cast<LPTSTR>(strColumnTitle.String());
    LvColumn.iSubItem = 0;
    LvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
    LvColumn.cx = rcClient.Width() / 3;
    LvColumn.fmt = LVCFMT_LEFT;
    ListView_InsertColumn( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST ), 0, &LvColumn );

    ZeroMemory( &LvColumn, sizeof(LvColumn) );
    strColumnTitle.LoadString( IDS_ATTACHMENTS_COLTITLE_TYPE, g_hInstance );
    LvColumn.pszText = const_cast<LPTSTR>(strColumnTitle.String());
    LvColumn.iSubItem = 1;
    LvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
    LvColumn.cx = rcClient.Width() / 3;
    LvColumn.fmt = LVCFMT_LEFT;
    ListView_InsertColumn( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST ), 1, &LvColumn );

    ZeroMemory( &LvColumn, sizeof(LvColumn) );
    strColumnTitle.LoadString( IDS_ATTACHMENTS_COLTITLE_SIZE, g_hInstance );
    LvColumn.pszText = const_cast<LPTSTR>(strColumnTitle.String());
    LvColumn.iSubItem = 2;
    LvColumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
    LvColumn.cx = rcClient.Width() - (rcClient.Width() / 3 * 2);
    LvColumn.fmt = LVCFMT_RIGHT;
    ListView_InsertColumn( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST ), 2, &LvColumn );

    //
    // Create an image list for the icons
    //
    HIMAGELIST hImageList = ImageList_Create( SMALL_ICON_SIZE, SMALL_ICON_SIZE, ILC_MASK|PrintScanUtil::CalculateImageListColorDepth(), 5, 5 );
    if (hImageList)
    {
        //
        // Set the image list
        //
        ListView_SetImageList( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST ), hImageList, LVSIL_SMALL );
    }

    //
    // Get the default strings used for information we can't derive from the item itself
    //
    m_hDefAttachmentIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDI_ATTACHMENTSDLG_DEFICON), IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR ) );
    m_strDefaultUnknownDescription.LoadString( IDS_ATTACHMENTSDLG_UNKNOWNDESCRIPTION, g_hInstance );
    m_strEmptyDescriptionMask.LoadString( IDS_ATTACHMENTSDLG_EMPTYDESCRIPTIONMASK, g_hInstance );
    m_strDefUnknownExtension.LoadString( IDS_ATTACHMENTSDLG_UNKNOWNEXTENSION, g_hInstance );

    return TRUE;
}


LRESULT CAttachmentCommonPropertyPage::OnHelp( WPARAM wParam, LPARAM lParam )
{
    return WiaHelp::HandleWmHelp( wParam, lParam, g_HelpIDs );
}

LRESULT CAttachmentCommonPropertyPage::OnContextMenu( WPARAM wParam, LPARAM lParam )
{
    return WiaHelp::HandleWmContextMenu( wParam, lParam, g_HelpIDs );
}

LRESULT CAttachmentCommonPropertyPage::OnListDeleteItem( WPARAM, LPARAM lParam )
{
    //
    // Delete the CAnnotation stored in each lParam as it the listview item is deleted
    //
    NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW*>(lParam);
    if (pNmListView)
    {
        CAnnotation *pAnnotation = reinterpret_cast<CAnnotation*>(pNmListView->lParam);
        if (pAnnotation)
        {
            delete pAnnotation;
        }
    }
    return 0;
}

bool CAttachmentCommonPropertyPage::IsPlaySupported( const GUID &guidFormat )
{
    //
    // For now we can only play WAV files
    //
    return ((guidFormat == WiaAudFmt_WAV) != 0 || (guidFormat == WiaImgFmt_TXT) != 0);
}

//
// Update the status of dependent controls when the selection changes
//
LRESULT CAttachmentCommonPropertyPage::OnListItemChanged( WPARAM, LPARAM lParam )
{
    NMLISTVIEW *pNmListView = reinterpret_cast<NMLISTVIEW*>(lParam);
    if (pNmListView)
    {
        if (pNmListView->uChanged & LVIF_STATE)
        {
            UpdateControls();
        }
    }
    return 0;
}

LRESULT CAttachmentCommonPropertyPage::OnListDblClk( WPARAM, LPARAM lParam )
{
    NMITEMACTIVATE *pNmItemActivate = reinterpret_cast<NMITEMACTIVATE*>(lParam);
    if (pNmItemActivate)
    {
        PlayItem(pNmItemActivate->iItem);
    }
    return 0;
}

//
// Update the dependent controls
//
void CAttachmentCommonPropertyPage::UpdateControls(void)
{
    //
    // If the current item is not playable, disable the play button
    //
    CAnnotation *pAnnotation = GetAttachment(GetCurrentSelection());
    BOOL bEnablePlay = FALSE;
    if (pAnnotation)
    {
        if (IsPlaySupported(pAnnotation->FileFormat().Format()))
        {
            bEnablePlay = TRUE;
        }
    }
    EnableWindow( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_PLAY ), bEnablePlay );
}


//
// Find the currently selected item, if there is one
//
int CAttachmentCommonPropertyPage::GetCurrentSelection(void)
{
    int nResult = -1;
    HWND hWnd = GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST );
    if (hWnd)
    {
        int nCount = ListView_GetItemCount(hWnd);
        for (int i=0;i<nCount;i++)
        {
            if (ListView_GetItemState(hWnd,i,LVIS_SELECTED) & LVIS_SELECTED)
            {
                nResult = i;
                break;
            }
        }
    }
    return nResult;
}


//
// Get the CAttachment* from the lParam for the nIndex'th item
//
CAnnotation *CAttachmentCommonPropertyPage::GetAttachment( int nIndex )
{
    CAnnotation *pResult = NULL;
    HWND hWnd = GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_ATTACHMENTLIST );
    if (hWnd)
    {
        LV_ITEM lvItem = {0};
        lvItem.mask = LVIF_PARAM;
        lvItem.iItem = nIndex;
        if (ListView_GetItem( hWnd, &lvItem ))
        {
            pResult = reinterpret_cast<CAnnotation*>(lvItem.lParam);
        }
    }
    return pResult;
}

void CAttachmentCommonPropertyPage::PlayItem( int nIndex )
{
    WIA_PUSH_FUNCTION((TEXT("CAttachmentCommonPropertyPage::PlayItem( %d )"), nIndex ));
    
    //
    // This will take a while
    //
    CWaitCursor wc;

    //
    // Get the attachement data for this item
    //
    CAnnotation *pAnnotation = GetAttachment(nIndex);
    if (pAnnotation)
    {
        //
        // Make sure we can play this format before we go to the trouble of getting the data
        //
        if (IsPlaySupported(pAnnotation->FileFormat().Format()))
        {
            //
            // Get the window that has the initial focus, so we can reset it after we enable the play button
            //
            HWND hWndFocus = GetFocus();

            //
            // Disable the play button so the user can't click on it a million times
            //
            EnableWindow( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_PLAY ), FALSE );

            //
            // Create an annotation helper to transfer the data
            //
            CComPtr<IWiaAnnotationHelpers> pWiaAnnotationHelpers;
            HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers, (void**)&pWiaAnnotationHelpers );
            if (SUCCEEDED(hr))
            {
                //
                // Transfer the data and make sure it is valid
                //
                PBYTE pBuffer = NULL;
                DWORD dwLength = 0;
                hr = pWiaAnnotationHelpers->TransferAttachmentToMemory( pAnnotation->WiaItem(), pAnnotation->FileFormat().Format(), m_hWnd, &pBuffer, &dwLength );
                if (SUCCEEDED(hr) && pBuffer && dwLength)
                {
                    CWaitCursor wc;
                    UpdateWindow(m_hWnd);
                    //
                    // If this is a WAV file, play it using PlaySound.  It can't be async, because we are going to
                    // delete the buffer right after we call it.
                    //
                    if (WiaAudFmt_WAV == pAnnotation->FileFormat().Format())
                    {
                        if (!PlaySound( reinterpret_cast<LPCTSTR>(pBuffer), NULL, SND_MEMORY ))
                        {
                            WIA_TRACE((TEXT("PlaySound returned FALSE")));
                        }
                    }

                    if (WiaImgFmt_TXT == pAnnotation->FileFormat().Format())
                    {
                        //
                        // We need to copy the text to a new buffer so we can NULL terminate it,
                        // so allocate a dwLength+1 char bufferr
                        //
                        LPSTR pszTemp = new CHAR[dwLength+1];
                        if (pszTemp)
                        {
                            //
                            // Copy the buffer and null terminate it
                            //
                            CopyMemory( pszTemp, pBuffer, dwLength );
                            pszTemp[dwLength] = '\0';

                            //
                            // Prepare the data and display the dialog
                            //
                            CTextDialog::CData Data( CSimpleStringConvert::WideString(CSimpleStringAnsi(reinterpret_cast<LPCSTR>(pszTemp))), true );
                            DialogBoxParam( g_hInstance, MAKEINTRESOURCE(IDD_TEXT), m_hWnd, CTextDialog::DialogProc, reinterpret_cast<LPARAM>(&Data) );

                            //
                            // Release the temp buffer
                            //
                            delete[] pszTemp;
                        }
                    }
                    
                    //
                    // Free the data
                    //
                    CoTaskMemFree(pBuffer);
                }
            }
            
            //
            // Re-enable the play button
            //
            EnableWindow( GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_PLAY ), TRUE );

            //
            // Restore the focus
            //
            SetFocus( hWndFocus ? hWndFocus : GetDlgItem( m_hWnd, IDC_ATTACHMENTSDLG_PLAY ) );
        }
    }
}

void CAttachmentCommonPropertyPage::OnPlay( WPARAM, LPARAM )
{
    WIA_PUSH_FUNCTION((TEXT("CAttachmentCommonPropertyPage::OnPlay")));
    PlayItem(GetCurrentSelection());
}

LRESULT CAttachmentCommonPropertyPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_APPLY, OnApply);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_KILLACTIVE,OnKillActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_DELETEITEM,IDC_ATTACHMENTSDLG_ATTACHMENTLIST,OnListDeleteItem);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_ITEMCHANGED,IDC_ATTACHMENTSDLG_ATTACHMENTLIST,OnListItemChanged);
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL(NM_DBLCLK,IDC_ATTACHMENTSDLG_ATTACHMENTLIST,OnListDblClk);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CAttachmentCommonPropertyPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND( IDC_ATTACHMENTSDLG_PLAY, OnPlay );
    }
    SC_END_COMMAND_HANDLERS();
}


INT_PTR CALLBACK CAttachmentCommonPropertyPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CAttachmentCommonPropertyPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_HELP, OnHelp );
        SC_HANDLE_DIALOG_MESSAGE( WM_CONTEXTMENU, OnContextMenu );
    }
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\paprsize.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION
 *
 *  TITLE:       PAPRSIZE.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/8/2001
 *
 *  DESCRIPTION: Scanner paper sizes
 *
 *******************************************************************************/
 
#ifndef __PAPRSIZE_H_INCLUDED
#define __PAPRSIZE_H_INCLUDED

#define IDS_WIA_PAPER_SIZE_BASE                          1300
#define IDS_WIA_PAPER_SIZE_LETTER                        IDS_WIA_PAPER_SIZE_BASE + 0  
#define IDS_WIA_PAPER_SIZE_LETTER_SMALL                  IDS_WIA_PAPER_SIZE_BASE + 1  
#define IDS_WIA_PAPER_SIZE_TABLOID                       IDS_WIA_PAPER_SIZE_BASE + 2  
#define IDS_WIA_PAPER_SIZE_LEDGER                        IDS_WIA_PAPER_SIZE_BASE + 3  
#define IDS_WIA_PAPER_SIZE_LEGAL                         IDS_WIA_PAPER_SIZE_BASE + 4  
#define IDS_WIA_PAPER_SIZE_STATEMENT                     IDS_WIA_PAPER_SIZE_BASE + 5  
#define IDS_WIA_PAPER_SIZE_EXECUTIVE                     IDS_WIA_PAPER_SIZE_BASE + 6  
#define IDS_WIA_PAPER_SIZE_FOLIO                         IDS_WIA_PAPER_SIZE_BASE + 7  
#define IDS_WIA_PAPER_SIZE_10X14                         IDS_WIA_PAPER_SIZE_BASE + 8  
#define IDS_WIA_PAPER_SIZE_11X17                         IDS_WIA_PAPER_SIZE_BASE + 9  
#define IDS_WIA_PAPER_SIZE_NOTE                          IDS_WIA_PAPER_SIZE_BASE + 10 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_9                    IDS_WIA_PAPER_SIZE_BASE + 11 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_10                   IDS_WIA_PAPER_SIZE_BASE + 12 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_11                   IDS_WIA_PAPER_SIZE_BASE + 13 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_12                   IDS_WIA_PAPER_SIZE_BASE + 14 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_14                   IDS_WIA_PAPER_SIZE_BASE + 15 
#define IDS_WIA_PAPER_SIZE_C_SIZE_SHEET                  IDS_WIA_PAPER_SIZE_BASE + 16 
#define IDS_WIA_PAPER_SIZE_D_SIZE_SHEET                  IDS_WIA_PAPER_SIZE_BASE + 17 
#define IDS_WIA_PAPER_SIZE_E_SIZE_SHEET                  IDS_WIA_PAPER_SIZE_BASE + 18 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_MONARCH              IDS_WIA_PAPER_SIZE_BASE + 19 
#define IDS_WIA_PAPER_SIZE_6_34_ENVELOPE                 IDS_WIA_PAPER_SIZE_BASE + 20 
#define IDS_WIA_PAPER_SIZE_US_STD_FANFOLD                IDS_WIA_PAPER_SIZE_BASE + 21 
#define IDS_WIA_PAPER_SIZE_GERMAN_STD_FANFOLD            IDS_WIA_PAPER_SIZE_BASE + 22 
#define IDS_WIA_PAPER_SIZE_GERMAN_LEGAL_FANFOLD          IDS_WIA_PAPER_SIZE_BASE + 23 
#define IDS_WIA_PAPER_SIZE_9X11                          IDS_WIA_PAPER_SIZE_BASE + 24 
#define IDS_WIA_PAPER_SIZE_10X11                         IDS_WIA_PAPER_SIZE_BASE + 25 
#define IDS_WIA_PAPER_SIZE_15X11                         IDS_WIA_PAPER_SIZE_BASE + 26 
#define IDS_WIA_PAPER_SIZE_12X11                         IDS_WIA_PAPER_SIZE_BASE + 27 
#define IDS_WIA_PAPER_SIZE_LETTER_EXTRA                  IDS_WIA_PAPER_SIZE_BASE + 28 
#define IDS_WIA_PAPER_SIZE_LEGAL_EXTRA                   IDS_WIA_PAPER_SIZE_BASE + 29 
#define IDS_WIA_PAPER_SIZE_TABLOID_EXTRA                 IDS_WIA_PAPER_SIZE_BASE + 30 
#define IDS_WIA_PAPER_SIZE_A4_EXTRA                      IDS_WIA_PAPER_SIZE_BASE + 31 
#define IDS_WIA_PAPER_SIZE_LETTER_TRANSVERSE             IDS_WIA_PAPER_SIZE_BASE + 32 
#define IDS_WIA_PAPER_SIZE_LETTER_EXTRA_TRANSVERSE       IDS_WIA_PAPER_SIZE_BASE + 33 
#define IDS_WIA_PAPER_SIZE_LETTER_PLUS                   IDS_WIA_PAPER_SIZE_BASE + 34 
#define IDS_WIA_PAPER_SIZE_LETTER_ROTATED                IDS_WIA_PAPER_SIZE_BASE + 35 
#define IDS_WIA_PAPER_SIZE_A3                            IDS_WIA_PAPER_SIZE_BASE + 36 
#define IDS_WIA_PAPER_SIZE_A4                            IDS_WIA_PAPER_SIZE_BASE + 37 
#define IDS_WIA_PAPER_SIZE_A4_SMALL                      IDS_WIA_PAPER_SIZE_BASE + 38 
#define IDS_WIA_PAPER_SIZE_A5                            IDS_WIA_PAPER_SIZE_BASE + 39 
#define IDS_WIA_PAPER_SIZE_B4_JIS                        IDS_WIA_PAPER_SIZE_BASE + 40 
#define IDS_WIA_PAPER_SIZE_B5_JIS                        IDS_WIA_PAPER_SIZE_BASE + 41 
#define IDS_WIA_PAPER_SIZE_QUARTO                        IDS_WIA_PAPER_SIZE_BASE + 42 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_DL                   IDS_WIA_PAPER_SIZE_BASE + 43 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_C5                   IDS_WIA_PAPER_SIZE_BASE + 44 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_C3                   IDS_WIA_PAPER_SIZE_BASE + 45 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_C4                   IDS_WIA_PAPER_SIZE_BASE + 46 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_C6                   IDS_WIA_PAPER_SIZE_BASE + 47 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_C65                  IDS_WIA_PAPER_SIZE_BASE + 48 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_B4                   IDS_WIA_PAPER_SIZE_BASE + 49 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_B5                   IDS_WIA_PAPER_SIZE_BASE + 50 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_B6                   IDS_WIA_PAPER_SIZE_BASE + 51 
#define IDS_WIA_PAPER_SIZE_ENVELOPE                      IDS_WIA_PAPER_SIZE_BASE + 52 
#define IDS_WIA_PAPER_SIZE_B4_ISO                        IDS_WIA_PAPER_SIZE_BASE + 53 
#define IDS_WIA_PAPER_SIZE_JAPANESE_POSTCARD             IDS_WIA_PAPER_SIZE_BASE + 54 
#define IDS_WIA_PAPER_SIZE_ENVELOPE_INVITE               IDS_WIA_PAPER_SIZE_BASE + 55 
#define IDS_WIA_PAPER_SIZE_A4_TRANSVERSE                 IDS_WIA_PAPER_SIZE_BASE + 56 
#define IDS_WIA_PAPER_SIZE_SUPER_A                       IDS_WIA_PAPER_SIZE_BASE + 57 
#define IDS_WIA_PAPER_SIZE_SUPER_B                       IDS_WIA_PAPER_SIZE_BASE + 58 
#define IDS_WIA_PAPER_SIZE_A4_PLUS                       IDS_WIA_PAPER_SIZE_BASE + 59 
#define IDS_WIA_PAPER_SIZE_A5_TRANSVERSE                 IDS_WIA_PAPER_SIZE_BASE + 60 
#define IDS_WIA_PAPER_SIZE_B5_JIS_TRANSVERSE             IDS_WIA_PAPER_SIZE_BASE + 61 
#define IDS_WIA_PAPER_SIZE_A3_EXTRA                      IDS_WIA_PAPER_SIZE_BASE + 62 
#define IDS_WIA_PAPER_SIZE_A5_EXTRA                      IDS_WIA_PAPER_SIZE_BASE + 63 
#define IDS_WIA_PAPER_SIZE_B5_ISO_EXTRA                  IDS_WIA_PAPER_SIZE_BASE + 64 
#define IDS_WIA_PAPER_SIZE_A2                            IDS_WIA_PAPER_SIZE_BASE + 65 
#define IDS_WIA_PAPER_SIZE_A3_TRANSVERSE                 IDS_WIA_PAPER_SIZE_BASE + 66 
#define IDS_WIA_PAPER_SIZE_A3_EXTRA_TRANSVERSE           IDS_WIA_PAPER_SIZE_BASE + 67 
#define IDS_WIA_PAPER_SIZE_JAPANESE_DOUBLE_POSTCARD      IDS_WIA_PAPER_SIZE_BASE + 68 
#define IDS_WIA_PAPER_SIZE_A6                            IDS_WIA_PAPER_SIZE_BASE + 69 
#define IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_KAKU_2      IDS_WIA_PAPER_SIZE_BASE + 70 
#define IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_KAKU_3      IDS_WIA_PAPER_SIZE_BASE + 71 
#define IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_CHOU_3      IDS_WIA_PAPER_SIZE_BASE + 72 
#define IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_CHOU_4      IDS_WIA_PAPER_SIZE_BASE + 73 
#define IDS_WIA_PAPER_SIZE_A3_ROTATED                    IDS_WIA_PAPER_SIZE_BASE + 74 
#define IDS_WIA_PAPER_SIZE_A4_ROTATED                    IDS_WIA_PAPER_SIZE_BASE + 75 
#define IDS_WIA_PAPER_SIZE_A5_ROTATED                    IDS_WIA_PAPER_SIZE_BASE + 76 
#define IDS_WIA_PAPER_SIZE_B4_JIS_ROTATED                IDS_WIA_PAPER_SIZE_BASE + 77 
#define IDS_WIA_PAPER_SIZE_B5_JIS_ROTATED                IDS_WIA_PAPER_SIZE_BASE + 78 
#define IDS_WIA_PAPER_SIZE_JAPANESE_POSTCARD_ROTATED     IDS_WIA_PAPER_SIZE_BASE + 79 
#define IDS_WIA_PAPER_SIZE_DOUBLE_JAPAN_POSTCARD_ROTATED IDS_WIA_PAPER_SIZE_BASE + 80 
#define IDS_WIA_PAPER_SIZE_A6_ROTATED                    IDS_WIA_PAPER_SIZE_BASE + 81 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_KAKU_2_ROTATED IDS_WIA_PAPER_SIZE_BASE + 82 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_KAKU_3_ROTATED IDS_WIA_PAPER_SIZE_BASE + 83 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_CHOU_3_ROTATED IDS_WIA_PAPER_SIZE_BASE + 84 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_CHOU_4_ROTATED IDS_WIA_PAPER_SIZE_BASE + 85 
#define IDS_WIA_PAPER_SIZE_B6_JIS                        IDS_WIA_PAPER_SIZE_BASE + 86 
#define IDS_WIA_PAPER_SIZE_B6_JIS_ROTATED                IDS_WIA_PAPER_SIZE_BASE + 87 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_YOU_4          IDS_WIA_PAPER_SIZE_BASE + 88 
#define IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_YOU_4_ROTATED  IDS_WIA_PAPER_SIZE_BASE + 89 
#define IDS_WIA_PAPER_SIZE_PRC_16K                       IDS_WIA_PAPER_SIZE_BASE + 90 
#define IDS_WIA_PAPER_SIZE_PRC_32K                       IDS_WIA_PAPER_SIZE_BASE + 91 
#define IDS_WIA_PAPER_SIZE_PRC_32KBIG                    IDS_WIA_PAPER_SIZE_BASE + 92 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_1                IDS_WIA_PAPER_SIZE_BASE + 93 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_2                IDS_WIA_PAPER_SIZE_BASE + 94 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_3                IDS_WIA_PAPER_SIZE_BASE + 95 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_4                IDS_WIA_PAPER_SIZE_BASE + 96 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_5                IDS_WIA_PAPER_SIZE_BASE + 97 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_6                IDS_WIA_PAPER_SIZE_BASE + 98 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_7                IDS_WIA_PAPER_SIZE_BASE + 99 
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_8                IDS_WIA_PAPER_SIZE_BASE + 100
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_9                IDS_WIA_PAPER_SIZE_BASE + 101
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_10               IDS_WIA_PAPER_SIZE_BASE + 102
#define IDS_WIA_PAPER_SIZE_PRC_16K_ROTATED               IDS_WIA_PAPER_SIZE_BASE + 103
#define IDS_WIA_PAPER_SIZE_PRC_32K_ROTATED               IDS_WIA_PAPER_SIZE_BASE + 104
#define IDS_WIA_PAPER_SIZE_PRC_32KBIG_ROTATED            IDS_WIA_PAPER_SIZE_BASE + 105
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_1_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 106
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_2_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 107
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_3_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 108
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_4_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 109
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_5_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 110
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_6_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 111
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_7_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 112
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_8_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 113
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_9_ROTATED        IDS_WIA_PAPER_SIZE_BASE + 114
#define IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_10_ROTATED       IDS_WIA_PAPER_SIZE_BASE + 115
#define IDS_WIA_PAPER_SIZE_A6_105_X_148                  IDS_WIA_PAPER_SIZE_BASE + 116
#define IDS_WIA_PAPER_SIZE_B6                            IDS_WIA_PAPER_SIZE_BASE + 117

#endif // __PAPRSIZE_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\paprsize.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION
 *
 *  TITLE:       PAPRSIZE.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/8/2001
 *
 *  DESCRIPTION: Scanner paper sizes
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "wiauiext.h"
#include "paprsize.h"

extern HINSTANCE g_hInstance;

static const struct
{
    int nStringId;
    LONG nWidth;
    LONG nHeight;
} g_SupportedPaperSizes[] =
{
    { IDS_WIA_PAPER_SIZE_E_SIZE_SHEET,                   34000, 44000 },
    { IDS_WIA_PAPER_SIZE_D_SIZE_SHEET,                   22000, 34000 },
    { IDS_WIA_PAPER_SIZE_A2,                             16535, 23386 },
    { IDS_WIA_PAPER_SIZE_C_SIZE_SHEET,                   17000, 22000 },
    { IDS_WIA_PAPER_SIZE_SUPER_B,                        12008, 19173 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_10_ROTATED,        18031, 12756 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_C3,                    12756, 18031 },
    { IDS_WIA_PAPER_SIZE_A3_EXTRA,                       12677, 17520 },
    { IDS_WIA_PAPER_SIZE_TABLOID_EXTRA,                  12000, 18000 },
    { IDS_WIA_PAPER_SIZE_A3_ROTATED,                     16535, 11693 },
    { IDS_WIA_PAPER_SIZE_A3,                             11693, 16535 },
    { IDS_WIA_PAPER_SIZE_LEDGER,                         17000, 11000 },
    { IDS_WIA_PAPER_SIZE_TABLOID,                        11000, 17000 },
    { IDS_WIA_PAPER_SIZE_15X11,                          15000, 11000 },
    { IDS_WIA_PAPER_SIZE_US_STD_FANFOLD,                 14875, 11000 },
    { IDS_WIA_PAPER_SIZE_B4_JIS_ROTATED,                 14331, 10118 },
    { IDS_WIA_PAPER_SIZE_B4_JIS,                         10118, 14331 },
    { IDS_WIA_PAPER_SIZE_LEGAL_EXTRA,                    9500, 15000 },
    { IDS_WIA_PAPER_SIZE_10X14,                          10000, 14000 },
    { IDS_WIA_PAPER_SIZE_B4_ISO,                         9843, 13898 },
    { IDS_WIA_PAPER_SIZE_12X11,                          12005, 11005 },
    { IDS_WIA_PAPER_SIZE_SUPER_A,                        8937, 14016 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_KAKU_2_ROTATED,  13071, 9449 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_KAKU_2,       9449, 13071 },
    { IDS_WIA_PAPER_SIZE_LEGAL,                          8500, 14000 },
    { IDS_WIA_PAPER_SIZE_A4_EXTRA,                       9270, 12690 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_9_ROTATED,         12756, 9016 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_C4,                    9016, 12756 },
    { IDS_WIA_PAPER_SIZE_LETTER_EXTRA,                   9500, 12000 },
    { IDS_WIA_PAPER_SIZE_FOLIO,                          8500, 13000 },
    { IDS_WIA_PAPER_SIZE_10X11,                          10000, 11000 },
    { IDS_WIA_PAPER_SIZE_LETTER_PLUS,                    8500, 12690 },
    { IDS_WIA_PAPER_SIZE_A4_PLUS,                        8268, 12992 },
    { IDS_WIA_PAPER_SIZE_GERMAN_STD_FANFOLD,             8500, 12000 },
    { IDS_WIA_PAPER_SIZE_9X11,                           9000, 11000 },
    { IDS_WIA_PAPER_SIZE_A4_ROTATED,                     11693, 8268 },
    { IDS_WIA_PAPER_SIZE_A4,                             8268, 11693 },
    { IDS_WIA_PAPER_SIZE_LETTER_ROTATED,                 11000, 8500 },
    { IDS_WIA_PAPER_SIZE_LETTER,                         8500, 11000 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_KAKU_3_ROTATED,  10906, 8504 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_KAKU_3,       8504, 10906 },
    { IDS_WIA_PAPER_SIZE_QUARTO,                         8465, 10827 },
    { IDS_WIA_PAPER_SIZE_B5_ISO_EXTRA,                   7913, 10866 },
    { IDS_WIA_PAPER_SIZE_EXECUTIVE,                      7250, 10500 },
    { IDS_WIA_PAPER_SIZE_PRC_16K_ROTATED,                10236, 7402 },
    { IDS_WIA_PAPER_SIZE_PRC_16K,                        7402, 10236 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_INVITE,                8661, 8661 },
    { IDS_WIA_PAPER_SIZE_B5_JIS_ROTATED,                 10118, 7165 },
    { IDS_WIA_PAPER_SIZE_B5_JIS,                         7165, 10118 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_B5,                    6929, 9843 },
    { IDS_WIA_PAPER_SIZE_A5_EXTRA,                       6850, 9252 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_C5,                    6378, 9016 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_14,                    5000, 11500 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_8_ROTATED,         12165, 4724 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_8,                 4724, 12165 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_7_ROTATED,         9055, 6299 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_7,                 6299, 9055 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_12,                    4750, 11000 },
    { IDS_WIA_PAPER_SIZE_A5_ROTATED,                     8268, 5827 },
    { IDS_WIA_PAPER_SIZE_A5,                             5827, 8268 },
    { IDS_WIA_PAPER_SIZE_STATEMENT,                      5500, 8500 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_11,                    4500, 10375 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_DOUBLE_POSTCARD,       7874, 5827 },
    { IDS_WIA_PAPER_SIZE_DOUBLE_JAPAN_POSTCARD_ROTATED,  5827, 7874 },
    { IDS_WIA_PAPER_SIZE_PRC_32KBIG_ROTATED,             7992, 5512 },
    { IDS_WIA_PAPER_SIZE_PRC_32KBIG,                     5512, 7992 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_CHOU_3_ROTATED,  9252, 4724 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_CHOU_3,       4724, 9252 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_6_ROTATED,         9055, 4724 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_6,                 4724, 9055 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_C65,                   4488, 9016 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE,                       4331, 9055 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_10,                    4125, 9500 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_YOU_4_ROTATED,   9252, 4134 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_YOU_4,           4134, 9252 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_5_ROTATED,         8661, 4331 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_DL,                    4331, 8661 },
    { IDS_WIA_PAPER_SIZE_PRC_32K_ROTATED,                7244, 5118 },
    { IDS_WIA_PAPER_SIZE_PRC_32K,                        5118, 7244 },
    { IDS_WIA_PAPER_SIZE_B6,                             5040, 7170 },
    { IDS_WIA_PAPER_SIZE_B6_JIS_ROTATED,                 7165, 5039 },
    { IDS_WIA_PAPER_SIZE_B6_JIS,                         5039, 7165 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_4_ROTATED,         8189, 4331 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_4,                 4331, 8189 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_9,                     3875, 8875 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_B6,                    6929, 4921 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_3,                 4921, 6929 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_MONARCH,               3875, 7500 },
    { IDS_WIA_PAPER_SIZE_ENVELOPE_C6,                    4488, 6378 },
    { IDS_WIA_PAPER_SIZE_JAPAN_ENVELOPE_CHOU_4_ROTATED,  8071, 3543 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_ENVELOPE_CHOU_4,       3543, 8071 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_2_ROTATED,         6929, 4016 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_2,                 4016, 6929 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_1_ROTATED,         6496, 4016 },
    { IDS_WIA_PAPER_SIZE_PRC_ENVELOPE_1,                 4016, 6496 },
    { IDS_WIA_PAPER_SIZE_A6_105_X_148,                   4133, 5830 },
    { IDS_WIA_PAPER_SIZE_A6_ROTATED,                     5827, 4134 },
    { IDS_WIA_PAPER_SIZE_A6,                             4134, 5827 },
    { IDS_WIA_PAPER_SIZE_6_34_ENVELOPE,                  3625, 6500 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_POSTCARD_ROTATED,      5827, 3937 },
    { IDS_WIA_PAPER_SIZE_JAPANESE_POSTCARD,              3937, 5827 }
};

static const UINT g_SupportedPaperSizeCount = ARRAYSIZE(g_SupportedPaperSizes);

STDMETHODIMP CWiaDefaultUI::GetPaperSizes( CWiaPaperSize **ppPaperSizes, UINT *pnCount )
{
    //
    // Verify arguments
    //
    if (!ppPaperSizes || !pnCount)
    {
        return E_INVALIDARG;
    }

    //
    // Initialize to NULL
    //
    *ppPaperSizes = NULL;
    *pnCount = 0;

    //
    // Allocate the array of paper sizes
    //
    CWiaPaperSize *pPaperSizes = reinterpret_cast<CWiaPaperSize*>(CoTaskMemAlloc( sizeof(CWiaPaperSize) * g_SupportedPaperSizeCount ));
    if (pPaperSizes)
    {
        //
        // Initialize each name, so we can delete them if we encounter an error.
        //
        for (UINT i=0;i<g_SupportedPaperSizeCount;i++)
        {
            pPaperSizes[i].pszName = NULL;
        }
        
        //
        // Assume success
        //
        bool bSucceeded = true;

        //
        // Loop through the paper size array
        //
        for (UINT i=0;i<g_SupportedPaperSizeCount && bSucceeded;i++)
        {
            //
            // Load the name of this paper size
            //
            CSimpleStringWide strPaperName = CSimpleStringConvert::WideString(CSimpleString(g_SupportedPaperSizes[i].nStringId,g_hInstance));
            if (strPaperName.Length())
            {
                //
                // Allocate the string to hold the paper size name
                //
                pPaperSizes[i].pszName = reinterpret_cast<LPWSTR>(CoTaskMemAlloc((strPaperName.Length()+1) * sizeof(WCHAR)));
                if (pPaperSizes[i].pszName)
                {
                    //
                    // Copy over all the paper size values
                    //
                    lstrcpyW( pPaperSizes[i].pszName, strPaperName );
                    pPaperSizes[i].nWidth = g_SupportedPaperSizes[i].nWidth;
                    pPaperSizes[i].nHeight = g_SupportedPaperSizes[i].nHeight;
                }
                else
                {
                    bSucceeded = false;
                }
            }
            else
            {
                bSucceeded = false;
            }
        }

        //
        // If we hit some kind of error, free all memory
        //
        if (!bSucceeded)
        {
            UINT nCount = g_SupportedPaperSizeCount;
            FreePaperSizes( &pPaperSizes, &nCount );
        }
    }

    //
    // Save the paper size and the array size
    //
    *ppPaperSizes = pPaperSizes;
    *pnCount = g_SupportedPaperSizeCount;

    //
    // Return success if we successfully allocated the paper size array
    //
    return (*ppPaperSizes && *pnCount) ? S_OK : E_FAIL;
}

STDMETHODIMP CWiaDefaultUI::FreePaperSizes( CWiaPaperSize **ppPaperSizes, UINT *pnCount )
{
    //
    // Verify arguments
    //
    if (!ppPaperSizes || !pnCount)
    {
        return E_INVALIDARG;
    }

    //
    // Loop and free the strings
    //
    for (UINT i=0;i<*pnCount;i++)
    {
        if ((*ppPaperSizes)[i].pszName)
        {
            CoTaskMemFree((*ppPaperSizes)[i].pszName);
        }
    }

    //
    // Free the array
    //
    CoTaskMemFree(*ppPaperSizes);

    //
    // 0 everything
    //
    *ppPaperSizes = NULL;
    *pnCount = 0;
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\ppscan.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       PPSCAN.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/17/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __PPSCAN_H_INCLUDED
#define __PPSCAN_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include "contrast.h"
#include "vwiaset.h"
#include "slidedit.h"
#include "updnedit.h"

class CScannerCommonPropertyPage
{
private:
    //
    // For keeping track of which controls are enabled
    //
    enum
    {
        UsingContrast   = 0x00000001,
        UsingBrightness = 0x00000002,
        UsingResolution = 0x00000004,
        UsingDataType   = 0x00000008
    };

    HWND m_hWnd;

    //
    // We need to get this from CScannerPropPageExt *m_pScannerPropPageExt;
    //
    CComPtr<IWiaItem> m_pIWiaItem;

    //
    // We are messing with settings so ignore ui messages.
    //
    int m_nProgrammaticSetting;

    CValidWiaSettings m_ValidContrastSettings;
    CValidWiaSettings m_ValidBrightnessSettings;
    CValidWiaSettings m_ValidResolutionSettings;

    CSliderAndEdit    m_BrightnessSliderAndEdit;
    CSliderAndEdit    m_ContrastSliderAndEdit;
    CUpDownAndEdit    m_ResolutionUpDownAndEdit;

    LONG              m_nControlsInUse;
    int               m_nInitialDataTypeSelection;

    static const int  c_nMinBrightnessAndContrastSettingCount;

private:
    //
    // No implementation
    //
    CScannerCommonPropertyPage(void);
    CScannerCommonPropertyPage( const CScannerCommonPropertyPage & );
    CScannerCommonPropertyPage &operator=( const CScannerCommonPropertyPage & );

private:
    CScannerCommonPropertyPage( HWND hWnd );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnApply( WPARAM, LPARAM );
    LRESULT OnKillActive( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnHScroll( WPARAM, LPARAM );
    LRESULT OnVScroll( WPARAM, LPARAM );
    LRESULT OnHelp( WPARAM, LPARAM );
    LRESULT OnContextMenu( WPARAM, LPARAM );
    LRESULT OnSysColorChange( WPARAM, LPARAM );

    void OnBrightnessEditChange( WPARAM, LPARAM );
    void OnContrastEditChange( WPARAM, LPARAM );
    void OnResolutionEditChange( WPARAM, LPARAM );
    void OnDataTypeSelChange( WPARAM, LPARAM );
    void OnRestoreDefault( WPARAM, LPARAM );

    void SetText( HWND hWnd, LPCTSTR pszText );
    void SetText( HWND hWnd, LONG nNumber );
    bool PopulateDataTypes(void);
    bool ApplySettings(void);
    bool ValidateEditControls(void);
    void Initialize(void);
    bool IsUselessPreviewRange( const CValidWiaSettings &Settings );

public:
    ~CScannerCommonPropertyPage(void);
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
};

#endif //__PPSCAN_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\ppattach.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       PPATTACH.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/26/2000
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __PPATTACH_H_INCLUDED
#define __PPATTACH_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include "attach.h"

class CAttachmentCommonPropertyPage
{
private:
    HWND m_hWnd;

    //
    // We need to get this from CScannerPropPageExt *m_pScannerPropPageExt;
    //
    CComPtr<IWiaItem> m_pWiaItem;

    HICON         m_hDefAttachmentIcon;
    CSimpleString m_strDefaultUnknownDescription;
    CSimpleString m_strEmptyDescriptionMask;
    CSimpleString m_strDefUnknownExtension;

private:
    //
    // No implementation
    //
    CAttachmentCommonPropertyPage(void);
    CAttachmentCommonPropertyPage( const CAttachmentCommonPropertyPage & );
    CAttachmentCommonPropertyPage &operator=( const CAttachmentCommonPropertyPage & );

private:
    CAttachmentCommonPropertyPage( HWND hWnd );
    LRESULT OnCommand( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM, LPARAM );
    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnApply( WPARAM, LPARAM );
    LRESULT OnKillActive( WPARAM, LPARAM );
    LRESULT OnSetActive( WPARAM, LPARAM );
    LRESULT OnHelp( WPARAM, LPARAM );
    LRESULT OnContextMenu( WPARAM, LPARAM );
    LRESULT OnListDeleteItem( WPARAM, LPARAM );
    LRESULT OnListItemChanged( WPARAM, LPARAM );
    LRESULT OnListDblClk( WPARAM, LPARAM );
    
    bool IsPlaySupported( const GUID &guidFormat );

    void UpdateControls(void);
    void Initialize(void);
    void AddAnnotation( HWND hwndList, const CAnnotation &Annotation );
    void PlayItem( int nIndex );
    int GetCurrentSelection(void);
    CAnnotation *GetAttachment( int nIndex );
    void OnPlay( WPARAM, LPARAM );

public:
    ~CAttachmentCommonPropertyPage(void);
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
};

#endif //__PPSCAN_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\precomp.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       PRECOMP.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        8/4/1999
 *
 *  DESCRIPTION: Precompiled header for wiadefui
 *
 *******************************************************************************/
#ifndef __PRECOMP_H_INCLUDED
#define __PRECOMP_H_INCLUDED

#include <windows.h>
#include <commctrl.h>
#include <objbase.h>
#include <atlbase.h>
#include <shellapi.h>
#include <shlobj.h>
#include <sti.h>
#include <wia.h>
#include <uicommon.h>
#include <simcrack.h>
#include <wiadebug.h>
#include "resource.h"
#include <shfusion.h>

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\ppscan.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       PPSCAN.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/17/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "ppscan.h"
#include "resource.h"
#include "wiacsh.h"

//
// Context Help IDs
//
static const DWORD g_HelpIDs[] =
{
    IDC_SCANPROP_BRIGHTNESS_PROMPT, IDH_WIA_BRIGHTNESS,
    IDC_SCANPROP_BRIGHTNESS_SLIDER, IDH_WIA_BRIGHTNESS,
    IDC_SCANPROP_BRIGHTNESS_EDIT,   IDH_WIA_BRIGHTNESS,
    IDC_SCANPROP_CONTRAST_PROMPT,   IDH_WIA_CONTRAST,
    IDC_SCANPROP_CONTRAST_SLIDER,   IDH_WIA_CONTRAST,
    IDC_SCANPROP_CONTRAST_EDIT,     IDH_WIA_CONTRAST,
    IDC_SCANPROP_RESOLUTION_PROMPT, IDH_WIA_PIC_RESOLUTION,
    IDC_SCANPROP_RESOLUTION_EDIT,   IDH_WIA_PIC_RESOLUTION,
    IDC_SCANPROP_RESOLUTION_UPDOWN, IDH_WIA_PIC_RESOLUTION,
    IDC_SCANPROP_PREVIEW,           IDH_WIA_CUSTOM_PREVIEW,
    IDC_SCANPROP_DATATYPE_PROMPT,   IDH_WIA_IMAGE_TYPE,
    IDC_SCANPROP_DATATYPE_LIST,     IDH_WIA_IMAGE_TYPE,
    IDC_SCANPROP_RESTOREDEFAULT,    IDH_WIA_RESTORE_DEFAULT,
    IDOK,                           IDH_OK,
    IDCANCEL,                       IDH_CANCEL,
    0, 0
};

extern HINSTANCE g_hInstance;

//
// These are the data types we support
//
static struct
{
    int  nStringId;
    LONG nDataType;
    UINT nPreviewWindowIntent;
} g_AvailableColorDepths[] =
{
    { IDS_SCANPROP_COLOR, WIA_DATA_COLOR, BCPWM_COLOR },
    { IDS_SCANPROP_GRAYSCALE, WIA_DATA_GRAYSCALE, BCPWM_GRAYSCALE },
    { IDS_SCANPROP_BLACKANDWHITE, WIA_DATA_THRESHOLD, BCPWM_BW }
};
#define AVAILABLE_COLOR_DEPTH_COUNT (sizeof(g_AvailableColorDepths)/sizeof(g_AvailableColorDepths[0]))

//
// If we don't have a good range of values for the brightness and contrast settings,
// we want to disable the preview control.  This is the minumum number of values
// we consider useful for this purpose
//
const int CScannerCommonPropertyPage::c_nMinBrightnessAndContrastSettingCount = 10;

//
// The only constructor
//
CScannerCommonPropertyPage::CScannerCommonPropertyPage( HWND hWnd )
  : m_hWnd(hWnd),
    m_nProgrammaticSetting(0),
    m_nControlsInUse(0)
{
}

CScannerCommonPropertyPage::~CScannerCommonPropertyPage(void)
{
    m_hWnd = NULL;
}

LRESULT CScannerCommonPropertyPage::OnKillActive( WPARAM , LPARAM )
{
    CWaitCursor wc;
    if (!ValidateEditControls())
    {
        return TRUE;
    }
    ApplySettings();
    return FALSE;
}

LRESULT CScannerCommonPropertyPage::OnSetActive( WPARAM , LPARAM )
{
    CWaitCursor wc;
    Initialize();
    return 0;
}

LRESULT CScannerCommonPropertyPage::OnApply( WPARAM , LPARAM )
{
    if (ApplySettings())
    {
        return PSNRET_NOERROR;
    }
    else
    {
        //
        // Tell the user there was an error
        //
        MessageBox( m_hWnd,
                    CSimpleString( IDS_SCANPROP_UNABLETOWRITE, g_hInstance ),
                    CSimpleString( IDS_SCANPROP_ERROR_TITLE, g_hInstance ),
                    MB_ICONINFORMATION );
        return PSNRET_INVALID_NOCHANGEPAGE;
    }
}

void CScannerCommonPropertyPage::SetText( HWND hWnd, LPCTSTR pszText )
{
    m_nProgrammaticSetting++;
    SetWindowText( hWnd, pszText );
    m_nProgrammaticSetting--;
}

void CScannerCommonPropertyPage::SetText( HWND hWnd, LONG nNumber )
{
    SetText( hWnd, CSimpleStringConvert::NumberToString( nNumber ) );
}

bool CScannerCommonPropertyPage::PopulateDataTypes(void)
{
    //
    // We will be successful if we can add at least one data type
    //
    bool bSuccess = false;

    //
    // Clear the list
    //
    SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_RESETCONTENT, 0, 0 );

    //
    // Try to load the data types for this device
    //
    CSimpleDynamicArray<LONG> SupportedDataTypes;
    LONG nCurrentDataType;
    if (PropStorageHelpers::GetProperty( m_pIWiaItem, WIA_IPA_DATATYPE, nCurrentDataType ) &&
        PropStorageHelpers::GetPropertyList( m_pIWiaItem, WIA_IPA_DATATYPE, SupportedDataTypes ))
    {
        //
        // Loop through each of the data types we handle, and see if it is supported by the device
        //
        m_nInitialDataTypeSelection = 0;
        for (int i=0;i<AVAILABLE_COLOR_DEPTH_COUNT;i++)
        {
            //
            // Is this one of the data types we support?
            //
            if (SupportedDataTypes.Find(g_AvailableColorDepths[i].nDataType) != -1)
            {
                //
                // Load the data type string and make sure it is valid
                //
                CSimpleString strDataTypeName( g_AvailableColorDepths[i].nStringId, g_hInstance );
                if (strDataTypeName.Length())
                {
                    //
                    // Add the string to the combo box
                    //
                    LRESULT nIndex = SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_ADDSTRING, 0, reinterpret_cast<LPARAM>(strDataTypeName.String()));
                    if (nIndex != CB_ERR)
                    {
                        //
                        // Save the index of the global data type struct we are using for this entry
                        //
                        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_SETITEMDATA, nIndex, i );

                        //
                        // Whew, we made it at least once, so we are using this control
                        //
                        bSuccess = true;

                        //
                        // Save the current selection and update the preview control
                        //
                        if (nCurrentDataType == g_AvailableColorDepths[i].nDataType)
                        {
                            m_nInitialDataTypeSelection = static_cast<int>(nIndex);
                            SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_SETINTENT, 0, g_AvailableColorDepths[i].nPreviewWindowIntent );
                        }
                    }
                }
            }
        }
        //
        // Set the current selection
        //
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_SETCURSEL, m_nInitialDataTypeSelection, 0 );
    }
    return bSuccess;
}


bool CScannerCommonPropertyPage::IsUselessPreviewRange( const CValidWiaSettings &Settings )
{
    return (Settings.GetItemCount() < c_nMinBrightnessAndContrastSettingCount);
}


void CScannerCommonPropertyPage::Initialize()
{
    //
    // Make sure we don't get into an infinite loop
    //
    m_nProgrammaticSetting++;

    //
    // Assume we aren't using any controls at all
    //
    m_nControlsInUse = 0;

    //
    // Get the valid settings for brightness and set up the associated controls
    //
    if (!m_ValidBrightnessSettings.Read( m_pIWiaItem, WIA_IPS_BRIGHTNESS ))
    {
        //
        // Disable brightness controls
        //
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_PROMPT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_EDIT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_SLIDER ), FALSE );
    }
    else
    {
        //
        // Enable brightness controls
        //
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_PROMPT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_EDIT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_SLIDER ), TRUE );

        m_BrightnessSliderAndEdit.Initialize(
            GetDlgItem(m_hWnd,IDC_SCANPROP_BRIGHTNESS_SLIDER),
            GetDlgItem(m_hWnd,IDC_SCANPROP_BRIGHTNESS_EDIT),
            GetDlgItem(m_hWnd,IDC_SCANPROP_PREVIEW),
            BCPWM_SETBRIGHTNESS, &m_ValidBrightnessSettings );

        //
        // Remember that we are using this control
        //
        m_nControlsInUse |= UsingBrightness;
    }

    //
    // Get the valid settings for contrast and set up the associated controls
    //
    if (!m_ValidContrastSettings.Read( m_pIWiaItem, WIA_IPS_CONTRAST ))
    {
        //
        // Disable contrast controls
        //
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_PROMPT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_EDIT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_SLIDER ), FALSE );
    }
    else
    {
        //
        // Enable contrast controls
        //
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_PROMPT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_EDIT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_SLIDER ), TRUE );

        m_ContrastSliderAndEdit.Initialize(
            GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_SLIDER),
            GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_EDIT),
            GetDlgItem(m_hWnd,IDC_SCANPROP_PREVIEW),
            BCPWM_SETCONTRAST, &m_ValidContrastSettings );

        //
        // Remember that we are using this control
        //
        m_nControlsInUse |= UsingContrast;
    }

    //
    // Should we disable resolution?  Assume yes.
    //
    bool bDisableResolution = true;

    //
    // Figure out what the *common* list of valid settings for horizontal
    // and vertical resolution
    //
    CValidWiaSettings HorizontalResolution;
    if (HorizontalResolution.Read( m_pIWiaItem, WIA_IPS_XRES ))
    {
        //
        // Y Resolution can be read-only, and be linked to X resolution
        //
        if (PropStorageHelpers::IsReadOnlyProperty(m_pIWiaItem, WIA_IPS_YRES))
        {
            m_ValidResolutionSettings = HorizontalResolution;
            
            //
            // If we made it this far, we have good resolution settings
            //
            bDisableResolution = false;
        }
        else
        {
            CValidWiaSettings VerticalResolution;
            if (VerticalResolution.Read( m_pIWiaItem, WIA_IPS_YRES ))
            {
                if (m_ValidResolutionSettings.FindIntersection(HorizontalResolution,VerticalResolution))
                {
                    //
                    // If we made it this far, we have good resolution settings
                    //
                    bDisableResolution = false;
                }
            }
        }
    }

    //
    // If we can't display resolution, disable it
    //
    if (bDisableResolution)
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_PROMPT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_EDIT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_UPDOWN ), FALSE );
    }
    else
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_PROMPT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_EDIT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_UPDOWN ), TRUE );

        m_ResolutionUpDownAndEdit.Initialize(
            GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_UPDOWN ),
            GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_EDIT ),
            &m_ValidResolutionSettings );

        //
        // Remember that we are using this control
        //
        m_nControlsInUse |= UsingResolution;
    }

    //
    // If we can't populate datatype, disable it
    //
    if (!PopulateDataTypes())
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_DATATYPE_PROMPT ), FALSE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_DATATYPE_LIST ), FALSE );
    }
    else
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_DATATYPE_PROMPT ), TRUE );
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_DATATYPE_LIST ), TRUE );
        m_nControlsInUse |= UsingDataType;
    }

    //
    // This means all controls were disabled
    //
    if (!m_nControlsInUse)
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESTOREDEFAULT ), FALSE );
    }
    else
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_RESTOREDEFAULT ), TRUE );
    }

    //
    // If we are not using brightness or contrast OR if the brightness and contrast values are not useful
    // for presenting meaningful feedback, disable the preview control so it doesn't mislead the user.
    //
    if (!(m_nControlsInUse & (UsingContrast|UsingBrightness)) || IsUselessPreviewRange(m_ValidBrightnessSettings) || IsUselessPreviewRange(m_ValidContrastSettings))
    {
        EnableWindow( GetDlgItem( m_hWnd, IDC_SCANPROP_PREVIEW ), FALSE );
    }

    //
    // Start responding to EN_CHANGE messages again
    //
    m_nProgrammaticSetting--;

    //
    // Make sure the correct image is in the thumbnail
    //
    OnDataTypeSelChange(0,0);
}


LRESULT CScannerCommonPropertyPage::OnInitDialog( WPARAM, LPARAM lParam )
{
    //
    // Get the WIA item
    //
    PROPSHEETPAGE *pPropSheetPage = reinterpret_cast<PROPSHEETPAGE*>(lParam);
    if (pPropSheetPage)
    {
        m_pIWiaItem = reinterpret_cast<IWiaItem*>(pPropSheetPage->lParam);
    }
    if (!m_pIWiaItem)
    {
        return -1;
    }

    //
    // Load the preview control bitmaps
    //
    HBITMAP hBmpColor         = reinterpret_cast<HBITMAP>(LoadImage(g_hInstance, MAKEINTRESOURCE(IDB_SCANPROP_BITMAPPHOTO),     IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION ));
    HBITMAP hBmpGrayscale     = reinterpret_cast<HBITMAP>(LoadImage(g_hInstance, MAKEINTRESOURCE(IDB_SCANPROP_BITMAPGRAYSCALE), IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION ));
    HBITMAP hBmpBlackAndWhite = reinterpret_cast<HBITMAP>(LoadImage(g_hInstance, MAKEINTRESOURCE(IDB_SCANPROP_BITMAPTEXT),      IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION ));

    //
    // If they all loaded OK, set them
    //
    if (hBmpColor && hBmpGrayscale && hBmpBlackAndWhite)
    {
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_LOADIMAGE, BCPWM_COLOR,     reinterpret_cast<LPARAM>(hBmpColor));
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_LOADIMAGE, BCPWM_GRAYSCALE, reinterpret_cast<LPARAM>(hBmpGrayscale));
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_LOADIMAGE, BCPWM_BW,        reinterpret_cast<LPARAM>(hBmpBlackAndWhite));
    }
    else
    {
        //
        // Otherwise delete all of the bitmaps
        //
        if (hBmpColor)
        {
            DeleteObject(hBmpColor);
        }
        if (hBmpGrayscale)
        {
            DeleteObject(hBmpGrayscale);
        }
        if (hBmpBlackAndWhite)
        {
            DeleteObject(hBmpBlackAndWhite);
        }
    }

    return TRUE;
}

LRESULT CScannerCommonPropertyPage::OnHScroll( WPARAM wParam, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CScannerCommonPropertyPage::OnHScroll( %08X, %08X )"), wParam, lParam ));
    if (m_nProgrammaticSetting)
    {
        return 0;
    }

    //
    // Contrast
    //
    if (reinterpret_cast<HWND>(lParam) == GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_SLIDER ) )
    {
        m_nProgrammaticSetting++;
        m_ContrastSliderAndEdit.HandleSliderUpdate();
        m_nProgrammaticSetting--;
    }
    //
    // Brightness
    //
    else if (reinterpret_cast<HWND>(lParam) == GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_SLIDER ) )
    {
        m_nProgrammaticSetting++;
        m_BrightnessSliderAndEdit.HandleSliderUpdate();
        m_nProgrammaticSetting--;
    }

    return 0;
}


LRESULT CScannerCommonPropertyPage::OnVScroll( WPARAM wParam, LPARAM lParam )
{
    WIA_PUSH_FUNCTION((TEXT("CScannerCommonPropertyPage::OnVScroll( %08X, %08X )"), wParam, lParam ));
    if (m_nProgrammaticSetting)
    {
        return 0;
    }

    //
    // Resolution
    //
    if (reinterpret_cast<HWND>(lParam) == GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_UPDOWN ) )
    {
        m_nProgrammaticSetting++;
        m_ResolutionUpDownAndEdit.HandleUpDownUpdate();
        m_nProgrammaticSetting--;
    }
    return 0;
}

void CScannerCommonPropertyPage::OnBrightnessEditChange( WPARAM, LPARAM )
{
    if (m_nProgrammaticSetting)
    {
        return;
    }
    m_nProgrammaticSetting++;
    m_BrightnessSliderAndEdit.HandleEditUpdate();
    m_nProgrammaticSetting--;
}


void CScannerCommonPropertyPage::OnContrastEditChange( WPARAM, LPARAM )
{
    if (m_nProgrammaticSetting)
    {
        return;
    }
    m_nProgrammaticSetting++;
    m_ContrastSliderAndEdit.HandleEditUpdate();
    m_nProgrammaticSetting--;
}


void CScannerCommonPropertyPage::OnResolutionEditChange( WPARAM, LPARAM )
{
    if (m_nProgrammaticSetting)
    {
        return;
    }
    m_nProgrammaticSetting++;
    m_ResolutionUpDownAndEdit.HandleEditUpdate();
    m_nProgrammaticSetting--;
}

void CScannerCommonPropertyPage::OnDataTypeSelChange( WPARAM, LPARAM )
{
    if (m_nProgrammaticSetting)
    {
        return;
    }
    m_nProgrammaticSetting++;
    int nCurSel = static_cast<int>(SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_GETCURSEL, 0, 0 ));
    if (nCurSel != CB_ERR)
    {
        int nDataTypeIndex = static_cast<int>(SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_GETITEMDATA, nCurSel, 0 ));
        if (nDataTypeIndex >= 0 && nDataTypeIndex < AVAILABLE_COLOR_DEPTH_COUNT)
        {
            SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_SETINTENT, 0, g_AvailableColorDepths[nDataTypeIndex].nPreviewWindowIntent );
            
            if (m_nControlsInUse & UsingContrast)
            {
                if (BCPWM_BW == g_AvailableColorDepths[nDataTypeIndex].nPreviewWindowIntent)
                {
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_PROMPT), FALSE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_PROMPT), SW_HIDE );
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_SLIDER), FALSE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_SLIDER), SW_HIDE );
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_EDIT), FALSE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_EDIT), SW_HIDE );
                }
                else
                {
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_PROMPT), TRUE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_PROMPT), SW_SHOW );
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_SLIDER), TRUE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_SLIDER), SW_SHOW );
                    EnableWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_EDIT), TRUE );
                    ShowWindow( GetDlgItem(m_hWnd,IDC_SCANPROP_CONTRAST_EDIT), SW_SHOW );
                }
            }
        }
    }
    m_nProgrammaticSetting--;
}


bool CScannerCommonPropertyPage::ValidateEditControls(void)
{
    m_nProgrammaticSetting++;

    bool bSuccess = true;

    //
    // Get and set the brightness setting
    //
    if (m_nControlsInUse & UsingBrightness)
    {
        if (m_ValidBrightnessSettings.IsValid() && !m_BrightnessSliderAndEdit.ValidateEditControl())
        {
            m_BrightnessSliderAndEdit.HandleEditUpdate();
            m_BrightnessSliderAndEdit.HandleSliderUpdate();

            SetFocus( GetDlgItem( m_hWnd, IDC_SCANPROP_BRIGHTNESS_EDIT ) );
            CSimpleString strMessage;

            strMessage.Format( IDS_SCANPROP_INVALIDEDITVALUE, g_hInstance,
                               CSimpleString( IDS_SCANPROP_BRIGHTNESS, g_hInstance ).String() );
            if (strMessage.Length())
            {
                MessageBox( m_hWnd,
                    strMessage,
                    CSimpleString( IDS_SCANPROP_ERROR_TITLE, g_hInstance ),
                    MB_ICONINFORMATION );
            }
            bSuccess = false;
        }
    }

    //
    // Get and set the contrast setting
    //
    if (m_nControlsInUse & UsingContrast)
    {
        if (m_ValidContrastSettings.IsValid() && !m_ContrastSliderAndEdit.ValidateEditControl())
        {
            m_ContrastSliderAndEdit.HandleEditUpdate();
            m_ContrastSliderAndEdit.HandleSliderUpdate();

            SetFocus( GetDlgItem( m_hWnd, IDC_SCANPROP_CONTRAST_EDIT ) );
            CSimpleString strMessage;

            strMessage.Format( IDS_SCANPROP_INVALIDEDITVALUE, g_hInstance,
                               CSimpleString( IDS_SCANPROP_CONTRAST, g_hInstance ).String());

            if (strMessage.Length())
            {
                MessageBox( m_hWnd,
                    strMessage,
                    CSimpleString( IDS_SCANPROP_ERROR_TITLE, g_hInstance ),
                    MB_ICONINFORMATION );
            }
            bSuccess = false;
        }
    }

    //
    // Get and set the resolution setting
    //
    if (m_nControlsInUse & UsingResolution)
    {
        if (m_ValidResolutionSettings.IsValid() && !m_ResolutionUpDownAndEdit.ValidateEditControl())
        {
            m_ResolutionUpDownAndEdit.HandleEditUpdate();
            m_ResolutionUpDownAndEdit.HandleUpDownUpdate();

            SetFocus( GetDlgItem( m_hWnd, IDC_SCANPROP_RESOLUTION_EDIT ) );
            CSimpleString strMessage;

            strMessage.Format( IDS_SCANPROP_INVALIDEDITVALUE, g_hInstance,
                               CSimpleString( IDS_SCANPROP_RESOLUTION, g_hInstance ).String());

            if (strMessage.Length())
            {
                MessageBox( m_hWnd,
                    strMessage,
                    CSimpleString( IDS_SCANPROP_ERROR_TITLE, g_hInstance ),
                    MB_ICONINFORMATION );
            }
            bSuccess = false;
        }
    }

    //
    // If we made it this far, we're OK
    //
    m_nProgrammaticSetting--;

    return bSuccess;
}

bool CScannerCommonPropertyPage::ApplySettings(void)
{
    //
    // Get and set the brightness setting
    //
    if (m_nControlsInUse & UsingBrightness)
    {
        LONG nBrightness = m_BrightnessSliderAndEdit.GetValueFromCurrentPos();
        if (!PropStorageHelpers::SetProperty( m_pIWiaItem, WIA_IPS_BRIGHTNESS, nBrightness ))
        {
            return false;
        }
    }

    //
    // Get and set the contrast setting
    //
    if (m_nControlsInUse & UsingBrightness)
    {
        LONG nContrast = m_ContrastSliderAndEdit.GetValueFromCurrentPos();
        if (!PropStorageHelpers::SetProperty( m_pIWiaItem, WIA_IPS_CONTRAST, nContrast ))
        {
            return false;
        }
    }

    //
    // Get and set the resolution setting
    //
    if (m_nControlsInUse & UsingResolution)
    {
        LONG nResolution = m_ResolutionUpDownAndEdit.GetValueFromCurrentPos();
        if (!PropStorageHelpers::SetProperty( m_pIWiaItem, WIA_IPS_XRES, nResolution ) ||
            (!PropStorageHelpers::IsReadOnlyProperty( m_pIWiaItem, WIA_IPS_YRES ) && !PropStorageHelpers::SetProperty( m_pIWiaItem, WIA_IPS_YRES, nResolution )))
        {
            return false;
        }
    }


    //
    // Get, validate and set the data type setting
    //
    if (m_nControlsInUse & UsingDataType)
    {
        int nCurSel = static_cast<int>(SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_GETCURSEL, 0, 0 ));
        if (nCurSel != CB_ERR)
        {
            int nDataTypeIndex = static_cast<int>(SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_GETITEMDATA, nCurSel, 0 ));
            if (nDataTypeIndex >= 0 && nDataTypeIndex < AVAILABLE_COLOR_DEPTH_COUNT)
            {
                LONG nDataType = g_AvailableColorDepths[nDataTypeIndex].nDataType;
                if (!PropStorageHelpers::SetProperty( m_pIWiaItem, WIA_IPA_DATATYPE, nDataType ))
                {
                    return false;
                }
            }
        }
    }

    //
    // If we made it this far, we're OK
    //
    return true;
}

void CScannerCommonPropertyPage::OnRestoreDefault( WPARAM, LPARAM )
{
    //
    // Ignore EN_CHANGE messages
    //
    m_nProgrammaticSetting++;

    //
    // Restore the brightness setting
    //
    if (m_nControlsInUse & UsingBrightness)
    {
        m_BrightnessSliderAndEdit.Restore();
    }

    //
    // Restore the contrast setting
    //
    if (m_nControlsInUse & UsingContrast)
    {
        m_ContrastSliderAndEdit.Restore();
    }

    //
    // Restore the resolution setting
    //
    if (m_nControlsInUse & UsingResolution)
    {
        m_ResolutionUpDownAndEdit.Restore();
    }


    //
    // Restore the data type setting
    //
    if (m_nControlsInUse & UsingDataType)
    {
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_DATATYPE_LIST, CB_SETCURSEL, m_nInitialDataTypeSelection, 0 );
        SendDlgItemMessage( m_hWnd, IDC_SCANPROP_PREVIEW, BCPWM_SETINTENT, 0, g_AvailableColorDepths[m_nInitialDataTypeSelection].nPreviewWindowIntent );
    }

    //
    // OK, start handling user input
    //
    m_nProgrammaticSetting--;

    //
    // Force an update of the data type controls
    //
    OnDataTypeSelChange(0,0);
}

LRESULT CScannerCommonPropertyPage::OnHelp( WPARAM wParam, LPARAM lParam )
{
    return WiaHelp::HandleWmHelp( wParam, lParam, g_HelpIDs );
}

LRESULT CScannerCommonPropertyPage::OnContextMenu( WPARAM wParam, LPARAM lParam )
{
    return WiaHelp::HandleWmContextMenu( wParam, lParam, g_HelpIDs );
}

LRESULT CScannerCommonPropertyPage::OnSysColorChange( WPARAM wParam, LPARAM lParam )
{
    SendDlgItemMessage( m_hWnd, IDC_SCANPROP_BRIGHTNESS_SLIDER, WM_SYSCOLORCHANGE, wParam, lParam );
    SendDlgItemMessage( m_hWnd, IDC_SCANPROP_CONTRAST_SLIDER, WM_SYSCOLORCHANGE, wParam, lParam );
    return 0;
}

LRESULT CScannerCommonPropertyPage::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_APPLY, OnApply);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_KILLACTIVE,OnKillActive);
        SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}

LRESULT CScannerCommonPropertyPage::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND_NOTIFY(EN_CHANGE,IDC_SCANPROP_BRIGHTNESS_EDIT,OnBrightnessEditChange);
        SC_HANDLE_COMMAND_NOTIFY(EN_CHANGE,IDC_SCANPROP_CONTRAST_EDIT,OnContrastEditChange);
        SC_HANDLE_COMMAND_NOTIFY(EN_CHANGE,IDC_SCANPROP_RESOLUTION_EDIT,OnResolutionEditChange);
        SC_HANDLE_COMMAND_NOTIFY(CBN_SELCHANGE,IDC_SCANPROP_DATATYPE_LIST,OnDataTypeSelChange);
        SC_HANDLE_COMMAND( IDC_SCANPROP_RESTOREDEFAULT, OnRestoreDefault );
    }
    SC_END_COMMAND_HANDLERS();
}


INT_PTR CALLBACK CScannerCommonPropertyPage::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CScannerCommonPropertyPage)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY, OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_HSCROLL, OnHScroll );
        SC_HANDLE_DIALOG_MESSAGE( WM_VSCROLL, OnVScroll );
        SC_HANDLE_DIALOG_MESSAGE( WM_HELP, OnHelp );
        SC_HANDLE_DIALOG_MESSAGE( WM_CONTEXTMENU, OnContextMenu );
        SC_HANDLE_DIALOG_MESSAGE( WM_SYSCOLORCHANGE, OnSysColorChange );
    }
    SC_END_DIALOG_MESSAGE_HANDLERS();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\proppage.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SCANEXT.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/17/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "wia.h"
#include "resource.h"
#include "wiauiext.h"
#include "wiadefui.h"
#include "ppscan.h"
#include "ppattach.h"

extern HINSTANCE g_hInstance;

/*****************************************************************************

CWiaDefaultUI::Initialize

Called by the shell when the user invokes context menu or property sheet for
one of our items.

******************************************************************************/

STDMETHODIMP CWiaDefaultUI::Initialize( LPCITEMIDLIST pidlFolder, LPDATAOBJECT lpdobj, HKEY hkeyProgID )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::Initialize"));
    if (!lpdobj)
    {
        return(E_INVALIDARG);
    }
    FORMATETC fmt;
    STGMEDIUM stgm = {0};
    fmt.cfFormat = static_cast<CLIPFORMAT>(RegisterClipboardFormat(CFSTR_WIAITEMPTR));
    fmt.dwAspect = DVASPECT_CONTENT;
    fmt.lindex = -1;
    fmt.ptd = NULL;
    fmt.tymed = TYMED_ISTREAM;

    HRESULT hr = lpdobj->GetData(&fmt, &stgm);
    if (SUCCEEDED(hr))
    {
        WIA_ASSERT(stgm.tymed == TYMED_ISTREAM);
        hr = CoUnmarshalInterface(stgm.pstm, IID_IWiaItem, reinterpret_cast<LPVOID*>(&m_pItem));
        ReleaseStgMedium(&stgm);
    }
    if (FAILED(hr))
    {
        WIA_PRINTHRESULT((hr,TEXT("Unable to get IWiaItem interface")));
    }
        
    InitCommonControls();
    return hr;
}



static UINT PropPageCallback (HWND hwnd, UINT uMsg, PROPSHEETPAGE *psp)
{
    switch (uMsg)
    {
        case PSPCB_ADDREF:
            DllAddRef();
            break;

        case PSPCB_RELEASE:
            DllRelease();
            break;

        case PSPCB_CREATE:
        default:
            break;

    }
    return TRUE;
}


//
// IDD_ATTACHMENTS
//

/*****************************************************************************
CWiaDefaultUI::AddPages
Called by the shell to get our property pages.
******************************************************************************/
STDMETHODIMP CWiaDefaultUI::AddPages( LPFNADDPROPSHEETPAGE lpfnAddPropSheetPage, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::AddPages"));

    //
    // Make sure we have valid arguments
    //
    if (!lpfnAddPropSheetPage)
    {
        return E_INVALIDARG;
    }

    //
    // Assume success
    //
    HRESULT hr = S_OK;

    //
    // Make sure we have a valid item.  Note that this item will be NULL for multiple selections in the shell.
    //
    if (m_pItem)
    {
        //
        // Get the item type (we probably don't want to display these pages for root items)
        //
        LONG lItemType;
        hr = m_pItem->GetItemType (&lItemType);
        if (SUCCEEDED(hr))
        {
            //
            // Get the root item so we can find out what kind of device this is
            //
            CComPtr<IWiaItem> pRootItem;
            hr = m_pItem->GetRootItem(&pRootItem);
            if (SUCCEEDED(hr))
            {
                //
                // Get the device type
                //
                LONG nDeviceType=0;
                if (PropStorageHelpers::GetProperty( pRootItem, WIA_DIP_DEV_TYPE, nDeviceType ))
                {
                    //
                    // If this is a scanner, add the scanner page
                    //
                    if (StiDeviceTypeScanner == GET_STIDEVICE_TYPE(nDeviceType))
                    {
                        //
                        // Get the property that determines whether or not we should suppress this page
                        // Ignore the return value, because if it doesn't implement it, nSuppressPropertyPages
                        // will still be 0, and the default is to display the property page
                        //
                        LONG nSuppressPropertyPages = 0;
                        PropStorageHelpers::GetProperty( m_pItem, WIA_IPA_SUPPRESS_PROPERTY_PAGE, nSuppressPropertyPages );

                        if ((nSuppressPropertyPages & WIA_PROPPAGE_SCANNER_ITEM_GENERAL) == 0)
                        {
                            //
                            // register the brightness contrast control.
                            //
                            CBrightnessContrast::RegisterClass(g_hInstance);

                            //
                            // Make sure this is not a root item
                            //
                            if ((lItemType & WiaItemTypeRoot) == 0)
                            {
                                //
                                // Get the title
                                //
                                TCHAR szTitle[MAX_PATH];
                                LoadString( g_hInstance, IDD_SCAPROP_TITLE, szTitle, MAX_PATH );

                                //
                                // Prepare the scanner property page
                                //
                                PROPSHEETPAGE psp[1] = {0};
                                psp[0].dwSize = sizeof(psp[0]);
                                psp[0].dwFlags = PSP_USECALLBACK | PSP_USETITLE;
                                psp[0].hInstance = g_hInstance;
                                psp[0].pszTemplate = MAKEINTRESOURCE(IDD_NEW_SCANPROP);
                                psp[0].pfnDlgProc = CScannerCommonPropertyPage::DialogProc;
                                psp[0].lParam = reinterpret_cast<LPARAM>(Item());
                                psp[0].pszTitle = szTitle;
                                psp[0].pfnCallback = PropPageCallback;
                                WiaUiUtil::PreparePropertyPageForFusion(&psp[0]);

                                //
                                // Create the property page
                                //
                                HPROPSHEETPAGE hPropSheetPage = CreatePropertySheetPage(psp+0);
                                if (hPropSheetPage)
                                {
                                    //
                                    // Add the property page
                                    //
                                    if (!lpfnAddPropSheetPage( hPropSheetPage, lParam ))
                                    {
                                        DestroyPropertySheetPage(hPropSheetPage);
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_ERROR((TEXT("CreatePropertySheetPage returned NULL!")));
                                    hr = E_FAIL;
                                }
                            }
                            else
                            {
                                WIA_TRACE((TEXT("This was a root item")));
                                hr = S_OK;
                            }
                        }
                        else
                        {
                            WIA_TRACE((TEXT("nSuppressPropertyPages (%08X) contained WIA_PROPPAGE_SCANNER_ITEM_GENERAL (%08X)"), nSuppressPropertyPages, WIA_PROPPAGE_SCANNER_ITEM_GENERAL ));
                            hr = S_OK;
                        }
                    }

                    CComPtr<IWiaAnnotationHelpers> pWiaAnnotationHelpers;
                    if (SUCCEEDED(CoCreateInstance( CLSID_WiaDefaultUi, NULL,CLSCTX_INPROC_SERVER, IID_IWiaAnnotationHelpers,(void**)&pWiaAnnotationHelpers )))
                    {
                        CAnnotationType AnnotationType = AnnotationNone;
                        if (SUCCEEDED(pWiaAnnotationHelpers->GetAnnotationType( m_pItem, AnnotationType )))
                        {
                            if (AnnotationNone != AnnotationType)
                            {
                                //
                                // Add the attachments page
                                //
                                if ((lItemType & WiaItemTypeRoot) == 0)
                                {
                                    //
                                    // Get the title
                                    //
                                    TCHAR szTitle[MAX_PATH];
                                    LoadString( g_hInstance, IDD_ATTACHMENTSPROP_TITLE, szTitle, MAX_PATH );

                                    //
                                    // Prepare the attachments property page
                                    //
                                    PROPSHEETPAGE psp[1] = {0};
                                    psp[0].dwSize = sizeof(psp[0]);
                                    psp[0].dwFlags = PSP_USECALLBACK | PSP_USETITLE;
                                    psp[0].hInstance = g_hInstance;
                                    psp[0].pszTemplate = MAKEINTRESOURCE(IDD_ATTACHMENTS);
                                    psp[0].pfnDlgProc = CAttachmentCommonPropertyPage::DialogProc;
                                    psp[0].lParam = reinterpret_cast<LPARAM>(Item());
                                    psp[0].pszTitle = szTitle;
                                    psp[0].pfnCallback = PropPageCallback;
                                    WiaUiUtil::PreparePropertyPageForFusion(&psp[0]);

                                    //
                                    // Create the property page
                                    //
                                    HPROPSHEETPAGE hPropSheetPage = CreatePropertySheetPage(psp+0);
                                    if (hPropSheetPage)
                                    {
                                        //
                                        // Add the property page
                                        //
                                        if (!lpfnAddPropSheetPage( hPropSheetPage, lParam ))
                                        {
                                            DestroyPropertySheetPage(hPropSheetPage);
                                            hr = E_FAIL;
                                        }
                                    }
                                    else
                                    {
                                        WIA_ERROR((TEXT("CreatePropertySheetPage returned NULL!")));
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_TRACE((TEXT("This is a root item")));
                                }
                            }
                            else
                            {
                                WIA_TRACE((TEXT("pWiaAnnotationHelpers->GetAnnotationType returned AnnotationNone")));
                            }
                        }
                        else
                        {
                            WIA_TRACE((TEXT("pWiaAnnotationHelpers->GetAnnotationType failed")));
                        }
                    }
                    else
                    {
                        WIA_TRACE((TEXT("Couldn't create the annotation helpers")));
                    }
                }
                else
                {
                    WIA_TRACE((TEXT("GetProperty on WIA_DIP_DEV_TYPE failed")));
                    hr = E_FAIL;
                }
            }
            else
            {
                WIA_TRACE((TEXT("GetRootItem failed")));
            }
        }
        else
        {
            WIA_TRACE((TEXT("GetItemType failed")));
        }
    }
    else
    {
        WIA_TRACE((TEXT("m_pItem was NULL")));
    }
    if (FAILED(hr))
    {
        WIA_PRINTHRESULT((hr,TEXT("CWiaDefaultUI::AddPages failed")));
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\progdlg.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       PROGDLG.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/2/2000
 *
 *  DESCRIPTION: Generic WIA progress dialog
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "wiadefui.h"
#include "wiauiext.h"
#include "simrect.h"
#include "movewnd.h"
#include "dlgunits.h"


//
// Private window messages
//
#define PDM_SHOW           (WM_USER+1)
#define PDM_GETCANCELSTATE (WM_USER+2)
#define PDM_SETTITLE       (WM_USER+3)
#define PDM_SETMESSAGE     (WM_USER+4)
#define PDM_SETPERCENT     (WM_USER+5)
#define PDM_CLOSE          (WM_USER+6)


class CProgressDialog
{
public:
    struct CData
    {
        LONG lFlags;
        HWND hwndParent;
    };

private:
    HWND m_hWnd;
    bool m_bCancelled;

private:
    //
    // Not implemented
    //
    CProgressDialog( const CProgressDialog & );
    CProgressDialog(void);
    CProgressDialog &operator=( const CProgressDialog & );

private:
    //
    // Sole constructor
    //
    explicit CProgressDialog( HWND hWnd )
      : m_hWnd(hWnd),
        m_bCancelled(false)
    {
    }

    ~CProgressDialog(void)
    {
        m_hWnd = NULL;
    }

    LRESULT OnInitDialog( WPARAM, LPARAM lParam )
    {
        //
        // Prevent the animation control from starting up a new thread to play the AVI by setting the ACS_TIMER style
        //
        SetWindowLong( GetDlgItem( m_hWnd, IDC_PROGRESS_ANIMATION ), GWL_STYLE, ACS_TIMER | GetWindowLong( GetDlgItem( m_hWnd, IDC_PROGRESS_ANIMATION ), GWL_STYLE ) );
        
        //
        // Set up the progress control
        //
        SendDlgItemMessage( m_hWnd, IDC_PROGRESS_PERCENT, PBM_SETRANGE, 0, MAKELPARAM(0,100) );

        //
        // Get the data for this dialog
        //
        CData *pData = reinterpret_cast<CData*>(lParam);
        if (pData)
        {
            //
            // The number of pixels to shrink the progress dialog if we hide any controls
            //
            int nDeltaY = 0;

            //
            // Calculate the dialog units settings for this dialog
            //
            CDialogUnits DialogUnits(m_hWnd);

            //
            // Hide the progress control if requested
            //
            if (WIA_PROGRESSDLG_NO_PROGRESS & pData->lFlags)
            {
                EnableWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_PERCENT ), FALSE );
                ShowWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_PERCENT ), SW_HIDE );
                CSimpleRect rcPercentWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_PERCENT ), CSimpleRect::WindowRect );
                CMoveWindow mw;
                mw.Move( GetDlgItem( m_hWnd, IDCANCEL ),
                         0,
                         CSimpleRect(GetDlgItem( m_hWnd, IDCANCEL ), CSimpleRect::WindowRect ).ScreenToClient(m_hWnd).top - rcPercentWindow.Height() - DialogUnits.Y(3),
                         CMoveWindow::NO_MOVEX );
                nDeltaY += rcPercentWindow.Height() + DialogUnits.Y(3);
            }

            //
            // If we are to hide the cancel button, hide it and disable closing the dialog from the system menu
            //
            if (WIA_PROGRESSDLG_NO_CANCEL & pData->lFlags)
            {
                EnableWindow( GetDlgItem( m_hWnd, IDCANCEL ), FALSE );
                ShowWindow( GetDlgItem( m_hWnd, IDCANCEL ), SW_HIDE );
                HMENU hSystemMenu = GetSystemMenu(m_hWnd,FALSE);
                if (hSystemMenu)
                {
                    EnableMenuItem( hSystemMenu, SC_CLOSE, MF_GRAYED|MF_BYCOMMAND );
                }
                nDeltaY += CSimpleRect( GetDlgItem( m_hWnd, IDCANCEL ), CSimpleRect::WindowRect ).Height() + DialogUnits.Y(7);
            }

            //
            // Assume we'll be hiding the animation
            //
            bool bHideAviControl = true;

            if ((WIA_PROGRESSDLG_NO_ANIM & pData->lFlags) == 0)
            {
                //
                // Set up the relationship between animation flags and resource IDs
                //
                static const struct
                {
                    LONG nFlag;
                    int nResourceId;
                }
                s_AnimationResources[] =
                {
                    { WIA_PROGRESSDLG_ANIM_SCANNER_COMMUNICATE, IDA_PROGDLG_SCANNER_COMMUNICATE },
                    { WIA_PROGRESSDLG_ANIM_CAMERA_COMMUNICATE,  IDA_PROGDLG_CAMERA_COMMUNICATE },
                    { WIA_PROGRESSDLG_ANIM_VIDEO_COMMUNICATE,   IDA_PROGDLG_VIDEO_COMMUNICATE },
                    { WIA_PROGRESSDLG_ANIM_SCANNER_ACQUIRE,     IDA_PROGDLG_SCANNER_ACQUIRE },
                    { WIA_PROGRESSDLG_ANIM_CAMERA_ACQUIRE,      IDA_PROGDLG_CAMERA_ACQUIRE },
                    { WIA_PROGRESSDLG_ANIM_VIDEO_ACQUIRE,       IDA_PROGDLG_VIDEO_ACQUIRE },
                    { WIA_PROGRESSDLG_ANIM_DEFAULT_COMMUNICATE, IDA_PROGDLG_DEFAULT_COMMUNICATE },
                };

                //
                // Assume we won't find an animation
                //
                int nAnimationResourceId = 0;

                //
                // Find the first animation for which we have a match
                //
                for (int i=0;i<ARRAYSIZE(s_AnimationResources);i++)
                {
                    if (s_AnimationResources[i].nFlag & pData->lFlags)
                    {
                        nAnimationResourceId = s_AnimationResources[i].nResourceId;
                        break;
                    }
                }

                //
                // If we found an animation flag and we are able to open the animation, play it and don't hide the control
                //
                if (nAnimationResourceId && Animate_OpenEx( GetDlgItem(m_hWnd,IDC_PROGRESS_ANIMATION), g_hInstance, MAKEINTRESOURCE(nAnimationResourceId)))
                {
                    bHideAviControl = false;
                    Animate_Play( GetDlgItem(m_hWnd,IDC_PROGRESS_ANIMATION), 0, -1, -1 );
                }
            }

            //
            // If we need to hide the animation control, do so, and move all of the other controls up
            //
            if (bHideAviControl)
            {
                EnableWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_ANIMATION ), FALSE );
                ShowWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_ANIMATION ), SW_HIDE );
                CSimpleRect rcAnimWindow( GetDlgItem( m_hWnd, IDC_PROGRESS_ANIMATION ), CSimpleRect::WindowRect );
                CMoveWindow mw;
                mw.Move( GetDlgItem( m_hWnd, IDC_PROGRESS_MESSAGE ),
                         0,
                         CSimpleRect(GetDlgItem( m_hWnd, IDC_PROGRESS_MESSAGE ), CSimpleRect::WindowRect ).ScreenToClient(m_hWnd).top - rcAnimWindow.Height() - DialogUnits.Y(7),
                         CMoveWindow::NO_MOVEX );
                mw.Move( GetDlgItem( m_hWnd, IDC_PROGRESS_PERCENT ),
                         0,
                         CSimpleRect(GetDlgItem( m_hWnd, IDC_PROGRESS_PERCENT ), CSimpleRect::WindowRect ).ScreenToClient(m_hWnd).top - rcAnimWindow.Height() - DialogUnits.Y(7),
                         CMoveWindow::NO_MOVEX );
                mw.Move( GetDlgItem( m_hWnd, IDCANCEL ),
                         0,
                         CSimpleRect(GetDlgItem( m_hWnd, IDCANCEL ), CSimpleRect::WindowRect ).ScreenToClient(m_hWnd).top - rcAnimWindow.Height() - DialogUnits.Y(7),
                         CMoveWindow::NO_MOVEX );
                nDeltaY += rcAnimWindow.Height() + DialogUnits.Y(7);
            }

            //
            // Resize the dialog in case we hid any controls
            //
            CMoveWindow().Size( m_hWnd, 0, CSimpleRect( m_hWnd, CSimpleRect::WindowRect ).Height() - nDeltaY, CMoveWindow::NO_SIZEX );

            //
            // Center the dialog on the parent
            //
            WiaUiUtil::CenterWindow( m_hWnd, pData->hwndParent );
        }
        return 0;
    }
    LRESULT OnDestroy( WPARAM, LPARAM )
    {
        //
        // Cause the thread to exit
        //
        PostQuitMessage(0);
        return 0;
    }

    void OnCancel( WPARAM, LPARAM )
    {
        if (!m_bCancelled)
        {
            m_bCancelled = true;
            //
            // Tell the user to wait.  It could take a while for the caller to check the cancelled flag.
            //
            CSimpleString( IDS_PROGRESS_WAIT, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDCANCEL ) );
        }
    }

    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_COMMAND_HANDLERS()
        {
            SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
        }
        SC_END_COMMAND_HANDLERS();
    }

    LRESULT OnShow( WPARAM wParam, LPARAM lParam )
    {
        ShowWindow( m_hWnd, wParam ? SW_SHOW : SW_HIDE );
        return 0;
    }

    LRESULT OnGetCancelState( WPARAM wParam, LPARAM lParam )
    {
        return (m_bCancelled != false);
    }

    LRESULT OnSetTitle( WPARAM wParam, LPARAM lParam )
    {
        CSimpleStringConvert::NaturalString(CSimpleStringWide(reinterpret_cast<LPCTSTR>(lParam))).SetWindowText(m_hWnd);
        return 0;
    }

    LRESULT OnSetMessage( WPARAM wParam, LPARAM lParam )
    {
        CSimpleStringConvert::NaturalString(CSimpleStringWide(reinterpret_cast<LPCTSTR>(lParam))).SetWindowText(GetDlgItem(m_hWnd,IDC_PROGRESS_MESSAGE));
        return 0;
    }

    LRESULT OnSetPercent( WPARAM wParam, LPARAM lParam )
    {
        SendDlgItemMessage( m_hWnd, IDC_PROGRESS_PERCENT, PBM_SETPOS, lParam, 0 );
        return 0;
    }

    LRESULT OnClose( WPARAM wParam, LPARAM lParam )
    {
        DestroyWindow(m_hWnd);
        return 0;
    }


public:
    static INT_PTR DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CProgressDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY, OnDestroy );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
            SC_HANDLE_DIALOG_MESSAGE( PDM_SHOW, OnShow );
            SC_HANDLE_DIALOG_MESSAGE( PDM_GETCANCELSTATE, OnGetCancelState );
            SC_HANDLE_DIALOG_MESSAGE( PDM_SETTITLE, OnSetTitle );
            SC_HANDLE_DIALOG_MESSAGE( PDM_SETMESSAGE, OnSetMessage );
            SC_HANDLE_DIALOG_MESSAGE( PDM_SETPERCENT, OnSetPercent );
            SC_HANDLE_DIALOG_MESSAGE( PDM_CLOSE, OnClose );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};


class CProgressDialogThread
{
private:
    HWND   m_hwndParent;
    LONG   m_lFlags;
    HANDLE m_hCreationEvent;
    HWND  *m_phwndDialog;

private:
    //
    // Not implemented
    //
    CProgressDialogThread(void);
    CProgressDialogThread( const CProgressDialogThread & );
    CProgressDialogThread &operator=( const CProgressDialogThread & );

private:

    //
    // Sole constructor
    //
    CProgressDialogThread( HWND hwndParent, LONG lFlags, HANDLE hCreationEvent, HWND *phwndDialog )
      : m_hwndParent(hwndParent),
        m_lFlags(lFlags),
        m_hCreationEvent(hCreationEvent),
        m_phwndDialog(phwndDialog)

    {
    }
    ~CProgressDialogThread(void)
    {
        m_hwndParent = NULL;
        m_hCreationEvent = NULL;
        m_phwndDialog = NULL;
    }

    void Run(void)
    {
        //
        // Make sure we have valid thread data
        //
        if (m_phwndDialog && m_hCreationEvent)
        {
            //
            // Prepare the dialog data
            //
            CProgressDialog::CData Data;
            Data.lFlags = m_lFlags;
            Data.hwndParent = m_hwndParent;

            //
            // Decide which dialog resource to use
            //
            int nDialogResId = IDD_PROGRESS_DIALOG;
            if (m_lFlags & WIA_PROGRESSDLG_NO_TITLE)
            {
                nDialogResId = IDD_PROGRESS_DIALOG_NO_TITLE;
            }

            //
            // Create the dialog
            //
            HWND hwndDialog = CreateDialogParam( g_hInstance, MAKEINTRESOURCE(nDialogResId), NULL, CProgressDialog::DialogProc, reinterpret_cast<LPARAM>(&Data) );

            //
            // Store the dialog's HWND in the HWND ptr and set the creation event, to give the calling thread a window handle
            //
            *m_phwndDialog = hwndDialog;
            SetEvent(m_hCreationEvent);

            //
            // Start up our message loop
            //
            if (hwndDialog)
            {
                MSG msg;
                while (GetMessage(&msg,NULL,0,0))
                {
                    if (!IsDialogMessage(hwndDialog,&msg))
                    {
                        TranslateMessage(&msg);
                        DispatchMessage(&msg);
                    }
                }

                //
                // If we have a parent, bring it to the foreground
                //
                if (m_hwndParent)
                {
                    SetForegroundWindow(m_hwndParent);
                }
            }
        }
    }
    static DWORD ThreadProc( PVOID pvParam )
    {
        CProgressDialogThread *pProgressDialogThread = reinterpret_cast<CProgressDialogThread*>(pvParam);
        if (pProgressDialogThread)
        {
            pProgressDialogThread->Run();
            delete pProgressDialogThread;
        }
        //
        // Just before we quit, decrement the module refcount
        //
        DllRelease();
        return 0;
    }



public:
    static HWND Create( HWND hWndParent, LONG lFlags )
    {
        //
        // Assume failure
        //
        HWND hwndResult = NULL;

        //
        // Create an event that will allow us to synchronize initialization of the HWND
        //
        HANDLE hEvent = CreateEvent( NULL, TRUE, FALSE, NULL );
        if (hEvent)
        {
            //
            // Create the progress dialog thread data
            //
            CProgressDialogThread *pProgressDialogThread = new CProgressDialogThread( hWndParent, lFlags, hEvent, &hwndResult );
            if (pProgressDialogThread)
            {
                //
                // Increment the global refcount, so this DLL can't be released until we decrement
                //
                DllAddRef();

                //
                // Create the thread, passing the thread class as the thread data
                //
                DWORD dwThreadId;
                HANDLE hThread = CreateThread( NULL, 0, ThreadProc, pProgressDialogThread, 0, &dwThreadId );
                if (hThread)
                {
                    //
                    // Wait until the dialog is created
                    //
                    WiaUiUtil::MsgWaitForSingleObject( hEvent, INFINITE );
                    if (hwndResult)
                    {
                        //
                        // Make the dialog active
                        //
                        SetForegroundWindow(hwndResult);
                    }
                    //
                    // Done with this handle
                    //
                    CloseHandle(hThread);
                }
                else
                {
                    //
                    // If we were unable to create the thread, decrement the module refcount
                    //
                    DllRelease();
                }
            }
            //
            // Done with this handle
            //
            CloseHandle(hEvent);
        }
        //
        // If hwndResult is non-NULL, we succeeded
        //
        return hwndResult;
    }
};

// *** IWiaProgressDialog methods ***
STDMETHODIMP CWiaDefaultUI::Create( HWND hwndParent, LONG lFlags )
{
    m_hWndProgress = CProgressDialogThread::Create(hwndParent,lFlags);
    return m_hWndProgress ? S_OK : E_FAIL;
}

STDMETHODIMP CWiaDefaultUI::Show(void)
{
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_SHOW,1,0);
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::Hide(void)
{
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_SHOW,0,0);
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::Cancelled( BOOL *pbCancelled )
{
    if (!pbCancelled)
    {
        return E_POINTER;
    }
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    *pbCancelled = (SendMessage(m_hWndProgress,PDM_GETCANCELSTATE,0,0) != 0);
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::SetTitle( LPCWSTR pszTitle )
{
    if (!pszTitle)
    {
        return E_POINTER;
    }
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_SETTITLE,0,reinterpret_cast<LPARAM>(pszTitle));
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::SetMessage( LPCWSTR pszMessage )
{
    if (!pszMessage)
    {
        return E_POINTER;
    }
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_SETMESSAGE,0,reinterpret_cast<LPARAM>(pszMessage));
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::SetPercentComplete( UINT nPercent )
{
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_SETPERCENT,0,nPercent);
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::Destroy(void)
{
    if (!m_hWndProgress)
    {
        return E_FAIL;
    }
    SendMessage(m_hWndProgress,PDM_CLOSE,0,0);
    m_hWndProgress = NULL;
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by wiadefui.rc
//
#define IDS_TRANSFER_IMAGE_ACQUIRING    1
#define IDS_TRANSFER_IMAGE_PERCENT      2
#define IDI_ANNOTATION_UNKNOWN          2
#define IDD_SCAPROP_TITLE               3
#define IDS_SCANPROP_BLACKANDWHITE      4
#define IDS_SCANPROP_GRAYSCALE          5
#define IDS_SCANPROP_COLOR              6
#define IDS_SCANPROP_UNABLETOWRITE      7
#define IDS_SCANPROP_ERROR_TITLE        8
#define IDS_SCANPROP_INVALIDEDITVALUE   9
#define IDS_SCANPROP_CONTRAST           10
#define IDS_SCANPROP_BRIGHTNESS         11
#define IDS_SCANPROP_RESOLUTION         12
#define IDS_PROGRESS_WAIT               13
#define IDD_ATTACHMENTSPROP_TITLE       14
#define IDS_ATTACHMENTS_COLTITLE_NAME   15
#define IDS_ATTACHMENTS_COLTITLE_TYPE   16
#define IDS_ATTACHMENTS_COLTITLE_SIZE   17
#define IDS_ATTACHMENTSDLG_UNKNOWNDESCRIPTION 18
#define IDS_ATTACHMENTSDLG_EMPTYDESCRIPTIONMASK 19
#define IDS_ATTACHMENTSDLG_UNKNOWNEXTENSION 20
#define IDB_SCANPROP_BITMAPTEXT         103
#define IDI_CAMERA                      104
#define IDI_SCANNER                     105
#define IDB_SCANPROP_BITMAPPHOTO        105
#define IDB_SCANPROP_BITMAPGRAYSCALE    106
#define IDI_GENERICDEVICE               107
#define IDD_NEW_SCANPROP                107
#define IDI_VIDEODEVICE                 108
#define IDD_PROGRESS_DIALOG             110
#define IDD_PROGRESS_DIALOG_NO_TITLE    111
#define IDI_ANNOTATION_AUDIO            111
#define IDD_ATTACHMENTS                 112
#define IDI_ATTACHMENTSDLG_DEFICON      112
#define IDD_TEXT                        113
#define IDC_SCANPROP_RESOLUTION_EDIT    1000
#define IDA_PROGDLG_CAMERA_COMMUNICATE  1000
#define IDC_SCANPROP_DATATYPE_LIST      1001
#define IDA_PROGDLG_SCANNER_COMMUNICATE 1001
#define IDC_SCANPROP_PREVIEW            1002
#define IDA_PROGDLG_VIDEO_COMMUNICATE   1002
#define IDC_SCANPROP_BRIGHTNESS_SLIDER  1003
#define IDA_PROGDLG_VIDEO_ACQUIRE       1003
#define IDC_SCANPROP_BRIGHTNESS_EDIT    1004
#define IDA_PROGDLG_SCANNER_ACQUIRE     1004
#define IDC_SCANPROP_CONTRAST_SLIDER    1005
#define IDA_PROGDLG_CAMERA_ACQUIRE      1005
#define IDC_SCANPROP_CONTRAST_EDIT      1006
#define IDA_PROGDLG_DEFAULT_COMMUNICATE 1006
#define IDC_SCANPROP_RESOLUTION_UPDOWN  1011
#define IDC_SCANPROP_DATATYPE_PROMPT    1020
#define IDC_SCANPROP_BRIGHTNESS_PROMPT  1021
#define IDC_SCANPROP_CONTRAST_PROMPT    1022
#define IDC_SCANPROP_RESOLUTION_PROMPT  1024
#define IDC_SCANPROP_RESTOREDEFAULT     1025
#define IDC_PROGRESS_PERCENT            1027
#define IDC_PROGRESS_ANIMATION          1028
#define IDC_PROGRESS_MESSAGE            1029
#define IDC_ATTACHMENTSDLG_ATTACHMENTLIST 1031
#define IDC_ATTACHMENTSDLG_PLAY         1032
#define IDC_TEXT_TEXT                   1033

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        112
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1035
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\sources.inc ===
!IF 0

Copyright (c) 1989-1991 Microsoft Corporation

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.

NOTE:   Commented description of this file is in \nt\public\oak\bin\sources.tpl

!ENDIF

!include $(PROJECT_ROOT)\ui\uienv.inc
SOURCES_USED  = $(SOURCES_USED) $(PROJECT_ROOT)\ui\uienv.inc

!IF "$(DONT_USE_GDIPLUS)"=="1"
C_DEFINES=$(C_DEFINES) -DDONT_USE_GDIPLUS
!ENDIF

TARGETNAME    = wiadefui
TARGETTYPE    = DYNLINK
TARGETPATH    = obj
TARGETPATHLIB = $(PROJECT_ROOT)\lib\$(PLATFORM_SUFFIX)
TARGETEXT     = dll
DLLDEF        = $O\wiadefui.def
DLLENTRY      = _DllMainCRTStartup

ATL_VER         = 30
USE_STATIC_ATL  = 1

TARGETLIBS=$(TARGETLIBS)\
        $(SHELL_LIB_PATH)\shfusion.lib                           \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\wiashext.lib \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\scanlib.lib  \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\prevwnd.lib  \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\selectd.lib  \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\scanlib.lib  \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\camdlg.lib   \
        $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)\*\viddlg.lib


INCLUDES=$(INCLUDES); \
        $(PROJECT_ROOT)\ui\select;  \
        $(PROJECT_ROOT)\ui\scanlib; \
        $(PROJECT_ROOT)\ui\camdlg;  \
        $(PROJECT_ROOT)\ui\wiavidd;


SOURCES=\
..\wiadefui.rc   \
..\wiadefui.cpp  \
..\tranhlp.cpp   \
..\suppfmt.cpp   \
..\proppage.cpp  \
..\contrast.cpp  \
..\ppattach.cpp  \
..\ppscan.cpp    \
..\getimage.cpp  \
..\wiauiext.cpp  \
..\paprsize.cpp  \
..\apdropt.cpp  \
..\progdlg.cpp

PRECOMPILED_CXX=1
PRECOMPILED_INCLUDE=..\precomp.h
PRECOMPILED_PCH=precomp.pch
PRECOMPILED_OBJ=precomp.obj


#
#
# Fusion manifest
#
SXS_MANIFEST_RESOURCE_ID=123
SXS_APPLICATION_MANIFEST=wiadefui.Manifest
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\textdlg.h ===
#ifndef __TEXTDLG_H_INCLUDED
#define __TEXTDLG_H_INCLUDED

#include <windows.h>
#include <simstr.h>

class CTextDialog
{
public:
    class CData
    {
    private:
        CSimpleString m_strText;
        bool          m_bReadOnly;

    private:
        CData( const CData & );
        CData &operator=( const CData & );

    public:
        CData( LPCTSTR pszText=NULL, bool bReadOnly=true )
          : m_strText(pszText),
            m_bReadOnly(bReadOnly)
        {
        }
        ~CData(void)
        {
        }
        void ReadOnly( bool bReadOnly )
        {
            m_bReadOnly = bReadOnly;
        }
        bool ReadOnly(void) const
        {
            return m_bReadOnly;
        }
        void Text( LPCTSTR pszText )
        {
            m_strText = pszText;
        }
        CSimpleString Text(void)
        {
            return m_strText;
        }
        const CSimpleString &Text(void) const
        {
            return m_strText;
        }
    };

private:
    HWND m_hWnd;
    CData *m_pData;

private:
    CTextDialog(void);
    CTextDialog( const CTextDialog & );
    CTextDialog &operator=( const CTextDialog & );

private:
    CTextDialog( HWND hWnd )
      : m_hWnd(hWnd),
        m_pData(NULL)
    {
    }
    ~CTextDialog(void)
    {
    }
    void OnOK( WPARAM, LPARAM )
    {
        EndDialog( m_hWnd, IDOK );
    }
    void OnCancel( WPARAM, LPARAM )
    {
        EndDialog( m_hWnd, IDCANCEL );
    }
    LRESULT OnInitDialog( WPARAM wParam, LPARAM lParam )
    {
        m_pData = reinterpret_cast<CData*>(lParam);
        if (m_pData)
        {
            SetDlgItemText( m_hWnd, IDC_TEXT_TEXT, m_pData->Text() );
            if (m_pData->ReadOnly())
            {
                SendDlgItemMessage( m_hWnd, IDC_TEXT_TEXT, EM_SETREADONLY, TRUE, 0 );
            }
        }
        return 0;
    }
    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
       SC_BEGIN_COMMAND_HANDLERS()
       {
           SC_HANDLE_COMMAND(IDOK,OnOK);
           SC_HANDLE_COMMAND(IDCANCEL,OnCancel);
       }
       SC_END_COMMAND_HANDLERS();
    }

public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CTextDialog)
        {
            SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
            SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
        }
        SC_END_DIALOG_MESSAGE_HANDLERS();
    }
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\suppfmt.cpp ===
#include "precomp.h"
#pragma hdrstop
#include <wiadebug.h>
#include <wiaffmt.h>
#include "wiadefui.h"
#include "wiauiext.h"

extern HINSTANCE g_hInstance;

STDMETHODIMP CWiaDefaultUI::Initialize( IWiaItem *pWiaItem, LONG nMediaType )
{
    WIA_PUSH_FUNCTION((TEXT("CWiaDefaultUI::Initialize")));
    m_WiaFormatPairs.Destroy();
    m_nDefaultFormat = 0;
    HRESULT hr = S_OK;
    if (!pWiaItem)
        return(E_POINTER);
    GUID guidDefaultClipFormat = GUID_NULL;

    //
    // Don't worry about failure, we will come up with our own default if the driver doesn't report on
    //
    PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_PREFERRED_FORMAT, guidDefaultClipFormat );
    WIA_PRINTGUID((guidDefaultClipFormat,TEXT("guidDefaultClipFormat")));
    if (guidDefaultClipFormat == GUID_NULL)
    {
        if (TYMED_FILE == nMediaType || TYMED_MULTIPAGE_FILE == nMediaType)
        {
            guidDefaultClipFormat = WiaImgFmt_BMP;
        }
        else
        {
            guidDefaultClipFormat = WiaImgFmt_MEMORYBMP;
        }
    }

    //
    // if the transfer mechanism is known to be incompatible
    // with the current tymed, change it
    //
    if (guidDefaultClipFormat == WiaImgFmt_BMP && nMediaType == TYMED_CALLBACK)
    {
        guidDefaultClipFormat = WiaImgFmt_MEMORYBMP;
    }                       
    else if ((guidDefaultClipFormat == WiaImgFmt_MEMORYBMP) && ((nMediaType == TYMED_FILE)  || (TYMED_MULTIPAGE_FILE == nMediaType)))
    {
        guidDefaultClipFormat = WiaImgFmt_BMP;
    }

    //
    // Get the data transfer interface
    //
    CComPtr<IWiaDataTransfer> pWiaDataTransfer;
    hr = pWiaItem->QueryInterface( IID_IWiaDataTransfer, (void**)&pWiaDataTransfer );
    if (SUCCEEDED(hr))
    {
        //
        // Get the format info enumerator
        //
        CComPtr<IEnumWIA_FORMAT_INFO> pEnumWIA_FORMAT_INFO;
        hr = pWiaDataTransfer->idtEnumWIA_FORMAT_INFO(&pEnumWIA_FORMAT_INFO);
        if (SUCCEEDED(hr))
        {
            //
            // Enumerate the formats
            //
            ULONG ulFetched = 0;
            WIA_FORMAT_INFO WiaFormatInfo;
            while (pEnumWIA_FORMAT_INFO->Next(1,&WiaFormatInfo,&ulFetched) == S_OK)
            {
                //
                // If this is the media type we are interested in...
                //
                if (static_cast<LONG>(WiaFormatInfo.lTymed) == nMediaType)
                {
                    //
                    // The friendly description for this file type
                    //
                    CSimpleString strDescription;
                    
                    //
                    // Get the file extension for this type
                    //
                    CSimpleString strExtension = CWiaFileFormat::GetExtension( WiaFormatInfo.guidFormatID, nMediaType, pWiaItem );
                    if (strExtension.Length())
                    {
                        //
                        // Save the extension
                        //
                        CSimpleString strExtensionPlusDot = TEXT(".");
                        strExtensionPlusDot += strExtension;
                        if (strExtensionPlusDot.Length())
                        {
                            //
                            // Get the description
                            //
                            SHFILEINFO SHFileInfo;
                            if (SHGetFileInfo(strExtensionPlusDot.String(), FILE_ATTRIBUTE_NORMAL, &SHFileInfo, sizeof(SHFILEINFO), SHGFI_USEFILEATTRIBUTES|SHGFI_TYPENAME ))
                            {
                                strDescription = SHFileInfo.szTypeName;
                            }
                        }
                    }
                    
                    //
                    // SUCCESS!  Save the extension and description
                    //
                    int nIndex = m_WiaFormatPairs.Append( CWiaFormatPair( static_cast<GUID>(WiaFormatInfo.guidFormatID), strExtension, CSimpleStringConvert::WideString(strDescription) ) );

                    //
                    // Save the default format index, if this is the default format
                    //
                    if (guidDefaultClipFormat == WiaFormatInfo.guidFormatID)
                    {
                        m_nDefaultFormat = nIndex;
                    }
                }
            }
        }
    }
    return(hr);
}

STDMETHODIMP CWiaDefaultUI::GetFormatCount( LONG *pnCount )
{
    HRESULT hr = S_OK;
    if (!pnCount)
        return(E_POINTER);
    *pnCount = m_WiaFormatPairs.Size();
    return(hr);
}


STDMETHODIMP CWiaDefaultUI::GetFormatType( LONG nFormat, GUID *pcfClipFormat )
{
    WIA_PUSH_FUNCTION((TEXT("CWiaDefaultUI::GetFormatType")));
    WIA_PRINTGUID((*pcfClipFormat,TEXT("nFormat: %d, pcfClipFormat:"),nFormat));
    WIA_TRACE((TEXT("m_WiaFormatPairs.Size(): %d"),m_WiaFormatPairs.Size()));
    HRESULT hr = S_OK;
    // Out of range
    if (nFormat >= m_WiaFormatPairs.Size() || nFormat < 0)
        return(E_FAIL);
    *pcfClipFormat = m_WiaFormatPairs[nFormat].Type();
    return(hr);
}

STDMETHODIMP CWiaDefaultUI::GetFormatExtension( LONG nFormat, LPWSTR pszExtension, int nMaxLen )
{
    HRESULT hr = S_OK;
    // Out of range
    if (nFormat >= m_WiaFormatPairs.Size() || nFormat < 0)
        return(E_FAIL);
    CSimpleStringWide str = m_WiaFormatPairs[nFormat].Extension();
    if (static_cast<int>(str.Length()) >= nMaxLen)
        return(E_FAIL);
    lstrcpyW( pszExtension, str.String() );
    return(hr);
}


STDMETHODIMP CWiaDefaultUI::GetFormatDescription( LONG nFormat, LPWSTR pszDescription, int nMaxLen )
{
    HRESULT hr = S_OK;
    // Out of range
    if (nFormat >= m_WiaFormatPairs.Size() || nFormat < 0)
        return(E_FAIL);
    CSimpleStringWide str = m_WiaFormatPairs[nFormat].Description();
    if (static_cast<int>(str.Length()) >= nMaxLen)
        return(E_FAIL);
    lstrcpyW( pszDescription, str.String() );
    return(hr);
}


STDMETHODIMP CWiaDefaultUI::GetDefaultClipboardFileFormat( GUID *pguidFormat )
{
    if (!pguidFormat)
        return E_POINTER;
    return GetFormatType(m_nDefaultFormat,pguidFormat);
}

STDMETHODIMP CWiaDefaultUI::GetDefaultClipboardFileFormatIndex( LONG *pnIndex )
{
    if (!pnIndex)
        return E_POINTER;
    if (m_nDefaultFormat >= m_WiaFormatPairs.Size() || m_nDefaultFormat < 0)
        return(E_FAIL);
    *pnIndex = m_nDefaultFormat;
    return S_OK;
}

STDMETHODIMP CWiaDefaultUI::GetClipboardFileExtension( GUID guidFormat, LPWSTR pszExt, DWORD nMaxLen )
{
    if (!pszExt)
    {
        return E_POINTER;
    }

    CSimpleString strExtension = CWiaFileFormat::GetExtension( guidFormat );
    if (strExtension.Length())
    {
        CSimpleStringWide strwExtension = CSimpleStringConvert::WideString(strExtension);
        if (strwExtension.Length() < nMaxLen)
        {
            lstrcpyW( pszExt, strwExtension.String() );
            return S_OK;
        }
    }
    return S_FALSE;
}


STDMETHODIMP CWiaDefaultUI::ChangeClipboardFileExtension( GUID guidFormat, LPWSTR pszFilename, DWORD nMaxLen )
{
    HRESULT hr = S_OK;
    if (!pszFilename || guidFormat==GUID_NULL)  // We don't accept a default type here
    {
        return E_INVALIDARG;
    }

    WCHAR szExtension[MAX_PATH]=L"";
    GetClipboardFileExtension( guidFormat, szExtension, ARRAYSIZE(szExtension) );
    if (!lstrlenW(szExtension))
    {
        return S_FALSE; // Not really an error, just an unknown file type.
    }

    CSimpleStringWide strName(pszFilename);
    // Make sure the string is valid
    if (strName.Length())
    {
        int nPeriodFind = strName.ReverseFind( L'.' );
        int nBSlashFind = strName.ReverseFind( L'\\' );
        if (nPeriodFind < 0)  // No extension found
        {
            strName += L'.';
            strName += szExtension;
        }
        else if (nPeriodFind > nBSlashFind) // Assume this is an extension, because it is following a back slash
        {
            strName = strName.Left(nPeriodFind);
            strName += L'.';
            strName += szExtension;
        }
        else // It must not be an extension
        {
            strName += L'.';
            strName += szExtension;
        }

        // Make sure this string can handle the addition of the extension
        if ((strName.Length()+1) <= nMaxLen)
        {
            lstrcpyW( pszFilename, strName.String() );
        }
        else
        {
            hr = E_INVALIDARG;
        }
    }
    return hr;
}


STDMETHODIMP CWiaDefaultUI::ConstructFileOpenDialogStyleString( BSTR *pbstrString )
{
    HRESULT hr = S_OK;
    int nLength = 0;

    // For each ext: "Foo Files (*.foo)|*.foo|"
    for (int i=0;i<m_WiaFormatPairs.Size();i++)
    {
        nLength += m_WiaFormatPairs[i].Description().Length() +
                   lstrlenW(L" (*.") +
                   m_WiaFormatPairs[i].Extension().Length() +
                   lstrlenW(L")|*.") +
                   m_WiaFormatPairs[i].Extension().Length() +
                   lstrlenW(L"|");
    }
    *pbstrString = SysAllocStringLen( NULL, nLength );
    if (*pbstrString)
    {
        CSimpleStringWide strTmp;
        for (i=0;i<m_WiaFormatPairs.Size();i++)
        {
            strTmp += m_WiaFormatPairs[i].Description() +
                      L" (*." +
                      m_WiaFormatPairs[i].Extension() +
                      L")|*." +
                      m_WiaFormatPairs[i].Extension() +
                      L"|";
            CopyMemory( *pbstrString, strTmp.String(), nLength * sizeof(WCHAR) );
        }
    }
    else hr = E_OUTOFMEMORY;
    return(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\slidedit.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SLIDEDIT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/10/2000
 *
 *  DESCRIPTION: Encapsulate the slider and edit and preview control interaction
 *
 *******************************************************************************/

#ifndef __SLIDEDIT_H_INCLUDED
#define __SLIDEDIT_H_INCLUDED

#include <windows.h>
#include "vwiaset.h"

class CSliderAndEdit
{
private:
    HWND               m_hWndSlider;
    HWND               m_hWndEdit;
    HWND               m_hWndPreview;
    UINT               m_nPreviewMessage;
    CValidWiaSettings *m_pValidWiaSettings;

public:
    CSliderAndEdit(void)
      : m_hWndSlider(NULL),
        m_hWndEdit(NULL),
        m_hWndPreview(NULL),
        m_nPreviewMessage(0),
        m_pValidWiaSettings(NULL)
    {
    }
    bool Initialize( HWND hWndSlider, HWND hWndEdit, HWND hWndPreview, UINT nPreviewMessage, CValidWiaSettings *pValidWiaSettings )
    {
        //
        // Save all of these settings
        //
        m_hWndSlider = hWndSlider;
        m_hWndEdit = hWndEdit;
        m_hWndPreview = hWndPreview;
        m_pValidWiaSettings = pValidWiaSettings;
        m_nPreviewMessage = nPreviewMessage;

        //
        // Make sure these are valid
        //
        if (m_hWndSlider && m_hWndEdit && m_pValidWiaSettings)
        {
            //
            // Set up the slider
            //
            SendMessage( m_hWndSlider, TBM_SETRANGE, TRUE, MAKELONG( 0, m_pValidWiaSettings->GetItemCount()-1 ) );

            //
            // Set the control's values
            //
            SetValue( m_pValidWiaSettings->InitialValue() );

            //
            // Everything is OK
            //
            return true;
        }
        return false;
    }
    void SetValue( LONG nValue )
    {
        if (IsValid())
        {
            //
            // Get the index of the intial value and set the position of the slider
            //
            int nIndex = m_pValidWiaSettings->FindIndexOfItem( nValue );
            if (nIndex >= 0)
            {
                SendMessage( m_hWndSlider, TBM_SETPOS, TRUE, nIndex );
            }

            //
            // Set up the preview control
            //
            if (m_hWndPreview && m_nPreviewMessage)
            {
                SendMessage( m_hWndPreview, m_nPreviewMessage, 0, ConvertToPreviewRange(nValue) );
            }

            //
            // Set up the edit control
            //
            SetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), nValue, TRUE );
        }
    }
    void Restore(void)
    {
        if (IsValid())
        {
            SetValue( m_pValidWiaSettings->InitialValue() );
        }
    }
    bool ValidateEditControl(void)
    {
        BOOL bSuccess = FALSE;
        if (IsValid())
        {
            //
            // Get the current value
            //
            LONG nValue = static_cast<LONG>(GetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), &bSuccess, TRUE ));
            if (bSuccess)
            {
                //
                // Assume it isn't a valid value
                //
                bSuccess = FALSE;

                //
                // Check to see if the edit control has a legal value in it
                //
                LONG nTestValue = nValue;
                if (m_pValidWiaSettings->FindClosestValue(nTestValue))
                {
                    if (nValue == nTestValue)
                    {
                        bSuccess = TRUE;
                    }
                }
            }
        }
        return (bSuccess != FALSE);
    }
    bool IsValid(void) const
    {
        return (m_hWndSlider && m_hWndEdit && m_pValidWiaSettings);
    }
    LONG ConvertToPreviewRange(LONG nValue) const
    {
        if (IsValid())
        {
            //
            // Convert the value to the range 0...100
            //
            nValue = ((nValue-m_pValidWiaSettings->Min()) * 100) / (m_pValidWiaSettings->Max() - m_pValidWiaSettings->Min());
        }
        return nValue;
    }
    void HandleSliderUpdate(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CSliderAndEdit::HandleSliderUpdate")));
        if (IsValid())
        {
            //
            // Find out what the current index is
            //
            int nIndex = static_cast<int>(SendMessage( m_hWndSlider, TBM_GETPOS, 0, 0 ));
            WIA_TRACE((TEXT("nIndex = %d"), nIndex ));


            //
            // Get the value at that index, if it is valid set the edit control's text
            //
            LONG nValue;
            if (m_pValidWiaSettings->GetItemAtIndex(nIndex,nValue))
            {
                WIA_TRACE((TEXT("nValue = %d"), nValue ));
                SetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), nValue, TRUE );
            }

            //
            // If the preview window is valid, send it a message
            //
            if (m_nPreviewMessage && m_hWndPreview)
            {
                SendMessage( m_hWndPreview, m_nPreviewMessage, 0, ConvertToPreviewRange(nValue) );
            }
        }
    }

    LONG GetValueFromCurrentPos(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CSliderAndEdit::GetValueFromCurrentPos")));
        if (IsValid())
        {
            //
            // Find out what the current index is
            //
            int nIndex = static_cast<int>(SendMessage( m_hWndSlider, TBM_GETPOS, 0, 0 ));
            WIA_TRACE((TEXT("nIndex = %d"), nIndex ));


            //
            // Get the value at that index, if it is valid return it
            //
            LONG nValue;
            if (m_pValidWiaSettings->GetItemAtIndex(nIndex,nValue))
            {
                return nValue;
            }

            return m_pValidWiaSettings->Min();
        }
        return 0;
    }

    void HandleEditUpdate(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CSliderAndEdit::HandleSliderUpdate")));
        if (IsValid())
        {
            //
            // Get the current value
            //
            BOOL bSuccess = FALSE;
            LONG nValue = static_cast<LONG>(GetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), &bSuccess, TRUE ));
            if (bSuccess)
            {
                //
                // Round it and send it to the slider control
                //
                if (m_pValidWiaSettings->FindClosestValue(nValue))
                {
                    int nIndex = m_pValidWiaSettings->FindIndexOfItem( nValue );
                    if (nIndex >= 0)
                    {
                        SendMessage( m_hWndSlider, TBM_SETPOS, TRUE, nIndex );
                    }

                    //
                    // If the preview window is valid, send it a message
                    //
                    if (m_nPreviewMessage && m_hWndPreview)
                    {
                        SendMessage( m_hWndPreview, m_nPreviewMessage, 0, ConvertToPreviewRange(nValue) );
                    }
                }
            }
        }
    }
};

#endif //__SLIDEDIT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\tranhlp.cpp ===
#include "precomp.h"
#pragma hdrstop
#include <simstr.h>
#include <wiadebug.h>
#include "wiadefui.h"
#include "uicommon.h"
#include "wiauiext.h"
#include "resource.h"

extern HINSTANCE g_hInstance;

STDMETHODIMP CWiaDefaultUI::BandedDataCallback(
    LONG                            lReason,
    LONG                            lStatus,
    LONG                            lPercentComplete,
    LONG                            lOffset,
    LONG                            lLength,
    LONG                            lReserved,
    LONG                            lResLength,
    PBYTE                           pbBuffer)
{
    WIA_PUSH_FUNCTION((TEXT("CWiaDefaultUI::BandedDataCallback(%08X,%08X,%08X,%08X,%08X,%08X,%08X,%08X)"),lReason,lStatus,lPercentComplete,lOffset,lLength,lReserved,lResLength,pbBuffer));
    HRESULT hr = S_OK;
    if (m_pSecondaryCallback)
        hr = m_pSecondaryCallback->BandedDataCallback(lReason,lStatus,lPercentComplete,lOffset,lLength,lReserved,lResLength,pbBuffer);
    WIA_PRINTHRESULT((hr,TEXT("m_pSecondaryCallback->BandedDataCallback returned")));
    if (SUCCEEDED(hr) && hr != S_FALSE && lReason == IT_MSG_STATUS)
    {
        if (m_pWiaProgressDialog)
        {
            m_pWiaProgressDialog->SetPercentComplete(lPercentComplete);
            BOOL bCancelled = FALSE;
            if (SUCCEEDED(m_pWiaProgressDialog->Cancelled(&bCancelled)) && bCancelled)
            {
                hr = S_FALSE;
            }
        }
    }
    else if (SUCCEEDED(hr) && hr != S_FALSE && lReason == IT_MSG_DATA)
    {
        if (m_pWiaProgressDialog)
        {
            m_pWiaProgressDialog->SetPercentComplete(lPercentComplete);
            BOOL bCancelled = FALSE;
            if (SUCCEEDED(m_pWiaProgressDialog->Cancelled(&bCancelled)) && bCancelled)
            {
                hr = S_FALSE;
            }
        }
    }
    WIA_PRINTHRESULT((hr,TEXT("CWiaDefaultUI::BandedDataCallback is returning")));
    return(hr);
}

STDMETHODIMP CWiaDefaultUI::TransferItemBanded( IWiaItem *pWiaItem, HWND hwndParent, DWORD dwFlags, GUID guidFormat, ULONG ulBufferSize, IWiaDataCallback *pSecondaryCallback )
{
    if (!pWiaItem)
    {
        return E_INVALIDARG;
    }
    // Create status window, if requested
    m_pSecondaryCallback = pSecondaryCallback;
    HRESULT hr;
    if (0 == (dwFlags&WIA_TRANSFERHELPER_NOPROGRESS))
    {
        hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaProgressDialog, (void**)&m_pWiaProgressDialog );
        if (SUCCEEDED(hr))
        {
            m_pWiaProgressDialog->Create( hwndParent, WIA_PROGRESSDLG_NO_ANIM );
            m_pWiaProgressDialog->SetTitle(CSimpleStringConvert::WideString(CSimpleString(IDS_TRANSFER_IMAGE_ACQUIRING,g_hInstance)));
            m_pWiaProgressDialog->SetMessage(CSimpleStringConvert::WideString(CSimpleString(IDS_TRANSFER_IMAGE_PERCENT,g_hInstance)));
            m_pWiaProgressDialog->Show();
        }
    }
    if (m_pWiaProgressDialog || (dwFlags&WIA_TRANSFERHELPER_NOPROGRESS))
    {
        CComPtr<IWiaDataCallback> pWiaDataCallback;
        hr = this->QueryInterface(IID_IWiaDataCallback, (void **)&pWiaDataCallback);
        if (SUCCEEDED(hr))
        {
            CComPtr<IWiaPropertyStorage> pWiaPropertyStorage;
            hr = pWiaItem->QueryInterface(IID_IWiaPropertyStorage, (void **)&pWiaPropertyStorage);
            if (SUCCEEDED(hr))
            {
                if (guidFormat == GUID_NULL)
                {
                    CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
                    hr = this->QueryInterface(IID_IWiaSupportedFormats, (void **)&pWiaSupportedFormats);
                    if (SUCCEEDED(hr))
                    {
                        hr = pWiaSupportedFormats->Initialize( pWiaItem, TYMED_CALLBACK );
                        if (SUCCEEDED(hr))
                        {
                            hr = GetDefaultClipboardFileFormat( &guidFormat );
                        }
                    }
                }

                if (guidFormat == GUID_NULL)
                    guidFormat = WiaImgFmt_MEMORYBMP;

                PROPSPEC PropSpec[2] = {0};
                PROPVARIANT PropVariant[2] = {0};

                PropSpec[0].ulKind = PRSPEC_PROPID;
                PropSpec[0].propid = WIA_IPA_FORMAT;
                PropSpec[1].ulKind = PRSPEC_PROPID;
                PropSpec[1].propid = WIA_IPA_TYMED;

                PropVariant[0].vt = VT_CLSID;
                PropVariant[0].puuid = &guidFormat;
                PropVariant[1].vt = VT_I4;
                PropVariant[1].lVal = TYMED_CALLBACK;

                hr = pWiaPropertyStorage->WriteMultiple( ARRAYSIZE(PropVariant), PropSpec, PropVariant, WIA_IPA_FIRST );
                if (SUCCEEDED(hr))
                {

                    CComPtr<IWiaDataTransfer> pIWiaDataTransfer;
                    hr = pWiaItem->QueryInterface(IID_IWiaDataTransfer, (void **)&pIWiaDataTransfer);
                    if (SUCCEEDED(hr))
                    {
                        if (!ulBufferSize)
                        {
                            LONG lMinimumBufferSize;
                            if (!PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_MIN_BUFFER_SIZE, lMinimumBufferSize ))
                            {
                                lMinimumBufferSize = 0x0000FFFF;  // 64K
                            }
                            ulBufferSize = static_cast<ULONG>(lMinimumBufferSize);
                        }
                        WIA_DATA_TRANSFER_INFO WiaDataTransferInfo = {0};
                        WiaDataTransferInfo.ulSize = sizeof(WIA_DATA_TRANSFER_INFO);
                        WiaDataTransferInfo.ulBufferSize = ulBufferSize;
                        hr = pIWiaDataTransfer->idtGetBandedData(&WiaDataTransferInfo, pWiaDataCallback);
                        WIA_PRINTHRESULT((hr,TEXT("pIWiaDataTransfer->idtGetBandedData returned")));
                    }
                    else
                    {
                        WIA_PRINTHRESULT((hr,TEXT("TransferItemBanded, QI on IID_IWiaDataTransfer")));
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("TransferItemBanded, pIWiaPropertyStorage->WriteMultiple failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("TransferItemBanded, QI of IID_IWiaPropertyStorage failed.")));
            }
        }
        if (m_pWiaProgressDialog)
        {
            m_pWiaProgressDialog->Destroy();
            m_pWiaProgressDialog = NULL;
        }
    }
    else
    {
        WIA_ERROR((TEXT("TransferItemBanded, unable to create status window")));
        hr = HRESULT_FROM_WIN32(GetLastError());
    }
    return hr;
}

STDMETHODIMP CWiaDefaultUI::TransferItemFile( IWiaItem *pWiaItem, HWND hwndParent, DWORD dwFlags, GUID guidFormat, LPCWSTR pszFilename, IWiaDataCallback *pSecondaryCallback, LONG nMediaType )
{
    WIA_PUSH_FUNCTION((TEXT("CWiaDefaultUI::TransferItemFile( %08X )"), pWiaItem ));
    if (!pszFilename || !lstrlenW(pszFilename) || !pWiaItem)
    {
        return E_INVALIDARG;
    }
    //
    // Create status window, if requested
    //
    m_pSecondaryCallback = pSecondaryCallback;
    HRESULT hr;
    if (0 == (dwFlags&WIA_TRANSFERHELPER_NOPROGRESS))
    {
        hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaProgressDialog, (void**)&m_pWiaProgressDialog );
        if (SUCCEEDED(hr))
        {
            m_pWiaProgressDialog->Create( hwndParent, WIA_PROGRESSDLG_NO_ANIM );
            m_pWiaProgressDialog->SetTitle(CSimpleStringConvert::WideString(CSimpleString(IDS_TRANSFER_IMAGE_ACQUIRING,g_hInstance)));
            m_pWiaProgressDialog->SetMessage(CSimpleStringConvert::WideString(CSimpleString(IDS_TRANSFER_IMAGE_PERCENT,g_hInstance)));
            m_pWiaProgressDialog->Show();
        }
    }
    if (m_pWiaProgressDialog || (dwFlags&WIA_TRANSFERHELPER_NOPROGRESS))
    {
        CComPtr<IWiaDataCallback> pWiaDataCallback;
        hr = this->QueryInterface(IID_IWiaDataCallback, (void **)&pWiaDataCallback);
        if (SUCCEEDED(hr))
        {
            CComPtr<IWiaPropertyStorage> pWiaPropertyStorage;
            hr = pWiaItem->QueryInterface(IID_IWiaPropertyStorage, (void **)&pWiaPropertyStorage);
            if (SUCCEEDED(hr))
            {
                if (guidFormat == GUID_NULL)
                {
                    CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
                    hr = this->QueryInterface(IID_IWiaSupportedFormats, (void **)&pWiaSupportedFormats);
                    if (SUCCEEDED(hr))
                    {
                        hr = pWiaSupportedFormats->Initialize( pWiaItem, nMediaType );
                        if (SUCCEEDED(hr))
                        {
                            hr = GetDefaultClipboardFileFormat( &guidFormat );
                        }
                    }
                }

                if (guidFormat == GUID_NULL)
                    guidFormat = WiaImgFmt_BMP;

                PROPSPEC PropSpec[2] = {0};
                PROPVARIANT PropVariant[2] = {0};

                PropSpec[0].ulKind = PRSPEC_PROPID;
                PropSpec[0].propid = WIA_IPA_FORMAT;
                PropSpec[1].ulKind = PRSPEC_PROPID;
                PropSpec[1].propid = WIA_IPA_TYMED;

                PropVariant[0].vt = VT_CLSID;
                PropVariant[0].puuid = &guidFormat;
                PropVariant[1].vt = VT_I4;
                PropVariant[1].lVal = nMediaType;

                WIA_PRINTGUID((guidFormat,TEXT("TYMED: %d, guidFormat"), nMediaType ));
                hr = pWiaPropertyStorage->WriteMultiple( ARRAYSIZE(PropVariant), PropSpec, PropVariant, WIA_IPA_FIRST );
                if (SUCCEEDED(hr))
                {
                    CComPtr<IWiaDataTransfer> pIWiaDataTransfer;
                    hr = pWiaItem->QueryInterface(IID_IWiaDataTransfer, (void **)&pIWiaDataTransfer);
                    if (SUCCEEDED(hr))
                    {
                        STGMEDIUM stgMedium = {0};
                        hr = pIWiaDataTransfer->idtGetData(&stgMedium, pWiaDataCallback);
                        WIA_PRINTHRESULT((hr,TEXT("pIWiaDataTransfer->idtGetData returned")));

                        //
                        // If the transfer succeeded, or it failed with the possibility of having a file
                        // left over AND we want to preserve any leftover file.
                        //
                        if (SUCCEEDED(hr))
                        {
                            //
                            // Make sure we didn't cancel.
                            //
                            if (hr != S_FALSE)
                            {
                                //
                                // Get the file names
                                //
                                CSimpleString strName = CSimpleStringConvert::NaturalString(CSimpleStringWide(stgMedium.lpszFileName));
                                CSimpleString strTarget = CSimpleStringConvert::NaturalString(CSimpleStringWide(pszFilename));
                                if (strName.Length() && strTarget.Length())
                                {
                                    //
                                    // This function will first try to move, then copy+erase the src file to the tgt file
                                    //
                                    hr = WiaUiUtil::MoveOrCopyFile( strName.String(), strTarget.String() );
                                }
                                else
                                {
                                    hr = E_OUTOFMEMORY;
                                    WIA_ERROR((TEXT("TransferItemFile, unable to create source filename")));
                                }
                            }
                            else
                            {
                                WIA_ERROR((TEXT("TransferItemFile, user cancelled")));
                            }
                        }
                        else if ((WIA_ERROR_PAPER_JAM == hr || WIA_ERROR_PAPER_EMPTY == hr || WIA_ERROR_PAPER_PROBLEM == hr) && (dwFlags & WIA_TRANSFERHELPER_PRESERVEFAILEDFILE))
                        {
                            //
                            // Get the file names
                            //
                            CSimpleString strName = CSimpleStringConvert::NaturalString(CSimpleStringWide(stgMedium.lpszFileName));
                            CSimpleString strTarget = CSimpleStringConvert::NaturalString(CSimpleStringWide(pszFilename));
                            if (strName.Length() && strTarget.Length())
                            {
                                //
                                // Don't preserve any errors we encounter here.
                                //
                                WiaUiUtil::MoveOrCopyFile( strName.String(), strTarget.String() );
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("TransferItemFile, idtGetData failed")));
                        }

                        //
                        // Call this even in the error case, in case the driver/service left a file laying around.
                        //
                        ReleaseStgMedium(&stgMedium);
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("TransferItemFile, pIWiaPropertyStorage->WriteMultiple failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("TransferItemFile, QI of IWiaPropertyStorage failed.")));
            }
        }
        if (m_pWiaProgressDialog)
        {
            m_pWiaProgressDialog->Destroy();
            m_pWiaProgressDialog = NULL;
        }
    }
    else
    {
        WIA_ERROR((TEXT("TransferItemFile, unable to create status window")));
        hr = HRESULT_FROM_WIN32(GetLastError());
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\updnedit.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       UPDNEDIT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        1/10/2000
 *
 *  DESCRIPTION: Encapsulate the updown control and edit control
 *
 *******************************************************************************/

#ifndef __UPDNEDIT_H_INCLUDED
#define __UPDNEDIT_H_INCLUDED

#include <windows.h>
#include "vwiaset.h"

class CUpDownAndEdit
{
private:
    HWND               m_hWndUpDown;
    HWND               m_hWndEdit;
    CValidWiaSettings *m_pValidWiaSettings;

public:
    CUpDownAndEdit(void)
      : m_hWndUpDown(NULL),
        m_hWndEdit(NULL),
        m_pValidWiaSettings(NULL)
    {
    }
    bool Initialize( HWND hWndUpDown, HWND hWndEdit, CValidWiaSettings *pValidWiaSettings )
    {
        //
        // Save all of these settings
        //
        m_hWndUpDown = hWndUpDown;
        m_hWndEdit = hWndEdit;
        m_pValidWiaSettings = pValidWiaSettings;

        //
        // Make sure these are valid
        //
        if (m_hWndUpDown && m_hWndEdit && m_pValidWiaSettings)
        {
            //
            // Set up the slider
            //
            SendMessage( m_hWndUpDown, UDM_SETRANGE32, 0, m_pValidWiaSettings->GetItemCount()-1 );

            //
            // Get the index of the intial value and set the position of the slider
            //
            int nIndex = m_pValidWiaSettings->FindIndexOfItem( m_pValidWiaSettings->InitialValue() );
            if (nIndex >= 0)
            {
                SendMessage( m_hWndUpDown, UDM_SETPOS32, 0, nIndex );
            }


            //
            // Set up the edit control
            //
            SetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), m_pValidWiaSettings->InitialValue(), TRUE );

            //
            // Everything is OK
            //
            return true;
        }
        return false;
    }

    void SetValue( LONG nValue ) const
    {
        if (IsValid())
        {
            //
            // Get the index of the intial value and set the position of the up down control
            //
            int nIndex = m_pValidWiaSettings->FindIndexOfItem( nValue );
            if (nIndex >= 0)
            {
                SendMessage( m_hWndUpDown, UDM_SETPOS32, TRUE, nIndex );
            }

            //
            // Set up the edit control
            //
            SetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), nValue, TRUE );
        }
    }

    bool ValidateEditControl(void)
    {
        BOOL bSuccess = FALSE;
        if (IsValid())
        {
            //
            // Get the current value
            //
            LONG nValue = static_cast<LONG>(GetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), &bSuccess, TRUE ));
            if (bSuccess)
            {
                //
                // Assume it isn't a valid value
                //
                bSuccess = FALSE;

                //
                // Check to see if the edit control has a legal value in it
                //
                LONG nTestValue = nValue;
                if (m_pValidWiaSettings->FindClosestValue(nTestValue))
                {
                    if (nValue == nTestValue)
                    {
                        bSuccess = TRUE;
                    }
                }
            }
        }
        return (bSuccess != FALSE);
    }
    void Restore(void)
    {
        if (IsValid())
        {
            SetValue( m_pValidWiaSettings->InitialValue() );
        }
    }

    bool IsValid(void) const
    {
        return (m_hWndUpDown && m_hWndEdit && m_pValidWiaSettings);
    }

    LONG GetValueFromCurrentPos(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CUpDownAndEdit::GetValueFromCurrentPos")));
        if (IsValid())
        {
            //
            // Find out what the current index is
            //
            int nIndex = static_cast<int>(SendMessage( m_hWndUpDown, UDM_GETPOS32, 0, 0 ));
            WIA_TRACE((TEXT("nIndex = %d"), nIndex ));


            //
            // Get the value at that index, if it is valid return it
            //
            LONG nValue;
            if (m_pValidWiaSettings->GetItemAtIndex(nIndex,nValue))
            {
                return nValue;
            }

            return m_pValidWiaSettings->Min();
        }
        return 0;
    }

    void HandleUpDownUpdate(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CUpDownAndEdit::HandleUpDownUpdate")));
        if (IsValid())
        {
            //
            // Find out what the current index is
            //
            int nIndex = static_cast<int>(SendMessage( m_hWndUpDown, UDM_GETPOS32, 0, 0 ));
            WIA_TRACE((TEXT("nIndex = %d"), nIndex ));


            //
            // Get the value at that index, if it is valid set the edit control's text
            //
            LONG nValue;
            if (m_pValidWiaSettings->GetItemAtIndex(nIndex,nValue))
            {
                WIA_TRACE((TEXT("nValue = %d"), nValue ));
                SetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), nValue, TRUE );
            }
        }
    }

    void HandleEditUpdate(void)
    {
        WIA_PUSH_FUNCTION((TEXT("CUpDownAndEdit::HandleUpDownUpdate")));
        if (IsValid())
        {
            //
            // Get the current value
            //
            BOOL bSuccess = FALSE;
            LONG nValue = static_cast<LONG>(GetDlgItemInt( GetParent(m_hWndEdit), GetWindowLong(m_hWndEdit,GWL_ID), &bSuccess, TRUE ));
            if (bSuccess)
            {
                //
                // Round it
                //
                if (m_pValidWiaSettings->FindClosestValue(nValue))
                {
                    int nIndex = m_pValidWiaSettings->FindIndexOfItem( nValue );
                    if (nIndex >= 0)
                    {
                        SendMessage( m_hWndUpDown, UDM_SETPOS32, 0, nIndex );
                    }
                }
            }
        }
    }
};

#endif //__UPDNEDIT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\wiadefui.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIADEVD.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/13/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __WIASCNPP_H_INCLUDED
#define __WIASCNPP_H_INCLUDED


extern LONG      g_cRef;
extern HINSTANCE g_hInstance;


extern void DllAddRef(void);
extern void DllRelease(void);



#endif // __WIASCNPP_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\sources.inc ===
!include $(PROJECT_ROOT)\ui\uienv.inc

TARGETNAME=viddlg
TARGETTYPE=LIBRARY
TARGETPATHLIB = $(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)

ATL_VER         = 30
USE_STATIC_ATL  = 1

TARGETPATH=$(PROJECT_ROOT)\ui\lib\$(PLATFORM_SUFFIX)

SOURCES=    ..\videodlg.cpp \
            ..\wiavidd.cpp

PRECOMPILED_CXX=1
PRECOMPILED_INCLUDE=..\precomp.h
PRECOMPILED_PCH=precomp.pch
PRECOMPILED_OBJ=precomp.obj
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\wiauiext.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIAUIEXT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/17/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#ifndef __WIAUIEXT_H_INCLUDED
#define __WIAUIEXT_H_INCLUDED

#include <windows.h>
#include <atlbase.h>
#include <objbase.h>
#include "uicommon.h"
#include "wiaseld.h"
#include "wiadebug.h"
#include "shlobj.h"
#include "itranhlp.h"
#include "isuppfmt.h"
#include "simstr.h"
#include "wia.h"
#include "wiadevd.h"
#include "wiadevdp.h"
#include "simarray.h"

#ifndef StiDeviceTypeStreamingVideo
#define StiDeviceTypeStreamingVideo 3
#endif

class CWiaDefaultUI :
    public IWiaUIExtension,
    public IWiaTransferHelper,
    public IWiaDataCallback,
    public IWiaSupportedFormats,
    public IShellExtInit,
    public IShellPropSheetExt,
    public IWiaMiscellaneousHelpers,
    public IWiaGetImageDlg,
    public IWiaProgressDialog,
    public IWiaAnnotationHelpers,
    public IWiaScannerPaperSizes
{
    class CWiaFormatPair
    {
    private:
        GUID        m_guidType;
        CSimpleStringWide m_strExtension;
        CSimpleStringWide m_strDescription;

    public:
        CWiaFormatPair(void)
        : m_guidType(GUID_NULL)
        {
        }
        CWiaFormatPair( const GUID &cfType, const CSimpleStringWide &strExtension, const CSimpleStringWide &strDescription )
        : m_guidType(cfType),
          m_strExtension(strExtension),
          m_strDescription(strDescription)
        {
        }
        CWiaFormatPair( const CWiaFormatPair &other )
        : m_guidType(other.Type()),
          m_strExtension(other.Extension()),
          m_strDescription(other.Description())
        {
        }
        ~CWiaFormatPair(void)
        {
        }
        CWiaFormatPair &operator=( const CWiaFormatPair &other )
        {
            if (this != &other)
            {
                m_guidType = other.Type();
                m_strExtension = other.Extension();
                m_strDescription = other.Description();
            }
            return *this;
        }
        bool operator==( const CWiaFormatPair &other )
        {
            return ((Type() == other.Type()) != 0);
        }

        GUID Type(void) const
        {
            return m_guidType;
        }
        void Type( const GUID &cfType )
        {
            m_guidType = cfType;
        }

        CSimpleStringWide Extension(void) const
        {
            return m_strExtension;
        }
        void Extension( const CSimpleStringWide &strExtension )
        {
            m_strExtension = strExtension;
        }

        CSimpleStringWide Description(void) const
        {
            return m_strDescription;
        }
        void Description( const CSimpleStringWide &strDescription )
        {
            m_strDescription = strDescription;
        }
    };

private:
    LONG m_cRef;

    // for IWiaTransferHelper
    IWiaDataCallback             *m_pSecondaryCallback;
    CComPtr<IWiaProgressDialog>   m_pWiaProgressDialog;

    // for IWiaSupportedFormats
    int                   m_nDefaultFormat;
    CSimpleDynamicArray<CWiaFormatPair> m_WiaFormatPairs;

    // for IShellExtInit, IShellPropSheetExt
    CComPtr<IWiaItem> m_pItem;

    // for IWiaProgressDialog
    HWND m_hWndProgress;

public:
    const IWiaItem *Item(void) const
    {
        return m_pItem.p;
    }

public:
    ~CWiaDefaultUI(void);
    CWiaDefaultUI(void);

    // IUnknown
    STDMETHODIMP QueryInterface( REFIID riid, LPVOID *ppvObject );
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    // IWiaUIExtension
    STDMETHODIMP DeviceDialog( PDEVICEDIALOGDATA pDeviceDialogData );
    STDMETHODIMP GetDeviceIcon( BSTR bstrDeviceId, HICON *phIcon, ULONG nSize );
    STDMETHODIMP GetDeviceBitmapLogo( BSTR bstrDeviceId, HBITMAP *phBitmap, ULONG nMaxWidth, ULONG nMaxHeight );

    // IWiaTransferHelper
    STDMETHODIMP TransferItemFile( IWiaItem *pWiaItem, HWND hwndParent, DWORD dwFlags, GUID cfFormat, LPCWSTR pszFilename, IWiaDataCallback *pSecondaryCallback, LONG nMediaType );
    STDMETHODIMP TransferItemBanded( IWiaItem *pWiaItem, HWND hwndParent, DWORD dwFlags, GUID cfFormat, ULONG ulBufferSize, IWiaDataCallback *pSecondaryCallback );

    // IWiaDataCallback
    STDMETHODIMP BandedDataCallback(LONG,LONG,LONG,LONG,LONG,LONG,LONG,PBYTE);

    // IWiaSupportedFormats
    STDMETHODIMP Initialize( IWiaItem *pWiaItem, LONG nMediaType );
    STDMETHODIMP GetFormatCount( LONG *pnCount );
    STDMETHODIMP GetFormatType( LONG nFormat, GUID *pcfClipFormat );
    STDMETHODIMP GetFormatExtension( LONG nFormat, LPWSTR pszExtension, int nMaxLen );
    STDMETHODIMP GetFormatDescription( LONG nFormat, LPWSTR pszDescription, int nMaxLen );
    STDMETHODIMP GetDefaultClipboardFileFormat( GUID *pcfFormat );
    STDMETHODIMP GetDefaultClipboardFileFormatIndex( LONG *pnFormat );
    STDMETHODIMP GetClipboardFileExtension( GUID cfFormat, LPWSTR pszExt, DWORD nMaxLen );
    STDMETHODIMP ChangeClipboardFileExtension(IN GUID cfFormat, LPWSTR pszFilename, DWORD nMaxLen );
    STDMETHODIMP ConstructFileOpenDialogStyleString( BSTR *pbstrString );

    // IShellExtInit
    STDMETHODIMP Initialize( LPCITEMIDLIST pidlFolder, LPDATAOBJECT lpdobj, HKEY hkeyProgID );

    // IShellPropSheetExt
    STDMETHODIMP AddPages( LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam );
    STDMETHODIMP ReplacePage( UINT uPageID, LPFNADDPROPSHEETPAGE lpfnReplacePage, LPARAM lParam )
    {
        return E_NOTIMPL;
    }

    // *** IWiaMiscellaneousHelper methods ***
    STDMETHODIMP GetDeviceIcon( LONG nDeviceType, HICON *phIcon, int nSize );

    // *** IWiaGetImageDlg ***
    STDMETHODIMP SelectDeviceDlg(
        HWND         hwndParent,
        BSTR         bstrInitialDeviceId,
        LONG         lDeviceType,
        LONG         lFlags,
        BSTR        *pbstrDeviceID,
        IWiaItem   **ppWiaItemRoot );
    STDMETHODIMP GetImageDlg(
        IWiaDevMgr   *pWiaDevMgr,
        HWND         hwndParent,
        LONG         lDeviceType,
        LONG         lFlags,
        LONG         lIntent,
        IWiaItem     *pItemRoot,
        BSTR         bstrFilename,
        GUID         *pguidFormat );

    // *** IWiaProgressDialog methods ***
    STDMETHODIMP Create( HWND hwndParent, LONG lFlags );
    STDMETHODIMP Show(void);
    STDMETHODIMP Hide(void);
    STDMETHODIMP Cancelled( BOOL *pbCancelled );
    STDMETHODIMP SetTitle( LPCWSTR pszMessage );
    STDMETHODIMP SetMessage( LPCWSTR pszTitle );
    STDMETHODIMP SetPercentComplete( UINT nPercent );
    STDMETHODIMP Destroy(void);

    // *** IWiaAnnotationHelpers methods ***
    STDMETHODIMP GetAnnotationOverlayIcon( CAnnotationType AnnotationType, HICON *phIcon, int nSize );
    STDMETHODIMP GetAnnotationType( IUnknown *pUnknown, CAnnotationType &AnnotationType );
    STDMETHODIMP GetAnnotationFormat( IUnknown *pUnknown, GUID &guidFormat );
    STDMETHODIMP GetAnnotationSize( IUnknown *pUnknown, LONG &nSize, LONG nMediaType );
    STDMETHODIMP TransferAttachmentToMemory( IUnknown *pUnknown, GUID &guidFormat, HWND hWndProgressParent, PBYTE *pBuffer, DWORD *pdwSize );

    // *** IWiaScannerPaperSizes ***
    STDMETHODIMP GetPaperSizes( CWiaPaperSize **ppPaperSizes, UINT *pnCount );
    STDMETHODIMP FreePaperSizes( CWiaPaperSize **ppPaperSizes, UINT *pnCount );
};

// This calls the real SelectDeviceDlg in the device selection static library
HRESULT WINAPI SelectDeviceDialog( PSELECTDEVICEDLG pSelectDeviceDlg );

#endif //__WIAUIEXT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\precomp.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1999 - 2000
 *
 *  TITLE:       precomp.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      RickTu
 *
 *  DATE:        10/14/99
 *
 *  DESCRIPTION: precomiled header file for video common dialog
 *
 *****************************************************************************/

#ifndef _WIA_VIDEO_DLG_PRECOMP_H_
#define _WIA_VIDEO_DLG_PRECOMP_H_

//
// Windows header files
//

#include <windows.h>
#include <commctrl.h>
#include <comctrlp.h>
#include <atlbase.h>

//
// WIA header files
//

#include <wia.h>
#include <wiadebug.h>
#include <wiadevd.h>
#include <wiavideo.h>

//
// Utililty header files
//

#include <uicommon.h>
#include <simcrack.h>
#include <bkthread.h>
#include <simevent.h>
#include <miscutil.h>
#include <simrect.h>
#include <pshelper.h>
#include <uiexthlp.h>
#include <simbstr.h>
#include <movewnd.h>
#include <dlgunits.h>
#include <vcamprop.h>

//
// Our header files
//

#include "wiavidd.rh"
#include "citemlst.h"
#include "videodlg.h"

extern HINSTANCE g_hInstance;

#include <shfusion.h>

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\videodlg.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1999 - 2000
 *
 *  TITLE:       videodlg.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      RickTu
 *
 *  DATE:        10/14/99
 *
 *  DESCRIPTION: CVideoCaptureDialog class definitions
 *
 *****************************************************************************/

#ifndef _WIA_VIDEO_CAPTURE_DIALOG_CLASS_H_
#define _WIA_VIDEO_CAPTURE_DIALOG_CLASS_H_

//
// Thread queue messages
//

#define TQ_DESTROY      (WM_USER+1)
#define TQ_GETTHUMBNAIL (WM_USER+2)
#define TQ_GETPREVIEW   (WM_USER+3)
#define TQ_DELETEITEM   (WM_USER+4)

//
// Private messages
//
#define PWM_POSTINIT         (WM_USER+1)
#define PWM_CHANGETOPARENT   (WM_USER+2)
#define PWM_THUMBNAILSTATUS  (WM_USER+3)
#define PWM_PREVIEWSTATUS    (WM_USER+4)
#define PWM_PREVIEWPERCENT   (WM_USER+5)

//
// ICON defines
//

#define DEF_PICTURE_ICON 0
#define DEF_FOLDER_ICON 1
#define DEF_PARENT_ICON 2


//
// Messages to send to keep view up to date
//
// The LPARAM has the BSTR of the item to delete...
//

#define VD_NEW_ITEM    (WM_USER+20)
#define VD_DELETE_ITEM (WM_USER+21)

//
// No params for this one
//

#define VD_DEVICE_DISCONNECTED (WM_USER+22)

class CVideoCaptureDialog
{

private:
    enum
    {
        MULTISEL_MODE = 1,
        SINGLESEL_MODE = 2,
        BOTH_MODES = 3
    };

private:
    HWND                 m_hWnd;
    PDEVICEDIALOGDATA    m_pDeviceDialogData;
    SIZE                 m_CurrentAspectRatio;
    CThreadMessageQueue *m_pThreadMessageQueue;
    CSimpleEvent         m_CancelEvent;
    HANDLE               m_hBackgroundThread;
    BOOL                 m_bFirstTime;
    HIMAGELIST           m_hImageList;
    HFONT                m_hBigFont;
    DWORD                m_nDialogMode;
    SIZE                 m_sizeMinimumWindow;
    



    SIZE                m_sizeThumbnails;
    INT                 m_nParentFolderImageListIndex;
    HACCEL              m_hAccelTable;
    INT                 m_nListViewWidth;
    HICON               m_hIconLarge;
    HICON               m_hIconSmall;
    CCameraItemList     m_CameraItemList;
    CCameraItem        *m_pCurrentParentItem;

    CSimpleStringWide   m_strwDeviceId;


    CComPtr<IWiaVideo>  m_pWiaVideo;
    CComPtr<IWiaDevMgr> m_pDevMgr;
    CComPtr<IUnknown>   m_pCreateCallback;
    CComPtr<IUnknown>   m_pDeleteCallback;
    CComPtr<IUnknown>   m_pDisconnectedCallback;


private:

    //
    // No implementation
    //

    CVideoCaptureDialog(void);
    CVideoCaptureDialog &operator=( const CVideoCaptureDialog & );
    CVideoCaptureDialog( const CVideoCaptureDialog & );

private:
    CVideoCaptureDialog( HWND hWnd );


protected:

    //
    // Message functions
    //

    LRESULT OnInitDialog( WPARAM, LPARAM );
    LRESULT OnSize( WPARAM, LPARAM );
    LRESULT OnShow( WPARAM, LPARAM );
    LRESULT OnGetMinMaxInfo( WPARAM, LPARAM );
    LRESULT OnDestroy( WPARAM, LPARAM );
    LRESULT OnCommand( WPARAM wParam, LPARAM lParam );
    LRESULT OnTimer( WPARAM, LPARAM );
    LRESULT OnNotify( WPARAM wParam, LPARAM lParam );
    LRESULT OnNewItemEvent( WPARAM, LPARAM lParam );
    LRESULT OnDeleteItemEvent( WPARAM, LPARAM lParam );
    LRESULT OnDeviceDisconnect( WPARAM, LPARAM );
    LRESULT OnHelp( WPARAM wParam, LPARAM lParam );
    LRESULT OnContextMenu( WPARAM wParam, LPARAM lParam );


    LRESULT OnChangeToParent( WPARAM, LPARAM );
    LRESULT OnPostInit( WPARAM, LPARAM );
    LRESULT OnThumbnailStatus( WPARAM, LPARAM );
    LRESULT OnDblClkImageList( WPARAM, LPARAM );
    LRESULT OnImageListKeyDown( WPARAM, LPARAM lParam );
    LRESULT OnImageListItemChanged( WPARAM, LPARAM );

    VOID OnOK( WPARAM, LPARAM );
    VOID OnCancel( WPARAM, LPARAM );
    VOID OnCapture( WPARAM, LPARAM );
    VOID OnSelectAll( WPARAM, LPARAM );

    //
    // Util functions

    VOID    ResizeAll( VOID );
    HRESULT EnumerateItems( CCameraItem *pCurrentParent, IEnumWiaItem *pIWiaEnumItem );
    HRESULT EnumerateAllCameraItems( VOID );
    BOOL    FindMaximumThumbnailSize( VOID );
    HBITMAP CreateDefaultThumbnail( HDC hDC, HFONT hFont, INT nWidth, INT nHeight, LPCWSTR pszTitle, INT nType );
    VOID    CreateThumbnails( BOOL bForce=FALSE );
    void    CreateThumbnails( CCameraItem *pRoot, HIMAGELIST hImageList, bool bForce );
    VOID    RequestThumbnails( CCameraItem *pRoot );
    BOOL    ChangeFolder( CCameraItem *pNode );
    VOID    HandleSelectionChange( VOID );
    BOOL    PopulateList( CCameraItem *pOldParent=NULL );
    VOID    MarkItemDeletePending( INT nIndex, BOOL bSet );
    BOOL    SetSelectedListItem( INT nIndex );
    INT     FindItemInList( CCameraItem *pItem );
    INT     GetSelectionIndices( CSimpleDynamicArray<int> &aIndices );
    CCameraItem *GetListItemNode( int nIndex );
    BOOL    AddItemToListView( IWiaItem * pItem );
    HWND    GetGraphWindowHandle(void);


public: // For now

    //
    // Background thread messages
    //

    static BOOL WINAPI OnThreadDestroy( CThreadMessage *pMsg );
    static BOOL WINAPI OnGetThumbnail( CThreadMessage *pMsg );
    static BOOL WINAPI OnThreadDeleteItem( CThreadMessage *pMsg );


public:
    static INT_PTR CALLBACK DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam );

};


class CVideoCallback : public IWiaEventCallback
{

private:
    HWND m_hWnd;
    LONG m_cRef;

public:
    CVideoCallback();
    STDMETHOD(Initialize)( HWND hwnd );

    //
    // IWiaEventCallback stuff
    //

    STDMETHOD_(ULONG, AddRef)(VOID);
    STDMETHOD_(ULONG, Release)(VOID);
    STDMETHOD(QueryInterface)(REFIID riid, LPVOID *ppvObject);
    STDMETHOD(ImageEventCallback)(const GUID __RPC_FAR *pEventGUID, BSTR bstrEventDescription, BSTR bstrDeviceID, BSTR bstrDeviceDescription, DWORD dwDeviceType, BSTR bstrFullItemName, ULONG __RPC_FAR *pulEventType, ULONG ulReserved);

};








#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\videodlg.cpp ===
/*****************************************************************************
 *
 *  (C) CORPYRIGHT MICROSOFT CORPORATION, 1999 - 2000
 *
 *  TITLE:       videodlg.cpp
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      RickTu
 *
 *  DATE:        10/14/99
 *
 *  DESCRIPTION: Implementation of DialogProc for video capture common dialog
 *
 *****************************************************************************/

#include <precomp.h>
#pragma hdrstop
#include "wiacsh.h"
#include "modlock.h"
#include "wiadevdp.h"

//
// Help IDs
//
static const DWORD g_HelpIDs[] =
{
    IDC_VIDDLG_BIG_TITLE,     -1,
    IDC_VIDDLG_LITTLE_TITLE,  -1,
    IDC_VIDDLG_PREVIEW,       IDH_WIA_VIDEO,
    IDC_VIDDLG_THUMBNAILLIST, IDH_WIA_CAPTURED_IMAGES,
    IDC_VIDDLG_CAPTURE,       IDH_WIA_CAPTURE,
    IDOK,                     IDH_WIA_VIDEO_GET_PICTURE,
    IDCANCEL,                 IDH_CANCEL,
    0, 0
};

#define IDC_SIZEBOX         1113

//
// If the callee doesn't return this value, we delete the message data ourselves.
//
#ifndef HANDLED_THREAD_MESSAGE
#define HANDLED_THREAD_MESSAGE 2032
#endif

// Thumbnail whitespace: the space in between images and their selection rectangles
// CThese values were discovered by trail and error.  For instance, if you reduce
// c_nAdditionalMarginY to 20, you get really bizarre spacing problems in the list view
// in vertical mode.  These values could become invalid in future versions of the listview.
static const int c_nAdditionalMarginX = 10;
static const int c_nAdditionalMarginY = 6;

static int c_nMinThumbnailWidth  = 90;
static int c_nMinThumbnailHeight = 90;

static int c_nMaxThumbnailWidth  = 120;
static int c_nMaxThumbnailHeight = 120;

//
// Map of background thread messages
//

static CThreadMessageMap g_MsgMap[] =
{
    { TQ_DESTROY,      CVideoCaptureDialog::OnThreadDestroy},
    { TQ_GETTHUMBNAIL, CVideoCaptureDialog::OnGetThumbnail},
    { 0, NULL}
};

class CGlobalInterfaceTableThreadMessage : public CNotifyThreadMessage
{
private:
    DWORD m_dwGlobalInterfaceTableCookie;

private:
    // No implementation
    CGlobalInterfaceTableThreadMessage(void);
    CGlobalInterfaceTableThreadMessage &operator=( const CGlobalInterfaceTableThreadMessage & );
    CGlobalInterfaceTableThreadMessage( const CGlobalInterfaceTableThreadMessage & );

public:
    CGlobalInterfaceTableThreadMessage( int nMessage, HWND hWndNotify, DWORD dwGlobalInterfaceTableCookie )
      : CNotifyThreadMessage( nMessage, hWndNotify ),
        m_dwGlobalInterfaceTableCookie(dwGlobalInterfaceTableCookie)
    {
    }
    DWORD GlobalInterfaceTableCookie(void) const
    {
        return(m_dwGlobalInterfaceTableCookie);
    }
};


class CThumbnailThreadMessage : public CGlobalInterfaceTableThreadMessage
{
private:
    SIZE  m_sizeThumb;

private:
    // No implementation
    CThumbnailThreadMessage(void);
    CThumbnailThreadMessage &operator=( const CThumbnailThreadMessage & );
    CThumbnailThreadMessage( const CThumbnailThreadMessage & );

public:
    CThumbnailThreadMessage( HWND hWndNotify, DWORD dwGlobalInterfaceTableCookie, const SIZE &sizeThumb )
      : CGlobalInterfaceTableThreadMessage( TQ_GETTHUMBNAIL, hWndNotify, dwGlobalInterfaceTableCookie ),
    m_sizeThumb(sizeThumb)
    {
    }
    const SIZE &ThumbSize(void) const
    {
        return(m_sizeThumb);
    }
};

//
// Avoids unnecessary state changes
//
static inline VOID MyEnableWindow( HWND hWnd, BOOL bEnable )
{
    if (bEnable && !IsWindowEnabled(hWnd))
    {
        EnableWindow(hWnd,TRUE);
    }
    else if (!bEnable && IsWindowEnabled(hWnd))
    {
        EnableWindow(hWnd,FALSE);
    }
}


/*****************************************************************************

   CVideoCaptureDialog constructor

   We don't have a destructor

 *****************************************************************************/

CVideoCaptureDialog::CVideoCaptureDialog( HWND hWnd )
  : m_hWnd(hWnd),
    m_bFirstTime(true),
    m_hBigFont(NULL),
    m_nListViewWidth(0),
    m_hIconLarge(NULL),
    m_hIconSmall(NULL),
    m_hBackgroundThread(NULL),
    m_nDialogMode(0),
    m_hAccelTable(NULL),
    m_nParentFolderImageListIndex(0),
    m_pThreadMessageQueue(NULL)
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::CVideoCaptureDialog")));

    m_pThreadMessageQueue = new CThreadMessageQueue;
    if (m_pThreadMessageQueue)
    {
        //
        // Note that CBackgroundThread takes ownership of m_pThreadMessageQueue, and it doesn't have to be deleted in this thread
        //
        m_hBackgroundThread = CBackgroundThread::Create( m_pThreadMessageQueue, g_MsgMap, m_CancelEvent.Event(), g_hInstance );
    }

    m_CurrentAspectRatio.cx = 4;
    m_CurrentAspectRatio.cy = 3;

    m_sizeThumbnails.cx = c_nMaxThumbnailWidth;
    m_sizeThumbnails.cy = c_nMaxThumbnailHeight;

    WIA_ASSERT(m_hBackgroundThread != NULL);

}


/*****************************************************************************

   CVideoCaptureDialog::OnInitDialog

   Handle WM_INITIDIALOG

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnInitDialog( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::OnInitDialog"));

    HRESULT hr;

    //
    // Make sure the background queue was successfully created
    //
    if (!m_pThreadMessageQueue)
    {
        WIA_ERROR((TEXT("VIDEODLG: unable to start background queue")));
        EndDialog( m_hWnd, E_OUTOFMEMORY );
        return(0);
    }

    //
    // Save incoming data
    //

    m_pDeviceDialogData = (PDEVICEDIALOGDATA)lParam;

    //
    // Make sure we have valid arguments
    //

    if (!m_pDeviceDialogData)
    {
        WIA_ERROR((TEXT("VIDEODLG: Invalid paramater: PDEVICEDIALOGDATA")));
        EndDialog( m_hWnd, E_INVALIDARG );
        return(0);
    }

    //
    // Initialialize our return stuff
    //

    if (m_pDeviceDialogData)
    {
        m_pDeviceDialogData->lItemCount = 0;
        m_pDeviceDialogData->ppWiaItems = NULL;
    }

    //
    // Make sure we have a valid device
    //

    if (!m_pDeviceDialogData->pIWiaItemRoot)
    {
        WIA_ERROR((TEXT("VIDEODLG: Invalid paramaters: pIWiaItem")));
        EndDialog( m_hWnd, E_INVALIDARG );
        return(0);
    }

    //
    // Get deviceID for this device
    //

    PropStorageHelpers::GetProperty(m_pDeviceDialogData->pIWiaItemRoot,WIA_DIP_DEV_ID,m_strwDeviceId);

    //
    // Register for device disconnected, item creation and deletion events...
    //

    hr = CoCreateInstance( CLSID_WiaDevMgr, NULL, CLSCTX_LOCAL_SERVER, IID_IWiaDevMgr, (LPVOID *)&m_pDevMgr );
    WIA_CHECK_HR(hr,"CoCreateInstance( WiaDevMgr )");

    if (SUCCEEDED(hr) && m_pDevMgr)
    {
        CVideoCallback *pVC = new CVideoCallback();
        if (pVC)
        {
            hr = pVC->Initialize( m_hWnd );
            WIA_CHECK_HR(hr,"pVC->Initialize()");

            if (SUCCEEDED(hr))
            {
                CComPtr<IWiaEventCallback> pWiaEventCallback;

                hr = pVC->QueryInterface( IID_IWiaEventCallback,
                                          (void**)&pWiaEventCallback
                                        );
                WIA_CHECK_HR(hr,"pVC->QI( IID_IWiaEventCallback )");

                if (SUCCEEDED(hr) && pWiaEventCallback)
                {
                    CSimpleBStr bstr( m_strwDeviceId );

                    hr = m_pDevMgr->RegisterEventCallbackInterface( WIA_REGISTER_EVENT_CALLBACK,
                                                                    bstr,
                                                                    &WIA_EVENT_DEVICE_DISCONNECTED,
                                                                    pWiaEventCallback,
                                                                    &m_pDisconnectedCallback
                                                                  );
                    WIA_CHECK_HR(hr,"RegisterEvent( DEVICE_DISCONNECTED )");


                    hr = m_pDevMgr->RegisterEventCallbackInterface( WIA_REGISTER_EVENT_CALLBACK,
                                                                    bstr,
                                                                    &WIA_EVENT_ITEM_DELETED,
                                                                    pWiaEventCallback,
                                                                    &m_pCreateCallback
                                                                  );
                    WIA_CHECK_HR(hr,"RegisterEvent( ITEM_DELETE )");

                    hr = m_pDevMgr->RegisterEventCallbackInterface( WIA_REGISTER_EVENT_CALLBACK,
                                                                    bstr,
                                                                    &WIA_EVENT_ITEM_CREATED,
                                                                    pWiaEventCallback,
                                                                    &m_pDeleteCallback
                                                                  );
                    WIA_CHECK_HR(hr,"RegisterEvent( ITEM_CREATED )");
                }
                else
                {
                    WIA_ERROR((TEXT("Either QI failed or pWiaEventCallback is NULL!")));
                }
            }
            pVC->Release();
        }
    }

    if (SUCCEEDED(hr) )
    {
        // Create the WiaVideo object
        hr = CoCreateInstance(CLSID_WiaVideo, NULL, CLSCTX_INPROC_SERVER, 
                              IID_IWiaVideo, (LPVOID *)&m_pWiaVideo);

        WIA_CHECK_HR(hr,"CoCreateInstance( WiaVideo )");
    }

    //
    // Prevent multiple selection
    //

    if (m_pDeviceDialogData->dwFlags & WIA_DEVICE_DIALOG_SINGLE_IMAGE)
    {
        LONG_PTR lStyle = GetWindowLongPtr( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ), GWL_STYLE );
        SetWindowLongPtr( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ), GWL_STYLE, lStyle | LVS_SINGLESEL );

        m_nDialogMode = SINGLESEL_MODE;

        //
        // Hide the "Select All"  button
        //
        ShowWindow( GetDlgItem( m_hWnd, IDC_VIDDLG_SELECTALL ), SW_HIDE );

        //
        // Change text accordingly
        //

        CSimpleString( IDS_VIDDLG_TITLE_SINGLE_SEL, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_VIDDLG_BIG_TITLE ) );
        CSimpleString( IDS_VIDDLG_SUBTITLE_SINGLE_SEL, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDC_VIDDLG_LITTLE_TITLE ) );
        CSimpleString( IDS_VIDDLG_OK_SINGLE_SEL, g_hInstance ).SetWindowText( GetDlgItem( m_hWnd, IDOK ) );

    }
    else
    {
        m_nDialogMode = MULTISEL_MODE;
    }

    //
    // Make the lovely font
    //

    m_hBigFont = WiaUiUtil::CreateFontWithPointSizeFromWindow( GetDlgItem(m_hWnd,IDC_VIDDLG_BIG_TITLE), 14, false, false );
    if (m_hBigFont)
    {
        SendDlgItemMessage( m_hWnd,
                            IDC_VIDDLG_BIG_TITLE,
                            WM_SETFONT,
                            reinterpret_cast<WPARAM>(m_hBigFont),
                            MAKELPARAM(TRUE,0)
                          );
    }

    //
    // Save the minimum size of the dialog
    //

    RECT rcWindow;
    GetWindowRect( m_hWnd, &rcWindow );
    m_sizeMinimumWindow.cx = rcWindow.right - rcWindow.left;
    m_sizeMinimumWindow.cy = rcWindow.bottom - rcWindow.top;

    //
    // Create the sizing control
    //

    HWND hWndSizingControl = CreateWindowEx( 0, TEXT("scrollbar"), TEXT(""),
                                             WS_CHILD|WS_VISIBLE|SBS_SIZEGRIP|WS_CLIPSIBLINGS|SBS_SIZEBOXBOTTOMRIGHTALIGN|SBS_BOTTOMALIGN|WS_GROUP,
                                             CSimpleRect(m_hWnd).Width()-GetSystemMetrics(SM_CXVSCROLL),
                                             CSimpleRect(m_hWnd).Height()-GetSystemMetrics(SM_CYHSCROLL),
                                             GetSystemMetrics(SM_CXVSCROLL),
                                             GetSystemMetrics(SM_CYHSCROLL),
                                             m_hWnd, reinterpret_cast<HMENU>(IDC_SIZEBOX),
                                             g_hInstance, NULL );
    if (!hWndSizingControl)
    {
        WIA_ERROR((TEXT("CreateWindowEx( sizing control ) failed!")));
    }

    //
    // Reposition all the controls
    //

    ResizeAll();

    //
    // Center the window over its parent
    //

    WiaUiUtil::CenterWindow( m_hWnd, GetParent(m_hWnd) );

    //
    // Get the device icons and set the window icons
    //
    CSimpleStringWide strwDeviceId, strwClassId;
    LONG nDeviceType;
    if (PropStorageHelpers::GetProperty(m_pDeviceDialogData->pIWiaItemRoot,WIA_DIP_UI_CLSID,strwClassId) &&
        PropStorageHelpers::GetProperty(m_pDeviceDialogData->pIWiaItemRoot,WIA_DIP_DEV_ID,strwDeviceId) &&
        PropStorageHelpers::GetProperty(m_pDeviceDialogData->pIWiaItemRoot,WIA_DIP_DEV_TYPE,nDeviceType))
    {
        if (SUCCEEDED(WiaUiExtensionHelper::GetDeviceIcons( CSimpleBStr(strwClassId), nDeviceType, &m_hIconSmall, &m_hIconLarge )))
        {
            if (m_hIconSmall)
            {
                SendMessage( m_hWnd, WM_SETICON, ICON_SMALL, reinterpret_cast<LPARAM>(m_hIconSmall) );
            }
            if (m_hIconLarge)
            {
                SendMessage( m_hWnd, WM_SETICON, ICON_BIG, reinterpret_cast<LPARAM>(m_hIconLarge) );
            }
        }
    }

    SetForegroundWindow(m_hWnd);

    return(0);
}



/*****************************************************************************

   CVideoCaptureDialog::ResizeAll

   Resizes and repositions all the controls when the dialog size
   changes.

 *****************************************************************************/

VOID CVideoCaptureDialog::ResizeAll(VOID)
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::ResizeAll")));

    CSimpleRect rcClient(m_hWnd);
    CMoveWindow mw;
    CDialogUnits dialogUnits(m_hWnd);

    //WIA_TRACE((TEXT("rcClient is l(%d) t(%d) r(%d) b(%d)"),rcClient.left, rcClient.top, rcClient.right, rcClient.bottom));
    //WIA_TRACE((TEXT("rcClient is w(%d) h(%d)"),rcClient.Width(),rcClient.Height()));
    //WIA_TRACE((TEXT("dialogUnits.StandardMargin       is cx(%d) cy(%d)"),dialogUnits.StandardMargin().cx,dialogUnits.StandardMargin().cy));
    //WIA_TRACE((TEXT("dialogUnits.StandardButtonMargin is cx(%d) cy(%d)"),dialogUnits.StandardButtonMargin().cx,dialogUnits.StandardButtonMargin().cy));

    //
    // Resize the big title
    //

    mw.Size( GetDlgItem( m_hWnd, IDC_VIDDLG_BIG_TITLE ),
             rcClient.Width() - dialogUnits.StandardMargin().cx * 2,
             0,
             CMoveWindow::NO_SIZEY );

    //
    // Resize the subtitle
    //

    mw.Size( GetDlgItem( m_hWnd, IDC_VIDDLG_LITTLE_TITLE ),
             rcClient.Width() - dialogUnits.StandardMargin().cx * 2,
             0,
             CMoveWindow::NO_SIZEY );


    CSimpleRect rcOK( GetDlgItem( m_hWnd, IDOK ), CSimpleRect::WindowRect );
    CSimpleRect rcCancel( GetDlgItem( m_hWnd, IDCANCEL ), CSimpleRect::WindowRect );

    //WIA_TRACE((TEXT("rcOK     is l(%d) t(%d) r(%d) b(%d)"),rcOK.left, rcOK.top, rcOK.right, rcOK.bottom));
    //WIA_TRACE((TEXT("rcOK     is w(%d) h(%d)"),rcOK.Width(), rcOK.Height()));
    //WIA_TRACE((TEXT("rcCancel is l(%d) t(%d) r(%d) b(%d)"),rcCancel.left, rcCancel.top, rcCancel.right, rcCancel.bottom));
    //WIA_TRACE((TEXT("rcCancel is w(%d) h(%d)"),rcCancel.Width(), rcCancel.Height()));

    //
    // Move the OK button
    //

    LONG x,y;

    x = rcClient.Width() -  dialogUnits.StandardMargin().cx - dialogUnits.StandardButtonMargin().cx - rcCancel.Width() - rcOK.Width();
    y = rcClient.Height() - dialogUnits.StandardMargin().cy - rcOK.Height();

    //WIA_TRACE((TEXT("Moving IDOK to x(%x) y(%d)"),x,y));
    mw.Move( GetDlgItem( m_hWnd, IDOK ), x, y, 0 );

    INT nTopOfOK = y;
    INT nBottomOfSub = CSimpleRect( GetDlgItem(m_hWnd,IDC_VIDDLG_LITTLE_TITLE), CSimpleRect::WindowRect ).ScreenToClient(m_hWnd).bottom;

    //
    // Move the cancel button
    //

    x = rcClient.Width() - dialogUnits.StandardMargin().cx - rcCancel.Width();
    y = rcClient.Height() - dialogUnits.StandardMargin().cy - rcCancel.Height();

    //WIA_TRACE((TEXT("Moving IDCANCEL to x(%x) y(%d)"),x,y));
    mw.Move( GetDlgItem( m_hWnd, IDCANCEL ), x, y, 0 );

    //
    // Move the resizing handle
    //

    x = rcClient.Width() - GetSystemMetrics(SM_CXVSCROLL);
    y = rcClient.Height() - GetSystemMetrics(SM_CYHSCROLL);

    //WIA_TRACE((TEXT("Moving IDC_SIZEBOX to x(%x) y(%d)"),x,y));
    mw.Move( GetDlgItem( m_hWnd, IDC_SIZEBOX ), x, y );

    //
    // Resize the preview window & move the capture button
    //

    CSimpleRect rcSubTitle(  GetDlgItem( m_hWnd, IDC_VIDDLG_LITTLE_TITLE ), CSimpleRect::ClientRect );
    CSimpleRect rcCapture(   GetDlgItem( m_hWnd, IDC_VIDDLG_CAPTURE ),      CSimpleRect::ClientRect );
    CSimpleRect rcSelectAll( GetDlgItem( m_hWnd, IDC_VIDDLG_SELECTALL ),    CSimpleRect::ClientRect );

    //WIA_TRACE((TEXT("rcSubTitle  is l(%d) t(%d) r(%d) b(%d)"),rcSubTitle.left, rcSubTitle.top, rcSubTitle.right, rcSubTitle.bottom));
    //WIA_TRACE((TEXT("rcSubTitle  is w(%d) h(%d)"),rcSubTitle.Width(), rcSubTitle.Height()));
    //WIA_TRACE((TEXT("rcCapture   is l(%d) t(%d) r(%d) b(%d)"),rcCapture.left, rcCapture.top, rcCapture.right, rcCapture.bottom));
    //WIA_TRACE((TEXT("rcCapture   is w(%d) h(%d)"),rcCapture.Width(), rcCapture.Height()));
    //WIA_TRACE((TEXT("rcSelectAll is l(%d) t(%d) r(%d) b(%d)"),rcSelectAll.left, rcSelectAll.top, rcSelectAll.right, rcSelectAll.bottom));
    //WIA_TRACE((TEXT("rcSelectAll is w(%d) h(%d)"),rcSelectAll.Width(), rcSelectAll.Height()));


    //WIA_TRACE((TEXT("nTopOfOK     is (%d)"),nTopOfOK));
    //WIA_TRACE((TEXT("nBottomOfSub is (%d)"),nBottomOfSub));

    CSimpleRect rcAvailableArea(
                               dialogUnits.StandardMargin().cx,
                               nBottomOfSub + dialogUnits.StandardMargin().cy,
                               rcClient.right - dialogUnits.StandardMargin().cx,
                               nTopOfOK - (dialogUnits.StandardButtonMargin().cy * 2)
                               );

    //WIA_TRACE((TEXT("rcAvailableArea is l(%d) t(%d) r(%d) b(%d)"),rcAvailableArea.left, rcAvailableArea.top, rcAvailableArea.right, rcAvailableArea.bottom));
    //WIA_TRACE((TEXT("rcAvailableArea is w(%d) h(%d)"),rcAvailableArea.Width(), rcAvailableArea.Height()));

    INT full_width    = rcAvailableArea.right - rcAvailableArea.left;
    INT preview_width = (full_width * 53) / 100;

    //WIA_TRACE((TEXT("full_width    is (%d)"),full_width));
    //WIA_TRACE((TEXT("preview_width is (%d)"),preview_width));

    //WIA_TRACE((TEXT("SizeMoving IDC_VIDDLG_PREVIEW to x(%d) y(%d) w(%d) h(%d)"),rcAvailableArea.left,rcAvailableArea.top,preview_width,rcAvailableArea.Height() - rcCapture.Height() - dialogUnits.StandardButtonMargin().cy));
    mw.SizeMove( GetDlgItem( m_hWnd, IDC_VIDDLG_PREVIEW ),
                 rcAvailableArea.left,
                 rcAvailableArea.top,
                 preview_width,
                 rcAvailableArea.Height() - rcCapture.Height() - dialogUnits.StandardButtonMargin().cy
               );

    INT offset = (preview_width - rcCapture.Width()) / 2;

    //WIA_TRACE((TEXT("offset is (%d)"),offset));

    //WIA_TRACE((TEXT("Moving IDC_VIDDLG_CAPTURE to x(%d) y(%d)"),rcAvailableArea.left + offset,rcAvailableArea.bottom - rcCapture.Height()));
    mw.Move( GetDlgItem( m_hWnd, IDC_VIDDLG_CAPTURE ),
             rcAvailableArea.left + offset,
             rcAvailableArea.bottom - rcCapture.Height(),
             0 );

    //
    // Resize the thumbnail list & move the selectall button
    //

    INT leftThumbEdge = rcAvailableArea.left + preview_width + dialogUnits.StandardMargin().cx;

    //WIA_TRACE((TEXT("leftThumbEdge is (%d)"),leftThumbEdge));

    //WIA_TRACE((TEXT("SizeMoving IDC_VIDDLG_THUMBNAILLIST to x(%d) y(%d) w(%d) h(%d)"),leftThumbEdge,rcAvailableArea.top,rcAvailableArea.Width() - preview_width - dialogUnits.StandardMargin().cx,rcAvailableArea.Height() - rcSelectAll.Height() - dialogUnits.StandardButtonMargin().cy));
    mw.SizeMove( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ),
                 leftThumbEdge,
                 rcAvailableArea.top,
                 rcAvailableArea.Width() - preview_width - dialogUnits.StandardMargin().cx,
                 rcAvailableArea.Height() - rcSelectAll.Height() - dialogUnits.StandardButtonMargin().cy
               );

    offset = ((rcAvailableArea.right - leftThumbEdge - rcSelectAll.Width()) / 2);

    //WIA_TRACE((TEXT("offset(new) is (%d)"),offset));

    //WIA_TRACE((TEXT("Moving IDC_VIDDLG_SELECTALL to x(%d) y(%d)"),leftThumbEdge + offset,rcAvailableArea.bottom - rcSelectAll.Height()));
    mw.Move( GetDlgItem( m_hWnd, IDC_VIDDLG_SELECTALL ),
             leftThumbEdge + offset,
             rcAvailableArea.bottom - rcSelectAll.Height(),
             0 );

    //
    // Explicitly apply the moves, because the toolbar frame doesn't get painted properly
    //

    mw.Apply();

    //
    // Update the dialog's background to remove any weird stuff left behind
    //

    InvalidateRect( m_hWnd, NULL, FALSE );
    UpdateWindow( m_hWnd );
}



/*****************************************************************************

   CVideoCaptureDialog::OnSize

   Handle WM_SIZE messages

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnSize( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnSize")));

    ResizeAll();

    //
    // Tell the video preview window to resize in within it's
    // container window as best it can.
    //

    if (m_pWiaVideo)
    {
        m_pWiaVideo->ResizeVideo(FALSE);
    }

    return(0);
}



/*****************************************************************************

   CVideoCaptureDialog::OnShow

   Handle WM_SHOW message

 *****************************************************************************/


LRESULT CVideoCaptureDialog::OnShow( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnShow")));

    if (m_bFirstTime)
    {
        PostMessage( m_hWnd, PWM_POSTINIT, 0, 0 );
        m_bFirstTime = false;
    }
    return(0);
}


/*****************************************************************************

   CVideoCameraDialog::OnGetMinMaxInfo

   Handle WM_GETMINMAXINFO

 *****************************************************************************/


LRESULT CVideoCaptureDialog::OnGetMinMaxInfo( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnGetMinMaxInfo")));
    WIA_TRACE((TEXT("m_sizeMinimumWindow = %d,%d"),m_sizeMinimumWindow.cx,m_sizeMinimumWindow.cy));

    LPMINMAXINFO pMinMaxInfo = (LPMINMAXINFO)lParam;
    pMinMaxInfo->ptMinTrackSize.x = m_sizeMinimumWindow.cx;
    pMinMaxInfo->ptMinTrackSize.y = m_sizeMinimumWindow.cy;
    return(0);
}


/*****************************************************************************

   CVideoCameraDialog::OnDestroy

   Handle WM_DESTROY message and do cleanup

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnDestroy( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnDestroy")));

    //
    // Unregister for events
    //

    m_pCreateCallback       = NULL;
    m_pDeleteCallback       = NULL;
    m_pDisconnectedCallback = NULL;

    //
    // Tell the background thread to destroy itself
    //

    m_pThreadMessageQueue->Enqueue( new CThreadMessage(TQ_DESTROY),CThreadMessageQueue::PriorityUrgent );

    //
    // Close the thread handle
    //
    CloseHandle( m_hBackgroundThread );

    if (m_pDeviceDialogData && m_pDeviceDialogData->pIWiaItemRoot && m_pWiaVideo)
    {
        m_pWiaVideo->DestroyVideo();
    }



    //
    // Delete resources
    //
    if (m_hBigFont)
    {
        DeleteObject(m_hBigFont);
        m_hBigFont = NULL;
    }
    if (m_hImageList)
    {
        m_hImageList = NULL;
    }
    if (m_hAccelTable)
    {
        DestroyAcceleratorTable(m_hAccelTable);
        m_hAccelTable = NULL;
    }

    if (m_hIconLarge)
    {
        DestroyIcon(m_hIconLarge);
        m_hIconLarge = NULL;
    }
    if (m_hIconSmall)
    {
        DestroyIcon(m_hIconSmall);
        m_hIconSmall = NULL;
    }
    return(0);
}


/*****************************************************************************

   CVideoCaptureDialog::OnOK

   Handle when the user presses "Get Pictures"

 *****************************************************************************/

VOID CVideoCaptureDialog::OnOK( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCameraDialog::OnOK")));

    HRESULT hr = S_OK;

    //
    // Start w/nothing to return
    //

    m_pDeviceDialogData->lItemCount = 0;
    m_pDeviceDialogData->ppWiaItems = NULL;

    //
    // Get the indicies of the items that are selected
    //

    CSimpleDynamicArray<int> aIndices;
    GetSelectionIndices( aIndices );

    //
    // Are there any items selected?
    //

    if (aIndices.Size())
    {
        //
        // Calculate the size of the buffer needed
        //

        INT nArraySizeInBytes = sizeof(IWiaItem*) * aIndices.Size();

        //
        // Alloc a buffer to hold the items
        //
        m_pDeviceDialogData->ppWiaItems = (IWiaItem**)CoTaskMemAlloc(nArraySizeInBytes);

        //
        // If we allocated a buffer, fill it up with the
        // items to return...
        //

        if (m_pDeviceDialogData->ppWiaItems)
        {
            INT i;

            ZeroMemory( m_pDeviceDialogData->ppWiaItems, nArraySizeInBytes );

            for (i=0;i<aIndices.Size();i++)
            {
                CCameraItem *pItem = GetListItemNode(aIndices[i]);
                if (pItem && pItem->Item())
                {
                    m_pDeviceDialogData->ppWiaItems[i] = pItem->Item();
                    m_pDeviceDialogData->ppWiaItems[i]->AddRef();
                }
                else
                {
                    //
                    // Somehow the list got corrupted
                    //
                    hr = E_UNEXPECTED;
                    break;
                }
            }

            if (!SUCCEEDED(hr))
            {
                //
                // Clean up if we had a failure
                //

                for (i=0;i<aIndices.Size();i++)
                {
                    if (m_pDeviceDialogData->ppWiaItems[i])
                    {
                        m_pDeviceDialogData->ppWiaItems[i]->Release();
                    }
                }

                CoTaskMemFree( m_pDeviceDialogData->ppWiaItems );
                m_pDeviceDialogData->ppWiaItems = NULL;
            }
            else
            {
                m_pDeviceDialogData->lItemCount = aIndices.Size();
            }
        }
        else
        {
            //
            // Unable to alloc buffer
            //

            WIA_ERROR((TEXT("Couldn't allocate a buffer")));
            hr = E_OUTOFMEMORY;
        }
    }
    else
    {
        //
        // There aren't any items selected, so just return without
        // ending the dialog...
        //

        return;
    }


    EndDialog( m_hWnd, hr );
}


/*****************************************************************************

   CVideoCaptureDialog::OnCancel

   Handle when the user presses cancel.

 *****************************************************************************/

VOID CVideoCaptureDialog::OnCancel( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCameraDialog::OnCancel")));

    EndDialog( m_hWnd, S_FALSE );
}


/*****************************************************************************

   CVideoCaptureDialog::OnSelectAll

   Handle when the user presses "Select All" button

 *****************************************************************************/

VOID CVideoCaptureDialog::OnSelectAll( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCameraDialog::OnSelectAll")));

    LVITEM lvItem;
    lvItem.mask = LVIF_STATE;
    lvItem.iItem = 0;
    lvItem.state = LVIS_SELECTED;
    lvItem.stateMask = LVIS_SELECTED;
    SendMessage( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ), LVM_SETITEMSTATE, -1, reinterpret_cast<LPARAM>(&lvItem) );
}



/*****************************************************************************

   CVideoCaptureDialog::AddItemToListView

   Adds a new IWiaItem to the list view...

 *****************************************************************************/

BOOL CVideoCaptureDialog::AddItemToListView( IWiaItem * pItem )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCameraDialog::AddItemToListView")));

    if (!pItem)
    {
        WIA_ERROR((TEXT("pItem is NULL!")));
        return FALSE;
    }

    //
    // Add the new picture to our list
    //

    CCameraItem * pNewCameraItem = new CCameraItem( pItem );
    if (pNewCameraItem)
    {
        WIA_TRACE((TEXT("Attempting to add new item to tree")));
        m_CameraItemList.Add( NULL, pNewCameraItem );

    }
    else
    {
        WIA_ERROR((TEXT("Couldn't create a new pNewCameraItem")));
    }

    //
    // Create a thumbnail for the new item
    //

    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );

    if (hwndList && pNewCameraItem)
    {
        HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_NORMAL );
        if (hImageList)
        {
            CVideoCaptureDialog::CreateThumbnails( pNewCameraItem,
                                                   hImageList,
                                                   FALSE
                                                 );
        }
        else
        {
            WIA_ERROR((TEXT("Couldn't get hImageList to get new thumbnail")));
        }

        //
        // Update the listview with the new item
        //

        LVITEM lvItem;
        INT iItem = ListView_GetItemCount( hwndList ) + 1;
        ZeroMemory( &lvItem, sizeof(lvItem) );
        lvItem.iItem = iItem;
        lvItem.mask = LVIF_IMAGE|LVIF_PARAM;
        lvItem.iImage = pNewCameraItem->ImageListIndex();
        lvItem.lParam = (LPARAM)pNewCameraItem;
        int nIndex = ListView_InsertItem( hwndList, &lvItem );

        //
        // Retrieve actual thumbnail
        //

        RequestThumbnails( pNewCameraItem );

        //
        // Select the new item
        //

        SetSelectedListItem( nIndex );

        //
        // Make sure the item is visible
        //

        ListView_EnsureVisible( hwndList, nIndex, FALSE );

    }


    return TRUE;
}



/*****************************************************************************

   CVideoCaptureDialog::OnCapture

   Handle when the user presses the "Capture" button

 *****************************************************************************/

VOID CVideoCaptureDialog::OnCapture( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCameraDialog::OnCapture")));

    //
    // Disable capture button until we're done with this iteration
    //

    MyEnableWindow( GetDlgItem( m_hWnd, IDC_VIDDLG_CAPTURE ), FALSE );

    //
    // Tell the video device to snap a picture
    //

    CComPtr<IWiaItem> pItem;

    if (m_pDeviceDialogData && m_pDeviceDialogData->pIWiaItemRoot && m_pWiaVideo)
    {
        WIA_TRACE((TEXT("Telling WiaVideo to take a picture")));
        BSTR    bstrNewImageFileName = NULL;
        
        //
        // Take the picture
        //
        HRESULT hr = m_pWiaVideo->TakePicture(&bstrNewImageFileName);

        WIA_CHECK_HR(hr,"m_pWiaVideo->TakePicture");

        if (hr == S_OK)
        {
            //
            // Succeeded in taking the picture, setting the LAST_PICTURE_TAKEN property
            // on the video driver to create a new item.
            //

            BOOL                bSuccess = FALSE;
            PROPVARIANT         pv;

            PropVariantInit(&pv);

            pv.vt       = VT_BSTR;
            pv.bstrVal  = bstrNewImageFileName;

            bSuccess = PropStorageHelpers::SetProperty(m_pDeviceDialogData->pIWiaItemRoot, 
                                                       WIA_DPV_LAST_PICTURE_TAKEN, 
                                                       pv);

            //
            // Note that this will free the bstrNewImageFileName returned to
            // us by WiaVideo
            //
            PropVariantClear(&pv);
        }
    }

    //
    // Re-Enable capture button now that we're done
    //

    MyEnableWindow( GetDlgItem( m_hWnd, IDC_VIDDLG_CAPTURE ), TRUE );

    //
    // Make sure the focus is still on our control
    //

    SetFocus( GetDlgItem( m_hWnd, IDC_VIDDLG_CAPTURE ) );

}


/*****************************************************************************

   CVideoCaptureDialog::OnDblClickImageList

   Translate a dbl-click on a thumbnail in the listview into a click
   on the "Get Pictures" button.

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnDblClkImageList( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnDblClkImageList")));

    SendMessage( m_hWnd, WM_COMMAND, MAKEWPARAM(IDOK,0), 0 );
    return 0;
}



/*****************************************************************************

   CVideoCaptureDialog::OnImageListItemChanged

   Sent whenever an item in the thumbnail list changes.

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnImageListItemChanged( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnImageListItemChanged")));

    HandleSelectionChange();
    return 0;
}


/*****************************************************************************

   CVideoCaptureDialog::OnImageListKeyDown

   Forward the keyboard messages within the listview appropriately.

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnImageListKeyDown( WPARAM, LPARAM lParam )
{
    LPNMLVKEYDOWN pnkd = reinterpret_cast<LPNMLVKEYDOWN>(lParam);
    if (pnkd)
    {
        if (VK_LEFT == pnkd->wVKey && (GetKeyState(VK_MENU) & 0x8000))
        {
            SendMessage( m_hWnd, PWM_CHANGETOPARENT, 0, 0 );
        }
    }

    return 0;
}



/*****************************************************************************

   CVideoCaptureDialog::OnNotify

   Handle WM_NOTIFY messages

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnNotify( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
    {
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL( NM_DBLCLK, IDC_VIDDLG_THUMBNAILLIST, OnDblClkImageList );
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL( LVN_ITEMCHANGED, IDC_VIDDLG_THUMBNAILLIST, OnImageListItemChanged );
        SC_HANDLE_NOTIFY_MESSAGE_CONTROL( LVN_KEYDOWN, IDC_VIDDLG_THUMBNAILLIST, OnImageListKeyDown );
    }
    SC_END_NOTIFY_MESSAGE_HANDLERS();
}



/*****************************************************************************

   CVideoCaptureDialog::OnCommand

   Handle WM_COMMAND messages

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnCommand( WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_COMMAND_HANDLERS()
    {
        SC_HANDLE_COMMAND(IDOK,          OnOK);
        SC_HANDLE_COMMAND(IDCANCEL,      OnCancel);
        SC_HANDLE_COMMAND(IDC_VIDDLG_CAPTURE,   OnCapture);
        SC_HANDLE_COMMAND(IDC_VIDDLG_SELECTALL, OnSelectAll);
    }
    SC_END_COMMAND_HANDLERS();
}


/*****************************************************************************

   CVideoCaptureDialog::OnGetThumbnail

   Called by background thread to get the thumbnail for a given item.

 *****************************************************************************/

BOOL WINAPI CVideoCaptureDialog::OnGetThumbnail( CThreadMessage *pMsg )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::OnGetThumbnail"));

    HBITMAP hBmpThumbnail = NULL;
    CThumbnailThreadMessage *pThumbMsg = (CThumbnailThreadMessage *)(pMsg);

    if (pThumbMsg)
    {
        CComPtr<IGlobalInterfaceTable> pGlobalInterfaceTable;

        HRESULT hr = CoCreateInstance( CLSID_StdGlobalInterfaceTable,
                                       NULL,
                                       CLSCTX_INPROC_SERVER,
                                       IID_IGlobalInterfaceTable,
                                       (void **)&pGlobalInterfaceTable);

        if (SUCCEEDED(hr) && pGlobalInterfaceTable)
        {
            CComPtr<IWiaItem> pIWiaItem;

            hr = pGlobalInterfaceTable->GetInterfaceFromGlobal(
                                                              pThumbMsg->GlobalInterfaceTableCookie(),
                                                              IID_IWiaItem,
                                                              (void**)&pIWiaItem);

            if (SUCCEEDED(hr) && pIWiaItem)
            {
                CComPtr<IWiaPropertyStorage> pIWiaPropertyStorage;

                hr = pIWiaItem->QueryInterface( IID_IWiaPropertyStorage,
                                                (void**)&pIWiaPropertyStorage
                                              );

                if (SUCCEEDED(hr) && pIWiaPropertyStorage)
                {
                    PROPVARIANT PropVar[3];
                    PROPSPEC PropSpec[3];

                    PropSpec[0].ulKind = PRSPEC_PROPID;
                    PropSpec[0].propid = WIA_IPC_THUMB_WIDTH;

                    PropSpec[1].ulKind = PRSPEC_PROPID;
                    PropSpec[1].propid = WIA_IPC_THUMB_HEIGHT;

                    PropSpec[2].ulKind = PRSPEC_PROPID;
                    PropSpec[2].propid = WIA_IPC_THUMBNAIL;

                    hr = pIWiaPropertyStorage->ReadMultiple(ARRAYSIZE(PropSpec),PropSpec,PropVar );

                    if (SUCCEEDED(hr))
                    {
                        WIA_TRACE((TEXT("Attempting to get the thumbnail for GIT entry: %08X, %08X, %08X, %08X"),pThumbMsg->GlobalInterfaceTableCookie(),PropVar[0].vt,PropVar[1].vt,PropVar[2].vt));

                        if ((PropVar[0].vt == VT_I4 || PropVar[0].vt == VT_UI4) &&
                            (PropVar[1].vt == VT_I4 || PropVar[1].vt == VT_UI4) &&
                            (PropVar[2].vt == (VT_UI1|VT_VECTOR)))
                        {
                            BITMAPINFO bmi;
                            bmi.bmiHeader.biSize            = sizeof(BITMAPINFOHEADER);
                            bmi.bmiHeader.biWidth           = PropVar[0].ulVal;
                            bmi.bmiHeader.biHeight          = PropVar[1].ulVal;
                            bmi.bmiHeader.biPlanes          = 1;
                            bmi.bmiHeader.biBitCount        = 24;
                            bmi.bmiHeader.biCompression     = BI_RGB;
                            bmi.bmiHeader.biSizeImage       = 0;
                            bmi.bmiHeader.biXPelsPerMeter   = 0;
                            bmi.bmiHeader.biYPelsPerMeter   = 0;
                            bmi.bmiHeader.biClrUsed         = 0;
                            bmi.bmiHeader.biClrImportant    = 0;

                            HDC hDC = GetDC(NULL);
                            if (hDC)
                            {
                                PBYTE *pBits;
                                HBITMAP hDibSection = CreateDIBSection( hDC, &bmi, DIB_RGB_COLORS, (PVOID*)&pBits, NULL, 0 );
                                if (hDibSection)
                                {
                                    CopyMemory( pBits, PropVar[2].caub.pElems, PropVar[2].caub.cElems );
                                    hr = ScaleImage( hDC, hDibSection, hBmpThumbnail, pThumbMsg->ThumbSize());
                                    if (SUCCEEDED(hr))
                                    {
                                        WIA_TRACE((TEXT("Sending this image to the notification window: %08X"),pThumbMsg->NotifyWindow()));
                                    }
                                    else
                                    {
                                        hBmpThumbnail = NULL;
                                    }
                                    DeleteObject(hDibSection);
                                }
                                ReleaseDC(NULL,hDC);
                            }
                        }
                        PropVariantClear(&PropVar[0]);
                        PropVariantClear(&PropVar[1]);
                        PropVariantClear(&PropVar[2]);
                    }
                }
            }
        }
    }

    LRESULT lRes = SendMessage( pThumbMsg->NotifyWindow(), PWM_THUMBNAILSTATUS, (WPARAM)pThumbMsg->GlobalInterfaceTableCookie(), (LPARAM)hBmpThumbnail );
    if (HANDLED_THREAD_MESSAGE != lRes && hBmpThumbnail)
    {
        DeleteObject( hBmpThumbnail );
    }

    return TRUE;
}


/*****************************************************************************

   CVideoCaptureDialog::OnThreadDestroy

   <Notes>

 *****************************************************************************/


BOOL WINAPI CVideoCaptureDialog::OnThreadDestroy( CThreadMessage * )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::OnThreadDestroy"));



    return FALSE;
}



/*****************************************************************************

   CVideoCaptureDialog::SetSelectedListItem

   <Notes>

 *****************************************************************************/

BOOL
CVideoCaptureDialog::SetSelectedListItem( int nIndex )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );

    //
    // Check for bad args
    //

    if (!hwndList)
    {
        return FALSE;
    }


    int iCount = ListView_GetItemCount(hwndList);
    for (int i=0;i<iCount;i++)
    {
        ListView_SetItemState(hwndList,i,0,LVIS_SELECTED|LVIS_FOCUSED);
    }

    ListView_SetItemState(hwndList,nIndex,LVIS_SELECTED|LVIS_FOCUSED,LVIS_SELECTED|LVIS_FOCUSED);

    return TRUE;
}


/*****************************************************************************

   CVideoCaptureDialog::MarkItemDeletePending

   <Notes>

 *****************************************************************************/

VOID
CVideoCaptureDialog::MarkItemDeletePending( INT nIndex, BOOL bSet )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
    if (hwndList)
    {
        ListView_SetItemState( hwndList, nIndex, bSet ? LVIS_CUT : 0, LVIS_CUT );
    }
}


/*****************************************************************************

   CVideoCaptureDialog::PopulateList

   Populates the listview with the current items.

 *****************************************************************************/

BOOL
CVideoCaptureDialog::PopulateList( CCameraItem *pOldParent )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
    int nSelItem = 0;
    if (hwndList)
    {
        ListView_DeleteAllItems( hwndList );
        int nItem = 0;
        CCameraItem *pCurr;

        //
        // If this is a child directory...
        //

        if (m_pCurrentParentItem)
        {
            //
            // Start adding children
            //

            pCurr = m_pCurrentParentItem->Children();

            //
            // Insert a dummy item that the user can use to
            // switch to the parent directory
            //

            LVITEM lvItem;
            ZeroMemory( &lvItem, sizeof(lvItem) );
            lvItem.iItem = nItem++;
            lvItem.mask = LVIF_IMAGE|LVIF_PARAM;
            lvItem.iImage = m_nParentFolderImageListIndex;
            lvItem.lParam = 0;
            ListView_InsertItem( hwndList, &lvItem );
        }
        else
        {
            //
            // if it's a parent directory...
            //

            pCurr = m_CameraItemList.Root();
        }

        while (pCurr)
        {
            if (pOldParent && *pCurr == *pOldParent)
            {
                nSelItem = nItem;
            }

            if (pCurr->DeleteState() != CCameraItem::Delete_Deleted)
            {
                LVITEM lvItem;
                ZeroMemory( &lvItem, sizeof(lvItem) );
                lvItem.iItem = nItem++;
                lvItem.mask = LVIF_IMAGE|LVIF_PARAM;
                lvItem.iImage = pCurr->ImageListIndex();
                lvItem.lParam = (LPARAM)pCurr;
                int nIndex = ListView_InsertItem( hwndList, &lvItem );
                if (nIndex >= 0 && pCurr->DeleteState() == CCameraItem::Delete_Pending)
                {
                    MarkItemDeletePending(nIndex,true);
                }
            }
            pCurr = pCurr->Next();
        }
    }

    //
    // If we've not calculated the width of the list in preview mode, attempt to do it
    //

    if (!m_nListViewWidth)
    {
        RECT rcItem;
        if (ListView_GetItemRect( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ), 0, &rcItem, LVIR_ICON ))
        {
            m_nListViewWidth = (rcItem.right-rcItem.left) + rcItem.left * 2 + GetSystemMetrics(SM_CXHSCROLL)  + c_nAdditionalMarginX;
        }
    }

    SetSelectedListItem(nSelItem);

    return TRUE;
}



/*****************************************************************************

   CVideoCaptureDialog::OnThumbnailStatus

   <Notes>

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnThumbnailStatus( WPARAM wParam, LPARAM lParam )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::OnThumbnailStatus"));
    WIA_TRACE((TEXT("Looking for the item with the ID %08X"),wParam));

    CCameraItem *pCameraItem = m_CameraItemList.Find( (DWORD)wParam );
    if (pCameraItem)
    {
        WIA_TRACE((TEXT("Found a CameraItem * (%08X)"),pCameraItem));
        HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
        if (hwndList)
        {
            WIA_TRACE((TEXT("Got the list control")));
            HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_NORMAL );
            if (hImageList)
            {
                WIA_TRACE((TEXT("Got the image list")));
                if ((HBITMAP)lParam)
                {
                    if (ImageList_Replace( hImageList, pCameraItem->ImageListIndex(), (HBITMAP)lParam, NULL ))
                    {
                        WIA_TRACE((TEXT("Replaced the image in the list")));
                        int nItem = FindItemInList(pCameraItem);
                        if (nItem >= 0)
                        {
                            LV_ITEM lvItem;
                            ::ZeroMemory(&lvItem,sizeof(LV_ITEM));
                            lvItem.iItem = nItem;
                            lvItem.mask = LVIF_IMAGE;
                            lvItem.iImage = pCameraItem->ImageListIndex();
                            ListView_SetItem( hwndList, &lvItem );
                            ListView_Update( hwndList, nItem );
                            InvalidateRect( hwndList, NULL, FALSE );
                        }
                    }
                }
            }
        }
    }

    //
    // Clean up the bitmap, regardless of any other failures, to avoid memory leaks
    //

    HBITMAP hBmpThumb = (HBITMAP)lParam;
    if (hBmpThumb)
    {
        DeleteObject(hBmpThumb);
    }

    return HANDLED_THREAD_MESSAGE;
}



/*****************************************************************************

   CVideoCaptureDialog::CreateThumbnails

   <Notes>

 *****************************************************************************/


void CVideoCaptureDialog::CreateThumbnails( CCameraItem *pRoot, HIMAGELIST hImageList, bool bForce )
{
    CCameraItem *pCurr = pRoot;
    while (pCurr)
    {
        if (pCurr->ImageListIndex()<0 || bForce)
        {
            //
            // Get the item name
            //
            CSimpleStringWide strItemName;
            PropStorageHelpers::GetProperty( pCurr->Item(), WIA_IPA_ITEM_NAME, strItemName );

            //
            // Create the title for the icon
            //
            CSimpleString strIconTitle;
            if (pCurr->IsFolder())
            {
                strIconTitle = CSimpleStringConvert::NaturalString(strItemName);
            }
            else if (strItemName.Length())
            {
                strIconTitle.Format( IDS_VIDDLG_DOWNLOADINGTHUMBNAIL, g_hInstance, CSimpleStringConvert::NaturalString(strItemName).String() );
            }

            //
            // Create the thumbnail
            //
            HBITMAP hBmp = WiaUiUtil::CreateIconThumbnail( GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ), m_sizeThumbnails.cx, m_sizeThumbnails.cy, g_hInstance, pCurr->IsFolder()?IDI_VIDDLG_FOLDER:IDI_VIDDLG_UNAVAILABLE, strIconTitle );
            if (hBmp)
            {
                if (pCurr->ImageListIndex()<0)
                {
                    pCurr->ImageListIndex(ImageList_Add( hImageList, hBmp, NULL ));
                }
                else
                {
                    pCurr->ImageListIndex(ImageList_Replace( hImageList, pCurr->ImageListIndex(), hBmp, NULL ));
                }
                DeleteObject(hBmp);
            }
        }
        if (pCurr->Children())
        {
            CreateThumbnails( pCurr->Children(), hImageList, bForce );
        }
        pCurr = pCurr->Next();
    }
}


/*****************************************************************************

   CVideoCaptureDialog::RequestThumbnails

   <Notes>

 *****************************************************************************/
VOID
CVideoCaptureDialog::RequestThumbnails( CCameraItem *pRoot )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::RequestThumbnails"));

    CCameraItem *pCurr = pRoot;

    while (pCurr)
    {
        if (!pCurr->IsFolder())
        {
            m_pThreadMessageQueue->Enqueue( new CThumbnailThreadMessage( m_hWnd, pCurr->GlobalInterfaceTableCookie(), m_sizeThumbnails ) );
        }

        if (pCurr->Children())
        {
            RequestThumbnails( pCurr->Children() );
        }

        pCurr = pCurr->Next();
    }
}


/*****************************************************************************

   CVideoCaptureDialog::CreateThumbnails

   <Notes>

 *****************************************************************************/

VOID
CVideoCaptureDialog::CreateThumbnails( BOOL bForce )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );

    if (hwndList)
    {
        HIMAGELIST hImageList = ListView_GetImageList( hwndList, LVSIL_NORMAL );
        if (hImageList)
        {
            //
            // Create the parent folder image and add it to the image list
            //
            HBITMAP hParentBitmap = WiaUiUtil::CreateIconThumbnail(
                hwndList,
                m_sizeThumbnails.cx,
                m_sizeThumbnails.cy,
                g_hInstance,
                IDI_VIDDLG_PARENTFOLDER,
                TEXT("(..)") );
            if (hParentBitmap)
            {
                m_nParentFolderImageListIndex = ImageList_Add( hImageList, hParentBitmap, NULL );
                DeleteObject(hParentBitmap);
            }

            //
            // Create all of the other images
            //
            CreateThumbnails( m_CameraItemList.Root(), hImageList, bForce != 0 );
        }
    }
}



/*****************************************************************************

   CVideoCaptureDialog::FindMaximumThumbnailSize

   Looks through entire item list to get larget thumbnail.

 *****************************************************************************/

BOOL
CVideoCaptureDialog::FindMaximumThumbnailSize( VOID )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCaptureDialog::FindMaximumThumbnailSize"));

    BOOL bResult = false;

    if (m_pDeviceDialogData && m_pDeviceDialogData->pIWiaItemRoot)
    {
        LONG nWidth, nHeight;
        if (PropStorageHelpers::GetProperty( m_pDeviceDialogData->pIWiaItemRoot, WIA_DPC_THUMB_WIDTH, nWidth ) &&
            PropStorageHelpers::GetProperty( m_pDeviceDialogData->pIWiaItemRoot, WIA_DPC_THUMB_WIDTH, nHeight ))
        {
            m_sizeThumbnails.cx = max(c_nMinThumbnailWidth,min(nWidth,c_nMaxThumbnailWidth));
            m_sizeThumbnails.cy = max(c_nMinThumbnailHeight,min(nHeight,c_nMaxThumbnailHeight));
        }
        else
        {
            WIA_TRACE((TEXT("FindMaximumThumbnailSize: Unable to retrieve thumbnail size for device")));
        }
    }
    return(bResult && m_sizeThumbnails.cx && m_sizeThumbnails.cy);
}


/*****************************************************************************

   CVideoCaptureDialog::EnumerateItems

   Enumerate all the items at this level of the camera.

 *****************************************************************************/

HRESULT
CVideoCaptureDialog::EnumerateItems( CCameraItem *pCurrentParent, IEnumWiaItem *pIEnumWiaItem )
{
    WIA_PUSHFUNCTION(TEXT("CCameraItemList::EnumerateItems"));
    HRESULT hr = E_FAIL;
    if (pIEnumWiaItem != NULL)
    {
        hr = pIEnumWiaItem->Reset();
        while (hr == S_OK)
        {
            CComPtr<IWiaItem> pIWiaItem;
            hr = pIEnumWiaItem->Next(1, &pIWiaItem, NULL);
            if (hr == S_OK)
            {
                CCameraItem *pNewCameraItem = new CCameraItem( pIWiaItem );
                if (pNewCameraItem && pNewCameraItem->Item())
                {
                    m_CameraItemList.Add( pCurrentParent, pNewCameraItem );

                    LONG    ItemType;
                    HRESULT hr2;

                    hr2 = pNewCameraItem->Item()->GetItemType(&ItemType);

                    if (SUCCEEDED(hr2))
                    {
                        if (ItemType & WiaItemTypeImage)
                        {
                            WIA_TRACE((TEXT("Found an image")));
                        }
                        else
                        {
                            WIA_TRACE((TEXT("Found something that is NOT an image")));
                        }

                        CComPtr <IEnumWiaItem> pIEnumChildItem;
                        hr2 = pIWiaItem->EnumChildItems(&pIEnumChildItem);
                        if (hr2 == S_OK)
                        {
                            EnumerateItems( pNewCameraItem, pIEnumChildItem );
                        }
                    }
                }
            }
        }
    }
    return hr;
}


/*****************************************************************************

   CVideoCaptureDialog::EnumerateAllCameraItems

   Enumerate all the items in camera, including folders.

 *****************************************************************************/

HRESULT CVideoCaptureDialog::EnumerateAllCameraItems(void)
{
    CComPtr<IEnumWiaItem> pIEnumItem;
    HRESULT hr = m_pDeviceDialogData->pIWiaItemRoot->EnumChildItems(&pIEnumItem);
    if (hr == S_OK)
    {
        hr = EnumerateItems( NULL, pIEnumItem );
    }
    return(hr);
}



/*****************************************************************************

   CVideoCaptureDialog::GetSelectionIndices

   Returns an array with the list indicies of the items that are
   selected in IDC_VIDDLG_THUMBNAILLIST

 *****************************************************************************/

INT
CVideoCaptureDialog::GetSelectionIndices( CSimpleDynamicArray<int> &aIndices )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );

    if (!hwndList)
    {
        return 0;
    }

    INT iCount = ListView_GetItemCount(hwndList);

    for (INT i=0; i<iCount; i++)
    {
        if (ListView_GetItemState(hwndList,i,LVIS_SELECTED) & LVIS_SELECTED)
        {
            aIndices.Append(i);
        }
    }

    return aIndices.Size();
}


/*****************************************************************************

   CVideoCaptureDialog::OnPostInit

   Handle the post WM_INIT processing that needs to take place.

 *****************************************************************************/

LRESULT CVideoCaptureDialog::OnPostInit( WPARAM, LPARAM )
{
    //
    // Create the progress dialog
    //
    CComPtr<IWiaProgressDialog> pWiaProgressDialog;
    HRESULT hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaProgressDialog, (void**)&pWiaProgressDialog );

    if (SUCCEEDED(hr))
    {
        //
        // Initialize the progress dialog
        //
        pWiaProgressDialog->Create( m_hWnd, WIA_PROGRESSDLG_ANIM_VIDEO_COMMUNICATE|WIA_PROGRESSDLG_NO_PROGRESS|WIA_PROGRESSDLG_NO_CANCEL|WIA_PROGRESSDLG_NO_TITLE );
        pWiaProgressDialog->SetTitle( CSimpleStringConvert::WideString(CSimpleString(IDS_VIDDLG_PROGDLG_TITLE,g_hInstance)));
        pWiaProgressDialog->SetMessage( CSimpleStringConvert::WideString(CSimpleString(IDS_VIDDLG_PROGDLG_MESSAGE,g_hInstance)));

        //
        // Show the progress dialog
        //
        pWiaProgressDialog->Show();

        if (m_pDeviceDialogData && m_pDeviceDialogData->pIWiaItemRoot && m_pWiaVideo)
        {
            CSimpleString strImagesDirectory;

            if (hr == S_OK)
            {
                BOOL bSuccess = FALSE;
                //
                // Get the IMAGES_DIRECTORY property from the Wia Video Driver.
                //

                bSuccess = PropStorageHelpers::GetProperty(m_pDeviceDialogData->pIWiaItemRoot, 
                                                           WIA_DPV_IMAGES_DIRECTORY, 
                                                           strImagesDirectory);

                if (!bSuccess)
                {
                    hr = E_FAIL;
                }
            }

            if (hr == S_OK)
            {
                WIAVIDEO_STATE VideoState = WIAVIDEO_NO_VIDEO;

                //
                // Get the current state of the WiaVideo object.  If we just created it
                // then the state will be NO_VIDEO, otherwise, it could already be previewing video,
                // in which case we shouldn't do anything.
                //
                hr = m_pWiaVideo->GetCurrentState(&VideoState);

                if (VideoState == WIAVIDEO_NO_VIDEO)
                {
                    //
                    // Set the directory we want to save our images to.  We got the image directory
                    // from the Wia Video Driver IMAGES_DIRECTORY property
                    //
                    if (hr == S_OK)
                    {
                        hr = m_pWiaVideo->put_ImagesDirectory(CSimpleBStr(strImagesDirectory));
                    }

                    //
                    // Create the video preview as a child of the IDC_VIDSEL_PREVIEW dialog item
                    // and automatically begin playback after creating the preview.
                    //
                    if (hr == S_OK)
                    {
                        hr = m_pWiaVideo->CreateVideoByWiaDevID(CSimpleBStr(m_strwDeviceId),
                                                                GetDlgItem( m_hWnd, IDC_VIDDLG_PREVIEW ),
                                                                FALSE,
                                                                TRUE);
                    }
                }
            }
            
            if (hr != S_OK)
            {

                //
                // Let the user know that the graph is most likely already
                // in use...
                //

                MessageBox( m_hWnd,
                            CSimpleString(IDS_VIDDLG_BUSY_TEXT,  g_hInstance),
                            CSimpleString(IDS_VIDDLG_BUSY_TITLE, g_hInstance),
                            MB_OK | MB_ICONWARNING | MB_SETFOREGROUND
                          );

                //
                // Disable the capture button since we have no graph
                //

                MyEnableWindow( GetDlgItem(m_hWnd,IDC_VIDDLG_CAPTURE), FALSE );


            }
        }

        //
        // Go get all the items..
        //
        EnumerateAllCameraItems();
        FindMaximumThumbnailSize();

        //
        // Initialize Thumbnail Listview control
        //
        HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
        if (hwndList)
        {
            ListView_SetExtendedListViewStyleEx( hwndList,
                                                 LVS_EX_BORDERSELECT|LVS_EX_HIDELABELS,
                                                 LVS_EX_BORDERSELECT|LVS_EX_HIDELABELS
                                               );

            m_hImageList = ImageList_Create( m_sizeThumbnails.cx,
                                             m_sizeThumbnails.cy,
                                             ILC_COLOR24|ILC_MIRROR, 1, 1
                                           );
            if (m_hImageList)
            {
                ListView_SetImageList( hwndList,
                                       m_hImageList,
                                       LVSIL_NORMAL
                                     );

                ListView_SetIconSpacing( hwndList,
                                         m_sizeThumbnails.cx + c_nAdditionalMarginX,
                                         m_sizeThumbnails.cy + c_nAdditionalMarginY
                                       );
            }
        }

        CreateThumbnails();

        //
        // This causes the list to be populated
        //

        ChangeFolder(NULL);

        HandleSelectionChange();

        RequestThumbnails( m_CameraItemList.Root() );

        //
        // Close the progress dialog
        //
        pWiaProgressDialog->Destroy();
    }
    return(0);
}



/*****************************************************************************

   CVideoCaptureDialog::FindItemInList

   <Notes>

 *****************************************************************************/



INT CVideoCaptureDialog::FindItemInList( CCameraItem *pItem )
{
    if (pItem)
    {
        HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
        if (hwndList)
        {
            for (int i=0;i<ListView_GetItemCount(hwndList);i++)
            {
                if (pItem == GetListItemNode(i))
                {
                    return i;
                }
            }
        }
    }

    return -1;
}



/*****************************************************************************

   CVideoCaptureDialog::GetListItemNode

   <Notes>

 *****************************************************************************/

CCameraItem *
CVideoCaptureDialog::GetListItemNode( int nIndex )
{
    HWND hwndList = GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST );
    if (!hwndList)
    {
        return NULL;
    }


    LV_ITEM lvItem;
    ::ZeroMemory(&lvItem,sizeof(LV_ITEM));
    lvItem.mask = LVIF_PARAM;
    lvItem.iItem = nIndex;
    if (!ListView_GetItem( hwndList, &lvItem ))
    {
        return NULL ;
    }

    return((CCameraItem *)lvItem.lParam);
}



/*****************************************************************************

   CVideoCaptureDialog::ChangeFolder

   Change the current folder being viewed

 *****************************************************************************/

BOOL
CVideoCaptureDialog::ChangeFolder( CCameraItem *pNode )
{
    CCameraItem *pOldParent = m_pCurrentParentItem;
    m_pCurrentParentItem = pNode;

    return PopulateList(pOldParent);
}


/*****************************************************************************

   CVideoCaptureDialog::OnChangeToParent

   <Notes>

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnChangeToParent( WPARAM, LPARAM )
{
    if (m_pCurrentParentItem)
    {
        ChangeFolder(m_pCurrentParentItem->Parent());
    }

    return(0);
}



/*****************************************************************************

   CVideoCaptureDialog::HandleSelectionChange

   <Notes>

 *****************************************************************************/

VOID
CVideoCaptureDialog::HandleSelectionChange( VOID )
{
    CWaitCursor wc;
    INT nSelCount  = ListView_GetSelectedCount(GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ) );
    INT nItemCount = ListView_GetItemCount(GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ) );

    //
    // OK should be disabled for 0 items
    //

    MyEnableWindow( GetDlgItem(m_hWnd,IDOK), nSelCount != 0 );

    //
    // Select all should be disabled for 0 items
    //
    MyEnableWindow( GetDlgItem(m_hWnd,IDC_VIDDLG_SELECTALL), nItemCount != 0 );

}

/*****************************************************************************

   CVideoCaptureDialog::OnTimer

   Handle WM_TIMER messages

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnTimer( WPARAM wParam, LPARAM )
{
    /*
    switch (wParam)
    {
    case IDT_UPDATEPREVIEW:
        {
            KillTimer( m_hWnd, IDT_UPDATEPREVIEW );
            UpdatePreview();
        }
        break;
    }
    */
    return(0);
}



/*****************************************************************************

   CVideoCaptureDialog::OnNewItemEvent

   This gets called when get an event from the driver that a new item has
   been created.

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnNewItemEvent( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnNewItemEvent")));

    //
    // Make sure we have a valid item name
    //
    BSTR bstrFullItemName = reinterpret_cast<BSTR>(lParam);
    if (!bstrFullItemName)
    {
        WIA_TRACE((TEXT("bstrFullItemName was NULL")));
        return 0;
    }
    
    //
    // Check to see if the item is already in our list
    //
    CCameraItem *pListItem = m_CameraItemList.Find(bstrFullItemName);
    if (!pListItem)
    {
        if (m_pDeviceDialogData && m_pDeviceDialogData->pIWiaItemRoot)
        {
            WIA_TRACE((TEXT("Finding new item in device")));

            //
            // Get an IWiaItem ptr to new item
            //
            CComPtr<IWiaItem> pItem;
            HRESULT hr = m_pDeviceDialogData->pIWiaItemRoot->FindItemByName(0,bstrFullItemName,&pItem);
            WIA_CHECK_HR(hr,"pWiaItemRoot->FindItemByName()");

            if (SUCCEEDED(hr) && pItem)
            {
                //
                // Add the item to the list
                //
                AddItemToListView( pItem );

                //
                // Make sure we update controls' states
                //
                HandleSelectionChange();
            }
            else
            {
                WIA_ERROR((TEXT("FindItemByName returned NULL pItem")));
            }
        }
        else
        {
            WIA_ERROR((TEXT("m_pDeviceDialogData or m_pDeviceDialogData->pIWiaItemRoot were NULL")));
        }
    }
    else
    {
        WIA_TRACE((TEXT("We found the item is already in our list, doing nothing")));
    }

    //
    // Free the item name
    //
    SysFreeString(bstrFullItemName);

    return HANDLED_THREAD_MESSAGE;
}

/*****************************************************************************

   CVideoCaptureDialog::OnDeleteItemEvent

   This gets called when we get an event from the driver that an item has
   been deleted.

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnDeleteItemEvent( WPARAM, LPARAM lParam )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnDeleteItemEvent")));

    CSimpleBStr bstrFullItem = reinterpret_cast<BSTR>(lParam);
    SysFreeString( reinterpret_cast<BSTR>(lParam) );

    WIA_TRACE((TEXT("The deleted item is %s"),CSimpleStringConvert::NaturalString(CSimpleStringWide(bstrFullItem)).String()));

    CCameraItem *pDeletedItem = m_CameraItemList.Find(bstrFullItem);

    if (pDeletedItem)
    {
        //
        // If we're deleting the current parent item,
        // select a new one.
        //

        if (pDeletedItem == m_pCurrentParentItem)
        {
            ChangeFolder(m_pCurrentParentItem->Parent());
        }

        int nIndex = FindItemInList(pDeletedItem);
        if (nIndex >= 0)
        {
            //
            // Remove the item from the listview
            //

            ListView_DeleteItem(GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ),nIndex);

            //
            // Make sure we leave something selected
            //

            if (!ListView_GetSelectedCount(GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST )))
            {
                int nItemCount = ListView_GetItemCount(GetDlgItem( m_hWnd, IDC_VIDDLG_THUMBNAILLIST ));
                if (nItemCount)
                {
                    if (nIndex >= nItemCount)
                    {
                        nIndex = nItemCount-1;
                    }

                    SetSelectedListItem(nIndex);
                }
            }
            
            //
            // Make sure we update controls' states
            //
            HandleSelectionChange();
        }
        else
        {
            WIA_ERROR((TEXT("FindItemInList coulnd't find the item")));
        }

        //
        // Mark the item as deleted.
        //

        pDeletedItem->DeleteState( CCameraItem::Delete_Deleted );

    }
    else
    {
        WIA_ERROR((TEXT("The item could not be found in m_CameraItemList")));
    }

    return HANDLED_THREAD_MESSAGE;
}

/*****************************************************************************

   CVideoCaptureDialog::OnDeviceDisconnect

   This gets called when we get an event from the driver that device has
   been disconnected.

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnDeviceDisconnect( WPARAM, LPARAM )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCaptureDialog::OnDeviceDisconnect")));

    //
    // Close the dialog with the approriate error
    //

    EndDialog( m_hWnd, WIA_ERROR_OFFLINE );

    return 0;
}

/*****************************************************************************

   CVideoCaptureDialog::GetGraphWindowHandle

   Find the window handle of the video window

 *****************************************************************************/
HWND
CVideoCaptureDialog::GetGraphWindowHandle(void)
{
    HWND hWndGraphParent = GetDlgItem( m_hWnd, IDC_VIDDLG_PREVIEW );
    if (hWndGraphParent)
    {
        return FindWindowEx( hWndGraphParent, NULL, TEXT("VideoRenderer"), NULL );
    }
    return NULL;
}

/*****************************************************************************

   CCameraAcquireDialog::OnContextMenu

   Message handler for WM_HELP message

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnHelp( WPARAM wParam, LPARAM lParam )
{
    HELPINFO *pHelpInfo = reinterpret_cast<HELPINFO*>(lParam);
    if (pHelpInfo && HELPINFO_WINDOW==pHelpInfo->iContextType && GetGraphWindowHandle()==pHelpInfo->hItemHandle)
    {
        pHelpInfo->hItemHandle = GetDlgItem( m_hWnd, IDC_VIDDLG_PREVIEW );
    }
    return WiaHelp::HandleWmHelp( wParam, lParam, g_HelpIDs );
}


/*****************************************************************************

   CCameraAcquireDialog::OnContextMenu

   Message handler for right-mouse-button click

 *****************************************************************************/

LRESULT
CVideoCaptureDialog::OnContextMenu( WPARAM wParam, LPARAM lParam )
{
    if (GetGraphWindowHandle() == reinterpret_cast<HWND>(wParam))
    {
        wParam = reinterpret_cast<WPARAM>(GetDlgItem( m_hWnd, IDC_VIDDLG_PREVIEW ));
    }
    return WiaHelp::HandleWmContextMenu( wParam, lParam, g_HelpIDs );
}

/*****************************************************************************

   CVideoCaptureDialog::DialogProc

   Dialog proc for video capture dialog

 *****************************************************************************/

INT_PTR PASCAL CVideoCaptureDialog::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CVideoCaptureDialog)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG,          OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_SIZE,                OnSize );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND,             OnCommand );
        SC_HANDLE_DIALOG_MESSAGE( WM_NOTIFY,              OnNotify );
        SC_HANDLE_DIALOG_MESSAGE( WM_GETMINMAXINFO,       OnGetMinMaxInfo );
        SC_HANDLE_DIALOG_MESSAGE( WM_DESTROY,             OnDestroy );
        SC_HANDLE_DIALOG_MESSAGE( WM_SHOWWINDOW,          OnShow );
        SC_HANDLE_DIALOG_MESSAGE( WM_TIMER,               OnTimer );
        SC_HANDLE_DIALOG_MESSAGE( WM_HELP,                OnHelp );
        SC_HANDLE_DIALOG_MESSAGE( WM_CONTEXTMENU,         OnContextMenu );
        SC_HANDLE_DIALOG_MESSAGE( PWM_POSTINIT,           OnPostInit );
        SC_HANDLE_DIALOG_MESSAGE( PWM_CHANGETOPARENT,     OnChangeToParent );
        SC_HANDLE_DIALOG_MESSAGE( PWM_THUMBNAILSTATUS,    OnThumbnailStatus );
        SC_HANDLE_DIALOG_MESSAGE( VD_NEW_ITEM,            OnNewItemEvent );
        SC_HANDLE_DIALOG_MESSAGE( VD_DELETE_ITEM,         OnDeleteItemEvent );
        SC_HANDLE_DIALOG_MESSAGE( VD_DEVICE_DISCONNECTED, OnDeviceDisconnect );
    }
    SC_END_DIALOG_MESSAGE_HANDLERS();
}



/*****************************************************************************

   CVideoCallback::CVideoCallback

   Constructor for class

 *****************************************************************************/

CVideoCallback::CVideoCallback()
  : m_cRef(1),
    m_hWnd(NULL)
{
    WIA_PUSHFUNCTION((TEXT("CVideoCallback::CVideoCallback()")));
}


/*****************************************************************************

   CVideoCallback::Initialize

   Let us set which hwnd to notify when events come

 *****************************************************************************/

STDMETHODIMP
CVideoCallback::Initialize( HWND hWnd )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCallback::Initialize()")));

    m_hWnd = hWnd;

    return S_OK;
}


/*****************************************************************************

   CVideoCallback::AddRef

   Standard COM

 *****************************************************************************/

STDMETHODIMP_(ULONG)
CVideoCallback::AddRef( VOID )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCallback::AddRef")));
    return(InterlockedIncrement(&m_cRef));
}


/*****************************************************************************

   CVideoCallback::Release

   Standard COM

 *****************************************************************************/

STDMETHODIMP_(ULONG)
CVideoCallback::Release( VOID )
{
    WIA_PUSHFUNCTION(TEXT("CVideoCallback::Release"));
    LONG nRefCount = InterlockedDecrement(&m_cRef);
    if (!nRefCount)
    {
        delete this;
    }
    return(nRefCount);

}


/*****************************************************************************

   CVideoCallback::QueryInterface

   Standard COM

 *****************************************************************************/

STDMETHODIMP
CVideoCallback::QueryInterface( REFIID riid, LPVOID *ppvObject )
{
    WIA_PUSHFUNCTION((TEXT("CVideoCallback::QueryInterface")));

    HRESULT hr = S_OK;

    if (ppvObject)
    {
        if (IsEqualIID( riid, IID_IUnknown ))
        {
            WIA_TRACE((TEXT("Supported RIID asked for was IID_IUnknown")));
            *ppvObject = static_cast<IUnknown*>(this);
            reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
        }
        else if (IsEqualIID( riid, IID_IWiaEventCallback ))
        {
            WIA_TRACE((TEXT("Supported RIID asked for was IID_IWiaEventCallback")));
            *ppvObject = static_cast<IWiaEventCallback*>(this);
            reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
        }
        else
        {
            WIA_PRINTGUID((riid,TEXT("Unsupported interface!")));
            *ppvObject = NULL;
            hr = E_NOINTERFACE;
        }

    }
    else
    {
        hr = E_INVALIDARG;
    }

    WIA_RETURN_HR(hr);
}



/*****************************************************************************

   CVideoCallback::ImageEventCallback

   WIA callback interface for events.

 *****************************************************************************/

STDMETHODIMP
CVideoCallback::ImageEventCallback( const GUID *pEventGUID,
                                    BSTR  bstrEventDescription,
                                    BSTR  bstrDeviceID,
                                    BSTR  bstrDeviceDescription,
                                    DWORD dwDeviceType,
                                    BSTR  bstrFullItemName,
                                    ULONG *pulEventType,
                                    ULONG ulReserved)
{

    WIA_PUSHFUNCTION((TEXT("CVideoCallback::ImageEventCallback")));

    HRESULT hr = S_OK;

    if (pEventGUID)
    {
        if (IsEqualGUID( *pEventGUID, WIA_EVENT_ITEM_CREATED ))
        {
            WIA_TRACE((TEXT("Got WIA_EVENT_ITEM_CREATED")));

            BSTR bstrToSend = SysAllocString( bstrFullItemName );

            LRESULT lRes = SendMessage( m_hWnd, VD_NEW_ITEM, 0, reinterpret_cast<LPARAM>(bstrToSend) );
            if (HANDLED_THREAD_MESSAGE != lRes && bstrToSend)
            {
                SysFreeString( bstrToSend );
            }

        }
        else if (IsEqualGUID( *pEventGUID, WIA_EVENT_ITEM_DELETED ))
        {
            WIA_TRACE((TEXT("Got WIA_EVENT_ITEM_DELETED")));

            BSTR bstrToSend = SysAllocString( bstrFullItemName );

            LRESULT lRes = SendMessage( m_hWnd, VD_DELETE_ITEM, 0, reinterpret_cast<LPARAM>(bstrToSend) );
            if (HANDLED_THREAD_MESSAGE != lRes && bstrToSend)
            {
                SysFreeString( bstrToSend );
            }

        }
        else if (IsEqualGUID( *pEventGUID, WIA_EVENT_DEVICE_DISCONNECTED ))
        {
            PostMessage( m_hWnd, VD_DEVICE_DISCONNECTED, 0, 0 );
        }
        else
        {
            WIA_ERROR((TEXT("Got an event other that what we registered for!")));
        }
    }


    WIA_RETURN_HR(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\wiauiext.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIAUIEXT.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/17/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <atlimpl.cpp>
#include "wiauiext.h"
#include "wiadefui.h"
#include "wiascand.h"
#include "wiacamd.h"
#include "wiavidd.h"
#include "wiaffmt.h"

CWiaDefaultUI::~CWiaDefaultUI(void)
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::~CWiaDefaultUI"));
    DllRelease();
}


CWiaDefaultUI::CWiaDefaultUI()
  : m_cRef(1),
    m_pSecondaryCallback(NULL),
    m_nDefaultFormat(0),
    m_hWndProgress(NULL)
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::CWiaDefaultUI"));
    DllAddRef();
}

STDMETHODIMP CWiaDefaultUI::QueryInterface( REFIID riid, LPVOID *ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::QueryInterface"));
    if (IsEqualIID( riid, IID_IUnknown ))
    {
        *ppvObject = static_cast<IWiaUIExtension*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaUIExtension ))
    {
        *ppvObject = static_cast<IWiaUIExtension*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaTransferHelper ))
    {
        *ppvObject = static_cast<IWiaTransferHelper*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaDataCallback ))
    {
        *ppvObject = static_cast<IWiaDataCallback*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaSupportedFormats ))
    {
        *ppvObject = static_cast<IWiaSupportedFormats*>(this);
    }
    else if (IsEqualIID( riid, IID_IShellExtInit ))
    {
        *ppvObject = static_cast<IShellExtInit*>(this);
    }
    else if (IsEqualIID( riid, IID_IShellPropSheetExt ))
    {
        *ppvObject = static_cast<IShellPropSheetExt*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaMiscellaneousHelpers ))
    {
        *ppvObject = static_cast<IWiaMiscellaneousHelpers*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaGetImageDlg ))
    {
        *ppvObject = static_cast<IWiaGetImageDlg*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaProgressDialog ))
    {
        *ppvObject = static_cast<IWiaProgressDialog*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaAnnotationHelpers ))
    {
        *ppvObject = static_cast<IWiaAnnotationHelpers*>(this);
    }
    else if (IsEqualIID( riid, IID_IWiaScannerPaperSizes))
    {
        *ppvObject = static_cast<IWiaScannerPaperSizes*>(this);
    }
    else
    {
        *ppvObject = NULL;
        return (E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CWiaDefaultUI::AddRef()
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::AddRef"));
    return(InterlockedIncrement(&m_cRef));
}


STDMETHODIMP_(ULONG) CWiaDefaultUI::Release()
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::Release"));
    LONG nRefCount = InterlockedDecrement(&m_cRef);
    if (!nRefCount)
    {
        delete this;
    }
    return(nRefCount);
}

STDMETHODIMP CWiaDefaultUI::DeviceDialog( PDEVICEDIALOGDATA pDeviceDialogData )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::DeviceDialog"));
    if (!pDeviceDialogData)
    {
        return (E_INVALIDARG);
    }
    if (IsBadWritePtr(pDeviceDialogData,sizeof(DEVICEDIALOGDATA)))
    {
        return (E_INVALIDARG);
    }
    if (pDeviceDialogData->cbSize != sizeof(DEVICEDIALOGDATA))
    {
        return (E_INVALIDARG);
    }
    if (!pDeviceDialogData->pIWiaItemRoot)
    {
        return (E_INVALIDARG);
    }

    LONG nDeviceType;
    if (!PropStorageHelpers::GetProperty( pDeviceDialogData->pIWiaItemRoot, WIA_DIP_DEV_TYPE, nDeviceType ))
    {
        return (E_INVALIDARG);
    }

    // In case there is some new device for which we don't have UI
    HRESULT hr = E_NOTIMPL;

    if (StiDeviceTypeDigitalCamera==GET_STIDEVICE_TYPE(nDeviceType))
    {
        hr = CameraDeviceDialog( pDeviceDialogData );
    }
    else if (StiDeviceTypeScanner==GET_STIDEVICE_TYPE(nDeviceType))
    {
        hr = ScannerDeviceDialog( pDeviceDialogData );
    }
    else if (StiDeviceTypeStreamingVideo==GET_STIDEVICE_TYPE(nDeviceType))
    {
        hr = VideoDeviceDialog( pDeviceDialogData );
    }

    return (hr);
}

STDMETHODIMP CWiaDefaultUI::GetDeviceIcon( LONG nDeviceType, HICON *phIcon, int nSize )
{
    // Check args
    if (!phIcon)
    {
        return E_POINTER;
    }

    //
    // Supply a default icon size if none is specified
    //
    if (!nSize)
    {
        nSize = GetSystemMetrics( SM_CXICON );
    }

    //
    // Initialize the returned icon
    //
    *phIcon = NULL;

    // Assume a generic device
    int nIconId = IDI_GENERICDEVICE;

    // 
    // Get device-specific icon
    //
    if (StiDeviceTypeScanner==GET_STIDEVICE_TYPE(nDeviceType))
    {
        nIconId = IDI_SCANNER;
    }
    else if (StiDeviceTypeDigitalCamera==GET_STIDEVICE_TYPE(nDeviceType))
    {
        nIconId = IDI_CAMERA;
    }
    else if (StiDeviceTypeStreamingVideo==GET_STIDEVICE_TYPE(nDeviceType))
    {
        nIconId = IDI_VIDEODEVICE;
    }

    //
    // Load the icon
    //
    *phIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(nIconId), IMAGE_ICON, nSize, nSize, LR_DEFAULTCOLOR ));
    if (!*phIcon)
    {
        return HRESULT_FROM_WIN32(GetLastError());
    }

    //
    // It worked ok
    //
    return (S_OK);                     
}

STDMETHODIMP CWiaDefaultUI::GetAnnotationOverlayIcon( CAnnotationType AnnotationType, HICON *phIcon, int nSize )
{
    if (!phIcon)
    {
        return E_INVALIDARG;
    }

    HICON hIcon = NULL;

    *phIcon = NULL;

    switch (AnnotationType)
    {
    case AnnotationAudio:
        hIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDI_ANNOTATION_AUDIO), IMAGE_ICON, nSize, nSize, LR_DEFAULTCOLOR ));
        break;

    case AnnotationUnknown:
        hIcon = reinterpret_cast<HICON>(LoadImage( g_hInstance, MAKEINTRESOURCE(IDI_ANNOTATION_UNKNOWN), IMAGE_ICON, nSize, nSize, LR_DEFAULTCOLOR ));
        break;
    }

    if (hIcon)
    {
        *phIcon = CopyIcon(hIcon);
    }
    return *phIcon ? S_OK : E_FAIL;
}

STDMETHODIMP CWiaDefaultUI::GetAnnotationType( IUnknown *pUnknown, CAnnotationType &AnnotationType )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::GetAnnotationType"));
    if (!pUnknown)
    {
        return E_INVALIDARG;
    }

    //
    // Assume no annotations
    //
    AnnotationType = AnnotationNone;

    //
    // Get an IWiaItem*
    //
    CComPtr<IWiaItem> pWiaItem;
    HRESULT hr = pUnknown->QueryInterface( IID_IWiaItem, (void**)&pWiaItem );
    if (SUCCEEDED(hr))
    {
        //
        // Low-hanging fruit: audio stored as a property--just return audio.  It is unlikely that a driver would
        // have both types of annotation.
        //
        LONG nAudioAvailable = FALSE;
        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPC_AUDIO_AVAILABLE, nAudioAvailable ) && nAudioAvailable)
        {
            AnnotationType = AnnotationAudio;
            return S_OK;
        }

        //
        // Get the item type
        //
        LONG nItemType = 0;
        hr = pWiaItem->GetItemType(&nItemType);
        if (SUCCEEDED(hr))
        {
            //
            // If an item has the WiaItemTypeHasAttachments item type flag set, we know it has some attachments...
            //
            if (nItemType & WiaItemTypeHasAttachments)
            {
                //
                // Assume we don't have any audio attachments
                //
                AnnotationType = AnnotationUnknown;

                //
                // Enumerate the children and look at the item types
                //
                CComPtr<IEnumWiaItem> pEnumWiaItem;
                hr = pWiaItem->EnumChildItems( &pEnumWiaItem );
                if (SUCCEEDED(hr))
                {
                    //
                    // We will break out of the enumeration loop as soon as we find an audio file
                    //
                    bool bDone = false;

                    CComPtr<IWiaItem> pWiaItem;
                    while (S_OK == pEnumWiaItem->Next(1,&pWiaItem,NULL) && !bDone)
                    {
                        //
                        // Get the preferred format for this item.
                        //
                        GUID guidDefaultFormat = IID_NULL;
                        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_PREFERRED_FORMAT, guidDefaultFormat ))
                        {
                            WIA_PRINTGUID((guidDefaultFormat,TEXT("guidDefaultFormat")));
                            //
                            // If we find even one audio attachment, we will promote this to
                            // be the default for UI purposes.
                            //
                            if (CWiaFileFormat::IsKnownAudioFormat(guidDefaultFormat))
                            {
                                //
                                // Save the annotation type
                                //
                                AnnotationType = AnnotationAudio;
                                
                                //
                                // This will cause the while loop to exit
                                //
                                bDone = true;
                            }
                        }

                        //
                        // Release this interface
                        //
                        pWiaItem = NULL;
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("EnumChildItems failed")));
                }
            }
            else
            {
                WIA_TRACE((TEXT("This item has no attachments.  ItemType: %08X"), nItemType ));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("Unable to get the item type")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("Can't get an IWiaItem*")));
    }
    WIA_TRACE((TEXT("Returning an annotation type of %d"), AnnotationType ));
    return hr;
}

STDMETHODIMP CWiaDefaultUI::GetAnnotationFormat( IUnknown *pUnknown, GUID &guidFormat )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::GetAnnotationFormat"));
    
    //
    // Validate args
    //
    if (!pUnknown)
    {
        return E_INVALIDARG;
    }

    //
    // Assume this is not a valid annotation
    //
    guidFormat = IID_NULL;

    //
    // Get an IWiaItem*
    //
    CComPtr<IWiaItem> pWiaItem;
    HRESULT hr = pUnknown->QueryInterface( IID_IWiaItem, (void**)&pWiaItem );
    if (SUCCEEDED(hr))
    {
        //
        // First, check to see if this item is an image with an audio annotation property
        //
        LONG nAudioAvailable = FALSE;
        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPC_AUDIO_AVAILABLE, nAudioAvailable ) && nAudioAvailable)
        {
            //
            // If the driver supplied the format, use this
            //
            GUID guidAudioDataFormat = IID_NULL;
            if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPC_AUDIO_DATA_FORMAT, guidAudioDataFormat ))
            {
                guidFormat = guidAudioDataFormat;
            }
            //
            // Otherwise, assume it is WAV data
            //
            else
            {
                guidFormat = WiaAudFmt_WAV;
            }
        }

        else
        {
            //
            // Otherwise, this must be an attachment item.  Use the helper interface to get the default format
            //
            CComPtr<IWiaSupportedFormats> pWiaSupportedFormats;
            hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaSupportedFormats, (void**)&pWiaSupportedFormats );
            if (SUCCEEDED(hr))
            {
                //
                // This is always for file output
                //
                hr = pWiaSupportedFormats->Initialize( pWiaItem, TYMED_FILE );
                if (SUCCEEDED(hr))
                {
                    //
                    // Get the default format
                    //
                    GUID guidDefaultFormat = IID_NULL;
                    hr = pWiaSupportedFormats->GetDefaultClipboardFileFormat( &guidDefaultFormat );
                    if (SUCCEEDED(hr))
                    {
                        guidFormat = guidDefaultFormat;
                    }
                    else
                    {
                        WIA_PRINTHRESULT((hr,TEXT("pWiaSupportedFormats->GetDefaultClipboardFileFormat failed")));
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("pWiaSupportedFormats->Initialize failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("CoCreateInstance on CLSID_WiaDefaultUi, IID_IWiaSupportedFormats failed")));
            }
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("Can't get an IWiaItem*")));
    }
    
    //
    // If this is not a valid annotation, make sure we return an error.
    //
    if (SUCCEEDED(hr) && IID_NULL == guidFormat)
    {
        hr = E_FAIL;
        WIA_PRINTHRESULT((hr,TEXT("guidFormat was IID_NULL")));
    }

    return hr;
}

STDMETHODIMP CWiaDefaultUI::GetAnnotationSize( IUnknown *pUnknown, LONG &nSize, LONG nMediaType )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::GetAnnotationSize"));
   
    //
    // Validate args
    //
    if (!pUnknown)
    {
        return E_INVALIDARG;
    }

    //
    // Assume this is not a valid annotation
    //
    nSize = 0;

    //
    // Get an IWiaItem*
    //
    CComPtr<IWiaItem> pWiaItem;
    HRESULT hr = pUnknown->QueryInterface( IID_IWiaItem, (void**)&pWiaItem );
    if (SUCCEEDED(hr))
    {
        //
        // First, check to see if this item is an image with an audio annotation property
        //
        LONG nAudioAvailable = FALSE;
        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPC_AUDIO_AVAILABLE, nAudioAvailable ) && nAudioAvailable)
        {
            //
            // Get the sound property to obtain its size
            //
            CComPtr<IWiaPropertyStorage> pWiaPropertyStorage;
            hr = pWiaItem->QueryInterface( IID_IWiaPropertyStorage, (void**)(&pWiaPropertyStorage) );
            if (SUCCEEDED(hr))
            {
                PROPVARIANT PropVar[1];
                PROPSPEC    PropSpec[1];

                PropSpec[0].ulKind = PRSPEC_PROPID;
                PropSpec[0].propid = WIA_IPC_AUDIO_DATA;

                hr = pWiaPropertyStorage->ReadMultiple( ARRAYSIZE(PropSpec), PropSpec, PropVar );
                if (SUCCEEDED(hr))
                {
                    nSize = PropVar[0].caub.cElems;
                }

                FreePropVariantArray( ARRAYSIZE(PropVar), PropVar );
            }
        }
        else
        {
            //
            // Save the old media type
            //
            LONG nOldMediaType = 0;
            if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_TYMED, nOldMediaType ))
            {
                //
                // Set the requested media type
                //
                if (PropStorageHelpers::SetProperty( pWiaItem, WIA_IPA_TYMED, nMediaType ))
                {
                    //
                    // Get the item size
                    //
                    PropStorageHelpers::GetProperty( pWiaItem, WIA_IPA_ITEM_SIZE, nSize );
                }

                //
                // Restore the old media type
                //
                PropStorageHelpers::SetProperty( pWiaItem, WIA_IPA_TYMED, nOldMediaType );
            }
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("Can't get a IWiaItem*")));
    }
    
    //
    // If this is not a valid annotation, make sure we return an error.
    //
    if (SUCCEEDED(hr) && nSize == 0)
    {
        hr = E_FAIL;
        WIA_PRINTHRESULT((hr,TEXT("nSize was 0")));
    }

    return hr;
}

class CAttachmentMemoryCallback : public IWiaDataCallback
{
private:
    PBYTE m_pBuffer;
    DWORD m_dwSize;
    DWORD m_dwCurr;

private:
    //
    // Not implemented
    //
    CAttachmentMemoryCallback(void);
    CAttachmentMemoryCallback( const CAttachmentMemoryCallback & );
    CAttachmentMemoryCallback &operator=( const CAttachmentMemoryCallback & );

public:
    CAttachmentMemoryCallback( PBYTE pBuffer, DWORD dwSize )
      : m_pBuffer(pBuffer),
        m_dwSize(dwSize),
        m_dwCurr(0)
    {
    }
    ~CAttachmentMemoryCallback(void)
    {
        m_pBuffer = NULL;
        m_dwSize = NULL;
    }

    STDMETHODIMP QueryInterface(const IID& iid, void** ppvObject)
    {
        if ((iid==IID_IUnknown) || (iid==IID_IWiaDataCallback))
        {
            *ppvObject = static_cast<LPVOID>(this);
        }
        else
        {
            *ppvObject = NULL;
            return(E_NOINTERFACE);
        }
        reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
        return(S_OK);
    }

    STDMETHODIMP_(ULONG) AddRef()
    {
        return 1;
    }

    STDMETHODIMP_(ULONG) Release()
    {
        return 1;
    }
    
    STDMETHODIMP BandedDataCallback( LONG lReason, LONG lStatus, LONG lPercentComplete, LONG lOffset, LONG lLength, LONG lReserved, LONG lResLength, PBYTE pbBuffer )
    {
        WIA_PUSH_FUNCTION((TEXT("CAttachmentMemoryCallback::BandedDataCallback( lReason: %08X, lStatus: %08X, lPercentComplete: %08X, lOffset: %08X, lLength: %08X, lReserved: %08X, lResLength: %08X, pbBuffer: %p )"), lReason, lStatus, lPercentComplete, lOffset, lLength, lReserved, lResLength, pbBuffer ));
        if (lReason == IT_MSG_DATA)
        {
            if (lStatus & IT_STATUS_TRANSFER_TO_CLIENT)
            {
                if (lLength + m_dwCurr <= m_dwSize)
                {
                    CopyMemory( m_pBuffer+m_dwCurr, pbBuffer, lLength );
                    m_dwCurr += lLength;
                }
            }
        }
        return S_OK;
    }
};

STDMETHODIMP CWiaDefaultUI::TransferAttachmentToMemory( IUnknown *pUnknown, GUID &guidFormat, HWND hWndProgressParent, PBYTE *ppBuffer, DWORD *pdwSize )
{
    //
    // Validate args
    //
    if (!pUnknown || !ppBuffer || !pdwSize)
    {
        return E_INVALIDARG;
    }

    //
    // Initialize args
    //
    *ppBuffer = NULL;
    *pdwSize = 0;

    CComPtr<IWiaItem> pWiaItem;
    HRESULT hr = pUnknown->QueryInterface( IID_IWiaItem, (void**)&pWiaItem );
    if (SUCCEEDED(hr))
    {
        //
        // First, check to see if this item is an image with an audio annotation property
        //
        LONG nAudioAvailable = FALSE;
        if (PropStorageHelpers::GetProperty( pWiaItem, WIA_IPC_AUDIO_AVAILABLE, nAudioAvailable ) && nAudioAvailable)
        {
            //
            // Get the sound property to obtain its size
            //
            CComPtr<IWiaPropertyStorage> pWiaPropertyStorage;
            hr = pWiaItem->QueryInterface( IID_IWiaPropertyStorage, (void**)(&pWiaPropertyStorage) );
            if (SUCCEEDED(hr))
            {
                //
                // Get the audio data itself
                //
                PROPVARIANT PropVar[1];
                PROPSPEC    PropSpec[1];

                PropSpec[0].ulKind = PRSPEC_PROPID;
                PropSpec[0].propid = WIA_IPC_AUDIO_DATA;

                hr = pWiaPropertyStorage->ReadMultiple( ARRAYSIZE(PropSpec), PropSpec, PropVar );
                if (SUCCEEDED(hr))
                {
                    //
                    // Allocate memory to hold the data and copy it over
                    //
                    *ppBuffer = reinterpret_cast<PBYTE>(CoTaskMemAlloc(PropVar[0].caub.cElems));
                    if (*ppBuffer)
                    {
                        CopyMemory( *ppBuffer, PropVar[0].caub.pElems, PropVar[0].caub.cElems );
                        *pdwSize = static_cast<DWORD>(PropVar[0].caub.cElems);
                        hr = S_OK;
                    }
                    else
                    {
                        hr = E_OUTOFMEMORY;
                    }
                }
                
                //
                // Release the original memory
                //
                FreePropVariantArray( ARRAYSIZE(PropVar), PropVar );
            }
        }

        //
        // This is an attachment, not a property
        //
        else
        {
            //
            // Get the size of the annotation
            //
            LONG nSize = 0;
            hr = GetAnnotationSize( pUnknown, nSize, TYMED_CALLBACK );
            if (SUCCEEDED(hr))
            {
                //
                // Allocate some memory for it
                //
                PBYTE pData = reinterpret_cast<PBYTE>(CoTaskMemAlloc( nSize ));
                if (pData)
                {
                    //
                    // Zero the memory
                    //
                    ZeroMemory( pData, nSize );

                    //
                    // Prepare the callback class
                    //
                    CAttachmentMemoryCallback AttachmentMemoryCallback( pData, nSize );

                    //
                    // Get the callback interface
                    //
                    CComPtr<IWiaDataCallback> pWiaDataCallback;
                    hr = AttachmentMemoryCallback.QueryInterface( IID_IWiaDataCallback, (void**)&pWiaDataCallback );
                    if (SUCCEEDED(hr))
                    {
                        //
                        // Create the transfer helper
                        //
                        CComPtr<IWiaTransferHelper> pWiaTransferHelper;
                        hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaTransferHelper, (void**)&pWiaTransferHelper );
                        if (SUCCEEDED(hr))
                        {
                            //
                            // Transfer the data
                            //
                            hr = pWiaTransferHelper->TransferItemBanded( pWiaItem, hWndProgressParent, hWndProgressParent?0:WIA_TRANSFERHELPER_NOPROGRESS, guidFormat, 0, pWiaDataCallback );
                            if (S_OK == hr)
                            {
                                //
                                // Save the buffer and the size
                                //
                                *ppBuffer = pData;
                                *pdwSize = static_cast<DWORD>(nSize);

                                //
                                // NULL out the data pointer so we don't free it below.  The caller will free it with CoTaskMemFree.
                                //
                                pData = NULL;
                            }
                        }
                    }
                    if (pData)
                    {
                        CoTaskMemFree(pData);
                    }
                }
                else
                {
                    hr = E_OUTOFMEMORY;
                }
            }
        }
    }
    return hr;
}

// Calling this function can be horribly slow, because it has to search the whole device list to
// find the correct icon.  You should use IWiaMiscellaneousHelpers::GetDeviceIcon( nDeviceType, ... )
// instead, if the device type is known.
STDMETHODIMP CWiaDefaultUI::GetDeviceIcon( BSTR bstrDeviceId, HICON *phIcon, ULONG nSize )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::GetDeviceIcon"));

    // Sanity check the device id
    if (!bstrDeviceId || !lstrlenW(bstrDeviceId))
    {
        return E_INVALIDARG;
    }

    // Get the device type
    LONG nDeviceType = 0;
    WiaUiUtil::GetDeviceTypeFromId(bstrDeviceId,&nDeviceType);

    // Return the device icon
    return GetDeviceIcon( nDeviceType, phIcon, nSize );
}


STDMETHODIMP CWiaDefaultUI::GetDeviceBitmapLogo( BSTR bstrDeviceId, HBITMAP *phBitmap, ULONG nMaxWidth, ULONG nMaxHeight )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUI::GetDeviceBitmapLogo"));
    return (E_NOTIMPL);
}

// IWiaGetImageDlg
STDMETHODIMP CWiaDefaultUI::GetImageDlg(
        IWiaDevMgr            *pIWiaDevMgr,
        HWND                  hwndParent,
        LONG                  lDeviceType,
        LONG                  lFlags,
        LONG                  lIntent,
        IWiaItem              *pSuppliedItemRoot,
        BSTR                  bstrFilename,
        GUID                  *pguidFormat )
{
    HRESULT hr;
    CComPtr<IWiaItem> pRootItem;

    // Put up a wait cursor
    CWaitCursor wc;

    if (!pIWiaDevMgr || !pguidFormat || !bstrFilename)
    {
        WIA_ERROR((TEXT("GetImageDlg: Invalid pIWiaDevMgr, pguidFormat or bstrFilename")));
        return(E_POINTER);
    }

    // If a root item wasn't passed, select the device.
    if (pSuppliedItemRoot == NULL)
    {
        hr = pIWiaDevMgr->SelectDeviceDlg( hwndParent, lDeviceType, lFlags, NULL, &pRootItem );
        if (FAILED(hr))
        {
            WIA_ERROR((TEXT("GetImageDlg, SelectDeviceDlg failed")));
            return(hr);
        }
        if (hr != S_OK)
        {
            WIA_ERROR((TEXT("GetImageDlg, DeviceDlg cancelled")));
            return(hr);
        }
    }
    else
    {
        pRootItem = pSuppliedItemRoot;
    }

    // Put up the device UI.
    LONG         nItemCount;
    IWiaItem    **ppIWiaItem;

    hr = pRootItem->DeviceDlg( hwndParent, lFlags, lIntent, &nItemCount, &ppIWiaItem );

    if (SUCCEEDED(hr) && hr == S_OK)
    {
        if (ppIWiaItem && nItemCount)
        {
            CComPtr<IWiaTransferHelper> pWiaTransferHelper;
            hr = CoCreateInstance( CLSID_WiaDefaultUi, NULL, CLSCTX_INPROC_SERVER, IID_IWiaTransferHelper, (void**)&pWiaTransferHelper );
            if (SUCCEEDED(hr))
            {
                hr = pWiaTransferHelper->TransferItemFile( ppIWiaItem[0], hwndParent, 0, *pguidFormat, bstrFilename, NULL, TYMED_FILE );
            }
        }
        // Release the items and free the array memory
        for (int i=0; ppIWiaItem && i<nItemCount; i++)
        {
            if (ppIWiaItem[i])
            {
                ppIWiaItem[i]->Release();
            }
        }
        if (ppIWiaItem)
        {
            CoTaskMemFree(ppIWiaItem);
        }
    }
    return(hr);
}


STDMETHODIMP CWiaDefaultUI::SelectDeviceDlg(
    HWND         hwndParent,
    BSTR         bstrInitialDeviceId,
    LONG         lDeviceType,
    LONG         lFlags,
    BSTR        *pbstrDeviceID,
    IWiaItem   **ppWiaItemRoot )
{
    SELECTDEVICEDLG SelectDeviceDlgData;
    ZeroMemory( &SelectDeviceDlgData, sizeof(SELECTDEVICEDLG) );

    SelectDeviceDlgData.cbSize                = sizeof(SELECTDEVICEDLG);
    SelectDeviceDlgData.hwndParent            = hwndParent;
    SelectDeviceDlgData.pwszInitialDeviceId   = NULL;
    SelectDeviceDlgData.nDeviceType           = lDeviceType;
    SelectDeviceDlgData.nFlags                = lFlags;
    SelectDeviceDlgData.ppWiaItemRoot         = ppWiaItemRoot;
    SelectDeviceDlgData.pbstrDeviceID         = pbstrDeviceID;
    return ::SelectDeviceDlg( &SelectDeviceDlgData );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiadefui\wiadefui.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIADEFUI.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/13/1999
 *
 *  DESCRIPTION:
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include <initguid.h>
#include <shlguid.h>
#include <wiadevdp.h>
#include <itranhlp.h>
#include <isuppfmt.h>
#include "resource.h"
#include "wiauiext.h"
#include "uicommon.h"
#include "apdropt.h"

// DLL reference counters
static LONG g_nServerLocks = 0;
static LONG g_nComponents  = 0;

// DLL instance
HINSTANCE g_hInstance;

void DllAddRef()
{
    WIA_PUSHFUNCTION(TEXT("DllAddRef"));
    InterlockedIncrement(&g_nComponents);
}

void DllRelease()
{
    WIA_PUSHFUNCTION(TEXT("DllRelease"));
    InterlockedDecrement(&g_nComponents);
}


class CWiaDefaultUiClassFactory : public IClassFactory
{
private:
    LONG   m_cRef;

public:
    // IUnknown
    STDMETHODIMP QueryInterface( const IID &iid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    // IClassFactory
    STDMETHODIMP CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject );
    STDMETHODIMP LockServer( BOOL bLock );

    CWiaDefaultUiClassFactory()
    : m_cRef(1)
    {
        WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::CWiaDefaultUiClassFactory"));
    }
    ~CWiaDefaultUiClassFactory(void)
    {
        WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::~CWiaDefaultUiClassFactory"));
    }
};



STDMETHODIMP CWiaDefaultUiClassFactory::QueryInterface( const IID &iid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::QueryInterface"));

    if ((iid==IID_IUnknown) || (iid==IID_IClassFactory))
    {
        *ppvObject = static_cast<LPVOID>(this);
    }
    else
    {
        *ppvObject = NULL;
        return(E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CWiaDefaultUiClassFactory::AddRef(void)
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::AddRef"));
    return(InterlockedIncrement(&m_cRef));
}


STDMETHODIMP_(ULONG) CWiaDefaultUiClassFactory::Release(void)
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::Release"));
    if (InterlockedDecrement(&m_cRef)==0)
    {
        delete this;
        return 0;
    }
    return(m_cRef);
}


STDMETHODIMP CWiaDefaultUiClassFactory::CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::CreateInstance"));

    //
    // No aggregation supported
    //
    if (pUnknownOuter)
    {
        return(CLASS_E_NOAGGREGATION);
    }

    CWiaDefaultUI *pWiaUIExtension = new CWiaDefaultUI();
    if (!pWiaUIExtension)
    {
        return(E_OUTOFMEMORY);
    }

    HRESULT hr = pWiaUIExtension->QueryInterface( iid, ppvObject );

    pWiaUIExtension->Release();

    return (hr);
}

STDMETHODIMP CWiaDefaultUiClassFactory::LockServer(BOOL bLock)
{
    WIA_PUSHFUNCTION(TEXT("CWiaDefaultUiClassFactory::LockServer"));
    if (bLock)
    {
        InterlockedIncrement(&g_nServerLocks);
    }
    else
    {
        InterlockedDecrement(&g_nServerLocks);
    }
    return(S_OK);
}


class CWiaAutoPlayDropTargetClassFactory : public IClassFactory
{
private:
    LONG   m_cRef;

public:
    // IUnknown
    STDMETHODIMP QueryInterface( const IID &iid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);

    // IClassFactory
    STDMETHODIMP CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject );
    STDMETHODIMP LockServer( BOOL bLock );

    CWiaAutoPlayDropTargetClassFactory()
    : m_cRef(1)
    {
        WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::CWiaAutoPlayDropTargetClassFactory"));
    }
    ~CWiaAutoPlayDropTargetClassFactory(void)
    {
        WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::~CWiaAutoPlayDropTargetClassFactory"));
    }
};



STDMETHODIMP CWiaAutoPlayDropTargetClassFactory::QueryInterface( const IID &iid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::QueryInterface"));

    if ((iid==IID_IUnknown) || (iid==IID_IClassFactory))
    {
        *ppvObject = static_cast<LPVOID>(this);
    }
    else
    {
        *ppvObject = NULL;
        return(E_NOINTERFACE);
    }
    reinterpret_cast<IUnknown*>(*ppvObject)->AddRef();
    return(S_OK);
}


STDMETHODIMP_(ULONG) CWiaAutoPlayDropTargetClassFactory::AddRef(void)
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::AddRef"));
    return(InterlockedIncrement(&m_cRef));
}


STDMETHODIMP_(ULONG) CWiaAutoPlayDropTargetClassFactory::Release(void)
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::Release"));
    if (InterlockedDecrement(&m_cRef)==0)
    {
        delete this;
        return 0;
    }
    return(m_cRef);
}


STDMETHODIMP CWiaAutoPlayDropTargetClassFactory::CreateInstance( IUnknown *pUnknownOuter, const IID &iid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::CreateInstance"));

    //
    // No aggregation supported
    //
    if (pUnknownOuter)
    {
        return(CLASS_E_NOAGGREGATION);
    }

    CWiaAutoPlayDropTarget *pWiaAutoPlayDropTarget = new CWiaAutoPlayDropTarget();
    if (!pWiaAutoPlayDropTarget)
    {
        return(E_OUTOFMEMORY);
    }

    HRESULT hr = pWiaAutoPlayDropTarget->QueryInterface( iid, ppvObject );

    pWiaAutoPlayDropTarget->Release();

    return (hr);
}

STDMETHODIMP CWiaAutoPlayDropTargetClassFactory::LockServer(BOOL bLock)
{
    WIA_PUSHFUNCTION(TEXT("CWiaAutoPlayDropTargetClassFactory::LockServer"));
    if (bLock)
    {
        InterlockedIncrement(&g_nServerLocks);
    }
    else
    {
        InterlockedDecrement(&g_nServerLocks);
    }
    return(S_OK);
}


extern "C" BOOL WINAPI DllMain( HINSTANCE hinst, DWORD dwReason, LPVOID lpReserved )
{
    switch (dwReason)
    {
    case DLL_PROCESS_ATTACH:
        SHFusionInitializeFromModuleID( hinst, 123 );
        g_hInstance = hinst;
        DisableThreadLibraryCalls(hinst);
        WIA_DEBUG_CREATE(hinst);
        break;

    case DLL_PROCESS_DETACH:
        SHFusionUninitialize();
        WIA_REPORT_LEAKS();
        WIA_DEBUG_DESTROY();
        break;
    }
    return(TRUE);
}


extern "C" STDMETHODIMP DllRegisterServer(void)
{
    return WiaUiUtil::InstallInfFromResource( g_hInstance, "RegDllCommon" );
}

extern "C" STDMETHODIMP DllUnregisterServer(void)
{
    return WiaUiUtil::InstallInfFromResource( g_hInstance, "UnregDllCommon" );
}

extern "C" STDMETHODIMP DllCanUnloadNow(void)
{
    WIA_PUSHFUNCTION(TEXT("DllCanUnloadNow"));
    if (g_nServerLocks == 0 && g_nComponents == 0)
    {
        WIA_TRACE((TEXT("Can unload")));
        return S_OK;
    }
    else
    {
        WIA_ERROR((TEXT("Can't unload module!")));
        return S_FALSE;
    }
}

extern "C" STDAPI DllGetClassObject( const CLSID &clsid, const IID &iid, void **ppvObject )
{
    WIA_PUSHFUNCTION(TEXT("DllGetClassObject"));

    HRESULT hr = E_FAIL;
    
    //
    // Make sure we've got a valid ppvObject
    //
    if (!ppvObject)
    {
        return(E_INVALIDARG);
    }

    //
    // Make sure this component is supplied by this server
    //
    if (CLSID_WiaDefaultUi == clsid)
    {
        //
        // Create class factory
        //
        CWiaDefaultUiClassFactory *pWiaDefaultUiClassFactory = new CWiaDefaultUiClassFactory;
        if (pWiaDefaultUiClassFactory)
        {
            //
            // Get the requested interface
            //
            hr = pWiaDefaultUiClassFactory->QueryInterface( iid, ppvObject );

            //
            // Release the 'new-ed' instance
            //
            pWiaDefaultUiClassFactory->Release();
        }
        else
        {
            hr = E_OUTOFMEMORY;
        }
    }
    else if (CLSID_WiaAutoPlayDropTarget == clsid)
    {
        //
        // Create class factory
        //
        CWiaAutoPlayDropTargetClassFactory *pWiaAutoPlayDropTargetClassFactory = new CWiaAutoPlayDropTargetClassFactory;
        if (pWiaAutoPlayDropTargetClassFactory)
        {
            //
            // Get the requested interface
            //
            hr = pWiaAutoPlayDropTargetClassFactory->QueryInterface( iid, ppvObject );

            //
            // Release the 'new-ed' instance
            //
            pWiaAutoPlayDropTargetClassFactory->Release();
        }
        else
        {
            hr = E_OUTOFMEMORY;
        }
    }
    else
    {
        hr = CLASS_E_CLASSNOTAVAILABLE;
    }

    return (hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\wiavidd.cpp ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1999 - 2000
 *
 *  TITLE:       wiavidd.cpp
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      RickTu
 *
 *  DATE:        10/14/99
 *
 *  DESCRIPTION: Main entry for video common dialog
 *
 *****************************************************************************/

#include <precomp.h>
#pragma hdrstop
#include "wiavidd.h"

/*****************************************************************************

   DeviceDialog

   Main entry point for outside callers to our dialog.

 *****************************************************************************/


HRESULT WINAPI VideoDeviceDialog( PDEVICEDIALOGDATA pDialogDeviceData )
{
    HRESULT hr = E_FAIL;
    if (pDialogDeviceData && pDialogDeviceData->cbSize == sizeof(DEVICEDIALOGDATA))
    {
        InitCommonControls();
        hr = (HRESULT)DialogBoxParam( g_hInstance,
                                      MAKEINTRESOURCE(IDD_CAPTURE_DIALOG),
                                      pDialogDeviceData->hwndParent,
                                      CVideoCaptureDialog::DialogProc,
                                      (LPARAM)pDialogDeviceData
                                     );
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\ui\wiavidd\wiavidd.h ===
#ifndef __WIAVIDD_H_INCLUDED
#define __WIAVIDD_H_INCLUDED

#include <windows.h>
#include "wiadevd.h"

HRESULT WINAPI VideoDeviceDialog( PDEVICEDIALOGDATA pDialogDeviceData );

#endif //__WIAVIDD_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\wiaenv.inc ===
##########################################################################
#
#   Microsoft Confidential
#   Copyright (C) Microsoft Corporation 1997-1999
#   All Rights Reserved.
#
##########################################################################

#
# Common include file 'sources' files in the imagein project.
#
#
# These definitions are required in your sources file:
#
#     FREEBUILD
#        Set by makefile.def file for you.  One of the following:
#          0      - build debug
#          1      - build retail
#
# Definitions used if defined:
#
#     CHICAGO_PRODUCT
#        Build component explicitly for the Win95 platform.  If this is
#        not defined, default is NT or both.
#
#     TARGET_BOTH
#        Build component to run on both platforms.
#
#     NO_PRIVATE_HEADERS
#        If set to 1, this is defined as a manifest constant, so the
#        stub headers in shell\inc\stubs do not include the private
#        companion headers.
#
# Environment Variables and their meanings
#
#     ATL_DEBUG_QI
#        When set to 1, debug builds will also have _ATL_DEBUG_QI
#        defined.  ATL code spews a bunch of debug stuff during QueryInterface.
#
#     ATL_DEBUG_REFCOUNT
#        When set to 1, debug builds will also have _ATL_DEBUG_REFCOUNT
#        defined.  ATL code spews a bunch of debug stuff during AddRef
#        and Release.
#
#     MAXDEBUG
#        If set to 1, then debug builds will also have MAXDEBUG defined.
#        Retail builds unaffected.  This is highly encouraged for regular
#        development purposes.  Not to be set or used by the build labs.
#
#     MEASURE_PERF
#        If set to 1, enables performance timing code for both debug and
#        retail builds.  This code squirts the timings for interesting
#        events to the debug terminal.
#

#
# As this include file is used only for user mode windows components - set
# components IDs appropriately
#
MAJORCOMP=windows
MINORCOMP=imagein

WIN32_IE_VERSION=0x0500

#
# Set up related directories
#
!IFNDEF WDMROOT
#remove WDMROOT=$(BASEDIR)\private\ntos\dd\wdm
!ENDIF

!IFNDEF SCANCAMDIR
#remove SCANCAMDIR=$(WDMROOT)\scancam
!ENDIF

!IF "$(BUILD_PRODUCT)"=="millen"
CHICAGO_PRODUCT=1
!ENDIF

#
# Set private paths
#

WIA_INC_PATH=$(PROJECT_ROOT)\wia\inc
WIA_LIB_DEST=$(PROJECT_ROOT)\wia\lib\$(PLATFORM_SUFFIX)\$(_OBJ_DIR)
WIA_LIB_PATH=$(PROJECT_ROOT)\wia\lib\$(PLATFORM_SUFFIX)\$(_OBJ_DIR)\*

INCLUDES        = .;..;\
    $(WIA_INC_PATH);\
    $(WIA_INC_PATH)\$(O);\
    $(PRV_INC_PATH);\
    $(SDK_INC_PATH)\gdiplus;\
    $(PROJECT_ROOT)\inc\psutil;\
    $(INCLUDES)

#
# We always want to sign our binaries , but need to set in environment
#
#NT_SIGNCODE=1

#
# Necessary for gdiplus
#
C_DEFINES=$(C_DEFINES) \
    -DDCR_USE_NEW_105760 \
    -DDCR_USE_NEW_125467 \
    -DDCR_USE_NEW_127084 \
    -DDCR_USE_NEW_135429 \
    -DDCR_USE_NEW_137252 \
    -DDCR_USE_NEW_140782 \
    -DDCR_USE_NEW_140855 \
    -DDCR_USE_NEW_140857 \
    -DDCR_USE_NEW_140861 \
    -DDCR_USE_NEW_145135 \
    -DDCR_USE_NEW_145138 \
    -DDCR_USE_NEW_145139 \
    -DDCR_USE_NEW_145804 \
    -DDCR_USE_NEW_146933 \
    -DDCR_USE_NEW_152154 \
    -DDCR_USE_NEW_168772 \
    -DDCR_USE_NEW_174340 \
    -DDCR_USE_NEW_175866 \
    -DDCR_USE_NEW_186091 \
    -DDCR_USE_NEW_186151 \
    -DDCR_USE_NEW_186764 \
    -DDCR_USE_NEW_188922 \
    -DDCR_USE_NEW_197819 \
    -DDCR_USE_NEW_202903 \
    -DDCR_USE_NEW_235072 \
    -DDCR_USE_NEW_250932 \
    -DDCR_USE_NEW_284635 \
    -DDCR_USE_NEW_284841 \
    -DDCR_USE_NEW_293849 \
    -DDCR_USE_NEW_299162
    

#
# Set platform dependent settings
#
#  PLATFORM_SUFFIX is used for generating platform specific static libs path , a la public\sdk\lib\win98
#
!if !defined(CHICAGO_PRODUCT)

#
# Require v500 to use NT5 specific APIs
#

WIN32_WINNT_VERSION=0x0500


LIBRARY_PLATFORM_PATH   = $(SDK_LIB_PATH); $(DDK_LIB_PATH)

PLATFORM_SUFFIX=.

USE_MSVCRT=1

!else

NOT_UNICODE =1

# (use 'chicago' since that is already used in the NT tree)

LIBRARY_PLATFORM_PATH   = $(SDK_LIB_PATH); $(DDK_LIB_PATH)
ALT_PROJECT_TARGET      = chicago
USE_MAPSYM              = 1

# Where to put static libraries
PLATFORM_SUFFIX=chicago

#
# Cheat on version for Millenium
#
WIN32_WIN95_VERSION=0x500


#
# VC5 libs not shipped yet
#
USE_MSVCRT=1
#USE_MSVCRT40=1
#USE_LIBCMT=1

#
# Indicate target is not supporting robust RPC validation.
# Have to do if we run on Win9x or NT4
#
#MIDL_NO_ROBUST=1

#
# Indicate we fully support DCOM
#
C_DEFINES       = $(C_DEFINES) -D_WIN32_DCOM
##-D_WIN32_WINDOWS

#
!endif

#
# Include and lib directories private to the PrintScan project
#

PRV_INC_PATH=$(PROJECT_ROOT)\inc
!if $(386)
PRV_LIB_PATH=$(PROJECT_ROOT)\lib\$(PLATFORM_SUFFIX)\i386
!elseif $(IA64)
PRV_LIB_PATH=$(PROJECT_ROOT)\lib\ia64
!elseif $(AXP64)
PRV_LIB_PATH=$(PROJECT_ROOT)\lib\axp64
!elseif $(ALPHA)
PRV_LIB_PATH=$(PROJECT_ROOT)\lib\alpha
!endif


#
# Set common options
#

# Defining this allows windows.h to include other headers
NOT_LEAN_AND_MEAN=1

# user mode executable type
UMTYPE          = windows

# By default use CRT DLL, possibly we need to use IERT , it is smaller
#USE_CRTDLL=1


# Don't link to NTDLL if this runs on both platforms
!ifdef TARGET_BOTH
NO_NTDLL=1
!endif

#
# Additional compiler flags
#

C_DEFINES       = $(C_DEFINES) -DWIN32 -D_WIN32 -D_NTSDK

!ifdef USE_ICECAP
C_DEFINES = $(C_DEFINES) -DPRODUCT_PROF
!endif

!if !defined(CHICAGO_PRODUCT )

C_DEFINES       = $(C_DEFINES) -DNT -DWINNT

! if !defined(NOT_UNICODE)
UNICODE=1
C_DEFINES       = $(C_DEFINES) -DUNICODE -D_UNICODE
! endif

!else

UNICODE=0

C_DEFINES       = $(C_DEFINES) -DWIN9X

!endif

!ifdef BROWSERDB
#
# Generating browser databases if needed
#
BROWSER_INFO=1
BROWSERFILE=$(IMAGE_DIR)\imagein.bsc
!endif



# ------ Debug Only Defines --------

#
# For source level debugging
#
!ifndef NTBBT
#NTDBGFILES=1
!endif

!IFDEF MAXDEBUG

MAXDEBUG=1

#DEBUG_CRTS=1

NTDEBUG=ntsd
NTDEBUGTYPE=windbg
MSC_OPTIMIZATION=/Od

C_DEFINES  = $(C_DEFINES) /DMAXDEBUG /DDEBUG /DDBG=1

!ENDIF

#
# Set obj directory correctly
#

OBJ_DIR=$(_OBJ_DIR)

#!IF "$(FREEBUILD)" == "1"
#BUILD_ALT_DIR=
#OBJ_DIR=obj
#!ELSE
#BUILD_ALT_DIR=
#OBJ_DIR=obj
#!ENDIF

!if "$(FREEBUILD)" == "0"
C_DEFINES       = $(C_DEFINES) -DDEBUG
LINKER_NOICF      = 1           # ICF is s-l-o-w

# Check for missing PURE directives in interface decls (debug only)
C_DEFINES       = $(C_DEFINES) -DNO_NOVTABLE

# Define MAXDEBUG for asserts to break by default
!  if "$(MAXDEBUG)" == "1"
C_DEFINES       = $(C_DEFINES) -DMAXDEBUG
!  endif

# Allow someone to have ATL_DEBUG_REFCOUNT and ATL_DEBUG_QI set
# in their environment to turn this on
!  if "$(ATL_DEBUG_REFCOUNT)" == "1"
C_DEFINES       = $(C_DEFINES) -D_ATL_DEBUG_REFCOUNT
!  endif

!  if "$(ATL_DEBUG_QI)" == "1"
C_DEFINES       = $(C_DEFINES) -D_ATL_DEBUG_QI
!  endif

!endif
# ------ End Debug Only Defines --------


!if "$(MEASURE_PERF)" == "1"
C_DEFINES       = $(C_DEFINES) -DMEASURE_PERF
!endif

!if "$(NO_PRIVATE_HEADERS)" == "1"
C_DEFINES       = $(C_DEFINES) -DNO_PRIVATE_HEADERS
!endif

#
# Make warnings equivalent to errors
#
!if !defined(MSC_WARNING_LEVEL)
MSC_WARNING_LEVEL= /W3
!endif
MSC_WARNING_LEVEL= $(MSC_WARNING_LEVEL) /WX

!if defined(CHICAGO_PRODUCT ) || defined(TARGET_BOTH)
USE_MAPSYM      = 1
!endif

#
# make us completely self contained
#
COFFBASE_TXT_FILE=$(PROJECT_ROOT)\wia\coffbase.txt
BINPLACE_PLACEFILE=$(PROJECT_ROOT)\wia\placefil.txt

#
# Commonly used libraries
#
!if !defined(DONT_DO_COMMON_LIBS)
!if !defined(CHICAGO_PRODUCT)
TARGETLIBS=                             \
        $(SDK_LIB_PATH)\ADVAPI32.lib    \
        $(SDK_LIB_PATH)\GDI32.lib       \
        $(SDK_LIB_PATH)\KERNEL32.lib    \
        $(SDK_LIB_PATH)\user32.lib      \
        $(SDK_LIB_PATH)\comdlg32.lib    \
        $(SDK_LIB_PATH)\oleaut32.lib    \
        $(SDK_LIB_PATH)\shlwapi.lib     \
        $(SDK_LIB_PATH)\ole32.lib       \
        $(SDK_LIB_PATH)\rpcndr.lib      \
        $(SDK_LIB_PATH)\rpcns4.lib      \
        $(SDK_LIB_PATH)\rpcrt4.lib      \
        $(SDK_LIB_PATH)\uuid.lib        \
        $(SDK_LIB_PATH)\cfgmgr32.lib    \
        $(SDK_LIB_PATH)\setupapi.lib
!else
TARGETLIBS=                             \
        $(SDK_LIB_PATH)\cfgmgr32.lib    \
        $(SDK_LIB_PATH)\setupapi.lib    \
        $(SDK_LIB_PATH)\iprop.lib       \
        $(SDK_LIB_PATH)\ADVAPI32.lib    \
        $(SDK_LIB_PATH)\GDI32.lib       \
        $(SDK_LIB_PATH)\KERNEL32.lib    \
        $(SDK_LIB_PATH)\user32.lib      \
        $(SDK_LIB_PATH)\comdlg32.lib    \
        $(SDK_LIB_PATH)\oleaut32.lib    \
        $(SDK_LIB_PATH)\shlwapi.lib     \
        $(SDK_LIB_PATH)\ole32.lib       \
        $(SDK_LIB_PATH)\rpcndr.lib      \
        $(SDK_LIB_PATH)\rpcns4.lib      \
        $(SDK_LIB_PATH)\rpcrt4.lib      \
        $(SDK_LIB_PATH)\uuid.lib
!endif
!endif

#
# Skip these files when determining dependencies
#
CONDITIONAL_INCLUDES = $(CONDITIONAL_INCLUDES) \
                  atlbase.h     \
                  atlcom.h      \
                  atlconv.h     \
                  atlctl.h      \
                  atlctl.cpp    \
                  atliface.h    \
                  atlimpl.cpp   \
                  atlwin.h      \
                  atlwin.cpp    \
                  ia64inst.h    \
                  macapi.h      \
                  macname1.h    \
                  macname2.h    \
                  macocidl.h    \
                  macpub.h      \
                  macwin32.h    \
                  mainwin.h     \
                  mwversion.h   \
                  penwin.h      \
                  pshpck16.h    \
                  rpcerr.h      \
                  rpcmac.h      \
                  setupx.h      \
                  skbapi.h      \
                  statreg.h     \
                  statreg.cpp   \
                  unixstuff.h   \
                  version.h     \
                  winwlm.h      \
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcapistd.cpp ===
/*
 * jcapistd.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the compression half
 * of the JPEG library.  These are the "standard" API routines that are
 * used in the normal full-compression case.  They are not used by a
 * transcoding-only application.  Note that if an application links in
 * jpeg_start_compress, it will end up linking in the entire compressor.
 * We thus must separate this file from jcapimin.c to avoid linking the
 * whole compression library into a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Compression initialization.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * We require a write_all_tables parameter as a failsafe check when writing
 * multiple datastreams from the same compression object.  Since prior runs
 * will have left all the tables marked sent_table=TRUE, a subsequent run
 * would emit an abbreviated stream (no tables) by default.  This may be what
 * is wanted, but for safety's sake it should not be the default behavior:
 * programmers should have to make a deliberate choice to emit abbreviated
 * images.  Therefore the documentation and examples should encourage people
 * to pass write_all_tables=TRUE; then it will take active thought to do the
 * wrong thing.
 */

GLOBAL void
jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (write_all_tables)
    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Perform master selection of active modules */
  jinit_compress_master(cinfo);
  /* Set up for the first pass */
  (*cinfo->master->prepare_for_pass) (cinfo);
  /* Ready for application to drive first pass through jpeg_write_scanlines
   * or jpeg_write_raw_data.
   */
  cinfo->next_scanline = 0;
  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
}


/*
 * Write some scanlines of data to the JPEG compressor.
 *
 * The return value will be the number of lines actually written.
 * This should be less than the supplied num_lines only in case that
 * the data destination module has requested suspension of the compressor,
 * or if more than image_height scanlines are passed in.
 *
 * Note: we warn about excess calls to jpeg_write_scanlines() since
 * this likely signals an application programmer error.  However,
 * excess scanlines passed in the last valid call are *silently* ignored,
 * so that the application need not adjust num_lines for end-of-image
 * when using a multiple-scanline buffer.
 */

GLOBAL JDIMENSION
jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
		      JDIMENSION num_lines)
{
  JDIMENSION row_ctr, rows_left;

  if (cinfo->global_state != CSTATE_SCANNING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height)
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    cinfo->progress->pass_limit = (long) cinfo->image_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_scanlines.
   */
  if (cinfo->master->call_pass_startup)
    (*cinfo->master->pass_startup) (cinfo);

  /* Ignore any extra scanlines at bottom of image. */
  rows_left = cinfo->image_height - cinfo->next_scanline;
  if (num_lines > rows_left)
    num_lines = rows_left;

  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
  cinfo->next_scanline += row_ctr;
  return row_ctr;
}


/*
 * Alternate entry point to write raw data.
 * Processes exactly one iMCU row per call, unless suspended.
 */

GLOBAL JDIMENSION
jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
		     JDIMENSION num_lines)
{
  JDIMENSION lines_per_iMCU_row;

  if (cinfo->global_state != CSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    cinfo->progress->pass_limit = (long) cinfo->image_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_raw_data.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_raw_data.
   */
  if (cinfo->master->call_pass_startup)
    (*cinfo->master->pass_startup) (cinfo);

  /* Verify that at least one iMCU row has been passed. */
  lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
  if (num_lines < lines_per_iMCU_row)
    ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Directly compress the row. */
  if (! (*cinfo->coef->compress_data) (cinfo, data)) {
    /* If compressor did not consume the whole row, suspend processing. */
    return 0;
  }

  /* OK, we processed one iMCU row. */
  cinfo->next_scanline += lines_per_iMCU_row;
  return lines_per_iMCU_row;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcdctmgr.cpp ===
/*
 * jcdctmgr.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the forward-DCT management logic.
 * This code selects a particular DCT implementation to be used,
 * and it performs related housekeeping chores including coefficient
 * quantization.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/* Private subobject for this module */

typedef struct {
  struct jpeg_forward_dct pub;	/* public fields */

  /* Pointer to the DCT routine actually in use */
  forward_DCT_method_ptr do_dct;

  /* The actual post-DCT divisors --- not identical to the quant table
   * entries, because of scaling (especially for an unnormalized DCT).
   * Each table is given in normal array order; note that this must
   * be converted from the zigzag order of the quantization tables.
   */
  DCTELEM * divisors[NUM_QUANT_TBLS];

#ifdef DCT_FLOAT_SUPPORTED
  /* Same as above for the floating-point case. */
  float_DCT_method_ptr do_float_dct;
  FAST_FLOAT * float_divisors[NUM_QUANT_TBLS];
#endif
} my_fdct_controller;

typedef my_fdct_controller * my_fdct_ptr;


/*
 * Initialize for a processing pass.
 * Verify that all referenced Q-tables are present, and set up
 * the divisor table for each one.
 * In the current implementation, DCT of all components is done during
 * the first pass, even if only some components will be output in the
 * first scan.  Hence all components should be examined here.
 */

METHODDEF void
start_pass_fdctmgr (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;
  DCTELEM * dtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    qtblno = compptr->quant_tbl_no;
    /* Make sure specified quantization table is present */
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    qtbl = cinfo->quant_tbl_ptrs[qtblno];
    /* Compute divisors for this quant table */
    /* We may do this more than once for same table, but it's not a big deal */
    switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
    case JDCT_ISLOW:
      /* For LL&M IDCT method, divisors are equal to raw quantization
       * coefficients multiplied by 8 (to counteract scaling).
       */
      if (fdct->divisors[qtblno] == NULL) {
	fdct->divisors[qtblno] = (DCTELEM *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(DCTELEM));
      }
      dtbl = fdct->divisors[qtblno];
      for (i = 0; i < DCTSIZE2; i++) {
	dtbl[i] = ((DCTELEM) qtbl->quantval[jpeg_zigzag_order[i]]) << 3;
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 */
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits: in natural order */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	if (fdct->divisors[qtblno] == NULL) {
	  fdct->divisors[qtblno] = (DCTELEM *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(DCTELEM));
	}
	dtbl = fdct->divisors[qtblno];
	for (i = 0; i < DCTSIZE2; i++) {
	  dtbl[i] = (DCTELEM)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[jpeg_zigzag_order[i]],
				  (INT32) aanscales[i]),
		    CONST_BITS-3);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 * What's actually stored is 1/divisor so that the inner loop can
	 * use a multiplication rather than a division.
	 */
	FAST_FLOAT * fdtbl;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	if (fdct->float_divisors[qtblno] == NULL) {
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(FAST_FLOAT));
	}
	fdtbl = fdct->float_divisors[qtblno];
	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fdtbl[i] = (FAST_FLOAT)
	      (1.0 / (((double) qtbl->quantval[jpeg_zigzag_order[i]] *
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
	    i++;
	  }
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Perform forward DCT on one or more blocks of a component.
 *
 * The input samples are taken from the sample_data[] array starting at
 * position start_row/start_col, and moving to the right for any additional
 * blocks. The quantized coefficients are returned in coef_blocks[].
 */

METHODDEF void
forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	     JDIMENSION start_row, JDIMENSION start_col,
	     JDIMENSION num_blocks)
/* This version is used for integer DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  forward_DCT_method_ptr do_dct = fdct->do_dct;
  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
    /* Load data into workspace, applying unsigned->signed conversion */
    { register DCTELEM *workspaceptr;
      register JSAMPROW elemptr;
      register int elemr;

      workspaceptr = workspace;
      for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	  }
	}
#endif
      }
    }

    /* Perform the DCT */
    (*do_dct) (workspace);

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register DCTELEM temp, qval;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];

      for (i = 0; i < DCTSIZE2; i++) {
	qval = divisors[i];
	temp = workspace[i];
	/* Divide the coefficient value by qval, ensuring proper rounding.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 *
	 * In most files, at least half of the output values will be zero
	 * (at default quantization settings, more like three-quarters...)
	 * so we should ensure that this case is fast.  On many machines,
	 * a comparison is enough cheaper than a divide to make a special test
	 * a win.  Since both inputs will be nonnegative, we need only test
	 * for a < b to discover whether a/b is 0.
	 * If your machine's division is fast enough, define FAST_DIVIDE.
	 */
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
	if (temp < 0) {
	  temp = -temp;
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	  temp = -temp;
	} else {
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	}
	output_ptr[i] = (JCOEF) temp;
      }
    }
  }
}


#ifdef DCT_FLOAT_SUPPORTED

METHODDEF void
forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		   JDIMENSION start_row, JDIMENSION start_col,
		   JDIMENSION num_blocks)
/* This version is used for floating-point DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  float_DCT_method_ptr do_dct = fdct->do_float_dct;
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
    /* Load data into workspace, applying unsigned->signed conversion */
    { register FAST_FLOAT *workspaceptr;
      register JSAMPROW elemptr;
      register int elemr;

      workspaceptr = workspace;
      for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = (FAST_FLOAT)
	      (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	  }
	}
#endif
      }
    }

    /* Perform the DCT */
    (*do_dct) (workspace);

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register FAST_FLOAT temp;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];

      for (i = 0; i < DCTSIZE2; i++) {
	/* Apply the quantization and scaling factor */
	temp = workspace[i] * divisors[i];
	/* Round to nearest integer.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 * The maximum coefficient size is +-16K (for 12-bit data), so this
	 * code should work for either 16-bit or 32-bit ints.
	 */
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
      }
    }
  }
}

#endif /* DCT_FLOAT_SUPPORTED */


/*
 * Initialize FDCT manager.
 */

GLOBAL void
jinit_forward_dct (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct;
  int i;

  fdct = (my_fdct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_fdct_controller));
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
  fdct->pub.start_pass = start_pass_fdctmgr;

  switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
  case JDCT_ISLOW:
    fdct->pub.forward_DCT = forward_DCT;
    fdct->do_dct = jpeg_fdct_islow;
    break;
#endif
#ifdef DCT_IFAST_SUPPORTED
  case JDCT_IFAST:
    fdct->pub.forward_DCT = forward_DCT;
    fdct->do_dct = jpeg_fdct_ifast;
    break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
  case JDCT_FLOAT:
    fdct->pub.forward_DCT = forward_DCT_float;
    fdct->do_float_dct = jpeg_fdct_float;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }

  /* Mark divisor tables unallocated */
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    fdct->divisors[i] = NULL;
#ifdef DCT_FLOAT_SUPPORTED
    fdct->float_divisors[i] = NULL;
#endif
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jccolor.cpp ===
/*
 * jccolor.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains input colorspace conversion routines.
 */
 /* SCCSID = "@(#)jccolor.cc	1.4 13:47:45 01/31/97" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

/* #ifdef NIFTY */
#if 0
	/* for NIFTY, we include this stuff for the building of 
		NIFRGB <--> PhotoYCC conversion tables. */
	/* Actually, this stuff seems like fluff, and is now turned off. */


#include <math.h>

#define SCALE_PREC      5
#define SCALE_RND       (1 << (SCALE_PREC - 1))
#define SCALE           (1 << SCALE_PREC)
#define unscale(x)      (((long)(x) + SCALE_RND) >> SCALE_PREC)
#define clip(x)         (((long)(x) & ~0xff) ? (((long)(x) < 0) ? 0 : 255) : (long)(x))

#endif


/* Private subobject */

typedef struct {
  struct jpeg_color_converter pub; /* public fields */

  /* Private state for RGB->YCC conversion */
  INT32 * rgb_ycc_tab;		/* => table for RGB to YCbCr conversion */
} my_color_converter;

typedef my_color_converter * my_cconvert_ptr;


/**************** RGB -> YCbCr conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
 *	Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + CENTERJSAMPLE
 *	Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + CENTERJSAMPLE
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 * Note: older versions of the IJG code used a zero offset of MAXJSAMPLE/2,
 * rather than CENTERJSAMPLE, for Cb and Cr.  This gave equal positive and
 * negative swings for Cb/Cr, but meant that grayscale values (Cb=Cr=0)
 * were not represented exactly.  Now we sacrifice exact representation of
 * maximum red and maximum blue in order to get exact grayscales.
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times R,G,B for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The CENTERJSAMPLE offsets and the rounding fudge-factor of 0.5 are included
 * in the tables to save adding them separately in the inner loop.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define CBCR_OFFSET	((INT32) CENTERJSAMPLE << SCALEBITS)
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))

/* We allocate one big table and divide it up into eight parts, instead of
 * doing eight alloc_small requests.  This lets us use a single table base
 * address, which can be held in a register in the inner loops on many
 * machines (more than can hold all eight addresses, anyway).
 */

#define R_Y_OFF		0			/* offset to R => Y section */
#define G_Y_OFF		(1*(MAXJSAMPLE+1))	/* offset to G => Y section */
#define B_Y_OFF		(2*(MAXJSAMPLE+1))	/* etc. */
#define R_CB_OFF	(3*(MAXJSAMPLE+1))
#define G_CB_OFF	(4*(MAXJSAMPLE+1))
#define B_CB_OFF	(5*(MAXJSAMPLE+1))
#define R_CR_OFF	B_CB_OFF		/* B=>Cb, R=>Cr are the same */
#define G_CR_OFF	(6*(MAXJSAMPLE+1))
#define B_CR_OFF	(7*(MAXJSAMPLE+1))
#define TABLE_SIZE	(8*(MAXJSAMPLE+1))

#ifdef NIFTY

/*
 * Initialize for RGB->PhotoYCC colorspace conversion.
 */
METHODDEF void
rgb_pycc_start (j_compress_ptr cinfo)
{
 
}

/*
 * RGB->PhotoYCC colorspace convertion.
 */
METHODDEF void
rgb_pycc_convert (j_compress_ptr cinfo,
                 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
                 JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
  unsigned char r, g, b;
 
  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = GETJSAMPLE(inptr[RGB_RED]);
      g = GETJSAMPLE(inptr[RGB_GREEN]);
      b = GETJSAMPLE(inptr[RGB_BLUE]);
      inptr+=RGB_PIXELSIZE;
 
      /* Y */
      outptr0[col] = (JSAMPLE)((float)((float)r * 0.2200179046) + (float)((float)g * 0.4322754970) + (float)((float)b * 0.0838667868));
      /* C1 */
      outptr1[col] = (JSAMPLE)((float)((float)r * -0.1347546425) - (float)((float)g * 0.2647563169) + (float)((float)b * 0.3995109594) + 156);
      /* C2 */
      outptr2[col] = (JSAMPLE)((float)((float)r * 0.3849177482) - (float)((float)g * 0.3223733380) + (float)((float)b * 0.0625444102) + 137);
    }
  }
}

#endif



/*
 * Initialize for RGB->YCC colorspace conversion.
 */

METHODDEF void
rgb_ycc_start (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  INT32 * rgb_ycc_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
    /* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
     * This ensures that the maximum output will round to MAXJSAMPLE
     * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
     */
    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
/*  B=>Cb and R=>Cr tables are the same
    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
*/
    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 *
 * Note that we change from the application's interleaved-pixel format
 * to our internal noninterleaved, one-plane-per-component format.
 * The input buffer is therefore three times as wide as the output buffer.
 *
 * A starting row offset is provided only for the output buffer.  The caller
 * can easily adjust the passed input_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF void
rgb_ycc_convert (j_compress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		 JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = GETJSAMPLE(inptr[RGB_RED]);
      g = GETJSAMPLE(inptr[RGB_GREEN]);
      b = GETJSAMPLE(inptr[RGB_BLUE]);
      inptr += RGB_PIXELSIZE;
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}


/**************** Cases other than RGB -> YCbCr **************/


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles RGB->grayscale conversion, which is the same
 * as the RGB->Y portion of RGB->YCbCr.
 * We assume rgb_ycc_start has been called (we only use the Y tables).
 */

METHODDEF void
rgb_gray_convert (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		  JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr = output_buf[0][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = GETJSAMPLE(inptr[RGB_RED]);
      g = GETJSAMPLE(inptr[RGB_GREEN]);
      b = GETJSAMPLE(inptr[RGB_BLUE]);
      inptr += RGB_PIXELSIZE;
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}

#ifdef NIFTY

METHODDEF void
rgba_ycbcra_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 
  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    outptr3 = output_buf[3][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = GETJSAMPLE(inptr[0]);
      g = GETJSAMPLE(inptr[1]);
      b = GETJSAMPLE(inptr[2]);
      /* Alpha passes through as-is */
      outptr3[col] = inptr[3];  /* don't need GETJSAMPLE here */
      inptr += 4;
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
                ((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
                 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
                ((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
                 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
                ((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
                 >> SCALEBITS);
    }
  }
}


/* the following version contains a bug which has been
   given an eternal life via the FlashPix spec.
*/
METHODDEF void
rgba_ycbcra_legacy_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
 
  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    outptr3 = output_buf[3][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
      /* Alpha passes through as-is */
      outptr3[col] = inptr[3];  /* don't need GETJSAMPLE here */
      inptr += 4;
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
                ((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
                 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
                ((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
                 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
                ((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
                 >> SCALEBITS);
    }
  }
}


#endif

/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles Adobe-style CMYK->YCCK conversion,
 * where we convert R=1-C, G=1-M, and B=1-Y to YCbCr using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume rgb_ycc_start has been called.
 */

METHODDEF void
cmyk_ycck_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    outptr3 = output_buf[3][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
      /* K passes through as-is */
      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
      inptr += 4;
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles grayscale output with no conversion.
 * The source can be either plain grayscale or YCbCr (since Y == gray).
 */

METHODDEF void
grayscale_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
  int instride = cinfo->input_components;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr = output_buf[0][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
      inptr += instride;
    }
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles multi-component colorspaces without conversion.
 * We assume input_components == num_components.
 */

METHODDEF void
null_convert (j_compress_ptr cinfo,
	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	      JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  register int ci;
  int nc = cinfo->num_components;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    /* It seems fastest to make a separate pass for each component. */
    for (ci = 0; ci < nc; ci++) {
      inptr = *input_buf;
      outptr = output_buf[ci][output_row];
      for (col = 0; col < num_cols; col++) {
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
	inptr += nc;
      }
    }
    input_buf++;
    output_row++;
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF void
null_method (j_compress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for input colorspace conversion.
 */

GLOBAL void
jinit_color_converter (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_converter));
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;

  /* Make sure input_components agrees with in_color_space */
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->input_components != 1)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

#ifdef NIFTY
	/* some colorspaces that we've added for NIFTY */
    case JCS_YCC:
    if (cinfo->input_components != 3)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

    case JCS_RGBA:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

    case JCS_RGBA_LEGACY:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

    case JCS_YCbCrA:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

    case JCS_YCbCrA_LEGACY:
     /* JCS_YCbCrA_LEGACY is a hack and should only exist with an input space of 
  	   JCS_RGBA_LEGACY. */
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

    case JCS_YCCA:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
#endif

  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    if (cinfo->input_components != RGB_PIXELSIZE)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
#endif /* else share code with YCbCr */

  case JCS_YCbCr:
    if (cinfo->input_components != 3)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->input_components < 1)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
  }

  /* Check num_components, set conversion method based on requested space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_GRAYSCALE)
      cconvert->pub.color_convert = grayscale_convert;
    else if (cinfo->in_color_space == JCS_RGB) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgb_gray_convert;
    } else if (cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = grayscale_convert;
    else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

#ifdef NIFTY
  /* Store and compress data as PhotoYCC */
  /* Only current option is to start with PhotoYCC
   * although I do include the function RGB->PhotoYCC
   * in the compressor, I don't think it's a good idea
   * to rotate to PhotoYCC from RGB in this context.
   * If subsampling is required, then just use YCrCb.
   */
  case JCS_YCC:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_YCC)
      cconvert->pub.color_convert = null_convert;
    else
      if (cinfo->in_color_space == JCS_RGB) {
	/* this is where the RGB->PhotoYCC could be called */
        ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);	
      } else {
        ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
      }
    break;

  case JCS_YCCA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_YCCA)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGBA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_RGBA) {
      cconvert->pub.color_convert = null_convert;
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  case JCS_YCbCrA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_YCbCrA)
      cconvert->pub.color_convert = null_convert;
    else if (cinfo->in_color_space == JCS_RGBA) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgba_ycbcra_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGBA_LEGACY:
     /* JCS_RGBA_LEGACY is a hack and should only exist with an output space of 
  	   JCS_YCbCrA_LEGACY. */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_YCbCrA_LEGACY:
     /* JCS_YCbCrA_LEGACY  is a hack and should only exist with an input space of 
  	   JCS_RGBA_LEGACY. */
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_RGBA_LEGACY) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgba_ycbcra_legacy_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

#endif

  case JCS_RGB:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
      cconvert->pub.color_convert = null_convert;
    else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  case JCS_YCbCr:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_RGB) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgb_ycc_convert;
    } else if (cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = null_convert;
    else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  case JCS_CMYK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_CMYK)
      cconvert->pub.color_convert = null_convert;
    else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_CMYK) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = cmyk_ycck_convert;
    } else if (cinfo->in_color_space == JCS_YCCK)
      cconvert->pub.color_convert = null_convert;
    else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  default:			/* allow null conversion of JCS_UNKNOWN */
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
	cinfo->num_components != cinfo->input_components) {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    cconvert->pub.color_convert = null_convert;
    break;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jccoefct.cpp ===
/*
 * jccoefct.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the coefficient buffer controller for compression.
 * This controller is the top level of the JPEG compressor proper.
 * The coefficient buffer lies between forward-DCT and entropy encoding steps.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* We use a full-image coefficient buffer when doing Huffman optimization,
 * and also for writing multiple-scan JPEG files.  In all cases, the DCT
 * step is run during the first pass, and subsequent passes need only read
 * the buffered coefficients.
 */
#ifdef ENTROPY_OPT_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#else
#ifdef C_MULTISCAN_FILES_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#endif
#endif


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_coef_controller pub; /* public fields */

  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* For single-pass compression, it's sufficient to buffer just one MCU
   * (although this may prove a bit slow in practice).  We allocate a
   * workspace of C_MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
   * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
   * it's not really very big; this is to keep the module interfaces unchanged
   * when a large coefficient buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays.
   */
  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];

  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;


/* Forward declarations */
METHODDEF boolean compress_data
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
#ifdef FULL_COEF_BUFFER_SUPPORTED
METHODDEF boolean compress_first_pass
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
METHODDEF boolean compress_output
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
#endif


LOCAL void
start_iMCU_row (j_compress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row */
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->mcu_ctr = 0;
  coef->MCU_vert_offset = 0;
}


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  coef->iMCU_row_num = 0;
  start_iMCU_row(cinfo);

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (coef->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_data;
    break;
#ifdef FULL_COEF_BUFFER_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_first_pass;
    break;
  case JBUF_CRANK_DEST:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_output;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data in the single-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the image.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf contains a plane for each component in image.
 * For single pass, this is the same as the components in the scan.
 */

METHODDEF boolean
compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, bi, ci, yindex, yoffset, blockcnt;
  JDIMENSION ypos, xpos;
  jpeg_component_info *compptr;

  /* Loop to write as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
	 MCU_col_num++) {
      /* Determine where data comes from in input_buf and do the DCT thing.
       * Each call on forward_DCT processes a horizontal row of DCT blocks
       * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
       * sequentially.  Dummy blocks at the right or bottom edge are filled in
       * specially.  The data in them does not matter for image reconstruction,
       * so we fill them with values that will encode to the smallest amount of
       * data, viz: all zeroes in the AC entries, DC entries equal to previous
       * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
       */
      blkn = 0;
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						: compptr->last_col_width;
	xpos = MCU_col_num * compptr->MCU_sample_width;
	ypos = yoffset * DCTSIZE; /* ypos == (yoffset+yindex) * DCTSIZE */
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (coef->iMCU_row_num < last_iMCU_row ||
	      yoffset+yindex < compptr->last_row_height) {
	    (*cinfo->fdct->forward_DCT) (cinfo, compptr,
					 input_buf[ci], coef->MCU_buffer[blkn],
					 ypos, xpos, (JDIMENSION) blockcnt);
	    if (blockcnt < compptr->MCU_width) {
	      /* Create some dummy blocks at the right edge of the image. */
	      jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
			(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
	      }
	    }
	  } else {
	    /* Create a row of dummy blocks at the bottom of the image. */
	    jzero_far((void FAR *) coef->MCU_buffer[blkn],
		      compptr->MCU_width * SIZEOF(JBLOCK));
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
	    }
	  }
	  blkn += compptr->MCU_width;
	  ypos += DCTSIZE;
	}
      }
      /* Try to write the MCU.  In event of a suspension failure, we will
       * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
       */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row(cinfo);
  return TRUE;
}


#ifdef FULL_COEF_BUFFER_SUPPORTED

/*
 * Process some data in the first pass of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the image.
 * This amount of data is read from the source buffer, DCT'd and quantized,
 * and saved into the virtual arrays.  We also generate suitable dummy blocks
 * as needed at the right and lower edges.  (The dummy blocks are constructed
 * in the virtual arrays, which have been padded appropriately.)  This makes
 * it possible for subsequent passes not to worry about real vs. dummy blocks.
 *
 * We must also emit the data to the entropy encoder.  This is conveniently
 * done by calling compress_output() after we've loaded the current strip
 * of the virtual arrays.
 *
 * NB: input_buf contains a plane for each component in image.  All
 * components are DCT'd and loaded into the virtual arrays in this pass.
 * However, it may be that only a subset of the components are emitted to
 * the entropy encoder during this first pass; be careful about looking
 * at the scan-dependent variables (MCU dimensions, etc).
 */

METHODDEF boolean
compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION blocks_across, MCUs_across, MCUindex;
  int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
  JCOEF lastDC;
  jpeg_component_info *compptr;
  JBLOCKARRAY buffer;
  JBLOCKROW thisblockrow, lastblockrow;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       coef->iMCU_row_num * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, TRUE);
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (coef->iMCU_row_num < last_iMCU_row)
      block_rows = compptr->v_samp_factor;
    else {
      /* NB: can't use last_row_height here, since may not be set! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
    }
    blocks_across = compptr->width_in_blocks;
    h_samp_factor = compptr->h_samp_factor;
    /* Count number of dummy blocks to be added at the right margin. */
    ndummy = (int) (blocks_across % h_samp_factor);
    if (ndummy > 0)
      ndummy = h_samp_factor - ndummy;
    /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
     * on forward_DCT processes a complete horizontal row of DCT blocks.
     */
    for (block_row = 0; block_row < block_rows; block_row++) {
      thisblockrow = buffer[block_row];
      (*cinfo->fdct->forward_DCT) (cinfo, compptr,
				   input_buf[ci], thisblockrow,
				   (JDIMENSION) (block_row * DCTSIZE),
				   (JDIMENSION) 0, blocks_across);
      if (ndummy > 0) {
	/* Create dummy blocks at the right edge of the image. */
	thisblockrow += blocks_across; /* => first dummy block */
	jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
	lastDC = thisblockrow[-1][0];
	for (bi = 0; bi < ndummy; bi++) {
	  thisblockrow[bi][0] = lastDC;
	}
      }
    }
    /* If at end of image, create dummy block rows as needed.
     * The tricky part here is that within each MCU, we want the DC values
     * of the dummy blocks to match the last real block's DC value.
     * This squeezes a few more bytes out of the resulting file...
     */
    if (coef->iMCU_row_num == last_iMCU_row) {
      blocks_across += ndummy;	/* include lower right corner */
      MCUs_across = blocks_across / h_samp_factor;
      for (block_row = block_rows; block_row < compptr->v_samp_factor;
	   block_row++) {
	thisblockrow = buffer[block_row];
	lastblockrow = buffer[block_row-1];
	jzero_far((void FAR *) thisblockrow,
		  (size_t) (blocks_across * SIZEOF(JBLOCK)));
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
	  lastDC = lastblockrow[h_samp_factor-1][0];
	  for (bi = 0; bi < h_samp_factor; bi++) {
	    thisblockrow[bi][0] = lastDC;
	  }
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
	  lastblockrow += h_samp_factor;
	}
      }
    }
  }
  /* NB: compress_output will increment iMCU_row_num if successful.
   * A suspension return will result in redoing all the work above next time.
   */

  /* Emit data to the entropy encoder, sharing code with subsequent passes */
  return compress_output(cinfo, input_buf);
}


/*
 * Process some data in subsequent passes of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * The data is obtained from the virtual arrays and fed to the entropy coder.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF boolean
compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan.
   * NB: during first pass, this is safe only because the buffers will
   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       coef->iMCU_row_num * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, FALSE);
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to write the MCU. */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row(cinfo);
  return TRUE;
}

#endif /* FULL_COEF_BUFFER_SUPPORTED */


/*
 * Initialize coefficient buffer controller.
 */

GLOBAL void
jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef FULL_COEF_BUFFER_SUPPORTED
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    int ci;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) compptr->v_samp_factor);
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
    /* We only need a single-MCU buffer. */
    JBLOCKROW buffer;
    int i;

    buffer = (JBLOCKROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
    for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcapimin.cpp ===
/*
 * jcapimin.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the compression half
 * of the JPEG library.  These are the "minimum" API routines that may be
 * needed in either the normal full-compression case or the transcoding-only
 * case.
 *
 * Most of the routines intended to be called directly by an application
 * are in this file or in jcapistd.c.  But also see jcparam.c for
 * parameter-setup helper routines, jcomapi.c for routines shared by
 * compression and decompression, and jctrans.c for the transcoding case.
 */
 /* SCCSID = "@(#)jcapimin.cc	1.2 15:07:57 06/20/96" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Initialization of a JPEG compression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL void
jpeg_create_compress (j_compress_ptr cinfo)
{
  int i;

  /* For debugging purposes, zero the whole master structure.
   * But error manager pointer is already there, so save and restore it.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
    cinfo->err = err;
  }
  cinfo->is_decompressor = FALSE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->dest = NULL;

  cinfo->comp_info = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
    cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  cinfo->input_gamma = 1.0;	/* in case application forgets */

  /* OK, I'm ready */
  cinfo->global_state = CSTATE_START;
}


/*
 * Destruction of a JPEG compression object
 */

GLOBAL void
jpeg_destroy_compress (j_compress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Abort processing of a JPEG compression operation,
 * but don't destroy the object itself.
 */

GLOBAL void
jpeg_abort_compress (j_compress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Forcibly suppress or un-suppress all quantization and Huffman tables.
 * Marks all currently defined tables as already written (if suppress)
 * or not written (if !suppress).  This will control whether they get emitted
 * by a subsequent jpeg_start_compress call.
 *
 * This routine is exported for use by applications that want to produce
 * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
 * since it is called by jpeg_start_compress, we put it here --- otherwise
 * jcparam.o would be linked whether the application used it or not.
 */

GLOBAL void
jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
  int i;
  JQUANT_TBL * qtbl;
  JHUFF_TBL * htbl;

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
      qtbl->sent_table = suppress;
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
      htbl->sent_table = suppress;
    if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
      htbl->sent_table = suppress;
  }
}


/*
 * Finish JPEG compression.
 *
 * If a multipass operating mode was selected, this may do a great deal of
 * work including most of the actual output.
 */

GLOBAL void
jpeg_finish_compress (j_compress_ptr cinfo)
{
  JDIMENSION iMCU_row;

  if (cinfo->global_state == CSTATE_SCANNING ||
      cinfo->global_state == CSTATE_RAW_OK) {
    /* Terminate first pass */
    if (cinfo->next_scanline < cinfo->image_height)
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
    (*cinfo->master->finish_pass) (cinfo);
  } else if (cinfo->global_state != CSTATE_WRCOEFS)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform any remaining passes */
  while (! cinfo->master->is_last_pass) {
    (*cinfo->master->prepare_for_pass) (cinfo);
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
      if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) iMCU_row;
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* We bypass the main controller and invoke coef controller directly;
       * all work is being done from the coefficient buffer.
       */
      if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
    }
    (*cinfo->master->finish_pass) (cinfo);
  }
  /* Write EOI, do final cleanup */
  (*cinfo->marker->write_file_trailer) (cinfo);
  (*cinfo->dest->term_destination) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
}


/*
 * Write a special marker.
 * This is only recommended for writing COM or APPn markers.
 * Must be called after jpeg_start_compress() and before
 * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
 */

GLOBAL void
jpeg_write_marker (j_compress_ptr cinfo, int marker,
		   const JOCTET *dataptr, unsigned int datalen)
{
  if (cinfo->next_scanline != 0 ||
      (cinfo->global_state != CSTATE_SCANNING &&
       cinfo->global_state != CSTATE_RAW_OK &&
       cinfo->global_state != CSTATE_WRCOEFS))
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  (*cinfo->marker->write_any_marker) (cinfo, marker, dataptr, datalen);
}


/*
 * Alternate compression function: just write an abbreviated table file.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * To produce a pair of files containing abbreviated tables and abbreviated
 * image data, one would proceed as follows:
 *
 *		initialize JPEG object
 *		set JPEG parameters
 *		set destination to table file
 *		jpeg_write_tables(cinfo);
 *		set destination to image file
 *		jpeg_start_compress(cinfo, FALSE);
 *		write data...
 *		jpeg_finish_compress(cinfo);
 *
 * jpeg_write_tables has the side effect of marking all tables written
 * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
 * will not re-emit the tables unless it is passed write_all_tables=TRUE.
 */

GLOBAL void
jpeg_write_tables (j_compress_ptr cinfo)
{
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Initialize the marker writer ... bit of a crock to do it here. */
  jinit_marker_writer(cinfo);
  /* Write them tables! */
  (*cinfo->marker->write_tables_only) (cinfo);
  /* And clean up. */
  (*cinfo->dest->term_destination) (cinfo);
  /* We can use jpeg_abort to release memory. */
#ifndef NIFTY
	/* as regards the ifndef NIFTY, it's not clear that this makes much
	   difference. Most of the table data (at the high level) is allocated
	   more permanently than that which a jpeg_abort() would release. */
  jpeg_abort((j_common_ptr) cinfo);
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jchuff.h ===
/*
 * jchuff.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains declarations for Huffman entropy encoding routines
 * that are shared between the sequential encoder (jchuff.c) and the
 * progressive encoder (jcphuff.c).  No other modules need to see these.
 */

/* Derived data constructed for each Huffman table */

typedef struct {
  unsigned int ehufco[256];	/* code for each symbol */
  char ehufsi[256];		/* length of code for each symbol */
  /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
} c_derived_tbl;

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_c_derived_tbl	jMkCDerived
#define jpeg_gen_optimal_table	jGenOptTbl
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Expand a Huffman table definition into the derived format */
EXTERN void jpeg_make_c_derived_tbl JPP((j_compress_ptr cinfo,
				JHUFF_TBL * htbl, c_derived_tbl ** pdtbl));

/* Generate an optimal table definition given the specified counts */
EXTERN void jpeg_gen_optimal_table JPP((j_compress_ptr cinfo,
					JHUFF_TBL * htbl, long freq[]));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcinit.cpp ===
/*
 * jcinit.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains initialization logic for the JPEG compressor.
 * This routine is in charge of selecting the modules to be executed and
 * making an initialization call to each one.
 *
 * Logically, this code belongs in jcmaster.c.  It's split out because
 * linking this routine implies linking the entire compression library.
 * For a transcoding-only application, we want to be able to use jcmaster.c
 * without linking in the whole library.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Master selection of compression modules.
 * This is done once at the start of processing an image.  We determine
 * which modules will be used and give them appropriate initialization calls.
 */

GLOBAL void
jinit_compress_master (j_compress_ptr cinfo)
{
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, FALSE /* full compression */);

  /* Preprocessing */
  if (! cinfo->raw_data_in) {
    jinit_color_converter(cinfo);
    jinit_downsampler(cinfo);
    jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
  }
  /* Forward DCT */
  jinit_forward_dct(cinfo);
  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
      jinit_phuff_encoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_encoder(cinfo);
  }

  /* Need a full-image coefficient buffer in any multi-pass mode. */
  jinit_c_coef_controller(cinfo,
			  (cinfo->num_scans > 1 || cinfo->optimize_coding));
  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);

  jinit_marker_writer(cinfo);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcmarker.cpp ===
/*
 * jcmarker.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write JPEG datastream markers.
 */
 /* SCCSID = "@(#)jcmarker.cc	1.3 13:47:47 01/31/97" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,
  
  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,
  
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,
  
  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Basic output routines.
 *
 * Note that we do not support suspension while writing a marker.
 * Therefore, an application using suspension must ensure that there is
 * enough buffer space for the initial markers (typ. 600-700 bytes) before
 * calling jpeg_start_compress, and enough space to write the trailing EOI
 * (a few bytes) before calling jpeg_finish_compress.  Multipass compression
 * modes are not supported at all with suspension, so those two are the only
 * points where markers will be written.
 */

LOCAL void
emit_byte (j_compress_ptr cinfo, int val)
/* Emit a byte */
{
  struct jpeg_destination_mgr * dest = cinfo->dest;

  *(dest->next_output_byte)++ = (JOCTET) val;
  if (--dest->free_in_buffer == 0) {
    if (! (*dest->empty_output_buffer) (cinfo))
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
  }
}


LOCAL void
emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
/* Emit a marker code */
{
  emit_byte(cinfo, 0xFF);
  emit_byte(cinfo, (int) mark);
}


LOCAL void
emit_2bytes (j_compress_ptr cinfo, int value)
/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
  emit_byte(cinfo, (value >> 8) & 0xFF);
  emit_byte(cinfo, value & 0xFF);
}


/*
 * Routines to write specific marker types.
 */

LOCAL int
emit_dqt (j_compress_ptr cinfo, int index)
/* Emit a DQT marker */
/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
  int prec;
  int i;

  if (qtbl == NULL)
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);

  prec = 0;
  for (i = 0; i < DCTSIZE2; i++) {
    if (qtbl->quantval[i] > 255)
      prec = 1;
  }

  if (! qtbl->sent_table) {
    emit_marker(cinfo, M_DQT);

    emit_2bytes(cinfo, prec ? DCTSIZE2*2 + 1 + 2 : DCTSIZE2 + 1 + 2);

    emit_byte(cinfo, index + (prec<<4));

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	emit_byte(cinfo, qtbl->quantval[i] >> 8);
      emit_byte(cinfo, qtbl->quantval[i] & 0xFF);
    }

    qtbl->sent_table = TRUE;
  }

  return prec;
}


LOCAL void
emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
/* Emit a DHT marker */
{
  JHUFF_TBL * htbl;
  int length, i;
  
  if (is_ac) {
    htbl = cinfo->ac_huff_tbl_ptrs[index];
    index += 0x10;		/* output index has AC bit set */
  } else {
    htbl = cinfo->dc_huff_tbl_ptrs[index];
  }

  if (htbl == NULL)
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);
  
  if (! htbl->sent_table) {
    emit_marker(cinfo, M_DHT);
    
    length = 0;
    for (i = 1; i <= 16; i++)
      length += htbl->bits[i];
    
    emit_2bytes(cinfo, length + 2 + 1 + 16);
    emit_byte(cinfo, index);
    
    for (i = 1; i <= 16; i++)
      emit_byte(cinfo, htbl->bits[i]);
    
    for (i = 0; i < length; i++)
      emit_byte(cinfo, htbl->huffval[i]);
    
    htbl->sent_table = TRUE;
  }
}


LOCAL void
emit_dac (j_compress_ptr cinfo)
/* Emit a DAC marker */
/* Since the useful info is so small, we want to emit all the tables in */
/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
#ifdef C_ARITH_CODING_SUPPORTED
  char dc_in_use[NUM_ARITH_TBLS];
  char ac_in_use[NUM_ARITH_TBLS];
  int length, i;
  jpeg_component_info *compptr;
  
  for (i = 0; i < NUM_ARITH_TBLS; i++)
    dc_in_use[i] = ac_in_use[i] = 0;
  
  for (i = 0; i < cinfo->comps_in_scan; i++) {
    compptr = cinfo->cur_comp_info[i];
    dc_in_use[compptr->dc_tbl_no] = 1;
    ac_in_use[compptr->ac_tbl_no] = 1;
  }
  
  length = 0;
  for (i = 0; i < NUM_ARITH_TBLS; i++)
    length += dc_in_use[i] + ac_in_use[i];
  
  emit_marker(cinfo, M_DAC);
  
  emit_2bytes(cinfo, length*2 + 2);
  
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    if (dc_in_use[i]) {
      emit_byte(cinfo, i);
      emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
    }
    if (ac_in_use[i]) {
      emit_byte(cinfo, i + 0x10);
      emit_byte(cinfo, cinfo->arith_ac_K[i]);
    }
  }
#endif /* C_ARITH_CODING_SUPPORTED */
}


LOCAL void
emit_dri (j_compress_ptr cinfo)
/* Emit a DRI marker */
{
  emit_marker(cinfo, M_DRI);
  
  emit_2bytes(cinfo, 4);	/* fixed length */

  emit_2bytes(cinfo, (int) cinfo->restart_interval);
}

LOCAL void
emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
/* Emit a SOF marker */
{
  int ci;
  jpeg_component_info *compptr;
  
  emit_marker(cinfo, code);
  
  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */

  /* Make sure image isn't bigger than SOF field can handle */
  if ((long) cinfo->image_height > 65535L ||
      (long) cinfo->image_width > 65535L)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);

  emit_byte(cinfo, cinfo->data_precision);
  emit_2bytes(cinfo, (int) cinfo->image_height);
  emit_2bytes(cinfo, (int) cinfo->image_width);

  emit_byte(cinfo, cinfo->num_components);

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    emit_byte(cinfo, compptr->component_id);
    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
    emit_byte(cinfo, compptr->quant_tbl_no);
  }
}

LOCAL void
emit_sos (j_compress_ptr cinfo)
/* Emit a SOS marker */
{
  int i, td, ta;
  jpeg_component_info *compptr;
  
  emit_marker(cinfo, M_SOS);
  
  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */
  
  emit_byte(cinfo, cinfo->comps_in_scan);
  
  for (i = 0; i < cinfo->comps_in_scan; i++) {
    compptr = cinfo->cur_comp_info[i];
    emit_byte(cinfo, compptr->component_id);
    td = compptr->dc_tbl_no;
    ta = compptr->ac_tbl_no;
    if (cinfo->progressive_mode) {
      /* Progressive mode: only DC or only AC tables are used in one scan;
       * furthermore, Huffman coding of DC refinement uses no table at all.
       * We emit 0 for unused field(s); this is recommended by the P&M text
       * but does not seem to be specified in the standard.
       */
      if (cinfo->Ss == 0) {
	ta = 0;			/* DC scan */
	if (cinfo->Ah != 0 && !cinfo->arith_code)
	  td = 0;		/* no DC table either */
      } else {
	td = 0;			/* AC scan */
      }
    }
    emit_byte(cinfo, (td << 4) + ta);
  }

  emit_byte(cinfo, cinfo->Ss);
  emit_byte(cinfo, cinfo->Se);
  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
}


LOCAL void
emit_jfif_app0 (j_compress_ptr cinfo)
/* Emit a JFIF-compliant APP0 marker */
{
  /*
   * Length of APP0 block	(2 bytes)
   * Block ID			(4 bytes - ASCII "JFIF")
   * Zero byte			(1 byte to terminate the ID string)
   * Version Major, Minor	(2 bytes - 0x01, 0x01)
   * Units			(1 byte - 0x00 = none, 0x01 = inch, 0x02 = cm)
   * Xdpu			(2 bytes - dots per unit horizontal)
   * Ydpu			(2 bytes - dots per unit vertical)
   * Thumbnail X size		(1 byte)
   * Thumbnail Y size		(1 byte)
   */
  
  emit_marker(cinfo, M_APP0);
  
  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */

  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0x49);
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0);
  /* We currently emit version code 1.01 since we use no 1.02 features.
   * This may avoid complaints from some older decoders.
   */
  emit_byte(cinfo, 1);		/* Major version */
  emit_byte(cinfo, 1);		/* Minor version */
  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
  emit_2bytes(cinfo, (int) cinfo->X_density);
  emit_2bytes(cinfo, (int) cinfo->Y_density);
  emit_byte(cinfo, 0);		/* No thumbnail image */
  emit_byte(cinfo, 0);
}


LOCAL void
emit_adobe_app14 (j_compress_ptr cinfo)
/* Emit an Adobe APP14 marker */
{
  /*
   * Length of APP14 block	(2 bytes)
   * Block ID			(5 bytes - ASCII "Adobe")
   * Version Number		(2 bytes - currently 100)
   * Flags0			(2 bytes - currently 0)
   * Flags1			(2 bytes - currently 0)
   * Color transform		(1 byte)
   *
   * Although Adobe TN 5116 mentions Version = 101, all the Adobe files
   * now in circulation seem to use Version = 100, so that's what we write.
   *
   * We write the color transform byte as 1 if the JPEG color space is
   * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
   * whether the encoder performed a transformation, which is pretty useless.
   */
  
  emit_marker(cinfo, M_APP14);
  
  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */

  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
  emit_byte(cinfo, 0x64);
  emit_byte(cinfo, 0x6F);
  emit_byte(cinfo, 0x62);
  emit_byte(cinfo, 0x65);
  emit_2bytes(cinfo, 100);	/* Version */
  emit_2bytes(cinfo, 0);	/* Flags0 */
  emit_2bytes(cinfo, 0);	/* Flags1 */
  switch (cinfo->jpeg_color_space) {
  case JCS_YCbCr:
    emit_byte(cinfo, 1);	/* Color transform = 1 */
    break;
  case JCS_YCCK:
    emit_byte(cinfo, 2);	/* Color transform = 2 */
    break;
  default:
    emit_byte(cinfo, 0);	/* Color transform = 0 */
    break;
  }
}


/*
 * This routine is exported for possible use by applications.
 * The intended use is to emit COM or APPn markers after calling
 * jpeg_start_compress() and before the first jpeg_write_scanlines() call
 * (hence, after write_file_header but before write_frame_header).
 * Other uses are not guaranteed to produce desirable results.
 */

METHODDEF void
write_any_marker (j_compress_ptr cinfo, int marker,
		  const JOCTET *dataptr, unsigned int datalen)
/* Emit an arbitrary marker with parameters */
{
  if (datalen <= (unsigned int) 65533) { /* safety check */
    emit_marker(cinfo, (JPEG_MARKER) marker);
  
    emit_2bytes(cinfo, (int) (datalen + 2)); /* total length */

    while (datalen--) {
      emit_byte(cinfo, *dataptr);
      dataptr++;
    }
  }
}


/*
 * Write datastream header.
 * This consists of an SOI and optional APPn markers.
 * We recommend use of the JFIF marker, but not the Adobe marker,
 * when using YCbCr or grayscale data.  The JFIF marker should NOT
 * be used for any other JPEG colorspace.  The Adobe marker is helpful
 * to distinguish RGB, CMYK, and YCCK colorspaces.
 * Note that an application can write additional header markers after
 * jpeg_start_compress returns.
 */

METHODDEF void
write_file_header (j_compress_ptr cinfo)
{
  emit_marker(cinfo, M_SOI);	/* first the SOI */

  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
    emit_jfif_app0(cinfo);
  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
    emit_adobe_app14(cinfo);
}


/*
 * Write frame header.
 * This consists of DQT and SOFn markers.
 * Note that we do not emit the SOF until we have emitted the DQT(s).
 * This avoids compatibility problems with incorrect implementations that
 * try to error-check the quant table numbers as soon as they see the SOF.
 */

METHODDEF void
write_frame_header (j_compress_ptr cinfo)
{
  int ci, prec;
  boolean is_baseline;
  jpeg_component_info *compptr;
  
  /* Emit DQT for each quantization table.
   * Note that emit_dqt() suppresses any duplicate tables.
   */
  prec = 0;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
  }
  /* now prec is nonzero iff there are any 16-bit quant tables. */

  /* Check for a non-baseline specification.
   * Note we assume that Huffman table numbers won't be changed later.
   */
  if (cinfo->arith_code || cinfo->progressive_mode ||
      cinfo->data_precision != 8) {
    is_baseline = FALSE;
  } else {
    is_baseline = TRUE;
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
	is_baseline = FALSE;
    }
    if (prec && is_baseline) {
      is_baseline = FALSE;
      /* If it's baseline except for quantizer size, warn the user */
      TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
    }
  }

  /* Emit the proper SOF marker */
  if (cinfo->arith_code) {
    emit_sof(cinfo, M_SOF9);	/* SOF code for arithmetic coding */
  } else {
    if (cinfo->progressive_mode)
      emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
    else if (is_baseline)
      emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
    else
      emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
  }
}


/*
 * Write scan header.
 * This consists of DHT or DAC markers, optional DRI, and SOS.
 * Compressed data will be written following the SOS.
 */

METHODDEF void
write_scan_header (j_compress_ptr cinfo)
{
  int i;
  jpeg_component_info *compptr;

  if (cinfo->arith_code) {
    /* Emit arith conditioning info.  We may have some duplication
     * if the file has multiple scans, but it's so small it's hardly
     * worth worrying about.
     */
    emit_dac(cinfo);
  } else {
    /* Emit Huffman tables.
     * Note that emit_dht() suppresses any duplicate tables.
     */
    for (i = 0; i < cinfo->comps_in_scan; i++) {
      compptr = cinfo->cur_comp_info[i];
      if (cinfo->progressive_mode) {
	/* Progressive mode: only DC or only AC tables are used in one scan */
	if (cinfo->Ss == 0) {
	  if (cinfo->Ah == 0)	/* DC needs no table for refinement scan */
	    emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
	} else {
	  emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
	}
      } else {
	/* Sequential mode: need both DC and AC tables */
	emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
	emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
      }
    }
  }

  /* Emit DRI if required --- note that DRI value could change for each scan.
   * If it doesn't, a tiny amount of space is wasted in multiple-scan files.
   * We assume DRI will never be nonzero for one scan and zero for a later one.
   */
  if (cinfo->restart_interval)
    emit_dri(cinfo);

  emit_sos(cinfo);
}


/*
 * Write datastream trailer.
 */

METHODDEF void
write_file_trailer (j_compress_ptr cinfo)
{
  emit_marker(cinfo, M_EOI);
}


/*
 * Write an abbreviated table-specification datastream.
 * This consists of SOI, DQT and DHT tables, and EOI.
 * Any table that is defined and not marked sent_table = TRUE will be
 * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
 */

METHODDEF void
write_tables_only (j_compress_ptr cinfo)
{
  int i;
#ifdef NIFTY
  int ci, prec;
  jpeg_component_info *compptr;
  
  emit_marker(cinfo, M_SOI);

  /* Emit DQT for each quantization table.
   * Only emit those tables that are actually associated with image components.
   * Note that emit_dqt() suppresses any duplicate tables.
   */
  prec = 0;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    prec += emit_dqt(cinfo, compptr->quant_tbl_no);
  }

  if (! cinfo->arith_code) {
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, FALSE);
      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, TRUE);
    }
  }


  emit_marker(cinfo, M_EOI);

#else

  emit_marker(cinfo, M_SOI);


  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    if (cinfo->quant_tbl_ptrs[i] != NULL)
      (void) emit_dqt(cinfo, i);
  }

  if (! cinfo->arith_code) {
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, FALSE);
      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, TRUE);
    }
  }

  emit_marker(cinfo, M_EOI);
#endif
}


/*
 * Initialize the marker writer module.
 */

GLOBAL void
jinit_marker_writer (j_compress_ptr cinfo)
{
  /* Create the subobject */
  cinfo->marker = (struct jpeg_marker_writer *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(struct jpeg_marker_writer));
  /* Initialize method pointers */
  cinfo->marker->write_any_marker = write_any_marker;
  cinfo->marker->write_file_header = write_file_header;
  cinfo->marker->write_frame_header = write_frame_header;
  cinfo->marker->write_scan_header = write_scan_header;
  cinfo->marker->write_file_trailer = write_file_trailer;
  cinfo->marker->write_tables_only = write_tables_only;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jchuff.cpp ===
/*
 * jchuff.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy encoding routines.
 *
 * Much of the complexity here has to do with supporting output suspension.
 * If the data destination module demands suspension, we want to be able to
 * back up to the start of the current MCU.  To do this, we copy state
 * variables into local working storage, and update them back to the
 * permanent JPEG objects only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jchuff.h"		/* Declarations shared with jcphuff.c */


/* Expanded entropy encoder object for Huffman encoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  INT32 put_buffer;		/* current bit-accumulation buffer */
  int put_bits;			/* # of bits now in it */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).put_buffer = (src).put_buffer, \
	 (dest).put_bits = (src).put_bits, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_encoder pub; /* public fields */

  savable_state saved;		/* Bit buffer & DC state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  int next_restart_num;		/* next restart number to write (0-7) */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];

#ifdef ENTROPY_OPT_SUPPORTED	/* Statistics tables for optimization */
  long * dc_count_ptrs[NUM_HUFF_TBLS];
  long * ac_count_ptrs[NUM_HUFF_TBLS];
#endif
} huff_entropy_encoder;

typedef huff_entropy_encoder * huff_entropy_ptr;

/* Working state while writing an MCU.
 * This struct contains all the fields that are needed by subroutines.
 */

typedef struct {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
  savable_state cur;		/* Current bit buffer & DC state */
  j_compress_ptr cinfo;		/* dump_buffer needs access to this */
} working_state;


/* Forward declarations */
METHODDEF boolean encode_mcu_huff JPP((j_compress_ptr cinfo,
				       JBLOCKROW *MCU_data));
METHODDEF void finish_pass_huff JPP((j_compress_ptr cinfo));
#ifdef ENTROPY_OPT_SUPPORTED
METHODDEF boolean encode_mcu_gather JPP((j_compress_ptr cinfo,
					 JBLOCKROW *MCU_data));
METHODDEF void finish_pass_gather JPP((j_compress_ptr cinfo));
#endif


/*
 * Initialize for a Huffman-compressed scan.
 * If gather_statistics is TRUE, we do not output anything during the scan,
 * just count the Huffman symbols used and generate Huffman code tables.
 */

METHODDEF void
start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
    entropy->pub.encode_mcu = encode_mcu_gather;
    entropy->pub.finish_pass = finish_pass_gather;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    entropy->pub.encode_mcu = encode_mcu_huff;
    entropy->pub.finish_pass = finish_pass_huff;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    /* (In gather mode, tables need not be allocated yet) */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	(cinfo->dc_huff_tbl_ptrs[dctbl] == NULL && !gather_statistics))
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	(cinfo->ac_huff_tbl_ptrs[actbl] == NULL && !gather_statistics))
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
      /* Allocate and zero the statistics tables */
      /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
      if (entropy->dc_count_ptrs[dctbl] == NULL)
	entropy->dc_count_ptrs[dctbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
      MEMZERO(entropy->dc_count_ptrs[dctbl], 257 * SIZEOF(long));
      if (entropy->ac_count_ptrs[actbl] == NULL)
	entropy->ac_count_ptrs[actbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
      MEMZERO(entropy->ac_count_ptrs[actbl], 257 * SIZEOF(long));
#endif
    } else {
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      jpeg_make_c_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
			      & entropy->dc_derived_tbls[dctbl]);
      jpeg_make_c_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
			      & entropy->ac_derived_tbls[actbl]);
    }
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bit buffer to empty */
  entropy->saved.put_buffer = 0;
  entropy->saved.put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
  entropy->next_restart_num = 0;
}


/*
 * Compute the derived values for a Huffman table.
 * Note this is also used by jcphuff.c.
 */

GLOBAL void
jpeg_make_c_derived_tbl (j_compress_ptr cinfo, JHUFF_TBL * htbl,
			 c_derived_tbl ** pdtbl)
{
  c_derived_tbl *dtbl;
  int p, i, l, lastp, si;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (c_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(c_derived_tbl));
  dtbl = *pdtbl;
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  lastp = p;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }
  
  /* Figure C.3: generate encoding tables */
  /* These are code and size indexed by symbol value */

  /* Set any codeless symbols to have code length 0;
   * this allows emit_bits to detect any attempt to emit such symbols.
   */
  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));

  for (p = 0; p < lastp; p++) {
    dtbl->ehufco[htbl->huffval[p]] = huffcode[p];
    dtbl->ehufsi[htbl->huffval[p]] = huffsize[p];
  }
}


/* Outputting bytes to the file */

/* Emit a byte, taking 'action' if must suspend. */
#define emit_byte(state,val,action)  \
	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
	  if (--(state)->free_in_buffer == 0)  \
	    if (! dump_buffer(state))  \
	      { action; } }


LOCAL boolean
dump_buffer (working_state * state)
/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
  struct jpeg_destination_mgr * dest = state->cinfo->dest;

  if (! (*dest->empty_output_buffer) (state->cinfo))
    return FALSE;
  /* After a successful buffer dump, must reset buffer pointers */
  state->next_output_byte = dest->next_output_byte;
  state->free_in_buffer = dest->free_in_buffer;
  return TRUE;
}


/* Outputting bits to the file */

/* Only the right 24 bits of put_buffer are used; the valid bits are
 * left-justified in this part.  At most 16 bits can be passed to emit_bits
 * in one call, and we never retain more than 7 bits in put_buffer
 * between calls, so 24 bits are sufficient.
 */

INLINE
LOCAL boolean
emit_bits (working_state * state, unsigned int code, int size)
/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = state->cur.put_bits;

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
    ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
  
  put_bits += size;		/* new number of bits in buffer */
  
  put_buffer <<= 24 - put_bits; /* align incoming bits */

  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
  
  while (put_bits >= 8) {
    int c = (int) ((put_buffer >> 16) & 0xFF);
    
    emit_byte(state, c, return FALSE);
    if (c == 0xFF) {		/* need to stuff a zero byte? */
      emit_byte(state, 0, return FALSE);
    }
    put_buffer <<= 8;
    put_bits -= 8;
  }

  state->cur.put_buffer = put_buffer; /* update state variables */
  state->cur.put_bits = put_bits;

  return TRUE;
}


LOCAL boolean
flush_bits (working_state * state)
{
  if (! emit_bits(state, 0x7F, 7)) /* fill any partial byte with ones */
    return FALSE;
  state->cur.put_buffer = 0;	/* and reset bit-buffer to empty */
  state->cur.put_bits = 0;
  return TRUE;
}


/* Encode a single block's worth of coefficients */

LOCAL boolean
encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
{
  register int temp, temp2;
  register int nbits;
  register int k, r, i;
  
  /* Encode the DC coefficient difference per section F.1.2.1 */
  
  temp = temp2 = block[0] - last_dc_val;

  if (temp < 0) {
    temp = -temp;		/* temp is abs value of input */
    /* For a negative input, want temp2 = bitwise complement of abs(input) */
    /* This code assumes we are on a two's complement machine */
    temp2--;
  }
  
  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
    nbits++;
    temp >>= 1;
  }
  
  /* Emit the Huffman-coded symbol for the number of bits */
  if (! emit_bits(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
    return FALSE;

  /* Emit that number of bits of the value, if positive, */
  /* or the complement of its magnitude, if negative. */
  if (nbits)			/* emit_bits rejects calls with size 0 */
    if (! emit_bits(state, (unsigned int) temp2, nbits))
      return FALSE;

  /* Encode the AC coefficients per section F.1.2.2 */
  
  r = 0;			/* r = run length of zeros */
  
  for (k = 1; k < DCTSIZE2; k++) {
    if ((temp = block[jpeg_natural_order[k]]) == 0) {
      r++;
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	if (! emit_bits(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
	  return FALSE;
	r -= 16;
      }

      temp2 = temp;
      if (temp < 0) {
	temp = -temp;		/* temp is abs value of input */
	/* This code assumes we are on a two's complement machine */
	temp2--;
      }
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
      while ((temp >>= 1))
	nbits++;
      
      /* Emit Huffman symbol for run length / number of bits */
      i = (r << 4) + nbits;
      if (! emit_bits(state, actbl->ehufco[i], actbl->ehufsi[i]))
	return FALSE;

      /* Emit that number of bits of the value, if positive, */
      /* or the complement of its magnitude, if negative. */
      if (! emit_bits(state, (unsigned int) temp2, nbits))
	return FALSE;
      
      r = 0;
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
    if (! emit_bits(state, actbl->ehufco[0], actbl->ehufsi[0]))
      return FALSE;

  return TRUE;
}


/*
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL boolean
emit_restart (working_state * state, int restart_num)
{
  int ci;

  if (! flush_bits(state))
    return FALSE;

  emit_byte(state, 0xFF, return FALSE);
  emit_byte(state, JPEG_RST0 + restart_num, return FALSE);

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
    state->cur.last_dc_val[ci] = 0;

  /* The restart counter is not updated until we successfully write the MCU. */

  return TRUE;
}


/*
 * Encode and output one MCU's worth of Huffman-compressed coefficients.
 */

METHODDEF boolean
encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Load up working state */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! emit_restart(&state, entropy->next_restart_num))
	return FALSE;
  }

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    if (! encode_one_block(&state,
			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
      return FALSE;
    /* Update last_dc_val */
    state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  /* Completed MCU, so update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * Finish up at the end of a Huffman-compressed scan.
 */

METHODDEF void
finish_pass_huff (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;

  /* Load up working state ... flush_bits needs it */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Flush out the last data */
  if (! flush_bits(&state))
    ERREXIT(cinfo, JERR_CANT_SUSPEND);

  /* Update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);
}


/*
 * Huffman coding optimization.
 *
 * This actually is optimization, in the sense that we find the best possible
 * Huffman table(s) for the given data.  We first scan the supplied data and
 * count the number of uses of each symbol that is to be Huffman-coded.
 * (This process must agree with the code above.)  Then we build an
 * optimal Huffman coding tree for the observed counts.
 *
 * The JPEG standard requires Huffman codes to be no more than 16 bits long.
 * If some symbols have a very small but nonzero probability, the Huffman tree
 * must be adjusted to meet the code length restriction.  We currently use
 * the adjustment method suggested in the JPEG spec.  This method is *not*
 * optimal; it may not choose the best possible limited-length code.  But
 * since the symbols involved are infrequently used, it's not clear that
 * going to extra trouble is worthwhile.
 */

#ifdef ENTROPY_OPT_SUPPORTED


/* Process a single block's worth of coefficients */

LOCAL void
htest_one_block (JCOEFPTR block, int last_dc_val,
		 long dc_counts[], long ac_counts[])
{
  register int temp;
  register int nbits;
  register int k, r;
  
  /* Encode the DC coefficient difference per section F.1.2.1 */
  
  temp = block[0] - last_dc_val;
  if (temp < 0)
    temp = -temp;
  
  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
    nbits++;
    temp >>= 1;
  }

  /* Count the Huffman symbol for the number of bits */
  dc_counts[nbits]++;
  
  /* Encode the AC coefficients per section F.1.2.2 */
  
  r = 0;			/* r = run length of zeros */
  
  for (k = 1; k < DCTSIZE2; k++) {
    if ((temp = block[jpeg_natural_order[k]]) == 0) {
      r++;
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	ac_counts[0xF0]++;
	r -= 16;
      }
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      if (temp < 0)
	temp = -temp;
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
      while ((temp >>= 1))
	nbits++;
      
      /* Count Huffman symbol for run length / number of bits */
      ac_counts[(r << 4) + nbits]++;
      
      r = 0;
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
    ac_counts[0]++;
}


/*
 * Trial-encode one MCU's worth of Huffman-compressed coefficients.
 * No data is actually output, so no suspension return is possible.
 */

METHODDEF boolean
encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Take care of restart intervals if needed */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      /* Re-initialize DC predictions to 0 */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
	entropy->saved.last_dc_val[ci] = 0;
      /* Update restart state */
      entropy->restarts_to_go = cinfo->restart_interval;
    }
    entropy->restarts_to_go--;
  }

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    htest_one_block(MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  return TRUE;
}


/*
 * Generate the optimal coding for the given counts, fill htbl.
 * Note this is also used by jcphuff.c.
 */

GLOBAL void
jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
{
#define MAX_CLEN 32		/* assumed maximum initial code length */
  UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
  int codesize[257];		/* codesize[k] = code length of symbol k */
  int others[257];		/* next symbol in current branch of tree */
  int c1, c2;
  int p, i, j;
  long v;

  /* This algorithm is explained in section K.2 of the JPEG standard */

  MEMZERO(bits, SIZEOF(bits));
  MEMZERO(codesize, SIZEOF(codesize));
  for (i = 0; i < 257; i++)
    others[i] = -1;		/* init links to empty */
  
  freq[256] = 1;		/* make sure there is a nonzero count */
  /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
   * that no real symbol is given code-value of all ones, because 256
   * will be placed in the largest codeword category.
   */

  /* Huffman's basic algorithm to assign optimal code lengths to symbols */

  for (;;) {
    /* Find the smallest nonzero frequency, set c1 = its symbol */
    /* In case of ties, take the larger symbol number */
    c1 = -1;
    v = 1000000000L;
    for (i = 0; i <= 256; i++) {
      if (freq[i] && freq[i] <= v) {
	v = freq[i];
	c1 = i;
      }
    }

    /* Find the next smallest nonzero frequency, set c2 = its symbol */
    /* In case of ties, take the larger symbol number */
    c2 = -1;
    v = 1000000000L;
    for (i = 0; i <= 256; i++) {
      if (freq[i] && freq[i] <= v && i != c1) {
	v = freq[i];
	c2 = i;
      }
    }

    /* Done if we've merged everything into one frequency */
    if (c2 < 0)
      break;
    
    /* Else merge the two counts/trees */
    freq[c1] += freq[c2];
    freq[c2] = 0;

    /* Increment the codesize of everything in c1's tree branch */
    codesize[c1]++;
    while (others[c1] >= 0) {
      c1 = others[c1];
      codesize[c1]++;
    }
    
    others[c1] = c2;		/* chain c2 onto c1's tree branch */
    
    /* Increment the codesize of everything in c2's tree branch */
    codesize[c2]++;
    while (others[c2] >= 0) {
      c2 = others[c2];
      codesize[c2]++;
    }
  }

  /* Now count the number of symbols of each code length */
  for (i = 0; i <= 256; i++) {
    if (codesize[i]) {
      /* The JPEG standard seems to think that this can't happen, */
      /* but I'm paranoid... */
      if (codesize[i] > MAX_CLEN)
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);

      bits[codesize[i]]++;
    }
  }

  /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
   * Huffman procedure assigned any such lengths, we must adjust the coding.
   * Here is what the JPEG spec says about how this next bit works:
   * Since symbols are paired for the longest Huffman code, the symbols are
   * removed from this length category two at a time.  The prefix for the pair
   * (which is one bit shorter) is allocated to one of the pair; then,
   * skipping the BITS entry for that prefix length, a code word from the next
   * shortest nonzero BITS entry is converted into a prefix for two code words
   * one bit longer.
   */
  
  for (i = MAX_CLEN; i > 16; i--) {
    while (bits[i] > 0) {
      j = i - 2;		/* find length of new prefix to be used */
      while (bits[j] == 0)
	j--;
      
      bits[i] -= 2;		/* remove two symbols */
      bits[i-1]++;		/* one goes in this length */
      bits[j+1] += 2;		/* two new symbols in this length */
      bits[j]--;		/* symbol of this length is now a prefix */
    }
  }

  /* Remove the count for the pseudo-symbol 256 from the largest codelength */
  while (bits[i] == 0)		/* find largest codelength still in use */
    i--;
  bits[i]--;
  
  /* Return final symbol counts (only for lengths 0..16) */
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
  
  /* Return a list of the symbols sorted by code length */
  /* It's not real clear to me why we don't need to consider the codelength
   * changes made above, but the JPEG spec seems to think this works.
   */
  p = 0;
  for (i = 1; i <= MAX_CLEN; i++) {
    for (j = 0; j <= 255; j++) {
      if (codesize[j] == i) {
	htbl->huffval[p] = (UINT8) j;
	p++;
      }
    }
  }

  /* Set sent_table FALSE so updated table will be written to JPEG file. */
  htbl->sent_table = FALSE;
}


/*
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF void
finish_pass_gather (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;
  JHUFF_TBL **htblptr;
  boolean did_dc[NUM_HUFF_TBLS];
  boolean did_ac[NUM_HUFF_TBLS];

  /* It's important not to apply jpeg_gen_optimal_table more than once
   * per table, because it clobbers the input frequency counts!
   */
  MEMZERO(did_dc, SIZEOF(did_dc));
  MEMZERO(did_ac, SIZEOF(did_ac));

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    if (! did_dc[dctbl]) {
      htblptr = & cinfo->dc_huff_tbl_ptrs[dctbl];
      if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[dctbl]);
      did_dc[dctbl] = TRUE;
    }
    if (! did_ac[actbl]) {
      htblptr = & cinfo->ac_huff_tbl_ptrs[actbl];
      if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[actbl]);
      did_ac[actbl] = TRUE;
    }
  }
}


#endif /* ENTROPY_OPT_SUPPORTED */


/*
 * Module initialization routine for Huffman entropy encoding.
 */

GLOBAL void
jinit_huff_encoder (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_huff;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
#ifdef ENTROPY_OPT_SUPPORTED
    entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
#endif
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcmainct.cpp ===
/*
 * jcmainct.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for compression.
 * The main buffer lies between the pre-processor and the JPEG
 * compressor proper; it holds downsampled data in the JPEG colorspace.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Note: currently, there is no operating mode in which a full-image buffer
 * is needed at this step.  If there were, that mode could not be used with
 * "raw data" input, since this module is bypassed in that case.  However,
 * we've left the code here for possible use in special applications.
 */
#undef FULL_MAIN_BUFFER_SUPPORTED


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_main_controller pub; /* public fields */

  JDIMENSION cur_iMCU_row;	/* number of current iMCU row */
  JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
  boolean suspended;		/* remember if we suspended output */
  J_BUF_MODE pass_mode;		/* current operating mode */

  /* If using just a strip buffer, this points to the entire set of buffers
   * (we allocate one for each component).  In the full-image case, this
   * points to the currently accessible strips of the virtual arrays.
   */
  JSAMPARRAY buffer[MAX_COMPONENTS];

#ifdef FULL_MAIN_BUFFER_SUPPORTED
  /* If using full-image storage, this array holds pointers to virtual-array
   * control blocks for each component.  Unused if not full-image storage.
   */
  jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
#endif
} my_main_controller;

typedef my_main_controller * my_main_ptr;


/* Forward declarations */
METHODDEF void process_data_simple_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#ifdef FULL_MAIN_BUFFER_SUPPORTED
METHODDEF void process_data_buffer_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Do nothing in raw-data mode. */
  if (cinfo->raw_data_in)
    return;

  main->cur_iMCU_row = 0;	/* initialize counters */
  main->rowgroup_ctr = 0;
  main->suspended = FALSE;
  main->pass_mode = pass_mode;	/* save mode for use by process_data */

  switch (pass_mode) {
  case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    if (main->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
    main->pub.process_data = process_data_simple_main;
    break;
#ifdef FULL_MAIN_BUFFER_SUPPORTED
  case JBUF_SAVE_SOURCE:
  case JBUF_CRANK_DEST:
  case JBUF_SAVE_AND_PASS:
    if (main->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    main->pub.process_data = process_data_buffer_main;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This routine handles the simple pass-through mode,
 * where we have only a strip buffer.
 */

METHODDEF void
process_data_simple_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
    /* Read input data if we haven't filled the main buffer yet */
    if (main->rowgroup_ctr < DCTSIZE)
      (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);

    /* If we don't have a full iMCU row buffered, return to application for
     * more data.  Note that preprocessor will always pad to fill the iMCU row
     * at the bottom of the image.
     */
    if (main->rowgroup_ctr != DCTSIZE)
      return;

    /* Send the completed row to the compressor */
    if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
      /* If compressor did not consume the whole row, then we must need to
       * suspend processing and return to the application.  In this situation
       * we pretend we didn't yet consume the last input row; otherwise, if
       * it happened to be the last row of the image, the application would
       * think we were done.
       */
      if (! main->suspended) {
	(*in_row_ctr)--;
	main->suspended = TRUE;
      }
      return;
    }
    /* We did finish the row.  Undo our little suspension hack if a previous
     * call suspended; then mark the main buffer empty.
     */
    if (main->suspended) {
      (*in_row_ctr)++;
      main->suspended = FALSE;
    }
    main->rowgroup_ctr = 0;
    main->cur_iMCU_row++;
  }
}


#ifdef FULL_MAIN_BUFFER_SUPPORTED

/*
 * Process some data.
 * This routine handles all of the modes that use a full-size buffer.
 */

METHODDEF void
process_data_buffer_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci;
  jpeg_component_info *compptr;
  boolean writing = (main->pass_mode != JBUF_CRANK_DEST);

  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
    /* Realign the virtual buffers if at the start of an iMCU row. */
    if (main->rowgroup_ctr == 0) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	main->buffer[ci] = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, main->whole_image[ci],
	   main->cur_iMCU_row * (compptr->v_samp_factor * DCTSIZE),
	   (JDIMENSION) (compptr->v_samp_factor * DCTSIZE), writing);
      }
      /* In a read pass, pretend we just read some source data. */
      if (! writing) {
	*in_row_ctr += cinfo->max_v_samp_factor * DCTSIZE;
	main->rowgroup_ctr = DCTSIZE;
      }
    }

    /* If a write pass, read input data until the current iMCU row is full. */
    /* Note: preprocessor will pad if necessary to fill the last iMCU row. */
    if (writing) {
      (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);
      /* Return to application if we need more data to fill the iMCU row. */
      if (main->rowgroup_ctr < DCTSIZE)
	return;
    }

    /* Emit data, unless this is a sink-only pass. */
    if (main->pass_mode != JBUF_SAVE_SOURCE) {
      if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
	/* If compressor did not consume the whole row, then we must need to
	 * suspend processing and return to the application.  In this situation
	 * we pretend we didn't yet consume the last input row; otherwise, if
	 * it happened to be the last row of the image, the application would
	 * think we were done.
	 */
	if (! main->suspended) {
	  (*in_row_ctr)--;
	  main->suspended = TRUE;
	}
	return;
      }
      /* We did finish the row.  Undo our little suspension hack if a previous
       * call suspended; then mark the main buffer empty.
       */
      if (main->suspended) {
	(*in_row_ctr)++;
	main->suspended = FALSE;
      }
    }

    /* If get here, we are done with this iMCU row.  Mark buffer empty. */
    main->rowgroup_ctr = 0;
    main->cur_iMCU_row++;
  }
}

#endif /* FULL_MAIN_BUFFER_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL void
jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_c_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  /* We don't need to create a buffer in raw-data mode. */
  if (cinfo->raw_data_in)
    return;

  /* Create the buffer.  It holds downsampled data, so each component
   * may be of a different size.
   */
  if (need_full_buffer) {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    /* Allocate a full-image virtual array for each component */
    /* Note we pad the bottom to a multiple of the iMCU height */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      main->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 compptr->width_in_blocks * DCTSIZE,
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor) * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
    /* Allocate a strip buffer for each component */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcmaster.cpp ===
/*
 * jcmaster.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG compressor.
 * These routines are concerned with parameter validation, initial setup,
 * and inter-pass control (determining the number of passes and the work 
 * to be done in each pass).
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef enum {
	main_pass,		/* input data, also do first output step */
	huff_opt_pass,		/* Huffman code optimization pass */
	output_pass		/* data output pass */
} c_pass_type;

typedef struct {
  struct jpeg_comp_master pub;	/* public fields */

  c_pass_type pass_type;	/* the type of the current pass */

  int pass_number;		/* # of passes completed */
  int total_passes;		/* total # of passes needed */

  int scan_number;		/* current index in scan_info[] */
} my_comp_master;

typedef my_comp_master * my_master_ptr;


/*
 * Support routines that do various essential calculations.
 */

LOCAL void
initial_setup (j_compress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Sanity check on image dimensions */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0 || cinfo->input_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* Width of an input scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Fill in the correct component_index value; don't rely on application */
    compptr->component_index = ci;
    /* For compression, we never do DCT scaling. */
    compptr->DCT_scaled_size = DCTSIZE;
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
    /* Mark component needed (this flag isn't actually used for compression) */
    compptr->component_needed = TRUE;
  }

  /* Compute number of fully interleaved MCU rows (number of times that
   * main controller will call coefficient controller).
   */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
}


#ifdef C_MULTISCAN_FILES_SUPPORTED

LOCAL void
validate_script (j_compress_ptr cinfo)
/* Verify that the scan script in cinfo->scan_info[] is valid; also
 * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
 */
{
  const jpeg_scan_info * scanptr;
  int scanno, ncomps, ci, coefi, thisi;
  int Ss, Se, Ah, Al;
  boolean component_sent[MAX_COMPONENTS];
#ifdef C_PROGRESSIVE_SUPPORTED
  int * last_bitpos_ptr;
  int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
  /* -1 until that coefficient has been seen; then last Al for it */
#endif

  if (cinfo->num_scans <= 0)
    ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);

  /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
   * for progressive JPEG, no scan can have this.
   */
  scanptr = cinfo->scan_info;
  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
    cinfo->progressive_mode = TRUE;
    last_bitpos_ptr = & last_bitpos[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
      for (coefi = 0; coefi < DCTSIZE2; coefi++)
	*last_bitpos_ptr++ = -1;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    cinfo->progressive_mode = FALSE;
    for (ci = 0; ci < cinfo->num_components; ci++) 
      component_sent[ci] = FALSE;
  }

  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
    /* Validate component indexes */
    ncomps = scanptr->comps_in_scan;
    if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
    for (ci = 0; ci < ncomps; ci++) {
      thisi = scanptr->component_index[ci];
      if (thisi < 0 || thisi >= cinfo->num_components)
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
      /* Components must appear in SOF order within each scan */
      if (ci > 0 && thisi <= scanptr->component_index[ci-1])
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    }
    /* Validate progression parameters */
    Ss = scanptr->Ss;
    Se = scanptr->Se;
    Ah = scanptr->Ah;
    Al = scanptr->Al;
    if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
      if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
	  Ah < 0 || Ah > 13 || Al < 0 || Al > 13)
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
      if (Ss == 0) {
	if (Se != 0)		/* DC and AC together not OK */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
      } else {
	if (ncomps != 1)	/* AC scans must be for only one component */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
      }
      for (ci = 0; ci < ncomps; ci++) {
	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	for (coefi = Ss; coefi <= Se; coefi++) {
	  if (last_bitpos_ptr[coefi] < 0) {
	    /* first scan of this coefficient */
	    if (Ah != 0)
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  } else {
	    /* not first scan */
	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  }
	  last_bitpos_ptr[coefi] = Al;
	}
      }
#endif
    } else {
      /* For sequential JPEG, all progression parameters must be these: */
      if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
      /* Make sure components are not sent twice */
      for (ci = 0; ci < ncomps; ci++) {
	thisi = scanptr->component_index[ci];
	if (component_sent[thisi])
	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
	component_sent[thisi] = TRUE;
      }
    }
  }

  /* Now verify that everything got sent. */
  if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
    /* For progressive mode, we only check that at least some DC data
     * got sent for each component; the spec does not require that all bits
     * of all coefficients be transmitted.  Would it be wiser to enforce
     * transmission of all coefficient bits??
     */
    for (ci = 0; ci < cinfo->num_components; ci++) {
      if (last_bitpos[ci][0] < 0)
	ERREXIT(cinfo, JERR_MISSING_DATA);
    }
#endif
  } else {
    for (ci = 0; ci < cinfo->num_components; ci++) {
      if (! component_sent[ci])
	ERREXIT(cinfo, JERR_MISSING_DATA);
    }
  }
}

#endif /* C_MULTISCAN_FILES_SUPPORTED */


LOCAL void
select_scan_parameters (j_compress_ptr cinfo)
/* Set up the scan parameters for the current scan */
{
  int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
  if (cinfo->scan_info != NULL) {
    /* Prepare for current scan --- the script is already validated */
    my_master_ptr master = (my_master_ptr) cinfo->master;
    const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

    cinfo->comps_in_scan = scanptr->comps_in_scan;
    for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
      cinfo->cur_comp_info[ci] =
	&cinfo->comp_info[scanptr->component_index[ci]];
    }
    cinfo->Ss = scanptr->Ss;
    cinfo->Se = scanptr->Se;
    cinfo->Ah = scanptr->Ah;
    cinfo->Al = scanptr->Al;
  }
  else
#endif
  {
    /* Prepare for single sequential-JPEG scan containing all components */
    if (cinfo->num_components > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	       MAX_COMPS_IN_SCAN);
    cinfo->comps_in_scan = cinfo->num_components;
    for (ci = 0; ci < cinfo->num_components; ci++) {
      cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
    }
    cinfo->Ss = 0;
    cinfo->Se = DCTSIZE2-1;
    cinfo->Ah = 0;
    cinfo->Al = 0;
  }
}


LOCAL void
per_scan_setup (j_compress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = DCTSIZE;
    compptr->last_col_width = 1;
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    if (tmp == 0) tmp = compptr->v_samp_factor;
    compptr->last_row_height = tmp;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * DCTSIZE;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }

  /* Convert restart specified in rows to actual MCU count. */
  /* Note that count must fit in 16 bits, so we provide limiting. */
  if (cinfo->restart_in_rows > 0) {
    long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
    cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
  }
}


/*
 * Per-pass setup.
 * This is called at the beginning of each pass.  We determine which modules
 * will be active during this pass and give them appropriate start_pass calls.
 * We also set is_last_pass to indicate whether any more passes will be
 * required.
 */

METHODDEF void
prepare_for_pass (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  switch (master->pass_type) {
  case main_pass:
    /* Initial pass: will collect input data, and do either Huffman
     * optimization or data output for the first scan.
     */
    select_scan_parameters(cinfo);
    per_scan_setup(cinfo);
    if (! cinfo->raw_data_in) {
      (*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->downsample->start_pass) (cinfo);
      (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
    }
    (*cinfo->fdct->start_pass) (cinfo);
    (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
    (*cinfo->coef->start_pass) (cinfo,
				(master->total_passes > 1 ?
				 JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    if (cinfo->optimize_coding) {
      /* No immediate data output; postpone writing frame/scan headers */
      master->pub.call_pass_startup = FALSE;
    } else {
      /* Will write frame/scan headers at first jpeg_write_scanlines call */
      master->pub.call_pass_startup = TRUE;
    }
    break;
#ifdef ENTROPY_OPT_SUPPORTED
  case huff_opt_pass:
    /* Do Huffman optimization for a scan after the first one. */
    select_scan_parameters(cinfo);
    per_scan_setup(cinfo);
    if (cinfo->Ss != 0 || cinfo->Ah == 0 || cinfo->arith_code) {
      (*cinfo->entropy->start_pass) (cinfo, TRUE);
      (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
      master->pub.call_pass_startup = FALSE;
      break;
    }
    /* Special case: Huffman DC refinement scans need no Huffman table
     * and therefore we can skip the optimization pass for them.
     */
    master->pass_type = output_pass;
    master->pass_number++;
    /*FALLTHROUGH*/
#endif
  case output_pass:
    /* Do a data-output pass. */
    /* We need not repeat per-scan setup if prior optimization pass did it. */
    if (! cinfo->optimize_coding) {
      select_scan_parameters(cinfo);
      per_scan_setup(cinfo);
    }
    (*cinfo->entropy->start_pass) (cinfo, FALSE);
    (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
    /* We emit frame/scan headers now */
    if (master->scan_number == 0)
      (*cinfo->marker->write_frame_header) (cinfo);
    (*cinfo->marker->write_scan_header) (cinfo);
    master->pub.call_pass_startup = FALSE;
    break;
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
  }

  master->pub.is_last_pass = (master->pass_number == master->total_passes-1);

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->total_passes;
  }
}


/*
 * Special start-of-pass hook.
 * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
 * In single-pass processing, we need this hook because we don't want to
 * write frame/scan headers during jpeg_start_compress; we want to let the
 * application write COM markers etc. between jpeg_start_compress and the
 * jpeg_write_scanlines loop.
 * In multi-pass processing, this routine is not used.
 */

METHODDEF void
pass_startup (j_compress_ptr cinfo)
{
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */

  (*cinfo->marker->write_frame_header) (cinfo);
  (*cinfo->marker->write_scan_header) (cinfo);
}


/*
 * Finish up at end of pass.
 */

METHODDEF void
finish_pass_master (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* The entropy coder always needs an end-of-pass call,
   * either to analyze statistics or to flush its output buffer.
   */
  (*cinfo->entropy->finish_pass) (cinfo);

  /* Update state for next pass */
  switch (master->pass_type) {
  case main_pass:
    /* next pass is either output of scan 0 (after optimization)
     * or output of scan 1 (if no optimization).
     */
    master->pass_type = output_pass;
    if (! cinfo->optimize_coding)
      master->scan_number++;
    break;
  case huff_opt_pass:
    /* next pass is always output of current scan */
    master->pass_type = output_pass;
    break;
  case output_pass:
    /* next pass is either optimization or output of next scan */
    if (cinfo->optimize_coding)
      master->pass_type = huff_opt_pass;
    master->scan_number++;
    break;
  }

  master->pass_number++;
}


/*
 * Initialize master compression control.
 */

GLOBAL void
jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_comp_master));
  cinfo->master = (struct jpeg_comp_master *) master;
  master->pub.prepare_for_pass = prepare_for_pass;
  master->pub.pass_startup = pass_startup;
  master->pub.finish_pass = finish_pass_master;
  master->pub.is_last_pass = FALSE;

  /* Validate parameters, determine derived values */
  initial_setup(cinfo);

  if (cinfo->scan_info != NULL) {
#ifdef C_MULTISCAN_FILES_SUPPORTED
    validate_script(cinfo);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    cinfo->progressive_mode = FALSE;
    cinfo->num_scans = 1;
  }

  if (cinfo->progressive_mode)	/*  TEMPORARY HACK ??? */
    cinfo->optimize_coding = TRUE; /* assume default tables no good for progressive mode */

  /* Initialize my private state */
  if (transcode_only) {
    /* no main pass in transcoding */
    if (cinfo->optimize_coding)
      master->pass_type = huff_opt_pass;
    else
      master->pass_type = output_pass;
  } else {
    /* for normal compression, first pass is always this type: */
    master->pass_type = main_pass;
  }
  master->scan_number = 0;
  master->pass_number = 0;
  if (cinfo->optimize_coding)
    master->total_passes = cinfo->num_scans * 2;
  else
    master->total_passes = cinfo->num_scans;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcomapi.cpp ===
/*
 * jcomapi.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface routines that are used for both
 * compression and decompression.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Abort processing of a JPEG compression or decompression operation,
 * but don't destroy the object itself.
 *
 * For this, we merely clean up all the nonpermanent memory pools.
 * Note that temp files (virtual arrays) are not allowed to belong to
 * the permanent pool, so we will be able to close all temp files here.
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL void
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
  }

  /* Reset overall state for possible reuse of object */
  cinfo->global_state = (cinfo->is_decompressor ? DSTATE_START : CSTATE_START);
}


/*
 * Destruction of a JPEG object.
 *
 * Everything gets deallocated except the master jpeg_compress_struct itself
 * and the error manager struct.  Both of these are supplied by the application
 * and must be freed, if necessary, by the application.  (Often they are on
 * the stack and so don't need to be freed anyway.)
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL void
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
    (*cinfo->mem->self_destruct) (cinfo);
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
  cinfo->global_state = 0;	/* mark it destroyed */
}


/*
 * Convenience routines for allocating quantization and Huffman tables.
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL JQUANT_TBL *
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}


GLOBAL JHUFF_TBL *
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jconfig.h ===
/* jconfig.h.  Generated automatically by configure.  */
/* jconfig.cfg --- source file edited by configure script */
/* see jconfig.doc for explanations */

#if defined (sun) || defined (aix)
#pragma ident "@(#)jconfig.h	1.11 14:32:24 07/17/97"
#else
 /* SCCSID = "@(#)jconfig.h	1.8 14:59:06 06/20/96" */
#endif

/* force NIFTY support to be compiled in. */
#ifndef NIFTY
#define NIFTY	1
#endif

#ifdef WIN32
// Start of specials for building in the Win32 environment

typedef unsigned char boolean;				// This has to match the typedef in the
											// Microsoft Development Environment

#ifndef MAX_ALLOC_CHUNK		
#define MAX_ALLOC_CHUNK  65528L
#endif

#define USE_MSDOS_MEMMGR
#define NO_MKTEMP
#define far

// End of specials for building in the Win32 environment
#endif

#define HAVE_PROTOTYPES 
#define HAVE_UNSIGNED_CHAR 
#define HAVE_UNSIGNED_SHORT 
#undef void
// rgvb
// #define const 
#undef CHAR_IS_UNSIGNED
#define HAVE_STDDEF_H 
#define HAVE_STDLIB_H 
#undef NEED_BSD_STRINGS
#undef NEED_SYS_TYPES_H
#undef NEED_FAR_POINTERS
#undef NEED_SHORT_EXTERNAL_NAMES
/* Define this if you get warnings about undefined structures. */
#undef INCOMPLETE_TYPES_BROKEN

#ifdef JPEG_INTERNALS

#undef RIGHT_SHIFT_IS_UNSIGNED
#define INLINE 
/* These are for configuring the JPEG memory manager. */
#undef DEFAULT_MAX_MEM
#undef NO_MKTEMP


#ifdef NIFTY
// rgvb. override the default DCT method.

	// specify the DCT method to use. We have several choices:
	//  JDCT_ISLOW: slow but accurate integer algorithm
	//  JDCT_IFAST: faster, less accurate integer method
	//  JDCT_FLOAT: floating-point method
	//  JDCT_DEFAULT: default method (normally JDCT_ISLOW)
	//  JDCT_FASTEST: fastest method (normally JDCT_IFAST)
	//
	// since our major customers are on Suns, we will use JDCT_FLOAT,
	// as it's fast on both the Sun and Mac. It's probably good
	// on a 486 DX or Pentium as well.

#if defined(sun) || defined(macintosh) || defined(WIN32) || defined (aix)
	#define JDCT_DEFAULT JDCT_FLOAT
#endif

#endif /* NIFTY */

#endif /* JPEG_INTERNALS */

#ifdef JPEG_CJPEG_DJPEG

#define BMP_SUPPORTED		/* BMP image file format */
#define GIF_SUPPORTED		/* GIF image file format */
#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
#undef RLE_SUPPORTED		/* Utah RLE image file format */
#define TARGA_SUPPORTED		/* Targa image file format */

#undef TWO_FILE_COMMANDLINE
#undef NEED_SIGNAL_CATCHER
#define DONT_USE_B_MODE 

/* Define this if you want percent-done progress reports from cjpeg/djpeg. */
#undef PROGRESS_REPORT

#endif /* JPEG_CJPEG_DJPEG */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcparam.cpp ===
/*
 * jcparam.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains optional default-setting code for the JPEG compressor.
 * Applications do not have to use this file, but those that don't use it
 * must know a lot more about the innards of the JPEG code.
 */

/* SCCSID = "@(#)jcparam.cc	1.4 11:43:20 09/04/96" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Quantization table setup routines
 */

GLOBAL void
jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl,
		      const unsigned int *basic_table,
		      int scale_factor, boolean force_baseline)
/* Define a quantization table equal to the basic_table times
 * a scale factor (given as a percentage).
 * If force_baseline is TRUE, the computed quantization table entries
 * are limited to 1..255 for JPEG baseline compatibility.
 */
{
  JQUANT_TBL ** qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
  int i;
  long temp;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (*qtblptr == NULL) {
    *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);
  }

    for (i = 0; i < DCTSIZE2; i++) {
      temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
      /* limit the values to the valid range */
      if (temp <= 0L) temp = 1L;
      if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
      if (force_baseline && temp > 255L)
        temp = 255L;		/* limit to baseline range if requested */
      (*qtblptr)->quantval[i] = (UINT16) temp;
    }

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*qtblptr)->sent_table = FALSE;
}


GLOBAL void
jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor,
			 boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables
 * and a straight percentage-scaling quality scale.  In most cases it's better
 * to use jpeg_set_quality (below); this entry point is provided for
 * applications that insist on a linear percentage scaling.
 */
{
  /* This is the sample quantization table given in the JPEG spec section K.1,
   * but expressed in zigzag order (as are all of our quant. tables).
   * The spec says that the values given produce "good" quality, and
   * when divided by 2, "very good" quality.
   */
  static const unsigned int std_luminance_quant_tbl[DCTSIZE2] = {
    16,  11,  12,  14,  12,  10,  16,  14,
    13,  14,  18,  17,  16,  19,  24,  40,
    26,  24,  22,  22,  24,  49,  35,  37,
    29,  40,  58,  51,  61,  60,  57,  51,
    56,  55,  64,  72,  92,  78,  64,  68,
    87,  69,  55,  56,  80, 109,  81,  87,
    95,  98, 103, 104, 103,  62,  77, 113,
    121, 112, 100, 120,  92, 101, 103,  99
    };
  static const unsigned int std_chrominance_quant_tbl[DCTSIZE2] = {
    17,  18,  18,  24,  21,  24,  47,  26,
    26,  47,  99,  66,  56,  66,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
    };

  /* Set up two quantization tables using the specified scaling */
  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		       scale_factor, force_baseline);
  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
		       scale_factor, force_baseline);
}


GLOBAL int
jpeg_quality_scaling (int quality)
/* Convert a user-specified quality rating to a percentage scaling factor
 * for an underlying quantization table, using our recommended scaling curve.
 * The input 'quality' factor should be 0 (terrible) to 100 (very good).
 */
{
  /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
  if (quality <= 0) quality = 1;
  if (quality > 100) quality = 100;

  /* The basic table is used as-is (scaling 100) for a quality of 50.
   * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
   * note that at Q=100 the scaling is 0, which will cause j_add_quant_table
   * to make all the table entries 1 (hence, no quantization loss).
   * Qualities 1..50 are converted to scaling percentage 5000/Q.
   */
  if (quality < 50)
    quality = 5000 / quality;
  else
    quality = 200 - quality*2;

  return quality;
}


GLOBAL void
jpeg_set_quality (j_compress_ptr cinfo, int quality, boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables.
 * This is the standard quality-adjusting entry point for typical user
 * interfaces; only those who want detailed control over quantization tables
 * would use the preceding three routines directly.
 */
{
  /* Convert user 0-100 rating to percentage scaling */
  quality = jpeg_quality_scaling(quality);

  /* Set up standard quality tables */
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
}


/*
 * Huffman table setup routines
 */

LOCAL void
add_huff_table (j_compress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
  if (*htblptr == NULL)
    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
  MEMCOPY((*htblptr)->huffval, val, SIZEOF((*htblptr)->huffval));

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*htblptr)->sent_table = FALSE;
}


LOCAL void
std_huff_tables (j_compress_ptr cinfo)
/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
/* IMPORTANT: these are only valid for 8-bit data precision! */
{
  static const UINT8 bits_dc_luminance[17] =
    { /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_luminance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_dc_chrominance[17] =
    { /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_chrominance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_ac_luminance[17] =
    { /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
  static const UINT8 val_ac_luminance[] =
    { 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
      0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
      0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
      0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
      0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
      0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
      0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
      0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
      0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
      0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
      0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
      0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
      0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
      0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
      0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
      0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
      0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
      0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
      0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };
  
  static const UINT8 bits_ac_chrominance[17] =
    { /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
  static const UINT8 val_ac_chrominance[] =
    { 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
      0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
      0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
      0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
      0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
      0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
      0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
      0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
      0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
      0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
      0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
      0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
      0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };
  
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
		 bits_dc_luminance, val_dc_luminance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
		 bits_ac_luminance, val_ac_luminance);
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
		 bits_dc_chrominance, val_dc_chrominance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
		 bits_ac_chrominance, val_ac_chrominance);
}


/*
 * Default parameter setup for compression.
 *
 * Applications that don't choose to use this routine must do their
 * own setup of all these parameters.  Alternately, you can call this
 * to establish defaults and then alter parameters selectively.  This
 * is the recommended approach since, if we add any new parameters,
 * your code will still work (they'll be set to reasonable defaults).
 */

GLOBAL void
jpeg_set_defaults (j_compress_ptr cinfo)
{
  int i;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* Allocate comp_info array large enough for maximum component count.
   * Array is made permanent in case application wants to compress
   * multiple images at same param settings.
   */
  if (cinfo->comp_info == NULL)
    cinfo->comp_info = (jpeg_component_info *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  MAX_COMPONENTS * SIZEOF(jpeg_component_info));

  /* Initialize everything not dependent on the color space */

  cinfo->data_precision = BITS_IN_JSAMPLE;
  /* Set up two quantization tables using default quality of 75 */
  jpeg_set_quality(cinfo, 75, TRUE);
  /* Set up two Huffman tables */
  std_huff_tables(cinfo);

  /* Initialize default arithmetic coding conditioning */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }

  /* Default is no multiple-scan output */
  cinfo->scan_info = NULL;
  cinfo->num_scans = 0;

  /* Expect normal source image, not raw downsampled data */
  cinfo->raw_data_in = FALSE;

  /* Use Huffman coding, not arithmetic coding, by default */
  cinfo->arith_code = FALSE;

  /* By default, don't do extra passes to optimize entropy coding */
  cinfo->optimize_coding = FALSE;
  /* The standard Huffman tables are only valid for 8-bit data precision.
   * If the precision is higher, force optimization on so that usable
   * tables will be computed.  This test can be removed if default tables
   * are supplied that are valid for the desired precision.
   */
  if (cinfo->data_precision > 8)
    cinfo->optimize_coding = TRUE;

  /* By default, use the simpler non-cosited sampling alignment */
  cinfo->CCIR601_sampling = FALSE;

  /* No input smoothing */
  cinfo->smoothing_factor = 0;

  /* DCT algorithm preference */
  cinfo->dct_method = JDCT_DEFAULT;

  /* No restart markers */
  cinfo->restart_interval = 0;
  cinfo->restart_in_rows = 0;

  /* Fill in default JFIF marker parameters.  Note that whether the marker
   * will actually be written is determined by jpeg_set_colorspace.
   */
  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
  cinfo->Y_density = 1;

#ifdef NIFTY
  /* bytes_in_buffer is none */
  /* it's not at all clear that this is the correct place
  	 to do this, but why not??? */
  cinfo->bytes_in_buffer = 0;
#endif

  /* Choose JPEG colorspace based on input space, set defaults accordingly */

  jpeg_default_colorspace(cinfo);
}


/*
 * Select an appropriate JPEG colorspace for in_color_space.
 */

GLOBAL void
jpeg_default_colorspace (j_compress_ptr cinfo)
{
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
    jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
    break;
  case JCS_RGB:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
    break;
  case JCS_YCbCr:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
    break;
  case JCS_CMYK:
    jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
    break;
  case JCS_YCCK:
    jpeg_set_colorspace(cinfo, JCS_YCCK);
    break;
#ifdef NIFTY
	/* support for various NIFTY colorspaces. */
  case JCS_YCC:
    jpeg_set_colorspace(cinfo, JCS_YCC);
    break;

  case JCS_YCCA:
    jpeg_set_colorspace(cinfo, JCS_YCCA);
    break;

  case JCS_RGBA:
    jpeg_set_colorspace(cinfo, JCS_YCbCrA);
    break;

  case JCS_RGBA_LEGACY:
    jpeg_set_colorspace(cinfo, JCS_YCbCrA_LEGACY);
    break;

  case JCS_YCbCrA:
    jpeg_set_colorspace(cinfo, JCS_YCbCrA);
    break;

  case JCS_YCbCrA_LEGACY:
  	/* JCS_YCbCrA_LEGACY is only allowed as a JPEG colorspace.
  	   NEVER as an input colorspace. */
    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
#endif
  case JCS_UNKNOWN:
    jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
  }
}


/*
 * Set the JPEG colorspace, and choose colorspace-dependent default values.
 */

GLOBAL void
jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
  jpeg_component_info * compptr;
  int ci;

#define SET_COMP(index,id,hsamp,vsamp,quant,dctbl,actbl)  \
  (compptr = &cinfo->comp_info[index], \
   compptr->component_id = (id), \
   compptr->h_samp_factor = (hsamp), \
   compptr->v_samp_factor = (vsamp), \
   compptr->quant_tbl_no = (quant), \
   compptr->dc_tbl_no = (dctbl), \
   compptr->ac_tbl_no = (actbl) )

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
   * tables 1 for chrominance components.
   */

  cinfo->jpeg_color_space = colorspace;

  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */

  switch (colorspace) {
  case JCS_GRAYSCALE:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
    cinfo->num_components = 1;
    /* JFIF specifies component ID 1 */
    SET_COMP(0, 1, 1,1, 0, 0,0);
    break;
#ifdef NIFTY
  case JCS_YCC:
    cinfo->write_JFIF_header = FALSE; /* don't write a JFIF marker. */
    cinfo->num_components = 3;
    /* NOTE:
      these component numbers MUST BE UNIQUE!!! 
      so YCC was changed to YCc.
      And it wasn't an easy bug to find, either!!!! rgvb. */
    SET_COMP(0, 0x59 /* 'Y' */, 2,2, 0, 0,0);	/* Photo YCC */
    SET_COMP(1, 0x43 /* 'C' */, 1,1, 1, 1,1);
    SET_COMP(2, 0x63 /* 'c' */, 1,1, 1, 1,1);
    break;

  case JCS_YCCA:
    cinfo->write_JFIF_header = FALSE; /* don't write a JFIF marker. */
    cinfo->num_components = 4;
    /* NOTE:
      these component numbers MUST BE UNIQUE!!! 
      so YCC was changed to YCc.
      And it wasn't an easy bug to find, either!!!! rgvb. */
    SET_COMP(0, 0x59 /* 'Y' */, 2,2, 0, 0,0);	/* PhotoYCC-Alpha */
    SET_COMP(1, 0x43 /* 'C' */, 1,1, 1, 1,1);
    SET_COMP(2, 0x63 /* 'c' */, 1,1, 1, 1,1);
    SET_COMP(3, 0x41 /* 'A' */, 2,2, 0, 0,0);
    break;

  case JCS_YCbCrA:
    cinfo->write_JFIF_header = FALSE; /* don't write a JFIF marker. */
    cinfo->num_components = 4;
    SET_COMP(0, 1, 2,2, 0, 0,0);	/* YCbCr-Alpha */
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    SET_COMP(3, 4, 2,2, 0, 0,0);
    break;

  case JCS_RGBA:
    cinfo->write_JFIF_header = FALSE; /* don't write a JFIF marker. */
    cinfo->num_components = 4;
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);	/* RGB-Alpha Straight through */
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
    SET_COMP(3, 0x41 /* 'A' */, 1,1, 0, 0,0);
    break;

  case JCS_YCbCrA_LEGACY:
    cinfo->write_JFIF_header = FALSE; /* don't write a JFIF marker. */
    cinfo->num_components = 4;
    SET_COMP(0, 1, 2,2, 0, 0,0);	/* YCbCr-Alpha */
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    SET_COMP(3, 4, 2,2, 0, 0,0);
    break;

	/* JCS_RGBA_LEGACY should NEVER appear as a JPEG colorspace. It 
	   is only valid as an input color on compression and an output
	   color on decompression. */
  case JCS_RGBA_LEGACY:
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
#endif
  case JCS_RGB:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
    cinfo->num_components = 3;
    SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
    SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
    SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
    break;
  case JCS_YCbCr:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
    cinfo->num_components = 3;
    /* JFIF specifies component IDs 1,2,3 */
    /* We default to 2x2 subsamples of chrominance */
    SET_COMP(0, 1, 2,2, 0, 0,0);
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    break;
  case JCS_CMYK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
    cinfo->num_components = 4;
    SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
    SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
    SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
    SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
    break;
  case JCS_YCCK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
    cinfo->num_components = 4;
    SET_COMP(0, 1, 2,2, 0, 0,0);
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    SET_COMP(3, 4, 2,2, 0, 0,0);
    break;
  case JCS_UNKNOWN:
    cinfo->num_components = cinfo->input_components;
    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	       MAX_COMPONENTS);
    for (ci = 0; ci < cinfo->num_components; ci++) {
      SET_COMP(ci, ci, 1,1, 0, 0,0);
    }
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
  }
}


#ifdef C_PROGRESSIVE_SUPPORTED

LOCAL jpeg_scan_info *
fill_a_scan (jpeg_scan_info * scanptr, int ci,
	     int Ss, int Se, int Ah, int Al)
/* Support routine: generate one scan for specified component */
{
  scanptr->comps_in_scan = 1;
  scanptr->component_index[0] = ci;
  scanptr->Ss = Ss;
  scanptr->Se = Se;
  scanptr->Ah = Ah;
  scanptr->Al = Al;
  scanptr++;
  return scanptr;
}

LOCAL jpeg_scan_info *
fill_scans (jpeg_scan_info * scanptr, int ncomps,
	    int Ss, int Se, int Ah, int Al)
/* Support routine: generate one scan for each component */
{
  int ci;

  for (ci = 0; ci < ncomps; ci++) {
    scanptr->comps_in_scan = 1;
    scanptr->component_index[0] = ci;
    scanptr->Ss = Ss;
    scanptr->Se = Se;
    scanptr->Ah = Ah;
    scanptr->Al = Al;
    scanptr++;
  }
  return scanptr;
}

LOCAL jpeg_scan_info *
fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
/* Support routine: generate interleaved DC scan if possible, else N scans */
{
  int ci;

  if (ncomps <= MAX_COMPS_IN_SCAN) {
    /* Single interleaved DC scan */
    scanptr->comps_in_scan = ncomps;
    for (ci = 0; ci < ncomps; ci++)
      scanptr->component_index[ci] = ci;
    scanptr->Ss = scanptr->Se = 0;
    scanptr->Ah = Ah;
    scanptr->Al = Al;
    scanptr++;
  } else {
    /* Noninterleaved DC scan for each component */
    scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
  }
  return scanptr;
}


/*
 * Create a recommended progressive-JPEG script.
 * cinfo->num_components and cinfo->jpeg_color_space must be correct.
 */

GLOBAL void
jpeg_simple_progression (j_compress_ptr cinfo)
{
  int ncomps = cinfo->num_components;
  int nscans;
  jpeg_scan_info * scanptr;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* Figure space needed for script.  Calculation must match code below! */
  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
    /* Custom script for YCbCr color images. */
    nscans = 10;
  } else {
    /* All-purpose script for other color spaces. */
    if (ncomps > MAX_COMPS_IN_SCAN)
      nscans = 6 * ncomps;	/* 2 DC + 4 AC scans per component */
    else
      nscans = 2 + 4 * ncomps;	/* 2 DC scans; 4 AC scans per component */
  }

  /* Allocate space for script. */
  /* We use permanent pool just in case application re-uses script. */
  scanptr = (jpeg_scan_info *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				nscans * SIZEOF(jpeg_scan_info));
  cinfo->scan_info = scanptr;
  cinfo->num_scans = nscans;

  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
    /* Custom script for YCbCr color images. */
    /* Initial DC scan */
    scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
    /* Initial AC scan: get some luma data out in a hurry */
    scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
    /* Chroma data is too small to be worth expending many scans on */
    scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
    scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
    /* Complete spectral selection for luma AC */
    scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
    /* Refine next bit of luma AC */
    scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
    /* Finish DC successive approximation */
    scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
    /* Finish AC successive approximation */
    scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
    scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
    /* Luma bottom bit comes last since it's usually largest scan */
    scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
  } else {
    /* All-purpose script for other color spaces. */
    /* Successive approximation first pass */
    scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
    scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
    scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
    /* Successive approximation second pass */
    scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
    /* Successive approximation final pass */
    scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
    scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
  }
}

#endif /* C_PROGRESSIVE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcsample.cpp ===
/*
 * jcsample.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains downsampling routines.
 *
 * Downsampling input data is counted in "row groups".  A row group
 * is defined to be max_v_samp_factor pixel rows of each component,
 * from which the downsampler produces v_samp_factor sample rows.
 * A single row group is processed in each call to the downsampler module.
 *
 * The downsampler is responsible for edge-expansion of its output data
 * to fill an integral number of DCT blocks horizontally.  The source buffer
 * may be modified if it is helpful for this purpose (the source buffer is
 * allocated wide enough to correspond to the desired output width).
 * The caller (the prep controller) is responsible for vertical padding.
 *
 * The downsampler may request "context rows" by setting need_context_rows
 * during startup.  In this case, the input arrays will contain at least
 * one row group's worth of pixels above and below the passed-in data;
 * the caller will create dummy rows at image top and bottom by replicating
 * the first or last real pixel row.
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 *
 * The downsampling algorithm used here is a simple average of the source
 * pixels covered by the output pixel.  The hi-falutin sampling literature
 * refers to this as a "box filter".  In general the characteristics of a box
 * filter are not very good, but for the specific cases we normally use (1:1
 * and 2:1 ratios) the box is equivalent to a "triangle filter" which is not
 * nearly so bad.  If you intend to use other sampling ratios, you'd be well
 * advised to improve this code.
 *
 * A simple input-smoothing capability is provided.  This is mainly intended
 * for cleaning up color-dithered GIF input files (if you find it inadequate,
 * we suggest using an external filtering program such as pnmconvol).  When
 * enabled, each input pixel P is replaced by a weighted sum of itself and its
 * eight neighbors.  P's weight is 1-8*SF and each neighbor's weight is SF,
 * where SF = (smoothing_factor / 1024).
 * Currently, smoothing is only supported for 2h2v sampling factors.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Pointer to routine to downsample a single component */
typedef JMETHOD(void, downsample1_ptr,
		(j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data));

/* Private subobject */

typedef struct {
  struct jpeg_downsampler pub;	/* public fields */

  /* Downsampling method pointers, one per component */
  downsample1_ptr methods[MAX_COMPONENTS];
} my_downsampler;

typedef my_downsampler * my_downsample_ptr;


/*
 * Initialize for a downsampling pass.
 */

METHODDEF void
start_pass_downsample (j_compress_ptr cinfo)
{
  /* no work for now */
}


/*
 * Expand a component horizontally from width input_cols to width output_cols,
 * by duplicating the rightmost samples.
 */

LOCAL void
expand_right_edge (JSAMPARRAY image_data, int num_rows,
		   JDIMENSION input_cols, JDIMENSION output_cols)
{
  register JSAMPROW ptr;
  register JSAMPLE pixval;
  register int count;
  int row;
  int numcols = (int) (output_cols - input_cols);

  if (numcols > 0) {
    for (row = 0; row < num_rows; row++) {
      ptr = image_data[row] + input_cols;
      pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
      for (count = numcols; count > 0; count--)
	*ptr++ = pixval;
    }
  }
}


/*
 * Do downsampling for a whole row group (all components).
 *
 * In this version we simply downsample each component independently.
 */

METHODDEF void
sep_downsample (j_compress_ptr cinfo,
		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
  int ci;
  jpeg_component_info * compptr;
  JSAMPARRAY in_ptr, out_ptr;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    in_ptr = input_buf[ci] + in_row_index;
    out_ptr = output_buf[ci] + (out_row_group_index * compptr->v_samp_factor);
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
  }
}


/*
 * Downsample pixel values of a single component.
 * One row group is processed per call.
 * This version handles arbitrary integral sampling ratios, without smoothing.
 * Note that this version is not actually used for customary sampling ratios.
 */

METHODDEF void
int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  JSAMPROW inptr, outptr;
  INT32 outvalue;

  h_expand = cinfo->max_h_samp_factor / compptr->h_samp_factor;
  v_expand = cinfo->max_v_samp_factor / compptr->v_samp_factor;
  numpix = h_expand * v_expand;
  numpix2 = numpix/2;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * h_expand);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
	 outcol++, outcol_h += h_expand) {
      outvalue = 0;
      for (v = 0; v < v_expand; v++) {
	inptr = input_data[inrow+v] + outcol_h;
	for (h = 0; h < h_expand; h++) {
	  outvalue += (INT32) GETJSAMPLE(*inptr++);
	}
      }
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
    }
    inrow += v_expand;
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * without smoothing.
 */

METHODDEF void
fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  /* Copy the data */
  jcopy_sample_rows(input_data, 0, output_data, 0,
		    cinfo->max_v_samp_factor, cinfo->image_width);
  /* Edge-expand */
  expand_right_edge(output_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, compptr->width_in_blocks * DCTSIZE);
}


/*
 * Downsample pixel values of a single component.
 * This version handles the common case of 2:1 horizontal and 1:1 vertical,
 * without smoothing.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF void
h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr = input_data[outrow];
    bias = 0;			/* bias = 0,1,0,1,... for successive samples */
    for (outcol = 0; outcol < output_cols; outcol++) {
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
			      + bias) >> 1);
      bias ^= 1;		/* 0=>1, 1=>0 */
      inptr += 2;
    }
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * without smoothing.
 */

METHODDEF void
h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr0 = input_data[inrow];
    inptr1 = input_data[inrow+1];
    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
    for (outcol = 0; outcol < output_cols; outcol++) {
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
			      + bias) >> 2);
      bias ^= 3;		/* 1=>2, 2=>1 */
      inptr0 += 2; inptr1 += 2;
    }
    inrow += 2;
  }
}


#ifdef INPUT_SMOOTHING_SUPPORTED

/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * with smoothing.  One row of context is required.
 */

METHODDEF void
h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
			JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols * 2);

  /* We don't bother to form the individual "smoothed" input pixel values;
   * we can directly compute the output which is the average of the four
   * smoothed values.  Each of the four member pixels contributes a fraction
   * (1-8*SF) to its own smoothed image and a fraction SF to each of the three
   * other smoothed pixels, therefore a total fraction (1-5*SF)/4 to the final
   * output.  The four corner-adjacent neighbor pixels contribute a fraction
   * SF to just one smoothed pixel, or SF/4 to the final output; while the
   * eight edge-adjacent neighbors contribute SF to each of two smoothed
   * pixels, or SF/2 overall.  In order to use integer arithmetic, these
   * factors are scaled by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr0 = input_data[inrow];
    inptr1 = input_data[inrow+1];
    above_ptr = input_data[inrow-1];
    below_ptr = input_data[inrow+2];

    /* Special case for first column: pretend column -1 is same as column 0 */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
    neighsum += neighsum;
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
      /* sum of pixels directly mapped to this output element */
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
      /* sum of edge-neighbor pixels */
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
      /* The edge-neighbors count twice as much as corner-neighbors */
      neighsum += neighsum;
      /* Add in the corner-neighbors */
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
      /* form final output scaled up by 2^16 */
      membersum = membersum * memberscale + neighsum * neighscale;
      /* round, descale and output it */
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
      inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
    neighsum += neighsum;
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

    inrow += 2;
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * with smoothing.  One row of context is required.
 */

METHODDEF void
fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
			    JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;
  int colsum, lastcolsum, nextcolsum;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols);

  /* Each of the eight neighbor pixels contributes a fraction SF to the
   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr = input_data[outrow];
    above_ptr = input_data[outrow-1];
    below_ptr = input_data[outrow+1];

    /* Special case for first column */
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
	     GETJSAMPLE(*inptr);
    membersum = GETJSAMPLE(*inptr++);
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		 GETJSAMPLE(*inptr);
    neighsum = colsum + (colsum - membersum) + nextcolsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    lastcolsum = colsum; colsum = nextcolsum;

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
      membersum = GETJSAMPLE(*inptr++);
      above_ptr++; below_ptr++;
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		   GETJSAMPLE(*inptr);
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
      membersum = membersum * memberscale + neighsum * neighscale;
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
      lastcolsum = colsum; colsum = nextcolsum;
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr);
    neighsum = lastcolsum + (colsum - membersum) + colsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

  }
}

#endif /* INPUT_SMOOTHING_SUPPORTED */


/*
 * Module initialization routine for downsampling.
 * Note that we must select a routine for each component.
 */

GLOBAL void
jinit_downsampler (j_compress_ptr cinfo)
{
  my_downsample_ptr downsample;
  int ci;
  jpeg_component_info * compptr;
  boolean smoothok = TRUE;

  downsample = (my_downsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_downsampler));
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
  downsample->pub.start_pass = start_pass_downsample;
  downsample->pub.downsample = sep_downsample;
  downsample->pub.need_context_rows = FALSE;

  if (cinfo->CCIR601_sampling)
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* Verify we can handle the sampling factors, and set up method pointers */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor == cinfo->max_h_samp_factor &&
	compptr->v_samp_factor == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
	downsample->methods[ci] = fullsize_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
      } else
#endif
	downsample->methods[ci] = fullsize_downsample;
    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor == cinfo->max_v_samp_factor) {
      smoothok = FALSE;
      downsample->methods[ci] = h2v1_downsample;
    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor * 2 == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
	downsample->methods[ci] = h2v2_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
      } else
#endif
	downsample->methods[ci] = h2v2_downsample;
    } else if ((cinfo->max_h_samp_factor % compptr->h_samp_factor) == 0 &&
	       (cinfo->max_v_samp_factor % compptr->v_samp_factor) == 0) {
      smoothok = FALSE;
      downsample->methods[ci] = int_downsample;
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
  }

#ifdef INPUT_SMOOTHING_SUPPORTED
  if (cinfo->smoothing_factor && !smoothok)
    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcphuff.cpp ===
/*
 * jcphuff.c
 *
 * Copyright (C) 1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy encoding routines for progressive JPEG.
 *
 * We do not support output suspension in this module, since the library
 * currently does not allow multiple-scan files to be written with output
 * suspension.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jchuff.h"		/* Declarations shared with jchuff.c */

#ifdef C_PROGRESSIVE_SUPPORTED

/* Expanded entropy encoder object for progressive Huffman encoding. */

typedef struct {
  struct jpeg_entropy_encoder pub; /* public fields */

  /* Mode flag: TRUE for optimization, FALSE for actual data output */
  boolean gather_statistics;

  /* Bit-level coding status.
   * next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
   */
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
  INT32 put_buffer;		/* current bit-accumulation buffer */
  int put_bits;			/* # of bits now in it */
  j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */

  /* Coding status for DC components */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */

  /* Coding status for AC components */
  int ac_tbl_no;		/* the table number of the single component */
  unsigned int EOBRUN;		/* run length of EOBs */
  unsigned int BE;		/* # of buffered correction bits before MCU */
  char * bit_buffer;		/* buffer for correction bits (1 per char) */
  /* packing correction bits tightly would save some space but cost time... */

  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  int next_restart_num;		/* next restart number to write (0-7) */

  /* Pointers to derived tables (these workspaces have image lifespan).
   * Since any one scan codes only DC or only AC, we only need one set
   * of tables, not one for DC and one for AC.
   */
  c_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  /* Statistics tables for optimization; again, one set is enough */
  long * count_ptrs[NUM_HUFF_TBLS];
} phuff_entropy_encoder;

typedef phuff_entropy_encoder * phuff_entropy_ptr;

/* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
 * buffer can hold.  Larger sizes may slightly improve compression, but
 * 1000 is already well into the realm of overkill.
 * The minimum safe size is 64 bits.
 */

#define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */

/* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
 * We assume that int right shift is unsigned if INT32 right shift is,
 * which should be safe.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	int ishift_temp;
#define IRIGHT_SHIFT(x,shft)  \
	((ishift_temp = (x)) < 0 ? \
	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
	 (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

/* Forward declarations */
METHODDEF boolean encode_mcu_DC_first JPP((j_compress_ptr cinfo,
					   JBLOCKROW *MCU_data));
METHODDEF boolean encode_mcu_AC_first JPP((j_compress_ptr cinfo,
					   JBLOCKROW *MCU_data));
METHODDEF boolean encode_mcu_DC_refine JPP((j_compress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF boolean encode_mcu_AC_refine JPP((j_compress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF void finish_pass_phuff JPP((j_compress_ptr cinfo));
METHODDEF void finish_pass_gather_phuff JPP((j_compress_ptr cinfo));


/*
 * Initialize for a Huffman-compressed scan using progressive JPEG.
 */

METHODDEF void
start_pass_phuff (j_compress_ptr cinfo, boolean gather_statistics)
{  
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band;
  int ci, tbl;
  jpeg_component_info * compptr;

  entropy->cinfo = cinfo;
  entropy->gather_statistics = gather_statistics;

  is_DC_band = (cinfo->Ss == 0);

  /* We assume jcmaster.c already validated the scan parameters. */

  /* Select execution routines */
  if (cinfo->Ah == 0) {
    if (is_DC_band)
      entropy->pub.encode_mcu = encode_mcu_DC_first;
    else
      entropy->pub.encode_mcu = encode_mcu_AC_first;
  } else {
    if (is_DC_band)
      entropy->pub.encode_mcu = encode_mcu_DC_refine;
    else {
      entropy->pub.encode_mcu = encode_mcu_AC_refine;
      /* AC refinement needs a correction bit buffer */
      if (entropy->bit_buffer == NULL)
	entropy->bit_buffer = (char *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      MAX_CORR_BITS * SIZEOF(char));
    }
  }
  if (gather_statistics)
    entropy->pub.finish_pass = finish_pass_gather_phuff;
  else
    entropy->pub.finish_pass = finish_pass_phuff;

  /* Only DC coefficients may be interleaved, so cinfo->comps_in_scan = 1
   * for AC coefficients.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* Initialize DC predictions to 0 */
    entropy->last_dc_val[ci] = 0;
    /* Make sure requested tables are present */
    /* (In gather mode, tables need not be allocated yet) */
    if (is_DC_band) {
      if (cinfo->Ah != 0)	/* DC refinement needs no table */
	continue;
      tbl = compptr->dc_tbl_no;
      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
	  (cinfo->dc_huff_tbl_ptrs[tbl] == NULL && !gather_statistics))
	ERREXIT1(cinfo,JERR_NO_HUFF_TABLE, tbl);
    } else {
      entropy->ac_tbl_no = tbl = compptr->ac_tbl_no;
      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
          (cinfo->ac_huff_tbl_ptrs[tbl] == NULL && !gather_statistics))
        ERREXIT1(cinfo,JERR_NO_HUFF_TABLE, tbl);
    }
    if (gather_statistics) {
      /* Allocate and zero the statistics tables */
      /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
      if (entropy->count_ptrs[tbl] == NULL)
	entropy->count_ptrs[tbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
      MEMZERO(entropy->count_ptrs[tbl], 257 * SIZEOF(long));
    } else {
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      if (is_DC_band)
        jpeg_make_c_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
				& entropy->derived_tbls[tbl]);
      else
        jpeg_make_c_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
				& entropy->derived_tbls[tbl]);
    }
  }

  /* Initialize AC stuff */
  entropy->EOBRUN = 0;
  entropy->BE = 0;

  /* Initialize bit buffer to empty */
  entropy->put_buffer = 0;
  entropy->put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
  entropy->next_restart_num = 0;
}


/* Outputting bytes to the file.
 * NB: these must be called only when actually outputting,
 * that is, entropy->gather_statistics == FALSE.
 */

/* Emit a byte */
#define emit_byte(entropy,val)  \
	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
	  if (--(entropy)->free_in_buffer == 0)  \
	    dump_buffer(entropy); }


LOCAL void
dump_buffer (phuff_entropy_ptr entropy)
/* Empty the output buffer; we do not support suspension in this module. */
{
  struct jpeg_destination_mgr * dest = entropy->cinfo->dest;

  if (! (*dest->empty_output_buffer) (entropy->cinfo))
    ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
  /* After a successful buffer dump, must reset buffer pointers */
  entropy->next_output_byte = dest->next_output_byte;
  entropy->free_in_buffer = dest->free_in_buffer;
}


/* Outputting bits to the file */

/* Only the right 24 bits of put_buffer are used; the valid bits are
 * left-justified in this part.  At most 16 bits can be passed to emit_bits
 * in one call, and we never retain more than 7 bits in put_buffer
 * between calls, so 24 bits are sufficient.
 */

INLINE
LOCAL void
emit_bits (phuff_entropy_ptr entropy, unsigned int code, int size)
/* Emit some bits, unless we are in gather mode */
{
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = entropy->put_bits;

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
    ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);

  if (entropy->gather_statistics)
    return;			/* do nothing if we're only getting stats */

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
  
  put_bits += size;		/* new number of bits in buffer */
  
  put_buffer <<= 24 - put_bits; /* align incoming bits */

  put_buffer |= entropy->put_buffer; /* and merge with old buffer contents */

  while (put_bits >= 8) {
    int c = (int) ((put_buffer >> 16) & 0xFF);
    
    emit_byte(entropy, c);
    if (c == 0xFF) {		/* need to stuff a zero byte? */
      emit_byte(entropy, 0);
    }
    put_buffer <<= 8;
    put_bits -= 8;
  }

  entropy->put_buffer = put_buffer; /* update variables */
  entropy->put_bits = put_bits;
}


LOCAL void
flush_bits (phuff_entropy_ptr entropy)
{
  emit_bits(entropy, 0x7F, 7); /* fill any partial byte with ones */
  entropy->put_buffer = 0;     /* and reset bit-buffer to empty */
  entropy->put_bits = 0;
}


/*
 * Emit (or just count) a Huffman symbol.
 */

INLINE
LOCAL void
emit_symbol (phuff_entropy_ptr entropy, int tbl_no, int symbol)
{
  if (entropy->gather_statistics)
    entropy->count_ptrs[tbl_no][symbol]++;
  else {
    c_derived_tbl * tbl = entropy->derived_tbls[tbl_no];
    emit_bits(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
  }
}


/*
 * Emit bits from a correction bit buffer.
 */

LOCAL void
emit_buffered_bits (phuff_entropy_ptr entropy, char * bufstart,
		    unsigned int nbits)
{
  if (entropy->gather_statistics)
    return;			/* no real work */

  while (nbits > 0) {
    emit_bits(entropy, (unsigned int) (*bufstart), 1);
    bufstart++;
    nbits--;
  }
}


/*
 * Emit any pending EOBRUN symbol.
 */

LOCAL void
emit_eobrun (phuff_entropy_ptr entropy)
{
  register int temp, nbits;

  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
    temp = entropy->EOBRUN;
    nbits = 0;
    while ((temp >>= 1))
      nbits++;

    emit_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
    if (nbits)
      emit_bits(entropy, entropy->EOBRUN, nbits);

    entropy->EOBRUN = 0;

    /* Emit any buffered correction bits */
    emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
    entropy->BE = 0;
  }
}


/*
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL void
emit_restart (phuff_entropy_ptr entropy, int restart_num)
{
  int ci;

  emit_eobrun(entropy);

  if (! entropy->gather_statistics) {
    flush_bits(entropy);
    emit_byte(entropy, 0xFF);
    emit_byte(entropy, JPEG_RST0 + restart_num);
  }

  if (entropy->cinfo->Ss == 0) {
    /* Re-initialize DC predictions to 0 */
    for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
      entropy->last_dc_val[ci] = 0;
  } else {
    /* Re-initialize all AC-related fields to 0 */
    entropy->EOBRUN = 0;
    entropy->BE = 0;
  }
}


/*
 * MCU encoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF boolean
encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp, temp2;
  register int nbits;
  int blkn, ci;
  int Al = cinfo->Al;
  JBLOCKROW block;
  jpeg_component_info * compptr;
  ISHIFT_TEMPS

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
    if (entropy->restarts_to_go == 0)
      emit_restart(entropy, entropy->next_restart_num);

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];

    /* Compute the DC value after the required point transform by Al.
     * This is simply an arithmetic right shift.
     */
    temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);

    /* DC differences are figured on the point-transformed values. */
    temp = temp2 - entropy->last_dc_val[ci];
    entropy->last_dc_val[ci] = temp2;

    /* Encode the DC coefficient difference per section G.1.2.1 */
    temp2 = temp;
    if (temp < 0) {
      temp = -temp;		/* temp is abs value of input */
      /* For a negative input, want temp2 = bitwise complement of abs(input) */
      /* This code assumes we are on a two's complement machine */
      temp2--;
    }
    
    /* Find the number of bits needed for the magnitude of the coefficient */
    nbits = 0;
    while (temp) {
      nbits++;
      temp >>= 1;
    }
    
    /* Count/emit the Huffman-coded symbol for the number of bits */
    emit_symbol(entropy, compptr->dc_tbl_no, nbits);
    
    /* Emit that number of bits of the value, if positive, */
    /* or the complement of its magnitude, if negative. */
    if (nbits)			/* emit_bits rejects calls with size 0 */
      emit_bits(entropy, (unsigned int) temp2, nbits);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * MCU encoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF boolean
encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp, temp2;
  register int nbits;
  register int r, k;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
    if (entropy->restarts_to_go == 0)
      emit_restart(entropy, entropy->next_restart_num);

  /* Encode the MCU data block */
  block = MCU_data[0];

  /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
  
  r = 0;			/* r = run length of zeros */
   
  for (k = cinfo->Ss; k <= Se; k++) {
    if ((temp = (*block)[jpeg_natural_order[k]]) == 0) {
      r++;
      continue;
    }
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value; so the code is
     * interwoven with finding the abs value (temp) and output bits (temp2).
     */
    if (temp < 0) {
      temp = -temp;		/* temp is abs value of input */
      temp >>= Al;		/* apply the point transform */
      /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
      temp2 = ~temp;
    } else {
      temp >>= Al;		/* apply the point transform */
      temp2 = temp;
    }
    /* Watch out for case that nonzero coef is zero after point transform */
    if (temp == 0) {
      r++;
      continue;
    }

    /* Emit any pending EOBRUN */
    if (entropy->EOBRUN > 0)
      emit_eobrun(entropy);
    /* if run length > 15, must emit special run-length-16 codes (0xF0) */
    while (r > 15) {
      emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
      r -= 16;
    }

    /* Find the number of bits needed for the magnitude of the coefficient */
    nbits = 1;			/* there must be at least one 1 bit */
    while ((temp >>= 1))
      nbits++;

    /* Count/emit Huffman symbol for run length / number of bits */
    emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);

    /* Emit that number of bits of the value, if positive, */
    /* or the complement of its magnitude, if negative. */
    emit_bits(entropy, (unsigned int) temp2, nbits);

    r = 0;			/* reset zero run length */
  }

  if (r > 0) {			/* If there are trailing zeroes, */
    entropy->EOBRUN++;		/* count an EOB */
    if (entropy->EOBRUN == 0x7FFF)
      emit_eobrun(entropy);	/* force it out to avoid overflow */
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * MCU encoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF boolean
encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp;
  int blkn;
  int Al = cinfo->Al;
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
    if (entropy->restarts_to_go == 0)
      emit_restart(entropy, entropy->next_restart_num);

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];

    /* We simply emit the Al'th bit of the DC coefficient value. */
    temp = (*block)[0];
    emit_bits(entropy, (unsigned int) (temp >> Al), 1);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * MCU encoding for AC successive approximation refinement scan.
 */

METHODDEF boolean
encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp;
  register int r, k;
  int EOB;
  char *BR_buffer;
  unsigned int BR;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  JBLOCKROW block;
  int absvalues[DCTSIZE2];

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
    if (entropy->restarts_to_go == 0)
      emit_restart(entropy, entropy->next_restart_num);

  /* Encode the MCU data block */
  block = MCU_data[0];

  /* It is convenient to make a pre-pass to determine the transformed
   * coefficients' absolute values and the EOB position.
   */
  EOB = 0;
  for (k = cinfo->Ss; k <= Se; k++) {
    temp = (*block)[jpeg_natural_order[k]];
    /* We must apply the point transform by Al.  For AC coefficients this
     * is an integer division with rounding towards 0.  To do this portably
     * in C, we shift after obtaining the absolute value.
     */
    if (temp < 0)
      temp = -temp;		/* temp is abs value of input */
    temp >>= Al;		/* apply the point transform */
    absvalues[k] = temp;	/* save abs value for main pass */
    if (temp == 1)
      EOB = k;			/* EOB = index of last newly-nonzero coef */
  }

  /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
  
  r = 0;			/* r = run length of zeros */
  BR = 0;			/* BR = count of buffered bits added now */
  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */

  for (k = cinfo->Ss; k <= Se; k++) {
    if ((temp = absvalues[k]) == 0) {
      r++;
      continue;
    }

    /* Emit any required ZRLs, but not if they can be folded into EOB */
    while (r > 15 && k <= EOB) {
      /* emit any pending EOBRUN and the BE correction bits */
      emit_eobrun(entropy);
      /* Emit ZRL */
      emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
      r -= 16;
      /* Emit buffered correction bits that must be associated with ZRL */
      emit_buffered_bits(entropy, BR_buffer, BR);
      BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
      BR = 0;
    }

    /* If the coef was previously nonzero, it only needs a correction bit.
     * NOTE: a straight translation of the spec's figure G.7 would suggest
     * that we also need to test r > 15.  But if r > 15, we can only get here
     * if k > EOB, which implies that this coefficient is not 1.
     */
    if (temp > 1) {
      /* The correction bit is the next bit of the absolute value. */
      BR_buffer[BR++] = (char) (temp & 1);
      continue;
    }

    /* Emit any pending EOBRUN and the BE correction bits */
    emit_eobrun(entropy);

    /* Count/emit Huffman symbol for run length / number of bits */
    emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);

    /* Emit output bit for newly-nonzero coef */
    temp = ((*block)[jpeg_natural_order[k]] < 0) ? 0 : 1;
    emit_bits(entropy, (unsigned int) temp, 1);

    /* Emit buffered correction bits that must be associated with this code */
    emit_buffered_bits(entropy, BR_buffer, BR);
    BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
    BR = 0;
    r = 0;			/* reset zero run length */
  }

  if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
    entropy->EOBRUN++;		/* count an EOB */
    entropy->BE += BR;		/* concat my correction bits to older ones */
    /* We force out the EOB if we risk either:
     * 1. overflow of the EOB counter;
     * 2. overflow of the correction bit buffer during the next MCU.
     */
    if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
      emit_eobrun(entropy);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * Finish up at the end of a Huffman-compressed progressive scan.
 */

METHODDEF void
finish_pass_phuff (j_compress_ptr cinfo)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Flush out any buffered data */
  emit_eobrun(entropy);
  flush_bits(entropy);

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
}


/*
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF void
finish_pass_gather_phuff (j_compress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band;
  int ci, tbl;
  jpeg_component_info * compptr;
  JHUFF_TBL **htblptr;
  boolean did[NUM_HUFF_TBLS];

  /* Flush out buffered data (all we care about is counting the EOB symbol) */
  emit_eobrun(entropy);

  is_DC_band = (cinfo->Ss == 0);

  /* It's important not to apply jpeg_gen_optimal_table more than once
   * per table, because it clobbers the input frequency counts!
   */
  MEMZERO(did, SIZEOF(did));

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    if (is_DC_band) {
      if (cinfo->Ah != 0)	/* DC refinement needs no table */
	continue;
      tbl = compptr->dc_tbl_no;
    } else {
      tbl = compptr->ac_tbl_no;
    }
    if (! did[tbl]) {
      if (is_DC_band)
        htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
      else
        htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
      if (*htblptr == NULL)
        *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
      jpeg_gen_optimal_table(cinfo, *htblptr, entropy->count_ptrs[tbl]);
      did[tbl] = TRUE;
    }
  }
}


/*
 * Module initialization routine for progressive Huffman entropy encoding.
 */

GLOBAL void
jinit_phuff_encoder (j_compress_ptr cinfo)
{
  phuff_entropy_ptr entropy;
  int i;

  entropy = (phuff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->derived_tbls[i] = NULL;
    entropy->count_ptrs[i] = NULL;
  }
  entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
}

#endif /* C_PROGRESSIVE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jctrans.cpp ===
/*
 * jctrans.c
 *
 * Copyright (C) 1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains library routines for transcoding compression,
 * that is, writing raw DCT coefficient arrays to an output JPEG file.
 * The routines in jcapimin.c will also be needed by a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Forward declarations */
LOCAL void transencode_master_selection
	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
LOCAL void transencode_coef_controller
	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));


/*
 * Compression initialization for writing raw-coefficient data.
 * Before calling this, all parameters and a data destination must be set up.
 * Call jpeg_finish_compress() to actually write the data.
 *
 * The number of passed virtual arrays must match cinfo->num_components.
 * Note that the virtual arrays need not be filled or even realized at
 * the time write_coefficients is called; indeed, if the virtual arrays
 * were requested from this compression object's memory manager, they
 * typically will be realized during this routine and filled afterwards.
 */

GLOBAL void
jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
{
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Mark all tables to be written */
  jpeg_suppress_tables(cinfo, FALSE);
  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Perform master selection of active modules */
  transencode_master_selection(cinfo, coef_arrays);
  /* Wait for jpeg_finish_compress() call */
  cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
  cinfo->global_state = CSTATE_WRCOEFS;
}


/*
 * Initialize the compression object with default parameters,
 * then copy from the source object all parameters needed for lossless
 * transcoding.  Parameters that can be varied without loss (such as
 * scan script and Huffman optimization) are left in their default states.
 */

GLOBAL void
jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
			       j_compress_ptr dstinfo)
{
  JQUANT_TBL ** qtblptr;
  jpeg_component_info *incomp, *outcomp;
  JQUANT_TBL *c_quant, *slot_quant;
  int tblno, ci, coefi;

  /* Safety check to ensure start_compress not called yet. */
  if (dstinfo->global_state != CSTATE_START)
    ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
  /* Copy fundamental image dimensions */
  dstinfo->image_width = srcinfo->image_width;
  dstinfo->image_height = srcinfo->image_height;
  dstinfo->input_components = srcinfo->num_components;
  dstinfo->in_color_space = srcinfo->jpeg_color_space;
  /* Initialize all parameters to default values */
  jpeg_set_defaults(dstinfo);
  /* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
   * Fix it to get the right header markers for the image colorspace.
   */
  jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
  dstinfo->data_precision = srcinfo->data_precision;
  dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
  /* Copy the source's quantization tables. */
  for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
    if (srcinfo->quant_tbl_ptrs[tblno] != NULL) {
      qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
      if (*qtblptr == NULL)
	*qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
      MEMCOPY((*qtblptr)->quantval,
	      srcinfo->quant_tbl_ptrs[tblno]->quantval,
	      SIZEOF((*qtblptr)->quantval));
      (*qtblptr)->sent_table = FALSE;
    }
  }
  /* Copy the source's per-component info.
   * Note we assume jpeg_set_defaults has allocated the dest comp_info array.
   */
  dstinfo->num_components = srcinfo->num_components;
  if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
	     MAX_COMPONENTS);
  for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
       ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
    outcomp->component_id = incomp->component_id;
    outcomp->h_samp_factor = incomp->h_samp_factor;
    outcomp->v_samp_factor = incomp->v_samp_factor;
    outcomp->quant_tbl_no = incomp->quant_tbl_no;
    /* Make sure saved quantization table for component matches the qtable
     * slot.  If not, the input file re-used this qtable slot.
     * IJG encoder currently cannot duplicate this.
     */
    tblno = outcomp->quant_tbl_no;
    if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
	srcinfo->quant_tbl_ptrs[tblno] == NULL)
      ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
    slot_quant = srcinfo->quant_tbl_ptrs[tblno];
    c_quant = incomp->quant_table;
    if (c_quant != NULL) {
      for (coefi = 0; coefi < DCTSIZE2; coefi++) {
	if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
	  ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
      }
    }
    /* Note: we do not copy the source's Huffman table assignments;
     * instead we rely on jpeg_set_colorspace to have made a suitable choice.
     */
  }
}


/*
 * Master selection of compression modules for transcoding.
 * This substitutes for jcinit.c's initialization of the full compressor.
 */

LOCAL void
transencode_master_selection (j_compress_ptr cinfo,
			      jvirt_barray_ptr * coef_arrays)
{
  /* Although we don't actually use input_components for transcoding,
   * jcmaster.c's initial_setup will complain if input_components is 0.
   */
  cinfo->input_components = 1;
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, TRUE /* transcode only */);

  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
      jinit_phuff_encoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_encoder(cinfo);
  }

  /* We need a special coefficient buffer controller. */
  transencode_coef_controller(cinfo, coef_arrays);

  jinit_marker_writer(cinfo);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
}


/*
 * The rest of this file is a special implementation of the coefficient
 * buffer controller.  This is similar to jccoefct.c, but it handles only
 * output from presupplied virtual arrays.  Furthermore, we generate any
 * dummy padding blocks on-the-fly rather than expecting them to be present
 * in the arrays.
 */

/* Private buffer controller object */

typedef struct {
  struct jpeg_c_coef_controller pub; /* public fields */

  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* Virtual block array for each component. */
  jvirt_barray_ptr * whole_image;

  /* Workspace for constructing dummy blocks at right/bottom edges. */
  JBLOCKROW dummy_buffer[C_MAX_BLOCKS_IN_MCU];
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;


LOCAL void
start_iMCU_row (j_compress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row */
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->mcu_ctr = 0;
  coef->MCU_vert_offset = 0;
}


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  if (pass_mode != JBUF_CRANK_DEST)
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  coef->iMCU_row_num = 0;
  start_iMCU_row(cinfo);
}


/*
 * Process some data.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * The data is obtained from the virtual arrays and fed to the entropy coder.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF boolean
compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, ci, xindex, yindex, yoffset, blockcnt;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       coef->iMCU_row_num * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, FALSE);
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						: compptr->last_col_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (coef->iMCU_row_num < last_iMCU_row ||
	      yindex+yoffset < compptr->last_row_height) {
	    /* Fill in pointers to real blocks in this row */
	    buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	    for (xindex = 0; xindex < blockcnt; xindex++)
	      MCU_buffer[blkn++] = buffer_ptr++;
	  } else {
	    /* At bottom of image, need a whole row of dummy blocks */
	    xindex = 0;
	  }
	  /* Fill in any dummy blocks needed in this row.
	   * Dummy blocks are filled in the same way as in jccoefct.c:
	   * all zeroes in the AC entries, DC entries equal to previous
	   * block's DC value.  The init routine has already zeroed the
	   * AC entries, so we need only set the DC entries correctly.
	   */
	  for (; xindex < compptr->MCU_width; xindex++) {
	    MCU_buffer[blkn] = coef->dummy_buffer[blkn];
	    MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
	    blkn++;
	  }
	}
      }
      /* Try to write the MCU. */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row(cinfo);
  return TRUE;
}


/*
 * Initialize coefficient buffer controller.
 *
 * Each passed coefficient array must be the right size for that
 * coefficient: width_in_blocks wide and height_in_blocks high,
 * with unitheight at least v_samp_factor.
 */

LOCAL void
transencode_coef_controller (j_compress_ptr cinfo,
			     jvirt_barray_ptr * coef_arrays)
{
  my_coef_ptr coef;
  JBLOCKROW buffer;
  int i;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;
  coef->pub.compress_data = compress_output;

  /* Save pointer to virtual arrays */
  coef->whole_image = coef_arrays;

  /* Allocate and pre-zero space for dummy DCT blocks. */
  buffer = (JBLOCKROW)
    (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
  jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
  for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
    coef->dummy_buffer[i] = buffer + i;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jcprepct.cpp ===
/*
 * jcprepct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the compression preprocessing controller.
 * This controller manages the color conversion, downsampling,
 * and edge expansion steps.
 *
 * Most of the complexity here is associated with buffering input rows
 * as required by the downsampler.  See the comments at the head of
 * jcsample.c for the downsampler's needs.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* At present, jcsample.c can request context rows only for smoothing.
 * In the future, we might also need context rows for CCIR601 sampling
 * or other more-complex downsampling procedures.  The code to support
 * context rows should be compiled only if needed.
 */
#ifdef INPUT_SMOOTHING_SUPPORTED
#define CONTEXT_ROWS_SUPPORTED
#endif


/*
 * For the simple (no-context-row) case, we just need to buffer one
 * row group's worth of pixels for the downsampling step.  At the bottom of
 * the image, we pad to a full row group by replicating the last pixel row.
 * The downsampler's last output row is then replicated if needed to pad
 * out to a full iMCU row.
 *
 * When providing context rows, we must buffer three row groups' worth of
 * pixels.  Three row groups are physically allocated, but the row pointer
 * arrays are made five row groups high, with the extra pointers above and
 * below "wrapping around" to point to the last and first real row groups.
 * This allows the downsampler to access the proper context rows.
 * At the top and bottom of the image, we create dummy context rows by
 * copying the first or last real pixel row.  This copying could be avoided
 * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the
 * trouble on the compression side.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_prep_controller pub; /* public fields */

  /* Downsampling input buffer.  This buffer holds color-converted data
   * until we have enough to do a downsample step.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  JDIMENSION rows_to_go;	/* counts rows remaining in source image */
  int next_buf_row;		/* index of next row to store in color_buf */

#ifdef CONTEXT_ROWS_SUPPORTED	/* only needed for context case */
  int this_row_group;		/* starting row index of group to process */
  int next_buf_stop;		/* downsample when we reach this index */
#endif
} my_prep_controller;

typedef my_prep_controller * my_prep_ptr;


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;

  if (pass_mode != JBUF_PASS_THRU)
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Initialize total-height counter for detecting bottom of image */
  prep->rows_to_go = cinfo->image_height;
  /* Mark the conversion buffer empty */
  prep->next_buf_row = 0;
#ifdef CONTEXT_ROWS_SUPPORTED
  /* Preset additional state variables for context mode.
   * These aren't used in non-context mode, so we needn't test which mode.
   */
  prep->this_row_group = 0;
  /* Set next_buf_stop to stop after two row groups have been read in. */
  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
#endif
}


/*
 * Expand an image vertically from height input_rows to height output_rows,
 * by duplicating the bottom row.
 */

LOCAL void
expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
		    int input_rows, int output_rows)
{
  register int row;

  for (row = input_rows; row < output_rows; row++) {
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
		      1, num_cols);
  }
}


/*
 * Process some data in the simple no-context case.
 *
 * Preprocessor output data is counted in "row groups".  A row group
 * is defined to be v_samp_factor sample rows of each component.
 * Downsampling will produce this much data from each max_v_samp_factor
 * input rows.
 */

METHODDEF void
pre_process_data (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		  JDIMENSION in_rows_avail,
		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		  JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*in_row_ctr < in_rows_avail &&
	 *out_row_group_ctr < out_row_groups_avail) {
    /* Do color conversion to fill the conversion buffer. */
    inrows = in_rows_avail - *in_row_ctr;
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
    numrows = (int) MIN((JDIMENSION) numrows, inrows);
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
				       prep->color_buf,
				       (JDIMENSION) prep->next_buf_row,
				       numrows);
    *in_row_ctr += numrows;
    prep->next_buf_row += numrows;
    prep->rows_to_go -= numrows;
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
	prep->next_buf_row < cinfo->max_v_samp_factor) {
      for (ci = 0; ci < cinfo->num_components; ci++) {
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			   prep->next_buf_row, cinfo->max_v_samp_factor);
      }
      prep->next_buf_row = cinfo->max_v_samp_factor;
    }
    /* If we've filled the conversion buffer, empty it. */
    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
      (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
      prep->next_buf_row = 0;
      (*out_row_group_ctr)++;
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
	*out_row_group_ctr < out_row_groups_avail) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * DCTSIZE,
			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
			   (int) (out_row_groups_avail * compptr->v_samp_factor));
      }
      *out_row_group_ctr = out_row_groups_avail;
      break;			/* can exit outer loop without test */
    }
  }
}


#ifdef CONTEXT_ROWS_SUPPORTED

/*
 * Process some data in the context case.
 */

METHODDEF void
pre_process_context (j_compress_ptr cinfo,
		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		     JDIMENSION in_rows_avail,
		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		     JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  int buf_height = cinfo->max_v_samp_factor * 3;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*out_row_group_ctr < out_row_groups_avail) {
    if (*in_row_ctr < in_rows_avail) {
      /* Do color conversion to fill the conversion buffer. */
      inrows = in_rows_avail - *in_row_ctr;
      numrows = prep->next_buf_stop - prep->next_buf_row;
      numrows = (int) MIN((JDIMENSION) numrows, inrows);
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
					 prep->color_buf,
					 (JDIMENSION) prep->next_buf_row,
					 numrows);
      /* Pad at top of image, if first time through */
      if (prep->rows_to_go == cinfo->image_height) {
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  int row;
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
	    jcopy_sample_rows(prep->color_buf[ci], 0,
			      prep->color_buf[ci], -row,
			      1, cinfo->image_width);
	  }
	}
      }
      *in_row_ctr += numrows;
      prep->next_buf_row += numrows;
      prep->rows_to_go -= numrows;
    } else {
      /* Return for more data, unless we are at the bottom of the image. */
      if (prep->rows_to_go != 0)
	break;
    }
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
	prep->next_buf_row < prep->next_buf_stop) {
      for (ci = 0; ci < cinfo->num_components; ci++) {
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			   prep->next_buf_row, prep->next_buf_stop);
      }
      prep->next_buf_row = prep->next_buf_stop;
    }
    /* If we've gotten enough data, downsample a row group. */
    if (prep->next_buf_row == prep->next_buf_stop) {
      (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf,
					(JDIMENSION) prep->this_row_group,
					output_buf, *out_row_group_ctr);
      (*out_row_group_ctr)++;
      /* Advance pointers with wraparound as necessary. */
      prep->this_row_group += cinfo->max_v_samp_factor;
      if (prep->this_row_group >= buf_height)
	prep->this_row_group = 0;
      if (prep->next_buf_row >= buf_height)
	prep->next_buf_row = 0;
      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
	*out_row_group_ctr < out_row_groups_avail) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * DCTSIZE,
			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
			   (int) (out_row_groups_avail * compptr->v_samp_factor));
      }
      *out_row_group_ctr = out_row_groups_avail;
      break;			/* can exit outer loop without test */
    }
  }
}


/*
 * Create the wrapped-around downsampling input buffer needed for context mode.
 */

LOCAL void
create_context_buffer (j_compress_ptr cinfo)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int rgroup_height = cinfo->max_v_samp_factor;
  int ci, i;
  jpeg_component_info * compptr;
  JSAMPARRAY true_buffer, fake_buffer;

  /* Grab enough space for fake row pointers for all the components;
   * we need five row groups' worth of pointers for each component.
   */
  fake_buffer = (JSAMPARRAY)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(cinfo->num_components * 5 * rgroup_height) *
				SIZEOF(JSAMPROW));

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Allocate the actual buffer space (3 row groups) for this component.
     * We make the buffer wide enough to allow the downsampler to edge-expand
     * horizontally within the buffer, if it so chooses.
     */
    true_buffer = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
       (JDIMENSION) (3 * rgroup_height));
    /* Copy true buffer row pointers into the middle of the fake row array */
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
	    3 * rgroup_height * SIZEOF(JSAMPROW));
    /* Fill in the above and below wraparound pointers */
    for (i = 0; i < rgroup_height; i++) {
      fake_buffer[i] = true_buffer[2 * rgroup_height + i];
      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
    }
    prep->color_buf[ci] = fake_buffer + rgroup_height;
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
  }
}

#endif /* CONTEXT_ROWS_SUPPORTED */


/*
 * Initialize preprocessing controller.
 */

GLOBAL void
jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_prep_ptr prep;
  int ci;
  jpeg_component_info * compptr;

  if (need_full_buffer)		/* safety check */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  prep = (my_prep_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_prep_controller));
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
  prep->pub.start_pass = start_pass_prep;

  /* Allocate the color conversion buffer.
   * We make the buffer wide enough to allow the downsampler to edge-expand
   * horizontally within the buffer, if it so chooses.
   */
  if (cinfo->downsample->need_context_rows) {
    /* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
    prep->pub.pre_process_data = pre_process_context;
    create_context_buffer(cinfo);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    /* No context, just make it tall enough for one row group */
    prep->pub.pre_process_data = pre_process_data;
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdapistd.cpp ===
/*
 * jdapistd.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the decompression half
 * of the JPEG library.  These are the "standard" API routines that are
 * used in the normal full-decompression case.  They are not used by a
 * transcoding-only application.  Note that if an application links in
 * jpeg_start_decompress, it will end up linking in the entire decompressor.
 * We thus must separate this file from jdapimin.c to avoid linking the
 * whole decompression library into a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Forward declarations */
LOCAL boolean output_pass_setup JPP((j_decompress_ptr cinfo));


/*
 * Decompression initialization.
 * jpeg_read_header must be completed before calling this.
 *
 * If a multipass operating mode was selected, this will do all but the
 * last pass, and thus may take a great deal of time.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL boolean
jpeg_start_decompress (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
    if (cinfo->buffered_image) {
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
      return TRUE;
    }
    cinfo->global_state = DSTATE_PRELOAD;
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
    /* If file has multiple scans, absorb them all into the coef buffer */
    if (cinfo->inputctl->has_multiple_scans) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
      for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
	if (retcode == JPEG_SUSPENDED)
	  return FALSE;
	if (retcode == JPEG_REACHED_EOI)
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
	  }
	}
      }
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
    }
    cinfo->output_scan_number = cinfo->input_scan_number;
  } else if (cinfo->global_state != DSTATE_PRESCAN)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
}


/*
 * Set up for an output pass, and perform any dummy pass(es) needed.
 * Common subroutine for jpeg_start_decompress and jpeg_start_output.
 * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
 * Exit: If done, returns TRUE and sets global_state for proper output mode.
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL boolean
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
    cinfo->output_scanline = 0;
    cinfo->global_state = DSTATE_PRESCAN;
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
    /* Crank through the dummy pass */
    while (cinfo->output_scanline < cinfo->output_height) {
      JDIMENSION last_scanline;
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
				    &cinfo->output_scanline, (JDIMENSION) 0);
      if (cinfo->output_scanline == last_scanline)
	return FALSE;		/* No progress made, must suspend */
    }
    /* Finish up dummy pass, and set up for another one */
    (*cinfo->master->finish_output_pass) (cinfo);
    (*cinfo->master->prepare_for_output_pass) (cinfo);
    cinfo->output_scanline = 0;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
  return TRUE;
}


/*
 * Read some scanlines of data from the JPEG decompressor.
 *
 * The return value will be the number of lines actually read.
 * This may be less than the number requested in several cases,
 * including bottom of image, data source suspension, and operating
 * modes that emit multiple scanlines at a time.
 *
 * Note: we warn about excess calls to jpeg_read_scanlines() since
 * this likely signals an application programmer error.  However,
 * an oversize buffer (max_lines > scanlines remaining) is not an error.
 */

GLOBAL JDIMENSION
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}


/*
 * Alternate entry point to read raw data.
 * Processes exactly one iMCU row per call, unless suspended.
 */

GLOBAL JDIMENSION
jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
		    JDIMENSION max_lines)
{
  JDIMENSION lines_per_iMCU_row;

  if (cinfo->global_state != DSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Verify that at least one iMCU row can be returned. */
  lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size;
  if (max_lines < lines_per_iMCU_row)
    ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Decompress directly into user's buffer. */
  if (! (*cinfo->coef->decompress_data) (cinfo, data))
    return 0;			/* suspension forced, can do nothing more */

  /* OK, we processed one iMCU row. */
  cinfo->output_scanline += lines_per_iMCU_row;
  return lines_per_iMCU_row;
}


/* Additional entry points for buffered-image mode. */

#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Initialize for an output pass in buffered-image mode.
 */

GLOBAL boolean
jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
{
  if (cinfo->global_state != DSTATE_BUFIMAGE &&
      cinfo->global_state != DSTATE_PRESCAN)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Limit scan number to valid range */
  if (scan_number <= 0)
    scan_number = 1;
  if (cinfo->inputctl->eoi_reached &&
      scan_number > cinfo->input_scan_number)
    scan_number = cinfo->input_scan_number;
  cinfo->output_scan_number = scan_number;
  /* Perform any dummy output passes, and set up for the real pass */
  return output_pass_setup(cinfo);
}


/*
 * Finish up after an output pass in buffered-image mode.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL boolean
jpeg_finish_output (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
       cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image) {
    /* Terminate this pass. */
    /* We do not require the whole pass to have been completed. */
    (*cinfo->master->finish_output_pass) (cinfo);
    cinfo->global_state = DSTATE_BUFPOST;
  } else if (cinfo->global_state != DSTATE_BUFPOST) {
    /* BUFPOST = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read markers looking for SOS or EOI */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  cinfo->global_state = DSTATE_BUFIMAGE;
  return TRUE;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdapimin.cpp ===
/*
 * jdapimin.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the decompression half
 * of the JPEG library.  These are the "minimum" API routines that may be
 * needed in either the normal full-decompression case or the
 * transcoding-only case.
 *
 * Most of the routines intended to be called directly by an application
 * are in this file or in jdapistd.c.  But also see jcomapi.c for routines
 * shared by compression and decompression, and jdtrans.c for the transcoding
 * case.
 */

/* SCCSID = "@(#)jdapimin.cc	1.5 15:39:38 10/29/96" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Initialization of a JPEG decompression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL void
jpeg_create_decompress (j_decompress_ptr cinfo)
{
  int i;

  /* For debugging purposes, zero the whole master structure.
   * But error manager pointer is already there, so save and restore it.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
    cinfo->err = err;
  }
  cinfo->is_decompressor = TRUE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->src = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
    cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  jinit_marker_reader(cinfo);

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
}


/*
 * Destruction of a JPEG decompression object
 */

GLOBAL void
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Abort processing of a JPEG decompression operation,
 * but don't destroy the object itself.
 */

GLOBAL void
jpeg_abort_decompress (j_decompress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Install a special processing method for COM or APPn markers.
 */

GLOBAL void
jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
			   jpeg_marker_parser_method routine)
{
  if (marker_code == JPEG_COM)
    cinfo->marker->process_COM = routine;
  else if (marker_code >= JPEG_APP0 && marker_code <= JPEG_APP0+15)
    cinfo->marker->process_APPn[marker_code-JPEG_APP0] = routine;
  else
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
}


/*
 * Set default decompression parameters.
 */

LOCAL void
default_decompress_parms (j_decompress_ptr cinfo, int jpeg_cs)
{
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
    cinfo->out_color_space = JCS_GRAYSCALE;
    break;
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
    } else if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
	break;
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
	break;
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
      int cid1 = cinfo->comp_info[1].component_id;
      int cid2 = cinfo->comp_info[2].component_id;


      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
#ifdef NIFTY
      else if (cid0 == 0x59 && cid1 == 0x43 && cid2 == 0x63)  /* ASCII 'Y', 'C', 'c' */
	cinfo->jpeg_color_space = JCS_YCC; /* Photo YCC */
#endif
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
      }
    }
    /* Always guess RGB is proper output colorspace. */
    /* In order to TURN OFF automatic YCC->RGB conversion within this
     * library, comment out the following line
     */
    cinfo->out_color_space = JCS_RGB;
    break;
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
	break;
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
	break;
      }
    } else {
#ifdef NIFTY
      int cid0 = cinfo->comp_info[0].component_id;
      int cid1 = cinfo->comp_info[1].component_id;
      int cid2 = cinfo->comp_info[2].component_id;
      int cid3 = cinfo->comp_info[3].component_id;

      if (cid0 == 1 && cid1 == 2 && cid2 == 3 && cid3 == 4) {			/* YCbCr-Alpha */ 
        cinfo->jpeg_color_space = JCS_YCbCrA;
		cinfo->out_color_space = JCS_RGBA;
      } else if (cid0 == 82 && cid1 == 71 && cid2 == 66 && cid3 == 65) {	/* RGB-Alpha */
		cinfo->jpeg_color_space = JCS_RGBA;
        cinfo->out_color_space = JCS_RGBA;
      } else if (cid0 == 0x59 && cid1 == 0x43 && cid2 == 0x63 && cid3 == 0x41) {	/* ASCII 'Y', 'C', 'c', 'A' */
        cinfo->jpeg_color_space = JCS_YCCA;
		cinfo->out_color_space = JCS_YCCA;
      } else {
        cinfo->jpeg_color_space = JCS_CMYK;
		cinfo->out_color_space = JCS_CMYK;
      }
#else
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
#endif
    }
#ifndef NIFTY
    cinfo->out_color_space = JCS_CMYK;
#endif

    break;
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
    cinfo->out_color_space = JCS_UNKNOWN;
    break;
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = 1;		/* 1:1 scaling */
  cinfo->scale_denom = 1;
  cinfo->output_gamma = 1.0;
  cinfo->buffered_image = FALSE;
  cinfo->raw_data_out = FALSE;
  cinfo->dct_method = JDCT_DEFAULT;
  cinfo->do_fancy_upsampling = TRUE;
  cinfo->do_block_smoothing = TRUE;
  cinfo->quantize_colors = FALSE;
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
  cinfo->colormap = NULL;
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
  cinfo->enable_external_quant = FALSE;
  cinfo->enable_2pass_quant = FALSE;
}


/*
 * Decompression startup: read start of JPEG datastream to see what's there.
 * Need only initialize JPEG object and supply a data source before calling.
 *
 * This routine will read as far as the first SOS marker (ie, actual start of
 * compressed data), and will save all tables and parameters in the JPEG
 * object.  It will also initialize the decompression parameters to default
 * values, and finally return JPEG_HEADER_OK.  On return, the application may
 * adjust the decompression parameters and then call jpeg_start_decompress.
 * (Or, if the application only wanted to determine the image parameters,
 * the data need not be decompressed.  In that case, call jpeg_abort or
 * jpeg_destroy to release any temporary space.)
 * If an abbreviated (tables only) datastream is presented, the routine will
 * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
 * re-use the JPEG object to read the abbreviated image datastream(s).
 * It is unnecessary (but OK) to call jpeg_abort in this case.
 * The JPEG_SUSPENDED return code only occurs if the data source module
 * requests suspension of the decompressor.  In this case the application
 * should load more source data and then re-call jpeg_read_header to resume
 * processing.
 * If a non-suspending data source is used and require_image is TRUE, then the
 * return code need not be inspected since only JPEG_HEADER_OK is possible.
 *
 * This routine is now just a front end to jpeg_consume_input, with some
 * extra error checking.
 */

GLOBAL int
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
      cinfo->global_state != DSTATE_INHEADER)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  retcode = jpeg_consume_input(cinfo);

  switch (retcode) {
  case JPEG_REACHED_SOS:
    retcode = JPEG_HEADER_OK;
    break;
  case JPEG_REACHED_EOI:
    if (require_image)		/* Complain if application wanted an image */
      ERREXIT(cinfo, JERR_NO_IMAGE);
    /* Reset to start state; it would be safer to require the application to
     * call jpeg_abort, but we can't change it now for compatibility reasons.
     * A side effect is to free any temporary memory (there shouldn't be any).
     */
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
    retcode = JPEG_HEADER_TABLES_ONLY;
    break;
  case JPEG_SUSPENDED:
    /* no work */
    break;
  }

  return retcode;
}


/*
 * Consume data in advance of what the decompressor requires.
 * This can be called at any time once the decompressor object has
 * been created and a data source has been set up.
 *
 * This routine is essentially a state machine that handles a couple
 * of critical state-transition actions, namely initial setup and
 * transition from header scanning to ready-for-start_decompress.
 * All the actual input is done via the input controller's consume_input
 * method.
 */

GLOBAL int
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
    cinfo->global_state = DSTATE_INHEADER;
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo, (int)cinfo->jpeg_color_space);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
    }
    break;
  case DSTATE_READY:
    /* Can't advance past first SOS until start_decompress is called */
    retcode = JPEG_REACHED_SOS;
    break;
  case DSTATE_PRELOAD:
  case DSTATE_PRESCAN:
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}


/*
 * Have we finished reading the input file?
 */

GLOBAL boolean
jpeg_input_complete (j_decompress_ptr cinfo)
{
  /* Check for valid jpeg object */
  if (cinfo->global_state < DSTATE_START ||
      cinfo->global_state > DSTATE_STOPPING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->eoi_reached;
}


/*
 * Is there more than one scan?
 */

GLOBAL boolean
jpeg_has_multiple_scans (j_decompress_ptr cinfo)
{
  /* Only valid after jpeg_read_header completes */
  if (cinfo->global_state < DSTATE_READY ||
      cinfo->global_state > DSTATE_STOPPING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->has_multiple_scans;
}


/*
 * Finish JPEG decompression.
 *
 * This will normally just verify the file trailer and release temp storage.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL boolean
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
    (*cinfo->master->finish_output_pass) (cinfo);
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
  return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdatadst.cpp ===
/*
 * jdatadst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains compression data destination routines for the case of
 * emitting JPEG data to a file (or any stdio stream).  While these routines
 * are sufficient for most applications, some will want to use a different
 * destination manager.
 * IMPORTANT: we assume that fwrite() will correctly transcribe an array of
 * JOCTETs into 8-bit-wide elements on external storage.  If char is wider
 * than 8 bits on your machine, you may need to do some tweaking.
 */

/* SCCSID = "@(#)jdatadst.cc	1.5 13:59:26 09/13/96" */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"


/* Expanded data destination object for stdio output */

typedef struct {
  struct jpeg_destination_mgr pub; /* public fields */

  FILE * outfile;		/* target stream */
  JOCTET * buffer;		/* start of buffer */
} my_destination_mgr;

typedef my_destination_mgr * my_dest_ptr;

/* Data structure for doing in memory reads/writes for NIFTY. */

#ifdef NIFTY
typedef struct {
  struct jpeg_destination_mgr pub; /* public fields */

  JOCTET *NIFbuffer;
  JOCTET *buffer;
} nif_destination_mgr;

typedef nif_destination_mgr *nif_dest_ptr;
#endif

#ifdef NIFTY

#ifdef WIN32
		// Have to make OUTPUT_BUF_SIZE smaller than MAX_ALLOC_CHUNK - SIZEOF(small_pool_hdr)
		// Ref. code in jmemmgr.cpp. MAX_ALLOC_CHUNK, itself, has to be less than 65536 - sizeof(double)
#define OUTPUT_BUF_SIZE 65000	/* choose a much larger in memory buffer */
#else
#define OUTPUT_BUF_SIZE 65535	/* choose a much larger in memory buffer for NIFTY */
#endif

#else
#define OUTPUT_BUF_SIZE  4096	/* choose an efficiently fwrite'able size */
#endif


/*
 * Initialize destination --- called by jpeg_start_compress
 * before any data is actually written.
 */

METHODDEF void
init_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  /* Allocate the output buffer --- it will be released when done with image */
  dest->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
}

#ifdef NIFTY
/* and a variation of this for in memory writing for NIFty. */
METHODDEF void
init_mem_destination (j_compress_ptr cinfo)
{
  nif_dest_ptr dest = (nif_dest_ptr) cinfo->dest;

  /* Allocate the output buffer --- it will be released when done with image */
  dest->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
}
#endif

/*
 * Empty the output buffer --- called whenever buffer fills up.
 *
 * In typical applications, this should write the entire output buffer
 * (ignoring the current state of next_output_byte & free_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been dumped.
 *
 * In applications that need to be able to suspend compression due to output
 * overrun, a FALSE return indicates that the buffer cannot be emptied now.
 * In this situation, the compressor will return to its caller (possibly with
 * an indication that it has not accepted all the supplied scanlines).  The
 * application should resume compression after it has made more room in the
 * output buffer.  Note that there are substantial restrictions on the use of
 * suspension --- see the documentation.
 *
 * When suspending, the compressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_output_byte & free_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point will be regenerated after resumption, so do not
 * write it out when emptying the buffer externally.
 */

#ifdef NIFTY
/* a variation on this for NIFTY. */
METHODDEF boolean
empty_mem_output_buffer (j_compress_ptr cinfo)
{
  nif_dest_ptr dest = (nif_dest_ptr) cinfo->dest;


  cinfo->bytes_in_buffer+=OUTPUT_BUF_SIZE;
  (void)memcpy(dest->NIFbuffer, dest->buffer, OUTPUT_BUF_SIZE);

	//*************
	// Thanks to Chuck Schneider for this bug fix:
	dest->NIFbuffer += OUTPUT_BUF_SIZE;
	//**************


  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
 
  return TRUE;
}

#endif

METHODDEF boolean
empty_output_buffer (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
      (size_t) OUTPUT_BUF_SIZE)
    ERREXIT(cinfo, JERR_FILE_WRITE);

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;

  return TRUE;
}


/*
 * Terminate destination --- called by jpeg_finish_compress
 * after all data has been written.  Usually needs to flush buffer.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

#ifdef NIFTY
/* a variation of this for in memory work with NIFTY. */
METHODDEF void
term_mem_destination (j_compress_ptr cinfo)
{
  nif_dest_ptr dest = (nif_dest_ptr) cinfo->dest;
  size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;

  cinfo->bytes_in_buffer+=datacount;

  (void)memcpy(dest->NIFbuffer, dest->buffer, datacount);

}

#endif

METHODDEF void
term_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
  size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;

  /* Write any data remaining in the buffer */
  if (datacount > 0) {
    if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
      ERREXIT(cinfo, JERR_FILE_WRITE);
  }
  fflush(dest->outfile);
  /* Make sure we wrote the output file OK */
  if (ferror(dest->outfile))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * Prepare for output to a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing compression.
 */

#ifdef NIFTY
GLOBAL void
jpeg_mem_dest(j_compress_ptr cinfo, JOCTET *UserBuffer)
{
  nif_dest_ptr dest;

  if (cinfo->dest == NULL) {    /* first time for this JPEG object? */
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                                  SIZEOF(nif_destination_mgr));
  }

  dest = (nif_dest_ptr) cinfo->dest;
  dest->pub.init_destination = init_mem_destination;
  dest->pub.empty_output_buffer = empty_mem_output_buffer;
  dest->pub.term_destination = term_mem_destination;
  dest->NIFbuffer = UserBuffer;
}

#endif

GLOBAL void
jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
{
  my_dest_ptr dest;

  /* The destination object is made permanent so that multiple JPEG images
   * can be written to the same file without re-executing jpeg_stdio_dest.
   * This makes it dangerous to use this manager and a different destination
   * manager serially with the same JPEG object, because their private object
   * sizes may be different.  Caveat programmer.
   */
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_destination_mgr));
  }

  dest = (my_dest_ptr) cinfo->dest;
  dest->pub.init_destination = init_destination;
  dest->pub.empty_output_buffer = empty_output_buffer;
  dest->pub.term_destination = term_destination;
  dest->outfile = outfile;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdcolor.cpp ===
/*
 * jdcolor.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains output colorspace conversion routines.
 */

/* "@(#)jdcolor.cc	1.4 13:47:48 01/31/97" */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef NIFTY
/* various goodies used for generating the lookup tables used in RGB <--> PhotoYCC
   conversion. */

#include <math.h>

#define SCALE_PREC      5
#define SCALE_RND       (1 << (SCALE_PREC - 1))
#define SCALE           (1 << SCALE_PREC)
#define unscale(x)      (((x) + SCALE_RND) >> SCALE_PREC)
#define clip(x)         (((long)(x) & ~0xff) ? (((long)(x) < 0) ? 0 : 255) : (long)(x))

#endif



/* Private subobject */

typedef struct {
  struct jpeg_color_deconverter pub; /* public fields */

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

#ifdef NIFTY
  /* Private state for the PhotoYCC->RGB conversion tables */
  coef_c1 *C1;
  coef_c2 *C2;
  short *xy;
#endif

} my_color_deconverter;

typedef my_color_deconverter * my_cconvert_ptr;

#ifdef NIFTY

/*
 * Initialize tables for PhotoYCC->RGB colorspace conversion.
 */

LOCAL void
build_pycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  INT32 i;

  cconvert->C1 = (coef_c1 *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(coef_c1));
  cconvert->C2 = (coef_c2 *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(coef_c2));
  cconvert->xy = (short *)
	(*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_IMAGE,
				   256 * SIZEOF(short));

  for (i = 0; i < 256; i++) {
    cconvert->xy[i] = (short)((double)i * 1.3584 * SCALE);
    cconvert->C2[i].r = (short)(i * 1.8215 * SCALE);
    cconvert->C1[i].g = (short)(i * -0.4303 * SCALE);
    cconvert->C2[i].g = (short)(i * -0.9271 * SCALE);
    cconvert->C1[i].b = (short)(i * 2.2179 * SCALE);
  }
}

/*
 * PhotoYCC->RGB colorspace conversion.
 */
METHODDEF void
pycc_rgb_convert (j_decompress_ptr cinfo,
                 JSAMPIMAGE input_buf, JDIMENSION input_row,
                 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr)cinfo->cconvert;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  unsigned char y, c1, c2;
  short ri, gi, bi,
        offsetR, offsetG, offsetB;
  register short *xy = cconvert->xy;
  register coef_c1 *C1 = cconvert->C1;
  register coef_c2 *C2 = cconvert->C2;

/*
  INT32 i;
  unsigned char r,g,b;
  for (i = 0; i < 256; i++) {
    xy[i] = (short)((double)i * 1.3584 * SCALE);
    C2[i].r = (short)(i * 1.8215 * SCALE);
    C1[i].g = (short)(i * -0.4303 * SCALE);
    C2[i].g = (short)(i * -0.9271 * SCALE);
    C1[i].b = (short)(i * 2.2179 * SCALE);
  }
*/

  offsetR = (short)(-249.55 * SCALE);
  offsetG = (short)( 194.14 * SCALE);
  offsetB = (short)(-345.99 * SCALE);

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y = GETJSAMPLE(inptr0[col]);
      c1 = GETJSAMPLE(inptr1[col]);
      c2 = GETJSAMPLE(inptr2[col]);

      ri = xy[y] + C2[c2].r + offsetR;
      gi = xy[y] + C1[c1].g + C2[c2].g + offsetG;
      bi = xy[y] + C1[c1].b + offsetB;

      ri = (short)unscale(ri);
      gi = (short)unscale(gi);
      bi = (short)unscale(bi);

      outptr[RGB_RED] = (JSAMPLE)clip(ri);
      outptr[RGB_GREEN] = (JSAMPLE)clip(gi);
      outptr[RGB_BLUE] = (JSAMPLE)clip(bi);
      outptr+=3;
    }
  }
}

#endif


/**************** YCbCr -> RGB conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	R = Y                + 1.40200 * Cr
 *	G = Y - 0.34414 * Cb - 0.71414 * Cr
 *	B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 * Notice that Y, being an integral input, does not contribute any fraction
 * so it need not participate in the rounding.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times Cb and Cr for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
 * values for the G calculation are left scaled up, since we must add them
 * together before rounding.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL void
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Convert some rows of samples to the output colorspace.
 *
 * Note that we change from noninterleaved, one-plane-per-component format
 * to interleaved-pixel format.  The output buffer is therefore three times
 * as wide as the input buffer.
 * A starting row offset is provided only for the input buffer.  The caller
 * can easily adjust the passed output_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF void
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}

/*
 * Convert some rows of samples into the BGR colorspace
 */

METHODDEF void
ycc_bgr_convert (j_decompress_ptr cinfo,
         JSAMPIMAGE input_buf, JDIMENSION input_row,
         JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[BGR_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr[BGR_GREEN] = range_limit[y +
                  ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
                         SCALEBITS))];
      outptr[BGR_RED] =   range_limit[y + Crrtab[cr]];
      outptr += BGR_PIXELSIZE;
    }
  }
}


/**************** Cases other than YCbCr -> RGB **************/


/*
 * Color conversion for no colorspace change: just copy the data,
 * converting from separate-planes to interleaved representation.
 */

METHODDEF void
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
  JDIMENSION num_cols = cinfo->output_width;
  int ci;

  while (--num_rows >= 0) {
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
      outptr = output_buf[0] + ci;
      for (count = num_cols; count > 0; count--) {
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
  }
}


/*
 * Color conversion for grayscale: just copy the data.
 * This also works for YCbCr -> grayscale conversion, in which
 * we just copy the Y (luminance) component and ignore chrominance.
 */

METHODDEF void
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
		    num_rows, cinfo->output_width);
}

#ifdef NIFTY
METHODDEF void
ycbcra_rgba_convert (j_decompress_ptr cinfo,
                   JSAMPIMAGE input_buf, JDIMENSION input_row,
                   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[(y + Crrtab[cr])];   /* red */
      outptr[1] = range_limit[(y +                 /* green */
                              ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
                                                 SCALEBITS)))];
      outptr[2] = range_limit[(y + Cbbtab[cb])];   /* blue */
      /* Alpha passes through unchanged */
      outptr[3] = inptr3[col];  /* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}

/* the following version contains a bug which has been
   given an eternal life via the FlashPix spec.
*/
METHODDEF void
ycbcra_rgba_legacy_convert (j_decompress_ptr cinfo,
                   JSAMPIMAGE input_buf, JDIMENSION input_row,
                   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];   /* red */
      outptr[1] = range_limit[MAXJSAMPLE - (y +                 /* green */
                              ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
                                                 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];   /* blue */
      /* Alpha passes through unchanged */
      outptr[3] = inptr3[col];  /* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
#endif

/*
 * Adobe-style YCCK->CMYK conversion.
 * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume build_ycc_rgb_table has been called.
 */

METHODDEF void
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF void
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL void
jinit_color_deconverter (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
#ifdef NIFTY
  case JCS_YCC:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCCA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_RGBA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCbCrA:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_RGBA_LEGACY:
    	/* rgba legacy is a hack and should only exist with an input space of
  	   JCS_YCbCrA_LEGACY. */
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  case JCS_YCbCrA_LEGACY:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
#endif
  case JCS_RGB:
  case JCS_YCbCr:
#ifdef WIAJPEG
  case JCS_BGR:
#endif
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  }

  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  case JCS_RGB:
    /*fprintf(stderr, "I think I am: %d\n", cinfo->jpeg_color_space);*/
    cinfo->out_color_components = RGB_PIXELSIZE;
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = ycc_rgb_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
      cconvert->pub.color_convert = null_convert;
#ifdef NIFTY
    } else if (cinfo->jpeg_color_space == JCS_YCC) {
      cconvert->pub.color_convert = pycc_rgb_convert;
      build_pycc_rgb_table(cinfo);
#endif
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

#ifdef WIAJPEG
  case JCS_BGR:

    cinfo->out_color_components = RGB_PIXELSIZE;
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = ycc_bgr_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
      cconvert->pub.color_convert = null_convert;
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

#endif

#ifdef NIFTY
  case JCS_RGBA:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCbCrA) {
      cconvert->pub.color_convert = ycbcra_rgba_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_RGBA) {
      cconvert->pub.color_convert = null_convert;
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;
  case JCS_RGBA_LEGACY:
  	/* rgba legacy is a hack and should only exist with an input space of
  	   JCS_YCbCrA_LEGACY. */
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCbCrA_LEGACY) {
      cconvert->pub.color_convert = ycbcra_rgba_legacy_convert;
      build_ycc_rgb_table(cinfo);
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;
#endif

  case JCS_CMYK:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCCK) {
      cconvert->pub.color_convert = ycck_cmyk_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else {
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
      cinfo->out_color_components = cinfo->num_components;
      cconvert->pub.color_convert = null_convert;
    } else {			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    }
    break;
  }

  if (cinfo->quantize_colors)
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdatasrc.cpp ===
/*
 * jdatasrc.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains decompression data source routines for the case of
 * reading JPEG data from a file (or any stdio stream).  While these routines
 * are sufficient for most applications, some will want to use a different
 * source manager.
 * IMPORTANT: we assume that fread() will correctly transcribe an array of
 * JOCTETs from 8-bit-wide elements on external storage.  If char is wider
 * than 8 bits on your machine, you may need to do some tweaking.
 */

/* SCCSID = "@(#)jdatasrc.cc	1.4 15:11:56 06/20/96" */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"


/* Expanded data source object for stdio input */

typedef struct {
  struct jpeg_source_mgr pub;	/* public fields */

  FILE * infile;		/* source stream */
  JOCTET * buffer;		/* start of buffer */
  boolean start_of_file;	/* have we gotten any data yet? */
} my_source_mgr;

typedef my_source_mgr * my_src_ptr;

/* and similarly for an in memory version for NIFTY. */
#ifdef NIFTY
typedef struct {
  struct jpeg_source_mgr pub;   /* public fields */

  int    bufSize;
  JOCTET *NIFbuffer;
  JOCTET *buffer;
  boolean start_of_file;
} nif_source_mgr;

typedef nif_source_mgr *nif_src_ptr;
#endif

#ifdef NIFTY

#ifdef WIN32
//  INPUT_BUF_SIZE changed for alloc_small() to work correctly.
#define INPUT_BUF_SIZE  60000	/* choose a much larger in memory buffer for NIFTY*/
#else
#define INPUT_BUF_SIZE  65535	/* choose a much larger in memory buffer for NIFTY*/
#endif

#else
#define INPUT_BUF_SIZE  4096	/* choose an efficiently fread'able size */
#endif

/*
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
 */

METHODDEF void
init_source (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
}

#ifdef NIFTY
/* and a variation on the above for NIFty. */
METHODDEF void
init_mem_source (j_decompress_ptr cinfo)
{
  nif_src_ptr src = (nif_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
}
#endif


/*
 * Fill the input buffer --- called whenever buffer is emptied.
 *
 * In typical applications, this should read fresh data into the buffer
 * (ignoring the current state of next_input_byte & bytes_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been reloaded.  It is not necessary to
 * fill the buffer entirely, only to obtain at least one more byte.
 *
 * There is no such thing as an EOF return.  If the end of the file has been
 * reached, the routine has a choice of ERREXIT() or inserting fake data into
 * the buffer.  In most cases, generating a warning message and inserting a
 * fake EOI marker is the best course of action --- this will allow the
 * decompressor to output however much of the image is there.  However,
 * the resulting error message is misleading if the real problem is an empty
 * input file, so we handle that case specially.
 *
 * In applications that need to be able to suspend compression due to input
 * not being available yet, a FALSE return indicates that no more data can be
 * obtained right now, but more may be forthcoming later.  In this situation,
 * the decompressor will return to its caller (with an indication of the
 * number of scanlines it has read, if any).  The application should resume
 * decompression after it has loaded more data into the input buffer.  Note
 * that there are substantial restrictions on the use of suspension --- see
 * the documentation.
 *
 * When suspending, the decompressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point must be rescanned after resumption, so move it to
 * the front of the buffer rather than discarding it.
 */

#ifdef NIFTY
METHODDEF boolean
fill_mem_input_buffer (j_decompress_ptr cinfo)
{
  nif_src_ptr src = (nif_src_ptr)cinfo->src;
  size_t nbytes;

  (void)memcpy(src->buffer, src->NIFbuffer, src->bufSize);
  nbytes = src->bufSize;

  src->pub.next_input_byte = src->buffer;
  src->pub.bytes_in_buffer = nbytes;
  src->start_of_file = FALSE;
 
  return TRUE;
}

#endif

METHODDEF boolean
fill_input_buffer (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;
  size_t nbytes;

  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);

  if (nbytes <= 0) {
    if (src->start_of_file)	/* Treat empty input file as fatal error */
      ERREXIT(cinfo, JERR_INPUT_EMPTY);
    WARNMS(cinfo, JWRN_JPEG_EOF);
    /* Insert a fake EOI marker */
    src->buffer[0] = (JOCTET) 0xFF;
    src->buffer[1] = (JOCTET) JPEG_EOI;
    nbytes = 2;
  }

  src->pub.next_input_byte = src->buffer;
  src->pub.bytes_in_buffer = nbytes;
  src->start_of_file = FALSE;

  return TRUE;
}


/*
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
 */

METHODDEF void
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
    while (num_bytes > (long) src->pub.bytes_in_buffer) {
      num_bytes -= (long) src->pub.bytes_in_buffer;
      (void) fill_input_buffer(cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->pub.next_input_byte += (size_t) num_bytes;
    src->pub.bytes_in_buffer -= (size_t) num_bytes;
  }
}


/*
 * An additional method that can be provided by data source modules is the
 * resync_to_restart method for error recovery in the presence of RST markers.
 * For the moment, this source module just uses the default resync method
 * provided by the JPEG library.  That method assumes that no backtracking
 * is possible.
 */


/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF void
term_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}


/*
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
 */

#ifdef NIFTY
GLOBAL void
jpeg_mem_src (j_decompress_ptr cinfo, JOCTET *UserBuffer, int size)
{
  nif_src_ptr src;

  if (cinfo->src == NULL) {     /* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                                  SIZEOF(nif_source_mgr));

    src = (nif_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                                  (INPUT_BUF_SIZE - 20) * SIZEOF(JOCTET));

  }

  src = (nif_src_ptr) cinfo->src;
  src->pub.init_source = init_mem_source;
  src->pub.fill_input_buffer = fill_mem_input_buffer;
  src->pub.term_source = term_source;
  src->NIFbuffer = UserBuffer;
  src->bufSize = size;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}

#endif

GLOBAL void
jpeg_stdio_src (j_decompress_ptr cinfo, FILE * infile)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->infile = infile;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdcoefct.cpp ===
/*
 * jdcoefct.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the coefficient buffer controller for decompression.
 * This controller is the top level of the JPEG decompressor proper.
 * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
 *
 * In buffered-image mode, this controller is the interface between
 * input-oriented processing and output-oriented processing.
 * Also, the input side (only) is used when reading a file for transcoding.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

/* Block smoothing is only applicable for progressive JPEG, so: */
#ifndef D_PROGRESSIVE_SUPPORTED
#undef BLOCK_SMOOTHING_SUPPORTED
#endif

/* Private buffer controller object */

typedef struct {
  struct jpeg_d_coef_controller pub; /* public fields */

  /* These variables keep track of the current location of the input side. */
  /* cinfo->input_iMCU_row is also used for this. */
  JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* The output side's location is represented by cinfo->output_iMCU_row. */

  /* In single-pass modes, it's sufficient to buffer just one MCU.
   * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
   * and let the entropy decoder write into that workspace each time.
   * (On 80x86, the workspace is FAR even though it's not really very big;
   * this is to keep the module interfaces unchanged when a large coefficient
   * buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays; it is used only by the input side.
   */
  JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
#endif

#ifdef BLOCK_SMOOTHING_SUPPORTED
  /* When doing block smoothing, we latch coefficient Al values here */
  int * coef_bits_latch;
#define SAVED_COEFS  6		/* we save coef_bits[0..5] */
#endif
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;

/* Forward declarations */
METHODDEF int decompress_onepass
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#ifdef D_MULTISCAN_FILES_SUPPORTED
METHODDEF int decompress_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif
#ifdef BLOCK_SMOOTHING_SUPPORTED
LOCAL boolean smoothing_ok JPP((j_decompress_ptr cinfo));
METHODDEF int decompress_smooth_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif


LOCAL void
start_iMCU_row (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->MCU_ctr = 0;
  coef->MCU_vert_offset = 0;
}


/*
 * Initialize for an input processing pass.
 */

METHODDEF void
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
  start_iMCU_row(cinfo);
}


/*
 * Initialize for an output processing pass.
 */

METHODDEF void
start_output_pass (j_decompress_ptr cinfo)
{
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
      coef->pub.decompress_data = decompress_smooth_data;
    else
      coef->pub.decompress_data = decompress_data;
  }
#endif
  cinfo->output_iMCU_row = 0;
}


/*
 * Decompress and return some data in the single-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Input and output must run in lockstep since we have only a one-MCU buffer.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image.
 * For single pass, this is the same as the components in the scan.
 */

METHODDEF int
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, ci, xindex, yindex, yoffset, useful_width;
  JSAMPARRAY output_ptr;
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
	 MCU_col_num++) {
      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
      jzero_far((void FAR *) coef->MCU_buffer[0],
		(size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
      }
      /* Determine where data should go in output_buf and do the IDCT thing.
       * We skip dummy blocks at the right and bottom edges (but blkn gets
       * incremented past them!).  Note the inner loop relies on having
       * allocated the MCU_buffer[] blocks sequentially.
       */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
	  blkn += compptr->MCU_blocks;
	  continue;
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
	output_ptr = output_buf[ci] + yoffset * compptr->DCT_scaled_size;
	start_col = MCU_col_num * compptr->MCU_sample_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
	      yoffset+yindex < compptr->last_row_height) {
	    output_col = start_col;
	    for (xindex = 0; xindex < useful_width; xindex++) {
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
			      output_ptr, output_col);
	      output_col += compptr->DCT_scaled_size;
	    }
	  }
	  blkn += compptr->MCU_width;
	  output_ptr += compptr->DCT_scaled_size;
	}
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
    start_iMCU_row(cinfo);
    return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}


/*
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF int
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Consume input data and store it in the full-image coefficient buffer.
 * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
 * ie, v_samp_factor block rows for each component in the scan.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF int
consume_data (j_decompress_ptr cinfo)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       cinfo->input_iMCU_row * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, TRUE);
    /* Note: entropy decoder expects buffer to be zeroed,
     * but this is handled automatically by the memory manager
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
    start_iMCU_row(cinfo);
    return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}


/*
 * Decompress and return some data in the multi-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF int
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num;
  int ci, block_row, block_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, FALSE);
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row)
      block_rows = compptr->v_samp_factor;
    else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
    output_ptr = output_buf[ci];
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
      buffer_ptr = buffer[block_row];
      output_col = 0;
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
			output_ptr, output_col);
	buffer_ptr++;
	output_col += compptr->DCT_scaled_size;
      }
      output_ptr += compptr->DCT_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


#ifdef BLOCK_SMOOTHING_SUPPORTED

/*
 * This code applies interblock smoothing as described by section K.8
 * of the JPEG standard: the first 5 AC coefficients are estimated from
 * the DC values of a DCT block and its 8 neighboring blocks.
 * We apply smoothing only for progressive JPEG decoding, and only if
 * the coefficients it can estimate are not yet known to full precision.
 */

/*
 * Determine whether block smoothing is applicable and safe.
 * We also latch the current states of the coef_bits[] entries for the
 * AC coefficients; otherwise, if the input side of the decompressor
 * advances into a new scan, we might think the coefficients are known
 * more accurately than they really are.
 */

LOCAL boolean
smoothing_ok (j_decompress_ptr cinfo)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  boolean smoothing_useful = FALSE;
  int ci, coefi;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    for (coefi = 0; coefi <= 5; coefi++) {
      if (qtable->quantval[coefi] == 0)
	return FALSE;
    }
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
    if (coef_bits[0] < 0)
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
      coef_bits_latch[coefi] = coef_bits[coefi];
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
    }
    coef_bits_latch += SAVED_COEFS;
  }

  return smoothing_useful;
}


/*
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF int
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num, last_block_column;
  int ci, block_row, block_rows, access_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;
  boolean first_row, last_row;
  JBLOCK workspace;
  int *coef_bits;
  JQUANT_TBL *quanttbl;
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
      /* If input is working on current scan, we ordinarily want it to
       * have completed the current row.  But if input scan is DC,
       * we want it to keep one row ahead so that next block row's DC
       * values are up to date.
       */
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
	break;
    }
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
      block_rows = compptr->v_samp_factor;
      access_rows = block_rows * 2; /* this and next iMCU row */
      last_row = FALSE;
    } else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
      access_rows = block_rows; /* this iMCU row only */
      last_row = TRUE;
    }
    /* Align the virtual buffer for this component. */
    if (cinfo->output_iMCU_row > 0) {
      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
      buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
	 (JDIMENSION) access_rows, FALSE);
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
      first_row = FALSE;
    } else {
      buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
      first_row = TRUE;
    }
    /* Fetch component-dependent info */
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
    quanttbl = compptr->quant_table;
    Q00 = quanttbl->quantval[0];
    Q01 = quanttbl->quantval[1];
    Q10 = quanttbl->quantval[2];
    Q20 = quanttbl->quantval[3];
    Q11 = quanttbl->quantval[4];
    Q02 = quanttbl->quantval[5];
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
    output_ptr = output_buf[ci];
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
      buffer_ptr = buffer[block_row];
      if (first_row && block_row == 0)
	prev_block_row = buffer_ptr;
      else
	prev_block_row = buffer[block_row-1];
      if (last_row && block_row == block_rows-1)
	next_block_row = buffer_ptr;
      else
	next_block_row = buffer[block_row+1];
      /* We fetch the surrounding DC values using a sliding-register approach.
       * Initialize all nine here so as to do the right thing on narrow pics.
       */
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
      output_col = 0;
      last_block_column = compptr->width_in_blocks - 1;
      for (block_num = 0; block_num <= last_block_column; block_num++) {
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
	/* Update DC values */
	if (block_num < last_block_column) {
	  DC3 = (int) prev_block_row[1][0];
	  DC6 = (int) buffer_ptr[1][0];
	  DC9 = (int) next_block_row[1][0];
	}
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
	  num = 36 * Q00 * (DC4 - DC6);
	  if (num >= 0) {
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[1] = (JCOEF) pred;
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
	  num = 36 * Q00 * (DC2 - DC8);
	  if (num >= 0) {
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[8] = (JCOEF) pred;
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[16] = (JCOEF) pred;
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
	  if (num >= 0) {
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[9] = (JCOEF) pred;
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[2] = (JCOEF) pred;
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
	DC4 = DC5; DC5 = DC6;
	DC7 = DC8; DC8 = DC9;
	buffer_ptr++, prev_block_row++, next_block_row++;
	output_col += compptr->DCT_scaled_size;
      }
      output_ptr += compptr->DCT_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* BLOCK_SMOOTHING_SUPPORTED */


/*
 * Initialize coefficient buffer controller.
 */

GLOBAL void
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      access_rows = compptr->v_samp_factor;
#ifdef BLOCK_SMOOTHING_SUPPORTED
      /* If block smoothing could be used, need a bigger window */
      if (cinfo->progressive_mode)
	access_rows *= 3;
#endif
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    /* We only need a single-MCU buffer. */
    JBLOCKROW buffer;
    int i;

    buffer = (JBLOCKROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jddctmgr.cpp ===
/*
 * jddctmgr.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the inverse-DCT management logic.
 * This code selects a particular IDCT implementation to be used,
 * and it performs related housekeeping chores.  No code in this file
 * is executed per IDCT step, only during output pass setup.
 *
 * Note that the IDCT routines are responsible for performing coefficient
 * dequantization as well as the IDCT proper.  This module sets up the
 * dequantization multiplier table needed by the IDCT routine.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/*
 * The decompressor input side (jdinput.c) saves away the appropriate
 * quantization table for each component at the start of the first scan
 * involving that component.  (This is necessary in order to correctly
 * decode files that reuse Q-table slots.)
 * When we are ready to make an output pass, the saved Q-table is converted
 * to a multiplier table that will actually be used by the IDCT routine.
 * The multiplier table contents are IDCT-method-dependent.  To support
 * application changes in IDCT method between scans, we can remake the
 * multiplier tables if necessary.
 * In buffered-image mode, the first output pass may occur before any data
 * has been seen for some components, and thus before their Q-tables have
 * been saved away.  To handle this case, multiplier tables are preset
 * to zeroes; the result of the IDCT will be a neutral gray level.
 */


/* Private subobject for this module */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* This array contains the IDCT method code that each multiplier table
   * is currently set up for, or -1 if it's not yet set up.
   * The actual multiplier tables are pointed to by dct_table in the
   * per-component comp_info structures.
   */
  int cur_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;


/* Allocated multiplier tables: big enough for any supported variant */

typedef union {
  ISLOW_MULT_TYPE islow_array[DCTSIZE2];
#ifdef DCT_IFAST_SUPPORTED
  IFAST_MULT_TYPE ifast_array[DCTSIZE2];
#endif
#ifdef DCT_FLOAT_SUPPORTED
  FLOAT_MULT_TYPE float_array[DCTSIZE2];
#endif
} multiplier_table;


/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
 * so be sure to compile that code if either ISLOW or SCALING is requested.
 */
#ifdef DCT_ISLOW_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#else
#ifdef IDCT_SCALING_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#endif
#endif


/*
 * Prepare for an output pass.
 * Here we select the proper IDCT routine for each component and build
 * a matching multiplier table.
 */

METHODDEF void
start_pass (j_decompress_ptr cinfo)
{
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch (compptr->DCT_scaled_size) {
#ifdef IDCT_SCALING_SUPPORTED
    case 1:
      method_ptr = jpeg_idct_1x1;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 2:
      method_ptr = jpeg_idct_2x2;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 4:
      method_ptr = jpeg_idct_4x4;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
#endif
    case DCTSIZE:
      switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
	method = JDCT_ISLOW;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
	method = JDCT_IFAST;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
	method = JDCT_FLOAT;
	break;
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
      }
      break;
    default:
      ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
      break;
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
    /* Create multiplier table from quant table.
     * However, we can skip this if the component is uninteresting
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
      continue;
    qtbl = compptr->quant_table;
    if (qtbl == NULL)		/* happens if no data yet for component */
      continue;
    idct->cur_method[ci] = method;
    switch (method) {
#ifdef PROVIDE_ISLOW_TABLES
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored in natural order as ints.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[jpeg_zigzag_order[i]];
	}
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.  The multipliers are stored in natural order.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[jpeg_zigzag_order[i]],
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * The multipliers are stored in natural order.
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[jpeg_zigzag_order[i]] *
	       aanscalefactor[row] * aanscalefactor[col]);
	    i++;
	  }
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Initialize IDCT manager.
 */

GLOBAL void
jinit_inverse_dct (j_decompress_ptr cinfo)
{
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdct.h ===
/*
 * jdct.h
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file contains common declarations for the forward and
 * inverse DCT modules.  These declarations are private to the DCT managers
 * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
 * The individual DCT algorithms are kept in separate files to ease 
 * machine-dependent tuning (e.g., assembly coding).
 */


/*
 * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
 * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
 * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
 * implementations use an array of type FAST_FLOAT, instead.)
 * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
 * The DCT outputs are returned scaled up by a factor of 8; they therefore
 * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
 * convention improves accuracy in integer implementations and saves some
 * work in floating-point ones.
 * Quantization of the output coefficients is done by jcdctmgr.c.
 */

#if BITS_IN_JSAMPLE == 8
typedef int DCTELEM;		/* 16 or 32 bits is fine */
#else
typedef INT32 DCTELEM;		/* must have 32 bits */
#endif

typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));


/*
 * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
 * to an output sample array.  The routine must dequantize the input data as
 * well as perform the IDCT; for dequantization, it uses the multiplier table
 * pointed to by compptr->dct_table.  The output data is to be placed into the
 * sample array starting at a specified column.  (Any row offset needed will
 * be applied to the array pointer before it is passed to the IDCT code.)
 * Note that the number of samples emitted by the IDCT routine is
 * DCT_scaled_size * DCT_scaled_size.
 */

/* typedef inverse_DCT_method_ptr is declared in jpegint.h */

/*
 * Each IDCT routine has its own ideas about the best dct_table element type.
 */

typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
#if BITS_IN_JSAMPLE == 8
typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
#else
typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
#endif
typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */


/*
 * Each IDCT routine is responsible for range-limiting its results and
 * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
 * be quite far out of range if the input data is corrupt, so a bulletproof
 * range-limiting step is required.  We use a mask-and-table-lookup method
 * to do the combined operations quickly.  See the comments with
 * prepare_range_limit_table (in jdmaster.c) for more info.
 */

#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)

#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_fdct_islow		jFDislow
#define jpeg_fdct_ifast		jFDifast
#define jpeg_fdct_float		jFDfloat
#define jpeg_idct_islow		jRDislow
#define jpeg_idct_ifast		jRDifast
#define jpeg_idct_float		jRDfloat
#define jpeg_idct_4x4		jRD4x4
#define jpeg_idct_2x2		jRD2x2
#define jpeg_idct_1x1		jRD1x1
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Extern declarations for the forward and inverse DCT routines. */

EXTERN void jpeg_fdct_islow JPP((DCTELEM * data));
EXTERN void jpeg_fdct_ifast JPP((DCTELEM * data));
EXTERN void jpeg_fdct_float JPP((FAST_FLOAT * data));

EXTERN void jpeg_idct_islow
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_ifast
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_float
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_4x4
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_2x2
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_1x1
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));


/*
 * Macros for handling fixed-point arithmetic; these are used by many
 * but not all of the DCT/IDCT modules.
 *
 * All values are expected to be of type INT32.
 * Fractional constants are scaled left by CONST_BITS bits.
 * CONST_BITS is defined within each module using these macros,
 * and may differ from one module to the next.
 */

#define ONE	((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)

/* Convert a positive real constant to an integer scaled by CONST_SCALE.
 * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
 * thus causing a lot of useless floating-point operations at run time.
 */

#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))

/* Descale and correctly round an INT32 value that's scaled by N bits.
 * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
 * the fudge factor is correct for either sign of X.
 */

#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * This macro is used only when the two inputs will actually be no more than
 * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
 * full 32x32 multiply.  This provides a useful speedup on many machines.
 * Unfortunately there is no way to specify a 16x16->32 multiply portably
 * in C, but some C compilers will do the right thing if you provide the
 * correct combination of casts.
 */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
#endif
#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
#endif

#ifndef MULTIPLY16C16		/* default definition */
#define MULTIPLY16C16(var,const)  ((var) * (const))
#endif

/* Same except both inputs are variables. */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
#endif

#ifndef MULTIPLY16V16		/* default definition */
#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdhuff.cpp ===
/*
 * jdhuff.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdphuff.c */


/*
 * Expanded entropy decoder object for Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
} huff_entropy_decoder;

typedef huff_entropy_decoder * huff_entropy_ptr;


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF void
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
   * This ought to be an error condition, but we make it a warning because
   * there are some baseline files out there with all zeroes in these bytes.
   */
  if (cinfo->Ss != 0 || cinfo->Se != DCTSIZE2-1 ||
      cinfo->Ah != 0 || cinfo->Al != 0)
    WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	cinfo->dc_huff_tbl_ptrs[dctbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	cinfo->ac_huff_tbl_ptrs[actbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    /* Compute derived values for Huffman tables */
    /* We may do this more than once for a table, but it's not expensive */
    jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
			    & entropy->dc_derived_tbls[dctbl]);
    jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
			    & entropy->ac_derived_tbls[actbl]);
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Compute the derived values for a Huffman table.
 * Note this is also used by jdphuff.c.
 */

GLOBAL void
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl,
			 d_derived_tbl ** pdtbl)
{
  d_derived_tbl *dtbl;
  int p, i, l, si;
  int lookbits, ctr;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
  dtbl->pub = htbl;		/* fill in back link */
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
  for (l = 1; l <= 16; l++) {
    if (htbl->bits[l]) {
      dtbl->valptr[l] = p; /* huffval[] index of 1st symbol of code length l */
      dtbl->mincode[l] = huffcode[p]; /* minimum code of length l */
      p += htbl->bits[l];
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */

  /* Compute lookahead tables to speed up decoding.
   * First we set all the table entries to 0, indicating "too long";
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));

  p = 0;
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
	dtbl->look_nbits[lookbits] = l;
	dtbl->look_sym[lookbits] = htbl->huffval[p];
	lookbits++;
      }
    }
  }
}


/*
 * Out-of-line code for bit fetching (shared with jdphuff.c).
 * See jdhuff.h for info about usage.
 * Note: current values of get_buffer and bits_left are passed as parameters,
 * but are returned in the corresponding fields of the state struct.
 *
 * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 * of get_buffer to be used.  (On machines with wider words, an even larger
 * buffer could be used.)  However, on some machines 32-bit shifts are
 * quite slow and take time proportional to the number of places shifted.
 * (This is true with most PC compilers, for instance.)  In this case it may
 * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 */

#ifdef SLOW_SHIFT_32
#define MIN_GET_BITS  15	/* minimum allowable value */
#else
#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
#endif


GLOBAL boolean
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  register int c;

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */

  while (bits_left < MIN_GET_BITS) {
    /* Attempt to read a byte */
    if (state->unread_marker != 0)
      goto no_more_data;	/* can't advance past a marker */

    if (bytes_in_buffer == 0) {
      if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	return FALSE;
      next_input_byte = state->cinfo->src->next_input_byte;
      bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
    }
    bytes_in_buffer--;
    c = GETJOCTET(*next_input_byte++);

    /* If it's 0xFF, check and discard stuffed zero byte */
    if (c == 0xFF) {
      do {
	if (bytes_in_buffer == 0) {
	  if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	    return FALSE;
	  next_input_byte = state->cinfo->src->next_input_byte;
	  bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
	}
	bytes_in_buffer--;
	c = GETJOCTET(*next_input_byte++);
      } while (c == 0xFF);

      if (c == 0) {
	/* Found FF/00, which represents an FF data byte */
	c = 0xFF;
      } else {
	/* Oops, it's actually a marker indicating end of compressed data. */
	/* Better put it back for use later */
	state->unread_marker = c;

      no_more_data:
	/* There should be enough bits still left in the data segment; */
	/* if so, just break out of the outer while loop. */
	if (bits_left >= nbits)
	  break;
	/* Uh-oh.  Report corrupted data to user and stuff zeroes into
	 * the data stream, so that we can produce some kind of image.
	 * Note that this code will be repeated for each byte demanded
	 * for the rest of the segment.  We use a nonvolatile flag to ensure
	 * that only one warning message appears.
	 */
	if (! *(state->printed_eod_ptr)) {
	  WARNMS(state->cinfo, JWRN_HIT_MARKER);
	  *(state->printed_eod_ptr) = TRUE;
	}
	c = 0;			/* insert a zero byte into bit buffer */
      }
    }

    /* OK, load c into get_buffer */
    get_buffer = (get_buffer << 8) | c;
    bits_left += 8;
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
}


/*
 * Out-of-line code for Huffman code decoding.
 * See jdhuff.h for info about usage.
 */

GLOBAL int
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
  register int l = min_bits;
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
  code = GET_BITS(l);

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
    code <<= 1;
    CHECK_BIT_BUFFER(*state, 1, return -1);
    code |= GET_BITS(1);
    l++;
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ htbl->valptr[l] +
			    ((int) (code - htbl->mincode[l])) ];
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL boolean
process_restart (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, since we'll just re-assign them on the next call.)
 */

METHODDEF boolean
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  register int s, k, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * dctbl;
  d_derived_tbl * actbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
    actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, dctbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Shortcut if component's values are not interesting */
    if (! compptr->component_needed)
      goto skip_ACs;

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Output the DC coefficient (assumes jpeg_natural_order[0] = 0) */
    (*block)[0] = (JCOEF) s;

    /* Do we need to decode the AC coefficients for this component? */
    if (compptr->DCT_scaled_size > 1) {

      /* Section F.2.2.2: decode the AC coefficients */
      /* Since zeroes are skipped, output area must be cleared beforehand */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label2);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  r = GET_BITS(s);
	  s = HUFF_EXTEND(r, s);
	  /* Output coefficient in natural (dezigzagged) order.
	   * Note: the extra entries in jpeg_natural_order[] will save us
	   * if k >= DCTSIZE2, which could happen if the data is corrupted.
	   */
	  (*block)[jpeg_natural_order[k]] = (JCOEF) s;
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    } else {
skip_ACs:

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label3);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  DROP_BITS(s);
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    }
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL void
jinit_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
  entropy->pub.decode_mcu = decode_mcu;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdhuff.h ===
/*
 * jdhuff.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains declarations for Huffman entropy decoding routines
 * that are shared between the sequential decoder (jdhuff.c) and the
 * progressive decoder (jdphuff.c).  No other modules need to see these.
 */

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_d_derived_tbl	jMkDDerived
#define jpeg_fill_bit_buffer	jFilBitBuf
#define jpeg_huff_decode	jHufDecode
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Derived data constructed for each Huffman table */

#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */

typedef struct {
  /* Basic tables: (element [0] of each array is unused) */
  INT32 mincode[17];		/* smallest code of length k */
  INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  int valptr[17];		/* huffval[] index of 1st symbol of length k */

  /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  JHUFF_TBL *pub;

  /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
   * the input data stream.  If the next Huffman code is no more
   * than HUFF_LOOKAHEAD bits long, we can obtain its length and
   * the corresponding symbol directly from these tables.
   */
  int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
} d_derived_tbl;

/* Expand a Huffman table definition into the derived format */
EXTERN void jpeg_make_d_derived_tbl JPP((j_decompress_ptr cinfo,
				JHUFF_TBL * htbl, d_derived_tbl ** pdtbl));


/*
 * Fetching the next N bits from the input stream is a time-critical operation
 * for the Huffman decoders.  We implement it with a combination of inline
 * macros and out-of-line subroutines.  Note that N (the number of bits
 * demanded at one time) never exceeds 15 for JPEG use.
 *
 * We read source bytes into get_buffer and dole out bits as needed.
 * If get_buffer already contains enough bits, they are fetched in-line
 * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
 * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
 * as full as possible (not just to the number of bits needed; this
 * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
 * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
 * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
 * at least the requested number of bits --- dummy zeroes are inserted if
 * necessary.
 */

typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE  32	/* size of buffer in bits */

/* If long is > 32 bits on your machine, and shifting/masking longs is
 * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
 * appropriately should be a win.  Unfortunately we can't do this with
 * something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
 * because not all machines measure sizeof in 8-bit bytes.
 */

typedef struct {		/* Bitreading state saved across MCUs */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  boolean printed_eod;		/* flag to suppress multiple warning msgs */
} bitread_perm_state;

typedef struct {		/* Bitreading working state within an MCU */
  /* current data source state */
  const JOCTET * next_input_byte; /* => next byte to read from source */
  size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  int unread_marker;		/* nonzero if we have hit a marker */
  /* bit input buffer --- note these values are kept in register variables,
   * not in this struct, inside the inner loops.
   */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  /* pointers needed by jpeg_fill_bit_buffer */
  j_decompress_ptr cinfo;	/* back link to decompress master record */
  boolean * printed_eod_ptr;	/* => flag in permanent state */
} bitread_working_state;

/* Macros to declare and load/save bitread local variables. */
#define BITREAD_STATE_VARS  \
	register bit_buf_type get_buffer;  \
	register int bits_left;  \
	bitread_working_state br_state

#define BITREAD_LOAD_STATE(cinfop,permstate)  \
	br_state.cinfo = cinfop; \
	br_state.next_input_byte = cinfop->src->next_input_byte; \
	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
	br_state.unread_marker = cinfop->unread_marker; \
	get_buffer = permstate.get_buffer; \
	bits_left = permstate.bits_left; \
	br_state.printed_eod_ptr = & permstate.printed_eod

#define BITREAD_SAVE_STATE(cinfop,permstate)  \
	cinfop->src->next_input_byte = br_state.next_input_byte; \
	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
	cinfop->unread_marker = br_state.unread_marker; \
	permstate.get_buffer = get_buffer; \
	permstate.bits_left = bits_left

/*
 * These macros provide the in-line portion of bit fetching.
 * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 * The variables get_buffer and bits_left are assumed to be locals,
 * but the state struct might not be (jpeg_huff_decode needs this).
 *	CHECK_BIT_BUFFER(state,n,action);
 *		Ensure there are N bits in get_buffer; if suspend, take action.
 *      val = GET_BITS(n);
 *		Fetch next N bits.
 *      val = PEEK_BITS(n);
 *		Fetch next N bits without removing them from the buffer.
 *	DROP_BITS(n);
 *		Discard next N bits.
 * The value N should be a simple variable, not an expression, because it
 * is evaluated multiple times.
 */

#define CHECK_BIT_BUFFER(state,nbits,action) \
	{ if (bits_left < (nbits)) {  \
	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
	      { action; }  \
	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }

#define GET_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -= (nbits)))) & ((1<<(nbits))-1))

#define PEEK_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -  (nbits)))) & ((1<<(nbits))-1))

#define DROP_BITS(nbits) \
	(bits_left -= (nbits))

/* Load up the bit buffer to a depth of at least nbits */
EXTERN boolean jpeg_fill_bit_buffer JPP((bitread_working_state * state,
		register bit_buf_type get_buffer, register int bits_left,
		int nbits));


/*
 * Code for extracting next Huffman-coded symbol from input bit stream.
 * Again, this is time-critical and we make the main paths be macros.
 *
 * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 * without looping.  Usually, more than 95% of the Huffman codes will be 8
 * or fewer bits long.  The few overlength codes are handled with a loop,
 * which need not be inline code.
 *
 * Notes about the HUFF_DECODE macro:
 * 1. Near the end of the data segment, we may fail to get enough bits
 *    for a lookahead.  In that case, we do it the hard way.
 * 2. If the lookahead table contains no entry, the next code must be
 *    more than HUFF_LOOKAHEAD bits long.
 * 3. jpeg_huff_decode returns -1 if forced to suspend.
 */

#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
{ register int nb, look; \
  if (bits_left < HUFF_LOOKAHEAD) { \
    if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
    if (bits_left < HUFF_LOOKAHEAD) { \
      nb = 1; goto slowlabel; \
    } \
  } \
  look = PEEK_BITS(HUFF_LOOKAHEAD); \
  if ((nb = htbl->look_nbits[look]) != 0) { \
    DROP_BITS(nb); \
    result = htbl->look_sym[look]; \
  } else { \
    nb = HUFF_LOOKAHEAD+1; \
slowlabel: \
    if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
	{ failaction; } \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
  } \
}

/* Out-of-line case for Huffman code fetching */
EXTERN int jpeg_huff_decode JPP((bitread_working_state * state,
		register bit_buf_type get_buffer, register int bits_left,
		d_derived_tbl * htbl, int min_bits));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdmainct.cpp ===
/*
 * jdmainct.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for decompression.
 * The main buffer lies between the JPEG decompressor proper and the
 * post-processor; it holds downsampled data in the JPEG colorspace.
 *
 * Note that this code is bypassed in raw-data mode, since the application
 * supplies the equivalent of the main buffer in that case.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * In the current system design, the main buffer need never be a full-image
 * buffer; any full-height buffers will be found inside the coefficient or
 * postprocessing controllers.  Nonetheless, the main controller is not
 * trivial.  Its responsibility is to provide context rows for upsampling/
 * rescaling, and doing this in an efficient fashion is a bit tricky.
 *
 * Postprocessor input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  (We require DCT_scaled_size values to be
 * chosen such that these numbers are integers.  In practice DCT_scaled_size
 * values will likely be powers of two, so we actually have the stronger
 * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
 * Upsampling will typically produce max_v_samp_factor pixel rows from each
 * row group (times any additional scale factor that the upsampler is
 * applying).
 *
 * The coefficient controller will deliver data to us one iMCU row at a time;
 * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
 * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
 * to one row of MCUs when the image is fully interleaved.)  Note that the
 * number of sample rows varies across components, but the number of row
 * groups does not.  Some garbage sample rows may be included in the last iMCU
 * row at the bottom of the image.
 *
 * Depending on the vertical scaling algorithm used, the upsampler may need
 * access to the sample row(s) above and below its current input row group.
 * The upsampler is required to set need_context_rows TRUE at global selection
 * time if so.  When need_context_rows is FALSE, this controller can simply
 * obtain one iMCU row at a time from the coefficient controller and dole it
 * out as row groups to the postprocessor.
 *
 * When need_context_rows is TRUE, this controller guarantees that the buffer
 * passed to postprocessing contains at least one row group's worth of samples
 * above and below the row group(s) being processed.  Note that the context
 * rows "above" the first passed row group appear at negative row offsets in
 * the passed buffer.  At the top and bottom of the image, the required
 * context rows are manufactured by duplicating the first or last real sample
 * row; this avoids having special cases in the upsampling inner loops.
 *
 * The amount of context is fixed at one row group just because that's a
 * convenient number for this controller to work with.  The existing
 * upsamplers really only need one sample row of context.  An upsampler
 * supporting arbitrary output rescaling might wish for more than one row
 * group of context when shrinking the image; tough, we don't handle that.
 * (This is justified by the assumption that downsizing will be handled mostly
 * by adjusting the DCT_scaled_size values, so that the actual scale factor at
 * the upsample step needn't be much less than one.)
 *
 * To provide the desired context, we have to retain the last two row groups
 * of one iMCU row while reading in the next iMCU row.  (The last row group
 * can't be processed until we have another row group for its below-context,
 * and so we have to save the next-to-last group too for its above-context.)
 * We could do this most simply by copying data around in our buffer, but
 * that'd be very slow.  We can avoid copying any data by creating a rather
 * strange pointer structure.  Here's how it works.  We allocate a workspace
 * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
 * of row groups per iMCU row).  We create two sets of redundant pointers to
 * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
 * pointer lists look like this:
 *                   M+1                          M-1
 * master pointer --> 0         master pointer --> 0
 *                    1                            1
 *                   ...                          ...
 *                   M-3                          M-3
 *                   M-2                           M
 *                   M-1                          M+1
 *                    M                           M-2
 *                   M+1                          M-1
 *                    0                            0
 * We read alternate iMCU rows using each master pointer; thus the last two
 * row groups of the previous iMCU row remain un-overwritten in the workspace.
 * The pointer lists are set up so that the required context rows appear to
 * be adjacent to the proper places when we pass the pointer lists to the
 * upsampler.
 *
 * The above pictures describe the normal state of the pointer lists.
 * At top and bottom of the image, we diddle the pointer lists to duplicate
 * the first or last sample row as necessary (this is cheaper than copying
 * sample rows around).
 *
 * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 * situation each iMCU row provides only one row group so the buffering logic
 * must be different (eg, we must read two iMCU rows before we can emit the
 * first row group).  For now, we simply do not support providing context
 * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 * be worth providing --- if someone wants a 1/8th-size preview, they probably
 * want it quick and dirty, so a context-free upsampler is sufficient.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_main_controller pub; /* public fields */

  /* Pointer to allocated workspace (M or M+2 row groups). */
  JSAMPARRAY buffer[MAX_COMPONENTS];

  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */

  /* Remaining fields are only used in the context case. */

  /* These are the master pointers to the funny-order pointer lists. */
  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */

  int whichptr;			/* indicates which pointer set is now in use */
  int context_state;		/* process_data state machine status */
  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
} my_main_controller;

typedef my_main_controller * my_main_ptr;

/* context_state values: */
#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */


/* Forward declarations */
METHODDEF void process_data_simple_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
METHODDEF void process_data_context_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF void process_data_crank_post
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif


LOCAL void
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
    xbuf += rgroup;		/* want one row group at negative offsets */
    main->xbuffer[0][ci] = xbuf;
    xbuf += rgroup * (M + 4);
    main->xbuffer[1][ci] = xbuf;
  }
}


LOCAL void
make_funny_pointers (j_decompress_ptr cinfo)
/* Create the funny pointer lists discussed in the comments above.
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
    for (i = 0; i < rgroup * (M + 2); i++) {
      xbuf0[i] = xbuf1[i] = buf[i];
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
    }
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[0];
    }
  }
}


LOCAL void
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
    }
  }
}


LOCAL void
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
    rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
    if (rows_left == 0) rows_left = iMCUheight;
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
    for (i = 0; i < rgroup * 2; i++) {
      xbuf[rows_left + i] = xbuf[rows_left-1];
    }
  }
}


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
      main->pub.process_data = process_data_context_main;
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
      main->context_state = CTX_PREPARE_FOR_IMCU;
      main->iMCU_row_ctr = 0;
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
    main->rowgroup_ctr = 0;
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This handles the simple case where no context is required.
 */

METHODDEF void
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
  /* Note: at the bottom of the image, we may pass extra garbage row groups
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
    main->buffer_full = FALSE;
    main->rowgroup_ctr = 0;
  }
}


/*
 * Process some data.
 * This handles the case where context rows must be provided.
 */

METHODDEF void
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo,
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
    main->iMCU_row_ctr++;	/* count rows received */
  }

  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
    if (*out_row_ctr >= out_rows_avail)
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
    main->buffer_full = FALSE;
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
    main->context_state = CTX_POSTPONED_ROW;
  }
}


/*
 * Process some data.
 * Final pass of two-pass quantization: just call the postprocessor.
 * Source data will be the postprocessor controller's internal buffer.
 */

#ifdef QUANT_2PASS_SUPPORTED

METHODDEF void
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL void
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  if (need_full_buffer)		/* shouldn't happen */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
    if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
      ERREXIT(cinfo, JERR_NOTIMPL);
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_scaled_size + 2;
  } else {
    ngroups = cinfo->min_DCT_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdmarker.cpp ===
/*
 * jdmarker.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to decode JPEG datastream markers.
 * Most of the complexity arises from our desire to support input
 * suspension: if not all of the data for a marker is available,
 * we must exit back to the application.  On resumption, we reprocess
 * the marker.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


//#pragma ident "@(#)jdmarker.cc	1.3 13:47:49 01/31/97"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,
  
  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,
  
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,
  
  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Macros for fetching data from the data source module.
 *
 * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
 * the current restart point; we update them only when we have reached a
 * suitable place to restart if a suspension occurs.
 */

/* Declare and initialize local copies of input pointer/count */
#define INPUT_VARS(cinfo)  \
	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
	size_t bytes_in_buffer = datasrc->bytes_in_buffer

/* Unload the local copies --- do this only at a restart boundary */
#define INPUT_SYNC(cinfo)  \
	( datasrc->next_input_byte = next_input_byte,  \
	  datasrc->bytes_in_buffer = bytes_in_buffer )

/* Reload the local copies --- seldom used except in MAKE_BYTE_AVAIL */
#define INPUT_RELOAD(cinfo)  \
	( next_input_byte = datasrc->next_input_byte,  \
	  bytes_in_buffer = datasrc->bytes_in_buffer )

/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
 * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
 * but we must reload the local copies after a successful fill.
 */
#define MAKE_BYTE_AVAIL(cinfo,action)  \
	if (bytes_in_buffer == 0) {  \
	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
	    { action; }  \
	  INPUT_RELOAD(cinfo);  \
	}  \
	bytes_in_buffer--;



/* Read a byte into variable V.
 * If must suspend, take the specified action (typically "return FALSE").
 */
#define INPUT_BYTE(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = GETJOCTET(*next_input_byte++); )

/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
 * V should be declared unsigned int or perhaps INT32.
 */
#define INPUT_2BYTES(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
		  MAKE_BYTE_AVAIL(cinfo,action); \
		  V += GETJOCTET(*next_input_byte++); )


/*
 * Routines to process JPEG markers.
 *
 * Entry condition: JPEG marker itself has been read and its code saved
 *   in cinfo->unread_marker; input restart point is just after the marker.
 *
 * Exit: if return TRUE, have read and processed any parameters, and have
 *   updated the restart point to point after the parameters.
 *   If return FALSE, was forced to suspend before reaching end of
 *   marker parameters; restart point has not been moved.  Same routine
 *   will be called again after application supplies more input data.
 *
 * This approach to suspension assumes that all of a marker's parameters can
 * fit into a single input bufferload.  This should hold for "normal"
 * markers.  Some COM/APPn markers might have large parameter segments,
 * but we use skip_input_data to get past those, and thereby put the problem
 * on the source manager's shoulders.
 *
 * Note that we don't bother to avoid duplicate trace messages if a
 * suspension occurs within marker parameters.  Other side effects
 * require more care.
 */


LOCAL boolean
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);

  if (cinfo->marker->saw_SOI)
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }
  cinfo->restart_interval = 0;

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */

  cinfo->saw_JFIF_marker = FALSE;
  cinfo->density_unit = 0;	/* set default JFIF APP0 values */
  cinfo->X_density = 1;
  cinfo->Y_density = 1;
  cinfo->saw_Adobe_marker = FALSE;
  cinfo->Adobe_transform = 0;

  cinfo->marker->saw_SOI = TRUE;

  return TRUE;
}

LOCAL boolean
get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
/* Process a SOFn marker */
{
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  cinfo->progressive_mode = is_prog;
  cinfo->arith_code = is_arith;

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);

  length -= 8;

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  if (length != (cinfo->num_components * 3))
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->component_index = ci;
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    compptr->h_samp_factor = (c >> 4) & 15;
    compptr->v_samp_factor = (c     ) & 15;
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}

LOCAL boolean
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  if (! cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOS_NO_SOF);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */

  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  TRACEMS1(cinfo, 1, JTRC_SOS, n);

  cinfo->comps_in_scan = n;

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
    INPUT_BYTE(cinfo, cc, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      if (cc == compptr->component_id)
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);

  id_found:

    cinfo->cur_comp_info[i] = compptr;
    compptr->dc_tbl_no = (c >> 4) & 15;
    compptr->ac_tbl_no = (c     ) & 15;
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ss = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Se = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ah = (c >> 4) & 15;
  cinfo->Al = (c     ) & 15;

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;

  /* Count another SOS marker */
  cinfo->input_scan_number++;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF boolean
get_app0 (j_decompress_ptr cinfo)
/* Process an APP0 marker */
{
#define JFIF_LEN 14
  INT32 length;
  UINT8 b[JFIF_LEN];
  int buffp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if a JFIF APP0 marker is present */

  if (length >= JFIF_LEN) {
    for (buffp = 0; buffp < JFIF_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= JFIF_LEN;

    if (b[0]==0x4A && b[1]==0x46 && b[2]==0x49 && b[3]==0x46 && b[4]==0) {
      /* Found JFIF APP0 marker: check version */
      /* Major version must be 1, anything else signals an incompatible change.
       * We used to treat this as an error, but now it's a nonfatal warning,
       * because some bozo at Hijaak couldn't read the spec.
       * Minor version should be 0..2, but process anyway if newer.
       */
      if (b[5] != 1)
	WARNMS2(cinfo, JWRN_JFIF_MAJOR, b[5], b[6]);
      else if (b[6] > 2)
	TRACEMS2(cinfo, 1, JTRC_JFIF_MINOR, b[5], b[6]);
      /* Save info */
      cinfo->saw_JFIF_marker = TRUE;
      cinfo->density_unit = b[7];
      cinfo->X_density = (b[8] << 8) + b[9];
      cinfo->Y_density = (b[10] << 8) + b[11];
      TRACEMS3(cinfo, 1, JTRC_JFIF,
	       cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
      if (b[12] | b[13])
	TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL, b[12], b[13]);
      if (length != ((INT32) b[12] * (INT32) b[13] * (INT32) 3))
	TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) length);
    } else {
      /* Start of APP0 does not match "JFIF" */
      TRACEMS1(cinfo, 1, JTRC_APP0, (int) length + JFIF_LEN);
    }
  } else {
    /* Too short to be JFIF marker */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


METHODDEF boolean
get_app14 (j_decompress_ptr cinfo)
/* Process an APP14 marker */
{
#define ADOBE_LEN 12
  INT32 length;
  UINT8 b[ADOBE_LEN];
  int buffp;
  unsigned int version, flags0, flags1, transform;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if an Adobe APP14 marker is present */

  if (length >= ADOBE_LEN) {
    for (buffp = 0; buffp < ADOBE_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= ADOBE_LEN;

    if (b[0]==0x41 && b[1]==0x64 && b[2]==0x6F && b[3]==0x62 && b[4]==0x65) {
      /* Found Adobe APP14 marker */
      version = (b[5] << 8) + b[6];
      flags0 = (b[7] << 8) + b[8];
      flags1 = (b[9] << 8) + b[10];
      transform = b[11];
      TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
      cinfo->saw_Adobe_marker = TRUE;
      cinfo->Adobe_transform = (UINT8) transform;
    } else {
      /* Start of APP14 does not match "Adobe" */
      TRACEMS1(cinfo, 1, JTRC_APP14, (int) length + ADOBE_LEN);
    }
  } else {
    /* Too short to be Adobe marker */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


LOCAL boolean
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);
    INPUT_BYTE(cinfo, val, return FALSE);

    length -= 2;

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
    }
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
      
    bits[0] = 0;
    count = 0;
    for (i = 1; i <= 16; i++) {
      INPUT_BYTE(cinfo, bits[i], return FALSE);
      count += bits[i];
    }

    length -= 1 + 16;

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[9], bits[10], bits[11], bits[12],
	     bits[13], bits[14], bits[15], bits[16]);

    if (count > 256 || ((INT32) count) > length)
      ERREXIT(cinfo, JERR_DHT_COUNTS);

    for (i = 0; i < count; i++)
      INPUT_BYTE(cinfo, huffval[i], return FALSE);

    length -= count;

    if (index & 0x10) {		/* AC table definition */
      index -= 0x10;
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);

    if (*htblptr == NULL)
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
  INT32 length;
  int n, i, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
    INPUT_BYTE(cinfo, n, return FALSE);
    prec = n >> 4;
    n &= 0x0F;

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);

    if (n >= NUM_QUANT_TBLS)
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
    quant_ptr = cinfo->quant_tbl_ptrs[n];

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	INPUT_2BYTES(cinfo, tmp, return FALSE);
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
      quant_ptr->quantval[i] = (UINT16) tmp;
    }

    for (i = 0; i < DCTSIZE2; i += 8) {
      TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
	       quant_ptr->quantval[i  ], quant_ptr->quantval[i+1],
	       quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
	       quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
	       quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
    }

    length -= DCTSIZE2+1;
    if (prec) length -= DCTSIZE2;
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  if (length != 4)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_2BYTES(cinfo, tmp, return FALSE);

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);

  cinfo->restart_interval = tmp;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF boolean
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
  INT32 length;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  (*cinfo->src->skip_input_data) (cinfo, (long) length - 2L);

  return TRUE;
}


/*
 * Find the next JPEG marker, save it in cinfo->unread_marker.
 * Returns FALSE if had to suspend before reaching a marker;
 * in that case cinfo->unread_marker is unchanged.
 *
 * Note that the result might not be a valid marker code,
 * but it will never be 0 or FF.
 */

LOCAL boolean
next_marker (j_decompress_ptr cinfo)
{
  int c;
  INPUT_VARS(cinfo);

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
      cinfo->marker->discarded_bytes++;
      INPUT_SYNC(cinfo);
      INPUT_BYTE(cinfo, c, return FALSE);
    }
    /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
    } while (c == 0xFF);
    if (c != 0)
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
    INPUT_SYNC(cinfo);
  }

  if (cinfo->marker->discarded_bytes != 0) {
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
    cinfo->marker->discarded_bytes = 0;
  }

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
first_marker (j_decompress_ptr cinfo)
/* Like next_marker, but used to obtain the initial SOI marker. */
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
  int c, c2;
  INPUT_VARS(cinfo);

  INPUT_BYTE(cinfo, c, return FALSE);
  INPUT_BYTE(cinfo, c2, return FALSE);
  if (c != 0xFF || c2 != (int) M_SOI)
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);

  cinfo->unread_marker = c2;

  INPUT_SYNC(cinfo);
  return TRUE;
}


/*
 * Read markers until SOS or EOI.
 *
 * Returns same codes as are defined for jpeg_consume_input:
 * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 */

METHODDEF int
read_markers (j_decompress_ptr cinfo)
{
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
      if (! cinfo->marker->saw_SOI) {
	if (! first_marker(cinfo))
	  return JPEG_SUSPENDED;
      } else {
	if (! next_marker(cinfo))
	  return JPEG_SUSPENDED;
      }
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
    case M_SOI:
      if (! get_soi(cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, TRUE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, TRUE, TRUE))
	return JPEG_SUSPENDED;
      break;

    /* Currently unsupported SOFn types */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
      break;

    case M_SOS:
      if (! get_sos(cinfo))
	return JPEG_SUSPENDED;
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_SOS;
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_EOI;
      
    case M_DAC:
      if (! get_dac(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_APP0:
    case M_APP1:
    case M_APP2:
    case M_APP3:
    case M_APP4:
    case M_APP5:
    case M_APP6:
    case M_APP7:
    case M_APP8:
    case M_APP9:
    case M_APP10:
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*cinfo->marker->process_APPn[cinfo->unread_marker - (int) M_APP0]) (cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_COM:
      if (! (*cinfo->marker->process_COM) (cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_RST0:		/* these are all parameterless */
    case M_RST1:
    case M_RST2:
    case M_RST3:
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
      break;

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
	return JPEG_SUSPENDED;
      break;

    default:			/* must be DHP, EXP, JPGn, or RESn */
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
      break;
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
  } /* end loop */
}


/*
 * Read a restart marker, which is expected to appear next in the datastream;
 * if the marker is not there, take appropriate recovery action.
 * Returns FALSE if suspension is required.
 *
 * This is called by the entropy decoder after it has read an appropriate
 * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
 * has already read a marker from the data source.  Under normal conditions
 * cinfo->unread_marker will be reset to 0 before returning; if not reset,
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF boolean
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 2, JTRC_RST, cinfo->marker->next_restart_num);
    cinfo->unread_marker = 0;
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;

  return TRUE;
}


/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don't have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo->unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker number (0..7) is passed as a parameter.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo->unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can't back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don't find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it's certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */

GLOBAL boolean
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
  int marker = cinfo->unread_marker;
  int action = 1;
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
      action = 2;		/* invalid marker */
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
      action = 3;		/* valid non-restart marker */
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
	action = 3;		/* one of the next two expected restarts */
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
	action = 2;		/* a prior restart, so advance */
      else
	action = 1;		/* desired restart or too far away */
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
    switch (action) {
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
      return TRUE;
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
	return FALSE;
      marker = cinfo->unread_marker;
      break;
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
    }
  } /* end loop */
}


/*
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF void
reset_marker_reader (j_decompress_ptr cinfo)
{
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
  cinfo->unread_marker = 0;		/* no pending marker */
  cinfo->marker->saw_SOI = FALSE;	/* set internal state too */
  cinfo->marker->saw_SOF = FALSE;
  cinfo->marker->discarded_bytes = 0;
}


/*
 * Initialize the marker reader module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL void
jinit_marker_reader (j_decompress_ptr cinfo)
{
  int i;

  /* Create subobject in permanent pool */
  cinfo->marker = (struct jpeg_marker_reader *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(struct jpeg_marker_reader));
  /* Initialize method pointers */
  cinfo->marker->reset_marker_reader = reset_marker_reader;
  cinfo->marker->read_markers = read_markers;
  cinfo->marker->read_restart_marker = read_restart_marker;
  cinfo->marker->process_COM = skip_variable;
  for (i = 0; i < 16; i++)
    cinfo->marker->process_APPn[i] = skip_variable;
  cinfo->marker->process_APPn[0] = get_app0;
  cinfo->marker->process_APPn[14] = get_app14;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdinput.cpp ===
/*
 * jdinput.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains input control logic for the JPEG decompressor.
 * These routines are concerned with controlling the decompressor's input
 * processing (marker reading and coefficient decoding).  The actual input
 * reading is done in jdmarker.c, jdhuff.c, and jdphuff.c.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_input_controller pub; /* public fields */

  boolean inheaders;		/* TRUE until first SOS is reached */
} my_input_controller;

typedef my_input_controller * my_inputctl_ptr;


/* Forward declarations */
METHODDEF int consume_markers JPP((j_decompress_ptr cinfo));


/*
 * Routines to calculate various quantities related to the size of the image.
 */

LOCAL void
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
   * In the full decompressor, this will be overridden by jdmaster.c;
   * but in the transcoder, jdmaster.c is not used, so we must do it here.
   */
  cinfo->min_DCT_scaled_size = DCTSIZE;

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->DCT_scaled_size = DCTSIZE;
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* downsampled_width and downsampled_height will also be overridden by
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
    cinfo->inputctl->has_multiple_scans = TRUE;
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
}


LOCAL void
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = compptr->DCT_scaled_size;
    compptr->last_col_width = 1;
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    if (tmp == 0) tmp = compptr->v_samp_factor;
    compptr->last_row_height = tmp;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}


/*
 * Save away a copy of the Q-table referenced by each component present
 * in the current scan, unless already saved during a prior scan.
 *
 * In a multiple-scan JPEG file, the encoder could assign different components
 * the same Q-table slot number, but change table definitions between scans
 * so that each component uses a different Q-table.  (The IJG encoder is not
 * currently capable of doing this, but other encoders might.)  Since we want
 * to be able to dequantize all the components at the end of the file, this
 * means that we have to save away the table actually used for each component.
 * We do this by copying the table at the start of the first scan containing
 * the component.
 * The JPEG spec prohibits the encoder from changing the contents of a Q-table
 * slot between scans of a component using that slot.  If the encoder does so
 * anyway, this decoder will simply use the Q-table values that were current
 * at the start of the first scan for the component.
 *
 * The decompressor output side looks only at the saved quant tables,
 * not at the current Q-table slots.
 */

LOCAL void
latch_quant_tables (j_decompress_ptr cinfo)
{
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
    compptr->quant_table = qtbl;
  }
}


/*
 * Initialize the input modules to read a scan of compressed data.
 * The first call to this is done by jdmaster.c after initializing
 * the entire decompressor (during jpeg_start_decompress).
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF void
start_input_pass (j_decompress_ptr cinfo)
{
  per_scan_setup(cinfo);
  latch_quant_tables(cinfo);
  (*cinfo->entropy->start_pass) (cinfo);
  (*cinfo->coef->start_input_pass) (cinfo);
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
}


/*
 * Finish up after inputting a compressed-data scan.
 * This is called by the coefficient controller after it's read all
 * the expected data of the scan.
 */

METHODDEF void
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
}


/*
 * Read JPEG markers before, between, or after compressed-data scans.
 * Change state as necessary when a new scan is reached.
 * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 *
 * The consume_input method pointer points either here or to the
 * coefficient controller's consume_data routine, depending on whether
 * we are reading a compressed data segment or inter-segment markers.
 */

METHODDEF int
consume_markers (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
    return JPEG_REACHED_EOI;

  val = (*cinfo->marker->read_markers) (cinfo);

  switch (val) {
  case JPEG_REACHED_SOS:	/* Found SOS */
    if (inputctl->inheaders) {	/* 1st SOS */
      initial_setup(cinfo);
      inputctl->inheaders = FALSE;
      /* Note: start_input_pass must be called by jdmaster.c
       * before any more input can be consumed.  jdapi.c is
       * responsible for enforcing this sequencing.
       */
    } else {			/* 2nd or later SOS marker */
      if (! inputctl->pub.has_multiple_scans)
	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
      start_input_pass(cinfo);
    }
    break;
  case JPEG_REACHED_EOI:	/* Found EOI */
    inputctl->pub.eoi_reached = TRUE;
    if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
      if (cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOF_NO_SOS);
    } else {
      /* Prevent infinite loop in coef ctlr's decompress_data routine
       * if user set output_scan_number larger than number of scans.
       */
      if (cinfo->output_scan_number > cinfo->input_scan_number)
	cinfo->output_scan_number = cinfo->input_scan_number;
    }
    break;
  case JPEG_SUSPENDED:
    break;
  }

  return val;
}


/*
 * Reset state to begin a fresh datastream.
 */

METHODDEF void
reset_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->marker->reset_marker_reader) (cinfo);
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
}


/*
 * Initialize the input controller module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL void
jinit_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.reset_input_controller = reset_input_controller;
  inputctl->pub.start_input_pass = start_input_pass;
  inputctl->pub.finish_input_pass = finish_input_pass;
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdphuff.cpp ===
/*
 * jdphuff.c
 *
 * Copyright (C) 1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines for progressive JPEG.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdhuff.c */


#ifdef D_PROGRESSIVE_SUPPORTED

/*
 * Expanded entropy decoder object for progressive Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
  int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).EOBRUN = (src).EOBRUN, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
} phuff_entropy_decoder;

typedef phuff_entropy_decoder * phuff_entropy_ptr;

/* Forward declarations */
METHODDEF boolean decode_mcu_DC_first JPP((j_decompress_ptr cinfo,
					   JBLOCKROW *MCU_data));
METHODDEF boolean decode_mcu_AC_first JPP((j_decompress_ptr cinfo,
					   JBLOCKROW *MCU_data));
METHODDEF boolean decode_mcu_DC_refine JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF boolean decode_mcu_AC_refine JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF void
start_pass_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band, bad;
  int ci, coefi, tbl;
  int *coef_bit_ptr;
  jpeg_component_info * compptr;

  is_DC_band = (cinfo->Ss == 0);

  /* Validate scan parameters */
  bad = FALSE;
  if (is_DC_band) {
    if (cinfo->Se != 0)
      bad = TRUE;
  } else {
    /* need not check Ss/Se < 0 since they came from unsigned bytes */
    if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
      bad = TRUE;
    /* AC scans may have only one component */
    if (cinfo->comps_in_scan != 1)
      bad = TRUE;
  }
  if (cinfo->Ah != 0) {
    /* Successive approximation refinement scan: must have Al = Ah-1. */
    if (cinfo->Al != cinfo->Ah-1)
      bad = TRUE;
  }
  if (cinfo->Al > 13)		/* need not check for < 0 */
    bad = TRUE;
  if (bad)
    ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
  /* Update progression status, and verify that scan order is legal.
   * Note that inter-scan inconsistencies are treated as warnings
   * not fatal errors ... not clear if this is right way to behave.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    int cindex = cinfo->cur_comp_info[ci]->component_index;
    coef_bit_ptr = & cinfo->coef_bits[cindex][0];
    if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
      WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
    for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
      int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
      if (cinfo->Ah != expected)
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
      coef_bit_ptr[coefi] = cinfo->Al;
    }
  }

  /* Select MCU decoding routine */
  if (cinfo->Ah == 0) {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_first;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_first;
  } else {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_refine;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_refine;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* Make sure requested tables are present, and compute derived tables.
     * We may build same derived table more than once, but it's not expensive.
     */
    if (is_DC_band) {
      if (cinfo->Ah == 0) {	/* DC refinement needs no table */
	tbl = compptr->dc_tbl_no;
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
	    cinfo->dc_huff_tbl_ptrs[tbl] == NULL)
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
	jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
				& entropy->derived_tbls[tbl]);
      }
    } else {
      tbl = compptr->ac_tbl_no;
      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
          cinfo->ac_huff_tbl_ptrs[tbl] == NULL)
        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
      jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
			      & entropy->derived_tbls[tbl]);
      /* remember the single active table */
      entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
    }
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize private state variables */
  entropy->saved.EOBRUN = 0;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL boolean
process_restart (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Huffman MCU decoding.
 * Each of these routines decodes and returns one MCU's worth of
 * Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 *
 * We return FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * spectral selection, since we'll just re-assign them on the next call.
 * Successive approximation AC refinement has to be more careful, however.)
 */

/*
 * MCU decoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF boolean
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
  register int s, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    tbl = entropy->derived_tbls[compptr->dc_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (s << Al);
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF boolean
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state.
   * We can avoid loading/saving bitread state if in an EOB run.
   */
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */

  if (EOBRUN > 0)		/* if it's a band of zeroes... */
    EOBRUN--;			/* ...process it now (we do nothing) */
  else {
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
    block = MCU_data[0];
    tbl = entropy->ac_derived_tbl;

    for (k = cinfo->Ss; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
      r = s >> 4;
      s &= 15;
      if (s) {
        k += r;
        CHECK_BIT_BUFFER(br_state, s, return FALSE);
        r = GET_BITS(s);
        s = HUFF_EXTEND(r, s);
	/* Scale and output coefficient in natural (dezigzagged) order */
        (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
      } else {
        if (r == 15) {		/* ZRL */
          k += 15;		/* skip 15 zeroes in band */
        } else {		/* EOBr, run length is 2^r + appended bits */
          EOBRUN = 1 << r;
          if (r) {		/* EOBr, r > 0 */
	    CHECK_BIT_BUFFER(br_state, r, return FALSE);
            r = GET_BITS(r);
            EOBRUN += r;
          }
	  EOBRUN--;		/* this band is processed at this moment */
	  break;		/* force end-of-band */
	}
      }
    }

    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  }

  /* Completed MCU, so update state */
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF boolean
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
    if (GET_BITS(1))
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF boolean
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  JCOEFPTR thiscoef;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */
  block = MCU_data[0];
  tbl = entropy->ac_derived_tbl;

  /* If we are forced to suspend, we must undo the assignments to any newly
   * nonzero coefficients in the block, because otherwise we'd get confused
   * next time about which coefficients were already nonzero.
   * But we need not undo addition of bits to already-nonzero coefficients;
   * instead, we can test the current bit position to see if we already did it.
   */
  num_newnz = 0;

  /* initialize coefficient loop counter to start of band */
  k = cinfo->Ss;

  if (EOBRUN == 0) {
    for (; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
      r = s >> 4;
      s &= 15;
      if (s) {
	if (s != 1)		/* size of new coef should always be 1 */
	  WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
        CHECK_BIT_BUFFER(br_state, 1, goto undoit);
        if (GET_BITS(1))
	  s = p1;		/* newly nonzero coef is positive */
	else
	  s = m1;		/* newly nonzero coef is negative */
      } else {
	if (r != 15) {
	  EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
	  if (r) {
	    CHECK_BIT_BUFFER(br_state, r, goto undoit);
	    r = GET_BITS(r);
	    EOBRUN += r;
	  }
	  break;		/* rest of block is handled by EOB logic */
	}
	/* note s = 0 for processing ZRL */
      }
      /* Advance over already-nonzero coefs and r still-zero coefs,
       * appending correction bits to the nonzeroes.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      do {
	thiscoef = *block + jpeg_natural_order[k];
	if (*thiscoef != 0) {
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	  if (GET_BITS(1)) {
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	      if (*thiscoef >= 0)
		*thiscoef += (JCOEF) p1;
	      else
		*thiscoef += (JCOEF) m1;
	    }
	  }
	} else {
	  if (--r < 0)
	    break;		/* reached target zero coefficient */
	}
	k++;
      } while (k <= Se);
      if (s) {
	int pos = jpeg_natural_order[k];
	/* Output newly nonzero coefficient */
	(*block)[pos] = (JCOEF) s;
	/* Remember its position in case we have to suspend */
	newnz_pos[num_newnz++] = pos;
      }
    }
  }

  if (EOBRUN > 0) {
    /* Scan any remaining coefficient positions after the end-of-band
     * (the last newly nonzero coefficient, if any).  Append a correction
     * bit to each already-nonzero coefficient.  A correction bit is 1
     * if the absolute value of the coefficient must be increased.
     */
    for (; k <= Se; k++) {
      thiscoef = *block + jpeg_natural_order[k];
      if (*thiscoef != 0) {
	CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	if (GET_BITS(1)) {
	  if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	    if (*thiscoef >= 0)
	      *thiscoef += (JCOEF) p1;
	    else
	      *thiscoef += (JCOEF) m1;
	  }
	}
      }
    }
    /* Count one block completed in EOB run */
    EOBRUN--;
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}


/*
 * Module initialization routine for progressive Huffman entropy decoding.
 */

GLOBAL void
jinit_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy;
  int *coef_bit_ptr;
  int ci, i;

  entropy = (phuff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff_decoder;

  /* Mark derived tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->derived_tbls[i] = NULL;
  }

  /* Create progression status table */
  cinfo->coef_bits = (int (*)[DCTSIZE2])
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components*DCTSIZE2*SIZEOF(int));
  coef_bit_ptr = & cinfo->coef_bits[0][0];
  for (ci = 0; ci < cinfo->num_components; ci++)
    for (i = 0; i < DCTSIZE2; i++)
      *coef_bit_ptr++ = -1;
}

#endif /* D_PROGRESSIVE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdsample.cpp ===
/*
 * jdsample.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains upsampling routines.
 *
 * Upsampling input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  Upsampling will normally produce
 * max_v_samp_factor pixel rows from each row group (but this could vary
 * if the upsampler is applying a scale factor of its own).
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Pointer to routine to upsample a single component */
typedef JMETHOD(void, upsample1_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Color conversion buffer.  When using separate upsampling and color
   * conversion steps, this buffer holds one upsampled row group until it
   * has been color converted and output.
   * Note: we do not allocate any storage for component(s) which are full-size,
   * ie do not need rescaling.  The corresponding entry of color_buf[] is
   * simply set to point to the input data array, thereby avoiding copying.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  /* Per-component upsampling method pointers */
  upsample1_ptr methods[MAX_COMPONENTS];

  int next_row_out;		/* counts rows emitted from color_buf */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */

  /* Height of an input row group for each component. */
  int rowgroup_height[MAX_COMPONENTS];

  /* These arrays save pixel expansion factors so that int_expand need not
   * recompute them each time.  They are unused for other upsampling methods.
   */
  UINT8 h_expand[MAX_COMPONENTS];
  UINT8 v_expand[MAX_COMPONENTS];
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;


/*
 * Initialize for an upsampling pass.
 */

METHODDEF void
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * In this version we upsample each component independently.
 * We upsample one row group into the conversion buffer, then apply
 * color conversion a row at a time.
 */

METHODDEF void
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  upsample->next_row_out += num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
    (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by sep_upsample to upsample pixel values
 * of a single component.  One row group is processed per call.
 */


/*
 * For full-size components, we just make color_buf[ci] point at the
 * input buffer, and thus avoid copying any data.  Note that this is
 * safe only because sep_upsample doesn't declare the input row group
 * "consumed" until we are done color converting and emitting it.
 */

METHODDEF void
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
}


/*
 * This is a no-op version used for "uninteresting" components.
 * These components will not be referenced by color conversion.
 */

METHODDEF void
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
}


/*
 * This version handles any integral sampling ratios.
 * This is not used for typical JPEG files, so it need not be fast.
 * Nor, for that matter, is it particularly accurate: the algorithm is
 * simple replication of the input pixel onto the corresponding output
 * pixels.  The hi-falutin sampling literature refers to this as a
 * "box filter".  A box filter tends to introduce visible artifacts,
 * so if you are actually going to use 3:1 or 4:1 sampling ratios
 * you would be well advised to improve this code.
 */

METHODDEF void
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
  v_expand = upsample->v_expand[compptr->component_index];

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      for (h = h_expand; h > 0; h--) {
	*outptr++ = invalue;
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
			v_expand-1, cinfo->output_width);
    }
    inrow++;
    outrow += v_expand;
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 * It's still a box filter.
 */

METHODDEF void
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 * It's still a box filter.
 */

METHODDEF void
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
 *
 * The upsampling algorithm is linear interpolation between pixel centers,
 * also known as a "triangle filter".  This is a good compromise between
 * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
 * of the way between input pixel centers.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF void
h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register int invalue;
  register JDIMENSION colctr;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    /* Special case for first column */
    invalue = GETJSAMPLE(*inptr++);
    *outptr++ = (JSAMPLE) invalue;
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);

    for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
      /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
      invalue = GETJSAMPLE(*inptr++) * 3;
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
    }

    /* Special case for last column */
    invalue = GETJSAMPLE(*inptr);
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
    *outptr++ = (JSAMPLE) invalue;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
 * Again a triangle filter; see comments for h2v1 case, above.
 *
 * It is OK for us to reference the adjacent input rows because we demanded
 * context from the main buffer controller (see initialization code).
 */

METHODDEF void
h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr0, inptr1, outptr;
#if BITS_IN_JSAMPLE == 8
  register int thiscolsum, lastcolsum, nextcolsum;
#else
  register INT32 thiscolsum, lastcolsum, nextcolsum;
#endif
  register JDIMENSION colctr;
  int inrow, outrow, v;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    for (v = 0; v < 2; v++) {
      /* inptr0 points to nearest input row, inptr1 points to next nearest */
      inptr0 = input_data[inrow];
      if (v == 0)		/* next nearest is row above */
	inptr1 = input_data[inrow-1];
      else			/* next nearest is row below */
	inptr1 = input_data[inrow+1];
      outptr = output_data[outrow++];

      /* Special case for first column */
      thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
      lastcolsum = thiscolsum; thiscolsum = nextcolsum;

      for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
      }

      /* Special case for last column */
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
    }
    inrow++;
  }
}


/*
 * Module initialization routine for upsampling.
 */

GLOBAL void
jinit_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;
  int ci;
  jpeg_component_info * compptr;
  boolean need_buffer, do_fancy;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
  upsample->pub.upsample = sep_upsample;
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
   * so don't ask for it.
   */
  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    h_out_group = cinfo->max_h_samp_factor;
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
      need_buffer = FALSE;
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
      need_buffer = FALSE;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group == v_out_group) {
      /* Special cases for 2h1v upsampling */
      if (do_fancy && compptr->downsampled_width > 2)
	upsample->methods[ci] = h2v1_fancy_upsample;
      else
	upsample->methods[ci] = h2v1_upsample;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group * 2 == v_out_group) {
      /* Special cases for 2h2v upsampling */
      if (do_fancy && compptr->downsampled_width > 2) {
	upsample->methods[ci] = h2v2_fancy_upsample;
	upsample->pub.need_context_rows = TRUE;
      } else
	upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
    if (need_buffer) {
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdmaster.cpp ===
/*
 * jdmaster.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG decompressor.
 * These routines are concerned with selecting the modules to be executed
 * and with determining the number of passes and the work to be done in each
 * pass.
 */

/* "@(#)jdmaster.cc	1.3 11:48:29 09/04/96" */


#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_decomp_master pub; /* public fields */

  int pass_number;		/* # of passes completed */

  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */

  /* Saved references to initialized quantizer modules,
   * in case we need to switch modes.
   */
  struct jpeg_color_quantizer * quantizer_1pass;
  struct jpeg_color_quantizer * quantizer_2pass;
} my_decomp_master;

typedef my_decomp_master * my_master_ptr;


/*
 * Determine whether merged upsample/color conversion should be used.
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL boolean
use_merged_upsample (j_decompress_ptr cinfo)
{
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
    return FALSE;
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
      cinfo->out_color_space != JCS_RGB ||
      cinfo->out_color_components != RGB_PIXELSIZE)
    return FALSE;
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
      cinfo->comp_info[1].h_samp_factor != 1 ||
      cinfo->comp_info[2].h_samp_factor != 1 ||
      cinfo->comp_info[0].v_samp_factor >  2 ||
      cinfo->comp_info[1].v_samp_factor != 1 ||
      cinfo->comp_info[2].v_samp_factor != 1)
    return FALSE;
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
    return FALSE;
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
#else
  return FALSE;
#endif
}


/*
 * Compute output image dimensions and related values.
 * NOTE: this is exported for possible use by application.
 * Hence it mustn't do anything that can't be done twice.
 * Also note that it may be called before the master module is initialized!
 */

GLOBAL void
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

#ifdef IDCT_SCALING_SUPPORTED

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
    /* Provide 1/8 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 8L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 8L);
    cinfo->min_DCT_scaled_size = 1;
  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
    /* Provide 1/4 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 4L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 4L);
    cinfo->min_DCT_scaled_size = 2;
  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
    /* Provide 1/2 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 2L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 2L);
    cinfo->min_DCT_scaled_size = 4;
  } else {
    /* Provide 1/1 scaling */
    cinfo->output_width = cinfo->image_width;
    cinfo->output_height = cinfo->image_height;
    cinfo->min_DCT_scaled_size = DCTSIZE;
  }
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code assumes that the supported DCT scalings are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    int ssize = cinfo->min_DCT_scaled_size;
    while (ssize < DCTSIZE &&
	   (compptr->h_samp_factor * ssize * 2 <=
	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
	   (compptr->v_samp_factor * ssize * 2 <=
	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
      ssize = ssize * 2;
    }
    compptr->DCT_scaled_size = ssize;
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
  }

#else /* !IDCT_SCALING_SUPPORTED */

  /* Hardwire it to "no scaling" */
  cinfo->output_width = cinfo->image_width;
  cinfo->output_height = cinfo->image_height;
  /* jdinput.c has already initialized DCT_scaled_size to DCTSIZE,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    break;
#ifdef NIFTY
  case JCS_YCC:
    cinfo->out_color_components = 3;
    break;
  case JCS_YCCA:
    cinfo->out_color_components = 4;
    break;
  case JCS_YCbCrA:
    cinfo->out_color_components = 4;
    break;
  case JCS_RGBA:
    cinfo->out_color_components = 4;
    break;
  case JCS_RGBA_LEGACY:
    cinfo->out_color_components = 4;
    break;
#endif
  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    cinfo->out_color_components = RGB_PIXELSIZE;
    break;
#endif /* else share code with YCbCr */
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
    break;
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
    break;
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
    break;
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
  else
    cinfo->rec_outbuf_height = 1;
}


/*
 * Several decompression processes need to range-limit values to the range
 * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 * due to noise introduced by quantization, roundoff error, etc.  These
 * processes are inner loops and need to be as fast as possible.  On most
 * machines, particularly CPUs with pipelines or instruction prefetch,
 * a (subscript-check-less) C table lookup
 *		x = sample_range_limit[x];
 * is faster than explicit tests
 *		if (x < 0)  x = 0;
 *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 * These processes all use a common table prepared by the routine below.
 *
 * For most steps we can mathematically guarantee that the initial value
 * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 * limiting step (just after the IDCT), a wildly out-of-range value is 
 * possible if the input data is corrupt.  To avoid any chance of indexing
 * off the end of memory and getting a bad-pointer trap, we perform the
 * post-IDCT limiting thus:
 *		x = range_limit[x & MASK];
 * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 * samples.  Under normal circumstances this is more than enough range and
 * a correct output will be generated; with bogus input data the mask will
 * cause wraparound, and we will safely generate a bogus-but-in-range output.
 * For the post-IDCT step, we want to convert the data from signed to unsigned
 * representation by adding CENTERJSAMPLE at the same time that we limit it.
 * So the post-IDCT limiting table ends up looking like this:
 *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0,1,...,CENTERJSAMPLE-1
 * Negative inputs select values from the upper half of the table after
 * masking.
 *
 * We can save some space by overlapping the start of the post-IDCT table
 * with the simpler range limiting table.  The post-IDCT table begins at
 * sample_range_limit + CENTERJSAMPLE.
 *
 * Note that the table is allocated in near data space on PCs; it's small
 * enough and used often enough to justify this.
 */

LOCAL void
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
  cinfo->sample_range_limit = table;
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
    table[i] = (JSAMPLE) i;
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
    table[i] = MAXJSAMPLE;
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}


/*
 * Master selection of decompression modules.
 * This is done once at jpeg_start_decompress time.  We determine
 * which modules will be used and give them appropriate initialization calls.
 * We also initialize the decompressor input side to begin consuming data.
 *
 * Since jpeg_read_header has finished, we know what is in the SOF
 * and (first) SOS markers.  We also have all the application parameter
 * settings.
 */

LOCAL void
master_selection (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
  prepare_range_limit_table(cinfo);

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* Initialize my private state */
  master->pass_number = 0;
  master->using_merged_upsample = use_merged_upsample(cinfo);

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
  master->quantizer_2pass = NULL;
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
    cinfo->enable_1pass_quant = FALSE;
    cinfo->enable_external_quant = FALSE;
    cinfo->enable_2pass_quant = FALSE;
  }
  if (cinfo->quantize_colors) {
    if (cinfo->raw_data_out)
      ERREXIT(cinfo, JERR_NOTIMPL);
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
      cinfo->enable_1pass_quant = TRUE;
      cinfo->enable_external_quant = FALSE;
      cinfo->enable_2pass_quant = FALSE;
      cinfo->colormap = NULL;
    } else if (cinfo->colormap != NULL) {
      cinfo->enable_external_quant = TRUE;
    } else if (cinfo->two_pass_quantize) {
      cinfo->enable_2pass_quant = TRUE;
    } else {
      cinfo->enable_1pass_quant = TRUE;
    }

    if (cinfo->enable_1pass_quant) {
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
      master->quantizer_1pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
      master->quantizer_2pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }
    /* If both quantizers are initialized, the 2-pass one is left active;
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
    if (master->using_merged_upsample) {
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
      jinit_upsampler(cinfo);
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
  jinit_d_coef_controller(cinfo, use_c_buffer);

  if (! cinfo->raw_data_out)
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
      cinfo->inputctl->has_multiple_scans) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
    /* Count the input pass as done */
    master->pass_number++;
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}


/*
 * Per-pass setup.
 * This is called at the beginning of each output pass.  We determine which
 * modules will be active during this pass and give them appropriate
 * start_pass calls.  We also set is_dummy_pass to indicate whether this
 * is a "real" output pass or a dummy pass for color quantization.
 * (In the latter case, jdapi.c will crank the pass to completion.)
 */

METHODDEF void
prepare_for_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (master->pub.is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
	cinfo->cquantize = master->quantizer_2pass;
	master->pub.is_dummy_pass = TRUE;
      } else if (cinfo->enable_1pass_quant) {
	cinfo->cquantize = master->quantizer_1pass;
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
    (*cinfo->coef->start_output_pass) (cinfo);
    if (! cinfo->raw_data_out) {
      if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
    }
  }
}


/*
 * Finish up at end of an output pass.
 */

METHODDEF void
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
    (*cinfo->cquantize->finish_pass) (cinfo);
  master->pass_number++;
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Switch to a new external colormap between output passes.
 */

GLOBAL void
jpeg_new_colormap (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_BUFIMAGE)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (cinfo->quantize_colors && cinfo->enable_external_quant &&
      cinfo->colormap != NULL) {
    /* Select 2-pass quantizer for external colormap use */
    cinfo->cquantize = master->quantizer_2pass;
    /* Notify quantizer of colormap change */
    (*cinfo->cquantize->new_color_map) (cinfo);
    master->pub.is_dummy_pass = FALSE; /* just in case */
  } else
    ERREXIT(cinfo, JERR_MODE_CHANGE);
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


/*
 * Initialize master decompression control and select active modules.
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL void
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;

  master_selection(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdpostct.cpp ===
/*
 * jdpostct.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the decompression postprocessing controller.
 * This controller manages the upsampling, color conversion, and color
 * quantization/reduction steps; specifically, it controls the buffering
 * between upsample/color conversion and color quantization/reduction.
 *
 * If no color quantization/reduction is required, then this module has no
 * work to do, and it just hands off to the upsample/color conversion code.
 * An integrated upsample/convert/quantize process would replace this module
 * entirely.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_post_controller pub; /* public fields */

  /* Color quantization source buffer: this holds output data from
   * the upsample/color conversion step to be passed to the quantizer.
   * For two-pass color quantization, we need a full-image buffer;
   * for one-pass operation, a strip buffer is sufficient.
   */
  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
  JDIMENSION strip_height;	/* buffer size in rows */
  /* for two-pass mode only: */
  JDIMENSION starting_row;	/* row # of first row in current strip */
  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
} my_post_controller;

typedef my_post_controller * my_post_ptr;


/* Forward declarations */
METHODDEF void post_process_1pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF void post_process_prepass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
METHODDEF void post_process_2pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, post->whole_image,
	   (JDIMENSION) 0, post->strip_height, TRUE);
      }
    } else {
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_prepass;
    break;
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_2pass;
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
}


/*
 * Process some data in the one-pass (strip buffer) case.
 * This is used for color precision reduction as well as one-pass quantization.
 */

METHODDEF void
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
  *out_row_ctr += num_rows;
}


#ifdef QUANT_2PASS_SUPPORTED

/*
 * Process some data in the first pass of 2-pass quantization.
 */

METHODDEF void
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}


/*
 * Process some data in the second pass of 2-pass quantization.
 */

METHODDEF void
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize postprocessing controller.
 */

GLOBAL void
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
  post->whole_image = NULL;	/* flag for no virtual arrays */
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
				(long) post->strip_height),
	 post->strip_height);
#else
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif /* QUANT_2PASS_SUPPORTED */
    } else {
      /* One-pass color quantization: just make a strip buffer. */
      post->buffer = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdmerge.cpp ===
/*
 * jdmerge.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains code for merged upsampling/color conversion.
 *
 * This file combines functions from jdsample.c and jdcolor.c;
 * read those files first to understand what's going on.
 *
 * When the chroma components are to be upsampled by simple replication
 * (ie, box filtering), we can save some work in color conversion by
 * calculating all the output pixels corresponding to a pair of chroma
 * samples at one time.  In the conversion equations
 *	R = Y           + K1 * Cr
 *	G = Y + K2 * Cb + K3 * Cr
 *	B = Y + K4 * Cb
 * only the Y term varies among the group of pixels corresponding to a pair
 * of chroma samples, so the rest of the terms can be calculated just once.
 * At typical sampling ratios, this eliminates half or three-quarters of the
 * multiplications needed for color conversion.
 *
 * This file currently provides implementations for the following cases:
 *	YCbCr => RGB color conversion only.
 *	Sampling ratios of 2h1v or 2h2v.
 *	No scaling needed at upsample time.
 *	Corner-aligned (non-CCIR601) sampling alignment.
 * Other special cases could be added, but in most applications these are
 * the only common cases.  (For uncommon cases we fall back on the more
 * general code in jdsample.c and jdcolor.c.)
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef UPSAMPLE_MERGING_SUPPORTED


/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Pointer to routine to do actual upsampling/conversion of one row group */
  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
			   JSAMPARRAY output_buf));

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

  /* For 2:1 vertical sampling, we produce two output rows at a time.
   * We need a "spare" row buffer to hold the second output row if the
   * application provides just a one-row buffer; we also use the spare
   * to discard the dummy last row if the image height is odd.
   */
  JSAMPROW spare_row;
  boolean spare_full;		/* T if spare buffer is occupied */

  JDIMENSION out_row_width;	/* samples per output row */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL void
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Initialize for an upsampling pass.
 */

METHODDEF void
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * The control routine just handles the row buffering considerations.
 */

METHODDEF void
merged_2v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
		      1, upsample->out_row_width);
    num_rows = 1;
    upsample->spare_full = FALSE;
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
      num_rows = upsample->rows_to_go;
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
    if (num_rows > out_rows_avail)
      num_rows = out_rows_avail;
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
    if (num_rows > 1) {
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
    } else {
      work_ptrs[1] = upsample->spare_row;
      upsample->spare_full = TRUE;
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
    (*in_row_group_ctr)++;
}


METHODDEF void
merged_1v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
			 output_buf + *out_row_ctr);
  /* Adjust counts */
  (*out_row_ctr)++;
  (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by the control routines to do
 * the actual upsampling/conversion.  One row group is processed per call.
 *
 * Note: since we may be writing directly into application-supplied buffers,
 * we have to be honest about the output width; we can't assume the buffer
 * has been rounded up to an even width.
 */


/*
 * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 */

METHODDEF void
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 */

METHODDEF void
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    y  = GETJSAMPLE(*inptr01);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Module initialization routine for merged upsampling/color conversion.
 *
 * NB: this is called under the conditions determined by use_merged_upsample()
 * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 * of this module; no safety checks are made here.
 */

GLOBAL void
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;

  if (cinfo->max_v_samp_factor == 2) {
    upsample->pub.upsample = merged_2v_upsample;
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
  } else {
    upsample->pub.upsample = merged_1v_upsample;
    upsample->upmethod = h2v1_merged_upsample;
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}

#endif /* UPSAMPLE_MERGING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jerror.h ===
/*
 * jerror.h
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the error and message codes for the JPEG library.
 * Edit this file to add new codes, or to translate the message strings to
 * some other language.
 * A set of error-reporting macros are defined too.  Some applications using
 * the JPEG library may wish to include this file to get the error codes
 * and/or the macros.
 */

/*
 * To define the enum list of message codes, include this file without
 * defining macro JMESSAGE.  To create a message string table, include it
 * again with a suitable JMESSAGE definition (see jerror.c for an example).
 */
#ifndef JMESSAGE
#ifndef JERROR_H
/* First time through, define the enum list */
#define JMAKE_ENUM_LIST
#else
/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
#define JMESSAGE(code,string)
#endif /* JERROR_H */
#endif /* JMESSAGE */

#ifdef JMAKE_ENUM_LIST

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_ENUM_LIST */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_PROGRESSION,
	 "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
JMESSAGE(JERR_BAD_PROG_SCRIPT,
	 "Invalid progressive parameters at scan script entry %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_COUNTS, "Bogus DHT counts")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
	 "Cannot transcode due to multiple use of quantization table %d")
JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_MINOR, "Unknown JFIF minor revision number %d.%02d")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Skipping marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_BOGUS_PROGRESSION,
	 "Inconsistent progression sequence for component %d coefficient %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_ENUM_LIST

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#undef JMAKE_ENUM_LIST
#endif /* JMAKE_ENUM_LIST */

/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
#undef JMESSAGE


#ifndef JERROR_H
#define JERROR_H

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
#define ERREXIT(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (cinfo)->err->msg_parm.i[3] = (p4), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXITS(cinfo,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define MAKESTMT(stuff)		do { stuff } while (0)

/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#endif /* JERROR_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jfdctflt.cpp ===
/*
 * jfdctflt.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * This implementation should be more accurate than either of the integer
 * DCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_float (FAST_FLOAT * data)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
  FAST_FLOAT *dataptr;
  int ctr;

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jerror.cpp ===
/*
 * jerror.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains simple error-reporting and trace-message routines.
 * These are suitable for Unix-like systems and others where writing to
 * stderr is the right thing to do.  Many applications will want to replace
 * some or all of these routines.
 *
 * These routines are used by both the compression and decompression code.
 */

// Workaround for redefinition of INT32
#define   XMD_H  1

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jversion.h"
#include "jerror.h"

#ifdef WIN32
#include <windows.h>
#endif

#ifndef EXIT_FAILURE            /* define exit() codes if not provided */
#define EXIT_FAILURE  1
#endif


/*
 * Create the message string table.
 * We do this from the master message list in jerror.h by re-reading
 * jerror.h with a suitable definition for macro JMESSAGE.
 * The message table is made an external symbol just in case any applications
 * want to refer to it directly.
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_message_table  jMsgTable
#endif

#define JMESSAGE(code,string)   string ,

const char * const jpeg_std_message_table[] = {
#include "jerror.h"
  NULL
};


/*
 * Error exit handler: must not return to caller.
 *
 * Applications may override this if they want to get control back after
 * an error.  Typically one would longjmp somewhere instead of exiting.
 * The setjmp buffer can be made a private field within an expanded error
 * handler object.  Note that the info needed to generate an error message
 * is stored in the error object, so you can generate the message now or
 * later, at your convenience.
 * You should make sure that the JPEG object is cleaned up (with jpeg_abort
 * or jpeg_destroy) at some point.
 */

METHODDEF void
error_exit (j_common_ptr cinfo)
{
#ifdef DEBUG
   ::OutputDebugString("JPEGLIB:Unexpectedly came to error condition.\n");
   DebugBreak();
#endif

  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);

  #ifndef WIN32
  exit(EXIT_FAILURE);
  #else
  throw 99;
  #endif
}


/*
 * Actual output of an error or trace message.
 * Applications may override this method to send JPEG messages somewhere
 * other than stderr.
 */

METHODDEF void
output_message (j_common_ptr cinfo)
{
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);

  /* Send it to stderr, adding a newline */
  #ifdef WIN32
  #ifdef DEBUG
  ::OutputDebugString(buffer);
  ::OutputDebugString("\n");
  #endif
  #else
  fprintf(stderr, "%s\n", buffer);
  #endif
}


/*
 * Decide whether to emit a trace or warning message.
 * msg_level is one of:
 *   -1: recoverable corrupt-data warning, may want to abort.
 *    0: important advisory messages (always display to user).
 *    1: first level of tracing detail.
 *    2,3,...: successively more detailed tracing messages.
 * An application might override this method if it wanted to abort on warnings
 * or change the policy about which messages to display.
 */

METHODDEF void
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
      (*err->output_message) (cinfo);
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}


/*
 * Format a message string for the most recent JPEG error or message.
 * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
 * characters.  Note that no '\n' character is added to the string.
 * Few applications should need to override this method.
 */

METHODDEF void
format_message (j_common_ptr cinfo, char * buffer)
{
  struct jpeg_error_mgr * err = cinfo->err;
  int msg_code = err->msg_code;
  const char * msgtext = NULL;
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
    msgtext = err->jpeg_message_table[msg_code];
  } else if (err->addon_message_table != NULL &&
             msg_code >= err->first_addon_message &&
             msg_code <= err->last_addon_message) {
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
    err->msg_parm.i[0] = msg_code;
    msgtext = err->jpeg_message_table[0];
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
  msgptr = msgtext;
  while ((ch = *msgptr++) != '\0') {
    if (ch == '%') {
      if (*msgptr == 's') isstring = TRUE;
      break;
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
    ::wsprintf(buffer, msgtext, err->msg_parm.s);
  else
    ::wsprintf(buffer, msgtext,
            err->msg_parm.i[0], err->msg_parm.i[1],
            err->msg_parm.i[2], err->msg_parm.i[3],
            err->msg_parm.i[4], err->msg_parm.i[5],
            err->msg_parm.i[6], err->msg_parm.i[7]);
}


/*
 * Reset error state variables at start of a new image.
 * This is called during compression startup to reset trace/error
 * processing to default state, without losing any application-specific
 * method pointers.  An application might possibly want to override
 * this method if it has additional error processing state.
 */

METHODDEF void
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;     /* may be useful as a flag for "no error" */
}


/*
 * Fill in the standard error-handling methods in a jpeg_error_mgr object.
 * Typical call is:
 *      struct jpeg_compress_struct cinfo;
 *      struct jpeg_error_mgr err;
 *
 *      cinfo.err = jpeg_std_error(&err);
 * after which the application may override some of the methods.
 */

GLOBAL struct jpeg_error_mgr *
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
  err->emit_message = emit_message;
  err->output_message = output_message;
  err->format_message = format_message;
  err->reset_error_mgr = reset_error_mgr;

  err->trace_level = 0;         /* default = no tracing */
  err->num_warnings = 0;        /* no warnings emitted yet */
  err->msg_code = 0;            /* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;

  err->addon_message_table = NULL;
  err->first_addon_message = 0; /* for safety */
  err->last_addon_message = 0;

  return err;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jidctflt.cpp ===
/*
 * jidctflt.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * This implementation should be more accurate than either of the integer
 * IDCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
    wsptr[DCTSIZE*4] = tmp3 + tmp4;
    wsptr[DCTSIZE*3] = tmp3 - tmp4;

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * And testing floats for zero is relatively expensive, so we don't bother.
     */
    
    /* Even part */

    tmp10 = wsptr[0] + wsptr[4];
    tmp11 = wsptr[0] - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
    z10 = wsptr[5] - wsptr[3];
    z11 = wsptr[1] + wsptr[7];
    z12 = wsptr[1] - wsptr[7];

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jfdctint.cpp ===
/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_islow (DCTELEM * data)
{
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
				   CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
				   CONST_BITS-PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
    
    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
					   CONST_BITS+PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
					   CONST_BITS+PASS1_BITS);
    
    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jdtrans.cpp ===
/*
 * jdtrans.c
 *
 * Copyright (C) 1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains library routines for transcoding decompression,
 * that is, reading raw DCT coefficient arrays from an input JPEG file.
 * The routines in jdapimin.c will also be needed by a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Forward declarations */
LOCAL void transdecode_master_selection JPP((j_decompress_ptr cinfo));


/*
 * Read the coefficient arrays from a JPEG file.
 * jpeg_read_header must be completed before calling this.
 *
 * The entire image is read into a set of virtual coefficient-block arrays,
 * one per component.  The return value is a pointer to the array of
 * virtual-array descriptors.  These can be manipulated directly via the
 * JPEG memory manager, or handed off to jpeg_write_coefficients().
 * To release the memory occupied by the virtual arrays, call
 * jpeg_finish_decompress() when done with the data.
 *
 * Returns NULL if suspended.  This case need be checked only if
 * a suspending data source is used.
 */

GLOBAL jvirt_barray_ptr *
jpeg_read_coefficients (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
    /* First call: initialize active modules */
    transdecode_master_selection(cinfo);
    cinfo->global_state = DSTATE_RDCOEFS;
  } else if (cinfo->global_state != DSTATE_RDCOEFS)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Absorb whole file into the coef buffer */
  for (;;) {
    int retcode;
    /* Call progress monitor hook if present */
    if (cinfo->progress != NULL)
      (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    /* Absorb some more input */
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    if (retcode == JPEG_SUSPENDED)
      return NULL;
    if (retcode == JPEG_REACHED_EOI)
      break;
    /* Advance progress counter if appropriate */
    if (cinfo->progress != NULL &&
	(retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
      if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	/* startup underestimated number of scans; ratchet up one scan */
	cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
      }
    }
  }
  /* Set state so that jpeg_finish_decompress does the right thing */
  cinfo->global_state = DSTATE_STOPPING;
  return cinfo->coef->coef_arrays;
}


/*
 * Master selection of decompression modules for transcoding.
 * This substitutes for jdmaster.c's initialization of the full decompressor.
 */

LOCAL void
transdecode_master_selection (j_decompress_ptr cinfo)
{
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Always get a full-image coefficient buffer. */
  jinit_d_coef_controller(cinfo, TRUE);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

  /* Initialize progress monitoring. */
  if (cinfo->progress != NULL) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else if (cinfo->inputctl->has_multiple_scans) {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    } else {
      nscans = 1;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = 1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jfdctfst.cpp ===
/*
 * jfdctfst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_ifast (DCTELEM * data)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z1, z2, z3, z4, z5, z11, z13;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jidctfst.cpp ===
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif


/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */

    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);

    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
	    - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemfile.h ===
GLOBAL void
jpeg_buf_src (j_decompress_ptr cinfo, unsigned char *buf, long buf_len);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemdos.cpp ===
/*
 * jmemdos.c
 *
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides an MS-DOS-compatible implementation of the system-
 * dependent portion of the JPEG memory manager.  Temporary data can be
 * stored in extended or expanded memory as well as in regular DOS files.
 *
 * If you use this file, you must be sure that NEED_FAR_POINTERS is defined
 * if you compile in a small-data memory model; it should NOT be defined if
 * you use a large-data memory model.  This file is not recommended if you
 * are using a flat-memory-space 386 environment such as DJGCC or Watcom C.
 * Also, this code will NOT work if struct fields are aligned on greater than
 * 2-byte boundaries.
 *
 * Based on code contributed by Ge' Weijers.
 */

/*
 * If you have both extended and expanded memory, you may want to change the
 * order in which they are tried in jopen_backing_store.  On a 286 machine
 * expanded memory is usually faster, since extended memory access involves
 * an expensive protected-mode-and-back switch.  On 386 and better, extended
 * memory is usually faster.  As distributed, the code tries extended memory
 * first (what? not everyone has a 386? :-).
 *
 * You can disable use of extended/expanded memory entirely by altering these
 * definitions or overriding them from the Makefile (eg, -DEMS_SUPPORTED=0).
 */

#ifndef XMS_SUPPORTED
#define XMS_SUPPORTED  1
#endif
#ifndef EMS_SUPPORTED
#define EMS_SUPPORTED  1
#endif


#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"            /* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H           /* <stdlib.h> should declare these */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
extern char * getenv JPP((const char * name));
#endif

#ifdef NEED_FAR_POINTERS

#ifdef __TURBOC__
/* These definitions work for Borland C (Turbo C) */
#include <alloc.h>              /* need farmalloc(), farfree() */
#define far_malloc(x)   farmalloc(x)
#define far_free(x)     farfree(x)
#else
/* These definitions work for Microsoft C and compatible compilers */
#include <malloc.h>             /* need _fmalloc(), _ffree() */
#define far_malloc(x)   _fmalloc(x)
#define far_free(x)     _ffree(x)
#endif

#else /* not NEED_FAR_POINTERS */

#define far_malloc(x)   malloc(x)
#define far_free(x)     free(x)

#endif /* NEED_FAR_POINTERS */

#ifdef DONT_USE_B_MODE          /* define mode parameters for fopen() */
#define READ_BINARY     "r"
#else
#define READ_BINARY     "rb"
#endif

#if MAX_ALLOC_CHUNK >= 65535L   /* make sure jconfig.h got this right */
  MAX_ALLOC_CHUNK should be less than 64K. /* deliberate syntax error */
#endif


/*
 * Declarations for assembly-language support routines (see jmemdosa.asm).
 *
 * The functions are declared "far" as are all pointer arguments;
 * this ensures the assembly source code will work regardless of the
 * compiler memory model.  We assume "short" is 16 bits, "long" is 32.
 */

typedef void far * XMSDRIVER;   /* actually a pointer to code */
typedef struct {                /* registers for calling XMS driver */
        unsigned short ax, dx, bx;
        void far * ds_si;
      } XMScontext;
typedef struct {                /* registers for calling EMS driver */
        unsigned short ax, dx, bx;
        void far * ds_si;
      } EMScontext;

EXTERN short far jdos_open JPP((short far * handle, char far * filename));
EXTERN short far jdos_close JPP((short handle));
EXTERN short far jdos_seek JPP((short handle, long offset));
EXTERN short far jdos_read JPP((short handle, void far * buffer,
                                unsigned short count));
EXTERN short far jdos_write JPP((short handle, void far * buffer,
                                 unsigned short count));
EXTERN void far jxms_getdriver JPP((XMSDRIVER far *));
EXTERN void far jxms_calldriver JPP((XMSDRIVER, XMScontext far *));
EXTERN short far jems_available JPP((void));
EXTERN void far jems_calldriver JPP((EMScontext far *));


/*
 * Selection of a file name for a temporary file.
 * This is highly system-dependent, and you may want to customize it.
 */

static int next_file_num;       /* to distinguish among several temp files */

LOCAL void
select_file_name (char * fname)
{
  const char * env;
  char * ptr;
  FILE * tfile;

  /* Keep generating file names till we find one that's not in use */
  for (;;) {
    /* Get temp directory name from environment TMP or TEMP variable;
     * if none, use "."
     */
    if ((env = (const char *) getenv("TMP")) == NULL)
      if ((env = (const char *) getenv("TEMP")) == NULL)
        env = ".";
    if (*env == '\0')           /* null string means "." */
      env = ".";
    ptr = fname;                /* copy name to fname */
    while (*env != '\0')
      *ptr++ = *env++;
    if (ptr[-1] != '\\' && ptr[-1] != '/')
      *ptr++ = '\\';            /* append backslash if not in env variable */
    /* Append a suitable file name */
    next_file_num++;            /* advance counter */
    wsprintf(ptr, "JPG%03d.TMP", next_file_num);
    /* Probe to see if file name is already in use */
    #ifdef DEAD_CODE
    if ((tfile = fopen(fname, READ_BINARY)) == NULL)
      break;
    fclose(tfile);              /* oops, it's there; close tfile & try again */
    #endif
  }
}


/*
 * Near-memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

// Removed to eliminate Compiler Warnings. TML 6/8/98
/*
GLOBAL void *
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL void
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


//
// "Large" objects are allocated in far memory, if possible
//

GLOBAL void FAR *
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) far_malloc(sizeofobject);
}

GLOBAL void
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  far_free(object);
}
*/

//
// This routine computes the total memory space available for allocation.
// It's impossible to do this in a portable way; our current solution is
// to make the user tell us (with a default value set at compile time).
// if you can actually get the available space, it's a good idea to subtract
// slop factor of 5% or so.
//

#ifndef DEFAULT_MAX_MEM         // so can override from makefile
#define DEFAULT_MAX_MEM         300000L // for total usage about 450K
#endif

// Removed to eliminate Compiler Warnings. TML 6/8/98
/*
GLOBAL long
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
                    long max_bytes_needed, long already_allocated)
{
  return cinfo->mem->max_memory_to_use - already_allocated;
}
*/

//
// Backing store (temporary file) management.
// Backing store objects are only used when the value returned by
// jpeg_mem_available is less than the total space needed.  You can dispense
// with these routines if you have plenty of virtual memory; see jmemnobs.c.
//

//
// For MS-DOS we support three types of backing storage:
//   1. Conventional DOS files.  We access these by direct DOS calls rather
//      than via the stdio package.  This provides a bit better performance,
//      but the real reason is that the buffers to be read or written are FAR.
//      The stdio library for small-data memory models can't cope with that.
//   2. Extended memory, accessed per the XMS V2.0 specification.
//   3. Expanded memory, accessed per the LIM/EMS 4.0 specification.
// You'll need copies of those specs to make sense of the related code.
// The specs are available by Internet FTP from the SIMTEL archives
// (oak.oakland.edu and its various mirror sites).  See files
// pub/msdos/microsoft/xms20.arc and pub/msdos/info/limems41.zip.
//


//
// Access methods for a DOS file.
//


METHODDEF void
read_file_store (j_common_ptr cinfo, backing_store_ptr info,
                 void FAR * buffer_address,
                 long file_offset, long byte_count)
{
  if (jdos_seek(info->handle.file_handle, file_offset))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
  if (byte_count > 65535L)      /* safety check */
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
  if (jdos_read(info->handle.file_handle, buffer_address,
                (unsigned short) byte_count))
    ERREXIT(cinfo, JERR_TFILE_READ);
}


METHODDEF void
write_file_store (j_common_ptr cinfo, backing_store_ptr info,
                  void FAR * buffer_address,
                  long file_offset, long byte_count)
{
  if (jdos_seek(info->handle.file_handle, file_offset))
    ERREXIT(cinfo, JERR_TFILE_SEEK);
  /* Since MAX_ALLOC_CHUNK is less than 64K, byte_count will be too. */
  if (byte_count > 65535L)      /* safety check */
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
  if (jdos_write(info->handle.file_handle, buffer_address,
                 (unsigned short) byte_count))
    ERREXIT(cinfo, JERR_TFILE_WRITE);
}


METHODDEF void
close_file_store (j_common_ptr cinfo, backing_store_ptr info)
{
  jdos_close(info->handle.file_handle); /* close the file */
  remove(info->temp_name);      /* delete the file */
/* If your system doesn't have remove(), try unlink() instead.
 * remove() is the ANSI-standard name for this function, but
 * unlink() was more common in pre-ANSI systems.
 */
  TRACEMSS(cinfo, 1, JTRC_TFILE_CLOSE, info->temp_name);
}


// Removed to eliminate Compiler Warnings. TML 6/8/98
/*
LOCAL boolean
open_file_store (j_common_ptr cinfo, backing_store_ptr info,
                 long total_bytes_needed)
{
  short handle;

  select_file_name(info->temp_name);
  if (jdos_open((short far *) & handle, (char far *) info->temp_name)) {
    // might as well exit since jpeg_open_backing_store will fail anyway
    ERREXITS(cinfo, JERR_TFILE_CREATE, info->temp_name);
    return FALSE;
  }
  info->handle.file_handle = handle;
  info->read_backing_store = read_file_store;
  info->write_backing_store = write_file_store;
  info->close_backing_store = close_file_store;
  TRACEMSS(cinfo, 1, JTRC_TFILE_OPEN, info->temp_name);
  return TRUE;                  // succeeded
}
*/

//
// Access methods for extended memory.
//

#if XMS_SUPPORTED

static XMSDRIVER xms_driver;    /* saved address of XMS driver */

typedef union {                 /* either long offset or real-mode pointer */
        long offset;
        void far * ptr;
      } XMSPTR;

typedef struct {                /* XMS move specification structure */
        long length;
        XMSH src_handle;
        XMSPTR src;
        XMSH dst_handle;
        XMSPTR dst;
      } XMSspec;

#define ODD(X)  (((X) & 1L) != 0)


METHODDEF void
read_xms_store (j_common_ptr cinfo, backing_store_ptr info,
                void FAR * buffer_address,
                long file_offset, long byte_count)
{
  XMScontext ctx;
  XMSspec spec;
  char endbuffer[2];

  /* The XMS driver can't cope with an odd length, so handle the last byte
   * specially if byte_count is odd.  We don't expect this to be common.
   */

  spec.length = byte_count & (~ 1L);
  spec.src_handle = info->handle.xms_handle;
  spec.src.offset = file_offset;
  spec.dst_handle = 0;
  spec.dst.ptr = buffer_address;

  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x0b00;              /* EMB move */
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    ERREXIT(cinfo, JERR_XMS_READ);

  if (ODD(byte_count)) {
    read_xms_store(cinfo, info, (void FAR *) endbuffer,
                   file_offset + byte_count - 1L, 2L);
    ((char FAR *) buffer_address)[byte_count - 1L] = endbuffer[0];
  }
}


METHODDEF void
write_xms_store (j_common_ptr cinfo, backing_store_ptr info,
                 void FAR * buffer_address,
                 long file_offset, long byte_count)
{
  XMScontext ctx;
  XMSspec spec;
  char endbuffer[2];

  /* The XMS driver can't cope with an odd length, so handle the last byte
   * specially if byte_count is odd.  We don't expect this to be common.
   */

  spec.length = byte_count & (~ 1L);
  spec.src_handle = 0;
  spec.src.ptr = buffer_address;
  spec.dst_handle = info->handle.xms_handle;
  spec.dst.offset = file_offset;

  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x0b00;              /* EMB move */
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    ERREXIT(cinfo, JERR_XMS_WRITE);

  if (ODD(byte_count)) {
    read_xms_store(cinfo, info, (void FAR *) endbuffer,
                   file_offset + byte_count - 1L, 2L);
    endbuffer[0] = ((char FAR *) buffer_address)[byte_count - 1L];
    write_xms_store(cinfo, info, (void FAR *) endbuffer,
                    file_offset + byte_count - 1L, 2L);
  }
}


METHODDEF void
close_xms_store (j_common_ptr cinfo, backing_store_ptr info)
{
  XMScontext ctx;

  ctx.dx = info->handle.xms_handle;
  ctx.ax = 0x0a00;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  TRACEMS1(cinfo, 1, JTRC_XMS_CLOSE, info->handle.xms_handle);
  /* we ignore any error return from the driver */
}


LOCAL boolean
open_xms_store (j_common_ptr cinfo, backing_store_ptr info,
                long total_bytes_needed)
{
  XMScontext ctx;

  /* Get address of XMS driver */
  jxms_getdriver((XMSDRIVER far *) & xms_driver);
  if (xms_driver == NULL)
    return FALSE;               /* no driver to be had */

  /* Get version number, must be >= 2.00 */
  ctx.ax = 0x0000;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax < (unsigned short) 0x0200)
    return FALSE;

  /* Try to get space (expressed in kilobytes) */
  ctx.dx = (unsigned short) ((total_bytes_needed + 1023L) >> 10);
  ctx.ax = 0x0900;
  jxms_calldriver(xms_driver, (XMScontext far *) & ctx);
  if (ctx.ax != 1)
    return FALSE;

  /* Succeeded, save the handle and away we go */
  info->handle.xms_handle = ctx.dx;
  info->read_backing_store = read_xms_store;
  info->write_backing_store = write_xms_store;
  info->close_backing_store = close_xms_store;
  TRACEMS1(cinfo, 1, JTRC_XMS_OPEN, ctx.dx);
  return TRUE;                  // succeeded
}

#endif /* XMS_SUPPORTED */


/*
 * Access methods for expanded memory.
 */

#if EMS_SUPPORTED

/* The EMS move specification structure requires word and long fields aligned
 * at odd byte boundaries.  Some compilers will align struct fields at even
 * byte boundaries.  While it's usually possible to force byte alignment,
 * that causes an overall performance penalty and may pose problems in merging
 * JPEG into a larger application.  Instead we accept some rather dirty code
 * here.  Note this code would fail if the hardware did not allow odd-byte
 * word & long accesses, but all 80x86 CPUs do.
 */

typedef void far * EMSPTR;

typedef union {                 /* EMS move specification structure */
        long length;            /* It's easy to access first 4 bytes */
        char bytes[18];         /* Misaligned fields in here! */
      } EMSspec;

/* Macros for accessing misaligned fields */
#define FIELD_AT(spec,offset,type)  (*((type *) &(spec.bytes[offset])))
#define SRC_TYPE(spec)          FIELD_AT(spec,4,char)
#define SRC_HANDLE(spec)        FIELD_AT(spec,5,EMSH)
#define SRC_OFFSET(spec)        FIELD_AT(spec,7,unsigned short)
#define SRC_PAGE(spec)          FIELD_AT(spec,9,unsigned short)
#define SRC_PTR(spec)           FIELD_AT(spec,7,EMSPTR)
#define DST_TYPE(spec)          FIELD_AT(spec,11,char)
#define DST_HANDLE(spec)        FIELD_AT(spec,12,EMSH)
#define DST_OFFSET(spec)        FIELD_AT(spec,14,unsigned short)
#define DST_PAGE(spec)          FIELD_AT(spec,16,unsigned short)
#define DST_PTR(spec)           FIELD_AT(spec,14,EMSPTR)

#define EMSPAGESIZE     16384L  /* gospel, see the EMS specs */

#define HIBYTE(W)  (((W) >> 8) & 0xFF)
#define LOBYTE(W)  ((W) & 0xFF)


METHODDEF void
read_ems_store (j_common_ptr cinfo, backing_store_ptr info,
                void FAR * buffer_address,
                long file_offset, long byte_count)
{
  EMScontext ctx;
  EMSspec spec;

  spec.length = byte_count;
  SRC_TYPE(spec) = 1;
  SRC_HANDLE(spec) = info->handle.ems_handle;
  SRC_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
  SRC_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);
  DST_TYPE(spec) = 0;
  DST_HANDLE(spec) = 0;
  DST_PTR(spec)    = buffer_address;

  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x5700;              /* move memory region */
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    ERREXIT(cinfo, JERR_EMS_READ);
}


METHODDEF void
write_ems_store (j_common_ptr cinfo, backing_store_ptr info,
                 void FAR * buffer_address,
                 long file_offset, long byte_count)
{
  EMScontext ctx;
  EMSspec spec;

  spec.length = byte_count;
  SRC_TYPE(spec) = 0;
  SRC_HANDLE(spec) = 0;
  SRC_PTR(spec)    = buffer_address;
  DST_TYPE(spec) = 1;
  DST_HANDLE(spec) = info->handle.ems_handle;
  DST_PAGE(spec)   = (unsigned short) (file_offset / EMSPAGESIZE);
  DST_OFFSET(spec) = (unsigned short) (file_offset % EMSPAGESIZE);

  ctx.ds_si = (void far *) & spec;
  ctx.ax = 0x5700;              /* move memory region */
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    ERREXIT(cinfo, JERR_EMS_WRITE);
}


METHODDEF void
close_ems_store (j_common_ptr cinfo, backing_store_ptr info)
{
  EMScontext ctx;

  ctx.ax = 0x4500;
  ctx.dx = info->handle.ems_handle;
  jems_calldriver((EMScontext far *) & ctx);
  TRACEMS1(cinfo, 1, JTRC_EMS_CLOSE, info->handle.ems_handle);
  /* we ignore any error return from the driver */
}


LOCAL boolean
open_ems_store (j_common_ptr cinfo, backing_store_ptr info,
                long total_bytes_needed)
{
  EMScontext ctx;

  /* Is EMS driver there? */
  if (! jems_available())
    return FALSE;

  /* Get status, make sure EMS is OK */
  ctx.ax = 0x4000;
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    return FALSE;

  /* Get version, must be >= 4.0 */
  ctx.ax = 0x4600;
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0 || LOBYTE(ctx.ax) < 0x40)
    return FALSE;

  /* Try to allocate requested space */
  ctx.ax = 0x4300;
  ctx.bx = (unsigned short) ((total_bytes_needed + EMSPAGESIZE-1L) / EMSPAGESIZE);
  jems_calldriver((EMScontext far *) & ctx);
  if (HIBYTE(ctx.ax) != 0)
    return FALSE;

  /* Succeeded, save the handle and away we go */
  info->handle.ems_handle = ctx.dx;
  info->read_backing_store = read_ems_store;
  info->write_backing_store = write_ems_store;
  info->close_backing_store = close_ems_store;
  TRACEMS1(cinfo, 1, JTRC_EMS_OPEN, ctx.dx);
  return TRUE;                  /* succeeded */
}

#endif /* EMS_SUPPORTED */


//
// Initial opening of a backing-store object.
//

GLOBAL void
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
                         long total_bytes_needed)
{
  // Try extended memory, then expanded memory, then regular file.
#if XMS_SUPPORTED
  if (open_xms_store(cinfo, info, total_bytes_needed))
    return;
#endif
#if EMS_SUPPORTED
  if (open_ems_store(cinfo, info, total_bytes_needed))
    return;
#endif
  if (open_file_store(cinfo, info, total_bytes_needed))
    return;
  ERREXITS(cinfo, JERR_TFILE_CREATE, "");
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.
 */

// Removed to eliminate Compiler Warnings. TML 6/8/98
/*
GLOBAL long
jpeg_mem_init (j_common_ptr cinfo)
{
  next_file_num = 0;            // initialize temp file name generator
  return DEFAULT_MAX_MEM;       // default for max_memory_to_use
}

GLOBAL void
jpeg_mem_term (j_common_ptr cinfo)
{
  // Microsoft C, at least in v6.00A, will not successfully reclaim freed
  // blocks of size > 32Kbytes unless we give it a kick in the rear, like so:
  //
#ifdef NEED_FHEAPMIN
  _fheapmin();
#endif
}
*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jinclude.h ===
/*
 * jinclude.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file exists to provide a single place to fix any problems with
 * including the wrong system include files.  (Common problems are taken
 * care of by the standard jconfig symbols, but on really weird systems
 * you may have to edit this file.)
 *
 * NOTE: this file is NOT intended to be included by applications using the
 * JPEG library.  Most applications need only include jpeglib.h.
 */


/* Include auto-config file to find out which system include files we need. */

#include "jconfig.h"		/* auto configuration options */
#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */

/*
 * We need the NULL macro and size_t typedef.
 * On an ANSI-conforming system it is sufficient to include <stddef.h>.
 * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
 * pull in <sys/types.h> as well.
 * Note that the core JPEG library does not require <stdio.h>;
 * only the default error handler and data source/destination modules do.
 * But we must pull it in because of the references to FILE in jpeglib.h.
 * You can remove those references if you want to compile without <stdio.h>.
 */

#ifdef HAVE_STDDEF_H
#include <stddef.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef NEED_SYS_TYPES_H
#include <sys/types.h>
#endif

#include <stdio.h>

#if defined (pSOS)
# include <unistd.h>
#endif
/*
 * We need memory copying and zeroing functions, plus strncpy().
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * Some systems may declare memset and memcpy in <memory.h>.
 *
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Change the casts in these macros if not!
 */

#ifdef NEED_BSD_STRINGS

#include <strings.h>
#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))

#else /* not BSD, assume ANSI/SysV string lib */

#include <string.h>
#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))

#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#define SIZEOF(object)	((size_t) sizeof(object))

/*
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */

#define JFREAD(file,buf,sizeofbuf)  \
  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
#define JFWRITE(file,buf,sizeofbuf)  \
  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jidctred.cpp ===
/*
 * jidctred.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains inverse-DCT routines that produce reduced-size output:
 * either 4x4, 2x2, or 1x1 pixels from an 8x8 DCT block.
 *
 * The implementation is based on the Loeffler, Ligtenberg and Moschytz (LL&M)
 * algorithm used in jidctint.c.  We simply replace each 8-to-8 1-D IDCT step
 * with an 8-to-4 step that produces the four averages of two adjacent outputs
 * (or an 8-to-2 step producing two averages of four outputs, for 2x2 output).
 * These steps were derived by computing the corresponding values at the end
 * of the normal LL&M code, then simplifying as much as possible.
 *
 * 1x1 is trivial: just take the DC coefficient divided by 8.
 *
 * See jidctint.c for additional comments.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef IDCT_SCALING_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling is the same as in jidctint.c. */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
#else
#define FIX_0_211164243  FIX(0.211164243)
#define FIX_0_509795579  FIX(0.509795579)
#define FIX_0_601344887  FIX(0.601344887)
#define FIX_0_720959822  FIX(0.720959822)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_850430095  FIX(0.850430095)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_061594337  FIX(1.061594337)
#define FIX_1_272758580  FIX(1.272758580)
#define FIX_1_451774981  FIX(1.451774981)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_172734803  FIX(2.172734803)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_624509785  FIX(3.624509785)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 4x4 output block.
 */

GLOBAL void
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process column 4, because second pass won't use it */
    if (ctr == DCTSIZE-4)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*6] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine term 4 for 4x4 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= (CONST_BITS+1);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }
  
  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
    
    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = (INT32) wsptr[7];
    z2 = (INT32) wsptr[5];
    z3 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[1];
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 2x2 output block.
 */

GLOBAL void
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process columns 2,4,6 */
    if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp10 = z1 << (CONST_BITS+2);
    
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }
  
  /* Pass 2: process 2 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 2; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[3] | wsptr[5] | wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
    
    /* Odd part */

    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 1x1 output block.
 */

GLOBAL void
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* We hardly need an inverse DCT routine for this: just take the
   * average pixel value, which is one-eighth of the DC coefficient.
   */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
}

#endif /* IDCT_SCALING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemfile.cpp ===
////////////////////////////////////////////////////////////////////////////////
//  Required Include files
////////////////////////////////////////////////////////////////////////////////


// Workaround for redefinition of INT32
#define   XMD_H  1

#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"

#ifdef WIN32
#include <windows.h>
#endif

GLOBAL void jpeg_dump_decompress(j_decompress_ptr cinfo);

METHODDEF void
init_source (j_decompress_ptr cinfo)
{
    return;
}



METHODDEF boolean
fill_input_buffer (j_decompress_ptr cinfo)
{

  #ifdef WIN32
  #ifdef DEBUG
  ::OutputDebugString("JPEGLIB:.fill_input_buffer\n");
  #endif
  jpeg_dump_decompress(cinfo);
  #endif

//  We assume that the compressed image is entirely in memory.
//  If JPEG requests more data, then there must be an error.
    ERREXIT(cinfo, JERR_INPUT_EMPTY);

    return TRUE;
}



METHODDEF void
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
    cinfo->src->next_input_byte += (size_t) num_bytes;
    cinfo->src->bytes_in_buffer -= (size_t) num_bytes;
}



METHODDEF void
term_source (j_decompress_ptr cinfo)
{
    return;
}




GLOBAL void
jpeg_buf_src (j_decompress_ptr cinfo, unsigned char *buf, long buf_len)
{
    if (cinfo->src == NULL) {   /* first time for this JPEG object? */
        cinfo->src = (struct jpeg_source_mgr *)
            (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                                        SIZEOF(struct jpeg_source_mgr));
    }

    cinfo->src->init_source = init_source;
    cinfo->src->fill_input_buffer = fill_input_buffer;
    cinfo->src->skip_input_data = skip_input_data;
    cinfo->src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
    cinfo->src->term_source = term_source;
    cinfo->src->bytes_in_buffer = buf_len;
    cinfo->src->next_input_byte = buf;

  #ifdef WIN32
  #ifdef DEBUG
  ::OutputDebugString("JPEGLIB:.jpeg_buf_src constructor\n");
  #endif
  jpeg_dump_decompress(cinfo);
  #endif

}


GLOBAL void jpeg_dump_decompress(j_decompress_ptr cinfo)
{
#ifdef WIN32
#ifdef DEBUG
    char    buf[500];

  ::OutputDebugString("JPEGLIB:dumping decompress structure.\n");
  ::wsprintf(buf,
             "JPEGLIB: buf=0x%X len=%d \n",
            cinfo->src->next_input_byte,
            cinfo->src->bytes_in_buffer);
  ::OutputDebugString(buf);

#endif
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jidctint.cpp ===
/*
 * jidctint.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
 * larger than the true IDCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D IDCT,
 * because the y0 and y4 inputs need not be divided by sqrt(N).
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (To scale up 12-bit sample data further, an
 * intermediate INT32 array would be needed.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);

    tmp0 = (z2 + z3) << CONST_BITS;
    tmp1 = (z2 - z3) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
    
    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
    tmp1 = (INT32) wsptr[5];
    tmp2 = (INT32) wsptr[3];
    tmp3 = (INT32) wsptr[1];
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemmgr.cpp ===
/*
 * jmemmgr.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the JPEG system-independent memory management
 * routines.  This code is usable across a wide variety of machines; most
 * of the system dependencies have been isolated in a separate file.
 * The major functions provided here are:
 *   * pool-based allocation and freeing of memory;
 *   * policy decisions about how to divide available memory among the
 *     virtual arrays;
 *   * control logic for swapping virtual arrays between main memory and
 *     backing storage.
 * The separate system-dependent file provides the actual backing-storage
 * access code, and it contains the policy decision about how much total
 * main memory to use.
 * This file is system-dependent in the sense that some of its functions
 * are unnecessary in some systems.  For example, if there is enough virtual
 * memory so that backing storage will never be used, much of the virtual
 * array control logic could be removed.  (Of course, if you have that much
 * memory then you shouldn't care about a little bit of unused code...)
 */

#define JPEG_INTERNALS
#define AM_MEMORY_MANAGER       /* we define jvirt_Xarray_control structs */
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"            /* import the system-dependent declarations */

#ifndef NO_GETENV
#ifndef HAVE_STDLIB_H           /* <stdlib.h> should declare getenv() */
extern char * getenv JPP((const char * name));
#endif
#endif


/*
 * Some important notes:
 *   The allocation routines provided here must never return NULL.
 *   They should exit to error_exit if unsuccessful.
 *
 *   It's not a good idea to try to merge the sarray and barray routines,
 *   even though they are textually almost the same, because samples are
 *   usually stored as bytes while coefficients are shorts or ints.  Thus,
 *   in machines where byte pointers have a different representation from
 *   word pointers, the resulting machine code could not be the same.
 */


/*
 * Many machines require storage alignment: longs must start on 4-byte
 * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
 * always returns pointers that are multiples of the worst-case alignment
 * requirement, and we had better do so too.
 * There isn't any really portable way to determine the worst-case alignment
 * requirement.  This module assumes that the alignment requirement is
 * multiples of sizeof(ALIGN_TYPE).
 * By default, we define ALIGN_TYPE as double.  This is necessary on some
 * workstations (where doubles really do need 8-byte alignment) and will work
 * fine on nearly everything.  If your machine has lesser alignment needs,
 * you can save a few bytes by making ALIGN_TYPE smaller.
 * The only place I know of where this will NOT work is certain Macintosh
 * 680x0 compilers that define double as a 10-byte IEEE extended float.
 * Doing 10-byte alignment is counterproductive because longwords won't be
 * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
 * such a compiler.
 */

#ifndef ALIGN_TYPE              /* so can override from jconfig.h */
#define ALIGN_TYPE  double
#endif


/*
 * We allocate objects from "pools", where each pool is gotten with a single
 * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
 * overhead within a pool, except for alignment padding.  Each pool has a
 * header with a link to the next pool of the same class.
 * Small and large pool headers are identical except that the latter's
 * link pointer must be FAR on 80x86 machines.
 * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
 * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
 * of the alignment requirement of ALIGN_TYPE.
 */

typedef union small_pool_struct * small_pool_ptr;

typedef union small_pool_struct {
  struct {
    small_pool_ptr next;        /* next in list of pools */
    size_t bytes_used;          /* how many bytes already used within pool */
    size_t bytes_left;          /* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;             /* included in union to ensure alignment */
} small_pool_hdr;

typedef union large_pool_struct FAR * large_pool_ptr;

typedef union large_pool_struct {
  struct {
    large_pool_ptr next;        /* next in list of pools */
    size_t bytes_used;          /* how many bytes already used within pool */
    size_t bytes_left;          /* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;             /* included in union to ensure alignment */
} large_pool_hdr;


/*
 * Here is the full definition of a memory manager object.
 */

typedef struct {
  struct jpeg_memory_mgr pub;   /* public fields */

  /* Each pool identifier (lifetime class) names a linked list of pools. */
  small_pool_ptr small_list[JPOOL_NUMPOOLS];
  large_pool_ptr large_list[JPOOL_NUMPOOLS];

  /* Since we only have one lifetime class of virtual arrays, only one
   * linked list is necessary (for each datatype).  Note that the virtual
   * array control blocks being linked together are actually stored somewhere
   * in the small-pool list.
   */
  jvirt_sarray_ptr virt_sarray_list;
  jvirt_barray_ptr virt_barray_list;

  /* This counts total space obtained from jpeg_get_small/large */
  size_t total_space_allocated;

  /* alloc_sarray and alloc_barray set this value for use by virtual
   * array routines.
   */
  JDIMENSION last_rowsperchunk; /* from most recent alloc_sarray/barray */
} my_memory_mgr;

typedef my_memory_mgr * my_mem_ptr;


/*
 * The control blocks for virtual arrays.
 * Note that these blocks are allocated in the "small" pool area.
 * System-dependent info for the associated backing store (if any) is hidden
 * inside the backing_store_info struct.
 */

struct jvirt_sarray_control {
  JSAMPARRAY mem_buffer;        /* => the in-memory buffer */
  JDIMENSION rows_in_array;     /* total virtual array height */
  JDIMENSION samplesperrow;     /* width of array (and of memory buffer) */
  JDIMENSION maxaccess;         /* max rows accessed by access_virt_sarray */
  JDIMENSION rows_in_mem;       /* height of memory buffer */
  JDIMENSION rowsperchunk;      /* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;     /* first logical row # in the buffer */
  JDIMENSION first_undef_row;   /* row # of first uninitialized row */
  boolean pre_zero;             /* pre-zero mode requested? */
  boolean dirty;                /* do current buffer contents need written? */
  boolean b_s_open;             /* is backing-store data valid? */
  jvirt_sarray_ptr next;        /* link to next virtual sarray control block */
  backing_store_info b_s_info;  /* System-dependent control info */
};

struct jvirt_barray_control {
  JBLOCKARRAY mem_buffer;       /* => the in-memory buffer */
  JDIMENSION rows_in_array;     /* total virtual array height */
  JDIMENSION blocksperrow;      /* width of array (and of memory buffer) */
  JDIMENSION maxaccess;         /* max rows accessed by access_virt_barray */
  JDIMENSION rows_in_mem;       /* height of memory buffer */
  JDIMENSION rowsperchunk;      /* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;     /* first logical row # in the buffer */
  JDIMENSION first_undef_row;   /* row # of first uninitialized row */
  boolean pre_zero;             /* pre-zero mode requested? */
  boolean dirty;                /* do current buffer contents need written? */
  boolean b_s_open;             /* is backing-store data valid? */
  jvirt_barray_ptr next;        /* link to next virtual barray control block */
  backing_store_info b_s_info;  /* System-dependent control info */
};


#ifdef MEM_STATS                /* optional extra stuff for statistics */

LOCAL void
print_mem_stats (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;

  /* Since this is only a debugging stub, we can cheat a little by using
   * fprintf directly rather than going through the trace message code.
   * This is helpful because message parm array can't handle longs.
   */
  fprintf(stderr, "Freeing pool %d, total space = %ld\n",
          pool_id, mem->total_space_allocated);

  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
       lhdr_ptr = lhdr_ptr->hdr.next) {
    fprintf(stderr, "  Large chunk used %ld\n",
            (long) lhdr_ptr->hdr.bytes_used);
  }

  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
       shdr_ptr = shdr_ptr->hdr.next) {
    fprintf(stderr, "  Small chunk used %ld free %ld\n",
            (long) shdr_ptr->hdr.bytes_used,
            (long) shdr_ptr->hdr.bytes_left);
  }
}

#endif /* MEM_STATS */


LOCAL void
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;  /* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
}


/*
 * Allocation of "small" objects.
 *
 * For these, we use pooled storage.  When a new pool must be created,
 * we try to get enough space for the current request plus a "slop" factor,
 * where the slop will be the amount of leftover space in the new pool.
 * The speed vs. space tradeoff is largely determined by the slop values.
 * A different slop value is provided for each pool class (lifetime),
 * and we also distinguish the first pool of a class from later ones.
 * NOTE: the values given work fairly well on both 16- and 32-bit-int
 * machines, but may be too small if longs are 64 bits or more.
 */

static const size_t first_pool_slop[JPOOL_NUMPOOLS] =
{
        1600,                   /* first PERMANENT pool */
        16000                   /* first IMAGE pool */
};

static const size_t extra_pool_slop[JPOOL_NUMPOOLS] =
{
        0,                      /* additional PERMANENT pools */
        5000                    /* additional IMAGE pools */
};

#define MIN_SLOP  50            /* greater than 0 to avoid futile looping */


METHODDEF void *
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
    out_of_memory(cinfo, 1);    /* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id); /* safety check */
  prev_hdr_ptr = NULL;
  hdr_ptr = mem->small_list[pool_id];
  while (hdr_ptr != NULL) {
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
      break;                    /* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
    hdr_ptr = hdr_ptr->hdr.next;
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
    if (prev_hdr_ptr == NULL)   /* first pool in class? */
      slop = first_pool_slop[pool_id];
    else
      slop = extra_pool_slop[pool_id];
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
      if (hdr_ptr != NULL)
        break;
      slop /= 2;
      if (slop < MIN_SLOP)      /* give up when it gets real small */
        out_of_memory(cinfo, 2); /* jpeg_get_small failed */
    }
    mem->total_space_allocated += min_request + slop;
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
    hdr_ptr->hdr.bytes_used = 0;
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
    if (prev_hdr_ptr == NULL)   /* first pool in class? */
      mem->small_list[pool_id] = hdr_ptr;
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
  hdr_ptr->hdr.bytes_used += sizeofobject;
  hdr_ptr->hdr.bytes_left -= sizeofobject;

  return (void *) data_ptr;
}


/*
 * Allocation of "large" objects.
 *
 * The external semantics of these are the same as "small" objects,
 * except that FAR pointers are used on 80x86.  However the pool
 * management heuristics are quite different.  We assume that each
 * request is large enough that it may as well be passed directly to
 * jpeg_get_large; the pool management just links everything together
 * so that we can free it all on demand.
 * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 * structures.  The routines that create these structures (see below)
 * deliberately bunch rows together to ensure a large request size.
 */

METHODDEF void FAR *
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
    out_of_memory(cinfo, 3);    /* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id); /* safety check */

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
                                            SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
    out_of_memory(cinfo, 4);    /* jpeg_get_large failed */
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
  hdr_ptr->hdr.bytes_left = 0;
  mem->large_list[pool_id] = hdr_ptr;

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
}


/*
 * Creation of 2-D sample arrays.
 * The pointers are in near heap, the samples themselves in FAR heap.
 *
 * To minimize allocation overhead and to allow I/O of large contiguous
 * blocks, we allocate the sample rows in groups of as many rows as possible
 * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 * NB: the virtual array control routines, later in this file, know about
 * this chunking of rows.  The rowsperchunk value is left in the mem manager
 * object so that it can be saved away if this sarray is the workspace for
 * a virtual array.
 */

METHODDEF JSAMPARRAY
alloc_sarray (j_common_ptr cinfo, int pool_id,
              JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JSAMPARRAY result;
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
          ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
                                    (size_t) (numrows * SIZEOF(JSAMPROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
        (size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
                  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += samplesperrow;
    }
  }

  return result;
}


/*
 * Creation of 2-D coefficient-block arrays.
 * This is essentially the same as the code for sample arrays, above.
 */

METHODDEF JBLOCKARRAY
alloc_barray (j_common_ptr cinfo, int pool_id,
              JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JBLOCKARRAY result;
  JBLOCKROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
          ((long) blocksperrow * SIZEOF(JBLOCK));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
                                     (size_t) (numrows * SIZEOF(JBLOCKROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
        (size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
                  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += blocksperrow;
    }
  }

  return result;
}


/*
 * About virtual array management:
 *
 * The above "normal" array routines are only used to allocate strip buffers
 * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 * are handled as "virtual" arrays.  The array is still accessed a strip at a
 * time, but the memory manager must save the whole array for repeated
 * accesses.  The intended implementation is that there is a strip buffer in
 * memory (as high as is possible given the desired memory limit), plus a
 * backing file that holds the rest of the array.
 *
 * The request_virt_array routines are told the total size of the image and
 * the maximum number of rows that will be accessed at once.  The in-memory
 * buffer must be at least as large as the maxaccess value.
 *
 * The request routines create control blocks but not the in-memory buffers.
 * That is postponed until realize_virt_arrays is called.  At that time the
 * total amount of space needed is known (approximately, anyway), so free
 * memory can be divided up fairly.
 *
 * The access_virt_array routines are responsible for making a specific strip
 * area accessible (after reading or writing the backing file, if necessary).
 * Note that the access routines are told whether the caller intends to modify
 * the accessed strip; during a read-only pass this saves having to rewrite
 * data to disk.  The access routines are also responsible for pre-zeroing
 * any newly accessed rows, if pre-zeroing was requested.
 *
 * In current usage, the access requests are usually for nonoverlapping
 * strips; that is, successive access start_row numbers differ by exactly
 * num_rows = maxaccess.  This means we can get good performance with simple
 * buffer dump/reload logic, by making the in-memory buffer be a multiple
 * of the access height; then there will never be accesses across bufferload
 * boundaries.  The code will still work with overlapping access requests,
 * but it doesn't handle bufferload overlaps very efficiently.
 */


METHODDEF jvirt_sarray_ptr
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
                     JDIMENSION samplesperrow, JDIMENSION numrows,
                     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id); /* safety check */

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
                                          SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;    /* marks array not yet realized */
  result->rows_in_array = numrows;
  result->samplesperrow = samplesperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;     /* no associated backing-store object */
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
  mem->virt_sarray_list = result;

  return result;
}


METHODDEF jvirt_barray_ptr
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
                     JDIMENSION blocksperrow, JDIMENSION numrows,
                     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id); /* safety check */

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
                                          SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;    /* marks array not yet realized */
  result->rows_in_array = numrows;
  result->blocksperrow = blocksperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;     /* no associated backing-store object */
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
  mem->virt_barray_list = result;

  return result;
}


METHODDEF void
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  long space_per_minheight, maximum_space, avail_mem;
  long minheights, max_minheights;
  jvirt_sarray_ptr sptr;
  jvirt_barray_ptr bptr;

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
  maximum_space = 0;
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) sptr->maxaccess *
                             (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
      maximum_space += (long) sptr->rows_in_array *
                       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) bptr->maxaccess *
                             (long) bptr->blocksperrow * SIZEOF(JBLOCK);
      maximum_space += (long) bptr->rows_in_array *
                       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
    }
  }

  if (space_per_minheight <= 0)
    return;                     /* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
                                 mem->total_space_allocated);

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
    max_minheights = 1000000000L;
  else {
    max_minheights = avail_mem / space_per_minheight;
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
      max_minheights = 1;
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
        /* This buffer fits in memory */
        sptr->rows_in_mem = sptr->rows_in_array;
      } else {
        /* It doesn't fit in memory, create backing store. */
        sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
        jpeg_open_backing_store(cinfo, & sptr->b_s_info,
                                (long) sptr->rows_in_array *
                                (long) sptr->samplesperrow *
                                (long) SIZEOF(JSAMPLE));
        sptr->b_s_open = TRUE;
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
                                      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
      sptr->cur_start_row = 0;
      sptr->first_undef_row = 0;
      sptr->dirty = FALSE;
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
        /* This buffer fits in memory */
        bptr->rows_in_mem = bptr->rows_in_array;
      } else {
        /* It doesn't fit in memory, create backing store. */
        bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
        jpeg_open_backing_store(cinfo, & bptr->b_s_info,
                                (long) bptr->rows_in_array *
                                (long) bptr->blocksperrow *
                                (long) SIZEOF(JBLOCK));
        bptr->b_s_open = TRUE;
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
                                      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
      bptr->cur_start_row = 0;
      bptr->first_undef_row = 0;
      bptr->dirty = FALSE;
    }
  }
}


LOCAL void
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)              /* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
                                            (void FAR *) ptr->mem_buffer[i],
                                            file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
                                           (void FAR *) ptr->mem_buffer[i],
                                           file_offset, byte_count);
    file_offset += byte_count;
  }
}


LOCAL void
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)              /* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
                                            (void FAR *) ptr->mem_buffer[i],
                                            file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
                                           (void FAR *) ptr->mem_buffer[i],
                                           file_offset, byte_count);
    file_offset += byte_count;
  }
}


METHODDEF JSAMPARRAY
access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
                    JDIMENSION start_row, JDIMENSION num_rows,
                    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_sarray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
        ltemp = 0;              /* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)             /* writer skipped over a section of array */
        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;    /* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
        jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
        undef_row++;
      }
    } else {
      if (! writable)           /* reader looking at undefined data */
        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


METHODDEF JBLOCKARRAY
access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
                    JDIMENSION start_row, JDIMENSION num_rows,
                    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_barray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
        ltemp = 0;              /* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)             /* writer skipped over a section of array */
        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;    /* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
        jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
        undef_row++;
      }
    } else {
      if (! writable)           /* reader looking at undefined data */
        ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


/*
 * Release all objects belonging to a specified pool.
 */

METHODDEF void
free_pool (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id); /* safety check */

#ifdef MEM_STATS
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
      if (sptr->b_s_open) {     /* there may be no backing store */
        sptr->b_s_open = FALSE; /* prevent recursive close if error */
        (*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
      }
    }
    mem->virt_sarray_list = NULL;
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
      if (bptr->b_s_open) {     /* there may be no backing store */
        bptr->b_s_open = FALSE; /* prevent recursive close if error */
        (*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
      }
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
  mem->large_list[pool_id] = NULL;

  while (lhdr_ptr != NULL) {
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
    space_freed = lhdr_ptr->hdr.bytes_used +
                  lhdr_ptr->hdr.bytes_left +
                  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
  mem->small_list[pool_id] = NULL;

  while (shdr_ptr != NULL) {
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
    space_freed = shdr_ptr->hdr.bytes_used +
                  shdr_ptr->hdr.bytes_left +
                  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}


/*
 * Close up shop entirely.
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF void
self_destruct (j_common_ptr cinfo)
{
  int pool;

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
  cinfo->mem = NULL;            /* ensures I will be called only once */

  jpeg_mem_term(cinfo);         /* system-dependent cleanup */
}


/*
 * Memory manager initialization.
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL void
jinit_memory_mgr (j_common_ptr cinfo)
{
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;            /* for safety if init fails */

  /* Check for configuration errors.
   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
   * doesn't reflect any real hardware alignment requirement.
   * The test is a little tricky: for X>0, X and X-1 have no one-bits
   * in common if and only if X is a power of 2, ie has only one one-bit.
   * Some compilers may give an "unreachable code" warning here; ignore it.
   */
  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));

  if (mem == NULL) {
    jpeg_mem_term(cinfo);       /* system-dependent cleanup */
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
    return;
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
  mem->pub.alloc_large = alloc_large;
  mem->pub.alloc_sarray = alloc_sarray;
  mem->pub.alloc_barray = alloc_barray;
  mem->pub.request_virt_sarray = request_virt_sarray;
  mem->pub.request_virt_barray = request_virt_barray;
  mem->pub.realize_virt_arrays = realize_virt_arrays;
  mem->pub.access_virt_sarray = access_virt_sarray;
  mem->pub.access_virt_barray = access_virt_barray;
  mem->pub.free_pool = free_pool;
  mem->pub.self_destruct = self_destruct;

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
    mem->large_list[pool] = NULL;
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;

  mem->total_space_allocated = SIZEOF(my_memory_mgr);

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;

  /* Check for an environment variable JPEGMEM; if found, override the
   * default max_memory setting from jpeg_mem_init.  Note that the
   * surrounding application may again override this value.
   * If your system doesn't support getenv(), define NO_GETENV to disable
   * this feature.
   */
#ifndef NO_GETENV
  { char * memenv;

    if ((memenv = getenv("JPEGMEM")) != NULL) {
      char ch = 'x';

      if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
        if (ch == 'm' || ch == 'M')
          max_to_use *= 1000L;
        mem->pub.max_memory_to_use = max_to_use * 1000L;
      }
    }
  }
#endif

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jpegapi.cpp ===
/* jpegapi.cpp -- interface layer for painless JPEG compression of NIFty images.
 * Written by Ajai Sehgal 3/10/96
 * (c) Copyright Microsoft Corporation
 *
 *  08-27-1997 (kurtgeis) Pushed exception handling into library.  Changed
 *  all entry points to return HRESULTs.  Added width and heigth to parameters.
 */
#pragma warning(disable:4005)

#include "windows.h"

// Workaround for redefinition of INT32
#define   XMD_H  1

#include "jpegapi.h"

#include "jmemsys.h"


// #define INVERTBGR   0

/********************************************************************************/

/* JPEGCompressHeader()
 *
 * Arguments:
 *      tuQuality   "Quality" of the resulting JPEG (0..100, 100=best)
 *
 * Returns:
 *      HRESULT
 */
HRESULT JPEGCompressHeader(BYTE *prgbJPEGHeaderBuf, UINT tuQuality, ULONG *pcbOut, HANDLE *phJpegC, J_COLOR_SPACE ColorSpace)
{
    HRESULT         hr = S_OK;

    try
    {
        jpeg_compress_struct *spjcs = new jpeg_compress_struct;
        struct jpeg_error_mgr *jem = new jpeg_error_mgr;

        spjcs->err = jpeg_std_error(jem);   // Init the error handler
        jpeg_create_compress(spjcs);        // Init the compression object

        if (ColorSpace == JCS_GRAYSCALE)
        {
            spjcs->in_color_space = JCS_GRAYSCALE;
            spjcs->input_components = 1;
        }
        else
        {
            spjcs->in_color_space = JCS_RGBA;
            spjcs->input_components = 4;
        }
        jpeg_set_defaults(spjcs);       // Init the compression engine with the defaults

        jpeg_set_quality(spjcs, tuQuality, TRUE);

        jpeg_set_colorspace(spjcs,ColorSpace);

        jpeg_mem_dest(spjcs, prgbJPEGHeaderBuf);    // Init the "destination manager"

        spjcs->comps_in_scan = 0;

        spjcs->write_JFIF_header = FALSE;

        jpeg_write_tables(spjcs);

        jpeg_suppress_tables(spjcs, TRUE);

        *pcbOut = spjcs->bytes_in_buffer;

        *phJpegC = (HANDLE) spjcs;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

/* JPEGDecompressHeader()
 *
 * Arguments:
 *      *prgbJPEGBuf : pointer to the JPEG header data as read from file
 *      *phJpegD:   pointer to Handle of the JPEG decompression object returned
 *
 * Returns:
 *      HRESULT
 */
HRESULT JPEGDecompressHeader(BYTE *prgbJPEGHeaderBuf, HANDLE *phJpegD, ULONG ulBufferSize)
{
    HRESULT         hr = S_OK;

    try
    {
        jpeg_decompress_struct * spjds = new jpeg_decompress_struct;
        struct jpeg_error_mgr *jem = new jpeg_error_mgr;

        spjds->err = jpeg_std_error(jem);   // Init the error handler

        jpeg_create_decompress(spjds);  // Init the decompression object


    // Now we need to "read" it into the decompression object...

        jpeg_mem_src(spjds, prgbJPEGHeaderBuf, ulBufferSize);

        jpeg_read_header(spjds, TRUE);

        spjds->out_color_space = JCS_RGBA;

        *phJpegD = (HANDLE) spjds;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

// DestroyJPEGCompress
//
// Release all the JPEG stuff from the handle we gave to the user
//
HRESULT DestroyJPEGCompressHeader(HANDLE hJpegC)
{
    HRESULT         hr = S_OK;

    try
    {
        struct jpeg_compress_struct *pjcs = (struct jpeg_compress_struct *)hJpegC;
        jpeg_destroy_compress(pjcs);
        delete pjcs->err;
        delete pjcs;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

// DestroyJPEGDecompressHeader
//
// Release all the JPEG stuff from the handle we gave to the user
//
HRESULT DestroyJPEGDecompressHeader(HANDLE hJpegD)
{
    HRESULT         hr = S_OK;

    try
    {
        struct jpeg_decompress_struct *pjds = (struct jpeg_decompress_struct *)hJpegD;
        jpeg_destroy_decompress(pjds);
        delete pjds->err;
        delete pjds;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

/* JPEGFromRGBA()
 *
 * Arguments:
 *      prgbImage   A raw image buffer (4 bytes/pixel, RGBA order)
 *      cpxlAcross  Width of the image, in pixels
 *      cpxlDown    Height of the image, in pixels
 *      tuQuality   "Quality" of the resulting JPEG (0..100, 100=best)
 *      A memory buffer containing the complete JPEG compressed version of the
 *      given image. NULL on error.
 *
 * Returns:
 *      HRESULT
 */

HRESULT JPEGFromRGBA(
    BYTE *prgbImage,
    BYTE *prgbJPEGBuf,
    UINT tuQuality,
    ULONG *pcbOut,
    HANDLE hJpegC,
    J_COLOR_SPACE ColorSpace,
    UINT nWidth,
    UINT nHeight
    )
{
    HRESULT         hr = S_OK;

    try
    {
        struct jpeg_compress_struct *pjcs = (jpeg_compress_struct *)hJpegC;

        JSAMPROW rgrow[1];


//
// On non X86 architectures use only C code
//
#if defined (_X86_)
        pjcs->dct_method = JDCT_ISLOW;
#else
        pjcs->dct_method = JDCT_FLOAT;
#endif
                pjcs->image_width = nWidth;
        pjcs->image_height = nHeight;
        pjcs->data_precision = 8;       /* 8 bits / sample */
        pjcs->bytes_in_buffer = 0;
        pjcs->write_JFIF_header = FALSE;

        if (ColorSpace == JCS_GRAYSCALE)
        {
            pjcs->input_components = 1;
        }
        else
        {
            pjcs->input_components = 4;
        }

        jpeg_set_colorspace(pjcs,ColorSpace);

        jpeg_set_quality(pjcs, tuQuality, TRUE);

        jpeg_suppress_tables(pjcs, TRUE);

        jpeg_mem_dest(pjcs, prgbJPEGBuf);   // Init the "destination manager"

        jpeg_start_compress(pjcs, FALSE);

        rgrow[0] = (JSAMPROW)prgbImage;

        while (pjcs->next_scanline < nHeight )
        {
            jpeg_write_scanlines(pjcs, rgrow, 1);

            rgrow[0] += nWidth * pjcs->input_components; //input_components is the equivalent of # of bytes
        }

        jpeg_finish_compress(pjcs);     // Finish up compressing


        *pcbOut = pjcs->bytes_in_buffer;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

/* RGBAFromJPEG()
 *
 * Arguments:
 *      prgbJPEG: A JPEG data stream, as returned by JPEGFromRGBA()
 *      A memory buffer containing the reconstructed image in RGBA format.
 *      NULL on error.
 *
 * Returns:
 *      HRESULT
*/

HRESULT RGBAFromJPEG(BYTE *prgbJPEG, BYTE *prgbImage, HANDLE hJpegD, ULONG ulBufferSize, BYTE bJPEGConversionType, ULONG *pulReturnedNumChannels, UINT nWidth, UINT nHeight )
{
    HRESULT         hr = S_OK;

    try
    {
        struct jpeg_decompress_struct *pjds;
        jpeg_decompress_struct * spjds = new jpeg_decompress_struct;
        struct jpeg_error_mgr *jem;
        jpeg_error_mgr * spjem = new jpeg_error_mgr;

        if ( hJpegD == NULL )
        {

            spjds->err = jpeg_std_error(spjem); // Init the error handler
            jpeg_create_decompress(spjds);      // Init the decompression object in the case
            pjds = spjds;                       // that the headers are with the tiles.
            jem = spjem;
        }
        else if ( hJpegD == NULL )
        {
            // This should never happen.  The decompression header was not set up return an
            // error indication by setting the return value to kpvNil.
            return E_FAIL;
        }
        else
        {
            pjds = (struct jpeg_decompress_struct *)hJpegD;
        }

        JSAMPROW rgrow[1];

        // Set the various image parameters.
        pjds->data_precision = 8;
        pjds->image_width = nWidth;
        pjds->image_height = nHeight;

        jpeg_mem_src(pjds, prgbJPEG, ulBufferSize); // Init the "source manager"

        jpeg_read_header(pjds, TRUE);

        switch (bJPEGConversionType)
        {
        case 1:
            pjds->out_color_space = JCS_RGBA;
            if (pjds->jpeg_color_space != JCS_RGBA)
            {
                if ( 4 == pjds->num_components)
                    pjds->jpeg_color_space = JCS_YCbCrA;
                else
                    pjds->jpeg_color_space = JCS_YCbCr;
            }
            *pulReturnedNumChannels = 4;
            break;
        case 2:
            pjds->out_color_space = JCS_RGBA;

            if ( 4 == pjds->num_components)
                pjds->jpeg_color_space = JCS_YCbCrA;
            else
                pjds->jpeg_color_space = JCS_YCbCr;

            pjds->jpeg_color_space = JCS_YCbCrA;
            *pulReturnedNumChannels = 4;
            break;
        default:
            pjds->out_color_space = JCS_UNKNOWN;
            pjds->jpeg_color_space = JCS_UNKNOWN;
            *pulReturnedNumChannels = pjds->num_components;
        }

//
// On non X86 architectures use only C code
//
#if defined (_X86_)
        pjds->dct_method = JDCT_ISLOW;
#else
            pjds->dct_method = JDCT_FLOAT;
#endif

        jpeg_start_decompress(pjds);

        rgrow[0] = (JSAMPROW)prgbImage;

        while (pjds->output_scanline < pjds->output_height)
        {
            jpeg_read_scanlines(pjds, rgrow, 1);
            rgrow[0] += pjds->output_width * *pulReturnedNumChannels;
        }

        jpeg_finish_decompress(pjds);   // Finish up decompressing

        if (hJpegD == NULL)
            jpeg_destroy_decompress(pjds);  //Destroy the decompression object if it
                                            //was locally allocated as in when the header
                                            //is part of the tile.
        delete spjem;
                delete spjds;
    }
    catch( THROWN thrownHR )
    {
        hr = thrownHR.Hr();
    }

    return hr;
}

HRESULT
GetJPEGHeaderFields(
    HANDLE  hJpegD,
    UINT    *pWidth,
    UINT    *pHeight,
    INT     *pNumComponents,
    J_COLOR_SPACE   *pColorSpace
    )
{
    struct jpeg_decompress_struct *pjds;

    pjds = (struct jpeg_decompress_struct *)hJpegD;

    if (hJpegD) {

        *pWidth = pjds->image_width;
        *pHeight = pjds->image_height;
        *pNumComponents = pjds->num_components;
        *pColorSpace = pjds->jpeg_color_space;

    }

    return S_OK;

}

BOOL
WINAPI
Win32DIBFromJPEG(
    BYTE        *prgbJPEG,
    ULONG       ulBufferSize,
    LPBITMAPINFO pbmi,
    HBITMAP     *phBitmap,
    PVOID       *ppvBits
    )
{

    BITMAPINFO  bmi;

    struct jpeg_decompress_struct *pjds;
    jpeg_decompress_struct * spjds = new jpeg_decompress_struct;
    struct jpeg_error_mgr *jem;
    jpeg_error_mgr * spjem = new jpeg_error_mgr;

    // Only 24bpp for now
    const UINT    uiReturnedNumChannels  = 3;

    //
    spjds->err = jpeg_std_error(spjem); // Init the error handler
    jpeg_create_decompress(spjds);      // Init the decompression object in the case
    pjds = spjds;                       // that the headers are with the tiles.
    jem = spjem;

    JSAMPROW rgrow[1];

    // Set the various image parameters.

    try {

        jpeg_buf_src(pjds, prgbJPEG, ulBufferSize); // Init the "source manager"
        jpeg_read_header(pjds, TRUE);

    } catch (...) {

        //
        // for some reason we crashed, so return the exception code
        //
        #ifdef DEBUG
        OutputDebugString("JPEG DIB crashed");
        #endif
        return FALSE;
    }


    // Set parameter for decompression
    // Defaults are OK for this occasssion
    // Specify the JCS_BGR output colorspace

    pjds->out_color_space = JCS_BGR;
    // pjds->out_color_space = JCS_RGB;

    //
    // Create DIB bits
    //

    pbmi->bmiHeader.biSize            = sizeof(BITMAPINFOHEADER);

    pbmi->bmiHeader.biWidth           = pjds->image_width;
    pbmi->bmiHeader.biHeight          = -((int)pjds->image_height); // Top Down bitmap
    pbmi->bmiHeader.biPlanes          = 1;
    pbmi->bmiHeader.biBitCount        = 24; // BUGBUG careful
    pbmi->bmiHeader.biCompression     = BI_RGB;
    pbmi->bmiHeader.biSizeImage       = 0;
    pbmi->bmiHeader.biXPelsPerMeter   = 0;
    pbmi->bmiHeader.biYPelsPerMeter   = 0;
    pbmi->bmiHeader.biClrUsed         = 0;
    pbmi->bmiHeader.biClrImportant    = 0;

    *phBitmap = ::CreateDIBSection (NULL,
                                  pbmi,
                                  DIB_RGB_COLORS,
                                  ppvBits,
                                  NULL,
                                  0);

//
// On non X86 architectures use only C code
//
#if defined (_X86_)
    pjds->dct_method = JDCT_ISLOW;
#else
        pjds->dct_method = JDCT_FLOAT;
#endif

    jpeg_start_decompress(pjds);

    rgrow[0] = (JSAMPROW)*ppvBits;

    while (pjds->output_scanline < pjds->output_height)
    {
        jpeg_read_scanlines(pjds, rgrow, 1);

        // Invert BGR --> RGB
        #ifdef INVERTBGR

        RGBTRIPLE *pTriplet;

        pTriplet = (RGBTRIPLE *) rgrow[0];

        for (int iPixel = 0;
            iPixel < (int)pjds->output_width;
            iPixel++,pTriplet++) {

            BYTE    bTemp;

            bTemp = pTriplet->rgbtBlue;
            pTriplet->rgbtBlue = pTriplet->rgbtRed;
            pTriplet->rgbtRed = bTemp;

        }
        #endif

        rgrow[0] = (JSAMPROW) ALIGNIT(rgrow[0] + pjds->output_width * uiReturnedNumChannels,DWORD);
    }

    jpeg_finish_decompress(pjds);   // Finish up decompressing

    jpeg_destroy_decompress(pjds);  //Destroy the decompression object
    delete spjem;
    delete spjds;

    return TRUE;

}


BOOL
WINAPI
JPEGFromWin32DIB(
    HBITMAP     hBitmap,


    BYTE        *prgbJPEG,
    ULONG       ulBufferSize,
    LPBITMAPINFO pbmi,
    PVOID       *ppvBits
    )
{


    return TRUE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmorecfg.h ===
/*
 * jmorecfg.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains additional configuration options that customize the
 * JPEG software for special applications or support machine-dependent
 * optimizations.  Most users will not need to touch this file.
 */


/*
 * Define BITS_IN_JSAMPLE as either
 *   8   for 8-bit sample values (the usual setting)
 *   12  for 12-bit sample values
 * Only 8 and 12 are legal data precisions for lossy JPEG according to the
 * JPEG standard, and the IJG code does not support anything else!
 * We do not support run-time selection of data precision, sorry.
 */

#define BITS_IN_JSAMPLE  8  /* use 8 or 12 */


/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of the JPEG spec, set this to 255.  However, darn
 * few applications need more than 4 channels (maybe 5 for CMYK + alpha
 * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10  /* maximum number of image components */


/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JSAMPLE;
#ifdef CHAR_IS_UNSIGNED
#define GETJSAMPLE(value)  ((int) (value))
#else
#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

#define MAXJSAMPLE  255
#define CENTERJSAMPLE   128

#endif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#define MAXJSAMPLE  4095
#define CENTERJSAMPLE   2048

#endif /* BITS_IN_JSAMPLE == 12 */


/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;


/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JOCTET;
#ifdef CHAR_IS_UNSIGNED
#define GETJOCTET(value)  (value)
#else
#define GETJOCTET(value)  ((value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */


/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */
#ifndef _BASETSD_H_

/* UINT8 must hold at least the values 0..255. */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char UINT8;
#else /* not HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char UINT8;
#else /* not CHAR_IS_UNSIGNED */
typedef short UINT8;
#endif /* CHAR_IS_UNSIGNED */
#endif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H           /* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values. */

#ifndef XMD_H           /* X11/xmd.h correctly defines INT32 */

//+MicrosoftNT
//
// This definition is incompatible with 64bit headers
//
#ifndef WINNT
typedef long  INT32;
#else
typedef int  INT32;
#endif

#endif
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */


/* These defines are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

#define METHODDEF static    /* a function called through method pointers */
#define LOCAL     static    /* a function used only in its module */
#define GLOBAL          /* a function referenced thru EXTERNs */
#define EXTERN    extern    /* a reference to a GLOBAL function */

/* Here is the pseudo-keyword for declaring pointers that must be "far"
 * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
 * by just saying "FAR *" where such a pointer is needed.  In a few places
 * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
 */

#ifdef NEED_FAR_POINTERS
#ifndef FAR
#define FAR  far
#endif
#else
#ifndef FAR
#define FAR
#endif
#endif


/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

#ifndef HAVE_BOOLEAN
typedef int boolean;
#endif
#ifndef FALSE           /* in case these macros already exist */
#define FALSE   0       /* values of boolean */
#endif
#ifndef TRUE
#define TRUE    1
#endif


/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS


/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED /* slow but accurate integer algorithm */
#define DCT_IFAST_SUPPORTED /* faster, less accurate integer method */
#define DCT_FLOAT_SUPPORTED /* floating-point: accurate, fast on fast HW */

/* Encoder capability options: */

#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define C_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
#define ENTROPY_OPT_SUPPORTED       /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 * The exact same statements apply for progressive JPEG: the default tables
 * don't work for progressive mode.  (This may get fixed, however.)
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define D_PROGRESSIVE_SUPPORTED     /* Progressive JPEG? (Requires MULTISCAN)*/
#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
#define IDCT_SCALING_SUPPORTED      /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED       /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED       /* 2-pass color quantization? */

/* more capability options later, no doubt */


/*
 * Ordering of RGB data in scanlines passed to or from the application.
 * If your application wants to deal with data in the order B,G,R, just
 * change these macros.  You can also deal with formats such as R,G,B,X
 * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
 * the offsets will also change the order in which colormap data is organized.
 * RESTRICTIONS:
 * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
 * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
 *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
 * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
 *    is not 3 (they don't understand about dummy color components!).  So you
 *    can't use color quantization if you change that value.
 */

#define RGB_RED     0   /* Offset of Red in an RGB scanline element */
#define RGB_GREEN   1   /* Offset of Green */
#define RGB_BLUE    2   /* Offset of Blue */
#define RGB_PIXELSIZE   3   /* JSAMPLEs per RGB scanline element */

#ifdef WIAJPEG
#define BGR_BLUE    0   /* Offset of Red in an BGR scanline element */
#define BGR_GREEN   1   /* Offset of Green */
#define BGR_RED     2   /* Offset of Blue */
#define BGR_PIXELSIZE   3   /* JSAMPLEs per BGR scanline element */
#endif

/* Definitions for speed-related optimizations. */


/* If your compiler supports inline functions, define INLINE
 * as the inline keyword; otherwise define it as empty.
 */

#ifndef INLINE
#ifdef __GNUC__         /* for instance, GNU C knows about inline */
#define INLINE __inline__
#endif
#ifndef INLINE
#define INLINE          /* default is to define it as empty */
#endif
#endif


/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#ifndef MULTIPLIER
#define MULTIPLIER  int     /* type for fastest integer multiply */
#endif


/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 * Typically, float is faster in ANSI C compilers, while double is faster in
 * pre-ANSI compilers (because they insist on converting to double anyway).
 * The code below therefore chooses float if we have ANSI-style prototypes.
 */

#ifndef FAST_FLOAT
#ifdef HAVE_PROTOTYPES
#define FAST_FLOAT  float
#else
#define FAST_FLOAT  double
#endif
#endif

#endif /* JPEG_INTERNAL_OPTIONS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemnobs.cpp ===
/*
 * jmemnobs.c
 *
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides a really simple implementation of the system-
 * dependent portion of the JPEG memory manager.  This implementation
 * assumes that no backing-store files are needed: all required space
 * can be obtained from malloc().
 * This is very portable in the sense that it'll compile on almost anything,
 * but you'd better have lots of main memory (or virtual memory) if you want
 * to process big images.
 * Note that the max_memory_to_use option is ignored by this implementation.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL void *
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL void
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL void FAR *
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL void
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL long
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL void
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL long
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL void
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jmemsys.h ===
/*
 * jmemsys.h
 *
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file defines the interface between the system-independent
 * and system-dependent portions of the JPEG memory manager.  No other
 * modules need include it.  (The system-independent portion is jmemmgr.c;
 * there are several different versions of the system-dependent portion.)
 *
 * This file works as-is for the system-dependent memory managers supplied
 * in the IJG distribution.  You may need to modify it if you write a
 * custom memory manager.  If system-dependent changes are needed in
 * this file, the best method is to #ifdef them based on a configuration
 * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR.
 */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_get_small		jGetSmall
#define jpeg_free_small		jFreeSmall
#define jpeg_get_large		jGetLarge
#define jpeg_free_large		jFreeLarge
#define jpeg_mem_available	jMemAvail
#define jpeg_open_backing_store	jOpenBackStore
#define jpeg_mem_init		jMemInit
#define jpeg_mem_term		jMemTerm
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/*
 * These two functions are used to allocate and release small chunks of
 * memory.  (Typically the total amount requested through jpeg_get_small is
 * no more than 20K or so; this will be requested in chunks of a few K each.)
 * Behavior should be the same as for the standard library functions malloc
 * and free; in particular, jpeg_get_small must return NULL on failure.
 * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
 * size of the object being freed, just in case it's needed.
 * On an 80x86 machine using small-data memory model, these manage near heap.
 */

EXTERN void * jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
EXTERN void jpeg_free_small JPP((j_common_ptr cinfo, void * object,
				 size_t sizeofobject));

/*
 * These two functions are used to allocate and release large chunks of
 * memory (up to the total free space designated by jpeg_mem_available).
 * The interface is the same as above, except that on an 80x86 machine,
 * far pointers are used.  On most other machines these are identical to
 * the jpeg_get/free_small routines; but we keep them separate anyway,
 * in case a different allocation strategy is desirable for large chunks.
 */

EXTERN void FAR * jpeg_get_large JPP((j_common_ptr cinfo,size_t sizeofobject));
EXTERN void jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
				 size_t sizeofobject));

/*
 * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
 * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
 * matter, but that case should never come into play).  This macro is needed
 * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
 * On those machines, we expect that jconfig.h will provide a proper value.
 * On machines with 32-bit flat address spaces, any large constant may be used.
 *
 * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
 * size_t and will be a multiple of sizeof(align_type).
 */

#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
#define MAX_ALLOC_CHUNK  1000000000L
#endif

/*
 * This routine computes the total space still available for allocation by
 * jpeg_get_large.  If more space than this is needed, backing store will be
 * used.  NOTE: any memory already allocated must not be counted.
 *
 * There is a minimum space requirement, corresponding to the minimum
 * feasible buffer sizes; jmemmgr.c will request that much space even if
 * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
 * all working storage in memory, is also passed in case it is useful.
 * Finally, the total space already allocated is passed.  If no better
 * method is available, cinfo->mem->max_memory_to_use - already_allocated
 * is often a suitable calculation.
 *
 * It is OK for jpeg_mem_available to underestimate the space available
 * (that'll just lead to more backing-store access than is really necessary).
 * However, an overestimate will lead to failure.  Hence it's wise to subtract
 * a slop factor from the true available space.  5% should be enough.
 *
 * On machines with lots of virtual memory, any large constant may be returned.
 * Conversely, zero may be returned to always use the minimum amount of memory.
 */

EXTERN long jpeg_mem_available JPP((j_common_ptr cinfo,
				    long min_bytes_needed,
				    long max_bytes_needed,
				    long already_allocated));


/*
 * This structure holds whatever state is needed to access a single
 * backing-store object.  The read/write/close method pointers are called
 * by jmemmgr.c to manipulate the backing-store object; all other fields
 * are private to the system-dependent backing store routines.
 */

#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */

#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */

typedef unsigned short XMSH;	/* type of extended-memory handles */
typedef unsigned short EMSH;	/* type of expanded-memory handles */

typedef union {
  short file_handle;		/* DOS file handle if it's a temp file */
  XMSH xms_handle;		/* handle if it's a chunk of XMS */
  EMSH ems_handle;		/* handle if it's a chunk of EMS */
} handle_union;

#endif /* USE_MSDOS_MEMMGR */

typedef struct backing_store_struct * backing_store_ptr;

typedef struct backing_store_struct {
  /* Methods for reading/writing/closing this backing-store object */
  JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
				     backing_store_ptr info,
				     void FAR * buffer_address,
				     long file_offset, long byte_count));
  JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info,
				      void FAR * buffer_address,
				      long file_offset, long byte_count));
  JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info));

  /* Private fields for system-dependent backing-store management */
#ifdef USE_MSDOS_MEMMGR
  /* For the MS-DOS manager (jmemdos.c), we need: */
  handle_union handle;		/* reference to backing-store storage object */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#ifdef WIN32
  FILE * temp_file;		/* stdio reference to temp file needed for Win32*/
#endif
#else
  /* For a typical implementation with temp files, we need: */
  FILE * temp_file;		/* stdio reference to temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
#endif
} backing_store_info;

/*
 * Initial opening of a backing-store object.  This must fill in the
 * read/write/close pointers in the object.  The read/write routines
 * may take an error exit if the specified maximum file size is exceeded.
 * (If jpeg_mem_available always returns a large value, this routine can
 * just take an error exit.)
 */

EXTERN void jpeg_open_backing_store JPP((j_common_ptr cinfo,
					 backing_store_ptr info,
					 long total_bytes_needed));


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  jpeg_mem_init will be called before anything is
 * allocated (and, therefore, nothing in cinfo is of use except the error
 * manager pointer).  It should return a suitable default value for
 * max_memory_to_use; this may subsequently be overridden by the surrounding
 * application.  (Note that max_memory_to_use is only important if
 * jpeg_mem_available chooses to consult it ... no one else will.)
 * jpeg_mem_term may assume that all requested memory has been freed and that
 * all opened backing-store objects have been closed.
 */

EXTERN long jpeg_mem_init JPP((j_common_ptr cinfo));
EXTERN void jpeg_mem_term JPP((j_common_ptr cinfo));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jpegint.h ===
/*
 * jpegint.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides common declarations for the various JPEG modules.
 * These declarations are considered internal to the JPEG library; most
 * applications using the library shouldn't need to include this file.
 */


/* Declarations for both compression & decompression */

#ifdef NIFTY
/* used in jdcolor.cc for the rgb <--> PhotoYCC conversion. */
typedef struct
{
  short g, b;
} coef_c1;
 
typedef struct
{
  short r, g;
} coef_c2;
 
#endif


typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */


/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
				   JSAMPIMAGE input_buf));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* perhaps this should be an array??? */
  JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
			      jpeg_component_info * compptr,
			      JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
			      JDIMENSION start_row, JDIMENSION start_col,
			      JDIMENSION num_blocks));
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  /* write_any_marker is exported for use by applications */
  /* Probably only COM and APPn markers should be written */
  JMETHOD(void, write_any_marker, (j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
};


/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
};

/* Input control module */
struct jpeg_input_controller {
  JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
  JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean has_multiple_scans;	/* True if file has multiple scans */
  boolean eoi_reached;		/* True when EOI has been consumed */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
				 JSAMPIMAGE output_buf));
  /* Pointer to array of coefficient virtual arrays, or NULL if none */
  jvirt_barray_ptr *coef_arrays;
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_consume_input:
   * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;
  /* Application-overridable marker processing methods */
  jpeg_marker_parser_method process_COM;
  jpeg_marker_parser_method process_APPn[16];

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
				JBLOCKROW *MCU_data));
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
};


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))


/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_compress_master	jICompress
#define jinit_c_master_control	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_phuff_encoder	jIPHEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_input_controller	jIInCtlr
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_phuff_decoder	jIPHDecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jzero_far		jZeroFar
#define jpeg_zigzag_order	jZIGTable
#define jpeg_natural_order	jZAGTable
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Compression module initialization routines */
EXTERN void jinit_compress_master JPP((j_compress_ptr cinfo));
EXTERN void jinit_c_master_control JPP((j_compress_ptr cinfo,
					boolean transcode_only));
EXTERN void jinit_c_main_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN void jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN void jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN void jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN void jinit_phuff_encoder JPP((j_compress_ptr cinfo));
EXTERN void jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN void jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN void jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_input_controller JPP((j_decompress_ptr cinfo));
EXTERN void jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN void jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN void jinit_phuff_decoder JPP((j_decompress_ptr cinfo));
EXTERN void jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN void jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN void jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN void jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN void jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN void jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN void jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN long jdiv_round_up JPP((long a, long b));
EXTERN long jround_up JPP((long a, long b));
EXTERN void jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				   JSAMPARRAY output_array, int dest_row,
				   int num_rows, JDIMENSION num_cols));
EXTERN void jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				 JDIMENSION num_blocks));
EXTERN void jzero_far JPP((void FAR * target, size_t bytestozero));
/* Constant tables in jutils.c */
extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */

/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jpegapi.h ===
/* jpegapi.h -- header file for JPEG image compression interface.
 * Written by Ajai Sehgal
 * (c) Copyright Microsoft Corporation
 *
 *  08-27-1997 (kurtgeis) Removed dependency on Gromit/Fletcher funky data
 *  types and includes.
 */

#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"     /* get library error codes too */

#include "jmemfile.h"


#ifndef __JPEGAPI_H__
#define __JPEGAPI_H__

#define ALIGNIT(ap,t) \
    ((((size_t)(ap))+(sizeof(t)<8?3:7)) & (sizeof(t)<8?~3:~7))

class THROWN
{
public:
    // Default constructor
    THROWN()
    {
        m_hr = S_OK;
    }

    // THROWN( HRESULT)
    //
    // Purpose:
    //      Construct a throw object for an hresult.
    //
    THROWN( HRESULT hr )
    {
        m_hr = hr;
    }

    HRESULT Hr() { return m_hr; }       // The HRESULT thrown

 private:
    HRESULT m_hr;                       // Associated HResult;
};

// Destroy the JPEG handle
HRESULT DestroyJPEGCompressHeader(HANDLE hJpegC);
HRESULT DestroyJPEGDecompressHeader(HANDLE hJpegD);

// Takes the parameters for a tile write and creates a JPEG table for it
HRESULT JPEGCompressHeader(BYTE *prgbJPEGBuf, UINT tuQuality, ULONG *pcbOut, HANDLE *phJpegC, J_COLOR_SPACE ColorSpace );
HRESULT JPEGDecompressHeader(BYTE *prgbJPEGBuf, HANDLE *phJpegD, ULONG ulBufferSize );

// Takes a raw RGBA image buffer and spits back a JPEG data stream.
HRESULT JPEGFromRGBA(BYTE *prgbImage, BYTE *prgbJPEGBuf,UINT tuQuality, ULONG *pcbOut, HANDLE hJpegC,J_COLOR_SPACE ColorSpace, UINT nWidth, UINT nHeight );

// Takes a JPEG data stream and spits back a raw RGBA image buffer.
// iraklis's comment: the second argument is the RGBA buffer to be
// loaded with the decompressed tile; we are
// asserting that it is of the right size (i.e. sizeof (TIL))
HRESULT RGBAFromJPEG(BYTE *prgbJPEG, BYTE *prgbImage, HANDLE hJpegD, ULONG ulBufferSize, BYTE bJPEGConversions, ULONG *pulReturnedNumChannels, UINT nWidth, UINT nHeight );

HRESULT
GetJPEGHeaderFields(
    HANDLE  hJpegC,
    UINT    *pWidth,
    UINT    *pHeight,
    INT     *pNumComponents,
    J_COLOR_SPACE   *pColorSpace
    );

BOOL
WINAPI
Win32DIBFromJPEG(
    BYTE    *prgbJPEG,
    ULONG   ulBufferSize,
    LPBITMAPINFO  pbmi,
    HBITMAP *phBitmap ,
    PVOID       *ppvBits
    );

#endif  // __JPEGAPI_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jquant1.cpp ===
/*
 * jquant1.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 1-pass color quantization (color mapping) routines.
 * These routines provide mapping to a fixed color map using equally spaced
 * color values.  Optional Floyd-Steinberg or ordered dithering is available.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_1PASS_SUPPORTED


/*
 * The main purpose of 1-pass quantization is to provide a fast, if not very
 * high quality, colormapped output capability.  A 2-pass quantizer usually
 * gives better visual quality; however, for quantized grayscale output this
 * quantizer is perfectly adequate.  Dithering is highly recommended with this
 * quantizer, though you can turn it off if you really want to.
 *
 * In 1-pass quantization the colormap must be chosen in advance of seeing the
 * image.  We use a map consisting of all combinations of Ncolors[i] color
 * values for the i'th component.  The Ncolors[] values are chosen so that
 * their product, the total number of colors, is no more than that requested.
 * (In most cases, the product will be somewhat less.)
 *
 * Since the colormap is orthogonal, the representative value for each color
 * component can be determined without considering the other components;
 * then these indexes can be combined into a colormap index by a standard
 * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
 * can be precalculated and stored in the lookup table colorindex[].
 * colorindex[i][j] maps pixel value j in component i to the nearest
 * representative value (grid plane) for that component; this index is
 * multiplied by the array stride for component i, so that the
 * index of the colormap entry closest to a given pixel value is just
 *    sum( colorindex[component-number][pixel-component-value] )
 * Aside from being fast, this scheme allows for variable spacing between
 * representative values with no additional lookup cost.
 *
 * If gamma correction has been applied in color conversion, it might be wise
 * to adjust the color grid spacing so that the representative colors are
 * equidistant in linear space.  At this writing, gamma correction is not
 * implemented by jdcolor, so nothing is done here.
 */


/* Declarations for ordered dithering.
 *
 * We use a standard 16x16 ordered dither array.  The basic concept of ordered
 * dithering is described in many references, for instance Dale Schumacher's
 * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
 * In place of Schumacher's comparisons against a "threshold" value, we add a
 * "dither" value to the input pixel and then round the result to the nearest
 * output value.  The dither value is equivalent to (0.5 - threshold) times
 * the distance between output values.  For ordered dithering, we assume that
 * the output colors are equally spaced; if not, results will probably be
 * worse, since the dither may be too much or too little at a given point.
 *
 * The normal calculation would be to form pixel value + dither, range-limit
 * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
 * We can skip the separate range-limiting step by extending the colorindex
 * table in both directions.
 */

#define ODITHER_SIZE  16	/* dimension of dither matrix */
/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */

typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];

static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
  /* Bayer's order-4 dither array.  Generated by the code given in
   * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
   * The values in this array must range from 0 to ODITHER_CELLS-1.
   */
  {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
  { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
  {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
  { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
  {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
  { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
  {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
  { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
  {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
  { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
  {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
  { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
  {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
  { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
  {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
  { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
};


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array is indexed [component#][position].
 * We provide (#columns + 2) entries per component; the extra entry at each
 * end saves us from special-casing the first and last pixels.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

#define MAX_Q_COMPS 4		/* max components I can handle */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Initially allocated colormap is saved here */
  JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
  int sv_actual;		/* number of entries in use */

  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
  /* colorindex[i][j] = index of color closest to pixel value j in component i,
   * premultiplied as described above.  Since colormap indexes must fit into
   * JSAMPLEs, the entries of this array will too.
   */
  boolean is_padded;		/* is the colorindex padded for odither? */

  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */

  /* Variables for ordered dithering */
  int row_index;		/* cur row's vertical index in dither matrix */
  ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Policy-making subroutines for create_colormap and create_colorindex.
 * These routines determine the colormap to be used.  The rest of the module
 * only assumes that the colormap is orthogonal.
 *
 *  * select_ncolors decides how to divvy up the available colors
 *    among the components.
 *  * output_value defines the set of representative values for a component.
 *  * largest_input_value defines the mapping from input values to
 *    representative values for a component.
 * Note that the latter two routines may impose different policies for
 * different components, though this is not currently done.
 */


LOCAL int
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
  int nc = cinfo->out_color_components; /* number of color components */
  int max_colors = cinfo->desired_number_of_colors;
  int total_colors, iroot, i, j;
  boolean changed;
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
  do {
    iroot++;
    temp = iroot;		/* set temp = iroot ** nc */
    for (i = 1; i < nc; i++)
      temp *= iroot;
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
  iroot--;			/* now iroot = floor(root) */

  /* Must have at least 2 color values per component */
  if (iroot < 2)
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

  /* Initialize to iroot color values for each component */
  total_colors = 1;
  for (i = 0; i < nc; i++) {
    Ncolors[i] = iroot;
    total_colors *= iroot;
  }
  /* We may be able to increment the count for one or more components without
   * exceeding max_colors, though we know not all can be incremented.
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
    for (i = 0; i < nc; i++) {
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
      if (temp > (long) max_colors)
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
      total_colors = (int) temp;
      changed = TRUE;
    }
  } while (changed);

  return total_colors;
}


LOCAL int
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
}


LOCAL int
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
}


/*
 * Create the colormap.
 */

LOCAL void
create_colormap (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blkdist / nci;
    for (j = 0; j < nci; j++) {
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
	  colormap[i][ptr+k] = (JSAMPLE) val;
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
  cquantize->sv_actual = total_colors;
}


/*
 * Create the color index table.
 */

LOCAL void
create_colorindex (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPROW indexptr;
  int i,j,k, nci, blksize, val, pad;

  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
    pad = MAXJSAMPLE*2;
    cquantize->is_padded = TRUE;
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blksize / nci;

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
      cquantize->colorindex[i] += MAXJSAMPLE;

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
    val = 0;
    k = largest_input_value(cinfo, i, 0, nci-1);
    for (j = 0; j <= MAXJSAMPLE; j++) {
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
    }
    /* Pad at both ends if necessary */
    if (pad)
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}


/*
 * Create an ordered-dither array for a component having ncolors
 * distinct output values.
 */

LOCAL ODITHER_MATRIX_PTR
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(ODITHER_MATRIX));
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
  for (j = 0; j < ODITHER_SIZE; j++) {
    for (k = 0; k < ODITHER_SIZE; k++) {
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
    }
  }
  return odither;
}


/*
 * Create the ordered-dither tables.
 * Components having the same number of representative colors may 
 * share a dither table.
 */

LOCAL void
create_odither_tables (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    odither = NULL;		/* search for matching prior component */
    for (j = 0; j < i; j++) {
      if (nci == cquantize->Ncolors[j]) {
	odither = cquantize->odither[j];
	break;
      }
    }
    if (odither == NULL)	/* need a new table? */
      odither = make_odither_array(cinfo, nci);
    cquantize->odither[i] = odither;
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF void
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colorindex = cquantize->colorindex;
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode = 0;
      for (ci = 0; ci < nc; ci++) {
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF void
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF void
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      colorindex_ci = cquantize->colorindex[ci];
      dither = cquantize->odither[ci][row_index];
      col_index = 0;

      for (col = width; col > 0; col--) {
	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
	 * select output value, accumulate into output code for this pixel.
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
	input_ptr += nc;
	output_ptr++;
	col_index = (col_index + 1) & ODITHER_MASK;
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF void
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int * dither0;		/* points to active row of dither matrix */
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    row_index = cquantize->row_index;
    input_ptr = input_buf[row];
    output_ptr = output_buf[row];
    dither0 = cquantize->odither[0][row_index];
    dither1 = cquantize->odither[1][row_index];
    dither2 = cquantize->odither[2][row_index];
    col_index = 0;

    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF void
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register LOCFSERROR cur;	/* current error or pixel value */
  LOCFSERROR belowerr;		/* error for pixel below cur */
  LOCFSERROR bpreverr;		/* error for below/prev col */
  LOCFSERROR bnexterr;		/* error for below/next col */
  LOCFSERROR delta;
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      if (cquantize->on_odd_row) {
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
	output_ptr += width-1;
	dir = -1;
	dirnc = -nc;
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
      } else {
	/* work left to right in this row */
	dir = 1;
	dirnc = nc;
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
      }
      colorindex_ci = cquantize->colorindex[ci];
      colormap_ci = cquantize->sv_colormap[ci];
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;

      for (col = width; col > 0; col--) {
	/* cur holds the error propagated from the previous pixel on the
	 * current line.  Add the error propagated from the previous line
	 * to form the complete error correction term for this pixel, and
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
	cur = GETJSAMPLE(range_limit[cur]);
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
	*output_ptr += (JSAMPLE) pixcode;
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
	delta = cur * 2;
	cur += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr + cur);
	cur += delta;		/* form error * 5 */
	bpreverr = belowerr + cur;
	belowerr = bnexterr;
	cur += delta;		/* form error * 7 */
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
	output_ptr += dir;	/* advance output ptr to next column */
	errorptr += dir;	/* advance errorptr to current column */
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
  }
}


/*
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL void
alloc_fs_workspace (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
  for (i = 0; i < cinfo->out_color_components; i++) {
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}


/*
 * Initialize for one-pass color quantization.
 */

METHODDEF void
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
  cinfo->actual_number_of_colors = cquantize->sv_actual;

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = color_quantize3;
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = quantize3_ord_dither;
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
    cquantize->row_index = 0;	/* initialize state for ordered dither */
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
      create_colorindex(cinfo);
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
      create_odither_tables(cinfo);
    break;
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
      alloc_fs_workspace(cinfo);
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
    for (i = 0; i < cinfo->out_color_components; i++)
      jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
    break;
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }
}


/*
 * Finish up at the end of the pass.
 */

METHODDEF void
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}


/*
 * Switch to a new external colormap between output passes.
 * Shouldn't get to this module!
 */

METHODDEF void
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
}


/*
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL void
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
  cquantize->pub.finish_pass = finish_pass_1_quant;
  cquantize->pub.new_color_map = new_color_map_1_quant;
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);

  /* Allocate Floyd-Steinberg workspace now if requested.
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
    alloc_fs_workspace(cinfo);
}

#endif /* QUANT_1PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jversion.h ===
/*
 * jversion.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains software version identification.
 */


#define JVERSION	"6  2-Aug-95"

#define JCOPYRIGHT	"Copyright (C) 1995, Thomas G. Lane"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jutils.cpp ===
/*
 * jutils.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains tables and miscellaneous utility routines needed
 * for both compression and decompression.
 * Note we prefix all global names with "j" to minimize conflicts with
 * a surrounding application.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
 * of a DCT block read in natural order (left to right, top to bottom).
 */

const int jpeg_zigzag_order[DCTSIZE2] = {
   0,  1,  5,  6, 14, 15, 27, 28,
   2,  4,  7, 13, 16, 26, 29, 42,
   3,  8, 12, 17, 25, 30, 41, 43,
   9, 11, 18, 24, 31, 40, 44, 53,
  10, 19, 23, 32, 39, 45, 52, 54,
  20, 22, 33, 38, 46, 51, 55, 60,
  21, 34, 37, 47, 50, 56, 59, 61,
  35, 36, 48, 49, 57, 58, 62, 63
};

/*
 * jpeg_natural_order[i] is the natural-order position of the i'th element
 * of zigzag order.
 *
 * When reading corrupted data, the Huffman decoders could attempt
 * to reference an entry beyond the end of this array (if the decoded
 * zero run length reaches past the end of the block).  To prevent
 * wild stores without adding an inner-loop test, we put some extra
 * "63"s after the real entries.  This will cause the extra coefficient
 * to be stored in location 63 of the block, not somewhere random.
 * The worst case would be a run-length of 15, which means we need 16
 * fake entries.
 */

const int jpeg_natural_order[DCTSIZE2+16] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63,
 63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 63, 63, 63, 63, 63, 63, 63, 63
};


/*
 * Arithmetic utilities
 */

GLOBAL long
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
}


GLOBAL long
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
  return a - (a % b);
}


/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines below do it the hard way.  (The performance cost
 * is not all that great, because these routines aren't very heavily used.)
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case, define if we can */
#ifdef USE_FMEM
#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#endif
#endif


GLOBAL void
jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
		   JSAMPARRAY output_array, int dest_row,
		   int num_rows, JDIMENSION num_cols)
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
  output_array += dest_row;

  for (row = num_rows; row > 0; row--) {
    inptr = *input_array++;
    outptr = *output_array++;
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}


GLOBAL void
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
#else
  register JCOEFPTR inptr, outptr;
  register long count;

  inptr = (JCOEFPTR) input_row;
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}


GLOBAL void
jzero_far (void FAR * target, size_t bytestozero)
/* Zero out a chunk of FAR memory. */
/* This might be sample-array data, block-array data, or alloc_large data. */
{
#ifdef FMEMZERO
  FMEMZERO(target, bytestozero);
#else
  register char FAR * ptr = (char FAR *) target;
  register size_t count;

  for (count = bytestozero; count > 0; count--) {
    *ptr++ = 0;
  }
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jpeglib.h ===
/*
 * jpeglib.h
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the application interface for the JPEG library.
 * Most applications using the library need only include this file,
 * and perhaps jerror.h if they want to know the exact error codes.
 */
/* "@(#)jpeglib.h	1.5 11:41:08 09/04/96" */

#ifndef JPEGLIB_H
#define JPEGLIB_H

#ifdef WIN32

#ifdef	__cplusplus
extern "C" {
#endif

#endif

/*
 * First we include the configuration files that record how this
 * installation of the JPEG library is set up.  jconfig.h can be
 * generated automatically for many systems.  jmorecfg.h contains
 * manual configuration options that most people need not worry about.
 */

#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
#include "jconfig.h"		/* widely used configuration options */
#endif
#include "jmorecfg.h"		/* seldom changed options */


/* Version ID for the JPEG library.
 * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
 */

#define JPEG_LIB_VERSION  60	/* Version 6 */


/* Various constants determining the sizes of things.
 * All of these are specified by the JPEG standard, so don't change them
 * if you want to be compatible.
 */

#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
/* Unfortunately, some bozo at Adobe saw no reason to be bound by the standard;
 * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.
 * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
 * to handle it.  We even let you do this from the jconfig.h file.  However,
 * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
 * sometimes emits noncompliant files doesn't mean you should too.
 */
#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
#ifndef D_MAX_BLOCKS_IN_MCU
#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
#endif


/* This macro is used to declare a "method", that is, a function pointer.
 * We want to supply prototype parameters if the compiler can cope.
 * Note that the arglist parameter must be parenthesized!
 */

#ifdef HAVE_PROTOTYPES
#define JMETHOD(type,methodname,arglist) type (__cdecl *methodname) arglist
#else
#define JMETHOD(type,methodname,arglist) type (__cdecl *methodname) ()
#endif


/* Data structures for images (arrays of samples and of DCT coefficients).
 * On 80x86 machines, the image arrays are too big for near pointers,
 * but the pointer arrays can fit in near memory.
 */

typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */

typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */


/* Types for JPEG compression parameters and working tables. */


/* DCT coefficient quantization tables. */

typedef struct {
  /* This field directly represents the contents of a JPEG DQT marker.
   * Note: the values are always given in zigzag order.
   */
  UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JQUANT_TBL;


/* Huffman coding tables. */

typedef struct {
  /* These two fields directly represent the contents of a JPEG DHT marker */
  UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
				/* length k bits; bits[0] is unused */
  UINT8 huffval[256];		/* The symbols, in order of incr code length */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JHUFF_TBL;


/* Basic info about one component (color channel). */

typedef struct {
  /* These values are fixed over the whole image. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOF marker. */
  int component_id;		/* identifier for this component (0..255) */
  int component_index;		/* its index in SOF or cinfo->comp_info[] */
  int h_samp_factor;		/* horizontal sampling factor (1..4) */
  int v_samp_factor;		/* vertical sampling factor (1..4) */
  int quant_tbl_no;		/* quantization table selector (0..3) */
  /* These values may vary between scans. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOS marker. */
  /* The decompressor output side may not use these variables. */
  int dc_tbl_no;		/* DC entropy table selector (0..3) */
  int ac_tbl_no;		/* AC entropy table selector (0..3) */
  
  /* Remaining fields should be treated as private by applications. */
  
  /* These values are computed during compression or decompression startup: */
  /* Component's size in DCT blocks.
   * Any dummy blocks added to complete an MCU are not counted; therefore
   * these values do not depend on whether a scan is interleaved or not.
   */
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;
  /* Size of a DCT block in samples.  Always DCTSIZE for compression.
   * For decompression this is the size of the output from one DCT block,
   * reflecting any scaling we choose to apply during the IDCT step.
   * Values of 1,2,4,8 are likely to be supported.  Note that different
   * components may receive different IDCT scalings.
   */
  int DCT_scaled_size;
  /* The downsampled dimensions are the component's actual, unpadded number
   * of samples at the main buffer (preprocessing/compression interface), thus
   * downsampled_width = ceil(image_width * Hi/Hmax)
   * and similarly for height.  For decompression, IDCT scaling is included, so
   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
   */
  JDIMENSION downsampled_width;	 /* actual width in samples */
  JDIMENSION downsampled_height; /* actual height in samples */
  /* This flag is used only for decompression.  In cases where some of the
   * components will be ignored (eg grayscale output from YCbCr image),
   * we can skip most computations for the unused components.
   */
  boolean component_needed;	/* do we need the value of this component? */

  /* These values are computed before starting a scan of the component. */
  /* The decompressor output side may not use these variables. */
  int MCU_width;		/* number of blocks per MCU, horizontally */
  int MCU_height;		/* number of blocks per MCU, vertically */
  int MCU_blocks;		/* MCU_width * MCU_height */
  int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
  int last_col_width;		/* # of non-dummy blocks across in last MCU */
  int last_row_height;		/* # of non-dummy blocks down in last MCU */

  /* Saved quantization table for component; NULL if none yet saved.
   * See jdinput.c comments about the need for this information.
   * This field is not currently used by the compressor.
   */
  JQUANT_TBL * quant_table;

  /* Private per-component storage for DCT or IDCT subsystem. */
  void * dct_table;
} jpeg_component_info;


/* The script for encoding a multiple-scan file is an array of these: */

typedef struct {
  int comps_in_scan;		/* number of components encoded in this scan */
  int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
  int Ss, Se;			/* progressive JPEG spectral selection parms */
  int Ah, Al;			/* progressive JPEG successive approx. parms */
} jpeg_scan_info;


/* Known color spaces. */

typedef enum {
	JCS_UNKNOWN,		/* error/unspecified */
	JCS_GRAYSCALE,		/* monochrome */
	JCS_RGB,		/* red/green/blue */
	JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
	JCS_CMYK,		/* C/M/Y/K */
#ifdef NIFTY
    JCS_YCC,		/* PhotoYCC */
 	JCS_RGBA,		/* RGB-Alpha */
	JCS_YCbCrA,		/* Y/Cb/Cr/Alpha */
 	JCS_RGBA_LEGACY,		/* RGB-Alpha with the color inversion bug.*/
	JCS_YCbCrA_LEGACY,		/* Y/Cb/Cr/Alpha with the color inversion bug.*/
	JCS_YCCA,		/* PhotoYCC-Alpha */
#endif
	JCS_YCCK,		/* Y/Cb/Cr/K */
#ifdef WIAJPEG
    JCS_BGR
#endif
} J_COLOR_SPACE;

/* DCT/IDCT algorithm options. */

typedef enum {
	JDCT_ISLOW,		/* slow but accurate integer algorithm */
	JDCT_IFAST,		/* faster, less accurate integer method */
	JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
} J_DCT_METHOD;

#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
#define JDCT_DEFAULT  JDCT_ISLOW
#endif
#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
#define JDCT_FASTEST  JDCT_IFAST
#endif

/* Dithering options for decompression. */

typedef enum {
	JDITHER_NONE,		/* no dithering */
	JDITHER_ORDERED,	/* simple ordered dither */
	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
} J_DITHER_MODE;


/* Common fields between JPEG compression and decompression master structs. */

#define jpeg_common_fields \
  struct jpeg_error_mgr * err;	/* Error handler module */\
  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
  boolean is_decompressor;	/* so common code can tell which is which */\
  int global_state		/* for checking call sequence validity */

/* Routines that are to be used by both halves of the library are declared
 * to receive a pointer to this structure.  There are no actual instances of
 * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
 */
struct jpeg_common_struct {
  jpeg_common_fields;		/* Fields common to both master struct types */
  /* Additional fields follow in an actual jpeg_compress_struct or
   * jpeg_decompress_struct.  All three structs must agree on these
   * initial fields!  (This would be a lot cleaner in C++.)
   */
};

typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;


/* Master record for a compression instance */

struct jpeg_compress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */

  /* Destination for compressed data */
  struct jpeg_destination_mgr * dest;

  /* Description of source image --- these fields must be filled in by
   * outer application before starting compression.  in_color_space must
   * be correct before you can even call jpeg_set_defaults().
   */

  JDIMENSION image_width;	/* input image width */
  JDIMENSION image_height;	/* input image height */
  int input_components;		/* # of color components in input image */
  J_COLOR_SPACE in_color_space;	/* colorspace of input image */

  double input_gamma;		/* image gamma of input image */

  /* Compression parameters --- these fields must be set before calling
   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
   * initialize everything to reasonable defaults, then changing anything
   * the application specifically wants to change.  That way you won't get
   * burnt when new parameters are added.  Also note that there are several
   * helper routines to simplify changing parameters.
   */

  int data_precision;		/* bits of precision in image data */

  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */
  
  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */
  
  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */
  
  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  int num_scans;		/* # of entries in scan_info array */
  const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
  /* The default value of scan_info is NULL, which causes a single-scan
   * sequential JPEG file to be emitted.  To create a multi-scan file,
   * set num_scans and scan_info to point to an array of scan definitions.
   */

  boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
  boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
  int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
  J_DCT_METHOD dct_method;	/* DCT algorithm selector */

  /* The restart interval can be specified in absolute MCUs by setting
   * restart_interval, or in MCU rows by setting restart_in_rows
   * (in which case the correct restart_interval will be figured
   * for each scan).
   */
  unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
  int restart_in_rows;		/* if > 0, MCU rows per restart interval */

#ifdef NIFTY
	/* special for NIFTY. The number of bytes in a compression/decompression 
		memory buffer. */
  int bytes_in_buffer;
#endif

  /* Parameters controlling emission of special markers. */

  boolean write_JFIF_header;	/* should a JFIF marker be written? */
  /* These three values are not used by the JPEG code, merely copied */
  /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
  /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
  /* ratio is defined by X_density/Y_density even when density_unit=0. */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean write_Adobe_marker;	/* should an Adobe marker be written? */
  
  /* State variable: index of next scanline to be written to
   * jpeg_write_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (next_scanline < image_height)".
   */

  JDIMENSION next_scanline;	/* 0 .. image_height-1  */

  /* Remaining fields are known throughout compressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during compression startup
   */
  boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
  /* The coefficient controller receives data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCTSIZE sample rows of each component in an
   * "iMCU" (interleaved MCU) row.
   */
  
  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */
  
  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
  
  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[C_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /*
   * Links to compression subobjects (methods and private variables of modules)
   */
  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
};


/* Master record for a decompression instance */

struct jpeg_decompress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */

  /* Source of compressed data */
  struct jpeg_source_mgr * src;

  /* Basic description of image --- filled in by jpeg_read_header(). */
  /* Application may inspect these values to decide how to process image. */

  JDIMENSION image_width;	/* nominal image width (from SOF marker) */
  JDIMENSION image_height;	/* nominal image height */
  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  /* Decompression processing parameters --- these fields must be set before
   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
   * them to default values.
   */

  J_COLOR_SPACE out_color_space; /* colorspace for output */

  unsigned int scale_num, scale_denom; /* fraction by which to scale image */

  double output_gamma;		/* image gamma wanted in output */

  boolean buffered_image;	/* TRUE=multiple output passes */
  boolean raw_data_out;		/* TRUE=downsampled data wanted */

  J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
  boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
  boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */

  boolean quantize_colors;	/* TRUE=colormapped output wanted */
  /* the following are ignored if not quantize_colors: */
  J_DITHER_MODE dither_mode;	/* type of color dithering to use */
  boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
  int desired_number_of_colors;	/* max # colors to use in created colormap */
  /* these are significant only in buffered-image mode: */
  boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
  boolean enable_external_quant;/* enable future use of external colormap */
  boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */

  /* Description of actual output image that will be returned to application.
   * These fields are computed by jpeg_start_decompress().
   * You can also use jpeg_calc_output_dimensions() to determine these values
   * in advance of calling jpeg_start_decompress().
   */

  JDIMENSION output_width;	/* scaled image width */
  JDIMENSION output_height;	/* scaled image height */
  int out_color_components;	/* # of color components in out_color_space */
  int output_components;	/* # of color components returned */
  /* output_components is 1 (a colormap index) when quantizing colors;
   * otherwise it equals out_color_components.
   */
  int rec_outbuf_height;	/* min recommended height of scanline buffer */
  /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
   * high, space and time will be wasted due to unnecessary data copying.
   * Usually rec_outbuf_height will be 1 or 2, at most 4.
   */

  /* When quantizing colors, the output colormap is described by these fields.
   * The application can supply a colormap by setting colormap non-NULL before
   * calling jpeg_start_decompress; otherwise a colormap is created during
   * jpeg_start_decompress or jpeg_start_output.
   * The map has out_color_components rows and actual_number_of_colors columns.
   */
  int actual_number_of_colors;	/* number of entries in use */
  JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */

  /* State variables: these variables indicate the progress of decompression.
   * The application may examine these but must not modify them.
   */

  /* Row index of next scanline to be read from jpeg_read_scanlines().
   * Application may use this to control its processing loop, e.g.,
   * "while (output_scanline < output_height)".
   */
  JDIMENSION output_scanline;	/* 0 .. output_height-1  */

  /* Current input scan number and number of iMCU rows completed in scan.
   * These indicate the progress of the decompressor input side.
   */
  int input_scan_number;	/* Number of SOS markers seen so far */
  JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */

  /* The "output scan number" is the notional scan being displayed by the
   * output side.  The decompressor will not allow output scan/row number
   * to get ahead of input scan/row, but it can fall arbitrarily far behind.
   */
  int output_scan_number;	/* Nominal scan number being displayed */
  JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */

  /* Current progression status.  coef_bits[c][i] indicates the precision
   * with which component c's DCT coefficient i (in zigzag order) is known.
   * It is -1 when no data has yet been received, otherwise it is the point
   * transform (shift) value for the most recent scan of the coefficient
   * (thus, 0 at completion of the progression).
   * This pointer is NULL when reading a non-progressive file.
   */
  int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */

  /* Internal JPEG parameters --- the application usually need not look at
   * these fields.  Note that the decompressor output side may not use
   * any parameters that can change between scans.
   */

  /* Quantization and Huffman tables are carried forward across input
   * datastreams when processing abbreviated JPEG datastreams.
   */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  /* These parameters are never carried across datastreams, since they
   * are given in SOF/SOS markers or defined to be reset by SOI.
   */

  int data_precision;		/* bits of precision in image data */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */

  /* These fields record data obtained from optional markers recognized by
   * the JPEG library.
   */
  boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
  /* Data copied from JFIF marker: */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
  UINT8 Adobe_transform;	/* Color transform code from Adobe marker */

  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */

  /* Remaining fields are known throughout decompressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during decompression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
  /* The coefficient controller's input and output progress is measured in
   * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
   * in fully interleaved JPEG scans, but are used whether the scan is
   * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
   * rows of each component.  Therefore, the IDCT output contains
   * v_samp_factor*DCT_scaled_size sample rows of a component per iMCU row.
   */

  JSAMPLE * sample_range_limit; /* table for fast range-limiting */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   * Note that the decompressor output side must not use these fields.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[D_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /* This field is shared between entropy decoder and marker parser.
   * It is either zero or the code of a JPEG marker that has been
   * read from the data source, but has not yet been processed.
   */
  int unread_marker;

  /*
   * Links to decompression subobjects (methods, private variables of modules)
   */
  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_input_controller * inputctl;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};


/* "Object" declarations for JPEG modules that may be supplied or called
 * directly by the surrounding application.
 * As with all objects in the JPEG library, these structs only define the
 * publicly visible methods and state variables of a module.  Additional
 * private fields may exist after the public ones.
 */


/* Error handler object */

struct jpeg_error_mgr {
  /* Error exit handler: does not return to caller */
  JMETHOD(void, error_exit, (j_common_ptr cinfo));
  /* Conditionally emit a trace or warning message */
  JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
  /* Routine that actually outputs a trace or error message */
  JMETHOD(void, output_message, (j_common_ptr cinfo));
  /* Format a message string for the most recent JPEG error or message */
  JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
  /* Reset error state variables at start of a new image */
  JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
  
  /* The message ID code and any parameters are saved here.
   * A message can have one string parameter or up to 8 int parameters.
   */
  int msg_code;
#define JMSG_STR_PARM_MAX  80
  union {
    int i[8];
    char s[JMSG_STR_PARM_MAX];
  } msg_parm;
  
  /* Standard state variables for error facility */
  
  int trace_level;		/* max msg_level that will be displayed */
  
  /* For recoverable corrupt-data errors, we emit a warning message,
   * but keep going unless emit_message chooses to abort.  emit_message
   * should count warnings in num_warnings.  The surrounding application
   * can check for bad data by seeing if num_warnings is nonzero at the
   * end of processing.
   */
  long num_warnings;		/* number of corrupt-data warnings */

  /* These fields point to the table(s) of error message strings.
   * An application can change the table pointer to switch to a different
   * message list (typically, to change the language in which errors are
   * reported).  Some applications may wish to add additional error codes
   * that will be handled by the JPEG library error mechanism; the second
   * table pointer is used for this purpose.
   *
   * First table includes all errors generated by JPEG library itself.
   * Error code 0 is reserved for a "no such error string" message.
   */
  const char * const * jpeg_message_table; /* Library errors */
  int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
  /* Second table can be added by application (see cjpeg/djpeg for example).
   * It contains strings numbered first_addon_message..last_addon_message.
   */
  const char * const * addon_message_table; /* Non-library errors */
  int first_addon_message;	/* code for first string in addon table */
  int last_addon_message;	/* code for last string in addon table */
};


/* Progress monitor object */

struct jpeg_progress_mgr {
  JMETHOD(void, progress_monitor, (j_common_ptr cinfo));

  long pass_counter;		/* work units completed in this pass */
  long pass_limit;		/* total number of work units in this pass */
  int completed_passes;		/* passes completed so far */
  int total_passes;		/* total number of passes expected */
};


/* Data destination object for compression */

struct jpeg_destination_mgr {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */

  JMETHOD(void, init_destination, (j_compress_ptr cinfo));
  JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
  JMETHOD(void, term_destination, (j_compress_ptr cinfo));
};


/* Data source object for decompression */

struct jpeg_source_mgr {
  const JOCTET * next_input_byte; /* => next byte to read from buffer */
  size_t bytes_in_buffer;	/* # of bytes remaining in buffer */

  JMETHOD(void, init_source, (j_decompress_ptr cinfo));
  JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
  JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
  JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
  JMETHOD(void, term_source, (j_decompress_ptr cinfo));
};


/* Memory manager object.
 * Allocates "small" objects (a few K total), "large" objects (tens of K),
 * and "really big" objects (virtual arrays with backing store if needed).
 * The memory manager does not allow individual objects to be freed; rather,
 * each created object is assigned to a pool, and whole pools can be freed
 * at once.  This is faster and more convenient than remembering exactly what
 * to free, especially where malloc()/free() are not too speedy.
 * NB: alloc routines never return NULL.  They exit to error_exit if not
 * successful.
 */

#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
#define JPOOL_NUMPOOLS	2

typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;


struct jpeg_memory_mgr {
  /* Method pointers */
  JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
				size_t sizeofobject));
  JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
				     size_t sizeofobject));
  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
				     JDIMENSION samplesperrow,
				     JDIMENSION numrows));
  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
				      JDIMENSION blocksperrow,
				      JDIMENSION numrows));
  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION samplesperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION blocksperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
					   jvirt_sarray_ptr ptr,
					   JDIMENSION start_row,
					   JDIMENSION num_rows,
					   boolean writable));
  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
					    jvirt_barray_ptr ptr,
					    JDIMENSION start_row,
					    JDIMENSION num_rows,
					    boolean writable));
  JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
  JMETHOD(void, self_destruct, (j_common_ptr cinfo));

  /* Limit on memory allocation for this JPEG object.  (Note that this is
   * merely advisory, not a guaranteed maximum; it only affects the space
   * used for virtual-array buffers.)  May be changed by outer application
   * after creating the JPEG object.
   */
  long max_memory_to_use;
};


/* Routine signature for application-supplied marker processing methods.
 * Need not pass marker code since it is stored in cinfo->unread_marker.
 */
typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));


/* Declarations for routines called by application.
 * The JPP macro hides prototype parameters from compilers that can't cope.
 * Note JPP requires double parentheses.
 */

#ifdef HAVE_PROTOTYPES
#define JPP(arglist)	arglist
#else
#define JPP(arglist)	()
#endif


/* Short forms of external names for systems with brain-damaged linkers.
 * We shorten external names to be unique in the first six letters, which
 * is good enough for all known systems.
 * (If your compiler itself needs names to be unique in less than 15 
 * characters, you are out of luck.  Get a better compiler.)
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_error		jStdError
#define jpeg_create_compress	jCreaCompress
#define jpeg_create_decompress	jCreaDecompress
#define jpeg_destroy_compress	jDestCompress
#define jpeg_destroy_decompress	jDestDecompress
#define jpeg_stdio_dest		jStdDest
#define jpeg_stdio_src		jStdSrc
#define jpeg_set_defaults	jSetDefaults
#define jpeg_set_colorspace	jSetColorspace
#define jpeg_default_colorspace	jDefColorspace
#define jpeg_set_quality	jSetQuality
#define jpeg_set_linear_quality	jSetLQuality
#define jpeg_add_quant_table	jAddQuantTable
#define jpeg_quality_scaling	jQualityScaling
#define jpeg_simple_progression	jSimProgress
#define jpeg_suppress_tables	jSuppressTables
#define jpeg_alloc_quant_table	jAlcQTable
#define jpeg_alloc_huff_table	jAlcHTable
#define jpeg_start_compress	jStrtCompress
#define jpeg_write_scanlines	jWrtScanlines
#define jpeg_finish_compress	jFinCompress
#define jpeg_write_raw_data	jWrtRawData
#define jpeg_write_marker	jWrtMarker
#define jpeg_write_tables	jWrtTables
#define jpeg_read_header	jReadHeader
#define jpeg_start_decompress	jStrtDecompress
#define jpeg_read_scanlines	jReadScanlines
#define jpeg_finish_decompress	jFinDecompress
#define jpeg_read_raw_data	jReadRawData
#define jpeg_has_multiple_scans	jHasMultScn
#define jpeg_start_output	jStrtOutput
#define jpeg_finish_output	jFinOutput
#define jpeg_input_complete	jInComplete
#define jpeg_new_colormap	jNewCMap
#define jpeg_consume_input	jConsumeInput
#define jpeg_calc_output_dimensions	jCalcDimensions
#define jpeg_set_marker_processor	jSetMarker
#define jpeg_read_coefficients	jReadCoefs
#define jpeg_write_coefficients	jWrtCoefs
#define jpeg_copy_critical_parameters	jCopyCrit
#define jpeg_abort_compress	jAbrtCompress
#define jpeg_abort_decompress	jAbrtDecompress
#define jpeg_abort		jAbort
#define jpeg_destroy		jDestroy
#define jpeg_resync_to_restart	jResyncRestart
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Default error-management setup */
EXTERN struct jpeg_error_mgr * __cdecl jpeg_std_error JPP((struct jpeg_error_mgr *err));

/* Initialization and destruction of JPEG compression objects */
/* NB: you must set up the error-manager BEFORE calling jpeg_create_xxx */
EXTERN void __cdecl jpeg_create_compress JPP((j_compress_ptr cinfo));
EXTERN void __cdecl jpeg_create_decompress JPP((j_decompress_ptr cinfo));
EXTERN void __cdecl jpeg_destroy_compress JPP((j_compress_ptr cinfo));
EXTERN void __cdecl jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));

/* Standard data source and destination managers: stdio streams. */
/* Caller is responsible for opening the file before and closing after. */
EXTERN void __cdecl jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
EXTERN void __cdecl jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));
#ifdef NIFTY
/* and for NIFTY, a pair for doing this to and from memory. */
EXTERN void __cdecl jpeg_mem_dest JPP((j_compress_ptr cinfo, JOCTET *buffer));
EXTERN void __cdecl jpeg_mem_src JPP((j_decompress_ptr cinfo, JOCTET *buffer, int bufsize));
#endif

/* Default parameter setup for compression */
EXTERN void __cdecl jpeg_set_defaults JPP((j_compress_ptr cinfo));
/* Compression parameter setup aids */
EXTERN void __cdecl jpeg_set_colorspace JPP((j_compress_ptr cinfo,
				     J_COLOR_SPACE colorspace));
EXTERN void __cdecl jpeg_default_colorspace JPP((j_compress_ptr cinfo));
EXTERN void __cdecl jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
				  boolean force_baseline));
EXTERN void __cdecl jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
					 int scale_factor,
					 boolean force_baseline));
EXTERN void __cdecl jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
				      const unsigned int *basic_table,
				      int scale_factor,
				      boolean force_baseline));
EXTERN int __cdecl jpeg_quality_scaling JPP((int quality));
EXTERN void __cdecl jpeg_simple_progression JPP((j_compress_ptr cinfo));
EXTERN void __cdecl jpeg_suppress_tables JPP((j_compress_ptr cinfo,
				      boolean suppress));
EXTERN JQUANT_TBL * __cdecl jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
EXTERN JHUFF_TBL * __cdecl jpeg_alloc_huff_table JPP((j_common_ptr cinfo));

/* Main entry points for compression */
EXTERN void __cdecl jpeg_start_compress JPP((j_compress_ptr cinfo,
				     boolean write_all_tables));
EXTERN JDIMENSION __cdecl jpeg_write_scanlines JPP((j_compress_ptr cinfo,
					    JSAMPARRAY scanlines,
					    JDIMENSION num_lines));
EXTERN void __cdecl jpeg_finish_compress JPP((j_compress_ptr cinfo));

/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
EXTERN JDIMENSION __cdecl jpeg_write_raw_data JPP((j_compress_ptr cinfo,
					   JSAMPIMAGE data,
					   JDIMENSION num_lines));

/* Write a special marker.  See libjpeg.doc concerning safe usage. */
EXTERN void __cdecl jpeg_write_marker JPP((j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));

/* Alternate compression function: just write an abbreviated table file */
EXTERN void __cdecl jpeg_write_tables JPP((j_compress_ptr cinfo));

/* Decompression startup: read start of JPEG datastream to see what's there */
EXTERN int __cdecl jpeg_read_header JPP((j_decompress_ptr cinfo,
				 boolean require_image));
/* Return value is one of: */
#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
#define JPEG_HEADER_OK		1 /* Found valid image datastream */
#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
/* If you pass require_image = TRUE (normal case), you need not check for
 * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
 * JPEG_SUSPENDED is only possible if you use a data source module that can
 * give a suspension return (the stdio source module doesn't).
 */

/* Main entry points for decompression */
EXTERN boolean __cdecl jpeg_start_decompress JPP((j_decompress_ptr cinfo));
EXTERN JDIMENSION __cdecl jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
					   JSAMPARRAY scanlines,
					   JDIMENSION max_lines));
EXTERN boolean __cdecl jpeg_finish_decompress JPP((j_decompress_ptr cinfo));

/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
EXTERN JDIMENSION __cdecl jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
					  JSAMPIMAGE data,
					  JDIMENSION max_lines));

/* Additional entry points for buffered-image mode. */
EXTERN boolean __cdecl jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
EXTERN boolean __cdecl jpeg_start_output JPP((j_decompress_ptr cinfo,
				      int scan_number));
EXTERN boolean __cdecl jpeg_finish_output JPP((j_decompress_ptr cinfo));
EXTERN boolean __cdecl jpeg_input_complete JPP((j_decompress_ptr cinfo));
EXTERN void __cdecl jpeg_new_colormap JPP((j_decompress_ptr cinfo));
EXTERN int __cdecl jpeg_consume_input JPP((j_decompress_ptr cinfo));
/* Return value is one of: */
/* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
#define JPEG_REACHED_EOI	2 /* Reached end of image */
#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */

/* Precalculate output dimensions for current decompression parameters. */
EXTERN void __cdecl jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));

/* Install a special processing method for COM or APPn markers. */
EXTERN void __cdecl jpeg_set_marker_processor JPP((j_decompress_ptr cinfo,
					   int marker_code,
					   jpeg_marker_parser_method routine));

/* Read or write raw DCT coefficients --- useful for lossless transcoding. */
EXTERN jvirt_barray_ptr * __cdecl jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
EXTERN void __cdecl jpeg_write_coefficients JPP((j_compress_ptr cinfo,
					 jvirt_barray_ptr * coef_arrays));
EXTERN void __cdecl jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
					       j_compress_ptr dstinfo));

/* If you choose to abort compression or decompression before completing
 * jpeg_finish_(de)compress, then you need to clean up to release memory,
 * temporary files, etc.  You can just call jpeg_destroy_(de)compress
 * if you're done with the JPEG object, but if you want to clean it up and
 * reuse it, call this:
 */
EXTERN void __cdecl jpeg_abort_compress JPP((j_compress_ptr cinfo));
EXTERN void __cdecl jpeg_abort_decompress JPP((j_decompress_ptr cinfo));

/* Generic versions of jpeg_abort and jpeg_destroy that work on either
 * flavor of JPEG object.  These may be more convenient in some places.
 */
EXTERN void __cdecl jpeg_abort JPP((j_common_ptr cinfo));
EXTERN void __cdecl jpeg_destroy JPP((j_common_ptr cinfo));

/* Default restart-marker-resync procedure for use by data source modules */
EXTERN boolean __cdecl jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
					   int desired));


/* These marker codes are exported since applications and data source modules
 * are likely to want to use them.
 */

#define JPEG_RST0	0xD0	/* RST0 marker code */
#define JPEG_EOI	0xD9	/* EOI marker code */
#define JPEG_APP0	0xE0	/* APP0 marker code */
#define JPEG_COM	0xFE	/* COM marker code */


/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
 * for structure definitions that are never filled in, keep it quiet by
 * supplying dummy definitions for the various substructures.
 */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
struct jpeg_comp_master { long dummy; };
struct jpeg_c_main_controller { long dummy; };
struct jpeg_c_prep_controller { long dummy; };
struct jpeg_c_coef_controller { long dummy; };
struct jpeg_marker_writer { long dummy; };
struct jpeg_color_converter { long dummy; };
struct jpeg_downsampler { long dummy; };
struct jpeg_forward_dct { long dummy; };
struct jpeg_entropy_encoder { long dummy; };
struct jpeg_decomp_master { long dummy; };
struct jpeg_d_main_controller { long dummy; };
struct jpeg_d_coef_controller { long dummy; };
struct jpeg_d_post_controller { long dummy; };
struct jpeg_input_controller { long dummy; };
struct jpeg_marker_reader { long dummy; };
struct jpeg_entropy_decoder { long dummy; };
struct jpeg_inverse_dct { long dummy; };
struct jpeg_upsampler { long dummy; };
struct jpeg_color_deconverter { long dummy; };
struct jpeg_color_quantizer { long dummy; };
#endif /* JPEG_INTERNALS */
#endif /* INCOMPLETE_TYPES_BROKEN */


/*
 * The JPEG library modules define JPEG_INTERNALS before including this file.
 * The internal structure declarations are read only when that is true.
 * Applications using the library should not include jpegint.h, but may wish
 * to include jerror.h.
 */

#ifdef JPEG_INTERNALS
#include "jpegint.h"		/* fetch private declarations */
#include "jerror.h"		/* fetch error codes too */
#endif

#ifdef WIN32

#ifdef	__cplusplus
		}
#endif

#endif

#endif /* JPEGLIB_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\wia\common\jpeglib\jquant2.cpp ===
/*
 * jquant2.c
 *
 * Copyright (C) 1991-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 2-pass color quantization (color mapping) routines.
 * These routines provide selection of a custom color map for an image,
 * followed by mapping of the image to that color map, with optional
 * Floyd-Steinberg dithering.
 * It is also possible to use just the second pass to map to an arbitrary
 * externally-given color map.
 *
 * Note: ordered dithering is not supported, since there isn't any fast
 * way to compute intercolor distances; it's unclear that ordered dither's
 * fundamental assumptions even hold with an irregularly spaced color map.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_2PASS_SUPPORTED


/*
 * This module implements the well-known Heckbert paradigm for color
 * quantization.  Most of the ideas used here can be traced back to
 * Heckbert's seminal paper
 *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
 *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
 *
 * In the first pass over the image, we accumulate a histogram showing the
 * usage count of each possible color.  To keep the histogram to a reasonable
 * size, we reduce the precision of the input; typical practice is to retain
 * 5 or 6 bits per color, so that 8 or 4 different input values are counted
 * in the same histogram cell.
 *
 * Next, the color-selection step begins with a box representing the whole
 * color space, and repeatedly splits the "largest" remaining box until we
 * have as many boxes as desired colors.  Then the mean color in each
 * remaining box becomes one of the possible output colors.
 * 
 * The second pass over the image maps each input pixel to the closest output
 * color (optionally after applying a Floyd-Steinberg dithering correction).
 * This mapping is logically trivial, but making it go fast enough requires
 * considerable care.
 *
 * Heckbert-style quantizers vary a good deal in their policies for choosing
 * the "largest" box and deciding where to cut it.  The particular policies
 * used here have proved out well in experimental comparisons, but better ones
 * may yet be found.
 *
 * In earlier versions of the IJG code, this module quantized in YCbCr color
 * space, processing the raw upsampled data without a color conversion step.
 * This allowed the color conversion math to be done only once per colormap
 * entry, not once per pixel.  However, that optimization precluded other
 * useful optimizations (such as merging color conversion with upsampling)
 * and it also interfered with desired capabilities such as quantizing to an
 * externally-supplied colormap.  We have therefore abandoned that approach.
 * The present code works in the post-conversion color space, typically RGB.
 *
 * To improve the visual quality of the results, we actually work in scaled
 * RGB space, giving G distances more weight than R, and R in turn more than
 * B.  To do everything in integer math, we must use integer scale factors.
 * The 2/3/1 scale factors used here correspond loosely to the relative
 * weights of the colors in the NTSC grayscale equation.
 * If you want to use this code to quantize a non-RGB color space, you'll
 * probably need to change these scale factors.
 */

#define R_SCALE 2		/* scale R distances by this much */
#define G_SCALE 3		/* scale G distances by this much */
#define B_SCALE 1		/* and B by this much */

/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
 * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
 * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
 * you'll get compile errors until you extend this logic.  In that case
 * you'll probably want to tweak the histogram sizes too.
 */

#if RGB_RED == 0
#define C0_SCALE R_SCALE
#endif
#if RGB_BLUE == 0
#define C0_SCALE B_SCALE
#endif
#if RGB_GREEN == 1
#define C1_SCALE G_SCALE
#endif
#if RGB_RED == 2
#define C2_SCALE R_SCALE
#endif
#if RGB_BLUE == 2
#define C2_SCALE B_SCALE
#endif


/*
 * First we have the histogram data structure and routines for creating it.
 *
 * The number of bits of precision can be adjusted by changing these symbols.
 * We recommend keeping 6 bits for G and 5 each for R and B.
 * If you have plenty of memory and cycles, 6 bits all around gives marginally
 * better results; if you are short of memory, 5 bits all around will save
 * some space but degrade the results.
 * To maintain a fully accurate histogram, we'd need to allocate a "long"
 * (preferably unsigned long) for each cell.  In practice this is overkill;
 * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 * and clamping those that do overflow to the maximum value will give close-
 * enough results.  This reduces the recommended histogram size from 256Kb
 * to 128Kb, which is a useful savings on PC-class machines.
 * (In the second pass the histogram space is re-used for pixel mapping data;
 * in that capacity, each cell must be able to store zero to the number of
 * desired colors.  16 bits/cell is plenty for that too.)
 * Since the JPEG code is intended to run in small memory model on 80x86
 * machines, we can't just allocate the histogram in one chunk.  Instead
 * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 * on 80x86 machines, the pointer row is in near memory but the actual
 * arrays are in far memory (same arrangement as we use for image arrays).
 */

#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */

/* These will do the right thing for either R,G,B or B,G,R color order,
 * but you may not like the results for other color orders.
 */
#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
#define HIST_C1_BITS  6		/* bits of precision in G histogram */
#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */

/* Number of elements along histogram axes. */
#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)

/* These are the amounts to shift an input value to get a histogram index. */
#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)


typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */

typedef histcell FAR * histptr;	/* for pointers to histogram cells */

typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
typedef hist2d * hist3d;	/* type for top-level pointer */


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array has (#columns + 2) entries; the extra entry at
 * each end saves us from special-casing the first and last pixels.
 * Each entry is three values long, one value for each color component.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Space for the eventually created colormap is stashed here */
  JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
  int desired;			/* desired # of colors = size of colormap */

  /* Variables for accumulating image statistics */
  hist3d histogram;		/* pointer to the histogram */

  boolean needs_zeroed;		/* TRUE if next pass must zero histogram */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors;		/* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
  int * error_limiter;		/* table for clamping the applied error */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Prescan some rows of pixels.
 * In this module the prescan simply updates the histogram, which has been
 * initialized to zeroes by start_pass.
 * An output_buf parameter is required by the method signature, but no data
 * is actually output (in fact the buffer controller is probably passing a
 * NULL pointer).
 */

METHODDEF void
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptr = input_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}


/*
 * Next we have the really interesting routines: selection of a colormap
 * given the completed histogram.
 * These routines work with a list of "boxes", each representing a rectangular
 * subset of the input color space (to histogram precision).
 */

typedef struct {
  /* The bounds of the box (inclusive); expressed as histogram indexes */
  int c0min, c0max;
  int c1min, c1max;
  int c2min, c2max;
  /* The volume (actually 2-norm) of the box */
  INT32 volume;
  /* The number of nonzero histogram cells within this box */
  long colorcount;
} box;

typedef box * boxptr;


LOCAL boxptr
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register long maxc = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->colorcount > maxc && boxp->volume > 0) {
      which = boxp;
      maxc = boxp->colorcount;
    }
  }
  return which;
}


LOCAL boxptr
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->volume > maxv) {
      which = boxp;
      maxv = boxp->volume;
    }
  }
  return which;
}


LOCAL void
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  if (c0max > c0min)
    for (c0 = c0min; c0 <= c0max; c0++)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0min = c0min = c0;
	    goto have_c0min;
	  }
      }
 have_c0min:
  if (c0max > c0min)
    for (c0 = c0max; c0 >= c0min; c0--)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0max = c0max = c0;
	    goto have_c0max;
	  }
      }
 have_c0max:
  if (c1max > c1min)
    for (c1 = c1min; c1 <= c1max; c1++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1min = c1min = c1;
	    goto have_c1min;
	  }
      }
 have_c1min:
  if (c1max > c1min)
    for (c1 = c1max; c1 >= c1min; c1--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1max = c1max = c1;
	    goto have_c1max;
	  }
      }
 have_c1max:
  if (c2max > c2min)
    for (c2 = c2min; c2 <= c2max; c2++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2min = c2min = c2;
	    goto have_c2min;
	  }
      }
 have_c2min:
  if (c2max > c2min)
    for (c2 = c2max; c2 >= c2min; c2--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2max = c2max = c2;
	    goto have_c2max;
	  }
      }
 have_c2max:

  /* Update box volume.
   * We use 2-norm rather than real volume here; this biases the method
   * against making long narrow boxes, and it has the side benefit that
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
	if (*histp != 0) {
	  ccount++;
	}
    }
  boxp->colorcount = ccount;
}


LOCAL int
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
      b1 = find_biggest_color_pop(boxlist, numboxes);
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
    }
    if (b1 == NULL)		/* no splittable boxes left! */
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
    if (c0 > cmax) { cmax = c0; n = 0; }
    if (c2 > cmax) { n = 2; }
#else
    cmax = c1; n = 1;
    if (c2 > cmax) { cmax = c2; n = 2; }
    if (c0 > cmax) { n = 0; }
#endif
    /* Choose split point along selected axis, and update box bounds.
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
      b1->c0max = lb;
      b2->c0min = lb+1;
      break;
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
      b1->c1max = lb;
      b2->c1min = lb+1;
      break;
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
      b1->c2max = lb;
      b2->c2min = lb+1;
      break;
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
    update_box(cinfo, b2);
    numboxes++;
  }
  return numboxes;
}


LOCAL void
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
  long c0total = 0;
  long c1total = 0;
  long c2total = 0;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++) {
	if ((count = *histp++) != 0) {
	  total += count;
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
}


LOCAL void
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
  boxlist[0].c0min = 0;
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
  boxlist[0].c1min = 0;
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
  boxlist[0].c2min = 0;
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
    compute_color(cinfo, & boxlist[i], i);
  cinfo->actual_number_of_colors = numboxes;
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
}


/*
 * These routines are concerned with the time-critical task of mapping input
 * colors to the nearest color in the selected colormap.
 *
 * We re-use the histogram space as an "inverse color map", essentially a
 * cache for the results of nearest-color searches.  All colors within a
 * histogram cell will be mapped to the same colormap entry, namely the one
 * closest to the cell's center.  This may not be quite the closest entry to
 * the actual input color, but it's almost as good.  A zero in the cache
 * indicates we haven't found the nearest color for that cell yet; the array
 * is cleared to zeroes before starting the mapping pass.  When we find the
 * nearest color for a cell, its colormap index plus one is recorded in the
 * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 * when they need to use an unfilled entry in the cache.
 *
 * Our method of efficiently finding nearest colors is based on the "locally
 * sorted search" idea described by Heckbert and on the incremental distance
 * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 * the distances from a given colormap entry to each cell of the histogram can
 * be computed quickly using an incremental method: the differences between
 * distances to adjacent cells themselves differ by a constant.  This allows a
 * fairly fast implementation of the "brute force" approach of computing the
 * distance from every colormap entry to every histogram cell.  Unfortunately,
 * it needs a work array to hold the best-distance-so-far for each histogram
 * cell (because the inner loop has to be over cells, not colormap entries).
 * The work array elements have to be INT32s, so the work array would need
 * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 *
 * To get around these problems, we apply Thomas' method to compute the
 * nearest colors for only the cells within a small subbox of the histogram.
 * The work array need be only as big as the subbox, so the memory usage
 * problem is solved.  Furthermore, we need not fill subboxes that are never
 * referenced in pass2; many images use only part of the color gamut, so a
 * fair amount of work is saved.  An additional advantage of this
 * approach is that we can apply Heckbert's locality criterion to quickly
 * eliminate colormap entries that are far away from the subbox; typically
 * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 * and we need not compute their distances to individual cells in the subbox.
 * The speed of this approach is heavily influenced by the subbox size: too
 * small means too much overhead, too big loses because Heckbert's criterion
 * can't eliminate as many colormap entries.  Empirically the best subbox
 * size seems to be about 1/512th of the histogram (1/8th in each direction).
 *
 * Thomas' article also describes a refined method which is asymptotically
 * faster than the brute-force method, but it is also far more complex and
 * cannot efficiently be applied to small subboxes.  It is therefore not
 * useful for programs intended to be portable to DOS machines.  On machines
 * with plenty of memory, filling the whole histogram in one shot with Thomas'
 * refined method might be faster than the present code --- but then again,
 * it might not be any faster, and it's certainly more complicated.
 */


/* log2(histogram cells in update box) for each axis; this can be adjusted */
#define BOX_C0_LOG  (HIST_C0_BITS-3)
#define BOX_C1_LOG  (HIST_C1_BITS-3)
#define BOX_C2_LOG  (HIST_C2_BITS-3)

#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)

#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)


/*
 * The next three routines implement inverse colormap filling.  They could
 * all be folded into one big routine, but splitting them up this way saves
 * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 * and may allow some compilers to produce better code by registerizing more
 * inner-loop variables.
 */

LOCAL int
find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		    JSAMPLE colorlist[])
/* Locate the colormap entries close enough to an update box to be candidates
 * for the nearest entry to some cell(s) in the update box.  The update box
 * is specified by the center coordinates of its first cell.  The number of
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
  int numcolors = cinfo->actual_number_of_colors;
  int maxc0, maxc1, maxc2;
  int centerc0, centerc1, centerc2;
  int i, x, ncolors;
  INT32 minmaxdist, min_dist, max_dist, tdist;
  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */

  /* Compute true coordinates of update box's upper corner and center.
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
  centerc0 = (minc0 + maxc0) >> 1;
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
  centerc1 = (minc1 + maxc1) >> 1;
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
  centerc2 = (minc2 + maxc2) >> 1;

  /* For each color in colormap, find:
   *  1. its minimum squared-distance to any point in the update box
   *     (zero if color is within