GetLastWin32Error();
        goto Cleanup;
    }

    hr = THR(super::Launch(FALSE));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagDwnTaskExec, this, "-CDwnTaskExec::Launch (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnTaskExec::Passivate()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::Passivate");

    if (_hevWait)
    {
        CloseEvent(_hevWait);
    }

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::Passivate");
}

HRESULT
CDwnTaskExec::ThreadInit()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadInit");

    // Name this thread for IceCAP
    NameThread("DwnTask");

    _dwTickTimeout  = 10 * 60 * 1000;   // Ten minutes
    _dwTickSlice    = 200;              // 0.2 seconds

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagDwnTaskExec10Sec))
        _dwTickTimeout = 10 * 1000;     // Ten seconds
    #endif

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadInit (hr=0)");

    return(S_OK);
}

void
CDwnTaskExec::ThreadExec()
{
    PerfDbgLog(tagDwnTaskExecVerbose, this, "CDwnTaskExec::ThreadExec (Enter)");

    CDwnTask * pDwnTask;

    for (;;)
    {
        for (;;)
        {
            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (EnterCriticalSection)");

            EnterCriticalSection();

            #if DBG==1
            Invariant();
            #endif

            pDwnTask     = _pDwnTaskRun;
            _pDwnTaskRun = NULL;

            if (_ta == TA_DELETE)
                DelTask(pDwnTask);
            else if (_ta == TA_BLOCK)
                pDwnTask->SetBlocked(TRUE);

            _ta = TA_NONE;

            if (_cDwnTaskActive && !_fShutdown)
            {
                PerfDbgLog(tagDwnTaskExecVerbose, this,
                    "CDwnTaskExec::ThreadExec (find unblocked task)");

                while (!_pDwnTaskRun)
                {
                    if (_pDwnTaskCur == NULL)
                        _pDwnTaskCur = _pDwnTaskHead;

                    if (_pDwnTaskCur->_fActive)
                        _pDwnTaskRun = _pDwnTaskCur;

                    _pDwnTaskCur = _pDwnTaskCur->_pDwnTaskNext;
                }
            }

            #if DBG==1
            Invariant();
            #endif

            LeaveCriticalSection();

            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (LeaveCriticalSection)");

            if (!_pDwnTaskRun)
                break;

            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (run task)");

            _dwTickRun = GetTickCount();
            _pDwnTaskRun->Run();

            PerfDbgLog1(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (task ran for %ld ticks)",
                GetTickCount() - _dwTickRun);
        }

        if (_fShutdown)
            break;

        PerfDbgLog(tagDwnTaskExecVerbose, this,
            "CDwnTaskExec::ThreadExec (WaitForSingleObject)");

        SuspendCAP();

        DWORD dwResult = WaitForSingleObject(_hevWait, _dwTickTimeout);

        ResumeCAP();

        PerfDbgLog1(tagDwnTaskExecVerbose, this,
            "CDwnTaskExec::ThreadExec (Wait over, dwResult=%ld)", dwResult);

        if (dwResult == WAIT_TIMEOUT)
        {
            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (WAIT_TIMEOUT)");

            EnterCriticalSection();

            if (_cDwnTask == 0)
            {
                ThreadTimeout();
            }

            LeaveCriticalSection();
        }
    }

    PerfDbgLog(tagDwnTaskExecVerbose, this, "CDwnTaskExec::ThreadExec (Leave)");
}

void
CDwnTaskExec::ThreadTimeout()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadTimeout");

    KillDwnTaskExec();

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadTimeout");
}

void
CDwnTaskExec::ThreadTerm()
{
    while (_pDwnTaskHead)
    {
        PerfDbgLog1(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadExec "
            "Terminate %lX", _pDwnTaskHead);

        _pDwnTaskHead->Terminate();

        PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadExec Terminate");
    }
}

void
CDwnTaskExec::Shutdown()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::Shutdown");

    _fShutdown = TRUE;
    Verify(SetEvent(_hevWait));
    super::Shutdown();

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::Shutdown");
}

#if DBG==1

void
CDwnTaskExec::Invariant()
{
    EnterCriticalSection();

    LONG        cDwnTask        = 0;
    LONG        cDwnTaskActive  = 0;
    CDwnTask *  pDwnTaskPrev    = NULL;
    CDwnTask *  pDwnTask        = _pDwnTaskHead;
    BOOL        fFoundCur       = _pDwnTaskCur == NULL;
    BOOL        fFoundRun       = _pDwnTaskRun == NULL;

    Assert(!_pDwnTaskHead == !_pDwnTaskTail);
    Assert(!_pDwnTaskHead || !_pDwnTaskHead->_pDwnTaskPrev);
    Assert(!_pDwnTaskTail || !_pDwnTaskTail->_pDwnTaskNext);

    for (; pDwnTask; pDwnTaskPrev = pDwnTask, pDwnTask = pDwnTask->_pDwnTaskNext)
    {
        cDwnTask += 1;

        if (pDwnTask->_fActive)
            cDwnTaskActive += 1;

        Assert(pDwnTask->_pDwnTaskPrev == pDwnTaskPrev);
        Assert(pDwnTask->_fEnqueued);

        if (pDwnTask == _pDwnTaskCur)
            fFoundCur = TRUE;

        if (pDwnTask == _pDwnTaskRun)
            fFoundRun = TRUE;
    }

    Assert(pDwnTaskPrev == _pDwnTaskTail);
    Assert(cDwnTask == _cDwnTask);
    Assert(cDwnTaskActive == _cDwnTaskActive);
    Assert(fFoundCur);
    Assert(fFoundRun);

    LeaveCriticalSection();
}

#endif

// External Functions ---------------------------------------------------------

HRESULT
StartDwnTask(CDwnTask * pDwnTask)
{
    PerfDbgLog1(tagDwnTaskExec, NULL, "+StartDwnTask %lX", pDwnTask);

    HRESULT hr = S_OK;

    g_csDwnTaskExec.Enter();

    if (g_pDwnTaskExec == NULL)
    {
        g_pDwnTaskExec = new CDwnTaskExec(g_csDwnTaskExec.GetPcs());

        if (g_pDwnTaskExec == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(g_pDwnTaskExec->Launch());

        if (hr)
        {
            g_pDwnTaskExec->Release();
            g_pDwnTaskExec = NULL;
            goto Cleanup;
        }
    }

    g_pDwnTaskExec->AddTask(pDwnTask);

Cleanup:
    g_csDwnTaskExec.Leave();
    PerfDbgLog(tagDwnTaskExec, NULL, "-StartDwnTask");
    RRETURN(hr);
}

void
KillDwnTaskExec()
{
    PerfDbgLog(tagDwnTaskExec, NULL, "+KillDwnTaskExec");

    g_csDwnTaskExec.Enter();

    CDwnTaskExec * pDwnTaskExec = g_pDwnTaskExec;
    g_pDwnTaskExec = NULL;

    g_csDwnTaskExec.Leave();

    if (pDwnTaskExec)
    {
        pDwnTaskExec->Shutdown();
        pDwnTaskExec->Release();
    }

    PerfDbgLog(tagDwnTaskExec, NULL, "-KillDwnTaskExec");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\dwndoc.cxx ===
//+ ---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       dwndoc.cxx
//
//  Contents:   CDwnDoc
//
// ----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_DWNNOT_H_
#define X_DWNNOT_H_
#include <dwnnot.h>
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnDoc, "Dwn", "Trace CDwnDoc")
ExternTag(tagPalette);

MtDefine(CDwnDoc, Dwn, "CDwnDoc")
MtDefine(CDwnDocApe, CDwnDoc, "CDwnDoc::_ape")
MtDefine(CDwnDoc_aryDwnDocInfo_pv, CDwnDoc, "CDwnDoc::_aryDwnDocInfo::_pv")
MtDefine(CDwnDoc_pbSID, CDwnDoc, "CDwnDoc::_pbSID")

    
// CDwnDoc --------------------------------------------------------------------

CDwnDoc::CDwnDoc()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::CDwnDoc");

    _uSchemeDocReferer = URL_SCHEME_UNKNOWN;
    _uSchemeSubReferer = URL_SCHEME_UNKNOWN;

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::CDwnDoc");
}

CDwnDoc::~CDwnDoc()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::~CDwnDoc");

    Assert(_pDoc == NULL);

    if (_aryDwnDocInfo.Size())
    {
        OnDocThreadCallback();
    }

    delete [] _ape;
    delete [] _pbRequestHeaders;
    delete [] _pbSID;
    
    ReleaseInterface(_pDownloadNotify);
    
    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::~CDwnDoc");
}

void
CDwnDoc::SetDocAndMarkup(CDoc * pDoc, CMarkup * pMarkup)
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::SetDoc [%lX] %ls",
        pDoc, pDoc->GetPrimaryUrl() ? pDoc->GetPrimaryUrl() : g_Zero.ach);

    Assert(_pDoc == NULL);
    Assert(_pMarkup == NULL);
    Assert(pDoc->_dwTID == GetCurrentThreadId());

    SetCallback(OnDocThreadCallback, this);

    _fCallbacks  = TRUE;
    _dwThreadId  = GetCurrentThreadId();
    _pDoc        = pDoc;
    _pDoc->SubAddRef();
    _pMarkup     = pMarkup;
    _pMarkup->SubAddRef();

    _fTrustAPPCache = _pDoc->_fTrustAPPCache;

    OnDocThreadCallback();

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::SetDoc");
}

void
CDwnDoc::Disconnect()
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::Disconnect [%lX] %ls",
        _pDoc, (_pDoc && _pDoc->GetPrimaryUrl()) ? _pDoc->GetPrimaryUrl() : g_Zero.ach);

    CDoc * pDoc = _pDoc;
    CMarkup * pMarkup = _pMarkup;

    if (pDoc)
    {
        Assert(IsDocThread());
        super::Disconnect();

        g_csDwnDoc.Enter();

        _pDoc = NULL;
        _pMarkup = NULL;
        _fCallbacks = FALSE;

        g_csDwnDoc.Leave();

        if (_aryDwnDocInfo.Size())
        {
            OnDocThreadCallback();
            _aryDwnDocInfo.DeleteAll();
        }

        pDoc->SubRelease();
        Assert(pMarkup);
        pMarkup->SubRelease();
    }

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::Disconnect");
}

HRESULT
CDwnDoc::AddDocThreadCallback(CDwnBindData * pDwnBindData, void * pvArg)
{
    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::AddDocThreadCallback [%lX]",
        pDwnBindData);

    HRESULT hr = S_OK;

    if (IsDocThread())
    {
        pDwnBindData->OnDwnDocCallback(pvArg);
    }
    else
    {
        BOOL fSignal = FALSE;

        g_csDwnDoc.Enter();

        if (_fCallbacks)
        {
            // this was initialized as ddi = { pDwnBindData, pvArg }; 
            // that produces some bogus code for win16 and it generates an
            // extra data segment. so changed to the below - vreddy -7/30/97.
            DWNDOCINFO ddi;
            ddi.pDwnBindData = pDwnBindData;
            ddi.pvArg = pvArg;

            hr = THR(_aryDwnDocInfo.AppendIndirect(&ddi));

            if (hr == S_OK)
            {
                pDwnBindData->SubAddRef();
                fSignal = TRUE;
            }
        }

        g_csDwnDoc.Leave();

        if (fSignal)
        {
            super::Signal();
        }
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::AddDocThreadCallback (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnDoc::OnDocThreadCallback()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::OnDocThreadCallback");

    DWNDOCINFO ddi;

    while (_aryDwnDocInfo.Size() > 0)
    {
        ddi.pDwnBindData = NULL;
        ddi.pvArg = NULL;

        g_csDwnDoc.Enter();

        if (_aryDwnDocInfo.Size() > 0)
        {
            ddi = _aryDwnDocInfo[0];
            _aryDwnDocInfo.Delete(0);
        }

        g_csDwnDoc.Leave();

        if (ddi.pDwnBindData)
        {
            ddi.pDwnBindData->OnDwnDocCallback(ddi.pvArg);
            ddi.pDwnBindData->SubRelease();
        }
    }

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::OnDocThreadCallback");
}

// CDwnDoc (QueryService) -----------------------------------------------------

HRESULT
CDwnDoc::QueryService(BOOL fBindOnApt, REFGUID rguid, REFIID riid, void ** ppvObj)
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::QueryService (fBindOnApt=%s,IsDocThread=%s)",
        fBindOnApt ? "TRUE" : "FALSE", IsDocThread() ? "TRUE" : "FALSE");

    HRESULT hr;

    if ((rguid == IID_IAuthenticate || rguid == IID_IWindowForBindingUI) && (rguid == riid))
        hr = QueryInterface(rguid, ppvObj);
    else if (fBindOnApt && IsDocThread() && _pDoc)
    {
        if (rguid == IID_IHTMLWindow2 && riid == IID_IHTMLWindow2 && _pMarkup && _pMarkup->HasWindowPending())
        {
            *ppvObj = (IHTMLWindow2 *) _pMarkup->GetWindowPending()->Window();
            ((IUnknown *) *ppvObj)->AddRef();
            hr = S_OK;
        }
        else
            hr = _pDoc->QueryService(rguid, riid, ppvObj);
    }
    else
    {
        *ppvObj = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::QueryService (hr=%lX)", hr);
    return(hr);
}

// CDwnDoc (Load/Save) --------------------------------------------------------

HRESULT
CDwnDoc::Load(IStream * pstm, CDwnDoc ** ppDwnDoc)
{
    PerfDbgLog(tagDwnDoc, NULL, "+CDwnDoc::Load");

    CDwnDoc *   pDwnDoc = NULL;
    BYTE        bIsNull;
    HRESULT     hr;

    hr = THR(pstm->Read(&bIsNull, sizeof(BYTE), NULL));

    if (hr || bIsNull)
        goto Cleanup;

    pDwnDoc = new CDwnDoc;

    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(pstm->Read(&pDwnDoc->_dwBindf, 5 * sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrDocReferer.Load(pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrSubReferer.Load(pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrAcceptLang.Load(pstm));
    if (hr)
        goto Cleanup;
        
    hr = THR(pDwnDoc->_cstrUserAgent.Load(pstm));
    if (hr)
        goto Cleanup;

    pDwnDoc->_uSchemeDocReferer = pDwnDoc->_cstrDocReferer ?
        GetUrlScheme(pDwnDoc->_cstrDocReferer) : URL_SCHEME_UNKNOWN;
    pDwnDoc->_uSchemeSubReferer = pDwnDoc->_cstrSubReferer ?
        GetUrlScheme(pDwnDoc->_cstrSubReferer) : URL_SCHEME_UNKNOWN;

Cleanup:
    if (hr && pDwnDoc)
    {
        pDwnDoc->Release();
        *ppDwnDoc = NULL;
    }
    else
    {
        *ppDwnDoc = pDwnDoc;
    }

    PerfDbgLog1(tagDwnDoc, NULL, "-CDwnDoc::Load (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnDoc::Save(CDwnDoc * pDwnDoc, IStream * pstm)
{
    PerfDbgLog(tagDwnDoc, pDwnDoc, "+CDwnDoc::Save");

    BOOL    bIsNull = pDwnDoc == NULL;
    HRESULT hr;

    hr = THR(pstm->Write(&bIsNull, sizeof(BYTE), NULL));
    if (hr)
        goto Cleanup;

    if (pDwnDoc)
    {
        hr = THR(pstm->Write(&pDwnDoc->_dwBindf, 5 * sizeof(DWORD), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrDocReferer.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrSubReferer.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrAcceptLang.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrUserAgent.Save(pstm));
        if (hr)
            goto Cleanup;
    }

Cleanup:
    PerfDbgLog1(tagDwnDoc, pDwnDoc, "-CDwnDoc::Save (hr=%lX)", hr);
    RRETURN(hr);
}

ULONG
CDwnDoc::GetSaveSize(CDwnDoc * pDwnDoc)
{
    PerfDbgLog(tagDwnDoc, pDwnDoc, "+CDwnDoc::GetSaveSize");

    ULONG cb = sizeof(BYTE);

    if (pDwnDoc)
    {
        cb += 5 * sizeof(DWORD);
        cb += pDwnDoc->_cstrDocReferer.GetSaveSize();
        cb += pDwnDoc->_cstrSubReferer.GetSaveSize();
        cb += pDwnDoc->_cstrAcceptLang.GetSaveSize();
        cb += pDwnDoc->_cstrUserAgent.GetSaveSize();
    }

    PerfDbgLog(tagDwnDoc, pDwnDoc, "-CDwnDoc::GetSaveSize");

    return(cb);
}

// CDwnDoc (Internal) ---------------------------------------------------------

HRESULT
CDwnDoc::SetString(CStr * pcstr, LPCTSTR psz)
{
    if (psz && *psz)
        RRETURN(pcstr->Set(psz));
    else
    {
        pcstr->Free();
        return(S_OK);
    }
}

HRESULT
CDwnDoc::SetDocReferer(LPCTSTR psz)
{
    HRESULT hr;

    hr = THR(SetString(&_cstrDocReferer, psz));

    if (hr == S_OK)
    {
        _uSchemeDocReferer = psz ? GetUrlScheme(psz) : URL_SCHEME_UNKNOWN;
    }

    RRETURN(hr);
}

HRESULT
CDwnDoc::SetSubReferer(LPCTSTR psz)
{
    HRESULT hr;

    hr = THR(SetString(&_cstrSubReferer, psz));

    if (hr == S_OK)
    {
        _uSchemeSubReferer = psz ? GetUrlScheme(psz) : URL_SCHEME_UNKNOWN;
    }

    RRETURN(hr);
}

void
CDwnDoc::TakeRequestHeaders(BYTE **ppb, ULONG *pcb)
{
    Assert(!_pbRequestHeaders);

    _pbRequestHeaders = *ppb;
    _cbRequestHeaders = *pcb;
    
    *ppb = NULL;
    *pcb = 0;
}

void
CDwnDoc::SetDownloadNotify(IDownloadNotify *pDownloadNotify)
{
    Assert(_dwThreadId == GetCurrentThreadId());
    Assert(!_pDownloadNotify);

    if (pDownloadNotify)
        pDownloadNotify->AddRef();
    _pDownloadNotify = pDownloadNotify;
}


HRESULT
CDwnDoc::SetAuthorColors(LPCTSTR pchColors, int cchColors)
{
    if (_fGotAuthorPalette)
    {
        TraceTag((tagPalette, "Ignoring author palette"));
        RRETURN(S_OK);
    }

    TraceTag((tagPalette, "Setting author colors"));

    HRESULT hr = S_OK;
    if (cchColors == -1)
        cchColors = _tcslen(pchColors);

    LPCTSTR pch = pchColors;
    LPCTSTR pchTok = pchColors;
    LPCTSTR pchEnd = pchColors + cchColors;

    PALETTEENTRY ape[256];

    unsigned cpe = 0;
    CColorValue cv;

    while ((pch < pchEnd) && (cpe < 256))
    {
        while (*pch && isspace(*pch))
            pch++;

        pchTok = pch;
        BOOL fParen = FALSE;

        while (pch < pchEnd && (fParen || !isspace(*pch)))
        {
            if (*pch == _T('('))
            {
                if (fParen)
                {
                    hr = E_INVALIDARG;
                    goto Cleanup;
                }
                else
                {
                    fParen = TRUE;
                }
            }
            else if (*pch == _T(')'))
            {
                if (fParen)
                {
                    fParen = FALSE;
                }
                else
                {
                    hr = E_INVALIDARG;
                    goto Cleanup;
                }
            }
            pch++;
        }

        int iStrLen = pch - pchTok;

        if (iStrLen > 0)
        {
            hr = cv.FromString(pchTok, FALSE, FALSE, iStrLen);

            if (FAILED(hr))
                goto Cleanup;

            COLORREF cr = cv.GetColorRef();
            ape[cpe].peRed = GetRValue(cr);
            ape[cpe].peGreen = GetGValue(cr);
            ape[cpe].peBlue = GetBValue(cr);
            ape[cpe].peFlags = 0;

            cpe++;
        }
    }

    if (cpe)
    {
        Assert(!_ape);

        _ape = (PALETTEENTRY *)MemAlloc(Mt(CDwnDocApe), cpe * sizeof(PALETTEENTRY));

        if (!_ape)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        memcpy(_ape, ape, cpe * sizeof(PALETTEENTRY));

        _cpe = cpe;
    }

Cleanup:

    TraceTag((tagPalette, SUCCEEDED(hr) ? "Author palette: %d colors" : "Author palette failed", _cpe));
    // No matter what happened, we are no longer interested in getting the palette
    PreventAuthorPalette();

    RRETURN(hr);
}

HRESULT
CDwnDoc::GetColors(CColorInfo *pCI)
{
    HRESULT hr = S_FALSE;

    // This is thread safe because by the time _cpe is set, _ape has already been allocated.
    // If for some reason we arrive a bit too soon, we'll get it next time.
    if (_cpe)
    {
        Assert(_ape);

        hr = THR(pCI->AddColors(_cpe, _ape));
    }

    RRETURN1(hr, S_FALSE);
}

HRESULT
CDwnDoc::SetSecurityID(BYTE * pbSID, DWORD cbSID)
{
    HRESULT hr = S_OK;
    
    Assert(pbSID && cbSID);

    delete [] _pbSID;
    
    _pbSID = new(Mt(CDwnDoc_pbSID)) BYTE[cbSID];
    if (!_pbSID)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    _cbSID = cbSID;
    memcpy(_pbSID, pbSID, cbSID);

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnDoc::SetSecurityID(CMarkup * pMarkup, BOOL fUseNested)
{
    CMarkup     * pRootMarkup;
    BYTE          abSID[MAX_SIZE_SECURITY_ID];
    DWORD         cbSID = ARRAY_SIZE(abSID);
    HRESULT       hr = S_OK;

    pRootMarkup = pMarkup->GetRootMarkup(fUseNested);
    if (pRootMarkup)
    {
        hr = pRootMarkup->GetSecurityID(abSID, &cbSID);
        if (hr)
            goto Cleanup;

        hr = SetSecurityID(abSID, cbSID);
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnDoc::GetSecurityID(BYTE * pbSID, DWORD * pcbSID)
{
    HRESULT hr = E_FAIL;

    if (_cbSID && *pcbSID >= _cbSID)
    {
        memcpy(pbSID, _pbSID, _cbSID);
        *pcbSID = _cbSID;
        hr = S_OK;
    }

    RRETURN(hr);
}

//
//  The pchUrlContext is the script we sould not 
//  allow access if the script
//

void CDwnDoc::SetCallerUrl(LPCTSTR pchUrlContext)
{
    if (pchUrlContext == NULL)
    {
        pchUrlContext = _cstrDocReferer;
    }

    cstrCallerUrl.Set(pchUrlContext);
}

// CDwnDoc (IAuthenticate) ----------------------------------------------------

STDMETHODIMP
CDwnDoc::Authenticate(HWND * phwnd, LPWSTR * ppszUsername, LPWSTR * ppszPassword)
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::Authenticate");

    HRESULT hr;

    *phwnd = NULL;
    *ppszUsername = NULL;
    *ppszPassword = NULL;
    
    if (IsDocThread() && _pDoc)
    {
        IAuthenticate * pAuth;

        hr = THR(_pDoc->QueryService(IID_IAuthenticate, IID_IAuthenticate, (void **)&pAuth));

        if (hr == S_OK)
        {
            hr = THR(pAuth->Authenticate(phwnd, ppszUsername, ppszPassword));
            pAuth->Release();
        }
    }
    else
    {
        // Either we are on the wrong thread or the document has disconnected.  In either case,
        // we can no longer provide this service.
        hr = E_FAIL;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::Authenticate (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnDoc (IWindowForBindingUI) ----------------------------------------------

STDMETHODIMP
CDwnDoc::GetWindow(REFGUID rguidReason, HWND * phwnd)
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::GetWindow");

    HRESULT hr;

    *phwnd = NULL;

    if (IsDocThread() && _pDoc)
    {
        IWindowForBindingUI * pwfbu;

        hr = THR(_pDoc->QueryService(IID_IWindowForBindingUI, IID_IWindowForBindingUI, (void **)&pwfbu));

        if (hr == S_OK)
        {
            IGNORE_HR(pwfbu->GetWindow(rguidReason, phwnd));
            pwfbu->Release();
        }
    }
    else
    {
        // Either we are on the wrong thread or the document has disconnected.  In either case,
        // we can no longer provide this service.
        hr = E_FAIL;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::GetWindow (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnDoc (IUnknown) ---------------------------------------------------------

STDMETHODIMP
CDwnDoc::QueryInterface(REFIID iid, LPVOID * ppv)
{
    PerfDbgLog(tagDwnDoc, this, "CDwnDoc::QueryInterface");

    if (iid == IID_IUnknown || iid == IID_IAuthenticate)
        *ppv = (IAuthenticate *)this;
    else if (iid == IID_IWindowForBindingUI)
        *ppv = (IWindowForBindingUI *)this;
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }

    ((IUnknown *)*ppv)->AddRef();
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\dwnpost.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       dwnpost.cxx
//
//  Contents:   CDwnPost
//              CDwnPostStm
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_POSTDATA_HXX_
#define X_POSTDATA_HXX_
#include "postdata.hxx"
#endif

#define _hxx_
#include "element.hdl"

#ifdef WIN16
#define MB_PRECOMPOSED 0
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnPost,       "Dwn", "Trace CDwnPost")
PerfDbgTag(tagDwnPostStm,    "Dwn", "Trace CDwnPostStm")
PerfDbgTag(tagDwnPostAsStm,  "Dwn", "! Force posting via IStream")
PerfDbgTag(tagDwnPostNoRefs, "Dwn", "! One-shot HGLOBALS for posting");
MtDefine(CDwnPost, Dwn, "CDwnPost")
MtDefine(CDwnPostStm, Dwn, "CDwnPostStm")

// CDwnPost (IUnknown) --------------------------------------------------------

STDMETHODIMP
CDwnPost::QueryInterface(REFIID riid, void ** ppv)
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::QueryInterface");

    HRESULT hr;

    if (riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnPost::AddRef()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnPost::Release()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::~CDwnPost
//
//  Synopsis:   frees the strings and the descriptor list
//              
//---------------------------------------------------------------------------//

CDwnPost::~CDwnPost()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::~CDwnPost");

    CPostItem * pItem;

    if (_pItems)
    {
        UINT i;
        for (pItem = _pItems, i = _cItems; i > 0; i--, pItem++)
        {
            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                    delete [] pItem->_pszAnsi;
                    break;

                case POSTDATA_FILENAME:
                    delete [] pItem->_pszWide;
                    break;
            }
        }
        delete [] _pItems;
    }

    if (_hGlobal)
    {
        GlobalFree(_hGlobal);
    }

    PerfDbgLog(tagDwnPost, this, "-CDwnPost::~CDwnPost");
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Create, static
//
//  Arguments:  cItems    - number of items for descriptor array allocation
//              ppDwnPost - return the object here
//
//  Synopsis:   Create a skeleton CDwnPost object
//              having cItems sections
//
//---------------------------------------------------------------------------//
HRESULT
CDwnPost::Create(UINT cItems, CDwnPost ** ppDwnPost)
{
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (cItems=%ld)", cItems);

    CDwnPost * pDwnPost = new CDwnPost;
    HRESULT hr;

    if (pDwnPost == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if (cItems > 0)
    {
        pDwnPost->_pItems = new(Mt(CPostItem)) CPostItem[cItems];

        if (pDwnPost->_pItems == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        memset(pDwnPost->_pItems, 0, cItems * sizeof(CPostItem));

        pDwnPost->_cItems = cItems;
    }

    hr = THR(CoFileTimeNow(&pDwnPost->_ftCreated));
    if (hr)
        goto Cleanup;

Cleanup:

    if (hr && pDwnPost)
    {
        pDwnPost->Release();
        *ppDwnPost = NULL;
    }
    else
    {
        *ppDwnPost = pDwnPost;
    }

    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnPost::Create(DWORD cbPostData, BYTE * pPostData, BOOL fDontSave, CDwnPost ** ppDwnPost)
{
    HRESULT hr;
    char * pszAnsi;

    hr = THR(Create(1, ppDwnPost));
    if (hr)
        goto Cleanup;

    pszAnsi = new(Mt(CPostItem_psz)) char[cbPostData + 1];
    if (!pszAnsi)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    memcpy(pszAnsi, pPostData, cbPostData);
    pszAnsi[cbPostData] = '\0';

    (*ppDwnPost)->_pItems->_pszAnsi = pszAnsi;
    (*ppDwnPost)->_pItems->_ePostDataType = POSTDATA_LITERAL;
    (*ppDwnPost)->_pItems->_dwSize = cbPostData;

    (*ppDwnPost)->_fDontSave = fDontSave;

Cleanup:
    RRETURN(hr);    
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Create, static
//
//  Synopsis:   Create a DownPost object from a SubmitData object
//              
//  Arguments:  pSubmitData - the object to init from
//              ppDwnPost   - return the object here
//
//  Note::      DownPost takes ownership of the strings passed
//              in in SubmitData
//
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Create(CPostData * pSubmitData, CDwnPost ** ppDwnPost)
{
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (pSubmitData=%lx)", pSubmitData);

    HRESULT hr;

    hr = THR(Create((UINT)0, ppDwnPost));

    if (hr == S_OK)
    {
        TCHAR achEncoding[ENCODING_SIZE];

        achEncoding[0] = 0;

        MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED,
            pSubmitData->GetEncodingString(), -1,
            achEncoding, ARRAY_SIZE(achEncoding));

        // copy the string and remove the CRLF
        hr = THR((*ppDwnPost)->_cstrEncoding.Set(achEncoding, _tcslen(achEncoding) - 2));

        if (hr)
        {
            (*ppDwnPost)->Release();
            *ppDwnPost = NULL;
            goto Cleanup;
        }

        // Take ownership of the string list
        (*ppDwnPost)->_cItems  = pSubmitData->_cItems;
        (*ppDwnPost)->_pItems  = pSubmitData->_pItems;

        //  Clear the SubmitData object
        pSubmitData->_cItems = 0;
        pSubmitData->_pItems = 0;
    }

    #if DBG==1
    (*ppDwnPost)->VerifySaveLoad();
    #endif

Cleanup:
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Save, static
//
//  Arguments:  pstm - the stream
//              pDwnPost - the object to save. Can be NULL.
//
//  Synopsis:   Save private format into a stream
//              
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Save(CDwnPost * pDwnPost, IStream * pstm)
{
    PerfDbgLog(tagDwnPost, pDwnPost, "+CDwnPost::Save");

    DWORD   cItems = pDwnPost ? pDwnPost->_cItems : 0xFFFFFFFF;
    HRESULT hr;

    hr = THR(pstm->Write(&cItems, sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;

    if (pDwnPost && cItems)
    {
        CPostItem * pItem;

        hr = THR(pstm->Write(&pDwnPost->_ftCreated, sizeof(FILETIME), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnPost->_cstrEncoding.Save(pstm));
        if (hr)
            goto Cleanup;

        for ( pItem = pDwnPost->_pItems, cItems = pDwnPost->_cItems;
              cItems > 0;
              cItems--, pItem++ )
        {
            hr = THR(pstm->Write(&pItem->_ePostDataType,
                        sizeof(POSTDATA_KIND), NULL));

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                {
                    char * psz = pItem->_pszAnsi;
                    ULONG cb = psz ? pItem->_dwSize + 1: 0;

                    hr = THR(pstm->Write(&cb, sizeof(ULONG), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        hr = THR(pstm->Write(psz, cb, NULL));
                        if (hr)
                            goto Cleanup;
                    }
                }
                break;

                case POSTDATA_FILENAME:
                {
                    TCHAR * psz = pItem->_pszWide;
                    ULONG cb = psz ? sizeof (TCHAR) * (1 + _tcslen(psz)) : 0;

                    hr = THR(pstm->Write(&cb, sizeof(ULONG), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        hr = THR(pstm->Write(psz, cb, NULL));
                        if (hr)
                            goto Cleanup;
                    }
                }
                break;
            }
        }
    }

Cleanup:
    PerfDbgLog1(tagDwnPost, pDwnPost, "-CDwnPost::Save (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Load, static
//
//  Arguments:  pstm - the stream
//              ppDwnPost - return the DownPost object here. Can become NULL.
//
//  Synopsis:   Load private format from a stream
//              
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Load(IStream * pstm, CDwnPost ** ppDwnPost)
{
    PerfDbgLog(tagDwnPost, NULL, "+CDwnPost::Load");

    CDwnPost *  pDwnPost = NULL;
    CPostItem * pItem;
    DWORD       cItems;
    ULONG       cb;
    HRESULT     hr;

    hr = THR(pstm->Read(&cItems, sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;
    
    if (cItems != 0xFFFFFFFF)
    {
        hr = THR(Create(cItems, &pDwnPost));
        if (hr)
            goto Cleanup;

        hr = THR(pstm->Read(&pDwnPost->_ftCreated, sizeof(FILETIME), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnPost->_cstrEncoding.Load(pstm));
        if (hr)
            goto Cleanup;

        if (cItems == 0)
            goto Cleanup;

        for ( pItem = pDwnPost->_pItems;
              cItems > 0;
              cItems--, pItem++ )
        {
            hr = THR(pstm->Read(&pItem->_ePostDataType, sizeof(POSTDATA_KIND), NULL));
            if (hr)
                goto Cleanup;

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                case POSTDATA_FILENAME:
                {
                    hr = THR(pstm->Read(&cb, sizeof(cb), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        pItem->_pszAnsi = (char *)MemAlloc(Mt(CPostItem_psz), cb);

                        if (!pItem->_pszAnsi)
                        {
                            hr = E_OUTOFMEMORY;
                            goto Cleanup;
                        }

                        hr = THR(pstm->Read(pItem->_pszAnsi, cb, NULL));
                        if (hr)
                            goto Cleanup;

                        pItem->_dwSize = cb - 1;
                    }
                    break;
                }

                default:
                    AssertSz(FALSE, "Unrecognized POSTDATA type");
                    hr = E_FAIL;
                    goto Cleanup;
            }
        }
    }

Cleanup:
    if (hr && pDwnPost)
    {
        pDwnPost->Release();
        *ppDwnPost = NULL;
    }
    else
    {
        *ppDwnPost = pDwnPost;
    }

    PerfDbgLog1(tagDwnPost, NULL, "-CDwnPost::Load (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::GetSaveSize, static
//
//  Arguments:  pDwnPost
//
//  Synopsis:   Computes the maximum size needed by CDwnPost::Save
//
//---------------------------------------------------------------------------//

ULONG
CDwnPost::GetSaveSize(CDwnPost * pDwnPost)
{
    PerfDbgLog(tagDwnPost, pDwnPost, "+CDwnPost::GetSaveSize");

    ULONG cb = sizeof(DWORD);

    if (pDwnPost)
    {
        cb += sizeof(FILETIME) + pDwnPost->_cstrEncoding.GetSaveSize();

        CPostItem * pItem = pDwnPost->_pItems;
        ULONG       cItem = pDwnPost->_cItems;

        for (; cItem > 0; --cItem, ++pItem)
        {
            cb += sizeof(POSTDATA_KIND);

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                    cb += sizeof(ULONG);
                    if (pItem->_pszAnsi)
                        cb += pItem->_dwSize + 1;
                    break;
                case POSTDATA_FILENAME:
                    cb += sizeof(ULONG);
                    if (pItem->_pszWide)
                        cb += (_tcslen(pItem->_pszWide) + 1) * sizeof(TCHAR);
                    break;
            }
        }
    }

    PerfDbgLog1(tagDwnPost, pDwnPost, "-CDwnPost::GetSaveSize (cb=%ld)", cb);
    return(cb);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::VerifySaveLoad
//
//  Arguments:  
//
//  Synopsis:   Debugging checks to make sure save/load sequence works
//
//---------------------------------------------------------------------------//

#if DBG==1

void
CDwnPost::VerifySaveLoad()
{
    IStream * pstm = NULL;
    CDwnPost * pDwnPost = NULL;
    LARGE_INTEGER li = { 0 };
    ULARGE_INTEGER uli;
    ULONG cbSave;
    CPostItem * pItemSrc, * pItemDst;
    ULONG cItem;
    HRESULT hr;

    cbSave = GetSaveSize(this);

    hr = THR(CreateStreamOnHGlobal(NULL, TRUE, &pstm));
    if (hr)
        goto Cleanup;

    hr = THR(Save(this, pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pstm->Seek(li, STREAM_SEEK_CUR, &uli));
    if (hr)
        goto Cleanup;
    
    Assert(uli.LowPart == cbSave && uli.HighPart == 0);

    hr = THR(pstm->Seek(li, STREAM_SEEK_SET, &uli));
    if (hr)
        goto Cleanup;

    Assert(uli.LowPart == 0 && uli.HighPart == 0);

    hr = THR(Load(pstm, &pDwnPost));
    if (hr)
        goto Cleanup;

    Assert(GetItemCount() == pDwnPost->GetItemCount());

    Assert(!!_cstrEncoding == !!pDwnPost->_cstrEncoding);

    Assert(!_cstrEncoding || StrCmpC(_cstrEncoding, pDwnPost->_cstrEncoding) == 0);

    Assert(memcmp(&_ftCreated, &pDwnPost->_ftCreated, sizeof(FILETIME)) == 0);

    pItemSrc = GetItems();
    pItemDst = pDwnPost->GetItems();
    cItem    = GetItemCount();

    for (; cItem > 0; --cItem, ++pItemSrc, ++pItemDst)
    {
        Assert(pItemSrc->_ePostDataType == pItemDst->_ePostDataType);

        if (pItemSrc->_ePostDataType == POSTDATA_LITERAL)
        {
            Assert(pItemSrc->_dwSize == pItemDst->_dwSize);            
            Assert(strncmp(pItemSrc->_pszAnsi, pItemDst->_pszAnsi, pItemDst->_dwSize) == 0);
        }
        else if (pItemSrc->_ePostDataType == POSTDATA_FILENAME)
        {
            Assert(StrCmpC(pItemSrc->_pszWide, pItemDst->_pszWide) == 0);
        }
    }

Cleanup:
    if (pDwnPost)
        pDwnPost->Release();
    ReleaseInterface(pstm);
}

#endif

DWORD HashBytes(void *pb, DWORD cb, DWORD hash)
{
    while (cb)
    {
        hash = (hash >> 7) | (hash << (32-7));
        hash += *(BYTE*)pb; // Case-sensitive hash
        pb = (BYTE*)pb+1;
        cb--;
    }

    return hash;
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::GetBindInfo
//
//  Arguments:  
//
//  Synopsis:   Fills out a STGMEDIUM structure for accessing the post data
//
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::GetBindInfo(BINDINFO * pbindinfo)
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::GetBindInfo");

    HGLOBAL hGlobal = _hGlobal;
    ULONG   cb      = _cbGlobal;
    HRESULT hr      = S_OK;

    if (    hGlobal == NULL
        &&  (   _cItems == 0
            ||  (_cItems == 1 && _pItems->_ePostDataType == POSTDATA_LITERAL)) )
    {
        cb      = _cItems ? _pItems->_dwSize : 0;
        hGlobal = GlobalAlloc(GMEM_FIXED, cb);

        if (hGlobal == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        if (cb)
        {
            memcpy((void *)hGlobal, _pItems->_pszAnsi, cb);
        }

        // It is possible that two threads just did the same allocation, so
        // we enter a critical section and pick the first one.

        g_csDwnPost.Enter();

        if (_hGlobal == NULL)
        {
            _hGlobal  = hGlobal;
            _cbGlobal = cb;
        }
        else
        {
            GlobalFree(hGlobal);
            hGlobal = _hGlobal;
        }

        g_csDwnPost.Leave();

        Assert(_hGlobal != NULL);
        Assert(hGlobal == _hGlobal);
    }

    #if DBG==1
    if (IsPerfDbgEnabled(tagDwnPostAsStm))
        hGlobal = NULL;
    #endif

    if (hGlobal)
    {
        pbindinfo->stgmedData.tymed = TYMED_HGLOBAL;
        pbindinfo->stgmedData.hGlobal = _hGlobal;
        pbindinfo->cbstgmedData = cb;

    #if DBG==1
        if (IsPerfDbgEnabled(tagDwnPostNoRefs))
        {
            // This is not a thread-safe thing to do, but it is only used
            // for debugging when we suspect that the caller of GetBindInfo
            // is not properly releasing the STGMEDIUM and therefore leaking
            // the CDwnPost.  Turning this tag on allows us to isolate this
            // condition.

            _hGlobal = NULL;
        }
        else
    #endif
        {
            pbindinfo->stgmedData.pUnkForRelease = this;
            AddRef();
        }
    }
    else
    {
        CDwnPostStm * pDwnPostStm = new CDwnPostStm(this);

        if (pDwnPostStm == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        if (_cbGlobal == 0)
        {
            hr = THR(pDwnPostStm->ComputeSize(&_cbGlobal));

            if (hr)
            {
                pDwnPostStm->Release();
                goto Cleanup;
            }
        }

        pbindinfo->stgmedData.tymed = TYMED_ISTREAM;
        pbindinfo->stgmedData.pUnkForRelease = NULL;    //Release will be handled by pstm
        pbindinfo->stgmedData.pstm = pDwnPostStm;
        pbindinfo->cbstgmedData = _cbGlobal;
    }


Cleanup:
    PerfDbgLog(tagDwnPost, this, "-CDwnPost::GetBindInfo");
    RRETURN(hr);
}

HRESULT
CDwnPost::GetHashString(LPOLESTR *ppchHashString)
{
    TCHAR achBuf[9];
    HRESULT hr;
    
    hr = THR(Format(0, achBuf, ARRAY_SIZE(achBuf), _T("<0x>"), ComputeHash()));
    if (hr)
        goto Cleanup;

    hr = TaskAllocString(achBuf, ppchHashString);
    if (hr)
        goto Cleanup;
        
Cleanup:
    RRETURN(hr);
}

DWORD
CDwnPost::ComputeHash()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPostStm::ComputeHash");

    ULONG i;
    CPostItem * pItem;
    DWORD dwHash = 0;

    for (i = _cItems, pItem = _pItems; i>0; i--, pItem++)
    {
        //  Iterate
        Assert(pItem);
        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            dwHash = HashBytes(pItem->_pszAnsi, pItem->_dwSize, dwHash);
            break;

        case POSTDATA_FILENAME:
            dwHash = HashBytes(pItem->_pszWide, _tcslen(pItem->_pszWide), dwHash);
            break;
        }
    }


    PerfDbgLog1(tagDwnPost, this, "-CDwnPostStm::ComputeHash (dw=%ld)", dwHash);
    
    return(dwHash);
}

//+--------------------------------------------------------------------------//
//
//  Class:  CDwnPostStm
//
//---------------------------------------------------------------------------//

CDwnPostStm::CDwnPostStm(CDwnPost * pDwnPost)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::CDwnPostStm");

    _pDwnPost = pDwnPost;
    _pDwnPost->AddRef();
    _hFile = INVALID_HANDLE_VALUE;

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::CDwnPostStm");
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPostStm::Passivate, protected
//
//  Synopsis:   clean up the stream provider
//
//---------------------------------------------------------------------------//

void
CDwnPostStm::Passivate(void)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Passivate");

    if ( _hFile != INVALID_HANDLE_VALUE )
    {
        Verify(CloseHandle(_hFile));
    }

    ReleaseInterface(_pDwnPost);

    super::Passivate();

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::Passivate");
}

// CDwnPostStm (IUnknown) -----------------------------------------------------

STDMETHODIMP
CDwnPostStm::QueryInterface(REFIID iid, void ** ppv)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::QueryInterface");

    HRESULT hr;

    if (iid == IID_IUnknown || iid == IID_IStream)
    {
        *ppv = (IStream *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnPostStm::AddRef()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnPostStm::Release()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

// CDwnPostStm (IStream) ------------------------------------------------------

STDMETHODIMP CDwnPostStm::Clone(IStream ** ppStream)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Clone");

    HRESULT hr = E_NOTIMPL;
    *ppStream = NULL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Clone (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Commit(DWORD dwFlags)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Commit");

    HRESULT hr = S_OK;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Commit (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::CopyTo(IStream* pStream, ULARGE_INTEGER nBytes,
    ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::CopyTo");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::CopyTo (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::LockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::LockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::LockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Read(void HUGEP * pBuffer, ULONG nBytes, ULONG* pnBytesRead)
{
    PerfDbgLog1(tagDwnPostStm, this, "+CDwnPostStm::Read (cbReq=%ld)", nBytes);

    HRESULT hr = S_OK;
    BYTE * pbBuffer = (BYTE *)pBuffer;
    ULONG cbWritten = 0;

    if (pnBytesRead)
    {
        *pnBytesRead = 0;
    }

    if (pBuffer == NULL)
    {
        hr = E_POINTER;
        goto Cleanup;
    }

    if (nBytes == 0)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    while ( _uItem < _pDwnPost->_cItems && cbWritten < nBytes)
    {
        CPostItem * pItem;
        ULONG cb;
        ULONG cbStrLen;
        BOOL f;

        pItem = _pDwnPost->_pItems + _uItem;

        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            cbStrLen = pItem->_dwSize - _ulOffset;
            cb = min(cbStrLen, nBytes - cbWritten);
            memcpy(pbBuffer+cbWritten, pItem->_pszAnsi + _ulOffset, cb);

            cbWritten += cb;
            _ulOffset += cb;

            if ( cb == cbStrLen ) // or _ulOffset == strlen(pItem->_pszAnsi) ??
            {
                //  We consumed this section, switch to the next
                _ulOffset = 0;
                _uItem++;
            }
            break;

        case POSTDATA_FILENAME:

            cb = 0;

            //  Note: NetScape 3 doesn't mime64 encode the
            //        uploaded file, even if it is NOT text
            
            if ( _hFile == INVALID_HANDLE_VALUE )
            {
                DWORD dw;

                //  Open the file and get its size.
                //  If it fails, bail out of this section
                _hFile = CreateFile(pItem->_pszWide,
                                    GENERIC_READ,
                                    FILE_SHARE_READ | FILE_SHARE_WRITE, 
                                    NULL,
                                    OPEN_EXISTING,
                                    FILE_ATTRIBUTE_NORMAL,
                                    NULL);

                if ( _hFile == INVALID_HANDLE_VALUE )
                    goto FileError;

#ifndef WIN16
                dw = GetFileType(_hFile);
                if ( dw != FILE_TYPE_DISK )
                    goto FileError;
#endif // ndef WIN16

                cb = GetFileSize(_hFile, NULL);  //  Don't care about high DWORD, we don't handle
                                                //  that large files anyway.
                if ( cb == 0xFFFFFFFF )
                    goto FileError;
            }

            //  Here the file should be open and ripe for consumption
            f = ReadFile(_hFile, pbBuffer+cbWritten, nBytes - cbWritten, &cb, NULL);
            if ( !f )
                goto Win32Error;

            if ( cb < nBytes - cbWritten )
            {
                goto FileError;
            }

FinishSection:
            cbWritten += cb;
            break;

Win32Error:
            hr = GetLastWin32Error();
            //  Fall through

FileError:
            if ( _hFile != INVALID_HANDLE_VALUE )
            {
                Verify(CloseHandle(_hFile));
            }
            _hFile = INVALID_HANDLE_VALUE;
            _ulOffset = 0;
            _uItem++;

            goto FinishSection;
        }
    }

    Assert(cbWritten <= nBytes);

    if (pnBytesRead)
    {
        *pnBytesRead = cbWritten;
    }

    if (SUCCEEDED(hr) && cbWritten == 0)
    {
        hr = S_FALSE;
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog2(tagDwnPostStm, this, "-CDwnPostStm::Read (cbRead=%ld,hr=%lX)", cbWritten, hr);
    RRETURN1(hr, S_FALSE);
}


STDMETHODIMP CDwnPostStm::Revert()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Revert");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Revert (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Seek(LARGE_INTEGER nDisplacement, DWORD dwOrigin,
    ULARGE_INTEGER* piNewPosition)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Seek");

    HRESULT hr = E_FAIL;

    // We can only seek back to the beginning of the stream.
    if ( nDisplacement.LowPart == 0 && nDisplacement.HighPart == 0 && 
        dwOrigin == STREAM_SEEK_SET )
    {
        hr = S_OK;
        
        if ( _hFile != INVALID_HANDLE_VALUE )
        {
            Verify(CloseHandle(_hFile));
            _hFile = INVALID_HANDLE_VALUE;
        }

        _uItem = 0;
        _ulOffset = 0;
    }

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::SetSize(ULARGE_INTEGER nNewSize)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::SetSize");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::SetSize (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnPostStm::Stat(STATSTG * pStatStg, DWORD dwFlags)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Stat");

    memset(pStatStg, 0, sizeof(STATSTG));

    pStatStg->type           = STGTY_STREAM;
    pStatStg->mtime          =
    pStatStg->ctime          =
    pStatStg->atime          = _pDwnPost->_ftCreated;
    pStatStg->grfMode        = STGM_READ;
    pStatStg->cbSize.LowPart = _pDwnPost->_cbGlobal;

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::Stat (hr=0)");
    return(S_OK);
}

STDMETHODIMP CDwnPostStm::UnlockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::UnlockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::UnlockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Write(const void HUGEP * pBuffer, ULONG nBytes, 
    ULONG* pnBytesWritten)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Write");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnPostStm (Internal) -----------------------------------------------------

HRESULT
CDwnPostStm::ComputeSize(ULONG * pcb)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::ComputeSize");

    HRESULT hr = S_OK;
    ULONG i;
    CPostItem * pItem;
    ULONG cbSize = 0;

    Assert(_pDwnPost);

    for ( i = _pDwnPost->_cItems, pItem = _pDwnPost->_pItems;
          i > 0;
          i--, pItem++ )
    {
        //  Iterate
        Assert(pItem);
        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            cbSize += pItem->_dwSize;
            break;

        case POSTDATA_FILENAME:
            {
                HANDLE hFile;
                DWORD dw;

                hFile = CreateFile( pItem->_pszWide,
                                    GENERIC_READ,
                                    FILE_SHARE_READ | FILE_SHARE_WRITE, 
                                    NULL,
                                    OPEN_EXISTING,
                                    FILE_ATTRIBUTE_NORMAL,
                                    NULL);

                if ( hFile == INVALID_HANDLE_VALUE )
                    goto CloseFile;

#ifndef WIN16
                dw = GetFileType(hFile);
                if ( dw != FILE_TYPE_DISK )
                    goto CloseFile;
#endif // ndef WIN16

                dw = GetFileSize(hFile, NULL);  //  Don't care about high DWORD, we don't handle
                                                //  that large files anyway.
                if ( dw != 0xFFFFFFFF )
                {
#if NEVER
                    //  This is the way to compute the MIME64 encoded file size
                    //  We don't encode on fil eupload, so don't fudge the size either
                    DWORDLONG dwl = dw + 2;     //  padding
                    dwl /= 3;
                    dwl *= 4;
                    dwlSize += dwl;             //  TODO(laszlog):This doesn't count the newlines!
#else
                    cbSize += dw;
#endif
                }
CloseFile:
                if ( hFile != INVALID_HANDLE_VALUE )
                {
                    Verify(CloseHandle(hFile));
                }
            }
            break;
        }
    }

    *pcb = cbSize;

    PerfDbgLog2(tagDwnPostStm, this, "-CDwnPostStm::ComputeSize (cb=%ld,hr=%lX)", cbSize, hr);
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\dwncache.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       dwncache.cxx
//
//  Contents:   
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_BITS_HXX_
#define X_BITS_HXX_
#include "bits.hxx"
#endif

#ifndef X_CSS_HXX_
#define X_CSS_HXX_
#include "css.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_INETREG_H
#define X_INETREG_H
#include "inetreg.h"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnCache,     "Dwn", "! Trace DwnInfo cache")
PerfDbgTag(tagDwnCacheOff,  "Dwn", "! Disable DwnInfo cache")

MtDefine(GAryDwnInfo, PerProcess, "g_aryDwnInfo::_pv")
MtDefine(GAryDwnInfoCache, PerProcess, "g_aryDwnInfoCache::_pv")

// Types ----------------------------------------------------------------------

struct DWNINFOENTRY
{
    DWORD           dwKey;
    CDwnInfo *      pDwnInfo;
};

struct FINDINFO
{
    LPCTSTR         pchUrl;
    UINT            dt;
    DWORD           dwKey;
    UINT            cbUrl;
    UINT            iEnt;
    UINT            cEnt;
    CDwnInfo *      pDwnInfo;
    DWNINFOENTRY *  pde;
};

typedef CDataAry<DWNINFOENTRY> CDwnInfoAry;

// Globals --------------------------------------------------------------------

CDwnInfoAry         g_aryDwnInfo(Mt(GAryDwnInfo));            // Active references
CDwnInfoAry         g_aryDwnInfoCache(Mt(GAryDwnInfoCache));  // Cached references
ULONG               g_ulDwnInfoSize         = 0;
const ULONG         g_ulDwnInfoItemThresh   =  128 * 1024;
const ULONG         g_ulDwnInfoThreshBytes  = 1024 * 1024;
const LONG          g_ulDwnInfoThreshCount  = 128;
DWORD               g_dwDwnInfoLru          = 0;

#define HashData MSHTMLHashData // avoid conflict with shlwapi
void                HashData(LPBYTE pbData, DWORD cbData,
                        LPBYTE pbHash, DWORD cbHash);


// Debugging ------------------------------------------------------------------

#if DBG==1

void
DwnCacheInvariant()
{
    DWNINFOENTRY * pde, * pdeT;
    UINT cEnt, cEntT;
    DWORD dwKey, dwKeyPrev, dwSizeT;

    // For each entry in the active array, verify that:
    //      - all the keys are in sorted order
    //      - each key is correct (is a hash of the URL)
    //      - no two entries with the same URL+type have the same _dwRefresh
    //      - each active item is not in the cache array
    //      - no _pDwnInfoLock item is in the cache array
    //      - no _pDwnInfoLock item has a _pDwnInfoLock != NULL
    //      - no _pDwnInfoLock item is incomplete

    pde       = g_aryDwnInfo;
    cEnt      = g_aryDwnInfo.Size();
    dwKeyPrev = 0;

    for (; cEnt > 0; --cEnt, dwKeyPrev = pde->dwKey, ++pde)
    {
        Assert(pde->dwKey >= dwKeyPrev);
        
        HashData((BYTE *)pde->pDwnInfo->GetUrl(),
            _tcslen(pde->pDwnInfo->GetUrl()) * sizeof(TCHAR),
            (BYTE *)&dwKey, sizeof(DWORD));

        Assert(pde->dwKey == dwKey);

        pdeT  = pde + 1;
        cEntT = cEnt - 1;

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            if (pdeT->dwKey != dwKey)
                break;

            if (    StrCmpC(pde->pDwnInfo->GetUrl(), pdeT->pDwnInfo->GetUrl()) == 0
                &&  pde->pDwnInfo->GetType() == pdeT->pDwnInfo->GetType())
            {
                Assert(     pde->pDwnInfo->_fNoShare 
                        ||  pdeT->pDwnInfo->_fNoShare 
                        ||  !pde->pDwnInfo->AttachEarly(pde->pDwnInfo->GetType(),
                                pdeT->pDwnInfo->GetRefresh(),
                                pdeT->pDwnInfo->GetFlags(0xFFFFFFFF),
                                pdeT->pDwnInfo->GetBindf()));
            }
        }

        pdeT  = g_aryDwnInfoCache;
        cEntT = g_aryDwnInfoCache.Size();

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            Assert(pdeT->pDwnInfo != pde->pDwnInfo);
        }

        if (pde->pDwnInfo->GetDwnInfoLock())
        {
            pdeT  = g_aryDwnInfoCache;
            cEntT = g_aryDwnInfoCache.Size();
            
            for (; cEntT > 0; --cEntT, ++pdeT)
            {
                Assert(pdeT->pDwnInfo != pde->pDwnInfo->GetDwnInfoLock());
            }

            Assert(pde->pDwnInfo->GetDwnInfoLock()->GetDwnInfoLock() == NULL);
            Assert(pde->pDwnInfo->GetDwnInfoLock()->TstFlags(IMGLOAD_COMPLETE));
        }
    }

    // For each entry in the cache array, verify that:
    //      - all the keys are in sorted order
    //      - each key is correct (is a hash of the URL)
    //      - no two entries with the same URL+type exist in the cache
    //      - each cached item is not in the active array
    //      - each cached item is not locked by an active item
    //      - each cached item is complete
    //      - each cached item has the correct cache size
    //      - each cached item has _ulRefs == 0
    //      - each cached item has _pDwnInfoLock == NULL

    pde       = g_aryDwnInfoCache;
    cEnt      = g_aryDwnInfoCache.Size();
    dwKeyPrev = 0;
    dwSizeT   = 0;

    for (; cEnt > 0; --cEnt, ++pde)
    {
        dwSizeT += pde->pDwnInfo->GetCacheSize();

        Assert(pde->dwKey >= dwKeyPrev);
        
        HashData((BYTE *)pde->pDwnInfo->GetUrl(),
            _tcslen(pde->pDwnInfo->GetUrl()) * sizeof(TCHAR),
            (BYTE *)&dwKey, sizeof(DWORD));

        Assert(pde->dwKey == dwKey);

        pdeT  = pde + 1;
        cEntT = cEnt - 1;

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            if (pdeT->dwKey != dwKey)
                break;

            if (pde->pDwnInfo->GetType() == pdeT->pDwnInfo->GetType())
            {
                Assert(StrCmpC(pde->pDwnInfo->GetUrl(),
                    pdeT->pDwnInfo->GetUrl()) != 0);
            }
        }

        pdeT  = g_aryDwnInfo;
        cEntT = g_aryDwnInfo.Size();

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            Assert(pdeT->pDwnInfo != pde->pDwnInfo);
            Assert(pdeT->pDwnInfo->GetDwnInfoLock() != pde->pDwnInfo);
        }

        // The following assert was disabled (by dinartem) because it doesn't
        // always hold.  It is possible for CImgInfo::ComputeCacheSize to
        // return a higher value in the case where a transparency mask is
        // computed *after* the image is cached.  This can happen if an
        // animated GIF doesn't display all of its transparent frames before
        // it is cached.
        // 
        // Assert(pde->pDwnInfo->GetCacheSize() == pde->pDwnInfo->ComputeCacheSize());

        Assert(pde->pDwnInfo->TstFlags(DWNLOAD_COMPLETE));
        Assert(pde->pDwnInfo->GetRefs() == 0);
        Assert(pde->pDwnInfo->GetDwnInfoLock() == NULL);
    }

    Assert(dwSizeT == g_ulDwnInfoSize);
}

#endif

// Internal -------------------------------------------------------------------

BOOL
DwnCacheFind(CDwnInfoAry * pary, FINDINFO * pfi)
{
    DWNINFOENTRY *  pde;
    LPCTSTR         pchUrl;
    CDwnInfo *      pDwnInfo;
    DWORD           dwKey;
    UINT            cb1, cb2;

    if (pfi->pde == NULL)
    {
        DWNINFOENTRY *  pdeBase = *pary;
        LONG            iEntLo = 0, iEntHi = (LONG)pary->Size() - 1, iEnt;

        cb1 = pfi->cbUrl = _tcslen(pfi->pchUrl) * sizeof(TCHAR);

        HashData((BYTE *)pfi->pchUrl, pfi->cbUrl, (BYTE *)&dwKey, sizeof(DWORD));

        pfi->dwKey = dwKey;

        while (iEntLo <= iEntHi)
        {
            iEnt = (iEntLo + iEntHi) / 2;
            pde  = &pdeBase[iEnt];

            if (pde->dwKey == dwKey)
            {
                iEntLo = iEnt;

                while (iEnt > 0 && pde[-1].dwKey == dwKey)
                {
                    --iEnt, --pde;
                }
                
                pfi->iEnt = iEnt;
                pfi->cEnt = pary->Size() - iEnt - 1;
                pfi->pde  = pde;

                goto validate;
            }
            else if (pde->dwKey < dwKey)
                iEntLo = iEnt + 1;
            else
                iEntHi = iEnt - 1;
        }

        pfi->iEnt = iEntLo;

        return(FALSE);
    }
                
advance:

    if (pfi->cEnt == 0)
    {
        return(FALSE);
    }

    pfi->iEnt += 1;
    pfi->cEnt -= 1;
    pfi->pde  += 1;
    pde        = pfi->pde;
    cb1        = pfi->cbUrl;
    dwKey      = pfi->dwKey;

    if (pde->dwKey != dwKey)
    {
        return(FALSE);
    }

validate:

    pDwnInfo = pde->pDwnInfo;

    if (!pDwnInfo || pDwnInfo->GetType() != pfi->dt)
        goto advance;

    pchUrl = pDwnInfo->GetUrl();
    cb2    = _tcslen(pchUrl) * sizeof(TCHAR);

    if (    cb1 != cb2
        ||  memcmp(pchUrl, pfi->pchUrl, cb1) != 0)
        goto advance;

    pfi->pDwnInfo = pDwnInfo;

    return(TRUE);
}

void
DwnCachePurge()
{
    LONG            cb, cbItem;
    UINT            iEnt, cEnt, iLru = 0;
    DWORD           dwLru, dwLruItem;
    DWNINFOENTRY *  pde;
    CDwnInfo *      pDwnInfo;

    cb   = (LONG)(g_ulDwnInfoSize - g_ulDwnInfoThreshBytes);
    cEnt = g_aryDwnInfoCache.Size();

    if (cb <= 0 && cEnt > (UINT)g_ulDwnInfoThreshCount)
    {
        Assert(cEnt - g_ulDwnInfoThreshCount == 1);
        cb = 1;
    }

    while (cb > 0 && cEnt > 0)
    {
        dwLru = 0xFFFFFFFF;
        pde   = g_aryDwnInfoCache;

        for (iEnt = 0; iEnt < cEnt; ++iEnt, ++pde)
        {
            pDwnInfo  = pde->pDwnInfo;
            dwLruItem = pDwnInfo->GetLru();

            if (dwLru > dwLruItem)
            {
                dwLru = dwLruItem;
                iLru  = iEnt;
            }
        }

        if (dwLru != 0xFFFFFFFF)
        {
            pDwnInfo = g_aryDwnInfoCache[iLru].pDwnInfo;
            cbItem   = pDwnInfo->GetCacheSize();
            
            cb -= cbItem;
            g_ulDwnInfoSize -= cbItem;

            g_aryDwnInfoCache.Delete(iLru);
            cEnt -= 1;

            PerfDbgLog4(tagDwnCache, pDwnInfo,
                "DwnCachePurge DelCache cb=%ld [n=%ld,t=%ld] %ls",
                cbItem, cEnt, g_ulDwnInfoSize, pDwnInfo->GetUrl());

            IncrementSecondaryObjectCount(10);

            pDwnInfo->SubRelease();

            #if DBG==1
            DwnCacheInvariant();
            #endif
        }
    }

    Assert(g_ulDwnInfoSize <= g_ulDwnInfoThreshBytes);
    Assert(g_aryDwnInfoCache.Size() <= g_ulDwnInfoThreshCount);
}

void
DwnCacheDeinit(BOOL fShutDown /* = TRUE */)
{
    DWNINFOENTRY * pde = g_aryDwnInfoCache;
    UINT cEnt = g_aryDwnInfoCache.Size();

    #if DBG==1
    DwnCacheInvariant();
    #endif

    for (; cEnt > 0; --cEnt, ++pde)
    {
        #if DBG==1
        g_ulDwnInfoSize -= pde->pDwnInfo->GetCacheSize();
        #endif

        PerfDbgLog4(tagDwnCache, pde->pDwnInfo,
            "DwnCacheDeinit DelCache cb=%ld [n=%ld,t=%ld] %ls",
            pde->pDwnInfo->GetCacheSize(), cEnt - 1, g_ulDwnInfoSize,
            pde->pDwnInfo->GetUrl());

        IncrementSecondaryObjectCount(10);

        pde->pDwnInfo->SubRelease();
    }

    Assert(g_ulDwnInfoSize == 0);
    g_aryDwnInfoCache.DeleteAll();

    if (fShutDown)
    {
        AssertSz(g_aryDwnInfo.Size() == 0,
            "One or more CDwnInfo objects were leaked.  Most likely caused by "
            "leaking a CDoc or CImgElement.");

        g_aryDwnInfo.DeleteAll();
    }
}

void DwnCacheOnSettingsChange(WPARAM wParam, LPARAM lParam)
{
    if (lParam && !_tcscmp((TCHAR*)lParam, REGSTR_PATH_IEXPLORER))
    {
        g_csDwnCache.Enter();
        DwnCacheDeinit(FALSE);
        g_csDwnCache.Leave();
    }
}

int
FtCompare(FILETIME * pft1, FILETIME * pft2)
{
    return(pft1->dwHighDateTime > pft2->dwHighDateTime ? 1 :
        (pft1->dwHighDateTime < pft2->dwHighDateTime ? -1 :
        (pft1->dwLowDateTime > pft2->dwLowDateTime ? 1 :
        (pft1->dwLowDateTime < pft2->dwLowDateTime ? -1 : 0))));
}

// External -------------------------------------------------------------------

HRESULT
CDwnInfo::Create(UINT dt, DWNLOADINFO * pdli, CDwnInfo ** ppDwnInfo)
{
    CDwnInfo *  pDwnInfo    = NULL;
    FINDINFO    fi;
    BOOL        fScanActive = FALSE;
    HRESULT     hr          = S_OK;
    BOOL        fAttachLate = FALSE;
WHEN_DBG(BOOL   fNoShare    = FALSE; )
    

    g_csDwnCache.Enter();
    memset(&fi, 0, sizeof(FINDINFO));

    if (dt != DWNCTX_HTM && pdli->pchUrl && *pdli->pchUrl)
    {
        CDwnDoc * pDwnDoc = pdli->pDwnDoc;

        fi.pchUrl = pdli->pchUrl;
        fi.dt     = dt;

        if (fi.dt == DWNCTX_FILE)
            fi.dt = DWNCTX_BITS;

        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            fScanActive = TRUE;

            // If we have a bind-in-progress, don't attach early to an image in the cache.  We end
            // up abandoning the bind-in-progress and it never terminates properly.  We probably
            // could just hit it with an ABORT, but this case is not common enough to add yet
            // another state transition at this time (this case is when you hyperlink to a page
            // which turns out to actually be an image).

			if (pdli->fResynchronize || pdli->pDwnBindData)
            {
                WHEN_DBG( fNoShare = TRUE );
				break;
            }

            if (fi.pDwnInfo->AttachEarly(dt, pDwnDoc->GetRefresh(), pDwnDoc->GetDownf(), pDwnDoc->GetBindf()))
            {
                pDwnInfo = fi.pDwnInfo;
                pDwnInfo->AddRef();

                PerfDbgLog2(tagDwnCache, fi.pDwnInfo,
                    "DwnInfoCache AttachEarly %ld@%ls",
                    fi.pDwnInfo->GetRefresh(), fi.pDwnInfo->GetUrl());

                break;
            }
        }
    }

    if (pDwnInfo == NULL)
    {
        switch (dt)
        {
            case DWNCTX_HTM:
                pDwnInfo = new CHtmInfo();
                break;

            case DWNCTX_IMG:
                pDwnInfo = new CImgInfo();
                break;

            case DWNCTX_BITS:
            case DWNCTX_FILE:
                pDwnInfo = new CBitsInfo(dt);
                break;

            case DWNCTX_CSS:
                pDwnInfo = new CCssInfo(dt);
                break;

            default:
                AssertSz(FALSE, "Unknown DWNCTX type");
                break;
        }

        if (pDwnInfo == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(pDwnInfo->Init(pdli));

        if (hr == S_OK && dt != DWNCTX_HTM && *pDwnInfo->GetUrl())
        {
            DWNINFOENTRY de = { fi.dwKey, pDwnInfo };

            WHEN_DBG( pDwnInfo->_fNoShare = fNoShare );
            hr = THR(g_aryDwnInfo.InsertIndirect(fi.iEnt, &de));

            if (hr == S_OK)
            {
                PerfDbgLog2(tagDwnCache, pDwnInfo,
                    "DwnInfoCache InsActive %ld@%ls",
                    pDwnInfo->GetRefresh(), pDwnInfo->GetUrl());

                if (    dt == DWNCTX_IMG
                    &&  (pDwnInfo->GetBindf() & (BINDF_GETNEWESTVERSION|BINDF_NOWRITECACHE|BINDF_RESYNCHRONIZE|BINDF_PRAGMA_NO_CACHE)) == 0
                    &&  !pdli->pDwnBindData)
                {
                    UINT uScheme = GetUrlScheme(pDwnInfo->GetUrl());

                    if (uScheme == URL_SCHEME_FILE || uScheme == URL_SCHEME_HTTP || uScheme == URL_SCHEME_HTTPS)
                    {
                        fAttachLate = pDwnInfo->AttachByLastModEx(fScanActive, uScheme);
                    }
                }
            }
        }

        if (hr)
        {
            pDwnInfo->Release();
            goto Cleanup;
        }
    }

    #if DBG==1
    DwnCacheInvariant();
    #endif

    *ppDwnInfo = pDwnInfo;

Cleanup:

    g_csDwnCache.Leave();

    if (fAttachLate && dt == DWNCTX_IMG)
    {
        Assert(pdli->pDwnDoc);
        CDoc * pDoc = pdli->pDwnDoc->GetCDoc();
        if (pDoc)
        {
            CImgInfo *pImgInfo = (CImgInfo*)*ppDwnInfo;
            THR(pDoc->AddToPrivacyList(pImgInfo->GetUrl(), pImgInfo->GetPolicyRef(), pImgInfo->GetPrivacyFlags()));
        }

    }

    RRETURN(hr);
}

BOOL
CDwnInfo::AttachByLastMod(CDwnLoad * pDwnLoad, FILETIME * pft, BOOL fDoAttach)
{
    if (!_cstrUrl || !*_cstrUrl)
    {
        return(FALSE);
    }

    EnterCriticalSection();

    BOOL fRet = FALSE;

    if (pDwnLoad == _pDwnLoad)
    {
        _ftLastMod = *pft;

        if (fDoAttach)
        {
            g_csDwnCache.Enter();

            fRet = AttachByLastModEx(TRUE, URL_SCHEME_UNKNOWN);

            g_csDwnCache.Leave();
        }
    }

    LeaveCriticalSection();

    return(fRet);
}

BOOL
CDwnInfo::AttachByLastModEx(BOOL fScanActive, UINT uScheme)
{
    UINT        dt          = GetType();
    FINDINFO    fi          = { _cstrUrl, dt };
    CDwnInfo *  pDwnInfo    = NULL;
    BOOL        fGotLastMod = _ftLastMod.dwLowDateTime || _ftLastMod.dwHighDateTime;

    if (g_pHtmPerfCtl && (g_pHtmPerfCtl->dwFlags & HTMPF_DISABLE_IMGCACHE))
    {
        goto Cleanup;
    }

    if (fScanActive)
    {
        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            if (fi.pDwnInfo != this && fi.pDwnInfo->TstFlags(DWNLOAD_COMPLETE))
            {
                if (!fGotLastMod)
                {
                    if (!GetUrlLastModTime(_cstrUrl, uScheme, _dwBindf, &_ftLastMod))
                        goto Cleanup;

                    fGotLastMod = TRUE;
                }

                if (memcmp(&_ftLastMod, &fi.pDwnInfo->_ftLastMod, sizeof(FILETIME)) == 0)
                {
                    // If the active object is locking another object, then attach
                    // to the locked object in order to avoid chains of locked objects.

                    pDwnInfo = fi.pDwnInfo->_pDwnInfoLock;

                    if (pDwnInfo == NULL)
                        pDwnInfo = fi.pDwnInfo;

                    if (CanAttachLate(pDwnInfo))
                        pDwnInfo->SubAddRef();
                    else
                        pDwnInfo = NULL;

                    break;
                }
            }
        }
    }

    if (pDwnInfo == NULL)
    {
        memset(&fi, 0, sizeof(FINDINFO));
        fi.pchUrl = _cstrUrl;
        fi.dt     = dt;

        while (DwnCacheFind(&g_aryDwnInfoCache, &fi))
        {
            if (fi.pDwnInfo != this && CanAttachLate(fi.pDwnInfo))
            {
                if (!fGotLastMod)
                {
                    if (!GetUrlLastModTime(_cstrUrl, uScheme, _dwBindf, &_ftLastMod))
                        goto Cleanup;

                    fGotLastMod = TRUE;
                }
                
                if (memcmp(&_ftLastMod, &fi.pDwnInfo->_ftLastMod, sizeof(FILETIME)) == 0)
                {
                    Assert(!fi.pDwnInfo->_pDwnInfoLock);

                    pDwnInfo = fi.pDwnInfo;

                    g_ulDwnInfoSize -= pDwnInfo->GetCacheSize();
                    g_aryDwnInfoCache.Delete(fi.iEnt);

                    IncrementSecondaryObjectCount(10);

                    PerfDbgLog4(tagDwnCache, pDwnInfo,
                        "DwnInfoCache DelCache cb=%d [n=%ld,t=%ld] %ls",
                        pDwnInfo->GetCacheSize(), g_aryDwnInfoCache.Size(),
                        g_ulDwnInfoSize, pDwnInfo->GetUrl());

                    break;
                }
            }
        }
    }

    #if DBG==1
    DwnCacheInvariant();
    #endif

    if (pDwnInfo)
    {
        PerfDbgLog5(tagDwnCache, this,
            "DwnInfoCache %s %lX (%s) %ld@%ls",
            uScheme == URL_SCHEME_UNKNOWN ? "AttachLate" : "AttachEarlyByLastMod",
            pDwnInfo, pDwnInfo->GetRefs() ? "active" : "cached",
            GetRefresh(), GetUrl());

        AttachLate(pDwnInfo);
        pDwnInfo->SubRelease();
    }

Cleanup:
    return(!!pDwnInfo);
}

ULONG
CDwnInfo::Release()
{
    g_csDwnCache.Enter();

    ULONG ulRefs = (ULONG)InterlockedRelease();

    if (ulRefs == 0 && _cstrUrl && *_cstrUrl)
    {
        FINDINFO    fi       = { _cstrUrl, GetType() };
        CDwnInfo *  pDwnInfo = NULL;
        DWORD       cbSize;
        UINT        iEntDel  = 0;
        BOOL        fDeleted = FALSE;

        // We want to cache this object if it is completely loaded and
        // we either own the bits (don't have a lock on another object)
        // or we are locking another object, but it has no active references.
        // In the latter case, we actually want to cache the locked object,
        // not this object, because we don't allow entries in the cache which
        // have locks on other objects.

        if (!TstFlags(DWNLOAD_COMPLETE))
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; not complete) %ls",
                GetUrl());
        }
        else if (TstFlags(DWNF_DOWNLOADONLY))
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; download only) %ls",
                GetUrl());
        }
        else if (_ftLastMod.dwLowDateTime == 0 && _ftLastMod.dwHighDateTime == 0)
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; no _ftLastMod) %ls",
                GetUrl());
        }
        else if (_pDwnInfoLock)
        {
            if (_pDwnInfoLock->GetRefs() > 0)
            {
                PerfDbgLog1(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; locked and target is active) %ls",
                    GetUrl());
            }
            else
            {
                pDwnInfo = _pDwnInfoLock;
                pDwnInfo->SubAddRef();
            }
        }
#ifdef SWITCHES_ENABLED
        else if (IsSwitchNoImageCache())
        {
        }
#endif
#if DBG==1 || defined(PERFTAGS)
        else if (IsPerfDbgEnabled(tagDwnCacheOff))
        {
        }
#endif
        else if (g_pHtmPerfCtl && (g_pHtmPerfCtl->dwFlags & HTMPF_DISABLE_IMGCACHE))
        {
        }
        else
        {
            pDwnInfo = this;
            SubAddRef();
        }

        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            if (fi.pDwnInfo == this)
            {
                PerfDbgLog2(tagDwnCache, fi.pDwnInfo,
                    "DwnInfoCache DelActive %ld@%ls",
                    fi.pDwnInfo->GetRefresh(), fi.pDwnInfo->GetUrl());

                iEntDel = fi.iEnt;
                fDeleted = TRUE;

                if (pDwnInfo == NULL)
                    break;
            }
            else if (pDwnInfo && fi.pDwnInfo->_pDwnInfoLock == pDwnInfo)
            {
                // Some other active object has the target locked.  We don't
                // put it into the cache because it is still accessible
                // through that active object.

                PerfDbgLog2(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; active item %lX has us locked) %ls",
                    fi.pDwnInfo, GetUrl());

                pDwnInfo->SubRelease();
                pDwnInfo = NULL;

                if (fDeleted)
                    break;
            }
        }

        if (fDeleted)
        {
            g_aryDwnInfo.Delete(iEntDel);
        }

        AssertSz(fDeleted, "Can't find reference to CDwnInfo in active array");

        if (pDwnInfo)
        {
            cbSize = pDwnInfo->ComputeCacheSize();

            if (cbSize == 0)
            {
                PerfDbgLog1(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; ComputeCacheSize declined) %ls",
                    GetUrl());
            }
            else if (cbSize > g_ulDwnInfoItemThresh)
            {
                PerfDbgLog3(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; cb=%lX is too big) (max %lX) %ls",
                    cbSize, g_ulDwnInfoItemThresh, GetUrl());
            }
            else
            {
                pDwnInfo->SetCacheSize(cbSize);
                pDwnInfo->SetLru(++g_dwDwnInfoLru);

                memset(&fi, 0, sizeof(FINDINFO));
                fi.pchUrl = pDwnInfo->GetUrl();
                fi.dt     = pDwnInfo->GetType();
                
                while (DwnCacheFind(&g_aryDwnInfoCache, &fi))
                {
                    if (FtCompare(&fi.pDwnInfo->_ftLastMod, &pDwnInfo->_ftLastMod) > 0)
                    {
                        // The current entry in the cache has a newer mod date
                        // then the one we're trying to add.  Forget about
                        // ours.

                        PerfDbgLog1(tagDwnCache, this,
                            "DwnInfoCache Release (no cache; existing item is newer) %ls",
                            GetUrl());

                        goto endcache;
                    }

                    // Replace the older entry with this newer one.

                    g_ulDwnInfoSize -= fi.pDwnInfo->GetCacheSize();

                    PerfDbgLog4(tagDwnCache, fi.pDwnInfo,
                        "DwnInfoCache DelCache cb=%d [n=%ld,t=%ld] %ls",
                        fi.pDwnInfo->GetCacheSize(), g_aryDwnInfoCache.Size(),
                        g_ulDwnInfoSize, fi.pDwnInfo->GetUrl());

                    fi.pDwnInfo->SubRelease();
                    fi.pDwnInfo = pDwnInfo;
                    g_aryDwnInfoCache[fi.iEnt].pDwnInfo = pDwnInfo;
                    pDwnInfo = NULL;

                    g_ulDwnInfoSize += cbSize;

                    PerfDbgLog4(tagDwnCache, fi.pDwnInfo,
                        "DwnInfoCache InsCache cb=%d [n=%ld,t=%ld] %ls",
                        cbSize, g_aryDwnInfoCache.Size(), g_ulDwnInfoSize,
                        fi.pDwnInfo->GetUrl());

                    if (g_ulDwnInfoSize > g_ulDwnInfoThreshBytes)
                    {
                        DwnCachePurge();
                    }

                    #if DBG==1
                    DwnCacheInvariant();
                    #endif

                    goto endcache;
                }

                // No matching entry found, but now we know where to insert.

                DWNINFOENTRY de = { fi.dwKey, pDwnInfo };

                if (g_aryDwnInfoCache.InsertIndirect(fi.iEnt, &de) == S_OK)
                {
                    // Each CDwnInfo stored in the cache maintains a secondary
                    // reference count (inheriting from CBaseFT).  Since this
                    // object is now globally cached without active references,
                    // it should no longer maintain its secondary reference
                    // because it will be destroyed when the DLL is unloaded.

                    DecrementSecondaryObjectCount(10);
                    pDwnInfo = NULL;

                    g_ulDwnInfoSize += cbSize;

                    PerfDbgLog4(tagDwnCache, de.pDwnInfo,
                        "DwnInfoCache InsCache cb=%d [n=%ld,t=%ld] %ls",
                        cbSize, g_aryDwnInfoCache.Size(), g_ulDwnInfoSize,
                        de.pDwnInfo->GetUrl());

                    #if DBG==1
                    DwnCacheInvariant();
                    #endif

                    if (    g_ulDwnInfoSize > g_ulDwnInfoThreshBytes
                        ||  g_aryDwnInfoCache.Size() > g_ulDwnInfoThreshCount)
                    {
                        DwnCachePurge();
                    }
                }
            }

        endcache:

            if (pDwnInfo)
            {
                pDwnInfo->SubRelease();
                pDwnInfo = NULL;
            }

            #if DBG==1
            DwnCacheInvariant();
            #endif
        }
    }

    g_csDwnCache.Leave();

    if (ulRefs == 0)
    {
        Passivate();
        SubRelease();
    }

    return(ulRefs);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\dwnutil.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       dwnutil.cxx
//
//  Contents:   CBaseFT
//              CExecFT
//              CDwnChan
//              CDwnStm
//              CDwnCtx
//              CDwnInfo
//              CDwnLoad
//              MIMEINFO
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_BITS_HXX_
#define X_BITS_HXX_
#include "bits.hxx"
#endif

#ifndef X_POSTDATA_HXX_
#define X_POSTDATA_HXX_
#include "postdata.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_DWNNOT_H_
#define X_DWNNOT_H_
#include <dwnnot.h>
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifndef X_MARKUPCTX_HXX_
#define X_MARKUPCTX_HXX_
#include "markupctx.hxx"
#endif

#ifndef X_HTC_HXX_
#define X_HTC_HXX_
#include "htc.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifdef _MAC
STDAPI_(unsigned long)  RegisterMimeFormat(LPCSTR szFormat);
#ifdef __cplusplus
extern "C" {
#endif
WINBASEAPI BOOL WINAPI AfxTerminateThread(HANDLE hThread, DWORD dwExitCode);
#ifdef __cplusplus
}
#endif
#endif // _MAC

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnChan,   "Dwn",  "Trace CDwnChan")
PerfDbgTag(tagDwnStm,    "Dwn",  "Trace CDwnStm")
PerfDbgTag(tagDwnStmStm, "Dwn",  "Trace CDwnStmStm")
PerfDbgTag(tagDwnCtx,    "Dwn",  "Trace CDwnCtx")
PerfDbgTag(tagDwnInfo,   "Dwn",  "Trace CDwnInfo")
PerfDbgTag(tagDwnLoad,   "Dwn",  "Trace CDwnLoad")

// Performance Meters ---------------------------------------------------------

MtDefine(Dwn, Mem, "Download")
MtDefine(GlobalDwn, Dwn, "Global Download CS")
MtDefine(CDwnStm, Dwn, "CDwnStm")
MtDefine(CDwnStm_pbuf, CDwnStm, "CDwnStm buffer")
MtDefine(CDwnStmStm, Dwn, "CDwnStmStm")
MtDefine(CDwnInfo, Dwn, "CDwnInfo")
MtDefine(CDwnInfoGetFile, CDwnInfo, "CDwnInfo::GetFile")
MtDefine(CDwnInfo_arySink_pv, Dwn, "CDwnInfo::_arySink::_pv")
MtDefine(GetHeadersAndPostData, Dwn, "GetHeadersAndPostData")

// Globals --------------------------------------------------------------------

DEFINE_GLOBAL_CRITICAL(g_csDwnBindPend, 0); // CDwnBindData (SetPending, SetEof)
DEFINE_GLOBAL_CRITICAL(g_csDwnChanSig,  0); // CDwnChan (Signal)
DEFINE_GLOBAL_CRITICAL(g_csDwnStm,      0); // CDwnStm
DEFINE_GLOBAL_CRITICAL(g_csDwnDoc,      0); // CDwnDoc
DEFINE_GLOBAL_CRITICAL(g_csDwnPost,     0); // CDwnPost (GetStgMedium)
DEFINE_GLOBAL_CRITICAL(g_csHtmSrc,      1); // CHtmInfo (OnSource, ReadSource)
DEFINE_GLOBAL_CRITICAL(g_csDwnBindSig,  1); // CDwnBind (Signal)
DEFINE_GLOBAL_CRITICAL(g_csDwnBindTerm, 1); // CDwnBind (Terminate)
DEFINE_GLOBAL_CRITICAL(g_csDwnCache,    1); // CDwnInfo active and cache lists
DEFINE_GLOBAL_CRITICAL(g_csDwnTaskExec, 1); // CDwnTaskExec
DEFINE_GLOBAL_CRITICAL(g_csImgTaskExec, 1); // CImgTaskExec
DEFINE_GLOBAL_CRITICAL(g_csImgTransBlt, 1); // CImgBitsDIB::StretchBlt

CGlobalDwnCrit *CGlobalDwnCrit::g_gdcsList = NULL;

// CDwnCrit -------------------------------------------------------------------

#if DBG==1

CDwnCrit * g_pDwnCritHead;

CDwnCrit::CDwnCrit(LPCSTR pszName, UINT cLevel)
{
    _pszName        = pszName;
    _cLevel         = cLevel;
    _dwThread       = 0;
    _cEnter         = 0;
    _pDwnCritNext   = g_pDwnCritHead;
    g_pDwnCritHead  = this;
}

void
CDwnCrit::Enter()
{
    CCriticalSection::Enter();

    Assert(_dwThread == 0 || _dwThread == GetCurrentThreadId());

    if (_dwThread == 0)
    {
        _dwThread = GetCurrentThreadId();

        CDwnCrit * pDwnCrit = g_pDwnCritHead;

        for (; pDwnCrit; pDwnCrit = pDwnCrit->_pDwnCritNext)
        {
            if (pDwnCrit == this)
                continue;

            if (pDwnCrit->_dwThread != GetCurrentThreadId())
                continue;
                
            if (pDwnCrit->_cLevel > _cLevel)
                continue;

            char ach[256];

            wsprintfA(ach, "CDwnCrit: %s (%d) -> %s (%d) deadlock potential",
                pDwnCrit->_pszName, pDwnCrit->_cLevel, _pszName ? _pszName : "", _cLevel);

            AssertSz(0, ach);
        }
    }

    _cEnter += 1;
}

void
CDwnCrit::Leave()
{
    Assert(_dwThread == GetCurrentThreadId());
    Assert(_cEnter > 0);

    if (--_cEnter == 0)
    {
        _dwThread = 0;
    }

    CCriticalSection::Leave();
}

// Global Section
CGlobalDwnCrit::CGlobalDwnCrit(LPCSTR pszName, UINT cLevel) 
    : CDwnCrit(pszName, cLevel)
{
    AddToGlobalList();
}

#endif

CDwnCrit::CDwnCrit()
{
#if DBG==1
    _pszName        = NULL;
    _cLevel         = (UINT)-1;
    _dwThread       = 0;
    _cEnter         = 0;
    _pDwnCritNext   = NULL;
#endif
}

CDwnCrit::~CDwnCrit()
{
    Assert(_dwThread == 0);
    Assert(_cEnter == 0);
}

CGlobalDwnCrit::CGlobalDwnCrit()
{
    AddToGlobalList();
}


HRESULT
CGlobalDwnCrit::InitializeAll()
{
    HRESULT         hr = S_OK;
    CGlobalDwnCrit *pCurrent = g_gdcsList;

    while (pCurrent)
    {
        hr = pCurrent->Init();
        if (FAILED(hr))
            goto Cleanup;
        pCurrent = pCurrent->_gdcsNext;
    }

Cleanup:
    RRETURN(hr);
}


HRESULT
InitializeDownloadGlobals()
{
    return CGlobalDwnCrit::InitializeAll();
}

// CBaseFT --------------------------------------------------------------------

CBaseFT::CBaseFT(CRITICAL_SECTION * pcs)
{
    _ulRefs     = 1;
    _ulAllRefs  = 1;
    _pcs        = pcs;
    IncrementSecondaryObjectCount(10);
}

CBaseFT::~CBaseFT()
{
    AssertSz(_ulAllRefs == 0, "Ref count messed up in derived dtor?");
    AssertSz(_ulRefs == 0, "Ref count messed up in derived dtor?");
    DecrementSecondaryObjectCount(10);
}

void CBaseFT::Passivate()
{
    AssertSz(_ulRefs == 0,
        "CBaseFT::Passivate called unexpectedly or refcnt "
        "messed up in derived Passivate");
}

#if DBG==1
CBaseFT * g_pBaseFTTrace;
extern BOOL g_fDisableBaseTrace;

ULONG CBaseFT::AddRef()
{
    ULONG ulRefs = (ULONG)InterlockedIncrement((LONG *)&_ulRefs);

    if (!g_fDisableBaseTrace && (this == g_pBaseFTTrace))
    {
        TraceTag((0, "baseFT %x AR %d", this, _ulRefs));
        TraceCallers(0, 0, 12);
    }

    return(ulRefs);
}
#endif // DBG

ULONG CBaseFT::Release()
{
    ULONG ulRefs = (ULONG)InterlockedDecrement((LONG *)&_ulRefs);

#if DBG==1
    if (!g_fDisableBaseTrace && (this == g_pBaseFTTrace))
    {
        TraceTag((0, "baseFT %x Rel %d", this, _ulRefs));
        TraceCallers(0, 0, 12);
    }
#endif // DBG

    if (ulRefs == 0)
    {
        Passivate();
        AssertSz(_ulRefs==0, "CBaseFT::AddRef occured after last release");
        SubRelease();
    }

    return(ulRefs);
}

ULONG CBaseFT::SubRelease()
{
    ULONG ulRefs = (ULONG)InterlockedDecrement((LONG *)&_ulAllRefs);

    if (ulRefs == 0)
    {
        delete this;
    }

    return(ulRefs);
}

#if DBG==1

void CBaseFT::EnterCriticalSection()
{
    if (_pcs)
    {
        ::EnterCriticalSection(_pcs);

        Assert(_dwThread == 0 || _dwThread == GetCurrentThreadId());

        if (_dwThread == 0)
        {
            _dwThread = GetCurrentThreadId();
        }

        _cEnter += 1;
    }
}

void CBaseFT::LeaveCriticalSection()
{
    if (_pcs)
    {
        Assert(_dwThread == GetCurrentThreadId());
        Assert(_cEnter > 0);

        if (--_cEnter == 0)
        {
            _dwThread = 0;
        }

        ::LeaveCriticalSection(_pcs);
    }
}

BOOL CBaseFT::EnteredCriticalSection()
{
    //$TODO (dinartem) Doesn't work across shared _pcs
    return(TRUE);
//    return(!_pcs || _dwThread == GetCurrentThreadId());
}

#endif

// CExecFT --------------------------------------------------------------------

CExecFT::CExecFT(CRITICAL_SECTION * pcs)
    : CBaseFT(pcs)
{
    _hThread = NULL;
    _hEvent  = NULL;
    _hrInit  = S_OK;
}

CExecFT::~CExecFT()
{
    CloseThread(_hThread);
    if(_hEvent)
        Verify( CloseEvent(_hEvent) );
}

void CExecFT::Passivate()
{
}

DWORD WINAPI IF_WIN16(__loadds)
CExecFT::StaticThreadProc(void * pv)
{
    return(((CExecFT *)pv)->ThreadProc());
}

DWORD CExecFT::ThreadProc()
{   

#if _WIN64
     ITypeLib * pMSHTMLTypeLib = NULL;

    // This is an attempt to force the MSHTML.TLB to stay cached 
    // TODO: Version independent and/or localized version of loading the type library is needed

     // This is only done for the 64 bit case because it really slows us down in the 32 bit case. 
     // see IE6 bug 14173 for future work on this issue

    if (FAILED(LoadTypeLib(TEXT("MSHTML.TLB"),&pMSHTMLTypeLib)))
    {
        // If we have not loaded the type library then we haven't cached the file.
        Assert(0);
    }
#endif //WIN64

    _hrInit = ThreadInit();

    if (_hEvent)
    {
        Verify(SetEvent(_hEvent));
    }

    if (_hrInit == S_OK)
    {
        StartCAP();
        ThreadExec();
        StopCAP();
    }

    ThreadTerm();
    ThreadExit();

#if _WIN64
    if (pMSHTMLTypeLib)
    {
        pMSHTMLTypeLib->Release();
    }
#endif

    return(0);
}

void CExecFT::ThreadExit()
{
    SubRelease();
}

HRESULT CExecFT::Launch(BOOL fWait)
{
    DWORD dwResult;
#ifdef WIN16
    DWORD dwStackSize = 0x3000;
#else
    DWORD dwStackSize = 0;
#endif

    if (fWait)
    {
        _hEvent = CreateEventA(NULL, FALSE, FALSE, NULL);

        if (_hEvent == NULL)
            RRETURN(GetLastWin32Error());
    }

    SubAddRef();

    _hThread = CreateThread(NULL, dwStackSize, &CExecFT::StaticThreadProc, this, 0, &_dwThreadId);

    if (_hThread == NULL)
    {
        SubRelease();
        RRETURN(GetLastWin32Error());
    }

    if (fWait)
    {
        dwResult = WaitForSingleObject(_hEvent, INFINITE);

        Assert(dwResult == WAIT_OBJECT_0);

        CloseEvent(_hEvent);
        _hEvent = NULL;

        RRETURN(_hrInit);
    }

    return(S_OK);
}

void CExecFT::Shutdown(DWORD dwTimeOut)
{
    if (_hThread && GetCurrentThreadId() != _dwThreadId)
    {
        DWORD dwExitCode;

        WaitForSingleObject(_hThread, dwTimeOut);

#ifndef WIN16
        if (    GetExitCodeThread(_hThread, &dwExitCode)
            &&  dwExitCode == STILL_ACTIVE)
        {
            TerminateThread(_hThread, 1);
        }
#endif // ndef WIN16
    }
}

// CDwnChan -------------------------------------------------------------------

CDwnChan::CDwnChan(CRITICAL_SECTION * pcs)
    : super(pcs)
{
    PerfDbgLog(tagDwnChan, this, "CDwnChan::CDwnChan");

    _fSignalled = TRUE;
}

void
CDwnChan::Passivate()
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::Passivate");

    Disconnect();

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::Passivate");
}

void
CDwnChan::SetCallback(PFNDWNCHAN pfnCallback, void * pvCallback)
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::SetCallback %s");

#ifdef OBJCNTCHK
    DWORD dwObjCnt;
#endif

    HRESULT hr = AddRefThreadState(&dwObjCnt);

    Disconnect();

    if (hr == S_OK)
    {
        Assert(_fSignalled);

        _pts          = GetThreadState();
        _pfnCallback  = pfnCallback;
        _pvCallback   = pvCallback;
        _fSignalled   = FALSE;

#ifdef OBJCNTCHK
        _dwObjCnt     = dwObjCnt;
#endif
    }

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::SetCallback");
}

void
CDwnChan::Disconnect()
{
    if (_pts && (_pts == GetThreadState()))
    {
        PerfDbgLog(tagDwnChan, this, "+CDwnChan::Disconnect");

        THREADSTATE * pts;
        BOOL fSignalled;

        g_csDwnChanSig.Enter();

        fSignalled   = _fSignalled;
        pts          = _pts;
        _pts         = NULL;
        _pfnCallback = NULL;
        _pvCallback  = NULL;
        _fSignalled  = TRUE;

        g_csDwnChanSig.Leave();

        if (fSignalled)
        {
            GWKillMethodCallEx(pts, this, ONCALL_METHOD(CDwnChan, OnMethodCall, onmethodcall), 0);
        }

        ReleaseThreadState(&_dwObjCnt);

        PerfDbgLog(tagDwnChan, this, "-CDwnChan::Disconnect");
    }
}

void CDwnChan::Signal()
{
    if (!_fSignalled)
    {
        PerfDbgLog(tagDwnChan, this, "+CDwnChan::Signal");

        g_csDwnChanSig.Enter();

        if (!_fSignalled)
        {
            _fSignalled = TRUE;
            GWPostMethodCallEx(_pts, this, ONCALL_METHOD(CDwnChan, OnMethodCall, onmethodcall), 0, FALSE, GetOnMethodCallName());
        }

        g_csDwnChanSig.Leave();

        PerfDbgLog(tagDwnChan, this, "-CDwnChan::Signal");
    }
}

void CDwnChan::OnMethodCall(DWORD_PTR dwContext)
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::OnMethodCall");

    if (_fSignalled)
    {
        _fSignalled = FALSE;
        _pfnCallback(this, _pvCallback);
    }

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::OnMethodCall");
}

// CDwnStm --------------------------------------------------------------------

CDwnStm::CDwnStm(UINT cbBuf)
    : CDwnChan(g_csDwnStm.GetPcs())
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::CDwnStm");

    _cbBuf = cbBuf;

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::CDwnStm");
}

CDwnStm::~CDwnStm()
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::~CDwnStm");

    BUF * pbuf;
    BUF * pbufNext;

    for (pbuf = _pbufHead; pbuf; pbuf = pbufNext)
    {
        pbufNext = pbuf->pbufNext;
        MemFree(pbuf);
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::~CDwnStm");
}

HRESULT
CDwnStm::SetSeekable()
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::SetSeekable");

    _fSeekable = TRUE;

    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::SetSeekable (hr=%lX)", S_OK);
    return(S_OK);
}

HRESULT CDwnStm::Write(void * pv, ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Write (cb=%ld)", cb);

    void *  pvW;
    ULONG   cbW;
    HRESULT hr = S_OK;

    while (cb > 0)
    {
        hr = WriteBeg(&pvW, &cbW);
        if (hr)
            goto Cleanup;

        if (cbW > cb)
            cbW = cb;

        memcpy(pvW, pv, cbW);

        WriteEnd(cbW);

        pv = (BYTE *)pv + cbW;
        cb = cb - cbW;
    }

Cleanup:
    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT CDwnStm::WriteBeg(void ** ppv, ULONG * pcb)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::WriteBeg");

    BUF * pbuf = _pbufWrite;
    HRESULT hr = S_OK;

    if (pbuf == NULL)
    {
        pbuf = (BUF *)MemAlloc(Mt(CDwnStm_pbuf), offsetof(BUF, ab) + _cbBuf);

        if (pbuf == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        pbuf->pbufNext = NULL;
        pbuf->ib = 0;
        pbuf->cb = _cbBuf;

        g_csDwnStm.Enter();

        if (_pbufTail == NULL)
        {
            _pbufHead = pbuf;
            _pbufTail = pbuf;
        }
        else
        {
            _pbufTail->pbufNext = pbuf;
            _pbufTail = pbuf;
        }

        if (_pbufRead == NULL)
        {
            Assert(_ibRead == 0);
            _pbufRead = pbuf;
        }

        g_csDwnStm.Leave();

        _pbufWrite = pbuf;
    }

    Assert(pbuf->cb > pbuf->ib);

    *ppv = &pbuf->ab[pbuf->ib];
    *pcb = pbuf->cb - pbuf->ib;

Cleanup:
    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::WriteBeg (hr=%lX,*pcb=%ld)", hr, *pcb);
    RRETURN(hr);
}

void CDwnStm::WriteEnd(ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::WriteEnd (cb=%ld)", cb);

    if (cb > 0)
    {
        BUF *   pbuf = _pbufWrite;
        ULONG   ib   = pbuf->ib + cb;

        Assert(ib <= pbuf->cb);

        if (ib >= pbuf->cb)
        {
            _pbufWrite = NULL;
        }

        // As soon as pbuf->ib is written and matches pbuf->cb, the reader
        // can asynchronously read and free the buffer.  Therefore, pbuf
        // cannot be accessed after this next line.

        pbuf->ib  = ib;
        _cbWrite += cb;

        Signal();
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::WriteEnd");
}

void CDwnStm::WriteEof(HRESULT hrEof)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::WriteEof (hrEof=%lX)", hrEof);

    if (!_fEof || hrEof)
    {
        _hrEof = hrEof;
        _fEof  = TRUE;
        Signal();
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::WriteEof");
}

HRESULT CDwnStm::Read(void * pv, ULONG cb, ULONG * pcbRead)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Read (cb=%ld)", cb);

    void *  pvR;
    ULONG   cbR;
    ULONG   cbRead  = 0;
    HRESULT hr      = S_OK;

    while (cb > 0)
    {
        hr = ReadBeg(&pvR, &cbR);
        if (hr)
            break;

        if (cbR == 0)
            break;

        if (cbR > cb)
            cbR = cb;

        memcpy(pv, pvR, cbR);

        pv = (BYTE *)pv + cbR;
        cb = cb - cbR;
        cbRead += cbR;

        ReadEnd(cbR);
    }

    *pcbRead = cbRead;

    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::Read (hr=%lX,*pcb=%ld)", hr, *pcbRead);
    RRETURN(hr);
}

//
// Read from a stream the number of bytes or the max number of bytes available, 
// without updating the buffers and stream's read/write counters.
// Used for mime type sniffing during synchronous binding.
//
//
// We are not doing any head / tail buffer manipulation here which is OK for the
// cases we will be using this. 
//
HRESULT CDwnStm::ReadForMimeChk(void * pv, ULONG cb, ULONG * pcbRead)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Read (cb=%ld)", cb);

    void *  pvR;
    ULONG   cbR;
    ULONG   cbRead  = 0;

    BUF * pbuf = _pbufHead;     // buffer to start reading from.

    // while we still have to read more information
    while (cb > 0)
    {
        if (pbuf)
        {
            pvR = &pbuf->ab[0];
            cbR = pbuf->ib;
        }
        else
        {
            pvR = NULL;
            cbR = 0;
        }

        if (cbR == 0)
            break;

        if (cbR > cb)
            cbR = cb;

        memcpy(pv, pvR, cbR);

        pv = (BYTE *)pv + cbR;
        cb = cb - cbR;
        cbRead += cbR;

        // go to the next buffer if there is one
        if (pbuf->pbufNext)
        {
            pbuf = pbuf->pbufNext;
        }
    }

    *pcbRead = cbRead;

    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::ReadForMimeChk (*pcb=%ld)", *pcbRead);
    RRETURN(S_OK);
}

HRESULT CDwnStm::ReadBeg(void ** ppv, ULONG * pcb)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::ReadBeg");

    BUF * pbuf = _pbufRead;
    HRESULT hr = S_OK;

    if (_fEof && _hrEof != S_OK)
    {
        *ppv = NULL;
        *pcb = 0;
        hr   = _hrEof;
        goto Cleanup;
    }

    if (pbuf)
    {
        Assert(_ibRead <= pbuf->ib);

        *ppv = &pbuf->ab[_ibRead];
        *pcb = pbuf->ib - _ibRead;
    }
    else
    {
        *ppv = NULL;
        *pcb = 0;
    }

Cleanup:
    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::ReadBeg (hr=%lX,*pcb=%ld)", hr, *pcb);
    return(S_OK);
}

void CDwnStm::ReadEnd(ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::ReadEnd (cb=%ld)", cb);

    BUF * pbuf = _pbufRead;

    Assert(pbuf);
    Assert(_ibRead + cb <= pbuf->ib);

    _ibRead += cb;

    if (_ibRead >= pbuf->cb)
    {
        _ibRead = 0;

        g_csDwnStm.Enter();

        _pbufRead = pbuf->pbufNext;

        if (!_fSeekable)
        {
            _pbufHead = _pbufRead;
            
            if (_pbufHead == NULL)
                _pbufTail = NULL;
        }

        g_csDwnStm.Leave();

        if (!_fSeekable)
        {
            MemFree(pbuf);
        }
    }

    _cbRead += cb;

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::ReadEnd");
}

BOOL CDwnStm::ReadEof(HRESULT * phrEof)
{
    if (_fEof && (_hrEof || _cbRead == _cbWrite))
    {
        PerfDbgLog1(tagDwnStm, this, "CDwnStm::ReadEof (TRUE,hrEof=%lX)", _hrEof);
        *phrEof = _hrEof;
        return(TRUE);
    }
    else
    {
        PerfDbgLog(tagDwnStm, this, "CDwnStm::ReadEof (FALSE)");
        *phrEof = S_OK;
        return(FALSE);
    }
}

HRESULT CDwnStm::Seek(ULONG ib)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Seek (ib=%ld)", ib);

    BUF *   pbuf;
    ULONG   cb;
    HRESULT hr = S_OK;
    
    if (!_fSeekable || ib > _cbWrite)
    {
        Assert(FALSE);
        hr = E_FAIL;
        goto Cleanup;
    }

    pbuf = _pbufHead;
    cb   = ib;

    if (pbuf)
    {
        while (cb > pbuf->cb)
        {
            cb  -= pbuf->cb;
            pbuf = pbuf->pbufNext;
        }
    }
    
    g_csDwnStm.Enter();

    if (!pbuf || cb < pbuf->cb)
    {
        _pbufRead = pbuf;
        _ibRead   = cb;
    }
    else
    {
        _pbufRead = pbuf->pbufNext;
        _ibRead   = 0;
    }

    g_csDwnStm.Leave();

    _cbRead = ib;

Cleanup:
    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnStm::CopyStream(IStream * pstm, ULONG * pcbCopy)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::CopyStream");

    void *  pv;
    ULONG   cbW;
    ULONG   cbR;
    ULONG   cbRTotal;
    HRESULT hr = S_OK;

    cbRTotal = 0;
    
    for (;;)
    {
        hr = THR(WriteBeg(&pv, &cbW));
        if (hr)
            goto Cleanup;

        Assert(cbW > 0);

        hr = THR(pstm->Read(pv, cbW, &cbR));
        if (FAILED(hr))
            goto Cleanup;

        hr = S_OK;

        Assert(cbR <= cbW);

        WriteEnd(cbR);

        cbRTotal += cbR;

        if (cbR == 0)
            break;
    }

Cleanup:
    if (pcbCopy)
        *pcbCopy = cbRTotal;
        
    PerfDbgLog2(tagDwnStm, this, "+CDwnStm::CopyStream (hr=%lX,*pcb=%ld)", hr, cbRTotal);
    RRETURN(hr);
}

// CDwnStmStm -----------------------------------------------------------------

class CDwnStmStm : public CBaseFT, public IStream
{
    typedef CBaseFT super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CDwnStmStm))

                    CDwnStmStm(CDwnStm * pDwnStm);
    virtual void    Passivate();

    // IUnknown methods

    STDMETHOD (QueryInterface)(REFIID riid, void ** ppv);
    STDMETHOD_(ULONG,AddRef)();
    STDMETHOD_(ULONG,Release)();

    // IStream

    STDMETHOD(Clone)(IStream ** ppStream);
    STDMETHOD(Commit)(DWORD dwFlags);
    STDMETHOD(CopyTo)(IStream * pStream, ULARGE_INTEGER cb, ULARGE_INTEGER * pcbRead, ULARGE_INTEGER * pcbWrite);
    STDMETHOD(LockRegion)(ULARGE_INTEGER ib, ULARGE_INTEGER cb, DWORD dwLockType);
    STDMETHOD(Read)(void HUGEP * pv, ULONG cb, ULONG * pcb);
    STDMETHOD(Revert)();
    STDMETHOD(Seek)(LARGE_INTEGER ib, DWORD dwOrigin, ULARGE_INTEGER * pib);
    STDMETHOD(SetSize)(ULARGE_INTEGER cb);
    STDMETHOD(Stat)(STATSTG * pstatstg, DWORD dwFlags);
    STDMETHOD(UnlockRegion)(ULARGE_INTEGER ib, ULARGE_INTEGER cb, DWORD dwLockType);
    STDMETHOD(Write)(const void HUGEP * pv, ULONG cb, ULONG * pcb);

protected:

    CDwnStm *       _pDwnStm;
    ULONG           _ib;

};

CDwnStmStm::CDwnStmStm(CDwnStm * pDwnStm)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::CDwnStmStm");

    _pDwnStm = pDwnStm;
    _pDwnStm->AddRef();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::CDwnStmStm");
}

void
CDwnStmStm::Passivate(void)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Passivate");

    _pDwnStm->Release();

    super::Passivate();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::Passivate");
}

STDMETHODIMP
CDwnStmStm::QueryInterface(REFIID iid, void ** ppv)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::QueryInterface");

    HRESULT hr;

    if (iid == IID_IUnknown || iid == IID_IStream)
    {
        *ppv = (IStream *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnStmStm::AddRef()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnStmStm::Release()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP CDwnStmStm::Clone(IStream ** ppStream)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Clone");

    HRESULT hr = E_NOTIMPL;
    *ppStream = NULL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Clone (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Commit(DWORD dwFlags)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Commit");

    HRESULT hr = S_OK;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Commit (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::CopyTo(IStream * pStream, ULARGE_INTEGER cb,
    ULARGE_INTEGER * pcbRead, ULARGE_INTEGER * pcbWrite)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::CopyTo");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::CopyTo (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::LockRegion(ULARGE_INTEGER ib, ULARGE_INTEGER cb,
    DWORD dwLockType)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::LockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::LockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Read(void HUGEP * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog1(tagDwnStmStm, this, "+CDwnStmStm::Read (cbReq=%ld)", cb);

    ULONG   cbRead;
    HRESULT hr;

    if (pcb == NULL)
        pcb = &cbRead;

    *pcb = 0;

    hr = THR(_pDwnStm->Seek(_ib));
    if (hr)
        goto Cleanup;

    hr = THR(_pDwnStm->Read(pv, cb, pcb));
    if (hr)
        goto Cleanup;

    _ib += *pcb;

    if (*pcb == 0)
    {
        hr = S_FALSE;
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog2(tagDwnStmStm, this, "-CDwnStmStm::Read (*pcb=%ld,hr=%lX)", *pcb, hr);
    RRETURN1(hr, S_FALSE);
}

STDMETHODIMP CDwnStmStm::Revert()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Revert");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Revert (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Seek(LARGE_INTEGER ib, DWORD dwOrigin,
    ULARGE_INTEGER * pib)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Seek");

    HRESULT hr = E_NOTIMPL;

    if (dwOrigin == STREAM_SEEK_SET)
    {
        _ib = ib.LowPart;
        hr = S_OK;
    }

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::SetSize(ULARGE_INTEGER cb)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::SetSize");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::SetSize (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnStmStm::Stat(STATSTG * pstatstg, DWORD dwFlags)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Stat");

    memset(pstatstg, 0, sizeof(STATSTG));

    pstatstg->type           = STGTY_STREAM;
    pstatstg->grfMode        = STGM_READ;
    pstatstg->cbSize.LowPart = _pDwnStm->Size();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::Stat (hr=0)");
    return(S_OK);
}

STDMETHODIMP CDwnStmStm::UnlockRegion(ULARGE_INTEGER ib, ULARGE_INTEGER cb,
    DWORD dwLockType)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::UnlockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::UnlockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Write(const void HUGEP * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Write");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CreateStreamOnDwnStm(CDwnStm * pDwnStm, IStream ** ppStream)
{
    *ppStream = new CDwnStmStm(pDwnStm);
    RRETURN(*ppStream ? S_OK : E_OUTOFMEMORY);
}

// CDwnCtx --------------------------------------------------------------------

#if DBG==1

void
CDwnCtx::EnterCriticalSection()
{
    ((CDwnCrit *)GetPcs())->Enter();
}

void
CDwnCtx::LeaveCriticalSection()
{
    ((CDwnCrit *)GetPcs())->Leave();
}

BOOL
CDwnCtx::EnteredCriticalSection()
{
    return(((CDwnCrit *)GetPcs())->IsEntered());
}

#endif

void
CDwnCtx::Passivate()
{
    PerfDbgLog(tagDwnCtx, this, "+CDwnCtx::Passivate");

    SetLoad(FALSE, NULL, FALSE);

    super::Passivate();

    if (_pDwnInfo)
        _pDwnInfo->DelDwnCtx(this);

    ClearInterface(&_pProgSink);

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::Passivate");
}

LPCTSTR
CDwnCtx::GetUrl()
{
    return(_pDwnInfo ? _pDwnInfo->GetUrl() : g_Zero.ach);
}

LPCTSTR
CDwnCtx::GetRedirectedUrl()
{
    return(_pDwnInfo ? _pDwnInfo->GetRedirectedUrl() : g_Zero.ach);
}

const MIMEINFO *
CDwnCtx::GetMimeInfo()
{
    return(_pDwnInfo ? _pDwnInfo->GetMimeInfo() : NULL);
}

HRESULT
CDwnCtx::GetFile(LPTSTR * ppch)
{
    *ppch = NULL;
    RRETURN(_pDwnInfo ? _pDwnInfo->GetFile(ppch) : E_FAIL);
}

FILETIME
CDwnCtx::GetLastMod()
{
    if (_pDwnInfo)
    {
        return _pDwnInfo->GetLastMod();
    }
    else
    {
        FILETIME ftZ = {0};
        return ftZ;
    }
}

DWORD
CDwnCtx::GetSecFlags()
{
    return(_pDwnInfo ? _pDwnInfo->GetSecFlags() : 0);
}

HRESULT
CDwnCtx::SetProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnCtx, this, "+CDwnCtx::SetProgSink");

    HRESULT     hr = S_OK;

    EnterCriticalSection();

#if DBG == 1
    if (pProgSink)
    {
        if (!_pDwnInfo)
        {
            TraceTag((tagWarning, "CDwnCtx::SetProgSink called with no _pDwnInfo"));
            TraceCallers(tagWarning, 0, 6);
        }
        else
        {
            if (_pDwnInfo->GetFlags(DWNF_STATE) & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
            {
                TraceTag((tagWarning, "CDwnCtx::SetProgSink called when _pDwnInfo is already done"));
                TraceCallers(tagWarning, 0, 6);
            }
        }
    }
#endif

    if (_pDwnInfo)
    {
        if (pProgSink)
        {
            hr = THR(_pDwnInfo->AddProgSink(pProgSink));
            if (hr)
                goto Cleanup;
        }

        if (_pProgSink)
        {
            _pDwnInfo->DelProgSink(_pProgSink);
        }

    }

    ReplaceInterface(&_pProgSink, pProgSink);

Cleanup:
    LeaveCriticalSection();
    PerfDbgLog1(tagDwnCtx, this, "-CDwnCtx::SetProgSink (hr=%lX)", hr);
    RRETURN(hr);
}

ULONG
CDwnCtx::GetState(BOOL fClear)
{
    PerfDbgLog1(tagDwnCtx, this, "+CDwnCtx::GetState (fClear=%s)",
        fClear ? "TRUE" : "FALSE");

    DWORD dwState;

    EnterCriticalSection();

    dwState = _wChg;

    if (_pDwnInfo)
    {
        dwState |= _pDwnInfo->GetFlags(DWNF_STATE);
    }

    if (fClear)
    {
        _wChg = 0;
    }

    LeaveCriticalSection();

    PerfDbgLog1(tagDwnCtx, this, "-CDwnCtx::GetState (dwState=%08lX)", dwState);
    return(dwState);
}

void
CDwnCtx::Signal(WORD wChg)
{
    PerfDbgLog1(tagDwnCtx, this, "+CDwnCtx::Signal (wChg=%04lX)", wChg);

    Assert(EnteredCriticalSection());

    wChg &= _wChgReq;   // Only light up requested bits
    wChg &= ~_wChg;     // Don't light up bits already on

    if (wChg)
    {
        _wChg |= (WORD)wChg;
        super::Signal();
    }

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::Signal");
}

void
CDwnCtx::SetLoad(BOOL fLoad, DWNLOADINFO * pdli, BOOL fReload)
{
    PerfDbgLog2(tagDwnCtx, this, "+CDwnCtx::SetLoad (fLoad=%s,fReload=%s)",
        fLoad ? "TRUE" : "FALSE", fReload ? "TRUE" : "FALSE");

    if (    !!fLoad != !!_fLoad
        ||  (fLoad && _fLoad && fReload))
    {
        if (    fLoad 
            &&  !pdli->pDwnBindData 
            &&  !pdli->pmk 
            &&  !pdli->pstm 
            &&  !pdli->pchUrl
            &&  !pdli->fClientData)
        {
            pdli->pchUrl = _pDwnInfo->GetUrl();
        }

        _pDwnInfo->SetLoad(this, fLoad, fReload, pdli);
    }

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::SetLoad");
}

CDwnLoad *
CDwnCtx::GetDwnLoad()
{
    CDwnLoad * pDwnLoadRet = NULL;

    EnterCriticalSection();
    if (_pDwnInfo && _pDwnInfo->_pDwnLoad)
    {
        pDwnLoadRet = _pDwnInfo->_pDwnLoad;
        pDwnLoadRet->AddRef();
    }
    LeaveCriticalSection();

    return pDwnLoadRet;
}

HRESULT
NewDwnCtx(UINT dt, BOOL fLoad, DWNLOADINFO * pdli, CDwnCtx ** ppDwnCtx)
{
    PerfDbgLog2(tagDwnCtx, NULL, "+NewDwnCtx (dt=%d,fLoad=%s)", dt, fLoad ? "TRUE" : "FALSE");

    CDwnInfo *  pDwnInfo;
    CDwnCtx *   pDwnCtx;
    HRESULT     hr;

    hr = THR(CDwnInfo::Create(dt, pdli, &pDwnInfo));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnInfo->NewDwnCtx(&pDwnCtx));

    if (hr == S_OK)
    {
        pDwnInfo->AddDwnCtx(pDwnCtx);        
    }

    pDwnInfo->Release();

    if (hr)
        goto Cleanup;

    if (fLoad)
    {
        pDwnCtx->SetLoad(TRUE, pdli, FALSE);
    }

    *ppDwnCtx = pDwnCtx;

Cleanup:
    PerfDbgLog1(tagDwnCtx, NULL, "-NewDwnCtx (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnInfo -------------------------------------------------------------------

CDwnInfo::CDwnInfo()
    : CBaseFT(_cs.GetPcs())
{
}

CDwnInfo::~CDwnInfo()
{
    if (_pDwnInfoLock)
        _pDwnInfoLock->SubRelease();
}

void
CDwnInfo::Passivate()
{
    EnterCriticalSection();

#if DBG == 1
    _fPassive = TRUE;
#endif

    if (_arySink.Size() > 0)
    {
        SINKENTRY * pSinkEntry = _arySink;
        UINT cSink = _arySink.Size();

        for (; cSink > 0; --cSink, ++pSinkEntry)
        {
            if (pSinkEntry->dwCookie)
                pSinkEntry->pProgSink->DelProgress(pSinkEntry->dwCookie);
            pSinkEntry->pProgSink->Release();
        }

        _arySink.SetSize(0);
    }

    LeaveCriticalSection();
}

HRESULT
CDwnInfo::Init(DWNLOADINFO * pdli)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::Init");

    CDwnDoc * pDwnDoc = pdli->pDwnDoc;
    HRESULT hr;

    hr = THR(_cs.Init());
    if (hr)
        goto Cleanup;

    hr = THR(_cstrUrl.Set(pdli->pchUrl));
    if (hr)
        goto Cleanup;

    _dwBindf   = pDwnDoc->GetBindf();
    _dwRefresh = pdli->fResynchronize ? IncrementLcl() : pDwnDoc->GetRefresh();
    _dwFlags   = DWNLOAD_NOTLOADED | (pDwnDoc->GetDownf() & ~DWNF_STATE);

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "-CDwnInfo::Init (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::DelProgSinks()
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelProgSinks");

    EnterCriticalSection();

    for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
            pDwnCtx = pDwnCtx->_pDwnCtxNext)
    {
        Assert(pDwnCtx->_pDwnInfo == this);
        pDwnCtx->SetProgSink(NULL);
    }

    LeaveCriticalSection();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelProgSinks");
}


void
CDwnInfo::AddDwnCtx(CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::AddDwnCtx");

    AddRef();

    EnterCriticalSection();

    pDwnCtx->_pDwnInfo    = this;
    pDwnCtx->_pDwnCtxNext = _pDwnCtxHead;
    _pDwnCtxHead          = pDwnCtx;
    pDwnCtx->SetPcs(GetPcs());

    LeaveCriticalSection();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::AddDwnCtx");
}

void
CDwnInfo::DelDwnCtx(CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelDwnCtx");

    EnterCriticalSection();

    CDwnCtx ** ppDwnCtx = &_pDwnCtxHead;

    for (; *ppDwnCtx; ppDwnCtx = &(*ppDwnCtx)->_pDwnCtxNext)
    {
        if (*ppDwnCtx == pDwnCtx)
        {
            *ppDwnCtx = pDwnCtx->_pDwnCtxNext;

            DelProgSink(pDwnCtx->_pProgSink);
            
            Assert(pDwnCtx->_pDwnInfo == this);
            pDwnCtx->_pDwnInfo = NULL;
            goto found;
        }
    }

    AssertSz(FALSE, "Couldn't find CDwnCtx in CDwnInfo list");

found:
    LeaveCriticalSection();

    Release();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelDwnCtx");
}

HRESULT
CDwnInfo::GetFile(LPTSTR * ppch)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::GetFile");

    HRESULT hr;
    LPCTSTR pchUrl = GetUrl();

    *ppch = NULL;

    if (_tcsnipre(_T("file"), 4, pchUrl, -1))
    {
        TCHAR achPath[MAX_PATH];
        DWORD cchPath;

        hr = THR(CoInternetParseUrl(pchUrl, PARSE_PATH_FROM_URL, 0,
                    achPath, ARRAY_SIZE(achPath), &cchPath, 0));
        if (hr)
            goto Cleanup;

        hr = THR(MemAllocString(Mt(CDwnInfoGetFile), achPath, ppch));
    }
    else
    {
        BYTE                        buf[MAX_CACHE_ENTRY_INFO_SIZE];
        INTERNET_CACHE_ENTRY_INFO * pInfo = (INTERNET_CACHE_ENTRY_INFO *) buf;
        DWORD                       cInfo = sizeof(buf);

        if (RetrieveUrlCacheEntryFile(pchUrl, pInfo, &cInfo, 0))
        {
            DoUnlockUrlCacheEntryFile(pchUrl, 0);
            hr = THR(MemAllocString(Mt(CDwnInfoGetFile),
                        pInfo->lpszLocalFileName, ppch));
        }
        else
        {
            hr = E_FAIL;
        }
    }

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::GetFile (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::Signal(WORD wChg)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::Signal (wChg=%04lX)", wChg);

    if (_pDwnCtxHead)
    {
        EnterCriticalSection();

        for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
                pDwnCtx = pDwnCtx->_pDwnCtxNext)
        {
            pDwnCtx->Signal(wChg);
        }

        LeaveCriticalSection();
    }

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::Signal");
}

void
CDwnInfo::SetLoad(CDwnCtx * pDwnCtx, BOOL fLoad, BOOL fReload,
    DWNLOADINFO * pdli)
{
    PerfDbgLog2(tagDwnInfo, this, "+CDwnInfo::SetLoad (fLoad=%d,fReload=%d)", fLoad, fReload);

    CDwnLoad * pDwnLoadOld = NULL;
    CDwnLoad * pDwnLoadNew = NULL;
    HRESULT hr = S_OK;

    Assert(!EnteredCriticalSection());

    EnterCriticalSection();

    int cLoad = fReload ? (pDwnCtx->_fLoad ? 0 : 1) : (fLoad ? 1 : -1);

    if (cLoad == 0 && !(TstFlags(DWNLOAD_ERROR | DWNLOAD_STOPPED)))
        goto Cleanup;

    Assert(!(_cLoad == 0 && cLoad == -1));

    _cLoad += cLoad;
    pDwnCtx->_fLoad = fLoad;

    #if DBG==1
    {
        UINT        cLoad    = 0;
        CDwnCtx *   pDwnCtxT = _pDwnCtxHead;

        for (; pDwnCtxT; pDwnCtxT = pDwnCtxT->_pDwnCtxNext)
        {
            cLoad += !!pDwnCtxT->_fLoad;
        }

        AssertSz(cLoad == _cLoad, "CDwnInfo _cLoad is inconistent with "
            "sum of CDwnCtx _fLoad");
    }
    #endif

    if (    (cLoad  > 0 && _cLoad == 1 && !TstFlags(DWNLOAD_COMPLETE))
        ||  (cLoad == 0 && _cLoad  > 0))
    {
        if (!TstFlags(DWNLOAD_NOTLOADED))
        {
            Abort(E_ABORT, &pDwnLoadOld);
            Reset();
        }
        else
        {
            StartProgress();
        }

        Assert(_pDwnLoad == NULL);

        UpdFlags(DWNLOAD_MASK, DWNLOAD_LOADING);

        hr = THR(NewDwnLoad(&_pDwnLoad));

        if (hr == S_OK)
            hr = THR(_pDwnLoad->Init(pdli, this));

        if (hr == S_OK)
        {
            pDwnLoadNew = _pDwnLoad;
            pDwnLoadNew->AddRef();
        }
        else
        {
            Abort(hr, &pDwnLoadOld);
        }
    }
    else if (cLoad < 0 && _cLoad == 0)
    {
        Abort(S_OK, &pDwnLoadOld);
    }

Cleanup:
    LeaveCriticalSection();

    Assert(!EnteredCriticalSection());

    if (pDwnLoadOld)
        pDwnLoadOld->Release();

    if (pDwnLoadNew)
    {
        pDwnLoadNew->SetCallback();
        pDwnLoadNew->Release();
    }
            
    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::SetLoad");
}

void
CDwnInfo::OnLoadDone(CDwnLoad * pDwnLoad, HRESULT hrErr)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::OnLoadDone (hrErr=%lX)", hrErr);

    Assert(!EnteredCriticalSection());
    
    EnterCriticalSection();

    if (pDwnLoad == _pDwnLoad)
    {
        OnLoadDone(hrErr);
        _pDwnLoad = NULL;
    }
    else
    {
        pDwnLoad = NULL;
    }

    LeaveCriticalSection();

    if (pDwnLoad)
        pDwnLoad->Release();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::OnLoadDone");
}

void
CDwnInfo::Abort(HRESULT hrErr, CDwnLoad ** ppDwnLoad)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::Abort (hrErr=%lX)", hrErr);

    Assert(EnteredCriticalSection());

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, hrErr ? DWNLOAD_ERROR : DWNLOAD_STOPPED);
        Signal(IMGCHG_COMPLETE);
    }

    *ppDwnLoad = _pDwnLoad;
    _pDwnLoad  = NULL;

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::Abort");
}

HRESULT
CDwnInfo::AddProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::AddProgSink");

    Assert(EnteredCriticalSection());
    Assert(!_fPassive);

    SINKENTRY * pSinkEntry  = _arySink;
    UINT        cSink       = _arySink.Size();
    DWORD       dwCookie;
    HRESULT     hr = S_OK;

    for (; cSink > 0; --cSink, ++pSinkEntry)
    {
        if (pSinkEntry->pProgSink == pProgSink)
        {
            pSinkEntry->ulRefs += 1;
            goto Cleanup;
        }
    }

    hr = THR(_arySink.AppendIndirect(NULL, &pSinkEntry));
    if (hr)
        goto Cleanup;

    // Don't add the progress if we're still at the (nonpending) NOTLOADED state
    
    if (!TstFlags(DWNLOAD_NOTLOADED))
    {
        hr = THR(pProgSink->AddProgress(GetProgSinkClass(), &dwCookie));

        if (hr == S_OK && _pDwnLoad)
        {
            hr = THR(_pDwnLoad->RequestProgress(pProgSink, dwCookie));

            if (hr)
            {
                pProgSink->DelProgress(dwCookie);
                dwCookie = 0;
            }
        }
    }
    else
    {
        dwCookie = 0; // not a valid cookie
    }

    if (hr)
    {
        _arySink.Delete(_arySink.Size() - 1);
        goto Cleanup;
    }
    
    pSinkEntry->pProgSink = pProgSink;
    pSinkEntry->ulRefs    = 1;
    pSinkEntry->dwCookie  = dwCookie;
    pProgSink->AddRef();

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "-CDwnLoad::AddProgSink (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::StartProgress()
{
    SINKENTRY * pSinkEntry  = _arySink;
    UINT        cSink       = _arySink.Size();
    HRESULT     hr;

    Assert(TstFlags(DWNLOAD_NOTLOADED));
    
    for (; cSink; --cSink, ++pSinkEntry)
    {
        Assert(pSinkEntry->ulRefs && !pSinkEntry->dwCookie);
        
        hr = THR(pSinkEntry->pProgSink->AddProgress(GetProgSinkClass(), &(pSinkEntry->dwCookie)));

        if (hr == S_OK && _pDwnLoad)
        {
            hr = THR(_pDwnLoad->RequestProgress(pSinkEntry->pProgSink, pSinkEntry->dwCookie));

            if (hr)
            {
                pSinkEntry->pProgSink->DelProgress(pSinkEntry->dwCookie);
                pSinkEntry->dwCookie = 0;
            }
        }
    }
}


void
CDwnInfo::DelProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelProgSink");

    Assert(EnteredCriticalSection());

    SINKENTRY * pSinkEntry = _arySink;
    UINT cSink = _arySink.Size();

    for (; cSink > 0; --cSink, ++pSinkEntry)
    {
        if (pSinkEntry->pProgSink == pProgSink)
        {
            if (--pSinkEntry->ulRefs == 0)
            {
                if (pSinkEntry->dwCookie)
                    pProgSink->DelProgress(pSinkEntry->dwCookie);
                pProgSink->Release();
                _arySink.Delete(_arySink.Size() - cSink);
            }
            break;
        }
    }

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelProgSink");
}

HRESULT
CDwnInfo::SetProgress(DWORD dwFlags, DWORD dwState,
    LPCTSTR pch, DWORD dwIds, DWORD dwPos, DWORD dwMax)
{
    if (dwFlags && _arySink.Size())
    {
        EnterCriticalSection();

        SINKENTRY * pSinkEntry = _arySink;
        UINT cSink = _arySink.Size();

        for (; cSink > 0; --cSink, ++pSinkEntry)
        {
            pSinkEntry->pProgSink->SetProgress(pSinkEntry->dwCookie,
                dwFlags, dwState, pch, dwIds, dwPos, dwMax);
        }

        LeaveCriticalSection();
    }

    return S_OK;
}


// CDwnLoad ----------------------------------------------------------------

CDwnLoad::~CDwnLoad()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::~CDwnLoad");

    if (_pDwnInfo)
        _pDwnInfo->SubRelease();

    if (_pDwnBindData)
        _pDwnBindData->Release();

    if (_pDownloadNotify)
        _pDownloadNotify->Release();

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::~CDwnLoad");
}

HRESULT
CDwnLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo,
    UINT idsLoad, DWORD dwFlagsExtra)
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::Init");
    
    HRESULT hr;
    TCHAR *pchAlloc = NULL;
    const TCHAR *pchUrl;

    Assert(!_pDwnInfo && !_pDwnBindData);
    Assert(!_pDownloadNotify);

    _cDone    = 1;
    _idsLoad  = idsLoad;
    _pDwnInfo = pDwnInfo;
    _pDwnInfo->SubAddRef();

    SetPcs(_pDwnInfo->GetPcs());

    // Only notify IDownloadNotify if load is _NOT_ from
    // an IStream, an existing bind context, or client-supplied data
    
    _pDownloadNotify = pdli->pDwnDoc && !pdli->pstm && !pdli->pbc && !pdli->fClientData ? pdli->pDwnDoc->GetDownloadNotify() : NULL;

    if (_pDownloadNotify)
    {
        _pDownloadNotify->AddRef();

        pchUrl = pdli->pchUrl;
        
        // If all we have is a moniker, we can try to extract the URL anyway
        if (!pchUrl && pdli->pmk)
        {
            hr = THR(pdli->pmk->GetDisplayName(NULL, NULL, &pchAlloc));
            if (hr)
                goto Cleanup;

            pchUrl = pchAlloc;
        }
        
//$ WIN64: IDownloadNotify::DownloadStart needs a DWORD_PTR as second argument

        hr = THR_NOTRACE(_pDownloadNotify->DownloadStart(pchUrl, (DWORD)(DWORD_PTR)this, pDwnInfo->GetType(), 0));
        if (hr)
            goto Cleanup;
    }

    hr = THR(NewDwnBindData(pdli, &_pDwnBindData, dwFlagsExtra));
    if( hr )
        goto Cleanup;

    // initial guess for security based on url (may be updated in onbindheaders)
    _pDwnInfo->SetSecFlags(_pDwnBindData->GetSecFlags());

Cleanup:
    CoTaskMemFree(pchAlloc);
    PerfDbgLog1(tagDwnLoad, this, "-CDwnLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnLoad::SetCallback()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::SetCallback");

    _pDwnBindData->SetCallback(this);

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::SetCallback");
}

void
CDwnLoad::OnBindCallback(DWORD dwFlags)
{
    PerfDbgLog1(tagDwnLoad, this, "+CDwnLoad::OnBindCallback (dwFlags=%04lX)", dwFlags);

    HRESULT hr = S_OK;

    Assert(!EnteredCriticalSection());
    
    if (dwFlags & DBF_PROGRESS)
    {
        DWNPROG DwnProg;

        _pDwnBindData->GetProgress(&DwnProg);

        hr = THR(OnBindProgress(&DwnProg));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_REDIRECT)
    {
        hr = THR(OnBindRedirect(_pDwnBindData->GetRedirect(), _pDwnBindData->GetMethod()));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_HEADERS)
    {
        _pDwnBindData->AddToPrivacyList();

        hr = THR(OnBindHeaders());
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_MIME)
    {
        hr = THR(OnBindMime(_pDwnBindData->GetMimeInfo()));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_DATA)
    {
        hr = THR(OnBindData());
        if (hr)
            goto Cleanup;
    }

Cleanup:

    if (FAILED(hr))
    {
        if (!_fDwnBindTerm)
        {
            _pDwnBindData->Disconnect();
            _pDwnBindData->Terminate(hr);
        }

        dwFlags |= DBF_DONE;
    }

    if (dwFlags & DBF_DONE)
    {               
        OnBindDone(_pDwnBindData->GetBindResult());
    }

    PerfDbgLog1(tagDwnLoad, this, "-CDwnLoad::OnBindCallback (hr=%lX)", hr);
}

void
CDwnLoad::Passivate()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::Passivate");

    _fPassive = TRUE;
    
    if (_pDwnBindData && !_fDwnBindTerm)
    {
        _pDwnBindData->Disconnect();
        _pDwnBindData->Terminate(E_ABORT);
    }

    super::Passivate();

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::Passivate");
}

HRESULT
CDwnLoad::RequestProgress(IProgSink * pProgSink, DWORD dwCookie)
{
    HRESULT hr;
    
    hr = THR(pProgSink->SetProgress(dwCookie,
            PROGSINK_SET_STATE|PROGSINK_SET_TEXT|PROGSINK_SET_IDS|
            PROGSINK_SET_POS|PROGSINK_SET_MAX,
            _dwState, GetProgText(), _dwIds, _dwPos, _dwMax));

    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnLoad::OnBindProgress(DWNPROG * pDwnProg)
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::OnBindProgress");

    DWORD   dwFlags = 0;
    DWORD   dwState = _dwState;
    DWORD   dwPos   = _dwPos;
    DWORD   dwMax   = _dwMax;
    UINT    dwIds   = _dwIds;

    if (_fPassive)
        goto Cleanup;

    switch (pDwnProg->dwStatus)
    {
        case BINDSTATUS_FINDINGRESOURCE:
        case BINDSTATUS_CONNECTING:
            dwState  = PROGSINK_STATE_CONNECTING;
            dwIds    = _idsLoad;
            break;

        case BINDSTATUS_BEGINDOWNLOADDATA:
        case BINDSTATUS_DOWNLOADINGDATA:
        case BINDSTATUS_ENDDOWNLOADDATA:
            dwState  = PROGSINK_STATE_LOADING;
            dwIds    = _idsLoad;
            dwPos    = pDwnProg->dwPos;
            dwMax    = pDwnProg->dwMax;

            if (    _dwState != PROGSINK_STATE_LOADING
                &&  _pDwnBindData->GetRedirect())
            {
                // Looks like we got redirected somewhere else.  Force the
                // progress text to get recalculated.

                _dwIds = 0;
            }

            break;

        default:
            goto Cleanup;
    }

    if (_dwState != dwState)
    {
        _dwState = dwState;
        dwFlags |= PROGSINK_SET_STATE;
    }

    if (_dwPos != dwPos)
    {
        _dwPos = dwPos;
        dwFlags |= PROGSINK_SET_POS;
    }

    if (_dwMax != dwMax)
    {
        _dwMax = dwMax;
        dwFlags |= PROGSINK_SET_MAX;
    }

    if (_dwIds != dwIds)
    {
        _dwIds = dwIds;
        dwFlags |= PROGSINK_SET_TEXT | PROGSINK_SET_IDS;
    }

    if (dwFlags)
    {
        const TCHAR *pch = (dwFlags & PROGSINK_SET_TEXT) ? GetProgText() : NULL;
        
        _pDwnInfo->SetProgress(dwFlags, _dwState, pch, _dwIds, _dwPos, _dwMax);
    }
    
Cleanup:
    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::OnBindProgress");
    return(S_OK);
}

LPCTSTR
CDwnLoad::GetProgText()
{
    if (_dwState == PROGSINK_STATE_LOADING)
    {
        LPCTSTR pch = _pDwnBindData->GetRedirect();
        if (pch)
            return(pch);
    }

    return(GetUrl());
}

void
CDwnLoad::OnDone(HRESULT hrErr)
{
    PerfDbgLog1(tagDwnLoad, this, "+CDwnLoad::OnDone (hrErr=%lX)", hrErr);

    if (InterlockedDecrement(&_cDone) == 0)
    {
        if (_pDownloadNotify)
        {
//$ WIN64: IDownloadNotify::DownloadComplete needs a DWORD_PTR as first argument
             THR_NOTRACE(_pDownloadNotify->DownloadComplete((DWORD)(DWORD_PTR)this, hrErr, 0));
        }
             
        _hrErr = hrErr;
        _pDwnInfo->OnLoadDone(this, hrErr);
    }

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::OnDone");
}

// AnsiToWideTrivial ----------------------------------------------------------

void
AnsiToWideTrivial(const CHAR * pchA, WCHAR * pchW, LONG cch)
{
    for (; cch >= 0; --cch)
        *pchW++ = *pchA++;
}

// MIMEINFO -------------------------------------------------------------------

NEWIMGTASKFN NewImgTaskGif;
NEWIMGTASKFN NewImgTaskJpg;
NEWIMGTASKFN NewImgTaskBmp;
#ifndef NO_ART
NEWIMGTASKFN NewImgTaskArt;
#endif // ndef WIN16
NEWIMGTASKFN NewImgTaskXbm;
#ifndef NO_METAFILE
NEWIMGTASKFN NewImgTaskWmf;
NEWIMGTASKFN NewImgTaskEmf;
#endif // NO_METAFILE
#if !defined(WINCE) && !defined(WIN16)
NEWIMGTASKFN NewImgTaskPlug;
#endif // WINCE
NEWIMGTASKFN NewImgTaskIco;

MIMEINFO g_rgMimeInfo[] =
{
    { 0, CFSTR_MIME_HTML,         0,               0 },
    { 0, CFSTR_MIME_TEXT,         0,               0 },
    { 0, TEXT("text/x-component"),0,             0 },
    { 0, CFSTR_MIME_GIF,          NewImgTaskGif,   IDS_SAVEPICTUREAS_GIF },
    { 0, CFSTR_MIME_JPEG,         NewImgTaskJpg,   IDS_SAVEPICTUREAS_JPG },
    { 0, CFSTR_MIME_PJPEG,        NewImgTaskJpg,   IDS_SAVEPICTUREAS_JPG },
    { 0, CFSTR_MIME_BMP,          NewImgTaskBmp,   IDS_SAVEPICTUREAS_BMP },
#ifndef NO_ART
    { 0, CFSTR_MIME_X_ART,        NewImgTaskArt,   IDS_SAVEPICTUREAS_ART },
    { 0, TEXT("image/x-art"),     NewImgTaskArt,   IDS_SAVEPICTUREAS_ART },
#endif // ndef NO_ART
    { 0, CFSTR_MIME_XBM,          NewImgTaskXbm,   IDS_SAVEPICTUREAS_XBM },
    { 0, CFSTR_MIME_X_BITMAP,     NewImgTaskXbm,   IDS_SAVEPICTUREAS_XBM },
#ifndef NO_METAFILE
    { 0, CFSTR_MIME_X_WMF,        NewImgTaskWmf,   IDS_SAVEPICTUREAS_WMF },
    { 0, CFSTR_MIME_X_EMF,        NewImgTaskEmf,   IDS_SAVEPICTUREAS_EMF },
#endif // NO_METAFILE
    { 0, CFSTR_MIME_AVI,          0,               IDS_SAVEPICTUREAS_AVI },
    { 0, CFSTR_MIME_X_MSVIDEO,    0,               IDS_SAVEPICTUREAS_AVI },
    { 0, CFSTR_MIME_MPEG,         0,               IDS_SAVEPICTUREAS_MPG },
    { 0, CFSTR_MIME_QUICKTIME,    0,               IDS_SAVEPICTUREAS_MOV },
    { 0, CFSTR_MIME_HTA,          0,               0 },
#ifndef _MAC
    { 0, CFSTR_MIME_X_PNG,      NewImgTaskPlug,  IDS_SAVEPICTUREAS_PNG },
    { 0, TEXT("image/png"),     NewImgTaskPlug,  IDS_SAVEPICTUREAS_PNG },
    { 0, TEXT("image/x-icon"),  NewImgTaskIco,   IDS_SAVEPICTUREAS_BMP },
#endif // _MAC
};

const LPCTSTR g_pchWebviewMimeWorkaround = _T("text/webviewhtml");


#define MIME_TYPE_COUNT         ARRAY_SIZE(g_rgMimeInfo)

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO g_miImagePlug =
    { 0, _T("image/x-ms-plug"), NewImgTaskPlug,  0 };
#endif

const LPCSTR g_rgpchMimeType[MIME_TYPE_COUNT] =
{
    "text/html",
    "text/plain",
    "text/x-component",
    "image/gif",
    "image/jpeg",
    "image/pjpeg",
    "image/bmp",
#ifndef NO_ART
    "image/x-jg",
    "image/x-art",
#endif // ndef NO_ART
    "image/xbm",
    "image/x-xbitmap",
#ifndef NO_METAFILE
    "image/x-wmf",
    "image/x-emf",
#endif // NO_METAFILE
    "video/avi",
    "video/x-msvideo",
    "video/mpeg",
    "video/quicktime",
    "application/hta",
#ifndef _MAC
    "image/x-png",
    "image/png",
    "image/x-icon",
#endif // _MAC
};

const MIMEINFO * const g_pmiTextHtml       = &g_rgMimeInfo[0];
const MIMEINFO * const g_pmiTextPlain      = &g_rgMimeInfo[1];
const MIMEINFO * const g_pmiTextComponent  = &g_rgMimeInfo[2];

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO * const g_pmiImagePlug = &g_miImagePlug;
#endif

BOOL g_fInitMimeInfo = FALSE;

void InitMimeInfo()
{
    MIMEINFO * pmi  = g_rgMimeInfo;
    const LPCSTR * ppch = g_rgpchMimeType;
    int         c    = MIME_TYPE_COUNT;
	
	Assert(ARRAY_SIZE(g_rgMimeInfo) == ARRAY_SIZE(g_rgpchMimeType));
    
    for (; --c >= 0; ++pmi, ++ppch)
    {
		Assert(*ppch);
#ifdef _MAC
        pmi->cf = RegisterMimeFormat(*ppch);
#else
        pmi->cf = (CLIPFORMAT)RegisterClipboardFormatA(*ppch);
#endif
    }

    g_fInitMimeInfo = TRUE;
}

const MIMEINFO * GetMimeInfoFromClipFormat(CLIPFORMAT cf)
{
    const MIMEINFO * pmi;
    UINT c;

    if (!g_fInitMimeInfo)
    {
        InitMimeInfo();
    }

    for (c = MIME_TYPE_COUNT, pmi = g_rgMimeInfo; c > 0; --c, ++pmi)
    {
        if (pmi->cf == cf)
        {
            return(pmi);
        }
    }

    return(NULL);
}

const MIMEINFO * GetMimeInfoFromMimeType(const TCHAR * pchMime)
{
    const  MIMEINFO * pmi;
    UINT c;

    if (!g_fInitMimeInfo)
    {
        InitMimeInfo();
    }

    for (c = MIME_TYPE_COUNT, pmi = g_rgMimeInfo; c > 0; --c, ++pmi)
    {
        if (StrCmpIC(pmi->pch, pchMime) == 0)
        {
            return(pmi);
        }
    }

    // NOTE: the following works around urlmon bug NT 175191:
    // Mime filters do not change the mime type correctly.
    // Remove this exception when that bug is fixed.
    if (StrCmpIC(g_pchWebviewMimeWorkaround, pchMime) == 0)
    {
    	return g_pmiTextHtml;
    }

    return(NULL);
}

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO * GetMimeInfoFromData(void * pvData, ULONG cbData, const TCHAR *pchProposed, CStr * pcstrMimeType)
{
    HRESULT hr;
    const MIMEINFO * pmi = NULL;
    TCHAR * pchMimeType = NULL;

    hr = FindMimeFromData(NULL,             // bind context - can be NULL                                     
                          NULL,             // url - can be null
                          pvData,           // buffer with data to sniff - can be null (pwzUrl must be valid) 
                          cbData,           // size of buffer                                                 
                          pchProposed,      // proposed mime if - can be null                                 
                          0,                // will be defined                                                
                          &pchMimeType,     // the suggested mime                                             
                          0);
    if (!hr)
    {
        pmi = GetMimeInfoFromMimeType(pchMimeType);
        if (pmi)
            goto Cleanup;
    }

    if (cbData && IsPluginImgFormat((BYTE *)pvData, cbData))
    {
        pmi = g_pmiImagePlug;
    }

    if (pcstrMimeType)
    {
        pcstrMimeType->Set(pchMimeType);
    }

Cleanup:
    CoTaskMemFree(pchMimeType);
    return(pmi);
}
#endif

// Shutdown -------------------------------------------------------------------

void DeinitDownload()
{
    if (g_pImgBitsNotLoaded)
        delete g_pImgBitsNotLoaded;

    if (g_pImgBitsMissing)
        delete g_pImgBitsMissing;

    DwnCacheDeinit();
}

//+------------------------------------------------------------------------
//
//  Helper:     GetBuiltinGenericTagDesc
//
//-------------------------------------------------------------------------

const CBuiltinGenericTagDesc g_aryBuiltinGenericTags[] = 
{
    {_T("HTC"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_DESC},
    {_T("COMPONENT"),           CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_DESC},
    {_T("PROPERTY"),            CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_PROPERTY},
    {_T("METHOD"),              CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_METHOD},
    {_T("EVENT"),               CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_EVENT},
    {_T("ATTACH"),              CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_ATTACH},
    {_T("PUT"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_NONE},
    {_T("GET"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_NONE},
    {NULL}
};

const CBuiltinGenericTagDesc *
GetBuiltinGenericTagDesc(LPTSTR pchName)
{
    const CBuiltinGenericTagDesc * pTagDesc;

    Assert (NULL == StrChr(pchName, _T(':')));

    // TODO (alexz): optimize to use assoc tables for fast hashed lookup
    for (pTagDesc = g_aryBuiltinGenericTags; pTagDesc->pchName; pTagDesc++)
    {
        if (0 == StrCmpIC(pchName, pTagDesc->pchName))
        {
            return pTagDesc;
        }
    }

    return GetBuiltinLiteralGenericTagDesc(pchName);
}

//+------------------------------------------------------------------------
//
//  Helper:     GetBuiltinLiteralGenericTagDesc
//
//-------------------------------------------------------------------------

const CBuiltinGenericTagDesc g_aryBuiltinLiteralGenericTags[] = 
{
    {_T("XML"),     CBuiltinGenericTagDesc::TYPE_OLE, {0x379E501F, 0xB231, 0x11d1, 0xad, 0xc1, 0x00, 0x80, 0x5F, 0xc7, 0x52, 0xd8}},
    {NULL}
};

const CBuiltinGenericTagDesc *
GetBuiltinLiteralGenericTagDesc(LPTSTR pchName, LONG cchName)
{
    const CBuiltinGenericTagDesc * pTagDesc;

    if (-1 != cchName)
    {
        // note that (TRUE == _tcsnipre(_T("XML"), 3, pchName, cchName)) will not work correctly here
        // (if pchName is XML:NAMESPACE for example)
        for (pTagDesc = g_aryBuiltinLiteralGenericTags; pTagDesc->pchName; pTagDesc++)
        {
            if ((LONG)_tcslen(pTagDesc->pchName) == cchName &&
                0 == StrCmpNIC(pTagDesc->pchName, pchName, cchName))
            {
                return pTagDesc;
            }
        }
    }
    else
    {
        for (pTagDesc = g_aryBuiltinLiteralGenericTags; pTagDesc->pchName; pTagDesc++)
        {
            if (0 == StrCmpIC(pTagDesc->pchName, pchName))
            {
                return pTagDesc;
            }
        }
    }
    return NULL;
}

#define HDR_LANGUAGE     _T("Accept-Language:")
#define CRLF             _T("\x0D\x0A")

void
GetHeadersAndPostData(CDwnBindInfo * pDwnBindInfo,
                      BYTE ** ppPostData,
                      DWORD * pcbPostData,
                      LPTSTR * ppchHeaders)
{
    HRESULT hr;
    CDwnPost * pDwnPost = pDwnBindInfo ? pDwnBindInfo->GetDwnPost() : NULL;

    *ppPostData = NULL;
    *pcbPostData = 0;
    *ppchHeaders = NULL;

    if (pDwnPost)
    {
        ULONG cItems = pDwnPost->GetItemCount();
        CPostItem * pItems = pDwnPost->GetItems();

        if (cItems > 0 && pItems->_ePostDataType == POSTDATA_LITERAL)
        {
            *ppPostData = (BYTE *) pItems->_pszAnsi;
            *pcbPostData = strlen(pItems->_pszAnsi) + 1;
        }
    }

    if (pDwnBindInfo)
    {
        TCHAR   achNull[1];
        TCHAR * pchAdditionalHeaders = NULL;

        achNull[0] = 0;
        hr = THR(pDwnBindInfo->BeginningTransaction(achNull, achNull, 0, &pchAdditionalHeaders));
        if (hr)
            return;

        if (pchAdditionalHeaders)
        {
            TCHAR * pchHeaders;
            DWORD cchHeaders;
            LPTSTR pchNext;
            LPTSTR pchLine;
            LPTSTR pchLast;

            cchHeaders = lstrlen(pchAdditionalHeaders) + 1;

            hr = THR(MemAllocString(Mt(GetHeadersAndPostData), pchAdditionalHeaders, &pchHeaders));
            if (hr)
                return;

            StrCpyN(pchHeaders, pchAdditionalHeaders, cchHeaders);
            pchLine = pchHeaders;
            pchLast = pchHeaders + lstrlen(pchHeaders);
            while (pchLine < pchLast)
            {
                pchNext = StrStrI(pchLine, CRLF);
                if (pchNext == NULL)
                {
                    // All Headers must be terminated in CRLF!
                    pchLine[0] = '\0';
                    break;
                }
                pchNext += 2;
                if (!StrCmpNI(pchLine, HDR_LANGUAGE, 16))
                {
                    MoveMemory(pchLine, pchNext, ((pchLast - pchNext) + 1) * sizeof(TCHAR));
                    break;
                }
                pchLine = pchNext;
            }

            // Don't include empty headers
            if (pchHeaders[0] == '\0')
            {
                MemFreeString(pchHeaders);
                pchHeaders = NULL;
            }

            CoTaskMemFree(pchAdditionalHeaders);
            *ppchHeaders = pchHeaders;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmctx.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1995
//
//  File:       htmctx.cxx
//
//  Contents:   CHtmParseCtx derivatives for parsing ROOT, HEAD, etc
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_COMMENT_HXX_
#define X_COMMENT_HXX_
#include "comment.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_FRAME_HXX_
#define X_FRAME_HXX_
#include "frame.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_TEXTAREA_HXX_
#define X_TEXTAREA_HXX_
#include "textarea.hxx"
#endif

#ifndef X_TABLE_HXX_
#define X_TABLE_HXX_
#include "table.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_HTC_HXX_
#define X_HTC_HXX_
#include "htc.hxx"
#endif

#ifndef X_ESTYLE_HXX_
#define X_ESTYLE_HXX_
#include "estyle.hxx"
#endif

#ifndef X_ESELECT_HXX_
#define X_ESELECT_HXX_
#include "eselect.hxx"
#endif

#ifndef X_EOPTION_HXX_
#define X_EOPTION_HXX_
#include "eoption.hxx"
#endif

#ifndef X_PROPBAG_HXX_
#define X_PROPBAG_HXX_
#include "propbag.hxx"
#endif

#ifndef X_EOBJECT_HXX_
#define X_EOBJECT_HXX_
#include "eobject.hxx"
#endif

#ifndef X_GENERIC_HXX_
#define X_GENERIC_HXX_
#include "generic.hxx"
#endif

#ifndef X_ENOSHOW_HXX_
#define X_ENOSHOW_HXX_
#include "enoshow.hxx"
#endif

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_BUFFER_HXX_
#define X_BUFFER_HXX_
#include "buffer.hxx"
#endif

#ifndef X_CBUFSTR_HXX_
#define X_CBUFSTR_HXX_
#include "cbufstr.hxx"
#endif

ExternTag(tagParse);

MtDefine(CHtmParseCtx, Dwn, "CHtmParseCtx")
MtDefine(CHtmParseCtx_apNodeStack_pv, Dwn, "CHtmParseCtx::EndElement apNodeStack::_pv")
MtDefine(CHtmSelectHackBaseCtx_apNodeStack_pv, Dwn, "CHtmSelectHackBaseCtx::EndElement apNodeStack::_pv")
MtDefine(CHtmOutsideParseCtx, Dwn, "CHtmOutsideParseCtx")
MtDefine(CHtmCommentParseCtx, Dwn, "CHtmCommentParseCtx")
MtDefine(CHtmNoShowParseCtx, Dwn, "CHtmNoShowParseCtx")
MtDefine(CHtmTitleParseCtx, Dwn, "CHtmTitleParseCtx")
MtDefine(CHtmTextareaParseCtx, Dwn, "CHtmTextareaParseCtx")
MtDefine(CHtmStyleParseCtx, Dwn, "CHtmStyleParseCtx")
MtDefine(CHtmScriptParseCtx, Dwn, "CHtmScriptParseCtx")
MtDefine(CHtmGenericParseCtx, Dwn, "CHtmGenericParseCtx")
MtDefine(CHtmFramesetParseCtx, Dwn, "CHtmFramesetParseCtx")
MtDefine(CHtmSelectParseCtx, Dwn, "CHtmSelectParseCtx")
MtDefine(CHtmIframeParseCtx, Dwn, "CHtmIframeParseCtx")
MtDefine(CHtmFrameParseCtx, Dwn, "CHtmFrameParseCtx")
MtDefine(CHtmObjectParseCtx, Dwn, "CHtmObjectParseCtx")
MtDefine(CHtmObjectParseCtxAddTag, Dwn, "CObjectElement::PARAMBINDING strings")

const ELEMENT_TAG s_atagEmpty[] = {ETAG_NULL};

//+------------------------------------------------------------------------
//
//  CHtmParseCtx::AddSource
//
//  The contract for AddSource: we must extract the specified number of
//  chars from the source stream.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->SkipSource(pht->GetSourceCch()));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmCommentParseCtx
//
//  The top-level context for the COMMENT element
//
//-------------------------------------------------------------------------

class CHtmCommentParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmCommentParseCtx))
    CHtmCommentParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmCommentParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CCommentElement *_pelComment;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmCommentParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmCommentParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmCommentParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmCommentParseCtx::CHtmCommentParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_COMMENT);

    _pelComment = DYNCAST(CCommentElement, pelTop);
    _pelComment->AddRef();
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::dtor
//
//  Synopsis:   last-phase destruction
//
//-------------------------------------------------------------------------
CHtmCommentParseCtx::~CHtmCommentParseCtx()
{
    Assert(_pelComment);
    _pelComment->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::Init
//
//  Synopsis:   Gets Comment element ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmCommentParseCtx::Init()
{
    RRETURN(_pelComment->_cstrText.Set(_T("")));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::AddText
//
//  Synopsis:   store Comment text
//
//-------------------------------------------------------------------------
HRESULT
CHtmCommentParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;

    Assert(pNode->Element() == _pelComment);
    Assert(cch && *pch);

    hr = THR(_pelComment->_cstrText.Append(pch, cch));

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  CHtmNoShowParseCtx
//
//  The top-level context for the HEAD element
//
//-------------------------------------------------------------------------

class CHtmNoShowParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmNoShowParseCtx))
    CHtmNoShowParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmNoShowParseCtx();
    
    virtual HRESULT AddSource(CHtmTag *pht);
    virtual HRESULT Finish();
    
private:
    ELEMENT_TAG _atagAccept2[2];
    CBuffer2 _cbuf2Contents;
    CNoShowElement *_pelNoshow;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmlNoShowCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmNoShowParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmNoShowParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmNoShowParseCtx::CHtmNoShowParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_NOFRAMES ||
           pelTop->Tag() == ETAG_NOSCRIPT ||
           pelTop->Tag() == ETAG_NOEMBED);
    _atagAccept2[0] = pelTop->Tag();
    _atagAccept2[1] = ETAG_NULL;
    _atagAccept = _atagAccept2;
    _fDropUnknownTags = TRUE;
    
    _pelNoshow = DYNCAST(CNoShowElement, pelTop);
    _pelNoshow->AddRef();
    
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmNoShowParseCtx::~CHtmNoShowParseCtx()
{
    Assert(_pelNoshow);
    _pelNoshow->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::AddSource
//
//  Synopsis:   To keep track of stuff between <NOFRAMES> and </NOFRAMES>
//
//-------------------------------------------------------------------------
HRESULT
CHtmNoShowParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2Contents, pht->GetSourceCch()));
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::Finish
//
//  Synopsis:   Transfer contents to element
//
//-------------------------------------------------------------------------
HRESULT
CHtmNoShowParseCtx::Finish()
{
    HRESULT hr = S_OK;
    
    _pelNoshow->SetContents(&_cbuf2Contents);

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmTitleParseCtx
//
//  The top-level context for the TITLE element
//
//-------------------------------------------------------------------------

class CHtmTitleParseCtx : public CHtmSpaceParseCtx
{
public:
    typedef CHtmSpaceParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmTitleParseCtx))
    CHtmTitleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmTitleParseCtx();

    virtual HRESULT AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpace(CTreeNode *pNode);
    virtual HRESULT AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch);
    virtual HRESULT Init();
    virtual HRESULT Execute();
    virtual CElement *GetMergeElement();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CMarkup * _pMarkup;

    enum SPACESTATE
    {
        SS_NOSPACE,
        SS_NEEDSPACE,
        SS_DIDSPACE
    };

    SPACESTATE _spacestate;

    CStr _cstrTitle;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmTitleParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmTitleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmTitleParseCtx(phpxParent, pel);

    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmTitleParseCtx::CHtmTitleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmSpaceParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_ROOT);

    _pMarkup = pelTop->GetMarkup();

    _pMarkup->AddRef();
    _fNeedExecute = TRUE;
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::~CHtmTitleParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmTitleParseCtx::~CHtmTitleParseCtx()
{
    _pMarkup->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::Init
//
//  Synopsis:   Gets title element ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::Init()
{
    HRESULT hr;

    hr = THR(_cstrTitle.Set(_T("")));
    if (hr)
        goto Cleanup;

    hr = THR(RFill(FILL_EAT, NULL));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddText
//
//  Synopsis:   store title text
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;

    Assert(cch && *pch);

    hr = THR(_cstrTitle.Append(pch, cch));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddCollapsedWhitespace
//
//  Synopsis:   ignores collapsed whitespace
//
//-------------------------------------------------------------------------

HRESULT
CHtmTitleParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    // ignore collpased whitespace
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddSpace
//
//  Synopsis:   store title text
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::AddSpace(CTreeNode *pNode)
{
    HRESULT hr;

    hr = THR(_cstrTitle.Append(_T(" ")));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::GetMergeElement
//
//  Synopsis:   Element with which to merge the found tag
//
//-------------------------------------------------------------------------
CElement *
CHtmTitleParseCtx::GetMergeElement()
{
    return _pMarkup->GetTitleElement();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::Finish
//
//  Synopsis:   Cause UI to be updated after TITLE is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::Execute()
{
    HRESULT hr = S_OK;
    
    CTitleElement * pElementTitle = _pMarkup->GetTitleElement();

    if (pElementTitle && !pElementTitle->GetTitle())
    {
        // TODO: SetTitle will always make the document dirty.
        // This screws up VB.  Will fix this for IE5 RTM (jbeda).
        CDoc * pDoc = pElementTitle->Doc();
        BOOL fDirty = !!pDoc->_lDirtyVersion;

        hr = THR( pElementTitle->SetTitle( _cstrTitle ) );

        if (    !fDirty
            &&  pDoc->_lDirtyVersion)
        {
            pDoc->_lDirtyVersion = 0;
        }

        if (hr)
            goto Cleanup;
    }

Cleanup:

    RRETURN( hr );
}

//+------------------------------------------------------------------------
//
//  CHtmStyleParseCtx
//
//  The top-level context for the STYLE element
//
//-------------------------------------------------------------------------

class CHtmStyleParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmStyleParseCtx))
    CHtmStyleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmStyleParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CStyleElement *_pelStyle;
    CBuffer _cbufText;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmStyleCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmStyleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmStyleParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmStyleParseCtx::CHtmStyleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_STYLE);

    _pelStyle = DYNCAST(CStyleElement, pelTop);
    _pelStyle->AddRef();
    _pelStyle->_fParseFinished = FALSE;
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::~CHtmStyleParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmStyleParseCtx::~CHtmStyleParseCtx()
{
    Assert(_pelStyle);
    _pelStyle->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::Init
//
//  Synopsis:   Gets ourselves ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::Init()
{
    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::AddText
//
//  Synopsis:   store style text
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    Assert(pNode->Element() == _pelStyle);

    _cbufText.Append(pch, cch);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::Finish
//
//  Synopsis:   Fill in Style once text is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::Finish()
{
    HRESULT hr = S_OK;

    _pelStyle->_fParseFinished = TRUE;
    if (_pelStyle->_fEnterTreeCalled)
    {
        hr = THR(_pelStyle->SetText((LPTSTR)_cbufText));
    }
    else
    {
        _pelStyle->_cstrText.Set((LPTSTR)_cbufText);
    }

    _cbufText.Clear();

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmScriptParseCtx
//
//  The top-level context for the SCRIPT element
//
//-------------------------------------------------------------------------

class CHtmScriptParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmScriptParseCtx))
    CHtmScriptParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmScriptParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CScriptElement *_pelScript;
    CTreeNode *_pNodeScript;
    CBuffer _cbufText;
    BOOL _fGotNodeRef;
};


//+------------------------------------------------------------------------
//
//  Function:   CreateHtmScriptCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmScriptParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmScriptParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmScriptParseCtx::CHtmScriptParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_SCRIPT);

    _pelScript = DYNCAST(CScriptElement, pelTop);
    _pNodeScript = _pelScript->GetFirstBranch();
    _atagReject = s_atagEmpty;
    _fNeedExecute = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmScriptParseCtx::~CHtmScriptParseCtx()
{
    Assert(_pelScript);
    if( _fGotNodeRef )
        _pNodeScript->NodeRelease();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Init
//
//  Synopsis:   Gets ourselves ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Init()
{
    HRESULT hr = S_OK;

    hr = THR( _pNodeScript->NodeAddRef() );  // ref needed for execute
    if( hr )
        goto Cleanup;

    _fGotNodeRef = TRUE;

    _pelScript->SetParserWillExecute();

Cleanup:
    RRETURN( hr );
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::AddText
//
//  Synopsis:   store script text
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    BOOL fSetText = TRUE;
    CHtmlComponent *pComponent = NULL;
    CMarkup *pMarkup = _pelScript->GetMarkup();
    Assert(pMarkup);
    Assert(pNode->Element() == _pelScript);

    if (pMarkup->HasBehaviorContext())
    {
        pComponent = pMarkup->BehaviorContext()->_pHtmlComponent;
        if (pComponent && !pComponent->_fFactoryComponent && pComponent->_pConstructor->_pelFactoryScript)
        {
            if (!_pelScript->GetAAevent())
                fSetText = FALSE;
        }
    }

    if (fSetText)
    {
        _cbufText.Append(pch, cch);
    }

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Finish
//
//  Synopsis:   Fill in Script once text is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Finish()
{
    HRESULT hr = S_OK;
    BOOL fSetText = TRUE;
    CHtmlComponent *pComponent = NULL;
    CMarkup *pMarkup = _pelScript->GetMarkup();
    Assert(pMarkup);

    if (pMarkup->HasBehaviorContext())
    {
        pComponent = pMarkup->BehaviorContext()->_pHtmlComponent;
        if (pComponent && !pComponent->_fFactoryComponent && pComponent->_pConstructor->_pelFactoryScript)
        {
            if (!_pelScript->GetAAevent())
                fSetText = FALSE;
        }
    }

    if (fSetText)
    {
        hr = THR(_pelScript->_cstrText.Set((LPTSTR)_cbufText));
    }
    else
    {
        Assert(!pComponent->_fFactoryComponent);
        Assert(pComponent->_pConstructor->_pFactoryComponent->_fClonedScript);
        Assert(pComponent->_pConstructor->_pelFactoryScript);
        Assert(pComponent->_pConstructor->_pFactoryComponent->_pMarkup == pComponent->_pConstructor->_pelFactoryScript->GetMarkup());
        Assert((LPTSTR)(pComponent->_pConstructor->_pelFactoryScript->_cstrText));
        _pelScript->_cstrText.SetPch((LPTSTR)(pComponent->_pConstructor->_pelFactoryScript->_cstrText));
        _pelScript->_fSharedCode = TRUE;
    }
    
    return hr;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Execute
//
//  Synopsis:   Execute inline script
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Execute()
{
    Assert(_pelScript);
    
    RRETURN(_pelScript->Execute());
}

//+------------------------------------------------------------------------
//
//  CHtmGenericParseCtx
//
//  The top-level context for the Generic element
//
//-------------------------------------------------------------------------

class CHtmGenericParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmGenericParseCtx))
    CHtmGenericParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmGenericParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();

private:

    CGenericElement * _pelGeneric;
    CBuffer           _cbufText;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmGenericCtx
//
//-------------------------------------------------------------------------

HRESULT CreateHtmGenericParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmGenericParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::constructor
//
//-------------------------------------------------------------------------

CHtmGenericParseCtx::CHtmGenericParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(ETAG_GENERIC_LITERAL == pelTop->Tag());

    _pelGeneric = DYNCAST(CGenericElement, pelTop);
    _pelGeneric->AddRef();
    _atagReject = s_atagEmpty;
    _fNeedExecute = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::destructor
//
//-------------------------------------------------------------------------

CHtmGenericParseCtx::~CHtmGenericParseCtx()
{
    Assert(_pelGeneric);
    _pelGeneric->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::Init
//
//-------------------------------------------------------------------------

HRESULT
CHtmGenericParseCtx::Init()
{
    HRESULT hr;

    hr = THR(_pelGeneric->_cstrContents.Set(_T("")));
    if (hr)
        RRETURN(hr);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::AddText
//
//-------------------------------------------------------------------------
HRESULT
CHtmGenericParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    Assert(pNode->Element() == _pelGeneric);

    _cbufText.Append(pch, cch);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::Finish
//
//-------------------------------------------------------------------------

HRESULT
CHtmGenericParseCtx::Finish()
{
    _pelGeneric->_cstrContents.Set((LPTSTR)_cbufText);

    return S_OK;
}


//+------------------------------------------------------------------------
//
//  CHtmFramesetParseCtx
//
//  The top-level context for the HEAD element
//
//-------------------------------------------------------------------------

class CHtmFramesetParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmFramesetParseCtx))
    CHtmFramesetParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmFramesetParseCtx();

    virtual HRESULT Finish();

private:

    CFrameSetSite *_psiteFrameset;
    BOOL _fTop;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmlFramesetCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmFramesetParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmFramesetParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Constant:   s_atagFramesetAccept
//
//  Synopsis:   The set of tags processed normally within a frameset.
//
//              To imitate NS, we ignore _everything_
//              except <FRAMESET> and <FRAME> tags
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagFramesetAccept[] = {
    ETAG_EMBED,
    ETAG_FRAME,
    ETAG_FRAMESET,
    ETAG_NOFRAMES,
//    ETAG_NOSCRIPT, // commented to fix bug 58528
//    ETAG_NOEMBED,  // commented to fix bug 58528
//    ETAG_SCRIPT,   // ignore the script tag (NS compat)
    ETAG_UNKNOWN,
//    ETAG_FORM,     // Hidden inputs in the HEAD are now handled in a new way
//    ETAG_INPUT,    //
    ETAG_NULL,
};

const ELEMENT_TAG s_atagFramesetIgnoreEnd[] = {
    ETAG_HTML,
    ETAG_NULL,
};


//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmFramesetParseCtx::CHtmFramesetParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_FRAMESET);

    // no parent layout means TOP frameset - so ignore the rest of the file after my </FRAMESET>
    // (dmitryt) Note that if there IS a parent layout but it is HTML Layout 
    // (in case of Strict CSS Compat) - this still means the element is a top 
    // frameset and the rest shoudl be ignored (IE 6 bug 38662)

    CTreeNode *pParentLayoutNode = pelTop->GetUpdatedParentLayoutNode();
    
    if (!pParentLayoutNode || pParentLayoutNode->Tag() == ETAG_HTML)
    {
        _fIgnoreSubsequent = TRUE;
    }
    
    _atagIgnoreEnd  = s_atagFramesetIgnoreEnd;
    _atagAccept     = s_atagFramesetAccept;
    _fDropUnknownTags = TRUE;
    
    _psiteFrameset = DYNCAST(CFrameSetSite, pelTop);
    _psiteFrameset->AddRef();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::~CHtmFramesetParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmFramesetParseCtx::~CHtmFramesetParseCtx()
{
    Assert(_psiteFrameset);
    _psiteFrameset->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::Finish
//
//  Synopsis:   do the frameset thing...
//
//-------------------------------------------------------------------------
HRESULT
CHtmFramesetParseCtx::Finish()
{
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Frame context
//
//  The parser context for the FRAME element
//
//-------------------------------------------------------------------------

class CHtmFrameParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmFrameParseCtx))
    CHtmFrameParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmFrameParseCtx();
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif
    
    CFrameElement *_psiteFrame;
};


//+------------------------------------------------------------------------
//
//  Function:   CreateHtmFrameParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmFrameParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmFrameParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmFrameParseCtx::CHtmFrameParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmFrameParseCtx::CHtmFrameParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteFrame = DYNCAST(CFrameElement, pel);
    _psiteFrame->AddRef();
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmFrameParseCtx::~CHtmFrameParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmFrameParseCtx::~CHtmFrameParseCtx()
{
    Assert(_psiteFrame);
    _psiteFrame->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFrameParseCtx::Execute
//
//  Synopsis:   instantiate
//
//-------------------------------------------------------------------------
HRESULT
CHtmFrameParseCtx::Execute()
{
    THR(_psiteFrame->CreateObject());
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Select context
//
//  The parser context for the SELECT element
//
//-------------------------------------------------------------------------

class CHtmSelectParseCtx : public CHtmSpaceParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmSelectParseCtx))
    CHtmSelectParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmSelectParseCtx();        
    virtual HRESULT Init();
    virtual HRESULT AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpace(CTreeNode *pNode);
    virtual HRESULT AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch);
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty);
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd);

    CSelectElement *_psiteSelect;
    CHtmParseCtx * _pRootCtx;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagSelectAccept
//
//  Synopsis:   The set of tags processed normally within a select.
//
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagSelectAccept[] = {
    ETAG_OPTGROUP,
    ETAG_OPTION,
    ETAG_SCRIPT,
    ETAG_UNKNOWN,
    ETAG_TC,
    ETAG_TD,
    ETAG_TH,
    ETAG_TR,
    ETAG_TBODY,
    ETAG_THEAD,
    ETAG_TFOOT,
    ETAG_TABLE,
    ETAG_INPUT,
    ETAG_TEXTAREA,

    ETAG_NULL,
};

ELEMENT_TAG const s_atagSelectAlwaysEnd[] = { ETAG_SELECT, ETAG_NULL };

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmSelectParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmSelectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmSelectParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmSelectParseCtx::CHtmSelectParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmSelectParseCtx::CHtmSelectParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmSpaceParseCtx(phpxParent)
{
    _psiteSelect = DYNCAST(CSelectElement, pel);
    _psiteSelect->AddRef();

    _atagAccept     = s_atagSelectAccept;
    _atagAlwaysEnd  = s_atagSelectAlwaysEnd;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmSelectParseCtx::~CHtmSelectParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmSelectParseCtx::~CHtmSelectParseCtx()
{
    Assert(_psiteSelect);

    _psiteSelect->Release();
}


HRESULT
CHtmSelectParseCtx::Init()
{
    _pRootCtx = GetHpxRoot();
    
    RRETURN(_pRootCtx ? S_OK : E_FAIL);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::BeginElement
//
//  Synopsis:   Listen to the beginning of OPTION tags and
//              eat leading whitespace
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{

    HRESULT hr;
    CTreeNode *pNode = NULL;

    hr = LFill(FILL_PUT);
    if ( hr )
        goto Cleanup;

    hr = THR(super::BeginElement(&pNode, pel, pNodeCur, fEmpty));
    if (hr)
        goto Cleanup;

    *ppNodeNew = pNode;
    pNode = NULL;

    if ( ETAG_OPTION == pel->Tag() )
    {
        hr = RFill(FILL_EAT, NULL);
        if ( hr )
            goto Cleanup;
    }
    else
    {
        hr = RFill(FILL_PUT, *ppNodeNew);
        if ( hr )
            goto Cleanup;
    }


Cleanup:

    CTreeNode::ReleasePtr(pNode);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::EndElement
//
//  Synopsis:   Listen to the end of OPTION tags, sets up the space-eating
//              for symmetry's sake
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    HRESULT hr;


    
    if (ETAG_OPTION == pNodeEnd->Element()->Tag())
    {
        hr = LFill(FILL_EAT);
        if ( hr )
            goto Cleanup;
    }
    else
    {
        hr = LFill(FILL_PUT);
        if ( hr )
            goto Cleanup;
    }

    hr = THR(super::EndElement(ppNodeNew, pNodeCur, pNodeEnd));
    if (hr)
        goto Cleanup;

    hr = RFill(FILL_PUT, *ppNodeNew);
    if ( hr )
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddWord
//
//  Synopsis:   Listen for the space context passing in text,
//              forward it to the root
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;
    
    hr = THR(_pRootCtx->AddText(pNode, pch, cch, fAscii));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddCollapsedWhitespace
//
//  Synopsis:   Ignore collapsed whitespace
//
//-------------------------------------------------------------------------

HRESULT
CHtmSelectParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    // ignore collpased whitespace
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddSpace
//
//  Synopsis:   Listen for the space context passing in space,
//              forward a single space to the root
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::AddSpace(CTreeNode *pNode)
{
    HRESULT hr;
    
    hr = THR(_pRootCtx->AddText(pNode, _T(" "), 1, TRUE));

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Iframe context
//
//  The parser context for the IFRAME element
//
//-------------------------------------------------------------------------

class CHtmIframeParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmIframeParseCtx))
    CHtmIframeParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmIframeParseCtx();
    virtual HRESULT Finish();
    virtual HRESULT Execute();
    virtual HRESULT AddSource(CHtmTag *pht);
    
#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

    CBuffer2 _cbuf2Contents;
    CIFrameElement *_psiteIframe;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagIframeAccept
//
//  Synopsis:   The set of tags processed normally within a object.
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagIframeAccept[] = {
    ETAG_IFRAME,
    ETAG_NULL
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmIframeParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmIframeParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmIframeParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmIframeParseCtx::CHtmIframeParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmIframeParseCtx::CHtmIframeParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteIframe = DYNCAST(CIFrameElement, pel);
    _psiteIframe->AddRef();
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;

    _atagAccept     = s_atagIframeAccept;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmIframeParseCtx::~CHtmIframeParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmIframeParseCtx::~CHtmIframeParseCtx()
{
    Assert(_psiteIframe);
    _psiteIframe->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::AddSource
//
//  Synopsis:   To keep track of stuff between <NOFRAMES> and </NOFRAMES>
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2Contents, pht->GetSourceCch()));
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::Finish
//
//  Synopsis:   Transfer contents to element
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::Finish()
{
    HRESULT hr = S_OK;
    
    _psiteIframe->SetContents(&_cbuf2Contents);

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::Execute
//
//  Synopsis:   instantiate
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::Execute()
{
    THR(_psiteIframe->CreateObject());
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Object context
//
//  The parser context for the OBJECT element
//
//-------------------------------------------------------------------------

class CHtmObjectParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmObjectParseCtx))
    CHtmObjectParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmObjectParseCtx();
    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddTag(CHtmTag *pht);
    virtual HRESULT Init();
    virtual HRESULT Finish();
    virtual HRESULT AddSource(CHtmTag *pht);
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

    CObjectElement *_psiteObject;
    int _cchLastSource;
    CBuffer2 _cbuf2AltHtml;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagObjectAccept
//
//  Synopsis:   The set of tags processed normally within a object.
//
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagObjectAccept[] = {
    ETAG_APPLET,
    ETAG_OBJECT,
    ETAG_NULL,
};

const ELEMENT_TAG s_atagObjectTag[] = { ETAG_PARAM, ETAG_NULL };

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmObjectParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmObjectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmObjectParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmObjectParseCtx::CHtmObjectParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmObjectParseCtx::CHtmObjectParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteObject = DYNCAST(CObjectElement, pel);
    _psiteObject->AddRef();
    _atagAccept     = s_atagObjectAccept;
    _atagTag        = s_atagObjectTag;
    _atagAlwaysEnd  = NULL;
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmObjectParseCtx::~CHtmObjectParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmObjectParseCtx::~CHtmObjectParseCtx()
{
    Assert(_psiteObject);
    _psiteObject->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddTag
//
//  Synopsis:   store Object params
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddTag(CHtmTag *pht)
{
    int c;
    TCHAR *pchName;
    TCHAR *pchValue;
    TCHAR *pchDataSrc;
    TCHAR *pchDataFld;
    TCHAR *pchDataFormatAs;
    HRESULT hr = S_OK;

    Assert(pht->Is(ETAG_PARAM));

    // Since we don't want Param's in our althtml, blow it away here.
    _cbuf2AltHtml.Chop(_cchLastSource);
    _cchLastSource = 0;

    if (pht->IsEnd())
        return S_OK;

    pht->ValFromName(OBJECTPARAM_NAME, &pchName);
    pht->ValFromName(OBJECTPARAM_VALUE, &pchValue);

    if (pchName && *pchName)
    {
        CMarkup *pMarkup;
        CParamElement *pelParam;

        hr = THR(_psiteObject->EnsureParamBag());
        if (hr)
            RRETURN(hr);

        c = _psiteObject->_pParamBag->_aryProps.Size();

        hr = THR(_psiteObject->_pParamBag->AddProp(pchName, _tcslen(pchName), pchValue, pchValue ? _tcslen(pchValue) : 0));

        if (c+1 == _psiteObject->_pParamBag->_aryProps.Size())
        {
            pMarkup = _psiteObject->GetMarkup();
            Assert(pMarkup && pMarkup->Doc());
            if (S_OK == ::CreateElement(pht, (CElement **)&pelParam, pMarkup->Doc(), pMarkup, NULL, INIT2FLAG_EXECUTE))
            {
                Assert(pelParam && !pelParam->_pelObjParent);
                pelParam->_pelObjParent = _psiteObject;
                IGNORE_HR(_psiteObject->_aryParams.Append(pelParam));
                Assert(pelParam->_idxParam == -1);
                pelParam->_idxParam = c;
            }
        }

        // check for param bindings
        pht->ValFromName(OBJECTPARAM_DATASRC, &pchDataSrc);
        pht->ValFromName(OBJECTPARAM_DATAFLD, &pchDataFld);
        pht->ValFromName(OBJECTPARAM_DATAFORMATAS, &pchDataFormatAs);

        if (pchDataSrc || pchDataFld)
        {
            CObjectElement::PARAMBINDING paramBinding;

            hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchName, &paramBinding._strParamName);
            if (hr)
                goto CleanupBinding;

            if (pchDataSrc)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataSrc, &paramBinding._strDataSrc);
                if (hr)
                    goto CleanupBinding;
            }

            if (pchDataFld)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataFld, &paramBinding._strDataFld);
                if (hr)
                    goto CleanupBinding;
            }

            if (pchDataFormatAs)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataFormatAs, &paramBinding._strDataFormatAs);
                if (hr)
                    goto CleanupBinding;
            }
            hr = _psiteObject->_aryParamBinding.AppendIndirect(&paramBinding);

        CleanupBinding:

            if (hr)
            {
                MemFreeString(paramBinding._strDataFormatAs);
                MemFreeString(paramBinding._strDataFld);
                MemFreeString(paramBinding._strDataSrc);
                MemFreeString(paramBinding._strParamName);
            }
        }
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Execute
//
//  Synopsis:   instantiate object
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::Execute()
{
    // instantiate object
    THR(_psiteObject->CreateObject());
    
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Init
//
//  Synopsis:   inits string to store altHtml string
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::Init()
{
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Finish
//
//  Synopsis:   saves the altHtml once parsing is complete
//
//-------------------------------------------------------------------------
#define ISSPACE(ch) (((ch) == _T(' ')) || ((unsigned)((ch) - 9)) <= 13 - 9)

HRESULT
CHtmObjectParseCtx::Finish()
{
    HRESULT hr = S_OK;
    CStr cstrAltHtml;
    TCHAR *pch;
    ULONG cch;

    if (_cbuf2AltHtml.Length())
    {
        // Consolidate into one string
        
        hr = THR(_cbuf2AltHtml.SetCStr(&cstrAltHtml));
        if (hr) 
            goto Cleanup;
        
        for (pch = cstrAltHtml, cch = cstrAltHtml.Length(); cch; pch++, cch--)
        {
            // only save alt html if object contains nonspace
            if (!ISSPACE(*pch))
            {
                hr = THR(_psiteObject->SetAAaltHtml(cstrAltHtml));
                break;
            }
        }
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddText
//
//  Synopsis:   store Object text in the altHtml property
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    _cchLastSource = 0;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddSource
//
//  Synopsis:   Stores the original source
//              for the altHtml property
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr = S_OK;
    Assert(pht);

    _cchLastSource = pht->GetSourceCch();
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2AltHtml, _cchLastSource));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmdesc.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmdesc.cxx
//
//  Contents:   Tag descriptors, for mapping tag strings to ETAGs,
//              describing parsing rules, etc.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_COMMENT_HXX_
#define X_COMMENT_HXX_
#include "comment.hxx"
#endif

#ifndef X_TXTELEMS_HXX_
#define X_TXTELEMS_HXX_
#include "txtelems.hxx"
#endif

#ifndef X_IMGELEM_HXX_
#define X_IMGELEM_HXX_
#include "imgelem.hxx"
#endif

#ifndef X_DIV_HXX_
#define X_DIV_HXX_
#include "div.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_TABLE_HXX_
#define X_TABLE_HXX_
#include "table.hxx"
#endif

#ifndef X_EPHRASE_HXX_
#define X_EPHRASE_HXX_
#include "ephrase.hxx"
#endif

#ifndef X_ELIST_HXX_
#define X_ELIST_HXX_
#include "elist.hxx"
#endif

#ifndef X_ELI_HXX_
#define X_ELI_HXX_
#include "eli.hxx"
#endif

#ifndef X_EDD_HXX_
#define X_EDD_HXX_
#include "edd.hxx"
#endif

#ifndef X_EDT_HXX_
#define X_EDT_HXX_
#include "edt.hxx"
#endif

#ifndef X_EULIST_HXX_
#define X_EULIST_HXX_
#include "eulist.hxx"
#endif

#ifndef X_EDLIST_HXX_
#define X_EDLIST_HXX_
#include "edlist.hxx"
#endif

#ifndef X_EOLIST_HXX_
#define X_EOLIST_HXX_
#include "eolist.hxx"
#endif

#ifndef X_EHEADER_HXX_
#define X_EHEADER_HXX_
#include "eheader.hxx"
#endif

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_FLOWLYT_HXX_
#define X_FLOWLYT_HXX_
#include "flowlyt.hxx"
#endif

#ifndef X_HRLYT_HXX_
#define X_HRLYT_HXX_
#include "hrlyt.hxx"
#endif

#ifndef X_EHR_HXX_
#define X_EHR_HXX_
#include "ehr.hxx"
#endif

#ifndef X_EBR_HXX_
#define X_EBR_HXX_
#include "ebr.hxx"
#endif

#ifndef X_EBLOCK_HXX_
#define X_EBLOCK_HXX_
#include "eblock.hxx"
#endif

#ifndef X_EPARA_HXX_
#define X_EPARA_HXX_
#include "epara.hxx"
#endif

#ifndef X_BTNHLPER_HXX_
#define X_BTNHLPER_HXX_
#include "btnhlper.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_TEXTAREA_HXX_
#define X_TEXTAREA_HXX_
#include "textarea.hxx"
#endif

#ifndef X_INPUTBTN_HXX_
#define X_INPUTBTN_HXX_
#include "inputbtn.hxx"
#endif

#ifndef X_MARQUEE_HXX_
#define X_MARQUEE_HXX_
#include "marquee.hxx"
#endif

#ifndef X_EFORM_HXX_
#define X_EFORM_HXX_
#include "eform.hxx"
#endif

#ifndef X_ESELECT_HXX_
#define X_ESELECT_HXX_
#include "eselect.hxx"
#endif

#ifndef X_EOPTION_HXX_
#define X_EOPTION_HXX_
#include "eoption.hxx"
#endif

#ifndef X_EOBJECT_HXX_
#define X_EOBJECT_HXX_
#include "eobject.hxx"
#endif

#ifndef X_PLUGINST_HXX_
#define X_PLUGINST_HXX_
#include "pluginst.hxx"
#endif

#ifndef X_FRAME_HXX_
#define X_FRAME_HXX_
#include "frame.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_HYPLNK_HXX_
#define X_HYPLNK_HXX_
#include "hyplnk.hxx"
#endif

#ifndef X_EANCHOR_HXX_
#define X_EANCHOR_HXX_
#include "eanchor.hxx"
#endif

#ifndef X_ELABEL_HXX_
#define X_ELABEL_HXX_
#include "elabel.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_EFONT_HXX_
#define X_EFONT_HXX_
#include "efont.hxx"
#endif

#ifndef X_EAREA_HXX_
#define X_EAREA_HXX_
#include "earea.hxx"
#endif

#ifndef X_EMAP_HXX_
#define X_EMAP_HXX_
#include "emap.hxx"
#endif

#ifndef X_ESTYLE_HXX_
#define X_ESTYLE_HXX_
#include "estyle.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_ENOSHOW_HXX_
#define X_ENOSHOW_HXX_
#include "enoshow.hxx"
#endif

#ifndef X_ELINK_HXX_
#define X_ELINK_HXX_
#include "elink.hxx"
#endif

#ifndef X_EBGSOUND_HXX_
#define X_EBGSOUND_HXX_
#include "ebgsound.hxx"
#endif

#ifndef X_E1D_HXX_
#define X_E1D_HXX_
#include "e1d.hxx"
#endif

#ifndef X_GENERIC_HXX_
#define X_GENERIC_HXX_
#include "generic.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#define _cxx_
#include "tags.h"

HRESULT CreateHtmBodyParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmCommentParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmFramesetParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmFrameParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmGenericParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmHeadParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmIframeParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmNoShowParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmObjectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmPreParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmScriptParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmStyleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTextareaParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTextParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTitleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmSelectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);

// to make them global (could just as well go to .hxx)
extern const ELEMENT_TAG s_atagNull[];
extern const ELEMENT_TAG s_atagAppletObject[];
extern const ELEMENT_TAG s_atagIframe[];
extern const ELEMENT_TAG s_atagEOFProhibited[];

//+---------------------------------------------------------------------------
//
//  Parse classes
//
//  If not otherwise specified, parseclass fields default to the following
//  values (numerically zero):
//
//  CHtmlParseClass hpcDefault =
//  {
//      SCOPE_EMPTY,        // _scope
//      TEXTTYPE_NEVER,     // _texttype
//      NULL,               // _atagEndContainers   -- REQUIRED --
//      NULL,               // _atagBeginContainers -- REQUIRED --
//      NULL,               // _atagProhibitedContainers
//      NULL,               // _atagRequiredContainers
//      ETAG_NULL,          // _etagDefaultContainer
//      FALSE,              // _fQueueForRequired
//      TEXTSCOPE_NEUTRAL,  // _textscope
//      ETAG_NULL,          // _etagTextSubcontainer
//      NULL,               // _atagMatch
//      ETAG_NULL,          // _etagUnmatchedSubstitute
//      NULL,               // _pfnHpxCreator
//      FALSE,              // _fMerge
//      ETAG_NULL,          // _etagImplicitChild
//      FALSE,              // _fCloseImplicitChild
//  };
//
//  The meaning of the parse table entries:
//
//  _scope determines default implicit end-tag behavior. The values are:
//      SCOPE_EMPTY: an end tag is implied immediately after a begin tag
//      SCOPE_NESTED: an automatic end tag is implied when a parent or
//                    further ancestor that is also SCOPE_NESTED is closed
//      SCOPE_OVERLAP: no default end-tags are implied
//
//      implicit end-tags can also be generated in other situations
//
//  _texttype is ALWAYS if the begin tag should be treated like a piece
//      of text with respect to _textscope and _textsubcontainer of
//      ancestors (see _textscope and _textsubcontainer).
//
//  _atagEndContainers is a set of strict End Containers of this tag.
//      1. An end tag of this tag will only match the lowest open element
//         if it is not an ancestor of a currently open End Container element.
//      2. If an End Container ancestor closes, this kind of element is
//         automatically closed (an automatic end tag is implied).
//
//      For example, <TD> is an End Container for <B> because </B>
//      does not match a B element that is an ancestor of an open TD
//      and because if an open TD closes, any open child B elements
//      are automatically closed.
//
//  _atagBeginContainers is a set of Begin Containers of this tag.
//      When looking for required containers, prohibited containers, and
//      masking containers, the parser never searches above a Begin Container
//      element.
//
//----------------------------------------------------------------------------

//      SCOPE_EMPTY,        // _scope
//      TEXTTYPE_NEVER,     // _texttype
//      NULL,               // _atagEndContainers   -- REQUIRED --
//      NULL,               // _atagBeginContainers -- REQUIRED --
//      NULL,               // _atagMaskingContainers
//      NULL,               // _atagProhibitedContainers
//      NULL,               // _atagRequiredContainers
//      ETAG_NULL,          // _etagDefaultContainer
//      FALSE,              // _fQueueForRequired
//      TEXTSCOPE_NEUTRAL,  // _textscope
//      ETAG_NULL,          // _etagTextSubcontainer
//      NULL,               // _atagMatch
//      ETAG_NULL,          // _etagUnmatchedSubstitute
//      NULL,               // _pfnHpxCreator
//      FALSE,              // _fMerge
//      ETAG_NULL,          // _etagImplicitChild
//      FALSE,              // _fCloseImplicitChild
//  };


const ELEMENT_TAG s_atagNull[] = {ETAG_NULL};
const ELEMENT_TAG s_atagHtml[] = {ETAG_HTML, ETAG_NULL};
const ELEMENT_TAG s_atagHead[] = {ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagBody[] = {ETAG_BODY, ETAG_NULL};
const ELEMENT_TAG s_atagBodyGeneric[] = {ETAG_BODY, ETAG_GENERIC, ETAG_NULL};
const ELEMENT_TAG s_atagBodyHead[] = {ETAG_BODY, ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagBodyHeadFrameSet[] = {ETAG_BODY, ETAG_HEAD, ETAG_FRAMESET, ETAG_NULL};
const ELEMENT_TAG s_atagOverlapBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagOverlapRequired[] = {ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_GENERIC, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagPBoundary[] = {ETAG_BLOCKQUOTE, ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_DIR, ETAG_DL, ETAG_LISTING, ETAG_MARQUEE, ETAG_MENU, ETAG_OL, ETAG_PRE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagPBoundaryGeneric[] = {ETAG_BLOCKQUOTE, ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_DIR, ETAG_DL, ETAG_GENERIC, ETAG_LISTING, ETAG_MARQUEE, ETAG_MENU, ETAG_OL, ETAG_PRE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagNestBoundary[] = {ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_HEAD, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagLiteral[] = {ETAG_COMMENT, ETAG_SCRIPT, ETAG_STYLE, ETAG_TEXTAREA, ETAG_GENERIC_LITERAL, ETAG_GENERIC_NESTED_LITERAL, ETAG_TITLE_TAG, ETAG_NULL};
const ELEMENT_TAG s_atagButton[] = {ETAG_BUTTON, ETAG_NULL};
const ELEMENT_TAG s_atagBasefont[] = {ETAG_BASEFONT, ETAG_NULL};
const ELEMENT_TAG s_atagA[] = {ETAG_A, ETAG_NULL};
const ELEMENT_TAG s_atagNobr[] = {ETAG_NOBR, ETAG_NULL};
const ELEMENT_TAG s_atagP[] = {ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagFieldset[] = {ETAG_FIELDSET, ETAG_NULL};
const ELEMENT_TAG s_atagLiP[] = {ETAG_LI, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagList[] = {ETAG_DL, ETAG_MENU, ETAG_OL, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagListCloses[] = {ETAG_DD, ETAG_DT, ETAG_LI, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagDdDtP[] = {ETAG_DD, ETAG_DT, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagSelect[] = {ETAG_SELECT, ETAG_NULL};
const ELEMENT_TAG s_atagOption[] = {ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagOptgroup[] = {ETAG_OPTGROUP, ETAG_NULL};
const ELEMENT_TAG s_atagIframe[] = {ETAG_IFRAME, ETAG_NULL};
const ELEMENT_TAG s_atagForm[] = {ETAG_FORM, ETAG_NULL};
const ELEMENT_TAG s_atagNoShow[] = {ETAG_NOEMBED, ETAG_NOSCRIPT, ETAG_NOFRAMES, ETAG_NULL};
const ELEMENT_TAG s_atagFormHead[] = {ETAG_FORM, ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagTable[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableTr[] = {ETAG_TABLE, ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagTdCloses[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTrCloses[] = {ETAG_TR, ETAG_CAPTION, ETAG_COLGROUP, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagColCloses[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTbodyCloses[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_COLGROUP, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTableCloses[] = {ETAG_TABLE, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagEndTr[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_NULL}; // NS compat: Bug 21464
const ELEMENT_TAG s_atagAppletObject[] = {ETAG_APPLET, ETAG_OBJECT, ETAG_NULL};
const ELEMENT_TAG s_atagTr[] = {ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagTbodyTfootThead[] = {ETAG_TBODY, ETAG_TFOOT, ETAG_THEAD, ETAG_NULL};
const ELEMENT_TAG s_atagColgroupTable[] = {ETAG_COLGROUP, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableCellCaption[] = {ETAG_CAPTION, ETAG_TABLE, ETAG_TC, ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagColgroup[] = {ETAG_COLGROUP, ETAG_NULL};
const ELEMENT_TAG s_atagObjectApplet[] = {ETAG_OBJECT, ETAG_APPLET, ETAG_NULL};
const ELEMENT_TAG s_atagFrameset[]  = {ETAG_FRAMESET, ETAG_NULL};
const ELEMENT_TAG s_atagEOFProhibited[] = {ETAG_APPLET, ETAG_COMMENT, ETAG_OBJECT, ETAG_SCRIPT, ETAG_STYLE, ETAG_TITLE_ELEMENT, ETAG_GENERIC_LITERAL, ETAG_GENERIC_NESTED_LITERAL, ETAG_NOSCRIPT, ETAG_NOFRAMES, ETAG_NOEMBED, ETAG_IFRAME, ETAG_NULL };


//+------------------------------------------------------------------------
//
//  Function:   MergableTags
//
//  Synopsis:   Returns TRUE if tags can be merged with MergeTag
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagTitles[] = {ETAG_TITLE_ELEMENT, ETAG_TITLE_TAG, ETAG_NULL};
const ELEMENT_TAG * const s_aatagMergable[] = {s_atagTitles, NULL};

BOOL
MergableTags(const ELEMENT_TAG etag1, const ELEMENT_TAG etag2)
{
    if (etag1 == etag2)
        return TRUE;
        
    const ELEMENT_TAG * const * patag;

    for (patag = s_aatagMergable; *patag; patag += 1)
    {
        if (IsEtagInSet(etag1, *patag) && IsEtagInSet(etag2, *patag))
            return TRUE;
    }
    
    return FALSE;
}

// Special parsing class for unknown tags - address is tested for equality


// ETAG_UNKNOWN

const CHtmlParseClass s_hpcUnknown =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// ROOT

// The ROOT element is never created - it exists in every tree.
// It excludes text, and implies a BODY element if text is injected.

static const CHtmlParseClass s_hpcRoot =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_BODY,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HTML

// The HTML element can be explicitly or implicitly created (it is required by the HEAD and BODY).
// It immediately implies the HEAD subcontainer
// HTML excludes text (text implies a BODY)



static const CHtmlParseClass s_hpcHtml =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagHtml,                     // _atagMaskingContainers       ; HTML in another HTML is masked
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; exclude text
    ETAG_BODY,                      // _etagTextSubcontainer        ; if text appears inside, it implies a BODY
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; IE5 bug 43801: merge HTML tags
    ETAG_HEAD,                      // _etagImplicitChild           ; HTML always has a HEAD child
    FALSE,                          // _fCloseImplicitChild         ; the child is left open
};

// HEAD

// The HEAD element will be implicitly created by the HTML element
// If HEAD tags are nested inside the HEAD section, they will be merged
// HEAD excludes text (text implies a BODY, which will close the HEAD)

static const CHtmlParseClass s_hpcHead =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers           ; HEAD is strictly contained by HTML
    s_atagHtml,                     // _atagBeginContainers         ; HEAD tag parse does not search above containing HTML
    s_atagBodyHead,                 // _atagMaskingContainers       ; HEAD tag in a BODY is masked
    NULL,                           // _atagProhibitedContainers
    s_atagHtml,                     // _atagRequiredContainers      ; HEAD tag requires an HTML tag
    ETAG_HTML,                      // _etagDefaultContainer        ; HEAD implies HTML if one isn't present
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmHeadParseCtx,          // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; HEAD tag in a HEAD is merged
    ETAG_TITLE_ELEMENT,             // _etagImplicitChild           ; HEAD always has a TITLE child
    TRUE,                           // _fCloseImplicitChild         ; the child is implicitly closed
};

// BODY

static const CHtmlParseClass s_hpcBody =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers           ; BODY is strictly contained by HTML
    s_atagHtml,                     // _atagBeginContainers         ; BODY tag parse does not search above containing HTML
    s_atagBody,                     // _atagMaskingContainers
    s_atagHead,                     // _atagProhibitedContainers    ; closes any open HEAD
    s_atagHtml,                     // _atagRequiredContainers      ; BODY tag requires an HTML tag
    ETAG_HTML,                      // _etagDefaultContainer        ; BODY implies HTML if one isn't present
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; BODY can contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmBodyParseCtx,          // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; BODY tag in a BODY is merged
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// PARAM

static const CHtmlParseClass s_hpcParam =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagAppletObject,             // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagAppletObject,             // _atagRequiredContainers      ; must appear inside an OBJECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if neither is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// BGSOUND, LINK, META, NEXTID

static const CHtmlParseClass s_hpcEmpty =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// AREA

// TODO: remove BASE

static const CHtmlParseClass s_hpcArea =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; area is text-like when pasting
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// BR, EMBED, IMG, INPUTTXT, ISINDEX, WBR

static const CHtmlParseClass s_hpcEmptyText =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; these empty tags are textlike
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// ACRONYM, B, BDO, BIG, BLINK, CITE, CODE, DEL, DFN, EM, FONT,
// I, INS, KBD, LABEL, Q, S, SAMP, SMALL, STRIKE, STRONG, SUB,
// SUP, TT, U, VAR

static const CHtmlParseClass s_hpcOverlap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or TD-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// MAP: map can overlap tags which can even overlap <TD>s etc

// MAP

static const CHtmlParseClass s_hpcMap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; map is text-like when pasting
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// overlapping tags which can even overlap <TD>s etc

// BASE, NOEMBED_OFF, NOFRAMES_OFF, NOSCRIPT_OFF

static const CHtmlParseClass s_hpcUnderlap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// FORM:
// FORMs can overlap anything, but they mask themselves

static const CHtmlParseClass s_hpcForm =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; forms are text-like when pasting
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagForm,                     // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// GENERIC

static const CHtmlParseClass s_hpcGeneric =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; text-like when pasting.  What a hack!  (anandra)
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD, or TD-like container
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// GENERIC_LITERAL

static const CHtmlParseClass s_hpcGenericLiteral =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; text-like when pasting
    s_atagNull,                     // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD, or TD-like container
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmGenericParseCtx,       // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// DEFAULT:

static const CHtmlParseClass s_hpcDefault =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_BODY,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// COMMENT:
// COMMENTs are literal, and specify a COMMENT context.

static const CHtmlParseClass s_hpcComment =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmCommentParseCtx,       // _pfnHpxCreator               ; create a CommentParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TITLE:
// TITLEs are literal, and specify a TITLE context.

// The first parse context is used to parse a title tag; note that the title tag is unique in that
// it is able to be parsed being entered in the tree; it is released as soon as it is finished
// being parsed

static const CHtmlParseClass s_hpcTitleTag =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmTitleParseCtx,         // _pfnHpxCreator               ; create a TitleParseCtx
    TRUE,                           // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// The title element is automatically placed at the beginning of the <HEAD> by the parser
// Should have identical rules as TitleTag except that it doesn't have a context

static const CHtmlParseClass s_hpcTitleElement =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator               ; create a TitleParseCtx
    TRUE,                           // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// SCRIPT:
// SCRIPTs are literal, and specify a SCRIPT context.

static const CHtmlParseClass s_hpcScript =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmScriptParseCtx,        // _pfnHpxCreator               ; create a ScriptParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// STYLE:
// STYLEs are literal, and specify a STYLE context

static const CHtmlParseClass s_hpcStyle =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmStyleParseCtx,         // _pfnHpxCreator               ; create a StyleParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TEXTAREA:
// TEXTAREAs are literal, and specify a TEXTAREA context

static const CHtmlParseClass s_hpcTextarea =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON container
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmPreParseCtx,           // _pfnHpxCreator               ; create a StyleParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// Raw whitsepace - raw text that can be queued

static CHtmlParseClass s_hpcRawWhitespace =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    TRUE,                           // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// NOEMBED, NOFRAMES, NOSCRIPT
// These tag define a context that turns all their contents into unknown tags

static const CHtmlParseClass s_hpcNoShow =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagNoShow,                   // _atagProhibitedContainers
    s_atagBodyHeadFrameSet,         // _atagRequiredContainers      ; must appear inside a BODY or HEAD or FRAMESET
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmNoShowParseCtx,        // _pfnHpxCreator               ; create a NoshowParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// IFRAME:
// IFRAMEs have their own context which hides contents

static const CHtmlParseClass s_hpcIframe =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagIframe,                   // _atagProhibitedContainers    ; close a previously open IFRAME
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if not present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmIframeParseCtx,        // _pfnHpxCreator               ; create an IframeParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// BASEFONT

static const CHtmlParseClass s_hpcBasefont =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; basefont is text-like when pasting
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagBasefont,                 // _atagProhibitedContainers    ; close any previously open BASEFONT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// HYPERLINKS:
// A tags end <A> tags

static const CHtmlParseClass s_hpcAnchor =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hide when inside BUTTON
    s_atagA,                        // _atagProhibitedContainers    ; close any previously open A
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// NOBR:
// NOBR tags end <NOBR> tags

static const CHtmlParseClass s_hpcNobr =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagNobr,                     // _atagProhibitedContainers    ; close any previously open NOBR
    s_atagBodyGeneric,              // _atagRequiredContainers      ; must appear inside a BODY or GENERIC
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    TRUE,                           // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// BR:
// end-BR tags become BR tags

static const CHtmlParseClass s_hpcBr =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; </BR> becomes <BR>
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// PARAGRAPHS:
// Paragraph tags (P, ADDRESS,...) end <P>s unless nested inside <UL>s etc
// An unmatched close tag implies a begin tag right before it


// ADDRESS, BLOCKQUOTE, DIR, FIELDSET, P, FIELDSET

static const CHtmlParseClass s_hpcParagraph =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike; force BODY etc (now forced by _atagRequired
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue when in HEAD
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

#if NEVER

// DL, MENU, OL, UL // replaced by hpcParagraph to be compat with IE4 and fix IE5 bug 39509

static const CHtmlParseClass s_hpcList =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagListCloses,               // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue when in HEAD
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

#endif

// LISTING, PLAINTEXT, PRE, XMP

static const CHtmlParseClass s_hpcPre =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    CreateHtmPreParseCtx,           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// LEGEND

static const CHtmlParseClass s_hpcLegend =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagFieldset,                 // _atagRequiredContainers      ; must appear inside a FIELDSET
    ETAG_NULL,                      // _etagDefaultContainer        ; if neither is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// CENTER tag:
// Closes paragraphs (see IE4 bug 29566) been requested that it shouldn't (IE5 bug 1379) but we haven't changed the behavior
// if we have an unmatched end CENTER, add an implicit begin CENTER
static const CHtmlParseClass s_hpcCenter =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagPBoundary,                // _atagBeginContainers         ; prohibited+required container is P-like
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; closes P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; match _atagBeginContainers
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// Hx:
// Header tags are similar to paragraph tags, but they have overlapping scope.

// H1, H2, H3, H4, H5, H6

const ELEMENT_TAG s_atagHeaders[] = {ETAG_H1, ETAG_H2, ETAG_H3, ETAG_H4, ETAG_H5, ETAG_H6, ETAG_NULL};

static const CHtmlParseClass s_hpcHeader =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    s_atagHeaders,                  // _atagMatch                   ; any </Hx> can match any other <Hy>
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HR:
// HRs close the preceding paragraph.

static const CHtmlParseClass s_hpcHr =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagPBoundary,                // _atagBeginContainers         ; when closing Ps stop searching at TABLE-like boundaries
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; closes P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or TABLE-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};



// LISTS:
// LIs close LIs; DDs and DTs close DDs and DTs

// LI

static const CHtmlParseClass s_hpcLI =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagLiP,                      // _atagProhibitedContainers    ; close any previously open LI or P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P-boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// DD, DT

static const CHtmlParseClass s_hpcDDDT =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagDdDtP,                    // _atagProhibitedContainers    ; close any previously open DD, DT, or P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P-boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// SELECT:
// SELECTs specify a SELECT context

static const CHtmlParseClass s_hpcSelect =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers           ; irrelevant
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers
    s_atagSelect,                   // _atagProhibitedContainers    ; close any previously open SELECT
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmSelectParseCtx,        // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OPTGROUP:
// OPTGROUPs do not accept text, and should only appear inside a SELECT

static const CHtmlParseClass s_hpcOptgroup =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagSelect,                   // _atagEndContainers           ; if a SELECT container ends, the OPTGROUP ends
    s_atagSelect,                   // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagOptgroup,                 // _atagProhibitedContainers    ; close any previously open OPTGROUP
    s_atagSelect,                   // _atagRequiredContainers      ; must appear inside a SELECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if none is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OPTION:
// OPTIONs accept text, and should only appear inside a SELECT

static const CHtmlParseClass s_hpcOption =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagSelect,                   // _atagEndContainers           ; if a SELECT container ends, the OPTION ends
    s_atagSelect,                   // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagOption,                   // _atagProhibitedContainers    ; close any previously open SELECT
    s_atagSelect,                   // _atagRequiredContainers      ; must appear inside a SELECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if none is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OBJECT/APPLET:
// OBJECTs and APPLETs have their own context which accepts params

static const CHtmlParseClass s_hpcObjectApplet =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike unless in HEAD in cases; see CHtmHeadParseCtx
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagAppletObject,             // _atagProhibitedContainers    ; close any previously open APPLET or OBJECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note textlike will usually imply BODY)
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmObjectParseCtx,        // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HTMLAREA:
// HTMLAREA have their own context for storing text

#ifdef  NEVER
static const CHtmlParseClass s_hpcRichtext =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON container
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};
#endif


// MARQUEE:

static const CHtmlParseClass s_hpcMarquee =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TABLES:
// Tables contain sections, which contain rows, which contain cells.
// <TR>s and <TBODY>s are implied where needed, but <TABLE>s are not implied.
// Cells, rows, and sections are implicitly closed by their peers
// <COLGROUP> is similar to a section, but is implicitly closed by cells and rows

const ELEMENT_TAG s_atagTableEndRootContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableBeginRootContainers[] = {ETAG_BODY, ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableProhibitedContainers[] = {ETAG_TABLE, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};

const ELEMENT_TAG s_atagTCellRootContainers[] = {ETAG_TR, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTCellProhibitedContainers[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTCellRequiredContainers[] = {ETAG_TR, ETAG_NULL};

const ELEMENT_TAG s_atagTRowBeginContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTRowEndContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_NULL}; // NS compat: Bug 21464
const ELEMENT_TAG s_atagTRowProhibitedContainers[] = {ETAG_TR, ETAG_CAPTION, ETAG_COLGROUP, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTRowRequiredContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_NULL};

const ELEMENT_TAG s_atagTSectionBeginContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTSectionEndContainers[] = {ETAG_TABLE, /* ETAG_TD, ETAG_TH, ETAG_CAPTION,*/ ETAG_NULL}; // see bugs 22924, 21464
const ELEMENT_TAG s_atagTSectionProhibitedContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_COLGROUP, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTSectionRequiredContainers[] = {ETAG_TABLE, ETAG_NULL};

const ELEMENT_TAG s_atagTColRootContainers[] = {ETAG_COLGROUP, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTColProhibitedContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTColRequiredContainers[] = {ETAG_COLGROUP, ETAG_NULL};

const ELEMENT_TAG s_atagTCRootContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTCProhibitedContainers[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTCRequiredContainers[] = {ETAG_TABLE, ETAG_NULL};

// TD, TH

static const CHtmlParseClass s_hpcTCell =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTableTr,                  // _atagEndContainers           ; end when container TR ends; nested TABLE hides end TDs
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTdCloses,                 // _atagProhibitedContainers
    s_atagTr,                       // _atagRequiredContainers      ; must appear inside a TR
    ETAG_TR,                        // _etagDefaultContainer        ; if none is present, imply TR
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmTextParseCtx,          // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TC

// table compatibility cell - used to wrap text when it appears inside a disallowed table context

static const CHtmlParseClass s_hpcTC =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers           ; nested TABLE hides end TCs
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTdCloses,                 // _atagProhibitedContainers    ; same as TD
    s_atagTable,                    // _atagRequiredContainers      ; must appear inside a table
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TR


static const CHtmlParseClass s_hpcTRow =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagEndTr,                    // _atagEndContainers           ; * Nested TABLE, TD hides /TR; end when container TBODY ends
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTrCloses,                 // _atagProhibitedContainers
    s_atagTbodyTfootThead,          // _atagRequiredContainers      ; must appear inside a TBODY, TFOOt, THEAD
    ETAG_TBODY,                     // _etagDefaultContainer        ; if none is present, imply TBODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; don't accept text directly
    ETAG_TC,                        // _etagTextSubcontainer        ; if text appears, wrap it in a TC
    NULL,                           // _atagMatch
    ETAG_TD,                        // _etagUnmatchedSubstitute     ; NS compat bug 22985/56944: /TR ends TD but does not end table row
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// * Note that NS compat: Bug 21464 forces us to include TD and TH in the list of containers that end TR.
// This is because in the sequence <TABLE><TR><TD></TR>, the </TR> does not match the <TR>, because it
// is apparently hidden by the <TD>.



// COL

static const CHtmlParseClass s_hpcTCol =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; irrelevant
    s_atagColgroupTable,            // _atagBeginContainers         ; don't search beyond container COLGROUP, TABLE
    NULL,                           // _atagMaskingContainers
    s_atagColCloses,                // _atagProhibitedContainers
    s_atagColgroup,                 // _atagRequiredContainers      ; must appear inside a COLGROUP
    ETAG_COLGROUP,                  // _etagDefaultContainer        ; if none is present, imply COLGROUP
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// COLGROUP, TBODY, TFOOT, THEAD

static const CHtmlParseClass s_hpcTSection =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers           ; see bugs 22924, 21464
    s_atagTable,                    // _atagEndcontainers
    NULL,                           // _atagMaskingContainers
    s_atagTbodyCloses,              // _atagProhibitedContainers
    s_atagTable,                    // _atagRequiredContainers      ; requires a TABLE
    ETAG_NULL,                      // _etagDefaultContainer        ; none present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_TC,                        // _etagTextSubcontainer        ; wrap disallowed text inside a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// CAPTION

// same as TBODY, but can contain text

static const CHtmlParseClass s_hpcCaption =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers
    s_atagTable,                    // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagTbodyCloses,              // _atagProhibitedContainers
    s_atagTable,                    // _atagRequiredContainers      ; requires a TABLE
    ETAG_NULL,                      // _etagDefaultContainer        ; none present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TABLE

static const CHtmlParseClass s_hpcTable =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagTable,                    // _atagEndContainers
    s_atagTableCellCaption,         // _atagBeginContainers         ; allow nesting inside TD, CAPTION, TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTableCloses,              // _atagProhibitedContainers    ; close prevous TABLE, TC, SELECT, OPTION
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; exclude text
    ETAG_TC,                        // _etagTextSubcontainer        ; wrap contained text in a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};



// BUTTON:
// BUTTONs are text edits...
const ELEMENT_TAG s_atagButtonProhibitedContainers[] = {ETAG_BUTTON, ETAG_NULL};

static const CHtmlParseClass s_hpcButton =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers
    s_atagNestBoundary,             // _atagBeginContainers         ; TABLE-like container boundaries
    NULL,                           // _atagMaskingContainers
    s_atagButton,                   // _atagProhibitedContainers    ; close previously open BUTTON
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; exclude text
    ETAG_NULL,                      // _etagTextSubcontainer        ; wrap contained text in a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// INPUT:
// INPUTs are textbox, buttons, checkbox ...
static const CHtmlParseClass s_hpcInput =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike only if not hidden; see CHtmTopParseCtx::QueryTextlike
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// Frame and frameset have special classes for bug 54592:
// A <FORM> must be closed before they begin

// FRAME

static const CHtmlParseClass s_hpcFrame =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagForm,                     // _atagProhibitedContainers
    s_atagFrameset,                 // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmFrameParseCtx,         // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// FRAMESET

static const CHtmlParseClass s_hpcFrameset =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers               // End HTML will end a frameset
    s_atagHtml,                     // _atagBeginContainers             // Don't look beyond an HTML for anything
    NULL,                           // _atagMaskingContainers
    s_atagFormHead,                 // _atagProhibitedContainers        // Close any open FORMs or HEADs
    s_atagHtml,                     // _atagRequiredContainers          // Require an HTML
    ETAG_HTML,                      // _etagDefaultContainer            // Imply one if there isn't one there.
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmFramesetParseCtx,      // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RAW_COMMENT

static const CHtmlParseClass s_hpcRawComment =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagNull,                     // _atagBeginContainers         ; begin tags are irrelevant
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// RUBY ADDITIONS

// RUBY tag
const ELEMENT_TAG s_atagRubyProhibited[] = {ETAG_RUBY, ETAG_RT, ETAG_NULL};

static const CHtmlParseClass s_hpcRuby =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRubyProhibited,           // _atagProhibitedContainers
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or TD-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RT tag
const ELEMENT_TAG s_atagRTBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_RUBY, ETAG_NULL};
const ELEMENT_TAG s_atagRTRequired[] = {ETAG_RUBY, ETAG_NULL};
const ELEMENT_TAG s_atagRTProhibited[]  = {ETAG_RT, ETAG_RP, ETAG_NULL};

static const CHtmlParseClass s_hpcRubyText =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagRTBoundary,	            // _atagEndContainers           ; don't match end tags beyond RUBY boundary
    s_atagRTBoundary,               // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRTProhibited,             // _atagProhibitedContainers
    s_atagRTRequired,               // _atagRequiredContainers      ; must appear inside a RUBY container
    ETAG_NULL,                      // _etagDefaultContainer        
    FALSE,                          // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RP tag
const ELEMENT_TAG s_atagRPBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_RUBY, ETAG_RT, ETAG_NULL};
const ELEMENT_TAG s_atagRPProhibited[]  = {ETAG_RP, ETAG_NULL};

static const CHtmlParseClass s_hpcRubyParen =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagRPBoundary,	            // _atagEndContainers           ; don't match end tags beyond RUBY boundary
    s_atagRTBoundary,               // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRPProhibited,             // _atagProhibitedContainers
    s_atagRTRequired,               // _atagRequiredContainers      ; must appear inside a RUBY container
    ETAG_NULL,                      // _etagDefaultContainer        
    FALSE,                          // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// the hash table of tag names

CPtrBagCi<ELEMENT_TAG> g_bKnownTags(&g_tagasc);

// the tagdescs

const CTagDesc g_atagdesc[] =
{
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { _T(""),               &s_hpcUnknown,                  CUnknownElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_A,              &s_hpcAnchor,                   CAnchorElement::CreateElement,
                            0                               },
    { SZTAG_ACRONYM,        &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_ADDRESS,        &s_hpcParagraph,                CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_APPLET,         &s_hpcObjectApplet,             CObjectElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_WAITATEND               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_AREA,           &s_hpcArea,                     CAreaElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_B,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BASE,           &s_hpcUnderlap,                 CBaseElement::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_NEVERSAVEEND            },
    { SZTAG_BASEFONT,       &s_hpcBasefont,                 CBaseFontElement::CreateElement,
                            0                               },
    { SZTAG_BDO,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BGSOUND,        &s_hpcEmpty,                    CBGsound::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_TEXTLESS                },
    { SZTAG_BIG,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BLINK,          &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BLOCKQUOTE,     &s_hpcParagraph,                CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_SPLITBLOCKINLIST        |
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BODY,           &s_hpcBody,                     CBodyElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_CONTAINER               |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_BR,             &s_hpcBr,                       CBRElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_BUTTON,         &s_hpcButton,                   CButton::CreateElement,
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_CONTAINER               },
    { SZTAG_CAPTION,        &s_hpcCaption,                  CTableCaption::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_CENTER,         &s_hpcCenter,                   CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_CITE,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_CODE,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_COL,            &s_hpcTCol,                     CTableCol::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_COLGROUP,       &s_hpcTSection,                 CTableCol::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_COMMENT,        &s_hpcComment,                  CCommentElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    { SZTAG_DD,             &s_hpcDDDT,                     CDDElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LISTITEM                |
                            TAGDESC_BLKSTYLEDD              },
    { _T(""),               &s_hpcDefault,                  CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_DEL,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_DFN,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_DIR,            &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_DIV,            &s_hpcParagraph,                CDivElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_DL,             &s_hpcParagraph,                CDListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_DT,             &s_hpcDDDT,                     CDTElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LISTITEM                |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_EM,             &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_EMBED,          &s_hpcEmptyText,                CPluginSite::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_FIELDSET,       &s_hpcParagraph,                CFieldSetElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        |
                            TAGDESC_ACCEPTHTML              },
    { SZTAG_FONT,           &s_hpcOverlap,                  CFontElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_FORM,           &s_hpcForm,                     CFormElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_FRAME,          &s_hpcFrame,                    CFrameElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_CONTAINER               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_FRAMESET,       &s_hpcFrameset,                 CFrameSetSite::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_H1,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H2,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H3,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H4,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H5,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H6,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_HEAD,           &s_hpcHead,                     CHeadElement::CreateElement,
                            TAGDESC_SAVEALWAYSEND           },
    { SZTAG_HR,             &s_hpcHr,                       CHRElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_OWNLINE                 },
    { SZTAG_HTML,           &s_hpcHtml,                     CHtmlElement::CreateElement,
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_ENTER_TREE_IMMEDIATELY  |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_I,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_IFRAME,         &s_hpcIframe,                   CIFrameElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_IMG,            &s_hpcEmptyText,                CImgElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_INPUT,          &s_hpcInput,                    CreateInputElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_CONTAINER               |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_LOGICALINVISUAL         },
    { SZTAG_INS,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_ISINDEX,        &s_hpcEmptyText,                CIsIndexElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_KBD,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_LABEL,          &s_hpcOverlap,                  CLabelElement::CreateElement,
                            0                               },
    { SZTAG_LEGEND,         &s_hpcLegend,                   CLegendElement::CreateElement,
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_OWNLINE                 |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
    { SZTAG_LI,             &s_hpcLI,                       CLIElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LISTITEM                },
    { SZTAG_LINK,           &s_hpcEmpty,                    CLinkElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_WAITATSTART             |
                            TAGDESC_DONTWAITFORINPLACE      },
    { SZTAG_LISTING,        &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_MAP,            &s_hpcMap,                      CMapElement::CreateElement,
                            TAGDESC_SAVEINDENT              },
    { SZTAG_MARQUEE,        &s_hpcMarquee,                  CMarquee::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
    { SZTAG_MENU,           &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_META,           &s_hpcEmpty,                    CMetaElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SAVETAGOWNLINE          },
    { SZTAG_NEXTID,         &s_hpcEmpty,                    CNextIdElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_NOBR,           &s_hpcNobr,                     CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_NOEMBED,        &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOEMBED, /*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_NOFRAMES,       &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOFRAMES,/*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_NOSCRIPT,       &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOSCRIPT,/*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_OBJECT,         &s_hpcObjectApplet,             CObjectElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LOGICALINVISUAL         |
                            TAGDESC_WAITATEND               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_OL,             &s_hpcParagraph,                COListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_OPTION,         &s_hpcOption,                   COptionElement::CreateElement,
                            0                               },
    { SZTAG_P,              &s_hpcParagraph,                CParaElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_PARAM,          &s_hpcParam,                    CParamElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_PLAINTEXT,      &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_DONTSAVEAFTERIMPEND     |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_PRE,            &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_Q,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
#ifdef  NEVER
    { SZTAG_HTMLAREA,       &s_hpcRichtext,                 CRichtext::CreateElement,
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
#endif
    { _T(""),               &s_hpcRoot,                     CTextElement::CreateElement,
                            TAGDESC_ACCEPTHTML              |
// Do NOT make the root a container
//               BAD  --->    TAGDESC_CONTAINER             |
                            TAGDESC_BLOCKELEMENT            },
    { SZTAG_RP,             &s_hpcRubyParen,                CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_RT,             &s_hpcRubyText,                 CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_RUBY,           &s_hpcRuby,                     CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_S,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SAMP,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SCRIPT,         &s_hpcScript,                   CScriptElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_WAITATEND               },
    { SZTAG_SELECT,         &s_hpcSelect,                   CSelectElement::CreateElement,
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_LOGICALINVISUAL         },
    { SZTAG_SMALL,          &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SPAN,           &s_hpcOverlap,                  CSpanElement::CreateElement,
                            0                               },
    { SZTAG_STRIKE,         &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_STRONG,         &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_STYLE,          &s_hpcStyle,                    CStyleElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    { SZTAG_SUB,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SUP,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_TABLE,          &s_hpcTable,                    CTable::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_WONTBREAKLINE           |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TBODY,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { _T(""),/*TC*/         &s_hpcTC,                       CTableCaption::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              },
    { SZTAG_TD,             &s_hpcTCell,                    CTableCell::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TEXTAREA,       &s_hpcTextarea,                 CTextArea::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_LOGICALINVISUAL         |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_CONTAINER               },
    { SZTAG_TFOOT,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_TH,             &s_hpcTCell,                    CTableCell::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_THEAD,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_TITLE,          &s_hpcTitleTag,                 CTextElement::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITCTX                  },
    { SZTAG_TR,             &s_hpcTRow,                     CTableRow::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TT,             &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_U,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_UL,             &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_VAR,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_WBR,            &s_hpcEmptyText,                CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_XMP,            &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC
    { _T(""),               &s_hpcGeneric,                  CGenericElement::CreateElement,
                            0                               },
    // ETAG_GENERIC_LITERAL
    { _T(""),               &s_hpcGenericLiteral,           CGenericElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC_NESTED_LITERAL
    { _T(""),               &s_hpcGenericLiteral,           CGenericElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC_BUILTIN
    { _T(""),               &s_hpcGeneric,                  CGenericElement::CreateElement,
                            0                               },
    // ETAG_TITLE_ELEMENT
    { SZTAG_TITLE,          &s_hpcTitleElement,             CTitleElement::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           },
    { SZTAG_OPTGROUP,       &s_hpcOptgroup,                 COptionElement::CreateElement,
                            TAGDESC_SAVEINDENT              },
    { SZTAG_RAW_COMMENT,    &s_hpcRawComment,               CCommentElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_SOURCE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_TEXT
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_EOF
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_CODEPAGE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_WAITATEND               | // WAITATEND: blocks when _fRestart==TRUE
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_DOCSIZE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_BEGINFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_ENDFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_BEGINSEL
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_ENDSEL
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    //ETAG_RAW_EXTENDEDTAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    //ETAG_RAW_XMLNAMESPACE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_TEXTFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            0                               },
                            
    // ETAG_RAW_INCLUDE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_WAITATSTART             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },

    // ETAG_RAW_RESOLVE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_REJECT
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_COLLAPSED_WHITESPACE
    { _T(""),               &s_hpcRawWhitespace,            CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_POSTSTART
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
                            
};

//+------------------------------------------------------------------------
//
//  Member:     HpcFromEtag
//
//  Synopsis:   returns the parse class for the etag
//
//  Arguments:  tag (ELEMENT_TAG)
//
//  Returns:    CHtmlParseClass *
//
//-------------------------------------------------------------------------
const CHtmlParseClass *
HpcFromEtag(const ELEMENT_TAG tag)
{
    const CTagDesc *ptd = TagDescFromEtag(tag);

    Assert(ptd);

    return ptd ? ptd->_pParseClass : 0;
}

//+------------------------------------------------------------------------
//
//  Member:     TagProhibitedContainer(ELEMENT_TAG tag1, tag2)
//
//  Synopsis:   returns TRUE if tag2 is a prohibited container of tag1.
//
//  Arguments:  tag1, tag2 (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagProhibitedContainer(const ELEMENT_TAG tag1, const ELEMENT_TAG tag2)
{
    const CHtmlParseClass * phpc1 = HpcFromEtag(tag1);

    return phpc1 && phpc1->_atagProhibitedContainers &&
        IsEtagInSet(tag2, phpc1->_atagProhibitedContainers);
}

//+------------------------------------------------------------------------
//
//  Member:     TagProhibitedContainer(ELEMENT_TAG tag1, tag2)
//
//  Synopsis:   returns TRUE if tag1 is an end container of tag2.
//
//  Arguments:  tag1, tag2 (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagEndContainer(const ELEMENT_TAG tag1, const ELEMENT_TAG tag2)
{
    const CHtmlParseClass * phpc1 = HpcFromEtag(tag1);

    return phpc1 && phpc1->_atagEndContainers &&
        IsEtagInSet(tag2, phpc1->_atagEndContainers);
}

//+------------------------------------------------------------------------
//
//  Member:     TagHasNoEndTag(ELEMENT_TAG tag)
//
//  Synopsis:   returns TRUE if tag should not have an end tag
//
//  Arguments:  tag (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagHasNoEndTag(const ELEMENT_TAG tag)
{
    const CHtmlParseClass * phpc = HpcFromEtag(tag);
    const CTagDesc *ptd = TagDescFromEtag(tag);

    return  !phpc || phpc->_scope == SCOPE_EMPTY 
        ||  !ptd || ptd->HasFlag( TAGDESC_NEVERSAVEEND );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmpost.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmpost.cxx
//
//  Contents:   Implementation of CHtmPost class
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_DOCGLBS_HXX_
#define X_DOCGLBS_HXX_
#include "docglbs.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_DIV_HXX_
#define X_DIV_HXX_
#include "div.hxx"
#endif

#ifndef X_URLCOMP_HXX_
#define X_URLCOMP_HXX_
#include "urlcomp.hxx"
#endif

#ifndef X_ROOTELEM_HXX
#define X_ROOTELEM_HXX
#include "rootelem.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_VMEM_HXX_
#define X_VMEM_HXX_
#include "vmem.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_XMLNS_HXX_
#define X_XMLNS_HXX_
#include "xmlns.hxx"
#endif

#ifndef X_DEBUGGER_HXX_
#define X_DEBUGGER_HXX_
#include "debugger.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include "prgsnk.h"
#endif

#ifndef X_PEER_HXX_
#define X_PEER_HXX_
#include "peer.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif


#define HTMPOST_BUFFER_SIZE     4096
#define HTMPOST_BUFFER_GROW     2048
#define POSTMAN_TIMESLICE       200

PerfDbgTag(tagHtmPost,      "Dwn", "Trace CHtmPost")
PerfDbgTag(tagOneToken,     "Dwn", "! HtmPost one token at a time");
PerfDbgTag(tagAllTokens,    "Dwn", "! HtmPost all available tokens at once");
PerfDbgTag(tagToken2,       "Dwn", "! HtmPost detailed token trace");
PerfDbgTag(tagParseSlowly,  "Dwn", "! HtmPost parse slowly")
PerfDbgTag(tagStrictPch,    "Dwn", "! HtmPost strict unterminated strings")
PerfDbgTag(tagPostExec,     "Dwn", "Trace CHtmPost::Exec")
ExternTag(tagPalette);

PerfDbgExtern(tagPerfWatch)

MtDefine(CHtmPost, Dwn, "CHtmPost")
MtDefine(CHtmPost_aryphtSaved_pv, CHtmPost, "CHtmPost::_aryphtSaved::_pv")
MtDefine(CHtmPost_IsIndexHack_phtInput, Locals, "CHtmPost::IsIndexHack phtInput")
MtDefine(CHtmPost_ProcessIncludeToken_pchUrl, Locals, "CHtmPost::ProcessIncludeToken pchUrl")
MtDefine(CHtmPost_OnIncludeDwnChan_pbBuffer, Locals, "CHtmPost::OnIncludeDwnChan pbbuffer")
MtDefine(CHtmPost_OnIncludeDwnChan_pchSrcCode, Locals, "CHtmPost::OnIncludeDwnChan pchSrcCode")

DeclareTag(tagPeerCHtmPostRegisterXmlNamespace,  "Peer", "trace CHtmPost::RegisterXmlNamespace")

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

// Forward Declarations -------------------------------------------------------

void CALLBACK   PostManOnTimer(HWND hwnd, UINT umsg, UINT_PTR idevent, DWORD dwTime);
void            PostManSetTimer(THREADSTATE * pts);
void            PostManExecute(THREADSTATE * pts, DWORD dwTimeout, CHtmPost * pHtmPost);
HRESULT         PostManRunNested(THREADSTATE *pts, CHtmPost *pHtmPost);
void            PostManValidate();

//+------------------------------------------------------------------------
//
//  Member:     TraceToken
//
//-------------------------------------------------------------------------

#if DBG==1

#define PRETTY_CHAR(ch) ((ch) < 32 ? _T('~') : (ch) > 127 ? _T('@') : (ch))

void
TraceToken(CHtmPost *pHtmPost, CHtmTag *pht)
{
    if (pht)
    {
        if (pht->Is(ETAG_RAW_TEXT) || pht->Is(ETAG_RAW_COMMENT) || pht->Is(ETAG_RAW_TEXTFRAG))
        {
            TCHAR ach[128];
            char *pchTagName;
            UINT cch = min((UINT) ARRAY_SIZE(ach) - 1, (UINT)pht->GetCch());

            memcpy(ach, pht->GetPch(), cch * sizeof(TCHAR));
            ach[cch] = 0;
            for (TCHAR * pchT = ach; cch; --cch, ++pchT)
                *pchT = PRETTY_CHAR(*pchT);

            pchTagName = pht->Is(ETAG_RAW_TEXT) ? "TEXT" :
                         pht->Is(ETAG_RAW_COMMENT) ? "COMMENT" :
                         pht->Is(ETAG_RAW_SOURCE) ? "SOURCE" :
                         "TEXTFRAG";

            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld %s cch=%ld \"%ls\"", pht->GetTag(),
                        pchTagName, pht->GetCch(), ach);
        }
        else if (pht->Is(ETAG_RAW_SOURCE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld SOURCE cch=%ld",
                        pht->GetTag(), pht->GetSourceCch());
        }
        else if (pht->Is(ETAG_RAW_CODEPAGE))
        {
            PerfDbgLog3(tagToken2, pHtmPost, "etag = %3ld CODEPAGE cp=%ld fRestart=%ld",
                        pht->GetTag(), pht->GetCodepage(), pht->IsRestart());
        }
        else if (pht->Is(ETAG_RAW_DOCSIZE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld DOCSIZE ulSize=%ld",
                        pht->GetTag(), pht->GetDocSize());
        }
        else if (pht->Is(ETAG_RAW_EOF))
        {
            PerfDbgLog1(tagToken2, pHtmPost, "etag = %3ld EOF", pht->GetTag());
        }
        else if (pht->Is(ETAG_SCRIPT) && !pht->IsEnd())
        {
            PerfDbgLog5(tagToken2, pHtmPost, "etag = %3ld <%lsSCRIPT%ls> ulLine=%ld ulOffset=%ld",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        pht->IsEmpty() ? _T(" /") : _T(""), pht->GetLine(), pht->GetOffset());
        }
        else if (pht->GetTag() > ETAG_NULL && pht->GetTag() < ETAG_GENERIC)
        {
            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld <%ls%ls%ls>",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        NameFromEtag(pht->GetTag()), pht->IsEmpty() ? _T(" /") : _T(""));
        }
        else if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld %ls",
                pht->GetTag(), pht->Is(ETAG_RAW_BEGINSEL) ? _T("BEGINSEL") : _T("ENDSEL"));
        }
        else if (pht->Is(ETAG_RAW_RESOLVE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld RESOLVE %ls",
                pht->GetTag(), pht->GetPch() );
        }
        else
        {
            Assert(!pht->IsTiny());
            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld <%ls%ls%ls>",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        (!pht->IsTiny() && pht->GetPch()) ? pht->GetPch() : _T("(nil)"),
                        pht->IsEmpty() ? _T(" /") : _T(""));
        }

        CHtmTag::CAttr *pattr;
        int i = pht->GetAttrCount();

        if (i > 0)
        {
            for (pattr = pht->GetAttr(0); i; i--, pattr++)
            {
                PerfDbgLog2(tagToken2, pHtmPost, "       attr  %ls = %ls", pattr->_pchName, !pattr->_pchVal ? _T("NULL") : pattr->_pchVal);
            }
        }
    }
}

#else

#define TraceToken(post, pht)

#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Init
//
//  Synopsis:   Hooks up the post parser to the doc (for output),
//              post channel  (for input), and load ctx (for notification)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::Init(CHtmLoad * pHtmLoad, CHtmTagStm * pHtmTagStm,
    CDoc * pDoc, CMarkup * pMarkup, HTMPASTEINFO * phpi, BOOL fSync)
{
    HRESULT hr;

    _dwFlags    = POSTF_ONETIME | (phpi ? POSTF_PASTING : 0);
    _pDoc       = pDoc;
    _pMarkup    = pMarkup;
    _pHtmLoad   = pHtmLoad;
    _pHtmTagStm = pHtmTagStm;
    _pMarkup    = pMarkup;
    _pNodeRoot  = _pMarkup->Root()->GetFirstBranch();
    _phpi       = phpi;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    _dwIncludeDownloadCookie = NULL;
#endif

    _pDoc->SubAddRef();
    _pMarkup->SubAddRef();
    _pHtmLoad->SubAddRef();
    _pHtmTagStm->AddRef();

    _pHtmParse  = new CHtmParse;

    if (!_pHtmParse)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmParse->Init(_pDoc, _pMarkup, _pNodeRoot));
    if (hr)
        goto Cleanup;

    if (_dwFlags & POSTF_DIE)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    // hook up async notification if not parsing synchronously

    if (!fSync)
    {
        _pHtmTagStm->SetCallback(OnDwnChanCallback, this);
    }

    if (_pMarkup->GetPicsTarget() && _pMarkup->_fPicsProcessPending)
    {
        _fScanMode = TRUE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::OnDwnChanCallback
//
//  Synopsis:   Callback when post stream has more data
//
//-------------------------------------------------------------------------
void CALLBACK
CHtmPost::OnDwnChanCallback(void * pvObj, void * pvArg)
{
    PerfDbgLog(tagPerfWatch, pvObj, "+CHtmPost::OnDwnChanCallback");
    PerfDbgLog(tagHtmPost, pvObj, "+CHtmPost::OnDwnChanCallback");

#ifdef SWITCHES_ENABLED
    if (    !IsSwitchSerialize()
        ||  ((CHtmPost *)pvArg)->_pHtmTagStm->IsEofWritten()
        ||  ((CHtmPost *)pvArg)->_pHtmLoad->_pHtmPre->IsSuspended())
        PostManResume((CHtmPost *)pvArg, TRUE);
#else
    PostManResume((CHtmPost *)pvArg, TRUE);
#endif

    PerfDbgLog(tagHtmPost, pvObj, "-CHtmPost::OnDwnChanCallback");
    PerfDbgLog(tagPerfWatch, pvObj, "-CHtmPost::OnDwnChanCallback");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::RunNested
//
//  Synopsis:   Runs the parser for script, in a nested context.
//
//              Allowed to be called recursively (unlike ::Exec)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::RunNested()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::RunNested");

    DWORD   dwFlagsSav;
    HRESULT hr;

    // save nested state
    dwFlagsSav = (_dwFlags & (POSTF_RESUME_PREPARSER | POSTF_NESTED));

    // set initial nested state
    Assert(!(_dwFlags & POSTF_NEED_EXECUTE)); // does not need saving

    _dwFlags &= ~POSTF_RESUME_PREPARSER;
    _dwFlags |= POSTF_NESTED;

    // stop this post from running on message loop; and run to exhaustion
    hr = THR(Exec(INFINITE));

    // restore nested state
    _dwFlags = (_dwFlags & ~(POSTF_RESUME_PREPARSER | POSTF_NESTED)) | dwFlagsSav;

    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::RunNested");

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     TagIsHiddenInput
//
//  Synopsis:   TRUE if tag is <INPUT TYPE=HIDDEN>
//
//-------------------------------------------------------------------------
BOOL
TagIsHiddenInput(CHtmTag * pht)
{
    TCHAR *pchType;
    long iType;

    if (pht->GetTag() != ETAG_INPUT)
        return FALSE;

    if (!pht->ValFromName(_T("type"), &pchType) ||
            FAILED(s_enumdeschtmlInput.EnumFromString(pchType, &iType, FALSE)))
    {
        iType = htmlInputText;
    }

    return (iType == htmlInputHidden);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Exec
//
//  Synopsis:   Runs the parser
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::Exec(DWORD dwTimeout)
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::Exec");
    PerfDbgLog(tagPostExec, this, "+CHtmPost::Exec");

    HRESULT hr = S_OK;

#if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagAllTokens))
        dwTimeout = INFINITE;
#endif

#ifdef SWITCHES_ENABLED
    if (IsSwitchSerialize())
        dwTimeout = INFINITE;
#endif

    if (_dwFlags & (POSTF_SLEEP | POSTF_DIE | POSTF_ONETIME))
    {
        if (_dwFlags & (POSTF_SLEEP | POSTF_DIE))
        {
            // This can happen because CHtmPostTask can get awakened by a call
            // to OnChan which happened some time ago.  It will unlock and run
            // itself once and we'll end up getting called.  But we really don't
            // want to do anything, so we just return.  It will then call our
            // IsPending method and put the task back to sleep.
            goto Cleanup;
        }

        PerfDbgLog1(tagToken2, this, "Beginning CHtmPost processing of %ls ----------------------------------------",
                    _pDoc->GetPrimaryUrl());

        hr = THR(_pHtmLoad->OnPostStart());
        if (hr)
            goto Cleanup;

        _dwFlags &= ~POSTF_ONETIME;
    }

    do
    {
        if (!_fScanMode)
        {
            if (!(_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER)))
            {
                // prepare parsers for a run of tokens

                hr = THR(Broadcast(CHtmParse::Prepare));
                if (hr)
                    goto Cleanup;

                // read tokens until out of time or out of tokens (try at least once)

                if (!IsAtEof())
                {
                    hr = THR(ProcessTokens(dwTimeout));
                    if (hr)
                        goto Cleanup;

                    if (_dwFlags & POSTF_DIE)
                    {
                        hr = E_ABORT;
                        goto Cleanup;
                    }
                }

                if (!IsAtEof() && !(_dwFlags & POSTF_RESTART))
                {
                    // commit parsers

                    hr = THR(Broadcast(CHtmParse::Commit));
                    if (hr)
                        goto Cleanup;
                }
                else
                {
                    // flush through EOF text token to create <BODY> etc
                    CNotification   nf;

                    CHtmTag ht;

                    ht.Reset();
                    ht.SetTag(ETAG_RAW_EOF);
                    ht.SetPch(NULL);
                    ht.SetCch(0);

                    TraceToken(this, &ht);

                    hr = THR(_pHtmParse->ParseToken(&ht));
                    if (hr)
                        goto Cleanup;

                    hr = THR(Broadcast(CHtmParse::Finish));
                    if (hr)
                        goto Cleanup;

                    // CONSIDER (EricVas) Note to DBau - work this into the parser scheme

                    nf.EndParse(_pMarkup->Root());
                    _pMarkup->Root()->Notify(&nf);

                    // Grab the left and right selection pos'es
                    if (_phpi)
                    {
                        _pHtmParse->GetPointers(&(_phpi->ptpSelBegin), &(_phpi->ptpSelEnd));
                    }

                    if (!(_dwFlags & POSTF_RESTART))
                    {
                        // Wait for inplace activation after processing EOF.  Pretend we need execution to
                        // keep IsDone from going TRUE while we wait.

                        _dwFlags |= POSTF_WAIT | POSTF_NEED_EXECUTE;
                    }
                }
            }

            //
            // Block the parser if we need to (our execute will happen
            // after we unblock)
            //

            if (_dwFlags & POSTF_WAIT)
            {
                if (!(_dwFlags & POSTF_DONTWAITFORINPLACE))
                {
                    _pDoc->_fNeedInPlaceActivation = TRUE;
                }

                if (!_pMarkup->AllowScriptExecution())
                {
                    // This will put the htmpost to sleep until the script
                    // can be executed.

                    _pMarkup->BlockScriptExecutionHelper();
                    if (_dwFlags & POSTF_SLEEP)
                        goto Cleanup;

                    Assert(_pMarkup->AllowScriptExecution());
                }

                // (alexz, jbeda)
                // in the following calls do the "if" here not relying on the same "if" in CDoc code so
                // to avoid touching that code if it is not necessary. This approach yields a few percent points
                // on some perf cases (e.g. xltypical)
                //

                // If we got here, we are allowed to do script execution so
                // make sure that any identity peer is processed
                if (_pMarkup->GetFrameOrPrimaryMarkup()->HasIdentityPeerTask())
                {
                    // NB (jbeda)
                    // Don't let processing peer tasks add to the amount of time the parser
                    // spends parsing.  This will actually cause us to thrash in some cases and 
                    // take longer.  The real solution is to make our time slice much more dynamic
                    DWORD dwTimeBefore = GetTickCount();
                    _pMarkup->GetFrameOrPrimaryMarkup()->ProcessIdentityPeerTask();
                    if (dwTimeout != INFINITE)
                        dwTimeout += GetTickCount() - dwTimeBefore;
                }

                _dwFlags &= ~(POSTF_WAIT | POSTF_DONTWAITFORINPLACE);
            }

            // launching processing the task queue here is very usefull to avoid reentrancy scenarios from within GetDispID
            if (_pMarkup->GetFrameOrPrimaryMarkup()->HasPeerTasks())
            {
                // NB (jbeda) same note as above - don't count time spent on peers
                DWORD dwTimeBefore = GetTickCount();
                _pMarkup->GetFrameOrPrimaryMarkup()->ProcessPeerTasks(0);
                if (dwTimeout != INFINITE)
                    dwTimeout += GetTickCount() - dwTimeBefore;
            }

            if (_dwFlags & POSTF_NEED_EXECUTE)
            {           
                //
                // The parser is now in a clean state, we can execute
                //

                _dwFlags &= ~POSTF_NEED_EXECUTE;
                              
                // execute
                hr = THR(Broadcast(&CHtmParse::Execute));
                if (hr || (_dwFlags & (POSTF_SLEEP | POSTF_DIE)))
                    goto Cleanup;
            }

            // If the preparser needs to be resumed, we must have exhausted all tokens
            Assert(!(_dwFlags & POSTF_RESUME_PREPARSER) || IsPending());
        }
        else if(!(_dwFlags & POSTF_RESUME_PREPARSER))
        {
            hr = THR(ScanTokens(dwTimeout));
            if (hr)
                goto Cleanup;
        }

#if DBG==1 || defined(PERFTAGS)
        if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
            break;
#endif

        if (GetTickCount() > dwTimeout)
            break;

        if (_dwFlags & POSTF_RESTART)
            break;

    } while (!IsPending() && !IsAtEof());


    // Check to see if we found an author palette (or if it's too late)
    if (!_pDoc->_fGotAuthorPalette)
    {
        if (    _pDoc->PrimaryMarkup()
            &&  _pDoc->PrimaryMarkup()->GetDwnDoc()
            && _pDoc->PrimaryMarkup()->GetDwnDoc()->GotAuthorPalette())
        {
            TraceTag((tagPalette, "Checking for author palette in pDwnDoc %08x %d", _pDoc, _pDoc->PrimaryMarkup()->GetDwnDoc()->GotAuthorPalette()));
            _pDoc->_fGotAuthorPalette = TRUE;
            _pDoc->InvalidateColors();
        }
    }

    // launching processing the task queue here is very usefull to avoid reentrancy scenarios from within GetDispID
    _pMarkup->GetFrameOrPrimaryMarkup()->ProcessPeerTasks(0);

    // resume the preparser after recursive invokation of scripts

    if (_dwFlags & POSTF_RESUME_PREPARSER)
    {
        _dwFlags &= ~POSTF_RESUME_PREPARSER;
        _pHtmLoad->ResumeHtmPre();
    }

    // If the parse needs to be restarted do it now.

    if ( ( _dwFlags & POSTF_RESTART ) && 
        !( _dwFlags & POSTF_DIE ) )
    {
        hr = THR(_pHtmLoad->OnPostRestart(_cpRestart));
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog(tagPostExec, this, "-CHtmPost::Exec");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::Exec");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Broadcast
//
//  Synopsis:   Prepares each context for possible parsing
//
//-------------------------------------------------------------------------
HRESULT CHtmPost::Broadcast(HRESULT (BUGCALL CHtmParse::*pfnAction)())
{
    HRESULT hr;

    hr = THR(CALL_METHOD(_pHtmParse, pfnAction, ()));
    if (hr)
    {
        _dwFlags |= POSTF_DIE;
        goto Cleanup;
    }

    if (_dwFlags & POSTF_DIE)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsPending
//
//  Synopsis:   TRUE if blocked, but expecting to become unblocked
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsPending()
{
    BOOL fDataPend = _fScanMode ? _pHtmTagStm->IsScanPending() : _pHtmTagStm->IsPending();
    BOOL fPostPend = (_dwFlags & POSTF_SLEEP) || fDataPend;

    PerfDbgLog3(tagHtmPost, this, "CHtmPost::IsPending "
        "(fSleep: %s, fDataPend: %s) --> %s",
        (_dwFlags & POSTF_SLEEP) ? "T" : "F", fDataPend ? "T" : "F",
        fPostPend ? "TRUE" : "FALSE");

    return(fPostPend);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsAtEof
//
//  Synopsis:   TRUE if there will never be any more data to process.
//
//              Always false when inside RunNested (EOF must only be
//              processed at the top level).
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsAtEof()
{
    BOOL fDataEof = _pHtmTagStm->IsEof();
    BOOL fPostEof = !(_dwFlags & POSTF_NESTED) && ((_dwFlags & POSTF_STOP) || fDataEof);

    PerfDbgLog3(tagHtmPost, this, "CHtmPost::IsAtEof "
        "(fDataEof: %s, fStop: %s) --> %s",
        fDataEof ? "T" : "F", (_dwFlags & POSTF_STOP) ? "T" : "F",
        fPostEof ? "TRUE" : "FALSE");

    return(fPostEof);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsDone
//
//  Synopsis:   TRUE if done.
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsDone()
{
    BOOL fAtEof = IsAtEof();
    BOOL fPostDone = fAtEof && !(_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER)) && !_fScanMode;

    PerfDbgLog5(tagHtmPost, this, "CHtmPost::IsDone "
        "(IsAtEof: %s, fNeedExecute: %s, fResumePreparser: %s, _fScanMode: %s) --> %s",
        fAtEof ? "T" : "F", (_dwFlags & POSTF_NEED_EXECUTE) ? "T" : "F",
        (_dwFlags & POSTF_RESUME_PREPARSER) ? "T" : "F",
        _fScanMode ? "T" : "F",
        fPostDone ? "TRUE" : "FALSE");

    return(fPostDone);
}

//+------------------------------------------------------------------------
//
//  Function:   IsDiscardableFramesetTag
//
//  Synopsis:   Determines if pht is a <FRAMESET> tag that NS 3.0
//              discards.
//
//-------------------------------------------------------------------------
BOOL IsDiscardableFramesetTag(CHtmTag *pht)
{
    TCHAR *pchR;
    TCHAR *pchC;
    return ((pht->IsBegin(ETAG_FRAMESET) &&
        (!pht->ValFromName(_T("ROWS"), &pchR) || !pchR || !_tcschr(pchR, _T(','))) &&
        (!pht->ValFromName(_T("COLS"), &pchC) || !pchC || ! _tcschr(pchC, _T(','))))
        ||
        pht->Is(ETAG_RAW_EOF));
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPost::ScanTokens
//  
//  Synopsis:   [Synopsis]
//  
//  Returns:    HRESULT
//  
//  Arguments:
//          DWORD dwTimeout - 
//  
//+----------------------------------------------------------------------------

HRESULT
CHtmPost::ScanTokens(DWORD dwTimeout)
{
    CHtmTag *   pht;

NextToken:

    // If we're in scan mode, we just want to look for PICS META tags.
    pht = _pHtmTagStm->ScanTag( _phtScan );
    if( !pht )
    {
        // If we hit the end of the page, give up
        if( _pHtmTagStm->IsScanEof() ||
            _pHtmLoad->_pHtmPre->IsSuspended() )
            goto EndScan;

        goto Cleanup;
    }
    else
    {
        _phtScan = pht;

        if( pht->Is( ETAG_META ) )
        {
            CHtmTag::CAttr * pAttr;

            // TODO (JHarding): This can be faster since we know the lengths
            pAttr = pht->AttrFromName( _T("http-equiv") );
            if( pAttr )
            {
                if( pAttr->_cchVal == 10 && StrCmpIC( pAttr->_pchVal, _T("pics-label") ) == 0 )
                {
                    // This is what we're looking for.
                    pAttr = pht->AttrFromName( _T("content") );
                    if( pAttr )
                    {
                        _pMarkup->ProcessMetaPics( pAttr->_pchVal );
                    }
                }
            }
        }
        else if (pht->Is(ETAG_RAW_POSTSTART))
        {
            // (KusumaV) Since we suspended the pre-parser we need to resume it so we can 
            // continue scanning for tokens. If not we end up assuming that we are done
            // with the tokens and ignore the pics ratings in the meta tags.
            _dwFlags |= POSTF_RESUME_PREPARSER;
            _fResumedPreParserInScan = TRUE;
        }
        else if( pht->Is( ETAG_HEAD ) && pht->IsEnd() ||
                 pht->Is( ETAG_BODY ) )
        {
            goto EndScan;
        }
    }

    if (_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER | POSTF_STOP | POSTF_WAIT))
        goto Cleanup;

    if (GetTickCount() > dwTimeout)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
        goto Cleanup;
#endif

    goto NextToken;

EndScan:
    // Tell shdocvw we've hit the end of the page and suspend ourselves
    _pMarkup->ProcessMetaPicsDone();
    PostManSuspend(this);

Cleanup:
    RRETURN( S_OK );
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::ProcessTokens
//
//  Synopsis:   Rearranges tokens and sends them on to the head or body
//              parsers.
//
//              Contains the logic for sorting out the top-level structure
//              of a document: <!DOCTYPE>, <HTML>, <HEAD>, <BODY>, <FRAMESET>
//
//-------------------------------------------------------------------------
HRESULT CHtmPost::ProcessTokens(DWORD dwTimeout)
{
    CHtmTag *   pht = NULL;
    CHtmTag *   phtSlowProcess;
    CHtmTag     htSlowProcess;
    DWORD       dwFlags;
    HRESULT     hr = S_OK;

#if DBG==1 || defined(PERFTAGS)
    TCHAR *     pchVMem = NULL;
#endif

NextToken:

    pht = _pHtmTagStm->ReadTag(pht);
    if (pht == NULL)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (    IsPerfDbgEnabled(tagStrictPch)
        &&  (pht->Is(ETAG_RAW_TEXT) || pht->Is(ETAG_RAW_COMMENT)))
    {
        if (pht->GetCch() == 0)
            pht->SetPch(NULL);
        else
        {
            VMemFree(pchVMem);
            pchVMem = (TCHAR *)VMemAlloc(pht->GetCch() * sizeof(TCHAR), VMEM_BACKSIDESTRICT);

            if (pchVMem)
            {
                memcpy(pchVMem, pht->GetPch(), pht->GetCch() * sizeof(TCHAR));
                pht->SetPch(pchVMem);
            }
        }
    }
#endif

    dwFlags = TagDescFromEtag(pht->GetTag())->_dwTagDescFlags;

    if(pht->IsExtendedTag())
    {
        dwFlags |= TAGDESC_ENTER_TREE_IMMEDIATELY | TAGDESC_SLOWPROCESS | TAGDESC_WAITATSTART;
    }

    if (dwFlags & TAGDESC_SLOWPROCESS)
    {
        goto SlowProcess;
    }

    TraceToken(this, pht);

    hr = THR(_pHtmParse->ParseToken(pht));
    if (hr)
        goto Cleanup;

ContinueProcess:

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

    if (dwFlags & (TAGDESC_WAITATSTART|TAGDESC_WAITATEND))
    {
        if (pht->IsEnd())
        {
            if (dwFlags & TAGDESC_WAITATEND)
            {
                _dwFlags |= POSTF_WAIT;
            }

            if (pht->Is(ETAG_SCRIPT) && !pht->IsDefer())
            {
                _dwFlags |= POSTF_RESUME_PREPARSER;
            }
        }
        else if (dwFlags & TAGDESC_WAITATSTART)
        {
            _dwFlags |= POSTF_WAIT;
        }

        if ((_dwFlags & POSTF_WAIT) && (dwFlags & TAGDESC_DONTWAITFORINPLACE))
        {
            _dwFlags |= POSTF_DONTWAITFORINPLACE;
        }
    }

    if (_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER | POSTF_STOP | POSTF_WAIT))
        goto Cleanup;

    if (GetTickCount() > dwTimeout)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
        goto Cleanup;
#endif

    goto NextToken;

SlowProcess:
    phtSlowProcess = pht;

    // Process a codepage token, which can come anywhere
    if (pht->Is(ETAG_RAW_CODEPAGE))
    {
        TraceToken(this, pht);

        if(  _pMarkup->GetWindowedMarkupContext() == _pMarkup )
        {
            if (mlang().ValidateCodePage(g_cpDefault, pht->GetCodepage(), NULL, FALSE, _pDoc->_dwLoadf & DLCTL_SILENT) != S_OK)
            {
                // put original codepage back but we can no longer abort restarting here
                // if the original codepage was CP_AUTO, we have to use something guaranteed
                // to be valid on the system otherwise we'll get invoked again because of
                // detection.
                if (IsAutodetectCodePage(_pMarkup->GetCodePage()))
                {
                    pht->SetCodepage(g_cpDefault);
                    pht->SetRestart();
                }
                else
                    pht->SetCodepage(_pMarkup->GetCodePage());
            }

            if (pht->IsRestart())
            {
                _dwFlags |= POSTF_RESTART;
                _cpRestart = pht->GetCodepage();
            }
            else
            {

                hr = THR(_pMarkup->SwitchCodePage(pht->GetCodepage()));
                if (hr)
                    goto Cleanup;

                if (    !IsAutodetectCodePage(_pMarkup->GetCodePage())
                    ||  WindowsCodePageFromCodePage(pht->GetCodepage()) != CP_JPN_SJ)
                {
                    // Make sure the ParseCtx is in a sane state
                    // before EnsureFormatCacheChange
                    hr = THR(Broadcast(CHtmParse::Commit));
                    if (hr)
                        goto Cleanup;

                    // Do not force a relayout if we switched from Japanese
                    // autodetect to a Japanese family codepage.
                    _pMarkup->EnsureFormatCacheChange(
                        ELEMCHNG_CLEARCACHES|ELEMCHNG_REMEASURECONTENTS);

                    hr = THR(Broadcast(CHtmParse::Prepare));
                    if (hr)
                        goto Cleanup;
                }
            }

        }
        if (_pMarkup->GetDwnDoc())
            _pMarkup->GetDwnDoc()->SetLoadf(_pMarkup->GetDwnDoc()->GetLoadf() | DLCTL_NO_METACHARSET);

        goto Cleanup;
    }

    // Process a docsize token, which can come anywhere
    if (pht->Is(ETAG_RAW_DOCSIZE))
    {
        if (!(_dwFlags & POSTF_PASTING))
        {
            CMarkupScriptContext *  pScriptContext = _pMarkup->HasScriptContext() ? _pMarkup->ScriptContext() : NULL;

            TraceToken(this, pht);

            if (pScriptContext && pScriptContext->_pScriptDebugDocument)
            {
                IGNORE_HR(pScriptContext->_pScriptDebugDocument->SetDocumentSize(pht->GetDocSize()));
            }
        }
        goto Cleanup;
    }

    if (pht->Is(ETAG_RAW_EXTENDEDTAG))
    {
        if (!pht->IsEnd())
        {
            RegisterExtendedTagPI(pht);
        }
        goto ContinueProcess; // done with this token
    }

    if (pht->Is(ETAG_RAW_XMLNAMESPACE))
    {
        if(!pht->IsEnd())
        {
            RegisterXmlPI(pht);
            _pHtmLoad->ResumeHtmPre();
        }
        goto ContinueProcess; // done with this token
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (pht->Is(ETAG_RAW_INCLUDE))
    {

        // so that people don't get the expectation that they can paste one of these
        // constructs into the middle of HTML and get it to expand;
        // instead, we should abort the paste operation

        if(_dwFlags & POSTF_PASTING)
        {
            hr = E_ABORT;
            goto Cleanup;
        }

        ProcessIncludeToken(pht);

        _dwFlags |= POSTF_RESUME_PREPARSER;

        goto ContinueProcess;
    }
#endif

    if( pht->Is(ETAG_RAW_RESOLVE) )
    {
        Assert( !pht->IsEnd() );

        // ResolveUnknownTag will convert pht into the proper tag.
        ResolveUnknownTag( pht );
        Assert( pht->Is( ETAG_UNKNOWN ) ||
                pht->Is( ETAG_GENERIC ) ||
                pht->Is( ETAG_GENERIC_LITERAL ) ||
                pht->Is( ETAG_GENERIC_NESTED_LITERAL ) );

        // If it was made an extended tag, adjust our dwFlags
        if( pht->IsExtendedTag() )
        {
            dwFlags |= TAGDESC_ENTER_TREE_IMMEDIATELY | TAGDESC_WAITATSTART;
        }
    }

    // NB (48236): some attributes on the body and frameset get delegated to the doc.  During
    // paste operations, we don't want these to clobber what the main doc already has.
    if (    _dwFlags & POSTF_PASTING
        &&  (   pht->IsBegin(ETAG_BODY)
            ||  pht->IsBegin(ETAG_FRAMESET)))
    {
        // Initialize htSlowProcess to empty tag
        phtSlowProcess = &htSlowProcess;
        htSlowProcess.Reset();
        htSlowProcess.SetTag( pht->GetTag() );
    }

    if ( pht->Is(ETAG_RAW_POSTSTART) )
    {
        // (KusumaV) Note: Posting this token would have kickstarted the post which sets the security ID 
        // on CDwndoc and CMarkup(for privacy implementation) which was the aim , so there's no need 
        // to do anything else here

        // We have to resume the preparser though if we haven't already done so in ScanTokens.
        if (!_fResumedPreParserInScan)
            _dwFlags |= POSTF_RESUME_PREPARSER;

        _fResumedPreParserInScan = FALSE;

        goto ContinueProcess;
    }

    hr = THR(ParseToken(phtSlowProcess));
    if (hr)
        goto Cleanup;

    if (dwFlags & TAGDESC_ENTER_TREE_IMMEDIATELY)
    {
        hr = THR(Broadcast(CHtmParse::Commit));
        if (hr)
            goto Cleanup;

        hr = THR(Broadcast(CHtmParse::Prepare));
        if (hr)
            goto Cleanup;
    }

    goto ContinueProcess;

Cleanup:

#if DBG==1 || defined(PERFTAGS)
    VMemFree(pchVMem);
#endif
    RRETURN(hr);
}

#ifdef CLIENT_SIDE_INCLUDE_FEATURE

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::ProcessIncludeToken
//
//  Synopsis:    Starts download of referenced url in include token
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::ProcessIncludeToken(CHtmTag *pht)
{
    Assert(pht->Is(ETAG_RAW_INCLUDE));

    HRESULT    hr;
    CBitsCtx *      pBitsCtx = NULL;
    TCHAR *pchUrl = NULL;
    TCHAR *pchData;
    ULONG ulCount;
    ULONG ulUrlSize;

    ULONG pos1, pos4;
    TCHAR *pchnonwhitespace = NULL, *pchbeg = NULL, *pchend = NULL, *pchInfo = NULL;
    TCHAR *pchInclude = _T("include");
    int   cchInclude = _tcslen(pchInclude);
    TCHAR chQuote = _T('\0');

    CElement *pCurrentElement = NULL;

    pchData = pht->GetPch();
    ulCount = pht->GetCch();

    //
    // skip passed the "include" string then begin parsing
    //

    for (pos4 = 0; pos4 < ulCount - cchInclude; pos4++)
    {
        if (_tcsnicmp(pchData + pos4, cchInclude, pchInclude, cchInclude) == 0)
        {
            pchInfo = pchData + pos4 + cchInclude;
            ulCount = ulCount - pos4 - cchInclude;
            break;
        }
    }

    // if "include" string not found, something tragic has occured so exit

    if (!pchInfo)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // Back up within the ']>' to delimit parsing
    while (ulCount && pchInfo[ulCount - 1] != _T(']'))
        ulCount -= 1;

    // if "]" string not found, something tragic has occured so exit

    if (ulCount <= 1)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // chop off ']'

    ulCount -= 1;


    // get the fist nonwhitespace character

    for (pos1 = 0; pos1 < ulCount; pos1++)
    {
        TCHAR *pchcurrent = pchInfo + pos1;

        if (!ISSPACE(*pchcurrent))
        {
            pchnonwhitespace = pchcurrent;
            break;
        }
    }

    // if no non-whitespace chars encountered we must have run off
    // the end, so leave

    if (!pchnonwhitespace)
        goto Cleanup;

    // try to match quotes etc

    if (ISQUOTE(*pchnonwhitespace))
    {
        chQuote = *pchnonwhitespace;
        pchbeg = pchnonwhitespace + 1;
        for (pchend = pchbeg; (unsigned)(pchend - pchInfo) < ulCount; pchend += 1)
        {
            if (*pchend == chQuote)
                break;
        }
    }
    else
    {
        pchbeg = pchnonwhitespace;
        for (pchend = pchbeg; (unsigned)(pchend - pchInfo) < ulCount; pchend += 1)
        {
            if (ISSPACE(*pchend))
                break;
        }
    }

    // create a new string and copy characters from the established
    // url beginning and end

    ulUrlSize = pchend - pchbeg;

    if (!ulUrlSize)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // Limit number of includes

    #define MAX_INCLUDES 1024

    if (_ulIncludes >= MAX_INCLUDES)
        goto Cleanup;

    _ulIncludes += 1;

    hr = THR(MemAllocStringBuffer(Mt(CHtmPost_ProcessIncludeToken_pchUrl), ulUrlSize, pchbeg, &pchUrl));
    if (hr)
        goto Cleanup;

    ProcessValueEntities(pchUrl, &ulUrlSize);

    pCurrentElement = _pHtmParse->GetCurrentElement();

    // Security check: access allowed?
    {
        TCHAR   cBuf[pdlUrlLen];
        hr = THR(_pDoc->ExpandUrl(pchUrl, ARRAY_SIZE(cBuf), cBuf, pCurrentElement));
        if (hr)
            goto Cleanup;

        // Access not allowed: do nothing
        if (!_pDoc->AccessAllowed(cBuf))
            goto Cleanup;
    }

    hr = THR(_pDoc->NewDwnCtx(DWNCTX_BITS, pchUrl, pCurrentElement, (CDwnCtx **) &pBitsCtx, FALSE, PROGSINK_CLASS_CONTROL));
    if (hr)
        goto Cleanup;

    if (_pBitsCtxInclude)
        _pBitsCtxInclude->Release();

    pBitsCtx->AddRef();
    _pBitsCtxInclude = pBitsCtx;

    _pMarkup->EnterScriptDownload(&_dwIncludeDownloadCookie);

    if (pBitsCtx->GetState() & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
    {
        OnIncludeDwnChan(pBitsCtx);
    }
    else
    {
        pBitsCtx->SetProgSink(_pDoc->GetProgSink());
        pBitsCtx->SetCallback(OnIncludeDwnChanCallback, this);
        pBitsCtx->SelectChanges(DWNCHG_COMPLETE, 0, TRUE);
    }

Cleanup:

    if (pBitsCtx)
        pBitsCtx->Release();

    if (pchUrl)
        delete pchUrl;

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::OnIncludeDwnChanCallback
//
//  Synopsis:   Callback when post stream for !INCLUDE token has more data
//
//-------------------------------------------------------------------------
void
CHtmPost::OnIncludeDwnChan(CBitsCtx * pBitsCtx)
{
    PerfDbgLog(tagPerfWatch, pBitsCtx, "+CHtmPost::OnIncludeDwnChanCallback");
    PerfDbgLog(tagHtmPost, pBitsCtx, "+CHtmPost::OnIncludeDwnChanCallback");

    HRESULT         hr;
    ULONG           ulState;
    char *          pbBuffer = NULL;
    IStream *       pStream = NULL;
    STATSTG         statstg;
    ULONG           cbLen;
    ULONG           cchLen;
    BOOL            fEndCR;
    ULONG           cbRead;
    TCHAR *         pchEnd;
    TCHAR *         pchUrl;
    TCHAR *         pchSrcCode = NULL;

    if (pBitsCtx != _pBitsCtxInclude)
        return;

    ulState = pBitsCtx->GetState();

    hr = THR(_pMarkup->EnterInline());
    if (hr)
        goto Cleanup;

    if (ulState & DWNLOAD_COMPLETE)
    {
        pchUrl = (LPTSTR) pBitsCtx->GetUrl();

        // If unsecure download, may need to remove lock icon on Doc
        _pDoc->OnSubDownloadSecFlags(pchUrl, pBitsCtx->GetSecFlags());

        // if load completed OK, load file and convert to unicode

        hr = THR(pBitsCtx->GetStream(&pStream));
        if (hr)
            goto Cleanup;

        hr = THR(pStream->Stat(&statstg, STATFLAG_NONAME));
        if (hr)
            goto Cleanup;

        cbLen = statstg.cbSize.LowPart;
        if (statstg.cbSize.HighPart || cbLen == 0xFFFFFFFF)
            goto Cleanup;

        pbBuffer = (char *)MemAlloc(Mt(CHtmPost_OnIncludeDwnChan_pbBuffer), cbLen);
        if (!pbBuffer)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(pStream->Read(pbBuffer, cbLen, &cbRead));

        if (hr == S_FALSE)
            hr = S_OK;
        else if (hr || cbRead != cbLen)
            goto Cleanup;

        cchLen = MultiByteToWideChar(CP_ACP, 0, pbBuffer, cbLen, NULL, 0);

        pchSrcCode = (TCHAR *)MemAlloc(Mt(CHtmPost_OnIncludeDwnChan_pchSrcCode), (cchLen+1) * sizeof(TCHAR));
        if (!pchSrcCode)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        Verify(cchLen == (unsigned)MultiByteToWideChar(CP_ACP, 0, pbBuffer, cbLen, pchSrcCode, cchLen));

        fEndCR = FALSE;
        pchEnd = pchSrcCode + cchLen;
        cchLen -= NormalizerChar(pchSrcCode, &pchEnd);
        pchSrcCode[cchLen] = _T('\0');

        hr = THR(_pDoc->HtmCtx()->Write(pchSrcCode, FALSE));
        if (hr)
            goto Cleanup;
    }

    hr = THR(_pMarkup->LeaveInline());
    if (hr)
        goto Cleanup;

Cleanup:

    // even if download failed, tell the cdoc that it's done
    if (ulState & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
    {
        if (_dwIncludeDownloadCookie)
        {
            _pMarkup->LeaveScriptDownload(&_dwIncludeDownloadCookie);
            _dwIncludeDownloadCookie = NULL;
        }

        pBitsCtx->SetProgSink(NULL); // detach download from document's load progress
        _pBitsCtxInclude->Release();
        _pBitsCtxInclude = NULL;
    }

    MemFree(pbBuffer);
    MemFree(pchSrcCode);

    ReleaseInterface(pStream);

    PerfDbgLog(tagHtmPost, pBitsCtx, "-CHtmPost::OnIncludeDwnChanCallback");
    PerfDbgLog(tagPerfWatch, pBitsCtx, "-CHtmPost::OnIncludeDwnChanCallback");

}

#endif // CLIENT_SIDE_INCLUDE_FEATURE



//-------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsIndexHack
//
//  Synopsis:   For Netscape as well as pre-HTML 4.0 specs, we change
//              the <ISINDEX> tag into a mini-form by creating and
//              pushing the appropriate tags.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::IsIndexHack(CHtmTag *pht)
{
    CHtmTag ht;
    CHtmTag * phtInput = NULL;
    CHtmTag::CAttr *pAttr;
    TCHAR ach[100];
    UINT c;
    HRESULT hr;

    ht.Reset();
    ht.SetTag(ETAG_FORM);

    pAttr = pht->AttrFromName(_T("action"));
    if (pAttr)
    {
        ht.SetAttrCount(1);
        *ht.GetAttr(0) = *pAttr;
    }

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_HR);

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    // add text "prompt"
    ht.Reset();
    ht.SetTag(ETAG_RAW_TEXT);

    pAttr = pht->AttrFromName(_T("prompt"));
    if (pAttr)
    {
        ht.SetPch(pAttr->_pchVal);
        ht.SetCch(pAttr->_cchVal);
    }
    else // attribute not found so add a default prompt from IE3
    {
        ht.SetPch(ach);
        ht.SetCch(LoadString(GetResourceHInst(), IDS_DEFAULT_ISINDEX_PROMPT, ach, ARRAY_SIZE(ach) - 1));
        // if it fails we won't display anything.
    }

    if (ht.GetCch())
    {
        hr = THR(ParseToken(&ht));
        if (hr)
            goto Cleanup;
    }

    phtInput = (CHtmTag *)MemAlloc(Mt(CHtmPost_IsIndexHack_phtInput), CHtmTag::ComputeSize(FALSE, pht->GetAttrCount() + 1));
    if (phtInput == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    phtInput->Reset();
    phtInput->SetTag(ETAG_INPUT);
    phtInput->SetAttrCount(1);
    pAttr = phtInput->GetAttr(0);
    pAttr->_pchName = _T("name");
    pAttr->_cchName = 4;
    pAttr->_pchVal = _T("isindex");
    pAttr->_cchVal = 7;
    pAttr->_ulLine = 0;
    pAttr->_ulOffset = 0;

    if (pht->GetAttrCount())
    {
        for (pAttr = pht->GetAttr(0), c = pht->GetAttrCount(); c; pAttr++, c--)
        {
            // Everything that is not an "action" or a "prompt" gets applied
            // to the input tag.
            if ( _tcsicmp(pAttr->_pchName, _T("action")) &&
                 _tcsicmp(pAttr->_pchName, _T("prompt")) )
            {
                phtInput->SetAttrCount(phtInput->GetAttrCount() + 1);
                *phtInput->GetAttr(phtInput->GetAttrCount() - 1) = *pAttr;
            }
        }
    }

    hr = THR(ParseToken(phtInput));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_HR);

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_FORM);
    ht.SetEnd();

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

Cleanup:
    MemFree(phtInput);
    RRETURN(hr);
}

// CHtmPost -------------------------------------------------------------------

void
CHtmPost::Run(DWORD dwTimeout)
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::Run");
    PerfDbgLog1(tagHtmPost, this, "+CHtmPost::Run %ls", GetUrl());

    SwitchesBegTimer(SWITCHES_TIMER_PARSER);

    HRESULT hr;

    for (;;)
    {
        hr = THR(Exec(dwTimeout));
        if (hr)
            goto Error;

        if (IsDone())
        {
            _pHtmLoad->OnPostDone(S_OK);
            break;
        }

        if (IsPending())
        {
            // Give the tokenizer a chance to run if it wants to.  We may end up
            // not having to suspend after all.

            Sleep(0);

            if (IsPending())
            {
                PerfDbgLog(tagHtmPost, this, "CHtmPost::Run (blocking)");
                PostManSuspend(this);
                break;
            }
        }

        if (GetTickCount() > dwTimeout)
            break;

#if DBG==1 || defined(PERFTAGS)
        if (IsPerfDbgEnabled(tagOneToken))
            break;
#endif
    }

Cleanup:

    SwitchesEndTimer(SWITCHES_TIMER_PARSER);

    PerfDbgLog(tagHtmPost, this, "-CHtmPost::Run");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::Run");
    return;

Error:
    _pHtmLoad->OnPostDone(hr);
    goto Cleanup;
}

void CHtmPost::Passivate()
{
    PerfDbgLog1(tagHtmPost, this, "+CHtmPost::Passivate %ls", GetUrl());

    PostManDequeue(this);

    if (_pHtmLoad)
    {
        _pHtmLoad->SubRelease();
        _pHtmLoad = NULL;
    }

    if (_pHtmTagStm)
    {
        _pHtmTagStm->Disconnect();
        _pHtmTagStm->Release();
        _pHtmTagStm = NULL;
    }

    if (_pDoc)
    {
        _pDoc->SubRelease();
        _pDoc = NULL;
    }

    if (_pMarkup)
    {
        _pMarkup->SubRelease();
        _pMarkup = NULL;
    }

    if (_pHtmParse)
    {
        delete _pHtmParse;
        _pHtmParse = NULL;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (_pBitsCtxInclude)
    {
        _pBitsCtxInclude->Release();
        _pBitsCtxInclude = NULL;
    }
#endif

    if (_pchError)
    {
        delete _pchError;
        _pchError = NULL;
    }

    PerfDbgLog(tagHtmPost, this, "-CHtmPost::Passivate");
}

void CHtmPost::Die()
{
    Verify(!(Broadcast(&CHtmParse::Die)));
    _dwFlags |= POSTF_DIE;
}

void CHtmPost::DoStop()
{
    _dwFlags |= POSTF_STOP;
    PostManResume(this, FALSE);
}

void CHtmPost::ResumeAfterScan()
{
    _fScanMode = FALSE;
    PostManResume(this, FALSE);
}

HRESULT CHtmPost::ParseToken(CHtmTag * pht)
{
    BOOL fAllowed;
    HRESULT hr;

    TraceToken(this, pht);

    switch (pht->GetTag())
    {
    case ETAG_NOEMBED:
        hr = THR(_pMarkup->ProcessURLAction(URLACTION_SCRIPT_RUN, &fAllowed, 0, NULL, NULL, NULL, 0, PUA_DisableNoShowElements));
        if (hr)
            goto Cleanup;

        if (!fAllowed)
            pht->SetTag(ETAG_NOEMBED_OFF);
        break;

    case ETAG_NOSCRIPT:
        hr = THR(_pMarkup->ProcessURLAction(URLACTION_SCRIPT_RUN, &fAllowed, 0, NULL, NULL, NULL, 0, PUA_DisableNoShowElements));
        if (hr)
            goto Cleanup;

        if (!fAllowed)
            pht->SetTag(ETAG_NOSCRIPT_OFF);
        break;

    // Next two cases (ETAG_FORM & ETAG_ISINDEX) are the hack to get ISINDEX
    // to work correctly.
    case ETAG_FORM:
        if (pht->IsEnd())
            _dwFlags &= ~POSTF_IN_FORM;
        else
            _dwFlags |=  POSTF_IN_FORM;
        break;

    case ETAG_ISINDEX:
        // ISINDEX cannot live inside a form and should be ignored.
        if (!pht->IsEnd() && !(_dwFlags & POSTF_IN_FORM))
        {
            hr = THR(IsIndexHack(pht));
            goto Cleanup;
        }
        break;

    case ETAG_FRAMESET:

        // Drop begin <FRAMESET> tags with no ROWS, COLS

        if (!pht->IsEnd())
        {
            // But don't drop the first one seen (partial IE3 compat)

            if (!(_dwFlags & POSTF_SEENFRAMESET))
            {
                _dwFlags |= POSTF_SEENFRAMESET;
            }
            else
            {
                if (IsDiscardableFramesetTag(pht))
                {
                    hr = S_OK;
                    goto Cleanup;
                }
            }
        }
    }

    hr = THR(_pHtmParse->ParseToken(pht));
    if (hr)
        goto Cleanup;

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPost::RegisterExtendedTagPI
//
//-------------------------------------------------------------------------

void
CHtmPost::RegisterExtendedTagPI(CHtmTag * pht)
{
    LPTSTR      pchNamespace;
    LPTSTR      pchFactoryUrl;
    LPTSTR      pch;
    BOOL        fEnsureNamespace;

    LPTSTR      pchTagName = NULL;
    LPTSTR      pchBaseTagName = NULL;
    LPTSTR      pchUrn = NULL;

    // namespace is required
    if (!pht->ValFromName(_T("namespace"), &pchNamespace) ||
        !pchNamespace ||
        !pchNamespace[0])
    {
        // no namespace specified: ignore the PI, and wake up preparser now
        _pHtmLoad->ResumeAfterImportPI();
        goto Cleanup;
    }

    pht->ValFromName(_T("implementation"), &pchFactoryUrl);

    fEnsureNamespace = pht->ValFromName(_T("declareNamespace"), &pch);

#if 0 // these two are temporary until proper COM+ wiring is in place
    pht->ValFromName(_T("__MS__tagName"),     &pchTagName);
    pht->ValFromName(_T("__MS__baseTagName"), &pchBaseTagName);
#endif

    // If we're doing a declareNamespace, we need to use the URN on the ?IMPORT as well
    if( fEnsureNamespace )
        pht->ValFromName(_T("urn"), &pchUrn);

    IGNORE_HR(_pHtmLoad->GetHtmInfo()->ImportNamespaceImplementation( pchNamespace, 
                                                                      pchUrn, 
                                                                      pchFactoryUrl, 
                                                                      /* fSynchronize = */ TRUE, 
                                                                      fEnsureNamespace, 
                                                                      pchTagName, 
                                                                      pchBaseTagName));

Cleanup:
    return;
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPost::RegisterXmlPI
//
//-------------------------------------------------------------------------

void
CHtmPost::RegisterXmlPI(CHtmTag * pht)
{
    LPTSTR pchNamespace;
    LPTSTR pchUrn;

    if (!pht->IsEnd())
    {
        pht->ValFromName(_T("PREFIX"), &pchNamespace);
        if (pchNamespace && pchNamespace[0])
        {
            pht->ValFromName(_T("NS"), &pchUrn);

            IGNORE_HR(_pHtmLoad->GetHtmInfo()->RegisterNamespace(pchNamespace, pchUrn, XMLNAMESPACEDECL_IMPORT));
        }
    }
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPost::ResolveUnknownTag
//  
//  Synopsis:   Queries our host to resolve an unknown tag
//  
//  Returns:    void
//  
//  Arguments:
//          CHtmTag *pht - the HtmTag to resolve
//  
//+----------------------------------------------------------------------------

void
CHtmPost::ResolveUnknownTag( CHtmTag *pht )
{
    Assert( _pDoc->_pExtendedTagTableHost );

    THR_NOTRACE( _pDoc->_pExtendedTagTableHost->ResolveUnknownTag( pht ) );

    ELEMENT_TAG etag = pht->GetTag();
        
    // Only the tokenizer should ever see Nested_Literal
    if ( etag == ETAG_GENERIC_NESTED_LITERAL )
        pht->SetTag( ETAG_GENERIC_LITERAL );

    _pHtmLoad->ResumeAfterTagResolution((pht->IsEnd() || pht->IsEmpty()) ? ETAG_NULL : etag, 
                                         pht->GetPch(), 
                                         pht->GetCch() );
}


// PostMan --------------------------------------------------------------------

void CALLBACK
PostManOnTimer(HWND hwnd, UINT umsg, UINT_PTR idevent, DWORD dwTime)
{
    PerfDbgLog(tagPerfWatch, NULL, "+PostManOnTimer");
    PerfDbgLog(tagHtmPost, 0, "+PostManOnTimer");

    THREADSTATE *   pts         = GetThreadState();
    DWORD           dwTick      = GetTickCount();
    DWORD           dwTimeout   = dwTick + POSTMAN_TIMESLICE;
    CHtmPost *      pHtmPost;

    #if DBG==1
    PostManValidate();
    #endif

    while (pts->post.cRunable)
    {
        pHtmPost = NULL;

        for (;;)
        {
            if (pts->post.pHtmPostNext == NULL)
                pts->post.pHtmPostNext = pts->post.pHtmPostHead;

            pHtmPost = pts->post.pHtmPostNext;
            pts->post.pHtmPostNext = pHtmPost->_pHtmPostNext;

            if (!(pHtmPost->_dwFlags & (POSTF_BLOCKED | POSTF_RUNNING)))
                break;
        }

        Assert(pHtmPost);

        PostManExecute(pts, dwTimeout, pHtmPost);

        if (GetTickCount() - dwTick > POSTMAN_TIMESLICE)
            break;

#if DBG==1 || defined(PERFTAGS)
        if (IsPerfDbgEnabled(tagParseSlowly))
            break;
#endif
    }

    #if DBG==1
    PostManValidate();
    #endif

    PerfDbgLog(tagHtmPost, 0, "-PostManOnTimer");
    PerfDbgLog(tagPerfWatch, NULL, "-PostManOnTimer");
}

void
PostManSetTimer(THREADSTATE * pts)
{
    if (!!pts->post.fTimer != (!!pts->post.cRunable && !pts->post.cLock))
    {
        if (pts->post.fTimer)
        {
            PerfDbgLog(tagHtmPost, 0, "PostManSetTimer KillTimer");
            PerfDbgLog(tagPerfWatch, 0, "PostManSetTimer KillTimer");
            KillTimer(pts->gwnd.hwndGlobalWindow, TIMER_POSTMAN);
            pts->post.fTimer = FALSE;
        }
        else
        {
            PerfDbgLog(tagHtmPost, 0, "PostManSetTimer SetTimer");
            PerfDbgLog(tagPerfWatch, 0, "PostManSetTimer SetTimer");
            SetTimer(pts->gwnd.hwndGlobalWindow, TIMER_POSTMAN,
                #if DBG==1 || defined(PERFTAGS)
                    IsPerfDbgEnabled(tagParseSlowly) ? 10 : 0,
                #else
                    0,
                #endif
                PostManOnTimer);
            pts->post.fTimer = TRUE;
        }

        #if DBG==1
        PostManValidate();
        #endif
    }
}

void
PostManExecute(THREADSTATE * pts, DWORD dwTimeout, CHtmPost * pHtmPost)
{
    PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManExecute");
    PerfDbgLog(tagHtmPost, pHtmPost, "+PostManExecute");

    if(!pHtmPost)
        return;

    Assert(  pHtmPost->_dwFlags & POSTF_ENQUEUED);
    Assert(!(pHtmPost->_dwFlags & POSTF_BLOCKED));
    Assert(!(pHtmPost->_dwFlags & POSTF_RUNNING));

    pHtmPost->AddRef();
    pHtmPost->_dwFlags |= POSTF_RUNNING;
    pts->post.cRunable -= 1;
    pts->post.cRunning += 1;

    PostManSetTimer(pts);

    #if DBG==1
    PostManValidate();
    #endif

    pHtmPost->Run(dwTimeout);

    if (pHtmPost->_dwFlags & POSTF_RUNNING)
    {
        Assert(pHtmPost->_dwFlags & POSTF_ENQUEUED);

        pHtmPost->_dwFlags &= ~POSTF_RUNNING;
        pts->post.cRunable += !(pHtmPost->_dwFlags & POSTF_BLOCKED);
        pts->post.cRunning -= 1;

        PostManSetTimer(pts);
    }

    pHtmPost->Release();

    #if DBG==1
    PostManValidate();
    #endif

    PerfDbgLog(tagHtmPost, pHtmPost, "-PostManExecute");
    PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManExecute");
}

void
PostManEnqueue(CHtmPost * pHtmPost)
{
    if (!(pHtmPost->_dwFlags & POSTF_ENQUEUED))
    {
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManEnqueue");

        THREADSTATE *   pts         = GetThreadState();
        CHtmPost **     ppHtmPost   = &pts->post.pHtmPostHead;
        CHtmPost *      pHtmPostT;

        for (; (pHtmPostT = *ppHtmPost) != NULL;
                ppHtmPost = &pHtmPostT->_pHtmPostNext)
            ;

        *ppHtmPost              = pHtmPost;
        pHtmPost->_pHtmPostNext = NULL;
        pHtmPost->_dwFlags     |= POSTF_BLOCKED | POSTF_ENQUEUED;
        pHtmPost->_dwFlags     &= ~POSTF_RUNNING;
        pHtmPost->SubAddRef();

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManEnqueue");
    }
}

void
PostManDequeue(CHtmPost * pHtmPost)
{
    if (pHtmPost->_dwFlags & POSTF_ENQUEUED)
    {
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManDequeue");

        THREADSTATE *   pts         = GetThreadState();
        CHtmPost **     ppHtmPost   = &pts->post.pHtmPostHead;
        CHtmPost *      pHtmPostT;

        for (; (pHtmPostT = *ppHtmPost) != NULL; ppHtmPost = &pHtmPostT->_pHtmPostNext)
        {
            if (pHtmPostT == pHtmPost)
            {
                if (!(pHtmPost->_dwFlags & (POSTF_BLOCKED | POSTF_RUNNING)))
                {
                    pts->post.cRunable -= 1;
                }

                if (pHtmPost->_dwFlags & POSTF_RUNNING)
                {
                    pts->post.cRunning -= 1;
                }

                if (pts->post.pHtmPostNext == pHtmPost)
                {
                    pts->post.pHtmPostNext = pHtmPost->_pHtmPostNext;
                }

                *ppHtmPost = pHtmPost->_pHtmPostNext;

                pHtmPost->_dwFlags &= ~(POSTF_ENQUEUED | POSTF_BLOCKED | POSTF_RUNNING);
                pHtmPost->SubRelease();

                PostManSetTimer(pts);

                #if DBG==1
                PostManValidate();
                #endif

                break;
            }
        }

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManDequeue");
    }
}

void
PostManLock()
{
    THREADSTATE *   pts         = GetThreadState();
    pts->post.cLock += 1;
    PostManSetTimer(pts);
}

void
PostManUnlock()
{
    THREADSTATE *   pts         = GetThreadState();
    Assert(pts->post.cLock);
    pts->post.cLock -= 1;
    PostManSetTimer(pts);
}

void
PostManSuspend(CHtmPost * pHtmPost)
{
    if (     (pHtmPost->_dwFlags & POSTF_ENQUEUED)
       &&   !(pHtmPost->_dwFlags & POSTF_BLOCKED))
    {
        PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManSuspend");
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManSuspend");

        THREADSTATE * pts = GetThreadState();

        pHtmPost->_dwFlags |= POSTF_BLOCKED;

        if (!(pHtmPost->_dwFlags & POSTF_RUNNING))
        {
            pts->post.cRunable -= 1;

            PostManSetTimer(pts);
        }

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManSuspend");
        PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManSuspend");
    }
}

void
PostManResume(CHtmPost * pHtmPost, BOOL fExecute)
{
    if (    (pHtmPost->_dwFlags & POSTF_ENQUEUED)
        &&  (pHtmPost->_dwFlags & POSTF_BLOCKED))
    {
        PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManResume");
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManResume");

        THREADSTATE * pts = GetThreadState();

        pHtmPost->_dwFlags &= ~POSTF_BLOCKED;

        if (!(pHtmPost->_dwFlags & POSTF_RUNNING))
        {
            pts->post.cRunable += 1;
        }

        if (fExecute && pts->post.cRunning == 0)
            PostManExecute(pts, GetTickCount() + POSTMAN_TIMESLICE, pHtmPost);
        else
            PostManSetTimer(pts);

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManResume");
        PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManResume");
    }
}

void
DeinitPostMan(THREADSTATE * pts)
{
    PerfDbgLog(tagHtmPost, 0, "DeinitPostMan");

    Assert(pts->post.pHtmPostHead == NULL &&
        "Active post tasks remain at thread shutdown");

    pts->post.cRunable = 0;
    PostManSetTimer(pts);
}

#if DBG==1
void
PostManValidate()
{
    THREADSTATE *   pts        = GetThreadState();
    DWORD           cRunning   = 0;
    DWORD           cRunable   = 0;
    BOOL            fFoundNext = !pts->post.pHtmPostNext;
    CHtmPost *      pHtmPost   = pts->post.pHtmPostHead;

    for (; pHtmPost; pHtmPost = pHtmPost->_pHtmPostNext)
    {
        if (pHtmPost == pts->post.pHtmPostNext)
        {
            fFoundNext = TRUE;
        }

        Assert(pHtmPost->_dwFlags & POSTF_ENQUEUED);

        if (pHtmPost->_dwFlags & POSTF_RUNNING)
        {
            cRunning += 1;
        }
        else if (!(pHtmPost->_dwFlags & POSTF_BLOCKED))
        {
            cRunable += 1;
        }
    }

    Assert(fFoundNext);
    Assert(cRunning == pts->post.cRunning);
    Assert(cRunable == pts->post.cRunable);
}
#endif

#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmsrc.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmsrc.cxx
//
//  Contents:   CHtmSrc - saves source HTML verbatim
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FATSTG_HXX_
#define X_FATSTG_HXX_
#include "fatstg.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmSrc,   "Dwn", "Trace CHtmInfo Source Access")

MtDefine(CHtmInfoSrcBuf, CHtmInfo, "CHtmInfo::_pbSrc")
MtDefine(CHtmInfoSrcDecodeBuf, CHtmInfo, "CHtmInfo::_pchDecoded")

// Internal -------------------------------------------------------------------

BYTE * 
FirstCRorLF(BYTE * pb, long length)
{
    Assert(pb);

    for (long i = 0; i < length; i++)
    {
        if (*pb == '\r' || *pb == '\n')
            return pb;
        pb++;
    }
    return NULL;
}

// CHtmCtx --------------------------------------------------------------------

BOOL
CHtmCtx::IsSourceAvailable()
{
    return(GetHtmInfo()->_cbSrc > 0);
}

BOOL
CHtmCtx::HasCachedFile()
{
    return(!GetHtmInfo()->_cstrFile.IsNull());
}

HRESULT
CHtmCtx::CopyOriginalSource(IStream * pstm, DWORD dwFlags)
{
    RRETURN(GetHtmInfo()->CopyOriginalSource(pstm, dwFlags));
}

HRESULT
CHtmCtx::GetStream(IStream ** ppStream)
{
    RRETURN(GetHtmInfo()->GetStream(ppStream));
}

HRESULT
CHtmCtx::ReadUnicodeSource(TCHAR * pch, ULONG ich, ULONG cch, ULONG * pcch)
{
    RRETURN(GetHtmInfo()->ReadUnicodeSource(pch, ich, cch, pcch));
}

HRESULT
CHtmCtx::GetPretransformedFile(LPTSTR *ppch)
{
    RRETURN(GetHtmInfo()->GetPretransformedFile(ppch));
}

CExtendedTagDesc * 
CHtmCtx::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsure)
{
    return GetHtmInfo() ? GetHtmInfo()->GetExtendedTagDesc(pchNamespace, pchTagName, fEnsure) : NULL;
};

CExtendedTagTable *
CHtmCtx::GetExtendedTagTable()
{
    return GetHtmInfo() ? GetHtmInfo()->GetExtendedTagTable() : NULL;
}

BOOL
CHtmCtx::HasLoad()
{
     return GetHtmInfo() ? !!GetHtmInfo()->GetHtmLoad() : FALSE;
}

HRESULT
CHtmCtx::TransferExtendedTagTable(CMarkup * pMarkup)
{
    HRESULT     hr = S_OK;
    CHtmInfo *  pHtmInfo = GetHtmInfo();

    if (!pHtmInfo)
        goto Cleanup;

    hr = THR(pHtmInfo->TransferExtendedTagTable(pMarkup));

Cleanup:
    RRETURN (hr);
}

HRESULT
CHtmCtx::EnsureExtendedTagTable(CExtendedTagTable ** ppTable)
{
    HRESULT     hr;
    CHtmInfo *  pHtmInfo = GetHtmInfo();

    Assert (ppTable);

    if (pHtmInfo)
    {
        hr = THR(pHtmInfo->EnsureExtendedTagTable());
        if (hr)
            goto Cleanup;

        *ppTable = pHtmInfo->_pExtendedTagTable;
    }
    else
    {
        hr = E_FAIL;
    }

Cleanup:
    RRETURN (hr);
}

HRESULT
CHtmCtx::SaveXmlNamespaceStdPIs(CStreamWriteBuff * pStreamWriteBuff)
{
    return GetHtmInfo() ? GetHtmInfo()->SaveXmlNamespaceStdPIs(pStreamWriteBuff) : S_OK;
}

void
CHtmCtx::SetGenericParse(BOOL bDoGeneric)
{
    CHtmInfo *pHtmInfo = GetHtmInfo();
    if (pHtmInfo)
        pHtmInfo->SetGenericParse(bDoGeneric);
}

// CHtmInfo (Internal) --------------------------------------------------------

HRESULT
CHtmInfo::ResumeAfterImportPI()
{
    HRESULT     hr = S_OK;

    GetHtmLoad()->ResumeHtmPre();

    return hr;
}

HRESULT
CHtmInfo::OnSource(BYTE * pb, ULONG cb)
{
    PerfDbgLog1(tagHtmSrc, this, "+CHtmInfo::OnSource (cb=%ld)", cb);

    HRESULT hr = S_OK;

    if (cb == 0)
        goto Cleanup;

    if (!_cstrFile)
    {
        ULONG cbBuf = _cbSrc + cb;

        if (cbBuf < 4096)
        {
            if (cbBuf > 1024)
                cbBuf = (cbBuf + 1023) & ~1023;
            else if (cbBuf > 256)
                cbBuf = (cbBuf + 255) & ~255;

            if (cbBuf > _cbBuf)
            {
                if (IsOpened())
                {
                    _fUniSrc = TRUE;
                }
                
                g_csHtmSrc.Enter();

                hr = THR(MemRealloc(Mt(CHtmInfoSrcBuf), (void **)&_pbSrc, cbBuf));

                if (hr == S_OK)
                {
                    _cbBuf = cbBuf;
                }

                g_csHtmSrc.Leave();
            }

            if (hr == S_OK)
            {
                memcpy(_pbSrc + _cbSrc, pb, cb);
            }
        }
        else
        {
            if (_pstmSrc == NULL)
            {
                g_csHtmSrc.Enter();

                _pstmSrc = new CDwnStm;

                if (_pstmSrc == NULL)
                    hr = E_OUTOFMEMORY;
                else
                {
                    _pstmSrc->SetSeekable();

                    if (IsOpened())
                    {
                        _fUniSrc = TRUE;
                    }

                    if (_pbSrc)
                    {
                        hr = THR(_pstmSrc->Write(_pbSrc, _cbSrc));

                        MemFree(_pbSrc);
                        _pbSrc = NULL;
                        _cbBuf = 0;
                    }
                }

                g_csHtmSrc.Leave();

                if (hr)
                    goto Cleanup;
            }

            hr = THR(_pstmSrc->Write(pb, cb));
            if (hr)
                goto Cleanup;
        }
    }

    // Update _cbSrc only after the data has actually been written

    _cbSrc += cb;

Cleanup:
    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::OnSource (cbSrc=%ld,hr=%lX)", _cbSrc, hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::OpenSource(DWORD dwFlags)
{
    PerfDbgLog(tagHtmSrc, this, "+CHtmInfo::OpenSource");
    CStr *pFile = &_cstrFile;

    HRESULT hr = S_OK;
    if (dwFlags & HTMSRC_PRETRANSFORM)
    {
        if (_cstrPretransformedFile)
            pFile = &_cstrPretransformedFile;
        else
        {
            // we can't get to the original mime src, so return failure
            hr = E_FAIL;
            goto Cleanup;
        }
    }

    if (*pFile)
    {
        ClearInterface(&_pstmFile);

        hr = THR(CreateStreamOnFile(*pFile,
                    STGM_READ | STGM_SHARE_DENY_NONE, &_pstmFile));
    }

Cleanup:
    PerfDbgLog1(tagHtmSrc, this, "-CHtmInfo::OpenSource (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::ReadSource(BYTE * pb, ULONG ib, ULONG cb, ULONG * pcb, DWORD dwFlags)
{
    PerfDbgLog2(tagHtmSrc, this, "+CHtmInfo::ReadSource (ib=%ld,cb=%ld)", ib, cb);

    HRESULT hr = S_OK;
    ULONG   cbSrc = (dwFlags & HTMSRC_PRETRANSFORM) ? MAXLONG : _cbSrc;  // make sure we read the entire file if its pretransform

    *pcb = 0;

    if (ib > cbSrc)
        cb = 0;
    else if (cb > cbSrc - ib)
        cb = cbSrc - ib;

    if (cb > 0)
    {
        if (_pstmFile)
        {
            LARGE_INTEGER li;
            ULARGE_INTEGER uli;

            li.LowPart  = ib;
            li.HighPart = 0;

            hr = THR(_pstmFile->Seek(li, STREAM_SEEK_SET, &uli));

            if (hr == S_OK)
                hr = THR(_pstmFile->Read(pb, cb, pcb));
        }
        else if (_pbSrc || _pstmSrc)
        {
            g_csHtmSrc.Enter();

            if (_pbSrc)
            {
                memcpy(pb, _pbSrc + ib, cb);
                *pcb = cb;
            }
            else if (_pstmSrc)
            {
                hr = THR(_pstmSrc->Seek(ib));

                if (hr == S_OK)
                    hr = THR(_pstmSrc->Read(pb, cb, pcb));
            }

            g_csHtmSrc.Leave();
        }
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::ReadSource (*pcb=%ld,hr=%lX)", *pcb, hr);
    RRETURN(hr);
}

void
CHtmInfo::CloseSource()
{
    ClearInterface(&_pstmFile);
}

HRESULT
CHtmInfo::DecodeSource()
{
    PerfDbgLog(tagHtmSrc, this, "+CHtmInfo::DecodeSource");

    int     cchEncoded;
    LONG    cbToDecode = (LONG)_cbSrc;
    LONG    cbDecoded;
    LONG    cchDecoded;
    TCHAR * pchDecoded = NULL;
    TCHAR * pchEnd;
    BOOL    fOpened    = FALSE;
    HRESULT hr;

    hr = THR(OpenSource());
    if (hr)
        goto Cleanup;

    fOpened = TRUE;

    // Step 1: convert src to unicode and copy into pchDecoded
    if (_fUniSrc)
    {
        // already unicode
        ULONG ib = 0;

        if (cbToDecode >= sizeof(WCHAR))
        {
            WCHAR chTemp = NULL;
            hr = THR(ReadSource((BYTE *)&chTemp, 0, sizeof(WCHAR), (ULONG *)&cbDecoded));
            if (hr)
                goto Cleanup;

            // CONSIDER (davidd) support sizeof(WCHAR) of 2 and 4?  (NON/NATIVE_UNICODE_CODEPAGE)
            // CONSIDER (johnv) Support NONNATIVE_UNICODE_SIGNATURE?
            if (NATIVE_UNICODE_SIGNATURE == chTemp)
            {
                ib += sizeof(WCHAR);
                cbToDecode -= ib;
            }
        }

        pchDecoded = (TCHAR *)MemAlloc(Mt(CHtmInfoSrcDecodeBuf), (cbToDecode + sizeof(TCHAR)));
        if (!pchDecoded)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
        
        hr = THR(ReadSource((BYTE *)pchDecoded, ib, cbToDecode, (ULONG *)&cbDecoded));
        if (hr)
            goto Cleanup;

        cchEncoded = cbDecoded / sizeof(TCHAR);
    }
    else
    {
        // needs conversion
        
        CEncodeReader encoder(_cpDoc, cbToDecode);

        hr = THR(encoder.PrepareToEncode());
        if (hr)
            goto Cleanup;

        Assert((LONG)encoder._cbBufferMax >= cbToDecode);

        hr = THR(ReadSource(encoder._pbBufferPtr, 0, cbToDecode, (ULONG *)&cbDecoded));
        if (hr)
            goto Cleanup;

        Assert(cbDecoded == cbToDecode);

        encoder._cbBuffer += cbDecoded;

        // The file will contain primarily single byte characters, so
        // ensure we have enough space. Add 1 for NormalizerCR function.
        pchDecoded = (TCHAR *)MemAlloc(Mt(CHtmInfoSrcDecodeBuf), (cbDecoded + 1) * sizeof(TCHAR));
        if (!pchDecoded)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        // Number of wide character
        encoder._cchBuffer = cbDecoded;
        encoder._pchEnd = encoder._pchBuffer = pchDecoded;

        // Convert to unicode.
        hr = THR(encoder.WideCharFromMultiByte(TRUE, &cchEncoded));

        // It just get uglier and uglier...
        encoder._cchBuffer = 0;
        encoder._pchEnd = encoder._pchBuffer = NULL;

        if (hr)
            goto Cleanup;

        Assert(cchEncoded <= cbDecoded);
    }

    // Step 2: call NormalizeCR (it also writes a NULL into pchEnd)
    pchEnd = pchDecoded + cchEncoded;
    cchDecoded = cchEncoded - NormalizerChar(pchDecoded, &pchEnd);

    // commit:
    _cbDecoded  = cbDecoded;
    _cchDecoded = cchDecoded;
    MemFree(_pchDecoded);
    _pchDecoded = pchDecoded;
    pchDecoded  = NULL;

Cleanup:

    MemFree(pchDecoded);

    if (fOpened)
    {
        CloseSource();
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::DecodeSource (cch=%ld,hr=%lX)", _cchDecoded, hr);
    RRETURN(hr);
}


// CHtmInfo (External) --------------------------------------------------------

HRESULT
CHtmInfo::GetStream(IStream ** ppStream)
{
    HRESULT     hr = S_OK;

    Assert (ppStream);

    hr = THR(OpenSource());
    if (hr)
        goto Cleanup;

    *ppStream = _pstmFile;
    (*ppStream)->AddRef();

Cleanup:
    RRETURN (hr);
}

// CHtmInfo (External) --------------------------------------------------------

HRESULT
CHtmInfo::CopyOriginalSource(IStream * pstm, DWORD dwFlags)
{
#ifdef UNIX
//Align abBuf so that it is on 4 ByteBoundary so as to avoid alignment faults  later on access to  encoder._pchBuffer 
    typedef union
    {
        DWORD   dwDummy;
        BYTE    _abBuf[4096 + 2];
    } uABBUF;
    uABBUF uabBuf;
#define abBuf (uabBuf._abBuf)

#else
    BYTE    abBuf[4096 + 2];
#endif
    BYTE *  pbCopy;
    BYTE *  pbBuf;
    BYTE *  pbCRorLF;
    BYTE    bLast         = 0;
    LONG    cbCopied      = 0;
    LONG    cbToCopy;
    LONG    cbToWrite;
    LONG    cbSrc         = (dwFlags & HTMSRC_PRETRANSFORM) ? (LONG)MAXLONG : (LONG)_cbSrc;  // make sure we read the entire file if its pretransform
    LONG    ibSrc         = 0;
    int     cch;
    BOOL    fOpened       = FALSE;
    BOOL    fUniSrc       = _fUniSrc;
    HRESULT hr;

    CEncodeWriter encoder(g_cpDefault, 1024);

    encoder._fEntitizeUnknownChars = FALSE;

    hr = THR(OpenSource(dwFlags));
    if (hr)
        goto Cleanup;

    fOpened = TRUE;

    while (ibSrc < cbSrc)
    {
        cbToCopy = cbSrc - ibSrc;

        if (cbToCopy > ARRAY_SIZE(abBuf) - 2)
            cbToCopy = ARRAY_SIZE(abBuf) - 2;

        hr = THR(ReadSource(abBuf, ibSrc, cbToCopy, (ULONG *)&cbToCopy, dwFlags));
        if (hr)
            goto Cleanup;

        if (cbToCopy == 0)
        {
            // File does not appear to be as long as we thought.  We'll be
            // happy with what we got.

            break;
        }

        abBuf[cbToCopy] = 0;
        abBuf[cbToCopy+1] = 0;
        pbCopy = abBuf;

        ibSrc += cbToCopy;

        if (dwFlags & HTMSRC_MULTIBYTE)
        {
            if (    (ibSrc == cbToCopy && cbToCopy >= 2)
                &&  (abBuf[0] == 0xFF && abBuf[1] == 0xFE))
            {
                // Skip over Unicode byte-order marker. 2 bytes or 4 bytes ?

                cbToCopy    -= 2;
                pbCopy      += sizeof(WCHAR);
                fUniSrc      = TRUE;

                if (cbToCopy == 0)
                    continue;
            }

            if (fUniSrc)
            {
                // Convert the Unicode source to MultiByte for the caller

                Assert(encoder._pchBuffer == NULL);
                encoder._pchBuffer = (TCHAR *)pbCopy;
                encoder._cchBuffer = cbToCopy / sizeof(TCHAR);
                encoder._cbBuffer  = 0;

                hr = THR(encoder.MultiByteFromWideChar(ibSrc == cbSrc, &cch));

                encoder._pchBuffer = NULL;
                encoder._cchBuffer = 0;

                if (hr)
                    goto Cleanup;

                pbCopy   = encoder._pbBuffer;
                cbToCopy = encoder._cbBuffer;

                if (cbToCopy == 0)
                    continue;
            }
        }

        pbBuf    = pbCopy;
        cbCopied = 0;

        for (;;)
        {
            pbCRorLF  = NULL;
            cbToWrite = 0;
            
            if (dwFlags & HTMSRC_FIXCRLF)
                pbCRorLF = FirstCRorLF(pbBuf, cbToCopy - cbCopied);
            
            if (pbCRorLF)
                cbToWrite = PTR_DIFF(pbCRorLF, pbBuf);
            else
                cbToWrite = cbToCopy - cbCopied;

            hr = THR(pstm->Write(pbBuf, cbToWrite, NULL));
            if (hr)
                goto Cleanup;

            cbCopied += cbToWrite;

            if (cbCopied >= cbToCopy)
                break;

            if (cbToWrite)
            {
                bLast = *(pbBuf + cbToWrite - 1);
                pbBuf += cbToWrite;
            }

            if (pbCRorLF)
            {
                // If LF is found and previous char is CR, 
                // then we don't write, Otherwise, write CR & LF to temp file.

                if (!(*pbCRorLF == '\n' && bLast == '\r')) 
                {
                    hr = THR(pstm->Write("\r\n", 2, NULL));
                    if (hr)
                        goto Cleanup;

                }

                bLast = *pbCRorLF;
                pbBuf = pbCRorLF + 1;
                cbCopied++;
            }
        }

        bLast = pbCopy[cbToCopy - 1];
    }

Cleanup:

    if (fOpened)
    {
        CloseSource();
    }

    PerfDbgLog1(tagHtmSrc, this, "-CHtmInfo::CopyOriginalSource (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::ReadUnicodeSource(TCHAR * pch, ULONG ich, ULONG cch, ULONG * pcch)
{
    PerfDbgLog2(tagHtmSrc, this, "+CHtmInfo::ReadUnicodeSource (ich=%ld,cch=%ld)", ich, cch);

    HRESULT hr = S_OK;

    if (_cbDecoded != _cbSrc)
    {
        hr = THR(DecodeSource());
    }

    if (hr == S_OK)
    {
        if (ich > _cchDecoded)
            cch = 0;
        else if (cch > _cchDecoded - ich)
            cch = _cchDecoded - ich;

        if (cch > 0)
        {
            CopyMemory(pch, _pchDecoded + ich, cch * sizeof(TCHAR));
        }

        *pcch = cch;
    }
    else
    {
        *pcch = 0;
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::ReadUnicodeSource (*pcch=%ld,hr=%lX)", *pcch, hr);
    RRETURN(hr);
}

void
CHtmInfo::SetGenericParse(BOOL bDoGeneric)
{
    CHtmLoad *pHtmLoad = GetHtmLoad();
    if (pHtmLoad)
        pHtmLoad->SetGenericParse(bDoGeneric);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmparse.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmparse.cxx
//
//  Contents:   Support for HTML parsing:  including
//
//              CElement
//              CParser
//              CHTMLParser
//              CLex
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_ELEMENT_HXX_
#define X_ELEMENT_HXX_
#include "element.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_TREEPOS_HXX_
#define X_TREEPOS_HXX_
#include "treepos.hxx"
#endif

#ifndef X_ROOTCTX_HXX_
#define X_ROOTCTX_HXX_
#include "rootctx.hxx"
#endif

#ifndef X_ROOTELEM_HXX_
#define X_ROOTELEM_HXX_
#include "rootelem.hxx"
#endif

// Trace tags
DeclareTag(tagParse,            "Dwn", "HtmParse: Detailed parsing trace");
MtDefine(CHtmParse, Dwn, "CHtmParse")
MtDefine(CHtmParse_aryContextStack_pv, CHtmParse, "CHtmParse::_aryContxtStack::_pv")
MtDefine(CHtmParse_aryPelEndParse_pv, CHtmParse, "CHtmParse::_aryPelEndParse::_pv")
MtDefine(CHtmParse_aryPelFrontier_pv, CHtmParse, "CHtmParse::_aryPelFrontier::_pv")
MtDefine(CHtmParse_aryFccl_pv, CHtmParse, "CHtmParse::_aryPelFrontier::_pv")
MtDefine(CHtmParsePrepareContainer_aetagStack_pv, Dwn, "CHtmParse::PrepareContainer aetagStack::_pv")
MtDefine(CHtmParseOpenContainer_aetagStack_pv, Dwn, "CHtmParse::OpenContainer aetagStack::_pv")
MtDefine(CHtmParseCloseContainer_apNodeStack_pv, Dwn, "CHtmParse::CloseContainer apNodeStack::_pv")
MtDefine(CHtmParseCloseContainer_apNodeClose_pv, Dwn, "CHtmParse::CloseContainer apNodeClose::_pv")

// Asserts specific to CHtmParse
#if DBG == 1
#define AssertNoneProhibited(etag) AssertNoneProhibitedImpl(etag)
#define AssertAllRequired(etag) AssertAllRequiredImpl(etag)
#define AssertNoEndContainees(element) AssertNoEndContaineesImpl(element)
#define AssertOnStack(element) AssertOnStackImpl(element)
#define AssertInsideContext(element) AssertInsideContextImpl(element)
#else
#define AssertNoneProhibited(etag)
#define AssertAllRequired(etag)
#define AssertNoEndContainees(element)
#define AssertOnStack(element)
#define AssertInsideContext(element)
#endif

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

extern const ELEMENT_TAG s_atagNull[];
extern const ELEMENT_TAG s_atagEOFProhibited[];
// Global variable determining if we are in winhelp.
extern BOOL g_fInHtmlHelp;
extern BOOL g_fInIBMSoftwareSelection;
extern BOOL g_fInMoney2001;

HRESULT CreateHtmRootParseCtx(CHtmParseCtx **pphpxRoot, CMarkup *pMarkup);
HRESULT CreateHtmTopParseCtx(CHtmParseCtx **pphpx, CHtmParseCtx *phpxParent);
 
HRESULT CreateElement (
              ELEMENT_TAG   etag,
              CElement * *  ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL          fCreateAttrBag,
              BOOL *        pfDie );

//+------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Synopsis:   Creates an element of type etag parented to pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------

HRESULT
CreateElement(ELEMENT_TAG   etag,
              CElement **   ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL          fCreateAttrBag,
              BOOL *        pfDie)
{
    CElement       *            pElement = NULL;
    const CTagDesc *            ptd;
    CHtmTag                     ht;
    HRESULT                     hr;

    if (!pfDie)
        pfDie = (BOOL*)&g_Zero;

    ptd = TagDescFromEtag(etag);
    if (!ptd)
        return E_FAIL;

    ht.Reset();
    ht.SetTag(etag);
    
    hr = ptd->_pfnElementCreator(&ht, pDoc, &pElement);
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    if (fCreateAttrBag)
    {
        hr = THR(pElement->InitAttrBag(&ht, pMarkup));
        if (hr)
            goto Cleanup;

        if (*pfDie)
            goto Die;

    }

    {
        CElement::CInit2Context   context (&ht, pMarkup);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
    {
        CElement::ClearPtr(&pElement);
    }
    
    *ppElementResult = pElement;

    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Synopsis:   Creates an element of type etag parented to pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------
HRESULT
CreateElement(CHtmTag *     pht,
              CElement **   ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL *        pfDie,
              DWORD         dwFlags)
{
    CElement       *pElement = NULL;
    const CTagDesc *ptd;
    HRESULT         hr;

    if (!pfDie)
        pfDie = (BOOL*)&g_Zero;

    ptd = TagDescFromEtag(pht->GetTag());
    if (!ptd)
        return E_FAIL;

    hr = ptd->_pfnElementCreator(pht, pDoc, &pElement);
    if (hr)
        goto Cleanup;
    
    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->InitAttrBag(pht, pMarkup));
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    {
        CElement::CInit2Context   context(pht, pMarkup, dwFlags);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
    {
        CElement::ClearPtr(&pElement);
    }
    
    *ppElementResult = pElement;
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CreateUnknownElement
//
//  Synopsis:   Creates an unknown element of type etag parented to
//              pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------

#ifdef _M_IA64
//$ WIN64: Why is there unreachable code in the retail build of this next function for IA64?
#pragma warning(disable:4702) /* unreachable code */
#endif

HRESULT
CreateUnknownElement(CHtmTag *pht,
              CElement **ppElementResult,
              CDoc *pDoc,
              CMarkup *pMarkup,
              BOOL *pfDie)
{
    CElement       *pElement = NULL;
    const CTagDesc *ptd;
    HRESULT         hr;

    ptd = TagDescFromEtag(ETAG_UNKNOWN);
    if (!ptd)
        return E_FAIL;

    hr = ptd->_pfnElementCreator(pht, pDoc, &pElement);
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->InitAttrBag(pht, pMarkup));
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    {
        CElement::CInit2Context   context (pht, pMarkup);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
        CElement::ClearPtr(&pElement);

    *ppElementResult = pElement;
    
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}

#ifdef _M_IA64
#pragma warning(default:4702) /* unreachable code */
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmParse::~CHtmParse()
{
    int i;

    delete _phpxExecute;

    delete _ctx._phpx;

    for (i = _aryContextStack.Size(); i;)
    {
        delete _aryContextStack[--i]._phpx;
    }

    _aryContextStack.DeleteAll();
    
    _aryPelFrontier.ReleaseAll();

    if (_pTagQueue)
        _pTagQueue->Release();
    
    if (_pelMerge)
        _pelMerge->Release();

    if (_pMergeTagQueue)
        _pMergeTagQueue->Release();

    _aryPelEndParse.ReleaseAll();
    
    if (_pMarkup)
        _pMarkup->Release();

#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(_pNode);
#endif
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Init
//
//  Synopsis:   Sets up parsing (and does the first Prepare).
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::Init(CDoc *pDoc, CMarkup *pMarkup, CTreeNode *pNode)
{
    HRESULT   hr;
    CHtmParseCtx *phpxRoot;
    CHtmParseCtx *phpxTop;
    
    Assert(pMarkup);

    Assert(!_pMarkup);
    
    if (pMarkup)
    {
        _pMarkup = pMarkup;
        _pMarkup->AddRef();
    }

    Assert(pDoc);
    _pDoc = pDoc;

    // Create and push the root context

    hr = THR(CreateHtmRootParseCtx(&phpxRoot, pMarkup));
    if (hr)
        goto Cleanup;

    _ctx._phpx = phpxRoot;
    _ctx._pelTop = NULL;

    hr = THR(_ctx._phpx->Init());
    if (hr)
        goto Cleanup;

    hr = THR(_ctx._phpx->Prepare());
    if (hr)
        goto Cleanup;
        
    // Set up the frontier pointer, AddRef the root element
    
    hr = THR(_aryPelFrontier.Append(pNode->Element()));
    if (hr)
        goto Cleanup;
        
    pNode->Element()->AddRef();

    _pNode = NULL;
    _cDepth = 1;

    hr = THR(_aryContextStack.AppendIndirect(&_ctx));
    if (hr)
        goto Cleanup;

    _ctx._phpx = NULL;
    _ctx._pelTop = NULL;

    // Create and push the top context

    hr = THR(CreateHtmTopParseCtx(&phpxTop, phpxRoot));
    if (hr)
        goto Cleanup;
        
    _ctx._phpx = phpxTop;
    _ctx._pelTop = pMarkup->Root();

    hr = THR(_ctx._phpx->Init());
    if (hr)
        goto Cleanup;

    hr = THR(_ctx._phpx->Prepare());
    if (hr)
        goto Cleanup;

    _fLookingForDOCTYPE = TRUE;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Prepare
//
//  Synopsis:   Prepares each context for possible parsing
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Prepare()
{
    int       c;
    CContext *pctx;
    HRESULT   hr = S_OK;

    Assert(_aryPelFrontier.Size());
    Assert(!_pNode);

    // Watson bug IE6 #24291.  If we catch the assert above, we 
    // should try and figure this out.
    if (!_aryPelFrontier.Size())
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    _pNode = _aryPelFrontier[_aryPelFrontier.Size() - 1]->ParanoidGetLastBranch();
    if (!_pNode)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    if (!_pMarkup)
        goto Cleanup;

    if (_lVersionSafe != _pMarkup->GetMarkupTreeVersion())
    {
        // If the tree has been changed, we need to drop the entire FindContainer cache
        // (For coherency it depends on nodes never being recycled because they're never
        // released during, which may not be true if tree versions don't match.)
        _aryFccl.DeleteAll();
        
        CElement **ppel;
        CTreePos *ptpRight;

        for (ptpRight = _pNode->GetEndPos(), c = _aryPelFrontier.Size(), ppel = _aryPelFrontier + c - 1;
             c;
             ptpRight = ptpRight->NextTreePos())
        {
            // To ensure that everything beyond the frontier is totally locked down, verify:

            // 1. The right number of treeposes follow the frontier
            // 2. All the treeposes after the frontier are end edges
            // 3. Nothing on the frontier is dead
            // 4. The nodes belong to the elements that were recorded and refed
            // 5. The nodes form a parent chain above the current node to the root

            // Any failures -> the frontier has changed, so abort the parse

            if (!ptpRight)
                break;

            //
            // It's okay to have pointers in the frontier
            //
            
            if (ptpRight->IsPointer())
                continue;

            //
            // It's okay to have empty, text id-less chunks-o-text
            //

            if (ptpRight->IsText() && ptpRight->Cch() == 0 && ptpRight->Sid() == 0)
                continue;
            
            if (!ptpRight->IsEndElementScope()                   ||
                ptpRight->Branch()->IsDead()                     ||
                ptpRight->Branch()->Element() != (*ppel)         ||
                (c == 1 ? ptpRight->Branch()->Parent() != NULL :
                          ptpRight->Branch()->Parent()->Element() != *(ppel - 1)))
            {
                break;
            }

            ppel -= 1, c -= 1;
        }

        if (c)
            hr = E_ABORT;

        // ... and verify 6. that there are no extra treeposes at the very end
        if (ptpRight)
            hr = E_ABORT;

        if (hr)
            goto Cleanup;
    }

    for (pctx = _aryContextStack, c = _aryContextStack.Size(); c; pctx++, c--)
    {
        Assert(pctx->_phpx);
        hr = THR(pctx->_phpx->Prepare());
        if (hr)
            goto Cleanup;
    }

    if (_ctx._phpx)
    {
        hr = THR(_ctx._phpx->Prepare());
        if (hr)
            goto Cleanup;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Commit
//
//  Synopsis:   Commits each context for possible return to message loop
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Commit()
{
    int       c, size;
    CContext *pctx;
    HRESULT   hr = S_OK;
    CElement **ppel;

    if (_ctx._phpx)
    {
        hr = THR(_ctx._phpx->Commit());
        if (hr)
            goto Cleanup;

        for (c = _aryContextStack.Size(), pctx = (CContext *)_aryContextStack + c; c; c--)
        {
            pctx--;
            Assert(pctx->_phpx);
            hr = THR(pctx->_phpx->Commit());
            if (hr)
                goto Cleanup;
        }
    }

    CTreeNode *pNode;

    // Update the frontier

    size = _aryPelFrontier.Size();
    pNode = _pNode;

    if (size < _cDepth)
    {
        // Grow the frontier
        
        _aryPelFrontier.Grow(_cDepth);
        for (ppel = _aryPelFrontier + _cDepth - 1, c = _cDepth - size; c; ppel -= 1, c -= 1)
        {
            *ppel = pNode->Element();
            (*ppel)->AddRef();
            pNode = pNode->Parent();
        }
    }
    else if (size > _cDepth)
    {
        // Shrink the frontier
        
        for (ppel = _aryPelFrontier + size - 1, c = size - _cDepth; c; ppel -= 1, c -= 1)
        {
            (*ppel)->Release();
        }
        _aryPelFrontier.SetSize(_cDepth);
    }
    else
    {
        ppel = _aryPelFrontier + size - 1;
    }

    // Update the frontier from the end forward, stopping where it's already OK
    // (to avoid quadratric behavior, never iterate more than # of elementbegin/end)
    
    while (pNode)
    {
        Assert(ppel >= (CElement **)_aryPelFrontier);
        
        if (pNode->Element() == *ppel)
            break;
            
        (*ppel)->Release();
        *ppel = pNode->Element();
        (*ppel)->AddRef();

        ppel -= 1;
        pNode = pNode->Parent();
    }

    if (_pMarkup)
        _lVersionSafe = _pMarkup->GetMarkupTreeVersion();
    _pNode = NULL;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Finish
//
//  Synopsis:   Finish each context for final return from parser
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Finish()
{
    HRESULT    hr = S_OK;

    if (!_fDone)
    {
        // Implicit children
        hr = THR(AddImplicitChildren(ETAG_NULL));
        if (hr)
            goto Cleanup;

        // Litctx
        if (_etagLitCtx)
        {
            hr = THR(PopHpx());
            if (hr)
                goto Cleanup;
                
            _etagLitCtx = ETAG_NULL;
        }
        
        while (_pNode)
        {
            hr = THR(EndElement(_pNode));
            if (hr)
                goto Cleanup;

            if (_phpxExecute && !_phpxExecute->_fExecuteOnEof)
            {
                delete _phpxExecute;
                _phpxExecute = NULL;
            }
        }

        _fDone = TRUE;
        _fIgnoreInput = TRUE;
    }

    Assert(!_aryContextStack.Size());
    
    // Frontier be gone

    _aryPelFrontier.ReleaseAll();
    
    // Finish and delete the root context

    hr = THR(_ctx._phpx->Finish());
    if (hr)
        goto Cleanup;
        
    delete _ctx._phpx;
    _ctx._phpx = NULL;
    Assert(!_pNode);

    if (_pMarkup)
    {
        _pMarkup->Release();
        _pMarkup = NULL;
    }

Cleanup:
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Execute
//
//  Synopsis:   Executes the context which needs to be executed.
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Execute()
{
    HRESULT hr = S_OK;
    CElement **ppel;
    long c;

    if (_pMergeTagQueue)
    {
        Assert(!_pMergeTagQueue->IsEmpty());

        hr = THR(MergeTags());
        if (hr)
            goto Cleanup;
    }
    
    if (_phpxExecute)
    {
        CHtmParseCtx *phpx = _phpxExecute;
        _phpxExecute = NULL;
        Verify(!THR(phpx->Execute()));

        delete phpx;
    }

    for (ppel = _aryPelEndParse, c = _aryPelEndParse.Size(); c; ppel++, c--)
    {
        CNotification   nf;

        nf.EndParse(*ppel);
        (*ppel)->Notify(&nf);

        (*ppel)->Release();
    }
    
    _aryPelEndParse.DeleteAll();

Cleanup:

    RRETURN(hr);
}



//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::GetCurrentElement
//
//  Synopsis:   Obtains the current element
//
//-------------------------------------------------------------------------

CElement*
CHtmParse::GetCurrentElement()
{
    CElement *pElement;
        
    if (_pNode)
    {
        pElement = _pNode->Element();
    }
    else if (_aryPelFrontier.Size())
    {
        pElement = _aryPelFrontier[_aryPelFrontier.Size() - 1];
    }
    else
    {
        pElement = NULL;
    }

    return pElement;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseToken
//
//  Synopsis:   Dispatches a token to the appropriate method based on etag
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseToken(CHtmTag *pht)
{
    HRESULT hr;

    if (_fIgnoreInput)
        return S_OK;

    // Dispatch depending on token type:

    // TEXT

    if (pht->Is(ETAG_RAW_TEXT)
        || pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE))
    {
        Assert(pht->GetCch());

        hr = THR(ParseText(pht->GetPch(), pht->GetCch(), pht->IsAscii()));
    }

    // TAGS

    else if (pht->GetTag() < ETAG_RAW_COMMENT)
    {
        if ((_ctx._phpx->_atagReject && !IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagReject))
            || (_ctx._phpx->_atagAccept && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagAccept)) )
        {
            if (!pht->IsEnd())
            {
                hr = THR(ParseBeginTag(pht));
            }
            else
            {
                if (_ctx._phpx->_atagIgnoreEnd && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagIgnoreEnd))
                {
                    hr = THR(ParseIgnoredTag(pht));
                }
                else
                {
                    hr = THR(ParseEndTag(pht));
                }
            }
        }
        else
        {
            if (_ctx._phpx->_atagTag && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagTag))
            {
                hr = THR(_ctx._phpx->AddTag(pht));
            }
            else if (_ctx._phpx->_atagAlwaysEnd && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagAlwaysEnd))
            {
                hr = THR(ParseEndTag(pht));
            }
            else if (_ctx._phpx->_atagIgnoreEnd && pht->IsEnd() && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagIgnoreEnd))
            {
                hr = THR(ParseIgnoredTag(pht));
            }
            else
            {
                hr = THR(ParseUnknownTag(pht));
            }
        }
    }

    // COMMENTS

    else if (pht->Is(ETAG_RAW_COMMENT))
    {
        hr = THR(ParseComment(pht));
    }

    // RAW SOURCE
    
    else if (pht->Is(ETAG_RAW_SOURCE))
    {
        hr = THR(ParseSource(pht));
    }

    // PASTE MARKER
    
    else if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
    {
        hr = THR(ParseMarker(pht));
    }

    // TEXT FRAG

    else if (pht->Is(ETAG_RAW_TEXTFRAG))
    {
        hr = THR(ParseTextFrag(pht));
    }

    // EOF
    
    else if (pht->GetTag() == ETAG_RAW_EOF)
    {
        hr = THR(ParseEof());
    }
    
    else if (pht->GetTag() == ETAG_RAW_REJECT)
    {
        // Just ignore this guy.
        hr = S_OK;
    }

    else
    {
        AssertSz(0, "Parser was given an unrecognized token");
        hr = S_OK;
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseMarker
//
//  Synopsis:   Process a marker. Markers get queued if there is a queue.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseMarker(CHtmTag *pht)
{
    HRESULT hr;
    
    if (_pTagQueue)
    {
        Assert(_etagReplay);
        hr = THR(QueueTag(pht));
        goto Cleanup;
    }
    
    switch (pht->GetTag())
    {
    case ETAG_RAW_BEGINSEL:
        hr = THR(InsertLPointer());
        break;
        
    case ETAG_RAW_ENDSEL:
        hr = THR(InsertRPointer());
        break;

    default:
        hr = S_OK;
        Assert(0);
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseTextFrag
//
//  Synopsis:   Process a text frag.  Right now only conditional comments
//              generate text frags.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseTextFrag(CHtmTag *pht)
{
    HRESULT hr;
    
    hr =  ((CHtmRootParseCtx *) _aryContextStack[0]._phpx)->InsertTextFrag(pht->GetPch(), pht->GetCch(), _pNode);

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseText
//
//  Synopsis:   Process the text in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseText(TCHAR * pch, ULONG cch, BOOL fAscii)
{
    ELEMENT_TAG etag = ETAG_NULL;
    HRESULT hr = S_OK;

    // Step 1: Insert required container if any

    if (!_etagLitCtx)
    {
        etag = _fValidRTC ? _etagRTC : RequiredTextContainer();

        if (etag)
        {
            if (cch && ISSPACE(*pch))
            {
                TCHAR * pchScan = pch + 1;
                TCHAR * pchLast = pch + cch;
                while (pchScan < pchLast && ISSPACE(*pchScan))
                    ++pchScan;
                cch -= (LONG)(pchScan - pch);

                //
                // We can't collapse whitespace here because we may
                // have a white-space:pre attribute enabled at some later
                // point in time.
                //
                // So, the whitespace needs to get to the parser which will
                // add it to the tree.
                //

                if (_pMarkup->SupportsCollapsedWhitespace())
                {
                    if (_pTagQueue && !_pTagQueue->IsEmpty())
                    {
                        LONG    cchWhitespace = LONG(pchScan - pch);
                        CHtmTag ht;
                        TCHAR   *pchWhitespace = new TCHAR[cchWhitespace];

                        if (!pchWhitespace)
                        {
                            hr = E_OUTOFMEMORY;
                            goto Cleanup;
                        }   

                        memcpy(pchWhitespace, pch, cchWhitespace*sizeof(TCHAR));                        
                        
                        ht.Reset();
                        ht.SetTag(ETAG_RAW_COLLAPSED_WHITESPACE);
                        ht.SetCch(cchWhitespace);
                        ht.SetPch(pchWhitespace);
                        ht.SetAscii();
                                                
                        hr = THR(QueueTag(&ht));

                        delete [] pchWhitespace;
                        
                        if (FAILED(hr))
                            goto Cleanup;
                    }
                }

                if (cch == 0)
                {
                    // Entire text was spaces, just eat it.
                    return(S_OK);
                }

                pch  = pchScan;
            }

            const CHtmlParseClass *phpc;

            phpc = HpcFromEtag(etag);
            
            if (phpc->_atagProhibitedContainers)
            {
                hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
                if (hr)
                    goto Cleanup;
            }

            hr = THR(OpenContainer(etag));
            if (hr == S_FALSE)
            {
                AssertSz(0,"Required text container could not be inserted (DTD error)");
                hr = S_OK;
                goto Cleanup;
            }
            else if (hr)
                goto Cleanup;

            etag = ETAG_NULL;
        }

        // Before actually inserting any text, add any tags that have been queued
        
        if (_fImplicitChild || _etagReplay)
        {
            hr = THR(AddImplicitChildren(ETAG_NULL));
            if (hr)
                goto Cleanup;
        }
        
    }

    // Step 2: Insert deferred paste pointer
    
    Assert(!etag);

    if (_fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
        
    // Step 3: Send text to context (cch == 0 only for EOF)

    if (cch)
    {
        hr = THR(_ctx._phpx->AddText(_pNode, pch, cch, fAscii));
    }

Cleanup:

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseEof
//
//  Synopsis:   Process EOF
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseEof()
{
    HRESULT hr;
    
    // Close literal context (TITLE)

    if (_etagLitCtx)
    {
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
            
        _etagLitCtx = ETAG_NULL;
    }

    // Close any element that needs to be closed before processing EOF
    
    hr = THR(CloseAllContainers(s_atagEOFProhibited, s_atagNull));
    if (hr)
        goto Cleanup;

    // Feed a zero-length string through (may imply a BODY etc).
    
    hr = THR(ParseText(NULL, 0, TRUE));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseBeginTag
//
//  Synopsis:   Process the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseBeginTag(CHtmTag *pht)
{
    CElement *pel = NULL;
    const CTagDesc *ptd;
    HRESULT hr;
    PREPARE_CODE code;

    // Step 1: do all the implicit begin/end parsing

    hr = THR(PrepareContainer(pht->GetTag(), pht, &code));
    if (hr)
        goto Cleanup;
    if (code != PREPARE_NORMAL)
        goto Special;

    // Step 2: add implicit children
    hr = THR(AddImplicitChildren(pht->GetTag()));
    if (hr)
        goto Cleanup;

    // Step 3: Detect litctx tags (just TITLE) that must not be in the tree
    
    ptd = TagDescFromEtag(pht->GetTag());
    
    if (ptd->_dwTagDescFlags & TAGDESC_LITCTX)
    {
        Assert(ptd->_pParseClass->_pfnHpxCreator);
        _etagLitCtx = pht->GetTag();
        hr = THR(PushHpx(ptd->_pParseClass->_pfnHpxCreator, _pMarkup->Root(), _pNode));
        if (hr)
            goto Cleanup;

        // merge the tag into the element, if any
        if (HpcFromEtag(pht->GetTag())->_fMerge)
        {
            code = PREPARE_MERGE;
            goto Special;
        }
        
        goto Cleanup;
    }

    // Step 4: Make element

    hr = THR(CreateElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;

    // Step 5: Put it into the tree
    hr = THR(BeginElement(pel, TRUE, pht->IsEmpty()));
    if (hr)
        goto Cleanup;

Cleanup:

    CElement::ReleasePtr(pel);
        
    RRETURN(hr);

Special:

    switch (code)
    {
    case PREPARE_UNKNOWN:
        hr = THR(ParseUnknownTag(pht));
        goto Cleanup;
    case PREPARE_MERGE:
        hr = THR(RequestMergeTag(pht));
        goto Cleanup;
    case PREPARE_QUEUE:
        hr = THR(QueueTag(pht));
        goto Cleanup;
    default:
        Assert(0);
        goto Cleanup;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::RequestMergeTag
//
//  Synopsis:   Merge the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::RequestMergeTag(CHtmTag *pht)
{
    HRESULT hr = S_OK;
    
    if (_pelMerge)
    {
        if (!MergableTags(_pelMerge->Tag(), pht->GetTag()))
            goto Cleanup;
    }
    else
    {
        CTreeNode *pNode = FindContainer(pht->GetTag(), HpcFromEtag(pht->GetTag())->_atagEndContainers);
        if (pNode)
        {
            _pelMerge = pNode->Element();
            _pelMerge->AddRef();
        }
    }
    
    if (!_pMergeTagQueue)
    {
        _pMergeTagQueue = new CHtmTagQueue();
        if (!_pMergeTagQueue)
            goto OutOfMemory;
    }

    hr = THR(_pMergeTagQueue->EnqueueTag(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::MergeTags
//
//  Synopsis:   Merge the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::MergeTags()
{
    HRESULT hr = S_OK;
    CElement *pelMerge;
    CHtmTagQueue *pTagQueue = NULL;

    if (_pelMerge)
    {
        pelMerge = _pelMerge;
    }
    else
    {
        pelMerge = _ctx._phpx->GetMergeElement();
    }

    if (pelMerge)
    {
        pTagQueue = _pMergeTagQueue;
        _pMergeTagQueue = NULL;
        
        while (!pTagQueue->IsEmpty())
        {
            CHtmTag *pht;
            pht = pTagQueue->DequeueTag();
            
            Assert(pht);
            Assert(HpcFromEtag(pht->GetTag())->_fMerge || (TagDescFromEtag(pht->GetTag())->_dwTagDescFlags & TAGDESC_LITCTX));
            Assert(MergableTags(pelMerge->Tag(), pht->GetTag()));

        
            pelMerge->_fSynthesized = FALSE;
            
            hr = THR(pelMerge->MergeAttrBag(pht));
            if (hr)
                goto Cleanup;
        }

        if (_pelMerge)
        {
            _pelMerge->Release();
            _pelMerge = NULL;
        }
    }

Cleanup:
    if (pTagQueue)
        pTagQueue->Release();

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::StopLookingForDOCTYPE
//
//  Synopsis:   sets _fLookingForDOCTYPE to FALSE and also
//              reacts to a registry key to set CSS-compat to 'always true'
//              This is equivalent to simulated strict DOCTYPE.
//
//-------------------------------------------------------------------------
void 
CHtmParse::StopLookingForDOCTYPE()
{
    // if registry key says always use Strict - then do it.
    if (_fLookingForDOCTYPE)
    {
        Assert(_pDoc && _pMarkup);
        _pDoc->UpdateFromRegistry();

        OPTIONSETTINGS *pos = _pDoc->_pOptionSettings;
        if(pos && pos->nStrictCSSInterpretation == STRICT_CSS_ALWAYS)
            _pMarkup->SetStrictCSS1Document(TRUE);
    }

    _fLookingForDOCTYPE = FALSE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::QueueTag
//
//  Synopsis:   Queue the tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::QueueTag(CHtmTag *pht)
{
    const CHtmlParseClass *phpc;
    HRESULT hr;

    // any DOCTYPE after first element doesn't count.
    StopLookingForDOCTYPE();

    if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
    {
        Assert(_etagReplay && _pTagQueue);
    }
    else
    {
        phpc = HpcFromEtag(pht->GetTag());

        Assert(phpc->_fQueueForRequired);

        // If queuing in hope of a different tag than we're keeping track of
        // for replay, Assert, give up, and drop tag
        if (_etagReplay && phpc->_etagDefaultContainer != _etagReplay)
        {
            Assert(0);
            return S_OK;
        }

        _etagReplay = phpc->_etagDefaultContainer;

        if (!_pTagQueue)
        {
            _pTagQueue = new CHtmTagQueue;
            if (!_pTagQueue)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }
        }
    }

    hr = THR(_pTagQueue->EnqueueTag(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Function:   GenericTagMatch
//
//  Synopsis:   Determines if a closing generic tag matches the given one
//
//-------------------------------------------------------------------------

BOOL
GenericTagMatch(CHtmTag * pht, CTreeNode * pNode)
{
    LPTSTR          pchColon;
    const TCHAR *   pchTagName   = pNode->Element()->TagName();
    const TCHAR *   pchScopeName = pNode->Element()->Namespace();

    Assert(IsGenericTag(pht->GetTag()));
    Assert(pht->IsEnd());

    if (!pht->GetCch())
        return FALSE;
    
    pchColon = StrChr(pht->GetPch(), _T(':'));

    if (pchColon)
    {
        // (JHarding) 102765 - New tag has a scope, since it has a colon, but
        // old one didn't, so no match.
        if( !pchScopeName )
            return FALSE;

        if (0 != StrCmpNIC(pchTagName, pchColon + 1, pht->GetCch() - PTR_DIFF(pchColon, pht->GetPch()) - 1))
            return FALSE;

        if (0 != StrCmpNIC(pchScopeName, pht->GetPch(), PTR_DIFF(pchColon, pht->GetPch())))
            return FALSE;
    }
    else
    {
        if (0 != StrCmpNIC(pchTagName, pht->GetPch(), pht->GetCch()))
            return FALSE;
        
        if (pchScopeName)
            return FALSE;
    }

    return TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseEndTag
//
//  Synopsis:   Processes the end tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseEndTag(CHtmTag *pht)
{
    CTreeNode * pNode;
    const CHtmlParseClass *phpc;
    PREPARE_CODE code;
    ELEMENT_TAG etag;
    HRESULT hr = S_OK;

    phpc = HpcFromEtag(pht->GetTag());

    // Step 1: End litctx if any (for TITLE)

    if (_etagLitCtx)
    {
        BOOL fMatch;
        
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
            
        fMatch = (pht->GetTag() == _etagLitCtx);
        
        _etagLitCtx = ETAG_NULL;
        
        if (fMatch)
            RRETURN(hr);
    }

    // Step 2: Find matching container

    if (phpc->_atagMatch) // NS compat: bug 24945 - some end tags match several begin tags
    {
        pNode = FindContainer(phpc->_atagMatch, phpc->_atagEndContainers);
    }
    else if (pht->Is(ETAG_GENERIC))
    {
        pNode = FindGenericContainer(pht, phpc->_atagEndContainers);
    }
    else
    {
        pNode = FindContainer(pht->GetTag(), phpc->_atagEndContainers);
    }

    // Step 3: if tag is XML or generic, verify that the name matches; throw an error if it does not
    if (IsGenericTag(pht->GetTag()))
    {
        if (pNode)
        {
            if (!GenericTagMatch(pht, pNode))
            {
                goto Unknown;
            }
        }
        else
            goto Unknown;
    }

    // Step 4: imply begin tags for compat
    // NS compat bug 15597 (new fix) Some unmatched end tags imply a begin tag
    // other unmatched end tags are replaced by a different end tag
    if (!pNode)
    {
        if (phpc->_fQueueForRequired)
        {
            // If required container is not present and _fQueueForRequired is set, queue up end tag
            
            if (!FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers))
            {
                hr = THR(QueueTag(pht));
                goto Cleanup;
            }
        }
        
        etag = phpc->_etagUnmatchedSubstitute;
        
        if (!etag)
            goto Unknown;
            
        // open a container to be closed immediately
        if (etag == ETAG_IMPLICIT_BEGIN)
        {
            etag = pht->GetTag();
                
            hr = THR(PrepareContainer(etag, NULL, &code));
            if (hr)
                goto Cleanup;

            if (code != PREPARE_NORMAL)
            {
                if (code == PREPARE_UNKNOWN)
                    goto Unknown;
                else
                    goto Cleanup; // drop end w/ implicit begin in merge or queue situations
            }
                
            hr = THR(OpenContainer(etag));
            if (hr == S_FALSE)
                goto Unknown;
            if (hr)
                goto Cleanup;

            if (phpc->_scope == SCOPE_EMPTY)
                goto Cleanup;
            
            Assert(_pNode->Tag() == etag);
            pNode = _pNode;
        }
        else
        {
            // search for the alternate match
            phpc = HpcFromEtag(etag);
            
            pNode = FindContainer(etag, phpc->_atagEndContainers);
            if (!pNode)
                goto Unknown;
        }
    }

    // Step 5: Close the container

    pNode->Element()->_fExplicitEndTag = TRUE;

    hr = THR(CloseContainer(pNode, TRUE));
    
Cleanup:
    RRETURN(hr);

Unknown:
    hr = THR(ParseUnknownTag(pht));
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseIgnoredTag
//
//  Synopsis:   Processes the ignored tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseIgnoredTag(CHtmTag *pht)
{
    const CHtmlParseClass *phpc;
    CTreeNode *pNode;
    
    if (!pht->IsEnd())
        return S_OK;

    phpc = HpcFromEtag(pht->GetTag());

    if (phpc && phpc->_fMerge)
    {
        pNode = FindContainer(pht->GetTag(), phpc->_atagEndContainers);
        if (pNode)
        {
            pNode->Element()->_fExplicitEndTag = TRUE;
        }
    }

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseUnknownTag
//
//  Synopsis:   Processes the unknown tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseUnknownTag(CHtmTag *pht)
{
    CElement *pel = NULL;
    const TCHAR *pchName;
    HRESULT hr;

    // Would the context prefer pht's or unknown elements?
    if (_ctx._phpx->_fDropUnknownTags)
    {
        hr = S_OK;
        goto Cleanup;
    }

    // If the tag has no name (e.g. ETAG_FRAG), drop it
    if( pht->GetTag() != ETAG_UNKNOWN )
    {
        pchName = NameFromEtag(pht->GetTag());
        if (!pchName || !*pchName)
            return S_OK;
    }

    TraceTag((tagParse, "Unknown tag <%s%ls>", pht->IsEnd() ? "/" : "", NameFromEtag(pht->GetTag())));

    // Implicit children
    hr = THR(AddImplicitChildren(pht->GetTag()));
    if (hr)
        goto Cleanup;

    // Make element and put in the tree

    hr = THR(CreateUnknownElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;
        
    hr = THR(BeginElement(pel, TRUE, pht->IsEmpty()));
    if (hr)
        goto Cleanup;

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr);
}

//+-----------------------------------------------------------
//
//  IsStrictCSS1Doctype - determine if DOCTYPE tag contains something that
//  makes us strictly CSS1 compatible. IE5.5 and before were DOCTYPE-unaware.
//  Now we start to treat HTML 4.x without "Transitional" or "Frameset" specifiers
//  as strict CSS1. Other HTML types that we explicitly know about are treated
//  as before for backward-compatibility. All unrecognized HTML and non-HTML types
//  are treated as strict CSS1 because they can be new HTML versions that we don't know
//  about yet.
//
//------------------------------------------------------------

static BOOL IsStrictCSS1Doctype(const CStr &pDoctype)
{
    // just in case
    if(pDoctype.IsNull()) 
        return FALSE;

    // if it's not a DOCTYPE, we are not interested
    if(pDoctype.Length() < 9 || StrCmpNIC(pDoctype, _T("<!DOCTYPE"), 9))
        return FALSE;
    
    // APPHACK (gschneid) Windows 2000 help files contain a standard compliant doctype switch. Because the pages look 
    // ugly in standard compliance mode and Windows 2000 is already shipped we apphack html help with the doctype switch
    // used in the compiled html files. 
    // The doctype switch is: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd">
    // Hence <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd"> in chm will result
    // in legacy mode.
    //
    // <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd"> in CHM *not strict!
    if (   StrStrI(pDoctype, _T("DTD HTML 4.0"))
        && StrStrI(pDoctype, _T("http://www.w3.org/TR/REC-html40/strict.dtd"))
        && g_fInHtmlHelp)
        return FALSE;

    // APPHACK (gschneid) IBM's recovery CDs are shipped with a program ssstart.exe that hosts trident. The doctype switch in the
    // documents forces us to be standard compliant. Therefore the content is totally screwed up. To fix that we go back in legacy
    // mode if we are hosted by IBM's program.

    if (g_fInIBMSoftwareSelection)
        return FALSE;

    // APPHACK (fmunoz) Money 2001 help files have a <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"> declaration that 
    // basically turns behaviors off because they are not using strict syntax to define them, and their collapsible 
    // paragraphs doen work.
    if (g_fInMoney2001)
        return FALSE;

    // XHTML is always strictly CSS1-compatible
    if(StrStrI(pDoctype,_T("DTD XHTML")))
        return TRUE; 

    // HTML 4[.x] with a DTD referred to by url - must be a seriously strict author.
    if(   StrStrI(pDoctype,_T("DTD HTML 4"))
       && StrStrI(pDoctype,_T("http://")))
        return TRUE; 

    // Treat 4.x as backward-compat if it has Transitional or Frameset, otherwise strict
    if(StrStrI(pDoctype,_T("DTD HTML 4.")))
    {
        return (!StrStrI(pDoctype,_T(" Transitional//")) && !StrStrI(pDoctype,_T(" Frameset//")));
    }

    // traditional HTML plain, HTML 2, HTML 3.2, HTML 4 - IE4, IE5.x compat
    if(   StrStrI(pDoctype,_T(" HTML 2")) 
       || StrStrI(pDoctype,_T(" HTML 3")) 
       || StrStrI(pDoctype,_T(" HTML 4")) 
       || StrStrI(pDoctype,_T("DTD HTML//")) 
       || StrStrI(pDoctype,_T("DTD W3 HTML//")) 
       || StrStrI(pDoctype,_T("DTD HTML EXP")) // experimental HTML. seen from Adobe FrameMaker 5.5/HTML Export Filter output.
       || StrStrI(pDoctype,_T(" HTML plus")) ||  // HTML plus Tables.  seen on http://iwin.nws.noaa.gov/iwin/iwdspg1.html
          StrStrI(pDoctype,_T("DOCTYPE NETSC"))  // Netscrape bookmark file
      )
        return FALSE; 

    // new document type, treated as strict
    // In subsequent versions of IE, we will be able to recognize all
    // HTML versions that will be out by that time and make proper decisions
    return TRUE;
}



//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseComment
//
//  Synopsis:   Processes the comment in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseComment(CHtmTag *pht)
{
    CElement *pel = NULL;

    TraceTag((tagParse, "Comment <%ls> %ls", NameFromEtag(pht->GetTag()), pht->GetPch()));

    HRESULT hr;

    //check if it's a <!DOCTYPE..> thing. We treat this effectively as a processing 
    //instruction, removing it from the input flow. We also use _fLookingForDOCTYPE
    //flag to start ignorig <!DOCTYPE...> when anything has been parsed in.
    // Note: because _fLookingForDOCTYPE becomes TRUE after first tag parsed, there
    // is no perf implications because of this check.
    if(    _fLookingForDOCTYPE
        && pht->Is(ETAG_RAW_COMMENT)
        && pht->GetCch() > 9 
        && !StrCmpNIC(pht->GetPch(), _T("<!DOCTYPE"), 9)
      )
    {
        CStr    cstrText;
        hr = cstrText.Set(pht->GetPch(), pht->GetCch());

        if(hr)
            goto Cleanup;

        Assert(_pMarkup);

        if(IsStrictCSS1Doctype(cstrText)) 
        {
            _pMarkup->SetStrictCSS1Document(TRUE);   
        }
    }
    
    // Comments should be dropped by the context if _fDropUnknownTags
    if (_ctx._phpx->_fDropUnknownTags)
    {
        hr = S_OK;
        goto Cleanup;
    }

    // Implicit children
    hr = THR(AddImplicitChildren(ETAG_NULL));
    if (hr)
        goto Cleanup;

    // Make element and put in the tree

    hr = THR(CreateElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;

    hr = THR(BeginElement(pel, TRUE));
    if (hr)
        goto Cleanup;

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr); // discard for now
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseSource
//
//  Synopsis:   Processes the original source annotation in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseSource(CHtmTag *pht)
{
    TraceTag((tagParse, "Original source %d", NameFromEtag(pht->GetTag()), pht->GetSourceCch()));

    HRESULT hr;

    hr = THR(_ctx._phpx->AddSource(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainer (singleton version)
//
//  Synopsis:   Finds an element matching exactly stopping at set Stop
//
//-------------------------------------------------------------------------
CTreeNode *
CHtmParse::FindContainer(ELEMENT_TAG etagMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;

    pNode = _pNode;

    while (pNode && pNode->Tag() != etagMatch)
    {
        if (IsEtagInSet(pNode->Tag(), pSetStop))
            return NULL;

        pNode = pNode->Parent();
    }

    return pNode;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainer (set version)
//
//  Synopsis:   Finds an element in set Match stopping at set Stop
//
//-------------------------------------------------------------------------

#define FCC_MIN_DEPTH 16

CTreeNode *
CHtmParse::FindContainer(const ELEMENT_TAG *pSetMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;
    ULONG cDepth;

    pNode = _pNode;
    
    if (_cDepth >= FCC_MIN_DEPTH)
    {
        cDepth = _cDepth;

        while (cDepth < FCC_MIN_DEPTH || !FindContainerCache(cDepth - FCC_MIN_DEPTH, pNode, pSetMatch, pSetStop, &pNode))
        {
            if (!pNode || IsEtagInSet(pNode->Tag(), pSetMatch))
                break;
                
            if (IsEtagInSet(pNode->Tag(), pSetStop))
            {
                pNode = NULL;
                break;
            }
            
            pNode = pNode->Parent();
            cDepth -= 1;
        }
        
        SetContainerCache(_cDepth - FCC_MIN_DEPTH, _pNode, pSetMatch, pSetStop, pNode);

        return pNode;
    }
    else
    {
        while (pNode && !IsEtagInSet(pNode->Tag(), pSetMatch))
        {
            if (IsEtagInSet(pNode->Tag(), pSetStop))
                return NULL;

            pNode = pNode->Parent();
        }

        return pNode;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainerCache
//
//  Synopsis:   Speeds FindContainer by using cached results
//
//-------------------------------------------------------------------------
BOOL
CHtmParse::FindContainerCache(ULONG iCache, CTreeNode *pNodeCheck, const ELEMENT_TAG *pset1, const ELEMENT_TAG *pset2, CTreeNode **ppNodeOut)
{
    CFccLine *pfccl;
    CFccItem *pfcci;
    ULONG c;
    ULONG cDbg = 0;

    if ((ULONG)_aryFccl.Size() < iCache + 1)
        return FALSE;

    pfccl = _aryFccl + iCache;

    if (pfccl->_pNodeCheck != pNodeCheck)
        return FALSE;

    c = pfccl->_iFirst;
    pfcci = pfccl->_afcci + c;
    c += 1;

    if (c > pfccl->_cCached)
        c = pfccl->_cCached;
        
Reloop:
    while (c)
    {
        cDbg += 1;
        
        if (pfcci->_pset1 == pset1 && pfcci->_pset2 == pset2)
        {
            *ppNodeOut = pfcci->_pNodeOut;
            return TRUE;
        }
            
        pfcci -= 1;
        c -= 1;
    }

    if (pfcci < pfccl->_afcci)
    {
        c = pfccl->_cCached - pfccl->_iFirst - 1;
        pfcci = pfccl->_afcci + FCC_WIDTH - 1;
        goto Reloop;
    }

    return FALSE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::SetContainerCache
//
//  Synopsis:   Speeds FindContainer by caching results
//
//-------------------------------------------------------------------------
void
CHtmParse::SetContainerCache(ULONG iCache, CTreeNode *pNodeCheck, const ELEMENT_TAG *pset1, const ELEMENT_TAG *pset2, CTreeNode *pNodeOut)
{
    CFccLine *pfccl;
    CFccItem *pfcci;
    ULONG c;

    if ((ULONG)_aryFccl.Size() < iCache + 1)
    {
        c = _aryFccl.Size();

        if (!!_aryFccl.Grow(iCache + 1 + iCache / 8)) // 1.125 times the size we need for exponential growth
            return; // OOM

        pfccl = _aryFccl + c;
        c = _aryFccl.Size() - c;
        
        while (c)
        {
            pfccl->_pNodeCheck = NULL;
            pfccl += 1;
            c -= 1;
        }
    }

    pfccl = _aryFccl + iCache;

    if (pfccl->_pNodeCheck != pNodeCheck)
    {
        pfccl->_pNodeCheck = pNodeCheck;
        pfccl->_iFirst = 0;
        pfccl->_cCached = 1;
        pfcci = pfccl->_afcci;
    }
    else
    {
        pfccl->_iFirst += 1;
        if (pfccl->_iFirst >= FCC_WIDTH)
            pfccl->_iFirst = 0;
            
        if (pfccl->_cCached < FCC_WIDTH)
            pfccl->_cCached += 1;
            
        pfcci = pfccl->_afcci + pfccl->_iFirst;
    }
    
    pfcci->_pset1 = pset1;
    pfcci->_pset2 = pset2;
    pfcci->_pNodeOut = pNodeOut;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindGenericContainer
//
//  Synopsis:   same as FindContainer, but also matches scope/name of generic
//              tags
//
//-------------------------------------------------------------------------
CTreeNode *
CHtmParse::FindGenericContainer(CHtmTag *pht, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;
    ELEMENT_TAG etagMatch = pht->GetTag();

    pNode = _pNode;

    while (pNode &&
           !(pNode->Tag() == etagMatch && GenericTagMatch(pht, pNode)))
    {
        if (IsEtagInSet(pNode->Tag(), pSetStop))
            return NULL;

        pNode = pNode->Parent();
    }

    return pNode;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::RequiredTextContainer
//
//  Synopsis:   Computes the etag of the required text container, if any.
//
//-------------------------------------------------------------------------
ELEMENT_TAG
CHtmParse::RequiredTextContainer()
{
    CTreeNode * pNode;
    const CHtmlParseClass *phpc;

    // optimization: cached required text container

    Assert(!_fValidRTC);

    _fValidRTC = TRUE;

    // find first element with _textscope != TEXTSCOPE_NEUTRAL

    for (pNode = _pNode; pNode; pNode = pNode->Parent())
    {
        phpc = HpcFromEtag(pNode->Tag());

        if (phpc->_textscope == TEXTSCOPE_INCLUDE)
            return (_etagRTC = ETAG_NULL);

        if (phpc->_textscope == TEXTSCOPE_EXCLUDE)
        {
            Assert(HpcFromEtag(phpc->_etagTextSubcontainer)->_textscope == TEXTSCOPE_INCLUDE);
            return (_etagRTC = phpc->_etagTextSubcontainer);
        }
    }

    Assert(0);

    return (_etagRTC = ETAG_NULL);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PrepareContainer
//
//  Synopsis:   Do all the implicit opening and closing before
//              beginning the specified container
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::PrepareContainer(ELEMENT_TAG etag, CHtmTag *pht, PREPARE_CODE *pCode)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;
    ELEMENT_TAG etag2;
    HRESULT hr = S_OK;

    Assert(!pht || pht->Is(etag));

    phpc = HpcFromEtag(etag);

    // Step 0: Check for masking container
    
    if (phpc->_atagMaskingContainers)
    {
        pNode = FindContainer(phpc->_atagMaskingContainers, phpc->_atagBeginContainers);
        if (pNode)
        {
            if (phpc->_fMerge)
                goto Merge;
            else
                goto Unknown;
        }
    }

    // Step 1: Close all prohibited containers (implied end tags)

    if (phpc->_atagProhibitedContainers)
    {
        hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
        if (hr)
            goto Cleanup;
    }

    // Step 2: If textlike, ensure text container (implied begin tags depend on nearest text-excluder)
    if ((phpc->_texttype == TEXTTYPE_ALWAYS ||
         phpc->_texttype == TEXTTYPE_QUERY && _ctx._phpx->QueryTextlike(_pMarkup, etag, pht)) &&
        (ETAG_NULL != (etag2 = (_fValidRTC ? _etagRTC : RequiredTextContainer()))) )
    {
        phpc = HpcFromEtag(etag2);
        if (phpc->_atagProhibitedContainers)
        {
            hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
            if (hr)
                goto Cleanup;
        }

        hr = THR(OpenContainer(etag2));
        if (hr == S_FALSE)
        {
            AssertSz(0,"Required text container could not be inserted (DTD error)");
            goto Unknown;
        }
        else if (hr)
            goto Cleanup;
    }

    // Step 3: Otherwise, ensure any required containers (implied begin tags depend on tag itself)

    else
    if (phpc->_atagRequiredContainers)
    {
        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        if (!pNode)
        {
            if (phpc->_fQueueForRequired)
                goto Queue;
                
            hr = THR(OpenContainer(phpc->_etagDefaultContainer));
            if (hr == S_FALSE)
                goto Unknown;
            else if (hr)
                goto Cleanup;
        }
    }

    *pCode = PREPARE_NORMAL;

Cleanup:
    RRETURN(hr);

Unknown:
    *pCode = PREPARE_UNKNOWN;
    hr = S_OK;
    goto Cleanup;

Queue:
    *pCode = PREPARE_QUEUE;
    hr = S_OK;
    goto Cleanup;

Merge:
    *pCode = PREPARE_MERGE;
    hr = S_OK;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::OpenContainer
//
//  Synopsis:   Opens a default container (by etag) and any outer
//              containers which are required.
//
//  Returns:    S_OK    if the etag was opened sucessfully
//              S_FALSE if the etag is not allowed in the current context
//              E_*     on error
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::OpenContainer(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    CElement *pel = NULL;
    const CHtmlParseClass *phpc;
    CStackPtrAry<INT_PTR, 8> aetagStack(Mt(CHtmParseOpenContainer_aetagStack_pv));
    INT_PTR * petagPtr;
    int i;
    HRESULT hr = S_OK;

    // Step 1: Compute all required containers (implied begin tags)

    while (etag)
    {
        aetagStack.Append(etag);

        phpc = HpcFromEtag(etag);
        if (!phpc)
            break;

        if (!phpc->_atagRequiredContainers)
            break;

        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        if (pNode)
            break;

        Assert(!phpc->_fQueueForRequired);
        etag = phpc->_etagDefaultContainer;
    }

    // If unable to insert required containers, return false

    if (!etag)
        return S_FALSE;

    // Step 2: Insert all needed containers in order

    for (i=aetagStack.Size(), petagPtr = (INT_PTR *)aetagStack+i; i; i--)
    {
        ELEMENT_TAG etagItem = (ELEMENT_TAG)*--petagPtr;

        // Implicit children
        hr = THR(AddImplicitChildren(etagItem));
        if (hr)
            goto Cleanup;

        AssertNoneProhibited(etagItem);
        AssertAllRequired(etagItem);
        
        hr = THR(CreateElement(etagItem, &pel, _pDoc, _pMarkup, TRUE, &_fDie));
        if (hr)
            goto Cleanup;

        pel->_fSynthesized = TRUE;
        
        hr = THR(BeginElement(pel, FALSE));
        if (hr)
            goto Cleanup;

        CElement::ClearPtr(&pel);

        aetagStack.Delete(aetagStack.Size()-1);
    }

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::AddImplicitChildren
//
//  Synopsis:   Adds any implicit children required under the current
//              node, given that "etagNext" is the next element that is
//              going to be created.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::AddImplicitChildren(ELEMENT_TAG etagNext)
{
    ELEMENT_TAG etagChild;
    CTreeNode *pNodeStart = NULL;
    CTreeNode *pNodeClose = NULL;
    CHtmTagQueue *pTagQueue = NULL;
    CElement *pel = NULL;
    const CHtmlParseClass *phpc;
    HRESULT hr = S_OK;

    if (!_fImplicitChild && !_etagReplay)
        return S_OK;

#ifdef NOPARSEADDREF
    CTreeNode::ReplacePtr(&pNodeStart, _pNode);
#else
    pNodeStart = _pNode;
#endif
    
    // Step 1: add implicit children

    while (_fImplicitChild)
    {
        phpc = HpcFromEtag(_pNode->Tag());
        if (!phpc)
            break; // Assert below
            
        etagChild = phpc->_etagImplicitChild;
        if (!etagChild)
            break; // Assert below
            
        _fImplicitChild = FALSE;

        if (!pNodeClose)
        {
            // Close this element if _fCloseImplicitChild is set
            if (phpc->_fCloseImplicitChild)
#ifdef NOPARSEADDREF
                CTreeNode::ReplacePtr(&pNodeClose, _pNode);
#else
                pNodeClose = _pNode;
#endif
                
            // break out if the required child == etagNext
            if (etagChild == etagNext)
                goto Replay;
        }
          
        AssertNoneProhibited(etagChild);
        AssertAllRequired(etagChild);
        
        hr = THR(CreateElement(etagChild, &pel, _pDoc, _pMarkup, TRUE, &_fDie));
        if (hr)
            goto Cleanup;

        pel->_fSynthesized = TRUE;

        hr = THR(BeginElement(pel, FALSE));
        if (hr)
            goto Cleanup;
        
        CElement::ClearPtr(&pel);
    }

    AssertSz(!_fImplicitChild,"_fImplicitChild set when current element doesn't require implicit children");
    _fImplicitChild = FALSE;
    
    // Step 2: close all the implicit children that need to be closed

    if (etagNext || !pNodeClose)
    {
#ifdef NOPARSEADDREF
        CTreeNode::ReplacePtr(&pNodeClose, pNodeStart);
#else
        pNodeClose = pNodeStart;
#endif
    }

    AssertOnStack(pNodeClose);

    while (_pNode != pNodeClose)
    {
        hr = THR(EndElement(_pNode));
        if (hr)
            goto Cleanup;
    }

Replay:

    // If the current node matches the _etagReplay tag, implicitly
    // replay all the queued begin tags.
    
    // The problem with this approach is that there's no guarantee that
    // after parsing all the queued tags, the frontier is in the state
    // that's required for the caller of OpenContainer on the stack.
    // Nevertheless, since all queued tags are fairly inert for the
    // parser (A, P, CENTER, etc), it _should_ work (dbau 5/3/98)
    
    if (_etagReplay)
    {
        if (_pNode->Tag() == _etagReplay)
        {
            if (_pTagQueue)
            {
                pTagQueue = _pTagQueue;
                _pTagQueue = NULL;
                while (!pTagQueue->IsEmpty())
                {
                    CHtmTag *pht;
                    pht = pTagQueue->DequeueTag();
                    Assert(pht);
                    Assert(FindContainer(_etagReplay, s_atagNull));

                    hr = THR(ParseToken(pht));
                    if (hr)
                        goto Cleanup;

                    Assert(!_pTagQueue);
                }
                _etagReplay = ETAG_NULL;
            }
        }
        else
        {
            Assert(!_pTagQueue || !FindContainer(_etagReplay, s_atagNull));
        }
    }
    
Cleanup:
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNodeStart);
    CTreeNode::ReleasePtr(pNodeClose);
#endif
    CElement::ReleasePtr(pel);

    if (pTagQueue)
        pTagQueue->Release();

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::CloseContainer
//
//  Synopsis:   Closes pelContainer and any elements between peInner and
//              peContainer which are closed when peContainer closes.
//
//              Creates proxies as needed.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::CloseContainer(CTreeNode *pNodeContainer, BOOL fExplicit)
{
    CTreeNode *pNode = NULL;
    CTreeNode **ppNode;
    CTreeNode **ppNode2;
    const CHtmlParseClass *phpc;
    CStackPtrAry<CTreeNode*,8> apNodeStack(Mt(CHtmParseCloseContainer_apNodeStack_pv));
    CStackPtrAry<CTreeNode*,8> apNodeClose(Mt(CHtmParseCloseContainer_apNodeClose_pv));
    int c, c2;
    enum { CLOSE_NESTED, CLOSE_NORMAL } closeWhich;
    HRESULT hr;

    // Implicit children
    hr = THR(AddImplicitChildren(ETAG_NULL));
    if (hr)
        goto Cleanup;

    // optimization: do nested close computation only if closing node is not current
    
    if (pNodeContainer != _pNode)
    {
        AssertOnStack(pNodeContainer);

        // step 1: create stack of nested elements to reverse order
        
        for (pNode = _pNode; pNode != pNodeContainer; pNode = pNode->Parent())
        {
            hr = THR(apNodeStack.Append(pNode));
            if (hr)
                goto Cleanup;
        }

        // step 2: create stack of elements to close
        
        hr = THR(apNodeClose.Append(pNodeContainer));
        if (hr)
            goto Cleanup;

        if (HpcFromEtag(pNodeContainer->Tag())->_scope == SCOPE_NESTED)
            closeWhich = CLOSE_NESTED;
        else
            closeWhich = CLOSE_NORMAL;
            
        for (c = apNodeStack.Size(), ppNode = (CTreeNode**)apNodeStack + c - 1; c; c--, ppNode--)
        {
            phpc = HpcFromEtag((*ppNode)->Tag());
            
            if (closeWhich == CLOSE_NESTED && phpc->_scope == SCOPE_NESTED)
            {
                hr = THR(apNodeClose.Append(*ppNode));
                if (hr)
                    goto Cleanup;

                goto Closed;
            }

            for (c2 = apNodeClose.Size(), ppNode2 = apNodeClose; c2; c2--, ppNode2++)
            {
                if (IsEtagInSet((*ppNode2)->Tag(), phpc->_atagEndContainers))
                {
                    hr = THR(apNodeClose.Append(*ppNode));
                    if (hr)
                        goto Cleanup;
                        
                    if (closeWhich == CLOSE_NORMAL && HpcFromEtag((*ppNode)->Tag())->_scope == SCOPE_NESTED)
                        closeWhich = CLOSE_NESTED;
                        
                    goto Closed;
                }
            }

        Closed:
            ;
        }
        
        // step 3: Close nested elements
        
        Assert(apNodeClose.Size());

        for (c = apNodeClose.Size() - 1, ppNode = (CTreeNode**)apNodeClose + c; c; c--, ppNode--)
        {
            AssertOnStack(*ppNode);
            AssertNoEndContainees(*ppNode);
            hr = THR(EndElement(*ppNode));
            if (hr)
                goto Cleanup;
        }

        Assert(*ppNode == pNodeContainer);
    }

    // Step 4: Close requested element itself
    
    AssertOnStack(pNodeContainer);
    AssertNoEndContainees(pNodeContainer);
    
    if (fExplicit && _fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
    
    hr = THR(EndElement(pNodeContainer));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::CloseAllContainers
//
//  Synopsis:   Closes every container which matches atagClose up to
//              and (possibly) including the first match in atagBegin
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::CloseAllContainers(const ELEMENT_TAG *atagClose, const ELEMENT_TAG *atagBegin)
{
    CTreeNode *pNode;
    HRESULT hr = S_OK;

    for (;;)
    {
        pNode = FindContainer(atagClose, atagBegin);
        if (!pNode)
            break;

        hr = THR(CloseContainer(pNode, FALSE));
        if (hr)
            goto Cleanup;

    }

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::BeginElement
//
//  Synopsis:   Notifies context of the beginning of an element, and
//              advances _pel as needed.
//
//              Also handles creating a new context if needed.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::BeginElement(CElement *pel, BOOL fExplicit, BOOL fEndTag)
{
    const CHtmlParseClass *phpc;
    CTreeNode       *pNode = NULL;
    HRESULT          hr = S_OK;
    PARSESCOPE       parsescope;
    
    TraceTag((tagParse, "Begin element <%ls>", NameFromEtag(pel->Tag())));

    // any DOCTYPE after first element doesn't count.
    StopLookingForDOCTYPE();

    phpc = HpcFromEtag(pel->Tag());
    parsescope = phpc->_scope;
    if (fEndTag && (pel->Tag() >= ETAG_GENERIC && pel->Tag() <= ETAG_GENERIC_BUILTIN))
    {
        parsescope = SCOPE_EMPTY;
        pel->_fExplicitEndTag = TRUE;
    }
    
    // optimization: invalidate cached RequiredTextContainer

    if (phpc->_textscope != TEXTSCOPE_NEUTRAL)
        _fValidRTC = FALSE;

    // handle delay-pointer insert
    if (fExplicit && _fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
        
    // step 1: notify context

    hr = THR(_ctx._phpx->BeginElement(&pNode, pel, _pNode, (parsescope == SCOPE_EMPTY)));
    if (hr)
        goto Cleanup;
        
    if (_fDie)
        goto Die;

    // step 2: advance _pNode

    if (parsescope != SCOPE_EMPTY)
    {
        Assert(pNode);
#ifdef NOPARSEADDREF
        CTreeNode::ReplacePtr(&_pNode, pNode);
#else
        _pNode = pNode;
#endif
        _cDepth += 1;
    }
        

    // step 3: notify empty element
    else
    {
        if (pel->WantEndParseNotification())
        {
            hr = THR(_aryPelEndParse.Append(pel));
            if (hr)
                goto Cleanup;

            pel->AddRef();
        }
    }
    

    // step 3: deal with pushing context stack

    if (phpc->_pfnHpxCreator)
    {
        hr = THR(PushHpx(phpc->_pfnHpxCreator, pel, pNode));
        if (hr)
            goto Cleanup;
            
        if (parsescope == SCOPE_EMPTY)
        {
            hr = THR(PopHpx());
            if (hr)
                goto Cleanup;
        }
    }

    // step 4: call EndElement for SCOPE_EMPTY elements
    // NOTE: this is needed so that the parse context can
    // advance any cached pointers

    if (parsescope == SCOPE_EMPTY)
    {
        CTreeNode * pNodeNew;

        hr = THR(_ctx._phpx->EndElement(&pNodeNew, pNode, pNode));
        if (hr)
            goto Cleanup;

        Assert( pNodeNew == _pNode );

#ifdef NOPARSEADDREF
        pNodeNew->NodeRelease();
#endif
    }

    // make a note if implicit children are needed
    if (phpc->_etagImplicitChild)
        _fImplicitChild = TRUE;


Cleanup:
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNode);
#endif
    
    RRETURN(hr);

Die:
    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::EndElement
//
//  Synopsis:   Closes pelEnd, notifies context if needed,
//              creates proxy chain below, and advances _pel
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::EndElement(CTreeNode *pNodeEnd)
{
    CTreeNode *pNodeNew = NULL;
    HRESULT hr = S_OK;

    TraceTag((tagParse, "End element   <%ls>", NameFromEtag(pNodeEnd->Tag())));

    // optimization: invalidate cached RequiredTextContainer

    if (HpcFromEtag(pNodeEnd->Tag())->_textscope != TEXTSCOPE_NEUTRAL)
        _fValidRTC = FALSE;

    // step 1: deal with popping the context stack

    if (pNodeEnd->Element() == _ctx._pelTop)
    {
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
    }

    // Step 1: notify the owning context that the element is ending

    // Ending within a context: our node should now be under the current context
#if DBG == 1 && 0
    if (_ctx._phpx->IsLeaf())
        AssertInsideContext(pNodeEnd);
#endif
    Assert(_pNode);

    // the context is now responsible for proxying
    hr = THR(_ctx._phpx->EndElement(&pNodeNew, _pNode, pNodeEnd));
    if (hr)
        goto Cleanup;
        
    if (_fDie)
        goto Die;

    _cDepth -= 1;

    // step 3: notify the element itself that it is ending (defered until we can execute).

    if (pNodeEnd->Element()->WantEndParseNotification())
    {
        hr = THR(_aryPelEndParse.Append(pNodeEnd->Element()));
        if (hr)
            goto Cleanup;

        pNodeEnd->Element()->AddRef();
    }

    // step 4: update _pNode

#ifdef NOPARSEADDREF
    _pNode->NodeRelease();
#endif
    _pNode = pNodeNew; // take ref
    pNodeNew = NULL;

Cleanup:

#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNodeNew);
#endif
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertLPointer
//
//  Synopsis:   Sets a flag so that the L pointer will be inserted
//              right before the next explicit end/begin/text
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertLPointer()
{
    _fDelayPointer = TRUE;

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertRPointer
//
//  Synopsis:   Immediately inserts a pointer
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertLPointerNow()
{
    Assert(_fDelayPointer);
    Assert(!_ptpL);
    Assert( _aryContextStack[0]._phpx );

    _fDelayPointer = FALSE;

    RRETURN(_ctx._phpx->InsertLPointer(&_ptpL, _pNode));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertRPointer
//
//  Synopsis:   Immediately inserts a pointer
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertRPointer()
{
    Assert(!_ptpR);
    Assert( _aryContextStack[0]._phpx );

    RRETURN(_ctx._phpx->InsertRPointer(&_ptpR, _pNode));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::GetPointers
//
//  Synopsis:   Gets CTreePos'es for the L and R pointers
//
//-------------------------------------------------------------------------
void
CHtmParse::GetPointers(CTreePos **pptpL, CTreePos **pptpR)
{
    (*pptpL) = _ptpL;
    (*pptpR) = _ptpR;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PushHpx
//
//  Synopsis:   Constructs and pushes a context
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::PushHpx(HRESULT (*pfnHpxCreator)(CHtmParseCtx **pphpx, CElement *pelTop, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse), CElement *pel, CTreeNode *pNode)
{
    HRESULT hr;
    CHtmParseCtx *phpxNew = NULL;
    
    TraceTag((tagParse, "Push Hpx for <%ls>", pel ? NameFromEtag(pel->Tag()) : _T("NULL") ));
    
    hr = THR((pfnHpxCreator)(&phpxNew, pel, _ctx._phpx, this));
    if (hr)
        goto Cleanup;

    hr = THR(phpxNew->Init());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    hr = THR(phpxNew->Prepare());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    hr = THR(_aryContextStack.AppendIndirect(&_ctx));
    if (hr)
        goto Cleanup;

    _ctx._phpx   = phpxNew;
    _ctx._pelTop = pel;

    phpxNew = NULL;
    
Cleanup:
    delete phpxNew; // Expected to be NULL
    RRETURN(hr);
    
Die:
    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PopHpx
//
//  Synopsis:   pops and destroys a context
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::PopHpx()
{
    HRESULT hr = S_OK;
    
    TraceTag((tagParse, "Pop Hpx for <%ls>", NameFromEtag(_etagLitCtx ? _etagLitCtx : _ctx._pelTop->Tag())));
    
    hr = THR(_ctx._phpx->Finish());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    if (_ctx._phpx->_fIgnoreSubsequent)
    {
        _fIgnoreInput = TRUE;
    }

    if (!_ctx._phpx->_fNeedExecute)
        delete _ctx._phpx;
    else
    {
        // processing one token should not cause multiple scripts to commit (even EOF)
        // Assert(!_phpxExecute); - no longer true with nested OBJECT tags
        
        delete _phpxExecute;
        _phpxExecute = _ctx._phpx;
    }

    _ctx = _aryContextStack[_aryContextStack.Size()-1];
    _aryContextStack.Delete(_aryContextStack.Size()-1);
    
Cleanup:
    RRETURN(hr);
    
Die:
    hr = E_ABORT;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Die
//
//  Synopsis:   Sets _fDie; next time we look, we'll return E_ABORT.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::Die()
{
    _fDie = TRUE;
    return(S_OK);
}


#if DBG == 1

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertNoneProhibitedImpl
//
//  Synopsis:   Asserts that no elements on the stack are prohibited
//              containers for the proposed etag.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertNoneProhibitedImpl(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;

    phpc = HpcFromEtag(etag);

    if (phpc->_atagProhibitedContainers)
    {
        pNode = FindContainer(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers);
        AssertSz(!pNode, "Encountered prohibited container (DTD error)");
    }
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertAllRequiredImpl
//
//  Synopsis:   Asserts that all required elements are on the stack
//              for inserting the proposed etag.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertAllRequiredImpl(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;

    phpc = HpcFromEtag(etag);

    if (phpc->_atagRequiredContainers)
    {
        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        AssertSz(pNode, "Missing required container (DTD error)");
    }
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertNoEndContainteesImpl
//
//  Synopsis:   Asserts that all the specified element is not the end
//              container for any elements on the stack.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertNoEndContaineesImpl(CTreeNode *pNode)
{
    ELEMENT_TAG etag;
    BOOL fNested;
    CTreeNode *pNodeScan;
    const CHtmlParseClass *phpc;

    etag = pNode->Tag();
    fNested = (HpcFromEtag(etag)->_scope == SCOPE_NESTED);

    for (pNodeScan = _pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan == pNode)
            return;

        phpc = HpcFromEtag(pNodeScan->Tag());

        AssertSz(
            (ETAG_GENERIC != etag && etag != pNodeScan->Tag()) ||
            (ETAG_GENERIC == etag &&
                ((0 != StrCmpI(pNode->_pElement->TagName(),   pNodeScan->_pElement->TagName())) ||
                 (0 != StrCmpI(pNode->_pElement->NamespaceHtml(), pNodeScan->_pElement->NamespaceHtml())))),
            "Element cannot be closed: same tag below on stack");

        AssertSz(!IsEtagInSet(etag, phpc->_atagEndContainers),
            "Element cannot be closed: end containee below on stack");
        AssertSz(!fNested || phpc->_scope != SCOPE_NESTED,
            "Element cannot be closed: nested element below on stack");
    }

    AssertSz(0, "Element cannot be closed: element not on stack");
}


//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertOnStackImpl
//
//  Synopsis:   Asserts that
//              1. the specified element is above _pel.
//              2. the specified element is not a proxy of elts above _pel
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertOnStackImpl(CTreeNode *pNode)
{
    CTreeNode *pNodeScan;

    for (pNodeScan = _pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan == pNode)
            return;
        AssertSz(DifferentScope(pNodeScan, pNode), "Non first context node on parser stack");
    }

    AssertSz(0, "Node not on parser stack");
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertInsideContextImpl
//
//  Synopsis:   Asserts that
//              1. the specified element is under _pelTop.
//              2. the specified element is not under a proxy of _pelTop
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertInsideContextImpl(CTreeNode *pNode)
{
    CTreeNode *pNodeScan;

    if (!_ctx._pelTop)
        return;

    for (pNodeScan = pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan->Element() == _ctx._pelTop)
            return;
    }

    AssertSz(0, "Node not inside context");
}

#endif // DBG

//+------------------------------------------------------------------------
//
//  Function:   ScanNodeList
//
//  Synopsis:   Like FindContainer; used by the ValidateNodeList function
//
//-------------------------------------------------------------------------

CTreeNode **
ScanNodeList(CTreeNode **apNodeStack, long cNodeStack,
                const ELEMENT_TAG *pSetMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode **ppNode;
    long c;

    for (ppNode = apNodeStack + cNodeStack - 1, c = cNodeStack; c; ppNode -= 1, c -= 1)
    {
        if (IsEtagInSet((*ppNode)->Tag(), pSetMatch))
            return ppNode;

        if (IsEtagInSet((*ppNode)->Tag(), pSetStop))
            return NULL;
    }

    return NULL;
}

//+------------------------------------------------------------------------
//
//  Function:   ValidateNodeList
//
//  Synopsis:   Used by the paster to recognize if two element chains
//              can be spliced together (and if not, which two elements
//              conflict with each other.)
//
//              If there is a conflict, returns the two indices to
//              conflicting members in the array.
//
//-------------------------------------------------------------------------

static inline BOOL
RequiresFirstContextContainers ( ELEMENT_TAG etag )
{
    switch ( etag )
    {
    case ETAG_BASE :
    case ETAG_MAP :
    case ETAG_FORM :
    case ETAG_NOEMBED_OFF :
    case ETAG_NOFRAMES_OFF :
    case ETAG_NOSCRIPT_OFF :
        return TRUE;
        
    default:
        return FALSE;
    }
}

HRESULT
ValidateNodeList(
    CTreeNode ** apNode,    // array of tree Nodes
    long         cNode,     // length of apNode array
    long         cNodeOk,   // number of elts of apElement array already okayed
    BOOL         fContain,  // should we validate required containers or not
    long *       piT,       // index of top-conflicting elt
    long *       piB)       // index of bottom-conflicting elt (> top index)
{
    CTreeNode **ppNodeT = NULL, **ppNodeB = NULL;
    const CHtmlParseClass *phpc;
    long c;

    // First check for a container that has literal tokenizing rules
    // (<XMP>, <SCRIPT>, <TITLE>, <TEXTAREA>)

    ppNodeB = apNode + cNode - 2;
    ppNodeT = apNode + max( (LONG)(cNodeOk - 1), 0L );

    for ( ; ppNodeB >= ppNodeT ; --ppNodeB )
    {
        if (TagDescFromEtag((*ppNodeB)->Tag())->HasFlag(TAGDESC_LITERALTAG))
        {
            ppNodeT = ppNodeB;
            ppNodeB++;
            goto Conflict;
        }
    }

    // Then check for parsing rules
    
    for (ppNodeB = apNode + cNodeOk, c = cNode - cNodeOk; c; c -= 1, ppNodeB += 1)
    {
        phpc = HpcFromEtag((*ppNodeB)->Tag());

        if (phpc->_atagMaskingContainers)
        {
            ppNodeT = ScanNodeList(apNode, ppNodeB - apNode, phpc->_atagMaskingContainers, phpc->_atagBeginContainers);
            if (ppNodeT)
                goto Conflict;
        }
        
        if (phpc->_atagProhibitedContainers)
        {
            ppNodeT = ScanNodeList(apNode, ppNodeB - apNode, phpc->_atagProhibitedContainers, phpc->_atagBeginContainers);
            if (ppNodeT)
                goto Conflict;
        }

#if 0 // Commented out to fix 58326.
      // Don't check TEXTSCOPE because it's only used to generate TCs around
      // textlike tags in tables in the parser; these are actually optional
      // and shouldn't be needed during paste.
      
        if (phpc->_fTextlike)
        {
            for (ppNodeT = ppNodeB - 1, c2 = ppNodeB - apNode; c2; c2 -= 1, ppNodeT -= 1)
            {
                phpc2 = HpcFromEtag((*pNodeT)->Tag());

                if (phpc2->_textscope == TEXTSCOPE_INCLUDE)
                    break;

                if (phpc2->_textscope == TEXTSCOPE_EXCLUDE)
                    goto Conflict;
            }
        }
#endif

        //
        // If desired, validate required containers.
        //
        
        if (fContain && phpc->_atagRequiredContainers &&
            ((*ppNodeB)->IsFirstBranch() || !RequiresFirstContextContainers( (*ppNodeB)->Tag() )))
        {
            ppNodeT =
                ScanNodeList(
                    apNode, ppNodeB - apNode, phpc->_atagRequiredContainers,
                    phpc->_atagBeginContainers );
            
            if (!ppNodeT)
                goto Conflict;
        }
    }

    *piT = *piB = 0;

    return S_OK;

Conflict:

    *piT = ppNodeT ? ppNodeT - apNode : 0;
    *piB = ppNodeB ? ppNodeB - apNode : 0;

    return S_FALSE;
}


#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmtag.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmltag.cxx
//
//  Contents:   CHtmTag
//
//----------------------------------------------------------------------------


#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_CBUFSTR_HXX_
#define X_CBUFSTR_HXX_
#include "cbufstr.hxx"
#endif

#ifndef X_BUFFER_HXX_
#define X_BUFFER_HXX_
#include "buffer.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmTagStm, "Dwn", "Trace CHtmTagStm")

// Performance Meters ---------------------------------------------------------

MtDefine(CHtmTagStm, Dwn, "CHtmTagStm")
MtDefine(CHtmTagStm_ptextbuf, CHtmTagStm, "CHtmTagStm::_ptextbuf")
MtDefine(CHtmTagStm_ptagbuf, CHtmTagStm, "CHtmTagStm::_ptagbuf")
MtDefine(CHtmTagQueue, Dwn, "CHtmTagQueue")

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::AttrFromName
//
//  Synopsis:   name->CAttr*
//
//-------------------------------------------------------------------------

CHtmTag::CAttr *
CHtmTag::AttrFromName(const TCHAR * pchName)
{
    Assert(pchName);

    int i = _cAttr;

    // optimize for zero attrs
    if (i && pchName)
    {
        CAttr *pattr = _aAttr;
        for (; i--; pattr++)
        {
            if (!StrCmpIC(pattr->_pchName, pchName))
            {
                return pattr;
            }
        }
    }
    return NULL;
}

#ifdef V4FRAMEWORK

HRESULT CHtmTag::ToBSTR ( BSTR *pBstr )
{
    // Organize the tags into a binary buffer made up of an array of bytes organized as
    //<[4BYTE]NAMELENGTH,nl><[nlBYTEs]NAME><[4BYTE]VALUELENGTH,vl><[vlBYTEs]VALUE>
    ULONG i,j,nLength;
    HRESULT hr;
    BYTE *pBuffer;

    // Figure out the max length needed
    for ( i = 0,nLength = 0 ; i < _cAttr ; i++ )
    {
        nLength += (sizeof(ULONG)*2)/sizeof(TCHAR); // name count + value count
        nLength += _aAttr [ i ]._cchVal;
        nLength += _aAttr [ i ]._cchName;
    }

    nLength += sizeof(ULONG)/sizeof(TCHAR); // preceding count

    hr = FormsAllocStringLen (NULL, nLength, pBstr );
    if ( hr )
        goto Cleanup;

    pBuffer = (BYTE *)*pBstr;
    *(ULONG*)pBuffer = (ULONG)_cAttr;
    pBuffer += sizeof(ULONG);

    // Fill the buffer
    for ( i = 0 ; i < _cAttr ; i++ )
    {
        *(ULONG*)pBuffer = _aAttr [ i ]._cchName;
        pBuffer += sizeof(ULONG);
        for ( j = 0 ; j < _aAttr [ i ]._cchName ; j++ )
        {
            *((TCHAR*)pBuffer) = _aAttr [ i ]._pchName [ j ];
            pBuffer += sizeof(TCHAR);
        }
        *(ULONG*)pBuffer = _aAttr [ i ]._cchVal;
        pBuffer += sizeof(ULONG);
        for ( j = 0 ; j < _aAttr [ i ]._cchVal ; j++ )
        {
            *((TCHAR*)pBuffer) = _aAttr [ i ]._pchVal [ j ];
            pBuffer += sizeof(TCHAR);
        }
    }
Cleanup:
    RRETURN(hr);
}

#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::ValFromName
//
//  Synopsis:   name->val
//              Returns TRUE if attribute named by pchName is present.
//              Returns pointer to value string in *ppchVal (NULL if no
//              value is present)
//
//-------------------------------------------------------------------------
BOOL
CHtmTag::ValFromName(const TCHAR * pchName, TCHAR **ppchVal)
{
    CAttr * pattr = AttrFromName(pchName);
    if (pattr)
    {
        *ppchVal = pattr->_pchVal;
        return TRUE;
    }
    else
    {
        *ppchVal = NULL;
        return FALSE;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::GetXmlNamespace
//
//  Synopsis:   enumerator of "xmlns:foo" declarations
//
//-------------------------------------------------------------------------

LPTSTR
CHtmTag::GetXmlNamespace(int * pIdx)
{
    Assert (pIdx);

    if (_cAttr)
    {
        CAttr * pAttr;

        for (pAttr = &(_aAttr[*pIdx]); (*pIdx) < _cAttr; (*pIdx)++, pAttr++)
        {
            if (_tcsnipre(_T("xmlns:"), 6, pAttr->_pchName, -1))
                return pAttr->_pchName + 6;
        }
    }
    return NULL;
}

#if 0

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::SaveAsText
//
//  Synopsis:   Creates a string containing the HTML of the tag.
//
//              The tag is recreated
//
//-------------------------------------------------------------------------
HRESULT
CHtmTag::SaveAsText(CBufferedStr *pbufstrOut)
{
    HRESULT hr;
    int     i;
    CAttr   * pattr;

    if (_etag == ETAG_RAW_COMMENT)
    {
        hr = THR(pbufstrOut->QuickAppend(_pch));
        goto Cleanup;
    }

    // In 5.0 the "/" does not exist in the _pch of an unknown tag

    if (IsEnd())
        hr = THR(pbufstrOut->QuickAppend(_T("</")));
    else
        hr = THR(pbufstrOut->QuickAppend(_T("<")));

    if (hr)
        goto Cleanup;

    Assert( _etag != ETAG_GENERIC_NESTED_LITERAL );
    if (_etag == ETAG_UNKNOWN || _etag == ETAG_GENERIC || _etag == ETAG_GENERIC_LITERAL )
        hr = THR(pbufstrOut->QuickAppend(_pch));
    else
        hr = THR(pbufstrOut->QuickAppend(NameFromEtag((ELEMENT_TAG)_etag)));

    if (hr)
        goto Cleanup;

    for (i = _cAttr, pattr = _aAttr; i--; ++pattr)
    {
        hr = THR(pbufstrOut->QuickAppend(_T(" ")));
        if (hr)
            goto Cleanup;

        hr = THR(pbufstrOut->QuickAppend(pattr->_pchName));
        if (hr)
            goto Cleanup;

        if (pattr->_pchVal)
        {
            hr = THR(pbufstrOut->QuickAppend(_T("=\"")));
            if (hr)
                goto Cleanup;

            hr = THR(pbufstrOut->QuickAppend(pattr->_pchVal));
            if (hr)
                goto Cleanup;

            hr = THR(pbufstrOut->QuickAppend(_T("\"")));
            if (hr)
                goto Cleanup;
        }
    }

    if (IsEmpty())
        hr = THR(pbufstrOut->QuickAppend(_T(" />")));
    else
        hr = THR(pbufstrOut->QuickAppend(_T(">")));

Cleanup:
    RRETURN(hr);
}

#endif

// CHtmTagStm -----------------------------------------------------------------

CHtmTagStm::~CHtmTagStm()
{
    TEXTBUF *   ptextbuf;
    TAGBUF *    ptagbuf;

    while ((ptextbuf = _ptextbufHead) != NULL)
    {
        _ptextbufHead = ptextbuf->ptextbufNext;
        MemFree(ptextbuf);
    }

    while ((ptagbuf = _ptagbufHead) != NULL)
    {
        _ptagbufHead = ptagbuf->ptagbufNext;
        MemFree(ptagbuf);
    }

    if (_pdsSource)
    {
        _pdsSource->Release();
    }

    MemFree(_ptextbufWrite);
}

HRESULT
CHtmTagStm::AllocTextBuffer(UINT cch, TCHAR ** ppch)
{
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::AllocBuffer (cch=%ld)", cch);

    TEXTBUF * ptextbuf = (TEXTBUF *)MemAlloc(Mt(CHtmTagStm_ptextbuf), offsetof(TEXTBUF, ach) + cch * sizeof(TCHAR));
    HRESULT hr;

    if (ptextbuf == NULL)
    {
        *ppch = NULL;
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if (_ptextbufWrite)
    {
        _ptextbufWrite->ptextbufNext = NULL;

        g_csDwnStm.Enter();

        if (_ptextbufTail == NULL)
        {
            _ptextbufHead = _ptextbufWrite;
            _ptextbufTail = _ptextbufWrite;
        }
        else
        {
            _ptextbufTail->ptextbufNext = _ptextbufWrite;
            _ptextbufTail = _ptextbufWrite;
        }

        _ptextbufWrite = NULL;

        g_csDwnStm.Leave();

        _fNextBuffer = TRUE;
    }

    _ptextbufWrite = ptextbuf;

    *ppch = ptextbuf->ach;
    hr = S_OK;

Cleanup:
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::AllocBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmTagStm::GrowTextBuffer(UINT cch, TCHAR ** ppch)
{
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::GrowBuffer (cch=%ld)", cch);

    Assert(_ptextbufWrite != NULL);

    HRESULT hr;

    hr = MemRealloc(Mt(CHtmTagStm_ptextbuf), (void **)&_ptextbufWrite, offsetof(TEXTBUF, ach) + cch * sizeof(TCHAR));

    if (hr == S_OK)
    {
        *ppch = _ptextbufWrite->ach;
    }

    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::GrowBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

void
CHtmTagStm::DequeueTextBuffer()
{
    TEXTBUF * ptextbuf = _ptextbufHead;

    g_csDwnStm.Enter();

    _ptextbufHead = ptextbuf->ptextbufNext;

    if (_ptextbufHead == NULL)
        _ptextbufTail = NULL;

    g_csDwnStm.Leave();

    MemFree(ptextbuf);
}

HRESULT
CHtmTagStm::AllocTagBuffer(UINT cbNeed, void * pvCopy, UINT cbCopy)
{
    PerfDbgLog2(tagHtmTagStm, this, "+CHtmTagStm::AllocTagBuffer (cbNeed=%ld,cbCopy=%ld)", cbNeed, cbCopy);

    TAGBUF *    ptagbuf = _ptagbufTail;
    TAGBUF **   pptagbuf;
    HRESULT     hr = S_OK;

    if (_cbTagBuffer == 0)
        _cbTagBuffer = 256;
    else if (_cbTagBuffer < 4096)
        _cbTagBuffer <<= 1;

    cbNeed = (cbNeed + (_cbTagBuffer - 1)) & ~(_cbTagBuffer - 1);

    if (ptagbuf && ptagbuf->phtWrite == (CHtmTag *)ptagbuf->ab)
    {
        // Realloc the current buffer to make the entire tag fit

        hr = THR(MemRealloc(Mt(CHtmTagStm_ptagbuf), (void **)&ptagbuf, offsetof(TAGBUF, ab) + cbNeed));
        if (hr)
            goto Cleanup;

        // Update the queue pointers to point at the new tag buffer if it moved

        if (ptagbuf != _ptagbufTail)
        {
            g_csDwnStm.Enter();

            for (pptagbuf = &_ptagbufHead; *pptagbuf != _ptagbufTail; pptagbuf = &(*pptagbuf)->ptagbufNext) ;
            *pptagbuf = ptagbuf;

            _ptagbufTail = ptagbuf;

            g_csDwnStm.Leave();
        }
    }
    else
    {
        ptagbuf = (TAGBUF *)MemAlloc(Mt(CHtmTagStm_ptagbuf), offsetof(TAGBUF, ab) + cbNeed);

        if (ptagbuf == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        ptagbuf->ptagbufNext = NULL;

        if (cbCopy)
        {
            memcpy(ptagbuf->ab, pvCopy, cbCopy);
        }

        g_csDwnStm.Enter();

        if (_ptagbufTail == NULL)
            _ptagbufHead = ptagbuf;
        else
            _ptagbufTail->ptagbufNext = ptagbuf;

        _ptagbufTail = ptagbuf;

        g_csDwnStm.Leave();
    }

    ptagbuf->phtWrite = (CHtmTag *)ptagbuf->ab;
    _cbLeft = cbNeed;

Cleanup:
    PerfDbgLog1(tagHtmTagStm, this, "-CHtmTagStm::AllocTagBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

CHtmTag *
CHtmTagStm::DequeueTagBuffer()
{
    TAGBUF * ptagbuf = _ptagbufHead;

    g_csDwnStm.Enter();

    _ptagbufHead = ptagbuf->ptagbufNext;

    Assert(_ptagbufHead);

    g_csDwnStm.Leave();

    MemFree(ptagbuf);

    return((CHtmTag *)_ptagbufHead->ab);
}

#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

HRESULT
CHtmTagStm::WriteTag(ELEMENT_TAG etag, TCHAR * pch, ULONG cch, BOOL fAscii)
{
    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;
    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + CHtmTag::ComputeSize(FALSE, 0));
    _cbLeft -= CHtmTag::ComputeSize(FALSE, 0);

    pht->Reset();
    pht->SetTag(etag);
    pht->SetPch(pch);
    pht->SetCch(cch);

    if (fAscii)
        pht->SetAscii();

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTag(ELEMENT_TAG etag, ULONG ul1, ULONG ul2)
{
    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;
    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + CHtmTag::ComputeSize(FALSE, 0));
    _cbLeft -= CHtmTag::ComputeSize(FALSE, 0);

    pht->Reset();
    pht->SetTag(etag);
    pht->SetLine(ul1);
    pht->SetOffset(ul2);

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTagBeg(ELEMENT_TAG etag, CHtmTag ** ppht)
{
    AssertSz (!_fWritingDbg, "Disbalance of WriteTagBeg and WriteTagEnd/WriteTagAbort");

#if DBG == 1
    _fWritingDbg = TRUE;
#endif

    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;

    pht->Reset();
    pht->SetTag(etag);

    *ppht = pht;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTagGrow(CHtmTag ** ppht, CHtmTag::CAttr ** ppAttr)
{
    CHtmTag *   pht     = *ppht;
    UINT        cAttr   = pht->GetAttrCount();
    UINT        cbGrow  = CHtmTag::ComputeSize(FALSE, cAttr + 1);

    Assert(_ptagbufTail);
    Assert(_ptagbufTail->phtWrite == pht);
    Assert(!pht->IsTiny());

    if (_cbLeft < cbGrow)
    {
        HRESULT hr = THR(AllocTagBuffer(cbGrow, pht, cbGrow - sizeof(CHtmTag::CAttr)));
        if (hr)
            RRETURN(hr);

        *ppht = pht = _ptagbufTail->phtWrite;
    }

    pht->SetAttrCount(cAttr + 1);

    *ppAttr = pht->GetAttr(cAttr);

    return(S_OK);
}

void
CHtmTagStm::WriteTagEnd()
{
    Assert(_ptagbufTail);

    CHtmTag *   pht     = _ptagbufTail->phtWrite;
    UINT        cbTag   = pht->ComputeSize();

    Assert(_cbLeft >= cbTag);

    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + cbTag);
    _cbLeft -= cbTag;

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

#if DBG == 1
    _fWritingDbg = FALSE;
#endif
}

void
CHtmTagStm::WriteEof(HRESULT hrEof)
{
    PerfDbgLog1(tagHtmTagStm, this, "+CHtmTagStm::WriteEof (hrEof=%lX)", hrEof);

    if (!_fEof || hrEof)
    {
        _hrEof   = hrEof;
        _fEof    = TRUE;
        _fSignal = TRUE;
        Signal();
    }

    PerfDbgLog(tagHtmTagStm, this, "-CHtmTagStm::WriteEof");
}

HRESULT
CHtmTagStm::WriteSource(TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvTo;
    ULONG cbTo;
    ULONG cchCopy;

    if (!_pdsSource)
    {
        _pdsSource = new CDwnStm();
        if (!_pdsSource)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

    while (cch)
    {
        hr = THR(_pdsSource->WriteBeg(&pvTo, &cbTo));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbTo / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        memcpy(pvTo, pch, cchCopy * sizeof(TCHAR));

        _pdsSource->WriteEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
        pch += cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTagStm::ReadSource(CBuffer2 *pBuffer, ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvFrom;
    ULONG cbFrom;
    ULONG cchCopy;

    Assert(!cch || _pdsSource);
    if (cch && !_pdsSource)
        return E_FAIL;

    while (cch)
    {
        hr = THR(_pdsSource->ReadBeg(&pvFrom, &cbFrom));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbFrom / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        hr = THR(pBuffer->Append((TCHAR *)pvFrom, cchCopy));
        if (hr)
            goto Cleanup;

        _pdsSource->ReadEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTagStm::SkipSource(ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvFrom;
    ULONG cbFrom;
    ULONG cchCopy;

    Assert(!cch || _pdsSource);
    if (cch && !_pdsSource)
        return E_FAIL;

    while (cch)
    {
        hr = THR(_pdsSource->ReadBeg(&pvFrom, &cbFrom));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbFrom / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        _pdsSource->ReadEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

void
CHtmTagStm::Signal()
{
    if (_fSignal)
    {
        _fSignal = FALSE;
        super::Signal();
    }
}

CHtmTag *
CHtmTagStm::ReadTag(CHtmTag * pht)
{
    Assert(_chtRead <= _chtWrite);

    if (_hrEof || _chtRead == _chtWrite)
    {
        return(NULL);
    }

    Assert(_ptagbufHead);

    if (pht == NULL)
    {
        pht = _phtRead;

        if (pht == NULL)
        {
            pht = (CHtmTag *)_ptagbufHead->ab;
            goto gottag;
        }
    }

    Assert(pht);
    Assert(pht == _phtRead);
    Assert(pht >= (CHtmTag *)_ptagbufHead->ab);
    Assert(pht < _ptagbufHead->phtWrite);

    pht = (CHtmTag *)((BYTE *)pht + pht->ComputeSize());

    Assert(pht <= _ptagbufHead->phtWrite);

    if (pht == _ptagbufHead->phtWrite)
    {
        pht = DequeueTagBuffer();
    }

    if (pht->IsNextBuf())
    {
        DequeueTextBuffer();
    }

gottag:

    _phtRead = pht;
    _chtRead += 1;

    return(pht);
}

CHtmTag *
CHtmTagStm::ScanTag(CHtmTag * pht)
{
    Assert(_chtScan <= _chtWrite);

    if( _hrEof || _chtScan == _chtWrite )
    {
        return NULL;
    }

    if( !pht )
    {
        // Start from the beginning
        pht = (CHtmTag *)_ptagbufHead->ab;
        _ptagbufScan = _ptagbufHead;
        _chtScan = 0;
    }
    else
    {
        // Continue on to the next tag
        pht = (CHtmTag *)((BYTE *)pht + pht->ComputeSize());
    }

    Assert( _ptagbufScan &&
            pht >= (CHtmTag *)_ptagbufScan->ab &&
            pht <=  _ptagbufScan->phtWrite );
    Assert( pht );

    // If we've gone past the end of this buffer, advance to the next
    if( pht == _ptagbufScan->phtWrite)
    {
        _ptagbufScan = _ptagbufScan->ptagbufNext;

        Assert( _ptagbufScan );

        pht = (CHtmTag *)_ptagbufScan->ab;
    }

    _chtScan += 1;
    return pht;
}

HRESULT
CHtmTagQueue::EnqueueTag(CHtmTag *pht)
{
    TCHAR *pch;
    ULONG cch;
    ULONG c;
    CHtmTag *phtTo = NULL;
    CHtmTag::CAttr *pAttr;
    CHtmTag::CAttr *pAttrTo = NULL;
    HRESULT hr = S_OK;

    Assert(!pht->IsSource()); // not needed, not handled

    // Step 1: compute the amount of text needed to copy tag

    cch = 0;

    Assert( !pht->Is(ETAG_GENERIC_NESTED_LITERAL) );
    if (pht->Is(ETAG_RAW_TEXT) ||
        pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE) ||
        pht->Is(ETAG_UNKNOWN) ||
        pht->Is(ETAG_GENERIC) ||
        pht->Is(ETAG_GENERIC_LITERAL) ||
        pht->Is(ETAG_GENERIC_BUILTIN))
    {
        cch += pht->GetCch() + 1;
    }

    c = pht->GetAttrCount();

    if (c)
    {
        for (pAttr = pht->GetAttr(0); c; c--, pAttr++)
        {
            cch += pAttr->_cchName + 1;

            if (pAttr->_pchVal)
                cch += pAttr->_cchVal + 1;
        }
    }

    // Step 2: allocate tag, copy static data

    hr = THR(WriteTagBeg(pht->GetTag(), &phtTo));
    if (hr)
        goto Cleanup;

    phtTo->SetPch(NULL);  // will be fixed up in step 3
    phtTo->SetCch(0);

    if (pht->Is(ETAG_SCRIPT) ||
        pht->Is(ETAG_RAW_CODEPAGE) ||
        pht->Is(ETAG_RAW_DOCSIZE))
    {
        phtTo->SetLine(pht->GetLine()); // also copies codepage, docsize
        phtTo->SetOffset(pht->GetOffset());
    }

    if (pht->IsTiny())
    {
        Assert(pht->GetTag() > ETAG_UNKNOWN && pht->GetTag() < ETAG_GENERIC
            || pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL));
        Assert(pht->GetAttrCount() == 0);
        Assert(!cch);
        phtTo->SetTiny();
    }

    if (pht->IsRestart())
        phtTo->SetRestart();

    if (pht->IsEmpty())
        phtTo->SetEmpty();

    if (pht->IsEnd())
        phtTo->SetEnd();

    if (pht->IsAscii())
        phtTo->SetAscii();

    // Step 3: allocate and copy text/attr/val

    if (cch)
    {
        hr = THR(AllocTextBuffer(cch, &pch));
        if (hr)
            goto Cleanup;

        if (pht->Is(ETAG_RAW_TEXT) ||
            pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE) ||
            pht->Is(ETAG_UNKNOWN) ||
            pht->Is(ETAG_GENERIC) ||
            pht->Is(ETAG_GENERIC_LITERAL) ||
            pht->Is(ETAG_GENERIC_BUILTIN))
        {
            phtTo->SetPch(pch);
            memcpy(pch, pht->GetPch(), pht->GetCch() * sizeof(TCHAR));
            pch += pht->GetCch();
            *pch = _T('\0');
            pch++;

            if (pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE))
            {
                phtTo->SetCch(pht->GetCch());
            }
        }

        c = pht->GetAttrCount();

        if (c)
        {
            for (pAttr = pht->GetAttr(0); c; c--, pAttr++)
            {
                hr = THR(WriteTagGrow(&phtTo, &pAttrTo));
                if (hr)
                    goto Cleanup;

                // Copy all fields
                *pAttrTo = *pAttr;

                // Fixup pointers
                pAttrTo->_pchName = pch;
                memcpy(pch, pAttr->_pchName, pAttr->_cchName * sizeof(TCHAR));
                pch += pAttr->_cchName;
                *pch = _T('\0');
                pch++;

                if (pAttr->_pchVal)
                {
                    pAttrTo->_pchVal = pch;
                    memcpy(pch, pAttr->_pchVal, pAttr->_cchVal * sizeof(TCHAR));
                    pch += pAttr->_cchVal;
                    *pch = _T('\0');
                    pch++;
                }
            }
        }
    }

    WriteTagEnd();

    _cEnqueued++;

Cleanup:
    RRETURN(hr);
}

CHtmTag *
CHtmTagQueue::DequeueTag()
{
    CHtmTag *pht;

    Assert(_cEnqueued);

    _cEnqueued--;

    pht = ReadTag(NULL);

    Assert(pht);

    return pht;
}

HRESULT
CHtmTagQueue::ParseAndEnqueueTag(TCHAR *pch, ULONG cch)
{
    TCHAR *pchCopy;
    TCHAR ch;
    HRESULT hr;

    if (cch < 2)
        return E_FAIL;

    if (*pch != _T('<') || *(pch + cch - 1) != _T('>'))
        return E_FAIL;

    // Don't deal with end-tags, etc for now

    ch = *(pch + 1);

    if (!ISNAMCH(ch))
        return E_FAIL;

    hr = THR(AllocTextBuffer(cch, &pchCopy));
    if (hr)
        goto Cleanup;

    memcpy(pchCopy, pch, cch * sizeof(TCHAR));

    hr = THR(CHtmPre::DoTokenizeOneTag(pchCopy, cch, this, NULL, 0, 0, FALSE, NULL));
    if (hr)
        goto Cleanup;

    _cEnqueued += 1;

Cleanup:
    RRETURN(hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Note:       If the etag is ETAG_NULL, the the string contains the name
//              of the tag to create (like "h1") or it can contain an
//              actual tag (like "<h1 foo=bar>").
//
//              If etag is not ETAG_NULL, then the string contains the
//              arguments for the new element.
//
//----------------------------------------------------------------------------

HRESULT
CMarkup::CreateElement (
    ELEMENT_TAG etag, CElement * * ppElementNew, TCHAR * pch, long cch )
{
    HRESULT hr = S_OK;
    CHtmTag ht, * pht = NULL;
    TCHAR * pchTag = NULL;
    long    cchTag = 0;
    CStr    strTag;     // In case we have to build "<name attrs>"
    CHtmTagQueue * phtq = NULL;

    ht.Reset();

    Assert( ppElementNew );
    Assert( etag != ETAG_ROOT );

    *ppElementNew = NULL;

    //
    // Here we check for the various kinds of input to this function.
    //
    // After this checking, we will either have pht != NULL which is
    // ready for use to pass to create element, or we will have a string
    // (pchTag, cchTag) which is appropriate for passing to the 'parser'
    // for creating an element.
    //

    if (etag != ETAG_NULL)
    {
        if (!pch || cch <= 0)
        {
            pht = & ht;
        }
        else
        {
            const TCHAR * pchName = NameFromEtag( etag );

            if (!pchName || !*pchName)
            {
                pht = & ht;
            }
            else
            {
                hr = THR( strTag.Append( _T("<"), 1 ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( pchName ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( _T(" "), 1 ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( pch, cch ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( _T(">"), 1 ) );

                if (hr)
                    goto Cleanup;

                pchTag = strTag;
                cchTag = strTag.Length();
            }
        }

        if (pht)
        {
            Assert( pht == & ht );
            ht.Reset();
            ht.SetTag( etag );
        }
    }
    else
    {
        if (pch && cch > 2 && *pch == _T('<'))
        {
            pchTag = pch;
            cchTag = cch;
        }
        else
        {
            pht = & ht;
            pht->Reset();
            pht->SetPch(pch);
            pht->SetCch(cch);
            ht.SetTag( EtagFromName( pch, cch ) );
        }
    }

    //
    //
    //

    if (!pht && pchTag && cchTag)
    {
        Assert( *pchTag == _T('<') );

        phtq = new CHtmTagQueue;

        if (!phtq)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR( phtq->ParseAndEnqueueTag( pchTag, cchTag ) );

        if (hr)
            goto Cleanup;

        pht = phtq->DequeueTag();
    }

    if (!pht)
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    if (pht->GetTag() == ETAG_NULL)
    {
        BOOL                fQueryHost;
        CExtendedTagDesc *  pDesc;

        {
            CTagNameCracker     c(pht->GetPch());
            
            pDesc = GetExtendedTagDesc(c._pchNamespace, c._pchTagName, /* fEnsure = */TRUE, &fQueryHost);
        }

        // If we're supposed to query, then give them a chance to add the tag.
        if( !pht->IsEnd() && fQueryHost )
        {
            pht->SetTag(ETAG_RAW_RESOLVE);
            Assert( _pDoc->_pExtendedTagTableHost );

            IGNORE_HR( _pDoc->_pExtendedTagTableHost->ResolveUnknownTag( pht ) );

            {
                CTagNameCracker     c(pht->GetPch());
            
                pDesc = GetExtendedTagDesc(c._pchNamespace, c._pchTagName, TRUE);
            }

        }
        if (pDesc)
        {
            // Normally the tokenizer would do this conversion, but we don't have one.
            if( pDesc->_etagBase == ETAG_GENERIC_NESTED_LITERAL )
            {
                pht->SetTag( ETAG_GENERIC_LITERAL );
            }
            else
            {
                pht->SetTag(pDesc->_etagBase);
            }
            pht->SetExtendedTag();
        }
        else
            pht->SetTag( ETAG_UNKNOWN );


        ht.SetPch( pch );
        ht.SetCch( cch );
    }

    pht->SetDynamic();

    hr = THR(::CreateElement(pht, ppElementNew, Doc(), this, NULL, INIT2FLAG_EXECUTE));
    if (hr)
        goto Cleanup;

    // For anyone that actually HAS an end tag, make it look like we saw one.
    if ( HpcFromEtag((*ppElementNew)->Tag())->_scope != SCOPE_EMPTY )
        (*ppElementNew)->_fExplicitEndTag = TRUE;

Cleanup:

    if (phtq)
        phtq->Release();

    RRETURN( hr );
}


#if DBG!=1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmload.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmload.cxx
//
//  Contents:   CHtmCtx
//              CHtmInfo
//              CHtmLoad
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifdef WIN16
#define MB_PRECOMPOSED   0
#endif

BOOL IsSpecialUrl(LPCTSTR pchURL);

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmInfo,   "Dwn", "Trace CHtmInfo")
PerfDbgTag(tagHtmLoad,   "Dwn", "Trace CHtmLoad");

MtDefine(CHtmCtx, Dwn, "CHtmCtx")
MtDefine(CHtmInfo, Dwn, "CHtmInfo")
MtDefine(CHtmInfoGetFile, CHtmInfo, "CHtmInfo::GetFile")
MtDefine(CHtmInfoGetPretransformedFile, CHtmInfo, "CHtmInfo::GetPretransformedFile")
MtDefine(CHtmLoad, Dwn, "CHtmLoad")
MtDefine(CHtmLoad_aryDwnCtx_pv, CHtmLoad, "CHtmLoad::_aryDwnCtx::_pv")

// CHtmCtx --------------------------------------------------------------------

void
CHtmCtx::SetLoad(BOOL fLoad, DWNLOADINFO * pdli, BOOL fReload)
{
    HTMLOADINFO * phli = (HTMLOADINFO *)pdli;

    super::SetLoad(fLoad, pdli, fReload);

    // Handle synchronous IStream load case (bug 35102)

    if (    fLoad
        &&  !phli->phpi
        &&  phli->fParseSync)
    {
        CHtmLoad *pHtmLoad = GetHtmInfo()->GetHtmLoad();

        if (pHtmLoad)
        {
            pHtmLoad->FinishSyncLoad();
        }
    }
}

BOOL
CHtmCtx::IsLoading()
{
    return(GetHtmInfo()->IsLoading());
}

BOOL
CHtmCtx::IsOpened()
{
    return(GetHtmInfo()->IsOpened());
}

BOOL
CHtmCtx::WasOpened()
{
    return(GetHtmInfo()->WasOpened());
}

BOOL
CHtmCtx::IsSyncParsing()
{
    return(GetHtmInfo()->IsSyncParsing());
}

CMarkup *
CHtmCtx::GetContextMarkup()
{
    return(GetHtmInfo()->GetContextMarkup());
}

BOOL
CHtmCtx::IsHttp449()
{
    return(GetHtmInfo()->IsHttp449());
}

BOOL
CHtmCtx::IsNoProgressUI()
{
    return(GetHtmInfo()->IsNoProgressUI());
}

BOOL
CHtmCtx::FromMimeFilter()
{
    return(GetHtmInfo()->FromMimeFilter());
}

HRESULT
CHtmCtx::GetBindResult()
{
    return(GetHtmInfo()->GetBindResult());
}

HRESULT
CHtmCtx::GetDwnBindDataResult()
{ 
    return ( GetHtmInfo() ? GetHtmInfo()->GetDwnBindDataResult() : E_FAIL ) ;
}

IBindCtx*
CHtmCtx::GetBindCtx()
{ 
    CHtmInfo * pHtmInfo = GetHtmInfo();
    if(pHtmInfo)
    {
        CHtmLoad * pHtmLoad = pHtmInfo->GetHtmLoad();
        if(pHtmLoad)
        {
            CDwnBindData* pBindData =pHtmLoad->GetDwnBindData();
            if(pBindData)
            {
                return pBindData->GetBindCtx();
            }
        }
    }

    return NULL;
}

HRESULT
CHtmCtx::Write(LPCTSTR pch, BOOL fParseNow)
{
    HRESULT                     hr;
    CHtmInfo *                  pHtmInfo = GetHtmInfo();
    CHtmInfo::CSyncParsingLock  lock(pHtmInfo);

    hr = THR(pHtmInfo->Write(pch, fParseNow));
    
    RRETURN (hr);
}

HRESULT
CHtmCtx::WriteUnicodeSignature()
{
    // This should take care both 2/4 bytes wchar
    WCHAR abUnicodeSignature = NATIVE_UNICODE_SIGNATURE;
    return(GetHtmInfo()->OnSource((BYTE*)&abUnicodeSignature, sizeof(WCHAR)));
}

void
CHtmCtx::Close()
{
    GetHtmInfo()->Close();
}

void
CHtmCtx::Sleep(BOOL fSleep, BOOL fExecute)
{
    GetHtmInfo()->Sleep(fSleep, fExecute);
}

void
CHtmCtx::ResumeAfterImportPI()
{
    GetHtmInfo()->ResumeAfterImportPI();
};

void
CHtmCtx::SetCodePage(CODEPAGE cp)
{
    GetHtmInfo()->SetDocCodePage(cp);
}

CDwnCtx *
CHtmCtx::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    return(GetHtmInfo()->GetDwnCtx(dt, pch));
}

BOOL
CHtmCtx::IsKeepRefresh()
{
    return(GetHtmInfo()->IsKeepRefresh());
}

IStream *
CHtmCtx::GetRefreshStream()
{
    return(GetHtmInfo()->GetRefreshStream());
}

TCHAR *
CHtmCtx::GetFailureUrl()
{
    return(GetHtmInfo()->GetFailureUrl());
}

void
CHtmCtx::DoStop()
{
    GetHtmInfo()->DoStop();
}

TCHAR *
CHtmCtx::GetErrorString()
{
    return(GetHtmInfo()->GetErrorString());
}

void
CHtmCtx::GetRawEcho(BYTE **ppb, ULONG *pcb)
{
    GetHtmInfo()->GetRawEcho(ppb, pcb);
}

void
CHtmCtx::GetSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    GetHtmInfo()->GetSecConInfo(ppsci);
}

void
CHtmCtx::ResumeAfterScan()
{
    GetHtmInfo()->ResumeAfterScan();
}

// CHtmInfo -------------------------------------------------------------------

ULONG
CHtmInfo::Release()
{
    // Skip over the caching logic of CDwnInfo::Release.  CHtmInfo does not
    // get cached.

    return(CBaseFT::Release());
}

CHtmInfo::~CHtmInfo()
{
    // Frees any resources that can be used on both HtmPre and HtmPost (Subaddref and addref) threads

    if (_pstmSrc)
    {
        _pstmSrc->Release();
        _pstmSrc = NULL;
    }

    MemFree(_pbSrc);
}

void
CHtmInfo::Passivate()
{
    // Frees only those resources used only on the HtmPost (addref) thread

    UnlockFile();

    ReleaseInterface(_pUnkLock);

    _cstrFailureUrl.Free();

    ClearInterface(&_pstmFile);
    ClearInterface(&_pstmRefresh);

    MemFree(_pchDecoded);
    _pchDecoded = NULL;

    MemFree(_pchError);
    _pchError = NULL;

    MemFree(_pbRawEcho);
    _pbRawEcho = NULL;
    _cbRawEcho = 0;

    MemFree(_pSecConInfo);
    _pSecConInfo = NULL;

    EnterCriticalSection();

    if (_pExtendedTagTable)
    {
        _pExtendedTagTable->Release();
        _pExtendedTagTable = NULL;
    }
    if( _pExtendedTagTableHost )
    {
        _pExtendedTagTableHost->Release();
        _pExtendedTagTableHost = NULL;
    }

    LeaveCriticalSection();

    super::Passivate();
}

HRESULT
CHtmInfo::Init(DWNLOADINFO * pdli)
{
    HTMLOADINFO * phli = (HTMLOADINFO *)pdli;
    CDwnDoc * pDwnDoc = pdli->pDwnDoc;
    HRESULT hr;

    _fOpened = _fWasOpened = pdli->fClientData;
    _fSyncParsing = phli->fParseSync;
    _cpDoc   = pDwnDoc->GetDocCodePage();
    _pmi     = phli->pmi;
    _fKeepRefresh = phli->fKeepRefresh;

    _fNoProgressUI = phli->fNoProgressUI;

    _dwClass = pdli->fClientData ? PROGSINK_CLASS_HTML | PROGSINK_CLASS_NOSPIN : PROGSINK_CLASS_HTML;

    hr = THR(_cstrFailureUrl.Set(phli->pchFailureUrl));
    if (hr)
        goto Cleanup;

    ReplaceInterface(&_pstmRefresh, phli->pstmRefresh);

    hr = THR(super::Init(pdli));
    if (hr)
        goto Cleanup;

    if (!_cstrUrl && phli->pchBase)
    {
        hr = THR(_cstrUrl.Set(phli->pchBase));
        if (hr)
            goto Cleanup;
    }

    // We need to cache this tag table on the info so that we can
    // have a copy protected by critical section.  We had a race
    // condition where the tokenizer could grab the ETTHost off 
    // the CDoc right before the CDoc passivated and cleared it.
    _pExtendedTagTableHost = phli->pDoc->_pExtendedTagTableHost;
    if( _pExtendedTagTableHost )
        _pExtendedTagTableHost->AddRef();

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CHtmCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CHtmInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CHtmLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}

void
CHtmInfo::SetDocCodePage(CODEPAGE cp)
{
    if (_cpDoc != cp)
    {
        _cpDoc      = cp;
        _cbDecoded  = 0;
        _cchDecoded = 0;

        MemFree(_pchDecoded);
        _pchDecoded = NULL;
    }
}

CDwnCtx *
CHtmInfo::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    CHtmLoad * pHtmLoad = GetHtmLoad();
    return(pHtmLoad ? pHtmLoad->GetDwnCtx(dt, pch) : NULL);
}

void
CHtmInfo::DoStop()
{
    CHtmLoad * pHtmLoad = GetHtmLoad();

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, DWNLOAD_STOPPED);
    }

    if (pHtmLoad)
        pHtmLoad->DoStop();
}

void
CHtmInfo::TakeErrorString(TCHAR **ppchError)
{
    Assert(!_pchError);

    delete _pchError; // defensive

    _pchError = *ppchError;

    *ppchError = NULL;
}

void
CHtmInfo::TakeRawEcho(BYTE **ppb, ULONG *pcb)
{
    Assert(!_pbRawEcho);

    delete _pbRawEcho; // defensive

    _pbRawEcho = *ppb;
    _cbRawEcho = *pcb;
    *ppb = NULL;
    *pcb = 0;
}

void
CHtmInfo::GetRawEcho(BYTE **ppb, ULONG *pcb)
{
    *ppb = _pbRawEcho;
    *pcb = _cbRawEcho;
}

void
CHtmInfo::TakeSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    Assert(!_pSecConInfo);

    delete _pSecConInfo; // defensive

    _pSecConInfo = *ppsci;
    *ppsci = NULL;
}

void
CHtmInfo::GetSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsi)
{
    *ppsi = _pSecConInfo;
}

void
CHtmInfo::ResumeAfterScan()
{
    CHtmLoad * pHtmLoad = GetHtmLoad();

    if (pHtmLoad)
        pHtmLoad->ResumeAfterScan();
}

HRESULT
CHtmInfo::OnLoadFile(LPCTSTR pszFile, HANDLE * phLock, BOOL fPretransform)
{
    PerfDbgLog2(tagHtmInfo, this, "+CHtmInfo::OnLoadFile (psz=%ls,hLock=%lX)",
        pszFile, *phLock);

    HRESULT hr = fPretransform 
                     ? THR(_cstrPretransformedFile.Set(pszFile))
                     : THR(_cstrFile.Set(pszFile));

    if (hr == S_OK)
    {
        _hLock = *phLock;
        *phLock = NULL;
    }

    PerfDbgLog1(tagHtmInfo, this, "-CHtmInfo::OnLoadFile (hr=%lX)", hr);
    RRETURN(hr);
}

inline
void
CHtmInfo::UnlockFile()
{
    if (_hLock)
    {
        InternetUnlockRequestFile(_hLock);
        _hLock = NULL;
    }
}

void
CHtmInfo::OnLoadDone(HRESULT hrErr)
{
    if (!_hrBind && hrErr)
        _hrBind = hrErr;

    // on success, we can release failure information
    if (!_hrBind)
    {
        _cstrFailureUrl.Free();
        if (!_fKeepRefresh)
            ClearInterface(&_pstmRefresh);
    }

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, _hrBind ? DWNLOAD_ERROR : DWNLOAD_COMPLETE);
    }

    // NOTE:

    // Other DwnCtxs now require an explcit SetProgSink(NULL) to detach the progsink.
    // However, this is not true for HtmCtx's: an HtmCtx disconnects itself from its
    // progsink automatically when it's done loading. We could fix this, but it would
    // add an extra layer of signalling; no reason to (dbau)

    DelProgSinks();
}

void
CHtmInfo::OnBindResult(HRESULT hr)
{
    _hrBind = hr;
}

HRESULT
CHtmInfo::GetFile(LPTSTR * ppch)
{
    RRETURN(_cstrFile ? MemAllocString(Mt(CHtmInfoGetFile), _cstrFile, ppch) : E_FAIL);
}


HRESULT
CHtmInfo::GetPretransformedFile(LPTSTR * ppch)
{
    RRETURN(_cstrPretransformedFile ? MemAllocString(Mt(CHtmInfoGetPretransformedFile), _cstrPretransformedFile, ppch) : E_FAIL);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::EnsureExtendedTagTableHelper
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::EnsureExtendedTagTableHelper()
{
    HRESULT     hr = S_OK;

    Assert (EnteredCriticalSection());

    if (!_pExtendedTagTable)
    {
        if (!GetHtmLoad())
        {
            hr = E_FAIL; // TODO (alexz) work this out; the only reason we need HtmLoad is to access _pDoc and _pMarkup
            goto Cleanup;// This also has caused some nasty workarounds on the behavior context (JHarding)
            // Actually, for the moment, this is good.  If the Info passivates while the tokenizer is in the middle of 
            // running, we could try and ensure a tag table on a passivated info.  If that happened, we'd leak it, but
            // as things are right now, we won't be able to ensure a new one, which is good.
        }

#if 0
        // TODO (JHarding): Fix this - BehaviorContext() hits the lookaside hash table from the wrong thread.
        // Verify that we're not ensuring one here if we already have one on the markup's behavior context
        Assert( !GetHtmLoad()->_pMarkup->HasBehaviorContext() || !GetHtmLoad()->_pMarkup->BehaviorContext()->_pExtendedTagTable );
#endif // 0

        _pExtendedTagTable = new CExtendedTagTable(GetHtmLoad()->_pDoc, GetHtmLoad()->_pMarkup, /* fShareBooster = */FALSE);
        if (!_pExtendedTagTable)
            hr = E_OUTOFMEMORY;
    }

Cleanup:
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::EnsureExtendedTagTable
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::EnsureExtendedTagTable()
{
    HRESULT     hr;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTableHelper());

    LeaveCriticalSection();

    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::RegisterNamespace
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::RegisterNamespace(LPTSTR pchNamespace, LPTSTR pchUrn, DWORD dwDeclStyle)
{
    HRESULT hr;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTableHelper());
    if (hr)
        goto Cleanup;

    hr = THR_NOTRACE(_pExtendedTagTable->EnsureNamespace(
        pchNamespace, pchUrn, /* pchFactoryUrl = */ NULL));

Cleanup:
    LeaveCriticalSection();
    
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::ImportNamespaceImplementation
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::ImportNamespaceImplementation(
    LPTSTR              pchNamespace,
    LPTSTR              pchUrn,
    LPTSTR              pchFactoryUrl,
    BOOL                fSynchronize,
    BOOL                fEnsureNamespace,
    LPTSTR              pchTagName,
    LPTSTR              pchBaseTagName,
    CExtendedTagDesc ** ppDesc)
{
    HRESULT                     hr = S_OK;
    CHtmLoad *                  pHtmLoad = GetHtmLoad();
    CExtendedTagNamespace *     pNamespace;
    CExtendedTagDesc *          pDesc;
    BOOL                        fSyncParsing = IsSyncParsing();


    EnterCriticalSection();

    Assert (pHtmLoad);

    if (!ppDesc)
        ppDesc = &pDesc;

    *ppDesc = NULL;

    hr = THR(EnsureExtendedTagTableHelper());
    if (hr)
        goto Cleanup;

    fEnsureNamespace |= fSyncParsing;

    if (fEnsureNamespace)
    {
        hr = THR(_pExtendedTagTable->EnsureNamespace(pchNamespace, pchUrn, &pNamespace));
        if (hr)
            goto Cleanup;
    }
    else
    {
        pNamespace = _pExtendedTagTable->FindNamespace(pchNamespace, pchUrn);
    }

    if (pNamespace)
    {
        if (pchFactoryUrl)
        {
            IGNORE_HR(pNamespace->SetFactory(
                pHtmLoad->_pContextMarkup ?
                    pHtmLoad->_pContextMarkup :
                    pHtmLoad->_pMarkup,
                pchFactoryUrl));
        }

        if (pchTagName && pchTagName[0])
        {
            // (this needs to be done even if pchFactoryUrl is NULL)
            hr = THR(pNamespace->AddTagDesc(pchTagName, /* fOverride = */TRUE, pchBaseTagName, 0, ppDesc));
            if (hr)
                goto Cleanup;
        }

        if (pchFactoryUrl && fSynchronize)
        {
            IGNORE_HR(_pExtendedTagTable->Sync1(/* fSynchronous = */fSyncParsing));
            goto Cleanup; // done
        }
    }

    if (fSynchronize)
    {
        hr = THR(ResumeAfterImportPI());
        if (hr)
            goto Cleanup;
    }

Cleanup:

    LeaveCriticalSection();
    
    RRETURN (hr);
}

#ifdef GETDHELPER
//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagDesc
//
//----------------------------------------------------------------------------
CExtendedTagDesc *
CHtmInfo::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsureTagDesc, BOOL * pfQuery /* = NULL */)
{
    HRESULT             hr;
    CHtmLoad *          pHtmLoad = GetHtmLoad();
    CMarkup *           pContextMarkup = NULL;
    CExtendedTagTable * pExtendedTagTableHost = NULL;
    CExtendedTagDesc *  pDesc = NULL;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTable());
    if (hr)
        goto Cleanup;

    Assert (_pExtendedTagTable);

    if (pHtmLoad)
    {
        pContextMarkup = pHtmLoad->_pContextMarkup;
        pExtendedTagTableHost = pHtmLoad->_pDoc->_pExtendedTagTableHost;
    }

    pDesc = CExtendedTagTable::GetExtendedTagDesc( _pExtendedTagTable, 
                                                   pContextMarkup, 
                                                   pExtendedTagTableHost,
                                                   pchNamespace, 
                                                   pchTagName,
                                                   fEnsureTagDesc,
                                                   /* fEnsureNamespace = */IsSyncParsing(),
                                                   pfQuery );

Cleanup:
    LeaveCriticalSection();

    return pDesc;
}
#else
//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagDesc
//
//----------------------------------------------------------------------------

CExtendedTagDesc *
CHtmInfo::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsureTagDesc, BOOL *pfQueryHost)
{
    HRESULT             hr;
    CExtendedTagDesc *  pDesc;
    CHtmLoad *          pHtmLoad = GetHtmLoad();
    CMarkup *           pContextMarkup;

    if( pfQueryHost )
        *pfQueryHost = FALSE;

    EnterCriticalSection();

    pDesc = NULL;

    hr = THR(EnsureExtendedTagTable());
    if (hr)
        goto Cleanup;

    Assert (_pExtendedTagTable);

    // check our own table first, but don't ensure the item there just yet

    // ( normally, this is where the tag is getting resolved )
    pDesc = _pExtendedTagTable->FindTagDesc(pchNamespace, pchTagName);
    if (pDesc)
        goto Cleanup; // done (this the most typical codepath - when the tag is properly declared)

    if (pHtmLoad)
    {
        // check in context markup

        pContextMarkup = pHtmLoad->_pContextMarkup;
        if (pContextMarkup)
        {
            pDesc = pContextMarkup->GetExtendedTagDesc(pchNamespace, pchTagName, /*fEnsure =*/FALSE);
            if (pDesc)
                goto Cleanup; // done
        }

        // check in the host
        // NOTE: check in the host should be after check in the target markup, just like it is after check in the current markup.

        if (_pExtendedTagTableHost)
        {
            pDesc = _pExtendedTagTableHost->FindTagDesc(pchNamespace, pchTagName, pfQueryHost);
            if (pDesc)
                goto Cleanup; // done
        }
    }

    // now ensure it in our table (if we can)

    if (fEnsureTagDesc && (!pfQueryHost || FALSE == *pfQueryHost))
    {
        pDesc = _pExtendedTagTable->EnsureTagDesc(
            pchNamespace, pchTagName, /* fEnsureNamespace = */IsSyncParsing());
        if (pDesc)
            goto Cleanup; // done
    }

Cleanup:
    LeaveCriticalSection();
    
    return pDesc;
}
#endif // GETDHELPER

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagTable
//
//----------------------------------------------------------------------------

CExtendedTagTable *
CHtmInfo::GetExtendedTagTable()
{
    CExtendedTagTable * pExtendedTagTable;

    EnterCriticalSection();

    pExtendedTagTable = _pExtendedTagTable;

    LeaveCriticalSection();
    
    return pExtendedTagTable;
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::TransferExtendedTagTable
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::TransferExtendedTagTable(CMarkup * pMarkup)
{
    HRESULT                     hr = S_OK;
    CMarkupBehaviorContext *    pContext;

    Assert (pMarkup);
    Assert (pMarkup->Doc()->_dwTID == GetCurrentThreadId());

    EnterCriticalSection();

    if (!_pExtendedTagTable)
        goto Cleanup;

    hr = THR(pMarkup->EnsureBehaviorContext(&pContext));
    if (hr)
        goto Cleanup;

    _pExtendedTagTable->ClearBooster();
    _pExtendedTagTable->_fShareBooster = TRUE;

    pContext->_pExtendedTagTable = _pExtendedTagTable;
    _pExtendedTagTable = NULL;

Cleanup:
    LeaveCriticalSection();
    
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::SaveXmlNamespaceStdPIs
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::SaveXmlNamespaceStdPIs(CStreamWriteBuff * pStreamWriteBuff)
{
    HRESULT             hr = S_OK;

    EnterCriticalSection();

    if (_pExtendedTagTable)
    {
        hr = THR(_pExtendedTagTable->SaveXmlNamespaceStdPIs(pStreamWriteBuff));
    }

    LeaveCriticalSection();
    
    RRETURN (hr);
}

// CHtmLoad ----------------------------------------------------------------

HRESULT
CHtmLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::Init %ls",
        pdli->pchUrl ? pdli->pchUrl : g_Zero.ach);

    HTMLOADINFO *   phli    = (HTMLOADINFO *)pdli;
    CDoc *          pDoc    = phli->pDoc;
    CMarkup *       pMarkup = phli->pMarkup;
    CDwnDoc *       pDwnDoc = pdli->pDwnDoc;
    CHtmTagStm *    pHtmTagStm = NULL;
    BOOL            fSync;
    CWindow *       pWindow = NULL;
    HRESULT         hr;

    // Protect against 'this' or pDoc being destroyed while inside this
    // function.

    AddRef();
    CDoc::CLock Lock(pDoc);

    // Memorize binding information for sub-downloads

    _pDoc = pDoc;
    _pDoc->SubAddRef();
    _pMarkup = pMarkup;
    _pMarkup->SubAddRef();
    _pContextMarkup = phli->pContextMarkup;
    if (_pContextMarkup)
    {
        _pContextMarkup->SubAddRef();
    }

    _fPasting = phli->phpi != NULL;

    fSync = _fPasting || phli->fParseSync;

    hr = THR(_cstrUrlDef.Set(phli->pchBase));
    if (hr)
        goto Cleanup;

    _ftHistory = phli->ftHistory;

    // Prepare document root for pasting

    if (_fPasting)
    {
        hr = THR( pDoc->_cstrPasteUrl.Set( phli->phpi->cstrSourceUrl ) );
        if (hr)
            goto Cleanup;
    }

    // Create the postparser and the input stream to the postparser

    _pHtmPost = new CHtmPost;

    if (_pHtmPost == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pHtmTagStm = new CHtmTagStm;

    if (pHtmTagStm == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmPost->Init(this, pHtmTagStm, _pDoc, _pMarkup, phli->phpi, fSync || pdli->fClientData));
    if (hr)
        goto Cleanup;

    // Call our superclass to initialize and start binding.

    hr = THR(super::Init(pdli, pDwnInfo,
            pdli->fClientData ? IDS_BINDSTATUS_GENERATINGDATA_TEXT : IDS_BINDSTATUS_DOWNLOADINGDATA_TEXT,
            DWNF_ISDOCBIND | DWNF_GETCONTENTTYPE | DWNF_GETREFRESH | DWNF_GETMODTIME |
            DWNF_GETFILELOCK | DWNF_GETFLAGS | DWNF_GETSTATUSCODE | DWNF_HANDLEECHO | DWNF_GETSECCONINFO |
            (_pMarkup->_fPicsProcessPending ? DWNF_GETPICS : 0) |
            (phli->fDownloadHtc ? DWNF_HTCDOWNLOAD : 0) |
            (((_pMarkup->IsPrimaryMarkup() || _pMarkup->IsPendingPrimaryMarkup()) && 
               !(_pDoc->_fViewLinkedInWebOC || _pDoc->_fScriptletDoc) ? DWNF_ISROOTMARKUP : 0)) ));

    if (hr)
        goto Cleanup;

    // Create and initialize the preparser

    _pHtmPre = new CHtmPre(phli->phpi ? phli->phpi->cp : pDwnDoc->GetDocCodePage());

    if (_pHtmPre == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmPre->Init(this, pDwnDoc, pdli->pInetSess, phli->pstmLeader,
                _pDwnBindData, pHtmTagStm, phli->phpi, _cstrUrlDef, phli->pVersions,
                _pMarkup->IsXML(), phli->pfnTokenizerFilterOutputToken));
    if (hr)
        goto Cleanup;

    if (phli->pmi == g_pmiTextPlain)
    {
        hr = THR(_pHtmPre->GoIntoPlaintextMode());
        if (hr)
            goto Cleanup;
    }

    // If we are loading synchronously, the caller expects the entire tree
    // to be built before this function returns, so we enter a loop calling
    // the preparser and postparser until they are done.

    if (fSync)
    {
        HRESULT hr2;
        CHtmInfo::CSyncParsingLock Lock( GetHtmInfo() );

        Assert(phli->pstm);

        if (pMarkup->_fWindowPending)
        {                            
            hr = THR(pMarkup->GetWindowPending()->SwitchMarkup(pMarkup));
            if (hr)
                goto Cleanup;

            // Switch markup can push a message loop so protect here
            if (!_pHtmPost)
                goto Cleanup;
        }

        // don't wait for the message loop; execute syncrhonously as if
        // we're inside an inline script
        hr = THR(pMarkup->EnterScriptExecution(&pWindow));
        if (hr)
            goto Cleanup;

        while (!_pHtmPost->IsDone())
        {
            hr = THR(_pHtmPre->Exec()); // runs up to first </SCRIPT>
            if (hr)
                goto CleanupSync;

            hr = THR(_pHtmPost->Exec(INFINITE));
            if (hr)
                goto CleanupSync;

            // Exec can push a message loop, during which CHtmLoad::Close can be called,
            // so protect against _pHtmPost going NULL

            if (!_pHtmPost)
                goto CleanupSync;
        }

    CleanupSync:
        hr2 = THR(pMarkup->LeaveScriptExecution(pWindow));
        if (!hr)
            hr = hr2;

        goto Cleanup;
    }

    // If we are keeping the document open, then just return without launching
    // the preparser.  All interactions with it will come via script writes.
    // In this case, the post is driven manually via PostManRunNested.

    if (pdli->fClientData)
    {
        _pHtmPre->Suspend();
        goto Cleanup;
    }

    // We are going to be running the postparser asynchronously as a task
    // on this thread.  Start the task now.  It will not actually run until
    // it is unblocked.

    PostManEnqueue(_pHtmPost);

    // We are going to be running the preparser asynchronously as a task
    // on the download thread.  Start the task now.  It will not actually
    // run until it is unblocked.

    hr = THR(StartDwnTask(_pHtmPre));
    if (hr)
        goto Cleanup;

Cleanup:

    if (pHtmTagStm)
        pHtmTagStm->Release();

    Release();

    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindRedirect(LPCTSTR pchRedirect, LPCTSTR pchMethod)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindRedirect %ls", pchRedirect);

    CHtmPre *pHtmPre = NULL;
    HRESULT hr;

    hr = THR(_cstrRedirect.Set(pchRedirect));
    if (hr)
        goto Cleanup;

    hr = THR(_cstrMethod.Set(pchMethod));
    if (hr)
        goto Cleanup;

    pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        hr = THR(pHtmPre->OnRedirect(pchRedirect));

        pHtmPre->SubRelease();
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindRecirect (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindHeaders()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnBindHeaders");

    LPCTSTR     pch;
    HANDLE      hLock        = NULL;
    CHtmPre *   pHtmPre      = GetHtmPreAsync();
    HRESULT     hr           = S_OK;
    FILETIME    ftLastMod;
    BOOL        fPretransform;
    
    _dwPrivacyFlags = _pDwnBindData->GetPrivacyFlags();  
    // CDwnBindData will give up ownership of the memory so CHtmLoad
    // will now own it and pass it on to the CPrivacyInfo lookaside
    // Incase the load goes away before the post starts, we have to 
    // delete this memory
    _pchP3PHeader = _pDwnBindData->GetP3PHeader();
    
    pch = _pDwnBindData->GetFileLock(&hLock, &fPretransform);

    if (pch)
    {
        hr = THR(GetHtmInfo()->OnLoadFile(pch, &hLock, fPretransform));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetContentType();

    if (pch && pHtmPre)
    {
        hr = THR(pHtmPre->SetContentTypeFromHeader(pch));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetRefresh();

    if (pch)
    {
        hr = THR(_cstrRefresh.Set(pch));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetPics();

    if (pch)
    {
        hr = THR(_cstrPics.Set(pch));
        if (hr)
            goto Cleanup;
    }

    ftLastMod = _pDwnBindData->GetLastMod();

    // Enable history if:
    //  (1) loading from cache or file, and
    //  (2) mod-dates match

    if (    (   (_pDwnBindData->GetScheme() == URL_SCHEME_FILE)
            ||  (_pDwnBindData->GetReqFlags() & INTERNET_REQFLAG_FROM_CACHE))
        &&  (   ftLastMod.dwLowDateTime == _ftHistory.dwLowDateTime
            &&  ftLastMod.dwHighDateTime == _ftHistory.dwHighDateTime))
    {
        _fLoadHistory = TRUE;
    }

    // Enable 449 echo if
    // (1) We got a 449 response
    // (2) We have echo-headers to use

    if (_pDwnBindData->GetStatusCode() == 449)
    {
        Assert(!_pbRawEcho);

        _pDwnBindData->GiveRawEcho(&_pbRawEcho, &_cbRawEcho);
    }

    _pDwnBindData->GiveSecConInfo(&_pSecConInfo);

    _pDwnInfo->SetLastMod(ftLastMod);
    _pDwnInfo->SetSecFlags(_pDwnBindData->GetSecFlags());

    GetHtmInfo()->SetMimeFilter(_pDwnBindData->FromMimeFilter());

Cleanup:
    if (hLock)
        InternetUnlockRequestFile(hLock);
    if (pHtmPre)
        pHtmPre->SubRelease();
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindHeaders (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindMime(const MIMEINFO * pmi)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindMime %ls",
        pmi ? pmi->pch : g_Zero.ach);

    CHtmPre *   pHtmPre = GetHtmPreAsync();
    HRESULT     hr      = S_OK;

    if (pmi && pHtmPre && !_pDwnInfo->GetMimeInfo())
    {
        if (pmi->pfnImg)
        {
            _pDwnInfo->SetMimeInfo(pmi);
            _pmi = pmi;

            // The caller didn't specify a mime type and it looks like
            // we've got an image.

            _fDwnBindTerm = TRUE;
            _pDwnBindData->Disconnect();

            _fImageFile = TRUE;

            hr = THR(pHtmPre->InsertImage(GetUrl(), _pDwnBindData));
            if (hr)
            {
                _pDwnBindData->Terminate(E_ABORT);
                goto Cleanup;
            }

            // Returing S_FALSE tells the callback dispatcher to forget
            // about calling us anymore.  We don't care what happens to
            // the binding in progress ... it belongs to the image loader
            // now.

            hr = S_FALSE;
        }
        else if (pmi == g_pmiTextPlain || pmi == g_pmiTextHtml || pmi == g_pmiTextComponent)
        {
            _pDwnInfo->SetMimeInfo(pmi);
            _pmi = pmi;

            if (pmi == g_pmiTextPlain)
            {
                hr = THR(pHtmPre->GoIntoPlaintextMode());
                if (hr)
                    goto Cleanup;
            }
        }
    }

Cleanup:
    if (pHtmPre)
        pHtmPre->SubRelease();
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindMime (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

HRESULT
CHtmLoad::OnBindData()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnBindData");

    HRESULT hr = S_OK;
    CHtmPre * pHtmPre;

    if (!_pmi)
    {
        BYTE  ab[200];
        ULONG cb;

        hr = THR(_pDwnBindData->Peek(ab, ARRAY_SIZE(ab), &cb, GetHtmInfo()->IsSyncParsing()));
        if (hr)
            goto Cleanup;

        if (cb < ARRAY_SIZE(ab) && _pDwnBindData->IsPending())
            goto Cleanup;

#if !defined(WINCE) && !defined(WIN16)
        _pmi = GetMimeInfoFromData(ab, cb, _pDwnBindData->GetContentType());

        if (    _pmi == NULL
            &&  (_pDoc->_fScriptletDoc || _pDoc->_fInObjectTag || _pDoc->_fInHTMLDlg)
            &&  (_pMarkup->IsPrimaryMarkup() || _pMarkup->IsPendingPrimaryMarkup()))
        {
            hr = E_ABORT;
            if (GetHtmInfo())
                GetHtmInfo()->DoStop();
            goto Cleanup;
        }

        if (_pmi == NULL || _pmi != g_pmiTextPlain && !_pmi->pfnImg) // non-image/plaintext -> assume HTML
#endif
        {
            _pmi = g_pmiTextHtml;
        }

        _pDwnBindData->SetMimeInfo(_pmi);

        hr = THR(OnBindMime(_pmi));
        if (hr)
            goto Cleanup;
    }

    pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        pHtmPre->SetBlocked(FALSE);
        pHtmPre->SubRelease();
    }

Cleanup:
    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnBindData (hr=0)");
    RRETURN1(hr, S_FALSE);
}

void
CHtmLoad::OnBindDone(HRESULT hrErr)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindDone (hrErr=%lX)", hrErr);

    CHtmPre * pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        pHtmPre->SetBlocked(FALSE);
        pHtmPre->SubRelease();
    }

    if( hrErr == INET_E_TERMINATED_BIND )
    {
        GetHtmInfo()->UnlockFile();
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnBindDone");
}

void
CHtmLoad::GiveRawEcho(BYTE **ppb, ULONG *pcb)
{
    Assert(!*ppb);

    *ppb = _pbRawEcho;
    *pcb = _cbRawEcho;
    _pbRawEcho = NULL;
    _cbRawEcho = 0;
}

void
CHtmLoad::GiveSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    Assert(!*ppsci);

    *ppsci = _pSecConInfo;
    _pSecConInfo = NULL;
}

void
CHtmLoad::FinishSyncLoad()
{
    if (_pHtmPost)
    {
        OnPostDone(S_OK);
    }
}

void
CHtmLoad::Passivate()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Passivate");

    super::Passivate();

    if (_pHtmPre)
    {
        _pHtmPre->Release();
        _pHtmPre = NULL;
    }

    if (_pHtmPost)
    {
        _pHtmPost->Die();
        _pHtmPost->Release();
        _pHtmPost = NULL;
    }

    if (_pDoc)
    {
        _pDoc->_cstrPasteUrl.Free();

        _pDoc->SubRelease();
        _pDoc = NULL;
    }

    if (_pMarkup)
    {
        _pMarkup->SubRelease();
        _pMarkup = NULL;
    }

    if (_pContextMarkup)
    {
        _pContextMarkup->SubRelease();
        _pContextMarkup = NULL;
    }

    MemFree(_pbRawEcho);
    _pbRawEcho = NULL;

    MemFree(_pSecConInfo);
    _pSecConInfo = NULL;

    for (int i = 0; i < DWNCTX_MAX; i++)
    {
        UINT        cEnt     = _aryDwnCtx[i].Size();
        CDwnCtx **  ppDwnCtx = _aryDwnCtx[i];

        for (; cEnt > 0; --cEnt, ++ppDwnCtx)
        {
            if (*ppDwnCtx)
            {
#ifndef WIN16
                PerfDbgLog3(tagHtmLoad, this,
                    "CHtmLoad::Passivate Release unclaimed CDwnCtx %lX #%d %ls",
                    *ppDwnCtx, ppDwnCtx - (CDwnCtx **)_aryDwnCtx[i], (*ppDwnCtx)->GetUrl());
#endif //ndef WIN16

                (*ppDwnCtx)->Release();
            }
        }
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::Passivate");
}

#if 0
void
CHtmLoad::UpdateLGT()
{
    if (_pHtmPre)
    {
        _pHtmPre->UpdateLGT(_pDoc);
    }
}
#endif

void
CHtmLoad::ResumeHtmPre()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnPostFinishScript");

    //
    // It's possible to get here without a _pHtmPre if we were
    // given an ExecStop in the middle of script execution.
    //

    if (_pHtmPre && !_pHtmPre->Resume())
    {
        _pHtmPre->SetBlocked(FALSE);
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnPostFinishScript");
}

void
CHtmLoad::ResumeAfterTagResolution( ELEMENT_TAG etag, TCHAR * pchTagName, ULONG cchTagName )
{
    Assert( _pHtmPre );
    Assert(     (   ( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL ) 
                 && pchTagName && cchTagName )                              // Setting up literal-ness
           ||   etag == ETAG_GENERIC ||                                     // Non-literal
                etag == ETAG_UNKNOWN ||                                     // No tag found
                etag == ETAG_NULL );                                        // Tag was an end tag

    // Ajdust the Pre's state if we got a literal
    if( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL )
    {
        _pHtmPre->SetLiteralState( etag, pchTagName, cchTagName );
    }

    ResumeHtmPre();
}


void
CHtmLoad::DoStop()
{
    // Abort the binding
    if (_pDwnBindData)
        _pDwnBindData->Terminate(E_ABORT);

    // Tell htmpost to stop processing tokens
    if (_pHtmPost)
        _pHtmPost->DoStop();

}

void
CHtmLoad::ResumeAfterScan()
{
    // Tell htmpost to stop processing tokens
    if (_pHtmPost)
    {
        _pHtmPost->ResumeAfterScan();
    }

}

HRESULT
CHtmLoad::OnPostRestart(CODEPAGE codepage)
{
    HRESULT hr;
    IStream        * pstm           = NULL;
    COmWindowProxy * pWindowProxy   = NULL;
    CMarkup        * pMarkupPending = NULL;
    CDwnBindData   * pDwnBindData   = NULL;   

    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnPostFinishScript");   

    hr = THR(CreateStreamOnHGlobal(NULL, TRUE, &pstm));
    if (hr)
        goto Cleanup;

    hr = THR(GetHtmInfo()->CopyOriginalSource(pstm, 0));
    if (hr)
        goto Cleanup;

    hr = THR(pstm->Seek(LI_ZERO.li, STREAM_SEEK_SET, NULL));
    if (hr)
        goto Cleanup;

    pDwnBindData = _pDwnBindData;
    pDwnBindData->AddRef();

    _fDwnBindTerm = TRUE;
    _pDwnBindData->Disconnect();

    pWindowProxy   = _pMarkup->GetWindowPending();

    //Windows NT9 database, bug# 499597. SwitchMarkup can cause re-entrancy and passivate
    //this CHtmLoad and the windowproxy can also get deleted. We need to addref and check
    //if it is passivating before restarting the load
    pWindowProxy->SubAddRef();

    pMarkupPending = pWindowProxy->Window()->_pMarkupPending;

    if (pMarkupPending)
    {
        IGNORE_HR(pWindowProxy->SwitchMarkup(pMarkupPending,
                                             FALSE,
                                             COmWindowProxy::TLF_UPDATETRAVELLOG));
    }

    if (pWindowProxy->IsShuttingDown())
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    hr = THR(pWindowProxy->RestartLoad(pstm, pDwnBindData, codepage));
    if (hr)
    {
        pDwnBindData->Terminate(E_ABORT);
        if (_pHtmPre && !_pHtmPre->Resume())
        {
            _pHtmPre->SetBlocked(FALSE);
        }

        goto Cleanup;
    }

Cleanup:
    if (pWindowProxy)
        pWindowProxy->SubRelease();

    ReleaseInterface(pstm);

    if (pDwnBindData)
        pDwnBindData->Release();

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnPostFinishScript");

    RRETURN(hr);
}

HRESULT
CHtmLoad::OnPostStart()
{
    HRESULT  hr = S_OK;
    IMoniker *pmk = NULL;

    Assert(_pDoc->_dwTID == GetCurrentThreadId());

    // Set the _fImageFile flag on the document based on the media
    // type of the load context.

    _pMarkup->SetImageFile(_fImageFile);

    // We pass ownership of the p3p header to the markup here. Incase there was 
    // an error setting the privacy info, the markup will delete the header, so
    // null it out at our end to avoid the CHtmLoad destructor from deleting the
    // same memory
    IGNORE_HR(_pMarkup->SetPrivacyInfo(&_pchP3PHeader));

    // If we were redirected, adjust the base URL of the document
    // and discard original post data if any, and clear 449 echo

    if (_cstrRedirect)
    {
        LPTSTR pchHash;
        BOOL fKeepPost;
        fKeepPost = (_cstrMethod && _tcsequal(_cstrMethod, _T("POST")));

        if( _pMarkup->Document())
        {
            _pMarkup->Document()->ResetSecurityThunk();
            _pMarkup->Window()->ResetSecurityThunk();
        }

        if (    _pMarkup->IsPrimaryMarkup()
            ||  _pMarkup->IsPendingPrimaryMarkup())
        {
            BYTE abSID[MAX_SIZE_SECURITY_ID];
            DWORD cbSID = ARRAY_SIZE(abSID);

            hr = _pMarkup->GetSecurityID(abSID, &cbSID, _cstrRedirect);
            if (hr)
                goto Cleanup;

            hr = _pHtmPre->_pDwnDoc->SetSecurityID(abSID, cbSID);
            if (hr)
                goto Cleanup;
        }

        pchHash = (LPTSTR)UrlGetLocation(_cstrRedirect);
        if (pchHash)
        {
            hr = THR(_pMarkup->StartBookmarkTask(pchHash, 0));
            if (hr)
                goto Cleanup;
        }
    
        hr = THR(CMarkup::SetUrl(_pMarkup, _cstrRedirect));
        if (hr)
            goto Cleanup;

        _pMarkup->UpdateSecurityID();

        hr = THR(CreateURLMoniker(NULL, _cstrRedirect, &pmk));
        if (hr)
            goto Cleanup;
            
        hr = THR(_pMarkup->ReplaceMonikerPtr(pmk));
        if (hr)
            goto Cleanup;

        // The redirect URL is not encoded.
        //
        hr = THR(CMarkup::SetUrlOriginal(_pMarkup, _cstrRedirect));
        if (hr)
            goto Cleanup;

        if (_pMarkup->_fNewWindowLoading)
        {
            _pMarkup->_pDoc->_webOCEvents.NavigateComplete2(_pMarkup->GetWindowPending());
        }

        if( !_pMarkup )
        {
            // Got a case from IE Watson where the above event killed the load
            hr = E_ABORT;
            goto Cleanup;
        }

        if (!fKeepPost)
            _pMarkup->ClearDwnPost();

        // BUGFIX 20348: don't discard 449 echo information on redirect
        // MemFree(_pbRawEcho);
        // _pbRawEcho = NULL;
        // _cbRawEcho = 0;
    }

    if (_cstrRefresh)
    {
        _pMarkup->ProcessHttpEquiv(_T("Refresh"), _cstrRefresh);
    }

    if (_cstrPics)
    {
        _pMarkup->ProcessMetaPics(_cstrPics, TRUE);
    }

    // block history if needed

    if (!_fLoadHistory)
    {
        _pMarkup->ClearLoadHistoryStreams();
    }

    // notify doc about security if the URL is not a js, vbscript or about: url or if we are not in an object tag (IE6 bug 28338)
    if (!_fPasting && !IsSpecialUrl(CMarkup::GetUrl(_pMarkup)) && !_pDoc->_fInObjectTag)
    {
        _pDoc->OnHtmDownloadSecFlags(_pMarkup->IsPendingRoot(), GetSecFlags(), _pMarkup);
    }

    // grab the raw header data
    GetHtmInfo()->TakeRawEcho(&_pbRawEcho, &_cbRawEcho);

    // grab the security info structure
    GetHtmInfo()->TakeSecConInfo(&_pSecConInfo);

Cleanup:
    ClearInterface(&pmk);
    RRETURN(hr);
}

void
CHtmLoad::OnPostDone(HRESULT hrErr)
{
    //
    // If CHtmLoad::Close has been called before CHtmPost has finished,
    // we may have already released and NULL'ed this pointer
    //

    if (_pHtmPost)
    {
        if (_pHtmPost->_pchError)
        {
            GetHtmInfo()->TakeErrorString(&(_pHtmPost->_pchError));
        }

        PostManDequeue(_pHtmPost);
        _pHtmPost->Release();
        _pHtmPost = NULL;
    }

    OnDone(hrErr);
}


HRESULT
CHtmLoad::Write(LPCTSTR pch, BOOL fParseNow)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Write");

    BOOL    fExhausted;
    ULONG   cch = _tcslen(pch);
    CWindow *pWindow = NULL;
    HRESULT hr;

    //$ Note that if this is an image we might be in pass-thru mode ...
    //$ only write to the CDwnBindData but don't tokenize or post-parse.

    AssertSz(_pHtmPre, "document.write called and preparser is gone");

    // InsertText pushes the specified text into the preparser's buffer (stacking when needed)
    // It also counts and adds the source to the HtmInfo if appropriate
    hr = THR(_pHtmPre->InsertText(pch, cch));
    if (hr)
        goto Cleanup;

    if (fParseNow)
    {
        // An extra EnterInline / LeaveInline is needed around Write so we treat the parser
        // as synchronous in the case of a cross-window or C-code write (not initiated by script)

        // These guys shouldn't have a pointer until we've switched windows so assert here
        Assert( !_pMarkup->_fWindowPending );
        
        hr = THR(_pMarkup->EnterScriptExecution(&pWindow));
        if (hr) 
            goto Cleanup;
        
        for (;;)
        {
            // TokenizeText runs the preparser as far as possible (stopping at scripts when needed)
            hr = THR(_pHtmPre->TokenizeText(&fExhausted));
            if (hr)
                goto Cleanup;

            if (fExhausted)
                break;

            hr = THR(_pHtmPost->RunNested());
            if (hr)
                goto Cleanup;
        }
        
        hr = THR(_pMarkup->LeaveScriptExecution(pWindow));
        if (hr) 
            goto Cleanup;
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnScriptWrite (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::Close()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnClose");

    HRESULT hr;
    HRESULT hr2;
    CWindow *pWindow = NULL;

    //$ Don't run tokenizer if we are in pass-thru mode to an image.

    Verify(!_pHtmPre->Resume());

    // We should have already switched by this point
    Assert( !_pMarkup->_fWindowPending );

    // don't wait for the message loop; execute syncrhonously as if
    // we're inside an inline script
    hr = THR(_pMarkup->EnterScriptExecution(&pWindow));
    if (hr)
        goto Cleanup;

    while (!_pHtmPost->IsDone())
    {
        hr = THR(_pHtmPre->Exec()); // runs up to first </SCRIPT>
        if (hr)
            goto CleanupSync;

        hr = THR(_pHtmPost->Exec(INFINITE));
        if (hr)
            goto CleanupSync;
    }

CleanupSync:
    hr2 = THR(_pMarkup->LeaveScriptExecution(pWindow));
    if (!hr)
        hr = hr2;

    if (hr)
        goto Cleanup;

    if (_pHtmPost)
    {
        OnPostDone(S_OK);
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnClose (hr=%lX)", hr);
    RRETURN(hr);
}

void
CHtmLoad::Sleep(BOOL fSleep, BOOL fExecute)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Sleep");

    if (_pHtmPost)
    {
        if (fSleep)
        {
            _pHtmPost->_dwFlags |= POSTF_SLEEP;
            PostManSuspend(_pHtmPost);
        }
        else
        {
            _pHtmPost->_dwFlags &= ~POSTF_SLEEP;
            PostManResume(_pHtmPost, fExecute);
        }
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::Sleep");
}

HRESULT
CHtmLoad::AddDwnCtx(UINT dt, CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::AddDwnCtx");

    HRESULT hr;

    EnterCriticalSection();

    if (_fPassive)
        hr = E_ABORT;
    else
    {
        hr = THR(_aryDwnCtx[dt].Append(pDwnCtx));

        if (hr == S_OK)
        {
            PerfDbgLog3(tagHtmLoad, this, "CHtmLoad::AddDwnCtx %lX #%d %ls",
                pDwnCtx, _aryDwnCtx[dt].Size() - 1, pDwnCtx->GetUrl());

            pDwnCtx->AddRef();
        }
    }

    LeaveCriticalSection();

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::AddDwnCtx");
    RRETURN(hr);
}

CDwnCtx *
CHtmLoad::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::GetDwnCtx");

    CDwnCtx * pDwnCtx = NULL;
    int i, iLast;

    EnterCriticalSection();

    // loop order: check _iDwnCtxFirst first, then the rest

    if (_aryDwnCtx[dt].Size())
    {
        iLast = _iDwnCtxFirst[dt];
        Assert(iLast <= _aryDwnCtx[dt].Size());

        if (iLast == _aryDwnCtx[dt].Size())
            iLast = 0;

        i = iLast;

        do
        {
            Assert(i < _aryDwnCtx[dt].Size());

            pDwnCtx = _aryDwnCtx[dt][i];

            if (pDwnCtx && !StrCmpC(pDwnCtx->GetUrl(), pch))
            {
                PerfDbgLog3(tagHtmLoad, this, "CHtmLoad::GetDwnCtx %lX #%d %ls",
                    pDwnCtx, i, pch);

                _aryDwnCtx[dt][i] = NULL;

                #if DBG==1
                if (i != _iDwnCtxFirst[dt])
                {
                    TraceTag((tagError, "CHtmLoad DwnCtx vector %d out of order", dt));
                }
                #endif

                _iDwnCtxFirst[dt] = i + 1; // this may == _aryDwnCtx[dt].Size()
                break;
            }

            pDwnCtx = NULL;

            if (++i == _aryDwnCtx[dt].Size())
                i = 0;

        }
        while (i != iLast);
    }

    #if DBG==1 || defined(PERFTAGS)
    if (pDwnCtx == NULL)
        PerfDbgLog1(tagHtmLoad, this, "CHtmLoad::GetDwnCtx failed %ls", pch);
    #endif

    LeaveCriticalSection();

    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::GetDwnCtx (pDwnCtx=%lX)", pDwnCtx);
    return(pDwnCtx);
}

CHtmPre *
CHtmLoad::GetHtmPreAsync()
{
    EnterCriticalSection();

    CHtmPre * pHtmPre = _fPassive ? NULL : _pHtmPre;

    if (pHtmPre)
        pHtmPre->SubAddRef();

    LeaveCriticalSection();

    return(pHtmPre);
}

void
CHtmLoad::SetGenericParse(BOOL fDoGeneric)
{
    if (_pHtmPre)
        _pHtmPre->SetGenericParse(fDoGeneric);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmver.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmver.cxx
//
//  Contents:   HTML conditional expression evaluator
//
//              CVersions
//              CVerTok
//              CVerStack
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
 
#ifndef X_HTM_HXX
#define X_HTM_HXX
#include "htm.hxx"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifndef X_VERVEC_H_
#define X_VERVEC_H_
#include "vervec.h"
#endif

MtDefine(CVersions, Dwn, "CVersions"); 
MtDefine(CVerStackAry, Dwn, "CVerStackAry");
MtDefine(CIVerVector, Dwn, "CIVerVector");

DeclareTag(tagHtmVer, "Dwn", "Trace conditional version evaluation");

//+------------------------------------------------------------------------
//
//  Overview:   Conditional HTML expressions
//
//  Synopsis:   This file parses and evaluations expressions inside
//              conditional HTML tags such as
//
//              <!#if IE 4 & (ge IE 4.0sr2 | gt JVM 3) #>
//
//              The main class is CVersions.
//
//              CVersions can create an IVersionVector object which can
//              accept component/version pairs such as "IE"/"4.0sr2"
//              via GetIVersionVector(). Trident's host will feed
//              version information to IVersionVector at SetClientSite
//              time.
//
//              It can then take a string such as
//
//              "if IE 4 & (ge IE 4.0sr2 | gt JVM 3)"
//              
//              and produce TRUE or FALSE (or ENDIF or syntax error)
//              via EvaluateConditional().
//
//              The implementation is a flattened recursive-descent
//              parser on top of a case-insensitive hashing tokenizer.
//
//-------------------------------------------------------------------------



//+------------------------------------------------------------------------
//
//  Overview:   Comparing version numbers
//
//  Synopsis:   Version ordering rules:
//
//              A version has releases separated by dots, with the most
//              significant release first:
//
//              4.010beta.3032 separates into ("4", "010beta", "3032")
//              4.999.a separates into ("4","999", "a")
//
//              Comparing from left to right, since "4" = "4" and
//              "010beta" < "999", 4.010beta.3032 precedes 4.999.a.
//
//              When comparing versions exactly, a version is assumed to
//              have infinite precision in the sense that an specified
//              version string of "4.2b" is interpreted to mean
//              "4.2b.0.0.0.0.0.0...".
//
//              Each release string is compared by splitting it into
//              parts consisting of just numbers or words. Again, the
//              the most significant part is on the left.
//
//              10alpha2 separates into  ("10", "alpha", "2")
//              010beta separates into   ("010", "beta")
//
//              Comparing from left to right, since "10" = "010" and
//              "alpha" < "beta", 10alpha2 precedes 010beta.
//
//              Individual parts of a release are compared as follows:
//
//              * Words precede numbers.
//              * Words are ordered in lexical order using unicode
//                values except for A-Z, which are lowercased
//                (best < bet = Bet < beta)
//              * Numbers are ordered in integer numerical order
//                (1 < 0024 = 24 < 100)
//
//              More examples comparing version strings:
//
//              4.a < 4.a0 < 4.aa < 4 = 4.0 < 4.0a < 4.1 < 4.5 < 4.010
//
//              CompareVersion reports:
//              
//              -1 if the actual version comes before the requested one
//              0 if the actual version is equal to the requested one
//              1 if the actual version comes after the requsted one
//
//
//  Synposis:   Version containment rules:
//
//              ContainVersion() compares a requested set of releases to
//              an actual version.
//
//              The "requested" version specifies a release set, so "4.2b"
//              specifies all versions in the release "4.2b", including
//              "4.2b.1" and "4.2b.alpha" but not including "4.2b1".
//
//              ContainVersion reports:
//              
//              -1 if the actual version comes before the requested set
//              0 if the actual version is in the requested set
//              1 if the actual version comes after the requsted set
//
//-------------------------------------------------------------------------


//+------------------------------------------------------------------------
//
//  Overview:   CompareNumber
//
//  Synopsis:   Compares two number strings
//
//-------------------------------------------------------------------------
LONG
CompareNumber(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    Assert(cchReq && ISDIGIT(*pchReq) && cchAct && ISDIGIT(*pchAct));
    
    while (cchReq && *pchReq == _T('0'))
    {
        pchReq++;
        cchReq--;
    }
    
    while (cchAct && *pchAct == _T('0'))
    {
        pchAct++;
        cchAct--;
    }
    
    if (cchReq != cchAct)
        return (cchReq > cchAct ? -1 : 1);

    while (cchReq)
    {
        Assert(ISDIGIT(*pchReq) && ISDIGIT(*pchAct));
        
        if (*pchReq != *pchAct)
            return (*pchReq > *pchAct ? -1 : 1);
        cchReq--;
        pchReq++;
        pchAct++;
    }

    return 0;
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareWord
//
//  Synopsis:   Compares two word strings
//
//-------------------------------------------------------------------------
LONG
CompareWord(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    TCHAR chReq, chAct;
    
    Assert(cchReq && !ISDIGIT(*pchReq) && cchAct && !ISDIGIT(*pchAct));
    
    if (cchReq != cchAct)
        return (cchReq > cchAct ? -1 : 1);

    while (cchReq)
    {
        Assert(!ISDIGIT(*pchReq) && !ISDIGIT(*pchAct));

        chReq = *pchReq;
        chAct = *pchAct;

        if (ISUPPER(chReq))
            chAct += _T('a') - _T('A');
            
        if (ISUPPER(chReq))
            chAct += _T('a') - _T('A');
        
        if (chReq != chAct)
            return (chReq > chAct ? -1 : 1);
            
        cchReq--;
        pchReq++;
        pchAct++;
    }

    return 0;
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareRelease
//
//  Synopsis:   Breaks up release strings into words and numbers and
//              compares them from left to right.
//
//-------------------------------------------------------------------------
LONG
CompareRelease(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqPart;
    const TCHAR *pchActPart;
    LONG lCmp;

    if (!pchAct)
    {
        if (!cchReq || !ISDIGIT(*pchReq))
            return 1;

        while (cchReq && *pchReq == _T('0'))
        {
            pchReq++;
            cchReq--;
        }

        return (cchReq ? -1 : 0);
    }

    if (!pchReq)
    {
        if (!cchAct || !ISDIGIT(*pchAct))
            return 1;

        while (cchAct && *pchAct == _T('0'))
        {
            pchAct++;
            cchAct--;
        }

        return (cchAct ? -1 : 0);
    }
    
    if (!cchReq || !cchAct)
        return (cchReq ? -1 : cchAct ? 1 : 0);

    if (ISDIGIT(*pchAct))
    {
        if (!ISDIGIT(*pchReq))
            return -1;
            
        goto Number;
    }
    else
    {
        if (ISDIGIT(*pchReq))
            return 1;
    }

    for (;;)
    {
        Assert(cchAct && !ISDIGIT(*pchAct) && cchReq && !ISDIGIT(*pchReq));
        
        pchReqPart = pchReq;
        do
        {
            pchReq++;
            cchReq--;
        } while (cchReq && !ISDIGIT(*pchReq));

        pchActPart = pchAct;
        do
        {
            pchAct++;
            cchAct--;
        } while (cchAct && !ISDIGIT(*pchAct));

        lCmp = CompareWord(pchActPart, pchAct - pchActPart, pchReqPart, pchReq - pchReqPart);
        if (lCmp)
            return lCmp;

        if (!cchReq || !cchAct)
            break;

    Number:
        Assert(cchAct && ISDIGIT(*pchAct) && cchReq && ISDIGIT(*pchReq));
        
        pchReqPart = pchReq;
        do
        {
            pchReq++;
            cchReq--;
        } while (cchReq && ISDIGIT(*pchReq));

        pchActPart = pchAct;
        do
        {
            pchAct++;
            cchAct--;
        } while (cchAct && ISDIGIT(*pchAct));

        lCmp = CompareNumber(pchActPart, pchAct - pchActPart, pchReqPart, pchReq - pchReqPart);
        if (lCmp)
            return lCmp;

        if (!cchReq || !cchAct)
            break;
    }
    return (cchReq ? -1 : cchAct ? 1 : 0);
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareVersion
//
//  Synopsis:   Breaks up version strings into '.' delimited release
//              strings and compares them from left to right.
//
//-------------------------------------------------------------------------
LONG
CompareVersion(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqRel;
    const TCHAR *pchActRel;
    LONG lCmp;

    for (;;)
    {
        pchReqRel = pchReq;
        pchActRel = pchAct;
            
        while (cchReq && *pchReq != _T('.'))
        {
            pchReq++;
            cchReq--;
        }

        while (cchAct && *pchAct != _T('.'))
        {
            pchAct++;
            cchAct--;
        }

        if (pchAct == pchActRel && !cchAct)
            pchAct = pchActRel = NULL;
            
        if (pchReq == pchReqRel && !cchReq)
            pchReq = pchReqRel = NULL;

        lCmp = CompareRelease(pchActRel, pchAct - pchActRel, pchReqRel, pchReq - pchReqRel);

        if (lCmp || (!cchReq && !cchAct))
            return(lCmp);

        if (cchReq)
        {
            Assert(*pchReq == _T('.'));
            pchReq++;
            cchReq--;
        }
        
        if (cchAct)
        {
            Assert(*pchAct == _T('.'));
            pchAct++;
            cchAct--;
        }
    }
}

//+------------------------------------------------------------------------
//
//  Overview:   ContainVersion
//
//  Synopsis:   Like compare version, but checks if pchAct is
//              contained in the set specified by pchReq.
//
//-------------------------------------------------------------------------
LONG
ContainVersion(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqRel;
    const TCHAR *pchActRel;
    LONG lCmp;

    for (;;)
    {
        pchReqRel = pchReq;
        pchActRel = pchAct;
            
        while (cchReq && *pchReq != _T('.'))
        {
            pchReq++;
            cchReq--;
        }

        while (cchAct && *pchAct != _T('.'))
        {
            pchAct++;
            cchAct--;
        }

        if (pchAct == pchActRel && !cchAct)
            pchAct = pchActRel = NULL;

        lCmp = CompareRelease(pchActRel, pchAct - pchActRel, pchReqRel, pchReq - pchReqRel);

        if (lCmp || !cchReq)
            return(lCmp);

        Assert(*pchReq == _T('.'));
        pchReq++;
        cchReq--;
        
        if (cchAct)
        {
            Assert(*pchAct == _T('.'));
            pchAct++;
            cchAct--;
        }
    }
}


//+------------------------------------------------------------------------
//
//  Class:      CIVersionVectorThunk
//
//  Synopsis:   OLE object that serves as interface to CVersions
//
//-------------------------------------------------------------------------
class CIVersionVectorThunk : public IVersionVector
{
public:
    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CIVerVector));
    CIVersionVectorThunk()       { _ulRefs = 1; }
    ~CIVersionVectorThunk()      { Detach(); }
    
    // IUnknown methods

    STDMETHOD(QueryInterface)(REFIID iid, LPVOID * ppv);
    STDMETHOD_(ULONG, AddRef)()  { Assert(_ulRefs); _ulRefs++; return 0; }
    STDMETHOD_(ULONG, Release)() { _ulRefs--; if (!_ulRefs) { delete this; return 0; } return _ulRefs; }

    // IVersionVector methods

    STDMETHOD(SetVersion)(const TCHAR *pch, const TCHAR *pchVal);
    STDMETHOD(GetVersion)(const TCHAR *pch, TCHAR *pchVal, ULONG *pcchVal);

    // Internal
    CIVersionVectorThunk(CVersions *pValues)
                    { _pVersions = pValues; _fDetached = FALSE; _ulRefs = 1; }
    void Detach()   { if (_pVersions) _pVersions->RemoveVersionVector(); _pVersions = NULL; }

    ULONG _ulRefs;
    BOOL _fDetached;
    CVersions *_pVersions;
};


//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk
//
//  Synopsis:   Simple QI Impl
//
//-------------------------------------------------------------------------
STDMETHODIMP
CIVersionVectorThunk::QueryInterface(REFIID iid, void **ppv)
{
    if (iid == IID_IUnknown || iid == IID_IVersionVector)
        *ppv = (IVersionVector*)this;
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
    
    AddRef();
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk::SetVersion
//
//  Synopsis:   Passthrough, fail when detached
//
//-------------------------------------------------------------------------
HRESULT
CIVersionVectorThunk::SetVersion(const TCHAR *pch, const TCHAR *pchVal)
{
    if (!_pVersions)
        return E_FAIL;

    RRETURN(_pVersions->SetVersion(
        pch, pch ? _tcslen(pch) : 0, pchVal, pchVal ? _tcslen(pchVal) : 0));
}

//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk::GetVersion
//
//  Synopsis:   Passthrough, fail when detached
//
//-------------------------------------------------------------------------
HRESULT
CIVersionVectorThunk::GetVersion(const TCHAR *pch, TCHAR *pchVal, ULONG *pcchVal)
{
    if (!_pVersions)
        return E_FAIL;

    RRETURN(_pVersions->GetVersion(pch, _tcslen(pch), pchVal, pcchVal));
}



//+------------------------------------------------------------------------
//
//  Class:      CVersions
//
//-------------------------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Member:     CVersions::Init
//
//  Synopsis:   Set up reserved string values
//
//-------------------------------------------------------------------------
HRESULT
CVersions::Init()
{
    HRESULT hr;
    
    hr = THR(InitAssoc(&_pAssocIf, _T("if"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocEndif, _T("endif"), 5));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocTrue, _T("true"), 4));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocFalse, _T("false"), 5));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocLt, _T("lt"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocLte, _T("lte"), 3));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocGt, _T("gt"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocGte, _T("gte"), 3));
    if (hr)
        goto Cleanup;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    hr = THR(InitAssoc(&_pAssocInclude, _T("include"), 7));
    if (hr)
        goto Cleanup;
#endif

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::~CVersions
//
//  Synopsis:   Free all the strings stored in the CAssocArray
//
//-------------------------------------------------------------------------
CVersions::~CVersions()
{
    Commit(); // detach any IVersionVector thunk

    Assert(!_asaValues._fStatic); // can't free stuff if this is false!
    
    CAssoc **ppAssoc = _asaValues.VolatileHashTablePtr();

    for (DWORD c = _asaValues._mHash; c; c--, ppAssoc++)
    {
        if (*ppAssoc && (*ppAssoc)->_number)
        {
            ((CStr *)&((*ppAssoc)->_number))->Free();
        }
    }

    _asaValues.Deinit();
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::InitAssoc
//
//  Synopsis:   Set up reserved string values
//
//-------------------------------------------------------------------------
HRESULT
CVersions::InitAssoc(const CAssoc **ppAssoc, const TCHAR *pch, ULONG cch)
{
    *ppAssoc = _asaValues.AddAssoc(0, pch, cch, HashStringCiDetectW(pch, cch, 0));
    if (!*ppAssoc)
        RRETURN(E_OUTOFMEMORY);

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::GetIVersionVector
//
//  Synopsis:   Create or retrieve IVersionVector object
//
//-------------------------------------------------------------------------
HRESULT
CVersions::GetVersionVector(IVersionVector **ppIVersionVector)
{
    if (_fCommitted)
    {
        Assert(!_pThunk);
        RRETURN(E_FAIL);
    }
    
    if (_pThunk)
        RRETURN(_pThunk->QueryInterface(IID_IVersionVector, (void**)ppIVersionVector));
        
    CIVersionVectorThunk *pThunk = new CIVersionVectorThunk(this);
    if (!pThunk)
        RRETURN(E_OUTOFMEMORY);

    _pThunk = pThunk;

    *ppIVersionVector = (IVersionVector*)pThunk;
    
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::Commit
//
//  Synopsis:   Become read-only.
//
//              Detach IVersionVector object and prevent IVersionVector objects
//              from being created in the future.
//
//-------------------------------------------------------------------------
void
CVersions::Commit()
{
    if (_pThunk)
        _pThunk->Detach();

    Assert(!_pThunk);
    _fCommitted = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::IsReserved
//
//  Synopsis:   Returns TRUE for pAssocs that match a reserved value
//
//-------------------------------------------------------------------------
BOOL
CVersions::IsReserved(const CAssoc *pAssoc) const
{
    return (pAssoc && !pAssoc->_number &&
            (pAssoc == _pAssocIf ||
             pAssoc == _pAssocEndif ||
             pAssoc == _pAssocTrue ||
             pAssoc == _pAssocFalse ||
             pAssoc == _pAssocLt ||
             pAssoc == _pAssocLte ||
             pAssoc == _pAssocGt ||
             pAssoc == _pAssocGte
#ifdef CLIENT_SIDE_INCLUDE_FEATURE
             || pAssoc == _pAssocInclude
#endif             
            ));
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::SetVersion
//
//  Synopsis:   Sets the version value corresponding to the given string
//
//-------------------------------------------------------------------------
HRESULT
CVersions::SetVersion(const TCHAR *pch, ULONG cch, const TCHAR *pchVal, ULONG cchVal)
{
    HRESULT hr = S_OK;
    DWORD hash;
    const CAssoc *pAssoc;
    DWORD_PTR val;

    Assert(sizeof(CStr) == sizeof(val));
    
    val = 0;
    
    if (pchVal)
    {
        hr = THR(((CStr *)&val)->Set(pchVal, cchVal));
        if (hr)
            goto Cleanup;
    }

    hash = HashStringCiDetectW(pch, cch, 0);
    
    pAssoc = _asaValues.AssocFromStringCi(pch, cch, hash);
    
    if (pAssoc)
    {
        // precaution: not allowed to set reserved values
        if (IsReserved(pAssoc))
        {
            hr = E_FAIL;
            goto Cleanup;
        }

        if (pAssoc->_number)
        {
            ((CStr *)&(pAssoc->_number))->Free();
        }
            
        Assert(!_asaValues._fStatic);
        const_cast<CAssoc *>(pAssoc)->_number = val;
    }
    else if (val) // don't bother adding zero - equivalent to undefined
    {
        pAssoc = _asaValues.AddAssoc(val, pch, cch, hash);
        if (!pAssoc)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

    val = 0;

Cleanup:

    if (val)
    {
        ((CStr *)&val)->Free();
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::GetVersion
//
//  Synopsis:   Gets the version value corresponding to the given string
//
//              If insufficient buffer size, *pcch returns required
//              buffer size.
//
//              If successful, *pcch returns string length of version
//              value, or (ULONG)-1 if there is no version value.
//
//-------------------------------------------------------------------------
HRESULT
CVersions::GetVersion(const TCHAR *pch, ULONG cch, TCHAR *pchVer, ULONG *pcchVer)
{
    const CAssoc *pAssoc;
    DWORD_PTR val;
    ULONG cchVer;
    
    pAssoc = GetAssoc(pch, cch);
    val = pAssoc ? pAssoc->Number() : 0;

    cchVer = val ? ((CStr *)&val)->Length() + 1 : 0;

    if (!*pcchVer)
    {
        *pcchVer = cchVer;
        return S_OK;
    }

    if (*pcchVer < cchVer)
    {
        *pcchVer = cchVer;
        return E_FAIL;
    }

    if (cch)
    {
        memcpy(pchVer, (void*)val, cchVer * sizeof(TCHAR));
    }

    *pcchVer = cchVer - 1;

    return S_OK;
}



//+------------------------------------------------------------------------
//
//  Member:     CVerTok
//
//  Synopsis:   The tokenizer for version expressions
//
//              The tokenizer recognizes the following expressions:
//
//              Word    = ([a-z] | [A-Z]) ([0-9] | [a-z] | [A-Z])* (space)*
//              Version = [0-9] ([0-9] | [a-z] | [A-Z] | '.')* (space)*
//              Char    = (non-[a-z][A-Z][0-9]) (space)*
//
//-------------------------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Class:      CVerTok
//
//  Synopsis:   Tokenizer for the CVersions evaluator
//
//-------------------------------------------------------------------------
class CVerTok
{
public:
    enum CT
    {
        CT_NULL = 0,
        CT_WORD = 1,
        CT_VERS = 2,
        CT_CHAR = 3,
    };

    void Init(CVersions *pValues, const TCHAR *pch, ULONG cch);
    void Advance();

    BOOL IsIf()     { return(_ct == CT_WORD && _pVersions->IsIf(_pAssoc)); }
    BOOL IsEndif()  { return(_ct == CT_WORD && _pVersions->IsEndif(_pAssoc)); }
    BOOL IsTrue()   { return(_ct == CT_WORD && _pVersions->IsTrue(_pAssoc)); }
    BOOL IsFalse()  { return(_ct == CT_WORD && _pVersions->IsFalse(_pAssoc)); }
    BOOL IsLt()     { return(_ct == CT_WORD && _pVersions->IsLt(_pAssoc)); }
    BOOL IsLte()    { return(_ct == CT_WORD && _pVersions->IsLte(_pAssoc)); }
    BOOL IsGt()     { return(_ct == CT_WORD && _pVersions->IsGt(_pAssoc)); }
    BOOL IsGte()    { return(_ct == CT_WORD && _pVersions->IsGte(_pAssoc)); }
#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    BOOL IsInclude(){ return(_ct == CT_WORD && _pVersions->IsInclude(_pAssoc)); }
#endif
    BOOL IsOr()     { return(_ct == CT_CHAR && _ch == _T('|')); }
    BOOL IsAnd()    { return(_ct == CT_CHAR && _ch == _T('&')); }
    BOOL IsNot()    { return(_ct == CT_CHAR && _ch == _T('!')); }
    BOOL IsLParen() { return(_ct == CT_CHAR && _ch == _T('(')); }
    BOOL IsRParen() { return(_ct == CT_CHAR && _ch == _T(')')); }
    BOOL IsWord()   { return(_ct == CT_WORD); }
    BOOL IsVersion(){ return(_ct == CT_VERS); }
    BOOL IsNull()   { return(_ct == CT_NULL); }

    LONG Ch()        { Assert(_ct == CT_CHAR); return _ch; }
    const TCHAR *Pch() { return _pch; }
    ULONG CchRemaining() { return _cch; }
    
    void ActVer(const TCHAR **ppch, ULONG *pcch);
    void ReqVer(const TCHAR **ppch, ULONG *pcch) { Assert(_ct == CT_VERS); *ppch = _pchVer; *pcch = _cchVer; }

private:
    CVersions *_pVersions;
    const TCHAR *_pch;
    ULONG _cch;
    
    CT _ct;
    
    const CAssoc *_pAssoc;
    const TCHAR *_pchVer;
    ULONG _cchVer;
    TCHAR _ch;
};

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::Init
//
//  Synopsis:   Attaches a string to be tokenized,
//              and an instance of CVersions for identifier lookups
//
//-------------------------------------------------------------------------
void
CVerTok::Init(CVersions *pValues, const TCHAR *pch, ULONG cch)
{
    _pVersions = pValues;
    _pch = pch;
    _cch = cch;
}

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::Advance
//
//  Synopsis:   Scans characters and loads value of next token
//
//-------------------------------------------------------------------------
void
CVerTok::Advance()
{
    if (!_cch)
    {
        _ct = CT_NULL;
        return;
    }

    const TCHAR *pch = _pch;
    const TCHAR *pchStart = pch;
    ULONG cch = _cch;
    
    if (ISALPHA(*pch))
    {
        // Scan word
        do
        {
            cch--;
            pch++;
        } while (cch && (ISALPHA(*pch) || ISDIGIT(*pch) || *pch == _T('_')));
        
        _pAssoc = _pVersions->GetAssoc(pchStart, pch - pchStart);

        _ct = CT_WORD;
    }
    else if (ISDIGIT(*pch))
    {
        _ct = CT_VERS;
        _pchVer = pch;

        while (ISALPHA(*pch) || ISDIGIT(*pch) || *pch == _T('.'))
        {
            pch++;
            cch--;
        }
        
        _cchVer = pch - _pchVer;
    }
    else if (!ISSPACE(*pch))
    {
        // Scan one symbol
        _ct = CT_CHAR;
        _ch = *pch;
        cch--;
        pch++;
    }

    // skip space
    while (cch && ISSPACE(*pch))
    {
        cch--;
        pch++;
    }

    _cch = cch;
    _pch = pch;
}

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::ActVer
//
//  Synopsis:   Looks up the actual version for the specified component
//
//-------------------------------------------------------------------------
void
CVerTok::ActVer(const TCHAR **ppchVer, ULONG *pcchVer)
{
    Assert(_ct == CT_WORD);

    if (_pAssoc)
    {
        *pcchVer = ((CStr *)&(_pAssoc->_number))->Length();
        *ppchVer = *((CStr *)&(_pAssoc->_number));
    }
    else
    {
        *pcchVer = 0;
        *ppchVer = NULL;
    }
}


//+------------------------------------------------------------------------
//
//  Class:      CVerState
//
//  Synopsis:   Unit of state for the parser for CVersions evaluator
//
//              Consists of a state and a single current value
//
//-------------------------------------------------------------------------
enum VSTATE
{
    VSTATE_NULL = 0,
    VSTATE_OR,          // OR
    VSTATE_ORLOOP,
    VSTATE_AND,         // AND
    VSTATE_ANDLOOP,
    VSTATE_NOT,         // NOT
    VSTATE_NOTNOT,
    VSTATE_TERM,        // TERM
    VSTATE_TERMNOT,
    VSTATE_TERMPAREN,
    VSTATE_CMP,         // CMP
};

class CVerState
{
public:
    VSTATE  _cs  : 7;
    ULONG   _val : 1;
};



//+------------------------------------------------------------------------
//
//  Class:      CVerStack
//
//  Synopsis:   Stack of state for the parser for CVersions evaluator
//
//              Allows recursive-descent on a compressed-storage stack.
//
//-------------------------------------------------------------------------
#define MAX_VER_STACK_DEPTH 128 // Each paren counts for two in depth

class CVerStack : public CVerState
{
public:
    CVerStack() : _ary(Mt(CVerStackAry))  { _cs = VSTATE_NULL; _val = _valRet = 0; }
    ULONG _valRet : 1;
    
    CStackDataAry<CVerState, MAX_VER_STACK_DEPTH> _ary;

    HRESULT Call(VSTATE csNew, VSTATE csRet);
    void Ret(ULONG val);
    
    HRESULT Call(VSTATE csNew, ULONG valNew, VSTATE csRet)
                                            { HRESULT hr = Call(csNew, csRet); _val = valNew; return(hr); }
    void Go(VSTATE csNew)                   { _cs = csNew; }
    void Go(VSTATE csNew, ULONG valNew)     { _cs = csNew; _val = valNew; }

    ULONG Depth()                           { return _ary.Size(); }
};

//+------------------------------------------------------------------------
//
//  Member:     CVerStack::Call
//
//  Synopsis:   Pushes a return state and current value on the stack,
//              then jumps to a specified new state.
//
//-------------------------------------------------------------------------
HRESULT
CVerStack::Call(VSTATE csNew, VSTATE csRet)
{
    HRESULT hr;
    
    _cs = csRet;
    
    hr = THR(_ary.AppendIndirect((CVerState *)this));
    
    _cs = csNew;
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVerStack::Ret
//
//  Synopsis:   Pops a return state and value from the stack, and
//              sets _valRet as specified.
//
//-------------------------------------------------------------------------
void
CVerStack::Ret(ULONG val)
{
    Assert(_ary.Size());
    
    CVerState *pState = _ary + _ary.Size() - 1;
    _valRet = val;
    _cs = pState->_cs;
    _val = pState->_val;
    _ary.Delete(pState - _ary);
}




//+------------------------------------------------------------------------
//
//  Member:     CVersions::Evaluate
//
//  Synopsis:   The recursive-descent parser to evaluate version
//              expressions.
//
//              The grammar is implemented as follows
//
//              Expression -> OR
//
//              OR   -> AND | AND '|' OR
//                      returns TRUE/FALSE
//              AND  -> NOT | NOT '&' AND
//                      returns TRUE/FALSE
//              NOT  -> TERM | '!' TERM
//                      returns TRUE/FALSE
//              TERM -> CMP | '(' OR ')'
//                      returns TRUE/FALSE
//              CMP  -> 'lt' word version |
//                      'gt' word version |
//                      'lte' word version |
//                      'gte' word version |
//                      word version |
//                      word |
//                      'true' |
//                      'false'
//                      returns TRUE/FALSE
//
//-------------------------------------------------------------------------

HRESULT
CVersions::Evaluate(LONG *pRetval, const TCHAR *pch, ULONG cch)
{
    HRESULT hr;
    CVerTok tok;
    CVerStack s;

    tok.Init(this, pch, cch);
    tok.Advance();

    hr = THR(s.Call(VSTATE_OR, VSTATE_NULL));
    if (hr)
        goto Cleanup;
    
    for (;;)
    {
        if (s.Depth() >= MAX_VER_STACK_DEPTH)
            goto Syntax;
            
        switch (s._cs)
        {
        case VSTATE_NULL:
            goto Done;

        // OR   -> AND | AND '|' OR
        //          returns TRUE/FALSE
        
        case VSTATE_OR:
            hr = THR(s.Call(VSTATE_AND, 1, VSTATE_ORLOOP));
            if (hr)
                goto Cleanup;
            break;

        case VSTATE_ORLOOP:
            s._val |= s._valRet;
                
            if (tok.IsOr())
            {
                tok.Advance();
                s.Go(VSTATE_OR);
                break;
            }

            s.Ret(s._val);
            break;

        // AND  -> NOT | NOT '&' AND
        //          returns TRUE/FALSE
        
        case VSTATE_AND:
            hr = THR(s.Call(VSTATE_NOT, VSTATE_ANDLOOP));
            if (hr)
                goto Cleanup;
            break;

        case VSTATE_ANDLOOP:
            s._val &= s._valRet;
                
            if (tok.IsAnd())
            {
                tok.Advance();
                s.Go(VSTATE_AND);
                break;
            }

            s.Ret(s._val);
            break;

        // NOT  -> TERM | '!' NOT
        //          returns TRUE/FALSE

        case VSTATE_NOT:
            if (!tok.IsNot())
            {
                s.Go(VSTATE_TERM);
                break;
            }

            tok.Advance();

            // rather than calling, loop so as not to stack with (!!!!!foo)
            
            if (!tok.IsNot())
            {
                hr = THR(s.Call(VSTATE_TERM, VSTATE_NOTNOT));
                if (hr)
                    goto Cleanup;
                break;
            }

            tok.Advance();
            break;

        case VSTATE_NOTNOT:
        
            s.Ret(!s._valRet);
            break;

        // TERM -> CMP | '(' OR ')'
        //          returns TRUE/FALSE

        case VSTATE_TERM:
        
            if (tok.IsLParen())
            {
                tok.Advance();
                hr = THR(s.Call(VSTATE_OR, 0, VSTATE_TERMPAREN));
                if (hr)
                    goto Cleanup;
                break;
            }

            s.Go(VSTATE_CMP);
            break;
            
        case VSTATE_TERMPAREN:

            if (!tok.IsRParen())
                goto Syntax;
                
            tok.Advance();
            s.Ret(s._valRet);
            break;

        // CMP  -> word |
        //         word version |
        //         'lt' word version |
        //         'gt' word version |
        //         'lte' word version |
        //         'gte' word version |
        //         'true' |
        //         'false'
        //          returns TRUE/FALSE
        
        case VSTATE_CMP:

            {
                enum { LT, LTE, X, GTE, GT, T, F } comp;
                LONG lRes;
                const TCHAR *pchActVer;
                ULONG cchActVer;
                const TCHAR *pchReqVer;
                ULONG cchReqVer;
                
                if (tok.IsTrue())
                    comp = T;
                else if (tok.IsFalse())
                    comp = F;
                else if (tok.IsLt())
                    comp = LT;
                else if (tok.IsLte())
                    comp = LTE;
                else if (tok.IsGt())
                    comp = GT;
                else if (tok.IsGte())
                    comp = GTE;
                else
                    comp = X;

                if (comp != X)
                    tok.Advance();

                if (comp == T || comp == F)
                {
                    s.Ret(comp == T);
                    break;
                }
                
                if (!tok.IsWord())
                    goto Syntax;

                tok.ActVer(&pchActVer, &cchActVer);
                
                tok.Advance();

                if (!tok.IsVersion())
                {
                    if (comp != X)
                        goto Syntax;

                    s.Ret(!!pchActVer);
                    break;
                }

                if (!pchActVer)
                {
                    tok.Advance();
                    s.Ret(!!(comp == LT || comp == LTE));
                    break;
                }

                tok.ReqVer(&pchReqVer, &cchReqVer);

                Assert(cchReqVer && cchActVer);

                lRes = ContainVersion(pchActVer, cchActVer, pchReqVer, cchReqVer);

                tok.Advance();
                
                if (lRes < 0 && (comp == LT || comp == LTE) ||
                    !lRes && (comp == LTE || comp == X || comp == GTE) ||
                    lRes > 0 && (comp == GT || comp == GTE))
                    s.Ret(1);
                else
                    s.Ret(0);

                break;
            }
        }
    }

Syntax:

    // syntax error
    *pRetval = -1;
    RRETURN(hr);
    
Done:

    Assert( s._valRet == 1 ||
            s._valRet == 0);
    Assert(!hr);
            
    if (!tok.IsNull())
        *pRetval = -1;
    else
        *pRetval = (s._valRet == 0 ? 0 : 1);
    
    return(S_OK);

Cleanup:

    goto Syntax;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::EvaluateConditional
//
//  Synopsis:   Parses "if (Expression)" or "endif" and returns
//
//              COND_NULL       - syntax error
//              COND_IF_TRUE    - if TRUE
//              COND_IF_FALSE   - if FALSE
//              COND_ENDIF      - endif
//
//-------------------------------------------------------------------------

HRESULT
CVersions::EvaluateConditional(CONDVAL *pRetval, const TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    CVerTok tok;
    LONG lBool;
    CONDVAL retval = COND_NULL;

    tok.Init(this, pch, cch);
    tok.Advance();

    if (tok.IsIf())
    {
        hr = THR(Evaluate(&lBool, tok.Pch(), tok.CchRemaining()));
        if (hr)
            goto Cleanup;

#if DBG == 1
        {
            TCHAR ach[64];
            ULONG cch = min(tok.CchRemaining(), (ULONG)63);
            memcpy(ach, tok.Pch(), cch * sizeof(TCHAR));
            ach[cch] = 0;
            
            TraceTag((tagHtmVer, "\"%ls\" evaluated to %d", ach, lBool));
        }
#endif

        retval = (lBool < 0 ? COND_SYNTAX : lBool ? COND_IF_TRUE : COND_IF_FALSE);
        goto Cleanup;
    }
    
    if (tok.IsEndif())
    {
        // CONSIDER: is it a syntax error to have tokens after "endif"?
        retval = COND_ENDIF;
        goto Cleanup;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (tok.IsInclude())
    {
        retval = COND_INCLUDE;
        goto Cleanup;
    }
#endif

    retval = COND_NULL;

Cleanup:
    *pRetval = retval;
    
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Global:     g_pVersions
//
//  Synposis:   Process cache for versions cache
//
//-------------------------------------------------------------------------
CVersions * g_pVersions = NULL;

CVersions *
GetGlobalVersions()
{   
    // Take it local to avoid a race
    CVersions *pVersions = g_pVersions;
    
    if (pVersions)
        pVersions->AddRef();
        
    return pVersions;
}

BOOL
SuggestGlobalVersions(CVersions *pVersions)
{
    LOCK_GLOBALS;
    Assert(pVersions);
    if (!g_pVersions)
    {
        // Force CVersions object to become read-only before dropping it in global
        pVersions->Commit();
        pVersions->AddRef();
        g_pVersions = pVersions;
        return TRUE;
    }

    return FALSE;
}

void
DeinitGlobalVersions()
{
    if (g_pVersions)
    {
        g_pVersions->Release();
        g_pVersions = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmtok.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmtok.cxx
//
//  Contents:   CHtmPre::Tokenize
//
//              Split out from htmpre.cxx for better code generation
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#ifndef X_ENTITY_H_
#define X_ENTITY_H_
#include "entity.h"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifdef WIN16
#ifndef X_URLMKI_H_
#define X_URLMKI_H_
#include "urlmki.h"
#endif
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_HTMTOK_HXX_
#define X_HTMTOK_HXX_
#include "htmtok.hxx"
#endif

#define HTMPRE_BLOCK_SIZE      4096 // assumed to be power of 2

#define CCH_LARGE_TOKEN       16384 // after text buf grows to 16K, use exponential allocation
#define CCH_OVERFLOW_TOKEN  1048576 // stop growing after a megabyte
#define MAX_ATTR_COUNT        16383 // Allow at most 16K-1 attribute-value pairs

ExternTag(tagPalette);
ExternTag(tagToken);

PerfDbgExtern(tagHtmPre);
PerfDbgExtern(tagHtmPreOneCharText);
PerfDbgExtern(tagPerfWatch);

DWORD HashString(const TCHAR *pch, DWORD len, DWORD hash);
extern HRESULT SetUrlDefaultScheme(const TCHAR *pchHref, CStr *pStr);
extern BOOL _7csnziequal(const TCHAR *string1, DWORD cch, const TCHAR *string2);

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Tokenize
//
//  Synopsis:   The main method of the tokenizer.
//
//              Advances _pch up to _pchEnd, producing tag/text output
//              and saving state as required.
//
//-------------------------------------------------------------------------
//
// Description:
//
// The tokenizer is designed to mimic Netscape 3.0 parsing rules.
//
// * space is ascii 9-13 and 32.
// * markup begins with < and &
// * there are three quote chars, ' " and `, and they only self-match
// * tags begin with <alpha, <!, <?, or </
// * tags end with a > which does not lie inside a quote
// * tag names can contain any char except a space or a >
// * attribute names can be quoted (closing quote does not terminate name)
// * unquoted attribute names contain any char (incl quote) except sp, >, or =
// * attribute values can be quoted (closing quote does terminate value)
// * unquoted values contain any char (incl quote) except sp or >
// * EOF in the middle of a tag causes initial < to be treated as text
// * comments begin with <!-- and close with -->
// * in addition, comments can have fewer than 4 dashes, e.g., <!-->
// * EOF in the middle of a comment causes comment to be treated as <! tag
// * all markup in a comment is ignored, even inside literal tags
// * comments inside literal tags are treated as text
// * literal tags can suppress either entities or tags or both
// * plain text mode ignores all markup, including </PLAINTEXT>
// * numbered entities can have an arbitrary number of digits
// * &#0 is not a legal numbered entity (treated as text)
// * a semicolon after an entity is eaten, but a space is not
// * CRLF collapses to CR, but LFCR does not (it becomes CRCR)
// * document.write output appears directly after </SCRIPT>
//
// Following are regular expressions representing the tokenizer:
// (n = not, s = space, q = quote, a = alphabetic, d = digit)
//
// Comment:
// <!--((-)*|(.)*--)>
//
// Begin tag:
// <(a)(ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// End tag:
// </(s)*[(q)(nq)*(q)](ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// Decl tag:
// <!(ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// Entity:
// &(entity|(#d(d)*))[;]
//
// Everything else is text.
//
//-------------------------------------------------------------------------

#if DBG == 1
#define TraceState(state) if (IsTagEnabled(tagToken)) {TraceStateImpl(#state, pchStart, pch, pchEnd);}

#define PRETTY_CHAR(ch) ((ch) < 32 ? _T('~') : (ch) > 127 ? _T('@') : (ch))


void TraceStateImpl(char *state, TCHAR *pchStart, TCHAR *pchAt, TCHAR *pchEnd)
{
    TCHAR achBefore[12 + 1];
    TCHAR achAfter[48 + 1];
    TCHAR *pch;
    TCHAR *pchTo;
    static c=0;

    achBefore[ARRAY_SIZE(achBefore) - 1] = _T('\0');
    achAfter[ARRAY_SIZE(achAfter) - 1] = _T('\0');

    pch = pchAt - (ARRAY_SIZE(achBefore) - 1);
    pchTo = achBefore;

    while (pch < pchStart)
    {
        *pchTo++ = _T('*');
        pch++;
    }

    while (pch < pchAt)
    {
        *pchTo = PRETTY_CHAR(*pch);
        pchTo++;
        pch++;
    }

    pchTo = achAfter + (ARRAY_SIZE(achAfter) - 1) - 1;
    pch = pchAt + (ARRAY_SIZE(achAfter) - 1);

    while (pch >= pchEnd && pch > pchAt)
    {
        *pchTo-- = _T('*');
        pch--;
    }

    while (pch > pchAt)
    {
        *pchTo = PRETTY_CHAR(*pch);
        pchTo--;
        pch--;
    }

    TraceTag((tagToken, "%8d %14s:  %ls{%lc}%ls", c++, state, achBefore, PRETTY_CHAR(*pchAt), achAfter));
}

#undef PRETTY_CHAR

#else
#define TraceState(state)
#endif

// CHtmPre keeps copies of a bunch of the instance variables on the stack to allow for
// compiler optimizations.  These macros save all the local variables back to the instance
// variables before calling functions that might rely / alter the instance variables.
#define SAVE_STACKVAR_STATE()  { _pch = pch;  _pchEnd = pchEnd;  _pchStart = pchStart;  _state = state; }
#define RESTORE_STACKVAR_STATE()  { pch = _pch; ch = *pch; pchEnd = _pchEnd; pchStart = _pchStart; state = _state; }

HRESULT
CHtmPre::Tokenize()
{
    // nothing to tokenize
    if (!_pch)
        return S_OK;

    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Tokenize");

    static const TCHAR achPIXmlNs[]       = PI_XMLNS;  // _T("XML:NAMESPACE");
    static const TCHAR achPIExtendedTag[] = PI_EXTENDEDTAG; // _T("?IMPORT");
    static const TCHAR achPIPXml[]        = PI_PRINTXML; // _T("PXML");

    TCHAR * pch        = _pch;
    TCHAR * pchEnd     = _pchEnd;
    TCHAR * pchStart   = _pchStart;
    TCHAR * pchWord    = _pchWord;
    ULONG   state      = _state;
    TCHAR   chQuote    = _chQuote;
    TCHAR   ch         = *pch;
    XCHAR   chEnt;
    HRESULT hr;

    if (_fTopLevelRedirect && !_fPostStarted)
    {
        // Note: Posting this token will kickstarted the post which sets the security ID 
        // on CDwndoc and CMarkup in OnPostStart so that any subsequent downloads will use 
        // the correct redirected security ID from CDwnDoc and CMarkup instead of the old
        // pre-redirect one

        CHtmTag *pht = NULL;
        
        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_POSTSTART, &pht));
        if (hr)
            goto Error;

        _fPostStarted = TRUE;

        // This will cause the PreParser thread to be suspended and the post to start
        hr = E_PENDING;
        goto Cleanup;
    }

    //Straight assignments are faster than branching decisions
    _fPostStarted = TRUE;

    // scan every avaliable character
    while (ch)
    {
        Assert(     ( _cLiteral > 0 && _etagLiteral )
               ||   ( _cLiteral == 0 && !_etagLiteral ) );
        Assert(pch < pchEnd);
        Assert(ch == *pch);

        switch (state)
        {

        case TS_PLAINTEXT:

            TraceState(PLAINTEXT);

            // pchStart: first text char not yet output

            // In plaintext, everything is text
            pch = pchEnd;
            ch  = *pch;

            // fallthrough

        case TS_TEXT:
        TEXT:

            if (_cOutputInsert)
            {
                hr = THR(OutputInserts());
                if (hr)
                    goto Cleanup;
            }

            // Optimization: deal with leading CRLF/LF
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);
                
                if (ch == _T('\n'))
                    ch = *(++pch);
            }
            else if (ch == _T('\n') && pch == pchStart)
            {
                if (!_fEndCR)
                    _nLine += _fCount;
                    
                ch = *(++pch);
            }

        QUICKTEXT:

            TraceState(TEXT);

            // pchStart: first text char not yet output
            // pch:      first char not yet known to be text

            // skip to first special char
            while (ISTXTCH(ch))
                ch = *(++pch);

            // count line  (count \r or \n, but not \n immediately following \r)
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);
                
                if (ch == _T('\n'))
                    ch = *(++pch);
                    
                goto QUICKTEXT;
            }

            if (ch == _T('\n'))
            {
                if (*(pch-1) != _T('\r'))
                    _nLine += _fCount;
                ch = *(++pch);
                goto QUICKTEXT;
            }

            if (pch > pchStart && !_fSuppressLeadingText)
            {
                BOOL fAscii = _pchAscii <= _pchStart;

                if (_etagEchoSourceEnd)
                {
                    hr = THR(SaveSource(pchStart, PTR_DIFF(pch, pchStart)));
                    if (hr)
                        goto Cleanup;
                }

                #if DBG==1 || defined(PERFTAGS)
                if (IsPerfDbgEnabled(tagHtmPreOneCharText))
                {
                    for (TCHAR * pchT = pchStart; pchT < pch; ++pchT)
                    {
                        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchT, 1, fAscii));
                        if (hr)
                            goto Error;
                    }
                }
                else
                #endif
                {
                    TraceTag((tagToken, "   OutputText %d", PTR_DIFF(pch, pchStart)));
                    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, PTR_DIFF(pch, pchStart), fAscii));
                    if (hr)
                        goto Error;
                }
            }

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;

            // end of available buffer
            if (!ch)
                break;

            // possible entity
            if (ch == _T('&'))
            {
                state = _fLiteralEnt ? TS_TEXT : TS_ENTOPEN;
                ch = *(++pch);      // at '&'+1
                break;
            }

            Assert(ch == _T('<'));

            // possible tag/comment/decl
            state = TS_TAGOPEN;
            ch = *(++pch);      // at '<'+1

            // end of available buffer
            if (!ch)
                break;

            // fallthrough

        case TS_TAGOPEN:

            TraceState(TAGOPEN);

            // pchStart: at '<'
            // pch:      at '<'+1

            // possibly not a tag
            if ((!ISALPHA(ch) || ( _etagLiteral && _etagLiteral != ETAG_GENERIC_NESTED_LITERAL ) ) && ch != _T('/'))
            {
                // unusual markup: <!, <%, <?

                if (ch == _T('!'))
                {
                    state = TS_TAGBANG;
                    ch = *(++pch);
                    goto TAGBANG; // withstands \0
                }
                else if (ch == _T('%'))
                {
                    state = TS_TAGASP;
                    ch = *(++pch);
                    goto TAGASP;
                }
                else if (ch == _T('?'))
                {
                    state = TS_TAGSCAN;
                    ch = *(++pch);
                    goto TAGSCAN;
                }

                // not markup
                state = TS_TEXT;
                goto TEXT;
            }

            state = TS_TAGSCAN;
            ch = *(++pch);

            // fallthrough

        // For Netscape compatibility: when parsing a tag, begin by finding the
        // ending '>'. Any > hidden by quotes don't count so must match quotes
        // according to Netscape rules.

        // In this phase, Netscape defines a matchable quote as ', ", or `
        // preceded by a space or an =.

        TAGSCAN:
        case TS_TAGSCAN:
            // pchStart: at '<'
            // pch:      at next char in tag not in quote

            TraceState(TAGSCAN);

            while (ISTAGCH(ch))
                ch = *(++pch);

            // found a tag!
            if (ch == _T('>'))
            {
                ULONG ulChars;
                DWORD otCode;

                // consume >
                ch = *(++pch);

                // Treat <!...> and <?...> tags as comments, except <?XML:namespace > and <?IMPORT>
                if (!_etagLiteral &&
                    (*(pchStart+1) == _T('!') ||
                    (*(pchStart+1) == _T('?')) &&
                        0 != _tcsnicmp(achPIXmlNs,  -1, pchStart+2, ARRAY_SIZE(achPIXmlNs) - 1) &&
                        0 != _tcsnicmp(achPIExtendedTag, -1, pchStart+2, ARRAY_SIZE(achPIExtendedTag) - 1) &&
                        0 != _tcsnicmp(achPIPXml, -1, pchStart+2, ARRAY_SIZE(achPIPXml) - 1)))
                {
                    hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
                    if (hr)
                        goto Cleanup;
                        
                    _nLineStart = _nLine;
                    _fCountStart = _fCount;
                    if (pch > pchStart)
                        _fEndCR = (*(pch-1) == _T('\r'));
                    pchStart = pch;
                    state = TS_TEXT;
                    break;
                }

                // compute offset of start of tag
                if ((unsigned)(pchEnd - pchStart) > _ulCharsUncounted)
                    ulChars = _ulCharsEnd + _ulCharsUncounted - (pchEnd - pchStart);
                else
                    ulChars = _ulCharsEnd;

                SAVE_STACKVAR_STATE();
 
                // Tokenize the tag
                hr = THR(OutputTag(_nLineStart, ulChars, _fCountStart && _fCount, &otCode));
                if (hr)
                    goto Cleanup;
                    
                RESTORE_STACKVAR_STATE();

                if (otCode == OT_REJECT)
                {
                    // ROLLBACK for literal
                    _nLine = _nLineStart;
                    ch = *(pch = pchStart+1);
                    Assert(ch);
                    state = TS_TEXT;
                    goto TEXT;
                }
                Assert( ! otCode );

                TraceState(TAGOUT);

                state = _state;

                // We did output, so advance
                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;

                // after script tags we must suspend
                if (state == TS_SUSPEND)
                {
                    state = TS_TEXT;
                    hr = E_PENDING;
                    goto Cleanup;
                }

                else if (state == TS_NEWCODEPAGE)
                {
                    goto NEWCODEPAGE;
                }

                break;
            }

            // count line
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);

                if (ch == _T('\n'))
                    ch = *(++pch);
                
                goto TAGSCAN;
            }

            if (ch == _T('\n'))
            {
                Assert(pch > pchStart); // Can back up by one
                
                if (*(pch-1) != _T('\r'))
                    _nLine += _fCount;
                    
                ch = *(++pch);
                goto TAGSCAN;
            }

            if (!ch)
                break;

            Assert(ISQUOTE(ch));

            // Netscape's rule: quote counts only if preceded by space or =
            ch = *(pch-1);

            if (ISNONSP(ch) && ch != _T('='))
            {
                ch = *(++pch);
                goto TAGSCAN;
            }

            chQuote = *pch;
            ch = *(++pch);
            state = TS_TAGSCANQ;
            goto TAGSCANQ;

        TAGSCANQ:
        case TS_TAGSCANQ:

            TraceState(TAGSCANQ);

            while (ch)
            {

                if (ch == chQuote)
                {
                    state = TS_TAGSCAN;
                    ch = *(++pch);
                    goto TAGSCAN;
                }
                ch = *(++pch);
            }

            // end of available buffer
            break;

        TAGASP:
        case TS_TAGASP:

            // pchStart: at '<%'
            // pch:      at next char inside <% ...

            TraceState(TAGASP);

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto TAGASP;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            if (pch[-2] != _T('%'))
                goto TAGASP;

            if (!_etagLiteral)
            {
                hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
                if (hr)
                    goto Cleanup;

                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
            }

            // literal comment output as text
            state = TS_TEXT;
            break;

        TAGBANG:
        case TS_TAGBANG:

            TraceState(TAGBANG);

            // pchStart: at '<'
            // pch:      at '<!'+1

            // skip to nondash
            while (ISDASHC(ch))
                ch = *(++pch);

            // end of available buffer
            if (!ch)
                break;

            // detect conditional idioms
            if (ch == _T('[') && !_etagLiteral)
            {
                if (pch - pchStart == 2) // <![
                {
                    ch = *(++pch);
                    pchWord = pch;
                    _fCondComment = FALSE;
                    state = TS_CONDSCAN;
                    goto CONDSCAN; // withstands \0
                }

                if (pch - pchStart == 4) // <!--[
                {
                    ch = *(++pch);
                    pchWord = pch;
                    _fCondComment = TRUE;
                    state = TS_CONDSCAN;
                    goto CONDSCAN; // withstands \0
                }
            }

            // two or more dashes: comment
            if ( PTR_DIFF(pch, pchStart) >= 4 )
            {
                // NS: handle short comments
                pchWord = pch-2; // at '--'
                state = TS_TAGCOMDASH;
                break;
            }

            // literal: output noncomment as text
            if (_etagLiteral)
            {
                _nLine = _nLineStart;
                ch = *(pch = pchStart+1);
                state = TS_TEXT;
                goto TEXT; // break;
            }

            // open tag: tagname begins with '!'
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TAGSCAN;
            goto TAGSCAN;

        TAGCOMMENT:
        case TS_TAGCOMMENT:

            TraceState(TAGCOMMENT);

            // pchStart: at '<'
            // pch:      at first possible dash

            // skip to first dash
            while (ISNDASH(ch))
                ch = *(++pch);

            // end of available buffer
            if (!ch)
                break;

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto TAGCOMMENT;
            }

            // possible end of comment
            pchWord = pch;      // at '-'
            state = TS_TAGCOMDASH;

            // fallthrough

        case TS_TAGCOMDASH:

            TraceState(TAGCOMDASH);

            // pchStart: at '<'
            // pchWord:  at first '-'
            // pch:      at first possible nondash

            // skip to first nondash
            while (ISDASHC(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer
            if (!ch)
                break;

            // two dashes and a > end comment
            if (ch == _T('>') && (PTR_DIFF(pch, pchWord) >= 2))
            {
                ch = *(++pch); // past '>'

                if (!_etagLiteral)
                {
                    long cch = PTR_DIFF(pch, pchStart);

                    hr = THR(OutputComment(pchStart, cch));
                    if (hr)
                        goto Cleanup;

                    _nLineStart = _nLine;
                     _fCountStart = _fCount;
                    if (pch > pchStart)
                        _fEndCR = (*(pch-1) == _T('\r'));
                    pchStart = pch;
                    state = TS_TEXT;
                }
                else
                {
                    // literal comment output as text
                    state = TS_TEXT;
                }
                break;
            }

            // comment did not end
            state = TS_TAGCOMMENT;
            goto TAGCOMMENT; // break;

        case TS_ENTOPEN:

            // pchStart: at '&'
            // pch:      at '&'+1

            // looks like a number or hex entity
            if (ch == _T('#'))
            {
                ch = *(++pch);
                // looks like a hex entity
                if ((ch == _T('X')) || (ch == _T('x')))
                {
                    ch = *(++pch);
                    pchWord = pch; // at '&#X'+1
                    state = TS_ENTHEX;
                    break;
                }
                else
                {
                    // looks like a number entity
                    pchWord = pch; // at '&#'+1
                    state = TS_ENTNUMBER;
                    break;
                }
            }

            // looks like a named entity
            pchWord = pch; // at '&'+1
            _hash = 0;
            _chEnt = 0;
            state = TS_ENTMATCH;

            // fallthrough

        ENTMATCH:
        case TS_ENTMATCH:

            TraceState(ENTMATCH);

            // pchStart: at '&'
            // pchWord:  beyond last matched entity
            // pch       at first possible last-char-of-entity

            // NOTE: In IE5, unlike IE4, we no longer allow entities like &ltfoo to match.
            // The entity must end on a non-alphanumeric char, like &lt,foo
            // (This follows Nav 4.04+ etc.) - dbau

            // ANOTHER NOTE: in IE5, we decided to act like IE4 after all, so that
            // entities like &ltfoo _do_ match like &lt;foo.
            
            while (ISENTYC(ch) && (PTR_DIFF(pch + 1, pchStart + 1) <= MAXENTYLEN))
            {
                // grab extra char into hash
                _hash = HashString(pch, 1, _hash);

                // advance pch beyond extra char
                ch = *(++pch);

                // lookup HTML 1.0 entity (';' optional)
                chEnt = EntityChFromName(pchStart + 1, PTR_DIFF(pch, pchStart + 1), _hash);
                if (chEnt && IS_HTML1_ENTITY_CHAR(chEnt))
                {
                    _chEnt = chEnt;
                    pchWord = pch;
                }
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // lookup HTML 3.x entity (';' required)
            if (ch == _T(';'))
            {
                chEnt = EntityChFromName(pchStart + 1, PTR_DIFF(pch, pchStart + 1), _hash);
                if (chEnt)
                {
                    _chEnt = chEnt;
                    pchWord = pch;
                }
            }

            // not entity char give up and roll back to start
            if (!_chEnt)
            {
                _nLine = _nLineStart;
                ch = *(pch = pchStart+1);
                state = TS_TEXT;
                goto TEXT; // break;
            }

            // complete entity; rollback to word
            ch = *(pch = pchWord);
            
            // output the thing
            hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), _chEnt));
            if (hr)
                goto Error;

            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_ENTCLOSE;
            break;

        case TS_ENTCLOSE:

            TraceState(ENTCLOSE);

            // pchStart: at '&'
            // pch:      at possible ';'

            if (ch == _T(';'))
            {
                ch = *(++pch);
            }

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_TEXT;
            break;

        ENTNUMBER:
        case TS_ENTNUMBER:

            TraceState(ENTNUMBER);

            // pchStart: at '&'
            // pchWord:  at '&#'+1
            // pch:      at first possible nondigit

            // skip to first nondigit
            while (ISDIGIT(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // EOF or nondigit ; end of number entity
            chEnt = EntityChFromNumber(pchWord, PTR_DIFF(pch, pchWord));
            if (chEnt)
            {
                hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), chEnt));
                if (hr)
                    goto Error;

                Assert(pch > pchStart && *(pch-1) != _T('\r'));
                _fEndCR = FALSE;
                pchStart = pch;
                state = TS_ENTCLOSE;
                break;
            }

            // zero entity: output as text
            state = TS_TEXT;
            break;

        ENTHEX:
        case TS_ENTHEX:

            TraceState(ENTHEX);

            // pchStart: at '&'
            // pchWord:  at "&#X + 1
            // pch:      at first possible nonhex

            // skip to first nonhex
            while (ISHEX(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // EOF or nonhex ; end of hex entity
            if (ch == _T(';'))
            {
                chEnt = EntityChFromHex(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), chEnt));
                    if (hr)
                        goto Error;

                    Assert(pch > pchStart && *(pch-1) != _T('\r'));
                    _fEndCR = FALSE;
                    pchStart = pch;
                    state = TS_ENTCLOSE;
                    break;
                }
            }

            // zero entity or missing ';': output as text
            state = TS_TEXT;
            break;

    CONDSCAN:
        case TS_CONDSCAN:

            TraceState(CONDSCAN);

            // pchStart: at '<'
            // pchWord:  at '<!['+1     !_fCondComment
            // pchWord:  at '<!--]'+1   _fCondComment
            // pch:      at first possible '>'

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto CONDSCAN;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            {
                CONDVAL result;
                BOOL fComment;
                fComment = (pch[-2] == _T('-'));

                if (!_pVersions ||
                    fComment ?
                    pch < pchWord + 4 || pch[-2] != _T('-') || pch[-3] != _T('-') || pch[-4] != _T(']'):
                    pch < pchWord + 2 || pch[-2] != _T(']'))
                {
                    // was not well-formed ']>' or ']-->': treat as ordinary tag or comment
                    _nLine = _nLineStart;
                    if (_fCondComment)
                    {
                        ch = *(pch = pchStart+4); // at [ past <!--
                        state = TS_TAGCOMMENT;
                        goto TAGCOMMENT;
                    }
                    else
                    {
                        ch = *(pch = pchStart+1);
                        state = TS_TAGSCAN;
                        goto TAGSCAN;
                    }
                }

                hr = THR(_pVersions->EvaluateConditional(&result, pchWord, pch - (fComment ? 4 : 2) - pchWord));
                if (hr)
                    goto Cleanup;

                if (result == COND_SYNTAX ||
                    _fCondComment && result != COND_IF_TRUE && result != COND_IF_FALSE ||
                    fComment && result != COND_ENDIF ||
                    !_cCondNestTrue && result == COND_ENDIF)
                {
                    if (_fCondComment && result == COND_NULL)
                    {
                        // ordinary comment if unrecognized construct
                        _nLine = _nLineWord;
                        ch = *(pch = pchWord);
                        state = TS_TAGCOMMENT;
                        goto TAGCOMMENT;
                    }
                    else
                    {
                        // textify illegal constructs
                        _nLine = _nLineStart;
                        ch = *(pch = pchStart+1);
                        state = TS_TEXT;
                        goto TEXT;
                    }
                }

                if (result == COND_ENDIF)
                {
                    _cCondNestTrue--;
                }

                if (result == COND_IF_TRUE)
                {
                    _cCondNestTrue++;
                }

                if (result == COND_IF_FALSE)
                {
                    state = TS_CONDITIONAL;
                    break;
                }
    
                // Only suppress contents if condition evaluated to FALSE
                // if condition was unrecognized, TRUE cond, or matched ENDIF,
                // treat it as a comment

                hr = THR(OutputConditional(pchStart, PTR_DIFF(pch, pchStart), result));
                if (hr)
                    goto Cleanup;
    
                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
                state = TS_TEXT;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
                // for include case, make sure preprocessor suspends correctly

                if (result == COND_INCLUDE) 
                {
                    hr = E_PENDING;
                    goto Cleanup;
                }
#endif
            }

            break;


    CONDITIONAL:
        case TS_CONDITIONAL:

            TraceState(CONDITIONAL);

            // pchStart: at start of '<![if ...]>...'
            // pch at first possible '<' for <![endif]>

            // skip to first special char
            while (ISTXTCH(ch))
                ch = *(++pch);

            // count line  (count \r or \n, but not \n immediately following \r)
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto CONDITIONAL;
            }

            if (!ch)
                break;

            if (ch != _T('<'))
            {
                ch = *(++pch);
                goto CONDITIONAL;
            }

            ch = *(++pch);

            state = TS_ENDCOND;
            if (!ch)
                break;

            // fallthrough

        case TS_ENDCOND:

            TraceState(ENDCOND);

            // pch:     at '<'+1

            if (ch != _T('!'))
            {
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            ch = *(++pch);

            state = TS_ENDCONDBANG;
            if (!ch)
                break;

            // fallthrough

       case TS_ENDCONDBANG:

            // pch:     at '<!'+1

            if (ch !=_T('['))
            {
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            ch = *(++pch);
            pchWord = pch;
            _nLineWord = _nLine;

            state = TS_ENDCONDSCAN;
            if (!ch)
                break;

            // fallthrough

   ENDCONDSCAN:

       case TS_ENDCONDSCAN:

            // pchWord: at '<!['+1
            // pch:     at first possible '>'

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto ENDCONDSCAN;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            Assert(_pVersions);

            if (_fCondComment ?
                 pch < pchWord + 4 || pch[-2] != _T('-') || pch[-3] != _T('-') || pch[-4] != _T(']'):
                 pch < pchWord + 2 || pch[-2] != _T(']'))
            {
                // Not well-formed <![ .... ]> or <![ .... ]-->: rollback
                _nLine = _nLineWord;
                ch = *(pch = pchWord); // at '<!['+1
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            {

                CONDVAL result;
                hr = THR(_pVersions->EvaluateConditional(&result, pchWord, pch - (_fCondComment ? 4 : 2) - pchWord));
                if (hr)
                    goto Cleanup;

                // gibberish: rollback
                if (result == COND_NULL || result == COND_SYNTAX)
                {
                    _nLine = _nLineWord;
                    ch = *(pch = pchWord); // at '<!['+1
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

                // handle nested <![if]> : treat as gibberish inside condstyle; otherwise nest
                if (result == COND_IF_TRUE || result == COND_IF_FALSE)
                {
                    if (_fCondComment)
                    {
                        _nLine = _nLineWord;
                        ch = *(pch = pchWord); // at '<!['+1
                    }
                    else
                    {
                        _cCondNest++;
                    }
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
                // <![include]> in an off conditional gets ignored
                if (result == COND_INCLUDE) 
                {
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }
#endif

                Assert(result == COND_ENDIF);
                
                // <![endif]-->

                if (_fCondComment)
                    _fCondComment = FALSE;

                // nested <![endif]>

                if (_cCondNest)
                {
                    Assert(!_fCondComment);
                    _cCondNest--;
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

                // if last endif, output the whole conditional area as a single comment
                hr = THR(OutputConditional(pchStart, PTR_DIFF(pch, pchStart), result));
                if (hr)
                    goto Cleanup;

                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
                state = TS_TEXT;
            }

            break;

    NEWCODEPAGE:
        case TS_NEWCODEPAGE:

            TraceState(NEWCODEPAGE);

            // pchStart: at '>'+1
            // pch:      at '>'+1

            _pch      = pch;
            _pchEnd   = pchEnd;
            _pchStart = pchStart;

            // cannot switch codepage inside script or if we've already switched once
            if (!_cSuspended && !_fRestarted && !_fMetaCharsetOverride)
            {
                BOOL fNeedRestart;
                
                // after switching codepage we must suspend
                if (DoSwitchCodePage(_cpNew, &fNeedRestart, TRUE) && fNeedRestart)
                {
                    state = TS_TEXT;
                    hr = E_PENDING;
                    goto Cleanup;
                }
            }

            state = TS_TEXT;
            pch = _pch;
            pchStart = _pchStart;
            pchEnd = _pchEnd;
            break;

        default:
            AssertSz(0,"Unknown state in tokenizer");
            _nLine = _nLineStart;
            pch = pchStart+1;
            state = TS_TEXT;
        }
    }

    // we have examined every avaliable character
    Assert(!ch && pch == pchEnd);


    if (_fEOF && !_cSuspended && pchStart != pchEnd)
    {
        // EOF in unmatched false conditional: commentize up to EOF
        if (state == TS_CONDITIONAL || state == TS_ENDCONDSCAN)
        {
            hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
            if (hr)
                goto Cleanup;

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_TEXT;
        }
        // EOF in incomplete comment or conditional: turn to tag
        else if (state == TS_TAGCOMMENT || state == TS_CONDSCAN)
        {
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TAGSCAN;
            goto TAGSCAN; // withstands ch=='\0'
        }
        else if (state == TS_ENTMATCH)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTMATCH;
        }
        else if (state == TS_ENTNUMBER)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTNUMBER;
        }
        else if (state == TS_ENTHEX)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTHEX;
        }
        // EOF in incomplete tag: turn < or & to text
        else
        {
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TEXT; // withstands ch=='\0'
            goto TEXT;
        }
    }

    hr = S_OK;

Cleanup:

    // suspend comes here

    // save state
    _pch        = pch;
    _pchEnd     = pchEnd;
    _pchStart   = pchStart;
    _pchWord    = pchWord;
    _state      = state;
    _chQuote    = chQuote;

    if (hr == E_PENDING)
    {
        Suspend();
    }

    goto Leave;

Error:

    // on error, behave like EOF
    _fEOF = TRUE;
    _pchStart = _pchEnd;

Leave:

    _pHtmTagStm->Signal();

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Tokenize (hr=%lX)", hr);
    RRETURN1(hr, E_PENDING);
}

#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\htmpre.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmpre.cxx
//
//  Contents:   Support for HTML preparsing, including
//
//              CAttrWatchDesc
//              CTagWatchDesc
//              CValueBuffer
//              CTagWatch
//              CHtmPre
//
//-------------------------------------------------------------------------

// KNOWN areas this tokenizer differs from NS:
// (1) embedded \0 handling. NS leaves them in until after
//     tokenizing, and we now strip out embedded \0 chars
//     before tokenizing. I've tried NS's approach, and
//     found that it adds unneeded complexity.
// (2) NS treats an initial unknown tag at the very beginning
//     of the file as an overlaped scope tag which hides text.
//     We do not treat this tag specially.
// (3) NS matches entities in a case-sensitive manner. We should
//     do the same.
// (4) NS does not resolve named or numeric entities which end
//     at the EOF without a semicolon. We do.
// TO DO:
// (1) Feed line/char count to special tags that need them (<SCRIPT>)
// (2) Saver must save entity-like chars in literals correctly.
// (dbau 12/16/96)

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_OTHRGUID_H_
#define X_OTHRGUID_H_
#include "othrguid.h"
#endif

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#ifndef X_ENTITY_H_
#define X_ENTITY_H_
#include "entity.h"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifdef WIN16
#ifndef X_URLMKI_H_
#define X_URLMKI_H_
#include "urlmki.h"
#endif
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_HTMTOK_HXX_
#define X_HTMTOK_HXX_
#include "htmtok.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include "prgsnk.h"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif


#define _cxx_
#include "entity.h"

#define HTMPRE_BLOCK_SIZE      4096 // assumed to be power of 2

#define CCH_LARGE_TOKEN       16384 // after text buf grows to 16K, use exponential allocation
#define CCH_OVERFLOW_TOKEN  1048576 // stop growing after a megabyte
#define MAX_ATTR_COUNT        16383 // Allow at most 16K-1 attribute-value pairs

#define CONDITIONAL_FEATURE

ExternTag(tagPalette);

DeclareTag(tagNoValues,             "Dwn", "HtmPre: Treat all values as absent");
DeclareTag(tagEmptyValues,          "Dwn", "HtmPre: Treat all values as empty strings");
DeclareTag(tagHtmPreNoAutoLoad,     "Dwn", "HtmPre: Inhibit auto-download");
DeclareTag(tagToken,                "Dwn", "HtmPre: Detailed tokenizer trace");
PerfDbgTag(tagHtmPre,               "Dwn", "Trace CHtmPre")
PerfDbgTag(tagForceSwitchToRestart, "Dwn", "! Force SwitchCodePage to restart")
PerfDbgTag(tagHtmPreOneCharText,    "Dwn", "! HtmPre slow one char per text tag")

PerfDbgExtern(tagPerfWatch)
PerfDbgExtern(tagDwnBindSlow)

MtDefine(CHtmPre, Dwn, "CHtmPre")
MtDefine(CHtmPreBuffer, CHtmPre, "CHtmPre::_pchBuffer")
MtDefine(CHtmPre_aryInsert_pv, CHtmPre, "CHtmPre::_aryInsert::_pv")
MtDefine(CHtmPre_aryCchSaved_pv, CHtmPre, "CHtmPre::_aryCchSaved::_pv")
MtDefine(CHtmPre_aryCchAsciiSaved_pv, CHtmPre, "CHtmPre::_aryCchAsciiSaved::_pv")
MtDefine(SetCookie, CMarkup, "SetCookieOnUIThread strings")


DWORD HashString(const TCHAR *pch, DWORD len, DWORD hash);
extern HRESULT SetUrlDefaultScheme(const TCHAR *pchHref, CStr *pStr);
extern BOOL _7csnziequal(const TCHAR *string1, DWORD cch, const TCHAR *string2);

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

const BYTE g_charclass[64] = {
// CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH

0,                                                                                                 // 0
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 1
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 2
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 3
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 4
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 5
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 6
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 7
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 8
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 9  \t
0,                                                                                                 // 10 \n
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 11
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 12
0,                                                                                                 // 13 \r
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 14
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 15
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 16
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 17
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 18
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 19
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 20
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 21
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 22
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 23
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 24
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 25
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 26
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 27
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 28
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 29
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 30
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 31
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 32 ' '
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 33 '!'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH             | CCF_MRKCH , // 34 '"'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 35 '#'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 36 '$'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 37 '%'
               CCF_NONSP | CCF_NAMCH | CCF_ATTCH |             CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 38 '&'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH             | CCF_MRKCH , // 39 '''
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 40 '('
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 41 ')'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 42 '*'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 43 '+'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 44 ','
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH |             CCF_TAGCH | CCF_MRKCH , // 45 '-'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 46 '.'
   CCF_TXTCH | CCF_NONSP |                         CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 47 '/'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 48 '0'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 49 '1'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 50 '2'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 51 '3'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 52 '4'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 53 '5'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 54 '6'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 55 '7'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 56 '8'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 57 '9'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 58 ':'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 59 ';'
               CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 60 '<'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 61 '='
   CCF_TXTCH | CCF_NONSP |                                     CCF_NDASH                         , // 62 '>'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 63 '?'
};

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::~CHtmPre
//
//-------------------------------------------------------------------------
CHtmPre::~CHtmPre()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::~CHtmPre");

    if (_pHtmLoad)
        _pHtmLoad->SubRelease();

    if (_pHtmInfo)
        _pHtmInfo->SubRelease();

    if (_pHtmTagStm)
        _pHtmTagStm->Release();

    if (_pDwnBindData)
        _pDwnBindData->Release();

    if (_pDwnDoc)
        _pDwnDoc->Release();

    if (_pVersions)
        _pVersions->Release();

    ReleaseInterface(_pInetSess);

    // Don't let CEncoderReader free this pointer.  It doesn't belong to it.

    _pchBuffer = NULL;

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::~CHtmPre");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Passivate
//
//-------------------------------------------------------------------------
void
CHtmPre::Passivate()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Terminate");

    _fDone = TRUE;
    _cSuspended = 0;

    super::Passivate();

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::Terminate");
}

//+------------------------------------------------------------------------
//
//  Function:   CanPrefetchWithScheme
//
//  Synopsis:   Checks if the scheme is one of the "big-3"
//
//-------------------------------------------------------------------------

BOOL
CanPrefetchWithScheme(TCHAR * pchUrl)
{
    // Combining URLs requires that CoInitialize is called because
    // it might try to load the protocol handler objects for random
    // protocols.  But this thread never called CoInitialize (and
    // it doesn't want to because we don't have a message loop), we
    // punt prefetching on anything but the big-3 internal protocols.

    UINT uScheme = GetUrlScheme(pchUrl);

    return( uScheme == URL_SCHEME_FILE
        ||  uScheme == URL_SCHEME_HTTP
        ||  uScheme == URL_SCHEME_HTTPS);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OnRedirect
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OnRedirect(LPCTSTR pchUrl)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::OnRedirect %ls",
        pchUrl ? pchUrl : g_Zero.ach);

    HRESULT hr;

    hr = THR(_cstrDocUrl.Set(pchUrl));
    if (hr)
        goto Cleanup;

    if (_pDwnBindData && _pDwnBindData->GetIsRootMarkup())
        _fTopLevelRedirect = TRUE;

    if (_pInetSess && !CanPrefetchWithScheme(_cstrDocUrl))
    {
        ClearInterface(&_pInetSess);
    }

    hr = THR(_pDwnDoc->SetSubReferer(pchUrl));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::OnRedirect (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Init
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::Init(CHtmLoad * pHtmLoad, CDwnDoc * pDwnDoc,
    IInternetSession * pInetSess, IStream *pstmLeader, CDwnBindData * pDwnBindData,
    CHtmTagStm * pHtmTagStm, HTMPASTEINFO * phpi, LPCTSTR pchUrl, CVersions *pVersions,
    BOOL fXML, FUNC_TOKENIZER_FILTEROUTPUTTOKEN * pfnFilterOutputToken)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::Init %ls",
        pchUrl ? pchUrl : g_Zero.ach);

    HRESULT hr = S_OK;
    BOOL fEof = FALSE;

    _pHtmLoad = pHtmLoad;
    _pHtmLoad->SubAddRef();

    _pHtmInfo = pHtmLoad->GetHtmInfo();
    _pHtmInfo->SubAddRef();

    _pDwnDoc = pDwnDoc;
    _pDwnDoc->AddRef();

    _fMetaCharsetOverride = (_pDwnDoc->GetLoadf() & DLCTL_NO_METACHARSET ? TRUE : FALSE);

    ReplaceInterface(&_pInetSess, pInetSess);

    _pDwnBindData = pDwnBindData;
    _pDwnBindData->AddRef();

    _pHtmTagStm = pHtmTagStm;
    _pHtmTagStm->AddRef();

    if (pVersions)
        pVersions->AddRef();
    _pVersions = pVersions;

    Assert(!_fEndCR);

    _pfnFilterOutputToken = pfnFilterOutputToken;

    _cbNextInsert = -1;

    _state = TS_TEXT;

    _cpNew = CP_UNDEFINED;
    _fPasting = phpi != NULL;

    _fXML = fXML;

    _cDownloadSupression = 0;

    if (phpi)
    {
        if (phpi->cbSelBegin >= 0)
        {
            hr = THR(AddInsert(phpi->cbSelBegin, TIC_BEGINSEL));

            if (hr)
                goto Cleanup;
        }

        if (phpi->cbSelEnd >= 0)
        {
            hr = THR(AddInsert(phpi->cbSelEnd, TIC_ENDSEL));

            if (hr)
                goto Cleanup;
        }
    }

    hr = THR(_cstrDocUrl.Set(pchUrl));
    if (hr)
        goto Cleanup;

    if (_pInetSess && (!CanPrefetchWithScheme(_cstrDocUrl) || _fPasting))
    {
        ClearInterface(&_pInetSess);
    }

    // Start buffer with contents of pstmLeader

    if (pstmLeader)
    {
        _fRestarted = TRUE; // Set so we don't restart a second time

        while (!fEof)
        {
            hr = THR(PrepareToEncode());
            if (hr)
                goto Cleanup;

            hr = THR(ReadStream(pstmLeader, &fEof));
            if (hr)
                goto Cleanup;

            // (dmitryt) if fEof is true - it means ReadStream read 0 bytes.
            // Either we are at the end, or we already
            // tried conversion but don't have enough bytes to form valid
            // multibyte character. And we don't have any more bytes in pstmLeader.
            // Bail out and continue to download into the buffer...

            if (_cbBuffer && !fEof)
            {
                int cch;

                hr = THR(WideCharFromMultiByte(fEof && _pDwnBindData->IsEof(), &cch));
                if (hr)
                    goto Cleanup;

                cch -= PreprocessBuffer(cch);
                _ulCharsEnd += cch;
            }

        }
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Init (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Run, CDwnTask
//
//  Synopsis:   Runs the tokenizer and adjusts the task
//
//-------------------------------------------------------------------------

void
CHtmPre::Run()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Run");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Run");

    SwitchesBegTimer(SWITCHES_TIMER_TOKENIZER);

    BOOL    fDataPend;
    HRESULT hr;

    if (!_fDone)
    {
        hr = THR(Exec());

        if (hr)
        {
            _fDone = TRUE;
            IGNORE_HR(OutputDocSize());
            OutputEof(hr);
        }
    }

    fDataPend = _pDwnBindData->IsPending();

    if (_fDone || _cSuspended || (_pch == _pchEnd && fDataPend))
    {
        PerfDbgLog4(tagHtmPre, this, "CHtmPre::Run blocking "
            "(_fDone: %s, _cSuspended: %d, fBufPend: %s, fDataPend: %s)",
            _fDone ? "T" : "F", _cSuspended, (_pch == _pchEnd) ? "T" : "F",
            fDataPend ? "T" : "F");

        SetBlocked(TRUE);
    }

    SwitchesEndTimer(SWITCHES_TIMER_TOKENIZER);

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::Run");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Run");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Exec
//
//  Synopsis:   Runs the tokenizer
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::Exec()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Exec");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Exec");

    BOOL fAtInsert;
    HRESULT hr = S_OK;

    if (_cSuspended)
        goto Leave;

    for (;;)
    {
        hr = THR(PrepareToEncode());
        if (hr)
            goto Cleanup;

        hr = THR(Read());
        if (hr)
            goto Cleanup;

        do
        {
            if (_cbBuffer)
            {
                int cch;

                hr = THR(WideCharFromMultiByte(_pDwnBindData->IsEof(), &cch));
                if (hr)
                    goto Cleanup;

                // WideCharFromMultiByte may have caused us to suspend.
                if( _cSuspended )
                {
                    goto Cleanup;
                }

                cch -= PreprocessBuffer(cch);

                if (cch)
                {
                    _ulCharsEnd += cch;
                }
            }

            _ulCharsUncounted = 0;
            _fCount = 1;

            fAtInsert = AtInsert();

            hr = THR_NOTRACE(Tokenize());
            if (hr)
                goto Cleanup;

            if (fAtInsert)
            {
                QueueInserts();
                
                if (_state == TS_TEXT)
                {
                    hr = THR( OutputInserts() );

                    if (hr)
                        goto Cleanup;
                }
            }

        } while (!Exhausted() && !fAtInsert);

        if (_pDwnBindData->IsEof())
        {
            _fEOF  = TRUE;

            hr = THR_NOTRACE(Tokenize());
            if (hr)
                goto Cleanup;

            Assert(_state == TS_TEXT || _state == TS_PLAINTEXT || _state == TS_ENTCLOSE); // should finish file in a clean state

            _fDone = TRUE;

            // If after reading the entire document our codepage is still
            // autodetect, we've encountered a pure-ASCII page.  We can therefore
            // treat the document as if it were in CP_ACP without risk.

            if (IsAutodetectCodePage(_cp))
            {
                DoSwitchCodePage(g_cpDefault, NULL, FALSE);
            }

            hr = THR(OutputDocSize());
            if (hr)
                goto Cleanup;

            hr = THR(OutputInserts());
            if (hr)
                goto Cleanup;

            OutputEof(S_OK);
            break;

        }

        if (_pDwnBindData->IsPending() || IsTimeout())
            break;
    }

Cleanup:

    if (hr == E_PENDING)
    {
        // Flush the constructed but not signalled tag now that the state machine is in a clean
        // state and can tolerate being re-entered.

        _pHtmTagStm->WriteTagEnd();
        _pHtmTagStm->Signal();
        hr = S_OK;
    }

Leave:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Exec (hr=%lX)", hr);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Exec");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::PreprocessBuffer
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//-------------------------------------------------------------------------

int
CHtmPre::PreprocessBuffer(int cch)
{
    BOOL fAscii;

    if (!cch)
        return 0;

    // Special handling for files beginning with \0
    if (!_fCheckedForLeadingNull)
    {
        if (!*_pchEnd)
            _fSuppressLeadingText = TRUE;

        _fCheckedForLeadingNull = TRUE;
    }

    TCHAR *pchEnd = _pchEnd + cch;

    int cNukedChars = NormalizerChar(_pchEnd, &pchEnd, &fAscii);

    _pchEnd = pchEnd;

    if (!fAscii)
        _pchAscii = pchEnd;

    return cNukedChars;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::MakeRoomForChars
//
//  Synopsis:   Opens up space in buffer, allocating and moving memory
//              if needed.
//
//  Memory layout:
//
//            Previous text<a href = "zee.htm">Future Text0    Saved text
//            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//   pchBuffer^    pchStart^  pchWord^  pch^        pchEnd^    ^pchTop   ^
//                                                    pchBuffer+cchBuffer^
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::MakeRoomForChars(int cch)
{
    HRESULT hr = S_OK;

    Assert(!_cchSaved || _cSuspended);

    if (!_pchBuffer)
    {
        Assert(!_cchSaved);

        _cchBuffer = cch + 1;

        hr = THR(_pHtmTagStm->AllocTextBuffer(_cchBuffer, &_pchBuffer));
        if (hr)
            goto Cleanup;

        _pchStart = _pch = _pchEnd = _pchAscii = _pchBuffer;
        _pchTop = _pchBuffer + _cchBuffer;

        *_pchEnd = _T('\0');
    }
    else if (cch > PTR_DIFF(_pchTop, _pchEnd + 1))
    {
        long cchUsed = PTR_DIFF(_pchStart, _pchBuffer);
        long cchData = PTR_DIFF(_pchEnd + 1, _pchStart);
        long cchNeed = cchData + cch + _cchSaved;
        // Bug 9535: exponential reallocation after a certain size is reached
        long cchWant = cchNeed <= CCH_LARGE_TOKEN ? cchNeed : cchNeed + cchData / 2;
        long cchDiff;
        TCHAR * pchNewBuffer;

        if (cchUsed == 0)
            hr = THR(_pHtmTagStm->GrowTextBuffer(cchWant, &pchNewBuffer));
        else
            hr = THR(_pHtmTagStm->AllocTextBuffer(cchWant, &pchNewBuffer));
        if (hr)
            goto Cleanup;

        if (cchData && cchUsed)
        {
            memmove(pchNewBuffer, _pchStart, cchData * sizeof(TCHAR));
        }

        if (_cchSaved)
        {
            memmove(pchNewBuffer + cchWant - _cchSaved,
                    cchUsed ? _pchTop : pchNewBuffer + PTR_DIFF(_pchTop, _pchBuffer),
                    _cchSaved * sizeof(TCHAR));
        }

        if (_pchStart > _pchAscii)
            _pchAscii = _pchStart;

        cchDiff    = PTR_DIFF(pchNewBuffer, _pchStart);
        _pchTop    = pchNewBuffer + cchWant - _cchSaved;
        _pchBuffer = pchNewBuffer;
        _cchBuffer = cchWant;

        if (cchDiff)
        {
            _pchStart += cchDiff;
            _pchWord  += cchDiff;
            _pch      += cchDiff;
            _pchEnd   += cchDiff;
            _pchAscii += cchDiff;
        }

    }
    Assert((PTR_DIFF(_pchTop, _pchEnd + 1)) >= cch);

    CEncodeReader::MakeRoomForChars(cch);

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Suspend
//
//  Synopsis:   Sets appropriate state for suspending the preparser
//
//  Threading:  Called on the preparser thread.
//
//              The _cSuspended++ closes the gate on the preparser thread
//              so that Tokenize() isn't called by Run.
//
//              After Suspend, Tokenize() can safely be called from the
//              script thread (via InsertText).
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::Suspend()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Suspend");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Suspend");

    HRESULT hr = S_OK;
    AssertSz(!_fSuspend, "Recursive suspend without InsertText");

    // Make sure a buffer is available so that SaveBuffer works
    if (!_pchEnd)
    {
        hr = THR(MakeRoomForChars(1));
        if (hr)
            goto Error;
    }

    // exercised only when nested InsertText did not SaveBuffer
    if (_fSuspend)
    {
        hr = THR(SaveBuffer());
        if (hr)
            goto Error;
        _fSuspend = FALSE;
    }

    // optimization: don't SaveBuffer; just note that SaveBuffer is needed
    _fSuspend = TRUE;
    _cSuspended++;

Error:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Suspend (hr=%lX)", hr);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Suspend");
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SaveBuffer
//
//  Synopsis:   Saves any chars in buffer which haven't been processed yet.
//              RestoreBuffer brings the chars back. Can be nested.
//
//              Only works when tokenizer is suspended and in TS_TEXT
//              state.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::SaveBuffer() 
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::SaveBuffer");

    // state needs to be pushed
    int     cch;
    int     cchAscii;
    HRESULT hr;

    Assert(_fSuspend);
    Assert(_state == TS_TEXT);
    Assert(_pchEnd + 1 <= _pchTop);
    Assert(_pch == _pchStart);
    Assert(_pchEnd >= _pchStart);

    hr = THR(_aryCchSaved.EnsureSize(_aryCchSaved.Size()+1));
    if (hr)
        goto Cleanup;

    hr = THR(_aryCchAsciiSaved.EnsureSize(_aryCchAsciiSaved.Size()+1));
    if (hr)
        goto Cleanup;

    cch = PTR_DIFF(_pchEnd, _pch);
    cchAscii = PTR_DIFF(_pchEnd, _pchAscii);
    if (cchAscii > cch)
        cchAscii = cch;

    _cchSaved += cch;
    _pchTop   -= cch;

    memmove(_pchTop, _pch, cch * sizeof(TCHAR));
    _pchEnd = _pch;
    *_pchEnd   = _T('\0');

    Verify(!_aryCchSaved.AppendIndirect(&cch));
    Verify(!_aryCchAsciiSaved.AppendIndirect(&cchAscii));

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SaveBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::RestoreBuffer
//
//  Synopsis:   Restores chars previously saved by SaveBuffer.
//              Should be called same number of times as SaveBuffer.
//
//              Works in any state.
//
//-------------------------------------------------------------------------
void
CHtmPre::RestoreBuffer()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::RestoreBuffer");

    int cch = _aryCchSaved[_aryCchSaved.Size()-1];
    int cchAscii = _aryCchAsciiSaved[_aryCchAsciiSaved.Size()-1];
    
    _aryCchSaved.Delete(_aryCchSaved.Size()-1);
    _aryCchAsciiSaved.Delete(_aryCchAsciiSaved.Size()-1);

    Assert(_cchSaved >= cch);

    memmove(_pchEnd, _pchTop, cch * sizeof(TCHAR));
    _pchTop   += cch;
    _cchSaved -= cch;
    _pchEnd   += cch;

    if (cchAscii < cch)
        _pchAscii = _pchEnd - cchAscii;
        
    *(_pchEnd) = _T('\0');

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::RestoreBuffer");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Resume
//
//  Synopsis:   The inverse of Suspend
//
//  Threading:  Called on the script thread.
//
//              The _cSuspended-- at the end opens the gate for the
//              preparser thread to continue calling Tokenize().
//
//  Returns:    _cSuspended
//
//-------------------------------------------------------------------------
ULONG
CHtmPre::Resume()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Resume");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Resume");

    AssertSz(_cSuspended, "Resume called while not suspended");

    if (_fSuspend)
    {
        // state was never pushed on the stack
        _fSuspend = FALSE;
    }
    else
    {
        // restore saved chars
        RestoreBuffer();
    }
    // now everything is done except for csuspended

    // note that _cSuspended==0 opens the gate for the preparser thread

    ULONG cSuspended = _cSuspended-1;
    _cSuspended = cSuspended;

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Resume (cSuspended=%ld)", cSuspended);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Resume");
    return(cSuspended);
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPre::SetLiteralState
//  
//  Synopsis:   Sets the literal state for the tokenizer.  Meant to be used
//              after tag resolution by CHtmPost.
//  
//  Returns:    void
//  
//  Arguments:
//          ETAG etag - ETAG to be looking for
//          TCHAR * pchTagName - Tag name to look for
//          ULONG cchTagName - Length of tag name
//  
//+----------------------------------------------------------------------------

void
CHtmPre::SetLiteralState( ELEMENT_TAG etag, TCHAR * pchTagName, ULONG cchTagName )
{
    Assert( !_fLiteralEnt && !_cstrLiteral && _etagLiteral == ETAG_NULL );
    Assert( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL );

    _fLiteralEnt = TRUE; 
    _cstrLiteral.Set( pchTagName, cchTagName ); 
    _etagLiteral = etag;
    _cLiteral = 1;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::IsExtendedTag
//
//-------------------------------------------------------------------------

ELEMENT_TAG
CHtmPre::IsExtendedTag(LPTSTR pch, int cch, BOOL fEnd, BOOL * pfDerived)
{
    ELEMENT_TAG             etag;
    LPTSTR                  pchPI;
    int                     cchPI;
    CExtendedTagDesc *      pExtendedTagDesc;
    CStringNullTerminator   term(pch + cch);    // null terminate the string temporary
    BOOL                    fQuestion = FALSE;

    Assert (pfDerived);

    *pfDerived = FALSE;

    etag = ETAG_UNKNOWN;

    if (!pch || !pch[0])
        goto Cleanup; // legal input stream: "<span>foo</ span>"

    pchPI = pch;
    cchPI = cch;
    if (_T('?') == pchPI[0]) // skip possible '?' mark
    {
        fQuestion = TRUE;

        pchPI++;
        cchPI--;
    }

    if (PI_EXTENDEDTAG_LEN == cchPI && 0 == StrCmpIC(pchPI, PI_EXTENDEDTAG))
    {
        etag = ETAG_RAW_EXTENDEDTAG;
    }
    else if (PI_XMLNS_LEN  == cchPI && 0 == StrCmpIC(pchPI, PI_XMLNS))
    {
        etag = ETAG_RAW_XMLNAMESPACE;
    }
    else if (PI_PRINTXML_LEN == cchPI && 0 == StrCmpIC(pchPI, PI_PRINTXML))
    {
        if( _pHtmTagStm->TagsWritten() <= 2 )
        {
            _pHtmLoad->_pMarkup->SetXML(TRUE);
            _fXML = TRUE;
        }
        etag = ETAG_RAW_REJECT;
    }
    else if (!fQuestion)
    {
        CTagNameCracker tagNameCracker(pch);
        BOOL            fQueryHost;

        if ((!tagNameCracker._pchNamespace || tagNameCracker._pchNamespace[0]) &&   // if either no namespace, or non-null namespace
            tagNameCracker._pchTagName && tagNameCracker._pchTagName[0])            // and if non-null tag name
        {
            pExtendedTagDesc = _pHtmInfo->GetExtendedTagDesc(
                tagNameCracker._pchNamespace,
                tagNameCracker._pchTagName,
                /* fEnsureTag = */ (NULL != tagNameCracker._pchNamespace),
                &fQueryHost);

            // Don't bother querying the host for an end tag -- what are we going to do?
            if( !fEnd && fQueryHost )
            {
                // This means we need to query our host.

                Assert( !pExtendedTagDesc );
                etag = ETAG_RAW_RESOLVE;
            }
            else if (pExtendedTagDesc)
            {
                Assert (pExtendedTagDesc->IsValid());

                etag = pExtendedTagDesc->_etagBase;

                *pfDerived = TRUE;
            }
        }
    }

Cleanup:
    return etag;
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPre::RegisterHtmlTagNamespaces
//
//-------------------------------------------------------------------------

void
CHtmPre::RegisterHtmlTagNamespaces(CHtmTag * pht)
{
    int                 idx;
    LPTSTR              pchNamespace;
    CHtmTag::CAttr *    pAttr;

    for (idx = 0;; idx++)
    {
        pchNamespace = pht->GetXmlNamespace(&idx);
        if (!pchNamespace)
            break;

        pAttr = pht->GetAttr(idx);

        IGNORE_HR(_pHtmInfo->RegisterNamespace(pchNamespace, /* pchUrn = */pAttr->_pchVal, XMLNAMESPACEDECL_STD));

        pAttr->_pchName = NULL;
        pAttr->_cchName = 0;
    }

    return;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::InsertText
//
//  Synopsis:   Inserts text directly into the preparser, used by
//              implementation of document.write.
//              New text is inserted at _pch, which needs to be at the
//              same place as _pchStart.
//
//  Threading:  Called on the script thread.
//
//              Must be called between Suspend() and Resume().
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::InsertText(LPCTSTR pchInsert, ULONG cchInsert)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertText (cch=%ld)", cchInsert);

    HRESULT hr;
    BOOL fCountSrc = FALSE;

    Assert(_cSuspended); // must be called between Suspend and Resume

    // Capture the source only if this document was created with
    // document.open() and the write occurs at the top level.
    // We don't want to capture the source generated as
    // a product of running inline scripts.

    if (_pHtmInfo->IsOpened() && _cSuspended == 1)
    {
        hr = THR(_pHtmInfo->OnSource((BYTE*)pchInsert, cchInsert * sizeof(TCHAR)));
        if (hr)
            goto Cleanup;

        fCountSrc = TRUE;
    }

    // push buffer
    if (_fSuspend)
    {
        hr = THR(SaveBuffer());
        if (hr)
            goto Cleanup;
        _fSuspend = FALSE;
    }

    hr = THR(MakeRoomForChars(cchInsert));
    if (hr)
        goto Cleanup;

    memcpy(_pchEnd, pchInsert, cchInsert * sizeof(TCHAR));

    cchInsert -= PreprocessBuffer(cchInsert);

    if (fCountSrc)
    {
        _ulCharsEnd += cchInsert;
        _ulCharsUncounted = 0;
        _fCount = 1;
        if (cchInsert)
            IGNORE_HR(OutputDocSize());
    }
    else
    {
        _ulCharsUncounted += cchInsert;
        _fCount = 0;
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertText (hr=%lX)", hr);
    RRETURN(hr);

}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::DuplicateTextAtStart
//
//  Synopsis:   Inserts text directly into the preparser.  
//              Similar in concept to InsertText, but with some
//              key differences.  This function must be called from the preparse.
//              The text it inserts into the stream is always the text
//              starting at _pchStart.  This is also where the text
//              is inserted.  e.g.
//              if _pchStart points to "<b>foo bar baz", and
//              DuplicateTextAtStart is called with cch of 3, then
//              the stream will then look like "<b><b>foo bar baz"
//              with _pchStart pointing at the second <b>, having been
//              advanced 3, as will all the other stream pointers.
//
//              ** NOTE ** that since this involves copying
//              of buffers around, _pchStart and _pch and such
//              might get changed by this command.  
//          
//-------------------------------------------------------------------------
HRESULT
CHtmPre::DuplicateTextAtStart(ULONG cchInsert)
{
    HRESULT hr;

    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertText (cch=%ld)", cchInsert);

    Assert( cchInsert );

    hr = THR(MakeRoomForChars(cchInsert));
    if (hr)
        goto Cleanup;

    // Move the old stuff forward to make room.  The stuff left behind
    // is exactly what we wanted to copy.
    memmove(_pchStart + cchInsert, _pchStart, (_pchEnd - _pchStart) * sizeof(TCHAR) );

    _pch        += cchInsert;
    _pchStart   += cchInsert;
    _pchAscii   += cchInsert;
    _pchWord    += cchInsert;
    _pchEnd     += cchInsert;
    *_pchEnd    = _T('\0');

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertText (hr=%lX)", hr);
    RRETURN(hr);

}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::TokenizeText
//
//  Synopsis:   Tokenizes text previously inserted by InsertText, used
//              by implementation of document.write
//
//  Threading:  Called on the script thread.
//
//              Must be called between Suspend() and Resume(), after
//              InsertText().
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::TokenizeText(BOOL *pfEmpty)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::TokenizeText");

    HRESULT hr;

    Assert(_cSuspended);// Must be called between Suspend and Resume
    Assert(!_fSuspend); // InsertText should have cleared _fSuspend

    *pfEmpty = (_pch == _pchEnd);

    if (*pfEmpty)
        return(S_OK);

    hr = THR_NOTRACE(Tokenize());

    if (hr == E_PENDING)
    {
        Assert(_fSuspend);
        hr = S_OK;

        // Flush the constructed but not signalled tag now that the state machine is in a clean
        // state and can tolerate being re-entered.

        _pHtmTagStm->WriteTagEnd();
        _pHtmTagStm->Signal();
    }
    else
    {
        Assert(hr || _pch == _pchEnd);

        if (_pch != _pchEnd)
            *pfEmpty = TRUE;    // Defensive: break infinite loop
    }

    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog2(tagHtmPre, this, "-CHtmPre::TokenizeText (*pfEmpty=%s,hr=%lX)",
        *pfEmpty, hr);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Function:   ProcessValueEntities
//
//  Synopsis:   Used to process a value string in place (may shrink).
//              Turns entities into unicode chars, and truncates on \0.
//
//  Arguments:  pchValue = the beginning of the value string (not incl ")
//              pcch[in] = the initial size of the value string
//                  [out]= the final size
//
//-------------------------------------------------------------------------

#ifndef NO_UTF16
TCHAR *
WriteNonBMPXChar(TCHAR * p, XCHAR ch)
{
    *p++ = HighSurrogateCharFromUcs4(ch);
    *p++ = LowSurrogateCharFromUcs4(ch);

    return p;
}

inline TCHAR *
WriteXChar(TCHAR * p, XCHAR ch)
{
    if (ch < 0x10000)
    {
        *p++ = ch;
    }
    else
    {
        p = WriteNonBMPXChar(p,ch);
    }

    return p;
}
#else
inline TCHAR *
WriteXChar(TCHAR * p, XCHAR ch)
{
    *p++ = ch;
    return p;
}
#endif

void
ProcessValueEntities(TCHAR *pchValue, ULONG *pcch)
{
    TCHAR *pch      = pchValue;
    TCHAR *pchEnd   = pchValue + *pcch;
    TCHAR *pchTo;
    TCHAR *pchWord;
    TCHAR ch        = _T(' ');
    XCHAR chEnt;

    // fast scan to do nothing if there are no special chars
    while (pch < pchEnd)
    {
        ch = *pch;
        if (!ch || ch=='&')
            break;
        pch++;
    }

    pchTo = pch;

    // mini entity scanner (could be leaner)
    while (ch && pch < pchEnd)
    {
        // entity; copy &
        *(pchTo++) = ch;

        ch = *(++pch);

        chEnt = 0;

        // numbered or hex entity
        if (ch == '#')
        {
            *(pchTo++) = ch;
            ch = *(++pch);

            // hex entity
            if(ch == 'X' || ch == 'x')
            {
                ch = *(++pch);
                pchWord = pch;
                while (pch < pchEnd && ISHEX(ch))
                    ch = *(++pch);
                chEnt = EntityChFromHex(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    pchTo = WriteXChar(pchTo-2, chEnt);
                }
                else
                {
                    ch = *(pch = pchWord);
                }
            }
            // numbered entity
            else
            {
                pchWord = pch;
                while (pch < pchEnd && ISDIGIT(ch))
                    ch = *(++pch);
                chEnt = EntityChFromNumber(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    pchTo = WriteXChar(pchTo-2, chEnt);
                }
                else
                {
                    ch = *(pch = pchWord);
                }
            }
        }

        // named entity
        else
        {
            pchWord = pch;

            do
            {
                pch++;
            } while (pch <= pchEnd && PTR_DIFF(pch, pchWord) < MAXENTYLEN && ISENTYC(*pch));

            // Fix for IE5 10370: require non-alphanum or end-of-value to terminate all named entities
            if (pch == pchEnd || !ISENTYC(*pch))
            {
                chEnt = EntityChFromName(pchWord, PTR_DIFF(pch, pchWord), HashString(pchWord, PTR_DIFF(pch, pchWord), 0));

#ifndef NO_UTF16
                AssertSz(chEnt < 0x10000, "Should be no non-BMP named entities.");
#endif

                // Fix for BUG 31357: require ';' for named entities not in the HTML1 set
                if (!IS_HTML1_ENTITY_CHAR(chEnt) && (pch > pchEnd || *pch != _T(';')))
                {
                    chEnt = 0;
                }
            }

            if (chEnt)
            {
                *(pchTo-1) = chEnt;
            }
            else
            {
                pch = pchWord;
            }

            ch = *pch;
        }

        // semicolon
        if (chEnt && pch < pchEnd && ch==';')
            pch++;

        // copy chars up to next special char
        while (pch < pchEnd)
        {
            ch = *pch;
            if (!ch || ch=='&')
                break;
            pch++;
            *(pchTo++) = ch;
        }
    }

    *pcch = PTR_DIFF(pchTo, pchValue);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::GoIntoPlaintextMode
//
//  Synopsis:   Insert an XMP into the stream and go into plaintext mode.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::GoIntoPlaintextMode()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::GoIntoPlaintextMode");

    HRESULT hr;

    // Dump out an <XMP> tag

    hr = THR(_pHtmTagStm->WriteTag(ETAG_PRE));
    if (hr)
        goto Cleanup;

    // Tell the tokenizer we are in a plaintext mode that will never end
    _state = TS_PLAINTEXT;

    _pHtmTagStm->Signal();

Cleanup:
    PerfDbgLog(tagHtmPre, this, "-CHtmPre::GoIntoPlaintextMode");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::DoTokenizeOneTag (OutputTag)
//
//  Synopsis:   Tokenizes a single tag, then if successful, processes
//              name and attribute strings in place, then sends
//              then downstream.
//
//              Tag starts at _pchStart and runs to _pch.
//
//              Returns S_FALSE if tag could not be processed as markup
//              so that the tokenizer can roll back and reprocess as text.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::DoTokenizeOneTag(TCHAR *pchStart, ULONG cch, CHtmTagStm *pHts, CHtmPre *pHtmPre, ULONG ulLine, ULONG ulOff, ULONG fCount, DWORD *potCode)
{
    //
    // ** NOTE ** if you make any local variables which point into the
    // data stream here (like pch, pchLimit, pchTagName), you'll
    // have to update them after the call to SaveSource further down.
    //

    TCHAR *pch = pchStart;
    TCHAR *pchLimit = pch + cch - 1;
    TCHAR ch;
    CHtmTag * pht;
    CHtmTag::CAttr *pAttr;
    BOOL fEnd = FALSE;
    TCHAR * pchTagName;
    UINT cchTagName;
    ELEMENT_TAG etag;
    int c;
    HRESULT hr = S_OK;
    BOOL fSlowProcess;
    BOOL fDerived = FALSE;

    BOOL fNSQualified = FALSE;
    TCHAR * pchTagNameUnqualified = NULL;
    BOOL fXML = pHtmPre ? pHtmPre->_fXML : FALSE;
    BOOL fSkip;

    BOOL fDelayedRejectNestedLiteral = FALSE;
    TCHAR * pchBuff = NULL;
    TCHAR * pchForDRNL = NULL;
    
    Assert(cch >= 2);
    Assert(*pch == _T('<'));
    Assert(*pchLimit == _T('>'));
    Assert(!!pHtmPre == !!potCode);

    // '<'
    ch = *(++pch);

    // tag name, possible /
    if (ch == _T('/'))
    {
        fEnd = TRUE;
        ch = *(++pch);
    }

    pchTagName = pch;

    // scan to end of tag name (allow ':'-s in the name)
    while (ISNAMCH(ch))
    {
        ch = *(++pch);
        if (fXML && ch == _T(':') && !fNSQualified)
        {
            pchTagNameUnqualified = pch + 1;
            fNSQualified = TRUE;
        }   
    }

    cchTagName = pch - pchTagName;

    if (fXML && !fNSQualified)
        etag = ETAG_GENERIC;
    else
    {
        if (fXML && fNSQualified && 0 == StrCmpNIC(pchTagName, _T("html:"), 5))
        {
            pchTagName = pchTagNameUnqualified;
            cchTagName = pch - pchTagNameUnqualified;
        }
        etag = EtagFromName(pchTagName, cchTagName);
    }
    
    if (pHtmPre)
    {
        BOOL fLiteralMatch = FALSE;

        // check if the tag is known to be generic
        if (!etag)
        {
            if (    (   ETAG_GENERIC_LITERAL == pHtmPre->_etagLiteral 
                     || ETAG_GENERIC_NESTED_LITERAL == pHtmPre->_etagLiteral ) 
                 && pHtmPre->_cstrLiteral.Length() == cchTagName
                 && 0 == StrCmpNIC(pHtmPre->_cstrLiteral, pchTagName, cchTagName ) )
            {
                etag = pHtmPre->_etagLiteral;
                fLiteralMatch = TRUE;   // Generic etag matched & so did tag name
            }
            else
            {
                etag = pHtmPre->IsExtendedTag(pchTagName, cchTagName, fEnd, &fDerived);
            }
        }
        else fLiteralMatch = ( etag == pHtmPre->_etagLiteral ); // Known etag match

        // hack for literals: return with OT_REJECT without initializing if etag doesn't match
        if ( pHtmPre->_etagLiteral )
        {
            if( fLiteralMatch )
            {
                if( fEnd )
                    --pHtmPre->_cLiteral;
                else
                {
                    Assert( pHtmPre->_etagLiteral == ETAG_GENERIC_NESTED_LITERAL );

                    ++pHtmPre->_cLiteral;
                    fDelayedRejectNestedLiteral = TRUE;

                    // In order to not slow down the normal tokenizer with a bunch of if's,
                    // we're copying a buffer to tokenize
                    pchForDRNL = pch;
                    pch = (TCHAR *)MemAlloc( Mt(Mem), cch * sizeof( TCHAR ) );
                    if( !pch )
                    {
                        hr = E_OUTOFMEMORY;
                        goto Cleanup;
                    }
                    pchBuff = pch;
                    memcpy( pch, pchForDRNL, cch * sizeof( TCHAR ) );

                    goto ScanTag;
                }
            }

            // Only thing we care about is the last closing tag ( _cLiteral == 0 )
            if( pHtmPre->_cLiteral != 0 )
            {
                *potCode = OT_REJECT;
                return S_OK;
            }
        }

        // hack for object/applet: echo source if needed, before outputting tag
        if (pHtmPre->_etagEchoSourceEnd)
        {
            if (fEnd ? etag == pHtmPre->_etagEchoSourceEnd : pHtmPre->_atagEchoSourceBegin && IsEtagInSet(etag, pHtmPre->_atagEchoSourceBegin))
            {
                // turn off echoing here, and continue...
                pHtmPre->_atagEchoSourceBegin = NULL;
                pHtmPre->_etagEchoSourceEnd = ETAG_NULL;
            }
            else
            {
                // Save source before overwriting it with \0's
                hr = THR(pHtmPre->SaveSource(pchStart, cch));
                if (hr)
                    goto Cleanup;

                Assert(*pchTagName); // Make sure we don't AV.
            }
        }
        *potCode = OT_NORMAL;
    }

    TraceTag((tagToken, "   OutputTag"));

ScanTag:
    hr = THR(pHts->WriteTagBeg(etag, &pht));
    if (hr)
        goto Cleanup;

    if (fEnd)
        pht->SetEnd();

    if (fDerived)
        pht->SetExtendedTag();

    fSlowProcess = FALSE;

    goto VALSPACE;

    // for each attribute-value pair
    while (ch != _T('>') && pht->GetAttrCount() < MAX_ATTR_COUNT)
    {
        Assert(ISATTCH(ch) || ISQUOTE(ch) || ch == _T('='));

        hr = THR(pHts->WriteTagGrow(&pht, &pAttr));
        if (hr)
            goto Cleanup;

        pAttr->_pchName = pch;

    ATTLOOP:
        while (ISATTCH(ch))
            ch = *(++pch);

        if (ISQUOTE(ch))
        {
            // Fix for IE4 bug 44892: replace leading quotes in attribute name with '?'
            // Fix for IE5 bug 26884: replace all quotes in attribute name with '?'
            
            *pch = _T('?');
            ch = *(++pch);
            goto ATTLOOP;
        }

        pAttr->_cchName = pch - pAttr->_pchName;

        // null-terminate attribute name

        *pch = '\0';

        // a=b without spaces is quick

        if (ch == _T('='))
        {
            ch = *(++pch);
            if (ISNONSP(ch))
                goto VALSTART;
            else
                goto EQSPACE;
        }
        
    ATTSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line

        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto ATTSPACE;
        }

        // if no = look for next attr
        if (ch != _T('='))
        {
            pAttr->_pchVal  = NULL;
            pAttr->_cchVal  = 0;
            goto ENDATT;
        }

        // eat equals sign
        ch = *(++pch);

        // skip space after equals sign

    EQSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line
        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto EQSPACE;
        }

    VALSTART:
    
        // eat quoted value
        if (ISQUOTE(ch))
        {
            TCHAR chQuote = ch;

            // eat leading quote
            ch = *(++pch);

            pAttr->_pchVal = pch;
            pAttr->_ulOffset = ulOff + pch - pchStart;
            pAttr->_ulLine = ulLine;

            // eat quoted value, paying attention to tag limit
            while (pch < pchLimit && ch != chQuote)
            {
                if (ch == _T('&'))
                    fSlowProcess = TRUE;
                ch = *(++pch);
            }

            pAttr->_cchVal = pch - pAttr->_pchVal;

            // null-terminate
            *pch = _T('\0');

            // eat trailing quote
            if (pch < pchLimit)
                ch = *(++pch);
        }

        // eat unquoted value
        else
        {
            pAttr->_pchVal = pch;
            pAttr->_ulOffset = ulOff + (fCount ? pch - pchStart : 0);
            pAttr->_ulLine = ulLine;

        VALLOOP:
            while (ISVALCH(ch))
                ch = *(++pch);

            if (ch == '&')
            {
                fSlowProcess = TRUE;
                ch = *(++pch);
                goto VALLOOP;
            }

            pAttr->_cchVal = pch - pAttr->_pchVal;

            // null-terminate
            *pch = _T('\0');
        }

#if DBG==1
        if (IsTagEnabled(tagNoValues))
        {
            pAttr->_pchVal = NULL;
            pAttr->_cchVal = 0;
            pAttr->_ulOffset = 0;
            pAttr->_ulLine = 0;
        }
        if (IsTagEnabled(tagEmptyValues))
        {
            pAttr->_cchVal = 0;
        }
#endif

        // skip space after value
    VALSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line
        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto VALSPACE;
        }

    ENDATT:
        // trailing '/'
        if (ch == _T('/'))
        {
            ch = *(++pch);

            if (ch != _T('>'))
                goto VALSPACE;

            pht->SetEmpty();
        }
    }

    Assert(ch == _T('>') || ch == _T('\0') || pht->GetAttrCount() == MAX_ATTR_COUNT);

    // If we saw a nested begin tag of a nested literal, we need to check if it was empty
    if( fDelayedRejectNestedLiteral )
    {
        Assert( etag == ETAG_GENERIC_NESTED_LITERAL && pHtmPre && pchForDRNL && pchBuff );

        if( pht->IsEmpty() )
            pHtmPre->_cLiteral--;

        pHts->WriteTagAbort();
        MemFree( pchBuff );
        pch = pchForDRNL;

        Assert( pHtmPre->_cLiteral > 0 );
        *potCode = OT_REJECT;
        return S_OK;
    }

    // since we are matching a Netscape quote bug,
    // we may not have consumed all the characters, so count lines
    while (pch < pchLimit)
    {
        if (ch == _T('\r') || (ch == _T('\n') && *(pch-1) != _T('\r')))
            ulLine += fCount;
        ch = *(++pch);
    }

    if (etag == ETAG_SCRIPT && !fEnd)
    {
        // CONSIDER: (alexz) allow derivation from <SCRIPT> tag.
        // Currently this is not possible because of optimizations with CHtmTag:
        // if it has line and offset set, then it can't have pch set.
        Assert(!fDerived);
        pht->SetOffset(ulOff + cch);
        pht->SetLine(ulLine);
    }
    else if (!fDerived && (etag > ETAG_UNKNOWN && etag < ETAG_GENERIC))
    {
        if (pht->GetAttrCount() == 0)
        {
            pht->SetTiny();
        }
        else
        {
            pht->SetPch(NULL);
            pht->SetCch(0);
        }
    }
    else
    {
        pchTagName[cchTagName] = 0;
        pht->SetPch(pchTagName);
        pht->SetCch(cchTagName);
    }

    if (fSlowProcess)
    {
        // flag set means that we possibly have entities in values
        
        c = pht->GetAttrCount();
        
        Assert(c);
        
        // collapse entities and re-null-terminate strings
        for (pAttr = pht->GetAttr(0); c; pAttr++, c--)
        {
            Assert(pAttr->_pchName[pAttr->_cchName] == _T('\0'));

            if (pAttr->_pchVal)
            {
                ProcessValueEntities(pAttr->_pchVal, &(pAttr->_cchVal));
                pAttr->_pchVal[pAttr->_cchVal] = _T('\0');
            }
        }
    }

    // NOTE: (103078) - Calling SpecialToken can do quite a lot of
    // things.  Most of them, we don't want to do if we're filtering out the
    // token (eg, speculative download, ?Imports, etc.).  Only thing right now
    // that we should do is honor the PLAINTEXT tag.
    fSkip = FALSE;
    if (pHtmPre && pHtmPre->_pfnFilterOutputToken != NULL)
    {
        CStringNullTerminator   term(pchTagName + cchTagName);
        CTagNameCracker         c(pchTagName);

        if (!((*pHtmPre->_pfnFilterOutputToken)(c._pchNamespace, c._pchTagName, pht)))
        {
            fSkip = TRUE;
        }
    }
    const CTagDesc *ptd;

    // We shouldn't have been able to get a nested literal w/out a pre.  If we did, we won't convert below
    Assert( pHtmPre || pht->GetTag() != ETAG_GENERIC_NESTED_LITERAL );

    // default next state is TS_TEXT; can be changed by SpecialToken
    if (pHtmPre)
    {
        pHtmPre->_state = TS_TEXT;

        ptd = TagDescFromEtag(etag);

        // Process special tags
        if (ptd)
        {
            // handle ClarisWorks header - end on a recognized tag only
            pHtmPre->_fSuppressLeadingText = FALSE;

            // literal HTML tags
            if (ptd->HasFlag(TAGDESC_LITERALTAG))
            {
                // Only the tokenizer should ever see Nested_Literal
                if( pht->GetTag() == ETAG_GENERIC_NESTED_LITERAL )
                {
                    pht->SetTag( ETAG_GENERIC_LITERAL );
                }

                // NOTE: We only respect literalness and atomic tags with generic tags.  IE6 Bug #22727
                pHtmPre->_etagLiteral = ( fEnd || (pht->IsEmpty() && pht->GetTag() == ETAG_GENERIC_LITERAL) ) ? ETAG_NULL : etag;
                pHtmPre->_cLiteral = pHtmPre->_etagLiteral != ETAG_NULL;
                if (ptd->HasFlag(TAGDESC_LITERALENT))
                {
                    pHtmPre->_fLiteralEnt = !( fEnd || pht->IsEmpty() );
                    if (fEnd || pht->IsEmpty() )
                        pHtmPre->_cstrLiteral.Free();
                    else
                        pHtmPre->_cstrLiteral.Set(pchTagName, cchTagName);
                }
            }

            // other special tags
            if (ptd->HasFlag(TAGDESC_SPECIALTOKEN))
            {
                if( !fSkip || ( pht->GetTag() == ETAG_PLAINTEXT && !pht->IsEnd() ) )
                {
                    hr = THR(pHtmPre->SpecialToken(pht));
                    if (S_FALSE == hr)  // S_FALSE indiciates request to abort emitting the token
                    {
                        pHts->WriteTagAbort();
                        hr = S_OK;      // we are ok now 
                        goto Cleanup;
                    }
                    if (hr)
                        goto Cleanup;
                }
            }
        }

        if (pHtmPre->_state == TS_SUSPEND)
        {
            // We are going to be suspending and returning E_PENDING to the toplevel function
            // (either Exec() or TokenizeText()).  They will take responsibility for calling
            // WriteTagEnd() and signalling.

            goto Cleanup;
        }
    }

    if( !fSkip )
    {
        pHts->WriteTagEnd();
    }
    else
    {
        pHts->WriteTagAbort();
    }


Cleanup:

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputDocSize
//
//  Synopsis:   Outputs the number of character parsed
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputDocSize( )
{
    Assert(_ulLastCharsSeen <= _ulCharsEnd);

    //
    // If we perform a document.write immediately followed by a
    // document.close, we'll end up calling OutputDocSize twice.
    // In this case, don't send the second ETAG_RAW_DOCSIZE
    // token. (t-chrisr)
    //

    if (_ulLastCharsSeen != _ulCharsEnd)
    {
        _ulLastCharsSeen = _ulCharsEnd;

        TraceTag((tagToken, "   OutputDocSize"));
        RRETURN(THR(_pHtmTagStm->WriteTag(ETAG_RAW_DOCSIZE, _ulCharsEnd, 0)));
    }

    return(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputEntity
//
//  Synopsis:   Outputs one-char entity, from _pchStart to _pch.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputEntity(TCHAR *pchStart, ULONG cch, XCHAR chEnt)
{
    HRESULT hr;
    
    TraceTag((tagToken, "   OutputEntity"));
    
    if (_etagEchoSourceEnd)
    {
        // Save entity before overwriting it with chEnt
        hr = THR(SaveSource(pchStart, cch));
        if (hr)
            goto Cleanup;
    }

#ifndef NO_UTF16
    if (chEnt < 0x10000)
    {
        // overwrite '&'
        *pchStart = chEnt;

        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 1, !!(chEnt < 0x80) ));
    }
    else
    {
        Assert(cch >= 2);

        // convert non-BMP char in to surrogate pair

        pchStart[0] = HighSurrogateCharFromUcs4(chEnt);
        pchStart[1] = LowSurrogateCharFromUcs4(chEnt);

        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 2, FALSE ));
    }
#else
    // overwrite '&'
    *pchStart = chEnt;

    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 1, !!(chEnt < 0x80) ));
#endif

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::EntityChFromNumber
//
//  Synopsis:   Digits->tchar, or '?' if too many digits
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromNumber(TCHAR *pchWord, ULONG cch)
{
    XCHAR ch = XCHAR('?');

#ifndef NO_UTF16
    if (cch <= 7)
#else
    if (cch <= 5)
#endif
    {
        TCHAR   ach[8];
        int     i;

        // The W3C spec has declared that all numerically encoded entities
        // should be treated as Unicode.  For the range 160-255, this is
        // exactly the same as Latin-1 (Windows-1252).  Unicode, however,
        // does not define glyphs for the range 128-159 (they are control
        // characters.)  For maximum compatibility, we will treat those
        // characters also as Latin-1.

        _tcsncpy(ach, pchWord, cch);
        ach[cch]=_T('\0');
        i = StrToInt(ach);

#ifndef NO_UTF16
        if (i < 0x10000)
        {
#endif
            if (InRange(TCHAR(i), 0x80, 0x9f))
            {
                ch = g_achLatin1MappingInUnicodeControlArea[i-0x80];
            }
            else if (IsValidWideChar(TCHAR(i)))
            {
                // Exclude the Private Use Area, so as to not confuse
                // the post-parser.

                ch = XCHAR(i);
            }
#ifndef NO_UTF16
        }
        else if (i < 0x110000)
        {
            ch = XCHAR(i);
        }
#endif
    }
    return ch;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::EntityChFromHex
//
//  Synopsis:   Hex->tchar, or '?' if too many digits
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromHex(TCHAR *pchWord, ULONG cch)
{
    XCHAR ch = XCHAR('?');

#ifndef NO_UTF16
    if (cch <= 6)
#else
    if (cch <= 4)
#endif
    {
        // initialize the string so hex value can be evaluated by wcstol()
        TCHAR   ach[9] = _T("0x");
        TCHAR*  pEnd;
        int     i;

        // The W3C spec has declared that all hex encoded entities
        // should be treated as Unicode.  For the range 0xA0-0xFF, this is
        // exactly the same as Latin-1 (Windows-1252).  Unicode, however,
        // does not define glyphs for the range 0x80-0x9F (they are control
        // characters.)  For maximum compatibility, we will also treat those
        // characters as Latin-1.

        _tcsncpy(ach+2, pchWord, cch);
        ach[cch+2]=_T('\0');
        // convert the hex string (base 16)
        i=(int) wcstol(ach, &pEnd, 16);

#ifndef NO_UTF16
        if (i < 0x10000)
        {
#endif
            if (InRange(TCHAR(i), 0x80, 0x9f))
            {
                ch = g_achLatin1MappingInUnicodeControlArea[i-0x80];
            }
            else if (IsValidWideChar(TCHAR(i)))
            {
                // Exclude the Private Use Area, so as to not confuse
                // the post-parser.
                ch = XCHAR(i);
            }
#ifndef NO_UTF16
        }
        else if (i < 0x110000)
        {
            ch = XCHAR(i);
        }
#endif
    }
    return ch;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputComment
//
//  Synopsis:   Outputs a comment.  The comment lies between _pchStart and _pch.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputComment(TCHAR *pch, ULONG cch)
{
    HRESULT hr;
    
    // Handle ClarisWorks header
    _fSuppressLeadingText = FALSE;

    TraceTag((tagToken, "   OutputComment"));
    
    if (_etagEchoSourceEnd)
    {
        // Save comment text if needed
        hr = THR(SaveSource(pch, cch));
        if (hr)
            goto Cleanup;
    }

    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_COMMENT, pch, cch, FALSE));

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputConditional
//
//  Synopsis:   Outputs a conditional comment.  The current behavior is
//              to throw away the text and output nothing.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputConditional(TCHAR *pch, ULONG cch, CONDVAL val)
{
    HRESULT hr = S_OK;
    
    // Handle ClarisWorks header
    _fSuppressLeadingText = FALSE;

    TraceTag((tagToken, "   OutputConditional"));
    
    if (_etagEchoSourceEnd)
    {
        // Save comment text if needed
        hr = THR(SaveSource(pch, cch));
        if (hr)
            goto Cleanup;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (val == COND_INCLUDE) 
    {
        // the case for <![include "http://foobar/..."]>
        CHtmTag * pht;

        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_INCLUDE, &pht));

        pht->SetPch(pch);
        pht->SetCch(cch);
    }
    else 
#endif
    {
        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXTFRAG, pch, cch, FALSE));
    }

Cleanup:
    RRETURN(hr);
}
//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputEof
//
//  Synopsis:   Outputs an EOF into the stmchan
//
//-------------------------------------------------------------------------
void
CHtmPre::OutputEof(HRESULT hr)
{
    TraceTag((tagToken, "   OutputEof"));
    _pHtmInfo->OnBindResult(_pDwnBindData->GetBindResult());
    _pHtmTagStm->WriteEof(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SaveSource
//
//  Synopsis:   Sends a token containing the original source.
//              This token exists from _pchStart to _pch.
//
//              ** NOTE ** that since this involves copying
//              of buffers around, _pchStart and _pch and such
//              might get changed by this command.  Any local
//              copies of these variables will have to be re-synced
//              after this call.  pdpchShift returns the amount
//              that the buffer got moved.  You'll have to add this
//              value to all your local pointers after the call to save source.
//              pdpchShift can be NULL.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::SaveSource(TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    CHtmTag *pht;

    hr = THR(_pHtmTagStm->WriteSource(pch, cch));
    if (hr) 
        goto Cleanup;

    hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_SOURCE, &pht));
    if (hr)
        goto Cleanup;

    pht->SetHtmTagStm(_pHtmTagStm);
    pht->SetSourceCch(cch);

    _pHtmTagStm->WriteTagEnd();

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SpecialToken
//
//  Synopsis:   Used to do special things like kick off downloads,
//              track the base tag, suspend on script tags, etc.
//
//              Called only on tags with the TAGDESC_SPECIALTOKEN flag.
//
//              Called right before CMD_ENDTOKEN is written by OutputTag.
//              _aAttr holds all the attributes and values, and
//              _fEndTag indicates an end tag.
//
//              May write hidden values to the postchan and change _state.
//
//  Arguments:  etag     = the tag
//
//-------------------------------------------------------------------------
extern const ELEMENT_TAG s_atagAppletObject[];
extern const ELEMENT_TAG s_atagIframe[];

HRESULT
CHtmPre::SpecialToken(CHtmTag *pht)
{
    PerfDbgLog2(tagHtmPre, this, "+CHtmPre::SpecialToken <%s%ls>",
        pht->IsEnd() ? "/" : "", NameFromEtag(pht->GetTag()));

    HRESULT hr = S_OK;
    CHtmTag::CAttr *pAttr;

    if (pht->IsEnd())
    {
        switch (pht->GetTag())
        {
        case ETAG_SCRIPT:
            if (_fScriptDefer)
            {
                // if DEFER attribute present, set a bit and don't suspend the preparser
                pht->SetDefer();
            }
            else
            {
                // otherwise, suspend preparser
                _state = TS_SUSPEND;
            }
            break;

        case ETAG_OBJECT:
        case ETAG_APPLET:
        case ETAG_IFRAME:
        case ETAG_NOFRAMES:
        case ETAG_NOSCRIPT:
        case ETAG_NOEMBED:

            // When we see the end tag for any of these, we'll start speculative download again
            
            if (0 != _cDownloadSupression)
                _cDownloadSupression--;

            break;

#if DBG==1
        case ETAG_RAW_RESOLVE:
            AssertSz(0, "ETAG_RAW_RESOLVE should never be end tag");
            break;
#endif
        }
    }
    else
    {
        switch (pht->GetTag())
        {
        case ETAG_HTML:
            RegisterHtmlTagNamespaces(pht);
            break;

        case ETAG_RAW_XMLNAMESPACE:
        case ETAG_RAW_EXTENDEDTAG:
        case ETAG_RAW_RESOLVE:
            _state = TS_SUSPEND;
            break;

        case ETAG_SCRIPT:

            pAttr = pht->AttrFromName(_T("DEFER"));
            _fScriptDefer = (pAttr && !pAttr->_cchVal);

            // grab SRC bits for downloaded script
            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_BITS, pAttr->_pchVal, pAttr->_cchVal, NULL, PROGSINK_CLASS_CONTROL));
            if (hr)
                goto Cleanup;

            break;

        case ETAG_PLAINTEXT:
            _state = TS_PLAINTEXT;
            break;

        case ETAG_BASE:
            // deal with base href change

            pAttr = pht->AttrFromName(_T("HREF"));
            if (!pAttr)
                break;

            hr = SetUrlDefaultScheme(pAttr->_pchVal, &_cstrBase);
            if (hr)
                goto Cleanup;

            if (_pInetSess && !CanPrefetchWithScheme(_cstrBase))
            {
                ClearInterface(&_pInetSess);
            }

            break;

        case ETAG_BODY:
        case ETAG_TABLE:
            // Prevent any palette info from sneaking in once an image is found.
            // This ensures that all images for this DwnDoc will get the same palette
            TraceTag((tagPalette, "Found an image tag, palette meta will no longer be accepted"));
            _pDwnDoc->PreventAuthorPalette();

            if (!(_pDwnDoc->GetLoadf() & DLCTL_DLIMAGES))
                break;

            pAttr = pht->AttrFromName(_T("BACKGROUND"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_IMG, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_INPUT:

            // nothing special if type!=image
            pAttr = pht->AttrFromName(_T("TYPE"));
            if (!pAttr)
                break;
            if (_tcsnicmp(_T("IMAGE"),-1, pAttr->_pchVal, pAttr->_cchVal))
                break;

            // fallthrough to ETAG_IMG ...

        case ETAG_IMG:

            // Prevent any palette info from sneaking in once an image is found.
            // This ensures that all images for this DwnDoc will get the same palette
            TraceTag((tagPalette, "Found an image tag, palette meta will no longer be accepted"));
            _pDwnDoc->PreventAuthorPalette();

            if (!(_pDwnDoc->GetLoadf() & DLCTL_DLIMAGES))
                break;

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
            {
                pAttr = pht->AttrFromName(_T("LOWSRC"));
                if (!pAttr)
                    break;
            }
            hr = THR(AddDwnCtx(DWNCTX_IMG, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_BGSOUND:

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            if (!(_pDwnDoc->GetLoadf() & DLCTL_BGSOUNDS))
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_FILE, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_LINK:

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("REL"));
            if (!pAttr)
                break;

            // if stylesheet
            if (0 == _tcsnicmp(pAttr->_pchVal, pAttr->_cchVal, _T("STYLESHEET"), 10))
            {
                //
                // try to launch download
                //

                pAttr = pht->AttrFromName(_T("HREF"));
                if (!pAttr)
                    break;

                hr = THR(AddDwnCtx(DWNCTX_CSS, pAttr->_pchVal, pAttr->_cchVal));
                if (hr)
                    goto Cleanup;
            }

            break;

        case ETAG_META:

            // handle cookies
            hr = THR(HandleMETA(pht));
            if (hr)
                goto Cleanup;
            break;

#ifdef NEVER
        case ETAG_FRAME:
            if (_pDwnDoc->GetLoadf() & DLCTL_NO_FRAMEDOWNLOAD)
                break;

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;

            hr = THR(AddDwnCtx(DWNCTX_HTM, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;
#endif

        case ETAG_FRAMESET:

            // Supress all speculative downloads after the first FRAMESET tag is seen
            
            ClearInterface(&_pInetSess);
            break;

        case ETAG_OBJECT:
        case ETAG_APPLET:
        case ETAG_IFRAME:
        
            // EchoSource mode starts now, and will stop if we see a begin <OBJECT> or <APPLET>
            // (after which it will start again)
            
            if (!_etagEchoSourceEnd)
                _atagEchoSourceBegin = (pht->GetTag() == ETAG_IFRAME ? s_atagIframe : s_atagAppletObject);

            // fall through
            
        case ETAG_NOEMBED:
        case ETAG_NOFRAMES:
        case ETAG_NOSCRIPT:
        
            // EchoSource mode starts now, and will stop if we see a end tag corresponding to the begin tag
            
            if (!_etagEchoSourceEnd)
                _etagEchoSourceEnd = pht->GetTag();

            // fall through some more

        
            // Inside these tags we supress speculative download.
            // Note that even if we guess wrong and supress download when we shouldn't, the
            // download will be kicked off again on the UI thread. (And if we don't supress
            // download when we should have, the UI thread will kill the extra download.)
            
            _cDownloadSupression++;
            
            break;
        }
    }
Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SpecialToken (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::AddDwnCtx
//
//  Synopsis:   Downloads a specific type of URL, stores the load ctx
//              in a slot, and writes a hidden attribute with the slot
//              number into the stream.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::AddDwnCtx(UINT dt, LPCTSTR pchUrl, int cchUrl,
    CDwnBindData * pDwnBindData, DWORD dwProgClass)
{
    TCHAR       ach[pdlUrlLen];
    ULONG       cch;
    TCHAR *     pchUrlCombined = ach;
    CDwnCtx *   pDwnCtx = NULL;
    BOOL        fLoad   = TRUE;
    DWNLOADINFO dli     = { 0 };
    HRESULT     hr      = S_OK;

    Assert(dt == DWNCTX_IMG || dt == DWNCTX_BITS || dt == DWNCTX_FILE || dt == DWNCTX_CSS);

    if (!pDwnBindData && !_pInetSess)
        goto Cleanup;

    #if DBG==1
    if (IsTagEnabled(tagHtmPreNoAutoLoad))
        goto Cleanup;
    #endif

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagDwnBindSlow))
        goto Cleanup;
    #endif

    #if DBG==1 || defined(PERFTAGS)
    {
        TCHAR chT = cchUrl ? pchUrl[cchUrl] : 0;
        if (cchUrl) *(TCHAR *)(pchUrl + cchUrl) = 0;
        PerfDbgLog3(tagHtmPre, this, "CHtmPre::AddDwnCtx %s %ls %s",
            dt == DWNCTX_IMG ? "DWNCTX_IMG" :
            dt == DWNCTX_BITS ? "DWNCTX_BITS" :
            dt == DWNCTX_CSS ? "DWNCTX_CSS" :
            dt == DWNCTX_FILE ? "DWNCTX_FILE" : "DWNCTX_???",
            cchUrl ? pchUrl : g_Zero.ach,
            pDwnBindData ? "(via CDwnBindData)" : "");
        if (cchUrl) *(TCHAR *)(pchUrl + cchUrl) = chT;
    }
    #endif

    // Temporarily terminate the URL (guaranteed to have enough space)

    if (cchUrl == 0)
    {
        ach[0] = 0;
    }
    else if (pDwnBindData)
    {
        if (cchUrl > ARRAY_SIZE(ach) - 1)
            cchUrl = ARRAY_SIZE(ach) - 1;
        memcpy(ach, pchUrl, cchUrl * sizeof(TCHAR));
        ach[cchUrl] = 0;
    }
    else
    {
        TCHAR * pchBase = _cstrBase ? _cstrBase : _cstrDocUrl;

        Assert(CanPrefetchWithScheme(pchBase));

        TCHAR ch = pchUrl[cchUrl];
        *(TCHAR *)(pchUrl + cchUrl) = 0;

        hr = THR(CoInternetCombineUrl(pchBase, pchUrl,
            URL_ESCAPE_SPACES_ONLY | URL_BROWSER_MODE,
            ach, ARRAY_SIZE(ach), &cch, 0));

        *(TCHAR *)(pchUrl + cchUrl) = ch;

        if (hr || !CanPrefetchWithScheme(ach))
            goto Cleanup;
    }

    dli.pDwnBindData    = pDwnBindData;
    dli.pDwnDoc         = _pDwnDoc;
    dli.pInetSess       = _pInetSess;
    dli.pchUrl          = pchUrlCombined;
    dli.fForceInet      = TRUE;
    dli.dwProgClass     = dwProgClass;
    
    // Since we are in the pre-parser, it's safe to assume that we are in the pending world
    // if we don't have a CDwnBindData
    dli.fPendingRoot    = _pDwnBindData ? _pDwnBindData->GetStartedInPending() : TRUE;

    hr = THR(NewDwnCtx(dt, fLoad, &dli, &pDwnCtx));
    if (hr)
        goto Cleanup;

    if( !( pDwnCtx->GetState() & DWNLOAD_ERROR ) )
    {
        hr = THR(_pHtmLoad->AddDwnCtx(dt, pDwnCtx));
        if (hr)
            goto Cleanup;
    }

    // We suppress errors because we don't want parsing to stop just
    // because we couldn't kick off a speculative download.  Also, we
    // expect some attempts to use InetSess to fail if, for example, it
    // determines that it needs to remap the namespace.  This download
    // will be retried on the UI thread later.

Cleanup:
    if (pDwnCtx)
        pDwnCtx->Release();
    return(S_OK);
}
#ifdef WIN16
#pragma code_seg("htmpre3_TEXT")
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::HandleMETA
//
//  Synopsis:   META tag handling. This should only process values that
//              affect the current download, like "HTTP-EQUIV=Set-Cookie"
//              and "HTTP-EQUIV=Content-type".  Meta information that does
//              not affect the current download will be processed
//              after the download is complete...
//
//              Added support for the palette tag here so we have the
//              information in time for image decoding (michaelw)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::HandleMETA(CHtmTag *pht)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::HandleMETA");

    HRESULT hr = S_OK;
    LPCTSTR pchActualURL;
    CHtmTag::CAttr *pAttrHttpEquiv;
    CHtmTag::CAttr *pAttrName;
    CHtmTag::CAttr *pAttrContent;

    // If the HTTP-EQUIV val is "Set-Cookie", then we want to tell
    // Wininet about the CONTENT val. If the content value contains
    // an equal-sign, it is interpreted as a name-value pair; i.e.,
    // it splits the string at that point and hands the two pieces to
    // InternetSetCookie() distinctly.

    pAttrHttpEquiv = pht->AttrFromName(_T("HTTP-EQUIV"));
    pAttrName      = pht->AttrFromName(_T("NAME"));
    pAttrContent   = pht->AttrFromName(_T("CONTENT"));

    if (pAttrHttpEquiv && pAttrContent &&
        !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Set-Cookie"), -1))
    {
        pchActualURL = _pHtmLoad->GetUrl();
        // If there's no URL for this doc, there will be no cache
        // entry to tweak (?)
        if (pchActualURL && *pchActualURL)
        {
            CStr cstrCookie;
            hr = cstrCookie.Set(pAttrContent->_pchVal, pAttrContent->_cchVal);
            if (hr)
                goto Cleanup;

            // note that "name=value" is sent as third argument, and second arg is NULL
            CMarkup::MarkupCookieStruct * pmcs = new CMarkup::MarkupCookieStruct;            
            MemAllocString(Mt(SetCookie), pchActualURL, &(pmcs->lpszUrl));
            pmcs->lpszCookieName = NULL;
            MemAllocString(Mt(SetCookie), cstrCookie, &(pmcs->lpszCookieData));
            pmcs->lpszP3PHeader = NULL;

            // [kusumav] See IE 6 bug 37229 for more details
            // Typically the ownership of the p3pheader is transferred (from CDwnBinddata to CHtmLoad to CMarkup) 
            // so we don't have to copy the same string over and over in memory at each step of the process. By the 
            // time we get to the meta processing in the pre-parser, the ownership has been passed to CHtmLoad.  
            // So the pre-parser (CHtmPre) needs to get it from the CHtmLoad. If the pre-parser takes ownership 
            // of the memory, posts the call to the UI thread and we don't set it in CHtmPost::OnPostStart we could 
            // set script cookies without using a P3P policy. Hence we make a copy here of the header here
            
            // Retrieved the P3P header? Need to do this only once per html markup though we see multiple meta cookie tags
            if (!_fRetrievedP3PHeader)
            {
                if (_pHtmLoad)
                {
                    TCHAR * pchP3PHeader = _pHtmLoad->GetP3PHeader();
                    if (pchP3PHeader && *pchP3PHeader)
                    {
                        MemAllocString(Mt(SetCookie), pchP3PHeader, &(pmcs->lpszP3PHeader));
                    }
                }
                _fRetrievedP3PHeader = TRUE;
            }

            GWPostMethodCallEx(_pHtmLoad->_pMarkup->Doc()->_pts, (void*)_pHtmLoad->_pMarkup, 
                               ONCALL_METHOD(CMarkup, SetCookieOnUIThread, setcookieonuithread),
                               ((DWORD_PTR)pmcs), TRUE, "CMarkup::SetCookieUI");
            goto Cleanup;  // make sure label is referenced
        }
    }
    else if (pAttrHttpEquiv && pAttrContent && !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("palette"), -1) && _pDwnDoc->WantAuthorPalette())
    {
        TraceTag((tagPalette, "Found a palette meta"));
        _pDwnDoc->SetAuthorColors(pAttrContent->_pchVal, pAttrContent->_cchVal);
    }
    else if (!_fMetaCharsetOverride)
    {
        // Per IE spec, only the first charset setting META tag counts.

        // CONSIDER (johnv) May need Big Endian Unicode support

        if (CP_UNDEFINED == _cpNew && _cp != CP_UCS_2)
        {
            // Per IE spec, handle the following cases:
            //
            // <META CHARSET=XXX>
            // <META HTTP-EQUIV CHARSET=XXX>
            // <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=XXX">
            // <META HTTP-EQUIV="Charset" CONTENT="text/html; charset=XXX"> // IE5 bug 52716

            CHtmTag::CAttr *pAttrCharset = pht->AttrFromName(_T("CHARSET"));

            if (pAttrCharset ||
                (pAttrContent && pAttrHttpEquiv &&
                 (!_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Content-Type"), -1) ||
                  !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Charset"), -1))))
            {
                CHtmTag::CAttr *pAttrArg = pAttrCharset ? pAttrCharset : pAttrContent;
                CODEPAGE cp;
                CStr cstrArg;

                hr = cstrArg.Set(pAttrArg->_pchVal, pAttrArg->_cchVal);
                if (hr)
                    goto Cleanup;

                cp = CodePageFromString( cstrArg, pAttrArg == pAttrContent );

                if (cp != CP_UNDEFINED && cp != _cp)
                {
                    // We shall reencode the buffer when we return to Tokenize().
                    _state = TS_NEWCODEPAGE;
                }

                #if DBG==1 || defined(PERFTAGS)
                if (    cp != CP_UNDEFINED
                    &&  IsPerfDbgEnabled(tagForceSwitchToRestart))
                {
                    _state = TS_NEWCODEPAGE;
                }
                #endif

                // If cp == CP_UNDEFINED, we want to process the next meta tag.
                // Otherwise, skip subsequent tags.
                _cpNew = cp;
            }
        }
    }

    // Add other HTTP-EQUIV value handling here (make sure iHttpEquiv >= 0)

Cleanup:
    PerfDbgLog(tagHtmPre, this, "-CHtmPre::HandleMETA");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     SetContentTypeFromHeader
//
//  Synopsis:   Found "Content-type:" in the HTTP headers, set prelim
//              codepage for download (may be overridden by META tag in
//              doc)
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::SetContentTypeFromHeader(LPCTSTR pch)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::SetContentTypeFromHeader %ls", pch);

    TCHAR       ach[128];
    CStr        cstr;
    TCHAR *     pchT;
    UINT        cch;
    CODEPAGE    cp;
    HRESULT     hr = S_OK;

    // Unfortunately, the charset code needs a writeable string.

    cch = _tcslen(pch);

    if (cch < ARRAY_SIZE(ach) - 1)
    {
        memcpy(ach, pch, (cch + 1) * sizeof(TCHAR));
        pchT = ach;
    }
    else
    {
        hr = THR(cstr.Set(pch));
        if (hr)
            goto Cleanup;

        pchT = cstr;
    }

    cp = CodePageFromString(pchT, TRUE);

    if (cp != CP_UNDEFINED && !_fMetaCharsetOverride)
    {
        // We should be able to just switch now, before the Pre
        //  gets to run.  Make sure to set _cpNew to _cp, not cp,
        //  in case we couldn't handle cp.  _cpNew needs to get set
        //  so that we ignore meta charset tags later on.

        // The FALSE argment means: don't restart, don't suspend
        DoSwitchCodePage(cp, NULL, FALSE);
        _cpNew = _cp;
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SetContentTypeFromHeader (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SwitchCodePage
//
//  Synopsis:   Switch the current codepage.  Stuffs a CMD_NEWCODEPAGE
//              token into the stream.
//
//-------------------------------------------------------------------------

BOOL
CHtmPre::DoSwitchCodePage(CODEPAGE cp, BOOL *pfNeedRestart, BOOL fRestart)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::DoSwitchCodePage (cp=%d)", cp);

    // Note that this call is no longer used for really switching the code page
    // because if we switch, we will shut down and reparse. We just use the call
    // to determine if it is possible+necessary to switch (dbau)

    BOOL fSwitched;
    HRESULT hr;

    // cannot switch codepage in mid-fragment when pasting
    if (_fPasting && fRestart)
    {
        if (pfNeedRestart)
            *pfNeedRestart = FALSE;
            
        return FALSE;
    }

    fSwitched = CEncodeReader::ForceSwitchCodePage(cp, pfNeedRestart);

    #if DBG==1 || defined(PERFTAGS)
    if (fRestart && IsPerfDbgEnabled(tagForceSwitchToRestart))
        fSwitched = TRUE;
    else
    #endif
    if (pfNeedRestart)
        fRestart = fRestart && *pfNeedRestart;

    // bugfix: don't propagate switched codepage to document if pasting
    if (_fPasting)
        fSwitched = FALSE;

    // N.B. (johnv) Make sure not to throw a new codepage token into the stream if
    //  we are pasting.
    if (fSwitched)
    {
        // Convert our codepage into a token
        // and then hand it off to the post-processor.
        // N.B. (johnv) _cp can change to something other than cp if
        //  cp is not supported on the system, so be careful to use
        //  that instead.

        CHtmTag * pht;

        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_CODEPAGE, &pht));
        if (hr)
            goto Cleanup;

        if (fRestart)
            pht->SetRestart();

        pht->SetCodepage(cp);

        if (!fRestart)
        {
            // If we are not restarting, then this is informational only to the postparser.
            // Otherwise, we are going to be suspending and returning E_PENDING to the
            // toplevel function (either Exec() or TokenizeText()).  They will take responsibility
            // for calling WriteTagEnd() and signalling.

            _pHtmTagStm->WriteTagEnd();
        }


        // Codepage of CDwnDoc need to be updated if codepage of the document is being switched.
        if (_pDwnDoc)
            _pDwnDoc->SetDocCodePage(NavigatableCodePage(cp));
    }

Cleanup:

    // TODO: no error handling!!

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::DoSwitchCodePage (fSwitched=%s)",
        fSwitched ? "TRUE" : "FALSE");

    return fSwitched;
}
//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SwitchCodePage (CEncode override)
//
//  Synopsis:   This function overrides the default CEncode implementation.
//              Called from CEncode when it autodetects a codepage change
//              (e.g. when we find a unicode signature in the stream).
//              fDetected -
//              when mlang gets us detection result, unlike a unicode signature, 
//              it is not guaranteed that mlang can detect the codepage at the 
//              beginning of stream so we have to reload the document when the 
//              detected codepage is different from current.
//
//-------------------------------------------------------------------------

BOOL
CHtmPre::SwitchCodePage(CODEPAGE cp, BOOL *pfDifferentEncoding, BOOL fAutoDetected)
{
    BOOL fSwitched  = DoSwitchCodePage(cp, pfDifferentEncoding, fAutoDetected);
    if (fAutoDetected && fSwitched)
    {
       // if this switching is happening because of codepage
       // detection, we need to write out the end tag
       // so we can process codepage tag at the post parser
       _pHtmTagStm->WriteTagEnd();
       _pHtmTagStm->Signal();
       Suspend();
    }
    return fSwitched;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Read
//
//  Synopsis:   Read from _pDwnBindData
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::Read()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Read");

    HRESULT hr;
    unsigned long cbRead;
    unsigned long cbRequest;
    BYTE *pbRead = _pbBufferPtr;

    Assert( _cbBuffer + HTMPRE_BLOCK_SIZE <= _cbBufferMax );
    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

    if (_cbNextInsert >= 0)
        cbRequest = min(_cbNextInsert - _cbReadTotal, HTMPRE_BLOCK_SIZE);
    else
        cbRequest = HTMPRE_BLOCK_SIZE;

    hr = THR(_pDwnBindData->Read(pbRead, cbRequest, &cbRead));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmInfo->OnSource(pbRead, cbRead));
    if (hr)
        goto Cleanup;

    _cbBuffer += cbRead;
    _cbReadTotal += cbRead;
    _pbBufferPtr = _pbBuffer;

    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

Cleanup:
    PerfDbgLog4(tagHtmPre, this, "-CHtmPre::Read (cbRead=%ld,cbTotal=%ld,cbBuffer=%ld,hr=%lX)",
        cbRead, _cbReadTotal, _cbBuffer, hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::ReadStream
//
//  Synopsis:   Read from passed in stream
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::ReadStream(IStream *pstm, BOOL *pfEof)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Read");

    HRESULT hr;
    unsigned long cbRead;
    unsigned long cbRequest;
    BYTE *pbRead = _pbBufferPtr;

    Assert( _cbBuffer + HTMPRE_BLOCK_SIZE <= _cbBufferMax );
    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

    if (_cbNextInsert >= 0)
        cbRequest = min(_cbNextInsert - _cbReadTotal, HTMPRE_BLOCK_SIZE);
    else
        cbRequest = HTMPRE_BLOCK_SIZE;

    hr = THR(pstm->Read(pbRead, cbRequest, &cbRead));
    if (hr)
        goto Cleanup;

    *pfEof = (!cbRead);

    hr = THR(_pHtmInfo->OnSource(pbRead, cbRead));
    if (hr)
        goto Cleanup;

    _cbBuffer += cbRead;
    _cbReadTotal += cbRead;
    _pbBufferPtr = _pbBuffer;

    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

Cleanup:
    PerfDbgLog4(tagHtmPre, this, "-CHtmPre::Read (cbRead=%ld,cbTotal=%ld,cbBuffer=%ld,hr=%lX)",
        cbRead, _cbReadTotal, _cbBuffer, hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::AddInsert
//
//  Synopsis:   Adds a token which must be inserted into the token stream
//              before processing beyond the given cb of the input stream
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::AddInsert(int cb, TOKENINSERTCODE icode)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::AddInsert %d", icode);

    HRESULT hr = S_OK;

    CInsertMap imap;
    int i;

    Assert(cb >= _cbReadTotal);

    for (i = 0; i < _aryInsert.Size(); i++)
    {
        if (_aryInsert[i]._cb > cb)
            break;
    }

    imap._cb = cb;
    imap._icode = icode;

    hr = THR(_aryInsert.InsertIndirect(i, &imap));
    if (hr)
        goto Cleanup;

    _cbNextInsert = _aryInsert[0]._cb;

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::AddInsert (hr=%lX)", hr);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::QueueInserts
//
//  Synopsis:   Notes and queues up insert codes to be inserted after
//              next token
//
//-------------------------------------------------------------------------
void
CHtmPre::QueueInserts()
{
    CInsertMap *pins;
    long c;
    long cbNext = -1;
    
    for (c = _aryInsert.Size(), pins = _aryInsert; c; c -= 1, pins += 1)
    {
        if (pins->_cb > _cbReadTotal)
        {
            cbNext = pins->_cb;
            break;
        }
    }
    
    _cOutputInsert = pins - _aryInsert;
    _cbNextInsert = cbNext;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputInserts
//
//  Synopsis:   Sends a special token into the token stream, based on
//              the insert code
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputInserts()
{
    HRESULT hr = S_OK;
    ELEMENT_TAG etag;
    TOKENINSERTCODE icode;
    CHtmTag * pht;
    long i;

    Assert( _cOutputInsert >= 0 );

    if (!_cOutputInsert)
        goto Cleanup;
    
    for ( i = 0 ; i < _cOutputInsert ; i++ )
    {
        icode = _aryInsert[i]._icode;

        switch (icode)
        {
        case TIC_BEGINSEL  : etag = ETAG_RAW_BEGINSEL;  goto DoIt;
        case TIC_ENDSEL    : etag = ETAG_RAW_ENDSEL;

        DoIt:

            hr = THR( _pHtmTagStm->WriteTagBeg( etag, & pht ) );
            
            if (hr)
                goto Cleanup;

            pht->SetTiny();

            _pHtmTagStm->WriteTagEnd();

            break;

        default:
            Assert(0);
        }
    }

    _aryInsert.DeleteMultiple(0, _cOutputInsert - 1);

    _cOutputInsert = 0;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::InsertImage, public
//
//  Synopsis:   Writes the tokens for a standalone <IMG> tag
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::InsertImage(LPCTSTR pchUrl, CDwnBindData * pDwnBindData)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertImage %ls", pchUrl);

    CHtmTag * pht;
    CHtmTag::CAttr * pattr;
    TCHAR * pchBuffer;
    UINT cchUrl = _tcslen(pchUrl);
    HRESULT hr;

    hr = THR(AddDwnCtx(DWNCTX_IMG, pchUrl, cchUrl, pDwnBindData));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmTagStm->AllocTextBuffer(cchUrl + 1, &pchBuffer));
    if (hr)
        goto Cleanup;

    memcpy(pchBuffer, pchUrl, (cchUrl + 1) * sizeof(TCHAR));

    hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_IMG, &pht));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmTagStm->WriteTagGrow(&pht, &pattr));
    if (hr)
        goto Cleanup;

    pattr->_pchName = _T("SRC");
    pattr->_cchName = 3;
    pattr->_pchVal = pchBuffer;
    pattr->_cchVal = cchUrl;
    pattr->_ulOffset = 0;
    pattr->_ulLine = 0;

    if( _pDwnDoc->GetCDoc()->_pOptionSettings->fEnableImageResize   // Is option turned on
        && !_pDwnDoc->GetMarkup()->IsPrintMedia()                   // AND we're not printing
        && (_pDwnDoc->GetMarkup() == _pDwnDoc->GetCDoc()->PrimaryMarkup() // AND the markup for which we're downloading is either the doc's primary markup
            || _pDwnDoc->GetMarkup() == _pDwnDoc->GetCDoc()->PendingPrimaryMarkup() // OR the pending primary markup
            )
        && (GetModuleHandle(TEXT("EXPLORER.EXE")) || GetModuleHandle(TEXT("IEXPLORE.EXE"))) // AND we're not some wierd WebOC host
        )
    {

        // set a flag so we know to turn this on later...
         _pDwnDoc->GetCDoc()->_fShouldEnableAutoImageResize = TRUE;
           
    }

    _pHtmTagStm->WriteTagEnd();

    hr = THR(OutputDocSize());
    if (hr)
        goto Cleanup;

    OutputEof(S_OK);

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertImage (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SetGenericParse, public
//
//  Synopsis:   Throws the parser into a mode where unqualified tags are considered
//              external
//
//-------------------------------------------------------------------------
void
CHtmPre::SetGenericParse(BOOL fDoGeneric)
{
    if (_pHtmTagStm->TagsWritten() == 0)
        _fXML = fDoGeneric;
}

//+------------------------------------------------------------------------
//
//  Member:
//  [in,out]    fEndCR  Caller state value to indicated if the last character
//                      of previous buffer was a carriage return. On return
//                      set to TRUE if current buffer ends in CR otherwise
//                      set to FALSE.
//  [in]        pch     Pointer to first character of buffer to normalize
//  [in,out]    pchEnd  Pointer to pointer to one past the last character in
//                      the buffer to be normalized. This MUST be a writeable
//                      memory location (for example a string's NULL terminator).
//                      *ppchEnd is assigned to the last character of the
//                      normalized buffer upon return.
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//
//  NOTE:       **ppchEnd MUST be a writeable memory location (for example a
//              string's NULL terminator).
//
//-------------------------------------------------------------------------

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

int
NormalizerChar(LPTSTR pchStart, LPTSTR * ppchEnd, BOOL *pfAscii)
{
    if (pfAscii)
        *pfAscii = TRUE;

    if (!pchStart || !ppchEnd || !*ppchEnd )
        return 0;

    TCHAR *pch      = pchStart;
    TCHAR *pchLast  = *ppchEnd;
    TCHAR  ch;
    TCHAR *pchTo;

    // null terminate for speed when nothing needs to be done
    *pchLast = _T('\0');

fastscan:

    // Fast scan without copying to find first potentially invalid character.
    // Note that the NULL terminator will stop this loop.

    while (((WORD)(*pch++ - 1)) < 0x007F) ;

    if (pch > pchLast)
        return(0);

    // Nonascii character encountered.
    if (pfAscii)
        *pfAscii = FALSE;

    // Verify that the character really is invalid and not just out-of-range of
    // the fast scanner.

    ch = pch[-1];

    if (ch && IsValidWideChar(ch))
        goto fastscan;

    // Aw nuts, time to start squeezing out the invalid characters

    pchTo = --pch;

    while (pch < pchLast)
    {
        if (ch && IsValidWideChar(ch))
            *pchTo++ = ch;

        ch = *(++pch);
    }

    // null terminate for tokenizer
    *pchTo = _T('\0');

    // advance *ppchEnd
    *ppchEnd = pchTo;

    // return the number of chars by which we shrunk.
    return pchLast - pchTo;
}


//+------------------------------------------------------------------------
//
//  Member:
//  [in,out]    fEndCR  Caller state value to indicated if the last character
//                      of previous buffer was a carriage return. On return
//                      set to TRUE if current buffer ends in CR otherwise
//                      set to FALSE.
//  [in]        pch     Pointer to first character of buffer to normalize
//  [in,out]    pchEnd  Pointer to pointer to one past the last character in
//                      the buffer to be normalized. This MUST be a writeable
//                      memory location (for example a string's NULL terminator).
//                      *ppchEnd is assigned to the last character of the
//                      normalized buffer upon return.
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//
//  NOTE:       **ppchEnd MUST be a writeable memory location (for example a
//              string's NULL terminator).
//
//-------------------------------------------------------------------------

int
NormalizerCR(BOOL * pfEndCR, LPTSTR pchStart, LPTSTR * ppchEnd)
{
    if (!pchStart || !ppchEnd || !*ppchEnd )
        return 0;

    TCHAR ch;
    TCHAR *pchTo;
    TCHAR *pch              = pchStart;
    TCHAR *const pchLast    = *ppchEnd;
    BOOL  fCR               = pfEndCR && *pfEndCR;

    // null terminate for speed
    **ppchEnd = _T('\0');

    // Assign after null termination in case pchStart == *ppchEnd
    ch = *pch;

    // Trim LF if preceded by CR from previous run
    if (fCR && ch == _T('\n'))
    {
        pchTo = pch;
        ch = *(++pch);
    }
    else
    {
        while (ch == _T('\n'))
        {
            *pch = _T('\r');
            ch = *(++pch);
        }

        while (ch && ch != _T('\n') && IsValidWideChar(ch))
            ch = *(++pch);

        pchTo = pch;
    }

    // Assert(pch > pchStart || !ch);

    // mini CRLF and internal \0 handler
    while (pch < *ppchEnd)
    {
        if (!ch || !IsValidWideChar(ch))
            ch = *(++pch);
        else
        {
            do
            {
                // Assert(ch != _T('\0'));
                if (ch == _T('\n'))
                {
                    if (*(pch-1) == _T('\r'))
                        ch = *(++pch);

                    while (ch == _T('\n'))
                    {
                        *(pchTo++) = _T('\r');
                        ch = *(++pch);
                    }

                    if (!ch)
                        break;
                }

                // Assert(ch != _T('\0') && ch !=_T('\n'))
                if (IsValidWideChar(ch))
                    *(pchTo++) = ch;
                ch = *(++pch);

            } while (ch);
        }
    }

    // null terminate for tokenizer
    *pchTo = _T('\0');

    // advance *ppchEnd
    *ppchEnd = pchTo;

    // note trailing CR
    if (pfEndCR && (pch > pchStart))
        *pfEndCR = (*(pch-1) == _T('\r'));

    // return the number of chars by which we shrunk.
    return pchLast - pchTo;
}

#if DBG != 1
#pragma optimize("", on)
#endif


//+------------------------------------------------------------------------
//
//  Section:    Entities
//
//  Synopsis:   Translates entity names to/from unicode
//
//-------------------------------------------------------------------------

CPtrBag<ELEMENT_TAG> g_bEntities(&g_entasc);

//+------------------------------------------------------------------------
//
//  Function:   LookUpErTable
//
//  Synopsis:   Unicode->Entity name string, if any.
//
//              If no match, NULL is returned.
//
//  BSearch is too poor to handle arrays of pointers to objects, hence the
//  inline routine.
//
//-------------------------------------------------------------------------
const TCHAR*
LookUpErTable(TCHAR ch, BOOL fIsCp1252)
{
    const CAssoc * pEntry;
    int      iLow, iMiddle, iHigh;

    iHigh = sizeof(g_entasc_RevSearch)
           / sizeof(g_entasc_RevSearch[0]) - 1;
    iLow = 0;

#ifndef UNICODE
    // (cthrash) This is necessary for the multibyte build because entities
    // not in Windows-1252 map to '?', but we don't want to persist '?' as
    // named entities.  Yes, this means we won't roundtrip.  The Win16 folks
    // know this, and are happy to live with this limitation.
    if (ch == L'?')
    {
        return NULL;
    }
#endif

    // binary search
    while (iHigh != iLow)
    {
        Assert(iHigh > iLow);

        iMiddle = (iHigh + iLow) / 2;

        if (ch > g_entasc_RevSearch[iMiddle]->Number())
        {
            iLow = iMiddle + 1;
            if (ch < g_entasc_RevSearch[iLow]->Number())
            {
                // ch isn't in the array:
                // ch > val(iMiddle) && ch < val(iMiddle + 1)
                return NULL;
            }
        }
        else
        {
            iHigh = iMiddle;
        }
    }

    pEntry = g_entasc_RevSearch[iLow];

    if (ch == pEntry->Number() &&
        (!fIsCp1252 ||
         pEntry != &g_entasctrade &&
#ifdef UNICODE
         pEntry != &g_entascTRADE8482
#else
         pEntry != &g_entascTRADE153
#endif
        ))
    {
        return pEntry->String();
    }

    return NULL;
}

//+------------------------------------------------------------------------
//
//  Function:   EntityChFromName
//
//  Synopsis:   Entity name string->Unicode
//
//              If no match, \00 is returned.
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromName(TCHAR *pchText, ULONG cchText, DWORD hash)
{
    return (XCHAR)g_bEntities.Get(pchText, cchText, hash);
}



#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgbits.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1998
//
//  File:       imgbits.cxx
//
//  Contents:   CImbBits, CImgBitsDIB
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXx_
#include "imgbits.hxx"
#endif

MtDefine(CImgBitsDIB, DIBSection, "Bitmaps - CImgBitsDIB")
MtDefine(CImgBitsDIB_pvImg, DIBSection, "Bitmaps - bits")
MtDefine(CImgBitsDIB_pbmih, DIBSection, "Bitmaps - headers")
MtExtern(DIBSection)

#ifdef _WIN64
DeclareTag(tagUseMaskBlt,    "Dwn", "Img: Use MaskBlt on Win64");
#endif

DeclareTag(tagNoTransMask,   "Dwn", "Img: Don't compute TransMask");
DeclareTag(tagForceRawDIB,   "Dwn", "Img: Force use of raw DIB");
DeclareTag(tagIgnorePalette, "Dwn", "Img: Ignore nonhalftone palette");
DeclareTag(tagAssertRgbBlt,  "Dwn", "Img: Assert on RGB mode palette blt");

DeclareTag(tagForceRgbBlt,   "Dwn", "Img: Force RGB mode palette plt");

#define MASK565_0   0x0000F800
#define MASK565_1   0x000007E0
#define MASK565_2   0x0000001F

void
CImgBitsDIB::FreeMemoryNoClear()
{
    if (_hbmImg)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(CbLine() * _yHeight));
        #endif

        Verify(DeleteObject(_hbmImg));
        _pvImgBits = NULL;
    }
    
    if (_hbmMask)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(CbLineMask() * _yHeight));
        #endif

        Verify(DeleteObject(_hbmMask));
        _pvMaskBits = NULL;
    }

    MemFree(_pvImgBits);
    MemFree(_pvMaskBits);
    MemFree(_pbmih);
}

void
CImgBitsDIB::FreeMemory()
{
    FreeMemoryNoClear();
    _hbmImg = NULL;
    _hbmMask = NULL;
    _pvImgBits = NULL;
    _pvMaskBits = NULL;
    _pbmih = NULL;
    _cColors = 0;
}

static const RGBQUAD g_rgbWhite = { 255, 255, 255, 0 };
static const RGBQUAD g_rgbBlack = { 0, 0, 0, 0 };

CImgBitsDIB::CImgBitsDIB(float f)
{
    memset(this, 0, sizeof(CImgBitsDIB));
}

HRESULT
CImgBitsDIB::AllocCopyBitmap(HBITMAP hbm, BOOL fPalColors, LONG lTrans)
{
    HRESULT hr;
    
    LONG iBitCount;
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD rgb[256];
            WORD windex[256];
            DWORD dwbc[3];
        };
    } header;

    HDC hdc;

    hdc = GetMemoryDC();
    if (!hdc)
        return E_OUTOFMEMORY;
                
    memset(&header, 0, sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 256);
    header.bmih.biSize = sizeof(BITMAPINFOHEADER);
    
    GetDIBits(hdc, hbm, 0, 0, NULL, (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);
    
    // GetDIBits(hdc, hbm, 0, 0, NULL, (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);
    // A second call to GetDIBits should get the color table if any, but it doesn't work on Win95, so we use
    // GetDIBColorTable instead (dbau)

    if (header.bmih.biBitCount <= 8)
    {
        HBITMAP hbmSav;
        hbmSav = (HBITMAP)SelectObject(hdc, hbm);
        GetDIBColorTable(hdc, 0, 1 << header.bmih.biBitCount, header.rgb);
        SelectObject(hdc, hbmSav);
    }
    
    iBitCount = header.bmih.biBitCount;
    if (iBitCount == 16)
    {
        if (header.bmih.biCompression != BI_BITFIELDS ||
            header.dwbc[0] != MASK565_0 || header.dwbc[1] != MASK565_1 || header.dwbc[2] != MASK565_2)
        {
            iBitCount = 15;
        }
    }

    BOOL fColorTable = (!fPalColors && iBitCount <= 8);
    if (fColorTable)
    {
        hr = THR(AllocDIB(iBitCount, header.bmih.biWidth, header.bmih.biHeight, header.rgb, 1 << iBitCount, lTrans, lTrans == -1));
    }
    else
    {
        hr = THR(AllocDIB(iBitCount, header.bmih.biWidth, header.bmih.biHeight, NULL, 0, -1, TRUE));
    }
    
    GetDIBits(hdc, hbm, 0, header.bmih.biHeight, GetBits(), (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);

    ReleaseMemoryDC(hdc);

    return S_OK;
}

HRESULT
CImgBitsDIB::AllocMaskSection()
{
    HRESULT hr = S_OK;
    HDC hdcMem;
    
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[2];
        } u;
    } bmi;
    
    memset(&bmi, 0, sizeof(bmi));

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = _xWidth;
    bmi.bmih.biHeight        = _yHeight;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = 1;
    bmi.u.argb[1] = g_rgbWhite;
    
    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto OutOfMemory;

    _hbmMask = CreateDIBSection(hdcMem, (BITMAPINFO *)&bmi, DIB_RGB_COLORS, &_pvMaskBits, NULL, 0);
    if (!_hbmMask || !_pvMaskBits)
        goto OutOfMemory;
        
    #ifdef PERFMETER
    MtAdd(Mt(DIBSection), +1, CbLineMask() * _yHeight);
    #endif


Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

HRESULT
CImgBitsDIB::AllocDIBSection(LONG iBitCount, LONG xWidth, LONG yHeight, RGBQUAD *argbTable, LONG cTable, LONG lTrans)
{
    HRESULT hr;
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            WORD aw[256];
            DWORD adw[3];
        } u;
    } bmi;
    int i;
    BOOL fPal;
    LONG cTableAlloc;

    fPal = (iBitCount == 8 && !argbTable);
    
    if ((iBitCount > 8 && lTrans > 0) || (lTrans > (1 << iBitCount)))
    {
        lTrans = -1;
    }

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = xWidth;
    bmi.bmih.biHeight        = yHeight;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = (iBitCount == 15) ? 16 : iBitCount;
    bmi.bmih.biCompression   = (iBitCount == 16) ? BI_BITFIELDS : BI_RGB;
    bmi.bmih.biSizeImage     = 0;
    bmi.bmih.biXPelsPerMeter = 0;
    bmi.bmih.biYPelsPerMeter = 0;
    bmi.bmih.biClrUsed       = 0;
    bmi.bmih.biClrImportant  = 0;

    cTableAlloc = cTable;
    if (lTrans >= cTable)
        cTableAlloc = lTrans + 1;

    if (iBitCount == 1)
    {
        bmi.bmih.biClrUsed = 2;

        if (cTable > 2)
            cTable = 2;

        if (cTable > 0)
        {
            bmi.bmih.biClrImportant = cTableAlloc;
            memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));
        }
        else
        {
            bmi.u.argb[0] = g_rgbBlack;
            bmi.u.argb[1] = g_rgbWhite;
        }
    }
    else if (iBitCount == 4)
    {
        bmi.bmih.biClrUsed = 16;

        if (cTable > 16)
            cTable = 16;

        if (cTable > 0)
        {
            bmi.bmih.biClrImportant = cTableAlloc;
            memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));
        }
        else
        {
            bmi.bmih.biClrImportant = 16;
            CopyColorsFromPaletteEntries(bmi.u.argb, g_peVga, 16);
        }
    }
    else if (iBitCount == 8)
    {
        if (fPal)
        {
            bmi.bmih.biClrUsed = 256;

            for (i = 0; i < 256; ++i)
                bmi.u.aw[i] = (WORD)i;
        }
        else
        {
            if (cTable > 256)
                cTable = 256;
                
            if (cTable > 0)
            {
                bmi.bmih.biClrUsed = cTableAlloc;
                bmi.bmih.biClrImportant = bmi.bmih.biClrUsed;
                memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));

                if (lTrans >= 0)
                {
                    bmi.u.argb[lTrans] = g_rgbWhite;
                }
            }
            else
            {
                bmi.bmih.biClrUsed = 256;
                _fPalColors = TRUE;
            }
        }
    }
    else if (iBitCount == 16)
    {
        bmi.u.adw[0] = MASK565_0;
        bmi.u.adw[1] = MASK565_1;
        bmi.u.adw[2] = MASK565_2;
    }

    hr = THR(AllocDIBSectionFromInfo((BITMAPINFO *)&bmi, fPal));
    
    _iTrans = lTrans;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIBSection _iTrans = %d", this, _iTrans));

    RRETURN(hr);
}

HRESULT
CImgBitsDIB::AllocDIBSectionFromInfo(BITMAPINFO * pbmi, BOOL fPal)
{
    HDC     hdcMem = NULL;
    HRESULT hr = S_OK;

    Assert(!_pvImgBits);
    Assert(!_hbmImg);

    _xWidth = pbmi->bmiHeader.biWidth;
    _yHeight = pbmi->bmiHeader.biHeight;
    _iBitCount = pbmi->bmiHeader.biBitCount;
    _yHeightValid = _yHeight;
    _iTrans = -1;
    _cColors = pbmi->bmiHeader.biClrUsed;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIBSectionFromInfo _iTrans = %d", this, _iTrans));

    if (_iBitCount == 16 &&
        (pbmi->bmiHeader.biCompression != BI_BITFIELDS ||
            ((DWORD*)(pbmi->bmiColors))[0] != MASK565_0 ||
            ((DWORD*)(pbmi->bmiColors))[1] != MASK565_1 ||
            ((DWORD*)(pbmi->bmiColors))[2] != MASK565_2))
    {
        _iBitCount = 15;
    }
    
    if (!(_iBitCount == 1 || _iBitCount == 4 || _iBitCount == 8 ||
          _iBitCount == 15 || _iBitCount == 16 || _iBitCount == 24 || _iBitCount == 32) ||
        !(_xWidth > 0 && _yHeight > 0))
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto OutOfMemory;

    _hbmImg = CreateDIBSection(hdcMem, pbmi, fPal ? DIB_PAL_COLORS : DIB_RGB_COLORS, &_pvImgBits, NULL, 0);

    if (!_hbmImg || !_pvImgBits)
        goto OutOfMemory;

    #ifdef PERFMETER
    MtAdd(Mt(DIBSection), +1, CbLine() * _yHeight);
    #endif

    // Fill the bits with garbage so that the client doesn't assume that
    // the DIB gets created cleared (on WinNT it does, on Win95 it doesn't).

    #if DBG==1 && !defined(WIN16)
    int c;
    for (c = CbLine() * _yHeight; --c >= 0; ) ((BYTE *)_pvImgBits)[c] = (BYTE)c;
    #endif

Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

HRESULT
CImgBitsDIB::AllocDIB(LONG iBitCount, LONG xWidth, LONG yHeight, RGBQUAD *argbTable, LONG cTable, LONG lTrans, BOOL fOpaque)
{
    Assert(!_pvImgBits);
    Assert(!_pvMaskBits);
    Assert(iBitCount == 1 || iBitCount == 4 || iBitCount == 8 || iBitCount == 15 || iBitCount == 16 || iBitCount == 24 || iBitCount == 32);
    Assert(!!argbTable == !!cTable);
    Assert(!argbTable || iBitCount <= 8);
    Assert(xWidth >= 0 && yHeight >= 0);

#if DBG == 1
    if (!IsTagEnabled(tagForceRawDIB))
#endif
    if (g_dwPlatformID == VER_PLATFORM_WIN32_NT
#ifdef UNIX
        || g_dwPlatformID == VER_PLATFORM_WIN32_UNIX
#endif
        )
    {
        LONG cbImgSize = xWidth * yHeight * iBitCount / 8;

        // On NT, we'd rather use HBITMAPs for big images and transparent images
        // (raw DIBs are for small opaque images)


#ifndef UNIX // This is a hack for Unix, before we fix BitBlt api        
        if (cbImgSize > 10240 || !fOpaque)
#endif
            RRETURN(AllocDIBSection(iBitCount, xWidth, yHeight, argbTable, cTable, lTrans));
    }
    
    _xWidth = xWidth;
    _yHeight = yHeight;
    _iBitCount = iBitCount;
    _yHeightValid = _yHeight;

    if ((iBitCount > 8 && lTrans > 0) || (lTrans > (1 << iBitCount)))
    {
        lTrans = -1;
    }

    _iTrans = lTrans;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIB _iTrans = %d", this, _iTrans));

    if (iBitCount == 15)
        iBitCount = 16;

    _pvImgBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLine() * yHeight);
    if (!_pvImgBits)
        goto OutOfMemory;
    
    // need a header only with color table; otherwise, one is cobbled up while blitting
    if (argbTable)
    {
        // size of the color table or masks: depends on bit count

        LONG cTableCopy;
        LONG cTableAlloc;

        cTableCopy = cTable;
        
        if (cTableCopy > (1 << iBitCount))
            cTableCopy = (1 << iBitCount);

        cTableAlloc = (lTrans >= cTableCopy) ? lTrans + 1 : cTableCopy;

        _cColors = cTableAlloc;

        // Dang it.  Some popular display drivers ignore the biClrUsed field and assume 4bpp
        // bitmaps have 16 color entries and 8bpp have 256 color entries.  If we don't give them
        // what they expect it can lead to random faults / hangs when accessing beyond our 
        // shortened color table touches non-present memory.
        //
        // lTrans could by 16 or 256, requiring 17 or 257 entries so watch out for that...

        if (iBitCount == 4)
            cTableAlloc = (lTrans >= 16) ? lTrans + 1 : 16;
        else if (iBitCount == 8)
            cTableAlloc = (lTrans >= 256) ? lTrans + 1 : 256;

        _pbmih = (BITMAPINFOHEADER *)MemAllocClear(Mt(CImgBitsDIB_pbmih), sizeof(BITMAPINFOHEADER) + cTableAlloc * sizeof(RGBQUAD));
        if (!_pbmih)
            goto OutOfMemory;
            
        _pbmih->biSize = sizeof(BITMAPINFOHEADER);
        _pbmih->biWidth = xWidth;
        _pbmih->biHeight = yHeight;
        _pbmih->biPlanes = 1;
        _pbmih->biBitCount = iBitCount;
        _pbmih->biClrUsed = cTableCopy;
        _pbmih->biClrImportant = cTableCopy;

        memcpy(_pbmih + 1, argbTable, cTableCopy * sizeof(RGBQUAD));

        if (lTrans >= 0)
            ((RGBQUAD *)(_pbmih + 1))[lTrans] = g_rgbWhite;
    }
    else
    {
        if (iBitCount <= 8)
            _fPalColors = TRUE;

        _cColors = 1 << iBitCount;
    }
    
    return S_OK;

OutOfMemory:
    MemFree(_pvImgBits);
    _pvImgBits = NULL;

    MemFree(_pbmih);
    _pbmih = NULL;
    
    return E_OUTOFMEMORY;
}

HRESULT
CImgBitsDIB::AllocMask()
{
    Assert(_pvImgBits);
    Assert(!_pvMaskBits);

    // if a DIBSection is being used, use the same for the mask
    if (_hbmImg)
        return AllocMaskSection();
    
    _pvMaskBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLineMask() * _yHeight);
    if (!_pvMaskBits)
        goto OutOfMemory;

    return S_OK;

OutOfMemory:
    return E_OUTOFMEMORY;
}

HRESULT
CImgBitsDIB::AllocMaskOnly(LONG xWidth, LONG yHeight)
{
    Assert(!_pvImgBits);
    Assert(!_pvMaskBits);
    
    _xWidth = xWidth;
    _yHeight = yHeight;
    _yHeightValid = yHeight;
    
    _pvMaskBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLineMask() * yHeight);
    if (!_pvMaskBits)
        goto OutOfMemory;

    return S_OK;

OutOfMemory:
    return E_OUTOFMEMORY;
}

void
CImgBitsDIB::GetColors(long iFirst, long cColors, RGBQUAD *prgb)
{
    if (_hbmImg)
    {
        HDC hdcMem;
        HBITMAP hbmSav;
        hdcMem = GetMemoryDC();
        hbmSav = (HBITMAP)SelectObject(hdcMem, _hbmImg);
        GetDIBColorTable(hdcMem, iFirst, cColors, prgb);
        SelectObject(hdcMem, hbmSav);
        ReleaseMemoryDC(hdcMem);
    }
    else
    {
        if (iFirst < 0)
        {
            memset(prgb, 0, sizeof(RGBQUAD) * -iFirst);
            prgb -= iFirst;
            cColors += iFirst;
            iFirst = 0;
        }
        
        if (iFirst + cColors > _cColors)
        {
            memset(prgb + _cColors, 0, sizeof(RGBQUAD) * (iFirst + cColors - _cColors));
            cColors = _cColors - iFirst;
        }
        
        if (_fPalColors)
        {
            memcpy(prgb, g_rgbHalftone + iFirst, sizeof(RGBQUAD) * cColors);
        }
        else
        {
            memcpy(prgb, (RGBQUAD *)(_pbmih + 1) + iFirst, sizeof(RGBQUAD) * cColors);
        }
    }
}
    
void
CImgBitsDIB::SetTransIndex(LONG lIndex)
{
    Assert(_iBitCount <= 8);
    Assert(lIndex >= -1 && lIndex < (1 << _iBitCount));
    
    _iTrans = lIndex;

    TraceTag((tagImgTrans, "CImgBitsDIB %x SetTransIndex _iTrans = %d", this, _iTrans));

    if (lIndex >= 0)
    {
        if (_hbmImg)
        {
            HDC hdcMem;
            HBITMAP hbmSav;

            hdcMem = GetMemoryDC();
            if (!hdcMem)
                return;

            hbmSav = (HBITMAP)SelectObject(hdcMem, _hbmImg);
            SetDIBColorTable(hdcMem, lIndex, 1, &g_rgbWhite);
            SelectObject(hdcMem, hbmSav);
            ReleaseMemoryDC(hdcMem);
        }
        else if (_pbmih)
        {
            ((RGBQUAD *)(_pbmih + 1))[_iTrans] = g_rgbWhite;
        }
    }
}

void
CImgBitsDIB::SetValidLines(LONG yLines)
{
    if (yLines >= 0)
        _yHeightValid = yLines;
    else
        _yHeightValid = _yHeight;
}



// Used to StretchBlt an image whose bits are offset from the coordinates by the given amount

void
CImgBits::StretchBltOffset(const XHDC& hdc, RECT * prcDst, RECT * prcSrc, LONG xOffset, LONG yOffset, DWORD dwRop, DWORD dwFlags)
{
    RECT rcSrcOffset;

    rcSrcOffset.left    = prcSrc->left    - xOffset;
    rcSrcOffset.top     = prcSrc->top     - yOffset;
    rcSrcOffset.right   = prcSrc->right   - xOffset;
    rcSrcOffset.bottom  = prcSrc->bottom  - yOffset;

    StretchBlt(hdc, prcDst, &rcSrcOffset, dwRop, dwFlags);
}

// Draw the src rect of the specified image into the dest rect of the hdc

void
CImgBitsDIB::StretchBlt(const XHDC& hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    HDC         hdcDib = NULL;
    HBITMAP     hbmSav = NULL;
    int         xDst            = prcDst->left;
    int         yDst            = prcDst->top;
    int         xDstWid         = prcDst->right - xDst;
    int         yDstHei         = prcDst->bottom - yDst;
    int         xSrc            = prcSrc->left;
    int         ySrc            = prcSrc->top;
    int         xSrcWid         = prcSrc->right - xSrc;
    int         ySrcHei         = prcSrc->bottom - ySrc;
    int         yUseHei         = _yHeight;

#if DBG == 1
    if (IsTagEnabled(tagIgnorePalette))
    {
        dwFlags &= ~DRAWIMAGE_NHPALETTE;
    }
    
    if (!IsTagEnabled(tagForceRgbBlt))
    {
        dwFlags |= DRAWIMAGE_NHPALETTE;
    }
#endif

    // Cases in which there is nothing to draw

    if ((!_pvImgBits && !_pvMaskBits && !_fSolid) || _yHeightValid == 0)
        return;
        
    if (    xDstWid <= 0 || xSrcWid <= 0 || _xWidth <= 0
        ||  yDstHei <= 0 || ySrcHei <= 0 || _yHeight <= 0)
        return;

    if (dwRop != SRCCOPY && (_pvMaskBits || _iTrans >= 0))
        return;

    // Step 1: Limit the source and dest rectangles to the visible area only.

    if (_yHeightValid > 0 && _yHeightValid < _yHeight)
        yUseHei = _yHeightValid;

    if (xSrc < 0)
    {
        xDst += MulDivQuick(-xSrc, xDstWid, xSrcWid);
        xDstWid = prcDst->right - xDst;
        xSrcWid += xSrc;
        xSrc = 0;        
        if (xDstWid <=0 || xSrcWid <= 0)
            return;
    }
    if (ySrc < 0)
    {
        yDst += MulDivQuick(-ySrc, yDstHei, ySrcHei);
        yDstHei = prcDst->bottom - yDst;
        ySrcHei += ySrc;
        ySrc = 0;
        if (yDstHei <=0 || ySrcHei <= 0)
            return;
    }
    if (xSrc + xSrcWid > _xWidth)
    {
        xDstWid = MulDivQuick(xDstWid, _xWidth - xSrc, xSrcWid);
        xSrcWid = _xWidth - xSrc;
        if (xDstWid <= 0 || xSrcWid <= 0)
            return;
    }
    if (ySrc + ySrcHei > yUseHei)
    {
        yDstHei = MulDivQuick(yDstHei, yUseHei - ySrc, ySrcHei);
        ySrcHei = yUseHei - ySrc;
        if (yDstHei <= 0 || ySrcHei <= 0)
            return;
    }
    // For the mirrored case, we need flip then offset.
    if(_fNeedMirroring)
    {
        // We need to handle clipping correctly and give a right-to-left tiling effect.
        // Let's take the "opposite" slice of the source.
        // The maximum will be the whole image.
        xSrc = - xSrc +_xWidth - xSrcWid;
        xDst += xDstWid - 1;
        xDstWid = - xDstWid;

    }    
    // Optimization: if solid, just patblt the color
    
    if (_fSolid)
    {
        // Turn on the palette relative bit for palettized devices in order to ensure that dithering
        // doesn't happen here.  The main reason is that is looks ugly, but more importantly we aren't
        // prepared to seam multiple copies of the image so that the dithering looks smooth.

        extern COLORREF g_crPaletteRelative;
        PatBltBrush(hdc, xDst, yDst, xDstWid, yDstHei, PATCOPY, _crSolid | g_crPaletteRelative);
        return;
    }

    SetStretchBltMode(hdc, COLORONCOLOR);

    // Step 2: For tranparent images, use mask to whiten drawing area

    if (_pvMaskBits || _iTrans >= 0)
    {
        if (dwFlags & DRAWIMAGE_NOTRANS)
            goto NoTransparency;
            
        if (GetDeviceCaps(hdc, TECHNOLOGY) == DT_RASPRINTER)
        {
            // No transparency for printers that we know lie about their support for transparency.
            
            int iEscapeFunction = POSTSCRIPT_PASSTHROUGH;

            // Print Driver Hack:
            // Some print drivers are angered by transparency but don't let us know.
            // In fact, some print drivers (<cough> WinFax <cough>) can bluescreen Whistler.
            // The TLS variable below restores a printing hack from IE5 for such printers.
            // It would be better to make this hack whenever drawing on print media with a bad driver.
            // While this is possible (add an XHDC member/method), it doesn't fit cleanly into our
            // architecture... so we restore the hack here.
            // Consequence: Image will appear trasnparent in PPV, even if it will not be printed as such.
            if (    TLS(fPrintWithNoTransparency)
                ||  Escape(hdc, QUERYESCSUPPORT, sizeof(int), (LPCSTR) &iEscapeFunction, NULL))
            {
                // Skip transparency unless we are a mask-only image
                if (_pvImgBits || !_pvMaskBits)
                    goto NoTransparency;
            }
        }
    
        if (_pvMaskBits)
        {
            // 1-bit mask case

            if (_hbmMask)
            {
                // We have an HBITMAP, not just bits
                
                Assert(!hdcDib && !hbmSav);
                
                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;

#ifdef _WIN64
//$ WIN64: MaskBlt is broken in build 2019.  Remove this when its working again.
#if DBG==1
                if (!IsTagEnabled(tagUseMaskBlt)) ; else
#else
                if (g_Zero.ach[0] == 0) ; else
#endif
#endif

                // Special case: use MaskBlt for the whole thing on NT
                if (hdc.CanMaskBlt() && 
                    xSrcWid == xDstWid && ySrcHei == yDstHei && _hbmImg)
                {
                    hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmImg);

                    MaskBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                         XHDC(hdcDib, NULL), xSrc, ySrc, _hbmMask, xSrc, ySrc, 0xAACC0020);

                    goto Cleanup;
                }

                hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmMask);
                
                if (!_pvImgBits)
                {
                    // a mask-only one-bit image: just draw the "1" bits as black
                    ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                            XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, MERGEPAINT);
                }
                else
                {
                    // transparent mask: draw the "1" bits as white
                    ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                            XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
                }
            }
            else
            {
                // We have just bits, not an HBITMAP
                
                struct
                {
                    BITMAPINFOHEADER bmih;
                    union
                    {
                        RGBQUAD         rgb[2];
                        WORD            windex[2];
                    };
                } bmiMask;

                // construct mask header
                memset(&bmiMask, 0, sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 2);
                bmiMask.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmiMask.bmih.biWidth = _xWidth;
                bmiMask.bmih.biHeight = _yHeight;
                bmiMask.bmih.biPlanes = 1;
                bmiMask.bmih.biBitCount = 1;

                if (!_pvImgBits)
                {
                    // a mask-only one-bit image: just draw the "1" bits as black
                    bmiMask.rgb[0] = g_rgbWhite;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, SRCAND);
                }
                else if (_iBitCount <= 8 && _fPalColors && !(dwFlags & DRAWIMAGE_NHPALETTE))
                {
                    // this setup only occurs on an 8-bit palettized display; we can use DIB_PAL_COLORS
                    bmiMask.windex[1] = 255;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_PAL_COLORS, SRCPAINT);
                }
                else
                {
#if DBG == 1
                    if (IsTagEnabled(tagAssertRgbBlt))
                    {
                        AssertSz(_iBitCount > 8 || !_fPalColors, "Using DIB_RGB_COLORS for mask on image dithered to halftone palette");
                    }
#endif

                    bmiMask.rgb[1] = g_rgbWhite;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, SRCPAINT);
                }
            }
        }
        else
        {
            // 1- 4- or 8-bit mask case (with _iTrans)
            long cTable = 1 << _iBitCount;
            
            Assert(_iTrans >= 0);
            Assert(_iTrans < cTable);
            Assert(_iBitCount <= 8);

            if (_hbmImg)
            {
                // We have an HBITMAP, not just bits
                
                RGBQUAD argbOld[256];
                RGBQUAD argbNew[256];
                
                memset(argbNew, 0, sizeof(RGBQUAD) * cTable);
                argbNew[_iTrans] = g_rgbWhite;
                
                Assert(!hdcDib && !hbmSav);

                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;

                hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmImg);

                // HBM case: we need to change the color table, which can only be done one-at-a time
                g_csImgTransBlt.Enter();

                Verify(GetDIBColorTable(hdcDib, 0, cTable, argbOld) > 0);
                Verify(SetDIBColorTable(hdcDib, 0, cTable, argbNew) == (unsigned)cTable);

                ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                        XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, MERGEPAINT);
                        
                Verify(SetDIBColorTable(hdcDib, 0, cTable, argbOld) == (unsigned)cTable);

                g_csImgTransBlt.Leave();
            }
            else
            {
                // We have just bits, not an HBITMAP
                
                struct
                {
                    BITMAPINFOHEADER bmih;
                    RGBQUAD          rgb[256];
                } bmiMask;

                // construct mask header
                memset(&bmiMask, 0, sizeof(BITMAPINFOHEADER) + (sizeof(RGBQUAD) * cTable));
                bmiMask.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmiMask.bmih.biWidth = _xWidth;
                bmiMask.bmih.biHeight = _yHeight;
                bmiMask.bmih.biPlanes = 1;
                bmiMask.bmih.biBitCount = _iBitCount;
                bmiMask.rgb[_iTrans] = g_rgbWhite;

                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                   xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, MERGEPAINT);
            }
        }
        
        // prepare for transparent blt: area to be painted is now whitened, so AND-blt on top of it
        dwRop = SRCAND;
    }

NoTransparency:

    // Step 3: Draw the image bits
    
    if (_pvImgBits)
    {
        if (dwFlags & DRAWIMAGE_MASKONLY)
            goto Cleanup;

        if (_hbmImg)
        {
            // We have an HBITMAP, not just bits
            
            if (!hdcDib)
            {
                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;
            }

            HBITMAP hbmOld;
            
            hbmOld = (HBITMAP)SelectObject(hdcDib, _hbmImg);
            if (!hbmSav)
                hbmSav = hbmOld;

            if (g_dwPlatformID != VER_PLATFORM_WIN32_WINDOWS
                 || GetDeviceCaps(hdc, TECHNOLOGY) != DT_RASPRINTER)
            {
                // The normal case (not to a Win95 printer): call StretchBlt
                
                ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                        XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, dwRop);
            }
            else
            {
                // On a Win95 printer, we need to use StretchDIBits, so extract the bits
                
                DIBSECTION dsPrint;

                if (GetObject(_hbmImg, sizeof(DIBSECTION), &dsPrint))
                {
                    struct
                    {
                        BITMAPINFOHEADER bmih;
                        RGBQUAD argb[256];
                    } bmi;

                    bmi.bmih = dsPrint.dsBmih;
                    Verify(GetDIBColorTable(hdcDib, 0, 256, bmi.argb));

                    Assert(bmi.bmih.biHeight > 0);

                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                  xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei,
                                  dsPrint.dsBm.bmBits, (BITMAPINFO *) &bmi, DIB_RGB_COLORS, dwRop);
                }
            }
        }
        else
        {
            // We have just bits, not an HBITMAP
            
            if (!_pbmih)
            {
                // No color table header: cobble up a standard header [perhaps these should just be globally cached?]
                struct
                {
                    BITMAPINFOHEADER bmih;
                    union
                    {
                        WORD             windex[256];
                        RGBQUAD          rgb[256];
                        DWORD            bfmask[3];
                    };
                } bmi;

                DWORD dwDibMode = DIB_RGB_COLORS;

                // construct mask header
                memset(&bmi, 0, sizeof(BITMAPINFOHEADER) + (_iBitCount > 8 ? sizeof(DWORD) * 3 : sizeof(WORD) * (_iBitCount << 1)));
                bmi.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmi.bmih.biWidth = _xWidth;
                bmi.bmih.biHeight = _yHeight;
                bmi.bmih.biPlanes = 1;
                bmi.bmih.biBitCount = _iBitCount + (_iBitCount == 15);
                
                if (_iBitCount == 4)
                {
                    // Thanks to Steve Palmer: fix VGA color rendering
                    
                    bmi.bmih.biClrUsed = 16;
                    bmi.bmih.biClrImportant = 16;
                    CopyColorsFromPaletteEntries(bmi.rgb, g_peVga, 16);
                }
                else if (_iBitCount <= 8)
                {
                    if (dwFlags & DRAWIMAGE_NHPALETTE)
                    {
                        // If being drawn on an <= 8-bit surface from a filter, we can make no assumptions about
                        // the selected palette, so use RGB_COLORS
#if DBG == 1
                        if (IsTagEnabled(tagAssertRgbBlt))
                        {
                            AssertSz(0, "Using DIB_RGB_COLORS for image dithered to halftone palette");
                        }
#endif
                        LONG c;

                        c = (1 << (_iBitCount - 1));
                        
                        memcpy(bmi.rgb, g_rgbHalftone, c * sizeof(RGBQUAD));
                        memcpy(bmi.rgb + c, g_rgbHalftone + 256 - c, c * sizeof(RGBQUAD));
                    }
                    else
                    {
                        // internal draw, no color table with _iBitCount <= 8 means that the palette selected into hdc
                        // is our standard 8-bit halftone palette and we can use DIB_PAL_COLORS
                        
                        LONG c;
                        LONG d;
                        WORD *pwi;

                        dwDibMode = DIB_PAL_COLORS;
                        
                        for (c = (1 << (_iBitCount - 1)), pwi = bmi.windex + c; c; *(--pwi) = (--c));
                        for (c = (1 << (_iBitCount - 1)), pwi = bmi.windex + c * 2, d = 256; c; --c, *(--pwi) = (--d));
                    }
                }
                else if (_iBitCount == 16)
                {
                    // sixteen-bit case: fill in the bitfields mask for 565
                    
                    bmi.bmih.biCompression = BI_BITFIELDS;
                    bmi.bfmask[0] = MASK565_0;
                    bmi.bfmask[1] = MASK565_1;
                    bmi.bfmask[2] = MASK565_2;
                }

                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                              xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)&bmi, dwDibMode, dwRop);
            }
            else
            {
                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                              xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)_pbmih, DIB_RGB_COLORS, dwRop);
            }
        }
    }

Cleanup:
    if (hbmSav)
        SelectObject(hdcDib, hbmSav);
    if (hdcDib)
        ReleaseMemoryDC(hdcDib);
}

void
CImgBitsDIB::Optimize()
{
    RGBQUAD rgbSolid;
    
    if (_iTrans >= 0 && !_pvMaskBits)
    {
        if (!!ComputeTransMask(0, _yHeightValid, _iTrans, _iTrans))
            return;
    }

    if (!_pvMaskBits)
    {
        // If we still don't have a mask, it means there were no transparent bits, so dump _iTrans

        _iTrans = -1;

        TraceTag((tagImgTrans, "CImgBitsDIB %x Optimize _iTrans = %d", this, _iTrans));

        // check 8-bit images to see if they're solid

        if (_iBitCount == 8 && _pvImgBits)
        {
            DWORD dwTest;
            DWORD *pdw;
            int cdw;
            int cLines;

            dwTest = *(BYTE *)_pvImgBits;
            dwTest = dwTest | dwTest << 8;
            dwTest = dwTest | dwTest << 16;

            pdw = (DWORD *)_pvImgBits;
            
            for (cLines = _yHeight; cLines; cLines -= 1)
            {
                cdw = CbLine() / 4;

                for (;;)
                {
                    if (cdw == 1)
                    {
                        // Assumes little endian; shift in other direction for big endian

#ifndef BIG_ENDIAN                        
                        if ((dwTest ^ *pdw) << (8 * (3 - (0x3 & (_xWidth - 1)))))
#else
                        if ((dwTest ^ *pdw) >> (8 * (3 - (0x3 & (_xWidth - 1)))))
#endif
                            goto NotSolid;

                        pdw += 1;
                        break;
                    }
                    else if (*pdw != dwTest)
                        goto NotSolid;
                        
                    cdw -= 1;
                    pdw += 1;
                }
            }

            // It's solid! So extract the color
            dwTest &= 0xFF;
            
            if (_pbmih)
            {
                rgbSolid = ((RGBQUAD *)(_pbmih + 1))[dwTest];
            }
            else if (_fPalColors)
            {
                rgbSolid = g_rgbHalftone[dwTest];
            }
            else if (_hbmImg)
            {
                HDC hdcMem;
                HBITMAP hbmSav;
                
                hdcMem = GetMemoryDC();
                if (!hdcMem)
                    goto NotSolid;

                hbmSav = (HBITMAP) SelectObject(hdcMem, _hbmImg);
                GetDIBColorTable(hdcMem, dwTest, 1, &rgbSolid);
                SelectObject(hdcMem, hbmSav);
                ReleaseMemoryDC(hdcMem);
            }
            else
            {
                goto NotSolid;
            }

            // And set up the data

            _fSolid = TRUE;
            _crSolid = (rgbSolid.rgbRed) | (rgbSolid.rgbGreen << 8) | (rgbSolid.rgbBlue << 16);
            
            FreeMemory();
        }

        // BUG 90575: On Win98, StretchDIBits runs out of gas trying to stretch a
        // 1-pixel image across a large background.  Here we allow a 24-bpp
        // image to take advantage of our solid-color optimization and we use
        // PatBlt instead of StretchDIBits.  We don't have optimizations for bit
        // depths other than 8 and 24, but these are the common ones.  We can add
        // others here later if we need them.
        else if (_iBitCount == 24 && _xWidth == 1 && _yHeight == 1)
        {
            BYTE* pb = (BYTE*) _pvImgBits;
            _crSolid = (pb[0] << 16) | (pb[1] << 8) | pb[2];
            _fSolid = TRUE;
            FreeMemory();
        }
    }
    else
    {
        // If we have a mask, check to see if the entire image is transparent; if so, dump the data
        
        int cdw;
        int cLines;
        DWORD *pdw;
        DWORD dwLast;
        BYTE bLast;

        Assert(!(CbLineMask() & 0x3));

        bLast = (0xFF << (7 - (0x7 & (_xWidth - 1))));

        // Assumes little endian; shift in other direction for big endian
#ifndef BIG_ENDIAN
        dwLast = (unsigned)(0x00FFFFFF | (bLast << 24)) >> (8 * (3 - (0x3 & (((7 + _xWidth) >> 3) - 1))));
#else
        dwLast = (unsigned)(0x00FFFFFF | (bLast << 24)) << (8 * (3 - (0x3 & (((7 + _xWidth) >> 3) - 1))));
#endif
        
        pdw = (DWORD *)_pvMaskBits;

        for (cLines = _yHeight; cLines; cLines -= 1)
        {
            cdw = CbLineMask() / 4;

            for (;;)
            {
                if (cdw == 1)
                {
                    // Assumes little endian; shift in other direction for big endian
                    
                    if (*pdw & dwLast)
                        goto NotAllTransparent;

                    pdw += 1;
                    break;
                }
                else if (*pdw)
                    goto NotAllTransparent;
                    
                cdw -= 1;
                pdw += 1;
            }
        }
        
        FreeMemory();
        return;
    }

NotSolid:
NotAllTransparent:
    ;    
}

HRESULT
CImgBitsDIB::ComputeTransMask(LONG yFirst, LONG cLines, LONG lTrans, LONG lReplace)
{
    DWORD *         pdw;
    DWORD           dwBits;
    BYTE *          pb;
    int             cb;
    int             cbPad;
    int             x, y, b;
    BYTE            bTrans;

    Assert(_iBitCount == 8);

    #if DBG==1
    if (IsTagEnabled(tagNoTransMask))
        return S_OK;
    #endif

    if (lTrans < 0)
    {
        Assert(!_pvMaskBits);
        return S_OK;
    }

    // negate coordinate system for DIBs

    yFirst = _yHeight - cLines - yFirst;
    
    // Step 1: scan for transparent bits: if none, there's nothing to do (yet)

    bTrans = lTrans;

    if (!_pvMaskBits)
    {
        pb    = (BYTE *)GetBits() + CbLine() * yFirst;
        cbPad = CbLine() - _xWidth;

        for (y = cLines; y-- > 0; pb += cbPad)
            for (x = _xWidth; x-- > 0; )
                if (*pb++ == bTrans)
                {
                    HRESULT hr = AllocMask();
                    if (hr)
                        RRETURN(hr);
                    goto trans;
                }

        return S_OK;
    }

trans:

    // Step 2: allocate and fill in the one-bit mask

    pdw   = (DWORD *)((BYTE *)GetBits() + CbLine() * yFirst);

    pb = (BYTE *)GetMaskBits() + CbLineMask() * yFirst;
    cbPad = CbLineMask() - (_xWidth + 7) / 8;

    for (y = cLines; y-- > 0; pb += cbPad)
    {
        for (x = _xWidth; x > 0; x -= 8)
        {
            dwBits = *pdw++; b = 0;
#ifdef UNIX
            b |= ((BYTE)(dwBits >> 24) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 16) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 8) != bTrans); b <<=1;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#else
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#endif
            if (x <= 4)
                b = (b << 3) | 0xF;
            else
            {
                dwBits = *pdw++;
#ifdef UNIX
                b |= ((BYTE)(dwBits >> 24) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 16) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 8 ) != bTrans); b <<= 1;
                b |= ((BYTE)dwBits != bTrans);
#else
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans);
#endif
            }

            *pb++ = (BYTE)b;
        }
    }

    // Step 3: replace the transparent color

    if (lTrans != lReplace)
    {
        for (pb = (BYTE *)GetBits() + CbLine() * yFirst, cb = CbLine() * cLines; cb; pb += 1, cb -= 1)
        {
            if (*pb == bTrans)
                *pb = lReplace;
        }
    }

    return S_OK;
}

LONG CImgBitsDIB::CbTotal()
{
    LONG cb = sizeof(CImgBitsDIB);
    
    if (_pvImgBits)
        cb += CbLine() * _yHeight;
    if (_pvMaskBits)
        cb += CbLineMask() * _yHeight;

    if (cb < sizeof(CImgBitsDIB))
        return sizeof(CImgBitsDIB);

    return cb;
}



HRESULT CImgBitsDIB::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    HRESULT hr = S_OK;

    HBITMAP hbmSavDst = NULL;
    HDC hdcDibDst = NULL;
    int adjustedwidth;
    DIBSECTION ds;
    DWORD dw;
    int nColors;
    DWORD dwColors;
    DWORD dwImage;
    int cBitsPerPix;
    CImgBitsDIB *pibd = NULL;
    HBITMAP hbm;

    // 1. Get a DIBSECTION structure even if it means allocating another CImgBitsDIB

    hbm = _hbmImg;

    if (!hbm || 
        (g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS && (_iBitCount == 15 || _iBitCount == 16)) ||
        !GetObject(_hbmImg, sizeof(DIBSECTION), &ds))
    {
        RECT rc;
        int iBitCount;
        RGBQUAD *prgb;
        int nColors;

        if (g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS && (_iBitCount == 15 || _iBitCount == 16))
        {
            // On Win95, we always convert 15- and 16- bpp to 24-bpp because wallpaper can't handle 15/16.
            iBitCount = 24;
            prgb = NULL;
            nColors = 0;
        }
        else
        {
            // Otherwise, duplicate what we have.
            iBitCount = _iBitCount;
            if (_pbmih && iBitCount <= 8)
            {
                prgb = (RGBQUAD *)(_pbmih + 1);
                nColors = _pbmih->biClrUsed ? _pbmih->biClrUsed : (1 << iBitCount);
            }
            else if (iBitCount == 8)
            {
                prgb = g_rgbHalftone;
                nColors = 256;
            }
            else
            {
                prgb = NULL;
                nColors = 0;
            }
        }
        
        pibd = new CImgBitsDIB();
        if (!pibd)
            goto OutOfMemory;

        hr = THR(pibd->AllocDIBSection(iBitCount, _xWidth, _yHeight, prgb, nColors, _iTrans));
        if (hr)
            goto Cleanup;

        hbm = pibd->GetHbm();

        Assert(hbm);
        
        hdcDibDst = GetMemoryDC();
        if (!hdcDibDst)
            goto OutOfMemory;
            
        rc.left = 0;
        rc.top = 0;
        rc.right = _xWidth;
        rc.bottom = _yHeight;
        
        hbmSavDst = (HBITMAP) SelectObject(hdcDibDst, hbm);

        StretchBlt(XHDC(hdcDibDst, NULL), &rc, &rc, SRCCOPY, DRAWIMAGE_NHPALETTE | DRAWIMAGE_NOTRANS);

        if (!GetObject(hbm, sizeof(DIBSECTION), &ds))
            goto OutOfMemory;
    }


    // 2. Save it out
    
    cBitsPerPix = ds.dsBmih.biBitCount;

    Assert(cBitsPerPix == 1 || cBitsPerPix == 4 ||
        cBitsPerPix == 8 || cBitsPerPix == 16 || cBitsPerPix == 24 || cBitsPerPix == 32);

    adjustedwidth = ((ds.dsBmih.biWidth * cBitsPerPix + 31) & ~31) / 8;

#ifdef UNIX
    // TODO - this should be done in mainwin
    if ( ds.dsBmih.biClrUsed > 256 ) 
    {
        ds.dsBmih.biClrUsed = 0;
    }
#endif

    nColors = ds.dsBmih.biClrUsed;
    if ((nColors == 0) && (cBitsPerPix <= 8))
        nColors = 1 << cBitsPerPix;
    
    Assert(ds.dsBmih.biCompression != BI_BITFIELDS || nColors == 0);
    
    dwColors = nColors * sizeof(RGBQUAD) + (ds.dsBmih.biCompression == BI_BITFIELDS ? 3 * sizeof(DWORD) : 0);

    dwImage = ds.dsBmih.biHeight * adjustedwidth;

    if (fFileHeader)
    {
        BITMAPFILEHEADER bf;

        bf.bfType = 0x4D42; // "BM"
        bf.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwColors;
        bf.bfSize = bf.bfOffBits + dwImage;
        bf.bfReserved1 = 0;
        bf.bfReserved2 = 0;

        hr = pStm->Write(&bf, sizeof(bf), &dw);
        if (hr)
            goto Cleanup;
    }

    hr = pStm->Write(&(ds.dsBmih), sizeof(BITMAPINFOHEADER), &dw);
    if (hr)
        goto Cleanup;

    if (nColors > 0)
    {
        RGBQUAD argb[256];

        if (!hdcDibDst)
        {
            hdcDibDst = GetMemoryDC();
            if (!hdcDibDst)
                goto OutOfMemory;
                
            hbmSavDst = (HBITMAP) SelectObject(hdcDibDst, hbm);
        }

        GetDIBColorTable(hdcDibDst, 0, min(256, nColors), argb);

        hr = pStm->Write(argb, dwColors, &dw);
        if (hr)
            goto Cleanup;
    }
    else if (ds.dsBmih.biCompression == BI_BITFIELDS)
    {
        hr = pStm->Write(ds.dsBitfields, dwColors, &dw);
        if (hr)
            goto Cleanup;
    }

    hr = pStm->Write(ds.dsBm.bmBits, dwImage, &dw);

Cleanup:
    if (hbmSavDst)
        SelectObject(hdcDibDst, hbmSavDst);
    if (hdcDibDst)
        ReleaseMemoryDC(hdcDibDst);
    if (pibd)
        delete pibd;

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgart.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgart.cxx
//
//  Contents:   Image filter for .art files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_JGPLAY_H_
#define X_JGPLAY_H_
#include "jgplay.h"
#endif

MtDefine(CImgTaskArt, Dwn, "CImgTaskArt")
MtDefine(CArtPlayer, Dwn, "CArtPlayer")

/* ----------------------------- Defines --------------------------------*/
#define XX_DMsg(x, y)

/* Size of the buffer passed to JgpQueryStream */
#define JG_SIZE_INFO_BUFFER      1024
#define SIZE_DATA_BUFFER         512
   
/*
 * Offsets used to determine the start of the image data from
 * the pointer returned by the decompression library. The
 * pointer returned is a pointer to a BITMAPINFO structure.
 */

#define JG_COLORMAP_SIZE8  (sizeof(RGBQUAD) * 256)
#define JG_COLORMAP_SIZE4  (sizeof(RGBQUAD) * 16)
#define JG_COLORMAP_SIZE1  (sizeof(RGBQUAD) * 2)
#define JG_BMI_SIZE_1      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE1)
#define JG_BMI_SIZE_4      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE4)
#define JG_BMI_SIZE_8      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE8)
#define JG_BMI_SIZE_24     (sizeof(BITMAPINFOHEADER))

/* -----------------------------------------------------------------
 * Dynamic loading of DLL
 * ----------------------------------------------------------------- */

/* Name of decompression library */
#define JG_MODULE_NAME "JGPL400.DLL"

/* Function Names */

#define strJgpHeartBeat		"JgpHeartBeat"
#define strJgpQueryStream	"JgpQueryStream"
#define strJgpDoTest		"JgpDoTest"
#define strJgpOpen			"JgpOpen"
#define strJgpClose			"JgpClose"
#define strJgpSetEOFMark	"JgpSetEOFMark"
#define strJgpInputStream	"JgpInputStream"
#define strJgpStartPlay		"JgpStartPlay"
#define strJgpResumePlay	"JgpResumePlay"
#define strJgpPausePlay		"JgpPausePlay"
#define strJgpStopPlay		"JgpStopPlay"
#define strJgpReleaseSound	"JgpReleaseSound"
#define strJgpResumeSound	"JgpResumeSound"
#define strJgpSetPosition	"JgpSetPosition"
#define strJgpGetPosition	"JgpGetPosition"
#define strJgpGetImage		"JgpGetImage"
#define strJgpGetMask		"JgpGetMask"
#define strJgpGetReport		"JgpGetReport"

/* -----------------------------------------------------------------
 *  Function Pointers
 * ----------------------------------------------------------------- */

typedef JGERR (JGFFUNC *pfnJgpHeartBeatProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpQueryStreamProto)(
		UINT8 JGHUGE *pARTStream,		// In: ART Stream
		UINT32 nARTStreamBytes,			// In: Size of ARTStream in Bytes
		JGP_STREAM JGFAR *pInfo); 		// Out: Info structure

typedef JGERR (JGFFUNC *pfnJgpDoTestProto)(
		JGP_TEST JGFAR *pInfo);			// In: Info struct to be filled

typedef JGERR (JGFFUNC *pfnJgpOpenProto)(
		JGHANDLE JGFAR *pSHandle,		// Out: Place to receive handle   
		JGP_SETUP JGFAR *pSetup);		// In: The setup structure

typedef JGERR (JGFFUNC *pfnJgpCloseProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpSetEOFMarkProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpInputStreamProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT8  JGHUGE *pARTStream,		// In: Pointer to the ART Stream
		UINT32 nBytes);					// In: Number of bytes being input

typedef JGERR (JGFFUNC *pfnJgpStartPlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef UINTW (JGFFUNC *pfnJgpResumePlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef UINTW (JGFFUNC *pfnJgpPausePlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef JGERR (JGFFUNC *pfnJgpStopPlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef JGERR (JGFFUNC *pfnJgpReleaseSoundProto)(
		JGHANDLE SHandle);				// In: Show Handle	

typedef JGERR (JGFFUNC *pfnJgpResumeSoundProto)(
		JGHANDLE SHandle);				// In: Show Handle	

typedef JGERR (JGFFUNC *pfnJgpSetPositionProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT32 nPosition);				// In: Position

typedef JGERR (JGFFUNC *pfnJgpGetPositionProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT32 JGFAR *pPosition);		// Out: Position

typedef JGERR (JGFFUNC *pfnJgpGetImageProto)(
		JGHANDLE SHandle,				// In: Show handle            
		JGP_IMAGE_REF JGFAR *phImg);	// Out: Handle to Image memory

typedef JGERR (JGFFUNC *pfnJgpGetMaskProto)(
		JGHANDLE SHandle,				// In: Show handle
		JGP_IMAGE_REF JGFAR *phImg);	// Out: Handle to Image memory

typedef JGERR (JGFFUNC *pfnJgpGetReportProto)(
		JGHANDLE SHandle,				// In:  Show Handle
		JGP_REPORT JGFAR *pReport);		// Out: Structure to receive the report

/* Function table.
 * This function table is used to access the functions exported by
 * the decompression library. The values are set by calls to
 * GetProcAddress.
 */
typedef struct tagJGFuncs {
	pfnJgpHeartBeatProto		pfnJgpHeartBeat;
	pfnJgpQueryStreamProto		pfnJgpQueryStream;
	pfnJgpDoTestProto			pfnJgpDoTest;
	pfnJgpOpenProto				pfnJgpOpen;
	pfnJgpCloseProto			pfnJgpClose;
	pfnJgpSetEOFMarkProto		pfnJgpSetEOFMark;
	pfnJgpInputStreamProto		pfnJgpInputStream;
	pfnJgpStartPlayProto		pfnJgpStartPlay;
	pfnJgpResumePlayProto		pfnJgpResumePlay;
	pfnJgpPausePlayProto		pfnJgpPausePlay;
	pfnJgpStopPlayProto			pfnJgpStopPlay;
	pfnJgpReleaseSoundProto		pfnJgpReleaseSound;
	pfnJgpResumeSoundProto		pfnJgpResumeSound;
	pfnJgpSetPositionProto		pfnJgpSetPosition;
	pfnJgpGetPositionProto		pfnJgpGetPosition;
	pfnJgpGetImageProto			pfnJgpGetImage;
	pfnJgpGetMaskProto			pfnJgpGetMask;
	pfnJgpGetReportProto		pfnJgpGetReport;
} JGFuncTable;

extern BYTE g_bJGJitState;

/* -----------------------------------------------------------------
 * Forward declarations
 * ----------------------------------------------------------------- */

static BOOL JGGetFunctionTable();

/* -----------------------------------------------------------------
 * Static declarations
 * ----------------------------------------------------------------- */

static JGFuncTable      ftJGDLL;
static HINSTANCE        hJGDLLModule        = NULL;
static JGHANDLE	        hLowColorContext    = NULL;
static JGHANDLE	        hMedColorContext    = NULL;
static JGHANDLE	        hHiColorContext     = NULL;
static JGHANDLE	        g_hActiveShowHandle = NULL;

static CGlobalCriticalSection g_csArt;

/* ------------------------------------------------------------
 * JGGetFunctionTable
 *
 * Loads the JG DLL if not already loaded and returns a
 * pointer to a function table with the accessible
 * functions.
 * ------------------------------------------------------------ */

static BOOL JGGetFunctionTable()
{
    BOOL fRetVal;
    
    g_csArt.Enter();

    fRetVal = FALSE;

    if (hJGDLLModule)
        fRetVal = TRUE;
    else if (g_bJGJitState == JIT_OK)
    {
        hJGDLLModule = LoadLibraryEx(_T(JG_MODULE_NAME), NULL, 0);
        if (hJGDLLModule)
        {
            ftJGDLL.pfnJgpHeartBeat =
                (pfnJgpHeartBeatProto) GetProcAddress(hJGDLLModule, strJgpHeartBeat);
            ftJGDLL.pfnJgpQueryStream =
                (pfnJgpQueryStreamProto) GetProcAddress(hJGDLLModule, strJgpQueryStream);
            ftJGDLL.pfnJgpDoTest =
                (pfnJgpDoTestProto) GetProcAddress(hJGDLLModule, strJgpDoTest);
            ftJGDLL.pfnJgpOpen =
                (pfnJgpOpenProto) GetProcAddress(hJGDLLModule, strJgpOpen);
            ftJGDLL.pfnJgpClose =
                (pfnJgpCloseProto) GetProcAddress(hJGDLLModule, strJgpClose);
            ftJGDLL.pfnJgpSetEOFMark =
                (pfnJgpSetEOFMarkProto) GetProcAddress(hJGDLLModule, strJgpSetEOFMark);
            ftJGDLL.pfnJgpInputStream =
                (pfnJgpInputStreamProto) GetProcAddress(hJGDLLModule, strJgpInputStream);
            ftJGDLL.pfnJgpStartPlay =
                (pfnJgpStartPlayProto) GetProcAddress(hJGDLLModule, strJgpStartPlay);
            ftJGDLL.pfnJgpResumePlay =
                (pfnJgpResumePlayProto) GetProcAddress(hJGDLLModule, strJgpResumePlay);
            ftJGDLL.pfnJgpPausePlay =
                (pfnJgpPausePlayProto) GetProcAddress(hJGDLLModule, strJgpPausePlay);
            ftJGDLL.pfnJgpStopPlay =
                (pfnJgpStopPlayProto) GetProcAddress(hJGDLLModule, strJgpStopPlay);
            ftJGDLL.pfnJgpReleaseSound =
                (pfnJgpReleaseSoundProto) GetProcAddress(hJGDLLModule, strJgpReleaseSound);
            ftJGDLL.pfnJgpResumeSound =
                (pfnJgpResumeSoundProto) GetProcAddress(hJGDLLModule, strJgpResumeSound);
            ftJGDLL.pfnJgpSetPosition =
                (pfnJgpSetPositionProto) GetProcAddress(hJGDLLModule, strJgpSetPosition);          
			ftJGDLL.pfnJgpGetPosition =
                (pfnJgpGetPositionProto) GetProcAddress(hJGDLLModule, strJgpGetPosition);
            ftJGDLL.pfnJgpGetImage =
                (pfnJgpGetImageProto) GetProcAddress(hJGDLLModule, strJgpGetImage);
			ftJGDLL.pfnJgpGetMask =
                (pfnJgpGetMaskProto) GetProcAddress(hJGDLLModule, strJgpGetMask);
			ftJGDLL.pfnJgpGetReport =
                (pfnJgpGetReportProto) GetProcAddress(hJGDLLModule, strJgpGetReport);

            if (ftJGDLL.pfnJgpHeartBeat &&
				ftJGDLL.pfnJgpQueryStream &&
				ftJGDLL.pfnJgpDoTest &&
                ftJGDLL.pfnJgpOpen &&
                ftJGDLL.pfnJgpClose &&
                ftJGDLL.pfnJgpSetEOFMark &&
                ftJGDLL.pfnJgpInputStream &&
                ftJGDLL.pfnJgpStartPlay &&
                ftJGDLL.pfnJgpResumePlay &&				
				ftJGDLL.pfnJgpPausePlay &&
                ftJGDLL.pfnJgpStopPlay &&
                ftJGDLL.pfnJgpReleaseSound &&
                ftJGDLL.pfnJgpResumeSound &&
                ftJGDLL.pfnJgpSetPosition &&
                ftJGDLL.pfnJgpGetPosition &&
                ftJGDLL.pfnJgpGetImage &&
                ftJGDLL.pfnJgpGetMask &&
                ftJGDLL.pfnJgpGetReport)
            {
                fRetVal = TRUE;
            }
            else
            {
                memset((BYTE *)&ftJGDLL, 0, sizeof(ftJGDLL));
                FreeLibrary(hJGDLLModule);
                hJGDLLModule = NULL;
            }

            g_bJGJitState = JIT_DONT_ASK;
        }
        else
        {
            g_bJGJitState = JIT_NEED_JIT;
        }
    }

    g_csArt.Leave();

    return fRetVal;
}

/* -----------------------------------------------------------
 * BuildContext
 *
 * Build the decompression context for specified color depth.
 * ----------------------------------------------------------- */

static void BuildContext(int ColorDepth, JGHANDLE JGFAR *hShowHandle)
{
    JGP_SETUP			jgInit;
	static JGP_TEST		jgTest;
#ifdef BIG_ENDIAN
    JG_RGBX				palBG = {0, 255, 255, 255};
#else
    JG_RGBX				palBG = {255, 255, 255, 0};
#endif
    JGHANDLE *          pTheContext = NULL;
    PALETTEENTRY JGPTR	pPal;
	HGLOBAL				hPal = NULL;
	int					cPalColors, i;
	static BOOL			fDoneTest = FALSE;

    *hShowHandle = NULL;

	if (!fDoneTest)
	{
		memset(&jgTest, 0, sizeof(JGP_TEST));
		jgTest.Size = sizeof(jgTest);

		ftJGDLL.pfnJgpDoTest(&jgTest);
		fDoneTest = TRUE;
	}

    switch(ColorDepth)
    {
        case 4:
            pTheContext = &hLowColorContext;
            break;
        case 8:
            pTheContext = &hMedColorContext;
            break;
        default:
            pTheContext = &hHiColorContext;
            break;
    }

    memset(&jgInit, 0, sizeof(JGP_SETUP));
    jgInit.Size = sizeof(jgInit);

    /* Set up the JG initialization structure for this environment */
	jgInit.ColorDepth		= ColorDepth;
	jgInit.InhibitImage		= FALSE;
	jgInit.InhibitAudio		= jgTest.CanDoAudio ? FALSE : TRUE; 
	jgInit.InhibitMIDI		= jgTest.CanDoMIDI ? FALSE : TRUE;
	jgInit.InhibitDither	= FALSE;
	jgInit.InhibitSplash	= FALSE;
	jgInit.AudioMode		= JGP_AUDIO_DEFAULT;
	jgInit.CreateMask		= TRUE;
	jgInit.ScaleImage		= JGP_SCALE_NONE;
	jgInit.GammaAdjust		= JGP_GAMMA_NONE;
	jgInit.PaletteMode		= JGP_PALETTE_INPUT;
	jgInit.IndexOverride	= JGP_OVERRIDE_NONE;		

	/* If there is an existing handle, reuse it */
	if (!(*pTheContext))
		jgInit.OldHandle = NULL;
	else
		jgInit.OldHandle = *pTheContext;

	/* Set the background color to white for use with the mask */
    jgInit.BackgroundColor = palBG;

    switch(ColorDepth)
    {
        case 4:
            cPalColors = 16;
            
			hPal = GlobalAlloc(GMEM_MOVEABLE | GMEM_SHARE, cPalColors * 4);
		    if (!hPal)
            {
                return;
            }

			pPal = (PALETTEENTRY JGPTR) GlobalLock(hPal);	
		    if (!pPal)
		    {
                GlobalFree(hPal);
				return;
			}
				
			for (i = 0; i < cPalColors; i++)
		    {
				pPal[i] = g_peVga[i];
		    }			                

            jgInit.DefaultPalette = hPal;
            jgInit.PaletteSize = cPalColors;
            break;
        case 8:
 			cPalColors = g_lpHalftone.wCnt;
			
			hPal = GlobalAlloc(GMEM_MOVEABLE | GMEM_SHARE, cPalColors * 4);
		    if (!hPal)
            {
                return;
            }

            pPal = (PALETTEENTRY JGPTR) GlobalLock(hPal);	
		    if (!pPal)
		    {
				GlobalFree(hPal);
                return;
			}
				
			for (i = 0; i < cPalColors; i++)
		    {
				pPal[i] = g_lpHalftone.ape[i];
		    }			                

			jgInit.DefaultPalette = hPal;
            jgInit.PaletteSize = cPalColors;        
            break;
        default:
            jgInit.ColorDepth = 24;
            jgInit.DefaultPalette = NULL;
            jgInit.PaletteSize = 0;
            break;
    }
		
    if (ftJGDLL.pfnJgpOpen(hShowHandle, &jgInit) != JGP_SUCCESS)
    {
        *hShowHandle = NULL;
    }

	if (hPal)
    {
		GlobalUnlock(hPal);
		GlobalFree(hPal);
    }

    return;
}

/* ------------------------------------------------------------
 * _GetImageandMask
 *
 * Get new pixels and copy them to the displayed bitmap. If the  
 * bitmap does not yet exist, we'll create it.
 * ------------------------------------------------------------ */

void _GetImageandMask(JGHANDLE hJGInstance, CImgBitsDIB **ppibd,
                     LONG _yHei, LONG _colorMode)      
{
    BITMAPINFO *    pbmi;
    HGLOBAL         hDib;
    HGLOBAL         hMask;
    BYTE *          pbSrcDib;
    BYTE *          pbDstDib;
    BYTE *          pbSrcMask;
    BYTE *          pbDstMask;

    // Get the handle to the image dib
    if ((ftJGDLL.pfnJgpGetImage(hJGInstance, &hDib) == 0) && (hDib != NULL))
    {
        pbmi = (BITMAPINFO *)GlobalLock(hDib);
        if (!pbmi)
        {
            Assert("hDib is non-null, yet GlobalLock failed " && pbmi);
            return;
        }

        switch (_colorMode)
        {
            case 4:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_4;
                break;
            case 8:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_8;
                break;
            default:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_24;
                break;
        }

        // If we already have an image bitmap, just update it with the new pixels
        if (*ppibd)
        {
            pbDstDib = (BYTE *)(*ppibd)->GetBits();
            if (pbSrcDib && pbDstDib)
            {
                Assert(_yHei <= (*ppibd)->Height());
                memcpy(pbDstDib, pbSrcDib, (*ppibd)->CbLine() * min(_yHei, (*ppibd)->Height()));
            }
        }
        else // Create new image bitmap and copy pixels into it
        {
            (*ppibd) = new CImgBitsDIB();
            if (*ppibd &&
                !!(*ppibd)->AllocDIB((_colorMode <= 8) ? _colorMode : 24, pbmi->bmiHeader.biWidth, pbmi->bmiHeader.biHeight, NULL, 0, -1, FALSE))
            {
                delete (*ppibd); // out of memory
                *ppibd = NULL;
            }
            
            if (*ppibd)
            {
                pbDstDib = (BYTE *)(*ppibd)->GetBits();
                if (pbSrcDib && pbDstDib)
                {
                    Assert(_yHei <= (*ppibd)->Height());
                    memcpy(pbDstDib, pbSrcDib, (*ppibd)->CbLine() * min(_yHei, (*ppibd)->Height()));
                }
            }
        }
        
        // Get the handle to the mask dib (if there is a mask)
        if ((ftJGDLL.pfnJgpGetMask(hJGInstance, &hMask) == 0) && (hMask != NULL))
        {
            pbmi = (BITMAPINFO *)GlobalLock(hMask);
            pbSrcMask = (BYTE *)pbmi + JG_BMI_SIZE_1;
            if (!pbmi)
            {
                Assert("hMask is non-null, yet GlobalLock failed " && pbmi);
                return;
            }

            // Ensure mask and update it with the new pixels
            if (*ppibd && pbSrcMask)
            {
                if (!(*ppibd)->GetMaskBits())
                {
                    (*ppibd)->AllocMask();
                }

                pbDstMask = (BYTE *)(*ppibd)->GetMaskBits();
                
                if (pbDstMask)
                {
                    Assert(_yHei <= (*ppibd)->Height());
                    memcpy(pbDstMask, pbSrcMask, (*ppibd)->CbLineMask() * min(_yHei, (*ppibd)->Height()));
                }
            }
        }
    }
}

/* ------------------------------------------------------------
 * GetArtReport
 *
 * Come here on timer message.  Trigger a heartbeat and get a 
 * report to see if we need to update the image.
 * ------------------------------------------------------------ */

BOOL CArtPlayer::GetArtReport(CImgBitsDIB **ppibd, LONG _yHei, LONG _colorMode)
{
    JGP_REPORT  jgUpdateInfo;
    JGHANDLE    hShowHandle;
    JGERR       iResult;

    if (!_dwShowHandle)
        return FALSE;

    if (!_fInPlayer)
    {
        _fInPlayer = TRUE;

        memset(&jgUpdateInfo, 0, sizeof(JGP_REPORT));
        jgUpdateInfo.Size = sizeof(jgUpdateInfo);

        hShowHandle = (JGHANDLE) _dwShowHandle;

        iResult = ftJGDLL.pfnJgpHeartBeat(hShowHandle);
        iResult = ftJGDLL.pfnJgpGetReport(hShowHandle, &jgUpdateInfo);

        // Update our report flags
   	    _fPlaying = jgUpdateInfo.IsPlaying;
	    _fPaused = jgUpdateInfo.IsPaused;
        _fIsDone = jgUpdateInfo.IsDone;
        _ulCurrentTime = jgUpdateInfo.CurrentTime;
        _ulAvailPlayTime = jgUpdateInfo.AvailPlayTime;

        _fUpdateImage = jgUpdateInfo.UpdateImage;
        _rcUpdateRect.top = jgUpdateInfo.UpdateRect.top;
        _rcUpdateRect.left = jgUpdateInfo.UpdateRect.left;
        _rcUpdateRect.bottom = jgUpdateInfo.UpdateRect.bottom;
        _rcUpdateRect.right = jgUpdateInfo.UpdateRect.right;

        // If there are new pixels available, get them into the displayed dib
        if (jgUpdateInfo.UpdateImage)
        {
            _GetImageandMask(hShowHandle, ppibd, _yHei, _colorMode);
        }

        _fInPlayer = FALSE;

        return (_fUpdateImage);
    }    

    return (FALSE);
}

/* ------------------------------------------------------------
 * QueryPlayState
 *
 * Check the play state to enable/disable menu options. 
 * ------------------------------------------------------------ */

BOOL CArtPlayer::QueryPlayState(int iCommand)
{
    BOOL bReturn = FALSE;

    switch (iCommand)
    {
        case IDM_IMGARTPLAY:
            if ((!_fPlaying) || _fPaused)
                bReturn = TRUE;  
            break;
        case IDM_IMGARTSTOP:
            if (_fPlaying && (!_fPaused))
                bReturn = TRUE;  
            break;
        case IDM_IMGARTREWIND:
            if (_ulCurrentTime > 0L)
                bReturn = TRUE;  
            break;
    }
    return (bReturn);
}

/* ------------------------------------------------------------
 * DoPlayCommand
 *
 * Execute a play command. 
 * ------------------------------------------------------------ */

void CArtPlayer::DoPlayCommand(int iCommand)
{
    JGERR iResult;

    if (_fInPlayer)
        return;

    switch (iCommand)
    {
        case IDM_IMGARTPLAY:
            if (_dwShowHandle)
            {
                _fInPlayer = TRUE;
                
                // We only need to worry about ART with sound
                if (_fHasSound)
                {
                    // Release sound hardware from the active handle
                    if ((g_hActiveShowHandle != NULL) &&
                        (g_hActiveShowHandle != (JGHANDLE) _dwShowHandle))
                    {
                        if (_fDynamicImages)
                        {
                            iResult = ftJGDLL.pfnJgpReleaseSound(g_hActiveShowHandle);
                            if (iResult == JGP_SUCCESS)
                                g_hActiveShowHandle = NULL;

                            // Assign sound hardware to the new active handle
                            iResult = ftJGDLL.pfnJgpResumeSound((JGHANDLE) _dwShowHandle);
                            if (iResult == JGP_SUCCESS)
                                g_hActiveShowHandle = (JGHANDLE) _dwShowHandle;
                        }
                        else
                        {   // Stop the previous if it is sound and picture
                            iResult = ftJGDLL.pfnJgpStopPlay(g_hActiveShowHandle);
                            if (iResult == JGP_SUCCESS)
                            {
                                g_hActiveShowHandle = NULL;
                            }
                        }
                    }
                }	
                // Start the playback    
                iResult = ftJGDLL.pfnJgpStartPlay((JGHANDLE) _dwShowHandle);
                if (iResult == JGP_SUCCESS)
                {
                    _fPlaying = TRUE;
                    _fPaused = FALSE;

                    if ((g_hActiveShowHandle == NULL) && _fHasSound)
                        g_hActiveShowHandle = (JGHANDLE) _dwShowHandle;
                }

                _fInPlayer = FALSE;
            }
            break;
        case IDM_IMGARTSTOP:
            if (_dwShowHandle)
            {
                iResult = ftJGDLL.pfnJgpStopPlay((JGHANDLE) _dwShowHandle);
                if (iResult == JGP_SUCCESS)
                {
                    _fPlaying = FALSE;
                    _fPaused = FALSE;
                }
            }
            break;
        case IDM_IMGARTREWIND:
            if (_dwShowHandle)
            {
                ftJGDLL.pfnJgpSetPosition((JGHANDLE) _dwShowHandle, 0L);
                _ulCurrentTime = 0L;
            }
            break;
    }
}

/* ------------------------------------------------------------
 * ~CArtPlayer
 *
 * Stop the Show, close the handle and clean-up our data 
 * structure.
 * ------------------------------------------------------------ */

CArtPlayer::~CArtPlayer()
{
    JGERR           iResult;
    JGHANDLE        hShowHandle;
    JGP_IMAGE_REF   hDib;
    JGP_IMAGE_REF   hMask;

    if (_dwShowHandle)
    {
        hShowHandle = (JGHANDLE) _dwShowHandle;

        // Stop playback
        iResult = ftJGDLL.pfnJgpStopPlay(hShowHandle);

        // Remove the active handle tag
        if (g_hActiveShowHandle == hShowHandle)
            g_hActiveShowHandle = NULL;

        // Free up the dib memory allocated by the player
        if (ftJGDLL.pfnJgpGetImage(hShowHandle, &hDib) == 0)
        {
            if ((ftJGDLL.pfnJgpGetMask(hShowHandle, &hMask) == 0) && (hMask != NULL))
                GlobalFree(hMask);
            
            GlobalFree(hDib);
        }

        // Close the show handle
        iResult = ftJGDLL.pfnJgpClose(hShowHandle);
        _dwShowHandle = 0;
    }
}

/* -----------------------------------------------------------
 * CImgTaskArt
 * ----------------------------------------------------------- */

class CImgTaskArt : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskArt))

    ~CImgTaskArt();

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // CImgTaskArt methods

    BOOL            FindImageHeightWidth(BYTE *buf, BYTE *sizeInfoBuffer, long cBufBytes,
                                        long *lBufferSize, int  *height, int  *width);
    BOOL            DecompressArtImage();
    virtual void    BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

    // Data members

    UINT            _ulCoversImg;
    HANDLE          _hDib;
    HANDLE          _hMask;
};

CImgTaskArt::~CImgTaskArt()
{
    if (!_pArtPlayer)
    {
        if (_hDib)
        {
            GlobalUnlock(_hDib);
            GlobalFree(_hDib);
        }

        if (_hMask)
        {
            GlobalUnlock(_hMask);
            GlobalFree(_hMask);
        }
    }
}

/* ------------------------------------------------------------
 * FindImageHeightWidth
 *
 * From the JG Stream find the Height and Width of the original
 * Image. Return TRUE if Height And Width found.
 * ------------------------------------------------------------ */

BOOL
CImgTaskArt::FindImageHeightWidth(BYTE *buf,
								  BYTE *sizeInfoBuffer,
								  long cBufBytes,
								  long *lBufferSize,
								  int  *height,
								  int  *width)
{
    JGP_STREAM      jgStreamInfo;
    CArtPlayer *    pArtPlayerNew;
    long            lBytesToCopy;

    memset(&jgStreamInfo, 0, sizeof(JGP_STREAM));
    jgStreamInfo.Size = sizeof(jgStreamInfo);

    lBytesToCopy = cBufBytes;
    if (((*lBufferSize) + lBytesToCopy) > JG_SIZE_INFO_BUFFER)
        lBytesToCopy = JG_SIZE_INFO_BUFFER - (*lBufferSize);

    if (lBytesToCopy > 0L)
    {
        memcpy(&sizeInfoBuffer[(*lBufferSize)], buf, cBufBytes);
        *lBufferSize += lBytesToCopy;
    }

    if (ftJGDLL.pfnJgpQueryStream(sizeInfoBuffer, *(lBufferSize), &jgStreamInfo) == JGP_SUCCESS)
    {
	    ////////////////////////////////////////////////////
		// Get the image height and width
		*height = jgStreamInfo.Dimensions.bottom;
        *width  = jgStreamInfo.Dimensions.right;

	    ////////////////////////////////////////////////////
		// See if this stream requires a heartbeat  
	    if (jgStreamInfo.Attributes & JGP_ISTEMPORAL)
		{
            // We need to store Show info, so clear some space
            pArtPlayerNew = new CArtPlayer;
            if (pArtPlayerNew == NULL)
            {
                XX_DMsg(DBG_IMAGE, ("not enough memory for ART Show data\n"));
            }
            else
            {
                _pArtPlayer = pArtPlayerNew;
                _pArtPlayer->_fInPlayer = FALSE; 
                _pArtPlayer->_fTemporalART = TRUE;
    	        _pArtPlayer->_fDynamicImages = (jgStreamInfo.Attributes & JGP_HASDYNAMICIMAGES);
                _pArtPlayer->_uiUpdateRate = jgStreamInfo.UpdateRate;

                ////////////////////////////////////////////////////
		        // See if this stream has sound  
	            if ((jgStreamInfo.Attributes & JGP_HASAUDIO) ||
	    	        (jgStreamInfo.Attributes & JGP_HASMIDI))
		        {
	    	        _pArtPlayer->_fHasSound = TRUE;
	            }
	        }
        }

        XX_DMsg(DBG_IMAGE, ("ART: Image size found h=%d w=%d\n", *height, *width));
        return TRUE;
    }
    
    return FALSE;
}

void
CImgTaskArt::Decode(BOOL *pfNonProgressive)
{
    DecompressArtImage();
}

/* --------------------------------------------------------------------------------------
 * DecompressArtImage
 *
 * This function does the actual decompression of the image
 * stream.
 *
 * The function returns TRUE if an image was succesfully
 * decoded otherwise FALSE.
 *
 * unsigned char **image,          out - Image data
 * unsigned char **mask,           out - pointer to BITMAPINFO structure & DIB for mask
 * HGLOBAL       *hDIB,            out - Handle to memory allocated for image
 * HGLOBAL       *hMask,           out - Handle to memory allocated for mask
 * int           ColorDepth        in  - Color depth to decompress image at.
 * ------------------------------------------------------------------------------------ */

BOOL CImgTaskArt::DecompressArtImage()
{
    CArtPlayer *        pStaticArtPlayer = NULL;
    CArtPlayer *        pArtPlayer = NULL;
    JGP_REPORT			jgUpdateInfo;
    JGHANDLE			hJGInstance;
    JGERR               iResult;
    unsigned char		buf[SIZE_DATA_BUFFER];
    unsigned long		cBufBytes;
    int					height, width;
    BOOL				fNewPixelsReady = FALSE;
    BOOL				fGotSizeInfo = FALSE;
    BYTE				sizeInfoBuffer[JG_SIZE_INFO_BUFFER];
    long				lBufferSize = 0L;
    int					yBottom;

    _ulCoversImg = IMGBITS_PARTIAL;

    /* STEP 1 - INIT */
    /* ------------- */

    /* Build a context for the JG Library to use for decompression */
    hJGInstance = NULL;
    BuildContext(_colorMode, &hJGInstance);
    if (!hJGInstance)
        return FALSE;

    /* Image Size Info */
    lBufferSize = 0L;
    memset(sizeInfoBuffer, 0, JG_SIZE_INFO_BUFFER);

    /* Used for progressive draw */
    memset(&jgUpdateInfo, 0, sizeof(JGP_REPORT));
    jgUpdateInfo.Size = sizeof(jgUpdateInfo);


    /* STEP 2 - DECOMPRESS */
    /* ------------------- */

    for(;;)
    {
        if (pArtPlayer)
        {
            if (pArtPlayer->_fInPlayer)
                continue;
            else
            {
                pArtPlayer->_fInPlayer = TRUE;
            }

            Read(buf, SIZE_DATA_BUFFER, &cBufBytes);
            if (cBufBytes == 0)
            {
                pArtPlayer->_fInPlayer = FALSE;
                break;
            }

            if (ftJGDLL.pfnJgpInputStream(hJGInstance, buf, cBufBytes) != JGP_SUCCESS)
            {
                pArtPlayer->_fInPlayer = FALSE;
                break;
            }

            pArtPlayer->_fInPlayer = FALSE;
        }
        else
        {
            Read(buf, SIZE_DATA_BUFFER, &cBufBytes);
            if (cBufBytes == 0)
                break;

            if (ftJGDLL.pfnJgpInputStream(hJGInstance, buf, cBufBytes) != JGP_SUCCESS)
                break;
        }

        /* ---- Find image Height and Width ---- */
        if (!fGotSizeInfo)
        {
            fGotSizeInfo = FindImageHeightWidth(buf, sizeInfoBuffer,
                                                cBufBytes, &lBufferSize,
                                                &height, &width);
            if (fGotSizeInfo)
            {
                _xWid = width;
                _yHei = height;
                OnSize(_xWid, _yHei, _lTrans);

                /* ---- Save temporal Show handle ---- */     
                /* ---- Start the timer and playback ---- */     
                if (_pArtPlayer)
                {
                    _pArtPlayer->_dwShowHandle = (DWORD_PTR) hJGInstance;
                    pArtPlayer = _pArtPlayer;

                    OnAnim();
                    _pArtPlayer->DoPlayCommand(IDM_IMGARTPLAY);
                }
                else // Must be a static ART image
                {
                    pStaticArtPlayer = new CArtPlayer;
                    if (pStaticArtPlayer == NULL)
                        break;                   
                    pStaticArtPlayer->_dwShowHandle = (DWORD_PTR) hJGInstance;
                    pStaticArtPlayer->_fInPlayer = FALSE;
                    pArtPlayer = pStaticArtPlayer;
                }
            }
        }

        /* ---- See if we have new pixels ---- */
        if (fGotSizeInfo)
        {
            fNewPixelsReady = pArtPlayer->GetArtReport(
                    (CImgBitsDIB **)&_pImgBits, _yHei, _colorMode);
        }

        /* ---- Progressive draw ---- */
        if (fNewPixelsReady)
        {
            yBottom = pArtPlayer->_rcUpdateRect.bottom;

            if (yBottom == _yHei - 1)
                yBottom++;

            if ((_ulCoversImg == IMGBITS_PARTIAL) &&
                ((yBottom < _yBot) || (yBottom == _yHei)))
                _ulCoversImg = IMGBITS_TOTAL;

            _yBot = yBottom;
            OnProg(FALSE, _ulCoversImg, FALSE, _yBot);
        }

    } /* endfor */

    OnProg(TRUE, _ulCoversImg, FALSE, _yBot);

    if (_ulCoversImg == IMGBITS_TOTAL || _yBot + 1 >= _yHei)
        _ySrcBot = -1;
    else if (_yBot >= 31)
        _ySrcBot = _yBot + 1;

    /* STEP 3 - CLEANUP */
    /* ---------------- */

	// There is no more data, set the EOF mark
    if (pArtPlayer && !pArtPlayer->_fInPlayer)
    {
        pArtPlayer->_fInPlayer = TRUE;

	    ftJGDLL.pfnJgpSetEOFMark(hJGInstance);

        pArtPlayer->_fInPlayer = FALSE;
    }

    // Close the show handle if it is not needed (i.e. static ART). 
    if (!_pArtPlayer)
    {
        // Get the image dib(s) before we close
        // the show so they can be destroyed
        if (ftJGDLL.pfnJgpGetImage(hJGInstance, &_hDib) == 0)
            if (ftJGDLL.pfnJgpGetMask(hJGInstance, &_hMask))
                iResult = ftJGDLL.pfnJgpClose(hJGInstance);

        hJGInstance = NULL;
        delete pStaticArtPlayer;
    }

    return TRUE; 
}

CImgTask * NewImgTaskArt()
{
    return(JGGetFunctionTable() ? new CImgTaskArt : NULL);
}

/* ------------------------------------------------------------
 *
 * Render the specified part of the ART image to the specified
 * location at the specified size.
 *
 * ------------------------------------------------------------ */
void
CImgTaskArt::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    int ySrcBot = (_ulCoversImg == IMGBITS_TOTAL) ? _yHei : _yBot + 1;

    if (_pImgBits)
    {
        ((CImgBitsDIB *)_pImgBits)->SetValidLines(ySrcBot);

        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgbmp.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgbmp.cxx
//
//  Contents:   Image filter for .bmp files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifdef UNIX
#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif
#endif

#ifndef WIN16
#ifndef X_IMGUTIL_H_
#define X_IMGUTIL_H_
#include "imgutil.h"
#endif
#endif

MtDefine(CImgTaskBmp, Dwn, "CImgTaskBmp")
MtDefine(CImgTaskBmpBmih, CImgTaskBmp, "CImgTaskBmp::_pbmih")
MtDefine(CImgTaskBmpRleBits, CImgTaskBmp, "CImgTaskBmp RLE Bits")

#ifdef BIG_ENDIAN
inline WORD READWINTELWORD(WORD w)
{
  return ( w << 8 | w >> 8 );
}

inline DWORD READWINTELDWORD(DWORD dw)
{
  return READWINTELWORD( (WORD)(dw >> 16 )) | ((DWORD)READWINTELWORD( dw & 0xffff)) << 16;
}
#endif

class CImgTaskBmp : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskBmp))

    virtual void        Decode(BOOL *pfNonProgressive);

    // Data members

    BITMAPFILEHEADER    _bmfh;
    BITMAPINFOHEADER *  _pbmih;
    RGBQUAD          *  _pargb;
    UINT                _ncolors;
    BYTE *              _pbBits;

};

void CImgTaskBmp::Decode(BOOL *pfNonProgressive)
{
    BYTE    *pbCompressedBits = NULL;
    HDC     hdcMem;
    HBITMAP hbmSav;
    HBITMAP hbm = NULL;
    BOOL    fCompatibleFormat = TRUE;
    BOOL    fSuccess = FALSE;
    DWORD   dwHeaderSize;
    BOOL    fDither = FALSE;
    BOOL    fCoreHeader = FALSE;
    CImgBitsDIB *pibd = NULL;
    ULONG    cbRead = 0;
    HRESULT hr;
    
    *pfNonProgressive = TRUE;

#if !defined(UNIX) && !defined(_MAC)
    if (!Read((BYTE *)&_bmfh, sizeof(BITMAPFILEHEADER)))
#else
    // IEUNIX: Because of alignment problem, we need to read as following.
    if(!Read((BYTE *)&_bmfh.bfType, sizeof(WORD)) ||
        !Read((BYTE *)&_bmfh.bfSize, 3 * sizeof(DWORD)))
#endif
        goto Cleanup;

    cbRead += sizeof(BITMAPFILEHEADER);

#ifdef BIG_ENDIAN
    _bmfh.bfType = READWINTELWORD(_bmfh.bfType);
    _bmfh.bfSize = READWINTELDWORD(_bmfh.bfSize);
    _bmfh.bfReserved1 = READWINTELWORD(_bmfh.bfReserved1);
    _bmfh.bfReserved2 = READWINTELWORD(_bmfh.bfReserved2);
    _bmfh.bfOffBits = READWINTELDWORD(_bmfh.bfOffBits);
#endif

    // BITMAPINFOHEADER is a variable-length structure where the 
    // first field is the header size.  By reading this header and 
    // dynamically allocating the structure we will be compatible
    // with all forms of the header.  

    if (!Read((BYTE *)&dwHeaderSize, sizeof(DWORD)))
        goto Cleanup;

    cbRead += sizeof(DWORD);

#if defined(UNIX) || defined(_MAC)
    dwHeaderSize = READWINTELDWORD(dwHeaderSize);
#endif

    // Validate the header size

    if (dwHeaderSize < sizeof(BITMAPCOREHEADER))
        goto Cleanup;
    else if (dwHeaderSize == sizeof(BITMAPCOREHEADER))
    {
        fCoreHeader = TRUE;
        dwHeaderSize = sizeof(BITMAPINFOHEADER);
    }
    else if (dwHeaderSize < sizeof(BITMAPINFOHEADER))
        goto Cleanup;
    else if (dwHeaderSize > 4096) //arbitrary limit to guard bogus file
        goto Cleanup;
        
    _pbmih = (BITMAPINFOHEADER *)MemAlloc(Mt(CImgTaskBmpBmih), dwHeaderSize + 256 * sizeof(RGBQUAD));
    if (!_pbmih)
        goto Cleanup;
    _pargb = (RGBQUAD *)((BYTE *)_pbmih + dwHeaderSize);
    
    _pbmih->biSize = dwHeaderSize;

    if (!fCoreHeader)
    {
        if (!Read((BYTE *)_pbmih + sizeof(DWORD), dwHeaderSize - sizeof(DWORD)))
            goto Cleanup;
            
        cbRead += dwHeaderSize - sizeof(DWORD);
    }
    else
    {
        BITMAPCOREHEADER bcHeader;

        if (!Read((BYTE *)&bcHeader.bcWidth, sizeof(BITMAPCOREHEADER) - sizeof(DWORD)))
            goto Cleanup;
            
        cbRead += sizeof(BITMAPCOREHEADER) - sizeof(DWORD);

        _pbmih->biWidth = (LONG)bcHeader.bcWidth;
        _pbmih->biHeight = (LONG)bcHeader.bcHeight;
        _pbmih->biPlanes = bcHeader.bcPlanes;
        _pbmih->biBitCount = bcHeader.bcBitCount;
        _pbmih->biCompression = BI_RGB;
        _pbmih->biSizeImage = 0;
        _pbmih->biXPelsPerMeter = 0;
        _pbmih->biYPelsPerMeter = 0;
        _pbmih->biClrUsed = 0;
        _pbmih->biClrImportant = 0;
    }

#ifdef BIG_ENDIAN
    _pbmih->biWidth = (LONG)READWINTELDWORD(_pbmih->biWidth);
    _pbmih->biHeight = (LONG)READWINTELDWORD(_pbmih->biHeight);
    _pbmih->biPlanes = READWINTELWORD(_pbmih->biPlanes);
    _pbmih->biBitCount = READWINTELWORD(_pbmih->biBitCount);
    _pbmih->biCompression = READWINTELDWORD(_pbmih->biCompression);
    _pbmih->biSizeImage = READWINTELDWORD(_pbmih->biSizeImage);
    _pbmih->biXPelsPerMeter = (LONG)READWINTELDWORD(_pbmih->biXPelsPerMeter);
    _pbmih->biYPelsPerMeter = (LONG)READWINTELDWORD(_pbmih->biYPelsPerMeter);
    _pbmih->biClrUsed = READWINTELDWORD(_pbmih->biClrUsed);
    _pbmih->biClrImportant = READWINTELDWORD(_pbmih->biClrImportant);
#endif

    //Check for valid parameters
    if (_pbmih->biPlanes != 1)
        goto Cleanup;

    if (    _pbmih->biBitCount != 1
        &&  _pbmih->biBitCount != 4
        &&  _pbmih->biBitCount != 8
        &&  _pbmih->biBitCount != 16
        &&  _pbmih->biBitCount != 24
        &&  _pbmih->biBitCount != 32)
        goto Cleanup;

    if ((_pbmih->biWidth < 0) ||
        (_pbmih->biHeight < 0))
        goto Cleanup;

    if (_pbmih->biClrUsed && _pbmih->biClrUsed <= 256)
    {
        _ncolors = _pbmih->biClrUsed;
    }
    else if (_pbmih->biBitCount <= 8)
    {
        _ncolors = 1 << _pbmih->biBitCount;
    }
    else if (_pbmih->biCompression == BI_BITFIELDS)
    {
        _ncolors = 3;       // RGB masks
    }

    if (_ncolors)
    {
        if (!fCoreHeader)
        {
            if (!Read((BYTE *)_pargb, _ncolors * sizeof(RGBQUAD)))
                goto Cleanup;
                
            cbRead += _ncolors * sizeof(RGBQUAD);
        }
        else
        {
            RGBTRIPLE   argbT[256];
            UINT i;

            if (!Read((BYTE *)argbT, _ncolors * sizeof(RGBTRIPLE)))
                goto Cleanup;
                
            cbRead += _ncolors * sizeof(RGBTRIPLE);
    
            for (i = 0; i < _ncolors; ++i)
            {
                _pargb[i].rgbRed = argbT[i].rgbtRed;
                _pargb[i].rgbGreen = argbT[i].rgbtGreen;
                _pargb[i].rgbBlue = argbT[i].rgbtBlue;
                _pargb[i].rgbReserved = 0;
            }
        }

        if (_pbmih->biCompression != BI_BITFIELDS)
            CopyPaletteEntriesFromColors(_ape, _pargb, _ncolors);
    }

    _xWid  = _pbmih->biWidth;
    _yHei = _pbmih->biHeight;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, -1 /* lTrans */);

    // Determine if we are reading a format compatible with the rest
    // of Trident.  
    
    if (_colorMode == 8 && _pbmih->biBitCount == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        fDither = TRUE;
    
    if (_pbmih->biCompression != BI_RGB 
        && _pbmih->biCompression != BI_BITFIELDS)
        fCompatibleFormat = FALSE;

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    _pImgBits = pibd;

    if (fCompatibleFormat)
    {
        // for compatible formats: if there are extra fields we do not understand, chop them off.
        // n.b. NT5's BITMAPV5HEADERs point to extra "profile" data past the bitmap that we do not read.
        
        if (_pbmih->biSize > sizeof(BITMAPV4HEADER))
            _pbmih->biSize = sizeof(BITMAPV4HEADER);
        
        hr = THR(pibd->AllocDIBSectionFromInfo((BITMAPINFO *)_pbmih, fDither));
        if (hr)
            goto Cleanup;
    }
    else
    {
        hr = THR(pibd->AllocDIBSection((_pbmih->biBitCount == 16) ? 15 : _pbmih->biBitCount,
                                _xWid, _yHei, _pargb, _ncolors, -1));
        if (hr)
            goto Cleanup;
    }

    hbm = pibd->GetHbm();
    _pbBits = (BYTE *)pibd->GetBits();

    // Before we read the bits, seek to the correct location in the file
    while (_bmfh.bfOffBits > cbRead)
    {
        BYTE abDummy[1024];
        ULONG cbSkip;

        cbSkip = _bmfh.bfOffBits - cbRead;
        
        if (cbSkip > 1024)
            cbSkip = 1024;

        if (!Read(abDummy, cbSkip))
            goto Cleanup;
            
        cbRead += cbSkip;
    }

    if (fCompatibleFormat)
    {
 #ifdef _MAC
        long    row;
        BYTE*   rowStart;
        int     cbRow = pibd->CbLine();

        for (row = _yHei - 1; row >= 0; row--)
        {
            rowStart = _pbBits + (cbRow * row);
            if (!Read(rowStart, cbRow))
                goto Cleanup;
        }
        pibd->ReleaseBits();
        _pbBits = nil;
        pibd->MapBits();
#else
        if (!Read(_pbBits, pibd->CbLine() * _yHei))
            goto Cleanup;
#endif
    }
    else
    {
        DIBSECTION  ds;
        LONG cbNeeded;

        cbNeeded = _pbmih->biSizeImage;

        // If the file continues beyond the end of the bitmap, read extra data in as well.
        
        if ((unsigned)cbNeeded < _bmfh.bfSize - cbRead)
            cbNeeded = _bmfh.bfSize - cbRead;

        Assert(_pbmih->biSizeImage > 0);
        if (_pbmih->biSizeImage == 0)
            goto Cleanup;
            
        pbCompressedBits = (BYTE *)MemAlloc(Mt(CImgTaskBmpRleBits), cbNeeded);
        if (!pbCompressedBits)
            goto Cleanup;

        if (!Read(pbCompressedBits, cbNeeded))
            goto Cleanup;
        
        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = (HBITMAP)SelectObject(hdcMem, hbm);

        // TODO - need to fill image with transparent info so that
        //          RLE jumps are handled correctly.
        
        SetDIBitsToDevice(hdcMem, 0, 0, _xWid, _yHei, 0, 0,
            0, _yHei, pbCompressedBits, (BITMAPINFO *)_pbmih, 
            DIB_RGB_COLORS);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);

        // Update the info header to be the uncompressed format
        // in hbm.  Update the color table to the halftone
        // entries (ImgCreateDib caused the color table to be
        // set to our halftone palette.)

        GetObject(hbm, sizeof(DIBSECTION), &ds);
        memcpy(_pbmih, &ds.dsBmih, sizeof(BITMAPINFOHEADER));

        // TODO: Why is this not GetDibColorTable() ??????
        
        memcpy(_ape, g_lpHalftone.ape, _ncolors * sizeof(PALETTEENTRY));
    }

#ifndef _MAC
    if (fDither)
    {
        if (x_Dither(_pbBits, _ape, _xWid, _yHei, _lTrans))
            goto Cleanup;

        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = (HBITMAP)SelectObject(hdcMem, hbm);

        SetDIBColorTable(hdcMem, 0, 256, g_rgbHalftone);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);
    }
#endif

    _ySrcBot = -1;
    _yBot = _yHei;
    
    fSuccess = TRUE;
    
Cleanup:
    MemFree(pbCompressedBits);
    MemFree(_pbmih);
    
    if (!fSuccess)
    {
        delete _pImgBits;
        _pImgBits = NULL;
        _pbBits = NULL;
    }
}

CImgTask * NewImgTaskBmp()
{
    return(new CImgTaskBmp);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imggif.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

extern void x_DitherRow (BYTE HUGEP * from, BYTE HUGEP * to, PALETTEENTRY *pcolors,
                long row, long ncols, int transparent);

//+------------------------------------------------------------------------
//  Tags
//-------------------------------------------------------------------------

PerfDbgExtern(tagImgTaskIO);

DeclareTag(tagImgTaskGif,           "Dwn",          "Img: Trace Gif optimizations")
PerfDbgTag(tagImgTaskGifAbort,      "Dwn",          "Img: Zap invalid Gif scanlines")
MtDefine(CImgTaskGif, Dwn, "CImgTaskGif")
MtDefine(CImgTaskGifStack, CImgTaskGif, "CImgTaskGif Decode Stack")
MtDefine(CImgTaskGifTable0, CImgTaskGif, "CImgTaskGif Decode Table 0")
MtDefine(CImgTaskGifTable1, CImgTaskGif, "CImgTaskGif Decode Table 1")
MtDefine(CImgTaskGifBits, CImgTaskGif, "CImgTaskGif Decode Image")
MtDefine(CImgTaskGifFrame, CImgInfo, "CImgTaskGif GIFFRAME")

#define XX_DMsg(x, y)

#define PROG_INTERVAL   0x3

#define NUM_IMPORTANT_COLORS 256

#define MAXCOLORMAPSIZE     256

#define TRUE    1
#define FALSE   0

#define MAX_LWZ_BITS        12

#define INTERLACE       0x40
#define LOCALCOLORMAP   0x80
#define BitSet(byte, bit)   (((byte) & (bit)) == (bit))

#define LM_to_uint(a,b)         ((((unsigned int) b)<<8)|((unsigned int)a))

#define dwIndefiniteGIFThreshold 300    // 300 seconds == 5 minutes
                                        // If the GIF runs longer than
                                        // this, we will assume the author
                                        // intended an indefinite run.
#define dwMaxGIFBits 13107200           // keep corrupted GIFs from causing
                                        // us to allocate _too_ big a buffer.
                                        // This one is 1280 X 1024 X 10.
typedef struct _GIFSCREEN
{
    unsigned long Width;
    unsigned long Height;
    unsigned long BitPixel;
    unsigned long ColorResolution;
    unsigned long Background;
    unsigned long AspectRatio;
}
GIFSCREEN;

typedef struct _GIF89
{
    long transparent;
    long delayTime;
    long inputFlag;
    long disposal;
}
GIF89;

#define MAX_STACK_SIZE  ((1 << (MAX_LWZ_BITS)) * 2)
#define MAX_TABLE_SIZE  (1 << MAX_LWZ_BITS)
typedef struct _GIFINFO
{
    unsigned char *src;
    GIF89 Gif89;
    long lGifLoc;
    long ZeroDataBlock;

/*
 **  Pulled out of nextCode
 */
    long curbit, lastbit, get_done;
    long last_byte;
    long return_clear;
/*
 **  Out of nextLWZ
 */
    unsigned short *pstack, *sp;
    long stacksize;
    long code_size, set_code_size;
    long max_code, max_code_size;
    long clear_code, end_code;

/*
 *   Were statics in procedures
 */
    unsigned char buf[280];
    unsigned short *table[2];
    long tablesize;
    long firstcode, oldcode;

} GIFINFO;

class CImgTaskGif : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskGif))

    CImgTaskGif();
    virtual ~CImgTaskGif();

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // CImgTaskGif methods

    void OnProg(BOOL fLast, ULONG ulCoversImg);
    BOOL Read(void * pv, ULONG cb);
    BOOL ReadByte(BYTE * pb);
    void ReadGIFMaster();
    BOOL ReadColorMap(long number, PALETTEENTRY * ppe);
    long DoExtension(long label);
    long GetDataBlock(unsigned char *buf);
    BOOL initLWZ(long input_code_size);
    long nextCode(long code_size);
    unsigned short * growStack();
    BOOL growTables();
    long readLWZ();
    long nextLWZ();
    BOOL ReadScanline(unsigned char *pb, int cb);
    void CalculateUpdateRect(int logicalRow0, int logicalRowN, BOOL *pfInvalidateAll, LONG *pyBottom);
    void ProgressiveDithering(int logicalFill, int logicalRow);

    typedef BYTE HUGEP * HLPBYTE;
    CImgBitsDIB *ReadImage(long len, long height, BOOL fInterlace, BOOL fGIFFrame,
        int cpeColors, PALETTEENTRY * ppeColors, HLPBYTE * ppbBits, LONG lTrans);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

    // Data members

    LONG                _cbBuf;
    BYTE *              _pbBuf;
    BYTE                _abBuf[512];
    BOOL                _fEof;
    BOOL                _fMustBeTransparent;
    BOOL                _fDither;
    DWORD               _cbImage;
    BOOL                _fInterleaved;
    LONG                _yLogRow;
    LONG                _yLogRowDraw;
    LONG                _yDithRow;
    void *              _pvDithData;
    GIFINFO             _gifinfo;
    PALETTEENTRY        _apeFirst[256];
    int                 _mapConstrained[256];
    HLPBYTE             _pbSrcAlloc;
    HLPBYTE             _pbSrc;
    HLPBYTE             _pbDst;

};

CImgTaskGif::CImgTaskGif()
{
    _yLogRow = -1;
    _yLogRowDraw = -1;
}

CImgTaskGif::~CImgTaskGif()
{
    MemFree(_pbSrcAlloc);
    MemFree(_pvDithData);
    MemFree(_gifinfo.pstack);
    MemFree(_gifinfo.table[0]);
    MemFree(_gifinfo.table[1]);
}

void CImgTaskGif::Decode(BOOL *pfNonProgressive)
{
    ReadGIFMaster();

    if (_pImgBits && _gad.pgf && _yLogRowDraw >= 0)
    {
        if (_yLogRowDraw + 1 >= _gad.pgf->height)
        {
            _ySrcBot = -1;
        }
        else if (_fInterleaved)
        {
            _ySrcBot = (long)min((long)((_yLogRowDraw + 1) * 8), (long)_gad.pgf->height);

            if (_ySrcBot == _gad.pgf->height)
                _ySrcBot = -1;
        }
        else
        {
            _ySrcBot = _yLogRowDraw + 1;
        }

        _gad.pgf->pibd->SetValidLines(_ySrcBot);
    }
}

BOOL IsGifHdr(BYTE * pb)
{
    return(pb[0] == 'G' && pb[1] == 'I' && pb[2] == 'F'
        && pb[3] == '8' && (pb[4] == '7' || pb[4] == '9') && pb[5] == 'a');
}

CImgTask * NewImgTaskGif()
{
    return(new CImgTaskGif);
}

BOOL
CImgTaskGif::Read(void * pv, ULONG cb)
{
    PerfDbgLog1(tagImgTaskIO, this, "+CImgTaskGif::Read (req %ld)", cb);

    LONG cbReq = (LONG)cb, cbGot, cbTot = 0;

    while (cbReq > 0)
    {
        cbGot = cbReq < _cbBuf ? cbReq : _cbBuf;

        if (cbGot > 0)
        {
            memcpy(pv, _pbBuf, cbGot);
            _pbBuf += cbGot;
            _cbBuf -= cbGot;
            cbTot  += cbGot;

            if (cbTot == (LONG)cb)
                break;
        }

        if (_pDwnBindData->IsEof() || _fTerminate)
            break;

        if (cbGot > 0)
        {
            pv     = (BYTE *)pv + cbGot;
            cbReq -= cbGot;
        }

        cbGot  = 0;
        super::Read(_abBuf, ARRAY_SIZE(_abBuf), (ULONG *)&cbGot, cbReq);
        _pbBuf = _abBuf;
        _cbBuf = cbGot;
    }

    PerfDbgLog3(tagImgTaskIO, this, "-CImgTaskGif::Read (got %ld) %c%c",
        cbTot, _pDwnBindData->IsEof() ? 'E' : ' ',
        cbTot > 0 ? 'T' : 'F');

    return(cbTot > 0);
}

inline BOOL
CImgTaskGif::ReadByte(BYTE * pb)
{
    if (--_cbBuf >= 0)
    {
        *pb = *_pbBuf++;
        return(TRUE);
    }
    else
    {
        return(Read(pb, 1));
    }
}

void
CImgTaskGif::ReadGIFMaster()
{
    unsigned char buf[16];
    unsigned char c;
    long useGlobalColormap;
    long imageCount = 0;
    long imageNumber = 1;
    GIFSCREEN GifScreen;
    long bitPixel;
    GIFFRAME * pgfLast = NULL;
    GIFFRAME * pgfNew = NULL;
    HLPBYTE pbBits;
    PALETTEENTRY apeLocal[MAXCOLORMAPSIZE];
    PALETTEENTRY * ppeColors;
    int cpeColors;
    CImgBitsDIB *pibd = NULL;

    _gifinfo.ZeroDataBlock = 0;

    /*
     * Initialize GIF89 extensions
     */
    _gifinfo.Gif89.transparent = -1;
    _gifinfo.Gif89.delayTime = 5;
    _gifinfo.Gif89.inputFlag = -1;

    // initialize our animation fields
    _gad.dwGIFVer = dwGIFVerUnknown;

    if (!Read(buf, 6))
    {
        XX_DMsg(DBG_IMAGE, ("GIF: error reading magic number\n"));
        goto exitPoint;
    }

    if (!IsGifHdr(buf))
        goto exitPoint;

    _gad.dwGIFVer = (buf[4] == '7') ? dwGIFVer87a : dwGIFVer89a;

    if (!Read(buf, 7))
    {
        XX_DMsg(DBG_IMAGE, ("GIF: failed to read screen descriptor\n"));
        goto exitPoint;
    }

    GifScreen.Width = LM_to_uint(buf[0], buf[1]);
    GifScreen.Height = LM_to_uint(buf[2], buf[3]);
    GifScreen.BitPixel = 2 << (buf[4] & 0x07);
    GifScreen.ColorResolution = (((buf[4] & 0x70) >> 3) + 1);
    GifScreen.Background = buf[5];
    GifScreen.AspectRatio = buf[6];

    if (BitSet(buf[4], LOCALCOLORMAP))
    {                           /* Global Colormap */
        if (!ReadColorMap(GifScreen.BitPixel, _ape))
        {
            XX_DMsg(DBG_IMAGE, ("error reading global colormap\n"));
            goto exitPoint;
        }
    }

    if (GifScreen.AspectRatio != 0 && GifScreen.AspectRatio != 49)
    {
        float r;
        r = ((float) (GifScreen.AspectRatio) + (float) 15.0) / (float) 64.0;
        XX_DMsg(DBG_IMAGE, ("Warning: non-square pixels!\n"));
    }

    for (;; ) // our appetite now knows no bounds save termination or error
    {
        if (!ReadByte(&c))
        {
            XX_DMsg(DBG_IMAGE, ("EOF / read error on image data\n"));
            goto exitPoint;
        }

        if (c == ';')
        {                       /* GIF terminator */
            if (imageCount < imageNumber)
            {
                XX_DMsg(DBG_IMAGE, ("No images found in file\n"));
                goto exitPoint;
            }
            break;
        }

        if (c == '!')
        {                       /* Extension */
            if (!ReadByte(&c))
            {
                XX_DMsg(DBG_IMAGE, ("EOF / read error on extension function code\n"));
                goto exitPoint;
            }
            DoExtension(c);
            continue;
        }

        if (c != ',')
        {                       /* Not a valid start character */
            break;
        }

        ++imageCount;

        if (!Read(buf, 9))
        {
            XX_DMsg(DBG_IMAGE, ("couldn't read left/top/width/height\n"));
            goto exitPoint;
        }

        useGlobalColormap = !BitSet(buf[8], LOCALCOLORMAP);

        bitPixel = 1 << ((buf[8] & 0x07) + 1);

        /*
         * We only want to set width and height for the imageNumber
         * we are requesting.
         */
        if (imageCount == imageNumber)
        {
            // Replicate some of Netscape's special cases:
            // Don't use the logical screen if it's a GIF87a and the topLeft of the first image is at the origin.
            // Don't use the logical screen if the first image spills out of the logical screen.
            // These are artifacts of primitive authoring tools falling into the hands of hapless users.
            RECT    rectImage;  // rect defining bounds of GIF
            RECT    rectLS;     // rect defining bounds of GIF logical screen.
            RECT    rectSect;   // intersection of image an logical screen
            BOOL    fNoSpill;   // True if the image doesn't spill out of the logical screen
            BOOL    fGoofy87a;  // TRUE if its one of the 87a pathologies that Netscape special cases

            rectImage.left = LM_to_uint(buf[0], buf[1]);
            rectImage.top = LM_to_uint(buf[2], buf[3]);
            rectImage.right = rectImage.left + LM_to_uint(buf[4], buf[5]);
            rectImage.bottom = rectImage.top + LM_to_uint(buf[6], buf[7]);
            rectLS.left = rectLS.top = 0;
            rectLS.right = GifScreen.Width;
            rectLS.bottom = GifScreen.Height;
            IntersectRect( &rectSect, &rectImage, &rectLS );
            fNoSpill = EqualRect( &rectImage, &rectSect );
            fGoofy87a = FALSE;
            if (_gad.dwGIFVer == dwGIFVer87a)
            {
                // netscape ignores the logical screen if the image is flush against
                // either the upper left or lower right corner
                fGoofy87a = (rectImage.top == 0 && rectImage.left == 0) ||
                            (rectImage.bottom == rectLS.bottom &&
                             rectImage.right == rectLS.right);
            }

            if (!fGoofy87a && fNoSpill)
            {
                _xWid = GifScreen.Width;
                _yHei = GifScreen.Height;
            }
            else
            {
                // Something is amiss. Fall back to the image's dimensions.

                // If the sizes match, but the image is offset, or we're ignoring
                // the logical screen cuz it's a goofy 87a, then pull it back to
                // to the origin
                if ((LM_to_uint(buf[4], buf[5]) == GifScreen.Width &&
                      LM_to_uint(buf[6], buf[7]) == GifScreen.Height) ||
                     fGoofy87a)
                {
                    buf[0] = buf[1] = 0; // left corner to zero
                    buf[2] = buf[3] = 0; // top to zero.
                }

                _xWid = LM_to_uint(buf[4], buf[5]);
                _yHei = LM_to_uint(buf[6], buf[7]);
            }

            _lTrans = _gifinfo.Gif89.transparent;
            TraceTag((tagImgTrans, "CImgTaskGif %x  frame %d  set _lTrans to %d",
                        this, imageCount, _lTrans));

            // Post WHKNOWN
            OnSize(_xWid, _yHei, _lTrans);
        }

        if (!useGlobalColormap)
        {
            if (!ReadColorMap(bitPixel, apeLocal))
            {
                XX_DMsg(DBG_IMAGE, ("error reading local colormap\n"));
                goto exitPoint;
            }
        }

        // We allocate a frame record for each imag in the GIF stream, including
        // the first/primary image.
        pgfNew = (GIFFRAME *) MemAllocClear(Mt(CImgTaskGifFrame), sizeof(GIFFRAME));

        if ( pgfNew == NULL )
        {
            XX_DMsg(DBG_IMAGE, ("not enough memory for GIF frame\n"));
            goto exitPoint;
        }

        if ( _gifinfo.Gif89.delayTime != -1 )
        {
            // we have a fresh control extension for this block

            // convert to milliseconds
            pgfNew->uiDelayTime = _gifinfo.Gif89.delayTime * 10;


            //REVIEW(seanf): workaround to cope with 'degenerate animations' whose timing is set to some
            //               small value becaue of the delays imposed by Netscape's animation process
            if ( pgfNew->uiDelayTime <= 50 ) // assume these small values imply Netscape encoding delay
                pgfNew->uiDelayTime = 100;   // pick a larger value s.t. the frame will be visible

            pgfNew->bDisposalMethod =  _gifinfo.Gif89.disposal;

            if (_gifinfo.Gif89.transparent != -1)
                pgfNew->bTransFlags |= TRANSF_TRANSPARENT;
        }
        else
        {   // fake one up s.t. GIFs that rely solely on Netscape's delay to time their animations will play
            // The spec says that the scope of one of these blocks is the image after the block.
            // Netscape says 'until further notice'. So we play it their way up to a point. We
            // propagate the disposal method and transparency. Since Netscape doesn't honor the timing
            // we use our default timing for these images.
            pgfNew->uiDelayTime = 100;
            pgfNew->bDisposalMethod =  _gifinfo.Gif89.disposal;
        }

        pgfNew->top = LM_to_uint(buf[2], buf[3]);       // bounds relative to the GIF logical screen
        pgfNew->left = LM_to_uint(buf[0], buf[1]);
        pgfNew->width = LM_to_uint(buf[4], buf[5]);
        pgfNew->height = LM_to_uint(buf[6], buf[7]);

        if (_gifinfo.Gif89.transparent != -1)
            pgfNew->bTransFlags |= TRANSF_TRANSPARENT;
            
        // Images that are offset, or do not cover the full logical screen are 'transparent' in the
        // sense that they require us to matte the frame onto the background.

        if (!_gad.fHasTransparency)
        {
                if (pgfNew->top != 0 ||
                    pgfNew->left != 0 ||
                    (UINT)pgfNew->width != (UINT)GifScreen.Width ||
                    (UINT)pgfNew->height != (UINT)GifScreen.Height)
                    _fMustBeTransparent = TRUE;

            if ((pgfNew->bTransFlags & TRANSF_TRANSPARENT) || _fMustBeTransparent)
            {
                TraceTag((tagImgTrans, "ImgTaskGif %x frame %d  _lTrans: %d  bTrans: %x  _fMust: %d",
                                this, imageCount, _lTrans, pgfNew->bTransFlags, _fMustBeTransparent));

                _gad.fHasTransparency = TRUE;
                if (_lTrans == -1)
                {
                    _lTrans = 0;
                    TraceTag((tagImgTrans, "CImgTaskGif %x  frame %d  set _lTrans to %d",
                                this, imageCount, _lTrans));
                    OnTrans(_lTrans);
                }
            }
        }

        // We don't need to allocate a handle for the simple region case.
        // FrancisH says Windows is too much of a cheapskate to allow us the simplicity
        // of allocating the region once and modifying as needed. Well, okay, he didn't
        // put it that way...
        pgfNew->hrgnVis = NULL;
        pgfNew->bRgnKind = NULLREGION;

        if (!useGlobalColormap)
        {
            cpeColors = bitPixel;
            ppeColors = apeLocal;
        }
        else
        {
            cpeColors = GifScreen.BitPixel;
            ppeColors = _ape;
        }

        // First frame: must be able to progressively render, so stick it in _gad now.
        if (_gad.pgf == NULL)
        {
            _gad.pgf = pgfNew;

            // Remember the color table for the first frame so that
            // progressive dithering can be done on it.

            memcpy(_apeFirst, ppeColors, cpeColors * sizeof(PALETTEENTRY));
        }

        pibd = ReadImage(LM_to_uint(buf[4], buf[5]), // width
                            LM_to_uint(buf[6], buf[7]), // height
                            BitSet(buf[8], INTERLACE),
                            imageCount != imageNumber,
                            cpeColors, ppeColors, &pbBits,
                            _gifinfo.Gif89.transparent);

        if (pibd != NULL)
        {
            if (pgfLast != NULL)
            {
                // Set up pgfNew if not the first frame
                
                int transparent = (pgfNew->bTransFlags & TRANSF_TRANSPARENT) ? _gifinfo.Gif89.transparent : -1;

                _gad.fAnimated = TRUE; // say multi-image == animated

#ifdef _MAC
                pibd->ComputeTransMask(0, pgfNew->height, transparent, transparent);
#else
                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE)) // palettized, use DIB_PAL_COLORS
                {   // This will also dither the bits to the screen palette

                    if (x_Dither(pbBits, ppeColors, pgfNew->width, pgfNew->height, transparent))
                        goto exitPoint;
                        
                    pibd->ComputeTransMask(0, pgfNew->height, g_wIdxTrans, 255);
                }
#endif

                pgfNew->pibd = pibd;
                pibd = NULL;

                pgfLast->pgfNext = pgfNew;

                OnAnim();
            }
            else
            {
                // first frame: already been set up
                
                Assert(_gad.pgf == pgfNew);
                Assert(_gad.pgf->pibd == pibd);
                
                pibd = NULL;

            }
            pgfLast = pgfNew;
            pgfNew = NULL;
        }

        // make the _gifinfo.Gif89.delayTime stale, so we know if we got a new
        // GCE for the next image
        _gifinfo.Gif89.delayTime = -1;
    }

    if ( imageCount > imageNumber )
        _gad.fAnimated = TRUE; // say multi-image == animated

exitPoint:
    if (pibd)
        delete pibd;
    if (pgfNew && _gad.pgf != pgfNew)
        MemFree(pgfNew);
    return;
}

BOOL CImgTaskGif::ReadColorMap(long number, PALETTEENTRY * ppe)
{
    if (!Read(ppe, number * 3))
        return(FALSE);

    if (number)
    {
#ifdef _MAC
        DWORD UNALIGNED * pdwSrc = (DWORD *)((BYTE *)ppe + (number - 1) * 3);
 
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = (*pdwSrc & 0xFFFFFF00);
            pdwSrc = (DWORD *)((BYTE *)pdwSrc - 3);
        }
#else
#ifndef UNIX
        DWORD UNALIGNED * pdwSrc = (DWORD *)((BYTE *)ppe + (number - 1) * 3);
 
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = (*pdwSrc & 0xFFFFFF);
            pdwSrc = (DWORD *)((BYTE *)pdwSrc - 3);
        }
#else
        BYTE * pdwSrc = (BYTE *)ppe + (number - 1) * 3;
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = ((((DWORD)pdwSrc[2] << 8) | pdwSrc[1]) << 8) | pdwSrc[0];
            pdwSrc -= 3;
        }
#endif
#endif // _MAC
    }

    return(TRUE);
}

long CImgTaskGif::DoExtension(long label)
{
    unsigned char buf[256];
    int count;

    switch (label)
    {
        case 0x01:              /* Plain Text Extension */
            break;
        case 0xff:              /* Application Extension */
            // Is it the Netscape looping extension
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 11)
            {
                char *szNSExt = "NETSCAPE2.0";

                if ( memcmp( buf, szNSExt, strlen( szNSExt ) ) == 0 )
                { // if it has their signature, get the data subblock with the iter count
                    count = GetDataBlock((unsigned char *) buf);
                    if ( count >= 3 )
                    {
                        _gad.fLooped = TRUE;
                        _gad.cLoops = (buf[2] << 8) | buf[1];
                    }
                }
            }
            while (GetDataBlock((unsigned char *) buf) > 0)
                ;
            return FALSE;
            break;
        case 0xfe:              /* Comment Extension */
            while (GetDataBlock((unsigned char *) buf) > 0)
            {
                XX_DMsg(DBG_IMAGE, ("GIF comment: %s\n", buf));
            }
            return FALSE;
        case 0xf9:              /* Graphic Control Extension */
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 3)
            {
                _gifinfo.Gif89.disposal = (buf[0] >> 2) & 0x7;
                _gifinfo.Gif89.inputFlag = (buf[0] >> 1) & 0x1;
                _gifinfo.Gif89.delayTime = LM_to_uint(buf[1], buf[2]);
                if ((buf[0] & 0x1) != 0)
                    _gifinfo.Gif89.transparent = buf[3];
                else
                    _gifinfo.Gif89.transparent = -1;
            }
            while (GetDataBlock((unsigned char *) buf) > 0)
                ;
            return FALSE;
        default:
            break;
    }

    while (GetDataBlock((unsigned char *) buf) > 0)
        ;

    return FALSE;
}


long CImgTaskGif::GetDataBlock(unsigned char *buf)
{
    unsigned char count;

    count = 0;

    if (!ReadByte(&count))
    {
        return -1;
    }

    _gifinfo.ZeroDataBlock = count == 0;

    if ((count != 0) && (!Read(buf, count)))
    {
        return -1;
    }

    return ((long) count);
}

#define MIN_CODE_BITS 5
#define MIN_STACK_SIZE 64
#define MINIMUM_CODE_SIZE 2

BOOL CImgTaskGif::initLWZ(long input_code_size)
{
    if (input_code_size < MINIMUM_CODE_SIZE)
        return FALSE;

    _gifinfo.set_code_size = input_code_size;
    _gifinfo.code_size = _gifinfo.set_code_size + 1;
    _gifinfo.clear_code = 1 << _gifinfo.set_code_size;
    _gifinfo.end_code = _gifinfo.clear_code + 1;
    _gifinfo.max_code_size = 2 * _gifinfo.clear_code;
    _gifinfo.max_code = _gifinfo.clear_code + 2;

    _gifinfo.curbit = _gifinfo.lastbit = 0;
    _gifinfo.last_byte = 2;
    _gifinfo.get_done = FALSE;

    _gifinfo.return_clear = TRUE;

    if(input_code_size >= MIN_CODE_BITS)
        _gifinfo.stacksize = ((1 << (input_code_size)) * 2);
    else
        _gifinfo.stacksize = MIN_STACK_SIZE;

    if ( _gifinfo.pstack != NULL )
        MemFree( _gifinfo.pstack );
    if ( _gifinfo.table[0] != NULL  )
        MemFree( _gifinfo.table[0] );
    if ( _gifinfo.table[1] != NULL  )
        MemFree( _gifinfo.table[1] );

    _gifinfo.table[0] = 0;
    _gifinfo.table[1] = 0;
    _gifinfo.pstack = 0;

    _gifinfo.pstack = (unsigned short *)MemAlloc(Mt(CImgTaskGifStack), (_gifinfo.stacksize)*sizeof(unsigned short));
    if(_gifinfo.pstack == 0){
        goto ErrorExit;
    }
    _gifinfo.sp = _gifinfo.pstack;

    // Initialize the two tables.
    _gifinfo.tablesize = (_gifinfo.max_code_size);
    _gifinfo.table[0] = (unsigned short *)MemAlloc(Mt(CImgTaskGifTable0), (_gifinfo.tablesize)*sizeof(unsigned short));
    _gifinfo.table[1] = (unsigned short *)MemAlloc(Mt(CImgTaskGifTable1), (_gifinfo.tablesize)*sizeof(unsigned short));
    if((_gifinfo.table[0] == 0) || (_gifinfo.table[1] == 0)){
        Assert(0);
        goto ErrorExit;
    }

    return TRUE;

ErrorExit:
    if(_gifinfo.pstack){
        MemFree(_gifinfo.pstack);
        _gifinfo.pstack = 0;
    }

    if(_gifinfo.table[0]){
        MemFree(_gifinfo.table[0]);
        _gifinfo.table[0] = 0;
    }

    if(_gifinfo.table[1]){
        MemFree(_gifinfo.table[1]);
        _gifinfo.table[1] = 0;
    }

    return FALSE;

}

long CImgTaskGif::nextCode(long code_size)
{
    static const long maskTbl[16] =
    {
        0x0000, 0x0001, 0x0003, 0x0007,
        0x000f, 0x001f, 0x003f, 0x007f,
        0x00ff, 0x01ff, 0x03ff, 0x07ff,
        0x0fff, 0x1fff, 0x3fff, 0x7fff,
    };
    long i, j, ret, end;
    unsigned char *buf = &_gifinfo.buf[0];

    if (_gifinfo.return_clear)
    {
        _gifinfo.return_clear = FALSE;
        return _gifinfo.clear_code;
    }

    end = _gifinfo.curbit + code_size;

    if (end >= _gifinfo.lastbit)
    {
        long count;

        if (_gifinfo.get_done)
        {
            return -1;
        }
        buf[0] = buf[_gifinfo.last_byte - 2];
        buf[1] = buf[_gifinfo.last_byte - 1];

        if ((count = GetDataBlock(&buf[2])) == 0)
            _gifinfo.get_done = TRUE;
        if (count < 0)
        {
            return -1;
        }
        _gifinfo.last_byte = 2 + count;
        _gifinfo.curbit = (_gifinfo.curbit - _gifinfo.lastbit) + 16;
        _gifinfo.lastbit = (2 + count) * 8;

        end = _gifinfo.curbit + code_size;

        // Okay, bug 30784 time. It's possible that we only got 1
        // measly byte in the last data block. Rare, but it does happen.
        // In that case, the additional byte may still not supply us with
        // enough bits for the next code, so, as Mars Needs Women, IE
        // Needs Data.
        if (end >= _gifinfo.lastbit && !_gifinfo.get_done)
        {
            // protect ourselve from the ( theoretically impossible )
            // case where between the last data block, the 2 bytes from
            // the block preceding that, and the potential 0xFF bytes in
            // the next block, we overflow the buffer.
            // Since count should always be 1,
            Assert(count == 1);
            // there should be enough room in the buffer, so long as someone
            // doesn't shrink it.
            if (count + 0x101 >= sizeof(_gifinfo.buf))
            {
                Assert(FALSE);
                return -1;
            }

            if ((count = GetDataBlock(&buf[2 + count])) == 0)
                _gifinfo.get_done = TRUE;
            if (count < 0)
            {
                return -1;
            }
            _gifinfo.last_byte += count;
            _gifinfo.lastbit = _gifinfo.last_byte * 8;

            end = _gifinfo.curbit + code_size;
        }
    }

    j = end / 8;
    i = _gifinfo.curbit / 8;

    if (i == j)
        ret = buf[i];
    else if (i + 1 == j)
        ret = buf[i] | (((long) buf[i + 1]) << 8);
    else
        ret = buf[i] | (((long) buf[i + 1]) << 8) | (((long) buf[i + 2]) << 16);

    ret = (ret >> (_gifinfo.curbit % 8)) & maskTbl[code_size];

    _gifinfo.curbit += code_size;

    return ret;
}

// Grows the stack and returns the top of the stack.
unsigned short *
CImgTaskGif::growStack()
{
    long index;
    unsigned short *lp;

    if (_gifinfo.stacksize >= MAX_STACK_SIZE)
        return 0;

    index = (_gifinfo.sp - _gifinfo.pstack);
    if (MemRealloc(Mt(CImgTaskGifStack), (void **)&_gifinfo.pstack, (_gifinfo.stacksize)*2*sizeof(unsigned short)))
        return 0;

    _gifinfo.sp = &(_gifinfo.pstack[index]);
    _gifinfo.stacksize = (_gifinfo.stacksize)*2;
    lp = &(_gifinfo.pstack[_gifinfo.stacksize]);
    return lp;
}

BOOL
CImgTaskGif::growTables()
{
    if (MemRealloc(Mt(CImgTaskGifTable0), (void **)&_gifinfo.table[0], (_gifinfo.max_code_size)*sizeof(unsigned short)))
        return FALSE;

    if (MemRealloc(Mt(CImgTaskGifTable1), (void **)&_gifinfo.table[1], (_gifinfo.max_code_size)*sizeof(unsigned short)))
        return FALSE;

    return TRUE;
}

inline
long CImgTaskGif::readLWZ()
{
    return((_gifinfo.sp > _gifinfo.pstack) ? *--(_gifinfo.sp) : nextLWZ());
}

#define CODE_MASK 0xffff

long CImgTaskGif::nextLWZ()
{
    long code, incode;
    unsigned short usi;
    unsigned short *table0 = _gifinfo.table[0];
    unsigned short *table1 = _gifinfo.table[1];
    unsigned short *pstacktop = &(_gifinfo.pstack[_gifinfo.stacksize]);

    while ((code = nextCode(_gifinfo.code_size)) >= 0)
    {
        if (code == _gifinfo.clear_code)
        {

            /* corrupt GIFs can make this happen */
            if (_gifinfo.clear_code >= (1 << MAX_LWZ_BITS))
            {
                return -2;
            }


            _gifinfo.code_size = _gifinfo.set_code_size + 1;
            _gifinfo.max_code_size = 2 * _gifinfo.clear_code;
            _gifinfo.max_code = _gifinfo.clear_code + 2;

            if(!growTables())
                return -2;

            table0 = _gifinfo.table[0];
            table1 = _gifinfo.table[1];

            _gifinfo.tablesize = _gifinfo.max_code_size;


            for (usi = 0; usi < _gifinfo.clear_code; ++usi)
            {
                table1[usi] = usi;
            }
            memset(table0,0,sizeof(unsigned short )*(_gifinfo.tablesize));
            memset(&table1[_gifinfo.clear_code],0,sizeof(unsigned short)*((_gifinfo.tablesize)-_gifinfo.clear_code));
            _gifinfo.sp = _gifinfo.pstack;
            do
            {
                _gifinfo.firstcode = _gifinfo.oldcode = nextCode(_gifinfo.code_size);
            }
            while (_gifinfo.firstcode == _gifinfo.clear_code);

            return _gifinfo.firstcode;
        }
        if (code == _gifinfo.end_code)
        {
            long count;
            unsigned char buf[260];

            if (_gifinfo.ZeroDataBlock)
            {
                return -2;
            }

            while ((count = GetDataBlock(buf)) > 0)
                ;

            if (count != 0)
            return -2;
        }

        incode = code;

        if (code >= MAX_TABLE_SIZE)
            return -2;
        
        if (code >= _gifinfo.max_code)
        {
            if (_gifinfo.sp >= pstacktop){
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(_gifinfo.sp)++ = (unsigned short)((CODE_MASK ) & (_gifinfo.firstcode));
            code = _gifinfo.oldcode;
        }

        while (code >= _gifinfo.clear_code)
        {
            if (_gifinfo.sp >= pstacktop){
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(_gifinfo.sp)++ = table1[code];
            if (code == (long)(table0[code]))
            {
                return (code);
            }
            code = (long)(table0[code]);
        }

        if (_gifinfo.sp >= pstacktop){
            pstacktop = growStack();
            if(pstacktop == 0)
                return -2;
        }
        _gifinfo.firstcode = (long)table1[code];
        *(_gifinfo.sp)++ = table1[code];

        if ((code = _gifinfo.max_code) < (1 << MAX_LWZ_BITS))
        {
            table0[code] = (_gifinfo.oldcode) & CODE_MASK;
            table1[code] = (_gifinfo.firstcode) & CODE_MASK;
            ++_gifinfo.max_code;
            if ((_gifinfo.max_code >= _gifinfo.max_code_size) && (_gifinfo.max_code_size < ((1 << MAX_LWZ_BITS))))
            {
                _gifinfo.max_code_size *= 2;
                ++_gifinfo.code_size;
                if(!growTables())
                    return -2;

                table0 = _gifinfo.table[0];
                table1 = _gifinfo.table[1];

                // Tables have been reallocated to the correct size but initialization
                // still remains to be done. This initialization is different from
                // the first time initialization of these tables.
                memset(&(table0[_gifinfo.tablesize]),0,
                        sizeof(unsigned short )*(_gifinfo.max_code_size - _gifinfo.tablesize));

                memset(&(table1[_gifinfo.tablesize]),0,
                        sizeof(unsigned short )*(_gifinfo.max_code_size - _gifinfo.tablesize));

                _gifinfo.tablesize = (_gifinfo.max_code_size);


            }
        }

        _gifinfo.oldcode = incode;

        if (_gifinfo.sp > _gifinfo.pstack)
            return ((long)(*--(_gifinfo.sp)));
    }
    return code;
}

void
CImgTaskGif::OnProg(BOOL fLast, ULONG ulCoversImg)
{
    BOOL fInvalAll;

    CalculateUpdateRect(_yLogRow - PROG_INTERVAL + 1, _yLogRow, &fInvalAll, &_yBot);

    if (fLast || (GetTickCount() - _dwTickProg > 1000))
    {
#ifndef _MAC
        ProgressiveDithering(_yLogRowDraw, _yLogRow);
#endif
        _yLogRowDraw = _yLogRow;
    }

    super::OnProg(fLast, ulCoversImg, fInvalAll, _yBot);
}


#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

BOOL
CImgTaskGif::ReadScanline(unsigned char *pb, int cb)
{
    int i;
    long b;

    for (i = cb; --i >= 0;)
    {
        b = readLWZ();
        if (b < 0)
            return FALSE;
        *pb++ = (unsigned char)b;
    }
    return TRUE;
}

#pragma optimize("", on)

#ifdef WIN16
#undef FillMemory
#define FillMemory( _pv, _cb, ch) hmemset( (_pv), ch, (_cb) )
#endif

CImgBitsDIB *
CImgTaskGif::ReadImage(long len, long height, BOOL fInterlace, BOOL fGIFFrame,
    int cpeColors, PALETTEENTRY * ppeColors, HLPBYTE * ppbBits, long lTrans)
{
    unsigned char c;
    long ypos = 0;
    long padlen = ((len + 3) / 4) * 4;
    char buf[256]; // need a buffer to read trailing blocks ( up to terminator ) into
    ULONG ulCoversImg = IMGBITS_PARTIAL;
    HLPBYTE pbBits;
    BOOL fAbort = FALSE;
    HRESULT hr;
    CImgBitsDIB *pibd = NULL;
    BOOL fColorTable;
    

    /*
       **  Initialize the Compression routines
     */
    if (!ReadByte(&c))
    {
        goto abort;
    }

    _cbImage = padlen * height * sizeof(char);

    if (_cbImage > dwMaxGIFBits)
       goto abort;

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto abort;

    // don't bother with allocating a color table if we're going to dither
    // to our standard palette
    
    fColorTable = (_colorMode != 8 || _pImgInfo->TstFlags(DWNF_RAWIMAGE));

    if (!fColorTable)
    {
        hr = THR(pibd->AllocDIB(8, len, height, NULL, 0, -1, lTrans == -1));
        if (hr)
            goto abort;
    }
    else
    {
        RGBQUAD argbTable[256];

        if (cpeColors > 256)
            cpeColors = 256;
            
        CopyColorsFromPaletteEntries(argbTable, ppeColors, cpeColors);
        
        hr = THR(pibd->AllocDIB(8, len, height, argbTable, cpeColors, lTrans, lTrans == -1));
        if (hr)
            goto abort;
    }

    pbBits = (BYTE *)pibd->GetBits();

    if (!fGIFFrame)
    {
        _pImgBits = pibd;
        _gad.pgf->pibd = pibd;
        _pbDst = pbBits;

        if (fInterlace && _colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        {
            _pbSrcAlloc = (HLPBYTE) MemAlloc(Mt(CImgTaskGifBits), _cbImage);
            if (_pbSrcAlloc == NULL)
                goto abort;
            _pbSrc = _pbSrcAlloc;
            pbBits = _pbSrc;
        }
        else
        {
            _pbSrc = pbBits;
        }
    }

 #ifndef _MAC
   if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
    {
        int nDifferent;

        nDifferent = x_ComputeConstrainMap(cpeColors, ppeColors, lTrans, _mapConstrained);

        if (_pImgInfo->TstFlags(DWNF_FORCEDITHER)
            ||  (cpeColors > 16 && nDifferent > 15))
            _fDither = TRUE;
        else
            TraceTag((tagImgTaskGif, "No dithering needed for '%ls'", GetUrl()));
    }
#endif // _MAC

    if (c == 1)
    {
        // Netscape seems to field these bogus GIFs by filling treating them
        // as transparent. While not the optimal way to simulate this effect,
        // we'll fake it by pushing the initial code size up to a safe value,
        // consuming the input, and returning a buffer full of the transparent
        // color or zero, if no transparency is indicated.
        if (initLWZ(MINIMUM_CODE_SIZE))
            while (readLWZ() >= 0);

        if (lTrans != -1)
            FillMemory(_pbSrc, _cbImage, lTrans);
        else // fall back on the background color
            FillMemory(_pbSrc, _cbImage, 0);

        if (!fGIFFrame)
        {
            _yLogRow = height - 1;
            OnProg(TRUE, IMGBITS_TOTAL);
        }

        goto done;
    }


    if (initLWZ(c) == FALSE)
        goto abort;

    if (fInterlace)
    {
        long i;
        long pass = 0, step = 8;

        if (!fGIFFrame && (height > 4))
            _fInterleaved = TRUE;

        for (i = 0; i < height; i++)
        {
//          XX_DMsg(DBG_IMAGE, ("readimage, logical=%d, offset=%d\n", i, padlen * ((height-1) - ypos)));
            if (    fAbort
#ifdef _MAC
                ||  !ReadScanline(&pbBits[padlen * ypos], len))
#else
                ||  !ReadScanline(&pbBits[padlen * ((height-1) - ypos)], len))
#endif
            {
            #if DBG==1 || defined(PERFTAGS)
                if (IsPerfDbgEnabled(tagImgTaskGifAbort))
                {
                    fAbort = TRUE;
                    memset(&pbBits[padlen * ((height-1) - ypos)], 0, len);
                }
                else
            #endif
                    break;
            }

            ypos += step;
            while (ypos >= height)
            {
                if (pass++ > 0)
                    step /= 2;
                ypos = step / 2;
                if (!fGIFFrame && pass == 1)
                {
                    ulCoversImg = IMGBITS_TOTAL;
                }
            }
            if (!fGIFFrame)
            {
                _yLogRow = i;

                if ((i & PROG_INTERVAL) == 0)
                {
                    // Post ProgDraw (IE code has delay-logic)
                    OnProg(FALSE, ulCoversImg);
                }
            }
        }

        if (!fGIFFrame)
        {
            OnProg(TRUE, IMGBITS_TOTAL);
        }
    }
    else
    {
#ifdef _MAC
        for (ypos = 0; ypos < height; ypos++)
#else
        for (ypos = height-1; ypos >= 0; ypos--)
#endif
        {
            if (!ReadScanline(&pbBits[padlen * ypos], len))
                break;

            if (!fGIFFrame)
            {
                _yLogRow++;
//              XX_DMsg(DBG_IMAGE, ("readimage, logical=%d, offset=%d\n", _yLogRow, padlen * ypos));
                if ((_yLogRow & PROG_INTERVAL) == 0)
                {
                    // Post ProgDraw (IE code has delay-logic)
                    OnProg(FALSE, IMGBITS_PARTIAL);
                }
            }
        }

        if (!fGIFFrame)
        {
            OnProg(TRUE, IMGBITS_TOTAL);
        }
    }

    // consume blocks up to image block terminator so we can proceed to the next image
    while (GetDataBlock((unsigned char *) buf) > 0)
                ;

done:
    *ppbBits = pbBits;

    return (pibd);

abort:
    delete pibd;
    
    return NULL;
}


void
CImgTaskGif::ProgressiveDithering(int logicalFill, int logicalRow)
{
    BOOL bitbltNeeded = TRUE;
    int i;
    // Note: We only show the primary frame during prog draw, so we use the first GIFFRAME
    int padXSize;
    int row = logicalRow;
    int pass;
    int band;
    int band2;
    long offset;
    int passFill;
    int rowFill;
    int bandFill;
    int step;
    int j;

    if (logicalFill < 0)
        logicalFill = 0;

    if (_fDither && _pvDithData == NULL)
    {
        _pvDithData = pCreateDitherData(_gad.pgf->width);
        if (_pvDithData == NULL)
            return;
    }

    padXSize = ((_gad.pgf->width + 3) / 4) * 4;

    if (_fInterleaved)
    {
        getPassInfo(logicalFill,_gad.pgf->height,&passFill,&rowFill,&bandFill);
        getPassInfo(logicalRow,_gad.pgf->height,&pass,&row,&band);
        step = passFill == 0 ? 8 : bandFill*2;
        for (i = logicalFill; i <= logicalRow;i++)
        {
            offset = (long)padXSize*(long)(_gad.pgf->height - rowFill - 1) ;    /* the DIB is stored upside down */

            band2 = rowFill <= row ? band : band*2;
            if (band2 != 1)
            {
                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
                {
                    x_ColorConstrain(_pbSrc+offset,
                                     _pbDst+offset,
                                     _mapConstrained,
                                     _gad.pgf->width);
                }
                else
                    hmemcpy(_pbDst+offset,_pbSrc+offset,padXSize);
                if (rowFill+band2 > _gad.pgf->height)
                    band2 = _gad.pgf->height-rowFill;

                for (j = 1; j < band2; j++)
                    hmemcpy(_pbDst+(offset-j*padXSize),_pbDst+offset,padXSize);

                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
                {
                    _gad.pgf->pibd->ComputeTransMask(rowFill, band2, g_wIdxTrans, 255);
                }
            }

            if ((rowFill += step) >= _gad.pgf->height)
            {
                if (passFill++ > 0)
                    step /= 2;
                rowFill = step / 2;
            }

        }
        switch (pass)
        {
            case 0:
                band += row;
                break;
            case 3:
                band = _gad.pgf->height-row-1;
                break;
            default:
                band = _gad.pgf->height;
                break;
        }
        if (band > _gad.pgf->height)
            band = _gad.pgf->height;

        if (band > 0)
        {
            bitbltNeeded = (pass == 3);
        }
        if (bitbltNeeded)
        {
            if ((row >= _gad.pgf->height) ||
                (logicalRow == _gad.pgf->height - 1))
                row = _gad.pgf->height - 1;
        }
    }

    if (bitbltNeeded)
    {
        band = row + 1;
        if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        {
            if (_yDithRow <= row)
            {
                if (_fDither)
                {
                    x_DitherRelative(_pbSrc,
                                     _pbDst,
                                     _apeFirst,
                                     _gad.pgf->width,
                                     _gad.pgf->height,
                                     (_gad.pgf->bTransFlags & TRANSF_TRANSPARENT) ? _gifinfo.Gif89.transparent : -1,
                                     (int *)_pvDithData,
                                     _yDithRow,
                                     row);
                }
                else
                {
                    ULONG cb = (long)padXSize * (long)(_gad.pgf->height - row - 1);
                    x_ColorConstrain(_pbSrc + cb, _pbDst + cb, _mapConstrained,
                        padXSize * (row - _yDithRow + 1));
                }

                _gad.pgf->pibd->ComputeTransMask(_yDithRow, row - _yDithRow + 1, g_wIdxTrans, 255);
                _yDithRow = band;
            }
        }
    }
}

void CImgTaskGif::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    int ySrcBot;

    if (_yLogRowDraw < 0 || _gad.pgf == NULL)
        return;

    if (_fInterleaved)
        ySrcBot = min(_yHei, (_yLogRowDraw + 1L) * 8L);
    else
        ySrcBot = _yLogRowDraw + 1;

    if (_gad.pgf->pibd)
    {
        _gad.pgf->pibd->SetValidLines(ySrcBot);

        _gad.pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, _gad.pgf->left, _gad.pgf->top, dwRop, dwFlags);
    }
}

void
CImgTaskGif::CalculateUpdateRect(int logicalRow0, int logicalRowN, BOOL *pfInvalidateAll, LONG *pyBottom)
{
    *pfInvalidateAll = FALSE;

    if (logicalRowN == 0)
    {
        *pyBottom = 0;
        return;
    }

    if (_gad.pgf)
    {
        logicalRow0 += _gad.pgf->top;
        logicalRowN += _gad.pgf->top;
    }

    if (_fInterleaved)
    {
        int pass0, passN;
        int row0, rowN;
        int band0, bandN;

        getPassInfo(logicalRow0, _yHei, &pass0, &row0, &band0);
        getPassInfo(logicalRowN, _yHei, &passN, &rowN, &bandN);

        if (passN > pass0 + 1)
            *pfInvalidateAll = TRUE;

        *pyBottom = rowN + bandN;

        // We must special case the last row of last pass to deal with dithering
        // the possibly even numbered last row
        if (logicalRowN == _yHei - 1)
            *pyBottom = _yHei;
    }
    else
        *pyBottom = logicalRowN + 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgico.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgico.cxx
//
//  Contents:   Image filter for .ico files
//
//  Created by: dli on 06/12/98
//
//-------------------------------------------------------------------------
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

MtDefine(CImgTaskIcon, Dwn, "CImgTaskIcon")
MtDefine(CImgTaskIconBmih, CImgTaskIcon, "CImgTaskIcon::_pbmih")
MtDefine(CImgTaskIconJunk, CImgTaskIcon, "CImgTaskIcon::bJunk")

// The following data structures are standard icon file structures
typedef struct tagICONDIRENTRY
{
    BYTE    cx;
    BYTE    cy;
    BYTE    nColors;
    BYTE    iUnused;
    WORD    xHotSpot;
    WORD    yHotSpot;
    DWORD   cbDIB;
    DWORD   offsetDIB;
} ICONDIRENTRY;

typedef struct tagICONDIR
{
    WORD iReserved;
    WORD iResourceType;
    WORD cresIcons;
} ICONDIR;

// decoder for icons
class CImgTaskIcon : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskIcon))

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // Data members
    RGBQUAD          *  _pargb;
    BYTE *              _pbBitsXOR;
    BYTE *              _pbBitsAND;
    UINT                _ncolors;
    BITMAPINFOHEADER *  _pbmih;
};

void CImgTaskIcon::Decode(BOOL *pfNonProgressive)
{
    ICONDIR icondir = {0};
    ICONDIRENTRY icoentry = {0};
    BOOL    fDither = FALSE;
    BOOL    fSuccess = FALSE;
    HDC     hdcDib = NULL;
    HDC     hdcMask = NULL;
    int     iIco = 0;
    CImgBitsDIB *pibd = NULL;
    HRESULT hr;

    *pfNonProgressive = TRUE;

    // Read in the icon file header (ICONDIR)
#ifndef UNIX
    if (!Read((BYTE *)&icondir, sizeof(icondir)))
#else
    // IEUNIX: Because of alignment problem, we need to read as following.
    if(!Read((BYTE *)&icondir.iReserved, 3 * sizeof(WORD)))
#endif
        goto Cleanup;

    // If this is not a standard icon, bail
    if ((icondir.iReserved !=0) || (icondir.iResourceType != IMAGE_ICON) || (icondir.cresIcons < 1))
        goto Cleanup;

    // TODO: add logic here to figure out which icon we should load, Trident
    // needs to communicate with us on the size and color depth of the icon intended
    // For now, load the first icon in the .ico file.
    
    //for (iIco = 0; iIco < icondir.cresIcons; iIco++)
    //{           
    if (!Read((BYTE *)&icoentry, sizeof(icoentry)))
        goto Cleanup;
    //if (iIco == 5)
    //break;
    //}
    
    // if ((icoentry.bWidth == width_we_want) && (icoentry.bColorCount == color_count_we_want))
    //     break;
    //}
    // if (iIco == icondir.cresIcons)
    //    goto Cleanup;


    _xWid = icoentry.cx;
    _yHei = icoentry.cy;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, -1 /* lTrans */);

    // NOTE: This is just doing a seek. There is got to be a better way!!!!! 
    if (sizeof(icondir) + sizeof(icoentry) * (iIco+1) < icoentry.offsetDIB)
    {
        BOOL fReadSuccess = FALSE;
        DWORD cbJunkSize = icoentry.offsetDIB - sizeof(icondir) - sizeof(icoentry) * (iIco+1);
        BYTE * bJunk = (BYTE *) MemAlloc(Mt(CImgTaskIconJunk), cbJunkSize);
        if (NULL == bJunk)
            goto Cleanup;
        fReadSuccess = Read(bJunk, cbJunkSize);
        MemFree(bJunk);
        if (!fReadSuccess)
            goto Cleanup;
    }

    // allocate BITMAPINFO header and color table 
    _pbmih = (BITMAPINFOHEADER *)MemAlloc(Mt(CImgTaskIconBmih), sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD));
    if (!_pbmih)
        goto Cleanup;

    // point to the color table
    _pargb = (RGBQUAD *)((BYTE *)_pbmih + sizeof(BITMAPINFOHEADER));

    // read BITMAPINFOHEADER and make sure the size is correct
    if (!Read((BYTE *)_pbmih, sizeof(BITMAPINFOHEADER)) || (_pbmih->biSize != sizeof(BITMAPINFOHEADER)))
        goto Cleanup;

    // bail if it's not 1 plane
    if (_pbmih->biPlanes != 1)
        goto Cleanup;

    // check possible bit counts 
    if (    _pbmih->biBitCount != 1
        &&  _pbmih->biBitCount != 4
        &&  _pbmih->biBitCount != 8
        &&  _pbmih->biBitCount != 16
        &&  _pbmih->biBitCount != 24
        &&  _pbmih->biBitCount != 32)
        goto Cleanup;

    // number of colors
    _ncolors = 0;
    if (_pbmih->biBitCount <= 8)        
        _ncolors = 1 << _pbmih->biBitCount;

    if ((_ncolors > 0) && !Read((BYTE *)_pargb, _ncolors * sizeof(RGBQUAD)))
        goto Cleanup;

    if (_ncolors > 0)
        CopyPaletteEntriesFromColors(_ape, _pargb, _ncolors);
    
    if (_colorMode == 8 && _pbmih->biBitCount == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        fDither = TRUE;

    // _pbmih->biHeight is the sum of heights of the two bitmaps
    // and in an ICO file the two bitmaps namely the color and mask
    // must have the same dimension so
    // _pbmih->biHeight must be twice of _yHei
    Assert(_pbmih->biHeight == 2 * _yHei);
    _pbmih->biHeight = _yHei;

    // create the CImgBitDib Object
    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    _pImgBits = pibd;
    hr = THR(pibd->AllocDIBSectionFromInfo((BITMAPINFO *)_pbmih, fDither));
    if (hr)
        goto Cleanup;

    _pbBitsXOR = (BYTE *)pibd->GetBits();
    
    // read in the XOR bitmap bits
    if (!Read(_pbBitsXOR, pibd->CbLine() * _yHei))
        goto Cleanup;

    hr = THR(pibd->AllocMask());
    if (hr)
        goto Cleanup;

    _pbBitsAND = (BYTE *)pibd->GetMaskBits();
    // read in the AND bits
    if (!Read(_pbBitsAND, pibd->CbLineMask() * _yHei))
        goto Cleanup;

    // make sure  the total bits we read in is the same as the total size
    // of this icon resource
    // TODO: somehow the icoentry.cbDIB is always bigger ???
    // Assert((DWORD)((cbRowXOR+cbRowAND) * _yHei + sizeof(ICONDIRENTRY) +
    //               _ncolors * sizeof(RGBQUAD)) == icoentry.cbDIB);
    
    // Convert hbmXOR and hbmAND to format Trident recognize 
    hdcDib = CreateCompatibleDC(NULL);
    if (hdcDib)
    {
        hdcMask = CreateCompatibleDC(NULL);
        if (hdcMask)
        {
            HBITMAP hDibOld = SelectBitmap(hdcDib, pibd->GetHbm());
            HBITMAP hMaskOld = SelectBitmap(hdcMask, pibd->GetHbmMask());
            
            // OR _hbmMask onto _hbmDib.  This will make the transparent pixels white.
            BitBlt(hdcDib, 0, 0, _xWid, _yHei, hdcMask, 0, 0, SRCPAINT);

            // invert _hbmMask (0->1, 1->0) so that 0 pixels are transparent and 1 pixels are opaque
            BitBlt(hdcMask, 0, 0, _xWid, _yHei, hdcMask, 0, 0, DSTINVERT);
            
            SelectBitmap(hdcDib, hDibOld);
            SelectBitmap(hdcMask, hMaskOld);
        }
    }

    if (fDither)
    {
        HDC hdcMem;
        HBITMAP hbmSav;
        
        if (x_Dither(_pbBitsXOR, _ape, _xWid, _yHei, _lTrans))
            goto Cleanup;

        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = SelectBitmap(hdcMem, pibd->GetHbm());

        SetDIBColorTable(hdcMem, 0, 256, g_rgbHalftone);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);
    }

    _ySrcBot = -1;

    fSuccess = TRUE;

Cleanup:
    if (hdcDib)
        DeleteDC(hdcDib);

    if (hdcMask)
        DeleteDC(hdcMask);

    MemFree(_pbmih);
    
    if (!fSuccess)
    {
        delete _pImgBits;
        _pImgBits = NULL;
        _pbBitsXOR = NULL;
        _pbBitsAND = NULL;
    }

}

CImgTask * NewImgTaskIco()
{
    return(new CImgTaskIcon);
}

#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgctx.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       imgctx.cxx
//
//  Contents:   CImgCtx
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

// Debugging ------------------------------------------------------------------

DeclareTag(tagNoPreTile, "DocBack", "No Pre-Tile");
MtDefine(CImgCtx, Dwn, "CImgCtx")

// Definitions ----------------------------------------------------------------

#define PRETILE_AREA      (16 * 1024)

// CImgCtx --------------------------------------------------------------------

CImgCtx::CImgCtx()
{
    _yTop = -1;
}

// CImgCtx (IUnknown) ---------------------------------------------------------

STDMETHODIMP
CImgCtx::QueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IImgCtx || riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        ((LPUNKNOWN)*ppv)->AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
}

STDMETHODIMP_(ULONG)
CImgCtx::AddRef()
{
    return(super::AddRef());
}

STDMETHODIMP_(ULONG)
CImgCtx::Release()
{
    return(super::Release());
}

// CImgCtx (IImgCtx) ----------------------------------------------------------

STDMETHODIMP
CImgCtx::Load(LPCWSTR pszUrl, DWORD dwFlags)
{
    CDwnDoc *   pDwnDoc  = NULL;
    CDwnInfo *  pDwnInfo = NULL;
    DWORD       dwBindf  = 0;
    DWNLOADINFO dli      = { 0 };
    HRESULT     hr;

    pDwnDoc = new CDwnDoc;

    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if ((dwFlags & DWNF_COLORMODE) == 0)
    {
        dwFlags |= GetDefaultColorMode();
    }

    dli.pDwnDoc   = pDwnDoc;
    dli.pInetSess = TlsGetInternetSession();
    dli.pchUrl    = pszUrl;

    pDwnDoc->SetRefresh(IncrementLcl());

    // This is a bit of a hack to allow our performance measurements to
    // be able to disable WinInet write caching when using IImgCtx.  We
    // don't expect anyone to really do this in the real world, but it
    // doesn't do any harm if they do.

    if (dwFlags & 0x80000000)
    {
        dwBindf |= BINDF_NOWRITECACHE;
    }

    if (dwFlags & 0x40000000)
    {
        dwBindf |= BINDF_GETNEWESTVERSION;
    }

    pDwnDoc->SetBindf(dwBindf);
    pDwnDoc->SetDocBindf(dwBindf); // (should be irrelevant)
    pDwnDoc->SetDownf(dwFlags & ~DWNF_STATE | DWNF_NOOPTIMIZE);

    hr = THR(CDwnInfo::Create(DWNCTX_IMG, &dli, &pDwnInfo));
    if (hr)
        goto Cleanup;

    pDwnInfo->AddDwnCtx(this);

    SetLoad(TRUE, &dli, FALSE);

Cleanup:
    if (pDwnInfo)
        pDwnInfo->Release();
    if (pDwnDoc)
        pDwnDoc->Release();

    RRETURN(hr);
}

STDMETHODIMP
CImgCtx::SelectChanges(ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal)
{
    WORD wNewChg = 0;

    EnterCriticalSection();

    _wChgReq &= (WORD)~ulChgOff;

    if (fSignal)
    {
        DWORD dwState = GetImgInfo()->GetFlags(DWNF_STATE);

        if (    (GetImgInfo()->_xWid || GetImgInfo()->_yHei)
            &&  !(_wChgReq & IMGCHG_SIZE)
            &&  (ulChgOn & IMGCHG_SIZE))
        {
            wNewChg |= IMGCHG_SIZE;
        }

        if (    (dwState & (IMGLOAD_COMPLETE | IMGLOAD_ERROR | IMGLOAD_STOPPED))
            &&  !(_wChgReq & IMGCHG_COMPLETE)
            &&  (ulChgOn & IMGCHG_COMPLETE))
        {
            wNewChg |= IMGCHG_COMPLETE;
        }

        if (    (dwState & IMGLOAD_COMPLETE)
            &&  !(_wChgReq & IMGCHG_VIEW)
            &&  (ulChgOn & IMGCHG_VIEW))
        {
            wNewChg |= IMGCHG_VIEW;
        }

        if (    (dwState & IMGANIM_ANIMATED)
            &&  !(_wChgReq & IMGCHG_ANIMATE)
            &&  (ulChgOn & IMGCHG_ANIMATE))
        {
            wNewChg |= IMGCHG_ANIMATE;
        }
    }

    _wChgReq |= (WORD)ulChgOn;
    
    if (wNewChg)
    {
        super::Signal(wNewChg);
    }

    LeaveCriticalSection();

    return(S_OK);
}

STDMETHODIMP
CImgCtx::SetCallback(PFNIMGCTXCALLBACK pfn, void * pvPrivateData)
{
    super::SetCallback(pfn, pvPrivateData);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Disconnect()
{
    super::Disconnect();
    return(S_OK);
}

STDMETHODIMP
CImgCtx::GetUpdateRects(RECT *prc, RECT *prectImg, LONG *pcrc)
{
    int logicalRow0;
    int logicalRowN;
    RECT updateRect;
    int nDestLogicalRow0, nDestLogicalRowN;
    int nDestHeight = prectImg->bottom - prectImg->top;
    int height = GetImgInfo()->_yHei;
    int nrc = 0;

    if (_yTop == -1)
    {
        prc[nrc++] = *prectImg;
        goto exit;
    }
    else
    {
        logicalRow0 = _yTop;
        logicalRowN = _yBot;
    }

    if ((_yTop == _yBot) || (height == 0)) {
        *pcrc = 0;
        return S_OK;
    }

    nDestLogicalRow0 = (int) (((long) logicalRow0 * nDestHeight) / height);
    nDestLogicalRowN = (int) (((long) logicalRowN * nDestHeight) / height);
    if (nDestLogicalRow0 != 0 && (((long) logicalRow0 * nDestHeight) % height) )
        nDestLogicalRow0--;
    if ((((long) logicalRowN * nDestHeight) % height))
        nDestLogicalRowN++;
    updateRect.left = prectImg->left;
    updateRect.right = prectImg->right;

    if (_yBot > _yTop)
    {
        updateRect.top  = prectImg->top + nDestLogicalRow0;
        updateRect.bottom = prectImg->top + nDestLogicalRowN + 1; 
        if (updateRect.bottom > prectImg->bottom)
            updateRect.bottom = prectImg->bottom;
        prc[nrc++] = updateRect;
    }
    else
    {
        updateRect.top = prectImg->top + nDestLogicalRow0;
        updateRect.bottom = prectImg->bottom;
        prc[nrc++] = updateRect;

        updateRect.top = prectImg->top;
        updateRect.bottom = prectImg->top + nDestLogicalRowN + 1;
        prc[nrc++] = updateRect;
    }

exit:
    _yTop = _yBot;
    *pcrc = nrc;
    return S_OK;
}


STDMETHODIMP
CImgCtx::GetStateInfo(ULONG *pulState, SIZE *psize, BOOL fClear)
{
    *pulState = GetState(fClear, psize);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::GetPalette(HPALETTE *phpal)
{
    if (phpal == NULL)
    {
        return(E_INVALIDARG);
    }

    *phpal = g_hpalHalftone;
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Draw(const XHDC& hdc, RECT * prcDst)
{
    GetImgInfo()->DrawImage(hdc, prcDst, NULL, SRCCOPY, DRAWIMAGE_NHPALETTE);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Tile(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint)
{
    Tile(hdc, pptOrg, prc, psizePrint, COLORREF_NONE, NULL, DRAWIMAGE_NHPALETTE);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::StretchBlt(const XHDC& hdc, int dstX, int dstY, int dstXE, int dstYE, int srcX, int srcY, int srcXE, int srcYE, DWORD dwROP)
{
    RECT rcSrc, rcDest;

    if (dstXE < 0 || dstYE < 0)
        return E_FAIL;
        
    rcSrc.left = srcX;
    rcSrc.top = srcY;
    rcSrc.right = srcX + srcXE;
    rcSrc.bottom = srcY + srcYE;

    rcDest.left = dstX;
    rcDest.top = dstY;
    rcDest.right = dstX + dstXE;
    rcDest.bottom = dstY + dstYE;

    return GetImgInfo()->DrawImage(hdc, &rcDest, &rcSrc, dwROP, DRAWIMAGE_NHPALETTE);
}

HRESULT
CImgCtx::DrawEx(const XHDC& hdc, RECT * prcDst, DWORD dwFlags)
{
    GetImgInfo()->DrawImage(hdc, prcDst, NULL, SRCCOPY, dwFlags);
    return(S_OK);
}


// CImgCtx (Animation) --------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Member:     CImgCtx::InitImgAnimState
//
//-------------------------------------------------------------------------
void CImgCtx::InitImgAnimState(IMGANIMSTATE * pImgAnimState)
{
    GetImgInfo()->InitImgAnimState(pImgAnimState);
}

BOOL CImgCtx::NextFrame(IMGANIMSTATE *pImgAnimState, DWORD dwCurTimeMS, DWORD *pdwFrameTimeMS)
{
    return GetImgInfo()->NextFrame(pImgAnimState, dwCurTimeMS, pdwFrameTimeMS);
}

//+------------------------------------------------------------------------
//
//  Member:     CImgCtx::DrawFrame
//
//  Synopsis:   
//
//-------------------------------------------------------------------------

void CImgCtx::DrawFrame(const XHDC& hdc, IMGANIMSTATE * pImgAnimState, RECT * prcDst,
    RECT * prcSrc, RECT *prcDstFull, DWORD dwFlags)
{
    GetImgInfo()->DrawFrame(hdc, pImgAnimState, prcDst, prcSrc, prcDstFull, dwFlags);
}

// CImgCtx (Public) -----------------------------------------------------------

void
CImgCtx::TileEx(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint,
    COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags, BOOL fForVertical, 
    const CSize & sizeLayout, const CSize & sizeImg, XHDC * phdcInfo)
{
    if (fForVertical)
    {
        Assert(hdc.pSurface());

        // Transform origin point and cliping rectangele from logical
        // coordinate system to physical coordinate system
        CPoint ptOrg(sizeLayout.cy - pptOrg->y - sizeImg.cx, 
                     pptOrg->x);
        CRect rc;
        rc.left   = sizeLayout.cy - prc->bottom;
        rc.right  = rc.left + ((CRect *)prc)->Height();
        rc.top    = prc->left;
        rc.bottom = rc.top + ((CRect *)prc)->Width();

        // We don't rotate background images, so undo HDC transformations
        // related to vertical layoutness.
        CSize size(0, sizeLayout.cy);
        CDispClipTransform transformRestore;
        transformRestore.SetHugeClip();
        transformRestore.GetWorldTransform()->AddRotation(900);
        transformRestore.GetWorldTransform()->AddPostTranslation(size);

        CDispClipTransform transform(*((CDispSurface *)hdc.pSurface())->GetTransform());
        transform.AddPreTransform(transformRestore);

        CDispSurface * pSurface;
        pSurface = new CDispSurface(hdc.pSurface()->GetRawDC());
        if(pSurface)
        {
            pSurface->PrepareClientSurface(&transform);

            XHDC hdcImg(pSurface);

            Tile(hdcImg, &ptOrg, &rc, psizePrint, crBack, pImgAnimState, dwFlags, phdcInfo);
            delete pSurface;
        }
    }
    else
    {
        Tile(hdc, pptOrg, prc, psizePrint, crBack, pImgAnimState, dwFlags, phdcInfo);
    }
}

void
CImgCtx::Tile(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint,
    COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags,  XHDC * phdcInfo)
{
    BOOL fOpaque = !!(GetState() & IMGTRANS_OPAQUE);

    // If the source image is 1x1 just let the normal StretchBlt mechanism
    // fill up the destination.

    if (GetImgInfo()->_xWid == 1 && GetImgInfo()->_yHei == 1)
    {
        if (crBack != COLORREF_NONE)
        {
            PatBltBrush(hdc, prc, PATCOPY, crBack);
        }

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, prc, NULL, NULL, dwFlags);
        }
        else
        {
            GetImgInfo()->DrawImage(hdc, prc, NULL, SRCCOPY, dwFlags);
        }

        goto Cleanup;
    }

    // If the image is opaque and we are writing into an offscreen bitmap
    // which is not clipped, just tile directly into it.

    if (    psizePrint == NULL
        &&  (fOpaque || crBack != COLORREF_NONE)
        &&  GetObjectType(hdc) == OBJ_MEMDC
        &&  hdc.IsOffsetOnly())
    {
        GDIRECT rcBox;
        int iRgn = GetClipBox(hdc, &rcBox);

        if (    iRgn == NULLREGION
            ||  (   iRgn == SIMPLEREGION
                &&  prc->left >= rcBox.left
                &&  prc->top >= rcBox.top
                &&  prc->right <= rcBox.right
                &&  prc->bottom <= rcBox.bottom))
        {
            TileFast(hdc, prc, pptOrg->x, pptOrg->y, fOpaque, crBack, pImgAnimState, dwFlags);
            goto Cleanup;
        }
    }

    // Otherwise just tile the slow way (it may still decide to pretile)

    TileSlow(hdc, prc, pptOrg->x, pptOrg->y, psizePrint, fOpaque, crBack, pImgAnimState, dwFlags, phdcInfo);

Cleanup:
    ;
}

void
CImgCtx::TileFast(const XHDC& hdc, RECT * prc, LONG xDstOrg, LONG yDstOrg,
    BOOL fOpaque, COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags)
{
    LONG xDst    = prc->left;
    LONG yDst    = prc->top;
    LONG xDstWid = prc->right - xDst;
    LONG yDstHei = prc->bottom - yDst;
    LONG xSrcWid = GetImgInfo()->_xWid;
    LONG ySrcHei = GetImgInfo()->_yHei;
    LONG xWid, yHei, xSrcOrg, ySrcOrg;
    LONG xBltSrc, xBltSrcWid, xBltDst, xBltDstWid, xBltWid;
    LONG yBltSrc, yBltSrcHei, yBltDst, yBltDstHei, yBltHei;
    RECT rcSrc, rcDst, rcDstFull;
    HRESULT hr = S_OK;

    if (xSrcWid == 0 || ySrcHei == 0 || xDstWid == 0 || yDstHei == 0)
        return;

    if (!fOpaque && crBack != COLORREF_NONE)
    {
        PatBltBrush(hdc, prc, PATCOPY, crBack);
    }

    // Currently (xDstOrg,yDstOrg) define a point on the infinite plane of 
    // the hdc where the upper-left corner of the image should be aligned.
    // Here we convert this point into offsets from the upper-left corner
    // of the image where the first pixel will be drawn as defined by prc.
    // That is, what is the coordinate of the pixel in the image which
    // will be drawn at the location (xDst,yDst).

    xSrcOrg = abs(xDst - xDstOrg) % xSrcWid;
    if (xDst < xDstOrg && xSrcOrg > 0)
        xSrcOrg = xSrcWid - xSrcOrg;

    ySrcOrg = abs(yDst - yDstOrg) % ySrcHei;
    if (yDst < yDstOrg && ySrcOrg > 0)
        ySrcOrg = ySrcHei - ySrcOrg;

    // Now that we know how the tiling is going to start, we need to draw
    // the image onto the hdc up to four times in order to get a prototypical
    // image of size (xSrcWid,ySrcHei) which is rotated in both x and y
    // dimensions to the desired tiling alignment.  If either xOrg or yOrg is
    // zero, no rotation is necessary in that dimension.

    // The first block to draw starts at (xSrcOrg,ySrcOrg) inside the image.
    // Draw it at (xDst,yDst).

    xWid = min(xSrcWid - xSrcOrg, xDstWid);
    yHei = min(ySrcHei - ySrcOrg, yDstHei);

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left       = xSrcOrg;
        rcSrc.top        = ySrcOrg;
        rcDst.left       = xDst;
        rcDst.top        = yDst;
        rcDstFull.left   = xDst - xSrcOrg;
        rcDstFull.top    = yDst - ySrcOrg;
        rcSrc.right      = rcSrc.left + xWid;
        rcSrc.bottom     = rcSrc.top  + yHei;
        rcDst.right      = rcDst.left + xWid;
        rcDst.bottom     = rcDst.top  + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
        
    }

    // The second block has the same width, but is drawn directly below
    // the first and starts at (xSrcOrg,0) in the image.

    xWid = min(xSrcWid - xSrcOrg, xDstWid);
    yHei = min(ySrcOrg, yDstHei - (ySrcHei - ySrcOrg));

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = xSrcOrg;
        rcSrc.top    = 0;
        rcDst.left   = xDst;
        rcDst.top    = yDst + (ySrcHei - ySrcOrg);
        rcDstFull.left   = xDst - xSrcOrg;
        rcDstFull.top    = rcDst.top;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }
    
    // The third block has the same height as the first, but is draw directly
    // to the right of the first and starts at (0,ySrcOrg) inside the image.

    xWid = min(xSrcOrg, xDstWid - (xSrcWid - xSrcOrg));
    yHei = min(ySrcHei - ySrcOrg, yDstHei);

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = 0;
        rcSrc.top    = ySrcOrg;
        rcDst.left   = xDst + (xSrcWid - xSrcOrg);
        rcDst.top    = yDst;
        rcDstFull.left   = rcDst.left;
        rcDstFull.top    = yDst - ySrcOrg;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }

    // The fourth block has the same width as the third and the same height
    // as the second and starts at (0,0) inside the image.

    xWid = min(xSrcOrg, xDstWid - (xSrcWid - xSrcOrg));
    yHei = min(ySrcOrg, yDstHei - (ySrcHei - ySrcOrg));

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcDst.left   = xDst + (xSrcWid - xSrcOrg);
        rcDst.top    = yDst + (ySrcHei - ySrcOrg);
        rcDstFull.left   = rcDst.left;
        rcDstFull.top    = rcDst.top;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }

    // At this point we've draw the entire source image into the destination
    // at the correct tiling alignment.  Now we want to duplicate this
    // copy horizontally to fill the entire xDstWid.

    yHei = min(ySrcHei, yDstHei);

    if (xDstWid > xSrcWid)
    {
        xBltSrc    = xDst;
        xBltSrcWid = xSrcWid;
        xBltDst    = xDst + xSrcWid;
        xBltDstWid = xDstWid - xSrcWid;

        while (xBltDstWid)
        {
            xBltWid     = min(xBltSrcWid, xBltDstWid);

            BitBlt(hdc, xBltDst, yDst, xBltWid, yHei,
                   hdc, xBltSrc, yDst, SRCCOPY);

            xBltDst    += xBltWid;
            xBltDstWid -= xBltWid;
            xBltSrcWid *= 2;
        }
    }

    // The last step is to copy the fully tiled horizontal scanlines
    // vertically to fill the desitination.
    
    if (yDstHei > ySrcHei)
    {
        yBltSrc    = yDst;
        yBltSrcHei = ySrcHei;
        yBltDst    = yDst + ySrcHei;
        yBltDstHei = yDstHei - ySrcHei;

        while (yBltDstHei)
        {
            yBltHei    = min(yBltSrcHei, yBltDstHei);

            BitBlt(hdc, xDst, yBltDst, xDstWid, yBltHei,
                   hdc, xDst, yBltSrc, SRCCOPY);

            yBltDst    += yBltHei;
            yBltDstHei -= yBltHei;
            yBltSrcHei *= 2;
        }
    }

Cleanup: ;
} 

void
CImgCtx::TileSlow(const XHDC& hdc, RECT * prc, LONG xDstOrg, LONG yDstOrg,
    SIZE * psizePrint, BOOL fOpaque, COLORREF crBack,
    IMGANIMSTATE * pImgAnimState, DWORD dwFlags, XHDC * phdcInfo)
{
    LONG    xDst    = prc->left;
    LONG    yDst    = prc->top;
    LONG    xDstWid = prc->right - xDst;
    LONG    yDstHei = prc->bottom - yDst;
    LONG    xFullWid= GetImgInfo()->_xWid;
    LONG    yFullHei= GetImgInfo()->_yHei;
    LONG    xSrcWid = psizePrint ? psizePrint->cx : xFullWid;
    LONG    ySrcHei = psizePrint ? psizePrint->cy : yFullHei;
    LONG    xPreWid, yPreHei, xSrcOrg, ySrcOrg;
    LONG    xBltSrc, xBltDst, xBltDstWid, xBltWid, xBltSrcOrg;
    LONG    yBltSrc, yBltDst, yBltDstHei, yBltHei, yBltSrcOrg;
    RECT    rcSrc, rcDst;
    HDC     hdcMem = NULL;
    HBITMAP hbmMem = NULL;
    HBITMAP hbmSav = NULL;
    HRESULT hr = S_OK;

    if (xSrcWid == 0 || ySrcHei == 0 || xDstWid == 0 || yDstHei == 0)
        return;

    // Currently (xSrcOrg,ySrcOrg) define a point on the infinite plane of 
    // the hdc where the upper-left corner of the image should be aligned.
    // Here we convert this point into offsets from the upper-left corner
    // of the image where the first pixel will be drawn as defined by prc.
    // That is, what is the coordinate of the pixel in the image which
    // will be drawn at the location (xDst,yDst).

    xSrcOrg = abs(xDst - xDstOrg) % xSrcWid;
    if (xDst < xDstOrg && xSrcOrg > 0)
        xSrcOrg = xSrcWid - xSrcOrg;

    ySrcOrg = abs(yDst - yDstOrg) % ySrcHei;
    if (yDst < yDstOrg && ySrcOrg > 0)
        ySrcOrg = ySrcHei - ySrcOrg;

    // If the source image is very small, it makes sense to pre-tile it
    // into an offscreen bitmap.  The area of the destination needs to
    // be at least four times the area of the source.

    #if DBG==1
    xPreWid = 0;
    yPreHei = 0;
    if (IsTagEnabled(tagNoPreTile))
        goto nopretile;
    #endif

    xPreWid = min(xSrcWid, xDstWid);
    yPreHei = min(ySrcHei, yDstHei);

    if (    psizePrint
        ||  xPreWid * yPreHei >= PRETILE_AREA
        ||  xPreWid * yPreHei * 4 > xDstWid * yDstHei
        ||  (!fOpaque && crBack == COLORREF_NONE))
    {
        if (!psizePrint && !fOpaque && crBack != COLORREF_NONE)
        {
            PatBltBrush(hdc, prc, PATCOPY, crBack);
        }
        goto nopretile;
    }

    // Increase the dimensions of the pretile area as far as possible

    xPreWid = max(xPreWid, min(xDstWid, (PRETILE_AREA / (yPreHei * xSrcWid)) * xSrcWid));
    yPreHei = max(yPreHei, min(yDstHei, (PRETILE_AREA / (xPreWid * ySrcHei)) * ySrcHei));

    Assert(xPreWid * yPreHei <= PRETILE_AREA);
    Assert(xPreWid > 0 && xPreWid <= xDstWid);
    Assert(yPreHei > 0 && yPreHei <= yDstHei);

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto Cleanup;

    //  We need to use the original non-memory DC for creating the compatible bitmap
    // because on W2K and Whistler multimonitor setups CreateCompatibleBitmap 
    // retuns a "zombie" bitmap, that quietly fails all the BitBlt operations,
    // if the dc is a memory DC and if the hardware acceleration of the primary
    // display card is set to maximum.
    hbmMem = CreateCompatibleBitmap(phdcInfo ? *phdcInfo : hdc, xPreWid, yPreHei);

    if (hbmMem == NULL)
        goto Cleanup;

    hbmSav = (HBITMAP)SelectObject(hdcMem, hbmMem);

    rcDst.left   = 0;
    rcDst.top    = 0;
    rcDst.right  = xPreWid;
    rcDst.bottom = yPreHei;

    TileFast(XHDC(hdcMem, NULL), &rcDst, xSrcWid - xSrcOrg, ySrcHei - ySrcOrg,
        fOpaque, crBack, pImgAnimState, dwFlags);

    xSrcOrg = 0;
    ySrcOrg = 0;
    xSrcWid = xPreWid;
    ySrcHei = yPreHei;

nopretile:

    if (psizePrint)
    {
        // Remember the original image source sizes in xPreWid/yPreHei in
        // order to compute the rcSrc in pixels below.

        xPreWid = GetImgInfo()->_xWid;
        yPreHei = GetImgInfo()->_yHei;

        if (xPreWid == 0 || yPreHei == 0)
            return;
    }

    yBltDst    = yDst;
    yBltDstHei = yDstHei;
    yBltSrcOrg = ySrcOrg;

    while (yBltDstHei)
    {
        yBltSrc     = yBltSrcOrg;
        yBltHei     = min(ySrcHei - yBltSrcOrg, yBltDstHei);
        xBltDst     = xDst;
        xBltDstWid  = xDstWid;
        xBltSrcOrg  = xSrcOrg;

        while (xBltDstWid)
        {
            xBltSrc = xBltSrcOrg;
            xBltWid = min(xSrcWid - xBltSrcOrg, xBltDstWid);

            if (hdcMem)
            {
                BitBlt(hdc, xBltDst, yBltDst, xBltWid, yBltHei,
                    XHDC(hdcMem, NULL), xBltSrc, yBltSrc, SRCCOPY);
            }
            else
            {
                if (psizePrint)
                {
                    rcSrc.left   = MulDivQuick(xBltSrc, xPreWid, xSrcWid);
                    rcSrc.top    = MulDivQuick(yBltSrc, yPreHei, ySrcHei);
                    rcSrc.right  = MulDivQuick(xBltSrc + xBltWid, xPreWid, xSrcWid);
                    rcSrc.bottom = MulDivQuick(yBltSrc + yBltHei, yPreHei, ySrcHei);
                }
                else
                {
                    rcSrc.left   = xBltSrc;
                    rcSrc.top    = yBltSrc;
                    rcSrc.right  = xBltSrc + xBltWid;
                    rcSrc.bottom = yBltSrc + yBltHei;
                }

                rcDst.left   = xBltDst;
                rcDst.top    = yBltDst;
                rcDst.right  = xBltDst + xBltWid;
                rcDst.bottom = yBltDst + yBltHei;

                if (pImgAnimState)
                {
                    RECT rcDstFull;

                    rcDstFull.left   = xBltDst - xBltSrc;
                    rcDstFull.top    = yBltDst - yBltSrc;
                    rcDstFull.right  = xBltDst - xBltSrc;
                    rcDstFull.bottom = yBltDst - yBltSrc;

                    if (psizePrint)
                    {
                        rcDstFull.right  += psizePrint->cx;
                        rcDstFull.bottom += psizePrint->cy;
                    }
                    else 
                    {
                        rcDstFull.right  += xFullWid;
                        rcDstFull.bottom += yFullHei;
                    }

                    GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
                }
                else
                {
                    hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
                    if (hr)
                        goto Cleanup;
                }
            }

            xBltDst    += xBltWid;
            xBltDstWid -= xBltWid;
            xBltSrcOrg  = 0;
        }

        yBltDst    += yBltHei;
        yBltDstHei -= yBltHei;
        yBltSrcOrg  = 0;
    }

Cleanup:

    if (hbmSav)
        SelectObject(hdcMem, hbmSav);
    if (hbmMem)
        DeleteObject(hbmMem);
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);
}

ULONG
CImgCtx::GetState(BOOL fClear, SIZE *psize)
{
    if (psize == NULL)
    {
        return(super::GetState(fClear));
    }
    else
    {
        EnterCriticalSection();

        CImgInfo * pImgInfo = GetImgInfo();

        psize->cx = pImgInfo->_xWid;
        psize->cy = pImgInfo->_yHei;

        ULONG ulState = super::GetState(fClear);

        LeaveCriticalSection();

        return(ulState);
    }
}

void
CImgCtx::Signal(WORD wChg, BOOL fInvalAll, int yBot)
{
    _yTop = Union(_yTop, _yBot, fInvalAll, yBot);
    _yBot = yBot;
    super::Signal(wChg);
}

HRESULT
CImgCtx::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    return GetImgInfo()->SaveAsBmp(pStm, fFileHeader);
}

#ifndef NO_ART
CArtPlayer *
CImgCtx::GetArtPlayer()
{
    return GetImgInfo()->GetArtPlayer();
}
#endif // ndef NO_ART

// Internal Functions ---------------------------------------------------------

void CALLBACK
ImgCtxNullCallback(void *, void *)
{
}

// Public Functions -----------------------------------------------------------

HRESULT
CreateIImgCtx(IUnknown * pUnkOuter, IUnknown **ppUnk)
{
    if (pUnkOuter != NULL)
    {
        *ppUnk = NULL;
        return(CLASS_E_NOAGGREGATION);
    }

    CImgCtx * pImgCtx = new CImgCtx;

    if (pImgCtx)
    {
        // The purpose of setting a NULL callback is to AddRef the current
        // THREADSTATE, which is a side-effect of setting a synchronous
        // callback.  This prevents the thread from passivating between the
        // time the user calls CoCreateInstance and sets a different callback
        // function and/or releases this object.

        pImgCtx->SetCallback(ImgCtxNullCallback, 0);
    }

    *ppUnk = pImgCtx;

    RRETURN(pImgCtx ? S_OK : E_OUTOFMEMORY);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imginfo.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       imginfo.cxx
//
//  Contents:   Implementation of CImgInfo class
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

#ifdef _MAC
class CICCProfile;
#define LPPROFILE CICCProfile*
typedef void*       CMProfileRef;
typedef void*       CMWorldRef;
#include "CColorSync.h"
#endif

// Globals --------------------------------------------------------------------

DeclareTag(tagNoClipForAnim, "Dwn", "Img: Don't clip img anim frames");
ExternTag(tagTimeTransMask);
MtDefine(CImgInfo, Dwn, "CImgInfo")

CImgBits *g_pImgBitsNotLoaded = NULL;
CImgBits *g_pImgBitsMissing = NULL;

// CImgInfo -------------------------------------------------------------------

HRESULT
CImgInfo::Init(DWNLOADINFO * pdli)
{
    HRESULT hr;

    hr = THR(super::Init(pdli));
    if (hr)
        goto Cleanup;

    _fNoOptimize = pdli->pDwnDoc->GetDownf() & DWNF_NOOPTIMIZE;
    SetFlags(IMGBITS_NONE);

Cleanup:
    RRETURN(hr);
}

CImgInfo::~CImgInfo()
{
    Assert(_pImgTask == NULL);
    Assert(_cLoad == 0);

    if (GetDwnInfoLock() == NULL)
    {
        FreeGifAnimData(&_gad, (CImgBitsDIB *)_pImgBits);
#ifndef NO_ART
        if (_pArtPlayer)
            delete _pArtPlayer;
#endif
#ifdef _MAC
        if(_Profile)
            _Profile->Release();
#endif
        if (_pImgBits)
            delete _pImgBits;
    }
}

void CImgInfo::Passivate()
{
    CImgTask * pImgTask;

    super::Passivate();

    pImgTask = (CImgTask *)InterlockedExchangePointer((void **)&_pImgTask, NULL);

    if (pImgTask)
    {
        pImgTask->Terminate();
        pImgTask->Release();
    }
}

HRESULT
CImgInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CImgCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CImgInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CImgLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}

#ifndef NO_ART
CArtPlayer *
CImgInfo::GetArtPlayer()
{
    CArtPlayer * pArtPlayer = NULL;

    EnterCriticalSection();

    if (_pArtPlayer)
        pArtPlayer = _pArtPlayer;
    else if (_pImgTask)
    {
        pArtPlayer = _pImgTask->GetArtPlayer();
    }
        
    LeaveCriticalSection();

    return(pArtPlayer);
}
#endif // ndef NO_ART

void
CImgInfo::Signal(WORD wChg, BOOL fInvalAll, int yBot)
{
    if (_pDwnCtxHead)
    {
        EnterCriticalSection();

        for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
                pDwnCtx = pDwnCtx->GetDwnCtxNext())
        {
            ((CImgCtx *)pDwnCtx)->Signal(wChg, fInvalAll, yBot);
        }

        LeaveCriticalSection();
    }
}

void
CImgInfo::Reset()
{
    Assert(EnteredCriticalSection());

    _ySrcBot = 0;

    Signal(IMGCHG_VIEW, TRUE, 0);

    if (_gad.pgf)
    {
        FreeGifAnimData(&_gad, (CImgBitsDIB *)_pImgBits);
        memset(&_gad, 0, sizeof(GIFANIMDATA));

        //TODO (lmollico): we should free the pImgAnimState list

        ClrFlags(IMGANIM_ANIMATED);
    }

#ifndef NO_ART
    if (_pArtPlayer)
    {
        delete _pArtPlayer;
        _pArtPlayer = NULL;

        // TODO (lmollico): we should free the pImgAnimState list

        ClrFlags(IMGANIM_ANIMATED);
    }
#endif // ndef NO_ART

#ifdef _MAC
    if(_Profile)
    {
        _Profile->Release();
        _Profile = NULL;
    }
#endif

    if (_pImgBits)
    {
        delete _pImgBits;
        _pImgBits = NULL;
    }
}

void
CImgInfo::Abort(HRESULT hrErr, CDwnLoad ** ppDwnLoad)
{
    Assert(EnteredCriticalSection());

    if (TstFlags(DWNLOAD_LOADING))
    {
        Signal(IMGCHG_VIEW, TRUE, 0);
    }

    if (_pImgTask)
        _pImgTask->Terminate();

    super::Abort(hrErr, ppDwnLoad);
}

void
CImgInfo::DrawFrame(XHDC hdc, IMGANIMSTATE *pImgAnimState, RECT *prcDst,
    RECT *prcSrc, RECT *prcDstFull, DWORD dwFlags)
{
    GIFFRAME * pgf;
    GIFFRAME * pgfDraw;
    GIFFRAME * pgfDrawNext;
    POINT pt;
    HRGN hrgnClipOld = NULL;
    int iOldClipKind = -1;
    RECT rcSrc;
    LONG xDstWid;
    LONG yDstHei;
    
    pt = g_Zero.pt;

    Assert(!prcSrc || prcDstFull);

    if (prcSrc == NULL)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcSrc.right  = _xWid;
        rcSrc.bottom = _yHei;
        prcSrc       = &rcSrc;

        if (!prcDstFull)
            prcDstFull = prcDst;
    }

    Assert(pImgAnimState != NULL);

    EnterCriticalSection();

#ifndef NO_ART
    if (GetArtPlayer())
    {
        DrawImage(hdc, prcDst, prcSrc, SRCCOPY, dwFlags);
    }
    else
#endif // ndef NO_ART
    {
        // 2001/04/02 mcalkins: Added check and goto Cleanup as a fix for IE6
        //            bug #30000

        Check(pImgAnimState->pgfFirst && pImgAnimState->pgfDraw);

        if (   (NULL == pImgAnimState->pgfFirst)
            || (NULL == pImgAnimState->pgfDraw))
        {
            goto Cleanup;
        }

        xDstWid = prcDstFull->right - prcDstFull->left;
        yDstHei = prcDstFull->bottom - prcDstFull->top;
                
        ComputeFrameVisibility(pImgAnimState, _xWid, _yHei, xDstWid, yDstHei);

        pgfDraw = pImgAnimState->pgfDraw;
        pgfDrawNext = pgfDraw->pgfNext;
        
        #if DBG==1
        if (!IsTagEnabled(tagNoClipForAnim))
        #endif
        {
            hrgnClipOld = CreateRectRgnIndirect(prcDst);
            if (hrgnClipOld == NULL)
                goto Cleanup;

            iOldClipKind = GetClipRgn(hdc, hrgnClipOld);
            if (iOldClipKind == -1)
                goto Cleanup;

            GetViewportOrgEx(hdc, &pt);
            pt.x += prcDstFull->left;
            pt.y += prcDstFull->top;
        }

        // Now, draw the frames from this iteration
        for (pgf = pImgAnimState->pgfFirst; pgf != pgfDrawNext; pgf = pgf->pgfNext)
        {
            if (pgf->bRgnKind != NULLREGION)
            {
                #if DBG==1
                if (!IsTagEnabled(tagNoClipForAnim))
                #endif
                {
                    OffsetRgn(pgf->hrgnVis, pt.x, pt.y);
                    //BUGWIN16: We don't have ExtSelectClipRgn - sure to cause some bugs here !!
#ifndef WIN16
                    if (iOldClipKind == 1)
                        ExtSelectClipRgn(hdc, pgf->hrgnVis, RGN_AND);
                    else
#endif
                        SelectClipRgn(hdc, pgf->hrgnVis);
                }

                pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, pgf->left, pgf->top, SRCCOPY, dwFlags);

                #if DBG==1
                if (!IsTagEnabled(tagNoClipForAnim))
                #endif
                {
                    if (iOldClipKind == 1)
                        SelectClipRgn(hdc, hrgnClipOld);
                    else
                        SelectClipRgn(hdc, NULL);
                }
            }
            if (pgf->hrgnVis != NULL)
            {
                DeleteRgn(pgf->hrgnVis);
                pgf->hrgnVis = NULL;
                pgf->bRgnKind = NULLREGION;
            }
        } // for each frame in the preceding iteration
    }

Cleanup:
    if (hrgnClipOld)
        DeleteRgn(hrgnClipOld);

    LeaveCriticalSection();
}

//+------------------------------------------------------------------------
//
//  Member:     CImgInfo::NextFrame
//
//  Synopsis:   returns TRUE if there is a Frame to Draw
//
//-------------------------------------------------------------------------

BOOL
CImgInfo::NextFrame(IMGANIMSTATE *pImgAnimState, DWORD dwCurTimeMS, DWORD *pdwFrameTimeMS)
{
    int iLateTimeMS;
    BOOL fResult = TRUE;

    *pdwFrameTimeMS = 0xFFFFFFFF;
    BOOL fCritical = FALSE;

    if (pImgAnimState == NULL)
        return FALSE;

    pImgAnimState->fLoop = FALSE;
    pImgAnimState->fStop = FALSE;

    // if it still isn't our time, update our countdown and return
    if (dwCurTimeMS < pImgAnimState->dwNextTimeMS)
    {
        *pdwFrameTimeMS = pImgAnimState->dwNextTimeMS - dwCurTimeMS;
        return FALSE;
    }

    iLateTimeMS = dwCurTimeMS - pImgAnimState->dwNextTimeMS;

#ifndef NO_ART
    // See if this is an ART SlideShow    
    CArtPlayer * pArtPlayer = GetArtPlayer();

    if ((!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED)) || (pArtPlayer))
#else
    if (!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED))
#endif
    {
        EnterCriticalSection();
        fCritical = TRUE;
    }

#ifndef NO_ART
    if (pArtPlayer)
    {
        if (_pImgBits)
            fResult = pArtPlayer->GetArtReport((CImgBitsDIB **)&_pImgBits, _yHei, GetColorMode());
        else if (_pImgTask)
            fResult = _pImgTask->DoTaskGetReport(pArtPlayer);
        else
            fResult = FALSE;

        // catch the case where we're even late for the next frame
        if (iLateTimeMS > (int) pArtPlayer->_uiUpdateRate)
            *pdwFrameTimeMS = 1;
        else
            *pdwFrameTimeMS = pArtPlayer->_uiUpdateRate - iLateTimeMS;

        pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;

        // If the show has been stopped and rewound, stop the timer
        if(pArtPlayer->_fRewind && !pArtPlayer->_fPlaying)
        {
            pArtPlayer->_fRewind = FALSE;
            pImgAnimState->fStop = TRUE;
        }

        // If the show is done, rewind it and stop the timer
        if(pArtPlayer->_fIsDone &&
          (pArtPlayer->_ulCurrentTime == pArtPlayer->_ulAvailPlayTime))
        {
            pArtPlayer->DoPlayCommand(IDM_IMGARTREWIND);
            pImgAnimState->fStop = TRUE;
        }
    }
    else
#endif
    {
        // okay, its time to move on to the next frame
        if (pImgAnimState->pgfDraw->pgfNext != NULL)
        {
            pImgAnimState->pgfDraw = pImgAnimState->pgfDraw->pgfNext;

            // catch the case where we're even late for the next frame
            if (iLateTimeMS > (int) pImgAnimState->pgfDraw->uiDelayTime)
                *pdwFrameTimeMS = 1;
            else
                *pdwFrameTimeMS = pImgAnimState->pgfDraw->uiDelayTime - iLateTimeMS;

            pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;
        }
        else if (!TstFlags(IMGLOAD_COMPLETE))
        {
            fResult = FALSE;
        }
        else if (_gad.fLooped &&
                (_gad.cLoops == 0 || pImgAnimState->dwLoopIter < _gad.cLoops))
        {
            // we're looped...
            pImgAnimState->fLoop = TRUE;
            pImgAnimState->dwLoopIter++;
            pImgAnimState->pgfDraw = pImgAnimState->pgfFirst;

            // catch the case where we're even late for the next frame
            if (iLateTimeMS > (int) pImgAnimState->pgfDraw->uiDelayTime)
                *pdwFrameTimeMS = 1;
            else
                *pdwFrameTimeMS = pImgAnimState->pgfDraw->uiDelayTime - iLateTimeMS;

            pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;
        }
        else
        {
            pImgAnimState->fStop = TRUE;
            fResult = FALSE;
        }
    }

    if (fCritical)
    {
        LeaveCriticalSection();
    }

    return(fResult);
}

void CImgInfo::InitImgAnimState(IMGANIMSTATE * pImgAnimState)
{
    Assert(pImgAnimState);

    EnterCriticalSection();

    memset(pImgAnimState, 0, sizeof(IMGANIMSTATE));

#ifndef NO_ART
    // See if this is an ART SlideShow    
    CArtPlayer * pArtPlayer = GetArtPlayer();

    if (pArtPlayer)
    {
        pImgAnimState->dwNextTimeMS = GetTickCount() + pArtPlayer->_uiUpdateRate;
    }
    else
#endif // ndef NO_ART
    {
        pImgAnimState->dwLoopIter = 0;
        pImgAnimState->fLoop = FALSE;

        if (_gad.pgf)
        {
            pImgAnimState->pgfFirst = _gad.pgf; // the first image is there
            pImgAnimState->pgfDraw = _gad.pgf;
        }
        else if (_pImgTask)
        {
            pImgAnimState->pgfFirst = _pImgTask->GetPgf();  // the first image is there
            pImgAnimState->pgfDraw = _pImgTask->GetPgf();
        }

        if (pImgAnimState->pgfDraw)
            pImgAnimState->dwNextTimeMS = GetTickCount() + pImgAnimState->pgfDraw->uiDelayTime;
        else
            pImgAnimState->dwNextTimeMS = (DWORD) -1;
    }

    LeaveCriticalSection();
}

// Callbacks ------------------------------------------------------------------

void
CImgInfo::OnLoadTask(CImgLoad * pImgLoad, CImgTask * pImgTask)
{
    CImgTask * pImgTaskOld = NULL;
    
    EnterCriticalSection();

    if (pImgLoad == _pDwnLoad)
    {
        Assert(!TstFlags(IMGLOAD_COMPLETE));

        if (_pImgTask)
            pImgTaskOld = _pImgTask;

        _pImgTask = pImgTask;
        _pImgTask->AddRef();
    }

    LeaveCriticalSection();

    if (pImgTaskOld)
    {
        Assert(pImgTaskOld->IsTerminated());
        pImgTaskOld->Release();
    }
}

void
CImgInfo::OnLoadDone(HRESULT hrErr)
{
    Assert(EnteredCriticalSection());

    if (!_pImgTask && TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, TstFlags(DWNF_DOWNLOADONLY) ?
            DWNLOAD_COMPLETE : DWNLOAD_ERROR);
        Signal(IMGCHG_VIEW | IMGCHG_COMPLETE, TRUE, 0);
    }
}

void
CImgInfo::OnTaskSize(CImgTask * pImgTask, LONG xWid, LONG yHei,
    long lTrans, const MIMEINFO * pmi)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (xWid != _xWid || yHei != _yHei || lTrans != _lTrans)
        {
            _xWid   = xWid;
            _yHei   = yHei;
            _lTrans = lTrans;
            _pmi    = pmi;
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskSize (task %x) set _lTrans to %d",
                        this, pImgTask, _lTrans));
            Signal(IMGCHG_SIZE, FALSE, 0);
        }
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskTrans(CImgTask * pImgTask, long lTrans)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (lTrans != _lTrans)
        {
            _lTrans = lTrans;
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskTrans (task %x) set _lTrans to %d",
                        this, pImgTask, _lTrans));
            Signal(IMGCHG_VIEW, FALSE, 0);
        }
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskProg(CImgTask * pImgTask, ULONG ulBits, BOOL fAll, LONG yBot)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        UpdFlags(IMGBITS_MASK, ulBits);
        Signal(IMGCHG_VIEW, fAll, yBot);
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskAnim(CImgTask * pImgTask)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        SetFlags(IMGANIM_ANIMATED);
        super::Signal(IMGCHG_ANIMATE);
    }

    LeaveCriticalSection();
}

#ifdef _MAC
BOOL
CImgInfo::OnTaskBits(CImgTask * pImgTask, CImgBits *pImgBits,
    GIFANIMDATA * pgad, CArtPlayer * pArtPlayer, LONG lTrans, LONG ySrcBot, BOOL fNonProgressive, LPPROFILE Profile)
#else
BOOL
CImgInfo::OnTaskBits(CImgTask * pImgTask, CImgBits *pImgBits,
    GIFANIMDATA * pgad, CArtPlayer * pArtPlayer, LONG lTrans, LONG ySrcBot, BOOL fNonProgressive)
#endif
{
    BOOL fResult = FALSE;

    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (TstFlags(IMGLOAD_LOADING))
        {
            WORD wSig = IMGCHG_COMPLETE | (TstFlags(IMGANIM_ANIMATED) ? IMGCHG_ANIMATE : 0);

            UpdFlags(IMGLOAD_MASK|IMGBITS_MASK, IMGLOAD_COMPLETE|IMGBITS_TOTAL);
            Signal(wSig | (fNonProgressive ? IMGCHG_VIEW : 0), FALSE, 0);
        }

        if (pgad)
        {
            _gad = *pgad;
        }

#ifndef NO_ART
        if (pArtPlayer)
        {
            _pArtPlayer = pArtPlayer;

            // Keep dynamic art out of cache
            memset(&_ftLastMod, 0, sizeof(_ftLastMod));
        }
#endif // ndef NO_ART

#ifdef _MAC
        if(Profile)
        {
            _Profile    = Profile;
            _Profile->AddRef();
            ((CImgBitsDIB*)_pImgBits)->ApplyProfile(Profile);
        }
#endif   // _MAC

        _ySrcBot    = ySrcBot;
        _lTrans     = lTrans;
        _pImgBits   = pImgBits;
        fResult     = TRUE;

#if DBG == 1
        TraceTag((tagImgTrans, "CImgInfo %x OnTaskBits (task %x bits %x) %ldx%ld set _lTrans to %d",
                    this, pImgTask, pImgBits, _xWid, _yHei, _lTrans));

        if (_gad.pgf)
        {
            GIFFRAME *pgf;
            for (pgf = _gad.pgf;  pgf;  pgf = pgf->pgfNext)
            {
                TraceTag((tagImgTrans, "  ImgBitsDIB %x %ldx%ld+%ld,%ld  trans %d",
                            pgf->pibd,
                            pgf->width, pgf->height, pgf->left, pgf->top,
                            (int)pgf->bTransFlags));
            }
        }
#endif

        if (_ySrcBot == -1 && !pImgBits->IsTransparent() &&
            _xWid == pImgBits->Width() && _yHei == pImgBits->Height())
        {
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskBits (task %x bits %x) set opaque",
                    this, pImgTask, pImgBits));
            UpdFlags(IMGTRANS_MASK, IMGTRANS_OPAQUE);
        }

        if (!_fNoOptimize)
        {
            _pImgBits->Optimize();
        }
    }

    LeaveCriticalSection();

    return(fResult);
}

void
CImgInfo::OnTaskDone(CImgTask * pImgTask)
{
    CDwnLoad * pDwnLoad = NULL;

    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (TstFlags(IMGLOAD_LOADING))
        {
            UpdFlags(IMGLOAD_MASK, IMGLOAD_ERROR);
            Signal(IMGCHG_VIEW | IMGCHG_COMPLETE, TRUE, 0);
        }

        _pImgTask = NULL;
        if (_pDwnLoad)
        {
            pDwnLoad  = _pDwnLoad;
            pDwnLoad->AddRef();
        }
    }
    else
    {
        pImgTask = NULL;
    }

    LeaveCriticalSection();

    if (pImgTask)
        pImgTask->Release();

    if (pDwnLoad)
    {
        pDwnLoad->OnDone(S_OK);
        pDwnLoad->Release();
    }
}

HRESULT
CImgInfo::DrawImage(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    RECT rcSrc;
    BOOL fCritical = FALSE;

#if DBG==1
    if (!(dwFlags & DRAWIMAGE_NHPALETTE) && GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE)
    {
        HPALETTE hpal = (HPALETTE)GetCurrentObject(hdc, OBJ_PAL);

        if (hpal && hpal != g_hpalHalftone)
        {
            PALETTEENTRY ape1[256], ape2[256];
            UINT cpe1, cpe2;

            cpe1 = GetPaletteEntries(g_hpalHalftone, 0, 256, ape1);
            cpe2 = GetPaletteEntries(hpal, 0, 256, ape2);

            // TODO (michaelw)
            // The following if statement used to be Asserts and should be as soon as 5.0 ships.
            if (cpe1 != cpe2)
                TraceTag((tagError, "Drawing image to device which doesn't have the correct number of palette entries"));
            else if (memcmp(ape1, ape2, cpe1 * sizeof(PALETTEENTRY)))
                TraceTag((tagError, "Drawing image to device with non-halftone palette selected"));
        }
    }
#endif

    if (!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED))
    {
        EnterCriticalSection();
        fCritical = TRUE;
    }

    if (prcSrc == NULL)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcSrc.right  = _xWid;
        rcSrc.bottom = _yHei;
        prcSrc       = &rcSrc;
    }

    if (_pImgBits)
    {
        if (_gad.pgf)
        {
            _gad.pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, _gad.pgf->left, _gad.pgf->top, dwRop, dwFlags);
        }
        else
        {
            _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
        }
    }
    else if (_pImgTask)
    {
        CImgTask * pImgTask = _pImgTask;
        pImgTask->SubAddRef();

        if (fCritical)
        {
            LeaveCriticalSection();
            fCritical = FALSE;
        }

        pImgTask->BltDib(hdc, prcDst, prcSrc, dwRop, dwFlags);
        pImgTask->SubRelease();
    }

    if (fCritical)
    {
        LeaveCriticalSection();
    }

    return(S_OK);
}

HRESULT
CImgInfo::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    HRESULT hr = S_OK;

    EnterCriticalSection();
    
    if (_pImgBits)
        hr = THR(_pImgBits->SaveAsBmp(pStm, fFileHeader));

    LeaveCriticalSection();
    
    RRETURN(hr);
}

// Caching --------------------------------------------------------------------

ULONG
CImgInfo::ComputeCacheSize()
{
    ULONG cb = 0;

    if (_gad.pgf)
    {
        GIFFRAME * pgf = _gad.pgf;

        for (; pgf; pgf = pgf->pgfNext)
        {
            cb += pgf->pibd->CbTotal();
        }
    }
    else if (_pImgBits)
    {
        cb = _pImgBits->CbTotal();
    }

    return(cb);
}

BOOL
CImgInfo::AttachEarly(UINT dt, DWORD dwRefresh, DWORD dwFlags, DWORD dwBindf)
{
    // In order to attach to an existing CImgInfo, the following must match:
    //      _cstrUrl            (Already checked by caller)
    //      _dwRefresh
    //      DWNF_COLORMODE
    //      DWNF_DOWNLOADONLY
    //      DWNF_FORCEDITHER
    //      BINDF_OFFLINEOPERATION
    
    Assert(dt == DWNCTX_IMG);

    return( GetRefresh() == dwRefresh
        &&  GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER) ==
                (dwFlags & (DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER))
        &&  (GetBindf() & BINDF_OFFLINEOPERATION) == (dwBindf & BINDF_OFFLINEOPERATION));
}

BOOL
CImgInfo::CanAttachLate(CDwnInfo * pDwnInfo)
{
    CImgInfo * pImgInfo = (CImgInfo *)pDwnInfo;

    return(pImgInfo->GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER) ==
                     GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER));
}

void
CImgInfo::AttachLate(CDwnInfo * pDwnInfo)
{
    CImgInfo * pImgInfo = (CImgInfo *)pDwnInfo;

    Assert(_pDwnInfoLock == NULL);

    _xWid         = pImgInfo->_xWid;
    _yHei         = pImgInfo->_yHei;
    _ySrcBot      = pImgInfo->_ySrcBot;
    _pImgBits     = pImgInfo->_pImgBits;
    _lTrans       = pImgInfo->_lTrans;
    _gad          = pImgInfo->_gad;
#ifndef NO_ART
    _pArtPlayer   = pImgInfo->_pArtPlayer;
#endif
    _pmi          = pImgInfo->_pmi;
    _dwSecFlags   = pImgInfo->_dwSecFlags;
    _dwPrivacyFlags = pImgInfo->_dwPrivacyFlags;
    SetPolicyRef(pImgInfo->GetPolicyRef());

    _pDwnInfoLock   = pDwnInfo;
    _pDwnInfoLock->SubAddRef();

    TraceTag((tagImgTrans, "CImgInfo %x AttachLate (info %x bits %x) set _lTrans to %d",
                this, pDwnInfo, _pImgBits, _lTrans));

    UpdFlags(IMGLOAD_MASK|IMGBITS_MASK|IMGTRANS_MASK|IMGANIM_MASK,
        pDwnInfo->GetFlags(IMGLOAD_MASK|IMGBITS_MASK|IMGTRANS_MASK|IMGANIM_MASK));

    Signal(TstFlags(IMGANIM_ANIMATED) ? IMGCHG_SIZE|IMGCHG_VIEW|IMGCHG_ANIMATE|IMGCHG_COMPLETE : 
        IMGCHG_SIZE|IMGCHG_VIEW|IMGCHG_COMPLETE, TRUE, 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgemf.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgwmf.cxx
//
//  Contents:   Image filter for .wmf files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

MtDefine(CImgTaskEmf, Dwn, "CImgTaskEmf")
MtDefine(CImgTaskEmfBuf, CImgTaskEmf, "CImgTaskEmf Decode Buffer")

class CImgTaskEmf : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskEmf))

    virtual void Decode(BOOL *pfNonProgressive);
};

void CImgTaskEmf::Decode(BOOL *pfNonProgressive)
{
    ULONG ulSize;
    LPBYTE pbBuf = NULL;
    HENHMETAFILE hmf = NULL;
    CImgBitsDIB *pibd = NULL;
    HDC hdcDst = NULL;
    HBITMAP hbmSav = NULL;
    ENHMETAHEADER    emh;
    UINT nColors;
    HRESULT hr;
    RGBQUAD argb[256];
    CRect rcPlay;

    *pfNonProgressive = TRUE;

    // read in the header
    if (!Read(&emh, sizeof(emh)))
       return;

    //The header contains a size field for the entire file.  
    //If this size is less than the header length (which we've just
    //successfully read in), then the field is clearly bogus.
    //Catch this now.
    if (emh.nBytes < sizeof(emh))
        return;

    // Create a screen-compatible DC for rendering
    hdcDst = GetMemoryDC();
    if (!hdcDst)
        goto Cleanup;

    // get measurements
    _xWid = emh.rclBounds.right - emh.rclBounds.left + 1;
    _yHei = emh.rclBounds.bottom - emh.rclBounds.top + 1;

    // get image size in logical pixels, with aspect adjustment
    rcPlay = ComputeEnhMetaFileBounds(&emh);

    // Try fixing bogus bounds
    if (_xWid <= 0 || _yHei <= 0)
    {
        // Unfortunately, to restore bounds we need to guess 
        // target device resolution. 
        // Device size/Millimeter size are not useful for that purpose
        // (see comments to ComputeEnhMetaFileBounds).

        // Here is how we are going to guess:
        //
        // 1) figure out current display's Device/MM ratio. 
        //    If it matches the metafile, use current display resolution.
        if (   GetDeviceCaps(hdcDst, HORZRES) == emh.szlDevice.cx
            && GetDeviceCaps(hdcDst, VERTRES) == emh.szlDevice.cy
            && GetDeviceCaps(hdcDst, HORZSIZE) == emh.szlMillimeters.cx
            && GetDeviceCaps(hdcDst, VERTSIZE) == emh.szlMillimeters.cy)
        {
            int cxInch = GetDeviceCaps(hdcDst, LOGPIXELSX);
            int cyInch = GetDeviceCaps(hdcDst, LOGPIXELSY);
            
            _xWid = MulDiv(emh.rclFrame.right  - emh.rclFrame.left, cxInch, 2540);
            _yHei = MulDiv(emh.rclFrame.bottom - emh.rclFrame.top,  cyInch, 2540);
        }
        // 2) Otherwise, use rcPlay. It will be probably wrong, but at least
        //    in the same ballpark, so we'll see something.
        else
        {
            _xWid = rcPlay.Width();
            _yHei = rcPlay.Height();
        }
    }
    else
    {
        // NOTE (alexmog): if we cared, we would check if this is a printer-
        //                 targeted metafile. In that case, rclBounds may be
        //                 huge, and we should scale that to screen resolution
        //                 (or whatever our target is here)
    }

    //A negative height will at best cause failure later on, and might very well cause
    //us to trash the heap.  Catch dimension problems here.
    if ((_xWid < 0) || (_yHei < 0))
        goto Cleanup;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, _lTrans);

    // allocate a buffer to hold metafile
    ulSize = emh.nBytes;
    pbBuf = (LPBYTE)MemAlloc(Mt(CImgTaskEmfBuf), ulSize);
    if (!pbBuf)
        goto Cleanup;

    // copy the header into the buffer
    // Note that we've checked above that nBytes is at least sizeof(emf), so
    // this memcpy is fine.
    memcpy(pbBuf, &emh, sizeof(emh));

    // read the metafile into memory after the header
    if (!Read(pbBuf + sizeof(emh), ulSize - sizeof(emh)))
        goto Cleanup;

    // convert the buffer into a metafile handle
    hmf = SetEnhMetaFileBits(ulSize, pbBuf);
    if (!hmf)
        goto Cleanup;

    // Free the metafile buffer
    MemFree(pbBuf);
    pbBuf = NULL;

    // Get the palette from the metafile if there is one, otherwise use the 
    // halftone palette.
    nColors = GetEnhMetaFilePaletteEntries(hmf, 256, _ape);
    if (nColors == GDI_ERROR)
        goto Cleanup;

    if (nColors == 0)
    {
        memcpy(_ape, g_lpHalftone.ape, sizeof(_ape));
        nColors = 256;        
    }

    CopyColorsFromPaletteEntries(argb, _ape, nColors);

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    hr = pibd->AllocDIBSection(8, _xWid, _yHei, argb, nColors, 255);
    if (hr)
        goto Cleanup;

    _lTrans = 255;

    Assert(pibd->GetBits() && pibd->GetHbm());

    memset(pibd->GetBits(), (BYTE)_lTrans, pibd->CbLine() * _yHei);

    // get image size in logical pixels, with aspect adjustment
    rcPlay = ComputeEnhMetaFileBounds(&emh);

    // Render the metafile into the bitmap
    
    hbmSav = (HBITMAP)SelectObject(hdcDst, pibd->GetHbm());
    SetWindowOrgEx(hdcDst, emh.rclBounds.left,emh.rclBounds.top, NULL);    
    PlayEnhMetaFile(hdcDst, hmf, &rcPlay);

    _ySrcBot = -1;
    
    _pImgBits = pibd;
    pibd = NULL;

Cleanup:
    if (hbmSav)
        SelectObject(hdcDst, hbmSav);
    if (hdcDst)
        ReleaseMemoryDC(hdcDst);
    if (pibd)
        delete pibd;
    if (hmf)        
        DeleteEnhMetaFile(hmf);
    if (pbBuf)
        MemFree(pbBuf);
    return;
}

CImgTask * NewImgTaskEmf()
{
    return(new CImgTaskEmf);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgjpg.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifdef _MAC
#define XMD_H
#endif


extern "C" {
#include "jinclude.h"
#define JPEG_INTERNALS
#include "jpeglib.h"
#include "jerror.h"
}

#ifdef _MAC
typedef void*       CMProfileRef;
typedef void*       CMWorldRef;
#include "CColorSync.h"
#endif

#ifdef UNIX
#  undef EXTERN_C
#  define EXTERN_C
#else
#  ifndef EXTERN_C
#    define EXTERN_C EXTERN_C "C"
#  endif
#endif

#define EXCEPTION_JPGLIB    0x1

#ifdef _MAC
#define ICC_MARKER  (JPEG_APP0 + 2) /* JPEG marker code for ICC */
#define ICC_OVERHEAD_LEN  14        /* size of non-profile data in APP2 */

static
void setup_read_icc_profile JPP((j_decompress_ptr cinfo));

static
boolean read_icc_profile JPP((j_decompress_ptr cinfo,
                     JOCTET **icc_data_ptr,
                     unsigned int *_icc_data_len));
#endif

MtDefine(CImgTaskJpg, Dwn, "CImgTaskJpg")

class CImgTaskJpg : public CImgTask
{

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskJpg))

    virtual void Decode(BOOL *pfNonProgressive);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

};

/*
 * Error exit handler: must not return to caller.
 *
 * Applications may override this if they want to get control back after
 * an error.  Typically one would longjmp somewhere instead of exiting.
 * The setjmp buffer can be made a private field within an expanded error
 * handler object.  Note that the info needed to generate an error message
 * is stored in the error object, so you can generate the message now or
 * later, at your convenience.
 * You should make sure that the JPEG object is cleaned up (with jpeg_abort
 * or jpeg_destroy) at some point.
 */

EXTERN_C
METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
}

/*
 * Actual output of an error or trace message.
 * Applications may override this method to send JPEG messages somewhere
 * other than stderr.
 */

EXTERN_C
METHODDEF(void)
output_message (j_common_ptr cinfo)
{
}


/*
 * Decide whether to emit a trace or warning message.
 * msg_level is one of:
 *   -1: recoverable corrupt-data warning, may want to abort.
 *    0: important advisory messages (always display to user).
 *    1: first level of tracing detail.
 *    2,3,...: successively more detailed tracing messages.
 * An application might override this method if it wanted to abort on warnings
 * or change the policy about which messages to display.
 */

EXTERN_C
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
}


/*
 * Format a message string for the most recent JPEG error or message.
 * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
 * characters.  Note that no '\n' character is added to the string.
 * Few applications should need to override this method.
 */

EXTERN_C
METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
}


/*
 * Reset error state variables at start of a new image.
 * This is called during compression startup to reset trace/error
 * processing to default state, without losing any application-specific
 * method pointers.  An application might possibly want to override
 * this method if it has additional error processing state.
 */

EXTERN_C
METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0; /* may be useful as a flag for "no error" */
}


/*
 * Fill in the standard error-handling methods in a jpeg_error_mgr object.
 * Typical call is:
 *  struct jpeg_compress_struct cinfo;
 *  struct jpeg_error_mgr err;
 *
 *  cinfo.err = jpeg_std_error(&err);
 * after which the application may override some of the methods.
 */

EXTERN_C GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
  err->emit_message = emit_message;
  err->output_message = output_message;
  err->format_message = format_message;
  err->reset_error_mgr = reset_error_mgr;

  err->trace_level = 0;     /* default = no tracing */
  err->num_warnings = 0;    /* no warnings emitted yet */
  err->msg_code = 0;        /* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = NULL;
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;

  err->addon_message_table = NULL;
  err->first_addon_message = 0; /* for safety */
  err->last_addon_message = 0;

  return err;
}

/* Expanded data source object for stdio input */

typedef struct {
  struct jpeg_source_mgr pub;   /* public fields */

  CImgTask * pImgTask;
  FILE * infile;        /* source stream */
  JOCTET * buffer;      /* start of buffer */
  boolean start_of_file;    /* have we gotten any data yet? */
} my_source_mgr;

typedef my_source_mgr * my_src_ptr;

#define INPUT_BUF_SIZE  4096    /* choose an efficiently fread'able size */
#define ImgTask_BUF_SIZE  512   /* choose a size to allow overlap */

/*
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
 */

EXTERN_C
METHODDEF(void)
init_source (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
}


/*
 * Fill the input buffer --- called whenever buffer is emptied.
 *
 * In typical applications, this should read fresh data into the buffer
 * (ignoring the current state of next_input_byte & bytes_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been reloaded.  It is not necessary to
 * fill the buffer entirely, only to obtain at least one more byte.
 *
 * There is no such thing as an EOF return.  If the end of the file has been
 * reached, the routine has a choice of ERREXIT() or inserting fake data into
 * the buffer.  In most cases, generating a warning message and inserting a
 * fake EOI marker is the best course of action --- this will allow the
 * decompressor to output however much of the image is there.  However,
 * the resulting error message is misleading if the real problem is an empty
 * input file, so we handle that case specially.
 *
 * In applications that need to be able to suspend compression due to input
 * not being available yet, a FALSE return indicates that no more data can be
 * obtained right now, but more may be forthcoming later.  In this situation,
 * the decompressor will return to its caller (with an indication of the
 * number of scanlines it has read, if any).  The application should resume
 * decompression after it has loaded more data into the input buffer.  Note
 * that there are substantial restrictions on the use of suspension --- see
 * the documentation.
 *
 * When suspending, the decompressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point must be rescanned after resumption, so move it to
 * the front of the buffer rather than discarding it.
 */

EXTERN_C
METHODDEF(boolean)
fill_input_buffer (j_decompress_ptr cinfo)
{
    my_src_ptr src = (my_src_ptr) cinfo->src;
    ULONG nbytes;

    if (!src->pImgTask->Read(src->buffer, ImgTask_BUF_SIZE, &nbytes))
    {
        if (src->start_of_file) /* Treat empty input file as fatal error */
            ERREXIT(cinfo, JERR_INPUT_EMPTY);

        WARNMS(cinfo, JWRN_JPEG_EOF);
        /* Insert a fake EOI marker */
        src->buffer[0] = (JOCTET) 0xFF;
        src->buffer[1] = (JOCTET) JPEG_EOI;
        nbytes = 2;

        src->pub.next_input_byte = src->buffer;
        src->pub.bytes_in_buffer = nbytes;
        src->start_of_file = FALSE;

        return FALSE;
    }

    src->pub.next_input_byte = src->buffer;
    src->pub.bytes_in_buffer = nbytes;
    src->start_of_file = FALSE;

    return TRUE;
}


/*
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
 */

EXTERN_C
METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
    while (num_bytes > (long) src->pub.bytes_in_buffer) {
      num_bytes -= (long) src->pub.bytes_in_buffer;
      (void) fill_input_buffer(cinfo);
    }
    src->pub.next_input_byte += (size_t) num_bytes;
    src->pub.bytes_in_buffer -= (size_t) num_bytes;
  }
}


/*
 * An additional method that can be provided by data source modules is the
 * resync_to_restart method for error recovery in the presence of RST markers.
 * For the moment, this source module just uses the default resync method
 * provided by the JPEG library.  That method assumes that no backtracking
 * is possible.
 */


/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

EXTERN_C
METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
EXTERN_C GLOBAL(void)
jpeg_ImgTask_src (j_decompress_ptr cinfo, CImgTask * pImgTask)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) { /* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                  ImgTask_BUF_SIZE * J_SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->infile = NULL;
  src->pImgTask = pImgTask;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}

/*
 * ERROR HANDLING:
 *
 * The JPEG library's standard error handler (jerror.c) is divided into
 * several "methods" which you can override individually.  This lets you
 * adjust the behavior without duplicating a lot of code, which you might
 * have to update with each future release.
 *
 * Our example here shows how to override the "error_exit" method so that
 * control is returned to the library's caller when a fatal error occurs,
 * rather than calling exit() as the standard error_exit method does.
 *
 * We use C's setjmp/longjmp facility to return control.  This means that the
 * routine which calls the JPEG library must first execute a setjmp() call to
 * establish the return point.  We want the replacement error_exit to do a
 * longjmp().  But we need to make the setjmp buffer accessible to the
 * error_exit routine.  To do this, we make a private extension of the
 * standard JPEG error handler object.  (If we were using C++, we'd say we
 * were making a subclass of the regular error handler.)
 *
 * Here's the extended error handler struct:
 */

struct my_error_mgr {
  struct jpeg_error_mgr pub;    /* "public" fields */
};

typedef struct my_error_mgr * my_error_ptr;

const int x_MapGraysToVGAPalette[3] = {
    0,
    7,
    15
};


/*
 * Here's the routine that will replace the standard error_exit method:
 */

EXTERN_C
METHODDEF(void)
my_error_exit (j_common_ptr cinfo)
{
  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
  (*cinfo->err->output_message) (cinfo);

  /* Return control to the setjmp point */
#ifdef WIN16
//  longjmp(myerr->setjmp_buffer, 1);
#else
    RaiseException(EXCEPTION_JPGLIB, EXCEPTION_NONCONTINUABLE, 0, NULL);
#endif
}

/*
 * Sample routine for JPEG decompression.  We assume that the JPEG file image
 * is passed in.  We want to return a pointer on success, NULL on error.
 */
/* This version of the routine uses the IJG dithering code to dither into our 6x6x6 cube */
void
CImgTaskJpg::Decode(BOOL *pfNonProgressive)
{
  /* This struct contains the JPEG decompression parameters and pointers to
   * working space (which is allocated as needed by the JPEG library).
   */
  struct jpeg_decompress_struct cinfo;
  /* We use our private extension JPEG error handler. */
  struct my_error_mgr jerr;
  /* More stuff */
  JSAMPARRAY buffer;        /* Output row buffer */
  int row_stride;       /* physical row width in output buffer */

  unsigned char HUGEP *pCurRow;

    int xsize, ysize;
    int irow;
    int x;
    int y;
    int num_rows_read;
    int notifyRow = 0;
    BYTE HUGEP * pbBits;
    int cbRow;
    BYTE xPixel;

    ERRBUF *pErrBuf1 = NULL, *pErrBuf2 = NULL;

  /* Step 1: allocate and initialize JPEG decompression object */

  /* We set up the normal JPEG error routines, then override error_exit. */
  cinfo.err = jpeg_std_error(&jerr.pub);
  jerr.pub.error_exit = my_error_exit;

  /* Establish the setjmp return context for my_error_exit to use. */
#ifndef WIN16
  __try
#endif // ndef WIN16
  {
      /* Now we can initialize the JPEG decompression object. */
      jpeg_create_decompress(&cinfo);

#ifdef _MAC
      setup_read_icc_profile(&cinfo);
#endif

      /* Step 2: specify data source (eg, a file, or a memory buffer) */


      jpeg_ImgTask_src(&cinfo, this);

      /* Step 3: read file parameters with jpeg_read_header() */

      (void) jpeg_read_header(&cinfo, TRUE);

#ifdef _MAC
      // colorsync
      JOCTET *      icc_data_ptr;
      unsigned int  icc_data_len;
      if (read_icc_profile(&cinfo, &icc_data_ptr, &icc_data_len) == TRUE)
      {
           _Profile = new CICCProfile(icc_data_ptr, icc_data_len);
           _MemFree(icc_data_ptr);
      }
#endif

      /* We can ignore the return value from jpeg_read_header since
       *   (a) suspension is not possible with the stdio data source, and
       *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
       * See libjpeg.doc for more info.
       */

      /* Step 4: set parameters for decompression */

        cinfo.dct_method = JDCT_ISLOW;

        switch (cinfo.jpeg_color_space)
        {
            case JCS_GRAYSCALE:

                if (_colorMode == 4)
                {
                    cinfo.out_color_space = JCS_GRAYSCALE;
                    cinfo.quantize_colors = TRUE;
                    cinfo.desired_number_of_colors = 3;
                    cinfo.two_pass_quantize = FALSE;
                    cinfo.dither_mode = JDITHER_FS;
                }
                else
                {
                    cinfo.out_color_space = JCS_GRAYSCALE;
                    /* We want the actual RGB data here */
                    cinfo.quantize_colors = FALSE;
                }
                break;

            default:
                if (_colorMode == 4)
                {
                    cinfo.out_color_space = JCS_RGB;
                    cinfo.quantize_colors = TRUE;
                    cinfo.desired_number_of_colors = 16;
                    cinfo.two_pass_quantize = FALSE;
                    cinfo.dither_mode = JDITHER_FS;
                    cinfo.colormap = (*cinfo.mem->alloc_sarray)
                        ((j_common_ptr) &cinfo, JPOOL_IMAGE, 16, 3);
                    {
                        int i;

                        for (i=0; i<16; i++)
                        {
                            cinfo.colormap[RGB_RED][i]   = g_peVga[i].peRed;
                            cinfo.colormap[RGB_GREEN][i] = g_peVga[i].peGreen;
                            cinfo.colormap[RGB_BLUE][i]  = g_peVga[i].peBlue;
                        }
                    }
                    cinfo.actual_number_of_colors = 16;
                }
                else
                {
                    cinfo.out_color_space = JCS_RGB;
                    /* We want the actual RGB data here */
                    cinfo.quantize_colors = FALSE;
                }
                break;
        }


      /* Step 5: Start decompressor */

      jpeg_start_decompress(&cinfo);

      /* We may need to do some setup of our own at this point before reading
       * the data.  After jpeg_start_decompress() we have the correct scaled
       * output image dimensions available, as well as the output colormap
       * if we asked for color quantization.
       * In this example, we need to make an output work buffer of the right size.
       */

       _xWid = xsize = cinfo.output_width;
       _yHei = ysize = cinfo.output_height;
       OnSize(_xWid, _yHei, -1);

        {
            CImgBitsDIB *pibd;

            _pImgBits = pibd = new CImgBitsDIB();
            if (!pibd)
            {
                my_error_exit((j_common_ptr) &cinfo);
            }

#ifdef _MAC
            HRESULT hr = THR(pibd->AllocDIB(32, _xWid, _yHei, NULL, 0, -1, TRUE));
#else
            HRESULT hr = THR(pibd->AllocDIB((_colorMode > 24) ? 24 : _colorMode, _xWid, _yHei, NULL, 0, -1, TRUE));
#endif
            if (hr)
            {
                my_error_exit((j_common_ptr) &cinfo);
            }

            pbBits = (BYTE *)pibd->GetBits();
            cbRow = pibd->CbLine();
            pibd->SetValidLines(0);
        }
        
        // Prepare for dithering, if necessary
        
        if (_colorMode < 24 && _colorMode != 4)
        {
            if (FAILED(AllocDitherBuffers(_xWid, &pErrBuf1, &pErrBuf2)))
                my_error_exit((j_common_ptr) &cinfo);
        }
        
        /* JSAMPLEs per row in output buffer */
        row_stride = cinfo.output_width * cinfo.output_components;
        /* Make a sample array that will go away when done with image */
        buffer = (*cinfo.mem->alloc_sarray)
              ((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 8);

      /* Step 6: while (scan lines remain to be read) */
      /*           jpeg_read_scanlines(...); */


      y = 0;
      while (y < ysize) {
        num_rows_read = jpeg_read_scanlines(&cinfo, buffer, 8);

        if (!num_rows_read)
            goto abort;
#ifdef _MAC
        if (cinfo.out_color_space == JCS_RGB)
        {
            for (irow = 0; irow < num_rows_read; irow++)
            {
                pCurRow = pbBits + (long) cbRow * (long) y; /* the DIB is stored upside down */

                for (x=0; x < xsize; x++)
                {
                    /*
                        DIB's are stored blue-green-red (backwards)
                    */
                    *pCurRow++;
                    *pCurRow++ = buffer[irow][x*3+RGB_RED];
                    *pCurRow++ = buffer[irow][x*3+RGB_GREEN];
                    *pCurRow++ = buffer[irow][x*3+RGB_BLUE];
                }
                y++;
            }
        }
        else
        {
            AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
            for (irow = 0; irow < num_rows_read; irow++)
            {
                pCurRow = pbBits + (long) cbRow * (long) y;  /* the DIB is stored upside down */

                for (x=0; x < xsize; x++)
                {
                    xPixel = buffer[irow][x];
                    *pCurRow++;
                    *pCurRow++ = xPixel;
                    *pCurRow++ = xPixel;
                    *pCurRow++ = xPixel;
                }
                y++;
            }
        }
#else  // _MAC
#ifdef UNIX
        if (_colorMode == 1)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                Dith24rto1(pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read);
            }
            else
            {
                DithGray8to1(pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else
#endif
        if (_colorMode == 4)
        {
            if (cinfo.out_color_space == JCS_RGB)
            {
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */

                    for (x = 0; x < xsize; x += 2)
                    {
                        *pCurRow++ = (buffer[irow][x] << 4) | (buffer[irow][x+1]);
                    }
                    y++;
                }
            }
            else
            {
                AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1); /* the DIB is stored upside down */

                    for (x = 0; x < xsize; x += 2)
                    {
                        *pCurRow++ = (x_MapGraysToVGAPalette[buffer[irow][x]] << 4)
                                    | x_MapGraysToVGAPalette[buffer[irow][x+1]];
                    }
                    y++;
                }
            }
        }
        else if (_colorMode == 8)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                Dith24rto8(pCurRow, &buffer[0][0], -cbRow, row_stride,  g_rgbHalftone, g_pInvCMAP, 
                                pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read);
            }
            else
            {
                DithGray8to8(pCurRow, &buffer[0][0], -cbRow, row_stride, g_rgbHalftone, g_pInvCMAP, 
                                pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else if (_colorMode == 15 || _colorMode == 16)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                if (_colorMode == 15)                
                    Convert24rto15((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, 
                                    0, xsize, y, num_rows_read);
                else
                    Convert24rto16((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride,  
                                    0, xsize, y, num_rows_read);
            }
            else
            {
                if (_colorMode == 15)
                    DithGray8to15((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 
                                    0, xsize, y, num_rows_read );
                else
                DithGray8to16((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 
                                0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else
        {
            if (cinfo.out_color_space == JCS_RGB)
            {
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1); /* the DIB is stored upside down */

                    for (x=0; x < xsize; x++)
                    {
                        /*
                            DIB's are stored blue-green-red (backwards)
                        */
                        *pCurRow++ = buffer[irow][x*3+RGB_BLUE];
                        *pCurRow++ = buffer[irow][x*3+RGB_GREEN];
                        *pCurRow++ = buffer[irow][x*3+RGB_RED];
                    }
                    y++;
                }
            }
            else
            {
                AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);  /* the DIB is stored upside down */

                    for (x=0; x < xsize; x++)
                    {
                        xPixel = buffer[irow][x];
                        *pCurRow++ = xPixel;
                        *pCurRow++ = xPixel;
                        *pCurRow++ = xPixel;
                    }
                    y++;
                }
            }
        }

#endif  // _MAC
        _yBot = y - 1;
        
        ((CImgBitsDIB *)_pImgBits)->SetValidLines(y);
        
        if (_yBot - notifyRow >= 4)
        {
            notifyRow = _yBot;
            OnProg(FALSE, IMGBITS_PARTIAL, FALSE, _yBot);
        }
      }

#ifdef _MAC
      ((CImgBitsDIB *)_pImgBits)->ReleaseBits();
#endif

      _ySrcBot = -1;
      OnProg(TRUE, IMGBITS_TOTAL, FALSE, _yBot);

      /* Step 7: Finish decompression */

      (void) jpeg_finish_decompress(&cinfo);
      /* We can ignore the return value since suspension is not possible
       * with the stdio data source.
       */

      /* Step 8: Release JPEG decompression object */

      /* This is an important step since it will release a good deal of memory. */
      jpeg_destroy_decompress(&cinfo);

      /* After finish_decompress, we can close the input file.
       * Here we postpone it until after no more JPEG errors are possible,
       * so as to simplify the setjmp error logic above.  (Actually, I don't
       * think that jpeg_destroy can do an error exit, but why assume anything...)
       */

      /* At this point you may want to check to see whether any corrupt-data
       * warnings occurred (test whether jerr.pub.num_warnings is nonzero).
       */

      ((CImgBitsDIB *)_pImgBits)->SetValidLines(_yHei);
      
      if (pErrBuf1)
        FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
      /* And we're done! */

      return;

    abort:
      jpeg_destroy_decompress(&cinfo);

      if (pErrBuf1)
        FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
      if (_yBot > 31)
        _ySrcBot = _yBot + 1;
      return;
    }
#ifndef WIN16
    __except (GetExceptionCode() == EXCEPTION_JPGLIB ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
    {
        /* If we get here, the JPEG code has signaled an error.
         * We need to clean up the JPEG object, close the input file, and return.
         */

        /*
            TODO call WAIT_Pop ?
        */
        jpeg_destroy_decompress(&cinfo);

        if (pErrBuf1)
            FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
        return;
    }
    __endexcept
#endif
}

/*
 * SOME FINE POINTS:
 *
 * We cheated a bit by calling alloc_sarray() after jpeg_start_decompress();
 * we should have done it beforehand to ensure that the space would be
 * counted against the JPEG max_memory setting.  In some systems the above
 * code would risk an out-of-memory error.  However, in general we don't
 * know the output image dimensions before jpeg_start_decompress(), unless we
 * call jpeg_calc_output_dimensions().  See libjpeg.doc for more about this.
 *
 * Scanlines are returned in the same order as they appear in the JPEG file,
 * which is standardly top-to-bottom.  If you must emit data bottom-to-top,
 * you can use one of the virtual arrays provided by the JPEG memory manager
 * to invert the data.  See wrbmp.c for an example.
 *
 * As with compression, some operating modes may require temporary files.
 * On some systems you may need to set up a signal handler to ensure that
 * temporary files are deleted if the program is interrupted.  See libjpeg.doc.
 */

//  Performs a StretchDIBits for progressive draw (deals with
//  only some of the data being available etc
void CImgTaskJpg::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    if (_pImgBits)
    {
        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}

CImgTask * NewImgTaskJpg()
{
    return(new CImgTaskJpg);
}

// Detecting MMX --------------------------------------------------------------

#if defined(_X86_) && !defined(WIN16)

extern "C" int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
    extern DWORD g_dwPlatformID;
    volatile int iResult;
    HKEY    hkey = NULL;
    BOOL    fRet = TRUE;
    BOOL    fDefaultOverridden = FALSE;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Internet Explorer"), 0, KEY_QUERY_VALUE, &hkey) == ERROR_SUCCESS)
    {
        BYTE        szData[5];
        DWORD       dwSize = sizeof(szData);
        DWORD       dwType;

        if (RegQueryValueEx(hkey, TEXT("UseMMX"), NULL, &dwType, szData, &dwSize) == ERROR_SUCCESS)
        {
            if (*szData)
            {
                fRet = (*szData != '0');
                fDefaultOverridden = TRUE;
            }
        }

        CloseHandle(hkey);
    }

    if (fDefaultOverridden && !fRet)
        return fRet;

    if (g_dwPlatformID == VER_PLATFORM_WIN32_NT)
    {
        typedef BOOL (WINAPI *PFNPFP)(DWORD dw);
        PFNPFP pfnIsPFP = (PFNPFP)GetProcAddress(GetModuleHandleA("kernel32"), "IsProcessorFeaturePresent");

        // On NT, we can just ask the OS if MMX instructions are available

        if (pfnIsPFP && !pfnIsPFP(PF_MMX_INSTRUCTIONS_AVAILABLE))
        {
            return(FALSE);
        }
    }
    else
    {
        // On non-NT platform, do it the old fashioned way

        __asm {     push        ebx
                    pushfd
                    pop         edx
                    mov         eax,edx
                    xor         edx,200000h
                    push        edx
                    popfd
                    pushfd
                    pop         edx
                    xor         edx,eax 
                    je          no_cpuid
                    mov         eax,1
                    _emit       0x0f     //CPUID magic incantation
                    _emit       0xa2
                    and         edx,000800000h
                    shr         edx,23
        no_cpuid:   mov         iResult,edx
                    pop         ebx
        }

        if (!iResult)
        {
            return(FALSE);
        }
    }

    // Just to be sure, try executing an MMX instruction and see if it barfs

    iResult = 1;

    __try
    {
        _asm    punpckldq   mm7,mm2
        _asm    emms
    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        iResult = 0;
    }

    // If the processor is a Pentium 3, disable MMX usage, unless the default action has been
    // overridden by the registry
    // Checkout: http://developer.intel.com/design/pentiumii/applnots/241618.htm
    if (!fDefaultOverridden && iResult)
    {
// Bit masks for the CPUID information
#define CPU_TYPE        0x00003000
#define CPU_FAMILY      0x00000F00
#define CPU_MODEL       0x000000F0
#define CPU_STEPPING    0x0000000F

#define CPU_PENTIUM3    0x00000670      // Family = 6, Model = 7, Stepping doesn't matter
#define CPUID           {   __asm _emit 0x0f    __asm _emit 0xa2  }

        DWORD   dwCPUInfo;

        __asm   mov     eax, 1
        CPUID
        __asm   mov     dwCPUInfo, eax

        if ((dwCPUInfo & CPU_PENTIUM3) == CPU_PENTIUM3)
        {
            iResult = 0;
        }

    }

    return(iResult);
}

#else

extern "C" int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
    return 0;
}

#endif

#ifdef _MAC
/*
 * Prepare for reading an ICC profile
 */

void
setup_read_icc_profile (j_decompress_ptr cinfo)
{
  /* Tell the library to keep any APP2 data it may find */
  jpeg_save_markers(cinfo, ICC_MARKER, 0xFFFF);
}


/*
 * Handy subroutine to test whether a saved marker is an ICC profile marker.
 */

static boolean
marker_is_icc (jpeg_saved_marker_ptr marker)
{
  return
    marker->marker == ICC_MARKER &&
    marker->data_length >= ICC_OVERHEAD_LEN &&
    /* verify the identifying string */
    GETJOCTET(marker->data[0]) == 0x49 &&
    GETJOCTET(marker->data[1]) == 0x43 &&
    GETJOCTET(marker->data[2]) == 0x43 &&
    GETJOCTET(marker->data[3]) == 0x5F &&
    GETJOCTET(marker->data[4]) == 0x50 &&
    GETJOCTET(marker->data[5]) == 0x52 &&
    GETJOCTET(marker->data[6]) == 0x4F &&
    GETJOCTET(marker->data[7]) == 0x46 &&
    GETJOCTET(marker->data[8]) == 0x49 &&
    GETJOCTET(marker->data[9]) == 0x4C &&
    GETJOCTET(marker->data[10]) == 0x45 &&
    GETJOCTET(marker->data[11]) == 0x0;
}
 /*
 * See if there was an ICC profile in the JPEG file being read;
 * if so, reassemble and return the profile data.
 *
 * TRUE is returned if an ICC profile was found, FALSE if not.
 * If TRUE is returned, *icc_data_ptr is set to point to the
 * returned data, and *icc_data_len is set to its length.
 *
 * IMPORTANT: the data at **icc_data_ptr has been allocated with malloc()
 * and must be freed by the caller with free() when the caller no longer
 * needs it.  (Alternatively, we could write this routine to use the
 * IJG library's memory allocator, so that the data would be freed implicitly
 * at jpeg_finish_decompress() time.  But it seems likely that many apps
 * will prefer to have the data stick around after decompression finishes.)
 *
 * NOTE: if the file contains invalid ICC APP2 markers, we just silently
 * return FALSE.  You might want to issue an error message instead.
 */

boolean
read_icc_profile (j_decompress_ptr cinfo,
          JOCTET **icc_data_ptr,
          unsigned int *icc_data_len)
{
  jpeg_saved_marker_ptr marker;
  int num_markers = 0;
  int seq_no;
  JOCTET *icc_data;
  unsigned int total_length;
#define MAX_SEQ_NO  255        /* sufficient since marker numbers are bytes */
  char marker_present[MAX_SEQ_NO+1];      /* 1 if marker found */
  unsigned int data_length[MAX_SEQ_NO+1]; /* size of profile data in marker */
  unsigned int data_offset[MAX_SEQ_NO+1]; /* offset for data in marker */

  *icc_data_ptr = NULL;   /* avoid confusion if FALSE return */
  *icc_data_len = 0;

  /* This first pass over the saved markers discovers whether there are
   * any ICC markers and verifies the consistency of the marker numbering.
   */

  for (seq_no = 1; seq_no <= MAX_SEQ_NO; seq_no++)
    marker_present[seq_no] = 0;

  for (marker = cinfo->marker_list; marker != NULL; marker = marker->next) {
    if (marker_is_icc(marker)) {
      if (num_markers == 0)
    num_markers = GETJOCTET(marker->data[13]);
      else if (num_markers != GETJOCTET(marker->data[13]))
    return FALSE;       /* inconsistent num_markers fields */
      seq_no = GETJOCTET(marker->data[12]);
      if (seq_no <= 0 || seq_no > num_markers)
    return FALSE;       /* bogus sequence number */
      if (marker_present[seq_no])
    return FALSE;       /* duplicate sequence numbers */
      marker_present[seq_no] = 1;
      data_length[seq_no] = marker->data_length - ICC_OVERHEAD_LEN;
    }
  }

  if (num_markers == 0)
    return FALSE;

  /* Check for missing markers, count total space needed,
   * compute offset of each marker's part of the data.
   */

  total_length = 0;
  for (seq_no = 1; seq_no <= num_markers; seq_no++) {
    if (marker_present[seq_no] == 0)
      return FALSE;     /* missing sequence number */
    data_offset[seq_no] = total_length;
    total_length += data_length[seq_no];
  }

  if (total_length <= 0)
    return FALSE;       /* found only empty markers? */

  /* Allocate space for assembled data */
  icc_data = (JOCTET *) MemAlloc(Mt(CImgTaskGifStack),total_length * sizeof(JOCTET));
  if (icc_data == NULL)
    return FALSE;       /* oops, out of memory */

  /* and fill it in */
  for (marker = cinfo->marker_list; marker != NULL; marker = marker->next) {
    if (marker_is_icc(marker)) {
      JOCTET FAR *src_ptr;
      JOCTET *dst_ptr;
      unsigned int length;
      seq_no = GETJOCTET(marker->data[12]);
      dst_ptr = icc_data + data_offset[seq_no];
      src_ptr = marker->data + ICC_OVERHEAD_LEN;
      length = data_length[seq_no];
      while (length--) {
    *dst_ptr++ = *src_ptr++;
      }
    }
  }

  *icc_data_ptr = icc_data;
  *icc_data_len = total_length;

  return TRUE;
}

#endif // _MAC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgload.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       imgload.cxx
//
//  Contents:   CImgLoad
//              CImgTask
//              CImgTaskExec
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_W95FIBER_H_
#define X_W95FIBER_H_
#include "w95fiber.h"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagImgLoad,      "Dwn", "Trace CImgLoad")
PerfDbgTag(tagImgTask,      "Dwn", "Trace CImgTask")
PerfDbgTag(tagImgTaskIO,    "Dwn", "Trace CImgTask I/O")
PerfDbgTag(tagImgProgSlow,  "Dwn", "! Slow progressive rendering")
PerfDbgTag(tagImgAnimSlow,  "Dwn", "! Slow progressive animation")

DeclareTag(tagImgTrans,     "Img", "trace img transparency");

MtDefine(CImgLoad, Dwn, "CImgLoad")
MtDefine(CImgTaskExec, Dwn, "CImgTaskExec")

// Globals --------------------------------------------------------------------

CImgTaskExec *   g_pImgTaskExec;
extern BOOL      g_fWhistlerOS;

// CImgLoad ----------------------------------------------------------------

CImgLoad::~CImgLoad()
{
    if (_pImgTask)
        _pImgTask->SubRelease();
}

void
CImgLoad::Passivate()
{
    super::Passivate();

    if (_pImgTask)
    {
        // The task is needed by the asynchronous callback methods, but here
        // we want to passivate it by releasing the last reference but
        // maintaining a secondary reference which will be released by the
        // destructor.

        _pImgTask->SubAddRef();
        _pImgTask->Release();
    }
}

HRESULT
CImgLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo)
{
    PerfDbgLog(tagImgLoad, this, "+CImgLoad::Init");

    HRESULT hr = E_FAIL;

    DWORD dwFlags = 0, dwZone = URLZONE_INTERNET;
    
    LPCTSTR pchReferrer = pdli->pDwnDoc->GetSubReferer();

    IInternetSecurityManager* pISM = NULL; 

    hr = CoInternetCreateSecurityManager(NULL, &pISM, 0);
    if (SUCCEEDED(hr))
    {
        hr = pISM->MapUrlToZone(pchReferrer,&dwZone,0);
        ClearInterface(&pISM);
    }

    if(SUCCEEDED(hr) && URLZONE_UNTRUSTED == dwZone)
    {
        dwFlags |= DWNF_ENFORCERESTRICTED;
    }

    hr = THR(super::Init(pdli, pDwnInfo, 
                IDS_BINDSTATUS_DOWNLOADINGDATA_PICTURE,
                DWNF_GETMODTIME | DWNF_GETFLAGS | DWNF_IMGLOAD | dwFlags));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagImgLoad, this, "-CImgLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CImgLoad::OnBindHeaders()
{
    PerfDbgLog(tagImgLoad, this, "+CImgLoad::OnBindHeaders");
    FILETIME ft;
    HRESULT hr = S_OK;

    // (jbeda) If we got a redirect, don't bother trying the cache.  
    // Perhaps the right thing to do here is to key the cache
    // off of the redirected URL.  This will at least make sure
    // we are correct for now.
    if (    !_pDwnInfo->TstFlags(DWNF_DOWNLOADONLY) 
        &&  !_pDwnBindData->GetRedirect())
    {
        ft = _pDwnBindData->GetLastMod();

        if (ft.dwLowDateTime || ft.dwHighDateTime)
        {
            if (_pDwnInfo->AttachByLastMod(this, &ft, _pDwnBindData->IsFullyAvail()))
            {
                CDwnDoc * pDwnDoc = _pDwnBindData->GetDwnDoc();

                if (pDwnDoc)
                {
                    DWNPROG DwnProg;
                    _pDwnBindData->GetProgress(&DwnProg);
                    pDwnDoc->AddBytesRead(DwnProg.dwMax);
                }

                _pDwnBindData->Disconnect();
                OnDone(S_OK);

                hr = S_FALSE;
                goto Cleanup;
            }
        }
    }

    _pDwnInfo->SetSecFlags(_pDwnBindData->GetSecFlags());
    
Cleanup:    
    PerfDbgLog1(tagImgLoad, this, "-CImgLoad::OnBindHeaders (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

HRESULT
CImgLoad::OnBindMime(const MIMEINFO * pmi)
{
    PerfDbgLog1(tagImgLoad, this, "+CImgLoad::OnBindMime %ls",
        pmi ? pmi->pch : g_Zero.ach);

    CImgTask *  pImgTask = NULL;
    HRESULT     hr       = S_OK;

    if (!pmi || _pDwnInfo->TstFlags(DWNF_DOWNLOADONLY))
    {
        hr = S_OK;
        goto Cleanup;
    }

    if (!pmi->pfnImg)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    _pDwnInfo->SetMimeInfo(pmi);

    pImgTask = pmi->pfnImg();

    if (pImgTask == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pImgTask->Init(GetImgInfo(), pmi, _pDwnBindData);

    hr = THR(StartImgTask(pImgTask));
    if (hr)
        goto Cleanup;

    EnterCriticalSection();

    if (_fPassive)
        hr = E_ABORT;
    else
    {
        _pImgTask = pImgTask;
        pImgTask  = NULL;
    }

    LeaveCriticalSection();

    if (hr == S_OK)
    {
        GetImgInfo()->OnLoadTask(this, _pImgTask);
    }

Cleanup:
    if (pImgTask)
        pImgTask->Release();
    PerfDbgLog1(tagImgLoad, this, "-CImgLoad::OnBindMime (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CImgLoad::OnBindData()
{
    PerfDbgLog(tagImgLoad, this, "+CImgLoad::OnBindData");

    HRESULT hr = S_OK;

    if (_pImgTask)
    {
        _pImgTask->SetBlocked(FALSE);
    }
    else if (_pDwnInfo->TstFlags(DWNF_DOWNLOADONLY))
    {
        BYTE  ab[1024];
        ULONG cb;

        do
        {
            hr = THR(_pDwnBindData->Read(ab, sizeof(ab), &cb));
        }
        while (!hr && cb);
    }
    else
    {
#if !defined(WINCE) && !defined(WIN16)
        // If we're getting data but never got a valid mime type that we
        // know how to decode, use the data to figure out if a pluggable
        // decoder should be used.

        BYTE        ab[200];
        ULONG       cb;
        const MIMEINFO *  pmi;
        
        hr = THR(_pDwnBindData->Peek(ab, ARRAY_SIZE(ab), &cb));
        if (hr)
            goto Cleanup;

        if (cb < ARRAY_SIZE(ab) && _pDwnBindData->IsPending())
            goto Cleanup;

        pmi = GetMimeInfoFromData(ab, cb, _pDwnBindData->GetContentType());
        
        if (!pmi || !pmi->pfnImg)
        {
            pmi = _pDwnBindData->GetRawMimeInfoPtr();
            if( !pmi || !pmi->pfnImg )
            {
                hr = E_ABORT;
                goto Cleanup;
            }
        }

        hr = OnBindMime(pmi);
        if (hr)
            goto Cleanup;

        _pImgTask->SetBlocked(FALSE);
#else
        hr = E_ABORT;
#endif
    }

Cleanup:
    PerfDbgLog1(tagImgLoad, this, "-CImgLoad::OnBindData (hr=%lX)", hr);
    RRETURN(hr);
}

void
CImgLoad::OnBindDone(HRESULT hrErr)
{
    PerfDbgLog1(tagImgLoad, this, "+CImgLoad::OnBindDone (hrErr=%lX)", hrErr);

    CImgInfo *pImgInfo = (CImgInfo *)_pDwnInfo;

    if (_pImgTask)
        _pImgTask->SetBlocked(FALSE);

    pImgInfo->_dwPrivacyFlags = _pDwnBindData->GetPrivacyFlags();
    pImgInfo->SetPolicyRef(_pDwnBindData->GetPolicyRef());

    OnDone(hrErr);

    PerfDbgLog(tagImgLoad, this, "-CImgLoad::OnBindDone");
}

// CImgTask -------------------------------------------------------------------

CImgTask::~CImgTask()
{
    PerfDbgLog(tagImgTask, this, "+CImgTask::~CImgTask");

    if (_pImgInfo)
        _pImgInfo->SubRelease();

    if (_pDwnBindData)
        _pDwnBindData->Release();

    if (!_fComplete)
    {
        FreeGifAnimData(&_gad, (CImgBitsDIB *)_pImgBits);
#ifndef NO_ART
        if (_pArtPlayer)
            delete _pArtPlayer;
#endif
#ifdef _MAC
        if(_Profile)
            _Profile->Release();
#endif
        if (_pImgBits)
            delete _pImgBits;
    }

    PerfDbgLog(tagImgTask, this, "-CImgTask::~CImgTask");
}

void
CImgTask::Init(CImgInfo * pImgInfo, const MIMEINFO * pmi, CDwnBindData * pDwnBindData)
{
    PerfDbgLog1(tagImgTask, this, "+CImgTask::Init %ls", pImgInfo->GetUrl());

    _colorMode  = pImgInfo->GetColorMode();
    _pmi        = pmi;
    _lTrans     = -1;
    _ySrcBot    = -2;

    _pImgInfo = pImgInfo;
    _pImgInfo->SubAddRef();

    _pDwnBindData = pDwnBindData;
    _pDwnBindData->AddRef();

    TraceTag((tagImgTrans, "CImgTask %x (info %x) Init _lTrans = %d  %ls",
                    this, pImgInfo, _lTrans, _pDwnBindData->FileNameDbg()));

    PerfDbgLog(tagImgTask, this, "-CImgTask::Init");
}

void
CImgTask::Run()
{
    PerfDbgLog(tagImgTask, this, "+CImgTask::Run");

    GetImgTaskExec()->RunTask(this);

    PerfDbgLog(tagImgTask, this, "-CImgTask::Run");
}

BOOL
CImgTask::Read(void * pv, ULONG cb, ULONG * pcbRead, ULONG cbMinReq)
{
    PerfDbgLog1(tagImgTaskIO, this, "+CImgTask::Read (req %ld)", cb);

    ULONG   cbReq = cb, cbGot, cbTot = 0;
    HRESULT hr    = S_OK;

    if (cbMinReq == 0 || cbMinReq > cb)
        cbMinReq = cb;

    for (;;)
    {
        if (_fTerminate)
        {
            hr = E_ABORT;
            break;
        }

        hr = THR(_pDwnBindData->Read(pv, cbReq, &cbGot));
        if (hr)
            break;

        cbTot += cbGot;
        cbReq -= cbGot;
        pv = (BYTE *)pv + cbGot;

        if (cbReq == 0)
            break;

        if (!cbGot || IsTimeout())
        {
            if (    _pDwnBindData->IsEof()
                ||  (!cbGot && cbTot >= cbMinReq))
                break;

            PerfDbgLog2(tagImgTask, this, "-CImgTask::Read (fiber %ld yield %s)",
                _pfi - g_pImgTaskExec->_afi, cbGot ? "timeout" : "pending");

            GetImgTaskExec()->YieldTask(this, !cbGot);

            PerfDbgLog1(tagImgTask, this, "+CImgTask::Read (fiber %ld resume)",
                _pfi - g_pImgTaskExec->_afi);
        }
    }

    if (pcbRead)
    {
        *pcbRead = cbTot;
    }

    PerfDbgLog3(tagImgTaskIO, this, "-CImgTask::Read (got %ld) %c%c",
        cbTot, _pDwnBindData->IsEof() ? 'E' : ' ',
        hr == S_OK && cbTot > 0 ? 'T' : 'F');

    return(hr == S_OK && cbTot > 0);
}

void
CImgTask::Terminate()
{
    if (!_fTerminate)
    {
        _fTerminate = TRUE;
        SetBlocked(FALSE);
    }
}

void
CImgTask::OnProg(BOOL fLast, ULONG ulBits, BOOL fAll, LONG yBot)
{
    DWORD dwTick = GetTickCount();

    _yTopProg = Union(_yTopProg, _yBotProg, fAll, yBot);
    _yBotProg = yBot;

    if (fLast || (dwTick - _dwTickProg > 1000))
    {
        _dwTickProg = dwTick;

        _pImgInfo->OnTaskProg(this, ulBits, _yTopProg == -1, _yBotProg);

        _yTopProg = _yBotProg;
    }

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagImgProgSlow))
        Sleep(100);
    #endif
}

void
CImgTask::OnAnim()
{
    _pImgInfo->OnTaskAnim(this);

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagImgAnimSlow))
        Sleep(1000);
    #endif
}

void
CImgTask::Exec()
{
    BOOL fNonProgressive = FALSE;

    _dwTickProg = GetTickCount();

    Decode(&fNonProgressive);
    if (_pImgInfo->TstFlags(DWNF_MIRRORIMAGE))
    {
        if(_pImgBits)
        {
           ((CImgBitsDIB*)(_pImgBits))->SetMirrorStatus(TRUE);
        }
    }
    
    if (_pImgBits && _ySrcBot > -2)
    {
#ifdef NO_ART
        _fComplete = _pImgInfo->OnTaskBits(this, _pImgBits,
            &_gad, NULL, _lTrans, _ySrcBot, fNonProgressive
#ifdef _MAC
            ,_Profile
#endif _MAC
            );
#else
        _fComplete = _pImgInfo->OnTaskBits(this, _pImgBits,
            &_gad, _pArtPlayer, _lTrans, _ySrcBot, fNonProgressive
#ifdef _MAC
            ,_Profile
#endif _MAC
         );
#endif
    }

    if (_ySrcBot == -2 || (_fComplete && _ySrcBot != -1))
    {
        OnProg(TRUE, _ySrcBot == -2 ? IMGBITS_NONE : IMGBITS_PARTIAL,
            TRUE, _yBot);
    }

    #if DBG==1 || defined(PERFTAGS)
    if (_ySrcBot != -1)
        PerfDbgLog4(tagImgTask, this,
            "CImgTask::Exec [%s decode (%ld of %ld) for %ls]",
            _ySrcBot == -2 ? "Failed" : "Partial", max(0L, _ySrcBot),
            _gad.pgf ? _gad.pgf->height : _yHei, GetUrl());
    #endif

    if (_fComplete && _ySrcBot == -1 && !_pDwnBindData->IsEof())
    {
        BYTE ab[512];

        // The image is fully decoded but the binding hasn't reached EOF.
        // Attempt to read the final EOF to allow the binding to complete
        // normally.  This will make sure that HTTP downloads don't delete
        // the cache file just because a decoder (such as the BMP decoder)
        // knows how many bytes to expect based on the header and doesn't
        // stick around until it sees EOF.

        Read(ab, sizeof(ab), NULL);
    }

    if (!_pDwnBindData->IsEof())
    {
        // Looks like the decoder didn't like the data.  Since it is still
        // flowing and we don't need any more of it, abort the binding.

        _pDwnBindData->Terminate(E_ABORT);
    }

    _fTerminate = TRUE;
}

#ifndef NO_ART
BOOL
CImgTask::DoTaskGetReport(CArtPlayer * pArtPlayer)
{
    BOOL fResult = FALSE;

    if ((pArtPlayer == _pArtPlayer) && _pImgBits)
        fResult = _pArtPlayer->GetArtReport((CImgBitsDIB **)_pImgBits,
                        _yHei, _colorMode);

    return (fResult);
}
#endif

// CImgTaskExec ---------------------------------------------------------------

void
CImgTaskExec::YieldTask(CImgTask * pImgTask, BOOL fBlock)
{
    if (fBlock)
    {
        pImgTask->SetBlocked(TRUE);
    }

    SuspendCAP();
    SwitchesEndTimer(SWITCHES_TIMER_DECODEIMAGE);

    FbrSwitchToFiber(_pvFiberMain);

    SwitchesBegTimer(SWITCHES_TIMER_DECODEIMAGE);
    ResumeCAP();
}

FIBERINFO *
CImgTaskExec::GetFiber(CImgTask * pImgTask)
{
    BOOL        fAll = pImgTask->IsFullyAvail() ? 0 : 1;
    FIBERINFO * pfi  = &_afi[fAll];
    UINT        cfi  = ARRAY_SIZE(_afi) - fAll;

    for (; cfi > 0; --cfi, ++pfi)
    {
        if (pfi->pImgTask == NULL)
            goto found;
    }

    return(NULL);

found:

    if (pfi->pvFiber == NULL)
    {
        pfi->pvMain = _pvFiberMain;

        if (pfi->pvMain)
        {
            pfi->pvFiber = FbrCreateFiber(0x8000, FiberProc, pfi);
        }

        if (pfi->pvFiber == NULL)
            return(NULL);
    }

    return(pfi);
}

void
CImgTaskExec::AssignFiber(FIBERINFO * pfi)
{
    BOOL fAll = (pfi == &_afi[0]);

    EnterCriticalSection();

    CImgTask * pImgTask = (CImgTask *)_pDwnTaskHead;

    for (; pImgTask; pImgTask = (CImgTask *)pImgTask->_pDwnTaskNext)
    {
        if (    pImgTask->_fWaitForFiber
            &&  !pImgTask->_fTerminate
            &&  !pImgTask->_pfi
            &&  (!fAll || pImgTask->IsFullyAvail()))
        {
            pfi->pImgTask = pImgTask;
            pImgTask->_pfi = pfi;
            pImgTask->_fWaitForFiber = FALSE;
            pImgTask->SubAddRef();
            pImgTask->SetBlocked(FALSE);
            goto Cleanup;
        }
    }

Cleanup:
    LeaveCriticalSection();    
}

void
CImgTaskExec::RunTask(CImgTask * pImgTask)
{
    FIBERINFO * pfi = pImgTask->_pfi;

    if (pfi == NULL && !pImgTask->_fTerminate)
    {
        pfi = GetFiber(pImgTask);

        if (pfi)
        {
            pfi->pImgTask = pImgTask;
            pImgTask->_pfi = pfi;
            pImgTask->_fWaitForFiber = FALSE;
            pImgTask->SubAddRef();
        }
        else
        {
            // No fiber available.  Note that when one becomes available
            // there may be a task waiting to hear about it.

            pImgTask->_fWaitForFiber = TRUE;
            pImgTask->SetBlocked(TRUE);
            goto Cleanup;
        }
    }

    if (pfi)
    {
        Assert(pfi->pImgTask == pImgTask);
        Assert(pImgTask->_pfi == pfi);

        SwitchesEndTimer(SWITCHES_TIMER_DECODEIMAGE);
        SuspendCAP();

        FbrSwitchToFiber(pfi->pvFiber);

        ResumeCAP();
        SwitchesBegTimer(SWITCHES_TIMER_DECODEIMAGE);

        if (pImgTask->_pfi == NULL)
        {
            pImgTask->SubRelease();
            AssignFiber(pfi);
        }
    }

    // If the image task is done (or forcibly termintate)
    // delete the task from the queue.  However, if the task
    // still has a fiber attached to it, wait to do this until
    // that fiber proc is done with the task.
    if (    pImgTask->_fTerminate
        &&  (   !pfi
             ||  pfi->pImgTask != pImgTask))
    {
        pImgTask->_pImgInfo->OnTaskDone(pImgTask);
        super::DelTask(pImgTask);
    }

Cleanup:
    return;
}

HRESULT
CImgTaskExec::ThreadInit()
{
    PerfDbgLog(tagImgTask, this, "+CImgTaskExec::ThreadInit");

    // Name this thread for IceCAP
    NameThread("ImgTask");

    HRESULT hr;

    hr = THR(super::ThreadInit());
    if (hr)
        goto Cleanup;

    if (FbrAttachToBase())
    {
        _pvFiberMain = FbrConvertThreadToFiber(0);
    }

Cleanup:
    PerfDbgLog(tagImgTask, this, "-CImgTaskExec::ThreadInit");
    RRETURN(hr);
}

void
CImgTaskExec::ThreadTerm()
{
    PerfDbgLog(tagImgTask, this, "+CImgTaskExec::ThreadTerm");

    FIBERINFO * pfi = _afi;
    UINT        cfi = ARRAY_SIZE(_afi);

    for (; cfi > 0; --cfi, ++pfi)
    {
        if (pfi->pImgTask)
        {
            pfi->pImgTask->_pfi = NULL;
            pfi->pImgTask->SubRelease();
            pfi->pImgTask = NULL;
        }
        if (pfi->pvFiber)
        {
            FbrDeleteFiber(pfi->pvFiber);
            pfi->pvFiber = NULL;
        }
    }

    // Manually release any tasks remaining on the queue.  Don't call super::ThreadTerm
    // because it tries to call Terminate() on the task and expects it to dequeue.  Our
    // tasks don't dequeue in Terminate() though, so we end up in an infinite loop.

    while (_pDwnTaskHead)
    {
        CImgTask * pImgTask = (CImgTask *)_pDwnTaskHead;
        _pDwnTaskHead = pImgTask->_pDwnTaskNext;
        Assert(pImgTask->_fEnqueued);
        pImgTask->SubRelease();
    }

    PerfDbgLog(tagImgTask, this, "-CImgTaskExec::ThreadTerm");
}

void
CImgTaskExec::ThreadExit()
{
    PerfDbgLog(tagImgTask, this, "CImgTaskExec::ThreadExit");

    void * pvMain = _pvFiberMain;

    if (_fCoInit)
    {
        CoUninitialize();
    }

    super::ThreadExit();

    if (pvMain)
    {
        if (!g_fWhistlerOS)
        {
            // Due to a bug in the Win95 and WinNT implementation of fibers,
            // we don't call FbrDeleteFiber(pvMain) anymore.  Instead we manually
            // free the fiber data for the main fiber on this thread.

            LocalFree(pvMain);
            FbrDetachFromBase();
        }
        else
        {
            // the bug mentioned above is fixed on Whistler
            FbrDeleteFiber(pvMain);
        }
    }
}

void
CImgTaskExec::ThreadTimeout()
{
    PerfDbgLog(tagImgTask, this, "+CImgTaskExec::ThreadTimeout");

    KillImgTaskExec();

    PerfDbgLog(tagImgTask, this, "-CDwnTaskExec::ThreadTimeout");
}

void WINAPI
CImgTaskExec::FiberProc(void * pv)
{
    FIBERINFO * pfi = (FIBERINFO *)pv;
    CImgTask * pImgTask = NULL;

    SwitchesBegTimer(SWITCHES_TIMER_DECODEIMAGE);
    StartCAP();

    while (pfi)
    {
        PerfDbgLog1(tagImgTask, pImgTask, "CImgTaskExec::FiberProc (fiber "
            "%ld attach)", pfi - g_pImgTaskExec->_afi);

        pImgTask = pfi->pImgTask;
        pImgTask->Exec();
        pfi->pImgTask = NULL;
        pImgTask->_pfi = NULL;

        PerfDbgLog1(tagImgTask, pImgTask, "CImgTaskExec::FiberProc (fiber "
            "%ld detach)", pfi - g_pImgTaskExec->_afi);

        SwitchesEndTimer(SWITCHES_TIMER_DECODEIMAGE);
        SuspendCAP();

        FbrSwitchToFiber(pfi->pvMain);

        ResumeCAP();
        SwitchesBegTimer(SWITCHES_TIMER_DECODEIMAGE);
    }

    StopCAP();
    SwitchesEndTimer(SWITCHES_TIMER_DECODEIMAGE);
}

HRESULT
CImgTaskExec::RequestCoInit()
{
    HRESULT hr = S_OK;

    if (!_fCoInit)
    {
        hr = CoInitialize(NULL);

        if (!FAILED(hr))
        {
            _fCoInit = TRUE;
            hr = S_OK;
        }
    }

    RRETURN(hr);
}

#if DBG==1

void
CImgTaskExec::Invariant()
{
    EnterCriticalSection();

    FIBERINFO * pfi = _afi;
    UINT        cfi = ARRAY_SIZE(_afi);
    CImgTask *  pImgTask;
    BOOL        fFound;

    super::Invariant();

    // Because the invariant is looking at the fiber list, this code can only be
    // run on the CImgTaskExec thread.

    if (_dwThreadId != GetCurrentThreadId())
        cfi = 0;

    for (; cfi > 0; --cfi, ++pfi)
    {
        Assert(!pfi->pImgTask || pfi->pImgTask->_pfi == pfi);

        fFound   = !pfi->pImgTask;
        pImgTask = fFound ? NULL : (CImgTask *)_pDwnTaskHead;

        for (; pImgTask; pImgTask = (CImgTask *)pImgTask->_pDwnTaskNext)
        {
            if (pImgTask == pfi->pImgTask)
            {
                fFound = TRUE;
                break;
            }
        }

        Assert(fFound);
    }

    LeaveCriticalSection();
}

#endif

// External Functions ---------------------------------------------------------

HRESULT
StartImgTask(CImgTask * pImgTask)
{
    PerfDbgLog1(tagImgTask, NULL, "+StartImgTask %lX", pImgTask);

    HRESULT hr = S_OK;

    g_csImgTaskExec.Enter();

    if (g_pImgTaskExec == NULL)
    {
        g_pImgTaskExec = new CImgTaskExec(g_csImgTaskExec.GetPcs());

        if (g_pImgTaskExec == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(g_pImgTaskExec->Launch());

        if (hr)
        {
            g_pImgTaskExec->Release();
            g_pImgTaskExec = NULL;
            goto Cleanup;
        }
    }

    g_pImgTaskExec->AddTask(pImgTask);

Cleanup:
    g_csImgTaskExec.Leave();
    PerfDbgLog(tagImgTask, NULL, "-StartImgTask");
    RRETURN(hr);
}

void
KillImgTaskExec()
{
    PerfDbgLog(tagImgTask, NULL, "+KillImgTaskExec");

    g_csImgTaskExec.Enter();

    CImgTaskExec * pImgTaskExec = g_pImgTaskExec;
    g_pImgTaskExec = NULL;

    g_csImgTaskExec.Leave();

    if (pImgTaskExec)
    {
        pImgTaskExec->Shutdown();
        pImgTaskExec->Release();
    }

    PerfDbgLog(tagImgTask, NULL, "-KillImgTaskExec");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgpeg.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "img.hxx"

#if 0

extern "C" {
#include "pic.h"
#include "errors.h"
}

typedef struct tagBITMAPINFO_256 {
	BITMAPINFOHEADER	bmiHeader;
	RGBQUAD				bmiColors[256];
} BITMAPINFO_256;

class CImgFiltPeg : public CImgFilt
{
public:
    typedef CImgFilt super;

    CImgFiltPeg(CRITICAL_SECTION * pcs) : CImgFilt(pcs) {}

    // CImgFilt methods

    virtual BITMAPINFO * Decode();

    // CImgFiltPeg methods

	void GetColors();
    BITMAPINFO * FinishDithering();
	void ReadImage();
	void MakePalette();
	
    virtual void VStretchDIBits(
        HDC  hdc,           // handle of device context
        int  XDest,         // x-coordinate of upper-left corner of dest. rect.
        int  YDest,         // y-coordinate of upper-left corner of dest. rect.
        int  nDestWidth,    // width of destination rectangle
        int  nDestHeight,   // height of destination rectangle
        int  XSrc,          // x-coordinate of upper-left corner of source rect.
        int  YSrc,          // y-coordinate of upper-left corner of source rect.
        int  nSrcWidth,     // width of source rectangle
        int  nSrcHeight,    // height of source rectangle
        UINT  iUsage,       // usage
        DWORD  dwRop        // raster operation code
        );

    // Data members

    UINT _nColors;
    UINT _nPasses;

	BITMAPINFO *_pbmi;

	PIC_PARM pic;
};

void CImgFiltPeg::GetColors()
{
		_nColors = g_cHalftoneEntries;
		memcpy(_ape, g_peHalftone, sizeof(_ape));
}

#define LINEBYTES(_wid,_bits) ((((_wid)*(_bits) + 31) / 32) * 4)

void CImgFiltPeg::ReadImage()
{
	// assume the worst for now...
	_pbBits = NULL;
}

BITMAPINFO * CImgFiltPeg::Decode()
{
	BYTE byBuf[4096];
	ULONG ulSize, cbRead, ulLine;
	int i;
	
	// setup to read JPEG
	memset(&pic, 0, sizeof(pic));
	pic.ParmSize = sizeof(pic);
	pic.ParmVer = CURRENT_PARMVER;
	pic.ParmVerMinor = 1;

	// fill in Get queue

	pic.Get.Start = pic.Get.Front = byBuf;
	pic.Get.End = pic.Get.Rear = byBuf + sizeof(byBuf);
	if (!Read((unsigned char *)&byBuf, sizeof(byBuf), &cbRead))
		return NULL;
	
	pic.u.QRY.BitFlagsReq = QBIT_BIWIDTH | QBIT_BIHEIGHT;
	
	if (!PegasusQuery(&pic)) 
		return NULL;

	_xWidth = pic.Head.biWidth;
	_yHeight = abs(pic.Head.biHeight);
	_lTrans = -1;

    // Post WHKNOWN
    OnSize(_xWidth, _yHeight, -1 /* lTrans */);

    // Do the color stuff
	GetColors();
	MakePalette();

	// allocate space for the bitmap
	ulLine = LINEBYTES(_xWidth, _pbmi->bmiHeader.biBitCount);
	ulSize = ulLine * _yHeight;
	_pbBits = (BYTE *)MemAlloc(ulSize);
	if (!_pbBits)
		return NULL;

	// setup for the decode phase
	memset(&pic, 0, sizeof(pic));
	pic.ParmSize = sizeof(pic);
	pic.ParmVer = CURRENT_PARMVER;
	pic.ParmVerMinor = 1;
	pic.Get.Start = pic.Get.Front = byBuf;
	pic.Get.End = pic.Get.Rear = byBuf + cbRead;
	pic.Put.QFlags = Q_REVERSE;
	pic.Put.Start = _pbBits;
	pic.Put.End = _pbBits + ulSize;
	pic.Put.Front = pic.Put.Rear = pic.Put.End - 1;
	pic.Op = OP_EXPJ;
	pic.u.S2D.DibSize = _pbmi->bmiHeader.biBitCount;
    pic.u.S2D.PicFlags = PF_Dither | PF_NoCrossBlockSmoothing;
//    pic.u.S2D.PicFlags = PF_Dither;
	pic.Head.biClrUsed = _nColors;
	pic.Head.biClrImportant = 0;
	for (i = 0; i < (int)_nColors; ++i) {
		pic.ColorTable[i].rgbRed = _ape[i].peRed;
		pic.ColorTable[i].rgbGreen = _ape[i].peGreen;
		pic.ColorTable[i].rgbBlue = _ape[i].peBlue;
		pic.ColorTable[i].rgbReserved = 0;
	}
	
	// do the decode loop
	RESPONSE Response;
	LONG lStatus = ERR_NONE;
	
	Response = Pegasus(&pic, REQ_INIT);
	if (Response != RES_DONE) {
		DebugBreak();
		MemFree(_pbBits);
		_pbBits = NULL;
		return NULL;
	}

	Response = Pegasus(&pic, REQ_EXEC);

	while ((lStatus == ERR_NONE) && (Response != RES_DONE))
	{
		switch (Response) 
		{
			case RES_ERR:
				lStatus = pic.Status;
				break;

			case RES_GET_NEED_DATA:
				if (pic.Get.Rear == pic.Get.End
					&& pic.Get.Front > pic.Get.Start) 
				{
					if (!Read((unsigned char *)pic.Get.Start,
								pic.Get.Front - pic.Get.Start - 1)) 
						lStatus = ERR_BAD_READ;

					pic.Get.Rear = pic.Get.Front - 1;
				} 
				else if (pic.Get.Rear < pic.Get.End)
				{
					if (!Read((unsigned char *)pic.Get.Rear,
						pic.Get.End - pic.Get.Rear))
						lStatus = ERR_BAD_READ;

					pic.Get.Rear = pic.Get.End;

					if (pic.Get.Start != pic.Get.Front)
					{
						if (!Read((unsigned char *)pic.Get.Start,
								pic.Get.Front - pic.Get.Start - 1))
							lStatus = ERR_BAD_READ;

						pic.Get.Rear = pic.Get.Front - 1;
					}
				}
				break;
				
			default:
				DebugBreak();
				break;
		}

		// send a progressive render message
		_yBottom = (pic.Put.End - pic.Put.Rear) / ulLine;
		OnProg(FALSE, IMGBITS_PARTIAL);

		if (lStatus == ERR_NONE)
			Response = Pegasus(&pic, REQ_CONT);
	}


	if (lStatus != ERR_NONE) 
	{
		MemFree(_pbBits);
		_pbBits = NULL;
		return NULL;
	}

	OnProg(TRUE, IMGBITS_TOTAL);

	// return the info ptr
    return _pbmi;
}

CImgFilt * ImgFiltCreatePeg(CRITICAL_SECTION * pcs)
{
    return(new CImgFiltPeg(pcs));
}

BITMAPINFO *
CImgFiltPeg::FinishDithering()
{
#if 0
    if (GetColorMode() == 8)
    {
        if (x_Dither(_pbBits, _ape, _xWidth, _yHeight, _lTrans))
            return NULL;
    }
#endif
    return _pbmi;
}

void
CImgFiltPeg::MakePalette()
{
    if (GetColorMode() == 8)
    {
    	_pbmi = BIT_Make_DIB_PAL_Header(_xWidth, _yHeight);
    }
    else
    {
        if (GetColorMode() == 4)
        {
            _pbmi = BIT_Make_DIB_RGB_Header_VGA(_xWidth, _yHeight);
        }
        else
        {
        /* true color display */
            _pbmi = BIT_Make_DIB_RGB_Header_24BIT(_xWidth, _yHeight);
        }
    }
}

void
CImgFiltPeg::VStretchDIBits(
    HDC  hdc,   // handle of device context
    int  XDest, // x-coordinate of upper-left corner of dest. rect.
    int  YDest, // y-coordinate of upper-left corner of dest. rect.
    int  nDestWidth,    // width of destination rectangle
    int  nDestHeight,   // height of destination rectangle
    int  XSrc,  // x-coordinate of upper-left corner of source rect.
    int  YSrc,  // y-coordinate of upper-left corner of source rect.
    int  nSrcWidth, // width of source rectangle
    int  nSrcHeight,    // height of source rectangle
    UINT  iUsage,   // usage
    DWORD  dwRop    // raster operation code
   )
{
    if ((nSrcWidth == 0) || (nSrcHeight == 0))
        return;

    ImgBlt(hdc, XDest, YDest, nDestWidth, nDestHeight, 0, 0,
        _xWidth, _yHeight, _pbBits, _pbmi, NULL, -1, iUsage, dwRop, FALSE);
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgpng.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#if 0

#ifndef X_PNG_H_
#define X_PNG_H_
#include "png.h"
#endif

// Urk! no verify!
#if DBG==1
#define VERIFY( exp ) if ( !exp ) AssertSz( FALSE, "Verify failed." )
#define DBTRACE( x ) OutputDebugStringA( x "\n" );
#else
#define VERIFY( exp ) ( exp )
#define DBTRACE( x ) 
#endif

typedef unsigned char PNGSIG[8];

#define cyReadRows 8;

static BOOL ProcessImage(png_structp ppng_struct,
						 png_infop ppng_info,
						 BITMAPINFOHEADER* pBMI,
						 IMGLOADNOTIFYFN* pNotifyFn,
						 IMPFLTSTATUS* pStatus)
{
	int iBitsSize, iPass, cPass;
	int iY, iStorageWidth;
	RGBQUAD *argbPNG = NULL;	// GIF color table
	RGBQUAD *argbButch = NULL;	// color table specified by our client, Butch
	ULONG cbCtabSize = 0;
	unsigned char **ppchRows;			// vector of pointers to row starts

	DBTRACE( "PNG ProcessImage" );

  	// we can't handle 16 bits/channel, so get LibPNG to downsample for us
	if ( ppng_info->bit_depth == 16 )
		png_set_strip_16( ppng_struct );

	// prep the library for interlace mode, if needed.
	
	if ( ppng_info->interlace_type != 0 )
		cPass = png_set_interlace_handling( ppng_struct );
	else
		cPass =  1;
	

	if ( ppng_info->valid & PNG_INFO_bKGD )
		png_set_background( ppng_struct, &(ppng_info->background),
							PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
	else
	{
	// Fake the background for now
	png_color_16 pngc16;

	// I see a red pel and I want to paint it black...
	pngc16.index = 0;
	pngc16.red = 0;
	pngc16.blue = 0;
	pngc16.green = 0;
	pngc16.gray = 0;

	png_set_background( ppng_struct, &pngc16,
						PNG_BACKGROUND_GAMMA_SCREEN, 0, 1.0 );
	}


	// Make the image header callback with the bmi data we read earlier
	pStatus->iState = ImgFltImpImgHdr;
	if (!pNotifyFn(pStatus)) goto $abort;

	// make a local copy so we can assert it prior to dithering
	// Or, as Bill Fernandez once said, "Note the colors..."
	cbCtabSize = pStatus->dwClrTabSize * sizeof(RGBQUAD);
	argbPNG = (RGBQUAD *)GlobalAlloc( GMEM_FIXED, cbCtabSize );
	if ( argbPNG == NULL )
		goto $abort;
	else
		CopyMemory( argbPNG, pStatus->pClrTab, cbCtabSize ); 


	// compute the image size
	iBitsSize = pBMI->biHeight * DIBStorageWidth(pBMI);

     // Make the bits allocation callback
	pStatus->iState = ImgFltImpAllocBits;
	pStatus->dwBitsSize = iBitsSize;
	pStatus->dwFlags |= ImgFltColorsNegotiable;
	if (!pNotifyFn(pStatus)) goto $abort;
    AssertSz(pStatus->pBits, "ImportPng - client didn't allocate bits!" );

	// It was very nice of Butch to tell us about the colors he wanted, but seeing as
	// we aren't prepared to dither one scanline at a time, let's do something slimey.
	// Let's slam our colors onto the bitmap so that it looks right during the progressive
	// phase, then switch 'em back just prior to dithering after the last pass...

	argbButch = (RGBQUAD *)GlobalAlloc( GMEM_FIXED, cbCtabSize );
	if ( argbButch != NULL )
		GetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, argbButch ); 
	else
		goto $abort;

	if ( pStatus->hdcTarget != NULL )
	{
		SetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, argbPNG );	
	}
	CopyMemory( pStatus->pClrTab, argbPNG, cbCtabSize );

	// Now, allocate a vector of pointers into the destination bits
	ppchRows = (unsigned char **)GlobalAlloc( GMEM_FIXED, ppng_info->height * sizeof(LPVOID) );
	if ( ppchRows == NULL )
		goto $abort;

	iStorageWidth = DIBStorageWidth(pBMI);

	AssertSz( pBMI->biHeight >= 0, "IportPng - can't handle top-down destination." );
	for ( iY = pBMI->biHeight - 1; iY >= 0; iY-- )
		ppchRows[iY] = pStatus->pBits + (pBMI->biHeight - iY - 1) * iStorageWidth;

	// now read the pixels in cyReadRows at a time for each pass

	for ( iPass = cPass; iPass > 0; iPass-- )
	{
		int cyRead;

		for ( iY = 0; iY < pBMI->biHeight; iY += cyRead )
		{
			cyRead = cyReadRows;
					
			if ( iY + cyRead >= pBMI->biHeight )
				cyRead = pBMI->biHeight - iY;

			png_read_rows( ppng_struct, NULL, &ppchRows[iY], cyRead );

			// make a data callback
			pStatus->iState = ImgFltImpImgData;
			pStatus->dwBandLineFirst = iY;
			pStatus->dwBandSize = cyRead;
			if (!pNotifyFn(pStatus)) goto $abort;
		}
	}

//	png_read_image( ppng_struct, ppchRows );

	if ( pStatus->hdcTarget != NULL )
	{
		// now do an IN-PLACE dither on the image
		ColorMap cmap;
 
		cmap.SetColors( argbButch, pStatus->dwClrTabSize, NULL );

		Ditherer ditherer( &cmap );

		// Set the source, which has the bitmap, but with our color table
		ditherer.SetSource( pStatus->hdcTarget );

		struct  {
			// keep together (as a BITMAPINFO struct)
			BITMAPINFOHEADER bmi;
			RGBQUAD clrs[256];
		} pngbitmap;             // bitmap header

		pngbitmap.bmi = *pBMI;
		CopyMemory( pngbitmap.clrs, argbButch, cbCtabSize );

		// Set the dest to the same bits, but with Butch's color table
		ditherer.SetDestination( (BITMAPINFO *)&pngbitmap, pStatus->pBits );

		ditherer.Dither( 0, pngbitmap.bmi.biHeight );

		// Restore the proper color table.
		// TODO: must wait for last update to be drawn on main UI thread before playing
		// this game
		CopyMemory( pStatus->pClrTab, argbButch, cbCtabSize );
		SetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, pStatus->pClrTab );	

		// make a data callback
		pStatus->iState = ImgFltImpImgData;
		pStatus->dwBandLineFirst = 0;
		pStatus->dwBandSize = pngbitmap.bmi.biHeight;
		if (!pNotifyFn(pStatus)) goto $abort;
	}

	// make the image complete callback
	pStatus->iState = ImgFltImpImgComplete;
	if (!pNotifyFn(pStatus)) goto $abort;

	return TRUE;

$abort:

	if ( argbPNG != NULL )
		GlobalFree( argbPNG );

	if ( argbButch != NULL )
		GlobalFree( argbButch );

	if ( ppchRows != NULL )
		GlobalFree( ppchRows );

	return FALSE;
}


// Import a GIF file
BOOL ImportPng
(
    LPSTREAM			pstream,
    BITMAPINFOHEADER*   pBMI,
    IMGLOADNOTIFYFN*    pNotifyFn,
    IMPFLTSTATUS*       pStatus
)
{
	BOOL bResult = FALSE;
	png_structp	ppng_struct = NULL;
	png_infop	ppng_info = NULL;

	// make the inital callback
    AssertSz(pNotifyFn, "ImportPng - no callback" );
    AssertSz(pStatus, "ImportPng - no status struct" );
	pStatus->iState = ImgFltImpBegin;
	if (!pNotifyFn(pStatus)) goto $abort;

    // get the current file position
	// (we might not be at the start)

	LARGE_INTEGER liSeek;
	ULARGE_INTEGER uliPos;
	liSeek.LowPart = 0;
	liSeek.HighPart = 0;
	// don't move, but do get the pos
	VERIFY( SUCCEEDED(pstream->Seek( liSeek, STREAM_SEEK_CUR, &uliPos )) );
	AssertSz( uliPos.HighPart == 0, "Too far out into stream." );

	// check it's a PNG file
	// LibPng does this, and since we can't seek backwards, we must skip this check
	/*
    PNGSIG pngsig;
    ULONG ulBytes;
	VERIFY( SUCCEEDED( pstream->Read( pngsig, sizeof(pngsig), &ulBytes ) ) );
    if (ulBytes != sizeof(pngsig)) {
        // too small for a GIF file
        goto $abort;
    }
	pStatus->dwFileBytesRead +=	ulBytes;

    // check we have the magic id at the start
    if ( !png_check_sig(pngsig, sizeof(pngsig)) ) {
        // not a PNG file
        goto $abort;
    }
	*/

	ppng_struct = (png_struct *)GlobalAlloc( GMEM_FIXED, sizeof(png_struct) );
	if ( ppng_struct == NULL )
		goto $abort;

	ppng_info = (png_info *)GlobalAlloc( GMEM_FIXED, sizeof(png_info) );
	if ( ppng_info == NULL )
		goto $abort;

	if ( setjmp( ppng_struct->jmpbuf ) )
		goto $abort;

	png_info_init( ppng_info );
	png_read_init( ppng_struct );
	png_init_io( ppng_struct, pstream );
	png_read_info( ppng_struct, ppng_info );

	// copy the size info
	pBMI->biWidth = ppng_info->width;
	pBMI->biHeight = ppng_info->height;

	switch ( ppng_info->color_type )
	{
	case 0: // pure grayscale
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 2: // rgb triples
		pBMI->biBitCount = 24; // we'll have to get LibPNG to downsample 48 bpp.
		break;

	case 3: // indexed colors
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 4: // grayscale/alpha pairs
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 6: // rgba quads
		pBMI->biBitCount = 24; // we'll have to get LibPNG to downsample 48 bpp.
		break;

	default:
		break;
	}

	pBMI->biPlanes = 1;
	pBMI->biCompression = BI_RGB;

	// make the file header callback
	pStatus->iState = ImgFltImpFileHdr;
	
	STATSTG statstg;
	VERIFY( SUCCEEDED( pstream->Stat( &statstg, STATFLAG_NONAME ) ) );
	AssertSz( (statstg.cbSize.HighPart == 0), "File too big." );

	pStatus->dwFileSize = statstg.cbSize.LowPart - uliPos.LowPart;
	pStatus->dwImageCount = 1;
	pStatus->dwMaxImageWidth = pBMI->biWidth;
	pStatus->dwMaxImageHeight = pBMI->biHeight;
	pStatus->dwImageBitCount = pBMI->biBitCount;
	if (!pNotifyFn(pStatus)) goto $abort;

	// see if there is a color table associated with the image
	if ( (ppng_info->color_type & 0x01) && ppng_info->valid & PNG_INFO_PLTE )
	{ 
		// get the size of the table
		int iClrTabSize = ppng_info->num_palette;
		png_colorp ppng_color ;
		RGBQUAD	*prgbq;

        AssertSz(iClrTabSize <= 256, "ImportPng - too many colors in palette." );
		pBMI->biClrUsed = iClrTabSize;

		 // Make the color table alloc callback
		pStatus->iState = ImgFltImpAllocClrTab;
		pStatus->dwImageCount = 1;
		pStatus->dwImageWidth = pBMI->biWidth;
		pStatus->dwImageHeight = pBMI->biHeight;
		pStatus->dwImageBytesRead = 0;
		pStatus->dwImageBitCount = pBMI->biBitCount;
		pStatus->dwClrTabSize = pBMI->biClrUsed;
		if (!pNotifyFn(pStatus)) goto $abort;
        AssertSz(pStatus->pClrTab, "ImportPng - client failed color table allocation." );
		
		for ( ppng_color = ppng_info->palette, prgbq = pStatus->pClrTab;
			  iClrTabSize > 0;
			  iClrTabSize--, ppng_color++, prgbq++ )
		{
			prgbq->rgbRed = ppng_color->red;
			prgbq->rgbGreen = ppng_color->green;
			prgbq->rgbBlue = ppng_color->blue;
		}

		// make a color table callback
		pStatus->iState = ImgFltImpClrTab;
		if (!pNotifyFn(pStatus)) goto $abort;
	}

	// process the data blocks

	// if we get here, it's all done
	bResult = ProcessImage( ppng_struct, ppng_info, pBMI, pNotifyFn, pStatus );

$abort:
	// clean up after abort
	if (!bResult) {
		LARGE_INTEGER liSeek;
		liSeek.LowPart = liSeek.HighPart = 0;

		// restore the file position
		pstream->Seek( liSeek, STREAM_SEEK_SET, NULL );
	}
  
	if ( ppng_struct != NULL )
		GlobalFree( ppng_struct );

	if ( ppng_info != NULL )
		GlobalFree( ppng_info );

	// make the file complete callback
	pStatus->iState = ImgFltImpFileComplete;
	pNotifyFn(pStatus);

	return bResult;
}

#endif

CImgFilt * ImgFiltCreatePng(CRITICAL_SECTION * pcs)
{
    return(NULL);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgutil.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997
//
//  File:       imgutil.cxx
//
//  Contents:   Utilities for imaging code
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifndef X_OCMM_H_
#define X_OCMM_H_
#include "ocmm.h"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXx_
#include "imgbits.hxx"
#endif

#ifndef X_TXTDEFS_H_
#define X_TXTDEFS_H_
#include "txtdefs.h"
#endif


#undef NEW_DITHERER
#define whSlop   1      // amount of difference between element width or height and image
                        // width or height within which we will blt the image in its native
                        // proportions. For now, this applies only to GIF images.

DeclareTag(tagForce4BPP,     "Dwn", "Img: Force 4-bit-per-pixel color mode");

MtDefine(ImgDithData, Dwn, "CreateDitherData")
MtDefine(DIBSection, WorkingSet, "Bitmaps")

int         g_colorModeDefault = 0;

WORD        g_wIdxTrans;
WORD        g_wIdxBgColor;
WORD        g_wIdxFgColor;
COLORREF    g_crBgColor;
COLORREF    g_crFgColor;
RGBQUAD     g_rgbBgColor;
RGBQUAD     g_rgbFgColor;

// NOTE: this is not CONST because the palettes are tweaked by VgaPenCallback
#ifdef UNIX
PALETTEENTRY g_peVga[16] =
{
    { 0x00, 0x00, 0x00, 0x00 }, // Black
    { 0x00, 0x00, 0x00, 0x80 }, // Dark red
    { 0x00, 0x00, 0x80, 0x00 }, // Dark green
    { 0x00, 0x00, 0x80, 0x80 }, // Dark yellow
    { 0x00, 0x80, 0x00, 0x00 }, // Dark blue
    { 0x00, 0x80, 0x00, 0x80 }, // Dark purple
    { 0x00, 0x80, 0x80, 0x00 }, // Dark aqua
    { 0x00, 0xC0, 0xC0, 0xC0 }, // Light grey
    { 0x00, 0x80, 0x80, 0x80 }, // Dark grey
    { 0x00, 0x00, 0x00, 0xFF }, // Light red
    { 0x00, 0x00, 0xFF, 0x00 }, // Light green
    { 0x00, 0x00, 0xFF, 0xFF }, // Light yellow
    { 0x00, 0xFF, 0x00, 0x00 }, // Light blue
    { 0x00, 0xFF, 0x00, 0xFF }, // Light purple
    { 0x00, 0xFF, 0xFF, 0x00 }, // Light aqua
    { 0x00, 0xFF, 0xFF, 0xFF }  // White
};
#else
PALETTEENTRY g_peVga[16] =
{
    { 0x00, 0x00, 0x00, 0x00 }, // Black
    { 0x80, 0x00, 0x00, 0x00 }, // Dark red
    { 0x00, 0x80, 0x00, 0x00 }, // Dark green
    { 0x80, 0x80, 0x00, 0x00 }, // Dark yellow
    { 0x00, 0x00, 0x80, 0x00 }, // Dark blue
    { 0x80, 0x00, 0x80, 0x00 }, // Dark purple
    { 0x00, 0x80, 0x80, 0x00 }, // Dark aqua
    { 0xC0, 0xC0, 0xC0, 0x00 }, // Light grey
    { 0x80, 0x80, 0x80, 0x00 }, // Dark grey
    { 0xFF, 0x00, 0x00, 0x00 }, // Light red
    { 0x00, 0xFF, 0x00, 0x00 }, // Light green
    { 0xFF, 0xFF, 0x00, 0x00 }, // Light yellow
    { 0x00, 0x00, 0xFF, 0x00 }, // Light blue
    { 0xFF, 0x00, 0xFF, 0x00 }, // Light purple
    { 0x00, 0xFF, 0xFF, 0x00 }, // Light aqua
    { 0xFF, 0xFF, 0xFF, 0x00 }  // White
};
#endif

#define MASK565_0   0x0000F800
#define MASK565_1   0x000007E0
#define MASK565_2   0x0000001F



void *pCreateDitherData(int xsize)
{
    UINT    cdw = (xsize + 1);
    DWORD * pdw = (DWORD *)MemAlloc(Mt(ImgDithData), cdw * sizeof(DWORD));

    if (pdw)
    {
        pdw += cdw;
        while (cdw-- > 0) *--pdw = 0x909090;
    }

    return(pdw);
}

// Mask off the high byte for comparing PALETTEENTRIES, RGBQUADS, etc.
#define RGBMASK(pe)    (*((DWORD *)&(pe)) & 0x00FFFFFF)

int x_ComputeConstrainMap(int cEntries, PALETTEENTRY *pcolors, int transparent, int *pmapconstrained)
{
    int i;
    int nDifferent = 0;

    for (i = 0; i < cEntries; i++)
    {
        if (i != transparent)
        {
            pmapconstrained[i] = RGB2Index(pcolors[i].peRed, pcolors[i].peGreen, pcolors[i].peBlue);
            
            if (RGBMASK(pcolors[i]) != RGBMASK(g_lpHalftone.ape[pmapconstrained[i]]))
                ++nDifferent;
        }
    }

    // Turns out the transparent index can be outside the color set.  In this
    // case we still want to map the transparent index correctly.

    if (transparent >= 0 && transparent <= 255)
    {
        pmapconstrained[transparent] = g_wIdxTrans;
    }

    return nDifferent;
}

/*
    constrains colors to 6X6X6 cube we use
*/
void x_ColorConstrain(unsigned char HUGEP *psrc, unsigned char HUGEP *pdst, int *pmapconstrained, long xsize)
{
    int x;

    for (x = 0; x < xsize; x++)
    {
        *pdst++ = (BYTE)pmapconstrained[*psrc++];
    }
}

void x_DitherRelative(BYTE *pbSrc, BYTE * pbDst, PALETTEENTRY *pe,
    int xsize, int ysize, int transparent, int *v_rgb_mem,
    int yfirst, int ylast)
{
    RGBQUAD argb[256];
    int cbScan;

    cbScan = (xsize + 3) & ~3;
    pbSrc  = pbSrc + cbScan * (ysize - yfirst - 1);
    pbDst  = pbDst + cbScan * (ysize - yfirst - 1);

    CopyColorsFromPaletteEntries(argb, pe, 256);
    
    DitherTo8( pbDst, -cbScan, 
                   pbSrc, -cbScan, BFID_RGB_8, 
                   g_rgbHalftone, argb,
                   g_pInvCMAP,
                   0, yfirst, xsize, ylast - yfirst + 1,
                   g_wIdxTrans, transparent);
}

HRESULT x_Dither(unsigned char *pdata, PALETTEENTRY *pe, int xsize, int ysize, int transparent)
{
    x_DitherRelative(pdata, pdata, pe, xsize, ysize, transparent, NULL, 
                        0, ysize - 1);
    
    return S_OK;
}

#ifdef OLDIMAGECODE // replaced by CImgBitsDIB::StretchBlt

DeclareTag(tagNoMaskBlt,     "Dwn", "Img: Don't use MaskBlt");
DeclareTag(tagTimeBltDib,    "Dwn", "Img: Measure BltDib (hold shift key down)");

void ImgBltDib(XHDC hdc, HBITMAP hbmDib, HBITMAP hbmMask, LONG lTrans,
    RECT * prcDst, RECT * prcSrc, LONG yDibBot, LONG xDibWid, LONG yDibHei, DWORD dwRop)
{
    int         xDst            = prcDst->left;
    int         yDst            = prcDst->top;
    int         xDstWid         = prcDst->right - xDst;
    int         yDstHei         = prcDst->bottom - yDst;
    int         xSrc            = prcSrc->left;
    int         ySrc            = prcSrc->top;
    int         xSrcWid         = prcSrc->right - xSrc;
    int         ySrcHei         = prcSrc->bottom - ySrc;
    RGBQUAD     rgbBlack        = { 0, 0, 0, 0};
    RGBQUAD     rgbWhite        = { 255, 255, 255, 0 };
    HDC         hdcDib          = NULL;
    HBITMAP     hbmSav          = NULL;
    int         cSetColors      = 0;
    void *      pvSav           = NULL;
    UINT        cbSav           = 0;
    BOOL        fCritical       = FALSE;
    BYTE        abSav[sizeof(RGBQUAD)*2];
    RGBQUAD     argbOld[256];
    RGBQUAD     argbNew[256];
    BOOL        fPrinter = (GetDeviceCaps(hdc, TECHNOLOGY) == DT_RASPRINTER);
    BOOL        fTrans = TRUE;

    if (    yDibBot == 0
        ||  xDstWid <= 0 || xSrcWid <= 0 || xDibWid <= 0
        ||  yDstHei <= 0 || ySrcHei <= 0 || yDibHei <= 0)
        return;

    #if DBG==1
    __int64     t1, t2, t3, t4, tfrq;
    BOOL        fTransBlt = 0;
    DIBSECTION  ds;
    Verify(GetObject(hbmDib, sizeof(DIBSECTION), &ds));
    Assert(xDibWid == ds.dsBmih.biWidth && yDibHei == ds.dsBmih.biHeight);
    QueryPerformanceFrequency((LARGE_INTEGER *)&tfrq);
    #endif

    // If the caller is attempting to show the bits which have not yet
    // been decoded, limit the source and dest rectangles to the visible
    // area only.

    if (yDibBot > 0 && yDibBot < yDibHei)
        yDibHei = yDibBot;

    if (xSrc < 0)
    {
        xDst += MulDivQuick(-xSrc, xDstWid, xSrcWid);
        xDstWid = prcDst->right - xDst;
        xSrcWid += xSrc;
        xSrc = 0;
        if (xDstWid <=0 || xSrcWid <= 0)
            return;
    }
    if (ySrc < 0)
    {
        yDst += MulDivQuick(-ySrc, yDstHei, ySrcHei);
        yDstHei = prcDst->bottom - yDst;
        ySrcHei += ySrc;
        ySrc = 0;
        if (yDstHei <=0 || ySrcHei <= 0)
            return;
    }

    if (xSrc + xSrcWid > xDibWid)
    {
        xDstWid = MulDivQuick(xDstWid, xDibWid - xSrc, xSrcWid);
        xSrcWid = xDibWid - xSrc;
        if (xDstWid <= 0 || xSrcWid <= 0)
            return;
    }
    if (ySrc + ySrcHei > yDibHei)
    {
        yDstHei = MulDivQuick(yDstHei, yDibHei - ySrc, ySrcHei);
        ySrcHei = yDibHei - ySrc;
        if (yDstHei <= 0 || ySrcHei <= 0)
            return;
    }

    hdcDib = GetMemoryDC();

    if (hdcDib == NULL)
        return;

    hbmSav = (HBITMAP)SelectObject(hdcDib, hbmDib);

    if (hbmSav == NULL)
        goto Cleanup;

    SetStretchBltMode(hdc, COLORONCOLOR);

#ifndef WIN16
    if (fPrinter)
    {
        int iEscapeFunction = POSTSCRIPT_PASSTHROUGH;
        THREADSTATE *   pts = GetThreadState();

        // Filter out printers that we know lie about their support for transparency.
        fTrans = (!pts || !(pts->dwPrintMode & PRINTMODE_NO_TRANSPARENCY))
            && !Escape(hdc, QUERYESCSUPPORT, sizeof(int), (LPCSTR) &iEscapeFunction, NULL);
        // fTrans = FALSE for a postscript driver
    }
#endif // ndef WIN16

    if (hbmMask)
    {
        if (fTrans)
        {
            #if DBG==1
            if (IsTagEnabled(tagNoMaskBlt)) ; else
            #endif

#ifndef WIN16
            if (    hdc.CanMaskBlt()
                &&  xSrcWid == xDstWid && ySrcHei == yDstHei)
            {
                #if DBG==1
                QueryPerformanceCounter((LARGE_INTEGER *)&t1);
                #endif

                MaskBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                     hdcDib, xSrc, ySrc, hbmMask, xSrc, ySrc, 0xAACC0020);

                #if DBG==1 && !defined(WIN16)
                QueryPerformanceCounter((LARGE_INTEGER *)&t2);
                if (GetAsyncKeyState(VK_SHIFT) & 0x8000)
                    TraceTag((tagTimeBltDib, "MaskBlt (%ldx%ld) took %ld us",
                        xDstWid, yDstHei, ((LONG)(((t2 - t1) * 1000000) / tfrq))));
                #endif

                goto Cleanup;
            }
#endif //ndef WIN16

            if (!SelectObject(hdcDib, hbmMask))
                goto Cleanup;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t1);
            #endif

            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                    hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
            dwRop = SRCAND;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t2);
            fTransBlt = 1;
            #endif

            if (SelectObject(hdcDib, hbmDib) != hbmMask)
                goto Cleanup;
        }
    }
    else if (lTrans >= 0)
    {
        // WINCE - handled with TransparentImage, below.
        #if !defined(WINCE) || defined(WINCE_NT)
        g_csImgTransBlt.Enter();
        fCritical = TRUE;

        Verify(GetDIBColorTable(hdcDib, 0, 256, argbOld) > 0);

        RGBQUAD * prgb = argbNew;
        for (int c = 256; c-- > 0; )
            *prgb++ = rgbWhite;
        argbNew[lTrans] = rgbBlack;

        pvSav = &argbOld[lTrans];
        cbSav = sizeof(RGBQUAD);
        *(RGBQUAD *)abSav = *(RGBQUAD *)pvSav;
        *(RGBQUAD *)pvSav = rgbWhite;

        if (fTrans)
        {
            Verify(SetDIBColorTable(hdcDib, 0, 256, argbNew) == 256);

            cSetColors = 256;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t1);
            #endif

            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                    hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
            dwRop = SRCAND;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t2);
            fTransBlt = 2;
            #endif

            Verify(SetDIBColorTable(hdcDib, 0, 256, argbOld) == 256);
        }
        #else
            TransparentImage(hdc, xDst, yDst, xDstWid, yDstHei,
                             hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, PALETTEINDEX(lTrans));
        #endif
    }

    #if DBG==1 && !defined(WIN16) && !defined(NO_PERFDBG)
    if (hbmMask || lTrans < 0)
        IsIdentityBlt(hdc, hdcDib, ds.dsBmih.biWidth);
    QueryPerformanceCounter((LARGE_INTEGER *)&t3);
    #endif

    if (fPrinter && ((g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS)
#ifdef UNIX
                  || (g_dwPlatformID == VER_PLATFORM_WIN32_UNIX)
#endif
        ))
    {
        DIBSECTION dsPrint;

        if (GetObject(hbmDib, sizeof(DIBSECTION), &dsPrint))
        {
            struct
            {
                BITMAPINFOHEADER bmih;
                RGBQUAD argb[256];
            } bmi;

            bmi.bmih = dsPrint.dsBmih;
            GetDIBColorTable(hdcDib, 0, 256, bmi.argb);

            Assert(bmi.bmih.biHeight > 0);

            StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                          xSrc, bmi.bmih.biHeight - prcSrc->bottom, xSrcWid, ySrcHei,
                          dsPrint.dsBm.bmBits, (BITMAPINFO *) &bmi, DIB_RGB_COLORS, dwRop);
        }
    }
    else
    // WINCE - Transparent images were handled above with the new TransparentImage() api,
    //         so we don't have to do the second Blt with the SRCAND rop here.
    #if defined(WINCE) && !defined(WINCE_NT)
        if (lTrans < 0)
    #endif
        {
            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                       hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, dwRop);
        }

    #if DBG==1 && !defined(WIN16)
    QueryPerformanceCounter((LARGE_INTEGER *)&t4);

    if (IsTagEnabled(tagTimeBltDib) && (GetAsyncKeyState(VK_SHIFT) & 0x8000))
    {
        if (fTransBlt)
            TraceTag((tagTimeBltDib, "TransBlt (%s) (%ldx%ld) took %ld+%ld=%ld us",
                fTransBlt == 1 ? "fast" : "slow", xDstWid, yDstHei,
                ((LONG)(((t2 - t1) * 1000000) / tfrq)),
                ((LONG)(((t4 - t3) * 1000000) / tfrq)),
                ((LONG)(((t2 - t1 + t4 - t3) * 1000000) / tfrq))));
        else
            TraceTag((tagTimeBltDib, "DibBlt (%ldx%ld) took %ld us",
                xDstWid, yDstHei, ((LONG)(((t4 - t3) * 1000000) / tfrq))));
    }
    #endif

Cleanup:
    if (cbSav)
    {
        memcpy(pvSav, abSav, cbSav);
    }

    if (cSetColors)
    {
        Verify(SetDIBColorTable(hdcDib, 0, cSetColors, argbOld) == (UINT)cSetColors);
    }

    if (hbmSav)
        SelectObject(hdcDib, hbmSav);
    if (hdcDib)
        ReleaseMemoryDC(hdcDib);

    if (fCritical)
        g_csImgTransBlt.Leave();
}

#endif

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/

static int CALLBACK VgaPenCallback(void * pvLogPen, LPARAM lParam)
{
    LOGPEN * pLogPen = (LOGPEN *)pvLogPen;

    if (pLogPen->lopnStyle == PS_SOLID)
    {
        PALETTEENTRY ** pppe = (PALETTEENTRY **)lParam;
        PALETTEENTRY * ppe = (*pppe)++;
        COLORREF cr = pLogPen->lopnColor;

        if (cr != *(DWORD *)ppe)
        {
            TraceTag((tagPerf, "Updating VGA color %d to %08lX",
                ppe - g_peVga, cr));
            *(DWORD *)ppe = cr;
        }

        return(ppe < &g_peVga[15]);
    }

    return(1);
}

// This function differentiates between "555" and "565" 16bpp color modes, returning 15 and 16, resp.

int GetRealColorMode(HDC hdc)
{
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            DWORD   dwMasks[3];
        } u;
    } bmi;
    HBITMAP hbm;

    hbm = CreateCompatibleBitmap(hdc, 1, 1);
    if (hbm == NULL)
        return 0;

    // NOTE: The two calls to GetDIBits are INTENTIONAL.  Don't muck with this!
    bmi.bmih.biSize = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biBitCount = 0;
    GetDIBits(hdc, hbm, 0, 1, NULL, (BITMAPINFO *)&bmi, DIB_RGB_COLORS);
    GetDIBits(hdc, hbm, 0, 1, NULL, (BITMAPINFO *)&bmi, DIB_RGB_COLORS);

    DeleteObject(hbm);

    if (bmi.bmih.biBitCount != 16)
        return bmi.bmih.biBitCount;

    if (bmi.bmih.biCompression != BI_BITFIELDS)
        return 15;
    
    if (bmi.u.dwMasks[0] == MASK565_0 
        && bmi.u.dwMasks[1] == MASK565_1 
        && bmi.u.dwMasks[2] == MASK565_2)
        return 16;
    else
        return 15;
}

BOOL InitImageUtil()
{
    /* Snoop around system and determine its capabilities.
     * Initialize data structures accordingly.
     */
    HDC hdc;

    HPALETTE hPal;

    hdc = GetDC(NULL);

    g_colorModeDefault = GetRealColorMode(hdc);

#ifndef UNIX
    g_crBgColor = GetSysColorQuick(COLOR_WINDOW) & 0xFFFFFF;
    g_crFgColor = GetSysColorQuick(COLOR_WINDOWTEXT) & 0xFFFFFF;
#else
    g_crBgColor = GetSysColorQuick(COLOR_WINDOW);
    g_crFgColor = GetSysColorQuick(COLOR_WINDOWTEXT);
#endif
    g_rgbBgColor.rgbRed   = GetRValue(g_crBgColor);
    g_rgbBgColor.rgbGreen = GetGValue(g_crBgColor);
    g_rgbBgColor.rgbBlue  = GetBValue(g_crBgColor);
    g_rgbFgColor.rgbRed   = GetRValue(g_crFgColor);
    g_rgbFgColor.rgbGreen = GetGValue(g_crFgColor);
    g_rgbFgColor.rgbBlue  = GetBValue(g_crFgColor);
    
#ifdef UNIX
    // For Motif colors which have a special flag in high byte
    g_rgbBgColor.rgbReserved = ((BYTE)(( g_crBgColor )>>24));
    g_rgbFgColor.rgbReserved = ((BYTE)(( g_crFgColor )>>24));
#endif

    if (GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE)
    {
        hPal = g_hpalHalftone;

        /*
            Now the extra colors
        */

        g_wIdxBgColor = (WORD)GetNearestPaletteIndex(hPal, g_crBgColor);
        g_wIdxFgColor = (WORD)GetNearestPaletteIndex(hPal, g_crFgColor);

        /*
            Choose a transparent color that lies outside of 6x6x6 cube - we will
            replace the actual color for this right before drawing.  We are going
            to use one of the "magic colors" in the static 20 for the transparent
            color. 
        */
        g_wIdxTrans = 246;  
    }

    if (g_colorModeDefault == 4)
    {
        PALETTEENTRY * ppe = g_peVga;
        EnumObjects(hdc, OBJ_PEN, VgaPenCallback, (LONG_PTR)&ppe);
        Assert(ppe == &g_peVga[16]);
    }

    ReleaseDC(NULL, hdc);

    return TRUE;
}

/*
    Some of the extra colors in our palette may deliberately be set to
    windows system colors, so we can simulate things like transparent
    bitmaps.  If the windows system colors change, then we made need to
    fix the corresponding palette entries.
*/
#if 0
//$TODO (dinartem) Need call when fg/bg colors change
void GTR_FixExtraPaletteColors(void)
{
    COLORREF color;
    HDC hDC = GetDC(NULL);
    HPALETTE hPal = CreateHalftonePalette(hDC);

    color = PREF_GetBackgroundColor();
    colorIdxBg = GetNearestPaletteIndex(hPal,color);
    color = PREF_GetForegroundColor();
    colorIdxFg = GetNearestPaletteIndex(hPal,color);

    DeleteObject(hPal);
    ReleaseDC(NULL, hDC);
}
#endif

int GetDefaultColorMode()
{
    if (g_colorModeDefault == 0)
    {
        InitImageUtil();
    }

    #if DBG==1
    if (IsTagEnabled(tagForce4BPP))
        return(4);
    #endif

    return(g_colorModeDefault);
}

void FreeGifAnimData(GIFANIMDATA * pgad, CImgBitsDIB *pibd)
{
    GIFFRAME * pgf, * pgfNext;

    if (pgad == NULL)
        return;

    for (pgf = pgad->pgf; pgf != NULL; pgf = pgfNext)
    {
        if (pgf->pibd != pibd)
            delete pgf->pibd;
        if (pgf->hrgnVis)
            Verify(DeleteRgn(pgf->hrgnVis));
        pgfNext = pgf->pgfNext;
        MemFree(pgf);
    }
    pgad->pgf = NULL;
}

void CalcStretchRect(RECT * prectStretch, LONG wImage, LONG hImage, LONG wDisplayedImage, LONG hDisplayedImage, GIFFRAME * pgf)
{
    // set ourselves up for a stretch if the element width doesn't match that of the image

    if ((wDisplayedImage >= pgf->width - whSlop) &&
        (wDisplayedImage <= pgf->width + whSlop))
    {
        wDisplayedImage = pgf->width;
    }

    if ((hDisplayedImage >= pgf->height - whSlop) &&
        (hDisplayedImage <= pgf->height + whSlop))
    {
        hDisplayedImage = pgf->height;
    }

    if (wImage != 0)
    {
        prectStretch->left = MulDivQuick(pgf->left, wDisplayedImage, wImage);
        prectStretch->right = prectStretch->left +
                              MulDivQuick(pgf->width, wDisplayedImage, wImage);
    }
    else
    {
        prectStretch->left = prectStretch->right = pgf->left;
    }

    if (hImage != 0)
    {
        prectStretch->top = MulDivQuick(pgf->top, hDisplayedImage, hImage);
        prectStretch->bottom = prectStretch->top +
                               MulDivQuick(pgf->height, hDisplayedImage, hImage);
    }
    else
    {
        prectStretch->top = prectStretch->bottom = pgf->top;
    }
}

void getPassInfo(int logicalRowX, int height, int *pPassX, int *pRowX, int *pBandX)
{
    int passLow, passHigh, passBand;
    int pass = 0;
    int step = 8;
    int ypos = 0;

    if (logicalRowX >= height)
        logicalRowX = height - 1;
    passBand = 8;
    passLow = 0;
    while (step > 1)
    {
        if (pass == 3)
            passHigh = height - 1;
        else
            passHigh = (height - 1 - ypos) / step + passLow;
        if (logicalRowX >= passLow && logicalRowX <= passHigh)
        {
            *pPassX = pass;
            *pRowX = ypos + (logicalRowX - passLow) * step;
            *pBandX = passBand;
            return;
        }
        if (pass++ > 0)
            step /= 2;
        ypos = step / 2;
        passBand /= 2;
        passLow = passHigh + 1;
    }

    //(dmitryt) Fixing PREFIX bug, it seems we can't go here in a real life, 
    //but better put zeroes then garbage..
    *pPassX = *pRowX = *pBandX = 0;
}

CImgBits *GetPlaceHolderBitmap(BOOL fMissing)
{
    CImgBits **ppImgBits;
    CImgBitsDIB *pibd = NULL;
    HBITMAP hbm = NULL;

    ppImgBits = fMissing ? &g_pImgBitsMissing : &g_pImgBitsNotLoaded;

    if (*ppImgBits == NULL)
    {
        LOCK_GLOBALS;

        if (*ppImgBits == NULL)
        {
#ifdef WIN16
            HRSRC               hRes;
            HGLOBAL             hBmpFile;

            BYTE                *pbBits;
            int                 cbRow;

            BITMAPINFOHEADER    *lpbmih;

            UINT                ncolors;
            RGBQUAD             *lprgb;
            LONG                xWidth;
            LONG                yHeight;
            BYTE                *lpCurrent;

            // Find the Bitmap
            hRes = FindResource(g_hInstCore,(LPCWSTR)(fMissing ? IDB_MISSING : IDB_NOTLOADED), RT_BITMAP);
            if (hRes)
            {
                // Load the BMP from the resource file.
                hBmpFile = LoadResource(g_hInstCore, hRes);
                if ((hBmpFile))
                {
                    // copy out the appropriate info from the bitmap
                    lpCurrent = (BYTE *)LockResource(hBmpFile);
                    // The BITMAPFILEHEADER is striped for us, so we just start with a BITMAPINFOHEADER
                    lpbmih = (BITMAPINFOHEADER *)lpCurrent;
                    lpCurrent += sizeof(BITMAPINFOHEADER);

                    // Compute some usefull information from the bitmap
                    if (lpbmih->biPlanes != 1)
                        goto Cleanup;

                    if (    lpbmih->biBitCount != 1
                        &&  lpbmih->biBitCount != 4
                        &&  lpbmih->biBitCount != 8
                        &&  lpbmih->biBitCount != 16
                        &&  lpbmih->biBitCount != 24
                        &&  lpbmih->biBitCount != 32)
                        goto Cleanup;

                    if (lpbmih->biBitCount <= 8)
                    {
                        ncolors = 1 << lpbmih->biBitCount;

                        if (lpbmih->biClrUsed > 0 && lpbmih->biClrUsed < ncolors)
                        {
                            ncolors = lpbmih->biClrUsed;
                        }
                    }

                    if (ncolors)
                    {
                        lprgb = (RGBQUAD *)lpCurrent;
                        lpCurrent += ncolors * sizeof(RGBQUAD);
                    }

                    xWidth  = lpbmih->biWidth;
                    yHeight = lpbmih->biHeight;

                    pibd = new CImgBitsDIB();
                    if (!pibd)
                        goto Cleanup;

                    hr = THR(pibd->AllocDIB(lpbmih->biBitCount, xWidth, yHeight, lprgb, nColors, -1, TRUE));
                    if (hr)
                        goto Cleanup;

                    // Get the actual Bitmap bits
                    memcpy(pibd->GetBits(), lpCurrent, pibd->CbLine() * yHeight);

                    Cleanup:
                        UnlockResource(hBmpFile);
                        FreeResource(hBmpFile);
                }
            }

#else
            hbm = (HBITMAP) LoadImage(g_hInstCore, (LPCWSTR)(DWORD_PTR)(fMissing ? IDB_MISSING : IDB_NOTLOADED),
                                      IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION);
            // NOTE (lmollico): bitmaps are in mshtml.dll

            pibd = new CImgBitsDIB();
            if (!pibd)
                goto Cleanup;

            Verify(!pibd->AllocCopyBitmap(hbm, FALSE, -1));

            Verify(DeleteObject(hbm));
#endif
            *ppImgBits = pibd;
            pibd = NULL;
            
Cleanup:
            if (pibd)
                delete pibd;
        }

    }

    return *ppImgBits;
}

void GetPlaceHolderBitmapSize(BOOL fMissing, SIZE * pSize)
{
    CImgBits *pib;

    pib = GetPlaceHolderBitmap(fMissing);

    pSize->cx = pib->Width();
    pSize->cy = pib->Height();
}

//+---------------------------------------------------------------------------
//
//  DrawPlaceHolder
//
//  Synopsis:   Draw the Place holder, the ALT string and the bitmap
//
//----------------------------------------------------------------------------

void DrawPlaceHolder(const CDocInfo * pdci,
                    const XHDC& hdc,
#ifdef WIN16
                    RECTL rectlImg,
#else
                    RECT rectImg,
#endif
                     TCHAR * lpString, CODEPAGE codepage, LCID lcid, SHORT sBaselineFont,
                     SIZE * psizeGrab, BOOL fMissing,
                     COLORREF fgColor, COLORREF bgColor, SIZE * psizePrint,
                     BOOL fRTL, DWORD dwFlags)
{
    LONG     xDstWid;
    LONG     yDstHei;
    LONG     xSrcWid;
    LONG     ySrcHei;
    CImgBits  *pib;
    RECT rcDst;
    RECT rcSrc; 
#ifdef WIN16
    GDIRECT  rectImg = { rectlImg.left, rectlImg.top, rectlImg.right, rectlImg.bottom };
#endif
    BOOL fDrawBlackRectForPrinting = psizePrint != NULL;

    bgColor &= 0x00FFFFFF;

    pib = GetPlaceHolderBitmap(fMissing);

    xDstWid = psizePrint ? psizePrint->cx : pib->Width();
    yDstHei = psizePrint ? psizePrint->cy : pib->Height();
    xSrcWid = pib->Width();
    ySrcHei = pib->Height();

    if ((rectImg.right - rectImg.left >= 10) &&
        (rectImg.bottom - rectImg.top >= 10))
    {
        if (fDrawBlackRectForPrinting)
        {
            COLORREF crBlack = 0;  // zero is black
            HBRUSH   hBrush = 0;

            hBrush = CreateSolidBrush(crBlack);
            if (hBrush)
            {
                FrameRect(hdc, &rectImg, hBrush);
                DeleteObject(hBrush);
            }
            else
                fDrawBlackRectForPrinting = FALSE;
        }

        if (!fDrawBlackRectForPrinting)
        {
            if ((bgColor == 0x00ffffff) || (bgColor == 0x00000000))
            {
                DrawEdge(hdc, &rectImg, BDR_SUNKENOUTER, BF_TOPLEFT);
                DrawEdge(hdc, &rectImg, BDR_SUNKENINNER, BF_BOTTOMRIGHT);
            }
            else
            {
                DrawEdge(hdc, &rectImg, BDR_SUNKENOUTER, BF_RECT);
            }
        }
    }

    if (lpString != NULL)
    {
        RECT rc;
        BOOL fGlyph = FALSE;
        UINT cch = _tcslen(lpString);

        rc.left = rectImg.left + xDstWid + 2 * psizeGrab->cx;
        rc.right = rectImg.right - psizeGrab->cx;
        rc.top = rectImg.top + psizeGrab->cy;
        rc.bottom = rectImg.bottom - psizeGrab->cy;

        CIntlFont intlFont(pdci, hdc, codepage, lcid, sBaselineFont, lpString);
        SetTextColor(hdc, fgColor);

        if(!fRTL)
        {
            for(UINT i = 0; i < cch; i++)
            {
                WCHAR ch = lpString[i];
                if(ch >= 0x300 && IsGlyphableChar(ch))
                {
                    fGlyph = TRUE;
                    break;
                }
            }
        }

        // send complex text or text layed out right-to-left
        // to be drawn through Uniscribe
        if(fGlyph || fRTL)
        {
            HRESULT hr;
            UINT taOld = 0;
            UINT fuOptions = ETO_CLIPPED;

            if(fRTL)
            {
                taOld = GetTextAlign(hdc);
                SetTextAlign(hdc, TA_RTLREADING | TA_RIGHT);
                fuOptions |= ETO_RTLREADING;
            }

            extern HRESULT LSUniscribeTextOut(const XHDC& hdc, 
                                           int iX, 
                                           int iY, 
                                           UINT uOptions, 
                                           CONST RECT *prc, 
                                           LPCTSTR pString, 
                                           UINT cch,
                                           int *piDx); 

            hr = LSUniscribeTextOut(hdc,
                                    !fRTL ? rc.left : rc.right, 
                                    rc.top,
                                    fuOptions,
                                    &rc,
                                    lpString,
                                    cch,
                                    NULL);

            if(fRTL)
                SetTextAlign(hdc, taOld);
        }
        else
        {
            DrawTextInCodePage(WindowsCodePageFromCodePage(codepage),
                hdc, lpString, -1, &rc, DT_LEFT | DT_WORDBREAK | DT_NOPREFIX);
        }
    }

    if (((rectImg.right - rectImg.left) <= 2 * psizeGrab->cx) ||
        ((rectImg.bottom - rectImg.top) <= 2 * psizeGrab->cy))
        return;

    InflateRect(&rectImg, -psizeGrab->cx, -psizeGrab->cy);

    if (xDstWid > rectImg.right - rectImg.left)
    {
        xSrcWid = MulDivQuick(xSrcWid, rectImg.right - rectImg.left, xDstWid);
        xDstWid = rectImg.right - rectImg.left;
    }
    if (yDstHei > rectImg.bottom - rectImg.top)
    {
        ySrcHei = MulDivQuick(ySrcHei, rectImg.bottom - rectImg.top, yDstHei);
        yDstHei = rectImg.bottom - rectImg.top;
    }

    rcDst.left = rectImg.left;
    rcDst.top = rectImg.top;
    rcDst.right = rcDst.left + xDstWid;
    rcDst.bottom = rcDst.top + yDstHei;

    rcSrc.left = 0;
    rcSrc.top = 0;
    rcSrc.right = xSrcWid;
    rcSrc.bottom = ySrcHei;

    pib->StretchBlt(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags);
}

int Union(int _yTop, int _yBottom, BOOL fInvalidateAll, int yBottom)
{
    if (    (_yTop != -1)
        &&  (   fInvalidateAll
            ||  (   (_yBottom >= _yTop)
                &&  (yBottom >= _yTop)
                &&  (yBottom <= _yBottom))
            ||  (   (_yBottom < _yTop)
                &&  (   (yBottom >= _yTop)
                     || (yBottom <= _yBottom))
                )))
    {
        return -1;
    }
    return _yTop;
}

#ifdef OLDIMAGECODE // now replaced by CImgBitsDIB

ULONG ImgDibSize(HBITMAP hbm)
{
    DIBSECTION ds;

    if (hbm && GetObject(hbm, sizeof(DIBSECTION), &ds))
        return(ds.dsBmih.biWidth * ds.dsBmih.biHeight *
            ds.dsBmih.biBitCount / 8);
    else
        return(0);
}

HBITMAP ImgCreateDib(LONG xWid, LONG yHei, BOOL fPal, int cBitsPerPix,
    int cEnt, PALETTEENTRY * ppe, BYTE ** ppbBits, int * pcbRow, BOOL fMono)
{
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            WORD aw[256];
            DWORD adw[3];
        } u;
    } bmi;
    int i;

    if (cBitsPerPix != 8)
        fPal = FALSE;

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = xWid;
    bmi.bmih.biHeight        = yHei;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = (cBitsPerPix == 15) ? 16 : cBitsPerPix;
    bmi.bmih.biCompression   = (cBitsPerPix == 16) ? BI_BITFIELDS : BI_RGB;
    bmi.bmih.biSizeImage     = 0;
    bmi.bmih.biXPelsPerMeter = 0;
    bmi.bmih.biYPelsPerMeter = 0;
    bmi.bmih.biClrUsed       = 0;
    bmi.bmih.biClrImportant  = 0;

    if (cBitsPerPix == 1)
    {
        bmi.bmih.biClrUsed = 2;

        if (cEnt > 2)
            cEnt = 2;

        if (cEnt > 0)
        {
            bmi.bmih.biClrImportant = cEnt;
            CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
        }
        else
        {
            if (fMono)  //IEUNIX monochrome.
            {
                bmi.u.argb[0].rgbBlue = 0; //foreground color
#ifdef BIG_ENDIAN
                *((DWORD*)&bmi.u.argb[1]) = 0xffffff00;
#else
                *((DWORD*)&bmi.u.argb[1]) = 0x00ffffff;
#endif
            }
            else
            {
                bmi.u.argb[0] = g_rgbBgColor;
                bmi.u.argb[1] = g_rgbFgColor;
            }
        }
    }
    else if (cBitsPerPix == 4)
    {
        bmi.bmih.biClrUsed = 16;

        if (cEnt > 16)
            cEnt = 16;

        if (cEnt > 0)
        {
            bmi.bmih.biClrImportant = cEnt;
            CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
        }
        else
        {
            bmi.bmih.biClrImportant = 16;
            CopyColorsFromPaletteEntries(bmi.u.argb, g_peVga, 16);
        }
    }
    else if (cBitsPerPix == 8)
    {
        if (fPal)
        {
            bmi.bmih.biClrUsed = 256;

            for (i = 0; i < 256; ++i)
                bmi.u.aw[i] = i;
        }
        else
        {
            if (cEnt > 0 && cEnt < 256)
            {
                bmi.bmih.biClrUsed = cEnt;
                bmi.bmih.biClrImportant = cEnt;
            }
            else
                bmi.bmih.biClrUsed = 256;

            if (cEnt && ppe)
            {
                CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
            }
        }
    }
    else if (cBitsPerPix == 16)
    {
        bmi.u.adw[0] = MASK565_0;
        bmi.u.adw[1] = MASK565_1;
        bmi.u.adw[2] = MASK565_2;
    }

    return ImgCreateDibFromInfo((BITMAPINFO *)&bmi, fPal ? DIB_PAL_COLORS : DIB_RGB_COLORS, ppbBits, pcbRow);
}

HBITMAP ImgCreateDibFromInfo(BITMAPINFO * pbmi, UINT wUsage, BYTE ** ppbBits, int * pcbRow)
{
    HDC 	hdcMem = NULL;
    HBITMAP	hbm = NULL;
    BYTE * 	pbBits;
    int 	cbRow;
    LONG    xWid, yHei;
    int 	cBitsPerPix;

    xWid = pbmi->bmiHeader.biWidth;
    yHei = pbmi->bmiHeader.biHeight;
    cBitsPerPix = pbmi->bmiHeader.biBitCount;
    
    Assert(cBitsPerPix == 1 || cBitsPerPix == 4 ||
        cBitsPerPix == 8 || cBitsPerPix == 16 || cBitsPerPix == 24 || cBitsPerPix == 32);
    Assert(xWid > 0 && yHei > 0);

	cbRow = ((xWid * cBitsPerPix + 31) & ~31) / 8;

    if (pcbRow)
    {
        *pcbRow = cbRow;
    }

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto Cleanup;

    hbm = CreateDIBSection(hdcMem, pbmi, wUsage, (void **)&pbBits, NULL, 0);

    if (hbm && ppbBits)
    {
        *ppbBits = pbBits;
    }

    #ifdef PERFMETER
    if (hbm)
    {
        MtAdd(Mt(DIBSection), +1, ImgDibSize(hbm));
    }
    #endif

    // Fill the bits with garbage so that the client doesn't assume that
    // the DIB gets created cleared (on WinNT it does, on Win95 it doesn't).

    #if DBG==1 && !defined(WIN16)
    if (hbm && pbBits)
        for (int c = cbRow * yHei; --c >= 0; ) pbBits[c] = (BYTE)c;
    #endif

Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    return(hbm);
}

void ImgDeleteDib(HBITMAP hbm)
{
    if (hbm)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(LONG)ImgDibSize(hbm));
        #endif

        Verify(DeleteObject(hbm));
    }
}

HBITMAP ComputeTransMask(HBITMAP hbmDib, BOOL fPal, BYTE bTrans)
{
    DIBSECTION      ds;
    HBITMAP         hbmMask;
    DWORD *         pdw;
    DWORD           dwBits;
    BYTE *          pb;
    int             cb;
    int             cbPad;
    int             x, y, b;
#ifdef UNIX
    PALETTEENTRY    ape[2] = { { 0, 0, 0, 0 }, 
                               { 0, 255, 255, 255 } };
#else
    PALETTEENTRY    ape[2] = { { 0, 0, 0, 0 }, 
                               { 255, 255, 255, 0 } };
#endif
    BOOL            fTrans = FALSE;

    if (    !GetObject(hbmDib, sizeof(DIBSECTION), &ds)
        ||  ds.dsBmih.biBitCount != 8)
        return(NULL);

    pb    = (BYTE *)ds.dsBm.bmBits;
    cbPad = ((ds.dsBmih.biWidth + 3) & ~3) - ds.dsBmih.biWidth;

    if (fPal)
    {
        bTrans = (BYTE)g_wIdxTrans;
    }

    for (y = ds.dsBmih.biHeight; y-- > 0; pb += cbPad)
        for (x = ds.dsBmih.biWidth; x-- > 0; )
            if (*pb++ == bTrans)
                goto trans;

    return((HBITMAP)0xFFFFFFFF);

trans:

    hbmMask = ImgCreateDib(ds.dsBmih.biWidth, ds.dsBmih.biHeight, FALSE, 1,
        2, ape, &pb, &cb);

    if (hbmMask == NULL)
        return(NULL);

    pdw   = (DWORD *)ds.dsBm.bmBits;
    cbPad = cb - (ds.dsBmih.biWidth + 7) / 8;

    for (y = ds.dsBmih.biHeight; y-- > 0; pb += cbPad)
    {
        for (x = ds.dsBmih.biWidth; x > 0; x -= 8)
        {
            dwBits = *pdw++; b = 0;
#ifdef UNIX
            b |= ((BYTE)(dwBits >> 24) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 16) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 8) != bTrans); b <<=1;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#else
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#endif
            if (x <= 4)
                b = (b << 3) | 0xF;
            else
            {
                dwBits = *pdw++;
#ifdef UNIX
                b |= ((BYTE)(dwBits >> 24) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 16) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 8 ) != bTrans); b <<= 1;
                b |= ((BYTE)dwBits != bTrans);
#else
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans);
#endif
            }

            *pb++ = (BYTE)b;
        }
    }

    if (fPal)
    {
        pb = (BYTE *)ds.dsBm.bmBits - 1;
        cb = ((ds.dsBmih.biWidth + 3) & ~3) * ds.dsBmih.biHeight;
        b = 255;        // want white index

        while (--cb >= 0)
            if (*++pb == bTrans)
                *pb = b;
    }
    else
    {
        HDC hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
        {
            ImgDeleteDib(hbmMask);
            return(NULL);
        }

        HBITMAP hbmSav = (HBITMAP)SelectObject(hdcMem, hbmDib);
        RGBQUAD rgbWhite = { 255, 255, 255, 0 };
        Verify(SetDIBColorTable(hdcMem, bTrans, 1, &rgbWhite) == 1);
        SelectObject(hdcMem, hbmSav);
        ReleaseMemoryDC(hdcMem);
    }

    return(hbmMask);
}

#endif

void ComputeFrameVisibility(IMGANIMSTATE *pImgAnimState, LONG xWidth, LONG yHeight, LONG xDispWid, LONG yDispHei)
{
    GIFFRAME *  pgf;
    GIFFRAME *  pgfClip;
    GIFFRAME *  pgfDraw = pImgAnimState->pgfDraw;
    GIFFRAME *  pgfDrawNext = pgfDraw->pgfNext;
    RECT        rectCur;

    // determine which frames are visible or partially visible at this time

    for (pgf = pImgAnimState->pgfFirst; pgf != pgfDrawNext; pgf = pgf->pgfNext)
    {
        if (pgf->hrgnVis != NULL)
        {
            DeleteRgn( pgf->hrgnVis );
            pgf->hrgnVis = NULL;
            pgf->bRgnKind = NULLREGION;
        }

        // This is kinda complicated.
        // We only want to subtract out this frame from its predecessors under certain
        // conditions.
        // If it's the current frame, then all we care about is transparency.
        // If its a preceding frame, then any bits from frames that preceded should
        // be clipped out if it wasn't transparent, but also wasn't to be replaced by
        // previous pixels.
        if (((pgf == pgfDraw) && !pgf->bTransFlags) ||
            ((pgf != pgfDraw) && !pgf->bTransFlags && (pgf->bDisposalMethod != gifRestorePrev)) ||
            ((pgf != pgfDraw) && (pgf->bDisposalMethod == gifRestoreBkgnd)))
        {
            // clip this rgn out of those that came before us if it's not trasparent,
            // or if it leaves a background-colored hole and is not the current frame.
            // The current frame, being current, hasn't left a background-colored hole yet.
            for (pgfClip = pImgAnimState->pgfFirst; pgfClip != pgf; pgfClip = pgfClip->pgfNext)
            {
                if (pgfClip->hrgnVis != NULL)
                {
                    if (pgf->hrgnVis == NULL)
                    {
                        // Since we'll use these regions to clip when drawing, we need them mapped
                        // for destination stretching.
                        CalcStretchRect(&rectCur, xWidth, yHeight, xDispWid, yDispHei, pgf);

                        pgf->hrgnVis = CreateRectRgnIndirect(&rectCur);
                        pgf->bRgnKind = SIMPLEREGION;
                    }

                    pgfClip->bRgnKind = (BYTE)CombineRgn(pgfClip->hrgnVis, pgfClip->hrgnVis, pgf->hrgnVis, RGN_DIFF);
                }
            }
        } // if we need to clip this frame out of its predecessor(s)

        // If this is a replace with background frame preceding the current draw frame,
        // then it is not visible at all, so set the visibility traits so it won't be drawn.
        if ((pgf != pgfDraw) && (pgf->bDisposalMethod >= gifRestoreBkgnd))
        {
            if (pgf->hrgnVis != NULL)
            {
                DeleteRgn(pgf->hrgnVis);
                pgf->hrgnVis = NULL;
                pgf->bRgnKind = NULLREGION;
            }
        }
        else if (pgf->hrgnVis == NULL)
        {
            // Since we'll use these regions to clip when drawing, we need them mapped
            // for destination stretching.
            CalcStretchRect(&rectCur, xWidth, yHeight, xDispWid, yDispHei, pgf);

            pgf->hrgnVis = CreateRectRgnIndirect(&rectCur);
            pgf->bRgnKind = SIMPLEREGION;
        }

    } // for check each frame's visibility
}

//
// Compute bounds of metafile content for PlayEnhMetaFile().
//
// Q: Why call this? Why can't I just use rclBounds?
// 
// A: Any code dealing with metafiles need to account for aspect ratio adjustment.
//    For a 1280x1024 monitor, ratio is set to 4x4.27. If no adjustment is made for a
//    metafile created for screen, its proportions are wrong when displayed.
//
CRect ComputeEnhMetaFileBounds(HENHMETAFILE hemf)
{
    ENHMETAHEADER emfh = {EMR_HEADER, sizeof(emfh)};
    if (GetEnhMetaFileHeader(hemf, sizeof(emfh), &emfh))
    {
        return ComputeEnhMetaFileBounds(&emfh);
    }
    return CRect(CRect::CRECT_EMPTY);
}

CRect ComputeEnhMetaFileBounds(ENHMETAHEADER *pemh)
{
    CRect rcBounds(*(RECT *)&pemh->rclFrame);

    // Calculate bounds from rclFrame using device aspect ratio
    rcBounds.left   = MulDiv(pemh->rclFrame.left,   pemh->szlDevice.cx, pemh->szlMillimeters.cx * 100);
    rcBounds.top    = MulDiv(pemh->rclFrame.top,    pemh->szlDevice.cy, pemh->szlMillimeters.cy * 100);
    rcBounds.right  = MulDiv(pemh->rclFrame.right,  pemh->szlDevice.cx, pemh->szlMillimeters.cx * 100);
    rcBounds.bottom = MulDiv(pemh->rclFrame.bottom, pemh->szlDevice.cy, pemh->szlMillimeters.cy * 100);

    return rcBounds;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgxbm.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgxbm.cxx
//
//  Contents:   Image filter for .xbm files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

#define XX_DMsg(x, y)

#define MAX_LINE 512

unsigned const char nibMask[8] =
{
    1, 2, 4, 8, 16, 32, 64, 128
};

MtDefine(CImgTaskXbm, Dwn, "CImgTaskXbm")

class CImgTaskXbm : public CImgTask
{

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskXbm))

    typedef CImgTask super;
    virtual void Decode(BOOL *pfNonProgressive);
};

static
char * next_token(char ** ppsz)
{
    char * pszBeg = *ppsz;
    char * pszEnd;

    // Skip leading whitespace, if any

    while (*pszBeg == ' ' || *pszBeg == '\t')
        ++pszBeg;

    if (*pszBeg == 0)
    {
        *ppsz = NULL;
        return(NULL);
    }

    // Find end of token
    
    pszEnd = pszBeg;

    while (*pszEnd && *pszEnd != ' ' && *pszEnd != '\t')
        ++pszEnd;

    if (*pszEnd)
        *pszEnd++ = 0;
        
    *ppsz = pszEnd;

    return(pszBeg);
}

void CImgTaskXbm::Decode(BOOL *pfNonProgressive)
{
    char line[MAX_LINE+2], *name_and_type;
    char *t;
    unsigned char *ptr;
    long bytes_per_line, version10p, raster_length, padding, win_extra_bytes_per_line;
    int bytes, temp = 0, value;
    int Ncolors, charspp, xpmformat;
    int line_idx = 0;
    char lookahead = 0;
    int n;
    char *tok;
    char *end;
    char *pszTok;
    CImgBitsDIB *pibd;

    *pfNonProgressive = TRUE;

    _xWid = 0;
    _yHei = 0;
    Ncolors = 0;
    charspp = 0;
    xpmformat = 0;
    for (;;)
    {
        line_idx = 0;
        if (lookahead)
        {
            line[0] = lookahead;
            lookahead = 0;
            line_idx = 1;
        }

        for (; line_idx < MAX_LINE; line_idx++)
        {
            if (!Read(&line[line_idx], 1))
                return;
            if (line[line_idx] == '\n' || line[line_idx] == '\r' || line[line_idx] == '{')
            {
                if (!Read(&line[line_idx], 1))
                    return;
                if (line[line_idx] != '\n' && line[line_idx] != '\r')
                    lookahead = line[line_idx];
                break;
            }
        }
        line[line_idx] = '\0';

        pszTok = line;
        tok = next_token(&pszTok);
        if (!tok)
            return;
        if (!strcmp(tok, "#define"))
        {
            name_and_type = next_token(&pszTok);
            if (!name_and_type)
                continue;
            if (NULL == (t = strrchr(name_and_type, '_')))
                t = name_and_type;
            else
                t++;

            tok = next_token(&pszTok);
            if (!tok)
                continue;
            value = strtol(tok, &end, 10);

            if (!strcmp("width", t))
                _xWid = value;
            else if (!strcmp("height", t))
                _yHei = value;
            else if (!strcmp("ncolors", t))
                Ncolors = value;
            else if (!strcmp("pixel", t))
                charspp = value;
            continue;
        }
        if (!strcmp(tok, "static"))
        {
            t = next_token(&pszTok);
            if (!t)
                continue;
            if (!strcmp(t, "unsigned"))
            {
                t = next_token(&pszTok);
                if (!t)
                    continue;
            }
            if (!strcmp(t, "short"))
            {
                version10p = 1;
                break;
            }
            else if (!strcmp(t, "char"))
            {
                version10p = 0;
                t = next_token(&pszTok);
                if (*t == '*')
                    xpmformat = 1;
                break;
            }
        }
        else
            continue;
    }
    if (version10p)
    {
        XX_DMsg(DBG_IMAGE, ("Don't do old version 10p xbm images!\n"));
        return;
    }
    if (xpmformat)
    {
        XX_DMsg(DBG_IMAGE, ("Can't Handle XPM format inlined images!\n"));
        return;
    }
    if (_xWid == 0)
    {
        XX_DMsg(DBG_IMAGE, ("Can't read image w = 0!\n"));
        return;
    }
    if (_yHei == 0)
    {
        XX_DMsg(DBG_IMAGE, ("Can't read image h = 0!\n"));
        return;
    }
    padding = 0;
    if (((_xWid % 16) >= 1) && ((_xWid % 16) <= 8) && version10p)
    {
        padding = 1;
    }
    bytes_per_line = ((_xWid + 7) / 8) + padding;
    if (bytes_per_line % 4)
        win_extra_bytes_per_line = (4 - (bytes_per_line % 4)) % 4;    // 0-3, extra padding for long boundaries.

    else
        win_extra_bytes_per_line = 0;
    raster_length = bytes_per_line * _yHei;

    pibd = new CImgBitsDIB();
    if (!pibd)
        return;

    if (pibd->AllocMaskOnly(_xWid, _yHei))
    {
        goto abort;
    }

    OnSize(_xWid, _yHei, -1);

    line_idx = 0;
    if (lookahead)
    {
        line_idx = 1;
        line[0] = lookahead;
    }

    ptr = (BYTE *)pibd->GetMaskBits();
    
    {
        /* TODO UNIX  gui/x_xbm.c has some bReverseBitmap stuff in it 
        **  that might have to be moved in here.  It only affects code 
        ** in this block.
        */
        long cnt = 0;
#ifndef _MAC
        ptr += (_yHei - 1) * (bytes_per_line + win_extra_bytes_per_line);
#endif
        for (bytes = 0; bytes < raster_length; bytes++)
        {
            if (line_idx == 0)
            {
                for (;;)
                {
                    if (!Read(&line[0], 1))
                        goto abort;
                    if (line[0] != '\r' && line[0] != '\n')
                    {
                        line_idx = 1;
                        break;
                    }
                }
            }
            for (;;)
            {
                if (!Read(&line[line_idx], 1))
                {
                    if (line_idx == 0)
                        goto abort;
                    break;
                }
                if (line[line_idx] == ',' || line[line_idx] == '}')
                {
                    break;
                }
                if (line_idx < MAX_LINE) line_idx++;
            }
            line[line_idx] = '\0';
            value = strtol(line, &end, 16);
            line_idx = 0;

            for (n = 0, temp = 0; n < 8; n++)
            {
                temp += (value & 0x01) << (7 - n);
                value = value >> 1;
            }
            value = temp & 0xff;
            *ptr++ = (unsigned char) value;
            if (++cnt == bytes_per_line)
            {
                for (cnt = 0; cnt < win_extra_bytes_per_line; cnt++)
                    *ptr++ = (unsigned char) 0;
#ifndef _MAC
                ptr -= 2 * (bytes_per_line + win_extra_bytes_per_line);
#endif
                cnt = 0;
            }
        }
    }

#ifdef _MAC
    pibd->ReleaseMaskBits();
#endif

    _ySrcBot = -1;
    _pImgBits = pibd;
    return;

abort:
    delete pibd;
    return;
}

CImgTask * NewImgTaskXbm()
{
    return(new CImgTaskXbm);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\spacectx.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1995
//
//  File:       textctx.cxx
//
//  Contents:   Various text parse contexts to deal with space-collapsing
//              and other issues
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

MtDefine(CHtmCrlfParseCtx, CHtmParseCtx, "CHtmCrlfParseCtx")
MtDefine(CHtmCrlfParseCtx_AddText_pchTemp, CHtmCrlfParseCtx, "CHtmCrlfParseCtx::AddText/pchTemp")


//+---------------------------------------------------------------------------
//
//  Method:     CHtmCrlfParseCtx::AddText
//
//  Synposis:   Calls AddNonspaces and AddSpaces methods
//
//              Eliminates CRLFs from space runs (converting \n and
//              \r\n to \r) before calling AddSpaces and AddNonspaces
//
//----------------------------------------------------------------------------
            
HRESULT
CHtmCrlfParseCtx::AddText(CTreeNode *pNode, TCHAR *pchIn, ULONG cchIn, BOOL fAscii)
{
    HRESULT hr      = S_OK;
    TCHAR *pchLast  = pchIn + cchIn;
    TCHAR ach[64];
    TCHAR *pchTemp  = ach;
    ULONG  cchTemp  = ARRAY_SIZE(ach);
    TCHAR *pch;
    TCHAR *pchTo;
    ULONG cch;
    TCHAR *pchWord;
    ULONG cchWord;

    while (pchIn < pchLast)
    {
        // eat strings of spaces
        if (ISSPACE(*pchIn))
        {
            pchWord = pchIn++;

            while (pchIn < pchLast && ISSPACE(*pchIn))
                pchIn++;

            cchWord = pchIn - pchWord;
            cchIn -= cchWord;

            // step 1: scan to see if there are an \n at all

            for (pch = pchWord, cch = cchWord; cch; pch++, cch--)
                if (*pch == _T('\n'))
                    break;

            // step 2: if there are \n's, convert them appropriately

            if (!cch)
            {
                pchTo = pchWord;
                cch = cchWord;
            }
            else
            {
                // Allocate memory only if space string is longer than ach's size

                if (cchWord > cchTemp)
                {
                    if (pchTemp == ach)
                        pchTemp = NULL;

                    hr = MemRealloc(Mt(CHtmCrlfParseCtx_AddText_pchTemp), (void **)&pchTemp, cchWord * sizeof(TCHAR));
                    if (hr)
                        goto Cleanup;
                }

                // Skip over non \n chars, and \n if it is the first one and _fLastCr

                pchTo = pchTemp;

                if (pch > pchWord)
                {
                    memcpy(pchTemp, pchWord, (cchWord - cch) * sizeof(TCHAR));
                    pchTo += cchWord - cch;
                }
                else
                {
                    if (_fLastCr)
                    {
                        pch++;
                        cch--;
                    }
                }

                // Skip over any \n that follow \r, and convert other \n to \r

                for (; cch; cch--)
                {
                    if (*pch != _T('\n'))
                        *pchTo++ = *pch++;
                    else
                    {
                        if (*(pch-1) != _T('\r'))
                            *pchTo++ = _T('\r');

                        pch++;
                    }
                }

                cch = pchTo - pchTemp;
                pchTo = pchTemp;
            }

            if (cch)
            {
                // step 3: pass the string on
                hr = THR(AddSpaces(pNode, pchTo, cch));
                if (hr)
                    goto Cleanup;

            }

            _fLastCr = (pchWord[cchWord-1] == _T('\r'));
		}
        else
        {
            pchWord = pchIn++;

            for (;;)
            {
                while (pchIn < pchLast && ISNONSP(*pchIn))
                    pchIn++;

                if (pchIn+1 < pchLast && *pchIn == _T(' ') && ISNONSP(pchIn[1]))
                {
                    pchIn += 2;
                }
                else
                {
                    break;
                }
            }

            cchWord = pchIn - pchWord;
            cchIn -= cchWord;

            _fLastCr = FALSE;

            if (cchWord)
            {
                hr = THR(AddNonspaces(pNode, pchWord, cchWord, fAscii));
                if (hr)
                    goto Cleanup;
            }
        }
    }

Cleanup:
    if (pchTemp != ach)
        MemFree(pchTemp);

    RRETURN(hr);
}

//+---------------------------------------------------------------------------
//
//  Method:     CHtmCrlfParseCtx::Finish
//
//  Synopsis:   Would be needed if we were converting \r's to \n's instead
//              of \n's to \r's. For the time being, it does nothing.
//
//----------------------------------------------------------------------------
HRESULT CHtmCrlfParseCtx::Finish()
{
    return S_OK;
}


//+---------------------------------------------------------------------------
//
//  Class:      CHtmSpaceParseCtx
//
//  Synopsis:   1. Collapses multiple spaces down to one space
//              2. Can eat space to the left or to the right of "fill"
//                 markers, or transfer space from the left to the right
//                 of a fill marker.
//              3. Will eat single linefeeds between two adjacent chinese
//                 characters
//
//----------------------------------------------------------------------------

//+----------------------------------------------------------------------------
//
//  Function:   HanguelRange
//
//  Synopsis:   Detects Korean Hangeul characters
//
//-----------------------------------------------------------------------------

static inline BOOL
HanguelRange ( TCHAR ch )
{
    return ch > 0x10ff &&
           (InRange(ch, 0x1100, 0x11f9) ||
            InRange(ch, 0x3130, 0x318f) ||
            InRange(ch, 0xac00, 0xd7a3) ||
            InRange(ch, 0xffa1, 0xffdc));
}

//+----------------------------------------------------------------------------
//
//  Function:   TwoFarEastNonHanguelChars
//
//  Synopsis:   Determines if a CR between two characters should be
//              ignored (e.g., so Chinese chars on separate lines
//              of HTML are adjacent).
//
//-----------------------------------------------------------------------------

static inline BOOL
TwoFarEastNonHanguelChars ( TCHAR chPrev, TCHAR chAfter )
{
    if (chPrev < 0x3000 || chAfter < 0x3000)
        return FALSE;

    return ! HanguelRange( chPrev ) && ! HanguelRange( chAfter );
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmSpaceParseCtx::Destructor
//
//  Synopsis:   Releases any unreleased pointers
//
//-----------------------------------------------------------------------------

CHtmSpaceParseCtx::~CHtmSpaceParseCtx()
{
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(_pNodeSpace);
#endif
}


//+----------------------------------------------------------------------------
//
//  Function:   CHtmSpaceParseCtx::AddNonspaces
//
//  Synopsis:   Adds any deferred space
//
//-----------------------------------------------------------------------------
HRESULT
CHtmSpaceParseCtx::AddNonspaces(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    Assert(cch && *pch);
    Assert(!_fEatSpace || !_pNodeSpace);
    Assert(!_pNodeSpace || _pNodeSpace == pNode);
    Assert((DWORD_PTR)_pNodeSpace != 1);

    HRESULT hr;
    CTreeNode *pNodeSpace;

    // 1. If space is needed, add it now

    if (_pNodeSpace)
    {
        // reentrant code
        pNodeSpace = _pNodeSpace;
        _pNodeSpace = NULL;

        if (!_chLast || !_fOneLine || !TwoFarEastNonHanguelChars(_chLast, *pch))
        {
            hr = THR(AddSpace(pNodeSpace));
            if (hr)
                goto Cleanup;
        }

       
#ifdef NOPARSEADDREF
        pNodeSpace->NodeRelease();
#endif
    }

    // 2. Add words 

    hr = THR(AddWord(pNode, pch, cch, fAscii));
    if (hr)
        goto Cleanup;

    // 3. Stop eating space and note last (possibly chinese) char
    
    _fEatSpace = FALSE;
    _chLast = pch[cch - 1];
    _fOneLine = FALSE;

Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmSpaceParseCtx::AddSpaces
//
//  Synopsis:   Makes a note of any space that may need to be inserted later
//
//-----------------------------------------------------------------------------
HRESULT
CHtmSpaceParseCtx::AddSpaces(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    
    Assert(cch && *pch); // more than zero spaces
    Assert(!_fEatSpace || !_pNodeSpace);
    Assert(!_pNodeSpace || _pNodeSpace == pNode);
    Assert((DWORD_PTR)_pNodeSpace != 1);

    // 1. Note space if we're not eating space

    if (!_fEatSpace && !_pNodeSpace)
    {
#ifdef NOPARSEADDREF
        pNode->NodeAddRef();
#endif
        _pNodeSpace = pNode;
    }

    // 2. If last char was nonspace (possibly chinese), note single line
    
    if (_chLast)
    {
        if (cch == 1 && *pch == _T('\r') && !_fOneLine)
            _fOneLine = TRUE;
        else
            _chLast = _T('\0');
    }

    // 3. If the markup supports collapsed whitespace, add to the whitespace buffer

    Assert(pNode && pNode->GetMarkup());

    if (pNode->GetMarkup()->SupportsCollapsedWhitespace())
    {
        hr = THR(AddCollapsedWhitespace(pNode, pch, cch));
    }

    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmSpaceParseCtx::LFill
//
//  Synopsis:   Flushes any deferred space
//
//-----------------------------------------------------------------------------
HRESULT
CHtmSpaceParseCtx::LFill(UINT fillcode)
{
    Assert(!_fEatSpace || !_pNodeSpace);
    Assert((DWORD_PTR)_pNodeSpace != 1);

    HRESULT hr = S_OK;
    
    // 1. Now last char was not chinese
    
    _chLast = _T('\0');

    // 2. Output, eat, or transfer space from the left

    if (_pNodeSpace)
    {
        if (fillcode == FILL_PUT)
        {
            hr = THR(AddSpace(_pNodeSpace));
            if (hr)
                goto Cleanup;

            _fEatSpace = TRUE;
        }        

#ifdef NOPARSEADDREF
        _pNodeSpace->NodeRelease();
#endif
        _pNodeSpace = NULL;

        if (fillcode == FILL_NUL)
            _pNodeSpace = (CTreeNode*)1L;

    }

  Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmSpaceParseCtx::RFill
//
//  Synopsis:   Sets up state for absorbing or accepting space
//
//-----------------------------------------------------------------------------
HRESULT
CHtmSpaceParseCtx::RFill(UINT fillcode, CTreeNode *pNode)
{
    Assert(!_fEatSpace || !_pNodeSpace);
    Assert(!_chLast);
    Assert(!_pNodeSpace || (DWORD_PTR)_pNodeSpace == 1);

    // 1. Reject space to the right if EAT

    if (fillcode == FILL_EAT)
    {
        _pNodeSpace = NULL;
        _fEatSpace = TRUE;
    }

    // 2. Accept space to the right if PUT

    if (fillcode == FILL_PUT)
    {
        _fEatSpace = FALSE;
    }
    
    // 3. Transfer any existing space

    if (_pNodeSpace)
    {
#ifdef NOPARSEADDREF
        pNode->NodeAddRef();
#endif
        _pNodeSpace = pNode;
    }

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgplug.cxx ===
#if defined(UNIX) && defined(_HPUX_SOURCE)
#  define _MODULE_IS_NOT_DEFINED
#endif // UNIX
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifdef UNIX
#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif
#endif

#ifndef X_IMGUTIL_H_
#define X_IMGUTIL_H_
#include "imgutil.h"
#endif

#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif

MtDefine(CImgTaskPlug, Dwn, "CImgTaskPlug")
MtDefine(CPlugStream, CImgTaskPlug, "CPlugStream")
MtDefine(CImageDecodeFilter, CImgTaskPlug, "CImageDecodeFilter")
MtDefine(CImageDecodeEventSink, CImgTaskPlug, "CImageDecodeEventSink")

#undef  DEFINE_GUID
#define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
	EXTERN_C const GUID name \
		= { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }

//
// Using ATL is a pain in the butt.  It likes to reference malloc.  We don't want to use the CRT malloc
// so don't use ATL.  Copy CComPtr stuff here since this code already uses it.
//

template <class T>
class _NoAddRefReleaseOnCComPtr : public T
{
	private:
		STDMETHOD_(ULONG, AddRef)()=0;
		STDMETHOD_(ULONG, Release)()=0;
};

template <class T>
class CComPtr
{
public:
	typedef T _PtrClass;
	CComPtr()
	{
		p=NULL;
	}
	CComPtr(T* lp)
	{
		if ((p = lp) != NULL)
			p->AddRef();
	}
	CComPtr(const CComPtr<T>& lp)
	{
		if ((p = lp.p) != NULL)
			p->AddRef();
	}
	~CComPtr()
	{
		if (p)
			p->Release();
	}
	void Release()
	{
		IUnknown* pTemp = p;
		if (pTemp)
		{
			p = NULL;
			pTemp->Release();
		}
	}
	operator T*() const
	{
		return (T*)p;
	}
	T& operator*() const
	{
		Assert(p!=NULL);
		return *p;
	}
	//The assert on operator& usually indicates a bug.  If this is really
	//what is needed, however, take the address of the p member explicitly.
	T** operator&()
	{
		Assert(p==NULL);
		return &p;
	}
	_NoAddRefReleaseOnCComPtr<T>* operator->() const
	{
		Assert(p!=NULL);
		return (_NoAddRefReleaseOnCComPtr<T>*)p;
	}
	T* operator=(T* lp)
	{
		return (T*)MyComPtrAssign((IUnknown**)&p, lp);
	}
	T* operator=(const CComPtr<T>& lp)
	{
		return (T*)MyComPtrAssign((IUnknown**)&p, lp.p);
	}
	bool operator!() const
	{
		return (p == NULL);
	}
	bool operator<(T* pT) const
	{
		return p < pT;
	}
	bool operator==(T* pT) const
	{
		return p == pT;
	}
	// Compare two objects for equivalence
	bool IsEqualObject(IUnknown* pOther)
	{
		if (p == NULL && pOther == NULL)
			return true; // They are both NULL objects

		if (p == NULL || pOther == NULL)
			return false; // One is NULL the other is not

		CComPtr<IUnknown> punk1;
		CComPtr<IUnknown> punk2;
		p->QueryInterface(IID_IUnknown, (void**)&punk1);
		pOther->QueryInterface(IID_IUnknown, (void**)&punk2);
		return punk1 == punk2;
	}
	void Attach(T* p2)
	{
		if (p)
			p->Release();
		p = p2;
	}
	T* Detach()
	{
		T* pt = p;
		p = NULL;
		return pt;
	}
	HRESULT CopyTo(T** ppT)
	{
		Assert(ppT != NULL);
		if (ppT == NULL)
			return E_POINTER;
		*ppT = p;
		if (p)
			p->AddRef();
		return S_OK;
	}
	template <class Q>
	HRESULT QueryInterface(Q** pp) const
	{
		Assert(pp != NULL && *pp == NULL);
		return p->QueryInterface(__uuidof(Q), (void**)pp);
	}
	T* p;
};

IUnknown* WINAPI MyComPtrAssign(IUnknown** pp, IUnknown* lp)
{
    if (lp != NULL)
	lp->AddRef();
    if (*pp)
	(*pp)->Release();
    *pp = lp;
    return lp;
}

class CImgTaskPlug : public CImgTask
{
    typedef CImgTask super;
    friend class CImageDecodeEventSink;
    friend class CPlugStream;

public:
    
    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskPlug))

    virtual void Decode(BOOL *pfNonProgressive);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

protected:
    HRESULT SetColorTable(IDithererImpl* pDitherer);
    HRESULT GetTransIndex();
    
// Data members
public:
    UINT                                _nColors;
    CComPtr< IImageDecodeFilter >       m_pFilter;
    CComPtr< IImageDecodeEventSink >    m_pEventSink;
    CComPtr< IStream >                  m_pStream;
    CComPtr< IDirectDrawSurface >       m_pSurface;
    LONG                                m_nPitch;
    ULONG                               m_nBytesPerPixel;
    BYTE*                               m_pbFirstScanLine;
    BYTE*                               m_pbBits;
    BOOL                                m_bGotTrans;
};

class CPlugStream :
    public IStream
{

public:

    DECLARE_MEMALLOC_NEW_DELETE(Mt(CPlugStream))

    CPlugStream(CImgTaskPlug* pFilter);
    ~CPlugStream();

    ULONG STDMETHODCALLTYPE AddRef();
    ULONG STDMETHODCALLTYPE Release();
    STDMETHOD(QueryInterface)(REFIID iid, void** ppInterface);

// IStream
public:
    STDMETHOD(Clone)(IStream** ppStream);
    STDMETHOD(Commit)(DWORD dwFlags);
    STDMETHOD(CopyTo)(IStream* pStream, ULARGE_INTEGER nBytes, 
	ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten);
    STDMETHOD(LockRegion)(ULARGE_INTEGER iOffset, ULARGE_INTEGER nBytes,
	DWORD dwLockType);
    STDMETHOD(Read)(void* pBuffer, ULONG nBytes, ULONG* pnBytesRead);
    STDMETHOD(Revert)();
    STDMETHOD(Seek)(LARGE_INTEGER nDisplacement, DWORD dwOrigin, 
	ULARGE_INTEGER* piNewPosition);
    STDMETHOD(SetSize)(ULARGE_INTEGER nNewSize);
    STDMETHOD(Stat)(STATSTG* pStatStg, DWORD dwFlags);
    STDMETHOD(UnlockRegion)(ULARGE_INTEGER iOffset, ULARGE_INTEGER nBytes,
	DWORD dwLockType);
    STDMETHOD(Write)(const void* pBuffer, ULONG nBytes, 
	ULONG* pnBytesWritten);

protected:
    LONG            m_nRefCount;
    CImgTaskPlug*   m_pFilter;
};


// CImageDecodeEventSink (Private) -----------------------------------------------------------

class CImageDecodeEventSink :
    public IImageDecodeEventSink
{

public:

    DECLARE_MEMALLOC_NEW_DELETE(Mt(CImageDecodeEventSink))

    CImageDecodeEventSink( CImgTaskPlug* pFilter );
    ~CImageDecodeEventSink();

    ULONG STDMETHODCALLTYPE AddRef();
    ULONG STDMETHODCALLTYPE Release();
    STDMETHOD(QueryInterface)(REFIID iid, void** ppInterface);

    STDMETHOD(GetSurface)(LONG nWidth, LONG nHeight, REFGUID bfid, 
	ULONG nPasses, DWORD dwHints, IUnknown** ppSurface);
    STDMETHOD(OnBeginDecode)(DWORD* pdwEvents, ULONG* pnFormats, 
	GUID** ppFormats);
    STDMETHOD(OnBitsComplete)();
    STDMETHOD(OnDecodeComplete)(HRESULT hrStatus);
    STDMETHOD(OnPalette)();
    STDMETHOD(OnProgress)(RECT* pBounds, BOOL bFinal);

protected:
    ULONG                       m_nRefCount;
    CImgTaskPlug*               m_pFilter;
    CComPtr< IDirectDrawSurface > m_pSurface;
};

CImageDecodeEventSink::CImageDecodeEventSink(CImgTaskPlug* pFilter) :
    m_nRefCount(0),
    m_pFilter(pFilter),
    m_pSurface(NULL)
{
}

CImageDecodeEventSink::~CImageDecodeEventSink()
{
}

ULONG CImageDecodeEventSink::AddRef()
{
    m_nRefCount++;

    return (m_nRefCount);
}

ULONG CImageDecodeEventSink::Release()
{
    m_nRefCount--;
    if (m_nRefCount == 0)
    {
	delete this;
	return (0);
    }

    return (m_nRefCount);
}

STDMETHODIMP CImageDecodeEventSink::QueryInterface(REFIID iid, 
   void** ppInterface)
{
    if (ppInterface == NULL)
    {
	return (E_POINTER);
    }

    *ppInterface = NULL;

    if (IsEqualGUID(iid, IID_IUnknown))
    {
	*ppInterface = (IUnknown*)this;
    }
    else if (IsEqualGUID(iid, IID_IImageDecodeEventSink))
    {
	*ppInterface = (IImageDecodeEventSink*)this;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    //  If we're going to return an interface, AddRef it first
    if (*ppInterface)
    {
	((LPUNKNOWN)*ppInterface)->AddRef();
	return S_OK;
    }

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnBeginDecode(DWORD* pdwEvents, 
   ULONG* pnFormats, GUID** ppFormats)
{
    GUID* pFormats;

    if (pdwEvents != NULL)
    {
	*pdwEvents = 0;
    }
    if (pnFormats != NULL)
    {
	*pnFormats = 0;
    }
    if (ppFormats != NULL)
    {
	*ppFormats = NULL;
    }
    if (pdwEvents == NULL)
    {
	return (E_POINTER);
    }
    if (pnFormats == NULL)
    {
	return (E_POINTER);
    }
    if (ppFormats == NULL)
    {
	return (E_POINTER);
    }

    if (m_pFilter->_colorMode == 8)
    {
	pFormats = (GUID*)CoTaskMemAlloc(1*sizeof(GUID));
	if(pFormats == NULL)
	{
	    return (E_OUTOFMEMORY);
	}
	
	pFormats[0] = BFID_INDEXED_RGB_8;
	*pnFormats = 1;
    }
    else
    {
	pFormats = (GUID*)CoTaskMemAlloc(2*sizeof(GUID));
	if(pFormats == NULL)
	{
	    return (E_OUTOFMEMORY);
	}
	
	pFormats[0] = BFID_INDEXED_RGB_8;
	pFormats[1] = BFID_RGB_24;
	*pnFormats = 2;
    }

    *ppFormats = pFormats;
    *pdwEvents = IMGDECODE_EVENT_PALETTE|IMGDECODE_EVENT_BITSCOMPLETE
		    |IMGDECODE_EVENT_PROGRESS|IMGDECODE_EVENT_USEDDRAW;

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnBitsComplete()
{
    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnDecodeComplete(HRESULT hrStatus)
{
    return (S_OK);
}

#define LINEBYTES(_wid,_bits) ((((_wid)*(_bits) + 31) / 32) * 4)

STDMETHODIMP CImageDecodeEventSink::GetSurface(LONG nWidth, LONG nHeight, 
    REFGUID bfid, ULONG nPasses, DWORD dwHints, IUnknown** ppSurface)
{
    HRESULT hResult;
    ULONG nBufferSize;
    CImgBitsDIB *pibd;

    (void)nPasses;
    (void)dwHints;
    
    if (ppSurface != NULL)
    {
	*ppSurface = NULL;
    }
    if (ppSurface == NULL)
    {
	return (E_POINTER);
    }

    if (IsEqualGUID(bfid, BFID_INDEXED_RGB_8))
    {
	m_pFilter->m_nBytesPerPixel = 1;
    }
    else if (IsEqualGUID(bfid, BFID_RGB_24))
    {
	m_pFilter->m_nBytesPerPixel = 3;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    m_pFilter->_xWid = nWidth;
    m_pFilter->_yHei = nHeight;
    m_pFilter->m_nPitch = -LONG( LINEBYTES( m_pFilter->_xWid, 
	m_pFilter->m_nBytesPerPixel*8 ) );
    nBufferSize = -(m_pFilter->m_nPitch*(m_pFilter->_yHei));

    pibd = new CImgBitsDIB();
    if (!pibd)
        return E_OUTOFMEMORY;
        
    m_pFilter->_pImgBits = pibd;

    hResult = pibd->AllocDIBSection(m_pFilter->_colorMode == 8 ? 8 : (m_pFilter->m_nBytesPerPixel == 3 ? 24 : 8),
            m_pFilter->_xWid, m_pFilter->_yHei, NULL, 0, -1);

    if (hResult)
        return(hResult);
        
	m_pFilter->m_pbBits = (BYTE *)pibd->GetBits();;

    if (!m_pFilter->m_pbBits)
    {
	return (E_OUTOFMEMORY);
    }

    m_pFilter->m_pbFirstScanLine = m_pFilter->m_pbBits+nBufferSize+
	m_pFilter->m_nPitch;

    hResult = CreateDDrawSurfaceOnDIB(pibd->GetHbm(), &m_pSurface);
    if (FAILED(hResult))
    {
	return( hResult );
    }

    *ppSurface = (IUnknown *)m_pSurface;
    (*ppSurface)->AddRef();

    m_pFilter->m_pSurface = m_pSurface;
    
    m_pFilter->OnSize(nWidth, nHeight, -1);

    if (m_pFilter->_colorMode == 8 && m_pFilter->m_nBytesPerPixel == 1)
    {
	DDCOLORKEY  ddKey;

	ddKey.dwColorSpaceLowValue = ddKey.dwColorSpaceHighValue = g_wIdxTrans;

	m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddKey);
    }

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnPalette()
{
    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnProgress(RECT* pBounds, BOOL bComplete)
{
    if (pBounds == NULL)
    {
	return (E_INVALIDARG);
    }

    m_pFilter->_yBot = pBounds->bottom-1;
    m_pFilter->OnProg(FALSE,
	m_pFilter->_yBot == m_pFilter->_yHei ? IMGBITS_TOTAL : IMGBITS_PARTIAL,
	FALSE, m_pFilter->_yBot);

    return (S_OK);
}

// CImgTaskPlug (Private) -----------------------------------------------------------

void CImgTaskPlug::Decode(BOOL *pfNonProgressive)
{
    HRESULT hResult;
    CComPtr< IImageDecodeEventSink > pDitherer;
    CComPtr< IDithererImpl > pDithererImpl;
    CComPtr< IStream > pStream;
    CComPtr< IStream > pOutStream;
    CComPtr< IMapMIMEToCLSID > pMap;
    CComPtr< IImageDecodeEventSink > pEventSink;

    m_pEventSink = (IImageDecodeEventSink*)new CImageDecodeEventSink(this);
    if (m_pEventSink == NULL)
 
    {
	goto Cleanup;
    }

    pStream = (IStream*)new CPlugStream(this);
    if (pStream == NULL)
    {
	goto Cleanup;
    }

    hResult = GetImgTaskExec()->RequestCoInit();
    if (FAILED(hResult))
    {
	goto Cleanup;
    }

    if (_colorMode == 8)
    {
	hResult = CoCreateInstance(CLSID_CoDitherToRGB8, NULL, 
	    CLSCTX_INPROC_SERVER, IID_IDithererImpl, (void**)&pDithererImpl);
	if (FAILED(hResult))
	{
	    goto Cleanup;
	}

	pDithererImpl->SetEventSink(m_pEventSink);

	hResult = SetColorTable(pDithererImpl);
	if (FAILED(hResult))
	{
	    goto Cleanup;
	}

	pDithererImpl->QueryInterface(IID_IImageDecodeEventSink, 
	    (void**)&pEventSink);
    }
    else
    {
	pEventSink = m_pEventSink;
    }

    hResult = DecodeImage(pStream, NULL, pEventSink);
    if (FAILED(hResult))
    {
	goto Cleanup;
    }

    _yBot = _yHei;
    _ySrcBot = -1;

    GetTransIndex();

    OnProg(TRUE, IMGBITS_TOTAL, FALSE, _yBot);

Cleanup:
    return;
}

void
CImgTaskPlug::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    if (_pImgBits)
    {
        if (!m_bGotTrans)
            GetTransIndex();

        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}

HRESULT CImgTaskPlug::GetTransIndex()
{
    // If we dithered the image the transparent index has changed to
    // match our destination palette.  Otherwise it is still the 
    // transparent index in the surface.  If the surface is not 8bpp
    // don't bother asking for the transparent index - ImgBltDib() doesn't
    // handle that case.

    if (m_bGotTrans)
        return S_OK;

    m_bGotTrans = TRUE;
    
    if (_colorMode == 8)
    {
        _lTrans = g_wIdxTrans;

        TraceTag((tagImgTrans, "CImgTaskPlug %x  _lTrans = %d", this, _lTrans));

        ((CImgBitsDIB *)_pImgBits)->SetTransIndex(_lTrans);
    }
    else if (m_nBytesPerPixel == 1 && m_pSurface)
    {
        DDCOLORKEY ddKey;

        m_pSurface->GetColorKey(DDCKEY_SRCBLT, &ddKey);
        _lTrans = (LONG)ddKey.dwColorSpaceLowValue;

        TraceTag((tagImgTrans, "CImgTaskPlug %x  _lTrans = %d", this, _lTrans));

        ((CImgBitsDIB *)_pImgBits)->SetTransIndex(_lTrans);
    }

    return S_OK;
}

BOOL
IsPluginImgFormat(BYTE * pb, UINT cb)
{
    UINT nFormat;
    return(IdentifyMIMEType(pb, cb, &nFormat) == S_OK);
}

CImgTask* NewImgTaskPlug()
{
    return(new CImgTaskPlug);
}

HRESULT CImgTaskPlug::SetColorTable(IDithererImpl* pDitherer)
{
    HRESULT hResult;

    _nColors = g_lpHalftone.wCnt;
    memcpy(_ape, g_lpHalftone.ape, _nColors * sizeof(PALETTEENTRY));

    hResult = pDitherer->SetDestColorTable(_nColors, g_rgbHalftone);
    if (FAILED(hResult))
    {
	return (hResult);
    }

    return (S_OK);
}

// CPlugStream (Private) -----------------------------------------------------------

CPlugStream::CPlugStream(CImgTaskPlug* pFilter) :
    m_pFilter(pFilter),
    m_nRefCount(0)
{
}

CPlugStream::~CPlugStream()
{
}

ULONG CPlugStream::AddRef()
{
    m_nRefCount++;

    return (m_nRefCount);
}

ULONG CPlugStream::Release()
{
    m_nRefCount--;
    if (m_nRefCount == 0)
    {
	delete this;
	return (0);
    }

    return (m_nRefCount);
}

STDMETHODIMP CPlugStream::QueryInterface(REFIID iid, void** ppInterface)
{
    if (ppInterface == NULL)
    {
	return (E_POINTER);
    }

    *ppInterface = NULL;

    if (IsEqualGUID(iid, IID_IUnknown))
    {
	*ppInterface = (IUnknown*)this;
    }
    else if (IsEqualGUID(iid, IID_IStream))
    {
	*ppInterface = (IStream*)this;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    ((LPUNKNOWN)*ppInterface)->AddRef();
    return (S_OK);
}

STDMETHODIMP CPlugStream::Clone(IStream** ppStream)
{
    if (ppStream == NULL)
    {
	return (E_POINTER);
    }

    *ppStream = NULL;

    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Commit(DWORD dwFlags)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::CopyTo(IStream* pStream, ULARGE_INTEGER nBytes,
    ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::LockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Read(void* pBuffer, ULONG nBytes, 
   ULONG* pnBytesRead)
{
    HRESULT hResult;

    if (pnBytesRead != NULL)
    {
	*pnBytesRead = 0;
    }
    if (pBuffer == NULL)
    {
	return (E_POINTER);
    }
    if (nBytes == 0)
    {
	return (E_INVALIDARG);
    }

    hResult = m_pFilter->Read(pBuffer, nBytes, pnBytesRead);
    if (FAILED(hResult))
    {
	return (hResult);
    }

    if (*pnBytesRead < nBytes)
    {
	return (S_FALSE);
    }

    return (S_OK);
}

STDMETHODIMP CPlugStream::Revert()
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Seek(LARGE_INTEGER nDisplacement, DWORD dwOrigin,
    ULARGE_INTEGER* piNewPosition)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::SetSize(ULARGE_INTEGER nNewSize)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Stat(STATSTG* pStatStg, DWORD dwFlags)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::UnlockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Write(const void* pBuffer, ULONG nBytes, 
    ULONG* pnBytesWritten)
{
    return (E_NOTIMPL);
}

// IImageDecodeFilter support -----------------------------------------------------

struct BFID_ENTRY {
    int bpp;
    const GUID *pBFID;
};

const BFID_ENTRY  BFIDInfo[] =
{
    { 1, &BFID_MONOCHROME },
    { 4, &BFID_RGB_4 },
    { 8, &BFID_RGB_8 },
    { 15, &BFID_RGB_555 },
    { 16, &BFID_RGB_565 },
    { 24, &BFID_RGB_24 },
    { 32, &BFID_RGB_32 }
};

class CImageDecodeFilter : public CBaseFT, public IImageDecodeFilter
{
    typedef CBaseFT super;
    
public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImageDecodeFilter))

    // IUnknown members

    STDMETHOD(QueryInterface)(REFIID, void **);
    STDMETHOD_(ULONG,AddRef)();
    STDMETHOD_(ULONG,Release)();
    
    // IImageDecodeFilter methods
    STDMETHOD( Initialize )( IImageDecodeEventSink* pEventSink );
    STDMETHOD( Process )( IStream* pStream );
    STDMETHOD( Terminate )( HRESULT hrStatus );

    // Worker methods

    const BFID_ENTRY * MatchBFID(int bpp);
    const BFID_ENTRY * MatchBFIDtoBFID(GUID *pBFID);
    HRESULT LockBits(RECT *prcBounds, DWORD dwLockFlags, void **ppBits, long *pPitch);
    HRESULT UnlockBits(RECT *prcBounds, void *pBits);
    HRESULT EnsureSurface();
    HRESULT CopyRect(RECT *prcBounds);
    void OnComplete(HRESULT hr);
    void ImageCallback();

    // Worker thread methods
    
    static DWORD WINAPI ThreadProc(LPVOID lpData);
    STDMETHOD( ProcessOnThread )( );
        
    CComPtr < IImageDecodeEventSink > m_pEventSink;
    DWORD                   m_dwEvents;
    ULONG                   m_nFormats;
    GUID *                  m_pFormats;
    ULONG                   m_ulState;
    CComPtr < IDirectDrawSurface >    m_pSurface;
    CImgCtx *               m_pImgCtx;
    LONG                    m_xWidth;
    LONG                    m_yHeight;
    LONG                    m_iBitCount;
    void *                  m_pvBits;
    RECT                    m_rcUpdate;
    HANDLE                  m_hMainEvent;
    HANDLE                  m_hWorkerEvent;
    enum { Ready, Callback, Done } m_State;
};

const BFID_ENTRY * CImageDecodeFilter::MatchBFID(int bpp)
{
    const BFID_ENTRY *pBFIDEntry = NULL;
    ULONG i;

    for (i = 0; i < ARRAY_SIZE(BFIDInfo); ++i)
    {
        if (BFIDInfo[i].bpp == bpp)
        {
            pBFIDEntry = BFIDInfo + i;
            break;
        }
    }

    if (pBFIDEntry)
    {
        for (i = 0; i < m_nFormats; ++i)
        {
            if (IsEqualGUID(*pBFIDEntry->pBFID, m_pFormats[i]))
            return pBFIDEntry;
        }
    }
    
    return NULL;
}

const BFID_ENTRY * CImageDecodeFilter::MatchBFIDtoBFID(GUID *pBFID)
{
    ULONG i;

    for (i = 0; i < ARRAY_SIZE(BFIDInfo); ++i)
    {
        if (IsEqualGUID(*BFIDInfo[i].pBFID, *pBFID))
            return BFIDInfo + i;
    }

    return NULL;
}

HRESULT CImageDecodeFilter::LockBits(RECT *prcBounds, DWORD dwLockFlags, void **ppBits
, long *pPitch)
{
    HRESULT hResult;
    
    DDSURFACEDESC   ddsd;

    ddsd.dwSize = sizeof(ddsd);
    hResult = m_pSurface->Lock(prcBounds, &ddsd, DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL);
    if (FAILED(hResult))
        return hResult;

    *ppBits = ddsd.lpSurface;
    *pPitch = ddsd.lPitch;

    return S_OK;
}

HRESULT CImageDecodeFilter::UnlockBits(RECT *prcBounds, void *pBits)
{
    return m_pSurface->Unlock(pBits);
}


HRESULT CImageDecodeFilter::EnsureSurface()
{
    HRESULT hr;
    LPDIRECTDRAWPALETTE pDDPalette;
    HRESULT             hResult;
    CImgBits *pImgBits;
    
    if (m_pSurface == NULL)
    {
        CImgInfo *pImgInfo = (CImgInfo *)m_pImgCtx->GetImgId();

        if(pImgInfo == NULL)
            return E_FAIL;

        pImgInfo->GetImageAndMask(&pImgBits);

        const BFID_ENTRY  *pBFIDEntry;

        // we can only create a surface if we have DIB-formatted bits
        m_pvBits = pImgBits->GetBits();
        if (!m_pvBits)
            return E_FAIL;
            
        IUnknown *pUnk;
        DDCOLORKEY ddkey;
    
        pBFIDEntry = MatchBFID(pImgBits->Depth());
        if (pBFIDEntry == NULL)
            return E_FAIL;

        m_iBitCount = pImgBits->Depth();
        if (m_iBitCount == 15)
            m_iBitCount = 16;

        m_xWidth = pImgBits->Width();
        m_yHeight = pImgBits->Height();
    
        hr = m_pEventSink->GetSurface(m_xWidth, 
                m_yHeight, *pBFIDEntry->pBFID,
                1, IMGDECODE_HINT_TOPDOWN | IMGDECODE_HINT_FULLWIDTH,
                &pUnk);
        if (FAILED(hr))
            return hr;
    
        pUnk->QueryInterface(IID_IDirectDrawSurface, (void **)&m_pSurface);
        pUnk->Release();

        if (m_pSurface == NULL)
            return E_FAIL;

        // Start the transparent index out of range (opaque)
        ddkey.dwColorSpaceLowValue = 0xffffffff;
        ddkey.dwColorSpaceHighValue = 0xffffffff;
        m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddkey);
    
        // Set the palette if there is one
        hResult = m_pSurface->GetPalette(&pDDPalette);
        if (SUCCEEDED(hResult))
        {
            RGBQUAD             argb[256];
            PALETTEENTRY        ape[256];
            LONG                cColors;

            cColors = pImgBits->Colors();
            if (cColors > 0)
            {
                if (cColors > 256)
                    cColors = 256;

                pImgBits->GetColors(0, cColors, argb);
                CopyPaletteEntriesFromColors(ape, argb, cColors);
                pDDPalette->SetEntries(0, 0, cColors, ape);
                pDDPalette->Release();
            }
        }

        // Notify the caller if necessary
        
        if (m_dwEvents & IMGDECODE_EVENT_PALETTE)
            m_pEventSink->OnPalette();
    }

    return S_OK;
}

void CImageDecodeFilter::OnComplete(HRESULT hr)
{
    if (SUCCEEDED(hr) && (m_dwEvents & IMGDECODE_EVENT_BITSCOMPLETE))
        m_pEventSink->OnBitsComplete();

    m_pEventSink->OnDecodeComplete(hr);
    SetEvent(m_hWorkerEvent);
}

HRESULT CImageDecodeFilter::CopyRect(RECT *prcBounds)
{
    BYTE    *pbBits = NULL, *pbSrc, *pbDst;
    long     cbRowDst = 0, cbRowSrc, i, y1, y2;
    HRESULT hr;

    hr = EnsureSurface();
    if (FAILED(hr))
        return hr;

    hr = LockBits(prcBounds, 0, (void **)&pbBits, &cbRowDst);
    if (FAILED(hr))
        return hr;

    y1 = prcBounds->top;
    y2 = prcBounds->bottom;
    if (y1 > y2)
    {
        long t;

        t = y1;
        y1 = y2 + 1;        // maintain inclusive/exclusive relationship
        y2 = t + 1;
    }

    cbRowSrc = -(((m_xWidth * m_iBitCount + 31) & ~31) / 8);
    pbSrc = (BYTE *)m_pvBits - cbRowSrc * (m_yHeight - y1 - 1);
    
    pbDst = pbBits;
    if (cbRowDst < 0)
        pbDst -= cbRowDst * (m_yHeight - y1 - 1);

    for (i = y1; i < y2; ++i)
    {
        memcpy(pbDst, pbSrc, -cbRowSrc);    
        pbSrc += cbRowSrc;
        pbDst += cbRowDst;
    }
    
    UnlockBits(prcBounds, pbBits);

    return S_OK;
}

void IImageDecodeFilter_CallbackOnThread(void *pv1, void *pv2)
{
    CImageDecodeFilter *pImgFilter = (CImageDecodeFilter *)pv2;

    pImgFilter->m_State = CImageDecodeFilter::Callback;
    SetEvent(pImgFilter->m_hMainEvent);
}

void CImageDecodeFilter::ImageCallback()
{
    RECT    rcBounds;
    HRESULT hr;
    DDCOLORKEY ddKey;

    m_pImgCtx->GetStateInfo(&m_ulState, NULL, TRUE);

    // First see if there is an error or the image is done decoding.
    
    if (m_ulState & IMGLOAD_COMPLETE)
    {
        CImgInfo *pImgInfo = (CImgInfo *)m_pImgCtx->GetImgId();
	
        // Transfer remaining data to buffer since last view change
        hr = EnsureSurface();
        if (SUCCEEDED(hr))
        {
            rcBounds.left = 0;
            rcBounds.top = 0;
            rcBounds.right = m_xWidth;
            rcBounds.bottom = m_yHeight;
            SubtractRect(&rcBounds, &rcBounds, &m_rcUpdate);

            hr = CopyRect(&rcBounds);

            if (pImgInfo->GetTrans())
            {
                ddKey.dwColorSpaceLowValue = ddKey.dwColorSpaceHighValue = pImgInfo->GetTrans();
                m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddKey);
            }
        }

        OnComplete(hr);
        return;
    }
    else if (m_ulState & IMGLOAD_ERROR)
    {
        OnComplete(E_FAIL);
        return;
    }

    // If we haven't made the surface yet do it now (responding to IMGCHG_VIEW)

    if (FAILED(EnsureSurface()))
    {
        OnComplete(E_FAIL);
        return;
    }
    
    // Transfer image data and send progress event 

    if ((m_dwEvents & IMGDECODE_EVENT_PROGRESS) && m_pSurface)
    {
        RECT    rcBounds[2], rcImg;
        LONG    nRects, i;

        rcImg.left = 0;
        rcImg.top = 0;
        rcImg.right = m_xWidth;
        rcImg.bottom = m_yHeight;

        m_pImgCtx->GetUpdateRects(rcBounds, &rcImg, &nRects);

        // If we call GetUpdateRects before the decoder has filled anything in
        // (_yTop == -1) the function returns the entire image rectangle.  We 
        // need to detect this case and skip over this notification.
	
        if (IsRectEmpty(&m_rcUpdate) 
            && nRects > 0 
            && EqualRect(&rcImg, rcBounds))
            return;
	    
        for (i = 0; i < nRects; ++i)
        {
            hr = CopyRect(&rcBounds[i]);
            if (FAILED(hr))
            {
                OnComplete(hr);
                return;
            }
            
            m_pEventSink->OnProgress(&rcBounds[i], TRUE);
            UnionRect(&m_rcUpdate, &m_rcUpdate, &rcBounds[i]);
        }
    }
}

STDMETHODIMP
CImageDecodeFilter::QueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IImageDecodeFilter || riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        ((LPUNKNOWN)*ppv)->AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
}

STDMETHODIMP_(ULONG)
CImageDecodeFilter::AddRef()
{
    return(super::AddRef());
}

STDMETHODIMP_(ULONG)
CImageDecodeFilter::Release()
{
    return(super::Release());
}

STDMETHODIMP
CImageDecodeFilter::Initialize(IImageDecodeEventSink* pEventSink)
{
    HRESULT hr;
    
    if (pEventSink == NULL)
        return E_INVALIDARG;

    m_pEventSink = pEventSink;

    hr = pEventSink->OnBeginDecode(&m_dwEvents, &m_nFormats, &m_pFormats);

    return hr;
}

STDMETHODIMP
CImageDecodeFilter::Process(IStream* pStream)
{
    DWORD dwTID;
    HRESULT hr = E_FAIL;
    HANDLE hThread;
    CDwnDoc *pDwnDoc;
    CDwnCtx *pDwnCtx;
    CDwnLoad *pDwnLoad;
    const BFID_ENTRY  *pBFIDEntry = NULL;
    DWNLOADINFO dwnInfo;
    ULONG i;

    ZeroMemory(&dwnInfo, sizeof(dwnInfo));
    dwnInfo.pstm = pStream;

    pDwnDoc = new CDwnDoc;
    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto cleanup1;
    }

    dwnInfo.pDwnDoc = pDwnDoc;
    dwnInfo.pchUrl = TEXT("");

    for (i = 0; i < m_nFormats; ++i)
    {
        pBFIDEntry = MatchBFIDtoBFID(&m_pFormats[i]);
        if (pBFIDEntry)
            break;
    }
    if (pBFIDEntry == NULL)
    {
        hr = E_FAIL;
        goto cleanup2;
    }
	
    pDwnDoc->SetDownf(pBFIDEntry->bpp | DWNF_RAWIMAGE | DWNF_NOOPTIMIZE);

    hr = NewDwnCtx(DWNCTX_IMG, TRUE, &dwnInfo, &pDwnCtx);
    if (FAILED(hr))
        goto cleanup2;

    m_pImgCtx = (CImgCtx *)pDwnCtx;
    
    // Keep the CDwnLoad around so it can passivate on this
    // thread.  If you don't, it has to post a message to
    // get back to this thread and we don't work well in
    // console mode apps

    // Returns addref'd CDwnLoad
    pDwnLoad = m_pImgCtx->GetDwnLoad();

    m_hMainEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
    if (!m_hMainEvent)
        goto cleanup3;

    m_hWorkerEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
    if (!m_hWorkerEvent)
        goto cleanup4;
        
    m_State = Ready;
    
    hThread = CreateThread(NULL, 0, ThreadProc, this, 0, &dwTID);
    if (hThread == NULL)
        goto cleanup5;

    while (m_State != Done)
    {
        WaitForSingleObject(m_hMainEvent, INFINITE);

        while (m_State == Callback)
        {
            m_State = Ready;
            ImageCallback();
        }
    }
    
    GetExitCodeThread(hThread, (DWORD *)&hr);
    
    CloseHandle(hThread);

cleanup5:
    CloseHandle(m_hWorkerEvent);

cleanup4:
    CloseHandle(m_hMainEvent);

cleanup3:    
    if (pDwnLoad)
    {
        pDwnLoad->Release();
    }
    if (pDwnCtx)
    {
        pDwnCtx->Release();
    }
    
cleanup2:    
    pDwnDoc->Release();
    
cleanup1:
    return hr;
}

DWORD WINAPI CImageDecodeFilter::ThreadProc(LPVOID lpData)
{
    DWORD dwReturn;
    CImageDecodeFilter *pFilter = (CImageDecodeFilter *)lpData;

    dwReturn = CoInitialize(NULL);
    if (SUCCEEDED(dwReturn))
    {    
        dwReturn = pFilter->ProcessOnThread();
        CoUninitialize();
    }

    return dwReturn;
}

STDMETHODIMP
CImageDecodeFilter::ProcessOnThread()
{
    DWORD   dwResult;
    BOOL    fActive = TRUE;
    
    m_pImgCtx->SetCallback(IImageDecodeFilter_CallbackOnThread, this);
    m_pImgCtx->SelectChanges(IMGCHG_VIEW | IMGCHG_COMPLETE, 0, TRUE);

    while (fActive)
    {
        dwResult = MsgWaitForMultipleObjects(1, &m_hWorkerEvent, FALSE, INFINITE, 
                        QS_ALLINPUT);
        if (dwResult == WAIT_OBJECT_0 + 1)
        {
            MSG msg;

            while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
            {
                if (msg.message == WM_QUIT)
                {
                    fActive = FALSE;
                    break;
                }
                else
                    DispatchMessage(&msg);
            }
        }
        else
        {
            fActive = FALSE;
        }
    }

    m_pImgCtx->Disconnect();
    
    m_State = Done;
    SetEvent(m_hMainEvent);
    
    return S_OK;
}

STDMETHODIMP
CImageDecodeFilter::Terminate(HRESULT hrStatus)
{
	if (m_pFormats)
		CoTaskMemFree(m_pFormats);

    return S_OK;
}

STDMETHODIMP
CreateIImageDecodeFilter(IUnknown * pUnkOuter, IUnknown **ppUnk)
{
    if (pUnkOuter != NULL)
    {
        *ppUnk = NULL;
        return(CLASS_E_NOAGGREGATION);
    }

    CImageDecodeFilter * pImgFilter = new CImageDecodeFilter;

    *ppUnk = pImgFilter;

    RRETURN(pImgFilter ? S_OK : E_OUTOFMEMORY);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\rootctx.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1998
//
//  File:       rootctx.cxx
//
//  Contents:   CHtmRootParseCtx adds text and nodes to the tree on
//              behalf of the parser.
//
//              CHtmTopParseCtx is also defined here.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_TREEPOS_HXX_
#define X_TREEPOS_HXX_
#include "treepos.hxx"
#endif

#ifndef X_LTABLE_HXX_
#define X_LTABLE_HXX_
#include "ltable.hxx"
#endif

#ifndef X_ROOTCTX_HXX_
#define X_ROOTCTX_HXX_
#include "rootctx.hxx"
#endif

#ifndef X_TXTDEFS_H
#define X_TXTDEFS_H
#include "txtdefs.h"
#endif

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X__TEXT_H_
#define X__TEXT_H_
#include "_text.h"
#endif

ExternTag(tagParse);

DeclareTag(tagRootParseCtx,     "Tree",     "Trace RootParseCtx");

MtDefine(CHtmRootParseCtx, CHtmParseCtx, "CHtmRootParseCtx");
MtDefine(CHtmTopParseCtx, CHtmParseCtx, "CHtmTopParseCtx");

MtDefine(RootParseCtx, Metrics, "Tree Building");
MtDefine(ParseTextNotifications, RootParseCtx, "Text Notifications sent");
MtDefine(ParseElementNotifications, RootParseCtx, "Element Notifications sent");
MtDefine(ParseNailDownChain, RootParseCtx, "Chain nailed down");
MtDefine(ParseInclusions, RootParseCtx, "Inclusions built");
MtDefine(ParsePrepare, RootParseCtx, "Prepare called");
MtDefine(CollapsedWhitespace, RootParseCtx, "Collapsed whitespace buffer");



extern const ELEMENT_TAG s_atagNull[];

//+------------------------------------------------------------------------
//
//  CHtmRootParseCtx
//
//  The root parse context.
//
//  The root parse context is responsible for:
//
//  1. Creating nodes for elements
//  2. Putting nodes and text into the tree verbatim
//  3. Ending elements, creating "proxy" nodes as needed
//
//-------------------------------------------------------------------------

const ELEMENT_TAG s_atagRootReject[] = {ETAG_NULL};

//+----------------------------------------------------------------------------
//
//  Members:    Factory, constructor, destructor
//
//  Synopsis:   hold on to root site
//
//-----------------------------------------------------------------------------
HRESULT
CreateHtmRootParseCtx(CHtmParseCtx **pphpx, CMarkup *pMarkup)
{
    *pphpx = new CHtmRootParseCtx(pMarkup);
    if (!*pphpx)
        RRETURN(E_OUTOFMEMORY);

    return S_OK;
}

CHtmRootParseCtx::CHtmRootParseCtx(CMarkup *pMarkup)
  : CHtmParseCtx(0.0)
{
    pMarkup->AddRef();
    _pMarkup       = pMarkup;
    _pDoc          = pMarkup->Doc();
    _atagReject    = s_atagNull;
}

CHtmRootParseCtx::~CHtmRootParseCtx()
{
    // Defensive deletion and release of all pointers
    // should already be null except in out of memory or other catastophic error
    // This can happen also if the parser recieves a STOP
    
    if (!_fFinished)
    {
        _pMarkup->CompactStory();

        Assert(_pMarkup->IsStreaming());
        _pMarkup->SetRootParseCtx( NULL );

        _pMarkup->_fNoUndoInfo = FALSE;
    }

    if (_ptpSpaceCache)
    {
        delete [] _ptpSpaceCache->GetCollapsedWhitespace();
        MemFree(_ptpSpaceCache);
    }

    _pMarkup->Release();
}

CHtmParseCtx *
CHtmRootParseCtx::GetHpxEmbed()
{
    return this;
}

BOOL
CHtmRootParseCtx::SetGapToFrontier( CTreePosGap * ptpg )
{
    if( _ptpAfterFrontier )
    {
        IGNORE_HR( ptpg->MoveTo( _ptpAfterFrontier, TPG_RIGHT ) );
        return TRUE;
    }

    return FALSE;
}


//+----------------------------------------------------------------------------
//
//  Members:    Prepare, Commit, Finish
//
//-----------------------------------------------------------------------------

HRESULT
CHtmRootParseCtx::Init()
{
    HRESULT hr = S_OK;
    
    Assert(!_pMarkup->IsStreaming());
    _pMarkup->SetRootParseCtx( this );

    _sidLast = sidAsciiLatin;

    Assert( ! _pMarkup->_fNoUndoInfo );
    _pMarkup->_fNoUndoInfo = TRUE;

    // Set up the dummy text node in my insertion chain
    _tdpTextDummy.SetType( CTreePos::Text );
    _tdpTextDummy.SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD | CTreePos::TPF_DATA_POS );
    WHEN_DBG( _tdpTextDummy._pOwner = _pMarkup; );

    _ptpChainTail = & _tdpTextDummy;
    _ptpChainCurr = & _tdpTextDummy;

    RRETURN(hr);
}


HRESULT
CHtmRootParseCtx::Prepare()
{
    HRESULT hr = S_OK;

    _fLazyPrepareNeeded = TRUE;

    MtAdd(Mt(ParsePrepare), 1, 0);
    
    RRETURN(hr);
}

HRESULT
CHtmRootParseCtx::Commit()
{
    HRESULT         hr;

    hr = THR(FlushNotifications());

    AssertSz( _pMarkup->IsNodeValid(), "Markup not valid after root parse ctx, talk to JBeda");

    RRETURN(hr);
}

HRESULT
CHtmRootParseCtx::Finish()
{
    HRESULT hr = S_OK;
        

    // Step 1: Commit
    
    hr = THR(Commit());
    if (hr)
        goto Cleanup;

    // Step 2: Update the markup
    _pMarkup->CompactStory();

    Assert(_pMarkup->IsStreaming());
    _pMarkup->SetRootParseCtx( NULL );

    Assert( _pMarkup->_fNoUndoInfo );
    _pMarkup->_fNoUndoInfo = FALSE;

    _fFinished = TRUE;

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmRootParseCtx::InsertLPointer ( CTreePos * * pptp, CTreeNode * pNodeCur)
{
    RRETURN(InsertPointer(pptp, pNodeCur, TRUE));
}

HRESULT
CHtmRootParseCtx::InsertRPointer ( CTreePos * * pptp, CTreeNode * pNodeCur)
{
    RRETURN(InsertPointer(pptp, pNodeCur, TRUE));
}

HRESULT
CHtmRootParseCtx::InsertPointer ( CTreePos * * pptp, CTreeNode * pNodeCur, BOOL fRightGravity )
{
    HRESULT hr = S_OK;

    Assert( pptp );

    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNodeCur );
        if (hr)
            goto Cleanup;
    }
    VALIDATE( pNodeCur );

    // Quick and dirty way to get a pos into the tree
    NailDownChain();

    *pptp = _pMarkup->NewPointerPos( NULL, fRightGravity, FALSE );
    if( ! *pptp )
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR( _pMarkup->Insert( *pptp, _ptpAfterFrontier, TRUE ) );
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN( hr );
}

HRESULT
CHtmRootParseCtx::InsertTextFrag ( TCHAR * pch, ULONG cch, CTreeNode * pNodeCur )
{
    HRESULT     hr = S_OK;
    CTreePos *  ptpTextFrag = NULL;
    CMarkupTextFragContext * ptfc;

    Assert( pch && cch );

    if (!_pMarkup->_fDesignMode)
        goto Cleanup;

    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNodeCur );
        if (hr)
            goto Cleanup;
    }
    VALIDATE( pNodeCur );

    // Insert the text frag into the list
    ptfc = _pMarkup->EnsureTextFragContext();
    if( !ptfc )
        goto OutOfMemory;

    hr = THR( InsertPointer( &ptpTextFrag , pNodeCur, FALSE ) );
    if (hr) 
        goto Cleanup;
    
#if DBG==1
    if( ptfc->_aryMarkupTextFrag.Size() )
    {
        CTreePos * ptpLast = ptfc->_aryMarkupTextFrag[ptfc->_aryMarkupTextFrag.Size()-1]._ptpTextFrag;
        Assert( ptpLast );
        Assert( ptpLast->InternalCompare( ptpTextFrag ) == -1 );
    }
#endif

    hr = THR( ptfc->AddTextFrag( ptpTextFrag, pch, cch, ptfc->_aryMarkupTextFrag.Size() ) );
    if (hr)
    {
        IGNORE_HR( _pMarkup->Remove( ptpTextFrag ) );
        goto Cleanup;
    }

    WHEN_DBG( ptfc->TextFragAssertOrder() );

Cleanup:

    RRETURN( hr );

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  CHtmRootParseCtx::BeginElement
//
//  1. Create the new node
//  2. Add it to the tree
//  3. Call hack code
//
//-------------------------------------------------------------------------
HRESULT
CHtmRootParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{
    HRESULT         hr = S_OK;
    CTreeNode *     pNode;

    TraceTagEx((tagRootParseCtx, TAG_NONAME,
        "RootParse      : BeginElement %S.E%d",
        pel->TagName(), pel->SN()));

    // Step 1: set our insertion point if needed
    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNodeCur );
        if (hr)
            goto Cleanup;
    }
    VALIDATE( pNodeCur );
   
    // Step 2: create the node

    pNode = *ppNodeNew = new CTreeNode(pNodeCur, pel);
    if (!*ppNodeNew)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

#if NOPARSEADDREF
    // Addref for the parser -- get rid of this!
    (*ppNodeNew)->NodeAddRef();
#endif

     pel->__pNodeFirstBranch = pNode;

    {
        CTreePos *  ptpBegin, * ptpEnd;
        CTreePos *  ptpAfterCurr = _ptpChainCurr->Next();

        //
        // Step 3: append the node into the pending chain
        //

        // Initialize/create the tree poses
        Assert( pNode->GetBeginPos()->IsUninit() );
        ptpBegin = pNode->InitBeginPos( TRUE );
        Assert( ptpBegin );

        Assert( pNode->GetEndPos()->IsUninit() );
        ptpEnd = pNode->InitEndPos( TRUE );
        Assert( ptpEnd );

        // Add them to the chain
        ptpBegin->SetFirstChild( _ptpChainCurr );
        ptpBegin->SetNext( ptpEnd );
        ptpBegin->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
        ptpBegin->SetLeftThread( _ptpChainCurr );
        ptpBegin->SetRightThread( ptpEnd );
#endif

        ptpEnd->SetFirstChild( ptpBegin );
        ptpEnd->SetNext( ptpAfterCurr );
        ptpEnd->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
        ptpEnd->SetLeftThread( ptpBegin );
        ptpEnd->SetRightThread( ptpAfterCurr );
#endif
        _ptpChainCurr->SetNext( ptpBegin );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
        _ptpChainCurr->SetRightThread( ptpBegin );
#endif
        Assert( _ptpChainCurr->IsLeftChild() );
        Assert( _ptpChainCurr->IsLastChild() );

        if( ptpAfterCurr )
        {
            ptpAfterCurr->SetFirstChild( ptpEnd );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
            ptpAfterCurr->SetLeftThread( ptpEnd );
#endif
            Assert( ptpAfterCurr->IsLeftChild() );
            Assert( ptpAfterCurr->IsLastChild() );
        }
        else
            _ptpChainTail = ptpEnd;

        // CONSIDER: update the counts on the
        // insertion list as we add these.

        // The node is now "in" the tree so
        // addref it for the tree
        pNode->PrivateEnterTree();


        // Step 4: remember info for notifications
        if (!_pNodeForNotify)
            _pNodeForNotify = pNodeCur;
        _nElementsAdded++;
        if( !_ptpElementAdded )
            _ptpElementAdded = ptpBegin;

        // "Add" the characters
        _cchNodeBefore++;
        _cchNodeAfter++;
        AddCharsToNotification( _cpChainCurr, 2 );

        pel->SetMarkupPtr( _pMarkup);
        pel->PrivateEnterTree();

        // Step 5: Advance the frontier
        _ptpChainCurr = ptpBegin;
        _pNodeChainCurr = pNode;
        _cpChainCurr++;
    }


    // Step 6: compatibility hacks
    hr = THR(HookBeginElement(pNode));
    if (hr)
        goto Cleanup;
    
Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  CHtmRootParseCtx::EndElement
//
//  1. Call hack code
//  2. Create proxy nodes and add them all to the tree if needed
//  3. Compute and return new current node
//
//-------------------------------------------------------------------------
HRESULT
CHtmRootParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    HRESULT hr = S_OK;
    CElement * pElementEnd = pNodeEnd->Element();
    BOOL    fFlushNotification = FALSE;

    TraceTagEx((tagRootParseCtx, TAG_NONAME,
        "RootParse      : EndElement %S.E%d",
        pNodeEnd->Element()->TagName(), pNodeEnd->Element()->SN()));

    // Make sure the node ending passed in is actually in 
    // the pNodeCur's branch
    Assert( pNodeCur->SearchBranchToRootForNode( pNodeEnd ) );

    // Step 1: set our insertion point if needed
    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNodeCur );
        if (hr)
            goto Cleanup;
    }
    VALIDATE( pNodeCur );
       
    // Step 2: compatibility hacks - this is kind of
    // a nasty place to put this, but we need to make
    // sure that the element is in the tree before
    // we do the hacks.

    hr = THR(HookEndElement(pNodeEnd, pNodeCur));
    if (hr)
        goto Cleanup;

    if (!_pNodeForNotify)
    {
        _pNodeForNotify = pNodeCur;
    }

    // Step 3: decide if we are going to flush a notification
    // because the element is ending
    {
        // This asserts that elements that we have just put in
        // the tree (below the notification) don't want text
        // change notifications.
        Assert(     ! pElementEnd->WantTextChangeNotifications()
                ||  ! _fTextPendingValid
                ||  _nfTextPending.Node()->SearchBranchToRootForScope( pElementEnd ) );

        if(   pElementEnd->WantTextChangeNotifications()
           || pElementEnd->WantEndParseNotification() )
        {
            fFlushNotification = TRUE;
        }
    }

    // step 4: optimization: bottom node is ending

    if (pNodeEnd == pNodeCur)
    {
        *ppNodeNew = pNodeEnd->Parent();

        if( *ppNodeNew )
        {
#ifdef NOPARSEADDREF
            (*ppNodeNew)->NodeAddRef();
#endif

            // If we are at the end of the chain, nail
            // down the chain and advance the real frontier
            if( _ptpChainCurr == _ptpChainTail )
            {
                WHEN_DBG( CTreePos * ptpContent );

                NailDownChain();

                WHEN_DBG( ptpContent = ) AdvanceFrontier();

                Assert(     ptpContent->IsEndNode()
                       &&   ptpContent->Branch() == pNodeEnd );

            }
            // otherwise, advance within the chain
            else
            {
                _ptpChainCurr = _ptpChainCurr->Next();

                Assert(     _ptpChainCurr
                       &&   _ptpChainCurr->IsEndNode()
                       &&   _ptpChainCurr->Branch() == pNodeEnd );

                Assert( _cchNodeAfter );
            }

            _cpChainCurr++;
            _pNodeChainCurr = *ppNodeNew;

            // If we have WCH_NODE chars pending after the current cp
            // move them behind the current cp.  If this isn't the case,
            // we just advance the cp and assume the character we are moving
            // over is a WCH_NODE
            if( _cchNodeAfter)
            {
                _cchNodeAfter--;
                _cchNodeBefore++;
            }
#if DBG==1
            else
                Assert( CTxtPtr( _pMarkup, _cpChainCurr - 1 ).GetChar() == WCH_NODE );
#endif
        }
        else
        {
            Assert( pNodeEnd->Tag() == ETAG_ROOT );
            goto Cleanup;
        }
    }

    // step 5: create an inclusion and move the end pos
    // for pNodeEnd into it.  Get the new node for ppNodeNew

    else
    {
        hr = THR( OverlappedEndElement( ppNodeNew, pNodeCur, pNodeEnd, fFlushNotification ) );
        if (hr)
            goto Cleanup;
    }

    // step 6: Push off the notificication or update it if necessary

    {
        if( fFlushNotification && _fTextPendingValid )
        {
            FlushTextNotification();
        }

        // If we didn't send the notification above and we
        // think we want to send it to the element that is ending
        // we should send it to that element's parent instead
        if(     _fTextPendingValid
           &&   _nfTextPending.Node()->Element() == pElementEnd )
        {
            _nfTextPending.SetNode( pNodeEnd->Parent() );
        }
        else if( _pNodeForNotify && _pNodeForNotify->Element() == pElementEnd )
        {
            _pNodeForNotify = pNodeEnd->Parent();
            Assert( _pNodeForNotify );
        }
    }

Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Member:     OverlappedEndElement
//
//  Synopsis:   Handles the complex case of overlapping end elements
//
//-----------------------------------------------------------------------------
HRESULT 
CHtmRootParseCtx::OverlappedEndElement( CTreeNode **ppNodeNew, CTreeNode* pNodeCur, CTreeNode *pNodeEnd, BOOL fFlushNotification )
{
    HRESULT         hr = S_OK;
    CTreeNode *     pNodeReparent;
    CTreePos *      ptpWalkLeft;
    long            iLeft;
    long            cIncl = 0;
    CTreeNode *     pNodeNotifyRight;

    // The basic idea here is that we want to create an inclusion
    // for the element while sending the right notifications.  I'm going to
    // use the fact that there can be no real content after the frontier
    // besides end edges.  If we encounter pointers here, we will move
    // them.

    hr = THR( NailDownChain() );
    if (hr)
        goto Cleanup;

    Assert( _cchNodeBefore == 0 );

    // Walk up the tree to count the size of the inclusion.  Change
    // the end edges to non edges to form the left side of the inclusion
    {
        CTreeNode * pNodeWalk;

        for( pNodeWalk = pNodeCur; pNodeWalk != pNodeEnd; pNodeWalk = pNodeWalk->Parent() )
        {
            CTreePos * ptpEnd = pNodeWalk->GetEndPos();

            // This will handle cleaning up character counts
            ptpEnd->MakeNonEdge();

            cIncl++;
        }
    }

    // Make sure that _pNdoeForNotify is in sync with the notification
    if( _fTextPendingValid )
        _pNodeForNotify = _nfTextPending.Node();

    // Create nodes on the right side of the inclusion.  Move any pointers
    // that may be inside of the inclusion to the appropriate places on the right
    pNodeReparent       = pNodeEnd->Parent();
    ptpWalkLeft         = pNodeEnd->GetEndPos()->PreviousTreePos();
    pNodeNotifyRight    = _pNodeForNotify;

    // We have an empty chain and we want to put it after the node ending
    _ptpAfterFrontier   = pNodeEnd->GetEndPos()->NextTreePos();

    for( iLeft = cIncl; iLeft > 0; iLeft-- )
    {
        CElement *  pElementCur;
        CTreeNode * pNodeNew;
        CTreePos *  ptpBegin;
        CTreePos *  ptpEnd;
        CTreePos *  ptpAfterCurr = _ptpChainCurr->Next();

        // Pointers need to be removed from the original position and put in the chain.
        while( ptpWalkLeft->IsPointer() )
        {
            // Pull the pointer out
            CTreePos * ptpCurr = ptpWalkLeft;
            ptpWalkLeft = ptpWalkLeft->PreviousTreePos();
            ptpCurr->Remove();

            // Prep it for the chain
            ptpCurr->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );

            // And add it into the chain    
            ptpCurr->SetFirstChild( _ptpChainCurr );
            ptpCurr->SetNext( ptpAfterCurr );

#if defined(MAINTAIN_SPLAYTREE_THREADS)
            // Set all our threads
            ptpCurr->SetLeftThread( _ptpChainCurr );
            ptpCurr->SetRightThread( ptpAfterCurr );
            _ptpChainCurr->SetRightThread( ptpCurr );
#endif

            _ptpChainCurr->SetNext( ptpCurr );
            if( ptpAfterCurr )
            {
                ptpAfterCurr->SetFirstChild( ptpCurr );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
                ptpAfterCurr->SetLeftThread( ptpCurr );
#endif
            }
            else
                _ptpChainTail = ptpCurr;   

            // Pointers sort of push out onto the chain to preserve ordering
            ptpAfterCurr = ptpCurr;
        }

        // Now, we'd better be a non-edge node
        Assert( ptpWalkLeft->IsEndNode() && ! ptpWalkLeft->IsEdgeScope() );

        pElementCur = ptpWalkLeft->Branch()->Element();

        pNodeNew = new CTreeNode( pNodeReparent, pElementCur );
        if( !pNodeNew )
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        // initialize the begin and end pos's
        ptpBegin = pNodeNew->InitBeginPos( FALSE );
        ptpBegin->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );

        ptpEnd = pNodeNew->InitEndPos( TRUE );
        ptpEnd->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );

        // Link them together
        ptpBegin->SetFirstChild( _ptpChainCurr );
        ptpBegin->SetNext( ptpEnd );

        ptpEnd->SetFirstChild( ptpBegin );
        ptpEnd->SetNext( ptpAfterCurr );

        // Link them into the chain
        _ptpChainCurr->SetNext( ptpBegin );

#if defined(MAINTAIN_SPLAYTREE_THREADS)
        // Set all our threads
        ptpBegin->SetLeftThread( _ptpChainCurr );
        ptpBegin->SetRightThread( ptpEnd );
        ptpEnd->SetLeftThread( ptpBegin );
        ptpEnd->SetRightThread( ptpAfterCurr );
        _ptpChainCurr->SetRightThread( ptpBegin );
#endif

        // Link up the rest of the chain
        if( ptpAfterCurr )
        {
            ptpAfterCurr->SetFirstChild( ptpEnd );

#if defined(MAINTAIN_SPLAYTREE_THREADS)
            ptpAfterCurr->SetLeftThread( ptpEnd );
#endif
        }
        else
            _ptpChainTail = ptpEnd;    

        // tell the node it is in the tree
        pNodeNew->PrivateEnterTree();

        if( _pNodeForNotify == ptpWalkLeft->Branch() )
            pNodeNotifyRight = pNodeNew;

        _ptpChainCurr = ptpBegin;

        // set up for next time
        pNodeReparent = pNodeNew;
        ptpWalkLeft = ptpWalkLeft->PreviousTreePos();
    }

    // Adjust for all the work we just did.
    _cpChainCurr += 1;    // Just jump the kernel
    _pNodeChainCurr = pNodeReparent;

    // That's the sound of the man working on the chain gang...
    hr = THR( NailDownChain() );
    if( hr )
        goto Cleanup; 

    if( _pNodeForNotify == pNodeEnd )
        pNodeNotifyRight = pNodeEnd->Parent();

    *ppNodeNew = pNodeReparent;

    // There is really no efficient way to do notifications here unless
    // we lie a little bit.  So that is what we are going to do.

    // Take our canonical example of overlapping:
    // <P><B><U><I></B></I></U></P>.  
    // Before we see the </B>, everything looks normal.  
    // Then when we created the inclusion, we turned things
    // into this:
    // <P><B><U><I>{/I}{/U}</B>{U}{I}</I></U></P>.
    //
    // Since non-edge node chars don't have any characters in the
    // text stream, this is what each element should see:
    // <I> - The Italic should see that it now has 3 characters - it's
    //       begin and end chars, plus the char for the end of the Bold
    //       This is a net GAIN of one for the Italic
    // <I> - The Underline should see that it now has 5 characters - it's
    //       begin and end plus the Italic's begin and end, plus the
    //       end of the Bold.
    //       This is also a net GAIN of one for the Underline
    // <B> - The Bold should now see that it has lost 2 characters, since
    //       the ends of the Italic and Underline that it contains were
    //       converted to non-edge pos's.  So the Bold is down to 
    //       containing 4 characters, where it used to have 6.  
    //       This is a net LOSS equal to the size of the inclusion generated.
    // <P> - As far as the Paragraph is concerned, nothing has changed.
    //       Everything is still completely contained inside the paragraph, so
    //       This is a net change of ZERO for the paragraph.

    // To make sure everyone sees the proper changes, and that it all adds up
    // to a change of ZERO for the paragraph, here is what we're going to do:
    //
    // 1) Tell the Bold that it lost cIncl chars, to account for turning things
    // into non-edge pos's.  This propagates up to the Paragraph, leaving him
    // down by cIncl chars.
    //
    // 2) Tell the right-hand node at the bottom of the inclusion that he's gained
    // one char, to account for the end of the Bold being inside him now.  This
    // change propagates up the parent chain EXCLUDING the Bold, so everyone is
    // now happy, except for the Paragraph, who is down cIncl - 1 chars.
    //
    // 3) Now tell the paragraph that he's gained cIncl - 1 chars to fix up his
    // counts as well as those above him.

    // We can't do any nifty tricks with merging notifications anymore.
    {
        WHEN_DBG( _nfTextPending._fNoTextValidate = TRUE );
        FlushTextNotification();
        WHEN_DBG( _nfTextPending._fNoTextValidate = FALSE );

        // Remove cIncl characters from the node we're ending
        {
            CNotification nfRemove;

            nfRemove.CharsDeleted( _cpChainCurr - 1, cIncl, pNodeEnd );

            nfRemove.SetFlag(NFLAGS_PARSER_TEXTCHANGE);

            WHEN_DBG( nfRemove._fNoTextValidate = TRUE );
           _pMarkup->Notify( nfRemove );

            MtAdd(Mt(ParseTextNotifications), 1, 0);
        }

        // Add one character to the bottom of the inclusion
        {
            CNotification nfAdd;

            nfAdd.CharsAdded( _cpChainCurr, 1, pNodeReparent );

            nfAdd.SetFlag(NFLAGS_PARSER_TEXTCHANGE);

            WHEN_DBG( nfAdd._fNoTextValidate = TRUE );
            _pMarkup->Notify( nfAdd );

            MtAdd(Mt(ParseTextNotifications), 1, 0);
        }

        if( _pNodeForNotify == pNodeEnd->Parent() )
        {
            // If the ending node's parent was the one to notify, just add to pending
            AddCharsToNotification( _cpChainCurr, cIncl - 1 );
        }
        else
        {
            // Otherwise, we have to notify him explicitly
            CNotification nfAdd;

            nfAdd.CharsAdded( _cpChainCurr, cIncl - 1, pNodeEnd->Parent() );

            nfAdd.SetFlag(NFLAGS_PARSER_TEXTCHANGE);

            WHEN_DBG( nfAdd._fNoTextValidate = TRUE );
            _pMarkup->Notify( nfAdd );

            MtAdd(Mt(ParseTextNotifications), 1, 0);

            _pNodeForNotify = pNodeNotifyRight;
        }
    }

    MtAdd(Mt(ParseInclusions), 1, 0);

Cleanup:
    RRETURN( hr );
}

HRESULT
CHtmRootParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;    
    TCHAR *pchWhitespace;

    Assert(pch && cch);

    // Step 1: set our insertion point if needed

    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNode );
        if (hr)
            goto Cleanup;
    }

    // Step 2: Put down any pending WCH_NODE characters

    if( _cchNodeBefore )
    {
        ULONG    cpInsert = _cpChainCurr - _cchNodeBefore;

        Verify( CTxtPtr( _pMarkup, cpInsert ).
                    InsertRepeatingChar( _cchNodeBefore, WCH_NODE ) == _cchNodeBefore );
        _cchNodeBefore = 0;
    }
    
    // Step 3: Attach whitespace 

    if (_ptpChainCurr->HasCollapsedWhitespace())
    {
        // Step 4: Append whitespace to existing collapsed whitespace pointer
    
        TCHAR   *pchCurrentWhitespace = _ptpChainCurr->GetCollapsedWhitespace();
        long    cchCurrentWhitespace = _tcslen(pchCurrentWhitespace); 

        Assert(pchCurrentWhitespace && cchCurrentWhitespace);

        pchWhitespace = new(Mt(CollapsedWhitespace)) TCHAR[cchCurrentWhitespace + cch + 1];
        if (!pchWhitespace)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
        memcpy(pchWhitespace, pchCurrentWhitespace, cchCurrentWhitespace*sizeof(TCHAR));
        memcpy(pchWhitespace + cchCurrentWhitespace, pch, cch*sizeof(TCHAR));
        pchWhitespace[cch + cchCurrentWhitespace] = '\0';

        _ptpChainCurr->SetCollapsedWhitespace(pchWhitespace);
        delete [] pchCurrentWhitespace;
    }
    else
    {
        // Step 4: Insert pointer pos in chain

        CTreePos *ptp;

        if (_ptpSpaceCache && cch == 1 && *pch == ' ')
        {
            ptp = _ptpSpaceCache;
            _ptpSpaceCache = NULL;
        }
        else
        {
            ptp = _pMarkup->NewPointerPos(NULL, FALSE, TRUE, TRUE /* fCollapsedWhitespace */);
            if (!ptp)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }

            pchWhitespace = new(Mt(CollapsedWhitespace)) TCHAR[cch+1];
            if (!pchWhitespace)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }
            memcpy(pchWhitespace, pch, cch*sizeof(TCHAR));
            pchWhitespace[cch] = '\0';

            ptp->SetCollapsedWhitespace(pchWhitespace);   
        }
    
        ptp->SetWhitespaceParent(pNode);

        InsertTreePosInChain(_ptpChainCurr, ptp);
        _ptpChainCurr = ptp;
    }

    
Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Member:     AddText
//
//  Synopsis:   Inserts text directly into the tree
//
//-----------------------------------------------------------------------------

HRESULT
CHtmRootParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT         hr = S_OK;

    // No more null runs
    Assert( cch != 0 );

    TraceTagEx((tagRootParseCtx, TAG_NONAME,
        "RootParse      : AddText cch=%d",
        cch));

    // Step 1: set our insertion point if needed
    if (_fLazyPrepareNeeded)
    {
        hr = LazyPrepare( pNode );
        if (hr)
            goto Cleanup;
    }
    VALIDATE( pNode );

    if (! _pNodeForNotify)
    {
        _pNodeForNotify = pNode;
    }

    // Step 2: Put down any pending WCH_NODE characters

    if( _cchNodeBefore )
    {
        ULONG    cpInsert = _cpChainCurr - _cchNodeBefore;

        Verify( CTxtPtr( _pMarkup, cpInsert ).
                    InsertRepeatingChar( _cchNodeBefore, WCH_NODE ) == _cchNodeBefore );
        _cchNodeBefore = 0;
    }

    // Step 3: If we're the first space after collapsed whitespace, then
    // we're a generated space and we should cling the collapsed whitespace
    // to this space.

    if (*pch == ' ' && _ptpChainCurr->HasCollapsedWhitespace())
    {
        if (_tcscmp(_ptpChainCurr->GetCollapsedWhitespace(), _T(" ")) == 0)
        {
            CTreePos *ptpRemove = _ptpChainCurr;
            CTreePos *ptpNext = _ptpChainCurr->Next();

            Assert( _ptpChainCurr->IsLeftChild() );
            Assert( _ptpChainCurr->IsLastChild() );
            
            // move to previous tree pos
            _ptpChainCurr = _ptpChainCurr->LeftChild();

            // unlink this text pos
            _ptpChainCurr->SetNext(ptpNext);
#if defined(MAINTAIN_SPLAYTREE_THREADS)
            _ptpChainCurr->SetRightThread(ptpNext);
#endif
            Assert( _ptpChainCurr->IsLeftChild() );
            Assert( _ptpChainCurr->IsLastChild() );

            if (ptpNext)
            {
                ptpNext->SetFirstChild(_ptpChainCurr);
#if defined(MAINTAIN_SPLAYTREE_THREADS)
                ptpNext->SetLeftThread(_ptpChainCurr);
#endif
            }
            else
            {
                _ptpChainTail = _ptpChainCurr;
            }

            // release the pointer pos
            if (_ptpSpaceCache)
            {
                delete [] ptpRemove->GetCollapsedWhitespace();
                MemFree(ptpRemove);
            }
            else
            {
                _ptpSpaceCache = ptpRemove;
            }
        }
        else
        {
            Assert(_ptpChainCurr->Cling());
            _ptpChainCurr->SetGravity(TRUE /* fRight */);
        }
    }

    // Step 4: Insert a run or add chars to a current run
    AddCharsToNotification( _cpChainCurr, cch );
 
    // First case handles the all ASCII case
    if ( !cch || _sidLast == sidAsciiLatin && fAscii )
    {
        if ( ! _ptpChainCurr->IsText() )
        {
            CTreePos    *ptpTextNew;
            // insert the new text pos

            ptpTextNew = InsertNewTextPosInChain( cch, _sidLast, _ptpChainCurr );
            if (!ptpTextNew)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }

            _ptpChainCurr = ptpTextNew;
        }
        else
        {
            _ptpChainCurr->DataThis()->t._cch += cch;
        }
    }
    else
    {
        // Slow loop to take care of non ascii characters
        TCHAR *pchStart = pch;
        TCHAR *pchScan = pch;
        ULONG cchScan = cch;
        LONG sid = sidDefault;

        for (;;)
        {
            // TODO: this might do something strange when _sidLast == sidDefault
            // or _sidLast == sidMerge (jbeda)

            // Break string into uniform sid's, merging from left
            while (cchScan)
            {
                sid = ScriptIDFromCh(*pchScan);
                sid = FoldScriptIDs(_sidLast, sid);
                
                if (sid != _sidLast)
                    break;

                cchScan--;
                pchScan++;
            }

            // Add to the current run or create a new run
            if (pchScan > pchStart)
            {
                long cchChunk = pchScan - pchStart;

                if ( ! _ptpChainCurr->IsText() || _ptpChainCurr->Sid() != _sidLast )                 
                {
                    CTreePos * ptpTextNew;

                    ptpTextNew = InsertNewTextPosInChain( cchChunk, _sidLast, _ptpChainCurr);
                    if (!ptpTextNew)
                    {
                        hr = E_OUTOFMEMORY;
                        goto Cleanup;
                    }

                    _ptpChainCurr = ptpTextNew;
                }
                else
                {
                    _ptpChainCurr->DataThis()->t._cch += cchChunk;
                }
            }

            pchStart = pchScan;

            if (!cchScan)
                break;
                
            Assert(sid != sidMerge);

            _sidLast = sid;
        }

    }


    // Step 2: Add the actual text to the story
    if (cch > 0)
    {
        Verify(
            ULONG(
                CTxtPtr( _pMarkup, _cpChainCurr ).
                    InsertRange( cch, pch ) ) == cch );
    }

    _cpChainCurr += cch;

Cleanup:

    RRETURN( hr );
}


//+------------------------------------------------------------------------
//
//  Member:     HookBeginElement
//
//  Synopsis:   Compatibility hacks for begin element
//
//-------------------------------------------------------------------------
HRESULT
CHtmRootParseCtx::HookBeginElement(CTreeNode * pNode)
{
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     HookEndElement
//
//  Synopsis:   Compatibility hacks for end element
//
//-------------------------------------------------------------------------
HRESULT
CHtmRootParseCtx::HookEndElement(CTreeNode * pNode, CTreeNode * pNodeCur)
{
    //
    // <p>'s which have </p>'s render differently.  Here, when a <p> goes
    // out of scope, we check to see if a </p> was detected, and invalidate
    // the para graph to render correctly.  We only have to do this if the
    // paragraph has gotten an EnterTree notification.
    //

    if (    pNode->Tag() == ETAG_P 
        &&  pNode->Element()->_fExplicitEndTag
        &&  pNode->Element()->IsInMarkup() )
    {
        // This is a hack. Basically, the regular code is WAY too slow.
        // In fact, it forces rerendering of the paragraph AND runs the
        // monster walk.
        //
        // The bug it is trying to solve is that the fancy format for the
        // P tag has already been calculated, and the </P> tag changes the
        // fancy format's _cuvSpaceAfter. Fortunately, we haven't actually used
        // the space after yet (because we haven't even parsed anything following
        // this </P> tag), and because fancy formats aren't inherited,
        // we can just recalc the format for this one tag (actually, we
        // could do even less, just reset the post spacing, but we lack
        // primitives for that).
        // - Arye
        BYTE ab[sizeof(CFormatInfo)];
        ((CFormatInfo *)ab)->_eExtraValues = ComputeFormatsType_Normal;
        ((CFormatInfo *)ab)->_lRecursionDepth = 0;
        if (pNode->IsFancyFormatValid())
        {
            pNode->VoidCachedInfo();
            pNode->Element()->ComputeFormats((CFormatInfo *)ab, pNode);
        }
    }

    return S_OK;
}

void    
CHtmRootParseCtx::AddCharsToNotification( long cpStart, long cch  )
{
    if( ! _fTextPendingValid )
    {
        Assert( _pNodeForNotify );

        // We are adding chars to an existing text pos
        _nfTextPending.CharsAdded(  cpStart,
                                    cch,
                                    _pNodeForNotify );

        _nfTextPending.SetFlag( NFLAGS_CLEANCHANGE );

        _fTextPendingValid = TRUE;
    }
    else
    {
        // Add to the current notification
        _nfTextPending.AddChars( cch );
    }
}

HRESULT
CHtmRootParseCtx::NailDownChain()
{
    HRESULT     hr = S_OK;
    BOOL        fResetChain = FALSE;

    // Create/Modify text pos as necessary
    if( _tdpTextDummy.Cch() != 0 )
    {
        CTreePos   *ptpBeforeFrontier;

        ptpBeforeFrontier = _ptpAfterFrontier->PreviousTreePos();
        if(     ptpBeforeFrontier->IsText()
           &&   ptpBeforeFrontier->Sid() == _tdpTextDummy.Sid() )
        {
            ptpBeforeFrontier->ChangeCch( _tdpTextDummy.Cch() );
        }
        else
        {
            CTreePos * ptpTextNew;

            ptpTextNew = InsertNewTextPosInChain( 
                            _tdpTextDummy.Cch(),
                            _tdpTextDummy.Sid(),
                            &_tdpTextDummy );
            if( !ptpTextNew )
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }

            Assert( _tdpTextDummy.Next() == ptpTextNew );

            if( _ptpChainCurr == &_tdpTextDummy )
                _ptpChainCurr = ptpTextNew;
        }

        fResetChain = TRUE;
    }

    // Add chain to the tree
    if( _ptpChainTail != &_tdpTextDummy )
    {
        CTreePos * ptpChainHead = _tdpTextDummy.Next();

        Assert( ptpChainHead );

        ptpChainHead->SetFirstChild( NULL );

        hr = THR( _pMarkup->InsertPosChain( ptpChainHead, _ptpChainTail, _ptpAfterFrontier ) );
        if (hr)
            goto Cleanup;

        fResetChain = TRUE;
    }

    if( fResetChain )
    {
        // update the frontier
        if( _ptpChainCurr != &_tdpTextDummy )
            _ptpAfterFrontier = _ptpChainCurr->NextTreePos();
#if DBG == 1
        // The current pos on the chain should only be the
        // dummy text pos when the chain is empty
        else
            Assert( ! _tdpTextDummy.Next() );
#endif

        // reset the chain
        _tdpTextDummy.SetNext( NULL );
        _tdpTextDummy.DataThis()->t._cch = 0;
        _tdpTextDummy.DataThis()->t._sid = _ptpChainCurr->IsText() ? _ptpChainCurr->Sid() : sidAsciiLatin;
        _ptpChainCurr = &_tdpTextDummy;
        _ptpChainTail = &_tdpTextDummy;

        MtAdd(Mt(ParseNailDownChain), 1, 0);
    }

    // insert any WCH_NODE characters
    if( _cchNodeBefore || _cchNodeAfter )
    {
        ULONG cpInsert = _cpChainCurr - _cchNodeBefore;
        ULONG cchInsert = _cchNodeBefore + _cchNodeAfter;

        Verify(
            ULONG(
                CTxtPtr( _pMarkup, cpInsert ).
                    InsertRepeatingChar( cchInsert, WCH_NODE ) ) == cchInsert );

        _cchNodeBefore = 0;
        _cchNodeAfter = 0;
    }

Cleanup:
    RRETURN( hr );
}

void 
CHtmRootParseCtx::FlushTextNotification()
{
    // Step 1: nail down the chain
    IGNORE_HR( NailDownChain() );

    // Step 2: up the documents content version
    _pMarkup->UpdateMarkupTreeVersion();

    // Step 3: send the pending text notification
    if (_fTextPendingValid)
    {
        // If we've made this notification 0 length, don't do anything with it!
        if( _nfTextPending.Cch(LONG_MAX) )
        {
            WHEN_DBG(_nfTextPending.ResetSN());

            TraceTagEx((tagRootParseCtx, TAG_NONAME,
               "RootParse      : Notification sent (%d, %S) Node(N%d.%S) cp(%d) cch(%d)",
               _nfTextPending.SerialNumber(),
               _nfTextPending.Name(),
               _nfTextPending.Node()->SN(),
               _nfTextPending.Node()->Element()->TagName(),
               _nfTextPending.Cp(0),
               _nfTextPending.Cch(LONG_MAX)));

            _nfTextPending.SetFlag(NFLAGS_PARSER_TEXTCHANGE);

            _pMarkup->Notify( _nfTextPending );

            MtAdd(Mt(ParseTextNotifications), 1, 0);
        }

        _fTextPendingValid = FALSE;
    }

    _pNodeForNotify = NULL;
}

HRESULT
CHtmRootParseCtx::FlushNotifications()
{
    HRESULT hr;
    long lVer;

    hr = S_OK;

    // Step 1: send the pending text notification

    FlushTextNotification();

    lVer = _pMarkup->GetMarkupTreeVersion();

#if DBG == 1
    _pMarkup->DbgLockTree(TRUE);
#endif


    // Step 2: send any pending ElementEnter and ElementAdded notifications

    if (_nElementsAdded)
    {
        CTreePos * ptpCurr = _ptpElementAdded;

        Assert( ptpCurr );

        {
            CNotification nf;

            nf.ElementsAdded( _ptpElementAdded->SourceIndex(), _nElementsAdded );

            TraceTagEx((tagRootParseCtx, TAG_NONAME,
               "RootParse      : Notification sent (%d, %S) si(%d) cElements(%d)",
               nf.SerialNumber(),
               nf.Name(),
               nf.SI(),
               nf.CElements()));

            _pMarkup->Notify( nf );

            // 49396: duck out if markup has been modified to avoid crash (dbau).
            if (lVer != _pMarkup->GetMarkupTreeVersion())
            {
                hr = E_ABORT;
                goto Cleanup;
            }

            MtAdd(Mt(ParseElementNotifications), 1, 0);
        }

        while (_nElementsAdded)
        {
            // We assert ptpCurr!= NULL, but we have an IEWatson crash where it is.  Leaving the asserts
            // for debugging, but adding a check to protect the crash:
            if( !ptpCurr )
            {
                hr = E_ABORT;
                goto Cleanup;
            }

            if( ptpCurr->IsBeginElementScope() )
            {
                CNotification   nf;
                CElement *      pElement = ptpCurr->Branch()->Element();

                nf.ElementEntertree( pElement );
                nf.SetData( ENTERTREE_PARSE );

                TraceTagEx((tagRootParseCtx, TAG_NONAME,
                   "RootParse      : Notification sent (%d, %S) Element(E%d.%S)",
                   nf.SerialNumber(),
                   nf.Name(),
                   pElement->SN(),
                   pElement->TagName()));

                pElement->Notify( &nf );


                // 49396: duck out if markup has been modified to avoid crash (dbau).
                if (lVer != _pMarkup->GetMarkupTreeVersion())
                {
                    hr = E_ABORT;
                    goto Cleanup;
                }

                _nElementsAdded--;
            }

            ptpCurr = ptpCurr->NextTreePos();

            Assert( ptpCurr );
        }

        _ptpElementAdded = NULL;
    }

Cleanup:

#if DBG == 1
    _pMarkup->DbgLockTree(FALSE);
#endif

    RRETURN(hr);
}

void 
CHtmRootParseCtx::InsertTreePosInChain( 
    CTreePos *ptpBeforeOnChain,
    CTreePos *ptpNew)
{
    CTreePos *  ptpAfterCurr = ptpBeforeOnChain->Next();

    ptpNew->SetFirstChild( ptpBeforeOnChain );
    ptpNew->SetNext( ptpAfterCurr );
    ptpNew->SetFlag( CTreePos::TPF_LEFT_CHILD | CTreePos::TPF_LAST_CHILD );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
    ptpNew->SetLeftThread( ptpBeforeOnChain );
    ptpNew->SetRightThread( ptpAfterCurr );
#endif

    ptpBeforeOnChain->SetNext( ptpNew );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
    ptpBeforeOnChain->SetRightThread( ptpNew );
#endif
    Assert( ptpBeforeOnChain->IsLeftChild() );
    Assert( ptpBeforeOnChain->IsLastChild() );

    if( ptpAfterCurr )
    {
        ptpAfterCurr->SetFirstChild( ptpNew );
#if defined(MAINTAIN_SPLAYTREE_THREADS)
        ptpAfterCurr->SetLeftThread( ptpNew );
#endif
        Assert( ptpAfterCurr->IsLeftChild() );
        Assert( ptpAfterCurr->IsLastChild() );
    }
    else
        _ptpChainTail = ptpNew;

}

CTreePos *
CHtmRootParseCtx::InsertNewTextPosInChain( 
    LONG cch, 
    SCRIPT_ID sid,
    CTreePos *ptpBeforeOnChain)
{
    CTreePos *  ptpTextNew;

    Assert( cch != 0 );
    ptpTextNew = _pMarkup->NewTextPos(cch, sid);
    if (!ptpTextNew)
        goto Cleanup;

    InsertTreePosInChain(ptpBeforeOnChain, ptpTextNew);

Cleanup:
    return ptpTextNew;
}

#if DBG==1
CTreePos *
#else
void
#endif
CHtmRootParseCtx::AdvanceFrontier()
{
    WHEN_DBG( CTreePos * ptpContent );

    while( _ptpAfterFrontier->IsPointer() )
        _ptpAfterFrontier = _ptpAfterFrontier->NextTreePos();

    WHEN_DBG( ptpContent = _ptpAfterFrontier );
    _ptpAfterFrontier = _ptpAfterFrontier->NextTreePos();

    if( _ptpAfterFrontier->IsPointer() )
    {
        CTreePosGap tpg( _ptpAfterFrontier, TPG_LEFT );

        tpg.PartitionPointers( _pMarkup, FALSE );

        _ptpAfterFrontier = tpg.AdjacentTreePos( TPG_RIGHT );
    }

    WHEN_DBG( return ptpContent );
}

HRESULT    
CHtmRootParseCtx::LazyPrepare( CTreeNode * pNodeUnder )
{
    HRESULT hr;
    CTreePos * ptpBeforeFrontier;

    Assert( _fLazyPrepareNeeded );

    hr = _pMarkup->EmbedPointers();
    if (hr)
        goto Cleanup;

    // Set up the real frontier
    _ptpAfterFrontier = pNodeUnder->GetEndPos();

    // Set up the script ID for the accumulation TextPos
    ptpBeforeFrontier = _ptpAfterFrontier->PreviousTreePos();
    Assert( _ptpChainCurr == &_tdpTextDummy ); 
    Assert( _ptpChainTail == &_tdpTextDummy );
    if( ptpBeforeFrontier->IsText() )
    {
        _sidLast = ptpBeforeFrontier->Sid();
    }
    else
    {
        _sidLast = sidAsciiLatin;

    }

    if( ptpBeforeFrontier->IsPointer() )
    {
        CTreePosGap tpg( _ptpAfterFrontier, TPG_LEFT );

        tpg.PartitionPointers( _pMarkup, FALSE );
        
        _ptpAfterFrontier = tpg.AdjacentTreePos( TPG_RIGHT );
    }

    _ptpChainCurr->DataThis()->t._sid = _sidLast;

    // Set up the frontier inside of the chain
    _pNodeChainCurr = pNodeUnder;
    _cpChainCurr = _ptpAfterFrontier->GetCp();

    // Assert a bunch of stuff
    Assert( _cchNodeBefore == 0 );
    Assert( _cchNodeAfter == 0 );
    Assert( _pNodeForNotify == NULL );
    Assert( _nElementsAdded == 0 );
    Assert( _ptpElementAdded == NULL );
    Assert( !_fTextPendingValid );

    _fLazyPrepareNeeded = FALSE;

Cleanup:
    RRETURN( hr );
}

#if DBG == 1
void 
CHtmRootParseCtx::Validate( CTreeNode * pNodeUnder)
{
    Assert( ! _pMarkup->HasUnembeddedPointers() );
    
    // Make sure that we are just under the end of pNodeUnder
    if( _ptpChainCurr->Next() )
        Assert( _ptpChainCurr->Next() == pNodeUnder->GetEndPos() );
    else
    {
        CTreePos * ptpVerify = _ptpAfterFrontier;

        while( ptpVerify->IsPointer() )
            ptpVerify = ptpVerify->NextTreePos();

        Assert( ptpVerify == pNodeUnder->GetEndPos() );
    }

    // Make sure that the element we are going to send a notfication to
    // above the current insertion point
    if( _fTextPendingValid )
    {
        Assert( pNodeUnder->SearchBranchToRootForScope( _nfTextPending.Node()->Element() ) );
    }

    Assert( pNodeUnder == _pNodeChainCurr );
}
#endif


//+------------------------------------------------------------------------
//
//  CHtmTopParseCtx
//
//  The top parse context.
//
//  The top parse context is responsible for:
//
//  Throwing out text (and asserting on nonspace)
//
//  Recognizing that an input type=hidden at the beginning of the document
//  is not textlike
//
//-------------------------------------------------------------------------

class CHtmTopParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;
    
    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmTopParseCtx))
    
    CHtmTopParseCtx(CHtmParseCtx *phpxParent);
    
    virtual BOOL QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht);

#if DBG==1
    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii) 
        { Assert(IsAllSpaces(pch, cch)); return S_OK; }
#endif
};

HRESULT
CreateHtmTopParseCtx(CHtmParseCtx **pphpx, CHtmParseCtx *phpxParent)
{
    CHtmParseCtx *phpx;

    phpx = new CHtmTopParseCtx(phpxParent);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;

    return S_OK;
}

const ELEMENT_TAG
s_atagTopReject[] =
{
    ETAG_NULL
};

const ELEMENT_TAG s_atagTopIgnoreEnd[] = {ETAG_HTML, ETAG_HEAD, ETAG_BODY, ETAG_NULL};

CHtmTopParseCtx::CHtmTopParseCtx(CHtmParseCtx *phpxParent)
    : CHtmParseCtx(phpxParent)
{
    _atagReject    = s_atagTopReject;
    _atagIgnoreEnd = s_atagTopIgnoreEnd;
}


BOOL
CHtmTopParseCtx::QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht)
{
    Assert(!pht || pht->Is(etag));
        
    // For Netscape comptibility:
    // An INPUT in the HEAD is not textlike if the input is type=hidden.
    // Also, For IE4 compat during paste, if the head was not explicit, then all
    // inputs, including hidden are text like.
    // Also, forms tags must force a body in the paste scenario

    switch ( etag )
    {
        case ETAG_MAP :
        case ETAG_GENERIC :
        case ETAG_GENERIC_LITERAL :
        case ETAG_GENERIC_BUILTIN :
        case ETAG_BASEFONT :
        case ETAG_AREA :
        case ETAG_FORM :
        
            // Some tags should be text-like when parsing (pasting, usually)
            
            if (pMarkup->_fMarkupServicesParsing)
                return TRUE;
            else
                return FALSE;
                
        case ETAG_INPUT:
        
            // If not parsing from markup services (pasting, usually) then the hidden input
            // is not text-like (it can begin before the body.

            if (pMarkup->_fMarkupServicesParsing)
                return TRUE;
                
            {
                TCHAR * pchType;

                if (pht->ValFromName(_T("TYPE"), &pchType) && !StrCmpIC(pchType, _T("HIDDEN")))
                    return FALSE;
            }

        case ETAG_OBJECT:
        case ETAG_APPLET:
        
            // Objects and applets that appear bare at the top (not in head) are textlike

            return TRUE;

        case ETAG_A:
        default:
        
            return FALSE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\imgwmf.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgwmf.cxx
//
//  Contents:   Image filter for .wmf files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

MtDefine(CImgTaskWmf, Dwn, "CImgTaskWmf")
MtDefine(CImgTaskWmfBuf, CImgTaskWmf, "CImgTaskWmf Decode Buffer")

/* placeable metafile header */
#include "pshpack1.h"

#ifdef UNIX
inline WORD READWINTELWORD(BYTE* b)
{
    return ((*b) | ((WORD)*(b+1) << 8));
}

inline DWORD READWINTELDWORD(BYTE* p)
{
    return (READWINTELWORD(p+2) << 16 | READWINTELWORD(p));
}
#endif

typedef struct tagSRECT {
    short    left;
    short    top;
    short    right;
    short    bottom;
} SRECT;

typedef struct {
        DWORD   key;
        WORD    hmf;
        SRECT   bbox;
        WORD    inch;
        DWORD   reserved;
        WORD    checksum;
}ALDUSMFHEADER;
#include "poppack.h"

class CImgTaskWmf : public CImgTask
{

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskWmf))

    typedef CImgTask super;

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // CImgTaskWmf methods

    void ReadImage();

};

#ifdef UNIX
#define SIZEOF_METAHEADER (5*sizeof(WORD) + 2*sizeof(DWORD))
#endif

void CImgTaskWmf::ReadImage()
{
    METAHEADER mh;
    LPBYTE pbBuf = NULL;
    CImgBitsDIB *pibd = NULL;
    HDC hdcDst = NULL;
    HMETAFILE hmf = NULL;
    HBITMAP hbmSav = NULL;
    ULONG ulSize;
    HRESULT hr;
    RGBQUAD argb[256];

    // Get the metafile header so we know how big it is
#ifndef UNIX
    if (!Read((unsigned char *)&mh, sizeof(mh)))
        return;
#else
    METAHEADER mhTmp;
    if (!Read((unsigned char *)&mhTmp, SIZEOF_METAHEADER))
        return;

    BYTE * p = (BYTE*)&mhTmp;

    mh.mtType = READWINTELWORD(p );
    mh.mtHeaderSize = READWINTELWORD(p += sizeof(WORD));
    mh.mtVersion = READWINTELWORD( p += sizeof(WORD));
    mh.mtSize = READWINTELDWORD(p += sizeof(WORD));
    mh.mtNoObjects = READWINTELWORD( p += sizeof(DWORD));
    mh.mtMaxRecord = READWINTELDWORD(p += sizeof(WORD));
    mh.mtNoParameters = READWINTELWORD( p += sizeof(DWORD)); 
#endif

    // allocate a buffer to hold it
    ulSize = mh.mtSize * sizeof(WORD);

    //The header contains a size field for the entire file.  
    //If this size is less than the header length (which we've just
    //successfully read in), then the field is clearly bogus.
    //Catch this now.
#ifndef UNIX
    if (ulSize < sizeof(METAHEADER))
        return;
#else
    if (ulSize < SIZEOF_METAHEADER)
        return;
#endif

    pbBuf = (LPBYTE)MemAlloc(Mt(CImgTaskWmfBuf), ulSize);
    if (!pbBuf)
        return;

    // copy the header into the front of the buffer
#ifdef UNIX // Needs to use raw data
    memcpy(pbBuf, &mhTmp, SIZEOF_METAHEADER);
#else
    memcpy(pbBuf, &mh, sizeof(METAHEADER));
#endif
    
    // read the metafile into memory after the header
#ifndef UNIX
    if (!Read(pbBuf + sizeof(METAHEADER), 
            ulSize - sizeof(METAHEADER)))
#else
    if (!Read(pbBuf + SIZEOF_METAHEADER, 
            ulSize - SIZEOF_METAHEADER))
#endif
        goto Cleanup;

    // convert the buffer into a metafile handle
    hmf = SetMetaFileBitsEx(ulSize, pbBuf);
    if (!hmf)
        goto Cleanup;

    // Free the metafile buffer
    MemFree(pbBuf);
    pbBuf = NULL;

    // Use the halftone palette for the color table
    CopyColorsFromPaletteEntries(argb, g_lpHalftone.ape, 256);
    memcpy(_ape, g_lpHalftone.ape, sizeof(PALETTEENTRY) * 256);

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    hr = pibd->AllocDIBSection(8, _xWid, _yHei, argb, 256, 255);
    if (hr)
        goto Cleanup;

    _lTrans = 255;

    TraceTag((tagImgTrans, "CImgTaskWmf %x  _lTrans = %d", this, _lTrans));

    Assert(pibd->GetBits() && pibd->GetHbm());

    memset(pibd->GetBits(), (BYTE)_lTrans, pibd->CbLine() * _yHei);

    // Render the metafile into the bitmap
    
    hdcDst = GetMemoryDC();
    if (!hdcDst)
        goto Cleanup;

    hbmSav = (HBITMAP)SelectObject(hdcDst, pibd->GetHbm());

    SaveDC(hdcDst);

    SetMapMode(hdcDst, MM_ANISOTROPIC);
    SetViewportExtEx(hdcDst, _xWid, _yHei, (SIZE *)NULL);
    PlayMetaFile(hdcDst, hmf);

    RestoreDC(hdcDst, -1);

    _pImgBits = pibd;
    pibd = NULL;
        
    _ySrcBot = -1;

Cleanup:
    if (hbmSav)
        SelectObject(hdcDst, hbmSav);
    if (hdcDst)
        ReleaseMemoryDC(hdcDst);
    if (pibd)
        delete pibd;
    if (hmf)
        DeleteMetaFile(hmf);
    if (pbBuf)
        MemFree(pbBuf);
        
    return;
}

void CImgTaskWmf::Decode(BOOL *pfNonProgressive)
{
    ALDUSMFHEADER amfh;

    *pfNonProgressive = TRUE;

    // KENSY: What do I do about the color table?
    // KENSY: scale according to DPI of screen
#ifndef UNIX
    if (!Read((unsigned char *)&amfh, sizeof(amfh)))
        goto Cleanup;
#else
    {
    ALDUSMFHEADER amfhTmp;
    
    if (!Read((unsigned char *)&amfhTmp, 3*sizeof(WORD)+2*sizeof(DWORD)+sizeof(SRECT)))
        goto Cleanup;

    BYTE *p = (BYTE*)&amfhTmp;

    amfh.key =            READWINTELDWORD(p);
    amfh.hmf =            READWINTELWORD(p += sizeof(DWORD));
    amfh.bbox.left =   READWINTELWORD(p += sizeof(WORD));
    amfh.bbox.top =    READWINTELWORD( p += sizeof(WORD));
    amfh.bbox.right =  READWINTELWORD( p += sizeof(WORD));
    amfh.bbox.bottom = READWINTELWORD( p += sizeof(WORD));
    amfh.inch =           READWINTELWORD( p += sizeof(WORD));
    amfh.reserved =    READWINTELDWORD( p += sizeof(WORD));
    amfh.checksum =    READWINTELWORD( p += sizeof(DWORD));
    }
#endif

    _xWid = abs(MulDiv(amfh.bbox.right - amfh.bbox.left, 96, amfh.inch));
    _yHei = abs(MulDiv(amfh.bbox.bottom - amfh.bbox.top, 96, amfh.inch));
    
    // Post WHKNOWN
    OnSize(_xWid, _yHei, -1);

    ReadImage();

Cleanup:
    return;
}

CImgTask * NewImgTaskWmf()
{
    return(new CImgTaskWmf);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jcomapi.c ===
/*
 * jcomapi.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface routines that are used for both
 * compression and decompression.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/*
 * Abort processing of a JPEG compression or decompression operation,
 * but don't destroy the object itself.
 *
 * For this, we merely clean up all the nonpermanent memory pools.
 * Note that temp files (virtual arrays) are not allowed to belong to
 * the permanent pool, so we will be able to close all temp files here.
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
  }

  /* Reset overall state for possible reuse of object */
  cinfo->global_state = (cinfo->is_decompressor ? DSTATE_START : CSTATE_START);
}


/*
 * Destruction of a JPEG object.
 *
 * Everything gets deallocated except the master jpeg_compress_struct itself
 * and the error manager struct.  Both of these are supplied by the application
 * and must be freed, if necessary, by the application.  (Often they are on
 * the stack and so don't need to be freed anyway.)
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
    (*cinfo->mem->self_destruct) (cinfo);
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
  cinfo->global_state = 0;	/* mark it destroyed */
}


/*
 * Convenience routines for allocating quantization and Huffman tables.
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jconfig.h ===
/*
 * jconfig.doc
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file documents the configuration options that are required to
 * customize the JPEG software for a particular system.
 *
 * The actual configuration options for a particular installation are stored
 * in jconfig.h.  On many machines, jconfig.h can be generated automatically
 * or copied from one of the "canned" jconfig files that we supply.  But if
 * you need to generate a jconfig.h file by hand, this file tells you how.
 *
 * DO NOT EDIT THIS FILE --- IT WON'T ACCOMPLISH ANYTHING.
 * EDIT A COPY NAMED JCONFIG.H.
 */


/*
 * These symbols indicate the properties of your machine or compiler.
 * #define the symbol if yes, #undef it if no.
 */
#define HAVE_BOOLEAN
typedef unsigned char boolean;

/* Does your compiler support function prototypes?
 * (If not, you also need to use ansi2knr, see install.doc)
 */
#define HAVE_PROTOTYPES

/* Does your compiler support the declaration "unsigned char" ?
 * How about "unsigned short" ?
 */
#define HAVE_UNSIGNED_CHAR
#define HAVE_UNSIGNED_SHORT

/* Define "void" as "char" if your compiler doesn't know about type void.
 * NOTE: be sure to define void such that "void *" represents the most general
 * pointer type, e.g., that returned by malloc().
 */
/* #define void char */

/* Define "const" as empty if your compiler doesn't know the "const" keyword.
 */
/* #define const */

/* Define this if an ordinary "char" type is unsigned.
 * If you're not sure, leaving it undefined will work at some cost in speed.
 * If you defined HAVE_UNSIGNED_CHAR then the speed difference is minimal.
 */
#undef CHAR_IS_UNSIGNED

/* Define this if your system has an ANSI-conforming <stddef.h> file.
 */
#define HAVE_STDDEF_H

/* Define this if your system has an ANSI-conforming <stdlib.h> file.
 */
#define HAVE_STDLIB_H

/* Define this if your system does not have an ANSI/SysV <string.h>,
 * but does have a BSD-style <strings.h>.
 */
#undef NEED_BSD_STRINGS

/* Define this if your system does not provide typedef size_t in any of the
 * ANSI-standard places (stddef.h, stdlib.h, or stdio.h), but places it in
 * <sys/types.h> instead.
 */
#undef NEED_SYS_TYPES_H

/* For 80x86 machines, you need to define NEED_FAR_POINTERS,
 * unless you are using a large-data memory model or 80386 flat-memory mode.
 * On less brain-damaged CPUs this symbol must not be defined.
 * (Defining this symbol causes large data structures to be referenced through
 * "far" pointers and to be allocated with a special version of malloc.)
 */
#undef NEED_FAR_POINTERS
#undef FAR
#define FAR

/* Define this if your linker needs global names to be unique in less
 * than the first 15 characters.
 */
#undef NEED_SHORT_EXTERNAL_NAMES

/* Although a real ANSI C compiler can deal perfectly well with pointers to
 * unspecified structures (see "incomplete types" in the spec), a few pre-ANSI
 * and pseudo-ANSI compilers get confused.  To keep one of these bozos happy,
 * define INCOMPLETE_TYPES_BROKEN.  This is not recommended unless you
 * actually get "missing structure definition" warnings or errors while
 * compiling the JPEG code.
 */
#undef INCOMPLETE_TYPES_BROKEN

/*
 * The following options affect code selection within the JPEG library,
 * but they don't need to be visible to applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS has been defined.
 */
#ifdef JPEG_INTERNALS

/* Define this if your compiler implements ">>" on signed values as a logical
 * (unsigned) shift; leave it undefined if ">>" is a signed (arithmetic) shift,
 * which is the normal and rational definition.
 */
#undef RIGHT_SHIFT_IS_UNSIGNED

/* Because sizeof(double) = 10 on 68K Mac						*/
/* see ALIGN_TYPE definitiion in jmemmgr.c for details.			*/
#if defined(MAC) && !defined(POWERPC)
#define ALIGN_TYPE long
#endif /* defined(MAC) && !defined(POWERPC) */

#endif /* JPEG_INTERNALS */

/*
 * The remaining options do not affect the JPEG library proper,
 * but only the sample applications cjpeg/djpeg (see cjpeg.c, djpeg.c).
 * Other applications can ignore these.
 */
#ifdef JPEG_CJPEG_DJPEG

/* These defines indicate which image (non-JPEG) file formats are allowed. */

#define BMP_SUPPORTED		/* BMP image file format */
#define GIF_SUPPORTED		/* GIF image file format */
#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
#undef RLE_SUPPORTED		/* Utah RLE image file format */
#define TARGA_SUPPORTED		/* Targa image file format */

/* Define this if you want to name both input and output files on the command
 * line, rather than using stdout and optionally stdin.  You MUST do this if
 * your system can't cope with binary I/O to stdin/stdout.  See comments at
 * head of cjpeg.c or djpeg.c.
 */
#undef TWO_FILE_COMMANDLINE

/* Define this if your system needs explicit cleanup of temporary files.
 * This is crucial under MS-DOS, where the temporary "files" may be areas
 * of extended memory; on most other systems it's not as important.
 */
#undef NEED_SIGNAL_CATCHER

/* By default, we open image files with fopen(...,"rb") or fopen(...,"wb").
 * This is necessary on systems that distinguish text files from binary files,
 * and is harmless on most systems that don't.  If you have one of the rare
 * systems that complains about the "b" spec, define this symbol.
 */
#undef DONT_USE_B_MODE

/* Define this if you want percent-done progress reports from cjpeg/djpeg.
 */
#undef PROGRESS_REPORT

#endif /* JPEG_CJPEG_DJPEG */

#define SHORTxSHORT_32
#define INLINE  __inline

#define USE_SETMODE		    /* Microsoft has setmode() */
#define _NTSDK              /* Non-ANSI names for compatibility */
#define J_SIZEOF(x) SIZEOF(x)
#define NO_GETENV
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdapimin.c ===
/*
 * jdapimin.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the decompression half
 * of the JPEG library.  These are the "minimum" API routines that may be
 * needed in either the normal full-decompression case or the
 * transcoding-only case.
 *
 * Most of the routines intended to be called directly by an application
 * are in this file or in jdapistd.c.  But also see jcomapi.c for routines
 * shared by compression and decompression, and jdtrans.c for the transcoding
 * case.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/*
 * Initialization of a JPEG decompression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
  if (version != JPEG_LIB_VERSION)
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);

  /* For debugging purposes, zero the whole master structure.
   * But error manager pointer is already there, so save and restore it.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
    cinfo->err = err;
  }
  cinfo->is_decompressor = TRUE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->src = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
    cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  jinit_marker_reader(cinfo);

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);

  /* Check for MMX machine if necessary */
  if (vfMMXMachine == 2)
      vfMMXMachine = !!IsMMX();
      
  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
}


/*
 * Destruction of a JPEG decompression object
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Abort processing of a JPEG decompression operation,
 * but don't destroy the object itself.
 */

GLOBAL(void)
jpeg_abort_decompress (j_decompress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Install a special processing method for COM or APPn markers.
 */

GLOBAL(void)
jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
			   jpeg_marker_parser_method routine)
{
  if (marker_code == JPEG_COM)
    cinfo->marker->process_COM = routine;
  else if (marker_code >= JPEG_APP0 && marker_code <= JPEG_APP0+15)
    cinfo->marker->process_APPn[marker_code-JPEG_APP0] = routine;
  else
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
}


/*
 * Set default decompression parameters.
 */

LOCAL(void)
default_decompress_parms (j_decompress_ptr cinfo)
{
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
    cinfo->out_color_space = JCS_GRAYSCALE;
    break;
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
    } else if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
	break;
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
	break;
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
      int cid1 = cinfo->comp_info[1].component_id;
      int cid2 = cinfo->comp_info[2].component_id;

      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
      }
    }
    /* Always guess RGB is proper output colorspace. */
    cinfo->out_color_space = JCS_RGB;
    break;
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
	break;
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
	break;
      }
    } else {
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
    }
    cinfo->out_color_space = JCS_CMYK;
    break;
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
    cinfo->out_color_space = JCS_UNKNOWN;
    break;
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = 1;		/* 1:1 scaling */
  cinfo->scale_denom = 1;
  cinfo->output_gamma = 1.0;
  cinfo->buffered_image = FALSE;
  cinfo->raw_data_out = FALSE;
  cinfo->dct_method = JDCT_DEFAULT;
  cinfo->do_fancy_upsampling = TRUE;
  cinfo->do_block_smoothing = TRUE;
  cinfo->quantize_colors = FALSE;
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
  cinfo->colormap = NULL;
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
  cinfo->enable_external_quant = FALSE;
  cinfo->enable_2pass_quant = FALSE;
}


/*
 * Decompression startup: read start of JPEG datastream to see what's there.
 * Need only initialize JPEG object and supply a data source before calling.
 *
 * This routine will read as far as the first SOS marker (ie, actual start of
 * compressed data), and will save all tables and parameters in the JPEG
 * object.  It will also initialize the decompression parameters to default
 * values, and finally return JPEG_HEADER_OK.  On return, the application may
 * adjust the decompression parameters and then call jpeg_start_decompress.
 * (Or, if the application only wanted to determine the image parameters,
 * the data need not be decompressed.  In that case, call jpeg_abort or
 * jpeg_destroy to release any temporary space.)
 * If an abbreviated (tables only) datastream is presented, the routine will
 * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
 * re-use the JPEG object to read the abbreviated image datastream(s).
 * It is unnecessary (but OK) to call jpeg_abort in this case.
 * The JPEG_SUSPENDED return code only occurs if the data source module
 * requests suspension of the decompressor.  In this case the application
 * should load more source data and then re-call jpeg_read_header to resume
 * processing.
 * If a non-suspending data source is used and require_image is TRUE, then the
 * return code need not be inspected since only JPEG_HEADER_OK is possible.
 *
 * This routine is now just a front end to jpeg_consume_input, with some
 * extra error checking.
 */

GLOBAL(int)
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
      cinfo->global_state != DSTATE_INHEADER)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  retcode = jpeg_consume_input(cinfo);

  switch (retcode) {
  case JPEG_REACHED_SOS:
    retcode = JPEG_HEADER_OK;
    break;
  case JPEG_REACHED_EOI:
    if (require_image)		/* Complain if application wanted an image */
      ERREXIT(cinfo, JERR_NO_IMAGE);
    /* Reset to start state; it would be safer to require the application to
     * call jpeg_abort, but we can't change it now for compatibility reasons.
     * A side effect is to free any temporary memory (there shouldn't be any).
     */
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
    retcode = JPEG_HEADER_TABLES_ONLY;
    break;
  case JPEG_SUSPENDED:
    /* no work */
    break;
  }

  return retcode;
}


/*
 * Consume data in advance of what the decompressor requires.
 * This can be called at any time once the decompressor object has
 * been created and a data source has been set up.
 *
 * This routine is essentially a state machine that handles a couple
 * of critical state-transition actions, namely initial setup and
 * transition from header scanning to ready-for-start_decompress.
 * All the actual input is done via the input controller's consume_input
 * method.
 */

GLOBAL(int)
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
    cinfo->global_state = DSTATE_INHEADER;
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
    }
    break;
  case DSTATE_READY:
    /* Can't advance past first SOS until start_decompress is called */
    retcode = JPEG_REACHED_SOS;
    break;
  case DSTATE_PRELOAD:
  case DSTATE_PRESCAN:
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}


/*
 * Have we finished reading the input file?
 */

GLOBAL(boolean)
jpeg_input_complete (j_decompress_ptr cinfo)
{
  /* Check for valid jpeg object */
  if (cinfo->global_state < DSTATE_START ||
      cinfo->global_state > DSTATE_STOPPING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->eoi_reached;
}


/*
 * Is there more than one scan?
 */

GLOBAL(boolean)
jpeg_has_multiple_scans (j_decompress_ptr cinfo)
{
  /* Only valid after jpeg_read_header completes */
  if (cinfo->global_state < DSTATE_READY ||
      cinfo->global_state > DSTATE_STOPPING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->has_multiple_scans;
}


/*
 * Finish JPEG decompression.
 *
 * This will normally just verify the file trailer and release temp storage.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
    (*cinfo->master->finish_output_pass) (cinfo);
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
  return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdapistd.c ===
/*
 * jdapistd.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the decompression half
 * of the JPEG library.  These are the "standard" API routines that are
 * used in the normal full-decompression case.  They are not used by a
 * transcoding-only application.  Note that if an application links in
 * jpeg_start_decompress, it will end up linking in the entire decompressor.
 * We thus must separate this file from jdapimin.c to avoid linking the
 * whole decompression library into a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Forward declarations */
LOCAL(boolean) output_pass_setup JPP((j_decompress_ptr cinfo));


/*
 * Decompression initialization.
 * jpeg_read_header must be completed before calling this.
 *
 * If a multipass operating mode was selected, this will do all but the
 * last pass, and thus may take a great deal of time.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
    if (cinfo->buffered_image) {
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
      return TRUE;
    }
    cinfo->global_state = DSTATE_PRELOAD;
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
    /* If file has multiple scans, absorb them all into the coef buffer */
    if (cinfo->inputctl->has_multiple_scans) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
      for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
	if (retcode == JPEG_SUSPENDED)
	  return FALSE;
	if (retcode == JPEG_REACHED_EOI)
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
	  }
	}
      }
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
    }
    cinfo->output_scan_number = cinfo->input_scan_number;
  } else if (cinfo->global_state != DSTATE_PRESCAN)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
}


/*
 * Set up for an output pass, and perform any dummy pass(es) needed.
 * Common subroutine for jpeg_start_decompress and jpeg_start_output.
 * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
 * Exit: If done, returns TRUE and sets global_state for proper output mode.
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
    cinfo->output_scanline = 0;
    cinfo->global_state = DSTATE_PRESCAN;
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
    /* Crank through the dummy pass */
    while (cinfo->output_scanline < cinfo->output_height) {
      JDIMENSION last_scanline;
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
				    &cinfo->output_scanline, (JDIMENSION) 0);
      if (cinfo->output_scanline == last_scanline)
	return FALSE;		/* No progress made, must suspend */
    }
    /* Finish up dummy pass, and set up for another one */
    (*cinfo->master->finish_output_pass) (cinfo);
    (*cinfo->master->prepare_for_output_pass) (cinfo);
    cinfo->output_scanline = 0;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
  return TRUE;
}


/*
 * Read some scanlines of data from the JPEG decompressor.
 *
 * The return value will be the number of lines actually read.
 * This may be less than the number requested in several cases,
 * including bottom of image, data source suspension, and operating
 * modes that emit multiple scanlines at a time.
 *
 * Note: we warn about excess calls to jpeg_read_scanlines() since
 * this likely signals an application programmer error.  However,
 * an oversize buffer (max_lines > scanlines remaining) is not an error.
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}


/*
 * Alternate entry point to read raw data.
 * Processes exactly one iMCU row per call, unless suspended.
 */

GLOBAL(JDIMENSION)
jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
		    JDIMENSION max_lines)
{
  JDIMENSION lines_per_iMCU_row;

  if (cinfo->global_state != DSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Verify that at least one iMCU row can be returned. */
  lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size;
  if (max_lines < lines_per_iMCU_row)
    ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Decompress directly into user's buffer. */
  if (! (*cinfo->coef->decompress_data) (cinfo, data))
    return 0;			/* suspension forced, can do nothing more */

  /* OK, we processed one iMCU row. */
  cinfo->output_scanline += lines_per_iMCU_row;
  return lines_per_iMCU_row;
}


/* Additional entry points for buffered-image mode. */

#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Initialize for an output pass in buffered-image mode.
 */

GLOBAL(boolean)
jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
{
  if (cinfo->global_state != DSTATE_BUFIMAGE &&
      cinfo->global_state != DSTATE_PRESCAN)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Limit scan number to valid range */
  if (scan_number <= 0)
    scan_number = 1;
  if (cinfo->inputctl->eoi_reached &&
      scan_number > cinfo->input_scan_number)
    scan_number = cinfo->input_scan_number;
  cinfo->output_scan_number = scan_number;
  /* Perform any dummy output passes, and set up for the real pass */
  return output_pass_setup(cinfo);
}


/*
 * Finish up after an output pass in buffered-image mode.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_output (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
       cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image) {
    /* Terminate this pass. */
    /* We do not require the whole pass to have been completed. */
    (*cinfo->master->finish_output_pass) (cinfo);
    cinfo->global_state = DSTATE_BUFPOST;
  } else if (cinfo->global_state != DSTATE_BUFPOST) {
    /* BUFPOST = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read markers looking for SOS or EOI */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  cinfo->global_state = DSTATE_BUFIMAGE;
  return TRUE;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdcolor.c ===
/*
 * jdcolor.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains output colorspace conversion routines.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Private subobject */

typedef struct {
  struct jpeg_color_deconverter pub; /* public fields */

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
} my_color_deconverter;

typedef my_color_deconverter * my_cconvert_ptr;


/**************** YCbCr -> RGB conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	R = Y                + 1.40200 * Cr
 *	G = Y - 0.34414 * Cb - 0.71414 * Cr
 *	B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 * Notice that Y, being an integral input, does not contribute any fraction
 * so it need not participate in the rounding.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times Cb and Cr for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
 * values for the G calculation are left scaled up, since we must add them
 * together before rounding.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Convert some rows of samples to the output colorspace.
 *
 * Note that we change from noninterleaved, one-plane-per-component format
 * to interleaved-pixel format.  The output buffer is therefore three times
 * as wide as the input buffer.
 * A starting row offset is provided only for the input buffer.  The caller
 * can easily adjust the passed output_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}


/**************** Cases other than YCbCr -> RGB **************/


/*
 * Color conversion for no colorspace change: just copy the data,
 * converting from separate-planes to interleaved representation.
 */

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
  JDIMENSION num_cols = cinfo->output_width;
  int ci;

  while (--num_rows >= 0) {
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
      outptr = output_buf[0] + ci;
      for (count = num_cols; count > 0; count--) {
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
  }
}


/*
 * Color conversion for grayscale: just copy the data.
 * This also works for YCbCr -> grayscale conversion, in which
 * we just copy the Y (luminance) component and ignore chrominance.
 */

METHODDEF(void)
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
		    num_rows, cinfo->output_width);
}


/*
 * Adobe-style YCCK->CMYK conversion.
 * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume build_ycc_rgb_table has been called.
 */

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  }

  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = ycc_rgb_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_CMYK:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCCK) {
      cconvert->pub.color_convert = ycck_cmyk_convert;
      build_ycc_rgb_table(cinfo);
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
      cinfo->out_color_components = cinfo->num_components;
      cconvert->pub.color_convert = null_convert;
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdcoefct.c ===
/*
 * jdcoefct.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the coefficient buffer controller for decompression.
 * This controller is the top level of the JPEG decompressor proper.
 * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
 *
 * In buffered-image mode, this controller is the interface between
 * input-oriented processing and output-oriented processing.
 * Also, the input side (only) is used when reading a file for transcoding.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"

/* Block smoothing is only applicable for progressive JPEG, so: */
#ifndef D_PROGRESSIVE_SUPPORTED
#undef BLOCK_SMOOTHING_SUPPORTED
#endif

/* Private buffer controller object */

typedef struct {
  struct jpeg_d_coef_controller pub; /* public fields */

  /* These variables keep track of the current location of the input side. */
  /* cinfo->input_iMCU_row is also used for this. */
  JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* The output side's location is represented by cinfo->output_iMCU_row. */

  /* In single-pass modes, it's sufficient to buffer just one MCU.
   * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
   * and let the entropy decoder write into that workspace each time.
   * (On 80x86, the workspace is FAR even though it's not really very big;
   * this is to keep the module interfaces unchanged when a large coefficient
   * buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays; it is used only by the input side.
   */
  JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
#endif

#ifdef BLOCK_SMOOTHING_SUPPORTED
  /* When doing block smoothing, we latch coefficient Al values here */
  int * coef_bits_latch;
#define SAVED_COEFS  6		/* we save coef_bits[0..5] */
#endif
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;

/* Forward declarations */
METHODDEF(int) decompress_onepass
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#ifdef D_MULTISCAN_FILES_SUPPORTED
METHODDEF(int) decompress_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif
#ifdef BLOCK_SMOOTHING_SUPPORTED
LOCAL(boolean) smoothing_ok JPP((j_decompress_ptr cinfo));
METHODDEF(int) decompress_smooth_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif


LOCAL(void)
start_iMCU_row (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
    coef->MCU_rows_per_iMCU_row = 1;
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->MCU_ctr = 0;
  coef->MCU_vert_offset = 0;
}


/*
 * Initialize for an input processing pass.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
  start_iMCU_row(cinfo);
}


/*
 * Initialize for an output processing pass.
 */

METHODDEF(void)
start_output_pass (j_decompress_ptr cinfo)
{
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
      coef->pub.decompress_data = decompress_smooth_data;
    else
      coef->pub.decompress_data = decompress_data;
  }
#endif
  cinfo->output_iMCU_row = 0;
}


/*
 * Decompress and return some data in the single-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Input and output must run in lockstep since we have only a one-MCU buffer.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image.
 * For single pass, this is the same as the components in the scan.
 */

METHODDEF(int)
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, ci, xindex, yindex, yoffset, useful_width;
  JSAMPARRAY output_ptr;
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
	 MCU_col_num++) {
      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
      jzero_far((void FAR *) coef->MCU_buffer[0],
		(size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
      }
      /* Determine where data should go in output_buf and do the IDCT thing.
       * We skip dummy blocks at the right and bottom edges (but blkn gets
       * incremented past them!).  Note the inner loop relies on having
       * allocated the MCU_buffer[] blocks sequentially.
       */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
	  blkn += compptr->MCU_blocks;
	  continue;
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
	output_ptr = output_buf[ci] + yoffset * compptr->DCT_scaled_size;
	start_col = MCU_col_num * compptr->MCU_sample_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
	      yoffset+yindex < compptr->last_row_height) {
	    output_col = start_col;
	    for (xindex = 0; xindex < useful_width; xindex++) {
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
			      output_ptr, output_col);
	      output_col += compptr->DCT_scaled_size;
	    }
	  }
	  blkn += compptr->MCU_width;
	  output_ptr += compptr->DCT_scaled_size;
	}
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
    start_iMCU_row(cinfo);
    return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}


/*
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Consume input data and store it in the full-image coefficient buffer.
 * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
 * ie, v_samp_factor block rows for each component in the scan.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       cinfo->input_iMCU_row * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, TRUE);
    /* Note: entropy decoder expects buffer to be zeroed,
     * but this is handled automatically by the memory manager
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
    start_iMCU_row(cinfo);
    return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}


/*
 * Decompress and return some data in the multi-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num;
  int ci, block_row, block_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
       (JDIMENSION) compptr->v_samp_factor, FALSE);
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row)
      block_rows = compptr->v_samp_factor;
    else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
    output_ptr = output_buf[ci];
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
      buffer_ptr = buffer[block_row];
      output_col = 0;
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
			output_ptr, output_col);
	buffer_ptr++;
	output_col += compptr->DCT_scaled_size;
      }
      output_ptr += compptr->DCT_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


#ifdef BLOCK_SMOOTHING_SUPPORTED

/*
 * This code applies interblock smoothing as described by section K.8
 * of the JPEG standard: the first 5 AC coefficients are estimated from
 * the DC values of a DCT block and its 8 neighboring blocks.
 * We apply smoothing only for progressive JPEG decoding, and only if
 * the coefficients it can estimate are not yet known to full precision.
 */

/* Natural-order array positions of the first 5 zigzag-order coefficients */
#define Q01_POS  1
#define Q10_POS  8
#define Q20_POS  16
#define Q11_POS  9
#define Q02_POS  2

/*
 * Determine whether block smoothing is applicable and safe.
 * We also latch the current states of the coef_bits[] entries for the
 * AC coefficients; otherwise, if the input side of the decompressor
 * advances into a new scan, we might think the coefficients are known
 * more accurately than they really are.
 */

LOCAL(boolean)
smoothing_ok (j_decompress_ptr cinfo)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  boolean smoothing_useful = FALSE;
  int ci, coefi;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
	qtable->quantval[Q01_POS] == 0 ||
	qtable->quantval[Q10_POS] == 0 ||
	qtable->quantval[Q20_POS] == 0 ||
	qtable->quantval[Q11_POS] == 0 ||
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
    if (coef_bits[0] < 0)
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
      coef_bits_latch[coefi] = coef_bits[coefi];
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
    }
    coef_bits_latch += SAVED_COEFS;
  }

  return smoothing_useful;
}


/*
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num, last_block_column;
  int ci, block_row, block_rows, access_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;
  boolean first_row, last_row;
  JBLOCK workspace;
  int *coef_bits;
  JQUANT_TBL *quanttbl;
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
      /* If input is working on current scan, we ordinarily want it to
       * have completed the current row.  But if input scan is DC,
       * we want it to keep one row ahead so that next block row's DC
       * values are up to date.
       */
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
	break;
    }
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
      block_rows = compptr->v_samp_factor;
      access_rows = block_rows * 2; /* this and next iMCU row */
      last_row = FALSE;
    } else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
      access_rows = block_rows; /* this iMCU row only */
      last_row = TRUE;
    }
    /* Align the virtual buffer for this component. */
    if (cinfo->output_iMCU_row > 0) {
      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
      buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
	 (JDIMENSION) access_rows, FALSE);
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
      first_row = FALSE;
    } else {
      buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
      first_row = TRUE;
    }
    /* Fetch component-dependent info */
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
    quanttbl = compptr->quant_table;
    Q00 = quanttbl->quantval[0];
    Q01 = quanttbl->quantval[Q01_POS];
    Q10 = quanttbl->quantval[Q10_POS];
    Q20 = quanttbl->quantval[Q20_POS];
    Q11 = quanttbl->quantval[Q11_POS];
    Q02 = quanttbl->quantval[Q02_POS];
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
    output_ptr = output_buf[ci];
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
      buffer_ptr = buffer[block_row];
      if (first_row && block_row == 0)
	prev_block_row = buffer_ptr;
      else
	prev_block_row = buffer[block_row-1];
      if (last_row && block_row == block_rows-1)
	next_block_row = buffer_ptr;
      else
	next_block_row = buffer[block_row+1];
      /* We fetch the surrounding DC values using a sliding-register approach.
       * Initialize all nine here so as to do the right thing on narrow pics.
       */
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
      output_col = 0;
      last_block_column = compptr->width_in_blocks - 1;
      for (block_num = 0; block_num <= last_block_column; block_num++) {
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
	/* Update DC values */
	if (block_num < last_block_column) {
	  DC3 = (int) prev_block_row[1][0];
	  DC6 = (int) buffer_ptr[1][0];
	  DC9 = (int) next_block_row[1][0];
	}
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
	  num = 36 * Q00 * (DC4 - DC6);
	  if (num >= 0) {
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[1] = (JCOEF) pred;
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
	  num = 36 * Q00 * (DC2 - DC8);
	  if (num >= 0) {
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[8] = (JCOEF) pred;
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[16] = (JCOEF) pred;
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
	  if (num >= 0) {
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[9] = (JCOEF) pred;
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[2] = (JCOEF) pred;
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
	DC4 = DC5; DC5 = DC6;
	DC7 = DC8; DC8 = DC9;
	buffer_ptr++, prev_block_row++, next_block_row++;
	output_col += compptr->DCT_scaled_size;
      }
      output_ptr += compptr->DCT_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
    return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* BLOCK_SMOOTHING_SUPPORTED */


/*
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      access_rows = compptr->v_samp_factor;
#ifdef BLOCK_SMOOTHING_SUPPORTED
      /* If block smoothing could be used, need a bigger window */
      if (cinfo->progressive_mode)
	access_rows *= 3;
#endif
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
    coef->pub.decompress_data = decompress_data;
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    /* We only need a single-MCU buffer. */
    JBLOCKROW buffer;
    int i;

    buffer = (JBLOCKROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdhuff.c ===
/*
 * jdhuff.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdphuff.c */


/*
 * Expanded entropy decoder object for Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
} huff_entropy_decoder;

typedef huff_entropy_decoder * huff_entropy_ptr;


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
   * This ought to be an error condition, but we make it a warning because
   * there are some baseline files out there with all zeroes in these bytes.
   */
  if (cinfo->Ss != 0 || cinfo->Se != DCTSIZE2-1 ||
      cinfo->Ah != 0 || cinfo->Al != 0)
    WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	cinfo->dc_huff_tbl_ptrs[dctbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	cinfo->ac_huff_tbl_ptrs[actbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    /* Compute derived values for Huffman tables */
    /* We may do this more than once for a table, but it's not expensive */
    jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
			    & entropy->dc_derived_tbls[dctbl]);
    jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
			    & entropy->ac_derived_tbls[actbl]);
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Compute the derived values for a Huffman table.
 * Note this is also used by jdphuff.c.
 */

GLOBAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl,
			 d_derived_tbl ** pdtbl)
{
  d_derived_tbl *dtbl;
  int p, i, l, si;
  int lookbits, ctr;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
  dtbl->pub = htbl;		/* fill in back link */
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
  for (l = 1; l <= 16; l++) {
    if (htbl->bits[l]) {
      dtbl->valptr[l] = p; /* huffval[] index of 1st symbol of code length l */
      dtbl->mincode[l] = huffcode[p]; /* minimum code of length l */
      p += htbl->bits[l];
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */

  /* Compute lookahead tables to speed up decoding.
   * First we set all the table entries to 0, indicating "too long";
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));

  p = 0;
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
	dtbl->look_nbits[lookbits] = l;
	dtbl->look_sym[lookbits] = htbl->huffval[p];
	lookbits++;
      }
    }
  }
}


/*
 * Out-of-line code for bit fetching (shared with jdphuff.c).
 * See jdhuff.h for info about usage.
 * Note: current values of get_buffer and bits_left are passed as parameters,
 * but are returned in the corresponding fields of the state struct.
 *
 * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 * of get_buffer to be used.  (On machines with wider words, an even larger
 * buffer could be used.)  However, on some machines 32-bit shifts are
 * quite slow and take time proportional to the number of places shifted.
 * (This is true with most PC compilers, for instance.)  In this case it may
 * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 */

#ifdef SLOW_SHIFT_32
#define MIN_GET_BITS  15	/* minimum allowable value */
#else
#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
#endif


GLOBAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  register int c;

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */

  while (bits_left < MIN_GET_BITS) {
    /* Attempt to read a byte */
    if (state->unread_marker != 0)
      goto no_more_data;	/* can't advance past a marker */

    if (bytes_in_buffer == 0) {
      if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	return FALSE;
      next_input_byte = state->cinfo->src->next_input_byte;
      bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
    }
    bytes_in_buffer--;
    c = GETJOCTET(*next_input_byte++);

    /* If it's 0xFF, check and discard stuffed zero byte */
    if (c == 0xFF) {
      do {
	if (bytes_in_buffer == 0) {
	  if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	    return FALSE;
	  next_input_byte = state->cinfo->src->next_input_byte;
	  bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
	}
	bytes_in_buffer--;
	c = GETJOCTET(*next_input_byte++);
      } while (c == 0xFF);

      if (c == 0) {
	/* Found FF/00, which represents an FF data byte */
	c = 0xFF;
      } else {
	/* Oops, it's actually a marker indicating end of compressed data. */
	/* Better put it back for use later */
	state->unread_marker = c;

      no_more_data:
	/* There should be enough bits still left in the data segment; */
	/* if so, just break out of the outer while loop. */
	if (bits_left >= nbits)
	  break;
	/* Uh-oh.  Report corrupted data to user and stuff zeroes into
	 * the data stream, so that we can produce some kind of image.
	 * Note that this code will be repeated for each byte demanded
	 * for the rest of the segment.  We use a nonvolatile flag to ensure
	 * that only one warning message appears.
	 */
	if (! *(state->printed_eod_ptr)) {
	  WARNMS(state->cinfo, JWRN_HIT_MARKER);
	  *(state->printed_eod_ptr) = TRUE;
	}
	c = 0;			/* insert a zero byte into bit buffer */
      }
    }

    /* OK, load c into get_buffer */
    get_buffer = (get_buffer << 8) | c;
    bits_left += 8;
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
}


/*
 * Out-of-line code for Huffman code decoding.
 * See jdhuff.h for info about usage.
 */

GLOBAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
  register int l = min_bits;
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
  code = GET_BITS(l);

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
    code <<= 1;
    CHECK_BIT_BUFFER(*state, 1, return -1);
    code |= GET_BITS(1);
    l++;
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ htbl->valptr[l] +
			    ((int) (code - htbl->mincode[l])) ];
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, since we'll just re-assign them on the next call.)
 */

METHODDEF(boolean)
__cdecl decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  register int s, k, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * dctbl;
  d_derived_tbl * actbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
    actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, dctbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Shortcut if component's values are not interesting */
    if (! compptr->component_needed)
      goto skip_ACs;

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Output the DC coefficient (assumes jpeg_natural_order[0] = 0) */
    (*block)[0] = (JCOEF) s;

    /* Do we need to decode the AC coefficients for this component? */
    if (compptr->DCT_scaled_size > 1) {

      /* Section F.2.2.2: decode the AC coefficients */
      /* Since zeroes are skipped, output area must be cleared beforehand */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label2);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  r = GET_BITS(s);
	  s = HUFF_EXTEND(r, s);
	  /* Output coefficient in natural (dezigzagged) order.
	   * Note: the extra entries in jpeg_natural_order[] will save us
	   * if k >= DCTSIZE2, which could happen if the data is corrupted.
	   */
	  (*block)[jpeg_natural_order[k]] = (JCOEF) s;
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    } else {
skip_ACs:

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (k = 1; k < DCTSIZE2; k++) {
	HUFF_DECODE(s, br_state, actbl, return FALSE, label3);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  DROP_BITS(s);
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    }
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
  entropy->pub.decode_mcu = decode_mcu;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jddctmgr.c ===
/*
 * jddctmgr.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the inverse-DCT management logic.
 * This code selects a particular IDCT implementation to be used,
 * and it performs related housekeeping chores.  No code in this file
 * is executed per IDCT step, only during output pass setup.
 *
 * Note that the IDCT routines are responsible for performing coefficient
 * dequantization as well as the IDCT proper.  This module sets up the
 * dequantization multiplier table needed by the IDCT routine.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/*
 * The decompressor input side (jdinput.c) saves away the appropriate
 * quantization table for each component at the start of the first scan
 * involving that component.  (This is necessary in order to correctly
 * decode files that reuse Q-table slots.)
 * When we are ready to make an output pass, the saved Q-table is converted
 * to a multiplier table that will actually be used by the IDCT routine.
 * The multiplier table contents are IDCT-method-dependent.  To support
 * application changes in IDCT method between scans, we can remake the
 * multiplier tables if necessary.
 * In buffered-image mode, the first output pass may occur before any data
 * has been seen for some components, and thus before their Q-tables have
 * been saved away.  To handle this case, multiplier tables are preset
 * to zeroes; the result of the IDCT will be a neutral gray level.
 */


/* Private subobject for this module */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* This array contains the IDCT method code that each multiplier table
   * is currently set up for, or -1 if it's not yet set up.
   * The actual multiplier tables are pointed to by dct_table in the
   * per-component comp_info structures.
   */
  int cur_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;


/* Allocated multiplier tables: big enough for any supported variant */

typedef union {
  ISLOW_MULT_TYPE islow_array[DCTSIZE2];
#ifdef DCT_IFAST_SUPPORTED
  IFAST_MULT_TYPE ifast_array[DCTSIZE2];
#endif
#ifdef DCT_FLOAT_SUPPORTED
  FLOAT_MULT_TYPE float_array[DCTSIZE2];
#endif
} multiplier_table;


/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
 * so be sure to compile that code if either ISLOW or SCALING is requested.
 */
#ifdef DCT_ISLOW_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#else
#ifdef IDCT_SCALING_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#endif
#endif


/*
 * Prepare for an output pass.
 * Here we select the proper IDCT routine for each component and build
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch (compptr->DCT_scaled_size) {
#ifdef IDCT_SCALING_SUPPORTED
    case 1:
      method_ptr = jpeg_idct_1x1;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 2:
      method_ptr = jpeg_idct_2x2;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
    case 4:
      method_ptr = jpeg_idct_4x4;
      method = JDCT_ISLOW;	/* jidctred uses islow-style table */
      break;
#endif
    case DCTSIZE:
      switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
	method = JDCT_ISLOW;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
	method = JDCT_IFAST;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
	method = JDCT_FLOAT;
	break;
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
      }
      break;
    default:
      ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
      break;
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
    /* Create multiplier table from quant table.
     * However, we can skip this if the component is uninteresting
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
      continue;
    qtbl = compptr->quant_table;
    if (qtbl == NULL)		/* happens if no data yet for component */
      continue;
    idct->cur_method[ci] = method;
    switch (method) {
#ifdef PROVIDE_ISLOW_TABLES
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
	}
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
	       aanscalefactor[row] * aanscalefactor[col]);
	    i++;
	  }
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdct.h ===
/*
 * jdct.h
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file contains common declarations for the forward and
 * inverse DCT modules.  These declarations are private to the DCT managers
 * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
 * The individual DCT algorithms are kept in separate files to ease 
 * machine-dependent tuning (e.g., assembly coding).
 */


/*
 * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
 * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
 * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
 * implementations use an array of type FAST_FLOAT, instead.)
 * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
 * The DCT outputs are returned scaled up by a factor of 8; they therefore
 * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
 * convention improves accuracy in integer implementations and saves some
 * work in floating-point ones.
 * Quantization of the output coefficients is done by jcdctmgr.c.
 */

#if BITS_IN_JSAMPLE == 8
typedef int DCTELEM;		/* 16 or 32 bits is fine */
#else
typedef INT32 DCTELEM;		/* must have 32 bits */
#endif

typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));


/*
 * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
 * to an output sample array.  The routine must dequantize the input data as
 * well as perform the IDCT; for dequantization, it uses the multiplier table
 * pointed to by compptr->dct_table.  The output data is to be placed into the
 * sample array starting at a specified column.  (Any row offset needed will
 * be applied to the array pointer before it is passed to the IDCT code.)
 * Note that the number of samples emitted by the IDCT routine is
 * DCT_scaled_size * DCT_scaled_size.
 */

/* typedef inverse_DCT_method_ptr is declared in jpegint.h */

/*
 * Each IDCT routine has its own ideas about the best dct_table element type.
 */

typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
#if BITS_IN_JSAMPLE == 8
typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
#else
typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
#endif
typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */


/*
 * Each IDCT routine is responsible for range-limiting its results and
 * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
 * be quite far out of range if the input data is corrupt, so a bulletproof
 * range-limiting step is required.  We use a mask-and-table-lookup method
 * to do the combined operations quickly.  See the comments with
 * prepare_range_limit_table (in jdmaster.c) for more info.
 */

#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)

#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_fdct_islow		jFDislow
#define jpeg_fdct_ifast		jFDifast
#define jpeg_fdct_float		jFDfloat
#define jpeg_idct_islow		jRDislow
#define jpeg_idct_ifast		jRDifast
#define jpeg_idct_float		jRDfloat
#define jpeg_idct_4x4		jRD4x4
#define jpeg_idct_2x2		jRD2x2
#define jpeg_idct_1x1		jRD1x1
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Extern declarations for the forward and inverse DCT routines. */

EXTERN(void) jpeg_fdct_islow JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_ifast JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_float JPP((FAST_FLOAT * data));

EXTERN(void) jpeg_idct_islow
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_ifast
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_float
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_4x4
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_2x2
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_1x1
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));


/*
 * Macros for handling fixed-point arithmetic; these are used by many
 * but not all of the DCT/IDCT modules.
 *
 * All values are expected to be of type INT32.
 * Fractional constants are scaled left by CONST_BITS bits.
 * CONST_BITS is defined within each module using these macros,
 * and may differ from one module to the next.
 */

#define ONE	((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)

/* Convert a positive real constant to an integer scaled by CONST_SCALE.
 * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
 * thus causing a lot of useless floating-point operations at run time.
 */

#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))

/* Descale and correctly round an INT32 value that's scaled by N bits.
 * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
 * the fudge factor is correct for either sign of X.
 */

#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * This macro is used only when the two inputs will actually be no more than
 * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
 * full 32x32 multiply.  This provides a useful speedup on many machines.
 * Unfortunately there is no way to specify a 16x16->32 multiply portably
 * in C, but some C compilers will do the right thing if you provide the
 * correct combination of casts.
 */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
#endif
#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
#endif

#ifndef MULTIPLY16C16		/* default definition */
#define MULTIPLY16C16(var,const)  ((var) * (const))
#endif

/* Same except both inputs are variables. */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
#endif

#ifndef MULTIPLY16V16		/* default definition */
#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdhuff.h ===
/*
 * jdhuff.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains declarations for Huffman entropy decoding routines
 * that are shared between the sequential decoder (jdhuff.c) and the
 * progressive decoder (jdphuff.c).  No other modules need to see these.
 */

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_d_derived_tbl	jMkDDerived
#define jpeg_fill_bit_buffer	jFilBitBuf
#define jpeg_huff_decode	jHufDecode
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Derived data constructed for each Huffman table */

#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */

typedef struct {
  /* Basic tables: (element [0] of each array is unused) */
  INT32 mincode[17];		/* smallest code of length k */
  INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  int valptr[17];		/* huffval[] index of 1st symbol of length k */

  /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  JHUFF_TBL *pub;

  /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
   * the input data stream.  If the next Huffman code is no more
   * than HUFF_LOOKAHEAD bits long, we can obtain its length and
   * the corresponding symbol directly from these tables.
   */
  int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
} d_derived_tbl;

/* Expand a Huffman table definition into the derived format */
EXTERN(void) jpeg_make_d_derived_tbl JPP((j_decompress_ptr cinfo,
				JHUFF_TBL * htbl, d_derived_tbl ** pdtbl));


/*
 * Fetching the next N bits from the input stream is a time-critical operation
 * for the Huffman decoders.  We implement it with a combination of inline
 * macros and out-of-line subroutines.  Note that N (the number of bits
 * demanded at one time) never exceeds 15 for JPEG use.
 *
 * We read source bytes into get_buffer and dole out bits as needed.
 * If get_buffer already contains enough bits, they are fetched in-line
 * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
 * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
 * as full as possible (not just to the number of bits needed; this
 * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
 * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
 * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
 * at least the requested number of bits --- dummy zeroes are inserted if
 * necessary.
 */

typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE  32	/* size of buffer in bits */
typedef __int64 bit_buf_type_64;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE_64  64	/* size of buffer in bits */

/* If long is > 32 bits on your machine, and shifting/masking longs is
 * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
 * appropriately should be a win.  Unfortunately we can't do this with
 * something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
 * because not all machines measure sizeof in 8-bit bytes.
 */

typedef struct {		/* Bitreading state saved across MCUs */
  bit_buf_type_64 get_buffer_64;	/* MMX current bit-extraction buffer */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  boolean printed_eod;		/* flag to suppress multiple warning msgs */
} bitread_perm_state;

typedef struct {		/* Bitreading working state within an MCU */
  /* current data source state */
  const JOCTET * next_input_byte; /* => next byte to read from source */
  size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  int unread_marker;		/* nonzero if we have hit a marker */
  /* bit input buffer --- note these values are kept in register variables,
   * not in this struct, inside the inner loops.
   */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  bit_buf_type_64 get_buffer_64;	/* MMX current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  /* pointers needed by jpeg_fill_bit_buffer */
  j_decompress_ptr cinfo;	/* back link to decompress master record */
  boolean * printed_eod_ptr;	/* => flag in permanent state */
} bitread_working_state;
// these BITREAD MACROS are only called in decode_mcu, but not by MMX routine
// not aware of MMX get_buffer
/* Macros to declare and load/save bitread local variables. */
#define BITREAD_STATE_VARS  \
	register bit_buf_type get_buffer;  \
	register int bits_left;  \
	bitread_working_state br_state

#define BITREAD_LOAD_STATE(cinfop,permstate)  \
	br_state.cinfo = cinfop; \
	br_state.next_input_byte = cinfop->src->next_input_byte; \
	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
	br_state.unread_marker = cinfop->unread_marker; \
	get_buffer = permstate.get_buffer; \
	bits_left = permstate.bits_left; \
	br_state.printed_eod_ptr = & permstate.printed_eod

#define BITREAD_SAVE_STATE(cinfop,permstate)  \
	cinfop->src->next_input_byte = br_state.next_input_byte; \
	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
	cinfop->unread_marker = br_state.unread_marker; \
	permstate.get_buffer = get_buffer; \
	permstate.bits_left = bits_left

/*
 * These macros provide the in-line portion of bit fetching.
 * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 * The variables get_buffer and bits_left are assumed to be locals,
 * but the state struct might not be (jpeg_huff_decode needs this).
 *	CHECK_BIT_BUFFER(state,n,action);
 *		Ensure there are N bits in get_buffer; if suspend, take action.
 *      val = GET_BITS(n);
 *		Fetch next N bits.
 *      val = PEEK_BITS(n);
 *		Fetch next N bits without removing them from the buffer.
 *	DROP_BITS(n);
 *		Discard next N bits.
 * The value N should be a simple variable, not an expression, because it
 * is evaluated multiple times.
 */
// these macros are only called in non-MMX version of jpeg_huff_decoder and
// decode_mcu -- no changes made here, not aware of MMX get_buffer
#define CHECK_BIT_BUFFER(state,nbits,action) \
	{ if (bits_left < (nbits)) {  \
	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
	      { action; }  \
	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }

#define GET_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -= (nbits)))) & ((1<<(nbits))-1))

#define PEEK_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -  (nbits)))) & ((1<<(nbits))-1))

#define DROP_BITS(nbits) \
	(bits_left -= (nbits))

/* Load up the bit buffer to a depth of at least nbits */
EXTERN(boolean) jpeg_fill_bit_buffer
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, int nbits));


/*
 * Code for extracting next Huffman-coded symbol from input bit stream.
 * Again, this is time-critical and we make the main paths be macros.
 *
 * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 * without looping.  Usually, more than 95% of the Huffman codes will be 8
 * or fewer bits long.  The few overlength codes are handled with a loop,
 * which need not be inline code.
 *
 * Notes about the HUFF_DECODE macro:
 * 1. Near the end of the data segment, we may fail to get enough bits
 *    for a lookahead.  In that case, we do it the hard way.
 * 2. If the lookahead table contains no entry, the next code must be
 *    more than HUFF_LOOKAHEAD bits long.
 * 3. jpeg_huff_decode returns -1 if forced to suspend.
 */
// not called by MMX code -- not aware of MMX get_buffer
#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
{ register int nb, look; \
  if (bits_left < HUFF_LOOKAHEAD) { \
    if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
    if (bits_left < HUFF_LOOKAHEAD) { \
      nb = 1; goto slowlabel; \
    } \
  } \
  look = PEEK_BITS(HUFF_LOOKAHEAD); \
  if ((nb = htbl->look_nbits[look]) != 0) { \
    DROP_BITS(nb); \
    result = htbl->look_sym[look]; \
  } else { \
    nb = HUFF_LOOKAHEAD+1; \
slowlabel: \
    if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
	{ failaction; } \
    get_buffer = state.get_buffer; bits_left = state.bits_left; \
  } \
}

/* Out-of-line case for Huffman code fetching */
EXTERN(int) jpeg_huff_decode
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, d_derived_tbl * htbl, int min_bits));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdinput.c ===
/*
 * jdinput.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains input control logic for the JPEG decompressor.
 * These routines are concerned with controlling the decompressor's input
 * processing (marker reading and coefficient decoding).  The actual input
 * reading is done in jdmarker.c, jdhuff.c, and jdphuff.c.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_input_controller pub; /* public fields */

  boolean inheaders;		/* TRUE until first SOS is reached */
} my_input_controller;

typedef my_input_controller * my_inputctl_ptr;


/* Forward declarations */
METHODDEF(int) consume_markers JPP((j_decompress_ptr cinfo));


/*
 * Routines to calculate various quantities related to the size of the image.
 */

LOCAL(void)
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
   * In the full decompressor, this will be overridden by jdmaster.c;
   * but in the transcoder, jdmaster.c is not used, so we must do it here.
   */
  cinfo->min_DCT_scaled_size = DCTSIZE;

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->DCT_scaled_size = DCTSIZE;
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* downsampled_width and downsampled_height will also be overridden by
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
    cinfo->inputctl->has_multiple_scans = TRUE;
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
}


LOCAL(void)
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = compptr->DCT_scaled_size;
    compptr->last_col_width = 1;
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
    if (tmp == 0) tmp = compptr->v_samp_factor;
    compptr->last_row_height = tmp;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}


/*
 * Save away a copy of the Q-table referenced by each component present
 * in the current scan, unless already saved during a prior scan.
 *
 * In a multiple-scan JPEG file, the encoder could assign different components
 * the same Q-table slot number, but change table definitions between scans
 * so that each component uses a different Q-table.  (The IJG encoder is not
 * currently capable of doing this, but other encoders might.)  Since we want
 * to be able to dequantize all the components at the end of the file, this
 * means that we have to save away the table actually used for each component.
 * We do this by copying the table at the start of the first scan containing
 * the component.
 * The JPEG spec prohibits the encoder from changing the contents of a Q-table
 * slot between scans of a component using that slot.  If the encoder does so
 * anyway, this decoder will simply use the Q-table values that were current
 * at the start of the first scan for the component.
 *
 * The decompressor output side looks only at the saved quant tables,
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
    compptr->quant_table = qtbl;
  }
}


/*
 * Initialize the input modules to read a scan of compressed data.
 * The first call to this is done by jdmaster.c after initializing
 * the entire decompressor (during jpeg_start_decompress).
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  per_scan_setup(cinfo);
  latch_quant_tables(cinfo);
  (*cinfo->entropy->start_pass) (cinfo);
  (*cinfo->coef->start_input_pass) (cinfo);
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
}


/*
 * Finish up after inputting a compressed-data scan.
 * This is called by the coefficient controller after it's read all
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
}


/*
 * Read JPEG markers before, between, or after compressed-data scans.
 * Change state as necessary when a new scan is reached.
 * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 *
 * The consume_input method pointer points either here or to the
 * coefficient controller's consume_data routine, depending on whether
 * we are reading a compressed data segment or inter-segment markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
    return JPEG_REACHED_EOI;

  val = (*cinfo->marker->read_markers) (cinfo);

  switch (val) {
  case JPEG_REACHED_SOS:	/* Found SOS */
    if (inputctl->inheaders) {	/* 1st SOS */
      initial_setup(cinfo);
      inputctl->inheaders = FALSE;
      /* Note: start_input_pass must be called by jdmaster.c
       * before any more input can be consumed.  jdapi.c is
       * responsible for enforcing this sequencing.
       */
    } else {			/* 2nd or later SOS marker */
      if (! inputctl->pub.has_multiple_scans)
	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
      start_input_pass(cinfo);
    }
    break;
  case JPEG_REACHED_EOI:	/* Found EOI */
    inputctl->pub.eoi_reached = TRUE;
    if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
      if (cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOF_NO_SOS);
    } else {
      /* Prevent infinite loop in coef ctlr's decompress_data routine
       * if user set output_scan_number larger than number of scans.
       */
      if (cinfo->output_scan_number > cinfo->input_scan_number)
	cinfo->output_scan_number = cinfo->input_scan_number;
    }
    break;
  case JPEG_SUSPENDED:
    break;
  }

  return val;
}


/*
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->marker->reset_marker_reader) (cinfo);
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
}


/*
 * Initialize the input controller module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.reset_input_controller = reset_input_controller;
  inputctl->pub.start_input_pass = start_input_pass;
  inputctl->pub.finish_input_pass = finish_input_pass;
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdmarker.c ===
/*
 * jdmarker.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to decode JPEG datastream markers.
 * Most of the complexity arises from our desire to support input
 * suspension: if not all of the data for a marker is available,
 * we must exit back to the application.  On resumption, we reprocess
 * the marker.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,
  
  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,
  
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,
  
  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Macros for fetching data from the data source module.
 *
 * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
 * the current restart point; we update them only when we have reached a
 * suitable place to restart if a suspension occurs.
 */

/* Declare and initialize local copies of input pointer/count */
#define INPUT_VARS(cinfo)  \
	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
	size_t bytes_in_buffer = datasrc->bytes_in_buffer

/* Unload the local copies --- do this only at a restart boundary */
#define INPUT_SYNC(cinfo)  \
	( datasrc->next_input_byte = next_input_byte,  \
	  datasrc->bytes_in_buffer = bytes_in_buffer )

/* Reload the local copies --- seldom used except in MAKE_BYTE_AVAIL */
#define INPUT_RELOAD(cinfo)  \
	( next_input_byte = datasrc->next_input_byte,  \
	  bytes_in_buffer = datasrc->bytes_in_buffer )

/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
 * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
 * but we must reload the local copies after a successful fill.
 */
#define MAKE_BYTE_AVAIL(cinfo,action)  \
	if (bytes_in_buffer == 0) {  \
	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
	    { action; }  \
	  INPUT_RELOAD(cinfo);  \
	}  \
	bytes_in_buffer--

/* Read a byte into variable V.
 * If must suspend, take the specified action (typically "return FALSE").
 */
#define INPUT_BYTE(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = GETJOCTET(*next_input_byte++); )

/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
 * V should be declared unsigned int or perhaps INT32.
 */
#define INPUT_2BYTES(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
		  MAKE_BYTE_AVAIL(cinfo,action); \
		  V += GETJOCTET(*next_input_byte++); )


/*
 * Routines to process JPEG markers.
 *
 * Entry condition: JPEG marker itself has been read and its code saved
 *   in cinfo->unread_marker; input restart point is just after the marker.
 *
 * Exit: if return TRUE, have read and processed any parameters, and have
 *   updated the restart point to point after the parameters.
 *   If return FALSE, was forced to suspend before reaching end of
 *   marker parameters; restart point has not been moved.  Same routine
 *   will be called again after application supplies more input data.
 *
 * This approach to suspension assumes that all of a marker's parameters can
 * fit into a single input bufferload.  This should hold for "normal"
 * markers.  Some COM/APPn markers might have large parameter segments,
 * but we use skip_input_data to get past those, and thereby put the problem
 * on the source manager's shoulders.
 *
 * Note that we don't bother to avoid duplicate trace messages if a
 * suspension occurs within marker parameters.  Other side effects
 * require more care.
 */


LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);

  if (cinfo->marker->saw_SOI)
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }
  cinfo->restart_interval = 0;

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */

  cinfo->saw_JFIF_marker = FALSE;
  cinfo->density_unit = 0;	/* set default JFIF APP0 values */
  cinfo->X_density = 1;
  cinfo->Y_density = 1;
  cinfo->saw_Adobe_marker = FALSE;
  cinfo->Adobe_transform = 0;

  cinfo->marker->saw_SOI = TRUE;

  return TRUE;
}


LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
/* Process a SOFn marker */
{
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  cinfo->progressive_mode = is_prog;
  cinfo->arith_code = is_arith;

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);

  length -= 8;

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  if (length != (cinfo->num_components * 3))
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->component_index = ci;
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    compptr->h_samp_factor = (c >> 4) & 15;
    compptr->v_samp_factor = (c     ) & 15;
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  if (! cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOS_NO_SOF);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */

  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  TRACEMS1(cinfo, 1, JTRC_SOS, n);

  cinfo->comps_in_scan = n;

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
    INPUT_BYTE(cinfo, cc, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      if (cc == compptr->component_id)
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);

  id_found:

    cinfo->cur_comp_info[i] = compptr;
    compptr->dc_tbl_no = (c >> 4) & 15;
    compptr->ac_tbl_no = (c     ) & 15;
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ss = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Se = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ah = (c >> 4) & 15;
  cinfo->Al = (c     ) & 15;

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;

  /* Count another SOS marker */
  cinfo->input_scan_number++;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF(boolean)
get_app0 (j_decompress_ptr cinfo)
/* Process an APP0 marker */
{
#define JFIF_LEN 14
  INT32 length;
  UINT8 b[JFIF_LEN];
  int buffp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if a JFIF APP0 marker is present */

  if (length >= JFIF_LEN) {
    for (buffp = 0; buffp < JFIF_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= JFIF_LEN;

    if (b[0]==0x4A && b[1]==0x46 && b[2]==0x49 && b[3]==0x46 && b[4]==0) {
      /* Found JFIF APP0 marker: check version */
      /* Major version must be 1, anything else signals an incompatible change.
       * We used to treat this as an error, but now it's a nonfatal warning,
       * Minor version should be 0..2, but process anyway if newer.
       */
      if (b[5] != 1)
	WARNMS2(cinfo, JWRN_JFIF_MAJOR, b[5], b[6]);
      else if (b[6] > 2)
	TRACEMS2(cinfo, 1, JTRC_JFIF_MINOR, b[5], b[6]);
      /* Save info */
      cinfo->saw_JFIF_marker = TRUE;
      cinfo->density_unit = b[7];
      cinfo->X_density = (b[8] << 8) + b[9];
      cinfo->Y_density = (b[10] << 8) + b[11];
      TRACEMS3(cinfo, 1, JTRC_JFIF,
	       cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
      if (b[12] | b[13])
	TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL, b[12], b[13]);
      if (length != ((INT32) b[12] * (INT32) b[13] * (INT32) 3))
	TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) length);
    } else {
      /* Start of APP0 does not match "JFIF" */
      TRACEMS1(cinfo, 1, JTRC_APP0, (int) length + JFIF_LEN);
    }
  } else {
    /* Too short to be JFIF marker */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


METHODDEF(boolean)
get_app14 (j_decompress_ptr cinfo)
/* Process an APP14 marker */
{
#define ADOBE_LEN 12
  INT32 length;
  UINT8 b[ADOBE_LEN];
  int buffp;
  unsigned int version, flags0, flags1, transform;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if an Adobe APP14 marker is present */

  if (length >= ADOBE_LEN) {
    for (buffp = 0; buffp < ADOBE_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= ADOBE_LEN;

    if (b[0]==0x41 && b[1]==0x64 && b[2]==0x6F && b[3]==0x62 && b[4]==0x65) {
      /* Found Adobe APP14 marker */
      version = (b[5] << 8) + b[6];
      flags0 = (b[7] << 8) + b[8];
      flags1 = (b[9] << 8) + b[10];
      transform = b[11];
      TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
      cinfo->saw_Adobe_marker = TRUE;
      cinfo->Adobe_transform = (UINT8) transform;
    } else {
      /* Start of APP14 does not match "Adobe" */
      TRACEMS1(cinfo, 1, JTRC_APP14, (int) length + ADOBE_LEN);
    }
  } else {
    /* Too short to be Adobe marker */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);
    INPUT_BYTE(cinfo, val, return FALSE);

    length -= 2;

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
    }
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
      
    bits[0] = 0;
    count = 0;
    for (i = 1; i <= 16; i++) {
      INPUT_BYTE(cinfo, bits[i], return FALSE);
      count += bits[i];
    }

    length -= 1 + 16;

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[9], bits[10], bits[11], bits[12],
	     bits[13], bits[14], bits[15], bits[16]);

    if (count > 256 || ((INT32) count) > length)
      ERREXIT(cinfo, JERR_DHT_COUNTS);

    for (i = 0; i < count; i++)
      INPUT_BYTE(cinfo, huffval[i], return FALSE);

    length -= count;

    if (index & 0x10) {		/* AC table definition */
      index -= 0x10;
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);

    if (*htblptr == NULL)
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
  INT32 length;
  int n, i, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
    INPUT_BYTE(cinfo, n, return FALSE);
    prec = n >> 4;
    n &= 0x0F;

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);

    if (n >= NUM_QUANT_TBLS)
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
    quant_ptr = cinfo->quant_tbl_ptrs[n];

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	INPUT_2BYTES(cinfo, tmp, return FALSE);
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
      /* We convert the zigzag-order table to natural array order. */
      quant_ptr->quantval[jpeg_natural_order[i]] = (UINT16) tmp;
    }

    if (cinfo->err->trace_level >= 2) {
      for (i = 0; i < DCTSIZE2; i += 8) {
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
		 quant_ptr->quantval[i],   quant_ptr->quantval[i+1],
		 quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
      }
    }

    length -= DCTSIZE2+1;
    if (prec) length -= DCTSIZE2;
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  if (length != 4)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_2BYTES(cinfo, tmp, return FALSE);

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);

  cinfo->restart_interval = tmp;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
  INT32 length;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  (*cinfo->src->skip_input_data) (cinfo, (long) length - 2L);

  return TRUE;
}


/*
 * Find the next JPEG marker, save it in cinfo->unread_marker.
 * Returns FALSE if had to suspend before reaching a marker;
 * in that case cinfo->unread_marker is unchanged.
 *
 * Note that the result might not be a valid marker code,
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
  int c;
  INPUT_VARS(cinfo);

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
      cinfo->marker->discarded_bytes++;
      INPUT_SYNC(cinfo);
      INPUT_BYTE(cinfo, c, return FALSE);
    }
    /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
    } while (c == 0xFF);
    if (c != 0)
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
    INPUT_SYNC(cinfo);
  }

  if (cinfo->marker->discarded_bytes != 0) {
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
    cinfo->marker->discarded_bytes = 0;
  }

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL(boolean)
first_marker (j_decompress_ptr cinfo)
/* Like next_marker, but used to obtain the initial SOI marker. */
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
  int c, c2;
  INPUT_VARS(cinfo);

  INPUT_BYTE(cinfo, c, return FALSE);
  INPUT_BYTE(cinfo, c2, return FALSE);
  if (c != 0xFF || c2 != (int) M_SOI)
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);

  cinfo->unread_marker = c2;

  INPUT_SYNC(cinfo);
  return TRUE;
}


/*
 * Read markers until SOS or EOI.
 *
 * Returns same codes as are defined for jpeg_consume_input:
 * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
      if (! cinfo->marker->saw_SOI) {
	if (! first_marker(cinfo))
	  return JPEG_SUSPENDED;
      } else {
	if (! next_marker(cinfo))
	  return JPEG_SUSPENDED;
      }
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
    case M_SOI:
      if (! get_soi(cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, TRUE, FALSE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE))
	return JPEG_SUSPENDED;
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, TRUE, TRUE))
	return JPEG_SUSPENDED;
      break;

    /* Currently unsupported SOFn types */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
      break;

    case M_SOS:
      if (! get_sos(cinfo))
	return JPEG_SUSPENDED;
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_SOS;
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_REACHED_EOI;
      
    case M_DAC:
      if (! get_dac(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_APP0:
    case M_APP1:
    case M_APP2:
    case M_APP3:
    case M_APP4:
    case M_APP5:
    case M_APP6:
    case M_APP7:
    case M_APP8:
    case M_APP9:
    case M_APP10:
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*cinfo->marker->process_APPn[cinfo->unread_marker - (int) M_APP0]) (cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_COM:
      if (! (*cinfo->marker->process_COM) (cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_RST0:		/* these are all parameterless */
    case M_RST1:
    case M_RST2:
    case M_RST3:
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
      break;

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
	return JPEG_SUSPENDED;
      break;

    default:			/* must be DHP, EXP, JPGn, or RESn */
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
      break;
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
  } /* end loop */
}


/*
 * Read a restart marker, which is expected to appear next in the datastream;
 * if the marker is not there, take appropriate recovery action.
 * Returns FALSE if suspension is required.
 *
 * This is called by the entropy decoder after it has read an appropriate
 * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
 * has already read a marker from the data source.  Under normal conditions
 * cinfo->unread_marker will be reset to 0 before returning; if not reset,
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
    cinfo->unread_marker = 0;
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;

  return TRUE;
}


/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don't have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo->unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker number (0..7) is passed as a parameter.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo->unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can't back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don't find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it's certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
  int marker = cinfo->unread_marker;
  int action = 1;
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
      action = 2;		/* invalid marker */
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
      action = 3;		/* valid non-restart marker */
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
	action = 3;		/* one of the next two expected restarts */
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
	action = 2;		/* a prior restart, so advance */
      else
	action = 1;		/* desired restart or too far away */
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
    switch (action) {
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
      return TRUE;
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
	return FALSE;
      marker = cinfo->unread_marker;
      break;
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
    }
  } /* end loop */
}


/*
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
  cinfo->unread_marker = 0;		/* no pending marker */
  cinfo->marker->saw_SOI = FALSE;	/* set internal state too */
  cinfo->marker->saw_SOF = FALSE;
  cinfo->marker->discarded_bytes = 0;
}


/*
 * Initialize the marker reader module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
  int i;

  /* Create subobject in permanent pool */
  cinfo->marker = (struct jpeg_marker_reader *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(struct jpeg_marker_reader));
  /* Initialize method pointers */
  cinfo->marker->reset_marker_reader = reset_marker_reader;
  cinfo->marker->read_markers = read_markers;
  cinfo->marker->read_restart_marker = read_restart_marker;
  cinfo->marker->process_COM = skip_variable;
  for (i = 0; i < 16; i++)
    cinfo->marker->process_APPn[i] = skip_variable;
  cinfo->marker->process_APPn[0] = get_app0;
  cinfo->marker->process_APPn[14] = get_app14;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdmaster.c ===
/*
 * jdmaster.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG decompressor.
 * These routines are concerned with selecting the modules to be executed
 * and with determining the number of passes and the work to be done in each
 * pass.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_decomp_master pub; /* public fields */

  int pass_number;		/* # of passes completed */

  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */

  /* Saved references to initialized quantizer modules,
   * in case we need to switch modes.
   */
  struct jpeg_color_quantizer * quantizer_1pass;
  struct jpeg_color_quantizer * quantizer_2pass;
} my_decomp_master;

typedef my_decomp_master * my_master_ptr;


/*
 * Determine whether merged upsample/color conversion should be used.
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
    return FALSE;
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
      cinfo->out_color_space != JCS_RGB ||
      cinfo->out_color_components != RGB_PIXELSIZE)
    return FALSE;
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
      cinfo->comp_info[1].h_samp_factor != 1 ||
      cinfo->comp_info[2].h_samp_factor != 1 ||
      cinfo->comp_info[0].v_samp_factor >  2 ||
      cinfo->comp_info[1].v_samp_factor != 1 ||
      cinfo->comp_info[2].v_samp_factor != 1)
    return FALSE;
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
    return FALSE;
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
#else
  return FALSE;
#endif
}


/*
 * Compute output image dimensions and related values.
 * NOTE: this is exported for possible use by application.
 * Hence it mustn't do anything that can't be done twice.
 * Also note that it may be called before the master module is initialized!
 */

GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

#ifdef IDCT_SCALING_SUPPORTED

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
    /* Provide 1/8 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 8L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 8L);
    cinfo->min_DCT_scaled_size = 1;
  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
    /* Provide 1/4 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 4L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 4L);
    cinfo->min_DCT_scaled_size = 2;
  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
    /* Provide 1/2 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 2L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 2L);
    cinfo->min_DCT_scaled_size = 4;
  } else {
    /* Provide 1/1 scaling */
    cinfo->output_width = cinfo->image_width;
    cinfo->output_height = cinfo->image_height;
    cinfo->min_DCT_scaled_size = DCTSIZE;
  }
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code assumes that the supported DCT scalings are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    int ssize = cinfo->min_DCT_scaled_size;
    while (ssize < DCTSIZE &&
	   (compptr->h_samp_factor * ssize * 2 <=
	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
	   (compptr->v_samp_factor * ssize * 2 <=
	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
      ssize = ssize * 2;
    }
    compptr->DCT_scaled_size = ssize;
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
  }

#else /* !IDCT_SCALING_SUPPORTED */

  /* Hardwire it to "no scaling" */
  cinfo->output_width = cinfo->image_width;
  cinfo->output_height = cinfo->image_height;
  /* jdinput.c has already initialized DCT_scaled_size to DCTSIZE,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    break;
  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    cinfo->out_color_components = RGB_PIXELSIZE;
    break;
#endif /* else share code with YCbCr */
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
    break;
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
    break;
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
    break;
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
  else
    cinfo->rec_outbuf_height = 1;
}


/*
 * Several decompression processes need to range-limit values to the range
 * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 * due to noise introduced by quantization, roundoff error, etc.  These
 * processes are inner loops and need to be as fast as possible.  On most
 * machines, particularly CPUs with pipelines or instruction prefetch,
 * a (subscript-check-less) C table lookup
 *		x = sample_range_limit[x];
 * is faster than explicit tests
 *		if (x < 0)  x = 0;
 *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 * These processes all use a common table prepared by the routine below.
 *
 * For most steps we can mathematically guarantee that the initial value
 * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 * limiting step (just after the IDCT), a wildly out-of-range value is 
 * possible if the input data is corrupt.  To avoid any chance of indexing
 * off the end of memory and getting a bad-pointer trap, we perform the
 * post-IDCT limiting thus:
 *		x = range_limit[x & MASK];
 * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 * samples.  Under normal circumstances this is more than enough range and
 * a correct output will be generated; with bogus input data the mask will
 * cause wraparound, and we will safely generate a bogus-but-in-range output.
 * For the post-IDCT step, we want to convert the data from signed to unsigned
 * representation by adding CENTERJSAMPLE at the same time that we limit it.
 * So the post-IDCT limiting table ends up looking like this:
 *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0,1,...,CENTERJSAMPLE-1
 * Negative inputs select values from the upper half of the table after
 * masking.
 *
 * We can save some space by overlapping the start of the post-IDCT table
 * with the simpler range limiting table.  The post-IDCT table begins at
 * sample_range_limit + CENTERJSAMPLE.
 *
 * Note that the table is allocated in near data space on PCs; it's small
 * enough and used often enough to justify this.
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
  cinfo->sample_range_limit = table;
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
    table[i] = (JSAMPLE) i;
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
    table[i] = MAXJSAMPLE;
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}


/*
 * Master selection of decompression modules.
 * This is done once at jpeg_start_decompress time.  We determine
 * which modules will be used and give them appropriate initialization calls.
 * We also initialize the decompressor input side to begin consuming data.
 *
 * Since jpeg_read_header has finished, we know what is in the SOF
 * and (first) SOS markers.  We also have all the application parameter
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
  prepare_range_limit_table(cinfo);

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* Initialize my private state */
  master->pass_number = 0;
  master->using_merged_upsample = use_merged_upsample(cinfo);

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
  master->quantizer_2pass = NULL;
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
    cinfo->enable_1pass_quant = FALSE;
    cinfo->enable_external_quant = FALSE;
    cinfo->enable_2pass_quant = FALSE;
  }
  if (cinfo->quantize_colors) {
    if (cinfo->raw_data_out)
      ERREXIT(cinfo, JERR_NOTIMPL);
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
      cinfo->enable_1pass_quant = TRUE;
      cinfo->enable_external_quant = FALSE;
      cinfo->enable_2pass_quant = FALSE;
      cinfo->colormap = NULL;
    } else if (cinfo->colormap != NULL) {
      cinfo->enable_external_quant = TRUE;
    } else if (cinfo->two_pass_quantize) {
      cinfo->enable_2pass_quant = TRUE;
    } else {
      cinfo->enable_1pass_quant = TRUE;
    }

    if (cinfo->enable_1pass_quant) {
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
      master->quantizer_1pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
      master->quantizer_2pass = cinfo->cquantize;
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }
    /* If both quantizers are initialized, the 2-pass one is left active;
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
    if (master->using_merged_upsample) {
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
      jinit_upsampler(cinfo);
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
  jinit_d_coef_controller(cinfo, use_c_buffer);

  if (! cinfo->raw_data_out)
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
      cinfo->inputctl->has_multiple_scans) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
    /* Count the input pass as done */
    master->pass_number++;
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}


/*
 * Per-pass setup.
 * This is called at the beginning of each output pass.  We determine which
 * modules will be active during this pass and give them appropriate
 * start_pass calls.  We also set is_dummy_pass to indicate whether this
 * is a "real" output pass or a dummy pass for color quantization.
 * (In the latter case, jdapi.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (master->pub.is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
	cinfo->cquantize = master->quantizer_2pass;
	master->pub.is_dummy_pass = TRUE;
      } else if (cinfo->enable_1pass_quant) {
	cinfo->cquantize = master->quantizer_1pass;
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
    (*cinfo->coef->start_output_pass) (cinfo);
    if (! cinfo->raw_data_out) {
      if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
    }
  }
}


/*
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
    (*cinfo->cquantize->finish_pass) (cinfo);
  master->pass_number++;
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Switch to a new external colormap between output passes.
 */

GLOBAL(void)
jpeg_new_colormap (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_BUFIMAGE)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (cinfo->quantize_colors && cinfo->enable_external_quant &&
      cinfo->colormap != NULL) {
    /* Select 2-pass quantizer for external colormap use */
    cinfo->cquantize = master->quantizer_2pass;
    /* Notify quantizer of colormap change */
    (*cinfo->cquantize->new_color_map) (cinfo);
    master->pub.is_dummy_pass = FALSE; /* just in case */
  } else
    ERREXIT(cinfo, JERR_MODE_CHANGE);
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


/*
 * Initialize master decompression control and select active modules.
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;

  master_selection(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdmerge.c ===
/*
 * jdmerge.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains code for merged upsampling/color conversion.
 *
 * This file combines functions from jdsample.c and jdcolor.c;
 * read those files first to understand what's going on.
 *
 * When the chroma components are to be upsampled by simple replication
 * (ie, box filtering), we can save some work in color conversion by
 * calculating all the output pixels corresponding to a pair of chroma
 * samples at one time.  In the conversion equations
 *	R = Y           + K1 * Cr
 *	G = Y + K2 * Cb + K3 * Cr
 *	B = Y + K4 * Cb
 * only the Y term varies among the group of pixels corresponding to a pair
 * of chroma samples, so the rest of the terms can be calculated just once.
 * At typical sampling ratios, this eliminates half or three-quarters of the
 * multiplications needed for color conversion.
 *
 * This file currently provides implementations for the following cases:
 *	YCbCr => RGB color conversion only.
 *	Sampling ratios of 2h1v or 2h2v.
 *	No scaling needed at upsample time.
 *	Corner-aligned (non-CCIR601) sampling alignment.
 * Other special cases could be added, but in most applications these are
 * the only common cases.  (For uncommon cases we fall back on the more
 * general code in jdsample.c and jdcolor.c.)
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"

#ifdef UPSAMPLE_MERGING_SUPPORTED


/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Pointer to routine to do actual upsampling/conversion of one row group */
  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
			   JSAMPARRAY output_buf));

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

  /* For 2:1 vertical sampling, we produce two output rows at a time.
   * We need a "spare" row buffer to hold the second output row if the
   * application provides just a one-row buffer; we also use the spare
   * to discard the dummy last row if the image height is odd.
   */
  JSAMPROW spare_row;
  boolean spare_full;		/* T if spare buffer is occupied */

  JDIMENSION out_row_width;	/* samples per output row */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize tables for YCC->RGB colorspace conversion.
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}


/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * The control routine just handles the row buffering considerations.
 */

METHODDEF(void)
merged_2v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
		      1, upsample->out_row_width);
    num_rows = 1;
    upsample->spare_full = FALSE;
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
      num_rows = upsample->rows_to_go;
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
    if (num_rows > out_rows_avail)
      num_rows = out_rows_avail;
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
    if (num_rows > 1) {
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
    } else {
      work_ptrs[1] = upsample->spare_row;
      upsample->spare_full = TRUE;
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
    (*in_row_group_ctr)++;
}


METHODDEF(void)
merged_1v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
			 output_buf + *out_row_ctr);
  /* Adjust counts */
  (*out_row_ctr)++;
  (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by the control routines to do
 * the actual upsampling/conversion.  One row group is processed per call.
 *
 * Note: since we may be writing directly into application-supplied buffers,
 * we have to be honest about the output width; we can't assume the buffer
 * has been rounded up to an even width.
 */


/*
 * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 */

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr0++);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 */

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr00++);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    outptr0 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
    y  = GETJSAMPLE(*inptr01++);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
    y  = GETJSAMPLE(*inptr01);
    outptr1[RGB_RED] =   range_limit[y + cred];
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
  }
}


/*
 * Module initialization routine for merged upsampling/color conversion.
 *
 * NB: this is called under the conditions determined by use_merged_upsample()
 * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;

  if (cinfo->max_v_samp_factor == 2) {
    upsample->pub.upsample = merged_2v_upsample;
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
  } else {
    upsample->pub.upsample = merged_1v_upsample;
    upsample->upmethod = h2v1_merged_upsample;
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}

#endif /* UPSAMPLE_MERGING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdphuff.c ===
/*
 * jdphuff.c
 *
 * Copyright (C) 1995-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines for progressive JPEG.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent
 * storage only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdhuff.h"		/* Declarations shared with jdhuff.c */


#ifdef D_PROGRESSIVE_SUPPORTED

/*
 * Expanded entropy decoder object for progressive Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
  int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).EOBRUN = (src).EOBRUN, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
} phuff_entropy_decoder;

typedef phuff_entropy_decoder * phuff_entropy_ptr;

/* Forward declarations */
METHODDEF(boolean) __cdecl decode_mcu_DC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_AC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_DC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));
METHODDEF(boolean) __cdecl decode_mcu_AC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band, bad;
  int ci, coefi, tbl;
  int *coef_bit_ptr;
  jpeg_component_info * compptr;

  is_DC_band = (cinfo->Ss == 0);

  /* Validate scan parameters */
  bad = FALSE;
  if (is_DC_band) {
    if (cinfo->Se != 0)
      bad = TRUE;
  } else {
    /* need not check Ss/Se < 0 since they came from unsigned bytes */
    if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
      bad = TRUE;
    /* AC scans may have only one component */
    if (cinfo->comps_in_scan != 1)
      bad = TRUE;
  }
  if (cinfo->Ah != 0) {
    /* Successive approximation refinement scan: must have Al = Ah-1. */
    if (cinfo->Al != cinfo->Ah-1)
      bad = TRUE;
  }
  if (cinfo->Al > 13)		/* need not check for < 0 */
    bad = TRUE;
  if (bad)
    ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
  /* Update progression status, and verify that scan order is legal.
   * Note that inter-scan inconsistencies are treated as warnings
   * not fatal errors ... not clear if this is right way to behave.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    int cindex = cinfo->cur_comp_info[ci]->component_index;
    coef_bit_ptr = & cinfo->coef_bits[cindex][0];
    if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
      WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
    for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
      int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
      if (cinfo->Ah != expected)
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
      coef_bit_ptr[coefi] = cinfo->Al;
    }
  }

  /* Select MCU decoding routine */
  if (cinfo->Ah == 0) {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_first;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_first;
  } else {
    if (is_DC_band)
      entropy->pub.decode_mcu = decode_mcu_DC_refine;
    else
      entropy->pub.decode_mcu = decode_mcu_AC_refine;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    /* Make sure requested tables are present, and compute derived tables.
     * We may build same derived table more than once, but it's not expensive.
     */
    if (is_DC_band) {
      if (cinfo->Ah == 0) {	/* DC refinement needs no table */
	tbl = compptr->dc_tbl_no;
	if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
	    cinfo->dc_huff_tbl_ptrs[tbl] == NULL)
	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
	jpeg_make_d_derived_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[tbl],
				& entropy->derived_tbls[tbl]);
      }
    } else {
      tbl = compptr->ac_tbl_no;
      if (tbl < 0 || tbl >= NUM_HUFF_TBLS ||
          cinfo->ac_huff_tbl_ptrs[tbl] == NULL)
        ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
      jpeg_make_d_derived_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[tbl],
			      & entropy->derived_tbls[tbl]);
      /* remember the single active table */
      entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
    }
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->bitstate.printed_eod = FALSE;

  /* Initialize private state variables */
  entropy->saved.EOBRUN = 0;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Next segment can get another out-of-data warning */
  entropy->bitstate.printed_eod = FALSE;

  return TRUE;
}


/*
 * Huffman MCU decoding.
 * Each of these routines decodes and returns one MCU's worth of
 * Huffman-compressed coefficients. 
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 *
 * We return FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * spectral selection, since we'll just re-assign them on the next call.
 * Successive approximation AC refinement has to be more careful, however.)
 */

/*
 * MCU decoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
__cdecl decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
  register int s, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(state, entropy->saved);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    tbl = entropy->derived_tbls[compptr->dc_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
    if (s) {
      CHECK_BIT_BUFFER(br_state, s, return FALSE);
      r = GET_BITS(s);
      s = HUFF_EXTEND(r, s);
    }

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.last_dc_val[ci];
    state.last_dc_val[ci] = s;
    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (s << Al);
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  ASSIGN_STATE(entropy->saved, state);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
__cdecl decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state.
   * We can avoid loading/saving bitread state if in an EOB run.
   */
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */

  if (EOBRUN > 0)		/* if it's a band of zeroes... */
    EOBRUN--;			/* ...process it now (we do nothing) */
  else {
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
    block = MCU_data[0];
    tbl = entropy->ac_derived_tbl;

    for (k = cinfo->Ss; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
      r = s >> 4;
      s &= 15;
      if (s) {
        k += r;
        CHECK_BIT_BUFFER(br_state, s, return FALSE);
        r = GET_BITS(s);
        s = HUFF_EXTEND(r, s);
	/* Scale and output coefficient in natural (dezigzagged) order */
        (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
      } else {
        if (r == 15) {		/* ZRL */
          k += 15;		/* skip 15 zeroes in band */
        } else {		/* EOBr, run length is 2^r + appended bits */
          EOBRUN = 1 << r;
          if (r) {		/* EOBr, r > 0 */
	    CHECK_BIT_BUFFER(br_state, r, return FALSE);
            r = GET_BITS(r);
            EOBRUN += r;
          }
	  EOBRUN--;		/* this band is processed at this moment */
	  break;		/* force end-of-band */
	}
      }
    }

    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  }

  /* Completed MCU, so update state */
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF(boolean)
__cdecl decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
    if (GET_BITS(1))
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}


/*
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
__cdecl decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  int Se = cinfo->Se;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  JCOEFPTR thiscoef;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
  EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we care about */

  /* There is always only one block per MCU */
  block = MCU_data[0];
  tbl = entropy->ac_derived_tbl;

  /* If we are forced to suspend, we must undo the assignments to any newly
   * nonzero coefficients in the block, because otherwise we'd get confused
   * next time about which coefficients were already nonzero.
   * But we need not undo addition of bits to already-nonzero coefficients;
   * instead, we can test the current bit position to see if we already did it.
   */
  num_newnz = 0;

  /* initialize coefficient loop counter to start of band */
  k = cinfo->Ss;

  if (EOBRUN == 0) {
    for (; k <= Se; k++) {
      HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
      r = s >> 4;
      s &= 15;
      if (s) {
	if (s != 1)		/* size of new coef should always be 1 */
	  WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
        CHECK_BIT_BUFFER(br_state, 1, goto undoit);
        if (GET_BITS(1))
	  s = p1;		/* newly nonzero coef is positive */
	else
	  s = m1;		/* newly nonzero coef is negative */
      } else {
	if (r != 15) {
	  EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
	  if (r) {
	    CHECK_BIT_BUFFER(br_state, r, goto undoit);
	    r = GET_BITS(r);
	    EOBRUN += r;
	  }
	  break;		/* rest of block is handled by EOB logic */
	}
	/* note s = 0 for processing ZRL */
      }
      /* Advance over already-nonzero coefs and r still-zero coefs,
       * appending correction bits to the nonzeroes.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      do {
	thiscoef = *block + jpeg_natural_order[k];
	if (*thiscoef != 0) {
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	  if (GET_BITS(1)) {
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	      if (*thiscoef >= 0)
		*thiscoef += (short)p1;
	      else
		*thiscoef += (short)m1;
	    }
	  }
	} else {
	  if (--r < 0)
	    break;		/* reached target zero coefficient */
	}
	k++;
      } while (k <= Se);
      if (s) {
	int pos = jpeg_natural_order[k];
	/* Output newly nonzero coefficient */
	(*block)[pos] = (JCOEF) s;
	/* Remember its position in case we have to suspend */
	newnz_pos[num_newnz++] = pos;
      }
    }
  }

  if (EOBRUN > 0) {
    /* Scan any remaining coefficient positions after the end-of-band
     * (the last newly nonzero coefficient, if any).  Append a correction
     * bit to each already-nonzero coefficient.  A correction bit is 1
     * if the absolute value of the coefficient must be increased.
     */
    for (; k <= Se; k++) {
      thiscoef = *block + jpeg_natural_order[k];
      if (*thiscoef != 0) {
	CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	if (GET_BITS(1)) {
	  if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	    if (*thiscoef >= 0)
	      *thiscoef += (short)p1;
	    else
	      *thiscoef += (short)m1;
	  }
	}
      }
    }
    /* Count one block completed in EOB run */
    EOBRUN--;
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
  entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we care about */

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}


/*
 * Module initialization routine for progressive Huffman entropy decoding.
 */

GLOBAL(void)
jinit_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr entropy;
  int *coef_bit_ptr;
  int ci, i;

  entropy = (phuff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff_decoder;

  /* Mark derived tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->derived_tbls[i] = NULL;
  }

  /* Create progression status table */
  cinfo->coef_bits = (int (*)[DCTSIZE2])
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components*DCTSIZE2*SIZEOF(int));
  coef_bit_ptr = & cinfo->coef_bits[0][0];
  for (ci = 0; ci < cinfo->num_components; ci++) 
    for (i = 0; i < DCTSIZE2; i++)
      *coef_bit_ptr++ = -1;
}

#endif /* D_PROGRESSIVE_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdmainct.c ===
/*
 * jdmainct.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for decompression.
 * The main buffer lies between the JPEG decompressor proper and the
 * post-processor; it holds downsampled data in the JPEG colorspace.
 *
 * Note that this code is bypassed in raw-data mode, since the application
 * supplies the equivalent of the main buffer in that case.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/*
 * In the current system design, the main buffer need never be a full-image
 * buffer; any full-height buffers will be found inside the coefficient or
 * postprocessing controllers.  Nonetheless, the main controller is not
 * trivial.  Its responsibility is to provide context rows for upsampling/
 * rescaling, and doing this in an efficient fashion is a bit tricky.
 *
 * Postprocessor input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  (We require DCT_scaled_size values to be
 * chosen such that these numbers are integers.  In practice DCT_scaled_size
 * values will likely be powers of two, so we actually have the stronger
 * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
 * Upsampling will typically produce max_v_samp_factor pixel rows from each
 * row group (times any additional scale factor that the upsampler is
 * applying).
 *
 * The coefficient controller will deliver data to us one iMCU row at a time;
 * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
 * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
 * to one row of MCUs when the image is fully interleaved.)  Note that the
 * number of sample rows varies across components, but the number of row
 * groups does not.  Some garbage sample rows may be included in the last iMCU
 * row at the bottom of the image.
 *
 * Depending on the vertical scaling algorithm used, the upsampler may need
 * access to the sample row(s) above and below its current input row group.
 * The upsampler is required to set need_context_rows TRUE at global selection
 * time if so.  When need_context_rows is FALSE, this controller can simply
 * obtain one iMCU row at a time from the coefficient controller and dole it
 * out as row groups to the postprocessor.
 *
 * When need_context_rows is TRUE, this controller guarantees that the buffer
 * passed to postprocessing contains at least one row group's worth of samples
 * above and below the row group(s) being processed.  Note that the context
 * rows "above" the first passed row group appear at negative row offsets in
 * the passed buffer.  At the top and bottom of the image, the required
 * context rows are manufactured by duplicating the first or last real sample
 * row; this avoids having special cases in the upsampling inner loops.
 *
 * The amount of context is fixed at one row group just because that's a
 * convenient number for this controller to work with.  The existing
 * upsamplers really only need one sample row of context.  An upsampler
 * supporting arbitrary output rescaling might wish for more than one row
 * group of context when shrinking the image; tough, we don't handle that.
 * (This is justified by the assumption that downsizing will be handled mostly
 * by adjusting the DCT_scaled_size values, so that the actual scale factor at
 * the upsample step needn't be much less than one.)
 *
 * To provide the desired context, we have to retain the last two row groups
 * of one iMCU row while reading in the next iMCU row.  (The last row group
 * can't be processed until we have another row group for its below-context,
 * and so we have to save the next-to-last group too for its above-context.)
 * We could do this most simply by copying data around in our buffer, but
 * that'd be very slow.  We can avoid copying any data by creating a rather
 * strange pointer structure.  Here's how it works.  We allocate a workspace
 * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
 * of row groups per iMCU row).  We create two sets of redundant pointers to
 * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
 * pointer lists look like this:
 *                   M+1                          M-1
 * master pointer --> 0         master pointer --> 0
 *                    1                            1
 *                   ...                          ...
 *                   M-3                          M-3
 *                   M-2                           M
 *                   M-1                          M+1
 *                    M                           M-2
 *                   M+1                          M-1
 *                    0                            0
 * We read alternate iMCU rows using each master pointer; thus the last two
 * row groups of the previous iMCU row remain un-overwritten in the workspace.
 * The pointer lists are set up so that the required context rows appear to
 * be adjacent to the proper places when we pass the pointer lists to the
 * upsampler.
 *
 * The above pictures describe the normal state of the pointer lists.
 * At top and bottom of the image, we diddle the pointer lists to duplicate
 * the first or last sample row as necessary (this is cheaper than copying
 * sample rows around).
 *
 * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 * situation each iMCU row provides only one row group so the buffering logic
 * must be different (eg, we must read two iMCU rows before we can emit the
 * first row group).  For now, we simply do not support providing context
 * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 * be worth providing --- if someone wants a 1/8th-size preview, they probably
 * want it quick and dirty, so a context-free upsampler is sufficient.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_main_controller pub; /* public fields */

  /* Pointer to allocated workspace (M or M+2 row groups). */
  JSAMPARRAY buffer[MAX_COMPONENTS];

  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */

  /* Remaining fields are only used in the context case. */

  /* These are the master pointers to the funny-order pointer lists. */
  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */

  int whichptr;			/* indicates which pointer set is now in use */
  int context_state;		/* process_data state machine status */
  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
} my_main_controller;

typedef my_main_controller * my_main_ptr;

/* context_state values: */
#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */


/* Forward declarations */
METHODDEF(void) process_data_simple_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
METHODDEF(void) process_data_context_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) process_data_crank_post
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif


LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
    xbuf += rgroup;		/* want one row group at negative offsets */
    main->xbuffer[0][ci] = xbuf;
    xbuf += rgroup * (M + 4);
    main->xbuffer[1][ci] = xbuf;
  }
}


LOCAL(void)
make_funny_pointers (j_decompress_ptr cinfo)
/* Create the funny pointer lists discussed in the comments above.
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
    for (i = 0; i < rgroup * (M + 2); i++) {
      xbuf0[i] = xbuf1[i] = buf[i];
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
    }
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[0];
    }
  }
}


LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
    }
  }
}


LOCAL(void)
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
    rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
    if (rows_left == 0) rows_left = iMCUheight;
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
    for (i = 0; i < rgroup * 2; i++) {
      xbuf[rows_left + i] = xbuf[rows_left-1];
    }
  }
}


/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
      main->pub.process_data = process_data_context_main;
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
      main->context_state = CTX_PREPARE_FOR_IMCU;
      main->iMCU_row_ctr = 0;
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
    main->rowgroup_ctr = 0;
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This handles the simple case where no context is required.
 */

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
  /* Note: at the bottom of the image, we may pass extra garbage row groups
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
    main->buffer_full = FALSE;
    main->rowgroup_ctr = 0;
  }
}


/*
 * Process some data.
 * This handles the case where context rows must be provided.
 */

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo,
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
    main->iMCU_row_ctr++;	/* count rows received */
  }

  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
    if (*out_row_ctr >= out_rows_avail)
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
    main->buffer_full = FALSE;
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
    main->context_state = CTX_POSTPONED_ROW;
  }
}


/*
 * Process some data.
 * Final pass of two-pass quantization: just call the postprocessor.
 * Source data will be the postprocessor controller's internal buffer.
 */

#ifdef QUANT_2PASS_SUPPORTED

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  if (need_full_buffer)		/* shouldn't happen */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
    if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
      ERREXIT(cinfo, JERR_NOTIMPL);
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_scaled_size + 2;
  } else {
    ngroups = cinfo->min_DCT_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdpostct.c ===
/*
 * jdpostct.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the decompression postprocessing controller.
 * This controller manages the upsampling, color conversion, and color
 * quantization/reduction steps; specifically, it controls the buffering
 * between upsample/color conversion and color quantization/reduction.
 *
 * If no color quantization/reduction is required, then this module has no
 * work to do, and it just hands off to the upsample/color conversion code.
 * An integrated upsample/convert/quantize process would replace this module
 * entirely.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_post_controller pub; /* public fields */

  /* Color quantization source buffer: this holds output data from
   * the upsample/color conversion step to be passed to the quantizer.
   * For two-pass color quantization, we need a full-image buffer;
   * for one-pass operation, a strip buffer is sufficient.
   */
  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
  JDIMENSION strip_height;	/* buffer size in rows */
  /* for two-pass mode only: */
  JDIMENSION starting_row;	/* row # of first row in current strip */
  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
} my_post_controller;

typedef my_post_controller * my_post_ptr;


/* Forward declarations */
METHODDEF(void) post_process_1pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) post_process_prepass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
METHODDEF(void) post_process_2pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, post->whole_image,
	   (JDIMENSION) 0, post->strip_height, TRUE);
      }
    } else {
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_prepass;
    break;
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_2pass;
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
}


/*
 * Process some data in the one-pass (strip buffer) case.
 * This is used for color precision reduction as well as one-pass quantization.
 */

METHODDEF(void)
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
  *out_row_ctr += num_rows;
}


#ifdef QUANT_2PASS_SUPPORTED

/*
 * Process some data in the first pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}


/*
 * Process some data in the second pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
  post->whole_image = NULL;	/* flag for no virtual arrays */
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
				(long) post->strip_height),
	 post->strip_height);
#else
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif /* QUANT_2PASS_SUPPORTED */
    } else {
      /* One-pass color quantization: just make a strip buffer. */
      post->buffer = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jidctfst.c ===
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


#ifdef USECSOURCE

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */
  
 
	  IFAST_MULT_TYPE * quantptr;
	  int *wsptr;

	  /* Pass 1: process columns from input, store into work array. */

	  inptr = coef_block;
	  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
	  wsptr = workspace;
	  for (ctr = DCTSIZE; ctr > 0; ctr--) {
		/* Due to quantization, we will usually find that many of the input
		 * coefficients are zero, especially the AC terms.  We can exploit this
		 * by short-circuiting the IDCT calculation for any column in which all
		 * the AC terms are zero.  In that case each output is equal to the
		 * DC coefficient (with scale factor as needed).
		 * With typical images and quantization tables, half or more of the
		 * column DCT calculations can be simplified this way.
		 */
    
		if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
		 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
		 inptr[DCTSIZE*7]) == 0) {
		  /* AC terms all zero */
		  int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

		  wsptr[DCTSIZE*0] = dcval;
		  wsptr[DCTSIZE*1] = dcval;
		  wsptr[DCTSIZE*2] = dcval;
		  wsptr[DCTSIZE*3] = dcval;
		  wsptr[DCTSIZE*4] = dcval;
		  wsptr[DCTSIZE*5] = dcval;
		  wsptr[DCTSIZE*6] = dcval;
		  wsptr[DCTSIZE*7] = dcval;
      
		  inptr++;			/* advance pointers to next column */
		  quantptr++;
		  wsptr++;
		  continue;
		}
    
		/* Even part */

		tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
		tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
		tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
		tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

		tmp10 = tmp0 + tmp2;	/* phase 3 */
		tmp11 = tmp0 - tmp2;

		tmp13 = tmp1 + tmp3;	/* phases 5-3 */
		tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */

		tmp0 = tmp10 + tmp13;	/* phase 2 */
		tmp3 = tmp10 - tmp13;
		tmp1 = tmp11 + tmp12;
		tmp2 = tmp11 - tmp12;
    
		/* Odd part */

		tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
		tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
		tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
		tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

		z13 = tmp6 + tmp5;		/* phase 6 */
		z10 = tmp6 - tmp5;
		z11 = tmp4 + tmp7;
		z12 = tmp4 - tmp7;

		tmp7 = z11 + z13;		/* phase 5 */
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

		tmp6 = tmp12 - tmp7;	/* phase 2 */
		tmp5 = tmp11 - tmp6;
		tmp4 = tmp10 + tmp5;

		wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
		wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
		wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
		wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
		wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
		wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
		wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
		wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);

		inptr++;			/* advance pointers to next column */
		quantptr++;
		wsptr++;
	  }
  
	  /* Pass 2: process rows from work array, store into output array. */
	  /* Note that we must descale the results by a factor of 8 == 2**3, */
	  /* and also undo the PASS1_BITS scaling. */

	  wsptr = workspace;
	  for (ctr = 0; ctr < DCTSIZE; ctr++) {
		outptr = output_buf[ctr] + output_col;
		/* Rows of zeroes can be exploited in the same way as we did with columns.
		 * However, the column calculation has created many nonzero AC terms, so
		 * the simplification applies less often (typically 5% to 10% of the time).
		 * On machines with very fast multiplication, it's possible that the
		 * test takes more time than it's worth.  In that case this section
		 * may be commented out.
		 */
    
	#ifndef NO_ZERO_ROW_TEST
		if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
		 wsptr[7]) == 0) {
		  /* AC terms all zero */
		  JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
					  & RANGE_MASK];
      
		  outptr[0] = dcval;
		  outptr[1] = dcval;
		  outptr[2] = dcval;
		  outptr[3] = dcval;
		  outptr[4] = dcval;
		  outptr[5] = dcval;
		  outptr[6] = dcval;
		  outptr[7] = dcval;

		  wsptr += DCTSIZE;		/* advance pointer to next row */
		  continue;
		}
	#endif
    
		/* Even part */

		tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
		tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);

		tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
		tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
			- tmp13;

		tmp0 = tmp10 + tmp13;
		tmp3 = tmp10 - tmp13;
		tmp1 = tmp11 + tmp12;
		tmp2 = tmp11 - tmp12;

		/* Odd part */

		z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
		z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
		z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
		z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];

		tmp7 = z11 + z13;		/* phase 5 */
		tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

		z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
		tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
		tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

		tmp6 = tmp12 - tmp7;	/* phase 2 */
		tmp5 = tmp11 - tmp6;
		tmp4 = tmp10 + tmp5;

		/* Final output stage: scale down by a factor of 8 and range-limit */
 
		outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
					& RANGE_MASK];
		outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
					& RANGE_MASK];

		wsptr += DCTSIZE;		/* advance pointer to next row */
	  }
	}

#else

extern void midct8x8aan(short* dctcoeff, short* tempcoeff, short* quantptr,
				  JSAMPARRAY output_buf, JDIMENSION output_col,
				  JSAMPLE *range_limit ) ;

extern void pidct8x8aan(short* dctcoeff, short* tempcoeff, short* quantptr,
				  JSAMPARRAY output_buf, JDIMENSION output_col,
				  JSAMPLE *range_limit ) ;


/*
* Perform dequantization and inverse DCT on one block of coefficients.
*/

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  short * quantptr;
  short * wsptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  short aworkspace[DCTSIZE2+8] ;

  // ensure that the temporary working space is quad aligned
  wsptr = (short *)((INT32)(aworkspace) + 0x8) ;
  wsptr = (short *)((INT32)(wsptr) & 0xfffffff8) ;


  quantptr = (short *) compptr->dct_table;
  
  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array

  if(vfMMXMachine) {
    midct8x8aan(coef_block, wsptr, quantptr, output_buf, output_col, range_limit) ;
  }
  else {
    pidct8x8aan(coef_block, wsptr, quantptr, output_buf, output_col, range_limit) ;
  }

}

#endif //USECSOURCE

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdsample.c ===
/*
 * jdsample.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains upsampling routines.
 *
 * Upsampling input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  Upsampling will normally produce
 * max_v_samp_factor pixel rows from each row group (but this could vary
 * if the upsampler is applying a scale factor of its own).
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Pointer to routine to upsample a single component */
typedef JMETHOD(void, upsample1_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Color conversion buffer.  When using separate upsampling and color
   * conversion steps, this buffer holds one upsampled row group until it
   * has been color converted and output.
   * Note: we do not allocate any storage for component(s) which are full-size,
   * ie do not need rescaling.  The corresponding entry of color_buf[] is
   * simply set to point to the input data array, thereby avoiding copying.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  /* Per-component upsampling method pointers */
  upsample1_ptr methods[MAX_COMPONENTS];

  int next_row_out;		/* counts rows emitted from color_buf */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */

  /* Height of an input row group for each component. */
  int rowgroup_height[MAX_COMPONENTS];

  /* These arrays save pixel expansion factors so that int_expand need not
   * recompute them each time.  They are unused for other upsampling methods.
   */
  UINT8 h_expand[MAX_COMPONENTS];
  UINT8 v_expand[MAX_COMPONENTS];
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;


/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * In this version we upsample each component independently.
 * We upsample one row group into the conversion buffer, then apply
 * color conversion a row at a time.
 */

METHODDEF(void)
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  upsample->next_row_out += num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
    (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by sep_upsample to upsample pixel values
 * of a single component.  One row group is processed per call.
 */


/*
 * For full-size components, we just make color_buf[ci] point at the
 * input buffer, and thus avoid copying any data.  Note that this is
 * safe only because sep_upsample doesn't declare the input row group
 * "consumed" until we are done color converting and emitting it.
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
}


/*
 * This is a no-op version used for "uninteresting" components.
 * These components will not be referenced by color conversion.
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
}


/*
 * This version handles any integral sampling ratios.
 * This is not used for typical JPEG files, so it need not be fast.
 * Nor, for that matter, is it particularly accurate: the algorithm is
 * simple replication of the input pixel onto the corresponding output
 * pixels.  The hi-falutin sampling literature refers to this as a
 * "box filter".  A box filter tends to introduce visible artifacts,
 * so if you are actually going to use 3:1 or 4:1 sampling ratios
 * you would be well advised to improve this code.
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
  v_expand = upsample->v_expand[compptr->component_index];

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      for (h = h_expand; h > 0; h--) {
	*outptr++ = invalue;
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
			v_expand-1, cinfo->output_width);
    }
    inrow++;
    outrow += v_expand;
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
 *
 * The upsampling algorithm is linear interpolation between pixel centers,
 * also known as a "triangle filter".  This is a good compromise between
 * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
 * of the way between input pixel centers.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF(void)
h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register int invalue;
  register JDIMENSION colctr;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    /* Special case for first column */
    invalue = GETJSAMPLE(*inptr++);
    *outptr++ = (JSAMPLE) invalue;
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);

    for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
      /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
      invalue = GETJSAMPLE(*inptr++) * 3;
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
    }

    /* Special case for last column */
    invalue = GETJSAMPLE(*inptr);
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
    *outptr++ = (JSAMPLE) invalue;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
 * Again a triangle filter; see comments for h2v1 case, above.
 *
 * It is OK for us to reference the adjacent input rows because we demanded
 * context from the main buffer controller (see initialization code).
 */

METHODDEF(void)
h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr0, inptr1, outptr;
#if BITS_IN_JSAMPLE == 8
  register int thiscolsum, lastcolsum, nextcolsum;
#else
  register INT32 thiscolsum, lastcolsum, nextcolsum;
#endif
  register JDIMENSION colctr;
  int inrow, outrow, v;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    for (v = 0; v < 2; v++) {
      /* inptr0 points to nearest input row, inptr1 points to next nearest */
      inptr0 = input_data[inrow];
      if (v == 0)		/* next nearest is row above */
	inptr1 = input_data[inrow-1];
      else			/* next nearest is row below */
	inptr1 = input_data[inrow+1];
      outptr = output_data[outrow++];

      /* Special case for first column */
      thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
      lastcolsum = thiscolsum; thiscolsum = nextcolsum;

      for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
      }

      /* Special case for last column */
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
    }
    inrow++;
  }
}


/*
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;
  int ci;
  jpeg_component_info * compptr;
  boolean need_buffer, do_fancy;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
  upsample->pub.upsample = sep_upsample;
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
   * so don't ask for it.
   */
  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    h_out_group = cinfo->max_h_samp_factor;
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
      need_buffer = FALSE;
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
      need_buffer = FALSE;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group == v_out_group) {
      /* Special cases for 2h1v upsampling */
      if (do_fancy && compptr->downsampled_width > 2)
	upsample->methods[ci] = h2v1_fancy_upsample;
      else
	upsample->methods[ci] = h2v1_upsample;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group * 2 == v_out_group) {
      /* Special cases for 2h2v upsampling */
      if (do_fancy && compptr->downsampled_width > 2) {
	upsample->methods[ci] = h2v2_fancy_upsample;
	upsample->pub.need_context_rows = TRUE;
      } else
	upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
    if (need_buffer) {
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jdtrans.c ===
/*
 * jdtrans.c
 *
 * Copyright (C) 1995-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains library routines for transcoding decompression,
 * that is, reading raw DCT coefficient arrays from an input JPEG file.
 * The routines in jdapimin.c will also be needed by a transcoder.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"


/* Forward declarations */
LOCAL(void) transdecode_master_selection JPP((j_decompress_ptr cinfo));


/*
 * Read the coefficient arrays from a JPEG file.
 * jpeg_read_header must be completed before calling this.
 *
 * The entire image is read into a set of virtual coefficient-block arrays,
 * one per component.  The return value is a pointer to the array of
 * virtual-array descriptors.  These can be manipulated directly via the
 * JPEG memory manager, or handed off to jpeg_write_coefficients().
 * To release the memory occupied by the virtual arrays, call
 * jpeg_finish_decompress() when done with the data.
 *
 * Returns NULL if suspended.  This case need be checked only if
 * a suspending data source is used.
 */

GLOBAL(jvirt_barray_ptr *)
jpeg_read_coefficients (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
    /* First call: initialize active modules */
    transdecode_master_selection(cinfo);
    cinfo->global_state = DSTATE_RDCOEFS;
  } else if (cinfo->global_state != DSTATE_RDCOEFS)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Absorb whole file into the coef buffer */
  for (;;) {
    int retcode;
    /* Call progress monitor hook if present */
    if (cinfo->progress != NULL)
      (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    /* Absorb some more input */
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
    if (retcode == JPEG_SUSPENDED)
      return NULL;
    if (retcode == JPEG_REACHED_EOI)
      break;
    /* Advance progress counter if appropriate */
    if (cinfo->progress != NULL &&
	(retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
      if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	/* startup underestimated number of scans; ratchet up one scan */
	cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
      }
    }
  }
  /* Set state so that jpeg_finish_decompress does the right thing */
  cinfo->global_state = DSTATE_STOPPING;
  return cinfo->coef->coef_arrays;
}


/*
 * Master selection of decompression modules for transcoding.
 * This substitutes for jdmaster.c's initialization of the full decompressor.
 */

LOCAL(void)
transdecode_master_selection (j_decompress_ptr cinfo)
{
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
    if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
      jinit_phuff_decoder(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else
      jinit_huff_decoder(cinfo);
  }

  /* Always get a full-image coefficient buffer. */
  jinit_d_coef_controller(cinfo, TRUE);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

  /* Initialize progress monitoring. */
  if (cinfo->progress != NULL) {
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
    } else if (cinfo->inputctl->has_multiple_scans) {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
    } else {
      nscans = 1;
    }
    cinfo->progress->pass_counter = 0L;
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
    cinfo->progress->completed_passes = 0;
    cinfo->progress->total_passes = 1;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jidctred.c ===
/*
 * jidctred.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains inverse-DCT routines that produce reduced-size output:
 * either 4x4, 2x2, or 1x1 pixels from an 8x8 DCT block.
 *
 * The implementation is based on the Loeffler, Ligtenberg and Moschytz (LL&M)
 * algorithm used in jidctint.c.  We simply replace each 8-to-8 1-D IDCT step
 * with an 8-to-4 step that produces the four averages of two adjacent outputs
 * (or an 8-to-2 step producing two averages of four outputs, for 2x2 output).
 * These steps were derived by computing the corresponding values at the end
 * of the normal LL&M code, then simplifying as much as possible.
 *
 * 1x1 is trivial: just take the DC coefficient divided by 8.
 *
 * See jidctint.c for additional comments.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef IDCT_SCALING_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling is the same as in jidctint.c. */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
#else
#define FIX_0_211164243  FIX(0.211164243)
#define FIX_0_509795579  FIX(0.509795579)
#define FIX_0_601344887  FIX(0.601344887)
#define FIX_0_720959822  FIX(0.720959822)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_850430095  FIX(0.850430095)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_061594337  FIX(1.061594337)
#define FIX_1_272758580  FIX(1.272758580)
#define FIX_1_451774981  FIX(1.451774981)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_172734803  FIX(2.172734803)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_624509785  FIX(3.624509785)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 4x4 output block.
 */

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process column 4, because second pass won't use it */
    if (ctr == DCTSIZE-4)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*6] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine term 4 for 4x4 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= (CONST_BITS+1);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }
  
  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
    
    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = (INT32) wsptr[7];
    z2 = (INT32) wsptr[5];
    z3 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[1];
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 2x2 output block.
 */

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process columns 2,4,6 */
    if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp10 = z1 << (CONST_BITS+2);
    
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }
  
  /* Pass 2: process 2 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 2; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[3] | wsptr[5] | wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
    
    /* Odd part */

    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 1x1 output block.
 */

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* We hardly need an inverse DCT routine for this: just take the
   * average pixel value, which is one-eighth of the DC coefficient.
   */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
}

#endif /* IDCT_SCALING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jidctflt.c ===
/*
 * jidctflt.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * This implementation should be more accurate than either of the integer
 * IDCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
    wsptr[DCTSIZE*4] = tmp3 + tmp4;
    wsptr[DCTSIZE*3] = tmp3 - tmp4;

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * And testing floats for zero is relatively expensive, so we don't bother.
     */
    
    /* Even part */

    tmp10 = wsptr[0] + wsptr[4];
    tmp11 = wsptr[0] - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
    z10 = wsptr[5] - wsptr[3];
    z11 = wsptr[1] + wsptr[7];
    z12 = wsptr[1] - wsptr[7];

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jerror.h ===
/*
 * jerror.h
 *
 * Copyright (C) 1994-1995, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the error and message codes for the JPEG library.
 * Edit this file to add new codes, or to translate the message strings to
 * some other language.
 * A set of error-reporting macros are defined too.  Some applications using
 * the JPEG library may wish to include this file to get the error codes
 * and/or the macros.
 */

/*
 * To define the enum list of message codes, include this file without
 * defining macro JMESSAGE.  To create a message string table, include it
 * again with a suitable JMESSAGE definition (see jerror.c for an example).
 */
#ifndef JMESSAGE
#ifndef JERROR_H
/* First time through, define the enum list */
#define JMAKE_ENUM_LIST
#else
/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
#define JMESSAGE(code,string)
#endif /* JERROR_H */
#endif /* JMESSAGE */

#ifdef JMAKE_ENUM_LIST

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_ENUM_LIST */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_LIB_VERSION,
	 "Wrong JPEG library version: library is %d, caller expects %d")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_PROGRESSION,
	 "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
JMESSAGE(JERR_BAD_PROG_SCRIPT,
	 "Invalid progressive parameters at scan script entry %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_STRUCT_SIZE,
	 "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_COUNTS, "Bogus DHT counts")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
	 "Cannot transcode due to multiple use of quantization table %d")
JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_MINOR, "Unknown JFIF minor revision number %d.%02d")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Skipping marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_BOGUS_PROGRESSION,
	 "Inconsistent progression sequence for component %d coefficient %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_ENUM_LIST

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#undef JMAKE_ENUM_LIST
#endif /* JMAKE_ENUM_LIST */

/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
#undef JMESSAGE


#ifndef JERROR_H
#define JERROR_H

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
#define ERREXIT(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (cinfo)->err->msg_parm.i[3] = (p4), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXITS(cinfo,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define MAKESTMT(stuff)		do { stuff } while (0)

/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#endif /* JERROR_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jidctint.c ===
/*
 * jidctint.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
 * larger than the true IDCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D IDCT,
 * because the y0 and y4 inputs need not be divided by sqrt(N).
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (To scale up 12-bit sample data further, an
 * intermediate INT32 array would be needed.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))




#ifdef USECSOURCE

 /*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_islow(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);

    tmp0 = (z2 + z3) << CONST_BITS;
    tmp1 = (z2 - z3) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
    
    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
    tmp1 = (INT32) wsptr[5];
    tmp2 = (INT32) wsptr[3];
    tmp3 = (INT32) wsptr[1];
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#else

extern void midct8x8llm(JCOEFPTR inptr, short *quantptr, short *wsptr,
							JSAMPARRAY output_buf, JDIMENSION output_col,
							JSAMPLE *range);

extern void pidct8x8llm(JCOEFPTR inptr, short *quantptr, short *wsptr,
							JSAMPARRAY output_buf, JDIMENSION output_col,
							JSAMPLE *range);


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 * MMX Enhanced and Pentium enhanced versions.
 */

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col)
{
  JCOEFPTR inptr;
  short * quantptr;
  short * wsptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int workspace[DCTSIZE2+8];	/* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  // ensure that the temporary working space is quad aligned
  wsptr = (short *)((INT32)(workspace) + 0x8) ;
  wsptr = (short *)((INT32)(wsptr) & 0xfffffff8) ;


  inptr = coef_block;
  quantptr = (short *) compptr->dct_table;
  wsptr = (short *)workspace;
  
  if (vfMMXMachine) {	
    midct8x8llm(inptr, quantptr, wsptr,output_buf, output_col,range_limit ) ;
  }
  else {
    pidct8x8llm(inptr, quantptr, wsptr,output_buf, output_col,range_limit ) ;    
  }
}
#endif //USECSOURCE

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jinclude.h ===
/*
 * jinclude.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file exists to provide a single place to fix any problems with
 * including the wrong system include files.  (Common problems are taken
 * care of by the standard jconfig symbols, but on really weird systems
 * you may have to edit this file.)
 *
 * NOTE: this file is NOT intended to be included by applications using the
 * JPEG library.  Most applications need only include jpeglib.h.
 */


/* Include auto-config file to find out which system include files we need. */

#include "jconfig.h"		/* auto configuration options */
#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */

#ifndef X_MARKCODE_HXX_
#define X_MARKCODE_HXX_
#include "..\..\..\core\include\markcode.hxx"
#endif

/*
 * We need the NULL macro and size_t typedef.
 * On an ANSI-conforming system it is sufficient to include <stddef.h>.
 * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
 * pull in <sys/types.h> as well.
 * Note that the core JPEG library does not require <stdio.h>;
 * only the default error handler and data source/destination modules do.
 * But we must pull it in because of the references to FILE in jpeglib.h.
 * You can remove those references if you want to compile without <stdio.h>.
 */

#ifdef HAVE_STDDEF_H
#include <stddef.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef NEED_SYS_TYPES_H
#include <sys/types.h>
#endif

#include <stdio.h>

/*
 * We need memory copying and zeroing functions, plus strncpy().
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * Some systems may declare memset and memcpy in <memory.h>.
 *
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Change the casts in these macros if not!
 */

#ifdef NEED_BSD_STRINGS

#include <strings.h>
#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))

#else /* not BSD, assume ANSI/SysV string lib */

#include <string.h>
#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))

#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#define SIZEOF(object)	((size_t) sizeof(object))

/*
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */

#define JFREAD(file,buf,sizeofbuf)  \
  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
#define JFWRITE(file,buf,sizeofbuf)  \
  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
	
/*
 * USEINLINEASM is defined on intel platforms allowing the JPEG decoder to run faster.
 * You can also remove this definition to test non-intel platform behavior on an intel
 * machine.  Code checks this macro with #ifdef.
 *
 */

#if defined(_X86_) && !defined(WIN16)
#define USEINLINEASM
#else
#define USECSOURCE
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jmemnobs.c ===
/*
 * jmemnobs.c
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides a really simple implementation of the system-
 * dependent portion of the JPEG memory manager.  This implementation
 * assumes that no backing-store files are needed: all required space
 * can be obtained from malloc().
 * This is very portable in the sense that it'll compile on almost anything,
 * but you'd better have lots of main memory (or virtual memory) if you want
 * to process big images.
 * Note that the max_memory_to_use option is ignored by this implementation.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  free(object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  free(object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jmemsys.h ===
/*
 * jmemsys.h
 *
 * Copyright (C) 1992-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file defines the interface between the system-independent
 * and system-dependent portions of the JPEG memory manager.  No other
 * modules need include it.  (The system-independent portion is jmemmgr.c;
 * there are several different versions of the system-dependent portion.)
 *
 * This file works as-is for the system-dependent memory managers supplied
 * in the IJG distribution.  You may need to modify it if you write a
 * custom memory manager.  If system-dependent changes are needed in
 * this file, the best method is to #ifdef them based on a configuration
 * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR.
 */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_get_small		jGetSmall
#define jpeg_free_small		jFreeSmall
#define jpeg_get_large		jGetLarge
#define jpeg_free_large		jFreeLarge
#define jpeg_mem_available	jMemAvail
#define jpeg_open_backing_store	jOpenBackStore
#define jpeg_mem_init		jMemInit
#define jpeg_mem_term		jMemTerm
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/*
 * These two functions are used to allocate and release small chunks of
 * memory.  (Typically the total amount requested through jpeg_get_small is
 * no more than 20K or so; this will be requested in chunks of a few K each.)
 * Behavior should be the same as for the standard library functions malloc
 * and free; in particular, jpeg_get_small must return NULL on failure.
 * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
 * size of the object being freed, just in case it's needed.
 * On an 80x86 machine using small-data memory model, these manage near heap.
 */

EXTERN(void *) jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
EXTERN(void) jpeg_free_small JPP((j_common_ptr cinfo, void * object,
				  size_t sizeofobject));

/*
 * These two functions are used to allocate and release large chunks of
 * memory (up to the total free space designated by jpeg_mem_available).
 * The interface is the same as above, except that on an 80x86 machine,
 * far pointers are used.  On most other machines these are identical to
 * the jpeg_get/free_small routines; but we keep them separate anyway,
 * in case a different allocation strategy is desirable for large chunks.
 */

EXTERN(void FAR *) jpeg_get_large JPP((j_common_ptr cinfo,
				       size_t sizeofobject));
EXTERN(void) jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
				  size_t sizeofobject));

/*
 * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
 * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
 * matter, but that case should never come into play).  This macro is needed
 * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
 * On those machines, we expect that jconfig.h will provide a proper value.
 * On machines with 32-bit flat address spaces, any large constant may be used.
 *
 * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
 * size_t and will be a multiple of sizeof(align_type).
 */

#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
#define MAX_ALLOC_CHUNK  1000000000L
#endif

/*
 * This routine computes the total space still available for allocation by
 * jpeg_get_large.  If more space than this is needed, backing store will be
 * used.  NOTE: any memory already allocated must not be counted.
 *
 * There is a minimum space requirement, corresponding to the minimum
 * feasible buffer sizes; jmemmgr.c will request that much space even if
 * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
 * all working storage in memory, is also passed in case it is useful.
 * Finally, the total space already allocated is passed.  If no better
 * method is available, cinfo->mem->max_memory_to_use - already_allocated
 * is often a suitable calculation.
 *
 * It is OK for jpeg_mem_available to underestimate the space available
 * (that'll just lead to more backing-store access than is really necessary).
 * However, an overestimate will lead to failure.  Hence it's wise to subtract
 * a slop factor from the true available space.  5% should be enough.
 *
 * On machines with lots of virtual memory, any large constant may be returned.
 * Conversely, zero may be returned to always use the minimum amount of memory.
 */

EXTERN(long) jpeg_mem_available JPP((j_common_ptr cinfo,
				     long min_bytes_needed,
				     long max_bytes_needed,
				     long already_allocated));


/*
 * This structure holds whatever state is needed to access a single
 * backing-store object.  The read/write/close method pointers are called
 * by jmemmgr.c to manipulate the backing-store object; all other fields
 * are private to the system-dependent backing store routines.
 */

#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */

#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */

typedef unsigned short XMSH;	/* type of extended-memory handles */
typedef unsigned short EMSH;	/* type of expanded-memory handles */

typedef union {
  short file_handle;		/* DOS file handle if it's a temp file */
  XMSH xms_handle;		/* handle if it's a chunk of XMS */
  EMSH ems_handle;		/* handle if it's a chunk of EMS */
} handle_union;

#endif /* USE_MSDOS_MEMMGR */

typedef struct backing_store_struct * backing_store_ptr;

typedef struct backing_store_struct {
  /* Methods for reading/writing/closing this backing-store object */
  JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
				     backing_store_ptr info,
				     void FAR * buffer_address,
				     long file_offset, long byte_count));
  JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info,
				      void FAR * buffer_address,
				      long file_offset, long byte_count));
  JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info));

  /* Private fields for system-dependent backing-store management */
#ifdef USE_MSDOS_MEMMGR
  /* For the MS-DOS manager (jmemdos.c), we need: */
  handle_union handle;		/* reference to backing-store storage object */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#else
  /* For a typical implementation with temp files, we need: */
  FILE * temp_file;		/* stdio reference to temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
#endif
} backing_store_info;

/*
 * Initial opening of a backing-store object.  This must fill in the
 * read/write/close pointers in the object.  The read/write routines
 * may take an error exit if the specified maximum file size is exceeded.
 * (If jpeg_mem_available always returns a large value, this routine can
 * just take an error exit.)
 */

EXTERN(void) jpeg_open_backing_store JPP((j_common_ptr cinfo,
					  backing_store_ptr info,
					  long total_bytes_needed));


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  jpeg_mem_init will be called before anything is
 * allocated (and, therefore, nothing in cinfo is of use except the error
 * manager pointer).  It should return a suitable default value for
 * max_memory_to_use; this may subsequently be overridden by the surrounding
 * application.  (Note that max_memory_to_use is only important if
 * jpeg_mem_available chooses to consult it ... no one else will.)
 * jpeg_mem_term may assume that all requested memory has been freed and that
 * all opened backing-store objects have been closed.
 */

EXTERN(long) jpeg_mem_init JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_mem_term JPP((j_common_ptr cinfo));
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jmemmgr.c ===
/*
 * jmemmgr.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the JPEG system-independent memory management
 * routines.  This code is usable across a wide variety of machines; most
 * of the system dependencies have been isolated in a separate file.
 * The major functions provided here are:
 *   * pool-based allocation and freeing of memory;
 *   * policy decisions about how to divide available memory among the
 *     virtual arrays;
 *   * control logic for swapping virtual arrays between main memory and
 *     backing storage.
 * The separate system-dependent file provides the actual backing-storage
 * access code, and it contains the policy decision about how much total
 * main memory to use.
 * This file is system-dependent in the sense that some of its functions
 * are unnecessary in some systems.  For example, if there is enough virtual
 * memory so that backing storage will never be used, much of the virtual
 * array control logic could be removed.  (Of course, if you have that much
 * memory then you shouldn't care about a little bit of unused code...)
 */

#define JPEG_INTERNALS
#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef NO_GETENV
#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
extern char * getenv JPP((const char * name));
#endif
#endif


/*
 * Some important notes:
 *   The allocation routines provided here must never return NULL.
 *   They should exit to error_exit if unsuccessful.
 *
 *   It's not a good idea to try to merge the sarray and barray routines,
 *   even though they are textually almost the same, because samples are
 *   usually stored as bytes while coefficients are shorts or ints.  Thus,
 *   in machines where byte pointers have a different representation from
 *   word pointers, the resulting machine code could not be the same.
 */


/*
 * Many machines require storage alignment: longs must start on 4-byte
 * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
 * always returns pointers that are multiples of the worst-case alignment
 * requirement, and we had better do so too.
 * There isn't any really portable way to determine the worst-case alignment
 * requirement.  This module assumes that the alignment requirement is
 * multiples of sizeof(ALIGN_TYPE).
 * By default, we define ALIGN_TYPE as double.  This is necessary on some
 * workstations (where doubles really do need 8-byte alignment) and will work
 * fine on nearly everything.  If your machine has lesser alignment needs,
 * you can save a few bytes by making ALIGN_TYPE smaller.
 * The only place I know of where this will NOT work is certain Macintosh
 * 680x0 compilers that define double as a 10-byte IEEE extended float.
 * Doing 10-byte alignment is counterproductive because longwords won't be
 * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
 * such a compiler.
 */

#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
#define ALIGN_TYPE  double
#endif


/*
 * We allocate objects from "pools", where each pool is gotten with a single
 * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
 * overhead within a pool, except for alignment padding.  Each pool has a
 * header with a link to the next pool of the same class.
 * Small and large pool headers are identical except that the latter's
 * link pointer must be FAR on 80x86 machines.
 * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
 * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
 * of the alignment requirement of ALIGN_TYPE.
 */

typedef union small_pool_struct * small_pool_ptr;

typedef union small_pool_struct {
  struct {
    small_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} small_pool_hdr;

typedef union large_pool_struct FAR * large_pool_ptr;

typedef union large_pool_struct {
  struct {
    large_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} large_pool_hdr;


/*
 * Here is the full definition of a memory manager object.
 */

typedef struct {
  struct jpeg_memory_mgr pub;	/* public fields */

  /* Each pool identifier (lifetime class) names a linked list of pools. */
  small_pool_ptr small_list[JPOOL_NUMPOOLS];
  large_pool_ptr large_list[JPOOL_NUMPOOLS];

  /* Since we only have one lifetime class of virtual arrays, only one
   * linked list is necessary (for each datatype).  Note that the virtual
   * array control blocks being linked together are actually stored somewhere
   * in the small-pool list.
   */
  jvirt_sarray_ptr virt_sarray_list;
  jvirt_barray_ptr virt_barray_list;

  /* This counts total space obtained from jpeg_get_small/large */
  size_t total_space_allocated;

  /* alloc_sarray and alloc_barray set this value for use by virtual
   * array routines.
   */
  JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
} my_memory_mgr;

typedef my_memory_mgr * my_mem_ptr;


/*
 * The control blocks for virtual arrays.
 * Note that these blocks are allocated in the "small" pool area.
 * System-dependent info for the associated backing store (if any) is hidden
 * inside the backing_store_info struct.
 */

struct jvirt_sarray_control {
  JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};

struct jvirt_barray_control {
  JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_barray_ptr next;	/* link to next virtual barray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};


#ifdef MEM_STATS		/* optional extra stuff for statistics */

LOCAL(void)
print_mem_stats (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;

  /* Since this is only a debugging stub, we can cheat a little by using
   * fprintf directly rather than going through the trace message code.
   * This is helpful because message parm array can't handle longs.
   */
  fprintf(stderr, "Freeing pool %d, total space = %ld\n",
	  pool_id, mem->total_space_allocated);

  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
       lhdr_ptr = lhdr_ptr->hdr.next) {
    fprintf(stderr, "  Large chunk used %ld\n",
	    (long) lhdr_ptr->hdr.bytes_used);
  }

  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
       shdr_ptr = shdr_ptr->hdr.next) {
    fprintf(stderr, "  Small chunk used %ld free %ld\n",
	    (long) shdr_ptr->hdr.bytes_used,
	    (long) shdr_ptr->hdr.bytes_left);
  }
}

#endif /* MEM_STATS */


LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
}


/*
 * Allocation of "small" objects.
 *
 * For these, we use pooled storage.  When a new pool must be created,
 * we try to get enough space for the current request plus a "slop" factor,
 * where the slop will be the amount of leftover space in the new pool.
 * The speed vs. space tradeoff is largely determined by the slop values.
 * A different slop value is provided for each pool class (lifetime),
 * and we also distinguish the first pool of a class from later ones.
 * NOTE: the values given work fairly well on both 16- and 32-bit-int
 * machines, but may be too small if longs are 64 bits or more.
 */

static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
{
	1600,			/* first PERMANENT pool */
	16000			/* first IMAGE pool */
};

static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
{
	0,			/* additional PERMANENT pools */
	5000			/* additional IMAGE pools */
};

#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
  prev_hdr_ptr = NULL;
  hdr_ptr = mem->small_list[pool_id];
  while (hdr_ptr != NULL) {
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
    hdr_ptr = hdr_ptr->hdr.next;
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      slop = first_pool_slop[pool_id];
    else
      slop = extra_pool_slop[pool_id];
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
      if (hdr_ptr != NULL)
	break;
      slop /= 2;
      if (slop < MIN_SLOP)	/* give up when it gets real small */
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
    }
    mem->total_space_allocated += min_request + slop;
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
    hdr_ptr->hdr.bytes_used = 0;
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      mem->small_list[pool_id] = hdr_ptr;
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
  hdr_ptr->hdr.bytes_used += sizeofobject;
  hdr_ptr->hdr.bytes_left -= sizeofobject;

  return (void *) data_ptr;
}


/*
 * Allocation of "large" objects.
 *
 * The external semantics of these are the same as "small" objects,
 * except that FAR pointers are used on 80x86.  However the pool
 * management heuristics are quite different.  We assume that each
 * request is large enough that it may as well be passed directly to
 * jpeg_get_large; the pool management just links everything together
 * so that we can free it all on demand.
 * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 * structures.  The routines that create these structures (see below)
 * deliberately bunch rows together to ensure a large request size.
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
  hdr_ptr->hdr.bytes_left = 0;
  mem->large_list[pool_id] = hdr_ptr;

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
}


/*
 * Creation of 2-D sample arrays.
 * The pointers are in near heap, the samples themselves in FAR heap.
 *
 * To minimize allocation overhead and to allow I/O of large contiguous
 * blocks, we allocate the sample rows in groups of as many rows as possible
 * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 * NB: the virtual array control routines, later in this file, know about
 * this chunking of rows.  The rowsperchunk value is left in the mem manager
 * object so that it can be saved away if this sarray is the workspace for
 * a virtual array.
 */

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JSAMPARRAY result;
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += samplesperrow;
    }
  }

  return result;
}


/*
 * Creation of 2-D coefficient-block arrays.
 * This is essentially the same as the code for sample arrays, above.
 */

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JBLOCKARRAY result;
  JBLOCKROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += blocksperrow;
    }
  }

  return result;
}


/*
 * About virtual array management:
 *
 * The above "normal" array routines are only used to allocate strip buffers
 * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 * are handled as "virtual" arrays.  The array is still accessed a strip at a
 * time, but the memory manager must save the whole array for repeated
 * accesses.  The intended implementation is that there is a strip buffer in
 * memory (as high as is possible given the desired memory limit), plus a
 * backing file that holds the rest of the array.
 *
 * The request_virt_array routines are told the total size of the image and
 * the maximum number of rows that will be accessed at once.  The in-memory
 * buffer must be at least as large as the maxaccess value.
 *
 * The request routines create control blocks but not the in-memory buffers.
 * That is postponed until realize_virt_arrays is called.  At that time the
 * total amount of space needed is known (approximately, anyway), so free
 * memory can be divided up fairly.
 *
 * The access_virt_array routines are responsible for making a specific strip
 * area accessible (after reading or writing the backing file, if necessary).
 * Note that the access routines are told whether the caller intends to modify
 * the accessed strip; during a read-only pass this saves having to rewrite
 * data to disk.  The access routines are also responsible for pre-zeroing
 * any newly accessed rows, if pre-zeroing was requested.
 *
 * In current usage, the access requests are usually for nonoverlapping
 * strips; that is, successive access start_row numbers differ by exactly
 * num_rows = maxaccess.  This means we can get good performance with simple
 * buffer dump/reload logic, by making the in-memory buffer be a multiple
 * of the access height; then there will never be accesses across bufferload
 * boundaries.  The code will still work with overlapping access requests,
 * but it doesn't handle bufferload overlaps very efficiently.
 */


METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->samplesperrow = samplesperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
  mem->virt_sarray_list = result;

  return result;
}


METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->blocksperrow = blocksperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
  mem->virt_barray_list = result;

  return result;
}


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  long space_per_minheight, maximum_space, avail_mem;
  long minheights, max_minheights;
  jvirt_sarray_ptr sptr;
  jvirt_barray_ptr bptr;

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
  maximum_space = 0;
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) sptr->maxaccess *
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
      maximum_space += (long) sptr->rows_in_array *
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_minheight += (long) bptr->maxaccess *
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
      maximum_space += (long) bptr->rows_in_array *
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
    }
  }

  if (space_per_minheight <= 0)
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
				 mem->total_space_allocated);

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
    max_minheights = 1000000000L;
  else {
    max_minheights = avail_mem / space_per_minheight;
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
      max_minheights = 1;
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
				(long) sptr->rows_in_array *
				(long) sptr->samplesperrow *
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
      sptr->cur_start_row = 0;
      sptr->first_undef_row = 0;
      sptr->dirty = FALSE;
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
      if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
				(long) bptr->rows_in_array *
				(long) bptr->blocksperrow *
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
      bptr->cur_start_row = 0;
      bptr->first_undef_row = 0;
      bptr->dirty = FALSE;
    }
  }
}


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


METHODDEF(JSAMPARRAY)
access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_sarray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;	/* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


METHODDEF(JBLOCKARRAY)
access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
      ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_barray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
    if (ptr->first_undef_row < start_row) {
      if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
      undef_row = start_row;	/* but reader is allowed to read ahead */
    } else {
      undef_row = ptr->first_undef_row;
    }
    if (writable)
      ptr->first_undef_row = end_row;
    if (ptr->pre_zero) {
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
      end_row -= ptr->cur_start_row;
      while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


/*
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

#ifdef MEM_STATS
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
      if (sptr->b_s_open) {	/* there may be no backing store */
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
      }
    }
    mem->virt_sarray_list = NULL;
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
      if (bptr->b_s_open) {	/* there may be no backing store */
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
      }
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
  mem->large_list[pool_id] = NULL;

  while (lhdr_ptr != NULL) {
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
    space_freed = lhdr_ptr->hdr.bytes_used +
		  lhdr_ptr->hdr.bytes_left +
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
  mem->small_list[pool_id] = NULL;

  while (shdr_ptr != NULL) {
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
    space_freed = shdr_ptr->hdr.bytes_used +
		  shdr_ptr->hdr.bytes_left +
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}


/*
 * Close up shop entirely.
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
  int pool;

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
  cinfo->mem = NULL;		/* ensures I will be called only once */

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
}


/*
 * Memory manager initialization.
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */

  /* Check for configuration errors.
   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
   * doesn't reflect any real hardware alignment requirement.
   * The test is a little tricky: for X>0, X and X-1 have no one-bits
   * in common if and only if X is a power of 2, ie has only one one-bit.
   * Some compilers may give an "unreachable code" warning here; ignore it.
   */
  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));

  if (mem == NULL) {
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
  mem->pub.alloc_large = alloc_large;
  mem->pub.alloc_sarray = alloc_sarray;
  mem->pub.alloc_barray = alloc_barray;
  mem->pub.request_virt_sarray = request_virt_sarray;
  mem->pub.request_virt_barray = request_virt_barray;
  mem->pub.realize_virt_arrays = realize_virt_arrays;
  mem->pub.access_virt_sarray = access_virt_sarray;
  mem->pub.access_virt_barray = access_virt_barray;
  mem->pub.free_pool = free_pool;
  mem->pub.self_destruct = self_destruct;

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
    mem->large_list[pool] = NULL;
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;

  mem->total_space_allocated = SIZEOF(my_memory_mgr);

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;

  /* Check for an environment variable JPEGMEM; if found, override the
   * default max_memory setting from jpeg_mem_init.  Note that the
   * surrounding application may again override this value.
   * If your system doesn't support getenv(), define NO_GETENV to disable
   * this feature.
   */
#ifndef NO_GETENV
  { char * memenv;

    if ((memenv = getenv("JPEGMEM")) != NULL) {
      char ch = 'x';

      if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
	if (ch == 'm' || ch == 'M')
	  max_to_use *= 1000L;
	mem->pub.max_memory_to_use = max_to_use * 1000L;
      }
    }
  }
#endif

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jmorecfg.h ===
/*
 * jmorecfg.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains additional configuration options that customize the
 * JPEG software for special applications or support machine-dependent
 * optimizations.  Most users will not need to touch this file.
 */


/*
 * Define BITS_IN_JSAMPLE as either
 *   8   for 8-bit sample values (the usual setting)
 *   12  for 12-bit sample values
 * Only 8 and 12 are legal data precisions for lossy JPEG according to the
 * JPEG standard, and the IJG code does not support anything else!
 * We do not support run-time selection of data precision, sorry.
 */

#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */


/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of the JPEG spec, set this to 255.  However, darn
 * few applications need more than 4 channels (maybe 5 for CMYK + alpha
 * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10	/* maximum number of image components */


/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JSAMPLE;
#ifdef CHAR_IS_UNSIGNED
#define GETJSAMPLE(value)  ((int) (value))
#else
#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

#define MAXJSAMPLE	255
#define CENTERJSAMPLE	128

#endif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#define MAXJSAMPLE	4095
#define CENTERJSAMPLE	2048

#endif /* BITS_IN_JSAMPLE == 12 */


/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;


/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JOCTET;
#ifdef CHAR_IS_UNSIGNED
#define GETJOCTET(value)  (value)
#else
#define GETJOCTET(value)  ((value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */


/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */
#ifndef _BASETSD_H_		/* basetsd.h correctly defines [U]INT[8|16|32] */

/* UINT8 must hold at least the values 0..255. */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char UINT8;
#else /* not HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char UINT8;
#else /* not CHAR_IS_UNSIGNED */
typedef short UINT8;
#endif /* CHAR_IS_UNSIGNED */
#endif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values. */

#if !defined(XMD_H)     /* X11/xmd.h correctly defines INT32 */
typedef long INT32;
#endif
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */


/* These macros are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions;
 * in particular, you'll need to do that to make the library a Windows DLL.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

/* a function called through method pointers: */
#define METHODDEF(type)               static type
/* a function used only in its module: */
#define LOCAL(type)           static type
/* a function referenced thru EXTERNs: */
#define GLOBAL(type)          type
/* a reference to a GLOBAL function: */

#define EXTERN(type)          extern type

/* This macro is used to declare a "method", that is, a function pointer.
 * We want to supply prototype parameters if the compiler can cope.
 * Note that the arglist parameter must be parenthesized!
 * Again, you can customize this if you need special linkage keywords.
 */

#ifdef HAVE_PROTOTYPES
#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
#else
#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
#endif


/* Here is the pseudo-keyword for declaring pointers that must be "far"
 * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
 * by just saying "FAR *" where such a pointer is needed.  In a few places
 * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
 */

#ifndef WIN32 /* don't mess with this at all */
#ifdef NEED_FAR_POINTERS
#define FAR  far
#else
#define FAR
#endif
#endif

#if WINNT   // For some reason wants FAR ??? -scousens
#ifndef FAR // windows.h has not been included
#ifdef NEED_FAR_POINTERS
#define FAR  far
#else
#define FAR
#endif
#endif
#endif

/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

#ifndef HAVE_BOOLEAN
typedef int boolean;
#endif
#ifndef FALSE			/* in case these macros already exist */
#define FALSE	0		/* values of boolean */
#endif
#ifndef TRUE
#define TRUE	1
#endif


/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS


/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
#define DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */

/* Encoder capability options: */

#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define C_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 * The exact same statements apply for progressive JPEG: the default tables
 * don't work for progressive mode.  (This may get fixed, however.)
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
#define IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */

/* more capability options later, no doubt */


/*
 * Ordering of RGB data in scanlines passed to or from the application.
 * If your application wants to deal with data in the order B,G,R, just
 * change these macros.  You can also deal with formats such as R,G,B,X
 * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
 * the offsets will also change the order in which colormap data is organized.
 * RESTRICTIONS:
 * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
 * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
 *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
 * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
 *    is not 3 (they don't understand about dummy color components!).  So you
 *    can't use color quantization if you change that value.
 */

#define RGB_RED		0	/* Offset of Red in an RGB scanline element */
#define RGB_GREEN	1	/* Offset of Green */
#define RGB_BLUE	2	/* Offset of Blue */
#define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */


/* Definitions for speed-related optimizations. */


/* If your compiler supports inline functions, define INLINE
 * as the inline keyword; otherwise define it as empty.
 */

#ifndef INLINE
#ifdef __GNUC__			/* for instance, GNU C knows about inline */
#define INLINE __inline__
#endif
#ifndef INLINE
#define INLINE			/* default is to define it as empty */
#endif
#endif


/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#define MULTIPLIER  short

#ifndef MULTIPLIER
#define MULTIPLIER  int		/* type for fastest integer multiply */
#endif


/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 * Typically, float is faster in ANSI C compilers, while double is faster in
 * pre-ANSI compilers (because they insist on converting to double anyway).
 * The code below therefore chooses float if we have ANSI-style prototypes.
 */

#ifndef FAST_FLOAT
#ifdef HAVE_PROTOTYPES
#define FAST_FLOAT  float
#else
#define FAST_FLOAT  double
#endif
#endif

#endif /* JPEG_INTERNAL_OPTIONS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jpeglib.h ===
/*
 * jpeglib.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the application interface for the JPEG library.
 * Most applications using the library need only include this file,
 * and perhaps jerror.h if they want to know the exact error codes.
 */

#ifndef JPEGLIB_H
#define JPEGLIB_H

/*
 * First we include the configuration files that record how this
 * installation of the JPEG library is set up.  jconfig.h can be
 * generated automatically for many systems.  jmorecfg.h contains
 * manual configuration options that most people need not worry about.
 */

#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
#include "jconfig.h"		/* widely used configuration options */
#endif
#include "jmorecfg.h"		/* seldom changed options */


/* Version ID for the JPEG library.
 * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
 */

#define JPEG_LIB_VERSION  61	/* Version 6a */


/* Various constants determining the sizes of things.
 * All of these are specified by the JPEG standard, so don't change them
 * if you want to be compatible.
 */

#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
/* The PostScript DCT filter can emit files with many more than 10 blocks/MCU.
 * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
 * to handle it.  We even let you do this from the jconfig.h file.  However,
 * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
 * sometimes emits noncompliant files doesn't mean you should too.
 */
#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
#ifndef D_MAX_BLOCKS_IN_MCU
#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
#endif


/* Data structures for images (arrays of samples and of DCT coefficients).
 * On 80x86 machines, the image arrays are too big for near pointers,
 * but the pointer arrays can fit in near memory.
 */

typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */

typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */


/* Types for JPEG compression parameters and working tables. */


/* DCT coefficient quantization tables. */

typedef struct {
  /* This array gives the coefficient quantizers in natural array order
   * (not the zigzag order in which they are stored in a JPEG DQT marker).
   * CAUTION: IJG versions prior to v6a kept this array in zigzag order.
   */
  UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JQUANT_TBL;


/* Huffman coding tables. */

typedef struct {
  /* These two fields directly represent the contents of a JPEG DHT marker */
  UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
				/* length k bits; bits[0] is unused */
  UINT8 huffval[256];		/* The symbols, in order of incr code length */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JHUFF_TBL;


/* Basic info about one component (color channel). */

typedef struct {
  /* These values are fixed over the whole image. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOF marker. */
  int component_id;		/* identifier for this component (0..255) */
  int component_index;		/* its index in SOF or cinfo->comp_info[] */
  int h_samp_factor;		/* horizontal sampling factor (1..4) */
  int v_samp_factor;		/* vertical sampling factor (1..4) */
  int quant_tbl_no;		/* quantization table selector (0..3) */
  /* These values may vary between scans. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOS marker. */
  /* The decompressor output side may not use these variables. */
  int dc_tbl_no;		/* DC entropy table selector (0..3) */
  int ac_tbl_no;		/* AC entropy table selector (0..3) */
  
  /* Remaining fields should be treated as private by applications. */
  
  /* These values are computed during compression or decompression startup: */
  /* Component's size in DCT blocks.
   * Any dummy blocks added to complete an MCU are not counted; therefore
   * these values do not depend on whether a scan is interleaved or not.
   */
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;
  /* Size of a DCT block in samples.  Always DCTSIZE for compression.
   * For decompression this is the size of the output from one DCT block,
   * reflecting any scaling we choose to apply during the IDCT step.
   * Values of 1,2,4,8 are likely to be supported.  Note that different
   * components may receive different IDCT scalings.
   */
  int DCT_scaled_size;
  /* The downsampled dimensions are the component's actual, unpadded number
   * of samples at the main buffer (preprocessing/compression interface), thus
   * downsampled_width = ceil(image_width * Hi/Hmax)
   * and similarly for height.  For decompression, IDCT scaling is included, so
   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
   */
  JDIMENSION downsampled_width;	 /* actual width in samples */
  JDIMENSION downsampled_height; /* actual height in samples */
  /* This flag is used only for decompression.  In cases where some of the
   * components will be ignored (eg grayscale output from YCbCr image),
   * we can skip most computations for the unused components.
   */
  boolean component_needed;	/* do we need the value of this component? */

  /* These values are computed before starting a scan of the component. */
  /* The decompressor output side may not use these variables. */
  int MCU_width;		/* number of blocks per MCU, horizontally */
  int MCU_height;		/* number of blocks per MCU, vertically */
  int MCU_blocks;		/* MCU_width * MCU_height */
  int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
  int last_col_width;		/* # of non-dummy blocks across in last MCU */
  int last_row_height;		/* # of non-dummy blocks down in last MCU */

  /* Saved quantization table for component; NULL if none yet saved.
   * See jdinput.c comments about the need for this information.
   * This field is currently used only for decompression.
   */
  JQUANT_TBL * quant_table;

  /* Private per-component storage for DCT or IDCT subsystem. */
  void * dct_table;
} jpeg_component_info;


/* The script for encoding a multiple-scan file is an array of these: */

typedef struct {
  int comps_in_scan;		/* number of components encoded in this scan */
  int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
  int Ss, Se;			/* progressive JPEG spectral selection parms */
  int Ah, Al;			/* progressive JPEG successive approx. parms */
} jpeg_scan_info;


/* Known color spaces. */

typedef enum {
	JCS_UNKNOWN,		/* error/unspecified */
	JCS_GRAYSCALE,		/* monochrome */
	JCS_RGB,		/* red/green/blue */
	JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
	JCS_CMYK,		/* C/M/Y/K */
	JCS_YCCK		/* Y/Cb/Cr/K */
} J_COLOR_SPACE;

/* DCT/IDCT algorithm options. */

typedef enum {
	JDCT_ISLOW,		/* slow but accurate integer algorithm */
	JDCT_IFAST,		/* faster, less accurate integer method */
	JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
} J_DCT_METHOD;

#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
#define JDCT_DEFAULT  JDCT_ISLOW
#endif
#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
#define JDCT_FASTEST  JDCT_IFAST
#endif

/* Dithering options for decompression. */

typedef enum {
	JDITHER_NONE,		/* no dithering */
	JDITHER_ORDERED,	/* simple ordered dither */
	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
} J_DITHER_MODE;


/* Common fields between JPEG compression and decompression master structs. */

#define jpeg_common_fields \
  struct jpeg_error_mgr * err;	/* Error handler module */\
  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
  boolean is_decompressor;	/* so common code can tell which is which */\
  int global_state		/* for checking call sequence validity */

/* Routines that are to be used by both halves of the library are declared
 * to receive a pointer to this structure.  There are no actual instances of
 * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
 */
struct jpeg_common_struct {
  jpeg_common_fields;		/* Fields common to both master struct types */
  /* Additional fields follow in an actual jpeg_compress_struct or
   * jpeg_decompress_struct.  All three structs must agree on these
   * initial fields!  (This would be a lot cleaner in C++.)
   */
};

typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;


/* Master record for a compression instance */

struct jpeg_compress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */

  /* Destination for compressed data */
  struct jpeg_destination_mgr * dest;

  /* Description of source image --- these fields must be filled in by
   * outer application before starting compression.  in_color_space must
   * be correct before you can even call jpeg_set_defaults().
   */

  JDIMENSION image_width;	/* input image width */
  JDIMENSION image_height;	/* input image height */
  int input_components;		/* # of color components in input image */
  J_COLOR_SPACE in_color_space;	/* colorspace of input image */

  double input_gamma;		/* image gamma of input image */

  /* Compression parameters --- these fields must be set before calling
   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
   * initialize everything to reasonable defaults, then changing anything
   * the application specifically wants to change.  That way you won't get
   * burnt when new parameters are added.  Also note that there are several
   * helper routines to simplify changing parameters.
   */

  int data_precision;		/* bits of precision in image data */

  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */
  
  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */
  
  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */
  
  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  int num_scans;		/* # of entries in scan_info array */
  const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
  /* The default value of scan_info is NULL, which causes a single-scan
   * sequential JPEG file to be emitted.  To create a multi-scan file,
   * set num_scans and scan_info to point to an array of scan definitions.
   */

  boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
  boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
  int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
  J_DCT_METHOD dct_method;	/* DCT algorithm selector */

  /* The restart interval can be specified in absolute MCUs by setting
   * restart_interval, or in MCU rows by setting restart_in_rows
   * (in which case the correct restart_interval will be figured
   * for each scan).
   */
  unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
  int restart_in_rows;		/* if > 0, MCU rows per restart interval */

  /* Parameters controlling emission of special markers. */

  boolean write_JFIF_header;	/* should a JFIF marker be written? */
  /* These three values are not used by the JPEG code, merely copied */
  /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
  /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
  /* ratio is defined by X_density/Y_density even when density_unit=0. */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean write_Adobe_marker;	/* should an Adobe marker be written? */
  
  /* State variable: index of next scanline to be written to
   * jpeg_write_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (next_scanline < image_height)".
   */

  JDIMENSION next_scanline;	/* 0 .. image_height-1  */

  /* Remaining fields are known throughout compressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during compression startup
   */
  boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
  /* The coefficient controller receives data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCTSIZE sample rows of each component in an
   * "iMCU" (interleaved MCU) row.
   */
  
  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */
  
  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
  
  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[C_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /*
   * Links to compression subobjects (methods and private variables of modules)
   */
  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
};


/* Master record for a decompression instance */

struct jpeg_decompress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */

  /* Source of compressed data */
  struct jpeg_source_mgr * src;

  /* Basic description of image --- filled in by jpeg_read_header(). */
  /* Application may inspect these values to decide how to process image. */

  JDIMENSION image_width;	/* nominal image width (from SOF marker) */
  JDIMENSION image_height;	/* nominal image height */
  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  /* Decompression processing parameters --- these fields must be set before
   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
   * them to default values.
   */

  J_COLOR_SPACE out_color_space; /* colorspace for output */

  unsigned int scale_num, scale_denom; /* fraction by which to scale image */

  double output_gamma;		/* image gamma wanted in output */

  boolean buffered_image;	/* TRUE=multiple output passes */
  boolean raw_data_out;		/* TRUE=downsampled data wanted */

  J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
  boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
  boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */

  boolean quantize_colors;	/* TRUE=colormapped output wanted */
  /* the following are ignored if not quantize_colors: */
  J_DITHER_MODE dither_mode;	/* type of color dithering to use */
  boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
  int desired_number_of_colors;	/* max # colors to use in created colormap */
  /* these are significant only in buffered-image mode: */
  boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
  boolean enable_external_quant;/* enable future use of external colormap */
  boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */

  /* Description of actual output image that will be returned to application.
   * These fields are computed by jpeg_start_decompress().
   * You can also use jpeg_calc_output_dimensions() to determine these values
   * in advance of calling jpeg_start_decompress().
   */

  JDIMENSION output_width;	/* scaled image width */
  JDIMENSION output_height;	/* scaled image height */
  int out_color_components;	/* # of color components in out_color_space */
  int output_components;	/* # of color components returned */
  /* output_components is 1 (a colormap index) when quantizing colors;
   * otherwise it equals out_color_components.
   */
  int rec_outbuf_height;	/* min recommended height of scanline buffer */
  /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
   * high, space and time will be wasted due to unnecessary data copying.
   * Usually rec_outbuf_height will be 1 or 2, at most 4.
   */

  /* When quantizing colors, the output colormap is described by these fields.
   * The application can supply a colormap by setting colormap non-NULL before
   * calling jpeg_start_decompress; otherwise a colormap is created during
   * jpeg_start_decompress or jpeg_start_output.
   * The map has out_color_components rows and actual_number_of_colors columns.
   */
  int actual_number_of_colors;	/* number of entries in use */
  JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */

  /* State variables: these variables indicate the progress of decompression.
   * The application may examine these but must not modify them.
   */

  /* Row index of next scanline to be read from jpeg_read_scanlines().
   * Application may use this to control its processing loop, e.g.,
   * "while (output_scanline < output_height)".
   */
  JDIMENSION output_scanline;	/* 0 .. output_height-1  */

  /* Current input scan number and number of iMCU rows completed in scan.
   * These indicate the progress of the decompressor input side.
   */
  int input_scan_number;	/* Number of SOS markers seen so far */
  JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */

  /* The "output scan number" is the notional scan being displayed by the
   * output side.  The decompressor will not allow output scan/row number
   * to get ahead of input scan/row, but it can fall arbitrarily far behind.
   */
  int output_scan_number;	/* Nominal scan number being displayed */
  JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */

  /* Current progression status.  coef_bits[c][i] indicates the precision
   * with which component c's DCT coefficient i (in zigzag order) is known.
   * It is -1 when no data has yet been received, otherwise it is the point
   * transform (shift) value for the most recent scan of the coefficient
   * (thus, 0 at completion of the progression).
   * This pointer is NULL when reading a non-progressive file.
   */
  int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */

  /* Internal JPEG parameters --- the application usually need not look at
   * these fields.  Note that the decompressor output side may not use
   * any parameters that can change between scans.
   */

  /* Quantization and Huffman tables are carried forward across input
   * datastreams when processing abbreviated JPEG datastreams.
   */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  /* These parameters are never carried across datastreams, since they
   * are given in SOF/SOS markers or defined to be reset by SOI.
   */

  int data_precision;		/* bits of precision in image data */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */

  /* These fields record data obtained from optional markers recognized by
   * the JPEG library.
   */
  boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
  /* Data copied from JFIF marker: */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
  UINT8 Adobe_transform;	/* Color transform code from Adobe marker */

  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */

  /* Remaining fields are known throughout decompressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during decompression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
  /* The coefficient controller's input and output progress is measured in
   * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
   * in fully interleaved JPEG scans, but are used whether the scan is
   * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
   * rows of each component.  Therefore, the IDCT output contains
   * v_samp_factor*DCT_scaled_size sample rows of a component per iMCU row.
   */

  JSAMPLE * sample_range_limit; /* table for fast range-limiting */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   * Note that the decompressor output side must not use these fields.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[D_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /* This field is shared between entropy decoder and marker parser.
   * It is either zero or the code of a JPEG marker that has been
   * read from the data source, but has not yet been processed.
   */
  int unread_marker;

  /*
   * Links to decompression subobjects (methods, private variables of modules)
   */
  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_input_controller * inputctl;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};


/* "Object" declarations for JPEG modules that may be supplied or called
 * directly by the surrounding application.
 * As with all objects in the JPEG library, these structs only define the
 * publicly visible methods and state variables of a module.  Additional
 * private fields may exist after the public ones.
 */


/* Error handler object */

struct jpeg_error_mgr {
  /* Error exit handler: does not return to caller */
  JMETHOD(void, error_exit, (j_common_ptr cinfo));
  /* Conditionally emit a trace or warning message */
  JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
  /* Routine that actually outputs a trace or error message */
  JMETHOD(void, output_message, (j_common_ptr cinfo));
  /* Format a message string for the most recent JPEG error or message */
  JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
  /* Reset error state variables at start of a new image */
  JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
  
  /* The message ID code and any parameters are saved here.
   * A message can have one string parameter or up to 8 int parameters.
   */
  int msg_code;
#define JMSG_STR_PARM_MAX  80
  union {
    int i[8];
    char s[JMSG_STR_PARM_MAX];
  } msg_parm;
  
  /* Standard state variables for error facility */
  
  int trace_level;		/* max msg_level that will be displayed */
  
  /* For recoverable corrupt-data errors, we emit a warning message,
   * but keep going unless emit_message chooses to abort.  emit_message
   * should count warnings in num_warnings.  The surrounding application
   * can check for bad data by seeing if num_warnings is nonzero at the
   * end of processing.
   */
  long num_warnings;		/* number of corrupt-data warnings */

  /* These fields point to the table(s) of error message strings.
   * An application can change the table pointer to switch to a different
   * message list (typically, to change the language in which errors are
   * reported).  Some applications may wish to add additional error codes
   * that will be handled by the JPEG library error mechanism; the second
   * table pointer is used for this purpose.
   *
   * First table includes all errors generated by JPEG library itself.
   * Error code 0 is reserved for a "no such error string" message.
   */
  const char * const * jpeg_message_table; /* Library errors */
  int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
  /* Second table can be added by application (see cjpeg/djpeg for example).
   * It contains strings numbered first_addon_message..last_addon_message.
   */
  const char * const * addon_message_table; /* Non-library errors */
  int first_addon_message;	/* code for first string in addon table */
  int last_addon_message;	/* code for last string in addon table */
};


/* Progress monitor object */

struct jpeg_progress_mgr {
  JMETHOD(void, progress_monitor, (j_common_ptr cinfo));

  long pass_counter;		/* work units completed in this pass */
  long pass_limit;		/* total number of work units in this pass */
  int completed_passes;		/* passes completed so far */
  int total_passes;		/* total number of passes expected */
};


/* Data destination object for compression */

struct jpeg_destination_mgr {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */

  JMETHOD(void, init_destination, (j_compress_ptr cinfo));
  JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
  JMETHOD(void, term_destination, (j_compress_ptr cinfo));
};


/* Data source object for decompression */

struct jpeg_source_mgr {
  const JOCTET * next_input_byte; /* => next byte to read from buffer */
  size_t bytes_in_buffer;	/* # of bytes remaining in buffer */

  JMETHOD(void, init_source, (j_decompress_ptr cinfo));
  JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
  JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
  JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
  JMETHOD(void, term_source, (j_decompress_ptr cinfo));
};


/* Memory manager object.
 * Allocates "small" objects (a few K total), "large" objects (tens of K),
 * and "really big" objects (virtual arrays with backing store if needed).
 * The memory manager does not allow individual objects to be freed; rather,
 * each created object is assigned to a pool, and whole pools can be freed
 * at once.  This is faster and more convenient than remembering exactly what
 * to free, especially where malloc()/free() are not too speedy.
 * NB: alloc routines never return NULL.  They exit to error_exit if not
 * successful.
 */

#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
#define JPOOL_NUMPOOLS	2

typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;


struct jpeg_memory_mgr {
  /* Method pointers */
  JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
				size_t sizeofobject));
  JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
				     size_t sizeofobject));
  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
				     JDIMENSION samplesperrow,
				     JDIMENSION numrows));
  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
				      JDIMENSION blocksperrow,
				      JDIMENSION numrows));
  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION samplesperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION blocksperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
					   jvirt_sarray_ptr ptr,
					   JDIMENSION start_row,
					   JDIMENSION num_rows,
					   boolean writable));
  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
					    jvirt_barray_ptr ptr,
					    JDIMENSION start_row,
					    JDIMENSION num_rows,
					    boolean writable));
  JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
  JMETHOD(void, self_destruct, (j_common_ptr cinfo));

  /* Limit on memory allocation for this JPEG object.  (Note that this is
   * merely advisory, not a guaranteed maximum; it only affects the space
   * used for virtual-array buffers.)  May be changed by outer application
   * after creating the JPEG object.
   */
  long max_memory_to_use;
};


/* Routine signature for application-supplied marker processing methods.
 * Need not pass marker code since it is stored in cinfo->unread_marker.
 */
typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));


/* Declarations for routines called by application.
 * The JPP macro hides prototype parameters from compilers that can't cope.
 * Note JPP requires double parentheses.
 */

#ifdef HAVE_PROTOTYPES
#define JPP(arglist)	arglist
#else
#define JPP(arglist)	()
#endif


/* Short forms of external names for systems with brain-damaged linkers.
 * We shorten external names to be unique in the first six letters, which
 * is good enough for all known systems.
 * (If your compiler itself needs names to be unique in less than 15 
 * characters, you are out of luck.  Get a better compiler.)
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_error		jStdError
#define jpeg_CreateCompress	jCreaCompress
#define jpeg_CreateDecompress	jCreaDecompress
#define jpeg_destroy_compress	jDestCompress
#define jpeg_destroy_decompress	jDestDecompress
#define jpeg_stdio_dest		jStdDest
#define jpeg_stdio_src		jStdSrc
#define jpeg_set_defaults	jSetDefaults
#define jpeg_set_colorspace	jSetColorspace
#define jpeg_default_colorspace	jDefColorspace
#define jpeg_set_quality	jSetQuality
#define jpeg_set_linear_quality	jSetLQuality
#define jpeg_add_quant_table	jAddQuantTable
#define jpeg_quality_scaling	jQualityScaling
#define jpeg_simple_progression	jSimProgress
#define jpeg_suppress_tables	jSuppressTables
#define jpeg_alloc_quant_table	jAlcQTable
#define jpeg_alloc_huff_table	jAlcHTable
#define jpeg_start_compress	jStrtCompress
#define jpeg_write_scanlines	jWrtScanlines
#define jpeg_finish_compress	jFinCompress
#define jpeg_write_raw_data	jWrtRawData
#define jpeg_write_marker	jWrtMarker
#define jpeg_write_tables	jWrtTables
#define jpeg_read_header	jReadHeader
#define jpeg_start_decompress	jStrtDecompress
#define jpeg_read_scanlines	jReadScanlines
#define jpeg_finish_decompress	jFinDecompress
#define jpeg_read_raw_data	jReadRawData
#define jpeg_has_multiple_scans	jHasMultScn
#define jpeg_start_output	jStrtOutput
#define jpeg_finish_output	jFinOutput
#define jpeg_input_complete	jInComplete
#define jpeg_new_colormap	jNewCMap
#define jpeg_consume_input	jConsumeInput
#define jpeg_calc_output_dimensions	jCalcDimensions
#define jpeg_set_marker_processor	jSetMarker
#define jpeg_read_coefficients	jReadCoefs
#define jpeg_write_coefficients	jWrtCoefs
#define jpeg_copy_critical_parameters	jCopyCrit
#define jpeg_abort_compress	jAbrtCompress
#define jpeg_abort_decompress	jAbrtDecompress
#define jpeg_abort		jAbort
#define jpeg_destroy		jDestroy
#define jpeg_resync_to_restart	jResyncRestart
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Default error-management setup */
EXTERN(struct jpeg_error_mgr *) jpeg_std_error
	JPP((struct jpeg_error_mgr * err));

/* Initialization of JPEG compression objects.
 * jpeg_create_compress() and jpeg_create_decompress() are the exported
 * names that applications should call.  These expand to calls on
 * jpeg_CreateCompress and jpeg_CreateDecompress with additional information
 * passed for version mismatch checking.
 * NB: you must set up the error-manager BEFORE calling jpeg_create_xxx.
 */
#define jpeg_create_compress(cinfo) \
    jpeg_CreateCompress((cinfo), JPEG_LIB_VERSION, \
			(size_t) sizeof(struct jpeg_compress_struct))
#define jpeg_create_decompress(cinfo) \
    jpeg_CreateDecompress((cinfo), JPEG_LIB_VERSION, \
			  (size_t) sizeof(struct jpeg_decompress_struct))
EXTERN(void) jpeg_CreateCompress JPP((j_compress_ptr cinfo,
				      int version, size_t structsize));
EXTERN(void) jpeg_CreateDecompress JPP((j_decompress_ptr cinfo,
					int version, size_t structsize));
/* Destruction of JPEG compression objects */
EXTERN(void) jpeg_destroy_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));

/* Standard data source and destination managers: stdio streams. */
/* Caller is responsible for opening the file before and closing after. */
//EXTERN(void) jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
//EXTERN(void) jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));

/* Default parameter setup for compression */
EXTERN(void) jpeg_set_defaults JPP((j_compress_ptr cinfo));
/* Compression parameter setup aids */
EXTERN(void) jpeg_set_colorspace JPP((j_compress_ptr cinfo,
				      J_COLOR_SPACE colorspace));
EXTERN(void) jpeg_default_colorspace JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
				   boolean force_baseline));
EXTERN(void) jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
					  int scale_factor,
					  boolean force_baseline));
EXTERN(void) jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
				       const unsigned int *basic_table,
				       int scale_factor,
				       boolean force_baseline));
EXTERN(int) jpeg_quality_scaling JPP((int quality));
EXTERN(void) jpeg_simple_progression JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_suppress_tables JPP((j_compress_ptr cinfo,
				       boolean suppress));
EXTERN(JQUANT_TBL *) jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
EXTERN(JHUFF_TBL *) jpeg_alloc_huff_table JPP((j_common_ptr cinfo));

/* Main entry points for compression */
EXTERN(void) jpeg_start_compress JPP((j_compress_ptr cinfo,
				      boolean write_all_tables));
EXTERN(JDIMENSION) jpeg_write_scanlines JPP((j_compress_ptr cinfo,
					     JSAMPARRAY scanlines,
					     JDIMENSION num_lines));
EXTERN(void) jpeg_finish_compress JPP((j_compress_ptr cinfo));

/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
EXTERN(JDIMENSION) jpeg_write_raw_data JPP((j_compress_ptr cinfo,
					    JSAMPIMAGE data,
					    JDIMENSION num_lines));

/* Write a special marker.  See libjpeg.doc concerning safe usage. */
EXTERN(void) jpeg_write_marker
	JPP((j_compress_ptr cinfo, int marker,
	     const JOCTET * dataptr, unsigned int datalen));

/* Alternate compression function: just write an abbreviated table file */
EXTERN(void) jpeg_write_tables JPP((j_compress_ptr cinfo));

/* Decompression startup: read start of JPEG datastream to see what's there */
EXTERN(int) jpeg_read_header JPP((j_decompress_ptr cinfo,
				  boolean require_image));
/* Return value is one of: */
#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
#define JPEG_HEADER_OK		1 /* Found valid image datastream */
#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
/* If you pass require_image = TRUE (normal case), you need not check for
 * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
 * JPEG_SUSPENDED is only possible if you use a data source module that can
 * give a suspension return (the stdio source module doesn't).
 */

/* Main entry points for decompression */
EXTERN(boolean) jpeg_start_decompress JPP((j_decompress_ptr cinfo));
EXTERN(JDIMENSION) jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
					    JSAMPARRAY scanlines,
					    JDIMENSION max_lines));
EXTERN(boolean) jpeg_finish_decompress JPP((j_decompress_ptr cinfo));

/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
EXTERN(JDIMENSION) jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
					   JSAMPIMAGE data,
					   JDIMENSION max_lines));

/* Additional entry points for buffered-image mode. */
EXTERN(boolean) jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_start_output JPP((j_decompress_ptr cinfo,
				       int scan_number));
EXTERN(boolean) jpeg_finish_output JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_input_complete JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_new_colormap JPP((j_decompress_ptr cinfo));
EXTERN(int) jpeg_consume_input JPP((j_decompress_ptr cinfo));
/* Return value is one of: */
/* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
#define JPEG_REACHED_EOI	2 /* Reached end of image */
#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */

/* Precalculate output dimensions for current decompression parameters. */
EXTERN(void) jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));

/* Install a special processing method for COM or APPn markers. */
EXTERN(void) jpeg_set_marker_processor
	JPP((j_decompress_ptr cinfo, int marker_code,
	     jpeg_marker_parser_method routine));

/* Read or write raw DCT coefficients --- useful for lossless transcoding. */
EXTERN(jvirt_barray_ptr *) jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_write_coefficients JPP((j_compress_ptr cinfo,
					  jvirt_barray_ptr * coef_arrays));
EXTERN(void) jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
						j_compress_ptr dstinfo));

/* If you choose to abort compression or decompression before completing
 * jpeg_finish_(de)compress, then you need to clean up to release memory,
 * temporary files, etc.  You can just call jpeg_destroy_(de)compress
 * if you're done with the JPEG object, but if you want to clean it up and
 * reuse it, call this:
 */
EXTERN(void) jpeg_abort_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_abort_decompress JPP((j_decompress_ptr cinfo));

/* Generic versions of jpeg_abort and jpeg_destroy that work on either
 * flavor of JPEG object.  These may be more convenient in some places.
 */
EXTERN(void) jpeg_abort JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_destroy JPP((j_common_ptr cinfo));

/* Default restart-marker-resync procedure for use by data source modules */
EXTERN(boolean) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
					    int desired));


/* These marker codes are exported since applications and data source modules
 * are likely to want to use them.
 */

#define JPEG_RST0	0xD0	/* RST0 marker code */
#define JPEG_EOI	0xD9	/* EOI marker code */
#define JPEG_APP0	0xE0	/* APP0 marker code */
#define JPEG_COM	0xFE	/* COM marker code */


/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
 * for structure definitions that are never filled in, keep it quiet by
 * supplying dummy definitions for the various substructures.
 */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
struct jpeg_comp_master { long dummy; };
struct jpeg_c_main_controller { long dummy; };
struct jpeg_c_prep_controller { long dummy; };
struct jpeg_c_coef_controller { long dummy; };
struct jpeg_marker_writer { long dummy; };
struct jpeg_color_converter { long dummy; };
struct jpeg_downsampler { long dummy; };
struct jpeg_forward_dct { long dummy; };
struct jpeg_entropy_encoder { long dummy; };
struct jpeg_decomp_master { long dummy; };
struct jpeg_d_main_controller { long dummy; };
struct jpeg_d_coef_controller { long dummy; };
struct jpeg_d_post_controller { long dummy; };
struct jpeg_input_controller { long dummy; };
struct jpeg_marker_reader { long dummy; };
struct jpeg_entropy_decoder { long dummy; };
struct jpeg_inverse_dct { long dummy; };
struct jpeg_upsampler { long dummy; };
struct jpeg_color_deconverter { long dummy; };
struct jpeg_color_quantizer { long dummy; };
#endif /* JPEG_INTERNALS */
#endif /* INCOMPLETE_TYPES_BROKEN */


/*
 * The JPEG library modules define JPEG_INTERNALS before including this file.
 * The internal structure declarations are read only when that is true.
 * Applications using the library should not include jpegint.h, but may wish
 * to include jerror.h.
 */

#ifdef JPEG_INTERNALS
#include "jpegint.h"		/* fetch private declarations */
#include "jerror.h"		/* fetch error codes too */
#endif

#endif /* JPEGLIB_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jpegint.h ===
/*
 * jpegint.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides common declarations for the various JPEG modules.
 * These declarations are considered internal to the JPEG library; most
 * applications using the library shouldn't need to include this file.
 */


/* Declarations for both compression & decompression */

typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */


/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
				   JSAMPIMAGE input_buf));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* perhaps this should be an array??? */
  JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
			      jpeg_component_info * compptr,
			      JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
			      JDIMENSION start_row, JDIMENSION start_col,
			      JDIMENSION num_blocks));
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  /* write_any_marker is exported for use by applications */
  /* Probably only COM and APPn markers should be written */
  JMETHOD(void, write_any_marker, (j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
};


/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
};

/* Input control module */
struct jpeg_input_controller {
  JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
  JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean has_multiple_scans;	/* True if file has multiple scans */
  boolean eoi_reached;		/* True when EOI has been consumed */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
				 JSAMPIMAGE output_buf));
  /* Pointer to array of coefficient virtual arrays, or NULL if none */
  jvirt_barray_ptr *coef_arrays;
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_consume_input:
   * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;
  /* Application-overridable marker processing methods */
  jpeg_marker_parser_method process_COM;
  jpeg_marker_parser_method process_APPn[16];

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  boolean (__cdecl *decode_mcu)(j_decompress_ptr cinfo,	JBLOCKROW *MCU_data);
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
};


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))


/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_compress_master	jICompress
#define jinit_c_master_control	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_phuff_encoder	jIPHEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_input_controller	jIInCtlr
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_phuff_decoder	jIPHDecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jzero_far		jZeroFar
#define jpeg_zigzag_order	jZIGTable
#define jpeg_natural_order	jZAGTable
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Compression module initialization routines */
EXTERN(void) jinit_compress_master JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_c_master_control JPP((j_compress_ptr cinfo,
					 boolean transcode_only));
EXTERN(void) jinit_c_main_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_phuff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN(void) jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_input_controller JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_phuff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN(void) jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN(long) jdiv_round_up JPP((long a, long b));
EXTERN(long) jround_up JPP((long a, long b));
EXTERN(void) jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				    JSAMPARRAY output_array, int dest_row,
				    int num_rows, JDIMENSION num_cols));
EXTERN(void) jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				  JDIMENSION num_blocks));
EXTERN(void) jzero_far JPP((void FAR * target, size_t bytestozero));
EXTERN(int)  IsMMX JPP((void));

/* Constant tables in jutils.c */
extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */
extern boolean vfMMXMachine;

/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jquant1.c ===
/*
 * jquant1.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 1-pass color quantization (color mapping) routines.
 * These routines provide mapping to a fixed color map using equally spaced
 * color values.  Optional Floyd-Steinberg or ordered dithering is available.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"

#ifdef QUANT_1PASS_SUPPORTED


/*
 * The main purpose of 1-pass quantization is to provide a fast, if not very
 * high quality, colormapped output capability.  A 2-pass quantizer usually
 * gives better visual quality; however, for quantized grayscale output this
 * quantizer is perfectly adequate.  Dithering is highly recommended with this
 * quantizer, though you can turn it off if you really want to.
 *
 * In 1-pass quantization the colormap must be chosen in advance of seeing the
 * image.  We use a map consisting of all combinations of Ncolors[i] color
 * values for the i'th component.  The Ncolors[] values are chosen so that
 * their product, the total number of colors, is no more than that requested.
 * (In most cases, the product will be somewhat less.)
 *
 * Since the colormap is orthogonal, the representative value for each color
 * component can be determined without considering the other components;
 * then these indexes can be combined into a colormap index by a standard
 * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
 * can be precalculated and stored in the lookup table colorindex[].
 * colorindex[i][j] maps pixel value j in component i to the nearest
 * representative value (grid plane) for that component; this index is
 * multiplied by the array stride for component i, so that the
 * index of the colormap entry closest to a given pixel value is just
 *    sum( colorindex[component-number][pixel-component-value] )
 * Aside from being fast, this scheme allows for variable spacing between
 * representative values with no additional lookup cost.
 *
 * If gamma correction has been applied in color conversion, it might be wise
 * to adjust the color grid spacing so that the representative colors are
 * equidistant in linear space.  At this writing, gamma correction is not
 * implemented by jdcolor, so nothing is done here.
 */


/* Declarations for ordered dithering.
 *
 * We use a standard 16x16 ordered dither array.  The basic concept of ordered
 * dithering is described in many references, for instance Dale Schumacher's
 * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
 * In place of Schumacher's comparisons against a "threshold" value, we add a
 * "dither" value to the input pixel and then round the result to the nearest
 * output value.  The dither value is equivalent to (0.5 - threshold) times
 * the distance between output values.  For ordered dithering, we assume that
 * the output colors are equally spaced; if not, results will probably be
 * worse, since the dither may be too much or too little at a given point.
 *
 * The normal calculation would be to form pixel value + dither, range-limit
 * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
 * We can skip the separate range-limiting step by extending the colorindex
 * table in both directions.
 */

#define ODITHER_SIZE  16	/* dimension of dither matrix */
/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */

typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];

static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
  /* Bayer's order-4 dither array.  Generated by the code given in
   * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
   * The values in this array must range from 0 to ODITHER_CELLS-1.
   */
  {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
  { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
  {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
  { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
  {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
  { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
  {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
  { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
  {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
  { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
  {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
  { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
  {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
  { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
  {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
  { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
};


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array is indexed [component#][position].
 * We provide (#columns + 2) entries per component; the extra entry at each
 * end saves us from special-casing the first and last pixels.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

#define MAX_Q_COMPS 4		/* max components I can handle */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Initially allocated colormap is saved here */
  JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
  int sv_actual;		/* number of entries in use */

  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
  /* colorindex[i][j] = index of color closest to pixel value j in component i,
   * premultiplied as described above.  Since colormap indexes must fit into
   * JSAMPLEs, the entries of this array will too.
   */
  boolean is_padded;		/* is the colorindex padded for odither? */

  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */

  /* Variables for ordered dithering */
  int row_index;		/* cur row's vertical index in dither matrix */
  ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Policy-making subroutines for create_colormap and create_colorindex.
 * These routines determine the colormap to be used.  The rest of the module
 * only assumes that the colormap is orthogonal.
 *
 *  * select_ncolors decides how to divvy up the available colors
 *    among the components.
 *  * output_value defines the set of representative values for a component.
 *  * largest_input_value defines the mapping from input values to
 *    representative values for a component.
 * Note that the latter two routines may impose different policies for
 * different components, though this is not currently done.
 */


LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
  int nc = cinfo->out_color_components; /* number of color components */
  int max_colors = cinfo->desired_number_of_colors;
  int total_colors, iroot, i, j;
  boolean changed;
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
  do {
    iroot++;
    temp = iroot;		/* set temp = iroot ** nc */
    for (i = 1; i < nc; i++)
      temp *= iroot;
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
  iroot--;			/* now iroot = floor(root) */

  /* Must have at least 2 color values per component */
  if (iroot < 2)
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

  /* Initialize to iroot color values for each component */
  total_colors = 1;
  for (i = 0; i < nc; i++) {
    Ncolors[i] = iroot;
    total_colors *= iroot;
  }
  /* We may be able to increment the count for one or more components without
   * exceeding max_colors, though we know not all can be incremented.
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
    for (i = 0; i < nc; i++) {
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
      if (temp > (long) max_colors)
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
      total_colors = (int) temp;
      changed = TRUE;
    }
  } while (changed);

  return total_colors;
}


LOCAL(int)
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
}


LOCAL(int)
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
}


/*
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blkdist / nci;
    for (j = 0; j < nci; j++) {
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
	  colormap[i][ptr+k] = (JSAMPLE) val;
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
  cquantize->sv_actual = total_colors;
}


/*
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPROW indexptr;
  int i,j,k, nci, blksize, val, pad;

  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
    pad = MAXJSAMPLE*2;
    cquantize->is_padded = TRUE;
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    blksize = blksize / nci;

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
      cquantize->colorindex[i] += MAXJSAMPLE;

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
    val = 0;
    k = largest_input_value(cinfo, i, 0, nci-1);
    for (j = 0; j <= MAXJSAMPLE; j++) {
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
    }
    /* Pad at both ends if necessary */
    if (pad)
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}


/*
 * Create an ordered-dither array for a component having ncolors
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(ODITHER_MATRIX));
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
  for (j = 0; j < ODITHER_SIZE; j++) {
    for (k = 0; k < ODITHER_SIZE; k++) {
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
    }
  }
  return odither;
}


/*
 * Create the ordered-dither tables.
 * Components having the same number of representative colors may 
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
    odither = NULL;		/* search for matching prior component */
    for (j = 0; j < i; j++) {
      if (nci == cquantize->Ncolors[j]) {
	odither = cquantize->odither[j];
	break;
      }
    }
    if (odither == NULL)	/* need a new table? */
      odither = make_odither_array(cinfo, nci);
    cquantize->odither[i] = odither;
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colorindex = cquantize->colorindex;
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode = 0;
      for (ci = 0; ci < nc; ci++) {
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      colorindex_ci = cquantize->colorindex[ci];
      dither = cquantize->odither[ci][row_index];
      col_index = 0;

      for (col = width; col > 0; col--) {
	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
	 * select output value, accumulate into output code for this pixel.
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
	input_ptr += nc;
	output_ptr++;
	col_index = (col_index + 1) & ODITHER_MASK;
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int * dither0;		/* points to active row of dither matrix */
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    row_index = cquantize->row_index;
    input_ptr = input_buf[row];
    output_ptr = output_buf[row];
    dither0 = cquantize->odither[0][row_index];
    dither1 = cquantize->odither[1][row_index];
    dither2 = cquantize->odither[2][row_index];
    col_index = 0;

    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register LOCFSERROR cur;	/* current error or pixel value */
  LOCFSERROR belowerr;		/* error for pixel below cur */
  LOCFSERROR bpreverr;		/* error for below/prev col */
  LOCFSERROR bnexterr;		/* error for below/next col */
  LOCFSERROR delta;
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      if (cquantize->on_odd_row) {
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
	output_ptr += width-1;
	dir = -1;
	dirnc = -nc;
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
      } else {
	/* work left to right in this row */
	dir = 1;
	dirnc = nc;
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
      }
      colorindex_ci = cquantize->colorindex[ci];
      colormap_ci = cquantize->sv_colormap[ci];
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;

      for (col = width; col > 0; col--) {
	/* cur holds the error propagated from the previous pixel on the
	 * current line.  Add the error propagated from the previous line
	 * to form the complete error correction term for this pixel, and
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
	cur = GETJSAMPLE(range_limit[cur]);
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
	*output_ptr += (JSAMPLE) pixcode;
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
	delta = cur * 2;
	cur += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr + cur);
	cur += delta;		/* form error * 5 */
	bpreverr = belowerr + cur;
	belowerr = bnexterr;
	cur += delta;		/* form error * 7 */
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
	output_ptr += dir;	/* advance output ptr to next column */
	errorptr += dir;	/* advance errorptr to current column */
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
  }
}


/*
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
  for (i = 0; i < cinfo->out_color_components; i++) {
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}


/*
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
  cinfo->actual_number_of_colors = cquantize->sv_actual;

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = color_quantize3;
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = quantize3_ord_dither;
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
    cquantize->row_index = 0;	/* initialize state for ordered dither */
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
      create_colorindex(cinfo);
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
      create_odither_tables(cinfo);
    break;
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
      alloc_fs_workspace(cinfo);
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
    for (i = 0; i < cinfo->out_color_components; i++)
      jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
    break;
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }
}


/*
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}


/*
 * Switch to a new external colormap between output passes.
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
}


/*
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
  cquantize->pub.finish_pass = finish_pass_1_quant;
  cquantize->pub.new_color_map = new_color_map_1_quant;
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);

  /* Allocate Floyd-Steinberg workspace now if requested.
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
    alloc_fs_workspace(cinfo);
}

#endif /* QUANT_1PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jquant2.c ===
/*
 * jquant2.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 2-pass color quantization (color mapping) routines.
 * These routines provide selection of a custom color map for an image,
 * followed by mapping of the image to that color map, with optional
 * Floyd-Steinberg dithering.
 * It is also possible to use just the second pass to map to an arbitrary
 * externally-given color map.
 *
 * Note: ordered dithering is not supported, since there isn't any fast
 * way to compute intercolor distances; it's unclear that ordered dither's
 * fundamental assumptions even hold with an irregularly spaced color map.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"

#ifdef QUANT_2PASS_SUPPORTED


/*
 * This module implements the well-known Heckbert paradigm for color
 * quantization.  Most of the ideas used here can be traced back to
 * Heckbert's seminal paper
 *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
 *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
 *
 * In the first pass over the image, we accumulate a histogram showing the
 * usage count of each possible color.  To keep the histogram to a reasonable
 * size, we reduce the precision of the input; typical practice is to retain
 * 5 or 6 bits per color, so that 8 or 4 different input values are counted
 * in the same histogram cell.
 *
 * Next, the color-selection step begins with a box representing the whole
 * color space, and repeatedly splits the "largest" remaining box until we
 * have as many boxes as desired colors.  Then the mean color in each
 * remaining box becomes one of the possible output colors.
 * 
 * The second pass over the image maps each input pixel to the closest output
 * color (optionally after applying a Floyd-Steinberg dithering correction).
 * This mapping is logically trivial, but making it go fast enough requires
 * considerable care.
 *
 * Heckbert-style quantizers vary a good deal in their policies for choosing
 * the "largest" box and deciding where to cut it.  The particular policies
 * used here have proved out well in experimental comparisons, but better ones
 * may yet be found.
 *
 * In earlier versions of the IJG code, this module quantized in YCbCr color
 * space, processing the raw upsampled data without a color conversion step.
 * This allowed the color conversion math to be done only once per colormap
 * entry, not once per pixel.  However, that optimization precluded other
 * useful optimizations (such as merging color conversion with upsampling)
 * and it also interfered with desired capabilities such as quantizing to an
 * externally-supplied colormap.  We have therefore abandoned that approach.
 * The present code works in the post-conversion color space, typically RGB.
 *
 * To improve the visual quality of the results, we actually work in scaled
 * RGB space, giving G distances more weight than R, and R in turn more than
 * B.  To do everything in integer math, we must use integer scale factors.
 * The 2/3/1 scale factors used here correspond loosely to the relative
 * weights of the colors in the NTSC grayscale equation.
 * If you want to use this code to quantize a non-RGB color space, you'll
 * probably need to change these scale factors.
 */

#define R_SCALE 2		/* scale R distances by this much */
#define G_SCALE 3		/* scale G distances by this much */
#define B_SCALE 1		/* and B by this much */

/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
 * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
 * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
 * you'll get compile errors until you extend this logic.  In that case
 * you'll probably want to tweak the histogram sizes too.
 */

#if RGB_RED == 0
#define C0_SCALE R_SCALE
#endif
#if RGB_BLUE == 0
#define C0_SCALE B_SCALE
#endif
#if RGB_GREEN == 1
#define C1_SCALE G_SCALE
#endif
#if RGB_RED == 2
#define C2_SCALE R_SCALE
#endif
#if RGB_BLUE == 2
#define C2_SCALE B_SCALE
#endif


/*
 * First we have the histogram data structure and routines for creating it.
 *
 * The number of bits of precision can be adjusted by changing these symbols.
 * We recommend keeping 6 bits for G and 5 each for R and B.
 * If you have plenty of memory and cycles, 6 bits all around gives marginally
 * better results; if you are short of memory, 5 bits all around will save
 * some space but degrade the results.
 * To maintain a fully accurate histogram, we'd need to allocate a "long"
 * (preferably unsigned long) for each cell.  In practice this is overkill;
 * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 * and clamping those that do overflow to the maximum value will give close-
 * enough results.  This reduces the recommended histogram size from 256Kb
 * to 128Kb, which is a useful savings on PC-class machines.
 * (In the second pass the histogram space is re-used for pixel mapping data;
 * in that capacity, each cell must be able to store zero to the number of
 * desired colors.  16 bits/cell is plenty for that too.)
 * Since the JPEG code is intended to run in small memory model on 80x86
 * machines, we can't just allocate the histogram in one chunk.  Instead
 * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 * on 80x86 machines, the pointer row is in near memory but the actual
 * arrays are in far memory (same arrangement as we use for image arrays).
 */

#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */

/* These will do the right thing for either R,G,B or B,G,R color order,
 * but you may not like the results for other color orders.
 */
#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
#define HIST_C1_BITS  6		/* bits of precision in G histogram */
#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */

/* Number of elements along histogram axes. */
#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)

/* These are the amounts to shift an input value to get a histogram index. */
#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)


typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */

typedef histcell FAR * histptr;	/* for pointers to histogram cells */

typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
typedef hist2d * hist3d;	/* type for top-level pointer */


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array has (#columns + 2) entries; the extra entry at
 * each end saves us from special-casing the first and last pixels.
 * Each entry is three values long, one value for each color component.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Space for the eventually created colormap is stashed here */
  JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
  int desired;			/* desired # of colors = size of colormap */

  /* Variables for accumulating image statistics */
  hist3d histogram;		/* pointer to the histogram */

  boolean needs_zeroed;		/* TRUE if next pass must zero histogram */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors;		/* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
  int * error_limiter;		/* table for clamping the applied error */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Prescan some rows of pixels.
 * In this module the prescan simply updates the histogram, which has been
 * initialized to zeroes by start_pass.
 * An output_buf parameter is required by the method signature, but no data
 * is actually output (in fact the buffer controller is probably passing a
 * NULL pointer).
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptr = input_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}


/*
 * Next we have the really interesting routines: selection of a colormap
 * given the completed histogram.
 * These routines work with a list of "boxes", each representing a rectangular
 * subset of the input color space (to histogram precision).
 */

typedef struct {
  /* The bounds of the box (inclusive); expressed as histogram indexes */
  int c0min, c0max;
  int c1min, c1max;
  int c2min, c2max;
  /* The volume (actually 2-norm) of the box */
  INT32 volume;
  /* The number of nonzero histogram cells within this box */
  long colorcount;
} box;

typedef box * boxptr;


LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register long maxc = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->colorcount > maxc && boxp->volume > 0) {
      which = boxp;
      maxc = boxp->colorcount;
    }
  }
  return which;
}


LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->volume > maxv) {
      which = boxp;
      maxv = boxp->volume;
    }
  }
  return which;
}


LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  if (c0max > c0min)
    for (c0 = c0min; c0 <= c0max; c0++)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0min = c0min = c0;
	    goto have_c0min;
	  }
      }
 have_c0min:
  if (c0max > c0min)
    for (c0 = c0max; c0 >= c0min; c0--)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0max = c0max = c0;
	    goto have_c0max;
	  }
      }
 have_c0max:
  if (c1max > c1min)
    for (c1 = c1min; c1 <= c1max; c1++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1min = c1min = c1;
	    goto have_c1min;
	  }
      }
 have_c1min:
  if (c1max > c1min)
    for (c1 = c1max; c1 >= c1min; c1--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1max = c1max = c1;
	    goto have_c1max;
	  }
      }
 have_c1max:
  if (c2max > c2min)
    for (c2 = c2min; c2 <= c2max; c2++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2min = c2min = c2;
	    goto have_c2min;
	  }
      }
 have_c2min:
  if (c2max > c2min)
    for (c2 = c2max; c2 >= c2min; c2--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2max = c2max = c2;
	    goto have_c2max;
	  }
      }
 have_c2max:

  /* Update box volume.
   * We use 2-norm rather than real volume here; this biases the method
   * against making long narrow boxes, and it has the side benefit that
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
	if (*histp != 0) {
	  ccount++;
	}
    }
  boxp->colorcount = ccount;
}


LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
      b1 = find_biggest_color_pop(boxlist, numboxes);
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
    }
    if (b1 == NULL)		/* no splittable boxes left! */
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
    if (c0 > cmax) { cmax = c0; n = 0; }
    if (c2 > cmax) { n = 2; }
#else
    cmax = c1; n = 1;
    if (c2 > cmax) { cmax = c2; n = 2; }
    if (c0 > cmax) { n = 0; }
#endif
    /* Choose split point along selected axis, and update box bounds.
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
      b1->c0max = lb;
      b2->c0min = lb+1;
      break;
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
      b1->c1max = lb;
      b2->c1min = lb+1;
      break;
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
      b1->c2max = lb;
      b2->c2min = lb+1;
      break;
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
    update_box(cinfo, b2);
    numboxes++;
  }
  return numboxes;
}


LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
  long c0total = 0;
  long c1total = 0;
  long c2total = 0;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++) {
	if ((count = *histp++) != 0) {
	  total += count;
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
}


LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
  boxlist[0].c0min = 0;
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
  boxlist[0].c1min = 0;
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
  boxlist[0].c2min = 0;
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
    compute_color(cinfo, & boxlist[i], i);
  cinfo->actual_number_of_colors = numboxes;
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
}


/*
 * These routines are concerned with the time-critical task of mapping input
 * colors to the nearest color in the selected colormap.
 *
 * We re-use the histogram space as an "inverse color map", essentially a
 * cache for the results of nearest-color searches.  All colors within a
 * histogram cell will be mapped to the same colormap entry, namely the one
 * closest to the cell's center.  This may not be quite the closest entry to
 * the actual input color, but it's almost as good.  A zero in the cache
 * indicates we haven't found the nearest color for that cell yet; the array
 * is cleared to zeroes before starting the mapping pass.  When we find the
 * nearest color for a cell, its colormap index plus one is recorded in the
 * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 * when they need to use an unfilled entry in the cache.
 *
 * Our method of efficiently finding nearest colors is based on the "locally
 * sorted search" idea described by Heckbert and on the incremental distance
 * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 * the distances from a given colormap entry to each cell of the histogram can
 * be computed quickly using an incremental method: the differences between
 * distances to adjacent cells themselves differ by a constant.  This allows a
 * fairly fast implementation of the "brute force" approach of computing the
 * distance from every colormap entry to every histogram cell.  Unfortunately,
 * it needs a work array to hold the best-distance-so-far for each histogram
 * cell (because the inner loop has to be over cells, not colormap entries).
 * The work array elements have to be INT32s, so the work array would need
 * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 *
 * To get around these problems, we apply Thomas' method to compute the
 * nearest colors for only the cells within a small subbox of the histogram.
 * The work array need be only as big as the subbox, so the memory usage
 * problem is solved.  Furthermore, we need not fill subboxes that are never
 * referenced in pass2; many images use only part of the color gamut, so a
 * fair amount of work is saved.  An additional advantage of this
 * approach is that we can apply Heckbert's locality criterion to quickly
 * eliminate colormap entries that are far away from the subbox; typically
 * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 * and we need not compute their distances to individual cells in the subbox.
 * The speed of this approach is heavily influenced by the subbox size: too
 * small means too much overhead, too big loses because Heckbert's criterion
 * can't eliminate as many colormap entries.  Empirically the best subbox
 * size seems to be about 1/512th of the histogram (1/8th in each direction).
 *
 * Thomas' article also describes a refined method which is asymptotically
 * faster than the brute-force method, but it is also far more complex and
 * cannot efficiently be applied to small subboxes.  It is therefore not
 * useful for programs intended to be portable to DOS machines.  On machines
 * with plenty of memory, filling the whole histogram in one shot with Thomas'
 * refined method might be faster than the present code --- but then again,
 * it might not be any faster, and it's certainly more complicated.
 */


/* log2(histogram cells in update box) for each axis; this can be adjusted */
#define BOX_C0_LOG  (HIST_C0_BITS-3)
#define BOX_C1_LOG  (HIST_C1_BITS-3)
#define BOX_C2_LOG  (HIST_C2_BITS-3)

#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)

#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)


/*
 * The next three routines implement inverse colormap filling.  They could
 * all be folded into one big routine, but splitting them up this way saves
 * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 * and may allow some compilers to produce better code by registerizing more
 * inner-loop variables.
 */

LOCAL(int)
find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		    JSAMPLE colorlist[])
/* Locate the colormap entries close enough to an update box to be candidates
 * for the nearest entry to some cell(s) in the update box.  The update box
 * is specified by the center coordinates of its first cell.  The number of
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
  int numcolors = cinfo->actual_number_of_colors;
  int maxc0, maxc1, maxc2;
  int centerc0, centerc1, centerc2;
  int i, x, ncolors;
  INT32 minmaxdist, min_dist, max_dist, tdist;
  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */

  /* Compute true coordinates of update box's upper corner and center.
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
  centerc0 = (minc0 + maxc0) >> 1;
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
  centerc1 = (minc1 + maxc1) >> 1;
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
  centerc2 = (minc2 + maxc2) >> 1;

  /* For each color in colormap, find:
   *  1. its minimum squared-distance to any point in the update box
   *     (zero if color is within update box);
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;

  for (i = 0; i < numcolors; i++) {
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
    if (x < minc0) {
      tdist = (x - minc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - maxc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else if (x > maxc0) {
      tdist = (x - maxc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - minc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
      if (x <= centerc0) {
	tdist = (x - maxc0) * C0_SCALE;
	max_dist = tdist*tdist;
      } else {
	tdist = (x - minc0) * C0_SCALE;
	max_dist = tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
    if (x < minc1) {
      tdist = (x - minc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc1) {
      tdist = (x - maxc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
	tdist = (x - maxc1) * C1_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc1) * C1_SCALE;
	max_dist += tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
    if (x < minc2) {
      tdist = (x - minc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc2) {
      tdist = (x - maxc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
	tdist = (x - maxc2) * C2_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc2) * C2_SCALE;
	max_dist += tdist*tdist;
      }
    }

    mindist[i] = min_dist;	/* save away the results */
    if (max_dist < minmaxdist)
      minmaxdist = max_dist;
  }

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
  for (i = 0; i < numcolors; i++) {
    if (mindist[i] <= minmaxdist)
      colorlist[ncolors++] = (JSAMPLE) i;
  }
  return ncolors;
}


LOCAL(void)
find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
/* Find the closest colormap entry for each cell in the update box,
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
  int ic0, ic1, ic2;
  int i, icolor;
  register INT32 * bptr;	/* pointer into bestdist[] array */
  JSAMPLE * cptr;		/* pointer into bestcolor[] array */
  INT32 dist0, dist1;		/* initial distance values */
  register INT32 dist2;		/* current distance in inner loop */
  INT32 xx0, xx1;		/* distance increments */
  register INT32 xx2;
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
    *bptr++ = 0x7FFFFFFFL;
  
  /* For each color selected by find_nearby_colors,
   * compute its distance to the center of each cell in the box.
   * If that's less than best-so-far, update best distance and color number.
   */
  
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
    icolor = GETJSAMPLE(colorlist[i]);
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
    dist0 = inc0*inc0;
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
    dist0 += inc1*inc1;
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
    dist0 += inc2*inc2;
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
    cptr = bestcolor;
    xx0 = inc0;
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
      dist1 = dist0;
      xx1 = inc1;
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
	dist2 = dist1;
	xx2 = inc2;
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
	  if (dist2 < *bptr) {
	    *bptr = dist2;
	    *cptr = (JSAMPLE) icolor;
	  }
	  dist2 += xx2;
	  xx2 += 2 * STEP_C2 * STEP_C2;
	  bptr++;
	  cptr++;
	}
	dist1 += xx1;
	xx1 += 2 * STEP_C1 * STEP_C1;
      }
      dist0 += xx0;
      xx0 += 2 * STEP_C0 * STEP_C0;
    }
  }
}


LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int minc0, minc1, minc2;	/* lower left corner of update box */
  int ic0, ic1, ic2;
  register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
  register histptr cachep;	/* pointer into main cache array */
  /* This array lists the candidate colormap indexes. */
  JSAMPLE colorlist[MAXNUMCOLORS];
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
  c2 >>= BOX_C2_LOG;

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
      }
    }
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
      cachep = & histogram[c0][c1][c2];
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}


METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
  LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
  LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  JSAMPROW inptr;		/* => current input pixel */
  JSAMPROW outptr;		/* => current output pixel */
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  int *error_limit = cquantize->error_limiter;
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
      cquantize->on_odd_row = FALSE; /* flip for next time */
    } else {
      /* work left to right in this row */
      dir = 1;
      dir3 = 3;
      errorptr = cquantize->fserrors; /* => entry before first real column */
      cquantize->on_odd_row = TRUE; /* flip for next time */
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
    bpreverr0 = bpreverr1 = bpreverr2 = 0;

    for (col = width; col > 0; col--) {
      /* curN holds the error propagated from the previous pixel on the
       * current line.  Add the error propagated from the previous line
       * to form the complete error correction term for this pixel, and
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
      cur1 = error_limit[cur1];
      cur2 = error_limit[cur2];
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
      cur1 += GETJSAMPLE(inptr[1]);
      cur2 += GETJSAMPLE(inptr[2]);
      cur0 = GETJSAMPLE(range_limit[cur0]);
      cur1 = GETJSAMPLE(range_limit[cur1]);
      cur2 = GETJSAMPLE(range_limit[cur2]);
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
	*outptr = (JSAMPLE) pixcode;
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
      }
      /* Compute error fractions to be propagated to adjacent pixels.
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
	delta = cur0 * 2;
	cur0 += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
	cur0 += delta;		/* form error * 5 */
	bpreverr0 = belowerr0 + cur0;
	belowerr0 = bnexterr;
	cur0 += delta;		/* form error * 7 */
	bnexterr = cur1;	/* Process component 1 */
	delta = cur1 * 2;
	cur1 += delta;		/* form error * 3 */
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
	cur1 += delta;		/* form error * 5 */
	bpreverr1 = belowerr1 + cur1;
	belowerr1 = bnexterr;
	cur1 += delta;		/* form error * 7 */
	bnexterr = cur2;	/* Process component 2 */
	delta = cur2 * 2;
	cur2 += delta;		/* form error * 3 */
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
	cur2 += delta;		/* form error * 5 */
	bpreverr2 = belowerr2 + cur2;
	belowerr2 = bnexterr;
	cur2 += delta;		/* form error * 7 */
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
      outptr += dir;
      errorptr += dir3;		/* advance errorptr to current column */
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}


/*
 * Initialize the error-limiting transfer function (lookup table).
 * The raw F-S error computation can potentially compute error values of up to
 * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
 * much less, otherwise obviously wrong pixels will be created.  (Typical
 * effects include weird fringes at color-area boundaries, isolated bright
 * pixels in a dark area, etc.)  The standard advice for avoiding this problem
 * is to ensure that the "corners" of the color cube are allocated as output
 * colors; then repeated errors in the same direction cannot cause cascading
 * error buildup.  However, that only prevents the error from getting
 * completely out of hand; Aaron Giles reports that error limiting improves
 * the results even with corner colors allocated.
 * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
 * well, but the smoother transfer function used below is even better.  Thanks
 * to Aaron Giles for this idea.
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
  cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
    table[in] = out; table[-in] = -out;
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
  }
#undef STEPSIZE
}


/*
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
  select_colors(cinfo, cquantize->desired);
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
}


METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}


/*
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
    cinfo->dither_mode = JDITHER_FS;

  if (is_pre_scan) {
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
    cquantize->pub.finish_pass = finish_pass1;
    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
      cquantize->pub.color_quantize = pass2_fs_dither;
    else
      cquantize->pub.color_quantize = pass2_no_dither;
    cquantize->pub.finish_pass = finish_pass2;

    /* Make sure color count is acceptable */
    i = cinfo->actual_number_of_colors;
    if (i < 1)
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
    if (i > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);

    if (cinfo->dither_mode == JDITHER_FS) {
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				   (3 * SIZEOF(FSERROR)));
      /* Allocate Floyd-Steinberg workspace if we didn't already. */
      if (cquantize->fserrors == NULL)
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      jzero_far((void FAR *) cquantize->fserrors, arraysize);
      /* Make the error-limit table if we didn't already. */
      if (cquantize->error_limiter == NULL)
	init_error_limit(cinfo);
      cquantize->on_odd_row = FALSE;
    }

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
    for (i = 0; i < HIST_C0_ELEMS; i++) {
      jzero_far((void FAR *) histogram[i],
		HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
    }
    cquantize->needs_zeroed = FALSE;
  }
}


/*
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
}


/*
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
  cquantize->pub.new_color_map = new_color_map_2_quant;
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
  cquantize->error_limiter = NULL;

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
    ERREXIT(cinfo, JERR_NOTIMPL);

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
    cinfo->dither_mode = JDITHER_FS;

  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
  }
}

#endif /* QUANT_2PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jversion.h ===
/*
 * jversion.h
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains software version identification.
 */


#define JVERSION	"6a  7-Feb-96"

#define JCOPYRIGHT	"Copyright (C) 1996, Thomas G. Lane"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\pifst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef USEINLINEASM

GLOBAL(void)
pidct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


static const long  x5a825a825a825a82	= 0x0000016a ;				
static const long  x539f539f539f539f 	= 0xfffffd63 ;
static const long  x4546454645464546	= 0x00000115 ;	
static const long  x61f861f861f861f8	= 0x000001d9 ;	


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
pidct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

  INT32	locdwinptr, locdwqptr, locdwwsptr, locwctr ;
  short locwcounter, locwtmp0, locwtmp1	;
  short locwtmp3, scratch1, scratch2, scratch3 ;


  
  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array
//  pidct(coef_block, quantptr, wsptr, output_buf, output_col, range_limit) ;

__asm {


mov esi, coef_block   ; source coeff
mov edi, quantptr	  ; quant pointer

mov locdwinptr, esi
mov eax, wsptr	  ; temp storage pointer

mov locdwqptr, edi
mov locdwwsptr, eax

mov locwcounter, 8

;; perform the 1D-idct on each of the eight columns

idct_column:

mov esi, locdwinptr
mov edi, locdwqptr

mov ax, word ptr [esi+16*0]

mov bx, word ptr [esi+16*4]
imul ax, word ptr [edi+16*0]

mov cx, word ptr [esi+16*2]

imul bx, word ptr [edi+16*4]

mov dx, word ptr [esi+16*6]
imul cx, word ptr [edi+16*2]

imul dx, word ptr [edi+16*6]

;;;; at this point C0, C2, C4 and C6 have been dequantized

mov scratch1, ax
add ax, bx		; tmp10 in ax

sub scratch1, bx		; tmp11 
mov bx, cx

add cx, dx		; tmp13 in cx
sub bx, dx		; tmp1 - tmp3 in bx

mov dx, ax
movsx ebx, bx	; sign extend bx: get ready to do imul

add ax, cx		; tmp0 in ax
imul ebx, dword ptr x5a825a825a825a82

sub dx, cx		; tmp3 in dx
mov locwtmp0, ax 

mov locwtmp3, dx
sar ebx, 8		; bx now has (tmp1-tmp3)*1.414

mov ax, scratch1	; copy of tmp11
sub bx, cx		; tmp12 in bx

add ax, bx		; tmp1 in ax
sub scratch1, bx		; tmp2 

mov locwtmp1, ax

;;;;;completed computing/storing the even part;;;;;;;;;; 

mov ax, [esi+16*1]		; get C1

imul ax, [edi+16*1]
mov bx, [esi+16*7]		; get C7

mov cx, [esi+16*3]

imul bx, [edi+16*7]	

mov dx, [esi+16*5]

imul cx, [edi+16*3]

imul dx, [edi+16*5]

mov scratch2, ax
add ax, bx		; z11 in ax

sub scratch2, bx		; z12 
mov bx, dx		; copy of deQ C5

add dx, cx		; z13 in dx
sub bx, cx		; z10 in bx

mov cx, ax		; copy of z11
add ax, dx		; tmp7 in ax

sub cx, dx		; partial tmp11

movsx ecx, cx
mov dx, bx		; copy of z10

add bx, scratch2		; partial z5 
imul ecx, dword ptr x5a825a825a825a82

movsx edx, dx	; sign extend z10: get ready for imul
movsx ebx, bx	; sign extend partial z5 for imul

imul edx, dword ptr x539f539f539f539f	; partial tmp12
imul ebx, dword ptr x61f861f861f861f8	; partial z5 product

mov	di, scratch2
movsx edi, di	; sign extend z12: get ready for imul
sar ecx, 8		; tmp11 in cx

sar ebx, 8		; z5 in bx
imul edi, dword ptr x4546454645464546

sar edx, 8
sar edi, 8

sub di, bx		; tmp10 
add dx, bx		; tmp12 in dx

sub dx, ax		; tmp6 in dx

sub cx, dx		; tmp5 in cx

add di, cx		; tmp4 
mov	scratch3, di

;;; completed calculating the odd part ;;;;;;;;;;;

mov edi, dword ptr locdwwsptr	; get address of temp. destn

mov si, ax		; copy of tmp7
mov bx, locwtmp0	; get tmp0

add ax, locwtmp0	; wsptr[0]
sub bx, si		; wsptr[7]

mov word ptr [edi+16*0], ax
mov word ptr [edi+16*7], bx

mov ax, dx		; copy of tmp6
mov bx, locwtmp1

add dx, bx		; wsptr[1]
sub bx, ax		; wsptr[6]

mov word ptr [edi+16*1], dx
mov word ptr [edi+16*6], bx

mov dx, cx		; copy of tmp5
mov bx, scratch1


add cx, bx		; wsptr[2]
sub bx, dx		; wsptr[5]

mov word ptr [edi+16*2], cx
mov word ptr [edi+16*5], bx

mov cx, scratch3		; copy of tmp4
mov ax, locwtmp3

add scratch3, ax		; wsptr[4]
sub ax, cx		; wsptr[3]

mov	bx, scratch3
mov word ptr [edi+16*4], bx
mov word ptr [edi+16*3], ax

;;;;; completed storing 1D idct of one column ;;;;;;;;

;; update inptr, qptr and wsptr for next column

add locdwinptr, 2
add locdwqptr, 2

add locdwwsptr, 2
mov ax, locwcounter	; get loop count

dec ax		; another loop done

mov locwcounter, ax
jnz idct_column

;;;;;;; end of 1D idct on all columns  ;;;;;;;
;;;;;;; temp result is stored in wsptr  ;;;;;;;

;;;;;;; perform 1D-idct on each row and store final result

mov esi, wsptr	; initialize source ptr to original wsptr
mov locwctr, 0

mov locwcounter, 8
mov locdwwsptr, esi

idct_row:

mov edi, output_buf
mov esi, locdwwsptr

add edi, locwctr

mov	edi, [edi]		; get output_buf[ctr]

add edi, output_col	; now edi is pointing to the resp. row
add locwctr, 4

;; get even coeffs. and do the even part

mov ax, word ptr [esi+2*0]

mov bx, word ptr [esi+2*4]

mov cx, word ptr [esi+2*2]

mov dx, word ptr [esi+2*6]

mov scratch1, ax
add ax, bx		; tmp10 in ax

sub scratch1, bx		; tmp11 
mov bx, cx

add cx, dx		; tmp13 in cx
sub bx, dx		; tmp1 - tmp3 in bx

mov dx, ax
movsx ebx, bx	; sign extend bx: get ready to do imul

add ax, cx		; tmp0 in ax
imul ebx, dword ptr x5a825a825a825a82

sub dx, cx		; tmp3 in dx
mov locwtmp0, ax 

mov locwtmp3, dx
sar ebx, 8		; bx now has (tmp1-tmp3)*1.414

mov ax, scratch1	; copy of tmp11
sub bx, cx		; tmp12 in bx

add ax, bx		; tmp1 in ax
sub scratch1, bx		; tmp2 

mov locwtmp1, ax

;;;;;completed computing/storing the even part;;;;;;;;;; 

mov ax, [esi+2*1]		; get C1
mov bx, [esi+2*7]		; get C7

mov cx, [esi+2*3]
mov dx, [esi+2*5]

mov scratch2, ax
add ax, bx		; z11 in ax

sub scratch2, bx		; z12 
mov bx, dx		; copy of deQ C5

add dx, cx		; z13 in dx
sub bx, cx		; z10 in bx

mov cx, ax		; copy of z11
add ax, dx		; tmp7 in ax

sub cx, dx		; partial tmp11

movsx ecx, cx
mov dx, bx		; copy of z10

add bx, scratch2	; partial z5 
imul ecx, dword ptr x5a825a825a825a82

movsx edx, dx	; sign extend z10: get ready for imul
movsx ebx, bx	; sign extend partial z5 for imul

imul edx, dword ptr x539f539f539f539f	; partial tmp12
imul ebx, dword ptr x61f861f861f861f8	; partial z5 product

mov	si, scratch2
movsx esi, si	; sign extend z12: get ready for imul
sar ecx, 8		; tmp11 in cx

sar ebx, 8		; z5 in bx
imul esi, dword ptr x4546454645464546

sar edx, 8
sar esi, 8

sub si, bx		; tmp10 
add dx, bx		; tmp12 in dx

sub dx, ax		; tmp6 in dx

sub cx, dx		; tmp5 in cx

add si, cx		; tmp4 
mov	scratch3, si

;;; completed calculating the odd part ;;;;;;;;;;;

mov si, ax		; copy of tmp7
mov bx, locwtmp0	; get tmp0

add ax, locwtmp0	; wsptr[0]
sub bx, si		; wsptr[7]

mov esi, range_limit	; initialize esi to range_limit pointer

sar ax, 5
sar bx, 5

and eax, 3ffh
and ebx, 3ffh

mov al, byte ptr [esi][eax]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+0], al
mov byte ptr [edi+7], bl

mov ax, dx		; copy of tmp6
mov bx, locwtmp1

add dx, bx		; wsptr[1]
sub bx, ax		; wsptr[6]

sar dx, 5
sar bx, 5

and edx, 3ffh
and ebx, 3ffh

mov dl, byte ptr [esi][edx]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+1], dl
mov byte ptr [edi+6], bl

mov dx, cx		; copy of tmp5
mov bx, scratch1

add cx, bx		; wsptr[2]
sub bx, dx		; wsptr[5]

sar cx, 5
sar bx, 5

and ecx, 3ffh
and ebx, 3ffh

mov cl, byte ptr [esi][ecx]
mov bl, byte ptr [esi][ebx]

mov byte ptr [edi+2], cl
mov byte ptr [edi+5], bl

mov cx, scratch3		; copy of tmp4
mov ax, locwtmp3

add scratch3, ax		; wsptr[4]
sub ax, cx		; wsptr[3]

sar scratch3, 5
sar ax, 5

mov	cx, scratch3

and ecx, 3ffh
and eax, 3ffh


mov bl, byte ptr [esi][ecx]
mov al, byte ptr [esi][eax]

mov byte ptr [edi+4], bl
mov byte ptr [edi+3], al

;;;;; completed storing 1D idct of one row ;;;;;;;;

;; update the source pointer (wsptr) for next row

add locdwwsptr, 16

mov ax, locwcounter	; get loop count

dec ax		; another loop done

mov locwcounter, ax
jnz idct_row


;; end of 1D idct on all rows
;; final result is stored in outptr

}	/* end of __asm */
}

#endif /* X86 */

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\jutils.c ===
/*
 * jutils.c
 *
 * Copyright (C) 1991-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains tables and miscellaneous utility routines needed
 * for both compression and decompression.
 * Note we prefix all global names with "j" to minimize conflicts with
 * a surrounding application.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef UNIX
#include "jpeglib.h"
// INT32 is defined by JPEG library in same way; turn off warning of benign
// type definition
#pragma warning(disable: 4142)
#include <windows.h>
#pragma warning(default: 4142)
#else 
// When the reason that windows.h must be after jpeglib.h in Windows platform is resolved. We can take out this #ifdef. 
#include <windows.h>
#include "jpeglib.h"
#endif
boolean vfMMXMachine = 2;

/*
 * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
 * of a DCT block read in natural order (left to right, top to bottom).
 */

const int jpeg_zigzag_order[DCTSIZE2] = {
   0,  1,  5,  6, 14, 15, 27, 28,
   2,  4,  7, 13, 16, 26, 29, 42,
   3,  8, 12, 17, 25, 30, 41, 43,
   9, 11, 18, 24, 31, 40, 44, 53,
  10, 19, 23, 32, 39, 45, 52, 54,
  20, 22, 33, 38, 46, 51, 55, 60,
  21, 34, 37, 47, 50, 56, 59, 61,
  35, 36, 48, 49, 57, 58, 62, 63
};

/*
 * jpeg_natural_order[i] is the natural-order position of the i'th element
 * of zigzag order.
 *
 * When reading corrupted data, the Huffman decoders could attempt
 * to reference an entry beyond the end of this array (if the decoded
 * zero run length reaches past the end of the block).  To prevent
 * wild stores without adding an inner-loop test, we put some extra
 * "63"s after the real entries.  This will cause the extra coefficient
 * to be stored in location 63 of the block, not somewhere random.
 * The worst case would be a run-length of 15, which means we need 16
 * fake entries.
 */

const int jpeg_natural_order[DCTSIZE2+16] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63,
 63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 63, 63, 63, 63, 63, 63, 63, 63
};


/*
 * Arithmetic utilities
 */

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
}


GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
  return a - (a % b);
}


/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines below do it the hard way.  (The performance cost
 * is not all that great, because these routines aren't very heavily used.)
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case, define if we can */
#ifdef USE_FMEM
#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#endif
#endif


GLOBAL(void)
jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
		   JSAMPARRAY output_array, int dest_row,
		   int num_rows, JDIMENSION num_cols)
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
  output_array += dest_row;

  for (row = num_rows; row > 0; row--) {
    inptr = *input_array++;
    outptr = *output_array++;
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}


GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
#else
  register JCOEFPTR inptr, outptr;
  register long count;

  inptr = (JCOEFPTR) input_row;
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}


GLOBAL(void)
jzero_far (void FAR * target, size_t bytestozero)
/* Zero out a chunk of FAR memory. */
/* This might be sample-array data, block-array data, or alloc_large data. */
{
#ifdef FMEMZERO
  FMEMZERO(target, bytestozero);
#else
  register char FAR * ptr = (char FAR *) target;
  register size_t count;

  for (count = bytestozero; count > 0; count--) {
    *ptr++ = 0;
  }
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\encode\unicode.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       unicode.cxx
//
//  Contents:   Support for Unicode character set encoding
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_ENCODE_HXX_
#define X_ENCODE_HXX_
#include "encode.hxx"
#endif

static const TCHAR s_chUnknown = _T('?');

//+-----------------------------------------------------------------------
//
//  Member:     WideCharFromUcs2
//
//  Synopsis:   Convert from UCS-2 to Unicode
//
//------------------------------------------------------------------------

HRESULT
CEncodeReader::WideCharFromUcs2( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    size_t cb = (_cbBuffer - (_pbBufferPtr - _pbBuffer)) & ~1;
    int cch = cb / sizeof(WCHAR);
    TCHAR * p;

    hr = THR( MakeRoomForChars( cch ) );
    if (hr)
        goto Cleanup;

    memcpy( _pchEnd, _pbBufferPtr, cb );

    // Replace private use area characters
    
    p = _pchEnd + cch;
    while (p-- > _pchEnd)
    {
        if (!IsValidWideChar(*p))
            *p = s_chUnknown;
    }

    *pcch = cch;
    _pbBufferPtr += cb;

Cleanup:
    RRETURN(hr);
}

//+-----------------------------------------------------------------------
//
//  Member:     UnicodeFromWideChar
//
//  Synopsis:   Convert from Unicode to UCS-2
//
//------------------------------------------------------------------------

HRESULT
CEncodeWriter::UnicodeFromWideChar( BOOL fReadEof, int * pcb )
{
    HRESULT hr;
    int     cb = _cchBuffer * sizeof(TCHAR);

    hr = THR(MakeRoomForChars(cb));
    if( hr )
        goto Cleanup;

    memcpy( _pbBuffer + _cbBuffer, _pchBuffer, cb );

    *pcb = cb;
    _cbBuffer += cb;

Cleanup:
    RRETURN( hr );
}

#ifndef WINCE
//+-----------------------------------------------------------------------
//
//  Member:     WideCharFromUtf8
//
//  Synopsis:   Convert from UTF-8 to Unicode
//
//------------------------------------------------------------------------

// Unicode value                                UTF-8 value
//
// 0000 0000 0xxx xxxx                          0xxx xxxx
// 0000 0yyy yyxx xxxx                          110y yyyy 10xx xxxx   
// zzzz yyyy yyxx xxxx                          1110 zzzz 10yy yyyy 10xx xxxx
// 1101 10ww wwzz zzyy + 1101 11yy yyxx xxxx    1111 0uuu 10uu zzzz 10yy yyyy 10xx xxxxx (uuuuu = wwww + 1)

static int aiByteCountForLeadNibble[16] =
{
    1,  // 0000
    1,  // 0001
    1,  // 0010
    1,  // 0011
    1,  // 0100
    1,  // 0101
    1,  // 0110
    1,  // 0111
    1,  // 1000
    1,  // 1001
    1,  // 1010
    1,  // 1011
    2,  // 1100
    2,  // 1101
    3,  // 1110
    4   // 1111
};

HRESULT
CEncodeReader::WideCharFromUtf8( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    unsigned char * pb;
    unsigned char * pbStop;
    WCHAR * pchDst;
    int cch;
    WHEN_DBG( BOOL fSkipAssert = FALSE; );


    // First determine the destination size (cch).
    // Note that pbStop is adjust to the last character boundary.

    for (pb = _pbBufferPtr, pbStop = _pbBuffer + _cbBuffer, cch = 0; pb < pbStop;)
    {
        unsigned char t = *pb;
        size_t bytes = aiByteCountForLeadNibble[t>>4];

        if (pb + bytes > pbStop)
        {
            pbStop = pb;
            break;
        }
        else
        {
            pb += bytes;
        }

        cch += 1 + (bytes>>2); // surrogates need an extra wchar
    }
    
    hr = THR( MakeRoomForChars( cch ) );
    if (hr)
        goto Cleanup;

    // Now decode

    for (pchDst  = _pchEnd, pb = _pbBufferPtr; pb < pbStop;)
    {
        unsigned char t = *pb;
        size_t bytes = aiByteCountForLeadNibble[t>>4];
        WCHAR ch = 0;

        switch (bytes)
        {
            case 1:
                // 0xxxxxxx or 10xxxxxx
                // NOTE: 10xxxxxx is invalid (it is following byte, not first)
                if (WCHAR(*pb & 0x80) != 0)
                {
                    ++pb;
                    *pchDst++ = s_chUnknown;
                }
                else
                    *pchDst++ = WCHAR(*pb++);           // 0x0000 - 0x007f
                break;

            case 2:
                // 110XXXXx 10xxxxxx
                // Look for overlong utf-8 sequence.
                if (WCHAR(*pb & 0x1e) == 0)
                {
                    // Invalid utf-8 sequence: 1100000x 10xxxxxx
                    ch = s_chUnknown;
                    pb += 2;
                }
                else
                {
                    ch |= WCHAR(*pb++ & 0x1f) << 6;     // 0x0080 - 0x07ff
                    ch |= WCHAR(*pb++ & 0x3f);
                }

                if (IsValidWideChar(ch))
                {
                    *pchDst++ = ch;
                }
                else
                {
                    *pchDst++ = s_chUnknown;
                }
                break;
                    
            case 3:
                // 1110XXXX 10Xxxxxx 10xxxxxx
                // Look for overlong utf-8 sequence.
                if (   WCHAR(*pb & 0x0f) == 0
                    && WCHAR(*(pb+1) & 0x20) == 0)
                {
                    // Invalid utf-8 sequence: 11100000 100xxxxx 10xxxxxx
                    ch = s_chUnknown;
                    pb += 3;
                }
                else
                {
                    ch  = WCHAR(*pb++ & 0x0f) << 12;    // 0x0800 - 0xffff
                    ch |= WCHAR(*pb++ & 0x3f) << 6;     // 0x0080 - 0x07ff
                    ch |= WCHAR(*pb++ & 0x3f);
                }

                if (IsValidWideChar(ch))
                {
                    *pchDst++ = ch;
                }
                else
                {
                    *pchDst++ = s_chUnknown;
                }
                break;

            case 4:                                 // 0xd800 - 0xdfff (Surrogates)
                // 11110XXX 10XXxxxx 10xxxxxx 10xxxxxx or 11111xxx ....
                // NOTE: 11111xxx is not supported
                if (WCHAR(*pb & 0x08) != 0)
                {
                    // We have more than 4 bytes, and we do not support that yet
                    size_t bytesToSkip = aiByteCountForLeadNibble[*pb & 0x0f];
                    pb += 4 + (bytesToSkip == 4 ? 0 : bytesToSkip);
                    *pchDst++ = s_chUnknown;
                    WHEN_DBG( fSkipAssert = TRUE; );
                    break;
                }
                ch  = WCHAR(*pb++ & 0x07) << 2;
                ch |= WCHAR(*pb & 0x30) >> 4;
                ch  = (ch - 1) << 6;                // ch == 0000 00ww ww00 0000
                ch |= WCHAR(*pb++ & 0x0f) << 2;     // ch == 0000 00ww wwzz zz00
                ch |= WCHAR(*pb & 0x30) >> 4;       // ch == 0000 00ww wwzz zzyy
                *pchDst++ = 0xD800 + ch;
                Assert(IsHighSurrogateChar(pchDst[-1]));
                if (!IsHighSurrogateChar(pchDst[-1]))
                {
                    pchDst[-1] = s_chUnknown;
                    pb += 2;
                    break;
                }

                ch  = WCHAR(*pb++ & 0x0f) << 6;     // ch == 0000 00yy yy00 0000
                ch |= WCHAR(*pb++ & 0x3f);          // ch == 0000 00yy yyxx xxxx
                *pchDst++ = 0xDC00 + ch;
                Assert(IsLowSurrogateChar(pchDst[-1]));
                if (!IsLowSurrogateChar(pchDst[-1]))
                {
                    pchDst--;
                    pchDst[-1] = s_chUnknown;
                    break;
                }
                break;
        }

        WHEN_DBG( cch -= (bytes == 4) ? 2 : 1 );
    }

    Assert( fSkipAssert || cch == 0 );

    *pcch = pchDst - _pchEnd;
    _pbBufferPtr = pbStop;

Cleanup:
    RRETURN(hr);
}

//+-----------------------------------------------------------------------
//
//  Member:     Utf8FromWideChar
//
//  Synopsis:   Convert from Unicode to UTF-8
//
//------------------------------------------------------------------------

static TCHAR s_cUtf8FirstSignal[5] = {0x00, 0x00, 0xC0, 0xE0, 0xF0};

HRESULT
CEncodeWriter::Utf8FromWideChar( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    TCHAR* pch = _pchBuffer, *pchStop = _pchBuffer + _cchBuffer;
    unsigned char* pbDst;
    const  TCHAR cMask   = 0xBF;
    const  TCHAR cSignal = 0x80;
    int    cb;

    // First make a pass to see how many characters we will be converting.

    for( cb = 0; pch < pchStop; )
    {
        const TCHAR ch = *pch++;

        if (ch < 0x800)
        {
            cb += (ch < 0x80) ? 1 : 2;
        }
        else
        {
#ifndef NO_UTF16
            if (!IsHighSurrogateChar(ch))
            {
                cb += 3;
            }
            else
            {
                // NOTE (cthrash): Ideally, if a surrogate pair is split at pchStop boundary,
                // we should wait emitting any multibyte chars until we have more data.
                // Nevertheless, utf-8 converters should be written in such a way that
                // surrogate chars can be stored as one four-byte sequence or two three-
                // byte sequences.  So ignore the issue for now.

                if (pch == pchStop || !IsLowSurrogateChar(*pch))
                {
                    cb += 3;
                }
                else
                {
                    pch++;
                    cb += 4;
                }
            }
#else
            cb += 3;
#endif
        }
    }

    hr = THR( MakeRoomForChars( cb ) );
    if( hr )
        goto Cleanup;

    // Now encode Utf8
    
    for (pbDst  = _pbBuffer + _cbBuffer, pch = _pchBuffer; pch < pchStop;)
    {
        DWORD ch = DWORD(*pch++); // UCS4
        size_t cbTotal;

        if (ch < 0x800)
        {
            cbTotal = (ch < 0x80) ? 1 : 2;
        }
        else
        {
#ifndef NO_UTF16
            if (   IsHighSurrogateChar(ch)
                && pch < pchStop
                && IsLowSurrogateChar(*pch))
            {
                const DWORD ch2 = DWORD(*pch++);
                ch = 0x10000 + ((ch & 0x3ff) << 10) + (ch2 & 0x3ff);
                cbTotal = 4;
            }
            else
            {
                cbTotal = 3;
            }
#else
            cbTotal = 3;
#endif
        }

        pbDst += cbTotal;
        
        switch (cbTotal)
        {
            case 4: *--pbDst = (ch | cSignal) & cMask; ch >>= 6;
            case 3: *--pbDst = (ch | cSignal) & cMask; ch >>= 6;
            case 2: *--pbDst = (ch | cSignal) & cMask; ch >>= 6;
            case 1: *--pbDst = (ch | s_cUtf8FirstSignal[ cbTotal ]);
        }

        pbDst += cbTotal;
    }

    *pcch = cb;                    // return number of bytes converted
    _cbBuffer += cb;

Cleanup:
    RRETURN( hr );
}

#endif  // WINCE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\mifst.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
*/
/*
 * jidctfst.c
 *
 * Copyright (C) 1994-1996, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED

#ifndef USEINLINEASM

GLOBAL(void)
midct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */ 

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

//#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)
/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

//#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
#define MULTIPLY(var,const)  ((DCTELEM) ((var) * (const)))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
//#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#define DEQUANTIZE(coef,quantval)  (((coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

 
/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
    ((ishift_temp = (x)) < 0 ? \
     (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
     (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif

static const __int64  x5a825a825a825a82 = 0x0000016a0000016a ;
static const __int64  x539f539f539f539f = 0x0000fd630000fd63 ; 
static const __int64  x4546454645464546 = 0x0000011500000115 ; 
static const __int64  x61f861f861f861f8 = 0x000001d9000001d9 ; 
static const __int64  const_mask  = 0x03ff03ff03ff03ff ;
static const __int64  const_zero  = 0x0000000000000000 ;


 
/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
midct8x8aan (JCOEFPTR coef_block, short * wsptr, short * quantptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
  __int64 scratch3, scratch5, scratch7 ;

  // do the 2-Dal idct and store the corresponding results
  // from the range_limit array



__asm {

mov ebx, coef_block   ; source coeff
mov	esi, wsptr	  ; temp results
mov edi, quantptr	  ; quant factors

movq mm0,  [ebx+8*12]	; V12
pmullw mm0,  [edi+8*12]
movq mm1,  [ebx+8*4]	; V4
pmullw mm1,  [edi+8*4]
movq mm3,  [ebx+8*0]	; V0
pmullw mm3,  [edi+8*0]

movq mm5,  [ebx+8*8]	; V8
movq mm2, mm1						; duplicate V4

pmullw mm5,  [edi+8*8]
psubw mm1, mm0						; V16 (s1)

movq 	mm7,  x5a825a825a825a82	; 23170 ->V18 (s3)
;***************************************************PackMulW
movq		mm6, mm1

punpcklwd	mm1,  const_zero
paddw mm2, mm0						; V17

pmaddwd		mm1, mm7
movq mm0, mm2						; duplicate V17

punpckhwd	mm6,  const_zero
movq mm4, mm3						; duplicate V0

pmaddwd		mm6, mm7
paddw mm3, mm5						; V19

psrad		mm1, 8
psubw mm4, mm5						; V20 ;mm5 free

psrad		mm6, 8				; mm6 = (s1)

packssdw	mm1, mm6
;**********************************************************
movq mm6, mm3						; duplicate t74=t81

psubw mm1, mm0						; V21 ; mm0 free
paddw mm3, mm2						; V22

movq mm5, mm1						; duplicate V21
paddw mm1, mm4						; V23

movq  [esi+8*4], mm3		; V22
psubw mm4, mm5						; V24; mm5 free

movq  [esi+8*12], mm1		; V23
psubw mm6, mm2						; V25; mm2 free

movq  [esi+8*0], mm4		; V24

; keep mm6 alive all along the next block
movq mm7,  [ebx+8*10]	; V10

pmullw mm7,  [edi+8*10]

movq mm0,  [ebx+8*6]	; V6

pmullw mm0,  [edi+8*6]
movq mm3, mm7						; duplicate V10

movq mm5,  [ebx+8*2]	; V2

pmullw mm5,  [edi+8*2]
psubw mm7, mm0						; V26 (s1/7)

movq mm4,  [ebx+8*14]	; V14

pmullw mm4,  [edi+8*14]
paddw mm3, mm0						; V29 ; free mm0

movq mm1,  x539f539f539f539f	;23170 ->V18 (scratch3)
 ;mm0 = s5, 
;***************************************************PackMulW
movq		 scratch7, mm7
movq		mm2, mm7

punpcklwd	mm7,  const_zero
movq		mm0, mm5				; duplicate V2

pmaddwd		mm7, mm1
paddw		mm5, mm4				; V27

punpckhwd	mm2,  const_zero
psubw 		mm0, mm4		;(s1) for next	; V28 ; free mm4

pmaddwd		mm2, mm1
movq		mm4, mm0

punpcklwd	mm0,  const_zero
psrad		mm7, 8

psrad		mm2, 8			; mm2 = scratch1
movq		mm1, mm4			; duplicate V28

punpckhwd	mm4,  const_zero
packssdw	mm7, mm2

movq		mm2,  x4546454645464546	; 23170 ->V18
;**********************************************************

;***************************************************PackMulW
pmaddwd		mm0, mm2

pmaddwd		mm4, mm2
psrad		mm0, 8

movq	mm2,  x61f861f861f861f8	; 23170 ->V18
psrad		mm4, 8

packssdw	mm0, mm4
movq		mm4, mm1

movq mm1,  scratch7
;**********************************************************

movq	 scratch5, mm0
paddw mm1, mm4						; V32 ; free mm4

;***************************************************PackMulW
movq		mm0, mm1

punpcklwd	mm1,  const_zero
movq		mm4, mm5						; duplicate t90=t93

pmaddwd		mm1, mm2
paddw		mm5, mm3						; V31

punpckhwd	mm0,  const_zero
psubw		mm4, mm3						; V30 ; free mm3

movq 	mm3,  x5a825a825a825a82	; 23170 ->V18
pmaddwd		mm0, mm2

psrad		mm1, 8
movq		mm2, mm4		; make a copy of mm4

punpcklwd	mm4,  const_zero
psrad		mm0, 8

pmaddwd		mm4, mm3
packssdw	mm1, mm0
;**********************************************************

;***************************************************PackMulW
punpckhwd	mm2,  const_zero

movq		mm0,  scratch5
pmaddwd		mm2, mm3

psubw		mm0, mm1						; V38
paddw		mm1, mm7						; V37 ; free mm7

movq		mm7,  [esi+8*4]		; V22
psrad		mm4, 8

psrad		mm2, 8
movq mm3, mm6                       ; duplicate V25

packssdw	mm4, mm2
psubw mm1, mm5						; V39 (mm5 still needed for next block)
;**********************************************************

movq mm2,  [esi+8*12]     ; V23
psubw mm4, mm1						; V40

paddw mm0, mm4						; V41; free mm0

psubw mm6, mm0						; tm6
paddw mm3, mm0						; tm8; free mm1

movq mm0, mm1		; line added by Kumar
movq mm1, mm7						; duplicate V22

movq  [esi+8*8], mm3     ; tm8; free mm3
paddw mm7, mm5						; tm0

movq  [esi+8*6], mm6		; tm6; free mm6
psubw mm1, mm5						; tm14; free mm5

movq mm6,  [esi+8*0]		; V24
movq mm3, mm2						; duplicate t117=t125

movq  [esi+8*0], mm7      ; tm0; free mm7
paddw mm2, mm0						; tm2

movq  [esi+8*14], mm1		; tm14; free mm1
psubw mm3, mm0						; tm12; free mm0

movq  [esi+8*2], mm2		; tm2; free mm2
movq mm0, mm6						; duplicate t119=t123

movq  [esi+8*12], mm3      ; tm12; free mm3
paddw mm6, mm4						; tm4

movq mm1,  [ebx+8*5]	; V5
psubw mm0, mm4						; tm10; free mm4

pmullw mm1,  [edi+8*5]
movq  [esi+8*4], mm6		; tm4; free mm6
movq  [esi+8*10], mm0     ; tm10; free mm0

; column 1: even part
; use V5, V13, V1, V9 to produce V56..V59

movq mm7,  [ebx+8*13]	; V13
movq mm2, mm1						; duplicate t128=t130

pmullw mm7,  [edi+8*13]
movq mm3,  [ebx+8*1]	; V1
pmullw mm3,  [edi+8*1]

movq mm5,  [ebx+8*9]	; V9
psubw mm1, mm7						; V50

pmullw mm5,  [edi+8*9]
paddw mm2, mm7						; V51

movq mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm4, mm1

punpcklwd	mm1,  const_zero
movq		mm6, mm2						; duplicate V51

pmaddwd		mm1, mm7

punpckhwd	mm4,  const_zero

movq mm0,  [ebx+8*11]	; V11
pmaddwd		mm4, mm7

pmullw mm0,  [edi+8*11]
psrad		mm1, 8

psrad		mm4, 8

packssdw	mm1, mm4
movq		mm4, mm3						; duplicate V1
;**********************************************************

paddw		mm3, mm5						; V53
psubw mm4, mm5						; V54 ;mm5 free

movq mm7, mm3						; duplicate V53
psubw mm1, mm6						; V55 ; mm6 free

movq mm6,  [ebx+8*7]	; V7
paddw mm3, mm2						; V56

movq mm5, mm4						; duplicate t140=t142
paddw mm4, mm1						; V57

movq  [esi+8*5], mm3		; V56
psubw mm5, mm1						; V58; mm1 free

pmullw mm6,  [edi+8*7]
psubw mm7, mm2						; V59; mm2 free

movq  [esi+8*13], mm4		; V57
movq mm3, mm0						; duplicate V11

; keep mm7 alive all along the next block
movq  [esi+8*9], mm5		; V58
paddw mm0, mm6						; V63

movq mm4,  [ebx+8*15]	; V15
psubw mm3, mm6						; V60 ; free mm6

pmullw mm4,  [edi+8*15]
; note that V15 computation has a correction step:
; this is a 'magic' constant that rebiases the results to be closer to the expected result
; this magic constant can be refined to reduce the error even more
; by doing the correction step in a later stage when the number is actually multiplied by 16
movq mm1, mm3						; duplicate V60

movq mm5,  [ebx+8*3]	; V3
movq		mm2, mm1

pmullw mm5,  [edi+8*3]

movq  scratch7, mm7
movq mm6, mm5						; duplicate V3

movq mm7,  x539f539f539f539f	; 23170 ->V18
paddw mm5, mm4						; V61

;***************************************************PackMulW
punpcklwd	mm1,  const_zero
psubw mm6, mm4						; V62 ; free mm4

pmaddwd		mm1, mm7
movq mm4, mm5						; duplicate V61

punpckhwd	mm2,  const_zero
paddw mm5, mm0						; V65 -> result

pmaddwd		mm2, mm7
psubw mm4, mm0						; V64 ; free mm0

movq  scratch3, mm3
psrad		mm1, 8

movq mm3,  x5a825a825a825a82	; 23170 ->V18
psrad		mm2, 8

packssdw	mm1, mm2
movq		mm2, mm4
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm4,  const_zero

pmaddwd		mm4, mm3

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm3
psrad		mm4, 8

movq mm3,  scratch3

movq mm0,  x61f861f861f861f8	; 23170 ->V18
paddw		mm3, mm6						; V66

psrad		mm2, 8
movq		mm7, mm3

packssdw	mm4, mm2
movq mm2, mm5					; duplicate V65
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm3,  const_zero

pmaddwd		mm3, mm0

punpckhwd	mm7,  const_zero

pmaddwd		mm7, mm0
movq		mm0, mm6

psrad		mm3, 8

punpcklwd	mm6,  const_zero

psrad		mm7, 8

packssdw	mm3, mm7
;**********************************************************

movq mm7,  x4546454645464546	; 23170 ->V18

;***************************************************PackMulW
punpckhwd	mm0,  const_zero
pmaddwd		mm6, mm7

pmaddwd		mm0, mm7
psrad		mm6, 8

psrad		mm0, 8

packssdw	mm6, mm0
;**********************************************************

movq mm0,  [esi+8*5]		; V56
psubw mm6, mm3						; V72

paddw mm3, mm1						; V71 ; free mm1

psubw mm3, mm2						; V73 ; free mm2
movq mm1, mm0						; duplicate t177=t188

psubw mm4, mm3						; V74
paddw mm0, mm5						; tm1

movq mm2,  [esi+8*13]     ; V57
paddw mm6, mm4						; V75

;location 
;  5 - V56
; 13 - V57
;  9 - V58
;  X - V59, mm7
;  X - V65, mm5
;  X - V73, mm6
;  X - V74, mm4
;  X - V75, mm3                              
; free mm0, mm1 & mm2                        

movq mm7,  scratch7      ; tm1; free mm0
psubw mm1, mm5						; tm15; free mm5

;save the store as used directly in the transpose
movq  [esi+8*1], mm0      ; tm1; free mm0
movq mm5, mm7                       ; duplicate t182=t184

movq mm0,  [esi+8*9]		; V58
psubw mm7, mm6						; tm7

paddw mm5, mm6						; tm9; free mm6
movq mm6, mm3

movq  [esi+8*7], mm7		; tm7; free mm7
movq mm3, mm2						; duplicate V57

psubw mm3, mm6						; tm13
paddw mm2, mm6						; tm3 ; free mm6

movq  [esi+8*3], mm2		; tm3; free mm2
movq mm6, mm0						; duplicate V58

paddw mm0, mm4						; tm5
psubw mm6, mm4						; tm11; free mm4

movq  [esi+8*5], mm0		; tm5; free mm0
movq		mm0, mm5			; copy w4---0,1,3,5,6


; transpose the bottom right quadrant(4X4) of the matrix
;  ---------       ---------
; | M1 | M2 |     | M1'| M3'|
;  ---------  -->  ---------
; | M3 | M4 |     | M2'| M4'|
;  ---------       ---------

punpcklwd	mm5, mm6			;

punpckhwd	mm0, mm6			;---0,1,3,5,6 
movq	mm6,  [esi+8*0]  ;get w0 of top left quadrant

movq		mm2, mm3			;---0,1,2,3,5,6
punpcklwd	mm3, mm1			;

movq	mm7,  [esi+8*2]  ;get w1 of top left quadrant
punpckhwd	mm2, mm1			;---0,2,3,5,6,7

movq		mm4, mm5			;---0,2,3,4,5,6,7
punpckldq	mm5, mm3			; transposed w4

movq	 [esi+8*9], mm5  ; store w4
punpckhdq	mm4, mm3			; transposed w5---0,2,4,6,7

movq		mm3, mm0			;---0,2,3,4,6,7
punpckldq	mm0, mm2			; transposed w6

movq	 [esi+8*11], mm4  ; store w5
punpckhdq	mm3, mm2			; transposed w7---0,3,6,7

movq	 [esi+8*13], mm0  ; store w6---3,5,6,7	
movq	mm5, mm6				; copy w0

movq	 [esi+8*15], mm3  ; store w7---5,6,7
punpcklwd	mm6, mm7

; transpose the top left quadrant(4X4) of the matrix

punpckhwd	mm5, mm7			;---5,6,7
movq	mm7,  [esi+8*4]  ; get w2 of TL quadrant

movq	mm4,  [esi+8*6]  ; get w3 of TL quadrant
movq	mm3, mm7				; copy w2---3,4,5,6,7

movq		mm2, mm6
punpcklwd	mm7, mm4			;---2,3,4,5,6,7

punpckhwd	mm3, mm4			;---2,3,4,5,6,7
movq		mm4, mm5			;	

movq		mm1, mm5
punpckldq	mm6, mm7			;---1,2,3,4,5,6,7

movq	 [esi+8*0], mm6	; store w0 of TL quadrant
punpckhdq	mm2, mm7			;---1,2,3,4,5,6,7

movq	 [esi+8*2], mm2	; store w1 of TL quadrant
punpckldq	mm5, mm3			;---1,2,3,4,5,6,7

movq	 [esi+8*4], mm5	; store w2 of TL quadrant
punpckhdq	mm1, mm3			;---1,2,3,4,5,6,7

movq	 [esi+8*6], mm1	; store w3 of TL quadrant


; transpose the top right quadrant(4X4) of the matrix

movq	mm0,  [esi+8*1]	;---0

movq	mm1,  [esi+8*3]	;---0,1,2
movq	mm2, mm0

movq	mm3,  [esi+8*5]
punpcklwd	mm0, mm1				;---0,1,2,3

punpckhwd	mm2, mm1
movq	mm1,  [esi+8*7]	;---0,1,2,3

movq	mm4, mm3
punpcklwd	mm3, mm1				;---0,1,2,3,4

punpckhwd	mm4, mm1				;---0,1,2,3,4
movq	mm1, mm0

movq	mm5, mm2
punpckldq	mm0, mm3				;---0,1,2,3,4,5

punpckhdq	mm1, mm3				;---0,1,2,3,4,5
movq		mm3,  [esi+8*8]

movq		 [esi+8*8], mm0
punpckldq	mm2, mm4				;---1,2,3,4,5

punpckhdq	mm5, mm4				;---1,2,3,4,5
movq		mm4,  [esi+8*10]

; transpose the bottom left quadrant(4X4) of the matrix
; Also store w1,w2,w3 of top right quadrant into
; w5,w6,w7 of bottom left quadrant. Storing w0 of TR in w4
; of BL is already done.

movq	 [esi+8*10], mm1
movq	mm1, mm3					;---1,2,3,4,5

movq	mm0,  [esi+8*12]
punpcklwd	mm3, mm4				;---0,1,2,3,4,5

punpckhwd	mm1, mm4				;---0,1,2,3,4,5
movq	mm4,  [esi+8*14]

movq	 [esi+8*12], mm2
movq	mm2, mm0

movq	 [esi+8*14], mm5
punpcklwd	mm0, mm4				;---0,1,2,3,4

punpckhwd	mm2, mm4				;---0,1,2,3,4
movq	mm4, mm3

movq	mm5, mm1
punpckldq	mm3, mm0				;---0,1,2,3,4,5

movq	 [esi+8*1], mm3
punpckhdq	mm4, mm0				;---1,2,4,5

movq	 [esi+8*3], mm4
punpckldq	mm1, mm2				;---1,2,5

movq	 [esi+8*5], mm1
punpckhdq	mm5, mm2				;---5

movq	 [esi+8*7], mm5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;   1D DCT of the rows    ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


mov	esi, wsptr  ; source

; column 0: even part
; use V4, V12, V0, V8 to produce V22..V25
movq mm0,  [esi+8*12]	; V12

movq mm1,  [esi+8*4]	; V4

movq mm3,  [esi+8*0]	; V0
movq mm2, mm1						; duplicate V4

movq mm5,  [esi+8*8]	; V8
psubw mm1, mm0						; V16

movq mm6,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm4, mm1

punpcklwd	mm1,  const_zero
paddw mm2, mm0						; V17

pmaddwd		mm1, mm6
movq mm0, mm2						; duplicate V17

punpckhwd	mm4,  const_zero

pmaddwd		mm4, mm6
psrad		mm1, 8

psrad		mm4, 8

packssdw	mm1, mm4
movq		mm4, mm3						; duplicate V0
;**********************************************************

paddw mm3, mm5						; V19
psubw mm4, mm5						; V20 ;mm5 free

movq mm6, mm3						; duplicate t74=t81
psubw mm1, mm0						; V21 ; mm0 free

paddw mm3, mm2						; V22
movq mm5, mm1						; duplicate V21

paddw mm1, mm4						; V23

movq  [esi+8*4], mm3		; V22
psubw mm4, mm5						; V24; mm5 free

movq  [esi+8*12], mm1		; V23
psubw mm6, mm2						; V25; mm2 free

movq  [esi+8*0], mm4		; V24
; keep mm6 alive all along the next block
; column 0: odd part
; use V2, V6, V10, V14 to produce V31, V39, V40, V41
movq mm7,  [esi+8*10]	; V10

movq mm0,  [esi+8*6]	; V6
movq mm3, mm7						; duplicate V10

movq mm5,  [esi+8*2]	; V2
psubw mm7, mm0						; V26

movq mm4,  [esi+8*14]	; V14
paddw mm3, mm0						; V29 ; free mm0

movq mm2,  x539f539f539f539f	; 23170 ->V18
movq mm1, mm7						; duplicate V26

;***************************************************PackMulW
movq		 scratch5, mm6	; store mm6
movq		mm0, mm7

punpcklwd	mm7,  const_zero

pmaddwd		mm7, mm2

punpckhwd	mm0,  const_zero

pmaddwd		mm0, mm2
psrad		mm7, 8

movq mm6,  x4546454645464546	; 23170 ->V18
psrad		mm0, 8

packssdw	mm7, mm0
movq		mm0, mm5				; duplicate V2
;**********************************************************

paddw mm5, mm4						; V27
psubw mm0, mm4						; V28 ; free mm4

movq mm2, mm0						; duplicate V28
;***************************************************PackMulW
movq		mm4, mm0

punpcklwd	mm0,  const_zero

pmaddwd		mm0, mm6

punpckhwd	mm4,  const_zero

pmaddwd		mm4, mm6
paddw mm1, mm2						; V32 ; free mm2

movq mm2,  x61f861f861f861f8	; 23170 ->V18
psrad		mm0, 8

psrad		mm4, 8
movq		mm6, mm1

packssdw	mm0, mm4
movq		mm4, mm5			; duplicate t90=t93
;**********************************************************

;***************************************************PackMulW
punpcklwd	mm1,  const_zero
paddw		mm5, mm3				; V31

pmaddwd		mm1, mm2
psubw		mm4, mm3				; V30 ; free mm3

punpckhwd	mm6,  const_zero

pmaddwd		mm6, mm2
psrad		mm1, 8

psrad		mm6, 8

packssdw	mm1, mm6
;**********************************************************

psubw mm0, mm1						; V38
paddw mm1, mm7						; V37 ; free mm7

movq		mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm3, mm4

punpcklwd	mm4,  const_zero
psubw		mm1, mm5				; V39 (mm5 still needed for next block)

pmaddwd		mm4, mm7

punpckhwd	mm3,  const_zero

movq		mm6,  scratch5
pmaddwd		mm3, mm7

movq mm2,  [esi+8*12]     ; V23
psrad		mm4, 8

movq mm7,  [esi+8*4]		; V22
psrad		mm3, 8

packssdw	mm4, mm3
movq		mm3, mm6                       ; duplicate V25
;**********************************************************						  

psubw mm4, mm1						; V40

paddw mm0, mm4						; V41; free mm0

; column 0: output butterfly

psubw mm6, mm0						; tm6
paddw mm3, mm0						; tm8; free mm1

movq mm0, mm1		; line added by Kumar
movq mm1, mm7						; duplicate V22

movq  [esi+8*8], mm3     ; tm8; free mm3
paddw mm7, mm5						; tm0

movq  [esi+8*6], mm6		; tm6; free mm6
psubw mm1, mm5						; tm14; free mm5

movq mm6,  [esi+8*0]		; V24
movq mm3, mm2						; duplicate t117=t125

movq  [esi+8*0], mm7      ; tm0; free mm7
paddw mm2, mm0						; tm2

movq  [esi+8*14], mm1		; tm14; free mm1
psubw mm3, mm0						; tm12; free mm0

movq  [esi+8*2], mm2		; tm2; free mm2
movq mm0, mm6						; duplicate t119=t123

movq  [esi+8*12], mm3      ; tm12; free mm3
paddw mm6, mm4						; tm4

movq mm1,  [esi+8*5]	; V5
psubw mm0, mm4						; tm10; free mm4

movq  [esi+8*4], mm6		; tm4; free mm6

movq  [esi+8*10], mm0     ; tm10; free mm0

; column 1: even part
; use V5, V13, V1, V9 to produce V56..V59

movq mm7,  [esi+8*13]	; V13
movq mm2, mm1						; duplicate t128=t130

movq mm3,  [esi+8*1]	; V1
psubw mm1, mm7						; V50

movq mm5,  [esi+8*9]	; V9
paddw mm2, mm7						; V51

movq mm4,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm6, mm1

punpcklwd	mm1,  const_zero

pmaddwd		mm1, mm4

punpckhwd	mm6,  const_zero

pmaddwd		mm6, mm4
movq		mm4, mm3				; duplicate V1

paddw mm3, mm5						; V53
psrad		mm1, 8

psubw mm4, mm5						; V54 ;mm5 free
movq mm7, mm3						; duplicate V53

psrad		mm6, 8

packssdw	mm1, mm6
movq		mm6, mm2				; duplicate V51

;**********************************************************
psubw mm1, mm6						; V55 ; mm6 free
paddw mm3, mm2						; V56

movq mm5, mm4						; duplicate t140=t142
paddw mm4, mm1						; V57

movq  [esi+8*5], mm3		; V56
psubw mm5, mm1						; V58; mm1 free

movq  [esi+8*13], mm4		; V57
psubw mm7, mm2						; V59; mm2 free

movq  [esi+8*9], mm5		; V58

; keep mm7 alive all along the next block

movq mm0,  [esi+8*11]	; V11

movq mm6,  [esi+8*7]	; V7

movq mm4,  [esi+8*15]	; V15
movq mm3, mm0						; duplicate V11

movq mm5,  [esi+8*3]	; V3
paddw mm0, mm6						; V63

; note that V15 computation has a correction step:
; this is a 'magic' constant that rebiases the results to be closer to the expected result
; this magic constant can be refined to reduce the error even more
; by doing the correction step in a later stage when the number is actually multiplied by 16
movq	 scratch7, mm7
psubw mm3, mm6						; V60 ; free mm6

movq mm6,  x539f539f539f539f	; 23170 ->V18
movq mm1, mm3						; duplicate V60

;***************************************************PackMulW
movq		mm7, mm1

punpcklwd	mm1,  const_zero

pmaddwd		mm1, mm6

punpckhwd	mm7,  const_zero

pmaddwd		mm7, mm6
movq mm6, mm5						; duplicate V3

paddw mm5, mm4						; V61
psrad		mm1, 8

psubw mm6, mm4						; V62 ; free mm4
movq mm4, mm5						; duplicate V61

psrad		mm7, 8
paddw mm5, mm0						; V65 -> result

packssdw	mm1, mm7
psubw mm4, mm0						; V64 ; free mm0
;**********************************************************

movq mm7,  x5a825a825a825a82	; 23170 ->V18
;***************************************************PackMulW
movq		mm2, mm4

punpcklwd	mm4,  const_zero
paddw		mm3, mm6			; V66

pmaddwd		mm4, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm7,  x61f861f861f861f8	; 23170 ->V18
psrad		mm4, 8

psrad		mm2, 8

packssdw	mm4, mm2
;**********************************************************
;***************************************************PackMulW
movq		mm2, mm3

punpcklwd	mm3,  const_zero

pmaddwd		mm3, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm7,  x4546454645464546	; 23170 ->V18
psrad		mm3, 8

psrad		mm2, 8

packssdw	mm3, mm2
;**********************************************************
;***************************************************PackMulW
movq		mm2, mm6

punpcklwd	mm6,  const_zero

pmaddwd		mm6, mm7

punpckhwd	mm2,  const_zero

pmaddwd		mm2, mm7

movq mm0,  [esi+8*5]		; V56
psrad		mm6, 8

movq	mm7,  scratch7
psrad		mm2, 8

packssdw	mm6, mm2
movq		mm2, mm5			; duplicate V65
;**********************************************************

psubw mm6, mm3						; V72
paddw mm3, mm1						; V71 ; free mm1

psubw mm3, mm2						; V73 ; free mm2
movq mm1, mm0						; duplicate t177=t188

psubw mm4, mm3						; V74
paddw mm0, mm5						; tm1

movq mm2,  [esi+8*13]     ; V57
paddw mm6, mm4						; V75


;location 
;  5 - V56
; 13 - V57
;  9 - V58
;  X - V59, mm7
;  X - V65, mm5
;  X - V73, mm6
;  X - V74, mm4
;  X - V75, mm3                              
; free mm0, mm1 & mm2                        

movq  [esi+8*1], mm0      ; tm1; free mm0
psubw mm1, mm5						; tm15; free mm5

;save the store as used directly in the transpose
movq mm5, mm7                       ; duplicate t182=t184
psubw mm7, mm6						; tm7

paddw mm5, mm6						; tm9; free mm3
movq mm6, mm3

movq mm0,  [esi+8*9]		; V58
movq mm3, mm2						; duplicate V57

movq  [esi+8*7], mm7		; tm7; free mm7
psubw mm3, mm6						; tm13

paddw mm2, mm6						; tm3 ; free mm6
movq mm6, mm0						; duplicate V58

movq  [esi+8*3], mm2		; tm3; free mm2
paddw mm0, mm4						; tm5

psubw mm6, mm4						; tm11; free mm4

movq  [esi+8*5], mm0		; tm5; free mm0


; Final results to be stored after the transpose
; transpose the bottom right quadrant(4X4) of the matrix
;  ---------       ---------
; | M1 | M2 |     | M1'| M3'|
;  ---------  -->  ---------
; | M3 | M4 |     | M2'| M4'|
;  ---------       ---------
;
; get the pointer to array "range"
mov		edi, range_limit

; calculate the destination address
mov		edx,  output_buf		; get output_buf[4]

mov		ebx, [edx+16]
add		ebx,  output_col			; add to output_col	

movq		mm0, mm5			; copy w4---0,1,3,5,6
punpcklwd	mm5, mm6			;

punpckhwd	mm0, mm6			;---0,1,3,5,6
movq		mm2, mm3			;---0,1,2,3,5,6
 
movq	mm6,  [esi+8*0]  ;get w0 of top left quadrant
punpcklwd	mm3, mm1			;

movq	mm7,  [esi+8*2]  ;get w1 of top left quadrant
punpckhwd	mm2, mm1			;---0,2,3,5,6,7

movq		mm4, mm5			;---0,2,3,4,5,6,7
punpckldq	mm5, mm3			; transposed w4

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ebx, [edx+20]
add		ebx,  output_col			; add to output_col	

punpckhdq	mm4, mm3			; transposed w5---0,2,4,6,7

movq		mm3, mm0			;---0,2,3,4,6,7
punpckldq	mm0, mm2			; transposed w6

psrlw	mm4, 5
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ecx, [edx+24]			
add		ecx,  output_col			; add to output_col	

punpckhdq	mm3, mm2			; transposed w7---0,3,6,7

psrlw	mm0, 5

movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+4], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+5], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+6], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+7], al

mov		ebx, [edx+28]		
add		ebx,  output_col			; add to output_col	

movq	mm5, mm6				; copy w0

psrlw	mm3, 5
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al


punpcklwd	mm6, mm7

; transpose the top left quadrant(4X4) of the matrix

; calculate the destination address
mov		edx, output_buf		; get output_buf[0]

mov		ebx, [edx+0]
add		ebx, output_col			; add to output_col	


movq	mm4,  [esi+8*6]  ; get w3 of TL quadrant
punpckhwd	mm5, mm7			;---5,6,7

movq	mm7,  [esi+8*4]  ; get w2 of TL quadrant
movq		mm2, mm6

movq	mm3, mm7				; copy w2---3,4,5,6,7
punpcklwd	mm7, mm4			;---2,3,4,5,6,7

punpckhwd	mm3, mm4			;---2,3,4,5,6,7
movq		mm4, mm5			;	

movq		mm1, mm5
punpckldq	mm6, mm7			;---1,2,3,4,5,6,7

psrlw	mm6, 5
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm6, 16
movd    eax, mm6
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


mov		ebx, [edx+4]
add		ebx, output_col			; add to output_col	

punpckhdq	mm2, mm7			;---1,2,3,4,5,6,7

psrlw	mm2, 5
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


mov		ecx, [edx+8]			
add		ecx, output_col			; add to output_col	

punpckldq	mm5, mm3			;---1,2,3,4,5,6,7

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+1], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+2], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+3], al


mov		ebx, [edx+12]		
add		ebx, output_col			; add to output_col	

punpckhdq	mm1, mm3			;---1,2,3,4,5,6,7

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


; transpose the top right quadrant(4X4) of the matrix

; calculate the destination address for **bottom left quadrant
mov		edx, output_buf		; get output_buf[4]

mov		ebx, [edx+16]
add		ebx, output_col			; add to output_col	

movq	mm0,  [esi+8*1]	;---0

movq	mm1,  [esi+8*3]	;---0,1,2
movq	mm2, mm0

movq	mm3,  [esi+8*5]
punpcklwd	mm0, mm1				;---0,1,2,3

punpckhwd	mm2, mm1
movq	mm4, mm3

movq	mm1,  [esi+8*7]	;---0,1,2,3
movq	mm5, mm2

punpcklwd	mm3, mm1				;---0,1,2,3,4

punpckhwd	mm4, mm1				;---0,1,2,3,4
movq	mm1, mm0

punpckldq	mm0, mm3				;---0,1,2,3,4,5

punpckhdq	mm1, mm3				;---0,1,2,3,4,5

movq		mm3,  [esi+8*8]
psrlw	mm0, 5
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm0, 16
movd    eax, mm0
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al

mov		ebx, [edx+20]
add		ebx, output_col			; add to output_col	

punpckldq	mm2, mm4				;---1,2,3,4,5

punpckhdq	mm5, mm4				;---1,2,3,4,5
movq		mm4,  [esi+8*10]

; transpose the bottom left quadrant(4X4) of the matrix
; Also store w1,w2,w3 of top right quadrant into
; w5,w6,w7 of bottom left quadrant. Storing w0 of TR in w4
; of BL is already done.

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al

mov		ecx, [edx+24]			
add		ecx, output_col			; add to output_col	

movq	mm0,  [esi+8*12]
movq	mm1, mm3					;---1,2,3,4,5

punpcklwd	mm3, mm4				;---0,1,2,3,4,5

punpckhwd	mm1, mm4				;---0,1,2,3,4,5

movq	mm4,  [esi+8*14]
psrlw	mm2, 5
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+1], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+2], al

psrlq	mm2, 16
movd    eax, mm2
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+3], al

mov		ebx, [edx+28]		
add		ebx, output_col			; add to output_col	

movq	mm2, mm0

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx], al


psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+1], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+2], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+3], al


punpcklwd	mm0, mm4				;---0,1,2,3,4

punpckhwd	mm2, mm4				;---0,1,2,3,4
movq	mm4, mm3

movq	mm5, mm1
punpckldq	mm3, mm0				;---0,1,2,3,4,5

; calculate the destination address for **top right quadrant
mov		edx, output_buf		; get output_buf[0]

mov		ebx, [edx+0]
add		ebx, output_col			; add to output_col	

psrlw	mm3, 5
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm3, 16
movd    eax, mm3
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ebx, [edx+4]
add		ebx, output_col			; add to output_col	

punpckhdq	mm4, mm0				;---1,2,4,5

psrlw	mm4, 5
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm4, 16
movd    eax, mm4
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

mov		ecx, [edx+8]			
add		ecx, output_col			; add to output_col	

punpckldq	mm1, mm2				;---1,2,5

psrlw	mm1, 5
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+4], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+5], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+6], al

psrlq	mm1, 16
movd    eax, mm1
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ecx+7], al

mov		ebx, [edx+12]		
add		ebx, output_col			; add to output_col	

punpckhdq	mm5, mm2				;---5

psrlw	mm5, 5
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+4], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+5], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+6], al

psrlq	mm5, 16
movd    eax, mm5
and		eax, 03ffh
mov		al, byte ptr [edi][eax]
mov		byte ptr [ebx+7], al

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

emms


} /* end of __asm */
}


#endif /* X86 */

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\encode\encode.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       encode.cxx
//
//  Contents:   Support for HTML character set encoding
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_ENCODE_HXX_
#define X_ENCODE_HXX_
#include "encode.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifdef WIN16
#define MB_PRECOMPOSED   0
#define MB_ERR_INVALID_CHARS 0
#endif

DeclareTag(tagEncGeneral,        "Enc", "Encode: General");
DeclareTag(tagEncAlwaysUseMlang, "Enc", "Encode: Always Use Mlang");

MtDefine(CEncodeReader, Utilities, "CEncodeReader")
MtDefine(CEncodeReaderPbBuf, CEncodeReader, "CEncodeReader::_pbBuffer")
MtDefine(CEncodeWriter, Utilities, "CEncodeWriter")
MtDefine(CEncodeWriterPbBuf, CEncodeWriter, "CEncodeWriter::_pbBuffer")
MtDefine(CEncodeWriterPchBuf, CEncodeWriter, "CEncodeWriter::_pchBuffer")
MtDefine(CToUnicodeConverterPchBuf, Utilities, "CToUnicodeConverter")

struct ENCODINGREADFUNC
{
    CODEPAGE cp;
    DECLARE_ENCODING_FUNCTION( (CEncodeReader::*pfnWCFromMB) );
};

struct ENCODINGWRITEFUNC
{
    CODEPAGE cp;
    DECLARE_ENCODING_FUNCTION( (CEncodeWriter::*pfnMBFromWC) );
};

BOOL IsSameEncoding(CODEPAGE cp1, CODEPAGE cp2)
{
    if (cp1 == cp2)
        return TRUE;

    // For now, all encodings are different except for windows-1252 and ISO-8859
    if (cp1 == CP_1252 && cp2 == CP_ISO_8859_1 || cp1 == CP_ISO_8859_1 && cp2 == CP_1252)
        return TRUE;

    return FALSE;
}

CEncode::CEncode( size_t nBlockSize )
{
    _cp = CP_UNDEFINED;
    _nBlockSize = nBlockSize;
    _dwState = 0UL;
}


CEncode::~CEncode()
{
}

CEncodeReader::CEncodeReader(
    CODEPAGE cp,
    size_t nBlockSize ) : CEncode( nBlockSize )
{
    _fCheckedForUnicode = FALSE;
    _fDiscardUtf7BOM = FALSE;
    _fDetectionFailed = FALSE;
    _cbScanStart = 0;
    _pfnWideCharFromMultiByte = NULL;
    _pchBuffer = NULL;
    _pbBuffer = NULL;

    SwitchCodePage( cp, NULL ); // sets _pfnWideCharFromMultiByte
}

CEncodeReader::~CEncodeReader()
{
    if (_pchBuffer)
    {
        MemFree(_pchBuffer);
        _pchBuffer = NULL;
    }
    if (_pbBuffer)
    {
        MemFree(_pbBuffer);
        _pbBuffer = NULL;
    }
}

BOOL
CEncodeReader::Exhausted()
{
    // If we're left with a only few DBCS orphan characters at the end,
    // consider ourselves exhausted.  The orphan characters will come
    // back to life in the next iteration of CEncodeReader::PrepareForRead().

    // Note that if we're in autodetect mode, we can have _cbScanStart != 0.
    // What this means is that we've scanned that many bytes without being
    // able determine the encoding.  We leave _pbBufferPtr as is because
    // that's where we need to start converting, but there's no point in
    // rescanning from there when we read more bytes.  We start scanning from
    // _cbScanStart bytes in to _pbBufferPtr.

    return _pbBuffer &&
           (_cbBuffer - ( _pbBufferPtr + _cbScanStart - _pbBuffer ) <
            ENCODE_DBCS_THRESHOLD);
}

BOOL
CEncodeReader::ForceSwitchCodePage( CODEPAGE cp, BOOL *pfDifferentEncoding )
{
    BOOL fSwitched = FALSE;

    fSwitched = CEncodeReader::SwitchCodePage(cp, pfDifferentEncoding);

    // see if we wanted to switch but failed
    if (cp != _cp && !fSwitched)
    {
        // check to see if the codepage can be jit-in
        if (S_OK == THR(mlang().IsCodePageInstallable(cp)))
        {
            fSwitched = TRUE;

            if (pfDifferentEncoding)
            {
                *pfDifferentEncoding = !IsSameEncoding(cp, _cp);
            }

            _cp = cp;
        }
    }

    return fSwitched;
}

BOOL
CEncodeReader::SwitchCodePage( CODEPAGE cp, BOOL *pfDifferentEncoding, BOOL fNeedRestart)
{
    BOOL fSuccess = FALSE, fSwitched;
    static const struct ENCODINGREADFUNC aEncodingFuncs[] =
    {
        { CP_1252,         &CEncodeReader::WideCharFromMultiByteGeneric },
        { CP_ISO_8859_1,   &CEncodeReader::WideCharFromMultiByteGeneric },
#ifndef WINCE
        { CP_UTF_8,        &CEncodeReader::WideCharFromUtf8 },
#endif // WINCE
        { CP_UCS_2,        &CEncodeReader::WideCharFromUcs2 },
        { CP_1250,         &CEncodeReader::WideCharFromMultiByteGeneric },
        { CP_1251,         &CEncodeReader::WideCharFromMultiByteGeneric },
        { CP_1253,         &CEncodeReader::WideCharFromMultiByteGeneric },
        { CP_1254,         &CEncodeReader::WideCharFromMultiByteGeneric },
        { CP_1257,         &CEncodeReader::WideCharFromMultiByteGeneric },
    };

    const struct ENCODINGREADFUNC * p = aEncodingFuncs;
    const struct ENCODINGREADFUNC * pStop = aEncodingFuncs +
                                        ARRAY_SIZE( aEncodingFuncs );

    // Nothing has changed, quickly bail.

    if (cp == _cp && _pfnWideCharFromMultiByte)
        goto Cleanup;

    Assert(cp != CP_ACP);

#if DBG == 1
    if (!IsTagEnabled(tagEncAlwaysUseMlang)) {
#endif

    // See if we can handle this codepage natively.
    for (;p < pStop;p++)
    {
        if (cp == p->cp)
            break;
    }

    if (p < pStop)
    {
        // Check to see if we can go from the native codepage to Unicode.

        fSuccess = IsStraightToUnicodeCodePage(cp);
        if (!fSuccess)
        {
            UINT uCP = WindowsCodePageFromCodePage( cp );
            CPINFO cpinfo;

            fSuccess = GetCPInfo( uCP, &cpinfo );
            if (fSuccess)
            {
                _uMaxCharSize = cpinfo.MaxCharSize;
            }
        }
    }

#if DBG == 1
    }
    else
    {
        p = pStop;
        TraceTag((tagEncAlwaysUseMlang, "Forcing mlang use for codepage %d", cp));
    }
#endif

    // If we cannot handle this codepage natively, hand it over to mlang
    if (!fSuccess)
    {
        fSuccess = (S_OK == THR(mlang().IsConvertible(cp, CP_UCS_2)));
    }

    if (fSuccess)
    {
        _pfnWideCharFromMultiByte = p == pStop ?
           &CEncodeReader::WideCharFromMultiByteMlang : p->pfnWCFromMB;
    }
    else
    {
        // If we failed, do not switch code pages.
        TraceTag((tagEncGeneral, "Don't know how to read with codepage: %d", cp));
        cp = _cp;
    }

    TraceTag((tagEncGeneral, "CEncodeReader switching to codepage: %d", cp));

Cleanup:

    if (!_pfnWideCharFromMultiByte)
    {
        // If we still haven't come up with an encoding use 1252
        _pfnWideCharFromMultiByte = &CEncodeReader::WideCharFromMultiByteGeneric;
        cp = CP_1252;
        _uMaxCharSize = 1;
    }

    fSwitched = _cp != cp;

    if (pfDifferentEncoding)
    {
        *pfDifferentEncoding = !IsSameEncoding(cp, _cp);
    }

    _cp = cp;

    return fSwitched;
}

HRESULT
CEncodeReader::PrepareToEncode()
{
    HRESULT hr = S_OK;

    if (!_pbBuffer)
    {
        _cbBufferMax = BlockSize() + ENCODE_DBCS_THRESHOLD;
        _cbBuffer = _cbBufferMax;
        _pbBuffer = (unsigned char *)MemAlloc(Mt(CEncodeReaderPbBuf), _cbBufferMax );
        if (!_pbBuffer)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
        _pbBufferPtr = _pbBuffer + _cbBuffer;
    }

    //
    // _cbBuffer is the number of valid multibyte characters in our
    // multibyte buffer. It is non-zero when (a) you've split a multibyte
    // character at a read boundary, or (b) autodetection has not yet been
    // able to correctly identify the encoding.
    //

    _cbBuffer -= (INT)(_pbBufferPtr - _pbBuffer);

    memmove( _pbBuffer, _pbBufferPtr, _cbBuffer );

    if (_cbBuffer > ENCODE_DBCS_THRESHOLD)
    {
        // Ensure that we have space to read an BlockSize() chunk.

        _cbBufferMax = _cbBuffer + BlockSize();
        hr = THR( MemRealloc(Mt(CEncodeReaderPbBuf), (void **)&_pbBuffer , _cbBufferMax ) );
        if (hr)
            goto Cleanup;
    }

    _pbBufferPtr = _pbBuffer + _cbBuffer;

Cleanup:
    RRETURN(hr);
}

HRESULT
CEncodeReader::WideCharFromMultiByte( BOOL fReadEof, int * pcch )
{
    HRESULT hr;

#ifndef WIN16
    // Do a quick check for Unicode files

    if (!_fCheckedForUnicode)
    {
        AssertSz(_pbBufferPtr == _pbBuffer,
                 "We should be at the beginning of the buffer.");

        BOOL fCheckNoFurther = FALSE;

        for (;;)
        {

            if (_cbBuffer > 1)
            {
                WCHAR uSignature = *(WCHAR *)_pbBuffer;

                // TODO (davidd) Support NON/NATIVE_UNICODE_CODEPAGE (sizeof(WCHAR) == 4/2)
                if (NATIVE_UNICODE_SIGNATURE == uSignature)
                {
                    // (davidd) CP_UCS_2 does not currently distinguish between
                    // 2/4 byte unicode so it is the right answer for native
                    // unicode reading..  should be NATIVE_UNICODE_CODEPAGE

                    SwitchCodePage( CP_UCS_2 );
                    _pbBufferPtr += sizeof(WCHAR);
                    fCheckNoFurther = TRUE;
                    break;
                }
                else if (NONNATIVE_UNICODE_SIGNATURE == uSignature)
                {
                    SwitchCodePage( CP_UCS_2_BIGENDIAN );
                    _pbBufferPtr += sizeof(WCHAR);
                    fCheckNoFurther = TRUE;
                    break;
                }
            }

            if (_cbBuffer > 2)
            {
                if (   _pbBufferPtr[0] == 0xEF
                     && _pbBufferPtr[1] == 0xBB
                     && _pbBufferPtr[2] == 0xBF)
                {
                    SwitchCodePage( CP_UTF_8 );
                    _pbBufferPtr += 3;
                    fCheckNoFurther = TRUE;
                    break;
                }
            }

            if (_cbBuffer > 3)
            {
                if (   _pbBufferPtr[0] == '+'
                    && _pbBufferPtr[1] == '/'
                    && _pbBufferPtr[2] == 'v'
                    && (   _pbBufferPtr[3] == '8'
                        || _pbBufferPtr[3] == '9'
                        || _pbBufferPtr[3] == '+'
                        || _pbBufferPtr[3] == '/'))
                {
                    SwitchCodePage( CP_UTF_7 );
                    _fDiscardUtf7BOM = TRUE;
                }

                fCheckNoFurther = TRUE;
            }

            break;
        }

        _fCheckedForUnicode = fCheckNoFurther;
    }
#endif //!WIN16

    hr = THR( CALL_METHOD( this, _pfnWideCharFromMultiByte, ( fReadEof, pcch )) );

    RRETURN(hr);
}

HRESULT
CEncodeReader::WideCharFromMultiByteGeneric( BOOL fReadEof, int * pcch )
{
    size_t cb = _cbBuffer - (_pbBufferPtr - _pbBuffer);
    size_t cch = 0;
    HRESULT hr = S_OK;
    CODEPAGE cp = _cp;

    // PERF HACK (grzegorz): We are using WideCharFromMultiByteGeneric to convert
    //      from CP_ISO_8859_1 to Unicode, but MultiByteToWideChar in this case
    //      doesn't converts all characters properly (example: 0x80 (euro)).
    //      MLang has a hack for this case, they are using CP_1252. To make the
    //      behavior consistent we need to do the same.
    if (cp == CP_ISO_8859_1)
        cp = CP_1252;

    // If we have a multibyte character encoding, we are at risk of splitting
    // some characters at the read boundary.  We must Make sure we have a
    // discrete number of characters first.

    Assert( _uMaxCharSize );

    if (_uMaxCharSize > 1)
    {
        UINT uMax = _uMaxCharSize;
        cb++;// pre-increment
        do
        {
            cch = MultiByteToWideChar( cp,
                                       MB_ERR_INVALID_CHARS | MB_PRECOMPOSED,
                                       (char *)_pbBufferPtr, --cb,
                                       NULL, 0 );
            --uMax;
        } while (!cch && uMax && cb);
    }
    else
    {
        cch = cb;
    }

    if (cch == 0)
    {
        cch = MultiByteToWideChar( cp, MB_PRECOMPOSED,
                                   (char*)_pbBufferPtr, cb,
                                   NULL, 0 );

    }

    if (cch)
    {
        hr = THR(MakeRoomForChars(cch));
        if (hr)
            goto Cleanup;

        cch = MultiByteToWideChar( cp, MB_PRECOMPOSED,
                                   (char *)_pbBufferPtr, cb,
                                   _pchEnd, cch );
    }

    *pcch = cch;
    _pbBufferPtr += cb;

Cleanup:
    RRETURN(hr);
}

#ifndef NO_MLANG
HRESULT
CEncodeReader::WideCharFromMultiByteMlang( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    UINT    cch = 0, cb = _cbBuffer - (_pbBufferPtr - _pbBuffer);
    DWORD   dwState = _dwState;

    hr = THR(mlang().ConvertStringToUnicode(&dwState, _cp, (CHAR *)_pbBufferPtr, &cb, NULL, &cch));
    if (FAILED(hr))
        goto Cleanup;

    hr = THR(MakeRoomForChars(cch));
    if (hr)
        goto Cleanup;

    hr = THR(mlang().ConvertStringToUnicode(&_dwState, _cp, (CHAR *)_pbBufferPtr, &cb, (WCHAR *)_pchEnd, &cch));
    if (FAILED(hr))
        goto Cleanup;

    if (IsAutodetectCodePage(_cp))
    {
        // Mlang stuffs the actual codepage into the hiword of the state
        CODEPAGE cpDetected = HIWORD(_dwState);

        // if cpDetected is zero, it implies that there was insufficient data
        // (typically all-ASCII data) to determine the charset.  We will
        // continue to encode in autodetect mode in this case.  If non-zero,
        // we'll switch the doc so that we can submit, etc., correctly.

        if (cpDetected)
        {
            // if we're getting codepage detecting result from
            // mlang, chances are that we have not processed
            // the stream at all because the system didn't have
            // the corresponding codepage installed.
            // we need to start over and get the codepage JIT-in.
            //
            BOOL fNeedRestart = _fDetectionFailed;

            if (_cp == CP_AUTO)
            {
                MIMECPINFO cpinfo;
                ZeroMemory(&cpinfo, sizeof(MIMECPINFO));

                if (   (mlang().GetCodePageInfo(cpDetected, MLGetUILanguage(), &cpinfo) == S_OK)
                    && !(cpinfo.dwFlags & MIMECONTF_VALID))
                {
                    fNeedRestart = TRUE;
                }
            }

            _fDetectionFailed = FALSE;

            SwitchCodePage(cpDetected, NULL, fNeedRestart);
        }
        else
            _fDetectionFailed = TRUE;
    }
    else if (_fDiscardUtf7BOM)
    {
        // Discard the BOM.  Note we can't do this sooner because part of the
        // first character is mixed in with the BOM bytes.

        --cch;
        memmove( _pchEnd, _pchEnd + 1, cch * sizeof(wchar_t));
        _fDiscardUtf7BOM = FALSE;
    }


    hr = S_OK;

    *pcch = cch;
    _pbBufferPtr += cb;

Cleanup:
    RRETURN(hr);
}
#endif // !NO_MLANG

HRESULT
CEncodeReader::MakeRoomForChars( int cch )
{
    // call my superclass first!

    _pchEndLast = _pchEnd;
    _pbBufferPtrLast = _pbBufferPtr;

    RRETURN(S_OK);
}

//---------------------------------------------------------------------

CEncodeWriter::CEncodeWriter(
    CODEPAGE cp,
    size_t nBlockSize ) : CEncode( nBlockSize )
{
    _pfnMultiByteFromWideChar = NULL;
    _pchBuffer = NULL;
    _cchBuffer = _cchBufferMax = 0;
    _pbBuffer = NULL;
    _cbBuffer = _cbBufferMax = 0;
    _cDefaultChar = '?';
    _fEntitizeUnknownChars = TRUE;

    // Choose something sane for _uiWinCodepage
    _uiWinCodepage = g_cpDefault;

    SwitchCodePage( cp ); // sets _pfnWideCharFromMultiByte
}

CEncodeWriter::~CEncodeWriter()
{
    if (_pchBuffer)
    {
        MemFree(_pchBuffer);
        _pchBuffer = NULL;
        _cchBuffer = _cchBufferMax = 0;
    }
    if (_pbBuffer)
    {
        MemFree(_pbBuffer);
        _pbBuffer = NULL;
        _cbBuffer = _cbBufferMax = 0;
    }
}

BOOL
CEncodeWriter::SwitchCodePage( CODEPAGE cp, BOOL *pfDifferentEncoding, BOOL fNeedRestart )
{
    BOOL fSuccess = FALSE, fSwitched;
    static const struct ENCODINGWRITEFUNC aEncodingFuncs[] =
    {
        { CP_1252,         &CEncodeWriter::MultiByteFromWideCharGeneric },
        { CP_ISO_8859_1,   &CEncodeWriter::MultiByteFromWideCharGeneric },
#ifndef WINCE
        { CP_UTF_8,        &CEncodeWriter::Utf8FromWideChar },
#endif // WINCE
        { CP_UCS_2,        &CEncodeWriter::UnicodeFromWideChar },
        { CP_1250,         &CEncodeWriter::MultiByteFromWideCharGeneric },
        { CP_1251,         &CEncodeWriter::MultiByteFromWideCharGeneric },
        { CP_1253,         &CEncodeWriter::MultiByteFromWideCharGeneric },
        { CP_1254,         &CEncodeWriter::MultiByteFromWideCharGeneric },
        { CP_1257,         &CEncodeWriter::MultiByteFromWideCharGeneric },
    };

    const struct ENCODINGWRITEFUNC * p = aEncodingFuncs;
    const struct ENCODINGWRITEFUNC * pStop = aEncodingFuncs + ARRAY_SIZE(aEncodingFuncs);

    // Nothing has changed, quickly bail.

    if (cp == _cp && _pfnMultiByteFromWideChar)
        goto Cleanup;

    Assert(cp != CP_ACP);

    // See if we can handle this codepage natively.
    for (;p < pStop; p++)
    {
        if (cp == p->cp)
            break;
    }

    fSuccess = (p < pStop);

    // If we cannot handle this codepage natively, hand it over to mlang
    if (!fSuccess)
    {
        fSuccess = (S_OK == THR(mlang().IsConvertible(CP_UCS_2, cp)));
    }

    if (fSuccess)
    {
        if (p == pStop)
        {
            if (mlang().IsMLangAvailable())
                _pfnMultiByteFromWideChar = &CEncodeWriter::MultiByteFromWideCharMlang2;
            else
            {
                _pfnMultiByteFromWideChar = MultiByteFromWideCharGeneric;
                CPINFO cpinfo;
                fSuccess = GetCPInfo(cp, &cpinfo);
            }
        }
        else
            _pfnMultiByteFromWideChar = p->pfnMBFromWC;
    }

    if (!fSuccess)
    {
        _pfnMultiByteFromWideChar = &CEncodeWriter::MultiByteFromWideCharMlang2;
        cp = g_cpDefault; // desperation
    }

    TraceTag((tagEncGeneral, "CEncodeWriter switching to codepage: %d", cp));

Cleanup:
    fSwitched = _cp != cp;

    if (pfDifferentEncoding)
    {
        *pfDifferentEncoding = fSwitched;
    }

    _cp = cp;

    // Cache the windows codepage for the new cp
    _uiWinCodepage = WindowsCodePageFromCodePage( _cp );

    if (fSwitched)
    {
        _dwState = 0;
    }

    return fSwitched;
}

HRESULT
CEncodeWriter::PrepareToEncode()
{
    HRESULT hr = S_OK;

    //
    // Allocate a unicode buffer the size of our block size, if we haven't already.
    //
    if (!_pchBuffer)
    {
        _cchBufferMax = BlockSize();
        _cchBuffer = 0;
        _pchBuffer = (TCHAR*)MemAlloc(Mt(CEncodeWriterPchBuf), _cchBufferMax*sizeof(TCHAR) );
        if (!_pchBuffer)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CEncodeWriter::MultiByteFromWideChar( BOOL fReadEof, int * pcch )
{
    HRESULT hr;

    Assert( _pfnMultiByteFromWideChar != NULL );

    hr = THR( CALL_METHOD( this, _pfnMultiByteFromWideChar, ( fReadEof, pcch ) ));

    RRETURN(hr);
}

HRESULT
CEncodeWriter::MultiByteFromWideCharGeneric( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    UINT    cchTotal;

    cchTotal = WideCharToMultiByte(_uiWinCodepage, 0, _pchBuffer, _cchBuffer,
                                   NULL, 0, NULL, NULL);

    hr = THR(MakeRoomForChars(cchTotal));
    if (hr)
        goto Cleanup;

    cchTotal = WideCharToMultiByte(_uiWinCodepage, 0, _pchBuffer, _cchBuffer,
                                   (char*)_pbBuffer + _cbBuffer, _cbBufferMax - _cbBuffer,
                                   &_cDefaultChar, NULL);
    if (!_fEntitizeUnknownChars)
    {
        _cbBuffer += cchTotal;
    }
    else
    {
        BOOL fEntitizeMode = FALSE;
        WCHAR * pchOrig;
        WCHAR * pchNew;
        UINT cchUnicode;

        // Convert output buffer back to Unicode to find out which characters
        // need to be entitized (&#xxxxx;).
        cchUnicode = MultiByteToWideChar(_uiWinCodepage, 0, (char*)_pbBuffer + _cbBuffer,
                                         cchTotal, NULL, 0);
        WCHAR * pch = (WCHAR *)MemAlloc(Mt(CEncodeWriter), cchUnicode * sizeof(WCHAR));
        if (!pch)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
        cchUnicode = MultiByteToWideChar(_uiWinCodepage, 0, (char*)_pbBuffer + _cbBuffer,
                                         cchTotal, pch, cchUnicode);

        // Compare results, and if they:
        // 1) match, use already converted string
        // 2) don't match, we need to switch to entitize mode, replace unknown characters
        //    with &#xxxxx;  Need to go one byte at a time.
        Assert(_cchBuffer == cchUnicode);
        pchOrig = _pchBuffer;
        pchNew  = pch;
        for (UINT i = 0; i < _cchBuffer; i++)
        {
            if (*pchNew++ != *pchOrig++)
            {
                fEntitizeMode = TRUE;
                break;
            }
        }

        if (fEntitizeMode)
        {
            unsigned char *pb = _pbBuffer + _cbBuffer;
            unsigned char *pbStart;
            UINT cchNeed = cchTotal;  // we need at least this much room in the buffer
            cchTotal = 0;

            pchOrig = _pchBuffer;
            pchNew  = pch;
            for (UINT i = 0; i < _cchBuffer; i++)
            {
                if (*pchNew == *pchOrig)
                {
                    LONG cchTemp = WideCharToMultiByte(_uiWinCodepage, 0, pchOrig, 1,
                                                       (char*)pb, _cbBufferMax - _cbBuffer, NULL, 0);

                    pb += cchTemp;
                    cchTotal += cchTemp;

                    cchNeed -= cchTemp;
                }
                else
                {
                    // Fill in an entitity reference instead
                    // Allocate eight more characters for the numeric entity
                    hr = THR(MakeRoomForChars(cchTotal + 8 + cchNeed));
                    if (hr)
                        goto Cleanup;

                    // _pbBuffer can change in MakeRoomForChars
                    pb = pbStart = _pbBuffer + _cbBuffer + cchTotal;

                    *pb++ = '&';
                    *pb++ = '#';
                    _ultoa((unsigned long)*pchOrig, (char*)pb, 10);
                    pb += lstrlenA((const char*)pb);
                    *pb++ = ';';

                    AssertSz(pb <= _pbBuffer + _cbBufferMax, "Entitizing overflow");

                    cchTotal += (UINT)(pb - pbStart);
                }
                ++pchNew;
                ++pchOrig;
            }
        }
        _cbBuffer += cchTotal;

        MemFree(pch);
    }

    *pcch = cchTotal;

Cleanup:
    RRETURN( hr );
}

#ifndef NO_MLANG
HRESULT
CEncodeWriter::MultiByteFromWideCharMlang( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    UINT    cb = 0, cch = _cchBuffer;
    DWORD   dwState;

    _dwState |= _fEntitizeUnknownChars ? 0x00008000 : 0;
    dwState = _dwState;

    hr = THR(mlang().ConvertStringFromUnicode(&dwState, _cp, (WCHAR *)_pchBuffer, &cch, NULL, &cb));
    if (FAILED(hr))
        goto Cleanup;

    hr = THR(MakeRoomForChars(cb));
    if( hr )
        goto Cleanup;

    hr = THR(mlang().ConvertStringFromUnicode(&_dwState, _cp, (WCHAR *)_pchBuffer, &cch, (CHAR *)_pbBuffer + _cbBuffer, &cb));
    if (FAILED(hr))
        goto Cleanup;

    // NB (cthrash) MLANG returns S_FALSE when everything converted fine, except
    // there were WC chars not native to the codepage _cp.  These are entitized,
    // so there's no error.  We don't want to propagate the S_FALSE up to the caller.

    hr = S_OK;

    *pcch = cb;
    _cbBuffer += cb;

Cleanup:
    RRETURN( hr );
}

HRESULT
CEncodeWriter::MultiByteFromWideCharMlang2( BOOL fReadEof, int * pcch )
{
    HRESULT hr;
    UINT    cb = 0, cch = _cchBuffer;
    DWORD   dwArg = _fEntitizeUnknownChars ? (MLCONVCHARF_NAME_ENTITIZE | MLCONVCHARF_NCR_ENTITIZE) : 0;
    DWORD   dwState = _dwState;

    hr = THR(mlang().ConvertStringFromUnicodeEx(&dwState, _cp, (WCHAR *)_pchBuffer, &cch, NULL, &cb, dwArg, NULL));
    if (FAILED(hr))
        goto Cleanup;

    hr = THR(MakeRoomForChars(cb));
    if( hr )
        goto Cleanup;

    hr = THR(mlang().ConvertStringFromUnicodeEx(&_dwState, _cp, (WCHAR *)_pchBuffer, &cch, (CHAR *)_pbBuffer + _cbBuffer, &cb, dwArg, NULL));
    if (FAILED(hr))
        goto Cleanup;

    // NB (cthrash) MLANG returns S_FALSE when everything converted fine, except
    // there were WC chars not native to the codepage _cp.  These are entitized,
    // so there's no error.  We don't want to propagate the S_FALSE up to the caller.

    hr = S_OK;

    *pcch = cb;
    _cbBuffer += cb;

Cleanup:
    RRETURN( hr );
}
#endif // !NO_MLANG

HRESULT
CEncodeWriter::MakeRoomForChars( int cch )
{
    HRESULT hr = S_OK;

    if (!_pbBuffer)
    {
        // round up to block size multiple >= cch+1
        _cbBufferMax = (cch + _nBlockSize*2 - 1) & ~(_nBlockSize*2 - 1);

        _pbBuffer = (unsigned char*)MemAlloc(Mt(CEncodeWriterPbBuf), _cbBufferMax);
        if (!_pbBuffer)
            RRETURN( E_OUTOFMEMORY );
    }
    else
    {
        int cchNeed = _cbBuffer + cch;

        // Reallocate the chunk if we need more memory for the extra characters.

        if (cchNeed >= _cbBufferMax)
        {
            // round up to WBUFF_SIZE*2
            cchNeed = (cchNeed + _nBlockSize*2 - 1) & ~(_nBlockSize*2 - 1);

            hr = THR(MemRealloc(Mt(CEncodeWriterPbBuf), (void**)&_pbBuffer, cchNeed ) );
            if (hr)
                goto Cleanup;

            _cbBufferMax = cchNeed;
        }

    }

Cleanup:
    RRETURN( hr );
}


//+----------------------------------------------------------------------------
//
//  Function:   CToUnicodeConverter::Convert
//
//  Synopsis:   Convert a multibyte string to a Unicode string.
//
//  Input:      pbBuffer - multibyte string.
//
//              cbBuffer - byte count of pbBuffer, or -1.
//                         -1 implies that the string is nul-terminated.
//
//  Returns:    HRESULT - S_OK/E_OUTOFMEMORY
//
//              *ppchBuffer - Unicode buffer.  Allocated by this object.
//                            Should be freed by caller.
//
//              *pcch - Character count of string in *ppchBuffer
//
//-----------------------------------------------------------------------------

HRESULT
CToUnicodeConverter::Convert(
    const char *pbBuffer,   // IN
    const int cbBuffer,     // IN
    TCHAR ** ppchBuffer,    // OUT
    int *pcch )             // OUT
{
    HRESULT hr = S_OK;

    Assert(pbBuffer && cbBuffer >= -1);

    _fMakeRoomForNUL = (cbBuffer != -1);
    _pbBuffer = _pbBufferPtr = (unsigned char *)pbBuffer;
    _cbBuffer = _cbBufferMax = _fMakeRoomForNUL ? cbBuffer : lstrlenA(pbBuffer) + 1;

    hr = THR(WideCharFromMultiByte(TRUE, pcch));

    if (FAILED(hr))
        goto Cleanup;

    if (AutoDetectionFailed())
    {
        SwitchCodePage( g_cpDefault );

        _fMakeRoomForNUL = (cbBuffer != -1);
        _pbBuffer = _pbBufferPtr = (unsigned char *)pbBuffer;
        _cbBuffer = _cbBufferMax = _fMakeRoomForNUL ? cbBuffer : lstrlenA(pbBuffer) + 1;

        hr = THR(WideCharFromMultiByte(TRUE, pcch));

        if (FAILED(hr))
            goto Cleanup;
    }

    *ppchBuffer = _pchBuffer;

Cleanup:

    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CToUnicodeConverter::MakeRoomForChars
//
//  Synopsis:   Allocate a Unicode string buffer.
//
//  Input:      cch = Unicode character count
//
//  Returns:    HRESULT - S_OK/E_OUTOFMEMORY
//
//-----------------------------------------------------------------------------

HRESULT
CToUnicodeConverter::MakeRoomForChars(
    int cch )
{
    HRESULT hr = S_OK;

    if (!_pchBuffer || cch > _cchBuffer)
    {
        if (_fMakeRoomForNUL)
            ++cch;

        if( !_pchBuffer )
        {
            _pchBuffer = (TCHAR *)MemAlloc(_mt, cch * sizeof(TCHAR));

            if (!_pchBuffer)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }
        }
        else if( cch > 0 )
        {
            // If we did this for cch == 0, Realloc would free the buffer, and that'd be
            // substantially different.
            hr = THR( MemRealloc(_mt, (void **)&_pchBuffer, cch * sizeof(TCHAR)));
            if( hr )
                goto Cleanup;
        }

        _cchBuffer = cch;
        _pchEnd = _pchBuffer;
    }

    IGNORE_HR(CEncodeReader::MakeRoomForChars(cch));

Cleanup:

    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CToUnicodeConverter dtor
//
//  Synopsis:   Caller should free both the multibyte and unicode string
//              buffers.  To prevent the base class CEncodeReader from freeing
//              if for you, we NULL out the pointers.
//
//-----------------------------------------------------------------------------

CToUnicodeConverter::~CToUnicodeConverter()
{
    // Let the caller free this memory

    _pbBuffer = NULL;
    _pchBuffer = NULL;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\miint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
			AUTHOR:  Kumar Balasubramanian 
***************************************************************************

** MMX version of the "integer LLM mode" within IJG decompressor code.
** The following is an MMX implementation of the integer slow mode
** IDCT within the IJG code.
*/

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef USEINLINEASM

GLOBAL(void)
midct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif



#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Define the constants for the case BITS_IN_JSAMPLE = 8 */

static const __int64 const_0_2986	=	0x0000098E0000098E ;
static const __int64 const_0_3901	=	0x00000c7c00000c7c;
static const __int64 const_0_54119	=	0x0000115100001151;
static const __int64 const_0_7653	=	0x0000187E0000187E;
static const __int64 const_0_899	=	0x00001ccd00001ccd;
static const __int64 const_1_175	=	0x000025a1000025a1;
static const __int64 const_1_501	=	0x0000300b0000300b;
static const __int64 const_1_8477	=	0x00003b2100003b21;
static const __int64 const_1_961	=	0x00003ec500003ec5 ;
static const __int64 const_2_053	=	0x000041b3000041b3 ;
static const __int64 const_2_562	=	0x0000520300005203 ;
static const __int64 const_3_072	=	0x0000625400006254 ;

static const __int64 const_all_ones	=	0x0ffffffffffffffff;	
static const __int64 const_0_1_0_1		=	0x0000000100000001	 ;
static const __int64 const_zero		=	0x0000000000000000;	
static const __int64 const_1_0			=	0x0000000100000001	;
static const __int64 const_round		=	0x0000040000000400;
static const __int64 const_round_two	=	0x0002000000020000;
static const __int64 const_mask		=  0x000003ff000003ff;

static const __int64 const_00_1_84_00_0_765	=	0x00003b210000187E;
static const __int64 const_00_0_5411_00_00		=	0x0000115100000000;
static const __int64 const_3_072_00_1_501_00	=	0x62540000300b0000;
static const __int64 const_0_2986_00_2_053_00	=	0x098E000041b30000;
static const __int64 const_0_899_00_2_562_00	=   0x1ccd000052030000;
static const __int64 const_1_96_00_0_3901_00	=   0x3ec500000c7c0000;
static const __int64 const_1_175_00_00_00		=	0x25a1000000000000;







/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
midct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

	INT32 locdwinptr,	locdwqptr, locdwwsptr, locdwcounter, locdwrowctr ;
__int64 locqwtmp0e,locqwtmp0o, locqwtmp1e, locqwtmp1o, locqwtmp2e ;

__int64 locqwtmp10e	, locqwtmp10o	,locqwtmp11e	,
		 locqwtmp11o	, locqwtmp12e	, locqwtmp12o	,
		 locqwtmp13e	, locqwtmp13o	,locqwtmp0	,
		locqwtmp1	,locqwtmp2	,locqwtmp3	,
		locqwz5e ,locqwz5o	,locqwz1e ,locqwz1o	,
		locqwz13e	,locqwz13o	,locqwz14e	,
		locqwz14o	,locqwz23e	,locqwz23o	,
		locqwz24e	,locqwz24o ;




// Inline assembly to do the IDCT and store the result */

__asm {

mov	esi, inptr	; load the input pointer
mov edi, quantptr		; load the quant table pointer

mov locdwinptr, esi	; to be used in the idct_column loop
mov locdwqptr, edi	; to be used in the idct_column loop

mov esi, wsptr
mov locdwcounter, 2	; idct_column loop counter

mov locdwwsptr, esi



;; do the idct on all the columns. Do four columns per
;; iteration of the loop.

idct_column:

mov		esi, locdwinptr	; get the source pointer
mov		edi, locdwqptr		; get the quantzn. pointer

;; fetch C2 and Q2
movq	mm0,  [esi+16*2]	; get C2

movq	mm1,  [edi+16*2]	; get Q2

movq	mm2,  [esi+16*6]	; get C6
pmullw	mm0, mm1		; dequantized C2 = z2

movq	mm3, [edi+16*6]	; get Q6

movq	mm6,  const_0_7653	
pmullw	mm2, mm3		; dequant. C6 = z3

movq	mm7,  const_1_8477	
movq	mm4, mm0		; copy z2

pmaddwd	mm4, mm6		; tmp3 - z1 for columns 0 & 2
movq	mm5, mm0		; copy z2

movq	mm3, mm2		; z3 copy
psrlq	mm5, 16			; move z2 columns 1 & 3 to 0 & 2

movq	mm1,  const_0_54119
pmaddwd	mm5, mm6		; tmp3 - z1 for columns 1 & 3

psrlq	mm3, 16			; move z3 columns 1 & 3 to 0 & 2
paddw	mm0, mm2		; z2 + z3

pmaddwd	mm2, mm7		; tmp2 - z1 for columns 0 & 2
movq	mm6, mm0		; z2 + z3 copy

psrlq	mm6, 16			; z2 + z3 columns 1 & 3 in 0 & 2
pmaddwd	mm3, mm7		; tmp2 - z1 for columns 1 & 3

movq	mm7,  const_all_ones
pmaddwd	mm0, mm1		; z1 columns 0 & 2

pmaddwd	mm6, mm1		; z1 columns 1 & 3
pxor	mm2, mm7		; 1s complement of tmp2 - z1

movq	mm1,  const_0_1_0_1
pxor	mm3, mm7		; 1s complement of tmp2 - z1 

paddd	mm2, mm1		; 2s complement of tmp2 - z1(col 0 &2)
paddd	mm3, mm1		; 2s complement of tmp2 - z1(col 1 & 3)

paddd	mm2, mm0		; tmp2 (columns 0 & 2)
paddd	mm4, mm0		; tmp2 (cols. 1 & 3)

;; get C0 and Q0
movq	mm0,  [esi+16*0]	; get C0
paddd	mm3, mm6		; tmp3

movq	mm1,  [edi+16*0]	; getQ0
paddd	mm5, mm6		; tmp3

movq	mm6,  [esi+16*4]	; get C4
pmullw	mm0, mm1		; dequant C0 = z2

movq	mm7,  [edi+16*4]	; get Q4
nop

movq	locqwtmp2e, mm2	; store tmp2 even part
pmullw	mm6, mm7		; dequant C4 = z3

movq	mm7,  const_1_0
movq	mm1, mm0		; copy of z2

paddw	mm0, mm6		; z2+z3
nop

psubw	mm1, mm6		; z2-z3
movq	mm6, mm0		; z2+z3 copy

pmaddwd	mm0, mm7		; get 0 & 2 cols
psrlq	mm6, 16			; get the other two cols.

pmaddwd	mm6, mm7		; 
movq	mm2, mm1		; copy of z2-z3

pmaddwd	mm1, mm7
psrlq	mm2, 16

pmaddwd	mm2, mm7
pslld	mm0, 13			; tmp0 cols 0&2

movq	mm7, mm4
pslld	mm6, 13			; tmp0 cols 1 & 3

paddd	mm4, mm0		; 
psubd	mm0, mm7		; 

movq	mm7, mm5
pslld	mm2, 13

movq	locqwtmp13e, mm0	; store tmp13 cols 0&2
paddd	mm5, mm6

movq	mm0, locqwtmp2e
psubd	mm6, mm7


movq	locqwtmp10o, mm5	; store tmp10 cols 1&3
movq	mm7, mm3

movq	locqwtmp13o, mm6	; store tmp13 cols 1&3
paddd	mm3, mm2

movq	locqwtmp10e, mm4	; store tmp10 cols 0&2
pslld	mm1, 13

movq	locqwtmp11o, mm3	; store tmp11 cols 1,3
psubd	mm2, mm7

movq	mm6,  [esi+16*1]
movq	mm3, mm0

movq	locqwtmp12o, mm2	; store tmp12 cols. 1,3
paddd	mm0, mm1

movq	mm7,  [edi+16*1]

movq	locqwtmp11e, mm0	; store tmp11 cols. 0,2
psubd	mm1, mm3

movq	mm0,  [esi+16*7]
pmullw	mm6, mm7	; dequant. C1 = tmp3

movq	locqwtmp12e, mm1

;; completed the even part.
;; Now start the odd part

movq	mm1,  [edi+16*7]	; get C7

movq	mm2,  [esi+16*5]	; get C5
pmullw	mm0, mm1	; dequant. C7 = tmp0

movq	mm3,  [edi+16*5]

movq	mm4,  [esi+16*3]
pmullw	mm2, mm3	; dequant. C5 = tmp1

movq	mm5,  [edi+16*3]
movq	mm1, mm0

movq	locqwtmp3, mm6
pmullw	mm4, mm5	; dequant. C3 = tmp2

movq	locqwtmp0, mm0
paddw	mm0, mm6	; z1 

movq	locqwtmp1, mm2
movq	mm3, mm2

movq	locqwtmp2, mm4
paddw	mm2, mm4	; z2

paddw	mm1, mm4	; z3

movq	mm4,  const_1_175
paddw	mm3, mm6	; z4	

movq	mm5, mm1
movq	mm7, mm0

psrlq	mm7, 16		; other two cols. of z1
paddw	mm5, mm3	; z3 + z4

movq	mm6, mm5
pmaddwd	mm5, mm4	; z5 cols 0 & 2

pmaddwd	mm0,  const_0_899	; z1 even part
psrlq	mm6, 16

pmaddwd	mm6, mm4	; z5 cols 1 & 3
movq	mm4, mm2	; z2 copy

movq	locqwz5e, mm5
psrlq	mm4, 16		; get z2 cols 1 & 3

pxor	mm0,  const_all_ones
movq	mm5, mm1

movq	locqwz5o, mm6
psrlq	mm5, 16

movq	mm6,  const_2_562
nop

paddd	mm0,  const_0_1_0_1
pmaddwd	mm2, mm6	; z2 cols 0 & 2

movq	locqwz1e, mm0
pmaddwd	mm4, mm6	; z2 cols 1 & 3

pmaddwd	mm7,  const_0_899	; z1
movq	mm0, mm3

movq	mm6,  const_1_961
psrlq	mm0, 16

pxor	mm2,  const_all_ones
pmaddwd	mm1, mm6	; z3 cols 0 & 2

paddd	mm2,  const_0_1_0_1
pmaddwd	mm5, mm6	; z3 cols 1 & 3

movq	mm6,  const_0_3901
nop

pxor	mm4,  const_all_ones
pmaddwd	mm3, mm6	; z4 cols 0 & 2

paddd	mm4,  const_0_1_0_1
pmaddwd	mm0, mm6	; z4 cols 1 & 3

movq	mm6,  const_all_ones
nop

pxor	mm1, mm6
pxor	mm7, mm6

;; twos complement of z1, z2, z3, z4

paddd	mm1,  const_0_1_0_1	
pxor	mm5, mm6

paddd	mm7,  const_0_1_0_1
pxor	mm3, mm6

paddd	mm5,  const_0_1_0_1
nop

movq	locqwz1o, mm7
pxor	mm0, mm6

paddd	mm1, locqwz5e	; z3+z5 cols 0 & 2
nop

movq	mm6, locqwz1e
nop

paddd	mm5, locqwz5o	; z3+z5 cols 1 & 3
paddd	mm6, mm1

paddd	mm3,  const_0_1_0_1
paddd	mm1, mm2

paddd	mm0,  const_0_1_0_1
paddd	mm7, mm5

paddd	mm3, locqwz5e	; z4+z5 cols 0 & 2
paddd	mm5, mm4

paddd	mm0, locqwz5o	; z4+z5 cols 0 & 2
paddd	mm2, mm3

paddd	mm3, locqwz1e
paddd	mm4, mm0

paddd	mm0, locqwz1o

movq	locqwz23e, mm1
nop

movq	locqwz14o, mm0
nop

movq	mm0, locqwtmp0
nop

movq	locqwz24e, mm2
movq	mm1, mm0

movq	mm2,  const_0_2986
psrlq	mm1, 16

movq	locqwz14e, mm3
pmaddwd	mm0, mm2	; tmp0 even

movq	mm3, locqwtmp1
pmaddwd	mm1, mm2	; tmp0 odd

movq	locqwz24o, mm4
movq	mm2, mm3

movq	mm4,  const_2_053
psrlq	mm2, 16

movq	locqwz23o, mm5
pmaddwd	mm3, mm4	; tmp1 even

movq	mm5, locqwtmp2
pmaddwd	mm2, mm4	; tmp1 odd

movq	locqwz13e, mm6
movq	mm4, mm5

movq	mm6,  const_3_072
psrlq	mm4, 16

movq	locqwz13o, mm7
pmaddwd	mm5, mm6	; tmp2 even
	
;;;;;;; now calculate tmp0..tmp3
;; then calculate the pre-descaled values
;; this includes the right shift with rounding

movq	mm7, locqwtmp3
pmaddwd	mm4, mm6	; tmp2 odd

paddd	mm0, locqwz13e
movq	mm6, mm7

paddd	mm1, locqwz13o
psrlq	mm6, 16

movq	locqwtmp0e, mm0		; tmp0 even
nop

movq	mm0,  const_1_501
nop

movq	locqwtmp0o, mm1
pmaddwd	mm7, mm0

paddd	mm3, locqwz24e
pmaddwd	mm6, mm0

movq	mm0, locqwtmp10e
nop

paddd	mm7, locqwz14e
nop

paddd	mm6, locqwz14o
psubd	mm0, mm7

movq	mm1, locqwtmp10o
nop

movq	locqwtmp1e, mm3
psubd	mm1, mm6

movq	mm3,  const_round
nop

paddd	mm2, locqwz24o
paddd	mm0, mm3

paddd	mm7, locqwtmp10e
psrad	mm0, 11

movq	locqwtmp1o, mm2
paddd	mm1, mm3

paddd	mm6, locqwtmp10o
psrad	mm1, 11

paddd	mm5, locqwz23e
movq	mm2, mm0

paddd	mm4, locqwz23o
punpcklwd	mm0, mm1

paddd	mm6, mm3
punpckhwd	mm2, mm1

paddd	mm7, mm3
punpckldq	mm0, mm2

;; now do all the stores of the 1D-iDCT of the four columns

mov		edi, locdwwsptr	; get pointer to scratch pad array

movq	 [edi+16*7], mm0	; store wsptr[7]
psrad	mm6, 11

movq	mm2, locqwtmp11e
psrad	mm7, 11

psubd	mm2, mm5
movq	mm0, mm7

movq	mm1, locqwtmp11o
punpcklwd	mm7, mm6

psubd	mm1, mm4
punpckhwd	mm0, mm6

paddd	mm5, locqwtmp11e
punpckldq	mm7, mm0

paddd	mm4, locqwtmp11o
paddd	mm2, mm3

paddd	mm1, mm3
paddd	mm5, mm3

paddd	mm4, mm3
psrad	mm2, 11

movq	 [edi+16*0], mm7	; store wsptr[0]
psrad	mm1, 11

movq	mm0, mm2
psrad	mm5, 11

movq	mm6, locqwtmp12e
punpcklwd	mm2, mm1

punpckhwd	mm0, mm1
movq	mm1, mm5

movq	mm7, locqwtmp12o
punpckldq	mm2, mm0

movq	 [edi+16*6], mm2	; store wsptr[6]
psrad	mm4, 11

movq	mm2, mm6
punpcklwd	mm5, mm4

paddd	mm6, locqwtmp1e
punpckhwd	mm1, mm4

psubd	mm2, locqwtmp1e
punpckldq	mm5, mm1

movq	 [edi+16*1], mm5	; store wsptr[1]
movq	mm0, mm7

paddd	mm7, locqwtmp1o
paddd	mm6, mm3

psubd	mm0, locqwtmp1o
paddd	mm7, mm3

paddd	mm2, mm3
psrad	mm7, 11

paddd	mm0, mm3
psrad	mm6, 11

movq	mm1, mm6
psrad	mm2, 11

movq	mm4, locqwtmp13e
punpcklwd	mm6, mm7

movq	mm5, mm4
punpckhwd	mm1, mm7

paddd	mm4, locqwtmp0e
punpckldq	mm6, mm1

psubd	mm5, locqwtmp0e
psrad	mm0, 11

movq	 [edi+16*2], mm6	; store wsptr[2]
movq	mm6, mm2

paddd	mm4, mm3
punpcklwd	mm2, mm0

paddd	mm5, mm3
punpckhwd	mm6, mm0

movq	mm0, locqwtmp13o
punpckldq	mm2, mm6

movq	mm1, mm0
psrad	mm4, 11

paddd	mm0, locqwtmp0o
psrad	mm5, 11

paddd	mm0, mm3
movq	mm6, mm4

psubd	mm1, locqwtmp0o
psrad	mm0, 11

paddd	mm1, mm3
punpcklwd	mm4, mm0

movq	mm3, mm5
punpckhwd	mm6, mm0

movq	 [edi+16*5], mm2	; store wsptr[5]
punpckldq	mm4, mm6

psrad	mm1, 11

movq	 [edi+16*3], mm4	; store wsptr[3]
punpcklwd	mm5, mm1

punpckhwd	mm3, mm1

punpckldq	mm5, mm3

add locdwinptr, 8	; skip first four columns
add	locdwqptr,  8

movq	 [edi+16*4], mm5	; store wsptr[4]


;;;;;;; done with 1D-idct of four columns ;;;;;;;

;; now update pointers for next four columns

add locdwwsptr, 8
mov	eax, locdwcounter

dec eax

mov locdwcounter, eax
jnz idct_column

;;;;;;;end of 1D-idct on the columns ;;;;;;;

mov	esi, wsptr	; get start addr of temp array
mov locdwcounter, 8

mov	locdwwsptr, esi
mov	locdwrowctr, 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; start of 1D-idct on the rows ;;;;;;;


idct_row:

mov	esi, locdwwsptr	; get next row start addr of temp array
mov	edi, output_buf	

movq	mm0,  [esi+0]	; get first 4 elements of row

movq	mm1,  [esi+2*4] ; get next 4 elem. of row
movq	mm2, mm0

movq	mm3, mm0	; copy of e3|e2|e1|e0
paddw	mm2, mm1	; (e3+e7)|(e2+e6)|(e1+e5)|(e0+e4)

movq	mm4, mm2	; copy of (e3+e7)|(e2+e6)|(e1+e5)|(e0+e4)
punpckhdq	mm3, mm1	; e7|e6|e3|e2

pmaddwd	mm3,  const_00_1_84_00_0_765	; (tmp2 - z1)||(tmp3-z1)
movq	mm6, mm0	; copy of e3|e2|e1|e0

pmaddwd	mm2,  const_00_0_5411_00_00	; z1||xxx
psubw	mm6, mm1	; (e3-e7)|(e2-e6)|(e1-e5)|(e0-e4)

punpckldq	mm4, mm6	; (e1-e5)|(e0-e4)|(e1+e5)|(e0+e4)
movq	mm6, mm0	; 

movq	mm5, mm3
pslld	mm4, 16	; (e0-e4)|(e1+e5)||(e0+e4)|x0000

pxor	mm3,  const_all_ones
punpckhdq	mm2, mm2	; z1||z1

paddd	mm3,  const_0_1_0_1
psrad	mm4, 3	; (e0-e4)<<13||(e0+e4)<<13

psrlq	mm3, 32
movq	mm7, mm4	; copy of tmp1||tmp0

punpckldq	mm5, mm3
movq	mm3, mm0	; e3|e2|e1|e0

paddd	mm5, mm2		; tmp2 || tmp3
paddw	mm3, mm1	; (e7+e3)|(e2+e6)|(e1+e5)|(e0+e4)

paddd	mm4, mm5
psubd	mm7, mm5


;; end of even part calculation ;;
;; mm0 => e3|e2|e1|e0
;; mm1 => e7|e6|e5|e4
;; mm4 => tmp11||tmp10
;; mm7 => tmp12||tmp13

movq	mm5, mm3
movq	mm2, mm0

pmaddwd	mm0,  const_3_072_00_1_501_00	; tmp2|tmp3
punpckldq	mm5, mm5

paddw	mm5, mm3
punpckldq	mm2, mm2

pmaddwd	mm5,  const_1_175_00_00_00		; z5|0
punpckhdq	mm6, mm2

pmaddwd		mm3,  const_1_96_00_0_3901_00	; z3|z4
paddw	mm6, mm1

pmaddwd		mm6,  const_0_899_00_2_562_00	; z1|z2
nop

pmaddwd		mm1,  const_0_2986_00_2_053_00	; tmp0|tmp1
punpckhdq	mm5, mm5

movq	mm2,  const_0_1_0_1
nop

pxor	mm3,  const_all_ones
nop

pxor	mm6,  const_all_ones
paddd	mm3, mm2

paddd	mm6, mm2
paddd	mm3, mm5

movq	mm5, mm6
paddd	mm6, mm3

movq	mm2, mm5
punpckldq	mm5, mm5

punpckhdq	mm2, mm5
paddd	mm1, mm6

paddd	mm2, mm3
movq	mm5, mm1

movq	mm3, mm4
paddd	mm0, mm2

movq	mm2, mm7
punpckldq	mm5, mm5

punpckhdq	mm1, mm5
psubd	mm3, mm0

movq	mm5,  const_round_two
paddd	mm0, mm4

movq	mm6,  const_mask
psubd	mm2, mm1

paddd	mm0, mm5
paddd	mm1, mm7



;; descale the resulting coeff values
paddd	mm1, mm5
psrad	mm0, 18

paddd	mm3, mm5
psrad	mm1, 18

paddd	mm2, mm5
psrad	mm3, 18


;; mask the result with RANGE_MASK (least 10 bits)
pand	mm1, mm6	; w2|w3
psrad	mm2, 18

movd	ebx, mm1	; w3
psrlq	mm1, 32		; 0|w2

;; using the results as index, get the corresponding
;; value from array range_limit and store the final result

mov		ecx, range_limit	; get start addr of range_limit array
add	edi, locdwrowctr

movd	edx, mm1	; w2
pand	mm0, mm6	; w1|w0

mov		ah, [ecx][ebx]	; w3
mov		edi, [edi]

movd	ebx, mm0	; w0
psrlq	mm0, 32		; 0|w1

mov		al, [ecx][edx]	; w2
add	locdwrowctr, 4

movd	edx, mm0	; w1
pand	mm3, mm6	; w6|w7

add	edi, output_col	; this is the dest start addr for this row
shl		eax, 16		; w3|w2|0|0

mov		al, [ecx][ebx]	; w0

mov		ah, [ecx][edx]	; w1

movd	mm4, eax	; w3|w2|w1|w0
pand	mm2, mm6	; w5|w4

movd	ebx, mm3	; w7
psrlq	mm3, 32		; 0|w6

movd	edx, mm3	; w6

mov		ah, [ecx][ebx]	; w7

mov		al, [ecx][edx]	; w6

movd	ebx, mm2	; w4
psrlq	mm2, 32		; 0|w5

shl		eax, 16		; w7|w6|0|0

movd	edx, mm2	; w5

mov		al, [ecx][ebx]	; w4

mov		ah, [ecx][edx]	; w5

movd	mm5, eax	; w7|w6|w5|w4

punpckldq	mm4, mm5	; w7|w6|w5|w4|w3|w2|w1|w0

add	locdwwsptr, 16
mov	eax, locdwcounter

movq	 [edi], mm4

;; update address pointer and loop counter

dec eax

mov	locdwcounter, eax
jnz	idct_row

;;;;;;; end of 1D-idct on all the rows ;;;;;;;
 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

emms


} //end of __asm

}


#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\empty.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#pragma hdrstop
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\download\jpglib6a\piint.c ===
/***************************************************************************
*
*                INTEL Corporation Proprietary Information  
*
*      
*                  Copyright (c) 1996 Intel Corporation.
*                         All rights reserved.
*
***************************************************************************
			AUTHOR:  Kumar Balasubramanian 
***************************************************************************

** Pentium version of the "integer LLM mode" within IJG decompressor code.
** The following is a non-MMX Pentium implementation of the integer slow mode
** IDCT within the IJG code.
*/

#define JPEG_INTERNALS
#include "jinclude.h"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED

#ifndef USEINLINEASM

GLOBAL(void)
pidct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{
}

#else

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif



#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Define the constants for the case BITS_IN_JSAMPLE = 8 */


static const INT32 const_0_2986	=	0x0000098E ;
static const INT32 const_0_3901	=	0x0fffff384;
static const INT32 const_0_54119	=	0x00001151;
static const INT32 const_0_7653	=	0x0000187E;
static const INT32 const_0_899	=	0x0ffffe333;
static const INT32 const_1_175	=	0x000025a1;
static const INT32 const_1_501	=	0x0000300b;
static const INT32 const_1_8477	=	0x0ffffc4df;
static const INT32 const_1_961	=	0x0ffffc13b;
static const INT32 const_2_053	=	0x000041b3;
static const INT32 const_2_562	=	0x0ffffadfd;
static const INT32 const_3_072	=	0x00006254;

static const INT32 const_round	=	0x00000400;
static const INT32 const_round_row	=	0x00020000;
static const INT32 const_mask		=	0x000003ff;


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
pidct8x8llm (JCOEFPTR inptr, short *quantptr, short *wsptr,
		 JSAMPARRAY output_buf, JDIMENSION output_col, JSAMPLE *range_limit )
{

INT32   locdwinptr, locdwqptr, locdwwsptr, locdwtmp0, locdwtmp1 ;
INT32   locdwtmp2, locdwtmp3, locdwtmp00, locdwtmp01, locdwtmp02 ;
INT32   locdwtmp03, locdwtmp10, locdwtmp11, locdwtmp12 ;
INT32   locdwtmp13, locdwcounter, locdwrowctr ;	



// Inline assembly to do the IDCT and store the result */

__asm {

mov		esi, inptr	; point to start of source
mov		edi, quantptr	;

mov		eax, wsptr
mov		locdwinptr, esi	; point to start of source

mov		locdwqptr, edi	;
mov		locdwwsptr, eax

mov	locdwcounter, 8
mov		eax, [esi]		; warm up the cache

mov		ebx, [esi+32]
mov		ecx, [esi+64]

mov		edx, [esi+96]
mov		eax, [edi]

mov		ebx, [edi+32]
mov		ecx, [edi+64]

mov		edx, [edi+96]

;; 1D-IDCT of all the eight columns
idct_column:

mov		esi, locdwinptr	; point to start of source
mov		edi, locdwqptr		;

;; do the even part

mov		ax, [esi+16*2]
mov		bx, [edi+16*2]

shl		eax, 16		; sign extend the i/p
mov		cx, [esi+16*6]

sar		eax, 16
mov		dx, [edi+16*6]

shl		ebx, 16		; sign extend the quant factor

sar		ebx, 16

imul	eax, ebx	; dequantized C2 = z2

shl		ecx, 16

sar		ecx, 16

shl		edx, 16

sar		edx, 16

imul	ecx, edx	; dequantized C6 = z3

mov		ebx, eax	; copy of z2

imul	eax, const_0_7653

add		ebx, ecx	; z2 + z3

imul	ecx, const_1_8477

imul	ebx, const_0_54119	; z1

mov		dx, [edi+16*4]	; quant factor for C4
add		ecx, ebx	; tmp2

add		eax, ebx	; tmp3
mov		locdwtmp2, ecx

mov		locdwtmp3, eax

mov		cx, [esi+16*4]	; C4
mov		ax, [esi+16*0]	; C0

mov		bx, [edi+16*0]	; quant factor for C0

movsx	edx, dx

movsx	ecx, cx

movsx	eax, ax

movsx	ebx, bx

imul	ecx, edx	; dequantize C4 = z3

imul	eax, ebx	; dequantize C0 = z2

mov		edx, ecx	; copy of z3
add		ecx, eax	; z2 + z3

shl		ecx, 13		; tmp0
sub		eax, edx	; z2 - z3

shl		eax, 13		; tmp1
mov		ebx, ecx	; copy of tmp0

add		ecx, locdwtmp3	; tmp10
mov		edx, eax	; copy of tmp1

add		eax, locdwtmp2	; tmp11
mov		locdwtmp00, ecx

sub		ebx, locdwtmp3	; tmp13
mov		locdwtmp01, eax

sub		edx, locdwtmp2	; tmp12
mov		locdwtmp03, ebx

mov		ax, [esi+16*7]	; C7 for the odd part
mov		locdwtmp02, edx

mov		bx, [edi+16*7]	; quant factor for C7

;; now do the odd part

shl		eax, 16
mov		cx, [esi+16*3]

sar		eax, 16
mov		dx, [edi+16*3]

shl		ebx, 16

sar		ebx, 16

imul	eax, ebx		; dequantized C7 = tmp0

shl		ecx, 16

sar		ecx, 16

shl		edx, 16

sar		edx, 16
mov		bx, [esi+16*1]

imul	ecx, edx		; dequantized C3 = tmp2

shl		ebx, 16
mov		dx, [edi+16*1]

sar		ebx, 16

shl		edx, 16

sar		edx, 16

imul	ebx, edx		; dequantized C1 = tmp3

mov		locdwtmp0, eax
mov		locdwtmp2, ecx

mov		ax, [esi+16*5]
mov		dx, [edi+16*5]

shl		eax, 16

sar		eax, 16

shl		edx, 16

sar		edx, 16

imul	eax, edx	; dequantized C5 = tmp1

imul	ecx, const_3_072	; tmp2

mov		locdwtmp3, ebx
mov		edx, locdwtmp0

imul	ebx, const_1_501	; tmp3

imul	edx, const_0_2986	; tmp0

mov		locdwtmp1, eax	; store tmp1
mov		locdwtmp10, edx

imul	eax, const_2_053	; tmp1

mov		locdwtmp11, eax
mov		locdwtmp12, ecx

mov		locdwtmp13, ebx
mov		eax, locdwtmp0

mov		ebx, locdwtmp1
mov		ecx, eax

mov		edx, ebx
add		eax, locdwtmp3	; z1

add		ebx, locdwtmp3	; z4
add		ecx, locdwtmp2	; z3

add		edx, locdwtmp2	; z2
mov		esi, ecx	; copy of z3

imul	eax,  const_0_899	; z1

imul	edx,  const_2_562	; z2

add		esi, ebx	; z3 + z4

imul	esi,  const_1_175	; z5

imul	ecx,  const_1_961	; z3

imul	ebx,  const_0_3901	; z4

add		ecx, esi	; z3
add		ebx, esi	; z4

mov		esi, eax	; copy of z1
add		eax, ecx	; z1 + z3

add		esi, ebx	; z1 + z4
add		ecx, edx	; z3 + z2

add		edx, ebx	; z2 + z4
add		eax, locdwtmp10		; tmp0

add		edx, locdwtmp11		; tmp1
add		ecx, locdwtmp12		; tmp2

add		esi, locdwtmp13		; tmp3
mov		ebx, locdwtmp03

sub		ebx, eax			; w4
add		eax, locdwtmp03		; w3

add		ebx,  const_round
mov		edi, locdwwsptr		; keep in mind that wsptr stores 32 bit values

sar		ebx, 11				; So store/update the pointer accordingly
add		eax,  const_round

sar		eax, 11
mov		[edi+32*4], ebx

mov		[edi+32*3], eax
mov		ebx, locdwtmp02

mov		eax, locdwtmp01
sub		ebx, edx			; w5

add		edx, locdwtmp02		; w2
sub		eax, ecx			; w6

add		ecx, locdwtmp01		; w1
add		ebx,  const_round

sar		ebx, 11
add		eax,  const_round

sar		eax, 11
add		edx,  const_round

add		ecx,  const_round
mov		[edi+32*5], ebx

sar		edx, 11
mov		[edi+32*6], eax

sar		ecx, 11
mov		[edi+32*2], edx

mov		eax, locdwtmp00
mov		[edi+32*1], ecx

mov		ebx, eax
sub		eax, esi			; w7

add		ebx, esi			; w0
add		eax, const_round

sar		eax, 11
add		ebx, const_round

sar		ebx, 11
mov		[edi+32*7], eax

mov		[edi+32*0], ebx
mov		eax, locdwcounter

add		locdwinptr, 2
add		locdwwsptr, 4		; wsptr stores 32 bit quantities

add		locdwqptr, 2
dec		eax

mov		locdwcounter, eax
jnz		idct_column

;; End of 1D-idct of all the columns

;; get ready for the 1D-idct of the rows

mov		esi, wsptr
mov		locdwcounter, 8

mov		locdwrowctr, 0
mov		locdwwsptr, esi


;; 1D-IDCT of all the eight rows
idct_row:

mov		esi, locdwwsptr	; point to start of source
mov		edi, output_buf	

add		edi, locdwrowctr
mov		edi, [edi]

add		locdwrowctr, 4
add		edi, output_col	; this is the dest start addr for this row


;; do the even part

mov		eax, [esi+4*2]
mov		ecx, [esi+4*6]

mov		ebx, eax	; copy of z2
mov		edx, [edi]	; warm up the cache for writing this output row

imul	eax, const_0_7653

add		ebx, ecx	; z2 + z3

imul	ecx,  const_1_8477

imul	ebx,  const_0_54119	; z1

add		ecx, ebx	; tmp2
add		eax, ebx	; tmp3

mov		locdwtmp2, ecx
mov		locdwtmp3, eax

mov		ecx, [esi+4*4]	; C4
mov		eax, [esi+4*0]	; C0

mov		edx, ecx	; copy of z3

add		ecx, eax	; z2 + z3
sub		eax, edx	; z2 - z3

shl		ecx, 13		; tmp0

shl		eax, 13		; tmp1
mov		ebx, ecx	; copy of tmp0

add		ecx, locdwtmp3	; tmp10
mov		edx, eax	; copy of tmp1

add		eax, locdwtmp2	; tmp11
mov		locdwtmp00, ecx

sub		ebx, locdwtmp3	; tmp13
mov		locdwtmp01, eax

sub		edx, locdwtmp2	; tmp12
mov		locdwtmp03, ebx

mov		eax, [esi+4*7]	; C7 for the odd part
mov		locdwtmp02, edx

;; now do the odd part

mov		ecx, [esi+4*3]
mov		ebx, [esi+4*1]

mov		locdwtmp0, eax
mov		locdwtmp2, ecx

mov		eax, [esi+4*5]
mov		locdwtmp3, ebx

imul	ecx,  const_3_072	; tmp2

mov		edx, locdwtmp0

imul	ebx,  const_1_501	; tmp3

imul	edx,  const_0_2986	; tmp0

mov		locdwtmp1, eax	; store tmp1

imul	eax, const_2_053	; tmp1

mov		locdwtmp10, edx
mov		locdwtmp11, eax

mov		locdwtmp12, ecx
mov		locdwtmp13, ebx

mov		eax, locdwtmp0
mov		ebx, locdwtmp1

mov		ecx, eax
mov		edx, ebx

add		eax, locdwtmp3	; z1
add		edx, locdwtmp2	; z2

add		ebx, locdwtmp3	; z4
add		ecx, locdwtmp2	; z3

mov		esi, ecx	; copy of z3

imul	eax,  const_0_899	; z1

imul	edx, const_2_562	; z2

add		esi, ebx	; z3 + z4

imul	esi, const_1_175	; z5

imul	ecx, const_1_961	; z3

imul	ebx,  const_0_3901	; z4

add		ecx, esi	; z3
add		ebx, esi	; z4

mov		esi, eax	; copy of z1
add		eax, ecx	; z1 + z3

add		esi, ebx	; z1 + z4
add		ecx, edx	; z3 + z2

add		edx, ebx	; z2 + z4
add		eax, locdwtmp10		; tmp0

add		edx, locdwtmp11		; tmp1
add		ecx, locdwtmp12		; tmp2

add		esi, locdwtmp13		; tmp3
mov		locdwtmp0, eax

mov		locdwtmp1, edx
mov		locdwtmp2, ecx

mov		locdwtmp3, esi
mov		ebx, locdwtmp03

add		ebx, locdwtmp0	; out3
mov		ecx, locdwtmp00

sub		ecx, locdwtmp3	; out7
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
mov		esi, range_limit

and		ebx,  const_mask
and		ecx, const_mask

mov		al, [esi][ebx]
mov		dl, [esi][ecx]

mov		ebx, locdwtmp02
mov		ecx, locdwtmp01

add		ebx, locdwtmp1	; out2
sub		ecx, locdwtmp2	; out6

shl		eax, 8		; get ready to receive next output byte
add		ebx,  const_round_row

shl		edx, 8		; get ready to receive next output byte
add		ecx, const_round_row

sar		ebx, 18

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]

mov		dl, [esi][ecx]
mov		ebx, locdwtmp01

mov		ecx, locdwtmp02
add		ebx, locdwtmp2	; out1

shl		eax, 8		; get ready to receive next output byte
sub		ecx, locdwtmp1	; out5

shl		edx, 8		; get ready to receive next output byte
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]	; out1

mov		dl, [esi][ecx]	; out5
mov		ebx, locdwtmp00

mov		ecx, locdwtmp03
add		ebx, locdwtmp3	; out0

shl		eax, 8		; get ready to receive next output byte
sub		ecx, locdwtmp0	; out4

shl		edx, 8		; get ready to receive next output byte
add		ebx,  const_round_row

sar		ebx, 18
add		ecx,  const_round_row

sar		ecx, 18
and		ebx,  const_mask

and		ecx,  const_mask
mov		al, [esi][ebx]	; out0

mov		dl, [esi][ecx]	; out4
mov		[edi], eax		; store the first four bytes

mov		[edi+4], edx	; store the next four bytes of this row
mov		eax, locdwcounter

add		locdwwsptr, 32		; wsptr stores 32 bit quantities
dec		eax

mov		locdwcounter, eax
jnz		idct_row

} //end of __asm

}


#endif /* X86 */

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\sitedisp.h ===
/**************************************************************************************


  (rgardner) This file is obsolete - please put all changes in COREDISP.H
  It will be delfile'd shortly in a cleanup pass
                                                

 **************************************************************************************/



#error "Don't include this file"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\siteguid.h ===
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1992 - 1993.
//
//  File:       siteguid.h
//
//  Contents:   extern references for site guids and manifest constants
//              for dispids
//
//----------------------------------------------------------------------------

//
// Reserve 10000 GUID entries beginning 3050f160-98b5-11cf-bb82-00aa00bdce0b
// and ending at 30c38c70-98b5-11cf-bb82-00aa00bdce0b.
//
// See the next available GUID in ...\src\guids.txt
// Check procedure for using next available GUID with F3 procedures handbook
//

#ifndef I_SITEGUID_H_
#define I_SITEGUID_H_
#pragma INCMSG("--- Beg 'siteguid.h'")

// Use PUBLIC_GUID for GUIDs used outside FORMS3.DLL.
// Use PRIVATE_GUID for all other GUIDS.

#ifndef PUBLIC_GUID
#define PUBLIC_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8);
#endif

#ifndef PRIVATE_GUID
#define PRIVATE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8);
#endif

PUBLIC_GUID(CLSID_CTextSite,  0x3050f35e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CTextEdit,  0x3050f330, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CRange,     0x3050f234, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CElement,   0x3050f233, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CStyle,     0x3050f499, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CElementCollection,   0x3050f627, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CAttribute, 0x3050f6a1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)
PUBLIC_GUID(CLSID_CDocument,  0x3050f83b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x0b)

PRIVATE_GUID(CLSID_CMarkup,         0x3050F4FB, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)
PRIVATE_GUID(CLSID_CTreeNode,       0x3050F432, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)
PRIVATE_GUID(CLSID_CMarkupPointer,  0x3050f4a5, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)
PRIVATE_GUID(CLSID_CDisplayPointer, 0x3050f69f, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)
PRIVATE_GUID(CLSID_CComputedStyle,  0x3050f6c4, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)
PRIVATE_GUID(CLSID_CHighlightSegment, 0x3050f694, 0x98B5, 0x11CF, 0xBB, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B)

// ********************** DO NOT REMOVE the below GUID. **********************
//
// IE4 shipped the interface IHTMLControlElement with the same GUID as IControl
// from forms^3 this is of course bad.  To resolve this problem Trident's
// GUID for IHTMLControlElement has changed however, the old GUID remembered in
// the QI for CSite to return IHTMLControlElement.  The only side affect is that
// using the old GUID will not marshall the interface correctly only the new
// GUID has the correct marshalling code.

// {04598fc6-866c-11cf-ab7c-00aa00c08fcf}
PRIVATE_GUID(IID_IControl, 0x04598fc6, 0x866c, 0x11cf, 0xab, 0x7c, 0x00, 0xaa, 0x00, 0xc0, 0x8f, 0xcf);

#pragma INCMSG("--- End 'siteguid.h'")
#else
#pragma INCMSG("*** Dup 'siteguid.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\textedit.h ===
/*
 *  TEXTEDIT.H
 *
 *
 *  Copyright (c) 1985-1996, Microsoft Corporation
 */

#ifndef I_TEXTEDIT_H_
#define I_TEXTEDIT_H_
#pragma INCMSG("--- Beg 'textedit.h'")

/* new word break function actions */
// Left must we even, right must be odd
#define WB_CLASSIFY         3
#define WB_MOVEWORDLEFT     4
#define WB_MOVEWORDRIGHT    5
#define WB_LEFTBREAK        6
#define WB_RIGHTBREAK       7
#define WB_MOVEURLLEFT      10
#define WB_MOVEURLRIGHT     11

/* Far East specific flags */
#define WB_MOVEWORDPREV     4
#define WB_MOVEWORDNEXT     5
#define WB_PREVBREAK        6
#define WB_NEXTBREAK        7

/* Word break flags (used with WB_CLASSIFY) */
#define WBF_CLASS           ((BYTE) 0x0F)
#define WBF_WHITE           ((BYTE) 0x10)
#define WBF_BREAKAFTER      ((BYTE) 0x20)
#define WBF_EATWHITE        ((BYTE) 0x40)

#define yHeightCharPtsMost 1638

// NOTE (cthrash) There's really no point in statically allocating an
// array of MAX_TAB_STOPS tabs, since currently we have no mechanism for
// changing them.  In the future, though, we may have via stylesheets a
// way of setting them.  Until then, let's not waste memory in PFs.

#define MAX_TAB_STOPS 1 //32
#define lDefaultTab 960 //720

/* Underline types */
#define CFU_OVERLINE_BITS   0xf0
#define CFU_UNDERLINE_BITS  0x0f
#define CFU_OVERLINE        0x10
#define CFU_STRIKE          0x20
#define CFU_SWITCHSTYLE     0x40
#define CFU_SQUIGGLE        0x80
#define CFU_UNDERLINETHICKDASH 0x6  /* For SmartTags.*/
#define CFU_INVERT          0x5 /* For IME composition fake a selection.*/
#define CFU_CF1UNDERLINE    0x4 /* map charformat's bit underline to CF2.*/
#define CFU_UNDERLINEDOTTED 0x3     /* (*) displayed as ordinary underline  */
#define CFU_UNDERLINEDOUBLE 0x2     /* (*) displayed as ordinary underline  */
#define CFU_UNDERLINEWORD   0x1     /* (*) displayed as ordinary underline  */
#define CFU_UNDERLINE       0x0

#pragma INCMSG("--- End 'textedit.h'")
#else
#pragma INCMSG("*** Dup 'textedit.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\siterc.h ===
To be removed

//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996
//
//  File:       siterc.h
//
//  Contents:   Resource identifiers for Site directory tree
//
//----------------------------------------------------------------------------

#ifndef I_SITERC_H_
#define I_SITERC_H_
#pragma INCMSG("--- Beg 'siterc.h'")

//----------------------------------------------------------------------------
//
// Registered servers
//
//  00900 - 00999    Site registered servers
//  08000 - 08999    Site miscellaneous
//
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
//
// Registered servers
//
//----------------------------------------------------------------------------


// HTML Form

#define IDR_BASE_HTMLFORM           900
#define IDS_HTMLFORM_USERTYPEFULL   180
#define IDS_HTMLFORM_USERTYPESHORT  181
#define IDR_HTMLFORM_TOOLBOXBITMAP  905
#define IDR_HTMLFORM_ACCELS         906
#define IDR_HTMLFORM_MENUDESIGN     907
#define IDR_HTMLFORM_MENURUN        908
#define IDR_HTMLFORM_DOCDIR         909


//----------------------------------------------------------------------------
//
// Errors
//
//----------------------------------------------------------------------------

#define IDS_SITE_BASE      7999

#define IDS_ACT_UPDATEPROPS          (IDS_SITE_BASE + 1)
#define IDS_ACT_DDOCSTARTUP          (IDS_SITE_BASE + 2)
#define IDS_ERR_DDOCPOPULATEFAILED   (IDS_SITE_BASE + 3)
#define IDS_ERR_DDOCGENERAL          (IDS_SITE_BASE + 4)
#define IDS_ACT_DDOCSCROLLGENERAL    (IDS_SITE_BASE + 5)
#define IDS_ACT_DDOCSCROLLLINEUP     (IDS_SITE_BASE + 6)
#define IDS_ACT_DDOCSCROLLLINEDOWN   (IDS_SITE_BASE + 7)
#define IDS_ACT_DDOCSCROLLPAGEUP     (IDS_SITE_BASE + 8)
#define IDS_ACT_DDOCSCROLLPAGEDOWN   (IDS_SITE_BASE + 9)
#define IDS_ACT_DDOCSCROLLEND        (IDS_SITE_BASE + 10)

#define IDS_SYNTAX_ERROR             (IDS_SITE_BASE + 12)    // "Syntax error in file %s (line %n): %s"
#define IDS_LAYOUTSELTOOL            (IDS_SITE_BASE + 13)
#define IDS_ACT_DDOCAFTERLOAD        (IDS_SITE_BASE + 14)
#define IDS_LOADTEXT                 (IDS_SITE_BASE + 15)
#define IDS_LOADTEXTUNKNOWNPROP      (IDS_SITE_BASE + 16)
#define IDS_CONTAINERTEXT            (IDS_SITE_BASE + 17)
#define IDS_TEXTSITETEXT             (IDS_SITE_BASE + 18)
#define IDS_HTMLDEFAULTFONT          (IDS_SITE_BASE + 19)

#define IDS_NAMEDPROPERTIES          (IDS_SITE_BASE + 21)
#define IDS_UNNAMEDPROPERTIES        (IDS_SITE_BASE + 22)

#define IDS_ERR_SAVEPICTUREAS        (IDS_SITE_BASE + 26)
#define IDS_ERR_SETWALLPAPER         (IDS_SITE_BASE + 27)

#define IDS_RUNAWAYSCRIPT            (IDS_SITE_BASE + 29)
#define IDS_PROTECTEDFROMUNSAFEOCX   (IDS_SITE_BASE + 31)
#define IDS_PROTECTEDFROMOCXINIT     (IDS_SITE_BASE + 32)
#define IDS_REPOSTFORMDATA           (IDS_SITE_BASE + 33)
#define IDS_OCXDISABLED              (IDS_SITE_BASE + 34)
#define IDS_MISMATCHEDXML            (IDS_SITE_BASE + 35)
#define IDS_DEBUGCONTINUE            (IDS_SITE_BASE + 36)
#define IDS_FMTDEBUGCONTINUE         (IDS_SITE_BASE + 37)
#define IDS_ERR_SETDESKTOPITEM       (IDS_SITE_BASE + 38)

#define IDC_SITE_CURSORBASE         9800
#define IDC_HYPERLINK               9801
#define IDC_HYPERLINK_OFFLINE       9802
#define IDC_HYPERLINK_WAIT          9803

// Menu index
#define MENU_INDEX_EDIT             1
#define MENU_INDEX_VIEW             2
#define MENU_INDEX_INSERT           3
#define MENU_INDEX_FORMAT           4
#define MENU_INDEX_TABLE            5

#define IDS_HTMLFORM_SAVE                   8114
#define IDS_2DFORM_SAVE                     8115
#define IDS_SAVEPICTUREAS_GIF               8116
#define IDS_SAVEPICTUREAS_JPG               8117
#define IDS_SAVEPICTUREAS_BMP               8118
#define IDS_SAVEPICTUREAS_XBM               8119
#define IDS_SAVEPICTUREAS_ART               8120
#define IDS_SAVEPICTUREAS_WMF               8121
#define IDS_SAVEPICTUREAS_EMF               8122
#define IDS_SAVEPICTUREAS_AVI               8123
#define IDS_SAVEPICTUREAS_MPG               8124
#define IDS_SAVEPICTUREAS_MOV               8125
#define IDS_SAVEPICTUREAS_ORIGINAL          8126
#define IDS_UNTITLED_BITMAP                 8127
#define IDS_UNTITLED                        8128
#define IDS_WALLPAPER_BMP                   8129

// default document security property
#define IDS_DEFAULT_DOC_SECURITY_PROP       8130

// Jave Script prompt() dialog
#define IDD_PROMPT                          8131
#define IDC_PROMPT_PROMPT                   8132
#define IDC_PROMPT_EDIT                     8133

// Plugin/ActiveX Viewer Not Installed dialog
#define IDD_PLUGIN_UPGRADE                  8134
#define IDC_PLUGIN_UPGRADE_CHECK            8135
#define IDC_PLUGIN_UPGRADE_EXTENSION        8136
#define IDC_PLUGIN_UPGRADE_MIME_TYPE        8137

// Save As string for PNG images
#define IDS_SAVEPICTUREAS_PNG               8138

//+----------------------------------------------------------------------------
//
// Progress status text strings
//
//-----------------------------------------------------------------------------

#define IDS_BINDSTATUS_DOWNLOADING                  8154
#define IDS_BINDSTATUS_DOWNLOADINGDATA_PICTURE      8155
#define IDS_BINDSTATUS_GENERATINGDATA_TEXT          8156
#define IDS_BINDSTATUS_DOWNLOADINGDATA_TEXT         8157
#define IDS_BINDSTATUS_INSTALLINGCOMPONENTS         8160
#define IDS_BINDSTATUS_DOWNLOADINGDATA_BITS         8167

#define IDS_DONE                                    8169

#define IDS_LOADINGTABLE                            8170
#define IDS_DATABINDING                             8171

#define IDS_FRIENDLYURL_SHORTCUTTO                  8172
#define IDS_FRIENDLYURL_AT                          8173
#define IDS_FRIENDLYURL_SENDSMAILTO                 8174
#define IDS_FRIENDLYURL_LOCAL                       8175
#define IDS_FRIENDLYURL_GOPHER                      8176
#define IDS_FRIENDLYURL_FTP                         8177
#define IDS_FRIENDLYURL_SECUREWEBSITE               8178

#define IDS_CANNOTLOAD                              8193
#define IDS_ONBEFOREUNLOAD_PREAMBLE                 8194
#define IDS_ONBEFOREUNLOAD_POSTAMBLE                8195

#define IDS_DEFAULT_ISINDEX_PROMPT                  8196


// Add controls to the save as dialog.
#define IDC_SAVE_CHARSET                            8194

//+----------------------------------------------------------------------------
//
// string used in conversion GetIDsOfNames
//
//----------------------------------------------------------------------------

#define IDS_DISPID_FIRST                8200                       // matches:
#define IDS_DISPID_FONTNAME             (IDS_DISPID_FIRST +  1)    // DISPID_CommonCtrl_FONTNAME
#define IDS_DISPID_FONTSIZE             (IDS_DISPID_FIRST +  2)    // DISPID_CommonCtrl_FONTSIZE
#define IDS_DISPID_FONTBOLD             (IDS_DISPID_FIRST +  3)    // DISPID_CommonCtrl_FONTBOLD
#define IDS_DISPID_FONTITAL             (IDS_DISPID_FIRST +  4)    // DISPID_CommonCtrl_FONTITAL
#define IDS_DISPID_FONTUNDER            (IDS_DISPID_FIRST +  5)    // DISPID_CommonCtrl_FONTUNDER
#define IDS_DISPID_FONTSTRIKE           (IDS_DISPID_FIRST +  6)    // DISPID_CommonCtrl_FONTSTRIKE
#define IDS_DISPID_BACKCOLOR            (IDS_DISPID_FIRST +  7)    // DISPID_BACKCOLOR
#define IDS_DISPID_BORDERCOLOR          (IDS_DISPID_FIRST +  9)    // DISPID_BORDERCOLOR
#define IDS_DISPID_BORDERSTYLE          (IDS_DISPID_FIRST + 10)    // DISPID_BORDERSTYLE
#define IDS_DISPID_TEXTALIGN            (IDS_DISPID_FIRST + 11)    // DISPID_CommonCtrl_TextAlign
#define IDS_DISPID_SPECIALEFFECT        (IDS_DISPID_FIRST + 12)    // DISPID_CommonCtrl_SpecialEffect
#define IDS_DISPID_FONTSUPERSCRIPT      (IDS_DISPID_FIRST + 13)    // DISPID_CommonCtrl_FONTSUPERSCRIPT
#define IDS_DISPID_FONTSUBSCRIPT        (IDS_DISPID_FIRST + 14)    // DISPID_CommonCtrl_FONTSUBSCRIPT

//+----------------------------------------------------------------------------
//
// string used by script window
//
//----------------------------------------------------------------------------

#define IDS_OMWINDOW_FIRST             8300

#define IDS_VAR2STR_VTERROR             (IDS_OMWINDOW_FIRST + 0)
#define IDS_VAR2STR_VTNULL              (IDS_OMWINDOW_FIRST + 1)
#define IDS_VAR2STR_VTBOOL_TRUE         (IDS_OMWINDOW_FIRST + 2)
#define IDS_VAR2STR_VTBOOL_FALSE        (IDS_OMWINDOW_FIRST + 3)

//+----------------------------------------------------------------------------
//
//  Printing constants
//
//----------------------------------------------------------------------------

#define IDS_PRINT_FIRST                 8400

#define IDS_PRINT_URLTITLE              8400
#define IDS_PRINT_URLCOL1HEAD           8401
#define IDS_PRINT_URLCOL2HEAD           8402
#define IDS_DEFAULTHEADER               8403
#define IDS_DEFAULTFOOTER               8404
#define IDS_DEFAULTMARGINTOP            8405
#define IDS_DEFAULTMARGINBOTTOM         8406
#define IDS_DEFAULTMARGINLEFT           8407
#define IDS_DEFAULTMARGINRIGHT          8408

#ifdef  UNIX
#define IDU_DEFAULTPRINTNAME  		8430
#define IDU_DEFAULTPRINTCOMMAND  	8431
#endif  // UNIX
//+----------------------------------------------------------------------------
//
//  Button caption constants
//
//----------------------------------------------------------------------------

#define IDS_BUTTONCAPTION_FIRST         8500

#define IDS_BUTTONCAPTION_RESET         8500
#define IDS_BUTTONCAPTION_SUBMIT        8501
#define IDS_BUTTONCAPTION_UPLOAD        8502

//+----------------------------------------------------------------------------
//
//   MailTo constants
//
//----------------------------------------------------------------------------

#define IDS_MAILTO_FIRST                8600
#define IDS_MAILTO_DEFAULTSUBJECT       8600
#define IDS_MAILTO_MAILCLIENTNOTFOUND   8601
#define IDS_MAILTO_SUBMITALERT          8602


//+-------------------------------------------------------------------------
//
//  Property frame
//  (peterlee) moved to shdocvw
//--------------------------------------------------------------------------
#ifdef NEVER
        #define IDD_PROPFRM_DELAYCOMMIT     5400
        #define IDD_PROPFRM_IMMEDCOMMIT     5401
        #define IDC_PROPFRM_TABS            5402
        #define IDC_PROPFRM_APPLY           5403
        #define IDR_PROPFRM_ICON            5404
        #define IDI_PROPDLG_COMBO           44
        #define IDI_PROPDLG_TABS            IDC_PROPFRM_TABS
        #define IDI_PROPDLG_APPLY           IDC_PROPFRM_APPLY
        #define IDR_PROPERTIES_DIALOG       IDD_PROPFRM_DELAYCOMMIT

        #define IDS_PROPFRM_APPLY           5416
        #define IDS_PROPFRM_CLOSE           5417
        #define IDS_PROPFRM_CHANGES         5418
        #define IDS_PROPFRM_DEFCAPTION      5419
        #define IDS_PROPFRM_MULTOBJCAPTION  5420
        #define IDS_PROPFRM_TYPECAPTION     5421
        #define IDS_PROPFRM_UNDOCHANGE      5422
        #define IDS_PROPFRM_SIZETOFIT       5423
#endif // NEVER

#define IDS_CONTAINERPAGE_ACCEL     5424

#if DBG == 1

#define IDS_COLOR_BLACK             5430
#define IDS_COLOR_NAVY              5431
#define IDS_COLOR_BLUE              5432
#define IDS_COLOR_CYAN              5433
#define IDS_COLOR_RED               5434
#define IDS_COLOR_LIME              5435
#define IDS_COLOR_GRAY              5436
#define IDS_COLOR_GREEN             5437
#define IDS_COLOR_YELLOW            5438
#define IDS_COLOR_PINK              5439
#define IDS_COLOR_VIOLET            5440
#define IDS_COLOR_WHITE             5441
// 5442 and 5443 replaced by html dialogs

#endif // DBG == 1

#define IDS_UPLOADFILE              5444

#ifdef UNIX
#  define IDS_PRINT_ERROR             5445
#  define IDS_PRINT_ERROR_MSG         5446
#endif

#ifndef NO_HTML_DIALOG
// find resources are now located in shdocvw (peterlee)
//#define IDR_FINDDIALOG              _T("find.dlg")
//#define IDR_BIDIFINDDIALOG          _T("bidifind.dlg")
#define IDR_REPLACEDIALOG           _T("replace.dlg")
#define IDR_FORPARDIALOG            _T("forpar.dlg")
#define IDR_FORCHARDIALOG           _T("forchar.dlg")
#define IDR_GOBOOKDIALOG            _T("gobook.dlg")
#define IDR_INSIMAGEDIALOG          _T("insimage.dlg")
#define IDR_EDLINKDIALOG            _T("edlink.dlg")
#define IDR_EDBOOKDIALOG            _T("edbook.dlg")
#endif // NO_HTML_DIALOG

#define IDR_PRINTTEMPLATE           _T("preview.dlg")

// property grids removed (peterlee)
#ifdef NEVER
        #ifndef NO_PROPERTY_PAGE
        #define IDR_BACKGRNDPPG             _T("backgrnd.ppg")
        #endif // NO_PROPERTY_PAGE
#endif // NEVER

// New Encoding Menu
#define RES_STRING_ENCODING_MORE            4700

#pragma INCMSG("--- End 'siterc.h'")
#else
#pragma INCMSG("*** Dup 'siterc.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\tomconst.h ===
// These are constants defined in tom.h

#ifndef I_TOMCONST_H_
#define I_TOMCONST_H_
#pragma INCMSG("--- Beg 'tomconst.h'")

typedef enum {
    tomFalse = 0,
    tomTrue = -1,
    tomUndefined = -9999999,
    tomToggle = -9999998,
    tomAutoColor = -9999997,
    tomDefault = -9999996,
    tomBackward = -1073741825,
    tomForward = 1073741823,
    tomMove = 0,
    tomExtend = 1,
    tomNoSelection = 0,
    tomSelectionIP = 1,
    tomSelectionNormal = 2,
    tomSelectionObject = 3,
    tomSelectionFrame = 4,
    tomSelectionColumn = 5,
    tomSelectionRow = 6,
    tomSelectionBlock = 7,
    tomSelectionPicture = 8,
    tomSelectionShape = 9,
    tomSelStartActive = 1,
    tomSelAtEOL = 2,
    tomSelOvertype = 4,
    tomSelActive = 8,
    tomSelReplace = 16,
    tomEnd = 0,
    tomStart = 32,
    tomNone = 0,
    tomSingle = 1,
    tomWords = 2,
    tomDouble = 3,
    tomDotted = 4,
    tomLineSpaceSingle = 0,
    tomLineSpace1pt5 = 1,
    tomLineSpaceDouble = 2,
    tomLineSpaceAtLeast = 3,
    tomLineSpaceExactly = 4,
    tomLineSpaceMultiple = 5,
    tomAlignLeft = 0,
    tomAlignCenter = 1,
    tomAlignRight = 2,
    tomAlignJustify = 3,
    tomAlignDecimal = 3,
    tomAlignChar = 4,
    tomAlignBar = 5,
    tomSpaces = 0,
    tomDots = 1,
    tomDashes = 2,
    tomLines = 3,
    tomTabBack = -3,
    tomTabNext = -2,
    tomTabHere = -1,
    tomListNone = 0,
    tomListBullet = 1,
    tomListNumberAsArabic = 2,
    tomListNumberAsLCLetter = 3,
    tomListNumberAsUCLetter = 4,
    tomListNumberAsLCRoman = 5,
    tomListNumberAsUCRoman = 6,
    tomListNumberAsSequence = 7,
    tomListParentheses = 65536,
    tomListPeriod = 131072,
    tomListPlain = 196608,
    tomCharacter = 1,
    tomWord = 2,
    tomSentence = 3,
    tomParagraph = 4,
    tomLine = 5,
    tomStory = 6,
    tomScreen = 7,
    tomSection = 8,
    tomColumn = 9,
    tomRow = 10,
    tomWindow = 11,
    tomCell = 12,
    tomCharFormat = 13,
    tomParaFormat = 14,
    tomTable = 15,
    tomObject = 16,
    tomMatchWord = 2,
    tomMatchCase = 4,
    tomMatchPattern = 8,
    tomUnknownStory = 0,
    tomMainTextStory = 1,
    tomFootnotesStory = 2,
    tomEndnotesStory = 3,
    tomCommentsStory = 4,
    tomHeadersStory = 5,
    tomFootersStory = 6,
    tomTextboxStory = 7,
    tomNoAnimation = 0,
    tomBlinkingText = 1,
    tomBlinkingBackground = 2,
    tomSparkleText = 3,
    tomBlackMarchingAnts = 4,
    tomRedMarchingAnts = 5,
    tomWipeDown = 6,
    tomWipeRight = 7,
    tomLasVegasLights = 8,
    tomFadeOut = 9,
    tomShimmer = 10,
    tomScrollRight = 11,
    tomScrollDown = 12,
    tomMeltingText = 13,
    tomShrinkingText = 14,
    tomSquish = 15,
    tomWave = 16,
    tomFlameText = 17,
    tomBlinkingColors = 18,
    tomSentenceCase = 0,
    tomLowerCase = 1,
    tomUpperCase = 2,
    tomTitleCase = 3,
    tomToggleCase = 4,
    tomReadOnly = 256,
    tomShareDenyRead = 512,
    tomShareDenyWrite = 1024,
    tomPasteFile = 4096,
    tomCreateNew = 16,
    tomCreateAlways = 32,
    tomOpenExisting = 48,
    tomOpenAlways = 64,
    tomTruncateExisting = 80,
    tomRTF = 1,
    tomText = 2,
    tomHTML = 3,
    tomWordDocument = 4
} tomConstants;

#pragma INCMSG("--- End 'tomconst.h'")
#else
#pragma INCMSG("*** Dup 'tomconst.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\unidir.h ===
/*
 *  @doc    INTERNAL
 *
 *  @module UNIDIR.H -- Unicode direction classes
 *
 *
 *  Owner: <nl>
 *      Michael Jochimsen <nl>
 *
 *  History: <nl>
 *      08/12/98     mikejoch created
 *
 *  Copyright (c) 1997-1998 Microsoft Corporation. All rights reserved.
 */

#ifndef I__UNIDIR_H_
#define I__UNIDIR_H_
#pragma INCMSG("--- Beg 'unidir.h'")

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

// Direction class of a character.
typedef BYTE DIRCLS;

//--WARNING----WARNING----WARNING----WARNING----WARNING----WARNING----WARNING--
//--WARNING----WARNING----WARNING----WARNING----WARNING----WARNING----WARNING--
//
//  The ordering of the entries in the dircls enum is extremely important. If
//  you change it be sure to correct all the Is???Class() functions below AND
//  also review the code in lscomplx.cxx. There are a couple of lookup tables
//  in CBidiLine which are dependent on this ordering.
//
//--WARNING----WARNING----WARNING----WARNING----WARNING----WARNING----WARNING--
//--WARNING----WARNING----WARNING----WARNING----WARNING----WARNING----WARNING--

enum dircls
{
    LTR, // Left to right
    RTL, // Right to left
    ARA, // Arabic
    ANM, // Arabic numeral
    ENL, // European numeral preceeded by LTR
    ENR, // European numeral preceeded by RTL
    ENM, // European numeral
    ETM, // European numeric terminator
    ESP, // European numeric separator
    CSP, // Common numeric separator
    UNK, // Unknown
    WSP, // Whitespace
    CBN, // Combining mark
    NEU, // Neutral, whitespace, undefined
    SEG, // Segment separator (tab)
    BLK, // Block separator
    LRE, // LTR embedding
    LRO, // LTR override
    RLO, // RTL override
    RLE, // RTL embedding
    PDF, // Pop directional formatting
    FMT, // Embedding format
};

extern const DIRCLS s_aDirClassFromCharClass[];

inline BOOL IsStrongClass(DIRCLS dc)
{
    return IN_RANGE(LTR, dc, ARA);
}
inline BOOL IsFinalClass(DIRCLS dc)
{
    return IN_RANGE(LTR, dc, ENR);
}
inline BOOL IsNumericClass(DIRCLS dc)
{
    return IN_RANGE(ANM, dc, ENM);
}
inline BOOL IsResolvedEuroNumClass(DIRCLS dc)
{
    return IN_RANGE(ENL, dc, ENR);
}
inline BOOL IsNumericPunctuationClass(DIRCLS dc)
{
    return IN_RANGE(ETM, dc, CSP);
}
inline BOOL IsNumericSeparatorClass(DIRCLS dc)
{
    return IN_RANGE(ESP, dc, CSP);
}
inline BOOL IsNeutralClass(DIRCLS dc)
{
    return IN_RANGE(UNK, dc, NEU);
}
inline BOOL IsIndeterminateClass(DIRCLS dc)
{
    return IN_RANGE(ETM, dc, NEU);
}
inline BOOL IsBreakOrEmbeddingClass(DIRCLS dc)
{
    return IN_RANGE(SEG, dc, PDF);
}
inline BOOL IsEmbeddingClass(DIRCLS dc)
{
    return IN_RANGE(LRE, dc, RLE);
}
inline BOOL IsOverrideClass(DIRCLS dc)
{
    return IN_RANGE(LRO, dc, RLO);
}
inline BOOL IsRTLEmbeddingClass(DIRCLS dc)
{
    return IN_RANGE(RLO, dc, RLE);
}

#pragma INCMSG("--- End 'unidir.h'")
#else
#pragma INCMSG("*** Dup 'unidir.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\uniwbk.h ===
/*
 *  @doc    INTERNAL
 *
 *  @module UNIWBK.HXX -- Unicode Word-breaking Classes
 *
 *
 *  Owner: <nl>
 *      Chris Thrasher <nl>
 *
 *  History: <nl>
 *      06/19/98     cthrash created
 *
 *  Copyright (c) 1997-1998 Microsoft Corporation. All rights reserved.
 */

#ifndef I__UNIWBK_H_
#define I__UNIWBK_H_
#pragma INCMSG("--- Beg 'uniwbk.h'")

typedef BYTE CHAR_CLASS;
typedef BYTE WBKCLS;

enum
{
    wbkclsPunctSymb,     // 0
    wbkclsKanaFollow,    // 1
    wbkclsKatakanaW,     // 2
    wbkclsHiragana,      // 3
    wbkclsTab,           // 4
    wbkclsKanaDelim,     // 5
    wbkclsPrefix,        // 6
    wbkclsPostfix,       // 7
    wbkclsSpaceA,        // 8
    wbkclsAlpha,         // 9
    wbkclsIdeoW,         // 10
    wbkclsSuperSub,      // 11
    wbkclsDigitsN,       // 12
    wbkclsPunctInText,   // 13
    wbkclsDigitsW,       // 14
    wbkclsKatakanaN,     // 15
    wbkclsHangul,        // 16
    wbkclsLatinW,        // 17
    wbkclsLim
};

WBKCLS WordBreakClassFromCharClass( CHAR_CLASS cc );
BOOL   IsWordBreakBoundaryDefault( WCHAR, WCHAR );
BOOL   IsProofWordBreakBoundary( WCHAR, WCHAR );
BOOL   IsURLBreak( WCHAR );

#pragma INCMSG("--- End 'uniwbk.h'")
#else
#pragma INCMSG("*** Dup 'uniwbk.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\uniprop.h ===
/*
 *  @doc    INTERNAL
 *
 *  @module UNIPROP.H -- Unicode property bits
 *
 *
 *  Owner: <nl>
 *      Michael Jochimsen <nl>
 *
 *  History: <nl>
 *      11/30/98     mikejoch created
 *
 *  Copyright (c) 1997-1998 Microsoft Corporation. All rights reserved.
 */

#ifndef I__UNIPROP_H_
#define I__UNIPROP_H_
#pragma INCMSG("--- Beg 'uniprop.h'")

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

struct tagUNIPROP
{
    BYTE fNeedsGlyphing     : 1;    // partition needs glyphing
    BYTE fCombiningMark     : 1;    // partition consists of combining marks
    BYTE fZeroWidth         : 1;    // characters in partition have zero width
    BYTE fWhiteBetweenWords : 1;    // white space between words not required
    BYTE fMoveByCluster     : 1;    // The caret cannot be positioned inside of a cluster
    BYTE fUnused            : 3;    // unused bits
};

typedef tagUNIPROP UNIPROP;

extern const UNIPROP s_aPropBitsFromCharClass[];

#pragma INCMSG("--- End 'uniprop.h'")
#else
#pragma INCMSG("*** Dup 'uniprop.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\wchdefs.h ===
/*
 *  @doc    INTERNAL
 *
 *  @module WCHDEFS.H -- Wide chararacter definitions for Trident
 *
 *
 *  Owner: <nl>
 *      Chris Thrasher <nl>
 *
 *  History: <nl>
 *      01/09/98     cthrash created
 *      01/23/98     a-pauln added complex script support
 *
 *  Copyright (c) 1997-1998 Microsoft Corporation. All rights reserved.
 */

#ifndef I_WCHDEFS_H_
#define I_WCHDEFS_H_
#pragma INCMSG("--- Beg 'wchdefs.h'")

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

//
// UNICODE special characters for Trident.
//

//
// If you need to allocate a special character for Trident, redefine one of
// the WCH_UNUSED characters.  Do no redefine WCH_RESERVED characters, as
// this would break rendering of symbol fonts.  If you run out of special
// chars the first candidate to be removed from the RESERVED list is 008A
// (only breaks 1253+1255) and the next is 009A (breaks 1253+1255+1256).
//
// If you make any modification, you need to modify the abUsed table so
// that our IsSyntheticChar and IsValidWideChar functions continue to work.
// Note also that WCH_EMBEDDING must be the first non-reserved character.
//
// Here's a bit of an explanation: Although U+0080 through U+009F are defined
// to be control characters in Unicode, many codepages used codepoints in this
// range for roundtripping characters not in their codepage.  For example,
// windows-1252 does not have a glyph for MB 0x80, but if you convert this to
// WC, you'll get U+0080.  This is useful to know because someone might try
// to use that codepoint (especially in a symbol font) and don't want to
// reject them.  To accomodate as many codepages as possible, I've reserved
// all the unused glyphs in Windows-125x.  This should allow us to use symbol
// fonts in any of these codepages (with, of course, the exception of U+00A0,
// which we'll always treat as an NBSP even if the font has a non-spacing
// glyph.)  Any questions? I'm just e-mail away. (cthrash)
//

//
// In Unicode 3.0 we have 32 characters for private use [U+FDD0-U+FDEF]
// So far we are using them for 'Synthetic characters' and 
// 'Line Services installed object handler support' (see below).
//

#undef WCH_EMBEDDING

#ifdef UNICODE
inline BOOL IsValidWideChar(TCHAR ch)
{
    return (ch < 0xfdd0) || ((ch > 0xfdef) && (ch <= 0xffef)) || ((ch >= 0xfff9) && (ch <= 0xfffd));
}
#else
#define IsValidWideChar(ch) FALSE
#endif

#define WCH_NULL                WCHAR(0x0000)
#define WCH_UNDEF               WCHAR(0x0001)
#define WCH_TAB                 WCHAR(0x0009)
#define WCH_LF                  WCHAR(0x000a)
#define WCH_CR                  WCHAR(0x000d)
#define WCH_SPACE               WCHAR(0x0020)
#define WCH_QUOTATIONMARK       WCHAR(0x0022)
#define WCH_AMPERSAND           WCHAR(0x0026)
#define WCH_APOSTROPHE          WCHAR(0x0027)
#define WCH_ASTERISK            WCHAR(0x002a)
#define WCH_PLUSSIGN            WCHAR(0x002b)
#define WCH_MINUSSIGN           WCHAR(0x002d)
#define WCH_HYPHEN              WCHAR(0x002d)
#define WCH_DOT                 WCHAR(0x002e)
#define WCH_LESSTHAN            WCHAR(0x003c)
#define WCH_GREATERTHAN         WCHAR(0x003e)
#define WCH_NONBREAKSPACE       WCHAR(0x00a0) // &nbsp;
#define WCH_NONREQHYPHEN        WCHAR(0x00ad) // &shy;
#define WCH_KASHIDA             WCHAR(0x0640)
#define WCH_ENQUAD              WCHAR(0x2000) 
#define WCH_EMQUAD              WCHAR(0x2001) 
#define WCH_ENSPACE             WCHAR(0x2002) // &ensp;
#define WCH_EMSPACE             WCHAR(0x2003) // &emsp;
#define WCH_THREE_PER_EM_SPACE  WCHAR(0x2004) 
#define WCH_FOUR_PER_EM_SPACE   WCHAR(0x2005) 
#define WCH_SIX_PER_EM_SPACE    WCHAR(0x2006) 
#define WCH_FIGURE_SPACE        WCHAR(0x2007) 
#define WCH_PUNCTUATION_SPACE   WCHAR(0x2008) 
#define WCH_NARROWSPACE         WCHAR(0x2009) // &thinsp;
#define WCH_NONBREAKHYPHEN      WCHAR(0x2011)
#define WCH_FIGUREDASH          WCHAR(0x2012)
#define WCH_ENDASH              WCHAR(0x2013) // &ndash;
#define WCH_EMDASH              WCHAR(0x2014) // &mdash;
#define WCH_ZWSP                WCHAR(0x200b) // &zwsp; Zero width space
#define WCH_ZWNJ                WCHAR(0x200c) // &zwnj; Zero width non-joiner
#define WCH_ZWJ                 WCHAR(0x200d) // &zwj;  Zero width joiner
#define WCH_LRM                 WCHAR(0x200e) // &lrm;  Left-to-right mark
#define WCH_RLM                 WCHAR(0x200f) // &rlm;  Right-to-left mark
#define WCH_LQUOTE              WCHAR(0x2018) // &lsquo;
#define WCH_RQUOTE              WCHAR(0x2019) // &rsquo;
#define WCH_LDBLQUOTE           WCHAR(0x201c) // &ldquo;
#define WCH_RDBLQUOTE           WCHAR(0x201d) // &rdquo;
#define WCH_BULLET              WCHAR(0x2022) // &bull;
#define WCH_HELLIPSIS           WCHAR(0x2026)
#define WCH_LRE                 WCHAR(0x202a) // &lre;  Left-to-right embedding
#define WCH_RLE                 WCHAR(0x202b) // &rle;  Right-to-left embedding
#define WCH_PDF                 WCHAR(0x202c) // &pdf;  Pop direction format
#define WCH_LRO                 WCHAR(0x202d) // &lro;  Left-to-right override
#define WCH_RLO                 WCHAR(0x202e) // &rlo;  Right-to-left override
#define WCH_ISS                 WCHAR(0x206a) // &iss;  Inhibit symmetric swapping
#define WCH_ASS                 WCHAR(0x206b) // &ass;  Activate symmetric swapping
#define WCH_IAFS                WCHAR(0x206c) // &iafs; Inhibit Arabic form shaping
#define WCH_AAFS                WCHAR(0x206d) // &aafx; Activate Arabic form shaping
#define WCH_NADS                WCHAR(0x206e) // &nads; National digit shapes
#define WCH_NODS                WCHAR(0x206f) // &nods; Nominal digit shapes
#define WCH_EURO                WCHAR(0x20ac) // &euro;
#define WCH_VELLIPSIS           WCHAR(0x22ee)
#define WCH_BLACK_CIRCLE        WCHAR(0x25cf)
#define WCH_FESPACE             WCHAR(0x3000)
#define WCH_UTF16_HIGH_FIRST    WCHAR(0xd800)
#define WCH_UTF16_HIGH_LAST     WCHAR(0xdbff)
#define WCH_UTF16_LOW_FIRST     WCHAR(0xdc00)
#define WCH_UTF16_LOW_LAST      WCHAR(0xdfff)
#define WCH_ZWNBSP              WCHAR(0xfeff) // aka BOM (Byte Order Mark)

//
// Synthetic characters
//
// NOTE (grzegorz): WCH_SYNTHETICEMBEDDING should be remapped to [U+FDD0-U+FDEF] range, 
// because it is using a valid Unicode character. But because weird LS dependencies
// we need to keep it as 0xfffc.

#define WCH_SYNTHETICLINEBREAK    WCHAR(0xfde0)
#define WCH_SYNTHETICBLOCKBREAK   WCHAR(0xfde1)
#define WCH_SYNTHETICEMBEDDING    WCHAR(0xfffc)
//#define WCH_SYNTHETICEMBEDDING    WCHAR(0xfde2)
#define WCH_SYNTHETICTXTSITEBREAK WCHAR(0xfde3)
#define WCH_NODE                  WCHAR(0xfdef)


//
// Trident Aliases
//

#define WCH_WORDBREAK          WCH_ZWSP      // We treat <WBR>==&zwsp;

//
// Line Services Aliases
//

#define WCH_ENDPARA1           WCH_CR
#define WCH_ENDPARA2           WCH_LF
#define WCH_ALTENDPARA         WCH_SYNTHETICBLOCKBREAK
#define WCH_ENDLINEINPARA      WCH_SYNTHETICLINEBREAK
#define WCH_COLUMNBREAK        WCH_UNDEF
#define WCH_SECTIONBREAK       WCH_SYNTHETICTXTSITEBREAK // zero-width
#define WCH_PAGEBREAK          WCH_UNDEF
#define WCH_OPTBREAK           WCH_UNDEF
#define WCH_NOBREAK            WCH_ZWNBSP
#define WCH_TOREPLACE          WCH_UNDEF
#define WCH_REPLACE            WCH_UNDEF

//
// Line Services Visi support (Not currently used by Trident)
//

#define WCH_VISINULL           WCHAR(0x2050) // !
#define WCH_VISIALTENDPARA     WCHAR(0x2051) // !
#define WCH_VISIENDLINEINPARA  WCHAR(0x2052) // !
#define WCH_VISIENDPARA        WCHAR(0x2053) // !
#define WCH_VISISPACE          WCHAR(0x2054) // !
#define WCH_VISINONBREAKSPACE  WCHAR(0x2055) // !
#define WCH_VISINONBREAKHYPHEN WCHAR(0x2056) // !
#define WCH_VISINONREQHYPHEN   WCHAR(0x2057) // !
#define WCH_VISITAB            WCHAR(0x2058) // !
#define WCH_VISIEMSPACE        WCHAR(0x2059) // !
#define WCH_VISIENSPACE        WCHAR(0x205a) // !
#define WCH_VISINARROWSPACE    WCHAR(0x205b) // !
#define WCH_VISIOPTBREAK       WCHAR(0x205c) // !
#define WCH_VISINOBREAK        WCHAR(0x205d) // !
#define WCH_VISIFESPACE        WCHAR(0x205e) // !

//
// Line Services installed object handler support
//

#define WCH_ESCRUBY            WCHAR(0xfdd0) // !
#define WCH_ESCMAIN            WCHAR(0xfdd1) // !
#define WCH_ENDTATENAKAYOKO    WCHAR(0xfdd2) // !
#define WCH_ENDHIH             WCHAR(0xfdd3) // !
#define WCH_ENDFIRSTBRACKET    WCHAR(0xfdd4) // !
#define WCH_ENDTEXT            WCHAR(0xfdd5) // !
#define WCH_ENDWARICHU         WCHAR(0xfdd6) // !
#define WCH_ENDREVERSE         WCHAR(0xfdd7) // !
#define WCH_REVERSE            WCHAR(0xfdd8) // !
#define WCH_NOBRBLOCK          WCHAR(0xfdd9) // !
#define WCH_LAYOUTGRID         WCHAR(0xfdda) // !
#define WCH_ENDLAYOUTGRID      WCHAR(0xfddb) // !

//
// Line Services autonumbering support
//

#define WCH_ESCANMRUN          WCH_NOBRBLOCK // !

//
// Hanguel Syllable/Jamo range specification
//

#define WCH_HANGUL_START       WCHAR(0xac00)
#define WCH_HANGUL_END         WCHAR(0xd7ff)
#define WCH_JAMO_START         WCHAR(0x3131)
#define WCH_JAMO_END           WCHAR(0x318e)

//
// ASCII
//

inline BOOL IsAscii(TCHAR ch)
{
    return ch < 128;
}

//
// End-User Defined Characters (EUDC) code range
// This range corresponds to the Unicode Private Use Area
//
// Usage: Japanese:             U+E000-U+E757
//        Simplified Chinese:   U+E000-U+E4DF  
//        Traditional Chinese:  U+E000-U+F8FF
//        Korean:               U+E000-U+E0BB
//

#define WCH_EUDC_FIRST   WCHAR(0xE000)
#define WCH_EUDC_LAST    WCHAR(0xF8FF)

inline BOOL IsEUDCChar(TCHAR ch)
{
    return InRange( ch, WCH_EUDC_FIRST, WCH_EUDC_LAST );
}

// Non-breaking space

#ifndef WCH_NBSP
    #define WCH_NBSP           TCHAR(0x00A0)
#endif

//
// UNICODE surrogate range for UTF-16 support
//
// High Surrogate D800-DBFF
// Low Surrogate  DC00-DFFF
//

inline BOOL
IsSurrogateChar(TCHAR ch)
{
    return InRange( ch, WCH_UTF16_HIGH_FIRST, WCH_UTF16_LOW_LAST );
}

inline BOOL
IsHighSurrogateChar(TCHAR ch)
{
    return InRange( ch, WCH_UTF16_HIGH_FIRST, WCH_UTF16_HIGH_LAST );
}

inline BOOL
IsLowSurrogateChar(TCHAR ch)
{
    return InRange( ch, WCH_UTF16_LOW_FIRST, WCH_UTF16_LOW_LAST );

}

inline WCHAR
HighSurrogateCharFromUcs4(DWORD ch)
{
    return 0xd800 + ((ch - 0x10000) >> 10);
}

inline WCHAR
LowSurrogateCharFromUcs4(DWORD ch)
{
    return 0xdc00 + (ch & 0x3ff);
}

//
// Quick lookup table for Windows-1252 to Latin-1 conversion in the 0x80-0x9f range
// The data resides in mshtml\src\site\util\intl.cxx
//

extern const WCHAR g_achLatin1MappingInUnicodeControlArea[32];

#ifdef __cplusplus
}
#endif // __cplusplus

#pragma INCMSG("--- End 'wchdefs.h'")
#else
#pragma INCMSG("*** Dup 'wchdefs.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\bodylyt.cxx ===
//+---------------------------------------------------------------------
//
//   File:      ebody.cxx
//
//  Contents:   Body element class
//
//  Classes:    CBodyLayout
//
//------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "frame.hxx"

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_BODYLYT_HXX_
#define X_BODYLYT_HXX_
#include "bodylyt.hxx"
#endif

#ifndef X_MSHTMHST_H_
#define X_MSHTMHST_H_
#include <mshtmhst.h>
#endif

#ifndef X_SHAPE_HXX_
#define X_SHAPE_HXX_
#include "shape.hxx"
#endif

#ifndef X_ROOTELEM_HXX_
#define X_ROOTELEM_HXX_
#include "rootelem.hxx"
#endif

#ifndef X_TABLE_HXX_
#define X_TABLE_HXX_
#include "table.hxx"
#endif

#ifndef X_EVNTPRM_HXX_
#define X_EVNTPRM_HXX_
#include "evntprm.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

ExternTag(tagCalcSize);

const CLayout::LAYOUTDESC CBodyLayout::s_layoutdesc =
{
    LAYOUTDESC_FLOWLAYOUT,          // _dwFlags
};

//+---------------------------------------------------------------------------
//
//  Member:     CBodyLayout::HandleMessage
//
//  Synopsis:   Check if we have a setcursor or mouse down in the
//              border (outside of the client rect) so that we can
//              pass the message to the containing frameset if we're
//              hosted in one.
//
//----------------------------------------------------------------------------
HRESULT
BUGCALL
CBodyLayout::HandleMessage(CMessage *pMessage)
{
    HRESULT hr = S_FALSE;

    // have any mouse messages
    //
    if(     pMessage->message >= WM_MOUSEFIRST
        &&  pMessage->message <= WM_MOUSELAST
        &&  pMessage->message != WM_MOUSEMOVE
        &&  ElementOwner() == Doc()->_pElemCurrent)
    {
        RequestFocusRect(FALSE);
    }

    if (    (   !GetOwnerMarkup()
            ||  !GetOwnerMarkup()->IsHtmlLayout() )         // In HTML layout, BODY concent can be outside its rect.
        &&  (   (   pMessage->message >= WM_MOUSEFIRST
                &&  pMessage->message != WM_MOUSEWHEEL
                &&  pMessage->message <= WM_MOUSELAST)
            ||  pMessage->message == WM_SETCURSOR ) )
    {
        RECT rc;

        GetRect(&rc, COORDSYS_GLOBAL);

        if (    pMessage->htc != HTC_HSCROLLBAR
            &&  pMessage->htc != HTC_VSCROLLBAR
            &&  !PtInRect(&rc, pMessage->pt)
            &&  !Doc()->HasCapture(ElementOwner()) ) // marka - don't send message to frame if we have capture.
        {
            {
                // Its on the inset, and we are not hosted inside
                // of a frame, so just consume the message here.
                //
                hr = S_OK;
                goto Cleanup;
            }
        }
    }

    hr = THR(super::HandleMessage(pMessage));

Cleanup:
    RRETURN1(hr, S_FALSE);
}

//+---------------------------------------------------------------------------
//
//  Member:     CalcSizeCore
//
//  Synopsis:   see CSite::CalcSize documentation
//
//----------------------------------------------------------------------------
DWORD
CBodyLayout::CalcSizeCore(CCalcInfo * pci, 
                          SIZE      * psize, 
                          SIZE      * psizeDefault)
{
    TraceTagEx((tagCalcSize, TAG_NONAME|TAG_INDENT, "(CBodyLayout::CalcSizeCore L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));
    WHEN_DBG(SIZE psizeIn = *psize);
    WHEN_DBG(psizeIn = psizeIn); // so we build with vc6.0
        
    CScopeFlag  csfCalcing(this);

    // We want to reset the "table calc nesting level" when we cross
    // a certain boundaries in the content.  What boundaries?  Different markups?
    // IFRAMEs?  Viewlinks?  For now we'll settle for resetting it for
    // nested BODY elements.  This is necessary now because prior to NF, calcinfos
    // were naturally restricted by frames -- now a given calcinfo can be
    // used across all kinds of boundaries (KTam).
    int cIncomingNestedCalcs = 0;
    if ( pci->_fTableCalcInfo )
    {
        cIncomingNestedCalcs = ((CTableCalcInfo*)pci)->_cNestedCalcs;
        ((CTableCalcInfo*)pci)->_cNestedCalcs = -1; // set to -1 instead of 0 b/c new TCI instances will increment!
    }      

    //(dmitryt) we should never propagate FORCE across IFRAME border. 
    // Normally, FORCE is only used for catastrophic changes in display styles
    // that are likely to change entire subtree so we don't bother with notifying
    // descendants and rather set FORCE. No such changes affect content inside IFRAME.
    // Only size or visibility changes do, and they don't need FORCE.
    if(pci->_grfLayout & LAYOUT_FORCE)
    {
	   if(     ElementOwner()->GetMarkup()
            &&  ElementOwner()->GetMarkup()->Root()
            &&  ElementOwner()->GetMarkup()->Root()->HasMasterPtr() 
            &&  (   ElementOwner()->GetMarkup()->Root()->GetMasterPtr()->Tag() == ETAG_IFRAME
                ||  ElementOwner()->GetMarkup()->Root()->GetMasterPtr()->IsLinkedContentElement() ) )
        {
            pci->_grfLayout &= ~LAYOUT_FORCE;
        }
    }

    DWORD dwRet = super::CalcSizeCore(pci, psize, psizeDefault);

    //
    // PRINT VIEW : fire onlayoutcomplete with the fOverflow flag set in the event object
    // NOTE : moved from CLayoutContext::SetLayoutBreak
    {
        CLayoutContext * pLayoutContext = pci->GetLayoutContext();
        CViewChain *     pViewChain = pLayoutContext ? pLayoutContext->ViewChain() : NULL;
        CLayoutBreak *   pLayoutBreak, * pPrevBreak;

        if (pViewChain)
        {
            pLayoutContext->GetLayoutBreak(ElementOwner(), &pPrevBreak);
            if (    pViewChain->ElementContent() == ElementOwner()
                &&  (   !pPrevBreak
                     ||  pPrevBreak->LayoutBreakType() != LAYOUT_BREAKTYPE_LAYOUTCOMPLETE
                     ||  pViewChain->HasPositionRequests())  )
            {
                DISPID       dispidEvent  = DISPID_EVMETH_ONLAYOUTCOMPLETE; 
                OVERFLOWTYPE overflowType = OVERFLOWTYPE_UNDEFINED;

                pViewChain->HandlePositionRequests();
                pLayoutContext->GetEndingLayoutBreak(ElementOwner(), &pLayoutBreak);

                if (    pLayoutBreak 
                    &&  (   pLayoutBreak->LayoutBreakType() == LAYOUT_BREAKTYPE_LINKEDOVERFLOW 
                        ||  pViewChain->HasPositionRequests() )
                   )
                {
                    dispidEvent  = DISPID_EVMETH_ONLINKEDOVERFLOW; 
                    if (pci->_fPageBreakLeft != pci->_fPageBreakRight)
                    {
                        overflowType = pci->_fPageBreakLeft ? OVERFLOWTYPE_LEFT : OVERFLOWTYPE_RIGHT;
                    }
                }
                
                GetView()->AddEventTask(pLayoutContext->GetLayoutOwner()->ElementOwner(),
                                        dispidEvent, (DWORD)overflowType);
            }
        }
    }

    // Update the focus rect    
    if (_fFocusRect && ElementOwner() == Doc()->_pElemCurrent)
    {
        RedrawFocusRect();
    }

    // Restore any incoming table calc nesting level
    if ( pci->_fTableCalcInfo )
    {
        ((CTableCalcInfo*)pci)->_cNestedCalcs = cIncomingNestedCalcs;
    }

    TraceTagEx((tagCalcSize, TAG_NONAME|TAG_OUTDENT, ")CBodyLayout::CalcSizeCore L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));
    return dwRet;
}

//+---------------------------------------------------------------------------
//
//  Member:     CBodyLayout::NotifyScrollEvent
//
//  Synopsis:   Respond to a change in the scroll position of the display node
//
//----------------------------------------------------------------------------

void
CBodyLayout::NotifyScrollEvent(
    RECT *  prcScroll,
    SIZE *  psizeScrollDelta)
{
    // Update the focus rect
    if (_fFocusRect && ElementOwner() == Doc()->_pElemCurrent)
    {
        RedrawFocusRect();
    }

    super::NotifyScrollEvent(prcScroll, psizeScrollDelta);
}

//+---------------------------------------------------------------------------
//
//  Member:     RequestFocusRect
//
//  Synopsis:   Turns on/off the focus rect of the body.
//
//  Arguments:  fOn     flag for requested state
//
//----------------------------------------------------------------------------
void
CBodyLayout::RequestFocusRect(BOOL fOn)
{
    if (!_fFocusRect != !fOn)
    {
        _fFocusRect = fOn;
        RedrawFocusRect();
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     RedrawFocusRect
//
//  Synopsis:   Redraw the focus rect of the body.
//
//----------------------------------------------------------------------------
void
CBodyLayout::RedrawFocusRect()
{
    Assert(ElementOwner() == Doc()->_pElemCurrent);
    CView * pView = GetView();

    // Force update of focus shape
    pView->SetFocus(NULL, 0);
    pView->SetFocus(ElementOwner(), 0);
    pView->InvalidateFocus();
}

//+---------------------------------------------------------------------------
//
//  Member:     CBodyLayout::GetFocusShape
//
//  Synopsis:   Returns the shape of the focus outline that needs to be drawn
//              when this element has focus. This function creates a new
//              CShape-derived object. It is the caller's responsibility to
//              release it.
//
//----------------------------------------------------------------------------

HRESULT
CBodyLayout::GetFocusShape(long lSubDivision, CDocInfo * pdci, CShape ** ppShape)
{
    CRect           rc;
    CRectShape *    pShape;
    HRESULT         hr = S_FALSE;
    CElement *      pMaster;

    Assert(ppShape);
    *ppShape = NULL;

    if (!_fFocusRect || GetOwnerMarkup()->IsPrintTemplate() || GetOwnerMarkup()->IsPrintMedia())
        goto Cleanup;

    GetClientRect(&rc, CLIENTRECT_BACKGROUND);
    if (rc.IsEmpty())
        goto Cleanup;


    // Honor hideFocus on the master, if it is a frame #95438
    pMaster = ElementOwner()->GetMarkup()->Root()->GetMasterPtr();
    if (    pMaster
        &&  (pMaster->Tag() == ETAG_FRAME || pMaster->Tag() == ETAG_IFRAME)
        &&  pMaster->GetAAhideFocus())
    {
        goto Cleanup;
    }

    pShape = new CRectShape;
    if (!pShape)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pShape->_rect = rc;
    pShape->_cThick = 2; // always draw extra thick for BODY
    *ppShape = pShape;

    hr = S_OK;

Cleanup:
    RRETURN1(hr, S_FALSE);
}

//+------------------------------------------------------------------------
//
//  Member:     GetBackgroundInfo
//
//  Synopsis:   Fills out a background info for which has details on how
//              to display a background color &| background image.
//
//-------------------------------------------------------------------------

BOOL
CBodyLayout::GetBackgroundInfo(
    CFormDrawInfo *     pDI,
    CBackgroundInfo *   pbginfo,
    BOOL                fAll)
{
    Assert(pDI || !fAll);

    // Our background may be stolen by the canvas,
    if (GetOwnerMarkup()->IsHtmlLayout())
    {
        CElement *pHtml = GetOwnerMarkup()->GetHtmlElement();
        if (    pHtml
            &&  DYNCAST(CHtmlElement, pHtml)->ShouldStealBackground() )
        {
            // Our background, if we have one, is being stolen.  Return transparency.
            pbginfo->crBack         =
            pbginfo->crTrans        = COLORREF_NONE;
            pbginfo->pImgCtx        = NULL;
            pbginfo->lImgCtxCookie  = 0;

            goto Cleanup;
        }
    }

    super::GetBackgroundInfo(pDI, pbginfo, fAll);

Cleanup:
    return TRUE;
}


#if DBG == 1
//+------------------------------------------------------------------------
//
//  Member:     IsInPageTransition
//
//  Synopsis:   Returns TRUE if this body is involved in a page transition.
//              Only needed for an assert in CDispNode::GetDrawProgram.
//
//-------------------------------------------------------------------------

BOOL
CBodyLayout::IsInPageTransitionApply() const
{
    CElement *pElement          = ElementOwner();
    CDocument *pDoc             = pElement  ? pElement->DocumentOrPendingDocument() : NULL;
    CPageTransitionInfo *pInfo  = pDoc      ? pDoc->GetPageTransitionInfo()         : NULL;
    CMarkup *pMarkup            = pInfo     ? pInfo->GetTransitionFromMarkup()      : NULL;

    return (pMarkup &&
            pInfo->GetPageTransitionState() == CPageTransitionInfo::PAGETRANS_REQUESTED
            && pMarkup->GetElementClient() == pElement);
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\include\_invar.h ===
/*
 *
 *
 *  _INVAR.H
 *  
 *  Purpose:
 *      Template class designed to call parameterized object's Invariant().
 *
 *  Overview (see also, usage):
 *      1)  declare and define a public const function BOOL Invariant( void ) in your class, with #ifdef DEBUG.
 *      2)  in the source: #define DEBUG_CLASSNAME to be the name of the class you're debugging.
 *      3)  followed by #include "_invar.h"
 *      4)  For every method you wish to check Invariants,
 *          insert the _TEST_INVARIANT_ macro once, usually at the beginning of a routine.
 *          OPTIONAL: You may optionally use the _TEST_INVARIANT_ON (x) to call x's Invariant directly.
 *
 *  Notes:
 *      Invariants are designed to be called at the beginning and upon exit of a routine, 
 *      testing the consistent properties of an object which remain invariant--always the same.
 *
 *      Functions may temporarily make an object inconsistent during their execution.
 *      A generalized invariant test should not be called during these inconsistent times;
 *      if there is a need for a function, which checks invariants, to be called during
 *      an inconsistent object state, a solution will need to be designed--the current design
 *      does not facilitate this.
 *
 *      Because it is entirely possible for an Invariant() function to recurse on itself
 *      causing a stack overflow, the template explicitly prevents this from happening.
 *      The template also prevents invariant-checking during the processing of Assert(),
 *      preventing another type of recursion. Assert() recursion is avoided by checking
 *      a global flag, fInAssert.
 *
 *      Currently Invariant() returns a BOOL, as I think this allows for it to be called
 *      from the QuickWatch window under VC++2.0. TRUE indicates that the invariant executed
 *      normally.
 *
 *  Usage:
 *      -the _invariant.h header should only be included in source files. An error will occur
 *          if included in another header file. This is to prevent multiple #define DEBUG_CLASSNAME.
 *      -Typical #include into a source file looks like this:
            #define DEBUG_CLASSNAME ClassName
            #include "_invar.h"
 *      -Typical definition of a class' Invariant() method looks like this:
            #ifdef DEBUG
                public:
                BOOL Invariant( void ) const;
                protected:
            #endif  // DEBUG
 *      -Typical declaration of Invariant() looks like this:
            #ifdef DEBUG

            BOOL
            ClassName::Invariant( void ) const
            {
                static LONG numTests = 0;
                numTests++;             // how many times we've been called.

                // do mega-assert checking here.

                return TRUE;
            }

            #endif  // DEBUG
 *
 *
 *      
 *  
 *  Author:
 *      Jon Matousek (jonmat) 5/04/1995
 *
 *      Any problems? Please let me know.
 */

#ifndef I__INVAR_H_
#define I__INVAR_H_
#pragma INCMSG("--- Beg '_invar.h'")

#ifndef DEBUG_CLASSNAME
prior to including _invariant.h file, you must define DEBUG_CLASSNAME
to be the name of the class for which you are making Invariant() calls.
#endif


#ifdef DEBUG

template < class T >
class InvariantDebug
{
    public:
    InvariantDebug  ( const T & t) : _t(t)
    {
        static volatile BOOL fRecurse = FALSE;

        if ( fRecurse ) return;     /* Don't allow recursion.*/
        
        fRecurse = TRUE;

        _t.Invariant();

        fRecurse = FALSE;
    }

    ~InvariantDebug ()
    {
        static volatile BOOL fRecurse = FALSE;

        if ( fRecurse ) return;     /* Don't allow recursion.*/
        
        fRecurse = TRUE;

        _t.Invariant();

        fRecurse = FALSE;
    }

    private:
     const T &_t;
};

typedef InvariantDebug<DEBUG_CLASSNAME> DoInvariant;

#define _TEST_INVARIANT_ DoInvariant __invariant_tester( *this );
#define _TEST_INVARIANT_ON(x) \
                    {\
                        static volatile BOOL fRecurse = FALSE;\
                        if ( FALSE == fRecurse )\
                        {\
                            fRecurse = TRUE;\
                            (x).Invariant();\
                            fRecurse = FALSE;\
                        }\
                    }

#else   // DEBUG

#define _TEST_INVARIANT_
#define _TEST_INVARIANT_ON(x)

#endif  // DEBUG


    // code that should be at the start and end of all Invariant() methods.

#pragma INCMSG("--- End '_invar.h'")
#else
#pragma INCMSG("*** Dup '_invar.h'")
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\contlyt.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Trident
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       contlyt.cxx
//
//  Contents:   Layout that only knows how to contain another layout
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_CONTLYT_HXX_
#define X_CONTLYT_HXX_
#include "contlyt.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_DISPNODE_HXX_
#define X_DISPNODE_HXX_
#include "dispnode.hxx"
#endif

#ifndef X_DISPLEAFNODE_HXX_
#define X_DISPLEAFNODE_HXX_
#include "displeafnode.hxx"
#endif

#ifndef X_DIV_HXX_
#define X_DIV_HXX_
#include "div.hxx"
#endif

#ifndef X_PEER_HXX_
#define X_PEER_HXX_
#include "peer.hxx"
#endif

#ifndef X_WSMGR_HXX_
#define X_WSMGR_HXX_
#include "wsmgr.hxx"
#endif

MtDefine(CContainerLayout, Layout, "CContainerLayout");

DeclareTag(tagContLyt, "Layout: Cont Lyt", "Trace CContainerLayout fns");

ExternTag(tagLayoutTasks);
ExternTag(tagCalcSize);


//+---------------------------------------------------------------------------
//
// Container layout implementation
// 
//----------------------------------------------------------------------------

const CContainerLayout::LAYOUTDESC CContainerLayout::s_layoutdesc =
{
    LAYOUTDESC_FLOWLAYOUT,          // _dwFlags
};

//+-------------------------------------------------------------------------
//
// Constructor
//
//--------------------------------------------------------------------------
CContainerLayout::CContainerLayout(CElement *pElementLayout, CLayoutContext *pLayoutContext) : CLayout(pElementLayout, pLayoutContext)
{
    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL ctor: this=0x%x, e=[0x%x,%d]",
                this,
                pElementLayout, pElementLayout->SN() ));

    // TODO (112486, olego): We should re-think layout context concept 
    // and according to that new understanding correct the code. 

    // (olego): BAD! How are we supposed to handle errors here ???
    CreateLayoutContext(this);
}

//+-------------------------------------------------------------------------
//
// Destructor
//
//--------------------------------------------------------------------------
CContainerLayout::~CContainerLayout()
{
    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL dtor: this=0x%x",
                this ));

    // NOTE (KTam): I don't think we should be detaching in the dtor; other
    // layouts don't do it, and the rest of the codebase appears to do stuff
    // like call detach deliberately before calling release (see CElement::ExitTree)
    // Detach();
}

//+--------------------------------------------------------------------------
//
//  Init
//
//---------------------------------------------------------------------------
HRESULT 
CContainerLayout::Init()
{
    HRESULT     hr = S_OK;
    CElement  * pElem = ElementOwner();

    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL::Init: this=0x%x, e=[0x%x,%d]",
                this,
                ElementOwner(), ElementOwner()->SN() ));

    Assert( ViewChain() == NULL && pElem );

    if (pElem->IsLinkedContentElement() )
    {
        // NOTE: What we're doing here is figuring out whether we're the head
        // of a viewchain, and either creating a new viewchain if necessary
        // or we'll be called later to set view chain (SetViewChain). 

        // Currently we say that if we have a contentSrc property, then
        // we're the head of a chain, and need to create a viewchain obj.
        CVariant cvarAttr;
        
        if ( pElem->GetLinkedContentAttr( _T("contentSrc"), &cvarAttr ) == S_OK )
        {
            CViewChain * pNewViewChain;

            // We do have a content src!
#if DBG            
            TraceTagEx((tagContLyt, TAG_NONAME,
                        "  CCL::Init() found contentSrc, creating view chain"));                        
#endif
            // Create a new view chain.
            pNewViewChain = new CViewChain( this );  

            // If we have set this view chain, indicate ownership.
            if (!SetViewChain(pNewViewChain))
                _fOwnsViewChain = TRUE;

            // Release the local reference - we should have addref'd the member variable in SetViewChain
            pNewViewChain->Release();
        }        
    }

    hr = super::Init();

    return hr;
}

//+--------------------------------------------------------------------------
//
//  Detach
//
//---------------------------------------------------------------------------
void
CContainerLayout::Detach()
{
    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL::Detach: this=0x%x",
                this));

    // Release viewchain if we have one
    SetViewChain(NULL);

    AssertSz( !_fOwnsViewChain, "Must have relinquished ownership of viewchain by now" );

    super::Detach();
}


//+-------------------------------------------------------------------------
//
// CalcSizeVirtual
//
// FUTURE (olego): currently CContainerLayout doesn't support size to content 
// calculations. If either width or height is not specified it will end up 
// with zero size.
//--------------------------------------------------------------------------
DWORD   
CContainerLayout::CalcSizeVirtual(CCalcInfo * pci, SIZE * psize, SIZE * psizeDefault)
{
    TraceTagEx((tagCalcSize, TAG_NONAME|TAG_INDENT, "(CContainerLayout::CalcSizeVirtual L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));
    TraceTagEx((tagContLyt, TAG_NONAME, "CCL::CalcSize: this=0x%x, e=[0x%x,%d]",
                                        this, ElementOwner(), ElementOwner()->SN() ));
    Assert( pci );
    Assert( psize );
    DWORD                    dwRet = 0;
    CViewChain         *pViewChain = ViewChain();

    // Do default sizing to handle user-specified height/width and dispnode creation.
    dwRet = super::CalcSizeVirtual( pci, psize, psizeDefault );

    // In order for a container layout to CalcSize(), it needs to ensure
    // that all containers prior to it in its view chain are clean (i.e.
    // have been calc'ed).
    if ( !pViewChain || !pViewChain->EnsureCleanToContext(DefinedLayoutContext()) )
    {
        // This calc failed, so make sure we get another one.  EnsureCleanToContext()
        // has queued up calc requests for all dirty elements prior to us in the chain.

        TraceTagEx((tagContLyt, TAG_NONAME,
                    "  CCL::CalcSize: Chain doesn't exist or isn't clean, bailing" ));
        // ElementOwner()->RemeasureElement(); // commented out because this causes a hang (TODO LRECT 112511 -> olego)
        return dwRet;
    }

    CElement     * pElementContent = ElementContent();
    CLayoutContext *pLayoutContext = DefinedLayoutContext();

    // Container layouts define a new context for their content element.
    // We need to set the context in the calcinfo so that when
    // our content elem is calc'ing, any children IT has (i.e. our grandchildren)
    // will have multiple layouts correctly created.
    Assert( pLayoutContext && "Container layouts must define a context!" );

    // When we have both containing and defined context, calcing should use the defined one

    // TODO LRECT 112511: this currently causes a layout array to be created even in 
    // single-layout case, but that should be optimized in a more general way (by allowing 
    // single layout to have context), if we care.
    // FUTURE (olego): we care and we'll need to find generic solution for layout handling 
    // in browser and page view mode.
    AssertSz(   pci->GetLayoutContext() == NULL
             || pci->GetLayoutContext() == DefinedLayoutContext()
             || pci->GetLayoutContext() == LayoutContext() && !DefinedLayoutContext(),
        "Wrong context in CalcSizeVirtual" );

    // Use local calc info to pass this layout context to children
    CCalcInfo calcinfoLocal(pci);
    pci = &calcinfoLocal;
    pci->SetLayoutContext( pLayoutContext );

    // Before calcing our children, we set the available parent size for
    // them to the layout rect's size.
    pci->SizeToParent( psize );

    // Get a layout for our child, with appropriate context.  Any element
    // acting as a content element
    // for a container must have layout; in fact, it may have multiple
    // layouts.  The purpose of that layout is to manage the portion of
    // the content element that lies inside the container.
    if ( pElementContent )
    {
        TraceTagEx((tagContLyt, TAG_NONAME,
                    "  CCL::CalcSize: have a content element (BODY)" ));

        CMarkup *pMarkup = pElementContent->GetMarkupPtr(); 
        if (    pMarkup 
            &&  (   pMarkup->LoadStatus() == LOADSTATUS_UNINITIALIZED   //  If markup was created thru OM 
                ||  pMarkup->LoadStatus() >= LOADSTATUS_PARSE_DONE )    //  If markup was created by downloading 
            )
        {
            CLayout *pLayoutContent = pElementContent->GetUpdatedLayout( pLayoutContext );

            if (_fOwnsViewChain && pMarkup->IsStrictCSS1Document())
            {
                IGNORE_HR( FlushWhitespaceChanges() );
            }
        
            if ( pLayoutContent )
            {
                //  mark this rect as empty
                pci->_fHasContent = FALSE;

                //  set available size 
                pci->_cyAvail = psize->cy;

                dwRet = pLayoutContent->CalcSize( pci, psize, psizeDefault );

                // Now that the content has been calc'ed, it dispnode
                // exists.  Attach it to the display tree as a sibling of
                // our first content node.
                Assert(!pLayoutContent->IsDisplayNone());

                Verify( EnsureDispNodeIsContainer() );

                CDispNode *pDispNode = pLayoutContent->GetElementDispNode();
                CDispNode *pDispSibling = GetFirstContentDispNode();

                Assert( pDispSibling );
                Assert( !pDispNode || pDispSibling != pDispNode);

                // this is just stopping a crash, but it doesn't seem like what we want to 
                // do in the future (invalidation handling)
                if (pDispNode && pDispSibling)
                {
                    pDispSibling->InsertSiblingNode(pDispNode, CDispNode::after);

                    // TODO (IE6 bug 13587): RTL goop here, see AddLayoutDispNode for example
                    // of how to do this right.
                    pLayoutContent->SetPosition(CPoint(pLayoutContent->GetXProposed(), pLayoutContent->GetYProposed()), TRUE);
    
                }

                pViewChain->MarkContextClean( pLayoutContext );
            }
        }
#if DBG
        else 
        {
            TraceTagEx((tagContLyt, TAG_NONAME,
                "  CCL::CalcSize: CALLED WHILE DOCUMENT LOADING" ));
        }
#endif
    }
    else
    {
        TraceTagEx((tagContLyt, TAG_NONAME,
                    "  CCL::CalcSize: FAILED TO FIND CONTENT ELEMENT" ));

        Assert(pViewChain && " Upstream ptr test failed");
    }
    
    TraceTagEx((tagCalcSize, TAG_NONAME|TAG_OUTDENT, ")CContainerLayout::CalcSizeVirtual L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));
    return dwRet;
}

//+-------------------------------------------------------------------------
//
//   Draw
//
//--------------------------------------------------------------------------
void
CContainerLayout::Draw(CFormDrawInfo *pDI, CDispNode * pDispNode)
{
    CElement * pElementContent = ElementContent();
    CLayout *  pLayoutContent  = NULL;

    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL::Draw: this=0x%x, e=[0x%x,%d]",
                this,
                ElementOwner(), ElementOwner()->SN() ));

    Assert( DefinedLayoutContext() );

    // Delegate call to our content
    if ( pElementContent )
    {
        TraceTagEx((tagContLyt, TAG_NONAME,
                    "  CCL::Draw: have a content element (BODY)" ));
        pLayoutContent = pElementContent->GetUpdatedLayout( DefinedLayoutContext() );
        Assert(pLayoutContent);
        pLayoutContent->Draw( pDI, pDispNode );
    }
}

//+-------------------------------------------------------------------------
//
//   Notify
//
//--------------------------------------------------------------------------
void
CContainerLayout::Notify(CNotification * pnf)
{
    Assert(ElementOwner());

    if (    pnf->IsType(NTYPE_ELEMENT_RESIZE) 
        ||  pnf->IsType(NTYPE_ELEMENT_REMEASURE)    )
    {
        // TODO LRECT 112511: this is taken from CFrameSetLayout. 
        //                 Is this actually the right thing to do? We get a hang
        //                 under UpdateScreenCaret(), caused by slave and container dirtying each other.
        //
        //  Always "dirty" the layout associated with the element
        //  if the element is not itself.
        //
        if (pnf->Element() != ElementOwner())
        {
            pnf->Element()->DirtyLayout(pnf->LayoutFlags());
        }

        //
        //  Ignore the notification if already "dirty"
        //  Otherwise, post a layout request
        //

        if (    !IsSizeThis()
            &&  !TestLock(CElement::ELEMENTLOCK_SIZING))
        {
            TraceTagEx((tagLayoutTasks, TAG_NONAME,
                        "Layout Task: Posted on ly=0x%x [e=0x%x,%S sn=%d] by CFrameSetLayout::Notify() [n=%S srcelem=0x%x,%S]",
                        this,
                        _pElementOwner,
                        _pElementOwner->TagName(),
                        _pElementOwner->_nSerialNumber,
                        pnf->Name(),
                        pnf->Element(),
                        pnf->Element() ? pnf->Element()->TagName() : _T("")));
            PostLayoutRequest(pnf->LayoutFlags() | LAYOUT_MEASURE);
        }
        goto Cleanup;
    }

    if (    pnf->IsType(NTYPE_ELEMENT_ZCHANGE) 
        ||  pnf->IsType(NTYPE_ELEMENT_REPOSITION)   )
    {
        //  if the notification was issues by an element from slave markup 
        //  terminate it here. positioning and/or z-changing of an slave markup
        //  element doesn't make sense in master markup anyway (all cases we are 
        //  interested in are handled by CViewChain object) 
        if (pnf->Element() != ElementOwner())
        {
                pnf->SetHandler(ElementOwner());
                goto Cleanup;
        }
    }
    
    super::Notify(pnf);

Cleanup:
    return;
}

BOOL
CContainerLayout::IsDirty()
{
    return FALSE;
}

//+--------------------------------------------------------------------------
//
//  ElementContent
//
//---------------------------------------------------------------------------
CElement *
CContainerLayout::ElementContent()
{
    CElement * pElementContent = NULL;

    if (!ViewChain() )
        return NULL;
    
    // If we own the viewchain, then our slave ptr is used to get the slave content.
    // Otherwise, delegate to the viewchain's ElementContent(), which will in turn
    // delegate to the layout that owns the viewchain.
    if ( _fOwnsViewChain )
    {
        CElement * pElementOwner   = ElementOwner();
        CElement * pElementSlave   = pElementOwner->HasSlavePtr() ?
                                     pElementOwner->GetSlavePtr() : NULL;

        // HACK ALERT!  Right now slave ptrs are CRootElements; this doesn't
        // work for us because we want to have something that can have layout.
        // So we're going to go for the slave's markup and grovel for the
        // body element, which is reasonably likely to be around right now.

        if ( pElementSlave )
        {
            pElementContent = pElementSlave->GetMarkup()->GetElementClient();

            if ( pElementContent )
            {
                // NOTE : For safety we refuse to return a content element if it isn't a BODY/FRAMESET.
                // (olego) Another reason is that behaviour of content elements other than BODY/FRAMESET 
                // is not defined in this case -- for example only BODY/FRAMESET has code to send events 
                // DISPID_EVMETH_ONLINKEDOVERFLOW/DISPID_EVMETH_ONLAYOUTCOMPLETE. 
                if ( pElementContent->Tag() != ETAG_BODY && pElementContent->Tag() != ETAG_FRAMESET )
                {
                    AssertSz( FALSE, "Unexpected top-level element -- expecting BODY/FRAMESET" );
                    pElementContent = NULL;
                }
            }
        }
    }
    else
    {
        pElementContent = ViewChain()->ElementContent();
    }

    return pElementContent;
}

//+-------------------------------------------------------------------------
//
//  Member : SetViewChain ()
//
//  Synopsis : CLayout virtual overrided, this helper function sets us up for
//      the future when any layout may be part of a viewChain. For now this is 
//      the only override.
//
//+-------------------------------------------------------------------------
HRESULT
CContainerLayout::SetViewChain( CViewChain * pvc, CLayoutContext * pPrevious)
{
    TraceTagEx((tagContLyt, TAG_NONAME,
                "CCL::SetViewChain: this=0x%x, e=[0x%x,%d]",
                this,
                ElementOwner(), ElementOwner()->SN() ));

    // Don't reset if there is already a chain here. 
    // This way the first one to hook up to us wins in the case of conflicting targeting.
    if (_pViewChain && pvc)
        return S_FALSE;      

    // We are hooking up a view chain.
    if (pvc)
    {
        Assert(!_pViewChain);   // We should have already returned S_FALSE;

        _pViewChain = pvc;
        _pViewChain->AddRef();
        _pViewChain->AddContext(DefinedLayoutContext(), pPrevious);
    }

    // We are removing a view chain.
    else if (ViewChain())   // No work to do if the view chain is already null.
    {
        // Clear the view chain.
        // If we're the owner of the viewchain, disconnect it from us.
        if ( _fOwnsViewChain )
        {
            _fOwnsViewChain = FALSE;
            _pViewChain->SetLayoutOwner(NULL);
        }

        _pViewChain->ReleaseContext(DefinedLayoutContext());
        _pViewChain->Release();
        _pViewChain = NULL;
    }

    return S_OK;
}
//+----------------------------------------------------------------------------
//
//  Member:     CContainerLayout::GetContentSize
//
//  Synopsis:   Return the width/height of the content
//
//  Arguments:  psize - Pointer to CSize
//
//-----------------------------------------------------------------------------
void
CContainerLayout::GetContentSize(
    CSize * psize,
    BOOL    fActualSize)
{
    if (fActualSize)
    {
        CElement      *pElementContent = ElementContent();
        CLayoutContext *pLayoutContext = DefinedLayoutContext();
        *psize = g_Zero.size;
        
        if (pElementContent)
        {
            CLayout *pLayoutContent = pElementContent->GetUpdatedLayout( pLayoutContext );
            if (pLayoutContent)
            {
                pLayoutContent->GetContentSize(psize, fActualSize);
            }            
        }
    }
    else
    {
        super::GetContentSize(psize, fActualSize);
    }
}

//+----------------------------------------------------------------------------
//
//  Member:     CContainerLayout::FlushWhitespaceChanges
//
//  Synopsis:   Flush whitespace changes
//
//-----------------------------------------------------------------------------

HRESULT 
CContainerLayout::FlushWhitespaceChanges()
{
    CTreePos    *ptp, *ptpEnd;
    CElement    *pElement = ElementContent();
    CTreeNode   *pNode;

    Assert(pElement);

    ptpEnd = pElement->GetLastBranch()->GetEndPos();

    Assert(ptpEnd);

    for (ptp = pElement->GetFirstBranch()->GetBeginPos(); 
         ptp != ptpEnd; 
         ptp = ptp->NextTreePos())
    {    
        if (ptp->Type() == CTreePos::Pointer && ptp->GetCollapsedWhitespace())
        {       
            pNode = ptp->GetBranch();
            Assert(pNode);

            //
            // Force compute formats so that the whitespace changes get registered        	
            //
            pNode->GetParaFormat();

            //
            // Advance ptp so we don't consider this node again
            //

            ptp = pNode->GetEndPos();

            if (ptp == ptpEnd)
                break;
        }
    }

    RRETURN( pElement->Doc()->GetWhitespaceManager()->FlushWhitespaceChanges() );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\brktbl.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1999
//
//  File:       BRKTBL.CXX
//
//  Contents:   Implementation of CBreakTable and related classes.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_BRKTBL_HXX_
#define X_BRKTBL_HXX_
#include "brktbl.hxx"
#endif 

#ifndef X_TPOINTER_HXX_
#define X_TPOINTER_HXX_
#include "tpointer.hxx"
#endif

MtDefine(ViewChain, Mem, "ViewChain");
MtDefine(CBreakBase_pv, ViewChain, "CBreakBase_pv");
MtDefine(CLayoutBreak_pv, ViewChain, "CLayoutBreak_pv");
MtDefine(CBreakTableBase_pv, ViewChain, "CBreakTableBase_pv");
MtDefine(CBreakTableBase_aryBreak_pv, ViewChain, "CBreakTableBase_ary_pv");
MtDefine(CBreakTable_pv, ViewChain, "CBreakTable_pv");
MtDefine(CRectBreakTable_pv, ViewChain, "CRectBreakTable_ary_pv");
MtDefine(CFlowLayoutBreak_pv, ViewChain, "CFlowLayoutBreak_pv");
MtDefine(CFlowLayoutBreak_arySiteTask_pv, ViewChain, "CFlowLayoutBreak_arySiteTask_pv"); 

//============================================================================
//
//  CBreakBase methods
//
//============================================================================

CBreakBase::~CBreakBase()
{
}

//============================================================================
//
//  CLayoutBreak methods
//
//============================================================================

CLayoutBreak::~CLayoutBreak()
{
}

//============================================================================
//
//  CBreakTableBase methods
//
//============================================================================

//----------------------------------------------------------------------------
//
//  Member: Reset
//
//  Note:   Deletes all entries from break table and shrinks to zero size
//----------------------------------------------------------------------------
void 
CBreakTableBase::Reset()
{
    for (int i = Size(); i-- > 0; )
    {
        Assert(_ary[i]._pBreak);
        delete _ary[i]._pBreak;
    }

    // remove from the array
    if (Size())
    {
        _ary.DeleteMultiple(0, Size() - 1);
    }

    ClearCache();
}

//----------------------------------------------------------------------------
//
//  Member: SetBreak
//
//  Note:   Adds new entry into array and initialize it with pBreak. If the 
//          entry already exists reassigns pointer to new object and deletes 
//          the old one.
//----------------------------------------------------------------------------
HRESULT 
CBreakTableBase::SetBreak(void *pKey, CBreakBase *pBreak)
{
    HRESULT hr = S_OK;
    int     idx;

    Assert(pBreak != NULL);

    idx = Idx(pKey);

    Assert(-1 <= idx && idx < Size());

    if (idx == -1)
    {
        //  append one
        idx = Size();
        _ary.Append();
    }
    else 
    {
        //  replace entry
        Assert(_ary[idx]._pBreak != NULL);
        delete _ary[idx]._pBreak;
    }

    _ary[idx]._pKey = pKey;
    _ary[idx]._pBreak = pBreak;

    SetCache(pKey, idx);

    return (hr);
}

//----------------------------------------------------------------------------
//
//  Member: GetBreak
//
//  Note:   Returns break object corresponding to pKey
//----------------------------------------------------------------------------
HRESULT 
CBreakTableBase::GetBreak(void *pKey, CBreakBase **ppBreak)
{
    HRESULT hr = S_OK;
    int     idx;

    Assert(pKey != NULL && ppBreak != NULL);
    
    *ppBreak = NULL;

    idx = Idx(pKey);

    if (idx == -1)
    {
        goto Cleanup;
    }
    
    Assert(0 <= idx && idx < Size() && _ary[idx]._pBreak != NULL);
    *ppBreak = _ary[idx]._pBreak;

Cleanup:
    return (hr);
}

//----------------------------------------------------------------------------
//
//  Member: RemoveBreak
//
//  Note:   Removes break
//----------------------------------------------------------------------------
HRESULT 
CBreakTableBase::RemoveBreak(void *pKey, CBreakBase **ppBreak /*= NULL*/)
{
    HRESULT hr = S_OK;
    int     idx;

    Assert(pKey != NULL);

    idx = Idx(pKey);
    if (idx < 0)
    {
        goto Cleanup;
    }

    Assert(0 <= idx && idx < Size() && _ary[idx]._pBreak != NULL);

    if (ppBreak != NULL)
    {
        *ppBreak = _ary[idx]._pBreak;
    }
    else
    {
        delete _ary[idx]._pBreak;
    }

    _ary.Delete(idx);

    ClearCache();

Cleanup:
    return (hr);
}

//----------------------------------------------------------------------------
//
//  Member: idx
//
//  Note:   Returns the index corrensponding to pKey. (Uses last hit cache 
//          to ompimize search).
//----------------------------------------------------------------------------
int 
CBreakTableBase::Idx(void *pKey)
{
    int idx;

    Assert(pKey != NULL);

    if (_cache._pKey == pKey)
    {
#if DBG==1
        {
            for (idx = Size(); --idx >= 0 && _ary[idx]._pKey != pKey; ) {}

            Assert(idx != -1 
                && idx == _cache._idx 
                && _ary[idx]._pBreak != NULL);
        }
#endif
        goto Cleanup;
    }

    for (idx = Size(); --idx >= 0; ) 
    {
        if (_ary[idx]._pKey == pKey)
        {
            Assert(_ary[idx]._pBreak != NULL);
            SetCache(pKey, idx);
            goto Cleanup;
        }
    }

    ClearCache();

Cleanup:
    return _cache._idx;
}

//============================================================================
//
//  CBreakTableBase methods
//
//============================================================================

//----------------------------------------------------------------------------
//
//  Member: SetBreakAfter
//
//  Note:   Inserts break after break of pKeyAfter
//----------------------------------------------------------------------------
HRESULT 
CRectBreakTable::SetBreakAfter(void *pKey, void *pKeyAfter, CBreakBase *pBreak)
{
    HRESULT hr = S_OK;
    int     idx;

    Assert(pKey != NULL && pBreak != NULL);
    Assert(pKeyAfter != NULL || Size() == 0);

    if (pKeyAfter == NULL )
    {
        Assert(Size() == 0);
        idx = 0;
    }
    else 
    {
        idx = Idx(pKeyAfter) + 1;
        Assert(0 < idx && idx <= Size());
    }

    _ary.InsertIndirect(idx, NULL);
    _ary[idx]._pBreak = pBreak;
    _ary[idx]._pKey = pKey;

    _cache._pKey = pKey;
    _cache._idx = idx;

    return (hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\btnlyt.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       btnlyt.cxx
//
//  Contents:   Implementation of layout class for <BUTTON> controls.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_RECT_HXX_
#define X_RECT_HXX_
#include "rect.hxx"
#endif

#ifndef X_SIZE_HXX_
#define X_SIZE_HXX_
#include "size.hxx"
#endif

#ifndef X_FLOWLYT_HXX_
#define X_FLOWLYT_HXX_
#include "flowlyt.hxx"
#endif

#ifndef X_BTNHLPER_HXX_
#define X_BTNHLPER_HXX_
#include "btnhlper.hxx"
#endif

#ifndef X_TXTSITE_HXX_
#define X_TXTSITE_HXX_
#include "txtsite.hxx"
#endif

#ifndef X_TREEPOS_HXX_
#define X_TREEPOS_HXX_
#include "treepos.hxx"
#endif

#ifndef X__FONTLNK_H_
#define X__FONTLNK_H_
#include "_fontlnk.h"
#endif

#ifndef X_INPUTBTN_HXX_
#define X_INPUTBTN_HXX_
#include "inputbtn.hxx"
#endif

#ifndef X__FONT_H_
#define X__FONT_H_
#include "_font.h"
#endif

#ifndef X_SHAPE_HXX_
#define X_SHAPE_HXX_
#include "shape.hxx"
#endif

#ifndef X_BTNLYT_HXX_
#define X_BTNLYT_HXX_
#include "btnlyt.hxx"
#endif

#ifndef X_DISPNODE_HXX_
#define X_DISPNODE_HXX_
#include "dispnode.hxx"
#endif

MtDefine(CButtonLayout, Layout, "CButtonLayout")

const CLayout::LAYOUTDESC CButtonLayout::s_layoutdesc =
{
    LAYOUTDESC_NOSCROLLBARS     |
    LAYOUTDESC_HASINSETS        |
    LAYOUTDESC_FLOWLAYOUT,          // _dwFlags
};


HRESULT
CButtonLayout::Init()
{
    HRESULT hr = super::Init();

    if(hr)
        goto Cleanup;

    // Button can NOT be broken
    SetElementCanBeBroken(FALSE);

Cleanup:
    RRETURN(hr);
}

void
CButtonLayout::DrawClient(
    const RECT *    prcBounds,
    const RECT *    prcRedraw,
    CDispSurface *  pDispSurface,
    CDispNode *     pDispNode,
    void *          cookie,
    void *          pClientData,
    DWORD           dwFlags)
{
    super::DrawClient( prcBounds,
                       prcRedraw,
                       pDispSurface,
                       pDispNode,
                       cookie,
                       pClientData,
                       dwFlags );

    // (bug 49150) Has the button just appeared? Should it be the default element
    CButton * pButton = DYNCAST(CButton, ElementOwner());
    const CCharFormat *pCF = GetFirstBranch()->GetCharFormat(LC_TO_FC(LayoutContext()));
    Assert(pButton && pCF);

    if (pButton->GetBtnWasHidden() && pButton->GetAAtype() == htmlInputSubmit
        && !pCF->IsDisplayNone() && !pCF->IsVisibilityHidden())
    {
        pButton->SetDefaultElem();
        pButton->SetBtnWasHidden( FALSE );
    }
}

// TODO (112441, olego): Both classes CButtonLayout and CInputButtonLayout 
// have identical methods implementations.

void CButtonLayout::DrawClientBackground(
                const RECT *   prcBounds,
                const RECT *   prcRedraw,
                CDispSurface * pDispSurface,
                CDispNode *    pDispNode,
                void *         pClientData,
                DWORD          dwFlags)
{
    CButton *       pButton = DYNCAST(CButton, ElementOwner());
    HTHEME          hTheme = pButton->GetTheme(THEME_BUTTON);

    if (hTheme)
        return;

    super::DrawClientBackground(prcBounds, prcRedraw, pDispSurface, pDispNode, pClientData, dwFlags);
}

void CButtonLayout::DrawClientBorder(
                const RECT *   prcBounds,
                const RECT *   prcRedraw,
                CDispSurface * pDispSurface,
                CDispNode *    pDispNode,
                void *         pClientData,
                DWORD          dwFlags)
{
    Assert(pClientData);

    CFormDrawInfo * pDI = (CFormDrawInfo *)pClientData;
    CSetDrawSurface sds(pDI, prcBounds, prcRedraw, pDispSurface);
    CDoc *          pDoc = Doc();
    CBorderInfo     bi;
    BOOL            fDefaultAndCurrent = pDoc && ElementOwner()->_fDefault
                                    && ElementOwner()->IsEnabled()
                                    && pDoc->HasFocus();
    CButton *       pButton = DYNCAST(CButton, ElementOwner());
    XHDC            hdc    = pDI->GetDC();
    HTHEME          hTheme = pButton->GetTheme(THEME_BUTTON);


    if (hTheme)
    {
        CFormDrawInfo * pDI = (CFormDrawInfo *)pClientData;
        CSetDrawSurface sds(pDI, prcBounds, prcRedraw, pDispSurface);
        XHDC            hdc    = pDI->GetDC(TRUE);

        if (hdc.DrawThemeBackground(   hTheme,
                                        BP_PUSHBUTTON,
                                        pButton->GetThemeState(),
                                        &pDI->_rc,
                                        NULL))
        {
            return;
        }
    }

    Verify(pButton->GetNonThemedBorderInfo(pDI, &bi, TRUE));



    // draw default if necessary
    bi.acrColors[SIDE_TOP][1]    =
    bi.acrColors[SIDE_RIGHT][1]  =
    bi.acrColors[SIDE_BOTTOM][1] =
    bi.acrColors[SIDE_LEFT][1]   = fDefaultAndCurrent
                                            ? RGB(0,0,0)
                                            : ElementOwner()->GetInheritedBackgroundColor();
    
    //  NOTE (greglett) : This xyFlat scheme won't work for outputting to devices 
    //  without a square DPI. Luckily, we never do this.  I think. When this is fixed, 
    //  please change CButtonLayout::DrawClientBorder and CInputButtonLayout::DrawClientBorder 
    //  by removing the following assert and these comments.
    Assert(pDI->IsDeviceIsotropic());
    bi.xyFlat = pDI->DeviceFromDocPixelsX(fDefaultAndCurrent ? -1 : 1);
    //bi.yFlat = pDI->DeviceFromDocPixelsY(fDefaultAndCurrent ? -1 : 1);

    ::DrawBorder(pDI, (RECT *)prcBounds, &bi);
}

//+---------------------------------------------------------------------------
//
//  Member:     CButtonLayout::GetFocusShape
//
//  Synopsis:   Returns the shape of the focus outline that needs to be drawn
//              when this element has focus. This function creates a new
//              CShape-derived object. It is the caller's responsibility to
//              release it.
//
//----------------------------------------------------------------------------

HRESULT
CButtonLayout::GetFocusShape(long lSubDivision, CDocInfo * pdci, CShape ** ppShape)
{
    CBorderInfo     bi;
    CRect           rc;    
    CRectShape *    pShape;
    HRESULT         hr = S_OK;
    CButton *       pButton = DYNCAST(CButton, ElementOwner());

    *ppShape = NULL;
    
    pButton->GetBorderInfo(pdci, &bi);
    GetRect(&rc, COORDSYS_FLOWCONTENT);
    if (rc.IsEmpty())
        goto Cleanup;

    pShape = new CRectShape;
    if (!pShape)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pShape->_rect = rc;
    pShape->_rect.top     += bi.aiWidths[SIDE_TOP];
    pShape->_rect.left    += bi.aiWidths[SIDE_LEFT];
    pShape->_rect.bottom  -= bi.aiWidths[SIDE_BOTTOM];
    pShape->_rect.right   -= bi.aiWidths[SIDE_RIGHT];

    // Exclude xflat border
    // (Themed buttons don't have this!!!)
    pShape->_rect.InflateRect(pdci->DeviceFromDocPixelsX(-1), pdci->DeviceFromDocPixelsY(-1));

    *ppShape = pShape;
    hr = S_OK;

    // IE6 bug 33042
    // For some reason, only the area inside the focus adorner is being invalidated
    // for submit inputs. This matters in the theme case because we need the border
    // to be invalidated in order to redraw the control. We're going to go ahead
    // and invalidate the whole dispnode here in order to ensure that the control
    // is properly drawn. This is only a problem for themed buttons.

    if (pButton->GetTheme(THEME_BUTTON))
        _pDispNode->Invalidate();

Cleanup:
    RRETURN(hr);
}

void
CButtonLayout::DoLayout(
    DWORD   grfLayout)
{
    super::DoLayout(grfLayout);
    if(     !IsDisplayNone()
        &&  (grfLayout & LAYOUT_MEASURE)
        )
    {
        GetElementDispNode()->SetInset(GetBtnHelper()->_sizeInset);
    }
}

CBtnHelper * CButtonLayout::GetBtnHelper()
{
    CElement * pElement = ElementOwner();
    Assert(pElement);
    CButton * pButton = DYNCAST(CButton, pElement);
    return pButton->GetBtnHelper();
}

// TODO (112441, olego): Both classes CButtonLayout and CInputButtonLayout 
// have identical methods implementations.
BOOL
CButtonLayout::GetInsets(SIZEMODE smMode, SIZE &size, SIZE &sizeText, BOOL fw, BOOL fh, const SIZE &sizeBorder)
{
    CCalcInfo       CI(this);
    SIZE            sizeFontForShortStr;
    SIZE            sizeFontForLongStr;
    CBtnHelper *    pBtnHelper = GetBtnHelper();
    
    GetFontSize(&CI, &sizeFontForShortStr, &sizeFontForLongStr);

    // if half of text size is less than the size of the netscape border
    // we need to make sure we display at least one char
    if (!fw && (sizeText.cx - sizeBorder.cx - sizeFontForLongStr.cx < 0))
    {
        sizeText.cx = sizeFontForLongStr.cx + CI.DeviceFromDocPixelsX(2) + sizeText.cx;
    }
    else
    {
        size.cx = max((long)CI.DeviceFromDocPixelsX(2), fw ? (size.cx - sizeText.cx)
                             : ((sizeText.cx - sizeBorder.cx)/2 - CI.DeviceFromDocPixelsX(6)));

        if (!fw)
        {
            sizeText.cx = size.cx + sizeText.cx;
        }
    }

    //
    // text centering is done through alignment
    //

    size.cx = 0;
    pBtnHelper->_sizeInset.cx = 0;

    if (smMode == SIZEMODE_MMWIDTH)
    {
        sizeText.cy = sizeText.cx;
        pBtnHelper->_sizeInset = g_Zero.size;
    }
    else
    {
        // vertical inset is 1/2 of font height
        size.cy = fh    ? (size.cy - sizeText.cy)
            : (sizeFontForShortStr.cy/2 - (sizeBorder.cy ? CI.DeviceFromDocPixelsY(6) : CI.DeviceFromDocPixelsY(4)));

        size.cy = max((long)CI.DeviceFromDocPixelsY(1), size.cy);
            
        sizeText.cy =   max(sizeText.cy, sizeFontForShortStr.cy + sizeBorder.cy)        
            + size.cy;

           
        if (size.cy < CI.DeviceFromDocPixelsY(3) && !fh)
        {        
            // for netscape compat            
            size.cy = 0;
        }

        pBtnHelper->_sizeInset.cy = size.cy / 2;
    }
    return TRUE;
}

//+---------------------------------------------------------------------------
//
//  Member:     CButtonLayout::HitTestContent
//
//  Synopsis:   Determine if the given display leaf node contains the hit point.
//
//  Arguments:  pptHit          hit test point
//              pDispNode       pointer to display node
//              pClientData     client-specified data value for hit testing pass
//
//  Returns:    TRUE if the button layout contains the point
//
//----------------------------------------------------------------------------

BOOL
CButtonLayout::HitTestContent(
    const POINT *   pptHit,
    CDispNode *     pDispNode,
    void *          pClientData,
    BOOL            fDeclinedByPeer)
{
    Assert(pptHit);
    Assert(pDispNode);
    Assert(pClientData);

    CButton *       pElem = DYNCAST(CButton, ElementOwner());
    CHitTestInfo *  phti = (CHitTestInfo *) pClientData;
    HTHEME          hTheme = pElem->GetTheme(THEME_BUTTON);
    BOOL            fRet = TRUE;
    RECT            rcClient;
    WORD            wHitTestCode;
    HRESULT         hr = S_OK;

    if (!hTheme)
    {
        fRet = super::HitTestContent(   pptHit,
                                        pDispNode,
                                        pClientData,
                                        fDeclinedByPeer);
        goto Cleanup;
    }

    Assert(pElem);

    GetClientRect(&rcClient);

    hr = HitTestThemeBackground(    hTheme,
                                    NULL,
                                    BP_PUSHBUTTON, 
                                    pElem->GetThemeState(),
                                    0,
                                    &rcClient,
                                    NULL,
                                    *pptHit,
                                    &wHitTestCode);

    if (SUCCEEDED(hr) && wHitTestCode == HTNOWHERE)
    {
        fRet = FALSE;
        phti->_htc = HTC_NO;
        goto Cleanup;
    }

    fRet = super::HitTestContent(pptHit,
                                pDispNode,  
                                pClientData,
                                fDeclinedByPeer);

Cleanup:
    return fRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\ckboxlyt.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       ckboxlyt.cxx
//
//  Contents:   Implementation of layout class for <INPUT type=checkbox|radio>
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)


#ifndef X_RECT_HXX_
#define X_RECT_HXX_
#include "rect.hxx"
#endif

#ifndef X_SIZE_HXX_
#define X_SIZE_HXX_
#include "size.hxx"
#endif

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_CKBOXLYT_HXX_
#define X_CKBOXLYT_HXX_
#include "ckboxlyt.hxx"
#endif

#ifndef X_SHAPE_HXX_
#define X_SHAPE_HXX_
#include "shape.hxx"
#endif

#ifndef X_ELABEL_HXX_
#define X_ELABEL_HXX_
#include "elabel.hxx"
#endif

#ifndef X_DISPNODE_HXX_
#define X_DISPNODE_HXX_
#include "dispnode.hxx"
#endif

ExternTag(tagCalcSize);

MtDefine(CCheckboxLayout, Layout, "CCheckboxLayout")

const CLayout::LAYOUTDESC CCheckboxLayout::s_layoutdesc =
{
    0,          // _dwFlags
};

//+-------------------------------------------------------------------------
//
//  Method:     CCheckboxLayout::CalcSizeVirtual
//
//  Synopsis:   Calculate the size of the object
//
//--------------------------------------------------------------------------
#define CHKBOX_SITE_SIZE_W  20
#define CHKBOX_SITE_SIZE_H  20

const RECT s_CbDefOffsetRect = {4, 4, 3, 3};

DWORD
CCheckboxLayout::CalcSizeVirtual( CCalcInfo * pci,
                                  SIZE *      psize,
                                  SIZE *      psizeDefault)
{
    TraceTagEx((tagCalcSize, TAG_NONAME, "+CCheckboxLayout::CalcSizeVirtual L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));

    CScopeFlag      csfCalcing(this);
    CElement::CLock LockS(ElementOwner(), CElement::ELEMENTLOCK_SIZING);

    DWORD   grfReturn;

    _fContentsAffectSize = FALSE;

    if (_fForceLayout)
    {
        pci->_grfLayout |= LAYOUT_FORCE;
        _fForceLayout = FALSE;
    }

    SetSizeThis( IsSizeThis() || (pci->_grfLayout & LAYOUT_FORCE) );

    if ( IsSizeThis() )
    {
        SIZE        sizeDefault;   

        sizeDefault.cx = pci->DeviceFromDocPixelsX(CHKBOX_SITE_SIZE_W);
        sizeDefault.cy = pci->DeviceFromDocPixelsY(CHKBOX_SITE_SIZE_H);
        grfReturn = super::CalcSizeVirtual(pci, psize, &sizeDefault);
    }
    else
    {
        grfReturn = super::CalcSizeVirtual(pci, psize, NULL);
    }

    TraceTagEx((tagCalcSize, TAG_NONAME, "-CCheckboxLayout::CalcSizeVirtual L(0x%x, %S) P(%d,%d) S(%d,%d) D(%d,%d) M=%S fL=0x%x f=0x%x dwF=0x%x", CALCSIZETRACEPARAMS ));
    return grfReturn;
}


//+---------------------------------------------------------------------------
//
//  Member:     CCheckboxElement::Draw
//
//  Synopsis:   renders the glyph for the button
//
//  Returns:    HRESULT
//
//----------------------------------------------------------------------------

void
CCheckboxLayout::Draw(CFormDrawInfo * pDI, CDispNode * pDispNode)
{
    RECT    rc;
    SIZE    sizeDefault;
    SIZE    sizeControl;
    SIZE    sizeDefGlyph;

    sizeDefault.cx = pDI->DeviceFromDocPixelsX(CHKBOX_SITE_SIZE_W);
    sizeDefault.cy = pDI->DeviceFromDocPixelsY(CHKBOX_SITE_SIZE_H);

    //use rc to hold offset
    rc.left   = pDI->DeviceFromDocPixelsX(s_CbDefOffsetRect.left);
    rc.top    = pDI->DeviceFromDocPixelsY(s_CbDefOffsetRect.top);
    rc.right  = pDI->DeviceFromDocPixelsX(s_CbDefOffsetRect.right);
    rc.bottom = pDI->DeviceFromDocPixelsY(s_CbDefOffsetRect.bottom);

    pDI->GetDC(TRUE);       // Ensure the DI has an HDC

    // GetClientRect(&rcClient);

    sizeControl.cx  = pDI->_rc.right - pDI->_rc.left;
    sizeDefGlyph.cx = sizeDefault.cx - rc.right - rc.left;
    sizeDefGlyph.cy = sizeDefault.cy - rc.bottom - rc.top;
    if (sizeControl.cx >= sizeDefault.cx)
    {
        rc.right  = pDI->_rc.right - rc.right;


        rc.left   = pDI->_rc.left + rc.left;
        Assert(rc.left <= rc.right);
    }
    else if (sizeControl.cx > sizeDefGlyph.cx)
    {
        rc.left     = pDI->_rc.left + (sizeControl.cx - sizeDefGlyph.cx) / 2;
        rc.right    = rc.left + sizeDefGlyph.cx;
    }
    else
    {
        rc.right = pDI->_rc.right;
        rc.left = pDI->_rc.left;
    }

    sizeControl.cy = pDI->_rc.bottom - pDI->_rc.top;
    if (sizeControl.cy >= sizeDefault.cy)
    {
        rc.bottom = pDI->_rc.bottom - rc.bottom;
        Assert(rc.bottom >= 0);
        rc.top    = pDI->_rc.top + rc.top;
        Assert(rc.top <= rc.bottom);
    }
    else if (sizeControl.cx > sizeDefGlyph.cx)
    {
        rc.top      = pDI->_rc.top + (sizeControl.cy - sizeDefGlyph.cy) / 2;
        rc.bottom   = rc.top + sizeDefGlyph.cy;
    }
    else
    {
        rc.top = pDI->_rc.top;
        rc.bottom = pDI->_rc.bottom;
    }

    DYNCAST(CInput, ElementOwner())->RenderGlyph(pDI, &rc);
}

HRESULT
CCheckboxLayout::GetFocusShape(long lSubDivision, CDocInfo * pdci, CShape ** ppShape)
{
    HRESULT hr = S_FALSE;

    CLabelElement * pLabel = ElementOwner()->GetLabel();
    if (pLabel)
    {
        hr = THR(pLabel->GetFocusShape(lSubDivision, pdci, ppShape));
    }
    else
    {
        CRect           rc;
        CRectShape *    pShape;

        *ppShape = NULL;

        GetRect(&rc, COORDSYS_FLOWCONTENT);
        if (rc.IsEmpty())
            goto Cleanup;

        pShape = new CRectShape;
        if (!pShape)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        pShape->_rect = rc;
        pShape->_rect.InflateRect(1, 1);
        *ppShape = pShape;

        hr = S_OK;
    }

Cleanup:
    RRETURN1(hr, S_FALSE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\e1dlyt.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1998
//
//  File:       e1dlyt.cxx
//
//  Contents:   Implementation of C1DLayout and related classes.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FLOWLYT_HXX_
#define X_FLOWLYT_HXX_
#include "flowlyt.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_ELEMENT_HXX_
#define X_ELEMENT_HXX_
#include "element.hxx"
#endif

#ifndef X_CSITE_HXX_
#define X_CSITE_HXX_
#include "csite.hxx"
#endif

#ifndef X_E1D_HXX_
#define X_E1D_HXX_
#include "e1d.hxx"
#endif

#ifndef X_FRAME_HXX_
#define X_FRAME_HXX_
#include "frame.hxx"
#endif

#ifndef X_PERHIST_HXX_
#define X_PERHIST_HXX_
#include "perhist.hxx"
#endif

#ifndef X_DISPNODE_HXX_
#define X_DISPNODE_HXX_
#include "dispnode.hxx"
#endif

MtDefine(C1DLayoutBreak_pv, ViewChain, "C1DLayoutBreak_pv");
MtDefine(C1DLayout, Layout, "C1DLayout");

const CLayout::LAYOUTDESC C1DLayout::s_layoutdesc =
{
    LAYOUTDESC_FLOWLAYOUT,              // _dwFlags
};


//+---------------------------------------------------------------------------
//
//  Member:     C1DLayout::Init()
//
//  Synopsis:   Called when the element enters the tree. Super initializes
//              CDisplay.
//
//----------------------------------------------------------------------------

HRESULT
C1DLayout::Init()
{
    HRESULT hr = super::Init();
    if(hr)
        goto Cleanup;

    // TODO (112467, olego): Now we have CLayout::_fElementCanBeBroken bit flag 
    // that prohibit layout breaking in Page View. This approach is not suffitient 
    // enouth for editable Page View there we want this property to be calculated 
    // dynamically depending on layout type and layout nesting position (if parent 
    // has it child should inherit). 
    // This work also will enable CSS attribute page-break-inside support.

    // FRAME and IFRAME could NOT be broken (bug #95525) 
    SetElementCanBeBroken(  ElementCanBeBroken() 
                        &&  ElementOwner()->Tag() != ETAG_IFRAME 
                        &&  ElementOwner()->Tag() != ETAG_FRAME );

Cleanup:
    RRETURN(hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     Notify
//
//  Synopsis:   Handle notification
//
//----------------------------------------------------------------------------

void
C1DLayout::Notify(CNotification *pNF)
{
    HRESULT     hr = S_OK;
    IStream *   pStream = NULL;

    super::Notify(pNF);
    switch (pNF->Type())
    {
    case NTYPE_SAVE_HISTORY_1:
        pNF->SetSecondChanceRequested();
        break;

    case NTYPE_SAVE_HISTORY_2:
        {
            CDataStream ds;
            CHistorySaveCtx *phsc;

            pNF->Data((void **)&phsc);
            hr = THR(phsc->BeginSaveStream(ElementOwner()->GetSourceIndex(), 
                                           ElementOwner()->HistoryCode(), 
                                           &pStream));
            if (hr)
                goto Cleanup;

            ds.Init(pStream);

            // save scroll pos
            hr = THR(ds.SaveDword(GetYScroll()));
            if (hr)
                goto Cleanup;

            hr = THR(phsc->EndSaveStream());
            if (hr)
                goto Cleanup;
        }
        break;

    case NTYPE_DELAY_LOAD_HISTORY:
        {
            CMarkup * pMarkup = GetOwnerMarkup();
            Assert( pMarkup );

            IGNORE_HR(pMarkup->GetLoadHistoryStream(
                                ElementOwner()->GetSourceIndex(),
                                ElementOwner()->HistoryCode(), 
                                &pStream));

            if (pStream && !pMarkup->_fUserInteracted)
            {
                CDataStream ds(pStream);
                DWORD       dwScrollPos;

                // load scroll pos
                hr = THR(ds.LoadDword(&dwScrollPos));
                if (hr)
                    goto Cleanup;
                if (    _pDispNode
                    &&  GetElementDispNode()->IsScroller())
                {
                    ScrollToY(dwScrollPos);
                }
            }
        }
        break;
    }

Cleanup:
    ReleaseInterface(pStream);
    return;
}



void
C1DLayout::ShowSelected( CTreePos* ptpStart, CTreePos* ptpEnd, BOOL fSelected,  BOOL fLayoutCompletelyEnclosed )
{
    Assert(ptpStart && ptpEnd && ptpStart->GetMarkup() == ptpStart->GetMarkup());
    CElement* pElement = ElementOwner();
    //
    // For IE 5 we have decided to not draw the dithered selection at browse time for DIVs
    // people thought it weird.
    //
    // We do however draw it for XML Sprinkles.
    //
    if (    ( pElement->IsParentEditable() || pElement->_etag == ETAG_GENERIC || pElement->HasSlavePtr()) && 
            ( ( fSelected && fLayoutCompletelyEnclosed ) ||      
              ( !fSelected && ! fLayoutCompletelyEnclosed ) )
       )
    {
        SetSelected( fSelected, TRUE );
    }
    //
    // Check to see if this selection is not in our markup.
    //
    else if( pElement->HasSlavePtr() && 
                ptpStart->GetMarkup() != ElementOwner()->GetSlavePtr()->GetMarkup() )
    {
        SetSelected( fSelected, TRUE );
    }
    else
    {
        _dp.ShowSelected( ptpStart, ptpEnd, fSelected);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     GetUserHeightForBlock
//
//  Synopsis:   Used in print view. Adjust user specified height of the layout 
//              if the layout is broken by retrieving a value stored in 
//              corresponding break table entry. 
//
//----------------------------------------------------------------------------
long 
C1DLayout::GetUserHeightForBlock(long cyHeightDefault)
{
    CLayoutBreak *       pLayoutBreak; 
    CLayoutContext *     pLayoutContext = LayoutContext();
#if DBG==1
    CTreeNode *          pNode = GetFirstBranch();
    const CFancyFormat * pFF = pNode->GetFancyFormat(LC_TO_FC(pLayoutContext));
    const CCharFormat *  pCF = pNode->GetCharFormat(LC_TO_FC(pLayoutContext));
    const CUnitValue &   cuvHeight = pFF->GetLogicalHeight(pCF->HasVerticalLayoutFlow(), pCF->_fWritingModeUsed);

    Assert(!pNode->IsAbsolute(LC_TO_FC(pLayoutContext))
        && "GetUserHeightForBlock is called for absolute positioned object!");
    Assert(!cuvHeight.IsNullOrEnum() 
        && "GetUserHeightForBlock is called for layout that have no user specified height!");
    Assert(ElementCanBeBroken() 
        && "GetUserHeightForBlock called for layout that could not be broken!");
    Assert(pLayoutContext && pLayoutContext->ViewChain() 
        && "GetUserHeightForBlock called for layout that is not in ViewChain!");
#endif 

    pLayoutContext->GetLayoutBreak(ElementOwner(), &pLayoutBreak);
    if (pLayoutBreak)
    {
        return (DYNCAST(C1DLayoutBreak, pLayoutBreak)->GetAvailableHeight());
    }

    return (cyHeightDefault);
}

//+---------------------------------------------------------------------------
//
//  Member:     SetUserHeightForNextBlock
//
//  Synopsis:   Used in print view. Stores user specified height into break 
//              table. 
//
//----------------------------------------------------------------------------
void 
C1DLayout::SetUserHeightForNextBlock(long cyConsumed, long cyHeightDefault)
{
    CLayoutBreak *       pLayoutBreak; 
    CLayoutBreak *       pLayoutBreakEnding; 
    CLayoutContext *     pLayoutContext = LayoutContext();
    long                 cyAvailHeight;
#if DBG==1
    CTreeNode *          pNode = GetFirstBranch();
    const CFancyFormat * pFF = pNode->GetFancyFormat(LC_TO_FC(pLayoutContext));
    const CCharFormat *  pCF = pNode->GetCharFormat(LC_TO_FC(pLayoutContext));
    const CUnitValue &   cuvHeight = pFF->GetLogicalHeight(pCF->HasVerticalLayoutFlow(), pCF->_fWritingModeUsed);

    Assert(!pNode->IsAbsolute(LC_TO_FC(pLayoutContext))
        && "GetUserHeightForBlock is called for absolute positioned object!");
    Assert(!cuvHeight.IsNullOrEnum() 
        && "GetUserHeightForBlock is called for layout that have no user specified height!");
    Assert(ElementCanBeBroken() 
        && "GetUserHeightForBlock called for layout that could not be broken!");
    Assert(pLayoutContext && pLayoutContext->ViewChain() 
        && "GetUserHeightForBlock called for layout that is not in ViewChain!");
#endif 

    pLayoutContext->GetLayoutBreak(ElementOwner(), &pLayoutBreak);
    if (pLayoutBreak)
    {
        cyAvailHeight = DYNCAST(C1DLayoutBreak, pLayoutBreak)->GetAvailableHeight();
    }
    else 
    {
        cyAvailHeight = cyHeightDefault;
    }

    pLayoutContext->GetEndingLayoutBreak(ElementOwner(), &pLayoutBreakEnding);
    Assert(pLayoutBreakEnding && "Layout has no ending break set!");
    if (pLayoutBreakEnding)
    {
        DYNCAST(C1DLayoutBreak, pLayoutBreakEnding)->SetAvailableHeight(max(0L, cyAvailHeight - cyConsumed));
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     C1DLayout::WantsToObscure
//
//  Synopsis:   Should this element obscure windows that lie below it in the
//              z-order?  (E.g. IFrame over SELECT)
//
//----------------------------------------------------------------------------

BOOL
C1DLayout::WantsToObscure(CDispNode *pDispNode) const
{
    CElement* pElement = ElementOwner();

    if (pElement->Tag() == ETAG_IFRAME && pDispNode == GetElementDispNode())
    {
        CIFrameElement *pIFrame = DYNCAST(CIFrameElement, pElement);
        return pIFrame->IsOpaque();
    }

    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\inetcore\mshtml\src\site\layout\flowlyt.cxx ===
//+---------------------------------------------------------------------------
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       flowlyt.cxx
//
//  Contents:   Implementation of CFlowLayout and related classes.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#include <math.h>

#ifndef X_FLOWLYT_HXX_
#define X_FLOWLYT_HXX_
#include "flowlyt.hxx"
#endif

#ifndef X_TXTSITE_HXX_
#define X_TXTSITE_HXX_
#include "txtsite.hxx"
#endif

#ifndef X_TREEPOS_HXX_
#define X_TREEPOS_HXX_
#include "treepos.hxx"
#endif

#ifndef X_DOWNLOAD_HXX_
#define X_DOWNLOAD_HXX_
#include "download.hxx"
#endif

#ifndef X_WINDOW_HXX_
#define X_WINDOW_HXX_
#include "window.hxx"
#endif

#ifndef X_HYPLNK_HXX_
#define X_HYPLNK_HXX_
#include "hyplnk.hxx"
#endif

#ifndef X_EAREA_HXX_
#define X_EAREA_HXX_
#include "earea.hxx"
#endif

#ifndef X_LTCELL_HXX_
#define X_LTCELL_HXX_
#include "ltcell.hxx"
#endif

#ifndef _X_SELDRAG_HXX_
#define _X_SELDRAG_HXX_
#include "seldrag.hxx"
#endif

#ifndef X_LSM_HXX_
#define X_LSM_HXX_
#include "lsm.hxx"
#endif

#ifndef X__DXFROBJ_H_
#define X__DXFROBJ_H_
#include "_dxfrobj.h"
#endif

#ifndef X_DOCPRINT_HXX_
#define X_DOCPRINT_HXX_
#include "docprint.hxx" // CPrintPage
#endif

#ifndef X_PEER_HXX_
#define X_PEER_HXX_
#include "peer.hxx"
#endif

#ifndef X__ELABEL_HXX_
#define X__ELABEL_HXX_
#include "elabel.hxx"
#endif

#ifndef X_ROOTELEM_HXX
#define X_ROOTELEM_HXX
#include "rootelem.hxx"
#endif

#ifndef X_DEBUGPAINT_HXX_
#define X_DEBUGPAINT_HXX_
#include "debugpaint.hxx"
#endif

#ifndef X_TXTDEFS_H_
#define X_TXTDEFS_H_
#include "txtdefs.h"
#endif

#ifndef X_DISPLEAFNODE_HXX_
#define X_DISPLEAFNODE_HXX_
#include "displeafnode.hxx"
#endif

#ifndef X_DISPSCROLLER_HXX_
#define X_DISPSCROLLER_HXX_
#include "dispscroller.hxx"
#endif

#ifndef X_PERHIST_HXX_
#define X_PERHIST_HXX_
#include "perhist.hxx"
#endif

#ifndef X_ADORNER_HXX_
#define X_ADORNER_HXX_
#include "adorner.hxx"
#endif

#ifndef X_UNDO_HXX_
#define X_UNDO_HXX_
#include "undo.hxx"
#endif

#ifndef X_TPOINTER_HXX_
#define X_TPOINTER_HXX_
#include "tpointer.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_ELEMENTP_HXX_
#define X_ELEMENTP_HXX_
#include "elementp.hxx"
#endif

#ifdef UNIX
extern "C" HANDLE MwGetPrimarySelectionData();
#include "mainwin.h"
#include "quxcopy.hxx"
#endif //UNIX

#ifndef X_FLOAT2INT_HXX_
#define X_FLOAT2INT_HXX_
#include "float2int.hxx"
#endif

#ifndef X_LTROW_HXX_
#define X_LTROW_HXX_
#include "ltrow.hxx"
#endif

#define DO_PROFILE  0
#define MAX_RECURSION_LEVEL 40

#if DO_PROFILE==1
#include "icapexp.h"
#endif

// force functions to load through dynamic wrappers
//

#ifndef WIN16
#ifdef WINCOMMCTRLAPI
#ifndef X_COMCTRLP_H_
#define X_COMCTRLP_H_
#undef WINCOMMCTRLAPI
#define WINCOMMCTRLAPI
#include "comctrlp.h"
#endif
#endif
#endif // ndef WIN16

MtDefine(CFlowLayout, Layout, "CFlowLayout")
MtDefine(CFlowLayout_aryLayouts_pv, CFlowLayout, "CFlowLayout::__aryLayouts::_pv")
MtDefine(CFlowLayout_pDropTargetSelInfo, CFlowLayout, "CFlowLayout::_pDropTargetSelInfo")
MtDefine(CFlowLayoutScrollRangeInfoView_aryRects_pv, Locals, "CFlowLayout::ScrollRangeIntoView aryRects::_pv")
MtDefine(CFlowLayoutBranchFromPointEx_aryRects_pv, Locals, "CFlowLayout::BranchFromPointEx aryRects::_pv")
MtDefine(CFlowLayoutDrop_aryLayouts_pv, Locals, "CFlowLayout::Drop aryLayouts::_pv")
MtDefine(CFlowLayoutGetChildElementTopLeft_aryRects_pv, Locals, "CFlowLayout::GetChildElementTopLeft aryRects::_pv")
MtDefine(CFlowLayoutPaginate_aryValues_pv, Locals, "CFlowLayout::Paginate aryValues::_pv")
MtDefine(CFlowLayoutNotify_aryRects_pv, Locals, "CFlowLayout::Notify aryRects::_pv")

MtDefine(CStackPageBreaks, CFlowLayout, "CStackPageBreaks")
MtDefine(CStackPageBreaks_aryYPos_pv, CStackPageBreaks, "CStackPageBreaks::_aryYPos::_pv")
MtDefine(CStackPageBreaks_aryXWidthSplit_pv, CStackPageBreaks, "CStackPageBreaks::_aryXWidthSplit::_pv")

MtDefine(LFCCalcSize, Metrics, "CalcSize - changed layout flow")
MtDefine(LFCMinMax, LFCCalcSize, "Min/Max calls")
MtDefine(LFCCalcSizeCore, LFCCalcSize, "CalcSizeCore calls");
MtDefine(LFCCalcSizeNaturalTotal, LFCCalcSize, "Natural calls total");
MtDefine(LFCCalcSizeNaturalFast, LFCCalcSize, "Natural calls with fast solution");
MtDefine(LFCCalcSizeNaturalSlow, LFCCalcSize, "Natural calls with search for solution");
MtDefine(LFCCalcSizeNaturalSlowAbort, LFCCalcSize, "Natural calls with search for solution aborted");
MtDefine(LFCCalcSizeSetTotal, LFCCalcSize, "Set calls total");

ExternTag(tagViewServicesErrors);
ExternTag(tagViewServicesCpHit);
ExternTag(tagViewServicesShowEtag);
ExternTag(tagCalcSize);
ExternTag(tagCalcSizeDetail);
ExternTag(tagLayoutTasks);

DeclareTag(tagUpdateDragFeedback, "Selection", "Update Drag Feedback")
DeclareTag(tagNotifyText, "NotifyText", "Trace text notifications");
DeclareTag(tagRepeatHeaderFooter, "Print", "Repeat table headers and footers on pages");

// Hack constant from viewserv.cxx; keep them in sync.
const long scrollSize = 5;

// Constants for CalcSize
const double ccErrorAcceptableLow  = 0.9;  // -10%
const double ccErrorAcceptableHigh = 1.1;  // +10%
const double ccErrorAcceptableLowForFastSolution  = 0.7;  // -30%
const LONG   ccSwitchCch = 10;   // used in min/max computation for vertical text

extern BOOL g_fInAccess9;


//+----------------------------------------------------------------------------
//
//  Member:     Listen
//
//  Synopsis:   Listen/stop listening to notifications
//
//  Arguments:  fListen - TRUE to listen, FALSE otherwise
//
//-----------------------------------------------------------------------------
void
CFlowLayout::Listen(
    BOOL    fListen)
{
    if ((unsigned)fListen != _fListen)
    {
        if (_fListen)
        {
            Reset(TRUE);
        }

        _fListen = (unsigned)fListen;
    }
}


//+----------------------------------------------------------------------------
//
//  Member:     IsListening
//
//  Synopsis:   Return TRUE if accepting text notifications
//              NOTE: Make this inline! (brendand)
//
//-----------------------------------------------------------------------------
BOOL
CFlowLayout::IsListening()
{
    return !!_fListen;
}


//-----------------------------------------------------------------------------
//
//  Member:     Notify
//
//  Synopsis:   Respond to a tree notification
//
//  Arguments:  pnf - Pointer to the tree notification
//
//-----------------------------------------------------------------------------
void
CFlowLayout::Notify(
    CNotification * pnf)
{
    DWORD   dwData;
    BOOL    fHandle = TRUE;

    Assert(!pnf->IsReceived(_snLast));


    //
    //  Respond to the notification if:
    //      a) The channel is enabled
    //      b) The text is not sizing
    //      c) Or it is a position/z-change notification
    //

    if (    IsListening()
        && (    !TestLock(CElement::ELEMENTLOCK_SIZING)
            ||  IsPositionNotification(pnf)))
    {
        BOOL    fRangeSet = FALSE;

        //
        //  For notifications originating from this element,
        //  set the range to the content rather than that in the container (if they differ)
        //

        if (    pnf->Element() == ElementOwner()
            &&  ElementOwner()->HasSlavePtr()
            )
        {
            pnf->SetTextRange(GetContentFirstCp(), GetContentTextLength());
            fRangeSet = TRUE;
        }

#if DBG==1

        long    cp     = _dtr._cp;
        long    cchNew = _dtr._cchNew;
        long    cchOld = _dtr._cchOld;

        if (pnf->IsTextChange())
        {
            Assert(pnf->Cp(GetContentFirstCp()) >= 0);
        }
#endif

        //
        //  If the notification is already "handled",
        //  Make adjustments to cached values for any text changes
        //

        //FUTURE (carled) this block could be done in a very different place.
        // e.g. as we process the text measurements, we can make this call.
        // after all , it just looks at the dtr
        if (    pnf->IsHandled()
            &&  pnf->IsTextChange())
        {
/*
            //(dmitryt) if it came from view slave, we should Accumulate, 
            //not Adjust. Adjust assumes the change happened in nested layout
            //was handled by nested layout so it can't contain entire dirty
            //range of this layout inside it. This happens in viewlink scenario.

            if(    ElementOwner()->HasSlavePtr() 
                && ElementOwner()->GetMarkup() != pnf->Node()->GetMarkup())
            {
                if(IsDirty())
                    _dtr.Accumulate(pnf, GetContentFirstCp(), GetContentLastCp(), FALSE);
            }
            else
            {
                _dtr.Adjust(pnf, GetContentFirstCp());
            }
*/
            //(dmitryt) IE6 bug 29798, it seems that it is a general case...
            //We want Accumulate always rather then use stripped-down Adjust, because
            //Adjust can produce wrong dtr (with negative cp) that causes crash later
            if(IsDirty())
                _dtr.Accumulate(pnf, GetContentFirstCp(), GetContentLastCp(), FALSE);
                
            _dp.Notify(pnf);
        }

        //
        //  If characters or an element are invalidating,
        //  then immediately invalidate the appropriate rectangles
        //

        else if (IsInvalidationNotification(pnf))
        {
            //
            //  Invalidate the entire layout if the associated element initiated the request
            //
            if (   ElementOwner() == pnf->Element() 
                || pnf->IsType(NTYPE_ELEMENT_INVAL_Z_DESCENDANTS))
            {
                //
                //  If we are dependant upon someone else's height or width, we need to completely
                //  reposition ourselves because this notice may be because our parent has changed.
                //  Otherwise, a simple invalidation will do.
                //
                
                const CFancyFormat * pFF = GetFirstBranch()->GetFancyFormat();
                if (    pFF->_fPositioned   // perf shortcut, was !ElementOwner()->IsPositionStatic()
                    &&  (pFF->IsWidthPercent() || pFF->IsHeightPercent()))
                {
                    ElementOwner()->RepositionElement();
                }
                Invalidate();
            }


            //
            //  Otherwise, isolate the appropriate range and invalidate the derived rectangles
            //

            else
            {
                long    cpFirst = GetContentFirstCp();
                long    cpLast  = GetContentLastCp();
                long    cp      = pnf->Cp(cpFirst) - cpFirst;
                long    cch     = pnf->Cch(cpLast);

                Assert( pnf->IsType(NTYPE_ELEMENT_INVALIDATE)
                    ||  pnf->IsType(NTYPE_CHARS_INVALIDATE));
                Assert(cp  >= 0);
                Assert(cch >= 0);

                //
                //  Obtain the rectangles if the request range is measured
                //

                if (    IsRangeBeforeDirty(cp, cch)
                    &&  (cp + cch) <= _dp._dcpCalcMax)
                {
                    CDataAry<RECT>  aryRects(Mt(CFlowLayoutNotify_aryRects_pv));
                    CTreeNode *pNotifiedNode = pnf->Element()->GetFirstBranch();
                    CTreeNode *pRelativeNode;
                    CRelDispNodeCache *pRDNC;

                    _dp.RegionFromRange(&aryRects, pnf->Cp(cpFirst), cch );

                    if (aryRects.Size() != 0)
                    {
                        // If the notified element is relative or is contained
                        // within a relative element (i.e. what we call "inheriting"
                        // relativeness), then we need to find the element that's responsible
                        // for the relativeness, and invalidate its dispnode.
                        if ( pNotifiedNode->IsInheritingRelativeness() )
                        {
                            pRDNC = _dp.GetRelDispNodeCache();
                            if ( pRDNC ) 
                            {
                                // NOTE: this assert is legit; remove the above if clause
                                // once OnPropertyChange() is modified to not fire invalidate
                                // when its dwFlags have remeasure in them.  The problem is
                                // that OnPropertyChange is invalidating when we've been
                                // asked to remeasure, so the dispnodes/reldispnodcache may
                                // not have been created yet.
                                Assert( pRDNC && "Must have a RDNC if one of our descendants inherited relativeness!" );                       
                                // Find the element that's causing the notified element
                                // to be relative.  Search up to the flow layout owner.
                                pRelativeNode = pNotifiedNode->GetCurrentRelativeNode( ElementOwner() );
                                // Tell the relative dispnode cache to invalidate the
                                // requested region of the relative element
                                pRDNC->Invalidate( pRelativeNode->Element(), &aryRects[0], aryRects.Size() );
                            }
                        }
                        else
                        {
                            Invalidate(&aryRects[0], aryRects.Size());
                        }
                    }
                }

                //
                //  Otherwise, if a dirty region exists, extend the dirty region to encompass it
                //  NOTE: Requests within unmeasured regions are handled automatically during
                //        the measure
                //

                else if (IsDirty())
                {
                    _dtr.Accumulate(pnf, GetContentFirstCp(), GetContentLastCp(), FALSE);
                }
            }
        }


        //
        //  Handle z-order and position change notifications
        //

        else if (IsPositionNotification(pnf))
        {
            fHandle = HandlePositionNotification(pnf);
        }

        //
        //  Handle translated ranges
        //

        else if (pnf->IsType(NTYPE_TRANSLATED_RANGE))
        {
            Assert(pnf->IsDataValid());
            HandleTranslatedRange(pnf->DataAsSize());
        }

        //
        //  Handle z-parent changes
        //

        else if (pnf->IsType(NTYPE_ZPARENT_CHANGE))
        {
            if (!ElementOwner()->IsPositionStatic())
            {
                ElementOwner()->ZChangeElement();
            }

            else if (_fContainsRelative)
            {
                ZChangeRelDispNodes();
            }
        }

        //
        //  Handle changes to CSS display and visibility
        //

        else if (   pnf->IsType(NTYPE_DISPLAY_CHANGE)
                ||  pnf->IsType(NTYPE_VISIBILITY_CHANGE))
        {
             HandleVisibleChange(pnf->IsType(NTYPE_VISIBILITY_CHANGE));

            if (_fContainsRelative)
            {
                if (pnf->IsType(NTYPE_VISIBILITY_CHANGE))
                    _dp.EnsureDispNodeVisibility();
                else
                    _dp.HandleDisplayChange();
            }
        }

#ifdef ADORNERS
        //
        //  Insert adornments as needed
        //
        //
        else if (pnf->IsType(NTYPE_ELEMENT_ADD_ADORNER))
        {
            fHandle = HandleAddAdornerNotification(pnf);
        }
#endif // ADORNERS

        //  Otherwise, accumulate the information
        //

        else if (   pnf->IsTextChange()
                ||  pnf->IsLayoutChange())
        {
            long       cpFirst     = GetContentFirstCp();
            long       cpLast      = GetContentLastCp();
            BOOL       fIsChildAbsolute = FALSE;
            CElement * pElemNotify = pnf->Element();

            Assert(!IsLocked());

            if (!pElemNotify && pnf->Node())
            {
                // text change notifications have no element, but do have 
                // a treenode.
                pElemNotify = pnf->Node()->Element();
            }

            //
            //  Always dirty the layout of resizing/morphing elements
            //
            if (    pElemNotify
                &&  pElemNotify != ElementOwner()
                &&      (   pnf->IsType(NTYPE_ELEMENT_RESIZE)
                        ||  pnf->IsType(NTYPE_ELEMENT_RESIZEANDREMEASURE)))
            {
                pElemNotify->DirtyLayout(pnf->LayoutFlags());

                //
                //  For absolute elements, simply note the need to re-calc them
                //

                if(pElemNotify->IsAbsolute())
                {
                    fIsChildAbsolute = TRUE;

                    TraceTagEx((tagLayoutTasks, TAG_NONAME,
                                "Layout Request: Queued RF_MEASURE on ly=0x%x [e=0x%x,%S sn=%d] by CFlowLayout::Notify() [n=%S srcelem=0x%x,%S]",
                                this,
                                _pElementOwner,
                                _pElementOwner->TagName(),
                                _pElementOwner->_nSerialNumber,
                                pnf->Name(),
                                pElemNotify,
                                pElemNotify->TagName()));
                    QueueRequest(CRequest::RF_MEASURE, pnf->Element());
                }
            }

            //
            //  Otherwise, collect the range covered by the notification
            //  Note that for text change notifications pnf->Element() is NULL, 
            //  which means that do want (and need) to accumulate the change

            if (    (   (   !fIsChildAbsolute
                         ||  pnf->IsType(NTYPE_ELEMENT_RESIZEANDREMEASURE))
                    ||  (   pnf->IsTextChange()
                         || pElemNotify == ElementOwner())
                    )
                &&  pnf->Cp(cpFirst) >= 0)
            {
                //
                //  Accumulate the affected range
                //

                _dtr.Accumulate(pnf,
                                cpFirst,
                                cpLast,
                                (    pnf->Element() == ElementOwner()
                                &&  !fRangeSet));

                //
                // Content's are dirtied so reset the minmax flag on the display
                //
                _dp._fMinMaxCalced = FALSE;

                //
                //  Mark forced layout if requested
                //

                if (pnf->IsFlagSet(NFLAGS_FORCE))
                {
                    if (pElemNotify == ElementOwner())
                    {
                        _fForceLayout = TRUE;
                    }
                    else
                    {
                        _fDTRForceLayout = TRUE;
                    }

                    pnf->ClearFlag(NFLAGS_FORCE);
                }

                //
                //  Invalidate cached min/max values when content changes size
                //

                if (    !_fPreserveMinMax
                    &&  _fMinMaxValid 
                    &&  (   pnf->IsType(NTYPE_ELEMENT_MINMAX)
                        ||  (   _fContentsAffectSize
                            &&  (   pnf->IsTextChange()
                                ||  pnf->IsType(NTYPE_ELEMENT_RESIZE)
                                ||  pnf->IsType(NTYPE_ELEMENT_REMEASURE)
                                ||  pnf->IsType(NTYPE_ELEMENT_RESIZEANDREMEASURE)
                                ||  pnf->IsType(NTYPE_CHARS_RESIZE)))))
                {
                    ResetMinMax();

                    //  fix for bug #110026. 
                    //  if the layout is notified about some changes (like chars deleted) 
                    //  when minmax is alreasy calc'ed (_fMinMaxValid == TRUE) but normal 
                    //  calc didn't happen yet, it should notify it's parent also.
                    if (IsSizeThis())
                    {
                        CLayout *pLayoutParent = GetUpdatedParentLayout(LayoutContext());
                        if (pLayoutParent && pLayoutParent->_fMinMaxValid)
                        {
                            pLayoutParent->ElementOwner()->MinMaxElement();
                        }
                    }
                }
            }

            //
            //  If the layout is transitioning to dirty for the first time and
            //  is not set to get called by its containing layout engine (via CalcSize),
            //  post a layout request
            //  (For purposes of posting a layout request, transitioning to dirty
            //   means that previously no text changes were recorded and no absolute
            //   descendents needed sizing and now at least of those states is TRUE)
            //
            //  Why do we need to post a measure on ourself, if a the notification is for an 
            //  APE child?
             if (    fIsChildAbsolute  
                 ||  (  !pnf->IsFlagSet(NFLAGS_DONOTLAYOUT)
                     &&  !IsSizeThis()
                     &&  IsDirty()))
            {
                TraceTagEx((tagLayoutTasks, TAG_NONAME,
                            "Layout Task: Posted on ly=0x%x [e=0x%x,%S sn=%d] by CFlowLayout::Notify() [n=%S srcelem=0x%x,%S] [SUSPICOUS! Might need to be a QueueRequest instead of PostLayoutRequest]",
                            this,
                            _pElementOwner,
                            _pElementOwner->TagName(),
                            _pElementOwner->_nSerialNumber,
                            pnf->Name(),
                            pElemNotify,
                            pElemNotify->TagName()));
                PostLayoutRequest(pnf->LayoutFlags() | LAYOUT_MEASURE);

                //                
                // For NTYPE_ELEMENT_RESIZEANDREMEASURE we have just handled the remeasure
                // part but not the resize, so change the notification and pass it on up the 
                // branch.  This is parallel logic to what is in CLayout::nofity. Similarly,
                // if this is a _fContentsAffectSize layout, we need to change type to Resize 
                // and not handle so that the parent gets the clue.
                // 103787 et al.   Remember that if the child (or Me) is an APE, then the parent
                //  doesn't need to get this notification because there is no way we can affect 
                // their size.
                //
                if (   !fIsChildAbsolute
                    && !ElementOwner()->IsAbsolute())
                {
                    if (pElemNotify != ElementOwner())
                    {
                        if (   pnf->IsTextChange()
                            && _fContentsAffectSize)
                        {
                            ElementOwner()->ResizeElement(pnf->IsFlagSet(NFLAGS_FORCE) ? NFLAGS_FORCE : 0);
                        }
                        else if (   pnf->IsType(NTYPE_ELEMENT_RESIZEANDREMEASURE)
                            || pnf->IsType(NTYPE_ELEMENT_REMEASURE))
                        {
                            BOOL  fForce = pnf->IsFlagSet(NFLAGS_FORCE);

                            fHandle = FALSE;
                            pnf->ChangeTo(NTYPE_ELEMENT_RESIZE, ElementOwner());
                            if (fForce)
                                pnf->SetFlag(NFLAGS_FORCE);
                        }
                        else if (   pnf->IsType(NTYPE_ELEMENT_RESIZE)
                                 && (   _fContentsAffectSize
                                     || ElementOwner()->HasSlavePtr())
                                    )
                        {
                            //
                            // the notification came from our slave, (because we are not the pnf->Element()
                            // and is a resize. we are already ready to remeasure but our parent needs to know 
                            // we are dirty. don't handle the resize so that our parent can do their work.
                            //
                            // NOTE (carled) there reason we need this hack is because the view-Master 
                            // has a flowlayout rather than a container layout, and so there is an 
                            // ambiguity about who is measureing what.  There are actually 2 CDisplays 
                            // and 2 dirty ranges that end up needed to be processed.  This must change 
                            // in V4.
                            fHandle = FALSE;
                        }
                    }
                    else if (   _fContentsAffectSize
                             && (   pnf->IsType(NTYPE_ELEMENT_REMEASURE)
                                 || pnf->IsType(NTYPE_ELEMENT_RESIZEANDREMEASURE)))
                    {
                        BOOL  fForce = pnf->IsFlagSet(NFLAGS_FORCE);

                        fHandle = FALSE;
                        pnf->ChangeTo(NTYPE_ELEMENT_RESIZE, ElementOwner());
                        if (fForce)
                            pnf->SetFlag(NFLAGS_FORCE);
                    }
                }
            }

#if DBG==1
            else if (   !pnf->IsFlagSet(NFLAGS_DONOTLAYOUT)
                    &&  !IsSizeThis())
            {
                Assert( !IsDirty()
                    ||  !GetView()->IsActive()
                    ||  IsDisplayNone()
                    ||  GetView()->HasLayoutTask(this));
            }
#endif
        }
#if DBG==1
        if (_dtr._cp != -1 && !pnf->_fNoTextValidate )
        {
            Assert(_dtr._cp >= 0);
            Assert(_dtr._cp <= GetContentTextLength());
            Assert(_dtr._cchNew >= 0);
            Assert(_dtr._cchOld >= 0);
            Assert((_dtr._cp + _dtr._cchNew) <= GetContentTextLength());
        }

        TraceTagEx((tagNotifyText, TAG_NONAME,
                   "NotifyText: (%d) Element(0x%x,%S) cp(%d-%d) cchNew(%d-%d) cchOld(%d-%d)",
                   pnf->SerialNumber(),
                   ElementOwner(),
                   ElementOwner()->TagName(),
                   cp, _dtr._cp,
                   cchNew, _dtr._cchNew,
                   cchOld, _dtr._cchOld));
#endif

        //
        //  Reset the range if previously set
        //

        if (fRangeSet)
        {
            pnf->ClearTextRange();
        }
    }

    switch (pnf->Type())
    {
    case NTYPE_DOC_STATE_CHANGE_1:
        pnf->Data(&dwData);
        if (Doc()->State() <= OS_RUNNING)
        {
            _dp.StopBackgroundRecalc();
        }
        break;

    case NTYPE_SELECT_CHANGE:
        // Fire this onto the form
        Doc()->OnSelectChange();
        break;

    case NTYPE_ELEMENT_EXITTREE_1:
        Reset(TRUE);
        break;

    case NTYPE_ZERO_GRAY_CHANGE:
        HandleZeroGrayChange( pnf );
        break; 
        
    case NTYPE_RANGE_ENSURERECALC:
    case NTYPE_ELEMENT_ENSURERECALC:

        fHandle = pnf->Element() != ElementOwner();

        //
        //  If the request is for this element and layout is dirty,
        //  convert the pending layout call to a dirty range in the parent layout
        //  (Processing the pending layout call immediately could result in measuring
        //   twice since the parent may be dirty as well - Converting it into a dirty
        //   range in the parent is only slightly more expensive than processing it
        //   immediately and prevents the double measuring, keeping things in the
        //   right order)
        //
        if (    pnf->Element() != ElementOwner()
            ||  !IsDirty())
        {
            CView * pView   = Doc()->GetView();
            long    cpFirst = GetContentFirstCpForBrokenLayout();
            long    cpLast  = GetContentLastCpForBrokenLayout();
            long    cp;
            long    cch;

            //
            //  If the requesting element is the element owner,
            //  calculate up through the end of the available content
            //

            if (pnf->Element() == ElementOwner())
            {
                cp  = _dp._dcpCalcMax;
                cch = cpLast - (cpFirst + cp);
            }

            //
            //  Otherwise, calculate up through the element
            //

            else
            {
                ElementOwner()->SendNotification(NTYPE_ELEMENT_ENSURERECALC);

                cp  = pnf->Cp(cpFirst) - cpFirst;
                cch = pnf->Cch(cpLast);
            }

            if(pView->IsActive())
            {
                CView::CEnsureDisplayTree   edt(pView);

                if (    !IsRangeBeforeDirty(cp, cch)
                    ||  _dp._dcpCalcMax <= (cp + cch))
                {
                    _dp.WaitForRecalc((cpFirst + cp + cch), -1);
                }

                if (    pnf->IsType(NTYPE_ELEMENT_ENSURERECALC)
                    &&  pnf->Element() != ElementOwner())
                {
                    ProcessRequest(pnf->Element() );
                }
            }
        }
        break;
    }


    //
    //  Handle the notification
    //
    //

    if (fHandle && pnf->IsFlagSet(NFLAGS_ANCESTORS))
    {
        pnf->SetHandler(ElementOwner());
    }

#if DBG==1
    // Update _snLast unless this is a self-only notification. Self-only
    // notification are an anachronism and delivered immediately, thus
    // breaking the usual order of notifications.
    if (!pnf->SendToSelfOnly() && pnf->SerialNumber() != (DWORD)-1)
    {
        _snLast = pnf->SerialNumber();
    }
#endif
}


//+----------------------------------------------------------------------------
//
//  Member:     Reset
//
//  Synopsis:   Reset the 