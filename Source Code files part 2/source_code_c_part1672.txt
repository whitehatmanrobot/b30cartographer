                OneDimensional;
    DWORD               a0;
    DWORD               a1;
    DWORD               b1;
    DWORD               b2;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;


    //
    // initialization
    //

    if (!SingleLineBuffer) {

        __try {

            FillMemory( OutputBuffer, TiffInstance->ImageHeight * (TiffInstance->ImageWidth / 8), WHITE );

        } __except (EXCEPTION_EXECUTE_HANDLER) {

            return FALSE;

        }

    }

    Tree = TwoDecodeTree;
    code = 0;
    HorzRuns = 0;
    EolCount = 0;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
    TiffInstance->bitbuf = OutputBuffer;
    OneDimensional = FALSE;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;
    pcurrline = OutputBuffer;
    prefline = OutputBuffer;
    a0 = 0;
    a1 = 0;
    b1 = 0;
    b2 = 0;
    Lines = 0;


    //
    // loop thru each byte in the file
    //

    for (j=0; j<TiffInstance->StripDataSize; j++) {


        octet = *plinebuf++;

        //
        // loop thru each bit in the byte
        //

        for (i=0; i<8; i++,octet<<=1) {

            if (Lines + 1 == TiffInstance->ImageHeight && TiffInstance->RunLength == lineWidth)
            {
                goto good_exit;
            }

            //
            // if the OneDimensional flag is set and the RunLength == lineWidth
            // then it means that the last run length was horizontal mode
            // and it was not a terminating code.  in this case we must go
            // process the remaining termination code before ending the line.
            //
            // if the OneDimensional flag is NOT set and the RunLength == lineWidth
            // then we are at the end of a line.  for mmr compression there are
            // no eols, so this is the pseudo eol.
            //

            if ((TiffInstance->RunLength == lineWidth) && (!OneDimensional)) {
                //
                // set the decoding tree
                //

                Tree = TwoDecodeTree;

                //
                // reset the control variables
                //

                TiffInstance->Color = 0;
                code = 0;
                a0 = 0;
                a1 = 0;
                b1 = 0;
                b2 = 0;
                Tree = TwoDecodeTree;
                OneDimensional = FALSE;

                //
                // if there is a non-zero runlength then
                // spaw the reference & current line pointers
                // and count this line.  the runlength can be
                // zero when there is just an empty eol in
                // the stream.
                //

                if (SingleLineBuffer) {
                    TiffInstance->bitbuf = OutputBuffer;
                }

                TiffInstance->RunLength = 0;
                Lines += 1;
                prefline = pcurrline;
                pcurrline = TiffInstance->bitbuf;
                b1 = GetBit(prefline, 0) ? 0 : NextChangingElement(prefline, 0, lineWidth, 0);
            } else if (code == DECODEEOL2) {

                //
                // the eol count is maintained to that
                // an rtc sequence is detected.
                //

                EolCount += 1;

                if (EolCount == 2) {

                    //
                    // this is an rtc sequence, so any
                    // data that follows in the file
                    // is garbage.
                    //

                    goto good_exit;

                }

                continue;
            } else if (code == DECODEEOL) {

                if (!(octet&0x80)) {
                    //
                    // here we skip all bits until we hit a 1 bit
                    // this happens when the first octet in a line
                    // is all zeroes and we detect that we are
                    // searching for an EOL
                    //
                    continue;
                }

                //
                // this forces the code to pickup the next
                // bit in the stream, which tells whether
                // the next line is encoded in MH or MR compression
                //
                code = DECODEEOL2;
                continue;

            } else if (code == BADRUN) {

                code = 0;
                continue;

            } else {
                b1 = NextChangingElement( prefline, a0, lineWidth, !TiffInstance->Color );
                b1 = NextChangingElement( prefline, b1, lineWidth,  TiffInstance->Color );
            }

            b2 = NextChangingElement( prefline, b1, lineWidth, GetBit(prefline, b1 ) );

            code = ((octet&0x80)>>7) ? Tree[code].Right : Tree[code].Left;

            if (OneDimensional) {

                if (code < 1) {

                    code = (-code);

                    OutputCodeBits( TiffInstance, code );

                    //
                    // the affect of this is to accumulate the runlengths
                    // into a0, causing a0 to be placed on a2 when horizontal
                    // mode is completed/
                    //

                    a0 += code;

                    if (code < 64) {

                        //
                        // terminating code
                        //
                        TiffInstance->Color = !TiffInstance->Color;
                        Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

                        if (HorzRuns) {

                            HorzRuns -= 1;

                            if (!HorzRuns) {

                                Tree = TwoDecodeTree;
                                OneDimensional = FALSE;

                            }

                        }

                    }

                    code = 0;

                }

                continue;

            }

            if (code == HORZMODE) {

                //
                // horizontal mode occurs when b1-a1 greater than 3
                //

                code= 0;
                HorzRuns = 2;
                OneDimensional = TRUE;
                Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

            } else if (code == PASSMODE) {

                //
                // pass mode occurs when the position of b2 lies
                // to the left of a1, but a1 cannot be equal to b2.
                //

                code = b2 - a0;
                OutputCodeBits( TiffInstance, code );
                code = 0;
                a0 = b2;

            } else if (code >= VTMODE3N && code <= VTMODE3P) {

                //
                // vertical mode occurs when b1-a1 <= 3
                //

                a1 = b1 - (VTMODE0 - code);
                code = a1 - a0;

                OutputCodeBits( TiffInstance, code );

                code = 0;
                a0 = a1;

                TiffInstance->Color = !TiffInstance->Color;

            }

        }
    }

good_exit:
    FlushBits( TiffInstance );
    TiffInstance->Lines = Lines;

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\inc\tifflib.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflib.h

Abstract:

    This file contains the interfaces for the
    Windows XP FAX Server TIFF I/O Library.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/


#ifndef _TIFFLIB_
#define _TIFFLIB_

#ifdef __cplusplus
extern "C" {
#endif

#include <tiff.h>

#define TIFF_COMPRESSION_NONE     1
#define TIFF_COMPRESSION_MH       2
#define TIFF_COMPRESSION_MR       3
#define TIFF_COMPRESSION_MMR      4


#define     TIFFF_RES_Y             196
#define     TIFFF_RES_Y_DRAFT       98

//
// The value of the TIFFTAG_FAX_VERSION TIF tag
// The current fax tif version
//
#define FAX_TIFF_XP_VERSION        2
#define FAX_TIFF_CURRENT_VERSION   FAX_TIFF_XP_VERSION 

typedef struct _TIFF_INFO {
    DWORD   ImageWidth;
    DWORD   ImageHeight;
    DWORD   PageCount;
    DWORD   PhotometricInterpretation;
    DWORD   ImageSize;
    DWORD   CompressionType;
    DWORD   FillOrder;
    DWORD   YResolution;
} UNALIGNED TIFF_INFO, *PTIFF_INFO;

typedef struct _MS_TAG_INFO {
    LPTSTR      RecipName;
    LPTSTR      RecipNumber;
    LPTSTR      SenderName;
    LPTSTR      Routing;
    LPTSTR      CallerId;
    LPTSTR      Csid;
    LPTSTR      Tsid;
    DWORDLONG   StartTime;
    DWORDLONG   EndTime;
    DWORDLONG   SubmissionTime;
    DWORDLONG   OriginalScheduledTime;
    DWORD       Type;
    LPTSTR      Port;
    DWORD       Pages;
    DWORD       Retries;
    LPTSTR      RecipCompany;
    LPTSTR      RecipStreet;
    LPTSTR      RecipCity;
    LPTSTR      RecipState;
    LPTSTR      RecipZip;
    LPTSTR      RecipCountry;
    LPTSTR      RecipTitle;
    LPTSTR      RecipDepartment;
    LPTSTR      RecipOfficeLocation;
    LPTSTR      RecipHomePhone;
    LPTSTR      RecipOfficePhone;
    LPTSTR      RecipEMail;
    LPTSTR      SenderNumber;
    LPTSTR      SenderCompany;
    LPTSTR      SenderStreet;
    LPTSTR      SenderCity;
    LPTSTR      SenderState;
    LPTSTR      SenderZip;
    LPTSTR      SenderCountry;
    LPTSTR      SenderTitle;
    LPTSTR      SenderDepartment;
    LPTSTR      SenderOfficeLocation;
    LPTSTR      SenderHomePhone;
    LPTSTR      SenderOfficePhone;
    LPTSTR      SenderEMail;
    LPTSTR      SenderBilling;
    LPTSTR      Document;
    LPTSTR      Subject;
    LPTSTR      SenderUserName;
    LPTSTR      SenderTsid;
    DWORD       Priority;
    DWORD       dwStatus;
    DWORD       dwExtendedStatus;
    LPTSTR      lptstrExtendedStatus;
    DWORDLONG   dwlBroadcastId;
} MS_TAG_INFO, *PMS_TAG_INFO;

BOOL
FXSTIFFInitialize(
	VOID
	);

HANDLE
TiffCreate(
    LPTSTR FileName,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  HiRes
    );

HANDLE
TiffOpen(
    LPCTSTR FileName,
    PTIFF_INFO TiffInfo,
    BOOL ReadOnly,
    DWORD RequestedFillOrder
    );

BOOL
TiffClose(
    HANDLE hTiff
    );

BOOL
TiffStartPage(
    HANDLE hTiff
    );

BOOL
TiffEndPage(
    HANDLE hTiff
    );

BOOL
TiffWrite(
    HANDLE hTiff,
    LPBYTE TiffData
    );


BOOL
TiffWriteRaw(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD Size
    );

BOOL
TiffRead(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD PadLength
    );

BOOL
TiffReadRaw(
    HANDLE  hTiff,
    IN OUT  LPBYTE Buffer,
    IN OUT  LPDWORD BufferSize,
    IN      DWORD RequestedCompressionType,
    IN      DWORD FillOrder,
    IN      BOOL HiRes
    );


BOOL
TiffSeekToPage(
    HANDLE hTiff,
    DWORD PageNumber,
    DWORD FillOrder
    );

BOOL
TiffPostProcess(
    LPTSTR FileName
    );


BOOL
TiffRecoverGoodPages(
    LPTSTR SrcFileName,
    LPDWORD RecoveredPages,
    LPDWORD TotalPages
    );

// fast tiff



void
BuildLookupTables(
    DWORD TableLength
    );


BOOL
DecodeMrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    );


BOOL
DecodeMhPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer
    );


BOOL
DecodeMmrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    );





BOOL
ConvMmrPageToMrSameRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes
    );


BOOL
ConvMmrPageHiResToMrLoRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer
    );



BOOL
ConvMmrPageToMh(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes,
    BOOL                SrcHiRes
    );


BOOL
ConvMmrHiResToLowRes(
    LPTSTR              SrcFileName,
    LPTSTR              DestFileName
    );


BOOL
ConvFileMhToMmr(
    LPTSTR              SrcFileName,
    LPTSTR              DestFileName
    );


BOOL
OutputMmrLine(
    LPDWORD     lpdwOut,
    BYTE        BitOut,
    WORD       *pCurLine,
    WORD       *pRefLine,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    LPDWORD     lpdwOutLimit,
    DWORD       lineWidth
    );


BOOL
TiffPostProcessFast(
    LPTSTR SrcFileName,
    LPTSTR DstFileName          // can be null for generated name
    );



BOOL
MmrAddBranding(
    LPCTSTR              SrcFileName,
    LPTSTR              Branding,
    LPTSTR              BrandingOf,
    INT                 BrandingHeight
    );


int
ScanMhSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    DWORD                lineWidth
    );

BOOL
ScanMrSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    BOOL                *f1D,
    DWORD                lineWidth
    );


BOOL
TiffGetCurrentPageData(
    HANDLE      hTiff,
    LPDWORD     Lines,
    LPDWORD     StripDataSize,
    LPDWORD     ImageWidth,
    LPDWORD     ImageHeight
    );


BOOL
TiffGetCurrentPageResolution(
    HANDLE  hTiff,
    LPDWORD lpdwYResolution,
    LPDWORD lpdwXResolution
);

BOOL
TiffPrint (
    LPCTSTR lpctstrTiffFileName,
    LPTSTR  lptstrPrinterName
    );

BOOL
TiffPrintDC (
    LPCTSTR lpctstrTiffFileName,
    HDC     hdcPrinterDC
    );

BOOL
TiffUncompressMmrPage(
    HANDLE      hTiff,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     Lines
    );

BOOL
TiffUncompressMmrPageRaw(
    LPBYTE      StripData,
    DWORD       StripDataSize,
    DWORD       ImageWidth,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    );

BOOL
TiffExtractFirstPage(
    LPTSTR FileName,
    LPBYTE *Buffer,
    LPDWORD BufferSize,
    LPDWORD ImageWidth,
    LPDWORD ImageHeight
    );

BOOL
TiffAddMsTags(
    LPTSTR          FileName,
    PMS_TAG_INFO    MsTagInfo,
    BOOL            fSendJob
    );

BOOL
PrintTiffFile(
    HDC PrinterDC,
    LPTSTR FileName
    );

#define TIFFCF_ORIGINAL_FILE_GOOD       0x00000001
#define TIFFCF_UNCOMPRESSED_BITS        0x00000002
#define TIFFCF_NOT_TIFF_FILE            0x00000004

BOOL
ConvertTiffFileToValidFaxFormat(
    LPTSTR TiffFileName,
    LPTSTR NewFileName,
    LPDWORD Flags
    );

BOOL
MergeTiffFiles(
    LPCTSTR BaseTiffFile,
    LPCTSTR NewTiffFile
    );


BOOL
TiffSetCurrentPageWidth(
    HANDLE hTiff,
    DWORD ImageWidth
    );

BOOL
PrintRandomDocument(
    LPCTSTR FaxPrinterName,
    LPCTSTR DocName,
    LPTSTR OutputFile
    );

BOOL 
MemoryMapTiffFile(
    LPCTSTR                 lpctstrFileName,
    LPDWORD                 lpdwFileSize,
    LPBYTE*                 lppbfPtr,
    HANDLE*                 phFile,
    HANDLE*                 phMap,
    LPDWORD                 lpdwIfdOffset
    );

LPWSTR 
GetMsTagString(
    LPBYTE          RefPointer,
    PTIFF_TAG       pTiffTag
);

void
FreeMsTagInfo(
    PMS_TAG_INFO pMsTags
);


//
// DO NOT CHANGE 
// It's W2K MS Fax TIFFTAG_SOFTWARE tif file tag value
//
#define W2K_FAX_SOFTWARE_TIF_TAG  "Windows NT Fax Server"

#define ERROR_XP_TIF_FILE_FORMAT   20001L

#ifdef UNICODE

DWORD 
GetW2kMsTiffTags(
    LPCWSTR      cszFileName, 
    PMS_TAG_INFO pMsTags,
    BOOL         bSentArchive
);

#endif // UNICODE

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\test\src\xxxunusedxxx\setupinstalltest\tcs.h ===
//
//
// Filename:	tcs.h
//
//

#ifndef __TCS_H
#define	__TCS_H

#include <windows.h>

//
// KEYDATA -	used to associate each predefined registry root key with its
//				name.
//
struct KEYDATA{
	LPTSTR szName;
	HKEY hKey;
};

#define ILLEGAL_REG_HKEY_VALUE	NULL


//
// TYPEDATA -	used to associate each registry data type with its name.
//
struct TYPEDATA{
	LPTSTR szName;
	long lTypeCode;
};

#define ILLEGAL_REG_TYPE_VALUE	MAXDWORD


//
// DirectoryTestCase:
// Checks the existence or non-existence of the directory whose entry is passed
// to it, and performs actions on it according to the parameters passed to it.
//------------------------------------------------------------------------------
// Parameters:
// [IN] szIniDataLine -		an entry of the form
//										<directory path>=<directory name>
//
// [IN] fCheckForItem -		indicates if the stated directory is expected to be
//							found in the local file system or not.
//
// [IN] fDeleteIfExists -	indicates if the directory is to be deleted if it
//							is found (only if fCheckForItem == false).
//------------------------------------------------------------------------------
// Return Value:
// TRUE if the test was successful:
// 1.	A delete request was given and the directory was either successfully
//		deleted along with its descendants, or did not exist in the first place.
// 2.	A request to find the directory was made, and it was found.
// 3.	A request to check that the directory does not exist was made, and it
//		was not found.
// Otherwise the return value is FALSE.
//
bool DirectoryTestCase (
	LPCTSTR szIniDataLine,
	const bool fCheckForItem,
	const bool fDeleteIfExists
	);

//
// FileTestCase:
// Checks the existence or non-existence of the file whose entry is passed to
// it, and performs actions on it according to the parameters passed to it.
//------------------------------------------------------------------------------
// Parameters:
// [IN] szIniDataLine -		an entry of the form
//										<file path>=<file name>
//
// [IN] fCheckForItem -		indicates if the stated file is expected to be found
//							in the local file system or not.
//
// [IN] fDeleteIfExists -	indicates if the file is to be deleted if it is
//							found (only if fCheckForItem == false).
//------------------------------------------------------------------------------
// Return Value:
// TRUE if the test was successful:
// 1.	A delete request was given and the file was either successfully deleted
//		along, or did not exist in the first place.
// 2.	A request to find the file was made, and it was found.
// 3.	A request to check that the file does not exist was made, and it was not
//		found.
// Otherwise the return value is FALSE.
//
bool FileTestCase (
	LPCTSTR szIniDataLine,
	const bool fCheckForItem,
	const bool fDeleteIfExists
	);

//
// RegistryKeyTestCase:
// Checks the existence or non-existence of the registry key whose entry is
// passed to it, and performs actions on it according to the parameters passed
// to it.
//------------------------------------------------------------------------------
// Parameters:
// [IN] szIniDataLine -		an entry of the form
//							<registry root key name>\<registry key sub-path>
//							(the sub-path includes the registry key name).
//
// [IN] fCheckForItem -		indicates if the stated key is expected to be found
//							in the local registry or not.
//
// [IN] fDeleteIfExists -	indicates if the key is to be deleted if it is
//							found (only if fCheckForItem == false).
//------------------------------------------------------------------------------
// Return Value:
// TRUE if the test was successful:
// 1.	A delete request was given and the key was either successfully deleted
//		along with its descendants, or did not exist in the first place.
// 2.	A request to find the key was made, and it was found.
// 3.	A request to check that the key does not exist was made, and it was not
//		found.
// Otherwise the return value is FALSE.
//
bool RegistryKeyTestCase (
	LPCTSTR szIniDataLine,
	const bool fCheckForItem,
	const bool fDeleteIfExists
	);

//
// RegistryValueTestCase:
// Checks the existence or non-existence of the registry value whose entry is
// passed to it, and performs actions on it according to the parameters passed
// to it.
//------------------------------------------------------------------------------
// Parameters:
// [IN] szIniDataLine -		an entry of the form
// <registry root key>\<registry sub-path>=<value name>"<value data type>"<value data>
//
// [IN] fCheckForItem -		indicates if the stated value is expected to be
//							found in the local registry or not.
//
// [IN] fDeleteIfExists -	indicates if the value is to be deleted if it is
//							found (only if fCheckForItem == false).
//------------------------------------------------------------------------------
// Return Value:
// TRUE if the test was successful:
// 1.	A delete request was given and the value was either successfully deleted
//		or did not exist in the first place.
// 2.	A request to find the value was made, and it was found.
// 3.	A request to check that the value does not exist was made, and it was
//		not found.
// Otherwise the return value is FALSE.
//
bool RegistryValueTestCase (
	LPCTSTR szIniDataLine,
	const bool fCheckForItem,
	const bool fDeleteIfExists
	);


#endif // __TCS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\tifflib.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflib.c

Abstract:

    This file contains all of the public TIFF library functions.
    The following functions are available from this library:

        o TiffCreate            Creates a new TIFF file
        o TiffOpen              Opens an existing TIFF file
        o TiffClose             Closes a previously open or created TIFF file
        o TiffStartPage         Starts a new page for writing
        o TiffEndPage           Ends a page for writing
        o TiffWrite             Writes a line of TIFF data
        o TiffWriteRaw          Writes a line of TIFF data with no-encoding
        o TiffRead              Reads a page of TIFF data
        o TiffSeekToPage        Positions to a page for reading

    This library can be used anywhere in user mode and is thread
    safe for multithreaded apps.

    The encoding methods implemented in this library are coded
    to the ITU specification labeled T.4 03/93.


Environment:

        WIN32 User Mode


Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include <windows.h>
#include <shellapi.h>
#include <faxreg.h>
#include <mbstring.h>

#include "tifflibp.h"
#pragma hdrstop

#include "fasttiff.h"

#define TIFF_DEBUG_LOG_FILE  _T("FXSTIFFDebugLogFile.txt")

//
// IFD template for creating a new TIFF data page
//

FAXIFD const gc_FaxIFDTemplate = {

    NUM_IFD_ENTRIES,

    {
        { TIFFTAG_SUBFILETYPE,     TIFF_LONG,                    1, FILETYPE_PAGE          },   // 254
        { TIFFTAG_IMAGEWIDTH,      TIFF_LONG,                    1, 0                      },   // 256
        { TIFFTAG_IMAGELENGTH,     TIFF_LONG,                    1, 0                      },   // 257
        { TIFFTAG_BITSPERSAMPLE,   TIFF_SHORT,                   1, 1                      },   // 258
        { TIFFTAG_COMPRESSION,     TIFF_SHORT,                   1, 0                      },   // 259
        { TIFFTAG_PHOTOMETRIC,     TIFF_SHORT,                   1, PHOTOMETRIC_MINISWHITE },   // 262
        { TIFFTAG_FILLORDER,       TIFF_SHORT,                   1, FILLORDER_LSB2MSB      },   // 266
        { TIFFTAG_STRIPOFFSETS,    TIFF_LONG,                    1, 0                      },   // 273
        { TIFFTAG_SAMPLESPERPIXEL, TIFF_SHORT,                   1, 1                      },   // 277
        { TIFFTAG_ROWSPERSTRIP,    TIFF_LONG,                    1, 0                      },   // 278
        { TIFFTAG_STRIPBYTECOUNTS, TIFF_LONG,                    1, 0                      },   // 279
        { TIFFTAG_XRESOLUTION,     TIFF_RATIONAL,                1, 0                      },   // 281
        { TIFFTAG_YRESOLUTION,     TIFF_RATIONAL,                1, 0                      },   // 282
        { TIFFTAG_GROUP3OPTIONS,   TIFF_LONG,                    1, 0                      },   // 292
        { TIFFTAG_RESOLUTIONUNIT,  TIFF_SHORT,                   1, RESUNIT_INCH           },   // 296
        { TIFFTAG_PAGENUMBER,      TIFF_SHORT,                   2, 0                      },   // 297
        { TIFFTAG_SOFTWARE,        TIFF_ASCII,    SOFTWARE_STR_LEN, 0                      },   // 305
        { TIFFTAG_CLEANFAXDATA,    TIFF_SHORT,                   1, 0                      },   // 327
        { TIFFTAG_CONSECUTIVEBADFAXLINES, TIFF_SHORT,            1, 0                      }    // 328
    },

    0,
    SERVICE_SIGNATURE,
    TIFFF_RES_X,
    1,
    TIFFF_RES_Y,
    1,
    SOFTWARE_STR
};

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    BOOL g_fDebGlobOut;
    BOOL g_fDebGlobOutColors;
    BOOL g_fDebGlobOutPrefix;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    BOOL g_fDebGlobOutS;
#endif



DWORD
FaxTiffDllInit(
    HINSTANCE hInstance,
    DWORD     Reason,
    LPVOID    Context
    )

/*++

Routine Description:

    DLL initialization function.

Arguments:

    hInstance   - Instance handle
    Reason      - Reason for the entrypoint being called
    Context     - Context record

Return Value:

    TRUE        - Initialization succeeded
    FALSE       - Initialization failed

--*/

{
    if (DLL_PROCESS_ATTACH == Reason)
    {
        DisableThreadLibraryCalls(hInstance);
        OPEN_DEBUG_FILE(TIFF_DEBUG_LOG_FILE);
        return FXSTIFFInitialize();
    }
    if (DLL_PROCESS_DETACH == Reason)
    {
        CLOSE_DEBUG_FILE;
    }
    return TRUE;
}

BOOL
FXSTIFFInitialize(
    VOID
    )
{
    //
    // Becuase the process is not always terminated when the service is stopped,
    // We must not have any staticly initialized global variables.
    // Initialize FXSTIFF global variables before starting the service
    //

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    BOOL g_fDebGlobOut=0;
    BOOL g_fDebGlobOutColors=1;
    BOOL g_fDebGlobOutPrefix=1;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    BOOL g_fDebGlobOutS=0;
#endif
    return TRUE;
}




// Each Tiff we create have ImageWidth, and this tag is written right away.
HANDLE
TiffCreate(
    LPTSTR FileName,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  HiRes
    )

/*++

Routine Description:

    Creates a new TIFF file.  The act of creating a new
    file requires more than just opening the file.  The
    TIFF header is written and instance data is initialized
    for further operations on the new file.

    If FileName is NULL, no file is created.  This is used to
    to in memory decoding/encoding.

Arguments:

    FileName            - Full or partial path/file name
    CompressionType     - Requested compression type, see tifflib.h
    ImageWidth          - Width of the image in pixels

Return Value:

    Handle to the new TIFF file or NULL on error.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance;
    DWORD               Bytes;



    TiffInstance = MemAlloc( sizeof(TIFF_INSTANCE_DATA) );
    if (!TiffInstance) {
        return NULL;
    }

    if (FileName != NULL) {

        TiffInstance->hFile = CreateFile(
            FileName,
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            CREATE_ALWAYS,
            0,
            NULL
            );
        if (TiffInstance->hFile == INVALID_HANDLE_VALUE) {
            return NULL;
        }

    } else {

        TiffInstance->hFile = INVALID_HANDLE_VALUE;

    }

    if (FileName) {
        _tcscpy( TiffInstance->FileName, FileName );
    }

    TiffInstance->TiffHdr.Identifier = 0x4949;
    TiffInstance->TiffHdr.Version    = 0x2a;
    TiffInstance->TiffHdr.IFDOffset  = 0;
    TiffInstance->PageCount          = 0;
    TiffInstance->DataOffset         = 0;
    TiffInstance->IfdOffset          = FIELD_OFFSET( TIFF_HEADER, IFDOffset );
    TiffInstance->CompressionType    = CompressionType;
    TiffInstance->bitdata            = 0;
    TiffInstance->bitcnt             = DWORDBITS;
    TiffInstance->ImageWidth         = ImageWidth;
    TiffInstance->FillOrder          = FillOrder;

    if (HiRes) {
        TiffInstance->YResolution = 196;
    }
    else {
        TiffInstance->YResolution = 98;
    }


    FillMemory( TiffInstance->Buffer, sizeof(TiffInstance->Buffer), WHITE );

    TiffInstance->RefLine  = &TiffInstance->Buffer[0];
    TiffInstance->CurrLine = &TiffInstance->Buffer[FAXBYTES];
    TiffInstance->bitbuf   = &TiffInstance->Buffer[FAXBYTES];

    CopyMemory( &TiffInstance->TiffIfd, &gc_FaxIFDTemplate, sizeof(gc_FaxIFDTemplate) );

    if (TiffInstance->hFile != INVALID_HANDLE_VALUE) {
        if (!WriteFile(
            TiffInstance->hFile,
            &TiffInstance->TiffHdr,
            sizeof(TIFF_HEADER),
            &Bytes,
            NULL
            )) {
                CloseHandle( TiffInstance->hFile );
                DeleteFile( FileName );
                MemFree( TiffInstance );
                return NULL;
        }
    }

    return TiffInstance;
}

__inline
DWORD
IFDTagsSize(
    WORD NumDirEntries
    )
/*++
Routine Description:

    Returns the size of IFD Tags (in bytes) without the terminating offset field
    (For more info look at TIFF(tm) Specification Rev. 6.0 Final)

Arguments:

    NumDirEntries          - The offset to check

--*/
{
    return  sizeof(WORD) +                      // Number of Directory Entries field size
            NumDirEntries*sizeof(TIFF_TAG);     // Total Directory Entries size
}   // IFDTagsSize


static
BOOL
IsValidIFDOffset(
    DWORD               dwIFDOffset,
    PTIFF_INSTANCE_DATA pTiffInstance
    )
/*++
Routine Description:

    Checks the validity of an IFD offset in a TIFF file.

	This function should be called only when using Mapped file to walk over the TIFF file.
    MapViewOfFile should be called on pTiffInstance before calling this function.

Arguments:

    dwIFDOffset            - The offset to check
    pTiffInstance          - pointer to TIFF_INSTANCE_DATA that contains
                             the TIFF file data.

  Return Value:

    TRUE - is the offset is valid
    FALSE- otherwise

Remarks:

    This function should be called only when using Mapped file to walk over the TIFF file.
    MapViewOfFile should be called on pTiffInstance before calling this function.

--*/
{
    WORD    NumDirEntries=0;
    DWORD   dwSizeOfIFD = 0;

    //
    //  The last IFD Offset is 0
    //
    if (0 == dwIFDOffset)
    {
        return TRUE;
    }
    
    //
    //  The directory may be at any location in the file after the header,
    //  but must begin on a word boundary.
    //
    if (dwIFDOffset > pTiffInstance->FileSize - sizeof(WORD)    ||
        dwIFDOffset < sizeof(TIFF_HEADER))
    {
        return FALSE;
    }

    NumDirEntries = *(LPWORD)(pTiffInstance->fPtr + dwIFDOffset);
    
    //
    //  Each IFD must have at least one entry
    //
    if ( 0 == NumDirEntries )
    {
        return FALSE;
    }

    //
    //  calculate the size of the IFD
    //
    dwSizeOfIFD =   IFDTagsSize(NumDirEntries) +    // size of Tags
                    sizeof(DWORD);                  // size of offset field
    if ( dwIFDOffset + dwSizeOfIFD > pTiffInstance->FileSize )
    {
        return FALSE;
    }

    return TRUE;
}   // IsValidIFDOffset


HANDLE
TiffOpen(
    LPCTSTR FileName,
    PTIFF_INFO TiffInfo,
    BOOL ReadOnly,
    DWORD RequestedFillOrder
    )

/*++

Routine Description:

    Opens an existing TIFF file for reading.

Arguments:

    FileName            - Full or partial path/file name
    ImageWidth          - Optionaly receives the image width in pixels
    ImageLength         - Optionaly receives the image height in lines
    PageCount           - Optionaly receives the page count

Return Value:

    Handle to the open TIFF file or NULL on error.
    Also, the TiffInfo will have the info on the opened tiff file.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    WORD                NumDirEntries;
    DWORD               IFDOffset;


    TiffInstance = MemAlloc( sizeof(TIFF_INSTANCE_DATA) );
    if (!TiffInstance) {
        goto error_exit;
    }
    ZeroMemory(TiffInstance, sizeof(TIFF_INSTANCE_DATA));

    TiffInstance->hFile = CreateFile(
        FileName,
        ReadOnly ? GENERIC_READ : (GENERIC_READ | GENERIC_WRITE),
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        0,
        NULL
        );

    if (TiffInstance->hFile == INVALID_HANDLE_VALUE) {
        goto error_exit;
    }

    TiffInstance->FileSize = GetFileSize(TiffInstance->hFile,NULL);
    if (TiffInstance->FileSize == 0xFFFFFFFF )
    {
        goto error_exit;
    }
    if (TiffInstance->FileSize <= sizeof(TIFF_HEADER))
    {
        SetLastError(ERROR_INVALID_PARAMETER);
        goto error_exit;
    }

    TiffInstance->hMap = CreateFileMapping(
        TiffInstance->hFile,
        NULL,
        ReadOnly ? (PAGE_READONLY | SEC_COMMIT) : (PAGE_READWRITE | SEC_COMMIT),
        0,
        0,
        NULL
        );
    if (!TiffInstance->hMap) {
        goto error_exit;
    }

    TiffInstance->fPtr = MapViewOfFile(
        TiffInstance->hMap,
        ReadOnly ? FILE_MAP_READ : (FILE_MAP_READ | FILE_MAP_WRITE),
        0,
        0,
        0
        );
    if (!TiffInstance->fPtr) {
        goto error_exit;
    }

    _tcscpy( TiffInstance->FileName, FileName );

    //
    // read in the TIFF header
    //
    CopyMemory(
        &TiffInstance->TiffHdr,
        TiffInstance->fPtr,
        sizeof(TIFF_HEADER)
        );

    //
    // validate that the file is really a TIFF file
    //
    if ((TiffInstance->TiffHdr.Identifier != TIFF_LITTLEENDIAN) ||
        (TiffInstance->TiffHdr.Version != TIFF_VERSION))
    {
        SetLastError (ERROR_BAD_FORMAT);
        goto error_exit;
    }

    //
    //  The offset (in bytes) of the first IFD. The directory may be at any location
    //  in the file after the header but must begin on a word boundary.
    //  There must be at least one IFD so first IFD offset can't be 0.
    //
    IFDOffset = TiffInstance->TiffHdr.IFDOffset;
    if (    0 == IFDOffset ||
            !IsValidIFDOffset(IFDOffset,TiffInstance))
    {
        SetLastError (ERROR_BAD_FORMAT);
        goto error_exit;
    }

    //
    // walk the IFD list to count the number of pages
    //

    while ( IFDOffset )
    {
        //
        // get the count of tags in this IFD
        //
        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IFDOffset);
        //
        // get the next IFD offset
        //
        IFDOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + IFDOffset + IFDTagsSize(NumDirEntries));
        if (!IsValidIFDOffset(IFDOffset,TiffInstance))
        {
            SetLastError (ERROR_BAD_FORMAT);
            goto error_exit;
        }
        //
        // increment the page counter
        //
        TiffInstance->PageCount += 1;
    }
    TiffInstance->IfdOffset             = TiffInstance->TiffHdr.IFDOffset;
    TiffInstance->FillOrder             = RequestedFillOrder;
    // This call will find out more information about the first page in the tiff file,
    // and will store it in the TiffInstance. All the page info + page itself will be read.
    if (!TiffSeekToPage( TiffInstance, 1, RequestedFillOrder ))
    {
        SetLastError (ERROR_BAD_FORMAT);
        goto error_exit;
    }
    TiffInfo->PageCount                 = TiffInstance->PageCount;
    TiffInfo->ImageWidth                = TiffInstance->ImageWidth;
    TiffInfo->ImageHeight               = TiffInstance->ImageHeight;
    TiffInfo->PhotometricInterpretation = TiffInstance->PhotometricInterpretation;
    TiffInfo->FillOrder                 = TiffInstance->FillOrder;
    TiffInfo->YResolution               = TiffInstance->YResolution;
    TiffInfo->CompressionType           = TiffInstance->CompressionType;
    TiffInstance->RefLine               = &TiffInstance->Buffer[0];
    TiffInstance->CurrLine              = &TiffInstance->Buffer[FAXBYTES];
    TiffInstance->CurrPage              = 1;
    FillMemory( TiffInstance->Buffer, sizeof(TiffInstance->Buffer), WHITE );
    return TiffInstance;

error_exit:
    if (TiffInstance && TiffInstance->hFile && TiffInstance->hFile != INVALID_HANDLE_VALUE)
    {
        if (TiffInstance->fPtr)
        {
            UnmapViewOfFile( TiffInstance->fPtr );
            TiffInstance->fPtr = NULL;
        }
        if (TiffInstance->hMap)
        {
            CloseHandle( TiffInstance->hMap );
            TiffInstance->hMap = NULL;
        }
        CloseHandle( TiffInstance->hFile );
    TiffInstance->hFile = NULL;
    }
    if (TiffInstance)
    {
        MemFree( TiffInstance );
    TiffInstance = NULL;
    }
    return NULL;
}


BOOL
TiffClose(
    HANDLE hTiff
    )

/*++

Routine Description:

    Closes a TIFF file and frees all allocated resources.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    if (TiffInstance->StripData) {

        VirtualFree(
            TiffInstance->StripData,
            0,
            MEM_RELEASE
            );

    }

    if (TiffInstance->hMap) {

        UnmapViewOfFile( TiffInstance->fPtr );
        CloseHandle( TiffInstance->hMap );
        CloseHandle( TiffInstance->hFile );

    } else {

        if (TiffInstance->hFile != INVALID_HANDLE_VALUE)
            CloseHandle( TiffInstance->hFile );

    }

    MemFree( TiffInstance );

    return TRUE;
}


VOID
RemoveGarbage(
    PTIFF_INSTANCE_DATA TiffInstance
    )

/*++

Routine Description:

    Removes the garbage from a page of tiff data.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data

Return Value:

    None.

--*/

{
    if (TiffInstance->StartGood  == 0 || TiffInstance->EndGood == 0) {
        return;
    }

    CopyMemory(
        TiffInstance->fPtr + TiffInstance->StripOffset,
        (LPVOID) ((LPBYTE)TiffInstance->StripData + TiffInstance->StartGood),
        TiffInstance->EndGood - TiffInstance->StartGood
        );


    PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagStripByteCounts, TiffInstance->EndGood-TiffInstance->StartGood );
    PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagFillOrder,       FILLORDER_MSB2LSB );
    if (TiffInstance->BadFaxLines) {
        PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagBadFaxLines, TiffInstance->BadFaxLines );
        PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagCleanFaxData, CLEANFAXDATA_UNCLEAN );
    }
}


BOOL
TiffPostProcess(
    LPTSTR FileName
    )

/*++

Routine Description:

    Opens an existing TIFF file for reading.

Arguments:

    FileName            - Full or partial path/file name

Return Value:

    TRUE for success, FALSE for failure.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance;
    TIFF_INFO TiffInfo;
    DWORD PageCnt;
    BYTE TiffData[FAXBYTES*10];



    TiffInstance = (PTIFF_INSTANCE_DATA) TiffOpen(
        FileName,
        &TiffInfo,
        FALSE,
        FILLORDER_MSB2LSB
        );

    if (!TiffInstance) {
        return FALSE;
    }

    if (TiffInstance->ImageHeight) {
        TiffClose( (HANDLE) TiffInstance );
        return TRUE;
    }

    ZeroMemory( TiffData, sizeof(TiffData) );

    for (PageCnt=0; PageCnt<TiffInfo.PageCount; PageCnt++) {
        //Read the first page (tags+data).
        if (!TiffSeekToPage( (HANDLE) TiffInstance, PageCnt+1, FILLORDER_MSB2LSB )) {
            TiffClose( (HANDLE) TiffInstance );
            return TRUE;
        }

        switch( TiffInstance->CompressionType ) {

            case TIFF_COMPRESSION_NONE:

                if (!DecodeUnCompressedFaxData( TiffInstance, TiffData, TRUE, 0 )) {
                    TiffClose( (HANDLE) TiffInstance );
                    return FALSE;
                }
                break;

            case TIFF_COMPRESSION_MH:

                if (!DecodeMHFaxData( TiffInstance, TiffData, TRUE, 0 )) {
                    TiffClose( (HANDLE) TiffInstance );
                    return FALSE;
                }
                RemoveGarbage( TiffInstance );
                break;

            case TIFF_COMPRESSION_MR:

                if (!DecodeMRFaxData( TiffInstance, TiffData, TRUE, 0 )) {
                    TiffClose( (HANDLE) TiffInstance );
                    return FALSE;
                }
                break;

            case TIFF_COMPRESSION_MMR:

                if (!DecodeMMRFaxData( TiffInstance, TiffData, TRUE, 0 )) {
                    TiffClose( (HANDLE) TiffInstance );
                    return FALSE;
                }
                break;

        }

        PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagRowsPerStrip, TiffInstance->Lines );
        PutTagData( TiffInstance->fPtr, 0, TiffInstance->TagImageLength,  TiffInstance->Lines );

    }

    TiffClose( (HANDLE) TiffInstance );

    return TRUE;
}


BOOL
TiffStartPage(
    HANDLE hTiff
    )

/*++

Routine Description:

    Set the file to be ready to write TIFF data to a new page.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    TiffInstance->DataOffset = SetFilePointer(
        TiffInstance->hFile,
        0,
        NULL,
        FILE_CURRENT
        );
    if (TiffInstance->DataOffset == 0xffffffff) {
        TiffInstance->DataOffset = 0;
        return FALSE;
    }

    return TRUE;
}




BOOL
TiffSetCurrentPageWidth(
    HANDLE hTiff,
    DWORD ImageWidth
    )

/*++

Routine Description:

    Change the Page width of the current page. The next time we call to TiffEndPage the width will be as stated here

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

Remarks:
    This function should be broaden: So one can set the any of the current page property: Encoding, Width, Res, etc.
--*/


{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    if (TiffInstance != NULL)
    {
        TiffInstance->ImageWidth = ImageWidth;
        return TRUE;
    }

    return FALSE;
}



BOOL
TiffEndPage(
    HANDLE hTiff
    )

/*++

Routine Description:

    Ends a TIFF page in progress.  This causes the IFDs to be written.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    PFAXIFD             TiffIfd;
    DWORD               Bytes;
    DWORD               CurrOffset;


    Assert(TiffInstance);
    TiffIfd  = &TiffInstance->TiffIfd;

    // Find current location
    CurrOffset = SetFilePointer(
        TiffInstance->hFile,
        0,
        NULL,
        FILE_CURRENT
        );

    CurrOffset = Align( 8, CurrOffset );

    // Go to next IfdOffset
    SetFilePointer(
        TiffInstance->hFile,
        TiffInstance->IfdOffset,
        NULL,
        FILE_BEGIN
        );

    // Write the place of the next IFD
    WriteFile(
        TiffInstance->hFile,
        &CurrOffset,
        sizeof(CurrOffset),
        &Bytes,
        NULL
        );

    SetFilePointer(
        TiffInstance->hFile,
        CurrOffset,
        NULL,
        FILE_BEGIN
        );

    TiffInstance->PageCount += 1;

    // Prepare all the fields in the IFD struct.
    TiffIfd->yresNum = TiffInstance->YResolution;

    TiffIfd->ifd[IFD_PAGENUMBER].value      = MAKELONG( TiffInstance->PageCount-1, 0);
    TiffIfd->ifd[IFD_IMAGEWIDTH].value      = TiffInstance->ImageWidth;
    TiffIfd->ifd[IFD_IMAGEHEIGHT].value     = TiffInstance->Lines;
    TiffIfd->ifd[IFD_ROWSPERSTRIP].value    = TiffInstance->Lines;
    TiffIfd->ifd[IFD_STRIPBYTECOUNTS].value = TiffInstance->Bytes;
    TiffIfd->ifd[IFD_STRIPOFFSETS].value    = TiffInstance->DataOffset;
    TiffIfd->ifd[IFD_XRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, xresNum );
    TiffIfd->ifd[IFD_YRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, yresNum );
    TiffIfd->ifd[IFD_SOFTWARE].value        = CurrOffset + FIELD_OFFSET( FAXIFD, software );
    TiffIfd->ifd[IFD_FILLORDER].value       = TiffInstance->FillOrder;

    if (TiffInstance->CompressionType == TIFF_COMPRESSION_NONE) {
        TiffIfd->ifd[IFD_COMPRESSION].value = COMPRESSION_NONE;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS;
    }
    else if (TiffInstance->CompressionType == TIFF_COMPRESSION_MMR) {
        TiffIfd->ifd[IFD_COMPRESSION].value = TIFF_COMPRESSION_MMR;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS |
            (TiffInstance->CompressionType == TIFF_COMPRESSION_MH ? 0 : GROUP3OPT_2DENCODING);
    }
    else {
        TiffIfd->ifd[IFD_COMPRESSION].value = COMPRESSION_CCITTFAX3;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS |
            (TiffInstance->CompressionType == TIFF_COMPRESSION_MH ? 0 : GROUP3OPT_2DENCODING);
    }

    if (!WriteFile(
        TiffInstance->hFile,
        TiffIfd,
        sizeof(FAXIFD),
        &Bytes,
        NULL
        )) {
            return FALSE;
    }

    TiffInstance->IfdOffset = CurrOffset + FIELD_OFFSET( FAXIFD, nextIFDOffset );
    TiffInstance->Bytes = 0;

    return TRUE;
}


BOOL
TiffWrite(
    HANDLE hTiff,
    LPBYTE TiffData
    )

/*++

Routine Description:

    Writes a new line of data to a TIFF file.  The data
    is encoded according to the compression type specified
    when TiffCreate was called.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               Bytes;

    Assert(TiffInstance);

    EncodeFaxData(
        TiffInstance,
        TiffData,
        TiffInstance->ImageWidth,
        TiffInstance->CompressionType
        );

    FlushBits( TiffInstance );

    Bytes = (DWORD)(TiffInstance->bitbuf - &TiffInstance->Buffer[FAXBYTES]);
    TiffInstance->bitbuf = &TiffInstance->Buffer[FAXBYTES];

    WriteFile(
        TiffInstance->hFile,
        TiffInstance->bitbuf,
        Bytes,
        &Bytes,
        NULL
        );


    TiffInstance->Bytes += Bytes;

    ZeroMemory( TiffInstance->bitbuf, FAXBYTES );
    TiffInstance->Lines += 1;

    return TRUE;
}


BOOL
TiffWriteRaw(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD Size
    )

/*++

Routine Description:

    Writes a new line of data to a TIFF file.  The data
    is encoded according to the compression type specified
    when TiffCreate was called.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               Bytes;


    Assert(TiffInstance);
    WriteFile(
        TiffInstance->hFile,
        TiffData,
        Size,
        &Bytes,
        NULL
        );

    TiffInstance->Bytes += Bytes;

    if (Size == FAXBYTES) {
        TiffInstance->Lines += 1;
    }

    return TRUE;
}


BOOL
GetTiffBits(
    HANDLE  hTiff,
    LPBYTE Buffer,
    LPDWORD BufferSize,
    DWORD FillOrder
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD i;
    LPBYTE TmpBuffer;


    if (TiffInstance->StripDataSize > *BufferSize) {
        *BufferSize = TiffInstance->StripDataSize;
        return FALSE;
    }

    CopyMemory( Buffer, TiffInstance->StripData, TiffInstance->StripDataSize );

    if (FillOrder != TiffInstance->FillOrder) {
        for (i = 0, TmpBuffer = Buffer; i < TiffInstance->StripDataSize; i++) {
            TmpBuffer[i] = BitReverseTable[TmpBuffer[i]];
        }
    }

    *BufferSize = TiffInstance->StripDataSize;
    return TRUE;
}


BOOL
TiffReadRaw(
    HANDLE  hTiff,
    IN OUT  LPBYTE Buffer,
    IN OUT  LPDWORD BufferSize,
    IN      DWORD RequestedCompressionType,
    IN      DWORD FillOrder,
    IN      BOOL  HiRes
    )

/*++

Routine Description:

    Reads in a page of TIFF data starting at the current
    page.  The current page is set by calling TiffSeekToPage.
    Returns the data with the RequestedCompressionType and FillOrder
    doing conversions if necessary.

Arguments:

    hTiff               - TIFF handle returned by or TiffOpen
    Buffer              - pointer to buffer
    BufferSize          - pointer to size of buffer
    RequestedCompressionType    - type of compression desired
    FillOrder           - desired FillOrder

Return Value:

    TRUE for success, FALSE on error
    If the buffer passed in is not
    big enough, return FALSE and set BufferSize to the required size.
    If another error occurs, set BufferSize to 0 and return FALSE.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    PTIFF_INSTANCE_DATA TmpTiffData;   // temporary used to convert bits into
    LPBYTE              TmpBuffer;     // temporary buffer for above
    LPBYTE              CurLine;       // pointer to current scan line in Buffer
    DWORD               CompLineBytes; // number of bytes in compressed scan line
    DWORD               TotalBytes=0;  // total number of bytes in compress page
    LPBYTE              OutBufPtr;     // pointer to output buffer
    DWORD               BytesInLine;
    LPBYTE              EndOfBuffer;
    DWORD               LineWidth;
    DWORD               PageHeight;
    DWORD               i;
    DWORD               K = HiRes ? 4 : 2;


    LineWidth = TiffInstance->ImageWidth;
    PageHeight = TiffInstance->ImageHeight;

    //
    // create an in-memory tiff header (TIFF_INSTANCE_DATA) to hold the data that is converted
    // this call does not create a file because the filename is NULL
    //
    if (((HANDLE) TmpTiffData =
        TiffCreate(NULL, RequestedCompressionType, LineWidth, FillOrder, 1)) == NULL )
    {
       *BufferSize = 0;
        return FALSE;
    }

    TmpBuffer = VirtualAlloc(
        NULL,
        *BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (TmpBuffer == NULL) {
        TiffClose(TmpTiffData);
        *BufferSize = 0;
        return FALSE;
    }

    if (!TiffRead(hTiff, TmpBuffer, 0)) {
        VirtualFree( TmpBuffer, 0, MEM_RELEASE );
        TiffClose(TmpTiffData);
        *BufferSize = 0;
        return FALSE;
    }

    CurLine = TmpBuffer;
    OutBufPtr = Buffer;
    BytesInLine = TiffInstance->BytesPerLine;
    EndOfBuffer = TmpBuffer + (PageHeight * BytesInLine);

    i = 0;
    while (CurLine < EndOfBuffer)
    {
        switch( RequestedCompressionType ) {
            case TIFF_COMPRESSION_MH:
                EncodeFaxDataMhCompression( TmpTiffData, CurLine, LineWidth );
                break;

            case TIFF_COMPRESSION_MR:
                if (i++ % K == 0) {
                    EncodeFaxDataMhCompression( TmpTiffData, CurLine, LineWidth );
                } else {
                    EncodeFaxDataMmrCompression( TmpTiffData, CurLine, LineWidth );
                }
                break;

            case TIFF_COMPRESSION_MMR:
                EncodeFaxDataMmrCompression( TmpTiffData, CurLine, LineWidth );
                break;
        }

        FlushBits( TmpTiffData );

        CompLineBytes = (DWORD)(TmpTiffData->bitbuf - &TmpTiffData->Buffer[FAXBYTES]);
        TmpTiffData->bitbuf = &TmpTiffData->Buffer[FAXBYTES];

        CopyMemory( OutBufPtr, TmpTiffData->bitbuf, CompLineBytes );
        ZeroMemory(TmpTiffData->bitbuf, FAXBYTES);
        TotalBytes += CompLineBytes;

        CurLine += BytesInLine;
        OutBufPtr += CompLineBytes;
    }

    *BufferSize = TotalBytes;
    VirtualFree( TmpBuffer, 0, MEM_RELEASE);

    TiffClose(TmpTiffData);
    return TRUE;
}


BOOL
TiffRead(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD PadLength
    )

/*++

Routine Description:

    Reads in a page of TIFF data starting at the current
    page.  The current page is set by calling TiffSeekToPage.
    This always returns the data with FillOrder FILLORDER_LSB2MSB

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    switch( ((PTIFF_INSTANCE_DATA) hTiff)->CompressionType ) {
        case TIFF_COMPRESSION_NONE:
            return DecodeUnCompressedFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, FALSE, PadLength );

        case TIFF_COMPRESSION_MH:
            return DecodeMHFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, FALSE, PadLength );

        case TIFF_COMPRESSION_MR:
            return DecodeMRFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, FALSE, PadLength );

        case TIFF_COMPRESSION_MMR:
            return DecodeMMRFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, FALSE, PadLength );
    }

    return FALSE;
}


BOOL
TiffSeekToPage(
    HANDLE hTiff,
    DWORD PageNumber,
    DWORD FillOrder
    )

/*++

Routine Description:

    Positions the TIFF file to the requested page.  The next
    TiffRead call gets this page's data (The bitmap data is also read to TiffInstance struct)

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen
    PageNumber          - Requested page number

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    WORD                NumDirEntries;
    DWORD               IfdOffset;
    DWORD               PageCount;
    DWORD               i;
    DWORD               j;
    LPBYTE              dataPtr;
    WORD                PrevTagId;
    PSTRIP_INFO         StripInfo = NULL;
    DWORD               StripCount;
    PTIFF_TAG           TiffTags;
    DWORD               CompressionType;

    DEBUG_FUNCTION_NAME(TEXT("TiffSeekToPage"));
    Assert(TiffInstance);

    if (PageNumber > TiffInstance->PageCount) {
        return FALSE;
    }

    PageCount = 0;

    if (PageNumber == TiffInstance->CurrPage + 1) {

        //
        // get the count of tags in this IFD
        //

        IfdOffset = TiffInstance->IfdOffset;

        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

    } else {

        IfdOffset = TiffInstance->TiffHdr.IFDOffset;


        // Find the IFD of the requested page.
        while ( IfdOffset ) {

            //
            // get the count of tags in this IFD
            //
            NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

            //
            // increment the page counter and bail if ready
            //
            PageCount += 1;
            if (PageCount == PageNumber) {
                break;
            }

            //
            // get the next IFD offset
            //
            IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));

        }

    }

    if (!IfdOffset) {
        goto error_exit;
    }

    //
    // set the tag pointer
    //
    TiffTags = (PTIFF_TAG)(TiffInstance->fPtr + IfdOffset + sizeof(WORD));

    //
    // get the next IFD offset
    //
    TiffInstance->IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));

    //
    // walk the tags and pick out the info we need
    //
    for (i=0,PrevTagId=0; i<NumDirEntries; i++) {

        //
        // verify that the tags are in ascending order
        //
        if (TiffTags[i].TagId < PrevTagId) {
            goto error_exit;
        }

        PrevTagId = TiffTags[i].TagId;

        switch( TiffTags[i].TagId ) {

            case TIFFTAG_STRIPOFFSETS:

                StripInfo = (PSTRIP_INFO) MemAlloc(
                    TiffTags[i].DataCount * sizeof(STRIP_INFO)
                    );

                if (!StripInfo) {
                    goto error_exit;
                }

                StripCount = TiffTags[i].DataCount;

                for (j=0; j<TiffTags[i].DataCount; j++) {

                    StripInfo[j].Offset = GetTagData( TiffInstance->fPtr, j, &TiffTags[i] );
                    StripInfo[j].Data = TiffInstance->fPtr + StripInfo[j].Offset;

                    TiffInstance->StripOffset = StripInfo[j].Offset;

                }
                break;

            case TIFFTAG_ROWSPERSTRIP:

                TiffInstance->TagRowsPerStrip = &TiffTags[i];
                TiffInstance->RowsPerStrip = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_STRIPBYTECOUNTS:

                if (!StripInfo)
                {
                    DebugPrintEx(DEBUG_ERR, _T("(TiffTag == TIFFTAG_STRIPBYTECOUNTS) && (StripInfo == NULL)"));
                    goto error_exit;
                }

                TiffInstance->TagStripByteCounts = &TiffTags[i];

                for (j=0; j<TiffTags[i].DataCount; j++) {

                    StripInfo[j].Bytes = GetTagData( TiffInstance->fPtr, j, &TiffTags[i] );

                    if (StripInfo[j].Offset+StripInfo[j].Bytes > TiffInstance->FileSize) {

                        //
                        // the creator of this tiff file is a liar, trim the bytes
                        //

                        DWORD Delta;

                        Delta = (StripInfo[j].Offset + StripInfo[j].Bytes) - TiffInstance->FileSize;
                        if (Delta >= StripInfo[j].Bytes) {
                            //
                            // the offset lies beyond the end of the file
                            //
                            goto error_exit;
                        }

                        StripInfo[j].Bytes -= Delta;
                    }
                }
                break;

            case TIFFTAG_COMPRESSION:

                CompressionType = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );

                switch ( CompressionType ) {

                    case COMPRESSION_NONE:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_NONE;
                        break;

                    case COMPRESSION_CCITTRLE:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MH;
                        break;

                    case COMPRESSION_CCITTFAX3:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MH;
                        break;

                    case COMPRESSION_CCITTFAX4:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MMR;
                        break;

                    case COMPRESSION_LZW:
                    case COMPRESSION_OJPEG:
                    case COMPRESSION_JPEG:
                    case COMPRESSION_NEXT:
                    case COMPRESSION_CCITTRLEW:
                    case COMPRESSION_PACKBITS:
                    case COMPRESSION_THUNDERSCAN:
                        //
                        // unsupported compression type
                        //
                        goto error_exit;

                    default:
                        //
                        // unknown compression type
                        //
                        goto error_exit;

                }

                break;

            case TIFFTAG_GROUP3OPTIONS:

                CompressionType = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );

                if (CompressionType & GROUP3OPT_2DENCODING) {
                    if (TiffInstance->CompressionType != TIFF_COMPRESSION_MMR) {
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MR;
                    }

                } else if (CompressionType & GROUP3OPT_UNCOMPRESSED) {

                    TiffInstance->CompressionType = TIFF_COMPRESSION_NONE;
                }

                break;

            case TIFFTAG_IMAGEWIDTH:

                TiffInstance->ImageWidth = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                TiffInstance->BytesPerLine = (TiffInstance->ImageWidth/8)+(TiffInstance->ImageWidth%8?1:0);
                break;

            case TIFFTAG_IMAGELENGTH:

                TiffInstance->TagImageLength = &TiffTags[i];
                TiffInstance->ImageHeight = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_XRESOLUTION:

                TiffInstance->XResolution = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_YRESOLUTION:

                TiffInstance->YResolution = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_PHOTOMETRIC:

                TiffInstance->PhotometricInterpretation = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_FILLORDER:

                TiffInstance->TagFillOrder = &TiffTags[i];
                TiffInstance->FillOrder = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_CLEANFAXDATA:

                TiffInstance->TagCleanFaxData = &TiffTags[i];
                TiffInstance->CleanFaxData = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;

            case TIFFTAG_CONSECUTIVEBADFAXLINES:

                TiffInstance->TagBadFaxLines = &TiffTags[i];
                TiffInstance->BadFaxLines = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                break;
            default:
                ;
                // There was an unknown tag (and it's ok, cause we do not have to handle all the possible tags)

        }
    }

    //
    // now go read the strip data
    //

    for (i=0,j=0; i<StripCount; i++) {

        j += StripInfo[i].Bytes;

    }

    if (j >= TiffInstance->StripDataSize) {

        if (TiffInstance->StripData) {

            VirtualFree(
                TiffInstance->StripData,
                0,
                MEM_RELEASE
                );

        }

        TiffInstance->StripDataSize = j;

        TiffInstance->StripData = VirtualAlloc(
            NULL,
            TiffInstance->StripDataSize,
            MEM_COMMIT,
            PAGE_READWRITE
            );

        if (!TiffInstance->StripData) {
            goto error_exit;
        }

    } else {

        if (TiffInstance->StripData) {
            ZeroMemory(
                TiffInstance->StripData,
                TiffInstance->StripDataSize
                );
        }

    }

    for (i=0,dataPtr=TiffInstance->StripData; i<StripCount; i++) {

        __try {

            CopyMemory(
                dataPtr,
                StripInfo[i].Data,
                StripInfo[i].Bytes
                );

            dataPtr += StripInfo[i].Bytes;

        } __except (EXCEPTION_EXECUTE_HANDLER) {


        }

    }

    if (TiffInstance->FillOrder != FillOrder) {
        for (i=0,dataPtr=TiffInstance->StripData; i<TiffInstance->StripDataSize; i++) {
            dataPtr[i] = BitReverseTable[dataPtr[i]];
        }
    }

    TiffInstance->CurrPtr = TiffInstance->StripData;
    TiffInstance->CurrPage = PageNumber;

    MemFree( StripInfo );

    return TRUE;

error_exit:

    if (StripInfo) {
        MemFree( StripInfo );
    }

    return FALSE;
}


BOOL
ConvMmrHiResToLowRes(
    LPTSTR              SrcFileName,
    LPTSTR              DestFileName
    )

{
    LPBYTE      bmiBuf[sizeof(BITMAPINFOHEADER)+(sizeof(RGBQUAD)*2)];
    PBITMAPINFO bmi = (PBITMAPINFO) bmiBuf;
    HBITMAP     hBmp;


    TIFF_INFO   TiffInfoSrc;
    HANDLE      hTiffSrc;
    DWORD       CurrPage;
    LPBYTE      pSrcBits;

    HANDLE      hTiffDest;
    LPBYTE      TiffDataDestMmr;
    DWORD       DestSize;
    LPBYTE      pDestBits;

    DWORD       DestHeight;

    HDC         hdcMem;
    INT         ScanLines;
    INT         DestScanLines;
    int         StretchMode;
    DWORD       PageCnt;
    DWORD       DestHiRes;

    BOOL        bRet = FALSE;



    CurrPage = 1;

    hTiffSrc = TiffOpen(
        SrcFileName,
        &TiffInfoSrc,
        TRUE,
        FILLORDER_MSB2LSB
        );
    if (! hTiffSrc) {
        return FALSE;
    }

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }


    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        TiffInfoSrc.ImageWidth,
        FILLORDER_MSB2LSB,
        DestHiRes);

    if (! hTiffDest) {
        TiffClose(hTiffSrc);
        return FALSE;
    }

    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        return FALSE;
    }


    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
        return FALSE;
    }

    bmi->bmiHeader.biSize           = sizeof(BITMAPINFOHEADER);
    bmi->bmiHeader.biWidth          = TiffInfoSrc.ImageWidth;
    bmi->bmiHeader.biHeight         = (INT) TiffInfoSrc.ImageHeight;
    bmi->bmiHeader.biPlanes         = 1;
    bmi->bmiHeader.biBitCount       = 1;
    bmi->bmiHeader.biCompression    = 0;
    bmi->bmiHeader.biSizeImage      = 0;
    bmi->bmiHeader.biXPelsPerMeter  = 0;
    bmi->bmiHeader.biYPelsPerMeter  = 0;
    bmi->bmiHeader.biClrUsed        = 0;
    bmi->bmiHeader.biClrImportant   = 0;

    if ( ! TiffInfoSrc.PhotometricInterpretation) {
        bmi->bmiColors[0].rgbBlue       = 0;
        bmi->bmiColors[0].rgbGreen      = 0;
        bmi->bmiColors[0].rgbRed        = 0;
        bmi->bmiColors[0].rgbReserved   = 0;
        bmi->bmiColors[1].rgbBlue       = 0xff;
        bmi->bmiColors[1].rgbGreen      = 0xff;
        bmi->bmiColors[1].rgbRed        = 0xff;
        bmi->bmiColors[1].rgbReserved   = 0;
    } else {
        bmi->bmiColors[0].rgbBlue       = 0xff;
        bmi->bmiColors[0].rgbGreen      = 0xff;
        bmi->bmiColors[0].rgbRed        = 0xff;
        bmi->bmiColors[0].rgbReserved   = 0;
        bmi->bmiColors[1].rgbBlue       = 0;
        bmi->bmiColors[1].rgbGreen      = 0;
        bmi->bmiColors[1].rgbRed        = 0;
        bmi->bmiColors[1].rgbReserved   = 0;
    }


    DestHeight =  TiffInfoSrc.ImageHeight / 2;

    hdcMem = CreateCompatibleDC( NULL );
    hBmp = CreateCompatibleBitmap( hdcMem, TiffInfoSrc.ImageWidth, DestHeight );
    SelectObject( hdcMem, hBmp );

    StretchMode = STRETCH_ORSCANS;
    SetStretchBltMode(hdcMem, StretchMode);

    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_MSB2LSB) ) {
            goto l_exit;
        }

        if (!TiffRead( hTiffSrc, (LPBYTE) pSrcBits, 0 )) {
            goto l_exit;
        }
        bmi->bmiHeader.biHeight = (INT) TiffInfoSrc.ImageHeight;

        ScanLines = StretchDIBits(
            hdcMem,
            0,
            0,
            TiffInfoSrc.ImageWidth,
            DestHeight,
            0,
            0,
            TiffInfoSrc.ImageWidth,
            TiffInfoSrc.ImageHeight,
            pSrcBits,
            bmi,
            DIB_RGB_COLORS,
            SRCCOPY
            );

        bmi->bmiHeader.biHeight = (INT) DestHeight;

        DestScanLines = GetDIBits(
            hdcMem,
            hBmp,
            0,
            DestHeight,
            pDestBits,
            bmi,
            DIB_RGB_COLORS
            );

        // reuse pSrcBits buffer
        TiffDataDestMmr = pSrcBits;

        ((PTIFF_INSTANCE_DATA) hTiffDest)->bitbuf = TiffDataDestMmr;
        ((PTIFF_INSTANCE_DATA) hTiffDest)->bitcnt = DWORDBITS;
        ((PTIFF_INSTANCE_DATA) hTiffDest)->bitdata = 0;

        if (! TiffStartPage(hTiffDest) ) {
            goto l_exit;
        }


        if ( ! EncodeFaxPageMmrCompression(
                (PTIFF_INSTANCE_DATA) hTiffDest,
                (PBYTE) pDestBits,
                1728,
                DestScanLines,
                &DestSize) ) {

            goto l_exit;
        }


        if (! TiffWriteRaw( hTiffDest, TiffDataDestMmr, DestSize) ) {
            goto l_exit;
        }

        if (! TiffEndPage(hTiffDest) ) {
            goto l_exit;
        }
    }

    bRet = TRUE;

l_exit:

    DeleteObject(hBmp);
    DeleteDC(hdcMem);

    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
    VirtualFree ( pDestBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);

    return bRet;
}


BOOL
DrawBannerBitmap(
    LPTSTR  pBannerString,
    INT     width,
    INT     height,
    HBITMAP *phBitmap,
    PVOID   *ppBits
    )

/*++

Routine Description:

    Draw the specified banner string into a memory bitmap

Arguments:

    pBannerString - Specifies the banner string to be drawn
    width, height - Specifies the width and height of the banner bitmap (in pixels)
    phBitmap - Returns a handle to the banner bitmap
    ppBits - Returns a pointer to the banner bitmap data

Return Value:

    TRUE if successful, FALSE if there is an error

Note:

    When this function returns successful, you must call DeleteObject
    on the returned bitmap handle after you're done with the bitmap.

    Scanlines of the bitmap data always start on DWORD boundary.

--*/

{
    //
    // Information about the bitmap which is passed to CreateDIBSection
    //

    struct  {

        BITMAPINFOHEADER bmiHeader;
        RGBQUAD          bmiColors[2];

    } bitmapInfo = {

        {
            sizeof(BITMAPINFOHEADER),
            width,
            -height,
            1,
            1,
            BI_RGB,
            0,
            7874,
            7874,
            0,
            0,
        },

        //
        // Colors used in the bitmap: 0 = white, 1 = black
        //

        {
            { 255, 255, 255 },
            {   0,   0,   0 },
        }
    };

    HDC     hdcMem = NULL;
    HBITMAP hBitmap = NULL, hOldBitmap = NULL;
    PVOID   pBits = NULL;
    HFONT   hFont = NULL, hOldFont = NULL;
    RECT    rect = { 0, 0, width, height };
    LOGFONT logFont;

    //
    // Create a memory DC and a DIBSection and
    // select the bitmap into the memory DC and
    // select an appropriate sized monospace font
    //

    ZeroMemory(&logFont, sizeof(logFont));
    logFont.lfHeight = -(height-2);
    logFont.lfWeight = FW_NORMAL;
    logFont.lfCharSet = DEFAULT_CHARSET;
    logFont.lfOutPrecision = OUT_DEFAULT_PRECIS;
    logFont.lfClipPrecision = CLIP_DEFAULT_PRECIS;
    logFont.lfQuality = DEFAULT_QUALITY;
    logFont.lfPitchAndFamily = FIXED_PITCH | FF_DONTCARE;

    if ((pBannerString != NULL && width > 0 && height > 0) &&
        (hdcMem = CreateCompatibleDC(NULL)) &&
        (hBitmap = CreateDIBSection(NULL,
                                    (LPBITMAPINFO) &bitmapInfo,
                                    DIB_RGB_COLORS,
                                    &pBits,
                                    NULL,
                                    0)) &&
        (hOldBitmap = SelectObject(hdcMem, hBitmap)) &&
        (hFont = CreateFontIndirect(&logFont)) &&
        (hOldFont = SelectObject(hdcMem, hFont)))
    {
        //
        // Use monospace system font to draw the banner string
        //

        DrawText(hdcMem,
                 pBannerString,
                 -1,
                 &rect,
                 DT_CENTER | DT_VCENTER | DT_SINGLELINE);

        //
        // Return a handle to the bitmap and a pointer to the bitmap data
        //

        *phBitmap = hBitmap;
        *ppBits = pBits;
    }
    else
    {
        *phBitmap = NULL;
        *ppBits = NULL;
    }

    //
    // Perform any necessary clean up before returning
    //

    if (hOldFont != NULL)
        SelectObject(hdcMem, hOldFont);

    if (hFont != NULL)
        DeleteObject(hFont);

    if (hOldBitmap != NULL)
        SelectObject(hdcMem, hOldBitmap);

    if (pBits == NULL && hBitmap != NULL)
        DeleteObject(hBitmap);

    if (hdcMem != NULL)
        DeleteDC(hdcMem);

    return (*ppBits != NULL);
}


BOOL
MmrAddBranding(
    LPCTSTR             SrcFileName,
    LPTSTR              Branding,
    LPTSTR              BrandingEnd,
    INT                 BrandingHeight
    )

{
    // If there are different page width that we send , then this function must be changed
    // so for each different page width we set new brand that will be in the right width.
    INT         BrandingWidth;
    LPTSTR      DestFileName;
    TIFF_INFO   TiffInfoSrc;
    HANDLE      hTiffSrc;
    DWORD       CurrPage;
    BYTE       *pBrandBits = NULL;
    BYTE       *pMmrBrandBitsAlloc = NULL;
    DWORD      *lpdwMmrBrandBits;

    BYTE        pCleanBeforeBrandBits[4] = {0xff, 0xff, 0xff, 0xff};   // 32 blank lines at the beginning

    HANDLE      hTiffDest;
    LPDWORD     lpdwSrcBits;
    LPDWORD     lpdwSrc;
    LPDWORD     lpdwSrcEnd;

    DWORD       PageCnt;
    DWORD       DestHiRes;
    DWORD       BrandingLen = _tcslen(Branding);  // without Page#
    BOOL        bRet = FALSE;
    DWORD       DwordsOut;
    DWORD       BytesOut;
    DWORD       BitsOut;
    DWORD       BufferSize;
    DWORD       BufferUsedSize;
    DWORD       StripDataSize;
    HBITMAP     hBitmap;
    PVOID       pBannerBits;
    DWORD       TotalSrcBytes;
    DWORD       NumSrcDwords;
    LPTSTR      lptstrBranding = NULL;

    DEBUG_FUNCTION_NAME(TEXT("MmrAddBranding"));

    hTiffSrc = TiffOpen(
        SrcFileName,
        &TiffInfoSrc,
        TRUE,
        FILLORDER_LSB2MSB
        );

    if (! hTiffSrc)
    {
        SetLastError(ERROR_FUNCTION_FAILED);
        return FALSE;
    }

    BrandingWidth = TiffInfoSrc.ImageWidth;


    //
    // Build Dest. file name from Src. file name
    //


    if ( (DestFileName = MemAlloc( (_tcslen(SrcFileName)+1) * sizeof (TCHAR) ) ) == NULL )
    {
        TiffClose(hTiffSrc);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    _tcscpy(DestFileName, SrcFileName);
    // sorry about that, this puts a $ instead of the last character of DestFileName
    _tcsnset(_tcsdec(DestFileName,_tcsrchr(DestFileName,TEXT('\0'))),TEXT('$'),1);



    pBrandBits = MemAlloc((BrandingHeight+1) * (BrandingWidth / 8));
    if (!pBrandBits)
    {
        TiffClose(hTiffSrc);
        MemFree(DestFileName);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    pMmrBrandBitsAlloc = MemAlloc( sizeof(DWORD) * (BrandingHeight+1) * (BrandingWidth / 8));
    if (!pMmrBrandBitsAlloc)
    {
        TiffClose(hTiffSrc);
        MemFree(DestFileName);
        MemFree(pBrandBits);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    // align
    lpdwMmrBrandBits = (LPDWORD) ( ((ULONG_PTR) pMmrBrandBitsAlloc) & ~(3) );

    BufferSize = TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8);

    lpdwSrcBits = (LPDWORD) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );

    if (!lpdwSrcBits)
    {
        MemFree(DestFileName);
        MemFree(pBrandBits);
        MemFree(pMmrBrandBitsAlloc);
        TiffClose(hTiffSrc);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }


    if (TiffInfoSrc.YResolution == 196)
    {
        DestHiRes = 1;
    }
    else
    {
        DestHiRes = 0;
    }


    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        TiffInfoSrc.ImageWidth,
        FILLORDER_LSB2MSB,
        DestHiRes);

    if (! hTiffDest)
    {
        MemFree(DestFileName);
        MemFree(pBrandBits);
        MemFree(pMmrBrandBitsAlloc);
        VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );
        TiffClose(hTiffSrc);
        SetLastError(ERROR_FUNCTION_FAILED);
        return FALSE;
    }

    CurrPage = 1;

    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++)
    {
        DWORD dwImageHeight;

        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        if (! TiffStartPage(hTiffDest) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        //      Create branding for every page.
        //
        //      Last scan line - all white:
        //  1. to isolate branding from the real image.
        //  2. to avoid an MMR-merge with the real image.
        //

        ZeroMemory(pBrandBits, (BrandingHeight+1) * (BrandingWidth / 8) );

        lptstrBranding=MemAlloc(sizeof(TCHAR)*(BrandingLen+_tcslen(BrandingEnd)+4+4+1)); // branding + space to 4 digits num of pages *2
        if (!lptstrBranding)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("MemAlloc() failed for branding string. (ec: %ld)"),
                GetLastError());
            goto l_exit;
        }
        _tcscpy(lptstrBranding,Branding);

        _stprintf( &lptstrBranding[BrandingLen], TEXT("%03d %s %03d"),
                                PageCnt+1,
                                BrandingEnd,
                                TiffInfoSrc.PageCount);

        if ( ! DrawBannerBitmap(lptstrBranding,   // banner string
                             BrandingWidth,   // width in pixels
                             BrandingHeight,   // height in pixels,
                             &hBitmap,
                             &pBannerBits))
        {
            // Handle error case here
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        CopyMemory(pBrandBits, pBannerBits, BrandingHeight * (BrandingWidth / 8) );

        //
        // Convert uncompressed branding to an MMR
        //

        ZeroMemory(pMmrBrandBitsAlloc, sizeof(DWORD) * (BrandingHeight+1) * (BrandingWidth / 8) );

        EncodeMmrBranding(pBrandBits, lpdwMmrBrandBits, BrandingHeight+1, BrandingWidth, &DwordsOut, &BitsOut);

        BytesOut = (DwordsOut << 2);

        DeleteObject(hBitmap);

        //
        // write Spaces 4 bytes = 32 bits = 32 blank lines.
        //

        if (! TiffWriteRaw( hTiffDest, pCleanBeforeBrandBits, 4) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        // write branding without the last DWORD
        //


        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwMmrBrandBits, BytesOut) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        // check the current page dimensions. Add memory if needed.
        //

        TiffGetCurrentPageData( hTiffSrc,
                                NULL,
                                &StripDataSize,
                                NULL,
                                &dwImageHeight
                                );

        if (StripDataSize > BufferSize)
        {
            VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );

            BufferSize = StripDataSize;

            lpdwSrcBits = (LPDWORD) VirtualAlloc(
                NULL,
                BufferSize,
                MEM_COMMIT,
                PAGE_READWRITE
                );

            if (!lpdwSrcBits)
            {
                SetLastError(ERROR_NOT_ENOUGH_MEMORY);
                goto l_exit;
            }
        }

        BufferUsedSize = BufferSize;


        if (BitsOut == 0)
        {
            //
            // Simple merge
            //
            if (!GetTiffBits( hTiffSrc, (LPBYTE) lpdwSrcBits, &BufferUsedSize, FILLORDER_LSB2MSB))
            {
                SetLastError(ERROR_FUNCTION_FAILED);
                goto l_exit;
            }

            // add EOLs at the end of each page

            NumSrcDwords = ( ((PTIFF_INSTANCE_DATA) hTiffSrc)->StripDataSize) >> 2;
            lpdwSrc = lpdwSrcBits + NumSrcDwords;

            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;

            TotalSrcBytes = (DWORD)((lpdwSrc - lpdwSrcBits) << 2);

        }
        else
        {
            //
            // Read current page of the Src MMR Image.
            // Save the 1st slot for the bit-shifting merge with the Branding.
            //
            if (!GetTiffBits( hTiffSrc, (LPBYTE) (lpdwSrcBits+1), &BufferUsedSize, FILLORDER_LSB2MSB ))
            {
                SetLastError(ERROR_FUNCTION_FAILED);
                goto l_exit;
            }


            NumSrcDwords =  ( ( ((PTIFF_INSTANCE_DATA) hTiffSrc)->StripDataSize) >> 2) + 1;
            lpdwSrc = lpdwSrcBits;
            lpdwSrcEnd = lpdwSrcBits + NumSrcDwords;

            //
            // Get the last DWORD of lpdwBrandBits
            //

            *lpdwSrcBits = *(lpdwMmrBrandBits + DwordsOut);


            // copy entire DWORDs in a middle


            while (lpdwSrc < lpdwSrcEnd)
            {
                *lpdwSrc += ( *(lpdwSrc+1) << BitsOut );
                lpdwSrc++;
                *lpdwSrc = *lpdwSrc >> (32 - BitsOut);
            }

            // add EOLs at the end of each page

            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;

            TotalSrcBytes = (DWORD)((lpdwSrc - lpdwSrcBits) << 2);
        }


        //
        // write src image
        //

        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwSrcBits, TotalSrcBytes ))
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }


        //
        //  prepare Lines TAG. Same for all pages; min avail. lines
        //

       ((PTIFF_INSTANCE_DATA) hTiffDest)->Lines = 32 + dwImageHeight + BrandingHeight + 1 ;


        if (! TiffEndPage(hTiffDest) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }
        MemFree (lptstrBranding);
        lptstrBranding = NULL;
    }

    bRet = TRUE;

l_exit:
    MemFree(lptstrBranding);
    MemFree(pBrandBits);
    MemFree(pMmrBrandBitsAlloc);

    VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);

    if (TRUE == bRet)
    {
        // replace the original MH file by the new clean MMR file
        DeleteFile(SrcFileName);
        bRet = MoveFile(DestFileName, SrcFileName);
    }

    if (FALSE == bRet)
    {
        DeleteFile(DestFileName);
    }
    MemFree(DestFileName);

    return bRet;
}

BOOL
TiffGetCurrentPageResolution(
    HANDLE  hTiff,
    LPDWORD lpdwYResolution,
    LPDWORD lpdwXResolution
)
/*++

Routine name : TiffGetCurrentPageResolution

Routine description:

    Returns the current's page X,Y resolution of the TIFF instance

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff              [in]     - Handle to TIFF image
    lpdwYResolution    [out]    - Y resolution
    lpdwYResolution    [out]    - X resolution

Return Value:

    TRUE if successful, FALSE otherwise.

--*/
{
    PTIFF_INSTANCE_DATA pTiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    Assert(pTiffInstance);
    Assert(lpdwYResolution);
    Assert(lpdwXResolution);

    *lpdwYResolution = pTiffInstance->YResolution;
    *lpdwXResolution = pTiffInstance->XResolution;
    return TRUE;
}   // TiffGetCurrentPageResolution

BOOL
TiffGetCurrentPageData(
    HANDLE      hTiff,
    LPDWORD     Lines,
    LPDWORD     StripDataSize,
    LPDWORD     ImageWidth,
    LPDWORD     ImageHeight
    )
{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    if (Lines) {
        *Lines          = TiffInstance->Lines;
    }

    if (StripDataSize) {
        *StripDataSize  = TiffInstance->StripDataSize;
    }

    if (ImageWidth) {
        *ImageWidth     = TiffInstance->ImageWidth;
    }

    if (ImageHeight) {
        *ImageHeight    = TiffInstance->ImageHeight;
    }

    return TRUE;
}


//*****************************************************************************
//* Name:   AddStringTag
//* Author:
//*****************************************************************************
//* DESCRIPTION:
//*     Returns a TIFF_TAG structure with valid string tag information that points
//*     to the provided string. Writes the string to the file if it does not fit
//*     into DataOffset field of TIFF_TAG.
//*     The function:
//*         Sets the tag id to TagId.
//*         Sets the data type to ASCII
//*         Sets the count to the length of the string (+ terminating 0)
//*         Sets the data location according to the length of the string.
//*          if the string is less than 4 bytes (not including the termianting 0)
//*          it is copied directly into MsTags->DataOffset.
//*          if it is 4 bytes or more is is written to the current file location
//*          and the file offset is placed int MsTags->DataOffset.
//*         Note that the file pointer must be positioned to a place where it is
//*         OK to write the string before calling this function.
//* PARAMETERS:
//*     [IN] HANDLE hFile:
//*             A handle to the file where the tag will be eventually placed.
//*             The file pointer must be positioned to a location where it is OK
//*             to write the string in case it does not fit into TIFF_TAG::DataOffset.
//*             The file must be opened for write operations.
//*     [IN] LPTSTR String,
//*             The string value of the tag.
//*     [IN] WORD TagId,
//              The tag id for the tag.
//*     [IN] PTIFF_TAG MsTags
//*             Pointer to a TIFF_TAG structure. The structure fields will be filled as follows:
//*             TagId : The valud of the TagId parameter
//*             DataType: TIFF_ASCII
//*             DataCount: The char length of the String parameter + 1 (for terminating NULL)
//*             DataOffset: If the string is less than 4 bytes the string will be copied into here. Otherwise
//*                         it will contain the file offset to where the string was written.

//* RETURN VALUE:
//*         FALSE if the operation failed.
//*         TRUE is succeeded.
//* Comments:
//*         The string is converted into ASCII before being written to file or placed in DataOffset.
//*         Note that the function does not write the TAG itself to the file, just the string.
//*         It provides the tag information and this information should be written to the file
//*         separately.
//*****************************************************************************
BOOL
AddStringTag(
    HANDLE hFile,
    LPTSTR String,
    WORD TagId,
    PTIFF_TAG MsTags
    )
{
    BOOL Rval = FALSE;
    LPSTR s;
    DWORD BytesRead;


#ifdef  UNICODE
    s = UnicodeStringToAnsiString( String );
#else   // !UNICODE
    s = StringDup (String);
#endif  // UNICODE
    if (!s) {
        return FALSE;
    }
    MsTags->TagId = TagId;
    MsTags->DataType = TIFF_ASCII;
    MsTags->DataCount = strlen(s) + 1;
    if (strlen(s) < 4) {
        _mbscpy( (PUCHAR)&MsTags->DataOffset, s );
        Rval = TRUE;
    } else {
        MsTags->DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags->DataOffset != 0xffffffff) {
            if (WriteFile( hFile, (LPVOID) s, strlen(s)+1, &BytesRead, NULL )) {
                Rval = TRUE;
            }
        }
    }
    MemFree( s );
    return Rval;
}


BOOL
TiffExtractFirstPage(
    LPTSTR FileName,
    LPBYTE *Buffer,
    LPDWORD BufferSize,
    LPDWORD ImageWidth,
    LPDWORD ImageHeight
    )
{
    PTIFF_INSTANCE_DATA TiffInstance;
    TIFF_INFO TiffInfo;


    TiffInstance = TiffOpen( FileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (!TiffInstance) {
        return FALSE;
    }

    *Buffer = VirtualAlloc(
        NULL,
        TiffInstance->StripDataSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!*Buffer) {
        TiffClose( TiffInstance );
        return FALSE;
    }

    CopyMemory( *Buffer, TiffInstance->StripData, TiffInstance->StripDataSize );
    *BufferSize = TiffInstance->StripDataSize;
    *ImageWidth = TiffInstance->ImageWidth;
    *ImageHeight = TiffInstance->ImageHeight;

    TiffClose( TiffInstance );

    return TRUE;
}

//*********************************************************************************
//* Name:   IsMSTiffTag()
//*********************************************************************************
//* DESCRIPTION:
//*     Determine whether the dwTagId if one of the Microsoft Tags.
//*
//* PARAMETERS:
//*     [IN ]   DWORD   dwTagId - tag ID
//*
//* RETURN VALUE:
//*     TRUE
//*         If the MS tag
//*     FALSE
//*         otherwise
//*********************************************************************************
BOOL
IsMSTiffTag(
    DWORD dwTagId
)
{
    return (dwTagId >= MS_TIFFTAG_START && dwTagId <= MS_TIFFTAG_END);
}

//*********************************************************************************
//* Name:   TiffAddMsTags()
//* Author: Oded Sacher
//* Date:   Nov 8, 1999
//*********************************************************************************
//* DESCRIPTION:
//*     Adds Microsoft Tags to a Tiff file.
//*
//* PARAMETERS:
//*     [IN ]   LPTSTR          FileName
//*                 pointer to the file name.
//*
//*     [IN ]   PMS_TAG_INFO    MsTagInfo
//*                 pointer to a structure containing all info to be written.
//*
//*
//*     [IN ]   BOOL            fSendJob
//*                 Flag that indicates an outbound job.
//*
//*
//* RETURN VALUE:
//*     TRUE
//*         If no error occured.
//*     FALSE
//*         If an error occured.
//*********************************************************************************
BOOL
TiffAddMsTags(
    LPTSTR          FileName,
    PMS_TAG_INFO    MsTagInfo,
    BOOL            fSendJob
    )
{
    HANDLE hFile;
    TIFF_HEADER TiffHeader;
    WORD NumDirEntries;
    DWORD BytesRead;
    BOOL rVal = FALSE;
    PTIFF_TAG TiffTags = NULL;
    DWORD IfdSize;
    DWORD NextIFDOffset;
    DWORD NewIFDOffset;
    TIFF_TAG MsTags[MAX_MS_TIFFTAGS] = {0};
    DWORD MsTagCnt = 0;
    DWORD i;
    DWORD MsTagsIndex;
    DWORD TiffTagsIndex;
    DWORD dwWrittenTagsNum = 0;
    DEBUG_FUNCTION_NAME(TEXT("TiffAddMsTags"));

    hFile = CreateFile(
        FileName,
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        0,
        NULL
        );
    if (hFile == INVALID_HANDLE_VALUE) {
        DebugPrintEx( DEBUG_ERR,TEXT("CreateFile failed, err :"), GetLastError());
        return FALSE;
    }

    //
    // read the tiff header
    //

    if (!ReadFile( hFile, (LPVOID) &TiffHeader, sizeof(TIFF_HEADER), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // validate that the file is really a tiff file
    //

    if ((TiffHeader.Identifier != TIFF_LITTLEENDIAN) || (TiffHeader.Version != TIFF_VERSION)) {
        DebugPrintEx( DEBUG_ERR,TEXT("Invalid TIFF Format"));
        goto exit;
    }

    //
    // position the file to read the ifd's tag count
    //

    if (SetFilePointer( hFile, TiffHeader.IFDOffset, NULL, FILE_BEGIN ) == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // read the tag count for the first ifd
    //
    if (!ReadFile( hFile, (LPVOID) &NumDirEntries, sizeof(WORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // allocate memory for the first ifd's tags
    //
    IfdSize = NumDirEntries * sizeof(TIFF_TAG);
    TiffTags = (PTIFF_TAG) MemAlloc( IfdSize );
    if (!TiffTags) {
        DebugPrintEx( DEBUG_ERR,TEXT("Failed to allolcate memory"));
        goto exit;
    }

    //
    // read the the first ifd's tags
    //

    if (!ReadFile( hFile, (LPVOID) TiffTags, IfdSize, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // read the next pointer
    //
    if (!ReadFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // position the file to the end
    //
    if (SetFilePointer( hFile, 0, NULL, FILE_END ) == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write out the strings
    //
    MsTagCnt = 0;
    //[RB]
    //[RB] Get a filled TIFF_TAG structure for this string tag in MsTags[MsTagCnt].
    //[RB] Write the string to file at the current file location if it does not fit
    //[RB] into TIFF_TAG::DataOffset.
    //[RB]
    if (MsTagInfo->Csid) {
        if (AddStringTag( hFile, MsTagInfo->Csid, TIFFTAG_CSID, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (MsTagInfo->Tsid) {
        if (AddStringTag( hFile, MsTagInfo->Tsid, TIFFTAG_TSID, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (MsTagInfo->Port) {
        if (AddStringTag( hFile, MsTagInfo->Port, TIFFTAG_PORT, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (fSendJob == FALSE)
    {
        // Receive job
        if (MsTagInfo->Routing) {
            if (AddStringTag( hFile, MsTagInfo->Routing, TIFFTAG_ROUTING, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->CallerId) {
            if (AddStringTag( hFile, MsTagInfo->CallerId, TIFFTAG_CALLERID, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }
    }
    else
    {
        // Send job
        if (MsTagInfo->RecipName) {
            if (AddStringTag( hFile, MsTagInfo->RecipName, TIFFTAG_RECIP_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipNumber) {
            if (AddStringTag( hFile, MsTagInfo->RecipNumber, TIFFTAG_RECIP_NUMBER, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCompany) {
            if (AddStringTag( hFile, MsTagInfo->RecipCompany, TIFFTAG_RECIP_COMPANY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipStreet) {
            if (AddStringTag( hFile, MsTagInfo->RecipStreet, TIFFTAG_RECIP_STREET, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCity) {
            if (AddStringTag( hFile, MsTagInfo->RecipCity, TIFFTAG_RECIP_CITY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipState) {
            if (AddStringTag( hFile, MsTagInfo->RecipState, TIFFTAG_RECIP_STATE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipZip) {
            if (AddStringTag( hFile, MsTagInfo->RecipZip, TIFFTAG_RECIP_ZIP, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCountry) {
            if (AddStringTag( hFile, MsTagInfo->RecipCountry, TIFFTAG_RECIP_COUNTRY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipTitle) {
            if (AddStringTag( hFile, MsTagInfo->RecipTitle, TIFFTAG_RECIP_TITLE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipDepartment) {
            if (AddStringTag( hFile, MsTagInfo->RecipDepartment, TIFFTAG_RECIP_DEPARTMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipOfficeLocation) {
            if (AddStringTag( hFile, MsTagInfo->RecipOfficeLocation, TIFFTAG_RECIP_OFFICE_LOCATION, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipHomePhone) {
            if (AddStringTag( hFile, MsTagInfo->RecipHomePhone, TIFFTAG_RECIP_HOME_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipOfficePhone) {
            if (AddStringTag( hFile, MsTagInfo->RecipOfficePhone, TIFFTAG_RECIP_OFFICE_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipEMail) {
            if (AddStringTag( hFile, MsTagInfo->RecipEMail, TIFFTAG_RECIP_EMAIL, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderName) {
            if (AddStringTag( hFile, MsTagInfo->SenderName, TIFFTAG_SENDER_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderNumber) {
            if (AddStringTag( hFile, MsTagInfo->SenderNumber, TIFFTAG_SENDER_NUMBER, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCompany) {
            if (AddStringTag( hFile, MsTagInfo->SenderCompany, TIFFTAG_SENDER_COMPANY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderStreet) {
            if (AddStringTag( hFile, MsTagInfo->SenderStreet, TIFFTAG_SENDER_STREET, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCity) {
            if (AddStringTag( hFile, MsTagInfo->SenderCity, TIFFTAG_SENDER_CITY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderState) {
            if (AddStringTag( hFile, MsTagInfo->SenderState, TIFFTAG_SENDER_STATE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderZip) {
            if (AddStringTag( hFile, MsTagInfo->SenderZip, TIFFTAG_SENDER_ZIP, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCountry) {
            if (AddStringTag( hFile, MsTagInfo->SenderCountry, TIFFTAG_SENDER_COUNTRY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderTitle) {
            if (AddStringTag( hFile, MsTagInfo->SenderTitle, TIFFTAG_SENDER_TITLE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderDepartment) {
            if (AddStringTag( hFile, MsTagInfo->SenderDepartment, TIFFTAG_SENDER_DEPARTMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderOfficeLocation) {
            if (AddStringTag( hFile, MsTagInfo->SenderOfficeLocation, TIFFTAG_SENDER_OFFICE_LOCATION, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderHomePhone) {
            if (AddStringTag( hFile, MsTagInfo->SenderHomePhone, TIFFTAG_SENDER_HOME_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderOfficePhone) {
            if (AddStringTag( hFile, MsTagInfo->SenderOfficePhone, TIFFTAG_SENDER_OFFICE_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderEMail) {
            if (AddStringTag( hFile, MsTagInfo->SenderEMail, TIFFTAG_SENDER_EMAIL, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderBilling) {
            if (AddStringTag( hFile, MsTagInfo->SenderBilling, TIFFTAG_SENDER_BILLING, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderUserName) {
            if (AddStringTag( hFile, MsTagInfo->SenderUserName, TIFFTAG_SENDER_USER_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderTsid) {
            if (AddStringTag( hFile, MsTagInfo->SenderTsid, TIFFTAG_SENDER_TSID, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->Document) {
            if (AddStringTag( hFile, MsTagInfo->Document, TIFFTAG_DOCUMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->Subject) {
            if (AddStringTag( hFile, MsTagInfo->Subject, TIFFTAG_SUBJECT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        // Deal with Retries
        MsTags[MsTagCnt].TagId = TIFFTAG_RETRIES;
        MsTags[MsTagCnt].DataType = TIFF_LONG;
        MsTags[MsTagCnt].DataOffset = MsTagInfo->Retries;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with Priority
        MsTags[MsTagCnt].TagId = TIFFTAG_PRIORITY;
        MsTags[MsTagCnt].DataType = TIFF_LONG;
        MsTags[MsTagCnt].DataOffset = MsTagInfo->Priority;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with Broadcast Id
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->dwlBroadcastId, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_BROADCAST_ID;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 8;

        // Deal with submission Time
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->SubmissionTime, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_FAX_SUBMISSION_TIME;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 8;

        // Deal with Originally scheduled time
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->OriginalScheduledTime, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_FAX_SCHEDULED_TIME;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 8;

    }

    // Deal with Pages
    MsTags[MsTagCnt].TagId = TIFFTAG_PAGES;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->Pages;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Type
    MsTags[MsTagCnt].TagId = TIFFTAG_TYPE;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->Type;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Status
    MsTags[MsTagCnt].TagId = TIFFTAG_STATUS;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->dwStatus;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Extened status
    MsTags[MsTagCnt].TagId = TIFFTAG_EXTENDED_STATUS;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->dwExtendedStatus;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Extened status string
    if (MsTagInfo->lptstrExtendedStatus) {
        if (AddStringTag( hFile, MsTagInfo->lptstrExtendedStatus, TIFFTAG_EXTENDED_STATUS_TEXT, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    // Deal with Fax Times
    MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
        goto exit;
    }
    if (!WriteFile( hFile, (LPVOID) &MsTagInfo->StartTime, 8, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_START_TIME;
    MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
    MsTags[MsTagCnt++].DataCount = 8;

    MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
        goto exit;
    }
    if (!WriteFile( hFile, (LPVOID) &MsTagInfo->EndTime, 8, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_END_TIME;
    MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
    MsTags[MsTagCnt++].DataCount = 8;

    //
    // Deal with fax tif version
    // Add current fax tif version
    //
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_VERSION;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = FAX_TIFF_CURRENT_VERSION;
    MsTags[MsTagCnt++].DataCount = 1;

    //
    // get the current file position - this is used to set the linked list pointer
    //

    NewIFDOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (NewIFDOffset == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write the tag count for the first ifd
    //
    //[RB] write our new IFD to file. The strings have just been written just before the IFD header.
    //[RB] The new IFD includes the tags of the original first IFD followed by the MsTags that we
    //[RB] add.

    NumDirEntries += (WORD) MsTagCnt;
    if (!WriteFile( hFile, (LPVOID) &NumDirEntries, sizeof(WORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // Write the tags in ascending order
    //
    TiffTagsIndex = 0;
    MsTagsIndex = 0;
    dwWrittenTagsNum = 0;
    for (i = 0; i < NumDirEntries; i++)
    {
        if (TiffTags[TiffTagsIndex].TagId >= MsTags[MsTagsIndex].TagId)
        {
            if (!WriteFile( hFile, (LPVOID)&MsTags[MsTagsIndex], (sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }

            if (TiffTags[TiffTagsIndex].TagId == MsTags[MsTagsIndex].TagId)
            {
                TiffTagsIndex++;
                i++;
            }

            MsTagsIndex++;
            dwWrittenTagsNum++;
        }
        else
        {
            //
            // Skip existing MS tags
            // We can find MS tags in upgrade scenario
            //
            if (!IsMSTiffTag (TiffTags[TiffTagsIndex].TagId))
            {
                if (!WriteFile( hFile, (LPVOID)&TiffTags[TiffTagsIndex], (sizeof(TIFF_TAG)), &BytesRead, NULL ))
                {
                    DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                    goto exit;
                }
                ++dwWrittenTagsNum;
            }
            TiffTagsIndex++;
        }

        //
        // Check if we reahced end of on of the tag list
        //
        if (TiffTagsIndex >= (DWORD)NumDirEntries - MsTagCnt)
        {
            if (!WriteFile( hFile, (LPVOID)&MsTags[MsTagsIndex], (MsTagCnt - MsTagsIndex)*(sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }
            dwWrittenTagsNum += MsTagCnt - MsTagsIndex;
            break;
        }


        if (MsTagsIndex >= MsTagCnt)
        {
            if (!WriteFile( hFile, (LPVOID)&TiffTags[TiffTagsIndex], ((DWORD)NumDirEntries - MsTagCnt - TiffTagsIndex)*(sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }
            dwWrittenTagsNum += NumDirEntries - MsTagCnt - TiffTagsIndex;
            break;
        }
    }

    //
    // write the next pointer
    //
    //[RB] NewIFDOffset was taken from the original first IFD.
    //[RB] We make our new IFD point to the IFD that followed the original first IFD.
    if (!WriteFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }


    if(dwWrittenTagsNum != NumDirEntries)
    {
        //
        // The number of the written tags less then the total tags number due to MS skipped tags.
        // Adjust the tags number.
        //
        if (SetFilePointer( hFile, NewIFDOffset, NULL, FILE_BEGIN ) == 0xffffffff) {
            DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
            goto exit;
        }

        if (!WriteFile( hFile, (LPVOID) &dwWrittenTagsNum, sizeof(WORD), &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
    }


    //
    // re-write the tiff header
    //

    //
    // position the file to the beginning
    //

    if (SetFilePointer( hFile, 0, NULL, FILE_BEGIN ) == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write the tiff header
    //
    //[RB] Make the new IFD that we just created into the first IFD by writting
    //[RB] its offset at the header.
    //[RB] This basically cuts off the original first IFD from the link list of IFDs.
    //[RB] It is no longer accessible from the TIFF header.
    TiffHeader.IFDOffset = NewIFDOffset;

    if (!WriteFile( hFile, (LPVOID) &TiffHeader, sizeof(TIFF_HEADER), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }

    rVal = TRUE;

exit:
    MemFree( TiffTags );
    CloseHandle( hFile );
    return rVal;
}

BOOL
PrintTiffFile(
    HDC PrinterDC,
    LPTSTR FileName
)
// This function is used by the client dll (FxsApi.dll) only, to print uncompressed TIFFs to
// our fax printer driver (to file) so they get saved in the proper fax
// format before send to the server for faxing.
//
{
    BOOL                bRes = TRUE;
    TIFF_INFO           TiffInfo;
    HANDLE              hTiff = NULL;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    DWORD               i;
    INT                 HorzRes;
    INT                 VertRes;
    DWORD               VertResFactor = 1;
    PTIFF_TAG           TiffTags = NULL;
    DWORD               XRes = 0;
    DWORD               YRes = 0;
    LPBYTE              Bitmap = NULL;
    INT                 DestWidth;
    INT                 DestHeight;
    FLOAT               ScaleX;
    FLOAT               ScaleY;
    FLOAT               Scale;
    DWORD               LineSize;
    DWORD               dwBitmapSize;

    struct
    {
        BITMAPINFOHEADER bmiHeader;
        RGBQUAD bmiColors[2];
    }
    SrcBitmapInfo =
    {

        {
            sizeof(BITMAPINFOHEADER),                        //  biSize
            0,                                               //  biWidth
            0,                                               //  biHeight
            1,                                               //  biPlanes
            1,                                               //  biBitCount
            BI_RGB,                                          //  biCompression
            0,                                               //  biSizeImage
            7874,                                            //  biXPelsPerMeter     - 200dpi
            7874,                                            //  biYPelsPerMeter
            0,                                               //  biClrUsed
            0,                                               //  biClrImportant
        },
        {
            {
              0,                                             //  rgbBlue
              0,                                             //  rgbGreen
              0,                                             //  rgbRed
              0                                              //  rgbReserved
            },
            {
              255,                                           //  rgbBlue
              255,                                           //  rgbGreen
              255,                                           //  rgbRed
              0                                              //  rgbReserved
            }
        }
    };

    DOCINFO docInfo = {0};
    docInfo.cbSize = sizeof(docInfo);
    docInfo.lpszDocName = FileName;

    if (!(GetDeviceCaps(PrinterDC, RASTERCAPS) & RC_BITBLT))
    {
        //
        // Printer cannot display bitmaps
        //
        bRes = FALSE;
        return bRes;
    }


    //
    // open the tiff file
    //

    hTiff = TiffOpen( FileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (hTiff == NULL)
    {
        bRes = FALSE;
        goto exit;
    }

    TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    if (!TiffInfo.PhotometricInterpretation)
    {
        //
        // white is zero
        //
        SrcBitmapInfo.bmiColors[1].rgbBlue         = 0;
        SrcBitmapInfo.bmiColors[1].rgbGreen        = 0;
        SrcBitmapInfo.bmiColors[1].rgbRed          = 0;
        SrcBitmapInfo.bmiColors[1].rgbReserved     = 0;
        SrcBitmapInfo.bmiColors[0].rgbBlue         = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbGreen        = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbRed          = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbReserved     = 0;
    }

    HorzRes = GetDeviceCaps( PrinterDC, HORZRES );
    VertRes = GetDeviceCaps( PrinterDC, VERTRES );

    for (i=0; i<TiffInfo.PageCount; i++)
    {
        if (!TiffSeekToPage( hTiff, i+1, FILLORDER_MSB2LSB ))
        {
            bRes = FALSE;
            break;
        }

        if (TiffInstance->YResolution < 100)
        {
            SrcBitmapInfo.bmiHeader.biYPelsPerMeter /= 2;
            VertResFactor = 2;
        }
        LineSize = TiffInstance->ImageWidth / 8;
        LineSize += (TiffInstance->ImageWidth % 8) ? 1 : 0;

        dwBitmapSize = TiffInstance->ImageHeight * LineSize;
        Bitmap = (LPBYTE) VirtualAlloc( NULL, dwBitmapSize, MEM_COMMIT, PAGE_READWRITE );
        if(NULL == Bitmap)
        {
            bRes = FALSE;
            break;
        }

        if(!TiffRead(hTiff, Bitmap, 0))
        {
            bRes = FALSE;
            break;
        }
        if(StartPage( PrinterDC ) <= 0)
        {
            bRes = FALSE;
            break;
        }

        ScaleX = (FLOAT) TiffInstance->ImageWidth / (FLOAT) HorzRes;
        ScaleY = ((FLOAT) TiffInstance->ImageHeight * VertResFactor) / (FLOAT) VertRes;
        Scale = ScaleX > ScaleY ? ScaleX : ScaleY;
        DestWidth = (int) ((FLOAT) TiffInstance->ImageWidth / Scale);
        DestHeight = (int) (((FLOAT) TiffInstance->ImageHeight * VertResFactor) / Scale);
        SrcBitmapInfo.bmiHeader.biWidth = TiffInstance->ImageWidth;
        SrcBitmapInfo.bmiHeader.biHeight = -(INT) TiffInstance->ImageHeight;

        if(GDI_ERROR == StretchDIBits(
                                    PrinterDC,
                                    0,
                                    0,
                                    DestWidth,
                                    DestHeight,
                                    0,
                                    0,
                                    TiffInstance->ImageWidth,
                                    TiffInstance->ImageHeight,
                                    Bitmap,
                                    (BITMAPINFO *) &SrcBitmapInfo,
                                    DIB_RGB_COLORS,
                                    SRCCOPY ))
        {
            bRes = FALSE;
            break;
        }

        if(EndPage( PrinterDC ) <= 0)
        {
            bRes = FALSE;
            break;
        }

        if(!VirtualFree( Bitmap, 0, MEM_RELEASE ))
        {
            bRes = FALSE;
            break;
        }
        Bitmap = NULL;
    }


exit:

    if(EndDoc(PrinterDC) <= 0)
    {
        bRes = FALSE;
    }

    if(Bitmap)
    {
        if(!VirtualFree( Bitmap, 0, MEM_RELEASE ))
        {
            bRes = FALSE;
        }
        Bitmap = NULL;
    }

    if (hTiff)
    {
        TiffClose( hTiff );
    }

    return bRes;

}


BOOL
ConvertTiffFileToValidFaxFormat(
    LPTSTR TiffFileName,
    LPTSTR NewFileName,
    LPDWORD Flags
    )
{
    BOOL Rval = FALSE;
    DWORD i;
    TIFF_INFO TiffInfo;
    HANDLE hTiff = NULL;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    PTIFF_INSTANCE_DATA TiffInstanceMmr = NULL;
    LPBYTE Buffer = NULL;
    DWORD BufferSize;
    DWORD ResultSize;
    LPBYTE CompBuffer = NULL;
    FILE_MAPPING fmTemp = {0};
    PTIFF_HEADER TiffHdr;
    LPBYTE p;
    DWORD CurrOffset;
    LPDWORD LastIfdOffset;
    PFAXIFD TiffIfd;
    DWORD CompressionType;
    DWORD G3Options;
    DWORD XResolution;
    DWORD YResolution;
    DWORD PageWidth;
    DWORD PageBytes;
    BOOL ValidFaxTiff;
    PTIFF_TAG TiffTags;
    DWORD IfdOffset;
    WORD NumDirEntries;
    BOOL ProduceUncompressedBits = FALSE;
    DWORD NewFileSize;


    *Flags = 0;

    //
    // open the tiff file
    //

    hTiff = TiffOpen( TiffFileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (hTiff == NULL)
    {
        *Flags |= TIFFCF_NOT_TIFF_FILE;
        goto exit;
    }

    TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    //
    // check to see if the if good
    //

    IfdOffset = TiffInstance->TiffHdr.IFDOffset;
    ValidFaxTiff = TRUE;

    while ( IfdOffset )
    {

        //
        // get the count of tags in this IFD
        //

        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

        //
        // set the tag pointer
        //

        TiffTags = (PTIFF_TAG)(TiffInstance->fPtr + IfdOffset + sizeof(WORD));

        //
        // get the tiff information
        //

        CompressionType = 0;
        G3Options = 0;
        PageWidth = 0;
        XResolution = 0;
        YResolution = 0;

        for (i=0; i<NumDirEntries; i++)
        {
            switch( TiffTags[i].TagId )
            {
                case TIFFTAG_COMPRESSION:
                    CompressionType = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                    break;

                case TIFFTAG_GROUP3OPTIONS:
                    G3Options = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                    break;

                case TIFFTAG_XRESOLUTION:
                    XResolution = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                    break;

                case TIFFTAG_YRESOLUTION:
                    YResolution = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                    break;

                case TIFFTAG_IMAGEWIDTH:
                    PageWidth = GetTagData( TiffInstance->fPtr, 0, &TiffTags[i] );
                    break;
            }
        }

        if (CompressionType == COMPRESSION_NONE)
        {
            *Flags |= TIFFCF_UNCOMPRESSED_BITS;
        } else if (CompressionType == COMPRESSION_CCITTFAX4 && PageWidth == FAXBITS)
        {
            //
            // TIFF files must have the Modified Modified READ (MMR) two-dimensional encoding data compression format.
            // This format is defined by CCITT (The International Telegraph and Telephone Consultative Committee) Group 4.
            //
            ValidFaxTiff = TRUE;
        }
        else
        {
            //
            // unsupported compression type
            // try to use imaging program to print the tiff file,it might understand the compression scheme
            //
            ValidFaxTiff = FALSE;
            *Flags = TIFFCF_NOT_TIFF_FILE;
            goto exit;
        }

        //
        // the resolution check must account for offical Class F tiff
        // documents and pseudo fax documents created by scanners and
        // imaging applications.
        //
        // |-------------|----------|----------|---------|
        // |  scan width |  pels    |  xres    |  yres   |
        // |-------------|----------|----------|---------|
        // |             |          |          |         |
        // |   8.46/215  |  1728    |  204     |  98/196 |
        // |             |          |          |         |
        // |   8.50/216  |  1700    |  200     |  200    |
        // |             |          |          |         |
        // |-------------|----------|----------|---------|
        //

        if (XResolution > 204 || YResolution > 200 || PageWidth > FAXBITS) {
            //
            // the file cannot be converted to valid fax bits
            // so we produce a tiff file that has uncompressed bits
            // the caller can then render the uncompressed bits
            // using the fax print driver to get good fax bits
            //
            ProduceUncompressedBits = TRUE;
            *Flags |= TIFFCF_UNCOMPRESSED_BITS;
            ValidFaxTiff = FALSE;
        }

        //
        // get the next IFD offset
        //

        IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));
    }

    if (ValidFaxTiff) {
        *Flags |= TIFFCF_ORIGINAL_FILE_GOOD;
        Rval = TRUE;
        goto exit;
    }

    PageWidth = max( TiffInstance->ImageWidth, FAXBITS );
    PageBytes = (PageWidth/8)+(PageWidth%8?1:0);

    //
    // open the temporary file to hold the new mmr tiff data
    //

    if (ProduceUncompressedBits) {
        NewFileSize = sizeof(TIFF_HEADER) + (TiffInstance->PageCount * (sizeof(FAXIFD) + (TiffInfo.ImageHeight * PageWidth)));
    } else {
        NewFileSize = GetFileSize( TiffInstance->hFile, NULL );
    }

    if (!MapFileOpen( NewFileName, FALSE, NewFileSize, &fmTemp )) {
        goto exit;
    }

    //
    // allocate a temporary buffer big enough to hold an uncompressed image
    //

    BufferSize = TiffInfo.ImageHeight * PageWidth;

    Buffer = VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!Buffer) {
        goto exit;
    }

    CompBuffer = VirtualAlloc(
        NULL,
        GetFileSize(TiffInstance->hFile,NULL),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!CompBuffer) {
        goto exit;
    }

    //
    // convert the tiff data to mmr
    //

    TiffHdr = (PTIFF_HEADER) fmTemp.fPtr;

    TiffHdr->Identifier = TIFF_LITTLEENDIAN;
    TiffHdr->Version = TIFF_VERSION;
    TiffHdr->IFDOffset = 0;

    p = fmTemp.fPtr + sizeof(TIFF_HEADER);
    CurrOffset = sizeof(TIFF_HEADER);
    LastIfdOffset = (LPDWORD) (p - sizeof(DWORD));

    TiffInstanceMmr = TiffCreate( NULL, TIFF_COMPRESSION_MMR, PageWidth, FILLORDER_MSB2LSB, 1 );
    if (TiffInstanceMmr == NULL) {
        goto exit;
    }

    for (i=0; i<TiffInfo.PageCount; i++) {

        //
        // position the file pointers and read the raw data
        //

        if (!TiffSeekToPage( hTiff, i+1, FILLORDER_MSB2LSB )) {
            goto exit;
        }

        //
        // get the uncompressed bits
        //

        if (!TiffRead( hTiff, Buffer, ProduceUncompressedBits ? 0 : FAXBITS )) {
            goto exit;
        }

        if (ProduceUncompressedBits) {

            ResultSize = PageBytes * TiffInstance->ImageHeight;
            CopyMemory( p, Buffer, ResultSize );

        } else {

            //
            // compress the bits
            //

            TiffInstanceMmr->bitbuf = CompBuffer;
            TiffInstanceMmr->bitcnt = DWORDBITS;
            TiffInstanceMmr->bitdata = 0;
            TiffInstanceMmr->BytesPerLine = PageBytes;

            EncodeFaxPageMmrCompression(
                TiffInstanceMmr,
                Buffer,
                PageWidth,
                TiffInstance->ImageHeight,
                &ResultSize
                );

            CopyMemory( p, CompBuffer, ResultSize );
        }

        CurrOffset += ResultSize;
        p += ResultSize;

        *LastIfdOffset = (DWORD)(p - fmTemp.fPtr);

        //
        // write the ifd
        //

        TiffIfd = (PFAXIFD) p;

        CopyMemory( TiffIfd, &gc_FaxIFDTemplate, sizeof(gc_FaxIFDTemplate) );

        TiffIfd->yresNum                        = TiffInstance->XResolution;
        TiffIfd->xresNum                        = TiffInstance->YResolution;
        TiffIfd->ifd[IFD_PAGENUMBER].value      = MAKELONG( i+1, 0);
        TiffIfd->ifd[IFD_IMAGEWIDTH].value      = PageWidth;
        TiffIfd->ifd[IFD_IMAGEHEIGHT].value     = TiffInstance->ImageHeight;
        TiffIfd->ifd[IFD_ROWSPERSTRIP].value    = TiffInstance->ImageHeight;
        TiffIfd->ifd[IFD_STRIPBYTECOUNTS].value = ResultSize;
        TiffIfd->ifd[IFD_STRIPOFFSETS].value    = CurrOffset - ResultSize;
        TiffIfd->ifd[IFD_XRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, xresNum );
        TiffIfd->ifd[IFD_YRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, yresNum );
        TiffIfd->ifd[IFD_SOFTWARE].value        = CurrOffset + FIELD_OFFSET( FAXIFD, software );
        TiffIfd->ifd[IFD_FILLORDER].value       = FILLORDER_MSB2LSB;
        TiffIfd->ifd[IFD_COMPRESSION].value     = ProduceUncompressedBits ? COMPRESSION_NONE : TIFF_COMPRESSION_MMR;
        TiffIfd->ifd[IFD_G3OPTIONS].value       = ProduceUncompressedBits ? 0 : GROUP3OPT_FILLBITS | GROUP3OPT_2DENCODING;

        //
        // update the page pointers
        //

        LastIfdOffset = (LPDWORD) (p + FIELD_OFFSET(FAXIFD,nextIFDOffset));
        CurrOffset += sizeof(FAXIFD);
        p += sizeof(FAXIFD);
    }

    Rval = TRUE;

exit:
    if (fmTemp.hFile) {
        MapFileClose( &fmTemp, CurrOffset );
    }
    if (hTiff) {
        TiffClose( hTiff );
    }
    if (TiffInstanceMmr) {
        TiffClose( TiffInstanceMmr );
    }
    if (Buffer) {
        VirtualFree( Buffer, 0, MEM_RELEASE);
    }
    if (CompBuffer) {
        VirtualFree( CompBuffer, 0, MEM_RELEASE);
    }

    return Rval;
}

// We use this function when we send a cover page and body.
BOOL
MergeTiffFiles(
    LPCTSTR BaseTiffFile,
    LPCTSTR NewTiffFile
    )
{
    BOOL Rval = TRUE;
    FILE_MAPPING fmBase;
    FILE_MAPPING fmNew;
    LPBYTE p;
    DWORD NextIfdOffset;
    WORD TagCount;
    PTIFF_TAG TiffTag;
    DWORD i;
    DWORD j;
    LPBYTE StripOffsets;
    DWORD DataSize;
    DWORD Delta;
    DWORD Space;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    TIFF_INFO TiffInfo;

    DWORD TiffDataWidth[] = {
        0,  // nothing
        1,  // TIFF_BYTE
        1,  // TIFF_ASCII
        2,  // TIFF_SHORT
        4,  // TIFF_LONG
        8,  // TIFF_RATIONAL
        1,  // TIFF_SBYTE
        1,  // TIFF_UNDEFINED
        2,  // TIFF_SSHORT
        4,  // TIFF_SLONG
        8,  // TIFF_SRATIONAL
        4,  // TIFF_FLOAT
        8   // TIFF_DOUBLE
    };

    // verify that BaseTiffFile is a valid tiff file...
    TiffInstance = TiffOpen( BaseTiffFile, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (TiffInstance == NULL)
    {
        return FALSE;
    }
    if (!TiffClose (TiffInstance))
    {
        //
        // We can still merge the files, but we will have problems to delete it.
        //
        ASSERT_FALSE;
    }

    // verify that NewTiffFile is a valid tiff file...
    TiffInstance = TiffOpen( NewTiffFile, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (TiffInstance == NULL)
    {
        return FALSE;
    }
    if (!TiffClose (TiffInstance))
    {
        //
        // We can still merge the files, but we will have problems to delete it.
        //
        ASSERT_FALSE;
    }

    //
    // open the files
    //

    if (!MapFileOpen( NewTiffFile, TRUE, 0, &fmNew )) {
        return FALSE;
    }

    if (!MapFileOpen( BaseTiffFile, FALSE, fmNew.fSize, &fmBase )) {
        MapFileClose( &fmNew, 0 );
        return FALSE;
    }

    //
    // append the new file to the end of the base file
    //

    p = fmNew.fPtr + sizeof(TIFF_HEADER);
    CopyMemory( fmBase.fPtr+fmBase.fSize, p, fmNew.fSize-sizeof(TIFF_HEADER) );

    //
    // fix up the ifd pointers in the appended tiff data
    //

    Delta = fmBase.fSize - sizeof(TIFF_HEADER);

    NextIfdOffset = ((PTIFF_HEADER)fmNew.fPtr)->IFDOffset;
    while (NextIfdOffset) {
        p = fmBase.fPtr + NextIfdOffset + Delta;
        TagCount = *((LPWORD)p);
        //
        // fixup the data offsets in the tiff tags
        //
        TiffTag = (PTIFF_TAG) (p + sizeof(WORD));
        for (i=0; i<TagCount; i++) {
            DataSize = TiffDataWidth[TiffTag[i].DataType];
            Space = TiffTag[i].DataCount * DataSize;
            if (Space > 4) {
                TiffTag[i].DataOffset += Delta;
            }
            if (TiffTag[i].TagId == TIFFTAG_STRIPOFFSETS) {
                if (Space > 4) {
                    StripOffsets = (LPBYTE) (fmBase.fPtr + TiffTag[i].DataOffset);
                    for (j=0; j<TiffTag[i].DataCount; j++) {
                        if (TiffTag[i].DataType == TIFF_SHORT) {
                            *((LPWORD)StripOffsets) += (WORD)Delta;
                        } else {
                            *((LPDWORD)StripOffsets) += Delta;
                        }
                        StripOffsets += DataSize;
                    }
                } else {
                    if (TiffTag[i].DataCount > 1) {
                        Rval = FALSE;
                        goto exit;
                    }
                    TiffTag[i].DataOffset += Delta;
                }
            }
        }
        p = p + sizeof(WORD) + (TagCount * sizeof(TIFF_TAG));
        NextIfdOffset = *((LPDWORD)p);
        if (NextIfdOffset) {
            *((LPDWORD)p) = NextIfdOffset + Delta;
        }
    }

    //
    // find the last ifd offset in the chain for the base
    // file and change it to point to the first ifd in the
    // data that was appended
    //

    NextIfdOffset = ((PTIFF_HEADER)fmBase.fPtr)->IFDOffset;
    while (NextIfdOffset) {
        p = fmBase.fPtr + NextIfdOffset;
        TagCount = *((LPWORD)p);
        p = p + sizeof(WORD) + (TagCount * sizeof(TIFF_TAG));
        NextIfdOffset = *((LPDWORD)p);
    }

    *((LPDWORD)p) = (DWORD)(Delta + ((PTIFF_HEADER)fmNew.fPtr)->IFDOffset);

exit:
    //
    // close the files
    //

    MapFileClose( &fmBase, fmBase.fSize+fmNew.fSize-sizeof(TIFF_HEADER) );
    MapFileClose( &fmNew, 0 );

    return Rval;
}

BOOL
TiffRecoverGoodPages(
    LPTSTR SrcFileName,
    LPDWORD RecoveredPages,
    LPDWORD TotalPages
    )

/*++

Routine Description:

    Try to recover the good data out of the source and put it into the destination file

Arguments:

    SrcFileName            - source file name
    RecoveredPages         - number of pages we were able to recover
    TotalPages             - total pages in the tiff file

Return Value:

    TRUE for success, FALSE for failure. In case of failure, out params are set to zero.

--*/

{

    TIFF_INFO           TiffInfo;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    BOOL                bSuccess = FALSE;
    BOOL                fCloseTiff;


    if (!SrcFileName || !RecoveredPages || !TotalPages)
    {
        return FALSE;
    }

    *RecoveredPages = 0;
    *TotalPages = 0;

    TiffInstance = (PTIFF_INSTANCE_DATA) TiffOpen(SrcFileName,&TiffInfo,FALSE,FILLORDER_LSB2MSB);

    if (!TiffInstance)
    {
        *TotalPages = 0;
        return FALSE;
    }
    fCloseTiff = TRUE;

    *TotalPages = TiffInfo.PageCount;


    if (TiffInstance->ImageHeight)
    {
        //
        // should be view-able
        //
        bSuccess = TRUE;
        goto exit;
    }

    if (*TotalPages < 1)
    {
        //
        // no data to recover
        //
        goto exit;
    }

    switch (TiffInstance->CompressionType)
    {
        case TIFF_COMPRESSION_MH:

            if (!PostProcessMhToMmr( (HANDLE) TiffInstance, TiffInfo, NULL ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            fCloseTiff = FALSE;
            break;

        case TIFF_COMPRESSION_MR:

            if (!PostProcessMrToMmr( (HANDLE) TiffInstance, TiffInfo, NULL ))
            {
                // beware! PostProcessMrToMmr closes TiffInstance
                return FALSE;
            }
            fCloseTiff = FALSE;
            break;

        case TIFF_COMPRESSION_MMR:
            bSuccess = TRUE;
            break;
        default:
        //
        // unexpected compression type
        //
        DebugPrint((TEXT("TiffRecoverGoodPages: %s: Unexpected Compression type %d\n"),
                   TiffInstance->FileName,
                   TiffInstance->CompressionType));
        goto exit;
    }

    *RecoveredPages = TiffInfo.PageCount;
    *TotalPages    += 1;

    bSuccess = TRUE;

exit:
    if (TRUE == fCloseTiff)
    {
        TiffClose( (HANDLE) TiffInstance );
    }
    return bSuccess;

}


BOOL
PrintRandomDocument(
    LPCTSTR FaxPrinterName,
    LPCTSTR DocName,
    LPTSTR OutputFile
    )

/*++

Routine Description:

    Prints a document that is attached to a message

Arguments:

    FaxPrinterName  - name of the printer to print the attachment on
    DocName         - name of the attachment document

Return Value:

    Print job id or zero for failure.

--*/

{
    SHELLEXECUTEINFO sei;
    TCHAR Args[2 * MAX_PATH];
    TCHAR TempPath[MAX_PATH];
    TCHAR FullPath[MAX_PATH];
    HANDLE hMap = NULL;
    HANDLE hProcessMutex = NULL;
    HANDLE hMutexAttach = NULL;
    HANDLE hEvent[2] = {0}; // EndDocEvent , AbortEvent
    LPTSTR EventName[2] = {0};
    LPTSTR szEndDocEventName = NULL;
    LPTSTR szAbortEventName  = NULL;
    LPDWORD pJobId = NULL;
    BOOL bSuccess = FALSE;
    TCHAR  szExtension[_MAX_EXT] = {0};
    TCHAR szTmpInputFile[_MAX_FNAME] = {0};
    LPTSTR lptstrExtension;
    LPTSTR lptstrEndStr;
    DWORD dwFailedDelete = 0;
    DWORD i;
    DWORD dwWaitRes;
    DWORD dwRes = ERROR_SUCCESS;
#ifdef  UNICODE // No security on created objects for
    SECURITY_ATTRIBUTES *pSA = NULL;
#endif

    DEBUG_FUNCTION_NAME(TEXT("PrintRandomDocument"));

    Assert (FaxPrinterName && DocName && OutputFile);

    //
    // Create the EndDoc and Abort Events names
    //
    szEndDocEventName = (LPTSTR) MemAlloc( SizeOfString(OutputFile) + SizeOfString(FAXXP_ATTACH_END_DOC_EVENT) );
    szAbortEventName  = (LPTSTR) MemAlloc( SizeOfString(OutputFile) + SizeOfString(FAXXP_ATTACH_ABORT_EVENT) );

    if ( !szEndDocEventName || !szAbortEventName )
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("Memory allocation for szEndDocEventName or szAbortEventName failed.\n")
                );

        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    _tcscpy (szEndDocEventName, OutputFile);
    _tcscat (szEndDocEventName, FAXXP_ATTACH_END_DOC_EVENT);
    EventName[0] = _tcsrchr(szEndDocEventName, TEXT('\\'));
    EventName[0] = _tcsinc(EventName[0]);

    _tcscpy (szAbortEventName, OutputFile);
    _tcscat (szAbortEventName, FAXXP_ATTACH_ABORT_EVENT);
    EventName[1] = _tcsrchr(szAbortEventName, TEXT('\\'));
    EventName[1] = _tcsinc(EventName[1]);

    //
    // get the temp path name and use it for the
    // working dir of the launched app
    //
    if (!GetTempPath( sizeof(TempPath)/sizeof(TCHAR), TempPath ))
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetTempPath() failed. (ec: %ld)"),
                GetLastError());
        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    _tsplitpath( DocName, NULL, NULL, NULL, szExtension );
    lptstrExtension =  szExtension;
    if (0 == _tcsncmp(lptstrExtension, TEXT("."), 1))
    {
        lptstrExtension = _tcsinc(lptstrExtension);
    }
    if (0 == GenerateUniqueFileName( TempPath,
                                     lptstrExtension,
                                     FullPath,
                                     sizeof(FullPath) / sizeof(FullPath[0])
                                    ))
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("GenerateUniqueFileName() failed. (ec: %ld)"),
                GetLastError());
        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    if (!CopyFile (DocName, FullPath, FALSE)) // FALSE - File already exist
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CopyFile() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
    _tsplitpath( FullPath, NULL, NULL, szTmpInputFile, NULL );


    //
    // serialize access to this function.
    // this is necessary because we have to
    // control access to the global shared memory region and mutex
    //
    hMutexAttach = OpenMutex(MUTEX_ALL_ACCESS, FALSE, FAXXP_ATTACH_MUTEX_NAME);
    if (!hMutexAttach)
    {
        //
        //  Since mapispooler might be running under a different security context,
        //  we create a security attribute buffer with us as owners (full access)
        //  and MUTEX_ALL_ACCESS rights to authenticated users.
        //
#ifdef  UNICODE // No security on created objects for
        pSA = CreateSecurityAttributesWithThreadAsOwner (MUTEX_ALL_ACCESS);
        if (!pSA)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                    dwRes);
            goto exit;
        }
#endif
        hMutexAttach = CreateMutex(
#ifdef  UNICODE // No security on created objects for
                         pSA,
#else
                         NULL,
#endif
                         TRUE,
                         FAXXP_ATTACH_MUTEX_NAME
                        );

        if (!hMutexAttach)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateMutex() failed. (ec: %ld)"),
                dwRes);
#ifdef  UNICODE // No security on created objects for
            DestroySecurityAttributes (pSA);
#endif
            goto exit;
        }
#ifdef  UNICODE // No security on created objects for
        DestroySecurityAttributes (pSA);
#endif
    }
    else
    {
        dwWaitRes = WaitForSingleObject( hMutexAttach, 1000 * 60 * 5);

        if (WAIT_FAILED == dwWaitRes)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("WaitForSingleObject() failed, (LastErorr: %ld)"),
                dwRes);
            CloseHandle( hMutexAttach );
            hMutexAttach = NULL;
            goto exit;
        }

        if (WAIT_TIMEOUT == dwWaitRes)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("WaitForSingleObject failed on timeout"));
            dwRes = WAIT_TIMEOUT;
            CloseHandle( hMutexAttach );
            hMutexAttach = NULL;
            goto exit;
        }

        if (WAIT_ABANDONED == dwWaitRes)
        {
            //
            // Just debug print and continue
            //
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("WaitForSingleObject() returned WAIT_ABANDONED"));
        }
    }

    //
    // Create EndDocEvent and AbortEvent so the printer driver can signal the printing process is terminated.
    // Create a security attribute with us as owners and all authenticated uses get EVENT_MODIFY_STATE rights.
    //
#ifdef  UNICODE // No security on created objects for
    pSA = CreateSecurityAttributesWithThreadAsOwner (EVENT_MODIFY_STATE);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif
    for (i = 0; i < 2; i++)
    {
        if (!hEvent[i])
        {
            hEvent[i] = CreateEvent(
#ifdef  UNICODE // No security on created objects for
                                    pSA,
#else
                                    NULL,
#endif
                                    FALSE,
                                    FALSE,
                                    EventName[i]
                                    );

            if (!hEvent[i])
            {
                dwRes = GetLastError ();
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateEvent() failed. (ec: %ld)"),
                    dwRes);
#ifdef  UNICODE // No security on created objects for
                DestroySecurityAttributes (pSA);
#endif
                goto exit;
            }
        }
    }
#ifdef  UNICODE // No security on created objects for
    DestroySecurityAttributes (pSA);
#endif
    //
    // note that this is serialized using mutex.
    // we can only have one application setting this at a time or
    // we'll stomp on ourselves.
    //
    if (!SetEnvironmentVariable( FAX_ENVVAR_PRINT_FILE, OutputFile ))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetEnvironmentVariable() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }
    //
    // Create a security attribute with us as owners and all authenticated uses get FILE_MAP_READ rights.
    //
#ifdef  UNICODE // No security on created objects for
    pSA = CreateSecurityAttributesWithThreadAsOwner (FILE_MAP_READ);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif
    hMap = CreateFileMapping(
        INVALID_HANDLE_VALUE,
#ifdef  UNICODE // No security on created objects for
        pSA,
#else
        NULL,
#endif
        PAGE_READWRITE | SEC_COMMIT,
        0,
        4096,
        FAXXP_MEM_NAME
        );
    if (!hMap)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateFileMapping() failed. (ec: %ld)"),
            dwRes);
#ifdef  UNICODE // No security on created objects for
        DestroySecurityAttributes (pSA);
#endif
        goto exit;
    }
#ifdef  UNICODE // No security on created objects for
    DestroySecurityAttributes (pSA);
#endif
    pJobId = (LPDWORD) MapViewOfFile(
        hMap,
        FILE_MAP_WRITE,
        0,
        0,
        0
        );
    if (!pJobId)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("MapViewOfFile() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }


    _tcscpy((LPTSTR) pJobId, OutputFile);
    lptstrEndStr = _tcschr((LPTSTR) pJobId, TEXT('\0'));
    lptstrEndStr = _tcsinc(lptstrEndStr);
    _tcscpy(lptstrEndStr, szTmpInputFile);

    //
    // set the arguments to the app.
    // these arguments are either passed on
    // the command line with the /pt switch or
    // use as variables for substitution in the
    // ddeexec value in the registry.
    //
    // the values are as follows:
    //      %1 = file name
    //      %2 = printer name
    //      %3 = driver name
    //      %4 = port name
    //
    // the first argument does not need to be
    // supplied in the args array because it is implied,
    // shellexecuteex gets it from the lpFile field.
    // arguments 3 & 4 are left blank because they
    // are win31 artifacts that are not necessary
    // any more.  each argument must be enclosed
    // in double quotes.
    //

    wsprintf( Args, _T("\"%s\""), FaxPrinterName );

    //
    // fill in the SHELLEXECUTEINFO structure
    //

    sei.cbSize       = sizeof(sei);
    sei.fMask        = SEE_MASK_FLAG_NO_UI | SEE_MASK_FLAG_DDEWAIT;
    sei.hwnd         = NULL;
    sei.lpVerb       = _T("printto");
    sei.lpFile       = FullPath;
    sei.lpParameters = Args;
    sei.lpDirectory  = TempPath;
    sei.nShow        = SW_SHOWMINNOACTIVE;
    sei.hInstApp     = NULL;
    sei.lpIDList     = NULL;
    sei.lpClass      = NULL;
    sei.hkeyClass    = NULL;
    sei.dwHotKey     = 0;
    sei.hIcon        = NULL;
    sei.hProcess     = NULL;

    //
    // create the named mutex for the print driver.
    // this is initially unclaimed, and is claimed by the first instance
    // of the print driver invoked after this. We do this last in order to
    // avoid a situation where we catch the incorrect instance of the print driver
    // printing
    //

    //
    // Create a security attribute with us as owners and all authenticated uses get MUTEX_ALL_ACCESS rights.
    //
#ifdef  UNICODE // No security on created objects for
    pSA = CreateSecurityAttributesWithThreadAsOwner (MUTEX_ALL_ACCESS);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif

    hProcessMutex = CreateMutex(
#ifdef  UNICODE // No security on created objects for
                                 pSA,
#else
                                 NULL,
#endif
                                 FALSE,
                                 FAXXP_MEM_MUTEX_NAME
                               );
    if (!hProcessMutex)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateMutex() failed. (ec: %ld)"),
            dwRes);
#ifdef  UNICODE // No security on created objects for
        DestroySecurityAttributes (pSA);
#endif
        goto exit;
    }
#ifdef  UNICODE // No security on created objects for
    DestroySecurityAttributes (pSA);
#endif

    //
    // launch the app
    //

    if (!ShellExecuteEx( &sei ))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ShellExecuteEx() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }

    //
    // wait for the app to finish printing
    //
    dwWaitRes = WaitForMultipleObjects(2,               // number of handles in array
                                       hEvent,          // object-handle array
                                       FALSE,           // wait option
                                       1000 * 60 * 5    // time-out interval
                                       );

    if (WAIT_FAILED == dwWaitRes)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("WaitForMultipleObjects() failed, (LastErorr: %ld)"),
            dwRes);
        goto exit;
    }

    if (WAIT_TIMEOUT == dwWaitRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("WaitForMultipleObjects failed on timeout"));
        dwRes = WAIT_TIMEOUT;
        goto exit;
    }

    if ((dwWaitRes - WAIT_OBJECT_0) == 1)
    {
        //
        // We got the AbortDocEvent
        //
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("AbortDocEvent was set"));
        dwRes = ERROR_REQUEST_ABORTED;
        goto exit;
    }

    Assert ((dwWaitRes - WAIT_OBJECT_0) == 0); // Assert EndDocEvent

    if (!CloseHandle( hProcessMutex ))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("CloseHandle() failed. (ec: %ld)"),
            GetLastError());
    }
    hProcessMutex = NULL;
    bSuccess = TRUE;
    Assert (ERROR_SUCCESS == dwRes);

exit:
    //
    // clean up and leave...
    //
    if (!SetEnvironmentVariable( FAX_ENVVAR_PRINT_FILE, NULL ))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("SetEnvironmentVariable() failed. (ec: %ld)"),
            GetLastError());
    }

    for (i = 0; i < 2; i++)
    {
        if (hEvent[i])
        {
            if (!CloseHandle( hEvent[i] ))
            {
                DebugPrintEx(
                    DEBUG_WRN,
                    TEXT("CloseHandle() failed. (ec: %ld)"),
                    GetLastError());
            }
        }
    }

    if (hProcessMutex)
    {
        if (!CloseHandle( hProcessMutex ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (pJobId)
    {
        if (!UnmapViewOfFile( pJobId ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("UnmapViewOfFile() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (hMap)
    {
        if (!CloseHandle( hMap ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (hMutexAttach)
    {
        if (!ReleaseMutex( hMutexAttach ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("ReleaseMutex() failed. (ec: %ld)"),
                GetLastError());
        }

        if (!CloseHandle( hMutexAttach ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (!bSuccess)
    {
        Assert (ERROR_SUCCESS != dwRes);
        SetLastError(dwRes);
    }

    while (dwFailedDelete < 5 &&
           !DeleteFile (FullPath))
    {
        //
        // Since we are waiting on an event that is set by the driver at EndDoc,
        // the file might still be in use.
        //
        DebugPrintEx(
                DEBUG_WRN,
                TEXT("DeleteFile() failed. (ec: %ld)"),
                GetLastError());
        Sleep ( 1000 * 2 );
        dwFailedDelete++;
    }

    MemFree(szEndDocEventName);
    MemFree(szAbortEventName);

    return bSuccess;
}   // PrintRandomDocument


//*********************************************************************************
//* Name:   MemoryMapTiffFile()
//* Author: Oded Sacher
//* Date:   Nov 8, 1999
//*********************************************************************************
//* DESCRIPTION:
//*     Maps Tiff file to memory.
//*     The caller must close all handles in case of success.
//*
//* PARAMETERS:
//*     [IN ]    LPCTSTR    lpctstrFileName
//*         pointer to file name to be mapped.
//*
//*     [OUT]    LPDWORD    lpdwFileSize
//*         Returns the file size.
//*
//*     [OUT]    LPBYTE*     lppbfPtr
//*         Returns pointer to the memory mapped file.
//*
//*     [OUT]    HANDLE*    phFile
//*         Returns the file handle.
//*
//*     [OUT ]   HANDLE*    phMap
//*         Returns the map handle.
//*
//*     [OUT]    LPDWORD    lpdwIfdOffset
//*         Returns the first IFD offset.
//*
//*
//*
//* RETURN VALUE:
//*     TRUE
//*         If no error occured.
//*     FALSE
//*         If an error occured.
//*********************************************************************************
BOOL MemoryMapTiffFile(
    LPCTSTR                 lpctstrFileName,
    LPDWORD                 lpdwFileSize,
    LPBYTE*                 lppbfPtr,
    HANDLE*                 phFile,
    HANDLE*                 phMap,
    LPDWORD                 lpdwIfdOffset
    )
{
    HANDLE hfile = INVALID_HANDLE_VALUE;
    DWORD ec = ERROR_SUCCESS;
    PTIFF_HEADER  pTiffHdr;
    DEBUG_FUNCTION_NAME(TEXT("MemoryMapTiffFile"));

    *phFile = CreateFile(
        lpctstrFileName,
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        0,
        NULL
        );

    if (*phFile == INVALID_HANDLE_VALUE) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("CreateFile Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    *lpdwFileSize = GetFileSize(*phFile, NULL);
    if (*lpdwFileSize == 0xFFFFFFFF)
    {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("GetFileSize Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    if (*lpdwFileSize < sizeof(TIFF_HEADER))
    {
        ec = ERROR_BAD_FORMAT;
        DebugPrintEx( DEBUG_ERR,
                  TEXT("Invalid Tiff format"),
                  ec);
        goto error_exit;
    }

    *phMap = CreateFileMapping(
        *phFile,
        NULL,
        (PAGE_READONLY | SEC_COMMIT),
        0,
        0,
        NULL
        );
    if (*phMap == NULL) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("CreateFileMapping Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    *lppbfPtr = (LPBYTE)MapViewOfFile(
        *phMap,
        FILE_MAP_READ,
        0,
        0,
        0
        );
    if (*lppbfPtr == NULL) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("MapViewOfFile Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    //
    // read in the TIFF header
    //
    pTiffHdr = (PTIFF_HEADER) *lppbfPtr;

    //
    // validate that the file is really a TIFF file
    //
    if ((pTiffHdr->Identifier != TIFF_LITTLEENDIAN) ||
        (pTiffHdr->Version != TIFF_VERSION)) {
            ec = ERROR_BAD_FORMAT;
            DebugPrintEx( DEBUG_ERR, TEXT("File %s, Invalid TIFF format"), lpctstrFileName);
            goto error_exit;
    }

    *lpdwIfdOffset = pTiffHdr->IFDOffset;
    if (*lpdwIfdOffset > *lpdwFileSize) {
        ec = ERROR_BAD_FORMAT;
        DebugPrintEx( DEBUG_ERR, TEXT("File %s, Invalid TIFF format"), lpctstrFileName);
        goto error_exit;
    }

    Assert (ec == ERROR_SUCCESS);
error_exit:
    if (ec != ERROR_SUCCESS)
    {

        if (*lppbfPtr != NULL)
        {
            if (!UnmapViewOfFile( *lppbfPtr))
            {
                DebugPrintEx( DEBUG_ERR,
                      TEXT("UnMapViewOfFile Failed, error: %d"),
                      GetLastError());
            }
        }

        if (*phMap != NULL)
        {
            CloseHandle( *phMap );
        }

        if (*phFile != INVALID_HANDLE_VALUE)
        {

            CloseHandle( *phFile );
        }

        *lppbfPtr = NULL;
        *phMap = NULL;
        *phFile = INVALID_HANDLE_VALUE;

        SetLastError(ec);
        Assert (FALSE);
        return FALSE;

    }
    return TRUE;
}

LPWSTR
GetMsTagString(
    LPBYTE          RefPointer,
    PTIFF_TAG       pTiffTag
)
{
    Assert (pTiffTag->DataType == TIFF_ASCII);
    if (pTiffTag->DataType != TIFF_ASCII)
    {
        SetLastError (ERROR_BAD_FORMAT);
        return NULL;
    }

    if (pTiffTag->DataCount <= 4)
    {
        return (AnsiStringToUnicodeString( (LPCSTR)&pTiffTag->DataOffset));
    }

    return (AnsiStringToUnicodeString( (LPCSTR)(RefPointer + pTiffTag->DataOffset)));
}

void
FreeMsTagInfo(
    PMS_TAG_INFO pMsTags
)
/*++

Routine name : FreeMsTagInfo

Routine description:

  Free MS_TAG_INFO fields

Arguments:

  pMsTags - [in] pointer to the MS_TAG_INFO structure

Return Value:

    none

--*/
{
    if(!pMsTags)
    {
        Assert (FALSE);
        return;
    }

    MemFree(pMsTags->RecipName);
    MemFree(pMsTags->RecipNumber);
    MemFree(pMsTags->SenderName);
    MemFree(pMsTags->Routing);
    MemFree(pMsTags->CallerId);
    MemFree(pMsTags->Csid);
    MemFree(pMsTags->Tsid);
    MemFree(pMsTags->Port);
    MemFree(pMsTags->RecipCompany);
    MemFree(pMsTags->RecipStreet);
    MemFree(pMsTags->RecipCity);
    MemFree(pMsTags->RecipState);
    MemFree(pMsTags->RecipZip);
    MemFree(pMsTags->RecipCountry);
    MemFree(pMsTags->RecipTitle);
    MemFree(pMsTags->RecipDepartment);
    MemFree(pMsTags->RecipOfficeLocation);
    MemFree(pMsTags->RecipHomePhone);
    MemFree(pMsTags->RecipOfficePhone);
    MemFree(pMsTags->RecipEMail);
    MemFree(pMsTags->SenderNumber);
    MemFree(pMsTags->SenderCompany);
    MemFree(pMsTags->SenderStreet);
    MemFree(pMsTags->SenderCity);
    MemFree(pMsTags->SenderState);
    MemFree(pMsTags->SenderZip);
    MemFree(pMsTags->SenderCountry);
    MemFree(pMsTags->SenderTitle);
    MemFree(pMsTags->SenderDepartment);
    MemFree(pMsTags->SenderOfficeLocation);
    MemFree(pMsTags->SenderHomePhone);
    MemFree(pMsTags->SenderOfficePhone);
    MemFree(pMsTags->SenderEMail);
    MemFree(pMsTags->SenderBilling);
    MemFree(pMsTags->Document);
    MemFree(pMsTags->Subject);
    MemFree(pMsTags->SenderUserName);
    MemFree(pMsTags->SenderTsid);
    MemFree(pMsTags->lptstrExtendedStatus);

    ZeroMemory(pMsTags, sizeof(MS_TAG_INFO));
}

#ifdef UNICODE

DWORD
GetW2kMsTiffTags(
    LPCWSTR      cszFileName,
    PMS_TAG_INFO pMsTags,
    BOOL         bSentArchive
)
/*++

Routine name : GetW2kMsTiffTags

Routine description:

  Fills in MS_TAG_INFO structure with W2K tags values.

  If the file was not created by MS fax ERROR_BAD_FORMAT error is returned.

  If the file has new (BOS/XP) tif tags (so, it has not W2K tags) ERROR_XP_TIF_FILE_FORMAT error is returned.
  In this case MS_TAG_INFO structure is not filled in.

  The caler should free the members of MS_TAG_INFO with MemFree()

Arguments:

    LPCWSTR      cszFileName,    - [in]  full tiff file name
    PMS_TAG_INFO pMsTags,        - [out] pointer to MS_TAG_INFO structure
    BOOL         bSentArchive,   - [in]  TRUE if the file from the sent archive, FALSE if it from receive one

Return Value:

    Standard Win32 error code

--*/
{
    DWORD      dwRes = ERROR_SUCCESS;
    DWORD      dwSize = 0;
    HANDLE     hFile = INVALID_HANDLE_VALUE;
    HANDLE     hMap = NULL;
    LPBYTE     fPtr = NULL;
    DWORD      dwIfdOffset = 0;
    WORD       dwNumDirEntries = 0;
    PTIFF_TAG  pTiffTags = NULL;
    DWORD      dw = 0;

    DEBUG_FUNCTION_NAME(TEXT("GetW2kMsTiffTags()"));

    if (!MemoryMapTiffFile (cszFileName, &dwSize, &fPtr, &hFile, &hMap, &dwIfdOffset))
    {
        dwRes = GetLastError();
        DebugPrintEx( DEBUG_ERR, TEXT("MemoryMapTiffFile Failed, error: %ld"), dwRes);
        goto exit;
    }

    //
    // get the count of tags in this IFD
    //
    dwNumDirEntries = *(LPWORD)(fPtr + dwIfdOffset);
    pTiffTags = (PTIFF_TAG)(fPtr + dwIfdOffset + sizeof(WORD));

    //
    // Check if the file was generated by W2K MS fax
    //
    for (dw = 0; dw < dwNumDirEntries; ++dw)
    {
        switch( pTiffTags[dw].TagId )
        {
            case TIFFTAG_SOFTWARE:
                if(0 != strcmp((LPCSTR)(fPtr + pTiffTags[dw].DataOffset), W2K_FAX_SOFTWARE_TIF_TAG))
                {
                    //
                    // The tiff file was not created by MS fax
                    //
                    dwRes = ERROR_BAD_FORMAT;
                    goto exit;
                }
                break;

            case TIFFTAG_TYPE:
                //
                // The tiff file was created by BOS/XP fax
                // So, it has no W2K tags
                //
                dwRes = ERROR_XP_TIF_FILE_FORMAT;
                goto exit;

            default:
                break;
        }
    }

    //
    // walk the tags and pick out W2K tiff tags
    //
    for (dw = 0; dw < dwNumDirEntries; ++dw)
    {
        switch( pTiffTags[dw].TagId )
        {
            case TIFFTAG_W2K_RECIP_NAME:
                pMsTags->RecipName = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->RecipName)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_RECIP_NUMBER:
                pMsTags->RecipNumber = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->RecipNumber)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_SENDER_NAME:
                pMsTags->SenderName = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->SenderName)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_ROUTING:
                pMsTags->Routing = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->Routing)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_CALLERID:
                pMsTags->CallerId = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->CallerId)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_TSID:
                pMsTags->Tsid = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->Tsid)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_CSID:
                pMsTags->Csid = GetMsTagString( fPtr, &pTiffTags[dw]);
                if(!pMsTags->Csid)
                {
                    dwRes = ERROR_NOT_ENOUGH_MEMORY;
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_FAX_TIME:
                pMsTags->StartTime = *(DWORDLONG*)(fPtr + pTiffTags[dw].DataOffset);
                break;
        }
    }

    //
    // Set the archive type
    //
    pMsTags->Type = bSentArchive ? JT_SEND : JT_RECEIVE;

    //
    // walk the IFD list to count the number of pages
    //
    pMsTags->Pages = 0;
    while ( dwIfdOffset )
    {
        //
        // get the count of tags in this IFD
        //
        dwNumDirEntries = *(LPWORD)(fPtr + dwIfdOffset);
        //
        // get the next IFD offset
        //
        dwIfdOffset = *(UNALIGNED DWORD *)(fPtr + (dwNumDirEntries * sizeof(TIFF_TAG)) + dwIfdOffset + sizeof(WORD));
        if (dwIfdOffset > dwSize)
        {
            dwRes = ERROR_BAD_FORMAT;
            goto exit;
        }
        //
        // increment the page counter
        //
        pMsTags->Pages += 1;
    }

exit:

    if(ERROR_SUCCESS != dwRes)
    {
        FreeMsTagInfo(pMsTags);
    }

    if (fPtr)
    {
        UnmapViewOfFile( fPtr);
    }

    if (hMap)
    {
        CloseHandle( hMap );
    }

    if (hFile != INVALID_HANDLE_VALUE)
    {
        CloseHandle( hFile );
    }

    return dwRes;

} // GetW2kMsTiffTags

#endif // UNICODE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\fasttiff.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    fasttiff.h

Abstract:

    This module defines and exposes Fast TIFF structures.

Author:

    Rafael Lisitsa (RafaelL) 14-Aug-1996

Revision History:

--*/



#define  LINE_LENGTH   1728
#define  MaxColorTransPerLine (LINE_LENGTH + 3)


#define  DO_NOT_TEST_LENGTH  0
#define  DO_TEST_LENGTH      1

//  this makes BLACK_COLOR = 1
#define  WHITE_COLOR   0

#define  EOL_FOUND     99

// makeup/terminate
#define  MAKEUP_CODE      1
#define  TERMINATE_CODE   0

// additional useful codes

#define  MAX_TIFF_MAKEUP        40  // The max make-up code for White and Black is 40*(2^6) = 2560.

#define  ERROR_CODE             50
#define  LOOK_FOR_EOL_CODE      51
#define  EOL_FOUND_CODE         52
#define  NO_MORE_RECORDS        53

#define  ERROR_PREFIX            7
#define  LOOK_FOR_EOL_PREFIX     6
#define  PASS_PREFIX             5
#define  HORIZ_PREFIX            4

#define TIFF_SCAN_SEG_END        1
#define TIFF_SCAN_FAILURE        2
#define TIFF_SCAN_SUCCESS        3

#define MINUS_ONE_DWORD          ( (DWORD) 0xffffffff )
#define MINUS_ONE_BYTE           ( (BYTE) 0xff )


typedef struct {
    char        Tail          :4;
    char        Value         :4;
} PREF_BYTE;






BOOL
FindNextEol(
    LPDWORD     lpdwStartPtr,
    BYTE        dwStartBit,
    LPDWORD     lpdwEndPtr,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    BOOL        fTestlength,
    BOOL       *fError
    );
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\fasttiff.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    fasttiff.c

Abstract:

    This module implements fast MMR/MR/MH encoder/decoder/conversion

Author:

    Rafael Lisitsa (RafaelL) 14-Aug-1996

Revision History:

--*/


#include "tifflibp.h"
#pragma hdrstop

#include "fasttiff.h"


#include "math.h"

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    extern BOOL g_fDebGlobOut;
    extern BOOL g_fDebGlobOutColors;
    extern BOOL g_fDebGlobOutPrefix;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    extern BOOL g_fDebGlobOutS;
#endif


// min code length is 2; max index length is 20
#define  MAX_ENTRIES   10

#define  MAX_CODE_LENGTH 13

#define MIN_EOL_REQUIRED 2

#pragma pack(1)

typedef struct
{
    BYTE        Tail          :4;
    BYTE        TwoColorsSize :4;
} RES_BYTE_LAST;

typedef struct
{
    BYTE        Code          :6;
    BYTE        OneColorSize  :1;
    BYTE        Makeup        :1;
} RES_CODE;


typedef struct
{
    RES_CODE         Record[4];
    RES_BYTE_LAST    Result;
} RES_RECORD;


#pragma pack()

typedef struct
{
    BYTE         ByteRecord[5];
} READ_RECORD;



//
// Read the global (read-only) lookup tables
// from a file.
//
#include "TiffTables.inc"

/*

    I'm keeping the function that builds the tables (now hard-coded in TiffTables.inc) and the function that dumps
    the tables to a file (which created TiffTables.inc) in case there's some need in the future to modify the tables.

void DumpTables ()
{
    int a[1][2] = {{0,0}};
    char sz[MAX_PATH];
    DWORD i;
    DWORD dwBytesWritten;
    HANDLE hFile = CreateFileA ("C:\\tifftables.inc",
                               GENERIC_WRITE,
                               0,
                               NULL,
                               CREATE_NEW,
                               FILE_ATTRIBUTE_NORMAL,
                               NULL);
    if (INVALID_HANDLE_VALUE == hFile)
    {
        return;
    }
    strcpy (sz, "BYTE        gc_GlobTableWhite[32768][5] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32768; i++)
    {
        sprintf (sz, "{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x},\n",
                   gc_GlobTableWhite[i][0],
                   gc_GlobTableWhite[i][1],
                   gc_GlobTableWhite[i][2],
                   gc_GlobTableWhite[i][3],
                   gc_GlobTableWhite[i][4]);
        WriteFile (hFile, sz, strlen (sz) , &dwBytesWritten, NULL);
    }

    strcpy (sz, "BYTE        GlobTableBlack[32768][5] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32768; i++)
    {
        sprintf (sz, "{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x},\n",
                   GlobTableBlack[i][0],
                   GlobTableBlack[i][1],
                   GlobTableBlack[i][2],
                   GlobTableBlack[i][3],
                   GlobTableBlack[i][4]);
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }

    strcpy (sz, "BYTE        gc_AlignEolTable[32] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32; i++)
    {
        sprintf (sz, "0x%02x,\n", gc_AlignEolTable[i]);
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }

    strcpy (sz, "PREF_BYTE   gc_PrefTable[128] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 128; i++)
    {
        sprintf (sz, "{0x%d, 0x%d},\n", (gc_PrefTable[i].Tail), (gc_PrefTable[i].Value));
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }
    CloseHandle (hFile);
}

void
BuildLookupTables(
    DWORD TableLength
    )
{


    PDECODE_TREE   Tree;
    DWORD          CurrentOffsetStart, CurrentOffsetEnd;
    DWORD          CodeLength;


    DWORD          TotalWhiteErrorCodes=0;
    DWORD          TotalWhiteGood=0;
    DWORD          TotalWhiteGoodNoEnd=0;
    DWORD          TotalWhiteGoodPosEOL=0;


    DWORD          TotalBlackErrorCodes=0;
    DWORD          TotalBlackGood=0;
    DWORD          TotalBlackGoodNoEnd=0;
    DWORD          TotalBlackGoodPosEOL=0;


    DWORD          TotalEntries[2][MAX_ENTRIES];

    DWORD          CurrentEntries;



    typedef struct _ENTRY {
        DWORD       Color;
        DWORD       CodeLength;
        DWORD       RunLength;
    } ENTRY;

    ENTRY          Entry[MAX_ENTRIES];

    RES_RECORD     *pRes_Record;
    RES_RECORD     *ResTableWhite = (RES_RECORD *) gc_GlobTableWhite;
    RES_RECORD     *ResTableBlack = (RES_RECORD *) GlobTableBlack;

    DWORD          i, j;
    DWORD          delta;




    DWORD          N, N0;
    DWORD          Color;
    INT            code;

    DWORD          TableSize;
    BYTE           Color1Change;
    BYTE           Color2Change;

    WORD           w1, w2, w3;
    BYTE           b1, b2;



    // build gc_PrefTable

    gc_PrefTable[Prime(0)].Value = LOOK_FOR_EOL_PREFIX;
    gc_PrefTable[Prime(0)].Tail  = 0;
    gc_PrefTable[Prime(1)].Value = ERROR_PREFIX;
    gc_PrefTable[Prime(1)].Tail  = 0;

    gc_PrefTable[Prime(2)].Value = -3;
    gc_PrefTable[Prime(2)].Tail  = 7;
    gc_PrefTable[Prime(3)].Value = 3;
    gc_PrefTable[Prime(3)].Tail  = 7;

    gc_PrefTable[Prime(4)].Value = -2;
    gc_PrefTable[Prime(4)].Tail  = 6;
    gc_PrefTable[Prime(5)].Value = -2;
    gc_PrefTable[Prime(5)].Tail  = 6;

    gc_PrefTable[Prime(6)].Value = 2;
    gc_PrefTable[Prime(6)].Tail  = 6;
    gc_PrefTable[Prime(7)].Value = 2;
    gc_PrefTable[Prime(7)].Tail  = 6;

    for (i=8; i<=15; i++) {
        gc_PrefTable[Prime(i)].Value = PASS_PREFIX;
        gc_PrefTable[Prime(i)].Tail  = 4;
    }

    for (i=16; i<=31; i++) {
        gc_PrefTable[Prime(i)].Value = HORIZ_PREFIX;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=32; i<=47; i++) {
        gc_PrefTable[Prime(i)].Value = -1;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=48; i<=63; i++) {
        gc_PrefTable[Prime(i)].Value = 1;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=64; i<=127; i++) {
        gc_PrefTable[Prime(i)].Value = 0;
        gc_PrefTable[Prime(i)].Tail  = 1;
    }


    // Build Align EOL Table

    for (i=0; i<=4; i++) {
        gc_AlignEolTable[i] = 15;
    }

    for (i=5; i<=12; i++) {
        gc_AlignEolTable[i] = 23;
    }

    for (i=13; i<=20; i++) {
        gc_AlignEolTable[i] = 31;
    }

    for (i=21; i<=28; i++) {
        gc_AlignEolTable[i] = 7;
    }

    for (i=29; i<=31; i++) {
        gc_AlignEolTable[i] = 15;
    }




    // build MH tables


    TableSize = (DWORD) (1<<TableLength);


    for (i=0; i<2; i++) {
        for (j=0; j<MAX_ENTRIES; j++ ) {
            TotalEntries[i][j]=0;
        }
    }

    delta = sizeof(N)*8 - TableLength;


    for (N0=0; N0 < TableSize; N0++)  {

        CurrentEntries = 0;
        Color = WHITE_COLOR;
        N = N0;
        code = 0;

        // endians... 15 bits -> 7+8

        w1 = (WORD) N0;
        b1 = (BYTE) w1;
        b2 = (BYTE) (w1>>8);
        b1 = BitReverseTable[b1];
        b2 = BitReverseTable[b2];
        w2 = ((WORD) b1 ) << 8;
        w3 = (WORD) b2;

        w1 = w3 + w2;
        w1 >>= 1;
        w1 &= 0x7fff;

        pRes_Record = &(ResTableWhite[w1]);

        N <<= delta;

        Tree = WhiteDecodeTree;
        CurrentOffsetStart = 0;
        CurrentOffsetEnd = 0;
        CodeLength = 0;
        Color1Change = 0;
        Color2Change = 0;

        for (j=0; j<TableLength; j++,N<<=1) {

            code = (N & 0x80000000)  ? Tree[code].Right : Tree[code].Left;

            CodeLength++;
            CurrentOffsetEnd++;

            if (CurrentOffsetEnd > TableLength) {
                break;
            }

            if (CodeLength > MAX_CODE_LENGTH) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                TotalWhiteErrorCodes++;
                goto lDoBlack;
            }

            if (code < 1) {

                code = (-code);


                Entry[CurrentEntries].Color = Color;
                Entry[CurrentEntries].CodeLength = CodeLength;
                Entry[CurrentEntries].RunLength = code;

                if (code < 64) {
                    //
                    // terminating code
                    //
                    pRes_Record->Record[CurrentEntries].Makeup = TERMINATE_CODE;
                    pRes_Record->Record[CurrentEntries].Code = (BYTE)code;

                    if (Color1Change) {
                        if (!Color2Change) {
                            Color2Change =  (BYTE) CurrentOffsetEnd;
                        }
                    }
                    else {
                        Color1Change = (BYTE) CurrentOffsetEnd;
                    }

                    Color = 1 - Color;
                    Tree = Color ? BlackDecodeTree : WhiteDecodeTree;
                }
                else {
                    pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                    pRes_Record->Record[CurrentEntries].Code = code >> 6;
                }

                code = 0;
                CodeLength = 0;
                CurrentOffsetStart = CurrentOffsetEnd;

                CurrentEntries++;
                if (CurrentEntries >= 4) {
                    goto lDoBlack;
                }

            }


            if (code == BADRUN) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;
                TotalWhiteErrorCodes++;

                goto lDoBlack;
            }


            if (code == DECODEEOL) {                                          // means if any valid ==> must be EOL
                if (TableLength - CurrentOffsetStart < 12) {
                    if (N != 0)  {
                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                        TotalWhiteErrorCodes++;

                        goto lDoBlack;
                    }
                    else {
                        // should return EOL_AHEAD
                        TotalWhiteGoodPosEOL++;
                        TotalWhiteGood++;
                        TotalEntries[0][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoBlack;
                    }
                }
                else {
                    if (N == 0)  {
                        // should return EOL_AHEAD. Must be FILLER - any length.
                        TotalWhiteGoodPosEOL++;
                        TotalWhiteGood++;
                        TotalEntries[0][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoBlack;
                    }
                    else {
                        while (1) {
                            N <<= 1;
                            CurrentOffsetEnd++;
                            if (N & 0x80000000) {
                                Entry[CurrentEntries].Color = Color;
                                Entry[CurrentEntries].CodeLength = CurrentOffsetEnd - CurrentOffsetStart;
                                Entry[CurrentEntries].RunLength = EOL_FOUND;

                                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                                pRes_Record->Record[CurrentEntries].Code   = EOL_FOUND_CODE;

                                Color = WHITE_COLOR;
                                Tree = WhiteDecodeTree;

                                code = 0;
                                CodeLength = 0;
                                CurrentOffsetStart = CurrentOffsetEnd;

                                CurrentEntries++;
                                if (CurrentEntries >= 4) {
                                    goto lDoBlack;
                                }

                                break;
                            }
                        }
                    }
                }
            }
        }

        if (CurrentEntries < 4) {
            pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
            pRes_Record->Record[CurrentEntries].Code   = NO_MORE_RECORDS;
        }

        TotalWhiteGood++;
        TotalEntries[0][CurrentEntries]++;


lDoBlack:

        // finish the White tails

        pRes_Record->Result.Tail = (BYTE) (CurrentOffsetStart);
        pRes_Record->Result.TwoColorsSize = Color2Change;

        pRes_Record->Record[0].OneColorSize = (Color1Change&0x08) ? 1:0 ;
        pRes_Record->Record[1].OneColorSize = (Color1Change&0x04) ? 1:0 ;
        pRes_Record->Record[2].OneColorSize = (Color1Change&0x02) ? 1:0 ;
        pRes_Record->Record[3].OneColorSize = (Color1Change&0x01) ? 1:0 ;




        // blacks


        CurrentEntries = 0;
        Color = 1 - WHITE_COLOR;
        N = N0;
        code = 0;

        pRes_Record = &(ResTableBlack[w1]);

        N <<= delta;

        Tree = BlackDecodeTree;
        CurrentOffsetStart = 0;
        CurrentOffsetEnd = 0;
        CodeLength = 0;
        Color1Change = 0;
        Color2Change = 0;

        for (j=0; j<TableLength; j++,N<<=1) {

            code = (N & 0x80000000)  ? Tree[code].Right : Tree[code].Left;

            CodeLength++;
            CurrentOffsetEnd++;

            if (CurrentOffsetEnd > TableLength) {
                break;
            }

            if (CodeLength > MAX_CODE_LENGTH) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                TotalBlackErrorCodes++;
                goto lDoLoop;
            }

            if (code < 1) {

                code = (-code);

                Entry[CurrentEntries].Color = Color;
                Entry[CurrentEntries].CodeLength = CodeLength;
                Entry[CurrentEntries].RunLength = code;

                if (code < 64) {
                    //
                    // terminating code
                    //
                    pRes_Record->Record[CurrentEntries].Makeup = TERMINATE_CODE;
                    pRes_Record->Record[CurrentEntries].Code = (BYTE)code;

                    if (Color1Change) {
                        if (!Color2Change) {
                            Color2Change = (BYTE) CurrentOffsetEnd;
                        }
                    }
                    else {
                        Color1Change = (BYTE) CurrentOffsetEnd;
                    }

                    Color = 1 - Color;
                    Tree = Color ? BlackDecodeTree : WhiteDecodeTree;
                }
                else {
                    pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                    pRes_Record->Record[CurrentEntries].Code = code >> 6;
                }

                code = 0;
                CodeLength = 0;
                CurrentOffsetStart = CurrentOffsetEnd;

                CurrentEntries++;
                if (CurrentEntries >= 4) {
                    goto lDoLoop;
                }

            }


            if (code == BADRUN) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;
                TotalBlackErrorCodes++;

                goto lDoLoop;
            }


            if (code == DECODEEOL) {                                          // means if any valid ==> must be EOL
                if (TableLength - CurrentOffsetStart < 12) {
                    if (N != 0)  {
                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                        TotalBlackErrorCodes++;

                        goto lDoLoop;
                    }
                    else {
                        // should return EOL_AHEAD
                        TotalBlackGoodPosEOL++;
                        TotalBlackGood++;
                        TotalEntries[1][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoLoop;
                    }
                }
                else {
                    if (N == 0)  {
                        // should return EOL_AHEAD. Must be FILLER - any length.
                        TotalBlackGoodPosEOL++;
                        TotalBlackGood++;
                        TotalEntries[1][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoLoop;
                    }
                    else {
                        while (1) {
                            N <<= 1;
                            CurrentOffsetEnd++;
                            if (N & 0x80000000) {
                                Entry[CurrentEntries].Color = Color;
                                Entry[CurrentEntries].CodeLength = CurrentOffsetEnd - CurrentOffsetStart;
                                Entry[CurrentEntries].RunLength = EOL_FOUND;

                                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                                pRes_Record->Record[CurrentEntries].Code   = EOL_FOUND_CODE;

                                Color = WHITE_COLOR;
                                Tree = WhiteDecodeTree;

                                code = 0;
                                CodeLength = 0;
                                CurrentOffsetStart = CurrentOffsetEnd;

                                CurrentEntries++;
                                if (CurrentEntries >= 4) {
                                    goto lDoLoop;
                                }

                                break;
                            }
                        }
                    }
                }
            }
        }


        if (CurrentEntries < 4) {
            pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
            pRes_Record->Record[CurrentEntries].Code   = NO_MORE_RECORDS;
        }

        TotalBlackGood++;
        TotalEntries[1][CurrentEntries]++;


lDoLoop:

        pRes_Record->Result.Tail = (BYTE) (CurrentOffsetStart);

        pRes_Record->Result.TwoColorsSize = Color2Change;

        pRes_Record->Record[0].OneColorSize = (Color1Change&0x08) ? 1:0 ;
        pRes_Record->Record[1].OneColorSize = (Color1Change&0x04) ? 1:0 ;
        pRes_Record->Record[2].OneColorSize = (Color1Change&0x02) ? 1:0 ;
        pRes_Record->Record[3].OneColorSize = (Color1Change&0x01) ? 1:0 ;

    }


}

*/

WORD Prime(DWORD i)
{
    BYTE  b1 = (BYTE) i;
    BYTE  b2;
    WORD  w1;

    b2 = BitReverseTable[b1];
    b1 = (b2 >> 1)  & 0x7f;

    w1 = (WORD) b1;
    return (w1);
}

BOOL
DecodeMrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    DWORD               ConsecBadLines=0;

    DWORD               AllowedBadFaxLines=5;
    DWORD               AllowedConsecBadLines=5;


    BOOL                LastLineBad;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    BYTE                Num2DLines;
    BYTE                Count2D;
    BOOL                f1D;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;
    BOOL                fTestLength;
    BOOL                fError;

    DEBUG_FUNCTION_NAME(TEXT("DecodeMrPage"));

    if (HiRes)
    {
        Num2DLines = 3;
    }
    else
    {
        Num2DLines = 1;
    }

    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;

    t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    BadFaxLines = 0;
    LastLineBad = FALSE;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    fTestLength = DO_NOT_TEST_LENGTH;

    //
    // find first EOL
    //

    Count2D = 0;
    f1D = 1;

    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;

    // EOL-loop
    do
    {

lFindNextEOL:

        if (! FindNextEol (lpdwResPtr, ResBit, EndPtr, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            return FALSE;
        }

        if ( (fTestLength == DO_TEST_LENGTH) && fError )
        {
            BadFaxLines++;
            if (LastLineBad)
            {
                ConsecBadLines++;
            }

            if (BadFaxLines > AllowedBadFaxLines ||
                ConsecBadLines > AllowedConsecBadLines)
            {
                    return FALSE;
            }
        }


lAfterEOL:

#ifdef RDEBUG
        _tprintf( TEXT ("\n After EOL RIndex=%d dwResPtr=%lx bit=%d Ref= \n "), RIndex, lpdwResPtr, ResBit);
        for (i=0; i<RIndex; i++)
        {
            _tprintf( TEXT ("%d, "), *(pRefLine+i) );
        }
#endif

        if (f1D)
        {
#ifdef RDEBUG
            _tprintf( TEXT (" Start 1D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

            if (! ( (*lpdwResPtr) & (0x00000001 << ResBit ) ) )
            {
#ifdef RDEBUG
                _tprintf( TEXT ("\n ERROR f1D dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif

                BadFaxLines++;
                if (LastLineBad)
                {
                    ConsecBadLines++;
                }

                if (BadFaxLines > AllowedBadFaxLines ||
                    ConsecBadLines > AllowedConsecBadLines)
                {
                        return FALSE;
                }

                ResBit++;
                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }

                fTestLength = DO_NOT_TEST_LENGTH;
                goto lFindNextEOL;
            }

            // decode 1D line starting ResBit+1

            ResBit++;
            if (ResBit > 31)
            {
                lpdwResPtr++;
                ResBit -= 32;
            }

            RIndex = 0;
            RunLength = 0;

            Table = TableWhite;
            Color = WHITE_COLOR;

            if (EndPtr - lpdwResPtr < 2)
            {
                return FALSE;
            }


            // 1-D Table look-up loop
            do
            {

                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT <= MAX_TIFF_MAKEUP)
                        {
                            RunLength += (CodeT << 6);
                            EolCount=0;
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndex1D;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)
                        {
                            // end of our line AHEAD
                            if (RunLength == lineWidth)
                            {
                                EolCount = 0;
                                f1D = 0;
                                Count2D = 0;

                                fTestLength = DO_TEST_LENGTH;
                                TailT = *pByteTail & 0x0f;

                                ResBit += TailT;

                                if (ResBit > 31)
                                {
                                        lpdwResPtr++;
                                        ResBit -= 32;
                                }

                                goto lFindNextEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D RunLength"),
                                    RunLength);

                                BadFaxLines++;
                                if (LastLineBad)
                                {
                                    ConsecBadLines++;
                                }

                                if (BadFaxLines > AllowedBadFaxLines ||
                                    ConsecBadLines > AllowedConsecBadLines)
                                {
                                        return FALSE;
                                }

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;

                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;

                                if (EolCount >= 5)
                                {
                                    t1 = GetTickCount();
                                    tdelta = t1 - t0;
                                    return (TRUE);
                                }

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_TEST_LENGTH;
                                TailT = *pByteTail & 0x0f;

                                ResBit += TailT;

                                if (ResBit > 31)
                                {
                                        lpdwResPtr++;
                                        ResBit -= 32;
                                }

                                goto lFindNextEOL;
                            }
                        }

                        else if (CodeT == EOL_FOUND_CODE)
                        {
#ifdef RDEBUG
                            _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

                            ResBit +=  (*pByteTail & 0x0f);
                            if (ResBit > 31)
                            {
                                    lpdwResPtr++;
                                    ResBit -= 32;
                            }

                            if (RunLength == lineWidth)
                            {
                                EolCount = 0;
                                f1D = 0;
                                Count2D = 0;

                                goto lAfterEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D RunLength EOLFOUND"));

                                BadFaxLines++;
                                if (LastLineBad)
                                {
                                    ConsecBadLines++;
                                }

                                if (BadFaxLines > AllowedBadFaxLines ||
                                    ConsecBadLines > AllowedConsecBadLines)
                                {
                                        return FALSE;
                                }

                                f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;

                                if (EolCount >= 5)
                                {
                                    t1 = GetTickCount();
                                    tdelta = t1 - t0;
                                    return (TRUE);
                                }

                                f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }

                        }

                        else if (CodeT == ERROR_CODE)
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR CODE 1D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            BadFaxLines++;
                            if (LastLineBad)
                            {
                                ConsecBadLines++;
                            }

                            if (BadFaxLines > AllowedBadFaxLines ||
                                ConsecBadLines > AllowedConsecBadLines)
                            {
                                    return FALSE;
                            }

                            f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        else
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR WRONG code: index=%04x"),
                                dwIndex);
                            return FALSE;
                        }
                    }

                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;
                        *(pRefLine + (RIndex++)) = RunLength;

                        if (RIndex >= MaxColorTransPerLine )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR 1D TOO MANY COLORS dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);

                            BadFaxLines++;
                            if (LastLineBad)
                            {
                                ConsecBadLines++;
                            }

                            if (BadFaxLines > AllowedBadFaxLines ||
                                ConsecBadLines > AllowedConsecBadLines)
                            {
                                    return FALSE;
                            }

                            f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }

                    pByteTable++;

                 }



lNextIndex1D:
                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }
            }
            while (lpdwResPtr <= EndPtr);
            return FALSE;
        }

        // should be 2D

#ifdef RDEBUG
        _tprintf( TEXT ("\n Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

        if ( (*lpdwResPtr) & (0x00000001 << ResBit) )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ERROR Start 2D dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);

            BadFaxLines++;
            if (LastLineBad)
            {
                ConsecBadLines++;
            }

            if (BadFaxLines > AllowedBadFaxLines ||
                ConsecBadLines > AllowedConsecBadLines)
            {
                return FALSE;
            }

            f1D =  1;
            Count2D = 0;
            goto lAfterEOL;
        }


        // 2D line decode loop
        a0        = 0;
        CIndex    = 0;
        CColor    = 0;
        RunLength = 0;

        RIndex    = 0;
        RValue    = *(pRefLine + RIndex);
        RColor    = 0;

        //BUGBUG incorporate with the next Index calc. to save time

        if (++ResBit > 31)
        {
            lpdwResPtr++;
            ResBit -= 32;
        }

        // prefix loop
        do
        {
            if (ResBit <= 25 )
            {
                dwIndex = (*lpdwResPtr) >> ResBit;
            }
            else
            {
                dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
            }

            dwIndex &= 0x0000007f;

            pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);

            // work-around of a PPC compiler bug: incorrect CMP with signed char. NT 1381. 8/31/96. RafaelL
            iCode = ( (short) ((char) (*pByteTable)) ) >> 4;

            bShift = (*pByteTable) & 0x0f;

            if (iCode < 4)
            {
                // VERTICAL -3...+3
#ifdef RDEBUG
                _tprintf( TEXT (" V%2d "), iCode );
#endif

                if ( (RunLength >= RValue) && (RunLength != 0) )
                {
                    while (++RIndex < MaxColorTransPerLine)
                    {
                        if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                        {
                            // BUGBUG will change to break; after debugging
                            goto lFound;
                        }
                    }
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                        RIndex,
                        RValue,
                        RunLength);

                    return FALSE;
lFound:
                    RColor = RIndex & 1;
                }

                if (CColor == RColor)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    if (RValue == LINE_LENGTH)
                    {
                        a0 = RValue + iCode;
                    }
                    else
                    {
                        a0 = *(pRefLine + RIndex + 1) + iCode;
                        //RColor = 1 - RColor;
                        //a0 = RValue + iCode;
                    }
                }

                *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
                if (CColor)
                {
                    _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
#endif
                RunLength = a0;
                CColor = 1 - CColor;

            }

            else if (iCode == HORIZ_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" H ") );
#endif

                ResBit += bShift;
                if (ResBit > 31)
                {
                    ResBit -= 32;
                    lpdwResPtr++;
                }


                Table = CColor ? TableBlack : TableWhite;
                Color = CColor;
                CountHoriz = 0;
                fFirstResult = 1;

                if (EndPtr - lpdwResPtr < 2)
                {
                    return FALSE;
                }


                // 1-D Table look-up loop
                do
                {
                    if (ResBit <= 17)
                    {
                        dwIndex = (*lpdwResPtr) >> ResBit;
                    }
                    else
                    {
                        dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                    }
                    dwIndex &= 0x00007fff;

                    pByteTable = Table + (5*dwIndex);
                    pByteTail  = pByteTable+4;
                    pByteTable0 = pByteTable;

                    // All bytes

                    for (i=0; i<4; i++)
                    {
                        MakeupT = *pByteTable & 0x80;
                        CodeT   = (WORD) *pByteTable & 0x3f;

                        if (MakeupT)
                        {
                            if (CodeT < 28)
                            {
                                RunLength += (CodeT << 6);
#ifdef RDEBUG
                                if (Color)
                                {
                                    _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                }
                                else
                                {
                                    _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                }
#endif
                            }

                            else if (CodeT == NO_MORE_RECORDS)
                            {
                                goto lNextIndexHoriz;
                            }

                            else
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 2D dwResPtr=%lx bit=%d"),
                                    lpdwResPtr,
                                    ResBit);
                                // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                                BadFaxLines++;
                                if (LastLineBad)
                                {
                                    ConsecBadLines++;
                                }

                                if (BadFaxLines > AllowedBadFaxLines ||
                                    ConsecBadLines > AllowedConsecBadLines)
                                {
                                        return FALSE;
                                }

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }
                        }

                        else
                        {  // terminating code
                            RunLength += CodeT;
                            *(pCurLine + (CIndex++) ) = RunLength;

                            if (RIndex >= MaxColorTransPerLine )
                            {
                                BadFaxLines++;
                                if (LastLineBad)
                                {
                                    ConsecBadLines++;
                                }

                                if (BadFaxLines > AllowedBadFaxLines ||
                                    ConsecBadLines > AllowedConsecBadLines)
                                {
                                        return FALSE;
                                }

                                f1D = 1;
                                Count2D = 0;
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 2D TOO MANY Colors dwResPtr=%lx bit=%d"),
                                    lpdwResPtr,
                                    ResBit);
                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT)  );
                            }
#endif
                            Color = 1 - Color;
                            if (++CountHoriz >= 2)
                            {
                                if (fFirstResult)
                                {
                                    bShift =  (*pByteTail & 0xf0) >> 4;
                                }
                                else
                                {
                                    // rare case will take time
                                    bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                                }
                                goto lNextPrefix;
                            }
                        }
                        pByteTable++;
                    }

lNextIndexHoriz:
                    if (Color != CColor)
                    {
                        fFirstResult = 0;
                    }

                    Table = Color ? TableBlack : TableWhite;
                    TailT = *pByteTail & 0x0f;

                    ResBit += TailT;

                    if (ResBit > 31)
                    {
                            lpdwResPtr++;
                            ResBit -= 32;
                    }
                }
                while (lpdwResPtr <= EndPtr);

                return FALSE;
            }

            else if (iCode == PASS_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" P ") );
#endif
                if ( (RunLength >= RValue) && (RunLength != 0) )
                {
                    while (++RIndex < MaxColorTransPerLine)
                    {
                        if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                        {
                            goto lFound2;
                        }
                    }
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                        RIndex,
                        RValue,
                        RunLength);
                    return FALSE;
                }

lFound2:
                RColor = RIndex & 1;

                if (RValue != LINE_LENGTH)
                {
                    RValue1 = *(pRefLine + RIndex + 1 );

                    RColor1 = 1 - RColor;

                    if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) )
                    {
                        a0 = *(pRefLine + RIndex + 2);
                    }
                    else
                    {
                        a0 = RValue1;
                    }
                }
                else
                {
                    a0 = LINE_LENGTH;
                }

#ifdef RDEBUG
                if (CColor)
                {
                    _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
#endif
                RunLength = a0;
            }

            else if (iCode == LOOK_FOR_EOL_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" E ") );
#endif
                if (RunLength == lineWidth)
                {
                    if (++Count2D >= Num2DLines)
                    {
                        Count2D = 0;
                        f1D = 1;
                    }
#ifdef RDEBUG
                    _tprintf( TEXT ("\n 2D done CINdex=%d dwResPtr=%lx bit=%d \n"), CIndex, lpdwResPtr, ResBit);
#endif
                    pTmpSwap = pRefLine;
                    pRefLine = pCurLine;
                    pCurLine = pTmpSwap;
                    RIndex = CIndex;

                    fTestLength = DO_TEST_LENGTH;
                    goto lFindNextEOL;
                }
                else
                {
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR 2D WRONG LINE LENGTH dwResPtr=%lx bit=%d"),
                        lpdwResPtr,
                        ResBit);

                    BadFaxLines++;
                    if (LastLineBad)
                    {
                        ConsecBadLines++;
                    }

                    if (BadFaxLines > AllowedBadFaxLines ||
                        ConsecBadLines > AllowedConsecBadLines)
                    {
                        return FALSE;
                    }

                    f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }
            }

            else
            {
                //ERROR
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR 2D PREFIX dwResPtr=%lx bit=%d"),
                    lpdwResPtr,
                    ResBit);
                BadFaxLines++;
                if (LastLineBad)
                {
                    ConsecBadLines++;
                }

                if (BadFaxLines > AllowedBadFaxLines ||
                    ConsecBadLines > AllowedConsecBadLines)
                {
                    return FALSE;
                }

                f1D = 1;
                Count2D = 0;

                fTestLength = DO_NOT_TEST_LENGTH;
                goto lFindNextEOL;
            }

lNextPrefix:
            ResBit += bShift;
            if (ResBit > 31)
            {
                lpdwResPtr++;
                ResBit -= 32;
            }
        } while (lpdwResPtr < EndPtr);
        return FALSE;

    } while (1);
    return FALSE;
}   // DecodeMrPage


int
ScanMhSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    DWORD                lineWidth
    )
{
    LPDWORD             lpdwResPtr = *lplpdwResPtr;
    BYTE                ResBit = *lpResBit;

    DWORD               dwIndex;
    PBYTE               pByteTable,  pByteTail;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    WORD                CodeT;
    BYTE                TailT;
    BYTE                MakeupT;
    WORD                RunLength=0;
    BOOL                Color;
    DWORD               i;
    BOOL                fTestLength;
    DWORD               EolCount = 0; // The caller has already found the first EOL
                                      // But this counter counts pairs (two EOL's consecutive)
    BOOL                LastLineBad = FALSE;
    BOOL                fError;
    BOOL                RetCode;

    DEBUG_FUNCTION_NAME(TEXT("ScanMhSegment"));

    Table = TableWhite;
    Color = WHITE_COLOR;


    //
    // EOL loop
    //
    do
    {
        // Table look-up loop
        do
        {
            if (ResBit <= 17)
            {
                dwIndex = (*lpdwResPtr) >> ResBit;
            }
            else
            {
                dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
            }

            dwIndex &= 0x00007fff;

            pByteTable = Table + (5*dwIndex);
            pByteTail  = pByteTable+4;

            for (i=0; i<4; i++)
            {
                // We are handling 4 bytes (32 bits in this loop)

                MakeupT = *pByteTable & 0x80;        // 0000100000000000
                CodeT   = (WORD) *pByteTable & 0x3f; // 0000011111111111

                if (MakeupT)
                {
                    if (CodeT <= MAX_TIFF_MAKEUP)
                    {
                        // This is normal makeup code, just multiply it by 64
                        RunLength += (CodeT << 6);

                        if (RunLength > lineWidth)
                        {  // The line is too long
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        EolCount=0;
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                        }
#endif
                    }

                    else if (CodeT == NO_MORE_RECORDS)
                    {
                        goto lNextIndex;
                    }

                    else if (CodeT == LOOK_FOR_EOL_CODE)
                    {
                        fTestLength =  DO_TEST_LENGTH;
                        TailT = *pByteTail & 0x0f;

                        ResBit += TailT;

                        if (ResBit > 31)
                        {
                                lpdwResPtr++;
                                ResBit -= 32;
                        }

                        goto lFindNextEOL;
                    }

                    else if (CodeT == EOL_FOUND_CODE)
                    {
#ifdef RDEBUG
                        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif
                        if ( RunLength != lineWidth )
                        {
                            if (RunLength != 0)
                            {
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }
                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }
                            }
                            else
                            {
                                // RunLength is 0
                                EolCount++;
                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }
                            }
                        }
                        else
                        {
                            LastLineBad = FALSE;
                            *ConsecBadLines = 0;
                        }

                        (*Lines)++;
                        RunLength = 0;
                        // Check whether we've gone past the watermark
                        if (lpdwResPtr > EndPtr)
                        {   // lpdwResPtr/ResBit point exactly to the EOL. Good time to stop scanning!
                            goto scan_seg_end;
                        }
                        Table = TableWhite; // The next line will start in White color
                        Color = WHITE_COLOR;
                    }
                    else if (CodeT == ERROR_CODE)
                    {
                        (*BadFaxLines)++;
                        if (LastLineBad)
                        {
                            (*ConsecBadLines)++;
                        }

                        if (*BadFaxLines > AllowedBadFaxLines ||
                            *ConsecBadLines > AllowedConsecBadLines)
                        {
                            goto bad_exit;
                        }

                        fTestLength =  DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }
                    else
                    {
                        DebugPrintEx(
                            DEBUG_ERR,
                            TEXT("ERROR: WRONG code: index=%04x"),
                            dwIndex);
                        goto bad_exit;
                    }
                } // end of case "MakeupT"
                else
                {
                    // terminating code
                    RunLength += CodeT;
                    if (RunLength > lineWidth)
                    {
                        // If the line is too much long, then we look for next line (EOL), it's waste of time
                        // to continue with the scanning of the current line.
                        fTestLength =  DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }

                    EolCount=0;

#ifdef RDEBUG
                    if (Color)
                    {
                        _tprintf( TEXT ("b%d "), (CodeT)  );
                    }
                    else
                    {
                        _tprintf( TEXT ("w%d "), (CodeT)  );
                    }
#endif
                    Color = 1 - Color;
                }
                pByteTable++; // Move to the next 'Record'
            } // End of the for loop

lNextIndex:

            Table = Color ? TableBlack : TableWhite;
            TailT = *pByteTail & 0x0f;

            ResBit += TailT;

            if (ResBit > 31)
            {
                lpdwResPtr++;
                ResBit -= 32;
            }
        } while (lpdwResPtr <= EndBuffer);  // End of table lookup loop
        // if we got here it means that line is longer than 4K.
        goto bad_exit;

lFindNextEOL:

#ifdef RDEBUG
        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

        if (RunLength != lineWidth)
        {
            if (RunLength != 0)
            {
                (*BadFaxLines)++;
                if (LastLineBad)
                {
                    (*ConsecBadLines)++;
                }

                if (*BadFaxLines > AllowedBadFaxLines ||
                    *ConsecBadLines > AllowedConsecBadLines)
                {
                    goto bad_exit;
                }
            }
            else
            {
                // RunLength is 0
                EolCount++;

                if (EolCount >= MIN_EOL_REQUIRED)
                {
                    goto good_exit; // This mean End-of-page
                }

            }
        }
        else
        {
            (*Lines)++;
            *ConsecBadLines=0;
        }

        RunLength = 0;

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            goto bad_exit;
        }

        if (fTestLength == DO_TEST_LENGTH && fError)
        {
            (*BadFaxLines)++;
            if (LastLineBad)
            {
                (*ConsecBadLines)++;
            }

            if (*BadFaxLines > AllowedBadFaxLines ||
                *ConsecBadLines > AllowedConsecBadLines)
            {
                goto bad_exit;
            }
        }

        Table = TableWhite;
        Color = WHITE_COLOR;

    } while (lpdwResPtr <= EndPtr);   // End of EOL loop

scan_seg_end:
    RetCode = TIFF_SCAN_SEG_END;
    goto l_exit;

bad_exit:
    RetCode = TIFF_SCAN_FAILURE;
    goto l_exit;


good_exit:
    RetCode = TIFF_SCAN_SUCCESS;
    goto l_exit;

l_exit:

    *lplpdwResPtr = lpdwResPtr;
    *lpResBit = ResBit;

    return (RetCode);
}   // ScanMhSegment

//
//  We want to stop scanning if either:
//      1. we reached EOP
//      2. we reached last 1D line before EndPtr
//


BOOL
ScanMrSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    BOOL                *f1D,
    DWORD                lineWidth

    )
{
    LPDWORD             lpdwResPtr = *lplpdwResPtr;
    BYTE                ResBit = *lpResBit;

    DWORD               i;
    DWORD               dwTemp;
    DWORD               EolCount=0; // The caller has already found the first EOL
                                    // But this counter counts pairs (two EOL's consecutive)
    BOOL                Color;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               dwIndex;
    BOOL                fTestLength;
    BOOL                fError;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine = Line1Array;
    WORD                *pCurLine = Line2Array;

    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    BYTE                Num2DLines = 0;
    BYTE                Count2D = 0;
    WORD                a0;
    WORD                RValue, RValue1;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;
    WORD                *pTmpSwap;
    BOOL                LastLineBad = FALSE;
    BOOL                RetCode;
    LPDWORD             lpdwResPtrLast1D = *lplpdwResPtr;
    BYTE                ResBitLast1D = *lpResBit;

    DEBUG_FUNCTION_NAME(TEXT("ScanMrSegment"));

    Table = TableWhite;
    Color = WHITE_COLOR;

    //
    // EOL-loop
    //

    do
    {
        dwTemp = (*lpdwResPtr) & (0x00000001 << ResBit );

        if (*f1D || dwTemp)
        {
//l1Dline:

#ifdef RDEBUG
            _tprintf( TEXT (" Start 1D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
            if (! dwTemp)
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR f1D dwResPtr=%lx bit=%d"),
                    lpdwResPtr,
                    ResBit);

                (*BadFaxLines)++;
                if (LastLineBad)
                {
                    (*ConsecBadLines)++;
                }
                if (*BadFaxLines > AllowedBadFaxLines ||
                    *ConsecBadLines > AllowedConsecBadLines)
                {
                    goto bad_exit;
                }

                ResBit++;
                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }

                fTestLength = DO_NOT_TEST_LENGTH;
                *f1D = 1;
                goto lFindNextEOL;
            }
            //
            // Remember
            //
            lpdwResPtrLast1D = lpdwResPtr;
            ResBitLast1D = ResBit;


            // decode 1D line starting ResBit+1

            ResBit++;
            if (ResBit > 31)
            {
                lpdwResPtr++;
                ResBit -= 32;
            }

            RIndex = 0;
            RunLength = 0;

            Table = TableWhite;
            Color = WHITE_COLOR;

            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT < 28)
                        {
                            RunLength += (CodeT << 6);

                            if (RunLength > lineWidth)
                            {
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }

                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            EolCount=0;
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndex1D;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)
                        {
                            // end of our line AHEAD
                            if (RunLength == lineWidth)
                            {
                                EolCount = 0; // we are in the middle of a line
                                *f1D = 0;
                                Count2D = 0;
                                (*Lines)++;

                                fTestLength = DO_TEST_LENGTH;
                                TailT = *pByteTail & 0x0f;

                                ResBit += TailT;

                                if (ResBit > 31)
                                {
                                        lpdwResPtr++;
                                        ResBit -= 32;
                                }

                                goto lFindNextEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D RunLength=%ld"),
                                    RunLength);

                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }

                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;

                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;

                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_TEST_LENGTH;
                                TailT = *pByteTail & 0x0f;

                                ResBit += TailT;

                                if (ResBit > 31)
                                {
                                    lpdwResPtr++;
                                    ResBit -= 32;
                                }

                                goto lFindNextEOL;
                            }
                        } // end of "LOOK_FOR_EOL_CODE"

                        else if (CodeT == EOL_FOUND_CODE)
                        {
#ifdef RDEBUG
                            _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

                            ResBit +=  (*pByteTail & 0x0f);
                            if (ResBit > 31)
                            {
                                    lpdwResPtr++;
                                    ResBit -= 32;
                            }

                            if (RunLength == lineWidth)
                            {
                                EolCount = 0;
                                *f1D = 0;
                                Count2D = 0;
                                (*Lines)++;

                                goto lAfterEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D Runlength EOLFOUND"));
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }

                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;
                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }

                        } // end of "EOL_FOUND_CODE"

                        else if (CodeT == ERROR_CODE)
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR CODE 1D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            (*BadFaxLines)++;
                            if (LastLineBad)
                            {
                                (*ConsecBadLines)++;
                            }

                            if (*BadFaxLines > AllowedBadFaxLines ||
                                *ConsecBadLines > AllowedConsecBadLines)
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
                        else
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR: WRONG code: index=%04x"),
                                dwIndex);
                            goto bad_exit;
                        }
                    }

                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;

                        if (RunLength > lineWidth)
                        {
                            (*BadFaxLines)++;
                            if (LastLineBad)
                            {
                                (*ConsecBadLines)++;
                            }

                            if (*BadFaxLines > AllowedBadFaxLines ||
                                *ConsecBadLines > AllowedConsecBadLines)
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        *(pRefLine + (RIndex++)) = RunLength;

                        if (RIndex >= MaxColorTransPerLine )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR 1D TOO MANY COLORS dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);

                            (*BadFaxLines)++;
                            if (LastLineBad)
                            {
                                (*ConsecBadLines)++;
                            }

                            if (*BadFaxLines > AllowedBadFaxLines ||
                                *ConsecBadLines > AllowedConsecBadLines)
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }
                    pByteTable++;
                 } // end of FOR

lNextIndex1D:
                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }
            } while (lpdwResPtr <= EndBuffer);
            goto bad_exit;
        }


//l2Dline:
        // should be 2D

#ifdef RDEBUG
        _tprintf( TEXT ("\n Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

        if ( (*lpdwResPtr) & (0x00000001 << ResBit) )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ERROR Start 2D dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);
            (*BadFaxLines)++;
            if (LastLineBad)
            {
                (*ConsecBadLines)++;
            }

            if (*BadFaxLines > AllowedBadFaxLines ||
                *ConsecBadLines > AllowedConsecBadLines)
            {
                goto bad_exit;
            }

            *f1D =  1;
            Count2D = 0;
            goto lAfterEOL;
        }
        // 2D line decode loop
        a0        = 0;
        CIndex    = 0;
        CColor    = 0;
        RunLength = 0;

        RIndex    = 0;
        RValue    = *(pRefLine + RIndex);
        RColor    = 0;

        //BUGBUG incorporate with the next Index calc. to save time

        if (++ResBit > 31)
        {
            lpdwResPtr++;
            ResBit -= 32;
        }
        // prefix loop
        do
        {
            if (ResBit <= 25 )
            {
                dwIndex = (*lpdwResPtr) >> ResBit;
            }
            else
            {
                dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
            }

            dwIndex &= 0x0000007f;
            pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);

            // work-around of a PPC compiler bug: incorrect CMP with signed char. NT 1381. 8/31/96. RafaelL
            iCode = ((short)  ( (char) (*pByteTable) ) ) >> 4;
            bShift = (*pByteTable) & 0x0f;

            if (iCode < 4)
            {
                // VERTICAL -3...+3
#ifdef RDEBUG
                _tprintf( TEXT (" V ") );
#endif

                if ( (RunLength >= RValue) && (RunLength != 0) )
                {
                    while (++RIndex < MaxColorTransPerLine)
                    {
                        if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                        {
                            // BUGBUG will change to break; after debugging
                            goto lFound;
                        }
                    }
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                        RIndex,
                        RValue,
                        RunLength);
                    (*BadFaxLines)++;
                    if (LastLineBad)
                    {
                        (*ConsecBadLines)++;
                    }

                    if (*BadFaxLines > AllowedBadFaxLines ||
                        *ConsecBadLines > AllowedConsecBadLines)
                    {
                        goto bad_exit;
                    }

                    *f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
lFound:
                    RColor = RIndex & 0x0001;
                }

                if (CColor == RColor)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    if (RValue == LINE_LENGTH)
                    {
                        a0 = RValue + iCode;
                    }
                    else
                    {
                        a0 = *(pRefLine + RIndex + 1) + iCode;
                    }
                }

                // RSL 111296

                if ( ( a0 <= RunLength ) && (a0 != 0) )
                {
                    (*BadFaxLines)++;
                    if (LastLineBad)
                    {
                        (*ConsecBadLines)++;
                    }

                    if (*BadFaxLines > AllowedBadFaxLines ||
                        *ConsecBadLines > AllowedConsecBadLines)
                    {
                        goto bad_exit;
                    }

                    *f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }

                *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
                if (CColor)
                {
                    _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
#endif
                RunLength = a0;
                CColor = 1 - CColor;
            }

            else if (iCode == HORIZ_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" H ") );
#endif

                ResBit += bShift;
                if (ResBit > 31)
                {
                    ResBit -= 32;
                    lpdwResPtr++;
                }

                Table = CColor ? TableBlack : TableWhite;
                Color = CColor;
                CountHoriz = 0;
                fFirstResult = 1;

                // 1-D Table look-up loop
                do
                {
                    if (ResBit <= 17)
                    {
                        dwIndex = (*lpdwResPtr) >> ResBit;
                    }
                    else
                    {
                        dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                    }
                    dwIndex &= 0x00007fff;

                    pByteTable = Table + (5*dwIndex);
                    pByteTail  = pByteTable+4;
                    pByteTable0 = pByteTable;

                    // All bytes

                    for (i=0; i<4; i++)
                    {
                        MakeupT = *pByteTable & 0x80;
                        CodeT   = (WORD) *pByteTable & 0x3f;

                        if (MakeupT)
                        {
                            if (CodeT < 28)
                            {
                                RunLength += (CodeT << 6);

                                if (RunLength > lineWidth)
                                {
                                    (*BadFaxLines)++;
                                    if (LastLineBad)
                                    {
                                        (*ConsecBadLines)++;
                                    }

                                    if (*BadFaxLines > AllowedBadFaxLines ||
                                        *ConsecBadLines > AllowedConsecBadLines)
                                    {
                                        goto bad_exit;
                                    }

                                    *f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

#ifdef RDEBUG
                                if (Color)
                                {
                                    _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                }
                                else
                                {
                                    _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                }
#endif
                            }

                            else if (CodeT == NO_MORE_RECORDS)
                            {
                                goto lNextIndexHoriz;
                            }

                            else
                            {
                                // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 2D dwResPtr=%lx bit=%d"),
                                    lpdwResPtr,
                                    ResBit);
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }
                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }
                        }
                        else
                        {
                            //
                            // terminating code
                            //
                            RunLength += CodeT;
                            if (RunLength > lineWidth)
                            {
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }

                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            *(pCurLine + (CIndex++) ) = RunLength;

                            if (CIndex >= MaxColorTransPerLine )
                            {
                                (*BadFaxLines)++;
                                if (LastLineBad)
                                {
                                    (*ConsecBadLines)++;
                                }

                                if (*BadFaxLines > AllowedBadFaxLines ||
                                    *ConsecBadLines > AllowedConsecBadLines)
                                {
                                    goto bad_exit;
                                }
                                *f1D = 1;
                                Count2D = 0;
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 2D TOO MANY Colors dwResPtr=%lx bit=%d"),
                                    lpdwResPtr,
                                    ResBit);
                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT)  );
                            }
#endif
                            Color = 1 - Color;
                            if (++CountHoriz >= 2)
                            {
                                if (fFirstResult)
                                {
                                    bShift =  (*pByteTail & 0xf0) >> 4;
                                }
                                else
                                {
                                    // rare case will take time
                                    bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                    bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                                }
                                goto lNextPrefix;
                            }
                        }
                        pByteTable++;
                    }
lNextIndexHoriz:
                    if (Color != CColor)
                    {
                        fFirstResult = 0;
                    }

                    Table = Color ? TableBlack : TableWhite;
                    TailT = *pByteTail & 0x0f;

                    ResBit += TailT;

                    if (ResBit > 31)
                    {
                        lpdwResPtr++;
                        ResBit -= 32;
                    }
                } while (lpdwResPtr <= EndBuffer);
                goto bad_exit;
            }

            else if (iCode == PASS_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" P ") );
#endif
                if ( (RunLength >= RValue) && (RunLength != 0) )
                {
                    while (++RIndex < MaxColorTransPerLine)
                    {
                        if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                        {
                            goto lFound2;
                        }
                    }
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                        RIndex,
                        RValue,
                        RunLength);

                    (*BadFaxLines)++;
                    if (LastLineBad)
                    {
                        (*ConsecBadLines)++;
                    }

                    if (*BadFaxLines > AllowedBadFaxLines ||
                        *ConsecBadLines > AllowedConsecBadLines)
                    {
                        goto bad_exit;
                    }

                    *f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }
lFound2:

                RColor = RIndex & 1;

                if (RValue != LINE_LENGTH)
                {
                    RValue1 = *(pRefLine + RIndex + 1 );

                    RColor1 = 1 - RColor;

                    if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) )
                    {
                        a0 = *(pRefLine + RIndex + 2);
                    }
                    else
                    {
                        a0 = RValue1;
                    }
                }
                else
                {
                    a0 = LINE_LENGTH;
                }


#ifdef RDEBUG
                if (CColor)
                {
                    _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
#endif

                // RSL 111296

                if ( ( a0 <= RunLength ) && (a0 != 0) )
                {
                    (*BadFaxLines)++;
                    if (LastLineBad)
                    {
                        (*ConsecBadLines)++;
                    }

                    if (*BadFaxLines > AllowedBadFaxLines ||
                        *ConsecBadLines > AllowedConsecBadLines)
                    {
                        goto bad_exit;
                    }

                    *f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }
                RunLength = a0;
            }

            else if (iCode == LOOK_FOR_EOL_PREFIX)
            {
#ifdef RDEBUG
                _tprintf( TEXT (" E ") );
#endif

                if (RunLength == lineWidth)
                {
                    if (++Count2D >= Num2DLines)
                    {
                        Count2D = 0;
                        *f1D = 0;   // relax HiRes/LoRes 2D lines per 1D rules - HP Fax does 3 2D-lines per 1 1D-line in LoRes.
                    }

#ifdef RDEBUG
                    _tprintf( TEXT ("\n 2D done CINdex=%d dwResPtr=%lx bit=%d \n"), CIndex, lpdwResPtr, ResBit);
#endif

                    pTmpSwap = pRefLine;
                    pRefLine = pCurLine;
                    pCurLine = pTmpSwap;
                    RIndex = CIndex;

                    fTestLength = DO_TEST_LENGTH;
                    *f1D = 0;
                    (*Lines)++;

                    goto lFindNextEOL;
                }
                else
                {
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("ERROR 2D WRONG LINE LENGTH dwResPtr=%lx bit=%d"),
                        lpdwResPtr,
                        ResBit);
                    (*BadFaxLines)++;
                    if (LastLineBad)
                    {
                        (*ConsecBadLines)++;
                    }
                    if (*BadFaxLines > AllowedBadFaxLines ||
                        *ConsecBadLines > AllowedConsecBadLines)
                    {
                        goto bad_exit;
                    }

                    *f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }
            }
            else
            {
                //ERROR
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR 2D PREFIX dwResPtr=%lx bit=%d"),
                    lpdwResPtr,
                    ResBit);
                (*BadFaxLines)++;
                if (LastLineBad)
                {
                    (*ConsecBadLines)++;
                }

                if (*BadFaxLines > AllowedBadFaxLines ||
                    *ConsecBadLines > AllowedConsecBadLines)
                {
                    goto bad_exit;
                }

                *f1D = 1;
                Count2D = 0;

                fTestLength = DO_NOT_TEST_LENGTH;
                goto lFindNextEOL;
            }

lNextPrefix:
            ResBit += bShift;
            if (ResBit > 31)
            {
                lpdwResPtr++;
                ResBit -= 32;
            }

        } while (lpdwResPtr < EndBuffer);

        goto bad_exit;

lFindNextEOL:

        RunLength = 0;

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            goto bad_exit;
        }

        if ( (fTestLength == DO_TEST_LENGTH) && fError )
        {
            (*BadFaxLines)++;
            if (LastLineBad)
            {
                (*ConsecBadLines)++;
            }

            if (*BadFaxLines > AllowedBadFaxLines ||
                *ConsecBadLines > AllowedConsecBadLines)
            {
                goto bad_exit;
            }
        }


lAfterEOL:
        ;

#ifdef RDEBUG
        _tprintf( TEXT ("\n After EOL RIndex=%d dwResPtr=%lx bit=%d Ref= \n "), RIndex, lpdwResPtr, ResBit);
        for (i=0; i<RIndex; i++)
        {
            _tprintf( TEXT ("%d, "), *(pRefLine+i) );
        }
#endif
    } while (lpdwResPtr <= EndPtr);    // Enf of EOL loop

    RetCode = TIFF_SCAN_SEG_END;
    goto l_exit;

bad_exit:

    RetCode = TIFF_SCAN_FAILURE;
    goto l_exit;

good_exit:

    RetCode = TIFF_SCAN_SUCCESS;
    goto l_exit;

l_exit:

    *lplpdwResPtr = lpdwResPtrLast1D;
    *lpResBit = ResBitLast1D;

    return (RetCode);
}   // ScanMrSegment


BOOL
DecodeMhPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer
    )

/*++

Routine Description:

    Decode a single page of 1 dimensionaly compressed
    TIFF data.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    OutputBuffer    - Output buffer where the uncompressed data
                      is written.  This buffer must be allocated
                      by the caller and must be large enough for
                      a single page of data.

Return Value:

    NONE

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    DWORD               ConsecBadLines=0;

    DWORD               AllowedBadFaxLines=255;
    DWORD               AllowedConsecBadLines=255;


    BOOL                LastLineBad;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    DWORD               dwIndex;
    BOOL                fTestLength;
    BOOL                fError;

    DEBUG_FUNCTION_NAME(TEXT("DecodeMhPage"));

    //
    // initialization
    //


    t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    BadFaxLines = 0;
    LastLineBad = FALSE;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;

    //
    // find first EOL
    //
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3);

    if (! FindNextEol (lpdwResPtr, ResBit, EndPtr, &lpdwResPtr, &ResBit, DO_NOT_TEST_LENGTH, &fError) )
    {
        return FALSE;
    }

    Table = TableWhite;
    Color = WHITE_COLOR;

    // EOL loop
    do
    {
        // Table look-up loop
        do
        {
            if (ResBit <= 17)
            {
                dwIndex = (*lpdwResPtr) >> ResBit;
            }
            else
            {
                dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
            }

            dwIndex &= 0x00007fff;

            pByteTable = Table + (5*dwIndex);
            pByteTail  = pByteTable+4;

            for (i=0; i<4; i++)
            {
                MakeupT = *pByteTable & 0x80;
                CodeT   = (WORD) *pByteTable & 0x3f;

                if (MakeupT)
                {
                    if (CodeT < 28)
                    {
                        RunLength += (CodeT << 6);
                        EolCount=0;
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                        }
#endif
                    }
                    else if (CodeT == NO_MORE_RECORDS)
                    {
                        goto lNextIndex;
                    }

                    else if (CodeT == LOOK_FOR_EOL_CODE)
                    {
                        fTestLength =  DO_TEST_LENGTH;
                        TailT = *pByteTail & 0x0f;

                        ResBit += TailT;

                        if (ResBit > 31)
                        {
                                lpdwResPtr++;
                                ResBit -= 32;
                        }

                        goto lFindNextEOL;
                    }

                    else if (CodeT == EOL_FOUND_CODE)
                    {
#ifdef RDEBUG
                        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif
                        if (RunLength != lineWidth)
                        {
                            BadFaxLines++;
                            if (LastLineBad)
                            {
                                ConsecBadLines++;
                            }

                            if (BadFaxLines > AllowedBadFaxLines ||
                                ConsecBadLines > AllowedConsecBadLines)
                            {
                                return FALSE;
                            }
                        }
                        else
                        {
                            LastLineBad = FALSE;
                        }

                        RunLength = 0;
                        EolCount++;

                        if (EolCount >= 5)
                        {
                            t1 = GetTickCount();
                            tdelta = t1 - t0;
#ifdef RDEBUG
                            _tprintf( TEXT("\n tdelta=%ld\n"),tdelta );
                            return (TRUE);
#endif
                        }

                        Lines++;

                        Table = TableWhite;
                        Color = WHITE_COLOR;

                    }

                    else if (CodeT == ERROR_CODE)
                    {
                        BadFaxLines++;
                        if (LastLineBad)
                        {
                            ConsecBadLines++;
                        }

                        if (BadFaxLines > AllowedBadFaxLines ||
                            ConsecBadLines > AllowedConsecBadLines)
                        {
                            return FALSE;
                        }

                        fTestLength =  DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }
                    else
                    {
                        DebugPrintEx(
                            DEBUG_ERR,
                            TEXT("ERROR: WRONG code: index=%04x"),
                            dwIndex);
                        return FALSE;
                    }
                }

                else
                {
                    //
                    // terminating code
                    //
                    RunLength += CodeT;
                    EolCount=0;

#ifdef RDEBUG
                    if (Color)
                    {
                        _tprintf( TEXT ("b%d "), (CodeT)  );
                    }
                    else
                    {
                        _tprintf( TEXT ("w%d "), (CodeT)  );
                    }
#endif
                    Color = 1 - Color;
                }

                pByteTable++;
            }


lNextIndex:
            Table = Color ? TableBlack : TableWhite;
            TailT = *pByteTail & 0x0f;

            ResBit += TailT;

            if (ResBit > 31)
            {
                    lpdwResPtr++;
                    ResBit -= 32;
            }
        } while (lpdwResPtr <= EndPtr);
        return FALSE;

lFindNextEOL:

#ifdef RDEBUG
        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

        if (RunLength != lineWidth)
        {
            BadFaxLines++;
            if (LastLineBad)
            {
                ConsecBadLines++;
            }

            if (BadFaxLines > AllowedBadFaxLines ||
                ConsecBadLines > AllowedConsecBadLines)
            {
                return FALSE;
            }
        }
        else
        {
            Lines++;
            ConsecBadLines=0;
            LastLineBad = FALSE;
        }

        RunLength=0;

        if (! FindNextEol (lpdwResPtr, ResBit, EndPtr, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            return FALSE;
        }

        if (fTestLength == DO_TEST_LENGTH && fError)
        {
            BadFaxLines++;
            if (LastLineBad)
            {
                ConsecBadLines++;
            }

            if (BadFaxLines > AllowedBadFaxLines ||
                ConsecBadLines > AllowedConsecBadLines)
            {
                return FALSE;
            }
        }

        Table = TableWhite;
        Color = WHITE_COLOR;
        EolCount++;

        if (EolCount >= 5)
        {
            t1 = GetTickCount();
            tdelta = t1 - t0;
    #ifdef RDEBUG
            _tprintf( TEXT("\n tdelta=%ld\n"),tdelta );
    #endif
            return (TRUE);
        }

    } while (lpdwResPtr <= EndPtr);
    return FALSE;
}   // DecodeMhPage


BOOL
DecodeMmrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;

    // debugging

    DWORD               DbgLinesStop = 0;
    DWORD               DbgStopCnt = 0;

    DEBUG_FUNCTION_NAME(TEXT("DecodeMmrPage"));

    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;


    t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;


    // 2D line decode loop
    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;


    // first REF line is all white
    RIndex    = 1;
    *pRefLine = LINE_LENGTH;
    RValue    = LINE_LENGTH;
    RColor    = 0;

    // prefix loop
    do
    {
        if (RunLength == lineWidth)
        {
#ifdef RDEBUG
            if (g_fDebGlobOutColors == 1)
            {
                for (i=0; i<CIndex; i++)
                {
                    _tprintf( TEXT("%03d> %04d; "), i, *(pCurLine+i) );
                }
            }
#endif
            if (Lines == DbgLinesStop)
            {
                DbgStopCnt++;
            }

            Lines++;

#ifdef RDEBUG
            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif

            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;
            RIndex   =  0;
            RValue   =  *pRefLine;
            RColor   =  0;

            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;
        }

        if (ResBit <= 25 )
        {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else
        {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        iCode = ( (short)  ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4)
        {
            // VERTICAL -3...+3
#ifdef RDEBUG
            if (g_fDebGlobOutPrefix)
            {
                _tprintf( TEXT (" V%2d "), iCode );
            }
#endif
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        // BUGBUG will change to break; after debugging
                        goto lFound;
                    }
                }
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength);
                return FALSE;

lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)
            {
                a0 = RValue + iCode;
            }
            else
            {
                if (RValue == LINE_LENGTH)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
            if (g_fDebGlobOutPrefix)
            {
                if (CColor)
                {
                    _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength);
                return FALSE;
            }

            RunLength = a0;
            CColor = 1 - CColor;
        }

        else if (iCode == HORIZ_PREFIX)
        {
#ifdef RDEBUG
            if (g_fDebGlobOutPrefix)
            {
                _tprintf( TEXT (" H ") );
            }
#endif
            ResBit += bShift;
            if (ResBit > 31)
            {
                ResBit -= 32;
                lpdwResPtr++;
            }
            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;
            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }
                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT < 28)
                        {
                            RunLength += (CodeT << 6);

                            // sanity check

                            if (RunLength > LINE_LENGTH)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR MMR src codeT=%d, RunLength=%d"),
                                    a0,
                                    RunLength);
                                return FALSE;
                            }

#ifdef RDEBUG
                            if (g_fDebGlobOutPrefix)
                            {
                                if (Color)
                                {
                                    _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                }
                                else
                                {
                                    _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                }
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndexHoriz;
                        }

                        else
                        {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR 2D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            return FALSE;
                        }
                    }
                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;
                        *(pCurLine + (CIndex++) ) = RunLength;
                        // sanity check
                        if ( (RunLength > LINE_LENGTH) || ( CIndex >= MaxColorTransPerLine ) )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR MMR RunLength=%d, CodeT=%d, CIndex=%d"),
                                RunLength,
                                CodeT,
                                CIndex);
                            return FALSE;
                        }
#ifdef RDEBUG
                        if (g_fDebGlobOutPrefix)
                        {
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT)  );
                            }
                        }
#endif
                        Color = 1 - Color;
                        if (++CountHoriz >= 2)
                        {
                            if (fFirstResult)
                            {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else
                            {
                                // rare case will take time
                                bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }
                    pByteTable++;
                }
lNextIndexHoriz:
                if (Color != CColor)
                {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }
            } while (lpdwResPtr <= EndPtr);
            return FALSE;
        }
        else if (iCode == PASS_PREFIX)
        {
#ifdef RDEBUG
            if (g_fDebGlobOutPrefix)
            {
                _tprintf( TEXT (" P ") );
            }
#endif
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        goto lFound2;
                    }
                }
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength);
                return FALSE;
            }
lFound2:
            RColor = RIndex & 1;

            if (RValue != LINE_LENGTH)
            {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) )
                {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else
                {
                    a0 = RValue1;
                }
            }
            else
            {
                a0 = LINE_LENGTH;
            }

#ifdef RDEBUG
            if (g_fDebGlobOutPrefix)
            {
                if (CColor)
                {
                   _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                }
                else
                {
                    _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                }
            }
#endif
            // sanity check
            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength);
                return FALSE;
            }
            RunLength = a0;
        }
        else if (iCode == LOOK_FOR_EOL_PREFIX)
        {
            t1 = GetTickCount();
            tdelta = t1 - t0;
#ifdef RDEBUG
            _tprintf( TEXT ("\nTiming=%ld ms.\n"), tdelta );
#endif
            return TRUE;
        }
        else
        {
            //ERROR
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ERROR 2D PREFIX dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);
            return FALSE;
        }

lNextPrefix:
        ResBit += bShift;
        if (ResBit > 31)
        {
            lpdwResPtr++;
            ResBit -= 32;
        }
    } while (lpdwResPtr <= EndPtr);
    return FALSE;
}   // DecodeMmrPage


BOOL
ConvMmrPageToMh(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes,
    BOOL                SrcHiRes
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;

    WORD                PrevValue;
    WORD                CurValue;
    BOOL                CurColor;
    WORD                CurPos;
    WORD                CurRun;
    BYTE                BitOut;
    DWORD               *lpdwOut;
    PCODETABLE          pTableEntry;
    PCODETABLE          pCodeTable;
    BOOL                fOutputLine = 0;
    BOOL                fReduceTwice = 0;

    DEBUG_FUNCTION_NAME(TEXT("ConvMmrPageToMh"));

    if (NegotHiRes < SrcHiRes)
    {
        fReduceTwice = 1;
    }

    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;

    lpdwOut = lpdwOutputBuffer;
    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, *lpdwSizeOutputBuffer);

   t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;



    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;

    // 2D line decode loop
    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;


    // first REF line is all white
    RIndex    = 1;
    *pRefLine = LINE_LENGTH;
    RValue    = LINE_LENGTH;
    RColor    = 0;

    // prefix loop
    do
    {
        if (RunLength == lineWidth)
        {

#ifdef RDEBUG
            _tprintf( TEXT(" EOL\n\n") );
#endif
            if (fReduceTwice)
            {
                fOutputLine = 1 - fOutputLine;
                if (!fOutputLine)
                {
                    goto lSkipLoRes;
                }
            }

            // Output Dest Line
            // BUGBUG  Use gc_AlignEolTable[] here !
            // 1. Output Dest EOL byte aligned

            if (BitOut <= 4)
            {
                *lpdwOut = *lpdwOut + 0x00008000;
                BitOut = 16;
            }
            else if (BitOut <= 12)
            {
                *lpdwOut = *lpdwOut + 0x00800000;
                BitOut = 24;
            }
            else if (BitOut <= 20)
            {
                *lpdwOut = *lpdwOut + 0x80000000;
                BitOut = 0;
                lpdwOut++;
            }
            else if (BitOut <= 28)
            {
                *(++lpdwOut) = 0x00000080;
                BitOut = 8;
            }
            else
            {
                *(++lpdwOut) = 0x00008000;
                BitOut = 16;
            }

            // 2. Output MH line based on Color Trans. Array

            PrevValue  = 0;
            CurColor = WHITE_COLOR;

            for (CurPos=0;  CurPos < MaxColorTransPerLine; CurPos++)
            {

                CurValue = *(pCurLine + CurPos);
                CurRun   = CurValue - PrevValue;

                pCodeTable = CurColor ? BlackRunCodesReversed : WhiteRunCodesReversed;

                // output makeup code if exists
                if (CurRun >= 64)
                {
                    pTableEntry = pCodeTable + (63 + (CurRun >> 6));

                    *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                    if (BitOut + pTableEntry->length > 31)
                    {
                        *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                    }

                    BitOut += pTableEntry->length;
                    if (BitOut > 31)
                    {
                        BitOut -= 32;
                    }

                    CurRun &= 0x3f;
                }

                // output terminating code always
                pTableEntry = pCodeTable + CurRun;

                *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                if (BitOut + pTableEntry->length > 31)
                {
                    *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                }

                BitOut += pTableEntry->length;
                if (BitOut > 31)
                {
                    BitOut -= 32;
                }
                if ( CurValue == LINE_LENGTH)
                {
                    break;
                }

                PrevValue = CurValue;
                CurColor  = 1 - CurColor;
           }

lSkipLoRes:
            // Next Src Line

            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;
            RIndex   =  0;
            RValue   =  *pRefLine;
            RColor   =  0;

            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;


        }

        if (ResBit <= 25 )
        {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else
        {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        iCode = ( (short) ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4)
        {
            // VERTICAL -3...+3
#ifdef RDEBUG
            _tprintf( TEXT (" V%2d "), iCode );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        // BUGBUG will change to break; after debugging
                        goto lFound;
                    }
                }
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength);
                return FALSE;


lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)
            {
                a0 = RValue + iCode;
            }
            else
            {
                if (RValue == LINE_LENGTH)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
            if (CColor)
            {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else
            {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif
            // sanity check
            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength);
                return FALSE;
            }

            RunLength = a0;
            CColor = 1 - CColor;
        }
        else if (iCode == HORIZ_PREFIX)
        {
#ifdef RDEBUG
            _tprintf( TEXT (" H ") );
#endif

            ResBit += bShift;
            if (ResBit > 31)
            {
                ResBit -= 32;
                lpdwResPtr++;
            }
            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;

            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }
                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT < 28)
                        {
                            RunLength += (CodeT << 6);
                            // sanity check
                            if (RunLength > LINE_LENGTH)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR MMR src codeT=%d, RunLength=%d"),
                                    a0,
                                    RunLength);
                                return FALSE;
                            }
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndexHoriz;
                        }

                        else
                        {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR 2D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            return FALSE;
                        }
                    }
                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;
                        *(pCurLine + (CIndex++) ) = RunLength;

                        // sanity check

                        if ( (RunLength > LINE_LENGTH) || ( CIndex >= MaxColorTransPerLine ) )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR MMR RunLength=%d, CodeT=%d, CIndex=%d"),
                                RunLength,
                                CodeT,
                                CIndex);
                            return FALSE;
                        }
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                        if (++CountHoriz >= 2)
                        {
                            if (fFirstResult)
                            {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else
                            {
                                // rare case will take time
                                bShift =   ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }
                    pByteTable++;
                }
lNextIndexHoriz:
                if (Color != CColor)
                {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31)
                {
                    lpdwResPtr++;
                    ResBit -= 32;
                }
            } while (lpdwResPtr <= EndPtr);
            return FALSE;
        }

        else if (iCode == PASS_PREFIX)
        {
#ifdef RDEBUG
            _tprintf( TEXT (" P ") );
#endif
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        goto lFound2;
                    }
                }
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength);
                return FALSE;
            }
lFound2:

            RColor = RIndex & 1;

            if (RValue != LINE_LENGTH)
            {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) )
                {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else
                {
                    a0 = RValue1;
                }
            }
            else
            {
                a0 = LINE_LENGTH;
            }

#ifdef RDEBUG
            if (CColor)
            {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else
            {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength);
                return FALSE;
            }
            RunLength = a0;
        }

        else if (iCode == LOOK_FOR_EOL_PREFIX)
        {
#ifdef RDEBUG
            // _tprintf( TEXT (" E ") );
#endif

            t1 = GetTickCount();
            tdelta = t1 - t0;

            // BUGBUG. In T.30 we send un-aligned RTC by request
            // so we shouldn't send it here. It also conflicts
            // with the filtering and expanding T.30 code

            // BUGBUG  Use gc_AlignEolTable[] here !
            // 1. Output EOL byte aligned for the last line.

            if (BitOut <= 4)
            {
                *lpdwOut = *lpdwOut + 0x00008000;
                BitOut = 16;
            }
            else if (BitOut <= 12)
            {
                *lpdwOut = *lpdwOut + 0x00800000;
                BitOut = 24;
            }
            else if (BitOut <= 20)
            {
                *lpdwOut = *lpdwOut + 0x80000000;
                BitOut = 0;
                lpdwOut++;
            }
            else if (BitOut <= 28)
            {
                *(++lpdwOut) = 0x00000080;
                BitOut = 8;
            }
            else
            {
                *(++lpdwOut) = 0x00008000;
                BitOut = 16;
            }

            *lpdwSizeOutputBuffer =
                (DWORD)((lpdwOut - lpdwOutputBuffer) * sizeof (DWORD) + ( BitOut >> 3));
            return TRUE;
        }

        else
        {
            //
            //ERROR
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ERROR 2D dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);
            return FALSE;
        }

lNextPrefix:
        ResBit += bShift;
        if (ResBit > 31)
        {
            lpdwResPtr++;
            ResBit -= 32;
        }
    } while (lpdwResPtr <= EndPtr);
    return FALSE;
}   // ConvMmrPageToMh



BOOL
ConvMmrPageToMrSameRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes
    )


{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    BYTE                Num2DLines;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;

    WORD                PrevValue;
    WORD                CurValue;
    BOOL                CurColor;
    WORD                CurPos;
    WORD                CurRun;
    BYTE                BitOut;
    DWORD               *lpdwOut;
    PCODETABLE          pTableEntry;
    PCODETABLE          pCodeTable;

    BYTE                dwNewBitOut;
    BYTE                dwPrevResBit;
    BYTE                dw1,
                        dw2;
    BOOL                f1D = 1;

    BYTE                Count2D;
    DWORD               dwTmp;
    DWORD               *lpdwPrevResPtr;


    if (NegotHiRes) {
        Num2DLines = 3;
    }
    else {
        Num2DLines = 1;
    }


    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;

    lpdwOut = lpdwOutputBuffer;
    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, *lpdwSizeOutputBuffer );


    t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;



    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;


    lpdwPrevResPtr = lpdwResPtr;
    dwPrevResBit   = ResBit;

    // 2D line decode loop
    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;


    // first REF line is all white
    RIndex    = 1;
    *pRefLine = LINE_LENGTH;
    RValue    = LINE_LENGTH;
    RColor    = 0;

    f1D       = 1;
    Count2D   = 0;

    //
    // prefix loop
    //

    do {


        if (RunLength == lineWidth) {

#ifdef RDEBUG
            _tprintf( TEXT(" EOL\n\n") );
#endif
            //
            // Output Dest Line
            //

            //
            // 1. Output Dest EOL byte aligned followed by a 1D/2D tag.
            //

            dwNewBitOut = gc_AlignEolTable[ BitOut ];
            if (dwNewBitOut < BitOut) {
                lpdwOut++;
            }

            BitOut = dwNewBitOut;

            *lpdwOut += (0x00000001 << (BitOut++) );

            if (BitOut == 32) {
                BitOut = 0;
                lpdwOut++;
            }


            if (f1D) {
                // 2. Output MH line based on Color Trans. Array

                *lpdwOut += (0x00000001 << (BitOut++));

                PrevValue  = 0;
                CurColor = WHITE_COLOR;

                for (CurPos=0;  CurPos < MaxColorTransPerLine; CurPos++) {

                    CurValue = *(pCurLine + CurPos);
                    CurRun   = CurValue - PrevValue;

                    pCodeTable = CurColor ? BlackRunCodesReversed : WhiteRunCodesReversed;

                    // output makeup code if exists
                    if (CurRun >= 64) {
                        pTableEntry = pCodeTable + (63 + (CurRun >> 6));

                        *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                        if (BitOut + pTableEntry->length > 31)  {
                            *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                        }

                        BitOut += pTableEntry->length;
                        if (BitOut > 31) {
                            BitOut -= 32;
                        }

                        CurRun &= 0x3f;
                    }

                    // output terminating code always
                    pTableEntry = pCodeTable + CurRun;

                    *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                    if (BitOut + pTableEntry->length > 31)  {
                        *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                    }

                    BitOut += pTableEntry->length;
                    if (BitOut > 31) {
                        BitOut -= 32;
                    }



                    if ( CurValue == LINE_LENGTH) {
                        break;
                    }

                    PrevValue = CurValue;
                    CurColor  = 1 - CurColor;

                }
                f1D = 0;
                Count2D = 0;

            }
            else {
                // 2. Output 2D line - exact copy of an MMR corresponding 2D segment

                BitOut++;  // no need to test < 32 : never happens.

                if (lpdwResPtr == lpdwPrevResPtr) {
                    // insertion is a part of a DWORD

                    dwTmp = *lpdwPrevResPtr & (MINUS_ONE_DWORD << dwPrevResBit);
                    dwTmp &=  (MINUS_ONE_DWORD >> (32 - ResBit) );

                    if (BitOut >= dwPrevResBit) {
                        dw1 = (32 - BitOut);
                        dw2 =  ResBit - dwPrevResBit;

                        *lpdwOut += ( dwTmp << (BitOut - dwPrevResBit) );

                        if ( dw1 < dw2 ) {
                            *(++lpdwOut) = dwTmp >> (dwPrevResBit + dw1) ;
                            BitOut =  dw2 - dw1;
                        }
                        else {
                            if ( (BitOut = BitOut + dw2) > 31 )  {
                                BitOut -= 32;
                                lpdwOut++;
                            }
                        }

                    }
                    else {
                        *lpdwOut += ( dwTmp >> (dwPrevResBit - BitOut) );
                        BitOut += (ResBit - dwPrevResBit);
                    }
                }
                else {
                    // copy first left-justified part of a DWORD

                    dwTmp = *(lpdwPrevResPtr++) & (MINUS_ONE_DWORD << dwPrevResBit);

                    if (BitOut > dwPrevResBit) {
                        dw1 = BitOut - dwPrevResBit;

                        *lpdwOut += ( dwTmp << dw1 );
                        *(++lpdwOut) = dwTmp >> (32 - dw1) ;
                        BitOut = dw1;
                    }
                    else {
                        *lpdwOut += ( dwTmp >> (dwPrevResBit - BitOut) );
                        if ( (BitOut = BitOut + 32 - dwPrevResBit) > 31 )  {
                            BitOut -= 32;
                            lpdwOut++;
                        }
                    }

                    // copy entire DWORDs in a middle

                    while (lpdwPrevResPtr < lpdwResPtr) {
                        if (BitOut == 0) {
                            *(lpdwOut++) = *(lpdwPrevResPtr++);
                        }
                        else {
                            *lpdwOut += ( *lpdwPrevResPtr << BitOut );
                            *(++lpdwOut) = *(lpdwPrevResPtr++) >> (32 - BitOut);
                        }
                    }

                    // copy last right-justified part of a DWORD

                    if (ResBit != 0) {
                        dwTmp = *lpdwPrevResPtr & (MINUS_ONE_DWORD >> (32 - ResBit) );

                        dw1 = (32 - BitOut);
                        *lpdwOut += ( dwTmp << BitOut );

                        if (dw1 < ResBit) {
                            *(++lpdwOut) = dwTmp >> dw1;
                            BitOut = ResBit - dw1;
                        }
                        else {
                             if ( (BitOut = BitOut + ResBit) > 31 )  {
                                 BitOut -= 32;
                                 lpdwOut++;
                             }
                        }
                    }
                }


                if (++Count2D >= Num2DLines) {
                    Count2D = 0;
                    f1D = 1;
                }

            }

            // Remember Prev. line coordinates

            dwPrevResBit   = ResBit;
            lpdwPrevResPtr = lpdwResPtr;


            // Next Src Line

            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;
            RIndex   =  0;
            RValue   =  *pRefLine;
            RColor   =  0;

            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;


        }

        if (ResBit <= 25 ) {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        iCode = ( (short)  ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4) {
            // VERTICAL -3...+3
#ifdef RDEBUG
            _tprintf( TEXT (" V%2d "), iCode );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) ) {
                while (++RIndex < MaxColorTransPerLine) {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                        // BUGBUG will change to break; after debugging
                        goto lFound;
                    }
                }

#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                return FALSE;

lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)  {
                a0 = RValue + iCode;
            }
            else {
                if (RValue == LINE_LENGTH) {
                    a0 = RValue + iCode;
                }
                else {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
            if (CColor) {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) ) {
#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d\n "), a0, RunLength );
#endif
                return FALSE;

            }


            RunLength = a0;
            CColor = 1 - CColor;

        }

        else if (iCode == HORIZ_PREFIX) {
#ifdef RDEBUG
            _tprintf( TEXT (" H ") );
#endif


            ResBit += bShift;
            if (ResBit > 31) {
                ResBit -= 32;
                lpdwResPtr++;
            }


            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;


            // 1-D Table look-up loop
            do {

                if (ResBit <= 17) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }


                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;

                // All bytes

                for (i=0; i<4; i++)  {

                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT) {

                        if (CodeT < 28) {
                            RunLength += (CodeT << 6);

                            // sanity check

                            if (RunLength > LINE_LENGTH)  {
#ifdef RDEBUG
                                _tprintf( TEXT ("!!! ERROR MMR src codeT=%d, RunLength=%d\n "), a0, RunLength );
#endif
                                return FALSE;

                            }

#ifdef RDEBUG
                            if (Color) {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS) {
                            goto lNextIndexHoriz;
                        }

                        else  {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
#ifdef RDEBUG
                            _tprintf( TEXT ("\n!!! ERROR 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

                            return FALSE;
                        }

                    }

                    else {  // terminating code
                        RunLength += CodeT;
                        *(pCurLine + (CIndex++) ) = RunLength;

                        // sanity check

                        if ( (RunLength > LINE_LENGTH) || ( CIndex >= MaxColorTransPerLine ) ) {
#ifdef RDEBUG
                            _tprintf( TEXT ("!!! ERROR MMR RunLength=%d, CodeT=%d, CIndex=%d\n "),
                                            RunLength, CodeT, CIndex );
#endif
                            return FALSE;

                        }


#ifdef RDEBUG
                        if (Color) {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                        if (++CountHoriz >= 2)  {
                            if (fFirstResult) {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else {
                                // rare case will take time
                                bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }

                    pByteTable++;

                }



lNextIndexHoriz:
                if (Color != CColor) {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31) {
                        lpdwResPtr++;
                        ResBit -= 32;
                }
            } while (lpdwResPtr <= EndPtr);

            return FALSE;




        }

        else if (iCode == PASS_PREFIX) {
#ifdef RDEBUG
            _tprintf( TEXT (" P ") );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) ) {
                while (++RIndex < MaxColorTransPerLine) {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                        goto lFound2;
                    }
                }

#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                return FALSE;
            }

lFound2:

            RColor = RIndex & 1;


            if (RValue != LINE_LENGTH) {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) ) {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else {
                    a0 = RValue1;
                }
            }
            else {
                a0 = LINE_LENGTH;
            }

#ifdef RDEBUG
            if (CColor) {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) ) {
#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d\n "), a0, RunLength );
#endif
                return FALSE;

            }

            RunLength = a0;

        }

        else if (iCode == LOOK_FOR_EOL_PREFIX) {
#ifdef RDEBUG
            // _tprintf( TEXT (" E ") );
#endif

            t1 = GetTickCount();
            tdelta = t1 - t0;

            // BUGBUG. In T.30 we send un-aligned RTC by request
            // so we shouldn't send it here. It also conflicts
            // with the filtering and expanding T.30 code

#if 0

            // EOL for the last line
            (*lpdwOut) += ( ((DWORD) (EOL_REVERSED_CODE)) << BitOut);
            if ( (BitOut = BitOut + EOL_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (EOL_REVERSED_CODE) ) >> (EOL_LENGTH - BitOut);
            }

            // 6 1D-eols
            for (i=0; i<6; i++) {

                (*lpdwOut) += ( ((DWORD) (TAG_1D_EOL_REVERSED_CODE)) << BitOut);
                if ( (BitOut = BitOut + TAG_1D_EOL_LENGTH ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (TAG_1D_EOL_REVERSED_CODE) ) >> (TAG_1D_EOL_LENGTH - BitOut);
                }
            }

            *(++lpdwOut) = 0;
#endif

            // BUGBUG  Use gc_AlignEolTable[] here !
            // 1. Output EOL byte aligned for the last line.

            if (BitOut <= 4)  {
                *lpdwOut = *lpdwOut + 0x00008000;
                BitOut = 16;
            }
            else if (BitOut <= 12) {
                *lpdwOut = *lpdwOut + 0x00800000;
                BitOut = 24;
            }
            else if (BitOut <= 20) {
                *lpdwOut = *lpdwOut + 0x80000000;
                BitOut = 0;
                lpdwOut++;
            }
            else if (BitOut <= 28) {
                *(++lpdwOut) = 0x00000080;
                BitOut = 8;
            }
            else {
                *(++lpdwOut) = 0x00008000;
                BitOut = 16;
            }

            *lpdwSizeOutputBuffer = (DWORD)((lpdwOut - lpdwOutputBuffer) * sizeof (DWORD) + ( BitOut >> 3));

            return TRUE;
        }

        else { //ERROR
#ifdef RDEBUG
            _tprintf( TEXT ("\n!!! ERROR 2D PREFIX dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

            return FALSE;
        }

lNextPrefix:
        ResBit += bShift;
        if (ResBit > 31) {
            lpdwResPtr++;
            ResBit -= 32;
        }

    } while (lpdwResPtr <= EndPtr);

    return FALSE;


}


BOOL
ConvMmrPageHiResToMrLoRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer
    )


{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               i;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               State;
    DWORD               EolCount;
    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;
    DWORD               t0, t1, tdelta;

    WORD                LineMhArray[MaxColorTransPerLine];
    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];

    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pMhLine = LineMhArray;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;

    WORD                PrevValue;
    WORD                CurValue;
    BOOL                CurColor;
    WORD                CurPos;
    WORD                CurRun;
    BYTE                BitOut;
    DWORD               *lpdwOut;
    PCODETABLE          pTableEntry;
    PCODETABLE          pCodeTable;

    BYTE                dwNewBitOut;
    LPDWORD             lpdwOutLimit;



    lpdwOutLimit = lpdwOutputBuffer + ( (*lpdwSizeOutputBuffer) >> 2 );


    // since we need to decode every src MMR line and encode to MR
    // dropping every other line, we will use 3 buffers to hold data
    // and we will NOT copy memory; just re-point to a right location.
    //
    // Action per (Lines%4) :
    //
    // 1 -> MH
    // 2 -> skip
    // 3 -> MR as a delta between last MH and Current lines.
    // 0 -> skip
    //


    // start Pointers


    pRefLine = Line1Array;
    pCurLine = LineMhArray;

    lpdwOut = lpdwOutputBuffer;
    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, *lpdwSizeOutputBuffer );


    t0 = GetTickCount();

    Lines = 0;
    EolCount = 1;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;



    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;



    // 2D line decode loop
    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;


    // first REF line is all white
    RIndex    = 1;
    *pRefLine = LINE_LENGTH;
    RValue    = LINE_LENGTH;
    RColor    = 0;


    //
    // prefix loop
    //

    do {


        if (RunLength == lineWidth) {

#ifdef RDEBUG
            _tprintf( TEXT(" EOL\n\n") );
#endif
            //
            // Output Dest Line
            //

            State = (++Lines) % 4;

            if (State == 2) {
                pRefLine = Line1Array;
                pCurLine = Line2Array;
                goto lSkipLoRes;
            }
            else if (State == 0) {
                pRefLine = Line1Array;
                pCurLine = LineMhArray;
                goto lSkipLoRes;
            }

            //
            // 1. Output Dest EOL byte aligned followed by a 1D/2D tag.
            //

            dwNewBitOut = gc_AlignEolTable[ BitOut ];
            if (dwNewBitOut < BitOut) {
                lpdwOut++;
            }

            BitOut = dwNewBitOut;

            *lpdwOut += (0x00000001 << (BitOut++) );

            if (BitOut == 32) {
                BitOut = 0;
                lpdwOut++;
            }


            if (State == 1) {
                // 2. Output MH line based on Color Trans. Array

                *lpdwOut += (0x00000001 << (BitOut++));

                PrevValue  = 0;
                CurColor = WHITE_COLOR;

                for (CurPos=0;  CurPos < MaxColorTransPerLine; CurPos++) {

                    CurValue = *(pCurLine + CurPos);
                    CurRun   = CurValue - PrevValue;

                    pCodeTable = CurColor ? BlackRunCodesReversed : WhiteRunCodesReversed;

                    // output makeup code if exists
                    if (CurRun >= 64) {
                        pTableEntry = pCodeTable + (63 + (CurRun >> 6));

                        *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                        if (BitOut + pTableEntry->length > 31)  {
                            *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                        }

                        BitOut += pTableEntry->length;
                        if (BitOut > 31) {
                            BitOut -= 32;
                        }

                        CurRun &= 0x3f;
                    }

                    // output terminating code always
                    pTableEntry = pCodeTable + CurRun;

                    *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

                    if (BitOut + pTableEntry->length > 31)  {
                        *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
                    }

                    BitOut += pTableEntry->length;
                    if (BitOut > 31) {
                        BitOut -= 32;
                    }



                    if ( CurValue == LINE_LENGTH) {
                        break;
                    }

                    PrevValue = CurValue;
                    CurColor  = 1 - CurColor;

                }

                pRefLine = LineMhArray;
                pCurLine = Line1Array;

            }
            else {
                // 2. Output 2D line - MR(MhRefLine, CurLine)

                BitOut++;  // no need to test < 32 : never happens.

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pMhLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    return FALSE;
                }

                pRefLine = Line2Array;
                pCurLine = Line1Array;

            }

lSkipLoRes:
            // Next Src Line

            RIndex   =  0;
            RValue   =  *pRefLine;
            RColor   =  0;

            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;


        }

        if (ResBit <= 25 ) {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        iCode = ( (short)  ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4) {
            // VERTICAL -3...+3
#ifdef RDEBUG
            _tprintf( TEXT (" V%2d "), iCode );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) ) {
                while (++RIndex < MaxColorTransPerLine) {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                        // BUGBUG will change to break; after debugging
                        goto lFound;
                    }
                }

#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                return FALSE;
lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)  {
                a0 = RValue + iCode;
            }
            else {
                if (RValue == LINE_LENGTH) {
                    a0 = RValue + iCode;
                }
                else {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
            if (CColor) {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) ) {
#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d\n "), a0, RunLength );
#endif
                return FALSE;

            }

            RunLength = a0;
            CColor = 1 - CColor;

        }

        else if (iCode == HORIZ_PREFIX) {
#ifdef RDEBUG
            _tprintf( TEXT (" H ") );
#endif


            ResBit += bShift;
            if (ResBit > 31) {
                ResBit -= 32;
                lpdwResPtr++;
            }


            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;


            // 1-D Table look-up loop
            do {

                if (ResBit <= 17) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }


                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;

                // All bytes

                for (i=0; i<4; i++)  {

                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT) {

                        if (CodeT < 28) {
                            RunLength += (CodeT << 6);

                            // sanity check

                            if (RunLength > LINE_LENGTH)  {
#ifdef RDEBUG
                                _tprintf( TEXT ("!!! ERROR MMR src codeT=%d, RunLength=%d\n "), a0, RunLength );
#endif
                                return FALSE;

                            }

#ifdef RDEBUG
                            if (Color) {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS) {
                            goto lNextIndexHoriz;
                        }

                        else  {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
#ifdef RDEBUG
                            _tprintf( TEXT ("\n!!! ERROR 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                            return FALSE;
                        }

                    }

                    else {  // terminating code
                        RunLength += CodeT;
                        *(pCurLine + (CIndex++) ) = RunLength;

                        // sanity check

                        if ( (RunLength > LINE_LENGTH) || ( CIndex >= MaxColorTransPerLine ) ) {
#ifdef RDEBUG
                            _tprintf( TEXT ("!!! ERROR MMR RunLength=%d, CodeT=%d, CIndex=%d\n "),
                                            RunLength, CodeT, CIndex );
#endif
                            return FALSE;

                        }


#ifdef RDEBUG
                        if (Color) {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                        if (++CountHoriz >= 2)  {
                            if (fFirstResult) {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else {
                                // rare case will take time
                                bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }

                    pByteTable++;

                }



lNextIndexHoriz:
                if (Color != CColor) {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31) {
                        lpdwResPtr++;
                        ResBit -= 32;
                }
            } while (lpdwResPtr <= EndPtr);

            return FALSE;




        }

        else if (iCode == PASS_PREFIX) {
#ifdef RDEBUG
            _tprintf( TEXT (" P ") );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) ) {
                while (++RIndex < MaxColorTransPerLine) {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                        goto lFound2;
                    }
                }

#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                return FALSE;
            }

lFound2:

            RColor = RIndex & 1;


            if (RValue != LINE_LENGTH) {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) ) {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else {
                    a0 = RValue1;
                }
            }
            else {
                a0 = LINE_LENGTH;
            }



#ifdef RDEBUG
            if (CColor) {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) ) {
#ifdef RDEBUG
                _tprintf( TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d\n "), a0, RunLength );
#endif
                return FALSE;

            }

            RunLength = a0;

        }

        else if (iCode == LOOK_FOR_EOL_PREFIX) {
#ifdef RDEBUG
            // _tprintf( TEXT (" E ") );
#endif

            t1 = GetTickCount();
            tdelta = t1 - t0;

            // BUGBUG. In T.30 we send un-aligned RTC by request
            // so we shouldn't send it here. It also conflicts
            // with the filtering and expanding T.30 code


#if 0

            // EOL for the last line
            (*lpdwOut) += ( ((DWORD) (EOL_REVERSED_CODE)) << BitOut);
            if ( (BitOut = BitOut + EOL_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (EOL_REVERSED_CODE) ) >> (EOL_LENGTH - BitOut);
            }

            // 6 1D-eols
            for (i=0; i<6; i++) {

                (*lpdwOut) += ( ((DWORD) (TAG_1D_EOL_REVERSED_CODE)) << BitOut);
                if ( (BitOut = BitOut + TAG_1D_EOL_LENGTH ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (TAG_1D_EOL_REVERSED_CODE) ) >> (TAG_1D_EOL_LENGTH - BitOut);
                }
            }


            *(++lpdwOut) = 0;
#endif

            // BUGBUG  Use gc_AlignEolTable[] here !
            // 1. Output EOL byte aligned for the last line.

            if (BitOut <= 4)  {
                *lpdwOut = *lpdwOut + 0x00008000;
                BitOut = 16;
            }
            else if (BitOut <= 12) {
                *lpdwOut = *lpdwOut + 0x00800000;
                BitOut = 24;
            }
            else if (BitOut <= 20) {
                *lpdwOut = *lpdwOut + 0x80000000;
                BitOut = 0;
                lpdwOut++;
            }
            else if (BitOut <= 28) {
                *(++lpdwOut) = 0x00000080;
                BitOut = 8;
            }
            else {
                *(++lpdwOut) = 0x00008000;
                BitOut = 16;
            }

            *lpdwSizeOutputBuffer = (DWORD)((lpdwOut - lpdwOutputBuffer) * sizeof (DWORD) + ( BitOut >> 3));

            return TRUE;
        }

        else { //ERROR
#ifdef RDEBUG
            _tprintf( TEXT ("\n!!! ERROR 2D PREFIX dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

            return FALSE;
        }

lNextPrefix:
        ResBit += bShift;
        if (ResBit > 31) {
            lpdwResPtr++;
            ResBit -= 32;
        }

    } while (lpdwResPtr <= EndPtr);

    return FALSE;


}


BOOL
FindNextEol(
    LPDWORD     lpdwStartPtr,
    BYTE        StartBitInDword,
    LPDWORD     lpdwEndPtr,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    BOOL        fTestLength,
    BOOL       *fError
    )
{


    DWORD       *pdwCur;
    LPBYTE      lpbCur;
    LPBYTE      BegPtr;
    BYTE        BegFirst1;
    DWORD       deltaBytes;

    BYTE        temp;
    BYTE        StartBit;
    LPBYTE      StartPtr;


    *fError  = 0;
    temp     = StartBitInDword >> 3;
    StartBit = StartBitInDword - (temp << 3);
    StartPtr = ((BYTE *) lpdwStartPtr) + temp;
    lpbCur   = StartPtr+1;                  // EOL can't be at Start: it takes more than 1 byte.
    BegPtr   = StartPtr;


    BegFirst1 = First1[*StartPtr];
    if (BegFirst1 > StartBit) {
        if (fTestLength == DO_TEST_LENGTH) {
            // should not be "1" in same byte
            *fError = 1;
        }
    }
    else {
        BegFirst1 = StartBit;
    }

    // very often there are lots of zeroes, take care of them first.
    // 1. before actual start of encoded bitstream
    // 2. fills

    do {
        if ( *lpbCur == 0 )  {

            // align to DWORD
            while ( ((ULONG_PTR) lpbCur) & 3)  {
                if ( *lpbCur != 0  ||  ++lpbCur >= (BYTE *) lpdwEndPtr )   {
                    goto lNext;
                }
            }

            // DWORD stretch
            pdwCur = (DWORD *) lpbCur;

            do  {
                if ( *pdwCur != 0) {
                    lpbCur = (LPBYTE) pdwCur;

                    // find exactly first non-zero byte
                    while (*lpbCur == 0) {
                        lpbCur++;
                    }

                    goto lNext;
                }
            }  while (pdwCur++ < lpdwEndPtr);


            // rest- BYTE stretch
            lpbCur = (BYTE *) pdwCur;

            while (lpbCur++ <= (BYTE *) lpdwEndPtr)  {
                if ( *lpbCur != 0) {
                    goto lNext;
                }
            }

        }


lNext:
        if (lpbCur >= (BYTE *) lpdwEndPtr)  {
            if ( *lpbCur == 0 ) {
                return FALSE;
            }
        }


        deltaBytes = (DWORD)(lpbCur - BegPtr);

        *ResBit = Last1[*lpbCur];
        if ( (deltaBytes<<3) + (*ResBit - BegFirst1 ) >= 11 ) {
            *lpdwResPtr = (LPDWORD) ( ((ULONG_PTR) lpbCur) & ~(0x3) );
            *ResBit += ( (BYTE) (( ((ULONG_PTR) lpbCur) & 0x3) << 3 ) );

            // return Byte/Bit right after EOL bitstream
            if (++*ResBit > 31) {
                *ResBit -= 32;
                (*lpdwResPtr)++;
            }
            return TRUE;
        }
        // error for DO_TEST_LENGTH case
        else if (fTestLength == DO_TEST_LENGTH)  {
            *fError = 1;
        }

        BegPtr = lpbCur;
        BegFirst1 = First1[*lpbCur];

    } while ( (++lpbCur) <= (BYTE *) lpdwEndPtr);



    return FALSE;
}



BOOL
OutputMmrLine(
    LPDWORD     lpdwOut,
    BYTE        BitOut,
    WORD       *pCurLine,
    WORD       *pRefLine,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    LPDWORD     lpdwOutLimit,
    DWORD       dwLineWidth
    )
{


    INT    a0, a1, a2, b1, b2, distance;
    INT    i;
    INT    IsA0Black;
    INT    a0Index = 0;
    INT    b1Index = 0;
    INT    lineWidth = (INT) dwLineWidth;



#ifdef RDEBUG
    if ( g_fDebGlobOut )
    if (g_fDebGlobOutColors == 1) {
        for (i=0; ;i++) {
            _tprintf( TEXT("%03d> %04d; "), i, *(pCurLine+i) );
            if ( *(pCurLine+i) >= lineWidth ) {
                break;
            }
        }
    }
#endif


    a0 = 0;

    // a1, b1 - 1st black
    a1 = *pCurLine;
    b1 = *pRefLine;



    while (TRUE) {

        if (lpdwOut >= lpdwOutLimit) {
            return FALSE;
        }

        b2 = (b1 >= lineWidth) ? lineWidth :  *(pRefLine + b1Index + 1);

        if (b2 < a1) {

            // Pass mode
            //OutputBits( TiffInstance, PASSCODE_LENGTH, PASSCODE );

#ifdef RDEBUG
            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" P ") );
                if (a0Index & 1) {
                    _tprintf( TEXT ("b%d "), (b2 - a0) );
                }
                else {
                    _tprintf( TEXT ("w%d "), (b2 - a0) );
                }
            }
#endif


            (*lpdwOut) += ( ((DWORD) (PASSCODE_REVERSED)) << BitOut);
            if ( (BitOut = BitOut + PASSCODE_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (PASSCODE_REVERSED) ) >> (PASSCODE_LENGTH - BitOut);
            }

            a0 = b2;

        } else if ((distance = a1 - b1) <= 3 && distance >= -3) {

            // Vertical mode
            //OutputBits( TiffInstance, VertCodes[distance+3].length, VertCodes[distance+3].code );

#ifdef RDEBUG
            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" V%2d "), distance );
                if (a0Index & 1) {
                    _tprintf( TEXT ("b%d "), (a1 - a0) );
                }
                else {
                    _tprintf( TEXT ("w%d "), (a1 - a0) );
                }
            }

#endif

            (*lpdwOut) += ( ( (DWORD) VertCodesReversed[distance+3].code) << BitOut);
            if ( (BitOut = BitOut + VertCodesReversed[distance+3].length ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (VertCodesReversed[distance+3].code) ) >> (VertCodesReversed[distance+3].length - BitOut);
            }

            a0 = a1;

        } else {

            // Horizontal mode

            a2 = (a1 >= lineWidth) ? lineWidth :  *(pCurLine + a0Index + 1);

            //OutputBits( TiffInstance, HORZCODE_LENGTH, HORZCODE );

            (*lpdwOut) += ( ((DWORD) (HORZCODE_REVERSED)) << BitOut);
            if ( (BitOut = BitOut + HORZCODE_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (HORZCODE_REVERSED) ) >> (HORZCODE_LENGTH - BitOut);
            }


            for (i=a0Index; i<MaxColorTransPerLine; i++) {
                if ( *(pCurLine + i) > a0 ) {
                    a0Index = i;
                    IsA0Black = i & 1;
                    break;
                }
            }


#ifdef RDEBUG

            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" H ") );
            }


#endif

            if ( (a1 != 0) && IsA0Black ) {
                OutputRunFastReversed(a1-a0, BLACK, &lpdwOut, &BitOut);
                OutputRunFastReversed(a2-a1, WHITE, &lpdwOut, &BitOut);
            } else {
                OutputRunFastReversed(a1-a0, WHITE, &lpdwOut, &BitOut);
                OutputRunFastReversed(a2-a1, BLACK, &lpdwOut, &BitOut);
            }

            a0 = a2;
        }

        if (a0 >= lineWidth) {
            break;
        }



        // a1 = NextChangingElement( plinebuf, a0, lineWidth, GetBit( plinebuf, a0 ) );

        if (a0 == lineWidth) {
            a1 = a0;
        }
        else {
            while ( *(pCurLine + a0Index) <= a0 ) {
                a0Index++;
            }

            a1 =  *(pCurLine + a0Index);
        }


        // b1 = NextChangingElement( prefline, a0, lineWidth, !GetBit( plinebuf, a0 ) );
        // b1 = NextChangingElement( prefline, b1, lineWidth, GetBit( plinebuf, a0 ) );
        // another words - b1 should be a color trans. after a0 with opposite from SrcLine(a0) color.

        if (a0 == lineWidth) {
            b1 = a0;
        }
        else {
            // b1 can go one index backwards due to color change
            if (b1Index > 0) {
                b1Index--;
            }

            while ( *(pRefLine + b1Index) <= a0 ) {
                b1Index++;
            }

            b1 =  *(pRefLine + b1Index);

            if ( ( b1Index & 1 ) != (a0Index & 1) ) {
                if (b1 < lineWidth) {
                    b1 =  *(pRefLine + (++b1Index));
                }
            }

        }

    }
    *lpdwResPtr = lpdwOut;
    *ResBit = BitOut;
    return TRUE;
}


BOOL
ConvFileMhToMmr(
    LPTSTR              SrcFileName,
    LPTSTR              DestFileName
    )

{


    HANDLE      hTiffSrc;
    DWORD       CurrPage;
    LPBYTE      pSrcBits;

    HANDLE      hTiffDest;
    DWORD       DestSize;
    LPBYTE      pDestBits;


    DWORD       PageCnt;

    BOOL        bRet = FALSE;


    TIFF_INFO           TiffInfoSrc;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    LPDWORD             EndBuffer;
    BOOL                fTestLength;
    BOOL                fError;

    DWORD               *lpdwOutStart;
    DWORD               *lpdwOut;
    BYTE                BitOut;
    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;

    DWORD               BufferSize;

    WORD                RIndex;
    WORD                CIndex;
    WORD                RValue;
    WORD                RunLength=0;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    BOOL                LastLineBad;
    DWORD               lineWidth;
    PBYTE               Table;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    BOOL                Color;
    DWORD               dwIndex;
    PBYTE               pByteTable;
    PBYTE               pByteTail;
    WORD                CodeT;
    BYTE                TailT;
    BYTE                MakeupT;
    DWORD               i;
    DWORD               ConsecBadLines=0;
    DWORD               AllowedBadFaxLines=5;
    DWORD               AllowedConsecBadLines=5;
    PTIFF_INSTANCE_DATA TiffInstanceDest;
    DWORD               DestHiRes;
    LPDWORD             lpdwOutLimit;

    // debugging

    DWORD               DbgLinesStop = 0;
    DWORD               DbgStopCnt = 0;







    CurrPage = 1;

    hTiffSrc = TiffOpen(
        SrcFileName,
        &TiffInfoSrc,
        TRUE,
        FILLORDER_LSB2MSB
        );
    if (! hTiffSrc) {
        return FALSE;
    }

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }


    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        TiffInfoSrc.ImageWidth,
        FILLORDER_LSB2MSB,
        DestHiRes);

    if (! hTiffDest) {
        TiffClose(hTiffSrc);
        return FALSE;
    }

    TiffInstanceDest = (PTIFF_INSTANCE_DATA) hTiffDest;


    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        return FALSE;
    }


    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
        return FALSE;
    }



    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) ) {
            goto l_exit;
        }

        if (! TiffStartPage(hTiffDest) ) {
            goto l_exit;
        }

        // here we decode MH page line by line into Color Trans. Array
        // fix all the errors
        // and encode clean data into MMR page

        lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

        BufferSize = TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8);
        if (!GetTiffBits(hTiffSrc, (LPBYTE) lpdwResPtr, &BufferSize, FILLORDER_LSB2MSB) ) {
            goto l_exit;
        }

        ResBit = 0;
        EndBuffer = lpdwResPtr + (BufferSize / sizeof(DWORD) );

        pRefLine = Line1Array;
        pCurLine = Line2Array;
        lpdwOutStart = lpdwOut = (LPDWORD) ( (ULONG_PTR) pDestBits & ~(0x3) );
        lpdwOutLimit = lpdwOutStart + ( (TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8) ) >> 2 );

        BitOut = 0;
        ZeroMemory( (BYTE *) lpdwOut, TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8) );

        CIndex    = 0;
        RunLength = 0;


        // first REF line is all white
        RIndex    = 1;
        *pRefLine = LINE_LENGTH;
        RValue    = LINE_LENGTH;



        Lines = 0;
        EolCount = 1;
        BadFaxLines = 0;
        LastLineBad = FALSE;
        fTestLength = DO_NOT_TEST_LENGTH;
        lineWidth = LINE_LENGTH;


        //
        // find first EOL in a block
        //

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

            goto bad_exit;
        }

        // output first "all white" line
        CIndex    = 1;
        *pCurLine = LINE_LENGTH;

        if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
            goto bad_exit;
        }


        RIndex = CIndex;
        CIndex = 0;
        Lines++;

        Table = TableWhite;
        Color = WHITE_COLOR;

        //
        // EOL loop
        //
        do {

            // Table look-up loop
            do {

                if (Lines == DbgLinesStop) {
                    DbgStopCnt++;
                }

                if (ResBit <= 17) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;


                for (i=0; i<4; i++) {

                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT) {

                        if (CodeT < 28) {
                            RunLength += (CodeT << 6);

                            if (RunLength > lineWidth) {
                                fTestLength =  DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            EolCount=0;
#ifdef RDEBUGS
                            if (g_fDebGlobOutS)
                            if (Color) {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS) {
                            goto lNextIndex;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)  {
                            fTestLength =  DO_TEST_LENGTH;
                            TailT = *pByteTail & 0x0f;

                            ResBit += TailT;

                            if (ResBit > 31) {
                                    lpdwResPtr++;
                                    ResBit -= 32;
                            }

                            goto lFindNextEOL;
                        }

                        else if (CodeT == EOL_FOUND_CODE) {
#ifdef RDEBUG
                            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif
                            if ( RunLength != lineWidth ) {
                                if (RunLength != 0) {
                                    BadFaxLines++;
                                   if (LastLineBad) {
                                        ConsecBadLines++;
                                    }

                                    if (BadFaxLines > AllowedBadFaxLines ||
                                        ConsecBadLines > AllowedConsecBadLines) {

                                            goto bad_exit;
                                    }
                                }
                                else {
                                    // RunLength is 0
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                }
                            }
                            else {
                                LastLineBad = FALSE;
                                ConsecBadLines = 0;

                                // end of a good line.
                                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                                    goto bad_exit;
                                }

                                pTmpSwap = pRefLine;
                                pRefLine = pCurLine;
                                pCurLine = pTmpSwap;
                                RIndex = CIndex;
                                CIndex = 0;


                            }


                            Lines++;
                            RunLength = 0;

                            Table = TableWhite;
                            Color = WHITE_COLOR;
                        }

                        else if (CodeT == ERROR_CODE) {
                            BadFaxLines++;
                            if (LastLineBad) {
                                ConsecBadLines++;
                            }

                            if (BadFaxLines > AllowedBadFaxLines ||
                                ConsecBadLines > AllowedConsecBadLines) {

                                    goto bad_exit;
                            }

                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
                        else {
#ifdef RDEBUG
                            _tprintf( TEXT("ERROR: WRONG code: index=%04x\n"), dwIndex);
#endif
                            goto bad_exit;
                        }
                    }

                    else {  // terminating code
                        RunLength += CodeT;
                        if (RunLength > lineWidth) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        *(pCurLine + (CIndex++) ) = RunLength;

                        if (CIndex >= MaxColorTransPerLine ) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }


                        EolCount=0;

#ifdef RDEBUGS
                        if (g_fDebGlobOutS)
                        if (Color) {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }

                    pByteTable++;
                }


lNextIndex:
                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31) {
                        lpdwResPtr++;
                        ResBit -= 32;
                }
            } while (lpdwResPtr <= EndBuffer);

            // if we got here it means that line is longer than 4K.

            goto bad_exit;


lFindNextEOL:

#ifdef RDEBUG
            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif

            if (RunLength != lineWidth) {
                if (RunLength != 0) {
                    BadFaxLines++;
                    if (LastLineBad) {
                        ConsecBadLines++;
                    }

                    if (BadFaxLines > AllowedBadFaxLines ||
                        ConsecBadLines > AllowedConsecBadLines) {

                            goto bad_exit;
                    }
                }
                else {
                    // RunLength is 0
                    EolCount++;

                    if (EolCount >= 5)  {

                        goto good_exit;
                    }

                }
            }
            else {
                Lines++;
                ConsecBadLines=0;

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    goto bad_exit;
                }

                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;
                RIndex = CIndex;
                CIndex = 0;


            }

            RunLength = 0;

            if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

                goto bad_exit;
            }

            if (fTestLength == DO_TEST_LENGTH && fError) {
                BadFaxLines++;
                if (LastLineBad) {
                    ConsecBadLines++;
                }

                if (BadFaxLines > AllowedBadFaxLines ||
                    ConsecBadLines > AllowedConsecBadLines) {

                        goto bad_exit;
                }
            }

            Table = TableWhite;
            Color = WHITE_COLOR;


        } while (lpdwResPtr <= EndBuffer);


        goto bad_exit;


bad_exit:


good_exit:

        *(++lpdwOut) = 0x80000000;
        *(++lpdwOut) = 0x80000000;
        Lines--;

        DestSize = (DWORD)((lpdwOut - lpdwOutStart) * sizeof (DWORD));
        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwOutStart, DestSize) ) {
            goto l_exit;
        }

        TiffInstanceDest->Lines        = Lines;
        TiffInstanceDest->ImageWidth   = lineWidth;

        if (! TiffEndPage(hTiffDest) ) {
            goto l_exit;
        }

    }

    bRet = TRUE;

l_exit:


    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
    VirtualFree ( pDestBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);

    return bRet;




}

BOOL
TiffPostProcessFast(
    LPTSTR SrcFileName,
    LPTSTR DstFileName
    )

/*++

Routine Description:

    Opens an existing TIFF file for reading.
    And call the proper process function according the compression type

Arguments:

    FileName            - Full or partial path/file name

Return Value:

    TRUE for success, FALSE for failure.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance;
    TIFF_INFO TiffInfo;


    // Open SrcFileName and set it on the first page. TiffInfo will have information about the page.
    TiffInstance = (PTIFF_INSTANCE_DATA) TiffOpen(
        SrcFileName,
        &TiffInfo,
        FALSE,
        FILLORDER_LSB2MSB
        );

    if (!TiffInstance) {
        return FALSE;
    }

    if (TiffInstance->ImageHeight) {
        TiffClose( (HANDLE) TiffInstance );
        return TRUE;
    }

    switch( TiffInstance->CompressionType )
    {
        case TIFF_COMPRESSION_MH:

            if (!PostProcessMhToMmr( (HANDLE) TiffInstance, TiffInfo, DstFileName ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            break;

        case TIFF_COMPRESSION_MR:
            if (!PostProcessMrToMmr( (HANDLE) TiffInstance, TiffInfo, DstFileName ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            break;

        case TIFF_COMPRESSION_MMR:
            TiffClose( (HANDLE) TiffInstance );
            break;

        default:
            ASSERT_FALSE;
            TiffClose( (HANDLE) TiffInstance );
            return FALSE;
    }
    return TRUE;
}

//#define RDEBUG  1
//#define RDEBUGS  1

#define ADD_BAD_LINE_AND_CHECK_BAD_EXIT             \
    BadFaxLines++;                                  \
    if (LastLineBad) {                              \
        ConsecBadLines++;                           \
    }                                               

//    if (BadFaxLines > AllowedBadFaxLines ||         \
//        ConsecBadLines > AllowedConsecBadLines) {   \
//            goto bad_exit;                          \
//    }


BOOL
PostProcessMhToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO   TiffInfoSrc,
    LPTSTR      NewFileName
    )

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiffSrc;

    TCHAR       DestFileName[MAX_PATH];
    TCHAR       SrcFileName[MAX_PATH];
    DWORD       CurrPage;
    LPBYTE      pSrcBits;

    HANDLE      hTiffDest;
    DWORD       DestSize;
    LPBYTE      pDestBits;


    DWORD       PageCnt;

    BOOL        bRet = FALSE;


    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    LPDWORD             EndBuffer;
    BOOL                fTestLength;
    BOOL                fError;

    DWORD               *lpdwOutStart;
    DWORD               *lpdwOut;
    BYTE                BitOut;
    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;

    DWORD               BufferSize;
    DWORD               BufferUsedSize;

    DWORD               DestBufferSize;

    WORD                RIndex;
    WORD                CIndex;
    WORD                RValue;
    WORD                RunLength=0;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines=0;
    BOOL                LastLineBad;
    DWORD               lineWidth = TiffInfoSrc.ImageWidth; // This could change from page to page.
    PBYTE               Table;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    BOOL                Color;
    DWORD               dwIndex;
    PBYTE               pByteTable;
    PBYTE               pByteTail;
    WORD                CodeT;
    BYTE                TailT;
    BYTE                MakeupT;
    DWORD               i;
    DWORD               ConsecBadLines=0;
    PTIFF_INSTANCE_DATA TiffInstanceDest;
    DWORD               MaxImageHeight=2400;
    DWORD               DestHiRes;
    LPDWORD             lpdwOutLimit;

    // debugging

    DWORD               DbgLinesStop = 0;
    DWORD               DbgStopCnt = 0;

    //
    // Build Dest. file name from Src. file name
    //

    if (NewFileName == NULL) {
        _tcscpy(DestFileName, TiffInstance->FileName);
        DestFileName[_tcslen(DestFileName) - 1] = TEXT('$');
    } else {
        _tcscpy(DestFileName, NewFileName);
    }

    _tcscpy(SrcFileName, TiffInstance->FileName);

    CurrPage = 1;

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }

    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        lineWidth,
        FILLORDER_LSB2MSB,
        DestHiRes
        );
    if (! hTiffDest) {
        TiffClose(hTiffSrc);
        return FALSE;
    }

    TiffInstanceDest = (PTIFF_INSTANCE_DATA) hTiffDest;

    BufferSize = MaxImageHeight * (TiffInfoSrc.ImageWidth / 8);

    DestBufferSize = BufferSize + 200000;

    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        DeleteFile (DestFileName);
        return FALSE;
    }

    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        DestBufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
        DeleteFile (DestFileName);
        return FALSE;
    }


    // Iterate all the pages
    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        // Also read the strip data to memory (TiffInstance->StripData)
        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) ) {
            goto bad_exit;
        }


        // TiffInstance is the same pointer as hTiffSrc
        lineWidth = TiffInstance->ImageWidth;

        if (! TiffStartPage(hTiffDest) ) {
            goto bad_exit;
        }

        // here we decode MH page line by line into Color Trans. Array
        // fix all the errors
        // and encode clean data into MMR page

        lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

        BufferUsedSize = BufferSize;

        if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {

            if (BufferUsedSize > BufferSize) {
                VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                VirtualFree ( pDestBits, 0 , MEM_RELEASE );

                BufferSize = BufferUsedSize;
                DestBufferSize = BufferSize + 200000;

                pSrcBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    BufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pSrcBits) {
                    TiffClose(hTiffSrc);
                    TiffClose(hTiffDest);
                    DeleteFile(DestFileName);
                    return FALSE;
                }

                pDestBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    DestBufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pDestBits) {
                    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                    TiffClose(hTiffSrc);
                    TiffClose(hTiffDest);
                    DeleteFile(DestFileName);
                    return FALSE;
                }

                lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

                if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {
                    goto bad_exit;
                }
            }
            else {
                goto bad_exit;
            }
        }

        ResBit = 0;
        EndBuffer = lpdwResPtr + (BufferUsedSize / sizeof(DWORD) );

        pRefLine = Line1Array;
        pCurLine = Line2Array;
        lpdwOutStart = lpdwOut = (LPDWORD) ( (ULONG_PTR) pDestBits & ~(0x3) );
        lpdwOutLimit = lpdwOutStart + ( DestBufferSize >> 2 );

        BitOut = 0;
        ZeroMemory( (BYTE *) lpdwOut, DestBufferSize );

        CIndex    = 0;
        RunLength = 0;


        // first REF line is all white
        RIndex    = 1;
        *pRefLine = (WORD) lineWidth;
        RValue    = (WORD) lineWidth;



        Lines = 0;
        EolCount = 1;
        BadFaxLines = 0;
        LastLineBad = FALSE;
        fTestLength = DO_NOT_TEST_LENGTH;



        //
        // find first EOL in a block
        //

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {
            goto bad_exit;
        }

        // output first "all white" line
        CIndex    = 1;
        *pCurLine = (WORD) lineWidth;

        if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
            goto bad_exit;
        }


        RIndex = CIndex;
        CIndex = 0;
        Lines++;

        Table = TableWhite;
        Color = WHITE_COLOR;

        //
        // EOL loop
        //
        do {

            // Table look-up loop
            do {

                if (Lines == DbgLinesStop) {
                    DbgStopCnt++;
                }

                if (ResBit <= 17) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;


                for (i=0; i<4; i++) {

                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT) {

                        if (CodeT <= MAX_TIFF_MAKEUP) {
                            RunLength += (CodeT << 6);

                            if (RunLength > lineWidth) {
                                fTestLength =  DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            EolCount=0;
#ifdef RDEBUGS

                            if (g_fDebGlobOutS)
                            if (Color) {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS) {
                            goto lNextIndex;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)  {
                            fTestLength =  DO_TEST_LENGTH;
                            TailT = *pByteTail & 0x0f;

                            ResBit += TailT;

                            if (ResBit > 31) {
                                    lpdwResPtr++;
                                    ResBit -= 32;
                            }

                            goto lFindNextEOL;
                        }

                        else if (CodeT == EOL_FOUND_CODE) {
#ifdef RDEBUG
                            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif
                            if ( RunLength != lineWidth ) {
                                if (RunLength != 0) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                                }
                                else {
                                    // RunLength is 0
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                }
                            }
                            else {
                                LastLineBad = FALSE;
                                ConsecBadLines = 0;

                                // end of a good line.
                                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                                    goto bad_exit;
                                }

                                pTmpSwap = pRefLine;
                                pRefLine = pCurLine;
                                pCurLine = pTmpSwap;
                                RIndex = CIndex;
                                Lines++;

                            }


                            CIndex = 0;
                            RunLength = 0;

                            Table = TableWhite;
                            Color = WHITE_COLOR;
                        }

                        else if (CodeT == ERROR_CODE) {
                            ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
                        else {
#ifdef RDEBUG
                            _tprintf( TEXT("ERROR: WRONG code: index=%04x\n"), dwIndex);
#endif


                            goto bad_exit;
                        }
                    }

                    else {  // terminating code
                        RunLength += CodeT;
                        if (RunLength > lineWidth) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        *(pCurLine + (CIndex++) ) = RunLength;

                        if (CIndex >= MaxColorTransPerLine ) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }


                        EolCount=0;

#ifdef RDEBUGS
                        if (g_fDebGlobOutS)

                        if (Color) {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }

                    pByteTable++;
                }


lNextIndex:
                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31) {
                        lpdwResPtr++;
                        ResBit -= 32;
                }
            } while (lpdwResPtr <= EndBuffer);

            // if we got here it means that line is longer than 4K  OR
            // we missed EOF while decoding a BAD line.
            ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

            goto good_exit;


lFindNextEOL:

#ifdef RDEBUG
            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif

            if (RunLength != lineWidth) {
                if (RunLength != 0) {
                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                }
                else {
                    // RunLength is 0
                    EolCount++;

                    if (EolCount >= 5)  {

                        goto good_exit;
                    }

                }
            }
            else {
                Lines++;
                ConsecBadLines=0;

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    goto bad_exit;
                }

                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;
                RIndex = CIndex;

            }

            CIndex = 0;
            RunLength = 0;

            if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                goto good_exit;
            }

            if (fTestLength == DO_TEST_LENGTH && fError) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
            }

            Table = TableWhite;
            Color = WHITE_COLOR;


        } while (lpdwResPtr <= EndBuffer);

        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

        // Reached the end of a PAGE - close it and proceed to the next page
good_exit:

        *(++lpdwOut) = 0x80000000;
        *(++lpdwOut) = 0x80000000;
        Lines--;

        DestSize = (DWORD)((lpdwOut - lpdwOutStart) * sizeof (DWORD));
        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwOutStart, DestSize) ) { // This fun always return true
            goto bad_exit;
        }

        TiffInstanceDest->Lines        = Lines;
        TiffInstanceDest->ImageWidth   = lineWidth;

        if (! TiffEndPage(hTiffDest) ) {
            goto bad_exit;
        }

    }  // End of FOR loop that run on all the pages.

    bRet = TRUE;

    // Finished the DOCUMENT - either successfully or not.
bad_exit:

    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
    VirtualFree ( pDestBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);

    if (TRUE == bRet)
    {
        //
        // Almost Success
        //
        if (NULL == NewFileName)
        {
            //replace the original MH file by the new clean MMR file
            DeleteFile(SrcFileName);
            bRet = MoveFile(DestFileName, SrcFileName);
        }
    }

    if (FALSE == bRet)
    {
        DeleteFile(DestFileName);
    }
    return bRet;
}


BOOL
PostProcessMrToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO   TiffInfoSrc,
    LPTSTR      NewFileName
    )

{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiffSrc;

    TCHAR       DestFileName[MAX_PATH];
    TCHAR       SrcFileName[MAX_PATH];
    DWORD       CurrPage;
    LPBYTE      pSrcBits;
    HANDLE      hTiffDest;
    DWORD       DestSize;
    LPBYTE      pDestBits;
    DWORD       PageCnt;
    BOOL        bRet = FALSE;

    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    LPDWORD             EndBuffer;
    BOOL                fTestLength;
    BOOL                fError;

    DWORD               *lpdwOutStart;
    DWORD               *lpdwOut;
    BYTE                BitOut;
    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;

    DWORD               BufferSize;
    DWORD               BufferUsedSize;

    DWORD               DestBufferSize;

    WORD                RIndex;
    WORD                CIndex;
    WORD                RValue;
    WORD                RunLength=0;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    BOOL                LastLineBad;
    DWORD               lineWidth = TiffInfoSrc.ImageWidth;
    PBYTE               Table;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    BOOL                Color;
    DWORD               dwIndex;
    PBYTE               pByteTable;
    PBYTE               pByteTail;
    WORD                CodeT;
    BYTE                TailT;
    BYTE                MakeupT;
    DWORD               i;
    DWORD               ConsecBadLines=0;
    PTIFF_INSTANCE_DATA TiffInstanceDest;

    DWORD               dwTemp;
    BOOL                f1D=1;
    BYTE                Count2D;
    BYTE                CColor, RColor, RColor1;
    WORD                a0;
    WORD                RValue1;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;
    BYTE                Num2DLines=0;
    DWORD               MaxImageHeight=2400;
    DWORD               DestHiRes;
    LPDWORD             lpdwOutLimit;


    //
    // Build Dest. file name from Src. file name
    //

    if (NewFileName == NULL) {
        _tcscpy(DestFileName, TiffInstance->FileName);
        // sorry about that, this puts a $ instead of the last character of DestFileName
        _tcsnset(_tcsdec(DestFileName,_tcsrchr(DestFileName,TEXT('\0'))),TEXT('$'),1);
    } else {
        _tcscpy(DestFileName, NewFileName);
    }

    _tcscpy(SrcFileName, TiffInstance->FileName);

    CurrPage = 1;

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }

    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        lineWidth,
        FILLORDER_LSB2MSB,
        DestHiRes);

    if (! hTiffDest) {
        TiffClose(hTiffSrc);
        return FALSE;
    }

    TiffInstanceDest = (PTIFF_INSTANCE_DATA) hTiffDest;


    BufferSize = MaxImageHeight * (TiffInfoSrc.ImageWidth / 8);

    DestBufferSize = BufferSize + 200000;

    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        DeleteFile(DestFileName);
        return FALSE;
    }


    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        DestBufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
        TiffClose(hTiffSrc);
        TiffClose(hTiffDest);
        VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
        DeleteFile (DestFileName);
        return FALSE;
    }



    // Iterate all the pages
    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        // Also read the strip data to memory (TiffInstance->StripData)
        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) ) {
            goto bad_exit;
        }


        // TiffInstance is the same pointer as hTiffSrc
        lineWidth = TiffInstance->ImageWidth;

        if (! TiffStartPage(hTiffDest) ) {
            goto bad_exit;
        }

        // here we decode MR page line by line into Color Trans. Array
        // fix all the errors
        // and encode clean data into MMR page


        lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

        BufferUsedSize = BufferSize;

        if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {

            if (BufferUsedSize > BufferSize) {
                VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                VirtualFree ( pDestBits, 0 , MEM_RELEASE );

                BufferSize = BufferUsedSize;
                DestBufferSize = BufferSize + 200000;

                pSrcBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    BufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pSrcBits) {
                    TiffClose(hTiffSrc);
                    TiffClose(hTiffDest);
                    DeleteFile(DestFileName);
                    return FALSE;
                }

                pDestBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    DestBufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pDestBits) {
                    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                    TiffClose(hTiffSrc);
                    TiffClose(hTiffDest);
                    DeleteFile(DestFileName);
                    return FALSE;
                }

                lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

                if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {
                    goto bad_exit;
                }
            }
            else {
                goto bad_exit;
            }
        }

        ResBit = 0;
        EndBuffer = lpdwResPtr + (BufferUsedSize / sizeof(DWORD) );

        pRefLine = Line1Array;
        pCurLine = Line2Array;
        lpdwOutStart = lpdwOut = (LPDWORD) ( (ULONG_PTR) pDestBits & ~(0x3) );
        lpdwOutLimit = lpdwOutStart + ( DestBufferSize >> 2 );


        BitOut = 0;
        ZeroMemory( (BYTE *) lpdwOut, DestBufferSize );

        CIndex    = 0;
        RunLength = 0;


        // first REF line is all white
        RIndex    = 1;
        *pRefLine = (WORD) lineWidth;
        RValue    = (WORD) lineWidth;



        Lines = 0;
        EolCount = 1;
        BadFaxLines = 0;
        LastLineBad = FALSE;
        fTestLength = DO_NOT_TEST_LENGTH;
        lineWidth = lineWidth;


        //
        // find first EOL in a block
        //

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

            goto bad_exit;
        }

        // output first "all white" line
        CIndex    = 1;
        *pCurLine = (WORD) lineWidth;

        if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
            goto bad_exit;
        }

        RIndex = 0;
        CIndex = 0;
        Lines++;

#ifdef RDEBUG
        if ( g_fDebGlobOut )
        _tprintf( TEXT (" EOL Line=%d\n\n"), Lines );
#endif

        Table = TableWhite;
        Color = WHITE_COLOR;


        // EOL-loop

        do {

            dwTemp = (*lpdwResPtr) & (0x00000001 << ResBit );

            if (f1D || dwTemp) {
//l1Dline:

#ifdef RDEBUG
                // _tprintf( TEXT (" Start 1D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

                if (! dwTemp) {

#ifdef RDEBUG
                    _tprintf( TEXT ("\n ERROR f1D dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                    ResBit++;
                    if (ResBit > 31) {
                        lpdwResPtr++;
                        ResBit -= 32;
                    }

                    fTestLength = DO_NOT_TEST_LENGTH;
                    f1D = 1;
                    goto lFindNextEOL;
                }

                // decode 1D line starting ResBit+1

                ResBit++;
                if (ResBit > 31) {
                    lpdwResPtr++;
                    ResBit -= 32;
                }

                RIndex = 0;
                RunLength = 0;

                Table = TableWhite;
                Color = WHITE_COLOR;



                // 1-D Table look-up loop
                do {

                    if (ResBit <= 17) {
                        dwIndex = (*lpdwResPtr) >> ResBit;
                    }
                    else {
                        dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                    }

                    dwIndex &= 0x00007fff;

                    pByteTable = Table + (5*dwIndex);
                    pByteTail  = pByteTable+4;

                    // All bytes

                    for (i=0; i<4; i++)  {

                        MakeupT = *pByteTable & 0x80;
                        CodeT   = (WORD) *pByteTable & 0x3f;

                        if (MakeupT) {

                            if (CodeT <= MAX_TIFF_MAKEUP) {
                                RunLength += (CodeT << 6);

                                if (RunLength > lineWidth) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

                                EolCount=0;
#ifdef RDEBUG
                                if ( g_fDebGlobOut ) {
                                    if (Color) {
                                        _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                    }
                                    else {
                                        _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                    }
                                }
#endif
                            }

                            else if (CodeT == NO_MORE_RECORDS) {
                                goto lNextIndex1D;
                            }

                            else if (CodeT == LOOK_FOR_EOL_CODE)  {
                                // end of our line AHEAD
                                if (RunLength == lineWidth) {
                                    EolCount = 0;
                                    f1D = 0;
                                    Count2D = 0;
                                    Lines++;

                                    fTestLength = DO_TEST_LENGTH;
                                    TailT = *pByteTail & 0x0f;

                                    ResBit += TailT;

                                    if (ResBit > 31) {
                                            lpdwResPtr++;
                                            ResBit -= 32;
                                    }
#ifdef RDEBUG
                                    if ( g_fDebGlobOut )
                                        _tprintf( TEXT (" 1D ") );
#endif

                                    goto lFindNextEOL;

                                }
                                else if (RunLength != 0) {
#ifdef RDEBUG
                                    _tprintf( TEXT ("\n!!! ERROR 1D RunLength\n"), RunLength  );
#endif
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;

                                }
                                else {
                                    // zero RunLength
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_TEST_LENGTH;
                                    TailT = *pByteTail & 0x0f;

                                    ResBit += TailT;

                                    if (ResBit > 31) {
                                            lpdwResPtr++;
                                            ResBit -= 32;
                                    }

                                    goto lFindNextEOL;
                                }
                            }

                            else if (CodeT == EOL_FOUND_CODE) {
#ifdef RDEBUG
                                // _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

                                ResBit +=  (*pByteTail & 0x0f);
                                if (ResBit > 31) {
                                        lpdwResPtr++;
                                        ResBit -= 32;
                                }

                                if (RunLength == lineWidth) {
                                    EolCount = 0;
                                    f1D = 0;
                                    Count2D = 0;
                                    Lines++;

                                    // end of a good line.
                                    if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                                        goto bad_exit;
                                    }

#ifdef RDEBUG
                                    if ( g_fDebGlobOut )
                                        _tprintf( TEXT (" E 1D EOL Line=%d\n\n"), Lines );
#endif
                                    pTmpSwap = pRefLine;
                                    pRefLine = pCurLine;
                                    pCurLine = pTmpSwap;
                                    RIndex = 0; //CIndex;
                                    CIndex = 0;

                                    goto lAfterEOL;

                                }
                                else if (RunLength != 0) {
#ifdef RDEBUG
                                    _tprintf( TEXT ("!!! ERROR 1D Runlength EOLFOUND \n")  );
#endif
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;
                                    CIndex = 0;
                                    goto lAfterEOL;
                                }
                                else {
                                    // zero RunLength
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                    f1D = 1;
                                    Count2D = 0;
                                    CIndex = 0;
                                    goto lAfterEOL;
                                }

                            }

                            else if (CodeT == ERROR_CODE) {
#ifdef RDEBUG
                                _tprintf( TEXT (" ERROR CODE 1D dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            else {
#ifdef RDEBUG
                                _tprintf( TEXT("ERROR: WRONG code: index=%04x\n"), dwIndex);
#endif

                                goto bad_exit;
                            }
                        }

                        else {  // terminating code
                            RunLength += CodeT;

                            if (RunLength > lineWidth) {
                                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            //RSL was error
                            *(pCurLine + (CIndex++)) = RunLength;


                            if (CIndex >= MaxColorTransPerLine ) {
#ifdef RDEBUG
                                _tprintf( TEXT (" ERROR 1D TOO MANY COLORS dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                                goto bad_exit;
                            }

#ifdef RDEBUG
                            if ( g_fDebGlobOut ) {

                                if (Color) {
                                    _tprintf( TEXT ("b%d "), (CodeT)  );
                                }
                                else {
                                    _tprintf( TEXT ("w%d "), (CodeT)  );
                                }
                            }
#endif
                            Color = 1 - Color;
                        }

                        pByteTable++;

                     }



lNextIndex1D:
                    Table = Color ? TableBlack : TableWhite;
                    TailT = *pByteTail & 0x0f;

                    ResBit += TailT;

                    if (ResBit > 31) {
                            lpdwResPtr++;
                            ResBit -= 32;
                    }
                } while (lpdwResPtr <= EndBuffer);

                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                goto good_exit;

            }


//l2Dline:
            // should be 2D

#ifdef RDEBUG
            // _tprintf( TEXT ("\n Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

            if ( (*lpdwResPtr) & (0x00000001 << ResBit) )  {
#ifdef RDEBUG
                _tprintf( TEXT ("\n!!! ERROR Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                f1D =  1;
                Count2D = 0;
                CIndex = 0;
                goto lAfterEOL;
            }


            // 2D line decode loop
            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;

            RIndex    = 0;
            RValue    = *(pRefLine + RIndex);
            RColor    = 0;

            //BUGBUG incorporate with the next Index calc. to save time

            if (++ResBit > 31) {
                lpdwResPtr++;
                ResBit -= 32;
            }

            // prefix loop
            do {


                if (ResBit <= 25 ) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x0000007f;
                pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);

                // work-around of a PPC compiler bug: incorrect CMP with signed char. NT 1381. 8/31/96. RafaelL
                iCode = ((short)  ( (char) (*pByteTable) ) ) >> 4;
                bShift = (*pByteTable) & 0x0f;

                if (iCode < 4) {
                    // VERTICAL -3...+3
#ifdef RDEBUG
                    if ( g_fDebGlobOut )
                        _tprintf( TEXT (" V ") );
#endif

                    if ( (RunLength >= RValue) && (RunLength != 0) ) {
                        while (++RIndex < MaxColorTransPerLine) {
                            if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                                // BUGBUG will change to break; after debugging
                                goto lFound;
                            }
                        }
#ifdef RDEBUG
                        _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                        f1D = 1;
                        Count2D = 0;

                        fTestLength = DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;


lFound:
                        RColor = RIndex & 0x0001;
                    }

                    if (CColor == RColor)  {
                        a0 = RValue + iCode;
                    }
                    else {
                        if (RValue == lineWidth) {
                            a0 = RValue + iCode;
                        }
                        else {
                            a0 = *(pRefLine + RIndex + 1) + iCode;
                        }
                    }


                    // RSL 111296

                    if ( ( a0 <= RunLength ) && (a0 != 0) ) {
                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                        f1D = 1;
                        Count2D = 0;

                        fTestLength = DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;

                    }


                    *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
                    if ( g_fDebGlobOut ) {

                        if (CColor) {
                            _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                        }
                    }
#endif
                    RunLength = a0;
                    CColor = 1 - CColor;

                }

                else if (iCode == HORIZ_PREFIX) {
#ifdef RDEBUG
                    if ( g_fDebGlobOut )

                        _tprintf( TEXT (" H ") );
#endif


                    ResBit += bShift;
                    if (ResBit > 31) {
                        ResBit -= 32;
                        lpdwResPtr++;
                    }


                    Table = CColor ? TableBlack : TableWhite;
                    Color = CColor;
                    CountHoriz = 0;
                    fFirstResult = 1;



                    // 1-D Table look-up loop
                    do {

                        if (ResBit <= 17) {
                            dwIndex = (*lpdwResPtr) >> ResBit;
                        }
                        else {
                            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                        }


                        dwIndex &= 0x00007fff;

                        pByteTable = Table + (5*dwIndex);
                        pByteTail  = pByteTable+4;
                        pByteTable0 = pByteTable;

                        // All bytes

                        for (i=0; i<4; i++)  {

                            MakeupT = *pByteTable & 0x80;
                            CodeT   = (WORD) *pByteTable & 0x3f;

                            if (MakeupT) {

                                if (CodeT < 28) {
                                    RunLength += (CodeT << 6);

                                    if (RunLength > lineWidth) {
                                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                        f1D = 1;
                                        Count2D = 0;

                                        fTestLength = DO_NOT_TEST_LENGTH;
                                        goto lFindNextEOL;
                                    }

#ifdef RDEBUG
                                    if ( g_fDebGlobOut ) {

                                        if (Color) {
                                            _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                        }
                                        else {
                                            _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                        }
                                    }
#endif
                                }

                                else if (CodeT == NO_MORE_RECORDS) {
                                    goto lNextIndexHoriz;
                                }

                                else  {
                                    // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
#ifdef RDEBUG

                                    _tprintf( TEXT ("\n!!! ERROR 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

                            }

                            else {  // terminating code
                                RunLength += CodeT;

                                if (RunLength > lineWidth) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

                                *(pCurLine + (CIndex++) ) = RunLength;

                                if (RIndex >= MaxColorTransPerLine ) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

#ifdef RDEBUG
                                    _tprintf( TEXT ("\n!!! ERROR 2D TOO MANY Colors dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

#ifdef RDEBUG

                                if ( g_fDebGlobOut ) {

                                    if (Color) {
                                        _tprintf( TEXT ("b%d "), (CodeT)  );
                                    }
                                    else {
                                        _tprintf( TEXT ("w%d "), (CodeT)  );
                                    }
                                }
#endif
                                Color = 1 - Color;
                                if (++CountHoriz >= 2)  {
                                    if (fFirstResult) {
                                        bShift =  (*pByteTail & 0xf0) >> 4;
                                    }
                                    else {
                                        // rare case will take time
                                        bShift =  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                        bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                        bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                        bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                                    }
                                    goto lNextPrefix;
                                }
                            }

                            pByteTable++;

                        }



lNextIndexHoriz:
                        if (Color != CColor) {
                            fFirstResult = 0;
                        }

                        Table = Color ? TableBlack : TableWhite;
                        TailT = *pByteTail & 0x0f;

                        ResBit += TailT;

                        if (ResBit > 31) {
                                lpdwResPtr++;
                                ResBit -= 32;
                        }
                    } while (lpdwResPtr <= EndBuffer);

                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                    goto good_exit;
                }

                else if (iCode == PASS_PREFIX) {
#ifdef RDEBUG
                    if ( g_fDebGlobOut )

                        _tprintf( TEXT (" P ") );
#endif

                    if ( (RunLength >= RValue) && (RunLength != 0) ) {
                        while (++RIndex < MaxColorTransPerLine) {
                            if ( (RValue = *(pRefLine + RIndex) ) > RunLength )  {
                                goto lFound2;
                            }
                        }

#ifdef RDEBUG
                        _tprintf( TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d\n "), RIndex, RValue, RunLength );
#endif
                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                        f1D = 1;
                        Count2D = 0;

                        fTestLength = DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;

                    }

lFound2:

                    RColor = RIndex & 1;


                    if (RValue != lineWidth) {
                        RValue1 = *(pRefLine + RIndex + 1 );

                        RColor1 = 1 - RColor;

                        if ( (RValue1 != lineWidth) && (RColor1 == CColor) ) {
                            a0 = *(pRefLine + RIndex + 2);
                        }
                        else {
                            a0 = RValue1;
                        }
                    }
                    else {
                        a0 = (WORD) lineWidth;
                    }



#ifdef RDEBUG
                    if ( g_fDebGlobOut ) {

                        if (CColor) {
                            _tprintf( TEXT ("b%d "), (a0 - RunLength) );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (a0 - RunLength) );
                        }
                    }
#endif


                    // RSL 111296

                    if ( ( a0 <= RunLength ) && (a0 != 0) ) {

                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                        f1D = 1;
                        Count2D = 0;

                        fTestLength = DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;

                    }


                    RunLength = a0;

                }

                else if (iCode == LOOK_FOR_EOL_PREFIX) {
#ifdef RDEBUG
                    // _tprintf( TEXT (" EOL Line=%d\n\n"), Lines );
#endif

                    if (RunLength == lineWidth) {
                        if (++Count2D >= Num2DLines) {
                            Count2D = 0;
                            f1D = 0;   // relax HiRes/LoRes 2D lines per 1D rules - HP Fax does 3 2D-lines per 1 1D-line in LoRes.

                        }

#ifdef RDEBUG
                        // _tprintf( TEXT ("\n 2D done CINdex=%d dwResPtr=%lx bit=%d \n"), CIndex, lpdwResPtr, ResBit);
#endif


                        fTestLength = DO_TEST_LENGTH;
                        f1D = 0;
                        Lines++;

#ifdef RDEBUG
                        if ( g_fDebGlobOut )

                            _tprintf( TEXT (" 2D ") );
#endif

                        goto lFindNextEOL;
                    }
                    else  {

#ifdef RDEBUG
                        _tprintf( TEXT ("\n!!! ERROR 2D WRONG LINE LENGTH dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                        f1D = 1;
                        Count2D = 0;

                        fTestLength = DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }

                }

                else { //ERROR
#ifdef RDEBUG
                    _tprintf( TEXT ("\n!!! ERROR 2D PREFIX dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                    f1D = 1;
                    Count2D = 0;

                    fTestLength = DO_NOT_TEST_LENGTH;
                    goto lFindNextEOL;
                }

lNextPrefix:
                ResBit += bShift;
                if (ResBit > 31) {
                    lpdwResPtr++;
                    ResBit -= 32;
                }

            } while (lpdwResPtr < EndBuffer);

            ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
            goto good_exit;



lFindNextEOL:

            if (RunLength == lineWidth) {
                ConsecBadLines=0;

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    goto bad_exit;
                }

#ifdef RDEBUG
                 if ( g_fDebGlobOut ) {
                    _tprintf( TEXT (" EOL Line=%d "), Lines );

                    _tprintf( TEXT (" RIndex=%d, CIndex=%d:  "), RIndex, CIndex);

                    for (i=0; i<CIndex; i++) {
                       _tprintf( TEXT ("%04d>%04d, "), i, *(pCurLine+i) );
                        if ( *(pCurLine+i) >= lineWidth ) {
                            break;
                        }
                    }
                    _tprintf( TEXT ("\n\n"));
                 }

#endif

                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;

            }

            RIndex = 0;
            CIndex = 0;
            RunLength = 0;

            if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                goto good_exit;

            }

            if ( (fTestLength == DO_TEST_LENGTH) && fError ) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
            }


lAfterEOL:
            ;



        } while (lpdwResPtr <= EndBuffer);

        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

        // Reached the end of a PAGE - close it and proceed to the next page
good_exit:
        *(++lpdwOut) = 0x80000000;
        *(++lpdwOut) = 0x80000000;
        Lines--;

        DestSize = (DWORD)((lpdwOut - lpdwOutStart) * sizeof (DWORD));
        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwOutStart, DestSize) ) {
            goto bad_exit;
        }

        TiffInstanceDest->Lines        = Lines;
        TiffInstanceDest->ImageWidth   = lineWidth;

        if (! TiffEndPage(hTiffDest) ) {
            goto bad_exit;
        }

    }  // End of FOR loop that run on all the pages.

    bRet = TRUE;

    // Finished the DOCUMENT - either successfully or not.
bad_exit:

    VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
    VirtualFree ( pDestBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);


    if (TRUE == bRet)
    {
        //
        // Almost Success
        //
        if (NULL == NewFileName)
        {
            //replace the original MH file by the new clean MMR file
            DeleteFile(SrcFileName);
            bRet = MoveFile(DestFileName, SrcFileName);
        }
    }

    if (FALSE == bRet)
    {
        DeleteFile(DestFileName);
    }
    return bRet;
}


BOOL
TiffUncompressMmrPageRaw(
    LPBYTE      StripData,
    DWORD       StripDataSize,
    DWORD       ImageWidth,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    )

{
    DWORD               i;
    DWORD               j;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;

    BOOL                Color;
    LPDWORD             EndPtr;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    BYTE                TailT;
    WORD                RunLength=0;

    DWORD               TableSize=32768;

    WORD                Line1Array[MaxColorTransPerLine];
    WORD                Line2Array[MaxColorTransPerLine];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    short               iCode;
    BYTE                bShift;
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTable0;

    WORD                PrevValue;
    WORD                CurValue;
    WORD                CurPos;
    WORD                CurRun;
    WORD                NumBytes;
    WORD                NumDwords;
    BYTE                BitOut;
    LPDWORD             lpdwOut;
    LPBYTE              lpbOut;
    LPBYTE              lpbLineStart;
    BOOL                fOutputLine = 0;
    DWORD               dwSizeOutputBuffer = (*LinesOut * LINE_LENGTH) / 8;
    BOOL                fDoneDwords=0;
    LPBYTE              lpbMaxOutputBuffer = (LPBYTE)lpdwOutputBuffer + dwOutputBufferSize - 1;

    DEBUG_FUNCTION_NAME(TEXT("TiffUncompressMmrPageRaw"));

    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;

    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, dwSizeOutputBuffer);

    Lines = 0;
    EolCount = 1;
    plinebuf = StripData;
    lineWidth = ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3));
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;

    // 2D line decode loop
    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;

    // first REF line is all white
    RIndex    = 1;
    *pRefLine = LINE_LENGTH;
    RValue    = LINE_LENGTH;
    RColor    = 0;

    lpbLineStart = (LPBYTE) lpdwOutputBuffer;
    //
    // prefix loop
    //
    do
    {
        if (RunLength == lineWidth)
        {
#ifdef RDEBUG
            _tprintf( TEXT(" EOL\n\n") );
#endif

            //
            // Output Uncompressed line based on Color Trans. Array
            //

            for (CurPos=0;  CurPos < MaxColorTransPerLine; CurPos+=2)
            {
                PrevValue = *(pCurLine + CurPos);

                if ( PrevValue == LINE_LENGTH )
                {
                    break;
                }

                CurValue = *(pCurLine + CurPos + 1);
                CurRun   = CurValue - PrevValue;

                lpbOut  = lpbLineStart + (PrevValue >> 3);
                BitOut   = PrevValue % 8;
                //
                // black color
                //
                if (lpbOut > lpbMaxOutputBuffer)
                {
                    //
                    // Tiff is corrupt
                    //
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                    return TRUE;
                }

                *lpbOut = (*lpbOut) | (MINUS_ONE_BYTE >> BitOut);

                if (BitOut + CurRun <= 7 )
                {
                    //
                    // Just a part of the same BYTE.
                    //
                    *lpbOut = (*lpbOut) & All1[BitOut + CurRun];
                    BitOut += CurRun;
                }
                else
                {
                    //
                    // We crossed the BYTE boundary.
                    //
                    CurRun -= (8 - BitOut);
                    BitOut = 0;
                    lpbOut++;
                    //
                    // Walk the entire DWORDs in a middle of a run.
                    //
                    NumBytes = CurRun >> 3;
                    CurRun  -= (NumBytes << 3);
                    if (NumBytes >= 7)
                    {
                        //
                        // makes sense process DWORDs
                        //
                        fDoneDwords = 0;
                        do
                        {
                            if ( ! (  (((ULONG_PTR) lpbOut) & 3)  ||  fDoneDwords )   )
                            {
                                //
                                // DWORD stretch
                                //
                                NumDwords = NumBytes >> 2;
                                lpdwOut = (LPDWORD) lpbOut;
                                for (j=0; j<NumDwords; j++)
                                {
                                    if (((LPBYTE)lpdwOut) > (lpbMaxOutputBuffer - sizeof(DWORD) + 1))
                                    {
                                        //
                                        // Tiff is corrupt
                                        //
                                        DebugPrintEx(
                                            DEBUG_ERR,
                                            TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                        return TRUE;
                                    }
                                    *lpdwOut++ = MINUS_ONE_DWORD;
                                }
                                NumBytes -= (NumDwords << 2);
                                lpbOut = (LPBYTE) lpdwOut;
                                fDoneDwords = 1;
                            }
                            else
                            {
                                //
                                // either lead or tail BYTE stretch
                                //
                                if (lpbOut > lpbMaxOutputBuffer)
                                {
                                    //
                                    // Tiff is corrupt
                                    //
                                    DebugPrintEx(
                                        DEBUG_ERR,
                                        TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                    return TRUE;
                                }
                                *lpbOut++ = MINUS_ONE_BYTE;
                                NumBytes--;
                            }
                        } while (NumBytes > 0);
                    }
                    else
                    {
                        //
                        // process BYTEs
                        //
                        for (i=0; i<NumBytes; i++)
                        {
                            if (lpbOut > lpbMaxOutputBuffer)
                            {
                                //
                                // Tiff is corrupt
                                //
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                return TRUE;
                            }
                            *lpbOut++ = MINUS_ONE_BYTE;
                        }
                    }
                    //
                    // Last part of a BYTE.
                    //
                    if (lpbOut > lpbMaxOutputBuffer)
                    {
                        //
                        // Tiff is corrupt
                        //
                        DebugPrintEx(
                            DEBUG_ERR,
                            TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                        return TRUE;
                    }
                    *lpbOut = All1[CurRun];
                    BitOut = (BYTE) CurRun;
                }
                if ( CurValue == LINE_LENGTH )
                {
                    break;
                }
            }
            lpbLineStart += (LINE_LENGTH >> 3);
            //
            // Next Src Line
            //
            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;
            RIndex   =  0;
            RValue   =  *pRefLine;
            RColor   =  0;

            a0        = 0;
            CIndex    = 0;
            CColor    = 0;
            RunLength = 0;
        }

        if (ResBit <= 25 )
        {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else
        {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        iCode = ( (short) ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4)
        {
            //
            // VERTICAL -3...+3
            //
#ifdef RDEBUG
            _tprintf( TEXT (" V%2d "), iCode );
#endif

            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        // BUGBUG will change to break; after debugging
                        goto lFound;
                    }
                }

                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength );
                SetLastError (ERROR_FILE_CORRUPT);
                return FALSE;
lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)
            {
                a0 = RValue + iCode;
            }
            else
            {
                if (RValue == LINE_LENGTH)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            *(pCurLine + (CIndex++) ) = a0;

#ifdef RDEBUG
            if (CColor)
            {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else
            {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength);
                SetLastError (ERROR_FILE_CORRUPT);
                return FALSE;
            }
            RunLength = a0;
            CColor = 1 - CColor;
        }

        else if (iCode == HORIZ_PREFIX)
        {
#ifdef RDEBUG
            _tprintf( TEXT (" H ") );
#endif
            ResBit += bShift;
            if (ResBit > 31)
            {
                ResBit -= 32;
                lpdwResPtr++;
            }
            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;
            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }
                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;
                //
                // All bytes
                //
                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT < 28)
                        {
                            RunLength += (CodeT << 6);
                            //
                            // sanity check
                            //
                            if (RunLength > LINE_LENGTH)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("!!! ERROR MMR src codeT=%d, RunLength=%d"),
                                    a0,
                                    RunLength);
                                SetLastError (ERROR_FILE_CORRUPT);
                                return FALSE;
                            }
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }
                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndexHoriz;
                        }
                        else
                        {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT ("!!! ERROR 2D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            SetLastError (ERROR_FILE_CORRUPT);
                            return FALSE;
                        }
                    }
                    else
                    {  // terminating code
                        RunLength += CodeT;
                        *(pCurLine + (CIndex++) ) = RunLength;
                        // sanity check
                        if ( (RunLength > LINE_LENGTH) || ( CIndex >= MaxColorTransPerLine ) )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT ("!!! ERROR MMR RunLength=%d, CodeT=%d, CIndex=%d"),
                                RunLength,
                                CodeT,
                                CIndex);
                            SetLastError (ERROR_FILE_CORRUPT);
                            return FALSE;
                        }
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                        if (++CountHoriz >= 2)
                        {
                            if (fFirstResult)
                            {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else
                            {
                                // rare case will take time
                                bShift =   ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }
                    pByteTable++;
                }

lNextIndexHoriz:
                if (Color != CColor)
                {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                TailT = *pByteTail & 0x0f;

                ResBit += TailT;

                if (ResBit > 31)
                {
                        lpdwResPtr++;
                        ResBit -= 32;
                }
            } while (lpdwResPtr <= EndPtr);
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Tiff is corrupt!!!"));
            SetLastError (ERROR_FILE_CORRUPT);
            return FALSE;
        }
        else if (iCode == PASS_PREFIX)
        {
#ifdef RDEBUG
            _tprintf( TEXT (" P ") );
#endif
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MaxColorTransPerLine)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        goto lFound2;
                    }
                }

                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT ("!!! ERROR internal LOGIC RIndex=%d, RValue=%d, RunLength=%d"),
                    RIndex,
                    RValue,
                    RunLength );
                SetLastError (ERROR_FILE_CORRUPT);
                return FALSE;
            }
lFound2:

            RColor = RIndex & 1;

            if (RValue != LINE_LENGTH)
            {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != LINE_LENGTH) && (RColor1 == CColor) )
                {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else
                {
                    a0 = RValue1;
                }
            }
            else
            {
                a0 = LINE_LENGTH;
            }


#ifdef RDEBUG
            if (CColor)
            {
                _tprintf( TEXT ("b%d "), (a0 - RunLength) );
            }
            else
            {
                _tprintf( TEXT ("w%d "), (a0 - RunLength) );
            }
#endif

            // sanity check

            if ( (a0 < RunLength) || (a0 > LINE_LENGTH) )
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT ("!!! ERROR MMR src a0=%d, RunLength=%d"),
                    a0,
                    RunLength );
                SetLastError (ERROR_FILE_CORRUPT);
                return FALSE;

            }

            RunLength = a0;

        }

        else if (iCode == LOOK_FOR_EOL_PREFIX)
        {
#ifdef RDEBUG
            // _tprintf( TEXT (" E ") );
#endif

            return TRUE;
        }

        else
        { //ERROR
            DebugPrintEx(
                DEBUG_ERR,
                TEXT ("!!! ERROR 2D dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);
            SetLastError (ERROR_FILE_CORRUPT);
            return FALSE;

        }

lNextPrefix:
        ResBit += bShift;
        if (ResBit > 31)
        {
            lpdwResPtr++;
            ResBit -= 32;
        }

    } while (lpdwResPtr <= EndPtr);

    DebugPrintEx(
        DEBUG_ERR,
        TEXT("Tiff is corrupt!!!"));
    SetLastError (ERROR_FILE_CORRUPT);
    return FALSE;
}   // TiffUncompressMmrPageRaw


BOOL
TiffUncompressMmrPage(
    HANDLE      hTiff,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    )

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    DEBUG_FUNCTION_NAME(TEXT("TiffUncompressMmrPage"));
    //
    // check if enough memory
    //

    if (TiffInstance->ImageHeight > *LinesOut)
    {
        *LinesOut = TiffInstance->ImageHeight;
        SetLastError (ERROR_BUFFER_OVERFLOW);
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("buffer is too small"));
        return FALSE;
    }

    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;

    return TiffUncompressMmrPageRaw(
        TiffInstance->StripData,
        TiffInstance->StripDataSize,
        TiffInstance->ImageWidth,
        lpdwOutputBuffer,
        dwOutputBufferSize,
        LinesOut
        );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\tifflibp.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflibp.h

Abstract:

    This file is the private header file for the
    TIFF support library.  All source files in this
    library include this header only.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tchar.h>

#include "faxutil.h"
#include "tifflib.h"
#include "tiff.h"
#include "tifftabl.h"


#define TIFFDBG 0

//
// Find the next pixel on the scanline whose color is opposite of
// the specified color, starting from the specified starting point
//

#define NextChangingElement( pbuf, startBit, stopBit, isBlack ) \
        ((startBit) + ((isBlack) ? FindBlackRun((pbuf), (startBit), (stopBit)) : \
                                   FindWhiteRun((pbuf), (startBit), (stopBit))))

//
// Check if the specified pixel on the scanline is black or white
//  1 - the specified pixel is black
//  0 - the specified pixel is white
//
#define GetBit( pbuf, bit )   (((pbuf)[(bit) >> 3] >> (((bit) ^ 7) & 7)) & 1)


#define Align(p, x)  (((x) & ((p)-1)) ? (((x) & ~((p)-1)) + p) : (x))

#define WHITE       0
#define BLACK       0xff
#define BYTEBITS    8
#define WORDBITS    (sizeof(WORD)  * BYTEBITS)
#define DWORDBITS   (sizeof(DWORD) * BYTEBITS)

//
// IFD entries we generate for each page
//
// ******************************************************
// *->
// *-> WARNING:    these constants must be sorted by
// *->             the ifd values.  it is a T.4
// *->             requirement that all TIFF IFDs be
// *->             sorted.
// *->
// *->             if you change these constants then
// *->             don't forget to go change the
// *->             IFD template in tifflib.c
// *->
// ******************************************************
//

#define IFD_NEWSUBFILETYPE       0               // 254
#define IFD_IMAGEWIDTH           1               // 256
#define IFD_IMAGEHEIGHT          2               // 257
#define IFD_BITSPERSAMPLE        3               // 258
#define IFD_COMPRESSION          4               // 259
#define IFD_PHOTOMETRIC          5               // 262
#define IFD_FILLORDER            6               // 266
#define IFD_STRIPOFFSETS         7               // 273
#define IFD_SAMPLESPERPIXEL      8               // 277
#define IFD_ROWSPERSTRIP         9               // 278
#define IFD_STRIPBYTECOUNTS     10               // 279
#define IFD_XRESOLUTION         11               // 281
#define IFD_YRESOLUTION         12               // 282
#define IFD_G3OPTIONS           13               // 292
#define IFD_RESUNIT             14               // 296
#define IFD_PAGENUMBER          15               // 297
#define IFD_SOFTWARE            16               // 305
#define IFD_CLEANFAXDATA        17               // 327
#define IFD_BADFAXLINES         18               // 328

#define NUM_IFD_ENTRIES         19



#pragma pack(1)
//
// Data structure for representing a single IFD entry
//
typedef struct {
    WORD    tag;        // field tag
    WORD    type;       // field type
    DWORD   count;      // number of values
    DWORD   value;      // value or value offset
} IFDENTRY, *PIFDENTRY;

typedef struct {
    WORD        wIFDEntries;
    IFDENTRY    ifd[NUM_IFD_ENTRIES];
    DWORD       nextIFDOffset;
    DWORD       filler;
    DWORD       xresNum;
    DWORD       xresDenom;
    DWORD       yresNum;
    DWORD       yresDenom;
    CHAR        software[32];
} FAXIFD, *PFAXIFD;
#pragma pack()


typedef struct _STRIP_INFO {
    DWORD           Offset;
    DWORD           Bytes;
    LPBYTE          Data;
} STRIP_INFO, *PSTRIP_INFO;

typedef struct TIFF_INSTANCE_DATA {
    HANDLE          hFile;                          // file handle for TIFF file
    HANDLE          hMap;                           // file mapping handle
    LPBYTE          fPtr;                           // mapped file pointer
    TCHAR           FileName[MAX_PATH];             // tiff file name
    TIFF_HEADER     TiffHdr;                        // TIFF header
    FAXIFD          TiffIfd;                        // ifd
    DWORD           PageCount;                      // number of pages written to the TIFF file
    DWORD           DataOffset;                     // offset to the beginning of current data block
    DWORD           IfdOffset;                      // offset to the current ifd pointer
    DWORD           Lines;                          // number of lines written to the TIFF file
    DWORD           CompressionType;
    DWORD           Bytes;
    BYTE            Buffer[FAXBYTES*3];
    LPBYTE          CurrLine;
    LPBYTE          RefLine;
    DWORD           CurrPage;
    LPVOID          StripData;
    LPBYTE          CurrPtr;
    DWORD           StripDataSize;
    DWORD           RowsPerStrip;
    DWORD           StripOffset;
    DWORD           ImageWidth;
    DWORD           ImageHeight;
    DWORD           Color;
    DWORD           RunLength;
    DWORD           bitdata;
    DWORD           bitcnt;
    PBYTE           bitbuf;
    DWORD           PhotometricInterpretation;
    DWORD           FillOrder;
    PTIFF_TAG       TagImageLength;
    PTIFF_TAG       TagRowsPerStrip;
    PTIFF_TAG       TagStripByteCounts;
    PTIFF_TAG       TagFillOrder;
    PTIFF_TAG       TagCleanFaxData;
    PTIFF_TAG       TagBadFaxLines;
    DWORD           FileSize;
    DWORD           StartGood;
    DWORD           EndGood;
    DWORD           BadFaxLines;
    DWORD           CleanFaxData;
    DWORD           YResolution;
    DWORD           XResolution;
    DWORD           BytesPerLine;
} TIFF_INSTANCE_DATA, *PTIFF_INSTANCE_DATA;


#define SOFTWARE_STR            "Windows NT Fax Server\0         "
#define SOFTWARE_STR_LEN        32
#define SERVICE_SIGNATURE       'xafS'
#define TIFFF_RES_X             204
#define TIFFF_RES_Y             196

//
// Output a sequence of compressed bits
//

__inline void
OutputBits(
    PTIFF_INSTANCE_DATA TiffInstance,
    WORD                Length,
    WORD                Code
    )
{
    TiffInstance->bitdata |= Code << (TiffInstance->bitcnt - Length);
    if ((TiffInstance->bitcnt -= Length) <= 2*BYTEBITS) {
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 2*BYTEBITS);
        TiffInstance->bitdata <<= 2*BYTEBITS;
        TiffInstance->bitcnt += 2*BYTEBITS;
    }
}

//
// Flush any leftover bits into the compressed bitmap buffer
//

__inline void
FlushBits(
    PTIFF_INSTANCE_DATA TiffInstance
    )
{
    while (TiffInstance->bitcnt < DWORDBITS) {
        TiffInstance->bitcnt += BYTEBITS;
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        TiffInstance->bitdata <<= BYTEBITS;
    }
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
}

__inline void
FlushLine(
    PTIFF_INSTANCE_DATA TiffInstance,
    DWORD PadLength
    )
{
    if (TiffInstance->bitcnt < DWORDBITS) {
        TiffInstance->bitcnt += BYTEBITS;
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        TiffInstance->bitdata = 0;
        TiffInstance->bitcnt = DWORDBITS;
    }
    if (PadLength) {
        TiffInstance->bitbuf += ((PadLength / 8) - TiffInstance->BytesPerLine);
    }
}

//
// Output a runlength of white or black bits
//

__inline void
OutputCodeBits(
    PTIFF_INSTANCE_DATA TiffInstance,
    INT                 RunLength
    )
{
    INT i;
    if (RunLength > 0) {

        TiffInstance->RunLength += RunLength;

        if (TiffInstance->Color) {

            //
            // black run
            //

            for (i=0; i<RunLength/BYTEBITS; i++) {
                OutputBits( TiffInstance, BYTEBITS, BLACK );
            }
            if (RunLength%BYTEBITS) {
                OutputBits( TiffInstance, (WORD)(RunLength%BYTEBITS), (WORD)((1<<(RunLength%BYTEBITS))-1) );
            }

        } else {

            //
            // white run
            //

            for (i=0; i<RunLength/BYTEBITS; i++) {
                OutputBits( TiffInstance, BYTEBITS, WHITE );
            }
            if (RunLength%BYTEBITS) {
                OutputBits( TiffInstance, (WORD)(RunLength%BYTEBITS), WHITE );
            }

        }
    }
}


__inline DWORD
GetTagData(
    LPBYTE RefPointer,
    DWORD Index,
    PTIFF_TAG TiffTag
    )

/*++

Routine Description:

    Gets the data associated with a given IFD tag

Arguments:

    RefPointer  -  Beginning of the data block
    Index       -  The index for data values that have an
                   array of values greater than zero
    TiffTag     -  Pointer to valid TIFF IFD tag

Return Value:

    The data value.

--*/

{
    DWORD Value;

    if (TiffTag->DataType == TIFF_SHORT) {

        if (TiffTag->DataCount == 1) {

            Value = (DWORD) TiffTag->DataOffset;

        } else {

            Value = (DWORD)(*(WORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(WORD) * Index)));

        }

    } else if (TiffTag->DataType == TIFF_RATIONAL) {

        Value = *(DWORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(DWORD) * Index));

    } else if (TiffTag->DataType == TIFF_ASCII) {

        if (TiffTag->DataCount < 4 ) {

            Value = (DWORD) TiffTag->DataOffset;

        } else {

            Value = *(DWORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(DWORD) * Index));

        }
    } else {

        if (TiffTag->DataCount == 1) {

            Value = (DWORD) TiffTag->DataOffset;

        } else {

            Value = *(DWORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(DWORD) * Index));

        }

    }

    return Value;
}

__inline VOID
PutTagData(
    LPBYTE RefPointer,
    DWORD Index,
    PTIFF_TAG TiffTag,
    DWORD Value
    )

/*++

Routine Description:

    Gets the data associated with a given IFD tag

Arguments:

    RefPointer  -  Beginning of the data block
    Index       -  The index for data values that have an
                   array of values greater than zero
    TiffTag     -  Pointer to valid TIFF IFD tag

Return Value:

    The data value.

--*/

{
    if (!TiffTag) {
        return;
    }
    if (TiffTag->DataType == TIFF_SHORT) {

        if (TiffTag->DataCount == 1) {

            TiffTag->DataOffset = Value;

        } else {

            *(WORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(WORD) * Index)) = (WORD) Value;

        }

    } else if (TiffTag->DataType == TIFF_ASCII) {

        if (TiffTag->DataCount < 4) {

            TiffTag->DataOffset = Value;

        } else {

            *(WORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(WORD) * Index)) = (WORD) Value;

        }
    } else {

        if (TiffTag->DataCount == 1) {

            TiffTag->DataOffset = Value;

        } else {

            *(DWORD UNALIGNED *)(RefPointer + TiffTag->DataOffset + (sizeof(DWORD) * Index)) = Value;

        }

    }
}


//
// prototypes
//

INT
FindWhiteRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    );

INT
FindBlackRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    );

BOOL
EncodeFaxData(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth,
    DWORD               CompressionType
    );

BOOL
DecodeUnCompressedFaxData(
    PTIFF_INSTANCE_DATA TiffInstance,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    DWORD               PadLength
    );

BOOL
DecodeMHFaxData(
    PTIFF_INSTANCE_DATA TiffInstance,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    DWORD               PadLength
    );

BOOL
DecodeMRFaxData(
    PTIFF_INSTANCE_DATA TiffInstance,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    DWORD               PadLength
    );

BOOL
DecodeMMRFaxData(
    PTIFF_INSTANCE_DATA TiffInstance,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    DWORD               PadLength
    );

BOOL
EncodeFaxDataNoCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth
    );

BOOL
EncodeFaxDataMhCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth
    );

BOOL
EncodeFaxDataMmrCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth
    );


BOOL
EncodeFaxPageMmrCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth,
    DWORD               ImageHeight,
    DWORD               *DestSize
    );


BOOL
PostProcessMhToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO TiffInfo,
    LPTSTR      SrcFileName
    );

BOOL
PostProcessMrToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO TiffInfo,
    LPTSTR      SrcFileName
    );

BOOL
GetTiffBits(
    HANDLE  hTiff,
    LPBYTE Buffer,
    LPDWORD BufferSize,
    DWORD FillOrder
    );

BOOL
EncodeMmrBranding(
    PBYTE               pBrandBits,
    LPDWORD             pMmrBrandBits,
    INT                 BrandHeight,
    INT                 BrandWidth,
    DWORD              *DwordsOut,
    DWORD              *BitsOut
    );




__inline
VOID
OutputRunFastReversed(
    INT                 run,
    INT                 color,
    LPDWORD            *lpdwOut,
    BYTE               *BitOut
    )


{
    PCODETABLE          pCodeTable;
    PCODETABLE          pTableEntry;

    pCodeTable = (color == BLACK) ? BlackRunCodesReversed : WhiteRunCodesReversed;

    // output makeup code if exists
    if (run >= 64) {

#ifdef RDEBUG
        if ( g_fDebGlobOut )
        if (g_fDebGlobOutPrefix) {
            if (color == BLACK) {
                _tprintf( TEXT ("b%d "), (run & 0xffc0) );
            }
            else {
                _tprintf( TEXT ("w%d "), (run & 0xffc0) );
            }
        }
#endif



        pTableEntry = pCodeTable + (63 + (run >> 6));

        **lpdwOut = **lpdwOut + (((DWORD) (pTableEntry->code)) << (*BitOut));

        if ( ( (*BitOut) = (*BitOut) + pTableEntry->length ) > 31)  {
            (*BitOut) -= 32;
            *(++(*lpdwOut)) = (((DWORD) (pTableEntry->code)) >> (pTableEntry->length - (*BitOut)) );
        }


        run &= 0x3f;
    }

    // output terminating code always

#ifdef RDEBUG

    if ( g_fDebGlobOut )
    if (g_fDebGlobOutPrefix) {

        if (color == BLACK) {
            _tprintf( TEXT ("b%d "), run );
        }
        else {
            _tprintf( TEXT ("w%d "), run );
        }
    }
#endif


    pTableEntry = pCodeTable + run;

    **lpdwOut = **lpdwOut + (((DWORD) (pTableEntry->code)) << (*BitOut));

    if ( ( (*BitOut) = (*BitOut) + pTableEntry->length ) > 31)  {
        (*BitOut) -= 32;
        *(++(*lpdwOut)) = (((DWORD) (pTableEntry->code)) >> (pTableEntry->length - (*BitOut)) );
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\util.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    util.c

Abstract:

    This file contains utilitarian functions for
    the FAX TIFF library.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include "tifflibp.h"
#pragma hdrstop

static
BOOL
PrintTiffPage(
    HANDLE    hTiff,
    DWORD     dwPageNumber,
    HDC       hdcPrinterDC,
    BOOL      bPhotometricInterpretation
);

static
LPBYTE
ReadTiffData(
    HANDLE  hTiff,
    DWORD   dwPageNumber,
    LPDWORD lpdwPageWidth,
    LPDWORD lpdwPageHeight,
    LPDWORD lpdwPageYResolution,
    LPDWORD lpdwPageXResolution
    );


INT
FindWhiteRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    )

/*++

Routine Description:

    Find the next span of white pixels on the specified line

Arguments:

    pbuf        - Points to uncompressed pixel data for the current line
    startBit    - Starting bit index
    stopBit     - Last bit index

Return Value:

    Length of the next run of white pixels

--*/

{
    static const BYTE WhiteRuns[256] = {

        8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    INT run, bits, n;

    pbuf += (startBit >> 3);
    if ((bits = stopBit-startBit) <= 0)
        return 0;

    //
    // Take care of the case where starting bit index is not a multiple of 8
    //

    if (n = (startBit & 7)) {

        run = WhiteRuns[(*pbuf << n) & 0xff];
        if (run > BYTEBITS-n)
            run = BYTEBITS-n;
        if (n+run < BYTEBITS)
            return run;
        bits -= run;
        pbuf++;

    } else
        run = 0;

    //
    // Look for consecutive DWORD value = 0
    //

    if (bits >= DWORDBITS * 2) {

        PDWORD  pdw;

        //
        // Align to a DWORD boundary first
        //

        while ((ULONG_PTR) pbuf & 3) {

            if (*pbuf != 0)
                return run + WhiteRuns[*pbuf];

            run += BYTEBITS;
            bits -= BYTEBITS;
            pbuf++;
        }

        pdw = (PDWORD) pbuf;

        while (bits >= DWORDBITS && *pdw == 0) {

            pdw++;
            run += DWORDBITS;
            bits -= DWORDBITS;
        }

        pbuf = (PBYTE) pdw;
    }

    //
    // Look for consecutive BYTE value = 0
    //

    while (bits >= BYTEBITS) {

        if (*pbuf != 0)
            return run + WhiteRuns[*pbuf];

        pbuf++;
        run += BYTEBITS;
        bits -= BYTEBITS;
    }

    //
    // Count the number of white pixels in the last byte
    //

    if (bits > 0)
        run += WhiteRuns[*pbuf];

    return run;
}


INT
FindBlackRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    )

/*++

Routine Description:

    Find the next span of black pixels on the specified line

Arguments:

    pbuf        - Points to uncompressed pixel data for the current line
    startBit    - Starting bit index
    stopBit     - Last bit index

Return Value:

    Length of the next run of black pixels

--*/

{
    static const BYTE BlackRuns[256] = {

        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8
    };

    INT run, bits, n;

    pbuf += (startBit >> 3);
    if ((bits = stopBit-startBit) <= 0)
        return 0;

    //
    // Take care of the case where starting bit index is not a multiple of 8
    //

    if (n = (startBit & 7)) {

        run = BlackRuns[(*pbuf << n) & 0xff];
        if (run > BYTEBITS-n)
            run = BYTEBITS-n;
        if (n+run < BYTEBITS)
            return run;
        bits -= run;
        pbuf++;

    } else
        run = 0;

    //
    // Look for consecutive DWORD value = 0xffffffff
    //

    if (bits >= DWORDBITS * 2) {

        PDWORD  pdw;

        //
        // Align to a DWORD boundary first
        //

        while ((ULONG_PTR) pbuf & 3) {

            if (*pbuf != 0xff)
                return run + BlackRuns[*pbuf];

            run += BYTEBITS;
            bits -= BYTEBITS;
            pbuf++;
        }

        pdw = (PDWORD) pbuf;

        while (bits >= DWORDBITS && *pdw == 0xffffffff) {

            pdw++;
            run += DWORDBITS;
            bits -= DWORDBITS;
        }

        pbuf = (PBYTE) pdw;
    }

    //
    // Look for consecutive BYTE value = 0xff
    //

    while (bits >= BYTEBITS) {

        if (*pbuf != 0xff)
            return run + BlackRuns[*pbuf];

        pbuf++;
        run += BYTEBITS;
        bits -= BYTEBITS;
    }

    //
    // Count the number of white pixels in the last byte
    //

    if (bits > 0)
        run += BlackRuns[*pbuf];

    return run;
}

#define PIXELS_TO_BYTES(x)  (((x) + 7)/8)   // Calculates the number of bytes required to store x pixels (bits)

static
LPBYTE
ReadTiffData(
    HANDLE  hTiff,
    DWORD   dwPageNumber,
    LPDWORD lpdwPageWidth,
    LPDWORD lpdwPageHeight,
    LPDWORD lpdwPageYResolution,
    LPDWORD lpdwPageXResolution
    )
/*++

Routine name : ReadTiffData

Routine description:

    Reads a TIFF image page into a bytes buffer

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff                   [in]     - Handle to TIFF image
    dwPageNumber            [in]     - 1-Based page number
    lpdwPageWidth           [out]    - Width (in pixels) of page (optional)
    lpdwPageHeight          [out]    - Height (in pixels) of page (optional)
    lpdwPageYResolution     [out]    - Y resolution (in DPI) of page (optional)
    lpdwPageXResolution     [out]    - X resolution (in DPI) of page (optional)

Return Value:

    Pointer to allocated pixels buffer of TIFF page.
    Call should MemFree the returned buffer.
    NULL on failure (sets thread's last error).

--*/
{
    DWORD  dwLines = 0;
    DWORD  dwStripDataSize;
    DWORD  dwTiffPageWidth;
    DWORD  dwTiffPageHeight;
    DWORD  dwTiffPageYRes;
    DWORD  dwTiffPageXRes;
    DWORD  dwPageWidthInBytes;
    DWORD  dwAllocatedMemSize;
    LPBYTE lpbReturnVal = NULL;
    LPBYTE lpbSwappedLine = NULL;
    LPBYTE lpbSwapTop;
    LPBYTE lpbSwapBottom;

    DEBUG_FUNCTION_NAME(TEXT("ReadTiffData"));

    Assert (hTiff && dwPageNumber);

    if (!TiffSeekToPage( hTiff, dwPageNumber, FILLORDER_LSB2MSB ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffSeekToPage failed with %ld"),
            GetLastError ());
        return NULL;
    }

    if (!TiffGetCurrentPageData(
        hTiff,
        &dwLines,
        &dwStripDataSize,
        &dwTiffPageWidth,
        &dwTiffPageHeight
        ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffGetCurrentPageData failed with %ld"),
            GetLastError ());
        return NULL;
    }

    if (!TiffGetCurrentPageResolution (hTiff, &dwTiffPageYRes, &dwTiffPageXRes))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffGetCurrentPageResolution failed with %ld"),
            GetLastError ());
        return NULL;
    }
    //
    // Allocate return buffer
    //
    dwPageWidthInBytes = PIXELS_TO_BYTES(dwTiffPageWidth);
    dwAllocatedMemSize = dwTiffPageHeight * dwPageWidthInBytes;
    lpbReturnVal = (LPBYTE) MemAlloc (dwAllocatedMemSize);
    if (!lpbReturnVal)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate %ld bytes"),
            dwTiffPageHeight * dwPageWidthInBytes);
        return NULL;
    }
    dwLines = dwTiffPageHeight;
    if (!TiffUncompressMmrPage( hTiff, 
                                (LPDWORD) lpbReturnVal, 
                                dwAllocatedMemSize,
                                &dwLines ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffUncompressMmrPage failed with %ld"),
            GetLastError ());
        MemFree (lpbReturnVal);
        return NULL;
    }
    //
    // Because there's a known issue on some platforms (read: Win9x) to print top-down DIBs
    // (specifically, wich HP printer drivers), we now convert our DIB to bottom-up.
    //
    lpbSwappedLine = (LPBYTE) MemAlloc (dwPageWidthInBytes);
    if (!lpbSwappedLine)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate %ld bytes"),
            dwPageWidthInBytes);
        MemFree (lpbReturnVal);
        return NULL;
    }
    lpbSwapTop = lpbReturnVal;
    lpbSwapBottom = &(lpbReturnVal[(dwTiffPageHeight - 1) * dwPageWidthInBytes]);
    for (dwLines = 0; dwLines < (dwTiffPageHeight / 2); dwLines++)
    {
        //
        // Swap every n'th line with the (dwTiffPageHeight-n-1)'th line
        //
        memcpy (lpbSwappedLine, lpbSwapTop, dwPageWidthInBytes);
        memcpy (lpbSwapTop, lpbSwapBottom, dwPageWidthInBytes);
        memcpy (lpbSwapBottom, lpbSwappedLine, dwPageWidthInBytes);
        lpbSwapTop += dwPageWidthInBytes;
        lpbSwapBottom -= dwPageWidthInBytes;
    }
    MemFree (lpbSwappedLine);

    if (lpdwPageWidth)
    {
        *lpdwPageWidth = dwTiffPageWidth;
    }
    if (lpdwPageHeight)
    {
        *lpdwPageHeight = dwTiffPageHeight;
    }
    if (lpdwPageYResolution)
    {
        *lpdwPageYResolution = dwTiffPageYRes;
    }
    if (lpdwPageXResolution)
    {
        *lpdwPageXResolution = dwTiffPageXRes;
    }
    return lpbReturnVal;
}   // ReadTiffData

BOOL
TiffPrintDC (
    LPCTSTR lpctstrTiffFileName,
    HDC     hdcPrinterDC
    )
/*++

Routine name : TiffPrintDC

Routine description:

    Prints a TIFF file to a printer's DC

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    lpctstrTiffFileName    [in]  - Full path to the TIFF file
    hdcPrinterDC           [in]  - The printer's DC. The called should create / destry it.

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    BOOL        bResult = FALSE;
    HANDLE      hTiff;
    TIFF_INFO   TiffInfo;
    INT         iPrintJobId = 0;
    DWORD       dwTiffPage;
    DOCINFO     DocInfo;

    DEBUG_FUNCTION_NAME(TEXT("TiffPrintDC"));

    Assert (hdcPrinterDC && lpctstrTiffFileName);

    //
    // Prepare document information
    //
    DocInfo.cbSize = sizeof(DOCINFO);
    DocInfo.lpszDocName = lpctstrTiffFileName;
    DocInfo.lpszOutput = NULL;
    DocInfo.lpszDatatype = NULL;
    DocInfo.fwType = 0;

    hTiff = TiffOpen(
        (LPTSTR) lpctstrTiffFileName,
        &TiffInfo,
        TRUE,
        FILLORDER_LSB2MSB
        );

    if ( !hTiff ) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffOpen failed with %ld"),
            GetLastError ());
        return FALSE;
    }

    if (!(GetDeviceCaps(hdcPrinterDC, RASTERCAPS) & RC_STRETCHDIB)) 
    { 
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Printer does not support StretchDIBits"));
        SetLastError (ERROR_INVALID_PRINTER_COMMAND); 
        goto exit;
    } 
    //
    // Create print document
    //
    iPrintJobId = StartDoc( hdcPrinterDC, &DocInfo );

    if (iPrintJobId <= 0) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("StartDoc failed with %ld"),
            GetLastError ());
        goto exit;
    }

    for (dwTiffPage = 1; dwTiffPage <= TiffInfo.PageCount; dwTiffPage++)
    {
        //
        // Iterate the TIFF pages
        //
        if (!PrintTiffPage (hTiff, dwTiffPage, hdcPrinterDC, TiffInfo.PhotometricInterpretation))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("PrintTiffPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
    }

    bResult = TRUE;

exit:
    if (hTiff) 
    {
        TiffClose( hTiff );
    }

    if (iPrintJobId > 0) 
    {
        if (EndDoc(hdcPrinterDC) <= 0)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("EndDoc failed with %ld"),
                GetLastError ());
        }
    }
    return bResult;
}   // TiffPrintDC

BOOL
TiffPrint (
    LPCTSTR lpctstrTiffFileName,
    LPTSTR  lptstrPrinterName
    )
/*++

Routine name : TiffPrint

Routine description:

    Prints a TIFF file to a printer

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    lpctstrTiffFileName    [in]  - Full path to the TIFF file
    lptstrPrinterName      [in]  - Printer name

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    BOOL        bResult = FALSE;
    LPCTSTR     lpctstrDevice;
    HDC         hdcPrinterDC = NULL;

    DEBUG_FUNCTION_NAME(TEXT("TiffPrint"));

    Assert (lptstrPrinterName && lpctstrTiffFileName);
    //
    // Get 1st token in comman delimited printer name string
    //
    lpctstrDevice = _tcstok( lptstrPrinterName, TEXT(","));
    //
    // Create printer DC
    //
    hdcPrinterDC = CreateDC( TEXT("WINSPOOL"), lpctstrDevice, NULL, NULL );
    if ( !hdcPrinterDC ) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateDC failed with %ld"),
            GetLastError ());
        return FALSE;
    }
    bResult = TiffPrintDC (lpctstrTiffFileName, hdcPrinterDC);
    DeleteDC( hdcPrinterDC );
    return bResult;
}   // TiffPrint



static
BOOL
PrintTiffPage(
    HANDLE    hTiff,
    DWORD     dwPageNumber,
    HDC       hdcPrinterDC,
    BOOL      bPhotometricInterpretation
)
/*++

Routine name : PrintTiffPage

Routine description:

    Prints a single TIFF page to one or more printer's page(s)

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff                       [in]   - Handle to open TIFF file
    dwPageNumber                [in]   - 1-based TIFF page number
    hdcPrinterDC                [in]   - The printer device context
    bPhotometricInterpretation  [in]   - If FALSE, white is zero. Else, white is one.

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    SIZE            szPrinterPage;              // Size (in pixels) of physical printer page
    SIZE            szTiffPage;                 // Size (in pixels) of the TIFF page
    SIZE            szScaledTiffPage;           // Size (in pixels) of the scaled TIFF page

    LPBYTE          lpbPageData;                // Pixels data of TIFF page
    DWORD           dwPageYRes;                 // Y resolution of the page (DPI)
    DWORD           dwPageXRes;                 // X resolution of the page (DPI)
    DWORD           dwTiffPageWidthInBytes;     // Non-scaled TIFF page width (line) in bytes

    DWORD           dwPrinterXRes;              // X resolution of the printer page (DPI)
    BOOL            bDoubleVert;                // If Y resolution of TIFF page <= 100 DPI, we need to double the height
    DWORD           dwRequiredPrinterWidth;     // The required printer page width (pixels) to contain the entire TIFF width 
    double          dScaleFactor;               // TIFF image scale factor (always 0 < factor <= 1.0)

    DWORD           dwSubPages;                 // Number of printer pages required to print the TIFF page
    DWORD           dwCurSubPage;               // Current printer page (in this TIFF page)
    DWORD           dwTiffLinesPerPage;         // Number of non-scaled TIFF lines to print in one printer page

    DWORD           dwCurrentTiffY = 0;         // The 0-based Y position of the line to print from the non-scaled TIFF page
    DWORD           dwCurrentScaledTiffY = 0;   // The 0-based Y position of the line to print from the scaled TIFF page

    LPBYTE          lpbDataToPrint;             // Points to start line to print from
    BOOL            bRes = FALSE;               // Function return value

    double          dTiffWidthInInches;         // Width (in inches) of the non-scaled TIFF image

#define ORIG_BIYPELSPERMETER            7874    // Pixels per meter at 200dpi
#define FIT_TO_SINGLE_PAGE_MARGIN       (double)(1.15)   // See remarks in usage.

    struct 
    {
        BITMAPINFOHEADER bmiHeader;
        RGBQUAD bmiColors[2];
    } SrcBitmapInfo = 
        {
            {
                sizeof(BITMAPINFOHEADER),                        //  biSize
                0,                                               //  biWidth
                0,                                               //  biHeight
                1,                                               //  biPlanes
                1,                                               //  biBitCount
                BI_RGB,                                          //  biCompression
                0,                                               //  biSizeImage
                7874,                                            //  biXPelsPerMeter     - 200dpi
                ORIG_BIYPELSPERMETER,                            //  biYPelsPerMeter
                0,                                               //  biClrUsed
                0,                                               //  biClrImportant
            },
            {
                {
                  bPhotometricInterpretation ? 0 : 255,          //  rgbBlue
                  bPhotometricInterpretation ? 0 : 255,          //  rgbGreen
                  bPhotometricInterpretation ? 0 : 255,          //  rgbRed
                  0                                              //  rgbReserved
                },
                {
                  bPhotometricInterpretation ? 255 : 0,          //  rgbBlue
                  bPhotometricInterpretation ? 255 : 0,          //  rgbGreen
                  bPhotometricInterpretation ? 255 : 0,          //  rgbRed
                  0                                              //  rgbReserved
                }
            }
        };

    DEBUG_FUNCTION_NAME(TEXT("PrintTiffPage"));

    Assert (dwPageNumber && hdcPrinterDC && hTiff);
    //
    // Get printer's page dimensions
    //
    szPrinterPage.cx = GetDeviceCaps( hdcPrinterDC, HORZRES );
    szPrinterPage.cy = GetDeviceCaps( hdcPrinterDC, VERTRES );
    dwPrinterXRes    = GetDeviceCaps( hdcPrinterDC, LOGPIXELSX);
    if (0 == dwPrinterXRes)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Allocate and read the TIFF page into a buffer.
    //    
    lpbPageData = ReadTiffData(hTiff, 
                               dwPageNumber,
                               &szTiffPage.cx,
                               &szTiffPage.cy,
                               &dwPageYRes,
                               &dwPageXRes);
    if (!lpbPageData) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ReadTiffData failed with %ld"),
            GetLastError ());
        goto exit;
    }
    //
    // Calculate scaling ratio.
    //
    // If the TIFF's Y resultion is 100 DPI (or les), this is a low resultion TIFF and we must double every line
    // (i.e. scale by the factor of 2).
    //
    if (dwPageYRes <= 100) 
    {
        SrcBitmapInfo.bmiHeader.biYPelsPerMeter = ORIG_BIYPELSPERMETER / 2;
        bDoubleVert = TRUE;
    }
    else
    {
        SrcBitmapInfo.bmiHeader.biYPelsPerMeter = ORIG_BIYPELSPERMETER;
        bDoubleVert = FALSE;
    }
    if (0 == dwPageXRes)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    dTiffWidthInInches = (double)(szTiffPage.cx) / (double)dwPageXRes;
    if (0.0 == dTiffWidthInInches)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Now that we have the TIFF width in inches, let's calculate the number of 
    // pixels required on the printer to get the same width.
    //
    dwRequiredPrinterWidth = (DWORD)(dTiffWidthInInches * (double)dwPrinterXRes);
    if (dwRequiredPrinterWidth > (DWORD)szPrinterPage.cx)
    {
        //
        // The printer does not support the required page width.
        // We will print as wide as we can (shrinked-down image).
        //
        dwRequiredPrinterWidth = szPrinterPage.cx;
    }
    //
    // We scale  to make the image fit the page.
    // If the TIFF image (in inches) is wider than the printable page width (in inches) than we scale down.
    // Otherwise, we scale up to print the TIFF in the right width. 
    //
    // Once we find the scale factor, we must also scale the height to keep the image's aspect ratio intact.
    //
    dScaleFactor = (double)dwRequiredPrinterWidth / (double)szTiffPage.cx;
    if (0.0 == dScaleFactor)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Now we can have the scaled TIFF size
    //
    szScaledTiffPage.cx = (DWORD)(dScaleFactor * ((double)(szTiffPage.cx)));
    szScaledTiffPage.cy = (DWORD)(dScaleFactor * ((double)(szTiffPage.cy)));
    if (bDoubleVert)
    {
        szScaledTiffPage.cy *= 2;
    }
    //
    // Let's find how many printer pages are required to print the current (scaled) tiff page (by height only)
    //
    if (szScaledTiffPage.cy <= szPrinterPage.cy)
    {
        //
        // Page fits nicely into one printer page
        //
        dwSubPages = 1;
        //
        // All the TIFF lines fit into one page
        //
        dwTiffLinesPerPage = szTiffPage.cy;
    }
    else
    {
        //
        // Tiff page (scaled) is longer than printer page.
        // We will have to print the TIFF page in parts
        //
        dwSubPages = szScaledTiffPage.cy / szPrinterPage.cy;
        if (dwSubPages * (DWORD)szPrinterPage.cy < (DWORD)szScaledTiffPage.cy)
        {
            //
            // Fix off-by-one
            //
            dwSubPages++;
        }
        if ((2 == dwSubPages) &&
           ((double)(szScaledTiffPage.cy) / (double)(szPrinterPage.cy) < FIT_TO_SINGLE_PAGE_MARGIN))
        {
            //
            // This is a special case.
            // We're dealing with a single TIFF page that almost fits into a single printer page.
            // The 'almost' part is less that 15% so we take the liberty of scaling down the
            // TIFF page to perfectly fit into a single printer page.
            //
            dwSubPages = 1; // Fit to single printer page
            dScaleFactor = (double)(szPrinterPage.cy) / (double)(szScaledTiffPage.cy);
            szScaledTiffPage.cx = (DWORD)(dScaleFactor * ((double)(szScaledTiffPage.cx)));
            szScaledTiffPage.cy = szPrinterPage.cy;
            //
            // All the TIFF lines fit into one page
            //
            dwTiffLinesPerPage = szTiffPage.cy;
        }
        else
        {
            //
            // Find how many non-scaled TIFF lines fit into one printer page
            //
            dwTiffLinesPerPage = (DWORD)((double)(szPrinterPage.cy) / dScaleFactor);
            if (bDoubleVert)
            {
                dwTiffLinesPerPage /= 2;
            }
        }
    }
    //
    // Since the DIB is bottom-up, we start our pointer at the bottom-most page.
    //
    dwTiffPageWidthInBytes = PIXELS_TO_BYTES(szTiffPage.cx);
    Assert ((DWORD)(szTiffPage.cy) >= dwTiffLinesPerPage);
    lpbDataToPrint = &(lpbPageData[(szTiffPage.cy - dwTiffLinesPerPage) * dwTiffPageWidthInBytes]);
    for (dwCurSubPage = 1; dwCurSubPage <= dwSubPages; dwCurSubPage++)
    {
        //
        // Iterate printer pages (same TIFF page)
        //
        SIZE szDestination; // Size (in pixels) of the image on the current printer page
        SIZE szSource;      // Size (in pixels) of the sub-image from the non-scaled TIFF page

        //
        // Calculate size of destination (printer) image
        //
        szDestination.cx = szScaledTiffPage.cx;
        if (dwCurSubPage < dwSubPages)
        {
            //
            // Still not at the last print page - printing full page length
            //
            szDestination.cy = szPrinterPage.cy;
        }
        else
        {
            //
            // At last print page - print only the left over lines
            //
            szDestination.cy = szScaledTiffPage.cy - dwCurrentScaledTiffY;
        }        
        //
        // Calculate size of source (non-scaled TIFF page) image
        //
        szSource.cx = szTiffPage.cx;    // Always print full line width
        szSource.cy = dwTiffLinesPerPage;
        if (dwCurrentTiffY + dwTiffLinesPerPage > (DWORD)szTiffPage.cy)
        {
            //
            // Reduce lines count to left over lines only
            //
            szSource.cy = szTiffPage.cy - dwCurrentTiffY;
        }
        //
        // Prepare DIB header
        //
        SrcBitmapInfo.bmiHeader.biWidth          = (LONG) szSource.cx;
        //
        // Build a bottom-up DIB
        //
        SrcBitmapInfo.bmiHeader.biHeight         = (LONG) szSource.cy;

        if (0 >= StartPage( hdcPrinterDC ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StartPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
        //
        // do the bitmap streching now
        //
        if (GDI_ERROR == StretchDIBits(
                hdcPrinterDC,                   // Printer DC
                0,                              // Destination start x
                0,                              // Destination start y
                szDestination.cx,               // Destination (printer page) width
                szDestination.cy,               // Destination (printer page) height
                0,                              // Source start x   
                0,                              // Source start y
                szSource.cx,                    // Source (non-scaled TIFF image) width
                szSource.cy,                    // Source (non-scaled TIFF image) height
                lpbDataToPrint,                 // Pixels buffer source
                (BITMAPINFO *) &SrcBitmapInfo,  // Bitmap information
                DIB_RGB_COLORS,                 // Bitmap type
                SRCCOPY                         // Simple pixles copy
                ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StretchDIBits failed with %ld"),
                GetLastError ());
            EndPage ( hdcPrinterDC ) ;
            goto exit;
        }
        //
        // End current page
        //
        if (0 >= EndPage ( hdcPrinterDC ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("EndPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
        //
        // Advance counters / pointers
        //
        dwCurrentTiffY += szSource.cy;
        dwCurrentScaledTiffY += szDestination.cy;
        //
        // Move pointer up since this is a bottom-up DIB.
        //
        lpbDataToPrint -= dwTiffPageWidthInBytes * szSource.cy;
        if (lpbDataToPrint < lpbPageData)
        {
            //
            // On page before last or at last page
            //
            Assert (dwCurSubPage + 1 >= dwSubPages);
            lpbDataToPrint = lpbPageData;
        }
    }   // End of printer pages loop
    Assert (dwCurrentTiffY == (DWORD)szTiffPage.cy);
    Assert (dwCurrentScaledTiffY == (DWORD)szScaledTiffPage.cy);
    Assert (lpbDataToPrint == lpbPageData);
    bRes = TRUE;

exit:

    MemFree (lpbPageData);
    return bRes;
}   // PrintTiffPage
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\tifftabl.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifftabl.h

Abstract:

    Tables used for Group3 fax compression and decompression.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/


#ifndef _FAXTABLE_H_
#define _FAXTABLE_H_

//
// Data structure for representing code table entries
//

typedef struct _CODETABLE {

    WORD    length;     // code length
    WORD    code;       // code word itself

} CODETABLE;

typedef const CODETABLE *PCODETABLE;

//
// Code word for end-of-line (EOL)
//  000000000001
//

#define EOL_CODE                   1
#define EOL_REVERSED_CODE          0x0800
#define EOL_LENGTH                 12

#define TAG_1D_EOL_REVERSED_CODE   0x1001
#define TAG_1D_EOL_LENGTH          13

//
// Code word for 2D encoding - pass mode
//  0001
//

#define PASSCODE        1
#define PASSCODE_REVERSED  0x08
#define PASSCODE_LENGTH 4

//
// Code word for 2D encoding - horizontal mode prefix
//  001
//

#define HORZCODE        1
#define HORZCODE_REVERSED  0x04
#define HORZCODE_LENGTH 3

//
// Code word for 2D encoding - vertical mode
//

static const CODETABLE VertCodes[] = {

    {  7, 0x02 },       // 0000010     VTMODE3N
    {  6, 0x02 },       // 000010      VTMODE2N
    {  3, 0x02 },       // 010         VTMODE1N
    {  1, 0x01 },       // 1           VTMODE0
    {  3, 0x03 },       // 011         VTMODE1P
    {  6, 0x03 },       // 000011      VTMODE2P
    {  7, 0x03 },       // 0000011     VTMODE3P
};


static const CODETABLE VertCodesReversed[] = {

    {  7, 0x20 },       // 010 0000    VTMODE3N
    {  6, 0x10 },       // 01 0000     VTMODE2N
    {  3, 0x02 },       // 010         VTMODE1N
    {  1, 0x01 },       // 1           VTMODE0
    {  3, 0x06 },       // 110         VTMODE1P
    {  6, 0x30 },       // 11 0000     VTMODE2P
    {  7, 0x60 },       // 110 0000    VTMODE3P
};




//
// Code table for white runs
//

static const CODETABLE WhiteRunCodes[] = {

    {  8, 0x35 },       // 00110101            0         0
    {  6, 0x07 },       // 000111              1         1
    {  4, 0x07 },       // 0111                2         2
    {  4, 0x08 },       // 1000                3         3
    {  4, 0x0b },       // 1011                4         4
    {  4, 0x0c },       // 1100                5         5
    {  4, 0x0e },       // 1110                6         6
    {  4, 0x0f },       // 1111                7         7
    {  5, 0x13 },       // 10011               8         8
    {  5, 0x14 },       // 10100               9         9
    {  5, 0x07 },       // 00111              10        10
    {  5, 0x08 },       // 01000              11        11
    {  6, 0x08 },       // 001000             12        12
    {  6, 0x03 },       // 000011             13        13
    {  6, 0x34 },       // 110100             14        14
    {  6, 0x35 },       // 110101             15        15
    {  6, 0x2a },       // 101010             16        16
    {  6, 0x2b },       // 101011             17        17
    {  7, 0x27 },       // 0100111            18        18
    {  7, 0x0c },       // 0001100            19        19
    {  7, 0x08 },       // 0001000            20        20
    {  7, 0x17 },       // 0010111            21        21
    {  7, 0x03 },       // 0000011            22        22
    {  7, 0x04 },       // 0000100            23        23
    {  7, 0x28 },       // 0101000            24        24
    {  7, 0x2b },       // 0101011            25        25
    {  7, 0x13 },       // 0010011            26        26
    {  7, 0x24 },       // 0100100            27        27
    {  7, 0x18 },       // 0011000            28        28
    {  8, 0x02 },       // 00000010           29        29
    {  8, 0x03 },       // 00000011           30        30
    {  8, 0x1a },       // 00011010           31        31
    {  8, 0x1b },       // 00011011           32        32
    {  8, 0x12 },       // 00010010           33        33
    {  8, 0x13 },       // 00010011           34        34
    {  8, 0x14 },       // 00010100           35        35
    {  8, 0x15 },       // 00010101           36        36
    {  8, 0x16 },       // 00010110           37        37
    {  8, 0x17 },       // 00010111           38        38
    {  8, 0x28 },       // 00101000           39        39
    {  8, 0x29 },       // 00101001           40        40
    {  8, 0x2a },       // 00101010           41        41
    {  8, 0x2b },       // 00101011           42        42
    {  8, 0x2c },       // 00101100           43        43
    {  8, 0x2d },       // 00101101           44        44
    {  8, 0x04 },       // 00000100           45        45
    {  8, 0x05 },       // 00000101           46        46
    {  8, 0x0a },       // 00001010           47        47
    {  8, 0x0b },       // 00001011           48        48
    {  8, 0x52 },       // 01010010           49        49
    {  8, 0x53 },       // 01010011           50        50
    {  8, 0x54 },       // 01010100           51        51
    {  8, 0x55 },       // 01010101           52        52
    {  8, 0x24 },       // 00100100           53        53
    {  8, 0x25 },       // 00100101           54        54
    {  8, 0x58 },       // 01011000           55        55
    {  8, 0x59 },       // 01011001           56        56
    {  8, 0x5a },       // 01011010           57        57
    {  8, 0x5b },       // 01011011           58        58
    {  8, 0x4a },       // 01001010           59        59
    {  8, 0x4b },       // 01001011           50        60
    {  8, 0x32 },       // 00110010           51        61
    {  8, 0x33 },       // 00110011           52        62
    {  8, 0x34 },       // 00110100           53        63
    {  5, 0x1b },       // 11011              54        64
    {  5, 0x12 },       // 10010              55       128
    {  6, 0x17 },       // 010111             56       192
    {  7, 0x37 },       // 0110111            57       256
    {  8, 0x36 },       // 00110110           58       320
    {  8, 0x37 },       // 00110111           59       384
    {  8, 0x64 },       // 01100100           60       448
    {  8, 0x65 },       // 01100101           61       512
    {  8, 0x68 },       // 01101000           62       576
    {  8, 0x67 },       // 01100111           63       640
    {  9, 0xcc },       // 011001100          64       704
    {  9, 0xcd },       // 011001101          65       768
    {  9, 0xd2 },       // 011010010          66       832
    {  9, 0xd3 },       // 011010011          67       896
    {  9, 0xd4 },       // 011010100          68       960
    {  9, 0xd5 },       // 011010101          69      1024
    {  9, 0xd6 },       // 011010110          70      1088
    {  9, 0xd7 },       // 011010111          71      1152
    {  9, 0xd8 },       // 011011000          72      1216
    {  9, 0xd9 },       // 011011001          73      1280
    {  9, 0xda },       // 011011010          74      1344
    {  9, 0xdb },       // 011011011          75      1408
    {  9, 0x98 },       // 010011000          76      1472
    {  9, 0x99 },       // 010011001          77      1536
    {  9, 0x9a },       // 010011010          78      1600
    {  6, 0x18 },       // 011000             79      1664
    {  9, 0x9b },       // 010011011          80      1728
    { 11, 0x08 },       // 00000001000        81      1792
    { 11, 0x0c },       // 00000001100        82      1856
    { 11, 0x0d },       // 00000001101        83      1920
    { 12, 0x12 },       // 000000010010       84      1984
    { 12, 0x13 },       // 000000010011       85      2048
    { 12, 0x14 },       // 000000010100       86      2112
    { 12, 0x15 },       // 000000010101       87      2176
    { 12, 0x16 },       // 000000010110       88      2240
    { 12, 0x17 },       // 000000010111       89      2304
    { 12, 0x1c },       // 000000011100       90      2368
    { 12, 0x1d },       // 000000011101       91      2432
    { 12, 0x1e },       // 000000011110       92      2496
    { 12, 0x1f },       // 000000011111       93      2560
};

static const CODETABLE WhiteRunCodesReversed[] = {

    {  8, 0x00ac },       // 00110101            0         0
    {  6, 0x0038 },       // 000111              1         1
    {  4, 0x000e },       // 0111                2         2
    {  4, 0x0001 },       // 1000                3         3
    {  4, 0x000d },       // 1011                4         4
    {  4, 0x0003 },       // 1100                5         5
    {  4, 0x0007 },       // 1110                6         6
    {  4, 0x000f },       // 1111                7         7
    {  5, 0x0019 },       // 10011               8         8
    {  5, 0x0005 },       // 10100               9         9
    {  5, 0x001c },       // 00111              10        10
    {  5, 0x0002 },       // 01000              11        11
    {  6, 0x0004 },       // 001000             12        12
    {  6, 0x0030 },       // 000011             13        13
    {  6, 0x000b },       // 110100             14        14
    {  6, 0x002b },       // 110101             15        15
    {  6, 0x0015 },       // 101010             16        16
    {  6, 0x0035 },       // 101011             17        17
    {  7, 0x0072 },       // 0100111            18        18
    {  7, 0x0018 },       // 0001100            19        19
    {  7, 0x0008 },       // 0001000            20        20
    {  7, 0x0074 },       // 0010111            21        21
    {  7, 0x0060 },       // 0000011            22        22
    {  7, 0x0010 },       // 0000100            23        23
    {  7, 0x000a },       // 0101000            24        24
    {  7, 0x006a },       // 0101011            25        25
    {  7, 0x0064 },       // 0010011            26        26
    {  7, 0x0012 },       // 0100100            27        27
    {  7, 0x000c },       // 0011000            28        28
    {  8, 0x0040 },       // 00000010           29        29
    {  8, 0x00c0 },       // 00000011           30        30
    {  8, 0x0058 },       // 00011010           31        31
    {  8, 0x00d8 },       // 00011011           32        32
    {  8, 0x0048 },       // 00010010           33        33
    {  8, 0x00c8 },       // 00010011           34        34
    {  8, 0x0028 },       // 00010100           35        35
    {  8, 0x00a8 },       // 00010101           36        36
    {  8, 0x0068 },       // 00010110           37        37
    {  8, 0x00e8 },       // 00010111           38        38
    {  8, 0x0014 },       // 00101000           39        39
    {  8, 0x0094 },       // 00101001           40        40
    {  8, 0x0054 },       // 00101010           41        41
    {  8, 0x00d4 },       // 00101011           42        42
    {  8, 0x0034 },       // 00101100           43        43
    {  8, 0x00b4 },       // 00101101           44        44
    {  8, 0x0020 },       // 00000100           45        45
    {  8, 0x00a0 },       // 00000101           46        46
    {  8, 0x0050 },       // 00001010           47        47
    {  8, 0x00d0 },       // 00001011           48        48
    {  8, 0x004a },       // 01010010           49        49
    {  8, 0x00ca },       // 01010011           50        50
    {  8, 0x002a },       // 01010100           51        51
    {  8, 0x00aa },       // 01010101           52        52
    {  8, 0x0024 },       // 00100100           53        53
    {  8, 0x00a4 },       // 00100101           54        54
    {  8, 0x001a },       // 01011000           55        55
    {  8, 0x009a },       // 01011001           56        56
    {  8, 0x005a },       // 01011010           57        57
    {  8, 0x00da },       // 01011011           58        58
    {  8, 0x0052 },       // 01001010           59        59
    {  8, 0x00d2 },       // 01001011           50        60
    {  8, 0x004c },       // 00110010           51        61
    {  8, 0x00cc },       // 00110011           52        62
    {  8, 0x002c },       // 00110100           53        63
    {  5, 0x001b },       // 11011              54        64
    {  5, 0x0009 },       // 10010              55       128
    {  6, 0x003a },       // 010111             56       192
    {  7, 0x0076 },       // 0110111            57       256
    {  8, 0x006c },       // 00110110           58       320
    {  8, 0x00ec },       // 00110111           59       384
    {  8, 0x0026 },       // 01100100           60       448
    {  8, 0x00a6 },       // 01100101           61       512
    {  8, 0x0016 },       // 01101000           62       576
    {  8, 0x00e6 },       // 01100111           63       640
    {  9, 0x0066 },       // 011001100          64       704
    {  9, 0x0166 },       // 011001101          65       768
    {  9, 0x0096 },       // 011010010          66       832
    {  9, 0x0196 },       // 011010011          67       896
    {  9, 0x0056 },       // 011010100          68       960
    {  9, 0x0156 },       // 011010101          69      1024
    {  9, 0x00d6 },       // 011010110          70      1088
    {  9, 0x01d6 },       // 011010111          71      1152
    {  9, 0x0036 },       // 011011000          72      1216
    {  9, 0x0136 },       // 011011001          73      1280
    {  9, 0x00b6 },       // 011011010          74      1344
    {  9, 0x01b6 },       // 011011011          75      1408
    {  9, 0x0032 },       // 010011000          76      1472
    {  9, 0x0132 },       // 010011001          77      1536
    {  9, 0x00b2 },       // 010011010          78      1600
    {  6, 0x0006 },       // 011000             79      1664
    {  9, 0x01b2 },       // 010011011          80      1728
    { 11, 0x0080 },       // 00000001000        81      1792
    { 11, 0x0180 },       // 00000001100        82      1856
    { 11, 0x0580 },       // 00000001101        83      1920
    { 12, 0x0480 },       // 000000010010       84      1984
    { 12, 0x0c80 },       // 000000010011       85      2048
    { 12, 0x0280 },       // 000000010100       86      2112
    { 12, 0x0a80 },       // 000000010101       87      2176
    { 12, 0x0680 },       // 000000010110       88      2240
    { 12, 0x0e80 },       // 000000010111       89      2304
    { 12, 0x0380 },       // 000000011100       90      2368
    { 12, 0x0b80 },       // 000000011101       91      2432
    { 12, 0x0780 },       // 000000011110       92      2496
    { 12, 0x0f80 },       // 000000011111       93      2560
};

#define WhiteRunCodeEntries  (sizeof(WhiteRunCodes)/sizeof(CODETABLE))

//
// Code table for black runs
//

static const CODETABLE BlackRunCodes[] = {

    { 10, 0x37 },       // 0000110111          0       0
    {  3, 0x02 },       // 010                 1       1
    {  2, 0x03 },       // 11                  2       2
    {  2, 0x02 },       // 10                  3       3
    {  3, 0x03 },       // 011                 4       4
    {  4, 0x03 },       // 0011                5       5
    {  4, 0x02 },       // 0010                6       6
    {  5, 0x03 },       // 00011               7       7
    {  6, 0x05 },       // 000101              8       8
    {  6, 0x04 },       // 000100              9       9
    {  7, 0x04 },       // 0000100            10      10
    {  7, 0x05 },       // 0000101            11      11
    {  7, 0x07 },       // 0000111            12      12
    {  8, 0x04 },       // 00000100           13      13
    {  8, 0x07 },       // 00000111           14      14
    {  9, 0x18 },       // 000011000          15      15
    { 10, 0x17 },       // 0000010111         16      16
    { 10, 0x18 },       // 0000011000         17      17
    { 10, 0x08 },       // 0000001000         18      18
    { 11, 0x67 },       // 00001100111        19      19
    { 11, 0x68 },       // 00001101000        20      20
    { 11, 0x6c },       // 00001101100        21      21
    { 11, 0x37 },       // 00000110111        22      22
    { 11, 0x28 },       // 00000101000        23      23
    { 11, 0x17 },       // 00000010111        24      24
    { 11, 0x18 },       // 00000011000        25      25
    { 12, 0xca },       // 000011001010       26      26
    { 12, 0xcb },       // 000011001011       27      27
    { 12, 0xcc },       // 000011001100       28      28
    { 12, 0xcd },       // 000011001101       29      29
    { 12, 0x68 },       // 000001101000       30      30
    { 12, 0x69 },       // 000001101001       31      31
    { 12, 0x6a },       // 000001101010       32      32
    { 12, 0x6b },       // 000001101011       33      33
    { 12, 0xd2 },       // 000011010010       34      34
    { 12, 0xd3 },       // 000011010011       35      35
    { 12, 0xd4 },       // 000011010100       36      36
    { 12, 0xd5 },       // 000011010101       37      37
    { 12, 0xd6 },       // 000011010110       38      38
    { 12, 0xd7 },       // 000011010111       39      39
    { 12, 0x6c },       // 000001101100       40      40
    { 12, 0x6d },       // 000001101101       41      41
    { 12, 0xda },       // 000011011010       42      42
    { 12, 0xdb },       // 000011011011       43      43
    { 12, 0x54 },       // 000001010100       44      44
    { 12, 0x55 },       // 000001010101       45      45
    { 12, 0x56 },       // 000001010110       46      46
    { 12, 0x57 },       // 000001010111       47      47
    { 12, 0x64 },       // 000001100100       48      48
    { 12, 0x65 },       // 000001100101       49      49
    { 12, 0x52 },       // 000001010010       50      50
    { 12, 0x53 },       // 000001010011       51      51
    { 12, 0x24 },       // 000000100100       52      52
    { 12, 0x37 },       // 000000110111       53      53
    { 12, 0x38 },       // 000000111000       54      54
    { 12, 0x27 },       // 000000100111       55      55
    { 12, 0x28 },       // 000000101000       56      56
    { 12, 0x58 },       // 000001011000       57      57
    { 12, 0x59 },       // 000001011001       58      58
    { 12, 0x2b },       // 000000101011       59      59
    { 12, 0x2c },       // 000000101100       50      60
    { 12, 0x5a },       // 000001011010       51      61
    { 12, 0x66 },       // 000001100110       52      62
    { 12, 0x67 },       // 000001100111       53      63
    { 10, 0x0f },       // 0000001111         54      64
    { 12, 0xc8 },       // 000011001000       55     128
    { 12, 0xc9 },       // 000011001001       56     192
    { 12, 0x5b },       // 000001011011       57     256
    { 12, 0x33 },       // 000000110011       58     320
    { 12, 0x34 },       // 000000110100       59     384
    { 12, 0x35 },       // 000000110101       60     448
    { 13, 0x6c },       // 0000001101100      61     512
    { 13, 0x6d },       // 0000001101101      62     576
    { 13, 0x4a },       // 0000001001010      63     640
    { 13, 0x4b },       // 0000001001011      64     704
    { 13, 0x4c },       // 0000001001100      65     768
    { 13, 0x4d },       // 0000001001101      66     832
    { 13, 0x72 },       // 0000001110010      67     896
    { 13, 0x73 },       // 0000001110011      68     960
    { 13, 0x74 },       // 0000001110100      69    1024
    { 13, 0x75 },       // 0000001110101      70    1088
    { 13, 0x76 },       // 0000001110110      71    1152
    { 13, 0x77 },       // 0000001110111      72    1216
    { 13, 0x52 },       // 0000001010010      73    1280
    { 13, 0x53 },       // 0000001010011      74    1344
    { 13, 0x54 },       // 0000001010100      75    1408
    { 13, 0x55 },       // 0000001010101      76    1472
    { 13, 0x5a },       // 0000001011010      77    1536
    { 13, 0x5b },       // 0000001011011      78    1600
    { 13, 0x64 },       // 0000001100100      79    1664
    { 13, 0x65 },       // 0000001100101      80    1728
    { 11, 0x08 },       // 00000001000        81    1792
    { 11, 0x0c },       // 00000001100        82    1856
    { 11, 0x0d },       // 00000001101        83    1920
    { 12, 0x12 },       // 000000010010       84    1984
    { 12, 0x13 },       // 000000010011       85    2048
    { 12, 0x14 },       // 000000010100       86    2112
    { 12, 0x15 },       // 000000010101       87    2176
    { 12, 0x16 },       // 000000010110       88    2240
    { 12, 0x17 },       // 000000010111       89    2304
    { 12, 0x1c },       // 000000011100       90    2368
    { 12, 0x1d },       // 000000011101       91    2432
    { 12, 0x1e },       // 000000011110       92    2496
    { 12, 0x1f },       // 000000011111       93    2560
};

static const CODETABLE BlackRunCodesReversed[] = {

    { 10, 0x03b0 },       // 0000110111          0       0
    {  3, 0x0002 },       // 010                 1       1
    {  2, 0x0003 },       // 11                  2       2
    {  2, 0x0001 },       // 10                  3       3
    {  3, 0x0006 },       // 011                 4       4
    {  4, 0x000c },       // 0011                5       5
    {  4, 0x0004 },       // 0010                6       6
    {  5, 0x0018 },       // 00011               7       7
    {  6, 0x0028 },       // 000101              8       8
    {  6, 0x0008 },       // 000100              9       9
    {  7, 0x0010 },       // 0000100            10      10
    {  7, 0x0050 },       // 0000101            11      11
    {  7, 0x0070 },       // 0000111            12      12
    {  8, 0x0020 },       // 00000100           13      13
    {  8, 0x00e0 },       // 00000111           14      14
    {  9, 0x0030 },       // 000011000          15      15
    { 10, 0x03a0 },       // 0000010111         16      16
    { 10, 0x0060 },       // 0000011000         17      17
    { 10, 0x0040 },       // 0000001000         18      18
    { 11, 0x0730 },       // 00001100111        19      19
    { 11, 0x00b0 },       // 00001101000        20      20
    { 11, 0x01b0 },       // 00001101100        21      21
    { 11, 0x0760 },       // 00000110111        22      22
    { 11, 0x00a0 },       // 00000101000        23      23
    { 11, 0x0740 },       // 00000010111        24      24
    { 11, 0x00c0 },       // 00000011000        25      25
    { 12, 0x0530 },       // 000011001010       26      26
    { 12, 0x0d30 },       // 000011001011       27      27
    { 12, 0x0330 },       // 000011001100       28      28
    { 12, 0x0b30 },       // 000011001101       29      29
    { 12, 0x0160 },       // 000001101000       30      30
    { 12, 0x0960 },       // 000001101001       31      31
    { 12, 0x0560 },       // 000001101010       32      32
    { 12, 0x0d60 },       // 000001101011       33      33
    { 12, 0x04b0 },       // 000011010010       34      34
    { 12, 0x0cb0 },       // 000011010011       35      35
    { 12, 0x02b0 },       // 000011010100       36      36
    { 12, 0x0ab0 },       // 000011010101       37      37
    { 12, 0x06b0 },       // 000011010110       38      38
    { 12, 0x0eb0 },       // 000011010111       39      39
    { 12, 0x0360 },       // 000001101100       40      40
    { 12, 0x0b60 },       // 000001101101       41      41
    { 12, 0x05b0 },       // 000011011010       42      42
    { 12, 0x0db0 },       // 000011011011       43      43
    { 12, 0x02a0 },       // 000001010100       44      44
    { 12, 0x0aa0 },       // 000001010101       45      45
    { 12, 0x06a0 },       // 000001010110       46      46
    { 12, 0x0ea0 },       // 000001010111       47      47
    { 12, 0x0260 },       // 000001100100       48      48
    { 12, 0x0a60 },       // 000001100101       49      49
    { 12, 0x04a0 },       // 000001010010       50      50
    { 12, 0x0ca0 },       // 000001010011       51      51
    { 12, 0x0240 },       // 000000100100       52      52
    { 12, 0x0ec0 },       // 000000110111       53      53
    { 12, 0x01c0 },       // 000000111000       54      54
    { 12, 0x0e40 },       // 000000100111       55      55
    { 12, 0x0140 },       // 000000101000       56      56
    { 12, 0x01a0 },       // 000001011000       57      57
    { 12, 0x09a0 },       // 000001011001       58      58
    { 12, 0x0d40 },       // 000000101011       59      59
    { 12, 0x0340 },       // 000000101100       50      60
    { 12, 0x05a0 },       // 000001011010       51      61
    { 12, 0x0660 },       // 000001100110       52      62
    { 12, 0x0e60 },       // 000001100111       53      63
    { 10, 0x03c0 },       // 0000001111         54      64
    { 12, 0x0130 },       // 000011001000       55     128
    { 12, 0x0930 },       // 000011001001       56     192
    { 12, 0x0da0 },       // 000001011011       57     256
    { 12, 0x0cc0 },       // 000000110011       58     320
    { 12, 0x02c0 },       // 000000110100       59     384
    { 12, 0x0ac0 },       // 000000110101       60     448
    { 13, 0x06c0 },       // 0000001101100      61     512
    { 13, 0x16c0 },       // 0000001101101      62     576
    { 13, 0x0a40 },       // 0000001001010      63     640
    { 13, 0x1a40 },       // 0000001001011      64     704
    { 13, 0x0640 },       // 0000001001100      65     768
    { 13, 0x1640 },       // 0000001001101      66     832
    { 13, 0x09c0 },       // 0000001110010      67     896
    { 13, 0x19c0 },       // 0000001110011      68     960
    { 13, 0x05c0 },       // 0000001110100      69    1024
    { 13, 0x15c0 },       // 0000001110101      70    1088
    { 13, 0x0dc0 },       // 0000001110110      71    1152
    { 13, 0x1dc0 },       // 0000001110111      72    1216
    { 13, 0x0940 },       // 0000001010010      73    1280
    { 13, 0x1940 },       // 0000001010011      74    1344
    { 13, 0x0540 },       // 0000001010100      75    1408
    { 13, 0x1540 },       // 0000001010101      76    1472
    { 13, 0x0b40 },       // 0000001011010      77    1536
    { 13, 0x1b40 },       // 0000001011011      78    1600
    { 13, 0x04c0 },       // 0000001100100      79    1664
    { 13, 0x14c0 },       // 0000001100101      80    1728
    { 11, 0x0080 },       // 00000001000        81    1792
    { 11, 0x0180 },       // 00000001100        82    1856
    { 11, 0x0580 },       // 00000001101        83    1920
    { 12, 0x0480 },       // 000000010010       84    1984
    { 12, 0x0c80 },       // 000000010011       85    2048
    { 12, 0x0280 },       // 000000010100       86    2112
    { 12, 0x0a80 },       // 000000010101       87    2176
    { 12, 0x0680 },       // 000000010110       88    2240
    { 12, 0x0e80 },       // 000000010111       89    2304
    { 12, 0x0380 },       // 000000011100       90    2368
    { 12, 0x0b80 },       // 000000011101       91    2432
    { 12, 0x0780 },       // 000000011110       92    2496
    { 12, 0x0f80 },       // 000000011111       93    2560
};


#define BlackRunCodeEntries  (sizeof(BlackRunCodes)/sizeof(CODETABLE))


#define BADRUN      3000
#define DECODEEOL   3001
#define DECODEEOL2  3002
#define HORZMODE    3003
#define VTMODE3N    3004
#define VTMODE2N    3005
#define VTMODE1N    3006
#define VTMODE0     3007
#define VTMODE1P    3008
#define VTMODE2P    3009
#define VTMODE3P    3010
#define PASSMODE    3011


typedef struct _DECODE_TREE {
    INT     Left;
    INT     Right;
} DECODE_TREE;

typedef CONST DECODE_TREE *PDECODE_TREE;


static const DECODE_TREE WhiteDecodeTree[] =
{
    {         1,                 80  },                   // 0
    {        40,                  2  },                   // 1
    {        21,                  3  },                   // 2
    {         4,                 -2  },                   // 3
    {        16,                  5  },                   // 4
    {        10,                  6  },                   // 5
    {         7,               -256  },                   // 6
    {         9,                  8  },                   // 7
    {     -1344,              -1408  },                   // 8
    {     -1216,              -1280  },                   // 9
    {        11,                 13  },                   // 10
    {      -576,                 12  },                   // 11
    {      -832,               -896  },                   // 12
    {        14,                 15  },                   // 13
    {      -960,              -1024  },                   // 14
    {     -1088,              -1152  },                   // 15
    {     -1664,                 17  },                   // 16
    {        18,                 19  },                   // 17
    {      -448,               -512  },                   // 18
    {        20,               -640  },                   // 19
    {      -704,               -768  },                   // 20
    {        32,                 22  },                   // 21
    {        23,                 28  },                   // 22
    {        24,                 26  },                   // 23
    {       -24,                 25  },                   // 24
    {       -49,                -50  },                   // 25
    {        27,                -25  },                   // 26
    {       -51,                -52  },                   // 27
    {        29,               -192  },                   // 28
    {        30,                 31  },                   // 29
    {       -55,                -56  },                   // 30
    {       -57,                -58  },                   // 31
    {       -11,                 33  },                   // 32
    {        34,                 36  },                   // 33
    {       -27,                 35  },                   // 34
    {       -59,                -60  },                   // 35
    {        37,                -18  },                   // 36
    {        38,                 39  },                   // 37
    {     -1472,              -1536  },                   // 38
    {     -1600,              -1728  },                   // 39
    {        59,                 41  },                   // 40
    {        49,                 42  },                   // 41
    {        43,                -10  },                   // 42
    {        47,                 44  },                   // 43
    {        46,                 45  },                   // 44
    {      -320,               -384  },                   // 45
    {       -63,                  0  },                   // 46
    {       -28,                 48  },                   // 47
    {       -61,                -62  },                   // 48
    {        56,                 50  },                   // 49
    {        53,                 51  },                   // 50
    {        52,                -21  },                   // 51
    {       -43,                -44  },                   // 52
    {        55,                 54  },                   // 53
    {       -41,                -42  },                   // 54
    {       -39,                -40  },                   // 55
    {       -12,                 57  },                   // 56
    {        58,                -26  },                   // 57
    {       -53,                -54  },                   // 58
    {        70,                 60  },                   // 59
    {        64,                 61  },                   // 60
    {        62,                 -1  },                   // 61
    {       -19,                 63  },                   // 62
    {       -31,                -32  },                   // 63
    {        68,                 65  },                   // 64
    {        67,                 66  },                   // 65
    {       -37,                -38  },                   // 66
    {       -35,                -36  },                   // 67
    {       -20,                 69  },                   // 68
    {       -33,                -34  },                   // 69
    {        74,                 71  },                   // 70
    {        72,                -13  },                   // 71
    {       -23,                 73  },                   // 72
    {       -47,                -48  },                   // 73
    {        77,                 75  },                   // 74
    {        76,                -22  },                   // 75
    {       -45,                -46  },                   // 76
    {        79,                 78  },                   // 77
    {       -29,                -30  },                   // 78
    { DECODEEOL,                 92  },                   // 79 
    {        86,                 81  },                   // 80
    {        83,                 82  },                   // 81
    {        -6,                 -7  },                   // 82
    {        -5,                 84  },                   // 83
    {        85,                -64  },                   // 84
    {       -14,                -15  },                   // 85
    {        90,                 87  },                   // 86
    {        88,                 -4  },                   // 87
    {        -9,                 89  },                   // 88
    {       -16,                -17  },                   // 89
    {        -3,                 91  },                   // 90
    {      -128,                 -8  },                   // 91
//  From here we use long run-length
    {        93,                 94  },                   // 92
    {        95,                 96  },                   // 93
    {        97,                 98  },                   // 94
    {     -1792,                 99  },                   // 95
    {       100,                101  },                   // 96
    {     -1856,              -1920  },                   // 97
    {       102,                103  },                   // 98
    {     -1984,              -2048  },                   // 99
    {     -2112,              -2176  },                   // 100
    {     -2240,              -2304  },                   // 101
    {     -2368,              -2432  },                   // 102
    {     -2496,              -2560  }                   // 103
    
};

#define WhiteDecodeEntries  (sizeof(WhiteDecodeTree)/sizeof(DECODE_TREE))


static const DECODE_TREE BlackDecodeTree[] =
{
    {         2,                  1  },                   // 0
    {        -3,                 -2  },                   // 1
    {         4,                  3  },                   // 2
    {        -1,                 -4  },                   // 3
    {         6,                  5  },                   // 4
    {        -6,                 -5  },                   // 5
    {         9,                  7  },                   // 6
    {         8,                 -7  },                   // 7
    {        -9,                 -8  },                   // 8
    {        31,                 10  },                   // 9
    {        30,                 11  },                   // 10
    {        12,                -12  },                   // 11
    {        23,                 13  },                   // 12
    {        17,                 14  },                   // 13
    {        15,                  0  },                   // 14
    {       -21,                 16  },                   // 15
    {       -42,                -43  },                   // 16
    {        21,                 18  },                   // 17
    {        20,                 19  },                   // 18
    {       -38,                -39  },                   // 19
    {       -36,                -37  },                   // 20
    {       -20,                 22  },                   // 21
    {       -34,                -35  },                   // 22
    {       -15,                 24  },                   // 23
    {        27,                 25  },                   // 24
    {        26,                -19  },                   // 25
    {       -28,                -29  },                   // 26
    {        29,                 28  },                   // 27
    {       -26,                -27  },                   // 28
    {      -128,               -192  },                   // 29
    {       -10,                -11  },                   // 30
    {        57,                 32  },                   // 31
    {        45,                 33  },                   // 32
    {        34,                -14  },                   // 33
    {        41,                 35  },                   // 34
    {        38,                 36  },                   // 35
    {        37,                -22  },                   // 36
    {       -40,                -41  },                   // 37
    {        40,                 39  },                   // 38
    {       -32,                -33  },                   // 39
    {       -30,                -31  },                   // 40
    {       -17,                 42  },                   // 41
    {        44,                 43  },                   // 42
    {       -62,                -63  },                   // 43
    {       -48,                -49  },                   // 44
    {       -13,                 46  },                   // 45
    {        51,                 47  },                   // 46
    {        48,                -16  },                   // 47
    {        50,                 49  },                   // 48
    {       -61,               -256  },                   // 49
    {       -57,                -58  },                   // 50
    {        55,                 52  },                   // 51
    {        54,                 53  },                   // 52
    {       -46,                -47  },                   // 53
    {       -44,                -45  },                   // 54
    {       -23,                 56  },                   // 55
    {       -50,                -51  },                   // 56
    {        91,                 58  },                   // 57 
    {        75,                 59  },                   // 58
    {        67,                 60  },                   // 59
    {        61,                -64  },                   // 60
    {        65,                 62  },                   // 61
    {        64,                 63  },                   // 62
    {     -1152,              -1216  },                   // 63
    {     -1024,              -1088  },                   // 64
    {       -54,                 66  },                   // 65
    {      -896,               -960  },                   // 66
    {        72,                 68  },                   // 67
    {        71,                 69  },                   // 68
    {        70,                -53  },                   // 69
    {      -512,               -576  },                   // 70
    {      -384,               -448  },                   // 71
    {       -25,                 73  },                   // 72
    {        74,               -320  },                   // 73
    {     -1664,              -1728  },                   // 74
    {        85,                 76  },                   // 75
    {        80,                 77  },                   // 76
    {        78,                -24  },                   // 77
    {       -60,                 79  },                   // 78
    {     -1536,              -1600  },                   // 79
    {        83,                 81  },                   // 80
    {        82,                -59  },                   // 81
    {     -1408,              -1472  },                   // 82
    {       -56,                 84  },                   // 83
    {     -1280,              -1344  },                   // 84
    {       -18,                 86  },                   // 85
    {        89,                 87  },                   // 86
    {        88,                -55  },                   // 87
    {      -768,               -832  },                   // 88
    {       -52,                 90  },                   // 89
    {      -640,               -704  },                   // 90

    //  From here we use long run-length
    { DECODEEOL,                 92  },                   // 91

    //  Exact copy from WhiteDecodeTree
    {        93,                 94  },                   // 92
    {        95,                 96  },                   // 93
    {        97,                 98  },                   // 94
    {     -1792,                 99  },                   // 95
    {       100,                101  },                   // 96
    {     -1856,              -1920  },                   // 97
    {       102,                103  },                   // 98
    {     -1984,              -2048  },                   // 99
    {     -2112,              -2176  },                   // 100
    {     -2240,              -2304  },                   // 101
    {     -2368,              -2432  },                   // 102
    {     -2496,              -2560  }                    // 103


};

#define BlackDecodeEntries  (sizeof(BlackDecodeTree)/sizeof(DECODE_TREE))


static const DECODE_TREE TwoDecodeTree[] =
{
    {         1,            VTMODE0  },                   // 0
    {         2,                  3  },                   // 1
    {         4,           HORZMODE  },                   // 2
    {  VTMODE1N,           VTMODE1P  },                   // 3
    {         5,           PASSMODE  },                   // 4
    {         6,                  7  },                   // 5
    {         8,                  9  },                   // 6
    {  VTMODE2N,           VTMODE2P  },                   // 7
    { DECODEEOL,             BADRUN  },                   // 8
    {  VTMODE3N,           VTMODE3P  }                    // 9
};


static const BYTE BitReverseTable[256] =
{
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};



static const BYTE First1[256] = {
    0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
};



static const BYTE Last1[256] = {
    0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
};


static const BYTE All1[8] = {
    0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe
};


#endif  // !_FAXTABLE_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\util\critsec.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    CritSec.cpp

Abstract:

    This file provides implementation of the service
    critical section wrapper.

Author:

    Oded Sacher (OdedS)  Nov, 2000

Revision History:

--*/

#include "CritSec.h"


/***********************************
*                                  *
*  CFaxCriticalSection  Methodes   *
*                                  *
***********************************/

BOOL
CFaxCriticalSection::Initialize()
/*++

Routine name : CFaxCriticalSection::Initialize

Routine description:

    Initialize a critical section object

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:
    BOOL.

--*/
{
    Assert (FALSE == m_bInit);
    __try
    {
        InitializeCriticalSection (&m_CritSec);
    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        SetLastError(GetExceptionCode());
        return FALSE;
    }
    m_bInit = TRUE;
    return TRUE;
} // CFaxCriticalSection::Initialize

#if (_WIN32_WINNT >= 0x0403)
BOOL
CFaxCriticalSection::InitializeAndSpinCount(DWORD dwSpinCount)
/*++

Routine name : CFaxCriticalSection::InitializeAndSpinCount

Routine description:

    Initialize a critical section object with spin count

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:
    BOOL

--*/
{
    Assert (FALSE == m_bInit);

    if (!InitializeCriticalSectionAndSpinCount (&m_CritSec, dwSpinCount))
    {
        return FALSE;
    }
    m_bInit = TRUE;
    return TRUE;
} // CFaxCriticalSection::InitializeAndSpinCount
#endif

VOID
CFaxCriticalSection::SafeDelete()
/*++

Routine name : CFaxCriticalSection::SafeDelete

Routine description:

    Deletes a critical section object if it is initialized

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:


--*/
{
    if (TRUE == m_bInit)
    {
        DeleteCriticalSection(&m_CritSec);
        m_bInit = FALSE;
    }
    return;
} // CFaxCriticalSection::SafeDelete
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\printscan\faxsrv\src\tiff\src\tifftables.inc ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

	tifftables.inc

Abstract:

	Global read-only lookup tables used by the tiff library

Author:

	Eran Yariv (EranY)	Aug, 2000

Revision History:

--*/

#ifndef _TIFF_TABLES_INC_
#define _TIFF_TABLES_INC_

//
// Share the following Tables amongst all the processes that use FxsTiff.DLL (as read only)
// Since this 'Shared' data is weighing over 320Kb, we don't want every app that prints
// to get the impact of it.
// By specifying the global variables as CONST, the compiler marks them as read-only
// and the linker merges the data segment (.LOOKUP_TABLES) with the code segment (.text).
// Hence, the tables are shared amongst all processes.
//
#pragma data_seg(".LOOKUP_TABLES")

CONST BYTE gc_GlobTableWhite[32768][5] = 
{
    {0xb3, 0x00, 0x00, 0x00, 0x00},
    {0x03, 0xf3, 0x00, 0x00, 0x04},
    {0x0b, 0xf3, 0x00, 0x40, 0x05},
    {0x05, 0xf3, 0x00, 0x00, 0x04},
    {0x0c, 0xf3, 0x40, 0x00, 0x06},
    {0x09, 0xf3, 0x00, 0x40, 0x05},
    {0x9a, 0xb3, 0x00, 0x00, 0x06},
    {0x06, 0xf3, 0x00, 0x00, 0x04},
    {0x14, 0xf3, 0x40, 0x40, 0x07},
    {0x82, 0xb3, 0x00, 0x00, 0x05},
    {0x18, 0xf3, 0x40, 0x40, 0x07},
    {0x0e, 0xf3, 0x40, 0x00, 0x06},
    {0x1c, 0xf3, 0x40, 0x40, 0x07},
    {0x04, 0xf3, 0x00, 0x00, 0x04},
    {0x02, 0xf3, 0x00, 0x00, 0x04},
    {0x07, 0xf3, 0x00, 0x00, 0x04},
    {0x17, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb3, 0x00, 0x66},
    {0x1b, 0xf3, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb3, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf3, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb3, 0x00, 0x66},
    {0x13, 0xf3, 0x40, 0x40, 0x07},
    {0x08, 0xf3, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb3, 0x00, 0x00, 0x05},
    {0x0a, 0xf3, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb3, 0x00, 0x66},
    {0x02, 0x43, 0xb3, 0x00, 0x66},
    {0x07, 0x43, 0xb3, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0xb3, 0x00, 0x77},
    {0x0b, 0x43, 0xb3, 0x40, 0x77},
    {0x05, 0x41, 0xb3, 0x00, 0x77},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0xb3, 0x40, 0x77},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0xb3, 0x00, 0x77},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf3, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0xb3, 0x00, 0x77},
    {0x02, 0x41, 0xb3, 0x00, 0x77},
    {0x07, 0x41, 0xb3, 0x00, 0x77},
    {0x0d, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb3, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb3, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf3, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb3, 0x00, 0x66},
    {0x01, 0xf3, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0xb3, 0x40, 0x77},
    {0x83, 0xb3, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0xb3, 0x40, 0x77},
    {0x04, 0x42, 0xb3, 0x00, 0x66},
    {0x02, 0x42, 0xb3, 0x00, 0x66},
    {0x07, 0x42, 0xb3, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0xb3, 0x00, 0x77},
    {0x0b, 0x42, 0xb3, 0x40, 0x77},
    {0x05, 0x44, 0xb3, 0x00, 0x77},
    {0x1a, 0xf3, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0xb3, 0x40, 0x77},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb3, 0x00, 0x77},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf3, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0xb3, 0x00, 0x77},
    {0x02, 0x44, 0xb3, 0x00, 0x77},
    {0x07, 0x44, 0xb3, 0x00, 0x77},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf3, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf3, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0xb3, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0xb3, 0x40, 0x77},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0xb3, 0x40, 0x77},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0xf5, 0x40, 0x0b},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0xf5, 0x40, 0x0b},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0xb5, 0x6b},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0xb5, 0x6b},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0xb5, 0x6b},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0xf5, 0x40, 0x0b},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0xb5, 0x6b},
    {0x02, 0x43, 0x0b, 0xb5, 0x6b},
    {0x07, 0x43, 0x0b, 0xb5, 0x6b},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0xb5, 0x7b},
    {0x0b, 0x43, 0x03, 0xf5, 0x7b},
    {0x05, 0x41, 0x03, 0xb5, 0x7b},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0xf5, 0x7b},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0xb5, 0x7b},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0xb5, 0x7b},
    {0x02, 0x41, 0x03, 0xb5, 0x7b},
    {0x07, 0x41, 0x03, 0xb5, 0x7b},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0xb5, 0x6b},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0xb5, 0x6b},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0xb5, 0x6b},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0xf5, 0x7b},
    {0xc3, 0x0b, 0xf5, 0x40, 0x0b},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x0b, 0xb5, 0x6b},
    {0x02, 0x42, 0x0b, 0xb5, 0x6b},
    {0x07, 0x42, 0x0b, 0xb5, 0x6b},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0xb5, 0x7b},
    {0x0b, 0x42, 0x03, 0xf5, 0x7b},
    {0x05, 0x44, 0x03, 0xb5, 0x7b},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0xf5, 0x7b},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0xb5, 0x7b},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0xb5, 0x7b},
    {0x02, 0x44, 0x03, 0xb5, 0x7b},
    {0x07, 0x44, 0x03, 0xb5, 0x7b},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0xf5, 0x7b},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0xb5, 0x00, 0x0c},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0xb5, 0x00, 0x0c},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0xb5, 0x6c},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0xb5, 0x6c},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0c, 0xb5, 0x6c},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0xb5, 0x00, 0x0c},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0xb5, 0x6c},
    {0x02, 0x43, 0x0c, 0xb5, 0x6c},
    {0x07, 0x43, 0x0c, 0xb5, 0x6c},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0b, 0xf5, 0x7c},
    {0x05, 0x41, 0x0b, 0xb5, 0x7c},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc7, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0b, 0xb5, 0x7c},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0xb5, 0x7c},
    {0x02, 0x41, 0x0b, 0xb5, 0x7c},
    {0x07, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0xb5, 0x6c},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0xb5, 0x6c},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0xb5, 0x6c},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x4c, 0xb5, 0x00, 0x0c},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x0c, 0xb5, 0x6c},
    {0x02, 0x42, 0x0c, 0xb5, 0x6c},
    {0x07, 0x42, 0x0c, 0xb5, 0x6c},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0xb5, 0x8c},
    {0x0b, 0x41, 0x03, 0xf5, 0x8c},
    {0x05, 0x46, 0x03, 0xb5, 0x8c},
    {0x0c, 0x43, 0x43, 0xb5, 0x8c},
    {0x09, 0x41, 0x03, 0xf5, 0x8c},
    {0xda, 0x09, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x03, 0xb5, 0x8c},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0xb5, 0x8c},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0xb5, 0x8c},
    {0x02, 0x46, 0x03, 0xb5, 0x8c},
    {0x07, 0x46, 0x03, 0xb5, 0x8c},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0xb5, 0x6b},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0xb5, 0x6b},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0xb5, 0x6b},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0xf5, 0x8c},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x09, 0xb5, 0x6b},
    {0x02, 0x43, 0x09, 0xb5, 0x6b},
    {0x07, 0x43, 0x09, 0xb5, 0x6b},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0b, 0xf5, 0x7c},
    {0x05, 0x44, 0x0b, 0xb5, 0x7c},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0xf5, 0x7c},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0xb5, 0x7c},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0xb5, 0x8c},
    {0xc5, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0b, 0xb5, 0x7c},
    {0x02, 0x44, 0x0b, 0xb5, 0x7c},
    {0x07, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x43, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x09, 0xb5, 0x6b},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0xb5, 0x6b},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0xb5, 0x8c},
    {0xc4, 0x4b, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x09, 0xb5, 0x6b},
    {0x01, 0x43, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x09, 0xf5, 0x40, 0x0b},
    {0xc1, 0x0e, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x09, 0xb5, 0x6b},
    {0x02, 0x42, 0x09, 0xb5, 0x6b},
    {0x07, 0x42, 0x09, 0xb5, 0x6b},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0xb5, 0x00, 0x0c},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0xb5, 0x00, 0x0c},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0xb5, 0x7b},
    {0x0b, 0x43, 0x05, 0xf5, 0x7b},
    {0x05, 0x41, 0x05, 0xb5, 0x7b},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0xf5, 0x7b},
    {0xc8, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x05, 0xb5, 0x7b},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0xb5, 0x7b},
    {0x02, 0x41, 0x05, 0xb5, 0x7b},
    {0x07, 0x41, 0x05, 0xb5, 0x7b},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0xf5, 0x7b},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0xb5, 0x8c},
    {0x0b, 0x44, 0x03, 0xf5, 0x8c},
    {0x05, 0x45, 0x03, 0xb5, 0x8c},
    {0x0c, 0x42, 0x43, 0xb5, 0x8c},
    {0x09, 0x44, 0x03, 0xf5, 0x8c},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0xb5, 0x8c},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0xb5, 0x8c},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0xb5, 0x8c},
    {0x02, 0x45, 0x03, 0xb5, 0x8c},
    {0x07, 0x45, 0x03, 0xb5, 0x8c},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0xf5, 0x8c},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0xb5, 0x7b},
    {0x0b, 0x42, 0x05, 0xf5, 0x7b},
    {0x05, 0x44, 0x05, 0xb5, 0x7b},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0xf5, 0x7b},
    {0xca, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x05, 0xb5, 0x7b},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0xb5, 0x8c},
    {0xc6, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x05, 0xb5, 0x7b},
    {0x02, 0x44, 0x05, 0xb5, 0x7b},
    {0x07, 0x44, 0x05, 0xb5, 0x7b},
    {0x0d, 0x42, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0xb5, 0x8c},
    {0xc4, 0x05, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x05, 0xf5, 0x7b},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0xb5, 0x40, 0x0d},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0xb5, 0x00, 0x0c},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0xb5, 0x6d},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0xb5, 0x6d},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x14, 0xb5, 0x6d},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0xb5, 0x00, 0x0c},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0xb5, 0x6d},
    {0x02, 0x43, 0x14, 0xb5, 0x6d},
    {0x07, 0x43, 0x14, 0xb5, 0x6d},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0c, 0xf5, 0x7d},
    {0x05, 0x41, 0x0c, 0xb5, 0x7d},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc7, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0c, 0xb5, 0x7d},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0xb5, 0x7d},
    {0x02, 0x41, 0x0c, 0xb5, 0x7d},
    {0x07, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0xb5, 0x6d},
    {0xd7, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x14, 0xb5, 0x6d},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x14, 0xb5, 0x6d},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc3, 0x54, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x14, 0xb5, 0x6d},
    {0x02, 0x42, 0x14, 0xb5, 0x6d},
    {0x07, 0x42, 0x14, 0xb5, 0x6d},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0b, 0xf5, 0x8d},
    {0x05, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4b, 0xb5, 0x8d},
    {0x09, 0x41, 0x0b, 0xf5, 0x8d},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0xb5, 0x8d},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0xb5, 0x00, 0x0c},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0xb5, 0x8d},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0xb5, 0x8d},
    {0x02, 0x46, 0x0b, 0xb5, 0x8d},
    {0x07, 0x46, 0x0b, 0xb5, 0x8d},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0xb5, 0x8d},
    {0xcf, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0xf5, 0x8d},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0c, 0xf5, 0x7d},
    {0x05, 0x44, 0x0c, 0xb5, 0x7d},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0xf5, 0x7d},
    {0xcb, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0c, 0xb5, 0x7d},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc5, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0c, 0xb5, 0x7d},
    {0x02, 0x44, 0x0c, 0xb5, 0x7d},
    {0x07, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x4c, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x0c, 0xf5, 0x7d},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0xb5, 0x9d},
    {0x09, 0x46, 0x03, 0xf5, 0x9d},
    {0xda, 0x58, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0xf5, 0x9d},
    {0xc2, 0x67, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x43, 0xf5, 0x9d},
    {0x0e, 0x41, 0x43, 0xb5, 0x9d},
    {0x1c, 0x43, 0x43, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x18, 0xb5, 0x6d},
    {0x1b, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x18, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0xb5, 0x9d},
    {0xcd, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x18, 0xb5, 0x6d},
    {0x13, 0x43, 0x43, 0xf5, 0x9d},
    {0x08, 0x46, 0x03, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x18, 0xb5, 0x6d},
    {0x02, 0x43, 0x18, 0xb5, 0x6d},
    {0x07, 0x43, 0x18, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0xb5, 0x7c},
    {0x0b, 0x43, 0x09, 0xf5, 0x7c},
    {0x05, 0x41, 0x09, 0xb5, 0x7c},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0xf5, 0x7c},
    {0xc8, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x09, 0xb5, 0x7c},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0xf5, 0x40, 0x0b},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0xb5, 0x7c},
    {0x02, 0x41, 0x09, 0xb5, 0x7c},
    {0x07, 0x41, 0x09, 0xb5, 0x7c},
    {0x0d, 0x41, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x18, 0xb5, 0x6d},
    {0xd9, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x18, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0xb5, 0x9d},
    {0xd5, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x18, 0xb5, 0x6d},
    {0x01, 0x41, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x09, 0xf5, 0x7c},
    {0xc3, 0x58, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x18, 0xb5, 0x6d},
    {0x02, 0x42, 0x18, 0xb5, 0x6d},
    {0x07, 0x42, 0x18, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0b, 0xf5, 0x8d},
    {0x05, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4b, 0xb5, 0x8d},
    {0x09, 0x44, 0x0b, 0xf5, 0x8d},
    {0xda, 0x4e, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x0b, 0xb5, 0x8d},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0xb5, 0x8d},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0xb5, 0x8d},
    {0x02, 0x45, 0x0b, 0xb5, 0x8d},
    {0x07, 0x45, 0x0b, 0xb5, 0x8d},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0xb5, 0x8d},
    {0xd1, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0e, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0xf5, 0x8d},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x0e, 0xb5, 0x6c},
    {0x02, 0x43, 0x0e, 0xb5, 0x6c},
    {0x07, 0x43, 0x0e, 0xb5, 0x6c},
    {0x16, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x09, 0xb5, 0x7c},
    {0x0b, 0x42, 0x09, 0xf5, 0x7c},
    {0x05, 0x44, 0x09, 0xb5, 0x7c},
    {0x1a, 0x43, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x09, 0xf5, 0x7c},
    {0xca, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x09, 0xb5, 0x7c},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc6, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x09, 0xb5, 0x7c},
    {0x02, 0x44, 0x09, 0xb5, 0x7c},
    {0x07, 0x44, 0x09, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x0e, 0xb5, 0x6c},
    {0x12, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x0e, 0xb5, 0x6c},
    {0x15, 0x43, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x49, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x0e, 0xb5, 0x6c},
    {0x01, 0x42, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x09, 0xf5, 0x7c},
    {0xc3, 0x4e, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x0e, 0xb5, 0x6c},
    {0x02, 0x42, 0x0e, 0xb5, 0x6c},
    {0x07, 0x42, 0x0e, 0xb5, 0x6c},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0xb5, 0x40, 0x0d},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0xb5, 0x00, 0x0c},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0xb5, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0xb5, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x1c, 0xb5, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0xb5, 0x00, 0x0c},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0xb5, 0x6d},
    {0x02, 0x43, 0x1c, 0xb5, 0x6d},
    {0x07, 0x43, 0x1c, 0xb5, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0xb5, 0x6d},
    {0xd8, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x1c, 0xb5, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x1c, 0xb5, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0xb5, 0x40, 0x0d},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0xb5, 0x6d},
    {0x02, 0x42, 0x1c, 0xb5, 0x6d},
    {0x07, 0x42, 0x1c, 0xb5, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0xb5, 0x8c},
    {0x0b, 0x41, 0x05, 0xf5, 0x8c},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x0c, 0x43, 0x45, 0xb5, 0x8c},
    {0x09, 0x41, 0x05, 0xf5, 0x8c},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0xb5, 0x8c},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0xb5, 0x8c},
    {0x02, 0x46, 0x05, 0xb5, 0x8c},
    {0x07, 0x46, 0x05, 0xb5, 0x8c},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0xb5, 0x8c},
    {0xd0, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0xf5, 0x8c},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0xb5, 0x8c},
    {0xc5, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0xb5, 0x8c},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0xb5, 0x9d},
    {0x0b, 0x45, 0x03, 0xf5, 0x9d},
    {0x05, 0x47, 0x03, 0xb5, 0x9d},
    {0x0c, 0x44, 0x43, 0xb5, 0x9d},
    {0x09, 0x45, 0x03, 0xf5, 0x9d},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0xb5, 0x9d},
    {0x14, 0x42, 0x43, 0xf5, 0x9d},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0xf5, 0x9d},
    {0x0e, 0x44, 0x43, 0xb5, 0x9d},
    {0x1c, 0x42, 0x43, 0xf5, 0x9d},
    {0x04, 0x47, 0x03, 0xb5, 0x9d},
    {0x02, 0x47, 0x03, 0xb5, 0x9d},
    {0x07, 0x47, 0x03, 0xb5, 0x9d},
    {0x17, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0xb5, 0x9d},
    {0xce, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0xf5, 0x9d},
    {0x08, 0x45, 0x03, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0xb5, 0x7b},
    {0x0b, 0x43, 0x06, 0xf5, 0x7b},
    {0x05, 0x41, 0x06, 0xb5, 0x7b},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0xf5, 0x7b},
    {0xc8, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x06, 0xb5, 0x7b},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0xb5, 0x7b},
    {0x02, 0x41, 0x06, 0xb5, 0x7b},
    {0x07, 0x41, 0x06, 0xb5, 0x7b},
    {0x0d, 0x44, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0xb5, 0x9d},
    {0xd6, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0xf5, 0x7b},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0xb5, 0x8c},
    {0x0b, 0x44, 0x05, 0xf5, 0x8c},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x0c, 0x42, 0x45, 0xb5, 0x8c},
    {0x09, 0x44, 0x05, 0xf5, 0x8c},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0xb5, 0x8c},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0xb5, 0x8c},
    {0x02, 0x45, 0x05, 0xb5, 0x8c},
    {0x07, 0x45, 0x05, 0xb5, 0x8c},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0xb5, 0x8c},
    {0xd2, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0xf5, 0x8c},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0xb5, 0x7b},
    {0x0b, 0x42, 0x06, 0xf5, 0x7b},
    {0x05, 0x44, 0x06, 0xb5, 0x7b},
    {0x1a, 0x42, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0xf5, 0x7b},
    {0xca, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x06, 0xb5, 0x7b},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x45, 0xb5, 0x8c},
    {0xc6, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x06, 0xb5, 0x7b},
    {0x02, 0x44, 0x06, 0xb5, 0x7b},
    {0x07, 0x44, 0x06, 0xb5, 0x7b},
    {0x0d, 0x42, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x45, 0xb5, 0x8c},
    {0xc4, 0x06, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x06, 0xf5, 0x7b},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x52, 0xb5, 0x00, 0xee},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0x52, 0xb5, 0x00, 0xee},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0xb5, 0x40, 0x0d},
    {0x06, 0x52, 0xb5, 0x00, 0xee},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0xb5, 0x40, 0x0d},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0x52, 0xb5, 0x00, 0xee},
    {0x02, 0x52, 0xb5, 0x00, 0xee},
    {0x07, 0x52, 0xb5, 0x00, 0xee},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0xb5, 0x6d},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0xb5, 0x6d},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x17, 0xb5, 0x6d},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0xb5, 0x6d},
    {0x02, 0x43, 0x17, 0xb5, 0x6d},
    {0x07, 0x43, 0x17, 0xb5, 0x6d},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x14, 0xb5, 0x7e},
    {0x0b, 0x43, 0x14, 0xf5, 0x7e},
    {0x05, 0x41, 0x14, 0xb5, 0x7e},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x14, 0xf5, 0x7e},
    {0xc7, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x14, 0xb5, 0x7e},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x14, 0xb5, 0x7e},
    {0x02, 0x41, 0x14, 0xb5, 0x7e},
    {0x07, 0x41, 0x14, 0xb5, 0x7e},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0xb5, 0x6d},
    {0xd7, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x17, 0xb5, 0x6d},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0xd3, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x17, 0xb5, 0x6d},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x14, 0xf5, 0x7e},
    {0xc3, 0x57, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x17, 0xb5, 0x6d},
    {0x02, 0x42, 0x17, 0xb5, 0x6d},
    {0x07, 0x42, 0x17, 0xb5, 0x6d},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0c, 0xf5, 0x8e},
    {0x05, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4c, 0xb5, 0x8e},
    {0x09, 0x41, 0x0c, 0xf5, 0x8e},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x0c, 0xb5, 0x8e},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4c, 0xb5, 0x8e},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0c, 0xb5, 0x8e},
    {0x02, 0x46, 0x0c, 0xb5, 0x8e},
    {0x07, 0x46, 0x0c, 0xb5, 0x8e},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4c, 0xb5, 0x8e},
    {0xcf, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0c, 0xf5, 0x8e},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x14, 0xb5, 0x7e},
    {0x0b, 0x42, 0x14, 0xf5, 0x7e},
    {0x05, 0x44, 0x14, 0xb5, 0x7e},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x14, 0xf5, 0x7e},
    {0xcb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x14, 0xb5, 0x7e},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc5, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x14, 0xb5, 0x7e},
    {0x02, 0x44, 0x14, 0xb5, 0x7e},
    {0x07, 0x44, 0x14, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc4, 0x54, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x14, 0xf5, 0x7e},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x0b, 0xf5, 0x9e},
    {0x05, 0x49, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x4b, 0xb5, 0x9e},
    {0x09, 0x46, 0x0b, 0xf5, 0x9e},
    {0xda, 0x5b, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x75, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4b, 0xf5, 0x9e},
    {0x04, 0x49, 0x03, 0xb5, 0xae},
    {0x02, 0x49, 0x03, 0xb5, 0xae},
    {0x07, 0x49, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x1b, 0xb5, 0x6d},
    {0x1b, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x1b, 0xb5, 0x6d},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x4b, 0xb5, 0x9e},
    {0xcd, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1b, 0xb5, 0x6d},
    {0x13, 0x43, 0x4b, 0xf5, 0x9e},
    {0x08, 0x46, 0x0b, 0xf5, 0x9e},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x1b, 0xb5, 0x6d},
    {0x02, 0x43, 0x1b, 0xb5, 0x6d},
    {0x07, 0x43, 0x1b, 0xb5, 0x6d},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x4b, 0xb5, 0x9e},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x1b, 0xb5, 0x6d},
    {0xd9, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1b, 0xb5, 0x6d},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x4b, 0xb5, 0x9e},
    {0xd5, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1b, 0xb5, 0x6d},
    {0x01, 0x41, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0xb5, 0x6d},
    {0x02, 0x42, 0x1b, 0xb5, 0x6d},
    {0x07, 0x42, 0x1b, 0xb5, 0x6d},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0c, 0xf5, 0x8e},
    {0x05, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4c, 0xb5, 0x8e},
    {0x09, 0x44, 0x0c, 0xf5, 0x8e},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x0c, 0xb5, 0x8e},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4c, 0xb5, 0x8e},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0c, 0xb5, 0x8e},
    {0x02, 0x45, 0x0c, 0xb5, 0x8e},
    {0x07, 0x45, 0x0c, 0xb5, 0x8e},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4c, 0xb5, 0x8e},
    {0xd1, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0c, 0xf5, 0x8e},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4c, 0xb5, 0x8e},
    {0xc6, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x4c, 0xb5, 0x8e},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x43, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x67, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x43, 0xf5, 0xae},
    {0xc2, 0x63, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x43, 0xf5, 0xae},
    {0x0e, 0x46, 0x43, 0xb5, 0xae},
    {0x1c, 0x41, 0x43, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x27, 0xb5, 0x6e},
    {0x1b, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x27, 0xb5, 0x6e},
    {0x67, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x46, 0x43, 0xb5, 0xae},
    {0xc9, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x27, 0xb5, 0x6e},
    {0x13, 0x41, 0x43, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x63, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x27, 0xb5, 0x6e},
    {0x02, 0x43, 0x27, 0xb5, 0x6e},
    {0x07, 0x43, 0x27, 0xb5, 0x6e},
    {0x6d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x18, 0xb5, 0x7e},
    {0x0b, 0x43, 0x18, 0xf5, 0x7e},
    {0x05, 0x41, 0x18, 0xb5, 0x7e},
    {0x75, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x18, 0xf5, 0x7e},
    {0xc7, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x18, 0xb5, 0x7e},
    {0x63, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0xc2, 0x43, 0xb5, 0x0e},
    {0x73, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x46, 0x43, 0xb5, 0xae},
    {0x7f, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x18, 0xb5, 0x7e},
    {0x02, 0x41, 0x18, 0xb5, 0x7e},
    {0x07, 0x41, 0x18, 0xb5, 0x7e},
    {0x0d, 0x46, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x27, 0xb5, 0x6e},
    {0xd8, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x27, 0xb5, 0x6e},
    {0x6b, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x46, 0x43, 0xb5, 0xae},
    {0xd4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x27, 0xb5, 0x6e},
    {0x01, 0x46, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x18, 0xf5, 0x7e},
    {0xc3, 0x67, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x43, 0xb5, 0x0e},
    {0x0a, 0x43, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x27, 0xb5, 0x6e},
    {0x02, 0x42, 0x27, 0xb5, 0x6e},
    {0x07, 0x42, 0x27, 0xb5, 0x6e},
    {0x5d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x09, 0xb5, 0x8d},
    {0x0b, 0x41, 0x09, 0xf5, 0x8d},
    {0x05, 0x46, 0x09, 0xb5, 0x8d},
    {0x0c, 0x43, 0x49, 0xb5, 0x8d},
    {0x09, 0x41, 0x09, 0xf5, 0x8d},
    {0xda, 0x50, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x09, 0xb5, 0x8d},
    {0x61, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x73, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x49, 0xb5, 0x8d},
    {0x7d, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x09, 0xb5, 0x8d},
    {0x02, 0x46, 0x09, 0xb5, 0x8d},
    {0x07, 0x46, 0x09, 0xb5, 0x8d},
    {0x6f, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0xb5, 0x6c},
    {0x7b, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0xb5, 0x6c},
    {0x69, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x49, 0xb5, 0x8d},
    {0xd0, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x10, 0xb5, 0x6c},
    {0x5f, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x09, 0xf5, 0x8d},
    {0x79, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x73, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x10, 0xb5, 0x6c},
    {0x02, 0x43, 0x10, 0xb5, 0x6c},
    {0x07, 0x43, 0x10, 0xb5, 0x6c},
    {0x16, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x18, 0xb5, 0x7e},
    {0x0b, 0x42, 0x18, 0xf5, 0x7e},
    {0x05, 0x44, 0x18, 0xb5, 0x7e},
    {0x1a, 0x41, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x18, 0xf5, 0x7e},
    {0xcc, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x18, 0xb5, 0x7e},
    {0x65, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x0f, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x49, 0xb5, 0x8d},
    {0xc5, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x18, 0xb5, 0x7e},
    {0x02, 0x44, 0x18, 0xb5, 0x7e},
    {0x07, 0x44, 0x18, 0xb5, 0x7e},
    {0x0d, 0x43, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x10, 0xb5, 0x6c},
    {0x12, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0xb5, 0x6c},
    {0x15, 0x41, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x49, 0xb5, 0x8d},
    {0xc4, 0x58, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0xb5, 0x6c},
    {0x01, 0x43, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x18, 0xf5, 0x7e},
    {0xc3, 0x50, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0xb5, 0x6c},
    {0x02, 0x42, 0x10, 0xb5, 0x6c},
    {0x07, 0x42, 0x10, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0b, 0xf5, 0x9e},
    {0x05, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4b, 0xb5, 0x9e},
    {0x09, 0x45, 0x0b, 0xf5, 0x9e},
    {0x9a, 0x89, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0b, 0xb5, 0x9e},
    {0x14, 0x42, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x7f, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4b, 0xf5, 0x9e},
    {0x04, 0x47, 0x0b, 0xb5, 0x9e},
    {0x02, 0x47, 0x0b, 0xb5, 0x9e},
    {0x07, 0x47, 0x0b, 0xb5, 0x9e},
    {0x17, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x89, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x89, 0xb5, 0x6e},
    {0x68, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x4b, 0xb5, 0x9e},
    {0xce, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x89, 0xb5, 0x6e},
    {0x13, 0x42, 0x4b, 0xf5, 0x9e},
    {0x08, 0x45, 0x0b, 0xf5, 0x9e},
    {0x78, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x7f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x89, 0xb5, 0x6e},
    {0x02, 0x43, 0x89, 0xb5, 0x6e},
    {0x07, 0x43, 0x89, 0xb5, 0x6e},
    {0x6e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0e, 0xf5, 0x7d},
    {0x05, 0x41, 0x0e, 0xb5, 0x7d},
    {0x76, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x0e, 0xf5, 0x7d},
    {0xc8, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0e, 0xb5, 0x7d},
    {0x64, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x4b, 0xb5, 0x9e},
    {0x40, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x0e, 0xb5, 0x7d},
    {0x02, 0x41, 0x0e, 0xb5, 0x7d},
    {0x07, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x44, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x89, 0xb5, 0x6e},
    {0xdb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x89, 0xb5, 0x6e},
    {0x6c, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x4b, 0xb5, 0x9e},
    {0xd6, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x89, 0xb5, 0x6e},
    {0x01, 0x44, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x0e, 0xf5, 0x7d},
    {0x83, 0x89, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x89, 0xb5, 0x6e},
    {0x02, 0x42, 0x89, 0xb5, 0x6e},
    {0x07, 0x42, 0x89, 0xb5, 0x6e},
    {0x5e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x09, 0xb5, 0x8d},
    {0x0b, 0x44, 0x09, 0xf5, 0x8d},
    {0x05, 0x45, 0x09, 0xb5, 0x8d},
    {0x0c, 0x42, 0x49, 0xb5, 0x8d},
    {0x09, 0x44, 0x09, 0xf5, 0x8d},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0xb5, 0x8d},
    {0x62, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x49, 0xb5, 0x8d},
    {0x7e, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x09, 0xb5, 0x8d},
    {0x02, 0x45, 0x09, 0xb5, 0x8d},
    {0x07, 0x45, 0x09, 0xb5, 0x8d},
    {0x70, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x49, 0xb5, 0x8d},
    {0xd2, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x09, 0xf5, 0x8d},
    {0x7a, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0e, 0xf5, 0x7d},
    {0x05, 0x44, 0x0e, 0xb5, 0x7d},
    {0x1a, 0x42, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x0e, 0xf5, 0x7d},
    {0xca, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0e, 0xb5, 0x7d},
    {0x66, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x49, 0xb5, 0x8d},
    {0xc6, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0e, 0xb5, 0x7d},
    {0x02, 0x44, 0x0e, 0xb5, 0x7d},
    {0x07, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x42, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x49, 0xb5, 0x8d},
    {0xc4, 0x4e, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x0e, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x51, 0xb5, 0x00, 0xee},
    {0x0b, 0x4f, 0xb5, 0x40, 0xee},
    {0x05, 0x51, 0xb5, 0x00, 0xee},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4f, 0xb5, 0x40, 0xee},
    {0xda, 0x53, 0xb5, 0x40, 0x0d},
    {0x06, 0x51, 0xb5, 0x00, 0xee},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0xf5, 0x40, 0x0b},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x51, 0xb5, 0x00, 0xee},
    {0x02, 0x51, 0xb5, 0x00, 0xee},
    {0x07, 0x51, 0xb5, 0x00, 0xee},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0xb5, 0x6d},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0xb5, 0x6d},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x13, 0xb5, 0x6d},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4f, 0xb5, 0x40, 0xee},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0xf5, 0x40, 0x0b},
    {0x0a, 0x4f, 0xb5, 0x40, 0xee},
    {0x04, 0x43, 0x13, 0xb5, 0x6d},
    {0x02, 0x43, 0x13, 0xb5, 0x6d},
    {0x07, 0x43, 0x13, 0xb5, 0x6d},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1c, 0xf5, 0x7e},
    {0x05, 0x41, 0x1c, 0xb5, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1c, 0xf5, 0x7e},
    {0x87, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x1c, 0xb5, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1c, 0xb5, 0x7e},
    {0x02, 0x41, 0x1c, 0xb5, 0x7e},
    {0x07, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0xb5, 0x6d},
    {0xd7, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x13, 0xb5, 0x6d},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x13, 0xb5, 0x6d},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x53, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x13, 0xb5, 0x6d},
    {0x02, 0x42, 0x13, 0xb5, 0x6d},
    {0x07, 0x42, 0x13, 0xb5, 0x6d},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x41, 0x9a, 0xf5, 0x8e},
    {0x05, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x43, 0xda, 0xb5, 0x8e},
    {0x09, 0x41, 0x9a, 0xf5, 0x8e},
    {0xda, 0x08, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x9a, 0xb5, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x97, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xda, 0xb5, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x9a, 0xb5, 0x8e},
    {0x02, 0x46, 0x9a, 0xb5, 0x8e},
    {0x07, 0x46, 0x9a, 0xb5, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0xb5, 0x6b},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0xb5, 0x6b},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xda, 0xb5, 0x8e},
    {0xcf, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0xb5, 0x6b},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x9a, 0xf5, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x97, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x08, 0xb5, 0x6b},
    {0x02, 0x43, 0x08, 0xb5, 0x6b},
    {0x07, 0x43, 0x08, 0xb5, 0x6b},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1c, 0xf5, 0x7e},
    {0x05, 0x44, 0x1c, 0xb5, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1c, 0xf5, 0x7e},
    {0xcb, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x1c, 0xb5, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xda, 0xb5, 0x8e},
    {0x85, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x1c, 0xb5, 0x7e},
    {0x02, 0x44, 0x1c, 0xb5, 0x7e},
    {0x07, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x43, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x08, 0xb5, 0x6b},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0xb5, 0x6b},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xda, 0xb5, 0x8e},
    {0xc4, 0x5c, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x08, 0xb5, 0x6b},
    {0x01, 0x43, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x08, 0xf5, 0x40, 0x0b},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x08, 0xb5, 0x6b},
    {0x02, 0x42, 0x08, 0xb5, 0x6b},
    {0x07, 0x42, 0x08, 0xb5, 0x6b},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x05, 0xf5, 0x9d},
    {0x05, 0x48, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x45, 0xb5, 0x9d},
    {0x09, 0x46, 0x05, 0xf5, 0x9d},
    {0xda, 0x77, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x45, 0xf5, 0x9d},
    {0xc2, 0x6b, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x45, 0xf5, 0x9d},
    {0x0e, 0x41, 0x45, 0xb5, 0x9d},
    {0x1c, 0x43, 0x45, 0xf5, 0x9d},
    {0x04, 0x48, 0x03, 0xb5, 0xae},
    {0x02, 0x48, 0x03, 0xb5, 0xae},
    {0x07, 0x48, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x37, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x37, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0xb5, 0x9d},
    {0xcd, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x37, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0xf5, 0x9d},
    {0x08, 0x46, 0x05, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x37, 0xb5, 0x6e},
    {0x02, 0x43, 0x37, 0xb5, 0x6e},
    {0x07, 0x43, 0x37, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0xb5, 0x7b},
    {0x0b, 0x43, 0x04, 0xf5, 0x7b},
    {0x05, 0x41, 0x04, 0xb5, 0x7b},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0xf5, 0x7b},
    {0x88, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x04, 0xb5, 0x7b},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0xf5, 0x40, 0x0b},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0xb5, 0x7b},
    {0x02, 0x41, 0x04, 0xb5, 0x7b},
    {0x07, 0x41, 0x04, 0xb5, 0x7b},
    {0x0d, 0x41, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x37, 0xb5, 0x6e},
    {0xd9, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x37, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0xb5, 0x9d},
    {0xd5, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x37, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0xf5, 0x7b},
    {0xc3, 0x77, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x37, 0xb5, 0x6e},
    {0x02, 0x42, 0x37, 0xb5, 0x6e},
    {0x07, 0x42, 0x37, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x44, 0x9a, 0xf5, 0x8e},
    {0x05, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x42, 0xda, 0xb5, 0x8e},
    {0x09, 0x44, 0x9a, 0xf5, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x9a, 0xb5, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x93, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xda, 0xb5, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x9a, 0xb5, 0x8e},
    {0x02, 0x45, 0x9a, 0xb5, 0x8e},
    {0x07, 0x45, 0x9a, 0xb5, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xda, 0xb5, 0x8e},
    {0xd1, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x9a, 0xf5, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x93, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0xb5, 0x7b},
    {0x0b, 0x42, 0x04, 0xf5, 0x7b},
    {0x05, 0x44, 0x04, 0xb5, 0x7b},
    {0x1a, 0x43, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0xf5, 0x7b},
    {0x8a, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x04, 0xb5, 0x7b},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0xda, 0xb5, 0x8e},
    {0x86, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x04, 0xb5, 0x7b},
    {0x02, 0x44, 0x04, 0xb5, 0x7b},
    {0x07, 0x44, 0x04, 0xb5, 0x7b},
    {0x0d, 0x42, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0xda, 0xb5, 0x8e},
    {0xc4, 0x04, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x04, 0xf5, 0x7b},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x03, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x43, 0xb5, 0xae},
    {0x09, 0x47, 0x03, 0xf5, 0xae},
    {0xda, 0x0a, 0xf5, 0x40, 0x0b},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x43, 0xf5, 0xae},
    {0xc2, 0x01, 0xf5, 0x40, 0x0b},
    {0x18, 0x44, 0x43, 0xf5, 0xae},
    {0x0e, 0x45, 0x43, 0xb5, 0xae},
    {0x1c, 0x44, 0x43, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0xb5, 0x6b},
    {0x1b, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0xb5, 0x6b},
    {0x67, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x45, 0x43, 0xb5, 0xae},
    {0xc9, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0xb5, 0x6b},
    {0x13, 0x44, 0x43, 0xf5, 0xae},
    {0x08, 0x47, 0x03, 0xf5, 0xae},
    {0x77, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x01, 0xf5, 0x40, 0x0b},
    {0x0a, 0x47, 0x03, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0xb5, 0x6b},
    {0x02, 0x43, 0x0a, 0xb5, 0x6b},
    {0x07, 0x43, 0x0a, 0xb5, 0x6b},
    {0x6d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0xb5, 0x7b},
    {0x0b, 0x43, 0x02, 0xf5, 0x7b},
    {0x05, 0x41, 0x02, 0xb5, 0x7b},
    {0x75, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0xf5, 0x7b},
    {0xc7, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0xb5, 0x7b},
    {0x63, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x45, 0x43, 0xb5, 0xae},
    {0x7f, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0xb5, 0x7b},
    {0x02, 0x41, 0x02, 0xb5, 0x7b},
    {0x07, 0x41, 0x02, 0xb5, 0x7b},
    {0x0d, 0x45, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0xb5, 0x6b},
    {0xd8, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0xb5, 0x6b},
    {0x6b, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x45, 0x43, 0xb5, 0xae},
    {0xd4, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0xb5, 0x6b},
    {0x01, 0x45, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0xf5, 0x7b},
    {0xc3, 0x0a, 0xf5, 0x40, 0x0b},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x0a, 0xb5, 0x6b},
    {0x02, 0x42, 0x0a, 0xb5, 0x6b},
    {0x07, 0x42, 0x0a, 0xb5, 0x6b},
    {0x5d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0xb5, 0x8c},
    {0x0b, 0x41, 0x06, 0xf5, 0x8c},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x0c, 0x43, 0x46, 0xb5, 0x8c},
    {0x09, 0x41, 0x06, 0xf5, 0x8c},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x61, 0x02, 0x03, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0xb5, 0x8c},
    {0x7d, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0xb5, 0x8c},
    {0x02, 0x46, 0x06, 0xb5, 0x8c},
    {0x07, 0x46, 0x06, 0xb5, 0x8c},
    {0x6f, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0xb5, 0x8c},
    {0xd0, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0xf5, 0x8c},
    {0x79, 0x02, 0x03, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0xb5, 0x7b},
    {0x0b, 0x42, 0x02, 0xf5, 0x7b},
    {0x05, 0x44, 0x02, 0xb5, 0x7b},
    {0x1a, 0x44, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0xf5, 0x7b},
    {0xcc, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0xb5, 0x7b},
    {0x65, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0xc1, 0x43, 0xb5, 0x0e},
    {0x19, 0x44, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0xb5, 0x8c},
    {0xc5, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0xb5, 0x7b},
    {0x02, 0x44, 0x02, 0xb5, 0x7b},
    {0x07, 0x44, 0x02, 0xb5, 0x7b},
    {0x0d, 0x43, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0xb5, 0x8c},
    {0xc4, 0x02, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0xf5, 0x7b},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x43, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0xb5, 0x9d},
    {0x0b, 0x45, 0x05, 0xf5, 0x9d},
    {0x05, 0x47, 0x05, 0xb5, 0x9d},
    {0x0c, 0x44, 0x45, 0xb5, 0x9d},
    {0x09, 0x45, 0x05, 0xf5, 0x9d},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0xb5, 0x9d},
    {0x14, 0x42, 0x45, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0xf5, 0x9d},
    {0x0e, 0x44, 0x45, 0xb5, 0x9d},
    {0x1c, 0x42, 0x45, 0xf5, 0x9d},
    {0x04, 0x47, 0x05, 0xb5, 0x9d},
    {0x02, 0x47, 0x05, 0xb5, 0x9d},
    {0x07, 0x47, 0x05, 0xb5, 0x9d},
    {0x17, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x45, 0xb5, 0x9d},
    {0xce, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0xf5, 0x9d},
    {0x08, 0x45, 0x05, 0xf5, 0x9d},
    {0x78, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0xb5, 0x7b},
    {0x0b, 0x43, 0x07, 0xf5, 0x7b},
    {0x05, 0x41, 0x07, 0xb5, 0x7b},
    {0x76, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0xf5, 0x7b},
    {0xc8, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0xb5, 0x7b},
    {0x64, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x45, 0xb5, 0x9d},
    {0x40, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0xb5, 0x7b},
    {0x02, 0x41, 0x07, 0xb5, 0x7b},
    {0x07, 0x41, 0x07, 0xb5, 0x7b},
    {0x0d, 0x44, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x45, 0xb5, 0x9d},
    {0xd6, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0xf5, 0x7b},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0xb5, 0x8c},
    {0x0b, 0x44, 0x06, 0xf5, 0x8c},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x0c, 0x42, 0x46, 0xb5, 0x8c},
    {0x09, 0x44, 0x06, 0xf5, 0x8c},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x62, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0xb5, 0x8c},
    {0x7e, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0xb5, 0x8c},
    {0x02, 0x45, 0x06, 0xb5, 0x8c},
    {0x07, 0x45, 0x06, 0xb5, 0x8c},
    {0x70, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0xb5, 0x8c},
    {0xd2, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0xf5, 0x8c},
    {0x7a, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0xb5, 0x7b},
    {0x0b, 0x42, 0x07, 0xf5, 0x7b},
    {0x05, 0x44, 0x07, 0xb5, 0x7b},
    {0x1a, 0x42, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0xf5, 0x7b},
    {0xca, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0xb5, 0x7b},
    {0x66, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0x46, 0xb5, 0x8c},
    {0xc6, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0xb5, 0x7b},
    {0x02, 0x44, 0x07, 0xb5, 0x7b},
    {0x07, 0x44, 0x07, 0xb5, 0x7b},
    {0x0d, 0x42, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0x46, 0xb5, 0x8c},
    {0xc4, 0x07, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0xf5, 0x7b},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xdc, 0xb5, 0x00, 0x0f},
    {0x0b, 0x52, 0xb5, 0x40, 0xff},
    {0x05, 0xdc, 0xb5, 0x00, 0x0f},
    {0x0c, 0x4d, 0xf5, 0x00, 0xee},
    {0x09, 0x52, 0xb5, 0x40, 0xff},
    {0xda, 0x6d, 0xf5, 0x00, 0x0e},
    {0x06, 0xdc, 0xb5, 0x00, 0x0f},
    {0x14, 0x4a, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0xb5, 0x40, 0x0d},
    {0x18, 0x4a, 0xf5, 0x40, 0xee},
    {0x0e, 0x4d, 0xf5, 0x00, 0xee},
    {0x1c, 0x4a, 0xf5, 0x40, 0xee},
    {0x04, 0xdc, 0xb5, 0x00, 0x0f},
    {0x02, 0xdc, 0xb5, 0x00, 0x0f},
    {0x07, 0xdc, 0xb5, 0x00, 0x0f},
    {0x17, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2d, 0xb5, 0x6e},
    {0x1b, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2d, 0xb5, 0x6e},
    {0x67, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x4d, 0xf5, 0x00, 0xee},
    {0xc9, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x2d, 0xb5, 0x6e},
    {0x13, 0x4a, 0xf5, 0x40, 0xee},
    {0x08, 0x52, 0xb5, 0x40, 0xff},
    {0x77, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x52, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x2d, 0xb5, 0x6e},
    {0x02, 0x43, 0x2d, 0xb5, 0x6e},
    {0x07, 0x43, 0x2d, 0xb5, 0x6e},
    {0x6d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x17, 0xb5, 0x7e},
    {0x0b, 0x43, 0x17, 0xf5, 0x7e},
    {0x05, 0x41, 0x17, 0xb5, 0x7e},
    {0x75, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x17, 0xf5, 0x7e},
    {0xc7, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x17, 0xb5, 0x7e},
    {0x63, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x4d, 0xf5, 0x00, 0xee},
    {0x7f, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x17, 0xb5, 0x7e},
    {0x02, 0x41, 0x17, 0xb5, 0x7e},
    {0x07, 0x41, 0x17, 0xb5, 0x7e},
    {0x0d, 0x4d, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x2d, 0xb5, 0x6e},
    {0xd7, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x2d, 0xb5, 0x6e},
    {0x6b, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x4d, 0xf5, 0x00, 0xee},
    {0xd3, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x2d, 0xb5, 0x6e},
    {0x01, 0x4d, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x17, 0xf5, 0x7e},
    {0xc3, 0x6d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x2d, 0xb5, 0x6e},
    {0x02, 0x42, 0x2d, 0xb5, 0x6e},
    {0x07, 0x42, 0x2d, 0xb5, 0x6e},
    {0x5d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0x14, 0xb5, 0x8f},
    {0x0b, 0x41, 0x14, 0xf5, 0x8f},
    {0x05, 0x46, 0x14, 0xb5, 0x8f},
    {0x0c, 0x43, 0x54, 0xb5, 0x8f},
    {0x09, 0x41, 0x14, 0xf5, 0x8f},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x14, 0xb5, 0x8f},
    {0x61, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0x54, 0xb5, 0x8f},
    {0x7d, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0x14, 0xb5, 0x8f},
    {0x02, 0x46, 0x14, 0xb5, 0x8f},
    {0x07, 0x46, 0x14, 0xb5, 0x8f},
    {0x6f, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0x54, 0xb5, 0x8f},
    {0xcf, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0x14, 0xf5, 0x8f},
    {0x79, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0x14, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x17, 0xb5, 0x7e},
    {0x0b, 0x42, 0x17, 0xf5, 0x7e},
    {0x05, 0x44, 0x17, 0xb5, 0x7e},
    {0x1a, 0x4a, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x17, 0xf5, 0x7e},
    {0xcb, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x17, 0xb5, 0x7e},
    {0x65, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4a, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x54, 0xb5, 0x8f},
    {0xc5, 0x54, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x17, 0xb5, 0x7e},
    {0x02, 0x44, 0x17, 0xb5, 0x7e},
    {0x07, 0x44, 0x17, 0xb5, 0x7e},
    {0x0d, 0x43, 0x54, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4a, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x54, 0xb5, 0x8f},
    {0xc4, 0x57, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0x54, 0xb5, 0x8f},
    {0x08, 0x42, 0x17, 0xf5, 0x7e},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0xdc, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x0b, 0xb5, 0xaf},
    {0x0b, 0x46, 0x0c, 0xf5, 0x9f},
    {0x05, 0x49, 0x0b, 0xb5, 0xaf},
    {0x0c, 0x41, 0x4c, 0xb5, 0x9f},
    {0x09, 0x46, 0x0c, 0xf5, 0x9f},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0x0b, 0xb5, 0xaf},
    {0x14, 0x43, 0x4c, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0x4c, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4c, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4c, 0xf5, 0x9f},
    {0x04, 0x49, 0x0b, 0xb5, 0xaf},
    {0x02, 0x49, 0x0b, 0xb5, 0xaf},
    {0x07, 0x49, 0x0b, 0xb5, 0xaf},
    {0x17, 0x43, 0x4c, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0x4c, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0x4c, 0xb5, 0x9f},
    {0xcd, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0x4c, 0xf5, 0x9f},
    {0x08, 0x46, 0x0c, 0xf5, 0x9f},
    {0x78, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0c, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0xc8, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0x4c, 0xb5, 0x9f},
    {0x40, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0x4c, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0xd9, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0x4c, 0xb5, 0x9f},
    {0xd5, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0x4c, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0x14, 0xb5, 0x8f},
    {0x0b, 0x44, 0x14, 0xf5, 0x8f},
    {0x05, 0x45, 0x14, 0xb5, 0x8f},
    {0x0c, 0x42, 0x54, 0xb5, 0x8f},
    {0x09, 0x44, 0x14, 0xf5, 0x8f},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x14, 0xb5, 0x8f},
    {0x62, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0xda, 0x43, 0xf5, 0x0f},
    {0x72, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0x54, 0xb5, 0x8f},
    {0x7e, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0x14, 0xb5, 0x8f},
    {0x02, 0x45, 0x14, 0xb5, 0x8f},
    {0x07, 0x45, 0x14, 0xb5, 0x8f},
    {0x70, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0x54, 0xb5, 0x8f},
    {0xd1, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0x14, 0xf5, 0x8f},
    {0x7a, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0xda, 0x43, 0xf5, 0x0f},
    {0x0a, 0x44, 0x14, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0x4c, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0x4c, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0xca, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0x4c, 0xf5, 0x9f},
    {0x0f, 0x42, 0x54, 0xb5, 0x8f},
    {0xc6, 0x54, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0x54, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0x4c, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0x4c, 0xf5, 0x9f},
    {0x11, 0x42, 0x54, 0xb5, 0x8f},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0x54, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xf4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0x03, 0xb5, 0xbf},
    {0x0b, 0x49, 0x03, 0xf5, 0xbf},
    {0x05, 0x4a, 0x03, 0xb5, 0xbf},
    {0x0c, 0x46, 0x4b, 0xb5, 0xaf},
    {0x09, 0x49, 0x03, 0xf5, 0xbf},
    {0xda, 0x75, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0x03, 0xb5, 0xbf},
    {0x14, 0x41, 0x4b, 0xf5, 0xaf},
    {0xc2, 0x61, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x4b, 0xf5, 0xaf},
    {0x0e, 0x46, 0x4b, 0xb5, 0xaf},
    {0x1c, 0x41, 0x4b, 0xf5, 0xaf},
    {0x04, 0x4a, 0x03, 0xb5, 0xbf},
    {0x02, 0x4a, 0x03, 0xb5, 0xbf},
    {0x07, 0x4a, 0x03, 0xb5, 0xbf},
    {0x17, 0x41, 0x4b, 0xf5, 0xaf},
    {0x03, 0x43, 0x35, 0xb5, 0x6e},
    {0x1b, 0x41, 0x4b, 0xf5, 0xaf},
    {0x05, 0x43, 0x35, 0xb5, 0x6e},
    {0x67, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x46, 0x4b, 0xb5, 0xaf},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x35, 0xb5, 0x6e},
    {0x13, 0x41, 0x4b, 0xf5, 0xaf},
    {0x08, 0x49, 0x03, 0xf5, 0xbf},
    {0x77, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x61, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0x03, 0xf5, 0xbf},
    {0x04, 0x43, 0x35, 0xb5, 0x6e},
    {0x02, 0x43, 0x35, 0xb5, 0x6e},
    {0x07, 0x43, 0x35, 0xb5, 0x6e},
    {0x6d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1b, 0xf5, 0x7e},
    {0x05, 0x41, 0x1b, 0xb5, 0x7e},
    {0x75, 0x03, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x1b, 0xf5, 0x7e},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x1b, 0xb5, 0x7e},
    {0x63, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x4b, 0xf5, 0x0f},
    {0x73, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x46, 0x4b, 0xb5, 0xaf},
    {0x7f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x1b, 0xb5, 0x7e},
    {0x02, 0x41, 0x1b, 0xb5, 0x7e},
    {0x07, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x46, 0x4b, 0xb5, 0xaf},
    {0x03, 0x42, 0x35, 0xb5, 0x6e},
    {0xd8, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x35, 0xb5, 0x6e},
    {0x6b, 0x03, 0x0b, 0xb5, 0xaf},
    {0x11, 0x46, 0x4b, 0xb5, 0xaf},
    {0xd4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x35, 0xb5, 0x6e},
    {0x01, 0x46, 0x4b, 0xb5, 0xaf},
    {0x08, 0x43, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x75, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x4b, 0xf5, 0x0f},
    {0x0a, 0x43, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x35, 0xb5, 0x6e},
    {0x02, 0x42, 0x35, 0xb5, 0x6e},
    {0x07, 0x42, 0x35, 0xb5, 0x6e},
    {0x5d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x71, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0xd0, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x71, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0x4b, 0xf5, 0xaf},
    {0x03, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1b, 0xf5, 0x7e},
    {0x05, 0x44, 0x1b, 0xb5, 0x7e},
    {0x1a, 0x41, 0x4b, 0xf5, 0xaf},
    {0x09, 0x42, 0x1b, 0xf5, 0x7e},
    {0xcc, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x1b, 0xb5, 0x7e},
    {0x65, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x4b, 0xf5, 0xaf},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x1b, 0xb5, 0x7e},
    {0x02, 0x44, 0x1b, 0xb5, 0x7e},
    {0x07, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0x4b, 0xf5, 0xaf},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0x4b, 0xf5, 0xaf},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x5b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0xdd, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0c, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0c, 0xf5, 0x9f},
    {0x05, 0x47, 0x0c, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4c, 0xb5, 0x9f},
    {0x09, 0x45, 0x0c, 0xf5, 0x9f},
    {0x9a, 0x87, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0c, 0xb5, 0x9f},
    {0x14, 0x42, 0x4c, 0xf5, 0x9f},
    {0xc2, 0x7d, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4c, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4c, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4c, 0xf5, 0x9f},
    {0x04, 0x47, 0x0c, 0xb5, 0x9f},
    {0x02, 0x47, 0x0c, 0xb5, 0x9f},
    {0x07, 0x47, 0x0c, 0xb5, 0x9f},
    {0x17, 0x42, 0x4c, 0xf5, 0x9f},
    {0x03, 0x43, 0x87, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4c, 0xf5, 0x9f},
    {0x05, 0x43, 0x87, 0xb5, 0x6e},
    {0x68, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x44, 0x4c, 0xb5, 0x9f},
    {0xce, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x87, 0xb5, 0x6e},
    {0x13, 0x42, 0x4c, 0xf5, 0x9f},
    {0x08, 0x45, 0x0c, 0xf5, 0x9f},
    {0x78, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x7d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0c, 0xf5, 0x9f},
    {0x04, 0x43, 0x87, 0xb5, 0x6e},
    {0x02, 0x43, 0x87, 0xb5, 0x6e},
    {0x07, 0x43, 0x87, 0xb5, 0x6e},
    {0x6e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x44, 0x4c, 0xb5, 0x9f},
    {0x40, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0x4c, 0xb5, 0x9f},
    {0x03, 0x42, 0x87, 0xb5, 0x6e},
    {0xdb, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x87, 0xb5, 0x6e},
    {0x6c, 0x03, 0x0b, 0xb5, 0xaf},
    {0x11, 0x44, 0x4c, 0xb5, 0x9f},
    {0xd6, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x87, 0xb5, 0x6e},
    {0x01, 0x44, 0x4c, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x87, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x87, 0xb5, 0x6e},
    {0x02, 0x42, 0x87, 0xb5, 0x6e},
    {0x07, 0x42, 0x87, 0xb5, 0x6e},
    {0x5e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0xd2, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0x0b, 0xb5, 0xaf},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0x4c, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0x4c, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0x4c, 0xf5, 0x9f},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0x4c, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0x4c, 0xf5, 0x9f},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xf4, 0x4b, 0xf5, 0x40, 0x0f},
    {0x03, 0x57, 0xb5, 0x00, 0xff},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x57, 0xb5, 0x00, 0xff},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x63, 0xf5, 0x00, 0x0e},
    {0x06, 0x57, 0xb5, 0x00, 0xff},
    {0x14, 0x46, 0x43, 0xf5, 0xbf},
    {0xc2, 0x6f, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0x43, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x43, 0xf5, 0xbf},
    {0x04, 0x57, 0xb5, 0x00, 0xff},
    {0x02, 0x57, 0xb5, 0x00, 0xff},
    {0x07, 0x57, 0xb5, 0x00, 0xff},
    {0x17, 0x46, 0x43, 0xf5, 0xbf},
    {0x03, 0x43, 0x23, 0xb5, 0x6e},
    {0x1b, 0x46, 0x43, 0xf5, 0xbf},
    {0x05, 0x43, 0x23, 0xb5, 0x6e},
    {0x67, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0xc9, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x23, 0xb5, 0x6e},
    {0x13, 0x46, 0x43, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x6f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x23, 0xb5, 0x6e},
    {0x02, 0x43, 0x23, 0xb5, 0x6e},
    {0x07, 0x43, 0x23, 0xb5, 0x6e},
    {0x6d, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x27, 0xb5, 0x7f},
    {0x0b, 0x43, 0x27, 0xf5, 0x7f},
    {0x05, 0x41, 0x27, 0xb5, 0x7f},
    {0x75, 0x01, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x27, 0xf5, 0x7f},
    {0xc7, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x27, 0xb5, 0x7f},
    {0x63, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x43, 0xbf},
    {0x73, 0x01, 0x03, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x27, 0xb5, 0x7f},
    {0x02, 0x41, 0x27, 0xb5, 0x7f},
    {0x07, 0x41, 0x27, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x23, 0xb5, 0x6e},
    {0xd7, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x23, 0xb5, 0x6e},
    {0x6b, 0x01, 0x03, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x23, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x27, 0xf5, 0x7f},
    {0xc3, 0x63, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x43, 0xbf},
    {0x0a, 0x43, 0x27, 0xf5, 0x7f},
    {0x04, 0x42, 0x23, 0xb5, 0x6e},
    {0x02, 0x42, 0x23, 0xb5, 0x6e},
    {0x07, 0x42, 0x23, 0xb5, 0x6e},
    {0x5d, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x46, 0x18, 0xb5, 0x8f},
    {0x0b, 0x41, 0x18, 0xf5, 0x8f},
    {0x05, 0x46, 0x18, 0xb5, 0x8f},
    {0x0c, 0x43, 0x58, 0xb5, 0x8f},
    {0x09, 0x41, 0x18, 0xf5, 0x8f},
    {0xda, 0xc2, 0x43, 0xf5, 0x0f},
    {0x06, 0x46, 0x18, 0xb5, 0x8f},
    {0x61, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x7b, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0x03, 0xb5, 0xbf},
    {0x0e, 0x43, 0x58, 0xb5, 0x8f},
    {0x7d, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x46, 0x18, 0xb5, 0x8f},
    {0x02, 0x46, 0x18, 0xb5, 0x8f},
    {0x07, 0x46, 0x18, 0xb5, 0x8f},
    {0x6f, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x03, 0x6f},
    {0x7b, 0x01, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x03, 0x6f},
    {0x69, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x43, 0x58, 0xb5, 0x8f},
    {0xcf, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0x03, 0x6f},
    {0x5f, 0x01, 0x03, 0xb5, 0xbf},
    {0x08, 0x41, 0x18, 0xf5, 0x8f},
    {0x79, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x7b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x18, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x03, 0x6f},
    {0x02, 0x43, 0x82, 0x03, 0x6f},
    {0x07, 0x43, 0x82, 0x03, 0x6f},
    {0x16, 0x46, 0x43, 0xf5, 0xbf},
    {0x03, 0x44, 0x27, 0xb5, 0x7f},
    {0x0b, 0x42, 0x27, 0xf5, 0x7f},
    {0x05, 0x44, 0x27, 0xb5, 0x7f},
    {0x1a, 0x46, 0x43, 0xf5, 0xbf},
    {0x09, 0x42, 0x27, 0xf5, 0x7f},
    {0xcb, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x27, 0xb5, 0x7f},
    {0x65, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x43, 0xbf},
    {0x19, 0x46, 0x43, 0xf5, 0xbf},
    {0x0f, 0x43, 0x58, 0xb5, 0x8f},
    {0xc5, 0x58, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x27, 0xb5, 0x7f},
    {0x02, 0x44, 0x27, 0xb5, 0x7f},
    {0x07, 0x44, 0x27, 0xb5, 0x7f},
    {0x0d, 0x43, 0x58, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x03, 0x6f},
    {0x12, 0x46, 0x43, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x03, 0x6f},
    {0x15, 0x46, 0x43, 0xf5, 0xbf},
    {0x11, 0x43, 0x58, 0xb5, 0x8f},
    {0xc4, 0x67, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x03, 0x6f},
    {0x01, 0x43, 0x58, 0xb5, 0x8f},
    {0x08, 0x42, 0x27, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x43, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x27, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x03, 0x6f},
    {0x02, 0x42, 0x82, 0x03, 0x6f},
    {0x07, 0x42, 0x82, 0x03, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x0b, 0xb5, 0xaf},
    {0x0b, 0x46, 0x09, 0xf5, 0x9e},
    {0x05, 0x48, 0x0b, 0xb5, 0xaf},
    {0x0c, 0x41, 0x49, 0xb5, 0x9e},
    {0x09, 0x46, 0x09, 0xf5, 0x9e},
    {0xda, 0x73, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x0b, 0xb5, 0xaf},
    {0x14, 0x43, 0x49, 0xf5, 0x9e},
    {0xc2, 0x69, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x49, 0xf5, 0x9e},
    {0x0e, 0x41, 0x49, 0xb5, 0x9e},
    {0x1c, 0x43, 0x49, 0xf5, 0x9e},
    {0x04, 0x48, 0x0b, 0xb5, 0xaf},
    {0x02, 0x48, 0x0b, 0xb5, 0xaf},
    {0x07, 0x48, 0x0b, 0xb5, 0xaf},
    {0x17, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x33, 0xb5, 0x6e},
    {0x1b, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x33, 0xb5, 0x6e},
    {0x68, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x41, 0x49, 0xb5, 0x9e},
    {0xcd, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x33, 0xb5, 0x6e},
    {0x13, 0x43, 0x49, 0xf5, 0x9e},
    {0x08, 0x46, 0x09, 0xf5, 0x9e},
    {0x78, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x69, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x33, 0xb5, 0x6e},
    {0x02, 0x43, 0x33, 0xb5, 0x6e},
    {0x07, 0x43, 0x33, 0xb5, 0x6e},
    {0x6e, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x10, 0xb5, 0x7d},
    {0x0b, 0x43, 0x10, 0xf5, 0x7d},
    {0x05, 0x41, 0x10, 0xb5, 0x7d},
    {0x76, 0x01, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x10, 0xf5, 0x7d},
    {0xc8, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x10, 0xb5, 0x7d},
    {0x64, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0x03, 0xb5, 0xbf},
    {0x0f, 0x41, 0x49, 0xb5, 0x9e},
    {0x40, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x10, 0xb5, 0x7d},
    {0x02, 0x41, 0x10, 0xb5, 0x7d},
    {0x07, 0x41, 0x10, 0xb5, 0x7d},
    {0x0d, 0x41, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x33, 0xb5, 0x6e},
    {0xd9, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x33, 0xb5, 0x6e},
    {0x6c, 0x01, 0x03, 0xb5, 0xbf},
    {0x11, 0x41, 0x49, 0xb5, 0x9e},
    {0xd5, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x33, 0xb5, 0x6e},
    {0x01, 0x41, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x10, 0xf5, 0x7d},
    {0xc3, 0x73, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x33, 0xb5, 0x6e},
    {0x02, 0x42, 0x33, 0xb5, 0x6e},
    {0x07, 0x42, 0x33, 0xb5, 0x6e},
    {0x5e, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x45, 0x18, 0xb5, 0x8f},
    {0x0b, 0x44, 0x18, 0xf5, 0x8f},
    {0x05, 0x45, 0x18, 0xb5, 0x8f},
    {0x0c, 0x42, 0x58, 0xb5, 0x8f},
    {0x09, 0x44, 0x18, 0xf5, 0x8f},
    {0xda, 0x4f, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x18, 0xb5, 0x8f},
    {0x62, 0x01, 0x03, 0xb5, 0xbf},
    {0x82, 0x8f, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x03, 0xb5, 0xbf},
    {0x0e, 0x42, 0x58, 0xb5, 0x8f},
    {0x7e, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x45, 0x18, 0xb5, 0x8f},
    {0x02, 0x45, 0x18, 0xb5, 0x8f},
    {0x07, 0x45, 0x18, 0xb5, 0x8f},
    {0x70, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0xb5, 0x6c},
    {0x7c, 0x01, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0xb5, 0x6c},
    {0x6a, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x42, 0x58, 0xb5, 0x8f},
    {0xd1, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0f, 0xb5, 0x6c},
    {0x60, 0x01, 0x03, 0xb5, 0xbf},
    {0x08, 0x44, 0x18, 0xf5, 0x8f},
    {0x7a, 0x01, 0x03, 0xb5, 0xbf},
    {0x81, 0x8f, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x18, 0xf5, 0x8f},
    {0x04, 0x43, 0x0f, 0xb5, 0x6c},
    {0x02, 0x43, 0x0f, 0xb5, 0x6c},
    {0x07, 0x43, 0x0f, 0xb5, 0x6c},
    {0x16, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x10, 0xb5, 0x7d},
    {0x0b, 0x42, 0x10, 0xf5, 0x7d},
    {0x05, 0x44, 0x10, 0xb5, 0x7d},
    {0x1a, 0x43, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x10, 0xf5, 0x7d},
    {0xca, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x10, 0xb5, 0x7d},
    {0x66, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x43, 0xbf},
    {0x19, 0x43, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x58, 0xb5, 0x8f},
    {0xc6, 0x58, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x10, 0xb5, 0x7d},
    {0x02, 0x44, 0x10, 0xb5, 0x7d},
    {0x07, 0x44, 0x10, 0xb5, 0x7d},
    {0x0d, 0x42, 0x58, 0xb5, 0x8f},
    {0x03, 0x42, 0x0f, 0xb5, 0x6c},
    {0x12, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x0f, 0xb5, 0x6c},
    {0x15, 0x43, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x58, 0xb5, 0x8f},
    {0xc4, 0x50, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0xb5, 0x6c},
    {0x01, 0x42, 0x58, 0xb5, 0x8f},
    {0x08, 0x42, 0x10, 0xf5, 0x7d},
    {0xc3, 0x4f, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0xb5, 0x6c},
    {0x02, 0x42, 0x0f, 0xb5, 0x6c},
    {0x07, 0x42, 0x0f, 0xb5, 0x6c},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0x54, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0x0b, 0xf5, 0xaf},
    {0x05, 0x54, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0x4b, 0xb5, 0xaf},
    {0x09, 0x47, 0x0b, 0xf5, 0xaf},
    {0xda, 0x7f, 0xf5, 0x00, 0x0e},
    {0x06, 0x54, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0x4b, 0xf5, 0xaf},
    {0xc2, 0x5f, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0x4b, 0xf5, 0xaf},
    {0x0e, 0x45, 0x4b, 0xb5, 0xaf},
    {0x1c, 0x44, 0x4b, 0xf5, 0xaf},
    {0x04, 0x54, 0xb5, 0x00, 0xff},
    {0x02, 0x54, 0xb5, 0x00, 0xff},
    {0x07, 0x54, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0x4b, 0xf5, 0xaf},
    {0x03, 0x43, 0x3f, 0xb5, 0x6e},
    {0x1b, 0x44, 0x4b, 0xf5, 0xaf},
    {0x05, 0x43, 0x3f, 0xb5, 0x6e},
    {0x67, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x45, 0x4b, 0xb5, 0xaf},
    {0xc9, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x3f, 0xb5, 0x6e},
    {0x13, 0x44, 0x4b, 0xf5, 0xaf},
    {0x08, 0x47, 0x0b, 0xf5, 0xaf},
    {0x77, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x5f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0x0b, 0xf5, 0xaf},
    {0x04, 0x43, 0x3f, 0xb5, 0x6e},
    {0x02, 0x43, 0x3f, 0xb5, 0x6e},
    {0x07, 0x43, 0x3f, 0xb5, 0x6e},
    {0x6d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x89, 0xb5, 0x7f},
    {0x0b, 0x43, 0x89, 0xf5, 0x7f},
    {0x05, 0x41, 0x89, 0xb5, 0x7f},
    {0x75, 0x02, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x89, 0xf5, 0x7f},
    {0xc7, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x89, 0xb5, 0x7f},
    {0x63, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x45, 0x4b, 0xb5, 0xaf},
    {0x7f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x89, 0xb5, 0x7f},
    {0x02, 0x41, 0x89, 0xb5, 0x7f},
    {0x07, 0x41, 0x89, 0xb5, 0x7f},
    {0x0d, 0x45, 0x4b, 0xb5, 0xaf},
    {0x03, 0x42, 0x3f, 0xb5, 0x6e},
    {0xd8, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3f, 0xb5, 0x6e},
    {0x6b, 0x02, 0x0b, 0xb5, 0xaf},
    {0x11, 0x45, 0x4b, 0xb5, 0xaf},
    {0xd4, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3f, 0xb5, 0x6e},
    {0x01, 0x45, 0x4b, 0xb5, 0xaf},
    {0x08, 0x43, 0x89, 0xf5, 0x7f},
    {0xc3, 0x7f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x89, 0xf5, 0x7f},
    {0x04, 0x42, 0x3f, 0xb5, 0x6e},
    {0x02, 0x42, 0x3f, 0xb5, 0x6e},
    {0x07, 0x42, 0x3f, 0xb5, 0x6e},
    {0x5d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0e, 0xf5, 0x8e},
    {0x05, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4e, 0xb5, 0x8e},
    {0x09, 0x41, 0x0e, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0e, 0xb5, 0x8e},
    {0x61, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x79, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x43, 0x4e, 0xb5, 0x8e},
    {0x7d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x46, 0x0e, 0xb5, 0x8e},
    {0x02, 0x46, 0x0e, 0xb5, 0x8e},
    {0x07, 0x46, 0x0e, 0xb5, 0x8e},
    {0x6f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x43, 0x4e, 0xb5, 0x8e},
    {0xd0, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x08, 0x41, 0x0e, 0xf5, 0x8e},
    {0x79, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x79, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0x4b, 0xf5, 0xaf},
    {0x03, 0x44, 0x89, 0xb5, 0x7f},
    {0x0b, 0x42, 0x89, 0xf5, 0x7f},
    {0x05, 0x44, 0x89, 0xb5, 0x7f},
    {0x1a, 0x44, 0x4b, 0xf5, 0xaf},
    {0x09, 0x42, 0x89, 0xf5, 0x7f},
    {0xcc, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x89, 0xb5, 0x7f},
    {0x65, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x4b, 0xf5, 0x0f},
    {0x19, 0x44, 0x4b, 0xf5, 0xaf},
    {0x0f, 0x43, 0x4e, 0xb5, 0x8e},
    {0xc5, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x89, 0xb5, 0x7f},
    {0x02, 0x44, 0x89, 0xb5, 0x7f},
    {0x07, 0x44, 0x89, 0xb5, 0x7f},
    {0x0d, 0x43, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0x4b, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0x4b, 0xf5, 0xaf},
    {0x11, 0x43, 0x4e, 0xb5, 0x8e},
    {0x84, 0x89, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x89, 0xf5, 0x7f},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x4b, 0xf5, 0x0f},
    {0x0a, 0x42, 0x89, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x09, 0xb5, 0x9e},
    {0x0b, 0x45, 0x09, 0xf5, 0x9e},
    {0x05, 0x47, 0x09, 0xb5, 0x9e},
    {0x0c, 0x44, 0x49, 0xb5, 0x9e},
    {0x09, 0x45, 0x09, 0xf5, 0x9e},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x09, 0xb5, 0x9e},
    {0x14, 0x42, 0x49, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x49, 0xf5, 0x9e},
    {0x0e, 0x44, 0x49, 0xb5, 0x9e},
    {0x1c, 0x42, 0x49, 0xf5, 0x9e},
    {0x04, 0x47, 0x09, 0xb5, 0x9e},
    {0x02, 0x47, 0x09, 0xb5, 0x9e},
    {0x07, 0x47, 0x09, 0xb5, 0x9e},
    {0x17, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x44, 0x49, 0xb5, 0x9e},
    {0xce, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x49, 0xf5, 0x9e},
    {0x08, 0x45, 0x09, 0xf5, 0x9e},
    {0x78, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x04, 0x03, 0x43, 0xbf},
    {0x74, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x44, 0x49, 0xb5, 0x9e},
    {0x40, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0x0b, 0xb5, 0xaf},
    {0x11, 0x44, 0x49, 0xb5, 0x9e},
    {0xd6, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x43, 0xbf},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0e, 0xf5, 0x8e},
    {0x05, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4e, 0xb5, 0x8e},
    {0x09, 0x44, 0x0e, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0e, 0xb5, 0x8e},
    {0x62, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x02, 0x03, 0x43, 0xbf},
    {0x72, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x42, 0x4e, 0xb5, 0x8e},
    {0x7e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x45, 0x0e, 0xb5, 0x8e},
    {0x02, 0x45, 0x0e, 0xb5, 0x8e},
    {0x07, 0x45, 0x0e, 0xb5, 0x8e},
    {0x70, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x42, 0x4e, 0xb5, 0x8e},
    {0xd2, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0x0b, 0xb5, 0xaf},
    {0x08, 0x44, 0x0e, 0xf5, 0x8e},
    {0x7a, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x02, 0x03, 0x43, 0xbf},
    {0x0a, 0x44, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x07, 0x03, 0x43, 0xbf},
    {0x19, 0x42, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc6, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xf4, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x59, 0xb5, 0x00, 0xff},
    {0x0b, 0x51, 0xb5, 0x40, 0xff},
    {0x05, 0x59, 0xb5, 0x00, 0xff},
    {0x0c, 0x4f, 0xf5, 0x00, 0xff},
    {0x09, 0x51, 0xb5, 0x40, 0xff},
    {0xda, 0x4d, 0xb5, 0x00, 0x0c},
    {0x06, 0x59, 0xb5, 0x00, 0xff},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0xb5, 0x00, 0x0c},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4f, 0xf5, 0x00, 0xff},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0x59, 0xb5, 0x00, 0xff},
    {0x02, 0x59, 0xb5, 0x00, 0xff},
    {0x07, 0x59, 0xb5, 0x00, 0xff},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0xb5, 0x6c},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0xb5, 0x6c},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4f, 0xf5, 0x00, 0xff},
    {0xc9, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0d, 0xb5, 0x6c},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x51, 0xb5, 0x40, 0xff},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0xb5, 0x00, 0x0c},
    {0x0a, 0x51, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x0d, 0xb5, 0x6c},
    {0x02, 0x43, 0x0d, 0xb5, 0x6c},
    {0x07, 0x43, 0x0d, 0xb5, 0x6c},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x13, 0xb5, 0x7e},
    {0x0b, 0x43, 0x13, 0xf5, 0x7e},
    {0x05, 0x41, 0x13, 0xb5, 0x7e},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x13, 0xf5, 0x7e},
    {0xc7, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x13, 0xb5, 0x7e},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4f, 0xf5, 0x00, 0xff},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x13, 0xb5, 0x7e},
    {0x02, 0x41, 0x13, 0xb5, 0x7e},
    {0x07, 0x41, 0x13, 0xb5, 0x7e},
    {0x0d, 0x4f, 0xf5, 0x00, 0xff},
    {0x03, 0x42, 0x0d, 0xb5, 0x6c},
    {0x97, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x0d, 0xb5, 0x6c},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4f, 0xf5, 0x00, 0xff},
    {0x93, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x0d, 0xb5, 0x6c},
    {0x01, 0x4f, 0xf5, 0x00, 0xff},
    {0x08, 0x43, 0x13, 0xf5, 0x7e},
    {0xc3, 0x4d, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x0d, 0xb5, 0x6c},
    {0x02, 0x42, 0x0d, 0xb5, 0x6c},
    {0x07, 0x42, 0x0d, 0xb5, 0x6c},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x1c, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1c, 0xf5, 0x8f},
    {0x05, 0x46, 0x1c, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5c, 0xb5, 0x8f},
    {0x09, 0x41, 0x1c, 0xf5, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x1c, 0xb5, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x5c, 0xb5, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x1c, 0xb5, 0x8f},
    {0x02, 0x46, 0x1c, 0xb5, 0x8f},
    {0x07, 0x46, 0x1c, 0xb5, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x5c, 0xb5, 0x8f},
    {0x8f, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x1c, 0xf5, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x1c, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x13, 0xb5, 0x7e},
    {0x0b, 0x42, 0x13, 0xf5, 0x7e},
    {0x05, 0x44, 0x13, 0xb5, 0x7e},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x13, 0xf5, 0x7e},
    {0x8b, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x13, 0xb5, 0x7e},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x5c, 0xb5, 0x8f},
    {0xc5, 0x5c, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x13, 0xb5, 0x7e},
    {0x02, 0x44, 0x13, 0xb5, 0x7e},
    {0x07, 0x44, 0x13, 0xb5, 0x7e},
    {0x0d, 0x43, 0x5c, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x5c, 0xb5, 0x8f},
    {0xc4, 0x53, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x5c, 0xb5, 0x8f},
    {0x08, 0x42, 0x13, 0xf5, 0x7e},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x9a, 0xf5, 0x9f},
    {0x05, 0x49, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0xda, 0xb5, 0x9f},
    {0x09, 0x46, 0x9a, 0xf5, 0x9f},
    {0x9a, 0x97, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0xda, 0xf5, 0x9f},
    {0xc2, 0x5a, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0xda, 0xf5, 0x9f},
    {0x0e, 0x41, 0xda, 0xb5, 0x9f},
    {0x1c, 0x43, 0xda, 0xf5, 0x9f},
    {0x04, 0x49, 0x05, 0xb5, 0xae},
    {0x02, 0x49, 0x05, 0xb5, 0xae},
    {0x07, 0x49, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0xda, 0xf5, 0x9f},
    {0x03, 0x43, 0x97, 0xb5, 0x6f},
    {0x1b, 0x43, 0xda, 0xf5, 0x9f},
    {0x05, 0x43, 0x97, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xda, 0xb5, 0x9f},
    {0x8d, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x97, 0xb5, 0x6f},
    {0x13, 0x43, 0xda, 0xf5, 0x9f},
    {0x08, 0x46, 0x9a, 0xf5, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x9a, 0xf5, 0x9f},
    {0x04, 0x43, 0x97, 0xb5, 0x6f},
    {0x02, 0x43, 0x97, 0xb5, 0x6f},
    {0x07, 0x43, 0x97, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0xb5, 0x7c},
    {0x0b, 0x43, 0x08, 0xf5, 0x7c},
    {0x05, 0x41, 0x08, 0xb5, 0x7c},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0xf5, 0x7c},
    {0xc8, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x08, 0xb5, 0x7c},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xda, 0xb5, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0xb5, 0x7c},
    {0x02, 0x41, 0x08, 0xb5, 0x7c},
    {0x07, 0x41, 0x08, 0xb5, 0x7c},
    {0x0d, 0x41, 0xda, 0xb5, 0x9f},
    {0x03, 0x42, 0x97, 0xb5, 0x6f},
    {0x99, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x97, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xda, 0xb5, 0x9f},
    {0x95, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x97, 0xb5, 0x6f},
    {0x01, 0x41, 0xda, 0xb5, 0x9f},
    {0x08, 0x43, 0x08, 0xf5, 0x7c},
    {0x83, 0x97, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x97, 0xb5, 0x6f},
    {0x02, 0x42, 0x97, 0xb5, 0x6f},
    {0x07, 0x42, 0x97, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x1c, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1c, 0xf5, 0x8f},
    {0x05, 0x45, 0x1c, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5c, 0xb5, 0x8f},
    {0x09, 0x44, 0x1c, 0xf5, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x1c, 0xb5, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8b, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x5c, 0xb5, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x1c, 0xb5, 0x8f},
    {0x02, 0x45, 0x1c, 0xb5, 0x8f},
    {0x07, 0x45, 0x1c, 0xb5, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x5c, 0xb5, 0x8f},
    {0x91, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x1c, 0xf5, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x1c, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xda, 0xf5, 0x9f},
    {0x03, 0x44, 0x08, 0xb5, 0x7c},
    {0x0b, 0x42, 0x08, 0xf5, 0x7c},
    {0x05, 0x44, 0x08, 0xb5, 0x7c},
    {0x1a, 0x43, 0xda, 0xf5, 0x9f},
    {0x09, 0x42, 0x08, 0xf5, 0x7c},
    {0xca, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x08, 0xb5, 0x7c},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xda, 0xf5, 0x9f},
    {0x0f, 0x42, 0x5c, 0xb5, 0x8f},
    {0xc6, 0x5c, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x08, 0xb5, 0x7c},
    {0x02, 0x44, 0x08, 0xb5, 0x7c},
    {0x07, 0x44, 0x08, 0xb5, 0x7c},
    {0x0d, 0x42, 0x5c, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xda, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xda, 0xf5, 0x9f},
    {0x11, 0x42, 0x5c, 0xb5, 0x8f},
    {0xc4, 0x48, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x5c, 0xb5, 0x8f},
    {0x08, 0x42, 0x08, 0xf5, 0x7c},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0x9a, 0xb5, 0x00, 0x0f},
    {0x03, 0x4b, 0x03, 0xb5, 0xbf},
    {0x0b, 0x48, 0x03, 0xf5, 0xbf},
    {0x05, 0x4b, 0x03, 0xb5, 0xbf},
    {0x0c, 0x46, 0x45, 0xb5, 0xae},
    {0x09, 0x48, 0x03, 0xf5, 0xbf},
    {0xda, 0x6b, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x03, 0xb5, 0xbf},
    {0x14, 0x41, 0x45, 0xf5, 0xae},
    {0xc2, 0x65, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x45, 0xf5, 0xae},
    {0x0e, 0x46, 0x45, 0xb5, 0xae},
    {0x1c, 0x41, 0x45, 0xf5, 0xae},
    {0x04, 0x4b, 0x03, 0xb5, 0xbf},
    {0x02, 0x4b, 0x03, 0xb5, 0xbf},
    {0x07, 0x4b, 0x03, 0xb5, 0xbf},
    {0x17, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x2b, 0xb5, 0x6e},
    {0x1b, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x2b, 0xb5, 0x6e},
    {0x67, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x46, 0x45, 0xb5, 0xae},
    {0xc9, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x2b, 0xb5, 0x6e},
    {0x13, 0x41, 0x45, 0xf5, 0xae},
    {0x08, 0x48, 0x03, 0xf5, 0xbf},
    {0x77, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x65, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0x03, 0xf5, 0xbf},
    {0x04, 0x43, 0x2b, 0xb5, 0x6e},
    {0x02, 0x43, 0x2b, 0xb5, 0x6e},
    {0x07, 0x43, 0x2b, 0xb5, 0x6e},
    {0x6d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x37, 0xb5, 0x7f},
    {0x0b, 0x43, 0x37, 0xf5, 0x7f},
    {0x05, 0x41, 0x37, 0xb5, 0x7f},
    {0x75, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x37, 0xf5, 0x7f},
    {0xc7, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x37, 0xb5, 0x7f},
    {0x63, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0xc2, 0x45, 0xb5, 0x0e},
    {0x73, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x46, 0x45, 0xb5, 0xae},
    {0x7f, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x37, 0xb5, 0x7f},
    {0x02, 0x41, 0x37, 0xb5, 0x7f},
    {0x07, 0x41, 0x37, 0xb5, 0x7f},
    {0x0d, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x2b, 0xb5, 0x6e},
    {0x98, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x2b, 0xb5, 0x6e},
    {0x6b, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x46, 0x45, 0xb5, 0xae},
    {0x94, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x2b, 0xb5, 0x6e},
    {0x01, 0x46, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x37, 0xf5, 0x7f},
    {0xc3, 0x6b, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x45, 0xb5, 0x0e},
    {0x0a, 0x43, 0x37, 0xf5, 0x7f},
    {0x04, 0x42, 0x2b, 0xb5, 0x6e},
    {0x02, 0x42, 0x2b, 0xb5, 0x6e},
    {0x07, 0x42, 0x2b, 0xb5, 0x6e},
    {0x5d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0xb5, 0x8c},
    {0x0b, 0x41, 0x04, 0xf5, 0x8c},
    {0x05, 0x46, 0x04, 0xb5, 0x8c},
    {0x0c, 0x43, 0x44, 0xb5, 0x8c},
    {0x09, 0x41, 0x04, 0xf5, 0x8c},
    {0xda, 0x51, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x04, 0xb5, 0x8c},
    {0x61, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x59, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0xb5, 0x8c},
    {0x7d, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0xb5, 0x8c},
    {0x02, 0x46, 0x04, 0xb5, 0x8c},
    {0x07, 0x46, 0x04, 0xb5, 0x8c},
    {0x6f, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0xb5, 0x6c},
    {0x7b, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0xb5, 0x6c},
    {0x69, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0xb5, 0x8c},
    {0x90, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x11, 0xb5, 0x6c},
    {0x5f, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0xf5, 0x8c},
    {0x79, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x59, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x11, 0xb5, 0x6c},
    {0x02, 0x43, 0x11, 0xb5, 0x6c},
    {0x07, 0x43, 0x11, 0xb5, 0x6c},
    {0x16, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x37, 0xb5, 0x7f},
    {0x0b, 0x42, 0x37, 0xf5, 0x7f},
    {0x05, 0x44, 0x37, 0xb5, 0x7f},
    {0x1a, 0x41, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x37, 0xf5, 0x7f},
    {0x8c, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x37, 0xb5, 0x7f},
    {0x65, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0xb5, 0x8c},
    {0xc5, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x37, 0xb5, 0x7f},
    {0x02, 0x44, 0x37, 0xb5, 0x7f},
    {0x07, 0x44, 0x37, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x11, 0xb5, 0x6c},
    {0x12, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0xb5, 0x6c},
    {0x15, 0x41, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0xb5, 0x8c},
    {0xc4, 0x77, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0xb5, 0x6c},
    {0x01, 0x43, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x37, 0xf5, 0x7f},
    {0xc3, 0x51, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x37, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0xb5, 0x6c},
    {0x02, 0x42, 0x11, 0xb5, 0x6c},
    {0x07, 0x42, 0x11, 0xb5, 0x6c},
    {0xde, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x9a, 0xb5, 0x9f},
    {0x0b, 0x45, 0x9a, 0xf5, 0x9f},
    {0x05, 0x47, 0x9a, 0xb5, 0x9f},
    {0x0c, 0x44, 0xda, 0xb5, 0x9f},
    {0x09, 0x45, 0x9a, 0xf5, 0x9f},
    {0x9a, 0x93, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0x9a, 0xb5, 0x9f},
    {0x14, 0x42, 0xda, 0xf5, 0x9f},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xda, 0xf5, 0x9f},
    {0x0e, 0x44, 0xda, 0xb5, 0x9f},
    {0x1c, 0x42, 0xda, 0xf5, 0x9f},
    {0x04, 0x47, 0x9a, 0xb5, 0x9f},
    {0x02, 0x47, 0x9a, 0xb5, 0x9f},
    {0x07, 0x47, 0x9a, 0xb5, 0x9f},
    {0x17, 0x42, 0xda, 0xf5, 0x9f},
    {0x03, 0x43, 0x93, 0xb5, 0x6f},
    {0x1b, 0x42, 0xda, 0xf5, 0x9f},
    {0x05, 0x43, 0x93, 0xb5, 0x6f},
    {0x68, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0xda, 0xb5, 0x9f},
    {0x8e, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x93, 0xb5, 0x6f},
    {0x13, 0x42, 0xda, 0xf5, 0x9f},
    {0x08, 0x45, 0x9a, 0xf5, 0x9f},
    {0x78, 0x03, 0x05, 0xb5, 0xae},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x9a, 0xf5, 0x9f},
    {0x04, 0x43, 0x93, 0xb5, 0x6f},
    {0x02, 0x43, 0x93, 0xb5, 0x6f},
    {0x07, 0x43, 0x93, 0xb5, 0x6f},
    {0x6e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0xda, 0xb5, 0x9f},
    {0x40, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xda, 0xb5, 0x9f},
    {0x03, 0x42, 0x93, 0xb5, 0x6f},
    {0x9b, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x93, 0xb5, 0x6f},
    {0x6c, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0xda, 0xb5, 0x9f},
    {0x96, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x93, 0xb5, 0x6f},
    {0x01, 0x44, 0xda, 0xb5, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x93, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x93, 0xb5, 0x6f},
    {0x02, 0x42, 0x93, 0xb5, 0x6f},
    {0x07, 0x42, 0x93, 0xb5, 0x6f},
    {0x5e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0xb5, 0x8c},
    {0x0b, 0x44, 0x04, 0xf5, 0x8c},
    {0x05, 0x45, 0x04, 0xb5, 0x8c},
    {0x0c, 0x42, 0x44, 0xb5, 0x8c},
    {0x09, 0x44, 0x04, 0xf5, 0x8c},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0xb5, 0x8c},
    {0x62, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0xb5, 0x8c},
    {0x7e, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0xb5, 0x8c},
    {0x02, 0x45, 0x04, 0xb5, 0x8c},
    {0x07, 0x45, 0x04, 0xb5, 0x8c},
    {0x70, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0xb5, 0x8c},
    {0x92, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0xf5, 0x8c},
    {0x7a, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xda, 0xf5, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xda, 0xf5, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xda, 0xf5, 0x9f},
    {0x0f, 0x42, 0x44, 0xb5, 0x8c},
    {0xc6, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xda, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xda, 0xf5, 0x9f},
    {0x11, 0x42, 0x44, 0xb5, 0x8c},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x43, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0xb5, 0x00, 0x0c},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x43, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0x43, 0xf5, 0xbf},
    {0x0e, 0x47, 0x43, 0xb5, 0xbf},
    {0x1c, 0x45, 0x43, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x43, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0xb5, 0x6c},
    {0x1b, 0x45, 0x43, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0xb5, 0x6c},
    {0x67, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x47, 0x43, 0xb5, 0xbf},
    {0xc9, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x01, 0xb5, 0x6c},
    {0x13, 0x45, 0x43, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0xb5, 0x6c},
    {0x02, 0x43, 0x01, 0xb5, 0x6c},
    {0x07, 0x43, 0x01, 0xb5, 0x6c},
    {0x6d, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0a, 0xf5, 0x7c},
    {0x05, 0x41, 0x0a, 0xb5, 0x7c},
    {0x75, 0x04, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc7, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0a, 0xb5, 0x7c},
    {0x63, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x43, 0xbf},
    {0x73, 0x04, 0x03, 0xb5, 0xbf},
    {0x0f, 0x47, 0x43, 0xb5, 0xbf},
    {0x7f, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0xb5, 0x7c},
    {0x02, 0x41, 0x0a, 0xb5, 0x7c},
    {0x07, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x47, 0x43, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0xb5, 0x6c},
    {0xd7, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0xb5, 0x6c},
    {0x6b, 0x04, 0x03, 0xb5, 0xbf},
    {0x11, 0x47, 0x43, 0xb5, 0xbf},
    {0xd3, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0xb5, 0x6c},
    {0x01, 0x47, 0x43, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x41, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x02, 0x43, 0xbf},
    {0x0a, 0x43, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x01, 0xb5, 0x6c},
    {0x02, 0x42, 0x01, 0xb5, 0x6c},
    {0x07, 0x42, 0x01, 0xb5, 0x6c},
    {0x5d, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0xb5, 0x8c},
    {0x0b, 0x41, 0x02, 0xf5, 0x8c},
    {0x05, 0x46, 0x02, 0xb5, 0x8c},
    {0x0c, 0x43, 0x42, 0xb5, 0x8c},
    {0x09, 0x41, 0x02, 0xf5, 0x8c},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0xb5, 0x8c},
    {0x61, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x52, 0xb5, 0x00, 0x0c},
    {0x71, 0x04, 0x03, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0xb5, 0x8c},
    {0x7d, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0xb5, 0x8c},
    {0x02, 0x46, 0x02, 0xb5, 0x8c},
    {0x07, 0x46, 0x02, 0xb5, 0x8c},
    {0x6f, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0xb5, 0x8c},
    {0xcf, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0x03, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0xf5, 0x8c},
    {0x79, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x52, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0x43, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0a, 0xf5, 0x7c},
    {0x05, 0x44, 0x0a, 0xb5, 0x7c},
    {0x1a, 0x45, 0x43, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0xf5, 0x7c},
    {0xcb, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0xb5, 0x7c},
    {0x65, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x43, 0xbf},
    {0x19, 0x45, 0x43, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0xb5, 0x8c},
    {0xc5, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0a, 0xb5, 0x7c},
    {0x02, 0x44, 0x0a, 0xb5, 0x7c},
    {0x07, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x43, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0x43, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0x43, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0xb5, 0x8c},
    {0xc4, 0x4a, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x06, 0xf5, 0x9d},
    {0x05, 0x48, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0x46, 0xb5, 0x9d},
    {0x09, 0x46, 0x06, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0x46, 0xf5, 0x9d},
    {0xc2, 0x55, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0x46, 0xf5, 0x9d},
    {0x0e, 0x41, 0x46, 0xb5, 0x9d},
    {0x1c, 0x43, 0x46, 0xf5, 0x9d},
    {0x04, 0x48, 0x05, 0xb5, 0xae},
    {0x02, 0x48, 0x05, 0xb5, 0xae},
    {0x07, 0x48, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x41, 0x46, 0xb5, 0x9d},
    {0xcd, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0xf5, 0x9d},
    {0x08, 0x46, 0x06, 0xf5, 0x9d},
    {0x78, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x55, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0x03, 0xb5, 0xbf},
    {0x0f, 0x41, 0x46, 0xb5, 0x9d},
    {0x40, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x03, 0xb5, 0xbf},
    {0x11, 0x41, 0x46, 0xb5, 0x9d},
    {0xd5, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0xb5, 0x8c},
    {0x0b, 0x44, 0x02, 0xf5, 0x8c},
    {0x05, 0x45, 0x02, 0xb5, 0x8c},
    {0x0c, 0x42, 0x42, 0xb5, 0x8c},
    {0x09, 0x44, 0x02, 0xf5, 0x8c},
    {0xda, 0xc1, 0x43, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0xb5, 0x8c},
    {0x62, 0x04, 0x03, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x03, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0xb5, 0x8c},
    {0x7e, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0xb5, 0x8c},
    {0x02, 0x45, 0x02, 0xb5, 0x8c},
    {0x07, 0x45, 0x02, 0xb5, 0x8c},
    {0x70, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x03, 0x6f},
    {0x7c, 0x04, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x03, 0x6f},
    {0x6a, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0xb5, 0x8c},
    {0xd1, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0x03, 0x6f},
    {0x60, 0x04, 0x03, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0xf5, 0x8c},
    {0x7a, 0x04, 0x03, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x81, 0x03, 0x6f},
    {0x02, 0x43, 0x81, 0x03, 0x6f},
    {0x07, 0x43, 0x81, 0x03, 0x6f},
    {0x16, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x43, 0xbf},
    {0x19, 0x43, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0xb5, 0x8c},
    {0xc6, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x81, 0x03, 0x6f},
    {0x12, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0x03, 0x6f},
    {0x15, 0x43, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0xb5, 0x8c},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x03, 0x6f},
    {0x01, 0x42, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0xc3, 0xc1, 0x43, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0x03, 0x6f},
    {0x02, 0x42, 0x81, 0x03, 0x6f},
    {0x07, 0x42, 0x81, 0x03, 0x6f},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0x03, 0xb5, 0xbf},
    {0x0b, 0x47, 0x05, 0xf5, 0xae},
    {0x05, 0x4c, 0x03, 0xb5, 0xbf},
    {0x0c, 0x45, 0x45, 0xb5, 0xae},
    {0x09, 0x47, 0x05, 0xf5, 0xae},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0x03, 0xb5, 0xbf},
    {0x14, 0x44, 0x45, 0xf5, 0xae},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0x45, 0xf5, 0xae},
    {0x0e, 0x45, 0x45, 0xb5, 0xae},
    {0x1c, 0x44, 0x45, 0xf5, 0xae},
    {0x04, 0x4c, 0x03, 0xb5, 0xbf},
    {0x02, 0x4c, 0x03, 0xb5, 0xbf},
    {0x07, 0x4c, 0x03, 0xb5, 0xbf},
    {0x17, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x45, 0x45, 0xb5, 0xae},
    {0xc9, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0x45, 0xf5, 0xae},
    {0x08, 0x47, 0x05, 0xf5, 0xae},
    {0x77, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x05, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x45, 0x45, 0xb5, 0xae},
    {0x7f, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x45, 0x45, 0xb5, 0xae},
    {0xd4, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0xb5, 0x8c},
    {0x0b, 0x41, 0x07, 0xf5, 0x8c},
    {0x05, 0x46, 0x07, 0xb5, 0x8c},
    {0x0c, 0x43, 0x47, 0xb5, 0x8c},
    {0x09, 0x41, 0x07, 0xf5, 0x8c},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0xb5, 0x8c},
    {0x61, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc3, 0x43, 0xf5, 0x0f},
    {0x71, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0xb5, 0x8c},
    {0x7d, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0xb5, 0x8c},
    {0x02, 0x46, 0x07, 0xb5, 0x8c},
    {0x07, 0x46, 0x07, 0xb5, 0x8c},
    {0x6f, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0xb5, 0x8c},
    {0xd0, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0xf5, 0x8c},
    {0x79, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0xc3, 0x43, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc1, 0x45, 0xb5, 0x0e},
    {0x19, 0x44, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0xb5, 0x8c},
    {0xc5, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0xb5, 0x8c},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x45, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0xb5, 0x9d},
    {0x0b, 0x45, 0x06, 0xf5, 0x9d},
    {0x05, 0x47, 0x06, 0xb5, 0x9d},
    {0x0c, 0x44, 0x46, 0xb5, 0x9d},
    {0x09, 0x45, 0x06, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0xb5, 0x9d},
    {0x14, 0x42, 0x46, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0xf5, 0x9d},
    {0x0e, 0x44, 0x46, 0xb5, 0x9d},
    {0x1c, 0x42, 0x46, 0xf5, 0x9d},
    {0x04, 0x47, 0x06, 0xb5, 0x9d},
    {0x02, 0x47, 0x06, 0xb5, 0x9d},
    {0x07, 0x47, 0x06, 0xb5, 0x9d},
    {0x17, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0x46, 0xb5, 0x9d},
    {0xce, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0xf5, 0x9d},
    {0x08, 0x45, 0x06, 0xf5, 0x9d},
    {0x78, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x43, 0xbf},
    {0x74, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0x46, 0xb5, 0x9d},
    {0x40, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0x46, 0xb5, 0x9d},
    {0xd6, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x43, 0xbf},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0xb5, 0x8c},
    {0x0b, 0x44, 0x07, 0xf5, 0x8c},
    {0x05, 0x45, 0x07, 0xb5, 0x8c},
    {0x0c, 0x42, 0x47, 0xb5, 0x8c},
    {0x09, 0x44, 0x07, 0xf5, 0x8c},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0xb5, 0x8c},
    {0x62, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x43, 0xbf},
    {0x72, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0xb5, 0x8c},
    {0x7e, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0xb5, 0x8c},
    {0x02, 0x45, 0x07, 0xb5, 0x8c},
    {0x07, 0x45, 0x07, 0xb5, 0x8c},
    {0x70, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0xb5, 0x8c},
    {0xd2, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0xf5, 0x8c},
    {0x7a, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x43, 0xbf},
    {0x0a, 0x44, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x43, 0xbf},
    {0x19, 0x42, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0xb5, 0x8c},
    {0xc6, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0xb5, 0x8c},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0x4d, 0xf5, 0x40, 0xff},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0x4d, 0xf5, 0x40, 0xff},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4d, 0xf5, 0x40, 0xff},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0x4d, 0xf5, 0x40, 0xff},
    {0x03, 0x43, 0x1d, 0xb5, 0x6e},
    {0x1b, 0x4d, 0xf5, 0x40, 0xff},
    {0x05, 0x43, 0x1d, 0xb5, 0x6e},
    {0x67, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x1d, 0xb5, 0x6e},
    {0x13, 0x4d, 0xf5, 0x40, 0xff},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0a, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1d, 0xb5, 0x6e},
    {0x02, 0x43, 0x1d, 0xb5, 0x6e},
    {0x07, 0x43, 0x1d, 0xb5, 0x6e},
    {0x6d, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x2d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2d, 0xf5, 0x7f},
    {0x05, 0x41, 0x2d, 0xb5, 0x7f},
    {0x75, 0x0a, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x2d, 0xf5, 0x7f},
    {0xc7, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x2d, 0xb5, 0x7f},
    {0x63, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x09, 0xf5, 0xff},
    {0x73, 0x0a, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x2d, 0xb5, 0x7f},
    {0x02, 0x41, 0x2d, 0xb5, 0x7f},
    {0x07, 0x41, 0x2d, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1d, 0xb5, 0x6e},
    {0x6b, 0x0a, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1d, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2d, 0xf5, 0x7f},
    {0xc3, 0x5d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x09, 0xf5, 0xff},
    {0x0a, 0x43, 0x2d, 0xf5, 0x7f},
    {0x04, 0x42, 0x1d, 0xb5, 0x6e},
    {0x02, 0x42, 0x1d, 0xb5, 0x6e},
    {0x07, 0x42, 0x1d, 0xb5, 0x6e},
    {0x5d, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0x17, 0xb5, 0x8f},
    {0x0b, 0x41, 0x17, 0xf5, 0x8f},
    {0x05, 0x46, 0x17, 0xb5, 0x8f},
    {0x0c, 0x43, 0x57, 0xb5, 0x8f},
    {0x09, 0x41, 0x17, 0xf5, 0x8f},
    {0xda, 0x03, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x17, 0xb5, 0x8f},
    {0x61, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x46, 0xb5, 0xee},
    {0x71, 0x0a, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0x57, 0xb5, 0x8f},
    {0x7d, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0x17, 0xb5, 0x8f},
    {0x02, 0x46, 0x17, 0xb5, 0x8f},
    {0x07, 0x46, 0x17, 0xb5, 0x8f},
    {0x6f, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x06, 0x6e},
    {0x7b, 0x0a, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x06, 0x6e},
    {0x69, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0x57, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x06, 0x6e},
    {0x5f, 0x0a, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0x17, 0xf5, 0x8f},
    {0x79, 0x0a, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x46, 0xb5, 0xee},
    {0x0a, 0x41, 0x17, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x06, 0x6e},
    {0x02, 0x43, 0x03, 0x06, 0x6e},
    {0x07, 0x43, 0x03, 0x06, 0x6e},
    {0x16, 0x4d, 0xf5, 0x40, 0xff},
    {0x03, 0x44, 0x2d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2d, 0xf5, 0x7f},
    {0x05, 0x44, 0x2d, 0xb5, 0x7f},
    {0x1a, 0x4d, 0xf5, 0x40, 0xff},
    {0x09, 0x42, 0x2d, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2d, 0xb5, 0x7f},
    {0x65, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x09, 0xf5, 0xff},
    {0x19, 0x4d, 0xf5, 0x40, 0xff},
    {0x0f, 0x43, 0x57, 0xb5, 0x8f},
    {0xc5, 0x57, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x2d, 0xb5, 0x7f},
    {0x02, 0x44, 0x2d, 0xb5, 0x7f},
    {0x07, 0x44, 0x2d, 0xb5, 0x7f},
    {0x0d, 0x43, 0x57, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x06, 0x6e},
    {0x12, 0x4d, 0xf5, 0x40, 0xff},
    {0x05, 0x42, 0x03, 0x06, 0x6e},
    {0x15, 0x4d, 0xf5, 0x40, 0xff},
    {0x11, 0x43, 0x57, 0xb5, 0x8f},
    {0xc4, 0x6d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x06, 0x6e},
    {0x01, 0x43, 0x57, 0xb5, 0x8f},
    {0x08, 0x42, 0x2d, 0xf5, 0x7f},
    {0xc3, 0x03, 0x46, 0xb5, 0xee},
    {0xc1, 0x05, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x2d, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x06, 0x6e},
    {0x02, 0x42, 0x03, 0x06, 0x6e},
    {0x07, 0x42, 0x03, 0x06, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x41, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x41, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x01, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x01, 0x6e},
    {0x68, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x01, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x0a, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x41, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x01, 0x6e},
    {0x02, 0x43, 0x0b, 0x01, 0x6e},
    {0x07, 0x43, 0x0b, 0x01, 0x6e},
    {0x6e, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x01, 0x7e},
    {0x0b, 0x43, 0x03, 0x41, 0x7e},
    {0x05, 0x41, 0x03, 0x01, 0x7e},
    {0x76, 0x0a, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x41, 0x7e},
    {0xc8, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x01, 0x7e},
    {0x64, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x46, 0xb5, 0xee},
    {0x74, 0x0a, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x01, 0x7e},
    {0x02, 0x41, 0x03, 0x01, 0x7e},
    {0x07, 0x41, 0x03, 0x01, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x01, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x01, 0x6e},
    {0x6c, 0x0a, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x01, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x41, 0x7e},
    {0xc3, 0x0b, 0x41, 0xf5, 0xee},
    {0xc1, 0x09, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x0b, 0x01, 0x6e},
    {0x02, 0x42, 0x0b, 0x01, 0x6e},
    {0x07, 0x42, 0x0b, 0x01, 0x6e},
    {0x5e, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0x17, 0xb5, 0x8f},
    {0x0b, 0x44, 0x17, 0xf5, 0x8f},
    {0x05, 0x45, 0x17, 0xb5, 0x8f},
    {0x0c, 0x42, 0x57, 0xb5, 0x8f},
    {0x09, 0x44, 0x17, 0xf5, 0x8f},
    {0xda, 0x05, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x17, 0xb5, 0x8f},
    {0x62, 0x0a, 0xb5, 0x00, 0xff},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x0a, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0x57, 0xb5, 0x8f},
    {0x7e, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0x17, 0xb5, 0x8f},
    {0x02, 0x45, 0x17, 0xb5, 0x8f},
    {0x07, 0x45, 0x17, 0xb5, 0x8f},
    {0x70, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x06, 0x6e},
    {0x7c, 0x0a, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x06, 0x6e},
    {0x6a, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0x57, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x06, 0x6e},
    {0x60, 0x0a, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0x17, 0xf5, 0x8f},
    {0x7a, 0x0a, 0xb5, 0x00, 0xff},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x17, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x06, 0x6e},
    {0x02, 0x43, 0x05, 0x06, 0x6e},
    {0x07, 0x43, 0x05, 0x06, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x01, 0x7e},
    {0x0b, 0x42, 0x03, 0x41, 0x7e},
    {0x05, 0x44, 0x03, 0x01, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x41, 0x7e},
    {0xca, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x01, 0x7e},
    {0x66, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x09, 0xf5, 0xff},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x57, 0xb5, 0x8f},
    {0xc6, 0x57, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x01, 0x7e},
    {0x02, 0x44, 0x03, 0x01, 0x7e},
    {0x07, 0x44, 0x03, 0x01, 0x7e},
    {0x0d, 0x42, 0x57, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x06, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x06, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x57, 0xb5, 0x8f},
    {0xc4, 0x03, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x06, 0x6e},
    {0x01, 0x42, 0x57, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x41, 0x7e},
    {0xc3, 0x05, 0x46, 0xb5, 0xee},
    {0xc1, 0x06, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x05, 0x06, 0x6e},
    {0x02, 0x42, 0x05, 0x06, 0x6e},
    {0x07, 0x42, 0x05, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x03, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x03, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x03, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x03, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x03, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x03, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x03, 0x6e},
    {0x02, 0x43, 0x0c, 0x03, 0x6e},
    {0x07, 0x43, 0x0c, 0x03, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x03, 0x7e},
    {0x0b, 0x43, 0x0b, 0x43, 0x7e},
    {0x05, 0x41, 0x0b, 0x03, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x43, 0x7e},
    {0xc7, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x03, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x03, 0x7e},
    {0x02, 0x41, 0x0b, 0x03, 0x7e},
    {0x07, 0x41, 0x0b, 0x03, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x03, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x03, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x03, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x43, 0x7e},
    {0xc3, 0x4c, 0x03, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x0c, 0x03, 0x6e},
    {0x02, 0x42, 0x0c, 0x03, 0x6e},
    {0x07, 0x42, 0x0c, 0x03, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x03, 0x8e},
    {0x0b, 0x41, 0x03, 0x43, 0x8e},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x0c, 0x43, 0x43, 0x03, 0x8e},
    {0x09, 0x41, 0x03, 0x43, 0x8e},
    {0xda, 0x09, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x03, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x03, 0x8e},
    {0x02, 0x46, 0x03, 0x03, 0x8e},
    {0x07, 0x46, 0x03, 0x03, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x01, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x01, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x03, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x01, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x43, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x09, 0x01, 0x6e},
    {0x02, 0x43, 0x09, 0x01, 0x6e},
    {0x07, 0x43, 0x09, 0x01, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x03, 0x7e},
    {0x0b, 0x42, 0x0b, 0x43, 0x7e},
    {0x05, 0x44, 0x0b, 0x03, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x43, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x03, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x03, 0x8e},
    {0xc5, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x03, 0x7e},
    {0x02, 0x44, 0x0b, 0x03, 0x7e},
    {0x07, 0x44, 0x0b, 0x03, 0x7e},
    {0x0d, 0x43, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x09, 0x01, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x01, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x03, 0x8e},
    {0xc4, 0x4b, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x01, 0x6e},
    {0x01, 0x43, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x0b, 0x43, 0x7e},
    {0xc3, 0x09, 0x41, 0xf5, 0xee},
    {0xc1, 0x0e, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x09, 0x01, 0x6e},
    {0x02, 0x42, 0x09, 0x01, 0x6e},
    {0x07, 0x42, 0x09, 0x01, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x03, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x03, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x01, 0x7e},
    {0x0b, 0x43, 0x05, 0x41, 0x7e},
    {0x05, 0x41, 0x05, 0x01, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x41, 0x7e},
    {0xc8, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x01, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x09, 0xf5, 0xff},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x01, 0x7e},
    {0x02, 0x41, 0x05, 0x01, 0x7e},
    {0x07, 0x41, 0x05, 0x01, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x41, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x09, 0xf5, 0xff},
    {0x0a, 0x43, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x03, 0x8e},
    {0x0b, 0x44, 0x03, 0x43, 0x8e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x0c, 0x42, 0x43, 0x03, 0x8e},
    {0x09, 0x44, 0x03, 0x43, 0x8e},
    {0xda, 0x06, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x09, 0xf5, 0xff},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x03, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x03, 0x8e},
    {0x02, 0x45, 0x03, 0x03, 0x8e},
    {0x07, 0x45, 0x03, 0x03, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x06, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x06, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x03, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x06, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x43, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x09, 0xf5, 0xff},
    {0x0a, 0x44, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x06, 0x6e},
    {0x02, 0x43, 0x06, 0x06, 0x6e},
    {0x07, 0x43, 0x06, 0x06, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x01, 0x7e},
    {0x0b, 0x42, 0x05, 0x41, 0x7e},
    {0x05, 0x44, 0x05, 0x01, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x41, 0x7e},
    {0xca, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x01, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x09, 0xf5, 0xff},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x03, 0x8e},
    {0xc6, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x01, 0x7e},
    {0x02, 0x44, 0x05, 0x01, 0x7e},
    {0x07, 0x44, 0x05, 0x01, 0x7e},
    {0x0d, 0x42, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x06, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x06, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x03, 0x8e},
    {0xc4, 0x05, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x06, 0x6e},
    {0x01, 0x42, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x05, 0x41, 0x7e},
    {0xc3, 0x06, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x06, 0x06, 0x6e},
    {0x02, 0x42, 0x06, 0x06, 0x6e},
    {0x07, 0x42, 0x06, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x61, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x03, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x21, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x21, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x21, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x03, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x21, 0xb5, 0x6e},
    {0x02, 0x43, 0x21, 0xb5, 0x6e},
    {0x07, 0x43, 0x21, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x35, 0xb5, 0x7f},
    {0x0b, 0x43, 0x35, 0xf5, 0x7f},
    {0x05, 0x41, 0x35, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x35, 0xf5, 0x7f},
    {0xc7, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x35, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x35, 0xb5, 0x7f},
    {0x02, 0x41, 0x35, 0xb5, 0x7f},
    {0x07, 0x41, 0x35, 0xb5, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x21, 0xb5, 0x6e},
    {0x97, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x21, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0x93, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x21, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x35, 0xf5, 0x7f},
    {0xc3, 0x61, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x35, 0xf5, 0x7f},
    {0x04, 0x42, 0x21, 0xb5, 0x6e},
    {0x02, 0x42, 0x21, 0xb5, 0x6e},
    {0x07, 0x42, 0x21, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x1b, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1b, 0xf5, 0x8f},
    {0x05, 0x46, 0x1b, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5b, 0xb5, 0x8f},
    {0x09, 0x41, 0x1b, 0xf5, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x1b, 0xb5, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x03, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x5b, 0xb5, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x1b, 0xb5, 0x8f},
    {0x02, 0x46, 0x1b, 0xb5, 0x8f},
    {0x07, 0x46, 0x1b, 0xb5, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x5b, 0xb5, 0x8f},
    {0x8f, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x1b, 0xf5, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x1b, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x35, 0xb5, 0x7f},
    {0x0b, 0x42, 0x35, 0xf5, 0x7f},
    {0x05, 0x44, 0x35, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x35, 0xf5, 0x7f},
    {0x8b, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x35, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x5b, 0xb5, 0x8f},
    {0xc5, 0x5b, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x35, 0xb5, 0x7f},
    {0x02, 0x44, 0x35, 0xb5, 0x7f},
    {0x07, 0x44, 0x35, 0xb5, 0x7f},
    {0x0d, 0x43, 0x5b, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x5b, 0xb5, 0x8f},
    {0xc4, 0x75, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x5b, 0xb5, 0x8f},
    {0x08, 0x42, 0x35, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x35, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x82, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xc2, 0xb5, 0x9e},
    {0x09, 0x46, 0x82, 0xf5, 0x9e},
    {0xda, 0x71, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x68, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc2, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x31, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x31, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc2, 0xb5, 0x9e},
    {0x8d, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x31, 0xb5, 0x6e},
    {0x13, 0x43, 0xc2, 0xf5, 0x9e},
    {0x08, 0x46, 0x82, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x31, 0xb5, 0x6e},
    {0x02, 0x43, 0x31, 0xb5, 0x6e},
    {0x07, 0x43, 0x31, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x03, 0x7e},
    {0x0b, 0x43, 0x09, 0x43, 0x7e},
    {0x05, 0x41, 0x09, 0x03, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x43, 0x7e},
    {0xc8, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x09, 0x03, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x41, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc2, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x03, 0x7e},
    {0x02, 0x41, 0x09, 0x03, 0x7e},
    {0x07, 0x41, 0x09, 0x03, 0x7e},
    {0x0d, 0x41, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x31, 0xb5, 0x6e},
    {0x99, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x31, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc2, 0xb5, 0x9e},
    {0x95, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x31, 0xb5, 0x6e},
    {0x01, 0x41, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x43, 0x7e},
    {0xc3, 0x71, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x31, 0xb5, 0x6e},
    {0x02, 0x42, 0x31, 0xb5, 0x6e},
    {0x07, 0x42, 0x31, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x1b, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1b, 0xf5, 0x8f},
    {0x05, 0x45, 0x1b, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5b, 0xb5, 0x8f},
    {0x09, 0x44, 0x1b, 0xf5, 0x8f},
    {0xda, 0x4e, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0x1b, 0xb5, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8d, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x5b, 0xb5, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x1b, 0xb5, 0x8f},
    {0x02, 0x45, 0x1b, 0xb5, 0x8f},
    {0x07, 0x45, 0x1b, 0xb5, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x5b, 0xb5, 0x8f},
    {0x91, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x1b, 0xf5, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8d, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x1b, 0xf5, 0x8f},
    {0x04, 0x43, 0x0e, 0x03, 0x6e},
    {0x02, 0x43, 0x0e, 0x03, 0x6e},
    {0x07, 0x43, 0x0e, 0x03, 0x6e},
    {0x16, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x03, 0x7e},
    {0x0b, 0x42, 0x09, 0x43, 0x7e},
    {0x05, 0x44, 0x09, 0x03, 0x7e},
    {0x1a, 0x43, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x43, 0x7e},
    {0xca, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x09, 0x03, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x5b, 0xb5, 0x8f},
    {0xc6, 0x5b, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x09, 0x03, 0x7e},
    {0x02, 0x44, 0x09, 0x03, 0x7e},
    {0x07, 0x44, 0x09, 0x03, 0x7e},
    {0x0d, 0x42, 0x5b, 0xb5, 0x8f},
    {0x03, 0x42, 0x0e, 0x03, 0x6e},
    {0x12, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x03, 0x6e},
    {0x15, 0x43, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x5b, 0xb5, 0x8f},
    {0xc4, 0x49, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x03, 0x6e},
    {0x01, 0x42, 0x5b, 0xb5, 0x8f},
    {0x08, 0x42, 0x09, 0x43, 0x7e},
    {0xc3, 0x4e, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x0e, 0x03, 0x6e},
    {0x02, 0x42, 0x0e, 0x03, 0x6e},
    {0x07, 0x42, 0x0e, 0x03, 0x6e},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x03, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3d, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3d, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x3d, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x03, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3d, 0xb5, 0x6e},
    {0x02, 0x43, 0x3d, 0xb5, 0x6e},
    {0x07, 0x43, 0x3d, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x87, 0xb5, 0x7f},
    {0x0b, 0x43, 0x87, 0xf5, 0x7f},
    {0x05, 0x41, 0x87, 0xb5, 0x7f},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x87, 0xf5, 0x7f},
    {0xc7, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x87, 0xb5, 0x7f},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x46, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x87, 0xb5, 0x7f},
    {0x02, 0x41, 0x87, 0xb5, 0x7f},
    {0x07, 0x41, 0x87, 0xb5, 0x7f},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3d, 0xb5, 0x6e},
    {0x98, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3d, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0x94, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3d, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x87, 0xf5, 0x7f},
    {0xc3, 0x7d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x87, 0xf5, 0x7f},
    {0x04, 0x42, 0x3d, 0xb5, 0x6e},
    {0x02, 0x42, 0x3d, 0xb5, 0x6e},
    {0x07, 0x42, 0x3d, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x03, 0x8e},
    {0x0b, 0x41, 0x05, 0x43, 0x8e},
    {0x05, 0x46, 0x05, 0x03, 0x8e},
    {0x0c, 0x43, 0x45, 0x03, 0x8e},
    {0x09, 0x41, 0x05, 0x43, 0x8e},
    {0xda, 0x04, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x03, 0x8e},
    {0x02, 0x46, 0x05, 0x03, 0x8e},
    {0x07, 0x46, 0x05, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x06, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x06, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x03, 0x8e},
    {0x90, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x06, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x06, 0x6e},
    {0x02, 0x43, 0x04, 0x06, 0x6e},
    {0x07, 0x43, 0x04, 0x06, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x87, 0xb5, 0x7f},
    {0x0b, 0x42, 0x87, 0xf5, 0x7f},
    {0x05, 0x44, 0x87, 0xb5, 0x7f},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x87, 0xf5, 0x7f},
    {0x8c, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x87, 0xb5, 0x7f},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x03, 0x8e},
    {0xc5, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x87, 0xb5, 0x7f},
    {0x02, 0x44, 0x87, 0xb5, 0x7f},
    {0x07, 0x44, 0x87, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x06, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x06, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x03, 0x8e},
    {0x84, 0x87, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x06, 0x6e},
    {0x01, 0x43, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x87, 0xf5, 0x7f},
    {0xc3, 0x04, 0x46, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x87, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x06, 0x6e},
    {0x02, 0x42, 0x04, 0x06, 0x6e},
    {0x07, 0x42, 0x04, 0x06, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x82, 0xb5, 0x9e},
    {0x0b, 0x45, 0x82, 0xf5, 0x9e},
    {0x05, 0x47, 0x82, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc2, 0xb5, 0x9e},
    {0x09, 0x45, 0x82, 0xf5, 0x9e},
    {0xda, 0x02, 0x46, 0xb5, 0xee},
    {0x06, 0x47, 0x82, 0xb5, 0x9e},
    {0x14, 0x42, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x46, 0xb5, 0xee},
    {0x18, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc2, 0xf5, 0x9e},
    {0x04, 0x47, 0x82, 0xb5, 0x9e},
    {0x02, 0x47, 0x82, 0xb5, 0x9e},
    {0x07, 0x47, 0x82, 0xb5, 0x9e},
    {0x17, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x06, 0x6e},
    {0x1b, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x06, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xc2, 0xb5, 0x9e},
    {0x8e, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x06, 0x6e},
    {0x13, 0x42, 0xc2, 0xf5, 0x9e},
    {0x08, 0x45, 0x82, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x46, 0xb5, 0xee},
    {0x0a, 0x45, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x06, 0x6e},
    {0x02, 0x43, 0x02, 0x06, 0x6e},
    {0x07, 0x43, 0x02, 0x06, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x01, 0x7e},
    {0x0b, 0x43, 0x06, 0x41, 0x7e},
    {0x05, 0x41, 0x06, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x41, 0x7e},
    {0xc8, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xc2, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x01, 0x7e},
    {0x02, 0x41, 0x06, 0x01, 0x7e},
    {0x07, 0x41, 0x06, 0x01, 0x7e},
    {0x0d, 0x44, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x06, 0x6e},
    {0x9b, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x06, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xc2, 0xb5, 0x9e},
    {0x96, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x06, 0x6e},
    {0x01, 0x44, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x41, 0x7e},
    {0xc3, 0x02, 0x46, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x06, 0x6e},
    {0x02, 0x42, 0x02, 0x06, 0x6e},
    {0x07, 0x42, 0x02, 0x06, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x03, 0x8e},
    {0x0b, 0x44, 0x05, 0x43, 0x8e},
    {0x05, 0x45, 0x05, 0x03, 0x8e},
    {0x0c, 0x42, 0x45, 0x03, 0x8e},
    {0x09, 0x44, 0x05, 0x43, 0x8e},
    {0xda, 0x07, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x03, 0x8e},
    {0x02, 0x45, 0x05, 0x03, 0x8e},
    {0x07, 0x45, 0x05, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x06, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x06, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x03, 0x8e},
    {0x92, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x06, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x06, 0x6e},
    {0x02, 0x43, 0x07, 0x06, 0x6e},
    {0x07, 0x43, 0x07, 0x06, 0x6e},
    {0x16, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x01, 0x7e},
    {0x0b, 0x42, 0x06, 0x41, 0x7e},
    {0x05, 0x44, 0x06, 0x01, 0x7e},
    {0x1a, 0x42, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x41, 0x7e},
    {0xca, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x03, 0x8e},
    {0xc6, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x01, 0x7e},
    {0x02, 0x44, 0x06, 0x01, 0x7e},
    {0x07, 0x44, 0x06, 0x01, 0x7e},
    {0x0d, 0x42, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x06, 0x6e},
    {0x12, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x06, 0x6e},
    {0x15, 0x42, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x03, 0x8e},
    {0xc4, 0x06, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x06, 0x6e},
    {0x01, 0x42, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x06, 0x41, 0x7e},
    {0xc3, 0x07, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x06, 0x6e},
    {0x02, 0x42, 0x07, 0x06, 0x6e},
    {0x07, 0x42, 0x07, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0xb5, 0x40, 0x0d},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x2f, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x2f, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2f, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2f, 0xb5, 0x6e},
    {0x02, 0x43, 0x2f, 0xb5, 0x6e},
    {0x07, 0x43, 0x2f, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x23, 0xb5, 0x7f},
    {0x0b, 0x43, 0x23, 0xf5, 0x7f},
    {0x05, 0x41, 0x23, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x23, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x23, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x23, 0xb5, 0x7f},
    {0x02, 0x41, 0x23, 0xb5, 0x7f},
    {0x07, 0x41, 0x23, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x2f, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2f, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2f, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x23, 0xf5, 0x7f},
    {0xc3, 0x6f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x23, 0xf5, 0x7f},
    {0x04, 0x42, 0x2f, 0xb5, 0x6e},
    {0x02, 0x42, 0x2f, 0xb5, 0x6e},
    {0x07, 0x42, 0x2f, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x23, 0xb5, 0x7f},
    {0x0b, 0x42, 0x23, 0xf5, 0x7f},
    {0x05, 0x44, 0x23, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x23, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x23, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x23, 0xb5, 0x7f},
    {0x02, 0x44, 0x23, 0xb5, 0x7f},
    {0x07, 0x44, 0x23, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x63, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x23, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x23, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x09, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x09, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7b, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x09, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x09, 0xb5, 0xaf},
    {0x02, 0x49, 0x09, 0xb5, 0xaf},
    {0x07, 0x49, 0x09, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3b, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3b, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3b, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3b, 0xb5, 0x6e},
    {0x02, 0x43, 0x3b, 0xb5, 0x6e},
    {0x07, 0x43, 0x3b, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3b, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3b, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3b, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7b, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3b, 0xb5, 0x6e},
    {0x02, 0x42, 0x3b, 0xb5, 0x6e},
    {0x07, 0x42, 0x3b, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x49, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x69, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x49, 0xf5, 0xaf},
    {0xc2, 0x64, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x49, 0xf5, 0xaf},
    {0x0e, 0x46, 0x49, 0xb5, 0xaf},
    {0x1c, 0x41, 0x49, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x49, 0xf5, 0xaf},
    {0x03, 0x43, 0x29, 0xb5, 0x6e},
    {0x1b, 0x41, 0x49, 0xf5, 0xaf},
    {0x05, 0x43, 0x29, 0xb5, 0x6e},
    {0x67, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x46, 0x49, 0xb5, 0xaf},
    {0xc9, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x29, 0xb5, 0x6e},
    {0x13, 0x41, 0x49, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x64, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x29, 0xb5, 0x6e},
    {0x02, 0x43, 0x29, 0xb5, 0x6e},
    {0x07, 0x43, 0x29, 0xb5, 0x6e},
    {0x6d, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x33, 0xb5, 0x7f},
    {0x0b, 0x43, 0x33, 0xf5, 0x7f},
    {0x05, 0x41, 0x33, 0xb5, 0x7f},
    {0x75, 0x03, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x33, 0xf5, 0x7f},
    {0xc7, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x33, 0xb5, 0x7f},
    {0x63, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x49, 0xf5, 0x0f},
    {0x73, 0x03, 0x09, 0xb5, 0xaf},
    {0x0f, 0x46, 0x49, 0xb5, 0xaf},
    {0x7f, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x33, 0xb5, 0x7f},
    {0x02, 0x41, 0x33, 0xb5, 0x7f},
    {0x07, 0x41, 0x33, 0xb5, 0x7f},
    {0x0d, 0x46, 0x49, 0xb5, 0xaf},
    {0x03, 0x42, 0x29, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x29, 0xb5, 0x6e},
    {0x6b, 0x03, 0x09, 0xb5, 0xaf},
    {0x11, 0x46, 0x49, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x29, 0xb5, 0x6e},
    {0x01, 0x46, 0x49, 0xb5, 0xaf},
    {0x08, 0x43, 0x33, 0xf5, 0x7f},
    {0xc3, 0x69, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x49, 0xf5, 0x0f},
    {0x0a, 0x43, 0x33, 0xf5, 0x7f},
    {0x04, 0x42, 0x29, 0xb5, 0x6e},
    {0x02, 0x42, 0x29, 0xb5, 0x6e},
    {0x07, 0x42, 0x29, 0xb5, 0x6e},
    {0x5d, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x46, 0x10, 0xb5, 0x8e},
    {0x0b, 0x41, 0x10, 0xf5, 0x8e},
    {0x05, 0x46, 0x10, 0xb5, 0x8e},
    {0x0c, 0x43, 0x50, 0xb5, 0x8e},
    {0x09, 0x41, 0x10, 0xf5, 0x8e},
    {0xda, 0x50, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x10, 0xb5, 0x8e},
    {0x61, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x74, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x09, 0xb5, 0xaf},
    {0x0e, 0x43, 0x50, 0xb5, 0x8e},
    {0x7d, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x46, 0x10, 0xb5, 0x8e},
    {0x02, 0x46, 0x10, 0xb5, 0x8e},
    {0x07, 0x46, 0x10, 0xb5, 0x8e},
    {0x6f, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x03, 0x6e},
    {0x7b, 0x03, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x03, 0x6e},
    {0x69, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x43, 0x50, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x03, 0x6e},
    {0x5f, 0x03, 0x09, 0xb5, 0xaf},
    {0x08, 0x41, 0x10, 0xf5, 0x8e},
    {0x79, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x74, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x03, 0x6e},
    {0x02, 0x43, 0x10, 0x03, 0x6e},
    {0x07, 0x43, 0x10, 0x03, 0x6e},
    {0x16, 0x41, 0x49, 0xf5, 0xaf},
    {0x03, 0x44, 0x33, 0xb5, 0x7f},
    {0x0b, 0x42, 0x33, 0xf5, 0x7f},
    {0x05, 0x44, 0x33, 0xb5, 0x7f},
    {0x1a, 0x41, 0x49, 0xf5, 0xaf},
    {0x09, 0x42, 0x33, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x33, 0xb5, 0x7f},
    {0x65, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0x49, 0xf5, 0xaf},
    {0x0f, 0x43, 0x50, 0xb5, 0x8e},
    {0xc5, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x33, 0xb5, 0x7f},
    {0x02, 0x44, 0x33, 0xb5, 0x7f},
    {0x07, 0x44, 0x33, 0xb5, 0x7f},
    {0x0d, 0x43, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x03, 0x6e},
    {0x12, 0x41, 0x49, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x03, 0x6e},
    {0x15, 0x41, 0x49, 0xf5, 0xaf},
    {0x11, 0x43, 0x50, 0xb5, 0x8e},
    {0xc4, 0x73, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x03, 0x6e},
    {0x01, 0x43, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x33, 0xf5, 0x7f},
    {0xc3, 0x50, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x33, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x03, 0x6e},
    {0x02, 0x42, 0x10, 0x03, 0x6e},
    {0x07, 0x42, 0x10, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8f, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8f, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8f, 0xb5, 0x6f},
    {0x68, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8f, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x40, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8f, 0xb5, 0x6f},
    {0x02, 0x43, 0x8f, 0xb5, 0x6f},
    {0x07, 0x43, 0x8f, 0xb5, 0x6f},
    {0x6e, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0f, 0xf5, 0x7d},
    {0x05, 0x41, 0x0f, 0xb5, 0x7d},
    {0x76, 0x03, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x0f, 0xf5, 0x7d},
    {0xc8, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0xb5, 0x7d},
    {0x64, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x09, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x0f, 0xb5, 0x7d},
    {0x02, 0x41, 0x0f, 0xb5, 0x7d},
    {0x07, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8f, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8f, 0xb5, 0x6f},
    {0x6c, 0x03, 0x09, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8f, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0xf5, 0x7d},
    {0x83, 0x8f, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x8f, 0xb5, 0x6f},
    {0x02, 0x42, 0x8f, 0xb5, 0x6f},
    {0x07, 0x42, 0x8f, 0xb5, 0x6f},
    {0x5e, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x45, 0x10, 0xb5, 0x8e},
    {0x0b, 0x44, 0x10, 0xf5, 0x8e},
    {0x05, 0x45, 0x10, 0xb5, 0x8e},
    {0x0c, 0x42, 0x50, 0xb5, 0x8e},
    {0x09, 0x44, 0x10, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x10, 0xb5, 0x8e},
    {0x62, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x09, 0xb5, 0xaf},
    {0x0e, 0x42, 0x50, 0xb5, 0x8e},
    {0x7e, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x45, 0x10, 0xb5, 0x8e},
    {0x02, 0x45, 0x10, 0xb5, 0x8e},
    {0x07, 0x45, 0x10, 0xb5, 0x8e},
    {0x70, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x42, 0x50, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x09, 0xb5, 0xaf},
    {0x08, 0x44, 0x10, 0xf5, 0x8e},
    {0x7a, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0f, 0xf5, 0x7d},
    {0x05, 0x44, 0x0f, 0xb5, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0xf5, 0x7d},
    {0xca, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0xb5, 0x7d},
    {0x66, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x50, 0xb5, 0x8e},
    {0xc6, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0xb5, 0x7d},
    {0x02, 0x44, 0x0f, 0xb5, 0x7d},
    {0x07, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x42, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x50, 0xb5, 0x8e},
    {0xc4, 0x4f, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x49, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x41, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x1f, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x1f, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1f, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x41, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1f, 0xb5, 0x6e},
    {0x02, 0x43, 0x1f, 0xb5, 0x6e},
    {0x07, 0x43, 0x1f, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3f, 0xf5, 0x7f},
    {0x05, 0x41, 0x3f, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3f, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3f, 0xb5, 0x7f},
    {0x02, 0x41, 0x3f, 0xb5, 0x7f},
    {0x07, 0x41, 0x3f, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x1f, 0xb5, 0x6e},
    {0xd7, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1f, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1f, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3f, 0xf5, 0x7f},
    {0xc3, 0x5f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3f, 0xf5, 0x7f},
    {0x04, 0x42, 0x1f, 0xb5, 0x6e},
    {0x02, 0x42, 0x1f, 0xb5, 0x6e},
    {0x07, 0x42, 0x1f, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x99, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x01, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x01, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x08, 0x01, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x99, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x01, 0x6e},
    {0x02, 0x43, 0x08, 0x01, 0x6e},
    {0x07, 0x43, 0x08, 0x01, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3f, 0xf5, 0x7f},
    {0x05, 0x44, 0x3f, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3f, 0xf5, 0x7f},
    {0xcb, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x3f, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3f, 0xb5, 0x7f},
    {0x02, 0x44, 0x3f, 0xb5, 0x7f},
    {0x07, 0x44, 0x3f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x01, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x01, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x01, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3f, 0xf5, 0x7f},
    {0xc3, 0x08, 0x41, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3f, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x01, 0x6e},
    {0x02, 0x42, 0x08, 0x01, 0x6e},
    {0x07, 0x42, 0x08, 0x01, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x09, 0xb5, 0xaf},
    {0x0b, 0x46, 0x0e, 0xf5, 0x9f},
    {0x05, 0x48, 0x09, 0xb5, 0xaf},
    {0x0c, 0x41, 0x4e, 0xb5, 0x9f},
    {0x09, 0x46, 0x0e, 0xf5, 0x9f},
    {0xda, 0x79, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x09, 0xb5, 0xaf},
    {0x14, 0x43, 0x4e, 0xf5, 0x9f},
    {0xc2, 0x6c, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4e, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4e, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4e, 0xf5, 0x9f},
    {0x04, 0x48, 0x09, 0xb5, 0xaf},
    {0x02, 0x48, 0x09, 0xb5, 0xaf},
    {0x07, 0x48, 0x09, 0xb5, 0xaf},
    {0x17, 0x43, 0x4e, 0xf5, 0x9f},
    {0x03, 0x43, 0x39, 0xb5, 0x6e},
    {0x1b, 0x43, 0x4e, 0xf5, 0x9f},
    {0x05, 0x43, 0x39, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x4e, 0xb5, 0x9f},
    {0xcd, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x39, 0xb5, 0x6e},
    {0x13, 0x43, 0x4e, 0xf5, 0x9f},
    {0x08, 0x46, 0x0e, 0xf5, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0e, 0xf5, 0x9f},
    {0x04, 0x43, 0x39, 0xb5, 0x6e},
    {0x02, 0x43, 0x39, 0xb5, 0x6e},
    {0x07, 0x43, 0x39, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x01, 0x7e},
    {0x0b, 0x43, 0x04, 0x41, 0x7e},
    {0x05, 0x41, 0x04, 0x01, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x01, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x41, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x4e, 0xb5, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x01, 0x7e},
    {0x02, 0x41, 0x04, 0x01, 0x7e},
    {0x07, 0x41, 0x04, 0x01, 0x7e},
    {0x0d, 0x41, 0x4e, 0xb5, 0x9f},
    {0x03, 0x42, 0x39, 0xb5, 0x6e},
    {0xd9, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x39, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x4e, 0xb5, 0x9f},
    {0xd5, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x39, 0xb5, 0x6e},
    {0x01, 0x41, 0x4e, 0xb5, 0x9f},
    {0x08, 0x43, 0x04, 0x41, 0x7e},
    {0xc3, 0x79, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x39, 0xb5, 0x6e},
    {0x02, 0x42, 0x39, 0xb5, 0x6e},
    {0x07, 0x42, 0x39, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x95, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x95, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x4e, 0xf5, 0x9f},
    {0x03, 0x44, 0x04, 0x01, 0x7e},
    {0x0b, 0x42, 0x04, 0x41, 0x7e},
    {0x05, 0x44, 0x04, 0x01, 0x7e},
    {0x1a, 0x43, 0x4e, 0xf5, 0x9f},
    {0x09, 0x42, 0x04, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x01, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x4e, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x01, 0x7e},
    {0x02, 0x44, 0x04, 0x01, 0x7e},
    {0x07, 0x44, 0x04, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x4e, 0xf5, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x4e, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x41, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x09, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x49, 0xb5, 0xaf},
    {0x09, 0x47, 0x09, 0xf5, 0xaf},
    {0xda, 0x0a, 0x41, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x49, 0xf5, 0xaf},
    {0xc2, 0x01, 0x41, 0xf5, 0xee},
    {0x18, 0x44, 0x49, 0xf5, 0xaf},
    {0x0e, 0x45, 0x49, 0xb5, 0xaf},
    {0x1c, 0x44, 0x49, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x49, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x01, 0x6e},
    {0x1b, 0x44, 0x49, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x01, 0x6e},
    {0x67, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x45, 0x49, 0xb5, 0xaf},
    {0xc9, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x01, 0x6e},
    {0x13, 0x44, 0x49, 0xf5, 0xaf},
    {0x08, 0x47, 0x09, 0xf5, 0xaf},
    {0x77, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x01, 0x41, 0xf5, 0xee},
    {0x0a, 0x47, 0x09, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x01, 0x6e},
    {0x02, 0x43, 0x0a, 0x01, 0x6e},
    {0x07, 0x43, 0x0a, 0x01, 0x6e},
    {0x6d, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x01, 0x7e},
    {0x0b, 0x43, 0x02, 0x41, 0x7e},
    {0x05, 0x41, 0x02, 0x01, 0x7e},
    {0x75, 0x02, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x41, 0x7e},
    {0xc7, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x01, 0x7e},
    {0x63, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x09, 0xb5, 0xaf},
    {0x0f, 0x45, 0x49, 0xb5, 0xaf},
    {0x7f, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x01, 0x7e},
    {0x02, 0x41, 0x02, 0x01, 0x7e},
    {0x07, 0x41, 0x02, 0x01, 0x7e},
    {0x0d, 0x45, 0x49, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x01, 0x6e},
    {0xd8, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0a, 0x01, 0x6e},
    {0x6b, 0x02, 0x09, 0xb5, 0xaf},
    {0x11, 0x45, 0x49, 0xb5, 0xaf},
    {0xd4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0a, 0x01, 0x6e},
    {0x01, 0x45, 0x49, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x41, 0x7e},
    {0xc3, 0x0a, 0x41, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x0a, 0x01, 0x6e},
    {0x02, 0x42, 0x0a, 0x01, 0x6e},
    {0x07, 0x42, 0x0a, 0x01, 0x6e},
    {0x5d, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x03, 0x8e},
    {0x0b, 0x41, 0x06, 0x43, 0x8e},
    {0x05, 0x46, 0x06, 0x03, 0x8e},
    {0x0c, 0x43, 0x46, 0x03, 0x8e},
    {0x09, 0x41, 0x06, 0x43, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x03, 0x8e},
    {0x61, 0x02, 0x09, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x09, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x03, 0x8e},
    {0x7d, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x03, 0x8e},
    {0x02, 0x46, 0x06, 0x03, 0x8e},
    {0x07, 0x46, 0x06, 0x03, 0x8e},
    {0x6f, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x03, 0x8e},
    {0xd0, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x09, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x43, 0x8e},
    {0x79, 0x02, 0x09, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x49, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x01, 0x7e},
    {0x0b, 0x42, 0x02, 0x41, 0x7e},
    {0x05, 0x44, 0x02, 0x01, 0x7e},
    {0x1a, 0x44, 0x49, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x41, 0x7e},
    {0xcc, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x02, 0x01, 0x7e},
    {0x65, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x49, 0xf5, 0x0f},
    {0x19, 0x44, 0x49, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x03, 0x8e},
    {0xc5, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x01, 0x7e},
    {0x02, 0x44, 0x02, 0x01, 0x7e},
    {0x07, 0x44, 0x02, 0x01, 0x7e},
    {0x0d, 0x43, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x49, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x49, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x03, 0x8e},
    {0xc4, 0x02, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x41, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x49, 0xf5, 0x0f},
    {0x0a, 0x42, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x0e, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0e, 0xf5, 0x9f},
    {0x05, 0x47, 0x0e, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4e, 0xb5, 0x9f},
    {0x09, 0x45, 0x0e, 0xf5, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x0e, 0xb5, 0x9f},
    {0x14, 0x42, 0x4e, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x4e, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4e, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4e, 0xf5, 0x9f},
    {0x04, 0x47, 0x0e, 0xb5, 0x9f},
    {0x02, 0x47, 0x0e, 0xb5, 0x9f},
    {0x07, 0x47, 0x0e, 0xb5, 0x9f},
    {0x17, 0x42, 0x4e, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x4e, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x44, 0x4e, 0xb5, 0x9f},
    {0xce, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x4e, 0xf5, 0x9f},
    {0x08, 0x45, 0x0e, 0xf5, 0x9f},
    {0x78, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x0e, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x01, 0x7e},
    {0x0b, 0x43, 0x07, 0x41, 0x7e},
    {0x05, 0x41, 0x07, 0x01, 0x7e},
    {0x76, 0x02, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x41, 0x7e},
    {0xc8, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x01, 0x7e},
    {0x64, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x09, 0xb5, 0xaf},
    {0x0f, 0x44, 0x4e, 0xb5, 0x9f},
    {0x40, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x01, 0x7e},
    {0x02, 0x41, 0x07, 0x01, 0x7e},
    {0x07, 0x41, 0x07, 0x01, 0x7e},
    {0x0d, 0x44, 0x4e, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x09, 0xb5, 0xaf},
    {0x11, 0x44, 0x4e, 0xb5, 0x9f},
    {0xd6, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x4e, 0xb5, 0x9f},
    {0x08, 0x43, 0x07, 0x41, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x03, 0x8e},
    {0x0b, 0x44, 0x06, 0x43, 0x8e},
    {0x05, 0x45, 0x06, 0x03, 0x8e},
    {0x0c, 0x42, 0x46, 0x03, 0x8e},
    {0x09, 0x44, 0x06, 0x43, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x03, 0x8e},
    {0x62, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x09, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x03, 0x8e},
    {0x7e, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x03, 0x8e},
    {0x02, 0x45, 0x06, 0x03, 0x8e},
    {0x07, 0x45, 0x06, 0x03, 0x8e},
    {0x70, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x03, 0x8e},
    {0xd2, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x09, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x43, 0x8e},
    {0x7a, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x4e, 0xf5, 0x9f},
    {0x03, 0x44, 0x07, 0x01, 0x7e},
    {0x0b, 0x42, 0x07, 0x41, 0x7e},
    {0x05, 0x44, 0x07, 0x01, 0x7e},
    {0x1a, 0x42, 0x4e, 0xf5, 0x9f},
    {0x09, 0x42, 0x07, 0x41, 0x7e},
    {0xca, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x01, 0x7e},
    {0x66, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x4e, 0xf5, 0x9f},
    {0x0f, 0x42, 0x46, 0x03, 0x8e},
    {0xc6, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x01, 0x7e},
    {0x02, 0x44, 0x07, 0x01, 0x7e},
    {0x07, 0x44, 0x07, 0x01, 0x7e},
    {0x0d, 0x42, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x4e, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x4e, 0xf5, 0x9f},
    {0x11, 0x42, 0x46, 0x03, 0x8e},
    {0xc4, 0x07, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x41, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xdd, 0xb5, 0x00, 0x0f},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xdd, 0xb5, 0x00, 0x0f},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0xb5, 0x40, 0x0d},
    {0x06, 0xdd, 0xb5, 0x00, 0x0f},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0xc2, 0x5e, 0xb5, 0x40, 0x0d},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xdd, 0xb5, 0x00, 0x0f},
    {0x02, 0xdd, 0xb5, 0x00, 0x0f},
    {0x07, 0xdd, 0xb5, 0x00, 0x0f},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x16, 0xb5, 0x6d},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x16, 0xb5, 0x6d},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x16, 0xb5, 0x6d},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0xb5, 0x6d},
    {0x02, 0x43, 0x16, 0xb5, 0x6d},
    {0x07, 0x43, 0x16, 0xb5, 0x6d},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0d, 0xf5, 0x7d},
    {0x05, 0x41, 0x0d, 0xb5, 0x7d},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc7, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x0d, 0xb5, 0x7d},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0xb5, 0x7d},
    {0x02, 0x41, 0x0d, 0xb5, 0x7d},
    {0x07, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x16, 0xb5, 0x6d},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x16, 0xb5, 0x6d},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x16, 0xb5, 0x6d},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x56, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x16, 0xb5, 0x6d},
    {0x02, 0x42, 0x16, 0xb5, 0x6d},
    {0x07, 0x42, 0x16, 0xb5, 0x6d},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x13, 0xb5, 0x8f},
    {0x0b, 0x41, 0x13, 0xf5, 0x8f},
    {0x05, 0x46, 0x13, 0xb5, 0x8f},
    {0x0c, 0x43, 0x53, 0xb5, 0x8f},
    {0x09, 0x41, 0x13, 0xf5, 0x8f},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x13, 0xb5, 0x8f},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x53, 0xb5, 0x8f},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x13, 0xb5, 0x8f},
    {0x02, 0x46, 0x13, 0xb5, 0x8f},
    {0x07, 0x46, 0x13, 0xb5, 0x8f},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x53, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x13, 0xf5, 0x8f},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x13, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0d, 0xf5, 0x7d},
    {0x05, 0x44, 0x0d, 0xb5, 0x7d},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x0d, 0xf5, 0x7d},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0d, 0xb5, 0x7d},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x53, 0xb5, 0x8f},
    {0xc5, 0x53, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x0d, 0xb5, 0x7d},
    {0x02, 0x44, 0x0d, 0xb5, 0x7d},
    {0x07, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0d, 0x43, 0x53, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x53, 0xb5, 0x8f},
    {0xc4, 0x4d, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x53, 0xb5, 0x8f},
    {0x08, 0x42, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x13, 0xb5, 0x8f},
    {0x0b, 0x44, 0x13, 0xf5, 0x8f},
    {0x05, 0x45, 0x13, 0xb5, 0x8f},
    {0x0c, 0x42, 0x53, 0xb5, 0x8f},
    {0x09, 0x44, 0x13, 0xf5, 0x8f},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x13, 0xb5, 0x8f},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x45, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x53, 0xb5, 0x8f},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x13, 0xb5, 0x8f},
    {0x02, 0x45, 0x13, 0xb5, 0x8f},
    {0x07, 0x45, 0x13, 0xb5, 0x8f},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x53, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x13, 0xf5, 0x8f},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x45, 0xf5, 0x0f},
    {0x0a, 0x44, 0x13, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x53, 0xb5, 0x8f},
    {0xc6, 0x53, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x53, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x53, 0xb5, 0x8f},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x53, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0x05, 0xb5, 0xbf},
    {0x0b, 0x49, 0x05, 0xf5, 0xbf},
    {0x05, 0x4a, 0x05, 0xb5, 0xbf},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0x05, 0xf5, 0xbf},
    {0xda, 0x5a, 0xb5, 0x40, 0x0d},
    {0x06, 0x4a, 0x05, 0xb5, 0xbf},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x62, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0x05, 0xb5, 0xbf},
    {0x02, 0x4a, 0x05, 0xb5, 0xbf},
    {0x07, 0x4a, 0x05, 0xb5, 0xbf},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1a, 0xb5, 0x6d},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1a, 0xb5, 0x6d},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x1a, 0xb5, 0x6d},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0x05, 0xf5, 0xbf},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x62, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0x05, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0xb5, 0x6d},
    {0x02, 0x43, 0x1a, 0xb5, 0x6d},
    {0x07, 0x43, 0x1a, 0xb5, 0x6d},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1a, 0xb5, 0x6d},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1a, 0xb5, 0x6d},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1a, 0xb5, 0x6d},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x5a, 0xb5, 0x40, 0x0d},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x1a, 0xb5, 0x6d},
    {0x02, 0x42, 0x1a, 0xb5, 0x6d},
    {0x07, 0x42, 0x1a, 0xb5, 0x6d},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x08, 0xb5, 0x8d},
    {0x0b, 0x41, 0x08, 0xf5, 0x8d},
    {0x05, 0x46, 0x08, 0xb5, 0x8d},
    {0x0c, 0x43, 0x48, 0xb5, 0x8d},
    {0x09, 0x41, 0x08, 0xf5, 0x8d},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x72, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x48, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x08, 0xb5, 0x8d},
    {0x02, 0x46, 0x08, 0xb5, 0x8d},
    {0x07, 0x46, 0x08, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x48, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x08, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x72, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x48, 0xb5, 0x8d},
    {0xc5, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x48, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8b, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7e, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8b, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8b, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8b, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7e, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8b, 0xb5, 0x6f},
    {0x02, 0x43, 0x8b, 0xb5, 0x6f},
    {0x07, 0x43, 0x8b, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8b, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8b, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8b, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8b, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8b, 0xb5, 0x6f},
    {0x02, 0x42, 0x8b, 0xb5, 0x6f},
    {0x07, 0x42, 0x8b, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x08, 0xb5, 0x8d},
    {0x0b, 0x44, 0x08, 0xf5, 0x8d},
    {0x05, 0x45, 0x08, 0xb5, 0x8d},
    {0x0c, 0x42, 0x48, 0xb5, 0x8d},
    {0x09, 0x44, 0x08, 0xf5, 0x8d},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x48, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x08, 0xb5, 0x8d},
    {0x02, 0x45, 0x08, 0xb5, 0x8d},
    {0x07, 0x45, 0x08, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x48, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x08, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x48, 0xb5, 0x8d},
    {0xc6, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x48, 0xb5, 0x8d},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x65, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0x45, 0xf5, 0xbf},
    {0xc2, 0x70, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0x45, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x45, 0xf5, 0xbf},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x43, 0x25, 0xb5, 0x6e},
    {0x1b, 0x46, 0x45, 0xf5, 0xbf},
    {0x05, 0x43, 0x25, 0xb5, 0x6e},
    {0x67, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x25, 0xb5, 0x6e},
    {0x13, 0x46, 0x45, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x70, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x25, 0xb5, 0x6e},
    {0x02, 0x43, 0x25, 0xb5, 0x6e},
    {0x07, 0x43, 0x25, 0xb5, 0x6e},
    {0x6d, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x2b, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2b, 0xf5, 0x7f},
    {0x05, 0x41, 0x2b, 0xb5, 0x7f},
    {0x75, 0x01, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x2b, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2b, 0xb5, 0x7f},
    {0x63, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x45, 0xbf},
    {0x73, 0x01, 0x05, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x2b, 0xb5, 0x7f},
    {0x02, 0x41, 0x2b, 0xb5, 0x7f},
    {0x07, 0x41, 0x2b, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x25, 0xb5, 0x6e},
    {0xd7, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x25, 0xb5, 0x6e},
    {0x6b, 0x01, 0x05, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x25, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2b, 0xf5, 0x7f},
    {0xc3, 0x65, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x45, 0xbf},
    {0x0a, 0x43, 0x2b, 0xf5, 0x7f},
    {0x04, 0x42, 0x25, 0xb5, 0x6e},
    {0x02, 0x42, 0x25, 0xb5, 0x6e},
    {0x07, 0x42, 0x25, 0xb5, 0x6e},
    {0x5d, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0xc2, 0x45, 0xf5, 0x0f},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x7c, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0x05, 0xb5, 0xbf},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x05, 0x6f},
    {0x7b, 0x01, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x05, 0x6f},
    {0x69, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0x05, 0x6f},
    {0x5f, 0x01, 0x05, 0xb5, 0xbf},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x7c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0x05, 0x6f},
    {0x02, 0x43, 0x82, 0x05, 0x6f},
    {0x07, 0x43, 0x82, 0x05, 0x6f},
    {0x16, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x44, 0x2b, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2b, 0xf5, 0x7f},
    {0x05, 0x44, 0x2b, 0xb5, 0x7f},
    {0x1a, 0x46, 0x45, 0xf5, 0xbf},
    {0x09, 0x42, 0x2b, 0xf5, 0x7f},
    {0xcb, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x2b, 0xb5, 0x7f},
    {0x65, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x45, 0xbf},
    {0x19, 0x46, 0x45, 0xf5, 0xbf},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2b, 0xb5, 0x7f},
    {0x02, 0x44, 0x2b, 0xb5, 0x7f},
    {0x07, 0x44, 0x2b, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0x05, 0x6f},
    {0x12, 0x46, 0x45, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x05, 0x6f},
    {0x15, 0x46, 0x45, 0xf5, 0xbf},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6b, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x05, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2b, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x45, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x2b, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x05, 0x6f},
    {0x02, 0x42, 0x82, 0x05, 0x6f},
    {0x07, 0x42, 0x82, 0x05, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x04, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x44, 0xb5, 0x9d},
    {0x09, 0x46, 0x04, 0xf5, 0x9d},
    {0xda, 0x59, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x44, 0xf5, 0x9d},
    {0xc2, 0x6a, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x44, 0xf5, 0x9d},
    {0x0e, 0x41, 0x44, 0xb5, 0x9d},
    {0x1c, 0x43, 0x44, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x19, 0xb5, 0x6d},
    {0x1b, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x19, 0xb5, 0x6d},
    {0x68, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0xb5, 0x9d},
    {0xcd, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x19, 0xb5, 0x6d},
    {0x13, 0x43, 0x44, 0xf5, 0x9d},
    {0x08, 0x46, 0x04, 0xf5, 0x9d},
    {0x78, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x6a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x19, 0xb5, 0x6d},
    {0x02, 0x43, 0x19, 0xb5, 0x6d},
    {0x07, 0x43, 0x19, 0xb5, 0x6d},
    {0x6e, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0xb5, 0x7d},
    {0x0b, 0x43, 0x11, 0xf5, 0x7d},
    {0x05, 0x41, 0x11, 0xb5, 0x7d},
    {0x76, 0x01, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x11, 0xb5, 0x7d},
    {0x64, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x05, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0xb5, 0x9d},
    {0x40, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0xb5, 0x7d},
    {0x02, 0x41, 0x11, 0xb5, 0x7d},
    {0x07, 0x41, 0x11, 0xb5, 0x7d},
    {0x0d, 0x41, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x19, 0xb5, 0x6d},
    {0xd9, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x19, 0xb5, 0x6d},
    {0x6c, 0x01, 0x05, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0xb5, 0x9d},
    {0xd5, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x19, 0xb5, 0x6d},
    {0x01, 0x41, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x11, 0xf5, 0x7d},
    {0xc3, 0x59, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x19, 0xb5, 0x6d},
    {0x02, 0x42, 0x19, 0xb5, 0x6d},
    {0x07, 0x42, 0x19, 0xb5, 0x6d},
    {0x5e, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0x05, 0xb5, 0xbf},
    {0x82, 0x91, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x05, 0xb5, 0xbf},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x03, 0x6e},
    {0x7c, 0x01, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x03, 0x6e},
    {0x6a, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0f, 0x03, 0x6e},
    {0x60, 0x01, 0x05, 0xb5, 0xbf},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0x05, 0xb5, 0xbf},
    {0x81, 0x91, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x03, 0x6e},
    {0x02, 0x43, 0x0f, 0x03, 0x6e},
    {0x07, 0x43, 0x0f, 0x03, 0x6e},
    {0x16, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x11, 0xb5, 0x7d},
    {0x0b, 0x42, 0x11, 0xf5, 0x7d},
    {0x05, 0x44, 0x11, 0xb5, 0x7d},
    {0x1a, 0x43, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x11, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x11, 0xb5, 0x7d},
    {0x66, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x45, 0xbf},
    {0x19, 0x43, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x11, 0xb5, 0x7d},
    {0x02, 0x44, 0x11, 0xb5, 0x7d},
    {0x07, 0x44, 0x11, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x03, 0x6e},
    {0x12, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x0f, 0x03, 0x6e},
    {0x15, 0x43, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x51, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x11, 0xf5, 0x7d},
    {0xc3, 0x4f, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0x03, 0x6e},
    {0x02, 0x42, 0x0f, 0x03, 0x6e},
    {0x07, 0x42, 0x0f, 0x03, 0x6e},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x55, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x55, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0x9a, 0x85, 0xb5, 0x00, 0x0e},
    {0x06, 0x55, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x60, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x55, 0xb5, 0x00, 0xff},
    {0x02, 0x55, 0xb5, 0x00, 0xff},
    {0x07, 0x55, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x85, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x85, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x85, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x60, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x85, 0xb5, 0x6e},
    {0x02, 0x43, 0x85, 0xb5, 0x6e},
    {0x07, 0x43, 0x85, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x85, 0xb5, 0x6e},
    {0xd8, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x85, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x85, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0x85, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x85, 0xb5, 0x6e},
    {0x02, 0x42, 0x85, 0xb5, 0x6e},
    {0x07, 0x42, 0x85, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x7a, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0xb5, 0x9d},
    {0x0b, 0x45, 0x04, 0xf5, 0x9d},
    {0x05, 0x47, 0x04, 0xb5, 0x9d},
    {0x0c, 0x44, 0x44, 0xb5, 0x9d},
    {0x09, 0x45, 0x04, 0xf5, 0x9d},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0xb5, 0x9d},
    {0x14, 0x42, 0x44, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0xf5, 0x9d},
    {0x0e, 0x44, 0x44, 0xb5, 0x9d},
    {0x1c, 0x42, 0x44, 0xf5, 0x9d},
    {0x04, 0x47, 0x04, 0xb5, 0x9d},
    {0x02, 0x47, 0x04, 0xb5, 0x9d},
    {0x07, 0x47, 0x04, 0xb5, 0x9d},
    {0x17, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x44, 0xb5, 0x9d},
    {0xce, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0xf5, 0x9d},
    {0x08, 0x45, 0x04, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0x45, 0xbf},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x44, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x44, 0xb5, 0x9d},
    {0xd6, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x45, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0x45, 0xbf},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0x45, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0x45, 0xbf},
    {0x19, 0x42, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x03, 0xb5, 0xee},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x03, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x03, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x03, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0d, 0x03, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x03, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x03, 0x6e},
    {0x02, 0x43, 0x0d, 0x03, 0x6e},
    {0x07, 0x43, 0x0d, 0x03, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0xb5, 0x7d},
    {0x0b, 0x43, 0x01, 0xf5, 0x7d},
    {0x05, 0x41, 0x01, 0xb5, 0x7d},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0xf5, 0x7d},
    {0xc7, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x01, 0xb5, 0x7d},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0xb5, 0x7d},
    {0x02, 0x41, 0x01, 0xb5, 0x7d},
    {0x07, 0x41, 0x01, 0xb5, 0x7d},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x03, 0x6e},
    {0xd7, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0d, 0x03, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0d, 0x03, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0xf5, 0x7d},
    {0xc3, 0x4d, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x0d, 0x03, 0x6e},
    {0x02, 0x42, 0x0d, 0x03, 0x6e},
    {0x07, 0x42, 0x0d, 0x03, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0a, 0xf5, 0x8d},
    {0x05, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4a, 0xb5, 0x8d},
    {0x09, 0x41, 0x0a, 0xf5, 0x8d},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0xb5, 0x8d},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0xb5, 0x8d},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0xb5, 0x8d},
    {0x02, 0x46, 0x0a, 0xb5, 0x8d},
    {0x07, 0x46, 0x0a, 0xb5, 0x8d},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0xb5, 0x8d},
    {0xcf, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0xf5, 0x8d},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0xb5, 0x7d},
    {0x0b, 0x42, 0x01, 0xf5, 0x7d},
    {0x05, 0x44, 0x01, 0xb5, 0x7d},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0xf5, 0x7d},
    {0xcb, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x01, 0xb5, 0x7d},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc5, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x01, 0xb5, 0x7d},
    {0x02, 0x44, 0x01, 0xb5, 0x7d},
    {0x07, 0x44, 0x01, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x41, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x01, 0xf5, 0x7d},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0xf5, 0x9d},
    {0x05, 0x49, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0xb5, 0x9d},
    {0x09, 0x46, 0x02, 0xf5, 0x9d},
    {0xda, 0x52, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0xf5, 0x9d},
    {0xc2, 0x5a, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0xf5, 0x9d},
    {0x0e, 0x41, 0x42, 0xb5, 0x9d},
    {0x1c, 0x43, 0x42, 0xf5, 0x9d},
    {0x04, 0x49, 0x06, 0xb5, 0xae},
    {0x02, 0x49, 0x06, 0xb5, 0xae},
    {0x07, 0x49, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x12, 0xb5, 0x6d},
    {0x1b, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x12, 0xb5, 0x6d},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0xb5, 0x9d},
    {0xcd, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x12, 0xb5, 0x6d},
    {0x13, 0x43, 0x42, 0xf5, 0x9d},
    {0x08, 0x46, 0x02, 0xf5, 0x9d},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x12, 0xb5, 0x6d},
    {0x02, 0x43, 0x12, 0xb5, 0x6d},
    {0x07, 0x43, 0x12, 0xb5, 0x6d},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x03, 0x7e},
    {0x0b, 0x43, 0x08, 0x43, 0x7e},
    {0x05, 0x41, 0x08, 0x03, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x43, 0x7e},
    {0xc8, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x08, 0x03, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0xb5, 0x9d},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x03, 0x7e},
    {0x02, 0x41, 0x08, 0x03, 0x7e},
    {0x07, 0x41, 0x08, 0x03, 0x7e},
    {0x0d, 0x41, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x12, 0xb5, 0x6d},
    {0xd9, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x12, 0xb5, 0x6d},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0xb5, 0x9d},
    {0xd5, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x12, 0xb5, 0x6d},
    {0x01, 0x41, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x08, 0x43, 0x7e},
    {0xc3, 0x52, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x12, 0xb5, 0x6d},
    {0x02, 0x42, 0x12, 0xb5, 0x6d},
    {0x07, 0x42, 0x12, 0xb5, 0x6d},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0a, 0xf5, 0x8d},
    {0x05, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4a, 0xb5, 0x8d},
    {0x09, 0x44, 0x0a, 0xf5, 0x8d},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0xb5, 0x8d},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0xb5, 0x8d},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0xb5, 0x8d},
    {0x02, 0x45, 0x0a, 0xb5, 0x8d},
    {0x07, 0x45, 0x0a, 0xb5, 0x8d},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0xb5, 0x8d},
    {0xd1, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0xf5, 0x8d},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x08, 0x03, 0x7e},
    {0x0b, 0x42, 0x08, 0x43, 0x7e},
    {0x05, 0x44, 0x08, 0x03, 0x7e},
    {0x1a, 0x43, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x08, 0x43, 0x7e},
    {0xca, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x08, 0x03, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc6, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x08, 0x03, 0x7e},
    {0x02, 0x44, 0x08, 0x03, 0x7e},
    {0x07, 0x44, 0x08, 0x03, 0x7e},
    {0x0d, 0x42, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x48, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x08, 0x43, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x4b, 0x05, 0xb5, 0xbf},
    {0x0b, 0x48, 0x05, 0xf5, 0xbf},
    {0x05, 0x4b, 0x05, 0xb5, 0xbf},
    {0x0c, 0x46, 0x46, 0xb5, 0xae},
    {0x09, 0x48, 0x05, 0xf5, 0xbf},
    {0xda, 0x55, 0xb5, 0x40, 0x0d},
    {0x06, 0x4b, 0x05, 0xb5, 0xbf},
    {0x14, 0x41, 0x46, 0xf5, 0xae},
    {0xc2, 0x66, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x46, 0xf5, 0xae},
    {0x0e, 0x46, 0x46, 0xb5, 0xae},
    {0x1c, 0x41, 0x46, 0xf5, 0xae},
    {0x04, 0x4b, 0x05, 0xb5, 0xbf},
    {0x02, 0x4b, 0x05, 0xb5, 0xbf},
    {0x07, 0x4b, 0x05, 0xb5, 0xbf},
    {0x17, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0xb5, 0x6d},
    {0x1b, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0xb5, 0x6d},
    {0x67, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x46, 0x46, 0xb5, 0xae},
    {0xc9, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0xb5, 0x6d},
    {0x13, 0x41, 0x46, 0xf5, 0xae},
    {0x08, 0x48, 0x05, 0xf5, 0xbf},
    {0x77, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x66, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0x05, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0xb5, 0x6d},
    {0x02, 0x43, 0x15, 0xb5, 0x6d},
    {0x07, 0x43, 0x15, 0xb5, 0x6d},
    {0x6d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0xc2, 0x46, 0xb5, 0x0e},
    {0x73, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x46, 0x46, 0xb5, 0xae},
    {0x7f, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0xb5, 0x6d},
    {0xd8, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x15, 0xb5, 0x6d},
    {0x6b, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x46, 0x46, 0xb5, 0xae},
    {0xd4, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x15, 0xb5, 0x6d},
    {0x01, 0x46, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0xb5, 0x40, 0x0d},
    {0xc1, 0xc2, 0x46, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0xb5, 0x6d},
    {0x02, 0x42, 0x15, 0xb5, 0x6d},
    {0x07, 0x42, 0x15, 0xb5, 0x6d},
    {0x5d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x03, 0x8e},
    {0x0b, 0x41, 0x04, 0x43, 0x8e},
    {0x05, 0x46, 0x04, 0x03, 0x8e},
    {0x0c, 0x43, 0x44, 0x03, 0x8e},
    {0x09, 0x41, 0x04, 0x43, 0x8e},
    {0xda, 0x51, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x03, 0x8e},
    {0x61, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x59, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x03, 0x8e},
    {0x7d, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x03, 0x8e},
    {0x02, 0x46, 0x04, 0x03, 0x8e},
    {0x07, 0x46, 0x04, 0x03, 0x8e},
    {0x6f, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x03, 0x6e},
    {0x7b, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x03, 0x6e},
    {0x69, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x03, 0x8e},
    {0xd0, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x11, 0x03, 0x6e},
    {0x5f, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x43, 0x8e},
    {0x79, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x59, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x11, 0x03, 0x6e},
    {0x02, 0x43, 0x11, 0x03, 0x6e},
    {0x07, 0x43, 0x11, 0x03, 0x6e},
    {0x16, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x03, 0x8e},
    {0xc5, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x11, 0x03, 0x6e},
    {0x12, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x03, 0x6e},
    {0x15, 0x41, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x03, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x03, 0x6e},
    {0x01, 0x43, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x03, 0x6e},
    {0x02, 0x42, 0x11, 0x03, 0x6e},
    {0x07, 0x42, 0x11, 0x03, 0x6e},
    {0xde, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0xb5, 0x9d},
    {0x0b, 0x45, 0x02, 0xf5, 0x9d},
    {0x05, 0x47, 0x02, 0xb5, 0x9d},
    {0x0c, 0x44, 0x42, 0xb5, 0x9d},
    {0x09, 0x45, 0x02, 0xf5, 0x9d},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0xb5, 0x9d},
    {0x14, 0x42, 0x42, 0xf5, 0x9d},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0xf5, 0x9d},
    {0x0e, 0x44, 0x42, 0xb5, 0x9d},
    {0x1c, 0x42, 0x42, 0xf5, 0x9d},
    {0x04, 0x47, 0x02, 0xb5, 0x9d},
    {0x02, 0x47, 0x02, 0xb5, 0x9d},
    {0x07, 0x47, 0x02, 0xb5, 0x9d},
    {0x17, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0xb5, 0x9d},
    {0xce, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0xf5, 0x9d},
    {0x08, 0x45, 0x02, 0xf5, 0x9d},
    {0x78, 0x03, 0x06, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0xb5, 0x9d},
    {0x40, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0xb5, 0x9d},
    {0xd6, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x03, 0x8e},
    {0x0b, 0x44, 0x04, 0x43, 0x8e},
    {0x05, 0x45, 0x04, 0x03, 0x8e},
    {0x0c, 0x42, 0x44, 0x03, 0x8e},
    {0x09, 0x44, 0x04, 0x43, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x03, 0x8e},
    {0x62, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x03, 0x8e},
    {0x7e, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x03, 0x8e},
    {0x02, 0x45, 0x04, 0x03, 0x8e},
    {0x07, 0x45, 0x04, 0x03, 0x8e},
    {0x70, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x03, 0x8e},
    {0xd2, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x43, 0x8e},
    {0x7a, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x44, 0x03, 0x8e},
    {0xc6, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x44, 0x03, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x45, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x03, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x45, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x45, 0xf5, 0xbf},
    {0x0e, 0x47, 0x45, 0xb5, 0xbf},
    {0x1c, 0x45, 0x45, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x03, 0x6e},
    {0x1b, 0x45, 0x45, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x03, 0x6e},
    {0x67, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x47, 0x45, 0xb5, 0xbf},
    {0xc9, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x03, 0x6e},
    {0x13, 0x45, 0x45, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x03, 0x6e},
    {0x02, 0x43, 0x01, 0x03, 0x6e},
    {0x07, 0x43, 0x01, 0x03, 0x6e},
    {0x6d, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x03, 0x7e},
    {0x0b, 0x43, 0x0a, 0x43, 0x7e},
    {0x05, 0x41, 0x0a, 0x03, 0x7e},
    {0x75, 0x04, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x43, 0x7e},
    {0xc7, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x03, 0x7e},
    {0x63, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x45, 0xbf},
    {0x73, 0x04, 0x05, 0xb5, 0xbf},
    {0x0f, 0x47, 0x45, 0xb5, 0xbf},
    {0x7f, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x03, 0x7e},
    {0x02, 0x41, 0x0a, 0x03, 0x7e},
    {0x07, 0x41, 0x0a, 0x03, 0x7e},
    {0x0d, 0x47, 0x45, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x03, 0x6e},
    {0xd7, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0x03, 0x6e},
    {0x6b, 0x04, 0x05, 0xb5, 0xbf},
    {0x11, 0x47, 0x45, 0xb5, 0xbf},
    {0xd3, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0x03, 0x6e},
    {0x01, 0x47, 0x45, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x43, 0x7e},
    {0xc3, 0x41, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x45, 0xbf},
    {0x0a, 0x43, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x01, 0x03, 0x6e},
    {0x02, 0x42, 0x01, 0x03, 0x6e},
    {0x07, 0x42, 0x01, 0x03, 0x6e},
    {0x5d, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x03, 0x8e},
    {0x0b, 0x41, 0x02, 0x43, 0x8e},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x0c, 0x43, 0x42, 0x03, 0x8e},
    {0x09, 0x41, 0x02, 0x43, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x61, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x52, 0x03, 0xb5, 0xee},
    {0x71, 0x04, 0x05, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x03, 0x8e},
    {0x7d, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x03, 0x8e},
    {0x02, 0x46, 0x02, 0x03, 0x8e},
    {0x07, 0x46, 0x02, 0x03, 0x8e},
    {0x6f, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x03, 0x8e},
    {0xcf, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x05, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x43, 0x8e},
    {0x79, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x52, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x03, 0x7e},
    {0x0b, 0x42, 0x0a, 0x43, 0x7e},
    {0x05, 0x44, 0x0a, 0x03, 0x7e},
    {0x1a, 0x45, 0x45, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x43, 0x7e},
    {0xcb, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0x03, 0x7e},
    {0x65, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x45, 0xbf},
    {0x19, 0x45, 0x45, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x03, 0x8e},
    {0xc5, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x03, 0x7e},
    {0x02, 0x44, 0x0a, 0x03, 0x7e},
    {0x07, 0x44, 0x0a, 0x03, 0x7e},
    {0x0d, 0x43, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x45, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x45, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x03, 0x8e},
    {0xc4, 0x4a, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x0a, 0x43, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0xf5, 0x9d},
    {0x05, 0x48, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0xb5, 0x9d},
    {0x09, 0x46, 0x07, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0xf5, 0x9d},
    {0xc2, 0x55, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0xf5, 0x9d},
    {0x0e, 0x41, 0x47, 0xb5, 0x9d},
    {0x1c, 0x43, 0x47, 0xf5, 0x9d},
    {0x04, 0x48, 0x06, 0xb5, 0xae},
    {0x02, 0x48, 0x06, 0xb5, 0xae},
    {0x07, 0x48, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0xb5, 0x9d},
    {0xcd, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0xf5, 0x9d},
    {0x08, 0x46, 0x07, 0xf5, 0x9d},
    {0x78, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x55, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x05, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0xb5, 0x9d},
    {0x40, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x05, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0xb5, 0x9d},
    {0xd5, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x03, 0x8e},
    {0x0b, 0x44, 0x02, 0x43, 0x8e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x0c, 0x42, 0x42, 0x03, 0x8e},
    {0x09, 0x44, 0x02, 0x43, 0x8e},
    {0xda, 0xc1, 0x45, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x62, 0x04, 0x05, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x05, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x03, 0x8e},
    {0x7e, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x03, 0x8e},
    {0x02, 0x45, 0x02, 0x03, 0x8e},
    {0x07, 0x45, 0x02, 0x03, 0x8e},
    {0x70, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x05, 0x6f},
    {0x7c, 0x04, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x05, 0x6f},
    {0x6a, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x03, 0x8e},
    {0xd1, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0x05, 0x6f},
    {0x60, 0x04, 0x05, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x43, 0x8e},
    {0x7a, 0x04, 0x05, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x81, 0x05, 0x6f},
    {0x02, 0x43, 0x81, 0x05, 0x6f},
    {0x07, 0x43, 0x81, 0x05, 0x6f},
    {0x16, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x45, 0xbf},
    {0x19, 0x43, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0x03, 0x8e},
    {0xc6, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x81, 0x05, 0x6f},
    {0x12, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0x05, 0x6f},
    {0x15, 0x43, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0x03, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x05, 0x6f},
    {0x01, 0x42, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x45, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x05, 0x6f},
    {0x02, 0x42, 0x81, 0x05, 0x6f},
    {0x07, 0x42, 0x81, 0x05, 0x6f},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0x05, 0xb5, 0xbf},
    {0x0b, 0x47, 0x06, 0xf5, 0xae},
    {0x05, 0x4c, 0x05, 0xb5, 0xbf},
    {0x0c, 0x45, 0x46, 0xb5, 0xae},
    {0x09, 0x47, 0x06, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x05, 0xb5, 0xbf},
    {0x14, 0x44, 0x46, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x46, 0xf5, 0xae},
    {0x0e, 0x45, 0x46, 0xb5, 0xae},
    {0x1c, 0x44, 0x46, 0xf5, 0xae},
    {0x04, 0x4c, 0x05, 0xb5, 0xbf},
    {0x02, 0x4c, 0x05, 0xb5, 0xbf},
    {0x07, 0x4c, 0x05, 0xb5, 0xbf},
    {0x17, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x45, 0x46, 0xb5, 0xae},
    {0xc9, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x46, 0xf5, 0xae},
    {0x08, 0x47, 0x06, 0xf5, 0xae},
    {0x77, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x06, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x45, 0x46, 0xb5, 0xae},
    {0x7f, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x45, 0x46, 0xb5, 0xae},
    {0xd4, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x03, 0x8e},
    {0x0b, 0x41, 0x07, 0x43, 0x8e},
    {0x05, 0x46, 0x07, 0x03, 0x8e},
    {0x0c, 0x43, 0x47, 0x03, 0x8e},
    {0x09, 0x41, 0x07, 0x43, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x03, 0x8e},
    {0x61, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc3, 0x45, 0xf5, 0x0f},
    {0x71, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x03, 0x8e},
    {0x7d, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x03, 0x8e},
    {0x02, 0x46, 0x07, 0x03, 0x8e},
    {0x07, 0x46, 0x07, 0x03, 0x8e},
    {0x6f, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x03, 0x8e},
    {0xd0, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x43, 0x8e},
    {0x79, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0xc3, 0x45, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc1, 0x46, 0xb5, 0x0e},
    {0x19, 0x44, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x03, 0x8e},
    {0xc5, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x03, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x46, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0xb5, 0x9d},
    {0x0b, 0x45, 0x07, 0xf5, 0x9d},
    {0x05, 0x47, 0x07, 0xb5, 0x9d},
    {0x0c, 0x44, 0x47, 0xb5, 0x9d},
    {0x09, 0x45, 0x07, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0xb5, 0x9d},
    {0x14, 0x42, 0x47, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0xf5, 0x9d},
    {0x0e, 0x44, 0x47, 0xb5, 0x9d},
    {0x1c, 0x42, 0x47, 0xf5, 0x9d},
    {0x04, 0x47, 0x07, 0xb5, 0x9d},
    {0x02, 0x47, 0x07, 0xb5, 0x9d},
    {0x07, 0x47, 0x07, 0xb5, 0x9d},
    {0x17, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0xb5, 0x9d},
    {0xce, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0xf5, 0x9d},
    {0x08, 0x45, 0x07, 0xf5, 0x9d},
    {0x78, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x45, 0xbf},
    {0x74, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0xb5, 0x9d},
    {0x40, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0xb5, 0x9d},
    {0xd6, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x45, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x03, 0x8e},
    {0x0b, 0x44, 0x07, 0x43, 0x8e},
    {0x05, 0x45, 0x07, 0x03, 0x8e},
    {0x0c, 0x42, 0x47, 0x03, 0x8e},
    {0x09, 0x44, 0x07, 0x43, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x03, 0x8e},
    {0x62, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x45, 0xbf},
    {0x72, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x03, 0x8e},
    {0x7e, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x03, 0x8e},
    {0x02, 0x45, 0x07, 0x03, 0x8e},
    {0x07, 0x45, 0x07, 0x03, 0x8e},
    {0x70, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x03, 0x8e},
    {0xd2, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x43, 0x8e},
    {0x7a, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x45, 0xbf},
    {0x0a, 0x44, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x45, 0xbf},
    {0x19, 0x42, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0x03, 0x8e},
    {0xc6, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0x03, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb5, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb5, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb5, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb5, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb5, 0x00, 0x66},
    {0x02, 0x43, 0xb5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x1d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1d, 0xf5, 0x7f},
    {0x05, 0x41, 0x1d, 0xb5, 0x7f},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x1d, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1d, 0xb5, 0x7f},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x1d, 0xb5, 0x7f},
    {0x02, 0x41, 0x1d, 0xb5, 0x7f},
    {0x07, 0x41, 0x1d, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb5, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb5, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb5, 0x00, 0x66},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1d, 0xf5, 0x7f},
    {0x83, 0xb5, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x1d, 0xf5, 0x7f},
    {0x04, 0x42, 0xb5, 0x00, 0x66},
    {0x02, 0x42, 0xb5, 0x00, 0x66},
    {0x07, 0x42, 0xb5, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x1d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1d, 0xf5, 0x7f},
    {0x05, 0x44, 0x1d, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x1d, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1d, 0xb5, 0x7f},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1d, 0xb5, 0x7f},
    {0x02, 0x44, 0x1d, 0xb5, 0x7f},
    {0x07, 0x44, 0x1d, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1d, 0xf5, 0x7f},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x1d, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x46, 0xf5, 0xff},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x46, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x06, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x06, 0x6f},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x06, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x46, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x06, 0x6f},
    {0x02, 0x43, 0x0b, 0x06, 0x6f},
    {0x07, 0x43, 0x0b, 0x06, 0x6f},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x06, 0x7f},
    {0x0b, 0x43, 0x03, 0x46, 0x7f},
    {0x05, 0x41, 0x03, 0x06, 0x7f},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x46, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x06, 0x7f},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x06, 0x7f},
    {0x02, 0x41, 0x03, 0x06, 0x7f},
    {0x07, 0x41, 0x03, 0x06, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x06, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x06, 0x6f},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x06, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x46, 0x7f},
    {0xc3, 0x0b, 0x46, 0xf5, 0xff},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0x46, 0x7f},
    {0x04, 0x42, 0x0b, 0x06, 0x6f},
    {0x02, 0x42, 0x0b, 0x06, 0x6f},
    {0x07, 0x42, 0x0b, 0x06, 0x6f},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x06, 0x7f},
    {0x0b, 0x42, 0x03, 0x46, 0x7f},
    {0x05, 0x44, 0x03, 0x06, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x46, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x06, 0x7f},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x06, 0x7f},
    {0x02, 0x44, 0x03, 0x06, 0x7f},
    {0x07, 0x44, 0x03, 0x06, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x46, 0x7f},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0x46, 0x7f},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x01, 0xb5, 0xff},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x01, 0xb5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x01, 0x6f},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x01, 0x6f},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0c, 0x01, 0x6f},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x01, 0xb5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x01, 0x6f},
    {0x02, 0x43, 0x0c, 0x01, 0x6f},
    {0x07, 0x43, 0x0c, 0x01, 0x6f},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x01, 0x7f},
    {0x0b, 0x43, 0x0b, 0x41, 0x7f},
    {0x05, 0x41, 0x0b, 0x01, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x41, 0x7f},
    {0xc7, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x0b, 0x01, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x01, 0x7f},
    {0x02, 0x41, 0x0b, 0x01, 0x7f},
    {0x07, 0x41, 0x0b, 0x01, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x01, 0x6f},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x01, 0x6f},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x01, 0x6f},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x41, 0x7f},
    {0xc3, 0x4c, 0x01, 0xb5, 0xff},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x41, 0x7f},
    {0x04, 0x42, 0x0c, 0x01, 0x6f},
    {0x02, 0x42, 0x0c, 0x01, 0x6f},
    {0x07, 0x42, 0x0c, 0x01, 0x6f},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x01, 0x8f},
    {0x0b, 0x41, 0x03, 0x41, 0x8f},
    {0x05, 0x46, 0x03, 0x01, 0x8f},
    {0x0c, 0x43, 0x43, 0x01, 0x8f},
    {0x09, 0x41, 0x03, 0x41, 0x8f},
    {0xda, 0x09, 0x46, 0xf5, 0xff},
    {0x06, 0x46, 0x03, 0x01, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x01, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x01, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x01, 0x8f},
    {0x02, 0x46, 0x03, 0x01, 0x8f},
    {0x07, 0x46, 0x03, 0x01, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x06, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x06, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x01, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x06, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x41, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x03, 0x41, 0x8f},
    {0x04, 0x43, 0x09, 0x06, 0x6f},
    {0x02, 0x43, 0x09, 0x06, 0x6f},
    {0x07, 0x43, 0x09, 0x06, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x01, 0x7f},
    {0x0b, 0x42, 0x0b, 0x41, 0x7f},
    {0x05, 0x44, 0x0b, 0x01, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x41, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x01, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x46, 0xf5, 0xff},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x01, 0x8f},
    {0xc5, 0x43, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x0b, 0x01, 0x7f},
    {0x02, 0x44, 0x0b, 0x01, 0x7f},
    {0x07, 0x44, 0x0b, 0x01, 0x7f},
    {0x0d, 0x43, 0x43, 0x01, 0x8f},
    {0x03, 0x42, 0x09, 0x06, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x06, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x01, 0x8f},
    {0xc4, 0x4b, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x09, 0x06, 0x6f},
    {0x01, 0x43, 0x43, 0x01, 0x8f},
    {0x08, 0x42, 0x0b, 0x41, 0x7f},
    {0xc3, 0x09, 0x46, 0xf5, 0xff},
    {0xc1, 0x0e, 0x46, 0xf5, 0xff},
    {0x0a, 0x42, 0x0b, 0x41, 0x7f},
    {0x04, 0x42, 0x09, 0x06, 0x6f},
    {0x02, 0x42, 0x09, 0x06, 0x6f},
    {0x07, 0x42, 0x09, 0x06, 0x6f},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x01, 0xb5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x01, 0xb5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x06, 0x7f},
    {0x0b, 0x43, 0x05, 0x46, 0x7f},
    {0x05, 0x41, 0x05, 0x06, 0x7f},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x46, 0x7f},
    {0xc8, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x05, 0x06, 0x7f},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x06, 0x7f},
    {0x02, 0x41, 0x05, 0x06, 0x7f},
    {0x07, 0x41, 0x05, 0x06, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x46, 0x7f},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0x46, 0x7f},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x01, 0x8f},
    {0x0b, 0x44, 0x03, 0x41, 0x8f},
    {0x05, 0x45, 0x03, 0x01, 0x8f},
    {0x0c, 0x42, 0x43, 0x01, 0x8f},
    {0x09, 0x44, 0x03, 0x41, 0x8f},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0x01, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x01, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x01, 0x8f},
    {0x02, 0x45, 0x03, 0x01, 0x8f},
    {0x07, 0x45, 0x03, 0x01, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x01, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x41, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0x41, 0x8f},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x06, 0x7f},
    {0x0b, 0x42, 0x05, 0x46, 0x7f},
    {0x05, 0x44, 0x05, 0x06, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x46, 0x7f},
    {0xca, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x05, 0x06, 0x7f},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x01, 0x8f},
    {0xc6, 0x43, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x05, 0x06, 0x7f},
    {0x02, 0x44, 0x05, 0x06, 0x7f},
    {0x07, 0x44, 0x05, 0x06, 0x7f},
    {0x0d, 0x42, 0x43, 0x01, 0x8f},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x01, 0x8f},
    {0xc4, 0x05, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0x01, 0x8f},
    {0x08, 0x42, 0x05, 0x46, 0x7f},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0x46, 0x7f},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0x03, 0xf5, 0xff},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x01, 0xb5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0x03, 0x6f},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0x03, 0x6f},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x14, 0x03, 0x6f},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x01, 0xb5, 0xff},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0x03, 0x6f},
    {0x02, 0x43, 0x14, 0x03, 0x6f},
    {0x07, 0x43, 0x14, 0x03, 0x6f},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0x03, 0x7f},
    {0x0b, 0x43, 0x0c, 0x43, 0x7f},
    {0x05, 0x41, 0x0c, 0x03, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0x43, 0x7f},
    {0xc7, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x0c, 0x03, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0x03, 0x7f},
    {0x02, 0x41, 0x0c, 0x03, 0x7f},
    {0x07, 0x41, 0x0c, 0x03, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0x03, 0x6f},
    {0xd7, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x14, 0x03, 0x6f},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x14, 0x03, 0x6f},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0x43, 0x7f},
    {0xc3, 0x54, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0x43, 0x7f},
    {0x04, 0x42, 0x14, 0x03, 0x6f},
    {0x02, 0x42, 0x14, 0x03, 0x6f},
    {0x07, 0x42, 0x14, 0x03, 0x6f},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0x03, 0x8f},
    {0x0b, 0x41, 0x0b, 0x43, 0x8f},
    {0x05, 0x46, 0x0b, 0x03, 0x8f},
    {0x0c, 0x43, 0x4b, 0x03, 0x8f},
    {0x09, 0x41, 0x0b, 0x43, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0x03, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x01, 0xb5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0x03, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0x03, 0x8f},
    {0x02, 0x46, 0x0b, 0x03, 0x8f},
    {0x07, 0x46, 0x0b, 0x03, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0x03, 0x8f},
    {0xcf, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0x43, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x0b, 0x43, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0x03, 0x7f},
    {0x0b, 0x42, 0x0c, 0x43, 0x7f},
    {0x05, 0x44, 0x0c, 0x03, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0x43, 0x7f},
    {0xcb, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0c, 0x03, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0x03, 0x8f},
    {0xc5, 0x4b, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x0c, 0x03, 0x7f},
    {0x02, 0x44, 0x0c, 0x03, 0x7f},
    {0x07, 0x44, 0x0c, 0x03, 0x7f},
    {0x0d, 0x43, 0x4b, 0x03, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0x03, 0x8f},
    {0xc4, 0x4c, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0x03, 0x8f},
    {0x08, 0x42, 0x0c, 0x43, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0x43, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0x43, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0x03, 0x9f},
    {0x09, 0x46, 0x03, 0x43, 0x9f},
    {0xda, 0x58, 0x03, 0xf5, 0xff},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0x43, 0x9f},
    {0xc2, 0x67, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x43, 0x43, 0x9f},
    {0x0e, 0x41, 0x43, 0x03, 0x9f},
    {0x1c, 0x43, 0x43, 0x43, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0x43, 0x9f},
    {0x03, 0x43, 0x18, 0x03, 0x6f},
    {0x1b, 0x43, 0x43, 0x43, 0x9f},
    {0x05, 0x43, 0x18, 0x03, 0x6f},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0x03, 0x9f},
    {0xcd, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x18, 0x03, 0x6f},
    {0x13, 0x43, 0x43, 0x43, 0x9f},
    {0x08, 0x46, 0x03, 0x43, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x03, 0x43, 0x9f},
    {0x04, 0x43, 0x18, 0x03, 0x6f},
    {0x02, 0x43, 0x18, 0x03, 0x6f},
    {0x07, 0x43, 0x18, 0x03, 0x6f},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x01, 0x7f},
    {0x0b, 0x43, 0x09, 0x41, 0x7f},
    {0x05, 0x41, 0x09, 0x01, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x41, 0x7f},
    {0xc8, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x09, 0x01, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x46, 0xf5, 0xff},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0x03, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x01, 0x7f},
    {0x02, 0x41, 0x09, 0x01, 0x7f},
    {0x07, 0x41, 0x09, 0x01, 0x7f},
    {0x0d, 0x41, 0x43, 0x03, 0x9f},
    {0x03, 0x42, 0x18, 0x03, 0x6f},
    {0xd9, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x18, 0x03, 0x6f},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0x03, 0x9f},
    {0xd5, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x18, 0x03, 0x6f},
    {0x01, 0x41, 0x43, 0x03, 0x9f},
    {0x08, 0x43, 0x09, 0x41, 0x7f},
    {0xc3, 0x58, 0x03, 0xf5, 0xff},
    {0xc1, 0x10, 0x46, 0xf5, 0xff},
    {0x0a, 0x43, 0x09, 0x41, 0x7f},
    {0x04, 0x42, 0x18, 0x03, 0x6f},
    {0x02, 0x42, 0x18, 0x03, 0x6f},
    {0x07, 0x42, 0x18, 0x03, 0x6f},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0x03, 0x8f},
    {0x0b, 0x44, 0x0b, 0x43, 0x8f},
    {0x05, 0x45, 0x0b, 0x03, 0x8f},
    {0x0c, 0x42, 0x4b, 0x03, 0x8f},
    {0x09, 0x44, 0x0b, 0x43, 0x8f},
    {0xda, 0x4e, 0x01, 0xb5, 0xff},
    {0x06, 0x45, 0x0b, 0x03, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0x03, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0x03, 0x8f},
    {0x02, 0x45, 0x0b, 0x03, 0x8f},
    {0x07, 0x45, 0x0b, 0x03, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x01, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x01, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0x03, 0x8f},
    {0xd1, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0e, 0x01, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0x43, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0x43, 0x8f},
    {0x04, 0x43, 0x0e, 0x01, 0x6f},
    {0x02, 0x43, 0x0e, 0x01, 0x6f},
    {0x07, 0x43, 0x0e, 0x01, 0x6f},
    {0x16, 0x43, 0x43, 0x43, 0x9f},
    {0x03, 0x44, 0x09, 0x01, 0x7f},
    {0x0b, 0x42, 0x09, 0x41, 0x7f},
    {0x05, 0x44, 0x09, 0x01, 0x7f},
    {0x1a, 0x43, 0x43, 0x43, 0x9f},
    {0x09, 0x42, 0x09, 0x41, 0x7f},
    {0xca, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x09, 0x01, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0x43, 0x9f},
    {0x0f, 0x42, 0x4b, 0x03, 0x8f},
    {0xc6, 0x4b, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x09, 0x01, 0x7f},
    {0x02, 0x44, 0x09, 0x01, 0x7f},
    {0x07, 0x44, 0x09, 0x01, 0x7f},
    {0x0d, 0x42, 0x4b, 0x03, 0x8f},
    {0x03, 0x42, 0x0e, 0x01, 0x6f},
    {0x12, 0x43, 0x43, 0x43, 0x9f},
    {0x05, 0x42, 0x0e, 0x01, 0x6f},
    {0x15, 0x43, 0x43, 0x43, 0x9f},
    {0x11, 0x42, 0x4b, 0x03, 0x8f},
    {0xc4, 0x49, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x0e, 0x01, 0x6f},
    {0x01, 0x42, 0x4b, 0x03, 0x8f},
    {0x08, 0x42, 0x09, 0x41, 0x7f},
    {0xc3, 0x4e, 0x01, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x41, 0x7f},
    {0x04, 0x42, 0x0e, 0x01, 0x6f},
    {0x02, 0x42, 0x0e, 0x01, 0x6f},
    {0x07, 0x42, 0x0e, 0x01, 0x6f},
    {0xf4, 0x43, 0x03, 0xf5, 0xff},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0x03, 0xf5, 0xff},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x01, 0xb5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0x03, 0x6f},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0x03, 0x6f},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x1c, 0x03, 0x6f},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x01, 0xb5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0x03, 0x6f},
    {0x02, 0x43, 0x1c, 0x03, 0x6f},
    {0x07, 0x43, 0x1c, 0x03, 0x6f},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0x03, 0x6f},
    {0xd8, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x1c, 0x03, 0x6f},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x1c, 0x03, 0x6f},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0x03, 0xf5, 0xff},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0x03, 0x6f},
    {0x02, 0x42, 0x1c, 0x03, 0x6f},
    {0x07, 0x42, 0x1c, 0x03, 0x6f},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x01, 0x8f},
    {0x0b, 0x41, 0x05, 0x41, 0x8f},
    {0x05, 0x46, 0x05, 0x01, 0x8f},
    {0x0c, 0x43, 0x45, 0x01, 0x8f},
    {0x09, 0x41, 0x05, 0x41, 0x8f},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0x01, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x01, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x01, 0x8f},
    {0x02, 0x46, 0x05, 0x01, 0x8f},
    {0x07, 0x46, 0x05, 0x01, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x01, 0x8f},
    {0xd0, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x41, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x01, 0x8f},
    {0xc5, 0x45, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x01, 0x8f},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0x01, 0x8f},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0x03, 0x9f},
    {0x0b, 0x45, 0x03, 0x43, 0x9f},
    {0x05, 0x47, 0x03, 0x03, 0x9f},
    {0x0c, 0x44, 0x43, 0x03, 0x9f},
    {0x09, 0x45, 0x03, 0x43, 0x9f},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0x03, 0x9f},
    {0x14, 0x42, 0x43, 0x43, 0x9f},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0x43, 0x9f},
    {0x0e, 0x44, 0x43, 0x03, 0x9f},
    {0x1c, 0x42, 0x43, 0x43, 0x9f},
    {0x04, 0x47, 0x03, 0x03, 0x9f},
    {0x02, 0x47, 0x03, 0x03, 0x9f},
    {0x07, 0x47, 0x03, 0x03, 0x9f},
    {0x17, 0x42, 0x43, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0x03, 0x9f},
    {0xce, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0x43, 0x9f},
    {0x08, 0x45, 0x03, 0x43, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x06, 0x7f},
    {0x0b, 0x43, 0x06, 0x46, 0x7f},
    {0x05, 0x41, 0x06, 0x06, 0x7f},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x46, 0x7f},
    {0xc8, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x06, 0x06, 0x7f},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0x03, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x06, 0x7f},
    {0x02, 0x41, 0x06, 0x06, 0x7f},
    {0x07, 0x41, 0x06, 0x06, 0x7f},
    {0x0d, 0x44, 0x43, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0x03, 0x9f},
    {0xd6, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0x03, 0x9f},
    {0x08, 0x43, 0x06, 0x46, 0x7f},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x46, 0x7f},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x01, 0x8f},
    {0x0b, 0x44, 0x05, 0x41, 0x8f},
    {0x05, 0x45, 0x05, 0x01, 0x8f},
    {0x0c, 0x42, 0x45, 0x01, 0x8f},
    {0x09, 0x44, 0x05, 0x41, 0x8f},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0x01, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x01, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x01, 0x8f},
    {0x02, 0x45, 0x05, 0x01, 0x8f},
    {0x07, 0x45, 0x05, 0x01, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x01, 0x8f},
    {0xd2, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x41, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0x43, 0x9f},
    {0x03, 0x44, 0x06, 0x06, 0x7f},
    {0x0b, 0x42, 0x06, 0x46, 0x7f},
    {0x05, 0x44, 0x06, 0x06, 0x7f},
    {0x1a, 0x42, 0x43, 0x43, 0x9f},
    {0x09, 0x42, 0x06, 0x46, 0x7f},
    {0xca, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x06, 0x06, 0x7f},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0x43, 0x9f},
    {0x0f, 0x42, 0x45, 0x01, 0x8f},
    {0xc6, 0x45, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x06, 0x06, 0x7f},
    {0x02, 0x44, 0x06, 0x06, 0x7f},
    {0x07, 0x44, 0x06, 0x06, 0x7f},
    {0x0d, 0x42, 0x45, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0x43, 0x9f},
    {0x11, 0x42, 0x45, 0x01, 0x8f},
    {0xc4, 0x06, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0x01, 0x8f},
    {0x08, 0x42, 0x06, 0x46, 0x7f},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x46, 0x7f},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0x03, 0xf5, 0xff},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0x03, 0x6f},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0x03, 0x6f},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x17, 0x03, 0x6f},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0x03, 0xf5, 0xff},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0x03, 0x6f},
    {0x02, 0x43, 0x17, 0x03, 0x6f},
    {0x07, 0x43, 0x17, 0x03, 0x6f},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x21, 0xb5, 0x7f},
    {0x0b, 0x43, 0x21, 0xf5, 0x7f},
    {0x05, 0x41, 0x21, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x21, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x21, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x21, 0xb5, 0x7f},
    {0x02, 0x41, 0x21, 0xb5, 0x7f},
    {0x07, 0x41, 0x21, 0xb5, 0x7f},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0x03, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x17, 0x03, 0x6f},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x17, 0x03, 0x6f},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x21, 0xf5, 0x7f},
    {0xc3, 0x57, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x21, 0xf5, 0x7f},
    {0x04, 0x42, 0x17, 0x03, 0x6f},
    {0x02, 0x42, 0x17, 0x03, 0x6f},
    {0x07, 0x42, 0x17, 0x03, 0x6f},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x21, 0xb5, 0x7f},
    {0x0b, 0x42, 0x21, 0xf5, 0x7f},
    {0x05, 0x44, 0x21, 0xb5, 0x7f},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x21, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x21, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x21, 0xb5, 0x7f},
    {0x02, 0x44, 0x21, 0xb5, 0x7f},
    {0x07, 0x44, 0x21, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x61, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x21, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x21, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x82, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x82, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x5b, 0x03, 0xf5, 0xff},
    {0x06, 0x49, 0x82, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x75, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x82, 0xb5, 0xaf},
    {0x02, 0x49, 0x82, 0xb5, 0xaf},
    {0x07, 0x49, 0x82, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x1b, 0x03, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x1b, 0x03, 0x6f},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x1b, 0x03, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x1b, 0x03, 0x6f},
    {0x02, 0x43, 0x1b, 0x03, 0x6f},
    {0x07, 0x43, 0x1b, 0x03, 0x6f},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x1b, 0x03, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1b, 0x03, 0x6f},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1b, 0x03, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0x03, 0xf5, 0xff},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0x03, 0x6f},
    {0x02, 0x42, 0x1b, 0x03, 0x6f},
    {0x07, 0x42, 0x1b, 0x03, 0x6f},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xc2, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x68, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xc2, 0xf5, 0xaf},
    {0xc2, 0x63, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xc2, 0xf5, 0xaf},
    {0x0e, 0x46, 0xc2, 0xb5, 0xaf},
    {0x1c, 0x41, 0xc2, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xc2, 0xf5, 0xaf},
    {0x03, 0x43, 0x28, 0xb5, 0x6e},
    {0x1b, 0x41, 0xc2, 0xf5, 0xaf},
    {0x05, 0x43, 0x28, 0xb5, 0x6e},
    {0x67, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x46, 0xc2, 0xb5, 0xaf},
    {0xc9, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x28, 0xb5, 0x6e},
    {0x13, 0x41, 0xc2, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x63, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x28, 0xb5, 0x6e},
    {0x02, 0x43, 0x28, 0xb5, 0x6e},
    {0x07, 0x43, 0x28, 0xb5, 0x6e},
    {0x6d, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x31, 0xb5, 0x7f},
    {0x0b, 0x43, 0x31, 0xf5, 0x7f},
    {0x05, 0x41, 0x31, 0xb5, 0x7f},
    {0x75, 0x03, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x31, 0xf5, 0x7f},
    {0xc7, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x31, 0xb5, 0x7f},
    {0x63, 0x03, 0x82, 0xb5, 0xaf},
    {0x82, 0x82, 0x82, 0xb5, 0x0f},
    {0x73, 0x03, 0x82, 0xb5, 0xaf},
    {0x0f, 0x46, 0xc2, 0xb5, 0xaf},
    {0x7f, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x31, 0xb5, 0x7f},
    {0x02, 0x41, 0x31, 0xb5, 0x7f},
    {0x07, 0x41, 0x31, 0xb5, 0x7f},
    {0x0d, 0x46, 0xc2, 0xb5, 0xaf},
    {0x03, 0x42, 0x28, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x28, 0xb5, 0x6e},
    {0x6b, 0x03, 0x82, 0xb5, 0xaf},
    {0x11, 0x46, 0xc2, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x28, 0xb5, 0x6e},
    {0x01, 0x46, 0xc2, 0xb5, 0xaf},
    {0x08, 0x43, 0x31, 0xf5, 0x7f},
    {0xc3, 0x68, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0x82, 0xb5, 0x0f},
    {0x0a, 0x43, 0x31, 0xf5, 0x7f},
    {0x04, 0x42, 0x28, 0xb5, 0x6e},
    {0x02, 0x42, 0x28, 0xb5, 0x6e},
    {0x07, 0x42, 0x28, 0xb5, 0x6e},
    {0x5d, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x46, 0x09, 0x03, 0x8f},
    {0x0b, 0x41, 0x09, 0x43, 0x8f},
    {0x05, 0x46, 0x09, 0x03, 0x8f},
    {0x0c, 0x43, 0x49, 0x03, 0x8f},
    {0x09, 0x41, 0x09, 0x43, 0x8f},
    {0xda, 0x50, 0x01, 0xb5, 0xff},
    {0x06, 0x46, 0x09, 0x03, 0x8f},
    {0x61, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x73, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x82, 0xb5, 0xaf},
    {0x0e, 0x43, 0x49, 0x03, 0x8f},
    {0x7d, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x46, 0x09, 0x03, 0x8f},
    {0x02, 0x46, 0x09, 0x03, 0x8f},
    {0x07, 0x46, 0x09, 0x03, 0x8f},
    {0x6f, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x01, 0x6f},
    {0x7b, 0x03, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x01, 0x6f},
    {0x69, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x43, 0x49, 0x03, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x01, 0x6f},
    {0x5f, 0x03, 0x82, 0xb5, 0xaf},
    {0x08, 0x41, 0x09, 0x43, 0x8f},
    {0x79, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x73, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x09, 0x43, 0x8f},
    {0x04, 0x43, 0x10, 0x01, 0x6f},
    {0x02, 0x43, 0x10, 0x01, 0x6f},
    {0x07, 0x43, 0x10, 0x01, 0x6f},
    {0x16, 0x41, 0xc2, 0xf5, 0xaf},
    {0x03, 0x44, 0x31, 0xb5, 0x7f},
    {0x0b, 0x42, 0x31, 0xf5, 0x7f},
    {0x05, 0x44, 0x31, 0xb5, 0x7f},
    {0x1a, 0x41, 0xc2, 0xf5, 0xaf},
    {0x09, 0x42, 0x31, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x31, 0xb5, 0x7f},
    {0x65, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x46, 0xf5, 0xff},
    {0x19, 0x41, 0xc2, 0xf5, 0xaf},
    {0x0f, 0x43, 0x49, 0x03, 0x8f},
    {0xc5, 0x49, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x31, 0xb5, 0x7f},
    {0x02, 0x44, 0x31, 0xb5, 0x7f},
    {0x07, 0x44, 0x31, 0xb5, 0x7f},
    {0x0d, 0x43, 0x49, 0x03, 0x8f},
    {0x03, 0x42, 0x10, 0x01, 0x6f},
    {0x12, 0x41, 0xc2, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x01, 0x6f},
    {0x15, 0x41, 0xc2, 0xf5, 0xaf},
    {0x11, 0x43, 0x49, 0x03, 0x8f},
    {0xc4, 0x71, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x01, 0x6f},
    {0x01, 0x43, 0x49, 0x03, 0x8f},
    {0x08, 0x42, 0x31, 0xf5, 0x7f},
    {0xc3, 0x50, 0x01, 0xb5, 0xff},
    {0xc1, 0x0f, 0x46, 0xf5, 0xff},
    {0x0a, 0x42, 0x31, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x01, 0x6f},
    {0x02, 0x42, 0x10, 0x01, 0x6f},
    {0x07, 0x42, 0x10, 0x01, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8d, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7f, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8d, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8d, 0xb5, 0x6f},
    {0x68, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8d, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x7f, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8d, 0xb5, 0x6f},
    {0x02, 0x43, 0x8d, 0xb5, 0x6f},
    {0x07, 0x43, 0x8d, 0xb5, 0x6f},
    {0x6e, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x0e, 0x03, 0x7f},
    {0x0b, 0x43, 0x0e, 0x43, 0x7f},
    {0x05, 0x41, 0x0e, 0x03, 0x7f},
    {0x76, 0x03, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x0e, 0x43, 0x7f},
    {0xc8, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x0e, 0x03, 0x7f},
    {0x64, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x82, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x0e, 0x03, 0x7f},
    {0x02, 0x41, 0x0e, 0x03, 0x7f},
    {0x07, 0x41, 0x0e, 0x03, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8d, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8d, 0xb5, 0x6f},
    {0x6c, 0x03, 0x82, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8d, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0e, 0x43, 0x7f},
    {0x83, 0x8d, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0x43, 0x7f},
    {0x04, 0x42, 0x8d, 0xb5, 0x6f},
    {0x02, 0x42, 0x8d, 0xb5, 0x6f},
    {0x07, 0x42, 0x8d, 0xb5, 0x6f},
    {0x5e, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x45, 0x09, 0x03, 0x8f},
    {0x0b, 0x44, 0x09, 0x43, 0x8f},
    {0x05, 0x45, 0x09, 0x03, 0x8f},
    {0x0c, 0x42, 0x49, 0x03, 0x8f},
    {0x09, 0x44, 0x09, 0x43, 0x8f},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0x03, 0x8f},
    {0x62, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x82, 0xb5, 0xaf},
    {0x0e, 0x42, 0x49, 0x03, 0x8f},
    {0x7e, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x45, 0x09, 0x03, 0x8f},
    {0x02, 0x45, 0x09, 0x03, 0x8f},
    {0x07, 0x45, 0x09, 0x03, 0x8f},
    {0x70, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x42, 0x49, 0x03, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x82, 0xb5, 0xaf},
    {0x08, 0x44, 0x09, 0x43, 0x8f},
    {0x7a, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0x43, 0x8f},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0e, 0x03, 0x7f},
    {0x0b, 0x42, 0x0e, 0x43, 0x7f},
    {0x05, 0x44, 0x0e, 0x03, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0e, 0x43, 0x7f},
    {0xca, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0e, 0x03, 0x7f},
    {0x66, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x49, 0x03, 0x8f},
    {0xc6, 0x49, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x0e, 0x03, 0x7f},
    {0x02, 0x44, 0x0e, 0x03, 0x7f},
    {0x07, 0x44, 0x0e, 0x03, 0x7f},
    {0x0d, 0x42, 0x49, 0x03, 0x8f},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x49, 0x03, 0x8f},
    {0xc4, 0x4e, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0x03, 0x8f},
    {0x08, 0x42, 0x0e, 0x43, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0x43, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xb4, 0x82, 0xb5, 0x00, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x53, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x46, 0xf5, 0xff},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0x03, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0x03, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x13, 0x03, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x46, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x13, 0x03, 0x6f},
    {0x02, 0x43, 0x13, 0x03, 0x6f},
    {0x07, 0x43, 0x13, 0x03, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3d, 0xf5, 0x7f},
    {0x05, 0x41, 0x3d, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3d, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3d, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3d, 0xb5, 0x7f},
    {0x02, 0x41, 0x3d, 0xb5, 0x7f},
    {0x07, 0x41, 0x3d, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0x03, 0x6f},
    {0xd7, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x13, 0x03, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x13, 0x03, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3d, 0xf5, 0x7f},
    {0xc3, 0x53, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3d, 0xf5, 0x7f},
    {0x04, 0x42, 0x13, 0x03, 0x6f},
    {0x02, 0x42, 0x13, 0x03, 0x6f},
    {0x07, 0x42, 0x13, 0x03, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x46, 0xf5, 0xff},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x98, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x06, 0x6f},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x06, 0x6f},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x06, 0x6f},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x98, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x06, 0x6f},
    {0x02, 0x43, 0x08, 0x06, 0x6f},
    {0x07, 0x43, 0x08, 0x06, 0x6f},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3d, 0xf5, 0x7f},
    {0x05, 0x44, 0x3d, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3d, 0xf5, 0x7f},
    {0xcb, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x3d, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3d, 0xb5, 0x7f},
    {0x02, 0x44, 0x3d, 0xb5, 0x7f},
    {0x07, 0x44, 0x3d, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x06, 0x6f},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x06, 0x6f},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x06, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3d, 0xf5, 0x7f},
    {0xc3, 0x08, 0x46, 0xf5, 0xff},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3d, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x06, 0x6f},
    {0x02, 0x42, 0x08, 0x06, 0x6f},
    {0x07, 0x42, 0x08, 0x06, 0x6f},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x82, 0xb5, 0xaf},
    {0x0b, 0x46, 0x05, 0x43, 0x9f},
    {0x05, 0x48, 0x82, 0xb5, 0xaf},
    {0x0c, 0x41, 0x45, 0x03, 0x9f},
    {0x09, 0x46, 0x05, 0x43, 0x9f},
    {0xda, 0x78, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x82, 0xb5, 0xaf},
    {0x14, 0x43, 0x45, 0x43, 0x9f},
    {0xc2, 0x6b, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x45, 0x43, 0x9f},
    {0x0e, 0x41, 0x45, 0x03, 0x9f},
    {0x1c, 0x43, 0x45, 0x43, 0x9f},
    {0x04, 0x48, 0x82, 0xb5, 0xaf},
    {0x02, 0x48, 0x82, 0xb5, 0xaf},
    {0x07, 0x48, 0x82, 0xb5, 0xaf},
    {0x17, 0x43, 0x45, 0x43, 0x9f},
    {0x03, 0x43, 0x38, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0x43, 0x9f},
    {0x05, 0x43, 0x38, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0x03, 0x9f},
    {0xcd, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x38, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0x43, 0x9f},
    {0x08, 0x46, 0x05, 0x43, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x05, 0x43, 0x9f},
    {0x04, 0x43, 0x38, 0xb5, 0x6e},
    {0x02, 0x43, 0x38, 0xb5, 0x6e},
    {0x07, 0x43, 0x38, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x06, 0x7f},
    {0x0b, 0x43, 0x04, 0x46, 0x7f},
    {0x05, 0x41, 0x04, 0x06, 0x7f},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x46, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x06, 0x7f},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x46, 0xf5, 0xff},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0x03, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x06, 0x7f},
    {0x02, 0x41, 0x04, 0x06, 0x7f},
    {0x07, 0x41, 0x04, 0x06, 0x7f},
    {0x0d, 0x41, 0x45, 0x03, 0x9f},
    {0x03, 0x42, 0x38, 0xb5, 0x6e},
    {0xd9, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x38, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0x03, 0x9f},
    {0xd5, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x38, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x46, 0x7f},
    {0xc3, 0x78, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x46, 0xf5, 0xff},
    {0x0a, 0x43, 0x04, 0x46, 0x7f},
    {0x04, 0x42, 0x38, 0xb5, 0x6e},
    {0x02, 0x42, 0x38, 0xb5, 0x6e},
    {0x07, 0x42, 0x38, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x94, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x94, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x06, 0x7f},
    {0x0b, 0x42, 0x04, 0x46, 0x7f},
    {0x05, 0x44, 0x04, 0x06, 0x7f},
    {0x1a, 0x43, 0x45, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x46, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x06, 0x7f},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0x43, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x06, 0x7f},
    {0x02, 0x44, 0x04, 0x06, 0x7f},
    {0x07, 0x44, 0x04, 0x06, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0x43, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x46, 0x7f},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x46, 0x7f},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x82, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xc2, 0xb5, 0xaf},
    {0x09, 0x47, 0x82, 0xf5, 0xaf},
    {0xda, 0x0a, 0x46, 0xf5, 0xff},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xc2, 0xf5, 0xaf},
    {0xc2, 0x01, 0x46, 0xf5, 0xff},
    {0x18, 0x44, 0xc2, 0xf5, 0xaf},
    {0x0e, 0x45, 0xc2, 0xb5, 0xaf},
    {0x1c, 0x44, 0xc2, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xc2, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x06, 0x6f},
    {0x1b, 0x44, 0xc2, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x06, 0x6f},
    {0x67, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x45, 0xc2, 0xb5, 0xaf},
    {0xc9, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x06, 0x6f},
    {0x13, 0x44, 0xc2, 0xf5, 0xaf},
    {0x08, 0x47, 0x82, 0xf5, 0xaf},
    {0x77, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x01, 0x46, 0xf5, 0xff},
    {0x0a, 0x47, 0x82, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x06, 0x6f},
    {0x02, 0x43, 0x0a, 0x06, 0x6f},
    {0x07, 0x43, 0x0a, 0x06, 0x6f},
    {0x6d, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x06, 0x7f},
    {0x0b, 0x43, 0x02, 0x46, 0x7f},
    {0x05, 0x41, 0x02, 0x06, 0x7f},
    {0x75, 0x02, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x46, 0x7f},
    {0xc7, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x06, 0x7f},
    {0x63, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x82, 0xb5, 0xaf},
    {0x0f, 0x45, 0xc2, 0xb5, 0xaf},
    {0x7f, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x06, 0x7f},
    {0x02, 0x41, 0x02, 0x06, 0x7f},
    {0x07, 0x41, 0x02, 0x06, 0x7f},
    {0x0d, 0x45, 0xc2, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x06, 0x6f},
    {0xd8, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x06, 0x6f},
    {0x6b, 0x02, 0x82, 0xb5, 0xaf},
    {0x11, 0x45, 0xc2, 0xb5, 0xaf},
    {0xd4, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x06, 0x6f},
    {0x01, 0x45, 0xc2, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x46, 0x7f},
    {0xc3, 0x0a, 0x46, 0xf5, 0xff},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x46, 0x7f},
    {0x04, 0x42, 0x0a, 0x06, 0x6f},
    {0x02, 0x42, 0x0a, 0x06, 0x6f},
    {0x07, 0x42, 0x0a, 0x06, 0x6f},
    {0x5d, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x01, 0x8f},
    {0x0b, 0x41, 0x06, 0x41, 0x8f},
    {0x05, 0x46, 0x06, 0x01, 0x8f},
    {0x0c, 0x43, 0x46, 0x01, 0x8f},
    {0x09, 0x41, 0x06, 0x41, 0x8f},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x01, 0x8f},
    {0x61, 0x02, 0x82, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x82, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x01, 0x8f},
    {0x7d, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x01, 0x8f},
    {0x02, 0x46, 0x06, 0x01, 0x8f},
    {0x07, 0x46, 0x06, 0x01, 0x8f},
    {0x6f, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x01, 0x8f},
    {0xd0, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x82, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x41, 0x8f},
    {0x79, 0x02, 0x82, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0xc2, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x06, 0x7f},
    {0x0b, 0x42, 0x02, 0x46, 0x7f},
    {0x05, 0x44, 0x02, 0x06, 0x7f},
    {0x1a, 0x44, 0xc2, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x46, 0x7f},
    {0xcc, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x06, 0x7f},
    {0x65, 0x02, 0x82, 0xb5, 0xaf},
    {0x82, 0x81, 0x82, 0xb5, 0x0f},
    {0x19, 0x44, 0xc2, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x01, 0x8f},
    {0xc5, 0x46, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x06, 0x7f},
    {0x02, 0x44, 0x02, 0x06, 0x7f},
    {0x07, 0x44, 0x02, 0x06, 0x7f},
    {0x0d, 0x43, 0x46, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0xc2, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0xc2, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x01, 0x8f},
    {0xc4, 0x02, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x01, 0x8f},
    {0x08, 0x42, 0x02, 0x46, 0x7f},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0x81, 0x81, 0x82, 0xb5, 0x0f},
    {0x0a, 0x42, 0x02, 0x46, 0x7f},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0x03, 0x9f},
    {0x0b, 0x45, 0x05, 0x43, 0x9f},
    {0x05, 0x47, 0x05, 0x03, 0x9f},
    {0x0c, 0x44, 0x45, 0x03, 0x9f},
    {0x09, 0x45, 0x05, 0x43, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0x03, 0x9f},
    {0x14, 0x42, 0x45, 0x43, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0x43, 0x9f},
    {0x0e, 0x44, 0x45, 0x03, 0x9f},
    {0x1c, 0x42, 0x45, 0x43, 0x9f},
    {0x04, 0x47, 0x05, 0x03, 0x9f},
    {0x02, 0x47, 0x05, 0x03, 0x9f},
    {0x07, 0x47, 0x05, 0x03, 0x9f},
    {0x17, 0x42, 0x45, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x44, 0x45, 0x03, 0x9f},
    {0xce, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0x43, 0x9f},
    {0x08, 0x45, 0x05, 0x43, 0x9f},
    {0x78, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x06, 0x7f},
    {0x0b, 0x43, 0x07, 0x46, 0x7f},
    {0x05, 0x41, 0x07, 0x06, 0x7f},
    {0x76, 0x02, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x46, 0x7f},
    {0xc8, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x06, 0x7f},
    {0x64, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x82, 0xb5, 0xaf},
    {0x0f, 0x44, 0x45, 0x03, 0x9f},
    {0x40, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x06, 0x7f},
    {0x02, 0x41, 0x07, 0x06, 0x7f},
    {0x07, 0x41, 0x07, 0x06, 0x7f},
    {0x0d, 0x44, 0x45, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x82, 0xb5, 0xaf},
    {0x11, 0x44, 0x45, 0x03, 0x9f},
    {0xd6, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x46, 0x7f},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x46, 0x7f},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x01, 0x8f},
    {0x0b, 0x44, 0x06, 0x41, 0x8f},
    {0x05, 0x45, 0x06, 0x01, 0x8f},
    {0x0c, 0x42, 0x46, 0x01, 0x8f},
    {0x09, 0x44, 0x06, 0x41, 0x8f},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x01, 0x8f},
    {0x62, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x82, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x01, 0x8f},
    {0x7e, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x01, 0x8f},
    {0x02, 0x45, 0x06, 0x01, 0x8f},
    {0x07, 0x45, 0x06, 0x01, 0x8f},
    {0x70, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x01, 0x8f},
    {0xd2, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x82, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x41, 0x8f},
    {0x7a, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x06, 0x7f},
    {0x0b, 0x42, 0x07, 0x46, 0x7f},
    {0x05, 0x44, 0x07, 0x06, 0x7f},
    {0x1a, 0x42, 0x45, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x46, 0x7f},
    {0xca, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x06, 0x7f},
    {0x66, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0x43, 0x9f},
    {0x0f, 0x42, 0x46, 0x01, 0x8f},
    {0xc6, 0x46, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x06, 0x7f},
    {0x02, 0x44, 0x07, 0x06, 0x7f},
    {0x07, 0x44, 0x07, 0x06, 0x7f},
    {0x0d, 0x42, 0x46, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0x43, 0x9f},
    {0x11, 0x42, 0x46, 0x01, 0x8f},
    {0xc4, 0x07, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x01, 0x8f},
    {0x08, 0x42, 0x07, 0x46, 0x7f},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x46, 0x7f},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4b, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0x03, 0xf5, 0xff},
    {0x18, 0x4b, 0xf5, 0x40, 0xee},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4b, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2e, 0xb5, 0x6e},
    {0x1b, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2e, 0xb5, 0x6e},
    {0x67, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2e, 0xb5, 0x6e},
    {0x13, 0x4b, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2e, 0xb5, 0x6e},
    {0x02, 0x43, 0x2e, 0xb5, 0x6e},
    {0x07, 0x43, 0x2e, 0xb5, 0x6e},
    {0x6d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x2f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2f, 0xf5, 0x7f},
    {0x05, 0x41, 0x2f, 0xb5, 0x7f},
    {0x75, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x2f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2f, 0xb5, 0x7f},
    {0x63, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x2f, 0xb5, 0x7f},
    {0x02, 0x41, 0x2f, 0xb5, 0x7f},
    {0x07, 0x41, 0x2f, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x2e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2e, 0xb5, 0x6e},
    {0x6b, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2f, 0xf5, 0x7f},
    {0xc3, 0x6e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x2f, 0xf5, 0x7f},
    {0x04, 0x42, 0x2e, 0xb5, 0x6e},
    {0x02, 0x42, 0x2e, 0xb5, 0x6e},
    {0x07, 0x42, 0x2e, 0xb5, 0x6e},
    {0x5d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x2f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2f, 0xf5, 0x7f},
    {0x05, 0x44, 0x2f, 0xb5, 0x7f},
    {0x1a, 0x4b, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x2f, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2f, 0xb5, 0x7f},
    {0x65, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4b, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2f, 0xb5, 0x7f},
    {0x02, 0x44, 0x2f, 0xb5, 0x7f},
    {0x07, 0x44, 0x2f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4b, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2f, 0xf5, 0x7f},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x2f, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x08, 0xb5, 0x00, 0xee},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x08, 0xb5, 0x00, 0xee},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x76, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x36, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x36, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x36, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0x03, 0xf5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x36, 0xb5, 0x6e},
    {0x02, 0x43, 0x36, 0xb5, 0x6e},
    {0x07, 0x43, 0x36, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x3b, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3b, 0xf5, 0x7f},
    {0x05, 0x41, 0x3b, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x3b, 0xf5, 0x7f},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x3b, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x3b, 0xb5, 0x7f},
    {0x02, 0x41, 0x3b, 0xb5, 0x7f},
    {0x07, 0x41, 0x3b, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x36, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x36, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x36, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x3b, 0xf5, 0x7f},
    {0xc3, 0x76, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x3b, 0xf5, 0x7f},
    {0x04, 0x42, 0x36, 0xb5, 0x6e},
    {0x02, 0x42, 0x36, 0xb5, 0x6e},
    {0x07, 0x42, 0x36, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x3b, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3b, 0xf5, 0x7f},
    {0x05, 0x44, 0x3b, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x3b, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3b, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x3b, 0xb5, 0x7f},
    {0x02, 0x44, 0x3b, 0xb5, 0x7f},
    {0x07, 0x44, 0x3b, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x7b, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x3b, 0xf5, 0x7f},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3b, 0xf5, 0x7f},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x88, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x88, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x88, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x88, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x88, 0xb5, 0x6e},
    {0x02, 0x43, 0x88, 0xb5, 0x6e},
    {0x07, 0x43, 0x88, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x88, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x88, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x88, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x88, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x88, 0xb5, 0x6e},
    {0x02, 0x42, 0x88, 0xb5, 0x6e},
    {0x07, 0x42, 0x88, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x64, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x6f, 0x03, 0xf5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x24, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x24, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x24, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6f, 0x03, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x24, 0xb5, 0x6e},
    {0x02, 0x43, 0x24, 0xb5, 0x6e},
    {0x07, 0x43, 0x24, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x29, 0xb5, 0x7f},
    {0x0b, 0x43, 0x29, 0xf5, 0x7f},
    {0x05, 0x41, 0x29, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x29, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x29, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x29, 0xb5, 0x7f},
    {0x02, 0x41, 0x29, 0xb5, 0x7f},
    {0x07, 0x41, 0x29, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x24, 0xb5, 0x6e},
    {0xd7, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x24, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x24, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x29, 0xf5, 0x7f},
    {0xc3, 0x64, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x29, 0xf5, 0x7f},
    {0x04, 0x42, 0x24, 0xb5, 0x6e},
    {0x02, 0x42, 0x24, 0xb5, 0x6e},
    {0x07, 0x42, 0x24, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7b, 0x03, 0xf5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7b, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x29, 0xb5, 0x7f},
    {0x0b, 0x42, 0x29, 0xf5, 0x7f},
    {0x05, 0x44, 0x29, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x29, 0xf5, 0x7f},
    {0xcb, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x29, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x29, 0xb5, 0x7f},
    {0x02, 0x44, 0x29, 0xb5, 0x7f},
    {0x07, 0x44, 0x29, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x69, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x29, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x29, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x10, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x50, 0xb5, 0x9f},
    {0x09, 0x46, 0x10, 0xf5, 0x9f},
    {0xda, 0x74, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x50, 0xf5, 0x9f},
    {0xc2, 0x69, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x50, 0xf5, 0x9f},
    {0x0e, 0x41, 0x50, 0xb5, 0x9f},
    {0x1c, 0x43, 0x50, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x50, 0xf5, 0x9f},
    {0x03, 0x43, 0x34, 0xb5, 0x6e},
    {0x1b, 0x43, 0x50, 0xf5, 0x9f},
    {0x05, 0x43, 0x34, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x50, 0xb5, 0x9f},
    {0xcd, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x34, 0xb5, 0x6e},
    {0x13, 0x43, 0x50, 0xf5, 0x9f},
    {0x08, 0x46, 0x10, 0xf5, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x69, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x10, 0xf5, 0x9f},
    {0x04, 0x43, 0x34, 0xb5, 0x6e},
    {0x02, 0x43, 0x34, 0xb5, 0x6e},
    {0x07, 0x43, 0x34, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x10, 0x03, 0x7f},
    {0x0b, 0x43, 0x10, 0x43, 0x7f},
    {0x05, 0x41, 0x10, 0x03, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x10, 0x43, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x10, 0x03, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x50, 0xb5, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x10, 0x03, 0x7f},
    {0x02, 0x41, 0x10, 0x03, 0x7f},
    {0x07, 0x41, 0x10, 0x03, 0x7f},
    {0x0d, 0x41, 0x50, 0xb5, 0x9f},
    {0x03, 0x42, 0x34, 0xb5, 0x6e},
    {0xd9, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x34, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x50, 0xb5, 0x9f},
    {0xd5, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x34, 0xb5, 0x6e},
    {0x01, 0x41, 0x50, 0xb5, 0x9f},
    {0x08, 0x43, 0x10, 0x43, 0x7f},
    {0xc3, 0x74, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0x43, 0x7f},
    {0x04, 0x42, 0x34, 0xb5, 0x6e},
    {0x02, 0x42, 0x34, 0xb5, 0x6e},
    {0x07, 0x42, 0x34, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x01, 0xb5, 0xff},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x90, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0x01, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0x01, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0f, 0x01, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x90, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x01, 0x6f},
    {0x02, 0x43, 0x0f, 0x01, 0x6f},
    {0x07, 0x43, 0x0f, 0x01, 0x6f},
    {0x16, 0x43, 0x50, 0xf5, 0x9f},
    {0x03, 0x44, 0x10, 0x03, 0x7f},
    {0x0b, 0x42, 0x10, 0x43, 0x7f},
    {0x05, 0x44, 0x10, 0x03, 0x7f},
    {0x1a, 0x43, 0x50, 0xf5, 0x9f},
    {0x09, 0x42, 0x10, 0x43, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x10, 0x03, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x50, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x10, 0x03, 0x7f},
    {0x02, 0x44, 0x10, 0x03, 0x7f},
    {0x07, 0x44, 0x10, 0x03, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x01, 0x6f},
    {0x12, 0x43, 0x50, 0xf5, 0x9f},
    {0x05, 0x42, 0x0f, 0x01, 0x6f},
    {0x15, 0x43, 0x50, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x50, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x01, 0x6f},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x10, 0x43, 0x7f},
    {0xc3, 0x4f, 0x01, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x10, 0x43, 0x7f},
    {0x04, 0x42, 0x0f, 0x01, 0x6f},
    {0x02, 0x42, 0x0f, 0x01, 0x6f},
    {0x07, 0x42, 0x0f, 0x01, 0x6f},
    {0xf4, 0x50, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x40, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0x03, 0xf5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x00, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x00, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x00, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0x03, 0xf5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x00, 0xb5, 0x6e},
    {0x02, 0x43, 0x00, 0xb5, 0x6e},
    {0x07, 0x43, 0x00, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x00, 0xb5, 0x6e},
    {0xd8, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x00, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x00, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x40, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x00, 0xb5, 0x6e},
    {0x02, 0x42, 0x00, 0xb5, 0x6e},
    {0x07, 0x42, 0x00, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0f, 0xf5, 0x8e},
    {0x05, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4f, 0xb5, 0x8e},
    {0x09, 0x41, 0x0f, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0f, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4f, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0f, 0xb5, 0x8e},
    {0x02, 0x46, 0x0f, 0xb5, 0x8e},
    {0x07, 0x46, 0x0f, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4f, 0xb5, 0x8e},
    {0xd0, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0f, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4f, 0xb5, 0x8e},
    {0xc5, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4f, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x10, 0xb5, 0x9f},
    {0x0b, 0x45, 0x10, 0xf5, 0x9f},
    {0x05, 0x47, 0x10, 0xb5, 0x9f},
    {0x0c, 0x44, 0x50, 0xb5, 0x9f},
    {0x09, 0x45, 0x10, 0xf5, 0x9f},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x10, 0xb5, 0x9f},
    {0x14, 0x42, 0x50, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x50, 0xf5, 0x9f},
    {0x0e, 0x44, 0x50, 0xb5, 0x9f},
    {0x1c, 0x42, 0x50, 0xf5, 0x9f},
    {0x04, 0x47, 0x10, 0xb5, 0x9f},
    {0x02, 0x47, 0x10, 0xb5, 0x9f},
    {0x07, 0x47, 0x10, 0xb5, 0x9f},
    {0x17, 0x42, 0x50, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x50, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x50, 0xb5, 0x9f},
    {0xce, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x50, 0xf5, 0x9f},
    {0x08, 0x45, 0x10, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x10, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x50, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x50, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x50, 0xb5, 0x9f},
    {0xd6, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x50, 0xb5, 0x9f},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0f, 0xf5, 0x8e},
    {0x05, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4f, 0xb5, 0x8e},
    {0x09, 0x44, 0x0f, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0f, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4f, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0f, 0xb5, 0x8e},
    {0x02, 0x45, 0x0f, 0xb5, 0x8e},
    {0x07, 0x45, 0x0f, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4f, 0xb5, 0x8e},
    {0xd2, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0f, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x50, 0xf5, 0x9f},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x50, 0xf5, 0x9f},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x50, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc6, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x50, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x50, 0xf5, 0x9f},
    {0x11, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0x01, 0xb5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x01, 0xb5, 0xff},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x01, 0x6f},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x01, 0x6f},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0x01, 0x6f},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x01, 0xb5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0x01, 0x6f},
    {0x02, 0x43, 0x0d, 0x01, 0x6f},
    {0x07, 0x43, 0x0d, 0x01, 0x6f},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x1f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1f, 0xf5, 0x7f},
    {0x05, 0x41, 0x1f, 0xb5, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x1f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1f, 0xb5, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x1f, 0xb5, 0x7f},
    {0x02, 0x41, 0x1f, 0xb5, 0x7f},
    {0x07, 0x41, 0x1f, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0x01, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0x01, 0x6f},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0x01, 0x6f},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1f, 0xf5, 0x7f},
    {0xc3, 0x4d, 0x01, 0xb5, 0xff},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x1f, 0xf5, 0x7f},
    {0x04, 0x42, 0x0d, 0x01, 0x6f},
    {0x02, 0x42, 0x0d, 0x01, 0x6f},
    {0x07, 0x42, 0x0d, 0x01, 0x6f},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x1f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1f, 0xf5, 0x7f},
    {0x05, 0x44, 0x1f, 0xb5, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x1f, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1f, 0xb5, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1f, 0xb5, 0x7f},
    {0x02, 0x44, 0x1f, 0xb5, 0x7f},
    {0x07, 0x44, 0x1f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1f, 0xf5, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x1f, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x99, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0x01, 0xb5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x99, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x99, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x99, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x01, 0xb5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x99, 0xb5, 0x6f},
    {0x02, 0x43, 0x99, 0xb5, 0x6f},
    {0x07, 0x43, 0x99, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x01, 0x7f},
    {0x0b, 0x43, 0x08, 0x41, 0x7f},
    {0x05, 0x41, 0x08, 0x01, 0x7f},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x41, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0x01, 0x7f},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x01, 0x7f},
    {0x02, 0x41, 0x08, 0x01, 0x7f},
    {0x07, 0x41, 0x08, 0x01, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x99, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x99, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x99, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0x41, 0x7f},
    {0x83, 0x99, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x41, 0x7f},
    {0x04, 0x42, 0x99, 0xb5, 0x6f},
    {0x02, 0x42, 0x99, 0xb5, 0x6f},
    {0x07, 0x42, 0x99, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8c, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8c, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0x01, 0x7f},
    {0x0b, 0x42, 0x08, 0x41, 0x7f},
    {0x05, 0x44, 0x08, 0x01, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0x41, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0x01, 0x7f},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0x01, 0x7f},
    {0x02, 0x44, 0x08, 0x01, 0x7f},
    {0x07, 0x44, 0x08, 0x01, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0x41, 0x7f},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x41, 0x7f},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6c, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x65, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x2c, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x2c, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x2c, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x65, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2c, 0xb5, 0x6e},
    {0x02, 0x43, 0x2c, 0xb5, 0x6e},
    {0x07, 0x43, 0x2c, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x39, 0xb5, 0x7f},
    {0x0b, 0x43, 0x39, 0xf5, 0x7f},
    {0x05, 0x41, 0x39, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x39, 0xf5, 0x7f},
    {0xc7, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x39, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x39, 0xb5, 0x7f},
    {0x02, 0x41, 0x39, 0xb5, 0x7f},
    {0x07, 0x41, 0x39, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x2c, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2c, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2c, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x39, 0xf5, 0x7f},
    {0xc3, 0x6c, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x39, 0xf5, 0x7f},
    {0x04, 0x42, 0x2c, 0xb5, 0x6e},
    {0x02, 0x42, 0x2c, 0xb5, 0x6e},
    {0x07, 0x42, 0x2c, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x04, 0x01, 0x8f},
    {0x0b, 0x41, 0x04, 0x41, 0x8f},
    {0x05, 0x46, 0x04, 0x01, 0x8f},
    {0x0c, 0x43, 0x44, 0x01, 0x8f},
    {0x09, 0x41, 0x04, 0x41, 0x8f},
    {0xda, 0x51, 0x01, 0xb5, 0xff},
    {0x06, 0x46, 0x04, 0x01, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x59, 0x01, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x44, 0x01, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x04, 0x01, 0x8f},
    {0x02, 0x46, 0x04, 0x01, 0x8f},
    {0x07, 0x46, 0x04, 0x01, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x11, 0x01, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x11, 0x01, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x44, 0x01, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0x01, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x04, 0x41, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x59, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x04, 0x41, 0x8f},
    {0x04, 0x43, 0x11, 0x01, 0x6f},
    {0x02, 0x43, 0x11, 0x01, 0x6f},
    {0x07, 0x43, 0x11, 0x01, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x39, 0xb5, 0x7f},
    {0x0b, 0x42, 0x39, 0xf5, 0x7f},
    {0x05, 0x44, 0x39, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x39, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x39, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x44, 0x01, 0x8f},
    {0xc5, 0x44, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x39, 0xb5, 0x7f},
    {0x02, 0x44, 0x39, 0xb5, 0x7f},
    {0x07, 0x44, 0x39, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0x01, 0x8f},
    {0x03, 0x42, 0x11, 0x01, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x11, 0x01, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x44, 0x01, 0x8f},
    {0xc4, 0x79, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0x01, 0x6f},
    {0x01, 0x43, 0x44, 0x01, 0x8f},
    {0x08, 0x42, 0x39, 0xf5, 0x7f},
    {0xc3, 0x51, 0x01, 0xb5, 0xff},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x39, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0x01, 0x6f},
    {0x02, 0x42, 0x11, 0x01, 0x6f},
    {0x07, 0x42, 0x11, 0x01, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x95, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x95, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x95, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x95, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x95, 0xb5, 0x6f},
    {0x02, 0x43, 0x95, 0xb5, 0x6f},
    {0x07, 0x43, 0x95, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x95, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x95, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x95, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x95, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x95, 0xb5, 0x6f},
    {0x02, 0x42, 0x95, 0xb5, 0x6f},
    {0x07, 0x42, 0x95, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x04, 0x01, 0x8f},
    {0x0b, 0x44, 0x04, 0x41, 0x8f},
    {0x05, 0x45, 0x04, 0x01, 0x8f},
    {0x0c, 0x42, 0x44, 0x01, 0x8f},
    {0x09, 0x44, 0x04, 0x41, 0x8f},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x01, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x44, 0x01, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x04, 0x01, 0x8f},
    {0x02, 0x45, 0x04, 0x01, 0x8f},
    {0x07, 0x45, 0x04, 0x01, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x44, 0x01, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x04, 0x41, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x41, 0x8f},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0x01, 0x8f},
    {0xc6, 0x44, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x01, 0x8f},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0x01, 0x8f},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x01, 0x8f},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x01, 0xb5, 0xff},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0x01, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0x01, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x01, 0x01, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x01, 0x6f},
    {0x02, 0x43, 0x01, 0x01, 0x6f},
    {0x07, 0x43, 0x01, 0x01, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0x01, 0x7f},
    {0x0b, 0x43, 0x0a, 0x41, 0x7f},
    {0x05, 0x41, 0x0a, 0x01, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0x41, 0x7f},
    {0xc7, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x0a, 0x01, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0x01, 0x7f},
    {0x02, 0x41, 0x0a, 0x01, 0x7f},
    {0x07, 0x41, 0x0a, 0x01, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0x01, 0x6f},
    {0xd7, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x01, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x01, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0x41, 0x7f},
    {0xc3, 0x41, 0x01, 0xb5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0x41, 0x7f},
    {0x04, 0x42, 0x01, 0x01, 0x6f},
    {0x02, 0x42, 0x01, 0x01, 0x6f},
    {0x07, 0x42, 0x01, 0x01, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0x01, 0x8f},
    {0x0b, 0x41, 0x02, 0x41, 0x8f},
    {0x05, 0x46, 0x02, 0x01, 0x8f},
    {0x0c, 0x43, 0x42, 0x01, 0x8f},
    {0x09, 0x41, 0x02, 0x41, 0x8f},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x01, 0x8f},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0x01, 0xb5, 0xff},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0x01, 0x8f},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0x01, 0x8f},
    {0x02, 0x46, 0x02, 0x01, 0x8f},
    {0x07, 0x46, 0x02, 0x01, 0x8f},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0x01, 0x8f},
    {0xcf, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0x41, 0x8f},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x02, 0x41, 0x8f},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0x01, 0x7f},
    {0x0b, 0x42, 0x0a, 0x41, 0x7f},
    {0x05, 0x44, 0x0a, 0x01, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0x41, 0x7f},
    {0xcb, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x01, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0x01, 0x8f},
    {0xc5, 0x42, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x0a, 0x01, 0x7f},
    {0x02, 0x44, 0x0a, 0x01, 0x7f},
    {0x07, 0x44, 0x0a, 0x01, 0x7f},
    {0x0d, 0x43, 0x42, 0x01, 0x8f},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0x01, 0x8f},
    {0xc4, 0x4a, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0x01, 0x8f},
    {0x08, 0x42, 0x0a, 0x41, 0x7f},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0x41, 0x7f},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x06, 0x43, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x46, 0x03, 0x9f},
    {0x09, 0x46, 0x06, 0x43, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x46, 0x43, 0x9f},
    {0xc2, 0x55, 0x01, 0xb5, 0xff},
    {0x18, 0x43, 0x46, 0x43, 0x9f},
    {0x0e, 0x41, 0x46, 0x03, 0x9f},
    {0x1c, 0x43, 0x46, 0x43, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x46, 0x43, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0x43, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x46, 0x03, 0x9f},
    {0xcd, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0x43, 0x9f},
    {0x08, 0x46, 0x06, 0x43, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0x01, 0xb5, 0xff},
    {0x0a, 0x46, 0x06, 0x43, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x46, 0x03, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0x03, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x46, 0x03, 0x9f},
    {0xd5, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0x01, 0x8f},
    {0x0b, 0x44, 0x02, 0x41, 0x8f},
    {0x05, 0x45, 0x02, 0x01, 0x8f},
    {0x0c, 0x42, 0x42, 0x01, 0x8f},
    {0x09, 0x44, 0x02, 0x41, 0x8f},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0x01, 0x8f},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0x01, 0x8f},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0x01, 0x8f},
    {0x02, 0x45, 0x02, 0x01, 0x8f},
    {0x07, 0x45, 0x02, 0x01, 0x8f},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0x01, 0x8f},
    {0xd1, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0x41, 0x8f},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x41, 0x8f},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x46, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x46, 0x43, 0x9f},
    {0x0f, 0x42, 0x42, 0x01, 0x8f},
    {0xc6, 0x42, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0x01, 0x8f},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x46, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x46, 0x43, 0x9f},
    {0x11, 0x42, 0x42, 0x01, 0x8f},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0x01, 0x8f},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x46, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x07, 0x01, 0x8f},
    {0x0b, 0x41, 0x07, 0x41, 0x8f},
    {0x05, 0x46, 0x07, 0x01, 0x8f},
    {0x0c, 0x43, 0x47, 0x01, 0x8f},
    {0x09, 0x41, 0x07, 0x41, 0x8f},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x01, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x47, 0x01, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x07, 0x01, 0x8f},
    {0x02, 0x46, 0x07, 0x01, 0x8f},
    {0x07, 0x46, 0x07, 0x01, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x47, 0x01, 0x8f},
    {0xd0, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x07, 0x41, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x47, 0x01, 0x8f},
    {0xc5, 0x47, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x47, 0x01, 0x8f},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x01, 0x8f},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0x03, 0x9f},
    {0x0b, 0x45, 0x06, 0x43, 0x9f},
    {0x05, 0x47, 0x06, 0x03, 0x9f},
    {0x0c, 0x44, 0x46, 0x03, 0x9f},
    {0x09, 0x45, 0x06, 0x43, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0x03, 0x9f},
    {0x14, 0x42, 0x46, 0x43, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0x43, 0x9f},
    {0x0e, 0x44, 0x46, 0x03, 0x9f},
    {0x1c, 0x42, 0x46, 0x43, 0x9f},
    {0x04, 0x47, 0x06, 0x03, 0x9f},
    {0x02, 0x47, 0x06, 0x03, 0x9f},
    {0x07, 0x47, 0x06, 0x03, 0x9f},
    {0x17, 0x42, 0x46, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x46, 0x03, 0x9f},
    {0xce, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0x43, 0x9f},
    {0x08, 0x45, 0x06, 0x43, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x46, 0x03, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x46, 0x03, 0x9f},
    {0xd6, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x07, 0x01, 0x8f},
    {0x0b, 0x44, 0x07, 0x41, 0x8f},
    {0x05, 0x45, 0x07, 0x01, 0x8f},
    {0x0c, 0x42, 0x47, 0x01, 0x8f},
    {0x09, 0x44, 0x07, 0x41, 0x8f},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x01, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x47, 0x01, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x07, 0x01, 0x8f},
    {0x02, 0x45, 0x07, 0x01, 0x8f},
    {0x07, 0x45, 0x07, 0x01, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x47, 0x01, 0x8f},
    {0xd2, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x07, 0x41, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x46, 0x43, 0x9f},
    {0x0f, 0x42, 0x47, 0x01, 0x8f},
    {0xc6, 0x47, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0x43, 0x9f},
    {0x11, 0x42, 0x47, 0x01, 0x8f},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x01, 0x8f},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x1e, 0xb5, 0x6e},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x1e, 0xb5, 0x6e},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1e, 0xb5, 0x6e},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1e, 0xb5, 0x6e},
    {0x02, 0x43, 0x1e, 0xb5, 0x6e},
    {0x07, 0x43, 0x1e, 0xb5, 0x6e},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x16, 0xb5, 0x7e},
    {0x0b, 0x43, 0x16, 0xf5, 0x7e},
    {0x05, 0x41, 0x16, 0xb5, 0x7e},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x16, 0xf5, 0x7e},
    {0xc7, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x16, 0xb5, 0x7e},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0x07, 0xf5, 0xee},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x16, 0xb5, 0x7e},
    {0x02, 0x41, 0x16, 0xb5, 0x7e},
    {0x07, 0x41, 0x16, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1e, 0xb5, 0x6e},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x16, 0xf5, 0x7e},
    {0xc3, 0x5e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x1e, 0xb5, 0x6e},
    {0x02, 0x42, 0x1e, 0xb5, 0x6e},
    {0x07, 0x42, 0x1e, 0xb5, 0x6e},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0d, 0xf5, 0x8e},
    {0x05, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4d, 0xb5, 0x8e},
    {0x09, 0x41, 0x0d, 0xf5, 0x8e},
    {0xda, 0x03, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x0d, 0xb5, 0x8e},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0x45, 0xb5, 0xee},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0x4d, 0xb5, 0x8e},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0x0d, 0xb5, 0x8e},
    {0x02, 0x46, 0x0d, 0xb5, 0x8e},
    {0x07, 0x46, 0x0d, 0xb5, 0x8e},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0x05, 0x6e},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0x05, 0x6e},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0x4d, 0xb5, 0x8e},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x05, 0x6e},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0x0d, 0xf5, 0x8e},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0x45, 0xb5, 0xee},
    {0x0a, 0x41, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x05, 0x6e},
    {0x02, 0x43, 0x03, 0x05, 0x6e},
    {0x07, 0x43, 0x03, 0x05, 0x6e},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x16, 0xb5, 0x7e},
    {0x0b, 0x42, 0x16, 0xf5, 0x7e},
    {0x05, 0x44, 0x16, 0xb5, 0x7e},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x16, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x16, 0xb5, 0x7e},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0x07, 0xf5, 0xee},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc5, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x16, 0xb5, 0x7e},
    {0x02, 0x44, 0x16, 0xb5, 0x7e},
    {0x07, 0x44, 0x16, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x05, 0x6e},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x05, 0x6e},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x56, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x05, 0x6e},
    {0x01, 0x43, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x16, 0xf5, 0x7e},
    {0xc3, 0x03, 0x45, 0xb5, 0xee},
    {0xc1, 0x05, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x05, 0x6e},
    {0x02, 0x42, 0x03, 0x05, 0x6e},
    {0x07, 0x42, 0x03, 0x05, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x44, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x44, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x04, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x04, 0x6e},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x04, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x44, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x04, 0x6e},
    {0x02, 0x43, 0x0b, 0x04, 0x6e},
    {0x07, 0x43, 0x0b, 0x04, 0x6e},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x04, 0x7e},
    {0x0b, 0x43, 0x03, 0x44, 0x7e},
    {0x05, 0x41, 0x03, 0x04, 0x7e},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x44, 0x7e},
    {0xc8, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x04, 0x7e},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0x45, 0xb5, 0xee},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x04, 0x7e},
    {0x02, 0x41, 0x03, 0x04, 0x7e},
    {0x07, 0x41, 0x03, 0x04, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x04, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x04, 0x6e},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x04, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x44, 0x7e},
    {0xc3, 0x0b, 0x44, 0xf5, 0xee},
    {0xc1, 0x09, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x0b, 0x04, 0x6e},
    {0x02, 0x42, 0x0b, 0x04, 0x6e},
    {0x07, 0x42, 0x0b, 0x04, 0x6e},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0d, 0xf5, 0x8e},
    {0x05, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4d, 0xb5, 0x8e},
    {0x09, 0x44, 0x0d, 0xf5, 0x8e},
    {0xda, 0x05, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x0d, 0xb5, 0x8e},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0x4d, 0xb5, 0x8e},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0x0d, 0xb5, 0x8e},
    {0x02, 0x45, 0x0d, 0xb5, 0x8e},
    {0x07, 0x45, 0x0d, 0xb5, 0x8e},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0x05, 0x6e},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0x05, 0x6e},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0x4d, 0xb5, 0x8e},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x05, 0x6e},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0x0d, 0xf5, 0x8e},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x05, 0x6e},
    {0x02, 0x43, 0x05, 0x05, 0x6e},
    {0x07, 0x43, 0x05, 0x05, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x04, 0x7e},
    {0x0b, 0x42, 0x03, 0x44, 0x7e},
    {0x05, 0x44, 0x03, 0x04, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x44, 0x7e},
    {0xca, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x04, 0x7e},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0x07, 0xf5, 0xee},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc6, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x04, 0x7e},
    {0x02, 0x44, 0x03, 0x04, 0x7e},
    {0x07, 0x44, 0x03, 0x04, 0x7e},
    {0x0d, 0x42, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x05, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x05, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x03, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x05, 0x6e},
    {0x01, 0x42, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x44, 0x7e},
    {0xc3, 0x05, 0x45, 0xb5, 0xee},
    {0xc1, 0x06, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x05, 0x05, 0x6e},
    {0x02, 0x42, 0x05, 0x05, 0x6e},
    {0x07, 0x42, 0x05, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x02, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x02, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x02, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x02, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x02, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x02, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x02, 0x6e},
    {0x02, 0x43, 0x0c, 0x02, 0x6e},
    {0x07, 0x43, 0x0c, 0x02, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x02, 0x7e},
    {0x0b, 0x43, 0x0b, 0x42, 0x7e},
    {0x05, 0x41, 0x0b, 0x02, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x42, 0x7e},
    {0xc7, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x02, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x02, 0x7e},
    {0x02, 0x41, 0x0b, 0x02, 0x7e},
    {0x07, 0x41, 0x0b, 0x02, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x02, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x02, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x02, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x42, 0x7e},
    {0xc3, 0x4c, 0x02, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x0c, 0x02, 0x6e},
    {0x02, 0x42, 0x0c, 0x02, 0x6e},
    {0x07, 0x42, 0x0c, 0x02, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x02, 0x8e},
    {0x0b, 0x41, 0x03, 0x42, 0x8e},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x0c, 0x43, 0x43, 0x02, 0x8e},
    {0x09, 0x41, 0x03, 0x42, 0x8e},
    {0xda, 0x09, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x02, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x02, 0x8e},
    {0x02, 0x46, 0x03, 0x02, 0x8e},
    {0x07, 0x46, 0x03, 0x02, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x04, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x04, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x02, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x04, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x42, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x09, 0x04, 0x6e},
    {0x02, 0x43, 0x09, 0x04, 0x6e},
    {0x07, 0x43, 0x09, 0x04, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x02, 0x7e},
    {0x0b, 0x42, 0x0b, 0x42, 0x7e},
    {0x05, 0x44, 0x0b, 0x02, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x42, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x02, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x02, 0x8e},
    {0xc5, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x02, 0x7e},
    {0x02, 0x44, 0x0b, 0x02, 0x7e},
    {0x07, 0x44, 0x0b, 0x02, 0x7e},
    {0x0d, 0x43, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x09, 0x04, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x04, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x02, 0x8e},
    {0xc4, 0x4b, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x04, 0x6e},
    {0x01, 0x43, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x0b, 0x42, 0x7e},
    {0xc3, 0x09, 0x44, 0xf5, 0xee},
    {0xc1, 0x0e, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x09, 0x04, 0x6e},
    {0x02, 0x42, 0x09, 0x04, 0x6e},
    {0x07, 0x42, 0x09, 0x04, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x02, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x02, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x04, 0x7e},
    {0x0b, 0x43, 0x05, 0x44, 0x7e},
    {0x05, 0x41, 0x05, 0x04, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x44, 0x7e},
    {0xc8, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x04, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x07, 0xf5, 0xee},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x04, 0x7e},
    {0x02, 0x41, 0x05, 0x04, 0x7e},
    {0x07, 0x41, 0x05, 0x04, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x44, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x02, 0x8e},
    {0x0b, 0x44, 0x03, 0x42, 0x8e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x0c, 0x42, 0x43, 0x02, 0x8e},
    {0x09, 0x44, 0x03, 0x42, 0x8e},
    {0xda, 0x06, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x07, 0xf5, 0xee},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x02, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x02, 0x8e},
    {0x02, 0x45, 0x03, 0x02, 0x8e},
    {0x07, 0x45, 0x03, 0x02, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x05, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x05, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x02, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x05, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x42, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x07, 0xf5, 0xee},
    {0x0a, 0x44, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x05, 0x6e},
    {0x02, 0x43, 0x06, 0x05, 0x6e},
    {0x07, 0x43, 0x06, 0x05, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x04, 0x7e},
    {0x0b, 0x42, 0x05, 0x44, 0x7e},
    {0x05, 0x44, 0x05, 0x04, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x44, 0x7e},
    {0xca, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x04, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x07, 0xf5, 0xee},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x02, 0x8e},
    {0xc6, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x04, 0x7e},
    {0x02, 0x44, 0x05, 0x04, 0x7e},
    {0x07, 0x44, 0x05, 0x04, 0x7e},
    {0x0d, 0x42, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x05, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x05, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x02, 0x8e},
    {0xc4, 0x05, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x05, 0x6e},
    {0x01, 0x42, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x05, 0x44, 0x7e},
    {0xc3, 0x06, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x06, 0x05, 0x6e},
    {0x02, 0x42, 0x06, 0x05, 0x6e},
    {0x07, 0x42, 0x06, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x62, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x02, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x22, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x22, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x22, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x02, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x22, 0xb5, 0x6e},
    {0x02, 0x43, 0x22, 0xb5, 0x6e},
    {0x07, 0x43, 0x22, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1a, 0xf5, 0x7e},
    {0x05, 0x41, 0x1a, 0xb5, 0x7e},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1a, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1a, 0xb5, 0x7e},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1a, 0xb5, 0x7e},
    {0x02, 0x41, 0x1a, 0xb5, 0x7e},
    {0x07, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x22, 0xb5, 0x6e},
    {0xd7, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x22, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x22, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc3, 0x62, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x22, 0xb5, 0x6e},
    {0x02, 0x42, 0x22, 0xb5, 0x6e},
    {0x07, 0x42, 0x22, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x02, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1a, 0xf5, 0x7e},
    {0x05, 0x44, 0x1a, 0xb5, 0x7e},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1a, 0xf5, 0x7e},
    {0xcb, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x1a, 0xb5, 0x7e},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1a, 0xb5, 0x7e},
    {0x02, 0x44, 0x1a, 0xb5, 0x7e},
    {0x07, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1a, 0xf5, 0x7e},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x08, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x48, 0xb5, 0x9e},
    {0x09, 0x46, 0x08, 0xf5, 0x9e},
    {0xda, 0x72, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x48, 0xf5, 0x9e},
    {0xc2, 0x68, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x48, 0xf5, 0x9e},
    {0x0e, 0x41, 0x48, 0xb5, 0x9e},
    {0x1c, 0x43, 0x48, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x32, 0xb5, 0x6e},
    {0x1b, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x32, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x48, 0xb5, 0x9e},
    {0xcd, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x32, 0xb5, 0x6e},
    {0x13, 0x43, 0x48, 0xf5, 0x9e},
    {0x08, 0x46, 0x08, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x32, 0xb5, 0x6e},
    {0x02, 0x43, 0x32, 0xb5, 0x6e},
    {0x07, 0x43, 0x32, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x02, 0x7e},
    {0x0b, 0x43, 0x09, 0x42, 0x7e},
    {0x05, 0x41, 0x09, 0x02, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x42, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x09, 0x02, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x44, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x48, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x02, 0x7e},
    {0x02, 0x41, 0x09, 0x02, 0x7e},
    {0x07, 0x41, 0x09, 0x02, 0x7e},
    {0x0d, 0x41, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x32, 0xb5, 0x6e},
    {0xd9, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x32, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x48, 0xb5, 0x9e},
    {0xd5, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x32, 0xb5, 0x6e},
    {0x01, 0x41, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x42, 0x7e},
    {0xc3, 0x72, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x32, 0xb5, 0x6e},
    {0x02, 0x42, 0x32, 0xb5, 0x6e},
    {0x07, 0x42, 0x32, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4e, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8e, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x02, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x02, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x02, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8e, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0e, 0x02, 0x6e},
    {0x02, 0x43, 0x0e, 0x02, 0x6e},
    {0x07, 0x43, 0x0e, 0x02, 0x6e},
    {0x16, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x02, 0x7e},
    {0x0b, 0x42, 0x09, 0x42, 0x7e},
    {0x05, 0x44, 0x09, 0x02, 0x7e},
    {0x1a, 0x43, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x42, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x09, 0x02, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x09, 0x02, 0x7e},
    {0x02, 0x44, 0x09, 0x02, 0x7e},
    {0x07, 0x44, 0x09, 0x02, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0e, 0x02, 0x6e},
    {0x12, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x02, 0x6e},
    {0x15, 0x43, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x49, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x02, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x09, 0x42, 0x7e},
    {0xc3, 0x4e, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x0e, 0x02, 0x6e},
    {0x02, 0x42, 0x0e, 0x02, 0x6e},
    {0x07, 0x42, 0x0e, 0x02, 0x6e},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x02, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3e, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3e, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x3e, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x02, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3e, 0xb5, 0x6e},
    {0x02, 0x43, 0x3e, 0xb5, 0x6e},
    {0x07, 0x43, 0x3e, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x45, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3e, 0xb5, 0x6e},
    {0xd8, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3e, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3e, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x7e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x3e, 0xb5, 0x6e},
    {0x02, 0x42, 0x3e, 0xb5, 0x6e},
    {0x07, 0x42, 0x3e, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x02, 0x8e},
    {0x0b, 0x41, 0x05, 0x42, 0x8e},
    {0x05, 0x46, 0x05, 0x02, 0x8e},
    {0x0c, 0x43, 0x45, 0x02, 0x8e},
    {0x09, 0x41, 0x05, 0x42, 0x8e},
    {0xda, 0x04, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x02, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x02, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x02, 0x8e},
    {0x02, 0x46, 0x05, 0x02, 0x8e},
    {0x07, 0x46, 0x05, 0x02, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x05, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x05, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x02, 0x8e},
    {0xd0, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x05, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x42, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x05, 0x6e},
    {0x02, 0x43, 0x04, 0x05, 0x6e},
    {0x07, 0x43, 0x04, 0x05, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x02, 0x8e},
    {0xc5, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x05, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x05, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x02, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x05, 0x6e},
    {0x01, 0x43, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x45, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x05, 0x6e},
    {0x02, 0x42, 0x04, 0x05, 0x6e},
    {0x07, 0x42, 0x04, 0x05, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x08, 0xb5, 0x9e},
    {0x0b, 0x45, 0x08, 0xf5, 0x9e},
    {0x05, 0x47, 0x08, 0xb5, 0x9e},
    {0x0c, 0x44, 0x48, 0xb5, 0x9e},
    {0x09, 0x45, 0x08, 0xf5, 0x9e},
    {0xda, 0x02, 0x45, 0xb5, 0xee},
    {0x06, 0x47, 0x08, 0xb5, 0x9e},
    {0x14, 0x42, 0x48, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x45, 0xb5, 0xee},
    {0x18, 0x42, 0x48, 0xf5, 0x9e},
    {0x0e, 0x44, 0x48, 0xb5, 0x9e},
    {0x1c, 0x42, 0x48, 0xf5, 0x9e},
    {0x04, 0x47, 0x08, 0xb5, 0x9e},
    {0x02, 0x47, 0x08, 0xb5, 0x9e},
    {0x07, 0x47, 0x08, 0xb5, 0x9e},
    {0x17, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x05, 0x6e},
    {0x1b, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x05, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x48, 0xb5, 0x9e},
    {0xce, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x05, 0x6e},
    {0x13, 0x42, 0x48, 0xf5, 0x9e},
    {0x08, 0x45, 0x08, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x45, 0xb5, 0xee},
    {0x0a, 0x45, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x05, 0x6e},
    {0x02, 0x43, 0x02, 0x05, 0x6e},
    {0x07, 0x43, 0x02, 0x05, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x04, 0x7e},
    {0x0b, 0x43, 0x06, 0x44, 0x7e},
    {0x05, 0x41, 0x06, 0x04, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x44, 0x7e},
    {0xc8, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x04, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x48, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x04, 0x7e},
    {0x02, 0x41, 0x06, 0x04, 0x7e},
    {0x07, 0x41, 0x06, 0x04, 0x7e},
    {0x0d, 0x44, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x05, 0x6e},
    {0xdb, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x05, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x48, 0xb5, 0x9e},
    {0xd6, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x05, 0x6e},
    {0x01, 0x44, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x44, 0x7e},
    {0xc3, 0x02, 0x45, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x05, 0x6e},
    {0x02, 0x42, 0x02, 0x05, 0x6e},
    {0x07, 0x42, 0x02, 0x05, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x02, 0x8e},
    {0x0b, 0x44, 0x05, 0x42, 0x8e},
    {0x05, 0x45, 0x05, 0x02, 0x8e},
    {0x0c, 0x42, 0x45, 0x02, 0x8e},
    {0x09, 0x44, 0x05, 0x42, 0x8e},
    {0xda, 0x07, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x02, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x02, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x02, 0x8e},
    {0x02, 0x45, 0x05, 0x02, 0x8e},
    {0x07, 0x45, 0x05, 0x02, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x05, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x05, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x02, 0x8e},
    {0xd2, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x05, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x42, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x05, 0x6e},
    {0x02, 0x43, 0x07, 0x05, 0x6e},
    {0x07, 0x43, 0x07, 0x05, 0x6e},
    {0x16, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x04, 0x7e},
    {0x0b, 0x42, 0x06, 0x44, 0x7e},
    {0x05, 0x44, 0x06, 0x04, 0x7e},
    {0x1a, 0x42, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x44, 0x7e},
    {0xca, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x04, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x02, 0x8e},
    {0xc6, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x04, 0x7e},
    {0x02, 0x44, 0x06, 0x04, 0x7e},
    {0x07, 0x44, 0x06, 0x04, 0x7e},
    {0x0d, 0x42, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x05, 0x6e},
    {0x12, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x05, 0x6e},
    {0x15, 0x42, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x02, 0x8e},
    {0xc4, 0x06, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x05, 0x6e},
    {0x01, 0x42, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x06, 0x44, 0x7e},
    {0xc3, 0x07, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x05, 0x6e},
    {0x02, 0x42, 0x07, 0x05, 0x6e},
    {0x07, 0x42, 0x07, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x70, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0x03, 0xf5, 0xff},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x30, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x30, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x30, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x30, 0xb5, 0x6e},
    {0x02, 0x43, 0x30, 0xb5, 0x6e},
    {0x07, 0x43, 0x30, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x25, 0xb5, 0x7f},
    {0x0b, 0x43, 0x25, 0xf5, 0x7f},
    {0x05, 0x41, 0x25, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x25, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x25, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x25, 0xb5, 0x7f},
    {0x02, 0x41, 0x25, 0xb5, 0x7f},
    {0x07, 0x41, 0x25, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x30, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x30, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x30, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x25, 0xf5, 0x7f},
    {0xc3, 0x70, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x25, 0xf5, 0x7f},
    {0x04, 0x42, 0x30, 0xb5, 0x6e},
    {0x02, 0x42, 0x30, 0xb5, 0x6e},
    {0x07, 0x42, 0x30, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x25, 0xb5, 0x7f},
    {0x0b, 0x42, 0x25, 0xf5, 0x7f},
    {0x05, 0x44, 0x25, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x25, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x25, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x25, 0xb5, 0x7f},
    {0x02, 0x44, 0x25, 0xb5, 0x7f},
    {0x07, 0x44, 0x25, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x65, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x25, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x25, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7c, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x04, 0xb5, 0xae},
    {0x02, 0x49, 0x04, 0xb5, 0xae},
    {0x07, 0x49, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3c, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3c, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3c, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3c, 0xb5, 0x6e},
    {0x02, 0x43, 0x3c, 0xb5, 0x6e},
    {0x07, 0x43, 0x3c, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3c, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3c, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3c, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7c, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3c, 0xb5, 0x6e},
    {0x02, 0x42, 0x3c, 0xb5, 0x6e},
    {0x07, 0x42, 0x3c, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x44, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6a, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x44, 0xf5, 0xae},
    {0xc2, 0x64, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x44, 0xf5, 0xae},
    {0x0e, 0x46, 0x44, 0xb5, 0xae},
    {0x1c, 0x41, 0x44, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x2a, 0xb5, 0x6e},
    {0x1b, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x2a, 0xb5, 0x6e},
    {0x67, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x46, 0x44, 0xb5, 0xae},
    {0xc9, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x2a, 0xb5, 0x6e},
    {0x13, 0x41, 0x44, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x64, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2a, 0xb5, 0x6e},
    {0x02, 0x43, 0x2a, 0xb5, 0x6e},
    {0x07, 0x43, 0x2a, 0xb5, 0x6e},
    {0x6d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x19, 0xb5, 0x7e},
    {0x0b, 0x43, 0x19, 0xf5, 0x7e},
    {0x05, 0x41, 0x19, 0xb5, 0x7e},
    {0x75, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x19, 0xf5, 0x7e},
    {0xc7, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x19, 0xb5, 0x7e},
    {0x63, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0xc2, 0x44, 0xb5, 0x0e},
    {0x73, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x46, 0x44, 0xb5, 0xae},
    {0x7f, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x19, 0xb5, 0x7e},
    {0x02, 0x41, 0x19, 0xb5, 0x7e},
    {0x07, 0x41, 0x19, 0xb5, 0x7e},
    {0x0d, 0x46, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x2a, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2a, 0xb5, 0x6e},
    {0x6b, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x46, 0x44, 0xb5, 0xae},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2a, 0xb5, 0x6e},
    {0x01, 0x46, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x19, 0xf5, 0x7e},
    {0xc3, 0x6a, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x44, 0xb5, 0x0e},
    {0x0a, 0x43, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x2a, 0xb5, 0x6e},
    {0x02, 0x42, 0x2a, 0xb5, 0x6e},
    {0x07, 0x42, 0x2a, 0xb5, 0x6e},
    {0x5d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x11, 0xb5, 0x8e},
    {0x0b, 0x41, 0x11, 0xf5, 0x8e},
    {0x05, 0x46, 0x11, 0xb5, 0x8e},
    {0x0c, 0x43, 0x51, 0xb5, 0x8e},
    {0x09, 0x41, 0x11, 0xf5, 0x8e},
    {0xda, 0x50, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x11, 0xb5, 0x8e},
    {0x61, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x74, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x51, 0xb5, 0x8e},
    {0x7d, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x11, 0xb5, 0x8e},
    {0x02, 0x46, 0x11, 0xb5, 0x8e},
    {0x07, 0x46, 0x11, 0xb5, 0x8e},
    {0x6f, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0x02, 0x6e},
    {0x7b, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0x02, 0x6e},
    {0x69, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x51, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x02, 0x6e},
    {0x5f, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x11, 0xf5, 0x8e},
    {0x79, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x74, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x02, 0x6e},
    {0x02, 0x43, 0x10, 0x02, 0x6e},
    {0x07, 0x43, 0x10, 0x02, 0x6e},
    {0x16, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x19, 0xb5, 0x7e},
    {0x0b, 0x42, 0x19, 0xf5, 0x7e},
    {0x05, 0x44, 0x19, 0xb5, 0x7e},
    {0x1a, 0x41, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x19, 0xf5, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x19, 0xb5, 0x7e},
    {0x65, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x0f, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x51, 0xb5, 0x8e},
    {0xc5, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x19, 0xb5, 0x7e},
    {0x02, 0x44, 0x19, 0xb5, 0x7e},
    {0x07, 0x44, 0x19, 0xb5, 0x7e},
    {0x0d, 0x43, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x02, 0x6e},
    {0x12, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0x02, 0x6e},
    {0x15, 0x41, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x51, 0xb5, 0x8e},
    {0xc4, 0x59, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0x02, 0x6e},
    {0x01, 0x43, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x19, 0xf5, 0x7e},
    {0xc3, 0x50, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0x02, 0x6e},
    {0x02, 0x42, 0x10, 0x02, 0x6e},
    {0x07, 0x42, 0x10, 0x02, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x91, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x91, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x91, 0xb5, 0x6f},
    {0x68, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x91, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x40, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x91, 0xb5, 0x6f},
    {0x02, 0x43, 0x91, 0xb5, 0x6f},
    {0x07, 0x43, 0x91, 0xb5, 0x6f},
    {0x6e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x0f, 0x03, 0x7f},
    {0x0b, 0x43, 0x0f, 0x43, 0x7f},
    {0x05, 0x41, 0x0f, 0x03, 0x7f},
    {0x76, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x0f, 0x43, 0x7f},
    {0xc8, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0x03, 0x7f},
    {0x64, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x0f, 0x03, 0x7f},
    {0x02, 0x41, 0x0f, 0x03, 0x7f},
    {0x07, 0x41, 0x0f, 0x03, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x91, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x91, 0xb5, 0x6f},
    {0x6c, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x91, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0x43, 0x7f},
    {0x83, 0x91, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0x43, 0x7f},
    {0x04, 0x42, 0x91, 0xb5, 0x6f},
    {0x02, 0x42, 0x91, 0xb5, 0x6f},
    {0x07, 0x42, 0x91, 0xb5, 0x6f},
    {0x5e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x11, 0xb5, 0x8e},
    {0x0b, 0x44, 0x11, 0xf5, 0x8e},
    {0x05, 0x45, 0x11, 0xb5, 0x8e},
    {0x0c, 0x42, 0x51, 0xb5, 0x8e},
    {0x09, 0x44, 0x11, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x11, 0xb5, 0x8e},
    {0x62, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x51, 0xb5, 0x8e},
    {0x7e, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x11, 0xb5, 0x8e},
    {0x02, 0x45, 0x11, 0xb5, 0x8e},
    {0x07, 0x45, 0x11, 0xb5, 0x8e},
    {0x70, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x51, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x11, 0xf5, 0x8e},
    {0x7a, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0x03, 0x7f},
    {0x0b, 0x42, 0x0f, 0x43, 0x7f},
    {0x05, 0x44, 0x0f, 0x03, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0x43, 0x7f},
    {0xca, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0x03, 0x7f},
    {0x66, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x51, 0xb5, 0x8e},
    {0xc6, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0x03, 0x7f},
    {0x02, 0x44, 0x0f, 0x03, 0x7f},
    {0x07, 0x44, 0x0f, 0x03, 0x7f},
    {0x0d, 0x42, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x51, 0xb5, 0x8e},
    {0xc4, 0x4f, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0x43, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0x43, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x60, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x44, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x20, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x20, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x20, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x44, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x20, 0xb5, 0x6e},
    {0x02, 0x43, 0x20, 0xb5, 0x6e},
    {0x07, 0x43, 0x20, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x85, 0xb5, 0x7f},
    {0x0b, 0x43, 0x85, 0xf5, 0x7f},
    {0x05, 0x41, 0x85, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x85, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x85, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x85, 0xb5, 0x7f},
    {0x02, 0x41, 0x85, 0xb5, 0x7f},
    {0x07, 0x41, 0x85, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x20, 0xb5, 0x6e},
    {0x97, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x20, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0x93, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x20, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x85, 0xf5, 0x7f},
    {0xc3, 0x60, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x85, 0xf5, 0x7f},
    {0x04, 0x42, 0x20, 0xb5, 0x6e},
    {0x02, 0x42, 0x20, 0xb5, 0x6e},
    {0x07, 0x42, 0x20, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x9b, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x04, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x04, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x08, 0x04, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x9b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x04, 0x6e},
    {0x02, 0x43, 0x08, 0x04, 0x6e},
    {0x07, 0x43, 0x08, 0x04, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x85, 0xb5, 0x7f},
    {0x0b, 0x42, 0x85, 0xf5, 0x7f},
    {0x05, 0x44, 0x85, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x85, 0xf5, 0x7f},
    {0x8b, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x85, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x85, 0xb5, 0x7f},
    {0x02, 0x44, 0x85, 0xb5, 0x7f},
    {0x07, 0x44, 0x85, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x04, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x04, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0x85, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x08, 0x04, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x85, 0xf5, 0x7f},
    {0xc3, 0x08, 0x44, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x85, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x04, 0x6e},
    {0x02, 0x42, 0x08, 0x04, 0x6e},
    {0x07, 0x42, 0x08, 0x04, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x81, 0xf5, 0x9e},
    {0x05, 0x48, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc1, 0xb5, 0x9e},
    {0x09, 0x46, 0x81, 0xf5, 0x9e},
    {0xda, 0x7a, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x6c, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc1, 0xf5, 0x9e},
    {0x04, 0x48, 0x04, 0xb5, 0xae},
    {0x02, 0x48, 0x04, 0xb5, 0xae},
    {0x07, 0x48, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x3a, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x3a, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc1, 0xb5, 0x9e},
    {0x8d, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x3a, 0xb5, 0x6e},
    {0x13, 0x43, 0xc1, 0xf5, 0x9e},
    {0x08, 0x46, 0x81, 0xf5, 0x9e},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x3a, 0xb5, 0x6e},
    {0x02, 0x43, 0x3a, 0xb5, 0x6e},
    {0x07, 0x43, 0x3a, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x04, 0x7e},
    {0x0b, 0x43, 0x04, 0x44, 0x7e},
    {0x05, 0x41, 0x04, 0x04, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x44, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x04, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x44, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc1, 0xb5, 0x9e},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x04, 0x7e},
    {0x02, 0x41, 0x04, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0x04, 0x7e},
    {0x0d, 0x41, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x3a, 0xb5, 0x6e},
    {0x99, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3a, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc1, 0xb5, 0x9e},
    {0x95, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3a, 0xb5, 0x6e},
    {0x01, 0x41, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x04, 0x44, 0x7e},
    {0xc3, 0x7a, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x3a, 0xb5, 0x6e},
    {0x02, 0x42, 0x3a, 0xb5, 0x6e},
    {0x07, 0x42, 0x3a, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x96, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x96, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x04, 0x04, 0x7e},
    {0x0b, 0x42, 0x04, 0x44, 0x7e},
    {0x05, 0x44, 0x04, 0x04, 0x7e},
    {0x1a, 0x43, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x04, 0x44, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x04, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x04, 0x7e},
    {0x02, 0x44, 0x04, 0x04, 0x7e},
    {0x07, 0x44, 0x04, 0x04, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x44, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x04, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x44, 0xb5, 0xae},
    {0x09, 0x47, 0x04, 0xf5, 0xae},
    {0xda, 0x0a, 0x44, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x44, 0xf5, 0xae},
    {0xc2, 0x01, 0x44, 0xf5, 0xee},
    {0x18, 0x44, 0x44, 0xf5, 0xae},
    {0x0e, 0x45, 0x44, 0xb5, 0xae},
    {0x1c, 0x44, 0x44, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x04, 0x6e},
    {0x1b, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x04, 0x6e},
    {0x67, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x45, 0x44, 0xb5, 0xae},
    {0xc9, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x04, 0x6e},
    {0x13, 0x44, 0x44, 0xf5, 0xae},
    {0x08, 0x47, 0x04, 0xf5, 0xae},
    {0x77, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x01, 0x44, 0xf5, 0xee},
    {0x0a, 0x47, 0x04, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x04, 0x6e},
    {0x02, 0x43, 0x0a, 0x04, 0x6e},
    {0x07, 0x43, 0x0a, 0x04, 0x6e},
    {0x6d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x04, 0x7e},
    {0x0b, 0x43, 0x02, 0x44, 0x7e},
    {0x05, 0x41, 0x02, 0x04, 0x7e},
    {0x75, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x44, 0x7e},
    {0xc7, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x04, 0x7e},
    {0x63, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x45, 0x44, 0xb5, 0xae},
    {0x7f, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x04, 0x7e},
    {0x02, 0x41, 0x02, 0x04, 0x7e},
    {0x07, 0x41, 0x02, 0x04, 0x7e},
    {0x0d, 0x45, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x04, 0x6e},
    {0x98, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x0a, 0x04, 0x6e},
    {0x6b, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x45, 0x44, 0xb5, 0xae},
    {0x94, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x0a, 0x04, 0x6e},
    {0x01, 0x45, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x44, 0x7e},
    {0xc3, 0x0a, 0x44, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x0a, 0x04, 0x6e},
    {0x02, 0x42, 0x0a, 0x04, 0x6e},
    {0x07, 0x42, 0x0a, 0x04, 0x6e},
    {0x5d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0x02, 0x8e},
    {0x0b, 0x41, 0x06, 0x42, 0x8e},
    {0x05, 0x46, 0x06, 0x02, 0x8e},
    {0x0c, 0x43, 0x46, 0x02, 0x8e},
    {0x09, 0x41, 0x06, 0x42, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x02, 0x8e},
    {0x61, 0x02, 0x04, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0x02, 0x8e},
    {0x7d, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0x02, 0x8e},
    {0x02, 0x46, 0x06, 0x02, 0x8e},
    {0x07, 0x46, 0x06, 0x02, 0x8e},
    {0x6f, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0x02, 0x8e},
    {0x90, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0x42, 0x8e},
    {0x79, 0x02, 0x04, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x04, 0x7e},
    {0x0b, 0x42, 0x02, 0x44, 0x7e},
    {0x05, 0x44, 0x02, 0x04, 0x7e},
    {0x1a, 0x44, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x44, 0x7e},
    {0x8c, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x02, 0x04, 0x7e},
    {0x65, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc1, 0x44, 0xb5, 0x0e},
    {0x19, 0x44, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0x02, 0x8e},
    {0xc5, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x04, 0x7e},
    {0x02, 0x44, 0x02, 0x04, 0x7e},
    {0x07, 0x44, 0x02, 0x04, 0x7e},
    {0x0d, 0x43, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0x02, 0x8e},
    {0xc4, 0x02, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x44, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x44, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x81, 0xb5, 0x9e},
    {0x0b, 0x45, 0x81, 0xf5, 0x9e},
    {0x05, 0x47, 0x81, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc1, 0xb5, 0x9e},
    {0x09, 0x45, 0x81, 0xf5, 0x9e},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x81, 0xb5, 0x9e},
    {0x14, 0x42, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc1, 0xf5, 0x9e},
    {0x04, 0x47, 0x81, 0xb5, 0x9e},
    {0x02, 0x47, 0x81, 0xb5, 0x9e},
    {0x07, 0x47, 0x81, 0xb5, 0x9e},
    {0x17, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc1, 0xb5, 0x9e},
    {0x8e, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0xc1, 0xf5, 0x9e},
    {0x08, 0x45, 0x81, 0xf5, 0x9e},
    {0x78, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x04, 0x7e},
    {0x0b, 0x43, 0x07, 0x44, 0x7e},
    {0x05, 0x41, 0x07, 0x04, 0x7e},
    {0x76, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x44, 0x7e},
    {0xc8, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x04, 0x7e},
    {0x64, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc1, 0xb5, 0x9e},
    {0x40, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x04, 0x7e},
    {0x02, 0x41, 0x07, 0x04, 0x7e},
    {0x07, 0x41, 0x07, 0x04, 0x7e},
    {0x0d, 0x44, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0x9b, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc1, 0xb5, 0x9e},
    {0x96, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x07, 0x44, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0x02, 0x8e},
    {0x0b, 0x44, 0x06, 0x42, 0x8e},
    {0x05, 0x45, 0x06, 0x02, 0x8e},
    {0x0c, 0x42, 0x46, 0x02, 0x8e},
    {0x09, 0x44, 0x06, 0x42, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x02, 0x8e},
    {0x62, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0x02, 0x8e},
    {0x7e, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0x02, 0x8e},
    {0x02, 0x45, 0x06, 0x02, 0x8e},
    {0x07, 0x45, 0x06, 0x02, 0x8e},
    {0x70, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0x02, 0x8e},
    {0x92, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0x42, 0x8e},
    {0x7a, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x07, 0x04, 0x7e},
    {0x0b, 0x42, 0x07, 0x44, 0x7e},
    {0x05, 0x44, 0x07, 0x04, 0x7e},
    {0x1a, 0x42, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x07, 0x44, 0x7e},
    {0xca, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x04, 0x7e},
    {0x66, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0x46, 0x02, 0x8e},
    {0xc6, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x04, 0x7e},
    {0x02, 0x44, 0x07, 0x04, 0x7e},
    {0x07, 0x44, 0x07, 0x04, 0x7e},
    {0x0d, 0x42, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0x46, 0x02, 0x8e},
    {0xc4, 0x07, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x44, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4e, 0xf5, 0x00, 0xee},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4c, 0xf5, 0x40, 0xee},
    {0xc2, 0x5e, 0x03, 0xf5, 0xff},
    {0x18, 0x4c, 0xf5, 0x40, 0xee},
    {0x0e, 0x4e, 0xf5, 0x00, 0xee},
    {0x1c, 0x4c, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x16, 0x03, 0x6f},
    {0x1b, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x16, 0x03, 0x6f},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x4e, 0xf5, 0x00, 0xee},
    {0xc9, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x16, 0x03, 0x6f},
    {0x13, 0x4c, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0x03, 0x6f},
    {0x02, 0x43, 0x16, 0x03, 0x6f},
    {0x07, 0x43, 0x16, 0x03, 0x6f},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0x03, 0x7f},
    {0x0b, 0x43, 0x0d, 0x43, 0x7f},
    {0x05, 0x41, 0x0d, 0x03, 0x7f},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0x43, 0x7f},
    {0xc7, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0d, 0x03, 0x7f},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x4e, 0xf5, 0x00, 0xee},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0x03, 0x7f},
    {0x02, 0x41, 0x0d, 0x03, 0x7f},
    {0x07, 0x41, 0x0d, 0x03, 0x7f},
    {0x0d, 0x4e, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x16, 0x03, 0x6f},
    {0xd7, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x16, 0x03, 0x6f},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x4e, 0xf5, 0x00, 0xee},
    {0xd3, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x16, 0x03, 0x6f},
    {0x01, 0x4e, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x0d, 0x43, 0x7f},
    {0xc3, 0x56, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0x43, 0x7f},
    {0x04, 0x42, 0x16, 0x03, 0x6f},
    {0x02, 0x42, 0x16, 0x03, 0x6f},
    {0x07, 0x42, 0x16, 0x03, 0x6f},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x01, 0xb5, 0x8e},
    {0x0b, 0x41, 0x01, 0xf5, 0x8e},
    {0x05, 0x46, 0x01, 0xb5, 0x8e},
    {0x0c, 0x43, 0x41, 0xb5, 0x8e},
    {0x09, 0x41, 0x01, 0xf5, 0x8e},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x01, 0xb5, 0x8e},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x41, 0xb5, 0x8e},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x01, 0xb5, 0x8e},
    {0x02, 0x46, 0x01, 0xb5, 0x8e},
    {0x07, 0x46, 0x01, 0xb5, 0x8e},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x41, 0xb5, 0x8e},
    {0xcf, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x01, 0xf5, 0x8e},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x0d, 0x03, 0x7f},
    {0x0b, 0x42, 0x0d, 0x43, 0x7f},
    {0x05, 0x44, 0x0d, 0x03, 0x7f},
    {0x1a, 0x4c, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x0d, 0x43, 0x7f},
    {0xcb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0d, 0x03, 0x7f},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0x4c, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x41, 0xb5, 0x8e},
    {0xc5, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0d, 0x03, 0x7f},
    {0x02, 0x44, 0x0d, 0x03, 0x7f},
    {0x07, 0x44, 0x0d, 0x03, 0x7f},
    {0x0d, 0x43, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0x4c, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x41, 0xb5, 0x8e},
    {0xc4, 0x4d, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x0d, 0x43, 0x7f},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0x43, 0x7f},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x0a, 0xf5, 0x9e},
    {0x05, 0x49, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x4a, 0xb5, 0x9e},
    {0x09, 0x46, 0x0a, 0xf5, 0x9e},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4a, 0xf5, 0x9e},
    {0x04, 0x49, 0x02, 0xb5, 0xae},
    {0x02, 0x49, 0x02, 0xb5, 0xae},
    {0x07, 0x49, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0x4a, 0xb5, 0x9e},
    {0xcd, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0x4a, 0xf5, 0x9e},
    {0x08, 0x46, 0x0a, 0xf5, 0x9e},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0x4a, 0xb5, 0x9e},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0xd9, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0x4a, 0xb5, 0x9e},
    {0xd5, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x01, 0xb5, 0x8e},
    {0x0b, 0x44, 0x01, 0xf5, 0x8e},
    {0x05, 0x45, 0x01, 0xb5, 0x8e},
    {0x0c, 0x42, 0x41, 0xb5, 0x8e},
    {0x09, 0x44, 0x01, 0xf5, 0x8e},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x01, 0xb5, 0x8e},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x46, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x41, 0xb5, 0x8e},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x01, 0xb5, 0x8e},
    {0x02, 0x45, 0x01, 0xb5, 0x8e},
    {0x07, 0x45, 0x01, 0xb5, 0x8e},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x41, 0xb5, 0x8e},
    {0xd1, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x01, 0xf5, 0x8e},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x46, 0xf5, 0x0f},
    {0x0a, 0x44, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x41, 0xb5, 0x8e},
    {0xc6, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x41, 0xb5, 0x8e},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x4a, 0x06, 0xb5, 0xbf},
    {0x0b, 0x49, 0x06, 0xf5, 0xbf},
    {0x05, 0x4a, 0x06, 0xb5, 0xbf},
    {0x0c, 0x46, 0x42, 0xb5, 0xae},
    {0x09, 0x49, 0x06, 0xf5, 0xbf},
    {0xda, 0x5a, 0x03, 0xf5, 0xff},
    {0x06, 0x4a, 0x06, 0xb5, 0xbf},
    {0x14, 0x41, 0x42, 0xf5, 0xae},
    {0xc2, 0x62, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x42, 0xf5, 0xae},
    {0x0e, 0x46, 0x42, 0xb5, 0xae},
    {0x1c, 0x41, 0x42, 0xf5, 0xae},
    {0x04, 0x4a, 0x06, 0xb5, 0xbf},
    {0x02, 0x4a, 0x06, 0xb5, 0xbf},
    {0x07, 0x4a, 0x06, 0xb5, 0xbf},
    {0x17, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x1a, 0x03, 0x6f},
    {0x1b, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x1a, 0x03, 0x6f},
    {0x67, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x46, 0x42, 0xb5, 0xae},
    {0xc9, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x1a, 0x03, 0x6f},
    {0x13, 0x41, 0x42, 0xf5, 0xae},
    {0x08, 0x49, 0x06, 0xf5, 0xbf},
    {0x77, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x62, 0x03, 0xf5, 0xff},
    {0x0a, 0x49, 0x06, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0x03, 0x6f},
    {0x02, 0x43, 0x1a, 0x03, 0x6f},
    {0x07, 0x43, 0x1a, 0x03, 0x6f},
    {0x6d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x12, 0xb5, 0x7e},
    {0x0b, 0x43, 0x12, 0xf5, 0x7e},
    {0x05, 0x41, 0x12, 0xb5, 0x7e},
    {0x75, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x12, 0xf5, 0x7e},
    {0xc7, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x12, 0xb5, 0x7e},
    {0x63, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0xc2, 0x42, 0xb5, 0x0e},
    {0x73, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x46, 0x42, 0xb5, 0xae},
    {0x7f, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x12, 0xb5, 0x7e},
    {0x02, 0x41, 0x12, 0xb5, 0x7e},
    {0x07, 0x41, 0x12, 0xb5, 0x7e},
    {0x0d, 0x46, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x1a, 0x03, 0x6f},
    {0xd8, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1a, 0x03, 0x6f},
    {0x6b, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x46, 0x42, 0xb5, 0xae},
    {0xd4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1a, 0x03, 0x6f},
    {0x01, 0x46, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x12, 0xf5, 0x7e},
    {0xc3, 0x5a, 0x03, 0xf5, 0xff},
    {0xc1, 0xc2, 0x42, 0xb5, 0x0e},
    {0x0a, 0x43, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x1a, 0x03, 0x6f},
    {0x02, 0x42, 0x1a, 0x03, 0x6f},
    {0x07, 0x42, 0x1a, 0x03, 0x6f},
    {0x5d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x08, 0x03, 0x8f},
    {0x0b, 0x41, 0x08, 0x43, 0x8f},
    {0x05, 0x46, 0x08, 0x03, 0x8f},
    {0x0c, 0x43, 0x48, 0x03, 0x8f},
    {0x09, 0x41, 0x08, 0x43, 0x8f},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0x03, 0x8f},
    {0x61, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x72, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0x48, 0x03, 0x8f},
    {0x7d, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x08, 0x03, 0x8f},
    {0x02, 0x46, 0x08, 0x03, 0x8f},
    {0x07, 0x46, 0x08, 0x03, 0x8f},
    {0x6f, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0x48, 0x03, 0x8f},
    {0xd0, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x08, 0x43, 0x8f},
    {0x79, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x72, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x08, 0x43, 0x8f},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x12, 0xb5, 0x7e},
    {0x0b, 0x42, 0x12, 0xf5, 0x7e},
    {0x05, 0x44, 0x12, 0xb5, 0x7e},
    {0x1a, 0x41, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x12, 0xf5, 0x7e},
    {0xcc, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x12, 0xb5, 0x7e},
    {0x65, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0x48, 0x03, 0x8f},
    {0xc5, 0x48, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x12, 0xb5, 0x7e},
    {0x02, 0x44, 0x12, 0xb5, 0x7e},
    {0x07, 0x44, 0x12, 0xb5, 0x7e},
    {0x0d, 0x43, 0x48, 0x03, 0x8f},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0x48, 0x03, 0x8f},
    {0xc4, 0x52, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0x03, 0x8f},
    {0x08, 0x42, 0x12, 0xf5, 0x7e},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0a, 0xf5, 0x9e},
    {0x05, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4a, 0xb5, 0x9e},
    {0x09, 0x45, 0x0a, 0xf5, 0x9e},
    {0x9a, 0x8a, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0a, 0xb5, 0x9e},
    {0x14, 0x42, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x7e, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4a, 0xf5, 0x9e},
    {0x04, 0x47, 0x0a, 0xb5, 0x9e},
    {0x02, 0x47, 0x0a, 0xb5, 0x9e},
    {0x07, 0x47, 0x0a, 0xb5, 0x9e},
    {0x17, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x8a, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x8a, 0xb5, 0x6e},
    {0x68, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x4a, 0xb5, 0x9e},
    {0xce, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x8a, 0xb5, 0x6e},
    {0x13, 0x42, 0x4a, 0xf5, 0x9e},
    {0x08, 0x45, 0x0a, 0xf5, 0x9e},
    {0x78, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x7e, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x8a, 0xb5, 0x6e},
    {0x02, 0x43, 0x8a, 0xb5, 0x6e},
    {0x07, 0x43, 0x8a, 0xb5, 0x6e},
    {0x6e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x4a, 0xb5, 0x9e},
    {0x40, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x8a, 0xb5, 0x6e},
    {0xdb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x8a, 0xb5, 0x6e},
    {0x6c, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x4a, 0xb5, 0x9e},
    {0xd6, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x8a, 0xb5, 0x6e},
    {0x01, 0x44, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8a, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8a, 0xb5, 0x6e},
    {0x02, 0x42, 0x8a, 0xb5, 0x6e},
    {0x07, 0x42, 0x8a, 0xb5, 0x6e},
    {0x5e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x08, 0x03, 0x8f},
    {0x0b, 0x44, 0x08, 0x43, 0x8f},
    {0x05, 0x45, 0x08, 0x03, 0x8f},
    {0x0c, 0x42, 0x48, 0x03, 0x8f},
    {0x09, 0x44, 0x08, 0x43, 0x8f},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0x03, 0x8f},
    {0x62, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0x48, 0x03, 0x8f},
    {0x7e, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x08, 0x03, 0x8f},
    {0x02, 0x45, 0x08, 0x03, 0x8f},
    {0x07, 0x45, 0x08, 0x03, 0x8f},
    {0x70, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0x48, 0x03, 0x8f},
    {0xd2, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x08, 0x43, 0x8f},
    {0x7a, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0x43, 0x8f},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x48, 0x03, 0x8f},
    {0xc6, 0x48, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0x03, 0x8f},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x48, 0x03, 0x8f},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0x03, 0x8f},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x50, 0xb5, 0x00, 0xee},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x50, 0xb5, 0x00, 0xee},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x66, 0xf5, 0x00, 0x0e},
    {0x06, 0x50, 0xb5, 0x00, 0xee},
    {0x14, 0x46, 0x46, 0xf5, 0xbf},
    {0xc2, 0x70, 0x03, 0xf5, 0xff},
    {0x18, 0x46, 0x46, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x46, 0xf5, 0xbf},
    {0x04, 0x50, 0xb5, 0x00, 0xee},
    {0x02, 0x50, 0xb5, 0x00, 0xee},
    {0x07, 0x50, 0xb5, 0x00, 0xee},
    {0x17, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x43, 0x26, 0xb5, 0x6e},
    {0x1b, 0x46, 0x46, 0xf5, 0xbf},
    {0x05, 0x43, 0x26, 0xb5, 0x6e},
    {0x67, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x26, 0xb5, 0x6e},
    {0x13, 0x46, 0x46, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x70, 0x03, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x26, 0xb5, 0x6e},
    {0x02, 0x43, 0x26, 0xb5, 0x6e},
    {0x07, 0x43, 0x26, 0xb5, 0x6e},
    {0x6d, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x15, 0xb5, 0x7e},
    {0x0b, 0x43, 0x15, 0xf5, 0x7e},
    {0x05, 0x41, 0x15, 0xb5, 0x7e},
    {0x75, 0x01, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x15, 0xf5, 0x7e},
    {0x87, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x15, 0xb5, 0x7e},
    {0x63, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x46, 0xbf},
    {0x73, 0x01, 0x06, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x15, 0xb5, 0x7e},
    {0x02, 0x41, 0x15, 0xb5, 0x7e},
    {0x07, 0x41, 0x15, 0xb5, 0x7e},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x26, 0xb5, 0x6e},
    {0xd7, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x26, 0xb5, 0x6e},
    {0x6b, 0x01, 0x06, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x26, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x15, 0xf5, 0x7e},
    {0xc3, 0x66, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x46, 0xbf},
    {0x0a, 0x43, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x26, 0xb5, 0x6e},
    {0x02, 0x42, 0x26, 0xb5, 0x6e},
    {0x07, 0x42, 0x26, 0xb5, 0x6e},
    {0x5d, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x46, 0x83, 0xb5, 0x8e},
    {0x0b, 0x41, 0x83, 0xf5, 0x8e},
    {0x05, 0x46, 0x83, 0xb5, 0x8e},
    {0x0c, 0x43, 0xc3, 0xb5, 0x8e},
    {0x09, 0x41, 0x83, 0xf5, 0x8e},
    {0xda, 0xc2, 0x46, 0xf5, 0x0f},
    {0x06, 0x46, 0x83, 0xb5, 0x8e},
    {0x61, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x7c, 0x03, 0xf5, 0xff},
    {0x71, 0x01, 0x06, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc3, 0xb5, 0x8e},
    {0x7d, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x46, 0x83, 0xb5, 0x8e},
    {0x02, 0x46, 0x83, 0xb5, 0x8e},
    {0x07, 0x46, 0x83, 0xb5, 0x8e},
    {0x6f, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x06, 0x6f},
    {0x7b, 0x01, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x06, 0x6f},
    {0x69, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x43, 0xc3, 0xb5, 0x8e},
    {0xcf, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0x06, 0x6f},
    {0x5f, 0x01, 0x06, 0xb5, 0xbf},
    {0x08, 0x41, 0x83, 0xf5, 0x8e},
    {0x79, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x7c, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x82, 0x06, 0x6f},
    {0x02, 0x43, 0x82, 0x06, 0x6f},
    {0x07, 0x43, 0x82, 0x06, 0x6f},
    {0x16, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x44, 0x15, 0xb5, 0x7e},
    {0x0b, 0x42, 0x15, 0xf5, 0x7e},
    {0x05, 0x44, 0x15, 0xb5, 0x7e},
    {0x1a, 0x46, 0x46, 0xf5, 0xbf},
    {0x09, 0x42, 0x15, 0xf5, 0x7e},
    {0xcb, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x15, 0xb5, 0x7e},
    {0x65, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x46, 0xbf},
    {0x19, 0x46, 0x46, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc3, 0xb5, 0x8e},
    {0x85, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x15, 0xb5, 0x7e},
    {0x02, 0x44, 0x15, 0xb5, 0x7e},
    {0x07, 0x44, 0x15, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x82, 0x06, 0x6f},
    {0x12, 0x46, 0x46, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x06, 0x6f},
    {0x15, 0x46, 0x46, 0xf5, 0xbf},
    {0x11, 0x43, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x55, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x06, 0x6f},
    {0x01, 0x43, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x15, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x46, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x06, 0x6f},
    {0x02, 0x42, 0x82, 0x06, 0x6f},
    {0x07, 0x42, 0x82, 0x06, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x04, 0x43, 0x9f},
    {0x05, 0x48, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x44, 0x03, 0x9f},
    {0x09, 0x46, 0x04, 0x43, 0x9f},
    {0xda, 0x59, 0x03, 0xf5, 0xff},
    {0x06, 0x48, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x44, 0x43, 0x9f},
    {0xc2, 0x6a, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x44, 0x43, 0x9f},
    {0x0e, 0x41, 0x44, 0x03, 0x9f},
    {0x1c, 0x43, 0x44, 0x43, 0x9f},
    {0x04, 0x48, 0x02, 0xb5, 0xae},
    {0x02, 0x48, 0x02, 0xb5, 0xae},
    {0x07, 0x48, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x44, 0x43, 0x9f},
    {0x03, 0x43, 0x19, 0x03, 0x6f},
    {0x1b, 0x43, 0x44, 0x43, 0x9f},
    {0x05, 0x43, 0x19, 0x03, 0x6f},
    {0x68, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0x03, 0x9f},
    {0xcd, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x19, 0x03, 0x6f},
    {0x13, 0x43, 0x44, 0x43, 0x9f},
    {0x08, 0x46, 0x04, 0x43, 0x9f},
    {0x78, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x6a, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x04, 0x43, 0x9f},
    {0x04, 0x43, 0x19, 0x03, 0x6f},
    {0x02, 0x43, 0x19, 0x03, 0x6f},
    {0x07, 0x43, 0x19, 0x03, 0x6f},
    {0x6e, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0x03, 0x7f},
    {0x0b, 0x43, 0x11, 0x43, 0x7f},
    {0x05, 0x41, 0x11, 0x03, 0x7f},
    {0x76, 0x01, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0x43, 0x7f},
    {0x88, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x11, 0x03, 0x7f},
    {0x64, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x06, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0x03, 0x9f},
    {0x40, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0x03, 0x7f},
    {0x02, 0x41, 0x11, 0x03, 0x7f},
    {0x07, 0x41, 0x11, 0x03, 0x7f},
    {0x0d, 0x41, 0x44, 0x03, 0x9f},
    {0x03, 0x42, 0x19, 0x03, 0x6f},
    {0xd9, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x19, 0x03, 0x6f},
    {0x6c, 0x01, 0x06, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0x03, 0x9f},
    {0xd5, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x19, 0x03, 0x6f},
    {0x01, 0x41, 0x44, 0x03, 0x9f},
    {0x08, 0x43, 0x11, 0x43, 0x7f},
    {0xc3, 0x59, 0x03, 0xf5, 0xff},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0x43, 0x7f},
    {0x04, 0x42, 0x19, 0x03, 0x6f},
    {0x02, 0x42, 0x19, 0x03, 0x6f},
    {0x07, 0x42, 0x19, 0x03, 0x6f},
    {0x5e, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x45, 0x83, 0xb5, 0x8e},
    {0x0b, 0x44, 0x83, 0xf5, 0x8e},
    {0x05, 0x45, 0x83, 0xb5, 0x8e},
    {0x0c, 0x42, 0xc3, 0xb5, 0x8e},
    {0x09, 0x44, 0x83, 0xf5, 0x8e},
    {0xda, 0x4f, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x83, 0xb5, 0x8e},
    {0x62, 0x01, 0x06, 0xb5, 0xbf},
    {0x82, 0x92, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x06, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc3, 0xb5, 0x8e},
    {0x7e, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x45, 0x83, 0xb5, 0x8e},
    {0x02, 0x45, 0x83, 0xb5, 0x8e},
    {0x07, 0x45, 0x83, 0xb5, 0x8e},
    {0x70, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x02, 0x6e},
    {0x7c, 0x01, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x02, 0x6e},
    {0x6a, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x42, 0xc3, 0xb5, 0x8e},
    {0xd1, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0f, 0x02, 0x6e},
    {0x60, 0x01, 0x06, 0xb5, 0xbf},
    {0x08, 0x44, 0x83, 0xf5, 0x8e},
    {0x7a, 0x01, 0x06, 0xb5, 0xbf},
    {0x81, 0x92, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x0f, 0x02, 0x6e},
    {0x02, 0x43, 0x0f, 0x02, 0x6e},
    {0x07, 0x43, 0x0f, 0x02, 0x6e},
    {0x16, 0x43, 0x44, 0x43, 0x9f},
    {0x03, 0x44, 0x11, 0x03, 0x7f},
    {0x0b, 0x42, 0x11, 0x43, 0x7f},
    {0x05, 0x44, 0x11, 0x03, 0x7f},
    {0x1a, 0x43, 0x44, 0x43, 0x9f},
    {0x09, 0x42, 0x11, 0x43, 0x7f},
    {0x8a, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x11, 0x03, 0x7f},
    {0x66, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x46, 0xbf},
    {0x19, 0x43, 0x44, 0x43, 0x9f},
    {0x0f, 0x42, 0xc3, 0xb5, 0x8e},
    {0x86, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x11, 0x03, 0x7f},
    {0x02, 0x44, 0x11, 0x03, 0x7f},
    {0x07, 0x44, 0x11, 0x03, 0x7f},
    {0x0d, 0x42, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x0f, 0x02, 0x6e},
    {0x12, 0x43, 0x44, 0x43, 0x9f},
    {0x05, 0x42, 0x0f, 0x02, 0x6e},
    {0x15, 0x43, 0x44, 0x43, 0x9f},
    {0x11, 0x42, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x51, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x02, 0x6e},
    {0x01, 0x42, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x11, 0x43, 0x7f},
    {0xc3, 0x4f, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x11, 0x43, 0x7f},
    {0x04, 0x42, 0x0f, 0x02, 0x6e},
    {0x02, 0x42, 0x0f, 0x02, 0x6e},
    {0x07, 0x42, 0x0f, 0x02, 0x6e},
    {0xf4, 0x44, 0x03, 0xf5, 0xff},
    {0x03, 0x40, 0xb5, 0x00, 0xee},
    {0x0b, 0x47, 0x02, 0xf5, 0xae},
    {0x05, 0x40, 0xb5, 0x00, 0xee},
    {0x0c, 0x45, 0x42, 0xb5, 0xae},
    {0x09, 0x47, 0x02, 0xf5, 0xae},
    {0x9a, 0x86, 0xb5, 0x00, 0x0e},
    {0x06, 0x40, 0xb5, 0x00, 0xee},
    {0x14, 0x44, 0x42, 0xf5, 0xae},
    {0xc2, 0x60, 0x03, 0xf5, 0xff},
    {0x18, 0x44, 0x42, 0xf5, 0xae},
    {0x0e, 0x45, 0x42, 0xb5, 0xae},
    {0x1c, 0x44, 0x42, 0xf5, 0xae},
    {0x04, 0x40, 0xb5, 0x00, 0xee},
    {0x02, 0x40, 0xb5, 0x00, 0xee},
    {0x07, 0x40, 0xb5, 0x00, 0xee},
    {0x17, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x86, 0xb5, 0x6e},
    {0x1b, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x86, 0xb5, 0x6e},
    {0x67, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x45, 0x42, 0xb5, 0xae},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x86, 0xb5, 0x6e},
    {0x13, 0x44, 0x42, 0xf5, 0xae},
    {0x08, 0x47, 0x02, 0xf5, 0xae},
    {0x77, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x60, 0x03, 0xf5, 0xff},
    {0x0a, 0x47, 0x02, 0xf5, 0xae},
    {0x04, 0x43, 0x86, 0xb5, 0x6e},
    {0x02, 0x43, 0x86, 0xb5, 0x6e},
    {0x07, 0x43, 0x86, 0xb5, 0x6e},
    {0x6d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x84, 0xb5, 0x7e},
    {0x0b, 0x43, 0x84, 0xf5, 0x7e},
    {0x05, 0x41, 0x84, 0xb5, 0x7e},
    {0x75, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x84, 0xf5, 0x7e},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x84, 0xb5, 0x7e},
    {0x63, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x45, 0x42, 0xb5, 0xae},
    {0x7f, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x84, 0xb5, 0x7e},
    {0x02, 0x41, 0x84, 0xb5, 0x7e},
    {0x07, 0x41, 0x84, 0xb5, 0x7e},
    {0x0d, 0x45, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x86, 0xb5, 0x6e},
    {0xd8, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x86, 0xb5, 0x6e},
    {0x6b, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x45, 0x42, 0xb5, 0xae},
    {0xd4, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x86, 0xb5, 0x6e},
    {0x01, 0x45, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x84, 0xf5, 0x7e},
    {0x83, 0x86, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x86, 0xb5, 0x6e},
    {0x02, 0x42, 0x86, 0xb5, 0x6e},
    {0x07, 0x42, 0x86, 0xb5, 0x6e},
    {0x5d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x7a, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x7a, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x84, 0xb5, 0x7e},
    {0x0b, 0x42, 0x84, 0xf5, 0x7e},
    {0x05, 0x44, 0x84, 0xb5, 0x7e},
    {0x1a, 0x44, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x84, 0xf5, 0x7e},
    {0xcc, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x84, 0xb5, 0x7e},
    {0x65, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0xc1, 0x42, 0xb5, 0x0e},
    {0x19, 0x44, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x84, 0xb5, 0x7e},
    {0x02, 0x44, 0x84, 0xb5, 0x7e},
    {0x07, 0x44, 0x84, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0x84, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x84, 0xf5, 0x7e},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x42, 0xb5, 0x0e},
    {0x0a, 0x42, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0x03, 0x9f},
    {0x0b, 0x45, 0x04, 0x43, 0x9f},
    {0x05, 0x47, 0x04, 0x03, 0x9f},
    {0x0c, 0x44, 0x44, 0x03, 0x9f},
    {0x09, 0x45, 0x04, 0x43, 0x9f},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0x03, 0x9f},
    {0x14, 0x42, 0x44, 0x43, 0x9f},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0x43, 0x9f},
    {0x0e, 0x44, 0x44, 0x03, 0x9f},
    {0x1c, 0x42, 0x44, 0x43, 0x9f},
    {0x04, 0x47, 0x04, 0x03, 0x9f},
    {0x02, 0x47, 0x04, 0x03, 0x9f},
    {0x07, 0x47, 0x04, 0x03, 0x9f},
    {0x17, 0x42, 0x44, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x44, 0x03, 0x9f},
    {0xce, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0x43, 0x9f},
    {0x08, 0x45, 0x04, 0x43, 0x9f},
    {0x78, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x03, 0x46, 0xbf},
    {0x74, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x44, 0x03, 0x9f},
    {0x40, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x44, 0x03, 0x9f},
    {0xd6, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0x03, 0x9f},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x46, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x03, 0x46, 0xbf},
    {0x72, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x03, 0x46, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0x43, 0x9f},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0x43, 0x9f},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x03, 0x46, 0xbf},
    {0x19, 0x42, 0x44, 0x43, 0x9f},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0x43, 0x9f},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x02, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x0e},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x02, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xc1, 0xb5, 0x00, 0x0e},
    {0x02, 0xc1, 0xb5, 0x00, 0x0e},
    {0x07, 0xc1, 0xb5, 0x00, 0x0e},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x02, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x02, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0d, 0x02, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x02, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x02, 0x6e},
    {0x02, 0x43, 0x0d, 0x02, 0x6e},
    {0x07, 0x43, 0x0d, 0x02, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0x03, 0x7f},
    {0x0b, 0x43, 0x01, 0x43, 0x7f},
    {0x05, 0x41, 0x01, 0x03, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0x43, 0x7f},
    {0xc7, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x01, 0x03, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0x03, 0x7f},
    {0x02, 0x41, 0x01, 0x03, 0x7f},
    {0x07, 0x41, 0x01, 0x03, 0x7f},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x02, 0x6e},
    {0xd7, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0d, 0x02, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0d, 0x02, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0x43, 0x7f},
    {0xc3, 0x4d, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0x43, 0x7f},
    {0x04, 0x42, 0x0d, 0x02, 0x6e},
    {0x02, 0x42, 0x0d, 0x02, 0x6e},
    {0x07, 0x42, 0x0d, 0x02, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0x03, 0x8f},
    {0x0b, 0x41, 0x0a, 0x43, 0x8f},
    {0x05, 0x46, 0x0a, 0x03, 0x8f},
    {0x0c, 0x43, 0x4a, 0x03, 0x8f},
    {0x09, 0x41, 0x0a, 0x43, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0x03, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0x03, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0x03, 0x8f},
    {0x02, 0x46, 0x0a, 0x03, 0x8f},
    {0x07, 0x46, 0x0a, 0x03, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0x03, 0x8f},
    {0xcf, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0x43, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0x43, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0x03, 0x7f},
    {0x0b, 0x42, 0x01, 0x43, 0x7f},
    {0x05, 0x44, 0x01, 0x03, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0x43, 0x7f},
    {0xcb, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x01, 0x03, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0x03, 0x8f},
    {0xc5, 0x4a, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x01, 0x03, 0x7f},
    {0x02, 0x44, 0x01, 0x03, 0x7f},
    {0x07, 0x44, 0x01, 0x03, 0x7f},
    {0x0d, 0x43, 0x4a, 0x03, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0x03, 0x8f},
    {0xc4, 0x41, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0x03, 0x8f},
    {0x08, 0x42, 0x01, 0x43, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0x43, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0x43, 0x9f},
    {0x05, 0x49, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0x03, 0x9f},
    {0x09, 0x46, 0x02, 0x43, 0x9f},
    {0xda, 0x52, 0x03, 0xf5, 0xff},
    {0x06, 0x49, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0x43, 0x9f},
    {0xc2, 0x5a, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0x43, 0x9f},
    {0x0e, 0x41, 0x42, 0x03, 0x9f},
    {0x1c, 0x43, 0x42, 0x43, 0x9f},
    {0x04, 0x49, 0x07, 0xb5, 0xae},
    {0x02, 0x49, 0x07, 0xb5, 0xae},
    {0x07, 0x49, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0x43, 0x9f},
    {0x03, 0x43, 0x12, 0x03, 0x6f},
    {0x1b, 0x43, 0x42, 0x43, 0x9f},
    {0x05, 0x43, 0x12, 0x03, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0x03, 0x9f},
    {0xcd, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x12, 0x03, 0x6f},
    {0x13, 0x43, 0x42, 0x43, 0x9f},
    {0x08, 0x46, 0x02, 0x43, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0x43, 0x9f},
    {0x04, 0x43, 0x12, 0x03, 0x6f},
    {0x02, 0x43, 0x12, 0x03, 0x6f},
    {0x07, 0x43, 0x12, 0x03, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x02, 0x7e},
    {0x0b, 0x43, 0x08, 0x42, 0x7e},
    {0x05, 0x41, 0x08, 0x02, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x42, 0x7e},
    {0xc8, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x08, 0x02, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0x03, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x02, 0x7e},
    {0x02, 0x41, 0x08, 0x02, 0x7e},
    {0x07, 0x41, 0x08, 0x02, 0x7e},
    {0x0d, 0x41, 0x42, 0x03, 0x9f},
    {0x03, 0x42, 0x12, 0x03, 0x6f},
    {0xd9, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x12, 0x03, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0x03, 0x9f},
    {0xd5, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x12, 0x03, 0x6f},
    {0x01, 0x41, 0x42, 0x03, 0x9f},
    {0x08, 0x43, 0x08, 0x42, 0x7e},
    {0xc3, 0x52, 0x03, 0xf5, 0xff},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x12, 0x03, 0x6f},
    {0x02, 0x42, 0x12, 0x03, 0x6f},
    {0x07, 0x42, 0x12, 0x03, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0x03, 0x8f},
    {0x0b, 0x44, 0x0a, 0x43, 0x8f},
    {0x05, 0x45, 0x0a, 0x03, 0x8f},
    {0x0c, 0x42, 0x4a, 0x03, 0x8f},
    {0x09, 0x44, 0x0a, 0x43, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0x03, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0x03, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0x03, 0x8f},
    {0x02, 0x45, 0x0a, 0x03, 0x8f},
    {0x07, 0x45, 0x0a, 0x03, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0x03, 0x8f},
    {0xd1, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0x43, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0x43, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0x43, 0x9f},
    {0x03, 0x44, 0x08, 0x02, 0x7e},
    {0x0b, 0x42, 0x08, 0x42, 0x7e},
    {0x05, 0x44, 0x08, 0x02, 0x7e},
    {0x1a, 0x43, 0x42, 0x43, 0x9f},
    {0x09, 0x42, 0x08, 0x42, 0x7e},
    {0xca, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x08, 0x02, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0x43, 0x9f},
    {0x0f, 0x42, 0x4a, 0x03, 0x8f},
    {0xc6, 0x4a, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x08, 0x02, 0x7e},
    {0x02, 0x44, 0x08, 0x02, 0x7e},
    {0x07, 0x44, 0x08, 0x02, 0x7e},
    {0x0d, 0x42, 0x4a, 0x03, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0x43, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0x43, 0x9f},
    {0x11, 0x42, 0x4a, 0x03, 0x8f},
    {0xc4, 0x48, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0x03, 0x8f},
    {0x08, 0x42, 0x08, 0x42, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0x03, 0xf5, 0xff},
    {0x03, 0x4b, 0x06, 0xb5, 0xbf},
    {0x0b, 0x48, 0x06, 0xf5, 0xbf},
    {0x05, 0x4b, 0x06, 0xb5, 0xbf},
    {0x0c, 0x46, 0x47, 0xb5, 0xae},
    {0x09, 0x48, 0x06, 0xf5, 0xbf},
    {0xda, 0x55, 0x03, 0xf5, 0xff},
    {0x06, 0x4b, 0x06, 0xb5, 0xbf},
    {0x14, 0x41, 0x47, 0xf5, 0xae},
    {0xc2, 0x66, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x47, 0xf5, 0xae},
    {0x0e, 0x46, 0x47, 0xb5, 0xae},
    {0x1c, 0x41, 0x47, 0xf5, 0xae},
    {0x04, 0x4b, 0x06, 0xb5, 0xbf},
    {0x02, 0x4b, 0x06, 0xb5, 0xbf},
    {0x07, 0x4b, 0x06, 0xb5, 0xbf},
    {0x17, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0x03, 0x6f},
    {0x1b, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0x03, 0x6f},
    {0x67, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x46, 0x47, 0xb5, 0xae},
    {0xc9, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0x03, 0x6f},
    {0x13, 0x41, 0x47, 0xf5, 0xae},
    {0x08, 0x48, 0x06, 0xf5, 0xbf},
    {0x77, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x66, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0x06, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0x03, 0x6f},
    {0x02, 0x43, 0x15, 0x03, 0x6f},
    {0x07, 0x43, 0x15, 0x03, 0x6f},
    {0x6d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0xc2, 0x47, 0xb5, 0x0e},
    {0x73, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x46, 0x47, 0xb5, 0xae},
    {0x7f, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0x03, 0x6f},
    {0xd8, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x15, 0x03, 0x6f},
    {0x6b, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x46, 0x47, 0xb5, 0xae},
    {0xd4, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x15, 0x03, 0x6f},
    {0x01, 0x46, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0x03, 0xf5, 0xff},
    {0xc1, 0xc2, 0x47, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0x03, 0x6f},
    {0x02, 0x42, 0x15, 0x03, 0x6f},
    {0x07, 0x42, 0x15, 0x03, 0x6f},
    {0x5d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x02, 0x8e},
    {0x0b, 0x41, 0x04, 0x42, 0x8e},
    {0x05, 0x46, 0x04, 0x02, 0x8e},
    {0x0c, 0x43, 0x44, 0x02, 0x8e},
    {0x09, 0x41, 0x04, 0x42, 0x8e},
    {0xda, 0x51, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x02, 0x8e},
    {0x61, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x59, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x02, 0x8e},
    {0x7d, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x02, 0x8e},
    {0x02, 0x46, 0x04, 0x02, 0x8e},
    {0x07, 0x46, 0x04, 0x02, 0x8e},
    {0x6f, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x02, 0x6e},
    {0x7b, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x02, 0x6e},
    {0x69, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x02, 0x8e},
    {0xd0, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x11, 0x02, 0x6e},
    {0x5f, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x42, 0x8e},
    {0x79, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x59, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x11, 0x02, 0x6e},
    {0x02, 0x43, 0x11, 0x02, 0x6e},
    {0x07, 0x43, 0x11, 0x02, 0x6e},
    {0x16, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x02, 0x8e},
    {0xc5, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x11, 0x02, 0x6e},
    {0x12, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x02, 0x6e},
    {0x15, 0x41, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x02, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x02, 0x6e},
    {0x01, 0x43, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x02, 0x6e},
    {0x02, 0x42, 0x11, 0x02, 0x6e},
    {0x07, 0x42, 0x11, 0x02, 0x6e},
    {0xde, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0x03, 0x9f},
    {0x0b, 0x45, 0x02, 0x43, 0x9f},
    {0x05, 0x47, 0x02, 0x03, 0x9f},
    {0x0c, 0x44, 0x42, 0x03, 0x9f},
    {0x09, 0x45, 0x02, 0x43, 0x9f},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0x03, 0x9f},
    {0x14, 0x42, 0x42, 0x43, 0x9f},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0x43, 0x9f},
    {0x0e, 0x44, 0x42, 0x03, 0x9f},
    {0x1c, 0x42, 0x42, 0x43, 0x9f},
    {0x04, 0x47, 0x02, 0x03, 0x9f},
    {0x02, 0x47, 0x02, 0x03, 0x9f},
    {0x07, 0x47, 0x02, 0x03, 0x9f},
    {0x17, 0x42, 0x42, 0x43, 0x9f},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0x43, 0x9f},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0x03, 0x9f},
    {0xce, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0x43, 0x9f},
    {0x08, 0x45, 0x02, 0x43, 0x9f},
    {0x78, 0x03, 0x07, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0x43, 0x9f},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0x03, 0x9f},
    {0x40, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0x03, 0x9f},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0x03, 0x9f},
    {0xd6, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0x03, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x02, 0x8e},
    {0x0b, 0x44, 0x04, 0x42, 0x8e},
    {0x05, 0x45, 0x04, 0x02, 0x8e},
    {0x0c, 0x42, 0x44, 0x02, 0x8e},
    {0x09, 0x44, 0x04, 0x42, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x02, 0x8e},
    {0x62, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x02, 0x8e},
    {0x7e, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x02, 0x8e},
    {0x02, 0x45, 0x04, 0x02, 0x8e},
    {0x07, 0x45, 0x04, 0x02, 0x8e},
    {0x70, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x02, 0x8e},
    {0xd2, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x42, 0x8e},
    {0x7a, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0x43, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0x43, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0x43, 0x9f},
    {0x0f, 0x42, 0x44, 0x02, 0x8e},
    {0xc6, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0x43, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0x43, 0x9f},
    {0x11, 0x42, 0x44, 0x02, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x46, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x02, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x46, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x46, 0xf5, 0xbf},
    {0x0e, 0x47, 0x46, 0xb5, 0xbf},
    {0x1c, 0x45, 0x46, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x02, 0x6e},
    {0x1b, 0x45, 0x46, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x02, 0x6e},
    {0x67, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x47, 0x46, 0xb5, 0xbf},
    {0xc9, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x02, 0x6e},
    {0x13, 0x45, 0x46, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x02, 0x6e},
    {0x02, 0x43, 0x01, 0x02, 0x6e},
    {0x07, 0x43, 0x01, 0x02, 0x6e},
    {0x6d, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x02, 0x7e},
    {0x0b, 0x43, 0x0a, 0x42, 0x7e},
    {0x05, 0x41, 0x0a, 0x02, 0x7e},
    {0x75, 0x04, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x42, 0x7e},
    {0xc7, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x02, 0x7e},
    {0x63, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x46, 0xbf},
    {0x73, 0x04, 0x06, 0xb5, 0xbf},
    {0x0f, 0x47, 0x46, 0xb5, 0xbf},
    {0x7f, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x02, 0x7e},
    {0x02, 0x41, 0x0a, 0x02, 0x7e},
    {0x07, 0x41, 0x0a, 0x02, 0x7e},
    {0x0d, 0x47, 0x46, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x02, 0x6e},
    {0xd7, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x02, 0x6e},
    {0x6b, 0x04, 0x06, 0xb5, 0xbf},
    {0x11, 0x47, 0x46, 0xb5, 0xbf},
    {0xd3, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x02, 0x6e},
    {0x01, 0x47, 0x46, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x42, 0x7e},
    {0xc3, 0x41, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x46, 0xbf},
    {0x0a, 0x43, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x01, 0x02, 0x6e},
    {0x02, 0x42, 0x01, 0x02, 0x6e},
    {0x07, 0x42, 0x01, 0x02, 0x6e},
    {0x5d, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x02, 0x8e},
    {0x0b, 0x41, 0x02, 0x42, 0x8e},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x0c, 0x43, 0x42, 0x02, 0x8e},
    {0x09, 0x41, 0x02, 0x42, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x61, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x52, 0x02, 0xb5, 0xee},
    {0x71, 0x04, 0x06, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x02, 0x8e},
    {0x7d, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x02, 0x8e},
    {0x02, 0x46, 0x02, 0x02, 0x8e},
    {0x07, 0x46, 0x02, 0x02, 0x8e},
    {0x6f, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x02, 0x8e},
    {0xcf, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x06, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x42, 0x8e},
    {0x79, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x52, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x02, 0x7e},
    {0x0b, 0x42, 0x0a, 0x42, 0x7e},
    {0x05, 0x44, 0x0a, 0x02, 0x7e},
    {0x1a, 0x45, 0x46, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x42, 0x7e},
    {0xcb, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x02, 0x7e},
    {0x65, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x46, 0xbf},
    {0x19, 0x45, 0x46, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x02, 0x8e},
    {0xc5, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x02, 0x7e},
    {0x02, 0x44, 0x0a, 0x02, 0x7e},
    {0x07, 0x44, 0x0a, 0x02, 0x7e},
    {0x0d, 0x43, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x46, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x46, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x02, 0x8e},
    {0xc4, 0x4a, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x0a, 0x42, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0x43, 0x9f},
    {0x05, 0x48, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0x03, 0x9f},
    {0x09, 0x46, 0x07, 0x43, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0x43, 0x9f},
    {0xc2, 0x55, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0x43, 0x9f},
    {0x0e, 0x41, 0x47, 0x03, 0x9f},
    {0x1c, 0x43, 0x47, 0x43, 0x9f},
    {0x04, 0x48, 0x07, 0xb5, 0xae},
    {0x02, 0x48, 0x07, 0xb5, 0xae},
    {0x07, 0x48, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0x43, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0x43, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0x03, 0x9f},
    {0xcd, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0x43, 0x9f},
    {0x08, 0x46, 0x07, 0x43, 0x9f},
    {0x78, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x55, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0x43, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x06, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0x03, 0x9f},
    {0x40, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0x03, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x06, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0x03, 0x9f},
    {0xd5, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x02, 0x8e},
    {0x0b, 0x44, 0x02, 0x42, 0x8e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x0c, 0x42, 0x42, 0x02, 0x8e},
    {0x09, 0x44, 0x02, 0x42, 0x8e},
    {0xda, 0xc1, 0x46, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x62, 0x04, 0x06, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x06, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x02, 0x8e},
    {0x7e, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x02, 0x8e},
    {0x02, 0x45, 0x02, 0x02, 0x8e},
    {0x07, 0x45, 0x02, 0x02, 0x8e},
    {0x70, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x06, 0x6f},
    {0x7c, 0x04, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x06, 0x6f},
    {0x6a, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x02, 0x8e},
    {0xd1, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x06, 0x6f},
    {0x60, 0x04, 0x06, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x42, 0x8e},
    {0x7a, 0x04, 0x06, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x81, 0x06, 0x6f},
    {0x02, 0x43, 0x81, 0x06, 0x6f},
    {0x07, 0x43, 0x81, 0x06, 0x6f},
    {0x16, 0x43, 0x47, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x46, 0xbf},
    {0x19, 0x43, 0x47, 0x43, 0x9f},
    {0x0f, 0x42, 0x42, 0x02, 0x8e},
    {0xc6, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x81, 0x06, 0x6f},
    {0x12, 0x43, 0x47, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0x06, 0x6f},
    {0x15, 0x43, 0x47, 0x43, 0x9f},
    {0x11, 0x42, 0x42, 0x02, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x06, 0x6f},
    {0x01, 0x42, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x46, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x06, 0x6f},
    {0x02, 0x42, 0x81, 0x06, 0x6f},
    {0x07, 0x42, 0x81, 0x06, 0x6f},
    {0xf4, 0x47, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0x06, 0xb5, 0xbf},
    {0x0b, 0x47, 0x07, 0xf5, 0xae},
    {0x05, 0x4c, 0x06, 0xb5, 0xbf},
    {0x0c, 0x45, 0x47, 0xb5, 0xae},
    {0x09, 0x47, 0x07, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x06, 0xb5, 0xbf},
    {0x14, 0x44, 0x47, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x47, 0xf5, 0xae},
    {0x0e, 0x45, 0x47, 0xb5, 0xae},
    {0x1c, 0x44, 0x47, 0xf5, 0xae},
    {0x04, 0x4c, 0x06, 0xb5, 0xbf},
    {0x02, 0x4c, 0x06, 0xb5, 0xbf},
    {0x07, 0x4c, 0x06, 0xb5, 0xbf},
    {0x17, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x45, 0x47, 0xb5, 0xae},
    {0xc9, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x47, 0xf5, 0xae},
    {0x08, 0x47, 0x07, 0xf5, 0xae},
    {0x77, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x07, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x45, 0x47, 0xb5, 0xae},
    {0x7f, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x45, 0x47, 0xb5, 0xae},
    {0xd4, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x02, 0x8e},
    {0x0b, 0x41, 0x07, 0x42, 0x8e},
    {0x05, 0x46, 0x07, 0x02, 0x8e},
    {0x0c, 0x43, 0x47, 0x02, 0x8e},
    {0x09, 0x41, 0x07, 0x42, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x02, 0x8e},
    {0x61, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc3, 0x46, 0xf5, 0x0f},
    {0x71, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x02, 0x8e},
    {0x7d, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x02, 0x8e},
    {0x02, 0x46, 0x07, 0x02, 0x8e},
    {0x07, 0x46, 0x07, 0x02, 0x8e},
    {0x6f, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x02, 0x8e},
    {0xd0, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x42, 0x8e},
    {0x79, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0xc3, 0x46, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc1, 0x47, 0xb5, 0x0e},
    {0x19, 0x44, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x02, 0x8e},
    {0xc5, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x02, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x47, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0x03, 0x9f},
    {0x0b, 0x45, 0x07, 0x43, 0x9f},
    {0x05, 0x47, 0x07, 0x03, 0x9f},
    {0x0c, 0x44, 0x47, 0x03, 0x9f},
    {0x09, 0x45, 0x07, 0x43, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0x03, 0x9f},
    {0x14, 0x42, 0x47, 0x43, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0x43, 0x9f},
    {0x0e, 0x44, 0x47, 0x03, 0x9f},
    {0x1c, 0x42, 0x47, 0x43, 0x9f},
    {0x04, 0x47, 0x07, 0x03, 0x9f},
    {0x02, 0x47, 0x07, 0x03, 0x9f},
    {0x07, 0x47, 0x07, 0x03, 0x9f},
    {0x17, 0x42, 0x47, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0x03, 0x9f},
    {0xce, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0x43, 0x9f},
    {0x08, 0x45, 0x07, 0x43, 0x9f},
    {0x78, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x46, 0xbf},
    {0x74, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0x03, 0x9f},
    {0x40, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0x03, 0x9f},
    {0xd6, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x46, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x02, 0x8e},
    {0x0b, 0x44, 0x07, 0x42, 0x8e},
    {0x05, 0x45, 0x07, 0x02, 0x8e},
    {0x0c, 0x42, 0x47, 0x02, 0x8e},
    {0x09, 0x44, 0x07, 0x42, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x02, 0x8e},
    {0x62, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x46, 0xbf},
    {0x72, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x02, 0x8e},
    {0x7e, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x02, 0x8e},
    {0x02, 0x45, 0x07, 0x02, 0x8e},
    {0x07, 0x45, 0x07, 0x02, 0x8e},
    {0x70, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x02, 0x8e},
    {0xd2, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x42, 0x8e},
    {0x7a, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x46, 0xbf},
    {0x0a, 0x44, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x46, 0xbf},
    {0x19, 0x42, 0x47, 0x43, 0x9f},
    {0x0f, 0x42, 0x47, 0x02, 0x8e},
    {0xc6, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0x43, 0x9f},
    {0x11, 0x42, 0x47, 0x02, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0f},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf2, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb2, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf2, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb2, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb2, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf2, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb2, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb2, 0x00, 0x66},
    {0x02, 0x43, 0xb2, 0x00, 0x66},
    {0x07, 0x43, 0xb2, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf2, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0xf2, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb2, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb2, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf2, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb2, 0x00, 0x66},
    {0x01, 0xf2, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0xb2, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0xb2, 0x00, 0x66},
    {0x02, 0x42, 0xb2, 0x00, 0x66},
    {0x07, 0x42, 0xb2, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0xf5, 0x40, 0x0b},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0xf5, 0x40, 0x0b},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0xb5, 0x6b},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0xb5, 0x6b},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0xb5, 0x6b},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0xf5, 0x40, 0x0b},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0xb5, 0x6b},
    {0x02, 0x43, 0x0b, 0xb5, 0x6b},
    {0x07, 0x43, 0x0b, 0xb5, 0x6b},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0xb5, 0x7b},
    {0x0b, 0x43, 0x03, 0xf5, 0x7b},
    {0x05, 0x41, 0x03, 0xb5, 0x7b},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0xf5, 0x7b},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0xb5, 0x7b},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0xb5, 0x7b},
    {0x02, 0x41, 0x03, 0xb5, 0x7b},
    {0x07, 0x41, 0x03, 0xb5, 0x7b},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0xb5, 0x6b},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0xb5, 0x6b},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0xb5, 0x6b},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0xf5, 0x7b},
    {0xc3, 0x0b, 0xf5, 0x40, 0x0b},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x0b, 0xb5, 0x6b},
    {0x02, 0x42, 0x0b, 0xb5, 0x6b},
    {0x07, 0x42, 0x0b, 0xb5, 0x6b},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0xb5, 0x7b},
    {0x0b, 0x42, 0x03, 0xf5, 0x7b},
    {0x05, 0x44, 0x03, 0xb5, 0x7b},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0xf5, 0x7b},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0xb5, 0x7b},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0xb5, 0x7b},
    {0x02, 0x44, 0x03, 0xb5, 0x7b},
    {0x07, 0x44, 0x03, 0xb5, 0x7b},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0xf5, 0x7b},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0xb5, 0x00, 0x0c},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0xb5, 0x00, 0x0c},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0xb5, 0x6c},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0xb5, 0x6c},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0c, 0xb5, 0x6c},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0xb5, 0x00, 0x0c},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0xb5, 0x6c},
    {0x02, 0x43, 0x0c, 0xb5, 0x6c},
    {0x07, 0x43, 0x0c, 0xb5, 0x6c},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0b, 0xf5, 0x7c},
    {0x05, 0x41, 0x0b, 0xb5, 0x7c},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc7, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0b, 0xb5, 0x7c},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0xb5, 0x7c},
    {0x02, 0x41, 0x0b, 0xb5, 0x7c},
    {0x07, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0xb5, 0x6c},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0xb5, 0x6c},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0xb5, 0x6c},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x4c, 0xb5, 0x00, 0x0c},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x0c, 0xb5, 0x6c},
    {0x02, 0x42, 0x0c, 0xb5, 0x6c},
    {0x07, 0x42, 0x0c, 0xb5, 0x6c},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0xb5, 0x8c},
    {0x0b, 0x41, 0x03, 0xf5, 0x8c},
    {0x05, 0x46, 0x03, 0xb5, 0x8c},
    {0x0c, 0x43, 0x43, 0xb5, 0x8c},
    {0x09, 0x41, 0x03, 0xf5, 0x8c},
    {0xda, 0x09, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x03, 0xb5, 0x8c},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0xb5, 0x8c},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0xb5, 0x8c},
    {0x02, 0x46, 0x03, 0xb5, 0x8c},
    {0x07, 0x46, 0x03, 0xb5, 0x8c},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0xb5, 0x6b},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0xb5, 0x6b},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0xb5, 0x6b},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0xf5, 0x8c},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x09, 0xb5, 0x6b},
    {0x02, 0x43, 0x09, 0xb5, 0x6b},
    {0x07, 0x43, 0x09, 0xb5, 0x6b},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0b, 0xf5, 0x7c},
    {0x05, 0x44, 0x0b, 0xb5, 0x7c},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0xf5, 0x7c},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0xb5, 0x7c},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0xb5, 0x8c},
    {0xc5, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0b, 0xb5, 0x7c},
    {0x02, 0x44, 0x0b, 0xb5, 0x7c},
    {0x07, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x43, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x09, 0xb5, 0x6b},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0xb5, 0x6b},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0xb5, 0x8c},
    {0xc4, 0x4b, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x09, 0xb5, 0x6b},
    {0x01, 0x43, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x09, 0xf5, 0x40, 0x0b},
    {0xc1, 0x0e, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x09, 0xb5, 0x6b},
    {0x02, 0x42, 0x09, 0xb5, 0x6b},
    {0x07, 0x42, 0x09, 0xb5, 0x6b},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0xb5, 0x00, 0x0c},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0xb5, 0x00, 0x0c},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0xb5, 0x7b},
    {0x0b, 0x43, 0x05, 0xf5, 0x7b},
    {0x05, 0x41, 0x05, 0xb5, 0x7b},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0xf5, 0x7b},
    {0xc8, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x05, 0xb5, 0x7b},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0xb5, 0x7b},
    {0x02, 0x41, 0x05, 0xb5, 0x7b},
    {0x07, 0x41, 0x05, 0xb5, 0x7b},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0xf5, 0x7b},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0xb5, 0x8c},
    {0x0b, 0x44, 0x03, 0xf5, 0x8c},
    {0x05, 0x45, 0x03, 0xb5, 0x8c},
    {0x0c, 0x42, 0x43, 0xb5, 0x8c},
    {0x09, 0x44, 0x03, 0xf5, 0x8c},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0xb5, 0x8c},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0xb5, 0x8c},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0xb5, 0x8c},
    {0x02, 0x45, 0x03, 0xb5, 0x8c},
    {0x07, 0x45, 0x03, 0xb5, 0x8c},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0xf5, 0x8c},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0xb5, 0x7b},
    {0x0b, 0x42, 0x05, 0xf5, 0x7b},
    {0x05, 0x44, 0x05, 0xb5, 0x7b},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0xf5, 0x7b},
    {0xca, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x05, 0xb5, 0x7b},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0xb5, 0x8c},
    {0xc6, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x05, 0xb5, 0x7b},
    {0x02, 0x44, 0x05, 0xb5, 0x7b},
    {0x07, 0x44, 0x05, 0xb5, 0x7b},
    {0x0d, 0x42, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0xb5, 0x8c},
    {0xc4, 0x05, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x05, 0xf5, 0x7b},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0xb5, 0x40, 0x0d},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0xb5, 0x00, 0x0c},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0xb5, 0x6d},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0xb5, 0x6d},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x14, 0xb5, 0x6d},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0xb5, 0x00, 0x0c},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0xb5, 0x6d},
    {0x02, 0x43, 0x14, 0xb5, 0x6d},
    {0x07, 0x43, 0x14, 0xb5, 0x6d},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0c, 0xf5, 0x7d},
    {0x05, 0x41, 0x0c, 0xb5, 0x7d},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc7, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0c, 0xb5, 0x7d},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0xb5, 0x7d},
    {0x02, 0x41, 0x0c, 0xb5, 0x7d},
    {0x07, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0xb5, 0x6d},
    {0xd7, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x14, 0xb5, 0x6d},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x14, 0xb5, 0x6d},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc3, 0x54, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x14, 0xb5, 0x6d},
    {0x02, 0x42, 0x14, 0xb5, 0x6d},
    {0x07, 0x42, 0x14, 0xb5, 0x6d},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0b, 0xf5, 0x8d},
    {0x05, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4b, 0xb5, 0x8d},
    {0x09, 0x41, 0x0b, 0xf5, 0x8d},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0xb5, 0x8d},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0xb5, 0x00, 0x0c},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0xb5, 0x8d},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0xb5, 0x8d},
    {0x02, 0x46, 0x0b, 0xb5, 0x8d},
    {0x07, 0x46, 0x0b, 0xb5, 0x8d},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0xb5, 0x8d},
    {0xcf, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0xf5, 0x8d},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0c, 0xf5, 0x7d},
    {0x05, 0x44, 0x0c, 0xb5, 0x7d},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0xf5, 0x7d},
    {0xcb, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0c, 0xb5, 0x7d},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc5, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0c, 0xb5, 0x7d},
    {0x02, 0x44, 0x0c, 0xb5, 0x7d},
    {0x07, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x4c, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x0c, 0xf5, 0x7d},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0xb5, 0x9d},
    {0x09, 0x46, 0x03, 0xf5, 0x9d},
    {0xda, 0x58, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0xf5, 0x9d},
    {0xc2, 0x67, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x43, 0xf5, 0x9d},
    {0x0e, 0x41, 0x43, 0xb5, 0x9d},
    {0x1c, 0x43, 0x43, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x18, 0xb5, 0x6d},
    {0x1b, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x18, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0xb5, 0x9d},
    {0xcd, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x18, 0xb5, 0x6d},
    {0x13, 0x43, 0x43, 0xf5, 0x9d},
    {0x08, 0x46, 0x03, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x18, 0xb5, 0x6d},
    {0x02, 0x43, 0x18, 0xb5, 0x6d},
    {0x07, 0x43, 0x18, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0xb5, 0x7c},
    {0x0b, 0x43, 0x09, 0xf5, 0x7c},
    {0x05, 0x41, 0x09, 0xb5, 0x7c},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0xf5, 0x7c},
    {0xc8, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x09, 0xb5, 0x7c},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0xf5, 0x40, 0x0b},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0xb5, 0x7c},
    {0x02, 0x41, 0x09, 0xb5, 0x7c},
    {0x07, 0x41, 0x09, 0xb5, 0x7c},
    {0x0d, 0x41, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x18, 0xb5, 0x6d},
    {0xd9, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x18, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0xb5, 0x9d},
    {0xd5, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x18, 0xb5, 0x6d},
    {0x01, 0x41, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x09, 0xf5, 0x7c},
    {0xc3, 0x58, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x18, 0xb5, 0x6d},
    {0x02, 0x42, 0x18, 0xb5, 0x6d},
    {0x07, 0x42, 0x18, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0b, 0xf5, 0x8d},
    {0x05, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4b, 0xb5, 0x8d},
    {0x09, 0x44, 0x0b, 0xf5, 0x8d},
    {0xda, 0x4e, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x0b, 0xb5, 0x8d},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0xb5, 0x8d},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0xb5, 0x8d},
    {0x02, 0x45, 0x0b, 0xb5, 0x8d},
    {0x07, 0x45, 0x0b, 0xb5, 0x8d},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0xb5, 0x8d},
    {0xd1, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0e, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0xf5, 0x8d},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x0e, 0xb5, 0x6c},
    {0x02, 0x43, 0x0e, 0xb5, 0x6c},
    {0x07, 0x43, 0x0e, 0xb5, 0x6c},
    {0x16, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x09, 0xb5, 0x7c},
    {0x0b, 0x42, 0x09, 0xf5, 0x7c},
    {0x05, 0x44, 0x09, 0xb5, 0x7c},
    {0x1a, 0x43, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x09, 0xf5, 0x7c},
    {0xca, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x09, 0xb5, 0x7c},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc6, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x09, 0xb5, 0x7c},
    {0x02, 0x44, 0x09, 0xb5, 0x7c},
    {0x07, 0x44, 0x09, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x0e, 0xb5, 0x6c},
    {0x12, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x0e, 0xb5, 0x6c},
    {0x15, 0x43, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x49, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x0e, 0xb5, 0x6c},
    {0x01, 0x42, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x09, 0xf5, 0x7c},
    {0xc3, 0x4e, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x0e, 0xb5, 0x6c},
    {0x02, 0x42, 0x0e, 0xb5, 0x6c},
    {0x07, 0x42, 0x0e, 0xb5, 0x6c},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0xb5, 0x40, 0x0d},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0xb5, 0x00, 0x0c},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0xb5, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0xb5, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x1c, 0xb5, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0xb5, 0x00, 0x0c},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0xb5, 0x6d},
    {0x02, 0x43, 0x1c, 0xb5, 0x6d},
    {0x07, 0x43, 0x1c, 0xb5, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0xb5, 0x6d},
    {0xd8, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x1c, 0xb5, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x1c, 0xb5, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0xb5, 0x40, 0x0d},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0xb5, 0x6d},
    {0x02, 0x42, 0x1c, 0xb5, 0x6d},
    {0x07, 0x42, 0x1c, 0xb5, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0xb5, 0x8c},
    {0x0b, 0x41, 0x05, 0xf5, 0x8c},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x0c, 0x43, 0x45, 0xb5, 0x8c},
    {0x09, 0x41, 0x05, 0xf5, 0x8c},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0xb5, 0x8c},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0xb5, 0x8c},
    {0x02, 0x46, 0x05, 0xb5, 0x8c},
    {0x07, 0x46, 0x05, 0xb5, 0x8c},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0xb5, 0x8c},
    {0xd0, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0xf5, 0x8c},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0xb5, 0x8c},
    {0xc5, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0xb5, 0x8c},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0xb5, 0x9d},
    {0x0b, 0x45, 0x03, 0xf5, 0x9d},
    {0x05, 0x47, 0x03, 0xb5, 0x9d},
    {0x0c, 0x44, 0x43, 0xb5, 0x9d},
    {0x09, 0x45, 0x03, 0xf5, 0x9d},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0xb5, 0x9d},
    {0x14, 0x42, 0x43, 0xf5, 0x9d},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0xf5, 0x9d},
    {0x0e, 0x44, 0x43, 0xb5, 0x9d},
    {0x1c, 0x42, 0x43, 0xf5, 0x9d},
    {0x04, 0x47, 0x03, 0xb5, 0x9d},
    {0x02, 0x47, 0x03, 0xb5, 0x9d},
    {0x07, 0x47, 0x03, 0xb5, 0x9d},
    {0x17, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0xb5, 0x9d},
    {0xce, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0xf5, 0x9d},
    {0x08, 0x45, 0x03, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0xb5, 0x7b},
    {0x0b, 0x43, 0x06, 0xf5, 0x7b},
    {0x05, 0x41, 0x06, 0xb5, 0x7b},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0xf5, 0x7b},
    {0xc8, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x06, 0xb5, 0x7b},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0xb5, 0x7b},
    {0x02, 0x41, 0x06, 0xb5, 0x7b},
    {0x07, 0x41, 0x06, 0xb5, 0x7b},
    {0x0d, 0x44, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0xb5, 0x9d},
    {0xd6, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0xf5, 0x7b},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0xb5, 0x8c},
    {0x0b, 0x44, 0x05, 0xf5, 0x8c},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x0c, 0x42, 0x45, 0xb5, 0x8c},
    {0x09, 0x44, 0x05, 0xf5, 0x8c},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0xb5, 0x8c},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0xb5, 0x8c},
    {0x02, 0x45, 0x05, 0xb5, 0x8c},
    {0x07, 0x45, 0x05, 0xb5, 0x8c},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0xb5, 0x8c},
    {0xd2, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0xf5, 0x8c},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0xb5, 0x7b},
    {0x0b, 0x42, 0x06, 0xf5, 0x7b},
    {0x05, 0x44, 0x06, 0xb5, 0x7b},
    {0x1a, 0x42, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0xf5, 0x7b},
    {0xca, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x06, 0xb5, 0x7b},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x45, 0xb5, 0x8c},
    {0xc6, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x06, 0xb5, 0x7b},
    {0x02, 0x44, 0x06, 0xb5, 0x7b},
    {0x07, 0x44, 0x06, 0xb5, 0x7b},
    {0x0d, 0x42, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x45, 0xb5, 0x8c},
    {0xc4, 0x06, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x06, 0xf5, 0x7b},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x52, 0xb5, 0x00, 0xee},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0x52, 0xb5, 0x00, 0xee},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0xb5, 0x40, 0x0d},
    {0x06, 0x52, 0xb5, 0x00, 0xee},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0xb5, 0x40, 0x0d},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0x52, 0xb5, 0x00, 0xee},
    {0x02, 0x52, 0xb5, 0x00, 0xee},
    {0x07, 0x52, 0xb5, 0x00, 0xee},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0xb5, 0x6d},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0xb5, 0x6d},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x17, 0xb5, 0x6d},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0xb5, 0x6d},
    {0x02, 0x43, 0x17, 0xb5, 0x6d},
    {0x07, 0x43, 0x17, 0xb5, 0x6d},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x14, 0xb5, 0x7e},
    {0x0b, 0x43, 0x14, 0xf5, 0x7e},
    {0x05, 0x41, 0x14, 0xb5, 0x7e},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x14, 0xf5, 0x7e},
    {0xc7, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x14, 0xb5, 0x7e},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x14, 0xb5, 0x7e},
    {0x02, 0x41, 0x14, 0xb5, 0x7e},
    {0x07, 0x41, 0x14, 0xb5, 0x7e},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0xb5, 0x6d},
    {0xd7, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x17, 0xb5, 0x6d},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0xd3, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x17, 0xb5, 0x6d},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x14, 0xf5, 0x7e},
    {0xc3, 0x57, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x17, 0xb5, 0x6d},
    {0x02, 0x42, 0x17, 0xb5, 0x6d},
    {0x07, 0x42, 0x17, 0xb5, 0x6d},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0c, 0xf5, 0x8e},
    {0x05, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4c, 0xb5, 0x8e},
    {0x09, 0x41, 0x0c, 0xf5, 0x8e},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x0c, 0xb5, 0x8e},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4c, 0xb5, 0x8e},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0c, 0xb5, 0x8e},
    {0x02, 0x46, 0x0c, 0xb5, 0x8e},
    {0x07, 0x46, 0x0c, 0xb5, 0x8e},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4c, 0xb5, 0x8e},
    {0xcf, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0c, 0xf5, 0x8e},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x14, 0xb5, 0x7e},
    {0x0b, 0x42, 0x14, 0xf5, 0x7e},
    {0x05, 0x44, 0x14, 0xb5, 0x7e},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x14, 0xf5, 0x7e},
    {0xcb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x14, 0xb5, 0x7e},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc5, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x14, 0xb5, 0x7e},
    {0x02, 0x44, 0x14, 0xb5, 0x7e},
    {0x07, 0x44, 0x14, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc4, 0x54, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x14, 0xf5, 0x7e},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x0b, 0xf5, 0x9e},
    {0x05, 0x49, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x4b, 0xb5, 0x9e},
    {0x09, 0x46, 0x0b, 0xf5, 0x9e},
    {0xda, 0x5b, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x75, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4b, 0xf5, 0x9e},
    {0x04, 0x49, 0x03, 0xb5, 0xae},
    {0x02, 0x49, 0x03, 0xb5, 0xae},
    {0x07, 0x49, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x1b, 0xb5, 0x6d},
    {0x1b, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x1b, 0xb5, 0x6d},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x4b, 0xb5, 0x9e},
    {0xcd, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1b, 0xb5, 0x6d},
    {0x13, 0x43, 0x4b, 0xf5, 0x9e},
    {0x08, 0x46, 0x0b, 0xf5, 0x9e},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x1b, 0xb5, 0x6d},
    {0x02, 0x43, 0x1b, 0xb5, 0x6d},
    {0x07, 0x43, 0x1b, 0xb5, 0x6d},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x4b, 0xb5, 0x9e},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x1b, 0xb5, 0x6d},
    {0xd9, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1b, 0xb5, 0x6d},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x4b, 0xb5, 0x9e},
    {0xd5, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1b, 0xb5, 0x6d},
    {0x01, 0x41, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0xb5, 0x6d},
    {0x02, 0x42, 0x1b, 0xb5, 0x6d},
    {0x07, 0x42, 0x1b, 0xb5, 0x6d},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0c, 0xf5, 0x8e},
    {0x05, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4c, 0xb5, 0x8e},
    {0x09, 0x44, 0x0c, 0xf5, 0x8e},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x0c, 0xb5, 0x8e},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4c, 0xb5, 0x8e},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0c, 0xb5, 0x8e},
    {0x02, 0x45, 0x0c, 0xb5, 0x8e},
    {0x07, 0x45, 0x0c, 0xb5, 0x8e},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4c, 0xb5, 0x8e},
    {0xd1, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0c, 0xf5, 0x8e},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4c, 0xb5, 0x8e},
    {0xc6, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x4c, 0xb5, 0x8e},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x43, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x67, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x43, 0xf5, 0xae},
    {0xc2, 0x63, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x43, 0xf5, 0xae},
    {0x0e, 0x46, 0x43, 0xb5, 0xae},
    {0x1c, 0x41, 0x43, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x27, 0xb5, 0x6e},
    {0x1b, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x27, 0xb5, 0x6e},
    {0x67, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x46, 0x43, 0xb5, 0xae},
    {0xc9, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x27, 0xb5, 0x6e},
    {0x13, 0x41, 0x43, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x63, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x27, 0xb5, 0x6e},
    {0x02, 0x43, 0x27, 0xb5, 0x6e},
    {0x07, 0x43, 0x27, 0xb5, 0x6e},
    {0x6d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x18, 0xb5, 0x7e},
    {0x0b, 0x43, 0x18, 0xf5, 0x7e},
    {0x05, 0x41, 0x18, 0xb5, 0x7e},
    {0x75, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x18, 0xf5, 0x7e},
    {0xc7, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x18, 0xb5, 0x7e},
    {0x63, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0xc2, 0x43, 0xb5, 0x0e},
    {0x73, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x46, 0x43, 0xb5, 0xae},
    {0x7f, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x18, 0xb5, 0x7e},
    {0x02, 0x41, 0x18, 0xb5, 0x7e},
    {0x07, 0x41, 0x18, 0xb5, 0x7e},
    {0x0d, 0x46, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x27, 0xb5, 0x6e},
    {0xd8, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x27, 0xb5, 0x6e},
    {0x6b, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x46, 0x43, 0xb5, 0xae},
    {0xd4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x27, 0xb5, 0x6e},
    {0x01, 0x46, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x18, 0xf5, 0x7e},
    {0xc3, 0x67, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x43, 0xb5, 0x0e},
    {0x0a, 0x43, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x27, 0xb5, 0x6e},
    {0x02, 0x42, 0x27, 0xb5, 0x6e},
    {0x07, 0x42, 0x27, 0xb5, 0x6e},
    {0x5d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x09, 0xb5, 0x8d},
    {0x0b, 0x41, 0x09, 0xf5, 0x8d},
    {0x05, 0x46, 0x09, 0xb5, 0x8d},
    {0x0c, 0x43, 0x49, 0xb5, 0x8d},
    {0x09, 0x41, 0x09, 0xf5, 0x8d},
    {0xda, 0x50, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x09, 0xb5, 0x8d},
    {0x61, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x73, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x49, 0xb5, 0x8d},
    {0x7d, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x09, 0xb5, 0x8d},
    {0x02, 0x46, 0x09, 0xb5, 0x8d},
    {0x07, 0x46, 0x09, 0xb5, 0x8d},
    {0x6f, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0xb5, 0x6c},
    {0x7b, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0xb5, 0x6c},
    {0x69, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x49, 0xb5, 0x8d},
    {0xd0, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x10, 0xb5, 0x6c},
    {0x5f, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x09, 0xf5, 0x8d},
    {0x79, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x73, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x10, 0xb5, 0x6c},
    {0x02, 0x43, 0x10, 0xb5, 0x6c},
    {0x07, 0x43, 0x10, 0xb5, 0x6c},
    {0x16, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x18, 0xb5, 0x7e},
    {0x0b, 0x42, 0x18, 0xf5, 0x7e},
    {0x05, 0x44, 0x18, 0xb5, 0x7e},
    {0x1a, 0x41, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x18, 0xf5, 0x7e},
    {0xcc, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x18, 0xb5, 0x7e},
    {0x65, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x0f, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x49, 0xb5, 0x8d},
    {0xc5, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x18, 0xb5, 0x7e},
    {0x02, 0x44, 0x18, 0xb5, 0x7e},
    {0x07, 0x44, 0x18, 0xb5, 0x7e},
    {0x0d, 0x43, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x10, 0xb5, 0x6c},
    {0x12, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0xb5, 0x6c},
    {0x15, 0x41, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x49, 0xb5, 0x8d},
    {0xc4, 0x58, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0xb5, 0x6c},
    {0x01, 0x43, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x18, 0xf5, 0x7e},
    {0xc3, 0x50, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0xb5, 0x6c},
    {0x02, 0x42, 0x10, 0xb5, 0x6c},
    {0x07, 0x42, 0x10, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0b, 0xf5, 0x9e},
    {0x05, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4b, 0xb5, 0x9e},
    {0x09, 0x45, 0x0b, 0xf5, 0x9e},
    {0x9a, 0x89, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0b, 0xb5, 0x9e},
    {0x14, 0x42, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x7f, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4b, 0xf5, 0x9e},
    {0x04, 0x47, 0x0b, 0xb5, 0x9e},
    {0x02, 0x47, 0x0b, 0xb5, 0x9e},
    {0x07, 0x47, 0x0b, 0xb5, 0x9e},
    {0x17, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x89, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x89, 0xb5, 0x6e},
    {0x68, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x4b, 0xb5, 0x9e},
    {0xce, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x89, 0xb5, 0x6e},
    {0x13, 0x42, 0x4b, 0xf5, 0x9e},
    {0x08, 0x45, 0x0b, 0xf5, 0x9e},
    {0x78, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x7f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x89, 0xb5, 0x6e},
    {0x02, 0x43, 0x89, 0xb5, 0x6e},
    {0x07, 0x43, 0x89, 0xb5, 0x6e},
    {0x6e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0e, 0xf5, 0x7d},
    {0x05, 0x41, 0x0e, 0xb5, 0x7d},
    {0x76, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x0e, 0xf5, 0x7d},
    {0xc8, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0e, 0xb5, 0x7d},
    {0x64, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x4b, 0xb5, 0x9e},
    {0x40, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x0e, 0xb5, 0x7d},
    {0x02, 0x41, 0x0e, 0xb5, 0x7d},
    {0x07, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x44, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x89, 0xb5, 0x6e},
    {0xdb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x89, 0xb5, 0x6e},
    {0x6c, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x4b, 0xb5, 0x9e},
    {0xd6, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x89, 0xb5, 0x6e},
    {0x01, 0x44, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x0e, 0xf5, 0x7d},
    {0x83, 0x89, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x89, 0xb5, 0x6e},
    {0x02, 0x42, 0x89, 0xb5, 0x6e},
    {0x07, 0x42, 0x89, 0xb5, 0x6e},
    {0x5e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x09, 0xb5, 0x8d},
    {0x0b, 0x44, 0x09, 0xf5, 0x8d},
    {0x05, 0x45, 0x09, 0xb5, 0x8d},
    {0x0c, 0x42, 0x49, 0xb5, 0x8d},
    {0x09, 0x44, 0x09, 0xf5, 0x8d},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0xb5, 0x8d},
    {0x62, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x49, 0xb5, 0x8d},
    {0x7e, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x09, 0xb5, 0x8d},
    {0x02, 0x45, 0x09, 0xb5, 0x8d},
    {0x07, 0x45, 0x09, 0xb5, 0x8d},
    {0x70, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x49, 0xb5, 0x8d},
    {0xd2, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x09, 0xf5, 0x8d},
    {0x7a, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0e, 0xf5, 0x7d},
    {0x05, 0x44, 0x0e, 0xb5, 0x7d},
    {0x1a, 0x42, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x0e, 0xf5, 0x7d},
    {0xca, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0e, 0xb5, 0x7d},
    {0x66, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x49, 0xb5, 0x8d},
    {0xc6, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0e, 0xb5, 0x7d},
    {0x02, 0x44, 0x0e, 0xb5, 0x7d},
    {0x07, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x42, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x49, 0xb5, 0x8d},
    {0xc4, 0x4e, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x0e, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x51, 0xb5, 0x00, 0xee},
    {0x0b, 0x4f, 0xb5, 0x40, 0xee},
    {0x05, 0x51, 0xb5, 0x00, 0xee},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4f, 0xb5, 0x40, 0xee},
    {0xda, 0x53, 0xb5, 0x40, 0x0d},
    {0x06, 0x51, 0xb5, 0x00, 0xee},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0xf5, 0x40, 0x0b},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x51, 0xb5, 0x00, 0xee},
    {0x02, 0x51, 0xb5, 0x00, 0xee},
    {0x07, 0x51, 0xb5, 0x00, 0xee},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0xb5, 0x6d},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0xb5, 0x6d},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x13, 0xb5, 0x6d},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4f, 0xb5, 0x40, 0xee},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0xf5, 0x40, 0x0b},
    {0x0a, 0x4f, 0xb5, 0x40, 0xee},
    {0x04, 0x43, 0x13, 0xb5, 0x6d},
    {0x02, 0x43, 0x13, 0xb5, 0x6d},
    {0x07, 0x43, 0x13, 0xb5, 0x6d},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1c, 0xf5, 0x7e},
    {0x05, 0x41, 0x1c, 0xb5, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1c, 0xf5, 0x7e},
    {0x87, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x1c, 0xb5, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1c, 0xb5, 0x7e},
    {0x02, 0x41, 0x1c, 0xb5, 0x7e},
    {0x07, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0xb5, 0x6d},
    {0xd7, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x13, 0xb5, 0x6d},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x13, 0xb5, 0x6d},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x53, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x13, 0xb5, 0x6d},
    {0x02, 0x42, 0x13, 0xb5, 0x6d},
    {0x07, 0x42, 0x13, 0xb5, 0x6d},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x41, 0x9a, 0xf5, 0x8e},
    {0x05, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x43, 0xda, 0xb5, 0x8e},
    {0x09, 0x41, 0x9a, 0xf5, 0x8e},
    {0xda, 0x08, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x9a, 0xb5, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x97, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xda, 0xb5, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x9a, 0xb5, 0x8e},
    {0x02, 0x46, 0x9a, 0xb5, 0x8e},
    {0x07, 0x46, 0x9a, 0xb5, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0xb5, 0x6b},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0xb5, 0x6b},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xda, 0xb5, 0x8e},
    {0xcf, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0xb5, 0x6b},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x9a, 0xf5, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x97, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x08, 0xb5, 0x6b},
    {0x02, 0x43, 0x08, 0xb5, 0x6b},
    {0x07, 0x43, 0x08, 0xb5, 0x6b},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1c, 0xf5, 0x7e},
    {0x05, 0x44, 0x1c, 0xb5, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1c, 0xf5, 0x7e},
    {0xcb, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x1c, 0xb5, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xda, 0xb5, 0x8e},
    {0x85, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x1c, 0xb5, 0x7e},
    {0x02, 0x44, 0x1c, 0xb5, 0x7e},
    {0x07, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x43, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x08, 0xb5, 0x6b},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0xb5, 0x6b},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xda, 0xb5, 0x8e},
    {0xc4, 0x5c, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x08, 0xb5, 0x6b},
    {0x01, 0x43, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x08, 0xf5, 0x40, 0x0b},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x08, 0xb5, 0x6b},
    {0x02, 0x42, 0x08, 0xb5, 0x6b},
    {0x07, 0x42, 0x08, 0xb5, 0x6b},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x05, 0xf5, 0x9d},
    {0x05, 0x48, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x45, 0xb5, 0x9d},
    {0x09, 0x46, 0x05, 0xf5, 0x9d},
    {0xda, 0x77, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x45, 0xf5, 0x9d},
    {0xc2, 0x6b, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x45, 0xf5, 0x9d},
    {0x0e, 0x41, 0x45, 0xb5, 0x9d},
    {0x1c, 0x43, 0x45, 0xf5, 0x9d},
    {0x04, 0x48, 0x03, 0xb5, 0xae},
    {0x02, 0x48, 0x03, 0xb5, 0xae},
    {0x07, 0x48, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x37, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x37, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0xb5, 0x9d},
    {0xcd, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x37, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0xf5, 0x9d},
    {0x08, 0x46, 0x05, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x37, 0xb5, 0x6e},
    {0x02, 0x43, 0x37, 0xb5, 0x6e},
    {0x07, 0x43, 0x37, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0xb5, 0x7b},
    {0x0b, 0x43, 0x04, 0xf5, 0x7b},
    {0x05, 0x41, 0x04, 0xb5, 0x7b},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0xf5, 0x7b},
    {0x88, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x04, 0xb5, 0x7b},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0xf5, 0x40, 0x0b},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0xb5, 0x7b},
    {0x02, 0x41, 0x04, 0xb5, 0x7b},
    {0x07, 0x41, 0x04, 0xb5, 0x7b},
    {0x0d, 0x41, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x37, 0xb5, 0x6e},
    {0xd9, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x37, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0xb5, 0x9d},
    {0xd5, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x37, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0xf5, 0x7b},
    {0xc3, 0x77, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x37, 0xb5, 0x6e},
    {0x02, 0x42, 0x37, 0xb5, 0x6e},
    {0x07, 0x42, 0x37, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x44, 0x9a, 0xf5, 0x8e},
    {0x05, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x42, 0xda, 0xb5, 0x8e},
    {0x09, 0x44, 0x9a, 0xf5, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x9a, 0xb5, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x93, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xda, 0xb5, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x9a, 0xb5, 0x8e},
    {0x02, 0x45, 0x9a, 0xb5, 0x8e},
    {0x07, 0x45, 0x9a, 0xb5, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xda, 0xb5, 0x8e},
    {0xd1, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x9a, 0xf5, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x93, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0xb5, 0x7b},
    {0x0b, 0x42, 0x04, 0xf5, 0x7b},
    {0x05, 0x44, 0x04, 0xb5, 0x7b},
    {0x1a, 0x43, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0xf5, 0x7b},
    {0x8a, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x04, 0xb5, 0x7b},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0xda, 0xb5, 0x8e},
    {0x86, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x04, 0xb5, 0x7b},
    {0x02, 0x44, 0x04, 0xb5, 0x7b},
    {0x07, 0x44, 0x04, 0xb5, 0x7b},
    {0x0d, 0x42, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0xda, 0xb5, 0x8e},
    {0xc4, 0x04, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x04, 0xf5, 0x7b},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x03, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x43, 0xb5, 0xae},
    {0x09, 0x47, 0x03, 0xf5, 0xae},
    {0xda, 0x0a, 0xf5, 0x40, 0x0b},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x43, 0xf5, 0xae},
    {0xc2, 0x01, 0xf5, 0x40, 0x0b},
    {0x18, 0x44, 0x43, 0xf5, 0xae},
    {0x0e, 0x45, 0x43, 0xb5, 0xae},
    {0x1c, 0x44, 0x43, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0xb5, 0x6b},
    {0x1b, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0xb5, 0x6b},
    {0x67, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x45, 0x43, 0xb5, 0xae},
    {0xc9, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0xb5, 0x6b},
    {0x13, 0x44, 0x43, 0xf5, 0xae},
    {0x08, 0x47, 0x03, 0xf5, 0xae},
    {0x77, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x01, 0xf5, 0x40, 0x0b},
    {0x0a, 0x47, 0x03, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0xb5, 0x6b},
    {0x02, 0x43, 0x0a, 0xb5, 0x6b},
    {0x07, 0x43, 0x0a, 0xb5, 0x6b},
    {0x6d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0xb5, 0x7b},
    {0x0b, 0x43, 0x02, 0xf5, 0x7b},
    {0x05, 0x41, 0x02, 0xb5, 0x7b},
    {0x75, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0xf5, 0x7b},
    {0xc7, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0xb5, 0x7b},
    {0x63, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x45, 0x43, 0xb5, 0xae},
    {0x7f, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0xb5, 0x7b},
    {0x02, 0x41, 0x02, 0xb5, 0x7b},
    {0x07, 0x41, 0x02, 0xb5, 0x7b},
    {0x0d, 0x45, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0xb5, 0x6b},
    {0xd8, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0xb5, 0x6b},
    {0x6b, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x45, 0x43, 0xb5, 0xae},
    {0xd4, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0xb5, 0x6b},
    {0x01, 0x45, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0xf5, 0x7b},
    {0xc3, 0x0a, 0xf5, 0x40, 0x0b},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x0a, 0xb5, 0x6b},
    {0x02, 0x42, 0x0a, 0xb5, 0x6b},
    {0x07, 0x42, 0x0a, 0xb5, 0x6b},
    {0x5d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0xb5, 0x8c},
    {0x0b, 0x41, 0x06, 0xf5, 0x8c},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x0c, 0x43, 0x46, 0xb5, 0x8c},
    {0x09, 0x41, 0x06, 0xf5, 0x8c},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x61, 0x02, 0x03, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0xb5, 0x8c},
    {0x7d, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0xb5, 0x8c},
    {0x02, 0x46, 0x06, 0xb5, 0x8c},
    {0x07, 0x46, 0x06, 0xb5, 0x8c},
    {0x6f, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0xb5, 0x8c},
    {0xd0, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0xf5, 0x8c},
    {0x79, 0x02, 0x03, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0xb5, 0x7b},
    {0x0b, 0x42, 0x02, 0xf5, 0x7b},
    {0x05, 0x44, 0x02, 0xb5, 0x7b},
    {0x1a, 0x44, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0xf5, 0x7b},
    {0xcc, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0xb5, 0x7b},
    {0x65, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0xc1, 0x43, 0xb5, 0x0e},
    {0x19, 0x44, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0xb5, 0x8c},
    {0xc5, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0xb5, 0x7b},
    {0x02, 0x44, 0x02, 0xb5, 0x7b},
    {0x07, 0x44, 0x02, 0xb5, 0x7b},
    {0x0d, 0x43, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0xb5, 0x8c},
    {0xc4, 0x02, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0xf5, 0x7b},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x43, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0xb5, 0x9d},
    {0x0b, 0x45, 0x05, 0xf5, 0x9d},
    {0x05, 0x47, 0x05, 0xb5, 0x9d},
    {0x0c, 0x44, 0x45, 0xb5, 0x9d},
    {0x09, 0x45, 0x05, 0xf5, 0x9d},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0xb5, 0x9d},
    {0x14, 0x42, 0x45, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0xf5, 0x9d},
    {0x0e, 0x44, 0x45, 0xb5, 0x9d},
    {0x1c, 0x42, 0x45, 0xf5, 0x9d},
    {0x04, 0x47, 0x05, 0xb5, 0x9d},
    {0x02, 0x47, 0x05, 0xb5, 0x9d},
    {0x07, 0x47, 0x05, 0xb5, 0x9d},
    {0x17, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x45, 0xb5, 0x9d},
    {0xce, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0xf5, 0x9d},
    {0x08, 0x45, 0x05, 0xf5, 0x9d},
    {0x78, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0xb5, 0x7b},
    {0x0b, 0x43, 0x07, 0xf5, 0x7b},
    {0x05, 0x41, 0x07, 0xb5, 0x7b},
    {0x76, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0xf5, 0x7b},
    {0xc8, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0xb5, 0x7b},
    {0x64, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x45, 0xb5, 0x9d},
    {0x40, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0xb5, 0x7b},
    {0x02, 0x41, 0x07, 0xb5, 0x7b},
    {0x07, 0x41, 0x07, 0xb5, 0x7b},
    {0x0d, 0x44, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x45, 0xb5, 0x9d},
    {0xd6, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0xf5, 0x7b},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0xb5, 0x8c},
    {0x0b, 0x44, 0x06, 0xf5, 0x8c},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x0c, 0x42, 0x46, 0xb5, 0x8c},
    {0x09, 0x44, 0x06, 0xf5, 0x8c},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x62, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0xb5, 0x8c},
    {0x7e, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0xb5, 0x8c},
    {0x02, 0x45, 0x06, 0xb5, 0x8c},
    {0x07, 0x45, 0x06, 0xb5, 0x8c},
    {0x70, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0xb5, 0x8c},
    {0xd2, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0xf5, 0x8c},
    {0x7a, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0xb5, 0x7b},
    {0x0b, 0x42, 0x07, 0xf5, 0x7b},
    {0x05, 0x44, 0x07, 0xb5, 0x7b},
    {0x1a, 0x42, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0xf5, 0x7b},
    {0xca, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0xb5, 0x7b},
    {0x66, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0x46, 0xb5, 0x8c},
    {0xc6, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0xb5, 0x7b},
    {0x02, 0x44, 0x07, 0xb5, 0x7b},
    {0x07, 0x44, 0x07, 0xb5, 0x7b},
    {0x0d, 0x42, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0x46, 0xb5, 0x8c},
    {0xc4, 0x07, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0xf5, 0x7b},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4d, 0xf5, 0x00, 0xee},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4a, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0xb5, 0x40, 0x0d},
    {0x18, 0x4a, 0xf5, 0x40, 0xee},
    {0x0e, 0x4d, 0xf5, 0x00, 0xee},
    {0x1c, 0x4a, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2d, 0xb5, 0x6e},
    {0x1b, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2d, 0xb5, 0x6e},
    {0x67, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x4d, 0xf5, 0x00, 0xee},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2d, 0xb5, 0x6e},
    {0x13, 0x4a, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2d, 0xb5, 0x6e},
    {0x02, 0x43, 0x2d, 0xb5, 0x6e},
    {0x07, 0x43, 0x2d, 0xb5, 0x6e},
    {0x6d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x17, 0xb5, 0x7e},
    {0x0b, 0x43, 0x17, 0xf5, 0x7e},
    {0x05, 0x41, 0x17, 0xb5, 0x7e},
    {0x75, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x17, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x17, 0xb5, 0x7e},
    {0x63, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x4d, 0xf5, 0x00, 0xee},
    {0x7f, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x17, 0xb5, 0x7e},
    {0x02, 0x41, 0x17, 0xb5, 0x7e},
    {0x07, 0x41, 0x17, 0xb5, 0x7e},
    {0x0d, 0x4d, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x2d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2d, 0xb5, 0x6e},
    {0x6b, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x4d, 0xf5, 0x00, 0xee},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2d, 0xb5, 0x6e},
    {0x01, 0x4d, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x17, 0xf5, 0x7e},
    {0xc3, 0x6d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x2d, 0xb5, 0x6e},
    {0x02, 0x42, 0x2d, 0xb5, 0x6e},
    {0x07, 0x42, 0x2d, 0xb5, 0x6e},
    {0x5d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x17, 0xb5, 0x7e},
    {0x0b, 0x42, 0x17, 0xf5, 0x7e},
    {0x05, 0x44, 0x17, 0xb5, 0x7e},
    {0x1a, 0x4a, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x17, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x17, 0xb5, 0x7e},
    {0x65, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4a, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x17, 0xb5, 0x7e},
    {0x02, 0x44, 0x17, 0xb5, 0x7e},
    {0x07, 0x44, 0x17, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4a, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x57, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x17, 0xf5, 0x7e},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x09, 0xb5, 0x00, 0xee},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x09, 0xb5, 0x00, 0xee},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x75, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x35, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x35, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x35, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x35, 0xb5, 0x6e},
    {0x02, 0x43, 0x35, 0xb5, 0x6e},
    {0x07, 0x43, 0x35, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1b, 0xf5, 0x7e},
    {0x05, 0x41, 0x1b, 0xb5, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x1b, 0xf5, 0x7e},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x1b, 0xb5, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x1b, 0xb5, 0x7e},
    {0x02, 0x41, 0x1b, 0xb5, 0x7e},
    {0x07, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x35, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x35, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x35, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x75, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x35, 0xb5, 0x6e},
    {0x02, 0x42, 0x35, 0xb5, 0x6e},
    {0x07, 0x42, 0x35, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1b, 0xf5, 0x7e},
    {0x05, 0x44, 0x1b, 0xb5, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x1b, 0xf5, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1b, 0xb5, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x1b, 0xb5, 0x7e},
    {0x02, 0x44, 0x1b, 0xb5, 0x7e},
    {0x07, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x5b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x87, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x87, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x87, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x87, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x87, 0xb5, 0x6e},
    {0x02, 0x43, 0x87, 0xb5, 0x6e},
    {0x07, 0x43, 0x87, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x87, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x87, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x87, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x87, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x87, 0xb5, 0x6e},
    {0x02, 0x42, 0x87, 0xb5, 0x6e},
    {0x07, 0x42, 0x87, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x63, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x6f, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x23, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x23, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x23, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x23, 0xb5, 0x6e},
    {0x02, 0x43, 0x23, 0xb5, 0x6e},
    {0x07, 0x43, 0x23, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x28, 0xb5, 0x7f},
    {0x0b, 0x43, 0x28, 0xf5, 0x7f},
    {0x05, 0x41, 0x28, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x28, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x28, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x28, 0xb5, 0x7f},
    {0x02, 0x41, 0x28, 0xb5, 0x7f},
    {0x07, 0x41, 0x28, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x23, 0xb5, 0x6e},
    {0xd7, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x23, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x23, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x28, 0xf5, 0x7f},
    {0xc3, 0x63, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x28, 0xf5, 0x7f},
    {0x04, 0x42, 0x23, 0xb5, 0x6e},
    {0x02, 0x42, 0x23, 0xb5, 0x6e},
    {0x07, 0x42, 0x23, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7b, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x28, 0xb5, 0x7f},
    {0x0b, 0x42, 0x28, 0xf5, 0x7f},
    {0x05, 0x44, 0x28, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x28, 0xf5, 0x7f},
    {0xcb, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x28, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x28, 0xb5, 0x7f},
    {0x02, 0x44, 0x28, 0xb5, 0x7f},
    {0x07, 0x44, 0x28, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x68, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x28, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x28, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x09, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x49, 0xb5, 0x9e},
    {0x09, 0x46, 0x09, 0xf5, 0x9e},
    {0xda, 0x73, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x49, 0xf5, 0x9e},
    {0xc2, 0x69, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x49, 0xf5, 0x9e},
    {0x0e, 0x41, 0x49, 0xb5, 0x9e},
    {0x1c, 0x43, 0x49, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x33, 0xb5, 0x6e},
    {0x1b, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x33, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x49, 0xb5, 0x9e},
    {0xcd, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x33, 0xb5, 0x6e},
    {0x13, 0x43, 0x49, 0xf5, 0x9e},
    {0x08, 0x46, 0x09, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x69, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x33, 0xb5, 0x6e},
    {0x02, 0x43, 0x33, 0xb5, 0x6e},
    {0x07, 0x43, 0x33, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x10, 0xb5, 0x7d},
    {0x0b, 0x43, 0x10, 0xf5, 0x7d},
    {0x05, 0x41, 0x10, 0xb5, 0x7d},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x10, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x10, 0xb5, 0x7d},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x49, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x10, 0xb5, 0x7d},
    {0x02, 0x41, 0x10, 0xb5, 0x7d},
    {0x07, 0x41, 0x10, 0xb5, 0x7d},
    {0x0d, 0x41, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x33, 0xb5, 0x6e},
    {0xd9, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x33, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x49, 0xb5, 0x9e},
    {0xd5, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x33, 0xb5, 0x6e},
    {0x01, 0x41, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x10, 0xf5, 0x7d},
    {0xc3, 0x73, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x33, 0xb5, 0x6e},
    {0x02, 0x42, 0x33, 0xb5, 0x6e},
    {0x07, 0x42, 0x33, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8f, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0f, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8f, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0xb5, 0x6c},
    {0x02, 0x43, 0x0f, 0xb5, 0x6c},
    {0x07, 0x43, 0x0f, 0xb5, 0x6c},
    {0x16, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x10, 0xb5, 0x7d},
    {0x0b, 0x42, 0x10, 0xf5, 0x7d},
    {0x05, 0x44, 0x10, 0xb5, 0x7d},
    {0x1a, 0x43, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x10, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x10, 0xb5, 0x7d},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x10, 0xb5, 0x7d},
    {0x02, 0x44, 0x10, 0xb5, 0x7d},
    {0x07, 0x44, 0x10, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0xb5, 0x6c},
    {0x12, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x0f, 0xb5, 0x6c},
    {0x15, 0x43, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x50, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0xb5, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x10, 0xf5, 0x7d},
    {0xc3, 0x4f, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0xb5, 0x6c},
    {0x02, 0x42, 0x0f, 0xb5, 0x6c},
    {0x07, 0x42, 0x0f, 0xb5, 0x6c},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3f, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3f, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x3f, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3f, 0xb5, 0x6e},
    {0x02, 0x43, 0x3f, 0xb5, 0x6e},
    {0x07, 0x43, 0x3f, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3f, 0xb5, 0x6e},
    {0xd8, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3f, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3f, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x7f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x3f, 0xb5, 0x6e},
    {0x02, 0x42, 0x3f, 0xb5, 0x6e},
    {0x07, 0x42, 0x3f, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0e, 0xf5, 0x8e},
    {0x05, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4e, 0xb5, 0x8e},
    {0x09, 0x41, 0x0e, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0e, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4e, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0e, 0xb5, 0x8e},
    {0x02, 0x46, 0x0e, 0xb5, 0x8e},
    {0x07, 0x46, 0x0e, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4e, 0xb5, 0x8e},
    {0xd0, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0e, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4e, 0xb5, 0x8e},
    {0xc5, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4e, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x09, 0xb5, 0x9e},
    {0x0b, 0x45, 0x09, 0xf5, 0x9e},
    {0x05, 0x47, 0x09, 0xb5, 0x9e},
    {0x0c, 0x44, 0x49, 0xb5, 0x9e},
    {0x09, 0x45, 0x09, 0xf5, 0x9e},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x09, 0xb5, 0x9e},
    {0x14, 0x42, 0x49, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x49, 0xf5, 0x9e},
    {0x0e, 0x44, 0x49, 0xb5, 0x9e},
    {0x1c, 0x42, 0x49, 0xf5, 0x9e},
    {0x04, 0x47, 0x09, 0xb5, 0x9e},
    {0x02, 0x47, 0x09, 0xb5, 0x9e},
    {0x07, 0x47, 0x09, 0xb5, 0x9e},
    {0x17, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x49, 0xb5, 0x9e},
    {0xce, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x49, 0xf5, 0x9e},
    {0x08, 0x45, 0x09, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x49, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x49, 0xb5, 0x9e},
    {0xd6, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0e, 0xf5, 0x8e},
    {0x05, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4e, 0xb5, 0x8e},
    {0x09, 0x44, 0x0e, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0e, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4e, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0e, 0xb5, 0x8e},
    {0x02, 0x45, 0x0e, 0xb5, 0x8e},
    {0x07, 0x45, 0x0e, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4e, 0xb5, 0x8e},
    {0xd2, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0e, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc6, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0xb5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0xb5, 0x00, 0x0c},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0xb5, 0x6c},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0xb5, 0x6c},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0xb5, 0x6c},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0xb5, 0x00, 0x0c},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0xb5, 0x6c},
    {0x02, 0x43, 0x0d, 0xb5, 0x6c},
    {0x07, 0x43, 0x0d, 0xb5, 0x6c},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x13, 0xb5, 0x7e},
    {0x0b, 0x43, 0x13, 0xf5, 0x7e},
    {0x05, 0x41, 0x13, 0xb5, 0x7e},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x13, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x13, 0xb5, 0x7e},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x13, 0xb5, 0x7e},
    {0x02, 0x41, 0x13, 0xb5, 0x7e},
    {0x07, 0x41, 0x13, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0xb5, 0x6c},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0xb5, 0x6c},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0xb5, 0x6c},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x13, 0xf5, 0x7e},
    {0xc3, 0x4d, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x0d, 0xb5, 0x6c},
    {0x02, 0x42, 0x0d, 0xb5, 0x6c},
    {0x07, 0x42, 0x0d, 0xb5, 0x6c},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x13, 0xb5, 0x7e},
    {0x0b, 0x42, 0x13, 0xf5, 0x7e},
    {0x05, 0x44, 0x13, 0xb5, 0x7e},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x13, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x13, 0xb5, 0x7e},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x13, 0xb5, 0x7e},
    {0x02, 0x44, 0x13, 0xb5, 0x7e},
    {0x07, 0x44, 0x13, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x53, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x13, 0xf5, 0x7e},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x98, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x05, 0xb5, 0xae},
    {0x02, 0x49, 0x05, 0xb5, 0xae},
    {0x07, 0x49, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x98, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x98, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x98, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x98, 0xb5, 0x6f},
    {0x02, 0x43, 0x98, 0xb5, 0x6f},
    {0x07, 0x43, 0x98, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0xb5, 0x7c},
    {0x0b, 0x43, 0x08, 0xf5, 0x7c},
    {0x05, 0x41, 0x08, 0xb5, 0x7c},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0xb5, 0x7c},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0xb5, 0x7c},
    {0x02, 0x41, 0x08, 0xb5, 0x7c},
    {0x07, 0x41, 0x08, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x98, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x98, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x98, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0xf5, 0x7c},
    {0x83, 0x98, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x98, 0xb5, 0x6f},
    {0x02, 0x42, 0x98, 0xb5, 0x6f},
    {0x07, 0x42, 0x98, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8b, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0xb5, 0x7c},
    {0x0b, 0x42, 0x08, 0xf5, 0x7c},
    {0x05, 0x44, 0x08, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0xb5, 0x7c},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0xb5, 0x7c},
    {0x02, 0x44, 0x08, 0xb5, 0x7c},
    {0x07, 0x44, 0x08, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0xf5, 0x7c},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x45, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6b, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x45, 0xf5, 0xae},
    {0xc2, 0x65, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x45, 0xf5, 0xae},
    {0x0e, 0x46, 0x45, 0xb5, 0xae},
    {0x1c, 0x41, 0x45, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x2b, 0xb5, 0x6e},
    {0x1b, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x2b, 0xb5, 0x6e},
    {0x67, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x46, 0x45, 0xb5, 0xae},
    {0xc9, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x2b, 0xb5, 0x6e},
    {0x13, 0x41, 0x45, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x65, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2b, 0xb5, 0x6e},
    {0x02, 0x43, 0x2b, 0xb5, 0x6e},
    {0x07, 0x43, 0x2b, 0xb5, 0x6e},
    {0x6d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x38, 0xb5, 0x7f},
    {0x0b, 0x43, 0x38, 0xf5, 0x7f},
    {0x05, 0x41, 0x38, 0xb5, 0x7f},
    {0x75, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x38, 0xf5, 0x7f},
    {0xc7, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x38, 0xb5, 0x7f},
    {0x63, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0xc2, 0x45, 0xb5, 0x0e},
    {0x73, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x46, 0x45, 0xb5, 0xae},
    {0x7f, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x38, 0xb5, 0x7f},
    {0x02, 0x41, 0x38, 0xb5, 0x7f},
    {0x07, 0x41, 0x38, 0xb5, 0x7f},
    {0x0d, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x2b, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2b, 0xb5, 0x6e},
    {0x6b, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x46, 0x45, 0xb5, 0xae},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2b, 0xb5, 0x6e},
    {0x01, 0x46, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x38, 0xf5, 0x7f},
    {0xc3, 0x6b, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x45, 0xb5, 0x0e},
    {0x0a, 0x43, 0x38, 0xf5, 0x7f},
    {0x04, 0x42, 0x2b, 0xb5, 0x6e},
    {0x02, 0x42, 0x2b, 0xb5, 0x6e},
    {0x07, 0x42, 0x2b, 0xb5, 0x6e},
    {0x5d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0xb5, 0x8c},
    {0x0b, 0x41, 0x04, 0xf5, 0x8c},
    {0x05, 0x46, 0x04, 0xb5, 0x8c},
    {0x0c, 0x43, 0x44, 0xb5, 0x8c},
    {0x09, 0x41, 0x04, 0xf5, 0x8c},
    {0xda, 0x51, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x04, 0xb5, 0x8c},
    {0x61, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x59, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0xb5, 0x8c},
    {0x7d, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0xb5, 0x8c},
    {0x02, 0x46, 0x04, 0xb5, 0x8c},
    {0x07, 0x46, 0x04, 0xb5, 0x8c},
    {0x6f, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0xb5, 0x6c},
    {0x7b, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0xb5, 0x6c},
    {0x69, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0xb5, 0x6c},
    {0x5f, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0xf5, 0x8c},
    {0x79, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x59, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x11, 0xb5, 0x6c},
    {0x02, 0x43, 0x11, 0xb5, 0x6c},
    {0x07, 0x43, 0x11, 0xb5, 0x6c},
    {0x16, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x38, 0xb5, 0x7f},
    {0x0b, 0x42, 0x38, 0xf5, 0x7f},
    {0x05, 0x44, 0x38, 0xb5, 0x7f},
    {0x1a, 0x41, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x38, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x38, 0xb5, 0x7f},
    {0x65, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0xb5, 0x8c},
    {0xc5, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x38, 0xb5, 0x7f},
    {0x02, 0x44, 0x38, 0xb5, 0x7f},
    {0x07, 0x44, 0x38, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x11, 0xb5, 0x6c},
    {0x12, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0xb5, 0x6c},
    {0x15, 0x41, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0xb5, 0x8c},
    {0xc4, 0x78, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0xb5, 0x6c},
    {0x01, 0x43, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x38, 0xf5, 0x7f},
    {0xc3, 0x51, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x38, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0xb5, 0x6c},
    {0x02, 0x42, 0x11, 0xb5, 0x6c},
    {0x07, 0x42, 0x11, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x94, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x94, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x94, 0xb5, 0x6f},
    {0x68, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x94, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x05, 0xb5, 0xae},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x94, 0xb5, 0x6f},
    {0x02, 0x43, 0x94, 0xb5, 0x6f},
    {0x07, 0x43, 0x94, 0xb5, 0x6f},
    {0x6e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x94, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x94, 0xb5, 0x6f},
    {0x6c, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x94, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x94, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x94, 0xb5, 0x6f},
    {0x02, 0x42, 0x94, 0xb5, 0x6f},
    {0x07, 0x42, 0x94, 0xb5, 0x6f},
    {0x5e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0xb5, 0x8c},
    {0x0b, 0x44, 0x04, 0xf5, 0x8c},
    {0x05, 0x45, 0x04, 0xb5, 0x8c},
    {0x0c, 0x42, 0x44, 0xb5, 0x8c},
    {0x09, 0x44, 0x04, 0xf5, 0x8c},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0xb5, 0x8c},
    {0x62, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0xb5, 0x8c},
    {0x7e, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0xb5, 0x8c},
    {0x02, 0x45, 0x04, 0xb5, 0x8c},
    {0x07, 0x45, 0x04, 0xb5, 0x8c},
    {0x70, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0xf5, 0x8c},
    {0x7a, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0xb5, 0x8c},
    {0xc6, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0xb5, 0x8c},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0xb5, 0x00, 0x0c},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0xb5, 0x6c},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0xb5, 0x6c},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x01, 0xb5, 0x6c},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0xb5, 0x6c},
    {0x02, 0x43, 0x01, 0xb5, 0x6c},
    {0x07, 0x43, 0x01, 0xb5, 0x6c},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0a, 0xf5, 0x7c},
    {0x05, 0x41, 0x0a, 0xb5, 0x7c},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc7, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0a, 0xb5, 0x7c},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0xb5, 0x7c},
    {0x02, 0x41, 0x0a, 0xb5, 0x7c},
    {0x07, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0xb5, 0x6c},
    {0xd7, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0xb5, 0x6c},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0xb5, 0x6c},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x41, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x01, 0xb5, 0x6c},
    {0x02, 0x42, 0x01, 0xb5, 0x6c},
    {0x07, 0x42, 0x01, 0xb5, 0x6c},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0xb5, 0x8c},
    {0x0b, 0x41, 0x02, 0xf5, 0x8c},
    {0x05, 0x46, 0x02, 0xb5, 0x8c},
    {0x0c, 0x43, 0x42, 0xb5, 0x8c},
    {0x09, 0x41, 0x02, 0xf5, 0x8c},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0xb5, 0x8c},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0xb5, 0x00, 0x0c},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0xb5, 0x8c},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0xb5, 0x8c},
    {0x02, 0x46, 0x02, 0xb5, 0x8c},
    {0x07, 0x46, 0x02, 0xb5, 0x8c},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0xb5, 0x8c},
    {0xcf, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0xf5, 0x8c},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0a, 0xf5, 0x7c},
    {0x05, 0x44, 0x0a, 0xb5, 0x7c},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0xf5, 0x7c},
    {0xcb, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0xb5, 0x7c},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0xb5, 0x8c},
    {0xc5, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0a, 0xb5, 0x7c},
    {0x02, 0x44, 0x0a, 0xb5, 0x7c},
    {0x07, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x43, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0xb5, 0x8c},
    {0xc4, 0x4a, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x06, 0xf5, 0x9d},
    {0x05, 0x48, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0x46, 0xb5, 0x9d},
    {0x09, 0x46, 0x06, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0x46, 0xf5, 0x9d},
    {0xc2, 0x55, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0x46, 0xf5, 0x9d},
    {0x0e, 0x41, 0x46, 0xb5, 0x9d},
    {0x1c, 0x43, 0x46, 0xf5, 0x9d},
    {0x04, 0x48, 0x05, 0xb5, 0xae},
    {0x02, 0x48, 0x05, 0xb5, 0xae},
    {0x07, 0x48, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x46, 0xb5, 0x9d},
    {0xcd, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0xf5, 0x9d},
    {0x08, 0x46, 0x06, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x46, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x46, 0xb5, 0x9d},
    {0xd5, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0xb5, 0x8c},
    {0x0b, 0x44, 0x02, 0xf5, 0x8c},
    {0x05, 0x45, 0x02, 0xb5, 0x8c},
    {0x0c, 0x42, 0x42, 0xb5, 0x8c},
    {0x09, 0x44, 0x02, 0xf5, 0x8c},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0xb5, 0x8c},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0xb5, 0x8c},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0xb5, 0x8c},
    {0x02, 0x45, 0x02, 0xb5, 0x8c},
    {0x07, 0x45, 0x02, 0xb5, 0x8c},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0xb5, 0x8c},
    {0xd1, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0xf5, 0x8c},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0xb5, 0x8c},
    {0xc6, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0xb5, 0x8c},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x05, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x45, 0xb5, 0xae},
    {0x09, 0x47, 0x05, 0xf5, 0xae},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x45, 0xf5, 0xae},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0x45, 0xf5, 0xae},
    {0x0e, 0x45, 0x45, 0xb5, 0xae},
    {0x1c, 0x44, 0x45, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x45, 0x45, 0xb5, 0xae},
    {0xc9, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0x45, 0xf5, 0xae},
    {0x08, 0x47, 0x05, 0xf5, 0xae},
    {0x77, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x05, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x45, 0x45, 0xb5, 0xae},
    {0x7f, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x45, 0x45, 0xb5, 0xae},
    {0xd4, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0xb5, 0x8c},
    {0x0b, 0x41, 0x07, 0xf5, 0x8c},
    {0x05, 0x46, 0x07, 0xb5, 0x8c},
    {0x0c, 0x43, 0x47, 0xb5, 0x8c},
    {0x09, 0x41, 0x07, 0xf5, 0x8c},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0xb5, 0x8c},
    {0x61, 0x02, 0x05, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0xb5, 0x8c},
    {0x7d, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0xb5, 0x8c},
    {0x02, 0x46, 0x07, 0xb5, 0x8c},
    {0x07, 0x46, 0x07, 0xb5, 0x8c},
    {0x6f, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0xb5, 0x8c},
    {0xd0, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0xf5, 0x8c},
    {0x79, 0x02, 0x05, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc1, 0x45, 0xb5, 0x0e},
    {0x19, 0x44, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0xb5, 0x8c},
    {0xc5, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0xb5, 0x8c},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x45, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0xb5, 0x9d},
    {0x0b, 0x45, 0x06, 0xf5, 0x9d},
    {0x05, 0x47, 0x06, 0xb5, 0x9d},
    {0x0c, 0x44, 0x46, 0xb5, 0x9d},
    {0x09, 0x45, 0x06, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0xb5, 0x9d},
    {0x14, 0x42, 0x46, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0xf5, 0x9d},
    {0x0e, 0x44, 0x46, 0xb5, 0x9d},
    {0x1c, 0x42, 0x46, 0xf5, 0x9d},
    {0x04, 0x47, 0x06, 0xb5, 0x9d},
    {0x02, 0x47, 0x06, 0xb5, 0x9d},
    {0x07, 0x47, 0x06, 0xb5, 0x9d},
    {0x17, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0x46, 0xb5, 0x9d},
    {0xce, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0xf5, 0x9d},
    {0x08, 0x45, 0x06, 0xf5, 0x9d},
    {0x78, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0x46, 0xb5, 0x9d},
    {0x40, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0x46, 0xb5, 0x9d},
    {0xd6, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0xb5, 0x8c},
    {0x0b, 0x44, 0x07, 0xf5, 0x8c},
    {0x05, 0x45, 0x07, 0xb5, 0x8c},
    {0x0c, 0x42, 0x47, 0xb5, 0x8c},
    {0x09, 0x44, 0x07, 0xf5, 0x8c},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0xb5, 0x8c},
    {0x62, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0xb5, 0x8c},
    {0x7e, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0xb5, 0x8c},
    {0x02, 0x45, 0x07, 0xb5, 0x8c},
    {0x07, 0x45, 0x07, 0xb5, 0x8c},
    {0x70, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0xb5, 0x8c},
    {0xd2, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0xf5, 0x8c},
    {0x7a, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0xb5, 0x8c},
    {0xc6, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0xb5, 0x8c},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x1d, 0xb5, 0x6e},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x1d, 0xb5, 0x6e},
    {0x67, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1d, 0xb5, 0x6e},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0b, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1d, 0xb5, 0x6e},
    {0x02, 0x43, 0x1d, 0xb5, 0x6e},
    {0x07, 0x43, 0x1d, 0xb5, 0x6e},
    {0x6d, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x2e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2e, 0xf5, 0x7f},
    {0x05, 0x41, 0x2e, 0xb5, 0x7f},
    {0x75, 0x0b, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x2e, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2e, 0xb5, 0x7f},
    {0x63, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x08, 0xf5, 0xff},
    {0x73, 0x0b, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x2e, 0xb5, 0x7f},
    {0x02, 0x41, 0x2e, 0xb5, 0x7f},
    {0x07, 0x41, 0x2e, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1d, 0xb5, 0x6e},
    {0x6b, 0x0b, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1d, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2e, 0xf5, 0x7f},
    {0xc3, 0x5d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x08, 0xf5, 0xff},
    {0x0a, 0x43, 0x2e, 0xf5, 0x7f},
    {0x04, 0x42, 0x1d, 0xb5, 0x6e},
    {0x02, 0x42, 0x1d, 0xb5, 0x6e},
    {0x07, 0x42, 0x1d, 0xb5, 0x6e},
    {0x5d, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x46, 0xb5, 0xee},
    {0x71, 0x0b, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x06, 0x6e},
    {0x7b, 0x0b, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x06, 0x6e},
    {0x69, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x06, 0x6e},
    {0x5f, 0x0b, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x0b, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x46, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x06, 0x6e},
    {0x02, 0x43, 0x03, 0x06, 0x6e},
    {0x07, 0x43, 0x03, 0x06, 0x6e},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x2e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2e, 0xf5, 0x7f},
    {0x05, 0x44, 0x2e, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x2e, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2e, 0xb5, 0x7f},
    {0x65, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x08, 0xf5, 0xff},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2e, 0xb5, 0x7f},
    {0x02, 0x44, 0x2e, 0xb5, 0x7f},
    {0x07, 0x44, 0x2e, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x06, 0x6e},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x06, 0x6e},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x06, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2e, 0xf5, 0x7f},
    {0xc3, 0x03, 0x46, 0xb5, 0xee},
    {0xc1, 0x05, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x2e, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x06, 0x6e},
    {0x02, 0x42, 0x03, 0x06, 0x6e},
    {0x07, 0x42, 0x03, 0x06, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x41, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x41, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x01, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x01, 0x6e},
    {0x68, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x01, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x0b, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x41, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x01, 0x6e},
    {0x02, 0x43, 0x0b, 0x01, 0x6e},
    {0x07, 0x43, 0x0b, 0x01, 0x6e},
    {0x6e, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x01, 0x7e},
    {0x0b, 0x43, 0x03, 0x41, 0x7e},
    {0x05, 0x41, 0x03, 0x01, 0x7e},
    {0x76, 0x0b, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x01, 0x7e},
    {0x64, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x46, 0xb5, 0xee},
    {0x74, 0x0b, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x01, 0x7e},
    {0x02, 0x41, 0x03, 0x01, 0x7e},
    {0x07, 0x41, 0x03, 0x01, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x01, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x01, 0x6e},
    {0x6c, 0x0b, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x01, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x41, 0x7e},
    {0xc3, 0x0b, 0x41, 0xf5, 0xee},
    {0xc1, 0x09, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x0b, 0x01, 0x6e},
    {0x02, 0x42, 0x0b, 0x01, 0x6e},
    {0x07, 0x42, 0x0b, 0x01, 0x6e},
    {0x5e, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x0b, 0xb5, 0x00, 0xff},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x0b, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x06, 0x6e},
    {0x7c, 0x0b, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x06, 0x6e},
    {0x6a, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x06, 0x6e},
    {0x60, 0x0b, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x0b, 0xb5, 0x00, 0xff},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x06, 0x6e},
    {0x02, 0x43, 0x05, 0x06, 0x6e},
    {0x07, 0x43, 0x05, 0x06, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x01, 0x7e},
    {0x0b, 0x42, 0x03, 0x41, 0x7e},
    {0x05, 0x44, 0x03, 0x01, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x01, 0x7e},
    {0x66, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x08, 0xf5, 0xff},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x01, 0x7e},
    {0x02, 0x44, 0x03, 0x01, 0x7e},
    {0x07, 0x44, 0x03, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x06, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x06, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x06, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x41, 0x7e},
    {0xc3, 0x05, 0x46, 0xb5, 0xee},
    {0xc1, 0x06, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x05, 0x06, 0x6e},
    {0x02, 0x42, 0x05, 0x06, 0x6e},
    {0x07, 0x42, 0x05, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x03, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x03, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x03, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x03, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x03, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x03, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x03, 0x6e},
    {0x02, 0x43, 0x0c, 0x03, 0x6e},
    {0x07, 0x43, 0x0c, 0x03, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x03, 0x7e},
    {0x0b, 0x43, 0x0b, 0x43, 0x7e},
    {0x05, 0x41, 0x0b, 0x03, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x43, 0x7e},
    {0xc7, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x03, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x03, 0x7e},
    {0x02, 0x41, 0x0b, 0x03, 0x7e},
    {0x07, 0x41, 0x0b, 0x03, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x03, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x03, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x03, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x43, 0x7e},
    {0xc3, 0x4c, 0x03, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x0c, 0x03, 0x6e},
    {0x02, 0x42, 0x0c, 0x03, 0x6e},
    {0x07, 0x42, 0x0c, 0x03, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x03, 0x8e},
    {0x0b, 0x41, 0x03, 0x43, 0x8e},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x0c, 0x43, 0x43, 0x03, 0x8e},
    {0x09, 0x41, 0x03, 0x43, 0x8e},
    {0xda, 0x09, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x03, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x03, 0x8e},
    {0x02, 0x46, 0x03, 0x03, 0x8e},
    {0x07, 0x46, 0x03, 0x03, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x01, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x01, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x03, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x01, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x43, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x09, 0x01, 0x6e},
    {0x02, 0x43, 0x09, 0x01, 0x6e},
    {0x07, 0x43, 0x09, 0x01, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x03, 0x7e},
    {0x0b, 0x42, 0x0b, 0x43, 0x7e},
    {0x05, 0x44, 0x0b, 0x03, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x43, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x03, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x03, 0x8e},
    {0xc5, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x03, 0x7e},
    {0x02, 0x44, 0x0b, 0x03, 0x7e},
    {0x07, 0x44, 0x0b, 0x03, 0x7e},
    {0x0d, 0x43, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x09, 0x01, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x01, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x03, 0x8e},
    {0xc4, 0x4b, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x01, 0x6e},
    {0x01, 0x43, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x0b, 0x43, 0x7e},
    {0xc3, 0x09, 0x41, 0xf5, 0xee},
    {0xc1, 0x0e, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x09, 0x01, 0x6e},
    {0x02, 0x42, 0x09, 0x01, 0x6e},
    {0x07, 0x42, 0x09, 0x01, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x03, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x03, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x01, 0x7e},
    {0x0b, 0x43, 0x05, 0x41, 0x7e},
    {0x05, 0x41, 0x05, 0x01, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x41, 0x7e},
    {0xc8, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x01, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x08, 0xf5, 0xff},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x01, 0x7e},
    {0x02, 0x41, 0x05, 0x01, 0x7e},
    {0x07, 0x41, 0x05, 0x01, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x41, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x08, 0xf5, 0xff},
    {0x0a, 0x43, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x03, 0x8e},
    {0x0b, 0x44, 0x03, 0x43, 0x8e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x0c, 0x42, 0x43, 0x03, 0x8e},
    {0x09, 0x44, 0x03, 0x43, 0x8e},
    {0xda, 0x06, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x08, 0xf5, 0xff},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x03, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x03, 0x8e},
    {0x02, 0x45, 0x03, 0x03, 0x8e},
    {0x07, 0x45, 0x03, 0x03, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x06, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x06, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x03, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x06, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x43, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x08, 0xf5, 0xff},
    {0x0a, 0x44, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x06, 0x6e},
    {0x02, 0x43, 0x06, 0x06, 0x6e},
    {0x07, 0x43, 0x06, 0x06, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x01, 0x7e},
    {0x0b, 0x42, 0x05, 0x41, 0x7e},
    {0x05, 0x44, 0x05, 0x01, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x41, 0x7e},
    {0xca, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x01, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x08, 0xf5, 0xff},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x03, 0x8e},
    {0xc6, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x01, 0x7e},
    {0x02, 0x44, 0x05, 0x01, 0x7e},
    {0x07, 0x44, 0x05, 0x01, 0x7e},
    {0x0d, 0x42, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x06, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x06, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x03, 0x8e},
    {0xc4, 0x05, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x06, 0x6e},
    {0x01, 0x42, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x05, 0x41, 0x7e},
    {0xc3, 0x06, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x06, 0x06, 0x6e},
    {0x02, 0x42, 0x06, 0x06, 0x6e},
    {0x07, 0x42, 0x06, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x61, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x03, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x21, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x21, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x21, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x03, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x21, 0xb5, 0x6e},
    {0x02, 0x43, 0x21, 0xb5, 0x6e},
    {0x07, 0x43, 0x21, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x36, 0xb5, 0x7f},
    {0x0b, 0x43, 0x36, 0xf5, 0x7f},
    {0x05, 0x41, 0x36, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x36, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x36, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x36, 0xb5, 0x7f},
    {0x02, 0x41, 0x36, 0xb5, 0x7f},
    {0x07, 0x41, 0x36, 0xb5, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x21, 0xb5, 0x6e},
    {0x97, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x21, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0x93, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x21, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x36, 0xf5, 0x7f},
    {0xc3, 0x61, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x36, 0xf5, 0x7f},
    {0x04, 0x42, 0x21, 0xb5, 0x6e},
    {0x02, 0x42, 0x21, 0xb5, 0x6e},
    {0x07, 0x42, 0x21, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x03, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x36, 0xb5, 0x7f},
    {0x0b, 0x42, 0x36, 0xf5, 0x7f},
    {0x05, 0x44, 0x36, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x36, 0xf5, 0x7f},
    {0x8b, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x36, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x36, 0xb5, 0x7f},
    {0x02, 0x44, 0x36, 0xb5, 0x7f},
    {0x07, 0x44, 0x36, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x76, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x36, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x36, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x82, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xc2, 0xb5, 0x9e},
    {0x09, 0x46, 0x82, 0xf5, 0x9e},
    {0xda, 0x71, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x68, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc2, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x31, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x31, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc2, 0xb5, 0x9e},
    {0x8d, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x31, 0xb5, 0x6e},
    {0x13, 0x43, 0xc2, 0xf5, 0x9e},
    {0x08, 0x46, 0x82, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x31, 0xb5, 0x6e},
    {0x02, 0x43, 0x31, 0xb5, 0x6e},
    {0x07, 0x43, 0x31, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x03, 0x7e},
    {0x0b, 0x43, 0x09, 0x43, 0x7e},
    {0x05, 0x41, 0x09, 0x03, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x43, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x09, 0x03, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x41, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc2, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x03, 0x7e},
    {0x02, 0x41, 0x09, 0x03, 0x7e},
    {0x07, 0x41, 0x09, 0x03, 0x7e},
    {0x0d, 0x41, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x31, 0xb5, 0x6e},
    {0x99, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x31, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc2, 0xb5, 0x9e},
    {0x95, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x31, 0xb5, 0x6e},
    {0x01, 0x41, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x43, 0x7e},
    {0xc3, 0x71, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x31, 0xb5, 0x6e},
    {0x02, 0x42, 0x31, 0xb5, 0x6e},
    {0x07, 0x42, 0x31, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4e, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8d, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8d, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0e, 0x03, 0x6e},
    {0x02, 0x43, 0x0e, 0x03, 0x6e},
    {0x07, 0x43, 0x0e, 0x03, 0x6e},
    {0x16, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x03, 0x7e},
    {0x0b, 0x42, 0x09, 0x43, 0x7e},
    {0x05, 0x44, 0x09, 0x03, 0x7e},
    {0x1a, 0x43, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x43, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x09, 0x03, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x09, 0x03, 0x7e},
    {0x02, 0x44, 0x09, 0x03, 0x7e},
    {0x07, 0x44, 0x09, 0x03, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0e, 0x03, 0x6e},
    {0x12, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x03, 0x6e},
    {0x15, 0x43, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x49, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x09, 0x43, 0x7e},
    {0xc3, 0x4e, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x0e, 0x03, 0x6e},
    {0x02, 0x42, 0x0e, 0x03, 0x6e},
    {0x07, 0x42, 0x0e, 0x03, 0x6e},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x03, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3d, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3d, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x3d, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x03, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3d, 0xb5, 0x6e},
    {0x02, 0x43, 0x3d, 0xb5, 0x6e},
    {0x07, 0x43, 0x3d, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x88, 0xb5, 0x7f},
    {0x0b, 0x43, 0x88, 0xf5, 0x7f},
    {0x05, 0x41, 0x88, 0xb5, 0x7f},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x88, 0xf5, 0x7f},
    {0xc7, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x88, 0xb5, 0x7f},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x46, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x88, 0xb5, 0x7f},
    {0x02, 0x41, 0x88, 0xb5, 0x7f},
    {0x07, 0x41, 0x88, 0xb5, 0x7f},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3d, 0xb5, 0x6e},
    {0x98, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3d, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0x94, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3d, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x88, 0xf5, 0x7f},
    {0xc3, 0x7d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x88, 0xf5, 0x7f},
    {0x04, 0x42, 0x3d, 0xb5, 0x6e},
    {0x02, 0x42, 0x3d, 0xb5, 0x6e},
    {0x07, 0x42, 0x3d, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x03, 0x8e},
    {0x0b, 0x41, 0x05, 0x43, 0x8e},
    {0x05, 0x46, 0x05, 0x03, 0x8e},
    {0x0c, 0x43, 0x45, 0x03, 0x8e},
    {0x09, 0x41, 0x05, 0x43, 0x8e},
    {0xda, 0x04, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x03, 0x8e},
    {0x02, 0x46, 0x05, 0x03, 0x8e},
    {0x07, 0x46, 0x05, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x06, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x06, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x03, 0x8e},
    {0x90, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x06, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x06, 0x6e},
    {0x02, 0x43, 0x04, 0x06, 0x6e},
    {0x07, 0x43, 0x04, 0x06, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x88, 0xb5, 0x7f},
    {0x0b, 0x42, 0x88, 0xf5, 0x7f},
    {0x05, 0x44, 0x88, 0xb5, 0x7f},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x88, 0xf5, 0x7f},
    {0x8c, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x88, 0xb5, 0x7f},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x03, 0x8e},
    {0xc5, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x88, 0xb5, 0x7f},
    {0x02, 0x44, 0x88, 0xb5, 0x7f},
    {0x07, 0x44, 0x88, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x06, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x06, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x03, 0x8e},
    {0x84, 0x88, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x06, 0x6e},
    {0x01, 0x43, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x88, 0xf5, 0x7f},
    {0xc3, 0x04, 0x46, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x88, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x06, 0x6e},
    {0x02, 0x42, 0x04, 0x06, 0x6e},
    {0x07, 0x42, 0x04, 0x06, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x82, 0xb5, 0x9e},
    {0x0b, 0x45, 0x82, 0xf5, 0x9e},
    {0x05, 0x47, 0x82, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc2, 0xb5, 0x9e},
    {0x09, 0x45, 0x82, 0xf5, 0x9e},
    {0xda, 0x02, 0x46, 0xb5, 0xee},
    {0x06, 0x47, 0x82, 0xb5, 0x9e},
    {0x14, 0x42, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x46, 0xb5, 0xee},
    {0x18, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc2, 0xf5, 0x9e},
    {0x04, 0x47, 0x82, 0xb5, 0x9e},
    {0x02, 0x47, 0x82, 0xb5, 0x9e},
    {0x07, 0x47, 0x82, 0xb5, 0x9e},
    {0x17, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x06, 0x6e},
    {0x1b, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x06, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xc2, 0xb5, 0x9e},
    {0x8e, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x06, 0x6e},
    {0x13, 0x42, 0xc2, 0xf5, 0x9e},
    {0x08, 0x45, 0x82, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x46, 0xb5, 0xee},
    {0x0a, 0x45, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x06, 0x6e},
    {0x02, 0x43, 0x02, 0x06, 0x6e},
    {0x07, 0x43, 0x02, 0x06, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x01, 0x7e},
    {0x0b, 0x43, 0x06, 0x41, 0x7e},
    {0x05, 0x41, 0x06, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x41, 0x7e},
    {0xc8, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xc2, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x01, 0x7e},
    {0x02, 0x41, 0x06, 0x01, 0x7e},
    {0x07, 0x41, 0x06, 0x01, 0x7e},
    {0x0d, 0x44, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x06, 0x6e},
    {0x9b, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x06, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xc2, 0xb5, 0x9e},
    {0x96, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x06, 0x6e},
    {0x01, 0x44, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x41, 0x7e},
    {0xc3, 0x02, 0x46, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x06, 0x6e},
    {0x02, 0x42, 0x02, 0x06, 0x6e},
    {0x07, 0x42, 0x02, 0x06, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x03, 0x8e},
    {0x0b, 0x44, 0x05, 0x43, 0x8e},
    {0x05, 0x45, 0x05, 0x03, 0x8e},
    {0x0c, 0x42, 0x45, 0x03, 0x8e},
    {0x09, 0x44, 0x05, 0x43, 0x8e},
    {0xda, 0x07, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x03, 0x8e},
    {0x02, 0x45, 0x05, 0x03, 0x8e},
    {0x07, 0x45, 0x05, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x06, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x06, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x03, 0x8e},
    {0x92, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x06, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x06, 0x6e},
    {0x02, 0x43, 0x07, 0x06, 0x6e},
    {0x07, 0x43, 0x07, 0x06, 0x6e},
    {0x16, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x01, 0x7e},
    {0x0b, 0x42, 0x06, 0x41, 0x7e},
    {0x05, 0x44, 0x06, 0x01, 0x7e},
    {0x1a, 0x42, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x41, 0x7e},
    {0xca, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x03, 0x8e},
    {0xc6, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x01, 0x7e},
    {0x02, 0x44, 0x06, 0x01, 0x7e},
    {0x07, 0x44, 0x06, 0x01, 0x7e},
    {0x0d, 0x42, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x06, 0x6e},
    {0x12, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x06, 0x6e},
    {0x15, 0x42, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x03, 0x8e},
    {0xc4, 0x06, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x06, 0x6e},
    {0x01, 0x42, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x06, 0x41, 0x7e},
    {0xc3, 0x07, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x06, 0x6e},
    {0x02, 0x42, 0x07, 0x06, 0x6e},
    {0x07, 0x42, 0x07, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0xb5, 0x40, 0x0d},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x2f, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x2f, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2f, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2f, 0xb5, 0x6e},
    {0x02, 0x43, 0x2f, 0xb5, 0x6e},
    {0x07, 0x43, 0x2f, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x24, 0xb5, 0x7f},
    {0x0b, 0x43, 0x24, 0xf5, 0x7f},
    {0x05, 0x41, 0x24, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x24, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x24, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x24, 0xb5, 0x7f},
    {0x02, 0x41, 0x24, 0xb5, 0x7f},
    {0x07, 0x41, 0x24, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x2f, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2f, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2f, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x24, 0xf5, 0x7f},
    {0xc3, 0x6f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x24, 0xf5, 0x7f},
    {0x04, 0x42, 0x2f, 0xb5, 0x6e},
    {0x02, 0x42, 0x2f, 0xb5, 0x6e},
    {0x07, 0x42, 0x2f, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x24, 0xb5, 0x7f},
    {0x0b, 0x42, 0x24, 0xf5, 0x7f},
    {0x05, 0x44, 0x24, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x24, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x24, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x24, 0xb5, 0x7f},
    {0x02, 0x44, 0x24, 0xb5, 0x7f},
    {0x07, 0x44, 0x24, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x64, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x24, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x24, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7b, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3b, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3b, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3b, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3b, 0xb5, 0x6e},
    {0x02, 0x43, 0x3b, 0xb5, 0x6e},
    {0x07, 0x43, 0x3b, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3b, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3b, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3b, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7b, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3b, 0xb5, 0x6e},
    {0x02, 0x42, 0x3b, 0xb5, 0x6e},
    {0x07, 0x42, 0x3b, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x69, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x64, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x29, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x29, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x29, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x64, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x29, 0xb5, 0x6e},
    {0x02, 0x43, 0x29, 0xb5, 0x6e},
    {0x07, 0x43, 0x29, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x34, 0xb5, 0x7f},
    {0x0b, 0x43, 0x34, 0xf5, 0x7f},
    {0x05, 0x41, 0x34, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x34, 0xf5, 0x7f},
    {0xc7, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x34, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x34, 0xb5, 0x7f},
    {0x02, 0x41, 0x34, 0xb5, 0x7f},
    {0x07, 0x41, 0x34, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x29, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x29, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x29, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x34, 0xf5, 0x7f},
    {0xc3, 0x69, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x34, 0xf5, 0x7f},
    {0x04, 0x42, 0x29, 0xb5, 0x6e},
    {0x02, 0x42, 0x29, 0xb5, 0x6e},
    {0x07, 0x42, 0x29, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x10, 0xb5, 0x8e},
    {0x0b, 0x41, 0x10, 0xf5, 0x8e},
    {0x05, 0x46, 0x10, 0xb5, 0x8e},
    {0x0c, 0x43, 0x50, 0xb5, 0x8e},
    {0x09, 0x41, 0x10, 0xf5, 0x8e},
    {0xda, 0x50, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x10, 0xb5, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x74, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x50, 0xb5, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x10, 0xb5, 0x8e},
    {0x02, 0x46, 0x10, 0xb5, 0x8e},
    {0x07, 0x46, 0x10, 0xb5, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x10, 0x03, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x10, 0x03, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x50, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x03, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x10, 0xf5, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x74, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x03, 0x6e},
    {0x02, 0x43, 0x10, 0x03, 0x6e},
    {0x07, 0x43, 0x10, 0x03, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x34, 0xb5, 0x7f},
    {0x0b, 0x42, 0x34, 0xf5, 0x7f},
    {0x05, 0x44, 0x34, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x34, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x34, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0f, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x50, 0xb5, 0x8e},
    {0xc5, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x34, 0xb5, 0x7f},
    {0x02, 0x44, 0x34, 0xb5, 0x7f},
    {0x07, 0x44, 0x34, 0xb5, 0x7f},
    {0x0d, 0x43, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x03, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x10, 0x03, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x50, 0xb5, 0x8e},
    {0xc4, 0x74, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x03, 0x6e},
    {0x01, 0x43, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x34, 0xf5, 0x7f},
    {0xc3, 0x50, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x34, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x03, 0x6e},
    {0x02, 0x42, 0x10, 0x03, 0x6e},
    {0x07, 0x42, 0x10, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x90, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x90, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x90, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x90, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x40, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x90, 0xb5, 0x6f},
    {0x02, 0x43, 0x90, 0xb5, 0x6f},
    {0x07, 0x43, 0x90, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0f, 0xf5, 0x7d},
    {0x05, 0x41, 0x0f, 0xb5, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0f, 0xf5, 0x7d},
    {0xc8, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0xb5, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0f, 0xb5, 0x7d},
    {0x02, 0x41, 0x0f, 0xb5, 0x7d},
    {0x07, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x90, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x90, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x90, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0xf5, 0x7d},
    {0x83, 0x90, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x90, 0xb5, 0x6f},
    {0x02, 0x42, 0x90, 0xb5, 0x6f},
    {0x07, 0x42, 0x90, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x10, 0xb5, 0x8e},
    {0x0b, 0x44, 0x10, 0xf5, 0x8e},
    {0x05, 0x45, 0x10, 0xb5, 0x8e},
    {0x0c, 0x42, 0x50, 0xb5, 0x8e},
    {0x09, 0x44, 0x10, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x10, 0xb5, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x50, 0xb5, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x10, 0xb5, 0x8e},
    {0x02, 0x45, 0x10, 0xb5, 0x8e},
    {0x07, 0x45, 0x10, 0xb5, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x50, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x10, 0xf5, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0f, 0xf5, 0x7d},
    {0x05, 0x44, 0x0f, 0xb5, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0xf5, 0x7d},
    {0xca, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0xb5, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x50, 0xb5, 0x8e},
    {0xc6, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0xb5, 0x7d},
    {0x02, 0x44, 0x0f, 0xb5, 0x7d},
    {0x07, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x42, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x50, 0xb5, 0x8e},
    {0xc4, 0x4f, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x41, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x1f, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x1f, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1f, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x41, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1f, 0xb5, 0x6e},
    {0x02, 0x43, 0x1f, 0xb5, 0x6e},
    {0x07, 0x43, 0x1f, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x00, 0xb5, 0x7f},
    {0x0b, 0x43, 0x00, 0xf5, 0x7f},
    {0x05, 0x41, 0x00, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x00, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x00, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x00, 0xb5, 0x7f},
    {0x02, 0x41, 0x00, 0xb5, 0x7f},
    {0x07, 0x41, 0x00, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x1f, 0xb5, 0x6e},
    {0xd7, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1f, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1f, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x00, 0xf5, 0x7f},
    {0xc3, 0x5f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x00, 0xf5, 0x7f},
    {0x04, 0x42, 0x1f, 0xb5, 0x6e},
    {0x02, 0x42, 0x1f, 0xb5, 0x6e},
    {0x07, 0x42, 0x1f, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x99, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x01, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x01, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x08, 0x01, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x99, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x01, 0x6e},
    {0x02, 0x43, 0x08, 0x01, 0x6e},
    {0x07, 0x43, 0x08, 0x01, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x00, 0xb5, 0x7f},
    {0x0b, 0x42, 0x00, 0xf5, 0x7f},
    {0x05, 0x44, 0x00, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x00, 0xf5, 0x7f},
    {0xcb, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x00, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x00, 0xb5, 0x7f},
    {0x02, 0x44, 0x00, 0xb5, 0x7f},
    {0x07, 0x44, 0x00, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x01, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x01, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x40, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x01, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x00, 0xf5, 0x7f},
    {0xc3, 0x08, 0x41, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x00, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x01, 0x6e},
    {0x02, 0x42, 0x08, 0x01, 0x6e},
    {0x07, 0x42, 0x08, 0x01, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x0f, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x4f, 0xb5, 0x9f},
    {0x09, 0x46, 0x0f, 0xf5, 0x9f},
    {0xda, 0x79, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x4f, 0xf5, 0x9f},
    {0xc2, 0x6c, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4f, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4f, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4f, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x4f, 0xf5, 0x9f},
    {0x03, 0x43, 0x39, 0xb5, 0x6e},
    {0x1b, 0x43, 0x4f, 0xf5, 0x9f},
    {0x05, 0x43, 0x39, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x4f, 0xb5, 0x9f},
    {0xcd, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x39, 0xb5, 0x6e},
    {0x13, 0x43, 0x4f, 0xf5, 0x9f},
    {0x08, 0x46, 0x0f, 0xf5, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0f, 0xf5, 0x9f},
    {0x04, 0x43, 0x39, 0xb5, 0x6e},
    {0x02, 0x43, 0x39, 0xb5, 0x6e},
    {0x07, 0x43, 0x39, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x01, 0x7e},
    {0x0b, 0x43, 0x04, 0x41, 0x7e},
    {0x05, 0x41, 0x04, 0x01, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x01, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x41, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x4f, 0xb5, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x01, 0x7e},
    {0x02, 0x41, 0x04, 0x01, 0x7e},
    {0x07, 0x41, 0x04, 0x01, 0x7e},
    {0x0d, 0x41, 0x4f, 0xb5, 0x9f},
    {0x03, 0x42, 0x39, 0xb5, 0x6e},
    {0xd9, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x39, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x4f, 0xb5, 0x9f},
    {0xd5, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x39, 0xb5, 0x6e},
    {0x01, 0x41, 0x4f, 0xb5, 0x9f},
    {0x08, 0x43, 0x04, 0x41, 0x7e},
    {0xc3, 0x79, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x39, 0xb5, 0x6e},
    {0x02, 0x42, 0x39, 0xb5, 0x6e},
    {0x07, 0x42, 0x39, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x95, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x95, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x4f, 0xf5, 0x9f},
    {0x03, 0x44, 0x04, 0x01, 0x7e},
    {0x0b, 0x42, 0x04, 0x41, 0x7e},
    {0x05, 0x44, 0x04, 0x01, 0x7e},
    {0x1a, 0x43, 0x4f, 0xf5, 0x9f},
    {0x09, 0x42, 0x04, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x01, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x4f, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x01, 0x7e},
    {0x02, 0x44, 0x04, 0x01, 0x7e},
    {0x07, 0x44, 0x04, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x4f, 0xf5, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x4f, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x41, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x4f, 0xf5, 0x40, 0x0f},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x0a, 0x41, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x01, 0x41, 0xf5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0a, 0x01, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0a, 0x01, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x01, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x01, 0x41, 0xf5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x0a, 0x01, 0x6e},
    {0x02, 0x43, 0x0a, 0x01, 0x6e},
    {0x07, 0x43, 0x0a, 0x01, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x02, 0x01, 0x7e},
    {0x0b, 0x43, 0x02, 0x41, 0x7e},
    {0x05, 0x41, 0x02, 0x01, 0x7e},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x02, 0x41, 0x7e},
    {0xc7, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x01, 0x7e},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x02, 0x01, 0x7e},
    {0x02, 0x41, 0x02, 0x01, 0x7e},
    {0x07, 0x41, 0x02, 0x01, 0x7e},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0a, 0x01, 0x6e},
    {0xd8, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0a, 0x01, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0a, 0x01, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x02, 0x41, 0x7e},
    {0xc3, 0x0a, 0x41, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x0a, 0x01, 0x6e},
    {0x02, 0x42, 0x0a, 0x01, 0x6e},
    {0x07, 0x42, 0x0a, 0x01, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x06, 0x03, 0x8e},
    {0x0b, 0x41, 0x06, 0x43, 0x8e},
    {0x05, 0x46, 0x06, 0x03, 0x8e},
    {0x0c, 0x43, 0x46, 0x03, 0x8e},
    {0x09, 0x41, 0x06, 0x43, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x46, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x06, 0x03, 0x8e},
    {0x02, 0x46, 0x06, 0x03, 0x8e},
    {0x07, 0x46, 0x06, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x46, 0x03, 0x8e},
    {0xd0, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x06, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x02, 0x01, 0x7e},
    {0x0b, 0x42, 0x02, 0x41, 0x7e},
    {0x05, 0x44, 0x02, 0x01, 0x7e},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x02, 0x41, 0x7e},
    {0xcc, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x02, 0x01, 0x7e},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x46, 0x03, 0x8e},
    {0xc5, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x01, 0x7e},
    {0x02, 0x44, 0x02, 0x01, 0x7e},
    {0x07, 0x44, 0x02, 0x01, 0x7e},
    {0x0d, 0x43, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x46, 0x03, 0x8e},
    {0xc4, 0x02, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x41, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x0f, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0f, 0xf5, 0x9f},
    {0x05, 0x47, 0x0f, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4f, 0xb5, 0x9f},
    {0x09, 0x45, 0x0f, 0xf5, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x0f, 0xb5, 0x9f},
    {0x14, 0x42, 0x4f, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x4f, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4f, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4f, 0xf5, 0x9f},
    {0x04, 0x47, 0x0f, 0xb5, 0x9f},
    {0x02, 0x47, 0x0f, 0xb5, 0x9f},
    {0x07, 0x47, 0x0f, 0xb5, 0x9f},
    {0x17, 0x42, 0x4f, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x4f, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x4f, 0xb5, 0x9f},
    {0xce, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x4f, 0xf5, 0x9f},
    {0x08, 0x45, 0x0f, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x0f, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x07, 0x01, 0x7e},
    {0x0b, 0x43, 0x07, 0x41, 0x7e},
    {0x05, 0x41, 0x07, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x07, 0x41, 0x7e},
    {0xc8, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x4f, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x07, 0x01, 0x7e},
    {0x02, 0x41, 0x07, 0x01, 0x7e},
    {0x07, 0x41, 0x07, 0x01, 0x7e},
    {0x0d, 0x44, 0x4f, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x4f, 0xb5, 0x9f},
    {0xd6, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x4f, 0xb5, 0x9f},
    {0x08, 0x43, 0x07, 0x41, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x06, 0x03, 0x8e},
    {0x0b, 0x44, 0x06, 0x43, 0x8e},
    {0x05, 0x45, 0x06, 0x03, 0x8e},
    {0x0c, 0x42, 0x46, 0x03, 0x8e},
    {0x09, 0x44, 0x06, 0x43, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x46, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x06, 0x03, 0x8e},
    {0x02, 0x45, 0x06, 0x03, 0x8e},
    {0x07, 0x45, 0x06, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x46, 0x03, 0x8e},
    {0xd2, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x06, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x4f, 0xf5, 0x9f},
    {0x03, 0x44, 0x07, 0x01, 0x7e},
    {0x0b, 0x42, 0x07, 0x41, 0x7e},
    {0x05, 0x44, 0x07, 0x01, 0x7e},
    {0x1a, 0x42, 0x4f, 0xf5, 0x9f},
    {0x09, 0x42, 0x07, 0x41, 0x7e},
    {0xca, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x4f, 0xf5, 0x9f},
    {0x0f, 0x42, 0x46, 0x03, 0x8e},
    {0xc6, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x01, 0x7e},
    {0x02, 0x44, 0x07, 0x01, 0x7e},
    {0x07, 0x44, 0x07, 0x01, 0x7e},
    {0x0d, 0x42, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x4f, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x4f, 0xf5, 0x9f},
    {0x11, 0x42, 0x46, 0x03, 0x8e},
    {0xc4, 0x07, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x41, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xde, 0xb5, 0x00, 0x0f},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xde, 0xb5, 0x00, 0x0f},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0xb5, 0x40, 0x0d},
    {0x06, 0xde, 0xb5, 0x00, 0x0f},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0xc2, 0x5e, 0xb5, 0x40, 0x0d},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xde, 0xb5, 0x00, 0x0f},
    {0x02, 0xde, 0xb5, 0x00, 0x0f},
    {0x07, 0xde, 0xb5, 0x00, 0x0f},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x16, 0xb5, 0x6d},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x16, 0xb5, 0x6d},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x16, 0xb5, 0x6d},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0xb5, 0x6d},
    {0x02, 0x43, 0x16, 0xb5, 0x6d},
    {0x07, 0x43, 0x16, 0xb5, 0x6d},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0d, 0xf5, 0x7d},
    {0x05, 0x41, 0x0d, 0xb5, 0x7d},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0xf5, 0x7d},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x0d, 0xb5, 0x7d},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0xb5, 0x7d},
    {0x02, 0x41, 0x0d, 0xb5, 0x7d},
    {0x07, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x16, 0xb5, 0x6d},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x16, 0xb5, 0x6d},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x16, 0xb5, 0x6d},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x56, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x16, 0xb5, 0x6d},
    {0x02, 0x42, 0x16, 0xb5, 0x6d},
    {0x07, 0x42, 0x16, 0xb5, 0x6d},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0d, 0xf5, 0x7d},
    {0x05, 0x44, 0x0d, 0xb5, 0x7d},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x0d, 0xf5, 0x7d},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0d, 0xb5, 0x7d},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x0d, 0xb5, 0x7d},
    {0x02, 0x44, 0x0d, 0xb5, 0x7d},
    {0x07, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x4d, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x5a, 0xb5, 0x40, 0x0d},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x62, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1a, 0xb5, 0x6d},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1a, 0xb5, 0x6d},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x1a, 0xb5, 0x6d},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x62, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x1a, 0xb5, 0x6d},
    {0x02, 0x43, 0x1a, 0xb5, 0x6d},
    {0x07, 0x43, 0x1a, 0xb5, 0x6d},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1a, 0xb5, 0x6d},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1a, 0xb5, 0x6d},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1a, 0xb5, 0x6d},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x5a, 0xb5, 0x40, 0x0d},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x1a, 0xb5, 0x6d},
    {0x02, 0x42, 0x1a, 0xb5, 0x6d},
    {0x07, 0x42, 0x1a, 0xb5, 0x6d},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x08, 0xb5, 0x8d},
    {0x0b, 0x41, 0x08, 0xf5, 0x8d},
    {0x05, 0x46, 0x08, 0xb5, 0x8d},
    {0x0c, 0x43, 0x48, 0xb5, 0x8d},
    {0x09, 0x41, 0x08, 0xf5, 0x8d},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x72, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x48, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x08, 0xb5, 0x8d},
    {0x02, 0x46, 0x08, 0xb5, 0x8d},
    {0x07, 0x46, 0x08, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x48, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x08, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x72, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x48, 0xb5, 0x8d},
    {0xc5, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x48, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8c, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7e, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8c, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8c, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8c, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7e, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8c, 0xb5, 0x6f},
    {0x02, 0x43, 0x8c, 0xb5, 0x6f},
    {0x07, 0x43, 0x8c, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8c, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8c, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8c, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8c, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8c, 0xb5, 0x6f},
    {0x02, 0x42, 0x8c, 0xb5, 0x6f},
    {0x07, 0x42, 0x8c, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x08, 0xb5, 0x8d},
    {0x0b, 0x44, 0x08, 0xf5, 0x8d},
    {0x05, 0x45, 0x08, 0xb5, 0x8d},
    {0x0c, 0x42, 0x48, 0xb5, 0x8d},
    {0x09, 0x44, 0x08, 0xf5, 0x8d},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x48, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x08, 0xb5, 0x8d},
    {0x02, 0x45, 0x08, 0xb5, 0x8d},
    {0x07, 0x45, 0x08, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x48, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x08, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x48, 0xb5, 0x8d},
    {0xc6, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x48, 0xb5, 0x8d},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x65, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x70, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x25, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x25, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x25, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x70, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x25, 0xb5, 0x6e},
    {0x02, 0x43, 0x25, 0xb5, 0x6e},
    {0x07, 0x43, 0x25, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x2c, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2c, 0xf5, 0x7f},
    {0x05, 0x41, 0x2c, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x2c, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2c, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x2c, 0xb5, 0x7f},
    {0x02, 0x41, 0x2c, 0xb5, 0x7f},
    {0x07, 0x41, 0x2c, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x25, 0xb5, 0x6e},
    {0xd7, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x25, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x25, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2c, 0xf5, 0x7f},
    {0xc3, 0x65, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x2c, 0xf5, 0x7f},
    {0x04, 0x42, 0x25, 0xb5, 0x6e},
    {0x02, 0x42, 0x25, 0xb5, 0x6e},
    {0x07, 0x42, 0x25, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7c, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x2c, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2c, 0xf5, 0x7f},
    {0x05, 0x44, 0x2c, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x2c, 0xf5, 0x7f},
    {0xcb, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x2c, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2c, 0xb5, 0x7f},
    {0x02, 0x44, 0x2c, 0xb5, 0x7f},
    {0x07, 0x44, 0x2c, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2c, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x2c, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x04, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x44, 0xb5, 0x9d},
    {0x09, 0x46, 0x04, 0xf5, 0x9d},
    {0xda, 0x59, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x44, 0xf5, 0x9d},
    {0xc2, 0x6a, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x44, 0xf5, 0x9d},
    {0x0e, 0x41, 0x44, 0xb5, 0x9d},
    {0x1c, 0x43, 0x44, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x19, 0xb5, 0x6d},
    {0x1b, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x19, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x44, 0xb5, 0x9d},
    {0xcd, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x19, 0xb5, 0x6d},
    {0x13, 0x43, 0x44, 0xf5, 0x9d},
    {0x08, 0x46, 0x04, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x19, 0xb5, 0x6d},
    {0x02, 0x43, 0x19, 0xb5, 0x6d},
    {0x07, 0x43, 0x19, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x11, 0xb5, 0x7d},
    {0x0b, 0x43, 0x11, 0xf5, 0x7d},
    {0x05, 0x41, 0x11, 0xb5, 0x7d},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x11, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x11, 0xb5, 0x7d},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x44, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x11, 0xb5, 0x7d},
    {0x02, 0x41, 0x11, 0xb5, 0x7d},
    {0x07, 0x41, 0x11, 0xb5, 0x7d},
    {0x0d, 0x41, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x19, 0xb5, 0x6d},
    {0xd9, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x19, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x44, 0xb5, 0x9d},
    {0xd5, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x19, 0xb5, 0x6d},
    {0x01, 0x41, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x11, 0xf5, 0x7d},
    {0xc3, 0x59, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x19, 0xb5, 0x6d},
    {0x02, 0x42, 0x19, 0xb5, 0x6d},
    {0x07, 0x42, 0x19, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x91, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0f, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x91, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x03, 0x6e},
    {0x02, 0x43, 0x0f, 0x03, 0x6e},
    {0x07, 0x43, 0x0f, 0x03, 0x6e},
    {0x16, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x11, 0xb5, 0x7d},
    {0x0b, 0x42, 0x11, 0xf5, 0x7d},
    {0x05, 0x44, 0x11, 0xb5, 0x7d},
    {0x1a, 0x43, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x11, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x11, 0xb5, 0x7d},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x11, 0xb5, 0x7d},
    {0x02, 0x44, 0x11, 0xb5, 0x7d},
    {0x07, 0x44, 0x11, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x03, 0x6e},
    {0x12, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x0f, 0x03, 0x6e},
    {0x15, 0x43, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x51, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x11, 0xf5, 0x7d},
    {0xc3, 0x4f, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0x03, 0x6e},
    {0x02, 0x42, 0x0f, 0x03, 0x6e},
    {0x07, 0x42, 0x0f, 0x03, 0x6e},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0x9a, 0x85, 0xb5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x60, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x85, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x85, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x85, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x60, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x85, 0xb5, 0x6e},
    {0x02, 0x43, 0x85, 0xb5, 0x6e},
    {0x07, 0x43, 0x85, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x85, 0xb5, 0x6e},
    {0xd8, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x85, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x85, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0x85, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x85, 0xb5, 0x6e},
    {0x02, 0x42, 0x85, 0xb5, 0x6e},
    {0x07, 0x42, 0x85, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x7a, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0xb5, 0x9d},
    {0x0b, 0x45, 0x04, 0xf5, 0x9d},
    {0x05, 0x47, 0x04, 0xb5, 0x9d},
    {0x0c, 0x44, 0x44, 0xb5, 0x9d},
    {0x09, 0x45, 0x04, 0xf5, 0x9d},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0xb5, 0x9d},
    {0x14, 0x42, 0x44, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0xf5, 0x9d},
    {0x0e, 0x44, 0x44, 0xb5, 0x9d},
    {0x1c, 0x42, 0x44, 0xf5, 0x9d},
    {0x04, 0x47, 0x04, 0xb5, 0x9d},
    {0x02, 0x47, 0x04, 0xb5, 0x9d},
    {0x07, 0x47, 0x04, 0xb5, 0x9d},
    {0x17, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x44, 0xb5, 0x9d},
    {0xce, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0xf5, 0x9d},
    {0x08, 0x45, 0x04, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x44, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x44, 0xb5, 0x9d},
    {0xd6, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x03, 0xb5, 0xee},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x03, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x03, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x03, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0d, 0x03, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x03, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x03, 0x6e},
    {0x02, 0x43, 0x0d, 0x03, 0x6e},
    {0x07, 0x43, 0x0d, 0x03, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0xb5, 0x7d},
    {0x0b, 0x43, 0x01, 0xf5, 0x7d},
    {0x05, 0x41, 0x01, 0xb5, 0x7d},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0xf5, 0x7d},
    {0xc7, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x01, 0xb5, 0x7d},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0xb5, 0x7d},
    {0x02, 0x41, 0x01, 0xb5, 0x7d},
    {0x07, 0x41, 0x01, 0xb5, 0x7d},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x03, 0x6e},
    {0xd7, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0d, 0x03, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0d, 0x03, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0xf5, 0x7d},
    {0xc3, 0x4d, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x0d, 0x03, 0x6e},
    {0x02, 0x42, 0x0d, 0x03, 0x6e},
    {0x07, 0x42, 0x0d, 0x03, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0a, 0xf5, 0x8d},
    {0x05, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4a, 0xb5, 0x8d},
    {0x09, 0x41, 0x0a, 0xf5, 0x8d},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0xb5, 0x8d},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0xb5, 0x8d},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0xb5, 0x8d},
    {0x02, 0x46, 0x0a, 0xb5, 0x8d},
    {0x07, 0x46, 0x0a, 0xb5, 0x8d},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0xb5, 0x8d},
    {0xcf, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0xf5, 0x8d},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0xb5, 0x7d},
    {0x0b, 0x42, 0x01, 0xf5, 0x7d},
    {0x05, 0x44, 0x01, 0xb5, 0x7d},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0xf5, 0x7d},
    {0xcb, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x01, 0xb5, 0x7d},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc5, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x01, 0xb5, 0x7d},
    {0x02, 0x44, 0x01, 0xb5, 0x7d},
    {0x07, 0x44, 0x01, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x41, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x01, 0xf5, 0x7d},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0xf5, 0x9d},
    {0x05, 0x49, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0xb5, 0x9d},
    {0x09, 0x46, 0x02, 0xf5, 0x9d},
    {0xda, 0x52, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0xf5, 0x9d},
    {0xc2, 0x5a, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0xf5, 0x9d},
    {0x0e, 0x41, 0x42, 0xb5, 0x9d},
    {0x1c, 0x43, 0x42, 0xf5, 0x9d},
    {0x04, 0x49, 0x06, 0xb5, 0xae},
    {0x02, 0x49, 0x06, 0xb5, 0xae},
    {0x07, 0x49, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x12, 0xb5, 0x6d},
    {0x1b, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x12, 0xb5, 0x6d},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0xb5, 0x9d},
    {0xcd, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x12, 0xb5, 0x6d},
    {0x13, 0x43, 0x42, 0xf5, 0x9d},
    {0x08, 0x46, 0x02, 0xf5, 0x9d},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x12, 0xb5, 0x6d},
    {0x02, 0x43, 0x12, 0xb5, 0x6d},
    {0x07, 0x43, 0x12, 0xb5, 0x6d},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x03, 0x7e},
    {0x0b, 0x43, 0x08, 0x43, 0x7e},
    {0x05, 0x41, 0x08, 0x03, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x43, 0x7e},
    {0xc8, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x08, 0x03, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0xb5, 0x9d},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x03, 0x7e},
    {0x02, 0x41, 0x08, 0x03, 0x7e},
    {0x07, 0x41, 0x08, 0x03, 0x7e},
    {0x0d, 0x41, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x12, 0xb5, 0x6d},
    {0xd9, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x12, 0xb5, 0x6d},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0xb5, 0x9d},
    {0xd5, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x12, 0xb5, 0x6d},
    {0x01, 0x41, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x08, 0x43, 0x7e},
    {0xc3, 0x52, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x12, 0xb5, 0x6d},
    {0x02, 0x42, 0x12, 0xb5, 0x6d},
    {0x07, 0x42, 0x12, 0xb5, 0x6d},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0a, 0xf5, 0x8d},
    {0x05, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4a, 0xb5, 0x8d},
    {0x09, 0x44, 0x0a, 0xf5, 0x8d},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0xb5, 0x8d},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0xb5, 0x8d},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0xb5, 0x8d},
    {0x02, 0x45, 0x0a, 0xb5, 0x8d},
    {0x07, 0x45, 0x0a, 0xb5, 0x8d},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0xb5, 0x8d},
    {0xd1, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0xf5, 0x8d},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x08, 0x03, 0x7e},
    {0x0b, 0x42, 0x08, 0x43, 0x7e},
    {0x05, 0x44, 0x08, 0x03, 0x7e},
    {0x1a, 0x43, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x08, 0x43, 0x7e},
    {0xca, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x08, 0x03, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc6, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x08, 0x03, 0x7e},
    {0x02, 0x44, 0x08, 0x03, 0x7e},
    {0x07, 0x44, 0x08, 0x03, 0x7e},
    {0x0d, 0x42, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x48, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x08, 0x43, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x46, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x55, 0xb5, 0x40, 0x0d},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x46, 0xf5, 0xae},
    {0xc2, 0x66, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x46, 0xf5, 0xae},
    {0x0e, 0x46, 0x46, 0xb5, 0xae},
    {0x1c, 0x41, 0x46, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0xb5, 0x6d},
    {0x1b, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0xb5, 0x6d},
    {0x67, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x46, 0x46, 0xb5, 0xae},
    {0xc9, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0xb5, 0x6d},
    {0x13, 0x41, 0x46, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x66, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x15, 0xb5, 0x6d},
    {0x02, 0x43, 0x15, 0xb5, 0x6d},
    {0x07, 0x43, 0x15, 0xb5, 0x6d},
    {0x6d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0xc2, 0x46, 0xb5, 0x0e},
    {0x73, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x46, 0x46, 0xb5, 0xae},
    {0x7f, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0xb5, 0x6d},
    {0xd8, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x15, 0xb5, 0x6d},
    {0x6b, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x46, 0x46, 0xb5, 0xae},
    {0xd4, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x15, 0xb5, 0x6d},
    {0x01, 0x46, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0xb5, 0x40, 0x0d},
    {0xc1, 0xc2, 0x46, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0xb5, 0x6d},
    {0x02, 0x42, 0x15, 0xb5, 0x6d},
    {0x07, 0x42, 0x15, 0xb5, 0x6d},
    {0x5d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x03, 0x8e},
    {0x0b, 0x41, 0x04, 0x43, 0x8e},
    {0x05, 0x46, 0x04, 0x03, 0x8e},
    {0x0c, 0x43, 0x44, 0x03, 0x8e},
    {0x09, 0x41, 0x04, 0x43, 0x8e},
    {0xda, 0x51, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x03, 0x8e},
    {0x61, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x59, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x03, 0x8e},
    {0x7d, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x03, 0x8e},
    {0x02, 0x46, 0x04, 0x03, 0x8e},
    {0x07, 0x46, 0x04, 0x03, 0x8e},
    {0x6f, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x03, 0x6e},
    {0x7b, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x03, 0x6e},
    {0x69, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x03, 0x8e},
    {0xd0, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x11, 0x03, 0x6e},
    {0x5f, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x43, 0x8e},
    {0x79, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x59, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x11, 0x03, 0x6e},
    {0x02, 0x43, 0x11, 0x03, 0x6e},
    {0x07, 0x43, 0x11, 0x03, 0x6e},
    {0x16, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x03, 0x8e},
    {0xc5, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x11, 0x03, 0x6e},
    {0x12, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x03, 0x6e},
    {0x15, 0x41, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x03, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x03, 0x6e},
    {0x01, 0x43, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x03, 0x6e},
    {0x02, 0x42, 0x11, 0x03, 0x6e},
    {0x07, 0x42, 0x11, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x02, 0xb5, 0x9d},
    {0x0b, 0x45, 0x02, 0xf5, 0x9d},
    {0x05, 0x47, 0x02, 0xb5, 0x9d},
    {0x0c, 0x44, 0x42, 0xb5, 0x9d},
    {0x09, 0x45, 0x02, 0xf5, 0x9d},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0xb5, 0x9d},
    {0x14, 0x42, 0x42, 0xf5, 0x9d},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0xf5, 0x9d},
    {0x0e, 0x44, 0x42, 0xb5, 0x9d},
    {0x1c, 0x42, 0x42, 0xf5, 0x9d},
    {0x04, 0x47, 0x02, 0xb5, 0x9d},
    {0x02, 0x47, 0x02, 0xb5, 0x9d},
    {0x07, 0x47, 0x02, 0xb5, 0x9d},
    {0x17, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0xb5, 0x9d},
    {0xce, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0xf5, 0x9d},
    {0x08, 0x45, 0x02, 0xf5, 0x9d},
    {0x78, 0x03, 0x06, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0xb5, 0x9d},
    {0x40, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0xb5, 0x9d},
    {0xd6, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x03, 0x8e},
    {0x0b, 0x44, 0x04, 0x43, 0x8e},
    {0x05, 0x45, 0x04, 0x03, 0x8e},
    {0x0c, 0x42, 0x44, 0x03, 0x8e},
    {0x09, 0x44, 0x04, 0x43, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x03, 0x8e},
    {0x62, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x03, 0x8e},
    {0x7e, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x03, 0x8e},
    {0x02, 0x45, 0x04, 0x03, 0x8e},
    {0x07, 0x45, 0x04, 0x03, 0x8e},
    {0x70, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x03, 0x8e},
    {0xd2, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x43, 0x8e},
    {0x7a, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x44, 0x03, 0x8e},
    {0xc6, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x44, 0x03, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x03, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0x03, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0x03, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x03, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x03, 0x6e},
    {0x02, 0x43, 0x01, 0x03, 0x6e},
    {0x07, 0x43, 0x01, 0x03, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0x03, 0x7e},
    {0x0b, 0x43, 0x0a, 0x43, 0x7e},
    {0x05, 0x41, 0x0a, 0x03, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0x43, 0x7e},
    {0xc7, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x03, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0x03, 0x7e},
    {0x02, 0x41, 0x0a, 0x03, 0x7e},
    {0x07, 0x41, 0x0a, 0x03, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0x03, 0x6e},
    {0xd7, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0x03, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0x03, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0x43, 0x7e},
    {0xc3, 0x41, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x01, 0x03, 0x6e},
    {0x02, 0x42, 0x01, 0x03, 0x6e},
    {0x07, 0x42, 0x01, 0x03, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0x03, 0x8e},
    {0x0b, 0x41, 0x02, 0x43, 0x8e},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x0c, 0x43, 0x42, 0x03, 0x8e},
    {0x09, 0x41, 0x02, 0x43, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0x03, 0xb5, 0xee},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0x03, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0x03, 0x8e},
    {0x02, 0x46, 0x02, 0x03, 0x8e},
    {0x07, 0x46, 0x02, 0x03, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0x03, 0x8e},
    {0xcf, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0x43, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0x03, 0x7e},
    {0x0b, 0x42, 0x0a, 0x43, 0x7e},
    {0x05, 0x44, 0x0a, 0x03, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0x43, 0x7e},
    {0xcb, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0x03, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0x03, 0x8e},
    {0xc5, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x03, 0x7e},
    {0x02, 0x44, 0x0a, 0x03, 0x7e},
    {0x07, 0x44, 0x0a, 0x03, 0x7e},
    {0x0d, 0x43, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0x03, 0x8e},
    {0xc4, 0x4a, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x0a, 0x43, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0xf5, 0x9d},
    {0x05, 0x48, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0xb5, 0x9d},
    {0x09, 0x46, 0x07, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0xf5, 0x9d},
    {0xc2, 0x55, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0xf5, 0x9d},
    {0x0e, 0x41, 0x47, 0xb5, 0x9d},
    {0x1c, 0x43, 0x47, 0xf5, 0x9d},
    {0x04, 0x48, 0x06, 0xb5, 0xae},
    {0x02, 0x48, 0x06, 0xb5, 0xae},
    {0x07, 0x48, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x47, 0xb5, 0x9d},
    {0xcd, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0xf5, 0x9d},
    {0x08, 0x46, 0x07, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x47, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x47, 0xb5, 0x9d},
    {0xd5, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0x03, 0x8e},
    {0x0b, 0x44, 0x02, 0x43, 0x8e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x0c, 0x42, 0x42, 0x03, 0x8e},
    {0x09, 0x44, 0x02, 0x43, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0x03, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0x03, 0x8e},
    {0x02, 0x45, 0x02, 0x03, 0x8e},
    {0x07, 0x45, 0x02, 0x03, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0x03, 0x8e},
    {0xd1, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0x43, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0x03, 0x8e},
    {0xc6, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0x03, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x06, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x46, 0xb5, 0xae},
    {0x09, 0x47, 0x06, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x46, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x46, 0xf5, 0xae},
    {0x0e, 0x45, 0x46, 0xb5, 0xae},
    {0x1c, 0x44, 0x46, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x45, 0x46, 0xb5, 0xae},
    {0xc9, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x46, 0xf5, 0xae},
    {0x08, 0x47, 0x06, 0xf5, 0xae},
    {0x77, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x06, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x45, 0x46, 0xb5, 0xae},
    {0x7f, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x45, 0x46, 0xb5, 0xae},
    {0xd4, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x03, 0x8e},
    {0x0b, 0x41, 0x07, 0x43, 0x8e},
    {0x05, 0x46, 0x07, 0x03, 0x8e},
    {0x0c, 0x43, 0x47, 0x03, 0x8e},
    {0x09, 0x41, 0x07, 0x43, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x03, 0x8e},
    {0x61, 0x02, 0x06, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x03, 0x8e},
    {0x7d, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x03, 0x8e},
    {0x02, 0x46, 0x07, 0x03, 0x8e},
    {0x07, 0x46, 0x07, 0x03, 0x8e},
    {0x6f, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x03, 0x8e},
    {0xd0, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x43, 0x8e},
    {0x79, 0x02, 0x06, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc1, 0x46, 0xb5, 0x0e},
    {0x19, 0x44, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x03, 0x8e},
    {0xc5, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x03, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x46, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0xb5, 0x9d},
    {0x0b, 0x45, 0x07, 0xf5, 0x9d},
    {0x05, 0x47, 0x07, 0xb5, 0x9d},
    {0x0c, 0x44, 0x47, 0xb5, 0x9d},
    {0x09, 0x45, 0x07, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0xb5, 0x9d},
    {0x14, 0x42, 0x47, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0xf5, 0x9d},
    {0x0e, 0x44, 0x47, 0xb5, 0x9d},
    {0x1c, 0x42, 0x47, 0xf5, 0x9d},
    {0x04, 0x47, 0x07, 0xb5, 0x9d},
    {0x02, 0x47, 0x07, 0xb5, 0x9d},
    {0x07, 0x47, 0x07, 0xb5, 0x9d},
    {0x17, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0xb5, 0x9d},
    {0xce, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0xf5, 0x9d},
    {0x08, 0x45, 0x07, 0xf5, 0x9d},
    {0x78, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0xb5, 0x9d},
    {0x40, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0xb5, 0x9d},
    {0xd6, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x03, 0x8e},
    {0x0b, 0x44, 0x07, 0x43, 0x8e},
    {0x05, 0x45, 0x07, 0x03, 0x8e},
    {0x0c, 0x42, 0x47, 0x03, 0x8e},
    {0x09, 0x44, 0x07, 0x43, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x03, 0x8e},
    {0x62, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x03, 0x8e},
    {0x7e, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x03, 0x8e},
    {0x02, 0x45, 0x07, 0x03, 0x8e},
    {0x07, 0x45, 0x07, 0x03, 0x8e},
    {0x70, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x03, 0x8e},
    {0xd2, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x43, 0x8e},
    {0x7a, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0x03, 0x8e},
    {0xc6, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0x03, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb5, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb5, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb5, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0xb5, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb5, 0x00, 0x66},
    {0x02, 0x43, 0xb5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x1e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1e, 0xf5, 0x7f},
    {0x05, 0x41, 0x1e, 0xb5, 0x7f},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x1e, 0xf5, 0x7f},
    {0xc7, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x1e, 0xb5, 0x7f},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x1e, 0xb5, 0x7f},
    {0x02, 0x41, 0x1e, 0xb5, 0x7f},
    {0x07, 0x41, 0x1e, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb5, 0x00, 0x66},
    {0xd7, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0xb5, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0xd3, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0xb5, 0x00, 0x66},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1e, 0xf5, 0x7f},
    {0x83, 0xb5, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x1e, 0xf5, 0x7f},
    {0x04, 0x42, 0xb5, 0x00, 0x66},
    {0x02, 0x42, 0xb5, 0x00, 0x66},
    {0x07, 0x42, 0xb5, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0x16, 0xb5, 0x8f},
    {0x0b, 0x41, 0x16, 0xf5, 0x8f},
    {0x05, 0x46, 0x16, 0xb5, 0x8f},
    {0x0c, 0x43, 0x56, 0xb5, 0x8f},
    {0x09, 0x41, 0x16, 0xf5, 0x8f},
    {0xda, 0x03, 0x47, 0xb5, 0xff},
    {0x06, 0x46, 0x16, 0xb5, 0x8f},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0x47, 0xb5, 0xff},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0x56, 0xb5, 0x8f},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0x16, 0xb5, 0x8f},
    {0x02, 0x46, 0x16, 0xb5, 0x8f},
    {0x07, 0x46, 0x16, 0xb5, 0x8f},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0x07, 0x6f},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0x07, 0x6f},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0x56, 0xb5, 0x8f},
    {0xcf, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x07, 0x6f},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0x16, 0xf5, 0x8f},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0x47, 0xb5, 0xff},
    {0x0a, 0x41, 0x16, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x07, 0x6f},
    {0x02, 0x43, 0x03, 0x07, 0x6f},
    {0x07, 0x43, 0x03, 0x07, 0x6f},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x1e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1e, 0xf5, 0x7f},
    {0x05, 0x44, 0x1e, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x1e, 0xf5, 0x7f},
    {0xcb, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x1e, 0xb5, 0x7f},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x56, 0xb5, 0x8f},
    {0xc5, 0x56, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x1e, 0xb5, 0x7f},
    {0x02, 0x44, 0x1e, 0xb5, 0x7f},
    {0x07, 0x44, 0x1e, 0xb5, 0x7f},
    {0x0d, 0x43, 0x56, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x07, 0x6f},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x07, 0x6f},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x56, 0xb5, 0x8f},
    {0xc4, 0x5e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x07, 0x6f},
    {0x01, 0x43, 0x56, 0xb5, 0x8f},
    {0x08, 0x42, 0x1e, 0xf5, 0x7f},
    {0xc3, 0x03, 0x47, 0xb5, 0xff},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x1e, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x07, 0x6f},
    {0x02, 0x42, 0x03, 0x07, 0x6f},
    {0x07, 0x42, 0x03, 0x07, 0x6f},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x0d, 0xf5, 0x9f},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x4d, 0xb5, 0x9f},
    {0x09, 0x46, 0x0d, 0xf5, 0x9f},
    {0xda, 0x0b, 0x45, 0xf5, 0xff},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x4d, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x45, 0xf5, 0xff},
    {0x18, 0x43, 0x4d, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4d, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4d, 0xf5, 0x9f},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x4d, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x05, 0x6f},
    {0x1b, 0x43, 0x4d, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x05, 0x6f},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0x4d, 0xb5, 0x9f},
    {0xcd, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x05, 0x6f},
    {0x13, 0x43, 0x4d, 0xf5, 0x9f},
    {0x08, 0x46, 0x0d, 0xf5, 0x9f},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x45, 0xf5, 0xff},
    {0x0a, 0x46, 0x0d, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x05, 0x6f},
    {0x02, 0x43, 0x0b, 0x05, 0x6f},
    {0x07, 0x43, 0x0b, 0x05, 0x6f},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x05, 0x7f},
    {0x0b, 0x43, 0x03, 0x45, 0x7f},
    {0x05, 0x41, 0x03, 0x05, 0x7f},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x45, 0x7f},
    {0xc8, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x05, 0x7f},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0x47, 0xb5, 0xff},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0x4d, 0xb5, 0x9f},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x05, 0x7f},
    {0x02, 0x41, 0x03, 0x05, 0x7f},
    {0x07, 0x41, 0x03, 0x05, 0x7f},
    {0x0d, 0x41, 0x4d, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x05, 0x6f},
    {0xd9, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x05, 0x6f},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0x4d, 0xb5, 0x9f},
    {0xd5, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x05, 0x6f},
    {0x01, 0x41, 0x4d, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x45, 0x7f},
    {0xc3, 0x0b, 0x45, 0xf5, 0xff},
    {0xc1, 0x09, 0x47, 0xb5, 0xff},
    {0x0a, 0x43, 0x03, 0x45, 0x7f},
    {0x04, 0x42, 0x0b, 0x05, 0x6f},
    {0x02, 0x42, 0x0b, 0x05, 0x6f},
    {0x07, 0x42, 0x0b, 0x05, 0x6f},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0x16, 0xb5, 0x8f},
    {0x0b, 0x44, 0x16, 0xf5, 0x8f},
    {0x05, 0x45, 0x16, 0xb5, 0x8f},
    {0x0c, 0x42, 0x56, 0xb5, 0x8f},
    {0x09, 0x44, 0x16, 0xf5, 0x8f},
    {0xda, 0x05, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x16, 0xb5, 0x8f},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0x56, 0xb5, 0x8f},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0x16, 0xb5, 0x8f},
    {0x02, 0x45, 0x16, 0xb5, 0x8f},
    {0x07, 0x45, 0x16, 0xb5, 0x8f},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0x07, 0x6f},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0x07, 0x6f},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0x56, 0xb5, 0x8f},
    {0xd1, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x07, 0x6f},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0x16, 0xf5, 0x8f},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x16, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x07, 0x6f},
    {0x02, 0x43, 0x05, 0x07, 0x6f},
    {0x07, 0x43, 0x05, 0x07, 0x6f},
    {0x16, 0x43, 0x4d, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x05, 0x7f},
    {0x0b, 0x42, 0x03, 0x45, 0x7f},
    {0x05, 0x44, 0x03, 0x05, 0x7f},
    {0x1a, 0x43, 0x4d, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x45, 0x7f},
    {0xca, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x05, 0x7f},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0x4d, 0xf5, 0x9f},
    {0x0f, 0x42, 0x56, 0xb5, 0x8f},
    {0xc6, 0x56, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x05, 0x7f},
    {0x02, 0x44, 0x03, 0x05, 0x7f},
    {0x07, 0x44, 0x03, 0x05, 0x7f},
    {0x0d, 0x42, 0x56, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x07, 0x6f},
    {0x12, 0x43, 0x4d, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x07, 0x6f},
    {0x15, 0x43, 0x4d, 0xf5, 0x9f},
    {0x11, 0x42, 0x56, 0xb5, 0x8f},
    {0xc4, 0x03, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x05, 0x07, 0x6f},
    {0x01, 0x42, 0x56, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x45, 0x7f},
    {0xc3, 0x05, 0x47, 0xb5, 0xff},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0x45, 0x7f},
    {0x04, 0x42, 0x05, 0x07, 0x6f},
    {0x02, 0x42, 0x05, 0x07, 0x6f},
    {0x07, 0x42, 0x05, 0x07, 0x6f},
    {0xf4, 0x4d, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x04, 0xb5, 0xff},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x04, 0xb5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x04, 0x6f},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x04, 0x6f},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0c, 0x04, 0x6f},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x04, 0xb5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x04, 0x6f},
    {0x02, 0x43, 0x0c, 0x04, 0x6f},
    {0x07, 0x43, 0x0c, 0x04, 0x6f},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x04, 0x7f},
    {0x0b, 0x43, 0x0b, 0x44, 0x7f},
    {0x05, 0x41, 0x0b, 0x04, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x44, 0x7f},
    {0xc7, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x0b, 0x04, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x04, 0x7f},
    {0x02, 0x41, 0x0b, 0x04, 0x7f},
    {0x07, 0x41, 0x0b, 0x04, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x04, 0x6f},
    {0xd8, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0c, 0x04, 0x6f},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0xd4, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0c, 0x04, 0x6f},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x44, 0x7f},
    {0xc3, 0x4c, 0x04, 0xb5, 0xff},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x44, 0x7f},
    {0x04, 0x42, 0x0c, 0x04, 0x6f},
    {0x02, 0x42, 0x0c, 0x04, 0x6f},
    {0x07, 0x42, 0x0c, 0x04, 0x6f},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x04, 0x8f},
    {0x0b, 0x41, 0x03, 0x44, 0x8f},
    {0x05, 0x46, 0x03, 0x04, 0x8f},
    {0x0c, 0x43, 0x43, 0x04, 0x8f},
    {0x09, 0x41, 0x03, 0x44, 0x8f},
    {0xda, 0x09, 0x45, 0xf5, 0xff},
    {0x06, 0x46, 0x03, 0x04, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x04, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x04, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x04, 0x8f},
    {0x02, 0x46, 0x03, 0x04, 0x8f},
    {0x07, 0x46, 0x03, 0x04, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x05, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x05, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x04, 0x8f},
    {0xd0, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x05, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x44, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x03, 0x44, 0x8f},
    {0x04, 0x43, 0x09, 0x05, 0x6f},
    {0x02, 0x43, 0x09, 0x05, 0x6f},
    {0x07, 0x43, 0x09, 0x05, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x04, 0x7f},
    {0x0b, 0x42, 0x0b, 0x44, 0x7f},
    {0x05, 0x44, 0x0b, 0x04, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x44, 0x7f},
    {0xcc, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x0b, 0x04, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x45, 0xf5, 0xff},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x04, 0x8f},
    {0xc5, 0x43, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x0b, 0x04, 0x7f},
    {0x02, 0x44, 0x0b, 0x04, 0x7f},
    {0x07, 0x44, 0x0b, 0x04, 0x7f},
    {0x0d, 0x43, 0x43, 0x04, 0x8f},
    {0x03, 0x42, 0x09, 0x05, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x05, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x04, 0x8f},
    {0xc4, 0x4b, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x09, 0x05, 0x6f},
    {0x01, 0x43, 0x43, 0x04, 0x8f},
    {0x08, 0x42, 0x0b, 0x44, 0x7f},
    {0xc3, 0x09, 0x45, 0xf5, 0xff},
    {0xc1, 0x0e, 0x45, 0xf5, 0xff},
    {0x0a, 0x42, 0x0b, 0x44, 0x7f},
    {0x04, 0x42, 0x09, 0x05, 0x6f},
    {0x02, 0x42, 0x09, 0x05, 0x6f},
    {0x07, 0x42, 0x09, 0x05, 0x6f},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0d, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0d, 0xf5, 0x9f},
    {0x05, 0x47, 0x0d, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4d, 0xb5, 0x9f},
    {0x09, 0x45, 0x0d, 0xf5, 0x9f},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0x0d, 0xb5, 0x9f},
    {0x14, 0x42, 0x4d, 0xf5, 0x9f},
    {0xc2, 0x5c, 0x04, 0xb5, 0xff},
    {0x18, 0x42, 0x4d, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4d, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4d, 0xf5, 0x9f},
    {0x04, 0x47, 0x0d, 0xb5, 0x9f},
    {0x02, 0x47, 0x0d, 0xb5, 0x9f},
    {0x07, 0x47, 0x0d, 0xb5, 0x9f},
    {0x17, 0x42, 0x4d, 0xf5, 0x9f},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0x4d, 0xf5, 0x9f},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x4d, 0xb5, 0x9f},
    {0xce, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0x4d, 0xf5, 0x9f},
    {0x08, 0x45, 0x0d, 0xf5, 0x9f},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x04, 0xb5, 0xff},
    {0x0a, 0x45, 0x0d, 0xf5, 0x9f},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x05, 0x7f},
    {0x0b, 0x43, 0x05, 0x45, 0x7f},
    {0x05, 0x41, 0x05, 0x05, 0x7f},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x45, 0x7f},
    {0xc8, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x05, 0x05, 0x7f},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x4d, 0xb5, 0x9f},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x05, 0x7f},
    {0x02, 0x41, 0x05, 0x05, 0x7f},
    {0x07, 0x41, 0x05, 0x05, 0x7f},
    {0x0d, 0x44, 0x4d, 0xb5, 0x9f},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0xdb, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x4d, 0xb5, 0x9f},
    {0xd6, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0x4d, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x45, 0x7f},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0x45, 0x7f},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x04, 0x8f},
    {0x0b, 0x44, 0x03, 0x44, 0x8f},
    {0x05, 0x45, 0x03, 0x04, 0x8f},
    {0x0c, 0x42, 0x43, 0x04, 0x8f},
    {0x09, 0x44, 0x03, 0x44, 0x8f},
    {0xda, 0x06, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x03, 0x04, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x04, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x04, 0x8f},
    {0x02, 0x45, 0x03, 0x04, 0x8f},
    {0x07, 0x45, 0x03, 0x04, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x07, 0x6f},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x07, 0x6f},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x04, 0x8f},
    {0xd2, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x07, 0x6f},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x44, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0x44, 0x8f},
    {0x04, 0x43, 0x06, 0x07, 0x6f},
    {0x02, 0x43, 0x06, 0x07, 0x6f},
    {0x07, 0x43, 0x06, 0x07, 0x6f},
    {0x16, 0x42, 0x4d, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x05, 0x7f},
    {0x0b, 0x42, 0x05, 0x45, 0x7f},
    {0x05, 0x44, 0x05, 0x05, 0x7f},
    {0x1a, 0x42, 0x4d, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x45, 0x7f},
    {0xca, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x05, 0x05, 0x7f},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0x4d, 0xf5, 0x9f},
    {0x0f, 0x42, 0x43, 0x04, 0x8f},
    {0xc6, 0x43, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x05, 0x05, 0x7f},
    {0x02, 0x44, 0x05, 0x05, 0x7f},
    {0x07, 0x44, 0x05, 0x05, 0x7f},
    {0x0d, 0x42, 0x43, 0x04, 0x8f},
    {0x03, 0x42, 0x06, 0x07, 0x6f},
    {0x12, 0x42, 0x4d, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x07, 0x6f},
    {0x15, 0x42, 0x4d, 0xf5, 0x9f},
    {0x11, 0x42, 0x43, 0x04, 0x8f},
    {0xc4, 0x05, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x07, 0x6f},
    {0x01, 0x42, 0x43, 0x04, 0x8f},
    {0x08, 0x42, 0x05, 0x45, 0x7f},
    {0xc3, 0x06, 0x47, 0xb5, 0xff},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0x45, 0x7f},
    {0x04, 0x42, 0x06, 0x07, 0x6f},
    {0x02, 0x42, 0x06, 0x07, 0x6f},
    {0x07, 0x42, 0x06, 0x07, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0x02, 0xf5, 0xff},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x04, 0xb5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0x02, 0x6f},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0x02, 0x6f},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x14, 0x02, 0x6f},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x04, 0xb5, 0xff},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0x02, 0x6f},
    {0x02, 0x43, 0x14, 0x02, 0x6f},
    {0x07, 0x43, 0x14, 0x02, 0x6f},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0x02, 0x7f},
    {0x0b, 0x43, 0x0c, 0x42, 0x7f},
    {0x05, 0x41, 0x0c, 0x02, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0x42, 0x7f},
    {0xc7, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x0c, 0x02, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0x02, 0x7f},
    {0x02, 0x41, 0x0c, 0x02, 0x7f},
    {0x07, 0x41, 0x0c, 0x02, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0x02, 0x6f},
    {0xd7, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x14, 0x02, 0x6f},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x14, 0x02, 0x6f},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0x42, 0x7f},
    {0xc3, 0x54, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0x42, 0x7f},
    {0x04, 0x42, 0x14, 0x02, 0x6f},
    {0x02, 0x42, 0x14, 0x02, 0x6f},
    {0x07, 0x42, 0x14, 0x02, 0x6f},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0x02, 0x8f},
    {0x0b, 0x41, 0x0b, 0x42, 0x8f},
    {0x05, 0x46, 0x0b, 0x02, 0x8f},
    {0x0c, 0x43, 0x4b, 0x02, 0x8f},
    {0x09, 0x41, 0x0b, 0x42, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0x02, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x04, 0xb5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0x02, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0x02, 0x8f},
    {0x02, 0x46, 0x0b, 0x02, 0x8f},
    {0x07, 0x46, 0x0b, 0x02, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0x02, 0x8f},
    {0xcf, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0x42, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x0b, 0x42, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0x02, 0x7f},
    {0x0b, 0x42, 0x0c, 0x42, 0x7f},
    {0x05, 0x44, 0x0c, 0x02, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0x42, 0x7f},
    {0xcb, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0c, 0x02, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0x02, 0x8f},
    {0xc5, 0x4b, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x0c, 0x02, 0x7f},
    {0x02, 0x44, 0x0c, 0x02, 0x7f},
    {0x07, 0x44, 0x0c, 0x02, 0x7f},
    {0x0d, 0x43, 0x4b, 0x02, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0x02, 0x8f},
    {0xc4, 0x4c, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0x02, 0x8f},
    {0x08, 0x42, 0x0c, 0x42, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0x42, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0x42, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0x02, 0x9f},
    {0x09, 0x46, 0x03, 0x42, 0x9f},
    {0xda, 0x58, 0x02, 0xf5, 0xff},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0x42, 0x9f},
    {0xc2, 0x67, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x43, 0x42, 0x9f},
    {0x0e, 0x41, 0x43, 0x02, 0x9f},
    {0x1c, 0x43, 0x43, 0x42, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0x42, 0x9f},
    {0x03, 0x43, 0x18, 0x02, 0x6f},
    {0x1b, 0x43, 0x43, 0x42, 0x9f},
    {0x05, 0x43, 0x18, 0x02, 0x6f},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0x02, 0x9f},
    {0xcd, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x18, 0x02, 0x6f},
    {0x13, 0x43, 0x43, 0x42, 0x9f},
    {0x08, 0x46, 0x03, 0x42, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x03, 0x42, 0x9f},
    {0x04, 0x43, 0x18, 0x02, 0x6f},
    {0x02, 0x43, 0x18, 0x02, 0x6f},
    {0x07, 0x43, 0x18, 0x02, 0x6f},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x04, 0x7f},
    {0x0b, 0x43, 0x09, 0x44, 0x7f},
    {0x05, 0x41, 0x09, 0x04, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x44, 0x7f},
    {0xc8, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x09, 0x04, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x45, 0xf5, 0xff},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0x02, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x04, 0x7f},
    {0x02, 0x41, 0x09, 0x04, 0x7f},
    {0x07, 0x41, 0x09, 0x04, 0x7f},
    {0x0d, 0x41, 0x43, 0x02, 0x9f},
    {0x03, 0x42, 0x18, 0x02, 0x6f},
    {0xd9, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x18, 0x02, 0x6f},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0x02, 0x9f},
    {0xd5, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x18, 0x02, 0x6f},
    {0x01, 0x41, 0x43, 0x02, 0x9f},
    {0x08, 0x43, 0x09, 0x44, 0x7f},
    {0xc3, 0x58, 0x02, 0xf5, 0xff},
    {0xc1, 0x10, 0x45, 0xf5, 0xff},
    {0x0a, 0x43, 0x09, 0x44, 0x7f},
    {0x04, 0x42, 0x18, 0x02, 0x6f},
    {0x02, 0x42, 0x18, 0x02, 0x6f},
    {0x07, 0x42, 0x18, 0x02, 0x6f},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0x02, 0x8f},
    {0x0b, 0x44, 0x0b, 0x42, 0x8f},
    {0x05, 0x45, 0x0b, 0x02, 0x8f},
    {0x0c, 0x42, 0x4b, 0x02, 0x8f},
    {0x09, 0x44, 0x0b, 0x42, 0x8f},
    {0xda, 0x4e, 0x04, 0xb5, 0xff},
    {0x06, 0x45, 0x0b, 0x02, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0x02, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0x02, 0x8f},
    {0x02, 0x45, 0x0b, 0x02, 0x8f},
    {0x07, 0x45, 0x0b, 0x02, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x04, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x04, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0x02, 0x8f},
    {0xd1, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0e, 0x04, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0x42, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0x42, 0x8f},
    {0x04, 0x43, 0x0e, 0x04, 0x6f},
    {0x02, 0x43, 0x0e, 0x04, 0x6f},
    {0x07, 0x43, 0x0e, 0x04, 0x6f},
    {0x16, 0x43, 0x43, 0x42, 0x9f},
    {0x03, 0x44, 0x09, 0x04, 0x7f},
    {0x0b, 0x42, 0x09, 0x44, 0x7f},
    {0x05, 0x44, 0x09, 0x04, 0x7f},
    {0x1a, 0x43, 0x43, 0x42, 0x9f},
    {0x09, 0x42, 0x09, 0x44, 0x7f},
    {0xca, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x09, 0x04, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0x42, 0x9f},
    {0x0f, 0x42, 0x4b, 0x02, 0x8f},
    {0xc6, 0x4b, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x09, 0x04, 0x7f},
    {0x02, 0x44, 0x09, 0x04, 0x7f},
    {0x07, 0x44, 0x09, 0x04, 0x7f},
    {0x0d, 0x42, 0x4b, 0x02, 0x8f},
    {0x03, 0x42, 0x0e, 0x04, 0x6f},
    {0x12, 0x43, 0x43, 0x42, 0x9f},
    {0x05, 0x42, 0x0e, 0x04, 0x6f},
    {0x15, 0x43, 0x43, 0x42, 0x9f},
    {0x11, 0x42, 0x4b, 0x02, 0x8f},
    {0xc4, 0x49, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x0e, 0x04, 0x6f},
    {0x01, 0x42, 0x4b, 0x02, 0x8f},
    {0x08, 0x42, 0x09, 0x44, 0x7f},
    {0xc3, 0x4e, 0x04, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x44, 0x7f},
    {0x04, 0x42, 0x0e, 0x04, 0x6f},
    {0x02, 0x42, 0x0e, 0x04, 0x6f},
    {0x07, 0x42, 0x0e, 0x04, 0x6f},
    {0xf4, 0x43, 0x02, 0xf5, 0xff},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0x02, 0xf5, 0xff},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x04, 0xb5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0x02, 0x6f},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0x02, 0x6f},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x1c, 0x02, 0x6f},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x04, 0xb5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0x02, 0x6f},
    {0x02, 0x43, 0x1c, 0x02, 0x6f},
    {0x07, 0x43, 0x1c, 0x02, 0x6f},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x47, 0xb5, 0xff},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0x02, 0x6f},
    {0xd8, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x1c, 0x02, 0x6f},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x1c, 0x02, 0x6f},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0x02, 0xf5, 0xff},
    {0xc1, 0x08, 0x47, 0xb5, 0xff},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0x02, 0x6f},
    {0x02, 0x42, 0x1c, 0x02, 0x6f},
    {0x07, 0x42, 0x1c, 0x02, 0x6f},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x04, 0x8f},
    {0x0b, 0x41, 0x05, 0x44, 0x8f},
    {0x05, 0x46, 0x05, 0x04, 0x8f},
    {0x0c, 0x43, 0x45, 0x04, 0x8f},
    {0x09, 0x41, 0x05, 0x44, 0x8f},
    {0xda, 0x04, 0x47, 0xb5, 0xff},
    {0x06, 0x46, 0x05, 0x04, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x04, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x04, 0x8f},
    {0x02, 0x46, 0x05, 0x04, 0x8f},
    {0x07, 0x46, 0x05, 0x04, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x07, 0x6f},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x07, 0x6f},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x04, 0x8f},
    {0xd0, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x07, 0x6f},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x44, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x07, 0x6f},
    {0x02, 0x43, 0x04, 0x07, 0x6f},
    {0x07, 0x43, 0x04, 0x07, 0x6f},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x04, 0x8f},
    {0xc5, 0x45, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x07, 0x6f},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x07, 0x6f},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x04, 0x8f},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0x07, 0x6f},
    {0x01, 0x43, 0x45, 0x04, 0x8f},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0x47, 0xb5, 0xff},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0x07, 0x6f},
    {0x02, 0x42, 0x04, 0x07, 0x6f},
    {0x07, 0x42, 0x04, 0x07, 0x6f},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0x02, 0x9f},
    {0x0b, 0x45, 0x03, 0x42, 0x9f},
    {0x05, 0x47, 0x03, 0x02, 0x9f},
    {0x0c, 0x44, 0x43, 0x02, 0x9f},
    {0x09, 0x45, 0x03, 0x42, 0x9f},
    {0xda, 0x02, 0x47, 0xb5, 0xff},
    {0x06, 0x47, 0x03, 0x02, 0x9f},
    {0x14, 0x42, 0x43, 0x42, 0x9f},
    {0xc2, 0x0a, 0x47, 0xb5, 0xff},
    {0x18, 0x42, 0x43, 0x42, 0x9f},
    {0x0e, 0x44, 0x43, 0x02, 0x9f},
    {0x1c, 0x42, 0x43, 0x42, 0x9f},
    {0x04, 0x47, 0x03, 0x02, 0x9f},
    {0x02, 0x47, 0x03, 0x02, 0x9f},
    {0x07, 0x47, 0x03, 0x02, 0x9f},
    {0x17, 0x42, 0x43, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x07, 0x6f},
    {0x1b, 0x42, 0x43, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x07, 0x6f},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0x02, 0x9f},
    {0xce, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x07, 0x6f},
    {0x13, 0x42, 0x43, 0x42, 0x9f},
    {0x08, 0x45, 0x03, 0x42, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x47, 0xb5, 0xff},
    {0x0a, 0x45, 0x03, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x07, 0x6f},
    {0x02, 0x43, 0x02, 0x07, 0x6f},
    {0x07, 0x43, 0x02, 0x07, 0x6f},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x05, 0x7f},
    {0x0b, 0x43, 0x06, 0x45, 0x7f},
    {0x05, 0x41, 0x06, 0x05, 0x7f},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x45, 0x7f},
    {0xc8, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x06, 0x05, 0x7f},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0x02, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x05, 0x7f},
    {0x02, 0x41, 0x06, 0x05, 0x7f},
    {0x07, 0x41, 0x06, 0x05, 0x7f},
    {0x0d, 0x44, 0x43, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x07, 0x6f},
    {0xdb, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x07, 0x6f},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0x02, 0x9f},
    {0xd6, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x07, 0x6f},
    {0x01, 0x44, 0x43, 0x02, 0x9f},
    {0x08, 0x43, 0x06, 0x45, 0x7f},
    {0xc3, 0x02, 0x47, 0xb5, 0xff},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x45, 0x7f},
    {0x04, 0x42, 0x02, 0x07, 0x6f},
    {0x02, 0x42, 0x02, 0x07, 0x6f},
    {0x07, 0x42, 0x02, 0x07, 0x6f},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x04, 0x8f},
    {0x0b, 0x44, 0x05, 0x44, 0x8f},
    {0x05, 0x45, 0x05, 0x04, 0x8f},
    {0x0c, 0x42, 0x45, 0x04, 0x8f},
    {0x09, 0x44, 0x05, 0x44, 0x8f},
    {0xda, 0x07, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x05, 0x04, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x04, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x04, 0x8f},
    {0x02, 0x45, 0x05, 0x04, 0x8f},
    {0x07, 0x45, 0x05, 0x04, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x07, 0x6f},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x07, 0x6f},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x04, 0x8f},
    {0xd2, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x07, 0x6f},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x44, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x07, 0x6f},
    {0x02, 0x43, 0x07, 0x07, 0x6f},
    {0x07, 0x43, 0x07, 0x07, 0x6f},
    {0x16, 0x42, 0x43, 0x42, 0x9f},
    {0x03, 0x44, 0x06, 0x05, 0x7f},
    {0x0b, 0x42, 0x06, 0x45, 0x7f},
    {0x05, 0x44, 0x06, 0x05, 0x7f},
    {0x1a, 0x42, 0x43, 0x42, 0x9f},
    {0x09, 0x42, 0x06, 0x45, 0x7f},
    {0xca, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x06, 0x05, 0x7f},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0x42, 0x9f},
    {0x0f, 0x42, 0x45, 0x04, 0x8f},
    {0xc6, 0x45, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x06, 0x05, 0x7f},
    {0x02, 0x44, 0x06, 0x05, 0x7f},
    {0x07, 0x44, 0x06, 0x05, 0x7f},
    {0x0d, 0x42, 0x45, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x07, 0x6f},
    {0x12, 0x42, 0x43, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x07, 0x6f},
    {0x15, 0x42, 0x43, 0x42, 0x9f},
    {0x11, 0x42, 0x45, 0x04, 0x8f},
    {0xc4, 0x06, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x07, 0x6f},
    {0x01, 0x42, 0x45, 0x04, 0x8f},
    {0x08, 0x42, 0x06, 0x45, 0x7f},
    {0xc3, 0x07, 0x47, 0xb5, 0xff},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x45, 0x7f},
    {0x04, 0x42, 0x07, 0x07, 0x6f},
    {0x02, 0x42, 0x07, 0x07, 0x6f},
    {0x07, 0x42, 0x07, 0x07, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0x02, 0xf5, 0xff},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0x02, 0x6f},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0x02, 0x6f},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x17, 0x02, 0x6f},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0x02, 0xf5, 0xff},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0x02, 0x6f},
    {0x02, 0x43, 0x17, 0x02, 0x6f},
    {0x07, 0x43, 0x17, 0x02, 0x6f},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x22, 0xb5, 0x7f},
    {0x0b, 0x43, 0x22, 0xf5, 0x7f},
    {0x05, 0x41, 0x22, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x22, 0xf5, 0x7f},
    {0xc7, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x22, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x22, 0xb5, 0x7f},
    {0x02, 0x41, 0x22, 0xb5, 0x7f},
    {0x07, 0x41, 0x22, 0xb5, 0x7f},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0x02, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x17, 0x02, 0x6f},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x17, 0x02, 0x6f},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x22, 0xf5, 0x7f},
    {0xc3, 0x57, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x22, 0xf5, 0x7f},
    {0x04, 0x42, 0x17, 0x02, 0x6f},
    {0x02, 0x42, 0x17, 0x02, 0x6f},
    {0x07, 0x42, 0x17, 0x02, 0x6f},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x1a, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1a, 0xf5, 0x8f},
    {0x05, 0x46, 0x1a, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5a, 0xb5, 0x8f},
    {0x09, 0x41, 0x1a, 0xf5, 0x8f},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x1a, 0xb5, 0x8f},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x5a, 0xb5, 0x8f},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x1a, 0xb5, 0x8f},
    {0x02, 0x46, 0x1a, 0xb5, 0x8f},
    {0x07, 0x46, 0x1a, 0xb5, 0x8f},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x5a, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x1a, 0xf5, 0x8f},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x1a, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x22, 0xb5, 0x7f},
    {0x0b, 0x42, 0x22, 0xf5, 0x7f},
    {0x05, 0x44, 0x22, 0xb5, 0x7f},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x22, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x22, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x5a, 0xb5, 0x8f},
    {0xc5, 0x5a, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x22, 0xb5, 0x7f},
    {0x02, 0x44, 0x22, 0xb5, 0x7f},
    {0x07, 0x44, 0x22, 0xb5, 0x7f},
    {0x0d, 0x43, 0x5a, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x5a, 0xb5, 0x8f},
    {0xc4, 0x62, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x5a, 0xb5, 0x8f},
    {0x08, 0x42, 0x22, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x22, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x08, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x08, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x5b, 0x02, 0xf5, 0xff},
    {0x06, 0x49, 0x08, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x75, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x08, 0xb5, 0xaf},
    {0x02, 0x49, 0x08, 0xb5, 0xaf},
    {0x07, 0x49, 0x08, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x1b, 0x02, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x1b, 0x02, 0x6f},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x1b, 0x02, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x1b, 0x02, 0x6f},
    {0x02, 0x43, 0x1b, 0x02, 0x6f},
    {0x07, 0x43, 0x1b, 0x02, 0x6f},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x1b, 0x02, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1b, 0x02, 0x6f},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1b, 0x02, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0x02, 0xf5, 0xff},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0x02, 0x6f},
    {0x02, 0x42, 0x1b, 0x02, 0x6f},
    {0x07, 0x42, 0x1b, 0x02, 0x6f},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x1a, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1a, 0xf5, 0x8f},
    {0x05, 0x45, 0x1a, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5a, 0xb5, 0x8f},
    {0x09, 0x44, 0x1a, 0xf5, 0x8f},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x1a, 0xb5, 0x8f},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x5a, 0xb5, 0x8f},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x1a, 0xb5, 0x8f},
    {0x02, 0x45, 0x1a, 0xb5, 0x8f},
    {0x07, 0x45, 0x1a, 0xb5, 0x8f},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x5a, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x1a, 0xf5, 0x8f},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x1a, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x5a, 0xb5, 0x8f},
    {0xc6, 0x5a, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x5a, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x5a, 0xb5, 0x8f},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x5a, 0xb5, 0x8f},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x48, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x68, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x48, 0xf5, 0xaf},
    {0xc2, 0x63, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x48, 0xf5, 0xaf},
    {0x0e, 0x46, 0x48, 0xb5, 0xaf},
    {0x1c, 0x41, 0x48, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x48, 0xf5, 0xaf},
    {0x03, 0x43, 0x28, 0xb5, 0x6e},
    {0x1b, 0x41, 0x48, 0xf5, 0xaf},
    {0x05, 0x43, 0x28, 0xb5, 0x6e},
    {0x67, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x46, 0x48, 0xb5, 0xaf},
    {0xc9, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x28, 0xb5, 0x6e},
    {0x13, 0x41, 0x48, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x63, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x28, 0xb5, 0x6e},
    {0x02, 0x43, 0x28, 0xb5, 0x6e},
    {0x07, 0x43, 0x28, 0xb5, 0x6e},
    {0x6d, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x32, 0xb5, 0x7f},
    {0x0b, 0x43, 0x32, 0xf5, 0x7f},
    {0x05, 0x41, 0x32, 0xb5, 0x7f},
    {0x75, 0x03, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x32, 0xf5, 0x7f},
    {0xc7, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x32, 0xb5, 0x7f},
    {0x63, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x48, 0xf5, 0x0f},
    {0x73, 0x03, 0x08, 0xb5, 0xaf},
    {0x0f, 0x46, 0x48, 0xb5, 0xaf},
    {0x7f, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x32, 0xb5, 0x7f},
    {0x02, 0x41, 0x32, 0xb5, 0x7f},
    {0x07, 0x41, 0x32, 0xb5, 0x7f},
    {0x0d, 0x46, 0x48, 0xb5, 0xaf},
    {0x03, 0x42, 0x28, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x28, 0xb5, 0x6e},
    {0x6b, 0x03, 0x08, 0xb5, 0xaf},
    {0x11, 0x46, 0x48, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x28, 0xb5, 0x6e},
    {0x01, 0x46, 0x48, 0xb5, 0xaf},
    {0x08, 0x43, 0x32, 0xf5, 0x7f},
    {0xc3, 0x68, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x48, 0xf5, 0x0f},
    {0x0a, 0x43, 0x32, 0xf5, 0x7f},
    {0x04, 0x42, 0x28, 0xb5, 0x6e},
    {0x02, 0x42, 0x28, 0xb5, 0x6e},
    {0x07, 0x42, 0x28, 0xb5, 0x6e},
    {0x5d, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x46, 0x09, 0x02, 0x8f},
    {0x0b, 0x41, 0x09, 0x42, 0x8f},
    {0x05, 0x46, 0x09, 0x02, 0x8f},
    {0x0c, 0x43, 0x49, 0x02, 0x8f},
    {0x09, 0x41, 0x09, 0x42, 0x8f},
    {0xda, 0x50, 0x04, 0xb5, 0xff},
    {0x06, 0x46, 0x09, 0x02, 0x8f},
    {0x61, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x73, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x08, 0xb5, 0xaf},
    {0x0e, 0x43, 0x49, 0x02, 0x8f},
    {0x7d, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x46, 0x09, 0x02, 0x8f},
    {0x02, 0x46, 0x09, 0x02, 0x8f},
    {0x07, 0x46, 0x09, 0x02, 0x8f},
    {0x6f, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x04, 0x6f},
    {0x7b, 0x03, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x04, 0x6f},
    {0x69, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x43, 0x49, 0x02, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x04, 0x6f},
    {0x5f, 0x03, 0x08, 0xb5, 0xaf},
    {0x08, 0x41, 0x09, 0x42, 0x8f},
    {0x79, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x73, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x09, 0x42, 0x8f},
    {0x04, 0x43, 0x10, 0x04, 0x6f},
    {0x02, 0x43, 0x10, 0x04, 0x6f},
    {0x07, 0x43, 0x10, 0x04, 0x6f},
    {0x16, 0x41, 0x48, 0xf5, 0xaf},
    {0x03, 0x44, 0x32, 0xb5, 0x7f},
    {0x0b, 0x42, 0x32, 0xf5, 0x7f},
    {0x05, 0x44, 0x32, 0xb5, 0x7f},
    {0x1a, 0x41, 0x48, 0xf5, 0xaf},
    {0x09, 0x42, 0x32, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x32, 0xb5, 0x7f},
    {0x65, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x45, 0xf5, 0xff},
    {0x19, 0x41, 0x48, 0xf5, 0xaf},
    {0x0f, 0x43, 0x49, 0x02, 0x8f},
    {0xc5, 0x49, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x32, 0xb5, 0x7f},
    {0x02, 0x44, 0x32, 0xb5, 0x7f},
    {0x07, 0x44, 0x32, 0xb5, 0x7f},
    {0x0d, 0x43, 0x49, 0x02, 0x8f},
    {0x03, 0x42, 0x10, 0x04, 0x6f},
    {0x12, 0x41, 0x48, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x04, 0x6f},
    {0x15, 0x41, 0x48, 0xf5, 0xaf},
    {0x11, 0x43, 0x49, 0x02, 0x8f},
    {0xc4, 0x72, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x04, 0x6f},
    {0x01, 0x43, 0x49, 0x02, 0x8f},
    {0x08, 0x42, 0x32, 0xf5, 0x7f},
    {0xc3, 0x50, 0x04, 0xb5, 0xff},
    {0xc1, 0x0f, 0x45, 0xf5, 0xff},
    {0x0a, 0x42, 0x32, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x04, 0x6f},
    {0x02, 0x42, 0x10, 0x04, 0x6f},
    {0x07, 0x42, 0x10, 0x04, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8e, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7f, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8e, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8e, 0xb5, 0x6f},
    {0x68, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8e, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x7f, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8e, 0xb5, 0x6f},
    {0x02, 0x43, 0x8e, 0xb5, 0x6f},
    {0x07, 0x43, 0x8e, 0xb5, 0x6f},
    {0x6e, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x0e, 0x02, 0x7f},
    {0x0b, 0x43, 0x0e, 0x42, 0x7f},
    {0x05, 0x41, 0x0e, 0x02, 0x7f},
    {0x76, 0x03, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x0e, 0x42, 0x7f},
    {0xc8, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x0e, 0x02, 0x7f},
    {0x64, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x08, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x0e, 0x02, 0x7f},
    {0x02, 0x41, 0x0e, 0x02, 0x7f},
    {0x07, 0x41, 0x0e, 0x02, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8e, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8e, 0xb5, 0x6f},
    {0x6c, 0x03, 0x08, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8e, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0e, 0x42, 0x7f},
    {0x83, 0x8e, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0x42, 0x7f},
    {0x04, 0x42, 0x8e, 0xb5, 0x6f},
    {0x02, 0x42, 0x8e, 0xb5, 0x6f},
    {0x07, 0x42, 0x8e, 0xb5, 0x6f},
    {0x5e, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x45, 0x09, 0x02, 0x8f},
    {0x0b, 0x44, 0x09, 0x42, 0x8f},
    {0x05, 0x45, 0x09, 0x02, 0x8f},
    {0x0c, 0x42, 0x49, 0x02, 0x8f},
    {0x09, 0x44, 0x09, 0x42, 0x8f},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0x02, 0x8f},
    {0x62, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x08, 0xb5, 0xaf},
    {0x0e, 0x42, 0x49, 0x02, 0x8f},
    {0x7e, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x45, 0x09, 0x02, 0x8f},
    {0x02, 0x45, 0x09, 0x02, 0x8f},
    {0x07, 0x45, 0x09, 0x02, 0x8f},
    {0x70, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x42, 0x49, 0x02, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x08, 0xb5, 0xaf},
    {0x08, 0x44, 0x09, 0x42, 0x8f},
    {0x7a, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0x42, 0x8f},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0e, 0x02, 0x7f},
    {0x0b, 0x42, 0x0e, 0x42, 0x7f},
    {0x05, 0x44, 0x0e, 0x02, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0e, 0x42, 0x7f},
    {0xca, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0e, 0x02, 0x7f},
    {0x66, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x49, 0x02, 0x8f},
    {0xc6, 0x49, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x0e, 0x02, 0x7f},
    {0x02, 0x44, 0x0e, 0x02, 0x7f},
    {0x07, 0x44, 0x0e, 0x02, 0x7f},
    {0x0d, 0x42, 0x49, 0x02, 0x8f},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x49, 0x02, 0x8f},
    {0xc4, 0x4e, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0x02, 0x8f},
    {0x08, 0x42, 0x0e, 0x42, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0x42, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x48, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x53, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x45, 0xf5, 0xff},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0x02, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0x02, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x13, 0x02, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x45, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x13, 0x02, 0x6f},
    {0x02, 0x43, 0x13, 0x02, 0x6f},
    {0x07, 0x43, 0x13, 0x02, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3e, 0xf5, 0x7f},
    {0x05, 0x41, 0x3e, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3e, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3e, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3e, 0xb5, 0x7f},
    {0x02, 0x41, 0x3e, 0xb5, 0x7f},
    {0x07, 0x41, 0x3e, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0x02, 0x6f},
    {0xd7, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x13, 0x02, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x13, 0x02, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3e, 0xf5, 0x7f},
    {0xc3, 0x53, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3e, 0xf5, 0x7f},
    {0x04, 0x42, 0x13, 0x02, 0x6f},
    {0x02, 0x42, 0x13, 0x02, 0x6f},
    {0x07, 0x42, 0x13, 0x02, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x45, 0xf5, 0xff},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x98, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x05, 0x6f},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x05, 0x6f},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x05, 0x6f},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x98, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x05, 0x6f},
    {0x02, 0x43, 0x08, 0x05, 0x6f},
    {0x07, 0x43, 0x08, 0x05, 0x6f},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3e, 0xf5, 0x7f},
    {0x05, 0x44, 0x3e, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3e, 0xf5, 0x7f},
    {0xcb, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x3e, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3e, 0xb5, 0x7f},
    {0x02, 0x44, 0x3e, 0xb5, 0x7f},
    {0x07, 0x44, 0x3e, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x05, 0x6f},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x05, 0x6f},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x05, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3e, 0xf5, 0x7f},
    {0xc3, 0x08, 0x45, 0xf5, 0xff},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3e, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x05, 0x6f},
    {0x02, 0x42, 0x08, 0x05, 0x6f},
    {0x07, 0x42, 0x08, 0x05, 0x6f},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x08, 0xb5, 0xaf},
    {0x0b, 0x46, 0x05, 0x42, 0x9f},
    {0x05, 0x48, 0x08, 0xb5, 0xaf},
    {0x0c, 0x41, 0x45, 0x02, 0x9f},
    {0x09, 0x46, 0x05, 0x42, 0x9f},
    {0xda, 0x78, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x08, 0xb5, 0xaf},
    {0x14, 0x43, 0x45, 0x42, 0x9f},
    {0xc2, 0x6b, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x45, 0x42, 0x9f},
    {0x0e, 0x41, 0x45, 0x02, 0x9f},
    {0x1c, 0x43, 0x45, 0x42, 0x9f},
    {0x04, 0x48, 0x08, 0xb5, 0xaf},
    {0x02, 0x48, 0x08, 0xb5, 0xaf},
    {0x07, 0x48, 0x08, 0xb5, 0xaf},
    {0x17, 0x43, 0x45, 0x42, 0x9f},
    {0x03, 0x43, 0x38, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0x42, 0x9f},
    {0x05, 0x43, 0x38, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0x02, 0x9f},
    {0xcd, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x38, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0x42, 0x9f},
    {0x08, 0x46, 0x05, 0x42, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x05, 0x42, 0x9f},
    {0x04, 0x43, 0x38, 0xb5, 0x6e},
    {0x02, 0x43, 0x38, 0xb5, 0x6e},
    {0x07, 0x43, 0x38, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x05, 0x7f},
    {0x0b, 0x43, 0x04, 0x45, 0x7f},
    {0x05, 0x41, 0x04, 0x05, 0x7f},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x45, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x05, 0x7f},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x45, 0xf5, 0xff},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0x02, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x05, 0x7f},
    {0x02, 0x41, 0x04, 0x05, 0x7f},
    {0x07, 0x41, 0x04, 0x05, 0x7f},
    {0x0d, 0x41, 0x45, 0x02, 0x9f},
    {0x03, 0x42, 0x38, 0xb5, 0x6e},
    {0xd9, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x38, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0x02, 0x9f},
    {0xd5, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x38, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x45, 0x7f},
    {0xc3, 0x78, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x45, 0xf5, 0xff},
    {0x0a, 0x43, 0x04, 0x45, 0x7f},
    {0x04, 0x42, 0x38, 0xb5, 0x6e},
    {0x02, 0x42, 0x38, 0xb5, 0x6e},
    {0x07, 0x42, 0x38, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x94, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x94, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x05, 0x7f},
    {0x0b, 0x42, 0x04, 0x45, 0x7f},
    {0x05, 0x44, 0x04, 0x05, 0x7f},
    {0x1a, 0x43, 0x45, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x45, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x05, 0x7f},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0x42, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x05, 0x7f},
    {0x02, 0x44, 0x04, 0x05, 0x7f},
    {0x07, 0x44, 0x04, 0x05, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0x42, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x45, 0x7f},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x45, 0x7f},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x08, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x48, 0xb5, 0xaf},
    {0x09, 0x47, 0x08, 0xf5, 0xaf},
    {0xda, 0x0a, 0x45, 0xf5, 0xff},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x48, 0xf5, 0xaf},
    {0xc2, 0x01, 0x45, 0xf5, 0xff},
    {0x18, 0x44, 0x48, 0xf5, 0xaf},
    {0x0e, 0x45, 0x48, 0xb5, 0xaf},
    {0x1c, 0x44, 0x48, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x48, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x05, 0x6f},
    {0x1b, 0x44, 0x48, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x05, 0x6f},
    {0x67, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x45, 0x48, 0xb5, 0xaf},
    {0xc9, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x05, 0x6f},
    {0x13, 0x44, 0x48, 0xf5, 0xaf},
    {0x08, 0x47, 0x08, 0xf5, 0xaf},
    {0x77, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x01, 0x45, 0xf5, 0xff},
    {0x0a, 0x47, 0x08, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x05, 0x6f},
    {0x02, 0x43, 0x0a, 0x05, 0x6f},
    {0x07, 0x43, 0x0a, 0x05, 0x6f},
    {0x6d, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x05, 0x7f},
    {0x0b, 0x43, 0x02, 0x45, 0x7f},
    {0x05, 0x41, 0x02, 0x05, 0x7f},
    {0x75, 0x02, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x45, 0x7f},
    {0xc7, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x05, 0x7f},
    {0x63, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x08, 0xb5, 0xaf},
    {0x0f, 0x45, 0x48, 0xb5, 0xaf},
    {0x7f, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x05, 0x7f},
    {0x02, 0x41, 0x02, 0x05, 0x7f},
    {0x07, 0x41, 0x02, 0x05, 0x7f},
    {0x0d, 0x45, 0x48, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x05, 0x6f},
    {0xd8, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x05, 0x6f},
    {0x6b, 0x02, 0x08, 0xb5, 0xaf},
    {0x11, 0x45, 0x48, 0xb5, 0xaf},
    {0xd4, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x05, 0x6f},
    {0x01, 0x45, 0x48, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x45, 0x7f},
    {0xc3, 0x0a, 0x45, 0xf5, 0xff},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x45, 0x7f},
    {0x04, 0x42, 0x0a, 0x05, 0x6f},
    {0x02, 0x42, 0x0a, 0x05, 0x6f},
    {0x07, 0x42, 0x0a, 0x05, 0x6f},
    {0x5d, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x04, 0x8f},
    {0x0b, 0x41, 0x06, 0x44, 0x8f},
    {0x05, 0x46, 0x06, 0x04, 0x8f},
    {0x0c, 0x43, 0x46, 0x04, 0x8f},
    {0x09, 0x41, 0x06, 0x44, 0x8f},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x04, 0x8f},
    {0x61, 0x02, 0x08, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x08, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x04, 0x8f},
    {0x7d, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x04, 0x8f},
    {0x02, 0x46, 0x06, 0x04, 0x8f},
    {0x07, 0x46, 0x06, 0x04, 0x8f},
    {0x6f, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x04, 0x8f},
    {0xd0, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x08, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x44, 0x8f},
    {0x79, 0x02, 0x08, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x48, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x05, 0x7f},
    {0x0b, 0x42, 0x02, 0x45, 0x7f},
    {0x05, 0x44, 0x02, 0x05, 0x7f},
    {0x1a, 0x44, 0x48, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x45, 0x7f},
    {0xcc, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x05, 0x7f},
    {0x65, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x48, 0xf5, 0x0f},
    {0x19, 0x44, 0x48, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x04, 0x8f},
    {0xc5, 0x46, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x05, 0x7f},
    {0x02, 0x44, 0x02, 0x05, 0x7f},
    {0x07, 0x44, 0x02, 0x05, 0x7f},
    {0x0d, 0x43, 0x46, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x48, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x48, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x04, 0x8f},
    {0xc4, 0x02, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x04, 0x8f},
    {0x08, 0x42, 0x02, 0x45, 0x7f},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x48, 0xf5, 0x0f},
    {0x0a, 0x42, 0x02, 0x45, 0x7f},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0x02, 0x9f},
    {0x0b, 0x45, 0x05, 0x42, 0x9f},
    {0x05, 0x47, 0x05, 0x02, 0x9f},
    {0x0c, 0x44, 0x45, 0x02, 0x9f},
    {0x09, 0x45, 0x05, 0x42, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0x02, 0x9f},
    {0x14, 0x42, 0x45, 0x42, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0x42, 0x9f},
    {0x0e, 0x44, 0x45, 0x02, 0x9f},
    {0x1c, 0x42, 0x45, 0x42, 0x9f},
    {0x04, 0x47, 0x05, 0x02, 0x9f},
    {0x02, 0x47, 0x05, 0x02, 0x9f},
    {0x07, 0x47, 0x05, 0x02, 0x9f},
    {0x17, 0x42, 0x45, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x44, 0x45, 0x02, 0x9f},
    {0xce, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0x42, 0x9f},
    {0x08, 0x45, 0x05, 0x42, 0x9f},
    {0x78, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x05, 0x7f},
    {0x0b, 0x43, 0x07, 0x45, 0x7f},
    {0x05, 0x41, 0x07, 0x05, 0x7f},
    {0x76, 0x02, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x45, 0x7f},
    {0xc8, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x05, 0x7f},
    {0x64, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x08, 0xb5, 0xaf},
    {0x0f, 0x44, 0x45, 0x02, 0x9f},
    {0x40, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x05, 0x7f},
    {0x02, 0x41, 0x07, 0x05, 0x7f},
    {0x07, 0x41, 0x07, 0x05, 0x7f},
    {0x0d, 0x44, 0x45, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x08, 0xb5, 0xaf},
    {0x11, 0x44, 0x45, 0x02, 0x9f},
    {0xd6, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x45, 0x7f},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x45, 0x7f},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x04, 0x8f},
    {0x0b, 0x44, 0x06, 0x44, 0x8f},
    {0x05, 0x45, 0x06, 0x04, 0x8f},
    {0x0c, 0x42, 0x46, 0x04, 0x8f},
    {0x09, 0x44, 0x06, 0x44, 0x8f},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x04, 0x8f},
    {0x62, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x08, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x04, 0x8f},
    {0x7e, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x04, 0x8f},
    {0x02, 0x45, 0x06, 0x04, 0x8f},
    {0x07, 0x45, 0x06, 0x04, 0x8f},
    {0x70, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x04, 0x8f},
    {0xd2, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x08, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x44, 0x8f},
    {0x7a, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x05, 0x7f},
    {0x0b, 0x42, 0x07, 0x45, 0x7f},
    {0x05, 0x44, 0x07, 0x05, 0x7f},
    {0x1a, 0x42, 0x45, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x45, 0x7f},
    {0xca, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x05, 0x7f},
    {0x66, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0x42, 0x9f},
    {0x0f, 0x42, 0x46, 0x04, 0x8f},
    {0xc6, 0x46, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x05, 0x7f},
    {0x02, 0x44, 0x07, 0x05, 0x7f},
    {0x07, 0x44, 0x07, 0x05, 0x7f},
    {0x0d, 0x42, 0x46, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0x42, 0x9f},
    {0x11, 0x42, 0x46, 0x04, 0x8f},
    {0xc4, 0x07, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x04, 0x8f},
    {0x08, 0x42, 0x07, 0x45, 0x7f},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x45, 0x7f},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4b, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0x02, 0xf5, 0xff},
    {0x18, 0x4b, 0xf5, 0x40, 0xee},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4b, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2e, 0xb5, 0x6e},
    {0x1b, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2e, 0xb5, 0x6e},
    {0x67, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2e, 0xb5, 0x6e},
    {0x13, 0x4b, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0x02, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2e, 0xb5, 0x6e},
    {0x02, 0x43, 0x2e, 0xb5, 0x6e},
    {0x07, 0x43, 0x2e, 0xb5, 0x6e},
    {0x6d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x30, 0xb5, 0x7f},
    {0x0b, 0x43, 0x30, 0xf5, 0x7f},
    {0x05, 0x41, 0x30, 0xb5, 0x7f},
    {0x75, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x30, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x30, 0xb5, 0x7f},
    {0x63, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x30, 0xb5, 0x7f},
    {0x02, 0x41, 0x30, 0xb5, 0x7f},
    {0x07, 0x41, 0x30, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x2e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2e, 0xb5, 0x6e},
    {0x6b, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x30, 0xf5, 0x7f},
    {0xc3, 0x6e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x30, 0xf5, 0x7f},
    {0x04, 0x42, 0x2e, 0xb5, 0x6e},
    {0x02, 0x42, 0x2e, 0xb5, 0x6e},
    {0x07, 0x42, 0x2e, 0xb5, 0x6e},
    {0x5d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x30, 0xb5, 0x7f},
    {0x0b, 0x42, 0x30, 0xf5, 0x7f},
    {0x05, 0x44, 0x30, 0xb5, 0x7f},
    {0x1a, 0x4b, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x30, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x30, 0xb5, 0x7f},
    {0x65, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4b, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x30, 0xb5, 0x7f},
    {0x02, 0x44, 0x30, 0xb5, 0x7f},
    {0x07, 0x44, 0x30, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4b, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x70, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x30, 0xf5, 0x7f},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x30, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0xdc, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0xda, 0x44, 0xf5, 0x0f},
    {0x72, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0xda, 0x44, 0xf5, 0x0f},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0x04, 0xb5, 0xbf},
    {0x0b, 0x49, 0x04, 0xf5, 0xbf},
    {0x05, 0x4a, 0x04, 0xb5, 0xbf},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0x04, 0xf5, 0xbf},
    {0xda, 0x76, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0x04, 0xb5, 0xbf},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0x04, 0xb5, 0xbf},
    {0x02, 0x4a, 0x04, 0xb5, 0xbf},
    {0x07, 0x4a, 0x04, 0xb5, 0xbf},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x36, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x36, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x36, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0x04, 0xf5, 0xbf},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0x02, 0xf5, 0xff},
    {0x0a, 0x49, 0x04, 0xf5, 0xbf},
    {0x04, 0x43, 0x36, 0xb5, 0x6e},
    {0x02, 0x43, 0x36, 0xb5, 0x6e},
    {0x07, 0x43, 0x36, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x3c, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3c, 0xf5, 0x7f},
    {0x05, 0x41, 0x3c, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x3c, 0xf5, 0x7f},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x3c, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x3c, 0xb5, 0x7f},
    {0x02, 0x41, 0x3c, 0xb5, 0x7f},
    {0x07, 0x41, 0x3c, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x36, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x36, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x36, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x3c, 0xf5, 0x7f},
    {0xc3, 0x76, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x3c, 0xf5, 0x7f},
    {0x04, 0x42, 0x36, 0xb5, 0x6e},
    {0x02, 0x42, 0x36, 0xb5, 0x6e},
    {0x07, 0x42, 0x36, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x3c, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3c, 0xf5, 0x7f},
    {0x05, 0x44, 0x3c, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x3c, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3c, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x3c, 0xb5, 0x7f},
    {0x02, 0x44, 0x3c, 0xb5, 0x7f},
    {0x07, 0x44, 0x3c, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x7c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x3c, 0xf5, 0x7f},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3c, 0xf5, 0x7f},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0xdd, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x88, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x88, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x88, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x88, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x88, 0xb5, 0x6e},
    {0x02, 0x43, 0x88, 0xb5, 0x6e},
    {0x07, 0x43, 0x88, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x88, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x88, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x88, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x88, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x88, 0xb5, 0x6e},
    {0x02, 0x42, 0x88, 0xb5, 0x6e},
    {0x07, 0x42, 0x88, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x64, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0x44, 0xf5, 0xbf},
    {0xc2, 0x6f, 0x02, 0xf5, 0xff},
    {0x18, 0x46, 0x44, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x44, 0xf5, 0xbf},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0x44, 0xf5, 0xbf},
    {0x03, 0x43, 0x24, 0xb5, 0x6e},
    {0x1b, 0x46, 0x44, 0xf5, 0xbf},
    {0x05, 0x43, 0x24, 0xb5, 0x6e},
    {0x67, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0xc9, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x24, 0xb5, 0x6e},
    {0x13, 0x46, 0x44, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x6f, 0x02, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x24, 0xb5, 0x6e},
    {0x02, 0x43, 0x24, 0xb5, 0x6e},
    {0x07, 0x43, 0x24, 0xb5, 0x6e},
    {0x6d, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x2a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2a, 0xf5, 0x7f},
    {0x05, 0x41, 0x2a, 0xb5, 0x7f},
    {0x75, 0x01, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x2a, 0xf5, 0x7f},
    {0xc7, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x2a, 0xb5, 0x7f},
    {0x63, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x44, 0xbf},
    {0x73, 0x01, 0x04, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x2a, 0xb5, 0x7f},
    {0x02, 0x41, 0x2a, 0xb5, 0x7f},
    {0x07, 0x41, 0x2a, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x24, 0xb5, 0x6e},
    {0xd7, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x24, 0xb5, 0x6e},
    {0x6b, 0x01, 0x04, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x24, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2a, 0xf5, 0x7f},
    {0xc3, 0x64, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x44, 0xbf},
    {0x0a, 0x43, 0x2a, 0xf5, 0x7f},
    {0x04, 0x42, 0x24, 0xb5, 0x6e},
    {0x02, 0x42, 0x24, 0xb5, 0x6e},
    {0x07, 0x42, 0x24, 0xb5, 0x6e},
    {0x5d, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x46, 0x19, 0xb5, 0x8f},
    {0x0b, 0x41, 0x19, 0xf5, 0x8f},
    {0x05, 0x46, 0x19, 0xb5, 0x8f},
    {0x0c, 0x43, 0x59, 0xb5, 0x8f},
    {0x09, 0x41, 0x19, 0xf5, 0x8f},
    {0xda, 0xc2, 0x44, 0xf5, 0x0f},
    {0x06, 0x46, 0x19, 0xb5, 0x8f},
    {0x61, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x7b, 0x02, 0xf5, 0xff},
    {0x71, 0x01, 0x04, 0xb5, 0xbf},
    {0x0e, 0x43, 0x59, 0xb5, 0x8f},
    {0x7d, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x46, 0x19, 0xb5, 0x8f},
    {0x02, 0x46, 0x19, 0xb5, 0x8f},
    {0x07, 0x46, 0x19, 0xb5, 0x8f},
    {0x6f, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x04, 0x6f},
    {0x7b, 0x01, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x04, 0x6f},
    {0x69, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x43, 0x59, 0xb5, 0x8f},
    {0xcf, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x82, 0x04, 0x6f},
    {0x5f, 0x01, 0x04, 0xb5, 0xbf},
    {0x08, 0x41, 0x19, 0xf5, 0x8f},
    {0x79, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x7b, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x19, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x04, 0x6f},
    {0x02, 0x43, 0x82, 0x04, 0x6f},
    {0x07, 0x43, 0x82, 0x04, 0x6f},
    {0x16, 0x46, 0x44, 0xf5, 0xbf},
    {0x03, 0x44, 0x2a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2a, 0xf5, 0x7f},
    {0x05, 0x44, 0x2a, 0xb5, 0x7f},
    {0x1a, 0x46, 0x44, 0xf5, 0xbf},
    {0x09, 0x42, 0x2a, 0xf5, 0x7f},
    {0xcb, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x2a, 0xb5, 0x7f},
    {0x65, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x44, 0xbf},
    {0x19, 0x46, 0x44, 0xf5, 0xbf},
    {0x0f, 0x43, 0x59, 0xb5, 0x8f},
    {0xc5, 0x59, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x2a, 0xb5, 0x7f},
    {0x02, 0x44, 0x2a, 0xb5, 0x7f},
    {0x07, 0x44, 0x2a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x59, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x04, 0x6f},
    {0x12, 0x46, 0x44, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x04, 0x6f},
    {0x15, 0x46, 0x44, 0xf5, 0xbf},
    {0x11, 0x43, 0x59, 0xb5, 0x8f},
    {0xc4, 0x6a, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x04, 0x6f},
    {0x01, 0x43, 0x59, 0xb5, 0x8f},
    {0x08, 0x42, 0x2a, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x44, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x2a, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x04, 0x6f},
    {0x02, 0x42, 0x82, 0x04, 0x6f},
    {0x07, 0x42, 0x82, 0x04, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x11, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x51, 0xb5, 0x9f},
    {0x09, 0x46, 0x11, 0xf5, 0x9f},
    {0xda, 0x74, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x51, 0xf5, 0x9f},
    {0xc2, 0x69, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x51, 0xf5, 0x9f},
    {0x0e, 0x41, 0x51, 0xb5, 0x9f},
    {0x1c, 0x43, 0x51, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x51, 0xf5, 0x9f},
    {0x03, 0x43, 0x34, 0xb5, 0x6e},
    {0x1b, 0x43, 0x51, 0xf5, 0x9f},
    {0x05, 0x43, 0x34, 0xb5, 0x6e},
    {0x68, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x41, 0x51, 0xb5, 0x9f},
    {0xcd, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x34, 0xb5, 0x6e},
    {0x13, 0x43, 0x51, 0xf5, 0x9f},
    {0x08, 0x46, 0x11, 0xf5, 0x9f},
    {0x78, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x69, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x11, 0xf5, 0x9f},
    {0x04, 0x43, 0x34, 0xb5, 0x6e},
    {0x02, 0x43, 0x34, 0xb5, 0x6e},
    {0x07, 0x43, 0x34, 0xb5, 0x6e},
    {0x6e, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x10, 0x02, 0x7f},
    {0x0b, 0x43, 0x10, 0x42, 0x7f},
    {0x05, 0x41, 0x10, 0x02, 0x7f},
    {0x76, 0x01, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x10, 0x42, 0x7f},
    {0xc8, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x10, 0x02, 0x7f},
    {0x64, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0x04, 0xb5, 0xbf},
    {0x0f, 0x41, 0x51, 0xb5, 0x9f},
    {0x40, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x10, 0x02, 0x7f},
    {0x02, 0x41, 0x10, 0x02, 0x7f},
    {0x07, 0x41, 0x10, 0x02, 0x7f},
    {0x0d, 0x41, 0x51, 0xb5, 0x9f},
    {0x03, 0x42, 0x34, 0xb5, 0x6e},
    {0xd9, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x34, 0xb5, 0x6e},
    {0x6c, 0x01, 0x04, 0xb5, 0xbf},
    {0x11, 0x41, 0x51, 0xb5, 0x9f},
    {0xd5, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x34, 0xb5, 0x6e},
    {0x01, 0x41, 0x51, 0xb5, 0x9f},
    {0x08, 0x43, 0x10, 0x42, 0x7f},
    {0xc3, 0x74, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0x42, 0x7f},
    {0x04, 0x42, 0x34, 0xb5, 0x6e},
    {0x02, 0x42, 0x34, 0xb5, 0x6e},
    {0x07, 0x42, 0x34, 0xb5, 0x6e},
    {0x5e, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x45, 0x19, 0xb5, 0x8f},
    {0x0b, 0x44, 0x19, 0xf5, 0x8f},
    {0x05, 0x45, 0x19, 0xb5, 0x8f},
    {0x0c, 0x42, 0x59, 0xb5, 0x8f},
    {0x09, 0x44, 0x19, 0xf5, 0x8f},
    {0xda, 0x4f, 0x04, 0xb5, 0xff},
    {0x06, 0x45, 0x19, 0xb5, 0x8f},
    {0x62, 0x01, 0x04, 0xb5, 0xbf},
    {0x82, 0x90, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x04, 0xb5, 0xbf},
    {0x0e, 0x42, 0x59, 0xb5, 0x8f},
    {0x7e, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x45, 0x19, 0xb5, 0x8f},
    {0x02, 0x45, 0x19, 0xb5, 0x8f},
    {0x07, 0x45, 0x19, 0xb5, 0x8f},
    {0x70, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x04, 0x6f},
    {0x7c, 0x01, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x04, 0x6f},
    {0x6a, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x42, 0x59, 0xb5, 0x8f},
    {0xd1, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0f, 0x04, 0x6f},
    {0x60, 0x01, 0x04, 0xb5, 0xbf},
    {0x08, 0x44, 0x19, 0xf5, 0x8f},
    {0x7a, 0x01, 0x04, 0xb5, 0xbf},
    {0x81, 0x90, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x19, 0xf5, 0x8f},
    {0x04, 0x43, 0x0f, 0x04, 0x6f},
    {0x02, 0x43, 0x0f, 0x04, 0x6f},
    {0x07, 0x43, 0x0f, 0x04, 0x6f},
    {0x16, 0x43, 0x51, 0xf5, 0x9f},
    {0x03, 0x44, 0x10, 0x02, 0x7f},
    {0x0b, 0x42, 0x10, 0x42, 0x7f},
    {0x05, 0x44, 0x10, 0x02, 0x7f},
    {0x1a, 0x43, 0x51, 0xf5, 0x9f},
    {0x09, 0x42, 0x10, 0x42, 0x7f},
    {0xca, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x10, 0x02, 0x7f},
    {0x66, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x44, 0xbf},
    {0x19, 0x43, 0x51, 0xf5, 0x9f},
    {0x0f, 0x42, 0x59, 0xb5, 0x8f},
    {0xc6, 0x59, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x10, 0x02, 0x7f},
    {0x02, 0x44, 0x10, 0x02, 0x7f},
    {0x07, 0x44, 0x10, 0x02, 0x7f},
    {0x0d, 0x42, 0x59, 0xb5, 0x8f},
    {0x03, 0x42, 0x0f, 0x04, 0x6f},
    {0x12, 0x43, 0x51, 0xf5, 0x9f},
    {0x05, 0x42, 0x0f, 0x04, 0x6f},
    {0x15, 0x43, 0x51, 0xf5, 0x9f},
    {0x11, 0x42, 0x59, 0xb5, 0x8f},
    {0xc4, 0x50, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x04, 0x6f},
    {0x01, 0x42, 0x59, 0xb5, 0x8f},
    {0x08, 0x42, 0x10, 0x42, 0x7f},
    {0xc3, 0x4f, 0x04, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x10, 0x42, 0x7f},
    {0x04, 0x42, 0x0f, 0x04, 0x6f},
    {0x02, 0x42, 0x0f, 0x04, 0x6f},
    {0x07, 0x42, 0x0f, 0x04, 0x6f},
    {0xf4, 0x51, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x40, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0x02, 0xf5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x00, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x00, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x00, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0x02, 0xf5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x00, 0xb5, 0x6e},
    {0x02, 0x43, 0x00, 0xb5, 0x6e},
    {0x07, 0x43, 0x00, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x00, 0xb5, 0x6e},
    {0xd8, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x00, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x00, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x40, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x00, 0xb5, 0x6e},
    {0x02, 0x42, 0x00, 0xb5, 0x6e},
    {0x07, 0x42, 0x00, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0f, 0xf5, 0x8e},
    {0x05, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4f, 0xb5, 0x8e},
    {0x09, 0x41, 0x0f, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0f, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4f, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0f, 0xb5, 0x8e},
    {0x02, 0x46, 0x0f, 0xb5, 0x8e},
    {0x07, 0x46, 0x0f, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4f, 0xb5, 0x8e},
    {0xd0, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0f, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4f, 0xb5, 0x8e},
    {0xc5, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4f, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x11, 0xb5, 0x9f},
    {0x0b, 0x45, 0x11, 0xf5, 0x9f},
    {0x05, 0x47, 0x11, 0xb5, 0x9f},
    {0x0c, 0x44, 0x51, 0xb5, 0x9f},
    {0x09, 0x45, 0x11, 0xf5, 0x9f},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x11, 0xb5, 0x9f},
    {0x14, 0x42, 0x51, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x51, 0xf5, 0x9f},
    {0x0e, 0x44, 0x51, 0xb5, 0x9f},
    {0x1c, 0x42, 0x51, 0xf5, 0x9f},
    {0x04, 0x47, 0x11, 0xb5, 0x9f},
    {0x02, 0x47, 0x11, 0xb5, 0x9f},
    {0x07, 0x47, 0x11, 0xb5, 0x9f},
    {0x17, 0x42, 0x51, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x51, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x51, 0xb5, 0x9f},
    {0xce, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x51, 0xf5, 0x9f},
    {0x08, 0x45, 0x11, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x11, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0x44, 0xbf},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x51, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x51, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x51, 0xb5, 0x9f},
    {0xd6, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x51, 0xb5, 0x9f},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x44, 0xbf},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0f, 0xf5, 0x8e},
    {0x05, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4f, 0xb5, 0x8e},
    {0x09, 0x44, 0x0f, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0f, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0x44, 0xbf},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4f, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0f, 0xb5, 0x8e},
    {0x02, 0x45, 0x0f, 0xb5, 0x8e},
    {0x07, 0x45, 0x0f, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4f, 0xb5, 0x8e},
    {0xd2, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0f, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0x44, 0xbf},
    {0x0a, 0x44, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x51, 0xf5, 0x9f},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x51, 0xf5, 0x9f},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0x44, 0xbf},
    {0x19, 0x42, 0x51, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc6, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x51, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x51, 0xf5, 0x9f},
    {0x11, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xf4, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0x04, 0xb5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x04, 0xb5, 0xff},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x04, 0x6f},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x04, 0x6f},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0x04, 0x6f},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x04, 0xb5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0x04, 0x6f},
    {0x02, 0x43, 0x0d, 0x04, 0x6f},
    {0x07, 0x43, 0x0d, 0x04, 0x6f},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x20, 0xb5, 0x7f},
    {0x0b, 0x43, 0x20, 0xf5, 0x7f},
    {0x05, 0x41, 0x20, 0xb5, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x20, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x20, 0xb5, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x20, 0xb5, 0x7f},
    {0x02, 0x41, 0x20, 0xb5, 0x7f},
    {0x07, 0x41, 0x20, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0x04, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0x04, 0x6f},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0x04, 0x6f},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x20, 0xf5, 0x7f},
    {0xc3, 0x4d, 0x04, 0xb5, 0xff},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x20, 0xf5, 0x7f},
    {0x04, 0x42, 0x0d, 0x04, 0x6f},
    {0x02, 0x42, 0x0d, 0x04, 0x6f},
    {0x07, 0x42, 0x0d, 0x04, 0x6f},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x20, 0xb5, 0x7f},
    {0x0b, 0x42, 0x20, 0xf5, 0x7f},
    {0x05, 0x44, 0x20, 0xb5, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x20, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x20, 0xb5, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x20, 0xb5, 0x7f},
    {0x02, 0x44, 0x20, 0xb5, 0x7f},
    {0x07, 0x44, 0x20, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x60, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x20, 0xf5, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x20, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x81, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x81, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x9b, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x81, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0x04, 0xb5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x81, 0xb5, 0xaf},
    {0x02, 0x49, 0x81, 0xb5, 0xaf},
    {0x07, 0x49, 0x81, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9b, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9b, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9b, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x04, 0xb5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9b, 0xb5, 0x6f},
    {0x02, 0x43, 0x9b, 0xb5, 0x6f},
    {0x07, 0x43, 0x9b, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x04, 0x7f},
    {0x0b, 0x43, 0x08, 0x44, 0x7f},
    {0x05, 0x41, 0x08, 0x04, 0x7f},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x44, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0x04, 0x7f},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x04, 0x7f},
    {0x02, 0x41, 0x08, 0x04, 0x7f},
    {0x07, 0x41, 0x08, 0x04, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9b, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9b, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9b, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0x44, 0x7f},
    {0x83, 0x9b, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x44, 0x7f},
    {0x04, 0x42, 0x9b, 0xb5, 0x6f},
    {0x02, 0x42, 0x9b, 0xb5, 0x6f},
    {0x07, 0x42, 0x9b, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8c, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8c, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0x04, 0x7f},
    {0x0b, 0x42, 0x08, 0x44, 0x7f},
    {0x05, 0x44, 0x08, 0x04, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0x44, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0x04, 0x7f},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0x04, 0x7f},
    {0x02, 0x44, 0x08, 0x04, 0x7f},
    {0x07, 0x44, 0x08, 0x04, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0x44, 0x7f},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x44, 0x7f},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0x04, 0xb5, 0xbf},
    {0x0b, 0x48, 0x04, 0xf5, 0xbf},
    {0x05, 0x4b, 0x04, 0xb5, 0xbf},
    {0x0c, 0x46, 0xc1, 0xb5, 0xaf},
    {0x09, 0x48, 0x04, 0xf5, 0xbf},
    {0xda, 0x6c, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x04, 0xb5, 0xbf},
    {0x14, 0x41, 0xc1, 0xf5, 0xaf},
    {0xc2, 0x65, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0xc1, 0xf5, 0xaf},
    {0x0e, 0x46, 0xc1, 0xb5, 0xaf},
    {0x1c, 0x41, 0xc1, 0xf5, 0xaf},
    {0x04, 0x4b, 0x04, 0xb5, 0xbf},
    {0x02, 0x4b, 0x04, 0xb5, 0xbf},
    {0x07, 0x4b, 0x04, 0xb5, 0xbf},
    {0x17, 0x41, 0xc1, 0xf5, 0xaf},
    {0x03, 0x43, 0x2c, 0xb5, 0x6e},
    {0x1b, 0x41, 0xc1, 0xf5, 0xaf},
    {0x05, 0x43, 0x2c, 0xb5, 0x6e},
    {0x67, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x46, 0xc1, 0xb5, 0xaf},
    {0xc9, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x2c, 0xb5, 0x6e},
    {0x13, 0x41, 0xc1, 0xf5, 0xaf},
    {0x08, 0x48, 0x04, 0xf5, 0xbf},
    {0x77, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x65, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x04, 0xf5, 0xbf},
    {0x04, 0x43, 0x2c, 0xb5, 0x6e},
    {0x02, 0x43, 0x2c, 0xb5, 0x6e},
    {0x07, 0x43, 0x2c, 0xb5, 0x6e},
    {0x6d, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x3a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3a, 0xf5, 0x7f},
    {0x05, 0x41, 0x3a, 0xb5, 0x7f},
    {0x75, 0x03, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x3a, 0xf5, 0x7f},
    {0xc7, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x3a, 0xb5, 0x7f},
    {0x63, 0x03, 0x81, 0xb5, 0xaf},
    {0x82, 0x82, 0x81, 0xb5, 0x0f},
    {0x73, 0x03, 0x81, 0xb5, 0xaf},
    {0x0f, 0x46, 0xc1, 0xb5, 0xaf},
    {0x7f, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x3a, 0xb5, 0x7f},
    {0x02, 0x41, 0x3a, 0xb5, 0x7f},
    {0x07, 0x41, 0x3a, 0xb5, 0x7f},
    {0x0d, 0x46, 0xc1, 0xb5, 0xaf},
    {0x03, 0x42, 0x2c, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2c, 0xb5, 0x6e},
    {0x6b, 0x03, 0x81, 0xb5, 0xaf},
    {0x11, 0x46, 0xc1, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2c, 0xb5, 0x6e},
    {0x01, 0x46, 0xc1, 0xb5, 0xaf},
    {0x08, 0x43, 0x3a, 0xf5, 0x7f},
    {0xc3, 0x6c, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0x81, 0xb5, 0x0f},
    {0x0a, 0x43, 0x3a, 0xf5, 0x7f},
    {0x04, 0x42, 0x2c, 0xb5, 0x6e},
    {0x02, 0x42, 0x2c, 0xb5, 0x6e},
    {0x07, 0x42, 0x2c, 0xb5, 0x6e},
    {0x5d, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x46, 0x04, 0x04, 0x8f},
    {0x0b, 0x41, 0x04, 0x44, 0x8f},
    {0x05, 0x46, 0x04, 0x04, 0x8f},
    {0x0c, 0x43, 0x44, 0x04, 0x8f},
    {0x09, 0x41, 0x04, 0x44, 0x8f},
    {0xda, 0x51, 0x04, 0xb5, 0xff},
    {0x06, 0x46, 0x04, 0x04, 0x8f},
    {0x61, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x59, 0x04, 0xb5, 0xff},
    {0x71, 0x03, 0x81, 0xb5, 0xaf},
    {0x0e, 0x43, 0x44, 0x04, 0x8f},
    {0x7d, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x46, 0x04, 0x04, 0x8f},
    {0x02, 0x46, 0x04, 0x04, 0x8f},
    {0x07, 0x46, 0x04, 0x04, 0x8f},
    {0x6f, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x11, 0x04, 0x6f},
    {0x7b, 0x03, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x11, 0x04, 0x6f},
    {0x69, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x43, 0x44, 0x04, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0x04, 0x6f},
    {0x5f, 0x03, 0x81, 0xb5, 0xaf},
    {0x08, 0x41, 0x04, 0x44, 0x8f},
    {0x79, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x59, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x04, 0x44, 0x8f},
    {0x04, 0x43, 0x11, 0x04, 0x6f},
    {0x02, 0x43, 0x11, 0x04, 0x6f},
    {0x07, 0x43, 0x11, 0x04, 0x6f},
    {0x16, 0x41, 0xc1, 0xf5, 0xaf},
    {0x03, 0x44, 0x3a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3a, 0xf5, 0x7f},
    {0x05, 0x44, 0x3a, 0xb5, 0x7f},
    {0x1a, 0x41, 0xc1, 0xf5, 0xaf},
    {0x09, 0x42, 0x3a, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3a, 0xb5, 0x7f},
    {0x65, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xc1, 0xf5, 0xaf},
    {0x0f, 0x43, 0x44, 0x04, 0x8f},
    {0xc5, 0x44, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x3a, 0xb5, 0x7f},
    {0x02, 0x44, 0x3a, 0xb5, 0x7f},
    {0x07, 0x44, 0x3a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0x04, 0x8f},
    {0x03, 0x42, 0x11, 0x04, 0x6f},
    {0x12, 0x41, 0xc1, 0xf5, 0xaf},
    {0x05, 0x42, 0x11, 0x04, 0x6f},
    {0x15, 0x41, 0xc1, 0xf5, 0xaf},
    {0x11, 0x43, 0x44, 0x04, 0x8f},
    {0xc4, 0x7a, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0x04, 0x6f},
    {0x01, 0x43, 0x44, 0x04, 0x8f},
    {0x08, 0x42, 0x3a, 0xf5, 0x7f},
    {0xc3, 0x51, 0x04, 0xb5, 0xff},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3a, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0x04, 0x6f},
    {0x02, 0x42, 0x11, 0x04, 0x6f},
    {0x07, 0x42, 0x11, 0x04, 0x6f},
    {0xde, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x96, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x96, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x96, 0xb5, 0x6f},
    {0x68, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x96, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x81, 0xb5, 0xaf},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x96, 0xb5, 0x6f},
    {0x02, 0x43, 0x96, 0xb5, 0x6f},
    {0x07, 0x43, 0x96, 0xb5, 0x6f},
    {0x6e, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x81, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x96, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x96, 0xb5, 0x6f},
    {0x6c, 0x03, 0x81, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x96, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x96, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x96, 0xb5, 0x6f},
    {0x02, 0x42, 0x96, 0xb5, 0x6f},
    {0x07, 0x42, 0x96, 0xb5, 0x6f},
    {0x5e, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x45, 0x04, 0x04, 0x8f},
    {0x0b, 0x44, 0x04, 0x44, 0x8f},
    {0x05, 0x45, 0x04, 0x04, 0x8f},
    {0x0c, 0x42, 0x44, 0x04, 0x8f},
    {0x09, 0x44, 0x04, 0x44, 0x8f},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x04, 0x8f},
    {0x62, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x81, 0xb5, 0xaf},
    {0x0e, 0x42, 0x44, 0x04, 0x8f},
    {0x7e, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x45, 0x04, 0x04, 0x8f},
    {0x02, 0x45, 0x04, 0x04, 0x8f},
    {0x07, 0x45, 0x04, 0x04, 0x8f},
    {0x70, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x42, 0x44, 0x04, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x81, 0xb5, 0xaf},
    {0x08, 0x44, 0x04, 0x44, 0x8f},
    {0x7a, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x44, 0x8f},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0x04, 0x8f},
    {0xc6, 0x44, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x04, 0x8f},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0x04, 0x8f},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x04, 0x8f},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xb4, 0x81, 0xb5, 0x00, 0x0f},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x44, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x04, 0xb5, 0xff},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x44, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0x44, 0xf5, 0xbf},
    {0x0e, 0x47, 0x44, 0xb5, 0xbf},
    {0x1c, 0x45, 0x44, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x44, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x04, 0x6f},
    {0x1b, 0x45, 0x44, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x04, 0x6f},
    {0x67, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x47, 0x44, 0xb5, 0xbf},
    {0xc9, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x01, 0x04, 0x6f},
    {0x13, 0x45, 0x44, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x04, 0x6f},
    {0x02, 0x43, 0x01, 0x04, 0x6f},
    {0x07, 0x43, 0x01, 0x04, 0x6f},
    {0x6d, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x04, 0x7f},
    {0x0b, 0x43, 0x0a, 0x44, 0x7f},
    {0x05, 0x41, 0x0a, 0x04, 0x7f},
    {0x75, 0x04, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x44, 0x7f},
    {0xc7, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x0a, 0x04, 0x7f},
    {0x63, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x44, 0xbf},
    {0x73, 0x04, 0x04, 0xb5, 0xbf},
    {0x0f, 0x47, 0x44, 0xb5, 0xbf},
    {0x7f, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x04, 0x7f},
    {0x02, 0x41, 0x0a, 0x04, 0x7f},
    {0x07, 0x41, 0x0a, 0x04, 0x7f},
    {0x0d, 0x47, 0x44, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x04, 0x6f},
    {0xd7, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x04, 0x6f},
    {0x6b, 0x04, 0x04, 0xb5, 0xbf},
    {0x11, 0x47, 0x44, 0xb5, 0xbf},
    {0xd3, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x04, 0x6f},
    {0x01, 0x47, 0x44, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x44, 0x7f},
    {0xc3, 0x41, 0x04, 0xb5, 0xff},
    {0xc1, 0x03, 0x02, 0x44, 0xbf},
    {0x0a, 0x43, 0x0a, 0x44, 0x7f},
    {0x04, 0x42, 0x01, 0x04, 0x6f},
    {0x02, 0x42, 0x01, 0x04, 0x6f},
    {0x07, 0x42, 0x01, 0x04, 0x6f},
    {0x5d, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x04, 0x8f},
    {0x0b, 0x41, 0x02, 0x44, 0x8f},
    {0x05, 0x46, 0x02, 0x04, 0x8f},
    {0x0c, 0x43, 0x42, 0x04, 0x8f},
    {0x09, 0x41, 0x02, 0x44, 0x8f},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x04, 0x8f},
    {0x61, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x52, 0x04, 0xb5, 0xff},
    {0x71, 0x04, 0x04, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x04, 0x8f},
    {0x7d, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x04, 0x8f},
    {0x02, 0x46, 0x02, 0x04, 0x8f},
    {0x07, 0x46, 0x02, 0x04, 0x8f},
    {0x6f, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x04, 0x8f},
    {0xcf, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0x04, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x44, 0x8f},
    {0x79, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x52, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x02, 0x44, 0x8f},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0x44, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x04, 0x7f},
    {0x0b, 0x42, 0x0a, 0x44, 0x7f},
    {0x05, 0x44, 0x0a, 0x04, 0x7f},
    {0x1a, 0x45, 0x44, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x44, 0x7f},
    {0xcb, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x04, 0x7f},
    {0x65, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x44, 0xbf},
    {0x19, 0x45, 0x44, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x04, 0x8f},
    {0xc5, 0x42, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x0a, 0x04, 0x7f},
    {0x02, 0x44, 0x0a, 0x04, 0x7f},
    {0x07, 0x44, 0x0a, 0x04, 0x7f},
    {0x0d, 0x43, 0x42, 0x04, 0x8f},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0x44, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0x44, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x04, 0x8f},
    {0xc4, 0x4a, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0x04, 0x8f},
    {0x08, 0x42, 0x0a, 0x44, 0x7f},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x0a, 0x44, 0x7f},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x81, 0xb5, 0xaf},
    {0x0b, 0x46, 0x06, 0x42, 0x9f},
    {0x05, 0x48, 0x81, 0xb5, 0xaf},
    {0x0c, 0x41, 0x46, 0x02, 0x9f},
    {0x09, 0x46, 0x06, 0x42, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x81, 0xb5, 0xaf},
    {0x14, 0x43, 0x46, 0x42, 0x9f},
    {0xc2, 0x55, 0x04, 0xb5, 0xff},
    {0x18, 0x43, 0x46, 0x42, 0x9f},
    {0x0e, 0x41, 0x46, 0x02, 0x9f},
    {0x1c, 0x43, 0x46, 0x42, 0x9f},
    {0x04, 0x48, 0x81, 0xb5, 0xaf},
    {0x02, 0x48, 0x81, 0xb5, 0xaf},
    {0x07, 0x48, 0x81, 0xb5, 0xaf},
    {0x17, 0x43, 0x46, 0x42, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0x42, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x41, 0x46, 0x02, 0x9f},
    {0xcd, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0x42, 0x9f},
    {0x08, 0x46, 0x06, 0x42, 0x9f},
    {0x78, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x55, 0x04, 0xb5, 0xff},
    {0x0a, 0x46, 0x06, 0x42, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0x04, 0xb5, 0xbf},
    {0x0f, 0x41, 0x46, 0x02, 0x9f},
    {0x40, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0x02, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x04, 0xb5, 0xbf},
    {0x11, 0x41, 0x46, 0x02, 0x9f},
    {0xd5, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x04, 0x8f},
    {0x0b, 0x44, 0x02, 0x44, 0x8f},
    {0x05, 0x45, 0x02, 0x04, 0x8f},
    {0x0c, 0x42, 0x42, 0x04, 0x8f},
    {0x09, 0x44, 0x02, 0x44, 0x8f},
    {0xda, 0xc1, 0x44, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x04, 0x8f},
    {0x62, 0x04, 0x04, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x04, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x04, 0x8f},
    {0x7e, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x04, 0x8f},
    {0x02, 0x45, 0x02, 0x04, 0x8f},
    {0x07, 0x45, 0x02, 0x04, 0x8f},
    {0x70, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x04, 0x6f},
    {0x7c, 0x04, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x04, 0x6f},
    {0x6a, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x04, 0x8f},
    {0xd1, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x04, 0x6f},
    {0x60, 0x04, 0x04, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x44, 0x8f},
    {0x7a, 0x04, 0x04, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x44, 0x8f},
    {0x04, 0x43, 0x81, 0x04, 0x6f},
    {0x02, 0x43, 0x81, 0x04, 0x6f},
    {0x07, 0x43, 0x81, 0x04, 0x6f},
    {0x16, 0x43, 0x46, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x44, 0xbf},
    {0x19, 0x43, 0x46, 0x42, 0x9f},
    {0x0f, 0x42, 0x42, 0x04, 0x8f},
    {0xc6, 0x42, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0x04, 0x8f},
    {0x03, 0x42, 0x81, 0x04, 0x6f},
    {0x12, 0x43, 0x46, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0x04, 0x6f},
    {0x15, 0x43, 0x46, 0x42, 0x9f},
    {0x11, 0x42, 0x42, 0x04, 0x8f},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x04, 0x6f},
    {0x01, 0x42, 0x42, 0x04, 0x8f},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0xc3, 0xc1, 0x44, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0x04, 0x6f},
    {0x02, 0x42, 0x81, 0x04, 0x6f},
    {0x07, 0x42, 0x81, 0x04, 0x6f},
    {0xf4, 0x46, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0x04, 0xb5, 0xbf},
    {0x0b, 0x47, 0x81, 0xf5, 0xaf},
    {0x05, 0x4c, 0x04, 0xb5, 0xbf},
    {0x0c, 0x45, 0xc1, 0xb5, 0xaf},
    {0x09, 0x47, 0x81, 0xf5, 0xaf},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0x04, 0xb5, 0xbf},
    {0x14, 0x44, 0xc1, 0xf5, 0xaf},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0xc1, 0xf5, 0xaf},
    {0x0e, 0x45, 0xc1, 0xb5, 0xaf},
    {0x1c, 0x44, 0xc1, 0xf5, 0xaf},
    {0x04, 0x4c, 0x04, 0xb5, 0xbf},
    {0x02, 0x4c, 0x04, 0xb5, 0xbf},
    {0x07, 0x4c, 0x04, 0xb5, 0xbf},
    {0x17, 0x44, 0xc1, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0xc1, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x45, 0xc1, 0xb5, 0xaf},
    {0xc9, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0xc1, 0xf5, 0xaf},
    {0x08, 0x47, 0x81, 0xf5, 0xaf},
    {0x77, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x81, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x81, 0xb5, 0xaf},
    {0x0f, 0x45, 0xc1, 0xb5, 0xaf},
    {0x7f, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0xc1, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x81, 0xb5, 0xaf},
    {0x11, 0x45, 0xc1, 0xb5, 0xaf},
    {0xd4, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0xc1, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x46, 0x07, 0x04, 0x8f},
    {0x0b, 0x41, 0x07, 0x44, 0x8f},
    {0x05, 0x46, 0x07, 0x04, 0x8f},
    {0x0c, 0x43, 0x47, 0x04, 0x8f},
    {0x09, 0x41, 0x07, 0x44, 0x8f},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x04, 0x8f},
    {0x61, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0xc3, 0x44, 0xf5, 0x0f},
    {0x71, 0x02, 0x81, 0xb5, 0xaf},
    {0x0e, 0x43, 0x47, 0x04, 0x8f},
    {0x7d, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x46, 0x07, 0x04, 0x8f},
    {0x02, 0x46, 0x07, 0x04, 0x8f},
    {0x07, 0x46, 0x07, 0x04, 0x8f},
    {0x6f, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x43, 0x47, 0x04, 0x8f},
    {0xd0, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x81, 0xb5, 0xaf},
    {0x08, 0x41, 0x07, 0x44, 0x8f},
    {0x79, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0xc3, 0x44, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0xc1, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0xc1, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x81, 0xb5, 0xaf},
    {0x82, 0x81, 0x81, 0xb5, 0x0f},
    {0x19, 0x44, 0xc1, 0xf5, 0xaf},
    {0x0f, 0x43, 0x47, 0x04, 0x8f},
    {0xc5, 0x47, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0xc1, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0xc1, 0xf5, 0xaf},
    {0x11, 0x43, 0x47, 0x04, 0x8f},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x04, 0x8f},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0x81, 0x81, 0x81, 0xb5, 0x0f},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0x02, 0x9f},
    {0x0b, 0x45, 0x06, 0x42, 0x9f},
    {0x05, 0x47, 0x06, 0x02, 0x9f},
    {0x0c, 0x44, 0x46, 0x02, 0x9f},
    {0x09, 0x45, 0x06, 0x42, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0x02, 0x9f},
    {0x14, 0x42, 0x46, 0x42, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0x42, 0x9f},
    {0x0e, 0x44, 0x46, 0x02, 0x9f},
    {0x1c, 0x42, 0x46, 0x42, 0x9f},
    {0x04, 0x47, 0x06, 0x02, 0x9f},
    {0x02, 0x47, 0x06, 0x02, 0x9f},
    {0x07, 0x47, 0x06, 0x02, 0x9f},
    {0x17, 0x42, 0x46, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x44, 0x46, 0x02, 0x9f},
    {0xce, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0x42, 0x9f},
    {0x08, 0x45, 0x06, 0x42, 0x9f},
    {0x78, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0x44, 0xbf},
    {0x74, 0x02, 0x81, 0xb5, 0xaf},
    {0x0f, 0x44, 0x46, 0x02, 0x9f},
    {0x40, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x81, 0xb5, 0xaf},
    {0x11, 0x44, 0x46, 0x02, 0x9f},
    {0xd6, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x44, 0xbf},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x45, 0x07, 0x04, 0x8f},
    {0x0b, 0x44, 0x07, 0x44, 0x8f},
    {0x05, 0x45, 0x07, 0x04, 0x8f},
    {0x0c, 0x42, 0x47, 0x04, 0x8f},
    {0x09, 0x44, 0x07, 0x44, 0x8f},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x04, 0x8f},
    {0x62, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0x44, 0xbf},
    {0x72, 0x02, 0x81, 0xb5, 0xaf},
    {0x0e, 0x42, 0x47, 0x04, 0x8f},
    {0x7e, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x45, 0x07, 0x04, 0x8f},
    {0x02, 0x45, 0x07, 0x04, 0x8f},
    {0x07, 0x45, 0x07, 0x04, 0x8f},
    {0x70, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x42, 0x47, 0x04, 0x8f},
    {0xd2, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x81, 0xb5, 0xaf},
    {0x08, 0x44, 0x07, 0x44, 0x8f},
    {0x7a, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0x44, 0xbf},
    {0x0a, 0x44, 0x07, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0x44, 0xbf},
    {0x19, 0x42, 0x46, 0x42, 0x9f},
    {0x0f, 0x42, 0x47, 0x04, 0x8f},
    {0xc6, 0x47, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0x42, 0x9f},
    {0x11, 0x42, 0x47, 0x04, 0x8f},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x04, 0x8f},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0x4e, 0xf5, 0x40, 0xff},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0x4e, 0xf5, 0x40, 0xff},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4e, 0xf5, 0x40, 0xff},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0x4e, 0xf5, 0x40, 0xff},
    {0x03, 0x43, 0x1e, 0xb5, 0x6e},
    {0x1b, 0x4e, 0xf5, 0x40, 0xff},
    {0x05, 0x43, 0x1e, 0xb5, 0x6e},
    {0x67, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1e, 0xb5, 0x6e},
    {0x13, 0x4e, 0xf5, 0x40, 0xff},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0c, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1e, 0xb5, 0x6e},
    {0x02, 0x43, 0x1e, 0xb5, 0x6e},
    {0x07, 0x43, 0x1e, 0xb5, 0x6e},
    {0x6d, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x16, 0xb5, 0x7e},
    {0x0b, 0x43, 0x16, 0xf5, 0x7e},
    {0x05, 0x41, 0x16, 0xb5, 0x7e},
    {0x75, 0x0c, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x16, 0xf5, 0x7e},
    {0xc7, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x16, 0xb5, 0x7e},
    {0x63, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x07, 0xf5, 0xee},
    {0x73, 0x0c, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x16, 0xb5, 0x7e},
    {0x02, 0x41, 0x16, 0xb5, 0x7e},
    {0x07, 0x41, 0x16, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1e, 0xb5, 0x6e},
    {0xd7, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1e, 0xb5, 0x6e},
    {0x6b, 0x0c, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0xd3, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x16, 0xf5, 0x7e},
    {0xc3, 0x5e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x1e, 0xb5, 0x6e},
    {0x02, 0x42, 0x1e, 0xb5, 0x6e},
    {0x07, 0x42, 0x1e, 0xb5, 0x6e},
    {0x5d, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0d, 0xf5, 0x8e},
    {0x05, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4d, 0xb5, 0x8e},
    {0x09, 0x41, 0x0d, 0xf5, 0x8e},
    {0xda, 0x03, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x0d, 0xb5, 0x8e},
    {0x61, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x45, 0xb5, 0xee},
    {0x71, 0x0c, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0x4d, 0xb5, 0x8e},
    {0x7d, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0x0d, 0xb5, 0x8e},
    {0x02, 0x46, 0x0d, 0xb5, 0x8e},
    {0x07, 0x46, 0x0d, 0xb5, 0x8e},
    {0x6f, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x05, 0x6e},
    {0x7b, 0x0c, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x05, 0x6e},
    {0x69, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0x4d, 0xb5, 0x8e},
    {0xcf, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x05, 0x6e},
    {0x5f, 0x0c, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0x0d, 0xf5, 0x8e},
    {0x79, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x45, 0xb5, 0xee},
    {0x0a, 0x41, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x05, 0x6e},
    {0x02, 0x43, 0x03, 0x05, 0x6e},
    {0x07, 0x43, 0x03, 0x05, 0x6e},
    {0x16, 0x4e, 0xf5, 0x40, 0xff},
    {0x03, 0x44, 0x16, 0xb5, 0x7e},
    {0x0b, 0x42, 0x16, 0xf5, 0x7e},
    {0x05, 0x44, 0x16, 0xb5, 0x7e},
    {0x1a, 0x4e, 0xf5, 0x40, 0xff},
    {0x09, 0x42, 0x16, 0xf5, 0x7e},
    {0xcb, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x16, 0xb5, 0x7e},
    {0x65, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x07, 0xf5, 0xee},
    {0x19, 0x4e, 0xf5, 0x40, 0xff},
    {0x0f, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc5, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x16, 0xb5, 0x7e},
    {0x02, 0x44, 0x16, 0xb5, 0x7e},
    {0x07, 0x44, 0x16, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x05, 0x6e},
    {0x12, 0x4e, 0xf5, 0x40, 0xff},
    {0x05, 0x42, 0x03, 0x05, 0x6e},
    {0x15, 0x4e, 0xf5, 0x40, 0xff},
    {0x11, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x56, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x05, 0x6e},
    {0x01, 0x43, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x16, 0xf5, 0x7e},
    {0xc3, 0x03, 0x45, 0xb5, 0xee},
    {0xc1, 0x05, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x05, 0x6e},
    {0x02, 0x42, 0x03, 0x05, 0x6e},
    {0x07, 0x42, 0x03, 0x05, 0x6e},
    {0xdc, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x0a, 0xb5, 0xaf},
    {0x0b, 0x46, 0x01, 0xf5, 0x9f},
    {0x05, 0x49, 0x0a, 0xb5, 0xaf},
    {0x0c, 0x41, 0x41, 0xb5, 0x9f},
    {0x09, 0x46, 0x01, 0xf5, 0x9f},
    {0xda, 0x0b, 0x44, 0xf5, 0xee},
    {0x06, 0x49, 0x0a, 0xb5, 0xaf},
    {0x14, 0x43, 0x41, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x44, 0xf5, 0xee},
    {0x18, 0x43, 0x41, 0xf5, 0x9f},
    {0x0e, 0x41, 0x41, 0xb5, 0x9f},
    {0x1c, 0x43, 0x41, 0xf5, 0x9f},
    {0x04, 0x49, 0x0a, 0xb5, 0xaf},
    {0x02, 0x49, 0x0a, 0xb5, 0xaf},
    {0x07, 0x49, 0x0a, 0xb5, 0xaf},
    {0x17, 0x43, 0x41, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x04, 0x6e},
    {0x1b, 0x43, 0x41, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x04, 0x6e},
    {0x68, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0x41, 0xb5, 0x9f},
    {0xcd, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x04, 0x6e},
    {0x13, 0x43, 0x41, 0xf5, 0x9f},
    {0x08, 0x46, 0x01, 0xf5, 0x9f},
    {0x78, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x44, 0xf5, 0xee},
    {0x0a, 0x46, 0x01, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x04, 0x6e},
    {0x02, 0x43, 0x0b, 0x04, 0x6e},
    {0x07, 0x43, 0x0b, 0x04, 0x6e},
    {0x6e, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x04, 0x7e},
    {0x0b, 0x43, 0x03, 0x44, 0x7e},
    {0x05, 0x41, 0x03, 0x04, 0x7e},
    {0x76, 0x0c, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x44, 0x7e},
    {0xc8, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x04, 0x7e},
    {0x64, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x45, 0xb5, 0xee},
    {0x74, 0x0c, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0x41, 0xb5, 0x9f},
    {0x40, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x04, 0x7e},
    {0x02, 0x41, 0x03, 0x04, 0x7e},
    {0x07, 0x41, 0x03, 0x04, 0x7e},
    {0x0d, 0x41, 0x41, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x04, 0x6e},
    {0xd9, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x04, 0x6e},
    {0x6c, 0x0c, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0x41, 0xb5, 0x9f},
    {0xd5, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x04, 0x6e},
    {0x01, 0x41, 0x41, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x44, 0x7e},
    {0xc3, 0x0b, 0x44, 0xf5, 0xee},
    {0xc1, 0x09, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x0b, 0x04, 0x6e},
    {0x02, 0x42, 0x0b, 0x04, 0x6e},
    {0x07, 0x42, 0x0b, 0x04, 0x6e},
    {0x5e, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0d, 0xf5, 0x8e},
    {0x05, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4d, 0xb5, 0x8e},
    {0x09, 0x44, 0x0d, 0xf5, 0x8e},
    {0xda, 0x05, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x0d, 0xb5, 0x8e},
    {0x62, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0xda, 0x42, 0xf5, 0x0f},
    {0x72, 0x0c, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0x4d, 0xb5, 0x8e},
    {0x7e, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0x0d, 0xb5, 0x8e},
    {0x02, 0x45, 0x0d, 0xb5, 0x8e},
    {0x07, 0x45, 0x0d, 0xb5, 0x8e},
    {0x70, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x05, 0x6e},
    {0x7c, 0x0c, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x05, 0x6e},
    {0x6a, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0x4d, 0xb5, 0x8e},
    {0xd1, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x05, 0x6e},
    {0x60, 0x0c, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0x0d, 0xf5, 0x8e},
    {0x7a, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0xda, 0x42, 0xf5, 0x0f},
    {0x0a, 0x44, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x05, 0x6e},
    {0x02, 0x43, 0x05, 0x05, 0x6e},
    {0x07, 0x43, 0x05, 0x05, 0x6e},
    {0x16, 0x43, 0x41, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x04, 0x7e},
    {0x0b, 0x42, 0x03, 0x44, 0x7e},
    {0x05, 0x44, 0x03, 0x04, 0x7e},
    {0x1a, 0x43, 0x41, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x44, 0x7e},
    {0xca, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x04, 0x7e},
    {0x66, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x07, 0xf5, 0xee},
    {0x19, 0x43, 0x41, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc6, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x04, 0x7e},
    {0x02, 0x44, 0x03, 0x04, 0x7e},
    {0x07, 0x44, 0x03, 0x04, 0x7e},
    {0x0d, 0x42, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x05, 0x6e},
    {0x12, 0x43, 0x41, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x05, 0x6e},
    {0x15, 0x43, 0x41, 0xf5, 0x9f},
    {0x11, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x03, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x05, 0x6e},
    {0x01, 0x42, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x44, 0x7e},
    {0xc3, 0x05, 0x45, 0xb5, 0xee},
    {0xc1, 0x06, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x05, 0x05, 0x6e},
    {0x02, 0x42, 0x05, 0x05, 0x6e},
    {0x07, 0x42, 0x05, 0x05, 0x6e},
    {0xf4, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0x02, 0xb5, 0xbf},
    {0x0b, 0x49, 0x02, 0xf5, 0xbf},
    {0x05, 0x4a, 0x02, 0xb5, 0xbf},
    {0x0c, 0x46, 0x4a, 0xb5, 0xaf},
    {0x09, 0x49, 0x02, 0xf5, 0xbf},
    {0xda, 0x4c, 0x02, 0xb5, 0xee},
    {0x06, 0x4a, 0x02, 0xb5, 0xbf},
    {0x14, 0x41, 0x4a, 0xf5, 0xaf},
    {0xc2, 0x54, 0x02, 0xb5, 0xee},
    {0x18, 0x41, 0x4a, 0xf5, 0xaf},
    {0x0e, 0x46, 0x4a, 0xb5, 0xaf},
    {0x1c, 0x41, 0x4a, 0xf5, 0xaf},
    {0x04, 0x4a, 0x02, 0xb5, 0xbf},
    {0x02, 0x4a, 0x02, 0xb5, 0xbf},
    {0x07, 0x4a, 0x02, 0xb5, 0xbf},
    {0x17, 0x41, 0x4a, 0xf5, 0xaf},
    {0x03, 0x43, 0x0c, 0x02, 0x6e},
    {0x1b, 0x41, 0x4a, 0xf5, 0xaf},
    {0x05, 0x43, 0x0c, 0x02, 0x6e},
    {0x67, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x46, 0x4a, 0xb5, 0xaf},
    {0xc9, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x02, 0x6e},
    {0x13, 0x41, 0x4a, 0xf5, 0xaf},
    {0x08, 0x49, 0x02, 0xf5, 0xbf},
    {0x77, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x54, 0x02, 0xb5, 0xee},
    {0x0a, 0x49, 0x02, 0xf5, 0xbf},
    {0x04, 0x43, 0x0c, 0x02, 0x6e},
    {0x02, 0x43, 0x0c, 0x02, 0x6e},
    {0x07, 0x43, 0x0c, 0x02, 0x6e},
    {0x6d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x0b, 0x02, 0x7e},
    {0x0b, 0x43, 0x0b, 0x42, 0x7e},
    {0x05, 0x41, 0x0b, 0x02, 0x7e},
    {0x75, 0x03, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x0b, 0x42, 0x7e},
    {0xc7, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x02, 0x7e},
    {0x63, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x4a, 0xf5, 0x0f},
    {0x73, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x46, 0x4a, 0xb5, 0xaf},
    {0x7f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x0b, 0x02, 0x7e},
    {0x02, 0x41, 0x0b, 0x02, 0x7e},
    {0x07, 0x41, 0x0b, 0x02, 0x7e},
    {0x0d, 0x46, 0x4a, 0xb5, 0xaf},
    {0x03, 0x42, 0x0c, 0x02, 0x6e},
    {0xd8, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0c, 0x02, 0x6e},
    {0x6b, 0x03, 0x0a, 0xb5, 0xaf},
    {0x11, 0x46, 0x4a, 0xb5, 0xaf},
    {0xd4, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0c, 0x02, 0x6e},
    {0x01, 0x46, 0x4a, 0xb5, 0xaf},
    {0x08, 0x43, 0x0b, 0x42, 0x7e},
    {0xc3, 0x4c, 0x02, 0xb5, 0xee},
    {0xc1, 0xc2, 0x4a, 0xf5, 0x0f},
    {0x0a, 0x43, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x0c, 0x02, 0x6e},
    {0x02, 0x42, 0x0c, 0x02, 0x6e},
    {0x07, 0x42, 0x0c, 0x02, 0x6e},
    {0x5d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x46, 0x03, 0x02, 0x8e},
    {0x0b, 0x41, 0x03, 0x42, 0x8e},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x0c, 0x43, 0x43, 0x02, 0x8e},
    {0x09, 0x41, 0x03, 0x42, 0x8e},
    {0xda, 0x09, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x61, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x58, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x43, 0x43, 0x02, 0x8e},
    {0x7d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x46, 0x03, 0x02, 0x8e},
    {0x02, 0x46, 0x03, 0x02, 0x8e},
    {0x07, 0x46, 0x03, 0x02, 0x8e},
    {0x6f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x09, 0x04, 0x6e},
    {0x7b, 0x03, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x09, 0x04, 0x6e},
    {0x69, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x43, 0x43, 0x02, 0x8e},
    {0xd0, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x04, 0x6e},
    {0x5f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x08, 0x41, 0x03, 0x42, 0x8e},
    {0x79, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x58, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x09, 0x04, 0x6e},
    {0x02, 0x43, 0x09, 0x04, 0x6e},
    {0x07, 0x43, 0x09, 0x04, 0x6e},
    {0x16, 0x41, 0x4a, 0xf5, 0xaf},
    {0x03, 0x44, 0x0b, 0x02, 0x7e},
    {0x0b, 0x42, 0x0b, 0x42, 0x7e},
    {0x05, 0x44, 0x0b, 0x02, 0x7e},
    {0x1a, 0x41, 0x4a, 0xf5, 0xaf},
    {0x09, 0x42, 0x0b, 0x42, 0x7e},
    {0xcc, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x0b, 0x02, 0x7e},
    {0x65, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x0e, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x4a, 0xf5, 0xaf},
    {0x0f, 0x43, 0x43, 0x02, 0x8e},
    {0xc5, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x02, 0x7e},
    {0x02, 0x44, 0x0b, 0x02, 0x7e},
    {0x07, 0x44, 0x0b, 0x02, 0x7e},
    {0x0d, 0x43, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x09, 0x04, 0x6e},
    {0x12, 0x41, 0x4a, 0xf5, 0xaf},
    {0x05, 0x42, 0x09, 0x04, 0x6e},
    {0x15, 0x41, 0x4a, 0xf5, 0xaf},
    {0x11, 0x43, 0x43, 0x02, 0x8e},
    {0xc4, 0x4b, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x04, 0x6e},
    {0x01, 0x43, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x0b, 0x42, 0x7e},
    {0xc3, 0x09, 0x44, 0xf5, 0xee},
    {0xc1, 0x0e, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x09, 0x04, 0x6e},
    {0x02, 0x42, 0x09, 0x04, 0x6e},
    {0x07, 0x42, 0x09, 0x04, 0x6e},
    {0xdd, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x01, 0xb5, 0x9f},
    {0x0b, 0x45, 0x01, 0xf5, 0x9f},
    {0x05, 0x47, 0x01, 0xb5, 0x9f},
    {0x0c, 0x44, 0x41, 0xb5, 0x9f},
    {0x09, 0x45, 0x01, 0xf5, 0x9f},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0x01, 0xb5, 0x9f},
    {0x14, 0x42, 0x41, 0xf5, 0x9f},
    {0xc2, 0x5c, 0x02, 0xb5, 0xee},
    {0x18, 0x42, 0x41, 0xf5, 0x9f},
    {0x0e, 0x44, 0x41, 0xb5, 0x9f},
    {0x1c, 0x42, 0x41, 0xf5, 0x9f},
    {0x04, 0x47, 0x01, 0xb5, 0x9f},
    {0x02, 0x47, 0x01, 0xb5, 0x9f},
    {0x07, 0x47, 0x01, 0xb5, 0x9f},
    {0x17, 0x42, 0x41, 0xf5, 0x9f},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0x41, 0xf5, 0x9f},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x44, 0x41, 0xb5, 0x9f},
    {0xce, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0x41, 0xf5, 0x9f},
    {0x08, 0x45, 0x01, 0xf5, 0x9f},
    {0x78, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x5c, 0x02, 0xb5, 0xee},
    {0x0a, 0x45, 0x01, 0xf5, 0x9f},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x05, 0x04, 0x7e},
    {0x0b, 0x43, 0x05, 0x44, 0x7e},
    {0x05, 0x41, 0x05, 0x04, 0x7e},
    {0x76, 0x03, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x05, 0x44, 0x7e},
    {0xc8, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x04, 0x7e},
    {0x64, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x04, 0x07, 0xf5, 0xee},
    {0x74, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x44, 0x41, 0xb5, 0x9f},
    {0x40, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x05, 0x04, 0x7e},
    {0x02, 0x41, 0x05, 0x04, 0x7e},
    {0x07, 0x41, 0x05, 0x04, 0x7e},
    {0x0d, 0x44, 0x41, 0xb5, 0x9f},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0xdb, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0x0a, 0xb5, 0xaf},
    {0x11, 0x44, 0x41, 0xb5, 0x9f},
    {0xd6, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0x41, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x44, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x45, 0x03, 0x02, 0x8e},
    {0x0b, 0x44, 0x03, 0x42, 0x8e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x0c, 0x42, 0x43, 0x02, 0x8e},
    {0x09, 0x44, 0x03, 0x42, 0x8e},
    {0xda, 0x06, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x62, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x02, 0x07, 0xf5, 0xee},
    {0x72, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x42, 0x43, 0x02, 0x8e},
    {0x7e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x45, 0x03, 0x02, 0x8e},
    {0x02, 0x45, 0x03, 0x02, 0x8e},
    {0x07, 0x45, 0x03, 0x02, 0x8e},
    {0x70, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x05, 0x6e},
    {0x7c, 0x03, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x05, 0x6e},
    {0x6a, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x42, 0x43, 0x02, 0x8e},
    {0xd2, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x05, 0x6e},
    {0x60, 0x03, 0x0a, 0xb5, 0xaf},
    {0x08, 0x44, 0x03, 0x42, 0x8e},
    {0x7a, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x02, 0x07, 0xf5, 0xee},
    {0x0a, 0x44, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x05, 0x6e},
    {0x02, 0x43, 0x06, 0x05, 0x6e},
    {0x07, 0x43, 0x06, 0x05, 0x6e},
    {0x16, 0x42, 0x41, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x04, 0x7e},
    {0x0b, 0x42, 0x05, 0x44, 0x7e},
    {0x05, 0x44, 0x05, 0x04, 0x7e},
    {0x1a, 0x42, 0x41, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x44, 0x7e},
    {0xca, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x04, 0x7e},
    {0x66, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x07, 0x07, 0xf5, 0xee},
    {0x19, 0x42, 0x41, 0xf5, 0x9f},
    {0x0f, 0x42, 0x43, 0x02, 0x8e},
    {0xc6, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x04, 0x7e},
    {0x02, 0x44, 0x05, 0x04, 0x7e},
    {0x07, 0x44, 0x05, 0x04, 0x7e},
    {0x0d, 0x42, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x05, 0x6e},
    {0x12, 0x42, 0x41, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x05, 0x6e},
    {0x15, 0x42, 0x41, 0xf5, 0x9f},
    {0x11, 0x42, 0x43, 0x02, 0x8e},
    {0xc4, 0x05, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x05, 0x6e},
    {0x01, 0x42, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x05, 0x44, 0x7e},
    {0xc3, 0x06, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x06, 0x05, 0x6e},
    {0x02, 0x42, 0x06, 0x05, 0x6e},
    {0x07, 0x42, 0x06, 0x05, 0x6e},
    {0xf4, 0x4a, 0xf5, 0x40, 0x0f},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x62, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0x42, 0xf5, 0xbf},
    {0xc2, 0x57, 0x02, 0xb5, 0xee},
    {0x18, 0x46, 0x42, 0xf5, 0xbf},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x42, 0xf5, 0xbf},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0x42, 0xf5, 0xbf},
    {0x03, 0x43, 0x22, 0xb5, 0x6e},
    {0x1b, 0x46, 0x42, 0xf5, 0xbf},
    {0x05, 0x43, 0x22, 0xb5, 0x6e},
    {0x67, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x22, 0xb5, 0x6e},
    {0x13, 0x46, 0x42, 0xf5, 0xbf},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x02, 0xb5, 0xbf},
    {0xc1, 0x57, 0x02, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x22, 0xb5, 0x6e},
    {0x02, 0x43, 0x22, 0xb5, 0x6e},
    {0x07, 0x43, 0x22, 0xb5, 0x6e},
    {0x6d, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1a, 0xf5, 0x7e},
    {0x05, 0x41, 0x1a, 0xb5, 0x7e},
    {0x75, 0x01, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc7, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x1a, 0xb5, 0x7e},
    {0x63, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x42, 0xbf},
    {0x73, 0x01, 0x02, 0xb5, 0xbf},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x1a, 0xb5, 0x7e},
    {0x02, 0x41, 0x1a, 0xb5, 0x7e},
    {0x07, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x22, 0xb5, 0x6e},
    {0xd7, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x22, 0xb5, 0x6e},
    {0x6b, 0x01, 0x02, 0xb5, 0xbf},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x22, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc3, 0x62, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x42, 0xbf},
    {0x0a, 0x43, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x22, 0xb5, 0x6e},
    {0x02, 0x42, 0x22, 0xb5, 0x6e},
    {0x07, 0x42, 0x22, 0xb5, 0x6e},
    {0x5d, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x46, 0x12, 0xb5, 0x8f},
    {0x0b, 0x41, 0x12, 0xf5, 0x8f},
    {0x05, 0x46, 0x12, 0xb5, 0x8f},
    {0x0c, 0x43, 0x52, 0xb5, 0x8f},
    {0x09, 0x41, 0x12, 0xf5, 0x8f},
    {0xda, 0xc2, 0x42, 0xf5, 0x0f},
    {0x06, 0x46, 0x12, 0xb5, 0x8f},
    {0x61, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x5b, 0x02, 0xb5, 0xee},
    {0x71, 0x01, 0x02, 0xb5, 0xbf},
    {0x0e, 0x43, 0x52, 0xb5, 0x8f},
    {0x7d, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x46, 0x12, 0xb5, 0x8f},
    {0x02, 0x46, 0x12, 0xb5, 0x8f},
    {0x07, 0x46, 0x12, 0xb5, 0x8f},
    {0x6f, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x02, 0x6f},
    {0x7b, 0x01, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x02, 0x6f},
    {0x69, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x43, 0x52, 0xb5, 0x8f},
    {0xcf, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0x02, 0x6f},
    {0x5f, 0x01, 0x02, 0xb5, 0xbf},
    {0x08, 0x41, 0x12, 0xf5, 0x8f},
    {0x79, 0x01, 0x02, 0xb5, 0xbf},
    {0xc1, 0x5b, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x12, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x02, 0x6f},
    {0x02, 0x43, 0x82, 0x02, 0x6f},
    {0x07, 0x43, 0x82, 0x02, 0x6f},
    {0x16, 0x46, 0x42, 0xf5, 0xbf},
    {0x03, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1a, 0xf5, 0x7e},
    {0x05, 0x44, 0x1a, 0xb5, 0x7e},
    {0x1a, 0x46, 0x42, 0xf5, 0xbf},
    {0x09, 0x42, 0x1a, 0xf5, 0x7e},
    {0xcb, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x1a, 0xb5, 0x7e},
    {0x65, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x42, 0xbf},
    {0x19, 0x46, 0x42, 0xf5, 0xbf},
    {0x0f, 0x43, 0x52, 0xb5, 0x8f},
    {0xc5, 0x52, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x1a, 0xb5, 0x7e},
    {0x02, 0x44, 0x1a, 0xb5, 0x7e},
    {0x07, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x43, 0x52, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x02, 0x6f},
    {0x12, 0x46, 0x42, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x02, 0x6f},
    {0x15, 0x46, 0x42, 0xf5, 0xbf},
    {0x11, 0x43, 0x52, 0xb5, 0x8f},
    {0xc4, 0x5a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x02, 0x6f},
    {0x01, 0x43, 0x52, 0xb5, 0x8f},
    {0x08, 0x42, 0x1a, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x42, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x02, 0x6f},
    {0x02, 0x42, 0x82, 0x02, 0x6f},
    {0x07, 0x42, 0x82, 0x02, 0x6f},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x0a, 0xb5, 0xaf},
    {0x0b, 0x46, 0x08, 0xf5, 0x9e},
    {0x05, 0x48, 0x0a, 0xb5, 0xaf},
    {0x0c, 0x41, 0x48, 0xb5, 0x9e},
    {0x09, 0x46, 0x08, 0xf5, 0x9e},
    {0xda, 0x72, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x0a, 0xb5, 0xaf},
    {0x14, 0x43, 0x48, 0xf5, 0x9e},
    {0xc2, 0x68, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x48, 0xf5, 0x9e},
    {0x0e, 0x41, 0x48, 0xb5, 0x9e},
    {0x1c, 0x43, 0x48, 0xf5, 0x9e},
    {0x04, 0x48, 0x0a, 0xb5, 0xaf},
    {0x02, 0x48, 0x0a, 0xb5, 0xaf},
    {0x07, 0x48, 0x0a, 0xb5, 0xaf},
    {0x17, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x32, 0xb5, 0x6e},
    {0x1b, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x32, 0xb5, 0x6e},
    {0x68, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x41, 0x48, 0xb5, 0x9e},
    {0xcd, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x32, 0xb5, 0x6e},
    {0x13, 0x43, 0x48, 0xf5, 0x9e},
    {0x08, 0x46, 0x08, 0xf5, 0x9e},
    {0x78, 0x01, 0x02, 0xb5, 0xbf},
    {0xc1, 0x68, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x32, 0xb5, 0x6e},
    {0x02, 0x43, 0x32, 0xb5, 0x6e},
    {0x07, 0x43, 0x32, 0xb5, 0x6e},
    {0x6e, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x09, 0x02, 0x7e},
    {0x0b, 0x43, 0x09, 0x42, 0x7e},
    {0x05, 0x41, 0x09, 0x02, 0x7e},
    {0x76, 0x01, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x09, 0x42, 0x7e},
    {0xc8, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x09, 0x02, 0x7e},
    {0x64, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x10, 0x44, 0xf5, 0xee},
    {0x74, 0x01, 0x02, 0xb5, 0xbf},
    {0x0f, 0x41, 0x48, 0xb5, 0x9e},
    {0x40, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x09, 0x02, 0x7e},
    {0x02, 0x41, 0x09, 0x02, 0x7e},
    {0x07, 0x41, 0x09, 0x02, 0x7e},
    {0x0d, 0x41, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x32, 0xb5, 0x6e},
    {0xd9, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x32, 0xb5, 0x6e},
    {0x6c, 0x01, 0x02, 0xb5, 0xbf},
    {0x11, 0x41, 0x48, 0xb5, 0x9e},
    {0xd5, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x32, 0xb5, 0x6e},
    {0x01, 0x41, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x42, 0x7e},
    {0xc3, 0x72, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x32, 0xb5, 0x6e},
    {0x02, 0x42, 0x32, 0xb5, 0x6e},
    {0x07, 0x42, 0x32, 0xb5, 0x6e},
    {0x5e, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x45, 0x12, 0xb5, 0x8f},
    {0x0b, 0x44, 0x12, 0xf5, 0x8f},
    {0x05, 0x45, 0x12, 0xb5, 0x8f},
    {0x0c, 0x42, 0x52, 0xb5, 0x8f},
    {0x09, 0x44, 0x12, 0xf5, 0x8f},
    {0xda, 0x4e, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x12, 0xb5, 0x8f},
    {0x62, 0x01, 0x02, 0xb5, 0xbf},
    {0x82, 0x8e, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x02, 0xb5, 0xbf},
    {0x0e, 0x42, 0x52, 0xb5, 0x8f},
    {0x7e, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x45, 0x12, 0xb5, 0x8f},
    {0x02, 0x45, 0x12, 0xb5, 0x8f},
    {0x07, 0x45, 0x12, 0xb5, 0x8f},
    {0x70, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x0e, 0x02, 0x6e},
    {0x7c, 0x01, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x0e, 0x02, 0x6e},
    {0x6a, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x42, 0x52, 0xb5, 0x8f},
    {0xd1, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x02, 0x6e},
    {0x60, 0x01, 0x02, 0xb5, 0xbf},
    {0x08, 0x44, 0x12, 0xf5, 0x8f},
    {0x7a, 0x01, 0x02, 0xb5, 0xbf},
    {0x81, 0x8e, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x12, 0xf5, 0x8f},
    {0x04, 0x43, 0x0e, 0x02, 0x6e},
    {0x02, 0x43, 0x0e, 0x02, 0x6e},
    {0x07, 0x43, 0x0e, 0x02, 0x6e},
    {0x16, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x02, 0x7e},
    {0x0b, 0x42, 0x09, 0x42, 0x7e},
    {0x05, 0x44, 0x09, 0x02, 0x7e},
    {0x1a, 0x43, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x42, 0x7e},
    {0xca, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x09, 0x02, 0x7e},
    {0x66, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x42, 0xbf},
    {0x19, 0x43, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x52, 0xb5, 0x8f},
    {0xc6, 0x52, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x09, 0x02, 0x7e},
    {0x02, 0x44, 0x09, 0x02, 0x7e},
    {0x07, 0x44, 0x09, 0x02, 0x7e},
    {0x0d, 0x42, 0x52, 0xb5, 0x8f},
    {0x03, 0x42, 0x0e, 0x02, 0x6e},
    {0x12, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x02, 0x6e},
    {0x15, 0x43, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x52, 0xb5, 0x8f},
    {0xc4, 0x49, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x02, 0x6e},
    {0x01, 0x42, 0x52, 0xb5, 0x8f},
    {0x08, 0x42, 0x09, 0x42, 0x7e},
    {0xc3, 0x4e, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x0e, 0x02, 0x6e},
    {0x02, 0x42, 0x0e, 0x02, 0x6e},
    {0x07, 0x42, 0x0e, 0x02, 0x6e},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0x53, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0x0a, 0xf5, 0xaf},
    {0x05, 0x53, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0x4a, 0xb5, 0xaf},
    {0x09, 0x47, 0x0a, 0xf5, 0xaf},
    {0xda, 0x7e, 0xf5, 0x00, 0x0e},
    {0x06, 0x53, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0x4a, 0xf5, 0xaf},
    {0xc2, 0x53, 0x02, 0xb5, 0xee},
    {0x18, 0x44, 0x4a, 0xf5, 0xaf},
    {0x0e, 0x45, 0x4a, 0xb5, 0xaf},
    {0x1c, 0x44, 0x4a, 0xf5, 0xaf},
    {0x04, 0x53, 0xb5, 0x00, 0xff},
    {0x02, 0x53, 0xb5, 0x00, 0xff},
    {0x07, 0x53, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0x4a, 0xf5, 0xaf},
    {0x03, 0x43, 0x3e, 0xb5, 0x6e},
    {0x1b, 0x44, 0x4a, 0xf5, 0xaf},
    {0x05, 0x43, 0x3e, 0xb5, 0x6e},
    {0x67, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x45, 0x4a, 0xb5, 0xaf},
    {0xc9, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x3e, 0xb5, 0x6e},
    {0x13, 0x44, 0x4a, 0xf5, 0xaf},
    {0x08, 0x47, 0x0a, 0xf5, 0xaf},
    {0x77, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x53, 0x02, 0xb5, 0xee},
    {0x0a, 0x47, 0x0a, 0xf5, 0xaf},
    {0x04, 0x43, 0x3e, 0xb5, 0x6e},
    {0x02, 0x43, 0x3e, 0xb5, 0x6e},
    {0x07, 0x43, 0x3e, 0xb5, 0x6e},
    {0x6d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x8a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x8a, 0xf5, 0x7f},
    {0x05, 0x41, 0x8a, 0xb5, 0x7f},
    {0x75, 0x02, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x8a, 0xf5, 0x7f},
    {0xc7, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x8a, 0xb5, 0x7f},
    {0x63, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x08, 0x45, 0xb5, 0xee},
    {0x73, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x45, 0x4a, 0xb5, 0xaf},
    {0x7f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x8a, 0xb5, 0x7f},
    {0x02, 0x41, 0x8a, 0xb5, 0x7f},
    {0x07, 0x41, 0x8a, 0xb5, 0x7f},
    {0x0d, 0x45, 0x4a, 0xb5, 0xaf},
    {0x03, 0x42, 0x3e, 0xb5, 0x6e},
    {0xd8, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3e, 0xb5, 0x6e},
    {0x6b, 0x02, 0x0a, 0xb5, 0xaf},
    {0x11, 0x45, 0x4a, 0xb5, 0xaf},
    {0xd4, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3e, 0xb5, 0x6e},
    {0x01, 0x45, 0x4a, 0xb5, 0xaf},
    {0x08, 0x43, 0x8a, 0xf5, 0x7f},
    {0xc3, 0x7e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x8a, 0xf5, 0x7f},
    {0x04, 0x42, 0x3e, 0xb5, 0x6e},
    {0x02, 0x42, 0x3e, 0xb5, 0x6e},
    {0x07, 0x42, 0x3e, 0xb5, 0x6e},
    {0x5d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x46, 0x05, 0x02, 0x8e},
    {0x0b, 0x41, 0x05, 0x42, 0x8e},
    {0x05, 0x46, 0x05, 0x02, 0x8e},
    {0x0c, 0x43, 0x45, 0x02, 0x8e},
    {0x09, 0x41, 0x05, 0x42, 0x8e},
    {0xda, 0x04, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x02, 0x8e},
    {0x61, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x78, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x43, 0x45, 0x02, 0x8e},
    {0x7d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x46, 0x05, 0x02, 0x8e},
    {0x02, 0x46, 0x05, 0x02, 0x8e},
    {0x07, 0x46, 0x05, 0x02, 0x8e},
    {0x6f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x05, 0x6e},
    {0x7b, 0x02, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x05, 0x6e},
    {0x69, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x43, 0x45, 0x02, 0x8e},
    {0xd0, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x05, 0x6e},
    {0x5f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x08, 0x41, 0x05, 0x42, 0x8e},
    {0x79, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x78, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x05, 0x6e},
    {0x02, 0x43, 0x04, 0x05, 0x6e},
    {0x07, 0x43, 0x04, 0x05, 0x6e},
    {0x16, 0x44, 0x4a, 0xf5, 0xaf},
    {0x03, 0x44, 0x8a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x8a, 0xf5, 0x7f},
    {0x05, 0x44, 0x8a, 0xb5, 0x7f},
    {0x1a, 0x44, 0x4a, 0xf5, 0xaf},
    {0x09, 0x42, 0x8a, 0xf5, 0x7f},
    {0xcc, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x8a, 0xb5, 0x7f},
    {0x65, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x4a, 0xf5, 0x0f},
    {0x19, 0x44, 0x4a, 0xf5, 0xaf},
    {0x0f, 0x43, 0x45, 0x02, 0x8e},
    {0xc5, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x8a, 0xb5, 0x7f},
    {0x02, 0x44, 0x8a, 0xb5, 0x7f},
    {0x07, 0x44, 0x8a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x05, 0x6e},
    {0x12, 0x44, 0x4a, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x05, 0x6e},
    {0x15, 0x44, 0x4a, 0xf5, 0xaf},
    {0x11, 0x43, 0x45, 0x02, 0x8e},
    {0x84, 0x8a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x05, 0x6e},
    {0x01, 0x43, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x8a, 0xf5, 0x7f},
    {0xc3, 0x04, 0x45, 0xb5, 0xee},
    {0xc1, 0xc1, 0x4a, 0xf5, 0x0f},
    {0x0a, 0x42, 0x8a, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x05, 0x6e},
    {0x02, 0x42, 0x04, 0x05, 0x6e},
    {0x07, 0x42, 0x04, 0x05, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x08, 0xb5, 0x9e},
    {0x0b, 0x45, 0x08, 0xf5, 0x9e},
    {0x05, 0x47, 0x08, 0xb5, 0x9e},
    {0x0c, 0x44, 0x48, 0xb5, 0x9e},
    {0x09, 0x45, 0x08, 0xf5, 0x9e},
    {0xda, 0x02, 0x45, 0xb5, 0xee},
    {0x06, 0x47, 0x08, 0xb5, 0x9e},
    {0x14, 0x42, 0x48, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x45, 0xb5, 0xee},
    {0x18, 0x42, 0x48, 0xf5, 0x9e},
    {0x0e, 0x44, 0x48, 0xb5, 0x9e},
    {0x1c, 0x42, 0x48, 0xf5, 0x9e},
    {0x04, 0x47, 0x08, 0xb5, 0x9e},
    {0x02, 0x47, 0x08, 0xb5, 0x9e},
    {0x07, 0x47, 0x08, 0xb5, 0x9e},
    {0x17, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x05, 0x6e},
    {0x1b, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x05, 0x6e},
    {0x68, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x44, 0x48, 0xb5, 0x9e},
    {0xce, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x05, 0x6e},
    {0x13, 0x42, 0x48, 0xf5, 0x9e},
    {0x08, 0x45, 0x08, 0xf5, 0x9e},
    {0x78, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x45, 0xb5, 0xee},
    {0x0a, 0x45, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x05, 0x6e},
    {0x02, 0x43, 0x02, 0x05, 0x6e},
    {0x07, 0x43, 0x02, 0x05, 0x6e},
    {0x6e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x06, 0x04, 0x7e},
    {0x0b, 0x43, 0x06, 0x44, 0x7e},
    {0x05, 0x41, 0x06, 0x04, 0x7e},
    {0x76, 0x02, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x06, 0x44, 0x7e},
    {0xc8, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x04, 0x7e},
    {0x64, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x04, 0x03, 0x42, 0xbf},
    {0x74, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x44, 0x48, 0xb5, 0x9e},
    {0x40, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x06, 0x04, 0x7e},
    {0x02, 0x41, 0x06, 0x04, 0x7e},
    {0x07, 0x41, 0x06, 0x04, 0x7e},
    {0x0d, 0x44, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x05, 0x6e},
    {0xdb, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x05, 0x6e},
    {0x6c, 0x02, 0x0a, 0xb5, 0xaf},
    {0x11, 0x44, 0x48, 0xb5, 0x9e},
    {0xd6, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x05, 0x6e},
    {0x01, 0x44, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x44, 0x7e},
    {0xc3, 0x02, 0x45, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0x42, 0xbf},
    {0x0a, 0x43, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x05, 0x6e},
    {0x02, 0x42, 0x02, 0x05, 0x6e},
    {0x07, 0x42, 0x02, 0x05, 0x6e},
    {0x5e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x45, 0x05, 0x02, 0x8e},
    {0x0b, 0x44, 0x05, 0x42, 0x8e},
    {0x05, 0x45, 0x05, 0x02, 0x8e},
    {0x0c, 0x42, 0x45, 0x02, 0x8e},
    {0x09, 0x44, 0x05, 0x42, 0x8e},
    {0xda, 0x07, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x02, 0x8e},
    {0x62, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x02, 0x03, 0x42, 0xbf},
    {0x72, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x42, 0x45, 0x02, 0x8e},
    {0x7e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x45, 0x05, 0x02, 0x8e},
    {0x02, 0x45, 0x05, 0x02, 0x8e},
    {0x07, 0x45, 0x05, 0x02, 0x8e},
    {0x70, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x05, 0x6e},
    {0x7c, 0x02, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x05, 0x6e},
    {0x6a, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x42, 0x45, 0x02, 0x8e},
    {0xd2, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x05, 0x6e},
    {0x60, 0x02, 0x0a, 0xb5, 0xaf},
    {0x08, 0x44, 0x05, 0x42, 0x8e},
    {0x7a, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x02, 0x03, 0x42, 0xbf},
    {0x0a, 0x44, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x05, 0x6e},
    {0x02, 0x43, 0x07, 0x05, 0x6e},
    {0x07, 0x43, 0x07, 0x05, 0x6e},
    {0x16, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x04, 0x7e},
    {0x0b, 0x42, 0x06, 0x44, 0x7e},
    {0x05, 0x44, 0x06, 0x04, 0x7e},
    {0x1a, 0x42, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x44, 0x7e},
    {0xca, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x04, 0x7e},
    {0x66, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x07, 0x03, 0x42, 0xbf},
    {0x19, 0x42, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x02, 0x8e},
    {0xc6, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x04, 0x7e},
    {0x02, 0x44, 0x06, 0x04, 0x7e},
    {0x07, 0x44, 0x06, 0x04, 0x7e},
    {0x0d, 0x42, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x05, 0x6e},
    {0x12, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x05, 0x6e},
    {0x15, 0x42, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x02, 0x8e},
    {0xc4, 0x06, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x05, 0x6e},
    {0x01, 0x42, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x06, 0x44, 0x7e},
    {0xc3, 0x07, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x05, 0x6e},
    {0x02, 0x42, 0x07, 0x05, 0x6e},
    {0x07, 0x42, 0x07, 0x05, 0x6e},
    {0xf4, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x58, 0xb5, 0x00, 0xff},
    {0x0b, 0x50, 0xb5, 0x40, 0xff},
    {0x05, 0x58, 0xb5, 0x00, 0xff},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0x50, 0xb5, 0x40, 0xff},
    {0xda, 0x70, 0xf5, 0x00, 0x0e},
    {0x06, 0x58, 0xb5, 0x00, 0xff},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0x02, 0xf5, 0xff},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0x58, 0xb5, 0x00, 0xff},
    {0x02, 0x58, 0xb5, 0x00, 0xff},
    {0x07, 0x58, 0xb5, 0x00, 0xff},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x30, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x30, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0xc9, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x30, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0x50, 0xb5, 0x40, 0xff},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0x02, 0xf5, 0xff},
    {0x0a, 0x50, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x30, 0xb5, 0x6e},
    {0x02, 0x43, 0x30, 0xb5, 0x6e},
    {0x07, 0x43, 0x30, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x26, 0xb5, 0x7f},
    {0x0b, 0x43, 0x26, 0xf5, 0x7f},
    {0x05, 0x41, 0x26, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x26, 0xf5, 0x7f},
    {0xc7, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x26, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x26, 0xb5, 0x7f},
    {0x02, 0x41, 0x26, 0xb5, 0x7f},
    {0x07, 0x41, 0x26, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x30, 0xb5, 0x6e},
    {0x97, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x30, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x30, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x26, 0xf5, 0x7f},
    {0xc3, 0x70, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x26, 0xf5, 0x7f},
    {0x04, 0x42, 0x30, 0xb5, 0x6e},
    {0x02, 0x42, 0x30, 0xb5, 0x6e},
    {0x07, 0x42, 0x30, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x15, 0xb5, 0x8f},
    {0x0b, 0x41, 0x15, 0xf5, 0x8f},
    {0x05, 0x46, 0x15, 0xb5, 0x8f},
    {0x0c, 0x43, 0x55, 0xb5, 0x8f},
    {0x09, 0x41, 0x15, 0xf5, 0x8f},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x15, 0xb5, 0x8f},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x55, 0xb5, 0x8f},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x15, 0xb5, 0x8f},
    {0x02, 0x46, 0x15, 0xb5, 0x8f},
    {0x07, 0x46, 0x15, 0xb5, 0x8f},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x55, 0xb5, 0x8f},
    {0x8f, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x15, 0xf5, 0x8f},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x15, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x26, 0xb5, 0x7f},
    {0x0b, 0x42, 0x26, 0xf5, 0x7f},
    {0x05, 0x44, 0x26, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x26, 0xf5, 0x7f},
    {0x8b, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x26, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x55, 0xb5, 0x8f},
    {0xc5, 0x55, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x26, 0xb5, 0x7f},
    {0x02, 0x44, 0x26, 0xb5, 0x7f},
    {0x07, 0x44, 0x26, 0xb5, 0x7f},
    {0x0d, 0x43, 0x55, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x55, 0xb5, 0x8f},
    {0xc4, 0x66, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x55, 0xb5, 0x8f},
    {0x08, 0x42, 0x26, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x26, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x83, 0xf5, 0x9f},
    {0x05, 0x49, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc3, 0xb5, 0x9f},
    {0x09, 0x46, 0x83, 0xf5, 0x9f},
    {0xda, 0x7c, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc3, 0xf5, 0x9f},
    {0xc2, 0x76, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xc3, 0xf5, 0x9f},
    {0x0e, 0x41, 0xc3, 0xb5, 0x9f},
    {0x1c, 0x43, 0xc3, 0xf5, 0x9f},
    {0x04, 0x49, 0x04, 0xb5, 0xae},
    {0x02, 0x49, 0x04, 0xb5, 0xae},
    {0x07, 0x49, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc3, 0xf5, 0x9f},
    {0x03, 0x43, 0x3c, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc3, 0xf5, 0x9f},
    {0x05, 0x43, 0x3c, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xc3, 0xb5, 0x9f},
    {0x8d, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x3c, 0xb5, 0x6e},
    {0x13, 0x43, 0xc3, 0xf5, 0x9f},
    {0x08, 0x46, 0x83, 0xf5, 0x9f},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x83, 0xf5, 0x9f},
    {0x04, 0x43, 0x3c, 0xb5, 0x6e},
    {0x02, 0x43, 0x3c, 0xb5, 0x6e},
    {0x07, 0x43, 0x3c, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xc3, 0xb5, 0x9f},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xc3, 0xb5, 0x9f},
    {0x03, 0x42, 0x3c, 0xb5, 0x6e},
    {0x99, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x3c, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xc3, 0xb5, 0x9f},
    {0x95, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x3c, 0xb5, 0x6e},
    {0x01, 0x41, 0xc3, 0xb5, 0x9f},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7c, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3c, 0xb5, 0x6e},
    {0x02, 0x42, 0x3c, 0xb5, 0x6e},
    {0x07, 0x42, 0x3c, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x15, 0xb5, 0x8f},
    {0x0b, 0x44, 0x15, 0xf5, 0x8f},
    {0x05, 0x45, 0x15, 0xb5, 0x8f},
    {0x0c, 0x42, 0x55, 0xb5, 0x8f},
    {0x09, 0x44, 0x15, 0xf5, 0x8f},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x15, 0xb5, 0x8f},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x55, 0xb5, 0x8f},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x15, 0xb5, 0x8f},
    {0x02, 0x45, 0x15, 0xb5, 0x8f},
    {0x07, 0x45, 0x15, 0xb5, 0x8f},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x55, 0xb5, 0x8f},
    {0x91, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x15, 0xf5, 0x8f},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x15, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xc3, 0xf5, 0x9f},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xc3, 0xf5, 0x9f},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xc3, 0xf5, 0x9f},
    {0x0f, 0x42, 0x55, 0xb5, 0x8f},
    {0xc6, 0x55, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x55, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xc3, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xc3, 0xf5, 0x9f},
    {0x11, 0x42, 0x55, 0xb5, 0x8f},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x55, 0xb5, 0x8f},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0x83, 0xb5, 0x00, 0x0f},
    {0x03, 0x4b, 0x02, 0xb5, 0xbf},
    {0x0b, 0x48, 0x02, 0xf5, 0xbf},
    {0x05, 0x4b, 0x02, 0xb5, 0xbf},
    {0x0c, 0x46, 0x44, 0xb5, 0xae},
    {0x09, 0x48, 0x02, 0xf5, 0xbf},
    {0xda, 0x6a, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x02, 0xb5, 0xbf},
    {0x14, 0x41, 0x44, 0xf5, 0xae},
    {0xc2, 0x64, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x44, 0xf5, 0xae},
    {0x0e, 0x46, 0x44, 0xb5, 0xae},
    {0x1c, 0x41, 0x44, 0xf5, 0xae},
    {0x04, 0x4b, 0x02, 0xb5, 0xbf},
    {0x02, 0x4b, 0x02, 0xb5, 0xbf},
    {0x07, 0x4b, 0x02, 0xb5, 0xbf},
    {0x17, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x2a, 0xb5, 0x6e},
    {0x1b, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x2a, 0xb5, 0x6e},
    {0x67, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x46, 0x44, 0xb5, 0xae},
    {0xc9, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x2a, 0xb5, 0x6e},
    {0x13, 0x41, 0x44, 0xf5, 0xae},
    {0x08, 0x48, 0x02, 0xf5, 0xbf},
    {0x77, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x64, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x02, 0xf5, 0xbf},
    {0x04, 0x43, 0x2a, 0xb5, 0x6e},
    {0x02, 0x43, 0x2a, 0xb5, 0x6e},
    {0x07, 0x43, 0x2a, 0xb5, 0x6e},
    {0x6d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x19, 0xb5, 0x7e},
    {0x0b, 0x43, 0x19, 0xf5, 0x7e},
    {0x05, 0x41, 0x19, 0xb5, 0x7e},
    {0x75, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x19, 0xf5, 0x7e},
    {0xc7, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x19, 0xb5, 0x7e},
    {0x63, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0xc2, 0x44, 0xb5, 0x0e},
    {0x73, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x46, 0x44, 0xb5, 0xae},
    {0x7f, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x19, 0xb5, 0x7e},
    {0x02, 0x41, 0x19, 0xb5, 0x7e},
    {0x07, 0x41, 0x19, 0xb5, 0x7e},
    {0x0d, 0x46, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x2a, 0xb5, 0x6e},
    {0x98, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x2a, 0xb5, 0x6e},
    {0x6b, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x46, 0x44, 0xb5, 0xae},
    {0x94, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x2a, 0xb5, 0x6e},
    {0x01, 0x46, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x19, 0xf5, 0x7e},
    {0xc3, 0x6a, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x44, 0xb5, 0x0e},
    {0x0a, 0x43, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x2a, 0xb5, 0x6e},
    {0x02, 0x42, 0x2a, 0xb5, 0x6e},
    {0x07, 0x42, 0x2a, 0xb5, 0x6e},
    {0x5d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x11, 0xb5, 0x8e},
    {0x0b, 0x41, 0x11, 0xf5, 0x8e},
    {0x05, 0x46, 0x11, 0xb5, 0x8e},
    {0x0c, 0x43, 0x51, 0xb5, 0x8e},
    {0x09, 0x41, 0x11, 0xf5, 0x8e},
    {0xda, 0x50, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x11, 0xb5, 0x8e},
    {0x61, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x74, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x51, 0xb5, 0x8e},
    {0x7d, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x11, 0xb5, 0x8e},
    {0x02, 0x46, 0x11, 0xb5, 0x8e},
    {0x07, 0x46, 0x11, 0xb5, 0x8e},
    {0x6f, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0x02, 0x6e},
    {0x7b, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0x02, 0x6e},
    {0x69, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x51, 0xb5, 0x8e},
    {0x90, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x10, 0x02, 0x6e},
    {0x5f, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x11, 0xf5, 0x8e},
    {0x79, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x74, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x02, 0x6e},
    {0x02, 0x43, 0x10, 0x02, 0x6e},
    {0x07, 0x43, 0x10, 0x02, 0x6e},
    {0x16, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x19, 0xb5, 0x7e},
    {0x0b, 0x42, 0x19, 0xf5, 0x7e},
    {0x05, 0x44, 0x19, 0xb5, 0x7e},
    {0x1a, 0x41, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x19, 0xf5, 0x7e},
    {0x8c, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x19, 0xb5, 0x7e},
    {0x65, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x0f, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x51, 0xb5, 0x8e},
    {0xc5, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x19, 0xb5, 0x7e},
    {0x02, 0x44, 0x19, 0xb5, 0x7e},
    {0x07, 0x44, 0x19, 0xb5, 0x7e},
    {0x0d, 0x43, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x02, 0x6e},
    {0x12, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0x02, 0x6e},
    {0x15, 0x41, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x51, 0xb5, 0x8e},
    {0xc4, 0x59, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0x02, 0x6e},
    {0x01, 0x43, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x19, 0xf5, 0x7e},
    {0xc3, 0x50, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0x02, 0x6e},
    {0x02, 0x42, 0x10, 0x02, 0x6e},
    {0x07, 0x42, 0x10, 0x02, 0x6e},
    {0xde, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x83, 0xb5, 0x9f},
    {0x0b, 0x45, 0x83, 0xf5, 0x9f},
    {0x05, 0x47, 0x83, 0xb5, 0x9f},
    {0x0c, 0x44, 0xc3, 0xb5, 0x9f},
    {0x09, 0x45, 0x83, 0xf5, 0x9f},
    {0x9a, 0x92, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0x83, 0xb5, 0x9f},
    {0x14, 0x42, 0xc3, 0xf5, 0x9f},
    {0xc2, 0x40, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xc3, 0xf5, 0x9f},
    {0x0e, 0x44, 0xc3, 0xb5, 0x9f},
    {0x1c, 0x42, 0xc3, 0xf5, 0x9f},
    {0x04, 0x47, 0x83, 0xb5, 0x9f},
    {0x02, 0x47, 0x83, 0xb5, 0x9f},
    {0x07, 0x47, 0x83, 0xb5, 0x9f},
    {0x17, 0x42, 0xc3, 0xf5, 0x9f},
    {0x03, 0x43, 0x92, 0xb5, 0x6f},
    {0x1b, 0x42, 0xc3, 0xf5, 0x9f},
    {0x05, 0x43, 0x92, 0xb5, 0x6f},
    {0x68, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc3, 0xb5, 0x9f},
    {0x8e, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x92, 0xb5, 0x6f},
    {0x13, 0x42, 0xc3, 0xf5, 0x9f},
    {0x08, 0x45, 0x83, 0xf5, 0x9f},
    {0x78, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x40, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0x83, 0xf5, 0x9f},
    {0x04, 0x43, 0x92, 0xb5, 0x6f},
    {0x02, 0x43, 0x92, 0xb5, 0x6f},
    {0x07, 0x43, 0x92, 0xb5, 0x6f},
    {0x6e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x0f, 0x02, 0x7f},
    {0x0b, 0x43, 0x0f, 0x42, 0x7f},
    {0x05, 0x41, 0x0f, 0x02, 0x7f},
    {0x76, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x0f, 0x42, 0x7f},
    {0xc8, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0x02, 0x7f},
    {0x64, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc3, 0xb5, 0x9f},
    {0x40, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x0f, 0x02, 0x7f},
    {0x02, 0x41, 0x0f, 0x02, 0x7f},
    {0x07, 0x41, 0x0f, 0x02, 0x7f},
    {0x0d, 0x44, 0xc3, 0xb5, 0x9f},
    {0x03, 0x42, 0x92, 0xb5, 0x6f},
    {0x9b, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x92, 0xb5, 0x6f},
    {0x6c, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc3, 0xb5, 0x9f},
    {0x96, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x92, 0xb5, 0x6f},
    {0x01, 0x44, 0xc3, 0xb5, 0x9f},
    {0x08, 0x43, 0x0f, 0x42, 0x7f},
    {0x83, 0x92, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0x42, 0x7f},
    {0x04, 0x42, 0x92, 0xb5, 0x6f},
    {0x02, 0x42, 0x92, 0xb5, 0x6f},
    {0x07, 0x42, 0x92, 0xb5, 0x6f},
    {0x5e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x11, 0xb5, 0x8e},
    {0x0b, 0x44, 0x11, 0xf5, 0x8e},
    {0x05, 0x45, 0x11, 0xb5, 0x8e},
    {0x0c, 0x42, 0x51, 0xb5, 0x8e},
    {0x09, 0x44, 0x11, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x11, 0xb5, 0x8e},
    {0x62, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x51, 0xb5, 0x8e},
    {0x7e, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x11, 0xb5, 0x8e},
    {0x02, 0x45, 0x11, 0xb5, 0x8e},
    {0x07, 0x45, 0x11, 0xb5, 0x8e},
    {0x70, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x51, 0xb5, 0x8e},
    {0x92, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x11, 0xf5, 0x8e},
    {0x7a, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xc3, 0xf5, 0x9f},
    {0x03, 0x44, 0x0f, 0x02, 0x7f},
    {0x0b, 0x42, 0x0f, 0x42, 0x7f},
    {0x05, 0x44, 0x0f, 0x02, 0x7f},
    {0x1a, 0x42, 0xc3, 0xf5, 0x9f},
    {0x09, 0x42, 0x0f, 0x42, 0x7f},
    {0xca, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0x02, 0x7f},
    {0x66, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xc3, 0xf5, 0x9f},
    {0x0f, 0x42, 0x51, 0xb5, 0x8e},
    {0xc6, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0x02, 0x7f},
    {0x02, 0x44, 0x0f, 0x02, 0x7f},
    {0x07, 0x44, 0x0f, 0x02, 0x7f},
    {0x0d, 0x42, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xc3, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xc3, 0xf5, 0x9f},
    {0x11, 0x42, 0x51, 0xb5, 0x8e},
    {0xc4, 0x4f, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0x42, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0x42, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x56, 0xb5, 0x00, 0xff},
    {0x0b, 0x40, 0xb5, 0x40, 0xff},
    {0x05, 0x56, 0xb5, 0x00, 0xff},
    {0x0c, 0x47, 0x42, 0xb5, 0xbf},
    {0x09, 0x40, 0xb5, 0x40, 0xff},
    {0xda, 0x60, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0xb5, 0x00, 0xff},
    {0x14, 0x45, 0x42, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x44, 0xf5, 0xee},
    {0x18, 0x45, 0x42, 0xf5, 0xbf},
    {0x0e, 0x47, 0x42, 0xb5, 0xbf},
    {0x1c, 0x45, 0x42, 0xf5, 0xbf},
    {0x04, 0x56, 0xb5, 0x00, 0xff},
    {0x02, 0x56, 0xb5, 0x00, 0xff},
    {0x07, 0x56, 0xb5, 0x00, 0xff},
    {0x17, 0x45, 0x42, 0xf5, 0xbf},
    {0x03, 0x43, 0x20, 0xb5, 0x6e},
    {0x1b, 0x45, 0x42, 0xf5, 0xbf},
    {0x05, 0x43, 0x20, 0xb5, 0x6e},
    {0x67, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x47, 0x42, 0xb5, 0xbf},
    {0x89, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x20, 0xb5, 0x6e},
    {0x13, 0x45, 0x42, 0xf5, 0xbf},
    {0x08, 0x40, 0xb5, 0x40, 0xff},
    {0x77, 0x04, 0x02, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x44, 0xf5, 0xee},
    {0x0a, 0x40, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x20, 0xb5, 0x6e},
    {0x02, 0x43, 0x20, 0xb5, 0x6e},
    {0x07, 0x43, 0x20, 0xb5, 0x6e},
    {0x6d, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x86, 0xb5, 0x7f},
    {0x0b, 0x43, 0x86, 0xf5, 0x7f},
    {0x05, 0x41, 0x86, 0xb5, 0x7f},
    {0x75, 0x04, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x86, 0xf5, 0x7f},
    {0x87, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x41, 0x86, 0xb5, 0x7f},
    {0x63, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x42, 0xbf},
    {0x73, 0x04, 0x02, 0xb5, 0xbf},
    {0x0f, 0x47, 0x42, 0xb5, 0xbf},
    {0x7f, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x86, 0xb5, 0x7f},
    {0x02, 0x41, 0x86, 0xb5, 0x7f},
    {0x07, 0x41, 0x86, 0xb5, 0x7f},
    {0x0d, 0x47, 0x42, 0xb5, 0xbf},
    {0x03, 0x42, 0x20, 0xb5, 0x6e},
    {0x97, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x20, 0xb5, 0x6e},
    {0x6b, 0x04, 0x02, 0xb5, 0xbf},
    {0x11, 0x47, 0x42, 0xb5, 0xbf},
    {0x93, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x20, 0xb5, 0x6e},
    {0x01, 0x47, 0x42, 0xb5, 0xbf},
    {0x08, 0x43, 0x86, 0xf5, 0x7f},
    {0xc3, 0x60, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0x42, 0xbf},
    {0x0a, 0x43, 0x86, 0xf5, 0x7f},
    {0x04, 0x42, 0x20, 0xb5, 0x6e},
    {0x02, 0x42, 0x20, 0xb5, 0x6e},
    {0x07, 0x42, 0x20, 0xb5, 0x6e},
    {0x5d, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x46, 0x84, 0xb5, 0x8f},
    {0x0b, 0x41, 0x84, 0xf5, 0x8f},
    {0x05, 0x46, 0x84, 0xb5, 0x8f},
    {0x0c, 0x43, 0xc4, 0xb5, 0x8f},
    {0x09, 0x41, 0x84, 0xf5, 0x8f},
    {0xda, 0x08, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x84, 0xb5, 0x8f},
    {0x61, 0x04, 0x02, 0xb5, 0xbf},
    {0x82, 0x9b, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0x02, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc4, 0xb5, 0x8f},
    {0x7d, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x46, 0x84, 0xb5, 0x8f},
    {0x02, 0x46, 0x84, 0xb5, 0x8f},
    {0x07, 0x46, 0x84, 0xb5, 0x8f},
    {0x6f, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x04, 0x6e},
    {0x7b, 0x04, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x04, 0x6e},
    {0x69, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x43, 0xc4, 0xb5, 0x8f},
    {0x8f, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x08, 0x04, 0x6e},
    {0x5f, 0x04, 0x02, 0xb5, 0xbf},
    {0x08, 0x41, 0x84, 0xf5, 0x8f},
    {0x79, 0x04, 0x02, 0xb5, 0xbf},
    {0x81, 0x9b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x84, 0xf5, 0x8f},
    {0x04, 0x43, 0x08, 0x04, 0x6e},
    {0x02, 0x43, 0x08, 0x04, 0x6e},
    {0x07, 0x43, 0x08, 0x04, 0x6e},
    {0x16, 0x45, 0x42, 0xf5, 0xbf},
    {0x03, 0x44, 0x86, 0xb5, 0x7f},
    {0x0b, 0x42, 0x86, 0xf5, 0x7f},
    {0x05, 0x44, 0x86, 0xb5, 0x7f},
    {0x1a, 0x45, 0x42, 0xf5, 0xbf},
    {0x09, 0x42, 0x86, 0xf5, 0x7f},
    {0x8b, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x86, 0xb5, 0x7f},
    {0x65, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x42, 0xbf},
    {0x19, 0x45, 0x42, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc4, 0xb5, 0x8f},
    {0x85, 0x84, 0xb5, 0x00, 0x0f},
    {0x04, 0x44, 0x86, 0xb5, 0x7f},
    {0x02, 0x44, 0x86, 0xb5, 0x7f},
    {0x07, 0x44, 0x86, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc4, 0xb5, 0x8f},
    {0x03, 0x42, 0x08, 0x04, 0x6e},
    {0x12, 0x45, 0x42, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x04, 0x6e},
    {0x15, 0x45, 0x42, 0xf5, 0xbf},
    {0x11, 0x43, 0xc4, 0xb5, 0x8f},
    {0x84, 0x86, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x08, 0x04, 0x6e},
    {0x01, 0x43, 0xc4, 0xb5, 0x8f},
    {0x08, 0x42, 0x86, 0xf5, 0x7f},
    {0xc3, 0x08, 0x44, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x86, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x04, 0x6e},
    {0x02, 0x42, 0x08, 0x04, 0x6e},
    {0x07, 0x42, 0x08, 0x04, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x81, 0xf5, 0x9e},
    {0x05, 0x48, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc1, 0xb5, 0x9e},
    {0x09, 0x46, 0x81, 0xf5, 0x9e},
    {0xda, 0x7a, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x6c, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc1, 0xf5, 0x9e},
    {0x04, 0x48, 0x04, 0xb5, 0xae},
    {0x02, 0x48, 0x04, 0xb5, 0xae},
    {0x07, 0x48, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x3a, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x3a, 0xb5, 0x6e},
    {0x68, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x41, 0xc1, 0xb5, 0x9e},
    {0x8d, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x3a, 0xb5, 0x6e},
    {0x13, 0x43, 0xc1, 0xf5, 0x9e},
    {0x08, 0x46, 0x81, 0xf5, 0x9e},
    {0x78, 0x04, 0x02, 0xb5, 0xbf},
    {0xc1, 0x6c, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x3a, 0xb5, 0x6e},
    {0x02, 0x43, 0x3a, 0xb5, 0x6e},
    {0x07, 0x43, 0x3a, 0xb5, 0x6e},
    {0x6e, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x04, 0x7e},
    {0x0b, 0x43, 0x04, 0x44, 0x7e},
    {0x05, 0x41, 0x04, 0x04, 0x7e},
    {0x76, 0x04, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x44, 0x7e},
    {0x88, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x41, 0x04, 0x04, 0x7e},
    {0x64, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x11, 0x44, 0xf5, 0xee},
    {0x74, 0x04, 0x02, 0xb5, 0xbf},
    {0x0f, 0x41, 0xc1, 0xb5, 0x9e},
    {0x40, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x04, 0x7e},
    {0x02, 0x41, 0x04, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0x04, 0x7e},
    {0x0d, 0x41, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x3a, 0xb5, 0x6e},
    {0x99, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3a, 0xb5, 0x6e},
    {0x6c, 0x04, 0x02, 0xb5, 0xbf},
    {0x11, 0x41, 0xc1, 0xb5, 0x9e},
    {0x95, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3a, 0xb5, 0x6e},
    {0x01, 0x41, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x04, 0x44, 0x7e},
    {0xc3, 0x7a, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x3a, 0xb5, 0x6e},
    {0x02, 0x42, 0x3a, 0xb5, 0x6e},
    {0x07, 0x42, 0x3a, 0xb5, 0x6e},
    {0x5e, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x45, 0x84, 0xb5, 0x8f},
    {0x0b, 0x44, 0x84, 0xf5, 0x8f},
    {0x05, 0x45, 0x84, 0xb5, 0x8f},
    {0x0c, 0x42, 0xc4, 0xb5, 0x8f},
    {0x09, 0x44, 0x84, 0xf5, 0x8f},
    {0xda, 0xc1, 0x42, 0xf5, 0x0f},
    {0x06, 0x45, 0x84, 0xb5, 0x8f},
    {0x62, 0x04, 0x02, 0xb5, 0xbf},
    {0x82, 0x96, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0x02, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc4, 0xb5, 0x8f},
    {0x7e, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x45, 0x84, 0xb5, 0x8f},
    {0x02, 0x45, 0x84, 0xb5, 0x8f},
    {0x07, 0x45, 0x84, 0xb5, 0x8f},
    {0x70, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x02, 0x6f},
    {0x7c, 0x04, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x02, 0x6f},
    {0x6a, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x42, 0xc4, 0xb5, 0x8f},
    {0x91, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x81, 0x02, 0x6f},
    {0x60, 0x04, 0x02, 0xb5, 0xbf},
    {0x08, 0x44, 0x84, 0xf5, 0x8f},
    {0x7a, 0x04, 0x02, 0xb5, 0xbf},
    {0x81, 0x96, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x84, 0xf5, 0x8f},
    {0x04, 0x43, 0x81, 0x02, 0x6f},
    {0x02, 0x43, 0x81, 0x02, 0x6f},
    {0x07, 0x43, 0x81, 0x02, 0x6f},
    {0x16, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x04, 0x04, 0x7e},
    {0x0b, 0x42, 0x04, 0x44, 0x7e},
    {0x05, 0x44, 0x04, 0x04, 0x7e},
    {0x1a, 0x43, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x04, 0x44, 0x7e},
    {0x8a, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x04, 0x04, 0x7e},
    {0x66, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x42, 0xbf},
    {0x19, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0xc4, 0xb5, 0x8f},
    {0x86, 0x84, 0xb5, 0x00, 0x0f},
    {0x04, 0x44, 0x04, 0x04, 0x7e},
    {0x02, 0x44, 0x04, 0x04, 0x7e},
    {0x07, 0x44, 0x04, 0x04, 0x7e},
    {0x0d, 0x42, 0xc4, 0xb5, 0x8f},
    {0x03, 0x42, 0x81, 0x02, 0x6f},
    {0x12, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x81, 0x02, 0x6f},
    {0x15, 0x43, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0xc4, 0xb5, 0x8f},
    {0xc4, 0x04, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0x02, 0x6f},
    {0x01, 0x42, 0xc4, 0xb5, 0x8f},
    {0x08, 0x42, 0x04, 0x44, 0x7e},
    {0xc3, 0xc1, 0x42, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x81, 0x02, 0x6f},
    {0x02, 0x42, 0x81, 0x02, 0x6f},
    {0x07, 0x42, 0x81, 0x02, 0x6f},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x4c, 0x02, 0xb5, 0xbf},
    {0x0b, 0x47, 0x04, 0xf5, 0xae},
    {0x05, 0x4c, 0x02, 0xb5, 0xbf},
    {0x0c, 0x45, 0x44, 0xb5, 0xae},
    {0x09, 0x47, 0x04, 0xf5, 0xae},
    {0xda, 0x0a, 0x44, 0xf5, 0xee},
    {0x06, 0x4c, 0x02, 0xb5, 0xbf},
    {0x14, 0x44, 0x44, 0xf5, 0xae},
    {0xc2, 0x01, 0x44, 0xf5, 0xee},
    {0x18, 0x44, 0x44, 0xf5, 0xae},
    {0x0e, 0x45, 0x44, 0xb5, 0xae},
    {0x1c, 0x44, 0x44, 0xf5, 0xae},
    {0x04, 0x4c, 0x02, 0xb5, 0xbf},
    {0x02, 0x4c, 0x02, 0xb5, 0xbf},
    {0x07, 0x4c, 0x02, 0xb5, 0xbf},
    {0x17, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x04, 0x6e},
    {0x1b, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x04, 0x6e},
    {0x67, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x45, 0x44, 0xb5, 0xae},
    {0xc9, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x04, 0x6e},
    {0x13, 0x44, 0x44, 0xf5, 0xae},
    {0x08, 0x47, 0x04, 0xf5, 0xae},
    {0x77, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x01, 0x44, 0xf5, 0xee},
    {0x0a, 0x47, 0x04, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x04, 0x6e},
    {0x02, 0x43, 0x0a, 0x04, 0x6e},
    {0x07, 0x43, 0x0a, 0x04, 0x6e},
    {0x6d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x04, 0x7e},
    {0x0b, 0x43, 0x02, 0x44, 0x7e},
    {0x05, 0x41, 0x02, 0x04, 0x7e},
    {0x75, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x44, 0x7e},
    {0xc7, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x04, 0x7e},
    {0x63, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x45, 0x44, 0xb5, 0xae},
    {0x7f, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x04, 0x7e},
    {0x02, 0x41, 0x02, 0x04, 0x7e},
    {0x07, 0x41, 0x02, 0x04, 0x7e},
    {0x0d, 0x45, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x04, 0x6e},
    {0x98, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x0a, 0x04, 0x6e},
    {0x6b, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x45, 0x44, 0xb5, 0xae},
    {0x94, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x0a, 0x04, 0x6e},
    {0x01, 0x45, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x44, 0x7e},
    {0xc3, 0x0a, 0x44, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x0a, 0x04, 0x6e},
    {0x02, 0x42, 0x0a, 0x04, 0x6e},
    {0x07, 0x42, 0x0a, 0x04, 0x6e},
    {0x5d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0x02, 0x8e},
    {0x0b, 0x41, 0x06, 0x42, 0x8e},
    {0x05, 0x46, 0x06, 0x02, 0x8e},
    {0x0c, 0x43, 0x46, 0x02, 0x8e},
    {0x09, 0x41, 0x06, 0x42, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x02, 0x8e},
    {0x61, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc3, 0x42, 0xf5, 0x0f},
    {0x71, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0x02, 0x8e},
    {0x7d, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0x02, 0x8e},
    {0x02, 0x46, 0x06, 0x02, 0x8e},
    {0x07, 0x46, 0x06, 0x02, 0x8e},
    {0x6f, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0x02, 0x8e},
    {0x90, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0x42, 0x8e},
    {0x79, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0xc3, 0x42, 0xf5, 0x0f},
    {0x0a, 0x41, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x04, 0x7e},
    {0x0b, 0x42, 0x02, 0x44, 0x7e},
    {0x05, 0x44, 0x02, 0x04, 0x7e},
    {0x1a, 0x44, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x44, 0x7e},
    {0x8c, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x02, 0x04, 0x7e},
    {0x65, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc1, 0x44, 0xb5, 0x0e},
    {0x19, 0x44, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0x02, 0x8e},
    {0xc5, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x04, 0x7e},
    {0x02, 0x44, 0x02, 0x04, 0x7e},
    {0x07, 0x44, 0x02, 0x04, 0x7e},
    {0x0d, 0x43, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0x02, 0x8e},
    {0xc4, 0x02, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x44, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x44, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x81, 0xb5, 0x9e},
    {0x0b, 0x45, 0x81, 0xf5, 0x9e},
    {0x05, 0x47, 0x81, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc1, 0xb5, 0x9e},
    {0x09, 0x45, 0x81, 0xf5, 0x9e},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x81, 0xb5, 0x9e},
    {0x14, 0x42, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc1, 0xf5, 0x9e},
    {0x04, 0x47, 0x81, 0xb5, 0x9e},
    {0x02, 0x47, 0x81, 0xb5, 0x9e},
    {0x07, 0x47, 0x81, 0xb5, 0x9e},
    {0x17, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc1, 0xb5, 0x9e},
    {0x8e, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0xc1, 0xf5, 0x9e},
    {0x08, 0x45, 0x81, 0xf5, 0x9e},
    {0x78, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x04, 0x7e},
    {0x0b, 0x43, 0x07, 0x44, 0x7e},
    {0x05, 0x41, 0x07, 0x04, 0x7e},
    {0x76, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x44, 0x7e},
    {0xc8, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x04, 0x7e},
    {0x64, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x42, 0xbf},
    {0x74, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc1, 0xb5, 0x9e},
    {0x40, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x04, 0x7e},
    {0x02, 0x41, 0x07, 0x04, 0x7e},
    {0x07, 0x41, 0x07, 0x04, 0x7e},
    {0x0d, 0x44, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0x9b, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc1, 0xb5, 0x9e},
    {0x96, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x07, 0x44, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x42, 0xbf},
    {0x0a, 0x43, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0x02, 0x8e},
    {0x0b, 0x44, 0x06, 0x42, 0x8e},
    {0x05, 0x45, 0x06, 0x02, 0x8e},
    {0x0c, 0x42, 0x46, 0x02, 0x8e},
    {0x09, 0x44, 0x06, 0x42, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x02, 0x8e},
    {0x62, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x42, 0xbf},
    {0x72, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0x02, 0x8e},
    {0x7e, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0x02, 0x8e},
    {0x02, 0x45, 0x06, 0x02, 0x8e},
    {0x07, 0x45, 0x06, 0x02, 0x8e},
    {0x70, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0x02, 0x8e},
    {0x92, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0x42, 0x8e},
    {0x7a, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x42, 0xbf},
    {0x0a, 0x44, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x07, 0x04, 0x7e},
    {0x0b, 0x42, 0x07, 0x44, 0x7e},
    {0x05, 0x44, 0x07, 0x04, 0x7e},
    {0x1a, 0x42, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x07, 0x44, 0x7e},
    {0xca, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x04, 0x7e},
    {0x66, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x42, 0xbf},
    {0x19, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0x46, 0x02, 0x8e},
    {0xc6, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x04, 0x7e},
    {0x02, 0x44, 0x07, 0x04, 0x7e},
    {0x07, 0x44, 0x07, 0x04, 0x7e},
    {0x0d, 0x42, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0x46, 0x02, 0x8e},
    {0xc4, 0x07, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x44, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xc1, 0xb5, 0x40, 0x0f},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4e, 0xf5, 0x00, 0xee},
    {0x09, 0xc1, 0xb5, 0x40, 0x0f},
    {0xda, 0x56, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4c, 0xf5, 0x40, 0xee},
    {0xc2, 0x5e, 0x02, 0xf5, 0xff},
    {0x18, 0x4c, 0xf5, 0x40, 0xee},
    {0x0e, 0x4e, 0xf5, 0x00, 0xee},
    {0x1c, 0x4c, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x16, 0x02, 0x6f},
    {0x1b, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x16, 0x02, 0x6f},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x4e, 0xf5, 0x00, 0xee},
    {0xc9, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x16, 0x02, 0x6f},
    {0x13, 0x4c, 0xf5, 0x40, 0xee},
    {0x08, 0xc1, 0xb5, 0x40, 0x0f},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0x02, 0xf5, 0xff},
    {0x0a, 0xc1, 0xb5, 0x40, 0x0f},
    {0x04, 0x43, 0x16, 0x02, 0x6f},
    {0x02, 0x43, 0x16, 0x02, 0x6f},
    {0x07, 0x43, 0x16, 0x02, 0x6f},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0x02, 0x7f},
    {0x0b, 0x43, 0x0d, 0x42, 0x7f},
    {0x05, 0x41, 0x0d, 0x02, 0x7f},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0x42, 0x7f},
    {0xc7, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0d, 0x02, 0x7f},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x4e, 0xf5, 0x00, 0xee},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0x02, 0x7f},
    {0x02, 0x41, 0x0d, 0x02, 0x7f},
    {0x07, 0x41, 0x0d, 0x02, 0x7f},
    {0x0d, 0x4e, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x16, 0x02, 0x6f},
    {0xd7, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x16, 0x02, 0x6f},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x4e, 0xf5, 0x00, 0xee},
    {0xd3, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x16, 0x02, 0x6f},
    {0x01, 0x4e, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x0d, 0x42, 0x7f},
    {0xc3, 0x56, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0x42, 0x7f},
    {0x04, 0x42, 0x16, 0x02, 0x6f},
    {0x02, 0x42, 0x16, 0x02, 0x6f},
    {0x07, 0x42, 0x16, 0x02, 0x6f},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x01, 0xb5, 0x8e},
    {0x0b, 0x41, 0x01, 0xf5, 0x8e},
    {0x05, 0x46, 0x01, 0xb5, 0x8e},
    {0x0c, 0x43, 0x41, 0xb5, 0x8e},
    {0x09, 0x41, 0x01, 0xf5, 0x8e},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x01, 0xb5, 0x8e},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x41, 0xb5, 0x8e},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x01, 0xb5, 0x8e},
    {0x02, 0x46, 0x01, 0xb5, 0x8e},
    {0x07, 0x46, 0x01, 0xb5, 0x8e},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x41, 0xb5, 0x8e},
    {0xcf, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x01, 0xf5, 0x8e},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x0d, 0x02, 0x7f},
    {0x0b, 0x42, 0x0d, 0x42, 0x7f},
    {0x05, 0x44, 0x0d, 0x02, 0x7f},
    {0x1a, 0x4c, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x0d, 0x42, 0x7f},
    {0xcb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0d, 0x02, 0x7f},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0x4c, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x41, 0xb5, 0x8e},
    {0xc5, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0d, 0x02, 0x7f},
    {0x02, 0x44, 0x0d, 0x02, 0x7f},
    {0x07, 0x44, 0x0d, 0x02, 0x7f},
    {0x0d, 0x43, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0x4c, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x41, 0xb5, 0x8e},
    {0xc4, 0x4d, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x0d, 0x42, 0x7f},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0x42, 0x7f},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x0a, 0xf5, 0x9e},
    {0x05, 0x49, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x4a, 0xb5, 0x9e},
    {0x09, 0x46, 0x0a, 0xf5, 0x9e},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4a, 0xf5, 0x9e},
    {0x04, 0x49, 0x02, 0xb5, 0xae},
    {0x02, 0x49, 0x02, 0xb5, 0xae},
    {0x07, 0x49, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0x4a, 0xb5, 0x9e},
    {0xcd, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0x4a, 0xf5, 0x9e},
    {0x08, 0x46, 0x0a, 0xf5, 0x9e},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0x4a, 0xb5, 0x9e},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0xd9, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0x4a, 0xb5, 0x9e},
    {0xd5, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x01, 0xb5, 0x8e},
    {0x0b, 0x44, 0x01, 0xf5, 0x8e},
    {0x05, 0x45, 0x01, 0xb5, 0x8e},
    {0x0c, 0x42, 0x41, 0xb5, 0x8e},
    {0x09, 0x44, 0x01, 0xf5, 0x8e},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x01, 0xb5, 0x8e},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x47, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x41, 0xb5, 0x8e},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x01, 0xb5, 0x8e},
    {0x02, 0x45, 0x01, 0xb5, 0x8e},
    {0x07, 0x45, 0x01, 0xb5, 0x8e},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x41, 0xb5, 0x8e},
    {0xd1, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x01, 0xf5, 0x8e},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x47, 0xf5, 0x0f},
    {0x0a, 0x44, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x41, 0xb5, 0x8e},
    {0xc6, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x41, 0xb5, 0x8e},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x4a, 0x07, 0xb5, 0xbf},
    {0x0b, 0x49, 0x07, 0xf5, 0xbf},
    {0x05, 0x4a, 0x07, 0xb5, 0xbf},
    {0x0c, 0x46, 0x42, 0xb5, 0xae},
    {0x09, 0x49, 0x07, 0xf5, 0xbf},
    {0xda, 0x5a, 0x02, 0xf5, 0xff},
    {0x06, 0x4a, 0x07, 0xb5, 0xbf},
    {0x14, 0x41, 0x42, 0xf5, 0xae},
    {0xc2, 0x62, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x42, 0xf5, 0xae},
    {0x0e, 0x46, 0x42, 0xb5, 0xae},
    {0x1c, 0x41, 0x42, 0xf5, 0xae},
    {0x04, 0x4a, 0x07, 0xb5, 0xbf},
    {0x02, 0x4a, 0x07, 0xb5, 0xbf},
    {0x07, 0x4a, 0x07, 0xb5, 0xbf},
    {0x17, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x1a, 0x02, 0x6f},
    {0x1b, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x1a, 0x02, 0x6f},
    {0x67, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x46, 0x42, 0xb5, 0xae},
    {0xc9, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x1a, 0x02, 0x6f},
    {0x13, 0x41, 0x42, 0xf5, 0xae},
    {0x08, 0x49, 0x07, 0xf5, 0xbf},
    {0x77, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x62, 0x02, 0xf5, 0xff},
    {0x0a, 0x49, 0x07, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0x02, 0x6f},
    {0x02, 0x43, 0x1a, 0x02, 0x6f},
    {0x07, 0x43, 0x1a, 0x02, 0x6f},
    {0x6d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x12, 0xb5, 0x7e},
    {0x0b, 0x43, 0x12, 0xf5, 0x7e},
    {0x05, 0x41, 0x12, 0xb5, 0x7e},
    {0x75, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x12, 0xf5, 0x7e},
    {0xc7, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x12, 0xb5, 0x7e},
    {0x63, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0xc2, 0x42, 0xb5, 0x0e},
    {0x73, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x46, 0x42, 0xb5, 0xae},
    {0x7f, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x12, 0xb5, 0x7e},
    {0x02, 0x41, 0x12, 0xb5, 0x7e},
    {0x07, 0x41, 0x12, 0xb5, 0x7e},
    {0x0d, 0x46, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x1a, 0x02, 0x6f},
    {0xd8, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1a, 0x02, 0x6f},
    {0x6b, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x46, 0x42, 0xb5, 0xae},
    {0xd4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1a, 0x02, 0x6f},
    {0x01, 0x46, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x12, 0xf5, 0x7e},
    {0xc3, 0x5a, 0x02, 0xf5, 0xff},
    {0xc1, 0xc2, 0x42, 0xb5, 0x0e},
    {0x0a, 0x43, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x1a, 0x02, 0x6f},
    {0x02, 0x42, 0x1a, 0x02, 0x6f},
    {0x07, 0x42, 0x1a, 0x02, 0x6f},
    {0x5d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x08, 0x02, 0x8f},
    {0x0b, 0x41, 0x08, 0x42, 0x8f},
    {0x05, 0x46, 0x08, 0x02, 0x8f},
    {0x0c, 0x43, 0x48, 0x02, 0x8f},
    {0x09, 0x41, 0x08, 0x42, 0x8f},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0x02, 0x8f},
    {0x61, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x72, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0x48, 0x02, 0x8f},
    {0x7d, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x08, 0x02, 0x8f},
    {0x02, 0x46, 0x08, 0x02, 0x8f},
    {0x07, 0x46, 0x08, 0x02, 0x8f},
    {0x6f, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0x48, 0x02, 0x8f},
    {0xd0, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x08, 0x42, 0x8f},
    {0x79, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x72, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x08, 0x42, 0x8f},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x12, 0xb5, 0x7e},
    {0x0b, 0x42, 0x12, 0xf5, 0x7e},
    {0x05, 0x44, 0x12, 0xb5, 0x7e},
    {0x1a, 0x41, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x12, 0xf5, 0x7e},
    {0xcc, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x12, 0xb5, 0x7e},
    {0x65, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0x48, 0x02, 0x8f},
    {0xc5, 0x48, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x12, 0xb5, 0x7e},
    {0x02, 0x44, 0x12, 0xb5, 0x7e},
    {0x07, 0x44, 0x12, 0xb5, 0x7e},
    {0x0d, 0x43, 0x48, 0x02, 0x8f},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0x48, 0x02, 0x8f},
    {0xc4, 0x52, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0x02, 0x8f},
    {0x08, 0x42, 0x12, 0xf5, 0x7e},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0a, 0xf5, 0x9e},
    {0x05, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4a, 0xb5, 0x9e},
    {0x09, 0x45, 0x0a, 0xf5, 0x9e},
    {0x9a, 0x8a, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0a, 0xb5, 0x9e},
    {0x14, 0x42, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x7e, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4a, 0xf5, 0x9e},
    {0x04, 0x47, 0x0a, 0xb5, 0x9e},
    {0x02, 0x47, 0x0a, 0xb5, 0x9e},
    {0x07, 0x47, 0x0a, 0xb5, 0x9e},
    {0x17, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x8a, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x8a, 0xb5, 0x6e},
    {0x68, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x4a, 0xb5, 0x9e},
    {0xce, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x8a, 0xb5, 0x6e},
    {0x13, 0x42, 0x4a, 0xf5, 0x9e},
    {0x08, 0x45, 0x0a, 0xf5, 0x9e},
    {0x78, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x7e, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x8a, 0xb5, 0x6e},
    {0x02, 0x43, 0x8a, 0xb5, 0x6e},
    {0x07, 0x43, 0x8a, 0xb5, 0x6e},
    {0x6e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x4a, 0xb5, 0x9e},
    {0x40, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x8a, 0xb5, 0x6e},
    {0xdb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x8a, 0xb5, 0x6e},
    {0x6c, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x4a, 0xb5, 0x9e},
    {0xd6, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x8a, 0xb5, 0x6e},
    {0x01, 0x44, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8a, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8a, 0xb5, 0x6e},
    {0x02, 0x42, 0x8a, 0xb5, 0x6e},
    {0x07, 0x42, 0x8a, 0xb5, 0x6e},
    {0x5e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x08, 0x02, 0x8f},
    {0x0b, 0x44, 0x08, 0x42, 0x8f},
    {0x05, 0x45, 0x08, 0x02, 0x8f},
    {0x0c, 0x42, 0x48, 0x02, 0x8f},
    {0x09, 0x44, 0x08, 0x42, 0x8f},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0x02, 0x8f},
    {0x62, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0x48, 0x02, 0x8f},
    {0x7e, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x08, 0x02, 0x8f},
    {0x02, 0x45, 0x08, 0x02, 0x8f},
    {0x07, 0x45, 0x08, 0x02, 0x8f},
    {0x70, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0x48, 0x02, 0x8f},
    {0xd2, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x08, 0x42, 0x8f},
    {0x7a, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0x42, 0x8f},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x48, 0x02, 0x8f},
    {0xc6, 0x48, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0x02, 0x8f},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x48, 0x02, 0x8f},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0x02, 0x8f},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x50, 0xb5, 0x00, 0xee},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x50, 0xb5, 0x00, 0xee},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x66, 0xf5, 0x00, 0x0e},
    {0x06, 0x50, 0xb5, 0x00, 0xee},
    {0x14, 0x46, 0x47, 0xf5, 0xbf},
    {0xc2, 0x70, 0x02, 0xf5, 0xff},
    {0x18, 0x46, 0x47, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x47, 0xf5, 0xbf},
    {0x04, 0x50, 0xb5, 0x00, 0xee},
    {0x02, 0x50, 0xb5, 0x00, 0xee},
    {0x07, 0x50, 0xb5, 0x00, 0xee},
    {0x17, 0x46, 0x47, 0xf5, 0xbf},
    {0x03, 0x43, 0x26, 0xb5, 0x6e},
    {0x1b, 0x46, 0x47, 0xf5, 0xbf},
    {0x05, 0x43, 0x26, 0xb5, 0x6e},
    {0x67, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x26, 0xb5, 0x6e},
    {0x13, 0x46, 0x47, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x70, 0x02, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x26, 0xb5, 0x6e},
    {0x02, 0x43, 0x26, 0xb5, 0x6e},
    {0x07, 0x43, 0x26, 0xb5, 0x6e},
    {0x6d, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x15, 0xb5, 0x7e},
    {0x0b, 0x43, 0x15, 0xf5, 0x7e},
    {0x05, 0x41, 0x15, 0xb5, 0x7e},
    {0x75, 0x01, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x15, 0xf5, 0x7e},
    {0x87, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x15, 0xb5, 0x7e},
    {0x63, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x47, 0xbf},
    {0x73, 0x01, 0x07, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x15, 0xb5, 0x7e},
    {0x02, 0x41, 0x15, 0xb5, 0x7e},
    {0x07, 0x41, 0x15, 0xb5, 0x7e},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x26, 0xb5, 0x6e},
    {0xd7, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x26, 0xb5, 0x6e},
    {0x6b, 0x01, 0x07, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x26, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x15, 0xf5, 0x7e},
    {0xc3, 0x66, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x47, 0xbf},
    {0x0a, 0x43, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x26, 0xb5, 0x6e},
    {0x02, 0x42, 0x26, 0xb5, 0x6e},
    {0x07, 0x42, 0x26, 0xb5, 0x6e},
    {0x5d, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x46, 0x83, 0xb5, 0x8e},
    {0x0b, 0x41, 0x83, 0xf5, 0x8e},
    {0x05, 0x46, 0x83, 0xb5, 0x8e},
    {0x0c, 0x43, 0xc3, 0xb5, 0x8e},
    {0x09, 0x41, 0x83, 0xf5, 0x8e},
    {0xda, 0xc2, 0x47, 0xf5, 0x0f},
    {0x06, 0x46, 0x83, 0xb5, 0x8e},
    {0x61, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x7c, 0x02, 0xf5, 0xff},
    {0x71, 0x01, 0x07, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc3, 0xb5, 0x8e},
    {0x7d, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x46, 0x83, 0xb5, 0x8e},
    {0x02, 0x46, 0x83, 0xb5, 0x8e},
    {0x07, 0x46, 0x83, 0xb5, 0x8e},
    {0x6f, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x07, 0x6f},
    {0x7b, 0x01, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x07, 0x6f},
    {0x69, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x43, 0xc3, 0xb5, 0x8e},
    {0xcf, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0x07, 0x6f},
    {0x5f, 0x01, 0x07, 0xb5, 0xbf},
    {0x08, 0x41, 0x83, 0xf5, 0x8e},
    {0x79, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x7c, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x82, 0x07, 0x6f},
    {0x02, 0x43, 0x82, 0x07, 0x6f},
    {0x07, 0x43, 0x82, 0x07, 0x6f},
    {0x16, 0x46, 0x47, 0xf5, 0xbf},
    {0x03, 0x44, 0x15, 0xb5, 0x7e},
    {0x0b, 0x42, 0x15, 0xf5, 0x7e},
    {0x05, 0x44, 0x15, 0xb5, 0x7e},
    {0x1a, 0x46, 0x47, 0xf5, 0xbf},
    {0x09, 0x42, 0x15, 0xf5, 0x7e},
    {0xcb, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x15, 0xb5, 0x7e},
    {0x65, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x47, 0xbf},
    {0x19, 0x46, 0x47, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc3, 0xb5, 0x8e},
    {0x85, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x15, 0xb5, 0x7e},
    {0x02, 0x44, 0x15, 0xb5, 0x7e},
    {0x07, 0x44, 0x15, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x82, 0x07, 0x6f},
    {0x12, 0x46, 0x47, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x07, 0x6f},
    {0x15, 0x46, 0x47, 0xf5, 0xbf},
    {0x11, 0x43, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x55, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x07, 0x6f},
    {0x01, 0x43, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x15, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x47, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x07, 0x6f},
    {0x02, 0x42, 0x82, 0x07, 0x6f},
    {0x07, 0x42, 0x82, 0x07, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x04, 0x42, 0x9f},
    {0x05, 0x48, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x44, 0x02, 0x9f},
    {0x09, 0x46, 0x04, 0x42, 0x9f},
    {0xda, 0x59, 0x02, 0xf5, 0xff},
    {0x06, 0x48, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x44, 0x42, 0x9f},
    {0xc2, 0x6a, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x44, 0x42, 0x9f},
    {0x0e, 0x41, 0x44, 0x02, 0x9f},
    {0x1c, 0x43, 0x44, 0x42, 0x9f},
    {0x04, 0x48, 0x02, 0xb5, 0xae},
    {0x02, 0x48, 0x02, 0xb5, 0xae},
    {0x07, 0x48, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x44, 0x42, 0x9f},
    {0x03, 0x43, 0x19, 0x02, 0x6f},
    {0x1b, 0x43, 0x44, 0x42, 0x9f},
    {0x05, 0x43, 0x19, 0x02, 0x6f},
    {0x68, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0x02, 0x9f},
    {0xcd, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x19, 0x02, 0x6f},
    {0x13, 0x43, 0x44, 0x42, 0x9f},
    {0x08, 0x46, 0x04, 0x42, 0x9f},
    {0x78, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x6a, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x04, 0x42, 0x9f},
    {0x04, 0x43, 0x19, 0x02, 0x6f},
    {0x02, 0x43, 0x19, 0x02, 0x6f},
    {0x07, 0x43, 0x19, 0x02, 0x6f},
    {0x6e, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0x02, 0x7f},
    {0x0b, 0x43, 0x11, 0x42, 0x7f},
    {0x05, 0x41, 0x11, 0x02, 0x7f},
    {0x76, 0x01, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0x42, 0x7f},
    {0x88, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x11, 0x02, 0x7f},
    {0x64, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x07, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0x02, 0x9f},
    {0x40, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0x02, 0x7f},
    {0x02, 0x41, 0x11, 0x02, 0x7f},
    {0x07, 0x41, 0x11, 0x02, 0x7f},
    {0x0d, 0x41, 0x44, 0x02, 0x9f},
    {0x03, 0x42, 0x19, 0x02, 0x6f},
    {0xd9, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x19, 0x02, 0x6f},
    {0x6c, 0x01, 0x07, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0x02, 0x9f},
    {0xd5, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x19, 0x02, 0x6f},
    {0x01, 0x41, 0x44, 0x02, 0x9f},
    {0x08, 0x43, 0x11, 0x42, 0x7f},
    {0xc3, 0x59, 0x02, 0xf5, 0xff},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0x42, 0x7f},
    {0x04, 0x42, 0x19, 0x02, 0x6f},
    {0x02, 0x42, 0x19, 0x02, 0x6f},
    {0x07, 0x42, 0x19, 0x02, 0x6f},
    {0x5e, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x45, 0x83, 0xb5, 0x8e},
    {0x0b, 0x44, 0x83, 0xf5, 0x8e},
    {0x05, 0x45, 0x83, 0xb5, 0x8e},
    {0x0c, 0x42, 0xc3, 0xb5, 0x8e},
    {0x09, 0x44, 0x83, 0xf5, 0x8e},
    {0xda, 0x4f, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x83, 0xb5, 0x8e},
    {0x62, 0x01, 0x07, 0xb5, 0xbf},
    {0x82, 0x92, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x07, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc3, 0xb5, 0x8e},
    {0x7e, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x45, 0x83, 0xb5, 0x8e},
    {0x02, 0x45, 0x83, 0xb5, 0x8e},
    {0x07, 0x45, 0x83, 0xb5, 0x8e},
    {0x70, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x02, 0x6e},
    {0x7c, 0x01, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x02, 0x6e},
    {0x6a, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x42, 0xc3, 0xb5, 0x8e},
    {0xd1, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0f, 0x02, 0x6e},
    {0x60, 0x01, 0x07, 0xb5, 0xbf},
    {0x08, 0x44, 0x83, 0xf5, 0x8e},
    {0x7a, 0x01, 0x07, 0xb5, 0xbf},
    {0x81, 0x92, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x0f, 0x02, 0x6e},
    {0x02, 0x43, 0x0f, 0x02, 0x6e},
    {0x07, 0x43, 0x0f, 0x02, 0x6e},
    {0x16, 0x43, 0x44, 0x42, 0x9f},
    {0x03, 0x44, 0x11, 0x02, 0x7f},
    {0x0b, 0x42, 0x11, 0x42, 0x7f},
    {0x05, 0x44, 0x11, 0x02, 0x7f},
    {0x1a, 0x43, 0x44, 0x42, 0x9f},
    {0x09, 0x42, 0x11, 0x42, 0x7f},
    {0x8a, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x11, 0x02, 0x7f},
    {0x66, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x47, 0xbf},
    {0x19, 0x43, 0x44, 0x42, 0x9f},
    {0x0f, 0x42, 0xc3, 0xb5, 0x8e},
    {0x86, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x11, 0x02, 0x7f},
    {0x02, 0x44, 0x11, 0x02, 0x7f},
    {0x07, 0x44, 0x11, 0x02, 0x7f},
    {0x0d, 0x42, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x0f, 0x02, 0x6e},
    {0x12, 0x43, 0x44, 0x42, 0x9f},
    {0x05, 0x42, 0x0f, 0x02, 0x6e},
    {0x15, 0x43, 0x44, 0x42, 0x9f},
    {0x11, 0x42, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x51, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x02, 0x6e},
    {0x01, 0x42, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x11, 0x42, 0x7f},
    {0xc3, 0x4f, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x11, 0x42, 0x7f},
    {0x04, 0x42, 0x0f, 0x02, 0x6e},
    {0x02, 0x42, 0x0f, 0x02, 0x6e},
    {0x07, 0x42, 0x0f, 0x02, 0x6e},
    {0xf4, 0x44, 0x02, 0xf5, 0xff},
    {0x03, 0x40, 0xb5, 0x00, 0xee},
    {0x0b, 0x47, 0x02, 0xf5, 0xae},
    {0x05, 0x40, 0xb5, 0x00, 0xee},
    {0x0c, 0x45, 0x42, 0xb5, 0xae},
    {0x09, 0x47, 0x02, 0xf5, 0xae},
    {0x9a, 0x86, 0xb5, 0x00, 0x0e},
    {0x06, 0x40, 0xb5, 0x00, 0xee},
    {0x14, 0x44, 0x42, 0xf5, 0xae},
    {0xc2, 0x60, 0x02, 0xf5, 0xff},
    {0x18, 0x44, 0x42, 0xf5, 0xae},
    {0x0e, 0x45, 0x42, 0xb5, 0xae},
    {0x1c, 0x44, 0x42, 0xf5, 0xae},
    {0x04, 0x40, 0xb5, 0x00, 0xee},
    {0x02, 0x40, 0xb5, 0x00, 0xee},
    {0x07, 0x40, 0xb5, 0x00, 0xee},
    {0x17, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x86, 0xb5, 0x6e},
    {0x1b, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x86, 0xb5, 0x6e},
    {0x67, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x45, 0x42, 0xb5, 0xae},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x86, 0xb5, 0x6e},
    {0x13, 0x44, 0x42, 0xf5, 0xae},
    {0x08, 0x47, 0x02, 0xf5, 0xae},
    {0x77, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x60, 0x02, 0xf5, 0xff},
    {0x0a, 0x47, 0x02, 0xf5, 0xae},
    {0x04, 0x43, 0x86, 0xb5, 0x6e},
    {0x02, 0x43, 0x86, 0xb5, 0x6e},
    {0x07, 0x43, 0x86, 0xb5, 0x6e},
    {0x6d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x84, 0xb5, 0x7e},
    {0x0b, 0x43, 0x84, 0xf5, 0x7e},
    {0x05, 0x41, 0x84, 0xb5, 0x7e},
    {0x75, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x84, 0xf5, 0x7e},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x84, 0xb5, 0x7e},
    {0x63, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x45, 0x42, 0xb5, 0xae},
    {0x7f, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x84, 0xb5, 0x7e},
    {0x02, 0x41, 0x84, 0xb5, 0x7e},
    {0x07, 0x41, 0x84, 0xb5, 0x7e},
    {0x0d, 0x45, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x86, 0xb5, 0x6e},
    {0xd8, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x86, 0xb5, 0x6e},
    {0x6b, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x45, 0x42, 0xb5, 0xae},
    {0xd4, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x86, 0xb5, 0x6e},
    {0x01, 0x45, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x84, 0xf5, 0x7e},
    {0x83, 0x86, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x86, 0xb5, 0x6e},
    {0x02, 0x42, 0x86, 0xb5, 0x6e},
    {0x07, 0x42, 0x86, 0xb5, 0x6e},
    {0x5d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x7a, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x7a, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x84, 0xb5, 0x7e},
    {0x0b, 0x42, 0x84, 0xf5, 0x7e},
    {0x05, 0x44, 0x84, 0xb5, 0x7e},
    {0x1a, 0x44, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x84, 0xf5, 0x7e},
    {0xcc, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x84, 0xb5, 0x7e},
    {0x65, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0xc1, 0x42, 0xb5, 0x0e},
    {0x19, 0x44, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x84, 0xb5, 0x7e},
    {0x02, 0x44, 0x84, 0xb5, 0x7e},
    {0x07, 0x44, 0x84, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0x84, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x84, 0xf5, 0x7e},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x42, 0xb5, 0x0e},
    {0x0a, 0x42, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0x02, 0x9f},
    {0x0b, 0x45, 0x04, 0x42, 0x9f},
    {0x05, 0x47, 0x04, 0x02, 0x9f},
    {0x0c, 0x44, 0x44, 0x02, 0x9f},
    {0x09, 0x45, 0x04, 0x42, 0x9f},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0x02, 0x9f},
    {0x14, 0x42, 0x44, 0x42, 0x9f},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0x42, 0x9f},
    {0x0e, 0x44, 0x44, 0x02, 0x9f},
    {0x1c, 0x42, 0x44, 0x42, 0x9f},
    {0x04, 0x47, 0x04, 0x02, 0x9f},
    {0x02, 0x47, 0x04, 0x02, 0x9f},
    {0x07, 0x47, 0x04, 0x02, 0x9f},
    {0x17, 0x42, 0x44, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x44, 0x02, 0x9f},
    {0xce, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0x42, 0x9f},
    {0x08, 0x45, 0x04, 0x42, 0x9f},
    {0x78, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x03, 0x47, 0xbf},
    {0x74, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x44, 0x02, 0x9f},
    {0x40, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x44, 0x02, 0x9f},
    {0xd6, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0x02, 0x9f},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x47, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x03, 0x47, 0xbf},
    {0x72, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x03, 0x47, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0x42, 0x9f},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0x42, 0x9f},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x03, 0x47, 0xbf},
    {0x19, 0x42, 0x44, 0x42, 0x9f},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0x42, 0x9f},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x02, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x0e},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x02, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xc1, 0xb5, 0x00, 0x0e},
    {0x02, 0xc1, 0xb5, 0x00, 0x0e},
    {0x07, 0xc1, 0xb5, 0x00, 0x0e},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x02, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x02, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0d, 0x02, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x02, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x02, 0x6e},
    {0x02, 0x43, 0x0d, 0x02, 0x6e},
    {0x07, 0x43, 0x0d, 0x02, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0x02, 0x7f},
    {0x0b, 0x43, 0x01, 0x42, 0x7f},
    {0x05, 0x41, 0x01, 0x02, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0x42, 0x7f},
    {0xc7, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x01, 0x02, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0x02, 0x7f},
    {0x02, 0x41, 0x01, 0x02, 0x7f},
    {0x07, 0x41, 0x01, 0x02, 0x7f},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x02, 0x6e},
    {0xd7, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0d, 0x02, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0d, 0x02, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0x42, 0x7f},
    {0xc3, 0x4d, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0x42, 0x7f},
    {0x04, 0x42, 0x0d, 0x02, 0x6e},
    {0x02, 0x42, 0x0d, 0x02, 0x6e},
    {0x07, 0x42, 0x0d, 0x02, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0x02, 0x8f},
    {0x0b, 0x41, 0x0a, 0x42, 0x8f},
    {0x05, 0x46, 0x0a, 0x02, 0x8f},
    {0x0c, 0x43, 0x4a, 0x02, 0x8f},
    {0x09, 0x41, 0x0a, 0x42, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0x02, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0x02, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0x02, 0x8f},
    {0x02, 0x46, 0x0a, 0x02, 0x8f},
    {0x07, 0x46, 0x0a, 0x02, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0x02, 0x8f},
    {0xcf, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0x42, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0x42, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0x02, 0x7f},
    {0x0b, 0x42, 0x01, 0x42, 0x7f},
    {0x05, 0x44, 0x01, 0x02, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0x42, 0x7f},
    {0xcb, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x01, 0x02, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0x02, 0x8f},
    {0xc5, 0x4a, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x01, 0x02, 0x7f},
    {0x02, 0x44, 0x01, 0x02, 0x7f},
    {0x07, 0x44, 0x01, 0x02, 0x7f},
    {0x0d, 0x43, 0x4a, 0x02, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0x02, 0x8f},
    {0xc4, 0x41, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0x02, 0x8f},
    {0x08, 0x42, 0x01, 0x42, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0x42, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0x42, 0x9f},
    {0x05, 0x49, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0x02, 0x9f},
    {0x09, 0x46, 0x02, 0x42, 0x9f},
    {0xda, 0x52, 0x02, 0xf5, 0xff},
    {0x06, 0x49, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0x42, 0x9f},
    {0xc2, 0x5a, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0x42, 0x9f},
    {0x0e, 0x41, 0x42, 0x02, 0x9f},
    {0x1c, 0x43, 0x42, 0x42, 0x9f},
    {0x04, 0x49, 0x07, 0xb5, 0xae},
    {0x02, 0x49, 0x07, 0xb5, 0xae},
    {0x07, 0x49, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0x42, 0x9f},
    {0x03, 0x43, 0x12, 0x02, 0x6f},
    {0x1b, 0x43, 0x42, 0x42, 0x9f},
    {0x05, 0x43, 0x12, 0x02, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0x02, 0x9f},
    {0xcd, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x12, 0x02, 0x6f},
    {0x13, 0x43, 0x42, 0x42, 0x9f},
    {0x08, 0x46, 0x02, 0x42, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0x42, 0x9f},
    {0x04, 0x43, 0x12, 0x02, 0x6f},
    {0x02, 0x43, 0x12, 0x02, 0x6f},
    {0x07, 0x43, 0x12, 0x02, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x02, 0x7e},
    {0x0b, 0x43, 0x08, 0x42, 0x7e},
    {0x05, 0x41, 0x08, 0x02, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x42, 0x7e},
    {0xc8, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x08, 0x02, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0x02, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x02, 0x7e},
    {0x02, 0x41, 0x08, 0x02, 0x7e},
    {0x07, 0x41, 0x08, 0x02, 0x7e},
    {0x0d, 0x41, 0x42, 0x02, 0x9f},
    {0x03, 0x42, 0x12, 0x02, 0x6f},
    {0xd9, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x12, 0x02, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0x02, 0x9f},
    {0xd5, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x12, 0x02, 0x6f},
    {0x01, 0x41, 0x42, 0x02, 0x9f},
    {0x08, 0x43, 0x08, 0x42, 0x7e},
    {0xc3, 0x52, 0x02, 0xf5, 0xff},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x12, 0x02, 0x6f},
    {0x02, 0x42, 0x12, 0x02, 0x6f},
    {0x07, 0x42, 0x12, 0x02, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0x02, 0x8f},
    {0x0b, 0x44, 0x0a, 0x42, 0x8f},
    {0x05, 0x45, 0x0a, 0x02, 0x8f},
    {0x0c, 0x42, 0x4a, 0x02, 0x8f},
    {0x09, 0x44, 0x0a, 0x42, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0x02, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0x02, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0x02, 0x8f},
    {0x02, 0x45, 0x0a, 0x02, 0x8f},
    {0x07, 0x45, 0x0a, 0x02, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0x02, 0x8f},
    {0xd1, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0x42, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0x42, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0x42, 0x9f},
    {0x03, 0x44, 0x08, 0x02, 0x7e},
    {0x0b, 0x42, 0x08, 0x42, 0x7e},
    {0x05, 0x44, 0x08, 0x02, 0x7e},
    {0x1a, 0x43, 0x42, 0x42, 0x9f},
    {0x09, 0x42, 0x08, 0x42, 0x7e},
    {0xca, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x08, 0x02, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0x42, 0x9f},
    {0x0f, 0x42, 0x4a, 0x02, 0x8f},
    {0xc6, 0x4a, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x08, 0x02, 0x7e},
    {0x02, 0x44, 0x08, 0x02, 0x7e},
    {0x07, 0x44, 0x08, 0x02, 0x7e},
    {0x0d, 0x42, 0x4a, 0x02, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0x42, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0x42, 0x9f},
    {0x11, 0x42, 0x4a, 0x02, 0x8f},
    {0xc4, 0x48, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0x02, 0x8f},
    {0x08, 0x42, 0x08, 0x42, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0x02, 0xf5, 0xff},
    {0x03, 0x4b, 0x07, 0xb5, 0xbf},
    {0x0b, 0x48, 0x07, 0xf5, 0xbf},
    {0x05, 0x4b, 0x07, 0xb5, 0xbf},
    {0x0c, 0x46, 0x47, 0xb5, 0xae},
    {0x09, 0x48, 0x07, 0xf5, 0xbf},
    {0xda, 0x55, 0x02, 0xf5, 0xff},
    {0x06, 0x4b, 0x07, 0xb5, 0xbf},
    {0x14, 0x41, 0x47, 0xf5, 0xae},
    {0xc2, 0x66, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x47, 0xf5, 0xae},
    {0x0e, 0x46, 0x47, 0xb5, 0xae},
    {0x1c, 0x41, 0x47, 0xf5, 0xae},
    {0x04, 0x4b, 0x07, 0xb5, 0xbf},
    {0x02, 0x4b, 0x07, 0xb5, 0xbf},
    {0x07, 0x4b, 0x07, 0xb5, 0xbf},
    {0x17, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0x02, 0x6f},
    {0x1b, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0x02, 0x6f},
    {0x67, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x46, 0x47, 0xb5, 0xae},
    {0xc9, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0x02, 0x6f},
    {0x13, 0x41, 0x47, 0xf5, 0xae},
    {0x08, 0x48, 0x07, 0xf5, 0xbf},
    {0x77, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x66, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x07, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0x02, 0x6f},
    {0x02, 0x43, 0x15, 0x02, 0x6f},
    {0x07, 0x43, 0x15, 0x02, 0x6f},
    {0x6d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0xc2, 0x47, 0xb5, 0x0e},
    {0x73, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x46, 0x47, 0xb5, 0xae},
    {0x7f, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0x02, 0x6f},
    {0xd8, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x15, 0x02, 0x6f},
    {0x6b, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x46, 0x47, 0xb5, 0xae},
    {0xd4, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x15, 0x02, 0x6f},
    {0x01, 0x46, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0x02, 0xf5, 0xff},
    {0xc1, 0xc2, 0x47, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0x02, 0x6f},
    {0x02, 0x42, 0x15, 0x02, 0x6f},
    {0x07, 0x42, 0x15, 0x02, 0x6f},
    {0x5d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x02, 0x8e},
    {0x0b, 0x41, 0x04, 0x42, 0x8e},
    {0x05, 0x46, 0x04, 0x02, 0x8e},
    {0x0c, 0x43, 0x44, 0x02, 0x8e},
    {0x09, 0x41, 0x04, 0x42, 0x8e},
    {0xda, 0x51, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x02, 0x8e},
    {0x61, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x59, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x02, 0x8e},
    {0x7d, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x02, 0x8e},
    {0x02, 0x46, 0x04, 0x02, 0x8e},
    {0x07, 0x46, 0x04, 0x02, 0x8e},
    {0x6f, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x02, 0x6e},
    {0x7b, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x02, 0x6e},
    {0x69, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x02, 0x8e},
    {0xd0, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x11, 0x02, 0x6e},
    {0x5f, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x42, 0x8e},
    {0x79, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x59, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x11, 0x02, 0x6e},
    {0x02, 0x43, 0x11, 0x02, 0x6e},
    {0x07, 0x43, 0x11, 0x02, 0x6e},
    {0x16, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x02, 0x8e},
    {0xc5, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x11, 0x02, 0x6e},
    {0x12, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x02, 0x6e},
    {0x15, 0x41, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x02, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x02, 0x6e},
    {0x01, 0x43, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x02, 0x6e},
    {0x02, 0x42, 0x11, 0x02, 0x6e},
    {0x07, 0x42, 0x11, 0x02, 0x6e},
    {0xde, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0x02, 0x9f},
    {0x0b, 0x45, 0x02, 0x42, 0x9f},
    {0x05, 0x47, 0x02, 0x02, 0x9f},
    {0x0c, 0x44, 0x42, 0x02, 0x9f},
    {0x09, 0x45, 0x02, 0x42, 0x9f},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0x02, 0x9f},
    {0x14, 0x42, 0x42, 0x42, 0x9f},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0x42, 0x9f},
    {0x0e, 0x44, 0x42, 0x02, 0x9f},
    {0x1c, 0x42, 0x42, 0x42, 0x9f},
    {0x04, 0x47, 0x02, 0x02, 0x9f},
    {0x02, 0x47, 0x02, 0x02, 0x9f},
    {0x07, 0x47, 0x02, 0x02, 0x9f},
    {0x17, 0x42, 0x42, 0x42, 0x9f},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0x42, 0x9f},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0x02, 0x9f},
    {0xce, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0x42, 0x9f},
    {0x08, 0x45, 0x02, 0x42, 0x9f},
    {0x78, 0x03, 0x07, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0x42, 0x9f},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0x02, 0x9f},
    {0x40, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0x02, 0x9f},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0x02, 0x9f},
    {0xd6, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0x02, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x02, 0x8e},
    {0x0b, 0x44, 0x04, 0x42, 0x8e},
    {0x05, 0x45, 0x04, 0x02, 0x8e},
    {0x0c, 0x42, 0x44, 0x02, 0x8e},
    {0x09, 0x44, 0x04, 0x42, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x02, 0x8e},
    {0x62, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x02, 0x8e},
    {0x7e, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x02, 0x8e},
    {0x02, 0x45, 0x04, 0x02, 0x8e},
    {0x07, 0x45, 0x04, 0x02, 0x8e},
    {0x70, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x02, 0x8e},
    {0xd2, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x42, 0x8e},
    {0x7a, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0x42, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0x42, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0x42, 0x9f},
    {0x0f, 0x42, 0x44, 0x02, 0x8e},
    {0xc6, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0x42, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0x42, 0x9f},
    {0x11, 0x42, 0x44, 0x02, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x47, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x02, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x47, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x47, 0xf5, 0xbf},
    {0x0e, 0x47, 0x47, 0xb5, 0xbf},
    {0x1c, 0x45, 0x47, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x47, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x02, 0x6e},
    {0x1b, 0x45, 0x47, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x02, 0x6e},
    {0x67, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x47, 0x47, 0xb5, 0xbf},
    {0xc9, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x02, 0x6e},
    {0x13, 0x45, 0x47, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x02, 0x6e},
    {0x02, 0x43, 0x01, 0x02, 0x6e},
    {0x07, 0x43, 0x01, 0x02, 0x6e},
    {0x6d, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x02, 0x7e},
    {0x0b, 0x43, 0x0a, 0x42, 0x7e},
    {0x05, 0x41, 0x0a, 0x02, 0x7e},
    {0x75, 0x04, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x42, 0x7e},
    {0xc7, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x02, 0x7e},
    {0x63, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x47, 0xbf},
    {0x73, 0x04, 0x07, 0xb5, 0xbf},
    {0x0f, 0x47, 0x47, 0xb5, 0xbf},
    {0x7f, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x02, 0x7e},
    {0x02, 0x41, 0x0a, 0x02, 0x7e},
    {0x07, 0x41, 0x0a, 0x02, 0x7e},
    {0x0d, 0x47, 0x47, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x02, 0x6e},
    {0xd7, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x02, 0x6e},
    {0x6b, 0x04, 0x07, 0xb5, 0xbf},
    {0x11, 0x47, 0x47, 0xb5, 0xbf},
    {0xd3, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x02, 0x6e},
    {0x01, 0x47, 0x47, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x42, 0x7e},
    {0xc3, 0x41, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x47, 0xbf},
    {0x0a, 0x43, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x01, 0x02, 0x6e},
    {0x02, 0x42, 0x01, 0x02, 0x6e},
    {0x07, 0x42, 0x01, 0x02, 0x6e},
    {0x5d, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x02, 0x8e},
    {0x0b, 0x41, 0x02, 0x42, 0x8e},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x0c, 0x43, 0x42, 0x02, 0x8e},
    {0x09, 0x41, 0x02, 0x42, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x61, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x52, 0x02, 0xb5, 0xee},
    {0x71, 0x04, 0x07, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x02, 0x8e},
    {0x7d, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x02, 0x8e},
    {0x02, 0x46, 0x02, 0x02, 0x8e},
    {0x07, 0x46, 0x02, 0x02, 0x8e},
    {0x6f, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x02, 0x8e},
    {0xcf, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x07, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x42, 0x8e},
    {0x79, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x52, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x47, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x02, 0x7e},
    {0x0b, 0x42, 0x0a, 0x42, 0x7e},
    {0x05, 0x44, 0x0a, 0x02, 0x7e},
    {0x1a, 0x45, 0x47, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x42, 0x7e},
    {0xcb, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x02, 0x7e},
    {0x65, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x47, 0xbf},
    {0x19, 0x45, 0x47, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x02, 0x8e},
    {0xc5, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x02, 0x7e},
    {0x02, 0x44, 0x0a, 0x02, 0x7e},
    {0x07, 0x44, 0x0a, 0x02, 0x7e},
    {0x0d, 0x43, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x47, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x47, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x02, 0x8e},
    {0xc4, 0x4a, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x0a, 0x42, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0x42, 0x9f},
    {0x05, 0x48, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0x02, 0x9f},
    {0x09, 0x46, 0x07, 0x42, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0x42, 0x9f},
    {0xc2, 0x55, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0x42, 0x9f},
    {0x0e, 0x41, 0x47, 0x02, 0x9f},
    {0x1c, 0x43, 0x47, 0x42, 0x9f},
    {0x04, 0x48, 0x07, 0xb5, 0xae},
    {0x02, 0x48, 0x07, 0xb5, 0xae},
    {0x07, 0x48, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0x42, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0x42, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0x02, 0x9f},
    {0xcd, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0x42, 0x9f},
    {0x08, 0x46, 0x07, 0x42, 0x9f},
    {0x78, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x55, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0x42, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x07, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0x02, 0x9f},
    {0x40, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0x02, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x07, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0x02, 0x9f},
    {0xd5, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x02, 0x8e},
    {0x0b, 0x44, 0x02, 0x42, 0x8e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x0c, 0x42, 0x42, 0x02, 0x8e},
    {0x09, 0x44, 0x02, 0x42, 0x8e},
    {0xda, 0xc1, 0x47, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x62, 0x04, 0x07, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x07, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x02, 0x8e},
    {0x7e, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x02, 0x8e},
    {0x02, 0x45, 0x02, 0x02, 0x8e},
    {0x07, 0x45, 0x02, 0x02, 0x8e},
    {0x70, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x07, 0x6f},
    {0x7c, 0x04, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x07, 0x6f},
    {0x6a, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x02, 0x8e},
    {0xd1, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x07, 0x6f},
    {0x60, 0x04, 0x07, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x42, 0x8e},
    {0x7a, 0x04, 0x07, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x81, 0x07, 0x6f},
    {0x02, 0x43, 0x81, 0x07, 0x6f},
    {0x07, 0x43, 0x81, 0x07, 0x6f},
    {0x16, 0x43, 0x47, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x47, 0xbf},
    {0x19, 0x43, 0x47, 0x42, 0x9f},
    {0x0f, 0x42, 0x42, 0x02, 0x8e},
    {0xc6, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x81, 0x07, 0x6f},
    {0x12, 0x43, 0x47, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0x07, 0x6f},
    {0x15, 0x43, 0x47, 0x42, 0x9f},
    {0x11, 0x42, 0x42, 0x02, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x07, 0x6f},
    {0x01, 0x42, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x47, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x07, 0x6f},
    {0x02, 0x42, 0x81, 0x07, 0x6f},
    {0x07, 0x42, 0x81, 0x07, 0x6f},
    {0xf4, 0x47, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0x07, 0xb5, 0xbf},
    {0x0b, 0x47, 0x07, 0xf5, 0xae},
    {0x05, 0x4c, 0x07, 0xb5, 0xbf},
    {0x0c, 0x45, 0x47, 0xb5, 0xae},
    {0x09, 0x47, 0x07, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x07, 0xb5, 0xbf},
    {0x14, 0x44, 0x47, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x47, 0xf5, 0xae},
    {0x0e, 0x45, 0x47, 0xb5, 0xae},
    {0x1c, 0x44, 0x47, 0xf5, 0xae},
    {0x04, 0x4c, 0x07, 0xb5, 0xbf},
    {0x02, 0x4c, 0x07, 0xb5, 0xbf},
    {0x07, 0x4c, 0x07, 0xb5, 0xbf},
    {0x17, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x45, 0x47, 0xb5, 0xae},
    {0xc9, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x47, 0xf5, 0xae},
    {0x08, 0x47, 0x07, 0xf5, 0xae},
    {0x77, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x07, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x45, 0x47, 0xb5, 0xae},
    {0x7f, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x45, 0x47, 0xb5, 0xae},
    {0xd4, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x02, 0x8e},
    {0x0b, 0x41, 0x07, 0x42, 0x8e},
    {0x05, 0x46, 0x07, 0x02, 0x8e},
    {0x0c, 0x43, 0x47, 0x02, 0x8e},
    {0x09, 0x41, 0x07, 0x42, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x02, 0x8e},
    {0x61, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc3, 0x47, 0xf5, 0x0f},
    {0x71, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x02, 0x8e},
    {0x7d, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x02, 0x8e},
    {0x02, 0x46, 0x07, 0x02, 0x8e},
    {0x07, 0x46, 0x07, 0x02, 0x8e},
    {0x6f, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x02, 0x8e},
    {0xd0, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x42, 0x8e},
    {0x79, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0xc3, 0x47, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc1, 0x47, 0xb5, 0x0e},
    {0x19, 0x44, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x02, 0x8e},
    {0xc5, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x02, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x47, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0x02, 0x9f},
    {0x0b, 0x45, 0x07, 0x42, 0x9f},
    {0x05, 0x47, 0x07, 0x02, 0x9f},
    {0x0c, 0x44, 0x47, 0x02, 0x9f},
    {0x09, 0x45, 0x07, 0x42, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0x02, 0x9f},
    {0x14, 0x42, 0x47, 0x42, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0x42, 0x9f},
    {0x0e, 0x44, 0x47, 0x02, 0x9f},
    {0x1c, 0x42, 0x47, 0x42, 0x9f},
    {0x04, 0x47, 0x07, 0x02, 0x9f},
    {0x02, 0x47, 0x07, 0x02, 0x9f},
    {0x07, 0x47, 0x07, 0x02, 0x9f},
    {0x17, 0x42, 0x47, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0x02, 0x9f},
    {0xce, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0x42, 0x9f},
    {0x08, 0x45, 0x07, 0x42, 0x9f},
    {0x78, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x47, 0xbf},
    {0x74, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0x02, 0x9f},
    {0x40, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0x02, 0x9f},
    {0xd6, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x47, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x02, 0x8e},
    {0x0b, 0x44, 0x07, 0x42, 0x8e},
    {0x05, 0x45, 0x07, 0x02, 0x8e},
    {0x0c, 0x42, 0x47, 0x02, 0x8e},
    {0x09, 0x44, 0x07, 0x42, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x02, 0x8e},
    {0x62, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x47, 0xbf},
    {0x72, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x02, 0x8e},
    {0x7e, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x02, 0x8e},
    {0x02, 0x45, 0x07, 0x02, 0x8e},
    {0x07, 0x45, 0x07, 0x02, 0x8e},
    {0x70, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x02, 0x8e},
    {0xd2, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x42, 0x8e},
    {0x7a, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x47, 0xbf},
    {0x0a, 0x44, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x47, 0xbf},
    {0x19, 0x42, 0x47, 0x42, 0x9f},
    {0x0f, 0x42, 0x47, 0x02, 0x8e},
    {0xc6, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0x42, 0x9f},
    {0x11, 0x42, 0x47, 0x02, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c}
};

CONST BYTE GlobTableBlack[32768][5] = 
{
    {0xb3, 0x00, 0x00, 0x00, 0x00},
    {0x03, 0xb3, 0x40, 0x00, 0x02},
    {0x01, 0xb3, 0x40, 0x40, 0x03},
    {0x02, 0xb3, 0x40, 0x00, 0x02},
    {0x06, 0xf3, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf3, 0x00, 0x66},
    {0x04, 0xb3, 0x40, 0x40, 0x03},
    {0x02, 0x03, 0xf3, 0x00, 0x66},
    {0x09, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x0b, 0xf3, 0x00, 0x77},
    {0x01, 0x03, 0xf3, 0x40, 0x77},
    {0x02, 0x0b, 0xf3, 0x00, 0x77},
    {0x05, 0xf3, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf3, 0x00, 0x66},
    {0x04, 0x03, 0xf3, 0x40, 0x77},
    {0x02, 0x05, 0xf3, 0x00, 0x66},
    {0x0a, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf3, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf3, 0x00, 0x77},
    {0x07, 0xf3, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf3, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf3, 0x00, 0x66},
    {0x04, 0x05, 0xf3, 0x40, 0x77},
    {0x02, 0x06, 0xf3, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0xf5, 0x00, 0x99},
    {0x01, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x14, 0xf5, 0x00, 0x99},
    {0x06, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x82, 0xf3, 0x00, 0x07},
    {0x04, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x82, 0xf3, 0x00, 0x07},
    {0x08, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x18, 0xf5, 0x00, 0x99},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0xf5, 0x00, 0x99},
    {0x05, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0xf5, 0x00, 0x99},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0xf5, 0x00, 0x99},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf3, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf3, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0xf3, 0x00, 0x66},
    {0x01, 0x06, 0xf3, 0x40, 0x77},
    {0x02, 0x02, 0xf3, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf3, 0x00, 0x66},
    {0x04, 0x06, 0xf3, 0x40, 0x77},
    {0x02, 0x07, 0xf3, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0xf5, 0x00, 0x99},
    {0x01, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x17, 0xf5, 0x00, 0x99},
    {0x06, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x1b, 0xf5, 0x00, 0x99},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0xf5, 0x00, 0x99},
    {0x05, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x27, 0xf5, 0x00, 0xaa},
    {0x01, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x27, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0xb5, 0x40, 0xaa},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0xf5, 0x00, 0x99},
    {0x01, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x13, 0xf5, 0x00, 0x99},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf3, 0x00, 0x77},
    {0x04, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x08, 0xf3, 0x00, 0x77},
    {0x08, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x37, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0xf3, 0x40, 0x77},
    {0x02, 0x37, 0xf5, 0x00, 0xaa},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0xf3, 0x00, 0x07},
    {0x04, 0x04, 0xf3, 0x40, 0x77},
    {0x02, 0x81, 0xf3, 0x00, 0x07},
    {0x0c, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0xf3, 0x00, 0x77},
    {0x01, 0x02, 0xf3, 0x40, 0x77},
    {0x02, 0x0a, 0xf3, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf3, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf3, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf3, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x2d, 0xf5, 0x00, 0xaa},
    {0x01, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x2d, 0xf5, 0x00, 0xaa},
    {0x06, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x35, 0xf5, 0x00, 0xaa},
    {0x01, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x35, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0xb5, 0x40, 0xbb},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0xf5, 0x00, 0xaa},
    {0x01, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0xf5, 0x00, 0xaa},
    {0x06, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x43, 0xb5, 0xbb},
    {0x04, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x43, 0xb5, 0xbb},
    {0x08, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x33, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x33, 0xf5, 0x00, 0xaa},
    {0x05, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0xf5, 0x00, 0xaa},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0xf5, 0x00, 0xaa},
    {0x06, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x2b, 0xf5, 0x00, 0xaa},
    {0x01, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0xb5, 0xbb},
    {0x0c, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0xf5, 0x00, 0xaa},
    {0x01, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0xf5, 0x00, 0xaa},
    {0x06, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x43, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0xf5, 0x00, 0xaa},
    {0x01, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0xf5, 0x00, 0xaa},
    {0x06, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x4b, 0xb5, 0xcc},
    {0x04, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4b, 0xb5, 0xcc},
    {0x08, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x31, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0xf5, 0x00, 0xaa},
    {0x05, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x82, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0xf5, 0x00, 0xaa},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0xf5, 0x00, 0xaa},
    {0x01, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0xf5, 0x00, 0xaa},
    {0x06, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x3b, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x3b, 0xf5, 0x00, 0xaa},
    {0x05, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x29, 0xf5, 0x00, 0xaa},
    {0x01, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0xf5, 0x00, 0xaa},
    {0x06, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0xb5, 0x40, 0xcc},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0xf5, 0x00, 0xaa},
    {0x01, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0xf5, 0x00, 0xaa},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x39, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0xf5, 0x00, 0xaa},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0xb5, 0xcc},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0xb5, 0xcc},
    {0x0c, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0xf5, 0x00, 0x99},
    {0x01, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x16, 0xf5, 0x00, 0x99},
    {0x06, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0xf5, 0x00, 0x99},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0xf5, 0x00, 0x99},
    {0x06, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0xb5, 0x40, 0xcc},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0xf5, 0x00, 0xaa},
    {0x01, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0xf5, 0x00, 0xaa},
    {0x06, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0xb5, 0xbb},
    {0x04, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x45, 0xb5, 0xbb},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0xf5, 0x00, 0x99},
    {0x01, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x19, 0xf5, 0x00, 0x99},
    {0x05, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0xf5, 0x00, 0x99},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0xf5, 0x00, 0x99},
    {0x05, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0xf5, 0x00, 0x99},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0xf5, 0x00, 0x99},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0xb5, 0x40, 0x99},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x43, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0xb5, 0xbb},
    {0x0c, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9c, 0xf5, 0x00, 0x0d},
    {0x01, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x9c, 0xf5, 0x00, 0x0d},
    {0x06, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x4c, 0xb5, 0xdd},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x4c, 0xb5, 0xdd},
    {0x08, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x03, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0b, 0x6d},
    {0x04, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x0b, 0x6d},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0b, 0x6d},
    {0x04, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0b, 0x6d},
    {0x0b, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x28, 0xf5, 0x00, 0xaa},
    {0x01, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0xb5, 0x40, 0xcc},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x0b, 0x6d},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0b, 0x6d},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0xf5, 0x00, 0xaa},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4c, 0xb5, 0xdd},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x4c, 0xb5, 0xdd},
    {0x0c, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x0b, 0x6d},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x0b, 0x6d},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x0b, 0x6d},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x0b, 0x6d},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x0b, 0x6d},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x0b, 0x6d},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0xf5, 0x00, 0xaa},
    {0x01, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0xf5, 0x00, 0xaa},
    {0x06, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x03, 0x6d},
    {0x04, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x03, 0x6d},
    {0x09, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x03, 0x7d},
    {0x01, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x0b, 0x43, 0x03, 0x7d},
    {0x05, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x03, 0x6d},
    {0x04, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x05, 0x41, 0x03, 0x6d},
    {0x0a, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x36, 0xf5, 0x00, 0xaa},
    {0x01, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x03, 0x7d},
    {0x04, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x03, 0x7d},
    {0x07, 0x67, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x03, 0x6d},
    {0x04, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x06, 0x41, 0x03, 0x6d},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0xf5, 0x00, 0xaa},
    {0x01, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0xf5, 0x00, 0xaa},
    {0x06, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x49, 0xb5, 0xcc},
    {0x04, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x49, 0xb5, 0xcc},
    {0x08, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0xf5, 0x00, 0xaa},
    {0x05, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0xf5, 0x00, 0xaa},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0xf5, 0x00, 0xaa},
    {0x06, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0x03, 0x6d},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x03, 0x6d},
    {0x07, 0x50, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x03, 0x6d},
    {0x01, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x41, 0x03, 0x6d},
    {0x05, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0x03, 0x6d},
    {0x04, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x41, 0x03, 0x6d},
    {0x86, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0b, 0x6d},
    {0x04, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x0b, 0x6d},
    {0x09, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0b, 0x6d},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x0b, 0x6d},
    {0x0b, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x2c, 0xf5, 0x00, 0xaa},
    {0x01, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xc9, 0xb5, 0x40, 0x0d},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x0b, 0x6d},
    {0x04, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0b, 0x6d},
    {0x4e, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x03, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x03, 0x7d},
    {0x08, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0x4b, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x83, 0x4b, 0xb5, 0xdd},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x81, 0x49, 0xb5, 0xcc},
    {0x0c, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0x03, 0x7d},
    {0x01, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x0a, 0x43, 0x03, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x0b, 0x6d},
    {0x04, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x0b, 0x6d},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0b, 0x6d},
    {0x01, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x0b, 0x6d},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x0b, 0x6d},
    {0x04, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x0b, 0x6d},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0xf5, 0x00, 0xaa},
    {0x01, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x1e, 0xf5, 0x00, 0xaa},
    {0x06, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x45, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0xf5, 0x00, 0xaa},
    {0x01, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x22, 0xf5, 0x00, 0xaa},
    {0x06, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xda, 0xb5, 0x0d},
    {0x04, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0xda, 0xb5, 0x0d},
    {0x08, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x32, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0xf5, 0x00, 0xaa},
    {0x05, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0xf5, 0x00, 0xaa},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0xf5, 0x00, 0xaa},
    {0x01, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0xf5, 0x00, 0xaa},
    {0x06, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3c, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x3c, 0xf5, 0x00, 0xaa},
    {0x05, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x2a, 0xf5, 0x00, 0xaa},
    {0x01, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x2a, 0xf5, 0x00, 0xaa},
    {0x06, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x77, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0xf5, 0x00, 0xaa},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0xf5, 0x00, 0xaa},
    {0x06, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3a, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0xf5, 0x00, 0xaa},
    {0x05, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xda, 0xb5, 0x0d},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xda, 0xb5, 0x0d},
    {0x0c, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x44, 0x03, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x03, 0x6d},
    {0x09, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x0b, 0x42, 0x03, 0x7d},
    {0x01, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x0b, 0x42, 0x03, 0x7d},
    {0x05, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x44, 0x03, 0x6d},
    {0x04, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x05, 0x44, 0x03, 0x6d},
    {0x0a, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x03, 0x7d},
    {0x04, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x42, 0x03, 0x7d},
    {0x07, 0x4a, 0xb5, 0x40, 0xaa},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x03, 0x6d},
    {0x04, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x06, 0x44, 0x03, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0xf5, 0x00, 0xaa},
    {0x01, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x26, 0xf5, 0x00, 0xaa},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0xb5, 0xbb},
    {0x04, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0x46, 0xb5, 0xbb},
    {0x08, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x03, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x03, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x03, 0x6d},
    {0x01, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x44, 0x03, 0x6d},
    {0x05, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x03, 0x6d},
    {0x04, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x44, 0x03, 0x6d},
    {0x81, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x43, 0xb5, 0xdd},
    {0x01, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x84, 0x43, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x03, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x03, 0x7d},
    {0x08, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x45, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x83, 0x45, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x81, 0x46, 0xb5, 0xbb},
    {0x0c, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x03, 0x7d},
    {0x01, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x0a, 0x42, 0x03, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0x4a, 0xb5, 0x6d},
    {0x09, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x49, 0xb5, 0x7d},
    {0x01, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x0b, 0x49, 0xb5, 0x7d},
    {0x05, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x4a, 0xb5, 0x6d},
    {0x04, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x05, 0x4a, 0xb5, 0x6d},
    {0x0a, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x49, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x49, 0xb5, 0x7d},
    {0x07, 0x6d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4c, 0xb5, 0xee},
    {0x01, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x9a, 0x4c, 0xb5, 0xee},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4a, 0xb5, 0x6d},
    {0x04, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x06, 0x4a, 0xb5, 0x6d},
    {0x4d, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x54, 0xb5, 0xee},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x54, 0xb5, 0xee},
    {0x08, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0x0b, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x04, 0x4a, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4a, 0xb5, 0x6d},
    {0x01, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x4a, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4a, 0xb5, 0x6d},
    {0x04, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x4a, 0xb5, 0x6d},
    {0x52, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0c, 0x6e},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0c, 0x6e},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0c, 0x6e},
    {0x04, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0c, 0x6e},
    {0x0b, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x43, 0xb5, 0xee},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x43, 0xb5, 0xee},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0c, 0x6e},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0c, 0x6e},
    {0x51, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x08, 0x49, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x49, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x81, 0x54, 0xb5, 0xee},
    {0x04, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x81, 0x54, 0xb5, 0xee},
    {0x0c, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x49, 0xb5, 0x7d},
    {0x01, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x0a, 0x49, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0c, 0x6e},
    {0x04, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0x0c, 0x6e},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0c, 0x6e},
    {0x01, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0x0c, 0x6e},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0c, 0x6e},
    {0x04, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0x0c, 0x6e},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x0b, 0x6e},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x0b, 0x6e},
    {0x09, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x0b, 0x7e},
    {0x01, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x0b, 0x43, 0x0b, 0x7e},
    {0x05, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x0b, 0x6e},
    {0x04, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x05, 0x41, 0x0b, 0x6e},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x0b, 0x7e},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x0b, 0x7e},
    {0x07, 0x75, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x87, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x0b, 0x6e},
    {0x04, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x06, 0x41, 0x0b, 0x6e},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0b, 0x6e},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0b, 0x6e},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x0b, 0x6e},
    {0x01, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x41, 0x0b, 0x6e},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0b, 0x6e},
    {0x04, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x41, 0x0b, 0x6e},
    {0x9a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0c, 0x6e},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0c, 0x6e},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0c, 0x6e},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0c, 0x6e},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc7, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0c, 0x6e},
    {0x04, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0c, 0x6e},
    {0x4e, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x0b, 0x7e},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x0b, 0x7e},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x4c, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x83, 0x4c, 0xb5, 0xee},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0x0b, 0x7e},
    {0x01, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x0a, 0x43, 0x0b, 0x7e},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0c, 0x6e},
    {0x04, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x0c, 0x6e},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0c, 0x6e},
    {0x01, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x0c, 0x6e},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0c, 0x6e},
    {0x04, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x0c, 0x6e},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x03, 0x6e},
    {0x04, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0x03, 0x6e},
    {0x09, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x03, 0x7e},
    {0x01, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x0b, 0x41, 0x03, 0x7e},
    {0x05, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x03, 0x6e},
    {0x04, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x05, 0x46, 0x03, 0x6e},
    {0x0a, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x03, 0x8e},
    {0x01, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x0c, 0x43, 0x03, 0x8e},
    {0x06, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x09, 0x41, 0x03, 0x7e},
    {0x04, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x09, 0x41, 0x03, 0x7e},
    {0x07, 0x63, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x49, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x9a, 0x49, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x46, 0x03, 0x6e},
    {0x04, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x06, 0x46, 0x03, 0x6e},
    {0x4d, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x58, 0xb5, 0xee},
    {0x04, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x58, 0xb5, 0xee},
    {0x08, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x03, 0x8e},
    {0x04, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x0e, 0x43, 0x03, 0x8e},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x46, 0x03, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x03, 0x6e},
    {0x07, 0xc2, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x03, 0x6e},
    {0x01, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x46, 0x03, 0x6e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x46, 0x03, 0x6e},
    {0x04, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x46, 0x03, 0x6e},
    {0x96, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x09, 0x6d},
    {0x04, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x09, 0x6d},
    {0x09, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x09, 0x6d},
    {0x04, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x09, 0x6d},
    {0x0b, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x03, 0x8e},
    {0x04, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0x03, 0x8e},
    {0x07, 0x73, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x09, 0x6d},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x09, 0x6d},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x03, 0x7e},
    {0x04, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0x03, 0x7e},
    {0x08, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x58, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x81, 0x58, 0xb5, 0xee},
    {0x0c, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x03, 0x7e},
    {0x01, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x0a, 0x41, 0x03, 0x7e},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x09, 0x6d},
    {0x04, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x09, 0x6d},
    {0x07, 0x4f, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x09, 0x6d},
    {0x01, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x09, 0x6d},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x09, 0x6d},
    {0x04, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x09, 0x6d},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0x0b, 0x6e},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x0b, 0x6e},
    {0x09, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0b, 0x7e},
    {0x01, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x0b, 0x42, 0x0b, 0x7e},
    {0x05, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0x0b, 0x6e},
    {0x04, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x05, 0x44, 0x0b, 0x6e},
    {0x0a, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x0b, 0x7e},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0b, 0x7e},
    {0x07, 0x7f, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x0b, 0x6e},
    {0x04, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x06, 0x44, 0x0b, 0x6e},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x4e, 0xb5, 0xdd},
    {0x04, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4e, 0xb5, 0xdd},
    {0x08, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x03, 0x8e},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x03, 0x8e},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x43, 0xb5, 0xee},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x0b, 0x6e},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0b, 0x6e},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x0b, 0x6e},
    {0x01, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x44, 0x0b, 0x6e},
    {0x05, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x0b, 0x6e},
    {0x04, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x44, 0x0b, 0x6e},
    {0x90, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x03, 0x8e},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x03, 0x8e},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x09, 0x6d},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x09, 0x6d},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x09, 0x6d},
    {0x04, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x09, 0x6d},
    {0x0b, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x11, 0x43, 0x03, 0x8e},
    {0x04, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x11, 0x43, 0x03, 0x8e},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0x4b, 0xb5, 0xee},
    {0x01, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x84, 0x4b, 0xb5, 0xee},
    {0x05, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x09, 0x6d},
    {0x04, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x09, 0x6d},
    {0x4e, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0x03, 0x8e},
    {0x01, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x01, 0x43, 0x03, 0x8e},
    {0x06, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x0b, 0x7e},
    {0x04, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x0b, 0x7e},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x49, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x83, 0x49, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x81, 0x4e, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x81, 0x4e, 0xb5, 0xdd},
    {0x0c, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0x0b, 0x7e},
    {0x01, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x0a, 0x42, 0x0b, 0x7e},
    {0x06, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x09, 0x6d},
    {0x04, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x09, 0x6d},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x09, 0x6d},
    {0x01, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x09, 0x6d},
    {0x05, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x09, 0x6d},
    {0x04, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x09, 0x6d},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x9d, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x9d, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0xda, 0xb5, 0x0e},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xda, 0xb5, 0x0e},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x5c, 0xb5, 0xee},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x5c, 0xb5, 0xee},
    {0x08, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x05, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8c, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x9a, 0x6e},
    {0x04, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x9a, 0x6e},
    {0x09, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x9a, 0x6e},
    {0x04, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x05, 0x43, 0x9a, 0x6e},
    {0x0b, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd7, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x9a, 0x6e},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x9a, 0x6e},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5c, 0xb5, 0xee},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x5c, 0xb5, 0xee},
    {0x0c, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x9a, 0x6e},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x9a, 0x6e},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x9a, 0x6e},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x9a, 0x6e},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x9a, 0x6e},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x9a, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x05, 0x6d},
    {0x04, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x05, 0x6d},
    {0x09, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x05, 0x7d},
    {0x01, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x0b, 0x43, 0x05, 0x7d},
    {0x05, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x05, 0x6d},
    {0x04, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x05, 0x41, 0x05, 0x6d},
    {0x0a, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x05, 0x7d},
    {0x04, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x05, 0x7d},
    {0x07, 0x6b, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x88, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x05, 0x6d},
    {0x04, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x06, 0x41, 0x05, 0x6d},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x44, 0xb5, 0xbb},
    {0x04, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x44, 0xb5, 0xbb},
    {0x08, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x05, 0x6d},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x05, 0x6d},
    {0x07, 0x51, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x05, 0x6d},
    {0x01, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x41, 0x05, 0x6d},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x05, 0x6d},
    {0x04, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x41, 0x05, 0x6d},
    {0x88, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x9a, 0x6e},
    {0x04, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x9a, 0x6e},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x9a, 0x6e},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x9a, 0x6e},
    {0x0b, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd3, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x9a, 0x6e},
    {0x04, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x06, 0x42, 0x9a, 0x6e},
    {0x4e, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x05, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x05, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xda, 0xb5, 0x0e},
    {0x01, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x83, 0xda, 0xb5, 0x0e},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x81, 0x44, 0xb5, 0xbb},
    {0x0c, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0x05, 0x7d},
    {0x01, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x0a, 0x43, 0x05, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x9a, 0x6e},
    {0x04, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x9a, 0x6e},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x9a, 0x6e},
    {0x01, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x9a, 0x6e},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x9a, 0x6e},
    {0x04, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x9a, 0x6e},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x03, 0x6e},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x03, 0x6e},
    {0x09, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x44, 0x03, 0x7e},
    {0x01, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x0b, 0x44, 0x03, 0x7e},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x03, 0x6e},
    {0x04, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x05, 0x45, 0x03, 0x6e},
    {0x0a, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0c, 0x42, 0x03, 0x8e},
    {0x01, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x0c, 0x42, 0x03, 0x8e},
    {0x06, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x09, 0x44, 0x03, 0x7e},
    {0x04, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x09, 0x44, 0x03, 0x7e},
    {0x07, 0x41, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0x46, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x9a, 0x46, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x45, 0x03, 0x6e},
    {0x04, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x06, 0x45, 0x03, 0x6e},
    {0x4d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x42, 0xb5, 0xbb},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0xb5, 0xbb},
    {0x08, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x42, 0x03, 0x8e},
    {0x04, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x0e, 0x42, 0x03, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x45, 0x03, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x03, 0x6e},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x03, 0x6e},
    {0x01, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x45, 0x03, 0x6e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x45, 0x03, 0x6e},
    {0x04, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x45, 0x03, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x03, 0x8e},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x03, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x03, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x03, 0x7e},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0xb5, 0xbb},
    {0x04, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x81, 0x42, 0xb5, 0xbb},
    {0x0c, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x44, 0x03, 0x7e},
    {0x01, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x0a, 0x44, 0x03, 0x7e},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x05, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x05, 0x6d},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x05, 0x7d},
    {0x01, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x0b, 0x42, 0x05, 0x7d},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x05, 0x6d},
    {0x04, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x05, 0x44, 0x05, 0x6d},
    {0x0a, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x05, 0x7d},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x05, 0x7d},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x8a, 0x43, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x05, 0x6d},
    {0x04, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x06, 0x44, 0x05, 0x6d},
    {0x50, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0xb5, 0xbb},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0xb5, 0xbb},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x03, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x03, 0x8e},
    {0x40, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x43, 0xb5, 0xee},
    {0x01, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x86, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x05, 0x6d},
    {0x04, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x05, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x05, 0x6d},
    {0x01, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x44, 0x05, 0x6d},
    {0x05, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x05, 0x6d},
    {0x04, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x44, 0x05, 0x6d},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x03, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x03, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x11, 0x42, 0x03, 0x8e},
    {0x04, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x03, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x45, 0xb5, 0xdd},
    {0x01, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x84, 0x45, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x03, 0x8e},
    {0x01, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x01, 0x42, 0x03, 0x8e},
    {0x06, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x05, 0x7d},
    {0x04, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x05, 0x7d},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x83, 0x46, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x81, 0x47, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x81, 0x47, 0xb5, 0xbb},
    {0x0c, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x05, 0x7d},
    {0x01, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x0a, 0x42, 0x05, 0x7d},
    {0x06, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xdc, 0xb5, 0x00, 0x0f},
    {0x03, 0x03, 0x4d, 0xb5, 0x6e},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0x4d, 0xb5, 0x6e},
    {0x09, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x01, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x05, 0xdc, 0xb5, 0x00, 0x0f},
    {0x03, 0x05, 0x4d, 0xb5, 0x6e},
    {0x04, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x05, 0x4d, 0xb5, 0x6e},
    {0x0a, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x49, 0xb5, 0x8e},
    {0x01, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x0c, 0x49, 0xb5, 0x8e},
    {0x06, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x09, 0x4a, 0xb5, 0x7e},
    {0x04, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x09, 0x4a, 0xb5, 0x7e},
    {0x07, 0x5d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x54, 0xb5, 0xff},
    {0x01, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x9a, 0x54, 0xb5, 0xff},
    {0x05, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x4d, 0xb5, 0x6e},
    {0x04, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x06, 0x4d, 0xb5, 0x6e},
    {0x4d, 0x14, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x46, 0xb5, 0x9d},
    {0x01, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x14, 0x46, 0xb5, 0x9d},
    {0x06, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x82, 0x57, 0xb5, 0xee},
    {0x04, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x82, 0x57, 0xb5, 0xee},
    {0x08, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x46, 0xb5, 0x9d},
    {0x01, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x18, 0x46, 0xb5, 0x9d},
    {0x05, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x0e, 0x49, 0xb5, 0x8e},
    {0x04, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x0e, 0x49, 0xb5, 0x8e},
    {0x4f, 0x0c, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x46, 0xb5, 0x9d},
    {0x01, 0x9a, 0x4c, 0xf5, 0xff},
    {0x02, 0x1c, 0x46, 0xb5, 0x9d},
    {0x06, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x4d, 0xb5, 0x6e},
    {0x04, 0x9a, 0x4c, 0xf5, 0xff},
    {0x02, 0x04, 0x4d, 0xb5, 0x6e},
    {0x07, 0x43, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x4d, 0xb5, 0x6e},
    {0x01, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x4d, 0xb5, 0x6e},
    {0x05, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x4d, 0xb5, 0x6e},
    {0x04, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x4d, 0xb5, 0x6e},
    {0x52, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x46, 0xb5, 0x9d},
    {0x01, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x17, 0x46, 0xb5, 0x9d},
    {0x06, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x14, 0x6f},
    {0x04, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x14, 0x6f},
    {0x09, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x1b, 0x46, 0xb5, 0x9d},
    {0x01, 0x82, 0x54, 0xf5, 0xff},
    {0x02, 0x1b, 0x46, 0xb5, 0x9d},
    {0x05, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x14, 0x6f},
    {0x04, 0x82, 0x54, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x14, 0x6f},
    {0x0b, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x41, 0xb5, 0xad},
    {0x01, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x27, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x10, 0x49, 0xb5, 0x8e},
    {0x04, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x49, 0xb5, 0x8e},
    {0x07, 0x4b, 0x01, 0xf5, 0xad},
    {0x03, 0x89, 0x4b, 0xb5, 0xff},
    {0x01, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x89, 0x4b, 0xb5, 0xff},
    {0x05, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x14, 0x6f},
    {0x04, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x14, 0x6f},
    {0x51, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x46, 0xb5, 0x9d},
    {0x01, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x13, 0x46, 0xb5, 0x9d},
    {0x06, 0xda, 0x0b, 0xb5, 0xff},
    {0x03, 0x08, 0x4a, 0xb5, 0x7e},
    {0x04, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x08, 0x4a, 0xb5, 0x7e},
    {0x08, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x37, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x37, 0x41, 0xb5, 0xad},
    {0x05, 0xda, 0x0b, 0xb5, 0xff},
    {0x03, 0x81, 0x57, 0xb5, 0xee},
    {0x04, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x81, 0x57, 0xb5, 0xee},
    {0x0c, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x01, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x06, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x43, 0x14, 0x6f},
    {0x04, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0x14, 0x6f},
    {0x07, 0x45, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x14, 0x6f},
    {0x01, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0x14, 0x6f},
    {0x05, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x43, 0x14, 0x6f},
    {0x04, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0x14, 0x6f},
    {0xdc, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x41, 0xb5, 0xad},
    {0x01, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x2d, 0x41, 0xb5, 0xad},
    {0x06, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0x0c, 0x6f},
    {0x04, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0x0c, 0x6f},
    {0x09, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0x0c, 0x7f},
    {0x01, 0x03, 0x43, 0x4c, 0x7f},
    {0x02, 0x0b, 0x43, 0x0c, 0x7f},
    {0x05, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0x0c, 0x6f},
    {0x04, 0x03, 0x43, 0x4c, 0x7f},
    {0x02, 0x05, 0x41, 0x0c, 0x6f},
    {0x0a, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x35, 0x41, 0xb5, 0xad},
    {0x01, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x35, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x0c, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0c, 0x7f},
    {0x04, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0x0c, 0x7f},
    {0x07, 0x4c, 0x03, 0xf5, 0xbd},
    {0x03, 0x87, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x4c, 0x7f},
    {0x02, 0x87, 0x4b, 0xb5, 0xff},
    {0x05, 0xc2, 0x0c, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0c, 0x6f},
    {0x04, 0x05, 0x43, 0x4c, 0x7f},
    {0x02, 0x06, 0x41, 0x0c, 0x6f},
    {0x57, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x41, 0xb5, 0xad},
    {0x01, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x41, 0xb5, 0xad},
    {0x06, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x03, 0xbd},
    {0x04, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x03, 0xbd},
    {0x08, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x33, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x33, 0x41, 0xb5, 0xad},
    {0x05, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x49, 0xb5, 0x8e},
    {0x04, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x49, 0xb5, 0x8e},
    {0x54, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x41, 0xb5, 0xad},
    {0x01, 0x89, 0x43, 0xf5, 0xff},
    {0x02, 0x3f, 0x41, 0xb5, 0xad},
    {0x06, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x0c, 0x6f},
    {0x04, 0x89, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0x0c, 0x6f},
    {0x07, 0x49, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0x0c, 0x6f},
    {0x01, 0x06, 0x43, 0x4c, 0x7f},
    {0x02, 0x02, 0x41, 0x0c, 0x6f},
    {0x05, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x0c, 0x6f},
    {0x04, 0x06, 0x43, 0x4c, 0x7f},
    {0x02, 0x07, 0x41, 0x0c, 0x6f},
    {0x59, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x49, 0xb5, 0x8e},
    {0x01, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x0d, 0x49, 0xb5, 0x8e},
    {0x06, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x14, 0x6f},
    {0x04, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x14, 0x6f},
    {0x09, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x97, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x97, 0x43, 0xb5, 0xff},
    {0x05, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x14, 0x6f},
    {0x04, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x05, 0x42, 0x14, 0x6f},
    {0x0b, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x2b, 0x41, 0xb5, 0xad},
    {0x01, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x11, 0x49, 0xb5, 0x8e},
    {0x04, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x49, 0xb5, 0x8e},
    {0x07, 0xda, 0x03, 0xf5, 0xff},
    {0x03, 0x93, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x54, 0xf5, 0xff},
    {0x02, 0x93, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x42, 0x14, 0x6f},
    {0x04, 0x81, 0x54, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x14, 0x6f},
    {0x4e, 0x14, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x49, 0xb5, 0x8e},
    {0x01, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x01, 0x49, 0xb5, 0x8e},
    {0x06, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x08, 0x43, 0x0c, 0x7f},
    {0x04, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x08, 0x43, 0x0c, 0x7f},
    {0x08, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x54, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x4c, 0x7f},
    {0x02, 0x83, 0x54, 0xb5, 0xff},
    {0x05, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x81, 0x43, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x4c, 0x7f},
    {0x02, 0x81, 0x43, 0x03, 0xbd},
    {0x0c, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x0c, 0x7f},
    {0x01, 0x02, 0x43, 0x4c, 0x7f},
    {0x02, 0x0a, 0x43, 0x0c, 0x7f},
    {0x06, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x42, 0x14, 0x6f},
    {0x04, 0x02, 0x43, 0x4c, 0x7f},
    {0x02, 0x04, 0x42, 0x14, 0x6f},
    {0x07, 0x46, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x14, 0x6f},
    {0x01, 0x07, 0x43, 0x4c, 0x7f},
    {0x02, 0x02, 0x42, 0x14, 0x6f},
    {0x05, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x42, 0x14, 0x6f},
    {0x04, 0x07, 0x43, 0x4c, 0x7f},
    {0x02, 0x07, 0x42, 0x14, 0x6f},
    {0xf4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x03, 0x1d, 0x41, 0xb5, 0xad},
    {0x01, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x41, 0xb5, 0xad},
    {0x06, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0x0b, 0x6f},
    {0x04, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x0b, 0x6f},
    {0x09, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x0b, 0x7f},
    {0x01, 0x03, 0x41, 0x4b, 0x7f},
    {0x02, 0x0b, 0x41, 0x0b, 0x7f},
    {0x05, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0x0b, 0x6f},
    {0x04, 0x03, 0x41, 0x4b, 0x7f},
    {0x02, 0x05, 0x46, 0x0b, 0x6f},
    {0x0a, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x0b, 0x8f},
    {0x01, 0x0b, 0x43, 0x4b, 0x8f},
    {0x02, 0x0c, 0x43, 0x0b, 0x8f},
    {0x06, 0x43, 0x03, 0x0b, 0x8f},
    {0x03, 0x09, 0x41, 0x0b, 0x7f},
    {0x04, 0x0b, 0x43, 0x4b, 0x8f},
    {0x02, 0x09, 0x41, 0x0b, 0x7f},
    {0x07, 0x61, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x01, 0x05, 0x41, 0x4b, 0x7f},
    {0x02, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x05, 0x43, 0x03, 0x0b, 0x8f},
    {0x03, 0x06, 0x46, 0x0b, 0x6f},
    {0x04, 0x05, 0x41, 0x4b, 0x7f},
    {0x02, 0x06, 0x46, 0x0b, 0x6f},
    {0x4d, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x21, 0x41, 0xb5, 0xad},
    {0x01, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x41, 0xb5, 0xad},
    {0x06, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x5b, 0xb5, 0xee},
    {0x04, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x5b, 0xb5, 0xee},
    {0x08, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0x4b, 0x8f},
    {0x02, 0x31, 0x41, 0xb5, 0xad},
    {0x05, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0x0b, 0x8f},
    {0x04, 0x09, 0x43, 0x4b, 0x8f},
    {0x02, 0x0e, 0x43, 0x0b, 0x8f},
    {0x83, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x41, 0xb5, 0xad},
    {0x01, 0x87, 0x43, 0xf5, 0xff},
    {0x02, 0x3d, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x46, 0x0b, 0x6f},
    {0x04, 0x87, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x0b, 0x6f},
    {0x07, 0xc2, 0x0b, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x0b, 0x6f},
    {0x01, 0x06, 0x41, 0x4b, 0x7f},
    {0x02, 0x02, 0x46, 0x0b, 0x6f},
    {0x05, 0x45, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x46, 0x0b, 0x6f},
    {0x04, 0x06, 0x41, 0x4b, 0x7f},
    {0x02, 0x07, 0x46, 0x0b, 0x6f},
    {0x94, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x41, 0xb5, 0xad},
    {0x01, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x41, 0xb5, 0xad},
    {0x06, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x82, 0x6d},
    {0x04, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x82, 0x6d},
    {0x09, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x3b, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x3b, 0x41, 0xb5, 0xad},
    {0x05, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x82, 0x6d},
    {0x04, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x82, 0x6d},
    {0x0b, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x41, 0xb5, 0xad},
    {0x01, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x41, 0xb5, 0xad},
    {0x06, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0x0b, 0x8f},
    {0x04, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x0b, 0x8f},
    {0x07, 0x71, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x8f, 0x43, 0xb5, 0xff},
    {0x05, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x82, 0x6d},
    {0x04, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x82, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x41, 0xb5, 0xad},
    {0x01, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x41, 0xb5, 0xad},
    {0x06, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x0b, 0x7f},
    {0x04, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x0b, 0x7f},
    {0x08, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x39, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0x4b, 0x7f},
    {0x02, 0x39, 0x41, 0xb5, 0xad},
    {0x05, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5b, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x4b, 0x7f},
    {0x02, 0x81, 0x5b, 0xb5, 0xee},
    {0x0c, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x0b, 0x7f},
    {0x01, 0x02, 0x41, 0x4b, 0x7f},
    {0x02, 0x0a, 0x41, 0x0b, 0x7f},
    {0x06, 0x46, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x43, 0x82, 0x6d},
    {0x04, 0x02, 0x41, 0x4b, 0x7f},
    {0x02, 0x04, 0x43, 0x82, 0x6d},
    {0x07, 0x4e, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x82, 0x6d},
    {0x01, 0x07, 0x41, 0x4b, 0x7f},
    {0x02, 0x02, 0x43, 0x82, 0x6d},
    {0x05, 0x46, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x43, 0x82, 0x6d},
    {0x04, 0x07, 0x41, 0x4b, 0x7f},
    {0x02, 0x07, 0x43, 0x82, 0x6d},
    {0xdd, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x46, 0xb5, 0x9d},
    {0x01, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x16, 0x46, 0xb5, 0x9d},
    {0x06, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0x0c, 0x6f},
    {0x04, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0x0c, 0x6f},
    {0x09, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0c, 0x7f},
    {0x01, 0x03, 0x42, 0x4c, 0x7f},
    {0x02, 0x0b, 0x42, 0x0c, 0x7f},
    {0x05, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0x0c, 0x6f},
    {0x04, 0x03, 0x42, 0x4c, 0x7f},
    {0x02, 0x05, 0x44, 0x0c, 0x6f},
    {0x0a, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x46, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x46, 0xb5, 0x9d},
    {0x06, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0x0c, 0x7f},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0c, 0x7f},
    {0x07, 0x7d, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0x43, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4c, 0x7f},
    {0x02, 0x8b, 0x43, 0xb5, 0xff},
    {0x05, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0x0c, 0x6f},
    {0x04, 0x05, 0x42, 0x4c, 0x7f},
    {0x02, 0x06, 0x44, 0x0c, 0x6f},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x41, 0xb5, 0xad},
    {0x01, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x41, 0xb5, 0xad},
    {0x06, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0x03, 0xbd},
    {0x04, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x03, 0xbd},
    {0x08, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x46, 0xb5, 0x9d},
    {0x01, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x19, 0x46, 0xb5, 0x9d},
    {0x05, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x0b, 0x8f},
    {0x04, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0x0b, 0x8f},
    {0x55, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0x4b, 0xb5, 0xff},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x4b, 0xb5, 0xff},
    {0x06, 0xc1, 0x0c, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0c, 0x6f},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0c, 0x6f},
    {0x07, 0x44, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0x0c, 0x6f},
    {0x01, 0x06, 0x42, 0x4c, 0x7f},
    {0x02, 0x02, 0x44, 0x0c, 0x6f},
    {0x05, 0xc1, 0x0c, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0c, 0x6f},
    {0x04, 0x06, 0x42, 0x4c, 0x7f},
    {0x02, 0x07, 0x44, 0x0c, 0x6f},
    {0x8e, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x0b, 0x8f},
    {0x01, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0x0b, 0x8f},
    {0x06, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x82, 0x6d},
    {0x04, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x82, 0x6d},
    {0x09, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x46, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0x4b, 0x8f},
    {0x02, 0x12, 0x46, 0xb5, 0x9d},
    {0x05, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x82, 0x6d},
    {0x04, 0x08, 0x43, 0x4b, 0x8f},
    {0x02, 0x05, 0x42, 0x82, 0x6d},
    {0x0b, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x46, 0xb5, 0x9d},
    {0x01, 0x83, 0x4c, 0xf5, 0xff},
    {0x02, 0x15, 0x46, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0x0b, 0x8f},
    {0x03, 0x11, 0x43, 0x0b, 0x8f},
    {0x04, 0x83, 0x4c, 0xf5, 0xff},
    {0x02, 0x11, 0x43, 0x0b, 0x8f},
    {0x07, 0x42, 0x06, 0xf5, 0x9d},
    {0x03, 0x84, 0x4c, 0xb5, 0xff},
    {0x01, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x84, 0x4c, 0xb5, 0xff},
    {0x05, 0x44, 0x03, 0x0b, 0x8f},
    {0x03, 0x06, 0x42, 0x82, 0x6d},
    {0x04, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x82, 0x6d},
    {0x4e, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x43, 0x0b, 0x8f},
    {0x01, 0x0a, 0x43, 0x4b, 0x8f},
    {0x02, 0x01, 0x43, 0x0b, 0x8f},
    {0x06, 0x42, 0x03, 0x0b, 0x8f},
    {0x03, 0x08, 0x42, 0x0c, 0x7f},
    {0x04, 0x0a, 0x43, 0x4b, 0x8f},
    {0x02, 0x08, 0x42, 0x0c, 0x7f},
    {0x08, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xc2, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x4c, 0x7f},
    {0x02, 0x83, 0xc2, 0xb5, 0x0d},
    {0x05, 0x42, 0x03, 0x0b, 0x8f},
    {0x03, 0x81, 0x45, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x4c, 0x7f},
    {0x02, 0x81, 0x45, 0x03, 0xbd},
    {0x0c, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x0c, 0x7f},
    {0x01, 0x02, 0x42, 0x4c, 0x7f},
    {0x02, 0x0a, 0x42, 0x0c, 0x7f},
    {0x06, 0x47, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x42, 0x82, 0x6d},
    {0x04, 0x02, 0x42, 0x4c, 0x7f},
    {0x02, 0x04, 0x42, 0x82, 0x6d},
    {0x07, 0x47, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x82, 0x6d},
    {0x01, 0x07, 0x42, 0x4c, 0x7f},
    {0x02, 0x02, 0x42, 0x82, 0x6d},
    {0x05, 0x47, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x42, 0x82, 0x6d},
    {0x04, 0x07, 0x42, 0x4c, 0x7f},
    {0x02, 0x07, 0x42, 0x82, 0x6d},
    {0xf4, 0x4b, 0xf5, 0x40, 0x0f},
    {0x03, 0xa1, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0xa1, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x03, 0x7f},
    {0x01, 0x03, 0x46, 0x43, 0x7f},
    {0x02, 0x0b, 0x46, 0x03, 0x7f},
    {0x05, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x43, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0x03, 0x8f},
    {0x01, 0x0b, 0x41, 0x43, 0x8f},
    {0x02, 0x0c, 0x41, 0x03, 0x8f},
    {0x06, 0x43, 0x01, 0x03, 0x8f},
    {0x03, 0x09, 0x46, 0x03, 0x7f},
    {0x04, 0x0b, 0x41, 0x43, 0x8f},
    {0x02, 0x09, 0x46, 0x03, 0x7f},
    {0x07, 0x6f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x58, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0x43, 0x7f},
    {0x02, 0x9a, 0x58, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0x03, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x43, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0x18, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0x03, 0x9f},
    {0x01, 0x0c, 0x43, 0x43, 0x9f},
    {0x02, 0x14, 0x43, 0x03, 0x9f},
    {0x06, 0x4b, 0x03, 0x03, 0x9f},
    {0x03, 0x82, 0x67, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0x43, 0x9f},
    {0x02, 0x82, 0x67, 0xb5, 0xff},
    {0x08, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x03, 0x9f},
    {0x01, 0x09, 0x41, 0x43, 0x8f},
    {0x02, 0x18, 0x43, 0x03, 0x9f},
    {0x05, 0x4b, 0x03, 0x03, 0x9f},
    {0x03, 0x0e, 0x41, 0x03, 0x8f},
    {0x04, 0x09, 0x41, 0x43, 0x8f},
    {0x02, 0x0e, 0x41, 0x03, 0x8f},
    {0x4f, 0x09, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x43, 0x03, 0x9f},
    {0x01, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x1c, 0x43, 0x03, 0x9f},
    {0x06, 0x45, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x43, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x43, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0x03, 0x9f},
    {0x01, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x03, 0x9f},
    {0x06, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x18, 0x6f},
    {0x04, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x18, 0x6f},
    {0x09, 0xc2, 0x43, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x03, 0x9f},
    {0x01, 0x82, 0x58, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0x03, 0x9f},
    {0x05, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x18, 0x6f},
    {0x04, 0x82, 0x58, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x18, 0x6f},
    {0x0b, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x41, 0xb5, 0xad},
    {0x01, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x03, 0x9f},
    {0x03, 0x10, 0x41, 0x03, 0x8f},
    {0x04, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x03, 0x8f},
    {0x07, 0x7b, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0x43, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x43, 0x9f},
    {0x02, 0x8d, 0x43, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x03, 0x9f},
    {0x03, 0x06, 0x43, 0x18, 0x6f},
    {0x04, 0x0e, 0x43, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x18, 0x6f},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x03, 0x9f},
    {0x01, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x03, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x03, 0x7f},
    {0x04, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x03, 0x7f},
    {0x08, 0xc2, 0x43, 0xb5, 0xff},
    {0x03, 0x38, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x43, 0x7f},
    {0x02, 0x38, 0x41, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x67, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0x43, 0x7f},
    {0x02, 0x81, 0x67, 0xb5, 0xff},
    {0x0c, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0x03, 0x7f},
    {0x01, 0x02, 0x46, 0x43, 0x7f},
    {0x02, 0x0a, 0x46, 0x03, 0x7f},
    {0x06, 0x46, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x43, 0x18, 0x6f},
    {0x04, 0x02, 0x46, 0x43, 0x7f},
    {0x02, 0x04, 0x43, 0x18, 0x6f},
    {0x07, 0x45, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x43, 0x18, 0x6f},
    {0x01, 0x07, 0x46, 0x43, 0x7f},
    {0x02, 0x02, 0x43, 0x18, 0x6f},
    {0x05, 0x46, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x43, 0x18, 0x6f},
    {0x04, 0x07, 0x46, 0x43, 0x7f},
    {0x02, 0x07, 0x43, 0x18, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x41, 0xb5, 0xad},
    {0x01, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x41, 0xb5, 0xad},
    {0x06, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x09, 0x6e},
    {0x04, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x09, 0x6e},
    {0x09, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x09, 0x7e},
    {0x01, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x0b, 0x43, 0x09, 0x7e},
    {0x05, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x09, 0x6e},
    {0x04, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x05, 0x41, 0x09, 0x6e},
    {0x0a, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x41, 0xb5, 0xad},
    {0x01, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x09, 0x7e},
    {0x04, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x09, 0x7e},
    {0x07, 0x69, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x88, 0x4b, 0xb5, 0xff},
    {0x05, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x09, 0x6e},
    {0x04, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x06, 0x41, 0x09, 0x6e},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x41, 0xb5, 0xad},
    {0x01, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x41, 0xb5, 0xad},
    {0x06, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x50, 0xb5, 0xdd},
    {0x04, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x50, 0xb5, 0xdd},
    {0x08, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x43, 0x9f},
    {0x02, 0x34, 0x41, 0xb5, 0xad},
    {0x05, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0x03, 0x8f},
    {0x04, 0x10, 0x43, 0x43, 0x9f},
    {0x02, 0x0f, 0x41, 0x03, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x41, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x41, 0xb5, 0xad},
    {0x06, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x09, 0x6e},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x09, 0x6e},
    {0x07, 0x50, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x09, 0x6e},
    {0x01, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x41, 0x09, 0x6e},
    {0x05, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x09, 0x6e},
    {0x04, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x41, 0x09, 0x6e},
    {0x87, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0x03, 0x8f},
    {0x01, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x03, 0x8f},
    {0x06, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x18, 0x6f},
    {0x04, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x18, 0x6f},
    {0x09, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x43, 0x8f},
    {0x02, 0x99, 0x43, 0xb5, 0xff},
    {0x05, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x18, 0x6f},
    {0x04, 0x08, 0x41, 0x43, 0x8f},
    {0x02, 0x05, 0x42, 0x18, 0x6f},
    {0x0b, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x41, 0xb5, 0xad},
    {0x01, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x03, 0x8f},
    {0x03, 0x11, 0x41, 0x03, 0x8f},
    {0x04, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x03, 0x8f},
    {0x07, 0xcf, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x58, 0xf5, 0xff},
    {0x02, 0x95, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x03, 0x8f},
    {0x03, 0x06, 0x42, 0x18, 0x6f},
    {0x04, 0x81, 0x58, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x18, 0x6f},
    {0x4e, 0x18, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0x03, 0x8f},
    {0x01, 0x0a, 0x41, 0x43, 0x8f},
    {0x02, 0x01, 0x41, 0x03, 0x8f},
    {0x06, 0x42, 0x01, 0x03, 0x8f},
    {0x03, 0x08, 0x43, 0x09, 0x7e},
    {0x04, 0x0a, 0x41, 0x43, 0x8f},
    {0x02, 0x08, 0x43, 0x09, 0x7e},
    {0x08, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0x58, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x83, 0x58, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0x03, 0x8f},
    {0x03, 0x81, 0x50, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x81, 0x50, 0xb5, 0xdd},
    {0x0c, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x09, 0x7e},
    {0x01, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x0a, 0x43, 0x09, 0x7e},
    {0x06, 0x47, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x42, 0x18, 0x6f},
    {0x04, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0x18, 0x6f},
    {0x07, 0x46, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x18, 0x6f},
    {0x01, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0x18, 0x6f},
    {0x05, 0x47, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x42, 0x18, 0x6f},
    {0x04, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0x18, 0x6f},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0x1e, 0x41, 0xb5, 0xad},
    {0x01, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x1e, 0x41, 0xb5, 0xad},
    {0x06, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0x0b, 0x6f},
    {0x04, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0x0b, 0x6f},
    {0x09, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0x0b, 0x7f},
    {0x01, 0x03, 0x44, 0x4b, 0x7f},
    {0x02, 0x0b, 0x44, 0x0b, 0x7f},
    {0x05, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0x0b, 0x6f},
    {0x04, 0x03, 0x44, 0x4b, 0x7f},
    {0x02, 0x05, 0x45, 0x0b, 0x6f},
    {0x0a, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0x0b, 0x8f},
    {0x01, 0x0b, 0x42, 0x4b, 0x8f},
    {0x02, 0x0c, 0x42, 0x0b, 0x8f},
    {0x06, 0x43, 0x02, 0x0b, 0x8f},
    {0x03, 0x09, 0x44, 0x0b, 0x7f},
    {0x04, 0x0b, 0x42, 0x4b, 0x8f},
    {0x02, 0x09, 0x44, 0x0b, 0x7f},
    {0x07, 0x5f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4e, 0xb5, 0xee},
    {0x01, 0x05, 0x44, 0x4b, 0x7f},
    {0x02, 0x9a, 0x4e, 0xb5, 0xee},
    {0x05, 0x43, 0x02, 0x0b, 0x8f},
    {0x03, 0x06, 0x45, 0x0b, 0x6f},
    {0x04, 0x05, 0x44, 0x4b, 0x7f},
    {0x02, 0x06, 0x45, 0x0b, 0x6f},
    {0x4d, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x22, 0x41, 0xb5, 0xad},
    {0x01, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x22, 0x41, 0xb5, 0xad},
    {0x06, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc9, 0xb5, 0x0f},
    {0x04, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0xc9, 0xb5, 0x0f},
    {0x08, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0x4b, 0x8f},
    {0x02, 0x32, 0x41, 0xb5, 0xad},
    {0x05, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0x0b, 0x8f},
    {0x04, 0x09, 0x42, 0x4b, 0x8f},
    {0x02, 0x0e, 0x42, 0x0b, 0x8f},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x41, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x45, 0x0b, 0x6f},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0x0b, 0x6f},
    {0x07, 0x48, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0x0b, 0x6f},
    {0x01, 0x06, 0x44, 0x4b, 0x7f},
    {0x02, 0x02, 0x45, 0x0b, 0x6f},
    {0x05, 0x45, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x45, 0x0b, 0x6f},
    {0x04, 0x06, 0x44, 0x4b, 0x7f},
    {0x02, 0x07, 0x45, 0x0b, 0x6f},
    {0x98, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x41, 0xb5, 0xad},
    {0x01, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x41, 0xb5, 0xad},
    {0x06, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0e, 0x6e},
    {0x04, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x0e, 0x6e},
    {0x09, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3c, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x3c, 0x41, 0xb5, 0xad},
    {0x05, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0e, 0x6e},
    {0x04, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0e, 0x6e},
    {0x0b, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x41, 0xb5, 0xad},
    {0x01, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x2a, 0x41, 0xb5, 0xad},
    {0x06, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0x0b, 0x8f},
    {0x04, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0x0b, 0x8f},
    {0x07, 0x79, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x43, 0x9f},
    {0x02, 0x91, 0x43, 0xb5, 0xff},
    {0x05, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x0e, 0x6e},
    {0x04, 0x0f, 0x43, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x0e, 0x6e},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x41, 0xb5, 0xad},
    {0x01, 0x85, 0x43, 0xf5, 0xff},
    {0x02, 0x20, 0x41, 0xb5, 0xad},
    {0x06, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0x0b, 0x7f},
    {0x04, 0x85, 0x43, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x0b, 0x7f},
    {0x08, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3a, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0x4b, 0x7f},
    {0x02, 0x3a, 0x41, 0xb5, 0xad},
    {0x05, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc9, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0x4b, 0x7f},
    {0x02, 0x81, 0xc9, 0xb5, 0x0f},
    {0x0c, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0x0b, 0x7f},
    {0x01, 0x02, 0x44, 0x4b, 0x7f},
    {0x02, 0x0a, 0x44, 0x0b, 0x7f},
    {0x06, 0x46, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x43, 0x0e, 0x6e},
    {0x04, 0x02, 0x44, 0x4b, 0x7f},
    {0x02, 0x04, 0x43, 0x0e, 0x6e},
    {0x07, 0xc1, 0x0b, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x0e, 0x6e},
    {0x01, 0x07, 0x44, 0x4b, 0x7f},
    {0x02, 0x02, 0x43, 0x0e, 0x6e},
    {0x05, 0x46, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x43, 0x0e, 0x6e},
    {0x04, 0x07, 0x44, 0x4b, 0x7f},
    {0x02, 0x07, 0x43, 0x0e, 0x6e},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0x03, 0x9f},
    {0x01, 0x0d, 0x43, 0x43, 0x9f},
    {0x02, 0x16, 0x43, 0x03, 0x9f},
    {0x06, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x09, 0x6e},
    {0x04, 0x0d, 0x43, 0x43, 0x9f},
    {0x02, 0x03, 0x44, 0x09, 0x6e},
    {0x09, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x09, 0x7e},
    {0x01, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x0b, 0x42, 0x09, 0x7e},
    {0x05, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x09, 0x6e},
    {0x04, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x05, 0x44, 0x09, 0x6e},
    {0x0a, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x03, 0x9f},
    {0x01, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x03, 0x9f},
    {0x06, 0x48, 0x03, 0x03, 0x9f},
    {0x03, 0x09, 0x42, 0x09, 0x7e},
    {0x04, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x09, 0x7e},
    {0x07, 0x4a, 0x01, 0xf5, 0xad},
    {0x03, 0x8a, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x8a, 0x4b, 0xb5, 0xff},
    {0x05, 0x48, 0x03, 0x03, 0x9f},
    {0x03, 0x06, 0x44, 0x09, 0x6e},
    {0x04, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x06, 0x44, 0x09, 0x6e},
    {0x50, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x41, 0xb5, 0xad},
    {0x01, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x26, 0x41, 0xb5, 0xad},
    {0x06, 0xc3, 0x0b, 0xb5, 0xff},
    {0x03, 0x82, 0x46, 0x03, 0xbd},
    {0x04, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x03, 0xbd},
    {0x08, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x03, 0x9f},
    {0x01, 0x11, 0x43, 0x43, 0x9f},
    {0x02, 0x19, 0x43, 0x03, 0x9f},
    {0x05, 0xc3, 0x0b, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x0b, 0x8f},
    {0x04, 0x11, 0x43, 0x43, 0x9f},
    {0x02, 0x0f, 0x42, 0x0b, 0x8f},
    {0x40, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x4b, 0xb5, 0xff},
    {0x01, 0x84, 0x4b, 0xf5, 0xff},
    {0x02, 0x86, 0x4b, 0xb5, 0xff},
    {0x06, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x09, 0x6e},
    {0x04, 0x84, 0x4b, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x09, 0x6e},
    {0x07, 0x44, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x44, 0x09, 0x6e},
    {0x01, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x44, 0x09, 0x6e},
    {0x05, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x09, 0x6e},
    {0x04, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x44, 0x09, 0x6e},
    {0xc1, 0x41, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0x0b, 0x8f},
    {0x01, 0x01, 0x43, 0x43, 0x9f},
    {0x02, 0x0d, 0x42, 0x0b, 0x8f},
    {0x06, 0x4a, 0x03, 0x03, 0x9f},
    {0x03, 0x03, 0x42, 0x0e, 0x6e},
    {0x04, 0x01, 0x43, 0x43, 0x9f},
    {0x02, 0x03, 0x42, 0x0e, 0x6e},
    {0x09, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x03, 0x9f},
    {0x01, 0x08, 0x42, 0x4b, 0x8f},
    {0x02, 0x12, 0x43, 0x03, 0x9f},
    {0x05, 0x4a, 0x03, 0x03, 0x9f},
    {0x03, 0x05, 0x42, 0x0e, 0x6e},
    {0x04, 0x08, 0x42, 0x4b, 0x8f},
    {0x02, 0x05, 0x42, 0x0e, 0x6e},
    {0x0b, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x03, 0x9f},
    {0x01, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x15, 0x43, 0x03, 0x9f},
    {0x06, 0x44, 0x02, 0x0b, 0x8f},
    {0x03, 0x11, 0x42, 0x0b, 0x8f},
    {0x04, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x11, 0x42, 0x0b, 0x8f},
    {0x07, 0x42, 0x03, 0x43, 0x9f},
    {0x03, 0x84, 0x49, 0xb5, 0xee},
    {0x01, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x84, 0x49, 0xb5, 0xee},
    {0x05, 0x44, 0x02, 0x0b, 0x8f},
    {0x03, 0x06, 0x42, 0x0e, 0x6e},
    {0x04, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0e, 0x6e},
    {0x4e, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x42, 0x0b, 0x8f},
    {0x01, 0x0a, 0x42, 0x4b, 0x8f},
    {0x02, 0x01, 0x42, 0x0b, 0x8f},
    {0x06, 0x42, 0x02, 0x0b, 0x8f},
    {0x03, 0x08, 0x42, 0x09, 0x7e},
    {0x04, 0x0a, 0x42, 0x4b, 0x8f},
    {0x02, 0x08, 0x42, 0x09, 0x7e},
    {0x08, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x4e, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x83, 0x4e, 0xb5, 0xee},
    {0x05, 0x42, 0x02, 0x0b, 0x8f},
    {0x03, 0x81, 0x46, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x81, 0x46, 0x03, 0xbd},
    {0x0c, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x09, 0x7e},
    {0x01, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x0a, 0x42, 0x09, 0x7e},
    {0x06, 0x47, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x42, 0x0e, 0x6e},
    {0x04, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0x0e, 0x6e},
    {0x07, 0x47, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x0e, 0x6e},
    {0x01, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0x0e, 0x6e},
    {0x05, 0x47, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x42, 0x0e, 0x6e},
    {0x04, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0x0e, 0x6e},
    {0xf4, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x43, 0xb5, 0xff},
    {0x01, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0x43, 0xb5, 0xff},
    {0x06, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x4f, 0xb5, 0x6f},
    {0x04, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0x4f, 0xb5, 0x6f},
    {0x09, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x4f, 0xb5, 0x6f},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4f, 0xb5, 0x6f},
    {0x0a, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x5c, 0xb5, 0xff},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x5c, 0xb5, 0xff},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4f, 0xb5, 0x6f},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4f, 0xb5, 0x6f},
    {0x4d, 0x1c, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x53, 0xb5, 0xee},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x53, 0xb5, 0xee},
    {0x08, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x9a, 0xb5, 0x40, 0x0f},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0xda, 0xf5, 0x0f},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4f, 0xb5, 0x6f},
    {0x04, 0x9a, 0xda, 0xf5, 0x0f},
    {0x02, 0x04, 0x4f, 0xb5, 0x6f},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4f, 0xb5, 0x6f},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4f, 0xb5, 0x6f},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4f, 0xb5, 0x6f},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4f, 0xb5, 0x6f},
    {0x52, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x1c, 0x6f},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x1c, 0x6f},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x5c, 0xf5, 0xff},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x1c, 0x6f},
    {0x04, 0x82, 0x5c, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x1c, 0x6f},
    {0x0b, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x45, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x45, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x1c, 0x6f},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x1c, 0x6f},
    {0x51, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x81, 0x53, 0xb5, 0xee},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x53, 0xb5, 0xee},
    {0x0c, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x1c, 0x6f},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x1c, 0x6f},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x1c, 0x6f},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x1c, 0x6f},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x1c, 0x6f},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x1c, 0x6f},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x9a, 0x6f},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x9a, 0x6f},
    {0x09, 0xd7, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x43, 0x9a, 0x7f},
    {0x01, 0x03, 0x43, 0xda, 0x7f},
    {0x02, 0x0b, 0x43, 0x9a, 0x7f},
    {0x05, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x9a, 0x6f},
    {0x04, 0x03, 0x43, 0xda, 0x7f},
    {0x02, 0x05, 0x41, 0x9a, 0x6f},
    {0x0a, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x9a, 0xb5, 0x0f},
    {0x03, 0x09, 0x43, 0x9a, 0x7f},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x9a, 0x7f},
    {0x07, 0x5a, 0xb5, 0x40, 0xcc},
    {0x03, 0x87, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xda, 0x7f},
    {0x02, 0x87, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0x9a, 0xb5, 0x0f},
    {0x03, 0x06, 0x41, 0x9a, 0x6f},
    {0x04, 0x05, 0x43, 0xda, 0x7f},
    {0x02, 0x06, 0x41, 0x9a, 0x6f},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x48, 0xb5, 0xcc},
    {0x04, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0xb5, 0xcc},
    {0x08, 0xd7, 0xf5, 0x00, 0x0f},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x9a, 0x6f},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x9a, 0x6f},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x9a, 0x6f},
    {0x01, 0x06, 0x43, 0xda, 0x7f},
    {0x02, 0x02, 0x41, 0x9a, 0x6f},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x9a, 0x6f},
    {0x04, 0x06, 0x43, 0xda, 0x7f},
    {0x02, 0x07, 0x41, 0x9a, 0x6f},
    {0x85, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x1c, 0x6f},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x1c, 0x6f},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x43, 0xb5, 0xff},
    {0x05, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x1c, 0x6f},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x1c, 0x6f},
    {0x0b, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xcb, 0xb5, 0x40, 0x0e},
    {0x03, 0x94, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x5c, 0xf5, 0xff},
    {0x02, 0x94, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x1c, 0x6f},
    {0x04, 0x81, 0x5c, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x1c, 0x6f},
    {0x4e, 0x1c, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x9a, 0x7f},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x9a, 0x7f},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x5c, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xda, 0x7f},
    {0x02, 0x83, 0x5c, 0xb5, 0xff},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0xda, 0x7f},
    {0x02, 0x81, 0x48, 0xb5, 0xcc},
    {0x0c, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0x9a, 0x7f},
    {0x01, 0x02, 0x43, 0xda, 0x7f},
    {0x02, 0x0a, 0x43, 0x9a, 0x7f},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x1c, 0x6f},
    {0x04, 0x02, 0x43, 0xda, 0x7f},
    {0x02, 0x04, 0x42, 0x1c, 0x6f},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x1c, 0x6f},
    {0x01, 0x07, 0x43, 0xda, 0x7f},
    {0x02, 0x02, 0x42, 0x1c, 0x6f},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x1c, 0x6f},
    {0x04, 0x07, 0x43, 0xda, 0x7f},
    {0x02, 0x07, 0x42, 0x1c, 0x6f},
    {0xb4, 0x9a, 0xb5, 0x00, 0x0f},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x05, 0x6e},
    {0x04, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x05, 0x6e},
    {0x09, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x05, 0x7e},
    {0x01, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x0b, 0x41, 0x05, 0x7e},
    {0x05, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x05, 0x6e},
    {0x04, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x05, 0x46, 0x05, 0x6e},
    {0x0a, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x05, 0x8e},
    {0x01, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x0c, 0x43, 0x05, 0x8e},
    {0x06, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x09, 0x41, 0x05, 0x7e},
    {0x04, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x09, 0x41, 0x05, 0x7e},
    {0x07, 0x65, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x9a, 0x44, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x46, 0x05, 0x6e},
    {0x04, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x06, 0x46, 0x05, 0x6e},
    {0x4d, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x77, 0xb5, 0xff},
    {0x04, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x77, 0xb5, 0xff},
    {0x08, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x05, 0x8e},
    {0x04, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x0e, 0x43, 0x05, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x43, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x46, 0x05, 0x6e},
    {0x04, 0x88, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x05, 0x6e},
    {0x07, 0xc2, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x05, 0x6e},
    {0x01, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x46, 0x05, 0x6e},
    {0x05, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x46, 0x05, 0x6e},
    {0x04, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x46, 0x05, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x05, 0x8e},
    {0x04, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x05, 0x8e},
    {0x07, 0x59, 0xb5, 0x40, 0xcc},
    {0x03, 0x90, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x43, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x05, 0x7e},
    {0x04, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x05, 0x7e},
    {0x08, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x77, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x81, 0x77, 0xb5, 0xff},
    {0x0c, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x05, 0x7e},
    {0x01, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x0a, 0x41, 0x05, 0x7e},
    {0x06, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0x9a, 0x6f},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x9a, 0x6f},
    {0x09, 0xd3, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0x9a, 0x7f},
    {0x01, 0x03, 0x42, 0xda, 0x7f},
    {0x02, 0x0b, 0x42, 0x9a, 0x7f},
    {0x05, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0x9a, 0x6f},
    {0x04, 0x03, 0x42, 0xda, 0x7f},
    {0x02, 0x05, 0x44, 0x9a, 0x6f},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x9a, 0x7f},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x9a, 0x7f},
    {0x07, 0xc5, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x43, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xda, 0x7f},
    {0x02, 0x8c, 0x43, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x9a, 0x6f},
    {0x04, 0x05, 0x42, 0xda, 0x7f},
    {0x02, 0x06, 0x44, 0x9a, 0x6f},
    {0x84, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xd3, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x05, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x05, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x45, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0x9a, 0xb5, 0x0f},
    {0x03, 0x04, 0x44, 0x9a, 0x6f},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x9a, 0x6f},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x9a, 0x6f},
    {0x01, 0x06, 0x42, 0xda, 0x7f},
    {0x02, 0x02, 0x44, 0x9a, 0x6f},
    {0x05, 0xc1, 0x9a, 0xb5, 0x0f},
    {0x03, 0x07, 0x44, 0x9a, 0x6f},
    {0x04, 0x06, 0x42, 0xda, 0x7f},
    {0x02, 0x07, 0x44, 0x9a, 0x6f},
    {0x92, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x05, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x05, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0xda, 0xf5, 0x0f},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x11, 0x43, 0x05, 0x8e},
    {0x04, 0x83, 0xda, 0xf5, 0x0f},
    {0x02, 0x11, 0x43, 0x05, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0xda, 0xb5, 0x0f},
    {0x01, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x84, 0xda, 0xb5, 0x0f},
    {0x05, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0x05, 0x8e},
    {0x01, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x01, 0x43, 0x05, 0x8e},
    {0x06, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0x9a, 0x7f},
    {0x04, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0x9a, 0x7f},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xda, 0x7f},
    {0x02, 0x83, 0x44, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0xda, 0x7f},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x9a, 0x7f},
    {0x01, 0x02, 0x42, 0xda, 0x7f},
    {0x02, 0x0a, 0x42, 0x9a, 0x7f},
    {0x06, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0xda, 0x7f},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0xda, 0x7f},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0xda, 0x7f},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0xa5, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0xa5, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x03, 0x6f},
    {0x04, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x03, 0x6f},
    {0x09, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x45, 0x03, 0x7f},
    {0x01, 0x03, 0x45, 0x43, 0x7f},
    {0x02, 0x0b, 0x45, 0x03, 0x7f},
    {0x05, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x03, 0x6f},
    {0x04, 0x03, 0x45, 0x43, 0x7f},
    {0x02, 0x05, 0x47, 0x03, 0x6f},
    {0x0a, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x44, 0x03, 0x8f},
    {0x01, 0x0b, 0x44, 0x43, 0x8f},
    {0x02, 0x0c, 0x44, 0x03, 0x8f},
    {0x06, 0x43, 0x04, 0x03, 0x8f},
    {0x03, 0x09, 0x45, 0x03, 0x7f},
    {0x04, 0x0b, 0x44, 0x43, 0x8f},
    {0x02, 0x09, 0x45, 0x03, 0x7f},
    {0x07, 0x4d, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0xb5, 0xcc},
    {0x01, 0x05, 0x45, 0x43, 0x7f},
    {0x02, 0x9a, 0x42, 0xb5, 0xcc},
    {0x05, 0x43, 0x04, 0x03, 0x8f},
    {0x03, 0x06, 0x47, 0x03, 0x6f},
    {0x04, 0x05, 0x45, 0x43, 0x7f},
    {0x02, 0x06, 0x47, 0x03, 0x6f},
    {0x4d, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x14, 0x42, 0x03, 0x9f},
    {0x01, 0x0c, 0x42, 0x43, 0x9f},
    {0x02, 0x14, 0x42, 0x03, 0x9f},
    {0x06, 0x4b, 0x02, 0x03, 0x9f},
    {0x03, 0x82, 0x4a, 0xb5, 0xcc},
    {0x04, 0x0c, 0x42, 0x43, 0x9f},
    {0x02, 0x82, 0x4a, 0xb5, 0xcc},
    {0x08, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x42, 0x03, 0x9f},
    {0x01, 0x09, 0x44, 0x43, 0x8f},
    {0x02, 0x18, 0x42, 0x03, 0x9f},
    {0x05, 0x4b, 0x02, 0x03, 0x9f},
    {0x03, 0x0e, 0x44, 0x03, 0x8f},
    {0x04, 0x09, 0x44, 0x43, 0x8f},
    {0x02, 0x0e, 0x44, 0x03, 0x8f},
    {0x4f, 0x06, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0x03, 0x9f},
    {0x01, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0x03, 0x9f},
    {0x06, 0x45, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x47, 0x03, 0x6f},
    {0x04, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0x03, 0x6f},
    {0x07, 0x43, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x47, 0x03, 0x6f},
    {0x01, 0x06, 0x45, 0x43, 0x7f},
    {0x02, 0x02, 0x47, 0x03, 0x6f},
    {0x05, 0x45, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x47, 0x03, 0x6f},
    {0x04, 0x06, 0x45, 0x43, 0x7f},
    {0x02, 0x07, 0x47, 0x03, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x03, 0x9f},
    {0x01, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x03, 0x9f},
    {0x06, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x03, 0x9f},
    {0x01, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x1b, 0x42, 0x03, 0x9f},
    {0x05, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x03, 0x9f},
    {0x03, 0x10, 0x44, 0x03, 0x8f},
    {0x04, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x03, 0x8f},
    {0x07, 0x52, 0xb5, 0x40, 0xcc},
    {0x03, 0x8e, 0x43, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x43, 0x9f},
    {0x02, 0x8e, 0x43, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x03, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x03, 0x9f},
    {0x01, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x03, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x03, 0x7f},
    {0x04, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x03, 0x7f},
    {0x08, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x43, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0xb5, 0xcc},
    {0x04, 0x04, 0x45, 0x43, 0x7f},
    {0x02, 0x81, 0x4a, 0xb5, 0xcc},
    {0x0c, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x45, 0x03, 0x7f},
    {0x01, 0x02, 0x45, 0x43, 0x7f},
    {0x02, 0x0a, 0x45, 0x03, 0x7f},
    {0x06, 0x46, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x43, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x43, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x43, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x06, 0x6d},
    {0x04, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x06, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x06, 0x7d},
    {0x01, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x0b, 0x43, 0x06, 0x7d},
    {0x05, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x06, 0x6d},
    {0x04, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x05, 0x41, 0x06, 0x6d},
    {0x0a, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x06, 0x7d},
    {0x04, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x06, 0x7d},
    {0x07, 0x55, 0xb5, 0x40, 0xcc},
    {0x03, 0x88, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x88, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x06, 0x6d},
    {0x04, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x06, 0x41, 0x06, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x03, 0xbd},
    {0x04, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x03, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x43, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x03, 0x8f},
    {0x04, 0x10, 0x42, 0x43, 0x9f},
    {0x02, 0x0f, 0x44, 0x03, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x06, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x06, 0x6d},
    {0x07, 0x51, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x06, 0x6d},
    {0x01, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x41, 0x06, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x06, 0x6d},
    {0x04, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x41, 0x06, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x03, 0x8f},
    {0x01, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x03, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x43, 0xb5, 0xff},
    {0x03, 0x9b, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x43, 0x8f},
    {0x02, 0x9b, 0x43, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x43, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x03, 0x8f},
    {0x03, 0x11, 0x44, 0x03, 0x8f},
    {0x04, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x03, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x96, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x03, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x44, 0x03, 0x8f},
    {0x01, 0x0a, 0x44, 0x43, 0x8f},
    {0x02, 0x01, 0x44, 0x03, 0x8f},
    {0x06, 0x42, 0x04, 0x03, 0x8f},
    {0x03, 0x08, 0x43, 0x06, 0x7d},
    {0x04, 0x0a, 0x44, 0x43, 0x8f},
    {0x02, 0x08, 0x43, 0x06, 0x7d},
    {0x08, 0xc1, 0x43, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0xb5, 0xcc},
    {0x01, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x83, 0x42, 0xb5, 0xcc},
    {0x05, 0x42, 0x04, 0x03, 0x8f},
    {0x03, 0x81, 0x44, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x81, 0x44, 0x03, 0xbd},
    {0x0c, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x06, 0x7d},
    {0x01, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x0a, 0x43, 0x06, 0x7d},
    {0x06, 0x47, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x05, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x05, 0x6e},
    {0x09, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x05, 0x7e},
    {0x01, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x0b, 0x44, 0x05, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x05, 0x6e},
    {0x04, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x05, 0x45, 0x05, 0x6e},
    {0x0a, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x05, 0x8e},
    {0x01, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x0c, 0x42, 0x05, 0x8e},
    {0x06, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x09, 0x44, 0x05, 0x7e},
    {0x04, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x09, 0x44, 0x05, 0x7e},
    {0x07, 0x41, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x9a, 0x47, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x45, 0x05, 0x6e},
    {0x04, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x06, 0x45, 0x05, 0x6e},
    {0x4d, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x03, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x03, 0xbd},
    {0x08, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x05, 0x8e},
    {0x04, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x0e, 0x42, 0x05, 0x8e},
    {0x53, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x43, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x45, 0x05, 0x6e},
    {0x04, 0x8a, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x05, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x05, 0x6e},
    {0x01, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x45, 0x05, 0x6e},
    {0x05, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x45, 0x05, 0x6e},
    {0x04, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x45, 0x05, 0x6e},
    {0x58, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x05, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x05, 0x8e},
    {0x07, 0xc3, 0x03, 0xf5, 0xff},
    {0x03, 0x92, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x43, 0x9f},
    {0x02, 0x92, 0x43, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x43, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x03, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x05, 0x7e},
    {0x04, 0x86, 0x43, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x05, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x03, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x03, 0xbd},
    {0x04, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x81, 0x42, 0x03, 0xbd},
    {0x0c, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x05, 0x7e},
    {0x01, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x0a, 0x44, 0x05, 0x7e},
    {0x06, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0x03, 0x9f},
    {0x01, 0x0d, 0x42, 0x43, 0x9f},
    {0x02, 0x16, 0x42, 0x03, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x06, 0x6d},
    {0x04, 0x0d, 0x42, 0x43, 0x9f},
    {0x02, 0x03, 0x44, 0x06, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x06, 0x7d},
    {0x01, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x0b, 0x42, 0x06, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x06, 0x6d},
    {0x04, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x05, 0x44, 0x06, 0x6d},
    {0x0a, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x03, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x03, 0x9f},
    {0x06, 0x48, 0x02, 0x03, 0x9f},
    {0x03, 0x09, 0x42, 0x06, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x06, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x8a, 0x45, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x03, 0x9f},
    {0x03, 0x06, 0x44, 0x06, 0x6d},
    {0x04, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x06, 0x44, 0x06, 0x6d},
    {0x50, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x03, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x03, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x03, 0x9f},
    {0x01, 0x11, 0x42, 0x43, 0x9f},
    {0x02, 0x19, 0x42, 0x03, 0x9f},
    {0x05, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x05, 0x8e},
    {0x04, 0x11, 0x42, 0x43, 0x9f},
    {0x02, 0x0f, 0x42, 0x05, 0x8e},
    {0x40, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x45, 0xb5, 0xee},
    {0x01, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x86, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x06, 0x6d},
    {0x04, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x06, 0x6d},
    {0x07, 0x44, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x44, 0x06, 0x6d},
    {0x01, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x44, 0x06, 0x6d},
    {0x05, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x06, 0x6d},
    {0x04, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x44, 0x06, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x05, 0x8e},
    {0x01, 0x01, 0x42, 0x43, 0x9f},
    {0x02, 0x0d, 0x42, 0x05, 0x8e},
    {0x06, 0x4a, 0x02, 0x03, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x43, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x03, 0x9f},
    {0x01, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x12, 0x42, 0x03, 0x9f},
    {0x05, 0x4a, 0x02, 0x03, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x03, 0x9f},
    {0x01, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0x03, 0x9f},
    {0x06, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x11, 0x42, 0x05, 0x8e},
    {0x04, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x05, 0x8e},
    {0x07, 0x42, 0x02, 0x43, 0x9f},
    {0x03, 0x84, 0x46, 0xb5, 0xdd},
    {0x01, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x84, 0x46, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x05, 0x8e},
    {0x01, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x01, 0x42, 0x05, 0x8e},
    {0x06, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0x06, 0x7d},
    {0x04, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0x06, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x83, 0x47, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x81, 0x47, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x81, 0x47, 0x03, 0xbd},
    {0x0c, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x06, 0x7d},
    {0x01, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x0a, 0x42, 0x06, 0x7d},
    {0x06, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xb4, 0xf5, 0x00, 0x0d},
    {0x01, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0xb4, 0xf5, 0x00, 0x0d},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4d, 0xb5, 0x7f},
    {0x01, 0x03, 0x4d, 0xf5, 0x7f},
    {0x02, 0x0b, 0x4d, 0xb5, 0x7f},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x4d, 0xf5, 0x7f},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x4a, 0xb5, 0x8f},
    {0x01, 0x0b, 0x4a, 0xf5, 0x8f},
    {0x02, 0x0c, 0x4a, 0xb5, 0x8f},
    {0x06, 0x43, 0x0a, 0xb5, 0x8f},
    {0x03, 0x09, 0x4d, 0xb5, 0x7f},
    {0x04, 0x0b, 0x4a, 0xf5, 0x8f},
    {0x02, 0x09, 0x4d, 0xb5, 0x7f},
    {0x07, 0xf5, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0x57, 0xb5, 0xff},
    {0x01, 0x05, 0x4d, 0xf5, 0x7f},
    {0x02, 0x9a, 0x57, 0xb5, 0xff},
    {0x05, 0x43, 0x0a, 0xb5, 0x8f},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x4d, 0xf5, 0x7f},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x17, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x49, 0xb5, 0x9f},
    {0x01, 0x0c, 0x49, 0xf5, 0x9f},
    {0x02, 0x14, 0x49, 0xb5, 0x9f},
    {0x06, 0x4b, 0x09, 0xb5, 0x9f},
    {0x03, 0x82, 0x6d, 0xb5, 0xff},
    {0x04, 0x0c, 0x49, 0xf5, 0x9f},
    {0x02, 0x82, 0x6d, 0xb5, 0xff},
    {0x08, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x49, 0xb5, 0x9f},
    {0x01, 0x09, 0x4a, 0xf5, 0x8f},
    {0x02, 0x18, 0x49, 0xb5, 0x9f},
    {0x05, 0x4b, 0x09, 0xb5, 0x9f},
    {0x03, 0x0e, 0x4a, 0xb5, 0x8f},
    {0x04, 0x09, 0x4a, 0xf5, 0x8f},
    {0x02, 0x0e, 0x4a, 0xb5, 0x8f},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x49, 0xb5, 0x9f},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x49, 0xb5, 0x9f},
    {0x06, 0x45, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x4d, 0xf5, 0x7f},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x4d, 0xf5, 0x7f},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x49, 0xb5, 0x9f},
    {0x01, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x17, 0x49, 0xb5, 0x9f},
    {0x06, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x43, 0x17, 0x6f},
    {0x04, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x43, 0x17, 0x6f},
    {0x09, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x1b, 0x49, 0xb5, 0x9f},
    {0x01, 0x82, 0x57, 0xf5, 0xff},
    {0x02, 0x1b, 0x49, 0xb5, 0x9f},
    {0x05, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x43, 0x17, 0x6f},
    {0x04, 0x82, 0x57, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x17, 0x6f},
    {0x0b, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x46, 0xb5, 0xae},
    {0x01, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x27, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x09, 0xb5, 0x9f},
    {0x03, 0x10, 0x4a, 0xb5, 0x8f},
    {0x04, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x4a, 0xb5, 0x8f},
    {0x07, 0x4b, 0x06, 0xf5, 0xae},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x49, 0xf5, 0x9f},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x09, 0xb5, 0x9f},
    {0x03, 0x06, 0x43, 0x17, 0x6f},
    {0x04, 0x0e, 0x49, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0x17, 0x6f},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x49, 0xb5, 0x9f},
    {0x01, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x13, 0x49, 0xb5, 0x9f},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x4d, 0xb5, 0x7f},
    {0x04, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x08, 0x4d, 0xb5, 0x7f},
    {0x08, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x37, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x4d, 0xf5, 0x7f},
    {0x02, 0x37, 0x46, 0xb5, 0xae},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x6d, 0xb5, 0xff},
    {0x04, 0x04, 0x4d, 0xf5, 0x7f},
    {0x02, 0x81, 0x6d, 0xb5, 0xff},
    {0x0c, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x4d, 0xb5, 0x7f},
    {0x01, 0x02, 0x4d, 0xf5, 0x7f},
    {0x02, 0x0a, 0x4d, 0xb5, 0x7f},
    {0x06, 0x46, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0x43, 0x17, 0x6f},
    {0x04, 0x02, 0x4d, 0xf5, 0x7f},
    {0x02, 0x04, 0x43, 0x17, 0x6f},
    {0x07, 0x45, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x43, 0x17, 0x6f},
    {0x01, 0x07, 0x4d, 0xf5, 0x7f},
    {0x02, 0x02, 0x43, 0x17, 0x6f},
    {0x05, 0x46, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0x43, 0x17, 0x6f},
    {0x04, 0x07, 0x4d, 0xf5, 0x7f},
    {0x02, 0x07, 0x43, 0x17, 0x6f},
    {0xdc, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x46, 0xb5, 0xae},
    {0x01, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x2d, 0x46, 0xb5, 0xae},
    {0x06, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x35, 0x46, 0xb5, 0xae},
    {0x01, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x35, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x01, 0xf5, 0xbe},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x46, 0xb5, 0xae},
    {0x01, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x46, 0xb5, 0xae},
    {0x06, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x43, 0x01, 0xbe},
    {0x04, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x43, 0x01, 0xbe},
    {0x08, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x33, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x49, 0xf5, 0x9f},
    {0x02, 0x33, 0x46, 0xb5, 0xae},
    {0x05, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x4a, 0xb5, 0x8f},
    {0x04, 0x10, 0x49, 0xf5, 0x9f},
    {0x02, 0x0f, 0x4a, 0xb5, 0x8f},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x46, 0xb5, 0xae},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x46, 0xb5, 0xae},
    {0x06, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x4a, 0xb5, 0x8f},
    {0x01, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x0d, 0x4a, 0xb5, 0x8f},
    {0x06, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x42, 0x17, 0x6f},
    {0x04, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x42, 0x17, 0x6f},
    {0x09, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x4a, 0xf5, 0x8f},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x42, 0x17, 0x6f},
    {0x04, 0x08, 0x4a, 0xf5, 0x8f},
    {0x02, 0x05, 0x42, 0x17, 0x6f},
    {0x0b, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x2b, 0x46, 0xb5, 0xae},
    {0x01, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x0a, 0xb5, 0x8f},
    {0x03, 0x11, 0x4a, 0xb5, 0x8f},
    {0x04, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x4a, 0xb5, 0x8f},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x57, 0xf5, 0xff},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x0a, 0xb5, 0x8f},
    {0x03, 0x06, 0x42, 0x17, 0x6f},
    {0x04, 0x81, 0x57, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x17, 0x6f},
    {0x4e, 0x17, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x4a, 0xb5, 0x8f},
    {0x01, 0x0a, 0x4a, 0xf5, 0x8f},
    {0x02, 0x01, 0x4a, 0xb5, 0x8f},
    {0x06, 0x42, 0x0a, 0xb5, 0x8f},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x4a, 0xf5, 0x8f},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x57, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x57, 0xb5, 0xff},
    {0x05, 0x42, 0x0a, 0xb5, 0x8f},
    {0x03, 0x81, 0x43, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x01, 0xbe},
    {0x0c, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0x42, 0x17, 0x6f},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x17, 0x6f},
    {0x07, 0x46, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0x17, 0x6f},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x17, 0x6f},
    {0x05, 0x47, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0x42, 0x17, 0x6f},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x17, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x46, 0xb5, 0xae},
    {0x01, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x46, 0xb5, 0xae},
    {0x06, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x43, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x46, 0xb5, 0xae},
    {0x01, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x46, 0xb5, 0xae},
    {0x06, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x4b, 0x03, 0xce},
    {0x04, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4b, 0x03, 0xce},
    {0x08, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x31, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x46, 0xb5, 0xae},
    {0x05, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x46, 0xb5, 0xae},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x46, 0xb5, 0xae},
    {0x01, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x46, 0xb5, 0xae},
    {0x06, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x3b, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x3b, 0x46, 0xb5, 0xae},
    {0x05, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x29, 0x46, 0xb5, 0xae},
    {0x01, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x46, 0xb5, 0xae},
    {0x06, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x03, 0xf5, 0xce},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x49, 0xf5, 0x9f},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0x49, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x46, 0xb5, 0xae},
    {0x01, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x46, 0xb5, 0xae},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x39, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x46, 0xb5, 0xae},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x03, 0xce},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x03, 0xce},
    {0x0c, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x49, 0xb5, 0x9f},
    {0x01, 0x0d, 0x49, 0xf5, 0x9f},
    {0x02, 0x16, 0x49, 0xb5, 0x9f},
    {0x06, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x49, 0xf5, 0x9f},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x49, 0xb5, 0x9f},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x49, 0xb5, 0x9f},
    {0x06, 0x48, 0x09, 0xb5, 0x9f},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0x03, 0xf5, 0xce},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x09, 0xb5, 0x9f},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x46, 0xb5, 0xae},
    {0x01, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x46, 0xb5, 0xae},
    {0x06, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x01, 0xbe},
    {0x04, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x45, 0x01, 0xbe},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0x49, 0xb5, 0x9f},
    {0x01, 0x11, 0x49, 0xf5, 0x9f},
    {0x02, 0x19, 0x49, 0xb5, 0x9f},
    {0x05, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x49, 0xf5, 0x9f},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x49, 0xf5, 0x9f},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x09, 0xb5, 0x9f},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0x49, 0xf5, 0x9f},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x49, 0xb5, 0x9f},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x49, 0xb5, 0x9f},
    {0x05, 0x4a, 0x09, 0xb5, 0x9f},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x49, 0xb5, 0x9f},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x49, 0xb5, 0x9f},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x09, 0xf5, 0x9f},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x43, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x01, 0xbe},
    {0x0c, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9f, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x9f, 0xf5, 0x00, 0x0e},
    {0x06, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x5b, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x5b, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x1b, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x75, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x75, 0xb5, 0xff},
    {0x08, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x82, 0xb5, 0x40, 0x0e},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x1b, 0x6f},
    {0x04, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x1b, 0x6f},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x5b, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x1b, 0x6f},
    {0x04, 0x82, 0x5b, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x1b, 0x6f},
    {0x0b, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x46, 0xb5, 0xae},
    {0x01, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x03, 0xf5, 0xce},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x1b, 0x6f},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x1b, 0x6f},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x46, 0xb5, 0xae},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x75, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x75, 0xb5, 0xff},
    {0x0c, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x1b, 0x6f},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x1b, 0x6f},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x1b, 0x6f},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x1b, 0x6f},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x1b, 0x6f},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x1b, 0x6f},
    {0xe1, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x46, 0xb5, 0xae},
    {0x01, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x46, 0xb5, 0xae},
    {0x06, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x82, 0x6e},
    {0x04, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x82, 0x6e},
    {0x09, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x82, 0x7e},
    {0x01, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x0b, 0x43, 0x82, 0x7e},
    {0x05, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x82, 0x6e},
    {0x04, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x05, 0x41, 0x82, 0x6e},
    {0x0a, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x36, 0x46, 0xb5, 0xae},
    {0x01, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x09, 0x43, 0x82, 0x7e},
    {0x04, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x82, 0x7e},
    {0x07, 0x68, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x06, 0x41, 0x82, 0x6e},
    {0x04, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x06, 0x41, 0x82, 0x6e},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x46, 0xb5, 0xae},
    {0x01, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x46, 0xb5, 0xae},
    {0x06, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x49, 0x03, 0xce},
    {0x04, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x49, 0x03, 0xce},
    {0x08, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x46, 0xb5, 0xae},
    {0x05, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x46, 0xb5, 0xae},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x46, 0xb5, 0xae},
    {0x06, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x82, 0x6e},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x82, 0x6e},
    {0x07, 0x50, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x82, 0x6e},
    {0x01, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x41, 0x82, 0x6e},
    {0x05, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x82, 0x6e},
    {0x04, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x41, 0x82, 0x6e},
    {0xc6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x1b, 0x6f},
    {0x04, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0x1b, 0x6f},
    {0x09, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x1b, 0x6f},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x1b, 0x6f},
    {0x0b, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x2c, 0x46, 0xb5, 0xae},
    {0x01, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xcd, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x5b, 0xf5, 0xff},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x1b, 0x6f},
    {0x04, 0x81, 0x5b, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x1b, 0x6f},
    {0x4e, 0x1b, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x82, 0x7e},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x82, 0x7e},
    {0x08, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0x5b, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x83, 0x5b, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x81, 0x49, 0x03, 0xce},
    {0x0c, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x82, 0x7e},
    {0x01, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x0a, 0x43, 0x82, 0x7e},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x1b, 0x6f},
    {0x04, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0x1b, 0x6f},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x1b, 0x6f},
    {0x01, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0x1b, 0x6f},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x1b, 0x6f},
    {0x04, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0x1b, 0x6f},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0x1e, 0x46, 0xb5, 0xae},
    {0x01, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x1e, 0x46, 0xb5, 0xae},
    {0x06, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x45, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x46, 0xb5, 0xae},
    {0x01, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x22, 0x46, 0xb5, 0xae},
    {0x06, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc7, 0xb5, 0x0f},
    {0x04, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0xc7, 0xb5, 0x0f},
    {0x08, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x46, 0xb5, 0xae},
    {0x05, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x46, 0xb5, 0xae},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x46, 0xb5, 0xae},
    {0x01, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x46, 0xb5, 0xae},
    {0x06, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3c, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x3c, 0x46, 0xb5, 0xae},
    {0x05, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x46, 0xb5, 0xae},
    {0x01, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x2a, 0x46, 0xb5, 0xae},
    {0x06, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x78, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x46, 0xb5, 0xae},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x46, 0xb5, 0xae},
    {0x06, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3a, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x46, 0xb5, 0xae},
    {0x05, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc7, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xc7, 0xb5, 0x0f},
    {0x0c, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x44, 0x82, 0x6e},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x82, 0x6e},
    {0x09, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x0b, 0x42, 0x82, 0x7e},
    {0x01, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x0b, 0x42, 0x82, 0x7e},
    {0x05, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x44, 0x82, 0x6e},
    {0x04, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x05, 0x44, 0x82, 0x6e},
    {0x0a, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x82, 0x7e},
    {0x04, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x42, 0x82, 0x7e},
    {0x07, 0x4a, 0x06, 0xf5, 0xae},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x82, 0x6e},
    {0x04, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x06, 0x44, 0x82, 0x6e},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x46, 0xb5, 0xae},
    {0x01, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x26, 0x46, 0xb5, 0xae},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x01, 0xbe},
    {0x04, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0x46, 0x01, 0xbe},
    {0x08, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x04, 0x44, 0x82, 0x6e},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x82, 0x6e},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x82, 0x6e},
    {0x01, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x44, 0x82, 0x6e},
    {0x05, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x07, 0x44, 0x82, 0x6e},
    {0x04, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x44, 0x82, 0x6e},
    {0xc1, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0xc2, 0xb5, 0x0e},
    {0x01, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x84, 0xc2, 0xb5, 0x0e},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x82, 0x7e},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x82, 0x7e},
    {0x08, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x45, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x83, 0x45, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x81, 0x46, 0x01, 0xbe},
    {0x0c, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x82, 0x7e},
    {0x01, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x0a, 0x42, 0x82, 0x7e},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa1, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4b, 0xb5, 0x6d},
    {0x04, 0xa1, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4b, 0xb5, 0x6d},
    {0x09, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x48, 0xb5, 0x7d},
    {0x01, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x0b, 0x48, 0xb5, 0x7d},
    {0x05, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4b, 0xb5, 0x6d},
    {0x04, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x05, 0x4b, 0xb5, 0x6d},
    {0x0a, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x48, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x48, 0xb5, 0x7d},
    {0x07, 0x6e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4b, 0xb5, 0x6d},
    {0x04, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x06, 0x4b, 0xb5, 0x6d},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x63, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x63, 0xb5, 0xff},
    {0x08, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4b, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4b, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4b, 0xb5, 0x6d},
    {0x01, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x4b, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4b, 0xb5, 0x6d},
    {0x04, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x4b, 0xb5, 0x6d},
    {0x52, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x49, 0xb5, 0xff},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x49, 0xb5, 0xff},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x09, 0xb5, 0xff},
    {0x03, 0x08, 0x48, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x48, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x09, 0xb5, 0xff},
    {0x03, 0x81, 0x63, 0xb5, 0xff},
    {0x04, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x81, 0x63, 0xb5, 0xff},
    {0x0c, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x48, 0xb5, 0x7d},
    {0x01, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x0a, 0x48, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdf, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x76, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0x49, 0xb5, 0xff},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x9b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc8, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x09, 0x6f},
    {0x04, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0x09, 0x6f},
    {0x09, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x09, 0x7f},
    {0x01, 0x03, 0x41, 0x49, 0x7f},
    {0x02, 0x0b, 0x41, 0x09, 0x7f},
    {0x05, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x09, 0x6f},
    {0x04, 0x03, 0x41, 0x49, 0x7f},
    {0x02, 0x05, 0x46, 0x09, 0x6f},
    {0x0a, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x09, 0x8f},
    {0x01, 0x0b, 0x43, 0x49, 0x8f},
    {0x02, 0x0c, 0x43, 0x09, 0x8f},
    {0x06, 0x43, 0x03, 0x09, 0x8f},
    {0x03, 0x09, 0x41, 0x09, 0x7f},
    {0x04, 0x0b, 0x43, 0x49, 0x8f},
    {0x02, 0x09, 0x41, 0x09, 0x7f},
    {0x07, 0x64, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x50, 0xb5, 0xee},
    {0x01, 0x05, 0x41, 0x49, 0x7f},
    {0x02, 0x9a, 0x50, 0xb5, 0xee},
    {0x05, 0x43, 0x03, 0x09, 0x8f},
    {0x03, 0x06, 0x46, 0x09, 0x6f},
    {0x04, 0x05, 0x41, 0x49, 0x7f},
    {0x02, 0x06, 0x46, 0x09, 0x6f},
    {0x4d, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x73, 0xb5, 0xff},
    {0x04, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x73, 0xb5, 0xff},
    {0x08, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x49, 0x8f},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x09, 0x8f},
    {0x04, 0x09, 0x43, 0x49, 0x8f},
    {0x02, 0x0e, 0x43, 0x09, 0x8f},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x46, 0x09, 0x6f},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x09, 0x6f},
    {0x07, 0xc2, 0x09, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x09, 0x6f},
    {0x01, 0x06, 0x41, 0x49, 0x7f},
    {0x02, 0x02, 0x46, 0x09, 0x6f},
    {0x05, 0x45, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x46, 0x09, 0x6f},
    {0x04, 0x06, 0x41, 0x49, 0x7f},
    {0x02, 0x07, 0x46, 0x09, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x10, 0x6e},
    {0x04, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x10, 0x6e},
    {0x09, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x10, 0x6e},
    {0x04, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x10, 0x6e},
    {0x0b, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x09, 0x8f},
    {0x04, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0x09, 0x8f},
    {0x07, 0x74, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x10, 0x6e},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x10, 0x6e},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x09, 0x7f},
    {0x04, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0x09, 0x7f},
    {0x08, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x49, 0x7f},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x73, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x49, 0x7f},
    {0x02, 0x81, 0x73, 0xb5, 0xff},
    {0x0c, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x09, 0x7f},
    {0x01, 0x02, 0x41, 0x49, 0x7f},
    {0x02, 0x0a, 0x41, 0x09, 0x7f},
    {0x06, 0x46, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x43, 0x10, 0x6e},
    {0x04, 0x02, 0x41, 0x49, 0x7f},
    {0x02, 0x04, 0x43, 0x10, 0x6e},
    {0x07, 0x4f, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x10, 0x6e},
    {0x01, 0x07, 0x41, 0x49, 0x7f},
    {0x02, 0x02, 0x43, 0x10, 0x6e},
    {0x05, 0x46, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x43, 0x10, 0x6e},
    {0x04, 0x07, 0x41, 0x49, 0x7f},
    {0x02, 0x07, 0x43, 0x10, 0x6e},
    {0xde, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcf, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x40, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x4f, 0xb5, 0xdd},
    {0x04, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4f, 0xb5, 0xdd},
    {0x08, 0xcf, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x09, 0x8f},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x09, 0x8f},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x49, 0xb5, 0xff},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x49, 0xb5, 0xff},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x91, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x09, 0x8f},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x09, 0x8f},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x10, 0x6e},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x10, 0x6e},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x49, 0x8f},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x10, 0x6e},
    {0x04, 0x08, 0x43, 0x49, 0x8f},
    {0x02, 0x05, 0x42, 0x10, 0x6e},
    {0x0b, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x09, 0x8f},
    {0x03, 0x11, 0x43, 0x09, 0x8f},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x09, 0x8f},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x09, 0x8f},
    {0x03, 0x06, 0x42, 0x10, 0x6e},
    {0x04, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x10, 0x6e},
    {0x4e, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x43, 0x09, 0x8f},
    {0x01, 0x0a, 0x43, 0x49, 0x8f},
    {0x02, 0x01, 0x43, 0x09, 0x8f},
    {0x06, 0x42, 0x03, 0x09, 0x8f},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0x49, 0x8f},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x50, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x50, 0xb5, 0xee},
    {0x05, 0x42, 0x03, 0x09, 0x8f},
    {0x03, 0x81, 0x4f, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4f, 0xb5, 0xdd},
    {0x0c, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x42, 0x10, 0x6e},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x10, 0x6e},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x10, 0x6e},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x10, 0x6e},
    {0x05, 0x47, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x42, 0x10, 0x6e},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x10, 0x6e},
    {0xf4, 0x49, 0xf5, 0x40, 0x0f},
    {0x03, 0x9e, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x9e, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x7f, 0xb5, 0xff},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x7f, 0xb5, 0xff},
    {0x08, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x0e, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x4e, 0xf5, 0xff},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x4e, 0xf5, 0xff},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8d, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd9, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7f, 0xb5, 0xff},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x7f, 0xb5, 0xff},
    {0x0c, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x0e, 0x6f},
    {0x04, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x0e, 0x6f},
    {0x09, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x0e, 0x7f},
    {0x01, 0x03, 0x43, 0x4e, 0x7f},
    {0x02, 0x0b, 0x43, 0x0e, 0x7f},
    {0x05, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x0e, 0x6f},
    {0x04, 0x03, 0x43, 0x4e, 0x7f},
    {0x02, 0x05, 0x41, 0x0e, 0x6f},
    {0x0a, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0e, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0e, 0x7f},
    {0x04, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x0e, 0x7f},
    {0x07, 0x6c, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x4e, 0x7f},
    {0x02, 0x88, 0x49, 0xb5, 0xff},
    {0x05, 0xc2, 0x0e, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0e, 0x6f},
    {0x04, 0x05, 0x43, 0x4e, 0x7f},
    {0x02, 0x06, 0x41, 0x0e, 0x6f},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x44, 0x01, 0xbe},
    {0x04, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x44, 0x01, 0xbe},
    {0x08, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0e, 0x6f},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0e, 0x6f},
    {0x07, 0x51, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x0e, 0x6f},
    {0x01, 0x06, 0x43, 0x4e, 0x7f},
    {0x02, 0x02, 0x41, 0x0e, 0x6f},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0e, 0x6f},
    {0x04, 0x06, 0x43, 0x4e, 0x7f},
    {0x02, 0x07, 0x41, 0x0e, 0x6f},
    {0x89, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd5, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x0e, 0x7f},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x0e, 0x7f},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x4e, 0x7f},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0x4e, 0x7f},
    {0x02, 0x81, 0x44, 0x01, 0xbe},
    {0x0c, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x0e, 0x7f},
    {0x01, 0x02, 0x43, 0x4e, 0x7f},
    {0x02, 0x0a, 0x43, 0x0e, 0x7f},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x4e, 0x7f},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x4e, 0x7f},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x4e, 0x7f},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x09, 0x6f},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x09, 0x6f},
    {0x09, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x44, 0x09, 0x7f},
    {0x01, 0x03, 0x44, 0x49, 0x7f},
    {0x02, 0x0b, 0x44, 0x09, 0x7f},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x09, 0x6f},
    {0x04, 0x03, 0x44, 0x49, 0x7f},
    {0x02, 0x05, 0x45, 0x09, 0x6f},
    {0x0a, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0c, 0x42, 0x09, 0x8f},
    {0x01, 0x0b, 0x42, 0x49, 0x8f},
    {0x02, 0x0c, 0x42, 0x09, 0x8f},
    {0x06, 0x43, 0x02, 0x09, 0x8f},
    {0x03, 0x09, 0x44, 0x09, 0x7f},
    {0x04, 0x0b, 0x42, 0x49, 0x8f},
    {0x02, 0x09, 0x44, 0x09, 0x7f},
    {0x07, 0x41, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0x46, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0x49, 0x7f},
    {0x02, 0x9a, 0x46, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0x09, 0x8f},
    {0x03, 0x06, 0x45, 0x09, 0x6f},
    {0x04, 0x05, 0x44, 0x49, 0x7f},
    {0x02, 0x06, 0x45, 0x09, 0x6f},
    {0x4d, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x42, 0x01, 0xbe},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x01, 0xbe},
    {0x08, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x49, 0x8f},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x42, 0x09, 0x8f},
    {0x04, 0x09, 0x42, 0x49, 0x8f},
    {0x02, 0x0e, 0x42, 0x09, 0x8f},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x45, 0x09, 0x6f},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x09, 0x6f},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x09, 0x6f},
    {0x01, 0x06, 0x44, 0x49, 0x7f},
    {0x02, 0x02, 0x45, 0x09, 0x6f},
    {0x05, 0x45, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x45, 0x09, 0x6f},
    {0x04, 0x06, 0x44, 0x49, 0x7f},
    {0x02, 0x07, 0x45, 0x09, 0x6f},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x09, 0x8f},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x09, 0x8f},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x09, 0x7f},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x09, 0x7f},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x49, 0x7f},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x01, 0xbe},
    {0x04, 0x04, 0x44, 0x49, 0x7f},
    {0x02, 0x81, 0x42, 0x01, 0xbe},
    {0x0c, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x44, 0x09, 0x7f},
    {0x01, 0x02, 0x44, 0x49, 0x7f},
    {0x02, 0x0a, 0x44, 0x09, 0x7f},
    {0x06, 0x46, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x49, 0x7f},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x09, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x49, 0x7f},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x49, 0x7f},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x0e, 0x6f},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x0e, 0x6f},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x0e, 0x7f},
    {0x01, 0x03, 0x42, 0x4e, 0x7f},
    {0x02, 0x0b, 0x42, 0x0e, 0x7f},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x0e, 0x6f},
    {0x04, 0x03, 0x42, 0x4e, 0x7f},
    {0x02, 0x05, 0x44, 0x0e, 0x6f},
    {0x0a, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x0e, 0x7f},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x0e, 0x7f},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4e, 0x7f},
    {0x02, 0x8a, 0x49, 0xb5, 0xff},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x0e, 0x6f},
    {0x04, 0x05, 0x42, 0x4e, 0x7f},
    {0x02, 0x06, 0x44, 0x0e, 0x6f},
    {0x50, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x09, 0xb5, 0xff},
    {0x03, 0x82, 0x47, 0x01, 0xbe},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x01, 0xbe},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x09, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x09, 0x8f},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x09, 0x8f},
    {0x40, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x49, 0xb5, 0xff},
    {0x01, 0x84, 0x49, 0xf5, 0xff},
    {0x02, 0x86, 0x49, 0xb5, 0xff},
    {0x06, 0xc1, 0x0e, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0e, 0x6f},
    {0x04, 0x84, 0x49, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x0e, 0x6f},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x0e, 0x6f},
    {0x01, 0x06, 0x42, 0x4e, 0x7f},
    {0x02, 0x02, 0x44, 0x0e, 0x6f},
    {0x05, 0xc1, 0x0e, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0e, 0x6f},
    {0x04, 0x06, 0x42, 0x4e, 0x7f},
    {0x02, 0x07, 0x44, 0x0e, 0x6f},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x09, 0x8f},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x09, 0x8f},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x49, 0x8f},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x49, 0x8f},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x4e, 0xf5, 0xff},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x09, 0x8f},
    {0x03, 0x11, 0x42, 0x09, 0x8f},
    {0x04, 0x83, 0x4e, 0xf5, 0xff},
    {0x02, 0x11, 0x42, 0x09, 0x8f},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x4e, 0xb5, 0xff},
    {0x01, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x84, 0x4e, 0xb5, 0xff},
    {0x05, 0x44, 0x02, 0x09, 0x8f},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x09, 0x8f},
    {0x01, 0x0a, 0x42, 0x49, 0x8f},
    {0x02, 0x01, 0x42, 0x09, 0x8f},
    {0x06, 0x42, 0x02, 0x09, 0x8f},
    {0x03, 0x08, 0x42, 0x0e, 0x7f},
    {0x04, 0x0a, 0x42, 0x49, 0x8f},
    {0x02, 0x08, 0x42, 0x0e, 0x7f},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x4e, 0x7f},
    {0x02, 0x83, 0x46, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0x09, 0x8f},
    {0x03, 0x81, 0x47, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0x4e, 0x7f},
    {0x02, 0x81, 0x47, 0x01, 0xbe},
    {0x0c, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x0e, 0x7f},
    {0x01, 0x02, 0x42, 0x4e, 0x7f},
    {0x02, 0x0a, 0x42, 0x0e, 0x7f},
    {0x06, 0x47, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x4e, 0x7f},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x4e, 0x7f},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x4e, 0x7f},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xdd, 0xb5, 0x00, 0x0f},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xdd, 0xb5, 0x00, 0x0f},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x47, 0xb5, 0x8d},
    {0x01, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x0c, 0x47, 0xb5, 0x8d},
    {0x06, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0x5e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x53, 0xb5, 0xff},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0x53, 0xb5, 0xff},
    {0x05, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x13, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x45, 0xb5, 0x9d},
    {0x01, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x14, 0x45, 0xb5, 0x9d},
    {0x06, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x82, 0x4d, 0xb5, 0xdd},
    {0x04, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x82, 0x4d, 0xb5, 0xdd},
    {0x08, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x45, 0xb5, 0x9d},
    {0x01, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x18, 0x45, 0xb5, 0x9d},
    {0x05, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x0e, 0x47, 0xb5, 0x8d},
    {0x04, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x0e, 0x47, 0xb5, 0x8d},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x45, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x45, 0xb5, 0x9d},
    {0x06, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x45, 0xb5, 0x9d},
    {0x01, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x17, 0x45, 0xb5, 0x9d},
    {0x06, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x13, 0x6f},
    {0x04, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x13, 0x6f},
    {0x09, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x1b, 0x45, 0xb5, 0x9d},
    {0x01, 0x82, 0x53, 0xf5, 0xff},
    {0x02, 0x1b, 0x45, 0xb5, 0x9d},
    {0x05, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x13, 0x6f},
    {0x04, 0x82, 0x53, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x13, 0x6f},
    {0x0b, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x44, 0xb5, 0xad},
    {0x01, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x27, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x10, 0x47, 0xb5, 0x8d},
    {0x04, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x47, 0xb5, 0x8d},
    {0x07, 0x4b, 0x04, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x13, 0x6f},
    {0x04, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x13, 0x6f},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x45, 0xb5, 0x9d},
    {0x01, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x13, 0x45, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x37, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x44, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x4d, 0xb5, 0xdd},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x4d, 0xb5, 0xdd},
    {0x0c, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x43, 0x13, 0x6f},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0x13, 0x6f},
    {0x07, 0x45, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x13, 0x6f},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0x13, 0x6f},
    {0x05, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x43, 0x13, 0x6f},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0x13, 0x6f},
    {0xdc, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x44, 0xb5, 0xad},
    {0x01, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x2d, 0x44, 0xb5, 0xad},
    {0x06, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x35, 0x44, 0xb5, 0xad},
    {0x01, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x35, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x02, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x44, 0xb5, 0xad},
    {0x01, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x44, 0xb5, 0xad},
    {0x06, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x02, 0xbd},
    {0x04, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x02, 0xbd},
    {0x08, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x33, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x33, 0x44, 0xb5, 0xad},
    {0x05, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x47, 0xb5, 0x8d},
    {0x04, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x47, 0xb5, 0x8d},
    {0x54, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x44, 0xb5, 0xad},
    {0x01, 0x89, 0x45, 0xf5, 0xff},
    {0x02, 0x3f, 0x44, 0xb5, 0xad},
    {0x06, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x47, 0xb5, 0x8d},
    {0x01, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x0d, 0x47, 0xb5, 0x8d},
    {0x06, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x13, 0x6f},
    {0x04, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x13, 0x6f},
    {0x09, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x97, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x97, 0x45, 0xb5, 0xff},
    {0x05, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x13, 0x6f},
    {0x04, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x05, 0x42, 0x13, 0x6f},
    {0x0b, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x2b, 0x44, 0xb5, 0xad},
    {0x01, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x11, 0x47, 0xb5, 0x8d},
    {0x04, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x47, 0xb5, 0x8d},
    {0x07, 0xda, 0x05, 0xf5, 0xff},
    {0x03, 0x93, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x53, 0xf5, 0xff},
    {0x02, 0x93, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x42, 0x13, 0x6f},
    {0x04, 0x81, 0x53, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x13, 0x6f},
    {0x4e, 0x13, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x47, 0xb5, 0x8d},
    {0x01, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x01, 0x47, 0xb5, 0x8d},
    {0x06, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x53, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x53, 0xb5, 0xff},
    {0x05, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x81, 0x43, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x02, 0xbd},
    {0x0c, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x42, 0x13, 0x6f},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x13, 0x6f},
    {0x07, 0x46, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x13, 0x6f},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x13, 0x6f},
    {0x05, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x42, 0x13, 0x6f},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x13, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x44, 0xb5, 0xad},
    {0x01, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x44, 0xb5, 0xad},
    {0x06, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x62, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x48, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x48, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x44, 0xb5, 0xad},
    {0x01, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x44, 0xb5, 0xad},
    {0x06, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x44, 0xb5, 0xad},
    {0x05, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x44, 0xb5, 0xad},
    {0x01, 0x87, 0x45, 0xf5, 0xff},
    {0x02, 0x3d, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x95, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x44, 0xb5, 0xad},
    {0x01, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x44, 0xb5, 0xad},
    {0x06, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x08, 0x6d},
    {0x04, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x08, 0x6d},
    {0x09, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x3b, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x3b, 0x44, 0xb5, 0xad},
    {0x05, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x08, 0x6d},
    {0x04, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x08, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x29, 0x44, 0xb5, 0xad},
    {0x01, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x44, 0xb5, 0xad},
    {0x06, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x72, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x8f, 0x45, 0xb5, 0xff},
    {0x05, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x08, 0x6d},
    {0x04, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x08, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x44, 0xb5, 0xad},
    {0x01, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x44, 0xb5, 0xad},
    {0x06, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x39, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x44, 0xb5, 0xad},
    {0x05, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x08, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x08, 0x6d},
    {0x07, 0x4e, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x08, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x08, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x08, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x08, 0x6d},
    {0xdd, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x45, 0xb5, 0x9d},
    {0x01, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x16, 0x45, 0xb5, 0x9d},
    {0x06, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcb, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x45, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x45, 0xb5, 0x9d},
    {0x06, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7e, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0x45, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0x45, 0xb5, 0xff},
    {0x05, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x44, 0xb5, 0xad},
    {0x01, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x44, 0xb5, 0xad},
    {0x06, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x02, 0xbd},
    {0x04, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x02, 0xbd},
    {0x08, 0xcb, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x45, 0xb5, 0x9d},
    {0x01, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x19, 0x45, 0xb5, 0x9d},
    {0x05, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x8f, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x08, 0x6d},
    {0x04, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x08, 0x6d},
    {0x09, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x45, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x45, 0xb5, 0x9d},
    {0x05, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x08, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x08, 0x6d},
    {0x0b, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x45, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x45, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x05, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x08, 0x6d},
    {0x04, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x08, 0x6d},
    {0x4e, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x48, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x48, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x02, 0xbd},
    {0x0c, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x08, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x08, 0x6d},
    {0x07, 0x47, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x08, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x08, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x08, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x08, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa3, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0xa3, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x05, 0x7f},
    {0x01, 0x03, 0x46, 0x45, 0x7f},
    {0x02, 0x0b, 0x46, 0x05, 0x7f},
    {0x05, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x45, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0x05, 0x8f},
    {0x01, 0x0b, 0x41, 0x45, 0x8f},
    {0x02, 0x0c, 0x41, 0x05, 0x8f},
    {0x06, 0x43, 0x01, 0x05, 0x8f},
    {0x03, 0x09, 0x46, 0x05, 0x7f},
    {0x04, 0x0b, 0x41, 0x45, 0x8f},
    {0x02, 0x09, 0x46, 0x05, 0x7f},
    {0x07, 0x70, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0x45, 0x7f},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0x05, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x45, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0x05, 0x9f},
    {0x01, 0x0c, 0x43, 0x45, 0x9f},
    {0x02, 0x14, 0x43, 0x05, 0x9f},
    {0x06, 0x4b, 0x03, 0x05, 0x9f},
    {0x03, 0x82, 0x6b, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0x45, 0x9f},
    {0x02, 0x82, 0x6b, 0xb5, 0xff},
    {0x08, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x05, 0x9f},
    {0x01, 0x09, 0x41, 0x45, 0x8f},
    {0x02, 0x18, 0x43, 0x05, 0x9f},
    {0x05, 0x4b, 0x03, 0x05, 0x9f},
    {0x03, 0x0e, 0x41, 0x05, 0x8f},
    {0x04, 0x09, 0x41, 0x45, 0x8f},
    {0x02, 0x0e, 0x41, 0x05, 0x8f},
    {0x4f, 0x04, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0x05, 0x9f},
    {0x01, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0x05, 0x9f},
    {0x06, 0x45, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x45, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x45, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0x05, 0x9f},
    {0x01, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x05, 0x9f},
    {0x06, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0x45, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x05, 0x9f},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0x05, 0x9f},
    {0x05, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x44, 0xb5, 0xad},
    {0x01, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x05, 0x9f},
    {0x03, 0x10, 0x41, 0x05, 0x8f},
    {0x04, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x05, 0x8f},
    {0x07, 0x7c, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0x45, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x45, 0x9f},
    {0x02, 0x8d, 0x45, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x05, 0x9f},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x05, 0x9f},
    {0x01, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x05, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x05, 0x7f},
    {0x04, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x05, 0x7f},
    {0x08, 0xc2, 0x45, 0xb5, 0xff},
    {0x03, 0x38, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x45, 0x7f},
    {0x02, 0x38, 0x44, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x6b, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0x45, 0x7f},
    {0x02, 0x81, 0x6b, 0xb5, 0xff},
    {0x0c, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0x05, 0x7f},
    {0x01, 0x02, 0x46, 0x45, 0x7f},
    {0x02, 0x0a, 0x46, 0x05, 0x7f},
    {0x06, 0x46, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0x45, 0x7f},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0x45, 0x7f},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0x45, 0x7f},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x44, 0xb5, 0xad},
    {0x01, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x44, 0xb5, 0xad},
    {0x06, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x04, 0x6d},
    {0x04, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x04, 0x6d},
    {0x09, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x04, 0x7d},
    {0x01, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x0b, 0x43, 0x04, 0x7d},
    {0x05, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x04, 0x6d},
    {0x04, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x05, 0x41, 0x04, 0x6d},
    {0x0a, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x44, 0xb5, 0xad},
    {0x01, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x04, 0x7d},
    {0x04, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x04, 0x7d},
    {0x07, 0x6a, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x04, 0x6d},
    {0x04, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x06, 0x41, 0x04, 0x6d},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x44, 0xb5, 0xad},
    {0x01, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x44, 0xb5, 0xad},
    {0x06, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x51, 0xb5, 0xdd},
    {0x04, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x51, 0xb5, 0xdd},
    {0x08, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x45, 0x9f},
    {0x02, 0x34, 0x44, 0xb5, 0xad},
    {0x05, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0x05, 0x8f},
    {0x04, 0x10, 0x43, 0x45, 0x9f},
    {0x02, 0x0f, 0x41, 0x05, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x44, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x44, 0xb5, 0xad},
    {0x06, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x04, 0x6d},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x04, 0x6d},
    {0x07, 0x50, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x04, 0x6d},
    {0x01, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x41, 0x04, 0x6d},
    {0x05, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x04, 0x6d},
    {0x04, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x41, 0x04, 0x6d},
    {0xc7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0x05, 0x8f},
    {0x01, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x05, 0x8f},
    {0x06, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x45, 0x8f},
    {0x02, 0x99, 0x45, 0xb5, 0xff},
    {0x05, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0x45, 0x8f},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x44, 0xb5, 0xad},
    {0x01, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x05, 0x8f},
    {0x03, 0x11, 0x41, 0x05, 0x8f},
    {0x04, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x05, 0x8f},
    {0x07, 0xd1, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x05, 0x8f},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0x05, 0x8f},
    {0x01, 0x0a, 0x41, 0x45, 0x8f},
    {0x02, 0x01, 0x41, 0x05, 0x8f},
    {0x06, 0x42, 0x01, 0x05, 0x8f},
    {0x03, 0x08, 0x43, 0x04, 0x7d},
    {0x04, 0x0a, 0x41, 0x45, 0x8f},
    {0x02, 0x08, 0x43, 0x04, 0x7d},
    {0x08, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0x05, 0x8f},
    {0x03, 0x81, 0x51, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x81, 0x51, 0xb5, 0xdd},
    {0x0c, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x04, 0x7d},
    {0x01, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x0a, 0x43, 0x04, 0x7d},
    {0x06, 0x47, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x44, 0xb5, 0xad},
    {0x01, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x1e, 0x44, 0xb5, 0xad},
    {0x06, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x60, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x22, 0x44, 0xb5, 0xad},
    {0x01, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x22, 0x44, 0xb5, 0xad},
    {0x06, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x32, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x44, 0xb5, 0xad},
    {0x05, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x44, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x99, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x44, 0xb5, 0xad},
    {0x01, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x44, 0xb5, 0xad},
    {0x06, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x81, 0x6d},
    {0x04, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x81, 0x6d},
    {0x09, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3c, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x3c, 0x44, 0xb5, 0xad},
    {0x05, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x81, 0x6d},
    {0x04, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x81, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x44, 0xb5, 0xad},
    {0x01, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x2a, 0x44, 0xb5, 0xad},
    {0x06, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x7a, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x45, 0x9f},
    {0x02, 0x91, 0x45, 0xb5, 0xff},
    {0x05, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x81, 0x6d},
    {0x04, 0x0f, 0x43, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x81, 0x6d},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x44, 0xb5, 0xad},
    {0x01, 0x85, 0x45, 0xf5, 0xff},
    {0x02, 0x20, 0x44, 0xb5, 0xad},
    {0x06, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0x45, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3a, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x44, 0xb5, 0xad},
    {0x05, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x81, 0x6d},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x81, 0x6d},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x81, 0x6d},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x81, 0x6d},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x81, 0x6d},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x81, 0x6d},
    {0xe6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0x05, 0x9f},
    {0x01, 0x0d, 0x43, 0x45, 0x9f},
    {0x02, 0x16, 0x43, 0x05, 0x9f},
    {0x06, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x04, 0x6d},
    {0x04, 0x0d, 0x43, 0x45, 0x9f},
    {0x02, 0x03, 0x44, 0x04, 0x6d},
    {0x09, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x04, 0x7d},
    {0x01, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x0b, 0x42, 0x04, 0x7d},
    {0x05, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x04, 0x6d},
    {0x04, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x05, 0x44, 0x04, 0x6d},
    {0x0a, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x05, 0x9f},
    {0x01, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x05, 0x9f},
    {0x06, 0x48, 0x03, 0x05, 0x9f},
    {0x03, 0x09, 0x42, 0x04, 0x7d},
    {0x04, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x04, 0x7d},
    {0x07, 0x4a, 0x04, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0x05, 0x9f},
    {0x03, 0x06, 0x44, 0x04, 0x6d},
    {0x04, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x06, 0x44, 0x04, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x44, 0xb5, 0xad},
    {0x01, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x26, 0x44, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x02, 0xbd},
    {0x04, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x02, 0xbd},
    {0x08, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x05, 0x9f},
    {0x01, 0x11, 0x43, 0x45, 0x9f},
    {0x02, 0x19, 0x43, 0x05, 0x9f},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0x45, 0x9f},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x04, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x04, 0x6d},
    {0x07, 0x44, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x44, 0x04, 0x6d},
    {0x01, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x44, 0x04, 0x6d},
    {0x05, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x04, 0x6d},
    {0x04, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x44, 0x04, 0x6d},
    {0xc1, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0x45, 0x9f},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0x05, 0x9f},
    {0x03, 0x03, 0x42, 0x81, 0x6d},
    {0x04, 0x01, 0x43, 0x45, 0x9f},
    {0x02, 0x03, 0x42, 0x81, 0x6d},
    {0x09, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x05, 0x9f},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0x05, 0x9f},
    {0x05, 0x4a, 0x03, 0x05, 0x9f},
    {0x03, 0x05, 0x42, 0x81, 0x6d},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x81, 0x6d},
    {0x0b, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x05, 0x9f},
    {0x01, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0x05, 0x9f},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0x45, 0x9f},
    {0x03, 0x84, 0x44, 0xb5, 0xdd},
    {0x01, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x84, 0x44, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x81, 0x6d},
    {0x04, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x81, 0x6d},
    {0x4e, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x04, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x04, 0x7d},
    {0x08, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xc1, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x83, 0xc1, 0xb5, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x81, 0x46, 0x02, 0xbd},
    {0x0c, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x04, 0x7d},
    {0x01, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x0a, 0x42, 0x04, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x81, 0x6d},
    {0x04, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x81, 0x6d},
    {0x07, 0x47, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0x81, 0x6d},
    {0x01, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x81, 0x6d},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x81, 0x6d},
    {0x04, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x81, 0x6d},
    {0xf4, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x45, 0xb5, 0xff},
    {0x01, 0xa5, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0x45, 0xb5, 0xff},
    {0x06, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4c, 0xb5, 0x6d},
    {0x04, 0xa5, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4c, 0xb5, 0x6d},
    {0x09, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4c, 0xb5, 0x6d},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4c, 0xb5, 0x6d},
    {0x0a, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4c, 0xb5, 0x6d},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4c, 0xb5, 0x6d},
    {0x4d, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x41, 0xb5, 0xdd},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x41, 0xb5, 0xdd},
    {0x08, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x02, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4c, 0xb5, 0x6d},
    {0x04, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x04, 0x4c, 0xb5, 0x6d},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4c, 0xb5, 0x6d},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4c, 0xb5, 0x6d},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4c, 0xb5, 0x6d},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4c, 0xb5, 0x6d},
    {0x52, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0a, 0x6d},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0a, 0x6d},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0a, 0x6d},
    {0x04, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0a, 0x6d},
    {0x0b, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x46, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x46, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0a, 0x6d},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0a, 0x6d},
    {0x51, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x81, 0x41, 0xb5, 0xdd},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x41, 0xb5, 0xdd},
    {0x0c, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0a, 0x6d},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x0a, 0x6d},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0a, 0x6d},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x0a, 0x6d},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0a, 0x6d},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x0a, 0x6d},
    {0xe0, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x02, 0x6d},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x02, 0x6d},
    {0x09, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x02, 0x7d},
    {0x01, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x0b, 0x43, 0x02, 0x7d},
    {0x05, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x02, 0x6d},
    {0x04, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x05, 0x41, 0x02, 0x6d},
    {0x0a, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x02, 0x7d},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x02, 0x7d},
    {0x07, 0x5a, 0x03, 0xf5, 0xce},
    {0x03, 0x87, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x87, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x02, 0x6d},
    {0x04, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x06, 0x41, 0x02, 0x6d},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x48, 0x03, 0xce},
    {0x04, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x03, 0xce},
    {0x08, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x02, 0x6d},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x02, 0x6d},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x02, 0x6d},
    {0x01, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x41, 0x02, 0x6d},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x02, 0x6d},
    {0x04, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x41, 0x02, 0x6d},
    {0xc5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x0a, 0x6d},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0a, 0x6d},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x45, 0xb5, 0xff},
    {0x05, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x0a, 0x6d},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0a, 0x6d},
    {0x0b, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xca, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x94, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0a, 0x6d},
    {0x04, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0a, 0x6d},
    {0x4e, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x02, 0x7d},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x02, 0x7d},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x4a, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x83, 0x4a, 0xb5, 0xdd},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x81, 0x48, 0x03, 0xce},
    {0x0c, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x02, 0x7d},
    {0x01, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x0a, 0x43, 0x02, 0x7d},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0a, 0x6d},
    {0x04, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x0a, 0x6d},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0a, 0x6d},
    {0x01, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x0a, 0x6d},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0a, 0x6d},
    {0x04, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x0a, 0x6d},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x06, 0x6e},
    {0x04, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x06, 0x6e},
    {0x09, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0x06, 0x7e},
    {0x01, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x0b, 0x41, 0x06, 0x7e},
    {0x05, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x06, 0x6e},
    {0x04, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x05, 0x46, 0x06, 0x6e},
    {0x0a, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x43, 0x06, 0x8e},
    {0x01, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x0c, 0x43, 0x06, 0x8e},
    {0x06, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x09, 0x41, 0x06, 0x7e},
    {0x04, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x09, 0x41, 0x06, 0x7e},
    {0x07, 0x66, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x9a, 0x44, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x46, 0x06, 0x6e},
    {0x04, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x06, 0x46, 0x06, 0x6e},
    {0x4d, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc3, 0xb5, 0x0d},
    {0x04, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc3, 0xb5, 0x0d},
    {0x08, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x06, 0x8e},
    {0x04, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x0e, 0x43, 0x06, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x45, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x46, 0x06, 0x6e},
    {0x04, 0x88, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x06, 0x6e},
    {0x07, 0xc2, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x06, 0x6e},
    {0x01, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x46, 0x06, 0x6e},
    {0x05, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x46, 0x06, 0x6e},
    {0x04, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x46, 0x06, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x06, 0x8e},
    {0x04, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x06, 0x8e},
    {0x07, 0x59, 0x03, 0xf5, 0xce},
    {0x03, 0x90, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x45, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x06, 0x7e},
    {0x04, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x06, 0x7e},
    {0x08, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc3, 0xb5, 0x0d},
    {0x04, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x81, 0xc3, 0xb5, 0x0d},
    {0x0c, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x41, 0x06, 0x7e},
    {0x01, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x0a, 0x41, 0x06, 0x7e},
    {0x06, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x02, 0x6d},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x02, 0x6d},
    {0x09, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x0b, 0x42, 0x02, 0x7d},
    {0x01, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x0b, 0x42, 0x02, 0x7d},
    {0x05, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x02, 0x6d},
    {0x04, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x05, 0x44, 0x02, 0x6d},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x02, 0x7d},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x02, 0x7d},
    {0x07, 0xc6, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x45, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x8c, 0x45, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x02, 0x6d},
    {0x04, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x06, 0x44, 0x02, 0x6d},
    {0xc4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x06, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x06, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x46, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x02, 0x6d},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x02, 0x6d},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x02, 0x6d},
    {0x01, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x44, 0x02, 0x6d},
    {0x05, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x02, 0x6d},
    {0x04, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x44, 0x02, 0x6d},
    {0x93, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x06, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x06, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x11, 0x43, 0x06, 0x8e},
    {0x04, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x11, 0x43, 0x06, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0x42, 0xb5, 0xdd},
    {0x01, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x84, 0x42, 0xb5, 0xdd},
    {0x05, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x06, 0x8e},
    {0x01, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x01, 0x43, 0x06, 0x8e},
    {0x06, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x08, 0x42, 0x02, 0x7d},
    {0x04, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x08, 0x42, 0x02, 0x7d},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x83, 0x44, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x02, 0x7d},
    {0x01, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x0a, 0x42, 0x02, 0x7d},
    {0x06, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0xa7, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0xa7, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x05, 0x6f},
    {0x04, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x05, 0x6f},
    {0x09, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x45, 0x05, 0x7f},
    {0x01, 0x03, 0x45, 0x45, 0x7f},
    {0x02, 0x0b, 0x45, 0x05, 0x7f},
    {0x05, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x05, 0x6f},
    {0x04, 0x03, 0x45, 0x45, 0x7f},
    {0x02, 0x05, 0x47, 0x05, 0x6f},
    {0x0a, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x44, 0x05, 0x8f},
    {0x01, 0x0b, 0x44, 0x45, 0x8f},
    {0x02, 0x0c, 0x44, 0x05, 0x8f},
    {0x06, 0x43, 0x04, 0x05, 0x8f},
    {0x03, 0x09, 0x45, 0x05, 0x7f},
    {0x04, 0x0b, 0x44, 0x45, 0x8f},
    {0x02, 0x09, 0x45, 0x05, 0x7f},
    {0x07, 0x4d, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x03, 0xce},
    {0x01, 0x05, 0x45, 0x45, 0x7f},
    {0x02, 0x9a, 0x42, 0x03, 0xce},
    {0x05, 0x43, 0x04, 0x05, 0x8f},
    {0x03, 0x06, 0x47, 0x05, 0x6f},
    {0x04, 0x05, 0x45, 0x45, 0x7f},
    {0x02, 0x06, 0x47, 0x05, 0x6f},
    {0x4d, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x14, 0x42, 0x05, 0x9f},
    {0x01, 0x0c, 0x42, 0x45, 0x9f},
    {0x02, 0x14, 0x42, 0x05, 0x9f},
    {0x06, 0x4b, 0x02, 0x05, 0x9f},
    {0x03, 0x82, 0x4a, 0x03, 0xce},
    {0x04, 0x0c, 0x42, 0x45, 0x9f},
    {0x02, 0x82, 0x4a, 0x03, 0xce},
    {0x08, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x42, 0x05, 0x9f},
    {0x01, 0x09, 0x44, 0x45, 0x8f},
    {0x02, 0x18, 0x42, 0x05, 0x9f},
    {0x05, 0x4b, 0x02, 0x05, 0x9f},
    {0x03, 0x0e, 0x44, 0x05, 0x8f},
    {0x04, 0x09, 0x44, 0x45, 0x8f},
    {0x02, 0x0e, 0x44, 0x05, 0x8f},
    {0x4f, 0x07, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0x05, 0x9f},
    {0x01, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0x05, 0x9f},
    {0x06, 0x45, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x47, 0x05, 0x6f},
    {0x04, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0x05, 0x6f},
    {0x07, 0x43, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x47, 0x05, 0x6f},
    {0x01, 0x06, 0x45, 0x45, 0x7f},
    {0x02, 0x02, 0x47, 0x05, 0x6f},
    {0x05, 0x45, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x47, 0x05, 0x6f},
    {0x04, 0x06, 0x45, 0x45, 0x7f},
    {0x02, 0x07, 0x47, 0x05, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x05, 0x9f},
    {0x01, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x05, 0x9f},
    {0x06, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x05, 0x9f},
    {0x01, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x1b, 0x42, 0x05, 0x9f},
    {0x05, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x05, 0x9f},
    {0x03, 0x10, 0x44, 0x05, 0x8f},
    {0x04, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x05, 0x8f},
    {0x07, 0x52, 0x03, 0xf5, 0xce},
    {0x03, 0x8e, 0x45, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x45, 0x9f},
    {0x02, 0x8e, 0x45, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x05, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x05, 0x9f},
    {0x01, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x05, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x05, 0x7f},
    {0x04, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x05, 0x7f},
    {0x08, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x45, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x03, 0xce},
    {0x04, 0x04, 0x45, 0x45, 0x7f},
    {0x02, 0x81, 0x4a, 0x03, 0xce},
    {0x0c, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x45, 0x05, 0x7f},
    {0x01, 0x02, 0x45, 0x45, 0x7f},
    {0x02, 0x0a, 0x45, 0x05, 0x7f},
    {0x06, 0x46, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x45, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x45, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x45, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x07, 0x6d},
    {0x04, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x07, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x07, 0x7d},
    {0x01, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x0b, 0x43, 0x07, 0x7d},
    {0x05, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x07, 0x6d},
    {0x04, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x05, 0x41, 0x07, 0x6d},
    {0x0a, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x07, 0x7d},
    {0x04, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x07, 0x7d},
    {0x07, 0x55, 0x03, 0xf5, 0xce},
    {0x03, 0x88, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x88, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x07, 0x6d},
    {0x04, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x06, 0x41, 0x07, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x02, 0xbd},
    {0x04, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x02, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x45, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x05, 0x8f},
    {0x04, 0x10, 0x42, 0x45, 0x9f},
    {0x02, 0x0f, 0x44, 0x05, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x07, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x07, 0x6d},
    {0x07, 0x51, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x07, 0x6d},
    {0x01, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x41, 0x07, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x07, 0x6d},
    {0x04, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x41, 0x07, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x05, 0x8f},
    {0x01, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x05, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x45, 0xb5, 0xff},
    {0x03, 0x9b, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x45, 0x8f},
    {0x02, 0x9b, 0x45, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x45, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x05, 0x8f},
    {0x03, 0x11, 0x44, 0x05, 0x8f},
    {0x04, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x05, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x96, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x05, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x44, 0x05, 0x8f},
    {0x01, 0x0a, 0x44, 0x45, 0x8f},
    {0x02, 0x01, 0x44, 0x05, 0x8f},
    {0x06, 0x42, 0x04, 0x05, 0x8f},
    {0x03, 0x08, 0x43, 0x07, 0x7d},
    {0x04, 0x0a, 0x44, 0x45, 0x8f},
    {0x02, 0x08, 0x43, 0x07, 0x7d},
    {0x08, 0xc1, 0x45, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0x03, 0xce},
    {0x01, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x83, 0x42, 0x03, 0xce},
    {0x05, 0x42, 0x04, 0x05, 0x8f},
    {0x03, 0x81, 0x44, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x81, 0x44, 0x02, 0xbd},
    {0x0c, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x07, 0x7d},
    {0x01, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x0a, 0x43, 0x07, 0x7d},
    {0x06, 0x47, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x06, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x06, 0x6e},
    {0x09, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x06, 0x7e},
    {0x01, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x0b, 0x44, 0x06, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x06, 0x6e},
    {0x04, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x05, 0x45, 0x06, 0x6e},
    {0x0a, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x06, 0x8e},
    {0x01, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x0c, 0x42, 0x06, 0x8e},
    {0x06, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x09, 0x44, 0x06, 0x7e},
    {0x04, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x09, 0x44, 0x06, 0x7e},
    {0x07, 0x41, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x9a, 0x47, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x06, 0x45, 0x06, 0x6e},
    {0x04, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x06, 0x45, 0x06, 0x6e},
    {0x4d, 0x07, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x02, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x02, 0xbd},
    {0x08, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x06, 0x8e},
    {0x04, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x0e, 0x42, 0x06, 0x8e},
    {0x53, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x45, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x45, 0x06, 0x6e},
    {0x04, 0x8a, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x06, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x06, 0x6e},
    {0x01, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x45, 0x06, 0x6e},
    {0x05, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x45, 0x06, 0x6e},
    {0x04, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x45, 0x06, 0x6e},
    {0x58, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x06, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x06, 0x8e},
    {0x07, 0xc3, 0x05, 0xf5, 0xff},
    {0x03, 0x92, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x45, 0x9f},
    {0x02, 0x92, 0x45, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x45, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x05, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x06, 0x7e},
    {0x04, 0x86, 0x45, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x06, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x05, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x02, 0xbd},
    {0x04, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x81, 0x42, 0x02, 0xbd},
    {0x0c, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x06, 0x7e},
    {0x01, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x0a, 0x44, 0x06, 0x7e},
    {0x06, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0x05, 0x9f},
    {0x01, 0x0d, 0x42, 0x45, 0x9f},
    {0x02, 0x16, 0x42, 0x05, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x07, 0x6d},
    {0x04, 0x0d, 0x42, 0x45, 0x9f},
    {0x02, 0x03, 0x44, 0x07, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x07, 0x7d},
    {0x01, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x0b, 0x42, 0x07, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x07, 0x6d},
    {0x04, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x05, 0x44, 0x07, 0x6d},
    {0x0a, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x05, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x05, 0x9f},
    {0x06, 0x48, 0x02, 0x05, 0x9f},
    {0x03, 0x09, 0x42, 0x07, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x07, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x8a, 0x46, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x05, 0x9f},
    {0x03, 0x06, 0x44, 0x07, 0x6d},
    {0x04, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x06, 0x44, 0x07, 0x6d},
    {0x50, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x02, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x02, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x05, 0x9f},
    {0x01, 0x11, 0x42, 0x45, 0x9f},
    {0x02, 0x19, 0x42, 0x05, 0x9f},
    {0x05, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x06, 0x8e},
    {0x04, 0x11, 0x42, 0x45, 0x9f},
    {0x02, 0x0f, 0x42, 0x06, 0x8e},
    {0x40, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x46, 0xb5, 0xee},
    {0x01, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x86, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x07, 0x6d},
    {0x04, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x07, 0x6d},
    {0x07, 0x44, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x44, 0x07, 0x6d},
    {0x01, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x44, 0x07, 0x6d},
    {0x05, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x07, 0x6d},
    {0x04, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x44, 0x07, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x06, 0x8e},
    {0x01, 0x01, 0x42, 0x45, 0x9f},
    {0x02, 0x0d, 0x42, 0x06, 0x8e},
    {0x06, 0x4a, 0x02, 0x05, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x45, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x05, 0x9f},
    {0x01, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x12, 0x42, 0x05, 0x9f},
    {0x05, 0x4a, 0x02, 0x05, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x05, 0x9f},
    {0x01, 0x83, 0x47, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0x05, 0x9f},
    {0x06, 0x44, 0x02, 0x06, 0x8e},
    {0x03, 0x11, 0x42, 0x06, 0x8e},
    {0x04, 0x83, 0x47, 0xf5, 0xdd},
