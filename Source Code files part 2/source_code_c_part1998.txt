e.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));

            // find the male shirt
            xonline.common.service.AvatarManifest.XAVATAR_COMPONENT_INFO shirt = Array.Find(manifest.ComponentInfo, ci => (ci.ComponentMask & (ushort)AvatarManifestHelpers.XAVATAR_COMPONENT_MASK.Shirt) != 0);
            // set the Asset to male pants ("Male grunge Pants") with version changed to purchased    
            // The structure of awarded assets is as follows:
            // ID Structure:  gggggggg-xxxx-ryrb-Crrr-rrrrtttttttt (where y is the version of 0=TOC,1=Awarded,2=Purchased from AvatarAssetId.cs
            Guid purchasedMalePants = new Guid("00000010-0099-0201-C1C8-F109A19CB2E0");
            shirt.ModelAssetId = new AvatarAssetId(purchasedMalePants);
            shirt.ComponentMask = (ushort)AvatarManifestHelpers.XAVATAR_COMPONENT_MASK.Trousers;

            // This doesn't actually matter, it will fail the validation before it validates the purchase
            // but just in case that order is ever changed.
            Global.RO.Info("Adding the Purchased Avatar GUID to the database for User puid 9016");
            ProgressWS.InsertPurchasedAvatarAsset(Userid, purchasedMalePants);

            Global.RO.Info("Validate Avatar Manifest");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }

    // Blend Shape - Cannot have ears in the chin slot
    [TestFrequency("Regression"), TestCasePriority(3), Description("Invalid Blend Shapes - Ears in the Chin slot")]
    public class N_ValidateAvatarManifest_BlendShapeInvalid : UserSettingBase
    {
        public N_ValidateAvatarManifest_BlendShapeInvalid()
        {
        }
        protected override void init()
        {
            Userid = GetUser("User17");
            // reset the user 
            ProfileWS.ResetUserSetttings(Userid);
            ProgressWS.ResetUserAvatarPurchasedAssets(Userid);
        }

        protected override void run()
        {
            // First Male avatar from 12 pre-selected template ones
            string manifestDefaultMale
            xonline.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));

            manifest.BlendShapes[(int)xonline.common.service.AvatarManifest.Shape_e.Chin].BlendShapeAssetId = new AvatarAssetId(AvatarAssets.LookupAssetByName("Fantasy ears"));

            Global.RO.Info("Validate Avatar Manifest");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result - Ears in the Chin Blendshape");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }

    // Blend shapes are all required, can't be missing
    [TestFrequency("Regression"), TestCasePriority(3), Description("Blend Shapes can't be missing")]
    public class N_ValidateAvatarManifest_BlendShapeMissing : UserSettingBase
    {
        public N_ValidateAvatarManifest_BlendShapeMissing()
        {
        }
        protected override void init()
        {
            Userid = GetUser("User17");
            // reset the user 
            ProfileWS.ResetUserSetttings(Userid);
            ProgressWS.ResetUserAvatarPurchasedAssets(Userid);
        }

        protected override void run()
        {
            // First Male avatar from 12 pre-selected template ones
            string manifestDefaultMale
            xonline.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));

            // set the Nose blend shape to empty guid
            manifest.BlendShapes[(int)xonline.common.service.AvatarManifest.Shape_e.Nose].BlendShapeAssetId = new AvatarAssetId(Guid.Empty);

            Global.RO.Info("Validate Avatar Manifest - No Nose");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result - Missing nose blend shape");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }
    
    // Required Replacement textures invalid - Mustache in the mouth slot
    [TestFrequency("Regression"), TestCasePriority(3), Description("Required Replacement textures invalid")]
    public class N_ValidateAvatarManifest_ReplacementTexturesRequiredInvalid : UserSettingBase
    {
        public N_ValidateAvatarManifest_ReplacementTexturesRequiredInvalid()
        {
        }
        protected override void init()
        {
            Userid = GetUser("User17");
            // reset the user 
            ProfileWS.ResetUserSetttings(Userid);
            ProgressWS.ResetUserAvatarPurchasedAssets(Userid);
        }
        protected override void run()
        {
            // First Male avatar from 12 pre-selected template ones
            string manifestDefaultMale
            xonline.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));

            manifest.ReplacementTextures[(int)xonline.common.service.AvatarManifest.Texture_e.Mouth].TextureAssetId = new AvatarAssetId(AvatarAssets.LookupAssetByName("Handlebar moustache"));

            Global.RO.Info("Validate Avatar Manifest");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result - Handlebar moustache in the mouth slot");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }

    // Required Replacement Textures can't be missing
    [TestFrequency("Regression"), TestCasePriority(3), Description("Required Replacement Textures can't be missing")]
    public class N_ValidateAvatarManifest_ReplacementTexturesRequiredMissing : UserSettingBase
    {
        public N_ValidateAvatarManifest_ReplacementTexturesRequiredMissing()
        {
        }
        protected override void init()
        {
            Userid = GetUser("User17");
            // reset the user 
            ProfileWS.ResetUserSetttings(Userid);
            ProgressWS.ResetUserAvatarPurchasedAssets(Userid);
        }
        protected override void run()
        {
            // First Male avatar from 12 pre-selected template ones
            string manifestDefaultMale
            xonline.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));

            // zero out the Eye GUID
            manifest.ReplacementTextures[(int)xonline.common.service.AvatarManifest.Texture_e.Eye].TextureAssetId = new AvatarAssetId(Guid.Empty);

            Global.RO.Info("Validate Avatar Manifest");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result - Empty GUID for Eye");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }

    // Optional Replacement Textures can't be invalid - Handlebar moustache in eyeshadow slot
    [TestFrequency("Regression"), TestCasePriority(3), Description("Optional Replacement Textures can't be invalid")]
    public class N_ValidateAvatarManifest_ReplacementTexturesOptionalInvalid : UserSettingBase
    {
        public N_ValidateAvatarManifest_ReplacementTexturesOptionalInvalid()
        {
        }
        protected override void init()
        {
            Userid = GetUser("User17");
            // reset the user 
            ProfileWS.ResetUserSetttings(Userid);
            ProgressWS.ResetUserAvatarPurchasedAssets(Userid);
        }
        protected override void run()
        {
            // First Male avatar from 12 pre-selected template ones
            string manifestDefaultMale
            xonline.common.service.AvatarManifest manifest = xonline.common.service.AvatarManifest.Read(AvatarManifestHelpers.HexToBytes(manifestDefaultMale));
            
            manifest.ReplacementTextures[(int)xonline.common.service.AvatarManifest.Texture_e.EyeShadow].TextureAssetId = new AvatarAssetId(AvatarAssets.LookupAssetByName("Handlebar moustache"));

            Global.RO.Info("Validate Avatar Manifest");
            ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest(Userid, (byte[])manifest);
            ValidateAvatarManifestResponse resp = req.Execute();

            Global.RO.Info("Validate the result - Moustache in the EyeShadow Texture Slot");
            if (resp.ValidationResult == 1)
                throw new Exception("Validation passed, but should have failed");
        }
    }
    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\LB64\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\LB64\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lb64_none_12.4.56.0_none_b4dd4f4f1934880f
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lb64
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.manifest
XP_MANIFEST_PATH=manifests\msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.cat
XP_CATALOG_PATH=manifests\msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.cat
XP_PAYLOAD_PATH=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lb64,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\LB64\TestCasesStress.cs ===
using System;
using System.Threading;
using System.Collections.Generic;

using xonline.common.config;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;

//using xonline.server.stats.common;

namespace LB64
{
    public partial class LB64Tests : TestNode
    {
        #region Test Base and RandEx

        public class RandEx : Random
        {
            public ulong NextULong()
            {
                return NextULong(0, ulong.MaxValue);
            }

            public ulong NextULong(ulong MaxValue)
            {
                return NextULong(0, MaxValue);
            }

            public ulong NextULong(ulong MinValue, ulong MaxValue)
            {
                // Get a raw ulong
                ulong ul = unchecked((ulong)this.NextDouble());

                // Shoehorn the raw ulong into the requested range
                ul = (ul % (MaxValue - MinValue + 1)) + MinValue;

                // Return spiffy ulong that meets the criteria
                return ul;
            }
        }

        public class LB64StressBase : LB64TestBase
        {
            public const uint _TitleId = 82;

            protected short ColumnId(int Count)
            {
                return (short)(Count % 60 + 1);
            }

            protected class LbState
            {
                private volatile uint _numberOfEntries;
                public uint NumberOfEntries
                {
                    get
                    {
                        return _numberOfEntries;
                    }
                }

                private uint _titleId;
                public uint TitleId
                {
                    get
                    {
                        return _titleId;
                    }
                }

                private uint _lbId;
                public uint Id
                {
                    get
                    {
                        return _lbId;
                    }
                }

                private RandEx _rand;

                private Mutex _muxPuid;
                private ulong _maxPuid;
                private ulong _currentPuid;
                private int   _puidLoopbackCount;

                public LbState(uint TitleId, uint LbId)
                {
                    // Leaderboard Info
                    _titleId = TitleId;
                    _lbId    = LbId;

                    _numberOfEntries = 0;

                    // Utilitiies
                    _rand = new RandEx();

                    // Users
                    _muxPuid = new Mutex(/*initiallyOwned=*/false);
                    
                    _maxPuid = ulong.MaxValue;
                    _currentPuid       = 0;
                    _puidLoopbackCount = 0;
                }

                public void NextPuidForWrite(out ulong Puid, out int UseCount)
                {
                    _muxPuid.WaitOne();
                    try
                    {
                        if (_currentPuid < _maxPuid)
                        {
                            // returned puid must never equal zero
                            ++_currentPuid;

                            // If we have looped back, then we aren't adding any
                            // 'new' entries, just updating old ones
                            if (_puidLoopbackCount == 0)
                            {
                                ++_numberOfEntries;
                            }
                        }
                        else
                        {
                            // If this overflows were are simply out of luck
                            // if we just keep going the verify step will fail
                            // so, the best thing to do here is just to die.
                            // We can at least rely on the data that has been
                            // written to be verifiable
                            ++_puidLoopbackCount;

                            // returned puid must never equal zero
                            _currentPuid = 1;
                        }

                        Puid     = _currentPuid;
                        UseCount = _puidLoopbackCount;
                    }
                    finally
                    {
                        _muxPuid.ReleaseMutex();
                    }
                }

                public ulong GetPuidForRead()
                {
                    while (_numberOfEntries == 0)
                    {
                        Thread.Sleep(1000);
                    }

                    return _rand.NextULong(1, _numberOfEntries);
                }

                public ulong GetRankForRead()
                {
                    while (_numberOfEntries == 0)
                    {
                        Thread.Sleep(1000);
                    }

                    return _rand.NextULong(1, _numberOfEntries);
                }

                // This get will only pull from a subset of the available entries
                // because it is the only way we can garuntee that the read will find
                // the entry it is looking for
                public ulong GetRatingForRead()
                {
                    ulong puid = _rand.NextULong(1, _currentPuid);
                    return GenerateRating(puid, _puidLoopbackCount);
                }

                static public ulong GenerateRating(ulong Puid, int UseCount)
                {
                    return unchecked(((ulong)UseCount << 32) + (0x00000000FFFFFFFF & Puid));
                }
            }

            protected class TestState
            {
                private Random _rand;

                public ServerIndex Server;
                public List<LbState> Leaderboards;

                public bool ShouldTerminate;

                public TestState()
                {
                    _rand = new Random();

                    this.Leaderboards = new List<LbState>();
                    this.ShouldTerminate = false;
                }

                public LbState GetRandomLeaderboard()
                {
                    int index = _rand.Next(this.Leaderboards.Count);
                    return this.Leaderboards[index];
                }
            }

            protected volatile static TestState _state = null;
        }

        #endregion // Test Base and RandEx

        [
         TestCase,
         Description("Setup the environment for a stress run")
        ]
        public class StressSetup : LB64StressBase
        {
            protected override void Execute()
            {
                _state = new TestState();

                _state.Server = ServerIndex.LB64;


                // Create Leaderboards
                int lbCount = 10; //1000;
                int progressMod = lbCount / 10;

                Global.RO.Info("Creating " + lbCount + " Leaderboards for title: 0x" + _TitleId.ToString("X8"));

                for (uint lbid = 1; lbid <= lbCount; ++lbid)
                {
                    LbState lbState = new LbState(_TitleId, lbid);
                    LbSvr.CreateLeaderboard(_state.Server, lbState.TitleId, lbState.Id);

                    if (lbid % progressMod == 0)
                    {
                        Global.RO.Info("Created leaderboards " + (lbid - progressMod + 1) + " to " + lbid);
                    }

                    _state.Leaderboards.Add(lbState);
                }

                Global.RO.Info("Pausing to let Leaderboards fully initialize.");
                Thread.Sleep(5000);

                Global.RO.Info("Finished creating Leaderboards.");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [
         TestCase,
         Description("Execute stress for a pre-determined period of time")
        ]
        public class Stress : LB64StressBase
        {
            //                 d   hr   min  s    ms
          //private int _ttl = 3 * 24 * 60 * 60 * 1000; // 3 days
            private int _ttl =           1 * 60 * 1000; // 1 minute

            private const int _ConnectionsPerThread = 10;

            private const int _ReaderThreadCount = 60;
            private const int _WriterThreadCount = 10;
            private const int _EnumerThreadCount = 30;

            #region Helper Functions

            private void StressRunShouldEnd(object obj)
            {
                _state.ShouldTerminate = true;
            }

            private LbsvrClientConnection[] EstablishConnections(int ConnectionCount)
            {
                LbsvrClientConnection[] connections = new LbsvrClientConnection[ConnectionCount];
                for (int i = 0; i < connections.Length; ++i)
                {
                    connections[i] = Lbsvr.OpenConnection(_state.Server);
                    Thread.Sleep(500);
                }

                return connections;
            }

            private void LbSvr.FlushResultsForConnections(LbsvrClientConnection[] Connections)
            {
                for (int i = 0; i < Connections.Length; ++i)
                {
                    try
                    {
                        LbSvr.FlushResults(Connections[i]);
                    }
                    catch
                    {
                        // If LbSvr.FlushResults() throws, then the LbsvrClient was 'consideratly' closed for us.
                        Connections[i] = Lbsvr.OpenConnection(_state.Server);
                        throw;  // why was I even swallowing this?!?  for the read case?  o.O
                    }
                }
            }

            #endregion // Helper Functions

            #region Threads

            private delegate void StressThreadCallback(LbsvrClientConnection Con, LbState Lb);

            private void StressThread(object callback)
            {
                StressThreadCallback Execute = (StressThreadCallback)callback;

                LbsvrClientConnection[] connections = null;
                try
                {
                    // Setup
                    connections = EstablishConnections(_ConnectionsPerThread);

                    // Work Loop
                    while (!_state.ShouldTerminate)
                    {
                        // Make Requset
                        foreach (LbsvrClientConnection con in connections)
                        {
                            LbState lb = _state.GetRandomLeaderboard();
                            Execute(con, lb);
                        }

                        // Dump Responses
                        LbSvr.FlushResultsForConnections(connections);
                    }
                }
                catch (Exception e)
                {
                    _state.ShouldTerminate = true;

                    Global.RO.Fatal(e.ToString());
                    ResultCode = TEST_RESULTS.FAILED;
                }
                finally
                {
                    if (connections != null)
                    {
                        foreach (LbsvrClientConnection con in connections)
                        {
                            con.Close();
                        }
                    }
                }
            }

            // Reader Thread
            private void ReadCall(LbsvrClientConnection Con, LbState Lb)
            {
                ulong puid = Lb.GetPuidForRead();

                unchecked
                {
                    Lbsvr.ExecuteSingleProcCall(
                        Con,
                        LbsvrClientConnection.LbProcIdStatRead,
                        new object[] {
                                    (Int32)Lb.TitleId // Title Id
                                  , (Int32)Lb.Id      // Leaderboard Id
                                  , (Int64)puid       // User Id
                                }
                    );
                }
            }

            // Writer Thread
            private void WriteCall(LbsvrClientConnection Con, LbState Lb)
            {
                ulong puid;
                int count;
                Lb.NextPuidForWrite(out puid, out count);

                ulong rating = LbState.GenerateRating(puid, count);

                object[] procBlob = LbSvr.GenerateStatWriteBlob(
                    Lb.TitleId  // Title Id
                  , Lb.Id       // Leaderboard Id
                  , puid        // User Id
                  , 0           // Session Start Time

                    // Attributes
                  , new object[] {
                        (Int16)ColumnId(count)
                      , (Int32)count
                      , (Int16)SpecialAttrib.Rating
                      , unchecked((Int64)rating)
                    }
                );

                Lbsvr.ExecuteSingleProcCall(
                    Con
                  , LbsvrClientConnection.LbProcIdStatWrite
                  , procBlob
                );
            }

            // Enum Thread
            private void EnumCall(LbsvrClientConnection Con, LbState Lb)
            {
                ulong puid = Lb.GetPuidForRead();

                unchecked
                {
                    Lbsvr.ExecuteSingleProcCall(
                        Con,
                        LbsvrClientConnection.LbProcIdStatEnum,
                        new object[] {
                                    (Int32)Lb.TitleId // Title Id
                                  , (Int32)Lb.Id      // Leaderboard Id
                                  , (Int32)puid       // Starting Rank
                                  , (Int32)1000       // Page Size
                                }
                    );
                }
            }

            #endregion // Threads

            // Run Stress
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.PASSED;

                _state.ShouldTerminate = false;

                // Start stress timer...
                Timer tmr = new Timer(StressRunShouldEnd, null, _ttl, Timeout.Infinite);

                List<Thread> threads = new List<Thread>();

                //* Spin up 100 threads, each with 10 connections.  Send 10 requests, read 10 responses, loop.
                // Request Type: Write
                for (int i = 0; i < _WriterThreadCount; ++i)
                {
                    Thread th = new Thread(StressThread);
                    th.Start((StressThreadCallback)WriteCall);

                    threads.Add(th);
                }

                // Request Type: Read
                for (int i = 0; i < _ReaderThreadCount; ++i)
                {
                    Thread th = new Thread(StressThread);
                    th.Start((StressThreadCallback)ReadCall);

                    threads.Add(th);
                }

                // Request Type: Enum
                for (int i = 0; i < _EnumerThreadCount; ++i)
                {
                    Thread th = new Thread(StressThread);
                    th.Start((StressThreadCallback)EnumCall);

                    threads.Add(th);
                }

                // Wait for stress to be over :D
                foreach (Thread th in threads)
                {
                    th.Join();
                }
            }
        }

        [
         TestCase,
         Description(
             "Verify that the leaderboards are in the expected state "
           + "then reload, move 64 to 32, and move 32 to 64; verifying at each stage."
         )
        ]
        public class VerifyStateReloadMove : LB64StressBase
        {
            private const uint _PageSize = 1000;

            private LbsvrClientConnection _con32;
            private LbsvrClientConnection _con64;

            private void VerifyState(LbsvrClientConnection Con)
            {
                foreach (LbState lb in _state.Leaderboards)
                {
                    // Get number of rows in leaderboard
                    uint totalRows = lb.NumberOfEntries;

                    // Loop and verify them ALL
                    for (uint baseRank = 1; baseRank <= totalRows; baseRank += _PageSize)
                    {
                        unchecked
                        {
                            Lbsvr.ExecuteSingleProcCall(
                                Con
                              , LbsvrClientConnection.LbProcIdStatEnum
                              , new object[] {
                                    (Int32)lb.TitleId
                                  , (Int32)lb.Id
                                  , (Int32)baseRank     // Starting Rank
                                  , (Int32)_PageSize    // Number of entries to return
                                }
                            );
                        }

                        // Verify VerifyNextRowset(Con)
                        LbsvrClientResult result = Con.NextResult();
                        if (result != LbsvrClientResult.Rowset)
                        {
                            throw new Exception("Expected Rowset, got " + result);
                        }

                        // Verify Rows match the algorithm
                        while (Con.Read())
                        {
                            int colCount = Con.GetColumnCount() - READ_HEADER_LENGTH - 1; // -1 so we don't include the rating at the end

                            uint  rank = unchecked((UInt32)(Int32)Con.GetColumn(0));
                            ulong puid = unchecked((UInt64)(Int64)Con.GetColumn(1));

                            uint lastval = 0;

                            int  colHighest   = 0;
                            int highestCount = 0;
                            for (int i = 0; i < colCount; ++i)
                            {
                                int val = (Int32)Con.GetColumn(i + READ_HEADER_LENGTH);

                                if (val > highestCount)
                                {
                                    highestCount = val;
                                    colHighest = i;
                                }

                                long offset = ((long)lastval - val);
                                if (offset != -1 && offset != colCount - 1)
                                {
                                    throw new Exception("Invalid row: Transition (" + (i - 1) + ")" + lastval + " => (" + i + ")" + val + " is not allowed!");
                                }
                            }

                            int colExpected = ColumnId(highestCount);
                            if (colHighest != colExpected)
                            {
                                throw new Exception("Last count appeared in column (" + colHighest + "), but was expected in column (" + colExpected + ")");
                            }

                            ulong ratingEx = LbState.GenerateRating(puid, highestCount);
                            ulong ratingAc = unchecked((UInt64)(Int64)Con.GetColumn(colCount - 1));
                            if (ratingEx != ratingAc)
                            {
                                throw new Exception("Rating: " + ratingAc + " did not match the expected: " + ratingEx);
                            }
                        }
                    }
                }
            }

            private void MoveLbs(LbsvrClientConnection From, LbsvrClientConnection To)
            {
                foreach (LbState lb in _state.Leaderboards)
                {

                }
            }

            protected override void Execute()
            {
                _con32 = Lbsvr.OpenConnection(ServerIndex.LB32);
                _con64 = Lbsvr.OpenConnection(ServerIndex.LB64);

                // Verify
                VerifyState(_con64);

                // Reload Lb Server

                // Verify
                VerifyState(_con64);

                // Move Lb
                MoveLbs(_con32, _con64);

                // Verify
                VerifyState(_con32);

                // Move back
                MoveLbs(_con64, _con32);

                // Verify
                VerifyState(_con64);

                // ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [
         TestCase,
         Description("")
        ]
        public class StressTeardown : LB64StressBase
        {
            protected override void Execute()
            {
                // Clean up leaderboards
                LbsvrClientConnection con = Lbsvr.OpenConnection(_state.Server);
                foreach (LbState lbState in _state.Leaderboards)
                {
                    LbSvr.DeleteLeaderboard(con, lbState.TitleId, lbState.Id);
                }
                con.Close();

                // Might be a way to do this all in one fell swoop... just toast a whole title?

                _state.Leaderboards = null;
                _state = null;
            }
        }

        [TestCase]
        public class Unit : LB64StressBase
        {
            protected override void Execute()
            {
                ServerIndex server = ServerIndex.LB64;

                uint titleId = 911;
                uint lbId = 10;
                ulong userId = 31337;

                LbSvr.CreateLeaderboard(server, titleId, lbId);

                LbsvrClientConnection con = Lbsvr.OpenConnection(server);

                object[] procBlobC1 = GenerateStatWriteBlob(
                    titleId    // Title Id
                  , lbId       // Leaderboard Id
                  , userId     // User Id
                  , 0          // Session Start Time

                    // Attributes
                  , new object[] {
                        (Int16)2                        // (k) User Att 1
                      , (Int64)3                        // (v) User Att 1
                      , (Int16)SpecialAttrib.Rating     // (k) Rating
                      , (Int64)1                        // (v) Rating
                    }
                );

                Lbsvr.ExecuteSingleProcCall(con, LbsvrClientConnection.LbProcIdStatWrite, procBlobC1);
                LbSvr.FlushResults(con);

                object[] procBlobC2 = GenerateStatWriteBlob(
                    titleId // Title Id
                  , lbId    // Leaderboard Id
                  , userId  // User Id
                  , 0       // Session Start Time

                    // Attributes
                  , new object[] {
                        (Int16)4                        // (k) User Att 2
                      , (Int64)5                        // (v) User Att 2
                      , (Int16)SpecialAttrib.Rating     // (k) Rating
                      , (Int64)2                        // (v) Rating
                    }
                );

                Lbsvr.ExecuteSingleProcCall(con, LbsvrClientConnection.LbProcIdStatWrite, procBlobC2);
                LbSvr.FlushResults(con);

                Lbsvr.ExecuteSingleProcCall(
                    con
                  , LbsvrClientConnection.LbProcIdStatEnum
                  , new object[] {
                        (Int32)titleId // Title Id
                      , (Int32)lbId    // Leaderboard Id
                      , (Int32)1       // Starting Rank
                      , (Int32)1       // Number of entries to return
                    }
                );

                LbsvrClientResult result = con.NextResult();
                if (result != LbsvrClientResult.Rowset)
                {
                    throw new Exception("Expected Rowset, got " + result);
                }

                uint row = 0;
                while (con.Read())
                {
                    int serverColCount = con.GetColumnCount();

                    Global.RO.Info("row" + row + ":");

                    for (int i = 0; i < serverColCount; ++i)
                    {
                        object serverCol = con.GetColumn(i);
                        Global.RO.Info("\tcol" + i + ": " + serverCol);
                    }

                    ++row;
                }

                con.Reset();
                con.Close();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\LB64\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lb64_none_12.4.56.0_none_b4dd4f4f1934880f
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lb64
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.manifest
XP_MANIFEST_PATH=manifests\msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.cat
XP_CATALOG_PATH=manifests\msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7.cat
XP_PAYLOAD_PATH=msil_lb64_no-public-key_12.4.56.0_x-ww_746c41b7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lb64,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\LB64\XManagement.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;

using System.Net;
using System.Net.Sockets;

namespace LB64
{
    static class XManagement
    {
        private const int XM_TTL = 5 * 1000; // 5 Seconds
        private const int XM_PORT = 4100;

        private static void ExtractKeyValuePair(string KeyValuePair, out string Key, out string Value)
        {
            // All key-value pairs are of the form '<key>=<value>'
            // so we split the remaining input on '=' and, voila, key, and value!
            string[] tokens = KeyValuePair.Split(new char[] { '=' });
            if (tokens.Length != 2)
            {
                throw new Exception("Failed to parse Key from: " + KeyValuePair);
            }

            Key   = tokens[0].Trim().ToLower();
            Value = tokens[1].Trim().ToLower();
        }

        private static uint InternalExecute(TcpClient Client, string Command, out string[] Responses)
        {
            uint result = UInt32.MaxValue;
            List<string> responses = new List<string>();

            // We can get away with this, since the public functions *create*
            // the client, we aren't ever "passed" it from outside.
            Client.ReceiveTimeout = XM_TTL;

            NetworkStream stream  = null;
            TextReader    treader = null;
            try
            {
                stream = Client.GetStream();
                treader = new StreamReader(stream);

                // Send Request
                byte[] sendBytes = Encoding.ASCII.GetBytes(Command + "\n");
                stream.Write(sendBytes, 0, sendBytes.Length);

                // Get First Size
                string firstLine = treader.ReadLine();

                int size = -1;
                bool doneParsing = false;

                string firstKey;
                string firstValue;

                ExtractKeyValuePair(firstLine, out firstKey, out firstValue);
                if (firstKey == "size")
                {
                    size = Int32.Parse(firstValue);
                }
                else if (firstKey == "result")
                {
                    result = UInt32.Parse(firstValue);
                    doneParsing = true;
                }

                while (!doneParsing)
                {
                    // Parse Data (if any)
                    if (size <= 0)
                    {
                        throw new Exception("Invalid Data Size: " + size);
                    }

                    // Get Data as char array (We should know the length already)
                    char[] buffer = new char[size];
                    treader.Read(buffer, 0, size);

                    // Convert data to string and save it off to return later
                    string data = new String(buffer);
                    data = data.Trim();
                    if (data.Length > 0)
                    {
                        responses.Add(data);
                    }

                    // Get the Key-Value Pair that follows the data
                    string kvp = treader.ReadLine();

                    // Parse Key
                    string key;
                    string value;

                    ExtractKeyValuePair(kvp, out key, out value);
                    switch (key)
                    {
                        case "size":
                            size = Int32.Parse(value);
                            break;
                        case "result":
                            result = UInt32.Parse(value);
                            doneParsing = true;
                            break;
                        default: // Unknown
                            throw new Exception("Didn't recognize key-value pair: " + kvp);
                    }
                }
            }
            finally
            {
                if (treader != null) { treader.Close(); }
                if (stream  != null) { stream.Close();  }
                if (Client  != null) { Client.Close();  }
            }

            Responses = responses.ToArray();
            return result;
        }

        #region Backwards Compat

        // BUGBUG: Back Compat execution throws exceptions in more cases than the existing code

        /// <summary>
        /// Execute an XManagement Command against a Live Server.
        /// </summary>
        /// <param name="Target">Name of server to connect to.</param>
        /// <param name="Command">XManagement command to execute.</param>
        /// <returns>First response returned by the server.</returns>
        static public string Execute(string Target, string Command)
        {
            string response = null;

            string[] responses = null;
            Execute(Target,Command, out responses);

            if (responses != null && responses.Length > 0)
            {
                response = responses[0];
            }

            return response;
        }

        /// <summary>
        /// Execute an XManagement Command against a Live Server.
        /// </summary>
        /// <param name="Target">Name of server to connect to.</param>
        /// <param name="Command">XManagement command to execute.</param>
        /// <param name="Response">First response returned by the server.</param>
        /// <returns>HRESULT returned as a result of executing the command.</returns>
        static public bool Execute(string Target, string Command, out string Response)
        {
            string response = null;

            string[] responses = null;
            uint hr = Execute(Target, Command, out responses);

            if (responses != null && responses.Length > 0)
            {
                response = responses[0];
            }

            Response = response;

            return (hr == 0x00000000) ? true : false;   // BUGBUG: Only 'passes' for S_OK, do we need handling for S_FALSE?
                                                        // BUGBUG: Missing Global.RO.Debug() for fail command.
        }

        /// <summary>
        /// Execute an XManagement Command against a Live Server.
        /// </summary>
        /// <param name="Target">PEndPoint for the server to connect to.</param>
        /// <param name="Command">XManagement command to execute.</param>
        /// <param name="Response">First response returned by the server.</param>
        /// <returns>HRESULT returned as a result of executing the command.</returns>
        static public bool Execute(IPEndPoint Target, string Command, out string Response)
        {
            string response = null;

            string[] responses = null;
            uint hr = Execute(Target, Command, out responses);

            if (responses != null && responses.Length > 0)
            {
                response = responses[0];
            }

            Response = response;
            
            return (hr == 0x00000000) ? true : false;   // BUGBUG: Only 'passes' for S_OK, do we need handling for S_FALSE?
                                                        // BUGBUG: Missing Global.RO.Debug() for fail command
        }

        #endregion // Backwards Compat

        /// <summary>
        /// Execute an XManagement Command against a Live Server.
        /// </summary>
        /// <param name="Target">Name of server to connect to.</param>
        /// <param name="Command">XManagement command to execute.</param>
        /// <param name="Responses">An array of responses from the server</param>
        /// <returns>HRESULT returned as a result of executing the command.</returns>
        public static uint Execute(string Target, string Command, out string[] Responses)
        {
            // BUGBUG: Should we get the port from NPDB perhaps?
            TcpClient client = new TcpClient(Target, XM_PORT);
            return InternalExecute(client, Command, out Responses);
        }

        /// <summary>
        /// Execute an XManagement Command against a Live Server.
        /// </summary>
        /// <param name="Target">IPEndPoint for the server to connect to.</param>
        /// <param name="Command">XManagement command to execute.</param>
        /// <param name="Responses">An array of responses from the server</param>
        /// <returns>HRESULT returned as a result of executing the command.</returns>
        public static uint Execute(IPEndPoint Target, string Command, out string[] Responses)
        {
            // You'd think new TcpClient(IPEndPoint ep) would work?  But no.  It doesn't.
            // (It tries to bind to a local port... why?  I have no clue, but it does.
            TcpClient client = new TcpClient();
            client.Connect(Target);

            return InternalExecute(client, Command, out Responses);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lbsdevtest_none_12.4.56.0_none_c018f5688add5fd9
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lbsdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.manifest
XP_MANIFEST_PATH=manifests\msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.cat
XP_CATALOG_PATH=manifests\msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.cat
XP_PAYLOAD_PATH=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lbsdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\lbsdevtest.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;
using xonline.server.stats.common;

using System.Threading;

[TestGroup, DVT]
public class LbsDevTest : TestNode
{
    public class StatStructCommon
    {   
        public int m_nTitleID;
        public int m_nLbID;
        public Int64 m_nUserId;
        public int m_nStatCount;

        public StatStructCommon(int nTitleId, int nLbID, Int64 nUserId, int nStatCount)
        {
            m_nTitleID = nTitleId;
            m_nLbID = nLbID;
            m_nUserId = nUserId;
            m_nStatCount = nStatCount;
        }
        
    }

    public class StatWriteStruct:StatStructCommon
    {
        public StatWriteStruct(int nTitleId, int nLbID, Int64 nUserId, int nStatCountToWrite):base(nTitleId, nLbID, nUserId, nStatCountToWrite)
        {
            
        }
    }

    public class StatReadStruct:StatStructCommon
    {
        public StatReadStruct(int nTitleId, int nLbID, Int64 nUserId, int nStatCountToRead):base(nTitleId, nLbID, nUserId, nStatCountToRead)
        {
            
        }
    }

    
    private const int    TITLE_ID         = 0x0000feed;
    private const ulong  TEST_MACHINE_ID  = 0xf00df00df00df00d;
    private const int    MAX_USERS        = 101;
    private const int    MAX_COLUMNS      = 64;
    private const int    MAX_TEAMS        = 101;
    private const long   RATING_SEED      = 1000;
    private const int    PAGE_SIZE        = 100;
    private IPEndPoint _lbsvrIP;

    private int m_nPendingThread = 0; 

    [TestGroupSetup]
    public void Setup()
    {
        DvtConfig.LoadConfig();
        _lbsvrIP = DvtConfig._lbsvraddr;
    }

    [TestCase]
    public void EstimateRankForRating()
    {
        int nLbId = 1;
        
        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);

        int nTotalUsers = 0;
        for (int nUserId=1000;nUserId>=500;nUserId = nUserId - 5)
        {
            StatWriteStruct param = new StatWriteStruct(TITLE_ID, nLbId, nUserId, 32);
            ThreadProcWrite(param);
            nTotalUsers++;
        }
        
        Int64 [] arrRatings = new Int64[]{10500, 1000, 999, 506, 501, 500, 499, 10, 0};
        Int32 [] arrRank = EstimateRanksForRatings(TITLE_ID, nLbId, arrRatings);

        Assert.AreEqual(arrRank.Length, arrRank.Length); 
        Assert.AreEqual(arrRank[0], 1); 
        Assert.AreEqual(arrRank[1], 1);
        Assert.AreEqual(arrRank[2], 2);
        Assert.AreEqual(arrRank[3], nTotalUsers - 1);
        Assert.AreEqual(arrRank[4], nTotalUsers);
        Assert.AreEqual(arrRank[5], nTotalUsers); 
        Assert.AreEqual(arrRank[6], nTotalUsers + 1);  
        Assert.AreEqual(arrRank[7], nTotalUsers + 1);  
        Assert.AreEqual(arrRank[8], nTotalUsers + 1);  
    }

    [TestCase]
    public void EstimateRankForRatingNullLeaderboards()
    {
        int nLbId = 1;
        
        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);
 
        Int64 [] arrRatings = new Int64[]{10500, 1000, 999};
        Int32 [] arrRank = EstimateRanksForRatings(TITLE_ID, nLbId, arrRatings);

        Assert.AreEqual(arrRank.Length, arrRank.Length); 
        Assert.AreEqual(arrRank[0], 1); 
        Assert.AreEqual(arrRank[1], 1);
        Assert.AreEqual(arrRank[2], 1);
    }

    [TestCase]
    public void DeleteAllLbsForDVTTitle()
    {
        DeleteOneTitleFromLbs(TITLE_ID);
    }

    //one test to create lots of leaderboards & delete them
    [TestCase]
    public void Create1000Lbs()
    {
        DeleteOneTitleFromLbs(TITLE_ID);
        for (int i=1;i<=1000;i++)
        {
            CreateOneLbs(TITLE_ID, i);
        }
    }

    [TestCase]
    public void ConnectionStressTest()
    {
        LbsvrClientConnection [] arrlbsvrConn = new LbsvrClientConnection[4500];
        try
        {
            for (int i=0;i<arrlbsvrConn.Length;i++)
            {
                
                arrlbsvrConn[i] = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            }
        }
        catch
        {
            throw;
        }
        finally
        {
            for (int i=0;i<arrlbsvrConn.Length;i++)
            {
                if (null!= arrlbsvrConn[i])
                {
                    arrlbsvrConn[i].Close();

                }
            }
        }
    }


    //one test to create one leaderboard and populate with lots of random data
    public void CreateLbsAndWriteUserForWebStats()//deploy 0xfffe07d0 using livestats
    {
        int nTitleId = -129072;
        int [] arrLbId = new int []{-131072, -131071};

        foreach (int nLbId in arrLbId)
        {
            int nWorkerThread = 0;
            int nCompletionPort = 0;

            for (Int64 nUserId=0x9000000000101;nUserId<0x9000000001100;nUserId++)
            {
                StatWriteStruct param = new StatWriteStruct(nTitleId, nLbId, nUserId, 32);
                Interlocked.Increment(ref m_nPendingThread);


                while (nWorkerThread == 0)
                {
                    System.Threading.ThreadPool.GetAvailableThreads(
                                                                       out nWorkerThread,
                                                                       out nCompletionPort
                                                                    );
                    
                    if (nWorkerThread == 0) System.Threading.Thread.Sleep(10);
                }

                nWorkerThread = 0;
                
                System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProcWrite), param);
            }

        }

        while (m_nPendingThread > 0)
        {
            System.Threading.Thread.Sleep(100);
        }
    }

    [TestCase]
    public void CreateLbsAndWriteUser()
    {
        DeleteOneTitleFromLbs(TITLE_ID);

        for (int nLbId=1;nLbId<25;nLbId++)
        {
            CreateOneLbs(TITLE_ID, nLbId);
 //           int nWorkerThread = 0;
//            int nCompletionPort = 0;

            for (int nUserId=1;nUserId<1000;nUserId++)
            {
                StatWriteNoBatching(TITLE_ID, nLbId,nUserId, 32);
                /*StatWriteStruct param = new StatWriteStruct(TITLE_ID, nLbId, nUserId, 32);
                Interlocked.Increment(ref m_nPendingThread);


                while (nWorkerThread == 0)
                {
                    System.Threading.ThreadPool.GetAvailableThreads(
                                                                       out nWorkerThread,
                                                                       out nCompletionPort
                                                                    );
                    
                    if (nWorkerThread == 0) System.Threading.Thread.Sleep(10);
                }

                nWorkerThread = 0;
                
                System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProcWrite), param);
                */
            }

        }

        while (m_nPendingThread > 0)
        {
            System.Threading.Thread.Sleep(100);
        }
    }


     //one test to create one leader, write and read in parity
    [TestCase]
    public void ReadThePreviousWrittenData()
    {
        //int nLbId = 0x01234567;

        int nWorkerThread = 0;
        int nCompletionPort = 0;

        for (int nLbId=1;nLbId<25;nLbId++)
        {
            for (int nUserId=1;nUserId<1000;nUserId++)
            {
                StatReadStruct param = new StatReadStruct(TITLE_ID, nLbId, nUserId, 32);
                Interlocked.Increment(ref m_nPendingThread);

                while (nWorkerThread == 0)
                {
                    System.Threading.ThreadPool.GetAvailableThreads(
                                                                       out nWorkerThread,
                                                                       out nCompletionPort
                                                                    );
                    
                    if (nWorkerThread == 0) System.Threading.Thread.Sleep(10);
                }

                nWorkerThread = 0;
                
                System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProcReadAndVerify), param);
            }
        }

        while (m_nPendingThread > 0)
        {
            System.Threading.Thread.Sleep(100);
        }
    }    




    [TestCase]
    public void ReadOnlyReadWriteTest()
    {
        bool bFail = false;
        //in Read only can't do write but can do read
        //in write only, can do both
        int nLbId = 1;

        SetReadWrite(TITLE_ID,nLbId);
        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);

        StatWriteNoBatching(TITLE_ID, nLbId, 1, 32); //this should succeed

        SetReadOnly(TITLE_ID,nLbId );
        try
        {
            StatWriteNoBatching(TITLE_ID, nLbId, 2, 32); //this should fail since we are in read only mode
            bFail = true;
        }
        catch
        {
        }

        SetReadWrite(TITLE_ID,nLbId);
        StatWriteNoBatching(TITLE_ID, nLbId, 2, 32); //now it should pass

        if (bFail)
            throw new Exception("Error encountered in ReadOnlyReadWriteTest");
    }

    [TestCase]
    public void TestSafeToDeleteLb()
    {
        int nLbId = 1;

        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);

        uint uSwapSeed = SetReadWrite(TITLE_ID, nLbId);

        bool bSafeToDelete = SafeToDeleteLb(uSwapSeed);

        Assert.AreEqual(bSafeToDelete, true); //must be true because we expect the database queue to be empty (note usually u want to set it to read only but here we only want to get the seed

        //now lets do this
        for (int nUserId=1;nUserId<20000;nUserId++)
        {
            StatWriteStruct param = new StatWriteStruct(TITLE_ID, nLbId, nUserId, 32);
            Interlocked.Increment(ref m_nPendingThread);
            System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProcWrite), param);
        }

        System.Threading.Thread.Sleep(100); //give the thread pool a chance to execute

        uSwapSeed = SetReadWrite(TITLE_ID,nLbId); //note i can't call SetReadOnly. I only care about testing SafeToDeleteLb

        bSafeToDelete = SafeToDeleteLb(uSwapSeed);
        Assert.AreEqual(bSafeToDelete, false); //this should be unsafe, unless the database is like ultra fast but i don't think so
        
        while (m_nPendingThread > 0)
        {
            System.Threading.Thread.Sleep(100);
        }

        System.Threading.Thread.Sleep(5000); //now give it 5 second
        bSafeToDelete = SafeToDeleteLb(uSwapSeed);
        Assert.AreEqual(bSafeToDelete, true);
    }


    [TestCase]
    public void MoveLbTest()
    {
        //create a lb populate with some data
        //Unload it
        //verify it is gone by doing a stat read
        //Load it back
        //Verify all content are loaded by doing stat read

        int nLbId = 1;

        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);

        for (int nUserId=1;nUserId<100;nUserId++)
        {
            StatWriteStruct param = new StatWriteStruct(TITLE_ID, nLbId, nUserId, 32);
            Interlocked.Increment(ref m_nPendingThread);
            System.Threading.ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProcWrite), param);
        }

        while (m_nPendingThread > 0)
        {
            System.Threading.Thread.Sleep(100);
        }

        uint uSwapSeed = SetReadOnly(TITLE_ID,nLbId);
        bool bSafeToDelete = false;
        
        while (bSafeToDelete == false)
        {
            bSafeToDelete = SafeToDeleteLb(uSwapSeed);
            System.Threading.Thread.Sleep(1000);
        }

        //get ready to unload
        UnLoadCommon(TITLE_ID, nLbId);

        bool bFail = false;
        try 
        {
            StatReadNoBatching(TITLE_ID, nLbId, 1, 32);   //this should not pass as we just deleted the leaderboard  
            bFail = true;
        }
        catch
        {
            //expect an error
        }

        if (bFail == true)
            throw new Exception("Error: Expected error, should not be able to read a deleted leaderboard");

        LoadCommon(TITLE_ID, nLbId); //load it back
        SetReadWrite(TITLE_ID, nLbId);//set it back to writable - otherwise won't be able to delete by later test

        StatReadStruct objReadStruct = new StatReadStruct(TITLE_ID, nLbId, 1, 32);

        ThreadProcReadAndVerify(objReadStruct);
        

    }

    [TestCase]
    public void LoadUnloadTest()
    {
        int nLbId = 0x54322;
        int nMaxUser = 100000;

        DeleteOneTitleFromLbs(TITLE_ID);
        CreateOneLbs(TITLE_ID, nLbId);

        for (int nUserId=1;nUserId<nMaxUser;nUserId++)
        {
            StatWriteStruct param = new StatWriteStruct(TITLE_ID, nLbId, nUserId, 32);
            StatWriteNoBatching(param.m_nTitleID, param.m_nLbID, param.m_nUserId, param.m_nStatCount);
        }

        uint uSwapSeed = SetReadOnly(TITLE_ID,nLbId);
        bool bSafeToDelete = false;
        
        while (bSafeToDelete == false)
        {
            bSafeToDelete = SafeToDeleteLb(uSwapSeed);
            System.Threading.Thread.Sleep(1000);
        }

        //get ready to unload
        UnLoadCommon(TITLE_ID, nLbId);

        bool bFail = false;
        try 
        {
            StatReadNoBatching(TITLE_ID, nLbId, 1, 32);   //this should not pass as we just deleted the leaderboard  
            bFail = true;
        }
        catch
        {
            //expect an error
        }

        if (bFail == true)
            throw new Exception("Error: Expected error, should not be able to read a deleted leaderboard");

        LoadCommon(TITLE_ID, nLbId); //load it back
        SetReadWrite(TITLE_ID, nLbId);//set it back to writable - otherwise won't be able to delete by later test

        for (int nUserId=1;nUserId<nMaxUser;nUserId++)
        {
            StatReadStruct objReadStruct = new StatReadStruct(TITLE_ID, nLbId, nUserId, 32);

            ThreadProcReadAndVerify(objReadStruct);
        }
        

    }
    
    public void ThreadProcWrite(Object stateInfo)
    {
        try 
        {
            StatWriteStruct param = (StatWriteStruct)stateInfo;
            StatWriteNoBatching(param.m_nTitleID, param.m_nLbID, param.m_nUserId, param.m_nStatCount);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
        finally
        {
            Interlocked.Decrement(ref m_nPendingThread);
        }
    }

    public void ThreadProcReadAndVerify(Object stateInfo)
    {
        try 
        {
            StatReadStruct param = (StatReadStruct)stateInfo;
            object [] arrResults = StatReadNoBatching(param.m_nTitleID, param.m_nLbID, param.m_nUserId, param.m_nStatCount);

            if (arrResults.Length == 0)
                throw new Exception("No Result Found");

            for (int j=0;j<arrResults.Length;j++)
            {
                object [] arrResult = ((ArrayList)arrResults[j]).ToArray();
                Int16 nExpectedStatId = 0;
                for (int i=3;i<arrResult.Length -2;i=i+2)
                {
                    Int16 nStatId = (Int16)arrResult[i];
                    Int64 nValue  = (Int64)arrResult[i+1];
                    if (nStatId != nExpectedStatId)
                        throw new Exception("Error Verifying Read Stat ID");

                    if (nValue != 1234)
                        throw new Exception("Error Verifying Read Value");

                    nExpectedStatId = (Int16)(nExpectedStatId + 1);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
        finally
        {
            Interlocked.Decrement(ref m_nPendingThread);
        }
    }

    #region protectedmethod

    protected void DeleteOneTitle(Int32 nTitleId)
    {
        DeleteOneTitleFromLbs(nTitleId);
        DeleteFromConfigDB(nTitleId);
    }

    protected void CreateOneLbs(Int32 nTitleId, Int32 nLbId)
    {
         PopulateConfigDB(nTitleId, nLbId);
         CreateOneLbInLbs(nTitleId, nLbId);
    }

    //Note that the LBSVR batch stat write for multiple title ID and LBID - we don't care about that for this one
    protected void StatWriteNoBatching(Int32 nTitleId, Int32 nLbId, Int64 nUserId, int nStatCount)
    {
        LbsvrClientConnection lbsvrConn = null;
        try
        {
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            lbsvrConn.BeginRequest(1); //no batching - this is just 1 LBID
                
            int prmcount  = 5 + ((nStatCount + 1) * 2);
            object[] prms = new object[prmcount];
            
            prms[0] = (Int32) nTitleId;
            prms[1] = (Int32) nLbId;
            prms[2] = (Int64) nUserId;
            prms[3] = (Int64) 0;
            prms[4] = (Int16) (nStatCount + 1); //the number of Stats that follows

            int j=0;
            // Variable parameters (the stats):
            for(j=0; j < nStatCount; j++)
            {
                prms[5+(j*2)]   = (Int16)j;
                prms[5+(j*2)+1] = (Int64)1234; //lets just write some INT64 for now
            }

            prms[5+(j*2)]   = (Int16)unchecked((Int16)SpecialAttrib.Rating);
            prms[5+(j*2)+1] = (Int64)nUserId;
                
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdStatWrite, prms);

            lbsvrConn.SendRequest();
            
            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new Exception("StatWriteNoBatching:: assert failed");
        }
        catch
        {
            throw;
        }
        finally
        {
            if (lbsvrConn != null)
            {
                lbsvrConn.Close();
            }
        }
    }

    protected Int32 [] EstimateRanksForRatings(Int32 nTitleId, Int32 nLbId, Int64 [] arrRatings)
    {
        Int32 [] arrRet = new Int32[arrRatings.Length];
        LbsvrClientConnection lbsvrConn = null;
        try
        {
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            lbsvrConn.BeginRequest(1);
                
            int prmcount  = 2 + (arrRatings.Length);
            object[] prms = new object[prmcount];
            
            prms[0] = (Int32) nTitleId;
            prms[1] = (Int32) nLbId;
           
            int j=0;
            // Variable parameters (the stats):
            for(j=0; j < arrRatings.Length; j++)
            {
                prms[2+(j)]   = (Int64)arrRatings[j];
            }
                
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdEstimateRankForRatings, prms);

            lbsvrConn.SendRequest();
            
            LbsvrClientResult result;

            int nCount = 0;
            if ((result = lbsvrConn.NextResult()) == LbsvrClientResult.Rowset)
            {
                while(lbsvrConn.Read())
                {
                    int nColumnCount = lbsvrConn.GetColumnCount();
                    if (nColumnCount != 1)
                        throw new Exception("LbProcIdEstimateRankForRatings - Expected only 1 column");

                    arrRet[nCount] = (Int32)lbsvrConn.GetColumn(0);
                    nCount++;
                }
            }
                
            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new LbsvrRequestException("LbProcIdEstimateRankForRatings", "Response not expected");

            
        }
        catch
        {
            throw;
        }
        finally
        {
            if (lbsvrConn != null)
            {
                lbsvrConn.Close();
            }
        }

        return arrRet;
    }



    private uint SetReadOnly(int nTitleId, int nLbId)
    {
        return SetStatusCommon(nTitleId, nLbId, LbsvrClientConnection.LbProcIdSetLbToReadOnly);
    }

    private uint SetReadWrite (int nTitleId, int nLbId)
    {
        return SetStatusCommon(nTitleId, nLbId, LbsvrClientConnection.LbProcIdSetLbToReadWrite);
    }

    private uint SetStatusCommon (int nTitleId, int nLbId, UInt32 uStatus)
    {
        LbsvrClientConnection lbsvrConn = null;
        uint nSwapSeed = 0;

        try
        {
            //hack hack - need to revise, the actual server may have more than one IP interface
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);

            lbsvrConn.BeginRequest(1);
                
            lbsvrConn.CallProc(uStatus, new object[] {
                                                       ((Int32) nTitleId),
                                                       ((Int32) nLbId)
                                                   });
                
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.Rowset || !lbsvrConn.Read())
                throw new LbsvrRequestException("LbProcIdGetLbRankedEntryCount", "Rowset expected");
                
            nSwapSeed = (uint)(int)lbsvrConn.GetColumn(0);
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }

        return nSwapSeed;
    }


    private bool SafeToDeleteLb (uint nSwapSeed)
    {
        LbsvrClientConnection lbsvrConn = null;
        bool bSafe = false;

        try
        {
            //hack hack - need to revise, the actual server may have more than one IP interface
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);

            lbsvrConn.BeginRequest(1);
                
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdIsSafeToDeleteLb, new object[] {
                                                       unchecked((Int32)nSwapSeed)
                                                   });
                
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.Rowset || !lbsvrConn.Read())
                throw new LbsvrRequestException("LbProcIdGetLbRankedEntryCount", "Rowset expected");
                
            bSafe = (((sbyte)lbsvrConn.GetColumn(0) > 0)?true:false);
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }

        return bSafe;
    }

    //this is going to be simple
    //return an array list of array list 
    protected object [] StatReadNoBatching(Int32 nTitleId, Int32 nLbId, Int64 nUserId, int nStatCount)
    {
        LbsvrClientConnection lbsvrConn = null;
        ArrayList arrResult = new ArrayList();
        try
        {
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            lbsvrConn.BeginRequest(1); //no batching - this is just 1 LBID
            
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdStatRead, new object[] {
                                (Int32) nTitleId,
                                (Int32) nLbId,
                                (Int64) nUserId
                            });
                
            lbsvrConn.SendRequest();
            LbsvrClientResult result;
                
            while((result = lbsvrConn.NextResult()) == LbsvrClientResult.Rowset)
            {
                ArrayList arrRow = new ArrayList();
                if(!lbsvrConn.Read())
                    new LbsvrRequestException("LbProcIdStatRead", "Empty rowset not expected");

                int nColumnCount = lbsvrConn.GetColumnCount();
                for (int i=0;i<nColumnCount;i++)
                {
                    arrRow.Add(lbsvrConn.GetColumn(i)); // i do 0 parsing
                }

                arrResult.Add(arrRow);
            }
                
            if(result != LbsvrClientResult.None)
                throw new LbsvrRequestException("LbProcIdStatRead", "Response not expected");
        }
        catch
        {
            throw;
        }
        finally
        {
            if (lbsvrConn != null)
            {
                lbsvrConn.Close();
            }
        }

        return arrResult.ToArray();
    }


    protected void DeleteOneTitleFromLbs(Int32 nTitleId)
    {   
        LbsvrClientConnection lbsvrConn = null;

        try
        {   
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            lbsvrConn.BeginRequest(1);

            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdDeleteTitle, new object[] {
                unchecked((Int32)nTitleId)
            });
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new LbsvrRequestException("CreateOneLb", "Response not expected");
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }
        
    }


    protected void CreateOneLbInLbs(Int32 nTitleId, Int32 nLbId)
    {   
        LbsvrClientConnection lbsvrConn = null;

        try
        {   
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);
            lbsvrConn.BeginRequest(1);
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdLoadLb, new object[] {
                                                                                           ((Int32) nTitleId),
                                                                                           ((Int32) nLbId)
                                                                                   });
            
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new LbsvrRequestException("CreateOneLb", "Response not expected");
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }
        
    }


    protected void PopulateConfigDB(Int32 nTitleId, Int32 nLbId)
    {
         // Create in the config db
        SqlConnection sql = null;
        try
        {
            sql = new SqlConnection("Server="+DvtConfig._configserver+";Database="+DvtConfig._configdb+
                ";Integrated Security=true");
             
            sql.Open();
            
            SqlCommand cmd = new SqlCommand("p_stats_lb_add", sql);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@vc_server",      DvtConfig._lbsvrname);
            cmd.Parameters.AddWithValue("@i_title_id",     unchecked(nTitleId));
            cmd.Parameters.AddWithValue("@i_lb_id",        (Int32)nLbId);
            cmd.Parameters.AddWithValue("@i_reset_type",   (Int32)0);
            cmd.Parameters.AddWithValue("@ti_top_100",     (Int32)(0));
            cmd.Parameters.AddWithValue("@ti_team",        (Int32)(0));
            cmd.Parameters.AddWithValue("@ti_req_arb",     (Int32)(0));
            cmd.Parameters.AddWithValue("@i_decay_days",   (Int32)10);
            cmd.Parameters.AddWithValue("@c_Elo_E",        (string)"E");
            cmd.Parameters.AddWithValue("@i_Elo_K",        (Int32)0);
            cmd.Parameters.AddWithValue("@i_Elo_New",      (Int32)0);
            cmd.Parameters.AddWithValue("@vc_Elo_C_table", (string)"");
            cmd.Parameters.AddWithValue("@i_attach_count", (Int32)32);
            cmd.Parameters.AddWithValue("@i_max_attach_size", (Int32)128);
             
            cmd.ExecuteNonQuery();
        }
        finally
        {
            if(sql != null)
                sql.Close();
        }
    }
    
    protected void DeleteFromConfigDB(int nTitleId)
    {
        SqlConnection sql = null;
        try
        {
            // delete data from config database
        
            sql = new SqlConnection("Server="+DvtConfig._configserver+";Database="+DvtConfig._configdb+
                ";Integrated Security=true");
             
            sql.Open();
            
            SqlCommand cmd = new SqlCommand("p_stats_title_delete", sql);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@i_title_id",  unchecked((Int32)nTitleId));
            
            cmd.ExecuteNonQuery();
        
        }
        finally
        {
                
            if(sql != null)
                sql.Close();
        }
        
    }


    private void UnLoadCommon(int nTitleId, int nLbId)
    {
        LbsvrClientConnection lbsvrConn = null;

        try
        {
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);

            lbsvrConn.BeginRequest(1);
            
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdDeleteLbFromMemoryOnly, new object[] {
                                                                                                ((Int32) nTitleId),
                                                                                                ((Int32) nLbId)
                                                                                            });
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new LbsvrRequestException("SetReadOnly", "Response not expected");
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }
    }

    private void LoadCommon(int nTitleId, int nLbId)
    {
        LbsvrClientConnection lbsvrConn = null;

        try
        {
            lbsvrConn           = LbsvrClientConnection.OpenConnection(_lbsvrIP);

            lbsvrConn.BeginRequest(1);
            
            lbsvrConn.CallProc(LbsvrClientConnection.LbProcIdCreateAndLoadOneLb, new object[] {
                                                                                                ((Int32) nTitleId),
                                                                                                ((Int32) nLbId)
                                                                                            });
            lbsvrConn.SendRequest();

            if(lbsvrConn.NextResult() != LbsvrClientResult.None)
                throw new LbsvrRequestException("SetReadOnly", "Response not expected");
        }
        catch
        {
            throw;
        }
        finally
        {
            if(lbsvrConn != null)
                lbsvrConn.Close();
        }
    }  

    
    #endregion 

    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\lbsdvt\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lbsdevtest_none_12.4.56.0_none_c018f5688add5fd9
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lbsdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.manifest
XP_MANIFEST_PATH=manifests\msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.cat
XP_CATALOG_PATH=manifests\msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed.cat
XP_PAYLOAD_PATH=msil_lbsdevtest_no-public-key_12.4.56.0_x-ww_165904ed
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lbsdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsfd_none_12.4.56.0_none_55a06e67ed15fa66
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsfd
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.manifest
XP_MANIFEST_PATH=manifests\msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.cat
XP_CATALOG_PATH=manifests\msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.cat
XP_PAYLOAD_PATH=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsfd,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsfd_none_12.4.56.0_none_55a06e67ed15fa66
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsfd
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.manifest
XP_MANIFEST_PATH=manifests\msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.cat
XP_CATALOG_PATH=manifests\msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80.cat
XP_PAYLOAD_PATH=msil_statsfd_no-public-key_12.4.56.0_x-ww_ecdd1a80
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsfd,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\StatsFD.cs ===
using System;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Stats;
using StatsFD.Xenon;
using xonline.common.config;
using System.IO;

[assembly: RootNode(typeof(StatsFD.StatsFDMain))]

namespace StatsFD
{
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
    [Owner("jeffng"), TestFrequency("Regression")]
	public class StatsFDMain : TestNode
	{
		public StatsFDMain()
		{
            AddChild( new GStatsSet()        , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GReset()           , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GEnumLB()          , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GLWLBSetGetReset() , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GLWLBEnum()        , /*addFunctionalData=*/true , /*addStressData=*/false );

            //v2 test cases
            AddChild( new V2SetGet_CommitUserData("V2SetGet_CommitUserData")     , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new V2SetGet_UnCommitUserData("V2SetGet_UnCommitUserData") , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new V2ResetUser("V2ResetUser")                             , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new V2EnumLeaderBoard("V2EnumLB")                          , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new V2SetGet_CommitNegative("V2SetGet_CommitNegative")     , /*addFunctionalData=*/true , /*addStressData=*/false );
            
            // TODO: Investigate these test cases 
            //AddChild( new V2Commit_VerifySig("V2Commit_VerifySig")               , /*addFunctionalData=*/true , /*addStressData=*/false );

            // v2 Stats WebService entry point.
            AddChild( new V2WebEnumLeaderBoard("V2WebEnumLeaderBoard") , /*addFunctionalData=*/true , /*addStressData=*/false );

            // v1 Stats additional test cases.
            AddChild( new V1AddTestCases("V1AddTestCases") , /*addFunctionalData=*/true , /*addStressData=*/false );


            // light weigntr LB
            AddChild( new LightWeightWAttachemnts("LightWeightWAttachemnts")   , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new LightWeight_BoundryCases("LightWeight_BoundryCases") , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new DecayLeaderBoard("DecayLeaderBoard")                 , /*addFunctionalData=*/true , /*addStressData=*/false );

            //this test case will go to admin widget
            //AddChild(new V2BanAttachment("V2BanAttachment"), /*addFunctionalData=*/true, /*addStressData=*/false);

            // Tsunami test cases
            AddChild( new GUserReplace("GUserReplace", false)         , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GUserAdd("GUserAdd", false)                 , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GEloUsers()                                 , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GConditionalUser("GConditionalUser", false) , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GAdditional()                               , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GLoadBalancing()                            , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GArbitration()                              , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new BugFixes()                                  , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GXeUserMinProc("GMinProc", false)           , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GXeUserMaxProc("GMaxProc", false)           , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GXeMuSigmaProc("GMuSigmaProc", false)       , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new GXeMuSigmaExProc("GXeMuSigmaExProc", false) , /*addFunctionalData=*/true , /*addStressData=*/false );

            // Xenon Test Cases.
            // Post  the new Post XRL is  not been used 
            //AddChild(new GUserReplace("Xenon_UserReplace",true), /*addFunctionalData=*/true, /*addStressData=*/false);
            //AddChild(new GUserAdd("Xenon_UserAdd",true), /*addFunctionalData=*/true, /*addStressData=*/false);
            //AddChild(new GConditionalUser("Xenon_ConditionalUser",true), /*addFunctionalData=*/true, /*addStressData=*/false);
            //AddChild(new GXeUserMinProc(null,true), /*addFunctionalData=*/true, /*addStressData=*/false);
            //AddChild(new GXeUserMaxProc(null,true), /*addFunctionalData=*/true, /*addStressData=*/false);
            //AddChild(new GXeMuSigmaProc(null,true), /*addFunctionalData=*/true, /*addStressData=*/false);
              
            // Read
            AddChild( new GXestatsRead() , /*addFunctionalData=*/true , /*addStressData=*/false );

            // Enum
            AddChild( new XeEnumByRank()   , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new XeEnumByUser()   , /*addFunctionalData=*/true , /*addStressData=*/false );
            AddChild( new XeEnumByRating() , /*addFunctionalData=*/true , /*addStressData=*/false );

            // Config
            AddChild( new ConfigTest() , /*addFunctionalData=*/true , /*addStressData=*/false );

            // Direct LB Server
            AddChild( new DirectLBServerTest() , /*addFunctionalData=*/true , /*addStressData=*/false );

            // ERFR
            AddChild( new EstimateRankForRatings() , /*addFunctionalData=*/true , /*addStressData=*/false );
        }

        public override void PreRun()
        {
            // Titles 50-54
            uint[] titles = { 50, 51, 52, 53, 54};
            string pathToConfigFiles = "InputFiles\\Leaderboard\\";
            //let's make sure the title information is present...
            foreach (uint title in titles)
            {
                try
                {
                    TitleConfig.GetTitle(title);
                }
                catch (ApplicationException)
                {
                    //prop the title accordingly
                    Global.RO.Info("Title number " + title + " not found in NPDB--attempting to remedy via sql file...");
                    try
                    {
                        StreamReader file = File.OpenText(pathToConfigFiles + "leaderboard" + title + ".sql");
                        String sql;
                        sql = file.ReadToEnd();
                        Npdb npdb = new Npdb();
                        npdb.ConnectToServer();
                        npdb.IssueCommand(sql);
                        npdb.Close();

                    }
                    catch (Exception e)
                    {
                        Global.RO.Warn("Could not prop title " + title + "!  Test results may be inaccurate.");
                        Global.RO.Warn("Text is as follows:" + e.ToString());
                    }
                    Global.RO.Info("Title configuration info added successfully!");
                }
            }
        }

        public override void OneTimeSetup()
        {
            int maxval = ~(int)0;

            DBHelper db = new DBHelper();
            db.DeleteTitle( 201    );
            db.DeleteTitle( 301    );
            db.DeleteTitle( 401    );
            db.DeleteTitle( 0      );
            db.DeleteTitle( maxval );

            db.CreateV2LB( 201 , 10 , 0 , 0 , 0   , 0 , 6 );
            db.CreateV2LB( 201 , 11 , 0 , 0 , 0   , 0 , 6 );
            db.CreateV2LB( 201 , 12 , 0 , 0 , 0   , 0 , 0 );
            db.CreateV2LB( 201 , 13 , 0 , 0 , 0   , 0 , 0 );
            db.CreateV2LB( 201 , 14 , 0 , 0 , 0   , 0 , 0 );
            db.CreateV2LB( 201 , 15 , 0 , 0 , 0   , 0 , 0 );
            db.CreateV2LB( 201 , 16 , 0 , 0 , 0   , 0 , 0 );
            db.CreateV2LB( 201 , 20 , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 201 , 21 , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 201 , 22 , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 201 , 23 , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 201 , 24 , 0 , 5 , 500 , 0 , 0 );
            // create boundry titleid and leaderboard.

            db.CreateV2LB( 0      , 20    , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( maxval , 20    , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 301    , 1     , 0 , 5 , 500 , 0 , 0 );
            db.CreateV2LB( 301    , 65535 , 0 , 5 , 500 , 0 , 0 );

            // webenum
            db.CreateV2LB( 275 , 205 , 0 , 0 , 0 , 0 , 0 );

            // create LB for light Weight Leaderboards
            db.CreateV2LB( 401 , 10 , 0 , 0 , 0   , 10 , 0 );
            db.CreateV2LB( 401 , 11 , 0 , 0 , 0   , 10 , 0 );
            db.CreateV2LB( 401 , 12 , 0 , 0 , 0   , 10 , 0 );
            db.CreateV2LB( 401 , 13 , 0 , 0 , 0   , 10 , 0 );
            db.CreateV2LB( 401 , 14 , 0 , 0 , 0   , 10 , 0 );
            db.CreateV2LB( 401 , 20 , 0 , 5 , 500 , 10 , 0 );
            db.CreateV2LB( 401 , 21 , 0 , 5 , 500 , 10 , 0 );
            db.CreateV2LB( 401 , 22 , 0 , 5 , 500 , 10 , 0 );
            db.CreateV2LB( 401 , 23 , 0 , 5 , 500 , 10 , 0 );
            db.CreateV2LB( 401 , 24 , 0 , 5 , 500 , 10 , 0 );

            db.reloadStatFDs();
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\ConfigTest.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using xonline.common.config;

namespace StatsFD
{
	/// <summary>
	/// Summary description for ConfigTest.
	/// </summary>
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
	public class ConfigTest :TestNode
	{
		public ConfigTest()
		{
			ConfigTestBase.component= Component.xstatsfd;

			AddChild( new ConfigTestBase( Setting.stats_AllowAlternateDestination , "true"  ));
			AddChild( new ConfigTestBase( Setting.stats_allowTitleReset           , "false" ));
			AddChild( new ConfigTestBase( Setting.stats_allowUnverifiedWrite      , "true"  ));
//These are no longer used in Stats.
/*			AddChild( new ConfigTestBase( Setting.stats_dbMaxRetry                , "5"     ));
			AddChild( new ConfigTestBase( Setting.stats_dbRetryInteval            , "2000"  ));
*/

//These cannot pass, because 1)these settings are not overridden, and 2)ConfigTestBase will always
//fail non-dynamic settings that don't have overrides.
/*

			AddChild( new ConfigTestBase( Setting.sginfo_maxRetries               , "2"     , false));
			AddChild( new ConfigTestBase( Setting.sginfo_timeout                  , "500"   , false));
			AddChild( new ConfigTestBase( Setting.sginfo_verifyAuth               , "false" , false));
*/
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\DirectLBServerTest.cs ===
using System;
using System.Net;
using System.Collections;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.LBServer;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

using xonline.common.config;

namespace StatsFD
{
	/// <summary>
	/// Summary description for DirectLBServerTest.
	/// </summary>
	/// 
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
	abstract public class LBSrvTestBase : TestBase
	{
		public static int  recNum =0;
		public static bool  IsLBPopulated =false;
		protected static LeaderboardInfo[] lbinfos = new LeaderboardInfo[10];
		public void setLBtoReadWrite(int title, int lbid)
		{
			try
			{
				SetLbToReadWrite rwmsg = new SetLbToReadWrite(title,lbid);
				ProcCallResp resp= SendMsgToLBS(rwmsg,0);

						
			}
			catch(Exception)
			{ 
			}

		}
		public void PopulateLB()
		{
			
			try
			{
				if(!IsLBPopulated)
				{
					// set all lb to rewrite  before deleting 
					for(int i=0;i<lbinfos.Length;i++)
						setLBtoReadWrite(618,i);

					DBHelper db = new DBHelper();
					db.DeleteTitle(618);
				
					IsLBPopulated = true;
					
					for(int i=0;i<lbinfos.Length;i++)
						lbinfos[i]= new LeaderboardInfo((uint)(i),"",0,0,0);

					EnumLoader.StatsPoster tmp = new EnumLoader.StatsPoster(618,lbinfos);
					tmp.createLB();
					
					for(int i=0;i<lbinfos.Length;i++)
						tmp.AddUsers(1000,i, 50,SpecialAttribMask.Rating);
					
				}
					
				
			}
			catch( Exception )
			{
				IsLBPopulated = false;
				throw;
			}
		}
		public IPEndPoint LBSinfo(int LBindex)
		{
			IPEndPoint retval= null;
			IPEndPoint[] tmp =Global.XEnv.GetInterface(Interface.lbsvr);
			if(LBindex<tmp.Length)
				retval= tmp[LBindex];
			return  retval;
		}

		public bool WritetoLB(int lbx,int UserCount ,out string ErrorText)
		{
			bool retval = false;
			ErrorText="";
			try
			{
				EnumLoader.StatsPoster tmp = new EnumLoader.StatsPoster(618,lbinfos);
				//tmp.createLB();

				tmp.AddUsers(UserCount,lbx, 50,SpecialAttribMask.Rating,5000,1,0);
				retval = true;
			}
			catch(Exception ex)
			{
				ErrorText=ex.ToString();
				//System.Console.WriteLine( ex.ToString());
			}

			return retval;

		}

		public bool ReadFromLB(int lbx,ulong StartRank ,uint RCount ,out string ErrorText)
		{
			bool retval = false;
			ErrorText="";
			try
			{
				StatsSpec spec = new StatsSpec(lbinfos[lbx]._uiLbId,new ushort[]{1,3,5,7,9,11,15,21,25,30});
				StatsEnumByRankRequest req= new StatsEnumByRankRequest(618,StartRank,RCount,spec);

				StatsEnumResponse resp =req.Execute();
				verifyEnum(resp,req,(int)StartRank);
				retval= true;
				
			
				
			}
			catch(Exception ex)
			{
				ErrorText=ex.ToString();
				//System.Console.WriteLine( ex.ToString());
			}

			return retval;

		}

		public void verifyEnum(StatsEnumResponse resp,StatsEnumByRankRequest req, int startrank)
		{
		
			if(resp.ResultLen!= req.Specs.Length)
				throw new StatsException(707,"verify: XeStatsEnum Expected Result set : "+req.Specs.Length+" Recived :"+resp.ResultLen);
			
			StatsResultSet[] Results = resp.Result;

			for(int i=0 ;i<Results.Length ;i++)
			{
				StatsResultSet Result = Results[i];
				

				if(Result.ViewId != req.Specs[i].ViewId)
					throw new Exception(" Unexpected  view server= "+Result.ViewId+" Expected "+req.Specs[i].ViewId);
				uint viewid=(uint) req.Specs[i].ViewId;

				TitleLbKey tlbkey = new TitleLbKey(618,viewid);
				PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
				ArrayList enumlist = lb.GetRankedList();
				ulong totalEntries= (ulong)lb._rankedEntries.Count;

				if(Result.ViewSize!=totalEntries)
					throw new Exception("Wrong View Size Expected "+totalEntries+"Recived "+Result.ViewSize);

				

				int Columncount= req.Specs[i].ColumnIds.Length;


				for( int rowidx=0,lsti=startrank-1 ;rowidx <Result.RowsLen && lsti< (int)totalEntries ;rowidx++,lsti++)
				{
					StatsRow tmpRow = Result.Rows[rowidx];

					if(tmpRow.ColumnsLen!=Columncount)
						throw new StatsException(707,"verify: XeStatsRead Expected column count:"+Columncount+" Recived :"+tmpRow.ColumnsLen+" for view ID = "+Result.ViewId+" user id="+tmpRow.Puid);
					
					if(tmpRow.ColumnsLen ==0)
						return;

					PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._rankedEntries[lsti];

					if(tmpRow.Puid != PalyerEntry._ulUserId)
						throw new StatsException(707,"verify: XeStatsEnum Expected user:"+PalyerEntry._ulUserId+" Recived :"+tmpRow.Puid+" for view ID = "+viewid);

					if(tmpRow.Rank != PalyerEntry._uiRank)
						throw new StatsException(707,"verify: XeStatsEnum Expected Rank for user :"+PalyerEntry._uiRank+" Recived :"+tmpRow.Rank+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					if(tmpRow.Rating != (ulong)PalyerEntry._lRating)
						throw new StatsException(707,"verify: XeStatsEnum Expected rating for user :"+PalyerEntry._lRating+" Recived :"+tmpRow.Rating+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					XrlSubAttr[] SubAttr =tmpRow.Columns;
					for(int attidx=0;attidx<SubAttr.Length;attidx++)
					{
						if(PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
						{
							XrlSubAttr PlayerAttr  = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
							string error= null;
							if(!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr,ref SubAttr[attidx],ref error))
								throw new StatsException(707,error);

						}
						else
						{
							if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
								throw new StatsException(707,"Invalid Type Expected None");
							if( SubAttr[attidx].Data != null)
								throw new StatsException(707,"Invalid data Expected null");
						}
					}
				}
			}

			


		}

		public ProcCallResp SendMsgToLBS(StatsMessage msg,int Serverindex)
		{
			IPEndPoint server = LBSinfo(Serverindex);

			ProcCallResp resp =null;
			LBSClient _lbsclient = null;
			try
			{
				_lbsclient = new LBSClient("StatsTest");
				_lbsclient.Connect(server);
				LBSRequest req= new LBSRequest();
				req.AddProc(msg);

				ArrayList tmp = _lbsclient.Execute(req,recNum++);
				if(tmp !=null)
					resp = tmp.Count>0 ?(ProcCallResp)tmp[0]:null;	
			}
			finally
			{
				if(_lbsclient !=null)
					_lbsclient.DisConnect();
			}

			return resp;

		}


	}

	public class DirectLBServerTest :TestNode
	{
		public DirectLBServerTest()
		{
			//
			// TODO: Add constructor logic here
			 AddChild(new CheckRead_writeMode());
			 AddChild(new Checkload_unload());
			 AddChild(new NegCheckRead_writeMode()); // lb or title  does not exist
			 AddChild(new NegCheckload_unload());		// lb or title  does not exist
		}

		public class CheckRead_writeMode : LBSrvTestBase
		{
			public CheckRead_writeMode()
			{
			}

			override protected void Execute()
			{
				string error= null;
				PopulateLB();

				SetLbToReadOnly msg = new SetLbToReadOnly(618,1);

				ProcCallResp resp= SendMsgToLBS(msg,0);
				if(resp.ErrMsg !=null)
				 throw new Exception(resp.ErrMsg.text);

				//verify that the leaderboard is read only.

				if(WritetoLB(1,1,out error))
					throw new Exception(" the LB is Not set to Read Only mode");

				if(!ReadFromLB(1,1,100,out error))
					throw new Exception(" unable to read data from a ReadOnly LB");

				// revert the lb to readwrite 

				SetLbToReadWrite rwmsg = new SetLbToReadWrite(618,1);
				ProcCallResp resp2= SendMsgToLBS(rwmsg,0);
				if(resp2.ErrMsg !=null)
					throw new Exception(resp2.ErrMsg.text);

				if(!WritetoLB(1,1,out error))
					throw new Exception(error);

				if(!ReadFromLB(1,1,100,out error))
					throw new Exception(" unable to read data from a ReadOnly LB");

				ResultCode = TEST_RESULTS.PASSED;

			}

		}
		public class Checkload_unload : LBSrvTestBase
		{
			public Checkload_unload()
			{
			}

			override protected void Execute()
			{
				string error= "";
				PopulateLB();

				SetLbToReadOnly msg = new SetLbToReadOnly(618,1);
				ProcCallResp resp= SendMsgToLBS(msg,0);

				int nSwapSeed=0;
				if(resp!=null && resp.RowsetRows !=null && ((RowsetRow)resp.RowsetRows[0]).rgColumns.Length>0)
				{
					nSwapSeed = ((ParamINT32)((RowsetRow)resp.RowsetRows[0]).rgColumns[0].pvalue).val;
				}

				
				byte bSafe = 0; 
				while(bSafe<=0)
				{
					IsSafeToDeleteLb msgIssafe = new IsSafeToDeleteLb(nSwapSeed);
					ProcCallResp respissafe= SendMsgToLBS(msgIssafe,0);
					if(respissafe!=null && respissafe.RowsetRows !=null && ((RowsetRow)respissafe.RowsetRows[0]).rgColumns.Length>0)
					{
						bSafe = ((ParamINT8)((RowsetRow)respissafe.RowsetRows[0]).rgColumns[0].pvalue).val;
					}
				}
				

				UnLoadOneLb msg1 = new UnLoadOneLb(618,1);
				ProcCallResp resp1= SendMsgToLBS(msg1,0);
				if(resp1!=null && resp1.ErrMsg !=null)
					throw new Exception(resp.ErrMsg.text);

				//verify that the leaderboard is read only.

				if(WritetoLB(1,1,out error))
					throw new Exception(" the LB is Not set to Read Only mode");

				if(ReadFromLB(1,1,100,out error))
					throw new Exception(" unable to read data from a ReadOnly LB");

				// revert the lb to readwrite 

				LoadOneLb msg2 = new LoadOneLb(618,1);
				ProcCallResp resp2= SendMsgToLBS(msg2,0);
				if(resp2!=null && resp2.ErrMsg !=null)
					throw new Exception(resp2.ErrMsg.text);

				SetLbToReadWrite rwmsg = new SetLbToReadWrite(618,1);
				ProcCallResp resp3= SendMsgToLBS(rwmsg,0);
				if(resp3.ErrMsg !=null)
					throw new Exception(resp3.ErrMsg.text);

				if(!WritetoLB(0,1,out error))
					throw new Exception(error);

				if(!WritetoLB(1,1,out error))
					throw new Exception(error);

				if(!WritetoLB(1,1,out error))
					throw new Exception(error);

				if(!ReadFromLB(1,1,100,out error))
					throw new Exception(" unable to read data from a ReadOnly LB");

				ResultCode = TEST_RESULTS.PASSED;

			}

		}
		public class NegCheckRead_writeMode : LBSrvTestBase
		{
			public NegCheckRead_writeMode()
			{
			}

			override protected void Execute()
			{
				SetLbToReadOnly msg = new SetLbToReadOnly(618,10);

				ProcCallResp resp= SendMsgToLBS(msg,0);
				if(resp.ErrMsg ==null)
					throw new Exception("Server should return an error while trying to set readonly for a unknown LB");

				
				// revert the lb to readwrite 

				SetLbToReadWrite rwmsg = new SetLbToReadWrite(618,10);
				ProcCallResp resp2= SendMsgToLBS(rwmsg,0);
				if(resp2.ErrMsg ==null)
					throw new Exception("Server should return an error while trying to set read write mode for a unknown LB");

				

				ResultCode = TEST_RESULTS.PASSED;

			}

		}
		public class NegCheckload_unload : LBSrvTestBase
		{
			public NegCheckload_unload()
			{
			}

			override protected void Execute()
			{
				LoadOneLb msg = new LoadOneLb(618,10);

				ProcCallResp resp= SendMsgToLBS(msg,0);
				if(resp.ErrMsg ==null)
					throw new Exception("Server should return an error while trying to set readonly for a unknown LB");

				
				// revert the lb to readwrite 

				UnLoadOneLb rwmsg = new UnLoadOneLb(618,10);
				ProcCallResp resp2= SendMsgToLBS(rwmsg,0);
				if(resp2.ErrMsg ==null)
					throw new Exception("Server should return an error while trying to set read write mode for a unknown LB");

				

				ResultCode = TEST_RESULTS.PASSED;

			}

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\TestBases\PlayerTeamTestBase.cs ===
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
    public class PlayerTeamTestBase : TestBase
    {
        protected int _titleId;
        protected LeaderboardInfo[] _lbId;

        public static readonly ulong TeamMask = 0xFE00000000000000;

        private int _maxReadWrites = 0;

        public PlayerTeamTestBase(int title, LeaderboardInfo[] _lbIds)
        {
            _titleId = title;
            _lbId = _lbIds;
        }

        public PlayerTeamTestBase(int title, LeaderboardInfo[] _lbIds, int RWLimit)
        {
            _titleId = title;
            _lbId = _lbIds;
            _maxReadWrites = RWLimit;
        }

        new virtual protected void Run()
        {}

        override protected void Execute()
        {
            DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
            db.ConfigureTitle(_titleId, _lbId);

            if (_maxReadWrites > 0)
            {
                db.SetTitleReadWrite(_titleId, _maxReadWrites);
                db.reloadStatFDs();
            }

            Run();
            ResultCode = TEST_RESULTS.PASSED;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\TestBases\StatsTestBase.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
    public class StatsTestBase : TestBase
    {
        protected uint _titleId;
        protected LeaderboardInfo[] LBid = null;
        protected ulong Userbase = 5000;

        protected RandomEx _RandGen = new RandomEx();

        public StatsTestBase(uint title)
        {
            _titleId = title;
            LBid = null;
        }

        public StatsTestBase(uint title, LeaderboardInfo[] lbids)
        {
            _titleId = title;
            LBid = lbids;
        }

        public void createLB()
        {
            // change this code to work with new LB server
            if (LBid != null)
            {
                DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
                db.ConfigureTitle((int)_titleId, LBid);
            }
        }

        new virtual protected void Run()
        { }

        override protected void Execute()
        {
            if (LBid != null)
            {
                DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
                db.ConfigureTitle((int)_titleId, LBid);
            }

            Run();  // Throws an exception on failure

            ResultCode = TEST_RESULTS.PASSED;
        }

        public void AddUsers(int count, int lbindex)
        {
            AddUsers(count, lbindex, 15);
        }

        public void AddUsers(int count, int lbindex, uint Attcount)
        {
            AddUsers(count, lbindex, Attcount, SpecialAttribMask.Rating, 5);
        }

        public void AddUsers(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {
            ulong userid = Userbase;
            int total = (count % 4 == 0) ? (count / 4) : count / 4 + 1;

            XRLSetRequest[] reqs = new XRLSetRequest[total];
            for (int i = 0; i < total; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 4);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, userid);
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);

        }

        public void AddSingleUsersPerReq(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {
            ulong userid = Userbase;

            XRLSetRequest[] reqs = new XRLSetRequest[count];
            for (int i = 0; i < count; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(LBid[lbindex]._uiLbId, userid, Attcount, spattmask, ((ulong)(i * 2) + userid++));
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);

        }

        public void AddUsersRandomRating(int count, int lbindex, uint Attcount, int spattmask, int reqperthread)
        {

            XRLSetRequest[] reqs = new XRLSetRequest[count];
            ulong userid = Userbase;
            for (int i = 0; i < count; i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(LBid[lbindex]._uiLbId, userid++, Attcount, spattmask, (ulong)_RandGen.Next(1000));
                reqs[i] = req;
            }

            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(reqs, (reqs.Length < 5) ? reqs.Length : reqperthread);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\TestBases\EnumTestBase.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
    public class EnumTB : TestNode
    {
        public uint title = 60;
        public uint commonLB = 40;
        public uint commonLWLB = 41;
        public void Fillusers()
        {
            Fillusers(15);
        }

        public void Fillusers(int attribcount)
        {
            StatsTestBase tmp = new StatsTestBase(title, new LeaderboardInfo[] { new LeaderboardInfo(commonLB, "", 0, 0, 0) });
            tmp.createLB();
            tmp.AddUsers(1000, 0);

        }

        public void FillLWusers(int attribcount)
        {
            StatsTestBase tmp = new StatsTestBase(title, new LeaderboardInfo[] { new LeaderboardInfo(commonLWLB, 1) });
            tmp.createLB();
            tmp.AddUsers(120, 0);

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\TestBases\LBTestBase.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;

namespace StatsFD
{
    [TestGroup, Owner("jeffng"), TestFrequency("Regression"), TestCasePriority(3)]
    public abstract class LBTestBase : TestBase
    {
        protected void VerifyXRLResponse(XRLResponse resp, uint hr)
        {
            try
            {
                VerifyXRLResponse(null, null, resp, hr);
            }
            catch (TestCaseException e)
            {
                // Trashing the stack on purpose, we don't need a stack that shows
                // multiple calls to VerifyXRLResponse due to overloading >.<
                throw e;
            }
        }

        protected void VerifyXRLResponse(string area, XRLResponse resp, uint hr)
        {
            try
            {
                VerifyXRLResponse(area, null, resp, hr);
            }
            catch (TestCaseException e)
            {
                // Trashing the stack on purpose, we don't need a stack that shows
                // multiple calls to VerifyXRLResponse due to overloading >.<
                throw e;
            }
        }

        protected void VerifyXRLResponse(string area, string variable, XRLResponse resp, uint hr)
        {
            string prepend = ( area     != null ) ? area + ": " : String.Empty  ;
            string var     = ( variable != null ) ? variable    : "XRLResponse" ;

            if (resp == null)
            {
                throw new TestCaseException(String.Format(
                    "{0}{1} was null."
                  , prepend
                  , var
                ));
            }

            if (resp.xResult != hr)
            {
                throw new TestCaseException(String.Format(
                    "{0}{1}.xResult = 0x{2:X8} (expected: 0x{3:X8})"
                  , prepend
                  , var
                  , resp.xResult
                  , hr
                ));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V1\GEnumLB.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	public class GEnumLB : EnumTB
	{
		public GEnumLB()
		{
            AddChild(new EnumByUser(60,this));
            AddChild(new EnumByRank(60,this));
            AddChild(new EnumByUserWithAttirb(60,this));
            AddChild(new EnumByRankWithAttirb(60,this));
            AddChild(new EnumByRankMaxAttirb(60));
            AddChild(new EnumByRankNonExistentAttirb(60));
            AddChild(new EnumByUser50A50Bwith48A48B(60));
            AddChild(new EnumByUser50A50Bwith50A50B(60));
            AddChild(new EnumByUser50A50Bwith52A52B(60));
            AddChild(new EnumByRankTop100with96UsersonLB(60));
            AddChild(new EnumByRankTop100with100UsersonLB(60));
            AddChild(new EnumByRankTop100with104UsersonLB(60));
            AddChild(new EnumByFirstUser(60));
            AddChild(new EnumBySecondUser(60));
            AddChild(new EnumByLastUser(60));
            AddChild(new EnumBySecLastUser(60));
            AddChild(new EnumByLastRank(60));
            AddChild(new EnumNonExistentRank(68));
            AddChild(new EnumNonExistentUser(68));
            AddChild(new EnumInvalidTitle(68));
            AddChild(new EnumInvalidLBType(68));
            AddChild(new EnumEmptyLB(68));
            AddChild(new InvalidEnumShortMessage(68));
            AddChild(new InvalidEnumlongMessage(68));
            AddChild(new EnumByUserNonExistentRating(68));
            AddChild(new EnumByRankZeroPageSize(68));
            AddChild(new EnumByRank1000PageSize(68));
            AddChild(new EnumByRankNicknames(68));

            AddChild(new EnumDuplicateAttrib(60,this));
		}
	}

	class EnumByRankNicknames : StatsTestBase
	{
		
		public EnumByRankNicknames(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(10,0,10,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,10);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,10,15,SpecialAttribMask.Nickname);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,10);
		}

	}

	class EnumByRank1000PageSize : StatsTestBase
	{
		public EnumByRank1000PageSize(uint title):base(title,new LeaderboardInfo[]{  new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			AddUsersRandomRating(1100,0,10,SpecialAttribMask.Rating,50);
			g_Statobj.TManager.VerifyEnumPlayers(this._titleId,false);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,1000,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,1000);

		}
	}

	class EnumByRankZeroPageSize : StatsTestBase
	{
		
		public EnumByRankZeroPageSize(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,0,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class EnumByUserNonExistentRating : StatsTestBase
	{
		
		public EnumByUserNonExistentRating(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,10,SpecialAttribMask.Null,5);
			

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,5,10,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class InvalidEnumlongMessage : StatsTestBase
	{
		
		public InvalidEnumlongMessage(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			XRLEnumLBResponse resp= _req.Execute(false,true);
			if(resp.xResult!=HResult.S_OK)
				throw new StatsException(707,"unexpected XError Recived Expected : "+HResult.XONLINE_E_STAT_BAD_REQUEST+" Recive "+resp.xResult);


		}

	}
	
    class InvalidEnumShortMessage : StatsTestBase
	{
		
		public InvalidEnumShortMessage(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			XRLEnumLBResponse resp=_req.Execute(true,false);
			if(resp.xResult!=HResult.XONLINE_E_STAT_BAD_REQUEST)
				throw new StatsException(707,"unexpected XError Recived Expected : "+HResult.XONLINE_E_STAT_BAD_REQUEST+" Recive "+resp.xResult);

		}

	}

	class EnumEmptyLB : StatsTestBase
	{
		
		public EnumEmptyLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class EnumInvalidLBType : StatsTestBase
	{
		
		public EnumInvalidLBType(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,600,10,0,100,15,SpecialAttribMask.Rating);
			XRLEnumLBResponse resp= _req.Execute();
			if(resp.xResult != HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD)
				throw new System.Exception("Invalid Xerror Expected "+HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD+"Recived"+resp.xResult);
			

		}

	}

	class EnumInvalidTitle : StatsTestBase
	{
		
		public EnumInvalidTitle(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId+600,1,10,0,100,15,SpecialAttribMask.Rating);

			XRLEnumLBResponse resp= _req.Execute();
			if(resp.xResult != HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD)
				throw new System.Exception("Invalid Xerror Expected "+HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD+"Recived"+resp.xResult);
			

		}

	}

	class EnumNonExistentRank : StatsTestBase
	{
		
		public EnumNonExistentRank(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,10000,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class EnumNonExistentUser : StatsTestBase
	{
		
		public EnumNonExistentUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase+5000,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class EnumByLastRank : StatsTestBase
	{
		
		public EnumByLastRank(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,100,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,1);

		}

	}

	//EnumByFirstUser

	class EnumBySecondUser : StatsTestBase
	{
		
		public EnumBySecondUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase+98,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByFirstUser : StatsTestBase
	{
		
		public EnumByFirstUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase+99,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumBySecLastUser : StatsTestBase
	{
		
		public EnumBySecLastUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase+1,1,50,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,50);

		}

	}

	class EnumByLastUser : StatsTestBase
	{
		
		public EnumByLastUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase,1,50,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,50);

		}

	}

	class EnumByRankTop100with104UsersonLB : StatsTestBase
	{
		
		public EnumByRankTop100with104UsersonLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(104,0,10,SpecialAttribMask.Rating,2);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByRankTop100with100UsersonLB : StatsTestBase
	{
		public EnumByRankTop100with100UsersonLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{ }

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);
		}
	}

	class EnumByRankTop100with96UsersonLB : StatsTestBase
	{
		
		public EnumByRankTop100with96UsersonLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(95,0,10,SpecialAttribMask.Rating,6);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,96);

		}

	}

	class EnumByUser50A50Bwith52A52B : StatsTestBase
	{
		
		public EnumByUser50A50Bwith52A52B(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(104,0,10,SpecialAttribMask.Rating,2);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,this.Userbase+50,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByUser50A50Bwith50A50B : StatsTestBase
	{
		
		public EnumByUser50A50Bwith50A50B(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,this.Userbase+50,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByUser50A50Bwith48A48B : StatsTestBase
	{
		
		public EnumByUser50A50Bwith48A48B(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(95,0,10,SpecialAttribMask.Rating,6);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,this.Userbase+48,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,96);

		}

	}

	class EnumByRankNonExistentAttirb : StatsTestBase
	{
		
		public EnumByRankNonExistentAttirb(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,10);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,5,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,5);

		}

	}

	class EnumByRankMaxAttirb : StatsTestBase
	{
		
		public EnumByRankMaxAttirb(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,1);
			AddUsers(5,0,64,SpecialAttribMask.Null,5);
			

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,1,0,5,64,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,5);

		}

	}

	class EnumByRankWithAttirb : StatsTestBase
	{
		GEnumLB _group=null;
		public EnumByRankWithAttirb(uint title,GEnumLB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers();

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,554,0,100,5,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByUserWithAttirb : StatsTestBase
	{
		GEnumLB _group=null;
		public EnumByUserWithAttirb(uint title,GEnumLB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers();

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,this.Userbase+300,1,100,5,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	//EnumDuplicateAttrib

	class EnumDuplicateAttrib : StatsTestBase
	{
		GEnumLB _group=null;
		public EnumDuplicateAttrib(uint title,GEnumLB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers(5);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,40,0,100,new ushort []{SpecialAttrib.Rating,1,SpecialAttrib.Rating,1});

			XRLEnumLBResponse _resp=_req.ExecuteEx();
			
			if(_resp.xResult != HResult.XONLINE_E_SERVER_ERROR)
				throw new Exception("unexpected XError :"+_resp.xResult );

		}

	}

	class EnumByRank : StatsTestBase
	{
		GEnumLB _group=null;
		public EnumByRank(uint title,GEnumLB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers(1);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,400,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class EnumByUser : StatsTestBase
	{
		GEnumLB _group=null;
		public EnumByUser(uint title,GEnumLB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers(1);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,this.Userbase+500,1,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}


	
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V1\GLWLBEnum.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	public class GLWLBEnum : EnumTB
	{
		public GLWLBEnum()
		{
            AddChild(new LWLBEnumByUser(60,this));
            AddChild(new LWLBEnumByRank(60,this));
            AddChild(new LWLBEnumByUserWithAttirb(60,this));
            AddChild(new LWLBEnumByRankWithAttirb(60,this));
            AddChild(new LWLBEnumByRankMaxAttirb(60));
            AddChild(new LWLBEnumByRankNonExistentAttirb(60));
            AddChild(new LWLBEnumByLastUser(60));
            AddChild(new LWLBEnumByLastRank(60));
            AddChild(new LWLBEnumNonExistentRank(60));
            AddChild(new LWLBEnumNonExistentUser(60));
            AddChild(new LWLBEnumByUserNonExistentRating(68));
            AddChild(new LWLBEnumByRankZeroPageSize(68));
            AddChild(new DynamicallychangedtoLWLB(60,this));
            AddChild(new DynamicallychangedtoLWLB2(60,this));
		}
	}

	class LWLBEnumByRankZeroPageSize : StatsTestBase
	{
		
		public LWLBEnumByRankZeroPageSize(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,1,0,0,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class LWLBEnumByUserNonExistentRating : StatsTestBase
	{
		
		public LWLBEnumByUserNonExistentRating(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,10,SpecialAttribMask.Null,5);
			

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,1,0,5,10,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class LWLBEnumNonExistentRank : StatsTestBase
	{
		
		public LWLBEnumNonExistentRank(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,10000,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,0);

		}

	}

	class LWLBEnumNonExistentUser : StatsTestBase
	{
		
		public LWLBEnumNonExistentUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,1,Userbase+5000,21,100,15,SpecialAttribMask.Rating);
			XRLEnumLBResponse resp= _req.Execute();
			if(resp.RepUserLBLen!=0)
				throw new System.Exception("should return zero  records.");
			

		}

	}

	class LWLBEnumByLastRank : StatsTestBase
	{
		
		public LWLBEnumByLastRank(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,100,0,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,1);

		}

	}

	class LWLBEnumByLastUser : StatsTestBase
	{
		
		public LWLBEnumByLastUser(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(100,0,10,SpecialAttribMask.Rating,5);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,Userbase,1,100,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class LWLBEnumByRankNonExistentAttirb : StatsTestBase
	{
		
		public LWLBEnumByRankNonExistentAttirb(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,10);
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,1,0,5,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,5);

		}

	}

	class LWLBEnumByRankMaxAttirb : StatsTestBase
	{
		
		public LWLBEnumByRankMaxAttirb(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
			
		}

		override protected void Run()
		{
			AddUsers(5,0,64,SpecialAttribMask.Rating,5);
			

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,21,1,0,5,64,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,5);

		}

	}

	class LWLBEnumByRankWithAttirb : StatsTestBase
	{
		EnumTB _group=null;
		public LWLBEnumByRankWithAttirb(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.FillLWusers(15);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLWLB,25,0,100,5,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,76);

		}

	}

	class LWLBEnumByUserWithAttirb : StatsTestBase
	{
		EnumTB _group=null;
		public LWLBEnumByUserWithAttirb(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.FillLWusers(10);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLWLB,this.Userbase+70,1,100,5,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class LWLBEnumByRank : StatsTestBase
	{
		EnumTB _group=null;
		public LWLBEnumByRank(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.FillLWusers(1);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLWLB,50,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,51);

		}

	}

	class LWLBEnumByUser : StatsTestBase
	{
		EnumTB _group=null;
		public LWLBEnumByUser(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.FillLWusers(1);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLWLB,this.Userbase+70,1,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,100);

		}

	}

	class DynamicallychangedtoLWLB : StatsTestBase
	{
		EnumTB _group=null;
		public DynamicallychangedtoLWLB(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers(10);

			
			//change the lb to lwlb and enum make sure only top 100 return.
			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			db.UpdateLeaderBoards((int)_titleId,(int)_group.commonLB,0,1,0);
			Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingforlb 0x3c 0x28");


			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,90,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,11);
			// trim ln and change to regular back and make sure 110 return.
			DBHelper.TrimLB();
			db.UpdateLeaderBoards((int)_titleId,(int)_group.commonLB,0,0,0);
			Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingforlb 0x3c 0x28");

			XRLEnumLBRequest _req2 = new XRLEnumLBRequest(_titleId,_group.commonLB,90,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req2,100);

			XRLEnumLBRequest _req3 = new XRLEnumLBRequest(_titleId,_group.commonLB,200,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req3,1);


		}

	}

	class DynamicallychangedtoLWLB2 : StatsTestBase
	{
		EnumTB _group=null;
		public DynamicallychangedtoLWLB2(uint title,EnumTB  group):base(title)
		{
			_group = group;
		}

		override protected void Run()
		{
			//
			_group.Fillusers(10);

			
			//change the lb to lwlb and enum make sure only top 100 return.
			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			db.UpdateLeaderBoards((int)_titleId,(int)_group.commonLB,0,1,0);
			Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingfortitle 0x3c");


			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,_group.commonLB,90,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,11);
			// trim ln and change to regular back and make sure 110 return.
			DBHelper.TrimLB();
			db.UpdateLeaderBoards((int)_titleId,(int)_group.commonLB,0,0,0);
			Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingfortitle 0x3c");

			XRLEnumLBRequest _req2 = new XRLEnumLBRequest(_titleId,_group.commonLB,90,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req2,100);

			XRLEnumLBRequest _req3 = new XRLEnumLBRequest(_titleId,_group.commonLB,200,0,100,0,SpecialAttribMask.Null);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req3,1);


		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V1\GReset.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	public class GReset : TestNode
	{
		public GReset()
		{
            AddChild(new Reset1User(60));
            AddChild(new Reset10User(60));
            AddChild(new ResetAllUsers(60));
            AddChild(new ResetAllLBs(60));
            AddChild(new InvalidTitle(68));
            AddChild(new InvalidLBType(68));
            AddChild(new NonExistentUserReset(68));
		
            AddChild(new InValidShortMessage(68));
            AddChild(new InValidLongMessage(68));
            AddChild(new ResetUserNoAuth(68));
			//
            AddChild(new ResetWeeklyLB(60));
            AddChild(new ResetMonthlyLB(60));
            AddChild(new ResetBiMonthlyLB(60));
            AddChild(new ResetQuarterlyLB(60));
            AddChild(new ResetSemiAnnualLB(60));
            AddChild(new ResetAnnualLB(60));
            AddChild(new DynamicResetChange(60));
		}
	}

	class DynamicResetChange : StatsTestBase
	{
		public DynamicResetChange(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(76,0,ResetTypes.NoReset),
																			 new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			while(true)
			{
				if(dt.Month == 1 || dt.Month == 7 )
					break;
				dt =dt.AddMonths(1);
			}

			db.ResetLeaderboards(dt);
			// verify that nothing got reset lb 76 still has 12 rows
			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[0]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12); 

			// change the Reset type to SemiAnnual
			db.UpdateLeaderBoards((int)_titleId,(int)LBid[0]._uiLbId,ResetTypes.SemiAnnually,0,0);
			Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingfortitle 0x3c");

			db.ResetLeaderboards(dt);
			// call resetleaderboards and leaderboard 76 will get reset 
			//verify  leaderboard 76 is empty and 1 has 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req1 = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req1,12);
		}
	}

	class ResetAnnualLB : StatsTestBase
	{
		public ResetAnnualLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(76,0,ResetTypes.annually),
																				 new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			while(true)
			{
				if(dt.Month == 1 )
					break;
				dt =dt.AddMonths(1);
			}

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetSemiAnnualLB : StatsTestBase
	{
		public ResetSemiAnnualLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(75,0,ResetTypes.SemiAnnually),
																				new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			while(true)
			{
				if(dt.Month == 1 || dt.Month == 7 )
					break;
				dt =dt.AddMonths(1);
			}

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetQuarterlyLB : StatsTestBase
	{
		public ResetQuarterlyLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(74,0,ResetTypes.quarterly),
																				new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			while(true)
			{
				if(dt.Month == 1 || dt.Month == 4|| dt.Month == 7 || dt.Month == 10)
					break;
				dt =dt.AddMonths(1);
			}

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetBiMonthlyLB : StatsTestBase
	{
		public ResetBiMonthlyLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(73,0,ResetTypes.bimonthly),
																			  new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			while(dt.Month%2 == 0)
				dt =dt.AddMonths(1);

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetMonthlyLB : StatsTestBase
	{
		public ResetMonthlyLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(72,0,ResetTypes.monthly),
																			 new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.Day != 1)
				dt =dt.AddDays(1);

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetWeeklyLB : StatsTestBase
	{
		public ResetWeeklyLB(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(71,0,ResetTypes.Weekly),
																			new LeaderboardInfo(1,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			DateTime dt= DateTime.Now;
			
			while(dt.DayOfWeek != 0)
				dt =dt.AddDays(1);

			db.ResetLeaderboards(dt);

			// call resetleaderboards and leaderboard 71 will get reset 
			//verify  leaderboard 71 is empty and 72 was 12 records.
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);

			XRLEnumLBRequest _req = new XRLEnumLBRequest(_titleId,LBid[1]._uiLbId,1,0,20,15,SpecialAttribMask.Rating);
			g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req,12);
			

		}

	}

	class ResetUserNoAuth : StatsTestBase
	{
		public ResetUserNoAuth(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(4,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+1,1);
			XRLResponse resp= req.Execute(false,false,true);
            if (resp.xResult != HResult.XONLINE_E_STAT_ERROR)
                throw new TestCaseException("Invalid HR Server:" + resp.xResult + " Expected :" + HResult.XONLINE_E_STAT_ERROR);

			
			g_Statobj.TManager.VerifyEnumPlayers(_titleId,false);

		}

	}

	class InValidLongMessage : StatsTestBase
	{
		public InValidLongMessage(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(4,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+1,1);
			XRLResponse resp= req.Execute(false,true,false);
			if(resp.xResult != HResult.XONLINE_E_INVALID_REQUEST)
				throw new TestCaseException("Invalid HR Server:"+resp.xResult+" Expected :"+HResult.XONLINE_E_STAT_BAD_REQUEST);

			
			g_Statobj.TManager.VerifyEnumPlayers(_titleId,false);

		}

	}

	class InValidShortMessage : StatsTestBase
	{
		public InValidShortMessage(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(4,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+1,1);
			XRLResponse resp= req.Execute(true,false,false);
			if(resp.xResult != HResult.XONLINE_E_STAT_BAD_REQUEST)
				throw new TestCaseException("Invalid HR Server:"+resp.xResult+" Expected :"+HResult.XONLINE_E_STAT_BAD_REQUEST);

			g_Statobj.TManager.VerifyEnumPlayers(_titleId,false);
			

		}

	}

	class NonExistentUserReset : StatsTestBase
	{
		public NonExistentUserReset(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+5+5000,1);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.S_OK,true);

			
			

		}

	}

	class InvalidLBType : StatsTestBase
	{
		public InvalidLBType(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+5,1+500);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,true);

			
			

		}

	}

	class InvalidTitle : StatsTestBase
	{
		public InvalidTitle(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId+5000,Userbase+5,1);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD,true);

			
			

		}

	}

	class ResetAllLBs : StatsTestBase
	{
		public ResetAllLBs(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0),new LeaderboardInfo(2,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			XRLResetUser req2 = new XRLResetUser(_titleId,0,0);
			g_Statobj.TManager.ExecuteAndVerify(req2,HResult.S_OK,false);
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,1,0);
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,2,0);
			

		}

	}

	class ResetAllUsers : StatsTestBase
	{
		public ResetAllUsers(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0),new LeaderboardInfo(2,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			XRLResetUser req2 = new XRLResetUser(_titleId,0,1);
			g_Statobj.TManager.ExecuteAndVerify(req2,HResult.S_OK,true);
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,1,0);
			

		}

	}

	class Reset10User : StatsTestBase
	{
		public Reset10User(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			for(int i=0;i<9;i++)
			{
				XRLResetUser req = new XRLResetUser(_titleId,Userbase+(ulong)i,1);
				g_Statobj.TManager.ExecuteAndVerify(req,HResult.S_OK,false);
			}

			XRLResetUser req2 = new XRLResetUser(_titleId,Userbase+11,1);
			g_Statobj.TManager.ExecuteAndVerify(req2,HResult.S_OK,true);
			

		}

	}

	class Reset1User : StatsTestBase
	{
		public Reset1User(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+5,1);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.S_OK,true);

			
			

		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\GetUserData.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using ServerTestFramework;
using System.Threading;
using System.ComponentModel;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Database;
using xonline.common.config;

namespace StatsFD
{
    class Top100Users
    {
        private ulong[] users = new ulong[100];
        private uint Postowrite = 0;
        private uint lastreturned = 0;
        private uint CurrentSize = 0;

        public Top100Users()
        {
        }

        public void AddUser(ulong Puid)
        {
            lock (this)
            {
                if (CurrentSize < 100)
                    CurrentSize++;

                if (CurrentSize >= 100 && Postowrite >= CurrentSize)
                    Postowrite = 0;
                users[Postowrite] = Puid;
                Postowrite++;
            }
        }

        public ulong getRandomPuid()
        {
            ulong temp;
            lock (this)
            {

                if (lastreturned >= CurrentSize)
                    lastreturned = 0;

                temp = users[lastreturned];
                lastreturned++;
            }
            return temp;
        }
    }

    class StressUsers
    {
        public ulong m_puid;
        public string m_gamertag;
        public StressUsers(ulong puid, string gamerTg)
        {
            m_puid = puid;
            m_gamertag = gamerTg;
        }
    }

    class uodbUsersList
    {
        protected StressUsers[] UserList;
        protected int CurrentNoOfUsers = 0;

        public uodbUsersList()
        {

        }

        public int FillUsers(string gamertagbase, int count)
        {
            string[] uodb = Global.XEnv.GetServerListByInterface(Interface.uodb);
            System.Text.StringBuilder sb = new System.Text.StringBuilder(128);
            foreach (string db in uodb)
            {
                if (sb.Length > 0)
                    sb.Append(", ");
                sb.Append(db);
            }

            Global.RO.Info("Connecting to UODB ({0})", sb.ToString());

            CPUIDList ptemp = new CPUIDList(130000);
            UodbWS.PopulatePuidListFromNames(gamertagbase, ref ptemp);

            int plistsize = ptemp.GetSize();
            UserList = new StressUsers[count];

            for (int i = 0; i < plistsize; i++)
            {
                PuidName listofpuids = ptemp.GetPuidName();
                int index = (int)(0x000a000000000000 - listofpuids.Puid);
                if (index <= count)
                {
                    UserList[index - 1] = new StressUsers(listofpuids.Puid, listofpuids.GamerTag);
                }
            }
            CurrentNoOfUsers = plistsize;

            return count;
        }

        public ulong getPuidAtIndex(long index)
        {
            ulong puid = 0;
            if (index < CurrentNoOfUsers)
                puid = UserList[index].m_puid;


            return puid;
        }

        public string getGTagAtIndex(long index)
        {
            string gtag = null;

            if (index < CurrentNoOfUsers)
            {
                gtag = UserList[index].m_gamertag;
            }

            return gtag;
        }
    }

    class StatsStressSupport
    {
        static public uint GameStartWtireLB = 15;
        static protected uodbUsersList UserList = new uodbUsersList();
        static public uint[] TitleIdList = new uint[] { 50, 51, 52, 53 }; // changinf 10 to 13 to 50 to 53
        static public uint[][] LWLBTypeList = new uint[3][] { new uint[] { 10, 11, 12, 21 }, new uint[] { 11, 10, 12, 22 }, new uint[] { 12, 11, 10, 23 } }; // where 21 is a light weight LB
        static public uint[][] LBTypeList = new uint[3][] { new uint[] { 13, 11, 12, 10, 14 }, new uint[] { 14, 13, 12, 11, 10 }, new uint[] { 13, 12, 10, 11, 14 } };
      //static public  uint[] LWLBTypeList = new uint[]{10,11,12,21};// // where 21 is a light weight LB
        static public uint[] LBWithAttTypeList = new uint[] { 10, 11, 12, 31 }; // where 31 is a LB with attachments

        static Top100Users title10 = new Top100Users();
        static Top100Users title11 = new Top100Users();
        static Top100Users title12 = new Top100Users();
        static Top100Users title13 = new Top100Users();
    //!!static protected  int TitleIdListSize_1 =(int)TypeDescriptor.GetConverter(TitleIdListSize_1).ConvertFromString(Global.Settings.Get("Group Global Data","NoOfTitlesTouse","3"));
        static public int TitleIdListSize_1 = 3;
        static public int LBTypeListSize = 5;
        static public int LWLBTypeListSize = 4;
        static public int LBWithAttTypeListSize = 4;

        static private long puidindexnew = 0;
        static private long puidindex = -1;
        static private long RatingT10 = 400000;
        static private long RatingT11 = 400000;
        static private long RatingT12 = 400000;
        static private long RatingT13 = 400000;
        static public int NumberUSers = 0;
        static private ulong StressMask = 0x000a000000000000;

        static public Random			RandGen         = new System.Random(200);
        static public Random            RandRatingGen   = new System.Random(400);
        static IPAddress                ipadd           = Dns.GetHostEntry(Dns.GetHostName()).AddressList[0];
        
        static public bool Init(int UserCount)
        {
            NumberUSers = UserList.FillUsers("stats", UserCount);
            //StressMask = StressMask;
            return true;
        }
        static public ulong GetRandomVal()
        {
            return (ulong)RandRatingGen.Next(1, 5000);
        }

        static public ulong GetLWLBQulifyPUID(uint titleid)
        {
            ulong temppuid = 0;
            uint temp = titleid - 50;

            switch (temp)
            {
                case 0:
                    temppuid = title10.getRandomPuid();
                    break;
                case 1:
                    temppuid = title11.getRandomPuid();
                    break;
                case 2:
                    temppuid = title12.getRandomPuid();
                    break;
                case 3:
                    temppuid = title13.getRandomPuid();
                    break;
            }

            return temppuid;
        }

        static public ulong GetLWLBQulifyRating(uint titleid, ulong puid)
        {
            ulong temprating = 0;
            uint temp = titleid - 50;

            switch (temp)
            {
                case 0:
                    temprating = (ulong)Interlocked.Increment(ref RatingT10);

                    title10.AddUser(puid);
                    break;
                case 1:
                    temprating = (ulong)Interlocked.Increment(ref RatingT11);
                    title11.AddUser(puid);
                    break;
                case 2:
                    temprating = (ulong)Interlocked.Increment(ref RatingT12);
                    title12.AddUser(puid);
                    break;
                case 3:
                    temprating = (ulong)Interlocked.Increment(ref RatingT13);
                    title13.AddUser(puid);
                    break;
            }

            return temprating;
        }

        static public ulong GetPUID(int index)
        {
            return UserList.getPuidAtIndex(index);
        }

        static public string GetGamerTag(int index)
        {
            return UserList.getGTagAtIndex(index);
        }

        static public int GetStressUserCount()
        {
            return (int)puidindexnew;
        }

        static public ulong GetStressRandPUID()
        {
            ulong qwUserId = StressMask - (ulong)Interlocked.Increment(ref puidindexnew);

            if (puidindexnew >= NumberUSers)
            {
                puidindexnew = 0;
            }

            return (qwUserId);//+puid);
        }

        static public ulong GenerateRandomPUID()
        {
            //generate a unique identifier for this computer.
            byte[] ipBytes = ipadd.GetAddressBytes();
            long val = 0;

            for (int l = 0; l < ipBytes.Length; l++)
            {
                val += (long)(ipBytes[l] * 255);
            }

            ulong UserMask = (ulong)val;
            UserMask = UserMask << 32;

            ulong qwUserId = UserMask + (ulong)Interlocked.Increment(ref puidindex);

            if (puidindex >= 200000)
            {
                puidindex = 0;
            }

            return (qwUserId);//+puid);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V1\GLWLBSetGets.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	public class GLWLBSetGetReset : TestNode
	{
		public GLWLBSetGetReset()
		{
            AddChild(new LWLBSetGetSingleAtt_Rating(60));
            AddChild(new LWLBSetGetNickname(60));
            AddChild(new LWLBSetGetAllAttribType(60));
            AddChild(new LWLBSetGetZeroAttrib(60));
            AddChild(new LWLBSetGetMaxAttrib(60));
            AddChild(new LWLBSetGetRatingOnly(60));
            AddChild(new LWLBSetGetAttribOnly(60));
            AddChild(new LWLBSetRandomRating100Users(60));
            AddChild(new LWLBSetRemove1Attrib(60));
            AddChild(new LWLBSet10Remove5Attrib(60));
            AddChild(new LWLBReset1User(60));
            AddChild(new LWLBResetAllUsers(60));
            AddChild(new LWLBNonExistentUserReset(68));
		}
	}

	class LWLBNonExistentUserReset : StatsTestBase
	{
		public LWLBNonExistentUserReset(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+5+5000,LBid[0]._uiLbId);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.S_OK,true);
		}

	}

	class LWLBResetAllUsers : StatsTestBase
	{
		public LWLBResetAllUsers(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100),new LeaderboardInfo(20,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);
			AddUsers(12,1);

			XRLResetUser req2 = new XRLResetUser(_titleId,0,LBid[0]._uiLbId);
			g_Statobj.TManager.ExecuteAndVerify(req2,HResult.S_OK,true);
			g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
			

		}

	}

	class LWLBReset1User : StatsTestBase
	{
		public LWLBReset1User(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			AddUsers(12,0);

			XRLResetUser req = new XRLResetUser(_titleId,Userbase+5,LBid[0]._uiLbId);
			g_Statobj.TManager.ExecuteAndVerify(req,HResult.S_OK,true);

			
			

		}

	}

	class LWLBSet10Remove5Attrib : StatsTestBase
	{
		public LWLBSet10Remove5Attrib(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XrlSubAttr[] attr1= new XrlSubAttr[10];
			attr1[0]=new XrlSubAttr(SpecialAttrib.Rating,095732);
			for( int i=1;i<10;i++)
				attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)i*10);

			XrlSubAttr[] attr2= new XrlSubAttr[5];
			attr2[0]=new XrlSubAttr(SpecialAttrib.Rating,5958324);
			for( int i=1;i<5;i++)
				attr2[i]=new XrlSubAttr((ushort)((i+1)*2));

			XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
			req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
			XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
			req2.AddSetData(LBid[0]._uiLbId,12345,attr2);


			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);
			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
			g_Statobj.TManager.VerifyGetPlayers(greq);
			

		}

	}

	class LWLBSetRemove1Attrib : StatsTestBase
	{
		public LWLBSetRemove1Attrib(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating,10),
													new XrlSubAttr(2,(long)50000),
													new XrlSubAttr(3,(double)33.44)};
			XrlSubAttr[] attr2= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating,5000)};

			XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
			req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
			XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
			req2.AddSetData(LBid[0]._uiLbId,12345,attr2);


			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,3,0);
			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
			g_Statobj.TManager.VerifyGetPlayers(greq);
			

		}

	}

	class LWLBSetRandomRating100Users : StatsTestBase
	{
		public LWLBSetRandomRating100Users(uint title):base(title,new LeaderboardInfo[]{  new LeaderboardInfo(22,1)})
		{
		}

		override protected void Run()
		{
			AddUsersRandomRating(100,0,10,SpecialAttribMask.Rating,50);
			

		}
	}

	class LWLBSetGetAttribOnly : StatsTestBase
	{
		public LWLBSetGetAttribOnly(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,10,0,100);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);



			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

			XRLGetResponse resp= greq.Execute();
			if(resp.RespData[0].Resphead.userPuid != 12345)
				throw new StatsException(707,"invalid user returned expected 12345 got "+resp.RespData[0].Resphead.userPuid);

			XrlSubAttr[] SubAttr =resp.RespData[0].AttList.SubAttr;
			
			XrlSubAttr[] reqSubAttr =req.SetReq[0].SubAttr;

            if(SubAttr.Length != reqSubAttr.Length)
				throw new StatsException(707,"invalid # of attributes recived expected :"+reqSubAttr.Length+" recived "+SubAttr.Length);

			
			for(int attidx=0;attidx<SubAttr.Length;attidx++)
			{

				if(SubAttr[attidx].Info.Type!= (ushort)XrlAttrType.None && reqSubAttr[attidx].Data!=null)
					throw new StatsException(707,"Attribute type should  be none (0) but is "+SubAttr[attidx].Info.Type);
			}

		}

	}

	class LWLBSetGetRatingOnly : StatsTestBase
	{
		public LWLBSetGetRatingOnly(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,1,SpecialAttribMask.Rating,100);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,1,SpecialAttribMask.Rating);



			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

			g_Statobj.TManager.VerifyGetPlayers(greq);
			

		}

	}

	class LWLBSetGetMaxAttrib : StatsTestBase
	{
		public LWLBSetGetMaxAttrib(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.
			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,64,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,100);
			
			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,64,SpecialAttribMask.Rating|SpecialAttribMask.Nickname);
			

			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
			g_Statobj.TManager.VerifyGetPlayers(greq);
		}

	}

	class LWLBSetGetZeroAttrib : StatsTestBase
	{
		public LWLBSetGetZeroAttrib(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.
			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,0,0,100);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,0,0);

			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
			g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_BAD_REQUEST);
		}

	}

	class LWLBSetGetAllAttribType : StatsTestBase
	{
		public LWLBSetGetAllAttribType(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XrlSubAttr[] attr= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating,(uint)100),
												   new XrlSubAttr(1,(uint)10),
												   new XrlSubAttr(2,(long)50000),
												   new XrlSubAttr(3,(double)33.44)};
			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,attr);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,3,0);
			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
			g_Statobj.TManager.VerifyGetPlayers(greq);
			

		}

	}

	class LWLBSetGetNickname : StatsTestBase
	{
		public LWLBSetGetNickname(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,100);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,2,SpecialAttribMask.Rating|SpecialAttribMask.Nickname);



			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

			g_Statobj.TManager.VerifyGetPlayers(greq);
			

		}

	}

	class LWLBSetGetSingleAtt_Rating : StatsTestBase
	{
		public LWLBSetGetSingleAtt_Rating(uint title):base(title,new LeaderboardInfo[]{new LeaderboardInfo(21,100)})
		{
		}

		override protected void Run()
		{
			// create an XRL request set the attributes and verify them.

			XRLSetRequest req = new XRLSetRequest(_titleId,1);
			req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);

			XRLGetRequest greq= new XRLGetRequest(1);
			greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,2,SpecialAttribMask.Rating);



			g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

			g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);
			

		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V1\GStatsSet.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    public class GStatsSet : TestNode
    {
        public GStatsSet()
        {
            AddChild(new SetGetSingleAtt_Rating(60));
            AddChild(new SetGetNickname(60));
            AddChild(new SetGetAllAttribType(60));
            AddChild(new SetGetZeroAttrib(60));
            AddChild(new SetGetMaxAttrib(60));
            AddChild(new SetGetMaxAttribAllType(60)); // this is multiple request.
            AddChild(new SetGetRatingOnly(60));
            AddChild(new SetGetAttribOnly(60));
            AddChild(new SetGetMax20LB(60)); // this test set limit =20 get limit = 101
            AddChild(new SetGetMax4U5LB(60));
            AddChild(new SetRemove1Attrib(60));
            AddChild(new SetRemove10Attrib(60));
            AddChild(new Set10Remove5Attrib(60));
            AddChild(new SetRemove1Attribfor1Uof4(60));

            // negative test cases 
            AddChild(new InvalidRemoveAttrib(68));
            AddChild(new InvalidRemoveRank(68));
            AddChild(new InvalidRemoveNickname(68));
            AddChild(new InvalidRemoveRating(68));
            AddChild(new InvalidSetRank(68));
            AddChild(new InvalidSetLbSize(68));
            AddChild(new InvalidRatingWrongType(68));
            AddChild(new InvalidNickNameWrongType(68));
            AddChild(new InvalidArrtibinvalidType(68));
            AddChild(new InvalidArrtibMaxPlus1(68));  // 64 is max
            AddChild(new InvalidSetMaxPlus1(68));  // 20 is max
            AddChild(new InvalidGetMaxPlus1(68));  //101 is max
            AddChild(new InvalidGetnonExistingAttrib(68));
            AddChild(new InvalidGetnonExistingUser(68));
            AddChild(new SetGetInvalidTitle(68));
            AddChild(new SetGetInvalidLBType(68));
            
            // V stands for Valid  message
            // I stands for Invalid message
            // S stands for Short message
            AddChild(new SetGetVIV(68));
            AddChild(new SetGetVSV(68));
            AddChild(new SetGetIVV(68));
            AddChild(new SetGetSVV(68));
            AddChild(new SetGetVVI(68));
            AddChild(new SetGetVVS(68));
            AddChild(new SetGetVIS(68));
        
            AddChild(new SetInvalidUserAuth(68));
            AddChild(new SetInvalidTitleAuth(68));
            AddChild(new SetInvalidNoAuth(68));
            AddChild(new GetUserFromEmptyLB(68));
            AddChild(new SetRandomRating1000Users(60));
            AddChild(new ChangeExistingAttribute(60));
            AddChild(new TryAddingMorethen64attributes(68));

            AddChild(new SetGetDuplicateAttrib(60));
        }
    }

    class TryAddingMorethen64attributes : StatsTestBase
    {
        public TryAddingMorethen64attributes(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XrlSubAttr[] attr= new XrlSubAttr[35];
            for(int i=0; i<35 ;i++)
            {
                attr[i]= new XrlSubAttr((ushort)(i),(uint)_RandGen.Next());
            }

            XrlSubAttr[] attr2= new XrlSubAttr[35];
            for(int i=0; i<35 ;i++)
            {
                attr2[i]= new XrlSubAttr((ushort)(36+i),(uint)_RandGen.Next());
            }

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,attr);

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr2);

            XRLGetRequest greq = new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,64,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req,req1},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class ChangeExistingAttribute : StatsTestBase
    {
        public ChangeExistingAttribute(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr= new XrlSubAttr[]{new XrlSubAttr(1,(uint)10),
                                                   new XrlSubAttr(2,(long)50000),
                                                   new XrlSubAttr(3,(double)33.44)};
            XrlSubAttr[] attr2= new XrlSubAttr[]{new XrlSubAttr(1,(uint)100),
                                                   new XrlSubAttr(2,(long)50),
                                                   new XrlSubAttr(3,(double)00.44)};
            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,attr);

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr2);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,3,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req,req1},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetRandomRating1000Users : StatsTestBase
    {
        public SetRandomRating1000Users(uint title)
            : base(title,new LeaderboardInfo[]{  new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            AddUsersRandomRating(1100,0,10,SpecialAttribMask.Rating,5);
            g_Statobj.TManager.VerifyEnumPlayers(this._titleId,false);

        }
    }

    class GetUserFromEmptyLB : StatsTestBase
    {
        public GetUserFromEmptyLB(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,(ulong)501,LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
            
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);
        }
    }

    class SetInvalidNoAuth : StatsTestBase
    {
        public SetInvalidNoAuth(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);
            
            req.NoAuthResp=true;
            req.ManualPopulateSlot();
            XRLSetResponse resp =req.Execute();

            if (resp.xResult != HResult.XONLINE_E_STAT_BAD_REQUEST)
            {
                throw new StatsException(707, "Unexpected HResult " + resp.xResult);
            }
        }
    }

    class SetInvalidTitleAuth : StatsTestBase
    {
        public SetInvalidTitleAuth(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId, 1);
            req.AddSetData(LBid[0]._uiLbId, 12345, 2, SpecialAttribMask.Rating, 100);


            req.WrongTitleInAuth = true;
            req.ManualPopulateSlot();
            XRLSetResponse resp = req.Execute();

            if (resp.xResult != HResult.XONLINE_E_STAT_BAD_REQUEST)
            {
                throw new StatsException(707, "Unexpected HResult " + resp.xResult);
            }
        }
    }

    class SetInvalidUserAuth : StatsTestBase
    {
        public SetInvalidUserAuth(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);

            req.NoUserInAuth=true;
            req.ManualPopulateSlot();
            XRLSetResponse resp =req.Execute();

            if (resp.xResult != HResult.XONLINE_E_STAT_BAD_REQUEST)
            {
                throw new StatsException(707, "Unexpected HResult " + resp.xResult);
            }
        }

    }

    class SetGetVIS : VISBuilder
    {
        public SetGetVIS(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddValidSetMessage(ref req);
            AddInvalidSetMessage(ref req);
            AddShortSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.S_OK, false);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddValidGetMessage(ref greq);
            AddInvalidGetMessage(ref greq);
            AddShortGetMessage(ref greq);

            XRLGetResponse gresp = greq.Execute();
            VerifyXError(gresp.xResult, HResult.S_OK, false);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetVVS : VISBuilder
    {
        public SetGetVVS(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddValidSetMessage(ref req);
            AddValidSetMessage(ref req);
            AddShortSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.S_OK, false);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddValidGetMessage(ref greq);
            AddValidGetMessage(ref greq);
            AddShortGetMessage(ref greq);

            XRLGetResponse gresp = greq.Execute();
            VerifyXError(gresp.xResult, HResult.S_OK, false);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetVVI : VISBuilder
    {
        public SetGetVVI(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddValidSetMessage   ( ref req );
            AddValidSetMessage   ( ref req );
            AddInvalidSetMessage ( ref req );
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            XRLGetRequest greq = new XRLGetRequest(3);
            AddValidGetMessage   ( ref greq );
            AddValidGetMessage   ( ref greq );
            AddInvalidGetMessage ( ref greq );

            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetSVV : VISBuilder
    {
        public SetGetSVV(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddShortSetMessage(ref req);
            AddValidSetMessage(ref req);
            AddValidSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.S_OK, false);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddShortGetMessage(ref greq);
            AddValidGetMessage(ref greq);
            AddValidGetMessage(ref greq);

            XRLGetResponse gresp = greq.Execute();
            VerifyXError(gresp.xResult, HResult.S_OK, false);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetIVV : VISBuilder
    {
        public SetGetIVV(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddInvalidSetMessage(ref req);
            AddValidSetMessage(ref req);
            AddValidSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddInvalidGetMessage(ref greq);
            AddValidGetMessage(ref greq);
            AddValidGetMessage(ref greq);
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetVSV : VISBuilder
    {
        public SetGetVSV(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddValidSetMessage(ref req);
            AddShortSetMessage(ref req);
            AddValidSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.S_OK, false);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddValidGetMessage(ref greq);
            AddShortGetMessage(ref greq);
            AddValidGetMessage(ref greq);
            XRLGetResponse gresp = greq.Execute();

            VerifyXError(gresp.xResult, HResult.S_OK, false);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetVIV : VISBuilder
    {
        public SetGetVIV(uint title)
            : base(title)
        {}

        override protected void Run()
        {
            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            AddValidSetMessage(ref req);
            AddInvalidSetMessage(ref req);
            AddValidSetMessage(ref req);
            
            XRLSetResponse sresp= req.Execute();
            VerifyXError(sresp.xResult, HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            XRLGetRequest greq= new XRLGetRequest(3);
            AddValidGetMessage(ref greq);
            AddInvalidGetMessage(ref greq);
            AddValidGetMessage(ref greq);

            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

            // make sure that leader board is empty
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId,0);
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class VISBuilder : StatsTestBase
    {
        public VISBuilder(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        protected void VerifyXError(uint xAcutal, uint xCompare)
        {
            VerifyXError(xAcutal, xCompare, /*expectMatch=*/true);
        }

        protected void VerifyXError(uint xActual, uint xCompare, bool expectMatch)
        {
            if (
                (  expectMatch && xCompare != xActual )
             || ( !expectMatch && xCompare == xActual )
            )
            {
                throw new StatsException(
                    707
                  , String.Format(
                        "Incorrect X-Err returned.  Got: 0x{0:X8}, Expected: 0x{1:X8}"
                      , xActual
                      , xCompare
                    )
                );
            }
        }

        public void AddValidSetMessage(ref XRLSetRequest  req)
        {
            // user 1234
            req.AddSetData(LBid[0]._uiLbId,1234,5,SpecialAttribMask.Rating,100);
        }

        public void AddInvalidSetMessage(ref XRLSetRequest  req)
        {
            //user 2345
            req.AddSetData(LBid[0]._uiLbId+50,2345,5,SpecialAttribMask.Rating,100);
        }

        public void AddShortSetMessage(ref XRLSetRequest  req)
        {
            //user 3456
            XrlSubAttr[] doubleattr= new XrlSubAttr[4];
            for(int i=0;i<4;i++)
            {
                doubleattr[i]=new XrlSubAttr((ushort)(i+1),(double)(i*33.44));
            }

            req.AddSetData(LBid[0]._uiLbId,3456,5,doubleattr);
        }

        public void AddValidGetMessage(ref XRLGetRequest  greq)
        {
            // user 1234
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,5,SpecialAttribMask.Rating);
        }

        public void AddInvalidGetMessage(ref XRLGetRequest  greq)
        {
            //user 2345
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId+50,5,SpecialAttribMask.Rating);
        }

        public void AddShortGetMessage(ref XRLGetRequest  greq)
        {
            //user 3456
            ushort[] attrids= new ushort[]{1,2,3,4};;
            
            greq.AddGetData(_titleId,3456,LBid[0]._uiLbId,5,attrids);
        }
    }

    class SetGetInvalidLBType : StatsTestBase
    {
        public SetGetInvalidLBType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId+50,12345,2,SpecialAttribMask.Rating,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId+50,2,SpecialAttribMask.Rating);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);
            
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId,LBid[0]._uiLbId+50,0);
        }
    }

    class SetGetInvalidTitle : StatsTestBase
    {
        public SetGetInvalidTitle(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId+12,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId+12,12345,LBid[0]._uiLbId,2,SpecialAttribMask.Rating);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);
            
            g_Statobj.TManager.IsPlayerLbEmpty(_titleId+12,LBid[0]._uiLbId,0);
        }
    }

    class InvalidGetnonExistingUser : StatsTestBase
    {
        public InvalidGetnonExistingUser(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,4,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class InvalidGetnonExistingAttrib : StatsTestBase
    {
        public InvalidGetnonExistingAttrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,4,SpecialAttribMask.Rating);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class InvalidGetMaxPlus1 : StatsTestBase
    {
        public InvalidGetMaxPlus1(uint title)
            : base(
                title,
                new LeaderboardInfo[]{
                    new LeaderboardInfo(1,"",0,0,0),
                    new LeaderboardInfo(2,"",0,0,0),
                    new LeaderboardInfo(3,"",0,0,0),
                    new LeaderboardInfo(4,"",0,0,0),
                    new LeaderboardInfo(5,"",0,0,0)
                }
            )
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest[] Requests= new XRLSetRequest[6];
            int ucount =1;

            for (int i=0;i<6;i++)
            {

                XRLSetRequest req = new XRLSetRequest(_titleId,20);
                for(int j=1;j<5;j++)
                {
                    req.AddSetData(LBid[0]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[1]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[2]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[3]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[4]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                }

                Requests[i]=req;
            }

            g_Statobj.TManager.ExecuteAndVerify(Requests,false);

            
            XRLGetRequest greq= new XRLGetRequest(102);
            for (int i=0;i<6;i++)
            {
                for(int j=0;j<4;j++)
                {
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[1]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[2]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[3]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[4]._uiLbId,10,SpecialAttribMask.Rating);
                }
            }

            greq.AddGetData(_titleId,(ulong)((6*10)),LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
            greq.AddGetData(_titleId,(ulong)((7*10)),LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_TOO_MANY_SPECS);
        }
    }

    class InvalidSetMaxPlus1 : StatsTestBase
    {
        public InvalidSetMaxPlus1(uint title)
            : base(
                title,
                new LeaderboardInfo[]{
                    new LeaderboardInfo(1,"",0,0,0),
                    new LeaderboardInfo(2,"",0,0,0),
                    new LeaderboardInfo(3,"",0,0,0),
                    new LeaderboardInfo(4,"",0,0,0),
                    new LeaderboardInfo(5,"",0,0,0)
                }
            )
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest[] Requests= new XRLSetRequest[1];
            int ucount =1;
            
            XRLSetRequest req = new XRLSetRequest(_titleId,21);
            for(int j=1;j<5;j++)
            {
                req.AddSetData(LBid[0]._uiLbId,(ulong)(j),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
                req.AddSetData(LBid[1]._uiLbId,(ulong)(j),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
                req.AddSetData(LBid[2]._uiLbId,(ulong)(j),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
                req.AddSetData(LBid[3]._uiLbId,(ulong)(j),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
                req.AddSetData(LBid[4]._uiLbId,(ulong)(j),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
            }

            req.AddSetData(LBid[4]._uiLbId,(ulong)(5),10,SpecialAttribMask.Rating,(ulong)((100)+(ucount++)));
                
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
        }
    }

    class InvalidArrtibMaxPlus1 : StatsTestBase
    {
        public InvalidArrtibMaxPlus1(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[65];
            for( int i=0;i<65;i++)
                attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)i*10);

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1},false);
        }
    }

    class InvalidArrtibinvalidType : StatsTestBase
    {
        public InvalidArrtibinvalidType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Nickname,(uint) 123)};
            attr1[0].Info.Type= (byte)5;

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);
        }
    }

    class InvalidNickNameWrongType : StatsTestBase
    {
        public InvalidNickNameWrongType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Nickname,(uint) 123)};

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);
        }
    }

    class InvalidRatingWrongType : StatsTestBase
    {
        public InvalidRatingWrongType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating,(uint) 123)};

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);
        }
    }

    class InvalidSetLbSize : StatsTestBase
    {
        public InvalidSetLbSize(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            
            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.LeaderboardSize)};

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);
        }
    }

    class InvalidSetRank : StatsTestBase
    {
        public InvalidSetRank(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating)};

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);
        }
    }

    class InvalidRemoveRating : StatsTestBase
    {
        public InvalidRemoveRating(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rating)};

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,5,SpecialAttribMask.Rating,1000);

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,5,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class InvalidRemoveNickname : StatsTestBase
    {
        public InvalidRemoveNickname(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Nickname)};

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,5,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,1000);

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,5,SpecialAttribMask.Rating|SpecialAttribMask.Nickname);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class InvalidRemoveRank :StatsTestBase
    {
        public InvalidRemoveRank(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(SpecialAttrib.Rank)};

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,5,SpecialAttribMask.Rating,1000);

            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,5,0);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class InvalidRemoveAttrib : StatsTestBase
    {
        public InvalidRemoveAttrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(1)};

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            
            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,1,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetRemove1Attribfor1Uof4 : StatsTestBase
    {
        public SetRemove1Attribfor1Uof4(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[10];
            for( int i=0;i<10;i++)
                attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)i*10);

            XrlSubAttr[] attr2= new XrlSubAttr[5];
            for( int i=0;i<5;i++)
                attr2[i]=new XrlSubAttr((ushort)((i+1)*2));
            XrlSubAttr[] attr3= new XrlSubAttr[10];
            for( int i=0;i<10;i++)
                attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)((i+1)*50));

            XRLSetRequest req1 = new XRLSetRequest(_titleId,2);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            req1.AddSetData(LBid[0]._uiLbId,23456,attr1);
            XRLSetRequest req2 = new XRLSetRequest(_titleId,4);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr2);
            req2.AddSetData(LBid[0]._uiLbId,23456,attr1);
            req2.AddSetData(LBid[0]._uiLbId,34567,attr1);
            req2.AddSetData(LBid[0]._uiLbId,45678,attr1);


            XRLGetRequest greq= new XRLGetRequest(4);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);
            greq.AddGetData(_titleId,23456,LBid[0]._uiLbId,10,0);
            greq.AddGetData(_titleId,34567,LBid[0]._uiLbId,10,0);
            greq.AddGetData(_titleId,45678,LBid[0]._uiLbId,10,0);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
            
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class Set10Remove5Attrib :StatsTestBase
    {
        public Set10Remove5Attrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[10];
            for( int i=0;i<10;i++)
                attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)i*10);

            XrlSubAttr[] attr2= new XrlSubAttr[5];
            for( int i=0;i<5;i++)
                attr2[i]=new XrlSubAttr((ushort)((i+1)*2));

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr2);


            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetRemove10Attrib : StatsTestBase
    {
        public SetRemove10Attrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[10];
            for( int i=0;i<10;i++)
                attr1[i]=new XrlSubAttr((ushort)(i+1),(uint)i*10);

            XrlSubAttr[] attr2= new XrlSubAttr[10];
            for( int i=0;i<10;i++)
                attr2[i]=new XrlSubAttr((ushort)(i+1));

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr2);


            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetRemove1Attrib : StatsTestBase
    {
        public SetRemove1Attrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr1= new XrlSubAttr[]{new XrlSubAttr(1,(uint)10),
                                                   new XrlSubAttr(2,(long)50000),
                                                   new XrlSubAttr(3,(double)33.44)};
            XrlSubAttr[] attr2= new XrlSubAttr[]{new XrlSubAttr(2)};

            XRLSetRequest req1 = new XRLSetRequest(_titleId,1);
            req1.AddSetData(LBid[0]._uiLbId,12345,attr1);
            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attr2);


            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,3,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req1,req2},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
            

        }

    }

    class SetGetMax4U5LB : StatsTestBase
    {
        public SetGetMax4U5LB(uint title)
            : base(
                title,
                new LeaderboardInfo[]{
                    new LeaderboardInfo(1,"",0,0,0),
                    new LeaderboardInfo(2,"",0,0,0),
                    new LeaderboardInfo(3,"",0,0,0),
                    new LeaderboardInfo(4,"",0,0,0),
                    new LeaderboardInfo(5,"",0,0,0)
                }
            )
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest[] Requests = new XRLSetRequest[6];
            int ucount =1;

            for (int i=0;i<6;i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId,20);
                for(int j=1;j<5;j++)
                {
                    req.AddSetData(LBid[0]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[1]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[2]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[3]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                    req.AddSetData(LBid[4]._uiLbId,(ulong)((i*10)+j),10,SpecialAttribMask.Rating,(ulong)((100*i)+(ucount++)));
                }
                Requests[i]=req;
            }

            g_Statobj.TManager.ExecuteAndVerify(Requests,false);
            
            XRLGetRequest greq= new XRLGetRequest(101);
            for (int i=0;i<5;i++)
            {
                for(int j=0;j<4;j++)
                {
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[1]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[2]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[3]._uiLbId,10,SpecialAttribMask.Rating);
                    greq.AddGetData(_titleId,(ulong)((i*10)+j),LBid[4]._uiLbId,10,SpecialAttribMask.Rating);
                }
            }

            greq.AddGetData(_titleId,(ulong)((6*10)),LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetMax20LB : StatsTestBase
    {
        public SetGetMax20LB(uint title)
            : base(
                title,
                new LeaderboardInfo[]{
                    new LeaderboardInfo(1,"",0,0,0),
                    new LeaderboardInfo(2,"",0,0,0),
                    new LeaderboardInfo(3,"",0,0,0),
                    new LeaderboardInfo(4,"",0,0,0),
                    new LeaderboardInfo(5,"",0,0,0),
                    new LeaderboardInfo(6,"",0,0,0),
                    new LeaderboardInfo(7,"",0,0,0),
                    new LeaderboardInfo(8,"",0,0,0),
                    new LeaderboardInfo(9,"",0,0,0),
                    new LeaderboardInfo(10,"",0,0,0),
                    new LeaderboardInfo(11,"",0,0,0),
                    new LeaderboardInfo(12,"",0,0,0),
                    new LeaderboardInfo(13,"",0,0,0),
                    new LeaderboardInfo(14,"",0,0,0),
                    new LeaderboardInfo(15,"",0,0,0),
                    new LeaderboardInfo(16,"",0,0,0),
                    new LeaderboardInfo(17,"",0,0,0),
                    new LeaderboardInfo(18,"",0,0,0),
                    new LeaderboardInfo(19,"",0,0,0),
                    new LeaderboardInfo(20,"",0,0,0)
                }
            )
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest[] Requests= new XRLSetRequest[6];
            for (int i=0;i<6;i++)
            {
                XRLSetRequest req = new XRLSetRequest(_titleId,20);
                for (int j = 0; j < 20; j++)
                {
                    req.AddSetData(LBid[j]._uiLbId, (ulong)(i + 1) * 100, 10, SpecialAttribMask.Rating, (ulong)(i + 1) * 20);
                }

                Requests[i] = req;
            }

            g_Statobj.TManager.ExecuteAndVerify(Requests,false);

            XRLGetRequest greq= new XRLGetRequest(101);
            for (int i=0;i<5;i++)
            {
                for (int j = 0; j < 20; j++)
                {
                    greq.AddGetData(_titleId, (ulong)(i + 1) * 100, LBid[j]._uiLbId, 10, SpecialAttribMask.Rating);
                }
            }

            greq.AddGetData(_titleId,(6+1)*100,LBid[0]._uiLbId,10,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetAttribOnly : StatsTestBase
    {
        public SetGetAttribOnly(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,10,0,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,10,0);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetRatingOnly : StatsTestBase
    {
        public SetGetRatingOnly(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,1,SpecialAttribMask.Rating,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,1,SpecialAttribMask.Rating);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetMaxAttribAllType : StatsTestBase
    {
        public SetGetMaxAttribAllType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0),new LeaderboardInfo(2,"",0,0,0),new LeaderboardInfo(3,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] intattr    = new XrlSubAttr[64];
            XrlSubAttr[] longattr   = new XrlSubAttr[64];
            XrlSubAttr[] doubleattr = new XrlSubAttr[64];

            for(int i=0;i<64;i++)
            {
                intattr[i]    = new XrlSubAttr( (ushort)(i+1) , (uint)i*10        );
                longattr[i]   = new XrlSubAttr( (ushort)(i+1) , (ulong)i*50000    );
                doubleattr[i] = new XrlSubAttr( (ushort)(i+1) , (double)(i*33.44) );
            }

            XRLSetRequest req = new XRLSetRequest(_titleId,3);
            req.AddSetData(LBid[0]._uiLbId,12345,intattr);
            req.AddSetData(LBid[1]._uiLbId,12345,longattr);
            req.AddSetData(LBid[2]._uiLbId,12345,doubleattr);

            XRLGetRequest greq= new XRLGetRequest(3);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,64,0);
            greq.AddGetData(_titleId,12345,LBid[1]._uiLbId,64,0);
            greq.AddGetData(_titleId,12345,LBid[2]._uiLbId,64,0);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetDuplicateAttrib : StatsTestBase
    {
        public SetGetDuplicateAttrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attribs = new XrlSubAttr[3];
            attribs[0] = new XrlSubAttr(1,(int) 500);
            attribs[1] = new XrlSubAttr(2,(int) 600);
            attribs[2] = new XrlSubAttr(1,(int) 700);
            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,attribs);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);


            XrlSubAttr[] attribs2 = new XrlSubAttr[3];
            attribs2[0] = new XrlSubAttr(2,(int) 500);
            attribs2[1] = new XrlSubAttr(SpecialAttrib.Rating,(long) 600);
            attribs2[2] = new XrlSubAttr(3,(int) 700);
            XRLSetRequest req2 = new XRLSetRequest(_titleId,1);
            req2.AddSetData(LBid[0]._uiLbId,12345,attribs2);
            
            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,new ushort []{SpecialAttrib.Rating,1,SpecialAttrib.Rating,1});
            
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req2},false);

            XRLGetResponse resp = greq.Execute();

            if (resp.RespData[0].AttList.SubAttr[2].Info.Type == (byte)XrlAttrType.None)
            {
                if (resp.RespData[0].AttList.SubAttr[2].Info.ID == SpecialAttrib.Rating && resp.RespData[0].AttList.SubAttr[2].Data == null)
                {
                    resp.RespData[0].AttList.SubAttr[2] = resp.RespData[0].AttList.SubAttr[0];
                }
                else
                {
                    throw new Exception("unexpected id expected " + SpecialAttrib.Rating + " reviced " + resp.RespData[0].AttList.SubAttr[2].Info.ID);
                }
            }
            else
            {
                throw new Exception("unexpected type expected null reviced " + resp.RespData[0].AttList.SubAttr[2].Info.Type);
            }

            if (resp.RespData[0].AttList.SubAttr[3].Info.Type == (byte)XrlAttrType.None)
            {
                if (resp.RespData[0].AttList.SubAttr[3].Info.ID == 1 && resp.RespData[0].AttList.SubAttr[3].Data == null)
                {
                    resp.RespData[0].AttList.SubAttr[3] = resp.RespData[0].AttList.SubAttr[1];
                }
                else
                {
                    throw new Exception("unexpected id expected 1 reviced " + resp.RespData[0].AttList.SubAttr[3].Info.ID);
                }

            }
            else
            {
                throw new Exception("unexpected type expected null reviced " + resp.RespData[0].AttList.SubAttr[2].Info.Type);
            }

            g_Statobj.TManager.VerifyGetPlayersRsp(greq, resp, HResult.S_OK);
        }
    }

    class SetGetMaxAttrib : StatsTestBase
    {
        public SetGetMaxAttrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest req = new XRLSetRequest(_titleId,2);
            req.AddSetData(LBid[0]._uiLbId,12345,64,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,100);
            req.AddSetData(LBid[0]._uiLbId,67891,64,0,100);

            XRLGetRequest greq= new XRLGetRequest(2);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,64,SpecialAttribMask.Rating|SpecialAttribMask.Nickname);
            greq.AddGetData(_titleId,67891,LBid[0]._uiLbId,64,0);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }

    }

    class SetGetZeroAttrib : StatsTestBase
    {
        public SetGetZeroAttrib(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.
            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,0,0,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,0,0);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.XONLINE_E_STAT_BAD_REQUEST);
        }

    }

    class SetGetAllAttribType : StatsTestBase
    {
        public SetGetAllAttribType(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XrlSubAttr[] attr = new XrlSubAttr[]{
                new XrlSubAttr(1,(uint)10),
                new XrlSubAttr(2,(long)50000),
                new XrlSubAttr(3,(double)33.44)
            };

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,attr);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,3,0);
            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);
            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetNickname : StatsTestBase
    {
        public SetGetNickname(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating|SpecialAttribMask.Nickname,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,2,SpecialAttribMask.Rating|SpecialAttribMask.Nickname);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq);
        }
    }

    class SetGetSingleAtt_Rating : StatsTestBase
    {
        public SetGetSingleAtt_Rating(uint title)
            : base(title,new LeaderboardInfo[]{new LeaderboardInfo(1,"",0,0,0)})
        {}

        override protected void Run()
        {
            // create an XRL request set the attributes and verify them.

            XRLSetRequest req = new XRLSetRequest(_titleId,1);
            req.AddSetData(LBid[0]._uiLbId,12345,2,SpecialAttribMask.Rating,100);

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData(_titleId,12345,LBid[0]._uiLbId,2,SpecialAttribMask.Rating);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[]{req},false);

            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\LightWeightWAttachemnts.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;


namespace StatsFD
{
	public class LightWeightWAttachemnts: TestNode
	{
		public LightWeightWAttachemnts(string Name)
		{
            AddChild(new SFDCommitAttSameRating(401,20));
            AddChild(new SFDCommitAtt1U1LB(401,20));
            AddChild(new SFDCommitAtt1U1LBMR(401,20));
            AddChild(new SFDCommitAllAtt1U1LBMR(401,20));
            AddChild(new SFDCommitAtt1UMLB(401,new uint[]{20,21,22}));
            AddChild(new SFDCommitAttMUMLB(401,4,new uint[]{20,21,22,23,24}));  //,22,23,24
            AddChild(new SFDFewCommitAtt1UMLB(401,new uint[]{20,21,11,12}));
            AddChild(new SFDFewCommitAttMUMLB(401,4,new uint[]{20,21,11,12})); //,10 or 22
            AddChild(new SFDUnCommitAtt1U1LB(401,20));
            AddChild(new SFDMixedCmt_UnCmt1U1LBMR(401,20));
            AddChild(new SFDMixedCmtUncmtNOAttMUMLB(401));
            AddChild(new SFDMixedUncmtNOAttMUMLB(401));

            AddChild(new SFDEnumAttSingle(401,20));
            AddChild(new SFDEnumLBWithNoATT(401,11));
            AddChild(new SFDEnumAttMultiple(401,20));
            AddChild(new SFDEnumAttALLMultiple(401,20));
            AddChild(new SFDCmt_UnCmtEnumAtt(401,20));
            AddChild(new SFDUnCmt_NoAttEnum(401,20));
            AddChild(new SFDCMT_UnCmt_NoAttEnum(401,20));
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\FakeSigSrv.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Signature;

using xonline.common.config;
using xonline.common.protocol;

using AccessToken = ServerTestFramework.LiveService.Stats.Util.AccessToken;

namespace StatsFD
{
    public class FakeSigSrv
    {
        private HttpListener _listener = new HttpListener();

        private IPAddress _hostIP;
        public readonly string Address;

        private AutoResetEvent _quitSignaled = new AutoResetEvent(/*initialState=*/false);
        private AutoResetEvent _gotContext   = new AutoResetEvent(/*initialState=*/false);

        private enum ServerState
        {
            Initialized,
            Starting,
            Running,
            Stopping,
            Stopped,
            Aborted
        }

        private object _stateLock = new object();
        private volatile ServerState _state;

        private Dictionary<ulong, uint> _blacklist = new Dictionary<ulong,uint>();
        private const int _maxBlacklistLength = 6;

        public void AddFailUser(ulong puid, uint error)
        {
            lock (_blacklist)
            {
                if (_blacklist.Count >= _maxBlacklistLength)
                {
                    throw new InvalidOperationException("A maximum of " + _maxBlacklistLength + " users may be failed");
                }

                _blacklist[puid] = error;
            }
        }

        public void ClearFailUsers()
        {
            lock (_blacklist)
            {
                _blacklist.Clear();
            }
        }

        /// <summary>
        /// We are on a dual-homed (at least) box.  We must make sure that the port we bind to is on the correct
        /// interface, or it won't do us any good.
        /// </summary>
        //private IPAddress _hostIP = null;
        private void InitHostIP()
        {
            IPEndPoint statsEndpoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);
            IPAddress statsAddr = statsEndpoint.Address;
            byte[] statsIPBytes = statsAddr.GetAddressBytes();

            IPAddress[] localhostAddrs = Dns.GetHostAddresses(""); // "" == localhost
            foreach (IPAddress addr in localhostAddrs)
            {
                byte[] addrBytes = addr.GetAddressBytes();

                if (
                    addrBytes[0] == statsIPBytes[0] &&
                    addrBytes[1] == statsIPBytes[1]
                   )
                {
                    _hostIP = addr;
                    break;
                }
            }

            if (_hostIP == null)
            {
                throw new Exception("Couldn't find an IP homed with the stats server at: " + statsAddr);
            }
        }

        public FakeSigSrv()
        {
            InitHostIP();

            Address = "http://" + _hostIP + ":8080/";
            _listener.Prefixes.Add(Address); 

            _state = ServerState.Initialized;
        }

        Thread _th;
        public void Start()
        {
            lock (_stateLock)
            {
                if (_state != ServerState.Starting && _state != ServerState.Running)
                {
                    _state = ServerState.Starting;

                    _th = new Thread(ThAcceptConnections);
                    _th.Start();
                }
            }
        }

        private void ThAcceptConnections()
        {
            try
            {
                lock (_stateLock)
                {
                    if (_state == ServerState.Starting)
                    {
                        _listener.Start();
                        _state = ServerState.Running;
                    }
                }
                
                while (_state == ServerState.Running)
                {
                    try
                    {
                        IAsyncResult ar = _listener.BeginGetContext(ProcessContext, null);
                        int idx = WaitHandle.WaitAny(new WaitHandle[] {_quitSignaled, _gotContext});

                        if (idx == 0)
                        {
                            lock (_stateLock)
                            {
                                _state = ServerState.Stopping;
                            }
                        }
                    }
                    catch (HttpListenerException hle)
                    {
                        Global.RO.Debug("[err]FakeSigSrv: (" + hle.ErrorCode + ") " + hle.Data);
                    }
                }
            }
            finally
            {
                _listener.Stop();
            }
        }

        public void Stop()
        {
            if (_th != null)
            {
                // Signal the connection handling thread to quit
                _quitSignaled.Set();

                // Wait for the thread to exit
                _th.Join();
                _th = null;

                _state = ServerState.Stopped;
            }
        }

        private void ProcessContext(IAsyncResult ar)
        {
            if (_state == ServerState.Running)
            {
                _gotContext.Set();

                HttpListenerContext context = _listener.EndGetContext(ar);
                HttpListenerRequest request = context.Request;

                if (request.RawUrl.Contains("SignOnBehalf"))
                {
                    SignOnBehalf(context);
                }
                else if (request.RawUrl.Contains("verifysignature"))
                {
                    VerifySignature(context);
                }
                else
                {
                    NotFound404(context);
                }

                HttpListenerResponse resp = context.Response;
                resp.AddHeader("Server", "FakeSig");

                resp.Close();
            }
        }

        private void SignOnBehalf(HttpListenerContext context)
        {
            Global.RO.Debug("Recived a SignOnBehalf Request...");

            XSigSignOnBehalfRequest req = new XSigSignOnBehalfRequest();
            req.ReadStream(context.Request.InputStream);

            XSigSignOnBehalfResponse resp = new XSigSignOnBehalfResponse();
            resp._hresult = HResult.E_FAIL;

            // Verify that this user shouldn't fail (if it should, return the proper HRESULT)
            bool isBlacklisted = false;
            lock (_blacklist)
            {
                isBlacklisted = _blacklist.TryGetValue(req._authData._userID1, out resp._hresult);
            }

            if (!isBlacklisted)
            {
                resp._signature = new XSigSignature();
                resp._signature._serviceId = req._serviceId;
                resp._signature._authData._titleID = req._authData._titleID;
                resp._signature._authData._titleVersion = req._authData._titleVersion;
                resp._signature._authData._userID1 = req._authData._userID1;
                resp._signature._authData._userID2 = req._authData._userID2;
                resp._signature._authData._userID3 = req._authData._userID3;
                resp._signature._authData._userID4 = req._authData._userID4;
                resp._signature._authData._XboxID = req._authData._XboxID;

                byte[] iSigKey = ComputeIntermediateSignature(resp._signature, Keys.SigMaster[0]);
                resp._signature._signature = ComputeHash(req._digest, iSigKey);
                resp._hresult = HResult.S_OK;
            }

            HttpListenerResponse httpResp = context.Response;
            httpResp.StatusCode = 200;
            httpResp.ContentLength64 = resp.Size();
            httpResp.OutputStream.Write(resp.GetBytes(), 0, (int)httpResp.ContentLength64);
        }

        public static Byte[] ComputeIntermediateSignature(XSigSignature sig, Byte[] key)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter wr = new BinaryWriter(ms);

            wr.Write(sig._serviceId);
            wr.Write(sig._timeStamp);
            wr.Write(sig._authData._titleID);
            wr.Write(sig._authData._titleVersion);
            wr.Write(sig._authData._XboxID);
            wr.Write(sig._authData._userID1);
            wr.Write(sig._authData._userID2);
            wr.Write(sig._authData._userID3);
            wr.Write(sig._authData._userID4);

            return ComputeHash(ms.ToArray(), key);
        }

        public static Byte[] ComputeHash(Byte[] data, Byte[] key)
        {
            return new HMACSHA1(key).ComputeHash(data);
        }

        private void VerifySignature(HttpListenerContext context)
        {
            NotFound404(context);
        }

        private void NotFound404(HttpListenerContext context)
        {
            Global.RO.Warn("FakeSig: Request URL: " + context.Request.RawUrl + " not recognized.");

            HttpListenerResponse resp = context.Response;
            resp.StatusCode = 404;
            resp.StatusDescription = "Not Found";
        }

        public bool VerifyResponseToken(AccessToken token)
        {
            XRLXSigVerifySignature verify = new XRLXSigVerifySignature(token.WriteSignData());
            verify.Requests[0]._signature.ReadBytes(token.Signature);

            if (verify.Execute() && verify.Responses.Length > 0 && verify.Responses[0]._hresult == 0)
            {
                return true;
            }

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\DecayLeaderBoard.cs ===
using System;
using System.Text;
using ServerTestFramework;

using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	public class DecayLeaderBoard : TestNode
	{
		public DecayLeaderBoard(string Name)
		{
            AddChild(new Decay1LB(201,10));
            AddChild(new DecayMultipleLB(201,new uint[]{10,11},2));
            AddChild(new DynamicDecay1LB(201,15));
            AddChild(new DynamicDecay1LB2(201,16));
		}
	}

	public class DecayMultipleLB : TestBase
	{
		XRLEnumLBResponse[] response;
		public ulong[] DecayUserlist;
		public ulong[] ActiveUserlist;
		public uint m_titleid;
		public uint[] LBTypeList;

		public DecayMultipleLB(uint title,uint[] lbtypelist,int usercount)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBTypeList = lbtypelist;
			DecayUserlist = new ulong[usercount];
			ActiveUserlist = new ulong[usercount];
			for (int i=0;i<usercount;i++)
			{
				DecayUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
				ActiveUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
			}

		}

		public bool run()
		{
			bool retval=false;
				
			if(BuildRequest())
			{
				// call decay sp..
				DBHelper.Decay();

				// enumerate the leader board and check if decay happened correctly.
				response = new XRLEnumLBResponse[LBTypeList.Length];
				for( int k=0;k<LBTypeList.Length;k++)
				{
					XRLEnumLBRequest LBRequest;
					LBRequest = new XRLEnumLBRequest(m_titleid,
						LBTypeList[k],
						0,
						(byte)0,13,0,0);
					response[k] = LBRequest.Execute();
				}
				retval =VerifyResponse();
			}
			return retval;
		}


		public bool VerifyResponse()
		{
			bool retval= true;

			for( int k=0;k<LBTypeList.Length;k++)
			{ 
				if(XResult.Failed(response[k].xResult))
					return false;

				for(int i=0;i< response[k].RepUserLBLen;i++)
				{
					bool found = false;
					for(int d=0;d< DecayUserlist.Length;d++)
					{
						if(DecayUserlist[d]==response[k].RepUserLB[i].Userdata.UserID)
						{
							System.Console.WriteLine("User did not Decay");
							retval=false;
							break;
						}
					}

					for(int a=0;a< ActiveUserlist.Length;a++)
					{
						if(ActiveUserlist[a]==response[k].RepUserLB[i].Userdata.UserID)
						{
							found=true;
							break;
						}
					}

					if(!found)
					{
						System.Console.WriteLine("User not found ");
						retval= false;
						break;
					}
					
				}
			}
			return retval;
		}


		protected bool  BuildRequest()
		{
			bool retval=true;
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);

				ulong rating= 500000;
				// first creat users that will decay.
				for(int i=0;i< DecayUserlist.Length;i++)
				{
					
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,2);
					for( int k=0;k<LBTypeList.Length;k++)
					{
						SetReq.AddSetData(LBTypeList[k],DecayUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					}
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
					
				}


				//change the User last update datetime.
				for( int k=0;k<LBTypeList.Length;k++)
				{
					DBHelper.ChangeLastWriteTime((int)LBTypeList[k],m_titleid,8);
				}
				// add new users to leaderboard.
				for(int i=0;i< ActiveUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,2);
					for( int k=0;k<LBTypeList.Length;k++)
					{
						SetReq.AddSetData(LBTypeList[k],ActiveUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					}
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}
				
			}
			else retval= false;
				

			return retval;

		}


		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}

	}

	public class Decay1LB : TestBase
	{
		XRLEnumLBResponse response;
		public ulong[] DecayUserlist;
		public ulong[] ActiveUserlist;
		public uint m_titleid;
		public uint LBType;

		public Decay1LB(uint title,uint lbtype)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			DecayUserlist = new ulong[2];
			ActiveUserlist = new ulong[2];
			for (int i=0;i<2;i++)
			{
				DecayUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
				ActiveUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
			}

		}

		protected bool  BuildRequest()
		{
			bool retval=true;
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);

				ulong rating= 500000;
				// first creat users that will decay.
				for(int i=0;i< DecayUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,DecayUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}


				//change the User last update datetime.
				DBHelper.ChangeLastWriteTime((int)LBType,m_titleid,8);
				// add new users to leaderboard.
				for(int i=0;i< ActiveUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,ActiveUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}
				
			}
			else retval= false;
				

			return retval;

		}
		public bool run()
		{
			bool retval=false;
				
			if(BuildRequest())
			{
				// call decay sp..
				DBHelper.Decay();

				// enumerate the leader board and check if decay happened correctly.
				XRLEnumLBRequest LBRequest;
				
				LBRequest = new XRLEnumLBRequest(m_titleid,
					LBType,
					0,
					(byte)0,13,0,0);

				
				response = LBRequest.Execute();
				retval =VerifyResponse();
			}
			return retval;
		}


		public bool VerifyResponse()
		{
			bool retval= true;
			if(XResult.Failed(response.xResult))
				return false;

			for(int i=0;i< response.RepUserLBLen;i++)
			{
				bool found = false;
				for(int d=0;d< DecayUserlist.Length;d++)
				{
					if(DecayUserlist[d]==response.RepUserLB[i].Userdata.UserID)
					{
						System.Console.WriteLine("User did not Decay");
						retval=false;
						break;
					}
				}

				for(int a=0;a< ActiveUserlist.Length;a++)
				{
					if(ActiveUserlist[a]==response.RepUserLB[i].Userdata.UserID)
					{
						found=true;
						break;
					}
				}

				if(!found)
				{
					System.Console.WriteLine("User not found ");
					retval= false;
					break;
				}
				
			}
			return retval;
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}


	}

	public class DynamicDecay1LB : TestBase
	{
		XRLEnumLBResponse response;
		public ulong[] DecayUserlist;
		public ulong[] ActiveUserlist;
		public uint m_titleid;
		public uint LBType;

		public DynamicDecay1LB(uint title,uint lbtype)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			DecayUserlist = new ulong[2];
			ActiveUserlist = new ulong[2];
			for (int i=0;i<2;i++)
			{
				DecayUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
				ActiveUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
			}

		}

		protected bool  BuildRequest()
		{
			bool retval=true;
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);

				ulong rating= 500000;
				// first creat users that will decay.
				for(int i=0;i< DecayUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,DecayUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}


				//change the User last update datetime.
				DBHelper.ChangeLastWriteTime((int)LBType,m_titleid,8);
				// add new users to leaderboard.
				for(int i=0;i< ActiveUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,ActiveUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}
				
			}
			else retval= false;
				

			return retval;

		}
		public bool run()
		{
			bool retval=false;
				
			if(BuildRequest())
			{
				// call decay sp..
				DBHelper.Decay();

				// make sure the lb did not decay.
				XRLEnumLBRequest LBRequest;
				
				LBRequest = new XRLEnumLBRequest(m_titleid,
					LBType,
					0,
					(byte)0,13,0,0);

				
				response = LBRequest.Execute();
				if(!VerifyResponseNoDecay())
						return false;
					
				// change the lb param to decay. and call decay sp
				DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
				db.UpdateLeaderBoards((int)m_titleid,(int)LBType,0,0,6);
				Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingfortitle 0xc9");

				DBHelper.Decay();

				// enumerate the leader board and check if decay happened correctly.
				XRLEnumLBRequest LBRequest2;
				
				LBRequest2 = new XRLEnumLBRequest(m_titleid,
					LBType,
					0,
					(byte)0,13,0,0);

				
				response = LBRequest2.Execute();
				retval =VerifyResponse();
			}
			return retval;
		}

		public bool VerifyResponseNoDecay()
		{
			bool retval= true;
			if(XResult.Failed(response.xResult))
				return false;

			for(int i=0;i< response.RepUserLBLen;i++)
			{
				bool found = false;
				for(int d=0;d< DecayUserlist.Length;d++)
				{
					if(DecayUserlist[d]==response.RepUserLB[i].Userdata.UserID)
					{
						found=true;
						break;
					}
				}
				if(!found)
				{
					
					for(int a=0;a< ActiveUserlist.Length;a++)
					{
						if(ActiveUserlist[a]==response.RepUserLB[i].Userdata.UserID)
						{
							found=true;
							break;
						}
					}
				}

				if(!found)
				{
					System.Console.WriteLine("User not found ");
					retval= false;
					break;
				}
				
			}
			return retval;
		}


		public bool VerifyResponse()
		{
			bool retval= true;
			if(XResult.Failed(response.xResult))
				return false;

			for(int i=0;i< response.RepUserLBLen;i++)
			{
				bool found = false;
				for(int d=0;d< DecayUserlist.Length;d++)
				{
					if(DecayUserlist[d]==response.RepUserLB[i].Userdata.UserID)
					{
						System.Console.WriteLine("User did not Decay");
						retval=false;
						break;
					}
				}

				for(int a=0;a< ActiveUserlist.Length;a++)
				{
					if(ActiveUserlist[a]==response.RepUserLB[i].Userdata.UserID)
					{
						found=true;
						break;
					}
				}

				if(!found)
				{
					System.Console.WriteLine("User not found ");
					retval= false;
					break;
				}
				
			}
			return retval;
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}


	}

	public class DynamicDecay1LB2 : TestBase
	{
		XRLEnumLBResponse response;
		public ulong[] DecayUserlist;
		public ulong[] ActiveUserlist;
		public uint m_titleid;
		public uint LBType;

		public DynamicDecay1LB2(uint title,uint lbtype)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			DecayUserlist = new ulong[2];
			ActiveUserlist = new ulong[2];
			for (int i=0;i<2;i++)
			{
				DecayUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
				ActiveUserlist[i] = StatsStressSupport.GenerateRandomPUID ();
			}

		}

		protected bool  BuildRequest()
		{
			bool retval=true;
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);

				ulong rating= 500000;
				// first creat users that will decay.
				for(int i=0;i< DecayUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,DecayUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}


				//change the User last update datetime.
				DBHelper.ChangeLastWriteTime((int)LBType,m_titleid,8);
				// add new users to leaderboard.
				for(int i=0;i< ActiveUserlist.Length;i++)
				{
					XRLSetRequest SetReq= new XRLSetRequest(m_titleid,1);
					SetReq.AddSetData(LBType,ActiveUserlist[i],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,rating);
					rating = rating-200;

					XRLSetResponse response = SetReq.Execute();

					if(XResult.Failed(response.xResult))
					{
						System.Console.WriteLine("Error while Adding users");
						return false;
					}
				}
				
			}
			else retval= false;
				

			return retval;

		}
		public bool run()
		{
			bool retval=false;
				
			if(BuildRequest())
			{
				// call decay sp..
				DBHelper.Decay();

				// make sure the lb did not decay.
				XRLEnumLBRequest LBRequest;
				
				LBRequest = new XRLEnumLBRequest(m_titleid,
					LBType,
					0,
					(byte)0,13,0,0);

				
				response = LBRequest.Execute();
				if(!VerifyResponseNoDecay())
					return false;
					
				// change the lb param to decay. and call decay sp
				DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
				db.UpdateLeaderBoards((int)m_titleid,(int)LBType,0,0,6);
				Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.lbsvr,"e :lbsvr reloadsettingforlb 0xc9 0x10");

				DBHelper.Decay();

				// enumerate the leader board and check if decay happened correctly.
				XRLEnumLBRequest LBRequest2;
				
				LBRequest2 = new XRLEnumLBRequest(m_titleid,
					LBType,
					0,
					(byte)0,13,0,0);

				
				response = LBRequest2.Execute();
				retval =VerifyResponse();
			}
			return retval;
		}

		public bool VerifyResponseNoDecay()
		{
			bool retval= true;
			if(XResult.Failed(response.xResult))
				return false;

			for(int i=0;i< response.RepUserLBLen;i++)
			{
				bool found = false;
				for(int d=0;d< DecayUserlist.Length;d++)
				{
					if(DecayUserlist[d]==response.RepUserLB[i].Userdata.UserID)
					{
						found=true;
						break;
					}
				}
				if(!found)
				{
					
					for(int a=0;a< ActiveUserlist.Length;a++)
					{
						if(ActiveUserlist[a]==response.RepUserLB[i].Userdata.UserID)
						{
							found=true;
							break;
						}
					}
				}

				if(!found)
				{
					System.Console.WriteLine("User not found ");
					retval= false;
					break;
				}
				
			}
			return retval;
		}


		public bool VerifyResponse()
		{
			bool retval= true;
			if(XResult.Failed(response.xResult))
				return false;

			for(int i=0;i< response.RepUserLBLen;i++)
			{
				bool found = false;
				for(int d=0;d< DecayUserlist.Length;d++)
				{
					if(DecayUserlist[d]==response.RepUserLB[i].Userdata.UserID)
					{
						System.Console.WriteLine("User did not Decay");
						retval=false;
						break;
					}
				}

				for(int a=0;a< ActiveUserlist.Length;a++)
				{
					if(ActiveUserlist[a]==response.RepUserLB[i].Userdata.UserID)
					{
						found=true;
						break;
					}
				}

				if(!found)
				{
					System.Console.WriteLine("User not found ");
					retval= false;
					break;
				}
				
			}
			return retval;
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}


	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2Commit_VerifySig.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;
using System.Security.Cryptography;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;

namespace StatsFD
{
    public class V2Commit_VerifySig : TestNode
    {
        private FakeSigSrv _sigSrv = null;

        public V2Commit_VerifySig(string Name)
        {
            if (_sigSrv == null) { _sigSrv = new FakeSigSrv(); }
            _sigSrv.Start();

            //            Test Case              FSS    Title  Lb   //
            AddChild( new SFDCommitVerifySig ( _sigSrv , 201 , 20 ) , true , false);
            AddChild( new SFDSigBannedXBOX   ( _sigSrv , 201 , 20 ) , true , false);
            AddChild( new SFDSigBannedUser   ( _sigSrv , 201 , 20 ) , true , false);
            AddChild( new SFDSigBannedTitle  ( _sigSrv , 201 , 20 ) , true , false);
            AddChild( new SFDSigBannedDigest ( _sigSrv , 201 , 20 ) , true , false);
            AddChild( new SFDSigServerError  ( _sigSrv , 201 , 20 ) , true , false);
        }

        public override void PostRun()
        {
            _sigSrv.Stop();
        }

        //
        // Pass sigSrv to all test cases...
        // let test cases clear the fail user cache
        //

        public class SFDSigBannedXBOX : SFDSigError
        {
            public SFDSigBannedXBOX(FakeSigSrv fss, uint title, uint lbtype)
                : base(fss, title, lbtype)
            {
                XError = HResult.XONLINE_E_SIGNATURE_BANNED_XBOX;
            }
        }

        public class SFDSigBannedUser : SFDSigError
        {
            public SFDSigBannedUser(FakeSigSrv fss, uint title, uint lbtype)
                : base(fss, title, lbtype)
            {
                XError = HResult.XONLINE_E_SIGNATURE_BANNED_USER;
            }
        }

        public class SFDSigBannedTitle : SFDSigError
        {
            public SFDSigBannedTitle(FakeSigSrv fss, uint title, uint lbtype)
                : base(fss, title, lbtype)
            {
                XError = HResult.XONLINE_E_SIGNATURE_BANNED_TITLE;
            }
        }

        public class SFDSigBannedDigest : SFDSigError
        {
            public SFDSigBannedDigest(FakeSigSrv fss, uint title, uint lbtype)
                : base(fss, title, lbtype)
            {
                XError = HResult.XONLINE_E_SIGNATURE_BANNED_DIGEST;
            }
        }

        public class SFDSigServerError : SFDSigError
        {
            public SFDSigServerError(FakeSigSrv fss, uint title, uint lbtype)
                : base(fss, title, lbtype)
            {
                XError = HResult.XONLINE_E_SIGNATURE_SERVICE_UNAVAILABLE;
            }
        }

        public class SFDSigError : V2TestBase
        {
            private FakeSigSrv _sigSrv;

            public uint  _titleId;
            public uint  _lbId;
            public ulong _userId;
            public uint   XError;

            public SFDSigError(FakeSigSrv fss, uint titleId, uint lbId)
            {
                 _sigSrv = fss;

                _titleId = titleId; //StatsStressSupport.GetRandomTitleIdFromList();
                _lbId    = lbId;
                _userId  = StatsStressSupport.GenerateRandomPUID();
            }

            protected XRLSetRequest BuildRequest()
            {
                XRLSetRequest req = null;

                if (!DBHelper.ResetTile(_titleId))
                {
                    throw new TestCaseException("Couldn't reset title: " + _titleId);
                }

                Thread.Sleep(300);
                req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(
                    _lbId
                  , _userId
                  , 5
                  , SpecialAttribMask.Nickname | SpecialAttribMask.Rating
                  , (ulong)12345
                );

                return req;
            }

            override protected void Execute()
            {
                uint expectedResult = XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT;
                ushort expectedSetRefLen = 0;

                 _sigSrv.AddFailUser(_userId, XError);

                try
                {
                    XRLSetRequest setRequest = BuildRequest();
                    setRequest.CustomHeader = "AlternateSignUrl: " + _sigSrv.Address + "xsig/SignOnBehalf.ashx\r\n";

                    XRLSetResponse setResponse = setRequest.Execute();
                    VerifyXRLResponse("Stats Post", setResponse, expectedResult);

                    if (setResponse.SetRefLen != expectedSetRefLen)
                    {
                        throw new TestCaseException(String.Format(
                            "Stats Post: SetRefLen = {0} (expected: {1})"
                          , setResponse.SetRefLen
                          , expectedSetRefLen
                        ));
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
                finally
                {
                     _sigSrv.ClearFailUsers();
                }
            }
        }

        public class SFDCommitVerifySig : V2TestBase
        {
            private FakeSigSrv  _sigSrv;

            public uint  _titleId;
            public uint  _lbId;
            public ulong _userId;

            public SFDCommitVerifySig(FakeSigSrv fss, uint title, uint lbId)
            {
                _sigSrv = fss;

                _titleId = title; //StatsStressSupport.GetRandomTitleIdFromList();
                _lbId = lbId;
                _userId = StatsStressSupport.GenerateRandomPUID();
            }

            protected XRLSetRequest BuildRequest()
            {
                XRLSetRequest req = null;

                if (!DBHelper.ResetTile(_titleId))
                {
                    throw new TestCaseException(String.Format(
                        "Couldn't reset title: 0x{0:X8} ({0})"
                      , _titleId
                    ));
                }

                Thread.Sleep(300);
                req = new XRLSetRequest(_titleId, 1);
                req.AddSetData(
                    _lbId
                  , _userId
                  , 5
                  , SpecialAttribMask.Nickname | SpecialAttribMask.Rating
                  , (ulong)12345
                );

                return req;
            }

            override protected void Execute()
            {
                uint expectedSetResult    = XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT;
                uint expectedCommitResult = XResult.S_OK;

                XRLSetRequest setRequest = BuildRequest();

                // execute and get response
                setRequest.CustomHeader = "AlternateSignUrl: " + _sigSrv.Address + "xsig/SignOnBehalf.ashx\r\n";

                XRLSetResponse setResponse = setRequest.Execute();
                VerifyXRLResponse("Stats Post", setResponse, expectedSetResult);

                if (! _sigSrv.VerifyResponseToken(setResponse.Token))
                {
                    throw new TestCaseException("SigSrv Respose Token could not be verified.");
                }

                // commit the attachment.
                XRLCommitAttachment commitRequest = new XRLCommitAttachment(
                    _titleId
                  , 50
                  , 50
                  , setResponse.Token.PathNameLen
                  , setResponse.Token.PathName
                  , setResponse.SetRefLen
                  , setResponse.SetRef
                );

                XRLResponse commitResponse = commitRequest.Execute();
                VerifyXRLResponse("Commit Attachment", commitResponse, expectedCommitResult);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\LightWeight_BoundryCases.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;



namespace StatsFD
{
	public class LightWeight_BoundryCases : TestNode
	{
		public LightWeight_BoundryCases(string Name)
		{
            AddChild(new SFDFillAscending(401,10,12,10));
            AddChild(new SFDFilldescending(401,10,12,10));
            AddChild(new SFDAddUsersINFilledAscLB(401,10));
            AddChild(new SFDAddUsersINFilledDesLB(401,10));
            AddChild(new SFDFillByAddingInMiddle(401,10,12,10));
            AddChild(new SFDResetAt5_AddAt10(401,10));
            AddChild(new SFDResetAt10_AddAt10(401,10));
            AddChild(new SFDAddUsersWithSameRatings(401,10));
            AddChild(new SFDTryReaddingExistingUsers(401,10));
            AddChild(new SFDAdd4UDiffRatingInAsc(401,10));
            AddChild(new SFDAdd4UDiffRatingInDes(401,10));
            AddChild(new SFDAdd4UwithSameRating(401,10));
            AddChild(new SFDAdd4U2Old2New(401,10));
			
			//additional cases.
            AddChild(new SFDAddUsersWithOutRank(401,10));
            AddChild(new SFDEbumByUserWithAtt(401,10));
            AddChild(new SFDEbumByRankWithAtt(401,10));
		}
	}

	class SFDAddUsersWithOutRank : TestBase
	{
		public XRLSetRequest SetReqlist;
		public XRLSetResponse responselist;
		public uint m_titleid;
		public uint LBType;
		public ulong User;
		
		public SFDAddUsersWithOutRank(uint title,uint lbtype)
		{
			m_titleid=title;
			LBType=lbtype;
			User = StatsStressSupport.GenerateRandomPUID ();
		}
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReqlist = new XRLSetRequest(m_titleid,1);
				SetReqlist.AddSetData(LBType,User,5,SpecialAttribMask.Null,0);
				
				return true;
			}
			

			return false;

		}

		override protected void Execute()
		{
			if(BuildRequest())
			{
				responselist = SetReqlist.Execute();
				if(responselist.xResult==0 && VerifyResponse())
					ResultCode=TEST_RESULTS.PASSED;
				else
					ResultCode=TEST_RESULTS.FAILED;
			
			}
			

		}
		protected bool VerifyResponse()
		{
			bool retval=true;
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse response;

			LBRequest = new XRLEnumLBRequest(m_titleid,
				LBType,
				0,
				(byte)0,13,2,SpecialAttribMask.Null);

			response = LBRequest.Execute();
			if(response.RepUserLBLen!=0)
				retval=false;

		
		
			
			return retval;

		}

	}
	
	class SFDEbumByUserWithAtt : SFDFillAscending
	{
		public SFDEbumByUserWithAtt(uint title,uint lbtype):base(title,lbtype,10,10)
		{
			
		}

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					retval=VerifyResponseforAtt();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

		public bool VerifyResponseforAtt()
		{
			bool retval=true;
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse response;

			LBRequest = new XRLEnumLBRequest(m_titleid,
				LBType,
				SetReqlist[5].userPuid[0],
				(byte)1,13,2,SpecialAttribMask.Null);

			response = LBRequest.Execute();

	
	
			if(response!=null && response.xResult ==0)
			{
				if(response.RepUserLBLen ==LBSize)
				{
					for(int i=0;i<LBSize;i++)
					{	
						if(response.RepUserLB[i].Userdata.UserID != SetReqlist[i].userPuid[0])
						{
							System.Console.WriteLine("the User at this rank retrive is different from expected");
							return false;
						}
					
						
						XRLAttList  tempList =response.RepUserLB[i].AttList;
						for(int index =0; index < tempList.SubAttrSize ;index++)
						{
							XrlSubAttr[] temp  = SetReqlist[i].SetReq[0].SubAttr;
							for(int v=0;v<temp.Length;v++)
							{
								if(tempList.SubAttr[index].Info.ID==temp[v].Info.ID)
								{
									if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Long)
									{
										XrlAttrUInt tempint= (XrlAttrUInt)(tempList.SubAttr[index].Data);
										if(tempint.Data != ((XrlAttrUInt)temp[v].Data).Data)
										{
											System.Console.WriteLine("Attribute Data does not match");
											return false;
										}
										break;
									}
								}
							}
						}

					}
				

				}

			}
			else
				System.Console.WriteLine("error the rec count is different.");

			return retval;

		
		}
	}

	class SFDEbumByRankWithAtt : SFDFillAscending
	{
		public SFDEbumByRankWithAtt(uint title,uint lbtype):base(title,lbtype,10,10)
		{
			
		}

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					retval=VerifyResponseforAtt();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

		public bool VerifyResponseforAtt()
		{
			bool retval=true;
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse response;

			LBRequest = new XRLEnumLBRequest(m_titleid,
				LBType,
				0,
				(byte)0,13,2,SpecialAttribMask.Null);

			response = LBRequest.Execute();

	
	
			if(response!=null && response.xResult ==0)
			{
				if(response.RepUserLBLen ==LBSize)
				{
					for(int i=0;i<LBSize;i++)
					{	
						if(response.RepUserLB[i].Userdata.UserID != SetReqlist[i].userPuid[0])
						{
							System.Console.WriteLine("the User at this rank retrive is different from expected");
							return false;
						}
					
						
						XRLAttList  tempList =response.RepUserLB[i].AttList;
						for(int index =0; index < tempList.SubAttrSize ;index++)
						{
							XrlSubAttr[] temp  = SetReqlist[i].SetReq[0].SubAttr;
							for(int v=0;v<temp.Length;v++)
							{
								if(tempList.SubAttr[index].Info.ID==temp[v].Info.ID)
								{
									if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Long)
									{
										XrlAttrUInt tempint= (XrlAttrUInt)(tempList.SubAttr[index].Data);
										if(tempint.Data != ((XrlAttrUInt)temp[v].Data).Data)
										{
											System.Console.WriteLine("Attribute Data does not match");
											return false;
										}
										break;
									}
								}
							}
						}

					}
				

				}

			}
			else
				System.Console.WriteLine("error the rec count is different.");

			return retval;

		
		}
	}

	class SFDAdd4U2Old2New : SFDFillAscending
	{
		public SFDAdd4U2Old2New(uint title,uint lbtype):base(title,lbtype,8,10)
		{
			
		}
		protected void Append4U2Old2New()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			int EndRank=m_user.Length;
			ulong Endrating = m_user[EndRank-1].rating-200;
			
			UserRatingMap[] tempMap= new UserRatingMap[EndRank+2];
			// copy the first array.
			for (int i=0 ;i<m_user.Length;i++)
				tempMap[i]=m_user[i];
			
			tempMap[EndRank]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+1]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			
			
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,4);
			SetReq.AddSetData(LBType,m_user[EndRank-2].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank-2].rating);
			SetReq.AddSetData(LBType,m_user[EndRank-4].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank-4].rating);
			SetReq.AddSetData(LBType,m_user[EndRank].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+1].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User 4 Users Failed");
			

		}


		

	

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					Append4U2Old2New();
					retval=VerifyResponseByEnum();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

	}

	class SFDAdd4UwithSameRating : SFDFillAscending
	{
		public SFDAdd4UwithSameRating(uint title,uint lbtype):base(title,lbtype,8,10)
		{
			
		}
		protected void Append4UserInAsc()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			int EndRank=m_user.Length;
			ulong Endrating = m_user[EndRank-1].rating-200;
			
			UserRatingMap[] tempMap= new UserRatingMap[EndRank+4];
			// copy the first array.
			for (int i=0 ;i<m_user.Length;i++)
				tempMap[i]=m_user[i];
			
			tempMap[EndRank]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			tempMap[EndRank+1]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			tempMap[EndRank+2]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			tempMap[EndRank+3]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,4);
			SetReq.AddSetData(LBType,m_user[EndRank].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+1].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+2].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+2].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+3].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+3].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User 4 Users Failed");
			

		}


		

	

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					Append4UserInAsc();
					retval=VerifyResponseByEnumsameRating();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

		protected bool VerifyResponseByEnumsameRating()
		{
			bool retval=true;
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse response;

			LBRequest = new XRLEnumLBRequest(m_titleid,
				LBType,
				0,
				(byte)0,13,2,SpecialAttribMask.Null);

			response = LBRequest.Execute();

		
		
			if(response!=null && response.xResult ==0)
			{
				if(response.RepUserLBLen ==LBSize)
				{
					for(int i=0;i<LBSize;i++)
					{
						bool found= false;

						for(int j=0;j<LBSize;j++)
						{
							if(response.RepUserLB[i].Userdata.UserID == m_user[j].user)
								found= true;
							
						}
						if(!found)
						{
							System.Console.WriteLine("the User at this rank retrive is different from expected");
							return false;
						}
						

					}
					

				}

			}
			else
				System.Console.WriteLine("error the rec count is different.");

			return retval;

		}


	}

	class SFDAdd4UDiffRatingInAsc : SFDFillAscending
	{
		public SFDAdd4UDiffRatingInAsc(uint title,uint lbtype):base(title,lbtype,8,10)
		{
			
		}
		protected void Append4UserInAsc()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			int EndRank=m_user.Length;
			ulong Endrating = m_user[EndRank-1].rating-200;
			
			UserRatingMap[] tempMap= new UserRatingMap[EndRank+4];
			// copy the first array.
			for (int i=0 ;i<m_user.Length;i++)
				tempMap[i]=m_user[i];
			
			tempMap[EndRank]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+1]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+2]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+3]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,4);
			SetReq.AddSetData(LBType,m_user[EndRank].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+1].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+2].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+2].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+3].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+3].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User 4 Users Failed");
			

		}


		

	

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					Append4UserInAsc();
					retval=VerifyResponseByEnum();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

	}

	class SFDAdd4UDiffRatingInDes : SFDFillAscending
	{
		public SFDAdd4UDiffRatingInDes(uint title,uint lbtype):base(title,lbtype,8,10)
		{
			
		}
		protected void Append4UserInDes()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			int EndRank=m_user.Length;
			ulong Endrating = m_user[EndRank-1].rating-200;
			
			UserRatingMap[] tempMap= new UserRatingMap[EndRank+4];
			// copy the first array.
			for (int i=0 ;i<m_user.Length;i++)
				tempMap[i]=m_user[i];

			tempMap[EndRank]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+1]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+2]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			Endrating=Endrating-200;
			tempMap[EndRank+3]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),Endrating);
			
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,4);
			SetReq.AddSetData(LBType,m_user[EndRank+3].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+3].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+2].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+2].rating);
			SetReq.AddSetData(LBType,m_user[EndRank+1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank+1].rating);
			SetReq.AddSetData(LBType,m_user[EndRank].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[EndRank].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add 4 User Failed");
			

		}


	

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					Append4UserInDes();
					retval=VerifyResponseByEnum();

				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}

	}

	abstract class SFDLW_Boundry : TestBase
	{
		public uint m_titleid;
		public uint LBType;
		public UserRatingMap[] m_user= null;
		public int LBSize;
		public int NumReq;

		public SFDLW_Boundry(uint title,uint lbtype,int Nousers, int lbsize)
		{
			m_titleid= title;
			LBType=lbtype;
			NumReq = Nousers;
			LBSize =lbsize;
			m_user = new UserRatingMap[Nousers];

			ulong rating= 2000;
			for(int index=0; index<Nousers;index++)
			{
				m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating);
				rating =rating-100;
			}
		}
		public abstract  bool run();
		protected void ResetUserAtRank(int rank)
		{
			XRLResetUser ResetReq;
			XRLResponse response;

			UserRatingMap UserToReset=null;
			UserRatingMap[] tempMap= new UserRatingMap[m_user.Length];
			for (int i=0,j=0 ;i<m_user.Length  ;i++)
			{
				if(i==(rank-1))
				{
					UserToReset=m_user[i];
				}
				else
				{
					tempMap[j]=m_user[i];
					j=j+1;
				}
			}
			m_user= tempMap;

			if(UserToReset !=null)
			{
				ResetReq = new XRLResetUser(m_titleid,UserToReset.user,LBType);
				response = ResetReq.Execute();
				if(response ==null || response.xResult !=0)
					throw new Exception("Reset User At pos"+rank+"Failed");
			}
			else
					throw new Exception("Invalid Rank "+rank+"Failed");
				
		}

		protected void AddUserAtRank(int rank)
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;

			//
			UserRatingMap[] tempMap= new UserRatingMap[m_user.Length];
			for (int i=0,j=0 ;i<m_user.Length;i++)
			{
				if(i==(rank-1))
				{
					tempMap[i]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),(m_user[i].rating+20));
				}
				else
				{
					tempMap[i]=m_user[j];
					j=j+1;
				}
			}
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[(rank-1)].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[rank-1].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos"+rank+"Failed");
			

		}

		protected void AddUserWithSameRatingAsUserAtRank(int rank)
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;

			//
			UserRatingMap[] tempMap= new UserRatingMap[m_user.Length];

			for (int i=0,j=0 ;i<m_user.Length;i++)
			{
				if(i==(rank-1))
				{
					tempMap[i]= new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),(m_user[i].rating+20));
					tempMap[i+1]=m_user[j];
					i++;
				}
				else
					tempMap[i]=m_user[j];
				
				j=j+1;
			}
			m_user= tempMap;
			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[(rank-1)].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[rank-1].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos"+rank+"Failed");
			

		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}


		protected bool VerifyResponse()
		{
			bool retval=true;
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest((uint)NumReq);

			for(int i=0;i<NumReq;i++)
			{
				GetReq.AddGetData(m_titleid,
					m_user[i].user,
					LBType,2,
					0);
			}

			GetResp = GetReq.Execute();
		
			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==NumReq)
				{
					for(int i=0;i<NumReq;i++)
					{	
						if(GetResp.RespData[i].Resphead.userPuid == m_user[i].user)
						{
							XRLAttList temp =  (XRLAttList)GetResp.RespData[i].AttList;
							for(int k=0;k<GetResp.RespData[i].AttlistSize;k++)
							{	
								if(i>= LBSize)
									break;
								
								if(temp.SubAttr[k].Data== null)
								{
									System.Console.WriteLine("LWLB  returned a NULL data");
									return false; 
								}
																	
							}
							
						}
						else
						{
							System.Console.WriteLine("the User at this rank retrive is different from expected");
							return false;
						}
						

					}
					

				}

			}
			else
				System.Console.WriteLine("error the rec count is different.");

			return retval;

		}

		protected bool VerifyResponseByEnum()
		{
			bool retval=true;
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse response;

			LBRequest = new XRLEnumLBRequest(m_titleid,
				LBType,
				0,
				(byte)0,13,2,SpecialAttribMask.Null);

			response = LBRequest.Execute();

		
		
			if(response!=null && response.xResult ==0)
			{
				if(response.RepUserLBLen ==LBSize)
				{
					for(int i=0;i<LBSize;i++)
					{	
						if(response.RepUserLB[i].Userdata.UserID != m_user[i].user)
						{
							System.Console.WriteLine("the User at this rank retrive is different from expected");
							return false;
						}
						

					}
					

				}

			}
			else
				System.Console.WriteLine("error the rec count is different.");

			return retval;

		}

	}

	class SFDFillAscending : SFDLW_Boundry
	{
		public XRLSetRequest[] SetReqlist;
		public XRLSetResponse[] responselist;
					
		
		public SFDFillAscending(uint title,uint lbtype,int Nousers, int lbsize):base(title,lbtype,Nousers,lbsize)
		{
			SetReqlist = new XRLSetRequest[Nousers];
			responselist = new XRLSetResponse[Nousers];

		}
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
			
			
				for( int i=0; i<NumReq;i++)
				{
					SetReqlist[i]= new XRLSetRequest(m_titleid,1);
					SetReqlist[i].AddSetData(LBType,m_user[i].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[i].rating);
				
				}
				return true;
			}
			

			return false;

		}

		public override bool run()
		{
			bool retval=false;
			
			
			if(BuildRequest())
			{
				for(int i=0 ;i< NumReq ;i++)
				{
					responselist[i] = SetReqlist[i].Execute();
					
				}
				if(VerifyResponse())
				{
					retval=VerifyResponseByEnum();
				}

			}
			return retval;
		}

	
		
	}

	class SFDFilldescending : SFDLW_Boundry
	{
		XRLSetRequest[] SetReqlist;
		public XRLSetResponse[] responselist;
					
		public SFDFilldescending(uint title,uint lbtype,int Nousers, int lbsize):base(title,lbtype,Nousers,lbsize)
		{
			SetReqlist = new XRLSetRequest[Nousers];
			responselist = new XRLSetResponse[Nousers];

		}

		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
			
			
				for( int i=0; i<NumReq;i++)
				{
					SetReqlist[i]= new XRLSetRequest(m_titleid,1);
					SetReqlist[i].AddSetData(LBType,m_user[NumReq-i-1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[NumReq-i-1].rating);
				
				}
				return true;
			}
			

			return false;

		}

		public override  bool run()
		{
			bool retval=false;
			
			
			if(BuildRequest())
			{
				for(int i=0 ;i< NumReq ;i++)
				{
					responselist[i] = SetReqlist[i].Execute();
					
				}
				if(VerifyResponse())
				{
					retval=VerifyResponseByEnum();
				}

			}
			return retval;
		}

	}

	class SFDFillByAddingInMiddle : SFDLW_Boundry
	{
		XRLSetRequest[] SetReqlist;
		public XRLSetResponse[] responselist;
					
		public SFDFillByAddingInMiddle(uint title,uint lbtype,int Nousers, int lbsize):base(title,lbtype,Nousers,lbsize)
		{
			SetReqlist = new XRLSetRequest[Nousers];
			responselist = new XRLSetResponse[Nousers];

		}

		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
			
			
				for( int i=0,j=0; i<NumReq;i=i+2,j++)
				{
					SetReqlist[i]= new XRLSetRequest(m_titleid,1);
					SetReqlist[i].AddSetData(LBType,m_user[j].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[j].rating);

					SetReqlist[i+1]= new XRLSetRequest(m_titleid,1);
					SetReqlist[i+1].AddSetData(LBType,m_user[NumReq-j-1].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[NumReq-j-1].rating);
				
				
				}
				return true;
			}
			

			return false;

		}

		public override  bool run()
		{
			bool retval=false;
			
			
			if(BuildRequest())
			{
				for(int i=0 ;i< NumReq ;i++)
				{
					responselist[i] = SetReqlist[i].Execute();
					
				}
				if(VerifyResponse())
				{
					retval=VerifyResponseByEnum();
				}

			}
			return retval;
		}
	}
	
	class SFDAddUsersINFilledDesLB : SFDFilldescending
	{
		public SFDAddUsersINFilledDesLB(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}
				
		protected void AddUserAtPos5AndVerify()
		{
			AddUserAtRank(5);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 5 Failed");

			
		}
		protected void AddUserAtPos10AndVerify()
		{
			AddUserAtRank(10);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 10 Failed");
		}
		protected void AddUserAtPos1AndVerify()
		{
			AddUserAtRank(1);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 1 Failed");
		}
		protected void AddUserAtPos11AndVerify()
		{
			AddUserAtRank(11);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 11 Failed");
		}

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					AddUserAtPos5AndVerify();
					AddUserAtPos10AndVerify();
					AddUserAtPos1AndVerify();
					AddUserAtPos11AndVerify();
					retval=VerifyResponseByEnum();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval=false;
			}
			return retval;
		}
		
	}
	
	class SFDAddUsersINFilledAscLB : SFDFillAscending
	{
		public SFDAddUsersINFilledAscLB(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}
				
		protected void AddUserAtPos5AndVerify()
		{
			AddUserAtRank(5);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 5 Failed");

			
		}
		protected void AddUserAtPos10AndVerify()
		{
			AddUserAtRank(10);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 10 Failed");
		}
		protected void AddUserAtPos1AndVerify()
		{
			AddUserAtRank(1);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 1 Failed");
		}
		protected void AddUserAtPos11AndVerify()
		{
			AddUserAtRank(11);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 11 Failed");
		}

		public override bool run()
		{
			bool retval= true;
			try
			{
				if(base.run())//FillLb
				{
					AddUserAtPos5AndVerify();
					AddUserAtPos10AndVerify();
					AddUserAtPos1AndVerify();
					AddUserAtPos11AndVerify();
					retval =VerifyResponseByEnum();
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval= false;
			}
			return retval;
		}

		

	}
	
	class SFDAddUsersWithSameRatings : SFDFillAscending
	{
		public SFDAddUsersWithSameRatings(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}
				
		protected void AddUserWithSameRatingAsRank5()
		{
			AddUserWithSameRatingAsUserAtRank(5);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 6 Failed");

			
		}
		protected void AddUserWithSameRatingAsRank10()
		{
			AddUserWithSameRatingAsUserAtRank(10);
			if(!VerifyResponse())
				throw new Exception("Add User At Pos 11 Failed");
		}
		
		public override bool run()
		{
			bool retval=true;
			try
			{
				if(base.run())//FillLb
				{
					AddUserWithSameRatingAsRank5();
					AddUserWithSameRatingAsRank10();
					retval=VerifyResponseByEnum();
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval =false;
			}
			return retval;
		}

		

	}
	
	class SFDResetAt5_AddAt10 : SFDFillAscending
	{
		public SFDResetAt5_AddAt10(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					ResetUserAtRank(5);
					AddUserAtRank(10);
					if(VerifyResponse())
					{
						retval =VerifyResponseByEnum();
					}
					else
						retval=false;
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval= false;
			}
			return retval;
		}
	}

	class SFDResetAt10_AddAt10 : SFDFillAscending
	{
		public SFDResetAt10_AddAt10(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}

		public override bool run()
		{
			bool retval = true;
			try
			{
				if(base.run())//FillLb
				{
					ResetUserAtRank(10);
					AddUserAtRank(10);
					if(VerifyResponse())
					{
						retval=VerifyResponseByEnum();
					}
					else 
						retval = false;
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval = false;
			}
			return retval;
		}
	}

	class SFDTryReaddingExistingUsers : SFDFillAscending
	{
		public SFDTryReaddingExistingUsers(uint title,uint lbtype):base(title,lbtype,12,10)
		{
			
		}

		protected void ReaddUserRankGreaterThenPrevious()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			// move user at rank 8 to rank 2.
			UserRatingMap[] tempMap= new UserRatingMap[m_user.Length];
			for (int i=0,j=0 ;i<m_user.Length;i++)
			{
				if(i== 2)
				{
					tempMap[i]= new UserRatingMap( m_user[8].user,(m_user[i].rating+20));
					
				}
				else
				{
					if(i==9)
					{
						j=j+1;
					}
					
                    tempMap[i]=m_user[j];

					j=j+1;
				}
			}
			m_user= tempMap;

			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[2].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[2].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos 2 Failed");

			if(!VerifyResponseByEnum())
				throw new Exception("ReaddUserRankGreaterThenPrevious");
		}
		protected void ReaddUserSameRank()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			// re add the user at rank 5 with same rating;
			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[(5)].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[5].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos 5 Failed");
			if(!VerifyResponseByEnum())
				throw new Exception("ReaddUserSameRank");
		}
		protected void ReaddUserRankLessThenPrevious()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			// move user at rank 8 to rank 2.
			UserRatingMap[] tempMap= new UserRatingMap[m_user.Length];
			for (int i=0,j=0 ;i<m_user.Length;i++)
			{
				if(i== 7)
				{
					tempMap[i]= new UserRatingMap( m_user[3].user,(m_user[i+1].rating+20));
					
				}
				else
				{
					if(i==3)
					{
						j=j+1;
					}
					
					tempMap[i]=m_user[j];

					j=j+1;
				}
			}
			m_user= tempMap;

			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[7].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[7].rating);
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos 7 Failed");

			if(!VerifyResponseByEnum())
				throw new Exception("ReaddUserRankLessThenPrevious");
		}
		protected void ReaddUserRankLessThenMaxAllowed()
		{
			XRLSetRequest SetReq;
			XRLSetResponse response;
			// re add the user at rank 5 with same rating;
			SetReq = new XRLSetRequest(m_titleid,1);
			SetReq.AddSetData(LBType,m_user[10].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(m_user[10].rating-500));
			response = SetReq.Execute();

			if(response ==null || response.xResult !=0)
				throw new Exception("Add User At pos 13 Failed");
			if(!VerifyResponseByEnum())
				throw new Exception("ReaddUserRankLessThenMaxAllowed");
		}
		public override bool run()
		{
			bool retval=true;
			try
			{
				if(base.run())//FillLb
				{
					ReaddUserRankGreaterThenPrevious();
					ReaddUserSameRank();
					ReaddUserRankLessThenPrevious();
					ReaddUserRankLessThenMaxAllowed();
					
				}
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e);
				retval =false;
			}
			return retval;
		}

		
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2BanAttachment.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;


namespace StatsFD
{
	public class V2BanAttachment : TestNode
	{
		public V2BanAttachment(string Name)
		{
            AddChild(new SFDBanInvalidRef(201,new uint[]{20}));
            AddChild(new SFDBanAttSingleRef(201,20));
            AddChild(new SFDBanAttMRefSLB(201,20));
            AddChild(new SFDBanAttMUMLB(201,new uint[]{20,21,23,24}));
            AddChild(new SFDBanAtt1UMLB(201,new uint[]{20,21,23,24}));
		}
	}

	public class SFDBanInvalidRef : SFDBanAttMRefSLB
	{
		public SFDBanInvalidRef(uint titleid, uint[] lbtypelist)
			:base(titleid,lbtypelist)
		{			
			usercount = 1;
		}
		
		override protected void Execute()
		{
			// execute and get response
            if (PrepareForTest())
            {
                // change the Ref..
                String newatt = AttName.Substring(0, (AttName.Length - 4)) + "PAN1";

                Request = new XRLRemoveAtt(newatt);
                response = Request.Execute();
                if (response.xResult == XResult.XONLINE_E_STAT_BAD_REQUEST)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
		}
	}

	public class SFDBanAttMRefSLB : TestBase
	{
		protected XRLRemoveAtt Request;
		protected XRLResponse response;
		protected uint Title_id;
		protected uint[] LB_Typelist;
		protected ulong[] UserIds;
		protected string AttName;
		protected int usercount=3;
		public SFDBanAttMRefSLB(uint titleid, uint lbtype)
		{
			Title_id= 	titleid;
			LB_Typelist = new uint[1];
			LB_Typelist[0] = lbtype;
		}

		public SFDBanAttMRefSLB(uint titleid, uint[] lbtypelist)
		{
			Title_id= 	titleid;
			LB_Typelist = lbtypelist;
			
		}

		protected bool PrepareForTest()
		{
			SFDCommitAttMUMLB test = new SFDCommitAttMUMLB(Title_id,(uint)usercount,LB_Typelist);
			if(test.run())
			{
				UserIds = test.users;
				AttName =Encoding.UTF8.GetString( test.response.Token.PathName);
				return true;
			}
			return false;
		}
		protected bool  BuildRequest()
		{
			if(PrepareForTest())
			{
				//
				Request= new XRLRemoveAtt(AttName);
				return true;
			}
							
			return false;

		}


		override protected void Execute()
		{
				
			if(BuildRequest())
			{
				// execute and get response
				response = Request.Execute();
				if(VerifyResponse())
				{
					ResultCode=TEST_RESULTS.PASSED;
				}
				else
				{
					ResultCode=TEST_RESULTS.FAILED;
				}

			}
		}

		virtual protected bool VerifyResponse()
		{
			if(XResult.Failed(response.xResult))
				return false;

			// try a get request
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;
			Thread.Sleep(100);
			GetReq= new XRLGetRequest((uint)UserIds.Length);
					
					
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			for( int i=0;i<UserIds.Length;i++)
			{
				GetReq.AddGetData(Title_id,
					UserIds[i],
					LB_Typelist[0],5,
					SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
			}

			GetResp = GetReq.Execute();
			if(GetResp!=null && GetResp.xResult ==0)
			{
				for( int i=0;i<GetResp.RespDataLen;i++)
				{
					if(GetResp.RespData[i].Resphead.userPuid == UserIds[i])
					{
						XRLAttList  tempList = GetResp.RespData[i].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr!=null)
								{
									System.Console.WriteLine("Content was not banned");
									return false;
								}
								break;
							}
								
						}

					}

				}
			}
			return true;

		}





	}

	public class SFDBanAtt1UMLB : SFDBanAttMRefSLB
	{
		public SFDBanAtt1UMLB(uint titleid, uint[] lbtypelist)
			:base(titleid,lbtypelist)
		{			
			usercount = 1;
		}

		override protected bool VerifyResponse()
		{
			if(XResult.Failed(response.xResult))
				return false;

			// try a get request
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;
			Thread.Sleep(100);
			GetReq= new XRLGetRequest((uint)LB_Typelist.Length);
					
					
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			for( int i=0;i<LB_Typelist.Length;i++)
			{
				GetReq.AddGetData(Title_id,
					UserIds[0],
					LB_Typelist[i],5,
					SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
			}

			GetResp = GetReq.Execute();
			if(GetResp!=null && GetResp.xResult ==0)
			{
				for( int i=0;i<GetResp.RespDataLen;i++)
				{
					if(GetResp.RespData[i].Resphead.userPuid == UserIds[0])
					{
						XRLAttList  tempList = GetResp.RespData[i].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr!=null)
								{
									System.Console.WriteLine("Content was not banned");
									return false;
								}
								break;
							}
								
						}

					}

				}
			}
			return true;

		}


	}

	public class SFDBanAttMUMLB:SFDBanAttMRefSLB 
	{
		public SFDBanAttMUMLB(uint titleid, uint[] lbtypelist)
			:base(titleid,lbtypelist)
		{			
			usercount = 2;
		}

		override protected bool VerifyResponse()
		{
			if(XResult.Failed(response.xResult))
				return false;

			// try a get request
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;
			Thread.Sleep(100);
			GetReq= new XRLGetRequest((uint)(LB_Typelist.Length*UserIds.Length));
					
					
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			for( int i=0;i<UserIds.Length;i++)
			{
				for( int j=0;j<LB_Typelist.Length;j++)
				{
					GetReq.AddGetData(Title_id,
						UserIds[i],
						LB_Typelist[j],5,
						SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
				}
			}

			GetResp = GetReq.Execute();
			if(GetResp!=null && GetResp.xResult ==0)
			{
				for( int i=0;i<GetResp.RespDataLen;i++)
				{
					XRLAttList  tempList = GetResp.RespData[i].AttList;
					for(int index =0; index < tempList.SubAttrSize;index++)
					{
						if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
						{
							XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);
							if(tempStr!=null)
							{
								System.Console.WriteLine("Content was not banned");
								return false;
							}
							break;
						}
					}
				}
			}
			return true;

		}


	}
	
	public class SFDBanAttSingleRef : TestBase
	{
		XRLRemoveAtt Request;
		XRLResponse response;
		uint Title_id;
		uint[] LB_Typelist;
		ulong UserId;
		string AttName;
		public SFDBanAttSingleRef(uint titleid, uint lbtype)
		{
			Title_id= 	titleid;
			LB_Typelist = new uint[1];
			LB_Typelist[0] = lbtype;
		}
		public SFDBanAttSingleRef(uint titleid, uint[] lbtypelist)
		{
			Title_id= 	titleid;
			LB_Typelist = lbtypelist;
			
		}
		protected bool PrepareForTest()
		{
			SFDCommitAtt1UMLB test = new SFDCommitAtt1UMLB(Title_id,LB_Typelist);
			if(test.run())
			{
				UserId = test.user;
				AttName =Encoding.UTF8.GetString( test.response.Token.PathName);
				return true;
			}
			return false;
		}
		protected bool  BuildRequest()
		{
			if(PrepareForTest())
			{
				//
				Request= new XRLRemoveAtt(AttName);
				return true;
			}
							
			return false;

		}
		protected bool VerifyResponse()
		{
			if(XResult.Failed(response.xResult))
				return false;

			// try a get request
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;
	
			Thread.Sleep(100);
			GetReq= new XRLGetRequest(1);
					
					
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			GetReq.AddGetData(Title_id,
				UserId,
				LB_Typelist[0],5,
				SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);

			GetResp = GetReq.Execute();
			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==1)
				{
					if(GetResp.RespData[0].Resphead.userPuid == UserId)
					{
						XRLAttList  tempList = GetResp.RespData[0].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr!=null)
								{
									System.Console.WriteLine("Content was not banned");
									return false;
								}
							}
								
						}

					}

				}
			}
			return true;

		}

		override protected void Execute()
		{
				
			if(BuildRequest())
			{
				// execute and get response
				response = Request.Execute();
				if(VerifyResponse())
				{
					ResultCode=TEST_RESULTS.PASSED;
				}
				else
				{
					ResultCode=TEST_RESULTS.FAILED;
				}

			}
		}



	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2EnumLeaderBoard.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	class V2EnumLeaderBoard : TestNode
	{
		public V2EnumLeaderBoard(string Name)
		{
            AddChild(new SFDEnumAttSingle(201,20));
            AddChild(new SFDEnumLBWithNoATT(201,11));
            AddChild(new SFDEnumAttMultiple(201,20));
            AddChild(new SFDEnumAttALLMultiple(201,20));
            AddChild(new SFDCmt_UnCmtEnumAtt(201,20));
            AddChild(new SFDUnCmt_NoAttEnum(201,20));
            AddChild(new SFDCMT_UnCmt_NoAttEnum(201,20));
		}
	}

	class SFDCMT_UnCmt_NoAttEnum :SFDCmt_UnCmtEnumAtt
	{
		public SFDCMT_UnCmt_NoAttEnum(uint titleid, uint lbtype):base(titleid,lbtype)
		{}

		protected override bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
			//Thread.Sleep(300);
			SFDMixedCmt_UnCmt1U1LBMR test = new SFDMixedCmt_UnCmt1U1LBMR(Title_id,LB_Type,3,2,5);
			if(test.run())
			{
				NumReq = test.NumReq;
				UserId = test.m_user;

				AttName = new string[NumReq];
				for(int i=0 ;i<NumReq;i++)
				{
					if(test.responselist[i].Token!=null)
						AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
				}
				return true;
				//}
				
			}
			
			return false;

		}


	}

	class SFDUnCmt_NoAttEnum :SFDCmt_UnCmtEnumAtt
	{
		public SFDUnCmt_NoAttEnum(uint titleid, uint lbtype):base(titleid,lbtype)
		{}

		protected override bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
			//Thread.Sleep(300);
			SFDMixedCmt_UnCmt1U1LBMR test = new SFDMixedCmt_UnCmt1U1LBMR(Title_id,LB_Type,0,5,5);
			if(test.run())
			{
				NumReq = test.NumReq;
				UserId = test.m_user;

				AttName = new string[NumReq];
				for(int i=0 ;i<NumReq;i++)
				{
					if(test.responselist[i].Token!=null)
						AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
				}
				return true;
				//}
				
			}
			
			return false;

		}


	}

	class SFDCmt_UnCmtEnumAtt:SFDEnumAttMultiple
	{
		public SFDCmt_UnCmtEnumAtt(uint titleid, uint lbtype):base(titleid,lbtype)
		{}
			
		protected override bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
			//Thread.Sleep(300);
			SFDMixedCmt_UnCmt1U1LBMR test = new SFDMixedCmt_UnCmt1U1LBMR(Title_id,LB_Type,3,2,0);
			if(test.run())
			{
				NumReq = test.NumReq;
				UserId = test.m_user;

				AttName = new string[NumReq];
				for(int i=0 ;i<NumReq;i++)
				{
					if(test.responselist[i].Token!=null)
						AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
				}
				return true;
				//}
				
			}
			
			return false;

		}


		protected override bool VerifyResponse()
		{
			if(response.xResult ==0)
			{
				EnumLBUserdata[] lbdata = response.RepUserLB;
				for(int i=0;i<lbdata.Length;i++)
				{
					bool found= false;
					for(int j=0;j<NumReq && found == false ;j++)
					{
						if(lbdata[i].Userdata.UserID == UserId[j].user)
						{
							XRLAttList  tempList = lbdata[i].AttList;
							
							for(int index =0; index < tempList.SubAttrSize ;index++)
							{
								if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
								{
									//string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
									if(tempList.SubAttr[index].Data!=null && AttName[j]!=null)
									{
										XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);
										if(AttName[j] !=  tempStr.Data)
										{
											Console.WriteLine("PathName does Not Match :");
											Console.WriteLine("path commited :- "+AttName);
											Console.WriteLine("Path Returened by EnumLB :- "+tempStr.Data);
											return false;
										}
										if(i> TOP)
										{
											System.Console.WriteLine("%d Has an att even though he is not in top %d",(i-1),TOP);
										}
										found= true;
										break;
									}
									else
									{
										if(i< TOP)
										{
											if(UserId[j].AttStatus == UserState.UnCommitedAtt)
											{
												found= true;
												break;
											}
											else
												System.Console.WriteLine("%d Does not have att",(i-1));
											

										}
										if(tempList.SubAttr[index].Data==null)
										{
											found= true;
											break;
										}
										else
											return false;

									}

									
										
									//compare path
								}
									
							}

						}
					}
				}
			}
			return true;
		}


	}

	class SFDEnumAttALLMultiple:SFDEnumAttMultiple
	{
		public SFDEnumAttALLMultiple(uint titleid, uint lbtype):base(titleid,lbtype)
		{
			

		}
			
		protected override bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
			//Thread.Sleep(300);
			SFDCommitAllAtt1U1LBMR test = new SFDCommitAllAtt1U1LBMR(Title_id,LB_Type);
			if(test.run())
			{
				NumReq = test.NumReq;
				UserId = test.m_user;

				AttName = new string[NumReq];
				for(int i=0 ;i<NumReq;i++)
				{
					if(test.responselist[i].Token!=null)
						AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
				}
				return true;
				//}
				
			}
			
			return false;

		}


		protected override bool VerifyResponse()
		{
			if(response.xResult ==0)
			{
				EnumLBUserdata[] lbdata = response.RepUserLB;
				for(int i=0;i<lbdata.Length;i++)
				{
					bool found= false;
					for(int j=0;j<NumReq && found == false ;j++)
					{
						if(lbdata[i].Userdata.UserID == UserId[j].user)
						{
							XRLAttList  tempList = lbdata[i].AttList;
							
							for(int index =0; index < tempList.SubAttrSize ;index++)
							{
								if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
								{
									//string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
									if(tempList.SubAttr[index].Data!=null && AttName[j]!=null)
									{
										XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);
										if(AttName[j] !=  tempStr.Data)
										{
											Console.WriteLine("PathName does Not Match :");
											Console.WriteLine("path commited :- "+AttName);
											Console.WriteLine("Path Returened by EnumLB :- "+tempStr.Data);
											return false;
										}
										if(i> TOP)
										{
											System.Console.WriteLine("%d Has an att even though he is not in top %d",(i-1),TOP);
										}
										found= true;
										break;
									}
									else
									{
										if(i< TOP)
										{
											System.Console.WriteLine("%d Does not have att",(i-1));
										}
										if(tempList.SubAttr[index].Data==null)
											break;
										else
											return false;

									}

									
										
									//compare path
								}
									
							}

						}
					}
				}
			}
			return true;
		}

	}

	class SFDEnumLBWithNoATT:SFDEnumAttMultiple
	{
		public SFDEnumLBWithNoATT(uint titleid, uint lbtype)
			:base(titleid,lbtype)
		{
			TOP =0;
		}

		protected override bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
			//Thread.Sleep(300);
			SFDCommitAtt1U1LBMR test = new SFDCommitAtt1U1LBMR(Title_id,LB_Type,0);
			if(test.run())
			{
				NumReq = test.NumReq;
				UserId = test.m_user;

				AttName = new string[NumReq];
				for(int i=0 ;i<NumReq;i++)
				{
					if(test.responselist[i].Token!=null)
						AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
				}
				return true;
				//}
				
			}
			
			return false;

		}


	}

	class SFDEnumAttMultiple : TestBase
	{
		protected XRLEnumLBRequest LBRequest;
		protected XRLEnumLBResponse response;
		protected int NumReq;
		protected uint Title_id;
		protected uint LB_Type;
		protected UserRatingMap[] UserId;
		protected string[] AttName;
		protected uint TOP=5;
	

		public SFDEnumAttMultiple(uint titleid, uint lbtype)
		{
			Title_id= 	titleid;
			LB_Type = lbtype;
			

		}

		protected virtual bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
				//Thread.Sleep(300);
				SFDCommitAtt1U1LBMR test = new SFDCommitAtt1U1LBMR(Title_id,LB_Type);
				if(test.run())
				{
					NumReq = test.NumReq;
					UserId = test.m_user;

					AttName = new string[NumReq];
					for(int i=0 ;i<NumReq;i++)
					{
						if(test.responselist[i].Token!=null)
							AttName[i] =Encoding.UTF8.GetString( test.responselist[i].Token.PathName);
					}
					return true;
				//}
				
			}
			
			return false;

		}

		protected bool  BuildRequest()
		{
			/*LBRequest = new XRLEnumLBRequest(StatsStressSupport.GetRandomTitleIdFromList(),
												StatsStressSupport.GetRandomLBTypeFromList(),
												StatsStressSupport.GenerateRandomPUID(),
												(byte)1,13,2,SpecialAttribMask.Null);
												*/
			if(PrepareForTest())
			{
				LBRequest = new XRLEnumLBRequest(Title_id,
					LB_Type,
					UserId[(NumReq/2)].user,
					(byte)1,13,2,SpecialAttribMask.AttachmentPathName);
				return true;
			}
						
			return false;

		}

		protected virtual bool VerifyResponse()
		{
			if(response.xResult ==0)
			{
				EnumLBUserdata[] lbdata = response.RepUserLB;
				for(int i=0;i<lbdata.Length;i++)
				{
					bool found= false;
					for(int j=0;j<NumReq && found == false ;j++)
					{
						if(lbdata[i].Userdata.UserID == UserId[j].user)
						{
							XRLAttList  tempList = lbdata[i].AttList;
							
							for(int index =0; index < tempList.SubAttrSize ;index++)
							{
								if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
								{
									//string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
									if(tempList.SubAttr[index].Data!=null && AttName[j]!=null)
									{
										XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);
										if(AttName[j] !=  tempStr.Data)
										{
											Console.WriteLine("PathName does Not Match :");
											Console.WriteLine("path commited :- "+AttName);
											Console.WriteLine("Path Returened by EnumLB :- "+tempStr.Data);
											return false;
										}
										if(i> TOP)
										{
											System.Console.WriteLine("%d Has an att even though he is not in top %d",(i-1),TOP);
										}
										found= true;
										break;
									}
									else
									{
										if(i< TOP)
										{
											System.Console.WriteLine("%d Does not have att",(i-1));
										}
										if(tempList.SubAttr[index].Data==null && AttName[j]==null)
											break;
										else
											return false;

									}

									
										
									//compare path
								}
									
							}

						}
					}
				}
			}
			return true;
		}

		override protected void Execute()
		{
			
			if(BuildRequest())
			{
				// execute and get response
				response = LBRequest.Execute();
				if(response!=null && VerifyResponse())
				{
					ResultCode=TEST_RESULTS.PASSED;
				}
				else
				{
					ResultCode=TEST_RESULTS.FAILED;
				}

			}
			else
				ResultCode=TEST_RESULTS.FAILED;
		}
	}

	class SFDEnumAttSingle : TestBase
	{
		XRLEnumLBRequest LBRequest;
		XRLEnumLBResponse response;
		uint Title_id;
		uint LB_Type;
		ulong UserId;
		string AttName;

		public SFDEnumAttSingle(uint titleid, uint lbtype)
		{
			Title_id= 	titleid;
			LB_Type = lbtype;
			

		}
		protected bool PrepareForTest()
		{
			// Reset the LB to use;
			//if(CHelper.ResetTile(Title_id)==true)
			//{
				//Thread.Sleep(100);
				SFDCommitAtt1U1LB test = new SFDCommitAtt1U1LB(Title_id,LB_Type);
				if(test.run())
				{
					UserId = test.m_user;
					AttName =Encoding.UTF8.GetString( test.response.Token.PathName);
					return true;
				}
				
			//}
			
			return false;

		}

		protected bool  BuildRequest()
		{
			/*LBRequest = new XRLEnumLBRequest(StatsStressSupport.GetRandomTitleIdFromList(),
												StatsStressSupport.GetRandomLBTypeFromList(),
												StatsStressSupport.GenerateRandomPUID(),
												(byte)1,13,2,SpecialAttribMask.Null);
												*/
			if(PrepareForTest())
			{
				LBRequest = new XRLEnumLBRequest(Title_id,
					LB_Type,
					UserId,
					(byte)1,13,2,SpecialAttribMask.AttachmentPathName);
				return true;
			}
						
			return false;

		}

		protected bool VerifyResponse()
		{
			if(response.xResult ==0)
			{
				EnumLBUserdata[] lbdata = response.RepUserLB;
				for(int i=0;i<lbdata.Length;i++)
				{
					if(lbdata[i].Userdata.UserID == UserId)
					{
						XRLAttList  tempList = lbdata[i].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								//string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(AttName ==  tempStr.Data)
								{
									return true;
								}

								Console.WriteLine("PathName does Not Match :");
								Console.WriteLine("path commited :- "+AttName);
								Console.WriteLine("Path Returened by EnumLB :- "+tempStr.Data);
									
								//compare path
							}
								
						}

					}
				}
			}
			return false;
		}

		override protected void Execute()
		{
			
			if(BuildRequest())
			{
				// execute and get response
				response = LBRequest.Execute();
				if(VerifyResponse())
				{
					ResultCode=TEST_RESULTS.PASSED;
				}
				else
				{
					ResultCode=TEST_RESULTS.FAILED;
				}

			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2GetUserData.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;

namespace StatsFD
{
	public class V2GetUserData : TestNode
	{
		public V2GetUserData(string Name)
		{
			AddChild(new TestCase1());
		}

		public class TestCase1 : TestBase
		{
			XRLGetRequest GetReq;
			XRLGetResponse response;

			public TestCase1()
			{ }

			protected bool  BuildRequest()
			{
				GetReq= new XRLGetRequest(10);
				
				uint titleid = 10;
				GetReq.AddGetData(titleid,
					StatsStressSupport.GenerateRandomPUID (),
					10,10,
					SpecialAttribMask.Rating | SpecialAttribMask.Rank);

				GetReq.AddGetData(titleid,
					StatsStressSupport.GenerateRandomPUID (),
					10,10,
					SpecialAttribMask.Rating | SpecialAttribMask.Rank);

				for(int i=0;i<8;i++)
				{
					GetReq.AddGetData(titleid,
						(ulong)(100+i),
						10,10,
						SpecialAttribMask.Rating | SpecialAttribMask.Rank);
				}

				return true;
			}

			protected bool VerifyResponse()
			{
				if(response == null)
				{
					return false;
				}
				
				if(response.RespDataLen != GetReq.ReqDataLen)
				{
					return false;
				}
				
				return true;
			}

			override protected void Execute()
			{
				if(BuildRequest())
				{
					// execute and get response
					response = GetReq.Execute();
					if(VerifyResponse())
					{
						ResultCode=TEST_RESULTS.PASSED;
					}
					else
					{
						ResultCode=TEST_RESULTS.FAILED;
					}

				}
			}
		}
	}	
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2ResetUser.cs ===
using System;
using System.Text;
using ServerTestFramework;
using System.Threading;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;

namespace StatsFD
{
	public class V2ResetUser: TestNode
	{
		public V2ResetUser(string Name)
		{
            AddChild(new UserWithAtt(201,20));
            AddChild(new UserOnAllLBs(201,20));
		}

		public class UserOnAllLBs : TestBase
		{
			XRLResetUser ResetReq;
			SFDCommitAtt1U1LB test;
			uint Title_id;
			uint LB_Type;
			ulong UserId;
			string AttName;

			public UserOnAllLBs(uint titleid, uint lbtype)
			{
				Title_id= 	titleid;
				LB_Type = lbtype;
					
			}

			protected bool  BuildRequest()
			{
				// create a user with attachment.
				test = new SFDCommitAtt1U1LB(Title_id,LB_Type);
				if(!test.run())
				{
					return false;
				}
				UserId = test.m_user;
				AttName =Encoding.UTF8.GetString( test.response.Token.PathName);
				
				ResetReq = new XRLResetUser(Title_id,UserId,0);
				return true;
			}
			protected bool VerifyResponse()
			{
				if(!test.VerifyResponse())
				{
					return true;
				}
				
				return false;
			}

			override protected void Execute()
			{
				if(BuildRequest())
				{
					XRLResponse response;
					// execute and get response
					response = ResetReq.Execute();
					if(HResult.Succeeded(response.xResult) && VerifyResponse())
					{
						ResultCode=TEST_RESULTS.PASSED;
					}
					else
					{
						ResultCode=TEST_RESULTS.FAILED;
					}

				}
			}
		}

		public class UserWithAtt : TestBase
		{
			XRLResetUser ResetReq;
			SFDCommitAtt1U1LB test;
			uint Title_id;
			uint LB_Type;
			ulong UserId;
			string AttName;

			public UserWithAtt(uint titleid, uint lbtype)
			{
				Title_id= 	titleid;
				LB_Type = lbtype;
					
			}

			protected bool  BuildRequest()
			{
				// create a user with attachment.
				test = new SFDCommitAtt1U1LB(Title_id,LB_Type);
				if(!test.run())
				{
					return false;
				}
				UserId = test.m_user;
				AttName =Encoding.UTF8.GetString( test.response.Token.PathName);
				
				ResetReq = new XRLResetUser(Title_id,UserId,LB_Type);
				return true;
			}
			protected bool VerifyResponse()
			{
				if(!test.VerifyResponse())
				{
					return true;
				}
				
				return false;
			}

			override protected void Execute()
			{
				if(BuildRequest())
				{
					XRLResponse response;
					// execute and get response
					response = ResetReq.Execute();
					if(VerifyResponse())
					{
						ResultCode=TEST_RESULTS.PASSED;
					}
					else
					{
						ResultCode=TEST_RESULTS.FAILED;
					}

				}
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V1AddTestCases.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	class V1AddTestCases:TestNode
	{
		public V1AddTestCases(string Name)
		{
            AddChild(new SFDSetGetMaxReq(201));
            AddChild(new SFDEnumwithDup(201,10));

            AddChild(new SFDSetMultWithSameRating(201,10));

            AddChild(new SFDAdd4UTwiceWithDiffRbut1(201,10));
            AddChild(new SFDAdd4UTwiceWithDiffRbut2(201,10));

            AddChild(new SFDMultReqWithSameUsrLBCOmbination(201,10));

			//enumerate Nickname bug.
            AddChild(new SFDEnumUSersWNickName(201));
			// read same stats in a single request bug ID 34459
            AddChild(new SFDGetSameStats(201));

			//Stats Set null attribute for  non existing user bug 

            AddChild(new SFDSetNullAttrib(201));
		}
	}

	class SFDSetNullAttrib : TestBase
	{
		XRLSetRequest SetReq;
		public XRLSetResponse response;
		protected uint Title_id;
		public uint LBType;
		public ulong m_users1;
		

		public SFDSetNullAttrib(uint titleid)
		{
			Title_id= 	titleid;
			LBType = 10;
			m_users1=StatsStressSupport.GenerateRandomPUID ();
	
		}


		protected bool  BuildSetRequest(ulong user)
		{			
			SetReq = new XRLSetRequest(Title_id,(uint)1);

			return SetReq.AddSetData(LBType,user,3, SpecialAttribMask.Rating,(ulong)1000,1);
			
			
			
		}

		protected bool  BuildRequest()
		{
						
			if(DBHelper.ResetTile(Title_id)==true)
			{
				Thread.Sleep(300);
				BuildSetRequest(m_users1);
				
				return true;
			}
			return false;

		}
		
		protected bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(1);

			GetReq.AddGetData(Title_id,
				m_users1,
				LBType,3,SpecialAttribMask.Rating);
					
			
			// make a request and  get a response
			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==1)
				{
					
					return true;
				}
				
			}
			return false;
		}

				
		override protected void Execute()
		{
			
			if(BuildRequest())
			{
				
				response=SetReq.Execute();
				if(XResult.Failed(response.xResult))
				{
					System.Console.WriteLine("Failed to set Data of Max size");
					ResultCode=TEST_RESULTS.FAILED;
					
				}
				else
				{
					if(VerifyResponse())
						ResultCode=TEST_RESULTS.PASSED;
					else
						ResultCode=TEST_RESULTS.FAILED;
				}
				
			}
			

		}
	}

	class SFDEnumUSersWNickName : TestBase
	{
		XRLSetRequest[] SetReq;
		public XRLSetResponse[] response;
		protected uint Title_id;
		public uint LBType;
		public ulong[] m_users1;
		public ulong[] m_users2;
		

		public SFDEnumUSersWNickName(uint titleid)
		{
			Title_id= 	titleid;
			LBType = 10;
			m_users1 = new ulong[4];
			m_users2 = new ulong[4];
			
			for(int i=0;i<4;i++)
			{
				m_users1[i]=StatsStressSupport.GenerateRandomPUID ();
				m_users2[i]=StatsStressSupport.GenerateRandomPUID ();
				
			}
					

		}


		protected bool  BuildSetRequest(ulong[] users,int  Indexreq, int startRating,bool AddNickName)
		{
			
			int recCount = users.Length ;
			SetReq [Indexreq] = new XRLSetRequest(Title_id,(uint)recCount);

			for (int index=0; index< users.Length ;index++)
			{
				if(AddNickName)
					SetReq[Indexreq].AddSetData(LBType,users[index],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)startRating);
				else
					SetReq[Indexreq].AddSetData(LBType,users[index],5,SpecialAttribMask.Rating,(ulong)startRating);

				
				startRating =startRating+100;
			}
			return true;
		}

		protected bool  BuildRequest()
		{
			int startRating=100;
			SetReq= new XRLSetRequest[2];
			if(DBHelper.ResetTile(Title_id)==true)
			{
				Thread.Sleep(300);
				BuildSetRequest(m_users1,0,startRating,true);
				BuildSetRequest(m_users2,1,startRating,false);
				
				return true;
			}
			return false;

		}

		
		protected bool VerifyResponse()
		{
			XRLEnumLBRequest req = new XRLEnumLBRequest(Title_id,10,1,0,20,2,SpecialAttribMask.Nickname);
			XRLEnumLBResponse response = req.Execute();

			if(response.RepUserLBLen !=8)
				return false;
					
			return true;
			
		}

		override protected void Execute()
		{
			bool verify= true;
			if(BuildRequest())
			{
				response = new XRLSetResponse [2];
				for (int idx=0;idx<SetReq.Length;idx++)
				{
					response[idx]=SetReq[idx].Execute();
					if(XResult.Failed(response[idx].xResult))
					{
						System.Console.WriteLine("Failed to set Data of Max size");
						ResultCode=TEST_RESULTS.FAILED;
						verify = false;
						
					}
				}
				if(verify && VerifyResponse())
					ResultCode=TEST_RESULTS.PASSED;
				else
					ResultCode=TEST_RESULTS.FAILED;
			}
			if(verify== false)
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	class SFDGetSameStats : TestBase
	{
		XRLSetRequest SetReq;
		public XRLSetResponse response;
		protected uint Title_id;
		public uint LBType;
		public ulong[] m_users1;
		

		public SFDGetSameStats(uint titleid)
		{
			Title_id= 	titleid;
			LBType = 10;
			m_users1 = new ulong[4];
			
			m_users1[0]=StatsStressSupport.GenerateRandomPUID ();
			m_users1[1]=StatsStressSupport.GenerateRandomPUID ();
			m_users1[2]=StatsStressSupport.GenerateRandomPUID ();
			m_users1[3]=StatsStressSupport.GenerateRandomPUID ();
					

		}


		protected bool  BuildSetRequest(ulong[] users,int startRating)
		{
			
			int recCount = users.Length;
			SetReq = new XRLSetRequest(Title_id,(uint)recCount);

			for (int index=0; index< users.Length ;index++)
			{
				SetReq.AddSetData(LBType,users[index],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)startRating);
				startRating =startRating+100;
			}
			return true;
		}

		protected bool  BuildRequest()
		{
			int startRating=100;
			
			if(DBHelper.ResetTile(Title_id)==true)
			{
				Thread.Sleep(300);
				BuildSetRequest(m_users1,startRating);
				
				return true;
			}
			return false;

		}

		protected void  FillGetRequest(ulong[] users,XRLGetRequest GetReq)
		{
			for (int index=0; index< users.Length ;index++)
			{
				GetReq.AddGetData(Title_id,
						users[index],
					LBType,new ushort[]{SpecialAttrib.Rating,SpecialAttrib.Rating});
			
				
			}

		}
		protected bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(4);
			FillGetRequest(m_users1,GetReq);
					
			
			// make a request and  get a response
			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==4)
				{
					return true;
				}
				
			}
			return false;
		}

		override protected void Execute()
		{
			bool verify= true;
			if(BuildRequest())
			{
				
				response=SetReq.Execute();
				if(XResult.Failed(response.xResult))
				{
					System.Console.WriteLine("Failed to set Data of Max size");
					ResultCode=TEST_RESULTS.FAILED;
					verify = false;
				}
				
				if(verify && VerifyResponse())
					ResultCode=TEST_RESULTS.PASSED;
				else
					ResultCode=TEST_RESULTS.FAILED;
			}
			if(verify== false)
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	class SFDMultReqWithSameUsrLBCOmbination :TestBase
	{
		uint Title_id;
		uint LB_Type;

		public SFDMultReqWithSameUsrLBCOmbination(uint title ,uint lbtype)
		{
			 Title_id=title;
			 LB_Type=lbtype;
		}
		protected bool  run()
		{
			ulong rating= 11111;
			ulong puid = 9876543323456;
			XRLSetRequest SetReq= new XRLSetRequest(Title_id,2);
			SetReq.AddSetData(LB_Type,puid,(uint)3, SpecialAttribMask.Rating,rating);
			SetReq.AddSetData(LB_Type,puid,(uint)3, SpecialAttribMask.Rating,rating);
			
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult !=XResult.S_OK)
			{
				System.Console.WriteLine("Set Data Failed in Thread1");
				return false;
			}
				//Thread.Sleep(10);
			return true;
		}
		override protected void Execute()
		{
			if(run())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}

	}

	class SFDSetMultWithSameRating : TestBase
	{
		int threadcount =10;
		uint Title_id;
		uint LB_Type;
		Thread[] ThreadList;
		public SFDSetMultWithSameRating(uint title, uint lbtype)
		{
			Title_id=title;
			LB_Type = lbtype;
			ThreadList= new Thread[threadcount];
		}
		public void  RequestGenerator()
		{
			UserRatingMap[] ulist;

			ulist = new UserRatingMap[10];

			ulong rating= 2000;
			for(int index=0; index<10;index++)
			{
				ulist[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating);
				rating =rating-100;
			}


			for(int i=0; i< 10 ;i++)
			{
				XRLSetRequest SetReq= new XRLSetRequest(Title_id,1);
				SetReq.AddSetData(LB_Type,ulist[i].user,(uint)3, SpecialAttribMask.Rating,ulist[i].rating);
				XRLSetResponse response = SetReq.Execute();
				if(response.xResult !=XResult.S_OK)
				{
					System.Console.WriteLine("Set Data Failed in Thread1");
				}
				//Thread.Sleep(10);
			}
			
			
		}
		
		protected bool  run()
		{
			
			if(PrepareRequest())
			{
				// call enumerate request.
				for(int idx=0;idx<threadcount;idx++)
				{
					ThreadList[idx] = new Thread(new ThreadStart(RequestGenerator));
				}
				
				for(int idy=0;idy<threadcount;idy++)
				{
					ThreadList[idy].Start();
				}
				
			}

			bool done = false;
			while (!done)
			{
				Thread.Sleep(200);
				for(int idz=0;idz<threadcount;idz++)
				{
					if(ThreadList[idz].ThreadState==ThreadState.Stopped)
					{
						done= true;
					}
					else
					{
						done= false;
						break;
					}
					
				}
			}
			
			return verify();
						
		}
		public virtual bool verify()
		{
			
			XRLEnumLBRequest LBRequest;
			XRLEnumLBResponse LBresponse;

			// change start index from 1 to 0 after bug 29182
			LBRequest = new XRLEnumLBRequest(Title_id,LB_Type,0,(byte)0,(uint)100,2,SpecialAttribMask.Null);
			LBresponse = LBRequest.Execute();

			if(LBresponse.RepUserLBLen !=(threadcount*10))
			{
				System.Console.WriteLine("No of Rec :"+LBresponse.RepUserLBLen);
				return false;
			}
			ulong rating = 2000;

			for(int i=0;i<LBresponse.RepUserLBLen;i++)
			{
				if(LBresponse.RepUserLB[i].Userdata.Rank!=i+1)
				{
					System.Console.WriteLine("Rank should be: "+(i+1)+"But is  "+LBresponse.RepUserLB[i].Userdata.Rank );
					return false;
				}
				
				//System.Console.WriteLine(ulist[i].m_gamertag);
			}


			for(int k=0;k<LBresponse.RepUserLBLen;k=k+threadcount)
			{
				for(int rat=0;rat<threadcount;rat++)
				{
					if(LBresponse.RepUserLB[k].Userdata.Rating!=rating)
					{
						System.Console.WriteLine("Rating should be: "+rating+"But is  "+LBresponse.RepUserLB[k].Userdata.Rating );
						return false;
					}
				}
				rating=rating-100;
				//System.Console.WriteLine(ulist[i].m_gamertag);
			}
			return true;
		}
		

		protected  virtual bool  PrepareRequest()
		{
			DBHelper.ResetTile(Title_id);
			Thread.Sleep(400);
			
			return true;
		}

		override protected void Execute()
		{
			if(run())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}

	}

	class SFDAdd4UTwiceWithDiffRbut1: TestBase
	{
		XRLEnumLBRequest LBRequest;
		XRLEnumLBResponse LBresponse;
		protected UserRatingMap[] ulist;
		uint Title_id;
		uint LB_Type;
		
		public SFDAdd4UTwiceWithDiffRbut1(uint title, uint lbtype)
		{
			Title_id=title;
			LB_Type = lbtype;
		}
		protected  virtual bool  PrepareRequest()
		{
			DBHelper.ResetTile(Title_id);
			Thread.Sleep(400);
			ulist = new UserRatingMap[4];

			ulong rating= 2000;
			for(int index=0; index<4;index++)
			{
				ulist[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating);
				rating =rating-100;
			}
			

			XRLSetRequest SetReq= new XRLSetRequest(Title_id,4);
			SetReq.AddSetData(LB_Type,ulist[0].user,(uint)3, SpecialAttribMask.Rating,ulist[0].rating);
			
			SetReq.AddSetData(LB_Type,ulist[1].user,(uint)3, SpecialAttribMask.Rating,ulist[1].rating);
			
			SetReq.AddSetData(LB_Type,ulist[2].user,(uint)3, SpecialAttribMask.Rating,ulist[2].rating);
			
			SetReq.AddSetData(LB_Type,ulist[3].user,(uint)3, SpecialAttribMask.Rating,ulist[3].rating);
			
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult ==XResult.S_OK)
			{
				for(int index=0; index<3;index++)
				{
					ulist[index].rating =ulist[index].rating+50;
				}
				XRLSetRequest SetReq2= new XRLSetRequest(Title_id,4);
				SetReq2.AddSetData(LB_Type,ulist[0].user,(uint)3, SpecialAttribMask.Rating,ulist[0].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[1].user,(uint)3, SpecialAttribMask.Rating,ulist[1].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[2].user,(uint)3, SpecialAttribMask.Rating,ulist[2].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[3].user,(uint)3, SpecialAttribMask.Rating,ulist[3].rating);
			
				XRLSetResponse response2 = SetReq2.Execute();
				if(response2.xResult ==XResult.S_OK)
				{
					LBRequest = new XRLEnumLBRequest(Title_id,
						LB_Type,
						0,
						(byte)0,10,2,SpecialAttribMask.Null);
					return true;
				}
			}
			
			return false;
		}


		protected bool  run()
		{
			
			if(PrepareRequest())
			{
				// call enumerate request.
				LBresponse = LBRequest.Execute();
			}
			
			return verify();
						
		}
		public virtual bool verify()
		{
			if(LBresponse.RepUserLBLen !=4)
			{
				//System.Console.WriteLine("No of Rec :"+LBresponse.RepUserLBLen);
				return false;
			}

			for(int i=0;i<LBresponse.RepUserLBLen;i++)
			{
				if(LBresponse.RepUserLB[i].Userdata.UserID != ulist[i].user)
				{
					//System.Console.WriteLine("returned :"+LBresponse.RepUserLB[i].Userdata.UserID);
					//System.Console.WriteLine("expected :"+ulist[i].m_puid);
					return false;
				}
				if(LBresponse.RepUserLB[i].Userdata.Rating != ulist[i].rating)
				{
					return false;
				}
				//System.Console.WriteLine(ulist[i].m_gamertag);
			}
			return true;
		}
		

		override protected void Execute()
		{
			if(run())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}
	}

	class SFDAdd4UTwiceWithDiffRbut2: TestBase
	{
		XRLEnumLBRequest LBRequest;
		XRLEnumLBResponse LBresponse;
		protected UserRatingMap[] ulist;
		uint Title_id;
		uint LB_Type;
		
		public SFDAdd4UTwiceWithDiffRbut2(uint title, uint lbtype)
		{
			Title_id=title;
			LB_Type = lbtype;
		}
		protected  virtual bool  PrepareRequest()
		{
			DBHelper.ResetTile(Title_id);
			Thread.Sleep(400);
			ulist = new UserRatingMap[4];

			ulong rating= 2000;
			for(int index=0; index<4;index++)
			{
				ulist[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating);
				rating =rating-100;
			}
			

			XRLSetRequest SetReq= new XRLSetRequest(Title_id,4);
			SetReq.AddSetData(LB_Type,ulist[0].user,(uint)3, SpecialAttribMask.Rating,ulist[0].rating);
			
			SetReq.AddSetData(LB_Type,ulist[1].user,(uint)3, SpecialAttribMask.Rating,ulist[1].rating);
			
			SetReq.AddSetData(LB_Type,ulist[2].user,(uint)3, SpecialAttribMask.Rating,ulist[2].rating);
			
			SetReq.AddSetData(LB_Type,ulist[3].user,(uint)3, SpecialAttribMask.Rating,ulist[3].rating);
			
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult ==XResult.S_OK)
			{
				ulist[0].rating =ulist[0].rating+50;
				ulist[2].rating =ulist[2].rating+50;
				
				XRLSetRequest SetReq2= new XRLSetRequest(Title_id,4);
				SetReq2.AddSetData(LB_Type,ulist[0].user,(uint)3, SpecialAttribMask.Rating,ulist[0].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[1].user,(uint)3, SpecialAttribMask.Rating,ulist[1].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[2].user,(uint)3, SpecialAttribMask.Rating,ulist[2].rating);
			
				SetReq2.AddSetData(LB_Type,ulist[3].user,(uint)3, SpecialAttribMask.Rating,ulist[3].rating);
			
				XRLSetResponse response2 = SetReq2.Execute();
				if(response2.xResult ==XResult.S_OK)
				{
					LBRequest = new XRLEnumLBRequest(Title_id,
						LB_Type,
						0,
						(byte)0,10,2,SpecialAttribMask.Null);
					return true;
				}
			}
			
			return false;
		}


		protected bool  run()
		{
			
			if(PrepareRequest())
			{
				// call enumerate request.
				LBresponse = LBRequest.Execute();
			}
			
			return verify();
						
		}
		public virtual bool verify()
		{
			if(LBresponse.RepUserLBLen !=4)
			{
				//System.Console.WriteLine("No of Rec :"+LBresponse.RepUserLBLen);
				return false;
			}

			for(int i=0;i<LBresponse.RepUserLBLen;i++)
			{
				if(LBresponse.RepUserLB[i].Userdata.UserID != ulist[i].user)
				{
					//System.Console.WriteLine("returned :"+LBresponse.RepUserLB[i].Userdata.UserID);
					//System.Console.WriteLine("expected :"+ulist[i].m_puid);
					return false;
				}
				if(LBresponse.RepUserLB[i].Userdata.Rating != ulist[i].rating)
				{
					return false;
				}
				//System.Console.WriteLine(ulist[i].m_gamertag);
			}
			return true;
		}
		

		override protected void Execute()
		{
			if(run())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}
	}

	class SFDEnumwithDup:TestBase
	{
		protected XboxUser[] ulist;
		XRLEnumLBRequest LBRequest;
		XRLEnumLBResponse LBresponse;
		uint Title_id;
		uint LB_Type;

		public SFDEnumwithDup(uint title, uint lbtype)
		{
			Title_id=title;
			LB_Type = lbtype;
		}


		protected  virtual bool  PrepareRequest()
		{
			DBHelper.ResetTile(Title_id);
			CV2Helper.InitStatProxy(Title_id,4);
			ulist = CV2Helper.gstatsSQL.GetUserList(6);
			uint expectedAttCount =2;
			XRLSetRequest SetReq= new XRLSetRequest(Title_id,4);
			SetReq.AddSetData(LB_Type,ulist[0].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)1000);
			
			SetReq.AddSetData(LB_Type,ulist[1].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)500);
			
			SetReq.AddSetData(LB_Type,ulist[3].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)250);
			
			SetReq.AddSetData(LB_Type,ulist[4].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)0);
			
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult ==XResult.S_OK)
			{
				XRLSetRequest SetReq2= new XRLSetRequest(Title_id,2);
				SetReq2.AddSetData(LB_Type,ulist[2].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)500);
				
				SetReq2.AddSetData(LB_Type,ulist[5].m_puid,(uint)(expectedAttCount+1), SpecialAttribMask.Rating,(ulong)0);
				
					
				XRLSetResponse response2 = SetReq2.Execute();
				if(response2.xResult ==XResult.S_OK)
				{
					LBRequest = new XRLEnumLBRequest(Title_id,
						LB_Type,
						0,
						(byte)0,10,2,SpecialAttribMask.Null);

					return true;
				}
			}
			
			return false;
		}
		public virtual bool verify()
		{
			if(LBresponse.RepUserLBLen !=6)
			{
				//System.Console.WriteLine("No of Rec :"+LBresponse.RepUserLBLen);
				return false;
			}

			for(int i=0;i<LBresponse.RepUserLBLen;i++)
			{
				if(LBresponse.RepUserLB[i].Userdata.UserID != ulist[i].m_puid)
				{
					//System.Console.WriteLine("returned :"+LBresponse.RepUserLB[i].Userdata.UserID);
					//System.Console.WriteLine("expected :"+ulist[i].m_puid);
					return false;
				}
				if(LBresponse.RepUserLB[i].Userdata.Rank != ulist[i].m_rank)
				{
					return false;
				}
				//System.Console.WriteLine(ulist[i].m_gamertag);
			}
			return true;
		}
		
		protected bool  run()
		{
			
			if(PrepareRequest())
			{
				// call enumerate request.
				LBresponse = LBRequest.Execute();
			}
			
			return verify();
						
		}

		override protected void Execute()
		{
			if(run())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}

	}

	class SFDSetGetMaxReq : TestBase
	{
		XRLSetRequest[] SetReq;
		public XRLSetResponse[] response;
        protected uint Title_id;
		public uint[] LBType;
		public ulong[] m_users1;
		public ulong[] m_users2;
		public ulong[] m_users3;
		public ulong[] m_users4;
		public ulong[] m_users5;
		public ulong[]  m_users6;

		public SFDSetGetMaxReq(uint titleid)
		{
			Title_id= 	titleid;
			LBType = new uint[]{10,11,12,13,14};
			m_users1 = new ulong[4];
			m_users2 = new ulong[4];
			m_users3 = new ulong[4];
			m_users4 = new ulong[4];
			m_users5 = new ulong[4];
			m_users6 = new ulong[1];
			for(int i=0;i<4;i++)
			{
				m_users1[i]=StatsStressSupport.GenerateRandomPUID ();
				m_users2[i]=StatsStressSupport.GenerateRandomPUID ();
				m_users3[i]=StatsStressSupport.GenerateRandomPUID ();
				m_users4[i]=StatsStressSupport.GenerateRandomPUID ();
				m_users5[i]=StatsStressSupport.GenerateRandomPUID ();
             }
			m_users6[0] =StatsStressSupport.GenerateRandomPUID ();
 
			

		}


		protected bool  BuildSetRequest(ulong[] users,int  Indexreq, int startRating)
		{
			
			int recCount = users.Length * LBType.Length;
			SetReq [Indexreq] = new XRLSetRequest(Title_id,(uint)recCount);

			for (int index=0; index< users.Length ;index++)
			{
				for (int j=0; j< LBType.Length ;j++)
				{
					SetReq[Indexreq].AddSetData(LBType[j],users[index],5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)startRating);
					
				}
				startRating =startRating+100;
			}
			return true;
		}

		protected bool  BuildRequest()
		{
			int startRating=100;
			SetReq= new XRLSetRequest[6];
			if(DBHelper.ResetTile(Title_id)==true)
			{
				Thread.Sleep(300);
				BuildSetRequest(m_users1,0,startRating);
				BuildSetRequest(m_users2,1,startRating);
				BuildSetRequest(m_users3,2,startRating);
				BuildSetRequest(m_users4,3,startRating);
				BuildSetRequest(m_users5,4,startRating);
				BuildSetRequest(m_users6,5,startRating);
				return true;
			}
			return false;

		}

		protected void  FillGetRequest(ulong[] users,XRLGetRequest GetReq)
		{
			for (int index=0; index< users.Length ;index++)
			{
				for (int j=0; j< LBType.Length ;j++)
				{
					GetReq.AddGetData(Title_id,
						users[index],
						LBType[j],5,
						SpecialAttribMask.Nickname | SpecialAttribMask.Rating);
			
				}
			}

		}
		protected bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(101);
			FillGetRequest(m_users1,GetReq);
			FillGetRequest(m_users2,GetReq);
			FillGetRequest(m_users3,GetReq);
			FillGetRequest(m_users4,GetReq);
			FillGetRequest(m_users5,GetReq);
			FillGetRequest(m_users6,GetReq);

			
			
			
			// make a request and  get a response
			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==101)
				{
					return true;
				}
				
			}
			return false;
		}

		override protected void Execute()
		{
			bool verify= true;
			if(BuildRequest())
			{
				response = new XRLSetResponse [6];
				for (int idx=0;idx<SetReq.Length;idx++)
				{
					response[idx]=SetReq[idx].Execute();
					if(XResult.Failed(response[idx].xResult))
					{
						System.Console.WriteLine("Failed to set Data of Max size");
						ResultCode=TEST_RESULTS.FAILED;
						verify = false;
						
					}
				}
				if(verify && VerifyResponse())
					ResultCode=TEST_RESULTS.PASSED;
				else
					ResultCode=TEST_RESULTS.FAILED;
			}
			if(verify== false)
				ResultCode=TEST_RESULTS.FAILED;

		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2TestBase.cs ===
using System;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;

namespace StatsFD
{
    public abstract class V2TestBase : LBTestBase
    {
        // No added functionality here.
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2SetUserData.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;

using System.Threading;

namespace StatsFD
{
    public class V2SetGet_CommitUserData : TestNode
    {
        public V2SetGet_CommitUserData(string Name)
        {
            AddChild(new SFDCommitAttSameRating(201, 20));
            AddChild(new SFDCommitAtt1U1LB(201, 20));
            AddChild(new SFDCommitAtt1U1LBMR(201, 20));
            AddChild(new SFDCommitAllAtt1U1LBMR(201, 20));
            AddChild(new SFDCommitAtt1UMLB(201, new uint[] { 20, 21, 22 }));
            AddChild(new SFDCommitAttMUMLB(201, 4, new uint[] { 20, 21, 22, 23, 24 }));  //,22,23,24
            AddChild(new SFDFewCommitAtt1UMLB(201, new uint[] { 20, 21, 11, 12 }));
            AddChild(new SFDFewCommitAttMUMLB(201, 4, new uint[] { 20, 21, 11, 12 })); //,10 or 22
        }
    }

    public class SFDCommitAllAtt1U1LBMR : V2TestBase
    {
        public uint m_titleid;
        public uint LBType;
        public UserRatingMap[] m_user;
        public int NumReq;
        int TopCount;

        //
        // HACK HACK HACK HACK ... There should NOT be inter-dependancies between test cases >.< HACK HACK HACK HACK
        // (see V2EnumLeaderBoard)
        //
        public XRLSetResponse[] responselist;

        public SFDCommitAllAtt1U1LBMR(uint title, uint lbtype)
        {
            m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
            LBType = lbtype;
            TopCount = 5;
            NumReq = 10;
            m_user = new UserRatingMap[NumReq];
            ulong rating = 100;

            for (int index = 0; index < NumReq; index++)
            {
                m_user[index] = new UserRatingMap(StatsStressSupport.GenerateRandomPUID(), rating);
                rating = rating + 100;
            }
        }

        //
        // HACK HACK HACK HACK ... There should NOT be inter-dependancies between test cases >.< HACK HACK HACK HACK
        // (see V2EnumLeaderBoard)
        //
        public bool run()
        {
            Execute();
            return true;
        }

        override protected void Execute()
        {
            List<XRLSetRequest> requests = BuildRequests();

            List<XRLSetResponse> responses = new List<XRLSetResponse>();

            int numAttachmentsCommitted = 0;
            for (int i = 0; i < requests.Count; i++)
            {
                XRLSetResponse resp = requests[i].Execute();
                VerifyXRLResponse("Stats Post", resp, XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT);

                responses.Add(resp);

                // commit the attachment.
                XRLCommitAttachment CommitReq = new XRLCommitAttachment(
                    m_titleid
                  , 50
                  , 50
                  , resp.Token.PathNameLen
                  , resp.Token.PathName
                  , resp.SetRefLen
                  , resp.SetRef
                );

                XRLResponse CommitResp = CommitReq.Execute();
                VerifyXRLResponse("Commit Attachment", CommitResp, XResult.S_OK);

                ++numAttachmentsCommitted;
            }

            if (numAttachmentsCommitted != requests.Count)
            {
                throw new TestCaseException("Only committed " + numAttachmentsCommitted + " attachments out of " + requests.Count);
            }

            VerifyResponses(responses);

            // HACK HACK HACK HACK (see: V2EnumLeaderBoard)
            responselist = responses.ToArray();

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected List<XRLSetRequest> BuildRequests()
        {
            List<XRLSetRequest> requests = new List<XRLSetRequest>();

            if (DBHelper.ResetTile(m_titleid) == true)
            {
                Thread.Sleep(300);

                for (int i = 0; i < NumReq; i++)
                {
                    XRLSetRequest req = new XRLSetRequest(m_titleid, 1);
                    req.AddSetData(LBType, m_user[i].user, 5, SpecialAttribMask.Nickname | SpecialAttribMask.Rating, m_user[i].rating);

                    requests.Add(req);
                }
            }

            return requests;
        }

        protected void VerifyResponses(List<XRLSetResponse> responses)
        {
            XRLGetRequest getReq = new XRLGetRequest((uint)NumReq);

            // The users array is in the order that data was posted (ascending rating)
            // We should retrieve data in the order it reflects on the leaderboard (descending rating)
            for (int i = responses.Count - 1; i >= 0; --i)
            {
                getReq.AddGetData(
                    m_titleid
                  , m_user[i].user
                  , LBType
                  , 5
                  , SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize
                );
            }

            XRLGetResponse getResp = getReq.Execute();
            VerifyXRLResponse("Get Request", getResp, XResult.S_OK);

            if (getResp.RespDataLen != responses.Count)
            {
                throw new TestCaseException(String.Format(
                    "XRLResponse.RespDataLen = {0} (expected {1})"
                  , getResp.RespDataLen
                  , responses.Count
                ));
            }

            //
            // Users in the Top N Leaderboard Entires
            // (attachment data should be returned)
            //
            int idxData;
            for (idxData = 0; idxData < TopCount && idxData < responses.Count; idxData++)
            {
                GetResponseData data = getResp.RespData[idxData];

                // The responses array is in the order of posting (ascending rating)
                // The data in the users array is in the order of posting (ascending rating)
                // The data array is in the order of the leaderboard data (desscending rating)
                // So, to have valid comparisons we have to keep all this in mind.
                int idxResponse = responses.Count - idxData - 1;

                ulong respPuid = data.Resphead.userPuid;
                ulong expectedPuid = m_user[idxResponse].user;

                if (respPuid != expectedPuid)
                {
                    throw new TestCaseException(String.Format(
                        "[{0}] puid = 0x{1:X16} (expected: 0x{2:X16})"
                      , idxData + 1
                      , respPuid
                      , expectedPuid
                    ));
                }

                bool found = false;
                foreach (XrlSubAttr attr in data.AttList.SubAttr)
                {
                    if (attr.Info.ID == SpecialAttrib.AttachmentSize)
                    {
                        if (attr.Data != null)
                        {
                            XrlAttrUInt xrlaAttachmentSize = (XrlAttrUInt)(attr.Data);

                            if (xrlaAttachmentSize.Data != 50)
                            {
                                throw new TestCaseException(String.Format(
                                    "[puid: {0:X16}] File Size = {0} (expected: {1})"
                                  , respPuid
                                  , xrlaAttachmentSize.Data
                                  , 50
                                ));
                            }
                        }
                    }
                    else if (attr.Info.ID == SpecialAttrib.AttachmentPathName)
                    {
                        if (responses[idxResponse].Token != null && attr.Data != null)
                        {
                            string pathName = Encoding.UTF8.GetString(responses[idxResponse].Token.PathName);
                            XrlAttrUTFString xrlaPathName = (XrlAttrUTFString)attr.Data;

                            if (pathName != xrlaPathName.Data)
                            {
                                throw new TestCaseException(String.Format(
                                    "Incorrect path: '{0}', expected: '{1}'"
                                  , pathName
                                  , xrlaPathName.Data
                                ));
                            }

                            found = true;
                            break;
                        }
                    }
                }

                if (!found)
                {
                    throw new TestCaseException(String.Format(
                        "[puid: 0x{0:X16}] Expected attachment not found"
                      , respPuid
                    ));
                }
            }

            //
            // Users not in the Top N Leaderboard Entires
            // (no attachment data should be returned)
            //
            for (/*idxData*/; idxData < responses.Count; idxData++)
            {
                GetResponseData data = getResp.RespData[idxData];

                // The data in the users array is in the order of posting (ascending rating)
                // The data array is in the order of the leaderboard data (desscending rating)
                // So, to have valid comparisons we have to keep all this in mind.

                ulong respPuid = data.Resphead.userPuid;
                ulong expectedPuid = m_user[responses.Count - idxData - 1].user;

                if (respPuid != expectedPuid)
                {
                    throw new TestCaseException(String.Format(
                        "[{0}] puid = 0x{1:X16} (expected: 0x{2:X16})"
                      , idxData
                      , respPuid
                      , expectedPuid
                    ));
                }

                foreach (XrlSubAttr attr in data.AttList.SubAttr)
                {
                    if (attr.Info.ID == SpecialAttrib.AttachmentPathName)
                    {
                        if (attr.Data != null)
                        {
                            throw new TestCaseException(String.Format(
                                "[puid: 0x{0:X16}] Found unexpected attachment"
                              , respPuid
                            ));
                        }

                        break;
                    }
                }
            }
        }
    }

    public class SFDCommitAtt1U1LBMR : V2TestBase
    {
        XRLSetRequest[] SetReqlist;
        public XRLSetResponse[] responselist;
        public uint m_titleid;
        public uint LBType;
        public UserRatingMap[] m_user;
        public int NumReq;
        int TopCount;

        public SFDCommitAtt1U1LBMR(uint title, uint lbtype, int top)
        {
            m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
            LBType = lbtype;
            TopCount = top;
            NumReq = 10;
            m_user = new UserRatingMap[NumReq];
            ulong rating = 2000;

            for (int index = 0; index < NumReq; index++)
            {
                m_user[index] = new UserRatingMap(StatsStressSupport.GenerateRandomPUID(), rating);
                rating = rating - 100;
            }

            SetReqlist = new XRLSetRequest[NumReq];
            responselist = new XRLSetResponse[NumReq];
        }

        public SFDCommitAtt1U1LBMR(uint title, uint lbtype)
        {
            m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
            LBType = lbtype;
            TopCount = 5;
            NumReq = 10;
            m_user = new UserRatingMap[NumReq];
            ulong rating = 2000;

            for (int index = 0; index < NumReq; index++)
            {
                m_user[index] = new UserRatingMap(StatsStressSupport.GenerateRandomPUID(), rating);
                rating = rating - 100;
            }

            SetReqlist = new XRLSetRequest[NumReq];
            responselist = new XRLSetResponse[NumReq];
        }

        override protected void Execute()
        {
            if (run())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;
        }

        protected bool BuildRequest()
        {
            if (DBHelper.ResetTile(m_titleid) == true)
            {
                Thread.Sleep(300);

                for (int i = 0; i < NumReq; i++)
                {
                    SetReqlist[i] = new XRLSetRequest(m_titleid, 1);
                    SetReqlist[i].AddSetData(LBType, m_user[i].user, 5, SpecialAttribMask.Nickname | SpecialAttribMask.Rating, m_user[i].rating);
                }

                return true;
            }

            return false;
        }

        public bool run()
        {
            bool retval = false;
            int commitcount = 0, UncommitCount = 0;

            if (BuildRequest())
            {
                for (int i = 0; i < NumReq; i++)
                {
                    responselist[i] = SetReqlist[i].Execute();
                    if (i < TopCount && responselist[i].xResult != XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                    {
                        System.Console.WriteLine("Error the top 5 did not get a chance to upload");
                        return false;
                    }

                    if (responselist[i] != null && responselist[i].xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                    {
                        // commit the attachment.
                        XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid, 50, 50, responselist[i].Token.PathNameLen, responselist[i].Token.PathName, responselist[i].SetRefLen, responselist[i].SetRef);
                        XRLResponse CommitResp = CommitReq.Execute();

                        if (CommitResp != null && CommitResp.xResult == 0)
                        {
                            commitcount++;
                        }
                    }
                    else
                        UncommitCount++;
                }

                if (commitcount == TopCount)
                {
                    if (VerifyResponse())
                        retval = true;
                }
                else
                {
                    System.Console.WriteLine("Commited :#" + commitcount.ToString() + "For LB TOP:" + TopCount.ToString());
                    retval = false;
                }
            }

            return retval;
        }

        protected bool VerifyResponse()
        {
            bool retval = false;
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest((uint)NumReq);

            for (int i = 0; i < NumReq; i++)
            {
                GetReq.AddGetData(m_titleid,
                    m_user[i].user,
                    LBType, 5,
                    SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
            }

            GetResp = GetReq.Execute();

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == NumReq)
                {
                    for (int i = 0; i < NumReq; i++)
                    {
                        if (GetResp.RespData[i].Resphead.userPuid == m_user[i].user)
                        {
                            retval = true;
                            XRLAttList tempList = GetResp.RespData[i].AttList;

                            int index = 0;
                            for (; index < tempList.SubAttrSize; index++)
                            {
                                if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                                {
                                    string pathnme;
                                    XrlAttrUTFString tempStr;

                                    if (responselist[i].Token != null && tempList.SubAttr[index].Data != null)
                                    {
                                        pathnme = Encoding.UTF8.GetString(responselist[i].Token.PathName);
                                        tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);
                                    }
                                    else
                                    {
                                        if (responselist[i].Token == null && tempList.SubAttr[index].Data == null)
                                            break;

                                        return false;
                                    }

                                    if (pathnme != tempStr.Data)
                                    {
                                        Console.WriteLine("PathName does Not Match :");
                                        Console.WriteLine("path commited :- " + pathnme);
                                        Console.WriteLine("Path Returened by Get :- " + tempStr.Data);
                                        return false;
                                    }
                                    else
                                        break;

                                    //compare path
                                }
                            }

                            if (index >= tempList.SubAttrSize)
                            {
                                System.Console.WriteLine("Did not Find an Attachment");
                                return false;
                            }
                        }
                    }
                }
            }

            return retval;
        }
    }

    public class SFDCommitAttMUMLB : V2TestBase
    {
        XRLSetRequest SetReq;
        public XRLSetResponse response;
        public uint m_titleid;
        public uint[] LBTypes;
        public ulong[] users;

        public SFDCommitAttMUMLB(uint titleid, uint usercount, uint[] lbtypes)
        {
            m_titleid = titleid;
            LBTypes = lbtypes;
            users = new ulong[usercount];

            for (int i = 0; i < usercount; i++)
                users[i] = StatsStressSupport.GenerateRandomPUID();

        }


        protected virtual bool BuildRequest()
        {
            if (DBHelper.ResetTile(m_titleid) == true)
            {
                Thread.Sleep(300);
                uint RecCount = (uint)(LBTypes.Length * users.Length);
                SetReq = new XRLSetRequest(m_titleid, RecCount);

                for (int Uidx = 0; Uidx < users.Length; Uidx++)
                {
                    for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
                        SetReq.AddSetData(LBTypes[LBidx], users[Uidx], 5, SpecialAttribMask.Nickname | SpecialAttribMask.Rating, (ulong)(500 + Uidx));
                }

                return true;
            }
            return false;
        }


        override protected void Execute()
        {
            if (run())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;
        }

        public bool run()
        {
            bool retval = false;

            if (BuildRequest())
            {	// execute and get response
                response = SetReq.Execute();
                if (response != null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                {
                    // commit the attachment.
                    XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid, 50, 50, response.Token.PathNameLen, response.Token.PathName, response.SetRefLen, response.SetRef);
                    XRLResponse CommitResp = CommitReq.Execute();
                    if (CommitResp != null && CommitResp.xResult == 0)
                    {
                        if (VerifyResponse())
                            retval = true;
                    }
                }
            }

            return retval;
        }

        protected virtual bool VerifyResponse()
        {
            bool retval = false;
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest((uint)(LBTypes.Length * users.Length));

            //uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
            for (int Uidx = 0; Uidx < users.Length; Uidx++)
            {
                for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
                {
                    GetReq.AddGetData(m_titleid, users[Uidx], LBTypes[LBidx], 5,
                        SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
                }
            }

            GetResp = GetReq.Execute();
            // check Xerr
            if (GetResp != null && GetResp.xResult != 0)
            {
                string msg = "XError =" + GetResp.xResult.ToString();
                throw new UnexpectedTestResultException(msg);
            }

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == (LBTypes.Length * users.Length))
                {
                    retval = true;
                    for (int RespNo = 0; RespNo < GetResp.RespDataLen; RespNo++)
                    {
                        XRLAttList tempList = GetResp.RespData[RespNo].AttList;
                        for (int index = 0; index < tempList.SubAttrSize; index++)
                        {
                            if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                            {
                                string pathnme = Encoding.UTF8.GetString(response.Token.PathName);
                                XrlAttrUTFString tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);

                                if (tempStr == null)
                                {
                                    System.Console.WriteLine("Attachment Not found for user: " + GetResp.RespData[RespNo].Resphead.userPuid);
                                    System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);

                                    string msg = "Attachment Not found for user: " + GetResp.RespData[RespNo].Resphead.userPuid;
                                    throw new UnexpectedTestResultException(msg);
                                    //return false;
                                }

                                if (pathnme != tempStr.Data)
                                {
                                    Console.WriteLine("PathName does Not Match :");
                                    Console.WriteLine("path commited :- " + pathnme);
                                    Console.WriteLine("Path Returened by Get :- " + tempStr.Data);
                                    string msg = "PathName does Not Match is" + tempStr.Data + " Should be " + pathnme;
                                    throw new UnexpectedTestResultException(msg);

                                    //return false;
                                }

                                break;
                            }

                            if (index >= tempList.SubAttrSize)
                            {
                                System.Console.WriteLine("Attachment Not founf for user" + GetResp.RespData[RespNo].Resphead.userPuid);
                                System.Console.WriteLine("Attachment Not found for LBType" + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                return false;
                            }
                        }
                    }
                }
            }

            return retval;
        }
    }

    public class SFDCommitAtt1UMLB : V2TestBase
    {
        XRLSetRequest SetReq;
        public XRLSetResponse response;
        public uint m_titleid;
        public uint[] LBTypes;
        public ulong user;

        public SFDCommitAtt1UMLB(uint title, uint[] lbtypes)
        {
            m_titleid = title;
            LBTypes = lbtypes;
            user = StatsStressSupport.GenerateRandomPUID();
        }

        protected virtual bool BuildRequest()
        {
            if (DBHelper.ResetTile(m_titleid) == true)
            {
                Thread.Sleep(300);
                uint RecCount = (uint)LBTypes.Length;
                SetReq = new XRLSetRequest(m_titleid, RecCount);

                for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
                    SetReq.AddSetData(LBTypes[LBidx], user, 5, SpecialAttribMask.Nickname | SpecialAttribMask.Rating, (ulong)12345);

                return true;
            }

            return false;
        }

        override protected void Execute()
        {
            if (run())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;

        }

        public bool run()
        {
            bool retval = false;

            if (BuildRequest())
            {	// execute and get response
                response = SetReq.Execute();
                if (response != null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                {
                    // commit the attachment.
                    XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid, 50, 50, response.Token.PathNameLen, response.Token.PathName, response.SetRefLen, response.SetRef);
                    XRLResponse CommitResp = CommitReq.Execute();
                    if (CommitResp != null && CommitResp.xResult == 0)
                    {
                        if (VerifyResponse())
                            retval = true;
                    }
                }
            }

            return retval;
        }

        protected virtual bool VerifyResponse()
        {
            bool retval = false;
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest((uint)LBTypes.Length);

            //uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
            for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
            {
                GetReq.AddGetData(m_titleid, user, LBTypes[LBidx], 5,
                    SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
            }

            GetResp = GetReq.Execute();

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == LBTypes.Length)
                {
                    retval = true;
                    for (int RespNo = 0; RespNo < GetResp.RespDataLen; RespNo++)
                    {
                        if (GetResp.RespData[RespNo].Resphead.userPuid == user)
                        {
                            XRLAttList tempList = GetResp.RespData[RespNo].AttList;

                            int index = 0;
                            for (; index < tempList.SubAttrSize; index++)
                            {
                                if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                                {
                                    string pathnme = Encoding.UTF8.GetString(response.Token.PathName);
                                    XrlAttrUTFString tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);

                                    if (tempStr == null)
                                    {
                                        System.Console.WriteLine("Attachment Not founf for user: " + user);
                                        System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                        return false;
                                    }

                                    if (pathnme != tempStr.Data)
                                    {
                                        Console.WriteLine("PathName does Not Match :");
                                        Console.WriteLine("path commited :- " + pathnme);
                                        Console.WriteLine("Path Returened by Get :- " + tempStr.Data);
                                        return false;
                                    }

                                    break;
                                }
                            }

                            if (index >= tempList.SubAttrSize)
                            {
                                System.Console.WriteLine("Attachment Not founf for user: " + user);
                                System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                return false;
                            }
                        }
                    }
                }
            }

            return retval;
        }
    }

    public class SFDCommitAtt1U1LB : V2TestBase
    {

        XRLSetRequest SetReq;
        public XRLSetResponse response;
        public uint m_titleid;
        public uint LBType;
        public ulong m_user;

        public SFDCommitAtt1U1LB(uint title, uint lbtype)
        {
            m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
            LBType = lbtype;
            m_user = StatsStressSupport.GenerateRandomPUID();

        }

        protected bool BuildRequest()
        {
            if (DBHelper.ResetTile(m_titleid) == true)
            {
                Thread.Sleep(300);
                SetReq = new XRLSetRequest(m_titleid, 1);
                SetReq.AddSetData(LBType, m_user, 5, SpecialAttribMask.Nickname | SpecialAttribMask.Rating, (ulong)12345);
                return true;
            }

            return false;
        }

        public bool VerifyResponse()
        {
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest(1);

            //uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
            GetReq.AddGetData(m_titleid,
                m_user,
                LBType, 5,
                SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);

            GetResp = GetReq.Execute();

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == 1)
                {
                    if (GetResp.RespData[0].Resphead.userPuid == m_user)
                    {
                        XRLAttList tempList = GetResp.RespData[0].AttList;
                        for (int index = 0; index < tempList.SubAttrSize; index++)
                        {
                            if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                            {
                                string pathnme = Encoding.UTF8.GetString(response.Token.PathName);
                                XrlAttrUTFString tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);

                                if (tempStr == null)
                                    return false;

                                if (pathnme == tempStr.Data)
                                {
                                    return true;
                                }

                                Console.WriteLine("PathName does Not Match :");
                                Console.WriteLine("path commited :- " + pathnme);
                                Console.WriteLine("Path Returened by Get :- " + tempStr.Data);

                                //compare path
                            }
                        }
                    }
                }
            }

            return false;
        }

        override protected void Execute()
        {
            if (run())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;

        }

        public bool run()
        {
            bool retval = false;

            if (BuildRequest())
            {	// execute and get response
                response = SetReq.Execute();
                if (response != null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
                {
                    // commit the attachment.
                    XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid, 50, 50, response.Token.PathNameLen, response.Token.PathName, response.SetRefLen, response.SetRef);
                    XRLResponse CommitResp = CommitReq.Execute();

                    if (CommitResp != null && CommitResp.xResult == 0)
                    {
                        if (VerifyResponse())
                            retval = true;
                    }
                }
            }

            return retval;
        }
    }

    public class SFDFewCommitAtt1UMLB : SFDCommitAtt1UMLB
    {
        public SFDFewCommitAtt1UMLB(uint title, uint[] lbtypes)
            : base(title, lbtypes)
        {
        }

        protected override bool VerifyResponse()
        {
            bool retval = false;
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest((uint)LBTypes.Length);

            //uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
            for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
            {
                GetReq.AddGetData(m_titleid, user, LBTypes[LBidx], 5,
                    SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
            }

            GetResp = GetReq.Execute();

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == LBTypes.Length)
                {
                    retval = true;
                    for (int RespNo = 0; RespNo < GetResp.RespDataLen; RespNo++)
                    {
                        if (GetResp.RespData[RespNo].Resphead.userPuid == user)
                        {
                            XRLAttList tempList = GetResp.RespData[RespNo].AttList;

                            int index = 0;
                            for (; index < tempList.SubAttrSize; index++)
                            {
                                if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                                {
                                    string pathnme = Encoding.UTF8.GetString(response.Token.PathName);
                                    XrlAttrUTFString tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);

                                    if (tempStr == null)
                                    {
                                        if (GetResp.RespData[RespNo].Resphead.dwLeaderBoardType >= 20)
                                        {
                                            System.Console.WriteLine("Attachment Not founf for user: " + user);
                                            System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                            return false;
                                        }
                                        break;
                                    }

                                    if (pathnme != tempStr.Data)
                                    {
                                        Console.WriteLine("PathName does Not Match :");
                                        Console.WriteLine("path commited :- " + pathnme);
                                        Console.WriteLine("Path Returened by Get :- " + tempStr.Data);
                                        return false;
                                    }

                                    break;
                                }
                            }

                            if (index >= tempList.SubAttrSize)
                            {
                                System.Console.WriteLine("Attachment Not founf for user: " + user);
                                System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                return false;
                            }
                        }
                    }
                }
            }

            return retval;
        }
    }

    public class SFDFewCommitAttMUMLB : SFDCommitAttMUMLB
    {
        public SFDFewCommitAttMUMLB(uint titleid, uint usercount, uint[] lbtypes)
            : base(titleid, usercount, lbtypes)
        {
        }

        protected override bool VerifyResponse()
        {
            bool retval = false;
            XRLGetRequest GetReq;
            XRLGetResponse GetResp;

            GetReq = new XRLGetRequest((uint)(LBTypes.Length * users.Length));

            //uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
            for (int Uidx = 0; Uidx < users.Length; Uidx++)
            {
                for (int LBidx = 0; LBidx < LBTypes.Length; LBidx++)
                {
                    GetReq.AddGetData(m_titleid, users[Uidx], LBTypes[LBidx], 5,
                        SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
                }
            }

            GetResp = GetReq.Execute();

            if (GetResp != null && GetResp.xResult == 0)
            {
                if (GetResp.RespDataLen == (LBTypes.Length * users.Length))
                {
                    retval = true;
                    for (int RespNo = 0; RespNo < GetResp.RespDataLen; RespNo++)
                    {
                        XRLAttList tempList = GetResp.RespData[RespNo].AttList;
                        for (int index = 0; index < tempList.SubAttrSize; index++)
                        {
                            if (tempList.SubAttr[index].Info.ID == SpecialAttrib.AttachmentPathName)
                            {
                                string pathnme = Encoding.UTF8.GetString(response.Token.PathName);
                                XrlAttrUTFString tempStr = (XrlAttrUTFString)(tempList.SubAttr[index].Data);

                                if (tempStr == null)
                                {
                                    if (GetResp.RespData[RespNo].Resphead.dwLeaderBoardType >= 20)
                                    {
                                        System.Console.WriteLine("Attachment Not founf for user: " + GetResp.RespData[RespNo].Resphead.userPuid);
                                        System.Console.WriteLine("Attachment Not found for LBType: " + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                        return false;
                                    }
                                    break;
                                }

                                if (pathnme != tempStr.Data)
                                {
                                    Console.WriteLine("PathName does Not Match :");
                                    Console.WriteLine("path commited :- " + pathnme);
                                    Console.WriteLine("Path Returened by Get :- " + tempStr.Data);
                                    return false;
                                }
                                break;

                            }
                            if (index >= tempList.SubAttrSize)
                            {
                                System.Console.WriteLine("Attachment Not founf for user" + GetResp.RespData[RespNo].Resphead.userPuid);
                                System.Console.WriteLine("Attachment Not found for LBType" + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
                                return false;
                            }
                        }
                    }
                }
            }

            return retval;
        }
    }

    public class SFDCommitAttSameRating : V2TestBase
    {
        uint Title_id;
        uint LB_Type;
        ulong UserId;
        string AttName;
        string AttName2;

        public SFDCommitAttSameRating(uint title, uint lbtype)
        {
            Title_id = title;
            LB_Type = lbtype;

        }

        override protected void Execute()
        {
            if (run())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;
        }

        public bool run()
        {
            SFDCommitAtt1U1LB test = new SFDCommitAtt1U1LB(Title_id, LB_Type);
            if (test.run())
            {
                UserId = test.m_user;
                AttName = Encoding.UTF8.GetString(test.response.Token.PathName);
                if (test.run())
                {
                    AttName2 = Encoding.UTF8.GetString(test.response.Token.PathName);
                    if (AttName != AttName2)
                        return true;
                }
            }

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2SetGet_CommitNegative.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	public class V2SetGet_CommitNegative : TestNode
	{
		public V2SetGet_CommitNegative(string Name)
		{
            AddChild(new SFDCommitZeroRating(201,20));
            AddChild(new SFDCommitMaxRating(201,20));
            AddChild(new SFDSetAttPathName(201,20));
            AddChild(new SFDSetAttSize(201,20));
            AddChild(new SFDCommitMaxNickName(201,20));
            AddChild(new SFDCommitMaxPUID(201,20));
			
            AddChild(new SFDCommitMinPUID(201,20)); // failed 
			
            AddChild(new SFDCommitTitleID0(20));
            AddChild(new SFDCommitTitleIDMax(20));
            AddChild(new SFDCommitLBType1(301));
            AddChild(new SFDCommitLBTypeMax(301));

			// negative test cases for Commit Api
            AddChild(new SFDCommitInvalidTitleID(201,20));  
            AddChild(new SFDCommitInvalidLBType(201,20)); 
            AddChild(new SFDCommitInvalidUser(201,20));   
            AddChild(new SFDCommitInvalidPathName(201,20));  
            AddChild(new SFDCommitInvalidAttSize(201,20));   
            AddChild(new SFDCommitAttSize0(201,20));
		
            AddChild(new SFDCommitMixedAtt(201,20));        
            AddChild(new SFDCommitMsgTruncated(201,21));
			
            AddChild(new SFDResetBeforeCommit(201,21));
		}
	}

	public class SFDResetBeforeCommit : TestBase
	{
		XRLSetRequest SetReq;
		public XRLSetResponse response;
		public uint m_titleid;
		public uint LBType;
		public ulong m_user;
		public ulong Rating;
		protected string NickName = "Test1";
		protected uint AttSize=50;

		public SFDResetBeforeCommit(uint title,uint lbtype)
		{
			m_titleid = title; 
			LBType = lbtype;
			m_user = StatsStressSupport.GenerateRandomPUID ();
		}
		
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReq= new XRLSetRequest(m_titleid,1);
				SetReq.AddSetData(LBType,m_user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)Rating,NickName);
				return true;
			}
			
			return false;
		}
		
		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
		public bool run()
		{
			bool retval=false;
			
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{		
					DBHelper.ResetTile(m_titleid);
					// commit the attachment.
					XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,AttSize,50,response.Token.PathNameLen,response.Token.PathName,response.SetRefLen,response.SetRef);
					XRLResponse CommitResp = CommitReq.Execute();
					if(CommitResp!= null && CommitResp.xResult == XResult.XONLINE_E_STAT_INVALID_ATTACHMENT)
					{							
						retval=true;
					}
				}
			}
			return retval;
		}

	}

	public class SFDCommitMaxNickName : SFDCommitWRating
	{
		public SFDCommitMaxNickName(uint title,uint lbtype)
			:base(title,lbtype)
		{
			Rating=100;
			byte size =63;
			//size = (byte)~size;
			StringBuilder temp= new StringBuilder(size);
			for(int i=0;i<size;i++)
			{
				temp.Append('X');
			}
			NickName= temp.ToString();
		}
	}

	public class SFDCommitMaxPUID : SFDCommitWRating
	{
		public SFDCommitMaxPUID(uint title,uint lbtype)
			:base(title,lbtype)
		{
			m_user =0;
			m_user = ~m_user;
			Rating=100;
			
			
		}
	}

	public class SFDCommitMinPUID : SFDCommitWRating
	{
		public SFDCommitMinPUID(uint title,uint lbtype)
			:base(title,lbtype)
		{
			m_user =1;
			Rating=100;
			
			
		}
	}

	public class SFDCommitZeroRating : SFDCommitWRating
	{
		public SFDCommitZeroRating(uint title,uint lbtype)
			:base(title,lbtype)
		{
			Rating=0;
		}
	}

	public class SFDCommitMaxRating : SFDCommitWRating
	{
		public SFDCommitMaxRating(uint title,uint lbtype)
			:base(title,lbtype)
		{
			Rating=0;
			Rating = ~Rating;
		}
	}

	public class SFDCommitLBType1 :SFDCommitWRating
	{
		public SFDCommitLBType1(uint title)
			:base(title,1)
		{
			Rating=100;
			
		}

	}

	public class SFDCommitLBTypeMax :SFDCommitWRating
	{
		public SFDCommitLBTypeMax(uint title)
			:base(title,65535)
		{
			
			Rating=100;
			
		}

	}

	public class SFDCommitTitleID0 :SFDCommitWRating
	{
		public SFDCommitTitleID0(uint lbtype)
			:base(0,lbtype)
		{
			
			Rating=100;
			
		}

	}

	public class SFDCommitTitleIDMax :SFDCommitWRating
	{
		public SFDCommitTitleIDMax(uint lbtype)
			:base(0,lbtype)
		{
			uint maxval=0;
			m_titleid= ~maxval;
			Rating=100;
			
		}

	}

	public class SFDCommitWRating : TestBase
	{
		XRLSetRequest SetReq;
		public XRLSetResponse response;
		public uint m_titleid;
		public uint LBType;
		public ulong m_user;
		public ulong Rating;
		protected string NickName = "Test1";
		protected uint AttSize=50;

		public SFDCommitWRating(uint title,uint lbtype)
		{
			m_titleid = title; 
			LBType = lbtype;
			m_user = StatsStressSupport.GenerateRandomPUID ();
		}
		
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReq= new XRLSetRequest(m_titleid,1);
				SetReq.AddSetData(LBType,m_user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)Rating,NickName);
				return true;
			}
			

			return false;

		}
		public virtual bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(1);
				
				
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			GetReq.AddGetData(m_titleid,
				m_user,
				LBType,5,
				SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize|SpecialAttribMask.Rating);

			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==1)
				{
					if(GetResp.RespData[0].Resphead.userPuid == m_user)
					{
						XRLAttList  tempList = GetResp.RespData[0].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.Rating)
							{
								XrlAttrULong tempulong= (XrlAttrULong)(tempList.SubAttr[index].Data);
								if(tempulong.Data != Rating)
								{
									System.Console.WriteLine("Error:--Rating is not  Zero.");
								}
							}
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr==null)
									return false;

								if(pathnme ==  tempStr.Data)
								{
									return true;
								}

								Console.WriteLine("PathName does Not Match :");
								Console.WriteLine("path commited :- "+pathnme);
								Console.WriteLine("Path Returened by Get :- "+tempStr.Data);
								
								//compare path
							}
							
						}

					}

				}
			}
					
			
			return false;
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
		public bool run()
		{
			bool retval=false;
			
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{					
					// commit the attachment.
					XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,AttSize,50,response.Token.PathNameLen,response.Token.PathName,response.SetRefLen,response.SetRef);
					XRLResponse CommitResp = CommitReq.Execute();
					if(CommitResp!= null && CommitResp.xResult ==0)
					{							
						if(VerifyResponse())
							retval=true;
					}
				}
			}
			return retval;
		}

	}

	public class SFDSetAttPathName: SFDSetAttributeNeg
	{
		public SFDSetAttPathName(uint title,uint lbtype)
			:base(title,lbtype)
		{
			AttribMask = SpecialAttribMask.AttachmentPathName|SpecialAttribMask.Rating;
		}
	}

	public class SFDSetAttSize: SFDSetAttributeNeg
	{
		public SFDSetAttSize(uint title,uint lbtype)
			:base(title,lbtype)
		{
			AttribMask = SpecialAttribMask.AttachmentSize|SpecialAttribMask.Rating;
		}
	}

	public class SFDSetAttributeNeg: TestBase
	{
		XRLSetRequest SetReq;
		public XRLSetResponse response;
		public uint m_titleid;
		public uint LBType;
		public ulong m_user;
		protected int AttribMask;

		public SFDSetAttributeNeg(uint title,uint lbtype)
		{
			m_titleid = title; 
			LBType = lbtype;
			m_user = StatsStressSupport.GenerateRandomPUID ();
			
		}

		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReq= new XRLSetRequest(m_titleid,1);
				SetReq.AddSetData(LBType,m_user,5,AttribMask,(ulong)12345);
				return true;
			}
			

			return false;

		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
		public bool run()
		{
			bool retval=false;
			
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_E_STAT_BAD_REQUEST)
				{					
					retval=true;
				}
				else
					retval=false;
			}
			return retval;
		}


	}

	public class SFDCommitMsgTruncated :SFDInvalidCommit
	{
		public SFDCommitMsgTruncated(uint title,uint lbtype)
			:base (title,lbtype)
		{
			Xerror = XResult.XONLINE_E_INVALID_REQUEST;
		}
		public override bool run()
		{
			bool retval=false;
			
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{					
					// commit the attachment.
					AccessToken token =response.Token;
					SetDataReference[] refs = response.SetRef;
					XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,NewPathSize,50,token.PathNameLen,token.PathName,(ushort)refs.Length,refs,true);
					XRLResponse CommitResp = CommitReq.Execute();
					
					if(CommitResp!= null &&CommitResp.xResult ==Xerror)
					{
						retval= true;
					}
				}
			}
			return retval;
		}


	}

	public class SFDCommitMixedAtt :SFDInvalidCommit
	{
		public SFDCommitMixedAtt(uint title,uint lbtype)
			:base (title,lbtype)
		{
			Xerror = XResult.XONLINE_E_STAT_INVALID_ATTACHMENT;
		}
		public override bool run()
		{
			bool retval=false;
			Thread.Sleep(300);
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{					
					// commit the attachment.
					AccessToken token =response.Token;
					SetDataReference[] refs = new SetDataReference[ 2];
					refs[0]=response.SetRef[0];
					refs[1] = new SetDataReference();

					refs[1].UserPuid= 707;
					refs[1].LeaderBoardId=refs[0].LeaderBoardId;

					ChangeCommitRequest( token,refs);
					XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,NewPathSize,50,token.PathNameLen,token.PathName,(ushort)refs.Length,refs);
					XRLResponse CommitResp = CommitReq.Execute();
					
					if(CommitResp!= null &&CommitResp.xResult ==Xerror)
					{
						retval= true;
					}
				}
			}
			return retval;
		}


	}

	public class SFDCommitAttSize0 :SFDCommitWRating
	{
		public SFDCommitAttSize0(uint title,uint lbtype)
			:base (title,lbtype)
		{
			AttSize=0;
		}

		public override bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(1);
				
				
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			GetReq.AddGetData(m_titleid,
				m_user,
				LBType,5,
				SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize|SpecialAttribMask.Rating);

			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==1)
				{
					if(GetResp.RespData[0].Resphead.userPuid == m_user)
					{
						XRLAttList  tempList = GetResp.RespData[0].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr==null)
									return true;

								if(pathnme ==  tempStr.Data)
								{
									return false;
								}

								Console.WriteLine("PathName does Not Match :");
								Console.WriteLine("path commited :- "+pathnme);
								Console.WriteLine("Path Returened by Get :- "+tempStr.Data);
								
								//compare path
							}
							
						}

					}

				}
			}
					
			
			return false;
		}


	}

	public class SFDCommitInvalidAttSize :SFDInvalidCommit
	{
		public SFDCommitInvalidAttSize(uint title,uint lbtype)
			:base (title,lbtype)
		{
			NewPathSize=5000;
			Xerror = XResult.XONLINE_E_STAT_INVALID_ATTACHMENT;
		}

	}

	public class SFDCommitInvalidPathName :SFDInvalidCommit
	{
		public SFDCommitInvalidPathName(uint title,uint lbtype)
			:base (title,lbtype)
		{
			NewPathname="XXX";
			Xerror = XResult.XONLINE_E_STAT_INVALID_ATTACHMENT;
		}

	}

	public class SFDCommitInvalidUser :SFDInvalidCommit
	{
		public SFDCommitInvalidUser(uint title,uint lbtype)
			:base (title,lbtype)
		{
			Newuser=707;
			Xerror = XResult.XONLINE_E_STAT_INVALID_ATTACHMENT;
		}

	}

	public class SFDCommitInvalidLBType :SFDInvalidCommit
	{
		public SFDCommitInvalidLBType(uint title,uint lbtype)
			:base (title,lbtype)
		{
			NewLBType=707;
			Xerror = XResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
		}

	}

	public class SFDCommitInvalidTitleID :SFDInvalidCommit
	{
		public SFDCommitInvalidTitleID(uint title,uint lbtype)
			:base (title,lbtype)
		{
			Newtitleid=707;
			Xerror = XResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
		}

	}

	public class SFDInvalidCommit : TestBase
	{
		protected XRLSetRequest SetReq;
		public XRLSetResponse response;
		protected uint m_titleid;
		protected uint LBType;
		protected ulong m_user;
		protected ulong Rating;
		protected string NickName = "Test1";
		public uint Newtitleid=0;
		public uint NewLBType=0;
		public ulong Newuser=0;
		public string NewPathname;
		public uint NewPathSize=50;
		public uint Xerror=0;

		public SFDInvalidCommit(uint title,uint lbtype)
		{
			m_titleid = title; 
			LBType = lbtype;
			m_user = StatsStressSupport.GenerateRandomPUID ();
		}
		
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReq= new XRLSetRequest(m_titleid,1);
				SetReq.AddSetData(LBType,m_user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)Rating,NickName);
				return true;
			}
			

			return false;

		}
		
		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}

		public void ChangeCommitRequest(AccessToken token,SetDataReference[] refs)
		{
			if(Newtitleid!=0)
			{
				m_titleid = Newtitleid;
			}
			if (NewLBType!=0)
			{
				refs[0].LeaderBoardId=NewLBType;
			}
			if (Newuser!=0)
			{
				refs[0].UserPuid=Newuser;
			}
			if(NewPathname!=null)
			{
				for(int i=10;i<15;i++)
				{
					token.PathName[i]= (byte)'X';
				}
				
			}
			

		}
		public virtual bool run()
		{
			bool retval=false;
			
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{					
					// commit the attachment.
					AccessToken token =response.Token;
					SetDataReference[] refs = response.SetRef;

					ChangeCommitRequest( token,refs);
					XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,NewPathSize,50,token.PathNameLen,token.PathName,(ushort)refs.Length,refs);
					XRLResponse CommitResp = CommitReq.Execute();
					
					if(CommitResp!= null &&CommitResp.xResult ==Xerror)
					{
						retval= true;
					}
					else
					{
						Global.RO.Warn("returned  XError :"+CommitResp.xResult+" Expected "+Xerror);
					}
				}
			}
			return retval;
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2Set_UnCommitUserData.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	public class V2SetGet_UnCommitUserData : TestNode
	{
		public V2SetGet_UnCommitUserData(string Name)
		{
            AddChild(new SFDUnCommitAtt1U1LB(201,20));
            AddChild(new SFDMixedCmt_UnCmt1U1LBMR(201,20));
            AddChild(new SFDMixedCmtUncmtNOAttMUMLB(201));
            AddChild(new SFDMixedUncmtNOAttMUMLB(201));
		}
	}

	public class SFDUnCommitAtt1U1LB : TestBase
	{

		XRLSetRequest SetReq;
		public XRLSetResponse response;
		public uint m_titleid;
		public uint LBType;
		public ulong m_user;

		public SFDUnCommitAtt1U1LB(uint title,uint lbtype)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			m_user = StatsStressSupport.GenerateRandomPUID ();
			
		}
		
		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				SetReq= new XRLSetRequest(m_titleid,1);
				SetReq.AddSetData(LBType,m_user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)12345);
				return true;
			}
			return false;
		}

		protected bool VerifyResponse()
		{
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest(1);
				
				
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			GetReq.AddGetData(m_titleid,
				m_user,
				LBType,5,
				SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);

			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==1)
				{
					if(GetResp.RespData[0].Resphead.userPuid == m_user)
					{
						XRLAttList  tempList = GetResp.RespData[0].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								string pathnme= Encoding.UTF8.GetString(response.Token.PathName);
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								if(tempStr!=null)
								{
									if(pathnme ==  tempStr.Data)
									{
										Console.WriteLine("We should not have an attachment but a Path was Returened by Get :- "+tempStr.Data);
										return true;
									}
								}
								return true;
			
							
							}
							
						}

					}

				}
			}
					
			
			return false;
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
		public bool run()
		{
			bool retval=false;
			if(BuildRequest())
			{	// execute and get response
				response = SetReq.Execute();
				if(response !=null && response.xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
				{					
					// Dont commit the attachment.

					if(VerifyResponse())
						retval=true;
				}
			}
			return retval;
		}


	}

	public class SFDMixedCmt_UnCmt1U1LBMR : TestBase
	{
	
		XRLSetRequest[] SetReqlist;
		public XRLSetResponse[] responselist;
		public uint m_titleid;
		public uint LBType;
		public UserRatingMap[] m_user;
		public int NumReq;
		public int NumCommit;
		public int NumUnCommit;
		public int NumNoAtt;
		int TopCount;

		public SFDMixedCmt_UnCmt1U1LBMR(uint title,uint lbtype,int Commit,int UnCommit,int NoAtt)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			TopCount = 5;
			NumCommit= Commit;
			NumUnCommit= UnCommit;
			NumNoAtt=NoAtt;

			

			NumReq = NumCommit+NumUnCommit+NumNoAtt;
			m_user = new UserRatingMap[NumReq];
			ulong rating= 2000;
			int index=0;
			for( ;index<NumCommit;index++)
			{
				m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.CommitedAtt);
				rating =rating-100;
			}
			for(int i=0; i<NumUnCommit;index++,i++)
			{
				m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.UnCommitedAtt);
				rating =rating-100;
			}
			for(int i=0; i<NumNoAtt;index++ ,i++)
			{
				m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.NOAtt);
				rating =rating-100;
			}

			SetReqlist = new XRLSetRequest[NumReq];
			responselist = new XRLSetResponse[NumReq];

		}
		public SFDMixedCmt_UnCmt1U1LBMR(uint title,uint lbtype)
		{
			m_titleid = title; //StatsStressSupport.GetRandomTitleIdFromList();
			LBType = lbtype;
			TopCount = 5;
			NumCommit = 3;
			NumUnCommit =2;
			NumNoAtt =5;
			NumReq = NumCommit+NumUnCommit+NumNoAtt;
			m_user = new UserRatingMap[NumReq];
			ulong rating= 2000;
			int index=0;
			for( ;index<NumCommit;index++)
			{
				m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.CommitedAtt);
				rating =rating-100;
			}
			for(int i=0; i<NumUnCommit;index++,i++)
			{
                m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.UnCommitedAtt);
				rating =rating-100;
			}
			for(int i=0; i<NumNoAtt;index++ ,i++)
			{
				if(i==0)
				{
					m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),0,UserState.NOAtt);
				}
				else
				{
					m_user[index] =new UserRatingMap( StatsStressSupport.GenerateRandomPUID (),rating,UserState.NOAtt);
					rating =rating-100;
				}
			}

			SetReqlist = new XRLSetRequest[NumReq];
			responselist = new XRLSetResponse[NumReq];
			
		}

		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}

		protected bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
			
			
				for( int i=0; i<NumReq;i++)
				{
					SetReqlist[i]= new XRLSetRequest(m_titleid,1);
					SetReqlist[i].AddSetData(LBType,m_user[i].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,m_user[i].rating);
				
				}
				return true;
			}
			

			return false;

		}

		public bool run()
		{
			bool retval=false;
			int commitcount=0,UncommitCount=0;
			
			if(BuildRequest())
			{
				for(int i=0 ;i< NumReq ;i++)
				{
					responselist[i] = SetReqlist[i].Execute();
					if(i<TopCount && responselist[i].xResult != XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT) 
					{
						System.Console.WriteLine("Error the top 5 did not get a chance to upload");
						return false;
					}
					if(responselist[i] !=null && responselist[i].xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
					{					
						// commit the attachment.
						if(m_user[i].AttStatus ==UserState.UnCommitedAtt )
								continue;
						
						XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,50,50,responselist[i].Token.PathNameLen,responselist[i].Token.PathName,responselist[i].SetRefLen,responselist[i].SetRef);
						XRLResponse CommitResp = CommitReq.Execute();
						if(CommitResp!= null && CommitResp.xResult ==0)
						{							
							commitcount++;
						
						}
					}
					else
						UncommitCount++;
				}

				
				if(VerifyResponse())
					retval=true;

			

			}
			return retval;
		}

		protected bool VerifyResponse()
		{
			bool retval=false;
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest((uint)NumReq);

			for(int i=0;i<NumReq;i++)
			{
				GetReq.AddGetData(m_titleid,
					m_user[i].user,
					LBType,5,
					SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
			}

			GetResp = GetReq.Execute();
		
			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen ==NumReq)
				{
					for(int i=0;i<NumReq;i++)
					{	
						if(GetResp.RespData[i].Resphead.userPuid == m_user[i].user)
						{
							retval=true;
							XRLAttList  tempList = GetResp.RespData[i].AttList;
							int index =0;
							for(; index < tempList.SubAttrSize;index++)
							{
								if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
								{
									string pathnme;
									XrlAttrUTFString tempStr;
									if(responselist[i].Token!=null && tempList.SubAttr[index].Data != null)
									{
										pathnme= Encoding.UTF8.GetString(responselist[i].Token.PathName);
										tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);
									}
									else
									{
										if(tempList.SubAttr[index].Data ==null)
										{
											if(responselist[i].Token ==null || m_user[i].AttStatus ==UserState.UnCommitedAtt)
											{
												break;
											}
										}
									
										return false;
									
										
									}

									if(pathnme !=  tempStr.Data)
									{
										Console.WriteLine("PathName does Not Match :");
										Console.WriteLine("path commited :- "+pathnme);
										Console.WriteLine("Path Returened by Get :- "+tempStr.Data);
										return false;
									}
									else 
										break;
								
									//compare path
								}
							}
							if(index >= tempList.SubAttrSize)
							{
								System.Console.WriteLine("Did not Find an Attachment");
								return false;
							}
						}

					}

				}

			}

			return retval;

		}
	}

	public class SFDMixedMUMLB : TestBase
	{
		XRLSetRequest[] SetReq;
		public XRLSetResponse[] response;
		public uint m_titleid;
		public uint[] LBTypes;
		public UserRatingMap[] userMap;
		public int NumCommit=0;
		public int NumUnCommit=1;
		public int NumNoAtt=1;
		public SFDMixedMUMLB(uint titleid)
		{
			m_titleid = titleid;

		}



		protected virtual bool  BuildRequest()
		{
			if(DBHelper.ResetTile(m_titleid)==true)
			{
				Thread.Sleep(300);
				int ReqCount =userMap.Length;

				SetReq = new  XRLSetRequest[ReqCount];
				for(int Uidx=0;Uidx< userMap.Length;Uidx++)
				{
					SetReq[Uidx]= new XRLSetRequest(m_titleid,(uint)1);
					SetReq[Uidx].AddSetData(userMap[Uidx].LBtype ,userMap[Uidx].user,5,SpecialAttribMask.Nickname | SpecialAttribMask.Rating,(ulong)(500+Uidx));
				}
			
				return true;
				
			}
			return false;
		}


		override protected void Execute()
		{
			if(run())
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
		public bool run()
		{

			bool retval=false;
			bool Verify=true;
			
			if(BuildRequest())
			{	// execute and get response
				response= new XRLSetResponse[userMap.Length];
				for(int Uidx=0;Uidx< userMap.Length;Uidx++)
				{
					response[Uidx] = SetReq[Uidx].Execute();
					if(response !=null && response[Uidx].xResult == XResult.XONLINE_S_STAT_CAN_UPLOAD_ATTACHMENT)
					{	
						if(userMap[Uidx].AttStatus == UserState.CommitedAtt)
						{
							XRLCommitAttachment CommitReq = new XRLCommitAttachment(m_titleid,50,50,response[Uidx].Token.PathNameLen,response[Uidx].Token.PathName,response[Uidx].SetRefLen,response[Uidx].SetRef);
							XRLResponse CommitResp = CommitReq.Execute();
							if(CommitResp== null || XResult.Failed(CommitResp.xResult))
							{							
								Verify= false;
							}
						}
					}
				}
				if(Verify)
				{
					if(VerifyResponse())
						retval = true;
				}
			}
			return retval;
		}


		protected virtual bool VerifyResponse()
		{
			bool retval =false;
			XRLGetRequest GetReq;
			XRLGetResponse GetResp;

			GetReq= new XRLGetRequest((uint)(userMap.Length));
				
				
			//uint titleid = 707 ;//StatsStressSupport.GetRandomTitleIdFromList();
			for(int Uidx=0;Uidx < userMap.Length ;Uidx++)
			{
				GetReq.AddGetData(m_titleid,userMap[Uidx].user,userMap[Uidx].LBtype,5,
						SpecialAttribMask.AttachmentPathName | SpecialAttribMask.AttachmentSize);
				
			}

			GetResp = GetReq.Execute();

			if(GetResp!=null && GetResp.xResult ==0)
			{
				if(GetResp.RespDataLen == userMap.Length)
				{
					retval= true;
					for(int RespNo=0; RespNo< GetResp.RespDataLen;RespNo++)
					{
						XRLAttList  tempList = GetResp.RespData[RespNo].AttList;
						for(int index =0; index < tempList.SubAttrSize;index++)
						{
							if(tempList.SubAttr[index].Info.ID ==SpecialAttrib.AttachmentPathName)
							{
								string pathnme=null;
								XrlAttrUTFString tempStr= (XrlAttrUTFString)(tempList.SubAttr[index].Data);

								// get the usermap record
								int UserIndex=0;
								for(;UserIndex < userMap.Length ;UserIndex++)
								{
									if(userMap[UserIndex].user ==GetResp.RespData[RespNo].Resphead.userPuid &&
										userMap[UserIndex].LBtype== GetResp.RespData[RespNo].Resphead.dwLeaderBoardType)
									{
										if(response[UserIndex].Token != null)
											pathnme= Encoding.UTF8.GetString(response[UserIndex].Token.PathName);

										break;
									}
								}

								if(UserIndex == userMap.Length)
								{
									System.Console.WriteLine("Error User not found :-" +GetResp.RespData[RespNo].Resphead.userPuid);
									return false;
								}
							
								if(tempStr == null)
								{	
									if(userMap[UserIndex].AttStatus == UserState.UnCommitedAtt ||
										userMap[UserIndex].AttStatus == UserState.NOAtt ||
										userMap[UserIndex].AttStatus == UserState.Unknown)
									{
										break;
									}
									else
									{
										Console.WriteLine("PathName does Not Match :");
										Console.WriteLine("path commited :- "+pathnme);
										Console.WriteLine("path returned is NULL");
										return false;
									}
									
								}
								
								if(pathnme !=  tempStr.Data)
								{
									Console.WriteLine("PathName does Not Match :");
									Console.WriteLine("path commited :- "+pathnme);
									Console.WriteLine("Path Returened by Get :- "+tempStr.Data);
									return false;
								}
								break;

							}
							if(index >= tempList.SubAttrSize)
							{
								System.Console.WriteLine("Attachment Not founf for user"+GetResp.RespData[RespNo].Resphead.userPuid );
								System.Console.WriteLine("Attachment Not found for LBType" + GetResp.RespData[RespNo].Resphead.dwLeaderBoardType);
								return false;
							}
							
						}
					
					}

				}
			}
					
			
			return retval;
		}



	}

	public class SFDMixedCmtUncmtNOAttMUMLB : SFDMixedMUMLB
	{
		public SFDMixedCmtUncmtNOAttMUMLB(uint titleid)
			:base (titleid)
		{
			userMap = new UserRatingMap[3];
			ulong user1 = StatsStressSupport.GenerateRandomPUID ();
			ulong user2 = StatsStressSupport.GenerateRandomPUID ();

			userMap[0] = new UserRatingMap(user2,52345,UserState.CommitedAtt,21);
			userMap[1] = new UserRatingMap(user1,12345,UserState.UnCommitedAtt,21);
			userMap[2] = new UserRatingMap(user1,12345,UserState.NOAtt,11);
	
		}
	}
	
	public class SFDMixedUncmtNOAttMUMLB : SFDMixedMUMLB
	{
		public SFDMixedUncmtNOAttMUMLB(uint titleid)
			:base (titleid)
		{
			userMap = new UserRatingMap[3];
			ulong user1 = StatsStressSupport.GenerateRandomPUID ();
			ulong user2 = StatsStressSupport.GenerateRandomPUID ();

			userMap[0] = new UserRatingMap(user2,52345,UserState.UnCommitedAtt,21);
			userMap[1] = new UserRatingMap(user1,12345,UserState.UnCommitedAtt,21);
			userMap[2] = new UserRatingMap(user1,12345,UserState.NOAtt,11);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\v2\V2WebEnumLeaderBoard.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using System.Threading;

namespace StatsFD
{
	public class V2WebEnumLeaderBoard: TestNode
	{
		public V2WebEnumLeaderBoard(string Name)
		{
            AddChild(new SFDWebEnumLBTop100(275,250));
            AddChild(new SFDWebEnumRec500TO600(275,250));
            AddChild(new SFDWebEnumByUser(275,250));
			
            AddChild(new SFDWebEnumLBWithMaxAttr(201,10));
            AddChild(new SFDWebEnumWithNullAttr(201,10));
            AddChild(new SFDWebEnumInValidTitle());
            AddChild(new SFDWebEnumInValidLeaderBoard());

            AddChild(new SFDXRLMessageTruncated(201,10));
            AddChild(new SFDXRLNullMessage(201,10));
		}
	}
}

class SFDXRLMessageTruncated : EnumMaxATT
{
	public SFDXRLMessageTruncated(uint titleid, uint lbtype)
        :base(titleid,lbtype)
	{ }

	override protected void Execute()
	{
			
		if(AddUsersToStat(64,SpecialAttribMask.Null,0))
		{
			LBRequest = new XRLWebEnumLB(m_titleid,LBType,1,(byte)0,10);
			response = LBRequest.Execute(1);
			if(VerifyResponse())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}
	}

	protected bool VerifyResponse()
	{
		if(response.xResult !=XResult.XONLINE_E_STAT_BAD_REQUEST)
		{
			return false;
		}
		return true;
	}
}

class SFDXRLNullMessage : EnumMaxATT
{
	public SFDXRLNullMessage(uint titleid, uint lbtype): base(titleid,lbtype)
	{
		
	}
	override protected void Execute()
	{
			
		if(AddUsersToStat(64,SpecialAttribMask.Null,0))
		{
			LBRequest = new XRLWebEnumLB(m_titleid,LBType,1,(byte)0,10);
			response = LBRequest.ExecuteNull();
			if(VerifyResponse())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}

		
	}

	protected bool VerifyResponse()
	{
		if(response.xResult !=XResult.XONLINE_E_STAT_BAD_REQUEST)
		{
			return false;
		}
		return true;
	}


}

class EnumMaxATT : TestBase
{
	protected uint m_titleid;
	protected uint LBType;
	protected UserRatingMap[] ulist;
	protected XRLWebEnumLB LBRequest;
	protected  XRLWebEnumLBResponse response;
	protected XRLSetRequest SetReq;
	

	public EnumMaxATT(uint title, uint lbtype)
	{
		m_titleid=title;
		LBType = lbtype;
		
	}
	override protected void Execute()
	{
	}

	protected bool AddUsersToStat(uint TotalAtt,int Spmask,uint NoOfNullAttr)
	{
		DBHelper.ResetTile(m_titleid);
		

		Thread.Sleep(400);
		ulist = new UserRatingMap[4];
		ulong rating= 2000;
		for(int index=0; index<4;index++)
		{
			ulist[index] =new UserRatingMap( CV2Helper.GenerateRandomPUID (),rating);
			rating =rating-100;
		}
		

		SetReq= new XRLSetRequest(m_titleid,4);
		//SpecialAttribMask
		SetReq.AddSetData(LBType,ulist[0].user,(uint)TotalAtt,Spmask ,ulist[0].rating,NoOfNullAttr);
		SetReq.AddSetData(LBType,ulist[1].user,(uint)TotalAtt, Spmask,ulist[1].rating,NoOfNullAttr);
		SetReq.AddSetData(LBType,ulist[2].user,(uint)TotalAtt, Spmask,ulist[2].rating,NoOfNullAttr);
		SetReq.AddSetData(LBType,ulist[3].user,(uint)TotalAtt, Spmask,ulist[3].rating,NoOfNullAttr);
		XRLSetResponse response = SetReq.Execute();
		Thread.Sleep(200);
		if(response.xResult ==XResult.S_OK)
			return true;

		return false;

	}


}

class SFDWebEnumLBWithMaxAttr : EnumMaxATT // 64 is max
{
	public SFDWebEnumLBWithMaxAttr(uint title, uint lbtype):base(title,lbtype)
	{
	}
	
	override protected void Execute()
	{
			
		if(AddUsersToStat(64,SpecialAttribMask.Rating,0))
		{
			LBRequest = new XRLWebEnumLB(m_titleid,LBType,1,(byte)0,10);
			response = LBRequest.Execute();
			if(VerifyResponse())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}

		
	}

	protected bool VerifyResponse()
	{
		if(response.xResult ==XResult.S_OK)
		{
			if(response.RepUserLBLen<=0)
				return false;
			for(int idx=0;idx<response.RepUserLBLen;idx++ )
			{
				// check for rank.
				if(ulist[idx].user != response.RepUserLB[idx].UserID)
				{
					// test failed Users  different.
					return false;
				}

				XRLAttList  tempList =response.RepUserLB[idx].Attr;
				for(int index =0; index < tempList.SubAttrSize ;index++)
				{
					XrlSubAttr[] temp  = SetReq.SetReq[idx].SubAttr;
					for(int v=0;v<temp.Length;v++)
					{
						if(tempList.SubAttr[index].Info.ID==temp[v].Info.ID)
						{
							if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Long)
							{
								XrlAttrUInt tempint= (XrlAttrUInt)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrUInt)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
							else if (tempList.SubAttr[index].Info.Type==(byte)AttrType.LongLong)
							{
								XrlAttrULong tempint= (XrlAttrULong)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrULong)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
							else if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Double)
							{
								XrlAttrDouble tempint= (XrlAttrDouble)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrDouble)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
						}
					}
				}
			}
		}
		return true;
	}

}

class SFDWebEnumWithNullAttr : EnumMaxATT
{
	public SFDWebEnumWithNullAttr(uint title, uint lbtype):base(title,lbtype)
	{
	}
	override protected void Execute()
	{
		if(AddUsersToStat(6,SpecialAttribMask.Rating,2))
		{
			LBRequest = new XRLWebEnumLB(m_titleid,LBType,1,(byte)0,10);
			response = LBRequest.Execute();
			if(VerifyResponse())
			{
				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				ResultCode=TEST_RESULTS.FAILED;
			}
		}
	}
	protected bool VerifyResponse()
	{
		if(response.xResult ==XResult.S_OK)
		{
			if(response.RepUserLBLen<=0)
				return false;
			for(int idx=0;idx<response.RepUserLBLen;idx++ )
			{
				// check for rank.
				if(ulist[idx].user != response.RepUserLB[idx].UserID)
				{
					// test failed Users  different.
					return false;
				}

				XRLAttList  tempList =response.RepUserLB[idx].Attr;
				for(int index =0; index < tempList.SubAttrSize ;index++)
				{
					XrlSubAttr[] temp  = SetReq.SetReq[idx].SubAttr;
					for(int v=0;v<temp.Length;v++)
					{
						if(tempList.SubAttr[index].Info.ID==1 ||tempList.SubAttr[index].Info.ID==2)
						{
							System.Console.WriteLine("Null attributes returned");
							return false;
						}
						if(tempList.SubAttr[index].Info.ID==temp[v].Info.ID)
						{
							if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Long)
							{
								XrlAttrUInt tempint= (XrlAttrUInt)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrUInt)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
							else if (tempList.SubAttr[index].Info.Type==(byte)AttrType.LongLong)
							{
								XrlAttrULong tempint= (XrlAttrULong)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrULong)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
							else if (tempList.SubAttr[index].Info.Type==(byte)AttrType.Double)
							{
								XrlAttrDouble tempint= (XrlAttrDouble)(tempList.SubAttr[index].Data);
								if(tempint.Data != ((XrlAttrDouble)temp[v].Data).Data)
								{
									System.Console.WriteLine("Attribute Data does not match");
									return false;
								}
								break;
							}
						}
					}
				}
			}
		}
		return true;
	}

}

class SFDWebEnumInValidTitle : SFDWebEnumByPos
{

	public SFDWebEnumInValidTitle():base(9999,10)
	{
		StartPos=1;
		recCount=100;	
	}

	protected override bool VerifyResponse()
	{
		if(response.xResult !=XResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD)
		{
			return false;

		}
		return true;
	}

		
}

class SFDWebEnumInValidLeaderBoard: SFDWebEnumByPos
{
	public SFDWebEnumInValidLeaderBoard():base(21,999)
	{
		StartPos=1;
		recCount=100;	
	}

	protected override bool VerifyResponse()
	{
		if(response.xResult !=XResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD)
		{
			return false;

		}
		return true;
	}
}

class SFDWebEnumLBTop100 :  SFDWebEnumByPos
{
	public SFDWebEnumLBTop100(uint titleid, uint lbtype): base(titleid,lbtype)
	{
		StartPos=1;
		recCount=100;
	}
}

class SFDWebEnumRec500TO600:  SFDWebEnumByPos
{
	public SFDWebEnumRec500TO600(uint titleid, uint lbtype): base(titleid,lbtype)
	{
		StartPos=500;
		recCount=100;
	}
}

class SFDWebEnumByPos : TestBase
{
	protected XRLWebEnumLB LBRequest;
	protected  XRLWebEnumLBResponse response;
	protected uint Title_id;
	protected uint LB_Type;
	//ulong UserId;
	protected uint StartPos;
	protected uint recCount;
	
	public SFDWebEnumByPos(uint titleid, uint lbtype)
	{
		Title_id= 	titleid;
		LB_Type = lbtype;
		
	}
	public SFDWebEnumByPos(uint titleid, uint lbtype,uint start,uint count)
	{
		Title_id= 	titleid;
		LB_Type = lbtype;
		StartPos=start;
		recCount=count;

		
	}

	
	protected void  BuildRequest()
	{
		// this should get the top 100  rec

		CV2Helper.InitStatProxy(Title_id,LB_Type);

		LBRequest = new XRLWebEnumLB(Title_id,
				LB_Type,
				StartPos,
				(byte)0,
				recCount);
		
	}
	protected virtual bool VerifyResponse()
	{
		if(response.xResult ==XResult.S_OK)
		{
			if(recCount ==response.RepUserLBLen )
			{
				for(int idx=0;idx<recCount;idx++ )
				{
					// check for rank.
					ulong rank = CV2Helper.gstatsSQL.GetRankOfUser(response.RepUserLB[idx].UserID);
					if(rank != response.RepUserLB[idx].Rank)
					{
						// test failed rank different.
						return false;
					}
				}
			}
			else
				return false;


		}
		return true;
	}

	public XRLWebEnumLBResponse  run()
	{
		BuildRequest();
		// execute and get response
		response = LBRequest.Execute();
		return response;
	}

	override protected void Execute()
	{
			
		run();
		if(VerifyResponse())
		{
			ResultCode=TEST_RESULTS.PASSED;
		}
		else
		{
			ResultCode=TEST_RESULTS.FAILED;
		}

		
	}


}

class SFDWebEnumByUser : TestBase
{
	protected XRLWebEnumLB LBRequest;
	protected XRLWebEnumLBResponse response;
	protected uint Title_id;
	protected uint LB_Type;
	protected ulong UserId=0;
	protected uint recCount=100;
	
	public SFDWebEnumByUser(uint titleid, uint lbtype)
	{
		Title_id= 	titleid;
		LB_Type = lbtype;
		
		
	}

	
	protected void  BuildRequest()
	{
		CV2Helper.InitStatProxy(Title_id,LB_Type);
		UserId=CV2Helper.gstatsSQL.GetUserAtRank(270);
		// this should get the top 100  rec
		LBRequest = new XRLWebEnumLB(Title_id,
			LB_Type,
			UserId,
			(byte)1,
			recCount);
		
	}
	protected bool VerifyResponse()
	{
		if(response.xResult ==XResult.S_OK)
		{
			if(recCount ==response.RepUserLBLen )
			{
				for(int idx=0;idx<recCount;idx++ )
				{
					// check for rank.
					if(idx==0)
					{
						if( response.RepUserLB[idx].Rank != 201)
							return false;
					}
					ulong rank = CV2Helper.gstatsSQL.GetRankOfUser(response.RepUserLB[idx].UserID);
					if(rank != response.RepUserLB[idx].Rank)
					{
						// test failed rank different.
						return false;
					}
				}
			}


		}
		return true;
	}

	override protected void Execute()
	{
			
		BuildRequest();
		
		// execute and get response
		response = LBRequest.Execute();
		if(VerifyResponse())
		{
			ResultCode=TEST_RESULTS.PASSED;
		}
		else
		{
			ResultCode=TEST_RESULTS.FAILED;
		}

		
	}

	

}

class CV2Helper
{
		
	public static StatsProxy gstatsSQL=null;
	public static int puidindex=1;
		
	public CV2Helper()
	{
		// 
		// TODO: Add constructor logic here
		//
	}

	static public ulong GenerateRandomPUID()
	{
			
		ulong qwUserId = (ulong) Interlocked.Increment(ref puidindex) ;
				
		if(puidindex >=200000)
		{
			puidindex=0;
		}
		
		return (qwUserId);//+puid);
	}


	public static void InitStatProxy(uint title, uint lbtype)
	{
		if(gstatsSQL ==null)
		{
			gstatsSQL = new StatsProxy(title,lbtype);
			gstatsSQL.GetUsers(1000);
		}
		//gstatsSQL.GetUsers(50);
	}
		
		
		
}

class XboxUser
{
	public ulong m_puid;
	public string m_gamertag;
		
	public ulong m_rank;

	public XboxUser(ulong puid,string gamerTg,ulong rank)
	{	
		m_puid=puid;
		m_gamertag=gamerTg;
		m_rank = rank;
	}
	public XboxUser(ulong puid,string gamerTg)
	{
		m_puid=puid;
		m_gamertag=gamerTg;
		m_rank = 0;
	}
}

class StatsProxy
{
	public uint TitleID;
	public uint LBtype;
	protected XboxUser[] users;
	static public Random RandGen=new System.Random(200);

	public XboxUser[] GetUserList(int size)
	{
		XboxUser[] templist = new XboxUser[size];
		for(int i=0;i<size;i++)
		{
			templist[i] = users[i];
				
		}
		return templist;
	}

	public XboxUser[] GetRandomList(int size)
	{
		XboxUser[] templist = new XboxUser[size];
		for(int i=0;i<size;i++)
		{
			int tmp=RandGen.Next(users.Length);
			try
			{
				templist[i] = users[tmp];
			}
			catch(Exception e)
			{
				System.Console.WriteLine(e.ToString());
			}
		}
		return templist;
	}

	public StatsProxy(uint title , uint lbtype)
	{
		TitleID= title;
		LBtype =lbtype;
		DBHelper tmp= new DBHelper ();

		tmp.CreateV2LB((int)TitleID,(int)LBtype,0,0,0,0,0);
		DBHelper.ResetTile(TitleID);

	}
	public ulong GetUserAtRank(ulong rank)
	{

		if(rank <(ulong)users.Length)
		{
			return users[rank-1].m_puid;
		}
		return 0;
	}

	public string GetGamerTagAtRank(ulong rank)
	{

		if(rank <(ulong)users.Length+1)
		{
			return users[rank-1].m_gamertag;
		}
		return "";
	}

	public ulong GetRankOfUser(ulong user)
	{
		for(int i=0;i< users.Length;i++)
		{
			if(users[i].m_puid==user)
				return users[i].m_rank;
		}
		return (0);
	}

	public void GetUsers(int count)
	{
		ulong basepuid = 9999999;
		users= new XboxUser[count];
		string gamertagbase = "WebTestUser";

		for(int i=0;i<count;i++)
		{
			ulong j= (ulong)i+1;
			users[i]= new XboxUser(basepuid+j,gamertagbase+(j),j);
		}
		Filldata(users);


	}
	/*
	public void Filldata64ATT(XboxUser[] XUsers, uint title,uint lbtype)
	{

		users =XUsers;
		DBHelper.ResetTile(title);
		Thread.Sleep(400);

		ulong rating=110000;

			
			
		for( int count=0;count <XUsers.Length;count=count+4)
		{
			ulong userPuid1 = XUsers[count].m_puid;
			ulong userPuid2 = XUsers[count+1].m_puid;
			ulong userPuid3 = XUsers[count+2].m_puid;
			ulong userPuid4 = XUsers[count+3].m_puid;
									
			XRLSetRequest SetReq= new XRLSetRequest(title,4);
			SetReq.AddSetData(lbtype,userPuid1,64,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(lbtype,userPuid2,64,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(lbtype,userPuid3,64,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(lbtype,userPuid4,64,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
					
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult ==XResult.S_OK)
			{
				// add to map
				// does nothing right now because the rank of the uesr can be calculated by sbustracting the start user fromthe given use.
			}
			else
			{
				System.Console.WriteLine("failed to add user record in stats");
			}
		}

				
	}
	*/

	public void Filldata(XboxUser[] XUsers)
	{

		users =XUsers;
		DBHelper.ResetTile(TitleID);
		Thread.Sleep(400);

		ulong rating=110000;

			
			
		for( int count=0;count <XUsers.Length;count=count+4)
		{
			ulong userPuid1 = XUsers[count].m_puid;
			ulong userPuid2 = XUsers[count+1].m_puid;
			ulong userPuid3 = XUsers[count+2].m_puid;
			ulong userPuid4 = XUsers[count+3].m_puid;
					
			XRLSetRequest SetReq= new XRLSetRequest(TitleID,4);
			SetReq.AddSetData(LBtype,userPuid1,5,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(LBtype,userPuid2,5,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(LBtype,userPuid3,5,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
			SetReq.AddSetData(LBtype,userPuid4,5,SpecialAttribMask.Rating,(ulong)rating);
			rating=rating-10;
					
			XRLSetResponse response = SetReq.Execute();
			if(response.xResult ==XResult.S_OK)
			{
				// add to map
				// does nothing right now because the rank of the uesr can be calculated by sbustracting the start user fromthe given use.
			}
			else
			{
				System.Console.WriteLine("failed to add user record in stats");
			}
		}

				
	}
	
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\AddUserStats.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GUserAdd : TestNode
    {
        public bool IsXenonClient;

        public GUserAdd(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TCSAddwithNoData(50));
            AddChild(new TCSIncrementStats(50));
            AddChild(new TCSPlayerIncrementPositive(50));
            AddChild(new TCSPlayerIncrementNegative(50));
            AddChild(new TCSPlayerIncrementExisitng(50));
            AddChild(new TCSPlayerIncrementTypeMismatch(50));
            AddChild(new TCSPlayerIncrementRatingOnly(50));
            AddChild(new TCSPlayerIncrementInvalidAtt(50));
        }

        public override void PreRun()
        {
            foreach (PlayerTest ptb in Children)
            {
                if (IsXenonClient)
                    ptb.IsXenon = true;
            }
        }
    }

    class TCSPlayerIncrementInvalidAtt : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)SpecialAttrib.Rank, (double)5 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)67, (double)2.2, (short)11, (long)50 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;

        public TCSPlayerIncrementInvalidAtt(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSPlayerIncrementRatingOnly : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)500 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)-10 });
        StatsPlayerAdd _data3 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)40 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;

        public TCSPlayerIncrementRatingOnly(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
            _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req3.AddProcs(_data3.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[3];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSPlayerIncrementTypeMismatch : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)12, (double)11.1, (short)SpecialAttrib.Rating, (long)5 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (double)2.2, (short)11, (long)50 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;

        public TCSPlayerIncrementTypeMismatch(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSPlayerIncrementExisitng : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)12, (double)11.1, (short)SpecialAttrib.Rating, (long)5 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)20, (int)10 });
        StatsPlayerAdd _data3 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)20, (int)9, (short)10, (int)200 });
        StatsPlayerAdd _data4 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)20, (int)15, (short)12, (double)1.1, (short)11, (long)5, (short)10, (int)19 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        RequestBuilder _Req4 = null;

        public TCSPlayerIncrementExisitng(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
            _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req3.AddProcs(_data3.Proc);
            _Req4 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req4.AddProcs(_data4.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[4];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();
            temp[3] = _Req4.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSPlayerIncrementNegative : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)12, (double)11.1 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)-10, (short)11, (long)50, (short)12, (double)-21.1 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;

        public TCSPlayerIncrementNegative(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSPlayerIncrementPositive : PlayerTest
    {
        StatsPlayerAdd _data1 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)12, (double)11.1 });
        StatsPlayerAdd _data2 = new StatsPlayerAdd(1, 501, 0, new object[] { (short)10, (int)10, (short)11, (long)50, (short)12, (double)11.1 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;

        public TCSPlayerIncrementPositive(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSIncrementStats : PlayerTest
    {
        PlayerAdd3Att _data1 = new PlayerAdd3Att(1, 504);
        PlayerAdd3Att _data2 = new PlayerAdd3Att(1, 504);
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;

        public TCSIncrementStats(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSAddwithNoData : PlayerTest
    {
        PlayerAdd3Att _data1 = new PlayerAdd3Att(1, 700);
        RequestBuilder _Req1 = null;
        public TCSAddwithNoData(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class PlayerAdd3Att : StatsPlayerAdd
    {
        public PlayerAdd3Att(int lbid, long rating) 
            : base(lbid, 501, 0, new object[] { (short)10, (int)5001, (short)11, (long)5002, (short)12, (double)50.03, SpecialAttrib.Rating, (long)rating })
        { }

        public PlayerAdd3Att(int lbid, ulong u, long rating)
            : base(lbid, u, 0, new object[] { (short)10, (int)5001, (short)11, (long)5002, (short)12, (double)50.03, SpecialAttrib.Rating, (long)rating })
        { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\Arbitration.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Arbitration;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;
using xonline.common.config;

namespace StatsFD
{
	class GArbitration :TestNode
	{
		public GArbitration()
		{
			AddChild(new TCStatsPostPLayerELOArb());
			AddChild(new TCStatsPostTeamELOArb());
		}
	}

	//XUser[] temp = new XUser[]{new XUser(501,new ulong[]{teammask+501}),new XUser(502,new ulong[]{teammask+502}),new XUser(601,new ulong[]{teammask+601}),new XUser(602,new ulong[]{teammask+602})};
	
    class TCStatsPostTeamELOArb :ArbitrationTest
	{
		RequestBuilder _Req1;
		public static ulong teammask = 0xFE00000000000000;

		public TCStatsPostTeamELOArb():base(new LeaderboardInfo[]{new LeaderboardInfo(1,"ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:10,100:5,500:2")})
		{

			XUser[] temp = new XUser[]{new XUser(501,new ulong[]{teammask+501}),new XUser(502,new ulong[]{teammask+502}),new XUser(601,new ulong[]{teammask+601}),new XUser(602,new ulong[]{teammask+602})};
			_Req1 = new RequestBuilder((uint)TitleID,temp,false,true);
			StatsPlayerElo _data1= new StatsPlayerElo((int)1002,teammask+501,teammask+502,new object[]{(double)0.0,(double)1.0,(double)0.0});
			_Req1.AddProcs(_data1.Proc);

		}

		override protected void Run()
		{
			ArbitrationSession ArbSession= new ArbitrationSession(ArbitrationSession.SessionType.Stats,(uint)TitleID);
			// add user 501 with team teammask+501.
			ArbSession.AddUser(501,new ulong[]{teammask+501});
			// add user 502 with team teammask+502.
			ArbSession.AddUser(502,new ulong[]{teammask+502});

			ArbSession.RegisterParticipants();
			StatsPostReq req =_Req1.GetPostData();
			ArbSession.ReportSingleResult((byte[])req.data);

			// post the stats to inmemory db and verify.

			//StatsPostReq[] temp =new StatsPostReq[1];
			//temp[0]= _data1.GetPostData();
			//g_Statobj.TManager.ExecuteAndVerify(temp,VerifyFlags.Player);

			Thread.Sleep(1000);
			uint HResultIM =g_Statobj.TManager.PostTOStatsIMDB(req);
			g_Statobj.TManager.VerifyEnumPlayers(req.data.TitleID,false);
		}
	}

	class TCStatsPostPLayerELOArb :ArbitrationTest
	{
		MultiPlayerElo _data1;
		public TCStatsPostPLayerELOArb():base(new LeaderboardInfo[]{new LeaderboardInfo(1,"ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:10,100:5,500:2")})
		{
			_data1 = new MultiPlayerElo((int)TitleID,1,8,500);
		}

		override protected void Run()
		{
			ArbitrationSession ArbSession= new ArbitrationSession(ArbitrationSession.SessionType.Stats,(uint)TitleID);
			for(int i=0;i<_data1.Players.Length;i++)
				ArbSession.AddUser(_data1.Players[i]);
			ArbSession.RegisterParticipants();
			StatsPostReq req =_data1.GetPostData();
			ArbSession.ReportSingleResult((byte[])req.data);

			// post the stats to inmemory db and verify.

			Thread.Sleep(1000);
			uint HResultIM =g_Statobj.TManager.PostTOStatsIMDB(req);
			g_Statobj.TManager.VerifyEnumPlayers(req.data.TitleID,false);

		}

	}

	class ArbitrationTest:TestBase
	{
		protected int TitleID =50;
		protected LeaderboardInfo [] LBid;

		public static TitleTrustConstants myTitleTrustConstants = new TitleTrustConstants(50,1.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,0.25,2.0,4.0,2592000,120,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1L,1L,1L,1L,0L,0L,0L,0L,1,2.0,8.0,16.0,32.0,4.0,0.0,0.0,0.0,1.0,8,4,2,1,1,2,4,8,new DateTime(DateTime.Now.Ticks));

		public ArbitrationTest( LeaderboardInfo[] lbids)
		{
			LBid =lbids;
		}

		new virtual protected void Run()
		{ }

		override protected void Execute()
		{
			DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats,true);
			db.ConfigureTitle(TitleID,LBid);
			// create title in arbitration.


			if (false==UodbWS.SetTitleTrustConstants(myTitleTrustConstants))
				Console.WriteLine("Unable to create/update my title id in UODB");

			//Use management command to reload title constants

			Global.XEnv.ExecuteXmgmtCommand(Interface.xarbInh,"exec :xarbinh ReloadTitleParameters");

			Run();
			ResultCode=TEST_RESULTS.PASSED;
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\Common.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GAdditional : TestNode
    {
        public GAdditional()
        {
            // Following Test cases are for INT type.
            AddChild(new TCGetLeaderboardSize(50));
            AddChild(new TCEnumLeaderboardSize(50));

            AddChild(new TCStatsPostAllQualifyAttArb(50));
            AddChild(new TCStatsPostAllQualifyAtt(50));
            AddChild(new TCStatsPostOnly1QualifyAtt(50));

            AddChild(new TCInvalidLBidPlayer(50));

            AddChild(new TCInvalidTitlePlayer(50));


            AddChild(new TCInvalidRequestsToArbitratedPlayerLB(50));

            AddChild(new TCInvalidELORequestsToPlayerLB(50));
            AddChild(new TC100UserArbonIntPort(50));
        }
    }

    class TC100UserArbonIntPort : PlayerTest
    {
        RequestBuilder _Req = null;

        public TC100UserArbonIntPort(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", (byte)0, (byte)1) })
        {
            _Req = new RequestBuilder();
            // change to 100
            ulong[] users = new ulong[100];

            for (int i = 0; i < 100; i++)
            {
                users[i] = (ulong)(600 + i);
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);

            }

            _Req.Builder(title, users, false, false);

        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, this.LBid);
            //g_Statobj.TManager.ExecuteAndVerify(temp,VerifyFlags.Player);
        }
    }

    class TCInvalidELORequestsToPlayerLB : PlayerTest
    {
        StatsPostReq[] PostReq = new StatsPostReq[1];

        public TCInvalidELORequestsToPlayerLB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(15, "", (byte)0, (byte)0) })
        {

            // non arbitrated player request Request.
            PlayerElo _data1 = new PlayerElo(15);
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);

            PostReq[0] = _Req1.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(PostReq, VerifyFlags.Player);
        }
    }

    class TCInvalidRequestsToArbitratedPlayerLB : PlayerTest
    {
        StatsPostReq[] PostReq = new StatsPostReq[1];
        public TCInvalidRequestsToArbitratedPlayerLB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(12, "", 0, (byte)1) })
        {

            // non arbitrated player request Request.
            PlayerRep3Att _data1 = new PlayerRep3Att(12, 501, 700);
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);

            PostReq[0] = _Req1.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerifyBadReq(PostReq, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);
        }
    }

    class TCInvalidTitlePlayer : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[3];
        public TCInvalidTitlePlayer(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            // Replace.
            RequestBuilder _Req1 = new RequestBuilder(title + 10, new ulong[] { 501 }, false);
            PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
            _Req1.AddProcs(_data1.Proc);
            temp[0] = _Req1.GetPostData();

            // Increment.
            RequestBuilder _Req2 = new RequestBuilder(title + 10, new ulong[] { 501 }, false);
            PlayerAdd3Att _data2 = new PlayerAdd3Att(1, 700);
            _Req2.AddProcs(_data2.Proc);
            temp[1] = _Req2.GetPostData();

            // Condition.
            RequestBuilder _Req3 = new RequestBuilder(title + 10, new ulong[] { 501 }, false);
            ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
            StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
            _Req3.AddProcs(_data3.Proc);
            _Req3.AddProcs(_data4.Proc);
            temp[2] = _Req3.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCInvalidLBidPlayer : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[3];
        public TCInvalidLBidPlayer(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            // Replace.
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            PlayerRep3Att _data1 = new PlayerRep3Att(900, 700);
            _Req1.AddProcs(_data1.Proc);
            temp[0] = _Req1.GetPostData();

            // Increment.
            RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            PlayerAdd3Att _data2 = new PlayerAdd3Att(900, 700);
            _Req2.AddProcs(_data2.Proc);
            temp[1] = _Req2.GetPostData();

            // Condition.
            RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
            ConditionalPlayer _data3 = new ConditionalPlayer(900, 501, StatContitions.Equal, 10, (int)555);
            StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
            _Req3.AddProcs(_data3.Proc);
            _Req3.AddProcs(_data4.Proc);
            temp[2] = _Req3.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCStatsPostOnly1QualifyAtt : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[4];

        public TCStatsPostOnly1QualifyAtt(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(9001, "", true, 0) })
        {
            // Request containing 2 users with replace.

            for (int j = 0; j < 3; j++)
            {
                RequestBuilder _Req1 = new RequestBuilder();
                ulong[] users = new ulong[4];
                for (int i = 0; i < 4; i++)
                {
                    users[i] = 500 + (ulong)i;
                    PlayerRep3Att _data1 = new PlayerRep3Att(9001, 500 + (ulong)i, 900 - (i * 10));
                    _Req1.AddProcs(_data1.Proc);
                }
                _Req1.Builder(title, users, false, false);
                temp[j] = _Req1.GetPostData();
            }
            // Request containing 1 users with Increment procedure.
            PlayerRep3Att _data2 = new PlayerRep3Att(9001, 601, 100);
            PlayerRep3Att _data3 = new PlayerRep3Att(9001, 602, 900);
            RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 601, 602 }, false);
            _Req2.AddProcs(_data2.Proc);
            _Req2.AddProcs(_data3.Proc);
            temp[3] = _Req2.GetPostData();
            // Request with ELo
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, false);
        }
    }

    class TCStatsPostAllQualifyAttArb : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[3];

        public TCStatsPostAllQualifyAttArb(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(9003, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10", true, (byte)0) })
        {
            // Request containing 2 users with replace.
            PlayerRep3Att _data1 = new PlayerRep3Att(9003, 501, 700);
            PlayerRep3Att _data2 = new PlayerRep3Att(9003, 502, 800);
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, true);
            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
            temp[0] = _Req1.GetPostData();
            // Request containing 1 users with Increment procedure.
            PlayerAdd3Att _data3 = new PlayerAdd3Att(9003, 501, 100);
            RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, true);
            _Req2.AddProcs(_data3.Proc);
            temp[1] = _Req2.GetPostData();
            // Request with ELo
            PlayerElo _data4 = new PlayerElo(9003, 501, 502);
            RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501, 502 }, true);
            _Req3.AddProcs(_data4.Proc);
            temp[2] = _Req3.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, false);
        }
    }

    class TCStatsPostAllQualifyAtt : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[3];

        public TCStatsPostAllQualifyAtt(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(9003, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10", true, 0) })
        {
            // Request containing 2 users with replace.
            PlayerRep3Att _data1 = new PlayerRep3Att(9003, 501, 700);
            PlayerRep3Att _data2 = new PlayerRep3Att(9003, 502, 800);
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
            temp[0] = _Req1.GetPostData();
            // Request containing 1 users with Increment procedure.
            PlayerAdd3Att _data3 = new PlayerAdd3Att(9003, 501, 100);
            RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data3.Proc);
            temp[1] = _Req2.GetPostData();
            // Request with ELo
            PlayerElo _data4 = new PlayerElo(9003, 501, 502);
            RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req3.AddProcs(_data4.Proc);
            temp[2] = _Req3.GetPostData();
        }

        override protected void Run()
        {
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, false);
        }
    }

    class TCGetLeaderboardSize : PlayerTest
    {
        RequestBuilder _Req = null;
        StatsPostReq[] temp = new StatsPostReq[200];

        public TCGetLeaderboardSize(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            for (int j = 0; j < 200; j++)
            {
                _Req = new RequestBuilder();
                ulong[] users = new ulong[4];

                for (int i = 0; i < 4; i++)
                {
                    users[i] = (ulong)((6 * (j)) + i + 800);
                    StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)((6 * (j)) + i + 800), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                    _Req.AddProcs(_data.Proc);
                }

                _Req.Builder(title, users, false, false);
                temp[j] = _Req.GetPostData();
            }
        }

        override protected void Run()
        {
            // build StatsPostReq
            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(temp, VerifyFlags.Player, 5);

            // get  LEaderboardsize
            TitleLbKey tlbkey = new TitleLbKey((uint)TitleID, 1);
            PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];

            XRLGetRequest _req = new XRLGetRequest(1);
            _req.AddGetData((uint)TitleID, 0, 1);
            XRLGetResponse _resp = _req.Execute();

            int recCount = 0;
            if (_resp.RespData[0].AttList.SubAttr[0].Data != null)
                recCount = (int)((XrlAttrUInt)_resp.RespData[0].AttList.SubAttr[0].Data).Data;

            if (recCount != lb._rankedEntries.Count)
                throw new StatsException(707, "verify: SpecialAttrib.LeaderboardSize expected :" + lb._rankedEntries.Count + "Server returned :" + recCount);
        }
    }

    class TCEnumLeaderboardSize : PlayerTest
    {
        RequestBuilder _Req = null;
        StatsPostReq[] temp = new StatsPostReq[200];

        public TCEnumLeaderboardSize(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            for (int j = 0; j < 200; j++)
            {
                _Req = new RequestBuilder();
                ulong[] users = new ulong[4];

                for (int i = 0; i < 4; i++)
                {
                    users[i] = (ulong)((6 * (j)) + i + 800);
                    StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)((6 * (j)) + i + 800), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                    _Req.AddProcs(_data.Proc);


                }

                _Req.Builder(title, users, false, false);
                temp[j] = _Req.GetPostData();
            }
        }
        override protected void Run()
        {

            // build StatsPostReq
            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(temp, VerifyFlags.Player, 5);

            // get  LEaderboardsize
            TitleLbKey tlbkey = new TitleLbKey((uint)TitleID, 1);
            PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];

            ushort[] attribs = new ushort[1];
            attribs[0] = SpecialAttrib.LeaderboardSize;

            XRLEnumLBRequest _req = new XRLEnumLBRequest(lb._uiTitleId, lb._uiLbId, (1), 0, 50, attribs);
            XRLEnumLBResponse _resp = _req.ExecuteEx();

            if (_resp.RepUserLB[0].AttList.SubAttr[0].Data != null)
                throw new StatsException(707, "verify: SpecialAttrib.LeaderboardSize expected null");

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\BugFixes.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.Utilities.AsyncUtils;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class BugFixes : TestNode
    {
        public BugFixes()
        {
            AddChild(new TCLBProblemReqwithnorating1(79));
            AddChild(new TCHalfLBCreated(79));

            //AddChild(new TCLBProblemReqwithnorating2(79));

            AddChild(new ReadPuid0(79));
            
            AddChild(new LBWith128RatingTies(81));
        }
    }

    class ReadPuid0 : PlayerTest
    {
        PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
        RequestBuilder _Req1 = null;
        public ReadPuid0(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            // trying reading with zero puid.

            XRLGetRequest greq = new XRLGetRequest(1);
            greq.AddGetData((uint)TitleID, 0, LBid[0]._uiLbId, 2, SpecialAttribMask.Rating);

            g_Statobj.TManager.VerifyGetPlayers(greq, HResult.S_OK);


        }
    }

    class TCHalfLBCreated : PlayerTest
    {
        RequestBuilder _Req = null;

        public TCHalfLBCreated(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", (byte)0, (byte)1) })
        {
            _Req = new RequestBuilder();
            // change to 100
            ulong[] users = new ulong[2];
            for (int i = 0; i < 2; i++)
            {
                users[i] = (ulong)(600 + i);
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);

            }
            _Req.Builder((uint)title, users, true, false);

        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }


        override protected void Execute()
        {
            DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
            db.HalfConfigureTitle(TitleID, LBid);

            Run();
            ResultCode = TEST_RESULTS.PASSED;

        }
    }

    class TCLBProblemReqwithnorating1 : TestBase
    {
        protected int TitleID;
        protected LeaderboardInfo[] LBid;

        public TCLBProblemReqwithnorating1(int title)
        {
            TitleID = title;
            LBid = new LeaderboardInfo[] { new LeaderboardInfo(11, "", 0, 0), new LeaderboardInfo(12, "", 0, 0), new LeaderboardInfo(13, "", 0, 0) };


        }

        void PopulateLb()
        {
            XRLSetRequest setreq = new XRLSetRequest((uint)TitleID, 3);
            setreq.AddSetData(LBid[0]._uiLbId, 5001, 3, SpecialAttribMask.Rating, 501);
            setreq.AddSetData(LBid[1]._uiLbId, 5001, 3, SpecialAttribMask.Null, 0);
            setreq.AddSetData(LBid[2]._uiLbId, 5001, 3, SpecialAttribMask.Rating, 501);

            XRLSetRequest setreq1 = new XRLSetRequest((uint)TitleID, 3);
            setreq1.AddSetData(LBid[0]._uiLbId, 5002, 3, SpecialAttribMask.Rating, 502);
            setreq1.AddSetData(LBid[1]._uiLbId, 5002, 3, SpecialAttribMask.Null, 0);
            setreq1.AddSetData(LBid[2]._uiLbId, 5002, 3, SpecialAttribMask.Rating, 502);

            XRLSetRequest setreq2 = new XRLSetRequest((uint)TitleID, 3);
            setreq2.AddSetData(LBid[0]._uiLbId, 5003, 3, SpecialAttribMask.Rating, 503);
            setreq2.AddSetData(LBid[1]._uiLbId, 5003, 3, SpecialAttribMask.Null, 0);
            setreq2.AddSetData(LBid[2]._uiLbId, 5003, 3, SpecialAttribMask.Rating, 503);

            g_Statobj.TManager.ExecuteAndVerify(new XRLSetRequest[] { setreq, setreq1, setreq2 }, true);
        }

        override protected void Execute()
        {
            DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
            db.ConfigureTitle(TitleID, LBid);

            PopulateLb();
            XRLEnumLBRequest _req = new XRLEnumLBRequest((uint)TitleID, LBid[0]._uiLbId, 1, 0, 10, 3, SpecialAttribMask.LeaderboardSize);
            XRLEnumLBResponse resp = g_Statobj.TManager.ExecuteAndVerifyEnumPlayers(_req, 3);

            if (resp.uiLbSize != 3)
                throw new StatsException(707, "verify: EnumUserStats Expected Leaderboard Size: 3 Recived :" + resp.uiLbSize);

            ResultCode = TEST_RESULTS.PASSED;


        }
    }


    // this test case is a one-off, used to reproduce the leaderboard corruption bug (LSG:4258)
    // In order to use this test case to reproduce the bug, you must use a build of the leaderboard
    // service that has dwUntier reduced to a byte.  (instead of a dword or qword)
    // Please excuse the hardcoded ID's... if all goes well noone will ever use this test case again.
    [TestCase, Ignore, Description("RevokeUserFile InValid: revoke expired file")]
    class LBWith128RatingTies : PlayerTest
    {

        public LBWith128RatingTies()
            : base(81, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
        }
        
        public LBWith128RatingTies(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
        }

        override protected void Run()
        {
            RequestBuilder Req1 = null;
            StatsPostReq[] temp = new StatsPostReq[256];

            for(int i = 0;i<128;i++)
            {
                Req1 = new RequestBuilder((uint)TitleID, new ulong[] { 501+(ulong)i }, false);
                StatsPlayerReplace data = new StatsPlayerReplace((int)LBid[0]._uiLbId, (ulong)501+(ulong)i, 0, new object[] { (short)SpecialAttrib.Rating, (long)5000+i });
                Req1.AddProcs(data.Proc);
                temp[i] = Req1.GetPostData();
            }

            for(int i = 0;i<128;i++)
            {
                Req1 = new RequestBuilder((uint)TitleID, new ulong[] { 628-(ulong)i }, false);
                StatsPlayerReplace data = new StatsPlayerReplace((int)LBid[0]._uiLbId, (ulong)628-(ulong)i, 0, new object[] { (short)SpecialAttrib.Rating, (long)5000+i });
                Req1.AddProcs(data.Proc);
                temp[i+128] = Req1.GetPostData();
            }
            
            
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
                try
                {
                    g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
                }
                catch(Exception)
                {
                    // swallow the exceptions that will be thrown... they're telling us that we just corrupted the leaderboard, which is what we wanted to do.
                }

            XRLGetRequest greq= new XRLGetRequest(1);
            greq.AddGetData((uint)TitleID,628,LBid[0]._uiLbId,2,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);

            greq= new XRLGetRequest(1);
            greq.AddGetData((uint)TitleID,501,LBid[0]._uiLbId,2,SpecialAttribMask.Rating);
            g_Statobj.TManager.VerifyGetPlayers(greq,HResult.S_OK);


            ResultCode = TEST_RESULTS.PASSED;

        }
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\LoadBalancing.cs ===
using System;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

using xonline.common.config;

namespace StatsFD
{
    class GLoadBalancing : TestNode
    {
        public GLoadBalancing()
        {
            AddChild(new TC1UStatsPost2LBDiffServer(50));
            AddChild(new TC1UReset2LBDiffServer(50));
            AddChild(new TC1UGet2LBDiffServer(50));
        }
    }

    class LoadBalancingTestBase : PlayerTest
    {
        public LoadBalancingTestBase(int title, LeaderboardInfo[] lbids) : base(title, lbids) { }

        override protected void Execute()
        {
            if (Global.XEnv.GetInterface(Interface.lbsvr).Length <= 1)
            {
                ResultCode = TEST_RESULTS.NOT_EXECUTED;
                return;
            }
            base.Execute();
        }
    }

    class TC1UGet2LBDiffServer : LoadBalancingTestBase
    {
        PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
        PlayerRep3Att _data2 = new PlayerRep3Att(99, 700);
        RequestBuilder _Req1 = null;
        public TC1UGet2LBDiffServer(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(99, "", 0, 0, 1) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);


            XRLGetRequest _req = new XRLGetRequest(2);
            _req.AddGetData((uint)TitleID, 501, 1);
            _req.AddGetData((uint)TitleID, 501, 99);
            XRLGetResponse _resp = _req.Execute();
            // do a get on both the user in a single request.
            if (_resp.RespDataLen != 2)
                throw new StatsException(707, "verify: EnumUserStats Expected Record count: 2 Recived :" + _resp.RespDataLen);

            if (_resp.RespData[0].Resphead.userPuid != 501)
                throw new StatsException(707, "verify: EnumUserStats Expected User: 501 Recived :" + _resp.RespData[0].Resphead.userPuid);
            if (_resp.RespData[0].Resphead.dwLeaderBoardType != 1)
                throw new StatsException(707, "verify: EnumUserStats Expected LBType: 1 Recived :" + _resp.RespData[0].Resphead.dwLeaderBoardType);


            if (_resp.RespData[1].Resphead.userPuid != 501)
                throw new StatsException(707, "verify: EnumUserStats Expected User: 502 Recived :" + _resp.RespData[1].Resphead.userPuid);

            if (_resp.RespData[1].Resphead.dwLeaderBoardType != 99)
                throw new StatsException(707, "verify: EnumUserStats Expected LBType: 1 Recived :" + _resp.RespData[1].Resphead.dwLeaderBoardType);



        }
    }

    class TC1UStatsPost2LBDiffServer : LoadBalancingTestBase
    {
        PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
        PlayerRep3Att _data2 = new PlayerRep3Att(99, 700);
        RequestBuilder _Req1 = null;
        public TC1UStatsPost2LBDiffServer(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(99, "", 0, 0, 1) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TC1UReset2LBDiffServer : LoadBalancingTestBase
    {
        PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
        PlayerRep3Att _data2 = new PlayerRep3Att(99, 700);
        PlayerRep3Att _data3 = new PlayerRep3Att(1, 502, 800);
        PlayerRep3Att _data4 = new PlayerRep3Att(99, 502, 900);

        RequestBuilder _Req1 = null;
        public TC1UReset2LBDiffServer(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(99, "", 0, 0, 1) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
            _Req1.AddProcs(_data3.Proc);
            _Req1.AddProcs(_data4.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            //Reset User and make sure the user is removed from LB
            XRLResetUser req = new XRLResetUser((uint)TitleID, 501, 0);
            XRLResponse resp = req.Execute();

            if (HResult.Succeeded(resp.xResult))
            {
                // Emun both both ld and make sure that 501  is deleted.
                XRLEnumLBRequest _req = new XRLEnumLBRequest((uint)TitleID, 1, 0, 0, 50, new ushort[] { 10 });
                XRLEnumLBResponse _resp = _req.ExecuteEx();

                if (_resp.RepUserLBLen != 1)
                    throw new StatsException(707, "verify: EnumUserStats Expected Record count: 1 Recived :" + _resp.RepUserLBLen);

                if (_resp.RepUserLB[0].Userdata.UserID != 502)
                    throw new StatsException(707, "verify: EnumUserStats Expected User: 502 Recived :" + _resp.RepUserLB[0].Userdata.UserID);

                XRLEnumLBRequest _req2 = new XRLEnumLBRequest((uint)TitleID, 99, 0, 0, 50, new ushort[] { 10 });
                XRLEnumLBResponse _resp2 = _req2.ExecuteEx();

                if (_resp2.RepUserLBLen != 1)
                    throw new StatsException(707, "verify: EnumUserStats Expected Record count: 1 Recived :" + _resp2.RepUserLBLen);

                if (_resp2.RepUserLB[0].Userdata.UserID != 502)
                    throw new StatsException(707, "verify: EnumUserStats Expected User: 502 Recived :" + _resp2.RepUserLB[0].Userdata.UserID);


            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\EloUsersStats.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GEloUsers : TestNode
    {
        public GEloUsers()
        {
            AddChild(new TCSEloSameUsers(50));
            AddChild(new TCSEloNewUser(50));
            AddChild(new TCSEloExistingUserBaseE(50));
            AddChild(new TCSElo1Existingnew1UserBaseE(50));
            AddChild(new TCSEloExistingUserBase10(50));
            AddChild(new TCSArbitratedEloMultUser(50));
            AddChild(new TCSEloUserValidOutCome(50));
            AddChild(new TCSEloUserValidModifier(50));
            AddChild(new TCSEloUserDiffModifierBucket1(50));
            AddChild(new TCSEloUserInvalidDiffModifierB2(50));
            AddChild(new TCSEloUserInvalidDiffBucket(50));
            AddChild(new TCSEloUserDiffBucket(50));
            AddChild(new TCSEloUserInValidModifier(50));
            AddChild(new TCSEloUserInValidOutCome(50));
            AddChild(new TCSEloUserInvalidLB(50));

            AddChild(new TCSEloInvalidwithonly1User(50));
        }
    }

    class TCSElo1Existingnew1UserBaseE : PlayerTest
    {
        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { (short)40, (int)50, SpecialAttrib.Rating, (long)1000 });
        PlayerElo _data2 = new PlayerElo(1, 501, 502);
        PlayerElo _data3 = new PlayerElo(1, 503, 501);
        StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 502, 0, new object[] { (short)40, (int)50 });
        StatsPlayerReplace _data5 = new StatsPlayerReplace(1, 503, 0, new object[] { (short)40, (int)50 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        public TCSElo1Existingnew1UserBaseE(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E= E;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
            _Req3 = new RequestBuilder(title, new ulong[] { 501, 503, 502 }, false);
            _Req3.AddProcs(_data3.Proc);
            _Req3.AddProcs(_data4.Proc);
            _Req3.AddProcs(_data5.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[3];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloInvalidwithonly1User : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(1, 501, 0);
        RequestBuilder _Req1 = null;
        public TCSEloInvalidwithonly1User(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSEloUserInvalidLB : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(10);
        RequestBuilder _Req1 = null;
        public TCSEloUserInvalidLB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSEloUserInValidModifier : PlayerTest
    {

        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        RequestBuilder _Req4 = null;
        public TCSEloUserInValidModifier(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)-0.01, (double)-0.01 });
            _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            StatsPlayerElo _data2 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)Double.MinValue, (double)Double.MinValue });
            _Req2 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
            StatsPlayerElo _data3 = new StatsPlayerElo(1, 501, 502, new object[] { (double)0.5, (double)1.01, (double)1.01 });
            _Req3 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req3.AddProcs(_data3.Proc);
            StatsPlayerElo _data4 = new StatsPlayerElo(1, 501, 502, new object[] { (double)0.5, (double)Double.MaxValue, (double)Double.MaxValue });
            _Req4 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req4.AddProcs(_data4.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[4];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();
            temp[3] = _Req4.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserInValidOutCome : PlayerTest
    {

        RequestBuilder[] _Req = new RequestBuilder[5];

        public TCSEloUserInValidOutCome(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            StatsPlayerElo _data1 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)-0.01, (double)1.0, (double)0.0 });
            _Req[0] = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req[0].AddProcs(_data1.Proc);
            StatsPlayerElo _data2 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)1.01, (double)1.0, (double)0.0 });
            _Req[1] = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req[1].AddProcs(_data2.Proc);
            StatsPlayerElo _data3 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)-0.0, (double)1.0, (double)0.0 });
            _Req[2] = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req[2].AddProcs(_data3.Proc);
            //Double.MinValue
            StatsPlayerElo _data4 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)Double.MinValue, (double)1.0, (double)0.0 });
            _Req[3] = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req[3].AddProcs(_data4.Proc);
            //			Double.MaxValue
            StatsPlayerElo _data5 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)Double.MaxValue, (double)1.0, (double)0.0 });
            _Req[4] = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req[4].AddProcs(_data5.Proc);


        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[_Req.Length];
            for (int i = 0; i < _Req.Length; i++)
                temp[i] = _Req[i].GetPostData();



            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserDiffBucket : PlayerTest
    {

        StatsPostReq[] temp = new StatsPostReq[3];

        public TCSEloUserDiffBucket(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:51,450:101,650:10") })
        {
            ///  put the users 501,601 in bucket 2.
            StatsPlayerElo[] _data = new StatsPlayerElo[2];
            _data[0] = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            _data[1] = new StatsPlayerElo(1, 601, 602, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            RequestBuilder _Req = new RequestBuilder((uint)title, new ulong[] { 501, 502, 601, 602 }, true);
            for (int i = 0; i < _data.Length; i++)
                _Req.AddProcs(_data[i].Proc);
            temp[0] = _Req.GetPostData();

            //send a req with different m for user iu1 in bucket 1  and user 2 in bucket 2.

            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)1, (double)1 });
            RequestBuilder _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, true);
            _Req1.AddProcs(_data1.Proc);
            temp[1] = _Req1.GetPostData();

            //send a req with different m for user iu1 in bucket 2  and user 2 in bucket 3.

            StatsPlayerElo _data2 = new StatsPlayerElo(1, 501, 601, new object[] { (double)1.0, (double)1, (double)1 });
            RequestBuilder _Req2 = new RequestBuilder((uint)title, new ulong[] { 501, 601 }, true);
            _Req1.AddProcs(_data2.Proc);
            temp[2] = _Req2.GetPostData();



        }
        override protected void Run()
        {

            // build StatsPostReq





            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserInvalidDiffBucket : PlayerTest
    {

        StatsPostReq[] temp = new StatsPostReq[3];

        public TCSEloUserInvalidDiffBucket(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:51,450:101,650:10") })
        {
            ///  put the users 501,601 in bucket 2.
            StatsPlayerElo[] _data = new StatsPlayerElo[2];
            _data[0] = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            _data[1] = new StatsPlayerElo(1, 601, 602, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            RequestBuilder _Req = new RequestBuilder((uint)title, new ulong[] { 501, 502, 601, 602 }, true);
            for (int i = 0; i < _data.Length; i++)
                _Req.AddProcs(_data[i].Proc);
            temp[0] = _Req.GetPostData();

            //send a req with different m for user iu1 in bucket 1  and user 2 in bucket 2.

            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)1.0, (double)0.5 });
            RequestBuilder _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, true);
            _Req1.AddProcs(_data1.Proc);
            temp[1] = _Req1.GetPostData();

            //send a req with different m for user iu1 in bucket 2  and user 2 in bucket 3.

            StatsPlayerElo _data2 = new StatsPlayerElo(1, 501, 601, new object[] { (double)1.0, (double)1.0, (double)0.5 });
            RequestBuilder _Req2 = new RequestBuilder((uint)title, new ulong[] { 501, 601 }, true);
            _Req1.AddProcs(_data2.Proc);
            temp[2] = _Req2.GetPostData();



        }
        override protected void Run()
        {

            // build StatsPostReq





            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserInvalidDiffModifierB2 : PlayerTest
    {

        StatsPostReq[] temp = new StatsPostReq[4];

        public TCSEloUserInvalidDiffModifierB2(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:51,450:101,625:10") })
        {
            ///  put the users 501,601 in bucket 2.
            StatsPlayerElo[] _data = new StatsPlayerElo[2];
            _data[0] = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            _data[1] = new StatsPlayerElo(1, 601, 602, new object[] { (double)1.0, (double)1.0, (double)1.0 });
            RequestBuilder _Req = new RequestBuilder((uint)title, new ulong[] { 501, 502, 601, 602 }, true);
            for (int i = 0; i < _data.Length; i++)
                _Req.AddProcs(_data[i].Proc);
            temp[0] = _Req.GetPostData();

            //send a req with different m for user in bucket 2.

            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 601, new object[] { (double)1.0, (double)1.0, (double)0.5 });
            RequestBuilder _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502, 601, 602 }, true);
            _Req1.AddProcs(_data1.Proc);
            temp[1] = _Req1.GetPostData();

            //move users 501 601 to bucket 3
            temp[2] = _Req.GetPostData();

            //send a req with different m for user in bucket 3.
            temp[3] = _Req1.GetPostData();


        }
        override protected void Run()
        {

            // build StatsPostReq





            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserDiffModifierBucket1 : PlayerTest
    {

        RequestBuilder _Req1 = null;

        public TCSEloUserDiffModifierBucket1(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)0.0, (double)0.0 });
            _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);

        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();



            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserValidModifier : PlayerTest
    {

        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        public TCSEloUserValidModifier(int title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            StatsPlayerElo _data1 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)0.0, (double)0.0 });
            _Req1 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            StatsPlayerElo _data2 = new StatsPlayerElo(1, 501, 502, new object[] { (double)1.0, (double)0.5, (double)0.5 });
            _Req2 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
            StatsPlayerElo _data3 = new StatsPlayerElo(1, 501, 502, new object[] { (double)0.5, (double)1.0, (double)1.0 });
            _Req3 = new RequestBuilder((uint)title, new ulong[] { 501, 502 }, false);
            _Req3.AddProcs(_data3.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[3];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloUserValidOutCome : PlayerTest
    {

        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        public TCSEloUserValidOutCome(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            StatsPlayerElo _data1 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)0.0, (double)1.0, (double)0.0 });
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            StatsPlayerElo _data2 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)1.0, (double)1.0, (double)0.0 });
            _Req2 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
            StatsPlayerElo _data3 = new StatsPlayerElo((int)1, 501, 502, new object[] { (double)0.5, (double)1.0, (double)0.0 });
            _Req3 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req3.AddProcs(_data3.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[3];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSArbitratedEloMultUser : PlayerTest
    {
        MultiPlayerElo _data1;
        MultiPlayerElo _data2;

        public TCSArbitratedEloMultUser(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:10,100:5,500:2") })
        {
            _data1 = new MultiPlayerElo((int)title, 1, 8, 500);
            _data2 = new MultiPlayerElo((int)title, 1, 16, 600);

        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _data1.GetPostData();
            temp[1] = _data1.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloExistingUserBaseE : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(1);
        PlayerElo _data2 = new PlayerElo(1);
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        public TCSEloExistingUserBaseE(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E= E;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloExistingUserBase10 : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(1);
        PlayerElo _data2 = new PlayerElo(1);
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        public TCSEloExistingUserBase10(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req2.AddProcs(_data2.Proc);
        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();


            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCSEloSameUsers : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(1, 601, 601);
        RequestBuilder _Req1 = null;
        public TCSEloSameUsers(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 601, 602, 0, 0 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCSEloNewUser : PlayerTest
    {
        PlayerElo _data1 = new PlayerElo(1);
        RequestBuilder _Req1 = null;
        public TCSEloNewUser(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "ELO_E=10;ELO_K=120;ELO_NEW=500;ELO_C=0:40,1000:20,1500:10") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501, 502 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class MultiPlayerElo
    {
        int PCount = 0;
        public ulong[] Players = null;
        RequestBuilder _Req = null;
        int lbid;
        Random rdm1;
        public MultiPlayerElo(int title, int LBid, int NoOfPlayers, ulong StartUser)
        {
            PCount = NoOfPlayers;
            Players = new ulong[PCount];
            lbid = LBid;

            for (ulong i = 0; i < (ulong)PCount; i++)
            {
                Players[i] = StartUser + i;
            }

            _Req = new RequestBuilder((uint)title, Players, true, false);
            rdm1 = new Random(unchecked((int)DateTime.Now.Ticks));


        }


        public StatsPostReq GetPostData()
        {
            // build a request...

            for (int i = 0; i < Players.Length; i++)
            {
                for (int j = i + 1; j < Players.Length; j++)
                {
                    double Cf = rdm1.NextDouble();
                    double mA = rdm1.NextDouble();
                    double mB = rdm1.NextDouble();

                    StatsPlayerElo tmp = new StatsPlayerElo(lbid, Players[i], Players[j], new object[] { Cf, mA, mB });
                    _Req.AddProcs(tmp.Proc);

                }
            }


            return _Req.GetPostData();
        }

    }

    class PlayerElo : StatsPlayerElo
    {
        public PlayerElo(int lbid) : base(lbid, 501, 502, new object[] { (double)1, (double).5, (double).5 }) { }

        public PlayerElo(int lbid, ulong u1, ulong u2)
            : base(lbid, u1, u2, new object[] { (double)1, (double).5, (double).5 })
        { }
        public PlayerElo(int lbid, ulong u1, ulong u2, double outcome, double m1, double m2)
            : base(lbid, u1, u2, new object[] { outcome, m1, m2 })
        { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\ReplaceUserStats.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GUserReplace : TestNode
    {
        public bool IsXenonClient;

        public GUserReplace(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TC1User5Att(50));
            AddChild(new TC60MUsr3Att1LB(50));
            AddChild(new TC60MUsr3Att1LB5SameRatingDiffReq(50));
            AddChild(new TC60MUsr3Att1LB4SameRatingOn47(50));
            AddChild(new TC1User64Att(50));
            AddChild(new TC2ReplaceUser10Att(50));
            AddChild(new TC100UserArbitrated1LB(50));
            AddChild(new TC100UserArbitrated3LB(50));
            AddChild(new TC2UserArbitrated1LB(0xFFFF0010));
            AddChild(new TC100UserArbitrated4LB(50));

            AddChild(new TC200Post4User1LB(50));
            AddChild(new TC1UserReplaceRatingOnly(50));
            AddChild(new TC1UserReplaceAttribOnly(50));
            AddChild(new TC1UsrRepAttribOnlyforExisitingUsr(50));
            AddChild(new TCReplaceExistingPlayer(50));
            AddChild(new TCReplaceExistingPlayerAttComb(50));
            AddChild(new TCReplacePlayerInvalidAttrib(50));

            AddChild(new TC1UserDuplicateAtt(50));
            AddChild(new TC1AttachmentSize(50));
            AddChild(new TC1AttachmentSizeMax(50));
            // AddChild(new TC1AttachmentSizeMaxP1(50));
        }

        public override void PreRun()
        {
            foreach (PlayerTest ptb in Children)
            {
                if (IsXenonClient)
                    ptb.IsXenon = true;
            }
        }
    }

    class TC1AttachmentSize : PlayerTest
    {
        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)56791, (short)11, (long)598762, (short)12, (double)50.03, SpecialAttrib.Rating, (long)7000, SpecialAttrib.AttachmentSize, (int)10 });
        RequestBuilder _Req1 = null;
        public TC1AttachmentSize(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", true, (byte)0) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            this.IsXenon = true;
        }

        public void verifyRead(StatsReadResponse resp, StatsReadRequest req)
        {
            int rowcount = req.Users.Length;
            int NoOfResults = req.Specs.Length;

            if (resp.ResultsLen != NoOfResults)
            {

                throw new StatsException(707, "verify: XeStatsRead Expected Resultset count: " + NoOfResults + " Recived :" + resp.ResultsLen);
            }

            for (int idx = 0; idx < resp.ResultsLen; idx++)
            {
                StatsResultSet Result = resp.Results[idx];
                if (req.Specs[idx].ViewId != Result.ViewId)
                    throw new StatsException(707, "verify: XeStatsRead Expected viewid:" + req.Specs[idx].ViewId + " Recived :" + Result.ViewId);


                if (Result.RowsLen != rowcount)
                    throw new StatsException(707, "verify: XeStatsRead Expected rows:" + rowcount + " Recived :" + Result.RowsLen + " for view ID = " + Result.ViewId);

                int Columncount = req.Specs[idx].ColumnIds.Length;

                for (int rowidx = 0; rowidx < rowcount; rowidx++)
                {
                    StatsRow tmpRow = Result.Rows[rowidx];

                    if (tmpRow.ColumnsLen != Columncount)
                        throw new StatsException(707, "verify: XeStatsRead Expected column count:" + Columncount + " Recived :" + tmpRow.ColumnsLen + " for view ID = " + Result.ViewId + " user id=" + tmpRow.Puid);




                    // verify all fileds here.

                    if (req.Users[rowidx] != tmpRow.Puid)
                        throw new StatsException(707, "verify: XeStatsRead Expected user:" + req.Users[rowidx] + " Recived :" + tmpRow.Puid + " for view ID = " + Result.ViewId);

                    TitleLbKey tlbkey = new TitleLbKey((uint)TitleID, (uint)req.Specs[idx].ViewId);
                    PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
                    if (lb == null)
                    {
                        //make sure that view size is zero and the #of rows is zero
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                throw new StatsException(707, "Invalid Type Expected none");
                            if (SubAttr[attidx].Data != null)
                                throw new StatsException(707, "Invalid Type Expected none");
                        }

                        return;



                    }
                    uint totalEntries = (uint)lb._rankedEntries.Count;
                    if (Result.ViewSize != totalEntries)
                        throw new Exception("Wrong View Size Expected " + totalEntries + "Recived " + Result.ViewSize);


                    if (lb._lbEntries.Contains(tmpRow.Puid))
                    {
                        PlayerTeamLbEntry PalyerEntry = (PlayerTeamLbEntry)lb._lbEntries[tmpRow.Puid];
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if (SubAttr[attidx].Info.ID > 65 && SubAttr[attidx].Info.ID < SpecialAttrib.AttachmentSize)
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }
                            else if (PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
                            {
                                XrlSubAttr PlayerAttr = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
                                string error = null;
                                if (!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr, ref SubAttr[attidx], ref error))
                                    throw new StatsException(707, error);

                            }
                            else
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }


                        }
                    }

                }

            }

        }


        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, true);

            // verify by reading 

            StatsSpec specs = new StatsSpec(1, new ushort[] { (ushort)10, (ushort)11, (ushort)SpecialAttrib.AttachmentSize });
            StatsReadRequest Readreq = new StatsReadRequest((uint)TitleID, new ulong[] { 501 }, new StatsSpec[] { specs });

            StatsReadResponse Readresp = Readreq.Execute();

            if (XResult.Succeeded(Readresp.xResult))
            {
                verifyRead(Readresp, Readreq);
            }
            else
                throw new Exception("Unexpected XError Recived from server " + Readresp.xResult);
        }
    }

    class TC1AttachmentSizeMax : PlayerTest
    {
        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)56791, (short)11, (long)598762, (short)12, (double)50.03, SpecialAttrib.Rating, (long)7000, SpecialAttrib.AttachmentSize, (int)100 });
        RequestBuilder _Req1 = null;
        public TC1AttachmentSizeMax(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", true, (byte)0) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            this.IsXenon = true;
        }

        public void verifyRead(StatsReadResponse resp, StatsReadRequest req)
        {
            int rowcount = req.Users.Length;
            int NoOfResults = req.Specs.Length;

            if (resp.ResultsLen != NoOfResults)
            {

                throw new StatsException(707, "verify: XeStatsRead Expected Resultset count: " + NoOfResults + " Recived :" + resp.ResultsLen);
            }

            for (int idx = 0; idx < resp.ResultsLen; idx++)
            {
                StatsResultSet Result = resp.Results[idx];
                if (req.Specs[idx].ViewId != Result.ViewId)
                    throw new StatsException(707, "verify: XeStatsRead Expected viewid:" + req.Specs[idx].ViewId + " Recived :" + Result.ViewId);


                if (Result.RowsLen != rowcount)
                    throw new StatsException(707, "verify: XeStatsRead Expected rows:" + rowcount + " Recived :" + Result.RowsLen + " for view ID = " + Result.ViewId);

                int Columncount = req.Specs[idx].ColumnIds.Length;

                for (int rowidx = 0; rowidx < rowcount; rowidx++)
                {
                    StatsRow tmpRow = Result.Rows[rowidx];

                    if (tmpRow.ColumnsLen != Columncount)
                        throw new StatsException(707, "verify: XeStatsRead Expected column count:" + Columncount + " Recived :" + tmpRow.ColumnsLen + " for view ID = " + Result.ViewId + " user id=" + tmpRow.Puid);




                    // verify all fileds here.

                    if (req.Users[rowidx] != tmpRow.Puid)
                        throw new StatsException(707, "verify: XeStatsRead Expected user:" + req.Users[rowidx] + " Recived :" + tmpRow.Puid + " for view ID = " + Result.ViewId);

                    TitleLbKey tlbkey = new TitleLbKey((uint)TitleID, (uint)req.Specs[idx].ViewId);
                    PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
                    if (lb == null)
                    {
                        //make sure that view size is zero and the #of rows is zero
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                throw new StatsException(707, "Invalid Type Expected none");
                            if (SubAttr[attidx].Data != null)
                                throw new StatsException(707, "Invalid Type Expected none");
                        }

                        return;



                    }
                    uint totalEntries = (uint)lb._rankedEntries.Count;
                    if (Result.ViewSize != totalEntries)
                        throw new Exception("Wrong View Size Expected " + totalEntries + "Recived " + Result.ViewSize);


                    if (lb._lbEntries.Contains(tmpRow.Puid))
                    {
                        PlayerTeamLbEntry PalyerEntry = (PlayerTeamLbEntry)lb._lbEntries[tmpRow.Puid];
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if (SubAttr[attidx].Info.ID > 65 && SubAttr[attidx].Info.ID < SpecialAttrib.AttachmentSize)
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }
                            else if (PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
                            {
                                XrlSubAttr PlayerAttr = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
                                string error = null;
                                if (!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr, ref SubAttr[attidx], ref error))
                                    throw new StatsException(707, error);

                            }
                            else
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }


                        }
                    }

                }

            }

        }


        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, true);

            // verify by reading 

            StatsSpec specs = new StatsSpec(1, new ushort[] { (ushort)10, (ushort)11, (ushort)SpecialAttrib.AttachmentSize });
            StatsReadRequest Readreq = new StatsReadRequest((uint)TitleID, new ulong[] { 501 }, new StatsSpec[] { specs });

            StatsReadResponse Readresp = Readreq.Execute();

            if (XResult.Succeeded(Readresp.xResult))
            {
                verifyRead(Readresp, Readreq);
            }
            else
                throw new Exception("Unexpected XError Recived from server " + Readresp.xResult);
        }
    }

    //TC1AttachmentSizeMaxP1
    class TC1AttachmentSizeMaxP1 : PlayerTest
    {
        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)56791, (short)11, (long)598762, (short)12, (double)50.03, SpecialAttrib.Rating, (long)7000, SpecialAttrib.AttachmentSize, (int)101 });
        RequestBuilder _Req1 = null;
        public TC1AttachmentSizeMaxP1(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", true, (byte)0) })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            this.IsXenon = true;
        }


        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            //HResult.XONLINE_E_STAT_BAD_REQUEST
            //g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player, false, true);
            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_INVALID_ATTACHMENT, LBid);


        }
    }

    class TC2UserArbitrated1LB : PlayerTest
    {
        RequestBuilder _Req = null;

        public TC2UserArbitrated1LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", (byte)0, (byte)1) })
        {
            _Req = new RequestBuilder();
            // change to 100
            ulong[] users = new ulong[2];
            for (int i = 0; i < 2; i++)
            {
                users[i] = (ulong)(600 + i);
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);

            }
            _Req.Builder((uint)title, users, true, false);

        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TCReplacePlayerInvalidAttrib : PlayerTest
    {

        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { SpecialAttrib.Rank, (long)1 });
        StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 0, new object[] { SpecialAttrib.AttachmentPathName, (long)1 });
        StatsPlayerReplace _data3 = new StatsPlayerReplace(1, 501, 0, new object[] { SpecialAttrib.UnitActivity, (double)1.0 });
        StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 0, new object[] { (ushort)65, (long)1 });
        RequestBuilder _Req1 = null;
        RequestBuilder _Req2 = null;
        RequestBuilder _Req3 = null;
        RequestBuilder _Req4 = null;


        public TCReplacePlayerInvalidAttrib(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
            _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req2.AddProcs(_data2.Proc);
            _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req3.AddProcs(_data3.Proc);
            _Req4 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req4.AddProcs(_data4.Proc);

        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[4];
            temp[0] = _Req1.GetPostData();
            temp[1] = _Req2.GetPostData();
            temp[2] = _Req3.GetPostData();
            temp[3] = _Req4.GetPostData();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TCReplaceExistingPlayerAttComb : PlayerTest
    {
        StatsPlayerReplace[] _Reqs = new StatsPlayerReplace[6];

        public TCReplaceExistingPlayerAttComb(int title)
            : base(title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Reqs[0] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)40, (int)50, SpecialAttrib.Rating, (long)999 });
            _Reqs[1] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)35, (int)500, (short)37, (int)600 });
            _Reqs[2] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)47, (int)99 });
            _Reqs[3] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)49, (int)700, (short)50, (int)800 });
            _Reqs[4] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)54, (int)9779 });
            _Reqs[5] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)55, (int)1234, (short)56, (int)8870 });


        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[_Reqs.Length];
            for (int i = 0; i < _Reqs.Length; i++)
            {
                RequestBuilder tempReq = new RequestBuilder((uint)TitleID, new ulong[] { 501 }, false);
                tempReq.AddProcs(_Reqs[0].Proc);
                temp[i] = tempReq.GetPostData();
            }

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }

    }

    class TCReplaceExistingPlayer : PlayerTest
    {
        StatsPlayerReplace[] _Reqs = new StatsPlayerReplace[4];

        public TCReplaceExistingPlayer(int title)
            : base(title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Reqs[0] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)41, (int)50, (short)42, (int)55, SpecialAttrib.Rating, (long)999 });
            _Reqs[1] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)45, (int)500 });
            _Reqs[2] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)45, (int)500, (short)41, (int)980 });
            _Reqs[3] = new StatsPlayerReplace(1, 501, 0, new object[] { (short)45, (int)500, (short)42, (int)8870, (short)41, (int)1234 });


        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[_Reqs.Length];
            for (int i = 0; i < _Reqs.Length; i++)
            {
                RequestBuilder tempReq = new RequestBuilder((uint)TitleID, new ulong[] { 501 }, false);
                tempReq.AddProcs(_Reqs[0].Proc);
                temp[i] = tempReq.GetPostData();
            }

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }

    }

    class TC1UsrRepAttribOnlyforExisitingUsr : PlayerTest
    {

        RequestBuilder _Req = null;
        RequestBuilder _Req1 = null;
        public TC1UsrRepAttribOnlyforExisitingUsr(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
            StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)501, 0, new object[] { (short)SpecialAttrib.Rating, (long)5000 });
            _Req.AddProcs(_data.Proc);

            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            StatsPlayerReplace _data1 = new StatsPlayerReplace(1, (ulong)501, 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56 });
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[2];
            temp[0] = _Req.GetPostData();
            temp[1] = _Req1.GetPostData();
            //
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);


        }
    }

    class TC1UserReplaceAttribOnly : PlayerTest
    {

        RequestBuilder _Req1 = null;
        public TC1UserReplaceAttribOnly(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {


            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            StatsPlayerReplace _data1 = new StatsPlayerReplace(1, (ulong)501, 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56 });
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            //
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            // do a get and verify since ENum will return  zero.

            XRLGetRequest Req = new XRLGetRequest(1);
            Req.AddGetData((uint)TitleID, 501, 1, 4, SpecialAttribMask.Rank);
            XRLGetResponse Response = Req.Execute();

            // verify response.
            if (Response.RespDataLen != 1)
                throw new TestCaseException("Expected 1 rec recived :" + Response.RespDataLen);

            if (Response.RespData[0].AttList.SubAttrSize != 4)
                throw new TestCaseException("Expected Attribute length: 4 recived :" + Response.RespData[0].AttList.SubAttrSize);
            for (int i = 0; i < Response.RespData[0].AttList.SubAttrSize; i++)
            {
                XrlSubAttr stats = Response.RespData[0].AttList.SubAttr[i];

                if (stats.Info.ID == (ushort)1)
                {
                    XrlAttrUInt val = (XrlAttrUInt)stats.Data;
                    if (val.Data != (uint)50)
                        throw new TestCaseException("invalid  value for Attrib 1");
                }
                else if (stats.Info.ID == (ushort)2)
                {
                    XrlAttrDouble val = (XrlAttrDouble)stats.Data;
                    if (val.Data != (double)55)
                        throw new TestCaseException("invalid  value for Attrib 1");
                }
                else if (stats.Info.ID == (ushort)3)
                {
                    XrlAttrUInt val = (XrlAttrUInt)stats.Data;
                    if (val.Data != (uint)56)
                        throw new TestCaseException("invalid  value for Attrib 3");
                }
                else if (stats.Info.ID == (ushort)SpecialAttrib.Rank)
                {
                    if (stats.Data != null)
                        throw new TestCaseException("invalid Attrib value Rating");
                }
            }

        }
    }

    class TC1UserReplaceRatingOnly : PlayerTest
    {

        RequestBuilder _Req1 = null;
        public TC1UserReplaceRatingOnly(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)501, 0, new object[] { (short)SpecialAttrib.Rating, (long)5000 });
            _Req1.AddProcs(_data.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TC200Post4User1LB : PlayerTest
    {
        RequestBuilder _Req = null;
        StatsPostReq[] temp = new StatsPostReq[200];

        public TC200Post4User1LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {


            for (int j = 0; j < 200; j++)
            {
                _Req = new RequestBuilder();
                ulong[] users = new ulong[4];
                for (int i = 0; i < 4; i++)
                {
                    users[i] = (ulong)((6 * (j)) + i + 800);
                    StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)((6 * (j)) + i + 800), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                    _Req.AddProcs(_data.Proc);


                }
                _Req.Builder(title, users, false, false);
                temp[j] = _Req.GetPostData();

            }


        }
        override protected void Run()
        {

            // build StatsPostReq
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteInMultipleThreadsAndVerify(temp, VerifyFlags.Player, 5);

        }
    }

    class TC100UserArbitrated4LB : PlayerTest
    {
        RequestBuilder _Req = null;

        public TC100UserArbitrated4LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(2, ""), new LeaderboardInfo(3, ""), new LeaderboardInfo(4, "") })
        {
            // this might not work
            _Req = new RequestBuilder();
            // change to 25
            ulong[] users = new ulong[25];
            for (int i = 0; i < 25; i++)
            {
                users[i] = (ulong)600 + (ulong)i;
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);

                StatsPlayerReplace _data1 = new StatsPlayerReplace(2, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data1.Proc);

                StatsPlayerReplace _data2 = new StatsPlayerReplace(3, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data2.Proc);

                StatsPlayerReplace _data3 = new StatsPlayerReplace(4, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data3.Proc);

            }
            _Req.Builder(title, users, true, false);

        }
        override protected void Run()
        {

            // build StatsPostReq
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    //TC100UserArbitrated3LB
    class TC100UserArbitrated3LB : PlayerTest
    {
        RequestBuilder _Req = null;

        public TC100UserArbitrated3LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", (byte)0, (byte)1), new LeaderboardInfo(2, "", (byte)0, (byte)1) })
        {
            _Req = new RequestBuilder();
            // change to 100
            ulong[] users = new ulong[100];
            for (int i = 0; i < 100; i++)
            {
                users[i] = (ulong)(600 + i);
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                StatsPlayerReplace _data1 = new StatsPlayerReplace(2, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);
                _Req.AddProcs(_data1.Proc);

            }
            _Req.Builder(title, users, true, false);

        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TC100UserArbitrated1LB : PlayerTest
    {
        RequestBuilder _Req = null;

        public TC100UserArbitrated1LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", (byte)0, (byte)1) })
        {
            _Req = new RequestBuilder();
            // change to 100
            ulong[] users = new ulong[100];
            for (int i = 0; i < 100; i++)
            {
                users[i] = (ulong)(600 + i);
                StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                _Req.AddProcs(_data.Proc);

            }
            _Req.Builder(title, users, true, false);

        }
        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TC2ReplaceUser10Att : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[1];

        public TC2ReplaceUser10Att(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { 500, 800 }, false);

            StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 500, 0, new object[]{(short)1,(int)50,(short)2,(int)55,(short)3,(int)56,(short)4,(int)566,(short)5,(int)5666,
                                                                                     (short)6,(int)57,(short)7,(int)577,(short)8,(int)577,(short)9,(int)577,(short)10,(int)5787,});
            StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 800, 0, new object[]{(short)1,(int)50,(short)2,(int)55,(short)3,(int)56,(short)4,(int)566,(short)5,(int)5666,
                                                                                      (short)6,(int)57,(short)7,(int)577,(short)8,(int)577,(short)9,(int)577,(short)10,(int)5787,});

            _Req1.AddProcs(_data1.Proc);
            _Req1.AddProcs(_data2.Proc);
            temp[0] = _Req1.GetPostData();




        }
        override protected void Run()
        {
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TC60MUsr3Att1LB4SameRatingOn47 : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[55];

        public TC60MUsr3Att1LB4SameRatingOn47(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            ulong userid = 500;
            for (int i = 0; i < 55; i++)
            {
                if (i == 47)
                {
                    RequestBuilder _Req1 = new RequestBuilder(title, new ulong[] { userid, userid + 1, userid + 2, userid + 3 }, false);
                    for (int j = 0; j < 4; j++)
                    {
                        PlayerRep3Att _data1 = new PlayerRep3Att(1, userid++, (long)(7000 - 47));
                        _Req1.AddProcs(_data1.Proc);
                    }

                    temp[i] = _Req1.GetPostData();
                }
                else
                {
                    RequestBuilder _Req = new RequestBuilder(title, new ulong[] { userid }, false);
                    PlayerRep3Att _data = new PlayerRep3Att(1, userid++, (long)(7000 - i));
                    _Req.AddProcs(_data.Proc);
                    temp[i] = _Req.GetPostData();
                }
            }


        }
        override protected void Run()
        {
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TC60MUsr3Att1LB5SameRatingDiffReq : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[60];

        public TC60MUsr3Att1LB5SameRatingDiffReq(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            for (int i = 0; i < 60; i++)
            {
                PlayerRep3Att _data;
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 500 + (ulong)i }, false);
                if (i > 47 && i < 55)
                    _data = new PlayerRep3Att(1, 500 + (ulong)i, (long)(7000 - 47));
                else
                    _data = new PlayerRep3Att(1, 500 + (ulong)i, (long)(7000 - i));
                _Req.AddProcs(_data.Proc);
                temp[i] = _Req.GetPostData();
            }


        }
        override protected void Run()
        {
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TC60MUsr3Att1LB : PlayerTest
    {
        StatsPostReq[] temp = new StatsPostReq[60];

        public TC60MUsr3Att1LB(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            for (int i = 0; i < 60; i++)
            {
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 500 + (ulong)i }, false);
                PlayerRep3Att _data = new PlayerRep3Att(1, 500 + (ulong)i, (long)(7000 - i));
                _Req.AddProcs(_data.Proc);
                temp[i] = _Req.GetPostData();
            }


        }
        override protected void Run()
        {
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

        }
    }

    class TC1User64Att : PlayerTest
    {
        StatUsr64Att1LB _data1 = new StatUsr64Att1LB(1, 501);
        RequestBuilder _Req1 = null;
        public TC1User64Att(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    //TC1UserDuplicateAtt

    class TC1UserDuplicateAtt : PlayerTest
    {
        StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 0, new object[] { (short)1, (int)50, (short)2, (int)55, (short)SpecialAttrib.Rating, (long)5000, (short)1, (int)50 });
        RequestBuilder _Req1 = null;
        public TC1UserDuplicateAtt(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class TC1User5Att : PlayerTest
    {
        PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
        RequestBuilder _Req1 = null;
        public TC1User5Att(uint title)
            : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
        {
            _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
            _Req1.AddProcs(_data1.Proc);
        }

        override protected void Run()
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }

    class PlayerTest : TestBase
    {
        protected int TitleID;
        protected LeaderboardInfo[] LBid;
        public bool IsXenon = false;


        public PlayerTest(int title, LeaderboardInfo[] lbids)
        {
            TitleID = title;
            LBid = lbids;
        }

        new virtual protected void Run()
        { }
        override protected void Execute()
        {
            DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
            db.ConfigureTitle(TitleID, LBid);

            Run();
            ResultCode = TEST_RESULTS.PASSED;

        }

    }

    //StatsProc
    class StatUsr64Att1LB : StatsPlayerReplace
    {

        public StatUsr64Att1LB(int lbid, ulong u1)
        {
            object[] param = new object[] { (short)1,(int)50,
                                              (short)2,(int)55,
                                              (short)3,(int)56,
                                              (short)4,(int)566,
                                              (short)5,(int)5666,
                                              (short)6,(int)57,
                                              (short)7,(int)577,
                                              (short)8,(int)577,
                                              (short)9,(int)577,
                                              (short)10,(int)5787,
                                              (short)11,(int)5454,
                                              (short)12,(int)5545,
                                              (short)13,(int)5450,
                                              (short)14,(int)5550,
                                              (short)15,(int)5220,
                                              (short)16,(int)554320,
                                              (short)17,(int)5650,
                                              (short)18,(int)1150,
                                              (short)19,(int)1150,
                                              (short)20,(int)34550,
                                              (short)21,(int)5550,
                                              (short)22,(int)5335,
                                              (short)23,(int)55501,
                                              (short)24,(int)570,
                                              (short)25,(int)7750,
                                              (short)26,(int)8850,
                                              (short)27,(int)8850,
                                              (short)28,(int)5880,
                                              (short)29,(int)5088,
                                              (short)30,(int)5088,
                                              (short)31,(int)8850,
                                              (short)32,(int)5588,
                                              (short)33,(int)5088,
                                              (short)34,(long)8850,
                                              (short)35,(long)5880,
                                              (short)36,(long)5088,
                                              (short)37,(long)5990,
                                              (short)38,(long)590,
                                              (short)39,(long)950,
                                              (short)40,(long)5990,
                                              (short)41,(long)5099,
                                              (short)42,(long)955,
                                              (short)43,(long)590,
                                              (short)44,(long)509,
                                              (short)45,(long)50799,
                                              (short)46,(long)57990,
                                              (short)47,(long)57980,
                                              (short)48,(double)599.80,
                                              (short)49,(double)5098.5,
                                              (short)50,(double)5035.98,
                                              (short)51,(double)50.9,
                                              (short)52,(double)55.3,
                                              (short)53,(double)50.2,
                                              (short)54,(double)50343.34,
                                              (short)55,(double)5034.43,
                                              (short)56,(double)5054.45,
                                              (short)57,(double)50.65,
                                              (short)58,(double)5067.76,
                                              (short)59,(double)5087.78,
                                              (short)60,(double)5098.89,
                                              (short)61,(double)50.11,
                                              (short)62,(double)5012.21,
                                              (short)63,(double)5013.31,
                                              (short)64,(double)50234.432,
                                              (short)SpecialAttrib.Rating,(long)5000};
            BuildPlayerStats(lbid, u1, 0, param);
        }
    }

    class PlayerRep3Att : StatsPlayerReplace
    {
        public PlayerRep3Att(int lbid, long rating) : base(lbid, 501, 0, new object[] { (short)10, (int)5001, (short)11, (long)5002, (short)12, (double)50.03, SpecialAttrib.Rating, (long)rating }) { }

        public PlayerRep3Att(int lbid, ulong u, long rating)
            : base(lbid, u, 0, new object[] { (short)10, (int)5001, (short)11, (long)5002, (short)12, (double)50.03, SpecialAttrib.Rating, (long)rating })
        { }
    }

    class PlayerRep3AttNegNo : StatsPlayerReplace
    {
        public PlayerRep3AttNegNo(int lbid, long rating) : base(lbid, 501, 0, new object[] { (short)10, (int)-5001, (short)11, (long)-5002, (short)12, (double)-50.03, SpecialAttrib.Rating, (long)rating }) { }
    }

    class PlayerRep10Att : StatsPlayerReplace
    {
        public PlayerRep10Att(int lbid, ulong user, long rating)
        {
            object[] param = new object[22];
            for (int i = 0; i < 20; i += 2)
            {
                param[i] = (short)(i + 1);
                param[i + 1] = (long)((i + 1) * 5);
            }
            param[20] = (short)SpecialAttrib.Rating;
            param[21] = rating;
            BuildPlayerStats(lbid, user, 0, param);
        }
        public PlayerRep10Att(int lbid, long rating)
        {
            object[] param = new object[22];
            for (int i = 0; i < 20; i += 2)
            {
                param[i] = (short)(i + 1);
                param[i + 1] = (long)((i + 1) * 5);
            }
            param[20] = (short)SpecialAttrib.Rating;
            param[21] = rating;
            BuildPlayerStats(lbid, 501, 0, param);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\V3\ConditionalUser.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GConditionalUser : TestNode
    {
        public bool IsXenonClient;

        public GConditionalUser(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            // Following Test cases are for INT type.
            AddChild(new TCValidUEqualInt(50));
            AddChild(new TCValidUNotEqualInt(50));
            AddChild(new TCValidULessInt(50));
            AddChild(new TCValidULessOREqualInt(50));
            AddChild(new TCValidUGreaterInt(50));
            AddChild(new TCValidUGreaterOREqualInt(50));
            AddChild(new TCInValidUEqualInt(50));
            AddChild(new TCInValidUNotEqualInt(50));
            AddChild(new TCInValidULessInt(50));
            AddChild(new TCInValidULessOREqualInt(50));
            AddChild(new TCInValidUGreaterInt(50));
            AddChild(new TCInValidUGreaterOREqualInt(50));
            AddChild(new TCValidUExist(50));
            AddChild(new TCValidUNotExist(50));
            AddChild(new TCInValidUExist(50));
            AddChild(new TCInValidUNotExist(50));

            // Following Test cases are for Long type.
            AddChild(new TCValidUEqualLong(50));
            AddChild(new TCValidUNotEqualLong(50));
            AddChild(new TCValidULessLong(50));
            AddChild(new TCValidULessOREqualLong(50));
            AddChild(new TCValidUGreaterLong(50));
            AddChild(new TCValidUGreaterOREqualLong(50));
            AddChild(new TCInValidUEqualLong(50));
            AddChild(new TCInValidUNotEqualLong(50));
            AddChild(new TCInValidULessLong(50));
            AddChild(new TCInValidULessOREqualLong(50));
            AddChild(new TCInValidUGreaterLong(50));
            AddChild(new TCInValidUGreaterOREqualLong(50));

            // Following Test cases are for Double type.
            AddChild(new TCValidUEqualDouble(50));
            AddChild(new TCValidULessDouble(50));
            AddChild(new TCValidULessOREqualDouble(50));
            AddChild(new TCValidUGreaterDouble(50));
            AddChild(new TCValidUGreaterOREqualDouble(50));
            AddChild(new TCInValidUEqualDouble(50));
            AddChild(new TCInValidULessDouble(50));
            AddChild(new TCInValidULessOREqualDouble(50));
            AddChild(new TCInValidUGreaterDouble(50));
            AddChild(new TCInValidUGreaterOREqualDouble(50));

            // rating
            AddChild(new TCValidUEqualRating(50));
            AddChild(new TCValidUNotEqualDouble(50));
            AddChild(new TCValidULessRating(50));
            AddChild(new TCValidULessOREqualRating(50));
            AddChild(new TCValidUGreaterRating(50));
            AddChild(new TCValidUGreaterOREqualRating(50));
            AddChild(new TCInValidUEqualRating(50));
            AddChild(new TCInValidUNotEqualDouble(50));
            AddChild(new TCInValidULessRating(50));
            AddChild(new TCInValidULessOREqualRating(50));
            AddChild(new TCInValidUGreaterRating(50));
            AddChild(new TCInValidUGreaterOREqualRating(50));
            AddChild(new TCValidUExistRating(50));
            AddChild(new TCValidUNotExistRating(50));
            AddChild(new TCInValidUExistRating(50));
            AddChild(new TCInValidUNotExistRating(50));

            //Type Mismatch 
            /// not yet tested
            AddChild(new TCTypeMismatchValidEqual(50));
            AddChild(new TCTypeMismatchInValidEqual(50));
            AddChild(new TCTypeMismatchValidNotEqual(50));
            AddChild(new TCTypeMismatchInValidNotEqual(50));
            AddChild(new TCTypeMismatchValidLess(50));
            AddChild(new TCTypeMismatchInValidLess(50));
            AddChild(new TCTypeMismatchValidLessOREqual(50));
            AddChild(new TCTypeMismatchInValidLessOREqual(50));
            AddChild(new TCTypeMismatchValidGreater(50));
            AddChild(new TCTypeMismatchInValidGreater(50));
            AddChild(new TCTypeMismatchValidGreaterOREqual(50));
            AddChild(new TCTypeMismatchInValidGreaterOREqual(50));

            // Not Exist...
            AddChild(new TCNotExistEqual(50));
            AddChild(new TCNotExistLess(50));
            AddChild(new TCNotExistLessOREqual(50));
            AddChild(new TCNotExistGreater(50));
            AddChild(new TCNotExistGreaterOREqual(50));

            //Special cases
            AddChild(new TC3Cond1Depend(50));
            AddChild(new TC3Cond3Depend(50));
            AddChild(new TCCondInvalidDepend(50));


        }


        public override void PreRun()
        {
            foreach (PlayerTest ptb in Children)
            {
                if (IsXenonClient)
                    ptb.IsXenon = true;
            }
        }

        // Special Cases
        public class TCCondInvalidDepend : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[4];

            public TCCondInvalidDepend(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, (short)11, (int)666, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ///
                StatsPlayerReplace _data1 = new StatsPlayerReplace(1, 501, 2, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                ConditionalPlayer _data2 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501, 502, 503 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 2, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501, 502, 503 }, false);
                _Req3.AddProcs(_data3.Proc);
                _Req3.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();

                StatsPlayerReplace _data5 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req4 = new RequestBuilder(title, new ulong[] { 501, 502, 503 }, false);
                _Req4.AddProcs(_data5.Proc);
                temp[3] = _Req4.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TC3Cond3Depend : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC3Cond3Depend(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)500 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                ConditionalPlayer _data2 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (int)455);
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 11, (int)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 3, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                StatsPlayerReplace _data5 = new StatsPlayerReplace(1, 502, 2, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)2000 });
                StatsPlayerReplace _data6 = new StatsPlayerReplace(1, 503, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)3000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501, 502, 503 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                _Req2.AddProcs(_data5.Proc);
                _Req2.AddProcs(_data6.Proc);
                temp[1] = _Req2.GetPostData();
                temp[1].PorcindexUsedInVerify = 4;
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TC3Cond1Depend : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC3Cond1Depend(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, (short)11, (int)666, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                ConditionalPlayer _data2 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (int)455);
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 11, (int)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 3, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }







        /// /////////////////////Not Exist //////////////////////
        public class TCNotExistEqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCNotExistEqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[0] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCNotExistLess : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCNotExistLess(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[0] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCNotExistLessOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCNotExistLessOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[0] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCNotExistGreater : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCNotExistGreater(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[0] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCNotExistGreaterOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCNotExistGreaterOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[0] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }




        /// /////////////////////Type Mismatch//////////////////////
        public class TCTypeMismatchValidEqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidEqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchInValidEqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchInValidEqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (double)666);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCTypeMismatchInValidNotEqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchInValidNotEqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchValidNotEqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidNotEqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (double)666);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1001 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCTypeMismatchValidLess : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidLess(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchInValidLess : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCTypeMismatchInValidLess(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (double)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1 >v2 
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (int)455);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchValidLessOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidLessOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchInValidLessOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchInValidLessOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCTypeMismatchValidGreater : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidGreater(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchInValidGreater : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCTypeMismatchInValidGreater(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1=v2
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchValidGreaterOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchValidGreaterOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCTypeMismatchInValidGreaterOREqual : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCTypeMismatchInValidGreaterOREqual(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (double)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }



        /// /////////////////////INT//////////////////////
        public class TCValidUExist : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUExist(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Exist, 10, (int)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUExist : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUExist(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Exist, 12, (int)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUNotExist : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUNotExist(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotExist, 11, (int)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUNotExist : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUNotExist(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotExist, 10, (int)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUEqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUEqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUEqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUEqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCInValidUNotEqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUNotEqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (int)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUNotEqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUNotEqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (int)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (int)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }



        public class TCValidULessInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidULessInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (int)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidULessInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (int)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1 >v2 
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (int)455);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidULessOREqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidULessOREqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (int)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for equal
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessOREqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidULessOREqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (int)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUGreaterInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (int)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUGreaterInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (int)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1=v2
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (int)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterOREqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUGreaterOREqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (int)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // condition v1=v2
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterOREqualInt : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUGreaterOREqualInt(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (int)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        /// <summary>
        /// /////////////////////LONG/////////////////////////////
        /// </summary>
        /// 
        public class TCValidUEqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUEqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUEqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUEqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCInValidUNotEqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUNotEqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUNotEqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUNotEqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (long)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (long)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCValidULessLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidULessLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidULessLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1 >v2 
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (long)455);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidULessOREqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidULessOREqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for equal
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessOREqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidULessOREqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUGreaterLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUGreaterLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1=v2
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (long)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterOREqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUGreaterOREqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // condition v1=v2
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterOREqualLong : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUGreaterOREqualLong(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (long)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (long)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        /// <summary>
        /// /////////////////DOUBLE/////////////////////////////////
        /// </summary>
        /// 
        public class TCValidUEqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUEqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (double)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUEqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUEqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (double)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (double)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (long)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        public class TCInValidUNotEqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUNotEqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (double)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUNotEqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUNotEqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (double)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (double)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for greater
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.NotEqual, 10, (long)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (long)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }



        public class TCValidULessDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidULessDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (double)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidULessDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (double)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1 >v2 
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Less, 10, (double)455);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidULessOREqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidULessOREqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (double)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for equal
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessOREqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidULessOREqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUGreaterDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUGreaterDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1=v2
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Greater, 10, (double)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)455, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterOREqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUGreaterOREqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (double)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // condition v1=v2
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterOREqualDouble : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUGreaterOREqualDouble(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (double)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, 10, (double)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (double)450, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }


        /// <summary>
        /// /////////////////////Rating ////////////////
        /// </summary>
        public class TCValidUExistRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUExistRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Exist, (short)SpecialAttrib.Rating, (long)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUExistRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUExistRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, (short)33, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Exist, (short)SpecialAttrib.Rating, (long)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUNotExistRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUNotExistRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)11, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotExist, (short)SpecialAttrib.Rating, (long)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUNotExistRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUNotExistRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.NotExist, (short)SpecialAttrib.Rating, (long)0);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUEqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUEqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)23, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, (short)SpecialAttrib.Rating, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUEqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUEqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)11, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for greater
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, (short)SpecialAttrib.Rating, (long)554);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, (short)12, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for less
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, (short)SpecialAttrib.Rating, (long)754);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidULessRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidULessRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)10, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, (short)SpecialAttrib.Rating, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidULessRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)10, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Less, (short)SpecialAttrib.Rating, (long)555);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)755, (short)11, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1 >v2 
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Less, (short)SpecialAttrib.Rating, (long)455);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)755, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidULessOREqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidULessOREqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)10, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, (short)SpecialAttrib.Rating, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)650, (short)11, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                /// add a contiotnal for equal
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidULessOREqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidULessOREqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)11, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for less
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.LessOREqual, (short)SpecialAttrib.Rating, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)10, (int)650, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();


            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCValidUGreaterRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)11, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, (short)SpecialAttrib.Rating, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)455, (short)12, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCInValidUGreaterRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)11, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Greater, (short)SpecialAttrib.Rating, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)455, (short)23, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // add a contiotnal for v1=v2
                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Greater, (short)SpecialAttrib.Rating, (long)555);
                StatsPlayerReplace _data4 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)455, (short)22, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data3.Proc);
                _Req2.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCValidUGreaterOREqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCValidUGreaterOREqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)33, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, (short)SpecialAttrib.Rating, (long)450);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)450, (short)22, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();
                // condition v1=v2
                temp[2] = _Req2.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInValidUGreaterOREqualRating : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCInValidUGreaterOREqualRating(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)SpecialAttrib.Rating, (long)555, (short)24, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for v1<v2
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.GreaterOREqual, (short)SpecialAttrib.Rating, (long)650);
                StatsPlayerReplace _data2 = new StatsPlayerReplace(1, 501, 1, new object[] { (short)SpecialAttrib.Rating, (long)450, (short)24, (long)100 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\EnumByRank.cs ===
using System;
using System.Collections;
using System.IO;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    public class XeEnumByRank : TestNode
    {
        uint title = 816;

        public override void PreRun()
        {
            EnumLoader.PopulateLBForEnum();
        }

        public XeEnumByRank()
        {
            AddChild(new TCValidRank(title));  //page size 100.
            AddChild(new TCNonExistent(title));
            AddChild(new TCEmptyLB(title));

            // multiple Specs
            AddChild(new TCValid5LBs(title));
            AddChild(new TCSameViewTwice(title));
            AddChild(new TCValid3LBSEachDiffSize(title));
            AddChild(new TCValidMaxLBs(title));
            AddChild(new TCValidMax_1LBs(title));
            AddChild(new TCValidMaxPlus1LBs(title));
            AddChild(new TCValidnonExistingAtBegining(title));
            AddChild(new TCValidnonExistingAtMiddle(title));
            AddChild(new TCValidnonExistingAtEnd(title));
            AddChild(new TCInValididx2(title));

            //pagesize
            AddChild(new TCPageSize0(title));
            AddChild(new TCPageSize1(title));
            AddChild(new TCPageSize99(title));

            //TCAttribute

            //Count
            AddChild(new TCAttributeCount0(title));
            AddChild(new TCAttributeCount1(title));
            AddChild(new TCAttributeCount63(title));
            AddChild(new TCAttributeCount64(title));
            AddChild(new TCDuplicateAttrib(title));

            //nonExisting
            AddChild(new TCnonExistingAttrib(title));
            AddChild(new TCMixExisting_nonAttrib(title));

            //TCLB_PageSize_Comb
            AddChild(new TCLB99PS98(title));
            AddChild(new TCLB99PS99(title));
            AddChild(new TCLB99PS100(title));
            AddChild(new TCLB0PS100(title));
            AddChild(new TCLB1PS100(title));

            //TCStartPosition
            AddChild(new TCStartPosition0(title));
            AddChild(new TCStartPosition1(title));
            AddChild(new TCStartPosition99(title));
            AddChild(new TCStartPosition100(title));
            AddChild(new TCStartPosition101(title));

            //TCInvalidRequest
            AddChild(new TCInvalidTitle(title));
            AddChild(new TCInvalidLBID(title));
            AddChild(new TCInvalidAttrib65(title));
            AddChild(new TCInvalidMax_1PS(title));

            //TCInvalidMessage
            AddChild(new TCAttribCountdiff(title));
            AddChild(new TCInvalidSmallPKT());
            AddChild(new TCInvalidLargePKT());
        }

        public class TCInValididx2 : XeEnumByRankBase
        {
            public TCInValididx2(uint title)
                : base(title, new uint[] { 7, 51 })
            { }

            override public void init()
            {
                Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                specs[0] = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[1] = new StatsSpec(viewids[1], new ushort[] { 1, 2, 3, 4, 5, 6 });

                req = new StatsEnumByRankRequest(title, 10, 100, specs);
            }
        }

        public class TCValidnonExistingAtEnd : XeEnumByRankBase
        {
            public TCValidnonExistingAtEnd(uint title)
                : base(title, new uint[] { 7, 8, 6 })
            { }

            override public void init()
            {
                this.Expected_rows = new int[] { 91, 91, 0 };

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                specs[0] = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[1] = new StatsSpec(viewids[1], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[2] = new StatsSpec(viewids[2], new ushort[] { 1, 2, 3, 4, 5, 6 });

                req = new StatsEnumByRankRequest(title, 10, 100, specs);
            }
        }

        public class TCValidnonExistingAtMiddle : XeEnumByRankBase
        {
            public TCValidnonExistingAtMiddle(uint title)
                : base(title, new uint[] { 7, 6, 8 })
            { }

            override public void init()
            {
                this.Expected_rows = new int[] { 91, 0, 91 };

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                specs[0] = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[1] = new StatsSpec(viewids[1], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[2] = new StatsSpec(viewids[2], new ushort[] { 1, 2, 3, 4, 5, 6 });

                req = new StatsEnumByRankRequest(title, 10, 100, specs);
            }
        }

        public class TCValidnonExistingAtBegining : XeEnumByRankBase
        {
            public TCValidnonExistingAtBegining(uint title)
                : base(title, new uint[] { 6, 7, 8 })
            { }

            override public void init()
            {
                this.Expected_rows = new int[] { 0, 91, 91 };

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                specs[0] = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[1] = new StatsSpec(viewids[1], new ushort[] { 1, 2, 3, 4, 5, 6 });
                specs[2] = new StatsSpec(viewids[2], new ushort[] { 1, 2, 3, 4, 5, 6 });

                req = new StatsEnumByRankRequest(title, 10, 100, specs);
            }
        }

        public class TCValidMaxPlus1LBs : XeEnumByRankBase
        {
            public TCValidMaxPlus1LBs(uint title)
                : base(title, new uint[] { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 })
            { }

            override public void init()
            {
                ushort[] attribs = new ushort[60];

                for (int j = 0; j < attribs.Length; j++)
                    attribs[j] = (ushort)(j + 1);
                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                    specs[i] = new StatsSpec(viewids[i], attribs);
                req = new StatsEnumByRankRequest(title, 1, 100, specs);

                Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
            }
        }

        public class TCValidMax_1LBs : XeEnumByRankBase
        {
            public TCValidMax_1LBs(uint title)
                : base(title, new uint[] { 7, 8, 9, 10, 11, 12, 13, 14, 15 })
            { }

            override public void init()
            {
                ushort[] attribs = new ushort[60];
                for (int j = 0; j < attribs.Length; j++)
                {
                    attribs[j] = (ushort)(j + 1);
                }

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                {
                    specs[i] = new StatsSpec(viewids[i], attribs);
                }

                req = new StatsEnumByRankRequest(title, 1, 100, specs);
            }
        }

        public class TCValidMaxLBs : XeEnumByRankBase
        {
            public TCValidMaxLBs(uint title)
                : base(title, new uint[] { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 })
            { }

            override public void init()
            {
                ushort[] attribs = new ushort[60];
                for (int j = 0; j < attribs.Length; j++)
                {
                    attribs[j] = (ushort)(j + 1);
                }

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                {
                    specs[i] = new StatsSpec(viewids[i], attribs);
                }

                req = new StatsEnumByRankRequest(title, 1, 100, specs);
            }
        }

        public class TCValid3LBSEachDiffSize : XeEnumByRankBase
        {
            public TCValid3LBSEachDiffSize(uint title)
                : base(title, new uint[] { 1, 6, 2 })
            { }

            override public void init()
            {
                this.Expected_rows = new int[] { 100, 2, 100 };

                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                {
                    specs[i] = new StatsSpec(viewids[i], new ushort[] { 1, 2, 3, 4, 5, 6 });
                }

                req = new StatsEnumByRankRequest(title, 1, 100, specs);
            }
        }


        //TCSameViewTwice
        public class TCSameViewTwice : XeEnumByRankBase
        {
            public TCSameViewTwice(uint title)
                : base(title, new uint[] { 7, 8, 9, 8 })
            { }

            override public void init()
            {
                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                {
                    specs[i] = new StatsSpec(viewids[i], new ushort[] { 1, 2, 3, 4, 5, 6 });
                }

                req = new StatsEnumByRankRequest(title, 1, 100, specs);
            }
        }

        public class TCValid5LBs : XeEnumByRankBase
        {
            public TCValid5LBs(uint title)
                : base(title, new uint[] { 7, 8, 9, 10, 11 })
            { }

            override public void init()
            {
                StatsSpec[] specs = new StatsSpec[viewids.Length];
                for (int i = 0; i < viewids.Length; i++)
                {
                    specs[i] = new StatsSpec(viewids[i], new ushort[] { 1, 2, 3, 4, 5, 6 });
                }

                req = new StatsEnumByRankRequest(title, 1, 100, specs);
            }
        }

        public class TCInvalidSmallPKT : TestBase
        {
            override protected void Execute()
            {
                InvalidXRLRequest tmp = new InvalidXRLRequest(10, "/xstats/xstatenumbyrank.ashx");

                uint xerror = tmp.Execute();
                if (xerror != HResult.XONLINE_E_END_OF_STREAM)
                {
                    throw new Exception("Invalid Xerror Expected :" + HResult.E_FAIL + " recived:" + xerror);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        public class TCInvalidLargePKT : TestBase
        {
            override protected void Execute()
            {
                InvalidXRLRequest tmp = new InvalidXRLRequest(1000 * 10, "/xstats/xstatenumbyrank.ashx");

                uint xerror = tmp.Execute();
                if (xerror != HResult.XONLINE_E_DESERIALIZATION_ERROR)
                {
                    throw new Exception("Invalid Xerror Expected :" + HResult.E_FAIL + " recived:" + xerror);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        public class TCAttribCountdiff : XeEnumByRankBase
        {
            public TCAttribCountdiff(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_END_OF_STREAM;

                StatsSpec spec = new StatsSpec(viewids[0], 10, new ushort[] { 1, 2, 3 });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);

            }
        }

        public class TCInvalidMax_1PS : XeEnumByRankBase
        {
            public TCInvalidMax_1PS(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;

                ushort[] attribs = new ushort[64];
                for (ushort i = 0; i < 64; i++)
                {
                    attribs[i] = (ushort)(i + 1);
                }

                StatsSpec spec = new StatsSpec(viewids[0], attribs);
                req = new StatsEnumByRankRequest(title, 1, 101, spec);
            }
        }

        public class TCInvalidAttrib65 : XeEnumByRankBase
        {
            public TCInvalidAttrib65(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;

                ushort[] attribs = new ushort[65];
                for (ushort i = 0; i < 65; i++)
                {
                    attribs[i] = (ushort)(i + 1);
                }

                StatsSpec spec = new StatsSpec(viewids[0], attribs);
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }

        }

        public class TCInvalidLBID : XeEnumByRankBase
        {
            public TCInvalidLBID(uint title)
                : base(title, 299)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCInvalidTitle : XeEnumByRankBase
        {
            public TCInvalidTitle(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title + 10, 1, 100, spec);
            }
        }

        public class TCStartPosition101 : XeEnumByRankBase
        {
            public TCStartPosition101(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 0;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 101, 100, spec);
            }
        }

        public class TCStartPosition100 : XeEnumByRankBase
        {
            public TCStartPosition100(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 1;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 100, 100, spec);
            }
        }

        public class TCStartPosition99 : XeEnumByRankBase
        {
            public TCStartPosition99(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 2;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 99, 100, spec);
            }
        }

        public class TCStartPosition1 : XeEnumByRankBase
        {
            public TCStartPosition1(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 100;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCStartPosition0 : XeEnumByRankBase
        {
            public TCStartPosition0(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 0, 100, spec);
            }
        }

        public class TCLB1PS100 : XeEnumByRankBase
        {
            public TCLB1PS100(uint title)
                : base(title, 3)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 1;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCLB0PS100 : XeEnumByRankBase
        {
            public TCLB0PS100(uint title)
                : base(title, 4)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 0;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCLB99PS100 : XeEnumByRankBase
        {
            public TCLB99PS100(uint title)
                : base(title, 5)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 99;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCLB99PS99 : XeEnumByRankBase
        {
            public TCLB99PS99(uint title)
                : base(title, 5)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 99;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 99, spec);
            }
        }

        public class TCLB99PS98 : XeEnumByRankBase
        {
            public TCLB99PS98(uint title)
                : base(title, 5)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 98;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 98, spec);
            }
        }

        public class TCMixExisting_nonAttrib : XeEnumByRankBase
        {
            public TCMixExisting_nonAttrib(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 10, 31, 41, 1 });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCDuplicateAttrib : XeEnumByRankBase
        {
            public TCDuplicateAttrib(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 1, 5 });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }


        public class TCnonExistingAttrib : XeEnumByRankBase
        {
            public TCnonExistingAttrib(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 31, 41 });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCAttributeCount64 : XeEnumByRankBase
        {
            public TCAttributeCount64(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                ushort[] attribs = new ushort[64];
                for (ushort i = 0; i < 64; i++)
                {
                    attribs[i] = (ushort)(i + 1);
                }

                StatsSpec spec = new StatsSpec(viewids[0], attribs);
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCAttributeCount63 : XeEnumByRankBase
        {
            public TCAttributeCount63(uint title)
                : base(title, 2)
            { }

            override public void init()
            {
                ushort[] attribs = new ushort[63];
                for (ushort i = 0; i < 63; i++)
                {
                    attribs[i] = (ushort)(i + 1);
                }

                StatsSpec spec = new StatsSpec(viewids[0], attribs);
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCAttributeCount1 : XeEnumByRankBase
        {
            public TCAttributeCount1(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCAttributeCount0 : XeEnumByRankBase
        {
            public TCAttributeCount0(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { });
                req = new StatsEnumByRankRequest(title, 1, 10, spec);
            }
        }

        public class TCPageSize99 : XeEnumByRankBase
        {
            public TCPageSize99(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 99, spec);
            }
        }

        public class TCPageSize1 : XeEnumByRankBase
        {
            public TCPageSize1(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 1, spec);
            }
        }

        public class TCPageSize0 : XeEnumByRankBase
        {
            public TCPageSize0(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 0, spec);
            }
        }

        public class TCNonExistent : XeEnumByRankBase
        {
            public TCNonExistent(uint title)
                : base(title, 1)
            {
            }
            override public void init()
            {
                this.Expected_rows[0] = 0;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 2000, 100, spec);
            }
        }

        //TCValidRank
        public class TCEmptyLB : XeEnumByRankBase
        {
            public TCEmptyLB(uint title)
                : base(title, 17)
            { }

            override public void init()
            {
                this.Expected_rows[0] = 0;

                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }

        public class TCValidRank : XeEnumByRankBase
        {
            public TCValidRank(uint title)
                : base(title, 1)
            { }

            override public void init()
            {
                StatsSpec spec = new StatsSpec(viewids[0], new ushort[] { 1, 2, 3, 4, 5, 6 });
                req = new StatsEnumByRankRequest(title, 1, 100, spec);
            }
        }
    } // XeEnumByRank

    public class XeEnumByRankBase : TestBase
    {
        protected uint title = 0;
        protected uint[] viewids = null;
        public uint Expected_XErr = 0;
        public int[] Expected_rows = new int[1];
        protected StatsEnumByRankRequest req = null;

        public XeEnumByRankBase(uint _title, uint _viewid)
        {
            title = _title;
            viewids = new uint[] { _viewid };
            Expected_rows[0] = -1;
        }

        public XeEnumByRankBase(uint _title, uint[] _viewids)
        {
            title = _title;
            viewids = _viewids;

            Expected_rows = new int[viewids.Length];
            for (int i = 0; i < Expected_rows.Length; i++)
            {
                Expected_rows[i] = -1;
            }
        }

        virtual public void init() { }

        override protected void Execute()
        {
            init();

            if (req != null)
            {
                StatsEnumResponse resp = req.Execute();
                if (XResult.Failed(Expected_XErr))
                {
                    if (resp.xResult != Expected_XErr)
                    {
                        throw new StatsException(707, "UnExpected XError  Expected :" + Expected_XErr + " Recived : " + resp.xResult);
                    }
                }
                else if (XResult.Succeeded(resp.xResult))
                {
                    verifyEnum(resp, (int)req.Rank);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error("Stats Read not initilized");
                ResultCode = TEST_RESULTS.FAILED;
            }
        }

        public void verifyEnum(StatsEnumResponse resp, int startrank)
        {

            if (resp.ResultLen != req.Specs.Length)
            {
                throw new StatsException(707, "verify: XeStatsEnum Expected Result set : " + req.Specs.Length + " Recived :" + resp.ResultLen);
            }

            StatsResultSet[] Results = resp.Result;
            for (int i = 0; i < Results.Length; i++)
            {
                StatsResultSet Result = Results[i];

                if (Result.ViewId != req.Specs[i].ViewId)
                {
                    throw new Exception(" Unexpected  view server= " + Result.ViewId + " Expected " + req.Specs[i].ViewId);
                }

                uint viewid = (uint)req.Specs[i].ViewId;

                TitleLbKey tlbkey = new TitleLbKey(title, viewid);
                PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];

                ArrayList enumlist = lb.GetRankedList();
                ulong totalEntries = (ulong)lb._rankedEntries.Count;

                if (Result.ViewSize != totalEntries)
                {
                    throw new Exception("Wrong View Size Expected " + totalEntries + "Recived " + Result.ViewSize);
                }

                if (Result.RowsLen != req.PageSize)
                {
                    if (Expected_rows[0] == -1)
                    {
                        throw new StatsException(707, "verify: XeStatsEnum Expected row count: " + req.PageSize + " Recived :" + Result.RowsLen);
                    }
                    else if (Expected_rows[i] != Result.RowsLen)
                    {
                        throw new StatsException(707, "verify: XeStatsRead Expected Resultset count: " + Expected_rows + " Recived :" + Result.RowsLen);
                    }
                }

                int Columncount = req.Specs[i].ColumnIds.Length;

                for (int rowidx = 0, lsti = startrank - 1; rowidx < Result.RowsLen && lsti < (int)totalEntries; rowidx++, lsti++)
                {
                    StatsRow tmpRow = Result.Rows[rowidx];

                    if (tmpRow.ColumnsLen != Columncount)
                    {
                        throw new StatsException(707, "verify: XeStatsRead Expected column count:" + Columncount + " Recived :" + tmpRow.ColumnsLen + " for view ID = " + Result.ViewId + " user id=" + tmpRow.Puid);
                    }

                    if (tmpRow.ColumnsLen == 0)
                    {
                        // Nothing else to verify, everything ok so far, therefore: everything is ok.
                        return;
                    }

                    PlayerTeamLbEntry PalyerEntry = (PlayerTeamLbEntry)lb._rankedEntries[lsti];

                    if (tmpRow.Puid != PalyerEntry._ulUserId)
                    {
                        throw new StatsException(707, "verify: XeStatsEnum Expected user:" + PalyerEntry._ulUserId + " Recived :" + tmpRow.Puid + " for view ID = " + viewid);
                    }

                    if (tmpRow.Rank != PalyerEntry._uiRank)
                    {
                        throw new StatsException(707, "verify: XeStatsEnum Expected Rank for user :" + PalyerEntry._uiRank + " Recived :" + tmpRow.Rank + " for view ID = " + viewid + "user " + PalyerEntry._ulUserId);
                    }

                    if (tmpRow.Rating != (ulong)PalyerEntry._lRating)
                    {
                        throw new StatsException(707, "verify: XeStatsEnum Expected rating for user :" + PalyerEntry._lRating + " Recived :" + tmpRow.Rating + " for view ID = " + viewid + "user " + PalyerEntry._ulUserId);
                    }

                    XrlSubAttr[] SubAttr = tmpRow.Columns;
                    for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                    {
                        if (PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
                        {
                            XrlSubAttr PlayerAttr = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];

                            string error = null;
                            if (!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr, ref SubAttr[attidx], ref error))
                            {
                                throw new StatsException(707, error);
                            }
                        }
                        else
                        {
                            if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                            {
                                throw new StatsException(707, "Invalid Type Expected None");
                            }
                            if (SubAttr[attidx].Data != null)
                            {
                                throw new StatsException(707, "Invalid data Expected null");
                            }
                        }
                    } // Attri Loop
                } // Row Loop
            } // Results Loop
        } // VerifyEnum()
    } // XeEnumByRankBase
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\EnumLoader.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

public class EnumLoader
{
    static bool AlreadyPopulated
    {
        get
        {
            if(g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs == null)
                return false;
            foreach(TitleLbKey key in g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs.Keys)
            {
                if (key._uiTitleId == 816)
                    return true;
            }
            return false;
        }
    }

    public static void PopulateLBForEnum()
    {
        //populate 10 leaderboards with 100 users each.

        //attribute 1 to 21 type int.
        //21 to 41 type long 
        // greater then 41 type double.

        if (!AlreadyPopulated)
        {
            LeaderboardInfo[] lbinfos = new LeaderboardInfo[17];
            for (int i = 0; i < lbinfos.Length; i++)
            {
                lbinfos[i] = new LeaderboardInfo((uint)(i + 1), "", 0, 0, 0);
            }

            StatsPoster tmp = new StatsPoster(816, lbinfos);
            tmp.createLB();

            tmp.AddUsers(1000, 0, 20, SpecialAttribMask.Rating);
            tmp.AddUsers(100, 1, 1, SpecialAttribMask.Rating); //64 attributes populated .
            tmp.AddUsers(100, 1, 64, SpecialAttribMask.Null);
            tmp.AddUsers(1, 2, 20, SpecialAttribMask.Rating); // lbid=2  lbsize=1
            tmp.AddUsers(99, 4, 20, SpecialAttribMask.Rating, 5000, 10); // lbid=5  lbsize=99
            tmp.AddUsers(2, 5, 20, SpecialAttribMask.Rating, 5092, 1);
            tmp.AddUsers(4, 5, 20, SpecialAttribMask.Null); // lbid=6  lbsize=4

            for (int j = 6; j < lbinfos.Length - 1; j++)
            {
                tmp.AddUsers(100, j, 60, SpecialAttribMask.Rating);
            }
        }
    }

    public static void PupulateLDForEstimateR(uint title)
    {
        StatsPoster tmp = new StatsPoster(title, new LeaderboardInfo[] { new LeaderboardInfo(1, "", 0, 0, 0), new LeaderboardInfo(2, "", 0, 0, 0), new LeaderboardInfo(3, "", 0, 0, 0) });
        tmp.createLB();

        tmp.AddUsers(100, 0, 60, SpecialAttribMask.Rating, 5, 5); //64 attributes populated .
        tmp.AddUsers(100, 1, 10, SpecialAttribMask.Rating, 1, 7);
    }


    public static void PupulateLDForRead(uint title)
    {
        //populate 10 leaderboards with 100 users each.

        //attribute 1 to 21 type int.
        //21 to 41 type long 
        // greater then 41 type double.

        StatsPoster tmp = new StatsPoster(
            title,
            new LeaderboardInfo[]{
                new LeaderboardInfo( 1  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 2  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 3  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 4  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 5  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 6  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 7  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 8  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 9  , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 10 , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 11 , "" , 0 , 0 , 0 ),
                new LeaderboardInfo( 12 , "" , 0 , 0 , 0 )
           }
        );

        tmp.createLB();

        for (int i = 0; i < 10; i++)
        {
            Global.RO.Info("Loading leaderboard " + (i + 1) + " with 102 users");
            // 15 attributes populated .
            tmp.AddUsers(120, i, 1, SpecialAttribMask.Rating); //64 attributes populated .
            tmp.AddUsers(120, i, 64, SpecialAttribMask.Null);

        }

        tmp.AddUsers(120, 10, 15, SpecialAttribMask.Rating);
        tmp.AddUsers(20, 11, 15, SpecialAttribMask.Rating);
    }

    public class StatsPoster
    {
        protected uint TitleID;
        protected LeaderboardInfo[] LBids = null;
        protected int Userbase = 5000;

        public object[] GetAttributes(uint Attcount, int spattmask, long Urating)
        {
            object[] tmp = new object[Attcount * 2];
            ushort addattr = 1;

            for (uint index = 0; index < (Attcount * 2); index += 2)
            {
                if ((spattmask & SpecialAttribMask.Rating) == SpecialAttribMask.Rating)
                {
                    tmp[index] = SpecialAttrib.Rating;
                    tmp[index + 1] = Urating;
                    spattmask = 0;

                }
                else
                {
                    if (addattr >= 1 && addattr < 21)
                    {
                        tmp[index] = (short)addattr;
                        tmp[index + 1] = (int)DataGen.GetRandomVal();
                        addattr++;
                    }
                    else if (addattr >= 21 && addattr < 41)
                    {
                        tmp[index] = (short)addattr;
                        tmp[index + 1] = (long)DataGen.GetRandomVal();
                        addattr++;
                    }
                    else if (addattr >= 41)
                    {
                        tmp[index] = (short)addattr;
                        tmp[index + 1] = (double)DataGen.GetRandomVal();
                        addattr++;
                    }
                }
            }

            return tmp;
        }

        //SpecialAttribMask.Rating

        public void AddUsers(int count, int lbindex, uint Attcount, int spattmask)
        {
            AddUsers(count, lbindex, Attcount, spattmask, Userbase, 1);
        }

        public void AddUsers(int count, int lbindex, uint Attcount, int spattmask, long RatingStart, int ratdiff)
        {
            //VerifyFlags.Player
            AddUsers(count, lbindex, Attcount, spattmask, RatingStart, ratdiff, VerifyFlags.Player);
        }

        public void AddUsers(int count, int lbindex, uint Attcount, int spattmask, long RatingStart, int ratdiff, int verifyFlag)
        {
            int NoofReq = count < 100 ? 1 : count / 100;
            StatsPostReq[] temp = new StatsPostReq[NoofReq];

            for (int cnt = 0; cnt < NoofReq; cnt++)
            {
                RequestBuilder _Req = null;
                _Req = new RequestBuilder();

                int NoOfUsers = 0;
                if (count > 100)
                {
                    NoOfUsers = 100;
                    count = count - 100;
                }
                else
                {
                    NoOfUsers = count;
                }

                ulong[] users = new ulong[NoOfUsers];
                for (int i = 0; i < NoOfUsers; i++)
                {
                    users[i] = (ulong)(Userbase + (long)(i + (NoOfUsers * cnt)));
                    object[] attributes = GetAttributes(Attcount, spattmask, (RatingStart + (long)(i * ratdiff + (NoOfUsers * cnt * ratdiff))));
                    StatsPlayerReplace _data = new StatsPlayerReplace((int)LBids[lbindex]._uiLbId, (ulong)users[i], 0, attributes);
                    _Req.AddProcs(_data.Proc);

                }

                _Req.Builder(TitleID, users, true, false);

                temp[cnt] = _Req.GetPostData();
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, verifyFlag);
        }

        public StatsPoster(uint title, LeaderboardInfo[] lbids)
        {
            TitleID = title;
            LBids = lbids;
        }

        public void createLB()
        {
            // change this code to work with new LB server
            if (LBids != null)
            {
                DBHelper db = new DBHelper(g_Statobj.TManager.Im_Stats, true);
                db.ConfigureTitle((int)TitleID, LBids);
            }
        }
    } // StatsPoster
} // EnumLoader
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\EnumByUser.cs ===
using System;
using System.Collections;
using System.IO;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	class XeEnumByUser :TestNode
	{
		uint title= 816;
		
		public override void PreRun()
		{
			 EnumLoader.PopulateLBForEnum();
		}

		public XeEnumByUser()
		{
			AddChild(new TCValidRank(title));  //page size 100.
			AddChild(new TCNonExistent(title));

			AddChild(new TCValid5LBs(title));
			AddChild(new TCSameViewTwice(title));
			AddChild(new TCValid3LBSEachDiffSize(title));
			AddChild(new TCValidMaxLBs(title));
			AddChild(new TCValidMax_1LBs(title));
			AddChild(new TCValidMaxPlus1LBs(title));
			AddChild(new TCValidnonExistingAtBegining(title));
			AddChild(new TCValidnonExistingAtMiddle(title));
			AddChild(new TCValidnonExistingAtEnd(title));
			AddChild(new TCInValididx2(title));
			

			//pagesize
			AddChild(new TCPageSize0(title));
			AddChild(new TCPageSize1(title));
			AddChild(new TCPageSize99(title));
			//TCAttribute

			//Count
			AddChild(new TCAttributeCount0(title));
			AddChild(new TCAttributeCount1(title));
			AddChild(new TCAttributeCount63(title));
			AddChild(new TCAttributeCount64(title));
			AddChild(new TCDuplicateAttrib(title));

			//nonExisting
			AddChild(new TCnonExistingAttrib(title));
			AddChild(new TCMixExisting_nonAttrib(title));

			//TCLB_PageSize_Comb
			AddChild(new TCLB99PS98(title));
			AddChild(new TCLB99PS99(title));
			AddChild(new TCLB99PS100(title));
			AddChild(new TCLB0PS100(title));
			AddChild(new TCLB1PS100(title));

			//TCStartPosition
			AddChild(new TCStartPosition1(title));
			AddChild(new TCStartPosition99(title));
			AddChild(new TCStartPosition100(title));

			// special case.
			AddChild(new TCStartPosition50(title));
			AddChild(new TCStartPosition25(title));
			AddChild(new TCStartPosition75(title));

			AddChild(new TCStartPosition125lbs1000(title));
			
			//TCInvalidRequest

			AddChild(new TCInvalidTitle(title));
			AddChild(new TCInvalidLBID(title));
			AddChild(new TCInvalidAttrib65(title));
			AddChild(new TCInvalidMax_1PS(title));

			//TCInvalidMessage
			AddChild(new TCAttribCountdiff(title));
			AddChild(new TCInvalidSmallPKT());
			AddChild(new TCInvalidLargePKT());
			
			//special case try
			AddChild(new TCUserNoRating(title));
		}

		public class TCInValididx2 : XeEnumByUserBase
		{
			public TCInValididx2(uint title):base(title,new uint[]{7,51,6})
			{ }

			override public void init()
			{
				this.Startrank[0]=1;
				this.Startrank[1]=1;
				this.Startrank[2]=1;
				StatsSpec[] specs= new StatsSpec[viewids.Length];

				for(int i=0;i<viewids.Length;i++)
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

				ulong userid = this.getPuidOFRank(10);
				req= new StatsEnumByUserRequest(title,userid,100,specs);
				Expected_XErr= HResult.XONLINE_E_SERVER_ERROR;
			}
		}

		public class TCValidnonExistingAtEnd : XeEnumByUserBase
		{
			public TCValidnonExistingAtEnd(uint title):base(title,new uint[]{7,8,6})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{100,100,0};
				this.Startrank[0]=10;
				this.Startrank[1]=10;
				this.Startrank[2]=10;
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getPuidOFRank(10);
				this.Startrank[0]=1;
				this.Startrank[1]=1;
				this.Startrank[2]=1;
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		public class TCValidnonExistingAtMiddle : XeEnumByUserBase
		{
			public TCValidnonExistingAtMiddle(uint title):base(title,new uint[]{7,6,8})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{100,0,100};
				this.Startrank[0]=10;
				this.Startrank[1]=10;
				this.Startrank[2]=10;
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getPuidOFRank(10);
				this.Startrank[0]=1;
				this.Startrank[1]=1;
				this.Startrank[2]=1;
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		public class TCValidnonExistingAtBegining : XeEnumByUserBase
		{
			public TCValidnonExistingAtBegining(uint title):base(title,new uint[]{6,7,8})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{0,100,100};
				this.Startrank[0]=10;
				this.Startrank[1]=10;
				this.Startrank[2]=10;
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getPuidOFRank(10,1);
				this.Startrank[0]=1;
				this.Startrank[1]=1;
				this.Startrank[2]=1;
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		public class TCValidMaxPlus1LBs : XeEnumByUserBase
		{
			public TCValidMaxPlus1LBs(uint title):base(title,new uint[]{1,7,8,9,10,11,12,13,14,15,16})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,specs);

                Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
			
			}

		}

		public class TCValidMax_1LBs : XeEnumByUserBase
		{
			public TCValidMax_1LBs(uint title):base(title,new uint[]{7,8,9,10,11,12,13,14,15})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		public class TCValidMaxLBs : XeEnumByUserBase
		{
			public TCValidMaxLBs(uint title):base(title,new uint[]{7,8,9,10,11,12,13,14,15,16})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		public class TCValid3LBSEachDiffSize : XeEnumByUserBase
		{
			public TCValid3LBSEachDiffSize(uint title):base(title,new uint[]{1,6,5})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{100,2,99};
				this.Startrank= new int[]{901,1,1};
				
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
					
				}
				ulong userid = this.getPuidOFRank(1,1);

				
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}

		//TCSameViewTwice
		public class TCSameViewTwice : XeEnumByUserBase
		{
			public TCSameViewTwice(uint title):base(title,new uint[]{7,8,9,8})
			{
			}
			override public void init()
			{
				
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
					this.Startrank[i]=1;
				}
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}


		public class TCValid5LBs : XeEnumByUserBase
		{
			public TCValid5LBs(uint title):base(title,new uint[]{7,8,9,10,11})
			{
			}
			override public void init()
			{
				
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i] = new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
					this.Startrank[i]=1;
				}
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,specs);
			
			}

		}


		public class TCUserNoRating : XeEnumByUserBase
		{
			public TCUserNoRating(uint title):base(title,6)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,Userbase+2,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCInvalidSmallPKT:TestBase
		{
			override protected void Execute()
			{

				InvalidXRLRequest tmp = new InvalidXRLRequest(10,"/xstats/xstatenumbyuser.ashx");
				uint xerror= tmp.Execute();
				if(xerror != HResult.XONLINE_E_END_OF_STREAM)
					throw new Exception("Invalid Xerror Expected :"+ HResult.E_FAIL+" recived:"+xerror);

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public class TCInvalidLargePKT:TestBase
		{
			override protected void Execute()
			{

				InvalidXRLRequest tmp = new InvalidXRLRequest(1000*10,"/xstats/xstatenumbyuser.ashx");
				uint xerror= tmp.Execute();
                if (xerror != HResult.XONLINE_E_DESERIALIZATION_ERROR)
					throw new Exception("Invalid Xerror Expected :"+ HResult.E_FAIL+" recived:"+xerror);

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public class TCAttribCountdiff : XeEnumByUserBase
		{
			public TCAttribCountdiff(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],10,new ushort[]{1,2,3});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				this.Expected_XErr= HResult.XONLINE_E_END_OF_STREAM;
			
			}

		}

		public class TCInvalidMax_1PS : XeEnumByUserBase
		{
			public TCInvalidMax_1PS(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				ushort[] attribs = new ushort[64];
				for(ushort i=0;i<64;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),101,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
			
			}

		}

		public class TCInvalidAttrib65 : XeEnumByUserBase
		{
			public TCInvalidAttrib65(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				ushort[] attribs = new ushort[65];
				for(ushort i=0;i<65;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
			
			}

		}

		public class TCInvalidLBID : XeEnumByUserBase
		{
			public TCInvalidLBID(uint title):base(title,299)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.Userbase+2,100,spec);
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;
			
			}

		}

		public class TCInvalidTitle : XeEnumByUserBase
		{
			public TCInvalidTitle(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title+10,this.getPuidOFRank(1),100,spec);
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;
			
			}

		}

		public class TCStartPosition125lbs1000 : XeEnumByUserBase
		{
			public TCStartPosition125lbs1000(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=75;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(125),100,spec);
				
			
			}

		}


		public class TCStartPosition75 : XeEnumByUserBase
		{
			public TCStartPosition75(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				this.Expected_rows[0]=76;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(75),100,spec);
				
			
			}

		}

		public class TCStartPosition50 : XeEnumByUserBase
		{
			public TCStartPosition50(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(50),100,spec);
				
			
			}

		}

		public class TCStartPosition25 : XeEnumByUserBase
		{
			public TCStartPosition25(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(25),100,spec);
				
			
			}

		}

		public class TCStartPosition100 : XeEnumByUserBase
		{
			public TCStartPosition100(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				this.Expected_rows[0]=51;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(100),100,spec);
				
			
			}

		}

		public class TCStartPosition99 : XeEnumByUserBase
		{
			public TCStartPosition99(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				this.Expected_rows[0]=52;

				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(99),100,spec);
				
			
			}

		}

		public class TCStartPosition1 : XeEnumByUserBase
		{
			public TCStartPosition1(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),100,spec);
				
			
			}

		}

		public class TCLB1PS100 : XeEnumByUserBase
		{
			public TCLB1PS100(uint title):base(title,3)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),100,spec);
				this.Expected_rows[0]=1;
			
			}

		}

		public class TCLB0PS100 : XeEnumByUserBase
		{
			public TCLB0PS100(uint title):base(title,4)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.Userbase+1,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCLB99PS100 : XeEnumByUserBase
		{
			public TCLB99PS100(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),100,spec);
				this.Expected_rows[0]=99;
			
			}

		}

		public class TCLB99PS99 : XeEnumByUserBase
		{
			public TCLB99PS99(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),99,spec);
				this.Expected_rows[0]=99;
			
			}

		}

		public class TCLB99PS98 : XeEnumByUserBase
		{
			public TCLB99PS98(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),98,spec);
				this.Expected_rows[0]=98;
			
			}

		}

		public class TCMixExisting_nonAttrib : XeEnumByUserBase
		{
			public TCMixExisting_nonAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{10,31,41,1});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		//TCDuplicateAttrib
		public class TCDuplicateAttrib : XeEnumByUserBase
		{
			public TCDuplicateAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,1,5});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}


		public class TCnonExistingAttrib : XeEnumByUserBase
		{
			public TCnonExistingAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{31,41});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount64 : XeEnumByUserBase
		{
			public TCAttributeCount64(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				ushort[] attribs = new ushort[64];
				for(ushort i=0;i<64;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount63 : XeEnumByUserBase
		{
			public TCAttributeCount63(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				ushort[] attribs = new ushort[63];
				for(ushort i=0;i<63;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount1 : XeEnumByUserBase
		{
			public TCAttributeCount1(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount0 : XeEnumByUserBase
		{
			public TCAttributeCount0(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),10,spec);
				
			
			}

		}

		public class TCPageSize99 : XeEnumByUserBase
		{
			public TCPageSize99(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),99,spec);
				
			
			}

		}

		public class TCPageSize1 : XeEnumByUserBase
		{
			public TCPageSize1(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),1,spec);
				
			
			}

		}


		public class TCPageSize0 : XeEnumByUserBase
		{
			public TCPageSize0(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				
				req= new StatsEnumByUserRequest(title,this.getPuidOFRank(1),0,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
				
			
			}

		}

		public class TCNonExistent : XeEnumByUserBase
		 {
			public TCNonExistent(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,Userbase+50000,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCValidRank : XeEnumByUserBase
		{
			public TCValidRank(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getPuidOFRank(1);
				req= new StatsEnumByUserRequest(title,userid,100,spec);
			
			}

		}

	}

	class XeEnumByUserBase: TestBase
	{
		protected uint title =0;
		protected uint[] viewids=null;
		public uint Expected_XErr=0;
		public int[] Expected_rows= new int[1];
		protected StatsEnumByUserRequest req= null;
		protected int[] Startrank=new int[1];
		protected ulong Userbase= 5000;

		public XeEnumByUserBase(uint _title, uint _viewid)
		{
			title = _title;
			viewids = new uint[] {_viewid};
			Expected_rows[0]=-1;
		}

		public XeEnumByUserBase(uint _title, uint[] _viewids)
		{
			title = _title;
			viewids = _viewids;
			Expected_rows= new int[viewids.Length];
			Startrank = new int[viewids.Length];
			for(int i=0;i<Expected_rows.Length;i++)
				Expected_rows[i]=-1;
		}

		virtual public void init()
		{ }

		override protected void Execute()
		{
			init();

            if (req != null)
            {
                StatsEnumResponse resp = req.Execute();
                if (XResult.Failed(Expected_XErr))
                {
                    if (resp.xResult != Expected_XErr)
                    {
                        throw new StatsException(707, "UnExpected XError  Expected :" + Expected_XErr + " Recived : " + resp.xResult);
                    }
                }
                else if (XResult.Succeeded(resp.xResult))
                {
                    verifyEnum(resp, Startrank);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error("Stats Read not initilized");
                ResultCode = TEST_RESULTS.FAILED;
            }
		}

		public ulong getPuidOFRank(int rank)
		{
			return getPuidOFRank(rank,0);
		}

		public ulong getPuidOFRank(int rank,int viewindex)
		{
			ulong puid =0;
			TitleLbKey tlbkey = new TitleLbKey(title,viewids[viewindex]);
			PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
			
			if(rank >0 && rank<=lb._rankedEntries.Count)
			{

				PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._rankedEntries[rank-1];
				puid= PalyerEntry._ulUserId;

			}

			return puid;
		}

		public void verifyEnum(StatsEnumResponse resp, int[] startrank)
		{

			if(resp.ResultLen!= req.Specs.Length)
				throw new StatsException(707,"verify: XeStatsEnum Expected Result set : "+req.Specs.Length+" Recived :"+resp.ResultLen);

			StatsResultSet[] Results = resp.Result;

			for(int i=0 ;i<Results.Length ;i++)
			{
				StatsResultSet Result = Results[i];
				
				if(Result.ViewId != req.Specs[i].ViewId)
					throw new Exception(" Unexpected  view server= "+Result.ViewId+" Expected "+req.Specs[i].ViewId);
				uint viewid=(uint) req.Specs[i].ViewId;

				TitleLbKey tlbkey = new TitleLbKey(title,viewid);
				PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
				ArrayList enumlist = lb.GetRankedList();
				ulong totalEntries= (ulong)lb._rankedEntries.Count;

				if(Result.ViewSize!=totalEntries)
					throw new Exception("Wrong View Size Expected "+totalEntries+"Recived "+Result.ViewSize);

				if(Result.RowsLen !=req.PageSize)
				{
					if(Expected_rows[i]==-1)
						throw new StatsException(707,"verify: XeStatsEnum Expected row count: "+req.PageSize+" Recived :"+Result.RowsLen);
					else if (Expected_rows[i]!= Result.RowsLen)
						throw new StatsException(707,"verify: XeStatsRead Expected Resultset count: "+Expected_rows[i]+" Recived :"+Result.RowsLen);
				}

				int Columncount= req.Specs[i].ColumnIds.Length;

				for( int rowidx=0,lsti=startrank[i]-1 ;rowidx <Result.RowsLen && lsti< (int)totalEntries ;rowidx++,lsti++)
				{
					StatsRow tmpRow = Result.Rows[rowidx];

					if(tmpRow.ColumnsLen!=Columncount)
						throw new StatsException(707,"verify: XeStatsRead Expected column count:"+Columncount+" Recived :"+tmpRow.ColumnsLen+" for view ID = "+Result.ViewId+" user id="+tmpRow.Puid);
					
					if(tmpRow.ColumnsLen ==0)
						return;

					PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._rankedEntries[lsti];

					if(tmpRow.Puid != PalyerEntry._ulUserId)
						throw new StatsException(707,"verify: XeStatsEnum Expected user:"+PalyerEntry._ulUserId+" Recived :"+tmpRow.Puid+" for view ID = "+viewid);

					if(tmpRow.Rank != PalyerEntry._uiRank)
						throw new StatsException(707,"verify: XeStatsEnum Expected Rank for user :"+PalyerEntry._uiRank+" Recived :"+tmpRow.Rank+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					if(tmpRow.Rating != (ulong)PalyerEntry._lRating)
						throw new StatsException(707,"verify: XeStatsEnum Expected rating for user :"+PalyerEntry._lRating+" Recived :"+tmpRow.Rating+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					XrlSubAttr[] SubAttr =tmpRow.Columns;
					for(int attidx=0;attidx<SubAttr.Length;attidx++)
					{
						if(PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
						{
							XrlSubAttr PlayerAttr  = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
							string error= null;
							if(!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr,ref SubAttr[attidx],ref error))
								throw new StatsException(707,error);
						}
						else
						{
							if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
								throw new StatsException(707,"Invalid Type Expected None");
							if( SubAttr[attidx].Data != null)
								throw new StatsException(707,"Invalid data Expected null");
						}
					}
				}
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\EnumByRating.cs ===
using System;
using System.Collections;
using System.IO;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
	class XeEnumByRating :TestNode
	{
		uint title= 816;
		
		public override void PreRun()
		{
			 EnumLoader.PopulateLBForEnum();
		}

		public XeEnumByRating()
		{
			AddChild(new TCValidRank(title));  //page size 100.

			AddChild(new TCValid5LBs(title));
			AddChild(new TCSameViewTwice(title));
			AddChild(new TCValid3LBSEachDiffSize(title));
			AddChild(new TCValidMaxLBs(title));
			AddChild(new TCValidMax_1LBs(title));
			AddChild(new TCValidMaxPlus1LBs(title));
			AddChild(new TCValidnonExistingAtBegining(title));
			AddChild(new TCValidnonExistingAtMiddle(title));
			AddChild(new TCValidnonExistingAtEnd(title));
			AddChild(new TCInValididx2(title));

			//pagesize
			AddChild(new TCPageSize0(title));
			AddChild(new TCPageSize1(title));
			AddChild(new TCPageSize99(title));
			//TCAttribute

			//Count
			AddChild(new TCAttributeCount0(title));
			AddChild(new TCAttributeCount1(title));
			AddChild(new TCAttributeCount63(title));
			AddChild(new TCAttributeCount64(title));
			AddChild(new TCDuplicateAttrib(title));

			//nonExisting
			AddChild(new TCnonExistingAttrib(title));
			AddChild(new TCMixExisting_nonAttrib(title));

			//TCLB_PageSize_Comb
			AddChild(new TCLB99PS98(title));
			AddChild(new TCLB99PS99(title));
			AddChild(new TCLB99PS100(title));
			AddChild(new TCLB0PS100(title));
			AddChild(new TCLB1PS100(title));

			//TCStartPosition
			AddChild(new TCStartPosition1(title));
			AddChild(new TCStartPosition99(title));
			AddChild(new TCStartPosition100(title));
			AddChild(new TCSP100LBS1000(title));
			AddChild(new TCSP998LBS1000(title));

			// special case.
			AddChild(new TCSpB50_51(title));
			AddChild(new TCRating0(title));
			AddChild(new TCMaxRating(title));

			//TCInvalidRequest

			AddChild(new TCInvalidTitle(title));
			AddChild(new TCInvalidLBID(title));
			AddChild(new TCInvalidAttrib65(title));
			AddChild(new TCInvalidMax_1PS(title));

			//TCInvalidMessage

			AddChild(new TCAttribCountdiff(title));
			AddChild(new TCInvalidSmallPKT());
			AddChild(new TCInvalidLargePKT());
		}

		public class TCInValididx2 : XeEnumByRatingBase
		{
			public TCInValididx2(uint title):base(title,new uint[]{7,58})
			{
			}
			override public void init()
			{
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

				this.Startrank[0]=1;
				this.Startrank[1]=1;
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
                Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;
			
			}

		}

		public class TCValidnonExistingAtEnd : XeEnumByRatingBase
		{
			public TCValidnonExistingAtEnd(uint title):base(title,new uint[]{7,8,6})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{91,91,0};
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

				this.Startrank[0]=10;
				this.Startrank[1]=10;
				this.Startrank[2]=10;
				ulong rating = this.getRatingOFRank(10);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValidnonExistingAtMiddle : XeEnumByRatingBase
		{
			public TCValidnonExistingAtMiddle(uint title):base(title,new uint[]{7,6,8})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{91,0,91};
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

				this.Startrank[0]=10;
				this.Startrank[1]=10;
				this.Startrank[2]=10;
				ulong rating = this.getRatingOFRank(10);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValidnonExistingAtBegining : XeEnumByRatingBase
		{
			public TCValidnonExistingAtBegining(uint title):base(title,new uint[]{6,7,8})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{0,91,91};
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

				Startrank[0]=10;
				Startrank[1]=10;
				Startrank[2]=10;
				ulong rating = this.getRatingOFRank(10,1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValidMaxPlus1LBs : XeEnumByRatingBase
		{
			public TCValidMaxPlus1LBs(uint title):base(title,new uint[]{6,7,8,9,10,11,12,13,14,15,16})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);

				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
                Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
			
			}

		}

		public class TCValidMax_1LBs : XeEnumByRatingBase
		{
			public TCValidMax_1LBs(uint title):base(title,new uint[]{7,8,9,10,11,12,13,14,15,16})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);

				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}

				
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValidMaxLBs : XeEnumByRatingBase
		{
			public TCValidMaxLBs(uint title):base(title,new uint[]{7,8,9,10,11,12,13,14,15,16})
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[60];

				for(int j=0;j<attribs.Length;j++)
					attribs[j]=(ushort) (j+1);

				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],attribs);
					this.Startrank[i]=1;
				}
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValid3LBSEachDiffSize : XeEnumByRatingBase
		{
			public TCValid3LBSEachDiffSize(uint title):base(title,new uint[]{1,6,2})
			{
			}
			override public void init()
			{
				this.Expected_rows= new int[]{100,2,100};
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
					this.Startrank[i]=1;
				}
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCSameViewTwice : XeEnumByRatingBase
		{
			public TCSameViewTwice(uint title):base(title,new uint[]{7,8,9,8})
			{
			}
			override public void init()
			{
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});
					this.Startrank[i]=1;
				}
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}

		public class TCValid5LBs : XeEnumByRatingBase
		{
			public TCValid5LBs(uint title):base(title,new uint[]{7,8,9,10,11})
			{
			}
			override public void init()
			{
				StatsSpec[] specs= new StatsSpec[viewids.Length];
				for(int i=0;i<viewids.Length;i++)
				{
					specs[i]= new StatsSpec(viewids[i],new ushort[]{1,2,3,4,5,6});

					this.Startrank[i]=1;
				}
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,specs);
			
			}

		}


		public class TCInvalidSmallPKT:TestBase
		{
			override protected void Execute()
			{

				InvalidXRLRequest tmp = new InvalidXRLRequest(10,"/xstats/xstatenumbyrating.ashx");
				uint xerror= tmp.Execute();
				if(xerror != HResult.XONLINE_E_END_OF_STREAM)
					throw new Exception("Invalid Xerror Expected :"+ HResult.E_FAIL+" recived:"+xerror);

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public class TCInvalidLargePKT:TestBase
		{
			override protected void Execute()
			{

				InvalidXRLRequest tmp = new InvalidXRLRequest(1000*10,"/xstats/xstatenumbyrating.ashx");
				uint xerror= tmp.Execute();
                if (xerror != HResult.XONLINE_E_DESERIALIZATION_ERROR)
					throw new Exception("Invalid Xerror Expected :"+ HResult.E_FAIL+" recived:"+xerror);

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

		public class TCAttribCountdiff : XeEnumByRatingBase
		{
			public TCAttribCountdiff(uint title):base(title,2)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],10,new ushort[]{1,2,3});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				this.Expected_XErr= HResult.XONLINE_E_END_OF_STREAM;
			
			}

		}

		public class TCInvalidMax_1PS : XeEnumByRatingBase
		{
			public TCInvalidMax_1PS(uint title):base(title,2)
			{
			}
			override public void init()
			{
				ushort[] attribs = new ushort[64];
				for(ushort i=0;i<64;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),101,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
				
			
			}

		}

		public class TCInvalidAttrib65 : XeEnumByRatingBase
		{
			public TCInvalidAttrib65(uint title):base(title,2)
			{
			}
			override public void init()
			{
				
				ushort[] attribs = new ushort[65];
				for(ushort i=0;i<65;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
			
			}

		}

		public class TCInvalidLBID : XeEnumByRatingBase
		{
			public TCInvalidLBID(uint title):base(title,299)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.Userbase+2,100,spec);
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;
			
			}

		}

		public class TCInvalidTitle : XeEnumByRatingBase
		{
			public TCInvalidTitle(uint title):base(title,2)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title+10,this.getRatingOFRank(1),100,spec);
                this.Expected_XErr = HResult.XONLINE_E_SERVER_ERROR;
			
			}

		}

		public class TCSP998LBS1000 : XeEnumByRatingBase
		{
			public TCSP998LBS1000(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=998;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(998),100,spec);
				this.Expected_rows[0]=3;
				
			
			}

		}


		public class TCSP100LBS1000 : XeEnumByRatingBase
		{
			public TCSP100LBS1000(uint title):base(title,1)
			{
			}
			override public void init()
			{
				this.Startrank[0]=100;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(100),100,spec);
				
				
			
			}

		}


	
		public class TCStartPosition100 : XeEnumByRatingBase
		{
			public TCStartPosition100(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=100;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(100),100,spec);
				this.Expected_rows[0]=1;
				
			
			}

		}

		public class TCStartPosition99 : XeEnumByRatingBase
		{
			public TCStartPosition99(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=99;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(99),100,spec);
				this.Expected_rows[0]=2;
				
			
			}

		}
		//TCSpB100_101

		public class TCRating0 : XeEnumByRatingBase
		{
			public TCRating0(uint title):base(title,5)
			{
			}
			override public void init()
			{
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,0,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCSpB50_51 : XeEnumByRatingBase
		{
			public TCSpB50_51(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=50;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(50)+1,100,spec);
				this.Expected_rows[0]=50;
				
			
			}

		}


		public class TCStartPosition1 : XeEnumByRatingBase
		{
			public TCStartPosition1(uint title):base(title,2)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),100,spec);
				
			
			}

		}

		public class TCLB1PS100 : XeEnumByRatingBase
		{
			public TCLB1PS100(uint title):base(title,3)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),100,spec);
				this.Expected_rows[0]=1;
			
			}

		}

		public class TCLB0PS100 : XeEnumByRatingBase
		{
			public TCLB0PS100(uint title):base(title,4)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.Userbase+1,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCLB99PS100 : XeEnumByRatingBase
		{
			public TCLB99PS100(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),100,spec);
				this.Expected_rows[0]=99;
			
			}

		}

		public class TCLB99PS99 : XeEnumByRatingBase
		{
			public TCLB99PS99(uint title):base(title,5)
			{
			}
			override public void init()
			{
				this.Startrank[0]=1;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),99,spec);
				this.Expected_rows[0]=99;
			
			}

		}

		public class TCLB99PS98 : XeEnumByRatingBase
		{
			public TCLB99PS98(uint title):base(title,5)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),98,spec);
				this.Expected_rows[0]=98;
			
			}

		}

		public class TCMixExisting_nonAttrib : XeEnumByRatingBase
		{
			public TCMixExisting_nonAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{10,31,41,1});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		//TCDuplicateAttrib
		public class TCDuplicateAttrib : XeEnumByRatingBase
		{
			public TCDuplicateAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,5,2});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}


		public class TCnonExistingAttrib : XeEnumByRatingBase
		{
			public TCnonExistingAttrib(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{31,41});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount64 : XeEnumByRatingBase
		{
			public TCAttributeCount64(uint title):base(title,2)
			{
			}
			override public void init()
			{
				
				ushort[] attribs = new ushort[64];
				for(ushort i=0;i<64;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount63 : XeEnumByRatingBase
		{
			public TCAttributeCount63(uint title):base(title,2)
			{
			}
			override public void init()
			{
				
				ushort[] attribs = new ushort[63];
				for(ushort i=0;i<63;i++)
					attribs[i]=(ushort)(i+1);
				StatsSpec spec = new StatsSpec(viewids[0],attribs);
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount1 : XeEnumByRatingBase
		{
			public TCAttributeCount1(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		public class TCAttributeCount0 : XeEnumByRatingBase
		{
			public TCAttributeCount0(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),10,spec);
				
			
			}

		}

		public class TCPageSize99 : XeEnumByRatingBase
		{
			public TCPageSize99(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),99,spec);
				
			
			}

		}

		public class TCPageSize1 : XeEnumByRatingBase
		{
			public TCPageSize1(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),1,spec);
				
			
			}

		}

		public class TCPageSize0 : XeEnumByRatingBase
		{
			public TCPageSize0(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				
				req= new StatsEnumByRatingRequest(title,this.getRatingOFRank(1),0,spec);
                this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
				
			
			}

		}

		public class TCMaxRating : XeEnumByRatingBase
		{
			public TCMaxRating(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				ulong val= 0;
				val = ~val;
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				ulong userid = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,val,100,spec);
				this.Expected_rows[0]=0;
			
			}

		}

		public class TCValidRank : XeEnumByRatingBase
		{
			public TCValidRank(uint title):base(title,1)
			{
			}
			override public void init()
			{
				
				StatsSpec spec = new StatsSpec(viewids[0],new ushort[]{1,2,3,4,5,6});
				ulong rating = this.getRatingOFRank(1);
				req= new StatsEnumByRatingRequest(title,rating,100,spec);
			
			}

		}

	}

	class XeEnumByRatingBase: TestBase
	{
		protected uint title =0;
		protected uint[] viewids=null;
		public uint Expected_XErr=0;
		public int[] Expected_rows=new int[1];
		protected StatsEnumByRatingRequest req= null;
		protected int[] Startrank= new int[1];
		protected ulong Userbase= 5000;

		public XeEnumByRatingBase(uint _title, uint _viewid)
		{
			title = _title;
			viewids = new uint[]{_viewid};
			Expected_rows[0]=-1;
			Startrank[0]=1;
		}

		public XeEnumByRatingBase(uint _title, uint[] _viewids)
		{
			title = _title;
			viewids = _viewids;
			Expected_rows= new int[viewids.Length];
			Startrank = new int[viewids.Length];

			for(int i=0;i<Expected_rows.Length;i++)
				Expected_rows[i]=-1;
		}

		virtual public void init()
		{ }

		override protected void Execute()
		{
			init();
			if(req!=null)
			{
				StatsEnumResponse resp =req.Execute();

				if(XResult.Failed(Expected_XErr ))
				{
					if (resp.xResult != Expected_XErr)
					{
						throw new StatsException(707,"UnExpected XError  Expected :"+Expected_XErr+ " Recived : "+ resp.xResult);
					}
				}
				else if(XResult.Succeeded(resp.xResult))
				{
					verifyEnum(resp,Startrank);
				}
				

				ResultCode=TEST_RESULTS.PASSED;
			}
			else
			{
				Global.RO.Error("Stats Read not initilized");
				ResultCode=TEST_RESULTS.FAILED;
			}
			

			

		}

		public ulong getRatingOFRank(int rank)
		{
			return getRatingOFRank(rank,0);
		}

		public ulong getRatingOFRank(int rank,int viewIndex)
		{
			ulong rating =0;
			TitleLbKey tlbkey = new TitleLbKey(title,viewids[viewIndex]);
			PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
			
			if(rank >0 && rank<=lb._rankedEntries.Count)
			{

				PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._rankedEntries[rank-1];
				rating= (ulong)PalyerEntry._lRating;

			}
			return rating;

		}
		public void verifyEnum(StatsEnumResponse resp, int[] startrank)
		{
			if(resp.ResultLen!= req.Specs.Length)
				throw new StatsException(707,"verify: XeStatsEnum Expected Result set : "+req.Specs.Length+" Recived :"+resp.ResultLen);
			
			StatsResultSet[] Results = resp.Result;



			for(int i=0 ;i<Results.Length ;i++)
			{
				StatsResultSet Result = Results[i];

				if(Result.ViewId != req.Specs[i].ViewId)
					throw new Exception(" Unexpected  view server= "+Result.ViewId+" Expected "+req.Specs[i].ViewId);
				uint viewid=(uint) req.Specs[i].ViewId;


				TitleLbKey tlbkey = new TitleLbKey(title,viewid);
				PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
				ArrayList enumlist = lb.GetRankedList();
				ulong totalEntries= (ulong)lb._rankedEntries.Count;

				if(Result.ViewSize!=totalEntries)
					throw new Exception("Wrong View Size Expected "+totalEntries+"Recived "+Result.ViewSize);


				if(Result.RowsLen !=req.PageSize)
				{
					if(Expected_rows[0]==-1)
						throw new StatsException(707,"verify: XeStatsEnum Expected row count: "+req.PageSize+" Recived :"+Result.RowsLen);
					else if (Expected_rows[i]!= Result.RowsLen)
						throw new StatsException(707,"verify: XeStatsRead Lbid= "+viewid+" Expected Resultset count : "+Expected_rows[i]+" Recived :"+Result.RowsLen);
				}

				int Columncount= req.Specs[i].ColumnIds.Length;


				for( int rowidx=0,lsti=startrank[i]-1 ;rowidx <Result.RowsLen && lsti< (int)totalEntries ;rowidx++,lsti++)
				{
					StatsRow tmpRow = Result.Rows[rowidx];

					if(tmpRow.ColumnsLen!=Columncount)
						throw new StatsException(707,"verify: XeStatsRead Expected column count:"+Columncount+" Recived :"+tmpRow.ColumnsLen+" for view ID = "+Result.ViewId+" user id="+tmpRow.Puid);
					
					if(tmpRow.ColumnsLen ==0)
						return;

					PlayerTeamLbEntry  PalyerEntry=(PlayerTeamLbEntry)lb._rankedEntries[lsti];

					if(tmpRow.Puid != PalyerEntry._ulUserId)
						throw new StatsException(707,"verify: XeStatsEnum Expected user/rating:"+PalyerEntry._ulUserId+"/"+PalyerEntry._lRating+" Recived :"+tmpRow.Puid+""+tmpRow.Rating+" for view ID = "+viewid);

					if(tmpRow.Rank != PalyerEntry._uiRank)
						throw new StatsException(707,"verify: XeStatsEnum Expected Rank for user :"+PalyerEntry._uiRank+" Recived :"+tmpRow.Rank+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					if(tmpRow.Rating != (ulong)PalyerEntry._lRating)
						throw new StatsException(707,"verify: XeStatsEnum Expected rating for user :"+PalyerEntry._lRating+" Recived :"+tmpRow.Rating+" for view ID = "+viewid+"user "+PalyerEntry._ulUserId);

					XrlSubAttr[] SubAttr =tmpRow.Columns;
					for(int attidx=0;attidx<SubAttr.Length;attidx++)
					{
						if(PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
						{
							XrlSubAttr PlayerAttr  = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
							string error= null;
							if(!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr,ref SubAttr[attidx],ref error))
								throw new StatsException(707,error);

						}
						else
						{
							if((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
								throw new StatsException(707,"Invalid Type Expected None");
							if( SubAttr[attidx].Data != null)
								throw new StatsException(707,"Invalid data Expected null");
						}


					}



				}
			}

			


		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\EstimateRankForRatings.cs ===
using System;
using System.Collections;
using System.IO;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;


namespace StatsFD.Xenon
{
	/// <summary>
	/// Summary description for EstimateRankForRatinf.
	/// </summary>
	public class EstimateRankForRatings :TestNode
	{
        uint title= 50; 
        public override void PreRun()
        {
            // we populate 2 lb's 
            // lb1 has 120 records with start rating  1
            EnumLoader.PupulateLDForEstimateR(title);
        }
		public EstimateRankForRatings()
		{
            AddChild(new p1u1lb("pRatingLTLastUser",title,1));
            AddChild(new p1u1lb("pRatingETLastUser",title,5));
            AddChild(new p1u1lb("pRatinggGTRank1",title,999));
            AddChild(new p1u1lb("pRatingETGRank1",title,505));
            AddChild(new p1u1lb("pRatingLTGRank1",title,503));
            AddChild(new p1u2lb(title));
            AddChild(new EmptyLb(title));
            AddChild(new InvalidLb(title));
            AddChild(new InvalidTl(93));
            AddChild(new SimilarRequest(title));
            AddChild(new LargeSimilarRequest(title));
            AddChild(new LargeInvalidRequestWithEmptyLb(title));
            AddChild(new TooLargeRequest(title));
            AddChild(new HitEveryrank(title));
		}
	}

    public class p1u2lb :  EstimateRankForRatingsBase
    {
        public p1u2lb( uint _title)
        {
            title = _title;
        }
        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[2];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(1,1);
            req.m_arrRatingStruct[1] = new StatsEstimateRankRequestStruct(2,1);
        }
    }

    public class EmptyLb :  EstimateRankForRatingsBase
    {
        public EmptyLb( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[1];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(3,1);

        }

    }
    //InvalidTitle

    public class InvalidTl :  EstimateRankForRatingsBase
    {
        public InvalidTl( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[3];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(1,1);
            req.m_arrRatingStruct[1] = new StatsEstimateRankRequestStruct(30,1);
            req.m_arrRatingStruct[2] = new StatsEstimateRankRequestStruct(2,1);

            Expected_XErr = HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
        }
    }


    public class InvalidLb :  EstimateRankForRatingsBase
    {
        public InvalidLb( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[3];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(1,1);
            req.m_arrRatingStruct[1] = new StatsEstimateRankRequestStruct(30,1);
            req.m_arrRatingStruct[2] = new StatsEstimateRankRequestStruct(2,1);
        }
    }

    public class SimilarRequest :  EstimateRankForRatingsBase
    {
        public SimilarRequest( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[3];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(1,1);
            req.m_arrRatingStruct[1] = new StatsEstimateRankRequestStruct(1,1);
            req.m_arrRatingStruct[2] = new StatsEstimateRankRequestStruct(1,1);
        }
    }

    public class HitEveryrank :  EstimateRankForRatingsBase
    {
        public HitEveryrank( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[101];
            ulong j=4;
            for (int i=0;i<req.m_arrRatingStruct.Length;i++,j=j+5)
            {
                req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(1,j);
            }
        }
    }


    public class LargeSimilarRequest :  EstimateRankForRatingsBase
    {
        public LargeSimilarRequest( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[101];
            for (int i=0;i<req.m_arrRatingStruct.Length;i++)
            {
                req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(1,1);
            }
        }
    }

    public class LargeInvalidRequestWithEmptyLb :  EstimateRankForRatingsBase
    {
        public LargeInvalidRequestWithEmptyLb( uint _title)
        {
            title = _title;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[101];
            for (int i=0;i<req.m_arrRatingStruct.Length;i++)
            {
                if (i % 2 == 0)
                    req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(2000,1);
                else
                    req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(3,1);
            }   
        }
    }

    public class TooLargeRequest :  EstimateRankForRatingsBase
    {
        public TooLargeRequest( uint _title)
        {
            title = _title;
            Expected_XErr = 0x80150010;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[102];
            for (int i=0;i<req.m_arrRatingStruct.Length;i++)
            {
                req.m_arrRatingStruct[i] = new StatsEstimateRankRequestStruct(1,1);
            }   
        }
    }

    

    public class p1u1lb :  EstimateRankForRatingsBase
    {
        ulong rating;
        public p1u1lb( string name ,uint _title, ulong _rating)
        {
            title = _title;
            rating=_rating;
            Name= name;
        }

        override public void init()
        {
            req = new StatsEstimateRankForRatingsRequest();
            req.m_nTitleId =(int)title;
            req.m_arrRatingStruct = new StatsEstimateRankRequestStruct[1];
            req.m_arrRatingStruct[0] = new StatsEstimateRankRequestStruct(1,rating);


        }

    }
                   
		 



    public class EstimateRankForRatingsBase: TestBase
    {
        protected uint title =0;
        public ulong Userbase= 5000;
        protected StatsEstimateRankForRatingsRequest req =null;
        protected uint Expected_Resultset=0;

        public uint Expected_XErr=0;
        virtual public void init()
        {
        }
		
        override protected void Execute()
        {
            init();
            if(req!=null)
            {
                StatsEstimateRankForRatingsResponse resp= req.Execute();

                if(XResult.Failed(Expected_XErr ))
                {
                    if (resp.xResult != Expected_XErr)
                    {
                        throw new StatsException(707,"UnExpected XError  Expected :"+Expected_XErr+ " Recived : "+ resp.xResult);
                    }
                }
                else if(XResult.Succeeded(resp.xResult))
                {
                    verifyResponse(resp);
                }
				
                ResultCode=TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error("Stats Read not initilized");
                ResultCode=TEST_RESULTS.FAILED;
            }

        }

		
        public void verifyResponse(StatsEstimateRankForRatingsResponse resp)
        {
            uint rowcount= (uint)req.m_arrRatingStruct.Length;
           

            if(resp.m_uRankForRatingReplyCount!=rowcount)
            {
                throw new StatsException(707,"verify: StatsEstimateRankForRatings Expected row count: "+rowcount+" Recived :"+resp.m_uRankForRatingReplyCount);
            }

            for(int idx=0;idx<resp.m_uRankForRatingReplyCount;idx++)
            {
                uint rank = resp.m_arruiRankForRating[idx];
                uint extimatedIMBDrank =1;
              

                TitleLbKey tlbkey = new TitleLbKey(title,(uint)req.m_arrRatingStruct[idx].m_nLbId);
                PlayerTeamLb lb = (PlayerTeamLb) g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
                if(lb == null)
                {
                    //make sure that view size is zero and the #of rows is zero
                    if( rank !=0 )
                        throw new Exception("rank is not correct should be 1 but is " +rank);
                    continue;
				}

                ArrayList enumlist = lb.GetRankedList();
                ulong totalEntries= (ulong)lb._rankedEntries.Count;

                for(int start=0;start<enumlist.Count;start++)
                {

                   RankedList  rlist= (RankedList) enumlist[start];
                   if( (ulong)rlist.Rating <= req.m_arrRatingStruct[idx].m_ulRating)
                       break;
                    extimatedIMBDrank = extimatedIMBDrank+ (uint)rlist._Entries.Count;

                }
               
                if(rank != extimatedIMBDrank)
                    throw new Exception("Excpected rank for rating "+req.m_arrRatingStruct[idx].m_ulRating+" is different Expected "+extimatedIMBDrank+" but recived "+rank);

         		
            }

        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\MaxProc.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GXeUserMaxProc : TestNode
    {
        public bool IsXenonClient;

        public GXeUserMaxProc(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TC1StatVN(50));
            AddChild(new TC1StatVL(50));
            AddChild(new TC1StatVE(50));
            AddChild(new TC1StatVG(50));
            AddChild(new TC1RatingVN(50));
            AddChild(new TC1RatingVL(50));
            AddChild(new TC1RatingVE(50));
            AddChild(new TC1RatingVG(50));
            AddChild(new TC1StatVLNegNo(50));
            AddChild(new TC1StatVENegNo(50));
            AddChild(new TC1StatVGNegNo(50));

            AddChild(new TCMStatVLsType(50));
            AddChild(new TCMStatVEsType(50));
            AddChild(new TCMStatVGsType(50));
            AddChild(new TCMStatVNsType(50));
            AddChild(new TC64StatLEGN(50));
            AddChild(new TCmUser10Stat(50));
            AddChild(new TCMLB10Stat(50));
            AddChild(new TC10UserMStatarb(50));
            AddChild(new TCWithCondition(50));
            AddChild(new TCInvalidlbid(50));
            AddChild(new TCInvalidparam(50));
            AddChild(new TCInvalidAttrib(50));
        }

        public class TCWithCondition : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCWithCondition(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, (short)11, (int)600, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerMax _data2 = new StatsPlayerMax(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerMax _data4 = new StatsPlayerMax(1, 501, 1, new object[] { (short)11, (int)500, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req3.AddProcs(_data3.Proc);
                _Req3.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCInvalidparam : PlayerTest
        {
            StatsPlayerMax _data1 = new StatsPlayerMax(1, 501, 0, new object[] { SpecialAttrib.Rating, (long)1, (int)1, (int)500 });
            RequestBuilder _Req1 = null;

            public TCInvalidparam(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req1.AddProcs(_data1.Proc);
            }

            override protected void Run()
            {

                // build StatsPostReq
                StatsPostReq[] temp = new StatsPostReq[1];
                temp[0] = _Req1.GetPostData();


                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            }
        }

        public class TCInvalidlbid : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCInvalidlbid(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(7001, 501, 11, 5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC10UserMStatarb : PlayerTest
        {
            RequestBuilder _Req = null;
            RequestBuilder _minReq = null;

            public TC10UserMStatarb(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder();
                _minReq = new RequestBuilder();
                // change to 100
                ulong[] users = new ulong[10];
                for (int i = 0; i < 10; i++)
                {
                    users[i] = (ulong)(600 + i);
                    StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                    StatsPlayerMax _mindata = new StatsPlayerMax(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)54, (short)2, (double)50, (short)3, (int)-56, (short)4, (long)565, (short)5, (double)5666.1, (short)SpecialAttrib.Rating, (long)6000 + i });
                    _Req.AddProcs(_data.Proc);
                    _minReq.AddProcs(_mindata.Proc);

                }
                _Req.Builder(title, users, true, false);
                _minReq.Builder(title, users, true, false);

            }
            override protected void Run()
            {
                StatsPostReq[] temp = new StatsPostReq[2];
                temp[0] = _Req.GetPostData();
                temp[1] = _minReq.GetPostData();

                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCMLB10Stat : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMLB10Stat(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(2, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 5001 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 5001, 500);
                PlayerRep10Att _data2 = new PlayerRep10Att(2, 5001, 700);
                _Req0.AddProcs(_data1.Proc);
                _Req0.AddProcs(_data2.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 5001, 1234, param);
                PlayerMax1Att minproc1 = new PlayerMax1Att(2, 5001, 65432, param);
                _Req.AddProcs(minproc.Proc);
                _Req.AddProcs(minproc1.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCmUser10Stat : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCmUser10Stat(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 5001, 500);
                PlayerRep10Att _data2 = new PlayerRep10Att(1, 7001, 700);
                _Req0.AddProcs(_data1.Proc);
                _Req0.AddProcs(_data2.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 5001, 1234, param);
                PlayerMax1Att minproc1 = new PlayerMax1Att(1, 7001, 65432, param);
                _Req.AddProcs(minproc.Proc);
                _Req.AddProcs(minproc1.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCInvalidAttrib : PlayerTest
        {

            StatsPlayerMax _data1 = new StatsPlayerMax(1, 501, 0, new object[] { SpecialAttrib.Rank, (long)1 });
            StatsPlayerMax _data2 = new StatsPlayerMax(1, 501, 0, new object[] { SpecialAttrib.AttachmentPathName, (long)1 });
            StatsPlayerMax _data4 = new StatsPlayerMax(1, 501, 0, new object[] { (ushort)65, (long)1 });
            RequestBuilder _Req1 = null;
            RequestBuilder _Req2 = null;
            RequestBuilder _Req4 = null;


            public TCInvalidAttrib(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req1.AddProcs(_data1.Proc);
                _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data2.Proc);
                _Req4 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req4.AddProcs(_data4.Proc);

            }
            override protected void Run()
            {

                // build StatsPostReq
                StatsPostReq[] temp = new StatsPostReq[3];
                temp[0] = _Req1.GetPostData();
                temp[1] = _Req2.GetPostData();
                temp[2] = _Req4.GetPostData();

                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            }
        }

        public class TC64StatLEGN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC64StatLEGN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 700 }, false);
                StatUsr64Att1LB _data1 = new StatUsr64Att1LB(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 700 }, false);
                StatMax64Att1LB minproc = new StatMax64Att1LB(1, 700);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVNsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCMStatVNsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 23);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVGsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVGsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 6);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVEsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVEsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 5);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVLsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVLsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVGNegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVGNegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) -5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, -5003, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVENegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVENegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, -5002, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVLNegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVLNegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, -5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1RatingVG : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVG(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 701);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVE : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVE(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 700);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVL : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVL(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 699);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            RequestBuilder _Req = null;
            public TC1RatingVN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 12345);

                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVG : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVG(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, 5003, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVE : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVE(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, 5002, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVL : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVL(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 11, 5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            RequestBuilder _Req = null;
            public TC1StatVN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMax1Att minproc = new PlayerMax1Att(1, 501, 3, 123, 123);

                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
    }

    class StatMax64Att1LB : StatsPlayerMax
    {
        public StatMax64Att1LB(int lbid, ulong u1)
        {
            object[] param = new object[] { (short)1,(int)50,
											  (short)2,(int)50,
											  (short)3,(int)59,
											  (short)4,(int)566,
											  (short)5,(int)566,
											  (short)6,(int)576,
											  (short)7,(int)577,
											  (short)8,(int)57,
											  (short)9,(int)5787,
											  (short)10,(int)5787,
											  (short)11,(int)544,
											  (short)12,(int)55745,
											  (short)13,(int)5450,
											  (short)14,(int)555,
											  (short)15,(int)52200,
											  (short)16,(int)554320,
											  (short)17,(int)56,
											  (short)18,(int)11250,
											  (short)19,(int)1150,
											  (short)20,(int)3450,
											  (short)21,(int)55520,
											  (short)22,(int)5335,
											  (short)23,(int)551,
											  (short)24,(int)57220,
											  (short)25,(int)7750,
											  (short)26,(int)80,
											  (short)27,(int)82850,
											  (short)28,(int)5880,
											  (short)29,(int)508,
											  (short)30,(int)50488,
											  (short)31,(int)8850,
											  (short)32,(int)58,
											  (short)33,(int)53088,
											  (short)34,(long)8850,
											  (short)35,(long)5110,
											  (short)36,(long)508348,
											  (short)37,(long)5990,
											  (short)38,(long)543,
											  (short)39,(long)9504,
											  (short)40,(long)5990,
											  (short)41,(long)509,
											  (short)42,(long)9554,
											  (short)43,(long)590,
											  (short)44,(long)50,
											  (short)45,(long)504799,
											  (short)46,(long)57990,
											  (short)47,(long)570,
											  (short)48,(double)5939.80,
											  (short)49,(double)5098.5,
											  (short)50,(double)505.98,
											  (short)51,(double)503.9,
											  (short)52,(double)55.3,
											  (short)53,(double)50.1,
											  (short)54,(double)50343.44,
											  (short)55,(double)5034.43,
											  (short)56,(double)5054.4,
											  (short)57,(double)50.66,
											  (short)58,(double)5065.76,
											  (short)59,(double)5087.78,
											  (short)60,(double)5098.89,
											  (short)61,(double)503.11,
											  (short)62,(double)50132.21,
											  (short)63,(double)5013.31,
											  (short)64,(double)50234.432,
											  (short)SpecialAttrib.Rating,(long)5000};
            BuildPlayerStats(lbid, u1, 0, param);
        }
    }

    class PlayerMax1Att : StatsPlayerMax
    {
        public PlayerMax1Att(int lbid, ulong u, long rating)
            : base(lbid, u, 0, new object[] { SpecialAttrib.Rating, (long)rating })
        { }

        public PlayerMax1Att(int lbid, ulong u, long rating, object[] _params)
            : base(lbid, u, 0, _params)
        { }

        public PlayerMax1Att(int lbid, ulong u, short id, long val, long rating)
            : base(lbid, u, 0, new object[] { id, val, SpecialAttrib.Rating, (long)rating })
        { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\MuSigma.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GXeMuSigmaProc : TestNode
    {
        public bool IsXenonClient;

        public GXeMuSigmaProc(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TC2users2T(50));
            AddChild(new TC2users2T2LB(50));
            AddChild(new TC16users5team(50));
            AddChild(new TC8UsersNonArbSpecialcase(50));
            AddChild(new TCInvalid8UsersNonArbSpecialcase(50));
            AddChild(new TC64users64T(50));
            AddChild(new TCXusers10games(50));
            AddChild(new TC2users2TSameScore(50));
            AddChild(new TC4users1Tie(50));

            //invalid
            AddChild(new InvalidTC2users1T(50));
            AddChild(new InvalidTC0users(50));
            AddChild(new InvalidTC1users1T(50));
            AddChild(new InvalidTCSameUsertwice(50));

            AddChild(new InvalidTCLBID(50));
            AddChild(new InvalidTCshortMsg(50));
            AddChild(new InvalidTCMax_1Uusers(50));
            AddChild(new InvalidTCUser(50));
            AddChild(new TCNODrawPinXlast(52));
        }
    }

    class TCNODrawPinXlast : MuSigmaTBase
    {
        public TCNODrawPinXlast(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)501, (int)1, (int)200, (ulong)502, (int)2, (int)201);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_MUSIGMA_NO_GAME_MODE, LBid);
        }
    }

    class InvalidTCUser : MuSigmaTBase
    {
        public InvalidTCUser(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)509, (int)1, (int)200, (ulong)502, (int)2, (int)201);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();


        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();
            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }
            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);

        }


    }

    class InvalidTCLBID : MuSigmaTBase
    {
        public InvalidTCLBID(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0041, 0, (ulong)501, (int)1, (int)200, (ulong)502, (int)2, (int)201);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }
    }

    class InvalidTCshortMsg : MuSigmaTBase
    {
        public InvalidTCshortMsg(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)501);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }
    }

    class InvalidTCMax_1Uusers : MuSigmaTBase
    {
        public InvalidTCMax_1Uusers(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 129, 129, true);
        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_TOO_MANY_PARAMETERS, LBid);

        }
    }

    class InvalidTCSameUsertwice : MuSigmaTBase
    {
        public InvalidTCSameUsertwice(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)501, (int)1, (int)100, (ulong)501, (int)2, (int)54, (ulong)502, (int)2, (int)54);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }
    }

    class InvalidTC1users1T : MuSigmaTBase
    {
        public InvalidTC1users1T(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 1, 1, true);
        }


    }

    class InvalidTC0users : MuSigmaTBase
    {
        public InvalidTC0users(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 0, 0, true);
        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);
        }
    }

    class InvalidTC2users1T : MuSigmaTBase
    {
        public InvalidTC2users1T(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 2, 1, true);
        }
    }

    class TC4users1Tie : MuSigmaTBase
    {
        public TC4users1Tie(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)501, (int)1, (int)100, (ulong)502, (int)2, (int)100
                                                    , (ulong)503, (int)1, (int)45, (ulong)504, (int)2, (int)25);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }
    }

    class TC2users2TSameScore : MuSigmaTBase
    {
        public TC2users2TSameScore(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
            StatsMuSigma MSproc = new StatsMuSigma(0xffff0001, 0, (ulong)501, (int)1, (int)100, (ulong)502, (int)2, (int)100);
            _Req.AddProcs(MSproc.Proc);
            temp[0] = _Req.GetPostData();
        }
    }

    class TCXusers10games : MuSigmaTBase
    {
        public TCXusers10games(uint title)
            : base(title, 10, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 30, 2, true);
            userbase = 510;
            CreateRequest(1, 0xffff0001, 10, 2, true);
            userbase = 505;
            CreateRequest(2, 0xffff0001, 2, 2, true);
            userbase = 500;
            CreateRequest(3, 0xffff0001, 5, 2, true);
            userbase = 504;
            CreateRequest(4, 0xffff0001, 7, 2, true);
            userbase = 525;
            CreateRequest(5, 0xffff0001, 15, 2, true);
            userbase = 520;
            CreateRequest(6, 0xffff0001, 8, 2, true);
            userbase = 560;
            CreateRequest(7, 0xffff0001, 3, 2, true);
            userbase = 500;
            CreateRequest(8, 0xffff0001, 5, 2, true);
            userbase = 505;
            CreateRequest(9, 0xffff0001, 9, 2, true);
        }
    }

    class TC64users64T : MuSigmaTBase
    {
        public TC64users64T(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 64, 64, true);
        }
    }

    //TC8UsersNonArbSpecialcase

    class TCInvalid8UsersNonArbSpecialcase : MuSigmaTBase
    {
        public TCInvalid8UsersNonArbSpecialcase(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xFFFF0000, "") })
        { }

        public override void init()
        {
            uint lbid = 0xFFFF0000;

            CreateRequest(0, lbid, 8, 8, false);
        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, this.LBid);
        }
    }

    class TC8UsersNonArbSpecialcase : MuSigmaTBase
    {


        public TC8UsersNonArbSpecialcase(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xFFFE0000, "") })
        {

        }
        public override void init()
        {
            uint lbid = 0xFFFE0000;

            CreateRequest(0, lbid, 8, 8, false);
        }


    }

    class TC16users5team : MuSigmaTBase
    {
        public TC16users5team(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 16, 5, true);
        }
    }

    class TC2users2T2LB : MuSigmaTBase
    {
        public TC2users2T2LB(uint title)
            : base(
                title
              , 1
            , new LeaderboardInfo[]{
                new LeaderboardInfo(0xffff0001,""),
                new LeaderboardInfo(0xffff0002,"")
              }
            )
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 2, 2, true);
            CreateRequest(0, 0xffff0002, 2, 2, true);
        }
    }

    class TC2users2T : MuSigmaTBase
    {
        public TC2users2T(uint title)
            : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "", 0, 1) })
        { }

        public override void init()
        {
            CreateRequest(0, 0xffff0001, 2, 2, true);
        }


    }

    class MuSigmaTBase : PlayerTest
    {
        protected StatsPostReq[] temp = null;
        protected int _NoOfPReqs = 0;
        protected int userbase = 500;

        public MuSigmaTBase(uint title, int NoOfPReqs, LeaderboardInfo[] lbs)
            : base((int)title, lbs)
        {
            _NoOfPReqs = NoOfPReqs;
        }

        public virtual void init()
        { }

        public ulong[] getUsers(int count)
        {
            ulong[] users = new ulong[count];
            for (int i = 0; i < count; i++)
            {
                users[i] = (ulong)(userbase + i);
            }
            return users;
        }

        public int[] getints(int count, int incrementby)
        {
            int[] array = new int[count];

            for (int i = 0; i < count; i++)
            {
                array[i] = 1 + (incrementby * i);
            }

            return array;
        }

        public void CreateRequest(int reqidx, uint lbib, int usercount, int teamcount, bool IsArbireated)
        {
            Random rand = new Random(46);
            ulong[] users = getUsers(usercount);
            int[] teams = getints(teamcount, 1);
            int userperteam = usercount / (teamcount != 0 ? teamcount : 1);

            RequestBuilder _Req = new RequestBuilder((uint)TitleID, users, IsArbireated);
            object[] MSparams = new object[usercount * 3];
            for (int ui = 0, ti = 0, i = 0; i < (usercount * 3); i = i + 3, ui++)
            {
                MSparams[i] = users[ui];
                if (ti < teamcount)
                    MSparams[i + 1] = teams[ti];
                else
                    MSparams[i + 1] = teams[ti - 1];
                if ((ui + 1) >= (userperteam * (ti + 1)))
                    ti++;
                MSparams[i + 2] = rand.Next(0, 5000);
            }

            StatsMuSigma MSproc = new StatsMuSigma(lbib, 0, MSparams);
            _Req.AddProcs(MSproc.Proc);
            if (reqidx < temp.Length)
                temp[reqidx] = _Req.GetPostData();
            else
                throw new System.Exception("request index greater then no of stats post request ");
        }

        override protected void Run()
        {
            temp = new StatsPostReq[_NoOfPReqs];
            init();

            foreach (StatsPostReq req in temp)
            {
                if (this.IsXenon)
                    req.IsXenon = true;
            }

            g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\MuSigmaEx.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GXeMuSigmaExProc : TestNode
    {
        public bool IsXenonClient;

        public GXeMuSigmaExProc(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TC2users2T(50));
            AddChild(new TC2users2T2LB(50));
            AddChild(new TC16users5team(50));
            AddChild(new TC8UsersNonArbSpecialcase(50));
            AddChild(new TCInvalid8UsersNonArbSpecialcase(50));
            AddChild(new TCMax62users62T(50));
            AddChild(new TCXusers10games(50));
            AddChild(new TC2users2TSameScore(50));
            AddChild(new TC4users1Tie(50));
            //invalid
            AddChild(new InvalidTC2users1T(50));
            AddChild(new InvalidTC0users(50));
            AddChild(new InvalidTC1users1T(50));
            AddChild(new InvalidTCSameUsertwice(50));


            AddChild(new InvalidTCLBID(50));
            AddChild(new InvalidTCshortMsg(50));
            AddChild(new InvalidTCMax_1Uusers(50));
            AddChild(new InvalidTCUser(50));
            AddChild(new TCNODrawPinXlast(52));

            // Boundary test cases.
            AddChild(new TCBoundary("TCMinBeta", 50, .25, .02, .5));
            AddChild(new TCBoundary("TCMinMinus1Beta", 50, .24, .02, .5));
            AddChild(new TCBoundary("TCMaxBeta", 50, 5.0, .02, .5));
            AddChild(new TCBoundary("TCMaxPlus1Beta", 50, 5.1, .02, .5));

            AddChild(new TCBoundary("TCMinTAU", 50, .3, .01, .5));
            AddChild(new TCBoundary("TCMinMinus1TAU", 50, .3, .009, .5));
            AddChild(new TCBoundary("TCMaxTAU", 50, .3, .05, .5));
            AddChild(new TCBoundary("TCMaxPlus1TAU", 50, .3, .051, .5));

            AddChild(new TCBoundary("TCMinDPP", 50, .3, .02, 0));
            AddChild(new TCBoundary("TCMinMinus1DPP", 50, .3, .02, -.1));
            AddChild(new TCBoundary("TCMaxDPP", 50, .3, .02, .99));
            AddChild(new TCBoundary("TCMaxPlus1DPP", 50, .3, .02, 1.00));

            AddChild(new TCMixNUllPP(50));
            AddChild(new TCNUllPP(50));
            AddChild(new TCBoundaryPP("TCMinPP", 50, 0, 99));
            AddChild(new TCBoundaryPP("TCMaxPP", 50, 100, 99));
            AddChild(new TCBoundaryPP("TCMinM1PP", 50, -1, 20));
            AddChild(new TCBoundaryPP("TCMaxP1PP", 50, 101, 99));

            AddChild(new TCBoundaryPP("TCMinLF", 50, 99, 0));
            AddChild(new TCBoundaryPP("TCMaxLF", 50, 99, 100));
            AddChild(new TCBoundaryPP("TCMinM1LF", 50, 99, -1));
            AddChild(new TCBoundaryPP("TCMaxP1LF", 50, 99, 101));

        }


        public class TCBoundaryPP : MuSigmaExTBase
        {
            public short lf;
            public short pp;
            public TCBoundaryPP(string name, uint title, short _lf, short _pp)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
                lf = _lf;
                pp = _pp;
                Name = name;
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, 2.5, .01, .8, (ulong)501, (int)1, (int)100, GeneratePPandLF(lf, pp), (ulong)502, (int)2, (int)100, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }


        public class TCNUllPP : MuSigmaExTBase
        {

            public TCNUllPP(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {

            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)100, null, (ulong)502, (int)2, (int)100, null);
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }


        public class TCMixNUllPP : MuSigmaExTBase
        {

            public TCMixNUllPP(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {

            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)100, null, (ulong)502, (int)2, (int)100, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }


        public class TCBoundary : MuSigmaExTBase
        {
            public double beta;
            public double tou;
            public double dpp;

            public TCBoundary(string name, uint title, double _beta, double _tou, double _dpp)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "", 0, 1) })
            {
                beta = _beta;
                tou = _tou;
                dpp = _dpp;
                this.Name = name;
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, beta, tou, dpp, 2, 2, true);
            }


        }


        public class TCNODrawPinXlast : MuSigmaExTBase
        {
            public TCNODrawPinXlast(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)200, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)201, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }
            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_MUSIGMA_NO_GAME_MODE, LBid);

            }


        }




        public class InvalidTCUser : MuSigmaExTBase
        {
            public InvalidTCUser(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)509, (int)1, (int)200, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)201, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }
            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);

            }


        }

        public class InvalidTCLBID : MuSigmaExTBase
        {
            public InvalidTCLBID(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0041, 0, .3, .02, .5, (ulong)501, (int)1, (int)200, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)201, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }

        public class InvalidTCshortMsg : MuSigmaExTBase
        {
            public InvalidTCshortMsg(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501);
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }

            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);

            }



        }

        public class InvalidTCMax_1Uusers : MuSigmaExTBase
        {
            public InvalidTCMax_1Uusers(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 129, 129, true);
            }
            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_TOO_MANY_PARAMETERS, LBid);

            }


        }



        public class InvalidTCSameUsertwice : MuSigmaExTBase
        {
            public InvalidTCSameUsertwice(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)100, GeneratePPandLF(99, 99), (ulong)501, (int)2, (int)54, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)54, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }

        public class InvalidTC1users1T : MuSigmaExTBase
        {
            public InvalidTC1users1T(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 1, 1, true);
            }


        }

        public class InvalidTC0users : MuSigmaExTBase
        {
            public InvalidTC0users(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 0, 0, true);
            }

            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, LBid);

            }


        }

        public class InvalidTC2users1T : MuSigmaExTBase
        {
            public InvalidTC2users1T(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 2, 1, true);
            }


        }

        public class TC4users1Tie : MuSigmaExTBase
        {
            public TC4users1Tie(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502, 503, 504 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)100, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)100
                    , GeneratePPandLF(99, 99), (ulong)503, (int)1, (int)45, GeneratePPandLF(99, 99), (ulong)504, (int)2, (int)25, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }

        public class TC2users2TSameScore : MuSigmaExTBase
        {
            public TC2users2TSameScore(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, new ulong[] { 501, 502 }, true);
                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(0xffff0001, 0, .3, .02, .5, (ulong)501, (int)1, (int)100, GeneratePPandLF(99, 99), (ulong)502, (int)2, (int)100, GeneratePPandLF(99, 99));
                _Req.AddProcs(MSproc.Proc);
                temp[0] = _Req.GetPostData();


            }


        }

        public class TCXusers10games : MuSigmaExTBase
        {
            public TCXusers10games(uint title)
                : base(title, 10, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 30, 2, true);
                userbase = 510;
                CreateRequest(1, 0xffff0001, 10, 2, true);
                userbase = 505;
                CreateRequest(2, 0xffff0001, 2, 2, true);
                userbase = 500;
                CreateRequest(3, 0xffff0001, 5, 2, true);
                userbase = 504;
                CreateRequest(4, 0xffff0001, 7, 2, true);
                userbase = 525;
                CreateRequest(5, 0xffff0001, 15, 2, true);
                userbase = 520;
                CreateRequest(6, 0xffff0001, 8, 2, true);
                userbase = 560;
                CreateRequest(7, 0xffff0001, 3, 2, true);
                userbase = 500;
                CreateRequest(8, 0xffff0001, 5, 2, true);
                userbase = 505;
                CreateRequest(9, 0xffff0001, 9, 2, true);
            }


        }

        public class TCMax62users62T : MuSigmaExTBase
        {
            public TCMax62users62T(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, .3, .02, .2, 62, 62, true);
            }


        }
        //TC8UsersNonArbSpecialcase
        public class TCInvalid8UsersNonArbSpecialcase : MuSigmaExTBase
        {


            public TCInvalid8UsersNonArbSpecialcase(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xFFFF0000, "") })
            {

            }
            public override void init()
            {
                uint lbid = 0xFFFF0000;

                CreateRequest(0, lbid, 8, 8, false);

            }

            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerifyBadReq(temp, HResult.XONLINE_E_STAT_PERMISSION_DENIED, this.LBid);

            }


        }


        public class TC8UsersNonArbSpecialcase : MuSigmaExTBase
        {


            public TC8UsersNonArbSpecialcase(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xFFFE0000, "") })
            {

            }
            public override void init()
            {
                uint lbid = 0xFFFE0000;

                CreateRequest(0, lbid, 8, 8, false);
            }


        }


        public class TC16users5team : MuSigmaExTBase
        {


            public TC16users5team(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "") })
            {

            }
            public override void init()
            {

                CreateRequest(0, 0xffff0001, 16, 5, true);
            }


        }

        public class TC2users2T2LB : MuSigmaExTBase
        {
            public TC2users2T2LB(uint title)
                : base(title, 1, new LeaderboardInfo[]{new LeaderboardInfo(0xffff0001,""),
                                                                                   new LeaderboardInfo(0xffff0002,"")})
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 2, 2, true);
                CreateRequest(0, 0xffff0002, 2, 2, true);
            }


        }

        public class TC2users2T : MuSigmaExTBase
        {
            public TC2users2T(uint title)
                : base(title, 1, new LeaderboardInfo[] { new LeaderboardInfo(0xffff0001, "", 0, 1) })
            {
            }

            public override void init()
            {

                CreateRequest(0, 0xffff0001, 2, 2, true);
            }


        }

        public class MuSigmaExTBase : PlayerTest
        {
            protected StatsPostReq[] temp = null;
            protected int _NoOfPReqs = 0;
            protected int userbase = 500;

            public MuSigmaExTBase(uint title, int NoOfPReqs, LeaderboardInfo[] lbs)
                : base((int)title, lbs)
            {
                _NoOfPReqs = NoOfPReqs;
            }
            public virtual void init()
            {

            }

            public const int c_playerSkillPartialPlayShift = 0;
            public const int c_playerSkillLearningShift = 16;
            public const int c_playerSkillFlagsShift = 48;
            public const int c_playerSkillFlagPartialPlaySet = 0x0001;
            public const int c_playerSkillFlagLearningSet = 0x0002;

            public ulong GeneratePPandLF(Int16 partialPlayPercentage, Int16 skillLearningFactor)
            {
                UInt64 flags = (UInt64)(c_playerSkillFlagPartialPlaySet | c_playerSkillFlagLearningSet);
                UInt64 partialPlay = (UInt64)partialPlayPercentage;
                UInt64 skillLearning = (UInt64)skillLearningFactor;

                ulong val = 0;

                val = flags << c_playerSkillFlagsShift;
                val = (partialPlay << c_playerSkillPartialPlayShift) | val;
                val = (skillLearning << c_playerSkillLearningShift) | val;

                return val;
            }

            public ulong[] getUsers(int count)
            {
                ulong[] users = new ulong[count];
                for (int i = 0; i < count; i++)
                {
                    users[i] = (ulong)(userbase + i);
                }
                return users;

            }

            public int[] getints(int count, int incrementby)
            {
                int[] array = new int[count];
                for (int i = 0; i < count; i++)
                {
                    array[i] = 1 + (incrementby * i);
                }

                return array;

            }



            public void CreateRequest(int reqidx, uint lbib, int usercount, int teamcount, bool IsArbireated)
            {
                CreateRequest(reqidx, lbib, .3, .02, .50, usercount, teamcount, IsArbireated);

            }
            public void CreateRequest(int reqidx, uint lbib, double beta, double tou, double drawProbability, int usercount, int teamcount, bool IsArbireated)
            {
                Random rand = new Random(46);
                ulong[] users = getUsers(usercount);
                int[] teams = getints(teamcount, 1);
                int userperteam = usercount / (teamcount != 0 ? teamcount : 1);
                RequestBuilder _Req = new RequestBuilder((uint)TitleID, users, IsArbireated);
                object[] MSparams = new object[usercount * 4];
                for (int ui = 0, ti = 0, i = 0; i < (usercount * 4); i = i + 4, ui++)
                {
                    MSparams[i] = users[ui];
                    if (ti < teamcount)
                        MSparams[i + 1] = teams[ti];
                    else
                        MSparams[i + 1] = teams[ti - 1];
                    if ((ui + 1) >= (userperteam * (ti + 1)))
                        ti++;
                    MSparams[i + 2] = rand.Next(0, 5000);
                    MSparams[i + 3] = GeneratePPandLF(99, 99);

                }

                StatsMuSigmaEx MSproc = new StatsMuSigmaEx(lbib, 0, beta, tou, drawProbability, MSparams);
                _Req.AddProcs(MSproc.Proc);
                if (reqidx < temp.Length)
                    temp[reqidx] = _Req.GetPostData();
                else
                    throw new System.Exception("request index greater then no of stats post request ");

            }

            override protected void Run()
            {
                temp = new StatsPostReq[_NoOfPReqs];
                init();
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\PVLTestData.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Globalization;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Database;

using xonline.common.protocol;
using StatsReadRequest = xonline.common.protocol.StatsReadRequest;
using StatsReadResponse = xonline.common.protocol.StatsReadResponse;
using StatsSpec = xonline.common.protocol.StatsSpec;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Stats.PlatformVisible;

using Microsoft.XboxLive.Auth;
using Microsoft.IdentityModel.Claims;

namespace ServerTestFramework.Stats.PlatformVisibleUserData
{
    [TestGroup, Owner("srkalyan"), TestFrequency("Regression"), TestCasePriority(1)]
    public class TestDataIngestion
    {
        const uint PlatformVisibleTitleId = 0xFFFE1005; // NOTE: This only works (Right now) if the mixstats stattest suite is run before this one!
        const uint PlatformVisibleLBID_3 = 3;
        const uint PlatformVisibleLBID_4 = 4; // this is the leaderboard with a date time stat
        const uint PlatformVisibleLBID_6 = 6;
        const string TestTitlePath = "SuitesData\\PlatformVisible\\FFFE1005-primary-attribute-enabled.xlast";

        private void GenerateRandomBattingAverage(Random rand, out int rating, out double displayRating)
        {
            rating = rand.Next(1000);
            displayRating = (double)rating / 1000.0;
        }

        private void PostBattingAverageStatsForUserAndFriends_Passport(bool fPostStatsForUser,
                    uint numFriends,
                    uint TitleId,
                    uint Lbid,
                    int ratingAttributeId,
                    string gamerTag,
                    long Puid,
                    out TestUser user)
        {
            user = new TestUser(TitleId, Lbid, gamerTag, (ulong) Puid);

            if (numFriends > 0)
            {
                user.MakeFriends(numFriends);
            }

            int rating;
            double displayRating;

            Random rand = new Random(DateTime.Now.Millisecond);

            if (fPostStatsForUser)
            {
                GenerateRandomBattingAverage(rand, out rating, out displayRating);
                user.PostDecimalStatsForUser(ratingAttributeId, rating, displayRating);
            }

            for (int i = 0; i < numFriends; i++)
            {
                GenerateRandomBattingAverage(rand, out rating, out displayRating);
                user.PostDecimalStatsForFriend(i, ratingAttributeId, rating, displayRating);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(TitleId, Lbid, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, TitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match OK, so the data wasn't valid" + retStatusCode);
            }

            if (numFriends > 0)
            {
                if (userResponse.friends.Count != numFriends)
                {
                    throw new TestCaseException(string.Format("Expected {0} friends, but received {1}.", userResponse.friends.Count, numFriends));
                }
            }
            else
            {
                if (userResponse.friends != null)
                {
                    throw new TestCaseException("Received back friends stats but should not have!");
                }
            }

            if (fPostStatsForUser)
            {
                if (userResponse.user.rank == 0)
                {
                    throw new TestCaseException("Expected user to have a rank but did not find one!");
                }
            }
            else
            {
                if (userResponse.user != null)
                {
                    throw new TestCaseException("Expected user to have no rank on this leaderboard but the user had one!");
                }
            }
        }

        private void PostBattingAverageStatsForUserAndFriends(bool fPostStatsForUser,
                            uint numFriends,
                            uint TitleId,
                            uint Lbid,
                            int ratingAttributeId,
                            out TestUser user)
        {
            user = new TestUser(TitleId, Lbid);

            if (numFriends > 0)
            {
                user.MakeFriends(numFriends);
            }

            int rating;
            double displayRating;

            Random rand = new Random(DateTime.Now.Millisecond);

            if (fPostStatsForUser)
            {
                GenerateRandomBattingAverage(rand, out rating, out displayRating);
                user.PostDecimalStatsForUser(ratingAttributeId, rating, displayRating);
            }

            for (int i = 0; i < numFriends; i++)
            {
                GenerateRandomBattingAverage(rand, out rating, out displayRating);
                user.PostDecimalStatsForFriend(i, ratingAttributeId, rating, displayRating);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(TitleId, Lbid, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, TitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match OK, so the data wasn't valid" + retStatusCode);
            }

            if (numFriends > 0)
            {
                if (userResponse.friends.Count != numFriends)
                {
                    throw new TestCaseException(string.Format("Expected {0} friends, but received {1}.", userResponse.friends.Count, numFriends));
                }
            }
            else
            {
                if (userResponse.friends != null)
                {
                    throw new TestCaseException("Received back friends stats but should not have!");
                }
            }

            if (fPostStatsForUser)
            {
                if (userResponse.user.rank == 0)
                {
                    throw new TestCaseException("Expected user to have a rank but did not find one!");
                }
            }
            else
            {
                if (userResponse.user != null)
                {
                    throw new TestCaseException("Expected user to have no rank on this leaderboard but the user had one!");
                }
            }
        }

        [TestCase, TestCasePriority(3), Owner("joelwi"), EnvRequirement("Manual"), Description("Creating a test title with users and stats for the LRX team to develop against without Passport entry")]
        public void LRX_LeaderboardData_Ingestion_Test(TestNode self)
        {
            const uint LRC_PlatformVisibleTitleId = 0xFFFE2005;
            const uint LRC_PrimaryPlatformVisibleLBID = 3;
            const int LRC_RatingAttributeID = 1;
            const string TestTitlePath = "SuitesData\\PlatformVisible\\LRC_data.xlast";

            TitleIngestion TestTitle = new TitleIngestion(LRC_PlatformVisibleTitleId, TestTitlePath);

            TestUser[] users = new TestUser[4];

            PostBattingAverageStatsForUserAndFriends(false, 1, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, out users[0]);
            PostBattingAverageStatsForUserAndFriends(true, 0, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, out users[1]);
            PostBattingAverageStatsForUserAndFriends(true, 100, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, out users[2]);
            PostBattingAverageStatsForUserAndFriends(true, 15, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, out users[3]);

            Global.RO.Info("*******************************");
            Global.RO.Info("Test data ingested for partners");
            Global.RO.Info("*******************************");
            Global.RO.Info(string.Format("TitleID ingested {0}", LRC_PlatformVisibleTitleId));
            Global.RO.Info(string.Format("PlatformVisible LeaderboardID {0}", LRC_PrimaryPlatformVisibleLBID));

            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[0].Name, users[0].UserID, false, 1));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[1].Name, users[1].UserID, true, 0));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[2].Name, users[2].UserID, true, 100));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[3].Name, users[3].UserID, true, 15));
        }

        [TestCase, TestCasePriority(3), Owner("joelwi"), EnvRequirement("Manual"), Description("Creating a test title with users and stats for the LRX team to develop against with Passport entry")]
        public void LRX_LeaderboardData_Ingestion_Test_Passport(TestNode self)
        {
            const uint LRC_PlatformVisibleTitleId = 0xFFFE2005;
            const uint LRC_PrimaryPlatformVisibleLBID = 3;
            const int LRC_RatingAttributeID = 1;
            const string TestTitlePath = "SuitesData\\PlatformVisible\\LRC_data.xlast";

            TitleIngestion TestTitle = new TitleIngestion(LRC_PlatformVisibleTitleId, TestTitlePath);

            // Below set of 4 users (slsuser1@xbltest.com, supersecret) were created seperately earlier using userlib/FakeSG
            // If the below account creation and friends creation fails create new set of 4 users and run this again to populate the data

            ServerTestFramework.Database.UserEditor _user0 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("slsuser1");
            ServerTestFramework.Database.UserEditor _user1 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("slsuser2");
            ServerTestFramework.Database.UserEditor _user2 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("slsuser3");
            ServerTestFramework.Database.UserEditor _user3 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("slsuser4");

            TestUser[] users = new TestUser[4];

            PostBattingAverageStatsForUserAndFriends_Passport(false, 1, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID,_user0.Gamertag, _user0.OwnerPuid, out users[0]);
            PostBattingAverageStatsForUserAndFriends_Passport(true, 0, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, _user1.Gamertag, _user1.OwnerPuid, out users[1]);
            PostBattingAverageStatsForUserAndFriends_Passport(true, 100, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID,_user2.Gamertag, _user2.OwnerPuid, out users[2]);
            PostBattingAverageStatsForUserAndFriends_Passport(true, 15, LRC_PlatformVisibleTitleId, LRC_PrimaryPlatformVisibleLBID, LRC_RatingAttributeID, _user3.Gamertag, _user3.OwnerPuid, out users[3]);

            Global.RO.Info("*******************************");
            Global.RO.Info("Test data ingested for partners");
            Global.RO.Info("*******************************");
            Global.RO.Info(string.Format("TitleID ingested {0}", LRC_PlatformVisibleTitleId));
            Global.RO.Info(string.Format("PlatformVisible LeaderboardID {0}", LRC_PrimaryPlatformVisibleLBID));

            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[0].Name, users[0].UserID, false, 1));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[1].Name, users[1].UserID, true, 0));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[2].Name, users[2].UserID, true, 100));
            Global.RO.Info(string.Format("User Name - {0}, Xuid - {1} created, stats posted for user = {2}, numFriends = {3}", users[3].Name, users[3].UserID, true, 15));
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), EnvRequirement("Manual"), Description("Example test to recover a user account created in Passport into an Xblob")]
        public void Passport_Xblob_UserTest(TestNode self)
        {
            //Below users pvluser1@xbltest.com were created and has passport entry. 
            //The APIs will recover these users and make entry in the Xblob.
            //NOTE: We can use XeUser to create user directly from STF framework which will make entry in XBLOB and Passport.

            ServerTestFramework.Database.UserEditor _user1 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("pvluser1");
            ServerTestFramework.Database.UserEditor _user2 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("pvluser2");
            ServerTestFramework.Database.UserEditor _user3 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("pvluser3");
            ServerTestFramework.Database.UserEditor _user4 = ServerTestFramework.Database.UserEditor.CreateOrUseExistingGamerTag("pvluser4");
            
            PNUser u1 = new PNUser(_user1.Gamertag, (ulong)_user1.OwnerPuid);
            PNUser u2 = new PNUser(_user2.Gamertag, (ulong)_user2.OwnerPuid);
            PNUser u3 = new PNUser(_user3.Gamertag, (ulong)_user3.OwnerPuid);
            PNUser u4 = new PNUser(_user4.Gamertag, (ulong)_user4.OwnerPuid);

            Global.RO.Info(string.Format("User Name - {0},userPuid - {1}, passportPuid created", _user1.Gamertag, _user1.UserPassportPuid));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\MinProc.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GXeUserMinProc : TestNode
    {
        public bool IsXenonClient;

        public GXeUserMinProc(string name, bool isXenon)
            : base(name)
        {
            IsXenonClient = isXenon;

            AddChild(new TC1StatVN(50));
            AddChild(new TC1StatVL(50));
            AddChild(new TC1StatVE(50));
            AddChild(new TC1StatVG(50));
            AddChild(new TC1RatingVN(50));
            AddChild(new TC1RatingVL(50));
            AddChild(new TC1RatingVE(50));
            AddChild(new TC1RatingVG(50));
            AddChild(new TC1StatVLNegNo(50));
            AddChild(new TC1StatVENegNo(50));
            AddChild(new TC1StatVGNegNo(50));

            AddChild(new TCMStatVLsType(50));
            AddChild(new TCMStatVEsType(50));
            AddChild(new TCMStatVGsType(50));
            AddChild(new TCMStatVNsType(50));
            AddChild(new TC64StatLEGN(50));
            AddChild(new TCmUser10Stat(50));
            AddChild(new TCMLB10Stat(50));
            AddChild(new TC10UserMStatarb(50));
            AddChild(new TCWithCondition(50));
            AddChild(new TCInvalidlbid(50));
            AddChild(new TCInvalidparam(50));
            AddChild(new TCInvalidAttrib(50));

        }

        public class TCWithCondition : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[3];

            public TCWithCondition(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                StatsPlayerReplace _data = new StatsPlayerReplace(1, 501, 0, new object[] { (short)10, (int)555, (short)11, (int)600, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req.AddProcs(_data.Proc);
                temp[0] = _Req.GetPostData();

                /// add a contiotnal for Equal
                ConditionalPlayer _data1 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerMin _data2 = new StatsPlayerMin(1, 501, 1, new object[] { (short)11, (int)700, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data1.Proc);
                _Req2.AddProcs(_data2.Proc);
                temp[1] = _Req2.GetPostData();

                ConditionalPlayer _data3 = new ConditionalPlayer(1, 501, StatContitions.Equal, 10, (int)555);
                StatsPlayerMin _data4 = new StatsPlayerMin(1, 501, 1, new object[] { (short)11, (int)500, SpecialAttrib.Rating, (long)1000 });
                RequestBuilder _Req3 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req3.AddProcs(_data3.Proc);
                _Req3.AddProcs(_data4.Proc);
                temp[2] = _Req3.GetPostData();
            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }



        public class TCInvalidparam : PlayerTest
        {

            StatsPlayerMin _data1 = new StatsPlayerMin(1, 501, 0, new object[] { SpecialAttrib.Rating, (long)1, (int)1, (int)500 });
            RequestBuilder _Req1 = null;


            public TCInvalidparam(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req1.AddProcs(_data1.Proc);


            }
            override protected void Run()
            {

                // build StatsPostReq
                StatsPostReq[] temp = new StatsPostReq[1];
                temp[0] = _Req1.GetPostData();


                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            }
        }

        public class TCInvalidlbid : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCInvalidlbid(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(7001, 501, 11, 5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC10UserMStatarb : PlayerTest
        {
            RequestBuilder _Req = null;
            RequestBuilder _minReq = null;

            public TC10UserMStatarb(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder();
                _minReq = new RequestBuilder();
                // change to 100
                ulong[] users = new ulong[10];
                for (int i = 0; i < 10; i++)
                {
                    users[i] = (ulong)(600 + i);
                    StatsPlayerReplace _data = new StatsPlayerReplace(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)50, (short)2, (double)55, (short)3, (int)56, (short)4, (long)566, (short)5, (double)5666, (short)SpecialAttrib.Rating, (long)5000 + i });
                    StatsPlayerMin _mindata = new StatsPlayerMin(1, (ulong)(600 + i), 0, new object[] { (short)1, (int)54, (short)2, (double)50, (short)3, (int)-56, (short)4, (long)565, (short)5, (double)5666.1, (short)SpecialAttrib.Rating, (long)6000 + i });
                    _Req.AddProcs(_data.Proc);
                    _minReq.AddProcs(_mindata.Proc);

                }
                _Req.Builder(title, users, true, false);
                _minReq.Builder(title, users, true, false);

            }
            override protected void Run()
            {
                StatsPostReq[] temp = new StatsPostReq[2];
                temp[0] = _Req.GetPostData();
                temp[1] = _minReq.GetPostData();

                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }
        }

        public class TCMLB10Stat : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMLB10Stat(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, ""), new LeaderboardInfo(2, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 5001 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 5001, 500);
                PlayerRep10Att _data2 = new PlayerRep10Att(2, 5001, 700);
                _Req0.AddProcs(_data1.Proc);
                _Req0.AddProcs(_data2.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 5001, 1234, param);
                PlayerMin1Att minproc1 = new PlayerMin1Att(2, 5001, 65432, param);
                _Req.AddProcs(minproc.Proc);
                _Req.AddProcs(minproc1.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCmUser10Stat : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCmUser10Stat(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 5001, 500);
                PlayerRep10Att _data2 = new PlayerRep10Att(1, 7001, 700);
                _Req0.AddProcs(_data1.Proc);
                _Req0.AddProcs(_data2.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 5001, 7001 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 5001, 1234, param);
                PlayerMin1Att minproc1 = new PlayerMin1Att(1, 7001, 65432, param);
                _Req.AddProcs(minproc.Proc);
                _Req.AddProcs(minproc1.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCInvalidAttrib : PlayerTest
        {

            StatsPlayerMin _data1 = new StatsPlayerMin(1, 501, 0, new object[] { SpecialAttrib.Rank, (long)1 });
            StatsPlayerMin _data2 = new StatsPlayerMin(1, 501, 0, new object[] { SpecialAttrib.AttachmentPathName, (long)1 });
            StatsPlayerMin _data4 = new StatsPlayerMin(1, 501, 0, new object[] { (ushort)65, (long)1 });
            RequestBuilder _Req1 = null;
            RequestBuilder _Req2 = null;
            RequestBuilder _Req4 = null;


            public TCInvalidAttrib(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req1 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req1.AddProcs(_data1.Proc);
                _Req2 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req2.AddProcs(_data2.Proc);
                _Req4 = new RequestBuilder(title, new ulong[] { 501 }, false);
                _Req4.AddProcs(_data4.Proc);

            }
            override protected void Run()
            {

                // build StatsPostReq
                StatsPostReq[] temp = new StatsPostReq[3];
                temp[0] = _Req1.GetPostData();
                temp[1] = _Req2.GetPostData();
                temp[2] = _Req4.GetPostData();

                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }

                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);

            }
        }

        public class TC64StatLEGN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC64StatLEGN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 700 }, false);
                StatUsr64Att1LB _data1 = new StatUsr64Att1LB(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 700 }, false);
                StatMin64Att1LB minproc = new StatMin64Att1LB(1, 700);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVNsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];

            public TCMStatVNsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 23);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVGsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVGsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 6);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVEsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVEsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 5);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TCMStatVLsType : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TCMStatVLsType(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // add a user with 10 attributes of type long
                //(id ,value) = (1,5) (3,15) ....
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep10Att _data1 = new PlayerRep10Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                object[] param = new object[20];
                for (int i = 0; i < 20; i += 2)
                {
                    param[i] = (short)(i + 1);
                    param[i + 1] = (long)((i + 1) * 3);
                }
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 1234, param);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVGNegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVGNegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) -5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, -5003, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVENegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVENegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, -5002, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVLNegNo : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVLNegNo(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3AttNegNo _data1 = new PlayerRep3AttNegNo(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, -5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1RatingVG : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVG(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 701);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVE : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVE(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 700);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVL : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1RatingVL(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute rating  has value  (long) 700
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 699);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
        public class TC1RatingVN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            RequestBuilder _Req = null;
            public TC1RatingVN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 12345);

                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVG : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVG(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, 5003, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVE : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVE(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, 5002, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVL : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[2];

            public TC1StatVL(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                // adda a user with 3 attributes id 10,11,12
                //attribute 11  has value  (long) 5002
                RequestBuilder _Req0 = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerRep3Att _data1 = new PlayerRep3Att(1, 700);
                _Req0.AddProcs(_data1.Proc);
                temp[0] = _Req0.GetPostData();

                RequestBuilder _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 11, 5001, 123);
                _Req.AddProcs(minproc.Proc);
                temp[1] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }

        public class TC1StatVN : PlayerTest
        {
            StatsPostReq[] temp = new StatsPostReq[1];
            RequestBuilder _Req = null;
            public TC1StatVN(uint title)
                : base((int)title, new LeaderboardInfo[] { new LeaderboardInfo(1, "") })
            {
                _Req = new RequestBuilder(title, new ulong[] { 501 }, false);
                PlayerMin1Att minproc = new PlayerMin1Att(1, 501, 3, 123, 123);

                _Req.AddProcs(minproc.Proc);
                temp[0] = _Req.GetPostData();

            }

            override protected void Run()
            {
                foreach (StatsPostReq req in temp)
                {
                    if (this.IsXenon)
                        req.IsXenon = true;
                }
                g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
            }

        }
    }

    class StatMin64Att1LB : StatsPlayerMin
    {

        public StatMin64Att1LB(int lbid, ulong u1)
        {
            object[] param = new object[] {
             // key        value      //
                (short)1  , (int)50
              , (short)2  , (int)50
              , (short)3  , (int)59
              , (short)4  , (int)566
              , (short)5  , (int)566
              , (short)6  , (int)576
              , (short)7  , (int)577
              , (short)8  , (int)57
              , (short)9  , (int)5787
              , (short)10 , (int)5787
              , (short)11 , (int)544
              , (short)12 , (int)55745
              , (short)13 , (int)5450
              , (short)14 , (int)555
              , (short)15 , (int)52200
              , (short)16 , (int)554320
              , (short)17 , (int)56
              , (short)18 , (int)11250
              , (short)19 , (int)1150
              , (short)20 , (int)3450
              , (short)21 , (int)55520
              , (short)22 , (int)5335
              , (short)23 , (int)551
              , (short)24 , (int)57220
              , (short)25 , (int)7750
              , (short)26 , (int)80
              , (short)27 , (int)82850
              , (short)28 , (int)5880
              , (short)29 , (int)508
              , (short)30 , (int)50488
              , (short)31 , (int)8850
              , (short)32 , (int)58
              , (short)33 , (int)53088
              , (short)34 , (long)8850
              , (short)35 , (long)5110
              , (short)36 , (long)508348
              , (short)37 , (long)5990
              , (short)38 , (long)543
              , (short)39 , (long)9504
              , (short)40 , (long)5990
              , (short)41 , (long)509
              , (short)42 , (long)9554
              , (short)43 , (long)590
              , (short)44 , (long)50
              , (short)45 , (long)504799
              , (short)46 , (long)57990
              , (short)47 , (long)570
              , (short)48 , (double)5939.80
              , (short)49 , (double)5098.5
              , (short)50 , (double)505.98
              , (short)51 , (double)503.9
              , (short)52 , (double)55.3
              , (short)53 , (double)50.1
              , (short)54 , (double)50343.44
              , (short)55 , (double)5034.43
              , (short)56 , (double)5054.4
              , (short)57 , (double)50.66
              , (short)58 , (double)5065.76
              , (short)59 , (double)5087.78
              , (short)60 , (double)5098.89
              , (short)61 , (double)503.11
              , (short)62 , (double)50132.21
              , (short)63 , (double)5013.31
              , (short)64 , (double)50234.432
              , (short)SpecialAttrib.Rating , (long)5000
            };

            BuildPlayerStats(lbid, u1, 0, param);
        }
    }

    class PlayerMin1Att : StatsPlayerMin
    {
        public PlayerMin1Att(int lbid, ulong u, long rating)
            : base(lbid, u, 0, new object[] { SpecialAttrib.Rating, (long)rating })
        { }

        public PlayerMin1Att(int lbid, ulong u, long rating, object[] _params)
            : base(lbid, u, 0, _params)
        { }

        public PlayerMin1Att(int lbid, ulong u, short id, long val, long rating)
            : base(lbid, u, 0, new object[] { id, val, SpecialAttrib.Rating, (long)rating })
        { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\leaderboard\Xenon\StatsRead.cs ===
using System;
using System.IO;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.LiveService.Stats.StatsDBSim;

namespace StatsFD
{
    class GXestatsRead : TestNode
    {
        uint title = 50;

        public override void PreRun()
        {
            EnumLoader.PupulateLDForRead(title);
        }

        public GXestatsRead()
        {
            AddChild(new TC1U1Spec(title));
            AddChild(new TC1UserMSpec5V(title));
            AddChild(new TC1UserMSpec1V(title));

            AddChild(new TCValid3LBSEachDiffSize(title));
            AddChild(new TCValidnonExistingAtBegining(title));
            AddChild(new TCValidnonExistingAtMiddle(title));
            AddChild(new TCValidnonExistingAtEnd(title));
            AddChild(new TCInValididx2(title));

            AddChild(new TCMUser1Spec(title));
            AddChild(new TCMUser5Spec(title));
            AddChild(new TC101User1Spec(title));
            AddChild(new TC1UserMaxcolom(title));
            AddChild(new TCMaxReqSize(title));
            AddChild(new TCNonexistentUser(title));
            AddChild(new TCMixNon_ExistentUser(title));
            AddChild(new TCNonexistentAttribute(title));
            AddChild(new TCMixNon_existentAttribute(title));
            AddChild(new TCValidSpecialAttribute(title));

            AddChild(new TC1U1DuplicateAttribute(title));

            // invalid requests.
            AddChild(new TCInValidSpecialAttribute(title));
            AddChild(new TCInValidAttribute(title));
            AddChild(new TCZeroUserLen(title));
            AddChild(new TCZeroSpecLen(title));
            AddChild(new TCZeroColumnLen(title));
            AddChild(new TCIncorrectUserLenL(title));
            AddChild(new TCIncorrectSpecLenL(title));
            AddChild(new TCIncorrectColumnLenL(title));
            AddChild(new TCIncorrectUserLenG(title));
            AddChild(new TCIncorrectSpecLenG(title));
            AddChild(new TCIncorrectColumnLenG(title));

            AddChild(new TCMaxP1User(title));
            AddChild(new TCMaxP1Specs(title));
            AddChild(new TCMaxP1Column(title));

            AddChild(new TCMixValid_InvalidView(title));
            AddChild(new TCInvalidView(title));
            AddChild(new TCInvalidTitle(title + 43));

            //AddChild(new TCInvalidTitle(title+43));

            AddChild(new TCInvalidLargePKT());
            AddChild(new TCInvalidSmallPKT());

        }
    }

    class TCInvalidSmallPKT : TestBase
    {
        override protected void Execute()
        {
            InvalidXRLRequest tmp = new InvalidXRLRequest(10, "/xstats/xstatread.ashx");
            uint xerror = tmp.Execute();

            if (xerror != HResult.XONLINE_E_DESERIALIZATION_ERROR)
                throw new Exception("Invalid Xerror Expected :" + HResult.E_FAIL + " recived:" + xerror);

            ResultCode = TEST_RESULTS.PASSED;
        }
    }

    class TCInvalidLargePKT : TestBase
    {
        override protected void Execute()
        {
            InvalidXRLRequest tmp = new InvalidXRLRequest(1000 * 10, "/xstats/xstatread.ashx");
            uint xerror = tmp.Execute();
            if (xerror != HResult.XONLINE_E_DESERIALIZATION_ERROR)
                throw new Exception("Invalid Xerror Expected :" + HResult.E_FAIL + " recived:" + xerror);

            ResultCode = TEST_RESULTS.PASSED;
        }
    }

    class TCMixValid_InvalidView : StatsReadBase
    {
        public TCMixValid_InvalidView(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(9991, new ushort[] { 1 });
            StatsSpec specs1 = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs, specs1 });
            this.Expected_XErr = HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
        }
    }

    class TCInvalidView : StatsReadBase
    {
        public TCInvalidView(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(9991, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
        }
    }

    class TCInvalidTitle : StatsReadBase
    {
        public TCInvalidTitle(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title + 43, new ulong[] { Userbase }, new StatsSpec[] { specs });

            this.Expected_XErr = HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
        }
    }

    class TCMaxP1Column : StatsReadBase
    {
        public TCMaxP1Column(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ulong[] users = new ulong[1];

            for (int i = 0; i < 1; i++)
            {
                users[i] = Userbase + (ulong)(i);
            }

            ushort[] ids = new ushort[66];

            for (ushort j = 0; j < 66; j++)
            {
                ids[j] = (ushort)(j + 1);
            }

            StatsSpec[] specs = new StatsSpec[1];

            for (int k = 0; k < 1; k++)
            {
                specs[k] = new StatsSpec((uint)((k + 1) % 10), ids);
            }

            req = new StatsReadRequest(title, users, specs);
            this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
        }
    }

    class TCMaxP1Specs : StatsReadBase
    {
        public TCMaxP1Specs(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ulong[] users = new ulong[1];
            for (int i = 0; i < 1; i++)
            {
                users[i] = Userbase + (ulong)(i);
            }

            ushort[] ids = new ushort[1];
            for (ushort j = 0; j < 1; j++)
            {
                ids[j] = (ushort)(j + 1);
            }

            StatsSpec[] specs = new StatsSpec[1001];

            for (int k = 0; k < 1001; k++)
            {
                specs[k] = new StatsSpec((uint)((k + 1) % 10), ids);
            }

            req = new StatsReadRequest(title, users, specs);
            this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
        }
    }

    class TCMaxP1User : StatsReadBase
    {
        public TCMaxP1User(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ulong[] users = new ulong[102];
            for (int i = 0; i < 102; i++)
            {
                users[i] = Userbase + (ulong)(i);
            }

            ushort[] ids = new ushort[64];
            for (ushort j = 0; j < 64; j++)
            {
                ids[j] = (ushort)(j + 1);
            }

            StatsSpec[] specs = new StatsSpec[2];

            for (int k = 0; k < 2; k++)
            {
                specs[k] = new StatsSpec((uint)(k + 1), ids);
            }

            req = new StatsReadRequest(title, users, specs);
            this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
        }
    }

    class TCIncorrectColumnLenG : StatsReadBase
    {
        public TCIncorrectColumnLenG(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, 1, new ushort[] { 1, 5 });
            StatsSpec specs2 = new StatsSpec(2, new ushort[] { 1, 5 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs, specs2 });
            this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
        }
    }

    class TCIncorrectSpecLenG : StatsReadBase
    {
        public TCIncorrectSpecLenG(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            StatsSpec specs1 = new StatsSpec(2, new ushort[] { 5, 6 });
            req = new StatsReadRequest(title, 2, new ulong[] { Userbase, Userbase + 1 }, 1, new StatsSpec[] { specs, specs1 });
            Expected_Resultset = 1;
        }
    }

    class TCIncorrectUserLenG : StatsReadBase
    {
        public TCIncorrectUserLenG(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, 1, new ulong[] { Userbase, Userbase + 1 }, 1, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_DESERIALIZATION_ERROR;
        }
    }

    class TCIncorrectColumnLenL : StatsReadBase
    {
        public TCIncorrectColumnLenL(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, 2, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_END_OF_STREAM;
        }
    }

    class TCIncorrectSpecLenL : StatsReadBase
    {
        public TCIncorrectSpecLenL(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, 1, new ulong[] { Userbase }, 2, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_END_OF_STREAM;
        }
    }

    class TCIncorrectUserLenL : StatsReadBase
    {
        public TCIncorrectUserLenL(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, 3, new ulong[] { Userbase }, 1, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_END_OF_STREAM;
        }
    }

    class TCZeroColumnLen : StatsReadBase
    {
        public TCZeroColumnLen(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, 0, new ushort[] { });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
        }
    }

    class TCZeroSpecLen : StatsReadBase
    {
        public TCZeroSpecLen(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, 1, new ulong[] { Userbase }, 0, new StatsSpec[] { });
        }
    }

    class TCZeroUserLen : StatsReadBase
    {
        public TCZeroUserLen(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, 0, new ulong[] { }, 1, new StatsSpec[] { specs });
            this.Expected_XErr = HResult.XONLINE_E_STAT_READ_NO_SPEC;
        }
    }

    class TCValidSpecialAttribute : StatsReadBase
    {
        public TCValidSpecialAttribute(uint titleid)
        {
            title = titleid;
        }
        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { (ushort)SpecialAttrib.Rating, (ushort)SpecialAttrib.Rank });
            req = new StatsReadRequest(title, new ulong[] { Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCInValidSpecialAttribute : StatsReadBase
    {
        public TCInValidSpecialAttribute(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { (ushort)SpecialAttrib.AttachmentPathName, (ushort)SpecialAttrib.AttachmentSize, 66 });
            req = new StatsReadRequest(title, new ulong[] { Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCInValidAttribute : StatsReadBase
    {
        public TCInValidAttribute(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { (ushort)66 });
            req = new StatsReadRequest(title, new ulong[] { Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCMixNon_existentAttribute : StatsReadBase
    {
        public TCMixNon_existentAttribute(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(11, new ushort[] { 1, 2, 4, 6, 21, 31, 51 });
            req = new StatsReadRequest(title, new ulong[] { Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCNonexistentAttribute : StatsReadBase
    {
        public TCNonexistentAttribute(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(11, new ushort[] { 21, 31, 51 });
            req = new StatsReadRequest(title, new ulong[] { Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCMixNon_ExistentUser : StatsReadBase
    {
        public TCMixNon_ExistentUser(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { 7853, Userbase + 10 }, new StatsSpec[] { specs });
        }
    }

    class TCNonexistentUser : StatsReadBase
    {
        public TCNonexistentUser(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { 7853 }, new StatsSpec[] { specs });
        }
    }

    class TCMaxReqSize : StatsReadBase
    {
        public TCMaxReqSize(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ulong[] users = new ulong[100];
            for (int i = 0; i < 100; i++)
            {
                users[i] = Userbase + (ulong)(i);
            }

            ushort[] ids = new ushort[64];
            for (ushort j = 0; j < 64; j++)
            {
                ids[j] = (ushort)(j + 1);
            }

            StatsSpec[] specs = new StatsSpec[10];

            for (int k = 0; k < 10; k++)
            {
                specs[k] = new StatsSpec((uint)(k + 1), ids);
            }

            req = new StatsReadRequest(title, users, specs);
        }
    }

    class TC1UserMaxcolom : StatsReadBase
    {
        public TC1UserMaxcolom(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ushort[] ids = new ushort[64];
            for (ushort i = 0; i < 64; i++)
            {
                ids[i] = (ushort)(i + 1);
            }

            StatsSpec specs = new StatsSpec(1, ids);
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
        }
    }

    class TC101User1Spec : StatsReadBase
    {
        public TC101User1Spec(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1, 3, 5, 7, 9 });
            ulong[] users = new ulong[101];
            for (int i = 0; i < 101; i++)
            {
                users[i] = Userbase + (ulong)(i);
            }
            req = new StatsReadRequest(title, users, new StatsSpec[] { specs });
        }
    }

    class TCMUser5Spec : StatsReadBase
    {
        public TCMUser5Spec(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            ulong[] users = new ulong[10];
            for (int i = 0; i < 10; i++)
            {
                users[i] = Userbase + (ulong)(i * 4);
            }
            StatsSpec specs1 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5, 6, 3 });
            StatsSpec specs2 = new StatsSpec(2, new ushort[] { 10, 11, 12, 11 });
            StatsSpec specs3 = new StatsSpec(3, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
            StatsSpec specs4 = new StatsSpec(4, new ushort[] { 1, 3, 5, 7, 9 });
            StatsSpec specs5 = new StatsSpec(10, new ushort[] { 2, 24, 36, 41, 45, 50 });
            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3, specs4, specs5 });

        }
    }

    class TCMUser1Spec : StatsReadBase
    {
        public TCMUser1Spec(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1, 3, 5, 7, 9 });
            ulong[] users = new ulong[10];
            for (int i = 0; i < 10; i++)
            {
                users[i] = Userbase + (ulong)(i * 5);
            }

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs });
        }
    }

    class TC1UserMSpec1V : StatsReadBase
    {
        public TC1UserMSpec1V(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(1, new ushort[] { 10, 11, 12 });
            req = new StatsReadRequest(title, new ulong[] { (Userbase + 19) }, new StatsSpec[] { specs1, specs2 });
        }
    }

    class TCInValididx2 : StatsReadBase
    {
        public TCInValididx2(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(2, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(1, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(1342, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });

            ulong[] users = new ulong[20];
            for (int i = 0; i < 20; i++)
                users[i] = Userbase + (ulong)(i + 21);

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3 });
            this.Expected_XErr = HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD;
        }
    }

    class TCValidnonExistingAtEnd : StatsReadBase
    {
        public TCValidnonExistingAtEnd(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(2, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(1, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(12, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });

            ulong[] users = new ulong[20];
            for (int i = 0; i < 20; i++)
                users[i] = Userbase + (ulong)(i + 21);

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3 });
        }
    }

    class TCValidnonExistingAtMiddle : StatsReadBase
    {
        public TCValidnonExistingAtMiddle(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(2, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(12, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });

            ulong[] users = new ulong[20];
            for (int i = 0; i < 20; i++)
                users[i] = Userbase + (ulong)(i + 21);

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3 });
        }
    }

    class TCValidnonExistingAtBegining : StatsReadBase
    {
        public TCValidnonExistingAtBegining(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(12, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(2, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });

            ulong[] users = new ulong[20];
            for (int i = 0; i < 20; i++)
                users[i] = Userbase + (ulong)(i + 21);

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3 });
        }
    }

    class TCValid3LBSEachDiffSize : StatsReadBase
    {
        public TCValid3LBSEachDiffSize(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(2, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(12, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });

            ulong[] users = new ulong[20];
            for (int i = 0; i < 20; i++)
                users[i] = Userbase + (ulong)(i + 10);

            req = new StatsReadRequest(title, users, new StatsSpec[] { specs1, specs2, specs3 });
        }
    }

    class TC1UserMSpec5V : StatsReadBase
    {
        public TC1UserMSpec5V(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs1 = new StatsSpec(1, new ushort[] { 1, 2, 3, 4, 5 });
            StatsSpec specs2 = new StatsSpec(2, new ushort[] { 10, 11, 12 });
            StatsSpec specs3 = new StatsSpec(3, new ushort[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
            StatsSpec specs4 = new StatsSpec(4, new ushort[] { 1, 3, 5, 7, 9 });
            StatsSpec specs5 = new StatsSpec(5, new ushort[] { 2, 4, 6, 8 });

            req = new StatsReadRequest(title, new ulong[] { (Userbase + 25) }, new StatsSpec[] { specs1, specs2, specs3, specs4, specs5 });
        }
    }

    //TC1U1DuplicateAttribute
    class TC1U1DuplicateAttribute : StatsReadBase
    {
        public TC1U1DuplicateAttribute(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1, 2, 1 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
        }
    }

    class TC1U1Spec : StatsReadBase
    {
        public TC1U1Spec(uint titleid)
        {
            title = titleid;
        }

        override public void init()
        {
            StatsSpec specs = new StatsSpec(1, new ushort[] { 1 });
            req = new StatsReadRequest(title, new ulong[] { Userbase }, new StatsSpec[] { specs });
        }
    }

    class StatsReadBase : TestBase
    {
        protected uint title = 0;
        public ulong Userbase = 5000;
        protected StatsReadRequest req = null;
        protected uint Expected_Resultset = 0;

        public uint Expected_XErr = 0;
        virtual public void init()
        { }

        override protected void Execute()
        {
            init();
            if (req != null)
            {
                StatsReadResponse resp = req.Execute();

                if (XResult.Failed(Expected_XErr))
                {
                    if (resp.xResult != Expected_XErr)
                    {
                        throw new StatsException(707, "UnExpected XError  Expected :" + Expected_XErr + " Recived : " + resp.xResult);
                    }
                }
                else if (XResult.Succeeded(resp.xResult))
                {
                    verifyRead(resp);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error("Stats Read not initilized");
                ResultCode = TEST_RESULTS.FAILED;
            }
        }

        public void verifyRead(StatsReadResponse resp)
        {
            int rowcount = req.Users.Length;
            int NoOfResults = req.Specs.Length;

            if (resp.ResultsLen != NoOfResults)
            {
                if (Expected_Resultset == 0)
                    throw new StatsException(707, "verify: XeStatsRead Expected Resultset count: " + NoOfResults + " Recived :" + resp.ResultsLen);
                else if (Expected_Resultset != resp.ResultsLen)
                    throw new StatsException(707, "verify: XeStatsRead Expected Resultset count: " + Expected_Resultset + " Recived :" + resp.ResultsLen);
            }

            for (int idx = 0; idx < resp.ResultsLen; idx++)
            {
                StatsResultSet Result = resp.Results[idx];
                if (req.Specs[idx].ViewId != Result.ViewId)
                    throw new StatsException(707, "verify: XeStatsRead Expected viewid:" + req.Specs[idx].ViewId + " Recived :" + Result.ViewId);

                if (Result.RowsLen != rowcount)
                    throw new StatsException(707, "verify: XeStatsRead Expected rows:" + rowcount + " Recived :" + Result.RowsLen + " for view ID = " + Result.ViewId);

                int Columncount = req.Specs[idx].ColumnIds.Length;

                for (int rowidx = 0; rowidx < rowcount; rowidx++)
                {
                    StatsRow tmpRow = Result.Rows[rowidx];

                    if (tmpRow.ColumnsLen != Columncount)
                        throw new StatsException(707, "verify: XeStatsRead Expected column count:" + Columncount + " Recived :" + tmpRow.ColumnsLen + " for view ID = " + Result.ViewId + " user id=" + tmpRow.Puid);

                    if (tmpRow.ColumnsLen == 0)
                        return;


                    // verify all fileds here.

                    if (req.Users[rowidx] != tmpRow.Puid)
                        throw new StatsException(707, "verify: XeStatsRead Expected user:" + req.Users[rowidx] + " Recived :" + tmpRow.Puid + " for view ID = " + Result.ViewId);

                    TitleLbKey tlbkey = new TitleLbKey(title, (uint)req.Specs[idx].ViewId);
                    PlayerTeamLb lb = (PlayerTeamLb)g_Statobj.TManager.Im_Stats.PlayerDb._playerLbs[tlbkey];
                    if (lb == null)
                    {
                        //make sure that view size is zero and the #of rows is zero
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                throw new StatsException(707, "Invalid Type Expected none");
                            if (SubAttr[attidx].Data != null)
                                throw new StatsException(707, "Invalid Type Expected none");
                        }

                        return;
                    }

                    uint totalEntries = (uint)lb._rankedEntries.Count;
                    if (Result.ViewSize != totalEntries)
                        throw new Exception("Wrong View Size Expected " + totalEntries + "Recived " + Result.ViewSize);

                    if (lb._lbEntries.Contains(tmpRow.Puid))
                    {
                        PlayerTeamLbEntry PalyerEntry = (PlayerTeamLbEntry)lb._lbEntries[tmpRow.Puid];
                        XrlSubAttr[] SubAttr = tmpRow.Columns;
                        for (int attidx = 0; attidx < SubAttr.Length; attidx++)
                        {
                            if (SubAttr[attidx].Info.ID > 65)
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }
                            else if (PalyerEntry._stats.Contains((short)SubAttr[attidx].Info.ID))
                            {
                                XrlSubAttr PlayerAttr = (XrlSubAttr)PalyerEntry._stats[(short)SubAttr[attidx].Info.ID];
                                string error = null;
                                if (!g_Statobj.TManager.IsAttributeEqual(ref PlayerAttr, ref SubAttr[attidx], ref error))
                                    throw new StatsException(707, error);

                            }
                            else
                            {
                                if ((int)SubAttr[attidx].Info.Type != (int)XrlAttrType.None)
                                    throw new StatsException(707, "Invalid Type Expected None");
                                if (SubAttr[attidx].Data != null)
                                    throw new StatsException(707, "Invalid data Expected null");
                            }
                        }
                    }
                }
            }
        }
    }

    class InvalidXRLRequest : XRLPayload
    {
        int _bytestosend = 0;
        string _url = null;

        public InvalidXRLRequest(int bytestosend, string url)
        {
            _bytestosend = bytestosend;
            _url = url;
        }

        protected override string GetServiceName()
        {
            return _url;
        }

        new public uint Execute()
        {
            // Prepare request 
            MemoryStream reqStream = new MemoryStream(512);
            byte[] buffer = new byte[_bytestosend];
            Random rand = new Random();
            rand.NextBytes(buffer);
            BinaryWriter writer = new BinaryWriter(reqStream);
            writer.Write(buffer);

            bool bRet = InternalExecute(Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd), reqStream);
            return this.XErr;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\PlatformVisible.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Database;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.webplatform.livecache;
using StatsReadRequest = xonline.common.protocol.StatsReadRequest;
using StatsReadResponse = xonline.common.protocol.StatsReadResponse;
using StatsSpec = xonline.common.protocol.StatsSpec;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveCache.Test.Leaderboard;

using MIXTesting;

using Microsoft.XboxLive.Auth;
using Microsoft.IdentityModel.Claims;


namespace ServerTestFramework.Stats.PlatformVisible
{    
    [DataContract]
    public class PlatformVisibleLeaderboardMetadata
    {
        [System.Xml.Serialization.XmlElementAttribute("lbid")]
        [DataMember(Name = "lbid")]
        public UInt32 id;

        [System.Xml.Serialization.XmlElementAttribute("name")]
        [DataMember(Name = "name")]
        public string name;

        [System.Xml.Serialization.XmlElementAttribute("rating")]
        [DataMember(Name = "rating")]
        public string rating;      

        public PlatformVisibleLeaderboardMetadata()
        {
        }

        public PlatformVisibleLeaderboardMetadata(UInt32 id, string name, string rating)
        {
            this.id = id;
            this.name = name;
            this.rating = rating;
        }
    }

    [DataContract]
    public class PlatformLeaderboardResponse
    {
        [DataMember(Name = "titleid")]
        public UInt32 titleid;

        [DataMember(Name = "primaryid")]
        public UInt32 primaryId;

        [DataMember(Name = "leaderboards")]
        public List<PlatformVisibleLeaderboardMetadata> leaderboards = new List<PlatformVisibleLeaderboardMetadata>();

        public PlatformLeaderboardResponse()
        {
        }

        public void AssertMatch(PlatformVisibleLeaderboardMetadata[] expected)
        {
            if (leaderboards == null)
            {
                throw new Exception("Response leaderboards list is null");
            }            

            if (leaderboards.Count != expected.Length)
            {
                throw new Exception(String.Format("Response leaderboards.count-{0} do not match the expected value {1}", leaderboards.Count, expected.Length));
            }

            foreach (PlatformVisibleLeaderboardMetadata item in expected)
            {
                if (leaderboards.Exists(i => ((i.id == item.id) && (i.name.Equals(item.name)) && (i.rating.Equals(item.rating)))))
                {
                    continue;
                }
                else
                {
                    throw new Exception(String.Format("Response did not contain the following expected LeaderboardData entry LbID-{0}, Name-{1}, Rating-{2}", item.id, item.name, item.rating));
                }
            }
        }

        public void AssertMatch(PlatformVisibleLeaderboardMetadata[] expected, UInt32 expPrimary, UInt32  expTitleId)
        {
            if (leaderboards == null)
            {
                throw new Exception("Response leaderboards list is null");
            }

            if (leaderboards.Count != expected.Length)
            {
                throw new Exception(String.Format("Response leaderboards.count-{0} do not match the expected value {1}", leaderboards.Count, expected.Length));
            }

            if (this.primaryId != expPrimary)
            {
                throw new Exception(String.Format("Response primaryID-{0} do not match the expected value {1}", this.primaryId, expPrimary));
            }

            if (this.titleid != expTitleId)
            {
                throw new Exception(String.Format("Response titleID-{0} do not match the expected value {1}", this.titleid, expTitleId));
            }

            foreach (PlatformVisibleLeaderboardMetadata item in expected)
            {
                if (leaderboards.Exists(i => ((i.id == item.id) && (i.name.Equals(item.name)) && (i.rating.Equals(item.rating)))))
                {
                    continue;
                }
                else
                {
                    throw new Exception(String.Format("Response did not contain the following expected LeaderboardData entry LbID-{0}, Name-{1}, Rating-{2}", item.id, item.name, item.rating));
                }
            }
        }        
    }

    [DataContract]
    public class PlatformLeaderboardRowData
    {
        [DataMember(Name = "xuid")]
        public ulong xuid;

        [DataMember(Name = "gamertag")]
        public string gamertag;

        [DataMember(Name = "rating")]
        public string rating;

        [DataMember(Name = "rank")]
        public uint rank;

        // The serializer needs a public default ctor
        public PlatformLeaderboardRowData() { }

        public PlatformLeaderboardRowData(ulong xuid, string nickname, string rating, uint rank)
        {
            this.xuid = xuid;
            this.gamertag = nickname;
            this.rating = rating;
            this.rank = rank;
        }
    }

    [DataContract]
    public class PagingInfo
    {
        [DataMember(Name = "continuationToken")]
        public string continuationToken = null;

        [DataMember(Name = "totalItems")]
        public UInt16 totalItems;

        // The serializer needs a public default ctor
        public PagingInfo() { }

        public PagingInfo(string _continuationToken, UInt16 _totalItems) 
        {
            continuationToken = _continuationToken;
            totalItems = _totalItems;
        }
    }

    [DataContract]
    public class PlatformLeaderboardDataForUserResponse
    {
        //[DataMember(Name = "titleid")]
        //public UInt32 titleid;

        //[DataMember(Name = "lbid")]
        //public UInt32 lbid;

        [DataMember(Name = "lbname")]
        public string name;

        [DataMember(Name = "rating")]
        public string rating;

        [DataMember(Name = "userData")]
        public PlatformLeaderboardRowData user = null;

        [DataMember(Name = "pagingInfo")]
        public PagingInfo pagingInfo = null;

        [DataMember(Name = "userList")]
        public List<PlatformLeaderboardRowData> friends = null;

        // The serializer needs a public default ctor
        public PlatformLeaderboardDataForUserResponse() { }

        public void AssertUserData(PlatformLeaderboardRowData expected)
        {
            if (this.user == null)
            {
                throw new TestCaseException("userData is null");
            }

            if (expected.gamertag != user.gamertag)
            {
                throw new TestCaseException(String.Format("userData.gamertag did not match. Expected - <{0}>, Actual received - <{1}>", expected.gamertag, user.gamertag));
            }

            if (expected.rank != user.rank)
            {
                throw new TestCaseException(String.Format("userData.rank did not match. Expected - <{0}>, Actual received - <{1}>", expected.rank, user.rank));
            }

            if (expected.rating != user.rating)
            {
                throw new TestCaseException(String.Format("userData.rating did not match. Expected - <{0}>, Actual received - <{1}>", expected.rating, user.rating));
            }

            if (expected.xuid != user.xuid)
            {
                throw new TestCaseException(String.Format("userData.xuid did not match. Expected - <{0}>, Actual received - <{1}>", expected.xuid, user.xuid));
            }
        }

        public void AssertLeaderboardTitleData(UInt32 expected_lbid, string expected_lbname, string expected_ratingName, UInt32 expected_titleID)
        {
            //if (expected_lbid != this.lbid)
            //{
            //  throw new TestCaseException(String.Format("leaderboardID did not match. Expected - <{0}>, Actual received - <{1}>", expected_lbid, this.lbid));
            //}

            if (expected_lbname != this.name)
            {
                throw new TestCaseException(String.Format("leaderboardName did not match. Expected - <{0}>, Actual received - <{1}>", expected_lbname, this.name));
            }

            if (expected_ratingName != this.rating)
            {
                throw new TestCaseException(String.Format("ratingName did not match. Expected - <{0}>, Actual received - <{1}>", expected_ratingName, this.rating));
            }

            //if (expected_titleID != this.titleid)
            //{
            //    throw new TestCaseException(String.Format("titleID did not match. Expected - <{0}>, Actual received - <{1}>", expected_titleID, this.titleid));
            //}
        }

        public void AssertFriendsCount(int expected_friends_count)
        {
            if (this.friends == null)
            {
                throw new TestCaseException("friends list is null");
            }

            if (this.friends.Count != expected_friends_count)
            {
                throw new TestCaseException(String.Format("friends count in the response did not match. Expected - <{0}>, Actual received - <{1}>", expected_friends_count, this.friends.Count));
            }
        }

        public void AssertFriendsData(List<PlatformLeaderboardRowData> expected_Friends)
        {
            if (this.friends == null)
            {
                throw new TestCaseException("friends list is null");
            }

            if (this.friends.Count != expected_Friends.Count)
            {
                throw new TestCaseException(String.Format("friends count in the response did not match. Expected - <{0}>, Actual received - <{1}>", expected_Friends.Count, this.friends.Count));
            }

            for (int i=0; i< expected_Friends.Count; i++)
            {
                if (friends[i].gamertag != expected_Friends[i].gamertag)
                {
                    throw new TestCaseException(String.Format("friend_index-<0>. friends.gamertag did not match. Expected - <{1}>, Actual received - <{2}>", i, expected_Friends[i].gamertag, this.friends[i].gamertag));
                }

                if (friends[i].xuid != expected_Friends[i].xuid)
                {
                    throw new TestCaseException(String.Format("friend_index-<0>. friends.gamertag did not match. Expected - <{1}>, Actual received - <{2}>", i, expected_Friends[i].xuid, this.friends[i].xuid));
                }

                if (friends[i].rank != expected_Friends[i].rank)
                {
                    throw new TestCaseException(String.Format("friend_index-<{0}> rank did not match. Expected - <{1}>, Actual received - <{2}>", i, expected_Friends[i].rank, this.friends[i].rank));
                }

                if (friends[i].rating != expected_Friends[i].rating)
                {
                    throw new TestCaseException(String.Format("friend_index-<{0}> rating did not match. Expected - <{1}>, Actual received - <{2}>", i, expected_Friends[i].rating, this.friends[i].rating));
                }
            }

        }

        public void AssertPagingInfo(PagingInfo expected_pgInfo)
        {
            if (this.pagingInfo == null)
            {
                throw new Exception("pagingInfo is null");
            }

            if (this.pagingInfo.totalItems != expected_pgInfo.totalItems)
            {
                throw new TestCaseException(String.Format("pageInfo.totalItems did not match. Expected - <{0}>, Actual received - <{1}>", expected_pgInfo.totalItems, this.pagingInfo.totalItems));
            }

            if (this.pagingInfo.continuationToken != expected_pgInfo.continuationToken)
            {
                throw new TestCaseException(String.Format("pageInfo.continuationToken did not match. Expected - <{0}>, Actual received - <{1}>", expected_pgInfo.continuationToken, this.pagingInfo.continuationToken));
            }
        }
    }

    public class TitleIngestion : CnGWCFTestBase
    {
        public TitleIngestion(uint titleID, string titlePath)
        {
            TitleManagementV2WCFClient titleClient = new TitleManagementV2WCFClient();

            if (titleClient.propTitle_WithoutCleaning((uint)titleID, titlePath) != TEST_RESULTS.PASSED)
            {
                throw new UnexpectedTestResultException("titleClient.propTitle failed");
            }

            // Clear db of any tables/sprocs from previous runs
            base.statsClient.ClearDB(titleID);
            // Deploy the title using MIX API
            base.statsClient.ConfigureLeaderboards(titleID);
        }
    }

    public class PlatformLeaderboardServiceTitle
    {
        private string _url;
        private string _userAgent;
        private int    _timeout;
        private string _method;
        private string _locale;
        private bool   _allowAutoRedirect;        
        private Dictionary <string, string> _headers;

        public string httpUserAgent
        {
            set { _userAgent = value; }
        }

        public int httpTimeOut
        {
            set { _timeout = value; }
        }

        public string httpLocale
        {
            set { _locale = value; }
        }

        public string httpMethod
        {
            set { _method = value; }
        }

        public PlatformLeaderboardServiceTitle(uint titleId)
        {           
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);
            
            _url = String.Format("http://{0}:11070/xstats/activity/titles/{1}/leaderboards", ipEndPoint.Address.ToString(), titleId);
            _allowAutoRedirect = true;
            _userAgent = "Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))";
            _timeout = 60000;
            _method = HttpMethod.Get;
            _locale = "en-US";                        
            _headers = new Dictionary<string, string>();
        }

        //Reload the in-memory platform visible DB using Xmgmt command
        public static void XmgmtReload()
        {
            Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.xstatsfd_int, "e :xstatsfd reloadplatformvisibleleaderboards");            
        }

        //Add headers
        public void AddHeader(string key, string value)
        {
            _headers.Add(key, value);
        }

        // Sets Accept-Language header by default
        public PlatformLeaderboardResponse GetJsonResponse(string locale, out HttpStatusCode statusCode)
        {
            PlatformLeaderboardResponse pvlResponse = null;
            HttpWebResponse response = null;
            DataContractJsonSerializer ser = null;
            HttpWebRequest request = null;

            try
            {
                request = (HttpWebRequest)WebRequest.Create(_url);
                request.Accept = "application/JSON";
                request.AllowAutoRedirect = _allowAutoRedirect;
                request.UserAgent = _userAgent;
                request.Timeout = _timeout;
                request.Method = _method;
                request.ContentType = "GET";
                request.Headers.Add("Accept-Language", locale);

                using (response = (HttpWebResponse)request.GetResponse())
                {
                    statusCode = response.StatusCode;
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        ser = new DataContractJsonSerializer(typeof(PlatformLeaderboardResponse));
                        pvlResponse = (PlatformLeaderboardResponse)ser.ReadObject(response.GetResponseStream());
                    }
                    else
                    {
                        request.Abort(); // abort the request, to avoid a subsequent test running into a protocol violation if the request port is still in use!
                    }
                }
            }
            catch (WebException web)
            {
                HttpWebResponse res = (HttpWebResponse)web.Response;
                statusCode = res.StatusCode;
            }
            catch (Exception e)
            {
                throw new Exception("Exception in processing GET response-" + e.ToString());
            }
                        
            return pvlResponse;
        }

        // HttpHeader values are set from user defiled _headers value
        public PlatformLeaderboardResponse GetJsonResponse(out HttpStatusCode statusCode)
        {
            PlatformLeaderboardResponse pvlResponse = null;

            try
            {                
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(_url);
                request.Accept = "application/JSON";
                request.AllowAutoRedirect = _allowAutoRedirect;
                request.UserAgent = _userAgent;
                request.Timeout = _timeout;
                request.Method = _method;

                foreach(KeyValuePair<string, string> item in _headers)
                {
                    request.Headers.Add(item.Key, item.Value);
                }

                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    statusCode = response.StatusCode;
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(PlatformLeaderboardResponse));
                        pvlResponse = (PlatformLeaderboardResponse)ser.ReadObject(response.GetResponseStream());
                    }
                }
            }
            catch (WebException web)
            {
                HttpWebResponse res = (HttpWebResponse)web.Response;
                statusCode = res.StatusCode;
            }
            catch (Exception e)
            {
                throw new Exception("Exception in processing GET response-" + e.ToString());
            }

            return pvlResponse;
        }
    }

    public class PlatformLeaderboardServiceTitleForUser
    {
        private string _url;
        private string _userAgent;
        private int _timeout;
        private string _method;
        private string _locale;
        private bool _allowAutoRedirect;        
        private Dictionary<string, string> _headers;

        public string httpUserAgent
        {
            set { _userAgent = value; }
        }

        public int httpTimeOut
        {
            set { _timeout = value; }
        }

        public string httpLocale
        {
            set { _locale = value; }
        }

        public string httpMethod
        {
            set { _method = value; }
        }

        public PlatformLeaderboardServiceTitleForUser(uint titleId, uint lbid, PNUser user, string queryString)
        {
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

            _url = String.Format("http://{0}:11070/xstats/activity/titles/{1}/leaderboards/{2}/users/xuid({3}){4}",
                                                ipEndPoint.Address.ToString(), 
                                                titleId,
                                                lbid,
                                                user.UserId,
                                                queryString);

            _allowAutoRedirect = true;
            _userAgent = "Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))";
            _timeout = 60000;
            _method = HttpMethod.Get;
            _locale = "en-US";
            _headers = new Dictionary<string, string>();
        }

        public PlatformLeaderboardServiceTitleForUser(uint titleId, uint lbid, ulong userId, string queryString)
        {
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

            _url = String.Format("http://{0}:11070/xstats/activity/titles/{1}/leaderboards/{2}/users/xuid({3}){4}",
                                                ipEndPoint.Address.ToString(),
                                                titleId,
                                                lbid,
                                                userId,
                                                queryString);

            _allowAutoRedirect = true;
            _userAgent = "Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))";
            _timeout = 60000;
            _method = HttpMethod.Get;
            _locale = "en-US";
            _headers = new Dictionary<string, string>();
        }

        //Add headers
        public void AddHeader(string key, string value)
        {
            _headers.Add(key, value);
        }

        // Sets Accept-Language header by default
        public PlatformLeaderboardDataForUserResponse GetJsonResponse(List<IClaimsIdentity> claims, string locale, out HttpStatusCode statusCode)
        {
            PlatformLeaderboardDataForUserResponse pvlResponse = null;
            HttpWebResponse response = null;
            DataContractJsonSerializer ser = null;
            HttpWebRequest request = null;

            try
            {
                request = (HttpWebRequest)WebRequest.Create(_url);
                request.Accept = "application/JSON";
                request.AllowAutoRedirect = _allowAutoRedirect;
                request.UserAgent = _userAgent;
                request.Timeout = _timeout;
                request.Method = _method;
                request.ContentType = "GET";
                request.Headers.Add("Accept-Language", locale);

                request.Headers.SetXAuthdata(new ClaimsPrincipal(new ClaimsIdentityCollection(claims)));    

                using (response = (HttpWebResponse)request.GetResponse())
                {
                    statusCode = response.StatusCode;
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        ser = new DataContractJsonSerializer(typeof(PlatformLeaderboardDataForUserResponse));
                        pvlResponse = (PlatformLeaderboardDataForUserResponse)ser.ReadObject(response.GetResponseStream());
                    }
                    else
                    {
                        request.Abort(); // abort the request, to avoid a subsequent test running into a protocol violation if the request port is still in use!
                    }
                }
            }
            catch (WebException web)
            {
                HttpWebResponse res = (HttpWebResponse)web.Response;
                statusCode = res.StatusCode;
            }
            catch (Exception e)
            {
                throw new Exception("Exception in processing GET response-" + e.ToString());
            }

            return pvlResponse;
        }

        // HttpHeader values are set from user defiled _headers value
        public PlatformLeaderboardDataForUserResponse GetJsonResponse(List<IClaimsIdentity> claims, out HttpStatusCode statusCode)
        {
            PlatformLeaderboardDataForUserResponse pvlResponse = null;

            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(_url);
                request.Accept = "application/JSON";
                request.AllowAutoRedirect = _allowAutoRedirect;
                request.UserAgent = _userAgent;
                request.Timeout = _timeout;
                request.Method = _method;
                request.ContentType = "GET";

                request.Headers.SetXAuthdata(new ClaimsPrincipal(new ClaimsIdentityCollection(claims)));                                              

                foreach (KeyValuePair<string, string> item in _headers)
                {
                    request.Headers.Add(item.Key, item.Value);
                }

                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    statusCode = response.StatusCode;
                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(PlatformLeaderboardDataForUserResponse));
                        pvlResponse = (PlatformLeaderboardDataForUserResponse)ser.ReadObject(response.GetResponseStream());
                    }
                }
            }
            catch (WebException web)
            {
                HttpWebResponse res = (HttpWebResponse)web.Response;
                statusCode = res.StatusCode;
            }
            catch (Exception e)
            {
                throw new Exception("Exception in processing GET response-" + e.ToString());
            }

            return pvlResponse;
        }
    }

    [TestGroup, Owner("srkalyan"), TestFrequency("Regression"), TestCasePriority(1)]
    public class PlatformVisibleFunctional
    {
        ////////////////
        //Testcase data        
        ////////////////

        uint DUMMY_TEST_TITLE = 12345; // This title ID is used just to insert data directly instead of actual title that is ingested
        uint TITLE_ID =  4294901874; // (0xFFFF0072) //This TITLE_ID should be present in the target Xblob in NPDB tables t_stats_leaderboard and t_interface_buckets
        const int LB_ID = 1;         //This LB_ID should be present in the target Xblob NPDB tables t_stats_leaderboard
                
        [TestCase, TestCasePriority(1), Description("Test direct sproc calls for Insert and Delete to t_stats_platform_visible_leaderboards table")]
        public void Verify_Insert_Delete_Sprocs_t_stats_platform_visible_leaderboards()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt
            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Sproc (p_stats_platform_visible_leaderboards_delete_all_for_DUMMY_TEST_TITLE)failed to DELETE existing rows for TitleID -" + DUMMY_TEST_TITLE);
            }

            //Insert row into table using sproc - p_stats_platform_visible_leaderboard_add
            t_pvt.insert((int)DUMMY_TEST_TITLE, LB_ID, "EN-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun1");
            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) == 0)
            {
                //Verify that the INSERT completed successfully.
                throw new TestCaseException("Sproc (p_stats_platform_visible_leaderboard_add) failed to INSERT row for TitleID - " + DUMMY_TEST_TITLE);
            }

            //Now again delete and verify 
            t_pvt.delete((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt
            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Sproc (p_stats_platform_visible_leaderboards_delete_all_for_DUMMY_TEST_TITLE)failed to DELETE existing rows for TitleID -" + DUMMY_TEST_TITLE);
            }
        }

        [TestCase, TestCasePriority(1), Description("Insert one EN-US title in t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_One_Title_EN_US()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID, "EN-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun1");

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);

            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("EN-US", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[] { new PlatformVisibleLeaderboardMetadata(LB_ID, "lego", "legorun1") };

            response.AssertMatch(expected);
        }

        [TestCase, TestCasePriority(1), Description("Insert Two EN-US title in t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_Two_Title_EN_US()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID, "EN-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun1");
            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID + 1, "EN-US", ColumnId.Rating, 0, 0, 0, "lego2", "legorun2");

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("EN-US", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[] { new PlatformVisibleLeaderboardMetadata(LB_ID, "lego", "legorun1"),
                                                                                               new PlatformVisibleLeaderboardMetadata(LB_ID+1, "lego2", "legorun2")};
            response.AssertMatch(expected);            
        }

        [TestCase, TestCasePriority(1), Description("Insert Three EN-US title and one de-Dein t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_Three_Title_EN_US_One_deDE()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID, "EN-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun1");
            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID + 2, "EN-US", ColumnId.Rating, 0, 0, 0, "lego3", "legorun3");
            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID + 1, "EN-US", ColumnId.Rating, 0, 0, 0, "lego2", "legorun2");
            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID + 1, "de-DE", ColumnId.Rating, 0, 0, 0, "lego-de", "legorun-de");

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("EN-US", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[] { new PlatformVisibleLeaderboardMetadata(LB_ID, "lego", "legorun1"),
                                                                                               new PlatformVisibleLeaderboardMetadata(LB_ID+2, "lego3", "legorun3"),
                                                                                               new PlatformVisibleLeaderboardMetadata(LB_ID+1, "lego2", "legorun2")};            

            response.AssertMatch(expected);

            //Verify de-DE
            response = svcLeader.GetJsonResponse("de-DE", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            expected = new PlatformVisibleLeaderboardMetadata[] { new PlatformVisibleLeaderboardMetadata(LB_ID+1, "lego-de", "legorun-de")};

            response.AssertMatch(expected);            

        }

        // 50 is the max leaderboard allowed per locale 
        [TestCase, TestCasePriority(1), Description("Insert 50 en-US title in t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_50_Titles_en_US()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            for (int i = LB_ID; i < (LB_ID + 50); i++)
            {
                t_pvt.insert((int)DUMMY_TEST_TITLE, i, "en-US", ColumnId.Rating, 0, 0, 0, "lego" + i, "legorun" + i);
            }
            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("en-US", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[50];

            int lb_id = LB_ID;
            for (int i = 0; i < 50; i++)
            {
                string name = "lego" + lb_id;
                string rating = "legorun" + lb_id;
                expected[i] = new PlatformVisibleLeaderboardMetadata((uint)lb_id++, name, rating);
            }

            response.AssertMatch(expected);
        }

        // 50 is the max leaderboard allowed per locale 
        [TestCase, TestCasePriority(1), Description("Insert 50 ja-JP title (non English) in t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_50_Titles_ja_JP()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            for (int i = LB_ID; i < (LB_ID + 50); i++)
            {
                t_pvt.insert((int)DUMMY_TEST_TITLE, i, "ja-JP", ColumnId.Rating, 0, 0, 0, "リーダー ボード" + i, "評価" + i);             
            }
            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("ja-JP", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[50];
            
            int lb_id = LB_ID;
            for (int i = 0; i < 50; i++)
            {
                string name = "リーダー ボード" + lb_id;
                string rating = "評価"+lb_id;
                expected[i] = new PlatformVisibleLeaderboardMetadata((uint)lb_id++, name, rating);
            }
            
            response.AssertMatch(expected);
        }
        
        [TestCase, TestCasePriority(1), Description("Insert 50 en-US title but query for ja-JP and verify if it returns default en-US result set")]
        public void Verify_Response_PlatformLeaderboardService_defaults_to_en_US()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            for (int i = LB_ID; i < (LB_ID + 50); i++)
            {
                t_pvt.insert((int)DUMMY_TEST_TITLE, i, "en-US", ColumnId.Rating, 0, 0, 0, "lego" + i, "legorun" + i);
            }
            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            // Request locale is set to ja-JP and should default to en-US as there is none
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("ja-JP", out retStatusCode);

            if (response == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected = new PlatformVisibleLeaderboardMetadata[50];

            int lb_id = LB_ID;
            for (int i = 0; i < 50; i++)
            {
                string name = "lego" + lb_id;
                string rating = "legorun" + lb_id;
                expected[i] = new PlatformVisibleLeaderboardMetadata((uint)lb_id++, name, rating);
            }

            response.AssertMatch(expected);
        }

        [TestCase, TestCasePriority(1), Description("Insert test title Xlast and verify the response data")]
        public void Verify_Response_PlatformLeaderboardService_IngestTitle_EN_DE()
        {
            string TestTitlePath = "SuitesData\\PlatformVisible\\FFFE1005-primary-attribute-enabled.xlast";
            uint TitleId = 0xFFFE1005;

            TitleIngestion TestTitle = new TitleIngestion(TitleId, TestTitlePath);
            
            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(TitleId);
            HttpStatusCode retStatusCode;

            //Verify leaderboard entries for en-US 

            PlatformLeaderboardResponse response_en_US = svcLeader.GetJsonResponse("en-US", out retStatusCode);

            if (response_en_US == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected_en_US =  new PlatformVisibleLeaderboardMetadata[3] 
            { new PlatformVisibleLeaderboardMetadata(3, "English Leaderboard_03", "English DecimalColumn"),
              new PlatformVisibleLeaderboardMetadata(4, "English Leaderboard_04", "English TimeColumn"),
              new PlatformVisibleLeaderboardMetadata(6, "English Leaderboard_06", "English Enabled Rating Column")
            };

            response_en_US.AssertMatch(expected_en_US, 3, TitleId);

            //Verify leaderboard entries for de-DE

            PlatformLeaderboardResponse response_de_DE = svcLeader.GetJsonResponse("de-DE", out retStatusCode);

            if (response_de_DE == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected_de_DE = new PlatformVisibleLeaderboardMetadata[3] 
            { new PlatformVisibleLeaderboardMetadata(3, "German Leaderboard_03", "German DecimalColumn"),
              new PlatformVisibleLeaderboardMetadata(4, "German Leaderboard_04", "German TimeColumn"),
              new PlatformVisibleLeaderboardMetadata(6, "German Leaderboard_06", "German Enabled Rating Column")
            };

            response_de_DE.AssertMatch(expected_de_DE, 3, TitleId);
        }

        [TestCase, TestCasePriority(1), Description("Insert test title Xlast and verify the response data")]
        public void Verify_Response_PlatformLeaderboardService_IngestTitle_EN_JP()
        {
            string TestTitlePath = "SuitesData\\PlatformVisible\\54510852-primary_EN_JP.xlast";
            uint TitleId = 0x54510852;

            TitleIngestion TestTitle = new TitleIngestion(TitleId, TestTitlePath);

            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(TitleId);
            HttpStatusCode retStatusCode;

            //Verify leaderboard entries for en-US 

            PlatformLeaderboardResponse response_en_US = svcLeader.GetJsonResponse("en-US", out retStatusCode);

            if (response_en_US == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected_en_US = new PlatformVisibleLeaderboardMetadata[2] 
            { new PlatformVisibleLeaderboardMetadata(1, "Mountain Citadel", "Desert Chase"),
              new PlatformVisibleLeaderboardMetadata(9, "Zurq Valley", "Gamer Mu")
            };

            response_en_US.AssertMatch(expected_en_US, 1, TitleId);


            //Verify leaderboard entries for ja-JP
            PlatformLeaderboardResponse response_ja_JP = svcLeader.GetJsonResponse("ja-JP", out retStatusCode);

            if (response_en_US == null)
            {
                throw new TestCaseException("Response is NULL");
            }

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }

            PlatformVisibleLeaderboardMetadata[] expected_ja_JP = new PlatformVisibleLeaderboardMetadata[2] 
            { new PlatformVisibleLeaderboardMetadata(1, "山間の宮殿", "砂漠のカーチェイス"),
              new PlatformVisibleLeaderboardMetadata(9, "ザーク渓谷", "JP Gamer Mu")
            };

            response_ja_JP.AssertMatch(expected_ja_JP, 1, TitleId);


            return;            
        }


        [TestCase, TestCasePriority(1), Description("Negative test, query empty titleID")]
        public void Verify_Response_PlatformLeaderboardService_Negative_Empty_TitleID_BadRequest()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("en-US", out retStatusCode);

            if (retStatusCode != HttpStatusCode.NoContent)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 400(Bad Request), the service returned - " + retStatusCode);
            }            
        }

        [TestCase, TestCasePriority(1), Description("Negative test, query with empty locale in header")]
        public void Verify_Response_PlatformLeaderboardService_Negative_Empty_Locale_BadRequest()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert((int)DUMMY_TEST_TITLE, LB_ID, "en-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun");

            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);
            svcLeader.AddHeader("Accept-Language", ""); // the absence of the Accept-Language header just means en-US is used by default (so an empty header is ok)

            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse(out retStatusCode);

            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200(OK), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(1), Description("Negative test, query with no Accept-Language header")]
        public void Verify_Response_PlatformLeaderboardService_Negative_Missing_LocaleHeader_BadRequest()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert((int)DUMMY_TEST_TITLE, LB_ID, "en-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun");

            PlatformLeaderboardServiceTitle.XmgmtReload(); // reload the platformvisible leaderboard db map in memory.

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(DUMMY_TEST_TITLE);            
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse(out retStatusCode);

            if (retStatusCode != HttpStatusCode.OK) // No Accept-Language header is 'ok' because en-US is used by default if no Accept-Language is specified
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200(OK), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(1), Description("Negative test, query for invalid EN-US title in t_stats_platform_visible_leaderboards table and verify response")]
        public void Verify_Response_PlatformLeaderboardService_Negative_Invalid_Title_EN_US()
        {
            t_PlatformVisibleLeaderboard t_pvt = new t_PlatformVisibleLeaderboard();
            t_pvt.delete_reload((int)DUMMY_TEST_TITLE); // Delete existing data/rows for DUMMY_TEST_TITLE from t_stats_platform_visible_leaderboards table and reload in-memory using Xmgmt

            if (t_pvt.RowCount((int)DUMMY_TEST_TITLE) != 0)
            {
                //Verify that the Delete completed successfully.
                throw new TestCaseException("Problem in test initialization, failed to DELETE existing rows for TitleID from table" + DUMMY_TEST_TITLE);
            }

            t_pvt.insert_reload((int)DUMMY_TEST_TITLE, LB_ID, "EN-US", ColumnId.Rating, 0, 0, 0, "lego", "legorun1");

            PlatformLeaderboardServiceTitle svcLeader = new PlatformLeaderboardServiceTitle(0);
            HttpStatusCode retStatusCode;
            PlatformLeaderboardResponse response = svcLeader.GetJsonResponse("EN-US", out retStatusCode);

            if (retStatusCode != HttpStatusCode.NoContent)
            {
                throw new TestCaseException("Response HttpStatusCode is not 200(OK), the service returned - " + retStatusCode);
            }
        }        

        //[TestCase, TestCasePriority(2), Description("Example test to create user and post stats.")]
        public void CreateUser_PostStats_Example(TestNode self)
        {
            FriendsCommon _fc = new FriendsCommon();

            PNUser xenona = _fc.CreateXenonUser(true);
            PNUser xenonb = _fc.CreateXenonUser(true);
            
            _fc.MakeFriend(xenona, xenonb);

            Global.RO.Debug("******************************");
            Global.RO.Debug("User xenonA xuid = " + xenona.UserId);
            Global.RO.Debug("User xenonB xuid = " + xenonb.UserId);

            Global.RO.Debug("******************************");
            Global.RO.Debug("A rating Before Post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("A Rank Before Post   =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("B rating Before Post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("B Rank Before Post   =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID) + "(RANK)");

            StatPostTest post = new StatPostTest(xenonb.UserId, TITLE_ID, 1);
            post.Initialize_Proc(0, StatPostTest.Proc_StatPostADD, 5, LB_ID);
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)2);
            post.LcPostLeaderboardResult();

            StatPostTest post2 = new StatPostTest(xenona.UserId, TITLE_ID, 1);
            post2.Initialize_Proc(0, StatPostTest.Proc_StatPostADD, 5, LB_ID);
            post2.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);
            post2.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)8);
            post2.LcPostLeaderboardResult();


            Global.RO.Debug("******************************");
            Global.RO.Debug("A rating after post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("A Rank   after post =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("B rating after post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("B Rank   after post =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("******************************");
        }      
               
        //[TestCase, TestCasePriority(2), Description("Example test to create user and post stats.")]
        public void CreateUser_STF_PostStats_Example(TestNode self)
        {

            FriendsCommon _fc = new FriendsCommon();

            PNUser xenona = _fc.CreateXenonUser(true);
            PNUser xenonb = _fc.CreateXenonUser(true);

            _fc.MakeFriend(xenona, xenonb);

            Global.RO.Debug("******************************");
            Global.RO.Debug("User xenonA xuid = " + xenona.UserId);
            Global.RO.Debug("User xenonB xuid = " + xenonb.UserId);

            Global.RO.Debug("******************************");
            Global.RO.Debug("A rating Before Post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("A Rank Before Post   =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("B rating Before Post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("B Rank Before Post   =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID) + "(RANK)");

            ////
            StatsPlayerAdd _data1 = new StatsPlayerAdd(LB_ID, xenona.UserId, 0, new object[] { (short)SpecialAttribMask.Rating, (long)500 });
            RequestBuilder _Req1;
            _Req1 = new RequestBuilder(TITLE_ID, new ulong[] { xenona.UserId }, false);
            _Req1.AddProcs(_data1.Proc);                

            StatsPostReq[] temp = new StatsPostReq[1];
            temp[0] = _Req1.GetPostData();

            foreach (StatsPostReq req in temp)
            {                
                    req.IsXenon = true;
            }            

            try
            {
                //g_Statobj.TManager.ExecuteAndVerify(temp, VerifyFlags.Player);
                uint HResultFD = 0;
                g_Statobj.TManager.PostTOStatsIMDB(temp[0]);
                g_Statobj.TManager.PostTOStatsFD(temp[0], ref HResultFD);
            }
            catch(Exception)
            {
            }

            ////

            Global.RO.Debug("******************************");
            Global.RO.Debug("A rating after post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("A Rank   after post =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenona.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("B rating after post =  " + StatReadTest.Get_Rating_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID));
            Global.RO.Debug("B Rank   after post =  " + StatReadTest.Get_Rank_Value_For_Leaderboard(xenonb.UserId, TITLE_ID, LB_ID) + "(RANK)");
            Global.RO.Debug("******************************");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\PlatformVisibleUserData.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Globalization;

using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Stats.Util;
using ServerTestFramework.Database;

using xonline.common.protocol;
using xonline.common.webplatform.livecache;
using StatsReadRequest = xonline.common.protocol.StatsReadRequest;
using StatsReadResponse = xonline.common.protocol.StatsReadResponse;
using StatsSpec = xonline.common.protocol.StatsSpec;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveCache.Test.Leaderboard;
using ServerTestFramework.Stats.PlatformVisible;

using Microsoft.XboxLive.Auth;
using Microsoft.IdentityModel.Claims;

namespace ServerTestFramework.Stats.PlatformVisibleUserData
{
    public class TestUser
    {
        PNUser _user;
        PNUser[] _friends;
        uint _friends_count;
        FriendsCommon _fc;
        uint _titleID;
        uint _lbid;

        public string Name
        {
            get
            {
                return _user.Name;
            }
        }

        public ulong UserID
        {
            get
            { return _user.UserId;}
        }

        public uint TitleID
        {
            get { return _titleID; }
        }

        public uint LeaderboardID
        {
            get { return _lbid; }
        }

        public PNUser[] FriendsList
        {
            get
            {
                return _friends;
            }
        }

        public TestUser(uint titleID, uint leaderboardID)
        {
            _fc = new FriendsCommon();
            _user = _fc.CreateXenonUser(true);
            _titleID = titleID;
            _lbid = leaderboardID;
        }

        public TestUser(uint titleID, uint leaderboardID, string gamerTag, ulong Puid)
        {
            _user = new PNUser(gamerTag, (ulong)Puid);
            _fc = new FriendsCommon();           
            _titleID = titleID;
            _lbid = leaderboardID;
        }

        public void MakeFriends(uint fCount)
        {
            _friends = _fc.CreateXenonUsers(fCount, true);
            System.Threading.Thread.Sleep(10000);
            //_fc.MakeFriends(_user, _friends);
            foreach (PNUser f in _friends)
            {
                _fc.MakeFriend(_user, f);
                System.Threading.Thread.Sleep(5000);
            }
            _friends_count = fCount;
        }

        public void RemoveFriends(uint friend_index)
        {
            _user.DeleteBuddy(_friends[friend_index]);
        }

        void PostStatsLong(uint titleID, uint lbID, ulong userID, Int64 ratingVal)
        {
            StatPostTest post = new StatPostTest(userID, titleID, 1);
            post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 5, (int)lbID);       // 5 == parameterCount.  
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)ratingVal);  // 5th param
            post.LcPostLeaderboardResult();
        }

        void PostStatsInt(uint titleID, uint lbID, ulong userID, Int32 ratingVal)
        {
            StatPostTest post = new StatPostTest(userID, titleID, 1);
            post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 5, (int)lbID);       // 5 == parameterCount.  
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT32, (Int32)ratingVal);  // 5th param
            post.LcPostLeaderboardResult();
        }

        void PostStatsInt(uint titleID, uint lbID, ulong userID, short columnID, Int32 ratingVal)
        {
            StatPostTest post = new StatPostTest(userID, titleID, 1);
            post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 7, (int)lbID);       // 5 == parameterCount.
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, -(Int64)ratingVal);  // 5th param
            post.SetProcParamaterAndValue(0, 5, StatPostTest._PT_INT16, columnID);   // 6th param
            post.SetProcParamaterAndValue(0, 6, StatPostTest._PT_INT32, (Int32)ratingVal);  // 7th param
            post.LcPostLeaderboardResult();
        }

        void PostStatsDecimal(uint titleID, uint lbID, ulong userID, Int64 ratingVal,int attribute_id, double diaplayVal)
        {
            // post leaderboard stats to leaderboard which uses a decimal value.
            StatPostTest post = new StatPostTest(userID, titleID, 1);
            post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 7, (int)lbID);       // 7 == parameterCount.  
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, ratingVal);            // 5th param
            post.SetProcParamaterAndValue(0, 5, StatPostTest._PT_INT16, (Int16) attribute_id);                 // 6th param (attributeId for display rating value)
            post.SetProcParamaterAndValue(0, 6, StatPostTest._PT_FLOAT, (double)diaplayVal);      // 7th param
            post.LcPostLeaderboardResult();
        }
        void PostStatsDateTime(uint titleID, uint lbID, ulong userID, int attribute_id, Int64 ratingVal)
        {
            // post leaderboard stats to leaderboard 4 (which uses a fulldatetime as its display rating column override)
            StatPostTest post = new StatPostTest(userID, titleID, 1);
            post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 7, (int)lbID);   // 7 == parameterCount.  
            post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);  // 4th param
            post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)ratingVal); // 5th param
            post.SetProcParamaterAndValue(0, 5, StatPostTest._PT_INT16, attribute_id);     // 6th param (attributeId for display rating value)
            post.SetProcParamaterAndValue(0, 6, StatPostTest._PT_INT64, (Int64)ratingVal); // 7th param
            post.LcPostLeaderboardResult();
        }

        public void PostStatsForUser(Int64 ratingVal)
        {
            PostStatsLong(this._titleID, this._lbid, _user.UserId, ratingVal);
        }

        public void PostStatsForUser_Int(short columnID, Int32 ratingVal)
        {
        
            PostStatsInt(this._titleID, this._lbid, _user.UserId, columnID, ratingVal);
        }


        public void PostStatsForFriend(int friend_index, Int64 ratingVal)
        {
            if (friend_index + 1 > _friends_count)
            {
                throw new Exception(String.Format("friend_index-<{0}> is greater than total friends-<{1}>", friend_index, _friends_count));
            }

            PostStatsLong(this._titleID, this._lbid, _friends[friend_index].UserId, ratingVal);
        }

        public void PostStatsForFriend_Int(int friend_index, short columnID, Int32 ratingVal)
        {
            if (friend_index + 1 > _friends_count)
            {
                throw new Exception(String.Format("friend_index-<{0}> is greater than total friends-<{1}>", friend_index, _friends_count));
            }

            PostStatsInt(this._titleID, this._lbid, _friends[friend_index].UserId, columnID,  ratingVal);
        }

        public void PostDecimalStatsForUser(int attribute_id, Int64 ratingVal, double displayVal)
        {
            PostStatsDecimal(this._titleID, this._lbid, _user.UserId, ratingVal, attribute_id, displayVal);
        }

        public void PostDecimalStatsForFriend(int friend_index, int attribute_id, Int64 ratingVal, double displayVal)
        {
            if (friend_index + 1 > _friends_count)
            {
                throw new Exception(String.Format("friend_index-<{0}> is greater than total friends-<{1}>", friend_index, _friends_count));
            }

            PostStatsDecimal(this._titleID, this._lbid, _friends[friend_index].UserId, ratingVal, attribute_id, displayVal);
        }

        public void PostTimeSpanStatsForUser(int attribute_id, long value)
        {            
            PostStatsDateTime(this.TitleID, this.LeaderboardID, this.UserID, attribute_id, value);
        }

        public void PostDateTimeStatsForUser(int attribute_id, DateTime value)
        {
            PostStatsDateTime(this.TitleID, this.LeaderboardID, this.UserID, attribute_id, value.ToFileTimeUtc());
        }

        public void PostTimeSpanStatsForFriend(int friend_index, int attribute_id, long value)
        {         
            PostStatsDateTime(this.TitleID, this.LeaderboardID, _friends[friend_index].UserId, attribute_id, value);
        }

        public void PostDateTimeStatsForFriend(int friend_index, int attribute_id, DateTime value)
        {
            PostStatsDateTime(this.TitleID, this.LeaderboardID, _friends[friend_index].UserId, attribute_id, value.ToFileTimeUtc());
        }

        public enum TimeFormats : byte
        {
            ShortTime =     1,    // HH:mm
            LongTime =      2,    // HH:mm:ss
            ExtraLongTime = 3,    // HH:mm:ss.fff
            ShortDate =     4,    // MM/DD/YYYY
            ExpandedDate =  5,    // MM/DD/YYYY HH:mm
            FullDate =      6,    // MM/DD/YYYY HH:mm:ss
            ExtraFullDate = 7,    // MM/DD/YYYY HH:mm:ss.fff
        }

        string DisplayRatingTimePattern(string formatString)
        {
            formatString = formatString.Replace("h:", "HH:"); // ensure to use HH: instead of "h:" for hours, otherwise, 0 hours == 12 in the string conversion
            return formatString.Replace(" tt", ""); // remove trailing meridian suffix from format string
        }

        public string GetDateTimeString(DateTime value, TimeFormats format, string culture)
        {
            CultureInfo ci = new CultureInfo(culture);
            string formatString = "";
            switch ((TimeFormats)format)
            {
                case TimeFormats.ShortDate:       // M/d/yyyy
                    formatString = ci.DateTimeFormat.ShortDatePattern;
                    break;

                case TimeFormats.ExpandedDate:    // M/d/yyyy h::mm
                    formatString = string.Format("{0} {1}", ci.DateTimeFormat.ShortDatePattern, DisplayRatingTimePattern(ci.DateTimeFormat.ShortTimePattern));
                    break;

                case TimeFormats.FullDate:        // M/d/yyyy h::mm::ss
                    formatString = string.Format("{0} {1}", ci.DateTimeFormat.ShortDatePattern, DisplayRatingTimePattern(ci.DateTimeFormat.LongTimePattern));
                    break;

                default: // PlatformVisibleLeaderboardTimeFormats.ExtraFullDate:   // M/d/yyyy h::mm::ss.fff
                    formatString = string.Format("{0} {1}.fff", ci.DateTimeFormat.ShortDatePattern, DisplayRatingTimePattern(ci.DateTimeFormat.LongTimePattern));
                    break;
            }
            return string.Format("{0}", value.ToString(formatString));
        }

        public string GetTimeSpanString(TimeSpan value, TimeFormats format, string culture)
        {
            CultureInfo ci = new CultureInfo(culture);
            string formatString = "";
            switch ((TimeFormats)format)
            {
                case TimeFormats.ShortTime:       // h::mm
                    formatString = DisplayRatingTimePattern(ci.DateTimeFormat.ShortTimePattern);
                    break;

                case TimeFormats.LongTime:        // h::mm::ss
                    formatString = DisplayRatingTimePattern(ci.DateTimeFormat.LongTimePattern);
                    break;

                default:  // PlatformVisibleLeaderboardTimeFormats.ExtraLongTime  (h::mm::ss.fff)
                    formatString = DisplayRatingTimePattern(ci.DateTimeFormat.LongTimePattern) + ".fff";  // tack on milliseconds to long time format
                    break;
            }

            DateTime dt = new DateTime(value.Ticks); // convert timespan to datetime to use DateTime's ToString method
            return string.Format("{0}", dt.ToString(formatString));
        }

        public PlatformLeaderboardDataForUserResponse QueryLeaderboardService(out HttpStatusCode retStatusCode)
        {
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(this.TitleID, this.LeaderboardID, this._user, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(this.Name, this.UserID, this.TitleID);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            return userResponse;
        }

        public PlatformLeaderboardDataForUserResponse QueryLeaderboardService(string queryString, out HttpStatusCode retStatusCode)
        {
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(this.TitleID, this.LeaderboardID, this._user, queryString);
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(this.Name, this.UserID, this.TitleID);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            return userResponse;
        }

    }

    [TestGroup, Owner("srkalyan"), TestFrequency("Regression"), TestCasePriority(1)]
    public partial class PlatformVisibleUserDataFunctional
    {                
        uint DUMMY_TEST_TITLE = 12345; // This title ID is used just to insert data directly instead of actual title that is ingested
        const int LB_ID = 1;         //This LB_ID should be present in the target Xblob NPDB tables t_stats_leaderboard

        const uint PlatformVisibleTitleId = 0xFFFE1005; // NOTE: This only works (Right now) if the mixstats stattest suite is run before this one!

        const uint PlatformVisibleLBID_3 = 3;
        const uint PlatformVisibleLBID_4 = 4; // this is the leaderboard with a date time stat
        const uint PlatformVisibleLBID_6 = 6;

        const string TestTitlePath = "SuitesData\\PlatformVisible\\FFFE1005-primary-attribute-enabled.xlast";

        private PNUser CreateUsers(uint numFriends, out PNUser[] users)
        {
            FriendsCommon _fc = new FriendsCommon();

            users = new PNUser[numFriends + 1];
            for (int i = 0; i < users.Length; i++)
            {
                users[i] = _fc.CreateXenonUser(true);
            }            

            // make friends among users
            foreach (PNUser userOuter in users)
            {
                foreach (PNUser userInner in users)
                {
                    if (userOuter != userInner) // a user can't make friends with itself
                    {
                        {
                            _fc.MakeFriend(userOuter, userInner);
                        }
                    }
                }
            }

            return users[0]; // the first user in the array is the primary user
        }

        private PNUser CreateUser_WithFriends(uint numFriends, out PNUser[] users)
        {
            FriendsCommon _fc = new FriendsCommon();

            users = new PNUser[numFriends+1];
            for (int i = 0; i < users.Length; i++)
            {
                users[i] = _fc.CreateXenonUser(true);

                if (i > 0)
                {
                    _fc.MakeFriend(users[0], users[i]);
                }
            }

            return users[0]; // the first user in the array is the primary user
        }

        private void PostStatsForSingleUser(PNUser user, uint titleID, int lbID, Int64 ratingVal)
        {
        }

        private void PostStatsForUsers(PNUser[] users)
        {
            long FILETIME = 128252061430160000;
            double dVal = Math.PI;
            long rating = 17000;
            long ratingInc = 3521;

            foreach(PNUser user in users)
            {
                // post leaderboard stats to leaderboard 3 (which uses a decimal value up to 4 points of precision as its display rating column override)
                StatPostTest post = new StatPostTest(user.UserId, PlatformVisibleTitleId, 1);
                post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 7, (int)PlatformVisibleLBID_3);  // 7 == parameterCount.  
                post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
                post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)(dVal * 4.0f));  // 5th param
                post.SetProcParamaterAndValue(0, 5, StatPostTest._PT_INT16, 1);                 // 6th param (attributeId for display rating value)
                post.SetProcParamaterAndValue(0, 6, StatPostTest._PT_FLOAT, (double)dVal);      // 7th param
                post.LcPostLeaderboardResult();

                dVal *= 2;

                // post leaderboard stats to leaderboard 4 (which uses a fulldatetime as its display rating column override)
                post = new StatPostTest(user.UserId, PlatformVisibleTitleId, 1);
                post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 7, (int)PlatformVisibleLBID_4);  // 7 == parameterCount.  
                post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
                post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)FILETIME);   // 5th param
                post.SetProcParamaterAndValue(0, 5, StatPostTest._PT_INT16, 3);                 // 6th param (attributeId for display rating value)
                post.SetProcParamaterAndValue(0, 6, StatPostTest._PT_INT64, (Int64)FILETIME);   // 7th param
                post.LcPostLeaderboardResult();

                FILETIME -= 10000000; // decrease 1 second

                // post leaderboard stats to leaderboard 6, which uses standard rating column (no override column)
                post = new StatPostTest(user.UserId, PlatformVisibleTitleId, 1);
                post.Initialize_Proc(0, StatPostTest.proc_StatPostReplace, 5, (int)PlatformVisibleLBID_6);  // 5 == parameterCount.  
                post.SetProcParamaterAndValue(0, 3, StatPostTest._PT_INT16, ColumnId.Rating);   // 4th param
                post.SetProcParamaterAndValue(0, 4, StatPostTest._PT_INT64, (Int64)rating);  // 5th param
                post.LcPostLeaderboardResult();

                rating += ratingInc;
            }
        }

        ////////////////
        //Testcase data        
        ////////////////

        [TestCase, TestCasePriority(2), Owner("joelwi"), Description("Basic test to send an HttpRequest with valid XAuthData to PVL User Data REST API.")]
        public void BasicValidXAuthDataPVLUserTest(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            PNUser xenona = new PNUser("TestUser", 7777777777);
            
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_3, xenona, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(xenona.Name, xenona.UserId, PlatformVisibleTitleId);

            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // The title id and lbid are "legit" Platform Visible, but the user has not posed any data to it... however the user is still 
            // authorized to call the REST API, and the response should simply return OK (200), which indicates the AuthZ validation check passed.
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200(OK), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("joelwi"), Description("Basic test to send an HttpRequest with an invalid XAuthData to PVL User Data ReST API.")]
        public void BasicInvalidXAuthDataPVLUserTest(TestNode self)
        {
            PNUser xenona = new PNUser("TestUser", 7777777777);
            
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(DUMMY_TEST_TITLE, LB_ID, xenona, "");

            // create a claim with a user id that *doesn't match* the userid in the XAuthData token 
            // (this call creates a "TestUser" (userid:123456789) that will not match the user created above)
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(DUMMY_TEST_TITLE);

            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            if (retStatusCode != HttpStatusCode.Unauthorized)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 401(Unauthorized), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("joelwi"), Description("Test designed to test a PVL response with user data that also has friends data.")]
        public void AdvancedUserAndFriendsLeaderboardDataTest(TestNode self)
        {
            PNUser user = null;
            PNUser[] users = null;
            const uint numFriends = 3;

            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            user = CreateUser_WithFriends(numFriends, out users);
            PostStatsForUsers(users);
            
            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_3, user, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserId, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            if (userResponse.name != "English Leaderboard_03")
            {
                throw new TestCaseException(string.Format("Expected leaderboard, {0}, but recevied {1}.", "English Leaderboard_03", userResponse.name));
            }

            //if (userResponse.lbid != PlatformVisibleLBID_3)
            //{
                //throw new TestCaseException(string.Format("Expected leaderboard id, {0}, but recevied id {1}.", PlatformVisibleLBID_3, userResponse.lbid));
            //}

            if (userResponse.rating != "English DecimalColumn")
            {
                throw new TestCaseException(string.Format("Expected leaderboard rating name, {0}, but recevied id {1}.", "English DecimalColumn", userResponse.rating));
            }

            //if (userResponse.titleid != PlatformVisibleTitleId)
            //{
              //  throw new TestCaseException(string.Format("Expected title id , {0}, but recevied title id {1}.", PlatformVisibleTitleId, userResponse.titleid));
            //}

            if (userResponse.pagingInfo.totalItems != (numFriends+1) || userResponse.pagingInfo.continuationToken != null)
            {
                throw new TestCaseException("Received invalid paging info!");
            }

            if (userResponse.friends.Count != (numFriends+1))
            {
                throw new TestCaseException(string.Format("Should have returned data for {0} friends but only returned {1}.", numFriends, userResponse.friends.Count));
            }

            foreach (PlatformLeaderboardRowData friend in userResponse.friends)
            {
                if (string.IsNullOrEmpty(friend.gamertag) ||
                    0 == friend.xuid ||
                    string.IsNullOrEmpty(friend.rating) ||
                    0 == friend.rank)
                {
                    throw new TestCaseException("Unexpected friend data returned!");
                }
            }
        }

        [TestCase, TestCasePriority(2), Owner("joelwi"), Description("Test designed to test a PVL response with user data that has no friends data.")]
        public void UserWithNoFriendsLeaderboardDataTest(TestNode self)
        {
            PNUser user = null;
            PNUser[] users = null;
            const uint numFriends = 0;

            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            user = CreateUsers(numFriends, out users);
            PostStatsForUsers(users);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_3, user, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserId, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 400(Bad Request), the service returned - " + retStatusCode);
            }

            if (userResponse.name != "English Leaderboard_03")
            {
                throw new TestCaseException(string.Format("Expected leaderboard, {0}, but recevied {1}.", "English Leaderboard_03", userResponse.name));
            }

            //if (userResponse.lbid != PlatformVisibleLBID_3)
            //{
                //throw new TestCaseException(string.Format("Expected leaderboard id, {0}, but recevied id {1}.", PlatformVisibleLBID_3, userResponse.lbid));
            //}

            if (userResponse.rating != "English DecimalColumn")
            {
                throw new TestCaseException(string.Format("Expected leaderboard rating name, {0}, but recevied id {1}.", "English DecimalColumn", userResponse.rating));
            }

            //if (userResponse.titleid != PlatformVisibleTitleId)
            //{
              //  throw new TestCaseException(string.Format("Expected title id , {0}, but recevied title id {1}.", PlatformVisibleTitleId, userResponse.titleid));
            //}

            if (userResponse.pagingInfo.totalItems != (numFriends+1) || userResponse.pagingInfo.continuationToken != null)
            {
                throw new TestCaseException("Received invalid paging info!");
            }

            if (userResponse.friends == null)
            {
                throw new TestCaseException(string.Format("Should have returned 1 item in the list for user {0}.", userResponse.user.gamertag));
            }
        }

        [TestCase, TestCasePriority(2), Owner("joelwi"), Description("Test designed to test paging inputs and the presence of the continuation token in the response body.")]
        public void PlatformVisibleLeaderboardMaxItemsTest(TestNode self)
        {
            PNUser user = null;
            PNUser[] users = null;

            const uint numFriends = 5;
            const uint MaxItems = 3;

            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            user = CreateUsers(numFriends, out users);
            PostStatsForUsers(users);
            
            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, 
                                                        PlatformVisibleLBID_4, 
                                                        user, 
                                                        "?maxItems=" + MaxItems);

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserId, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 400(Bad Request), the service returned - " + retStatusCode);
            }

            if (userResponse.name != "English Leaderboard_04")
            {
                throw new TestCaseException(string.Format("Expected leaderboard, {0}, but recevied {1}.", "English Leaderboard_04", userResponse.name));
            }

            //if (userResponse.lbid != PlatformVisibleLBID_4)
            //{
              //  throw new TestCaseException(string.Format("Expected leaderboard id, {0}, but recevied id {1}.", PlatformVisibleLBID_4, userResponse.lbid));
            //}

            if (userResponse.rating != "English TimeColumn")
            {
                throw new TestCaseException(string.Format("Expected leaderboard rating name, {0}, but recevied id {1}.", "English TimeColumn", userResponse.rating));
            }

            //if (userResponse.titleid != PlatformVisibleTitleId)
            //{
              //  throw new TestCaseException(string.Format("Expected title id , {0}, but recevied title id {1}.", PlatformVisibleTitleId, userResponse.titleid));
            //}

            if (userResponse.pagingInfo.totalItems != (numFriends+1))
            {
                throw new TestCaseException("Received invalid paging info!");
            }

            if (userResponse.pagingInfo.continuationToken == null)
            {
                throw new TestCaseException("Did not receive expected continuation token!");
            }

            uint ExpectedContinuationTokenValue = MaxItems;
            
            if (userResponse.pagingInfo.continuationToken != ExpectedContinuationTokenValue.ToString()) // continuation token should indicate what the next "skipItems" value should be
            {
                throw new TestCaseException("Did not receive proper continuation token value!");
            }

            if (userResponse.friends.Count != MaxItems) // should only have returned exactly the maxItems requested!
            {
                throw new TestCaseException(string.Format("Should have returned data for {0} friends but only returned {1}.", numFriends, userResponse.friends.Count));
            }

            foreach (PlatformLeaderboardRowData friend in userResponse.friends)
            {
                if (string.IsNullOrEmpty(friend.gamertag) ||
                    0 == friend.xuid ||
                    string.IsNullOrEmpty(friend.rating) ||
                    0 == friend.rank)
                {
                    throw new TestCaseException("Unexpected friend data returned!");
                }
            }

            // Now... provide the continuation token back into the api for the next page of results...

            PlatformLeaderboardServiceTitleForUser svcUser2 = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId,
                                                        PlatformVisibleLBID_4,
                                                        user,
                                                        string.Format("?continuationToken={0}", userResponse.pagingInfo.continuationToken));

            userResponse = svcUser2.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            if (userResponse.pagingInfo.totalItems != (numFriends+1))
            {
                throw new TestCaseException("Received invalid paging info response!");
            }

            if (userResponse.friends.Count != (numFriends+1 - MaxItems))
            {
                throw new TestCaseException("Received wrong number of friends in page 2 of results!");
            }

            if (userResponse.pagingInfo.continuationToken != null)
            {
                throw new TestCaseException("Received a continuation token where there should no longer have been one!");
            }
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for rating defined as Long")]
        public void LeaderboardDataTest_1User1Friend_Long(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 1;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);
            
            user.PostStatsForFriend(0, 10);
            user.PostStatsForUser(11);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 1);
            userResponse.AssertUserData(expected_userData);
    
            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 2));            
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for rating defined as Integer 4 bytes")]
        public void LeaderboardDataTest_1User1Friend_Integer(TestNode self)
        {
            string INT_TestTitlePath = "SuitesData\\PlatformVisible\\FFFE1005-primary-attribute-enabled-INT.xlast";
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, INT_TestTitlePath);

            uint numFriends = 1;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            // Here the leaderboard is sorted in descending order where low value gets top rank.

            user.PostStatsForFriend_Int(0, 1, 10);
            user.PostStatsForUser_Int(1, 11);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;
            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting progressive stats and query leaderboard for rating defined as Long")]
        public void LeaderboardDataTest_1User2Friend_Long_GamePlay(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2; 
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForFriend(0, 10); //We are posting stats for only 1 of the 2 friends here.
            user.PostStatsForUser(11);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 1);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 2));            
            userResponse.AssertFriendsData(expected_friendsData);

            //////////////////////////////////////////////////////////
            //Post progressive score for the friend and verify result
            /////////////////////////////////////////////////////////
            user.PostStatsForFriend(0, 13);

            PlatformLeaderboardDataForUserResponse userResponse2 = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            expected_pageInfo = new PagingInfo(null, 2);
            userResponse2.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse2.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData2 = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 2); //User should be ranked#2
            userResponse2.AssertUserData(expected_userData2);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData2 = new List<PlatformLeaderboardRowData>();
            expected_friendsData2.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "13", 1)); //Friend should be ranked #1
            expected_friendsData2.Add(expected_userData2);
            userResponse2.AssertFriendsData(expected_friendsData2);

        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for 2 friends where rating is Long")]
        public void LeaderboardDataTest_1User2Friends_Long_EN(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(11);
            user.PostStatsForFriend(0, 10);
            user.PostStatsForFriend(1, 12);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 3);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[1].UserId, user.FriendsList[1].Name, "12", 1));
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 3));
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats for 2 friends, query leaderboard, remove 1 friend and again query")]
        public void LeaderboardDataTest_1User2Friends_Long_EN_RemoveFriend(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(11);
            user.PostStatsForFriend(0, 10);
            user.PostStatsForFriend(1, 12);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 3);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[1].UserId, user.FriendsList[1].Name, "12", 1));
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 3));
            userResponse.AssertFriendsData(expected_friendsData);

            ////////////////////////////////////////////////////
            //Remove friend_index - 1 from user and query again
            ////////////////////////////////////////////////////
            user.RemoveFriends(1);

            PlatformLeaderboardDataForUserResponse response2 = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            expected_pageInfo = new PagingInfo(null, 2);
            response2.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            response2.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 1); //User with score 11 will get Rank#1
            response2.AssertUserData(expected_userData);

            //Verify friends data in the response
            expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(expected_userData); 
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 2)); //Friend[0] with score 10 will get Rank#2
            response2.AssertFriendsData(expected_friendsData);

        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for 2 friends where rating is Long")]
        public void LeaderboardDataTest_1User2Friends_Long_DE(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(11);
            user.PostStatsForFriend(0, 10);
            user.PostStatsForFriend(1, 12);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_6, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "de-DE", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 3);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "German Leaderboard_06", "German Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "11", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[1].UserId, user.FriendsList[1].Name, "12", 1));
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10", 3));
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for reading Decimal value en-US")]
        public void LeaderboardDataTest_1User1Friend_Decimal_EN(TestNode self)
        {
            //The xlast has leaderboardID '9' with  platformVisible="enabled" platformVisibleRatingAttributeId="3"
            //PropertyID "0x30008105" has 2 decimal place of precision set for display.
            string XLAST = "SuitesData\\PlatformVisible\\54510852-primary_EN_JP.xlast";
            uint TITLE_ID = 0x54510852;
            uint LEADERBOARD_ID = 9;           
            int DISAPLY_ATTRIBUTE_ID = 3;
            uint numFriends = 1;

            TitleIngestion TestTitle = new TitleIngestion(TITLE_ID, XLAST);

            TestUser user = new TestUser(TITLE_ID, LEADERBOARD_ID);
            user.MakeFriends(numFriends);

            user.PostDecimalStatsForUser(DISAPLY_ATTRIBUTE_ID, 2, 10.3);          // 10.3 should be returned as 10.30 to show 2 decimal place
            user.PostDecimalStatsForFriend(0, DISAPLY_ATTRIBUTE_ID, 1, 10.111);   // 10.111 should be returned as 10.11 to show 2 decimal place

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(user.TitleID, user.LeaderboardID, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, user.TitleID);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "en-US", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }
           
            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "Zurq Valley", "Gamer Mu", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "10.30", 1);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10.11", 2));            
            userResponse.AssertFriendsData(expected_friendsData);            
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for reading Decimal value ja-JP")]
        public void LeaderboardDataTest_1User1Friend_Decimal_JP(TestNode self)
        {
            //The xlast has leaderboardID '9' with  platformVisible="enabled" platformVisibleRatingAttributeId="3"
            //PropertyID "0x30008105" has 2 decimal place of precision set for display.
            string XLAST = "SuitesData\\PlatformVisible\\54510852-primary_EN_JP.xlast";
            uint TITLE_ID = 0x54510852;
            uint LEADERBOARD_ID = 9;
            int DISAPLY_ATTRIBUTE_ID = 3;
            uint numFriends = 1;

            TitleIngestion TestTitle = new TitleIngestion(TITLE_ID, XLAST);

            TestUser user = new TestUser(TITLE_ID, LEADERBOARD_ID);
            user.MakeFriends(numFriends);

            user.PostDecimalStatsForUser(DISAPLY_ATTRIBUTE_ID, 10, 10.321);      // 10.321 should be returned as 10.32 to show 2 decimal place
            user.PostDecimalStatsForFriend(0, DISAPLY_ATTRIBUTE_ID, 20, 10.9);   // 10.9 should be returned as 10.90 to show 2 decimal place

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(user.TitleID, user.LeaderboardID, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, user.TitleID);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "ja-JP", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "ザーク渓谷", "JP Gamer Mu", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "10.32", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10.90", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for reading Decimal value nl-NL")]
        public void LeaderboardDataTest_1User1Friend_Decimal_NL(TestNode self)
        {
            //The xlast has leaderboardID '9' with  platformVisible="enabled" platformVisibleRatingAttributeId="3"
            //PropertyID "0x30008105" has 2 decimal place of precision set for display.
            string XLAST = "SuitesData\\PlatformVisible\\54510852-primary_EN_NL.xlast";
            uint TITLE_ID = 0x54510852;
            uint LEADERBOARD_ID = 9;
            int DISAPLY_ATTRIBUTE_ID = 3;
            uint numFriends = 1;

            TitleIngestion TestTitle = new TitleIngestion(TITLE_ID, XLAST);

            TestUser user = new TestUser(TITLE_ID, LEADERBOARD_ID);
            user.MakeFriends(numFriends);

            user.PostDecimalStatsForUser(DISAPLY_ATTRIBUTE_ID, 10, 10.321);      // 10.321 should be returned as 10.32 to show 2 decimal place
            user.PostDecimalStatsForFriend(0, DISAPLY_ATTRIBUTE_ID, 20, 10.9);   // 10.9 should be returned as 10,90 to show 2 decimal place

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(user.TitleID, user.LeaderboardID, user.UserID, "");
            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, user.TitleID);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "nl-NL", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "NL Leaderboard", "NL Gamer Mu", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "10,32", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "10,90", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting DateTime stats and query leaderboard for reading DateTime value en-US")]
        public void LeaderboardTest_1User1Friend_DateTime_EN(TestNode self)
        { 
            uint numFriends = 1;
            int ATTRIBUTE_ID = 3;
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_4);
            user.MakeFriends(numFriends);

            user.PostDateTimeStatsForUser(ATTRIBUTE_ID, new DateTime(2010, 7, 10, 0, 0, 0));      //small value
            user.PostDateTimeStatsForFriend(0, ATTRIBUTE_ID, new DateTime(2010, 7, 11, 0, 0, 0)); //big value, bigger by 1 day

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_4, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "English Leaderboard_04", "English TimeColumn", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "7/10/2010 00:00:00.000", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "7/11/2010 00:00:00.000", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting DateTime stats and query leaderboard for reading DateTime value de-DE")]
        public void LeaderboardTest_1User1Friend_DateTime_DE(TestNode self)
        {
            uint numFriends = 1;
            int ATTRIBUTE_ID = 3;
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_4);
            user.MakeFriends(numFriends);

            user.PostDateTimeStatsForUser(ATTRIBUTE_ID, new DateTime(2010, 7, 10, 0, 0, 0));      //small value
            user.PostDateTimeStatsForFriend(0, ATTRIBUTE_ID, new DateTime(2010, 7, 11, 0, 0, 0)); //big value, bigger by 1 day

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_4, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "de-DE", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "German Leaderboard_04", "German TimeColumn", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "10.07.2010 00:00:00.000", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "11.07.2010 00:00:00.000", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting DateTime stats and query leaderboard for reading DateTime value nl-NL")]
        public void LeaderboardTest_1User1Friend_DateTime_NL(TestNode self)
        {
            uint numFriends = 1;
            int ATTRIBUTE_ID = 3;
            string XLAST = "SuitesData\\PlatformVisible\\FFFE1005-primary-attribute-enabled_NL.xlast";
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, XLAST);

            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_4);
            user.MakeFriends(numFriends);

            user.PostDateTimeStatsForUser(ATTRIBUTE_ID, new DateTime(2010, 7, 10, 10, 10, 10));      //small value
            user.PostDateTimeStatsForFriend(0, ATTRIBUTE_ID, new DateTime(2010, 7, 11, 11, 12, 13)); //big value, bigger by 1 day

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_4, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, "nl-NL", out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "NL Leaderboard_04", "NL TimeColumn", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "10-7-2010 10:10:10.000", 2);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "11-7-2010 11:12:13.000", 1));
            expected_friendsData.Add(expected_userData);
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting TimeSpan stats and query leaderboard for reading TimeSpan value en-US")]
        public void LeaderboardTest_1User1Friend_TimeSpan_EN(TestNode self)
        {
            uint numFriends = 1;
            int ATTRIBUTE_ID = 3;
            string XLAST = "SuitesData\\PlatformVisible\\FFFE1005-primary-enabled-timespan.xlast";
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, XLAST);

            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_4);
            user.MakeFriends(numFriends);

            //user.PostDateTimeStatsForUser(ATTRIBUTE_ID, new DateTime(2010, 7, 10, 0, 0, 0));      //small value
            //user.PostDateTimeStatsForFriend(0, ATTRIBUTE_ID, new DateTime(2010, 7, 11, 0, 0, 0)); //big value, bigger by 1 day

            TimeSpan t1 = new TimeSpan(0, 0, 1, 34, 0); // Bigger value
            TimeSpan t2 = new TimeSpan(0, 0, 1, 30, 0); // Smaller value

            user.PostTimeSpanStatsForUser(ATTRIBUTE_ID, t1.Ticks / TimeSpan.TicksPerMillisecond);
            user.PostTimeSpanStatsForFriend(0, ATTRIBUTE_ID, t2.Ticks / TimeSpan.TicksPerMillisecond);

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, PlatformVisibleLBID_4, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 2);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData(user.LeaderboardID, "English Leaderboard_04", "English TimeColumn", user.TitleID);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "00:01:34.000", 1);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();
            expected_friendsData.Add(expected_userData);
            expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[0].UserId, user.FriendsList[0].Name, "00:01:30.000", 2));
            userResponse.AssertFriendsData(expected_friendsData);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard for 20 friendswith paging option")]
        public void LeaderboardDataTest_Paging_1User20Friends_maxItems(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 20;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);                
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            ////////////////////////////////////////////////////
            // Request for the 1st page with maxItems
            ////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService("?maxItems=5", out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo("5", 21);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "70", 1);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();

            expected_friendsData.Add(expected_userData);
            for (int i = 1; i < numFriends; i++)
            {
                expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[numFriends - i].UserId, user.FriendsList[numFriends - i].Name, (numFriends - i).ToString(), (uint)(i + 1)));
            }

            //Verify the expected response for the page size 5
            List<PlatformLeaderboardRowData> expected_page1 = new List<PlatformLeaderboardRowData>();
            for (int c = 0; c < 5; c++) //PlatformLeaderboardRowData rec in expected_friendsData)
            {
                expected_page1.Add(expected_friendsData[c]);
            }
            userResponse.AssertFriendsData(expected_page1);

            //////////////////////////////////////////////////////////////
            //Request for the 2nd page with maxItems and continuationToken
            //////////////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse_pg2 = user.QueryLeaderboardService(string.Format("?maxItems=5&continuationToken={0}", userResponse.pagingInfo.continuationToken), out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 2nd Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo_pg2 = new PagingInfo("10", 21);
            userResponse_pg2.AssertPagingInfo(expected_pageInfo_pg2);

            //verify the Leaderboard and Title Data in the response
            userResponse_pg2.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            userResponse_pg2.AssertUserData(expected_userData);

            //Verify the expected response for the page size 5, page 2
            List<PlatformLeaderboardRowData> expected_page2 = new List<PlatformLeaderboardRowData>();
            for(int c=5; c<10; c++) //PlatformLeaderboardRowData rec in expected_friendsData)
            {
                expected_page2.Add(expected_friendsData[c]);
            }
            userResponse_pg2.AssertFriendsData(expected_page2);


            //////////////////////////////////////////////////////////////
            //Request for the 3rd page with maxItems and continuationToken
            //////////////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse_pg3 = user.QueryLeaderboardService(string.Format("?maxItems=5&continuationToken={0}", userResponse_pg2.pagingInfo.continuationToken), out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 3rd Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo_pg3 = new PagingInfo("15", 21);
            userResponse_pg3.AssertPagingInfo(expected_pageInfo_pg3);

            //verify the Leaderboard and Title Data in the response
            userResponse_pg3.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            userResponse_pg3.AssertUserData(expected_userData);

            //Verify the expected response for the page size 5, page 2
            List<PlatformLeaderboardRowData> expected_page3 = new List<PlatformLeaderboardRowData>();
            for (int c = 10; c < 15; c++) //PlatformLeaderboardRowData rec in expected_friendsData)
            {
                expected_page3.Add(expected_friendsData[c]);
            }
            userResponse_pg3.AssertFriendsData(expected_page3);

            //////////////////////////////////////////////////////////////
            //Request for the 4th page with maxItems and continuationToken
            //////////////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse_pg4 = user.QueryLeaderboardService(string.Format("?maxItems=5&continuationToken={0}", userResponse_pg3.pagingInfo.continuationToken), out retStatusCode);

            // Leaderboard data should be returned!
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 4th Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo_pg4 = new PagingInfo("20", 21);
            userResponse_pg4.AssertPagingInfo(expected_pageInfo_pg4);

            //verify the Leaderboard and Title Data in the response
            userResponse_pg4.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            userResponse_pg4.AssertUserData(expected_userData);

            //Verify the expected response for the page size 5, page 2
            List<PlatformLeaderboardRowData> expected_page4 = new List<PlatformLeaderboardRowData>();
            for (int c = 15; c < 20; c++) //PlatformLeaderboardRowData rec in expected_friendsData)
            {
                expected_page4.Add(expected_friendsData[c]);
            }
            userResponse_pg4.AssertFriendsData(expected_page4);
        }

        [TestCase, TestCasePriority(1), Owner("srkalyan"), Description("Posting stats and query leaderboard using skipItems")]
        public void LeaderboardDataTest_Paging_1User10Friends_skipItems(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 10;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            ////////////////////////////////////////////////////
            // Request for the 1st page with maxItems
            ////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService("?skipItems=1", out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "70", 1);
            userResponse.AssertUserData(expected_userData);

            //Verify friends data in the response
            List<PlatformLeaderboardRowData> expected_friendsData = new List<PlatformLeaderboardRowData>();

            expected_friendsData.Add(expected_userData);
            for (int i = 1; i <= numFriends; i++)
            {
                expected_friendsData.Add(new PlatformLeaderboardRowData(user.FriendsList[numFriends - i].UserId, user.FriendsList[numFriends - i].Name, (numFriends - i).ToString(), (uint)(i + 1)));
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo_pg2 = new PagingInfo(null, (ushort) (numFriends+1));
            userResponse.AssertPagingInfo(expected_pageInfo_pg2);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the expected response for the page size 5, page 2
            List<PlatformLeaderboardRowData> expected_page2 = new List<PlatformLeaderboardRowData>();
            for (int c = 1; c < numFriends+1; c++) //PlatformLeaderboardRowData rec in expected_friendsData)
            {
                expected_page2.Add(expected_friendsData[c]);
            }
            userResponse.AssertFriendsData(expected_page2);
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and request with invalid query for leaderboard")]
        public void LeaderboardDataTest_Negative_Invalid_Paging_Query(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 1;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            ////////////////////////////////////////////////////
            // Request with invalid query parameter
            ////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService("?maxItems=0&continuationToken=1,", out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.BadRequest)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 400 (Bad Request), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and request with invalid query for leaderboard")]
        public void LeaderboardDataTest_Negative_Invalid_maxItem(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            ////////////////////////////////////////////////////
            // Request with invalid query parameter
            ////////////////////////////////////////////////////
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService("?maxItems=-1", out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.BadRequest)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 400 (Bad Request), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and request with invalid title")]
        public void LeaderboardDataTest_Negative_Invalid_Title(TestNode self)
        {
            uint INVALID_TITLE = 123;
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(INVALID_TITLE, PlatformVisibleLBID_6, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, INVALID_TITLE);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.NoContent)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 204 (No Content), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and request with invalid leaderboard")]
        public void LeaderboardDataTest_Negative_Invalid_LeaderboardID(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 2;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(70);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;

            PlatformLeaderboardServiceTitleForUser svcUser = new PlatformLeaderboardServiceTitleForUser(PlatformVisibleTitleId, 9999, user.UserID, "");

            List<IClaimsIdentity> claims = XAuthDataUtil.GetTestToken(user.Name, user.UserID, PlatformVisibleTitleId);

            PlatformLeaderboardDataForUserResponse userResponse = svcUser.GetJsonResponse(claims, out retStatusCode);

            // Leaderboard data should be returned with continuation token page with 5 friends
            if (retStatusCode != HttpStatusCode.NoContent)
            {
                throw new TestCaseException("Response HttpStatusCode did not match 204 (No Content), the service returned - " + retStatusCode);
            }
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and query leaderboard for 50 friends and user ranks top")]
        public void LeaderboardDataTest_1User50Friends_UserTop(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 50;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(110);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....
            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned with all 100 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, (ushort) (numFriends+1));
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "110", 1);
            userResponse.AssertUserData(expected_userData);

            userResponse.AssertFriendsCount((int)numFriends+1);
        }

        [TestCase, TestCasePriority(2), Owner("srkalyan"), Description("Posting stats and query leaderboard for 50 friends and user ranks lowest")]
        public void LeaderboardDataTest_1User50Friends_UserBottom(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 50;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(0);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i + 1);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned with all 100 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 51);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "0", 51);
            userResponse.AssertUserData(expected_userData);

            userResponse.AssertFriendsCount(51);
        }
    
        //This test fails and is a bug
        [TestCase, TestCasePriority(2), Owner("srkalyan"), EnvRequirement("Manual"), Description("Posting stats and query leaderboard for 100 friends and user ranks top")]
        public void LeaderboardDataTest_1User100Friends_UserTop(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 100;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(110);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i);
            }

            // Now try to get the user data back....
            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned with all 100 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 101);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "110", 1);
            userResponse.AssertUserData(expected_userData);

            userResponse.AssertFriendsCount(101);
        }

        //This test fails and is a bug
        [TestCase, TestCasePriority(2), Owner("srkalyan"), EnvRequirement("Manual"), Description("Posting stats and query leaderboard for 100 friends and user ranks lowest")]
        public void LeaderboardDataTest_1User100Friends_UserBottom(TestNode self)
        {
            TitleIngestion TestTitle = new TitleIngestion(PlatformVisibleTitleId, TestTitlePath);

            uint numFriends = 100;
            TestUser user = new TestUser(PlatformVisibleTitleId, PlatformVisibleLBID_6);
            user.MakeFriends(numFriends);

            user.PostStatsForUser(0);

            for (int i = 0; i < numFriends; i++)
            {
                user.PostStatsForFriend(i, i + 1);
            }

            // Now try to get the user data back....

            HttpStatusCode retStatusCode;
            PlatformLeaderboardDataForUserResponse userResponse = user.QueryLeaderboardService(out retStatusCode);

            // Leaderboard data should be returned with all 100 friends
            if (retStatusCode != HttpStatusCode.OK)
            {
                throw new TestCaseException("Response HttpStatusCode for 1st Page request did not match 200 (OK), the service returned - " + retStatusCode);
            }

            //Verify the pagingInfo in the response
            PagingInfo expected_pageInfo = new PagingInfo(null, 101);
            userResponse.AssertPagingInfo(expected_pageInfo);

            //verify the Leaderboard and Title Data in the response
            userResponse.AssertLeaderboardTitleData((uint)PlatformVisibleLBID_6, "English Leaderboard_06", "English Enabled Rating Column", PlatformVisibleTitleId);

            //Verify the userData in the response
            PlatformLeaderboardRowData expected_userData = new PlatformLeaderboardRowData(user.UserID, user.Name, "0", 101);
            userResponse.AssertUserData(expected_userData);

            userResponse.AssertFriendsCount(101);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\XAuthDataUtil.cs ===
﻿using System;
using System.Collections.Generic;
using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth;
using Microsoft.XboxLive.Auth.Claims;

namespace ServerTestFramework.Stats.PlatformVisible
{
    public class XAuthDataUtil
    {
        private const string _Issuer = "xsts.xboxlive.com";

        public static List<IClaimsIdentity> GetTestToken(uint titleId)
        {
            return GetTestToken("TestUser", 123456789, titleId);
        }

        public static List<IClaimsIdentity> GetTestToken(string gamertag, ulong xuid, uint titleId)
        {

            //Make up a token by adding claims. 
            //Feel free to leave what you don't care about as default values and just change the ones you care about.
            List<Claim> claims = new List<Claim>()
            {
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.DeviceId, "FA00FFFFFFFFFFFF", ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.FlowToken, "EF594473B7D97D8D", ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.TitleId, titleId.ToString("X"), ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.TitleVersion, "1", ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.AgeGroup, "Adult", ClaimValueTypes.String, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.PartnerXuid, "CB7E3DD1C3BBAC569F75031E61D1507CE7FFE7B7", ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.ClientIpPort, "10.124.212.84:65535", AuthClaimValueTypes.IpAddress, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.Gamertag, gamertag, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.Privileges, "255", AuthClaimValueTypes.IntegerArray, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.Puid, "37FFF893377D2", ClaimValueTypes.HexBinary, _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.Tier, "Gold", _Issuer),
                new Microsoft.IdentityModel.Claims.Claim(AuthClaimTypes.Xuid, xuid.ToString("X"), ClaimValueTypes.HexBinary, _Issuer),
            };
            List<IClaimsIdentity> identities = new List<IClaimsIdentity>()
            {
                new ClaimsIdentity(claims, AuthenticationTypes.Federation),
            };

            return identities;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\achievementsdevtest.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;


using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;

[TestGroup, DVT]
public class AchievementsDevTest : TestNode
{
    private const uint TITLE_ID          = 0xfeedfeed;
    private const uint TITLE_ID2         = 0x12344321;
    private const int  MAX_ACHIEVEMENTS  = 10;
    private const int  ACHIEVEMENT_FLAGS = 0x1;

    [TestGroupSetup]
    public void Setup()
    {
        using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
        {
            cxn.Open();

            // xblob setup will already have created all the tables, triggers,
            // and populated environment invariant and environment specific
            // information. All we need to do is add and/or reset the
            // unit test specific data.
            string sqlfile = Path.Combine(Path.GetDirectoryName(ContainingDll), "stats_dev_test_data.sql");
            DbUtil.ExecuteSqlFile(cxn, sqlfile);

            // TODO: force a reload?
        }
    }




    #region Test cases

    [TestCase]
    public void Empty()
    {
        ulong   user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        AchievementEnumResponse resp = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(resp.Achievements), 0);
    }

    [TestCase]
    public void ClearAchievements()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, 1, ACHIEVEMENT_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);
        AchievementEnumResponse  respEnum  = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);

        AchievementClearResponse respClear = ClearAchievements(slot, TITLE_ID, user);
        respEnum = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(respEnum.Achievements), 0);
        Assert.AreEqual(respEnum.Achievements.Length, XOn.XONLINE_MAX_ACHIEVEMENTS);
        Assert.AreEqual(respEnum.Achievements[0].AchievementId, ValidAchievementIds[0]);
        Assert.AreEqual(respEnum.Achievements[0].ImageId, 0xffffffff);
        Assert.AreEqual(respEnum.Achievements[0].HowTo, "");
        Assert.AreEqual(respEnum.Achievements[0].Flags, 0);

    }

    [TestCase]
    public void WriteNewAchieved()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, 1, ACHIEVEMENT_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);
        Assert.AreEqual(Achieved(respEnum.Achievements), 1);

        AchievementClearResponse respClear = ClearAchievements(slot, TITLE_ID, user);
        respEnum = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(respEnum.Achievements), 0);
    }

    [TestCase]
    public void WriteLotsOfAchieved()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, ValidAchievementIds.Length, ACHIEVEMENT_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements, 0, XOn.XONLINE_MAX_ACHIEVEMENTS);
        Assert.AreEqual(Achieved(respEnum.Achievements), 32);

        AchievementClearResponse respClear = ClearAchievements(slot, TITLE_ID, user);
        respEnum = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(respEnum.Achievements), 0);
    }

    [TestCase]
    public void EnumSortOrder()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, 5, ACHIEVEMENT_FLAGS);

        achievements.Reverse();
        for (int i = 0; i < achievements.Count; i++)
        {
            ((Achievement)achievements[i]).Achieved = DateTime.Now.AddDays(achievements.Count - i);
            ((Achievement)achievements[i]).Sequence = (uint)(achievements.Count - i);
        }


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);
        Assert.AreEqual(Achieved(respEnum.Achievements), 5);
    }


    [TestCase]
    public void WriteMultipleAchieves()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements1 = GenerateAchievements(0, 1, ACHIEVEMENT_FLAGS);
        ArrayList achievements2 = GenerateAchievements(2, 2, ACHIEVEMENT_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements1);
        AchievementEnumResponse  respEnum  = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements1);

        respWrite = WriteAchievement(slot, TITLE_ID, user, achievements2);
        respEnum  = EnumAchievements(slot, TITLE_ID, user);

        ArrayList expAchievements = new ArrayList(achievements1);
        expAchievements.AddRange(achievements2);
        CompareAchievementResults(respEnum.Achievements, expAchievements);

        AchievementClearResponse respClear = ClearAchievements(slot, TITLE_ID, user);
        respEnum = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(respEnum.Achievements), 0);
    }

    [TestCase]
    public void UpdateAchievements()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, 1, 0X11);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);

        foreach (Achievement achievement in achievements)
        {
            achievement.Flags = ACHIEVEMENT_FLAGS;
        }

        respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);

        AchievementClearResponse respClear = ClearAchievements(slot, TITLE_ID, user);
        respEnum = EnumAchievements(slot, TITLE_ID, user);
        Assert.AreEqual(Achieved(respEnum.Achievements), 0);
    }

    [TestCase]
    public void EnumAchievements()
    {
        ulong     user         = DvtUtil.GenerateUser();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // ask for more achievements than there are
        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user, 0, XOn.XONLINE_MAX_ACHIEVEMENTS);

        // submit a request that result in no achievements returned
        respEnum = EnumAchievements(slot, TITLE_ID, user, 10, XOn.XONLINE_MAX_ACHIEVEMENTS);


    }

    [TestCase]
    public void EnumAltLanguageAchievements()
    {
        ulong     user         = DvtUtil.GenerateUser();
        ArrayList achievements = GenerateAchievements(0, 1, ACHIEVEMENT_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;
        slot.userFlag0 = 0x3605B6C;     // en-sg

        SyncAchievementsResponse respWrite = WriteAchievement(slot, TITLE_ID, user, achievements);

        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user);
        CompareAchievementResults(respEnum.Achievements, achievements);
        Assert.AreEqual(Achieved(respEnum.Achievements), 1);

    }

    [TestCase]
    public void EnumFamilyAchievements()
    {
        ulong     user         = DvtUtil.GenerateUser();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID + 1;
        slot.userPuid0 = user;

        // ask for more achievements than there are
        AchievementEnumResponse respEnum = EnumAchievements(slot, TITLE_ID, user, 0, XOn.XONLINE_MAX_ACHIEVEMENTS);

        // submit a request that result in no achievements returned
        respEnum = EnumAchievements(slot, TITLE_ID, user, 10, XOn.XONLINE_MAX_ACHIEVEMENTS);


    }

    [TestCase]
    public void Sync2PagesofAchievements()
    {
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();

        // use alternate title id (18942)
        slot.titleId = TITLE_ID2;
        slot.userPuid0 = user;
        uint hr;

        SyncAchievementsRequest  req  = new SyncAchievementsRequest();
        SyncAchievementsResponse resp = new SyncAchievementsResponse();

        ArrayList achievements = GenerateAchievements(0, ValidAchievementIds.Length, 0X11);
        for (int i = 0; i < achievements.Count; i++)
        {
            ((Achievement)achievements[i]).Sequence = XOn.XONLINE_SERVER_ACHIEVEMENT_SEQUENCE;
        }


        WriteAchievement(slot, TITLE_ID, user, achievements);

        req.Achievements = new Achievement[0];
        req.LocaleId = 1033;
        req.StartingIndex = 0;
        req.TitleId = TITLE_ID;
        req.UserId = user;
        req.Version = XOn.MinDateTime;

        XRLObject2 xrlo = (XRLObject2) resp;

        Console.WriteLine("Send SyncAchievementsRequest with no achievements, page 0");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(resp.TotalAchievements, ValidAchievementIds.Length);
        Assert.AreEqual(resp.AchievementCount, XOn.XONLINE_MAX_ACHIEVEMENTS);
        Assert.AreEqual(resp.Achievements[0].AchievementId, ValidAchievementIds[0]);
        Assert.AreEqual(resp.Achievements[XOn.XONLINE_MAX_ACHIEVEMENTS - 1].AchievementId, ValidAchievementIds[XOn.XONLINE_MAX_ACHIEVEMENTS - 1]);


        CompareAchievementResults(resp.Achievements, achievements, 0, XOn.XONLINE_MAX_ACHIEVEMENTS);

        Console.WriteLine("Send SyncAchievementsRequest with no achievements, page 1");
        req.StartingIndex = XOn.XONLINE_MAX_ACHIEVEMENTS + 1;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(resp.TotalAchievements, ValidAchievementIds.Length);
        Assert.AreEqual(resp.AchievementCount, ValidAchievementIds.Length - XOn.XONLINE_MAX_ACHIEVEMENTS);
        Assert.AreEqual(resp.Achievements[0].AchievementId, ValidAchievementIds[XOn.XONLINE_MAX_ACHIEVEMENTS]);
        Assert.AreEqual(resp.Achievements[resp.Achievements.Length - 1].AchievementId, ValidAchievementIds[ValidAchievementIds.Length - 1]);

        CompareAchievementResults(resp.Achievements, achievements, XOn.XONLINE_MAX_ACHIEVEMENTS,
            ValidAchievementIds.Length - XOn.XONLINE_MAX_ACHIEVEMENTS);



    }


    [TestCase]
    public void WriteViaServer()
    {
        ulong     user         = DvtUtil.GenerateUser();
        uint hr;
        ArrayList achievements = GenerateAchievements(0, 1, 0X1);


        SyncAchievementsRequest  req  = new SyncAchievementsRequest();
        SyncAchievementsResponse resp = new SyncAchievementsResponse();

        XrlRequest xrlReq = new XrlRequest();

        req.TitleId = TITLE_ID;
        req.UserId = user;
        req.LocaleId = 1033;
        req.StartingIndex = 0;
        req.Achievements = new Achievement[] { (Achievement)achievements[0] };

        // this is the invalid part
        req.Achievements[0].Sequence = XOn.XONLINE_SERVER_ACHIEVEMENT_SEQUENCE;

        xrlReq.Path = req.GetXRL();
        xrlReq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xrlReq.RequestOb = req;
        xrlReq.ResponseOb = resp;
        xrlReq.AuthData = new HTTPAuthData(0, 0,0, user, TITLE_ID, 0, 0).GetBase64EncodedString();


        hr = xrlReq.Send();
        Assert.AreEqual(hr, HResult.S_OK);
    }


    [TestCase]
    public void InvalidSequenceViaServer()
    {
        ulong     user         = DvtUtil.GenerateUser();
        uint hr;
        ArrayList achievements = GenerateAchievements(0, 1, 0X1);


        SyncAchievementsRequest  req  = new SyncAchievementsRequest();
        SyncAchievementsResponse resp = new SyncAchievementsResponse();

        XrlRequest xrlReq = new XrlRequest();

        req.TitleId = TITLE_ID;
        req.UserId = user;
        req.LocaleId = 1033;
        req.StartingIndex = 0;
        req.Achievements = new Achievement[] { (Achievement)achievements[0] };

        // this is the invalid part
        req.Achievements[0].Sequence = 1;

        xrlReq.Path = req.GetXRL();
        xrlReq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xrlReq.RequestOb = req;
        xrlReq.ResponseOb = resp;
        xrlReq.AuthData = new HTTPAuthData(0, 0,0, user, TITLE_ID, 0, 0).GetBase64EncodedString();


        hr = xrlReq.Send();
        Assert.AreEqual(hr, HResult.E_INVALIDARG);
    }



    #endregion

    #region Support methods

    /// <summary>
    /// GenerateAchievements
    /// </summary>
    /// <param name="count">Count of achievements to generate</param>
    /// <param name="seed">Achievement id seed</param>
    /// <param name="flags">Achievement flag states</param>
    /// <returns>Achievements array</returns>
    /// <remarks>
    /// Generates a set of achievements.  Achieved time set to now.
    /// </remarks>

    static uint[] ValidAchievementIds = new uint[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                                                     11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                                                     21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                                     31, 32, 33, 34
                                                   };

    protected static ArrayList GenerateAchievements(int startingIndex, int count, int flags)
    {
        Assert.IsTrue(startingIndex + count <= ValidAchievementIds.Length);

        ArrayList achievements = new ArrayList(count);

        for (int i = startingIndex; i < count; i++)
        {
            achievements.Add(new Achievement((uint) ValidAchievementIds[startingIndex + i],  DateTime.Now, flags));
        }

        return achievements;
    }


    protected static int Achieved(Achievement[] achievements)
    {
        return Achieved(achievements, 0, achievements.Length);
    }
    protected static int Achieved(Achievement[] achievements, int index, int len)
    {
        int achieved = 0;

        for (int i = index; i < index + len; i++)
        {
            Achievement a = achievements[i];
            if ((a.Flags & 0x1) != 0)
            {
                achieved++;
            }
            else
            {
                // sorting should always have achieved first
                break;
            }
        }

        return achieved;
    }


    /// <summary>
    /// CompareAchievementResults
    /// </summary>
    /// <param name="resp">AchievementEnum response</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <param name="achievements">Array of expected achievement values</param>
    /// <remarks>
    /// Compares expected achievement values with returned enum values
    /// </remarks>

    protected static void CompareAchievementResults(Achievement[] serverAch, ArrayList achievements)
    {
        CompareAchievementResults(serverAch, achievements, 0, achievements.Count);
    }

    protected static void CompareAchievementResults(Achievement[] serverAch, ArrayList achievements, int index, int len)
    {

        for (int i = index; i < index + len; i++)
        {

            Achievement exp = (Achievement) achievements[i];
            Achievement result = serverAch[i - index];


            Assert.AreEqual(exp.AchievementId,   result.AchievementId);
            Assert.AreEqual(exp.Achieved.Year,   result.Achieved.Year);
            Assert.AreEqual(exp.Achieved.Month,  result.Achieved.Month);
            Assert.AreEqual(exp.Achieved.Day,    result.Achieved.Day);
            Assert.AreEqual(exp.Achieved.Hour,   result.Achieved.Hour);
            Assert.AreEqual(exp.Achieved.Minute, result.Achieved.Minute);
            Assert.AreEqual(exp.Achieved.Second, result.Achieved.Second);
            Assert.AreEqual(exp.Sequence,        result.Sequence);
            Assert.AreEqual(exp.Flags,           result.Flags);
        }
    }

    /// <summary>
    /// WriteAchievement
    /// </summary>
    /// <param name="slot">SG Info slot</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <param name="achievements">List of achievements to write</param>
    /// <returns>SyncAchievementsResponse</returns>
    /// <remarks>
    /// Sends AchievementWriteRequest to update list of achievements
    /// for puid/title id
    /// </remarks>
    protected static SyncAchievementsResponse WriteAchievement(CSGInfo slot, uint titleId, ulong puid, ArrayList achievements)
    {
        uint hr;
        int count = 0;

        SyncAchievementsRequest  req  = new SyncAchievementsRequest();
        SyncAchievementsResponse resp = new SyncAchievementsResponse();

        XRLObject2 xrlo = (XRLObject2) resp;

        req.TitleId = titleId;
        req.UserId = puid;
        req.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        req.StartingIndex = 0;

        while (count < achievements.Count)
        {
            req.Achievements = new Achievement[Math.Min(achievements.Count - count, XOn.XONLINE_MAX_ACHIEVEMENTS)];
            achievements.CopyTo(count, req.Achievements, 0, req.Achievements.Length);

            Console.WriteLine("Send SyncAchievementsRequest (" +  count + " - " + req.Achievements.Length + ")");
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

            Assert.AreEqual(hr, HResult.S_OK);

            count += req.Achievements.Length;
        }

        return resp;
    }

    /// <summary>
    /// EnumAchievement
    /// </summary>
    /// <param name="slot">SG Info slot</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <returns>AchievementEnumResponse</returns>
    /// <remarks>
    /// Sends AchievementEnumRequest to get user's list of achievements for title id
    /// </remarks>
    protected static AchievementEnumResponse EnumAchievements(CSGInfo slot, uint titleId, ulong puid)
    {
        return EnumAchievements(slot, titleId, puid, 0, XOn.XONLINE_MAX_ACHIEVEMENTS);
    }

    protected static AchievementEnumResponse EnumAchievements(CSGInfo slot, uint titleId, ulong puid, ushort startingIndex, ushort MaxAch)
    {
        uint hr;

        AchievementEnumRequest  req  = new AchievementEnumRequest();
        AchievementEnumResponse resp = new AchievementEnumResponse();

        XRLObject2 xrlo = (XRLObject2) resp;

        req.TitleId = titleId;
        req.Puid    = puid;
        req.ForPuid = puid;
        req.LocaleId = 1033;
        req.StartingIndex = startingIndex;

        Console.WriteLine("Send AchievementEnumRequest");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
        Assert.IsTrue(resp.AchievementsCount <= XOn.XONLINE_MAX_ACHIEVEMENTS);

        return resp;
    }

    /// <summary>
    /// ClearAchievements
    /// </summary>
    /// <param name="slot">SG Info slot</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <returns>AchievementClearResponse</returns>
    /// <remarks>
    /// Sends AchievementClearRequest to flush user's achievements for a title id
    /// </remarks>
    protected static AchievementClearResponse ClearAchievements(CSGInfo slot, uint titleId, ulong puid)
    {
        uint hr;

        AchievementClearRequest  req  = new AchievementClearRequest();
        AchievementClearResponse resp = new AchievementClearResponse();

        XRLObject2 xrlo = (XRLObject2) resp;

        req.TitleId = titleId;
        req.Puid    = puid;

        Console.WriteLine("Send AchievementClearRequest");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(resp.TitleId, titleId);
        Assert.AreEqual(resp.Puid, puid);

        return resp;
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\avatardevtest.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Threading;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

[TestGroup, DVT]
public class AvatarDevTest : TestNode
{
    private const uint TITLE_ID          = 0xfeedfeed;
    private const uint TITLE_ID2         = 0x12344321;
    private const int  MAX_AVATARS       = 10;
    private const int  AVATAR_FLAGS      = (int)(XOn.XAVATAR_DETAILS_ACHIEVED_ONLINE | XOn.XAVATAR_DETAILS_ACHIEVED);

    [TestGroupSetup]
    public void Setup()
    {
        using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
        {
            cxn.Open();

            // xblob setup will already have created all the tables, triggers,
            // and populated environment invariant and environment specific
            // information. All we need to do is add and/or reset the
            // unit test specific data.
            string sqlfile = Path.Combine(Path.GetDirectoryName(ContainingDll), "stats_dev_test_data.sql");
            DbUtil.ExecuteSqlFile(cxn, sqlfile);

            // TODO: force a reload?
        }
    }




    #region Test cases

    [TestCase]
    public void Empty()
    {
        ulong   user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        AvatarAssetEnumResponse resp = EnumAvatarAwards(slot, TITLE_ID, user);
        Assert.AreEqual(Awarded(resp.AvatarAssets), 0);
    }

    [TestCase]
    public void EnumAvatarAwards()
    {
        ulong     user         = DvtUtil.GenerateUser();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // ask for more assets than there are
        AvatarAssetEnumResponse respEnum = EnumAvatarAwards(slot, TITLE_ID, user, 0, XOn.XONLINE_MAX_AVATAR_ASSETS);

        // submit a request that result in no assets returned
        respEnum = EnumAvatarAwards(slot, TITLE_ID, user, 10, XOn.XONLINE_MAX_AVATAR_ASSETS);


    }

    [TestCase]
    public void WriteNewAsset()
    {
        ulong user = DvtUtil.GenerateUser();
        ArrayList assets = GenerateAvatarAwards(0, 1, AVATAR_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAvatarAssetResponse respWrite = WriteAvatarAward(slot, TITLE_ID, user, assets);

        AvatarAssetEnumResponse respEnum = EnumAvatarAwards(slot, TITLE_ID, user);
        CompareAvatarAssetResults(respEnum.AvatarAssets, assets);
        Assert.AreEqual(Awarded(respEnum.AvatarAssets), 1);
        Assert.AreEqual(respWrite.MoreAvatarAssetPending, 0);
    }

    [TestCase]
    public void TestMorePending()
    {
        // Generate 33 awards so that we can get 32 back from sync plus the MorePending flag
        ulong user = DvtUtil.GenerateUser();
        ArrayList assets = GenerateAvatarAwards(0, 33, AVATAR_FLAGS);

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // upload the assets
        SyncAvatarAssetResponse respWrite = WriteAvatarAward(slot, TITLE_ID, user, assets);

        // call sync to get 32 plus MorePending
        respWrite = EmptyAssetSync(slot, TITLE_ID, user);

        Assert.AreEqual(Awarded(respWrite.AvatarAssets), 32);
        Assert.AreEqual(respWrite.MoreAvatarAssetPending, 1);
    }

    [TestCase]
    public void TestUnachievable()
    {
        // Test sorting of unachievable assets:
        // - award a bunch of assets
        // - set one from the middle of the group to unachievable
        // - ensure that the unachievable assets is sent by sync
        // - enumerate the assets and make sure the unachievable one is after the awarded ones

        ulong user = DvtUtil.GenerateUser();

        // award the assets. leave the first one unawarded to check that the unachievable one is after it in the sorting.
        ArrayList awards = new ArrayList(3);
        DateTime dtAward = DateTime.Now;
        awards.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        awards.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        awards.Add(new AvatarAsset(4, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAvatarAssetResponse respWrite = WriteAvatarAward(slot, TITLE_ID, user, awards);

        // sanity check - make sure the 3 we wanted to be awarded actually were awarded.
        AvatarAssetEnumResponse respEnum = EnumAvatarAwards(slot, TITLE_ID, user, 0, 3);
        CompareAvatarAssetResults(respEnum.AvatarAssets, awards);
        Assert.AreEqual(Awarded(respEnum.AvatarAssets), 3);
        Assert.AreEqual(respWrite.MoreAvatarAssetPending, 0);

        Thread.Sleep(50);

        // set the middle asset to be unachiavable
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.SetHashVal(user);

            ws.CommandSql = @"UPDATE [dbo].[t_awarded_avatar_items]
                            SET [i_status] = [i_status] | 0x00040000, [dt_Change_datetime] = getutcdate()
                            WHERE [i_title_id] = 0xfeedfeed AND [bi_user_puid] = @bi_user_puid AND [i_asset_ordinal] = 3 AND [i_body_type_mask] = 3";
            ws.AddParameter("@bi_user_puid", user);

            ws.ExecuteNonQuery();
        }

        Thread.Sleep(50);

        // Do another sync using the version from the original sync's response.
        // Ensure that we get only the asset that's now marked unachievable.
        SyncAvatarAssetRequest reqSync = new SyncAvatarAssetRequest();
        SyncAvatarAssetResponse respSync = new SyncAvatarAssetResponse();

        XRLObject2 xrlo = (XRLObject2)respSync;

        reqSync.TitleId = TITLE_ID;
        reqSync.UserId = user;
        reqSync.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        reqSync.StartingIndex = 0;
        reqSync.AvatarAssetCount = 0;
        reqSync.AvatarAssets = null;
        reqSync.Version = respWrite.Version;

        Console.WriteLine("Send SyncAvatarAssetRequest(0)");
        uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, reqSync.GetXRL(), reqSync, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);

        ArrayList expSync = new ArrayList(1);
        awards.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, 0x00040000));

        CompareAvatarAssetResults(respSync.AvatarAssets, expSync);
        Assert.AreEqual(respSync.AvatarAssetCount, 1);
        Assert.AreEqual(Awarded(respSync.AvatarAssets), 0);
        Assert.AreEqual(respSync.MoreAvatarAssetPending, 0);

        // Do an enum of the first few assets and make sure they're sorted properly.
        respEnum = EnumAvatarAwards(slot, TITLE_ID, user, 0, 6);

        ArrayList expEnum = new ArrayList(6);
        expEnum.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        expEnum.Add(new AvatarAsset(4, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        expEnum.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, 0));
        expEnum.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_FEMALE, dtAward, 0));
        expEnum.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)XOn.XAVATAR_DETAILS_NOT_ACHIEVABLE));
        expEnum.Add(new AvatarAsset(5, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, 0));

        CompareAvatarAssetResults(respEnum.AvatarAssets, expEnum);
        Assert.AreEqual(Awarded(respEnum.AvatarAssets), 2);
    }

    [TestCase]
    public void TestInvalidStatus()
    {
        // Try to upload a few assets with invalid status fields.
        // Try 'XAVATAR_DETAILS_ACHIEVED_ONLINE' without 'XAVATAR_DETAILS_ACHIEVED', which is nonsense
        // Also try 'XAVATAR_DETAILS_NOT_ACHIEVABLE', which should never be sent by a client.
        ulong user = DvtUtil.GenerateUser();

        // award the assets. leave the first one unawarded to check that the unachievable one is after it in the sorting.
        ArrayList awards = new ArrayList(2);
        DateTime dtAward = DateTime.Now;
        awards.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)XOn.XAVATAR_DETAILS_ACHIEVED_ONLINE));
        awards.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)XOn.XAVATAR_DETAILS_NOT_ACHIEVABLE));

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAvatarAssetResponse respWrite = WriteAvatarAward(slot, TITLE_ID, user, awards);

        // Do an enum to make sure the server says there are no awards
        AvatarAssetEnumResponse respEnum = EnumAvatarAwards(slot, TITLE_ID, user, 0, 4);

        ArrayList expEnum = new ArrayList(4);
        expEnum.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, 0));
        expEnum.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_FEMALE, dtAward, 0));
        expEnum.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, 0));
        expEnum.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, 0));

        CompareAvatarAssetResults(respEnum.AvatarAssets, expEnum);
        Assert.AreEqual(Awarded(respEnum.AvatarAssets), 0);
    }

    [TestCase]
    public void TestMax()
    {
        // Test sending more than the maximum number of awards that the wirestruct can handle

        ulong user = DvtUtil.GenerateUser();

        // award the assets. leave the first one unawarded to check that the unachievable one is after it in the sorting.
        ArrayList awards = new ArrayList(33);
        DateTime dtAward = DateTime.Now;
        for (int i = 0; i < 33; ++i)
        {
            awards.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, AVATAR_FLAGS));
        }

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        SyncAvatarAssetRequest req = new SyncAvatarAssetRequest();
        SyncAvatarAssetResponse resp = new SyncAvatarAssetResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.TitleId = TITLE_ID;
        req.UserId = user;
        req.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        req.StartingIndex = 0;
        req.AvatarAssets = new AvatarAsset[33];
        awards.CopyTo(0, req.AvatarAssets, 0, req.AvatarAssets.Length);

        Console.WriteLine("Send SyncAvatarAssetRequest (33)");
        uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.E_INVALIDARG);
    }

    [TestCase]
    public void TestResetProcs()
    {
        // test the procs that reset and unreset avatar awards when someone is flagged as a cheater.
        // these are p_stats_reset_user_avatar_assets and p_stats_unreset_user_avatar_assets

        ulong user = DvtUtil.GenerateUser();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // award a few assets.
        ArrayList awards = new ArrayList(2);
        DateTime dtAward = DateTime.Now;
        awards.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        awards.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));

        WriteAvatarAward(slot, TITLE_ID, user, awards);

        // Do an enum to make sure the awards are awarded
        AvatarAssetEnumResponse enumAwarded = EnumAvatarAwards(slot, TITLE_ID, user, 0, 4);

        ArrayList expAwarded = new ArrayList(4);
        expAwarded.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        expAwarded.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, AVATAR_FLAGS));
        expAwarded.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, 0));
        expAwarded.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_FEMALE, dtAward, 0));

        CompareAvatarAssetResults(enumAwarded.AvatarAssets, expAwarded);
        Assert.AreEqual(Awarded(enumAwarded.AvatarAssets), 2);

        // reset the awards
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.SetHashVal(user);

            ws.StoredProc = "dbo.p_stats_reset_user_avatar_assets";
            ws.AddParameter("@bi_user_puid", user);

            ws.ExecuteNonQuery();
        }

        // Do an enum to make sure the awards are unachievable
        AvatarAssetEnumResponse enumReset = EnumAvatarAwards(slot, TITLE_ID, user, 0, 4);

        ArrayList expReset = new ArrayList(4);
        expReset.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, 0));
        expReset.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_FEMALE, dtAward, 0));
        expReset.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)(XOn.XAVATAR_DETAILS_NOT_ACHIEVABLE)));
        expReset.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)(XOn.XAVATAR_DETAILS_NOT_ACHIEVABLE)));

        CompareAvatarAssetResults(enumReset.AvatarAssets, expReset);
        Assert.AreEqual(Awarded(enumReset.AvatarAssets), 0);


        // unreset the awards
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.SetHashVal(user);

            ws.StoredProc = "dbo.p_stats_unreset_user_avatar_assets";
            ws.AddParameter("@bi_user_puid", user);

            ws.ExecuteNonQuery();
        }

        // Do an enum to make sure the awards are achieved again with the 'was not unachievable' flag set
        AvatarAssetEnumResponse enumUnreset = EnumAvatarAwards(slot, TITLE_ID, user, 0, 4);

        ArrayList expUnreset = new ArrayList(4);
        expUnreset.Add(new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)(AVATAR_FLAGS | XOn.XAVATAR_DETAILS_WAS_NOT_ACHIEVABLE)));
        expUnreset.Add(new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, dtAward, (int)(AVATAR_FLAGS | XOn.XAVATAR_DETAILS_WAS_NOT_ACHIEVABLE)));
        expUnreset.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, dtAward, 0));
        expUnreset.Add(new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_FEMALE, dtAward, 0));

        CompareAvatarAssetResults(enumUnreset.AvatarAssets, expUnreset);
        Assert.AreEqual(Awarded(enumUnreset.AvatarAssets), 2);
    }

    #endregion

    #region Support methods

    /// <summary>
    /// WriteAvatarAward
    /// </summary>
    /// <param name="slot">SG Info slot</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <param name="achievements">List of achievements to write</param>
    /// <returns>SyncAvatarAssetResponse</returns>
    /// <remarks>
    /// Sends AchievementWriteRequest to update list of achievements
    /// for puid/title id
    /// </remarks>
    protected static SyncAvatarAssetResponse WriteAvatarAward(CSGInfo slot, uint titleId, ulong puid, ArrayList awards)
    {
        uint hr;
        int count = 0;

        SyncAvatarAssetRequest req = new SyncAvatarAssetRequest();
        SyncAvatarAssetResponse resp = new SyncAvatarAssetResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.TitleId = titleId;
        req.UserId = puid;
        req.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        req.StartingIndex = 0;

        while (count < awards.Count)
        {
            req.AvatarAssets = new AvatarAsset[Math.Min(awards.Count - count, XOn.XONLINE_MAX_AVATAR_ASSETS)];
            awards.CopyTo(count, req.AvatarAssets, 0, req.AvatarAssets.Length);

            Console.WriteLine("Send SyncAvatarAssetRequest (" + count + " - " + req.AvatarAssets.Length + ")");
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

            Assert.AreEqual(hr, HResult.S_OK);

            count += req.AvatarAssets.Length;
        }

        return resp;
    }

    protected static SyncAvatarAssetResponse EmptyAssetSync(CSGInfo slot, uint titleId, ulong puid)
    {
        uint hr;

        SyncAvatarAssetRequest req = new SyncAvatarAssetRequest();
        SyncAvatarAssetResponse resp = new SyncAvatarAssetResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.TitleId = titleId;
        req.UserId = puid;
        req.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        req.StartingIndex = 0;
        req.AvatarAssets = null;

        Console.WriteLine("Send SyncAvatarAssetRequest (0)");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }

    /// <summary>
    /// GenerateAvatarAwards
    /// </summary>
    /// <param name="count">Count of awards to generate</param>
    /// <param name="seed">Asset id seed</param>
    /// <param name="flags">Asset flag states</param>
    /// <returns>Asset array</returns>
    /// <remarks>
    /// Generates a set of assets.  Awarded time set to now.
    /// </remarks>

    static uint[] ValidAvatarAwardIds =       new uint[] { 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32
                                                   };
    static byte[] ValidAvatarAwardBodyMasks = new byte[] { 1, 2, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3
                                                   };

    protected static ArrayList GenerateAvatarAwards(int startingIndex, int count, int flags)
    {
        Assert.IsTrue(startingIndex + count <= ValidAvatarAwardIds.Length);

        ArrayList awards = new ArrayList(count);

        for (int i = startingIndex; i < count; i++)
        {
            awards.Add(new AvatarAsset(ValidAvatarAwardIds[startingIndex + i], ValidAvatarAwardBodyMasks[startingIndex + i], DateTime.Now, flags));
        }

        return awards;
    }


    protected static int Awarded(AvatarAsset[] assets)
    {
        return Awarded(assets, 0, assets.Length);
    }

    protected static int Awarded(AvatarAsset[] assets, int index, int len)
    {
        int awards = 0;

        for (int i = index; i < index + len; i++)
        {
            AvatarAsset a = assets[i];
            if ((a.Flags & XOn.XAVATAR_DETAILS_ACHIEVED) != 0)
            {
                awards++;
            }
            else
            {
                // sorting should always have awarded first
                break;
            }
        }

        return awards;
    }


    /// <summary>
    /// CompareAvatarAssetResults
    /// </summary>
    /// <param name="resp">AvatarAssetEnum response</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <param name="achievements">Array of expected avatar asset values</param>
    /// <remarks>
    /// Compares expected avatar asset values with returned enum values
    /// </remarks>

    protected static void CompareAvatarAssetResults(AvatarAsset[] serverAssets, ArrayList assets)
    {
        CompareAvatarAssetResults(serverAssets, assets, 0, assets.Count);
    }

    protected static void CompareAvatarAssetResults(AvatarAsset[] serverAssets, ArrayList assets, int index, int len)
    {

        for (int i = index; i < index + len; i++)
        {

            AvatarAsset exp = (AvatarAsset)assets[i];
            AvatarAsset result = serverAssets[i - index];

            Assert.AreEqual(exp.AvatarAssetOrdinal, result.AvatarAssetOrdinal);
            Assert.AreEqual(exp.BodyTypeMask, result.BodyTypeMask);
            Assert.AreEqual(exp.Flags, result.Flags & XOn.XAVATAR_DETAILS_STATUS_MASK);
            if (0 != (exp.Flags & XOn.XAVATAR_DETAILS_ACHIEVED_ONLINE))
            {
                // If the asset wasn't earned online, the datetime isn't valid.
                result.Awarded = result.Awarded.ToLocalTime();
                Assert.AreEqual(exp.Awarded.Year, result.Awarded.Year);
                Assert.AreEqual(exp.Awarded.Month, result.Awarded.Month);
                Assert.AreEqual(exp.Awarded.Day, result.Awarded.Day);
                Assert.AreEqual(exp.Awarded.Hour, result.Awarded.Hour);
                Assert.AreEqual(exp.Awarded.Minute, result.Awarded.Minute);
                Assert.AreEqual(exp.Awarded.Second, result.Awarded.Second);
            }
            if (0 != (exp.Flags & XOn.XAVATAR_DETAILS_ACHIEVED))
            {
                // Sequence is only used as a secondary sorting field for awarded items.
                // It's not valid for non-awarded items.
                Assert.AreEqual(exp.Sequence, result.Sequence);
            }
        }
    }

    /// <summary>
    /// EnumAvatarAssets
    /// </summary>
    /// <param name="slot">SG Info slot</param>
    /// <param name="titleId">Title ID</param>
    /// <param name="puid">User PUID</param>
    /// <returns>AvatarAssetEnumResponse</returns>
    /// <remarks>
    /// Sends AvatarAssetEnumRequest to get user's list of avatar assets for title id
    /// </remarks>
    protected static AvatarAssetEnumResponse EnumAvatarAwards(CSGInfo slot, uint titleId, ulong puid)
    {
        return EnumAvatarAwards(slot, titleId, puid, 0, XOn.XONLINE_MAX_AVATAR_ASSETS);
    }

    protected static AvatarAssetEnumResponse EnumAvatarAwards(CSGInfo slot, uint titleId, ulong puid, ushort startingIndex, ushort MaxAch)
    {
        uint hr;

        AvatarAssetEnumRequest  req  = new AvatarAssetEnumRequest();
        AvatarAssetEnumResponse resp = new AvatarAssetEnumResponse();

        XRLObject2 xrlo = (XRLObject2) resp;

        req.TitleId = titleId;
        req.Puid    = puid;
        req.ForPuid = puid;
        req.LocaleId = 1033;
        req.StartingIndex = startingIndex;

        Console.WriteLine("Send AvatarAssetEnumRequest");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
        Assert.IsTrue(resp.AvatarAssetsCount <= XOn.XONLINE_MAX_AVATAR_ASSETS);

        return resp;
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\consolelist.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;


using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;
using System.Threading;

public class ExpectedResult
{
    public ConsoleIdData upload;
    public ConsoleIdData sign;
    public ConsoleIdData machine;
    public bool datesMatch;

    public ExpectedResult()
    {
    }

    public ExpectedResult(ConsoleIdData upload, ConsoleIdData sign, ConsoleIdData machine, bool datesMatch)
    {
        this.upload = upload;
        this.sign = sign;
        this.machine = machine;
        this.datesMatch = datesMatch;
    }
};

[TestGroup, DVT]
public class ConsoleAuditListDevTest : TestNode
{
    private const uint TITLE_ID = 0xfeedfeed;
    private ConsoleIdData data1 = new ConsoleIdData(new byte[] { 0x81, 0x0B, 0x30, 0x91, 0x02 });  // decimal 11025779585
    private ConsoleIdData data2 = new ConsoleIdData(new byte[] { 0x82, 0x0B, 0x30, 0x91, 0x02 });  // decimal 11025779586
    private ConsoleIdData data3 = new ConsoleIdData(new byte[] { 0x83, 0x0B, 0x30, 0x91, 0x02 });  // decimal 11025779587


    #region Test cases

    [TestCase]
    public void TestSimple()
    {
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        UploadConsoleList(slot, user, data1, data1, new ConsoleIdData[] { data1 });

        ExpectedResult[] expected = new ExpectedResult[] {
            new ExpectedResult(data1, data1, data1, true)
        };

        CheckResults(user, expected);
    }

    [TestCase]
    public void TestMerge()
    {
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        UploadConsoleList(slot, user, data1, data1, new ConsoleIdData[] { data1, data2 });
        Thread.Sleep(50);
        UploadConsoleList(slot, user, data1, data1, new ConsoleIdData[] { data1, data3 });

        ExpectedResult[] expected = new ExpectedResult[] {
            new ExpectedResult(data1, data1, data1, false),
            new ExpectedResult(data1, data1, data2, true),
            new ExpectedResult(data1, data1, data3, true)
        };

        CheckResults(user, expected);
    }

    #endregion

    #region Support methods

    protected void UploadConsoleList(CSGInfo slot, ulong puid, ConsoleIdData uploader, ConsoleIdData signer, ConsoleIdData[] machines)
    {
        uint hr;

        UploadConsoleListRequest req = new UploadConsoleListRequest();
        XRLObject2 resp = new XRLObject2();

        req.UserId = puid;
        req.UploadingConsoleId = uploader;
        req.SigningConsoleId = signer;
        req.ConsoleCount = (byte)machines.Length;
        req.ConsoleIdList = machines;

        Console.WriteLine("Send UploadConsoleListRequest");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref resp);

        Assert.AreEqual(hr, HResult.S_OK);
    }

    protected void CheckResults(ulong user, ExpectedResult[] expected)
    {
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.CommandSql = @"SELECT
                                [bi_uploading_machine_console_id],
                                [bi_signing_machine_console_id],
                                [bi_machine_console_id],
                                [dt_first_seen],
                                [dt_last_seen]
                               FROM [dbo].[t_user_console_audit_list]
                               WHERE [bi_user_puid] = @bi_user_puid
                               ORDER BY [bi_uploading_machine_console_id], [bi_signing_machine_console_id], [bi_machine_console_id]";
            ws.SetHashVal(user);
            ws.AddParameter("@bi_user_puid", user);

            using (WstDataReader reader = ws.Execute())
            {
                foreach (ExpectedResult exp in expected)
                {
                    if (!reader.Read())
                    {
                        throw new Exception("too few entries in result.");
                    }
                    Assert.AreEqual(ConsoleIdData.GetDecimalValue(exp.upload.ConsoleId), (ulong)(long)reader["bi_uploading_machine_console_id"]);
                    Assert.AreEqual(ConsoleIdData.GetDecimalValue(exp.sign.ConsoleId), (ulong)(long)reader["bi_signing_machine_console_id"]);
                    Assert.AreEqual(ConsoleIdData.GetDecimalValue(exp.machine.ConsoleId), (ulong)(long)reader["bi_machine_console_id"]);
                    if (exp.datesMatch)
                    {
                        Assert.AreEqual(reader["dt_first_seen"], reader["dt_last_seen"]);
                    }
                    else
                    {
                        Assert.IsTrue(reader["dt_first_seen"] != reader["dt_last_seen"]);
                    }
                }
            }
        }
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\dvtutil.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

namespace xonline.server.stats.test.dvt
{
    public class DvtUtil
    {
        public enum ValueTypes
        {
            Int32  = 0x1,
            Int64  = 0x2,
            Double = 0x4,
            All    = 0x7
        }

        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <param name="types">Count of different types to use (1, 2, or 3)</param>
        /// <returns>Array of values</returns>
        /// <remarks>
        /// Generates a range of values that fit the pattern:
        /// Int32, Int64, Double
        /// </remarks>
        public static ArrayList GenerateValues(int count, int seed, int step, ValueTypes types)
        {
            ArrayList values = new ArrayList(count);
            int currentType = (int) ValueTypes.All;

            if (types == 0)
            {
                throw new Exception("No value types specified");
            }

            for (int i = 0; i < count; i++)
            {
                // Pick the next type
                do
                {
                    currentType = currentType << 1;

                    if (currentType > (int) ValueTypes.All)
                    {
                        // Reset
                        currentType = (int) ValueTypes.Int32;
                    }
                } while ((currentType & (int) types) == 0);

                switch ((ValueTypes) currentType)
                {
                    case ValueTypes.Int32:
                        values.Add((Int32) (seed + (i * step)));
                        break;
                    case ValueTypes.Int64:
                        values.Add((Int64) (seed + (i * step)));
                        break;
                    case ValueTypes.Double:
                        values.Add((Double) (seed + (i * step)));
                        break;
                }
            }
    
            return values;
        }
    
        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int16 values</returns>
        /// <remarks>
        /// Generates Int16 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, short seed, short step)
        {
            ArrayList values = new ArrayList(count);

            for (short i = 0; i < count; i++)
            {
                values.Add((Int16) seed + (Int16)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateInt32Values
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int32 values</returns>
        /// <remarks>
        /// Generates Int32 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, int seed, int step)
        {
            ArrayList values = new ArrayList(count);

            for (int i = 0; i < count; i++)
            {
                values.Add((Int32) seed + (Int32)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateValues
        /// </summary>
        /// <param name="count">Count of values to generate</param>
        /// <param name="seed">Initial starting value</param>
        /// <param name="step">Amount to increment for each successive value</param>
        /// <returns>Array of Int64 values</returns>
        /// <remarks>
        /// Generates Int64 values that start with seed and increase with given step amount
        /// </remarks>
        public static ArrayList GenerateValues(int count, long seed, long step)
        {
            ArrayList values = new ArrayList(count);

            for (long i = 0; i < count; i++)
            {
                values.Add((Int64) seed + (Int64)(i * step));
            }

            return values;
        }

        /// <summary>
        /// GenerateUser
        /// </summary>
        /// <returns>Randomly generated user id</returns>
        /// <remarks>
        /// Generates random user id value
        /// </remarks>
        public static UInt64 GenerateUser()
        {
            Random rnd = new Random();
            return ((UInt64) (0x0009FFFF00000000 + (ulong)(rnd.Next())));
        }

        /// <summary>
        /// GenerateUsers
        /// </summary>
        /// <param name="count">Count of user id's to create</param>
        /// <returns>List of user id's</returns>
        /// <remarks>
        /// Generates random user id values up to the count specified
        /// </remarks>
        public static ArrayList GenerateUsers(int count)
        {
            return GenerateUsers(count, false);
        }

        public static ArrayList GenerateUsers(int count, bool bKnownSeed)
        {
            Console.WriteLine("Generate {0} user id's", count);
            ArrayList users = new ArrayList((int) count);
            Random rnd = null;
		    
            if (bKnownSeed)
                rnd = new Random(0); //helps with repeated debugging
            else
                rnd = new Random();
    		
            for (int i = 0; i < count; i++)
            {
                users.Add((UInt64) (0x0009FFFF00000000 + (ulong)(rnd.Next())));
            }

            return users;	
        }

        /// <summary>
        /// GenerateColumnIds
        /// </summary>
        /// <param name="count">Count of column id's to generate</param>
        /// <param name="seed">Starting value of column id's</param>
        /// <param name="step">Step value between each id</param>
        /// <returns>Array of column id values</returns>
        /// <remarks>
        /// Generates 1-based column ID's.
        /// Useful for statid's in a leaderboard
        /// </remarks>
        public static ArrayList GenerateColumnIds(ushort count, ushort seed, ushort step)
        {
            ArrayList columnIds = new ArrayList();

            for (ushort i = 0; i < count; i += step)
            {
                columnIds.Add((UInt16) (i + seed));
            }

            return columnIds;
        }

        /// <summary>
        /// GetStatParamType
        /// </summary>
        /// <param name="data">Data value</param>
        /// <returns>StatParam type</returns>
        /// <remarks>
        /// Takes data's .Net type and returns a compatible StatParam type
        /// </remarks>
        public static byte GetStatParamType(object data)
        {
            byte type;

            if (data is System.Byte)
            {
                type = StatParam.Int8;
            }
            else if (data is System.Int16)
            {
                type = StatParam.Int16;
            }
            else if (data is System.Int32)
            {
                type = StatParam.Int32;
            }
            else if (data is System.Int64)
            {
                type = StatParam.Int64;
            }
            else if (data is System.Double)
            {
                type = StatParam.Float;
            }
            else if (data is System.String)
            {
                type = StatParam.Utf8string;
            }
            else
            {
                throw new Exception("Invalid type " + data.GetType().ToString() + " for StatParam");
            }

            return type;
        }

        /// <summary>
        /// AddValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Adds each value from one array to the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList AddValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                        results.Add((Byte) ((int) values1[i] + (int) values2[i]));
                        break;
                    case StatParam.Int16:
                        results.Add((Int16)((int) values1[i] + (int) values2[i]));
                        break;
                    case StatParam.Int32:
                        results.Add((Int32)((int) values1[i] + (int) values2[i]));
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        {
                            long val = (long) values1[i] + (long) values2[i];
                            results.Add((Int64) ((long) values1[i] + (long) values2[i]));
                        }
                        break;
                    case StatParam.Float:
                        {
                            double val = (double) values1[i] + (double) values2[i];
                            results.Add((Double) ((double) values1[i] + (double) values2[i]));
                        }
                        break;
                }
            }

            return results;
        }

        /// <summary>
        /// MaxValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Pick max value from one array against the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList MaxValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                    case StatParam.Int16:
                    case StatParam.Int32:
                        if ((int) values1[i] > (int) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        if ((long) values1[i] > (long) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Float:
                        if ((double) values1[i] > (double) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                }
            }

            return results;
        }

        /// <summary>
        /// MinValueArrays
        /// </summary>
        /// <param name="values1">Input array 1</param>
        /// <param name="values2">Input array 2</param>
        /// <returns>Array of results</returns>
        /// <remarks>
        /// Pick min value from one array against the other and returns the resulting array.
        /// Types are managed properly to match the StatParam type.
        /// </remarks>
        public static ArrayList MinValueArrays(ArrayList values1, ArrayList values2)
        {
            if (values1.Count != values2.Count)
            {
                throw new Exception("values1 and values2 are not equal size");
            }

            ArrayList results = new ArrayList(values1.Count);

            for (int i = 0; i < values1.Count; i++)
            {
                switch (GetStatParamType(values1[i]))
                {
                    case StatParam.Int8:
                    case StatParam.Int16:
                    case StatParam.Int32:
                        if ((int) values1[i] < (int) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Int64:
                    case StatParam.Puid:
                        if ((long) values1[i] < (long) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                    case StatParam.Float:
                        if ((double) values1[i] < (double) values2[i])
                        {
                            results.Add(values1[i]);
                        }
                        else
                        {
                            results.Add(values2[i]);
                        }
                        break;
                }
            }

            return results;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\AvatarManifestValidation.cs ===
﻿using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Threading;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

[TestGroup, DVT]
public class AvatarManifestValidation : TestNode
{
    private const uint TITLE_ID = 0xfeedfeed;
    private const int MAX_AVATARS = 10;
    private const int AVATAR_FLAGS = (int)(XOn.XAVATAR_DETAILS_ACHIEVED_ONLINE | XOn.XAVATAR_DETAILS_ACHIEVED);

    // manifest with only free assets
    private const string manifestFree = "00000000BF8000003F80000000100000031C0003C1C8F109A19CB2E00008000003250003C1C8F109A19CB2E000200000033B0003C1C8F109A19CB2E00000800002EB0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002A40003C1C8F109A19CB2E03F80000000000000000000000000000000004000026F0003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFD7AA71FF493421FFC65265FF243F53FF493421FFB37D59FF493421FF399251FF3992510000000200010002C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000402410003C1C8F109A19CB2E0000400000000000000000000000000000000000801130002C1C8F109A19CB2E000080000FF0F5DA6000000000000000000000010015E0002C1C8F109A19CB2E0001000000000000000000000000000000000002001090002C1C8F109A19CB2E0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001090002C1C8F109A19CB2E00020000000000000000000000000000000000010015E0002C1C8F109A19CB2E0001000000000000000000000000000000000000801130002C1C8F109A19CB2E000080000FF0F5DA600000000000000000000000402410003C1C8F109A19CB2E000040000000000000000000000000000E00038D55A354F22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    private const uint awardTitle = 0xfeedfeed;
    private AvatarAsset[] awards =
    {
        new AvatarAsset(1, XOn.XAVATAR_BODY_TYPE_MALE, DateTime.Now, AVATAR_FLAGS),
        new AvatarAsset(2, XOn.XAVATAR_BODY_TYPE_ALL, DateTime.Now, AVATAR_FLAGS),
        new AvatarAsset(3, XOn.XAVATAR_BODY_TYPE_ALL, DateTime.Now, AVATAR_FLAGS),
        new AvatarAsset(4, XOn.XAVATAR_BODY_TYPE_ALL, DateTime.Now, AVATAR_FLAGS),
        new AvatarAsset(5, XOn.XAVATAR_BODY_TYPE_ALL, DateTime.Now, AVATAR_FLAGS),
        new AvatarAsset(6, XOn.XAVATAR_BODY_TYPE_ALL, DateTime.Now, AVATAR_FLAGS)
    };

    // manifest with a purchase
    private const string manifestPurchase = "00000000BF8000003F80000000100000031C0003C1C8F109A19CB2E00008000003250003C1C8F109A19CB2E000200000033B0003C1C8F109A19CB2E00000800002EB0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002A40003C1C8F109A19CB2E03F80000000000000000000000000000000004000026F0003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFD7AA71FF493421FFC65265FF243F53FF493421FFB37D59FF493421FF399251FF3992510000000200010002C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000402410203C1C8F109A19CB2E0000400000000000000000000000000000000000801130002C1C8F109A19CB2E000080000FF0F5DA6000000000000000000000010015E0002C1C8F109A19CB2E0001000000000000000000000000000000000002001090002C1C8F109A19CB2E0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001090002C1C8F109A19CB2E00020000000000000000000000000000000000010015E0002C1C8F109A19CB2E0001000000000000000000000000000000000000801130002C1C8F109A19CB2E000080000FF0F5DA600000000000000000000000402410003C1C8F109A19CB2E000040000000000000000000000000000E00038D55A354F22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    private Guid guidPurchase = new Guid("00000004-0241-0203-C1C8-F109A19CB2E0");

    // manifest with an invalid asset (unknown version)
    private const string manifestInvalid

    // Take the manifest with free (TOC) components and replace the shoes with the award shoes
    private byte[] GetAwardManifest()
    {
        AvatarManifest manifest = AvatarManifest.Read(HexToBytes(manifestFree));

        // get a reference to the shoes component and change it to the guid for the awarded item.
        // Note: this guid is one of the awards that can be found in the xlast in stats_dev_test_data.sql
        xonline.common.service.AvatarManifest.XAVATAR_COMPONENT_INFO shoes = Array.Find(manifest.ComponentInfo, ci => (ci.ComponentMask & (ushort)AvatarManifest.XAVATAR_COMPONENT_MASK.Shoes) != 0);
        shoes.ModelAssetId = new AvatarAssetId(new Guid("00000020-0002-4103-CF4E-E4BAFEEDFEED"));

        return (byte[])manifest;
    }

    [TestGroupSetup]
    public void Setup()
    {
        using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
        {
            cxn.Open();

            // xblob setup will already have created all the tables, triggers,
            // and populated environment invariant and environment specific
            // information. All we need to do is add and/or reset the
            // unit test specific data.
            string sqlfile = Path.Combine(Path.GetDirectoryName(ContainingDll), "stats_dev_test_data.sql");
            DbUtil.ExecuteSqlFile(cxn, sqlfile);

            // TODO: force a reload?
        }
    }




    #region Test cases

    [TestCase]
    public void UploadFree()
    {
        // Upload a manifest containing only TOC assets
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        UploadManifest(slot, user, manifestFree);

        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, HexToBytes(manifestFree)), "manifest comparison failed");
    }

    [TestCase]
    public void UploadValidAwards()
    {
        // Upload a manifest containing awarded items that the user has been awarded
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Upload the awards
        WriteAvatarAward(slot, awardTitle, user, awards);

        // Upload the manifest
        UploadManifest(slot, user, GetAwardManifest());

        // Make sure the manifest passed validation and was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, GetAwardManifest()), "manifest comparison failed");
    }

    [TestCase]
    public void UploadMissingAwards360()
    {
        // Upload a manifest containing awarded items that the server doesn't know have been awarded yet.
        // This is a valid scenario that should succeed and will probably happen frequently because the
        // client uploads the manifest before uploading awards.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Upload the manifest without uploading the awards
        UploadManifest(slot, user, GetAwardManifest());

        // Make sure the manifest passed validation and was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, GetAwardManifest()), "manifest comparison failed");
    }

    [TestCase]
    public void UploadMissingAwardsPC()
    {
        // Upload a manifest containing awarded items that the server doesn't know have been awarded yet.
        // This is not a valid scenario from a platform other than 360, since other platforms should get their
        // award list from the service.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.PC);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Upload the manifest without uploading the awards
        UploadManifest(slot, user, GetAwardManifest());

        // Make sure the manifest passed validation and was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(serverManifest == null, "manifest comparison failed");
    }

    [TestCase]
    public void UploadNotAchievableAwards()
    {
        // Upload a manifest containing awards that have been marked as 'not achievable'
        // The manifest should be rejected.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Start with a manifest full of free stuff.
        // If the manifest erasing code doesn't work, we'll have this
        // manifest after the not_achievable upload instead of an empty manifest.
        UploadManifest(slot, user, manifestFree);

        // Upload the awards
        WriteAvatarAward(slot, awardTitle, user, awards);

        // Now mark one that's to be equipped as not achievable
        MarkNotAchievable(slot, awardTitle, user, 2, XOn.XAVATAR_BODY_TYPE_ALL);

        // Upload the manifest
        UploadManifest(slot, user, GetAwardManifest());

        // Make sure the manifest failed validation and an empty manifest was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(serverManifest == null, "manifest comparison failed");
    }

    [TestCase]
    public void UploadPurchasedAssets()
    {
        // Upload a manifest containing purchased marketplace assets
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Upload the purchase
        WritePurchase(slot, user, guidPurchase);

        // Upload the manifest
        UploadManifest(slot, user, manifestPurchase);

        // Make sure the manifest passed validation and was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, HexToBytes(manifestPurchase)), "manifest comparison failed");
    }

    [TestCase]
    public void UploadUnpurchasedAssets()
    {
        // Upload a manifest containing marketplace assets that haven't been purchased
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Start with a manifest full of free stuff.
        // If the manifest erasing code doesn't work, we'll have this
        // manifest after the not_achievable upload instead of an empty manifest.
        UploadManifest(slot, user, manifestFree);

        // Upload the manifest
        UploadManifest(slot, user, manifestPurchase);

        // Make sure the manifest failed validation and an empty manifest was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(serverManifest == null, "manifest comparison failed");
    }

    [TestCase]
    public void UploadInvalidAssets()
    {
        // Upload a manifest containing assets with an invalid version number
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Start with a manifest full of free stuff.
        // If the manifest erasing code doesn't work, we'll have this
        // manifest after the not_achievable upload instead of an empty manifest.
        UploadManifest(slot, user, manifestFree);

        // Upload the manifest
        UploadManifest(slot, user, manifestInvalid);

        // Make sure the manifest failed validation and an empty manifest was written to the server
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(serverManifest == null, "manifest comparison failed");
    }

    [TestCase]
    public void ValidateFree()
    {
        // Upload a manifest containing only TOC assets
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, manifestFree);

        // Make sure the manifest passed validation
        Assert.IsTrue(fValid, "manifest validation failed");
    }

    [TestCase]
    public void ValidateValidAwards()
    {
        // Upload a manifest containing awarded items that the user has been awarded
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Upload the awards
        WriteAvatarAward(slot, awardTitle, user, awards);

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, GetAwardManifest());

        // Make sure the manifest passed validation
        Assert.IsTrue(fValid, "manifest validation failed");
    }

    [TestCase]
    public void ValidateMissingAwards360()
    {
        // Upload a manifest containing awarded items that the server doesn't know have been awarded yet.
        // This is a valid scenario that should succeed and will probably happen frequently because the
        // client uploads the manifest before uploading awards.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Validate the manifest without uploading the awards
        bool fValid = ValidateManifest(slot, user, GetAwardManifest());

        // Make sure the manifest passed validation
        Assert.IsTrue(fValid, "manifest validation failed");
    }

    [TestCase]
    public void ValidateMissingAwardsPC()
    {
        // Upload a manifest containing awarded items that the server doesn't know have been awarded yet.
        // This is not a valid scenario from a platform other than 360, since other platforms should get their
        // award list from the service.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.PC);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Validate the manifest without uploading the awards
        bool fValid = ValidateManifest(slot, user, GetAwardManifest(), ValidateAvatarManifestRequest.XAVATAR_VALIDATE_AVATAR_AWARDS);

        // Make sure the manifest passed validation
        Assert.IsTrue(!fValid, "manifest validation should have failed");
    }

    [TestCase]
    public void ValidateNotAchievableAwards()
    {
        // Upload a manifest containing awards that have been marked as 'not achievable'
        // The manifest should be rejected.
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = awardTitle;
        slot.userPuid0 = user;

        // Start by uploading a manifest full of free stuff.
        // When the validation fails, this manifest should remain in the database.
        UploadManifest(slot, user, manifestFree);

        // Upload the awards
        WriteAvatarAward(slot, awardTitle, user, awards);

        // Now mark one that's to be equipped as not achievable
        MarkNotAchievable(slot, awardTitle, user, 2, XOn.XAVATAR_BODY_TYPE_ALL);

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, GetAwardManifest());

        // Make sure the manifest failed validation and that the uploaded manifest is still on the server
        Assert.IsTrue(!fValid, "manifest validation should have failed");
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, HexToBytes(manifestFree)), "manifest comparison failed");
    }

    [TestCase]
    public void ValidatePurchasedAssets()
    {
        // Upload a manifest containing purchased marketplace assets
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Upload the purchase
        WritePurchase(slot, user, guidPurchase);

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, manifestPurchase);

        // Make sure the manifest passed validation
        Assert.IsTrue(fValid, "manifest validation failed");
    }

    [TestCase]
    public void ValidateUnpurchasedAssets()
    {
        // Upload a manifest containing marketplace assets that haven't been purchased
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Start by uploading a manifest full of free stuff.
        // When the validation fails, this manifest should remain in the database.
        UploadManifest(slot, user, manifestFree);

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, manifestPurchase);

        // Make sure the manifest failed validation and that the uploaded manifest is still on the server
        Assert.IsTrue(!fValid, "manifest validation should have failed");
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, HexToBytes(manifestFree)), "manifest comparison failed");
    }

    [TestCase]
    public void ValidateInvalidAssets()
    {
        // Upload a manifest containing assets with an invalid version number
        ulong user = DvtUtil.GenerateUser();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.SetClientType(CSGInfo.ClientType.Xenon);
        slot.titleId = TITLE_ID;
        slot.userPuid0 = user;

        // Start by uploading a manifest full of free stuff.
        // When the validation fails, this manifest should remain in the database.
        UploadManifest(slot, user, manifestFree);

        // Validate the manifest
        bool fValid = ValidateManifest(slot, user, manifestInvalid);

        // Make sure the manifest failed validation and that the uploaded manifest is still on the server
        Assert.IsTrue(!fValid, "manifest validation should have failed");
        byte[] serverManifest = DownloadManifest(slot, user);
        Assert.IsTrue(CompareByteArrays(serverManifest, HexToBytes(manifestFree)), "manifest comparison failed");
    }
   
    #endregion

    #region Support methods

    byte[] HexToBytes(string str)
    {
        byte[] result = new byte[(str.Length + 1) / 2];

        byte[] HexValue = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x0B, 0x0C, 0x0D,
                                 0x0E, 0x0F };

        int nextChar = 0;
        int nextByte = 0;

        // If we have an odd number of characters, treat the first one as the low nybble of the first byte.
        if ((str.Length % 2) == 1)
        {
            result[nextByte++] = HexValue[Char.ToUpper(str[nextChar++]) - '0'];
        }

        while (nextChar < str.Length)
        {
            result[nextByte++] = (byte)((HexValue[Char.ToUpper(str[nextChar]) - '0'] << 4) + HexValue[Char.ToUpper(str[nextChar + 1]) - '0']);
            nextChar += 2;
        }

        return result;
    }

    public static bool CompareByteArrays(byte[] b1, byte[] b2)
    {
        if (b1.Length != b2.Length)
            return false;
        for (int i = 0; i < b1.Length; ++i)
            if (b1[i] != b2[i])
                return false;
        return true;
    }

    void UploadManifest(CSGInfo slot, ulong user, byte[] manifest)
    {
        SyncSettingsRequest req = new SyncSettingsRequest();
        SyncSettingsResponse resp = new SyncSettingsResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.TitleId = XOn.XENON_DASH_TITLE_ID;
        req.UserId = user;
        req.Version = DateTime.UtcNow;
        req.StartinIndex = 0;
        req.SettingsLen = 1;
        req.Settings = new UserSetting[1];
        req.Settings[0] = new UserSetting(user, XOn.XSOURCE_DEFAULT, ProfileDefs.XPROFILE_GAMERCARD_AVATAR_INFO_1, manifest);

        Console.WriteLine("Send SyncSettings (1)");
        uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);
    }

    void UploadManifest(CSGInfo slot, ulong user, string manifest)
    {
        UploadManifest(slot, user, HexToBytes(manifest));
    }

    byte[] DownloadManifest(CSGInfo slot, ulong user)
    {
        // read the setting
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.SetHashVal(user);

            ws.CommandSql = @"select @vb_value = settings.vb_value
                              from dbo.t_user_settings settings
                              where settings.bi_user_puid = @bi_user_puid and settings.i_setting_id = @i_setting_id";
            ws.AddParameter("@bi_user_puid", user);
            ws.AddParameter("@i_setting_id", ProfileDefs.XPROFILE_GAMERCARD_AVATAR_INFO_1);
            ws.Parameters.Add("@vb_value", SqlDbType.VarBinary, 1000).Direction = ParameterDirection.Output;

            ws.ExecuteNonQuery();

            object value = ws.Parameters["@vb_value"].Value;
            if (value == null || value == DBNull.Value)
            {
                return null;
            }

            return (byte[])value;
        }
    }

    bool ValidateManifest(CSGInfo slot, ulong user, byte[] manifest, uint validationFlags)
    {
        ValidateAvatarManifestRequest req = new ValidateAvatarManifestRequest();
        ValidateAvatarManifestResponse resp = new ValidateAvatarManifestResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.UserId = user;
        req.AvatarManifest = manifest;
        req.AvatarManifestLen = (ushort)req.AvatarManifest.Length;
        req.ValidationFlags = validationFlags;

        Console.WriteLine("Send ValidateAvatarManifest (1)");
        uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);

        return (resp.ValidationResult != 0);
    }

    bool ValidateManifest(CSGInfo slot, ulong user, byte[] manifest)
    {
        return ValidateManifest(slot, user, manifest, 0);
    }

    bool ValidateManifest(CSGInfo slot, ulong user, string manifest)
    {
        return ValidateManifest(slot, user, HexToBytes(manifest));
    }

    SyncAvatarAssetResponse WriteAvatarAward(CSGInfo slot, uint titleId, ulong user, AvatarAsset[] awards)
    {
        uint hr;
        int count = 0;

        SyncAvatarAssetRequest req = new SyncAvatarAssetRequest();
        SyncAvatarAssetResponse resp = new SyncAvatarAssetResponse();

        XRLObject2 xrlo = (XRLObject2)resp;

        req.TitleId = titleId;
        req.UserId = user;
        req.LocaleId = (ushort)(slot.userFlag0 == 0 ? 1033 : 0);
        req.StartingIndex = 0;

        while (count < awards.Length)
        {
            req.AvatarAssets = new AvatarAsset[Math.Min(awards.Length - count, XOn.XONLINE_MAX_AVATAR_ASSETS)];
            for (int i = 0; i < req.AvatarAssets.Length; ++i)
                req.AvatarAssets[i] = awards[count + i];

            Console.WriteLine("Send SyncAvatarAssetRequest (" + count + " - " + req.AvatarAssets.Length + ")");
            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

            Assert.AreEqual(hr, HResult.S_OK);

            count += req.AvatarAssets.Length;
        }

        return resp;
    }

    void MarkNotAchievable(CSGInfo slot, uint titleId, ulong user, uint assetOrdinal, uint bodyTypeMask)
    {
        // set the middle asset to be unachiavable
        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.SetHashVal(user);

            ws.CommandSql = @"UPDATE [dbo].[t_awarded_avatar_items]
                            SET [i_status] = [i_status] | 0x00040000, [dt_Change_datetime] = getutcdate()
                            WHERE [i_title_id] = @i_title_id AND [bi_user_puid] = @bi_user_puid AND [i_asset_ordinal] = @i_asset_ordinal AND [i_body_type_mask] = @i_body_type_mask";
            ws.AddParameter("@i_title_id", titleId);
            ws.AddParameter("@bi_user_puid", user);
            ws.AddParameter("@i_asset_ordinal", assetOrdinal);
            ws.AddParameter("@i_body_type_mask", bodyTypeMask);

            ws.ExecuteNonQuery();
        }
    }

    void WritePurchase(CSGInfo slot, ulong user, Guid guidPurchase)
    {
        // set the middle asset to be unachiavable
        using (WSClient ws = new WSClient(ConfigUtil.GetUserCommerceWebstoreApp(), CmdType.WRITEONLY_COMMANDTYPE))
        {
            ws.PartitionType = WstPartitionType.Logical;
            ws.Partition = ws.CalcPartition(user);

            ws.CommandSql = @"INSERT [dbo].[t_user_purchased_avatar_items]
                                (bi_user_puid, uid_avatar_item_id, si_hash_bucket, dt_Change_datetime)
                                VALUES(@bi_user_puid, @uid_avatar_item_id, @si_hash_bucket, getutcdate())";
            ws.AddParameter("@bi_user_puid", user);
            ws.AddParameter("@uid_avatar_item_id", guidPurchase);
            ws.AddParameter("@si_hash_bucket", ws.Partition);

            ws.ExecuteNonQuery();
        }
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\syncalldevtest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Database;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;


[TestGroup, DVT]
public class SyncAllDevTest : TestNode
{
    private const uint TITLE_ID  = 0x4d2;
    private const uint TITLE_ID2 = 0x12344321;

    const uint GAMER_TYPE = 0x10040001;
    const uint CONTROLLER_INVERSION = 0x10040002;
    const uint CONTROLLER_VIBRATION = 0x10040003;
    const uint GAMER_TILE_PATH = 0x23e80004;
    const uint GAMER_RATING = 0x10040007;
    const uint GAMERTAG = 0x4010000a;
    const uint GAMER_MOTTO = 0x4010000c;
    const uint GAMER_CRED = 0x10040006;    
    
    
    [TestCase]
    public void OfflineToOnlineUser()
    {
        CSGInfo slot;
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        Guid g = Guid.NewGuid();
        
        SyncAllRequest syncReq = new SyncAllRequest(userID1, TITLE_ID, 1033, g.ToByteArray());
        syncReq.SettingsVersion = DateTime.Now;
        syncReq.Settings = new UserSetting[] {
            new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_TYPE, new byte[] { 1 } ), 
            new UserSetting(userID1, XOn.XSOURCE_DEFAULT, CONTROLLER_INVERSION, new byte[] { 2 } )
        };
            
        syncReq.TitlesVersion = DateTime.Now;
        syncReq.Titles = new UserTitle[] { 
            new UserTitle(TITLE_ID,   DateTime.Now, 1, 4, 11),
            new UserTitle(TITLE_ID+1, DateTime.Now, 2, 5, 12),
            new UserTitle(TITLE_ID+2, DateTime.Now, 3, 6, 13)
        };

        
        syncReq.AchievementsVersion = DateTime.Now;
        syncReq.Achievements = new Achievement[] {
            new Achievement(101, DateTime.Now, 0),
            new Achievement(201, DateTime.Now, 0)
        };
        
        SyncAllResponse syncResp = new SyncAllResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;
        
        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;
        
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(syncResp.Settings.Settings.Length, 0);
        Assert.AreEqual(syncResp.Titles.Titles.Length, 0);
        Assert.AreEqual(syncResp.Achievements.Achievements.Length, 0);
    
    }
    
    
    [TestCase]
    public void DupeGuid()
    {
        CSGInfo slot;
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        Guid g = Guid.NewGuid();
        
        Console.WriteLine("Sumbmitting original data...");
        
        SyncAllRequest syncReq = new SyncAllRequest(userID1, TITLE_ID, 1033, g.ToByteArray());
        syncReq.SettingsVersion = DateTime.Now;
        syncReq.Settings = new UserSetting[] {
            new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_TYPE, new byte[] { 1 } ), 
            new UserSetting(userID1, XOn.XSOURCE_DEFAULT, CONTROLLER_INVERSION, new byte[] { 2 } )
        };
            
        syncReq.TitlesVersion = DateTime.Now;
        syncReq.Titles = new UserTitle[] { 
            new UserTitle(TITLE_ID,   DateTime.Now, 1, 4, 11),
            new UserTitle(TITLE_ID+1, DateTime.Now, 2, 5, 12),
            new UserTitle(TITLE_ID+2, DateTime.Now, 3, 6, 13)
        };

        
        syncReq.AchievementsVersion = DateTime.Now;
        syncReq.Achievements = new Achievement[] {
            new Achievement(101, DateTime.Now, 0),
            new Achievement(201, DateTime.Now, 0)
        };
        
        SyncAllResponse syncResp = new SyncAllResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;
        
        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID2;
        slot.userPuid0 = syncReq.UserId;
        
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        
        
        Console.WriteLine("Submitting dupe data...");
        
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);
    
    }
    
    
    [TestCase]
    public void AccountRecovery()
    {
        CSGInfo slot;
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        
        
        Console.WriteLine("Sumbmitting no data...");
        
        SyncAllRequest syncReq = new SyncAllRequest(userID1, TITLE_ID, 1033, new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        syncReq.SettingsVersion = XOn.MinDateTime;
        syncReq.AchievementsVersion = XOn.MinDateTime;
        syncReq.TitlesVersion = XOn.MinDateTime;
        
        SyncAllResponse syncResp = new SyncAllResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;
        
        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;
        
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        
        
    
    }
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\PlatformVisible\UnitTests.cs ===
﻿using System;
using ServerTestFramework;
using ServerTestFramework.LiveService.Stats;
using ServerTestFramework.Utilities;
using System.Net;
using System.Text;

using xonline.common.config;
using xonline.common.protocol;
using StatsReadRequest = xonline.common.protocol.StatsReadRequest;
using StatsReadResponse = xonline.common.protocol.StatsReadResponse;
using StatsSpec = xonline.common.protocol.StatsSpec;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;


namespace PlatformVisible_Tests
{

    [TestGroup, Owner("joelwi"), TestFrequency("UnitTest"), TestCasePriority(3)]
    public class UnitTests
    {
        const int DefaultMaxItems = 100;

        [TestCase, TestCasePriority(1), Description("Unit Test1")]
        public void UnitTest1(TestNode self)
        {
            bool result= false;

            ///////////////////////////////////////////////
            // Add test logic and set result value finally
            ///////////////////////////////////////////////

            result = true;

            if (!result)
            {
                throw new TestCaseException("UnitTest failed");
            }
        }

        private string GetReloadPlatformVisibleLeaderboardMapUrl()
        {
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

            return string.Format("http://{0}:11070/xstats/xstatsreloadplatformvisibleleaderboardmap.ashx", ipEndPoint.Address.ToString());
        }

        private string GetPlatformVisibleLeaderboardUrlForTitle(string titleId)
        {
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

            return String.Format("http://{0}:11070/xstats/activity/titles/{1}/leaderboards", ipEndPoint.Address.ToString(), titleId);
        }

        private string GetPlatformVisibleLeaderboardUrlForUser(string titleId, int lbid, ulong xuid, string qs)
        {
            //Target url for the service, we get the endpoint IP from NPDB.
            IPEndPoint ipEndPoint = Global.XEnv.GetVirtualInterface(VirtualInterface.xstatsfd);

            string url = string.Format("http://{0}:11070/xstats/activity/titles/{1}/leaderboards/{2}/users/xuid({3}){4}",
                ipEndPoint.Address.ToString(),
                titleId,
                lbid,
                xuid,
                qs);

            return url;
        }

        [TestCase, TestCasePriority(1), Description("Basic Http PlatformVisible Connectivity Test for Title leaderboard data")]
        public void BasicTitleConnectivityTest(TestNode self)
        {
            bool result = false;
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(GetPlatformVisibleLeaderboardUrlForTitle("13345678"));
            
            request.Method = "GET";
            request.ContentLength = 0;

            WebHeaderCollection col = new WebHeaderCollection();
            col.Add("x-locale", "en-US");

            request.Headers = col;
            request.ContentType = "text/xml";

            HttpWebResponse response = (HttpWebResponse)request.GetResponse();

            result = (response.StatusCode == HttpStatusCode.NoContent);

            if (!result)
            {
                throw new TestCaseException("UnitTest failed");
            }
        }

        [TestCase, TestCasePriority(1), Description("Basic Http PlatformVisible Connectivity Test for User data")]
        public void BasicUserConnectivityTest(TestNode self)
        {
            string url = GetPlatformVisibleLeaderboardUrlForUser("13345678", 1, 1234556789, "");
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);

            request.Method = "GET";
            request.ContentLength = 0;

            WebHeaderCollection col = new WebHeaderCollection();
            col.Add("x-locale", "en-US");

            request.Headers = col;
            request.ContentType = "text/xml";

            HttpWebResponse response = null;
            HttpStatusCode retStatusCode = new HttpStatusCode();

            try
            {
                response = (HttpWebResponse)request.GetResponse();
            }
            catch (WebException web)
            {
                HttpWebResponse res = (HttpWebResponse)web.Response;
                retStatusCode = res.StatusCode;
            }

            if (retStatusCode != HttpStatusCode.Unauthorized) // 401
            {
                throw new TestCaseException("Expected call to fail with a 401 (unauthorized)");
            }
        }

        [TestCase, TestCasePriority(1), Description("Basic Http Request Connectivity Test for the xstatsreloadplatformvisibleleaderboardmap XRL")]
        public void BasicReloadPlatformVisibleXRLTest(TestNode self)
        {
            bool result = false;
            string url = GetReloadPlatformVisibleLeaderboardMapUrl();

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);

            request.Method = "GET";
            request.ContentLength = 0;
            request.ContentType = "text/xml";

            HttpWebResponse response = null;

            try
            {
                response = (HttpWebResponse)request.GetResponse();
            }
            catch (WebException ex)
            {
                Console.WriteLine(ex.ToString());
            }

            result = (response.StatusCode == HttpStatusCode.OK); // 200

            if (!result)
            {
                throw new TestCaseException("UnitTest failed");
            }
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsdevtest_none_12.4.56.0_none_69497ca66ea3d587
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.manifest
XP_MANIFEST_PATH=manifests\msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.cat
XP_CATALOG_PATH=manifests\msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.cat
XP_PAYLOAD_PATH=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsdevtest_none_12.4.56.0_none_69497ca66ea3d587
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsdevtest
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.manifest
XP_MANIFEST_PATH=manifests\msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.cat
XP_CATALOG_PATH=manifests\msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b.cat
XP_PAYLOAD_PATH=msil_statsdevtest_no-public-key_12.4.56.0_x-ww_f91d1b8b
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsdevtest,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lbdump_none_12.4.56.0_none_33fba1d984022ef1
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lbdump
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.manifest
XP_MANIFEST_PATH=manifests\msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.cat
XP_CATALOG_PATH=manifests\msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.cat
XP_PAYLOAD_PATH=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lbdump,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\Program.cs ===
using System;
using System.Text;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

using System.Net;
using System.IO;

using System.Globalization;

using xonline.server.stats.common;
using xonline.common.config;

namespace LbDump
{
    class Program
    {
        class CommandLineException : ArgumentException
        {
            public CommandLineException(string Message)
                : base(Message)
            { }

            public CommandLineException(string Message, Exception InnerException)
                : base(Message, InnerException)
            { }

            public CommandLineException(string Message, string ArgumentName)
                : base(Message, ArgumentName)
            { }

            public CommandLineException(string Message, string ArgumentName, Exception InnerException)
                : base(Message, ArgumentName, InnerException)
            { }
        }

        static private uint ParseTitleId(string[] Args)
        {
            uint titleId = 0;

            if (Args.Length >= 2)
            {
                try
                {
                    string sval = Args[1];
                    
                    // Try to parse as uint first
                    if (!uint.TryParse(sval, out titleId))
                    {
                        // If that fails, fall back on hex

                        // Remove the hex prefix if it is present
                        if (sval.StartsWith("0x"))
                        {
                            sval = sval.Substring(2);
                        }

                        // Attempt to parse as hex, if this fails, we just give up.
                        titleId = uint.Parse(
                            sval
                          , NumberStyles.HexNumber
                          , NumberFormatInfo.InvariantInfo
                        );
                    }
                }
                catch (FormatException)
                {
                    throw new CommandLineException("Argument was not formatted correctly", "TitleId");
                }
                catch (OverflowException)
                {
                    throw new CommandLineException("Value was too large", "TitleId");
                }
            }
            else
            {
                throw new CommandLineException("Expected argument not found.", "TitleId");
            }

            return titleId;
        }

        static private uint ParseLbId(string[] Args)
        {
            uint lbId = 0;

            if (Args.Length >= 3)
            {
                try
                {
                    lbId = uint.Parse(Args[2]);
                }
                catch (FormatException)
                {
                    throw new CommandLineException("Argument was not formatted correctly", "LbId");
                }
                catch (OverflowException)
                {
                    throw new CommandLineException("Value was too large", "LbId");
                }
            }
            else
            {
                throw new CommandLineException("Expected argument not found.", "LbId");
            }

            return lbId;
        }

        class LbsvrConnectionException : Exception
        {
            public LbsvrConnectionException(string Message)
                : base(Message)
            { }
        }

        static LbsvrClientConnection OpenConnectionForLeaderboard(string Server, uint TitleId, uint LbId)
        {
            string lbsvrName = null;

            // Connect to NPDB, get server name (we know port) for given title and lb
            using (SqlConnection npdb = new SqlConnection(Config.NpdbConnectionString))
            {
                npdb.Open();

                SqlCommand cmd = new SqlCommand("p_stats_lb_get", npdb);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@return_value", SqlDbType.Int).Direction = ParameterDirection.ReturnValue;

                cmd.Parameters.AddWithValue("@i_title_id", unchecked((Int32)TitleId));
                cmd.Parameters.AddWithValue("@i_lb_id", unchecked((Int32)LbId));

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows)
                    {
                        throw new LbsvrConnectionException("No Server found for Title Id: 0x" + TitleId.ToString("X8") + " Leaderboard Id: " + LbId);
                    }

                    reader.Read(); // return value doesn't seem all that important :O

                    // vc_server_name == Col0
                    lbsvrName = reader.GetString(0);
                }
            }

            IPAddress[] lbsvrIPs = Dns.GetHostAddresses(lbsvrName);
            if (lbsvrIPs.Length == 0)
            {
                throw new LbsvrConnectionException("Server: " + lbsvrName + " didn't map to a known IP");
            }

            IPEndPoint endpoint = new IPEndPoint(lbsvrIPs[0], 15000);
            
            LbsvrClientConnection con = LbsvrClientConnection.OpenConnection(endpoint);
            if (con == null)
            {
                throw new LbsvrConnectionException("Failed to connect to Server: " + lbsvrName + " (" + endpoint.Address + ":" + endpoint.Port + ")");
            }

            return con;
        }

        static void WriteLbContentsToStream(Stream OutStream, string Server, uint TitleId, uint LbId)
        {
            using (StreamWriter writer = new StreamWriter(OutStream))
            {
                LbsvrClientConnection con = OpenConnectionForLeaderboard(Server, TitleId, LbId);

                uint maxPageSize = 1000;

                // Get the total number of rows on the leaderboard
                con.BeginRequest(1);

                unchecked
                {
                    con.CallProc(
                        LbsvrClientConnection.LbProcIdGetLbRankedEntryCount
                      , new object[] {
                            (Int32)TitleId
                          , (Int32)LbId
                        }
                    );
                }

                con.SendRequest();

                con.NextRowset();
                con.Read();

                uint rowCount = unchecked((UInt32)(Int32)con.GetColumn(0));
                con.Reset();

                if (rowCount == 0)
                {
                    con.Close(); // Close since we're done with it...
                    throw new LbsvrConnectionException("No rows were returned for Title Id: 0x" + TitleId.ToString("X8") + " Leaderboard Id: " + LbId);
                }

                // Dump the rows from the leaderboard
                for (uint rank = 1; rank <= rowCount; rank += maxPageSize)
                {
                    uint rowsLeft = rowCount - rank + 1;
                    uint pageSize = (maxPageSize < rowsLeft) ? maxPageSize : rowsLeft;

                    con.BeginRequest(1);

                    unchecked
                    {
                        con.CallProc(
                            LbsvrClientConnection.LbProcIdStatEnum
                          , new object[] {
                                (Int32)TitleId     // Title Id
                              , (Int32)LbId        // Leaderboard Id
                              , (Int32)rank        // Starting Rank
                              , (Int32)pageSize    // Page Size
                            }
                        );
                    }

                    con.SendRequest();

                    con.NextRowset();
                    while (con.Read())
                    {
                        StringBuilder csvLine = new StringBuilder();

                        int colCount = con.GetColumnCount();
                        if (colCount > 0)
                        {
                            object obj = con.GetColumn(0);
                            csvLine.Append(obj.ToString());

                            for (int col = 1; col < colCount; ++col)
                            {
                                obj = con.GetColumn(col);
                                csvLine.Append("," + obj.ToString());
                            }

                            writer.WriteLine(csvLine);
                        }
                    }

                    con.Reset();
                }

                con.Close();
            }
        }

        static void Main(string[] args)
        {
            try
            {
                if (args.Length != 3)
                {
                    throw new CommandLineException("Expected <NPDB Server Name> <Title Id> <Leaderboard Id>");
                }

                string server = args[0];

                uint titleId = ParseTitleId(args);
                uint lbId = ParseLbId(args);
                using (Stream stream = Console.OpenStandardOutput(225))
                {
                    WriteLbContentsToStream(stream, server, titleId, lbId);
                }
            }
            catch (CommandLineException e)
            {
                Console.WriteLine(e.Message);
            }
            catch (LbsvrConnectionException e)
            {
                Console.WriteLine(e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\lbdump\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_lbdump_none_12.4.56.0_none_33fba1d984022ef1
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=lbdump
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.manifest
XP_MANIFEST_PATH=manifests\msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.cat
XP_CATALOG_PATH=manifests\msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d.cat
XP_PAYLOAD_PATH=msil_lbdump_no-public-key_12.4.56.0_x-ww_a9ccfa0d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=lbdump,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\statsdevtest.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Database;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;

using xonline.server.stats.test.dvt;
using xonline.server.stats.common;

[TestGroup, DVT]
public class StatsDevTest : TestNode
{
    private const uint   TITLE_ID         = 0xfeedfeed;
    private const ulong  TEST_MACHINE_ID  = 0xf00df00df00df00d;
    private const int    MAX_USERS        = 101;
    private const int    MAX_COLUMNS      = 64;
    private const int    MAX_TEAMS        = 101;
    private const long   RATING_SEED      = 1000;
    private const int    PAGE_SIZE        = 100;

    [TestGroupSetup]
    public void Setup()
    {
        DvtConfig.LoadConfig();
    }

    #region StatPost tests

    [TestCase]
    public void StatPost_Replace()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        // Create the leaderboard and populate with default values
        // This implicitly tests replace
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Get results of replace");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values, RATING_SEED, false);
        }
    }


    [TestCase]
    public void StatPost_WriteAttachmentSize()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS - 1, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS - 1, 100, 10, DvtUtil.ValueTypes.All);

        //add the attachment size column
        columns.Add(SpecialAttrib.AttachmentSize);
        values.Add((Int32) 123456);

        try
        {
            DbLeaderboard.Reset();
        }
        catch
        {}

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Get results of replace");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values, RATING_SEED, false);
        }
    }


    [TestCase]
    public void StatPost_WriteAttachmentSizeWithNoLimit()
    {

        ArrayList users   = null;
        ArrayList columns = null;
        ArrayList values  = null;

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();

        try
        {
            DbLeaderboard.Reset();
        }
        catch
        {
        }
        
        View view = new View(1, 0, 65535);
        view.Create();

        //the idea is we want to exceed 65535 but an attachment size stat read nevers returns null
        for (int i=0;i<1000;i++)
        {
            users   = DvtUtil.GenerateUsers(MAX_USERS);
            columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS - 1, 1, 1);
            values  = DvtUtil.GenerateValues(MAX_COLUMNS - 1, 100, 10, DvtUtil.ValueTypes.All);

            //add the attachment size column
            columns.Add(SpecialAttrib.AttachmentSize);
            values.Add((Int32) 123456);
       
            slot.titleId = TITLE_ID;
            slot.userPuid0 = (ulong) users[0];

            view.LoadValues(users, slot, columns, values, RATING_SEED);

            Console.WriteLine("Get results of replace " + i);
            StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

            Console.WriteLine("Verify returned values " + i);
            Assert.AreEqual(resp.ResultsCount, 1);

            foreach (StatsResultSet result in resp.Results)
            {
                CompareResults(result, users, columns, values, RATING_SEED, false);
            }
        }
    }


    [TestCase]
    public void StatPost_WriteTooBigAttachmentSize()
    {
        bool bExpectedErrorReceived = false;
        try
        {
            ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS - 1, 1, 1);
            ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS - 1, 100, 10, DvtUtil.ValueTypes.All);

            //add the attachment size column
            columns.Add(SpecialAttrib.AttachmentSize);
            values.Add((Int32) 123459);

            try
            {
                DbLeaderboard.Reset();
            }
            catch
            {
            }

            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = TITLE_ID;
            slot.userPuid0 = (ulong) users[0];

            View view = new View(1, 0);
            view.Create();
            view.LoadValues(users, slot, columns, values, RATING_SEED);

        }
        catch 
        {
           bExpectedErrorReceived = true; 
        }

        Assert.AreEqual(bExpectedErrorReceived, true);
    }


    [TestCase]
    public void StatPost_Add()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList addValues = DvtUtil.GenerateValues(MAX_COLUMNS, 25, 25, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Increment values using ADD operator");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Add, columns, addValues));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of add");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.AddValueArrays(values, addValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_Min()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList minValues = DvtUtil.GenerateValues(MAX_COLUMNS, 50, 15, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Get min value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, minValues));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of min operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.MinValueArrays(values, minValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_Max()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList maxValues = DvtUtil.GenerateValues(MAX_COLUMNS, 50, 15, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Get max value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, maxValues));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of max operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.MinValueArrays(values, maxValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_Elo()
    {
        ArrayList users = DvtUtil.GenerateUsers(3);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];


        View view = new View(1,
                             0,
                             0, //columnCount,
                             0, // MaxColumnSize,
                             0, //DecayDays,
                             0, //int    Top100,
                             "10", //eloc
                             120, //elok
                             500, // eloNew
                             "0:40", //eloCtable
                             false, //IsTeam,
                             false); //ReqArbitration

        view.Create();

        Console.WriteLine("Write elo scores, game 1");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        ArrayList players = new ArrayList();
        players.Add(users[0]);
        players.Add(users[1]);

        operators.Clear();
        operators.Add(GenerateEloOp(view.ViewId, 0, players, null, 1.0, 0.5, 0.5));
        SendPostRequest(users, operators);

        players[0] = users[0];
        players[1] = users[2];

        operators.Clear();
        operators.Add(GenerateEloOp(view.ViewId, 0, players, null, 1.0, 0.5, 0.5));
        SendPostRequest(users, operators);

        players[0] = users[1];
        players[1] = users[2];

        operators.Clear();
        operators.Add(GenerateEloOp(view.ViewId, 0, players, null, 0.0, 0.5, 0.5));
        SendPostRequest(users, operators);


        Console.WriteLine("Get results of elo operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, null);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);
        Assert.AreEqual(resp.Results[0].RowCount, 3);

        Assert.AreEqual(resp.Results[0].Rows[0].Puid, users[0]);
        Assert.AreEqual(resp.Results[0].Rows[0].Rating, 519);
        //Assert.AreEqual(resp.Results[0].Rows[0].Rating, 518);

        Assert.AreEqual(resp.Results[0].Rows[1].Puid, users[1]);
        Assert.AreEqual(resp.Results[0].Rows[1].Rating, 480);

        Assert.AreEqual(resp.Results[0].Rows[2].Puid, users[2]);
        Assert.AreEqual(resp.Results[0].Rows[2].Rating, 500);

    }


    [TestCase]
    public void StatPost_AddEmpty()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();

        Console.WriteLine("Increment values using ADD operator");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Add, columns, values));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of add");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values);
        }
    }

    [TestCase]
    public void StatPost_MinEmpty()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();

        Console.WriteLine("Get min value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, values));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of min operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values);
        }
    }

    [TestCase]
    public void StatPost_MaxEmpty()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View view = new View(1, 0);
        view.Create();

        Console.WriteLine("Get max value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, values));
        }

        SendPostRequest(users, operators);

        Console.WriteLine("Get results of max operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values);
        }
    }

    public void StatPost_ReadGamertag()
    {
        BulkUserSet bulkUsers;
        UodbWS.CreateBulkUsers("DT", 1, out bulkUsers);

        ArrayList users = new ArrayList();;
        for (uint i = 0; i < 5; i++)
        {
            users.Add(bulkUsers.IndexToPuid(i));
        }

        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(columns.Count, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        // Create the leaderboard and populate with default values
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        Console.WriteLine("Reading..");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values);

            Assert.AreEqual(result.Rows.Length, users.Count);
            for (uint i = 0; i < users.Count; i++)
            {
                Assert.AreEqual(result.Rows[i].GamerTag, bulkUsers.IndexToGamertag(i));
            }
        }
    }


    [TestCase]
    public void StatPost_ReadNull()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columnsToWrite = DvtUtil.GenerateColumnIds(3, 1, 1);
        ArrayList columnsToRead = DvtUtil.GenerateColumnIds(5, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(columnsToWrite.Count, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        // Create the leaderboard and populate with default values
        // This implicitly tests replace
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columnsToWrite, values, RATING_SEED);

        Console.WriteLine("Get results of replace");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columnsToRead);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columnsToWrite, values, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_WriteToReadOnlyColumns()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList columns = DvtUtil.GenerateColumnIds(1, SpecialAttrib.Rank, 1);
        ArrayList values  = DvtUtil.GenerateValues(1, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        View view = new View(1, 0);
        view.Create();

        uint hr;

        StatsPostRequest req = new StatsPostRequest();
        req.TitleId = TITLE_ID;
        req.Operators = new StatsOperator[] { GenerateOp((ulong) users[0], view.ViewId, 0, StatPostProcedure.Replace, columns, values) };

        StatsPostResponse resp = new StatsPostResponse();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong)users[0];

        XRLObject2 xrlo = (XRLObject2)resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_BAD_REQUEST);

    }


    [TestCase]
    public void StatWrite_EmptyString()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList columns = DvtUtil.GenerateColumnIds(1, SpecialAttrib.Nickname, 1);
        ArrayList values  = new ArrayList();
        values.Add("");


        DbLeaderboard.Reset();

        View view = new View(1, 0);
        view.Create();

        uint hr;


        MsgSetData req = new MsgSetData();
        req._uiTitleId = TITLE_ID;
        req._uiLbId = (uint)view.ViewId;
        req._ulUserId = (ulong)users[0];
        req._uiAttrCount = 1;
        req._attribs = new MsgAttribData[1];
        req._attribs[0] = new MsgAttribData();
        req._attribs[0]._bAttrType = (byte)AttrType.String;
        req._attribs[0]._usAttrId = SpecialAttrib.Nickname;
        req._attribs[0]._value = "";


        MemoryStream stream = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(stream);
        req.WriteTo(writer);

        byte[] respData;

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong)users[0];


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, "/xstats/xstatsset.ashx", stream.ToArray(), out respData);

        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("Get results of replace");
        StatsReadResponse readResp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(readResp.ResultsCount, 1);

        Assert.AreEqual(readResp.Results[0].Rows[0].Columns[0].ColumnId, SpecialAttrib.Nickname);
        Assert.AreEqual(readResp.Results[0].Rows[0].Columns[0].Type, StatParam.Utf8string);
        Assert.AreEqual(readResp.Results[0].Rows[0].Columns[0].Data, "");
    }


    [TestCase]
    public void StatPost_WriteToDeletedLb()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList columns = DvtUtil.GenerateColumnIds(1, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(1, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        View view = new View(1, 0);
        view.Create();

        uint hr;

        // do an inital post
        StatsPostRequest req = new StatsPostRequest();
        req.TitleId = TITLE_ID;
        req.Operators = new StatsOperator[] { GenerateOp((ulong) users[0], view.ViewId, 0, StatPostProcedure.Replace, columns, values) };

        StatsPostResponse resp = new StatsPostResponse();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong)users[0];

        XRLObject2 xrlo = (XRLObject2)resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("Deleting lb");
        DbLeaderboard.Reset();

        Console.WriteLine("Posting again");
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);

        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_INVALID_TITLE_OR_LEADERBOARD);

    }


    #endregion

    #region StatEnum tests

    public const int NUM_VIEWS = 3;

    [TestCase]
    public void StatPost_EnumByUser()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();
        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[NUM_VIEWS];
        StatsSpec[] specs = new StatsSpec[NUM_VIEWS];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        // Enumerate by user.  Pick a user about halfway in the set
        // so that it shows enumeration
        int   index     = (int) (users.Count / 2);
        ulong pivotUser = (UInt64) users[index];


        Console.WriteLine("Enumerate by user {0}", pivotUser);
        StatsEnumResponse resp = SendEnumByUserRequest(slot, pivotUser, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        //ArrayList expUsers = new ArrayList(users.GetRange(index - (PAGE_SIZE / 2) + 1, PAGE_SIZE));
        ArrayList expUsers = new ArrayList();
        for (int i = index + (PAGE_SIZE / 2); i > (index + (PAGE_SIZE / 2) - PAGE_SIZE); i--)
        {
            expUsers.Add(users[i]);
        }

        for (int i = 0; i < views.Length; i++)
        {
            CompareResults(resp.Results[i], users.Count, 0, expUsers, views[i].Columns, values, RATING_SEED + index + (PAGE_SIZE / 2), true);
        }
    }

    [TestCase]
    public void StatPost_EnumByUserReturnPageSize()
    {
        int nRatingSeed     = 5000;
        int nUser           = 101;
        int nLeaderBoard    = 1;
        ArrayList users     = DvtUtil.GenerateUsers(nUser, true);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[nLeaderBoard];
        StatsSpec[] specs = new StatsSpec[nLeaderBoard];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);

            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, nRatingSeed);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        for (int nIndex = 0; nIndex < nUser ; nIndex++)
        {
            UInt64 pivotUser   = (UInt64) users[nIndex];

            StatsEnumResponse resp = SendEnumByUserRequest  (slot, pivotUser, PAGE_SIZE, specs);

            Assert.AreEqual(resp.Results[0].RowCount,  PAGE_SIZE); //verify always return PAGE_SIZE
        }

    }



    [TestCase]
    public void StatPost_EnumByUser_UserNotExist()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        // Enumerate by user.  Pick a nonexistant user
        ulong pivotUser = (ulong)users[0] + 1;
        //for (pivotUser = (ulong)users[0] + 1; users.Contains(pivotUser); pivotUser++) ;

        Console.WriteLine("Enumerate by user {0}", pivotUser);
        StatsEnumResponse resp = SendEnumByUserRequest(slot, pivotUser, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");

        Assert.AreEqual(resp.Results.Length, views.Length);
        Assert.AreEqual(resp.Results[0].ViewSize, users.Count);
        for (int i = 0; i < resp.Results.Length; i++)
        {
            Assert.AreEqual(resp.Results[i].Rows.Length, 0);
        }
    }

    [TestCase]
    public void StatPost_EnumEmpty()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard but don't populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        Console.WriteLine("Enumerate by rating");
        StatsEnumResponse resp = SendEnumByRatingRequest(slot, views, 1, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.Results.Length, views.Length);

        for (int i = 0; i < resp.Results.Length; i++)
        {
            Assert.AreEqual(resp.Results[i].ViewSize, 0);
            Assert.AreEqual(resp.Results[i].RowCount, 0);
            Assert.AreEqual(resp.Results[i].Rows.Length, 0);
        }

        Console.WriteLine("Enumerate by rank");
        resp = SendEnumByRankRequest(slot, 1, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.Results.Length, views.Length);

        for (int i = 0; i < resp.Results.Length; i++)
        {
            Assert.AreEqual(resp.Results[i].ViewSize, 0);
            Assert.AreEqual(resp.Results[i].RowCount, 0);
            Assert.AreEqual(resp.Results[i].Rows.Length, 0);
        }


        Console.WriteLine("Enumerate by user");
        resp = SendEnumByUserRequest(slot, (ulong)users[0], PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.Results.Length, views.Length);

        for (int i = 0; i < resp.Results.Length; i++)
        {
            Assert.AreEqual(resp.Results[i].ViewSize, 0);
            Assert.AreEqual(resp.Results[i].RowCount, 0);
            Assert.AreEqual(resp.Results[i].Rows.Length, 0);
        }



    }


    [TestCase]
    public void StatPost_EnumByRank()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[NUM_VIEWS];
        StatsSpec[] specs = new StatsSpec[NUM_VIEWS];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        // Enumerate by rank.  Pick a rank about halfway in the set
        // so that it shows enumeration
        int   index     = (int) (users.Count / 2);
        ulong pivotRank = (UInt64) (index) + 1;

        Console.WriteLine("Enumerate by rank {0}", pivotRank);
        StatsEnumResponse resp = SendEnumByRankRequest(slot, pivotRank, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        ArrayList expUsers = new ArrayList();
        for (int i = index; i > (index - PAGE_SIZE); i--)
        {
            if (i<0)
                break;

            expUsers.Add(users[i]);
        }
        for (int i = 0; i < views.Length; i++)
        {
            CompareResults(resp.Results[i], users.Count, 0, expUsers, views[i].Columns, values, RATING_SEED + index, true);
        }
    }

    [TestCase]
    public void StatPost_EnumByRank_AttribOutOfOrder()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            // reverse the order of the columns
            columns.Reverse();

            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        // Enumerate by rank.  Pick a rank about halfway in the set
        // so that it shows enumeration
        ulong pivotRank = 1;

        Console.WriteLine("Enumerate by rank {0}", pivotRank);
        StatsEnumResponse resp = SendEnumByRankRequest(slot, pivotRank, PAGE_SIZE, specs);

        Console.WriteLine("Verify returned values");
        for (int i = 0; i < views.Length; i++)
        {
            CompareResults(resp.Results[i], users.Count, 0, users, views[i].Columns, values, RATING_SEED, true);
        }
    }


    [TestCase]
    public void StatPost_EnumByRating()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[NUM_VIEWS];
        StatsSpec[] specs = new StatsSpec[NUM_VIEWS];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        int   index       = (int) (users.Count / 2);
        ulong pivotRating = (UInt64) (RATING_SEED + index);

        Console.WriteLine("Enumerate by rating {0}", pivotRating);
        StatsEnumResponse resp = SendEnumByRatingRequest(slot, views, pivotRating, PAGE_SIZE, specs);


        Console.WriteLine("Verify returned values");
        ArrayList expUsers = new ArrayList();
        for (int i = index; i > (index - PAGE_SIZE); i--)
        {
            if (i <0)
                break;
            expUsers.Add(users[i]);
        }
        for (int i = 0; i < views.Length; i++)
        {
            CompareResults(resp.Results[i], users.Count, 0, expUsers, views[i].Columns, values, RATING_SEED + index, true);
        }
    }



    [TestCase]
    public void StatPost_EnumByRatingForAllRating()
    {
        int nRatingSeed     = 5000;
        int nUser           = 100;
        int nLeaderBoard    = 1;
        ArrayList users     = DvtUtil.GenerateUsers(nUser, true);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[nLeaderBoard];
        StatsSpec[] specs = new StatsSpec[nLeaderBoard];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);

            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, nRatingSeed);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        ulong maxRating = (ulong)(nRatingSeed + nUser -1);

        for (ulong pivotRating = (ulong)nRatingSeed; pivotRating < (ulong)(nRatingSeed + nUser) ; pivotRating++)
        {
            StatsEnumResponse resp = SendEnumByRatingRequest(slot, views, pivotRating, PAGE_SIZE, specs);

            for (ulong i=0;i<(ulong)resp.Results[0].Rows.Length;i++)
            {
                   Assert.AreEqual(resp.Results[0].Rows[i].Rank,  maxRating- pivotRating + i + 1);
            }
        }

    }



    [TestCase]
    public void StatPost_Enum0Page()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[NUM_VIEWS];
        StatsSpec[] specs = new StatsSpec[NUM_VIEWS];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        // Enumerate by user.  Pick a user about halfway in the set
        // so that it shows enumeration
        int   index     = (int) (users.Count / 2);
        ulong pivotUser = (UInt64) users[index];

        Console.WriteLine("Enumerate by user {0}", pivotUser);
        StatsEnumResponse resp = SendEnumByUserRequest(slot, pivotUser, PAGE_SIZE, specs);

    }

    // this is a repro of 25175
    [TestCase]
    public void StatPost_DoubleReplace()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);

        DbLeaderboard.Reset();

        View v = new View(1, 0);
        v.Create();

        ArrayList cols = new ArrayList();
        ArrayList values = new ArrayList();
        ArrayList ops = new ArrayList();

        // 1st post
        cols.Clear();
        values.Clear();

        cols.Add((ushort)65534);
        values.Add((long)10);
        ops.Add(GenerateOp((ulong)users[0], 1, 0, StatPostProcedure.Add, cols, values));

        cols.Clear();
        values.Clear();

        cols.Add((ushort)0x3);
        values.Add((int)10);
        cols.Add((ushort)0x6);
        values.Add((int)0);
        cols.Add((ushort)0x2);
        values.Add((int)0);
        ops.Add(GenerateOp((ulong)users[0], 1, 0, StatPostProcedure.Replace, cols, values));

        Console.WriteLine("sending 1st post");
        StatsPostResponse resp = SendPostRequest(users, ops);

        // 2nd post
        cols.Clear();
        values.Clear();
        ops.Clear();

        cols.Add((ushort)0x4);
        values.Add((int)13);
        ops.Add(GenerateOp((ulong)users[0], 1, 0, StatPostProcedure.Min, cols, values));

        cols.Clear();
        values.Clear();

        cols.Add((ushort)0x5);
        values.Add((int)11);
        ops.Add(GenerateOp((ulong)users[0], 1, 0, StatPostProcedure.Max, cols, values));

        cols.Clear();
        values.Clear();

        cols.Add((ushort)0x6);
        values.Add((int)1);
        cols.Add((ushort)0x2);
        values.Add((int)1);
        ops.Add(GenerateOp((ulong)users[0], 1, 0, StatPostProcedure.Replace, cols, values));

        resp = SendPostRequest(users, ops);


        Console.WriteLine("Reading results..");

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        cols.Clear();
        //cols.Add((ushort)65535);
        //cols.Add((ushort)65534);
        //cols.Add((ushort)65532);
        cols.Add((ushort)3);
        cols.Add((ushort)4);
        cols.Add((ushort)5);
        cols.Add((ushort)6);
        cols.Add((ushort)2);

        values.Clear();
        //values.Add((int)1);
        //values.Add((long)10);
        //values.Add((int)1);
        values.Add((int)10); // 3
        values.Add((int)13); // 4
        values.Add((int)11); // 5
        values.Add((int)1);  // 6
        values.Add((int)1);  // 2

        StatsReadResponse readResponse = v.GetCurrentValues(slot, users, cols);
        CompareResults(readResponse.Results[0], users, cols, values);
    }

    [TestCase]
    public void Enum_EndOfLbByRank()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        StatsEnumResponse resp = SendEnumByRankRequest(slot, (ulong)users.Count - PAGE_SIZE/2, PAGE_SIZE, specs);

        Assert.AreEqual(resp.Results.Length, 1);
        Assert.AreEqual(resp.Results[0].Rows.Length, PAGE_SIZE/2 + 1);
        for (int i=0;i<resp.Results[0].Rows.Length;i++)
        {
            Assert.AreEqual(resp.Results[0].Rows[i].Rank, users.Count - (resp.Results[0].Rows.Length - 1) + i);
        }
    }


    [TestCase]
    public void Enum_EndOfLbByRating()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        StatsEnumResponse respByRank = SendEnumByRankRequest(slot, (ulong)users.Count - PAGE_SIZE/2, PAGE_SIZE, specs);


        //Now we get the rating from the first row
        StatsRow stat = respByRank.Results[0].Rows[0];
        ulong ulRating  = stat.Rating;

        //Do the test with rating
        StatsEnumResponse resp = SendEnumByRatingRequest(slot, views, ulRating, PAGE_SIZE, specs);

        //We expect the same result as the Enum_EndOfLbByRank test
        Assert.AreEqual(resp.Results.Length, 1);
        Assert.AreEqual(resp.Results[0].Rows.Length, PAGE_SIZE/2 + 1);
        for (int i=0;i<resp.Results[0].Rows.Length;i++)
        {
            Assert.AreEqual(resp.Results[0].Rows[i].Rank, users.Count - (resp.Results[0].Rows.Length - 1) + i);
        }
    }


    [TestCase]
    public void Enum_EmptyLb()
    {
        ArrayList users   = DvtUtil.GenerateUsers(10);
        ArrayList values  = DvtUtil.GenerateValues(10, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList columns = DvtUtil.GenerateColumnIds(10, 1, 1);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        StatsEnumResponse resp = SendEnumByRankRequest(slot, 1, 1, specs);

        Assert.AreEqual(resp.Results.Length, 1);
        Assert.AreEqual(resp.Results[0].ViewSize, 0);
        Assert.AreEqual(resp.Results[0].Rows.Length, 0);
    }

    [TestCase]
    public void Enum_SingleUser()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList values  = DvtUtil.GenerateValues(10, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList columns = DvtUtil.GenerateColumnIds(10, 1, 1);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        StatsEnumResponse resp = SendEnumByRankRequest(slot, 1, 1, specs);

        Assert.AreEqual(resp.Results.Length, 1);
        Assert.AreEqual(resp.Results[0].ViewSize, 1);
        Assert.AreEqual(resp.Results[0].Rows.Length, 1);
    }



    [TestCase]
    public void Enum_FamilyTitle()
    {
        ArrayList users   = DvtUtil.GenerateUsers(2);
        ArrayList columns = DvtUtil.GenerateColumnIds(2, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(2, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];


        // Create the leaderboard and populate with default values
        // This implicitly tests replace
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        StatsSpec spec = GenerateSpec(1, columns);
        StatsSpec[] specs = new StatsSpec[] {spec};

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID + 1;            // some other title id in the same family
        slot.userPuid0 = (ulong) users[0];

        StatsEnumResponse resp;

        Console.WriteLine("Enumerate by user");
        resp = SendEnumByUserRequest(slot, (ulong)users[0], PAGE_SIZE, specs);

        Console.WriteLine("Enumerate by rank");
        resp = SendEnumByRankRequest(slot, 1, PAGE_SIZE, specs);

        Console.WriteLine("Enumerate by rating");
        resp = SendEnumByRatingRequest(slot, new View[] {view}, 1, PAGE_SIZE, specs);

    }

    [TestCase]
    public void Read_FamilyTitle()
    {
        ArrayList users   = DvtUtil.GenerateUsers(2);
        ArrayList columns = DvtUtil.GenerateColumnIds(2, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(2, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];


        // Create the leaderboard and populate with default values
        // This implicitly tests replace
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED);

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID + 1;            // some other title id in the same family
        slot.userPuid0 = (ulong) users[0];

        Console.WriteLine("Get results of replace");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values, RATING_SEED, false);
        }
    }


    [TestCase]
    public void StatPost_ReadDupeAttrib()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList values  = DvtUtil.GenerateValues(2, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[1];

        // Create the leaderboard and populate with values
        View view = new View(1, 0);
        view.Create();

        ArrayList columns = new ArrayList();
        columns.Add((ushort)2);
        columns.Add((ushort)1);

        view.LoadValues(users, slot, columns, values, RATING_SEED);

        // add a dupe column
        columns.Add(columns[0]);
        specs[0] = GenerateSpec((uint)1, columns);

        values.Add(values[0]);


        Console.WriteLine("Enumerate by rank {0}", 1);
        StatsEnumResponse resp = SendEnumByRankRequest(slot, 1, PAGE_SIZE, specs);

        ArrayList expUsers = new ArrayList();
        expUsers.Add(users[0]);

        CompareResults(resp.Results[0], users.Count, 0, expUsers, view.Columns, values, 0, true);

        Console.WriteLine("Read", 1);
        StatsReadResponse readResp = view.GetCurrentValues(slot, users, columns);

        CompareResults(readResp.Results[0], users, view.Columns, values);

    }

    [TestCase]
    public void StatPost_ReadNonUser()
    {
        ArrayList users   = DvtUtil.GenerateUsers(1);
        ArrayList columns = DvtUtil.GenerateColumnIds(1, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(1, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[1];

        // Create the leaderboard and populate with values
        View view = new View(1, 0);
        view.Create();

        view.LoadValues(users, slot, columns, values, RATING_SEED);

        // add another user that doesn't exist on the leaderboard
        users.Add((ulong)users[0] + 1);

        StatsReadResponse readResp = view.GetCurrentValues(slot, users, columns);
        Assert.AreEqual(readResp.Results.Length, 1);

        Assert.AreEqual(readResp.Results[0].Rows.Length, users.Count);
        Assert.AreEqual(readResp.Results[0].Rows[0].Puid, (ulong)users[0]);
        Assert.AreEqual(readResp.Results[0].Rows[0].Columns[0].Data, values[0]);

        Assert.AreEqual(readResp.Results[0].Rows[1].Puid, (ulong)users[1]);
        Assert.AreEqual(readResp.Results[0].Rows[1].Columns[0].Type, StatParam.Null);

    }

    #endregion

    #region Team tests

    [TestCase]
    public void StatPost_TeamReplace()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        TeamTickets teamTickets = GenerateTeamTickets(users);

        // Create the leaderboard and populate with default values
        // This implicitly tests replace
        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED, teamTickets);

        Console.WriteLine("Get results of replace");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, values, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_TeamAdd()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList addValues = DvtUtil.GenerateValues(MAX_COLUMNS, 25, 25, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        TeamTickets teamTickets = GenerateTeamTickets(users);

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED, teamTickets);

        Console.WriteLine("Increment values using ADD operator");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Add, columns, addValues));
        }

        SendPostRequest(users, operators, teamTickets);

        Console.WriteLine("Get results of add");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.AddValueArrays(values, addValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_TeamMin()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList minValues = DvtUtil.GenerateValues(MAX_COLUMNS, 50, 15, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        TeamTickets teamTickets = GenerateTeamTickets(users);

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED, teamTickets);

        Console.WriteLine("Get min value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, minValues));
        }

        SendPostRequest(users, operators, teamTickets);

        Console.WriteLine("Get results of min operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.MinValueArrays(values, minValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    [TestCase]
    public void StatPost_TeamMax()
    {
        ArrayList users     = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList columns   = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
        ArrayList values    = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);
        ArrayList maxValues = DvtUtil.GenerateValues(MAX_COLUMNS, 50, 15, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        TeamTickets teamTickets = GenerateTeamTickets(users);

        View view = new View(1, 0);
        view.Create();
        view.LoadValues(users, slot, columns, values, RATING_SEED, teamTickets);

        Console.WriteLine("Get max value");

        ArrayList operators  = new ArrayList();
        operators.Clear();

        foreach (UInt64 userid in users)
        {
            operators.Add(GenerateOp((ulong) userid, 1, 0, StatPostProcedure.Min, columns, maxValues));
        }

        SendPostRequest(users, operators, teamTickets);

        Console.WriteLine("Get results of max operation");
        StatsReadResponse resp = view.GetCurrentValues(slot, users, columns);

        Console.WriteLine("Verify returned values");
        Assert.AreEqual(resp.ResultsCount, 1);

        ArrayList newValues = DvtUtil.MinValueArrays(values, maxValues);
        foreach (StatsResultSet result in resp.Results)
        {
            CompareResults(result, users, columns, newValues, RATING_SEED, false);
        }
    }

    #endregion

    #region MuSigma tests

    [TestCase]
    public void StatPost_MuSigma_2Player()
    {
        RunMuSigmaTest(2, 2, 10, 1000, -500);
    }

    [TestCase]
    public void StatPost_MuSigma_4Players()
    {
        RunMuSigmaTest(4, 4, 10, 1000, -500);
    }

    [TestCase]
    public void StatPost_MuSigma_8Players()
    {
        RunMuSigmaTest(8, 8, 10, 1000, -100);
    }

    [TestCase]
    public void StatPost_MuSigma_16Players()
    {
        RunMuSigmaTest(16, 16, 20, 16, -1);
    }

    [TestCase]
    public void StatPost_MuSigma_64Players()
    {
        RunMuSigmaTest(64, 64, 10, 1000, -10);
    }

    [TestCase]
    public void StatPost_MuSigma_2Player_Tie()
    {
        RunMuSigmaTest(2, 2, 10, 1000, 0);
    }

    [TestCase]
    public void StatPost_MuSigma_64Players_Tie()
    {
        RunMuSigmaTest(64, 64, 10, 1000, 0);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_2Player()
    {
        RunMuSigmaTest(2, 2, 10, 1000, -500, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_4Players()
    {
        RunMuSigmaTest(4, 4, 10, 1000, -500, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_8Players()
    {
        RunMuSigmaTest(8, 8, 10, 1000, -100, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_16Players()
    {
        RunMuSigmaTest(16, 16, 20, 16, -1, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_62Players()
    {
        RunMuSigmaTest(62, 62, 10, 1000, -10, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_62Players_SendingAllNULLOVERRIDES()
    {
        RunMuSigmaTest(62, 62, 10, 1000, -10, 2);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_62Players_BigDrawProbability()
    {
        try
        {
            RunMuSigmaTest(62, 62, 10, 1000, -10, 3);
            throw new Exception("Not supposed to Pass - Exception");
        }
        catch
        {
            //can verify the return code
        }
    }

    [TestCase]
    public void StatPost_MuSigmaEx_2Player_Tie()
    {
        RunMuSigmaTest(2, 2, 10, 1000, 0, 1);
    }

    [TestCase]
    public void StatPost_MuSigmaEx_62Players_Tie()
    {
        RunMuSigmaTest(62, 62, 10, 1000, 0, 1);
    }


    [TestCase]
    public void StatPost_MuSigma_Permissions()
    {
        // test to validate users can write to others
        // entries for musigma ops


        ArrayList users   = DvtUtil.GenerateUsers(8);
        // TODO: divide up the players into teams
        ArrayList teams   = DvtUtil.GenerateValues(users.Count, (int) 1, (int) 1);
        ArrayList scores  = DvtUtil.GenerateValues(users.Count, (int) 1, (int) 1);

        DbLeaderboard.Reset();


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        // Create the leaderboards
        View rankedView = new View(unchecked((int)StatLbIdParser.SkillTypeRanked), 0);
        rankedView.Create();

        View standardView = new View(unchecked((int)StatLbIdParser.SkillTypeStandard), 0);
        standardView.Create();

        // Write to non-ranked
        Console.WriteLine("Attempting to write to non-ranked lb");
        ArrayList operators  = new ArrayList();
        operators.Clear();
        operators.Add(GenerateMuSigmaOp(standardView.ViewId, 0, users, teams, scores));

        StatsPostResponse resp;

        uint hr = StatPost(users, operators, null, false, out resp);
        Assert.AreEqual(hr, HResult.S_OK);

        // Write to ranked (failure expected)
        Console.WriteLine("Attempting to write to ranked lb");
        operators.Clear();
        operators.Add(GenerateMuSigmaOp(rankedView.ViewId, 0, users, teams, scores));

        hr = StatPost(users, operators, null, false, out resp);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


    }

    #endregion

    #region Common test routines

    protected void RunMuSigmaTest(int userCount, int teamCount, int gameCount, int seed, int step)
    {
        RunMuSigmaTest(userCount, teamCount, gameCount, seed, step, 0);
    }


    /// <summary>
    /// RunMuSigmaTest
    /// </summary>
    /// <param name="userCount">Count of users in the game</param>
    /// <param name="teamCount">Count of teams in the game</param>
    /// <param name="gameCount">Count of games to play</param>
    /// <param name="seed">Score seed value</param>
    /// <param name="step">Amount to change score for each user</param>
    /// <remakrs>
    /// Generates a game with the specified number of users divided into
    /// the number of teams.  The game is repeated by the specified number of times.
    /// Scores are built from the seed and step values.
    /// </remarks>
    protected void RunMuSigmaTest(int userCount, int teamCount, int gameCount, int seed, int step, int nOperatorGenerator)
    {
        ArrayList users   = DvtUtil.GenerateUsers(userCount);
        // TODO: divide up the players into teams
        ArrayList teams   = DvtUtil.GenerateValues(userCount, (int) 1, (int) 1);
        ArrayList scores  = DvtUtil.GenerateValues(userCount, (int) seed, (int) step);
        ArrayList columns = DvtUtil.GenerateColumnIds(1, 1, 1);
        ArrayList columnsToRead = DvtUtil.GenerateColumnIds(1, 1, 1);
        columnsToRead.Add(SpecialAttrib.Skill);
        columnsToRead.Add(SpecialAttrib.GamesPlayed);
        columnsToRead.Add(SpecialAttrib.Mu);
        columnsToRead.Add(SpecialAttrib.Sigma);

        const int MUSIGMA_LBID = unchecked((int)0xffff0000);

        DbLeaderboard.Reset();

        StatsReadResponse resp = null;

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        // Create the leaderboard
        View view = new View(MUSIGMA_LBID, 0);
        view.Create();

        // Simulate a game session
        Console.WriteLine("Simulate ranked game");
        ArrayList operators  = new ArrayList();
        operators.Clear();

        switch (nOperatorGenerator)
        {
            case 0:
                operators.Add(GenerateMuSigmaOp(MUSIGMA_LBID , 0, users, teams, scores));
                break;
            case 1:
                operators.Add(GenerateMuSigmaOpEx(MUSIGMA_LBID , 0, users, teams, scores));
                break;
            case 2:
                operators.Add(GenerateMuSigmaOpExNULL(MUSIGMA_LBID , 0, users, teams, scores));
                break;
            case 3:
                operators.Add(GenerateMuSigmaOpExLargeDrawProbability(MUSIGMA_LBID , 0, users, teams, scores));
                break;
            default:
                break;
        }

        //generate Max Procedures
        for (int i = 0; i < users.Count; i++)
        {
            ArrayList score = new ArrayList();
            score.Add(scores[i]);
            operators.Add(GenerateOp((ulong) users[i], MUSIGMA_LBID, 0, StatPostProcedure.Max, columns, score));
        }

        // Simulate playing games with same results each time
        for (int i = 0; i < gameCount; i++)
        {
            Console.WriteLine("Send game results for game {0}", i);
            SendPostRequest(users, operators, null);

            Console.WriteLine("Verify results for game {0}", i);
            resp = view.GetCurrentValues(slot, users, columnsToRead);
            Assert.AreEqual(resp.ResultsCount, 1);

            foreach (StatsResultSet result in resp.Results)
            {
                PrintResults(result, true, true);
                CompareMuSigmaResults(result, i+1, 0, scores);
            }
        }

    }

    #endregion


    #region StatsThrottling

    //For Xenon use the default the value
    //For XBox do not use the default value
    [TestCase]
    public void StatDefaultThrottlingXenonVsXbox()
    {
        ArrayList users   = DvtUtil.GenerateUsers(MAX_USERS);
        ArrayList values  = DvtUtil.GenerateValues(MAX_COLUMNS, 100, 10, DvtUtil.ValueTypes.All);

        DbLeaderboard.Reset();

        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = (ulong) users[0];

        View[] views = new View[1];
        StatsSpec[] specs = new StatsSpec[views.Length];

        // Create the leaderboard and populate with values
        for (int i = 0; i < views.Length; i++)
        {
            views[i] = new View(i+1, 0);
            views[i].Create();

            ArrayList columns = DvtUtil.GenerateColumnIds(MAX_COLUMNS, 1, 1);
            views[i].LoadValues(users, slot, columns, values, RATING_SEED);

            specs[i] = GenerateSpec((uint)i+1, columns);
        }

        slot.SetClientType(CSGInfo.ClientType.Xenon);

        StatsEnumResponse resp = SendEnumByRankRequest(slot, (ulong)users.Count - PAGE_SIZE/2, PAGE_SIZE, specs);

        slot.SetClientType(CSGInfo.ClientType.Xbox);

        resp = SendEnumByRankRequest(slot, (ulong)users.Count - PAGE_SIZE/2, PAGE_SIZE, specs);

        slot.SetClientType(CSGInfo.ClientType.XenonBackCompat);

        resp = SendEnumByRankRequest(slot, (ulong)users.Count - PAGE_SIZE/2, PAGE_SIZE, specs);

        //analyze response headers in the debugger _XDelay is not exposed
    }

    #endregion


    #region StatPost Dvt Util Methods

    protected class View
    {
        public int    ViewId;
        public byte   ResetType;
        public int    ColumnCount = 0;
        public ArrayList Columns = null;
        public int    MaxColumnSize = 0;
        public int    DecayDays = 0;
        public int    Top100 = 0;
        public string EloE = "E";
        public int    EloK = 0;
        public int    EloNew = 0;
        public string EloCTable = "";
        public bool   IsTeam = false;
        public bool   ReqArbitration = false;

        private   bool      _isCreated = false;

        public bool IsCreated
        {
            get { return _isCreated;}
        }

        public View(int ViewId, byte ResetType)
        {
            Init(ViewId, ResetType, 10000, 123456, 0, 0, "E", 0, 0, "", false, false);
        }

        public View(int ViewId, byte ResetType, int nMaxAttachmentCount)
        {
            Init(ViewId, ResetType, nMaxAttachmentCount, 123456, 0, 0, "E", 0, 0, "", false, false);
        }

        public View(int    ViewId,
                    byte   ResetType,
                    int    ColumnCount,
                    int    MaxColumnSize,
                    int    DecayDays,
                    int    Top100,
                    string EloE,
                    int    EloK,
                    int    EloNew,
                    string EloCTable,
                    bool   IsTeam,
                    bool   ReqArbitration)
        {
            Init(ViewId, ResetType, ColumnCount, MaxColumnSize, DecayDays, Top100, EloE, EloK, EloNew, EloCTable, IsTeam, ReqArbitration);
        }

        protected  void Init(int    ViewId,
                             byte   ResetType,
                             int    ColumnCount,
                             int    MaxColumnSize,
                             int    DecayDays,
                             int    Top100,
                             string EloE,
                             int    EloK,
                             int    EloNew,
                             string EloCTable,
                             bool   IsTeam,
                             bool   ReqArbitration)
        {
            this.ViewId         = ViewId;
            this.ResetType      = ResetType;
            this.ColumnCount    = ColumnCount;
            this.MaxColumnSize  = MaxColumnSize;
            this.DecayDays      = DecayDays;
            this.Top100         = Top100;
            this.EloE           = EloE;
            this.EloK           = EloK;
            this.EloNew         = EloNew;
            this.EloCTable      = EloCTable;
            this.IsTeam         = IsTeam;
            this.ReqArbitration = ReqArbitration;

            _isCreated = false;
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// Creates and initializes a leaderboard as described by the view properties
        /// </remarks>
        public void Create()
        {
            Console.WriteLine("Create leaderboard {0}", ViewId.ToString());
            DbLeaderboard.CreateLeaderboard(ViewId,
                                            ResetType,
                                            ColumnCount,
                                            MaxColumnSize,
                                            DecayDays,
                                            Top100,
                                            EloE,
                                            EloK,
                                            EloNew,
                                            EloCTable,
                                            IsTeam,
                                            ReqArbitration);

            _isCreated = true;
        }

        /// <summary>
        /// AddRatingId
        /// </summary>
        /// <param name="columns">List of column id's</param>
        /// <returns>New list of column id's</returns>
        /// <remarks>
        /// Adds a rating id to the list of columns in the front
        /// </remarks>
        public ArrayList AddRatingId(ArrayList columns)
        {
            ArrayList newColumns = new ArrayList(columns);
            newColumns.Insert(0, SpecialAttrib.Rating);
            return newColumns;
        }

        /// <summary>
        /// </summary>
        /// <param name="values">List of values</param>
        /// <returns>New list of values</values>
        /// <remarks>
        /// Adds a Int64 value to the front to represent a rating value
        /// </remarks>
        public ArrayList AddRatingValue(ArrayList values, long rating)
        {
            ArrayList newValues = new ArrayList(values);
            newValues.Insert(0, (Int64) (rating));
            return newValues;
        }

        /// <summary>
        /// LoadValues
        /// </summary>
        /// <param name="users">List of user id's to create records</param>
        /// <param name="slot">Fake SG slot</param>
        /// <param name="columns">Column ID's (statid)</param>
        /// <param name="values">Values to load</param>
        /// <remarks>
        /// Sets leaderboard columns to input values.
        /// </remarks>
        public StatsPostResponse LoadValues
            (
                ArrayList users,
                CSGInfo   slot,
                ArrayList columns,
                ArrayList values
            )
        {
            return LoadValues(users, slot, columns, values, 0, null);
        }

        /// <summary>
        /// LoadValues
        /// </summary>
        /// <param name="users">List of user id's to create records</param>
        /// <param name="slot">Fake SG slot</param>
        /// <param name="columns">Column ID's (statid)</param>
        /// <param name="values">Initial values to load</param>
        /// <param name="teamTickets">List of team tickets</param>
        /// <remarks>
        /// Sets leaderboard columns to input values.
        /// </remarks>
        public StatsPostResponse LoadValues
        (
            ArrayList   users,
            CSGInfo     slot,
            ArrayList   columns,
            ArrayList   values,
            TeamTickets teamTickets
        )
        {
            return LoadValues(users, slot, columns, values, 0, teamTickets);
        }

        /// <summary>
        /// LoadValues
        /// </summary>
        /// <param name="users">List of user id's to create records</param>
        /// <param name="slot">Fake SG slot</param>
        /// <param name="columns">Column ID's (statid)</param>
        /// <param name="values">Values to load</param>
        /// <param name="ratingSeed">Rating seed value</param>
        /// <remarks>
        /// Sets leaderboard columns to input values.
        /// Ratings are put in the rating column.
        /// </remarks>
        public StatsPostResponse LoadValues
            (
                ArrayList   users,
                CSGInfo     slot,
                ArrayList   columns,
                ArrayList   values,
                long        ratingSeed
            )
        {
            return LoadValues(users, slot, columns, values, ratingSeed, null);
        }

        /// <summary>
        /// LoadValues
        /// </summary>
        /// <param name="users">List of user id's to create records</param>
        /// <param name="slot">Fake SG slot</param>
        /// <param name="columns">Column ID's (statid)</param>
        /// <param name="values">Values to load</param>
        /// <param name="ratingSeed">Rating seed value</param>
        /// <param name="teamTickets">List of team tickets</param>
        /// <remarks>
        /// Sets leaderboard columns to input values.
        /// Ratings are put in the rating column.
        /// </remarks>
        public StatsPostResponse LoadValues
            (
                ArrayList   users,
                CSGInfo     slot,
                ArrayList   columns,
                ArrayList   values,
                long        ratingSeed,
                TeamTickets teamTickets
            )
        {
            if (_isCreated == false)
            {
                throw new Exception("Leaderboard has not been created.");
            }

            Console.WriteLine("Load values");

            ArrayList operators  = new ArrayList();
            operators.Clear();

            Columns = columns;

            ArrayList inputColumns = columns;

            if (ratingSeed > 0)
            {
                inputColumns = AddRatingId(columns);
            }

            for (int i = 0; i < users.Count; i++)
            {
                ArrayList inputValues  = values;

                if (ratingSeed > 0)
                {
                    inputColumns = AddRatingId(columns);
                    inputValues  = AddRatingValue(values, (long) (ratingSeed + i));
                }

                operators.Add(GenerateOp((ulong) users[i], ViewId, 0, StatPostProcedure.Replace, inputColumns, inputValues));
            }

            StatsPostResponse resp = SendPostRequest(users, operators, teamTickets);

            return resp;
        }

        /// <summary>
        /// GetCurrentValues
        /// </summary>
        /// <param name="slot">Fake SG slot</param>
        /// <param name="users">List of user id's to create records</param>
        /// <param name="columns">Column ID's (statid)</param>
        /// <returns>StatsReadResponse</returns>
        /// <remarks>
        /// Creates a query to get current values for specified column id's.
        /// </remarks>
        public StatsReadResponse GetCurrentValues(CSGInfo slot, ArrayList users, ArrayList columns)
        {
            ArrayList specs = new ArrayList();
            specs.Clear();
            StatsSpec spec = GenerateSpec((uint)ViewId, columns);
            specs.Add(spec);

            StatsReadResponse resp = SendReadRequest(slot, users, specs);

            return resp;
        }
    }

    /// <summary>
    /// GenerateTeamTickets
    /// </summary>
    /// <param name="users">List of user id's to separte into teams</param>
    /// <returns>TeamTickets</returns>
    /// <remarks>
    /// Splits a group of users into roughly equal sized teams.
    /// Generates a team ticket for each user/team.
    /// </remarks>
    protected static TeamTickets GenerateTeamTickets(ArrayList users)
    {
        ArrayList teamTickets = new ArrayList();

        // Split user list into teams
        int usersPerTeam = (int) (users.Count / MAX_TEAMS);
        ulong baseTeamId = 0xFE00000000000000;

        uint idx = 0;
        foreach (ulong userid in users)
        {
            idx++;
            teamTickets.Add(new TeamTicket(userid, baseTeamId + ((uint) ((idx * MAX_TEAMS) / users.Count))));
        }

        TeamTicket[] tickets = new TeamTicket[teamTickets.Count];
        teamTickets.CopyTo(tickets);
        return new TeamTickets(tickets);
    }

    /// <summary>
    /// GenerateOp
    /// </summary>
    /// <param name="userid">User PUID</param>
    /// <param name="viewid">View ID (leaderboard)</param>
    /// <param name="depends">Depends stack reference</param>
    /// <param name="proc">StatPostProcedure</param>
    /// <param name="columns">List of column id's</param>
    /// <param name="values">List of column values</param>
    /// <returns>StatsOperator</returns>
    /// <remarks>
    /// Generates a stats operator for the specified user id using the specified proc.
    /// Restricted to replace, last, min, and max.
    /// Schema is fixed to use all numeric types.
    /// </remarks>
    protected static StatsOperator GenerateOp(ulong userid, int viewid, int depends, ushort proc, ArrayList columns, ArrayList values)
    {
        ArrayList parameters = new ArrayList();

        parameters.Clear();
        // PUID
        parameters.Add(new StatsOperatorParameter(StatParam.Puid, userid));
        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        // Generate stat id sets
        for (int i = 0; i < columns.Count; i++)
        {
            // Only add parameters if they are not strings when not using replace
            if ((proc == StatPostProcedure.Replace) || (DvtUtil.GetStatParamType(values[i]) != StatParam.Utf8string))
            {
                // HACK: C# is a pain for converting UInt16 to Int16
                // Put into ushort (non-object) and use this to do the conversion later
                ushort columnId = (ushort) columns[i];

                parameters.Add(new StatsOperatorParameter(StatParam.Int16, unchecked((Int16) columnId)));
                parameters.Add(new StatsOperatorParameter(DvtUtil.GetStatParamType(values[i]), values[i]));
            }
        }

        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = proc;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }

    /// <summary>
    /// GenerateMuSigmaOp
    /// </summary>
    /// <param name="viewid">View ID (leaderboard)</param>
    /// <param name="depends">Depends stack reference</param>
    /// <param name="players">List of player puid's</param>
    /// <param name="teams">Team id for each player</param>
    /// <param name="scores">Each player's score</param>
    /// <returns>StatsOperator</returns>
    /// <remarks>
    /// Generates a stats operator for MuSigma ranking
    /// </remarks>
    protected static StatsOperator GenerateMuSigmaOp(int viewid, int depends, ArrayList players, ArrayList teams, ArrayList scores)
    {
        ArrayList parameters = new ArrayList();

        // Verify parameter counts match
        if ((players.Count != teams.Count) || (players.Count != scores.Count))
        {
            throw new Exception("MuSigma requires an equal number of Players, teams, and scores");
        }

        parameters.Clear();
        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        // Generate game info for MuSigma
        for (int i = 0; i < players.Count; i++)
        {
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, teams[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, scores[i]));
        }

        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = StatPostProcedure.MuSigma;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }
    
    protected static StatsOperator GenerateMuSigmaOpEx(int viewid, int depends, ArrayList players, ArrayList teams, ArrayList scores)
    {
        ArrayList parameters = new ArrayList();

        // Verify parameter counts match
        if ((players.Count != teams.Count) || (players.Count != scores.Count))
        {
            throw new Exception("MuSigma requires an equal number of Players, teams, and scores");
        }

        parameters.Clear();
        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        //BETA - TAU - DRAWPROBABILITY
        parameters.Add(new StatsOperatorParameter(StatParam.Float, (double) xonline.server.stats.common.StatPostMuSigmaBase.BETA));//(double)6.0));//
        parameters.Add(new StatsOperatorParameter(StatParam.Float, (double) xonline.server.stats.common.StatPostMuSigmaBase.TAU));
        parameters.Add(new StatsOperatorParameter(StatParam.Float, (double) 0.25));
        
        // Generate game info for MuSigma
        for (int i = 0; i < players.Count; i++)
        {
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, teams[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, scores[i]));
            
            parameters.Add(GenerateStructForOverrides(90, 87)); 
        }

        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = StatPostProcedure.MuSigmaEx;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }


    protected static StatsOperatorParameter GenerateStructForOverrides(Int16 partialPlayPercentage, Int16 skillLearningFactor)
    {
        UInt64 flags         = (UInt64)(StatPostMuSigmaEx.c_playerSkillFlagPartialPlaySet | StatPostMuSigmaEx.c_playerSkillFlagLearningSet);
        UInt64 partialPlay   = (UInt64) partialPlayPercentage;
        UInt64 skillLearning = (UInt64) skillLearningFactor;
        
        UInt64 val = 0;

        val = flags          << StatPostMuSigmaEx.c_playerSkillFlagsShift;
        val = (partialPlay   << StatPostMuSigmaEx.c_playerSkillPartialPlayShift)   | val;
        val = (skillLearning << StatPostMuSigmaEx.c_playerSkillLearningShift)      | val;

        return new StatsOperatorParameter(StatParam.Int64, (Int64)val);
    }

    protected static StatsOperator GenerateMuSigmaOpExNULL(int viewid, int depends, ArrayList players, ArrayList teams, ArrayList scores)
    {
        ArrayList parameters = new ArrayList();

        // Verify parameter counts match
        if ((players.Count != teams.Count) || (players.Count != scores.Count))
        {
            throw new Exception("MuSigma requires an equal number of Players, teams, and scores");
        }

        parameters.Clear();
        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        //BETA - TAU - DRAWPROBABILITY
        parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        
        // Generate game info for MuSigma
        for (int i = 0; i < players.Count; i++)
        {
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, teams[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, scores[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        }

        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = StatPostProcedure.MuSigmaEx;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }

    protected static StatsOperator GenerateMuSigmaOpExLargeDrawProbability(int viewid, int depends, ArrayList players, ArrayList teams, ArrayList scores)
    {
        ArrayList parameters = new ArrayList();

        // Verify parameter counts match
        if ((players.Count != teams.Count) || (players.Count != scores.Count))
        {
            throw new Exception("MuSigma requires an equal number of Players, teams, and scores");
        }

        parameters.Clear();
        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        //BETA - TAU - DRAWPROBABILITY
        parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        parameters.Add(new StatsOperatorParameter(StatParam.Float, (double)0.9));
        
        // Generate game info for MuSigma
        for (int i = 0; i < players.Count; i++)
        {
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, teams[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Int32, scores[i]));
            parameters.Add(new StatsOperatorParameter(StatParam.Null, null));
        }

        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = StatPostProcedure.MuSigmaEx;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }


    protected static StatsOperator GenerateEloOp(int viewid, int depends, ArrayList players, ArrayList teams, double winnerScore, double c1, double c2)
    {
        ArrayList parameters = new ArrayList();

        // Verify parameter counts match
        if (teams != null && players.Count != teams.Count)
        {
            throw new Exception("MuSigma requires an equal number of Players, teams, and scores");
        }

        Assert.AreEqual(players.Count, 2);

        if (teams == null)
        {
            // puid 1
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[0]));

            // puid 2
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, players[1]));
        }
        else
        {
            // puid 1
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, teams[0]));

            // puid 2
            parameters.Add(new StatsOperatorParameter(StatParam.Puid, teams[1]));
        }


        // ViewID
        parameters.Add(new StatsOperatorParameter(StatParam.Int32, (Int32) viewid));
        // Depends
        parameters.Add(new StatsOperatorParameter(StatParam.Int16, (Int16) depends));

        // score
        parameters.Add(new StatsOperatorParameter(StatParam.Float, winnerScore));
        // c1
        parameters.Add(new StatsOperatorParameter(StatParam.Float, c1));
        // c2
        parameters.Add(new StatsOperatorParameter(StatParam.Float, c2));


        // Setup operation
        StatsOperator op = new StatsOperator();
        op.OperatorId = StatPostProcedure.Elo;
        op.Parameters = new StatsOperatorParameter[parameters.Count];
        parameters.CopyTo(op.Parameters);

        return op;
    }




    /// <summary>
    /// GenerateSpec
    /// </summary>
    /// <param name="viewid">View ID (leaderboard)</param>
    /// <param name="columns">List of column id's</param>
    /// <returns>StatsSpec</returns>
    /// <remarks>
    /// Generates a stats spec for the requested columns
    /// </remarks>
    protected static StatsSpec GenerateSpec(uint viewid, ArrayList columns)
    {
        ushort[] columnIds = new ushort[(columns == null ? 0 : columns.Count)];
        if (columns != null)
            columns.CopyTo(columnIds);


        StatsSpec spec = new StatsSpec();
        spec.ViewId    = viewid;
        spec.ColumnIds = columnIds;
        return spec;
    }

    /// <summary>
    /// CompareResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="users">List of users in order expected to be returned</param>
    /// <param name="columns">List of column id's</param>
    /// <param name="values">List of expected values</param>
    /// <remarks>
    /// Compares each row with the user id and expected result columns.
    /// </remarks>
    protected static void CompareResults
    (
        StatsResultSet results,
        ArrayList      users,
        ArrayList      columns,
        ArrayList      values
    )
    {
        CompareResults(results, users.Count, 0, users, columns, values, 0, false);
    }

    /// <summary>
    /// CompareResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="users">List of users in order expected to be returned</param>
    /// <param name="columns">List of column id's</param>
    /// <param name="values">List of expected values</param>
    /// <param name="ratingSeed">Seed value for generating ratings</param>
    /// <param name="isRatingDesc">Does rating value descend or ascend?</param>
    /// <remarks>
    /// Compares each row with the user id and expected result columns.
    /// </remarks>
    protected static void CompareResults
    (
        StatsResultSet results,
        ArrayList      users,
        ArrayList      columns,
        ArrayList      values,
        long           ratingSeed,
        bool           isRatingDesc
    )
    {
        CompareResults(results, users.Count, 0, users, columns, values, ratingSeed, isRatingDesc);
    }

    /// <summary>
    /// CompareResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="index">Index of starting point in users</param>
    /// <param name="users">List of users in order expected to be returned</param>
    /// <param name="columns">List of column id's</param>
    /// <param name="values">List of expected values</param>
    /// <remarks>
    /// Compares each row with the user id and expected result columns.
    /// </remarks>
    protected static void CompareResults
    (
        StatsResultSet results,
        int            index,
        ArrayList      users,
        ArrayList      columns,
        ArrayList      values
    )
    {
        CompareResults(results, users.Count, index, users, columns, values, 0, false);
    }

    /// <summary>
    /// CompareResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="index">Index of starting point in users</param>
    /// <param name="users">List of users in order expected to be returned</param>
    /// <param name="columns">List of column id's</param>
    /// <param name="values">List of expected values</param>
    /// <param name="ratingSeed">Seed value for generating ratings</param>
    /// <param name="isRatingDesc">Does rating value descend or ascend?</param>
    /// <remarks>
    /// Compares each row with the user id and expected result columns.
    /// </remarks>
    protected static void CompareResults
    (
        StatsResultSet results,
        int            viewCount,
        int            index,
        ArrayList      users,
        ArrayList      columns,
        ArrayList      values,
        long           ratingSeed,
        bool           isRatingDesc
    )
    {
        //Assert.AreEqual(results.ViewSize, viewCount);
        Assert.AreEqual(results.RowCount, users.Count - index);

        for (int iRow = 0; iRow < results.RowCount; iRow++)
        {
            StatsRow row    = results.Rows[iRow];

            Assert.AreEqual(row.Puid, (UInt64) users[iRow + index]);
            Assert.IsTrue(row.ColumnCount >= (uint) values.Count);

            if (ratingSeed > 0)
            {
                if (isRatingDesc)
                {
                    Assert.AreEqual(row.Rating, (UInt64) (ratingSeed - iRow));
                }
                else
                {
                    Assert.AreEqual(row.Rating, (UInt64) (ratingSeed + iRow));
                }
            }

            for (int iCol = 0; iCol < row.ColumnCount; iCol++)
            {
                StatsColumn col = row.Columns[iCol];

                if (columns.Contains(row.Columns[iCol].ColumnId))
                {
                    Assert.AreEqual(col.ColumnId, (ushort) columns[iCol], " for column " + col.ColumnId);
                    Assert.AreEqual(col.Type, DvtUtil.GetStatParamType(values[iCol]), " for column " + col.ColumnId);
                    Assert.AreEqual(col.Data, values[iCol], " for column " + col.ColumnId);
                }
                else
                {
                    Assert.AreEqual(col.Type, StatParam.Null);
                }
            }
        }
    }

    /// <summary>
    /// CompareMuSigmaResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="index">Index of starting point in users</param>
    /// <param name="scores">List of expected scores</param>
    /// <remarks>
    /// Verifies that the order returned is correct.  The score list is sorted and used to verify that
    /// the scores are ranked properly.
    /// </remarks>
    protected static void CompareMuSigmaResults(StatsResultSet results, int game, int index, ArrayList scores)
    {
        Assert.AreEqual(results.RowCount, scores.Count - index);

        ArrayList sortedScores = (ArrayList) scores.Clone();
        sortedScores.Sort();

        for (int i = 0; i < results.RowCount; i++)
        {
            StatsRow    row = results.Rows[i];
            StatsColumn col = row.Columns[0];
            Assert.AreEqual(col.Data, scores[i]);

            for (int j = 0; j < row.Columns.Length; j++)
            {
                if (row.Columns[j].ColumnId == SpecialAttrib.GamesPlayed)
                {
                    Assert.AreEqual((long)row.Columns[j].Data, (long)game);
                }
                if (row.Columns[j].ColumnId == SpecialAttrib.Skill)
                {
                    Assert.IsTrue((long)row.Columns[j].Data >= 1, "Skill " + (long)row.Columns[j].Data + " out of range!");
                    Assert.IsTrue((long)row.Columns[j].Data <= 50, "Skill " + (long)row.Columns[j].Data + " out of range!");
                }

            }
        }
    }

    /// <summary>
    /// PrintResults
    /// </summary>
    /// <param name="results">Result set from read request</param>
    /// <param name="fColumns">Display data columns</param>
    /// <param name="fMuSigma">Display rating as Mu and Sigma</param>
    /// <remarks>
    /// Prints results to console
    /// </remarks>
    protected static void PrintResults(StatsResultSet results, bool fColumns, bool fMuSigma)
    {
        StringBuilder strb = new StringBuilder();

        for (int iRow = 0; iRow < results.RowCount; iRow++)
        {
            StatsRow row = results.Rows[iRow];

            if (iRow == 0)
            {
                // Display header row
                strb.Append(String.Format("\n{0,20} {1,5} {2,20} ", "PUID", "RANK", "RATING"));

                if (fColumns == true)
                {
                    for (int i = 0; i < row.ColumnCount; i++)
                    {
                        if (fMuSigma && row.Columns[i].ColumnId == SpecialAttrib.GamesPlayed)
                        {
                            strb.Append(String.Format("{0,20} ", "GAMES PLAYED"));
                        }
                        else if (fMuSigma && row.Columns[i].ColumnId == SpecialAttrib.Skill)
                        {
                            strb.Append(String.Format("{0,20} ", "SKILL"));
                        }
                        else if (fMuSigma && row.Columns[i].ColumnId == SpecialAttrib.Mu)
                        {
                            strb.Append(String.Format("{0,20} ", "MU"));
                        }
                        else if (fMuSigma && row.Columns[i].ColumnId == SpecialAttrib.Sigma)
                        {
                            strb.Append(String.Format("{0,20} ", "SIGMA"));
                        }
                        else
                        {
                            strb.Append(String.Format("{0,20} ", row.Columns[i].ColumnId));
                        }

                    }
                }

                strb.Append(String.Format("\n"));
            }

            strb.Append(String.Format("{0,20} {1,5} {2,20} ", row.Puid, row.Rank, (long)row.Rating));

            if (fColumns == true)
            {
                for (int iCol = 0; iCol < row.ColumnCount; iCol++)
                {
                    StatsColumn col = row.Columns[iCol];
                    strb.Append(String.Format("{0,20} ", col.Data));
                }
            }

            strb.Append("\n");
        }

        Console.WriteLine(strb.ToString());
    }

    /// <summary>
    /// SendPostRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="operators">List of stat post operators</param>
    /// <returns>StatPostResponse</returns>
    /// <remarks>
    /// Constructs StatsPostRequest and sends StatOperators
    /// </remarks>
    protected static StatsPostResponse SendPostRequest(ArrayList users, ArrayList operators)
    {
        return SendPostRequest(users, operators, null);
    }

    /// <summary>
    /// SendPostRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="operators">List of stat post operators</param>
    /// <param name="teamTickets">List of team tickets</param>
    /// <returns>StatPostResponse</returns>
    /// <remarks>
    /// Constructs StatsPostRequest and sends StatOperators
    /// </remarks>
    protected static StatsPostResponse SendPostRequest(ArrayList users, ArrayList operators, TeamTickets teamTickets)
    {
        return SendPostRequest(users, operators, teamTickets, true);
    }

    protected static StatsPostResponse SendPostRequest(ArrayList users, ArrayList operators, TeamTickets teamTickets, bool useInternalPort)
    {
        StatsPostResponse resp;
        uint hr;

        hr = StatPost(users, operators, teamTickets, useInternalPort, out resp);
        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }

    static uint StatPost(ArrayList users, ArrayList operators, TeamTickets teamTickets, bool useInternalPort, out StatsPostResponse resp)
    {
        uint hr;

        StatsPostRequest req = new StatsPostRequest();
        req.TitleId = TITLE_ID;
        req.Operators = new StatsOperator[operators.Count];
        operators.CopyTo(req.Operators);
        req.TeamTickets = teamTickets;

        resp = new StatsPostResponse();

        XUIDAndTrust[] xuids = new XUIDAndTrust[users.Count];
        for (int i = 0; i < xuids.Length; i++)
        {
            xuids[i] = new XUIDAndTrust((ulong)users[i], 0, 0);
        }

        Console.WriteLine("Send StatsPostRequest");
        if (useInternalPort)
        {
            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
            xrlreq.RequestOb = req;
            xrlreq.ResponseOb = resp;
            xrlreq.Path = req.GetXRL();
            xrlreq.AuthData = new HTTPAuthData(0, 0, 0, (ulong)users[0], TITLE_ID, 0, 0).GetBase64EncodedString();
            xrlreq.RequestHeaders.Add(XHttpHdr.BUNDLEDAUTHDATA, new BundledAuthData(TITLE_ID, xuids).GetBase64EncodedString());

            hr = xrlreq.Send();
        }
        else
        {
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            slot.titleId = TITLE_ID;
            slot.userPuid0 = (ulong)users[0];

            XRLObject2 xrlo = (XRLObject2)resp;

            hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);
        }

        return hr;
    }

    /// <summary>
    /// SendReadRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="users">List of user id's</param>
    /// <param name="specs">List of query specs</param>
    /// <returns>StatReadResponse</returns>
    /// <remarks>
    /// Constructs StatsReadRequest and execute
    /// </remarks>
    protected static StatsReadResponse SendReadRequest(CSGInfo slot, ArrayList users, ArrayList specs)
    {
        uint hr;

        StatsReadRequest req = new StatsReadRequest();
        req.TitleId = TITLE_ID;

        req.Users = new ulong[users.Count];
        users.CopyTo(req.Users);

        req.Specs = new StatsSpec[specs.Count];
        specs.CopyTo(req.Specs);

        StatsReadResponse resp = new StatsReadResponse();
        XRLObject2 xrlo = (XRLObject2) resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }

    /// <summary>
    /// SendEnumByUserRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="userId">User id for enum</param>
    /// <param name="pageSize">Count of rows to enumerate</param>
    /// <param name="spec">Query spec</param>
    /// <returns>StatEnumResponse</returns>
    /// <remarks>
    /// Constructs StatsEnumByUserRequest and execute
    /// </remarks>
    protected static StatsEnumResponse SendEnumByUserRequest(CSGInfo slot, ulong userId, uint pageSize, StatsSpec[] specs)
    {
        uint hr;

        StatsEnumByUserRequest req = new StatsEnumByUserRequest();
        req.TitleId  = TITLE_ID;
        req.PageSize = pageSize;
        req.UserId   = userId;
        req.Specs    = specs;

        StatsEnumResponse resp = new StatsEnumResponse();
        XRLObject2 xrlo = (XRLObject2) resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }

    /// <summary>
    /// SendEnumByRankRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="rank">Starting rank for enum</param>
    /// <param name="pageSize">Count of rows to enumerate</param>
    /// <param name="spec">Query spec</param>
    /// <returns>StatEnumResponse</returns>
    /// <remarks>
    /// Constructs StatsEnumByUserRequest and execute
    /// </remarks>
    protected static StatsEnumResponse SendEnumByRankRequest(CSGInfo slot, ulong rank, uint pageSize, StatsSpec[] specs)
    {
        uint hr;

        StatsEnumByRankRequest req = new StatsEnumByRankRequest();
        req.TitleId  = TITLE_ID;
        req.PageSize = pageSize;
        req.Rank     = rank;
        req.Specs    = specs;

        StatsEnumResponse resp = new StatsEnumResponse();
        XRLObject2 xrlo = (XRLObject2) resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }

    /// <summary>
    /// SendEnumByRatingRequest
    /// </summary>
    /// <param name="slot">Fake SG slot</param>
    /// <param name="rating">Starting rating for enum</param>
    /// <param name="pageSize">Count of rows to enumerate</param>
    /// <param name="spec">Query spec</param>
    /// <returns>StatEnumResponse</returns>
    /// <remarks>
    /// Constructs StatsEnumByUserRequest and execute
    /// </remarks>
    protected static StatsEnumResponse SendEnumByRatingRequest(CSGInfo slot, View[] views, ulong rating, uint pageSize, StatsSpec[] specs)
    {
        uint hr;

        StatsEnumByRatingRequest req = new StatsEnumByRatingRequest();
        req.TitleId  = TITLE_ID;
        req.PageSize = pageSize;
        req.Rating   = rating;
        req.Specs    = specs;

        StatsEnumResponse resp = new StatsEnumResponse();
        XRLObject2 xrlo = (XRLObject2) resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, req.GetXRL(), req, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        return resp;
    }


    #endregion

    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\Interface.cs ===
using System;
using System.IO;

namespace xonline.server.stats.test.tools
{
    interface IStatBinary
    {
        int    ReadValue(BinaryReader br);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\StatObject.cs ===
using System;
using System.IO;

namespace xonline.server.stats.test.tools
{
    public class StatsObject:IStatBinary
    {
        enum LbspType
        {
            LbspTypeIdInt8   = 0x01,
            LbspTypeIdInt16	 = 0x02,
            LbspTypeIdInt32	 = 0x03,
            LbspTypeIdInt64	 = 0x04,
            LbspTypeIdDouble = 0x05,
            LbspTypeIdString = 0x06,

            // Special types
            LbspTypeIdTypeMask     = 0x7F,
            LbspTypeIdNullFlag     = 0x80
        }

        Int16               m_statId;
        LbspType            m_bType;
        IStatBinary         m_Value;

        public int ReadValue(BinaryReader br)
        {
            int nCurrentByte = 0;
            m_statId  = br.ReadInt16();
            nCurrentByte +=2;

            m_bType   = (LbspType)br.ReadByte();
            nCurrentByte +=1;
    
            switch(m_bType)
            {
                case LbspType.LbspTypeIdInt8:
                    m_Value = new MyInteger8();
                    break;
                            
                case LbspType.LbspTypeIdInt16:
                    m_Value = new MyInteger16();
                    break;
                        
                case LbspType.LbspTypeIdInt32:
                    m_Value = new MyInteger32();
                    break;
                        
                case LbspType.LbspTypeIdInt64:
                    m_Value = new MyInteger64();
                    break;
                        
                case LbspType.LbspTypeIdDouble:
                    m_Value = new MyDouble();
                    break;
                        
                case LbspType.LbspTypeIdString:
                {
                    m_Value = new MyString();
                    break;
                }
                        
                default:
                    break;
            }

            nCurrentByte += m_Value.ReadValue(br);
            
            return nCurrentByte;
        }

        public override string ToString()
        {
            return string.Format("StatID: {0}\r\nType: {1}\r\nValue:{2}\r\n", ConvertStatId(m_statId), m_bType, m_Value.ToString());
        }

        protected string ConvertStatId(Int16 nStatID)
        {
            if ((UInt16)nStatID == 0xffff)
            {
                return "Rank"; //you should never see this in the DB - this should be dynamically computed inside the LBSVR
            }
            else if ((UInt16)nStatID == 0xfffe)
            {
                return "Rating";
            }
            else
            {
                return nStatID.ToString();
            }
        }
    }
    

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\StatNativeType.cs ===
using System;
using System.IO;

namespace xonline.server.stats.test.tools
{
    public class MyInteger8:IStatBinary
    {
        public byte m_byValue = 0;

        public int ReadValue(BinaryReader br)
        {
            m_byValue = br.ReadByte();
            return 1;
        }

        public override string ToString()
        {
            return string.Format("{0}", m_byValue);
        }
    }

    public class MyInteger16:IStatBinary
    {
        public Int16 m_nValue16 = 0;

        public int ReadValue(BinaryReader br)
        {
            m_nValue16 = br.ReadInt16();
            return 2;
        }

        public override string ToString()
        {
            return string.Format("{0}", m_nValue16);
        }
    }

    public class MyInteger32:IStatBinary
    {
        public Int32 m_nValue32 = 0;

        public int ReadValue(BinaryReader br)
        {
            m_nValue32 = br.ReadInt32();
            return 4;
        }

        public override string ToString()
        {
            return string.Format("{0}", m_nValue32);
        }
    }

    public class MyInteger64:IStatBinary
    {
        public Int64 m_nValue64 = 0;

        public int ReadValue(BinaryReader br)
        {
            m_nValue64 = br.ReadInt64();
            return 8;
        }

        public override string ToString()
        {
            return string.Format("{0}", m_nValue64);
        }
    }

    public class MyDouble:IStatBinary
    {
        public double m_doubleValue = 0;

        public int ReadValue(BinaryReader br)
        {
            m_doubleValue = br.ReadDouble();
            return 8;
        }

        public override string ToString()
        {
            return string.Format("{0}", m_doubleValue);
        }
    }

    //lets just do this as byte array first
    public class MyString:IStatBinary
    {
        public byte [] m_StringRawValue = null;

        public int ReadValue(BinaryReader br)
        {
            System.Int16 nStringlength = br.ReadInt16();
            m_StringRawValue = br.ReadBytes(nStringlength);

            return 2 + nStringlength;
        }

        public override string ToString()
        {
            System.Text.ASCIIEncoding encoder = new System.Text.ASCIIEncoding();
            return encoder.GetString(m_StringRawValue);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsdbreader_none_12.4.56.0_none_dd843c60b5a71cb3
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsdbreader
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.manifest
XP_MANIFEST_PATH=manifests\msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.cat
XP_CATALOG_PATH=manifests\msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.cat
XP_PAYLOAD_PATH=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsdbreader,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\StatDBBinaryreader.cs ===
using System;
using System.Collections;
using System.IO;

namespace xonline.server.stats.test.tools
{
    class StatDBBinaryReader
    {
        static void Usage()
        {
            Console.WriteLine("=============================================================================");
            Console.WriteLine("Usage:");
            Console.WriteLine("e.g. StatDbBinaryReader.exe -d 0x000004D204000000000000010004D204000000000000");
            Console.WriteLine("The hex value is the vb_data column from t_stats_leaderboard_data\r\n\r\n");

            Console.WriteLine("Note:: These Stat Types are currently not handled by this tool");
            Console.WriteLine("LbspTypeIdTypeMask   = 0x7F");
            Console.WriteLine("LbspTypeIdNullFlag   = 0x80");
            Console.WriteLine("=============================================================================");
        }

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {   
            string szBlob = null;
            try
            {
                for (int i=0;i<args.Length;i++)
                {
                    if (args[i].IndexOf("-d") != -1)
                    {
                        szBlob = args[i+1];
                    }
                }

                if (szBlob == null)
                {
                    Usage();
                }
                else
                {
                    byte [] arrByte = StatDBBinaryReader.GetByteFromString(szBlob);
                    if (arrByte == null)
                        throw new Exception("Unable to parse the Blob you Entered - Please verify");

                    MemoryStream ms = new MemoryStream(arrByte);
                    BinaryReader br = new BinaryReader(ms);
                    StatsObject [] arrStats = ParseBinary(br, arrByte.Length);

                    PrintStatObject(arrStats);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Usage();
            }
        }

        static void PrintStatObject(StatsObject [] arrStat)
        {
            Console.WriteLine("\r\n");
            for (int i=0;i<arrStat.Length;i++)
            {
                Console.WriteLine(arrStat[i].ToString());
            }
            Console.WriteLine("Success\r\n");
        }

        //e.g. of data 0x000004D204000000000000010004D204000000000000
        // ==> 00 (index 0),00 (index 1),04,D2,04 ...etc
        static byte [] GetByteFromString(string szData)
        {
            byte [] arrRet = null;
            if (szData.StartsWith("0x"))
            {
                szData = szData.Substring(2, szData.Length - 2);
            }

            if (szData.Length % 2 != 0)
                return null;

            arrRet = new byte[szData.Length / 2];

            string [] arrByteString = new string[arrRet.Length];
            for (int i=0;i<arrRet.Length;i++)
            {
                arrByteString[i] = szData.Substring(i*2, 2);
            }

            for (int i=0;i<arrRet.Length;i++)
            {
                arrRet[i] = System.Byte.Parse(arrByteString[i], System.Globalization.NumberStyles.HexNumber);
            }

            return arrRet;
        }

        static StatsObject [] ParseBinary(BinaryReader br, int nByteCount)
        {
            int       nCurrentByte  = 0;
            ArrayList list          = new ArrayList();
            try
            {
                while (nCurrentByte < nByteCount)
                {
                    StatsObject o = new StatsObject();
                    nCurrentByte += o.ReadValue(br);
                    list.Add(o);
                }
            }
            catch
            {
                throw;
            }

            return (StatsObject [])list.ToArray(typeof(StatsObject));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\StatDBBinaryReader\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_statsdbreader_none_12.4.56.0_none_dd843c60b5a71cb3
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=statsdbreader
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.manifest
XP_MANIFEST_PATH=manifests\msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.cat
XP_CATALOG_PATH=manifests\msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83.cat
XP_PAYLOAD_PATH=msil_statsdbreader_no-public-key_12.4.56.0_x-ww_8fe34e83
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=statsdbreader,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\BPTPageParser.cs ===
using System;
using System.Collections;
using System.Windows.Forms;

namespace UILbView
{
	/// <summary>
	/// In Btree.h you can find the structure for struct BPTPage : public BM_PAGE
	/// I need a way to parse its content. 
	/// 
	/// 
	/// </summary>
	/// 
    /*
     * Header Portion
                BM_PAGEID pageID
                WORD _wPageFlags;
                WORD  _wPageSize;
                WORD  _wEntryCount;
                WORD  _wFreeOffset;
                WORD  _wFreeSpace;
                WORD  _wAvailSpace;
            
                BM_PAGEID _pidLLink; 
                BM_PAGEID _pidRLink;
            
                BYTE  _endOfHeader[1]; 
      * Key Index Mapping
                struct ENTRY_META
                {
                    WORD  wOffset;
                    DWORD dwSizeSubtree;
                };
      * Data Portion
                Non Leaf Data Portion
                
                Leaf Data Portion
    */
    public class BPTPage
    {
        #region _Internaldatastructure
            internal struct ENTRY_META
            {
                public UInt16  wOffSet;
                public UInt32  dwSizeSubtree;
            }

            internal struct LBKey
            {
                public UInt64  i64Rating; //stores the PUID if by user index
                public UInt64  ui64Untier;
            }

            internal struct DATA
            {
                public LBKey           key;
                public byte []         arrData;
                public UInt16          dataSize;
            }

            internal class DATA_AND_META
            {
                public ENTRY_META  meta;
                public DATA        data;
            }
        #endregion 

        public static int  PAGE_SIZE        = 8192; //This could be made configurable since the actual value is also configurable - XML file?
        public static int  DATA_SIZE        = 2;
        public static int  KEY_SIZE         = 12;
        public static int  KEY_SIZE_USER    = 8;

        UInt16      _wChildIndex;
        bool        _bUserIndex;
        
        UInt32      _pageID;
        UInt16      _wPageFlags;
        UInt16      _wPageSize;
        UInt16      _wEntryCount;
        UInt16      _wFreeOffset;
        UInt16      _wFreeSpace;
        UInt16      _wAvailSpace;
        UInt32      _pidLLink;
        UInt32      _pidRLink;
        //Byte        _endofHeader; - this does not exist
    
        ArrayList   _arrEntryMeta   = new ArrayList();
        UInt64      _key            = 0;
        //ArrayList   _arrData;

        byte []     _arrRawByte;

        int         _nCursor = 0;

        public BPTPage(byte [] arrPage, bool bUsingUserIndex)
        {
            _arrRawByte  = arrPage;
            _bUserIndex  = bUsingUserIndex;
            Parse(arrPage);
        }

        public byte [] GetRawByteCopy()
        {
            return (byte [])_arrRawByte.Clone();
        }

        public UInt64 Key 
        {
            get 
            { 
                return _key; 
            }
            set 
            {
                _key = value; 
            }
        }

        public UInt16 wChildIndex
        {
            get
            {
                return _wChildIndex;
            }
            set
            {
                _wChildIndex = value;
            }
        }

        public bool KeyIsChildren(UInt64 key)
        {
            foreach (DATA_AND_META objMeta in _arrEntryMeta)
            {
                if (objMeta.data.key.i64Rating == key)
                    return true;
            }

            return false;
        }

        //i should probaly return an iterator or something
        public UInt64 GetRatingForEntry(int nIndex)
        {
            return ((DATA_AND_META)_arrEntryMeta[nIndex]).data.key.i64Rating;
        }

        public UInt32 GetRatingEntryCount()
        {
            return (UInt32)_arrEntryMeta.Count;
        }

        protected void Parse(byte [] arrPage)
        {
            if (arrPage.Length != PAGE_SIZE)
                throw new Exception("UnExpected Page Size - Check your parsing code");
            
            _pageID                 = GetInt32();
            _wPageFlags             = GetInt16();
            _wPageSize              = GetInt16();
            _wEntryCount            = GetInt16();
            _wFreeOffset            = GetInt16();
            _wFreeSpace             = GetInt16();
            _wAvailSpace            = GetInt16();
            _pidLLink               = GetInt32();
            _pidRLink               = GetInt32();
            //_endofHeader            = GetByte(); - This is fake - It never writes anything in there

            for (int i=0;i< _wEntryCount;i++)
            {
                ENTRY_META entry = GetEntryMeta();
                DATA_AND_META dataAndMeta = new DATA_AND_META();
                dataAndMeta.meta = entry;
                _arrEntryMeta.Add(dataAndMeta);
            }
    
            foreach (DATA_AND_META dataAndMeta in _arrEntryMeta)
            {
                DATA data = GetData(dataAndMeta.meta.wOffSet);
                dataAndMeta.data = data; //assigned the parsed data

                //identify the key
                if (data.key.i64Rating > Key)
                {
                    Key = data.key.i64Rating; //the maximum represent the key
                }
            }

        }

        DATA    GetData(UInt16 wOffset)
        {
            DATA data;
            int     cursor  = (int)(wOffset - DATA_SIZE);
            int     keysize = 0;
            if (_bUserIndex)
            {
                keysize = KEY_SIZE_USER;
            }
            else
                keysize = KEY_SIZE;

            //read the data size
            data.dataSize   = (UInt16)(System.BitConverter.ToInt16(_arrRawByte, cursor) - keysize);
            data.arrData    = new byte[data.dataSize];

            //read the actual data
            cursor = (int)(wOffset - DATA_SIZE - data.dataSize);
            Array.Copy(_arrRawByte, cursor, data.arrData, 0, data.dataSize);

            //read the key
            cursor = (int)(wOffset - DATA_SIZE - data.dataSize - keysize);               
            data.key.i64Rating = (UInt64)System.BitConverter.ToInt64(_arrRawByte, cursor);

            if (!_bUserIndex)
            {
                cursor = cursor + 8;
                data.key.ui64Untier = (UInt64)System.BitConverter.ToInt64(_arrRawByte, cursor);
            }
            else
                data.key.ui64Untier = 0;//assign dummy value

            return data;
        }

        ENTRY_META GetEntryMeta()
        {
            ENTRY_META newEntry;
            
            newEntry.wOffSet            = GetInt16();   
            UInt16 padding              = GetInt16(); //--BUG BUG -- Depending on the compiler we may not get padding - might not be a bad idea to make this configurable
            newEntry.dwSizeSubtree      = GetInt32();       
                 
            return newEntry;
        }
       

        UInt32 GetInt32()
        {
            UInt32 uRet = (UInt32)System.BitConverter.ToInt32(_arrRawByte, _nCursor);
            _nCursor = _nCursor + 4;
            return uRet;
        }

        UInt16 GetInt16()
        {
            UInt16 uRet  = (UInt16)System.BitConverter.ToInt16(_arrRawByte, _nCursor);
            _nCursor = _nCursor + 2;
            return uRet;
        }

        Byte GetByte()
        {
            byte bRet = _arrRawByte[_nCursor];
           _nCursor =  _nCursor + 1;
            return bRet;
        }


        #region UserInterface
        //this will be here for now
        public TreeNode GetTreeNodeRepresentation()
        {
            TreeNode root               = new TreeNode("BPTPage");
            TreeNode header             = new TreeNode("Header");
            TreeNode metaRoot           = new TreeNode("ENTRY_META");
            TreeNode dataRoot           = new TreeNode("Data");
            TreeNode pageID             = GetTreeNodeWithValue("pageID", _pageID.ToString());   
            TreeNode     pageFlags      = GetTreeNodeWithValue("pageFlags", _wPageFlags.ToString());
            TreeNode     pageSize       = GetTreeNodeWithValue("pageSize", _wPageSize.ToString());
            TreeNode     wEntryCount    = GetTreeNodeWithValue("wEntryCount", _wEntryCount.ToString());
            TreeNode     wFreeOffset    = GetTreeNodeWithValue("wFreeOffset", _wFreeOffset.ToString());
            TreeNode     wFreeSpace     = GetTreeNodeWithValue("wFreeSpace", _wFreeSpace.ToString());
            TreeNode     wAvailSpace    = GetTreeNodeWithValue("wAvailSpace", _wAvailSpace.ToString());
            TreeNode     pidLLink       = GetTreeNodeWithValue("pidLLink", _pidLLink.ToString());
            TreeNode     pidRLink       = GetTreeNodeWithValue("pidRLink", _pidRLink.ToString());

            root.Nodes.Add(header);
            root.Nodes.Add(metaRoot);
            root.Nodes.Add(dataRoot);

            header.Nodes.Add(pageID);
            header.Nodes.Add(pageFlags);
            header.Nodes.Add(pageSize);
            header.Nodes.Add(wEntryCount);
            header.Nodes.Add(wFreeOffset);
            header.Nodes.Add(wFreeSpace);
            header.Nodes.Add(wAvailSpace);
            header.Nodes.Add(pidLLink);
            header.Nodes.Add(pidRLink);

            for(int i=0;i<_arrEntryMeta.Count;i++)
            {
                DATA_AND_META dataAndMeta = (DATA_AND_META)_arrEntryMeta[i];
                DATA  data      = dataAndMeta.data;
                ENTRY_META meta = dataAndMeta.meta;

                TreeNode metaNode = GetMetaNode(meta, i);
                TreeNode dataNode = GetDataNode(data, i);

                metaRoot.Nodes.Add(metaNode);
                dataRoot.Nodes.Insert(dataRoot.Nodes.Count , dataNode); //insert at the end
            }

            return root;
        }
        
        internal TreeNode GetMetaNode(ENTRY_META entry, int i)
        {
            TreeNode node               = new TreeNode(i.ToString() + " ENTRY_META");
            TreeNode wOffSet            = GetTreeNodeWithValue("wOffset", entry.wOffSet.ToString());
            TreeNode dwSizeOfSubtree    = GetTreeNodeWithValue("dwSizeOfSubtree", entry.dwSizeSubtree.ToString());
                    
            node.Nodes.Add(wOffSet);
            node.Nodes.Add(dwSizeOfSubtree);

            return node;
        }

        internal TreeNode GetDataNode(DATA data, int i)
        {
            TreeNode node = new TreeNode(i.ToString() + " DATA");
            if (_bUserIndex)
            {
                TreeNode key = new TreeNode("LbPuidIndexKey");
                TreeNode iRating64 = GetTreeNodeWithValue("ui64Puid", data.key.i64Rating.ToString());
                key.Nodes.Add(iRating64);

                TreeNode arrData = new TreeNode("arrData");
                foreach(byte b in data.arrData)
                {
                    TreeNode bNode = new TreeNode(string.Format("{0:x2}", b));
                    arrData.Nodes.Add(bNode);
                }

                TreeNode  dataSize = GetTreeNodeWithValue("dataSize", data.dataSize.ToString());
                node.Nodes.Add(key);
                node.Nodes.Add(arrData);
                node.Nodes.Add(dataSize);
            }
            else
            {
                TreeNode key = new TreeNode("LBKey");
                TreeNode iRating64 = GetTreeNodeWithValue("i64Rating", data.key.i64Rating.ToString());
                TreeNode ui64Untier  = GetTreeNodeWithValue("ui64Untier", data.key.ui64Untier.ToString());
                key.Nodes.Add(ui64Untier);
                key.Nodes.Add(iRating64);

                TreeNode arrData = new TreeNode("arrData");
                foreach(byte b in data.arrData)
                {
                    TreeNode bNode = new TreeNode(string.Format("{0:x2}", b));
                    arrData.Nodes.Add(bNode);
                }

                TreeNode  dataSize = GetTreeNodeWithValue("dataSize", data.dataSize.ToString());
                node.Nodes.Add(key);
                node.Nodes.Add(arrData);
                node.Nodes.Add(dataSize);
            }
            return node;
        }

        internal TreeNode GetTreeNodeWithValue(string szName, string szValue)
        {
            TreeNode node       = new TreeNode(szName);
            TreeNode nodeValue  = new TreeNode(szValue);

            node.Nodes.Add(nodeValue);
            return node;
        }

        #endregion

    }

    
    public class BPTRawPageParser
    {
        //Returns an arraylist of byte array
        public static ArrayList GetPages (string [] arrInput)
        {
            ArrayList arrRet        = new ArrayList();
            int nCount              = 0;
            byte [] arrRawPage      = new byte[BPTPage.PAGE_SIZE + 2];

            for (int i=1;i<arrInput.Length;i++)
            {
                byte bHex = System.Byte.Parse(arrInput[i], System.Globalization.NumberStyles.HexNumber); //if there is an exception i want to know about it
                arrRawPage[nCount] = bHex;
                nCount    = nCount + 1;
                if (nCount == BPTPage.PAGE_SIZE+ 2)
                {
                    arrRet.Add(arrRawPage);
                    nCount      = 0;
                    arrRawPage  = new byte[BPTPage.PAGE_SIZE+ 2];
                }
            }

            return arrRet;
        }

        public static byte [] ParseChildIndex(byte [] arrPage, out UInt16 wChildIndex)
        {
            if (BPTPage.PAGE_SIZE+ 2 != arrPage.Length)
                throw new Exception("Incorrect Stuffed Paged size"); //(wChildIndex)(PageBinary)

            byte [] arrReturn = new byte[BPTPage.PAGE_SIZE];

            Array.Copy(arrPage, 2, arrReturn, 0, arrReturn.Length);

            wChildIndex = (UInt16)System.BitConverter.ToInt16(arrPage, 0);

            return arrReturn;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\XMGWrapper.cs ===
using System;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using xonline.common.mgmt;
using System.Net;
using System.Configuration;

namespace UILbView
{
    /// <summary>
    /// Summary description for XMGWrapper.
    /// </summary>
    public class XMGWrapper:IDisposable
    {
        private         bool    _disposed           = false;
        IPAddress               _ipAddress          = null;
        XomAdminSession         _xomAdminSession    = null;

        int                     _iTimeOutInMilli    = 100000; //100 seconds
        string []               _arrSzResponse      = null;
        int                     _hr                 = 0; //S_OK by default

        public XMGWrapper(string szXMGServer)
        {
            IPHostEntry entry   = Dns.GetHostEntry(szXMGServer);
            foreach (IPAddress address in entry.AddressList)
            {
                try 
                {
                    _ipAddress          = address;
                    _xomAdminSession    = new XomAdminSession(_ipAddress);
                    break; //found it
                }
                catch
                {
                }
            }

            if (null == _xomAdminSession)
                throw new Exception("Unable to Connect to MGT server on " + szXMGServer);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        public void Dispose(bool disposing)
        {
            // Check to see if Dispose has already been called.
            if(!this._disposed)
            {
                if(disposing)
                {
                    // Dispose managed resources.

                    if (null != _xomAdminSession)
                    {
                        _xomAdminSession.Close();
                        _xomAdminSession = null;
                    }
                }
  
            }
            _disposed = true;
        }

        public string [] DumpTreePath(string szTitleId, string szLeaderBoardId, string szRating, string szUntier)
        {
            string sRequest = XMGWrapper.ConstructDumpTreePathRequest(szTitleId, szLeaderBoardId, szRating, szUntier);
            _xomAdminSession.SendRequest(sRequest, _iTimeOutInMilli, out _arrSzResponse, out _hr);
            if (_hr != 0) //S_OK
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                sb.Append("Send Request to XMGT Server Fails ");
                foreach (string szError in _arrSzResponse)
                {
                    sb.Append(szError);
                }
                throw new Exception(sb.ToString());
            }

            return _arrSzResponse;
        }

        public string [] DumpTreePathForUser(string szTitleId, string szLeaderBoardId, string szPuid)
        {
            string sRequest = XMGWrapper.ConstructDumpTreePathRequestForUser(szTitleId, szLeaderBoardId, szPuid);
            _xomAdminSession.SendRequest(sRequest, _iTimeOutInMilli, out _arrSzResponse, out _hr);
            if (_hr != 0) //S_OK
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                sb.Append("Send Request to XMGT Server Fails ");
                foreach (string szError in _arrSzResponse)
                {
                    sb.Append(szError);
                }
                throw new Exception(sb.ToString());
            }

            return _arrSzResponse;
        }

        protected static string ConstructDumpTreePathRequestForUser(string szTitleId, string szLeaderBoardId, string szPuid)
        {
            return string.Format("e :lbsvr dumpSearchPathUsingUserIndex {0} {1} {2}",szTitleId, szLeaderBoardId, szPuid);
        }

        protected static string ConstructDumpTreePathRequest(string szTitleId, string szLeaderBoardId, string szRating, string szUntier)
        {
            return string.Format("e :lbsvr dumpSearchPath {0} {1} {2} {3}",szTitleId, szLeaderBoardId, szRating, szUntier);
        }

        public XMGWrapper()
        {
            //
            // TODO: Add constructor logic here
            //
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_uilbview_none_12.4.56.0_none_58a6bb9f04ce9576
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=uilbview
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.manifest
XP_MANIFEST_PATH=manifests\msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.cat
XP_CATALOG_PATH=manifests\msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.cat
XP_PAYLOAD_PATH=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=uilbview,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\UILBView.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Configuration;

namespace UILbView
{
    /// <summary>
    /// Summary description for Form1.
    /// </summary>
    public class Form1 : System.Windows.Forms.Form
    {
        private System.Windows.Forms.TreeView treeView1;
        private System.Windows.Forms.TextBox textBox1;
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.Container components = null;


        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.ComboBox comboBox2;
        /// <summary>
        /// 
        /// </summary>

        string          _szMgtServer     = "hpleung1";
        XMGWrapper      _xmgWrapper      = null;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.TextBox textBoxRating;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.TreeView treeView2;
        private System.Windows.Forms.Splitter splitter1;
        private System.Windows.Forms.Splitter splitter2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox textBoxPuid;
        private System.Windows.Forms.CheckBox ByPuid;
        private System.Windows.Forms.TextBox textBoxUntier;
        


        public Form1()
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            //
            // TODO: Add any constructor code after InitializeComponent call
            //
            try 
            {
                _szMgtServer    = System.Configuration.ConfigurationManager.AppSettings.Get("XMGServer");
                _xmgWrapper     = new XMGWrapper(_szMgtServer);
                comboBox1.SelectedIndex = 0;
                comboBox2.SelectedIndex = 0;

                TreeNode rootNode = new TreeNode("Root");
                treeView1.Nodes.Add(rootNode);
             
            }
            catch (Exception e)
            {
                ErrorMessage(e.Message, true);
            }
        }

        public void ErrorMessage(string szMessage, bool bfatal)
        {
            System.Windows.Forms.MessageBox.Show(szMessage);
            if (bfatal)
                System.Environment.Exit(-1);
        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if (components != null) 
                {
                    components.Dispose();
                }
            }

            if (null != _xmgWrapper)
            {
                _xmgWrapper.Dispose(); 
                _xmgWrapper = null;
            }

            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.treeView1 = new System.Windows.Forms.TreeView();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.button1 = new System.Windows.Forms.Button();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.button2 = new System.Windows.Forms.Button();
            this.comboBox2 = new System.Windows.Forms.ComboBox();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label2 = new System.Windows.Forms.Label();
            this.textBoxUntier = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.textBoxRating = new System.Windows.Forms.TextBox();
            this.panel1 = new System.Windows.Forms.Panel();
            this.splitter2 = new System.Windows.Forms.Splitter();
            this.treeView2 = new System.Windows.Forms.TreeView();
            this.splitter1 = new System.Windows.Forms.Splitter();
            this.label3 = new System.Windows.Forms.Label();
            this.textBoxPuid = new System.Windows.Forms.TextBox();
            this.ByPuid = new System.Windows.Forms.CheckBox();
            this.groupBox1.SuspendLayout();
            this.panel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // treeView1
            // 
            this.treeView1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.treeView1.ImageIndex = -1;
            this.treeView1.Location = new System.Drawing.Point(0, 0);
            this.treeView1.Name = "treeView1";
            this.treeView1.SelectedImageIndex = -1;
            this.treeView1.Size = new System.Drawing.Size(456, 621);
            this.treeView1.TabIndex = 0;
            this.treeView1.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.treeView1_AfterSelect);
            // 
            // textBox1
            // 
            this.textBox1.Dock = System.Windows.Forms.DockStyle.Top;
            this.textBox1.Location = new System.Drawing.Point(0, 0);
            this.textBox1.Multiline = true;
            this.textBox1.Name = "textBox1";
            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.textBox1.Size = new System.Drawing.Size(480, 208);
            this.textBox1.TabIndex = 1;
            this.textBox1.Text = "";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(192, 128);
            this.button1.Name = "button1";
            this.button1.TabIndex = 2;
            this.button1.Text = "Search";
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.ByPuid);
            this.groupBox1.Controls.Add(this.label3);
            this.groupBox1.Controls.Add(this.textBoxPuid);
            this.groupBox1.Controls.Add(this.button2);
            this.groupBox1.Controls.Add(this.comboBox2);
            this.groupBox1.Controls.Add(this.comboBox1);
            this.groupBox1.Controls.Add(this.label2);
            this.groupBox1.Controls.Add(this.textBoxUntier);
            this.groupBox1.Controls.Add(this.label1);
            this.groupBox1.Controls.Add(this.textBoxRating);
            this.groupBox1.Controls.Add(this.button1);
            this.groupBox1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.groupBox1.Location = new System.Drawing.Point(0, 453);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(480, 168);
            this.groupBox1.TabIndex = 3;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Lb Search Control";
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(72, 128);
            this.button2.Name = "button2";
            this.button2.TabIndex = 9;
            this.button2.Text = "Clear Tree";
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // comboBox2
            // 
            this.comboBox2.Items.AddRange(new object[] {
                                                           "1"});
            this.comboBox2.Location = new System.Drawing.Point(184, 24);
            this.comboBox2.Name = "comboBox2";
            this.comboBox2.Size = new System.Drawing.Size(121, 21);
            this.comboBox2.TabIndex = 8;
            this.comboBox2.Text = "comboBox2";
            // 
            // comboBox1
            // 
            this.comboBox1.Items.AddRange(new object[] {
                                                           "0xfeedfeed"});
            this.comboBox1.Location = new System.Drawing.Point(16, 24);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 7;
            this.comboBox1.Text = "comboBox1";
            // 
            // label2
            // 
            this.label2.Location = new System.Drawing.Point(16, 96);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(48, 23);
            this.label2.TabIndex = 6;
            this.label2.Text = "Untier";
            // 
            // textBoxUntier
            // 
            this.textBoxUntier.Location = new System.Drawing.Point(80, 96);
            this.textBoxUntier.Name = "textBoxUntier";
            this.textBoxUntier.TabIndex = 5;
            this.textBoxUntier.Text = "0";
            this.textBoxUntier.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // label1
            // 
            this.label1.Location = new System.Drawing.Point(16, 64);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(48, 23);
            this.label1.TabIndex = 4;
            this.label1.Text = "Rating";
            // 
            // textBoxRating
            // 
            this.textBoxRating.Location = new System.Drawing.Point(80, 64);
            this.textBoxRating.Name = "textBoxRating";
            this.textBoxRating.TabIndex = 3;
            this.textBoxRating.Text = "100";
            this.textBoxRating.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // panel1
            // 
            this.panel1.Controls.Add(this.splitter2);
            this.panel1.Controls.Add(this.treeView2);
            this.panel1.Controls.Add(this.textBox1);
            this.panel1.Controls.Add(this.groupBox1);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Right;
            this.panel1.Location = new System.Drawing.Point(464, 0);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(480, 621);
            this.panel1.TabIndex = 4;
            // 
            // splitter2
            // 
            this.splitter2.Dock = System.Windows.Forms.DockStyle.Top;
            this.splitter2.Location = new System.Drawing.Point(0, 208);
            this.splitter2.Name = "splitter2";
            this.splitter2.Size = new System.Drawing.Size(480, 3);
            this.splitter2.TabIndex = 5;
            this.splitter2.TabStop = false;
            // 
            // treeView2
            // 
            this.treeView2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.treeView2.ImageIndex = -1;
            this.treeView2.Location = new System.Drawing.Point(0, 208);
            this.treeView2.Name = "treeView2";
            this.treeView2.SelectedImageIndex = -1;
            this.treeView2.Size = new System.Drawing.Size(480, 245);
            this.treeView2.TabIndex = 4;
            // 
            // splitter1
            // 
            this.splitter1.Dock = System.Windows.Forms.DockStyle.Right;
            this.splitter1.Location = new System.Drawing.Point(456, 0);
            this.splitter1.Name = "splitter1";
            this.splitter1.Size = new System.Drawing.Size(8, 621);
            this.splitter1.TabIndex = 5;
            this.splitter1.TabStop = false;
            // 
            // label3
            // 
            this.label3.Location = new System.Drawing.Point(208, 64);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(48, 23);
            this.label3.TabIndex = 11;
            this.label3.Text = "PUID";
            // 
            // textBoxPuid
            // 
            this.textBoxPuid.Location = new System.Drawing.Point(272, 64);
            this.textBoxPuid.Name = "textBoxPuid";
            this.textBoxPuid.TabIndex = 10;
            this.textBoxPuid.Text = "250000000";
            this.textBoxPuid.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            // 
            // ByPuid
            // 
            this.ByPuid.Location = new System.Drawing.Point(336, 24);
            this.ByPuid.Name = "ByPuid";
            this.ByPuid.Size = new System.Drawing.Size(64, 24);
            this.ByPuid.TabIndex = 12;
            this.ByPuid.Text = "ByPuid";
            // 
            // Form1
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(944, 621);
            this.Controls.Add(this.treeView1);
            this.Controls.Add(this.splitter1);
            this.Controls.Add(this.panel1);
            this.Name = "Form1";
            this.Text = "BTREE Viewer";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.groupBox1.ResumeLayout(false);
            this.panel1.ResumeLayout(false);
            this.ResumeLayout(false);

        }
        #endregion

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main() 
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, System.EventArgs e)
        {
        
        }

        private void button1_Click(object sender, System.EventArgs e)
        {
            try 
            {
                string [] arrResponse                            = null;
                bool bUserIndex = ByPuid.Checked;
                if (bUserIndex)
                {
                   arrResponse =  _xmgWrapper.DumpTreePathForUser(comboBox1.Text, comboBox2.Text, textBoxPuid.Text);
                }
                else
                {
                   arrResponse =  _xmgWrapper.DumpTreePath(comboBox1.Text, comboBox2.Text, textBoxRating.Text, textBoxUntier.Text);
                }

                System.Collections.ArrayList arrRawPages         = BPTRawPageParser.GetPages(arrResponse);
                System.Collections.ArrayList arrSearchPath       = new ArrayList();

                foreach (byte [] arrPage in arrRawPages)
                {
                    UInt16 wChildIndex = 65535;
                    BPTPage objPage = new BPTPage(BPTRawPageParser.ParseChildIndex(arrPage, out wChildIndex), bUserIndex);
                    objPage.wChildIndex = wChildIndex;
                    arrSearchPath.Add(objPage);
                }


                UpdateTreeView(arrSearchPath);
            }
            catch (Exception e1)
            {
                ErrorMessage(e1.Message, false);
            }
        }

        private TreeNode ConstructTreeNode(TreeNode node)
        {
            BPTPage objPage = (BPTPage)node.Tag;
            if (objPage == null)
                return null;

            TreeNode ret = objPage.GetTreeNodeRepresentation();
            
            return ret;
        }

        /*
         * Given a search path - draw the UI
         * */
        private void UpdateTreeView(ArrayList arrSearchPath)
        {
            ArrayList trace = new ArrayList();
            
            treeView1.BeginUpdate();
            try
            {
                TreeNode rootNode = treeView1.Nodes[0];
                trace.Add(rootNode);

                TreeNodeCollection parentNode = rootNode.Nodes;
          
                for (int nHeight = 0; nHeight < arrSearchPath.Count;nHeight ++)
                {
                    BPTPage objPage = (BPTPage)arrSearchPath[nHeight];

                    //save the node list and create a new one as the same order as the return node
                    ArrayList prevParentNodeList = new ArrayList();
                    foreach (TreeNode node in parentNode)
                    {
                        UInt64 nodeKey = UInt64.Parse(node.Text);
                        if (objPage.KeyIsChildren(nodeKey))
                            prevParentNodeList.Add(node.Clone());
                    }

                    parentNode.Clear();

                    //Add new nodes
                    for (int i=0;i<objPage.GetRatingEntryCount();i++)
                    {
                        UInt64 i64Rating = objPage.GetRatingForEntry(i);

                        TreeNode newNode = new TreeNode(i64Rating.ToString());
                        parentNode.Add(newNode);
                        
                        foreach (TreeNode node in prevParentNodeList)
                        {
                            UInt64 nodeKey = UInt64.Parse(node.Text);
                            if (nodeKey == i64Rating)
                            {
                                //it existed before - append its child
                                foreach (TreeNode nodeE in node.Nodes)
                                {
                                    newNode.Nodes.Add(nodeE);
                                }
                                newNode.Tag = node.Tag;
                                break;
                            }
                        }
                    }
                    
                    if (nHeight < arrSearchPath.Count -1 )
                    {
                        BPTPage objPageDrill = (BPTPage)arrSearchPath[nHeight + 1];
                        TreeNode node = parentNode[(int)objPageDrill.wChildIndex];
                        trace.Add(node);
                        parentNode = node.Nodes;
                    }
                }

                for (int i=0;i<trace.Count;i++)
                {
                    TreeNode node = (TreeNode)trace[i];
                    node.Expand();
                    node.ForeColor = System.Drawing.Color.Blue;

                    node.Tag= arrSearchPath[i];
                }
            }
            finally
            {
                
                // Begin repainting the TreeView.
                treeView1.EndUpdate();
            }
        }

        private void treeView1_AfterSelect(object sender, System.Windows.Forms.TreeViewEventArgs e)
        {
            //Update Tree
                treeView2.BeginUpdate();
                TreeNode node = ConstructTreeNode(e.Node);
                treeView2.Nodes.Clear();
                if (node != null)
                    treeView2.Nodes.Add(node);

                foreach (TreeNode node1 in treeView2.Nodes)
                {
                    node1.Expand();
                }

                treeView2.EndUpdate();
            //Show Raw Payload
                if (e.Node.Tag != null)
                {
                    BPTPage objPage = (BPTPage)e.Node.Tag;
                    textBox1.Text = GetStringFromByteArray(objPage.GetRawByteCopy());
                    textBox1.Font = new Font("Courier New", 10);

                }

        }

        private string GetStringFromByteArray(byte [] arrInput)
        {   
              System.Text.StringBuilder sb = new System.Text.StringBuilder();
             
              for (int i = 0; i < arrInput.Length; i++)
              {
                   sb.Append(string.Format("{0:x2}", arrInput[i]));
              }

              return sb.ToString();
        }

        private void button2_Click(object sender, System.EventArgs e)
        {
            treeView1.BeginUpdate();
                treeView1.Nodes[0].Nodes.Clear();
            treeView1.EndUpdate();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\stfdvt\settingsdevtest.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Data.SqlClient;
using System.Data;

using ServerTestFramework;
using ServerTestFramework.Database;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.service;
using xonline.common.protocol;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.stfutil;


[TestGroup, DVT]
public class SettingsDevTest : TestNode
{
    private const uint TITLE_ID  = 0x4d2;
    private const uint TITLE_ID2 = 0x12344321;

    [TestGroupSetup]
    public void Setup()
    {
        using (SqlConnection cxn = new SqlConnection(Config.NpdbConnectionString))
        {
            cxn.Open();

            // xblob setup will already have created all the tables, triggers,
            // and populated environment invariant and environment specific
            // information. All we need to do is add and/or reset the
            // unit test specific data.
            string sqlfile = Path.Combine(Path.GetDirectoryName(ContainingDll), "stats_dev_test_data.sql");
            DbUtil.ExecuteSqlFile(cxn, sqlfile);

            // TODO: force a reload?
        }
    }

    const uint GAMER_TYPE = 0x10040001;
    const uint GAMER_ZONE = 0x10040004;
    const uint CONTROLLER_INVERSION = 0x10040002;
    const uint XPROFILE_SETTING_CONTROLLER_VIBRATION = 0x10040003;
    const uint GAMER_TILE_PATH = 0x4064000F;
    const uint GAMER_RATING = 0x5004000B;
    const uint GAMER_MOTTO = 0x402C0011;
    const uint GAMER_CRED = 0x10040006;
    const uint XPROFILE_TITLE_SPECIFIC1 = 0x63E83FFF;
    const uint XPROFILE_TITLE_SPECIFIC2 = 0x63E83FFe;
    const uint XPROFILE_TITLE_SPECIFIC3 = 0x63E83FFd;
    const uint XPROFILE_GAMER_TIER      = 0x1004003a;


    private uint[] _allSettings = new uint[] {    
        0x10040000, // XPROFILE_PERMISSIONS
        0x10040001, // XPROFILE_GAMER_TYPE
        0x10040002, // XPROFILE_GAMER_YAXIS_INVERSION
        0x10040003, // XPROFILE_OPTION_CONTROLLER_VIBRATION
        0x10040004, // XPROFILE_GAMERCARD_ZONE
        0x10040005, // XPROFILE_GAMER_COUNTRY
        0x10040006, // XPROFILE_GAMERCARD_CRED
        0x10040007, // XPROFILE_GAMER_PRESENCE_USER_STATE
        0x1004000C, // XPROFILE_OPTION_VOICE_MUTED
        0x1004000D, // XPROFILE_OPTION_VOICE_THRU_SPEAKERS
        0x1004000E, // XPROFILE_OPTION_VOICE_VOLUME
        0x10040012, // XPROFILE_GAMERCARD_TITLES_PLAYED
        0x10040013, // XPROFILE_GAMERCARD_ACHIEVEMENTS_EARNED
        0x10040015, // XPROFILE_GAMER_DIFFICULTY
        0x10040018, // XPROFILE_GAMER_CONTROL_SENSITIVITY
        0x1004001D, // XPROFILE_GAMER_PREFERRED_COLOR_FIRST
        0x1004001E, // XPROFILE_GAMER_PREFERRED_COLOR_SECOND
        0x10040022, // XPROFILE_GAMER_ACTION_AUTO_AIM
        0x10040023, // XPROFILE_GAMER_ACTION_AUTO_CENTER
        0x10040024, // XPROFILE_GAMER_ACTION_MOVEMENT_CONTROL
        0x10040026, // XPROFILE_GAMER_RACE_TRANSMISSION
        0x10040027, // XPROFILE_GAMER_RACE_CAMERA_LOCATION
        0x10040028, // XPROFILE_GAMER_RACE_BRAKE_CONTROL
        0x10040029, // XPROFILE_GAMER_RACE_ACCELERATOR_CONTROL
        0x10040038, // XPROFILE_GAMERCARD_TITLE_CRED_EARNED
        0x10040039, // XPROFILE_GAMERCARD_TITLE_ACHIEVEMENTS_EARNED
        0x63E83FFD, // XPROFILE_TITLE_SPECIFIC3
        0x63E83FFE, // XPROFILE_TITLE_SPECIFIC2
        0x63E83FFF, // XPROFILE_TITLE_SPECIFIC1
        0x10042001, // WEB_TOU
        0x10042002, // WEB_SPAM
        0x1004200C, // WEB_FLASH
        0x1004200D, // WEB_VIDEO_PREFERENCE
        0x402C0011, // XPROFILE_GAMERCARD_MOTTO
        0x4064000F, // XPROFILE_GAMERCARD_TILE_KEY
        0x40FF2000, // WEB_EMAIL_FORMAT
        0x40FF2003, // WEB_FAVORITE_GENRE
        0x40FF2004, // WEB_FAVORITE_GAME
        0x40FF2005, // WEB_FAVORITE_GAME1
        0x40FF2006, // WEB_FAVORITE_GAME2
        0x40FF2007, // WEB_FAVORITE_GAME3
        0x40FF2008, // WEB_FAVORITE_GAME4
        0x40FF2009, // WEB_FAVORITE_GAME5
        0x40FF200A, // WEB_PLATFORMS_OWNED
        0x40FF200B, // WEB_CONNECTION_SPEED
        0x5004000B, // XPROFILE_GAMERCARD_REP
        0x1004003A // XPROFILE_GAMER_TIER
    };    
    
    

    [TestCase]
    public void Defaults()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        CSGInfo slot;

        Console.WriteLine("Adding some default settings...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[3];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = BitConverter.GetBytes( (int)1 );

        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].SettingId = CONTROLLER_INVERSION;
        syncReq.Settings[1].Value = BitConverter.GetBytes( (int)2 );

        syncReq.Settings[2] = new UserSetting();
        syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[2].UserId = userID1;
        syncReq.Settings[2].SettingId = GAMER_TILE_PATH;
        syncReq.Settings[2].Value = Encoding.Unicode.GetBytes("e:\\image");

        SyncSettingsResponse resp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)resp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        // use alternate title id (18942)
        slot.titleId = TITLE_ID2;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... and reading them back..");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID2;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, CONTROLLER_INVERSION, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot.titleId = TITLE_ID2;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 3);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
        Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
        Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );


        Console.WriteLine("");
    }

    
    [TestCase]
    public void ReadSettings_Max()
    {
        ulong[] users = new ulong[XOn.XONLINE_MAX_SETTING_USERS];
        for(int i = 0; i < users.Length; i++)
        {
            users[i] = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        }    
        uint[] settings = new uint[XOn.XONLINE_MAX_SETTING_COUNT];
        Array.Copy(_allSettings, 0, settings, 0, XOn.XONLINE_MAX_SETTING_COUNT);
        
        
        
        uint hr;


        CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = users[0];

        Console.WriteLine("Reading a bunch of settings...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = users[0];
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = users;
        readReq.SettingIds = settings;

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)readResp;


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        
        for (int i = 0; i < users.Length; i++)
        {
            for (int j = 0; j < settings.Length; j++)
            {
                Assert.AreEqual(readResp.Settings[(i * settings.Length) + j].SettingId, settings[j]);
                Assert.AreEqual(readResp.Settings[(i * settings.Length) + j].UserId, users[i]);
            }
        }                        

        Console.WriteLine("");
    }

    [TestCase]
    public void ReadDuplicateSettings()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        CSGInfo slot;

        Console.WriteLine("Adding some default settings...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[3];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = BitConverter.GetBytes( (int)1 );

        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].SettingId = CONTROLLER_INVERSION;
        syncReq.Settings[1].Value = BitConverter.GetBytes( (int)2 );

        syncReq.Settings[2] = new UserSetting();
        syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[2].UserId = userID1;
        syncReq.Settings[2].SettingId = GAMER_TILE_PATH;
        syncReq.Settings[2].Value = Encoding.Unicode.GetBytes("e:\\image");

        SyncSettingsResponse resp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)resp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        // use alternate title id (18942)
        slot.titleId = TITLE_ID2;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... and reading them back..");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID2;
        
        // note the duplicates here
        readReq.ForUserIds = new ulong[] { userID1, userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, CONTROLLER_INVERSION, GAMER_TILE_PATH, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot.titleId = TITLE_ID2;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 8);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
        Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
        Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );
        Assert.AreEqual(readResp.Settings[3].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[3].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[3].Value, syncReq.Settings[2].Value );
        Assert.AreEqual(readResp.Settings[4].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[4].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[4].Value, syncReq.Settings[0].Value );
        Assert.AreEqual(readResp.Settings[5].SettingId, CONTROLLER_INVERSION);
        Assert.AreEqual(readResp.Settings[5].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[5].Value, syncReq.Settings[1].Value );
        Assert.AreEqual(readResp.Settings[6].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[6].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[6].Value, syncReq.Settings[2].Value );
        Assert.AreEqual(readResp.Settings[7].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[7].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[7].Value, syncReq.Settings[2].Value );


        Console.WriteLine("");
    }
    
    
    [TestCase]
    public void InvalidSetingId()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        CSGInfo slot;

        Console.WriteLine("writing an invalid setting id...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[3];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = 0xbaadf00d;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].SettingId = CONTROLLER_INVERSION;
        syncReq.Settings[1].Value = new byte[] { 0x2 };

        syncReq.Settings[2] = new UserSetting();
        syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[2].UserId = userID1;
        syncReq.Settings[2].SettingId = GAMER_TILE_PATH;
        syncReq.Settings[2].Value = Encoding.ASCII.GetBytes("e:\\image");

        SyncSettingsResponse resp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)resp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = XOn.XENON_DASH_TITLE_ID;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... and reading it back..");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { 0xbaadf00d, CONTROLLER_INVERSION, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot.titleId = readReq.TitleId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 3);
        Assert.AreEqual(readResp.Settings[0].SettingId, 0xbaadf00d);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);
        Assert.AreEqual(readResp.Settings[1].SettingId, CONTROLLER_INVERSION);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
        Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[2].Value );


        Console.WriteLine("");
    }


    [TestCase]
    public void NoValue()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        Console.WriteLine("Reading settings that haven't been set on the server...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, XPROFILE_SETTING_CONTROLLER_VIBRATION, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)readResp;

        CSGInfo slot;
        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 3);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);
        Assert.AreEqual(readResp.Settings[1].SettingId, XPROFILE_SETTING_CONTROLLER_VIBRATION);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_NO_VALUE);
        Assert.AreEqual(readResp.Settings[2].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("setting one of the settings...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        SyncSettingsResponse resp = new SyncSettingsResponse();
        xrlo = (XRLObject2)resp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Reading some settings that have and some that haven't been set on the server...");
        readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, XPROFILE_SETTING_CONTROLLER_VIBRATION, GAMER_TILE_PATH };

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("");
    }


    [TestCase, Ignore("FriendsCommon code isn't working right..")]
    public void ReadGamerTier()
    {
        uint hr;
        XRLObject2 xrlo;
        CSGInfo slot;

        FriendsCommon friends = new FriendsCommon();
        PNUser user1 = friends.CreateUser(true);
        PNUser user2 = friends.CreateUser(true);


        Console.WriteLine("Reading GAMER_TIER...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = user1.UserId;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { user2.UserId };
        readReq.SettingIds = new uint[] { XPROFILE_GAMER_TIER, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, XPROFILE_GAMER_TIER);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[0].Value, new byte[] { 0, 0, 0, 1 });
        Assert.AreEqual(readResp.Settings[1].SettingId, GAMER_TILE_PATH);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_NO_VALUE);
        
    }


    [TestCase]
    public void TitleOverrides()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        CSGInfo slot;

        Console.WriteLine("Adding some settings...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[4];

        // first setting is default only
        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        // second is title only
        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[1].SettingId = XPROFILE_TITLE_SPECIFIC2;
        syncReq.Settings[1].Value = new byte[] { 0xab };

        // third and fourth is the same setting, for both title and default
        syncReq.Settings[2] = new UserSetting();
        syncReq.Settings[2].UserId = userID1;
        syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[2].SettingId = XPROFILE_TITLE_SPECIFIC3;
        syncReq.Settings[2].Value = new byte[] { 0x1 };

        syncReq.Settings[3] = new UserSetting();
        syncReq.Settings[3].UserId = userID1;
        syncReq.Settings[3].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[3].SettingId = XPROFILE_TITLE_SPECIFIC3;
        syncReq.Settings[3].Value = new byte[] { 0x2 };


        SyncSettingsResponse resp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)resp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("reading them back...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { XPROFILE_TITLE_SPECIFIC1, XPROFILE_TITLE_SPECIFIC2, XPROFILE_TITLE_SPECIFIC3 };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 3);
        Assert.AreEqual(readResp.Settings[0].SettingId, XPROFILE_TITLE_SPECIFIC1);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[1].SettingId, XPROFILE_TITLE_SPECIFIC2);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(readResp.Settings[2].SettingId, XPROFILE_TITLE_SPECIFIC3);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[3].Value );


        Console.WriteLine("");
    }



    [TestCase]
    public void RemoveSetting()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        ReadSettingsRequest readReq;
        ReadSettingsResponse readResp;

        CSGInfo slot;

        Console.WriteLine("Adding some settings...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = new byte[] { 0x1 };


        syncResp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... and read it back..");
        readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE };

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 1);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );

        Console.WriteLine("Now null out the setting...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].ValueLen = 0;
        syncReq.Settings[0].Value = null;

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... and read it back..");
        readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE };

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 1);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);
        Assert.AreEqual(readResp.Settings[0].ValueLen, 0);
        Assert.AreEqual(readResp.Settings[0].Value, new byte[] {});


        Console.WriteLine("");
    }

    [TestCase]
    public void RemoveTitleOverride()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        ReadSettingsRequest readReq;
        ReadSettingsResponse readResp;

        CSGInfo slot;

        Console.WriteLine("Adding some settings...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[2];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[1].Value = new byte[] { 0x2 };

        syncResp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("... verify the title override comes back ...");
        readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { XPROFILE_TITLE_SPECIFIC1 };

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 1);
        Assert.AreEqual(readResp.Settings[0].SettingId, XPROFILE_TITLE_SPECIFIC1);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(readResp.Settings[0].Value, new byte[] {0x2});



        Console.WriteLine("Now null out the title override...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[0].ValueLen = 0;
        syncReq.Settings[0].Value = null;

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("... verify NO_VALUE comes back ...");
        readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { XPROFILE_TITLE_SPECIFIC1 };

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 1);
        Assert.AreEqual(readResp.Settings[0].SettingId, XPROFILE_TITLE_SPECIFIC1);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        
        Console.WriteLine("");
    }


    [TestCase]
    public void Sync_Settings()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        DateTime newver;

        CSGInfo slot;

        Console.WriteLine("Adding some settings...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[2];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[1].Value = new byte[] { 0x2 };

        syncResp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        newver = syncResp.Version;


        Console.WriteLine("syncing with no changes to verify settings are returned...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.SettingsLen = 0;
        syncReq.Settings = null;

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(syncResp.Version, newver);
        Assert.AreEqual(syncResp.SettingsLen, 1);
        Assert.AreEqual(syncResp.Settings[0].SettingId, XPROFILE_TITLE_SPECIFIC1);
        Assert.AreEqual(syncResp.Settings[0].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(syncResp.Settings[0].Value, new byte[] {0x2});





        Console.WriteLine("Syncing with one change, new version to verify no settings are returned...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = newver;

        syncReq.Settings = new UserSetting[1];

        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = new byte[] { 0x3 };

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(syncResp.SettingsLen, 0);


        Console.WriteLine("");
    }


    [TestCase]
    public void Sync_Titles()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        SyncTitlesRequest syncReq;
        SyncTitlesResponse syncResp;
        DateTime newver;
        DateTime now = DateTime.Now;

        CSGInfo slot;

        Console.WriteLine("Adding some titles...");
        syncReq = new SyncTitlesRequest(userID1, new DateTime(2002, 11, 15));
        syncReq.Titles = new UserTitle[] {
                new UserTitle(TITLE_ID,   now, 1, 4, 11),
                new UserTitle(TITLE_ID+1, now, 2, 5, 12),
                new UserTitle(TITLE_ID+2, now, 3, 6, 13)
        };


        syncResp = new SyncTitlesResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        newver = syncResp.Version;


        Console.WriteLine("syncing with no changes to verify settings are returned...");
        syncReq = new SyncTitlesRequest(userID1, new DateTime(2002, 11, 15));

        syncResp = new SyncTitlesResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(syncResp.Version.ToString(), newver.ToString());
        Assert.AreEqual(syncResp.TitlesLen, 3);
        Assert.AreEqual(syncResp.Titles[0].TitleId, TITLE_ID);
        Assert.AreEqual(syncResp.Titles[0].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(syncResp.Titles[0].Sequence, 1);
        Assert.AreEqual(syncResp.Titles[0].NumCreds, 4);
        Assert.AreEqual(syncResp.Titles[0].NumAchievements, 11);

        Assert.AreEqual(syncResp.Titles[1].TitleId, TITLE_ID+1);
        Assert.AreEqual(syncResp.Titles[1].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(syncResp.Titles[1].Sequence, 2);
        Assert.AreEqual(syncResp.Titles[1].NumCreds, 5);
        Assert.AreEqual(syncResp.Titles[1].NumAchievements, 12);

        Assert.AreEqual(syncResp.Titles[2].TitleId, TITLE_ID+2);
        Assert.AreEqual(syncResp.Titles[2].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(syncResp.Titles[2].Sequence, 3);
        Assert.AreEqual(syncResp.Titles[2].NumCreds, 6);
        Assert.AreEqual(syncResp.Titles[2].NumAchievements, 13);




        Console.WriteLine("Syncing with one change, new version to verify no titles are returned...");
        syncReq = new SyncTitlesRequest(userID1, newver);
        syncReq.Titles = new UserTitle[] {
                new UserTitle(TITLE_ID+3, DateTime.Now, 3, 7, 13)
        };


        syncResp = new SyncTitlesResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(syncResp.TitlesLen, 0);


        Console.WriteLine("");
    }


    [TestCase]
    public void SyncTitles2Page()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;
        SyncTitlesRequest syncReq;
        SyncTitlesResponse syncResp;
        DateTime now = DateTime.Now;

        CSGInfo slot;

        Console.WriteLine("Adding some titles...");
        syncReq = new SyncTitlesRequest(userID1, new DateTime(2002, 11, 15));
        syncReq.Titles = new UserTitle[XOn.XONLINE_MAX_SETTING_COUNT];
        for (uint i = 0; i < syncReq.Titles.Length; i++)
        {
            syncReq.Titles[i] = new UserTitle(TITLE_ID + i, now, i, 1, 11);
        }

        syncResp = new SyncTitlesResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("Adding more titles...");
        syncReq.Titles = new UserTitle[5];
        for (uint i = 0; i < syncReq.Titles.Length; i++)
        {
            syncReq.Titles[i] = new UserTitle(TITLE_ID + XOn.XONLINE_MAX_SETTING_COUNT + i, now, i  + XOn.XONLINE_MAX_SETTING_COUNT, 1, 11);
        }

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Syncing titles, page 1");
        syncReq.StartingIndex = 0;
        syncReq.Titles = new UserTitle[0];

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(syncResp.TotalTitles,XOn.XONLINE_MAX_SETTING_COUNT + 5);
        Assert.AreEqual(syncResp.Titles.Length,  XOn.XONLINE_MAX_SETTING_COUNT);

        for (int i = 0; i < syncResp.Titles.Length; i++)
        {
            Assert.AreEqual(syncResp.Titles[i].TitleId, TITLE_ID + i);
        }


        Console.WriteLine("Syncing titles, page 2");
        syncReq.StartingIndex = (ushort)(syncResp.Titles.Length + 1);
        syncReq.Titles = new UserTitle[0];

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(syncResp.TotalTitles,XOn.XONLINE_MAX_SETTING_COUNT + 5);
        Assert.AreEqual(syncResp.Titles.Length, 5);

        for (int i = 0; i < syncResp.Titles.Length; i++)
        {
            Assert.AreEqual(syncResp.Titles[i].TitleId, TITLE_ID + XOn.XONLINE_MAX_SETTING_COUNT + i);
        }





    }

    // ReadSettings retrieves a list of settings for a list
    // of users.
    //
    public class ReadSettingsRequest_badProt : XRLObject2
    {
        public uint TitleId;
        public uint  UserId;            // this is where it's invalid (bug 38274)

        [xonline.common.service.WireInfo(Max=XOn.XONLINE_MAX_SETTING_USERS)]
        public uint ForUserIdsLen;
        [xonline.common.service.WireInfo(SizeParam="ForUserIdsLen")]
        public ulong[] ForUserIds;

        [xonline.common.service.WireInfo(Max=XOn.XONLINE_MAX_SETTING_COUNT)]
        public uint SettingIdsLen;
        [xonline.common.service.WireInfo(SizeParam="SettingIdsLen")]
        public uint[] SettingIds;

        public override string Xrl
        {
            get { return "/xstats/readsettings.ashx"; }
        }

    }

    [TestCase]
    public void BadSyncProt()
    {
        ReadSettingsRequest_badProt readReq = new ReadSettingsRequest_badProt();
        CSGInfo slot;

        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.UserId = 1234;


        readReq.ForUserIds = new ulong[] { 1234 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, CONTROLLER_INVERSION, GAMER_TILE_PATH };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;


        uint hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.E_INVALIDARG);
    }


    [TestCase]
    public void TitleOverridesInt()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;


        CSGInfo slot;

        Console.WriteLine("Adding some settings...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[4];

        // first setting is default only
        syncReq.Settings[0] = new UserSetting();
        syncReq.Settings[0].UserId = userID1;
        syncReq.Settings[0].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[0].SettingId = GAMER_ZONE;
        syncReq.Settings[0].Value = new byte[] { 0x1 };

        // second is title only
        syncReq.Settings[1] = new UserSetting();
        syncReq.Settings[1].UserId = userID1;
        syncReq.Settings[1].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[1].SettingId = XPROFILE_TITLE_SPECIFIC1;
        syncReq.Settings[1].Value = new byte[] { 0xab };

        // third and fourth is the same setting, for both title and default
        syncReq.Settings[2] = new UserSetting();
        syncReq.Settings[2].UserId = userID1;
        syncReq.Settings[2].Source = XOn.XSOURCE_DEFAULT;
        syncReq.Settings[2].SettingId = XPROFILE_TITLE_SPECIFIC2;
        syncReq.Settings[2].Value = Encoding.ASCII.GetBytes("default");

        syncReq.Settings[3] = new UserSetting();
        syncReq.Settings[3].UserId = userID1;
        syncReq.Settings[3].Source = XOn.XSOURCE_TITLE;
        syncReq.Settings[3].SettingId = XPROFILE_TITLE_SPECIFIC2;
        syncReq.Settings[3].Value = Encoding.ASCII.GetBytes("title");


        SyncSettingsResponse resp = new SyncSettingsResponse();
        XRLObject2 xrlo = (XRLObject2)resp;

        XrlRequest xreq = new XrlRequest();
        xreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xreq.Path = syncReq.GetXRL();
        xreq.RequestOb = syncReq;
        xreq.ResponseOb = resp;
        xreq.AuthData = new HTTPAuthData(0, 0, 0, syncReq.UserId, syncReq.TitleId, 0, 0).ConstructBase64String();

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Console.WriteLine("reading them back...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_ZONE, XPROFILE_TITLE_SPECIFIC1, XPROFILE_TITLE_SPECIFIC2 };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(readResp.SettingsLen, 3);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_DEFAULT);
        Assert.AreEqual(readResp.Settings[0].Value, syncReq.Settings[0].Value );
        Assert.AreEqual(readResp.Settings[1].SettingId, XPROFILE_TITLE_SPECIFIC1);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(readResp.Settings[1].Value, syncReq.Settings[1].Value );
        Assert.AreEqual(readResp.Settings[2].SettingId, XPROFILE_TITLE_SPECIFIC2);
        Assert.AreEqual(readResp.Settings[2].Source, XOn.XSOURCE_TITLE);
        Assert.AreEqual(readResp.Settings[2].Value, syncReq.Settings[3].Value );


        Console.WriteLine("");
    }

    [TestCase]
    public void Permissions_Write_All()
    {
        // XPROFILE_SETTING_CONTROLLER_VIBRATION is readable and writable by games, console and web
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;

        CSGInfo slot;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        XRLObject2 xrlo;

        Console.WriteLine("Writing XPROFILE_SETTING_CONTROLLER_VIBRATION from hud...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, XPROFILE_SETTING_CONTROLLER_VIBRATION, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Writing XPROFILE_SETTING_CONTROLLER_VIBRATION from game...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_TITLE, XPROFILE_SETTING_CONTROLLER_VIBRATION, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Writing XPROFILE_SETTING_CONTROLLER_VIBRATION from web...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.WEB_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, XPROFILE_SETTING_CONTROLLER_VIBRATION, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        XrlRequest xreq = new XrlRequest();
        xreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xreq.Path = syncReq.GetXRL();
        xreq.RequestOb = syncReq;
        xreq.ResponseOb = syncResp;
        xreq.AuthData = new HTTPAuthData(0, 0, 0, syncReq.UserId, syncReq.TitleId, 0, 0).ConstructBase64String();

        hr = xreq.Send();
        Assert.AreEqual(hr, HResult.S_OK);

    }


    [TestCase]
    public void Permissions_Console_RO()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;

        CSGInfo slot;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        XRLObject2 xrlo;

        // GAMER_RATING is only readable by the console, not writable
        //

        Console.WriteLine("Writing GAMER_TYPE from hud...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_TYPE, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("Writing GAMER_RATING from game...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_TITLE, GAMER_RATING, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("Writing GAMER_RATING from web...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.WEB_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_RATING, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        XrlRequest xreq = new XrlRequest();
        xreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xreq.Path = syncReq.GetXRL();
        xreq.RequestOb = syncReq;
        xreq.ResponseOb = syncResp;
        xreq.AuthData = new HTTPAuthData(0, 0, 0, syncReq.UserId, syncReq.TitleId, 0, 0).ConstructBase64String();

        hr = xreq.Send();
        Assert.AreEqual(hr, HResult.S_OK);

    }

    [TestCase]
    public void Permissions_Title_RO()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;

        CSGInfo slot;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        XRLObject2 xrlo;


        // GAMER_MOTTO is only writable by the title
        //

        Console.WriteLine("Writing GAMER_MOTTO from hud...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_MOTTO, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Writing GAMER_MOTTO from game...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_TITLE, GAMER_MOTTO, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);

    }



    [TestCase]
    public void Permissions_RO()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        uint hr;

        CSGInfo slot;
        SyncSettingsRequest syncReq;
        SyncSettingsResponse syncResp;
        XRLObject2 xrlo;


        // GAMER_TYPE is read only, period
        //

        Console.WriteLine("Writing GAMER_TYPE from hud...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_TYPE, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("Writing GAMER_TYPE from game...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_TITLE, GAMER_TYPE, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("Writing GAMER_TYPE from web...");
        syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.WEB_TITLE_ID;
        syncReq.UserId = userID1;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID1, XOn.XSOURCE_DEFAULT, GAMER_TYPE, new byte[] { 0x1 });

        syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        XrlRequest xreq = new XrlRequest();
        xreq.TargetVirtualInterface = VirtualInterface.xstatsfd_int;
        xreq.Path = syncReq.GetXRL();
        xreq.RequestOb = syncReq;
        xreq.ResponseOb = syncResp;
        xreq.AuthData = new HTTPAuthData(0, 0, 0, syncReq.UserId, syncReq.TitleId, 0, 0).ConstructBase64String();

        hr = xreq.Send();
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);

    }

    [TestCase]
    public void Permissions_NotShared()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;


        // CONTROLLER_INVERSION is not shared
        //
        
        Console.WriteLine("Reading CONTROLLER_INVERSION as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { CONTROLLER_INVERSION };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, CONTROLLER_INVERSION);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("Reading CONTROLLER_INVERSION as a stranger...");
        readReq.ForUserIds[0] = userID2;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);
        

    }



    [TestCase]
    public void Permissions_Activity_Everyone()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Reading GAMER_CRED as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_CRED };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("Reading GAMER_CRED as a stranger...");
        readReq.ForUserIds[0] = userID2;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);

    }


    [TestCase]
    public void Permissions_Viewable_FriendsOnly()
    {
        uint hr;

        FriendsCommon friends = new FriendsCommon();
        PNUser user1 = friends.CreateUser(true);
        PNUser user2 = friends.CreateUser(true);


        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Reading GAMER_CRED as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = user1.UserId;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { user1.UserId };
        readReq.SettingIds = new uint[] { GAMER_CRED };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("Reading GAMER_CRED as a stranger...");
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);


        Console.WriteLine("Sending friends request");
        friends.RequestFriend(user1, user2);

        Console.WriteLine("Reading GAMER_CRED as the requesting friend...");
        readReq.UserId = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);


        Console.WriteLine("Reading GAMER_CRED as the requestee friend...");
        readReq.UserId = user2.UserId;
        readReq.ForUserIds[0] = user1.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("accepting friends request");
        friends.AcceptFriend(user2, user1);

        Console.WriteLine("Reading GAMER_CRED as a true friend...");
        readReq.UserId = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);

    }

    [TestCase]
    public void Permissions_Viewable_Noone()
    {
        uint hr;

        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;

        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Reading GAMER_CRED as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_CRED };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("Reading GAMER_CRED as a stranger...");
        readReq.ForUserIds[0] = userID2;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);


        
        Console.WriteLine("Reading TITLE_SPECIFIC1 as a stranger...");
        readReq.ForUserIds[0] = userID2;
        readReq.SettingIds[0] = XPROFILE_TITLE_SPECIFIC1;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        // this should succeed.. setting isn't an activity based setting
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


    }
    
    
    [TestCase]
    public void Permissions_Activity_Noone()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;



        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID2;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[2];
        syncReq.Settings[0] = new UserSetting(userID2, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_ACTIVITY_NOONE });
        syncReq.Settings[1] = new UserSetting(userID2, XOn.XSOURCE_DEFAULT, GAMER_ZONE, new byte[] { 2 });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Reading GAMER_CRED as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID2;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID2 };
        readReq.SettingIds = new uint[] { GAMER_CRED, GAMER_ZONE };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);
        Assert.AreEqual(readResp.Settings[1].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);


        Console.WriteLine("Reading GAMER_CRED as a stranger...");
        readReq.UserId = userID1;
        readReq.ForUserIds[0] = userID2;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);
        Assert.AreEqual(readResp.Settings[1].SettingId, GAMER_ZONE);
        Assert.AreEqual(readResp.Settings[1].Source, XOn.XSOURCE_DEFAULT);

    }

    [TestCase]
    public void Permissions_Activity_FriendsOnly()
    {
        uint hr;
        XRLObject2 xrlo;
        CSGInfo slot;

        FriendsCommon friends = new FriendsCommon();
        PNUser user1 = friends.CreateUser(true);
        PNUser user2 = friends.CreateUser(true);


        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = user2.UserId;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(user2.UserId, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_ACTIVITY_FRIENDS });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("Reading GAMER_CRED as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = user1.UserId;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { user1.UserId };
        readReq.SettingIds = new uint[] { GAMER_CRED };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_CRED);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);




        Console.WriteLine("Reading GAMER_CRED as a stranger...");
        readReq.UserId = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);



        Console.WriteLine("Sending friends request");
        friends.RequestFriend(user1, user2);

        Console.WriteLine("Reading GAMER_CRED as the requestor...");
        readReq.UserId        = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);

        Console.WriteLine("Reading GAMER_CRED as the requestee...");
        readReq.UserId        = user2.UserId;
        readReq.ForUserIds[0] = user1.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);




        Console.WriteLine("accepting friends request");
        friends.AcceptFriend(user2, user1);

        Console.WriteLine("Reading GAMER_CRED as a true friend...");
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING);
        slot.SetPrivilege(XOn.XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);

    }


    [TestCase]
    public void Permissions_Ucc_Noone()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;


        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID2;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID2, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_UCC_NOONE });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Reading GAMER_MOTTO as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = userID1;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { userID1 };
        readReq.SettingIds = new uint[] { GAMER_MOTTO };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_MOTTO);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);


        Console.WriteLine("Reading GAMER_MOTTO as a stranger...");
        readReq.ForUserIds[0] = userID2;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);

    }

    [TestCase]
    public void Permissions_Ucc_FriendsOnly()
    {
        uint hr;
        XRLObject2 xrlo;
        CSGInfo slot;

        FriendsCommon friends = new FriendsCommon();
        PNUser user1 = friends.CreateUser(true);
        PNUser user2 = friends.CreateUser(true);


        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = user2.UserId;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(user2.UserId, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_UCC_FRIENDS });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("Reading GAMER_MOTTO as owner...");
        ReadSettingsRequest readReq = new ReadSettingsRequest();
        readReq.UserId = user1.UserId;
        readReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        readReq.ForUserIds = new ulong[] { user1.UserId };
        readReq.SettingIds = new uint[] { GAMER_MOTTO };

        ReadSettingsResponse readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].SettingId, GAMER_MOTTO);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);




        Console.WriteLine("Reading GAMER_MOTTO as a stranger...");
        readReq.UserId = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT);
        slot.SetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY);

                                                 
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);



        Console.WriteLine("Sending friends request");
        friends.RequestFriend(user1, user2);

        Console.WriteLine("Reading GAMER_MOTTO as the requesting friend...");
        readReq.UserId = user1.UserId;
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT);
        slot.SetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_PERMISSION_DENIED);


        Console.WriteLine("Reading GAMER_MOTTO as the requestee friend...");
        readReq.UserId = user2.UserId;
        readReq.ForUserIds[0] = user1.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT);
        slot.SetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);



        Console.WriteLine("accepting friends request");
        friends.AcceptFriend(user2, user1);

        Console.WriteLine("Reading GAMER_MOTTO as a true friend...");
        readReq.ForUserIds[0] = user2.UserId;

        readResp = new ReadSettingsResponse();
        xrlo = (XRLObject2)readResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = readReq.TitleId;
        slot.userPuid0 = readReq.UserId;
        slot.UnsetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT);
        slot.SetPrivilege(XOn.XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY);

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, readReq.GetXRL(), readReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);
        Assert.AreEqual(readResp.Settings[0].Source, XOn.XSOURCE_NO_VALUE);

    }


    [TestCase]
    public void TitleEnum()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        uint hr;
        SyncTitlesRequest syncReq;
        SyncTitlesResponse syncResp;
        EnumTitlesRequest enumReq;
        EnumTitlesResponse enumResp;
        DateTime now = DateTime.Now;

        CSGInfo slot;

        Console.WriteLine("Adding some titles...");
        syncReq = new SyncTitlesRequest(userID1, new DateTime(2002, 11, 15));
        syncReq.Titles = new UserTitle[] {
                new UserTitle(TITLE_ID,   now, 1, 4, 11),
                new UserTitle(TITLE_ID+1, now, 2, 5, 12),
                new UserTitle(TITLE_ID+2, now, 3, 6, 13)
        };


        syncResp = new SyncTitlesResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english
        
        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("Enumerating page 1 of titles...");

        enumReq = new EnumTitlesRequest(userID2, userID1, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TitlesLen, 2);

        Assert.AreEqual(enumResp.Titles[0].TitleId, TITLE_ID+2);
        Assert.AreEqual(enumResp.Titles[0].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(enumResp.Titles[0].Sequence, 3);
        Assert.AreEqual(enumResp.Titles[0].NumCreds, 6);
        Assert.AreEqual(enumResp.Titles[0].NumAchievements, 13);

        Assert.AreEqual(enumResp.Titles[1].TitleId, TITLE_ID+1);
        Assert.AreEqual(enumResp.Titles[1].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(enumResp.Titles[1].Sequence, 2);
        Assert.AreEqual(enumResp.Titles[1].NumCreds, 5);
        Assert.AreEqual(enumResp.Titles[1].NumAchievements, 12);


        Console.WriteLine("Enumerating page 2 of titles...");
        enumReq.StartingIndex = 2;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TitlesLen, 1);

        Assert.AreEqual(enumResp.Titles[0].TitleId, TITLE_ID);
        Assert.AreEqual(enumResp.Titles[0].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(enumResp.Titles[0].Sequence, 1);
        Assert.AreEqual(enumResp.Titles[0].NumCreds, 4);
        Assert.AreEqual(enumResp.Titles[0].NumAchievements, 11);

        Console.WriteLine("Enumerating page 3 of titles...");
        enumReq.StartingIndex = 3;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TitlesLen, 0);
   }

    [TestCase]
    public void TitleClear()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();

        SyncTitlesRequest syncReq;
        SyncTitlesResponse syncResp;
        EnumTitlesRequest enumReq;
        EnumTitlesResponse enumResp;
        TitleClearRequest clearReq;

        DateTime now = DateTime.Now;
        uint hr;


        CSGInfo slot;

        Console.WriteLine("Adding some titles...");
        syncReq = new SyncTitlesRequest(userID1, new DateTime(2002, 11, 15));
        syncReq.Titles = new UserTitle[] {
                new UserTitle(TITLE_ID,   now, 1, 4, 11),
                new UserTitle(TITLE_ID+1, now, 2, 5, 12),
                new UserTitle(TITLE_ID+2, now, 3, 6, 13)
        };


        syncResp = new SyncTitlesResponse();
        XRLObject2 xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("Clearing a title...");
        clearReq = new TitleClearRequest();
        clearReq.UserId = userID1;
        clearReq.TitleId = TITLE_ID;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = syncReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english
        

        xrlo = null;

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, clearReq.GetXRL(), clearReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);




        Console.WriteLine("Enumerating titles...");

        enumReq = new EnumTitlesRequest(userID1, userID1, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english
        

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TitlesLen, 2);

        Assert.AreEqual(enumResp.Titles[0].TitleId, TITLE_ID+2);
        Assert.AreEqual(enumResp.Titles[0].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(enumResp.Titles[0].Sequence, 3);
        Assert.AreEqual(enumResp.Titles[0].NumCreds, 6);
        Assert.AreEqual(enumResp.Titles[0].NumAchievements, 13);
        
        Assert.AreEqual(enumResp.Titles[1].TitleId, TITLE_ID+1);
        Assert.AreEqual(enumResp.Titles[1].LastPlayed.ToString(), now.ToString());
        Assert.AreEqual(enumResp.Titles[1].Sequence, 2);
        Assert.AreEqual(enumResp.Titles[1].NumCreds, 5);
        Assert.AreEqual(enumResp.Titles[1].NumAchievements, 12);


    }




    [TestCase]
    public void Permissions_TitleEnum_Noone()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        EnumTitlesRequest enumReq;
        EnumTitlesResponse enumResp;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;


        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = userID2;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(userID2, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_ACTIVITY_NOONE });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("enumerating titles as owner...");
        enumReq = new EnumTitlesRequest(userID1, userID1, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TitlesLen, 0);





        Console.WriteLine("enumerating titles as a stranger...");
        enumReq = new EnumTitlesRequest(userID1, userID2, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);
   }


    [TestCase]
    public void Permissions_TitleEnum_FriendsOnly()
    {
        FriendsCommon friends = new FriendsCommon();
        PNUser user1 = friends.CreateUser(true);
        PNUser user2 = friends.CreateUser(true);

        ulong userID1 = user1.UserId;
        ulong userID2 = user2.UserId;

        EnumTitlesRequest enumReq;
        EnumTitlesResponse enumResp;
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Setting XPROFILE_PERMISSIONS...");
        SyncSettingsRequest syncReq = new SyncSettingsRequest();
        syncReq.TitleId = XOn.XENON_DASH_TITLE_ID;
        syncReq.UserId = user2.UserId;
        syncReq.Version = XOn.MinDateTime;

        syncReq.Settings = new UserSetting[1];
        syncReq.Settings[0] = new UserSetting(user2.UserId, XOn.XSOURCE_DEFAULT, XOn.XPROFILE_PERMISSIONS,
            new byte[] { XOn.XPROFILE_PERMISSION_SHARE_ACTIVITY_FRIENDS });

        SyncSettingsResponse syncResp = new SyncSettingsResponse();
        xrlo = (XRLObject2)syncResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = syncReq.TitleId;
        slot.userPuid0 = syncReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, syncReq.GetXRL(), syncReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("enumerating titles as owner...");
        enumReq = new EnumTitlesRequest(userID1, userID1, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


        Console.WriteLine("enumerating titles as a stranger...");
        enumReq = new EnumTitlesRequest(userID1, userID2, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("Sending friends request");
        friends.RequestFriend(user1, user2);


        Console.WriteLine("enumerating titles as a requested friend...");
        enumReq = new EnumTitlesRequest(userID1, userID2, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.XONLINE_E_STAT_PERMISSION_DENIED);


        Console.WriteLine("enumerating titles as a pending friend...");
        enumReq = new EnumTitlesRequest(userID2, userID1, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);



        Console.WriteLine("accepting friends request");
        friends.AcceptFriend(user2, user1);


        Console.WriteLine("enumerating titles as a true friend...");
        enumReq = new EnumTitlesRequest(userID1, userID2, 0, 2);
        enumResp = new EnumTitlesResponse();

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = enumReq.UserId;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english
        

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);


   }


    [TestCase]
    public void ContextEnumAll()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        ContextEnumRequest enumReq = new ContextEnumRequest();
        ContextEnumResponse enumResp = new ContextEnumResponse();
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Enumerating all contexts..");

        enumReq.TitleId = TITLE_ID;
        enumReq.ContextId = 1;
        enumReq.LocaleId = 0;
        enumReq.StartingIndex = 0;
        enumReq.MaxContexts = 20;

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TotalContexts, 3);
        Assert.AreEqual(enumResp.ContextsLen, 3);
        Assert.AreEqual(enumResp.Contexts[0].ContextId, 0);
        Assert.AreEqual(enumResp.Contexts[0].Name, "Small");
        Assert.AreEqual(enumResp.Contexts[1].ContextId, 1);
        Assert.AreEqual(enumResp.Contexts[1].Name, "Medium");
        Assert.AreEqual(enumResp.Contexts[2].ContextId, 2);
        Assert.AreEqual(enumResp.Contexts[2].Name, "Large");
    }

    [TestCase]
    public void ContextEnumPage()
    {
        ulong userID1 = 0x0009FFFF00000000 + (ulong)(new Random()).Next();
        ulong userID2 = userID1 + 1;
        ContextEnumRequest enumReq = new ContextEnumRequest();
        ContextEnumResponse enumResp = new ContextEnumResponse();
        uint hr;

        CSGInfo slot;
        XRLObject2 xrlo;

        Console.WriteLine("Enumerating page 1 of contexts..");

        enumReq.TitleId = TITLE_ID;
        enumReq.ContextId = 1;
        enumReq.LocaleId = 0;
        enumReq.StartingIndex = 0;
        enumReq.MaxContexts = 2;

        xrlo = (XRLObject2)enumResp;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = userID1;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english


        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TotalContexts, 3);
        Assert.AreEqual(enumResp.ContextsLen, 2);
        Assert.AreEqual(enumResp.Contexts[0].ContextId, 0);
        Assert.AreEqual(enumResp.Contexts[0].Name, "Small");
        Assert.AreEqual(enumResp.Contexts[1].ContextId, 1);
        Assert.AreEqual(enumResp.Contexts[1].Name, "Medium");

        Console.WriteLine("Enumerating page 2 of contexts..");
        enumReq.StartingIndex = 2;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = userID1;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TotalContexts, 3);
        Assert.AreEqual(enumResp.ContextsLen, 1);
        Assert.AreEqual(enumResp.Contexts[0].ContextId, 2);
        Assert.AreEqual(enumResp.Contexts[0].Name, "Large");


        Console.WriteLine("Enumerating page 3 of contexts..");
        enumReq.StartingIndex = 4;

        slot = GlobalFakeSG.FakeSG.GetSlot();
        slot.titleId = TITLE_ID;
        slot.userPuid0 = userID1;
        slot.userFlag0 = 0x00006700;
        slot.languageID = 1; // english
        

        hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Stats, false, enumReq.GetXRL(), enumReq, ref xrlo);
        Assert.AreEqual(hr, HResult.S_OK);

        Assert.AreEqual(enumResp.TotalContexts, 3);
        Assert.AreEqual(enumResp.ContextsLen, 0);

    }




}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\UILbView\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_uilbview_none_12.4.56.0_none_58a6bb9f04ce9576
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=uilbview
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.manifest
XP_MANIFEST_PATH=manifests\msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.cat
XP_CATALOG_PATH=manifests\msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032.cat
XP_PAYLOAD_PATH=msil_uilbview_no-public-key_12.4.56.0_x-ww_ad38f032
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=uilbview,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\XBox1LogParser\XBox1LogParser.cs ===
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;

namespace XBox1LogParser
{
    public interface IGetCount
    {
        int GetCountForTime();
    }

    public abstract class AttributeGetData
    {
        string nAttributeCount = null;
        public static int _AttributeCountMax = 0;
        public static int _AttributeCountMin = int.MaxValue;
        public static int _AttributeCount = 0;
        public static int _AttributeCountTotal = 0;
        public string AttributeCount
        {
            get 
            {
                return nAttributeCount;
            }

            set
            {
                nAttributeCount = value;
                try 
                {
                    int temp = int.Parse(nAttributeCount, System.Globalization.NumberStyles.HexNumber);
                    if (temp > _AttributeCountMax)
                        _AttributeCountMax = temp;

                    if (temp < _AttributeCountMin)
                        _AttributeCountMin = temp;
            
                    _AttributeCountTotal = _AttributeCountTotal + temp;
                    _AttributeCount = _AttributeCount + 1;
                }
                catch
                {
                }
            }
        }
    }


    public abstract class AttributeSetData
    {
        string nAttributeCount = null;
        public static int _AttributeCountMax = 0;
        public static int _AttributeCountMin = int.MaxValue;
        public static int _AttributeCount = 0;
        public static int _AttributeCountTotal = 0;
        public string AttributeCount
        {
            get 
            {
                return nAttributeCount;
            }

            set
            {
                nAttributeCount = value;
                try 
                {
                    int temp = int.Parse(nAttributeCount, System.Globalization.NumberStyles.HexNumber);
                    if (temp > _AttributeCountMax)
                        _AttributeCountMax = temp;

                    if (temp < _AttributeCountMin)
                        _AttributeCountMin = temp;
            
                    _AttributeCountTotal = _AttributeCountTotal + temp;
                    _AttributeCount = _AttributeCount + 1;
                }
                catch
                {
                }
            }
        }
    }


    public abstract class AttributePost
    {
        string nAttributeCount = null;
        public static int _AttributeCountMax = 0;
        public static int _AttributeCountMin = int.MaxValue;
        public static int _AttributeCount = 0;
        public static int _AttributeCountTotal = 0;
        public string AttributeCount
        {
            get 
            {
                return nAttributeCount;
            }

            set
            {
                nAttributeCount = value;
                try 
                {
                    int temp = int.Parse(nAttributeCount, System.Globalization.NumberStyles.HexNumber);
                    if (temp > _AttributeCountMax)
                        _AttributeCountMax = temp;

                    if (temp < _AttributeCountMin)
                        _AttributeCountMin = temp;
            
                    _AttributeCountTotal = _AttributeCountTotal + temp;
                    _AttributeCount = _AttributeCount + 1;
                }
                catch
                {
                }
            }
        }
    }


    public abstract class Attribute4
    {
        string nAttributeCount = null;
        public static int _AttributeCountMax = 0;
        public static int _AttributeCountMin = int.MaxValue;
        public static int _AttributeCount = 0;
        public static int _AttributeCountTotal = 0;
        public string AttributeCount
        {
            get 
            {
                return nAttributeCount;
            }

            set
            {
                nAttributeCount = value;
                try 
                {
                    int temp = int.Parse(nAttributeCount, System.Globalization.NumberStyles.HexNumber);
                    if (temp > _AttributeCountMax)
                        _AttributeCountMax = temp;

                    if (temp < _AttributeCountMin)
                        _AttributeCountMin = temp;
            
                    _AttributeCountTotal = _AttributeCountTotal + temp;
                    _AttributeCount = _AttributeCount + 1;
                }
                catch
                {
                }
            }
        }
    }



    public abstract class LogEvent: IGetCount
    {
        public DateTime eventDateTime;

        public LogEvent(DateTime date)
        {
            eventDateTime = date;
        }

        public DateTime eventTime
        {
            get
            {
                return eventDateTime;
            }
        }

        public virtual int GetCountForTime()
        {
            return 0;
        }
    }

    public class GetData:LogEvent
    {
        class LBUser:AttributeGetData
        {
            public string lbId;
            public string UserId;
        }
        //(TitleID) *[(LbID)(UserID)(AttributeCount)]*
        string  nTitleID            = null;
        public  ArrayList dataList  = new ArrayList();

        public GetData(DateTime date, string s):base(date)
        {
            string [] arrSplit = s.Split(new char []{'|'});
            nTitleID = arrSplit[2];

            //the rest must be *[(LbID)(UserID)(AttributeCount)]*
            for (int i=3;i<arrSplit.Length;i=i+3)
            {
                try 
                {
                    LBUser lbuser           = new LBUser();
                    lbuser.lbId             = arrSplit[i];
                    lbuser.UserId           = arrSplit[i+1];
                    lbuser.AttributeCount   = arrSplit[i+2];
                    dataList.Add(lbuser);
                }
                catch 
                {
                
                }
            }
        }

        public override int GetCountForTime()
        {
            return dataList.Count;
        }
    }

    public class SetData:LogEvent
    {
        class LBUser:AttributeSetData
        {
            public string lbId;
            public string UserId;
            public string rating;
        }
        //(TitleID) (AccessToken)*[(LbID)(userID)(rating)(attributeCount)]*
        string  nTitleID            = null;
        string  accessToken         = null;
        public  ArrayList dataList  = new ArrayList();

        public SetData(DateTime date, string s):base(date)
        {
            string [] arrSplit = s.Split(new char []{'|'});
            nTitleID    = arrSplit[2];
            accessToken = arrSplit[3];

            
            for (int i=4;i<arrSplit.Length;i=i+4)
            {
                try 
                {
                    LBUser lbuser           = new LBUser();
                    lbuser.lbId             = arrSplit[i];
                    lbuser.UserId           = arrSplit[i+1];
                    lbuser.rating           = arrSplit[i+2];
                    lbuser.AttributeCount   = arrSplit[i+3];
                    dataList.Add(lbuser);
                }
                catch 
                {
                
                }
            }
        }

        public override int GetCountForTime()
        {
            return dataList.Count;
        }
    }

    public class StatPost:LogEvent
    {
        public static int _ProcCountTotal = 0;
        public static int _ProcCountMax   = 0;
        public static int _ProcCountMin = 0;
        public static int _ProcCount      = 0;

        class LBUser:AttributePost
        {
            public string lbtype;
            public string UserId;
            public string rating;
            
        }
        //(TitleID)(AttachPathName | {0})(ProcCount) *[(LbType)(UserID)(rating)(StatsCount)]*
        string  nTitleID            = null;
        string  AttachPath          = null;
        string  procCount           = null;
        public  ArrayList dataList  = new ArrayList();

        public StatPost(DateTime date, string s):base(date)
        {
            try 
            {
                string [] arrSplit = s.Split(new char []{'|'});
                nTitleID    = arrSplit[2];
                AttachPath  = arrSplit[3];
                procCount   = arrSplit[4];

                for (int i=5;i<arrSplit.Length;i=i+4)
                {
                    try 
                    {
                        LBUser lbuser           = new LBUser();
                        lbuser.lbtype           = arrSplit[i];
                        lbuser.UserId           = arrSplit[i+1];
                        lbuser.rating           = arrSplit[i+2];
                        lbuser.AttributeCount       = arrSplit[i+3];
                        dataList.Add(lbuser);
                    }
                    catch 
                    {
                
                    }
                }

                _ProcCount = _ProcCount + 1;
                int temp = int.Parse(procCount, System.Globalization.NumberStyles.HexNumber);
                _ProcCountTotal = _ProcCountTotal + temp;
                if (temp > _ProcCountMax)
                    _ProcCountMax = temp;
                if (temp < _ProcCountMin)
                    _ProcCountMin = temp;
            }
            catch
            {

            }
        }

        public override int GetCountForTime()
        {
            return dataList.Count;
        }
    }

    public class WebEnum:LogEvent
    {
        //(TitleID)(LBID)(PivotOrPageStart)(bIsPivotUser)(PageSize)(RepUserCount)
        string  nTitleID            = null;
        string  nLBID               = null;
        string  bIsPivotOrPage      = null;
        string  bIsPivotUser        = null;
        string  pageSize            = null;
        string  RepUserCount        = null;

        static public int _PageSizeMax = 0;
        static public int _PageSizeMin = int.MaxValue;
        static public int _PageSizeTotal = 0;
        static public int _PageSizeCount = 0;

        public WebEnum(DateTime date, string s):base(date)
        {
            try 
            {
                string [] arrSplit = s.Split(new char []{'|'});
                nTitleID        = arrSplit[2];
                nLBID           = arrSplit[3];
                bIsPivotOrPage  = arrSplit[4];
                bIsPivotUser    = arrSplit[5];
                pageSize        = arrSplit[6];
                RepUserCount    = arrSplit[7]; 
                
                int temp = int.Parse(pageSize, System.Globalization.NumberStyles.HexNumber);
                _PageSizeCount = _PageSizeCount + 1;
                _PageSizeTotal = _PageSizeTotal + temp;
                if (temp > _PageSizeMax)
                    _PageSizeMax = temp;
                if (temp < _PageSizeMin)
                    _PageSizeMin = temp;
            }
            catch 
            {
                
            }
        }

        public override int GetCountForTime()
        {
            return 1;
        }
    }

    public class EnumLB:LogEvent
    {
        //(TitleID) (LBID)(PivotOrPageStart)(IsPivotUser)(PageSize)(attribCount)(RepUserCount)
        string  nTitleID            = null;
        string  nLBID               = null;
        string  bIsPivotOrPage      = null;
        string  bIsPivotUser        = null;
        string  pageSize            = null;
        string  RepUserCount        = null;
        string  attribCount         = null;

        static public int _PageSizeMax = 0;
        static public int _PageSizeMin = int.MaxValue;
        static public int _PageSizeTotal = 0;
        static public int _PageSizeCount = 0;

        public EnumLB(DateTime date, string s):base(date)
        {
            string [] arrSplit  = s.Split(new char []{'|'});
            nTitleID            = arrSplit[2];
            nLBID               = arrSplit[3];
            bIsPivotOrPage      = arrSplit[4];
            bIsPivotUser        = arrSplit[5];
            pageSize            = arrSplit[6];
            attribCount         = arrSplit[7]; 
            RepUserCount        = arrSplit[8]; 
            
            try 
            {
                int temp = int.Parse(pageSize,System.Globalization.NumberStyles.HexNumber);
                _PageSizeCount = _PageSizeCount + 1;
                _PageSizeTotal = _PageSizeTotal + temp;
                if (temp > _PageSizeMax)
                    _PageSizeMax = temp;
                if (temp < _PageSizeMin)
                    _PageSizeMin = temp;
            }
            catch 
            {

            }
        }

        public override int GetCountForTime()
        {
            return 1;
        }
    }

    
    public class MySortedList
    {
        System.Collections.ArrayList m_objSortedList = new ArrayList();
        
		
        public MySortedList()
        {
        }

        public int Count
        {
            get
            {
                return m_objSortedList.Count;
            }
        }

        public object Get(int index)
        {
            return m_objSortedList[index];
        }

        //quick and dirty
        public void Add(LogEvent objIn)
        {
            lock (this)
            {
                int nElementToAdd = 0; //assume put at the start

                for (int i=m_objSortedList.Count-1;i>=0;i--)
                {
                    LogEvent obj = (LogEvent) m_objSortedList[i];
                    if (obj.eventDateTime.Ticks < objIn.eventDateTime.Ticks)
                    {
                        nElementToAdd = i + 1;
                        break;
                    }
                }
                m_objSortedList.Insert(nElementToAdd, objIn);
            }
        }
    }

    /// <summary>
    /// Summary description for Class1.
    /// </summary>
    class Class1
    {
        static int _totalErrors = 0;
        static int REPORT_GRANULARITY = 60000;
        enum MethodType
        {
            GetData, 
            WebEnum,
            StatPost,
            SetData,
            EnumLb,
            Unknown
        }

        /// <summary>
        /// The main entry point for the application.
        /// GetData = (Date) (Name) (TitleID) *[(LbID)(UserID)(AttributeCount)]*
        /// 
        /// e.g. 2005/07/26 17:00:00.004|GETDATA|4d530064|a|9030c30c36206|6
        /// 
        /// WebEnum = (TitleID)(LBID)(PivotOrPageStart)(bIsPivotUser)(PageSize)(RepUserCount)
        /// e.g. 2005/07/26 17:00:00.019|WEBENUMLB|4d530064|4|9409c09c11448|1|32|32
        ///
        /// StatPost = (TitleID)(AttachPathName | {0})(ProcCount) *[(LbType)(UserID)(rating)(StatsCount)]*
        /// e.g. 2005/07/26 17:00:00.379|STATPOST|4d570019||3|4|95f15f15f51c3|b|d|7|95f15f15f51c3|b|d|1|95f15f15f51c3|b|d
        ///
        /// SetData = (TitleID) (AccessToken)*[(LbID)(userID)(rating)(attributeCount)]*
        /// e.g. 2005/07/26 17:00:00.316|SETDATA|4d530064||61|994b94b94f6be|0|4 
        ///
        /// EnumLB = (TitleID) (LBID)(PivotOrPageStart)(IsPivotUser)(PageSize)(attribCount)(RepUserCount)
        /// e.g. "2005/07/26 17:00:00.457|ENUMLB|41560040|1|1|0|32|10|32"
        ///
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {
            //
            // TODO: Add code to start application here
            //
            System.IO.StreamReader streamReader = null;
            System.Collections.Hashtable unknownMethod = new Hashtable();
            MySortedList sortedList = new MySortedList();
            int [] arrGeneralCounter = new int[6];
            int nLineCount = 0;
            try 
            {
                streamReader = new StreamReader(args[0]);
                string s = null;
                int nLine  = 0;
                while((s = streamReader.ReadLine())!= null)
                {
                    try 
                    {
                        nLine = nLine  + 1;

                        DateTime timeofOccurence;
                        MethodType method = ParseMethod(s, out timeofOccurence);
                        nLineCount = nLineCount + 1;
                        arrGeneralCounter[(int)method]++;
                        switch (method)
                        {
                            case MethodType.GetData:
                                GetData o = new GetData(timeofOccurence, s);
                                sortedList.Add(o);
                                break;
                            case MethodType.WebEnum:
                                WebEnum o1 = new WebEnum(timeofOccurence, s);
                                sortedList.Add(o1);
                                break;
                            case MethodType.EnumLb:
                                EnumLB o2 = new EnumLB(timeofOccurence, s);
                                sortedList.Add(o2);
                                break;
                            case MethodType.SetData:
                                SetData o3 = new SetData(timeofOccurence, s);
                                sortedList.Add(o3);
                                break;
                            case MethodType.StatPost:
                                StatPost o4 = new StatPost(timeofOccurence, s);
                                sortedList.Add(o4);
                                break;
                            case MethodType.Unknown:
                                string methodUnknown = GetMethodString(s);
                                if (unknownMethod[methodUnknown] == null)
                                {
                                    unknownMethod.Add(methodUnknown, (int)1);
                                }
                                else
                                {
                                    unknownMethod[methodUnknown] = ((int)unknownMethod[methodUnknown]) + 1;
                                }
                                continue;
                        }
                    }
                    catch 
                    {

                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            finally
            {
                if (null != streamReader)
                {
                    streamReader.Close();
                }
            }

            Console.WriteLine("Unknown Method====================\r\n");
            //Dump out unknown method
            foreach (string method in unknownMethod.Keys)
            {
                Console.WriteLine("\t\t Method {0} Occurence {1}", method, unknownMethod[method]);
            }

            Console.WriteLine("Total Occurence");
            for (int i=0;i<arrGeneralCounter.Length;i++)
            {
                Console.WriteLine("\t\t Method {0} Occurence {1}", ((MethodType)i).ToString(), arrGeneralCounter[i]);
            }

            Console.WriteLine("Processed {0} Lines", nLineCount);
            Console.WriteLine("Total Errors {0} Lines", _totalErrors);

            //now we dump the CSV file
            if (sortedList.Count <= 0) return; 

            DateTime timeStart = ((LogEvent)sortedList.Get(0)).eventDateTime;
            int nSum = 0;
            int nSumGetData  = 0;
            int nSumSetData  = 0;
            int nSumEnum     = 0;
            int nSumWebEnum  = 0;
            int nSumStatPost = 0;
            bool bAccelerateTime = false;
            Console.WriteLine("Log Analysis Start {0} End {1}", ((LogEvent)sortedList.Get(0)).eventDateTime, ((LogEvent)sortedList.Get(sortedList.Count -1)).eventDateTime);
            Console.WriteLine("timeStart.Ticks, nSum, nSumGetData, nSumSetData, nSumEnum, nSumWebEnum, nSumStatPost");
            DateTime lastRead = ((LogEvent)sortedList.Get(0)).eventDateTime;
            for (int index = 0; index<sortedList.Count; index++)
            {
                LogEvent o  = (LogEvent)sortedList.Get(index);
                //accelerate time

                if (o.eventDateTime.Ticks < lastRead.Ticks)
                {
                    Console.WriteLine("Non-contiguous log file\r\n");
                    continue;
                }
                lastRead = o.eventDateTime;

                if (bAccelerateTime)
                {
                    while (o.eventDateTime > timeStart.AddMilliseconds(REPORT_GRANULARITY))
                    {

                        Console.WriteLine("{0},{1}, {2}, {3}, {4}, {5}, {6}", timeStart.Ticks, nSum, nSumGetData, nSumSetData, nSumEnum, nSumWebEnum, nSumStatPost);
                        timeStart = timeStart.AddMilliseconds(REPORT_GRANULARITY);
                    }
                    bAccelerateTime = false;
                }

                if (o.eventDateTime <= timeStart.AddMilliseconds(REPORT_GRANULARITY))
                {
                    nSum = nSum + o.GetCountForTime();

                    if (o is GetData)
                    {
                        nSumGetData = nSumGetData + o.GetCountForTime();
                    }
                    else if (o is SetData)
                    {
                        nSumSetData = nSumSetData + o.GetCountForTime();
                    }
                    else if (o is EnumLB)
                    {
                        nSumEnum = nSumEnum + o.GetCountForTime();
                    }
                    else if (o is WebEnum)
                    {
                        nSumWebEnum = nSumWebEnum + o.GetCountForTime();
                    }
                    else if (o is StatPost)
                    {
                        nSumStatPost = nSumStatPost + o.GetCountForTime();
                    }
                    continue;
                }

                if (nSumGetData == 0)
                {
                    Console.WriteLine("What is happening");
                }

                bAccelerateTime = true;
                Console.WriteLine("{0},{1}, {2}, {3}, {4}, {5}, {6}", timeStart.Ticks, nSum, nSumGetData, nSumSetData, nSumEnum, nSumWebEnum, nSumStatPost);
                timeStart = timeStart.AddMilliseconds(REPORT_GRANULARITY);

                nSum         = 0;
                nSumGetData  = 0;
                nSumSetData  = 0;
                nSumEnum     = 0;
                nSumWebEnum  = 0;
                nSumStatPost = 0;
            }
    
            //other stats
            Console.WriteLine("Stat Post PROC Count");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", StatPost._ProcCountMax, StatPost._ProcCountMin, StatPost._ProcCountTotal, StatPost._ProcCount);
            Console.WriteLine("Enum Page Size");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", EnumLB._PageSizeMax, EnumLB._PageSizeMin, EnumLB._PageSizeTotal,  EnumLB._PageSizeCount);
            Console.WriteLine("WebEnum Page Size");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", WebEnum._PageSizeMax, WebEnum._PageSizeMin, WebEnum._PageSizeTotal, WebEnum._PageSizeCount);
       
            Console.WriteLine("Attribute Count");
            Console.WriteLine("Get");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", AttributeGetData._AttributeCountMax, AttributeGetData._AttributeCountMin, AttributeGetData._AttributeCountTotal , AttributeGetData._AttributeCount);
            Console.WriteLine("Set");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", AttributeSetData._AttributeCountMax, AttributeSetData._AttributeCountMin, AttributeSetData._AttributeCountTotal , AttributeSetData._AttributeCount);
            Console.WriteLine("Post");
            Console.WriteLine("Max {0} Min {1} Total {2} Total {3}", AttributePost._AttributeCountMax, AttributePost._AttributeCountMin, AttributePost._AttributeCountTotal , AttributePost._AttributeCount);


        }

        static string GetMethodString(string s)
        {
            string [] arrSplit = s.Split(new char []{'|'});
            return arrSplit[1];
        }

        static MethodType ParseMethod(string s, out DateTime time)
        {
            MethodType ret = MethodType.Unknown;
            time = DateTime.Now; //some dummy value
            try 
            {
                string [] arrSplit = s.Split(new char []{'|'});

                time = DateTime.Parse(arrSplit[0]);

                if (time.Ticks <=  new DateTime(2005, 1,1).Ticks || time.Ticks >=  new DateTime(2006, 1,1).Ticks)
                {
                    throw new Exception("Unexpected low data value");
                }

                if (arrSplit[1].IndexOf("GETDATA") != -1)
                {
                    ret = MethodType.GetData;
                }
                else if (arrSplit[1].IndexOf("STATPOST") != -1)
                {
                    ret = MethodType.StatPost;
                }
                else if (arrSplit[1].IndexOf("WEBENUMLB") != -1)
                {
                    ret = MethodType.WebEnum;
                }
                else if (arrSplit[1].IndexOf("SETDATA") != -1)
                {
                    ret = MethodType.SetData;
                }
                else if (arrSplit[1].IndexOf("ENUMLB") != -1)
                {
                    ret = MethodType.EnumLb;
                }
            }
            catch
            {
                _totalErrors = _totalErrors +1;

            }
            return ret;
        }   

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\usagedata\FuncXRLUsageStore.cs ===
using System;
using System.Text;
using System.Threading;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.protocol;
using ServerTestFramework.LiveService.UserAccount;

namespace UsageData
{
    /// <summary>
    /// Summary description for FuncXRLUsageStore.
    /// </summary>
    [TestGroup]
    public class FuncXRLUsageStore : TestNode
    {
        [TestCase]
        public class P_Add_PlayCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_PlayCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
           }
        }

        [TestCase]
        public class P_Add_PlayCount_Not_Exist_External : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_XBOX, VirtualInterface.xstatsfd, true);
            }
        }


        [TestCase]
        public class P_Add_PlayCount_Exist_External : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_XBOX, VirtualInterface.xstatsfd, true);
            }
        }


        [TestCase]
        public class P_Add_DownloadCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_DOWNLOADCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }

        [TestCase]
        public class P_Add_DownloadCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_DOWNLOADCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
           }
        }

        
        [TestCase]
        public class P_Add_PurchaseCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PURCHASECOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_PurchaseCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PURCHASECOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
           }
        }

        [TestCase]
        public class P_Add_Rating_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false);
            }
        }


        [TestCase]
        public class P_Add_Rating_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false);
            }
        }

        [TestCase]
        public class P_Add_Rating_Not_Exist_External : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_XBOX, VirtualInterface.xstatsfd, false);
            }
        }


        [TestCase]
        public class P_Add_Rating_Exist_External : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_XBOX, VirtualInterface.xstatsfd, false);
            }
        }


        [TestCase]
        public class P_Add_StreamCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_STREAMCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_StreamCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_STREAMCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_SendCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_SENDCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_SendCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_SENDCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }

        [TestCase]
        public class P_Add_CommentCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_COMMENTCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_CommentCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_COMMENTCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }

        [TestCase]
        public class P_Add_SkipCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_SKIPCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_SkipCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_SKIPCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }

        [TestCase]
        public class P_Add_AdPlayCount_Not_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_AD_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }


        [TestCase]
        public class P_Add_AdPlayCount_Exist_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_AD_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
            }
        }



        [TestCase]
        public class P_Add_Aggregate_MaxIntValue_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_AD_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true, int.MaxValue, null);
            }
        }

        // Rollover causes an excaption on the server.  This is expected but the case needs to be udated accordingly
        //[TestCase]
        //public class P_Add_Aggregate_Rollover_Internal : UsageDataTestBase
        //{
        //    protected override void Execute()
        //    {
        //        AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_AD_PLAYCOUNT, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true, 1,int.MaxValue, null, null);
        //    }
        //}



        [TestCase]
        public class P_Add_Replace_MaxIntValue_New_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleNew((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false, int.MaxValue, null);
            }
        }

        [TestCase]
        public class P_Add_Replace_MaxIntValue_Existing_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddSingleExisting((ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false, 1, int.MaxValue, null, null);
            }
        }

        [TestCase]
        public class P_Add_Multiple_Attributes_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddMultipleAttribute(new ushort[] {(ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING,(ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT }, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int);
            }
        }

        [TestCase]
        public class P_Add_Multiple_Attributes_External : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddMultipleAttribute(new ushort[] { (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT }, (int)UsageDataSources.USAGE_SOURCE_XBOX, VirtualInterface.xstatsfd);
            }
        }

        [TestCase]
        public class P_Add_Multiple_Users_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddMultipleUser(5, (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false);
            }
        }


        [TestCase]
        public class P_Add_Multiple_Media_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddMultipleMedia(5, (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, false);
            }
        }

        [TestCase]
        public class P_Add_Multiple_All_Internal : UsageDataTestBase
        {
            protected override void Execute()
            {
                AddMultipleAll(5,5,new ushort[] { (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_RATING, (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT }, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int);
            }
        }


        // This causes a foreign key violation on the server and the entry is ignored.  This is expected but the case needs to be updated accordingly.
        //[TestCase]
        //public class N_Add_Invalid_AttributeId_Internal : UsageDataTestBase
        //{
        //    protected override void Execute()
        //    {
        //        AddSingleExisting(ushort.MaxValue, (int)UsageDataSources.USAGE_SOURCE_ZUNE, VirtualInterface.xstatsfd_int, true);
        //    }
        //}


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\tools\XBox1LogParser\AssemblyInfo.cs ===
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]		

//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]

//
// In order to sign your assembly you must specify a key to use. Refer to the 
// Microsoft .NET Framework documentation for more information on assembly signing.
//
// Use the attributes below to control which key is used for signing. 
//
// Notes: 
//   (*) If no key is specified, the assembly is not signed.
//   (*) KeyName refers to a key that has been installed in the Crypto Service
//       Provider (CSP) on your machine. KeyFile refers to a file which contains
//       a key.
//   (*) If the KeyFile and the KeyName values are both specified, the 
//       following processing occurs:
//       (1) If the KeyName can be found in the CSP, that key is used.
//       (2) If the KeyName does not exist and the KeyFile does exist, the key 
//           in the KeyFile is installed into the CSP and used.
//   (*) In order to create a KeyFile, you can use the sn.exe (Strong Name) utility.
//       When specifying the KeyFile, the location of the KeyFile should be
//       relative to the project output directory which is
//       %Project Directory%\obj\<configuration>. For example, if your KeyFile is
//       located in the project directory, you would specify the AssemblyKeyFile 
//       attribute as [assembly: AssemblyKeyFile("..\\..\\mykey.snk")]
//   (*) Delay Signing is an advanced option - see the Microsoft .NET Framework
//       documentation for more information on this.
//
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\bucketmap.cpp ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved

Module Name:

  bucketmap.cpp

Abstract:

  In memory bucket map stuff.

--*/

#include "stdafx.h"
#include "bucketmap.h"

CLeaderBoardBucketMap::CLeaderBoardBucketMap(GUID& uiLbId)
{
    m_uidLbId               = uiLbId;
    m_rgBucketMetaTable     = NULL;
    m_dwSizeBucketMetaTable = 0;
    m_rgIndexToBucketMeta   = NULL;
    m_rgBucketMaxRating     = NULL;
    m_prglBuckets           = NULL;
    m_dwBucketCount         = 0;
    m_dwLeafCount           = 0;
    m_dwNodeCount           = 0;
}

CLeaderBoardBucketMap::~CLeaderBoardBucketMap()
{
    Reset();
}

HRESULT CLeaderBoardBucketMap::Init(
    DWORD dwBucketCount 
)
{
    HRESULT hr = S_OK;

    // 
    // Check if Init hasn't been called before.
    //

    if(m_prglBuckets != NULL)
    {
        XomNtEvent(XEVENT_XSMT_INIT_FAILED, "CLeaderBoardBucketMap::Init was called for a "
            "second time.");
        hr = E_UNEXPECTED;
        goto lDone;
    }

    m_dwBucketCount = dwBucketCount;

    if(dwBucketCount == 0)
    {
        XomNtEvent(XEVENT_XSMT_INIT_FAILED_1, "CLeaderBoardBucketMap::Init failed. dwBucketCount==0");
        hr = E_UNEXPECTED;
        goto lDone;
    }
    
    //
    // Calculate the number of leaves and nodes.
    //
    
    m_dwLeafCount = __max(2, (DWORD) pow((double)2, (double)ceil(log10((double)m_dwBucketCount) / log10((double)2))));
    m_dwNodeCount = m_dwLeafCount + m_dwLeafCount - 1;

    //
    // Allocate and initialize the tree.
    //

    m_prglBuckets = new LONG[m_dwNodeCount];

    if(NULL == m_prglBuckets)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    ZeroMemory(m_prglBuckets, m_dwNodeCount * sizeof(LONG));

    //
    // Prepare the bucket meta data table
    //

    m_dwSizeBucketMetaTable = (m_dwBucketCount * 2) + 1;

   GOTO_LDONE_IF_FAILED_ALLOC(
        m_rgBucketMetaTable = new BUCKET_META[m_dwSizeBucketMetaTable] );

   ZeroMemory(m_rgBucketMetaTable, sizeof(BUCKET_META) * m_dwSizeBucketMetaTable);

    //
    // Prepare the Bucket Index to Bucket Meta Pointer conversion table. (Fancy
    // name for an array for pointers, huh?)
    //

    GOTO_LDONE_IF_FAILED_ALLOC(
        m_rgIndexToBucketMeta = new PBUCKET_META[m_dwBucketCount] );

    ZeroMemory(m_rgIndexToBucketMeta, sizeof(PBUCKET_META) * m_dwBucketCount);

    // Prepare array of bucket max ratings
    
    GOTO_LDONE_IF_FAILED_ALLOC(
        m_rgBucketMaxRating = new LONGLONG[m_dwBucketCount] );
        
    ZeroMemory(m_rgBucketMaxRating, sizeof(LONGLONG) * m_dwBucketCount);

lDone:
    
    return hr;
}

void CLeaderBoardBucketMap::Reset()
{
    if(m_rgBucketMetaTable != NULL)
    {
        delete m_rgBucketMetaTable;
        m_rgBucketMetaTable = NULL;
        m_dwSizeBucketMetaTable = 0;
    }

    if(m_prglBuckets != NULL)
    {
        delete [] m_prglBuckets;
        m_prglBuckets = NULL;
    }

    if(m_rgIndexToBucketMeta != NULL)
    {
        delete [] m_rgIndexToBucketMeta;
        m_rgIndexToBucketMeta = NULL;
    }
    
    if(m_rgBucketMaxRating != NULL)
    {
        delete [] m_rgBucketMaxRating;
        m_rgBucketMaxRating = NULL;
    }
}

HRESULT CLeaderBoardBucketMap::SetBucketId(
    DWORD    dwBucketNdx,
    DWORD    dwBucketId,
    LONGLONG llMaxRating
)
{
    HRESULT hr = S_OK;
    DWORD dwHash;

    //
    // Some sanity checks
    //

    if(NULL == m_rgBucketMetaTable)
    {
        hr = E_UNEXPECTED;
        goto lDone;
    }

    if(dwBucketNdx >= m_dwBucketCount)
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED, 
         "SetBucketId failed. Invalid bucket index."
         "\nuidLbId="DBGGUIDFMT
         "\ndwBucketNdx=%d"
         "\nm_dwBucketCount=%d",
         DBGGUIDPRM(&m_uidLbId), dwBucketNdx, m_dwBucketCount);
        hr = E_UNEXPECTED;
        goto lDone;
    }

    //
    // Create a new meta-data struct, fill it out and store it in the meta-data
    // hash table.
    //

    dwHash = dwBucketId % m_dwSizeBucketMetaTable;

    for(;;)
    {
        if( 0 == m_rgBucketMetaTable[dwHash].dwBucketId
            || dwBucketId == m_rgBucketMetaTable[dwHash].dwBucketId )
        {
            // Good, an empty space for our meta-data struct (or updating
            // an existing entry)
            
            m_rgBucketMetaTable[dwHash].dwBucketId   = dwBucketId;
            m_rgBucketMetaTable[dwHash].dwBucketNdx  = dwBucketNdx;
            m_rgBucketMaxRating[dwBucketNdx]         = llMaxRating;
            break;
        }
        else
        {
            if(m_rgBucketMetaTable[dwHash].dwBucketId != dwBucketId)
            {
                // Oops, this place is taken. Hopefully this shouldn't happen
                // very often in this table otherwise we should tweak either
                // the size or the hash formula.
                
                dwHash = (dwHash+1) % m_dwSizeBucketMetaTable;
            }
            else
            {
                // This method has already been called for this bucket id. 
                // That's not allowed.

                XomNtEvent(XEVENT_XSMT_UNEXPECTED_1, 
                 "SetBucketId failed. Bucket Id already exists."
                 "\nuidLbId="DBGGUIDFMT
                 "\ndwBucketNdx=%d"
                 "\ndwBucketId=%d",
                 DBGGUIDPRM(&m_uidLbId), dwBucketNdx, dwBucketId);
                hr = E_UNEXPECTED;
                goto lDone;
            }
        }
    }

    // Update the Bucket Index to Bucket Meta Pointer conversion table.
    m_rgIndexToBucketMeta[dwBucketNdx] = &m_rgBucketMetaTable[dwHash];
    
lDone:

    return hr;
}

HRESULT CLeaderBoardBucketMap::GetBucketIdForRating(
    LONGLONG llRating,
    DWORD    dwMaxBucketSize,
    DWORD    dwPrevBucket,
    DWORD*   pdwBucketId
)
{
    HRESULT hr = S_OK;
    
    m_lock.ReadLock();
    
    if(NULL == m_rgBucketMetaTable)
    {
        hr = E_UNEXPECTED;
        goto lDone;
    }
    
    // Shortcut
    if(dwPrevBucket != 0)
    {
        DWORD dwBucketNdx;
        
        hr = GetBucketIndex(dwPrevBucket, &dwBucketNdx);
        
        if(SUCCEEDED(hr))
        {
            // This bucket should still be valid if...
            if(llRating <= m_rgBucketMaxRating[dwBucketNdx] // Its MaxRating is greater than the candidate rating AND one of the three:
               && (dwBucketNdx+1 == m_dwBucketCount || // It's the last bucket in the map OR
                    m_rgBucketMaxRating[dwBucketNdx] == m_rgBucketMaxRating[dwBucketNdx+1] || // The next bucket has the same exact MaxRating (one of the special buckets) OR
                    llRating > m_rgBucketMaxRating[dwBucketNdx+1])) // The candidate rating is greater the the next bucket's MaxRating
            {
                // Bucket is valid. No need to search for another one.
                hr = S_OK;
                *pdwBucketId = dwPrevBucket;
                goto lDone;
            }
        }
        else
        {
            hr = E_UNEXPECTED;
            XomNtEvent(XEVENT_XSMT_UNEXPECTED_2, 
             "GetBucketIdForRating failed. Invalid dwPrevBucket"
             "\nuidLbId="DBGGUIDFMT
             "\nllRating=%64d"
             "\ndwPrevBucket=%u",
              DBGGUIDPRM(&m_uidLbId), llRating, dwPrevBucket);
            goto lDone;
        }
    }
    
    // Use a slightly modified binary search algorithm to find the right bucket
    // for llRating. The idea is to find either the exact match (in which case 
    // a regular binary search would suffice) or the key immediatelly greater 
    // (iBestIndex and llBestKey).
    int iMiddle;
    LONGLONG llKey;
    int iLeft          = 0;                      
    int iRight         = (int)m_dwBucketCount-1; 
    int iBestIndex     = iRight;
    LONGLONG llBestKey = m_rgBucketMaxRating[iRight];
    
    do
    {
        iMiddle = (iLeft + iRight) / 2;
        llKey   = m_rgBucketMaxRating[iMiddle];
        
        if(llRating <= llKey)
        {
            iBestIndex = iMiddle;
            llBestKey  = llKey;
        }
        
        // if the rating we're searching is greater than the key in the middle
        // we'll focus on the right side (remember, the ratings are sorted in
        // descending order), otherwise focus on the left side.
        if(llRating > llKey)
            iRight = iMiddle - 1; // Look at the left 
        else
            iLeft  = iMiddle + 1; // Look at the right
    }
    // Keep going until we either have a perfect match or until we can't split 
    // anymore.
    while(llRating != llKey && iLeft <= iRight); 
    
    // Sanity check. 
    if((llRating > llBestKey)
       || (iBestIndex > 0 && m_rgBucketMaxRating[iBestIndex-1] < llRating))
    {
        hr = E_UNEXPECTED;
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_3, 
         "GetBucketIdForRating failed. Invalid dwPrevBucket"
         "\nuidLbId="DBGGUIDFMT
         "\nllRating=%64d"
         "\nllBestKey=%64d"
         "\niBestIndex=%d",
          DBGGUIDPRM(&m_uidLbId), llRating, llBestKey, iBestIndex);
        goto lDone;
    }
    
    if(llRating != llBestKey)
    {
        // This is not an exact match. Easiest case.
        *pdwBucketId = m_rgIndexToBucketMeta[iBestIndex]->dwBucketId;
    }
    else
    {
        // Exact match. Means that we could possibly be in a special bucket - 
        // the kinda bucket used to store only a specific value. Sometimes 
        // there can be multiple of those for the same value. To avoid 
        // unnecessary splits, we'll try to choose a bucket that has space 
        // left in it.
        
        bool found = false;
        
        // We'll first try the current bucket.
        if(GetBucketValueFromBucketNdx(iBestIndex) < (LONG)dwMaxBucketSize)
        {
            *pdwBucketId = m_rgIndexToBucketMeta[iBestIndex]->dwBucketId;
            found = true;
        }
        
        if(!found)
        {
            // Try buckets on the left.
            for(int iBucketNdx=iBestIndex-1; iBucketNdx >= 0; iBucketNdx--)
            {
                if(m_rgBucketMaxRating[iBucketNdx] == llBestKey)
                {
                    if(GetBucketValueFromBucketNdx(iBucketNdx) < (LONG)dwMaxBucketSize)
                    {
                        *pdwBucketId = m_rgIndexToBucketMeta[iBucketNdx]->dwBucketId;
                        found        = true;
                        break;
                    }
                }
                else
                {
                    break;
                }
            }
        }
        
        if(!found)
        {
            // Nope, try buckets on the right.
            for(int iBucketNdx=iBestIndex+1; iBucketNdx < (int)m_dwBucketCount; iBucketNdx++)
            {
                if(m_rgBucketMaxRating[iBucketNdx] == llBestKey)
                {
                    if(GetBucketValueFromBucketNdx(iBucketNdx) < (LONG) dwMaxBucketSize)
                    {
                        *pdwBucketId = m_rgIndexToBucketMeta[iBucketNdx]->dwBucketId;
                        found        = true;
                        break;
                    }
                }
                else
                {
                    break;
                }
            }
            
            if(!found)
            {
                // All buckets are full. In this case, we return the last bucket for this 
                // rating. It will cause it to split. iBucketNdx contains the index of the last bucket + 1 because
                // of the last loop.
                
                *pdwBucketId = m_rgIndexToBucketMeta[iBucketNdx-1]->dwBucketId;
                found = true;
            }
        }
    }
    
lDone:

    m_lock.ReadUnlock();
    
    return hr;
}

HRESULT CLeaderBoardBucketMap::GetBucketIndex(
    DWORD dwBucketId,
    DWORD* pdwBucketNdx
)
{
    DWORD* pSearch = NULL;
    DWORD dwHash;
    DWORD dwReHash;
    HRESULT hr = E_FAIL;
    
    // Sanity check

    if(NULL == m_rgBucketMetaTable)
    {
        hr = E_UNEXPECTED;
        goto lDone;
    }

    // Search for the metadata thing.

    dwHash = dwBucketId % m_dwSizeBucketMetaTable;
    dwReHash = dwHash;

    while(m_rgBucketMetaTable[dwReHash].dwBucketId != dwBucketId)
    {
        dwReHash = (dwReHash+1) % m_dwSizeBucketMetaTable;
        if (dwReHash == dwHash)
        {
            break;
        }
    }

    if(m_rgBucketMetaTable[dwReHash].dwBucketId == dwBucketId)
    {
        *pdwBucketNdx = m_rgBucketMetaTable[dwReHash].dwBucketNdx;
        hr = S_OK;
    }
    else
    {      
        *pdwBucketNdx = 0;
        hr = XSMT_E_BUCKET_NOT_FOUND;
    }

lDone:

    return hr;
}

HRESULT CLeaderBoardBucketMap::AddToBucket(
    DWORD dwBucketId,
    LONG lCount,
    LONG* plNewTotal)
{
    DWORD dwBucketNdx;
    HRESULT hr = S_OK;

    m_lock.ReadLock();

    GOTO_LDONE_IF_FAILED_HR(
        GetBucketIndex(dwBucketId, &dwBucketNdx) );

    AddToBucketInternal(dwBucketNdx, lCount);

    *plNewTotal = m_prglBuckets[m_dwNodeCount - m_dwLeafCount + dwBucketNdx];

lDone:

    m_lock.ReadUnlock();

    return hr;
}

void CLeaderBoardBucketMap::AddToBucketInternal(
    DWORD dwBucketNdx,
    LONG lCount
)
{
    DWORD nNode;

    //
    // We start at the bucket leaf that represents the bucket and we go down
    // 'til the root of the tree updating their counts as we go.
    //

    nNode = m_dwNodeCount - m_dwLeafCount + dwBucketNdx + 1;

    m_updateLock.WriteLock();
    
    while(nNode != 0)
    {
        // Update node
        
        // InterlockedExchangeAdd(&(m_prglBuckets[nNode-1]), lCount);
        m_prglBuckets[nNode-1] += lCount;

        // Move to its parent
        
        nNode /= 2;
    }
    
    m_updateLock.WriteUnlock();
}

HRESULT CLeaderBoardBucketMap::GetBucketValue(
    DWORD dwBucketId,
    LONG* plValue
)
{
    DWORD dwBucketNdx;
    HRESULT hr = S_OK;

    *plValue = 0;
    
    m_lock.ReadLock();

    GOTO_LDONE_IF_FAILED_HR(
        GetBucketIndex(dwBucketId, &dwBucketNdx) );

    *plValue = GetBucketValueFromBucketNdx(dwBucketNdx);
    
lDone:

    m_lock.ReadUnlock();

    return hr;
}

HRESULT CLeaderBoardBucketMap::GetSubtotal(
    DWORD dwBucketId,
    LONG* plSubtotal )
{
    DWORD dwBucketNdx;
    DWORD nNode;
    LONG lSubtotal = 0;
    int iTry = 0;
    HRESULT hr = S_OK;

    m_lock.ReadLock();

    for(iTry = 0; iTry <= 5; iTry++)
    {   
        hr = GetBucketIndex(dwBucketId, &dwBucketNdx);

        if(XSMT_E_BUCKET_NOT_FOUND == hr)
        {
            // Bucket not found. We're probably in the middle of a split 
            // operation in which the in-memory bucket map hasn't been updated
            // yet. Give just enough time for it to complete and try again.

            m_lock.ReadUnlock();
            Sleep(30);
            m_lock.ReadLock();

            continue;
        }

        break;
    }

    if(FAILED(hr))
    {
        goto lDone;
    }

    // We're interested in the subtotal up to but not including the bucket
    // passed in the parameter.

    if(dwBucketNdx == 0)
    {
        goto lDone;
    }

    dwBucketNdx--;

    // To calculate the range subtotal we start at the node leaf and start
    // moving using the following rules:
    // * If the node has a left sibling, move to it and add it to the subtotal.
    // * If not, move to its parent.
    // Repeat until we hit the root.

    nNode = m_dwNodeCount - m_dwLeafCount + dwBucketNdx + 1;

    lSubtotal += m_prglBuckets[nNode-1];

    while(nNode != 1)
    {
        if(nNode % 2 != 0)
        {
            // Left sibling, update subtotal.

            nNode--;
            lSubtotal += m_prglBuckets[nNode-1];
        }
        else
        {
            // Parent node. Keep going.
            
            nNode /= 2;
        }
    }

lDone:

    m_lock.ReadUnlock();

    *plSubtotal = lSubtotal;

    return hr;
}

HRESULT CLeaderBoardBucketMap::GetBucketListFromRange(
    DWORD dwRank,
    DWORD dwCount,
    OUT DWORD* pdwRelPos,
    OUT DWORD* prgdwBucketId,
    IN OUT DWORD* pcBucketId
)
{
    HRESULT hr = S_OK;
    DWORD dwNode;
    DWORD dwRangeSubtotal;
    DWORD dwLastPossibleNode;
    DWORD dwBucketNdx;
    DWORD dwBucketNdxToNodeAdj;
    DWORD dwRetBucketNdx;

    m_lock.ReadLock();

    dwLastPossibleNode = m_dwNodeCount - m_dwLeafCount + 1;
    dwBucketNdxToNodeAdj = m_dwNodeCount - m_dwLeafCount;
    
    // Search for the first bucket 

    dwNode = 1;
    dwRangeSubtotal = 0;

    while(dwNode < dwLastPossibleNode)
    {
        if(dwRangeSubtotal + m_prglBuckets[(dwNode*2)-1] >= dwRank)
        {
            dwNode *= 2;
        }
        else
        {
            dwRangeSubtotal += m_prglBuckets[(dwNode*2)-1];
            dwNode = (dwNode * 2) + 1;
        }
    }

    dwBucketNdx = dwNode - (m_dwNodeCount - m_dwLeafCount) - 1;

    // At this point:
    // dwBucketNdx should contain the first bucket to go in the list.
    // dwRangeSubtotal should contain the subtotal of ranks up to that bucket but
    // not including it.
    // Now we must find the other buckets by adding their values until we
    // have at least dwCount ranks.

    dwRetBucketNdx = 0;

    for(; 
        dwBucketNdx < m_dwBucketCount && // dwBucketNdx remains in the valid range
        dwRangeSubtotal < dwRank + dwCount && // haven't reach our goal
        dwRetBucketNdx < *pcBucketId; // we still have buffer space
        dwBucketNdx++ )
    {
        // We don't want no empty buckets

        if(m_prglBuckets[dwBucketNdxToNodeAdj + dwBucketNdx] == 0)
        {
            continue;
        }

        // Add the current bucket to the list
        
        prgdwBucketId[dwRetBucketNdx] = m_rgIndexToBucketMeta[dwBucketNdx]->dwBucketId;
        dwRetBucketNdx++;

        // Update our current score
        
        dwRangeSubtotal += m_prglBuckets[dwBucketNdxToNodeAdj + dwBucketNdx];
    }

    *pcBucketId = dwRetBucketNdx;

    m_lock.ReadUnlock();
    
    return hr;
}

HRESULT CLeaderBoardBucketMap::SplitBucket(
    DWORD    dwSplitBucketId,
    LONG     lSplitBucketCount,
    DWORD    dwNewBucketId,
    LONG     lNewBucketCount,
    LONGLONG llNewBucketMaxRating
)
{
    HRESULT hr = S_OK;
    CLeaderBoardBucketMap* pNewBM = NULL;
    DWORD dwBucketNdx;
    DWORD dwTableNdx;
    DWORD dwSplitBucketNdx;

    m_lock.WriteLock();

    //
    // Create and initialize new bucket map with one extra bucket
    //

    GOTO_LDONE_IF_FAILED_ALLOC(
        pNewBM = new CLeaderBoardBucketMap(m_uidLbId) );

    GOTO_LDONE_IF_FAILED_HR(
        pNewBM->Init(m_dwBucketCount + 1) );

    //
    // First copy the existing mappings into the new bucket map. Everything
    // equal or above to the bucket index of the bucket with id dwSplitBucketId 
    // will have the bucketndx + 1.
    //

    GOTO_LDONE_IF_FAILED_HR(
        GetBucketIndex(dwSplitBucketId, &dwSplitBucketNdx) );

    for(dwTableNdx=0; dwTableNdx < m_dwSizeBucketMetaTable; dwTableNdx++)
    {
        if(m_rgBucketMetaTable[dwTableNdx].dwBucketId != 0)
        {
            DWORD dwNewBucketNdx = m_rgBucketMetaTable[dwTableNdx].dwBucketNdx;
            if(dwNewBucketNdx > dwSplitBucketNdx)
                dwNewBucketNdx++;
            
            GOTO_LDONE_IF_FAILED_HR(
                pNewBM->SetBucketId( 
                    dwNewBucketNdx,
                    m_rgBucketMetaTable[dwTableNdx].dwBucketId,
                    m_rgBucketMaxRating[m_rgBucketMetaTable[dwTableNdx].dwBucketNdx]) ); 
        }
    }

    //
    // Map the new bucket.
    //

    GOTO_LDONE_IF_FAILED_HR(
        pNewBM->SetBucketId(dwSplitBucketNdx+1, dwNewBucketId, llNewBucketMaxRating) ); 

    //
    // Now it's time to update the bucket values. Again we will use this object
    // as the model except for the values of the two buckets passed as 
    // parameters.
    //

    for(dwBucketNdx=0; dwBucketNdx < dwSplitBucketNdx; dwBucketNdx++)
    {
        pNewBM->AddToBucketInternal(dwBucketNdx,
            m_prglBuckets[m_dwNodeCount - m_dwLeafCount + dwBucketNdx]);
    }

    dwBucketNdx++;

    for(; dwBucketNdx < m_dwBucketCount; dwBucketNdx++)
    {
        pNewBM->AddToBucketInternal(dwBucketNdx + 1,
            m_prglBuckets[m_dwNodeCount - m_dwLeafCount + dwBucketNdx]);
    }

    pNewBM->AddToBucketInternal(dwSplitBucketNdx, lSplitBucketCount);
    pNewBM->AddToBucketInternal(dwSplitBucketNdx+1, lNewBucketCount);
        
    //
    // Overwrite these object members with the new object members.
    //

    Reset();

    m_rgBucketMetaTable     = pNewBM->m_rgBucketMetaTable;
    m_dwSizeBucketMetaTable = pNewBM->m_dwSizeBucketMetaTable;
    m_rgIndexToBucketMeta   = pNewBM->m_rgIndexToBucketMeta;
    m_rgBucketMaxRating     = pNewBM->m_rgBucketMaxRating;
    m_prglBuckets           = pNewBM->m_prglBuckets;
    m_dwBucketCount         = pNewBM->m_dwBucketCount;
    m_dwLeafCount           = pNewBM->m_dwLeafCount;
    m_dwNodeCount           = pNewBM->m_dwNodeCount;

    pNewBM->m_rgBucketMetaTable    = NULL;
    pNewBM->m_rgIndexToBucketMeta  = NULL;
    pNewBM->m_rgBucketMaxRating    = NULL;
    pNewBM->m_prglBuckets          = NULL;

lDone:

    m_lock.WriteUnlock();

    SAFE_RELEASE(pNewBM);
    
    return hr;
}

HRESULT CLeaderBoardBucketMap::GetTotal(
    DWORD* pdwTotal
)
{
    HRESULT hr = S_OK;

    m_lock.ReadLock();

    GOTO_LDONE_IF(
        m_prglBuckets == NULL,
        hr = E_UNEXPECTED);
    
    GOTO_LDONE_IF(
        m_dwNodeCount == 0,
        hr = E_UNEXPECTED);

    *pdwTotal = m_prglBuckets[0];

lDone:

    m_lock.ReadUnlock();

    return hr;
}

HRESULT CLeaderBoardBucketMap::GetPreviousNonEmptyBucket(
    DWORD  dwBucketId,
    DWORD* pdwPrevBucketId
)
{
    HRESULT hr = S_OK;
    DWORD   dwBucketNdx;
    
    *pdwPrevBucketId = 0;

    m_lock.ReadLock();

    // Map the bucket id into the bucket index
    GOTO_LDONE_IF_FAILED_HR(
        hr = GetBucketIndex(dwBucketId, &dwBucketNdx));

    // Find bucket that comes immediately after it. Skip empty buckets.
    for(;;)
    {
        if(dwBucketNdx == 0)
        {
            // We're already at the first bucket. Nowhere to go from here.
            hr = S_FALSE;
            goto lDone;
        }
        
        // Decrement bucket index
        dwBucketNdx--;
        
        // If the bucket is not empty, that's the one
        if(m_prglBuckets[dwBucketNdx] != 0)
            break;
    }

    // Get the bucket id of this new bucket
    *pdwPrevBucketId = m_rgIndexToBucketMeta[dwBucketNdx]->dwBucketId;


lDone:

    m_lock.ReadUnlock();

    return hr;
}

CLeaderBoardBucketMapList::~CLeaderBoardBucketMapList()
{
    Reset();
}

HRESULT CLeaderBoardBucketMapList::Init()
{
    HRESULT hr = S_OK;

    GOTO_LDONE_IF_FAILED_HR(
        hr = m_table.Initialize(3001, HashFunc));

lDone:

    return hr;
}

HRESULT CLeaderBoardBucketMapList::Reset()
{
    HRESULT hr = S_OK;
    GUID uidLeaderBoardId;
    CLeaderBoardBucketMap* pBM = NULL;

    m_lockTable.WriteLock();

    if(m_table.GetFirst(uidLeaderBoardId, pBM))
    {
        do {
        GOTO_LDONE_IF_FAILED_HR(
            m_table.RemoveAndGoToNext(uidLeaderBoardId, pBM));

        SAFE_RELEASE(pBM);

        } while(m_table.GetNext(uidLeaderBoardId, pBM));
    }

lDone:

    m_lockTable.WriteUnlock();

    return hr;
}

HRESULT CLeaderBoardBucketMapList::CreateBucketMap(
    GUID& uidLeaderBoardId,
    DWORD dwBucketCount )
{
    HRESULT hr = S_OK;
    CLeaderBoardBucketMap* pBM = NULL;

    // Allocate new bucket map object.

    GOTO_LDONE_IF_FAILED_ALLOC(
        pBM = new CLeaderBoardBucketMap(uidLeaderBoardId));

    // Initialize it.

    GOTO_LDONE_IF_FAILED_HR(
        pBM->Init(dwBucketCount));

    // Insert into the table.

    m_lockTable.WriteLock();
    
    hr = m_table.Insert(uidLeaderBoardId, pBM);

    m_lockTable.WriteUnlock();

    GOTO_LDONE_IF_FAILED_HR(
        ("m_table.Insert", hr));

    pBM = NULL;
    
lDone:

    SAFE_RELEASE(pBM);

    return hr;
}

HRESULT CLeaderBoardBucketMapList::GetBucketMap(
    GUID& uidLeaderBoardId,
    CLeaderBoardBucketMap** ppBucketMap )
{
    HRESULT hr = S_OK;
    CLeaderBoardBucketMap* pBM = NULL;

    // Search for object.

    m_lockTable.ReadLock();

    hr = m_table.Find(uidLeaderBoardId, pBM);

    if(SUCCEEDED(hr))
    {
        pBM->AddRef();
    }

    m_lockTable.ReadUnlock();

    if(FAILED(hr))
    {
        // Object not found

        goto lDone;
    }

    // Return bucket map object.

    *ppBucketMap = pBM;

lDone:

    return hr;
}


HRESULT CLeaderBoardBucketMapList::DeleteBucketMap(
    GUID& uidLeaderBoardId )
{
    HRESULT hr = S_OK;
    CLeaderBoardBucketMap* pBM = NULL;

    m_lockTable.WriteLock();

    hr = m_table.Remove(uidLeaderBoardId, pBM);

    m_lockTable.WriteUnlock();

    if(SUCCEEDED(hr))
    {
        pBM->Release();
    }

    return hr;
}

/*******************************************************************************
 CLeaderBoardBucketMapList::ListBucketMaps
 
 Lists all leaderboards including basic information about them.
*******************************************************************************/
HRESULT CLeaderBoardBucketMapList::ListBucketMaps(
    OUT BUCKETMAPINFO**     ppBucketMapInfo, // Receives an array of BUCKETMAPINFO with information about the leaderboards. It must be released by the caller using the delete operator.
    OUT DWORD*              pdwCount )       // Receives the number of items in ppBucketMapInfo   
{
    HRESULT                 hr      = S_OK;
    GUID                    uidLbId;    
    CLeaderBoardBucketMap*  pBucketMap;
    DWORD                   ndx;
    
    *ppBucketMapInfo    = NULL;
    *pdwCount           = 0;

    m_lockTable.WriteLock();

    *pdwCount = m_table.GetEntryCount();

    if(*pdwCount > 0)
    {
        // Allocate bucketmapinfo array
        *ppBucketMapInfo = new BUCKETMAPINFO[m_table.GetEntryCount()];

        if(*ppBucketMapInfo == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto lDone;
        }
        
        ZeroMemory(*ppBucketMapInfo, sizeof(BUCKETMAPINFO) * m_table.GetEntryCount());

        // Enumerate through all bucketmaps
        if(!m_table.GetFirst(uidLbId, pBucketMap))
        {
            hr = E_UNEXPECTED;
            goto lDone;
        }

        ndx = 0;
        do
        {
            // Fill out information about the leaderboard.
            (*ppBucketMapInfo)[ndx].uidLbId         = uidLbId;
            (*ppBucketMapInfo)[ndx].dwBucketCount   = pBucketMap->GetBucketCount();
            pBucketMap->GetTotal(&((*ppBucketMapInfo)[ndx].dwTotalRatings));
            ndx++;
        } while(m_table.GetNext(uidLbId, pBucketMap));
    }

lDone:

    m_lockTable.WriteUnlock();

    return hr;
}

DWORD WINAPI CLeaderBoardBucketMapList::HashFunc( const GUID& Key, DWORD dwTableSize, DWORD dwParam )
{
    return (((DWORD*)&Key)[0] ^ ((DWORD*)&Key)[1]) % dwTableSize;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\bucketmap.h ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved

Module Name:

  bucketmap.h

Abstract:

  In memory bucket map stuff.

--*/

#pragma once

typedef struct 
{
    DWORD    dwBucketId;
    DWORD    dwBucketNdx;
} BUCKET_META, *PBUCKET_META;

class CLeaderBoardBucketMap
{
public:

    IMPLEMENT_REFCOUNT;

    CLeaderBoardBucketMap(GUID& uiLbId);

    ~CLeaderBoardBucketMap();

    HRESULT Init(
        DWORD dwBucketCount );

    HRESULT SetBucketId(
        DWORD    dwBucketNdx,
        DWORD    dwBucketId,
        LONGLONG llMaxRating );

    HRESULT GetBucketIdForRating(
        LONGLONG llRating,
        DWORD    dwMaxBucketSize,
        DWORD    dwPrevBucket,
        DWORD*   pdwBucketId );
    
    HRESULT AddToBucket(
        DWORD dwBucketId,
        LONG lCount,
        LONG* plNewTotal );

    HRESULT GetSubtotal(
        DWORD dwBucketId,
        LONG* plSubtotal );

    HRESULT GetBucketValue(
        DWORD dwBucketId,
        LONG* plValue );

    HRESULT SplitBucket(
        DWORD dwSplitBucketId,
        LONG lSplitBucketCount,
        DWORD dwNewBucketId,
        LONG lNewBucketCount,
        LONGLONG llNewBucketMaxRating );

    HRESULT GetBucketListFromRange(
        DWORD dwRank,
        DWORD dwCount,
        OUT DWORD* pdwRelPos,
        OUT DWORD* prgdwBucketId,
        IN OUT DWORD* pcBucketId );

    HRESULT GetTotal(
        DWORD* pdwTotal );

    HRESULT GetPreviousNonEmptyBucket(
        DWORD  dwBucketId,
        DWORD* pdwPrevBucketId );
    
    DWORD GetBucketCount()
    {
        return m_dwBucketCount;
    }
    
protected:

    HRESULT GetBucketIndex(
        DWORD dwBucketId,
        DWORD* pdwBucketNdx);

    void AddToBucketInternal(
        DWORD dwBucketNdx,
        LONG lCount );

    void Reset();

    LONG __forceinline GetBucketValueFromBucketNdx(DWORD dwBucketNdx)
    {
        return m_prglBuckets[m_dwNodeCount - m_dwLeafCount + dwBucketNdx];
    }

    GUID               m_uidLbId;
    PBUCKET_META       m_rgBucketMetaTable;
    DWORD              m_dwSizeBucketMetaTable;
    PBUCKET_META*      m_rgIndexToBucketMeta;
    LONGLONG*          m_rgBucketMaxRating;
    LONG*              m_prglBuckets;
    DWORD              m_dwBucketCount;
    DWORD              m_dwLeafCount;
    DWORD              m_dwNodeCount;
    CReaderWriterLock3 m_lock;
    CSmallSpinLock     m_updateLock;

};

// BUCKETMAPINFO
// Information related to a leaderboard identified by uidLbId
struct BUCKETMAPINFO
{
    GUID    uidLbId;        // Leaderboard Id
    DWORD   dwBucketCount;  // Bucket Count
    DWORD   dwTotalRatings; // Total ratings
};

class CLeaderBoardBucketMapList
{
public:

    ~CLeaderBoardBucketMapList();
    
    HRESULT Init();

    HRESULT Reset();

    HRESULT CreateBucketMap(
        GUID& uidLeaderBoardId,
        DWORD dwBucketCount );

    HRESULT GetBucketMap(
        GUID& uidLeaderBoardId,
        CLeaderBoardBucketMap** ppBucketMap );

    HRESULT DeleteBucketMap(
        GUID& uidLeaderBoardId );

    HRESULT ListBucketMaps(
        BUCKETMAPINFO** ppBucketMapInfo,
        DWORD* pdwCount);

protected:

    static DWORD WINAPI HashFunc( const GUID& Key, DWORD dwTableSize, DWORD dwParam );

    CTBucketHash<GUID, CLeaderBoardBucketMap*> m_table;

    CReaderWriterLock3 m_lockTable;
};
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\usagedata\FuncXRLUsageStoreNegative.cs ===
using System;
using System.Text;
using System.Threading;
using System.Collections;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.protocol;
using ServerTestFramework.LiveService.UserAccount;

namespace UsageData
{
    /// <summary>
    /// Summary description for FuncXRLUsageStore.
    /// </summary>
    [TestGroup]
    public class FuncXRLUsageStoreNegative : TestNode
    {
        [TestCase]
        public class N_Add_Invalid_User : UsageDataTestBase
        {
            protected override void Execute()
            {
                UserElement userElement = new UserElement();
                userElement.UserId = 0;
                AddSingleNegative(userElement, null, null, VirtualInterface.xstatsfd_int, HResult.E_FAIL, null);
            }
        }

        [TestCase]
        public class N_Add_Invalid_Attribute_Min : UsageDataTestBase
        {
            protected override void Execute()
            {
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) (UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT - 1);
                AddSingleNegative(null, null, attributeElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, null);
            }
        }

        [TestCase]
        public class N_Add_Invalid_Attribute_ValidPlusOne : UsageDataTestBase
        {
            protected override void Execute()
            {
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) (UsageDataAttributes.USAGE_ATTRIBUTE_PERCENTAGE_VIEWED + 1); //MAX ushort USAGE_ATTRIBUTE_PERCENTAGE_VIEWED
                AddSingleNegative(null, null, attributeElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, null);
            }
        }

         [TestCase]
        public class N_Add_Invalid_Attribute_Max : UsageDataTestBase
        {
            protected override void Execute()
            {
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) 65535; //MAX ushort
                AddSingleNegative(null, null, attributeElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, null);
            }
        }
         
         [TestCase] 
        public class N_Add_Rollover_Aggregate_Attribute: UsageDataTestBase
        {
            protected override void Execute()
            {
                UsageStoreElement usageStoreElement = new UsageStoreElement();
                UserElement userElement = new UserElement();
                userElement.UserId = GetUser();
                MediaElement mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElement.intValue = 2147483647; //max int
                attributeElement.isIntegerValue = true;
                //link them all
                usageStoreElement.userElementList.Add(userElement);
                userElement.mediaElementList.Add(mediaElement);
                mediaElement.AttributeElementList.Add(attributeElement);
                //add the good row
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.S_OK, usageStoreElement);
                attributeElement.intValue = 10;
                //make a copy of the old usagestoreelement for verification purposes (since the next update will fail)
                UsageStoreElement expectedResults = new UsageStoreElement();
                UserElement userElement2 = new UserElement();
                userElement2.UserId = userElement.UserId;
                MediaElement mediaElement2 = new MediaElement();
                mediaElement2.MediaId = mediaElement.MediaId;
                AttributeElement attributeElement2 = new AttributeElement();
                attributeElement2.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElement2.intValue = 2147483647; //max int
                attributeElement2.isIntegerValue = true;
                //link them all
                expectedResults.userElementList.Add(userElement2);
                userElement2.mediaElementList.Add(mediaElement2);
                mediaElement2.AttributeElementList.Add(attributeElement2);
                
                
                //update the existing row, causing i_value to rollover
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, expectedResults);
            }
        }

           [TestCase] //the rollover error (casting in sql) will still cause the new rows to be written/replaced
        public class N_Multiple_Rollover_Aggregate_Attribute: UsageDataTestBase
        {
            // usagestoreelement - User 1 - before media element - replace good attribute1
            //                                        | - rollover media  element - new good attribute2
           //                                         |-  rollover media element - update rollover attribute
            // usagestoreelement - User 2 - aftermedia element - new good attribute3
            protected override void Execute()
            {
                UsageStoreElement usageStoreElement = new UsageStoreElement();
                UserElement userElementRollover = new UserElement();
                userElementRollover.UserId = GetUser();
                MediaElement mediaElementRollover = new MediaElement();
                mediaElementRollover.MediaId = Guid.NewGuid();
                AttributeElement attributeElementRollover = new AttributeElement();
                attributeElementRollover.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElementRollover.intValue = 2147483647; //max int
                attributeElementRollover.isIntegerValue = true;
                //link them all
                usageStoreElement.userElementList.Add(userElementRollover);
                userElementRollover.mediaElementList.Add(mediaElementRollover);
                mediaElementRollover.AttributeElementList.Add(attributeElementRollover);

                //create he other row that we will update in the next call
                 //create "before" row to add
                MediaElement beforeMediaElement = new MediaElement();
                beforeMediaElement.MediaId = Guid.NewGuid();
                AttributeElement goodAttributeElement1 = new AttributeElement();
                goodAttributeElement1.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_RATING; //this one is an aggregate type attribute
                goodAttributeElement1.intValue = 500;
                goodAttributeElement1.isIntegerValue = true;
                //add the attribute to the mediaelement
                beforeMediaElement.AttributeElementList.Add(goodAttributeElement1);
                //add this to the user
                userElementRollover.mediaElementList.Add(beforeMediaElement);


                //add the good rows
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.S_OK, usageStoreElement);

                //unlink the media elements
                userElementRollover.mediaElementList.Clear();

               //add back in the "before media element"
               goodAttributeElement1.intValue = -999;
               userElementRollover.mediaElementList.Add(beforeMediaElement);

                //create goodattribute2
                  AttributeElement goodAttributeElement2 = new AttributeElement();
                goodAttributeElement2.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PURCHASECOUNT; //this one is an aggregate type attribute
                goodAttributeElement2.intValue = 2000;
                goodAttributeElement2.isIntegerValue = true;
                //unlink the attributes from rollovermediaelement
                mediaElementRollover.AttributeElementList.Clear();
                //add the good & rollover attributes in correct order
                mediaElementRollover.AttributeElementList.Add(goodAttributeElement2);
                mediaElementRollover.AttributeElementList.Add(attributeElementRollover); 
                //add the rollover media element back to the user element
                userElementRollover.mediaElementList.Add(mediaElementRollover);

                //create "after row"
                UserElement afterUserElement = new UserElement();
                afterUserElement.UserId = GetUser();
                MediaElement afterMediaElement = new MediaElement();
                afterMediaElement.MediaId = Guid.NewGuid();

                AttributeElement goodAttributeElement3 = new AttributeElement();
                goodAttributeElement3.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_STREAMCOUNT; //this one is an aggregate type attribute
                goodAttributeElement3.intValue = 3000;
                goodAttributeElement3.isIntegerValue = true;
                //add the attribute to the mediaelement
                afterMediaElement.AttributeElementList.Add(goodAttributeElement3);
                //add the media element to the new user
                afterUserElement.mediaElementList.Add(afterMediaElement);
                //add the userelement to the usage store (the other user is already in correct order
                usageStoreElement.userElementList.Add(afterUserElement);
                
                //update the existing row, causing i_value to rollover
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, usageStoreElement);
            }
        }

           [TestCase] //pukes because it tries to insert both of the same attributes as new rows (primary key constraint)
        public class N_Multiple_Same_Attributes: UsageDataTestBase
        {
            protected override void Execute()
            { //pukes because it tries to insert both of these as new rows. This error causes no rows to be written

                UsageStoreElement usageStoreElement = new UsageStoreElement();
                
                UserElement userElement = new UserElement();
                userElement.UserId = GetUser();
                usageStoreElement.userElementList.Add(userElement);

                MediaElement mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
                userElement.mediaElementList.Add(mediaElement);

                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElement.intValue = 2147483647;
                attributeElement.isIntegerValue = true;
                mediaElement.AttributeElementList.Add(attributeElement);

                AttributeElement attributeElement2 = new AttributeElement();
                attributeElement2.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElement2.intValue = 55;
                attributeElement2.isIntegerValue = true;
                mediaElement.AttributeElementList.Add(attributeElement2);
                
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, new UsageStoreElement());
             
            }
        }

        [TestCase] //pukes because it tries to insert both of the same attributes as new rows (primary key constraint)
        public class N_Multiple_Same_MediaElements_and_attributes: UsageDataTestBase
        {
            protected override void Execute()
            {
                UsageStoreElement usageStoreElement = new UsageStoreElement();
                
                UserElement userElement = new UserElement();
                userElement.UserId = GetUser();
                usageStoreElement.userElementList.Add(userElement);

                MediaElement mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
                userElement.mediaElementList.Add(mediaElement);

                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; //this one is an aggregate type attribute
                attributeElement.intValue = 9876;
                attributeElement.isIntegerValue = true;
                mediaElement.AttributeElementList.Add(attributeElement);

                MediaElement mediaElement2 = new MediaElement();
                mediaElement2.MediaId = mediaElement.MediaId;//SAME GUID!
                userElement.mediaElementList.Add(mediaElement2);

                /* this is a different attribute, it might pass
                AttributeElement attributeElement2 = new AttributeElement();
                attributeElement2.id = (ushort) UsageDataAttributes.USAGE_ATTRIBUTE_DOWNLOADCOUNT; //this one is an aggregate type attribute
                attributeElement2.intValue = 54321;
                attributeElement2.isIntegerValue = true;
                mediaElement.AttributeElementList.Add(attributeElement2);*/
                
                mediaElement2.AttributeElementList.Add(attributeElement); //SAME attribute!
                
                AddMultipleNegative(usageStoreElement, VirtualInterface.xstatsfd_int, HResult.E_FAIL, new UsageStoreElement());
             
            }
        }

        [TestCase]
        public class N_XML_Multiple_attributes_causing_rollover: UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                Guid newGuid = Guid.NewGuid();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\""+newGuid.ToString()+"\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/>";
                xml += "<Attribute Id=\"1\" Value=\"50\" Source=\"0\"/>";
                xml+= "</Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }
          
       [TestCase]
        public class N_Malformed_xml_emptystring : UsageDataTestBase
        {
            protected override void Execute()
            {
                string xml = "";
                ulong userID = GetUser();
                SubmitMalformedXML(xml, userID);
            }
        }

        [TestCase]
        public class N_Malformed_xml_notxml : UsageDataTestBase
        {
            protected override void Execute()
            {
                string xml = "Hi this is not xml.";
                ulong userID = GetUser();
                SubmitMalformedXML(xml, userID);
            }
        }

       [TestCase]
        public class N_Malformed_xml_missingschema : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
            }
        }

        [TestCase]
        public class N_Malformed_xml_missingclosetags : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </User>" ;
                SubmitMalformedXML(xml, userID);

                xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);

                xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
            }
        }

        [TestCase]
        public class N_Malformed_xml_emptyuserid : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
            }
        }

        [TestCase]
        public class N_Malformed_xml_emptymediaid : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }

        [TestCase]
        public class N_Malformed_xml_emptyattributeid : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"\" Value=\"2147483647\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }
        
        [TestCase]
        public class N_Malformed_xml_emptyattributevalue : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }

          [TestCase]
        public class N_Malformed_xml_emptyattributesource : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }

         [TestCase]
        public class N_Malformed_xml_invalidmediaid : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76aZZc4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"2147483647\" Source=\"0\"/> </Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }

             [TestCase]
        public class N_Malformed_xml_multiple_invalidattributeid : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"h\" Value=\"50\" Source=\"0\"/>";
                xml+= "</Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }

          [TestCase]
        public class N_Malformed_xml_multiple_attributes_emptyattributevalue : UsageDataTestBase
        {
            protected override void Execute()
            {
                ulong userID = GetUser();
                string xml = "<UsageStore xmlns=\"http://www.xboxlive.com/usage\"><User Id=\""+userID+"\"> <Media Id=\"76a05c4c-3f6b-48ba-8e66-7d0218766618\">";
                xml += "<Attribute Id=\"1\" Value=\"50\" Source=\"0\"/>";
                xml += "<Attribute Id=\"2\" Value=\"\" Source=\"0\"/>";
                xml+= "</Media> </User> </UsageStore>" ;
                SubmitMalformedXML(xml, userID);
                
            }
        }
        


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\test\usagedata\UsageData.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;

using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;

namespace UsageData
{
    public enum UsageDataAttributes : uint
    {
        USAGE_ATTRIBUTE_PLAYCOUNT = 1,
        USAGE_ATTRIBUTE_DOWNLOADCOUNT = 2,
        USAGE_ATTRIBUTE_PURCHASECOUNT = 3,
        USAGE_ATTRIBUTE_RATING = 4,
        USAGE_ATTRIBUTE_STREAMCOUNT = 5,
        USAGE_ATTRIBUTE_SENDCOUNT = 6,
        USAGE_ATTRIBUTE_COMMENTCOUNT = 7,
        USAGE_ATTRIBUTE_SKIPCOUNT = 8,
        USAGE_ATTRIBUTE_AD_PLAYCOUNT = 9,
        USAGE_ATTRIBUTE_PERCENTAGE_VIEWED = 10
    }

    public enum UsageDataSources : uint
    {
        USAGE_SOURCE_XBOX = 1,
        USAGE_SOURCE_ZUNE = 2
    }

    public class UsageDataTestBase : TestBase
    {
        protected static UacsCommon2 UACS = new UacsCommon2();

        protected override void Execute()
        {
            throw new Exception("Execute: The method or operation is not implemented.");
        }

        protected string GenerateUsageStoreData(UsageStoreElement usageStoreData)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(UsageDataSubmissionHelper.BeginUsageStoreElement());
            foreach (UserElement userElement in usageStoreData.userElementList)
            {
                stringBuilder.AppendLine(GenerateUserSubmissionData(userElement));
            }
            stringBuilder.AppendLine(UsageDataSubmissionHelper.EndUsageStoreElement());
            return stringBuilder.ToString();
        }

        protected string GenerateUserSubmissionData(UserElement userElement)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(UsageDataSubmissionHelper.BeginUserElement(userElement.UserId));
            foreach (MediaElement mediaElement in userElement.mediaElementList)
            {
                stringBuilder.AppendLine(GenerateMedisSubmissionData(mediaElement));
            }
            stringBuilder.AppendLine(UsageDataSubmissionHelper.EndUserElement());
            return stringBuilder.ToString();
        }

        protected string GenerateMedisSubmissionData(MediaElement mediaElement)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine(UsageDataSubmissionHelper.BeginMediaElement(mediaElement.MediaId, mediaElement.AdId, mediaElement.ProviderId));
            foreach (AttributeElement attributeElement in mediaElement.AttributeElementList)
            {
                stringBuilder.AppendLine(GenerateAttributeSubmissionData(attributeElement));
            }
            stringBuilder.AppendLine(UsageDataSubmissionHelper.EndMediaElement());
            return stringBuilder.ToString();
        }

        protected string GenerateAttributeSubmissionData(AttributeElement attributeElement)
        {
            StringBuilder stringBuilder = new StringBuilder();
            if (attributeElement.isIntegerValue)
            {
                if (attributeElement.includeDate)
                {
                    stringBuilder.AppendLine(UsageDataSubmissionHelper.AddAttribute(attributeElement.id, attributeElement.date, attributeElement.intValue, attributeElement.Source));
                }
                else
                {
                    stringBuilder.AppendLine(UsageDataSubmissionHelper.AddAttribute(attributeElement.id, attributeElement.intValue, attributeElement.Source));
                }
            }
            else
            {
                if (attributeElement.includeDate)
                {
                    stringBuilder.AppendLine(UsageDataSubmissionHelper.AddAttribute(attributeElement.id, attributeElement.date, attributeElement.binaryValue, attributeElement.Source));
                }
                else
                {
                    stringBuilder.AppendLine(UsageDataSubmissionHelper.AddAttribute(attributeElement.id, attributeElement.binaryValue, attributeElement.Source));
                }
            }
            return stringBuilder.ToString();
        }

        protected UsageStoreResponse IssueRequest(string xml, string viface, ulong UserId)
        {
            UsageStoreRequest request = new UsageStoreRequest();
            UsageStoreResponse response = new UsageStoreResponse();
            request.XML = xml;
            request.XMLSize = (uint)xml.Length;

            // Setup SG Auth if needed
			CSGInfo slot = new CSGInfo();

			// If we have some mappable SGAUTH and we are requesting a valid auth
			// method load the slot from the FakeSG
			if( viface == VirtualInterface.xstatsfd )
			{
                ServerTestFramework.LiveService.PresNotiCommon.PNUser user = ServerTestFramework.LiveService.PresNotiCommon.PNUser.Find(UserId);
				GlobalFakeSG.FakeSG.LoadSlot( ref slot, user.Xbox.XboxId);
			}

   			MemoryStream reqStream = new MemoryStream();
			request.WriteStream( reqStream );

            IPEndPoint endPoint = Global.XEnv.GetVirtualInterface(viface);
            
            StringBuilder sbURL;
            sbURL = new StringBuilder();
            sbURL.Append("POST ");
            sbURL.Append(request.GetXRL());
            sbURL.Append(" HTTP/1.0\r\n");
            sbURL.Append("Host: " + endPoint.ToString() + "\r\n");
            sbURL.Append("Content-Type: xon/" + ((uint)XOService.Stats).ToString("x") + "\r\n");
            sbURL.Append("User-Agent: " + ((uint)XOService.Stats).ToString("x") + "/0.10.4715\r\n");
            sbURL.Append("Content-Length: " + reqStream.Length + "\r\n\r\n");
            System.Text.ASCIIEncoding AE = new System.Text.ASCIIEncoding();

            ServerTestFramework.LiveService.FDTransaction fd = new ServerTestFramework.LiveService.FDTransaction();
            fd.endPoint = endPoint;
            fd.ExecuteTCP(AE.GetBytes(sbURL.ToString()), reqStream, ref slot, true);

            switch (fd.httpStatus)
            {
                case HttpStatusCode.OK:
                    if (fd.ResponseContents.Length > 0)
                    {
                        MemoryStream inStream = new MemoryStream(fd.ResponseContents);
                        response.ReadStream(inStream);
                    }
                    break;

                case HttpStatusCode.InternalServerError:
                    throw new XErrException(fd.XErr, "IssueRequest failed with X-Err: 0x" + fd.XErr.ToString("X8") + ", " + Global.XErrToString(fd.XErr));
                default:
                    throw new HttpStatusCodeException(fd.httpStatus, "Transact FD Failed with server: " + fd.endPoint.ToString() + ", status Code: " + fd.httpStatus);
            }

            return response;
        }

        protected ulong GetUser()
        {
            ServerTestFramework.LiveService.Presence.FriendsCommon fc = new ServerTestFramework.LiveService.Presence.FriendsCommon();
            ServerTestFramework.LiveService.PresNotiCommon.PNUser user = fc.CreateXenonUser(true);
            return user.UserId;
        }

        public void ValidateUODBData(UsageDataRow previous, UsageDataRow post, int i_value, byte[] vb_value)
        {
            if (previous == null)
            {
                // expect that this is the initial insert
                if (UsageDefs.IsIntegerValueAttribute((ushort)post.i_attribute_id))
                {
                    Assert.IsTrue(post.i_value == i_value, "Integer Value not inserted correctly for new row");
                }
                else if (UsageDefs.IsBinaryValueAttribute((ushort)post.i_attribute_id))
                {
                    Assert.IsTrue(post.vb_value == vb_value, "Binary Value not inserted correctly for new row");
                }
                else
                {
                    Assert.IsTrue(false, "Attribute not flagged as either Aggregate or Replace.");
                }
            }
            else
            {
                // ensure the update happened correctly
                if (UsageDefs.IsIntegerValueAttribute((ushort)post.i_attribute_id))
                {
                    if (UsageDefs.IsAggregateAttribute((ushort)post.i_attribute_id))
                    {
                        Assert.IsTrue(post.i_value == previous.i_value + i_value, "Integer Value not updated correctly for existing row");
                    }
                    else if (UsageDefs.IsReplaceAttribute((ushort)post.i_attribute_id))
                    {
                        Assert.IsTrue(post.i_value == i_value, "Integer Value not replaced correctly for existing row");
                    }
                    else
                    {
                        Assert.IsTrue(false, "Attribute not flagged as either Aggregate or Replace.");
                    }
                }
                else if(UsageDefs.IsBinaryValueAttribute((ushort)post.i_attribute_id))
                {
                    if (UsageDefs.IsReplaceAttribute((ushort)post.i_attribute_id))
                    {
                        Assert.IsTrue(post.vb_value == vb_value, "Binary Value not inserted correctly for new row");
                    }
                    else
                    {
                        Assert.IsTrue(false, "Binary Value Attribute not correctly flagged as Replace.");
                    }
                }
            }
        }

        public UsageDataRow GetRow(ulong UserId, Guid MediaId, int AttributeId)
        {
            UsageDataRow row = null;
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                uint[] usersPerUodb = new uint[ws.PhysicalPartitions];
                string q1 = "Select * from  [uodb].[dbo].[t_usage_user_media_attribute_data] where bi_user_puid='" + UserId + "' and b_media_id = '" + MediaId.ToString() + "' and i_attribute_id = " + AttributeId.ToString() + ";";
                //for every UODB...
                for (int k = 0; k < ws.PhysicalPartitions; k++)
                {
                    //run q1 on this UODB
                    ws.PhysicalPartition = k;
                    ws.CommandSql = q1;
                    using (WstDataReader r = ws.Execute())
                    {
                        while (r.Read())
                        {
                            int i_media_type = (int)r.GetInt32(3);
                            int i_value = (int)r.GetInt32(4);
                            byte[] vb_value = null; // (byte[])r.GetBytes(4);
                            row = new UsageDataRow(UserId, MediaId.ToString(), AttributeId, i_media_type, i_value, vb_value);
                        }

                        r.Close();
                    }

                }
            }

            return row;
        }
        public UsageDataRow FormExpectedRow (UsageStoreElement expectedResults, ulong UserId, Guid MediaId, int AttributeId)
        {

             foreach (UserElement userElement in expectedResults.userElementList)
            {
                foreach (MediaElement mediaElement in userElement.mediaElementList)
                {
                    foreach (AttributeElement attributeElement in mediaElement.AttributeElementList)
                    {
                        if (userElement.UserId == UserId && mediaElement.MediaId== MediaId && attributeElement.id == AttributeId)
                        {
                            UsageDataRow expectedRow = new UsageDataRow();
                            expectedRow.bi_user_puid = UserId;
                            expectedRow.b_media_id = MediaId.ToString();
                            expectedRow.i_attribute_id = AttributeId;
                            if (attributeElement.isIntegerValue)
                            {
                                  expectedRow.i_value = attributeElement.intValue;
                            }
                            else
                            {
                                ASCIIEncoding enc = new ASCIIEncoding();
                                expectedRow.vb_value = enc.GetBytes(attributeElement.binaryValue);
                            }
                            return expectedRow;
                        }
                    }
                }
            }

             return null;
             
        }

        protected void AddMultipleAll(int NumUsers, int NumMedia, ushort[] AttributeIds, int Source, string viface)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            for (int i = 0; i < NumUsers; i++)
            {
                UserElement userElement = new UserElement();
                userElement.UserId = GetUser();
                usageStoreElement.userElementList.Add(userElement);
                for (int j = 0; j < NumMedia; j++)
                {
                    MediaElement mediaElement = new MediaElement();
                    mediaElement.MediaId = Guid.NewGuid();
                    userElement.mediaElementList.Add(mediaElement);
                    foreach (ushort AttributeId in AttributeIds)
                    {
                        AttributeElement attributeElement = new AttributeElement();
                        attributeElement.id = AttributeId;
                        attributeElement.intValue = 1;
                        attributeElement.isIntegerValue = true;
                        attributeElement.binaryValue = null;
                        attributeElement.Source = Source;
                        mediaElement.AttributeElementList.Add(attributeElement);
                    }
                }
            }

            string xml = GenerateUsageStoreData(usageStoreElement);
            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow preRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        Assert.IsTrue(preRow == null, "Row should not have been found in uodb");
                    }
                }
            }

            UsageStoreResponse response = IssueRequest(xml, viface, 0);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow postRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        ValidateUODBData(null, postRow, AttributeElement.intValue, null);
                    }
                }
            }

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void AddMultipleMedia(int NumMedia, ushort AttributeId, int Source, string viface, bool IsAggregate)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            UserElement userElement = new UserElement();
            userElement.UserId = GetUser();
            usageStoreElement.userElementList.Add(userElement);
            for (int i = 0; i < NumMedia; i++)
            {
                MediaElement mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
                userElement.mediaElementList.Add(mediaElement);
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = AttributeId;
                attributeElement.intValue = 1;
                attributeElement.isIntegerValue = true;
                attributeElement.binaryValue = null;
                attributeElement.Source = Source;
                mediaElement.AttributeElementList.Add(attributeElement);
            }

            string xml = GenerateUsageStoreData(usageStoreElement);
            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow preRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        Assert.IsTrue(preRow == null, "Row should not have been found in uodb");
                    }
                }
            }

            UsageStoreResponse response = IssueRequest(xml, viface, 0);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow postRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        ValidateUODBData(null, postRow, AttributeElement.intValue, null);
                    }
                }
            }

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void AddMultipleUser(int NumUsers, ushort AttributeId, int Source, string viface, bool IsAggregate)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            for (int i = 0; i < NumUsers; i++)
            {
                UserElement userElement = new UserElement();
                userElement.UserId = GetUser();
                usageStoreElement.userElementList.Add(userElement);
                MediaElement mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
                userElement.mediaElementList.Add(mediaElement);
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = AttributeId;
                attributeElement.intValue = 1;
                attributeElement.isIntegerValue = true;
                attributeElement.binaryValue = null;
                attributeElement.Source = Source;
                mediaElement.AttributeElementList.Add(attributeElement);
            }

            string xml = GenerateUsageStoreData(usageStoreElement);
            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow preRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        Assert.IsTrue(preRow == null, "Row should not have been found in uodb");
                    }
                }
            }

            UsageStoreResponse response = IssueRequest(xml, viface, 0);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            foreach (UserElement UserElement in usageStoreElement.userElementList)
            {
                foreach (MediaElement MediaElement in UserElement.mediaElementList)
                {
                    foreach (AttributeElement AttributeElement in MediaElement.AttributeElementList)
                    {
                        UsageDataRow postRow = GetRow(UserElement.UserId, MediaElement.MediaId, AttributeElement.id);
                        ValidateUODBData(null, postRow, AttributeElement.intValue, null);
                    }
                }
            }

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void AddMultipleAttribute(ushort[] AttributeIds, int Source, string viface)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            UserElement userElement = new UserElement();
            userElement.UserId = GetUser();
            usageStoreElement.userElementList.Add(userElement);
            MediaElement mediaElement = new MediaElement();
            mediaElement.MediaId = Guid.NewGuid();
            userElement.mediaElementList.Add(mediaElement);
            foreach (ushort AttributeId in AttributeIds)
            {
                AttributeElement attributeElement = new AttributeElement();
                attributeElement.id = AttributeId;
                attributeElement.intValue = 1;
                attributeElement.isIntegerValue = true;
                attributeElement.binaryValue = null;
                attributeElement.Source = Source;
                mediaElement.AttributeElementList.Add(attributeElement);
            }
            string xml = GenerateUsageStoreData(usageStoreElement);

            foreach (AttributeElement attributeElement in mediaElement.AttributeElementList)
            {
                UsageDataRow preRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                Assert.IsTrue(preRow == null, "Row should not have been found in uodb");
            }

            UsageStoreResponse response = IssueRequest(xml, viface, userElement.UserId);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            foreach (AttributeElement attributeElement in mediaElement.AttributeElementList)
            {
                UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                ValidateUODBData(null, postRow, attributeElement.intValue, null);
            }

            ResultCode = TEST_RESULTS.PASSED;

        }

        protected void AddSingleNew(ushort AttributeId, int Source, string viface, bool IsAggregate)
        {
            AddSingleNew(AttributeId, Source, viface, IsAggregate, 1, null);
        }

        protected void AddSingleNew(ushort AttributeId, int Source, string viface, bool IsAggregate, int intValue, string binaryValue)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            UserElement userElement = new UserElement();
            userElement.UserId = GetUser();
            usageStoreElement.userElementList.Add(userElement);
            MediaElement mediaElement = new MediaElement();
            mediaElement.MediaId = Guid.NewGuid();
            userElement.mediaElementList.Add(mediaElement);
            AttributeElement attributeElement = new AttributeElement();
            attributeElement.id = AttributeId;
            attributeElement.intValue = intValue;
            attributeElement.isIntegerValue = true;
            attributeElement.binaryValue = binaryValue;
            attributeElement.Source = Source;
            mediaElement.AttributeElementList.Add(attributeElement);
            string xml = GenerateUsageStoreData(usageStoreElement);

            UsageDataRow preRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
            Assert.IsTrue(preRow == null, "Row should not have been found in uodb");

            UsageStoreResponse response = IssueRequest(xml, viface, userElement.UserId);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
            ValidateUODBData(preRow, postRow, attributeElement.intValue, null);

            Assert.IsTrue(IsAggregate ? UsageDefs.IsAggregateAttribute(attributeElement.id) && !UsageDefs.IsReplaceAttribute(attributeElement.id) : !UsageDefs.IsAggregateAttribute(attributeElement.id) && UsageDefs.IsReplaceAttribute(attributeElement.id), "Play Count should be aggregate");

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void AddSingleNegative(UserElement userElement, MediaElement mediaElement, AttributeElement attributeElement, string viface, uint hr, UsageDataRow existingRow)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            //create the user element
            if (userElement == null)
            {
                userElement = new UserElement();
                userElement.UserId = GetUser(); 
            }
            usageStoreElement.userElementList.Add(userElement);

            //setup the media element if not specified
            if (mediaElement == null)
            {
                mediaElement = new MediaElement();
                mediaElement.MediaId = Guid.NewGuid();
            }
            userElement.mediaElementList.Add(mediaElement);
            
            //create the attribute element
            if (attributeElement == null)
            {
                //fill with good values. they were chosen randomly.
                attributeElement = new AttributeElement();
                attributeElement.id = (ushort)UsageDataAttributes.USAGE_ATTRIBUTE_PLAYCOUNT; 
                attributeElement.intValue = 12345; 
                attributeElement.isIntegerValue = true;
            }
            mediaElement.AttributeElementList.Add(attributeElement);

            string xml = GenerateUsageStoreData(usageStoreElement);
            //check for the existing row, if there is one
            UsageDataRow preRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
            if(existingRow == null)
            {
                Assert.IsTrue(preRow == null, "Row should not have been found in uodb");
            }
            else
            {
                ValidateUODBData(existingRow, preRow, 0, null);
            }
                
            try
            {
                UsageStoreResponse response = IssueRequest(xml, viface, userElement.UserId);
                if (response.hr != hr)
                {
                    throw new HResultException(response.hr, "Expected hr was: "+hr);
                }
            }
            catch(XErrException)
            {
                if (hr == HResult.E_FAIL)
                {
                    //this exception is expected, so eat it!
                }
                else
                {
                    throw;
                }
            }
            
            if (hr != HResult.E_FAIL)
            {
                UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                ValidateUODBData(preRow, postRow, attributeElement.intValue, null);

//            Assert.IsTrue(IsAggregate ? UsageDefs.IsAggregateAttribute(attributeElement.id) && !UsageDefs.IsReplaceAttribute(attributeElement.id) : !UsageDefs.IsAggregateAttribute(attributeElement.id) && UsageDefs.IsReplaceAttribute(attributeElement.id), "Play Count should be aggregate");
            }
            else
            {
                //the server failed as expected, check if the existing row was not overridden or changed
                if (existingRow != null)
                {
                    UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                    ValidateUODBData(existingRow, postRow, 0, null);
                }
                else //the was no existing row, make sure one wasn't created
                {
                    UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                    Assert.IsTrue(postRow == null, "Row should not have been found in uodb");
                }
            }
            
            ResultCode = TEST_RESULTS.PASSED;
        }

          protected void AddMultipleNegative(UsageStoreElement usageStoreElement, string viface, uint hr, UsageStoreElement expectedResults)
        {
            
            string xml = GenerateUsageStoreData(usageStoreElement);
            
            try
            {
                UsageStoreResponse response = IssueRequest(xml, viface, 0);
                if (response.hr != hr)
                {
                    throw new HResultException(response.hr, "Expected hr was: "+hr);
                }
            }
            catch(XErrException)
            {
                if (hr == HResult.E_FAIL)
                {
                    //this exception is expected, so eat it!
                }
                else
                {
                    throw;
                }
            }
            
            //verify the expected results, if there are any
            if (expectedResults != null)
            {
                foreach (UserElement userElement in usageStoreElement.userElementList)
                {
                    foreach (MediaElement mediaElement in userElement.mediaElementList)
                    {
                        foreach (AttributeElement attributeElement in mediaElement.AttributeElementList)
                        {
                            UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
                            UsageDataRow expectedRow = FormExpectedRow(expectedResults, userElement.UserId, mediaElement.MediaId, attributeElement.id);
                            if (expectedRow != null)
                            {
                                int ivalue = 0;
                                if (UsageDefs.IsReplaceAttribute((ushort)attributeElement.id ))
                                {
                                    //hack validateUODB to do what i want it to do. :(
                                    ivalue = expectedRow.i_value;
                                }
                                ValidateUODBData(expectedRow, postRow, ivalue, null);
                            }
                            else
                            {
                                Assert.IsTrue(postRow == null, "Row should not have been found in uodb");
                            }
                        }
                    }
                }
            }
           
            
            
            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void AddSingleExisting(ushort AttributeId, int Source, string viface, bool IsAggregate)
        {
            AddSingleExisting(AttributeId, Source, viface, IsAggregate, 1, 2, null, null);
        }

        protected void AddSingleExisting(ushort AttributeId, int Source, string viface, bool IsAggregate, int intValue, int intValue2, string binaryValue, string binaryValue2)
        {
            UsageStoreElement usageStoreElement = new UsageStoreElement();
            UserElement userElement = new UserElement();
            userElement.UserId = GetUser();
            usageStoreElement.userElementList.Add(userElement);
            MediaElement mediaElement = new MediaElement();
            mediaElement.MediaId = Guid.NewGuid();
            userElement.mediaElementList.Add(mediaElement);
            AttributeElement attributeElement = new AttributeElement();
            attributeElement.id = AttributeId;
            attributeElement.intValue = intValue;
            attributeElement.isIntegerValue = true;
            attributeElement.binaryValue = binaryValue;
            attributeElement.Source = Source;
            mediaElement.AttributeElementList.Add(attributeElement);
            string xml = GenerateUsageStoreData(usageStoreElement);

            UsageStoreResponse response = IssueRequest(xml, viface, userElement.UserId);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            UsageDataRow preRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
            ValidateUODBData(null, preRow, attributeElement.intValue, null);

            // the second time through add 2
            attributeElement.intValue = intValue2;
            attributeElement.binaryValue = binaryValue2;
            xml = GenerateUsageStoreData(usageStoreElement);

            response = IssueRequest(xml, viface, userElement.UserId);
            if (response.hr != HResult.S_OK)
            {
                throw new HResultException(response.hr);
            }

            UsageDataRow postRow = GetRow(userElement.UserId, mediaElement.MediaId, attributeElement.id);
            ValidateUODBData(preRow, postRow, attributeElement.intValue, null);

            Assert.IsTrue(IsAggregate ? UsageDefs.IsAggregateAttribute(attributeElement.id) && !UsageDefs.IsReplaceAttribute(attributeElement.id) : !UsageDefs.IsAggregateAttribute(attributeElement.id) && UsageDefs.IsReplaceAttribute(attributeElement.id), "Play Count should be aggregate");

            ResultCode = TEST_RESULTS.PASSED;
        }

        protected void SubmitMalformedXML(string xml, ulong UserId)
        {
            try
            {
                UsageStoreResponse response = IssueRequest(xml, VirtualInterface.xstatsfd_int, UserId);
                if (response.hr != HResult.E_FAIL)
                {
                    throw new HResultException(response.hr, "Expected service to return E_FAIL");
                }
            }
            catch(XErrException)
            {
                //this is expected to throw an exception, so eat it!
            }
            
            ResultCode = TEST_RESULTS.PASSED;
        }


    }

    public class UsageStoreElement
    {
        public List<UserElement> userElementList = new List<UserElement>();
    }

    public class UserElement
    {
        public ulong UserId;
        public List<MediaElement> mediaElementList = new List<MediaElement>();
    }

    public class MediaElement
    {
        public Guid MediaId;
        public string AdId = null;
        public string ProviderId = null;
        public List<AttributeElement> AttributeElementList = new List<AttributeElement>();
    }

    public class AttributeElement
    {
        public ushort id;
        public DateTime date;
        public int intValue;
        public string binaryValue = null;
        public int Source;
        public bool isIntegerValue = false;
        public bool includeDate = false;
    }

   /* public class NegativeTestCaseParamaters
    {
        public HResult expectedHR = 0;
        //user paramaters
        public bool useRealUser = true;
        public ulong fakeUserID = 0;
        
        public guid mediaIDGuid = Guid.NewGuid();
        public string mediaAdID = null;
        public string mediaProviderID = null;
        
        public ushort attributeID;
        public DateTime date;
        public int intValue;
        public string binaryValue = null;
        public int Source;
        public bool isIntegerValue = false;
        public bool includeDate = false;
    }*/

    class UsageDataSubmissionHelper
    {
        public static string BeginUsageStoreElement()
        {
            return "<UsageStore xmlns=\"http://www.xboxlive.com/usage\">";
        }

        public static string EndUsageStoreElement()
        {
            return "</UsageStore>";
        }

        public static string BeginUserElement(ulong UserId)
        {
            return string.Format("<User Id=\"{0}\">", String.Format("{0:x}", UserId));
        }

        public static string EndUserElement()
        {
            return string.Format("</User>");
        }

        public static string BeginMediaElement(Guid MediaId, string AdId, string ProviderId)
        {
            return string.Format("<Media Id=\"{0}\"{1}{2}>", MediaId, AdId == null ? "" : string.Format(" AdId=\"{0}\"", AdId), ProviderId == null ? "" : string.Format(" ProviderId=\"{0}\"", ProviderId));
        }

        public static string EndMediaElement()
        {
            return string.Format("</Media>");
        }

        public static string AddAttribute(int AttributeId, DateTime Date, int Value, int Source)
        {
            return string.Format("<Attribute Id=\"{0}\" Date=\"{1}\" Value=\"{2}\" Source=\"{3}\"/>", AttributeId, Date, Value, Source);
        }

        public static string AddAttribute(int AttributeId, DateTime Date, string Value, int Source)
        {
            return string.Format("<Attribute Id=\"{0}\" Date=\"{1}\" Value=\"{2}\" Source=\"{3}\"/>", AttributeId, Date, Value, Source);
        }

        public static string AddAttribute(int AttributeId, int Value, int Source)
        {
            return string.Format("<Attribute Id=\"{0}\" Value=\"{1}\" Source=\"{2}\"/>", AttributeId, Value, Source);
        }

        public static string AddAttribute(int AttributeId, string Value, int Source)
        {
            return string.Format("<Attribute Id=\"{0}\" Value=\"{1}\" Source=\"{2}\"/>", AttributeId, Value, Source);
        }
    }

    public class UsageDataRow
    {
        public ulong bi_user_puid;
        public string b_media_id;
        public int i_attribute_id;
        public int i_media_type;
        public int i_value;
        public byte[] vb_value;

        public UsageDataRow()
        {

        }

        public UsageDataRow(ulong bi_user_puid, string b_media_id, int i_attribute_id, int i_media_type, int i_value, byte[] vb_value)
        {
            this.bi_user_puid = bi_user_puid;
            this.b_media_id = b_media_id;
            this.i_attribute_id = i_attribute_id;
            this.i_media_type = i_media_type;
            this.i_value = i_value;
            this.vb_value = vb_value;
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\srv.h ===
//------------------------------------------------------------
// Open Data Services header file: srv.h
// Copyright (c) 1989, 1990, 1991, 1997 by Microsoft Corp.
//

// Avoid double inclusion
#ifndef _ODS_SRV_H_
#define _ODS_SRV_H_

#include "windows.h"

// ODS uses pack(4) on all CPU types
#pragma pack(4)

#ifdef __cplusplus
extern "C" {
#endif

// define model
#if !defined( FAR )
#define FAR far
#endif

//------------------------------------------------------------
// Formats of data types
#if !defined(DBTYPEDEFS) // Do not conflict with DBLIB definitions
#if !defined(MAXNUMERICLEN) // Do not conflict with ODBC definitions

#define DBTYPEDEFS

typedef unsigned char DBBOOL;
typedef unsigned char DBBYTE;
typedef unsigned char DBTINYINT;
typedef short DBSMALLINT;
typedef unsigned short DBUSMALLINT;
typedef long DBINT;
typedef char DBCHAR;
typedef unsigned char DBBINARY;
typedef unsigned char DBBIT;
typedef double DBFLT8;

typedef struct srv_datetime 
{	// Format for SRVDATETIME
    long dtdays;            // number of days since 1/1/1900
    unsigned long dttime;   // number 300th second since mid
} DBDATETIME;				

typedef struct srv_money 
{		// Format for SRVMONEY
    long mnyhigh;
    unsigned long mnylow;
} DBMONEY;

typedef float DBFLT4;
typedef long DBMONEY4;

typedef struct dbdatetime4 
{	// Format for SRVDATETIM4
    unsigned short numdays; // number of days since 1/1/1900
    unsigned short nummins; // number of minutes sicne midnight
} DBDATETIM4;

#define MAXNUMERICLEN	16
typedef struct dbnumeric	
{	// Format for SRVNUMERIC,SRVNUMERICN,SRVDECIMAL,SRVDECIMALN
	BYTE precision;
	BYTE scale;
	BYTE sign;
	BYTE val[MAXNUMERICLEN];
} DBNUMERIC;
typedef DBNUMERIC DBDECIMAL;

#endif  // #if !defined(MAXNUMERICLEN)
#endif  // #if !defined( DBTYPEDEFS )

//------------------------------------------------------------
// Constants used by APIs

// Type Tokens
#define SRV_TDS_NULL           (BYTE) 0x1f
#define SRV_TDS_TEXT           (BYTE) 0x23
#define SRV_TDS_GUID           (BYTE) 0x24
#define SRV_TDS_VARBINARY      (BYTE) 0x25
#define SRV_TDS_INTN           (BYTE) 0x26
#define SRV_TDS_VARCHAR        (BYTE) 0x27
#define SRV_TDS_BINARY         (BYTE) 0x2d
#define SRV_TDS_IMAGE          (BYTE) 0x22
#define SRV_TDS_CHAR           (BYTE) 0x2f
#define SRV_TDS_INT1           (BYTE) 0x30
#define SRV_TDS_BIT            (BYTE) 0x32
#define SRV_TDS_INT2           (BYTE) 0x34
#define SRV_TDS_DECIMAL        (BYTE) 0x37
#define SRV_TDS_INT4           (BYTE) 0x38
#define SRV_TDS_DATETIM4       (BYTE) 0x3a
#define SRV_TDS_FLT4           (BYTE) 0x3b
#define SRV_TDS_MONEY          (BYTE) 0x3c
#define SRV_TDS_DATETIME       (BYTE) 0x3d
#define SRV_TDS_FLT8           (BYTE) 0x3e
#define SRV_TDS_NUMERIC        (BYTE) 0x3f
#define SRV_TDS_SSVARIANT      (BYTE) 0x62
#define SRV_TDS_NTEXT		   (BYTE) 0x63
#define SRV_TDS_BITN		   (BYTE) 0x68
#define SRV_TDS_DECIMALN       (BYTE) 0x6a
#define SRV_TDS_NUMERICN       (BYTE) 0x6c
#define SRV_TDS_FLTN           (BYTE) 0x6d
#define SRV_TDS_MONEYN         (BYTE) 0x6e
#define SRV_TDS_DATETIMN       (BYTE) 0x6f
#define SRV_TDS_MONEY4         (BYTE) 0x7a
#define SRV_TDS_INT8           (BYTE) 0x7f
#define SRV_TDS_BIGVARBINARY   (BYTE) 0xA5
#define SRV_TDS_BIGVARCHAR     (BYTE) 0xA7
#define SRV_TDS_BIGBINARY      (BYTE) 0xAD
#define SRV_TDS_BIGCHAR        (BYTE) 0xAF
#define SRV_TDS_NVARCHAR	   (BYTE) 0xe7
#define SRV_TDS_NCHAR		   (BYTE) 0xef

// Datatypes
// Also: values of symbol parameter to srv_symbol when type = SRV_DATATYPE
#define SRVNULL        SRV_TDS_NULL
#define SRVTEXT        SRV_TDS_TEXT
#define SRVGUID        SRV_TDS_GUID
#define SRVVARBINARY   SRV_TDS_VARBINARY
#define SRVINTN        SRV_TDS_INTN
#define SRVVARCHAR     SRV_TDS_VARCHAR
#define SRVBINARY      SRV_TDS_BINARY
#define SRVIMAGE       SRV_TDS_IMAGE
#define SRVCHAR        SRV_TDS_CHAR
#define SRVINT1        SRV_TDS_INT1
#define SRVBIT         SRV_TDS_BIT
#define SRVINT2        SRV_TDS_INT2
#define SRVDECIMAL	   SRV_TDS_DECIMAL
#define SRVINT4        SRV_TDS_INT4
#define SRVDATETIM4    SRV_TDS_DATETIM4
#define SRVFLT4        SRV_TDS_FLT4    
#define SRVMONEY       SRV_TDS_MONEY
#define SRVDATETIME    SRV_TDS_DATETIME
#define SRVFLT8        SRV_TDS_FLT8
#define SRVNUMERIC	   SRV_TDS_NUMERIC
#define SRVSSVARIANT   SRV_TDS_SSVARIANT
#define SRVNTEXT	   SRV_TDS_NTEXT
#define SRVBITN		   SRV_TDS_BITN
#define SRVDECIMALN	   SRV_TDS_DECIMALN
#define SRVNUMERICN	   SRV_TDS_NUMERICN
#define SRVFLTN        SRV_TDS_FLTN
#define SRVMONEYN      SRV_TDS_MONEYN
#define SRVDATETIMN    SRV_TDS_DATETIMN
#define SRVMONEY4      SRV_TDS_MONEY4
#define SRVINT8        SRV_TDS_INT8  
#define SRVBIGVARBINARY SRV_TDS_BIGVARBINARY
#define SRVBIGVARCHAR  SRV_TDS_BIGVARCHAR
#define SRVBIGBINARY   SRV_TDS_BIGBINARY
#define SRVBIGCHAR     SRV_TDS_BIGCHAR
#define SRVNVARCHAR	   SRV_TDS_NVARCHAR
#define SRVNCHAR	   SRV_TDS_NCHAR

// values for srv_symbol type parameter
#define SRV_ERROR      0
#define SRV_DONE       1
#define SRV_DATATYPE   2
#define SRV_EVENT      4

// values for srv_symbol symbol parameter, when type = SRV_ERROR
#define SRV_ENO_OS_ERR     0
#define SRV_INFO           1
#define SRV_FATAL_PROCESS  10
#define SRV_FATAL_SERVER   19

// Types of server events
// Also: values for srv_symbol symbol parameter, when type = SRV_EVENT
#define SRV_CONTINUE       0
#define SRV_LANGUAGE       1
#define SRV_CONNECT        2
#define SRV_RPC            3
#define SRV_RESTART        4
#define SRV_DISCONNECT     5
#define SRV_ATTENTION      6
#define SRV_SLEEP          7
#define SRV_START          8
#define SRV_STOP           9
#define SRV_EXIT           10
#define SRV_CANCEL         11
#define SRV_SETUP          12
#define SRV_CLOSE          13
#define SRV_PRACK          14
#define SRV_PRERROR        15
#define SRV_ATTENTION_ACK  16
#define SRV_CONNECT_V7	   16	// TDS type for TDS 7 clients.  Overloaded with SRV_ATTENTION_ACK
#define SRV_SKIP		   17
#define SRV_TRANSMGR	   18
#define SRV_PRELOGIN	   19
#define SRV_OLEDB	       20
#define SRV_INTERNAL_HANDLER 99
#define SRV_PROGRAMMER_DEFINED  100

// values for srv_sfield field parameter
#define SRV_SERVERNAME          0
#define SRV_VERSION             6

// Length to indicate string is null terminated
#define SRV_NULLTERM   -1

// values of msgtype parameter to srv_sendmsg
#define SRV_MSG_INFO    1
#define SRV_MSG_ERROR   2

// values of status parameter to srv_senddone
// Also: values for symbol parameters to srv_symbol when type = SRV_DONE
#define SRV_DONE_FINAL			(USHORT) 0x0000
#define SRV_DONE_MORE			(USHORT) 0x0001
#define SRV_DONE_ERROR			(USHORT) 0x0002
#define SRV_DONE_COUNT			(USHORT) 0x0010
#define SRV_DONE_RPC_IN_BATCH   (USHORT) 0x0080

// return values of srv_paramstatus
#define SRV_PARAMRETURN		0x0001
#define SRV_PARAMDEFAULT    0x0002
#define SRV_PARAMSORTORDER	0x0004	// This is sent by clients in RPC, unset in processRPC

// return values of srv_rpcoptions
#define SRV_RECOMPILE		0x0001
#define SRV_NOMETADATA		0x0002

// values of field parameter to srv_pfield
//#define SRV_LANGUAGE 1   already defined above
//#define SRV_EVENT    4   already defined above
#define SRV_SPID				10
#define SRV_NETSPID				11
#define SRV_TYPE				12
#define SRV_STATUS				13
#define SRV_RMTSERVER			14
#define SRV_HOST				15
#define SRV_USER				16
#define SRV_PWD					17
#define SRV_CPID				18
#define SRV_APPLNAME			19
#define SRV_TDS					20
#define SRV_CLIB				21
#define SRV_LIBVERS				22
#define SRV_ROWSENT				23
#define SRV_BCPFLAG				24
#define SRV_NATLANG				25
#define SRV_PIPEHANDLE			26
#define SRV_NETWORK_MODULE	    27
#define SRV_NETWORK_VERSION		28
#define SRV_NETWORK_CONNECTION	29
#define SRV_LSECURE				30
#define SRV_SAXP				31
#define SRV_UNICODE_USER		33
#define SRV_UNICODE_PWD			35
#define SRV_SPROC_CODEPAGE      36
#define SRV_MSGLCID				37
#define SRV_INSTANCENAME		38
#define SRV_HASHPWD				39

// return value of SRV_TDSVERSION macro
#define SRV_TDS_NONE   0
#define SRV_TDS_2_0    1
#define SRV_TDS_3_4    2
#define SRV_TDS_4_2    3
#define SRV_TDS_6_0    4
#define SRV_TDS_7_0    5

// Return values from APIs
typedef int SRVRETCODE;        // SUCCEED or FAIL
#ifndef ODBCVER
typedef int RETCODE;
#endif

#if !defined( SUCCEED )
#define SUCCEED     1   // Successful return value
#endif

#if !defined( FAIL )
#define FAIL        0   // Unsuccessful return value
#endif

#define SRV_DUPLICATE_HANDLER	2	// additional return value for srv_pre/post_handle

//------------------------------------------------
//PreDeclare structures
//
struct srv_server;
typedef struct srv_server SRV_SERVER;

struct srv_config;
typedef struct srv_config SRV_CONFIG;

struct srv_proc;
typedef struct srv_proc SRV_PROC;

//------------------------------------------------
//------------------------------------------------
// ODS MACROs & APIs

// Describing and sending a result set
int srv_describe(SRV_PROC*,int,char*,int,long int,long int,long int,long int,void*);
int srv_setutype(SRV_PROC* srvproc,int column,long int usertype);
int srv_setcoldata(SRV_PROC* srvproc,int column,void* data);
int srv_setcollen( SRV_PROC* srvproc,int column,int len);
int srv_sendrow(SRV_PROC* srvproc );
int srv_senddone(SRV_PROC* srvproc,USHORT status,USHORT curcmd,long int count);

// Dealing with Extended Procedure parameters
int srv_rpcparams(SRV_PROC*);
int srv_paraminfo(SRV_PROC*,int,BYTE*,ULONG*,ULONG*,BYTE*,BOOL*);
int srv_paramsetoutput(SRV_PROC*,int,BYTE*,ULONG,BOOL);

void* srv_paramdata(SRV_PROC*,int);
int srv_paramlen(SRV_PROC*,int);
int srv_parammaxlen(SRV_PROC*,int);
int srv_paramtype(SRV_PROC*,int);
int srv_paramset(SRV_PROC*,int,void*,int);

char* srv_paramname(SRV_PROC*,int,int*);
int srv_paramnumber(SRV_PROC*,char*,int);

//--------------------------------------------------------------
//--------------------------------------------------------------
// The rest of these APIs are still supported, in SQL Server 7.0,
// but may not be supported after SQL Server 7.0

// MACROs
#define SRV_GETSERVER(a)		srv_getserver	  ( a )
#define SRV_GOT_ATTENTION(a)	srv_got_attention ( a )
#define	SRV_TDSVERSION(a)		srv_tdsversion	  ( a )

SRV_SERVER* srv_getserver( SRV_PROC   * srvproc );
BOOL srv_got_attention( SRV_PROC * srvproc );

// Memory
void* srv_alloc(long int ulSize);
int srv_bmove(void* from,void* to,long int count);
int srv_bzero( void  * location,long int count);
int srv_free( void * ptr );


int srv_convert(SRV_PROC*,int,void*,long int,int,void*,long int);

void* srv_getuserdata( SRV_PROC * srvproc );

int srv_getbindtoken(SRV_PROC * srvproc,char* token_buf);

int srv_getdtcxact(SRV_PROC * srvproc,void ** ppv);

typedef int (* EventHandler)(void *);

int srv_impersonate_client( SRV_PROC * srvproc );

long srv_langcpy(SRV_PROC *	srvproc,long start,long nbytes,char* buffer);
long srv_langlen( SRV_PROC * srvproc );
void* srv_langptr( SRV_PROC *srvproc );

int
     srv_log( SRV_SERVER * server,
					BOOL	     datestamp,
					char     * msg,
					int 	     msglen );

int srv_paramstatus(SRV_PROC*,int);

void* srv_pfieldex( SRV_PROC * srvproc,int	field,int	* len );

char* srv_pfield( SRV_PROC * srvproc,int	      field,int	    * len );

int srv_returnval( SRV_PROC * srvproc,
						  char   * valuename,
						  int		 len,
						  BYTE		 status,
						  long int 	 type,
						  long int 	 maxlen,
						  long int 	 datalen,
						  void	   * value );

int srv_revert_to_self( SRV_PROC * srvproc );

char* srv_rpcdb(SRV_PROC* srvproc,int* len );
char* srv_rpcname(SRV_PROC * srvproc,int* len );
int srv_rpcnumber( SRV_PROC * srvproc );
USHORT srv_rpcoptions( SRV_PROC * srvproc );
char* srv_rpcowner( SRV_PROC * srvproc,int	  * len );

int srv_wsendmsg(	SRV_PROC	* srvproc,
						long int	msgnum, 
						BYTE		msgclass, 
						WCHAR		* message,    // message text 
						int			msglen);	   // length of message text

int
     srv_sendmsg( SRV_PROC  * srvproc,
						int	        msgtype,
						long int	    msgnum,
						BYTE   msgclass,
						BYTE   state,
						char	  * rpcname,
						int	        rpcnamelen,
						USHORT linenum,
						char	  * message,
						int	        msglen );

int srv_sendstatus( SRV_PROC * srvproc,long int	  status );


int srv_setuserdata(SRV_PROC* srvproc,void* ptr);


char* srv_sfield( SRV_SERVER * server,int field,int* len);

char* srv_symbol(int	type,int symbol,int* len);

int srv_tdsversion(SRV_PROC* srvproc);

BOOL srv_willconvert(int srctype,int desttype );

int srv_terminatethread( SRV_PROC * srvproc );

int srv_sendstatistics( SRV_PROC * srvproc );

int srv_clearstatistics( SRV_PROC * srvproc );

int srv_message_handler( SRV_PROC * srvproc, 
								int        errornum, 
								BYTE       severity,
								BYTE       state, 
								int        oserrnum, 
								char     * errtext, 
								int        errtextlen, 
								char     * oserrtext, 
								int        oserrtextlen );

int srv_pre_handle( SRV_SERVER * server,
						    SRV_PROC   * srvproc,
						    long int event,
						    EventHandler handler,
						    BOOL         remove );
int srv_post_handle( SRV_SERVER * server,
							 SRV_PROC   * srvproc,
							 long int        event,
							 EventHandler handler,
							 BOOL         remove );

int srv_IgnoreAnsiToOem( SRV_PROC * srvproc,BOOL bTF);

#ifdef __cplusplus
}
#endif

#pragma pack()

#define SS_MAJOR_VERSION    7
#define SS_MINOR_VERSION    00
#define SS_LEVEL_VERSION    0000
#define SS_MINIMUM_VERSION  "7.00.00.0000"
#define ODS_VERSION			((SS_MAJOR_VERSION << 24)  | (SS_MINOR_VERSION << 16))

#endif //_ODS_SRV_H_

//////////////////////////////////////////////////////////////////
// Suggested implementation of __GetXpVersion
//
//__declspec(dllexport) ULONG __GetXpVersion() 
//	{
//	return ODS_VERSION;
//	}
//////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\stdafx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
// xsmt.pch will be the pre-compiled header
// stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\Util.cpp ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved

Module Name:

  Util.cpp

Abstract:

  Useful stuff.

--*/

#include "stdafx.h"
#include "util.h"

void WriteMsg(SRV_PROC* pSrvProc, char* szFmt, ...)
{
	char szBuffer[1024];
	va_list marker;

	va_start(marker, szFmt);
	_vsnprintf(szBuffer, sizeof(szBuffer) / sizeof(szBuffer[0]), szFmt, marker);
	va_end(marker);

	szBuffer[(sizeof(szBuffer) / sizeof(szBuffer[0])) - 1] = '\0';

    srv_sendmsg(pSrvProc, SRV_MSG_ERROR, 1, SRV_INFO, 1,
            NULL, 0, 0, 
            szBuffer,
            SRV_NULLTERM);

    srv_senddone(pSrvProc, (SRV_DONE_ERROR | SRV_DONE_MORE), 0, 0);
}

bool GetIntParam(SRV_PROC* pSrvProc, int iParam, int* pParam)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	bType != SRVINTN ||
		cbActualLen != sizeof(int))
	{
		fRet = false;
		goto lDone;
	}

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, (BYTE*)pParam, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:

	return fRet;
}

bool SetIntParam(SRV_PROC* pSrvProc, int iParam, int iParamData)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	bType != SRVINTN ||
		cbMaxLen != sizeof(int))
	{
		fRet = false;
		goto lDone;
	}
	
	if((srv_paramstatus(pSrvProc, iParam) & SRV_PARAMRETURN) == FAIL)
    {
		fRet = false;
		goto lDone;
	}

	if(srv_paramsetoutput(pSrvProc, iParam, (BYTE*)&iParamData, sizeof(int), FALSE) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:

	return fRet;
}

bool GetGuidParam(SRV_PROC* pSrvProc, int iParam, GUID* pParam)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	bType != SRVGUID ||
		cbActualLen != sizeof(GUID))
	{
		fRet = false;
		goto lDone;
	}

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, (BYTE*)pParam, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:

	return fRet;
}

bool SetGuidParam(SRV_PROC* pSrvProc, int iParam, GUID* pParamData)
{
    bool fRet = true;
    BYTE bType;
    ULONG cbMaxLen;
    ULONG cbActualLen;
    BOOL fNull;

    if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
    {
        fRet = false;
        goto lDone;
    }

    if( bType != SRVGUID ||
        cbMaxLen != sizeof(GUID))
    {
        fRet = false;
        goto lDone;
    }
    
    if((srv_paramstatus(pSrvProc, iParam) & SRV_PARAMRETURN) == FAIL)
    {
        fRet = false;
        goto lDone;
    }

    if(srv_paramsetoutput(pSrvProc, iParam, (BYTE*)pParamData, sizeof(GUID), FALSE) == FAIL)
    {
        fRet = false;
        goto lDone;
    }

lDone:

    return fRet;
}


bool GetBinaryParam(SRV_PROC* pSrvProc, int iParam, BYTE* pData, ULONG cbBuffer, ULONG* pcbData)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	(bType != SRVVARBINARY && bType != SRVBIGVARBINARY) ||
		cbActualLen > cbBuffer)
	{
		fRet = false;
		goto lDone;
	}

	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, pcbData, (BYTE*)pData, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:

	return fRet;
}

bool SetBinaryParam(SRV_PROC* pSrvProc, int iParam, BYTE* pData, ULONG cbData)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;
	
	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	(bType != SRVVARBINARY && bType != SRVBIGVARBINARY) ||
		cbMaxLen < cbData)
	{
		fRet = false;
		goto lDone;
	}

	if((srv_paramstatus(pSrvProc, iParam) & SRV_PARAMRETURN) == FAIL)
    {
		fRet = false;
		goto lDone;
	}
	
	if(srv_paramsetoutput(pSrvProc, iParam, (BYTE*)pData, cbData, FALSE) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:
    
    return fRet;
}


bool SetStringParam(SRV_PROC* pSrvProc, int iParam, LPCSTR pParamData)
{
	bool fRet = true;
	BYTE bType;
	ULONG cbMaxLen;
	ULONG cbActualLen;
	BOOL fNull;
	DWORD cbParamLength = (DWORD) strlen(pParamData);
	
	if(srv_paraminfo(pSrvProc, iParam, &bType, &cbMaxLen, &cbActualLen, NULL, &fNull) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

	if(	(bType != SRVVARCHAR && bType != SRVBIGVARCHAR) ||
		cbMaxLen < cbParamLength)
	{
		fRet = false;
		goto lDone;
	}

	if((srv_paramstatus(pSrvProc, iParam) & SRV_PARAMRETURN) == FAIL)
    {
		fRet = false;
		goto lDone;
	}
	
	if(srv_paramsetoutput(pSrvProc, iParam, (BYTE*)pParamData, cbParamLength, FALSE) == FAIL)
	{
		fRet = false;
		goto lDone;
	}

lDone:
    
    return fRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\stdafx.h ===
// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <math.h>
#include <windows.h>
#include <xlocks.h>
#include <xmgmt.h>
#include <tbckhash.h>
#include <xeventids.h>
#include <wmsstd.h>
#include <addref.h>

#include "srv.h"

#include "util.h"

#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x) / sizeof(x[0]))
#endif

using namespace xlocks;

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers

XomImportArea(Debug);

// Custom HRs

#define XSMT_E_BUCKET_NOT_FOUND _HRESULT_TYPEDEF_(0x80000001)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\util.h ===
/*++

Copyright (c) Microsoft Corporation.  All rights reserved

Module Name:

  Util.h

Abstract:

  Useful stuff.

--*/

#pragma once

inline DWORD revdword(DWORD dword)
{
    BYTE* pbdword = (BYTE*) &dword;
    DWORD newdword;
    BYTE* pbnewdword = (BYTE*) &newdword;

    pbnewdword[0] = pbdword[3];
    pbnewdword[1] = pbdword[2];
    pbnewdword[2] = pbdword[1];
    pbnewdword[3] = pbdword[0];

    return newdword;
}

inline LONGLONG revqword(LONGLONG qword)
{
    BYTE* pbqword = (BYTE*) &qword;
    LONGLONG newqword;
    BYTE* pbnewqword = (BYTE*) &newqword;

    pbnewqword[0] = pbqword[7];
    pbnewqword[1] = pbqword[6];
    pbnewqword[2] = pbqword[5];
    pbnewqword[3] = pbqword[4];
    pbnewqword[4] = pbqword[3];
    pbnewqword[5] = pbqword[2];
    pbnewqword[6] = pbqword[1];
    pbnewqword[7] = pbqword[0];

    return newqword;
}

void WriteMsg(SRV_PROC* pSrvProc, char* szFmt, ...);
bool GetIntParam(SRV_PROC* pSrvProc, int iParam, int* pParam);
bool SetIntParam(SRV_PROC* pSrvProc, int iParam, int iParamData);
bool GetGuidParam(SRV_PROC* pSrvProc, int iParam, GUID* pParam);
bool SetGuidParam(SRV_PROC* pSrvProc, int iParam, GUID* pParamData);
bool SetStringParam(SRV_PROC* pSrvProc, int iParam, LPCSTR pParamData);
bool GetBinaryParam(SRV_PROC* pSrvProc, int iParam, BYTE* pData, ULONG cbBuffer, ULONG* pcbData);
bool SetBinaryParam(SRV_PROC* pSrvProc, int iParam, BYTE* pData, ULONG cbData);

#define GOTO_LDONE_IF_FAILED_HR(op) \
    if(FAILED(hr = (op))) \
    { \
        goto lDone; \
    } 

#define GOTO_LDONE_IF_FAILED_ALLOC(op) \
    if(NULL == (op)) \
    { \
        hr = E_OUTOFMEMORY; \
        XomNtEvent(XEVENT_XSMT_MEMORY_ERROR, "Allocation failed in File:%s, Line:%d", \
            __FILE__, __LINE__); \
        goto lDone; \
    } 

#define GOTO_LDONE_IF(op, failedop) \
    if(op) \
    { \
        failedop; \
        goto lDone; \
    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stats\xsmt\xsmt.cpp ===
// xsmt.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "bucketmap.h"

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers
using namespace XblConfig;

XomDefineArea(Debug);

enum
{
    APP_NOT_INITIALIZED,
    APP_INITIALIZED,
    APP_INIT_ERROR
} g_Init = APP_NOT_INITIALIZED;
    // Application initialization status

CCritSec g_lockInit;
    // Critical section to synchronize access to g_lockInit

CLeaderBoardBucketMapList g_LeaderBoardBucketMapList;
    // Collection of bucket maps. Here is where they all live.

/*******************************************************************************
  DllMain
  Dll entry point
*******************************************************************************/
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID)
{
    switch(dwReason)
    {
    case DLL_PROCESS_ATTACH:
        DisableThreadLibraryCalls(hInstance);
        break;

    case DLL_PROCESS_DETACH:
        break;
    }

    return TRUE;
}

/*******************************************************************************
  Init
  Initializes the management framework and the bucket map
*******************************************************************************/
HRESULT Init()
{
    HRESULT hr = S_OK;

    g_xomcentral.Init("xsmt", NULL);

    hr = g_LeaderBoardBucketMapList.Init();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_29,
            "Failed to initialize bucket map. hr = 0x%08x", hr);
        goto lDone;
    }

lDone:

    return hr;
}

/*******************************************************************************
  LazyInit
  Ensures that Init get called only once
*******************************************************************************/
HRESULT LazyInit()
{
    if(APP_NOT_INITIALIZED == g_Init)
    {
        g_lockInit.WriteLock();

        if(APP_NOT_INITIALIZED == g_Init)
        {
            HRESULT hr = Init();

            if(SUCCEEDED(hr))
            {
                g_Init = APP_INITIALIZED;
            }
            else
            {
                g_Init = APP_INIT_ERROR;
            }
        }

        g_lockInit.WriteUnlock();
    }

    if(APP_INITIALIZED == g_Init)
    {
        return S_OK;
    }
    else
    {
        return E_FAIL;
    }
}

/*******************************************************************************
  __GetXpVersion
  Required extended stored proc dll entry point
*******************************************************************************/
ULONG __GetXpVersion()
{
    return ODS_VERSION;
}

/*******************************************************************************
  xp_Stats_CreateBucketMap

  Creates a bucket map.

  Parameters:
  1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
  2 - i_bucket_count (int) : number of buckets in the bucket map
*******************************************************************************/
SRVRETCODE xp_Stats_CreateBucketMap(SRV_PROC* pSrvProc)
{
    SRVRETCODE ret = 0;
    GUID uidLeaderBoardId;
    int dwBucketCount;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    HRESULT hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_30,
            "xp_Stats_CreateBucketMap failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    // Get parameters
    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketCount) )
    {
        XomNtEvent(XEVENT_STATS_CODE_49,
            "xp_Stats_CreateBucketMap received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    // Verify if bucket map already doesn't exist
    if(SUCCEEDED(g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap)))
    {
        XomNtEvent(XEVENT_STATS_CODE_50,
            "xp_Stats_CreateBucketMap failed because bucket map already exists. "
            "\nuidLbId="DBGGUIDFMT, DBGGUIDPRM(&uidLeaderBoardId));
        hr = E_FAIL;
        goto lDone;
    }


    // Create the bucket map
    hr = g_LeaderBoardBucketMapList.CreateBucketMap(uidLeaderBoardId,
            dwBucketCount);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_51,
            "g_LeaderBoardBucketMapList.CreateBucketMap failed. "
            "\nhr = 0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketCount= %d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketCount);
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/*******************************************************************************
  xp_Stats_CreateBucketMap

  Extended stored procedure shutdown. Call this before unloading dll.

  No parameters.
*******************************************************************************/
SRVRETCODE xp_Stats_Term(SRV_PROC* pSrvProc)
{
    g_lockInit.WriteLock();
    g_Init = APP_INIT_ERROR;
    g_lockInit.WriteUnlock();

    Sleep(1000);
    g_xomcentral.Term();
    return 0;
}

/*******************************************************************************
  xp_Stats_Reset

  Releases all the current bucket maps.

  No parameters.
*******************************************************************************/
SRVRETCODE xp_Stats_Reset(SRV_PROC* pSrvProc)
{
    HRESULT hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_31,
            "xp_Stats_Reset failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    g_LeaderBoardBucketMapList.Reset();

lDone:

    return 0;
}

/*******************************************************************************
  xp_Stats_DeleteBucketMap

  Deletes a bucket map

  Parameters:
  1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
*******************************************************************************/
SRVRETCODE xp_Stats_DeleteBucketMap(SRV_PROC* pSrvProc)
{
    GUID uidLeaderBoardId;
    HRESULT hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_32,
            "xp_Stats_DeleteBucketMap failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) )
    {
        XomNtEvent(XEVENT_STATS_CODE_52,
                    "xp_Stats_DeleteBucketMap received invalid parameters.");
         hr = E_INVALIDARG;
        goto lDone;
    }

    g_LeaderBoardBucketMapList.DeleteBucketMap(uidLeaderBoardId);
    // We're going to ignore the result code of this call because a failure
    // simply means that the leaderboard was not found and there are lots of
    // cases where we'll make this call without a leaderboard. Logging an event
    // would be spam and misleading.

lDone:

    return (SUCCEEDED(hr) ? 0 : 1);
}

/*******************************************************************************
  xp_Stats_SetBucketId

  Associates a bucket index to a bucket id.

  Parameters:
  1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
  2 - i_bucket_ndx (int) : bucket index
  3 - i_bucket_id  (int) : bucket id
*******************************************************************************/
SRVRETCODE xp_Stats_SetBucketId(SRV_PROC* pSrvProc)
{
    GUID     uidLeaderBoardId;
    DWORD    dwBucketNdx;
    DWORD    dwBucketId;
    LONGLONG llMaxRating = 0;
    DWORD    cbMaxRating;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    HRESULT hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_33,
            "xp_Stats_SetBucketId failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketNdx) ||
        !GetIntParam(pSrvProc, 3, (int*)&dwBucketId) ||
        !GetBinaryParam(pSrvProc, 4, (BYTE*)&llMaxRating, sizeof(llMaxRating), &cbMaxRating) )
    {
        XomNtEvent(XEVENT_STATS_CODE_53,
                    "xp_Stats_SetBucketId received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    llMaxRating = revqword(llMaxRating);

    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_4,
            "xp_Stats_SetBucketId failed. GetBucketMap failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketNdx=%d"
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketNdx, dwBucketId);
        goto lDone;
    }

    hr = pBucketMap->SetBucketId(dwBucketNdx, dwBucketId, llMaxRating);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_5,
            "xp_Stats_SetBucketId failed. SetBucketId failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketNdx=%d"
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketNdx, dwBucketId);
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/*******************************************************************************
  xp_Stats_AddToBucket

  Change the value of a bucket by a delta.

  Parameters:
  1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
  2 - i_bucket_id  (int) : bucket id
  3 - i_Count (int) : bucket delta. Can be negative or positive
  4 - i_total (int, output) : receives the new value of the bucket
*******************************************************************************/
SRVRETCODE xp_Stats_AddToBucket(SRV_PROC* pSrvProc)
{
    GUID    uidLeaderBoardId;
    DWORD   dwBucketId;
    int     iCount;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    LONG    lTotal;
    HRESULT hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_34,
            "xp_Stats_AddToBucket failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketId) ||
        !GetIntParam(pSrvProc, 3, &iCount) )
    {
        XomNtEvent(XEVENT_STATS_CODE_56,
            "xp_Stats_AddToBucket received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_6,
            "xp_Stats_AddToBucket failed. GetBucketMap failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d"
            "\niCount=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId, iCount);
        goto lDone;
    }


    hr = pBucketMap->AddToBucket(dwBucketId, iCount, &lTotal);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_7,
            "xp_Stats_AddToBucket failed. AddToBucket failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d"
            "\niCount=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId, iCount);
        goto lDone;
    }

    if(!SetIntParam(pSrvProc, 4, (int) lTotal))
    {
        XomNtEvent(XEVENT_STATS_CODE_59,
                    "xp_Stats_AddToBucket output parameter is invalid.");

        // We're not going to return an error because the bucket map has already
        // been updated. If we error out, we risk having the transaction rolled
        // back and the bucket map left inconsistent with database values.
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/******************************************************************************
  xp_Stats_AddToBucketEx

  Updates multiple entries in a bucket map. Returns information about the
  affected buckets.

  Parameters:
   1 - @vb_in_params - varbinary parameter with array of ADDTOBUCKETEXPARAM
   2 - @vb_out_params - output - varbinary parameter that receives array of
          ADDTOBUCKETEXOUTPARAM
******************************************************************************/
SRVRETCODE xp_Stats_AddToBucketEx(SRV_PROC* pSrvProc)
{
#pragma pack(push, 1)
        struct ADDTOBUCKETEXPARAM
        {
            GUID    uidLbId;
            DWORD   dwOBkt;
            INT     iOBktD;
            DWORD   dwNBkt;
            INT     iNBktD;
        };

        struct ADDTOBUCKETEXOUTPARAM
        {
            LONG    lNBktSize;
            LONG    lNBktSubTotal;
        };
#pragma pack(pop)

    CLeaderBoardBucketMap*  pBucketMap = NULL;
    ADDTOBUCKETEXPARAM      rgParams[40];
    ADDTOBUCKETEXOUTPARAM   rgOutParams[40];
    DWORD                   cParams;
    DWORD                   ndxParam;
    LONG                    lBucketSize;
    DWORD                   ret = 0;
    HRESULT                 hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_35,
            "xp_Stats_AddToBucketEx failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if(!GetBinaryParam(pSrvProc, 1, (BYTE*)rgParams, sizeof(rgParams), &cParams))
    {
        XomNtEvent(XEVENT_STATS_CODE_60,
            "xp_Stats_AddToBucketEx received invalid parameters.");
        goto lDone;
    }

    cParams /= sizeof(ADDTOBUCKETEXPARAM);

    for(ndxParam=0; ndxParam < cParams; ndxParam++)
    {
        // SQL stores stuff in big endian
        rgParams[ndxParam].dwOBkt = revdword(rgParams[ndxParam].dwOBkt);
        rgParams[ndxParam].iOBktD = revdword(rgParams[ndxParam].iOBktD);
        rgParams[ndxParam].dwNBkt = revdword(rgParams[ndxParam].dwNBkt);
        rgParams[ndxParam].iNBktD = revdword(rgParams[ndxParam].iNBktD);


        if(rgParams[ndxParam].dwNBkt != 0)
        {
            hr = g_LeaderBoardBucketMapList.GetBucketMap(rgParams[ndxParam].uidLbId,
                &pBucketMap);
           if(FAILED(hr))
           {
               XomNtEvent(XEVENT_XSMT_UNEXPECTED_8,
                   "xp_Stats_AddToBucketEx failed. GetBucketMap failed. "
                   "\nhr=0x%08x"
                   "\nuidLbId="DBGGUIDFMT
                   "\ndwOBkt=%d"
                   "\niOBktd=%d"
                   "\ndwNBkt=%d"
                   "\niNBktD=%d",
                   hr, DBGGUIDPRM(&rgParams[ndxParam].uidLbId), rgParams[ndxParam].dwOBkt,
                   rgParams[ndxParam].iOBktD, rgParams[ndxParam].dwNBkt,
                   rgParams[ndxParam].iNBktD);
               goto lDone;
           }

            if(rgParams[ndxParam].dwOBkt != 0)
            {
                hr = pBucketMap->AddToBucket(rgParams[ndxParam].dwOBkt,
                    rgParams[ndxParam].iOBktD, &lBucketSize);
                if(FAILED(hr))
                {
                    XomNtEvent(XEVENT_XSMT_UNEXPECTED_9,
                        "xp_Stats_AddToBucketEx failed. AddToBucket(1) failed. "
                        "\nhr=0x%08x"
                        "\nuidLbId="DBGGUIDFMT
                        "\ndwOBkt=%d"
                        "\niOBktd=%d"
                        "\ndwNBkt=%d"
                        "\niNBktD=%d",
                        hr, DBGGUIDPRM(&rgParams[ndxParam].uidLbId), rgParams[ndxParam].dwOBkt,
                        rgParams[ndxParam].iOBktD, rgParams[ndxParam].dwNBkt,
                        rgParams[ndxParam].iNBktD);
                    goto lDone;
                }
            }

            if(rgParams[ndxParam].iNBktD != 0)
            {
                hr = pBucketMap->AddToBucket(rgParams[ndxParam].dwNBkt,
                    rgParams[ndxParam].iNBktD, &rgOutParams[ndxParam].lNBktSize);
                if(FAILED(hr))
                {
                    XomNtEvent(XEVENT_XSMT_UNEXPECTED_10,
                        "xp_Stats_AddToBucketEx failed. AddToBucket(2) failed. "
                        "\nhr=0x%08x"
                        "\nuidLbId="DBGGUIDFMT
                        "\ndwOBkt=%d"
                        "\niOBktd=%d"
                        "\ndwNBkt=%d"
                        "\niNBktD=%d",
                        hr, DBGGUIDPRM(&rgParams[ndxParam].uidLbId), rgParams[ndxParam].dwOBkt,
                        rgParams[ndxParam].iOBktD, rgParams[ndxParam].dwNBkt,
                        rgParams[ndxParam].iNBktD);
                    goto lDone;
                }

            }
            else
            {
                // Special case. The rating is probably not being updated. The
                // bucket size remains the same therefore no splits are needed.
                // That's why we don't have to return the size of the bucket.
                rgOutParams[ndxParam].lNBktSize = 0;
            }

            hr = pBucketMap->GetSubtotal(rgParams[ndxParam].dwNBkt,
                &rgOutParams[ndxParam].lNBktSubTotal);
            if(FAILED(hr))
            {
                XomNtEvent(XEVENT_XSMT_UNEXPECTED_11,
                    "xp_Stats_AddToBucketEx failed. GetSubtotal failed. "
                    "\nhr=0x%08x"
                    "\nuidLbId="DBGGUIDFMT
                    "\ndwOBkt=%d"
                    "\niOBktd=%d"
                    "\ndwNBkt=%d"
                    "\niNBktD=%d",
                    hr, DBGGUIDPRM(&rgParams[ndxParam].uidLbId), rgParams[ndxParam].dwOBkt,
                    rgParams[ndxParam].iOBktD, rgParams[ndxParam].dwNBkt,
                    rgParams[ndxParam].iNBktD);
                goto lDone;
            }

            // Again, SQL can only read this if it's in big endian byte order

            rgOutParams[ndxParam].lNBktSize = revdword(rgOutParams[ndxParam].lNBktSize);
            rgOutParams[ndxParam].lNBktSubTotal = revdword(rgOutParams[ndxParam].lNBktSubTotal);

            SAFE_RELEASE(pBucketMap);
        }
        else
        {
            // Another special case. NBkt == 0 means that it's a lightweight
            // leaderboard. We don't even have bucket maps for it. Return all
            // zeros.
            rgOutParams[ndxParam].lNBktSize = 0;
            rgOutParams[ndxParam].lNBktSubTotal = 0;
        }

    }

    if(!SetBinaryParam(pSrvProc, 2, (BYTE*)rgOutParams, cParams * sizeof(ADDTOBUCKETEXOUTPARAM)))
    {
        XomNtEvent(XEVENT_STATS_CODE_65,
                    "xp_Stats_AddToBucketEx output parameter is invalid.");
        ret = 1; //-- Bad parameter
        goto lDone;
    }

    srv_senddone(pSrvProc, SRV_DONE_FINAL, 0, 0);

lDone:

    SAFE_RELEASE(pBucketMap);

    if(FAILED(hr) && ret == 0)
    {
        ret = 1; // Generic error
    }

    return ret;
}

/******************************************************************************
  xp_Stats_GetBucketRangeSubtotal

  Returns the sum of the range of buckets up to bucket id (not including it).

  Parameters:
   1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
   2 - i_bucket_id (int) : bucket id
   3 - i_sub_total  (int, output) : receives the subtotal
******************************************************************************/
SRVRETCODE xp_Stats_GetBucketRangeSubtotal(SRV_PROC* pSrvProc)
{
    GUID        uidLeaderBoardId;
    DWORD       dwBucketId;
    int         iSubtotal;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    HRESULT     hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_36,
            "xp_Stats_GetBucketRangeSubtotal failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketId))
    {
        XomNtEvent(XEVENT_STATS_CODE_66,
            "xp_Stats_GetBucketRangeSubtotal received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_67,
            "xp_Stats_GetBucketRangeSubtotal failed. AddToBucket GetBucketMap. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId);
        goto lDone;
    }

    hr = pBucketMap->GetSubtotal(dwBucketId, (LONG*)&iSubtotal);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_68,
            "xp_Stats_GetBucketRangeSubtotal failed. GetSubtotal failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId);
        goto lDone;
    }

    if(!SetIntParam(pSrvProc, 3, iSubtotal))
    {
        XomNtEvent(XEVENT_STATS_CODE_69,
                    "xp_Stats_AddToBucket output parameter is invalid.");
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/******************************************************************************
  xp_Stats_GetBucketValue

  Returns the value of a bucket

  Parameters:
   1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
   2 - i_bucket_id (int) : bucket id
   3 - i_value  (int, output) : receives the bucket value
******************************************************************************/
SRVRETCODE xp_Stats_GetBucketValue(SRV_PROC* pSrvProc)
{
    GUID        uidLeaderBoardId;
    DWORD       dwBucketId;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    int         iValue;
    HRESULT     hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_37,
            "xp_Stats_GetBucketValue failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketId))
    {
        XomNtEvent(XEVENT_STATS_CODE_70,
            "xp_Stats_GetBucketValue received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_71,
            "xp_Stats_GetBucketValue failed. GetBucketMap GetBucketMap. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId);
        goto lDone;
    }

    hr = pBucketMap->GetBucketValue(dwBucketId, (LONG*)&iValue);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_72,
            "xp_Stats_GetBucketValue failed. GetBucketValue GetBucketMap. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId);
        goto lDone;
    }

    if(!SetIntParam(pSrvProc, 3, iValue))
    {
        XomNtEvent(XEVENT_STATS_CODE_73,
                    "xp_Stats_AddToBucket output parameter is invalid.");
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}


 /******************************************************************************
   xp_Stats_SplitBucket

   Split a bucket in two.

   Parameters:
    1 - uid_lb_id (uniqueidentifier) : leaderboard unique identifier
    2 - i_bucket1 (int) : bucket id of the old bucket
    3 - i_count1  (int) : value of the old bucket
    4 - i_bucket2 (int) : bucket id of the new bucket
    5 - i_count2  (int) : value of the new bucket
 ******************************************************************************/
SRVRETCODE xp_Stats_SplitBucket(SRV_PROC* pSrvProc)
{
    GUID        uidLeaderBoardId;
    DWORD       dwBucketId1;
    LONG        lCount1;
    DWORD       dwBucketId2;
    LONG        lCount2;
    LONGLONG    llNewBucketMaxRating;
    DWORD       cbMaxRating;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    HRESULT     hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_38,
            "xp_Stats_SplitBucket failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwBucketId1) ||
        !GetIntParam(pSrvProc, 3, (int*)&lCount1) ||
        !GetIntParam(pSrvProc, 4, (int*)&dwBucketId2) ||
        !GetIntParam(pSrvProc, 5, (int*)&lCount2) ||
        !GetBinaryParam(pSrvProc, 6, (BYTE*)&llNewBucketMaxRating, sizeof(llNewBucketMaxRating), &cbMaxRating) )
    {
        XomNtEvent(XEVENT_STATS_CODE_74,
            "xp_Stats_SplitBucket received invalid parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    llNewBucketMaxRating = revqword(llNewBucketMaxRating);

    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_12,
            "xp_Stats_SplitBucket failed. GetBucketMap failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId1=%d"
            "\nlCount1=%d"
            "\ndwBucketId2=%d"
            "\nlCount2=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId1, lCount1, dwBucketId2,
            lCount2);
        goto lDone;
    }

    hr = pBucketMap->SplitBucket(dwBucketId1, lCount1, dwBucketId2, lCount2, llNewBucketMaxRating);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_13,
            "xp_Stats_SplitBucket failed. SplitBucket failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwBucketId1=%d"
            "\nlCount1=%d"
            "\ndwBucketId2=%d"
            "\nlCount2=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwBucketId1, lCount1, dwBucketId2,
            lCount2);
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/******************************************************************************
  xp_Stats_GetBucketListFromRange

  *deprecated* Use xp_Stats_GetBucketListFromRange2 instead.
******************************************************************************/
SRVRETCODE xp_Stats_GetBucketListFromRange(SRV_PROC* pSrvProc)
{
    GUID uidLeaderBoardId;
    DWORD dwRank;
    DWORD dwCount;
    DWORD dwRelPos;
    DWORD rgdwBucketIds[100];
    DWORD dwRetCount = ARRAY_ELEMENTS(rgdwBucketIds);
    CLeaderBoardBucketMap* pBucketMap = NULL;
    CHAR szBucketList[1024];
    int cbBucketList;
    DWORD dwBucketNdx;
    HRESULT hr = S_OK;

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) ||
        !GetIntParam(pSrvProc, 2, (int*)&dwRank) ||
        !GetIntParam(pSrvProc, 3, (int*)&dwCount) )
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

    GOTO_LDONE_IF_FAILED_HR(
        g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap) );

    GOTO_LDONE_IF_FAILED_HR(
        pBucketMap->GetBucketListFromRange(dwRank, dwCount, &dwRelPos,
            rgdwBucketIds, &dwRetCount) );

    //
    // No arrays in SQL so we're going to return the bucket list in form of
    // a comma-delimited string.
    //

    cbBucketList = 0;
    szBucketList[0] = '\0';
    dwBucketNdx = 0;

    if(dwRetCount > 0)
    {
        cbBucketList += _snprintf(szBucketList + cbBucketList,
            ARRAY_ELEMENTS(szBucketList) - cbBucketList, "%d",
            rgdwBucketIds[dwBucketNdx]);

        dwBucketNdx++;

        for(; dwBucketNdx < dwRetCount; dwBucketNdx++)
        {
            cbBucketList += _snprintf(szBucketList + cbBucketList,
                ARRAY_ELEMENTS(szBucketList) - cbBucketList, ",%d",
                rgdwBucketIds[dwBucketNdx]);
        }
    }

    //
    // Return the string as an output parameter.
    //

    if(!SetStringParam(pSrvProc, 4, szBucketList))
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

/******************************************************************************
  xp_Stats_GetBucketListFromRange2

  Returns the list of buckets that contains the range of ranks specified in
  the parameters

  Parameters:
   1 - @uid_lbId uniqueidentifier - leaderboard id
   2 - @i_rank   int - starting rank
   3 - @i_count  int - number of entries starting from i_rank
   4 - @@vb_bkt  varbinary(404) output - receives bucket ids big endian encoded
******************************************************************************/
SRVRETCODE xp_Stats_GetBucketListFromRange2(SRV_PROC* pSrvProc)
{
    static const int MAX_BUCKETS_IN_RANGE = 100;

#pragma pack(push, 1)
    struct BUCKET_SUBTOTAL {
        DWORD dwBucketId;
        DWORD dwSubtotal;
    } rgBucketSubtotals[MAX_BUCKETS_IN_RANGE];
#pragma pack(pop)
    GUID        uidLeaderBoardId;
    DWORD       dwRank;
    DWORD       dwCount;
    DWORD       dwRelPos;
    DWORD       rgdwBucketIds[MAX_BUCKETS_IN_RANGE];
    DWORD       dwRetCount = ARRAY_ELEMENTS(rgdwBucketIds);
    CLeaderBoardBucketMap* pBucketMap = NULL;
    DWORD       dwBucketNdx;
    SRVRETCODE  ret = 0;
    HRESULT     hr;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_39,
            "xp_Stats_GetBucketListFromRange2 failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    // Get parameters from SQL call
    if( !GetGuidParam(  pSrvProc, 1, &uidLeaderBoardId  ) ||
        !GetIntParam(   pSrvProc, 2, (int*)&dwRank      ) ||
        !GetIntParam(   pSrvProc, 3, (int*)&dwCount     ) )
    {
        XomNtEvent(XEVENT_STATS_CODE_77,
            "(xp_Stats_GetBucketListFromRange2) received invalid parameters");
        ret = 1;
        goto lDone;
    }

    // Get bucket map for leaderboard 'uidLeaderBoardId'
    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId,&pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_14,
            "(xp_Stats_GetBucketListFromRange2) GetBucketMap failed, hr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwRank=%d"
            "\ndwCount=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwRank, dwCount);
        ret = 1;
        goto lDone;
    }

    // Get bucket list for the requested rank range
    hr = pBucketMap->GetBucketListFromRange(dwRank, dwCount, &dwRelPos,
            rgdwBucketIds, &dwRetCount);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_15,
            "(xp_Stats_GetBucketListFromRange2) GetBucketListFromRange failed, hr=0x%08x"
            "\nuidLbId="DBGGUIDFMT
            "\ndwRank=%d"
            "\ndwCount=%d",
            hr, DBGGUIDPRM(&uidLeaderBoardId), dwRank, dwCount);
        ret = 1;
        goto lDone;
    }

    // Build the output parameter as a list of buckets and their subtotals.
    // BTW SQL parses binary stuff using the big endian model thus all these
    // revdwords
    for(dwBucketNdx = 0; dwBucketNdx < dwRetCount; dwBucketNdx++)
    {
        LONG lSubtotal;
        rgBucketSubtotals[dwBucketNdx].dwBucketId = revdword(rgdwBucketIds[dwBucketNdx]);

        hr = pBucketMap->GetSubtotal(rgdwBucketIds[dwBucketNdx], &lSubtotal);
        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_XSMT_UNEXPECTED_16,
                "(xp_Stats_GetBucketListFromRange2) GetSubtotal failed, hr=0x%08x"
                "\nuidLbId="DBGGUIDFMT
                "\ndwRank=%d"
                "\ndwCount=%d"
                "\ndwBucketId=%d",
                hr, DBGGUIDPRM(&uidLeaderBoardId), dwRank, dwCount,
                rgdwBucketIds[dwBucketNdx]);
            ret = 1;
            goto lDone;
        }

        rgBucketSubtotals[dwBucketNdx].dwSubtotal = revdword((DWORD)lSubtotal);
    }

    // Return the blob in the output parameter index 4
    if(!SetBinaryParam(pSrvProc, 4, (BYTE*)rgBucketSubtotals,
        dwRetCount*sizeof(BUCKET_SUBTOTAL)))
    {
        XomNtEvent(XEVENT_STATS_CODE_81,
            "(xp_Stats_GetBucketListFromRange2) output parameter is invalid (too short?)"
            "\nuidLbId="DBGGUIDFMT
            "\ndwRank=%d"
            "\ndwCount=%d",
            DBGGUIDPRM(&uidLeaderBoardId), dwRank, dwCount);
        ret = 1;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);
    return ret;
}


/******************************************************************************
  xp_Stats_GetTotal

  Returns the total number of entries in a leaderboard based on it's bucket
  map.

  Parameters:
   1 - @uid_lbId uniqueidentifier - leaderboard id
   2 - @i_total (int, output) - Receives the number of entries of the lb.
******************************************************************************/
SRVRETCODE xp_Stats_GetTotal(SRV_PROC* pSrvProc)
{
    GUID        uidLeaderBoardId;
    CLeaderBoardBucketMap* pBucketMap = NULL;
    DWORD       dwTotal;
    HRESULT     hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_40,
            "xp_Stats_GetTotal failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");
        goto lDone;
    }

    if( !GetGuidParam(pSrvProc, 1, &uidLeaderBoardId) )
    {
        XomNtEvent(XEVENT_STATS_CODE_82,
            "xp_Stats_GetTotal received invalid parameters");
        hr = E_INVALIDARG;
        goto lDone;
    }


    hr = g_LeaderBoardBucketMapList.GetBucketMap(uidLeaderBoardId, &pBucketMap);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_17,
            "xp_Stats_GetTotal failed. GetBucketMap failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT,
            hr, DBGGUIDPRM(&uidLeaderBoardId));
        goto lDone;
    }


    pBucketMap->GetTotal(&dwTotal);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_XSMT_UNEXPECTED_18,
            "xp_Stats_GetTotal failed. GetTotal failed. "
            "\nhr=0x%08x"
            "\nuidLbId="DBGGUIDFMT,
            hr, DBGGUIDPRM(&uidLeaderBoardId));
        goto lDone;
    }

    if( !SetIntParam(pSrvProc, 2, (int) dwTotal))
    {
        XomNtEvent(XEVENT_STATS_CODE_85,
                    "xp_Stats_AddToBucket output parameter is invalid.");
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SUCCEEDED(hr) ? 0 : 1);
}

#define MAX_ATTRIB 64

#pragma pack(push, 1)

struct ATTRIB_BINARY_DATA
{
    WORD wAttId;
    WORD wFlags;
    union
    {
        LONG lValue;
        LONGLONG llValue;
        double dValue;
    };
};

#pragma pack(pop)

// Deprecated
SRVRETCODE xp_Stats_UpdateAttribData(SRV_PROC* pSrvProc)
{
    ATTRIB_BINARY_DATA rgCurrent[MAX_ATTRIB * 2];
    ATTRIB_BINARY_DATA rgDiff[MAX_ATTRIB * 2];
    ATTRIB_BINARY_DATA rgNew[MAX_ATTRIB];
    ULONG cCurrent = 0;
    ULONG cDiff = 0;
    ULONG cNew = 0;
    ULONG nDiff = 0;
    ULONG nCurrent = 0;

    SRVRETCODE ret = 0;

    if( !GetBinaryParam(pSrvProc, 1, (BYTE*)rgCurrent, sizeof(rgCurrent), &cCurrent) ||
        !GetBinaryParam(pSrvProc, 2, (BYTE*)rgDiff, sizeof(rgDiff), &cDiff))
    {
        ret = 1201; //-- Bad parameters
        goto lDone;
    }

    cCurrent /= sizeof(ATTRIB_BINARY_DATA);
    cDiff /= sizeof(ATTRIB_BINARY_DATA);

    for(nDiff=0; nDiff < cDiff; nDiff++)
    {
        // Copy all attributes from the current list that have id less than
        // the current attrib in the diff list

        while(
            nCurrent < cCurrent &&
            rgDiff[nDiff].wAttId > rgCurrent[nCurrent].wAttId)
        {
            if(cNew == MAX_ATTRIB)
            {
                ret = 1202; // -- Exceeded limit of attributes
                goto lDone;
            }

            rgNew[cNew++] = rgCurrent[nCurrent++];
        }

        // This attribute is in the diff, skip it on the current list

        while(
            nCurrent < cCurrent &&
            rgCurrent[nCurrent].wAttId == rgDiff[nDiff].wAttId )
        {
            nCurrent++;
        }

        // Only write the attribute if it's not NULL

        if(rgDiff[nDiff].wFlags != 0)
        {
            if(cNew == MAX_ATTRIB)
            {
                ret = 1202; // -- Exceeded limit of attributes
                goto lDone;
            }

            rgNew[cNew++] = rgDiff[nDiff];
        }
    }

    if( !SetBinaryParam(pSrvProc, 3, (BYTE*) rgNew, cNew * sizeof(ATTRIB_BINARY_DATA)))
    {
        ret = 1201; // -- Bad parameters
        goto lDone;
    }

lDone:

    return ret;
}

#pragma pack(push, 1)

struct LB_BKT_PAIR
{
    GUID    uidLb;
    DWORD   dwBucket;
};

#pragma pack(pop)

static int CompareLbBktPair(
    const void* p1,
    const void* p2
)
{
    return memcmp(p1, p2, sizeof(LB_BKT_PAIR));
}

/******************************************************************************
  xp_Stats_SortLbBktList

  Sorts an array of LB_BKT_PAIR

  Parameters:
   1 - @uid_lbId uniqueidentifier - leaderboard id
   2 - @vb_lbbkt varbinary (input,output) - array of LB_BKT_PAIR
******************************************************************************/
SRVRETCODE xp_Stats_SortLbBktList(SRV_PROC* pSrvProc)
{
    LB_BKT_PAIR  rgLbBkt[40];
    DWORD           cLbBkt = 0;
    SRVRETCODE      ret = 0;

    if(!GetBinaryParam(pSrvProc, 1, (BYTE*)rgLbBkt, sizeof(rgLbBkt), &cLbBkt))
    {
        ret = 1; //-- Bad parameters
        goto lDone;
    }

    cLbBkt /= sizeof(LB_BKT_PAIR);

    qsort(rgLbBkt, cLbBkt, sizeof(LB_BKT_PAIR), CompareLbBktPair);

    if( !SetBinaryParam(pSrvProc, 1, (BYTE*)rgLbBkt, cLbBkt * sizeof(LB_BKT_PAIR)))
    {
        ret = 1; // -- Bad parameters
        goto lDone;
    }

lDone:

    return ret;
}

/*******************************************************************************
  xp_Stats_ListBucketMaps

  Creates a rowset with all the bucketmaps and basic information about them.

  No parameters.
*******************************************************************************/
SRVRETCODE xp_Stats_ListBucketMaps(SRV_PROC* pSrvProc)
{
    SRVRETCODE      ret     = 0;
    GUID            uidLbId;
    DWORD           dwBucketCount;
    DWORD           dwBucketAvgSize;
    DWORD           dwLbSize;
    BUCKETMAPINFO*  pBucketMapInfo = NULL;
    DWORD           dwCount = 0;
    DWORD           dwNdx;
    HRESULT     hr;

    srv_describe(pSrvProc, 1, "uid_leader_board_id", SRV_NULLTERM, SRVGUID,
        sizeof(GUID), SRVGUID, sizeof(GUID), &uidLbId);

    srv_describe(pSrvProc, 2, "i_bucketCount", SRV_NULLTERM, SRVINT4, 0,
        SRVINT4, 0, &dwBucketCount);

    srv_describe(pSrvProc, 3, "i_bucketAvgSize", SRV_NULLTERM, SRVINT4, 0,
        SRVINT4, 0, &dwBucketAvgSize);

    srv_describe(pSrvProc, 4, "i_LbSize", SRV_NULLTERM, SRVINT4, 0,
        SRVINT4, 0, &dwLbSize);

    hr = g_LeaderBoardBucketMapList.ListBucketMaps(&pBucketMapInfo, &dwCount);

    if(FAILED(hr))
    {
        ret = 1;
        goto lDone;
    }

    for(dwNdx=0; dwNdx < dwCount; dwNdx++)
    {
        uidLbId         = pBucketMapInfo[dwNdx].uidLbId;
        dwBucketCount   = pBucketMapInfo[dwNdx].dwBucketCount;
        dwBucketAvgSize = pBucketMapInfo[dwNdx].dwTotalRatings/pBucketMapInfo[dwNdx].dwBucketCount;
        dwLbSize        = pBucketMapInfo[dwNdx].dwTotalRatings;

        srv_sendrow(pSrvProc);
    }

    srv_senddone(pSrvProc, SRV_DONE_FINAL, 0, 0);

lDone:

    if(pBucketMapInfo != NULL)
        delete[] pBucketMapInfo;

    return ret;
}

/*******************************************************************************
  xp_Stats_GetPreviousNonEmptyBucket

  Given a bucket id, it returns the bucket id of the first non empty bucket
  that precedes it.

  Parameters:
  1 - @uid_lbId uniqueidentifier
  2 - @i_bucketId int
  3 - @i_PrevBucketId int output

*******************************************************************************/
SRVRETCODE xp_Stats_GetPreviousNonEmptyBucket(SRV_PROC* pSrvProc)
{
    GUID                    uidLbId;
    DWORD                   dwBucketId;
    DWORD                   dwPrevBucketId;
    CLeaderBoardBucketMap*  pBucketMap = NULL;
    HRESULT                 hr = S_OK;

    hr = LazyInit();
    if(FAILED(hr))
    {
       XomNtEvent(XEVENT_STATS_CONFIG_41,
           "xp_Stats_GetPreviousNonEmptyBucket failed because of initialization failure. "
           "Unload the dll, correct the problem and initialize again. ");
       goto lDone;
    }

    // Get parameters
    if( !GetGuidParam(pSrvProc, 1, &uidLbId) ||
        !GetIntParam(pSrvProc, 2, (int*) &dwBucketId) )
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

    // Get bucket map
    GOTO_LDONE_IF_FAILED_HR(
        g_LeaderBoardBucketMapList.GetBucketMap(uidLbId, &pBucketMap) );

    // Get the prev bucket id
    hr = pBucketMap->GetPreviousNonEmptyBucket(dwBucketId, &dwPrevBucketId);
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_86,
            "xp_Stats_GetPreviousNonEmptyBucket failed. GetPreviousNonEmptyBucket returned 0x%08x.", hr);
        goto lDone;
    }

    if(hr == S_FALSE)
    {
        // There are no more buckets
        hr = 1;
        goto lDone;
    }

    // Set output parameter
    if( !SetIntParam(pSrvProc, 3, (int) dwPrevBucketId))
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CODE_87,
            "xp_Stats_GetPreviousNonEmptyBucket failed. "
            "\nhr: 0x%08x"
            "\nuidLbId: "DBGGUIDFMT
            "\ndwBucketId: %d",
            hr, DBGGUIDPRM(&uidLbId), dwBucketId);
    }

    return (SRVRETCODE) hr;
}


/*******************************************************************************
  xp_Stats_GetBucketIdsForRatings

  Find bucket ids for a bunch of ratings.
  Returns 1 if the bucket id list passed in was modified. Returns 0 if the list
  was not modified.

  Parameters:
  1 - @i_MaxBucketSize - int - Maximum bucket size. It will be used to decide
                         when a one-rating bucket is full.
  2 - @vb_lbid         - varbinary(320) - Binary blob with leaderboard GUIDs
  3 - @vb_rating       - varbinary(160) - Binary blob with rating bigints
                         (int64) big endian.
  4 - @vb_ratingNull   - varbinary(20) - Binary blob with rating null flags.
                         Each flag is a byte and is 0 if the rating is not null
                         or 1 otherwise.
  5 - @vb_noupdate     - varbinary(20) - Binary blob with no update flags.
                         Each flag is a byte and is 0 if the rating is going to
                         be updated or 1 otherwise.
  6 - @vb_bucketId     - varbinary(80) - INPUT, OUTPUT - on input this blob
                         should contain the array of bucket ids (big endian)
                         retrieved in a previous call. On output it will
                         contain the updated list of bucket ids.
*******************************************************************************/
SRVRETCODE xp_Stats_GetBucketIdsForRatings(SRV_PROC* pSrvProc)
{
    HRESULT hr = S_OK;

    static const DWORD MAXPARAMS = 20;

    DWORD    dwMaxBucketSize;
    GUID     rgLbId      [MAXPARAMS];
    LONGLONG rgRating    [MAXPARAMS];
    BYTE     rgRatingNull[MAXPARAMS];
    BYTE     rgNoUpdate  [MAXPARAMS];
    DWORD    rgBucketId  [MAXPARAMS];
    DWORD    cLbId;
    DWORD    cRating;
    DWORD    cRatingNull;
    DWORD    cNoUpdate;
    DWORD    cBucketId;

    CLeaderBoardBucketMap* pBucketMap = NULL;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_42,
            "xp_Stats_AddToBucket failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");

        hr = E_FAIL;
        goto lDone;
    }

    if(
        !GetIntParam(pSrvProc, 1, (int*) &dwMaxBucketSize) ||
        !GetBinaryParam(pSrvProc, 2, (BYTE*)rgLbId, sizeof(rgLbId), &cLbId) ||
        !GetBinaryParam(pSrvProc, 3, (BYTE*)rgRating, sizeof(rgRating), &cRating) ||
        !GetBinaryParam(pSrvProc, 4, (BYTE*)rgRatingNull, sizeof(rgRatingNull), &cRatingNull) ||
        !GetBinaryParam(pSrvProc, 5, (BYTE*)rgNoUpdate, sizeof(rgNoUpdate), &cNoUpdate) ||
        !GetBinaryParam(pSrvProc, 6, (BYTE*)rgBucketId, sizeof(rgBucketId), &cBucketId)
    )
    {
        WriteMsg(pSrvProc, "xp_Stats_GetPreviousNonEmptyBucket failed. Bad Parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    // Adjust counts from bytes to units
    cLbId       /= sizeof(GUID);
    cRating     /= sizeof(LONGLONG);
    cRatingNull /= sizeof(BYTE);
    cBucketId   /= sizeof(DWORD);

    bool fIsDifferent = false;

    for(DWORD i=0; i < cLbId; i++)
    {
        DWORD dwNewBucketId;
        DWORD dwPrevBucketId = revdword(rgBucketId[i]);

        // Skip ratings that are null
        if(rgRatingNull[i] != 0)
            continue;

        hr = g_LeaderBoardBucketMapList.GetBucketMap(rgLbId[i], &pBucketMap);

        if(SUCCEEDED(hr))
        {
            hr = pBucketMap->GetBucketIdForRating(revqword(rgRating[i]), dwMaxBucketSize, dwPrevBucketId, &dwNewBucketId);

            if(FAILED(hr))
            {
                hr = E_FAIL;
                WriteMsg(pSrvProc, "xp_Stats_GetPreviousNonEmptyBucket failed. "
                    "GetBucketIdForRating returned 0x%u. LbId="DBGGUIDFMT
                    " Rating=%64d MaxBucketSize=%d.", hr, DBGGUIDPRM(&(rgLbId[i])),
                    revqword(rgRating[i]), dwMaxBucketSize);
                goto lDone;
            }

            pBucketMap->Release();
            pBucketMap = NULL;
        }
        else
        {
            // Leaderboard not found. But this could be a lightweight
            // leaderboard in which case there wouldn't be in-memory bucket
            // maps for it. In this case, we're going to use bucket id 1.

            dwNewBucketId = 1;
            hr = S_OK;
        }

        if(dwPrevBucketId != dwNewBucketId)
        {
            fIsDifferent  = true;
            rgBucketId[i] = revdword(dwNewBucketId);
        }
    }

    if(!SetBinaryParam(pSrvProc, 6, (BYTE*)rgBucketId, sizeof(ULONG) * cBucketId))
    {
        WriteMsg(pSrvProc, "xp_Stats_GetPreviousNonEmptyBucket failed. Failed to write to parameter 6.");
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    if(SUCCEEDED(hr) && fIsDifferent)
    {
        hr = 1; // Return to the client that the data has changed
    }

    return (SRVRETCODE) hr;
}

/*******************************************************************************
  xp_Stats_GetBucketRangeSubtotals

  Retrieves the subtotals of a list of buckets

  Parameters:
  1 - @vb_lbbucket - varbinary(2020) - blob with the concatenated binaries of
                     leaderboard ids and buckets for which subtotals should be
                     calculated.
  2 - @vb_subtotals - varbinary(404) output - return parameter that will contain
                     the subtotals calculated for each leaderboard-bucket pair.

*******************************************************************************/
SRVRETCODE xp_Stats_GetBucketRangeSubtotals(SRV_PROC* pSrvProc)
{
    HRESULT hr = S_OK;

    static const DWORD MAXPARAMS = 101;

    // struct to map the parameter blob
    struct LBBUCKET
    {
        GUID  guidLbId;
        DWORD dwBucketId;
    };

    LBBUCKET rgParams[MAXPARAMS];
    LONG     rgSubtotals[MAXPARAMS];
    DWORD    cParams;

    CLeaderBoardBucketMap* pBucketMap = NULL;

    hr = LazyInit();
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_STATS_CONFIG_43,
            "xp_Stats_AddToBucket failed because of initialization failure. "
            "Unload the dll, correct the problem and initialize again. ");

        hr = E_FAIL;
        goto lDone;
    }

    if(!GetBinaryParam(pSrvProc, 1, (BYTE*)rgParams, sizeof(rgParams), &cParams))
    {
        WriteMsg(pSrvProc, "xp_Stats_GetBucketRangeSubtotals failed. Bad Parameters.");
        hr = E_INVALIDARG;
        goto lDone;
    }

    // Adjust counts from bytes to units
    cParams /= sizeof(LBBUCKET);

    // For each leaderboard-bucket pair
    for(DWORD i=0; i < cParams; i++)
    {
        // Retrieve the bucket map
        hr = g_LeaderBoardBucketMapList.GetBucketMap(rgParams[i].guidLbId, &pBucketMap);

        if(FAILED(hr))
        {
            hr = E_FAIL;
            WriteMsg(pSrvProc, "xp_Stats_GetBucketRangeSubtotals failed. "
                "GetBucketMap returned 0x%u. LbId="DBGGUIDFMT
                " Bucket=%u", hr, DBGGUIDPRM(&(rgParams[i].guidLbId)),
                rgParams[i].dwBucketId);
            goto lDone;
        }

        // Calculate the subtotal
        hr = pBucketMap->GetSubtotal(rgParams[i].dwBucketId, &(rgSubtotals[i]));

        if(FAILED(hr))
        {
            hr = E_FAIL;
            WriteMsg(pSrvProc, "xp_Stats_GetBucketRangeSubtotals failed. "
                "GetSubtotal returned 0x%u. LbId="DBGGUIDFMT
                " Bucket=%u", hr, DBGGUIDPRM(&(rgParams[i].guidLbId)),
                rgParams[i].dwBucketId);
            goto lDone;
        }

        pBucketMap->Release();
        pBucketMap = NULL;
    }

    // Return the subtotals to the caller
    if(!SetBinaryParam(pSrvProc, 2, (BYTE*)rgSubtotals, sizeof(LONG) * cParams))
    {
        WriteMsg(pSrvProc, "xp_Stats_GetPreviousNonEmptyBucket failed. Failed to write to parameter 6.");
        hr = E_INVALIDARG;
        goto lDone;
    }

lDone:

    SAFE_RELEASE(pBucketMap);

    return (SRVRETCODE) hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\common\PerfCounters.cs ===
// 
// PerfCounters.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Common PerfCounters
// Xbox Online Service
// 
// Author: ganeshg 6/2008
//

using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.storage.common
{
    [XomPerformanceCounterCategoryAttr( "Storage FD - Common", "Xbox Live Storage - Storage Common Performance Counters " )]
    public class StorageCommonCounters : XomPerformanceCounterCategory
    {
        static public StorageCommonCounters Counters = new StorageCommonCounters();

        public virtual StorageCommonCounters this[string instance]
        {
            get
            {
                return (StorageCommonCounters) GetInstance(instance);
            }
        }

        //Cache Counters
        [XomPerformanceCounterAttr(
            "Cache: Avg. Access Time",
            "Average access time in milliseconds",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageCacheAccessTime;

        [XomPerformanceCounterAttr(
             "Cache: Avg. Access Time Base",
             "Base for the average access time",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageCacheAccessTimeBase;


    } 


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\common\StorageException.cs ===
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Web;

using System.Runtime.Serialization;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.storage.common
{

    public class StorageException : XRLException
    {

        //The hr is replaced by the InnerExceptions HR           
        public StorageException(HResult hr, XEvent.Id EventId, string message, Exception innerException)
            : base( StorageUtils.GetHr(innerException, hr)
                    , EventId
                    , message
                    , innerException)
        {
            //Xom.NtEvent(EventId, message );

        }

        public StorageException(XEvent.Id EventId, string message, Exception innerException)
            : base(  xonline.common.service.HResult.XONLINE_E_STORAGE_ERROR
                    , EventId
                    , message
                    , innerException)
        {
            //Xom.NtEvent(EventId, message );

            

        }


        //The hr is replaced by the InnerExceptions HR           
        public StorageException(HResult hr, XEvent.Id EventId, string message)
            : base(hr
                    , EventId
                    , message)
        {
            //Xom.NtEvent(EventId, message );

        }

        //The hr is replaced by the InnerExceptions HR           
        public StorageException(XEvent.Id EventId, string message)
            : base(xonline.common.service.HResult.XONLINE_E_STORAGE_ERROR
                    , EventId
                    , message)
        {
            //Xom.NtEvent(EventId, message );

        }


    }



    #region Comment

    //[Serializable]
    //public class BaseStorageException1 : XRLException
    //{
    //    //XRLException 

    //    #region Constructors

    //    public BaseStorageException1() : base("") { }
    //    public BaseStorageException1(string resourceName, string message) : this(resourceName, message, null) { }

    //    #region Serialiable

    //    protected BaseStorageException1(SerializationInfo info, StreamingContext context)
    //        : base(info, context)
    //    {
    //        resourceName = info.GetString("resourceName");
    //    }

    //    #endregion Serialiable


    //    #endregion Constructors



    //    #region Properties
    //    private string errorMessage;

    //    protected string ErrorMessage
    //    {
    //        get { return errorMessage; }
    //        set { errorMessage = value; }
    //    }


    //    #endregion Properties



    //    #region Methods

    //    public override void GetObjectData(SerializationInfo info, StreamingContext context)
    //    {
    //        base.GetObjectData(info, context);
    //        info.AddValue("resourceName", resourceName);
    //    }

    //    public override string Message
    //    {
    //        get
    //        {
    //            string BaseMessage = base.Message;

    //            if (string.IsNullOrEmpty(BaseMessage))
    //                BaseMessage = DefaultMessage;

    //            return BaseMessage;
    //        }
    //    }

    //    protected virtual string DefaultMessage
    //    {
    //        get { return string.Format("Encountered error for resource '{0}'.", resourceName ?? "(unnamed)"); }
    //    }

    //    #endregion Methods


    //}

    //[Serializable]
    //public class StorageException : BaseStorageException1
    //{
    //    public StorageException() : base("") { }
    //    public StorageException(string resourceName) : this(resourceName, "") { }
    //    public StorageException(string resourceName, string message) : this(resourceName, message, null) { }
    //    public StorageException(string resourceName, string message, Exception inner) : base(resourceName, message, inner) { }

    //    protected StorageException(SerializationInfo info, StreamingContext context)
    //        : base(info, context) { }

    //    protected override string DefaultMessage
    //    {
    //        get { return string.Format("Resource '{0}' has reached its thread threshold.", ResourceName ?? "(unnamed)"); }
    //    }
    //}



    #endregion Comment

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\common\Validations.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Collections.Specialized;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.server.storage.common
{
    public class Validations
    {
        //Check if a value is Null
        public static void IsNull(object value, string description)
        {
            if (value == null)
                throw new ArgumentException("Invalid value for " + description);

        }


        //Check if either of two values is Null
        public static void IsNull(object value1, object value2, string description)
        {
            if ( (value1 == null) &&  (value2 == null) )
                throw new ArgumentException("Invalid value for " + description);
        }



        //Check if a value is Null
        public static void IsNullOrEmpty(string value, string description)
        {
            if (String.IsNullOrEmpty(value) )
                throw new ArgumentException("Invalid value for " + description);

        }


        //Check if either of two values is Null
        public static void IsNullOrEmpty(string value1, string value2, string description)
        {
            if (  String.IsNullOrEmpty(value1) && String.IsNullOrEmpty(value2) )
                throw new ArgumentException("Invalid value for " + description);
        }


    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\common\StorageUtils.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Collections.Specialized;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities2;
using System.Collections;

[assembly: XomAreaDefinition(XomAreaName.storageUtilsTrace)]

namespace xonline.server.storage.common
{
    
    public class StorageSettings
    {
 

    }


    // -----------------------------------------------------------------------------------
    // Class, for holding constants
    // -----------------------------------------------------------------------------------
    public class StorageConstants
    {        
        //Caching Key prefix for StorageModule
        public const string XbancCacheKeyPrefix = "Storage:";              
           
        private static Dictionary<string, string> defaultPicMapping = null;
        public static Dictionary<string, string> DefaultPicMapping
        {
            get
            {
                //Get the mapping 
                if (defaultPicMapping == null)
                {
                    LoadDefaultPicMappings() ;
                }                
                return defaultPicMapping;                
            }
        }

        
        private static Dictionary<string, byte[]> defaultPics = null;
        public static Dictionary<string, byte[]> DefaultPics
        {
            get
            {
                if (defaultPics == null)
                {
                    LoadDefaultPicMappings() ;
                }                
                return defaultPics;                
            }
        }

        public static void LoadDefaultPicMappings()
        {
            Dictionary<string, string> picMapping = new Dictionary<string, string>();
            Dictionary<string, byte[]> pics = new Dictionary<string, byte[]>();
                       
            LoadDefaultSinglePicMappings(MultiSetting.storageModule_DefaultAvatarPicBody , picMapping , pics );

            LoadDefaultSinglePicMappings(MultiSetting.storageModule_DefaultAvatarPicLarge, picMapping , pics);
            
            LoadDefaultSinglePicMappings(MultiSetting.storageModule_DefaultAvatarPicSmall, picMapping , pics);

            defaultPicMapping = picMapping;
            defaultPics = pics ;

        }

        private static void LoadDefaultSinglePicMappings(string str , Dictionary<string,string> picMapping,Dictionary<string,byte[]> pics)
        {           
            pics.Add(str, Config.GetBlobSetting(str) );
            foreach (string s in Config.GetMultiSetting(str))
            {
                picMapping.Add( s , str);
            }
        }
        

        public static byte[] GetDefaultPic(string fileName)
        {
            string defaultFile = "";
            byte[] data = new byte[0] {};

            DefaultPicMapping.TryGetValue( fileName, out defaultFile);
            if ( !String.IsNullOrEmpty(defaultFile) )
                DefaultPics.TryGetValue(defaultFile , out data );

            return data;
        }

        
        public static bool HasDefaultPic(string fileName)
        {
            return DefaultPicMapping.ContainsKey( fileName);
        }


        public static string DisplayDefaultPicMappings()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("The following represents the filename --> default picture key \n");
            foreach (KeyValuePair<string, string> entry in DefaultPicMapping)
            {
                sb.AppendFormat(" {0} --> {1} \n", entry.Key, entry.Value);
            }
            sb.Append("\n\n To get the actual bits for the default picture, please look in npdb..t_config_blobs using vc_config_blob_name = default picture key ");

            return sb.ToString();

        }
    }

    //ToDo: fully flush out and use this class
    public class MultiSettingValues
    {
        public string[] values;
        public List<string> valueCollection;
        private string key ;

        public MultiSettingValues(string setting)
        {
            key = setting;
            values = Config.GetMultiSetting(setting);
            valueCollection = new List<string>(values);
        }

        public bool Contains(string str)
        {
            return valueCollection.Contains(str);
        }

        //public void Reload(string[] newValues)
        //{
        //    //Just call constructor again           
        //}

    }

    public class StorageUtils
    {

        //Method to URL Decode an Encoded collection of data
        public static NameValueCollection UrlDecodeCollection(NameValueCollection queryStrings)
        {

            NameValueCollection queryStringsUrlDecoded = new NameValueCollection();

            foreach (string s in queryStrings.Keys)
            {
                queryStringsUrlDecoded.Add(s, HttpUtility.UrlDecode(queryStrings[s]));
            }

            return queryStringsUrlDecoded;
        }


        //Gets the HR from an exception
        public static HResult GetHr(Exception e, HResult hr)
        {
            if (e is XRLException)
            {
                hr = ((XRLException)e).HResult;
            }

            return hr;
        }


        public static string GetCacheKey(string storagePath)
        {
            return (StorageConstants.XbancCacheKeyPrefix + storagePath);
        }


        public static bool IsFileInCache(string keyString, out EnumeratedReadFileInfo fileInfo, bool enableXbancCaching, string perfCounterInstanceName)
        {

            fileInfo = new EnumeratedReadFileInfo();

            if (enableXbancCaching)
            {
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

                try
                {
                    XBanc xb = new XBanc();

                    //Initialize
                    byte[] key;
                    byte[] value;

                    //Set Key value
                    ASCIIEncoding encoding = new ASCIIEncoding();
                    key = encoding.GetBytes(keyString);

                    //Call XBanc
                    HResult hr = xb.Query(key, out value);

                    //Parse results
                    if (hr == HResult.S_OK)
                    {
                        fileInfo.ReadFrom(value);
                        return true;
                    }
                    else if (hr == HResult.S_FALSE)
                    {
                        return false;
                    }
                    else
                    {
                        // E_INVALIDARG / E_ABORT                        
                        if (value != null)
                          Xom.NtEvent(XEvent.Id.STORAGE_MODULE_XBANC_ERROR, String.Format("Error while Querying XBanc {0} . Key={1} , Value={2} ", hr, keyString, value.ToString()));
                        else
                          Xom.NtEvent(XEvent.Id.STORAGE_MODULE_XBANC_ERROR, String.Format("Error while Querying XBanc {0} . Key={1} , Value=Null ", hr, keyString));

                        return false;
                    }

                }
                catch
                {
                    throw;
                }
                finally
                {
                    if (!String.IsNullOrEmpty(perfCounterInstanceName))
                    {
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTimeBase.Increment();
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    }
                }
            }
            else
            {
                return false;
            }

        }


        public static bool AddFileInfoToCache(string keyString, EnumeratedReadFileInfo fileInfo, bool enableXbancCaching, string perfCounterInstanceName)
        {

            if (enableXbancCaching)
            {
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

                uint timeOut = Convert.ToUInt32 (Config.GetSetting(Setting.storage_xbancCacheTimeOut));

                try
                {
                    XBanc xb = new XBanc();

                    //Initialize
                    byte[] key;
                    byte[] value = new byte[fileInfo.Size()];

                    //Set the values
                    ASCIIEncoding encoding = new ASCIIEncoding();
                    key = encoding.GetBytes(keyString);
                    fileInfo.WriteTo(value);

                    //Call XBanc
                    HResult hr = xb.SetData(key, value, timeOut, timeOut);

                    //Parse results
                    if ((hr == HResult.S_OK) || (hr == HResult.S_FALSE))
                    {
                        return true;
                    }
                    else
                    {
                        // E_INVALIDARG / E_ABORT
                      Xom.NtEvent(XEvent.Id.STORAGE_MODULE_XBANC_ERROR, String.Format("Error while adding data to XBanc {0} . Key={1} , FileInfo Value={2} ", hr, keyString, fileInfo.ToString()));
                        return false;
                    }

                }
                catch
                {
                    throw;
                }
                finally
                {
                    if (!String.IsNullOrEmpty(perfCounterInstanceName))
                    {
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTimeBase.Increment();
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    }
                }
            }
            else
            {
                return false;
            }
        }

        
        public static bool RemoveFileFromCache(string keyString, bool enableXbancCaching, string perfCounterInstanceName)
        {
            

            if (enableXbancCaching)
            {
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

                try
                {
                    XBanc xb = new XBanc();

                    //Initialize
                    byte[] key;

                    //Set the values
                    ASCIIEncoding encoding = new ASCIIEncoding();
                    key = encoding.GetBytes(keyString);

                    //Call XBanc
                    HResult hr = xb.Remove(key);

                    //Parse results
                    if ((hr == HResult.S_OK) || (hr == HResult.S_FALSE))
                    {
                        return true;
                    }
                    else
                    {
                        // E_INVALIDARG / E_ABORT
                      Xom.NtEvent(XEvent.Id.STORAGE_MODULE_XBANC_ERROR, String.Format("Error while adding data to XBanc {0} . Key={1} ", hr, keyString));
                        return false;
                    }

                }
                catch
                {
                    throw;
                }
                finally
                {
                    if (!String.IsNullOrEmpty(perfCounterInstanceName))
                    {
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTimeBase.Increment();
                        StorageCommonCounters.Counters[perfCounterInstanceName].AverageCacheAccessTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    }
                }
            }
            else
            {
                return false;
            }
        }

    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\GetQuota.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * GetQuota.cs
 *
 * Implementation of GetQuota request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.gtqTrace)]

namespace xonline.server.storage.fd
{
    // GetQuota
    // HTTP handler for ReadFile request
    public class GetQuota : StfdHandler
    {
        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            CallSource.Check(VirtualInterface.stfd_storage_int);
            _ProcessRequest(ctx);
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            GetQuotaRequest req = new GetQuotaRequest();
            GetQuotaResponse resp = null;

            HResult hr = HResult.S_OK;

            Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_NORMAL, "GetQuota: entered.");

            // Parse request
            try
            {
                req.ReadFromRequest(ctx.Request);
                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_NORMAL, "GetQuota: request parsed:" + req.ToString());
            }
            catch(Exception e)
            {
                hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;

                Xom.NtEvent(XEvent.Id.STORAGE_HACK_5, e,
                    "Invalid GetQuota request."
                );

                goto lDone;
            }

            // Find the storage domain
            StorageDomain domain = StorageDomainList.GetDomain(req._domainId);

            // Read quota from the database
            try
            {
                ulong totalBytesMax;
                ulong totalBytesUsed;
                uint totalFilesMax;
                uint totalFilesUsed;

                DbGetQuota(
                    domain,
                    req._titleId,
                    req._keyType,
                    req._keyValue,
                    out totalBytesMax,
                    out totalBytesUsed,
                    out totalFilesMax,
                    out totalFilesUsed);

                resp = new GetQuotaResponse();
                resp._maxFileSize = domain._policy.MaxFileSize;
                resp._totalBytesMax = totalBytesMax;
                resp._totalBytesUsed = totalBytesUsed;
                resp._totalFilesMax = totalFilesMax;
                resp._totalFilesUsed = totalFilesUsed;

                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_LOW, "GetQuota: response: " + resp.ToString());
            }
            catch (Exception e)
            {
                if ( e is XRLException )
                {
                    hr = ((XRLException) e).HResult;
                }
                else
                {
                    hr = HResult.XONLINE_E_STORAGE_ERROR;
                }

                Xom.NtEvent(XEvent.Id.STORAGE_CODE_1, e,
                    "GetQuota failed: " +
                    "\r\nGetQuotaRequest: " + req.ToString()
                );

                goto lDone;
            }

            hr = HResult.S_OK;
            // Send reply
            XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr, resp);

            Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "GetQuota: completed successfully.");

    lDone:

            string logMsg =
                "GTQ"                                        + "|" +
                hr                                           + "|" +
                req._domainId                                + "|" +
                req._titleId                                 + "|" +
                req._keyType                                 + "|" +
                req._keyValue.ToString("X")                  + "|" +
                (resp == null ? 0 : resp._totalBytesMax)     + "|" +
                (resp == null ? 0 : resp._totalBytesUsed)    + "|" +
                (resp == null ? 0 : resp._totalFilesMax)     + "|" +
                (resp == null ? 0 : resp._totalFilesUsed);

            Xom.Log(XomAreaName.log, logMsg);

            if (HResult.Failed(hr))
            {
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_NORMAL, "GetQuota: returning hr = " + hr);
            }

            return;
        }

        private void DbGetQuota(
            StorageDomain domain,
            uint titleId,
            uint keyType,
            ulong ulKey,
            out ulong totalBytesMax,
            out ulong totalBytesUsed,
            out uint totalFilesMax,
            out uint totalFilesUsed)
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();


                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_quota_get";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) domain._id;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = (int) titleId;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) ulKey;
                cmd.Parameters.Add("@si_Hash_Bucket", SqlDbType.Int).Value = (int) cmd.Partition;

                SqlParameter totalBytesMaxParam = new SqlParameter("@bi_total_bytes_max", SqlDbType.BigInt);
                totalBytesMaxParam.Direction = ParameterDirection.Output;
                totalBytesMaxParam.Value = 0;
                cmd.Parameters.Add(totalBytesMaxParam);

                SqlParameter totalBytesUsedParam = new SqlParameter("@bi_total_bytes_used", SqlDbType.BigInt);
                totalBytesUsedParam.Direction = ParameterDirection.Output;
                totalBytesUsedParam.Value = 0;
                cmd.Parameters.Add(totalBytesUsedParam);

                SqlParameter totalFilesMaxParam = new SqlParameter("@bi_total_files_max", SqlDbType.BigInt);
                totalFilesMaxParam.Direction = ParameterDirection.Output;
                totalFilesMaxParam.Value = 0;
                cmd.Parameters.Add(totalFilesMaxParam);

                SqlParameter totalFilesUsedParam = new SqlParameter("@bi_total_files_used", SqlDbType.BigInt);
                totalFilesUsedParam.Direction = ParameterDirection.Output;
                totalFilesUsedParam.Value = 0;
                cmd.Parameters.Add(totalFilesUsedParam);

                // Execute stored procedure
                cmd.ExecuteNonQuery();

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ((int)ret.Value);
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_7, "DbGetQuota: stored procedure p_file_get failed with hr = " + hr);
                }

                totalBytesMax = (ulong)((long)totalBytesMaxParam.Value);
                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_INFO, "DbGetQuota: totalBytesMax=" + totalBytesMax);

                totalBytesUsed = (ulong)((long)totalBytesUsedParam.Value);
                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_INFO, "DbGetQuota: totalBytesUsed=" + totalBytesUsed);

                totalFilesMax = (uint)((long)totalFilesMaxParam.Value);
                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_INFO, "DbGetQuota: totalFilesMax=" + totalFilesMax);

                totalFilesUsed = (uint)((long)totalFilesUsedParam.Value);
                Xom.Trace(XomAreaName.gtqTrace, LogLevel.L_INFO, "DbGetQuota: totalFilesUsed=" + totalFilesUsed);
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}' after {1} milliseconds",
                        cmd.Database.Server, timeElapsed.MillisecondsElapsed), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\EnumeratedReadFile.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * EnumeratedReadFile.cs
 *
 * Implementation of EnumeratedReadFile request
 *
 * */




using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;
using System.Collections.Specialized;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

using xonline.server.storage.common;
using System.Net;

[assembly: XomAreaDefinition(XomAreaName.enmrdfTrace)]

namespace xonline.server.storage.fd
{
   

    // EnumeratedReadFile
    // HTTP handler for EnumeratedReadFile request
    public class EnumeratedReadFile : StfdHandler
    {
        #region -------------------- Constructor --------------------

        static EnumeratedReadFile()
        {
        }

        // Operation
        public override uint GetOperation()
        {
            return (uint) Operation.FileEnumeratedRead;
        }
        #endregion -------------------- Constructor --------------------




        #region -------------------- ProcessRequest --------------------

        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.EnumeratedReadFileCurrent.Increment();
                _ProcessRequest(ctx);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.EnumeratedReadFileCurrent.Decrement();
                StorageCounters.Counters.EnumeratedReadFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.EnumeratedReadFileAvgTimeBase.Increment();
            }
            
        }

        public void _ProcessRequest(HttpContext ctx)
        {

            bool sendXRLRequest = true;

            ReqEnumeratedReadFile req = new ReqEnumeratedReadFile();
            RepHdrReadFile replyReadFile = new RepHdrReadFile();
            //RepHdrEnumeratedReadFile rep = new RepHdrEnumeratedReadFile();

            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;
            string instance = null;
            byte[] blob = null;

            try
            {

                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: entered.");

                BinaryReader    reader  = new BinaryReader(ctx.Request.InputStream);
                BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);


                NameValueCollection queryStringsUrlDecoded = StorageUtils.UrlDecodeCollection(ctx.Request.QueryString);


                // Parse request
                hr = ParseRequest(queryStringsUrlDecoded, hr, ref req , ref sendXRLRequest);
                hr = CheckProtocolElements(req, hr);
                
                // Extract the pathname
                ParsePathName(req, ref path, ref hr, ref instance);
                pathName = path.PathName;

                //Validations
                hr = ValidateRequest(req, hr);
                //hr = VerifyAccess(req, path, hr);
                //hr = VerifyRequestContent(ctx, req, hr, reader); 



                // Read file from the cache / database                
                EnumeratedRead(ctx, req, replyReadFile, ref blob, pathName, path, ref hr, instance, false, GetOperation()) ;

                // Send reply
                BuildResponse(ctx, sendXRLRequest, replyReadFile, blob, hr);                
                
                Log(req, blob, pathName, path, hr);
                UpdatePerfCounters(timeElapsed, blob, instance);
                UpdateResponsePerfCounters(ctx, req, blob, pathName, path, hr, instance); 

                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: completed successfully.");


            }
            catch (Exception e)
            {
                HandleError(ctx, sendXRLRequest, req, hr, e);                               
            }
            finally
            {

            }


            return;
        }


        
        private static void EnumeratedRead(HttpContext ctx, ReqEnumeratedReadFile req, RepHdrReadFile repReadFile, ref byte[] blob, string pathName, PathInfo path, ref HResult hr, string instance, bool updateReadCount, uint operation)        
        {
                ReqReadFile reqReadFile = Translator.TranslateRequest(req) ;

                // Read file from the database
                ReadFile.FileRead(ctx, reqReadFile, repReadFile, ref blob, pathName, path, ref hr, instance, updateReadCount, operation, 0, 0);

        }

        #endregion -------------------- ProcessRequest --------------------

 
 

        #region -------------------- Request & Response Handling -------------------- 

        
        private static HResult ParseRequest( NameValueCollection parameters, HResult hr, ref ReqEnumeratedReadFile req, ref bool sendXRLRequest)
        {
            try
            {
                req = new ReqEnumeratedReadFile(parameters);
                  
  
                string[] values = new string[] { };
                string key = "";

                //SendXRLResponse parameter
                key = EnumeratedReadFileParameters.SendXRLResponse;
                values = parameters.GetValues(key);
                if (values.Length == 1)
                {
                    sendXRLRequest = Convert.ToBoolean(parameters[key]);
                }

                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: request parsed:" + req.ToString());
            }
            catch(Exception e)
            {
                string msg = String.Format( "Invalid EnumeratedReadFile request: " + req.ToString() );

                throw new StorageException( HResult.XONLINE_E_STORAGE_INVALID_REQUEST
                                            , XEvent.Id.STORAGE_HACK_6 
                                            , msg
                                            , e);
                // HandleError(ctx, req, blob, pathName, path, hr, instance); 

            }

            return hr;
        }


        private static void ParsePathName(ReqEnumeratedReadFile req, ref PathInfo path, ref HResult hr, ref string instance)
        {
            // Parse and validate pathname
            try
            {
                path = PathInfo.Parse(req._pathName);
                instance = path.Domain.Name;

                path.Validate();
            }
            catch (Exception e)
            {
                string msg = String.Format( "EnumeratedReadFile: invalid pathName: " + req._pathName );
                throw new StorageException(XEvent.Id.STORAGE_HACK_7 , msg, e);

                // HandleError(ctx, req, blob, pathName, path, hr, instance); 

            }
        }

        

        private static void BuildResponse(HttpContext ctx, bool sendXRLResponse, RepHdrReadFile replyReadFile, byte[] blob , HResult hr)
        {
                   
            byte[] blobToSend ;
            blobToSend = BuildResponseHeaders(ctx, replyReadFile, hr, blob);

            if (sendXRLResponse )
            {
                BuildXRLResponse(ctx, replyReadFile, blobToSend);
            } else
            {
                BuildBinaryResponse(ctx, replyReadFile, blobToSend);
            }
            

        }


        private static void BuildBinaryResponse(HttpContext ctx, RepHdrReadFile replyReadFile, byte[] blob)
        {

            BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);

            if ( blob != null ) 
            {
                writer.Write(blob);
                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: Returning binary response of size (in bytes) " + blob.Length);

            }

        }

        private static void BuildXRLResponse(HttpContext ctx, RepHdrReadFile replyReadFile, byte[] blob)
        {
            ////XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

            //BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);

            //if ( (replyReadFile != null ) &&  (replyReadFile._blobSize != 0) && (blob != null ) )
            //{
            //    replyReadFile.WriteTo(writer);                        
            //    writer.Write(blob);
            //    Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: Returning XRL response , with blob of size (in bytes) " + blob.Length);

            //}

 	        throw new Exception("The method or operation is not implemented.");
 	        
        }



        private static byte[] BuildResponseHeaders(HttpContext ctx, RepHdrReadFile replyReadFile, HResult hr, byte[] blob)
        {
            byte[] blobToSend = blob ;
                       
            //"max-age=0, must-revalidate"
            string CacheControlResponseValue = Config.GetSetting(Setting.storageFD_httpCacheHeader); 

            //"image"
            string ContentTypeValue = Config.GetSetting(Setting.storageFD_httpContentTypeHeader); 
            ctx.Response.AppendHeader(HTTPHeaders.ContentType, ContentTypeValue);

            //Setting HTTP Response
            if (hr == HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED  )
            {
                ctx.Response.AppendHeader(HTTPHeaders.CacheControl, CacheControlResponseValue);
                ctx.Response.StatusCode = (int) HttpStatusCode.NotModified;
            } 
            else if ( (replyReadFile == null ) || (replyReadFile._blobSize == 0 ) )
            {
 	            ctx.Response.StatusCode = (int) HttpStatusCode.NotFound;
                //blobToSend = StorageConstants.GetDefaultPic();

            }
            else if (HResult.Failed(hr))
            {
                ctx.Response.StatusCode = (int) HttpStatusCode.InternalServerError;
                //blobToSend = StorageConstants.GetDefaultPic();
            }
            else
            {
                ctx.Response.AppendHeader(HTTPHeaders.CacheControl, CacheControlResponseValue);
                ctx.Response.AppendHeader(HTTPHeaders.LastModified, DateTime.FromFileTimeUtc(replyReadFile._modifiedDate).ToString("R"));  
                ctx.Response.StatusCode = (int) HttpStatusCode.OK;

                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: Building HTTP Headers - LastModified timestamp = " + DateTime.FromFileTimeUtc(replyReadFile._creationDate).ToString() );


            }
            
            return blobToSend;
           

        }
              
        
        private static bool SendDefaultPic(HResult hr, HttpContext ctx,RepHdrReadFile replyReadFile)
        {
 	        throw new Exception("The method or operation is not implemented.");
        }

        
        #endregion  -------------------- Request & Response Handling -------------------- 




        #region -------------------- Validations --------------------
                
        private static HResult ValidateRequest(ReqEnumeratedReadFile req, HResult hr)
        {
            // Validate the request and perform consistency checks.
            try
            {
                req.Validate();
            }
            catch (Exception e)
            {
                string msg = "EnumeratedReadFile: Request Validation failed." ;
                throw new StorageException(XEvent.Id.STORAGE_HACK_8 , msg, e);

                // HandleError(ctx, req, blob, pathName, path, hr, instance);                         
            }
            return hr;
        }

        private static HResult CheckProtocolElements(ReqEnumeratedReadFile req, HResult hr)
        {

            // Sanity check some prototol elements
            //if ( req._rangeStart != 0 || req._rangeEnd != 0 )
            //{
            //    string msg = String.Format("EnumeratedReadFile: _rangeStart (={0}) and _rangeEnd (={1}) must currently be 0.", req._rangeStart, req._rangeEnd);
            //    XommTrace(enmrdfTrace, L_ERROR, msg);
            //    throw new StorageException(HResult.XONLINE_E_STORAGE_INVALID_REQUEST, XEvent.Id.STORAGE_HACK_8 , msg, e);

            //     HandleError(ctx, req, blob, pathName, path, hr, instance);                         

            //}

            return hr;
        }

        
        #endregion ------------------ Validations --------------------



                
        #region  -------------------- API Instrumentation -------------------- 
                   

        private static void HandleError(HttpContext ctx, bool sendXRLRequest, ReqEnumeratedReadFile req, HResult hr, Exception e)
        {
            string msg = "ReqEnumeratedReadFile: " + req.ToString();

            XEvent.Id eventId = XEvent.Id.STORAGE_DEFAULT_EVENT;
            if (e is ExceptionWithEventId) eventId = ((ExceptionWithEventId) e).EventId;

            Xom.NtEvent(eventId, e, msg);
            Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_ERROR, msg + e.ToString());

            //Error response
            BuildResponse(ctx, sendXRLRequest, null, null, hr); 
        } 
        
        private static void UpdateResponsePerfCounters(HttpContext ctx, ReqEnumeratedReadFile req, byte[] blob, string pathName, PathInfo path, HResult hr, string instance)
        {          
            //Set XRL Response
            //XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

            int statusCode = ctx.Response.StatusCode;
            
            if ( statusCode == (int) HttpStatusCode.NotModified)   
            {

                //Counters: Update 304
                StorageCounters.Counters.EnumeratedReadFile304PerSecond.Increment();
                StorageCounters.Counters.EnumeratedReadFile304Total.Increment();

                Debug.Assert( instance != null && instance.Length > 0 );
                StorageCounters.Counters[instance].EnumeratedReadFile304PerSecond.Increment();
                StorageCounters.Counters[instance].EnumeratedReadFile304Total.Increment();

                //Trace
                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: returning 304 ");
            }                             
           else if ( (HResult.Failed(hr)) 
                || ( statusCode == (int) HttpStatusCode.NotFound)
               )                                                                                
            {

                //Counters: Update 404
                if ( ( HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND == hr )
                     || ( statusCode == (int) HttpStatusCode.NotFound)
                   )

                {
                    StorageCounters.Counters.EnumeratedReadFile404PerSecond.Increment();
                    StorageCounters.Counters.EnumeratedReadFile404Total.Increment();

                    if ( !String.IsNullOrEmpty(instance) )
                    {
                        Debug.Assert( instance != null && instance.Length > 0 );
                        StorageCounters.Counters[instance].EnumeratedReadFile404PerSecond.Increment();
                        StorageCounters.Counters[instance].EnumeratedReadFile404Total.Increment();
                    }
                }

                //Counters: Update Failed counters
                StorageCounters.Counters.EnumeratedReadFileFailedTotal.Increment();
                StorageCounters.Counters.EnumeratedReadFileFailedPerSecond.Increment();
                if ( !String.IsNullOrEmpty(instance) )
                {
                    StorageCounters.Counters[instance].EnumeratedReadFileFailedTotal.Increment();
                    StorageCounters.Counters[instance].EnumeratedReadFileFailedPerSecond.Increment();
                }

                //Trace
                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: Error!! returning hr = " + hr);
            }                            
            else if ( statusCode == (int) HttpStatusCode.OK)
            {

                //Counters: Update 200
                StorageCounters.Counters.EnumeratedReadFile200PerSecond.Increment();
                StorageCounters.Counters.EnumeratedReadFile200Total.Increment();

                if ( !String.IsNullOrEmpty(instance) )
                {                   
                    StorageCounters.Counters[instance].EnumeratedReadFile200PerSecond.Increment();
                    StorageCounters.Counters[instance].EnumeratedReadFile200Total.Increment();
                }

                //Trace
                Xom.Trace(XomAreaName.enmrdfTrace, LogLevel.L_NORMAL, "EnumeratedReadFile: returning 200 ");
            }

        }

        private static void Log(ReqEnumeratedReadFile req, byte[] blob, string pathName, PathInfo path, HResult hr)
        {
                    string logHeader = "ENMRDF";

                    string logMsg =
                        logHeader                                    + "|" +
                        hr                                           + "|" +
                        req._titleId.ToString("X")                   + "|" +
                        req._titleVersion.ToString("X")              + "|" +
                        ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : "") + "|" +
                        DateTime.FromFileTimeUtc(req._ifModifiedSinceDate).ToString() + "|" +
                        (path != null ? ((int)path.KeyType).ToString() : "") + "|" +
                        (path != null ? path.KeyValue.ToString("X") : "")    + "|" +
                        (blob != null ? blob.Length : 0)             + "|" +
                        pathName;

                    //logging
                    Xom.Log(XomAreaName.log, logMsg);
                    Xom.Log(XomAreaName.Reporting_v2, logMsg);

        }

        private static void UpdatePerfCounters(XomRequestTimeElapsed timeElapsed, byte[] blob, string instance)
        {
                StorageCounters.Counters.EnumeratedReadFileTotal.Increment();
                StorageCounters.Counters.EnumeratedReadFilePerSecond.Increment();
                if (blob != null)
                {
                    StorageCounters.Counters.EnumeratedReadFileTotalBytes.IncrementBy(blob.Length);
                    StorageCounters.Counters.EnumeratedReadFileBytesPerSecond.IncrementBy(blob.Length);
                    StorageCounters.Counters.EnumeratedReadFileAvgBytes.IncrementBy(blob.Length);
                }
                StorageCounters.Counters.EnumeratedReadFileAvgBytesBase.Increment();


                //Instance specific Counters
                Debug.Assert( instance != null && instance.Length > 0 );
                if (!String.IsNullOrEmpty(instance))
                {
                    StorageCounters.Counters[instance].EnumeratedReadFileTotal.Increment();
                    StorageCounters.Counters[instance].EnumeratedReadFilePerSecond.Increment();
                    StorageCounters.Counters[instance].EnumeratedReadFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    StorageCounters.Counters[instance].EnumeratedReadFileAvgTimeBase.Increment();
                    if (blob != null)
                    {
                        StorageCounters.Counters[instance].EnumeratedReadFileTotalBytes.IncrementBy(blob.Length);
                        StorageCounters.Counters[instance].EnumeratedReadFileBytesPerSecond.IncrementBy(blob.Length);
                        StorageCounters.Counters[instance].EnumeratedReadFileAvgBytes.IncrementBy(blob.Length);
                    }
                    StorageCounters.Counters[instance].EnumeratedReadFileAvgBytesBase.Increment();
                }

                //Response Counters

        }


        #endregion  -------------------- API Instrumentation -------------------- 


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\EnumerateFiles.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * EnumerateFile.cs
 *
 * Implementation of EnumerateFile request
 *
 * */

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.enfTrace)]

namespace xonline.server.storage.fd
{

    // This class represents all of the data returned from SQL as part
    // of a EnumFile request and is used to cache
    internal class EnumFileInfo
    {
            public EnumFileInfo ()
            {

            }

            public EnumFileInfo (ArrayList setEnumResults , uint setTotalFiles , long setModifiedDate)
            {
                _enumResults = setEnumResults;
                _totalFiles = setTotalFiles;
                _modifiedDate = setModifiedDate;
            }

            public ArrayList    _enumResults = new ArrayList();
            public uint         _totalFiles = 0;
            public long         _modifiedDate =0;
    }

    public class EnumerateFiles: StfdHandler
    {
        static EnumerateFiles()
        {
        }

        public override uint GetOperation()
        {
            return (uint) Operation.FileEnumerate;
        }

        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.EnumerateFilesCurrent.Increment();
                _ProcessRequest(ctx);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.EnumerateFilesCurrent.Decrement();
                StorageCounters.Counters.EnumerateFilesAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.EnumerateFilesAvgTimeBase.Increment();
            }
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ReqEnumerateFiles req = new ReqEnumerateFiles();
            ArrayList enumResults = new ArrayList();
            uint totalFiles = 0;

            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;
            string instance = null;

            Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: entered.");

            try
            {
                BinaryReader reader  = new BinaryReader(ctx.Request.InputStream);
                BinaryWriter writer  = new BinaryWriter(ctx.Response.OutputStream);

                // Parse request
                try
                {
                    req.ReadFrom(reader);
                    Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: request parsed:" + req.ToString());
                    instance = req._titleId.ToString("X");
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_0, e, 
                        "Invalid EnumerateFiles request"
                    );

                    goto lDone;
                }

                // Parse and validate pathname
                try
                {
                    path = PathInfo.Parse(req._accessToken._pathName);
                    instance = path.Domain.Name;

                    path.Validate(req, false);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_PATH;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_1, e,
                        "ReadFile: invalid pathName: " + req._accessToken._pathName +
                        "\r\nReqReadFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Extract the pathname
                pathName = path.PathName;

                // Validate the request and perform consistency checks.
                try
                {
                    req.Validate();
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_2, e, 
                        "EnumerateFiles: AccessToken.Validate threw exception." +
                        "\r\nReqReadFile: " + req.ToString()
                    );
                    goto lDone;
                }

                try
                {
                    if (req._accessToken._xboxPuid != 0) SGInfo.VerifyMachineId(req._accessToken._xboxPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserId(req._accessToken._userPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserCountryId(req._accessToken._userPuid, req._userCountryId);

                    SGInfo.VerifyTitleIdOrAlternate(req._titleId);
                    SGInfo.VerifyTitleVersion(req._titleVersion);
                }
                catch(Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    }

#if false
                    // Removed Event as being unecessary --- SGInfo is doing its job
                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR, e, "Invalid EnumerateFiles request: " +
                       "\r\nReqEnumerateFiles: " + req.ToString()
                    );
#endif
                    goto lDone;
                }

                // Access Control check
                CheckPermissions(req, path);

                // If the request contains more data than advertised, throw
                // an event and fail with XONLINE_E_STORAGE_INVALID_REQUEST
                // error.
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "HttpRequest.ContentLength: " + ctx.Request.ContentLength);
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, String.Format("Reader consumed bytes " + reader.BaseStream.Position));

                if ( ctx.Request.ContentLength != reader.BaseStream.Position)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_4,
                        "ContentLength indicates more data was sent ({0} bytes) than is expected ({1} bytes). This may be evidence of an attempted buffer overflow attack.\r\nReq: {2}",
                        ctx.Request.ContentLength, reader.BaseStream.Position, req.ToString()
                    );

                    goto lDone;
                }

                //Read Files from Cache / DB
                try
                {
                    //DbEnumerateFiles(path.Domain, path.KeyType, path.KeyValue, path.PathName, path.PartitionInfo, req, enumResults, out totalFiles);
                    hr = Enumerate(ctx, req._titleId.ToString("X"), path, path.PathName, path.PartitionInfo, req, ref enumResults, out totalFiles);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ERROR;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_CODE_0, e,
                        "EnumerateFiles: Failed to Enumerate the files : " +
                        "\r\nReqEnumerateFile: " + req.ToString()
                    );

                    goto lDone;
                }



                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: totalFiles: " + totalFiles + " returned: " + enumResults.Count + " results for path: " + path.PathName);

                //Set reply
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

                // Response header consists of total number of matching files
                // followed by number of files contained in response determined
                // by resultsStart and resultsEnd parameters.
                writer.Write(totalFiles);
                writer.Write((uint)enumResults.Count);

                foreach (RepEnumerateFiles e in enumResults)
                {
                    Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: found file: " + e._pathName);
                    e.WriteTo(writer);
                }

                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: completed successfully.");
                StorageCounters.Counters.EnumerateFilesTotal.Increment();
                StorageCounters.Counters.EnumerateFilesPerSecond.Increment();

                Debug.Assert( instance != null && instance.Length > 0 );
                StorageCounters.Counters[instance].EnumerateFilesTotal.Increment();
                StorageCounters.Counters[instance].EnumerateFilesPerSecond.Increment();
                StorageCounters.Counters[instance].EnumerateFilesAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[instance].EnumerateFilesAvgTimeBase.Increment();

            }
            catch (Exception e)
            {
                if ( e is XRLException )
                {
                    hr = ((XRLException) e).HResult;
                }
                else
                {
                    hr = HResult.XONLINE_E_STORAGE_ERROR;
                }

                Xom.NtEvent(XEvent.Id.STORAGE_CODE_0,
                    "EnumerateFiles failed: " +
                    "\r\nReqReadFile: " + req.ToString()
                );

                goto lDone;
            }
            finally
            {
            }

        lDone:
            string logMsg =
                "ENF"                                        + "|" +
                hr                                           + "|" +
                req._titleId.ToString("X")                   + "|" +
                req._titleVersion.ToString("X")              + "|" +
                (req._accessToken == null ? "0" : req._accessToken._userPuid.ToString("X"))     + "|" +
                req._userCountryId                           + "|" +
                (req._accessToken == null ? "0" : req._accessToken._xboxPuid.ToString("X"))     + "|" +
                (SGInfo.Current != null ? SGInfo.Current.Nonce.ToString("X") : "") + "|" +
                ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : "") + "|" +
                (path != null ? ((int)path.KeyType).ToString() : "") + "|" +
                (path != null ? path.KeyValue.ToString("X") : "")    + "|" +
                pathName + "|" +
                enumResults.Count.ToString("X");

            Xom.Log(XomAreaName.log, logMsg);

            // Send reply
            Xom.Trace(XomAreaName.enfTrace, LogLevel.L_NORMAL, "EnumerateFiles: returning hr = " + hr);

            if (HResult.Failed(hr))
            {
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);
                StorageCounters.Counters.EnumerateFilesFailedTotal.Increment();
                StorageCounters.Counters.EnumerateFilesFailedPerSecond.Increment();
            }

            return;
        }

        private EnumFileInfo DbEnumerateFiles(StorageDomain domain, IdType keyType, ulong ulKey, string pathName, string partitionPart, ReqEnumerateFiles req)
        {

            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            // initialize out parameter to 0
            EnumFileInfo efi = new EnumFileInfo();

            uint dbTotalFiles = 0;

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();
                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: opened connection to: " + domain._webstoreApp);

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_enumerate";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) domain.Id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) ulKey;

                //TODO: we should probably not allow multiple wildcards
                string dbPath = pathName.Replace("*", "%");
#if false
                // replace * with % but only allow one * character
                if ( pathName.IndexOf("*") != -1 )
                {
                    dbPath = pathName.Substring(0, pathName.IndexOf("*")+1);
                    dbPath = dbPath.Replace("*", "%");
                }
#endif
                cmd.Parameters.Add("@vc_path", SqlDbType.NVarChar, 256).Value   = dbPath;
                cmd.Parameters.Add("@vc_partition_part", SqlDbType.NVarChar, 256).Value = partitionPart;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value          = (int) req._titleId;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value     = (int) req._titleVersion;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value     = (long) req._accessToken._userPuid;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value     = (long) req._accessToken._xboxPuid;

                if ( 0 == req._ifModifiedSinceDate )
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DateTime.FromFileTime(req._ifModifiedSinceDate).ToUniversalTime();
                }

                // Execute stored procedure
                dataset = cmd.ExecuteReader();

                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: executed stored procedure p_file_enumerate for path: " + pathName);

                // the first result set consists of the total number of files
                // matching the path criteria
                dataset.Read();
                dbTotalFiles = (uint) dataset.GetInt32(0);
                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: p_file_enumerate: dbTotalFiles: " + dbTotalFiles );

                // the second result set consists of the files themselves
                dataset.NextResult();
                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: p_file_enumerate: advancing to second resultset." );

                // if _resultsStart and _resultsEnd are both 0, return all files
                bool returnAllFiles = (req._resultsStart == 0 && req._resultsEnd == 0);
                Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: returnAllFiles = " + returnAllFiles );

                int fileNumber = 0;

                while (dataset.Read())
                {
                    RepEnumerateFiles f = new RepEnumerateFiles();
                    f._titleId = (uint) dataset.GetInt32(0);
                    f._titleVersion = (uint) dataset.GetInt32(1);
                    f._userPuid = (ulong) dataset.GetInt64(2);
                    f._userCountryId = dataset.GetByte(3);
                    f._xboxPuid = (ulong) dataset.GetInt64(4);
                    f._contentType = (uint) dataset.GetInt32(5);
                    f._blobSize = (uint) dataset.GetInt32(6);
                    f._blobSizeUncompressed = (uint) dataset.GetInt32(7);
                    f._creationDate = dataset.GetDateTime(8).ToLocalTime().ToFileTime();
                    f._modifiedDate = dataset.GetDateTime(9).ToLocalTime().ToFileTime();
                    efi._modifiedDate = f._modifiedDate ;
                    f._attributesSize = (ushort) dataset.GetInt32(10);
                    if ( f._attributesSize > 0 && !dataset.IsDBNull(11) )
                    {
                        f._attributes = new byte[f._attributesSize];
                        ReadDbBlob(dataset, 11, f._attributes, f._attributes.Length);
                    }
                    f._pathName = dataset.GetString(12);

                    byte[] encName = Encoding.UTF8.GetBytes(f._pathName);
                    f._pathNameSize = (ushort) encName.Length;
                    encName = null;

                    if ( returnAllFiles || ( fileNumber >= req._resultsStart && fileNumber <= req._resultsEnd ) )
                    {
                        efi._enumResults.Add(f);
                        Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: returning file: " + f._pathName);
                    }
                    else
                    {
                        Xom.Trace(XomAreaName.enfTrace, LogLevel.L_LOW, "DbEnumerateFiles: skipping file: " + f._pathName);
                    }
                    f = null;

                    fileNumber++;
                }

                dataset.Close();
                dataset = null;

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ((int)ret.Value);
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_6, "EnumerateFiles: stored procedure p_file_enumerate failed with hr = " + hr);
                }

                // return data
                efi._totalFiles = dbTotalFiles;

            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}' after {1} milliseconds",
                        cmd.Database.Server, timeElapsed.MillisecondsElapsed), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }

                StorageCounters.Counters.EnumerateFilesAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.EnumerateFilesAvgSQLTimeBase.Increment();
                Debug.Assert( domain.Name != null && domain.Name.Length > 0 );
                StorageCounters.Counters[domain.Name].EnumerateFilesAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[domain.Name].EnumerateFilesAvgSQLTimeBase.Increment();

            }

                return efi;

        }

        private HResult Enumerate( HttpContext ctx
                                        , string titleId
                                        , PathInfo path
                                        , string pathName
                                        , string partitionPart
                                        , ReqEnumerateFiles req
                                        , ref ArrayList enumResults
                                        , out uint totalFiles)
        {
            //Object to be Read
            EnumFileInfo efi = null;
            string domainName = path.Domain.Name;

            // initialize out parameter to 0
            //ArrayList outEnumResults = new ArrayList();
            //uint outTotalFiles = 0;

            // Cache only for certain types of files
            if ( NeedsCaching(titleId, path, req._ifModifiedSinceDate ) )
            {

                // Check the cache before hitting the database
                if ( path.Domain.Policy.CacheEnumFiles )
                {
                    efi = (EnumFileInfo) CacheGet(ctx, GenerateCacheKey(path.UnparsedPathName, GetOperation().ToString()));
                }

                // If cache missed, read from SQL and add to the cache
                if ( efi == null )
                {
                    //Read From DB & Update cache
                    efi = UpdateCache(ctx, path, pathName, req, domainName);

                    StorageCounters.Counters.EnumerateFilesCacheMisses.Increment();
                    StorageCounters.Counters[domainName].EnumerateFilesCacheMisses.Increment();

                }
                else
                {
                    Debug.Assert( path.Domain.Policy.CacheEnumFiles );

                    //If the data in cache was modified earlier than req._ifModifiedSinceDate, reload the cache, since the file might have changed meanwhile
                    if (   (req._ifModifiedSinceDate != 0)
                        && (efi._modifiedDate <= req._ifModifiedSinceDate)
                        )
                    {
                        //Read from DB & Update Cache
                        efi = UpdateCache(ctx, path, pathName, req, domainName);

                        StorageCounters.Counters.EnumerateFilesCacheMisses.Increment();
                        StorageCounters.Counters[domainName].EnumerateFilesCacheMisses.Increment();

                    } else {

                        StorageCounters.Counters.EnumerateFilesCacheHits.Increment();
                        StorageCounters.Counters[domainName].EnumerateFilesCacheHits.Increment();

                    }
                }
            }
            else
            {
                    efi = DbEnumerate(path, pathName, req);
            }


            //Set Output
            enumResults = efi._enumResults;
            totalFiles = efi._totalFiles;

            return HResult.S_OK;
        }


        private EnumFileInfo DbEnumerate(PathInfo path, string pathName, ReqEnumerateFiles req)
        {
            return DbEnumerateFiles(path.Domain, path.KeyType, path.KeyValue, pathName, path.PartitionInfo, req);
        }


        /// <summary>
        /// Reads from Database & Updates Cache
        /// </summary>
        private EnumFileInfo UpdateCache(HttpContext ctx, PathInfo path, string pathName, ReqEnumerateFiles req, string domainName)
        {
                EnumFileInfo efi = null;

                efi = DbEnumerate(path, pathName, req);

                // add the entry to the cache
                if ( path.Domain.Policy.CacheEnumFiles )
                {
                    CacheAdd(ctx, GenerateCacheKey(path.UnparsedPathName, GetOperation().ToString()), efi, path.Domain.Policy.EnumFileCacheTimeSeconds);
                }

            return efi;
        }

        private bool NeedsCaching(string titleId, PathInfo path, long ifModifiedSinceDate )
        {


            //To prevent cache explosion, we dont allow
                // Timebased querying
                // and WildCards in PathName
            if (
                ( path.PathName.Contains("*") )
                && ( ifModifiedSinceDate !=0 )
                )
                {
                    return false;
                }
            else
                {
                    return true;
                }

        }

        private bool IsRootPath(string path)
        {
            char[] seperator = new char[]{'/'};
            String[] subStrings = path.Split(seperator, StringSplitOptions.RemoveEmptyEntries);

            //To check if the file is in the ROOT folder path or not . pathname includes leading /
            if (subStrings.Length > 1 )
                return false;
            else
                return true;

            //ToDO: Account for WildCards in path
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\perfctrs.cs ===
using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;
    
namespace xonline.server.storage.fd 
{
    [XomPerformanceCounterCategoryAttr( "Storage FD", "Xbox Live Storage Service" )]
    public class StorageCounters : XomPerformanceCounterCategory
    {
        // WriteFile request counters

        [XomPerformanceCounterAttr(
            "WriteFile Current Requests", 
            "WriteFile Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter WriteFileCurrent;

        [XomPerformanceCounterAttr(
            "WriteFile Requests Per Second", 
            "Writefile Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter WriteFilePerSecond;

        [XomPerformanceCounterAttr(
            "WriteFile Total Requests", 
            "WriteFile Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter WriteFileTotal;

        [XomPerformanceCounterAttr(
            "WriteFile Total Bytes", 
            "WriteFile Total Bytes received", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter WriteFileTotalBytes;

        [XomPerformanceCounterAttr(
            "WriteFile Average Bytes Per Request", 
            "WriteFile Average Bytes Per Request",
             PerformanceCounterType.AverageCount64)]
        public PerformanceCounter WriteFileAvgBytes;

        [XomPerformanceCounterAttr(
            "WriteFile Average Bytes Per Request Base", 
            "WriteFile Average Bytes Per Request Base",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter WriteFileAvgBytesBase;

        [XomPerformanceCounterAttr(
            "WriteFile Bytes Per Second", 
            "WriteFile Bytes Per Second Received", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter WriteFileBytesPerSecond;
        
        [XomPerformanceCounterAttr(
            "WriteFile Permission Denied Errors Per Second", 
            "WriteFile Permission Denied Errors Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter WriteFilePermissionDeniedPerSecond;

        [XomPerformanceCounterAttr(
            "WriteFile Total Permission Denied Errors", 
            "WriteFile Total Permission Denied Errors", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter WriteFilePermissionDeniedTotal;
        
        [XomPerformanceCounterAttr(
            "WriteFile Failed Requests Per Second", 
            "WriteFile Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter WriteFileFailedPerSecond;

        [XomPerformanceCounterAttr(
            "WriteFile Total Failed Requests", 
            "WriteFile Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter WriteFileFailedTotal;

        [XomPerformanceCounterAttr(
            "WriteFile Average Request Time", 
            "WriteFile Average Request Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter WriteFileAvgTime; 
        
        [XomPerformanceCounterAttr(
            "WriteFile Average Request Time Base", 
            "WriteFile Average Request Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter WriteFileAvgTimeBase; 
        
        [XomPerformanceCounterAttr(
            "WriteFile Average SQL Time", 
            "WriteFile Average SQL Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter WriteFileAvgSQLTime; 
        
        [XomPerformanceCounterAttr(
            "WriteFile Average SQL Time Base", 
            "WriteFile Average SQL Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter WriteFileAvgSQLTimeBase; 
        
        [XomPerformanceCounterAttr(
            "QuotaCheck Average SQL Time", 
            "QuotaCheck Average SQL Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter QuotaCheckAvgSQLTime; 
        
        [XomPerformanceCounterAttr(
            "QuotaCheck Average SQL Time Base", 
            "QuotaCheck Average SQL Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter QuotaCheckAvgSQLTimeBase; 
        
        // ReadFile request counters

        [XomPerformanceCounterAttr(
            "ReadFile Current Requests",
            "ReadFile Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter ReadFileCurrent;
        
        [XomPerformanceCounterAttr(
            "ReadFile Requests Per Second", 
            "ReadFile Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadFilePerSecond;
        
        [XomPerformanceCounterAttr(
            "ReadFile Total Requests", 
            "ReadFile Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFileTotal;

        [XomPerformanceCounterAttr(
            "ReadFile Total Bytes", 
            "ReadFile Total Bytes sent",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFileTotalBytes;     

        [XomPerformanceCounterAttr(
            "ReadFile Average Bytes Per Request", 
            "ReadFile Average Bytes Per Request",
             PerformanceCounterType.AverageCount64)]
        public PerformanceCounter ReadFileAvgBytes;
    
        [XomPerformanceCounterAttr(
            "ReadFile Average Bytes Per Request Base", 
            "ReadFile Average Bytes Per Request Base",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadFileAvgBytesBase;    
        
        [XomPerformanceCounterAttr(
            "ReadFile Bytes Per Second", 
            "ReadFile Bytes Per Second Sent", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadFileBytesPerSecond;

        [XomPerformanceCounterAttr(
            "ReadFile 404 Errors Per Second", 
            "ReadFile 404 Errors Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadFile404PerSecond;

        [XomPerformanceCounterAttr(
            "ReadFile Total 404 Errors", 
            "ReadFile Total 404 Errors", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFile404Total;
        
        [XomPerformanceCounterAttr(
            "ReadFile Permission Denied Errors Per Second", 
            "ReadFile Permission Denied Errors Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadFilePermissionDeniedPerSecond;

        [XomPerformanceCounterAttr(
            "ReadFile Total Permission Denied Errors", 
            "ReadFile Total Permission Denied Errors", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFilePermissionDeniedTotal;
        
        [XomPerformanceCounterAttr(
            "ReadFile Failed Requests Per Second", 
            "ReadFile Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadFileFailedPerSecond;      

        [XomPerformanceCounterAttr(
            "ReadFile Total Failed Requests", 
            "ReadFile Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFileFailedTotal;
     
        [XomPerformanceCounterAttr(
            "ReadFile Average Request Time", 
            "ReadFile Average Request Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ReadFileAvgTime;        

        [XomPerformanceCounterAttr(
            "ReadFile Average Request Time Base", 
            "ReadFile Average Request Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadFileAvgTimeBase;       
        
        [XomPerformanceCounterAttr(
            "ReadFile Average SQL Time", 
            "ReadFile Average SQL Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ReadFileAvgSQLTime;      

        [XomPerformanceCounterAttr(
            "ReadFile Average SQL Time Base", 
            "ReadFile Average SQL Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadFileAvgSQLTimeBase;
 
        
        [XomPerformanceCounterAttr(
            "ReadFile Cache Hits", 
            "ReadFile Cache Hits", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFileCacheHits;

        [XomPerformanceCounterAttr(
            "ReadFile Cache Misses", 
            "ReadFile Cache Misses", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadFileCacheMisses;        

        // ReadTitleFiles request counters

        [XomPerformanceCounterAttr(
           "ReadTitleFiles Current Requests",
           "ReadTitleFiles Current Requests in progress",
           PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter ReadTitleFilesCurrent;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Requests Per Second",
            "ReadTitleFiles Requests Per Second Successfully Processed",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadTitleFilesPerSecond;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Total Requests",
            "ReadTitleFiles Total Requests Successfully Processed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesTotal;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Total Bytes",
            "ReadTitleFiles Total Bytes sent",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesTotalBytes;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average Bytes Per Request",
            "ReadTitleFiles Average Bytes Per Request",
             PerformanceCounterType.AverageCount64)]
        public PerformanceCounter ReadTitleFilesAvgBytes;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average Bytes Per Request Base",
            "ReadTitleFiles Average Bytes Per Request Base",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadTitleFilesAvgBytesBase;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Failed Requests Per Second",
            "ReadTitleFiles Failed Requests Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReadTitleFilesFailedPerSecond;
        [XomPerformanceCounterAttr(
            "ReadTitleFiles Total Failed Requests",
            "ReadTitleFiles Total Failed Requests",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesFailedTotal;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average Request Time",
            "ReadTitleFiles Average Request Time",
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ReadTitleFilesAvgTime;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average Request Time Base",
            "ReadTitleFiles Average Request Time Base",
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadTitleFilesAvgTimeBase;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average SQL Time",
            "ReadTitleFiles Average SQL Time",
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ReadTitleFilesAvgSQLTime;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Average SQL Time Base",
            "ReadTitleFiles Average SQL Time Base",
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter ReadTitleFilesAvgSQLTimeBase;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Cache Hits",
            "ReadTitleFiles Cache Hits",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesCacheHits;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles Cache Misses",
            "ReadTitleFiles Cache Misses",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesCacheMisses;

        [XomPerformanceCounterAttr(
            "ReadTitleFiles File Search Misses",
            "ReadTitleFiles File Search Did Not Find Every File ID Expected",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReadTitleFilesSearchMisses;

        // EnumeratedReadFile request counters

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Requests: Current Requests",
            "EnumeratedReadFile Current Requests in progress",
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter EnumeratedReadFileCurrent;
        
        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Requests: Requests Per Second",
            "EnumeratedReadFile Requests Per Second Successfully Processed",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFilePerSecond;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Requests: Total Requests",
            "EnumeratedReadFile Total Requests Successfully Processed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFileTotal;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Requests: Failed Requests Per Second",
            "EnumeratedReadFile Requests: Failed Requests Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFileFailedPerSecond;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Requests: Total Failed Requests",
            "EnumeratedReadFile Total Failed Requests",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFileFailedTotal;


        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Bytes: Total Bytes",
            "EnumeratedReadFile Total Bytes sent",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFileTotalBytes;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Bytes: Average Bytes Per Request",
            "EnumeratedReadFile Bytes: Average Bytes Per Request",
             PerformanceCounterType.AverageCount64)]
        public PerformanceCounter EnumeratedReadFileAvgBytes;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Bytes: Average Bytes Per Request Base",
            "EnumeratedReadFile Bytes: Average Bytes Per Request Base",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter EnumeratedReadFileAvgBytesBase;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Bytes: Bytes Per Second",
            "EnumeratedReadFile Bytes: Bytes Per Second Sent",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFileBytesPerSecond;


        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Time: Average Request Time",
            "EnumeratedReadFile Average Request Time",
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter EnumeratedReadFileAvgTime;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Time: Average Request Time Base",
            "EnumeratedReadFile Average Request Time Base",
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter EnumeratedReadFileAvgTimeBase;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Time: Average SQL Time",
            "EnumeratedReadFile Average SQL Time",
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter EnumeratedReadFileAvgSQLTime;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Time: Average SQL Time Base",
            "EnumeratedReadFile Average SQL Time Base",
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter EnumeratedReadFileAvgSQLTimeBase;


        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Cache: Hits",
            "EnumeratedReadFile Cache Hits",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFileCacheHits;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Cache: Misses",
            "EnumeratedReadFile Cache Misses",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFileCacheMisses;
        
        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: 304 NotModified responses Per Second",
           "EnumeratedReadFile  304 NotModified responses Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFile304PerSecond;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: Total 304 NotModified responses",
            "EnumeratedReadFile Total 304 NotModified responses",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFile304Total;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: 404 Errors Per Second",
            "EnumeratedReadFile 404 Errors Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFile404PerSecond;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: Total 404 Errors",
            "EnumeratedReadFile Total 404 Errors",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFile404Total;


        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: 200 OKs Per Second",
            "EnumeratedReadFile 200 OKs Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumeratedReadFile200PerSecond;

        [XomPerformanceCounterAttr(
            "EnumeratedReadFile Response: Total 200 OKs",
            "EnumeratedReadFile Total 200 OKs",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumeratedReadFile200Total;

        //[XomPerformanceCounterAttr(
        //    "EnumeratedReadFile Permission Denied Errors Per Second",
        //    "EnumeratedReadFile Permission Denied Errors Per Second",
        //     PerformanceCounterType.RateOfCountsPerSecond32)]
        //public PerformanceCounter EnumeratedReadFilePermissionDeniedPerSecond;

        //[XomPerformanceCounterAttr(
        //    "EnumeratedReadFile Total Permission Denied Errors",
        //    "EnumeratedReadFile Total Permission Denied Errors",
        //     PerformanceCounterType.NumberOfItems64)]
        //public PerformanceCounter EnumeratedReadFilePermissionDeniedTotal;



        // RemoveFile request counters

        [XomPerformanceCounterAttr(
            "RemoveFile Current Requests",
            "RemoveFile Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter RemoveFileCurrent;
        
        [XomPerformanceCounterAttr(
            "RemoveFile Average Request Time", 
            "RemoveFile Average Request Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter RemoveFileAvgTime; 
        
        [XomPerformanceCounterAttr(
            "RemoveFile Average Request Time Base", 
            "RemoveFile Average Request Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter RemoveFileAvgTimeBase; 
        
        [XomPerformanceCounterAttr(
            "RemoveFile Total Requests", 
            "RemoveFile Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RemoveFileTotal;

        [XomPerformanceCounterAttr(
            "RemoveFile Requests Per Second", 
            "RemoveFile Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RemoveFilePerSecond;

        [XomPerformanceCounterAttr(
            "RemoveFile Failed Requests Per Second", 
            "RemoveFile Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RemoveFileFailedPerSecond;

        [XomPerformanceCounterAttr(
            "RemoveFile Total Failed Requests", 
            "RemoveFile Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RemoveFileFailedTotal;

        [XomPerformanceCounterAttr(
            "RemoveFile Average SQL Time", 
            "RemoveFile Average SQL Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter RemoveFileAvgSQLTime; 
        
        [XomPerformanceCounterAttr(
            "RemoveFile Average SQL Time Base", 
            "RemoveFile Average SQL Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter RemoveFileAvgSQLTimeBase; 
        
        // EnumerateFiles request counters
        [XomPerformanceCounterAttr(
            "EnumerateFiles Current Requests",
            "EnumerateFiles Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter EnumerateFilesCurrent;

        [XomPerformanceCounterAttr(
            "EnumerateFiles Requests Per Second", 
            "EnumerateFiles Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumerateFilesPerSecond;

        [XomPerformanceCounterAttr(
            "EnumerateFiles Total Requests", 
            "EnumerateFiles Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumerateFilesTotal;

        [XomPerformanceCounterAttr(
            "EnumerateFiles Average Request Time", 
            "EnumerateFiles Average Request Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter EnumerateFilesAvgTime; 
        
        [XomPerformanceCounterAttr(
            "EnumerateFiles Average Request Time Base", 
            "EnumerateFiles Average Request Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter EnumerateFilesAvgTimeBase; 

        [XomPerformanceCounterAttr(
            "EnumerateFiles Failed Requests Per Second", 
            "EnumerateFiles Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter EnumerateFilesFailedPerSecond;

        [XomPerformanceCounterAttr(
            "EnumerateFiles Total Failed Requests", 
            "EnumerateFiles Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumerateFilesFailedTotal;

        [XomPerformanceCounterAttr(
            "EnumerateFiles Average SQL Time", 
            "EnumerateFiles Average SQL Time", 
            PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter EnumerateFilesAvgSQLTime; 
        
        [XomPerformanceCounterAttr(
            "EnumerateFiles Average SQL Time Base", 
            "EnumerateFiles Average SQL Time Base", 
            PerformanceCounterType.AverageBase)]
        public PerformanceCounter EnumerateFilesAvgSQLTimeBase;


        [XomPerformanceCounterAttr(
           "EnumerateFiles Cache Hits",
           "EnumerateFiles Cache Hits",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumerateFilesCacheHits;

        [XomPerformanceCounterAttr(
           "EnumerateFiles Cache Misses",
            "EnumerateFiles Cache Misses",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter EnumerateFilesCacheMisses;

    
        public virtual StorageCounters this[string instanceName]
        {
            get
            {
                return (StorageCounters) GetInstance(instanceName);
            }
        }
        
        static public StorageCounters Counters = new StorageCounters();
    }

}

namespace xonline.server.storage.fd 
{
    
    [XomPerformanceCounterCategoryAttr( "Name Resolution FD", "Xbox Live Name Resolution Service" )]
    public class NameResolverCounters : XomPerformanceCounterCategory
    {
        // ResolveName request counters

        [XomPerformanceCounterAttr(
            "ResolveName Current Requests", 
            "ResolveName Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter ResolveNameCurrent;

        [XomPerformanceCounterAttr(
            "ResolveName Requests Per Second", 
            "ResolveName Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ResolveNamePerSecond;

        [XomPerformanceCounterAttr(
            "ResolveName Total Requests", 
            "ResolveName Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ResolveNameTotal;
        
        [XomPerformanceCounterAttr(
            "ResolveName Failed Requests Per Second", 
            "ResolveName Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ResolveNameFailedPerSecond;

        [XomPerformanceCounterAttr(
            "ResolveName Total Failed Requests", 
            "ResolveName Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ResolveNameFailedTotal;

        
        // ReportBrokenLink request counters

        [XomPerformanceCounterAttr(
            "ReportBrokenLink Current Requests",
            "ReportBrokenLink Current Requests in progress", 
             PerformanceCounterType.NumberOfItems32)]
        public PerformanceCounter ReportBrokenLinkCurrent;


        [XomPerformanceCounterAttr(
            "ReportBrokenLink Requests Per Second", 
            "ReportBrokenLink Requests Per Second Successfully Processed", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReportBrokenLinkPerSecond;

        [XomPerformanceCounterAttr(
            "ReportBrokenLink Total Requests", 
            "ReportBrokenLink Total Requests Successfully Processed", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReportBrokenLinkTotal;
        
        [XomPerformanceCounterAttr(
            "ReportBrokenLink Failed Requests Per Second", 
            "ReportBrokenLink Failed Requests Per Second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ReportBrokenLinkFailedPerSecond;

        [XomPerformanceCounterAttr(
            "ReportBrokenLink Total Failed Requests", 
            "ReportBrokenLink Total Failed Requests", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ReportBrokenLinkFailedTotal;

        
        public virtual NameResolverCounters this[string instanceName]
        {
            get
            {
                return (NameResolverCounters) GetInstance(instanceName);
            }
        }
        
        static public NameResolverCounters Counters = new NameResolverCounters();
    }
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\ReadFile.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * ReadFile.cs
 *
 * Implementation of ReadFile request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

using xonline.server.storage.common;

[assembly: XomAreaDefinition(XomAreaName.Reporting_v2)]
[assembly: XomAreaDefinition(XomAreaName.rdfTrace)]

namespace xonline.server.storage.fd
{
    // This class represents all of the data returned from SQL as part
    // of a ReadFile request and is used to cache common file requests
    internal class ReadFileInfo
    {
        public uint     _titleId;
        public uint     _titleVersion;
        public ulong    _userPuid;
        public byte     _userCountryId;
        public ulong    _xboxPuid;
        public byte[]   _blobSignature;
        public uint     _contentType;
        public byte     _compressionType;
        public uint     _blobSize;
        public long     _creationDate = 0;
        public long     _modifiedDate;
        public uint     _blobSizeUncompressed;
        public ushort   _attributesSize;
        public byte[]   _attributes;
        public byte[]   _blob;
    }

    // ReadFile
    // HTTP handler for ReadFile request
    public class ReadFile : StfdHandler
    {
        static ReadFile()
        {
        }

        // Operation
        public override uint GetOperation()
        {
            return (uint) Operation.FileRead;
        }

        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.ReadFileCurrent.Increment();
                _ProcessRequest(ctx);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.ReadFileCurrent.Decrement();
                StorageCounters.Counters.ReadFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.ReadFileAvgTimeBase.Increment();
            }
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ReqReadFile req = new ReqReadFile();
            RepHdrReadFile rep = new RepHdrReadFile();
            byte[] blob = null;

            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;
            string instance = null;

            Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "ReadFile: entered.");

            try
            {
                BinaryReader    reader  = new BinaryReader(ctx.Request.InputStream);
                BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);
                // This should be configurable per storage domain and
                // determines if the stored procedure increments the read
                // count column as part of a read operation.
                bool            updateReadCount = false;

                // Parse request
                try
                {
                    req.ReadFrom(reader);
                    Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "ReadFile: request parsed:" + req.ToString());
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_6, e,
                        "Invalid ReadFile request"
                    );

                    goto lDone;
                }

                // Sanity check some prototol elements
                if ( req._rangeStart != 0 || req._rangeEnd != 0 )
                {
                    Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_ERROR, String.Format("ReadFile: _rangeStart (={0}) and _rangeEnd (={1}) must currently be 0.", req._rangeStart, req._rangeEnd));
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    goto lDone;
                }

                // Parse and validate pathname
                try
                {
                    path = PathInfo.Parse(req._accessToken._pathName);
                    instance = path.Domain.Name;

                    path.Validate(req);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_PATH;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_7, e,
                        "ReadFile: invalid pathName: " + req._accessToken._pathName +
                        "\r\nReqReadFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // Extract the pathname
                pathName = path.PathName;

                // Validate the request and perform consistency checks.
                try
                {
                    req.Validate();
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_8, e,
                        "ReadFile: AccessToken.Validate threw exception." +
                        "\r\nReqReadFile: " + req.ToString()
                    );

                    goto lDone;
                }

                try
                {
                    if (req._accessToken._xboxPuid != 0) SGInfo.VerifyMachineId(req._accessToken._xboxPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserId(req._accessToken._userPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserCountryId(req._accessToken._userPuid, req._userCountryId);

                    SGInfo.VerifyTitleIdOrAlternate(req._titleId);
                    SGInfo.VerifyTitleVersion(req._titleVersion);
                }
                catch(Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    }

#if false
                    // Removed Event as being unecessary --- SGInfo is doing its job
                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_1, "Invalid ReadFile request: " +
                        "\r\nReqReadFile: " + req.ToString()
                    );
#endif
                    goto lDone;
                }

                // Make sure token grants FileRead permission
                if ( (ushort) Operation.FileRead != req._accessToken._operation )
                {
                    hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_2, "ReadFile reqested; Access Token allows: " + ((Operation) req._accessToken._operation));
                    goto lDone;
                }

                // Access Control check
                CheckPermissions(req, path);

                // If the request contains more data than advertised, throw
                // an event and fail with XONLINE_E_STORAGE_INVALID_REQUEST
                // error.
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "HttpRequest.ContentLength: " + ctx.Request.ContentLength);
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, String.Format("Reader consumed bytes" + reader.BaseStream.Position));

                if ( ctx.Request.ContentLength != reader.BaseStream.Position)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_11,
                        "ContentLength indicates more data was sent ({0} bytes) than is expected ({1} bytes). This may be evidence of an attempted buffer overflow attack.\r\nReq: {2}",
                        ctx.Request.ContentLength, reader.BaseStream.Position, req.ToString()
                    );
                    goto lDone;
                }

                // Read file from the database
                try
                {
                    FileRead(ctx, req, rep, ref blob, pathName, path, ref hr, instance, updateReadCount, GetOperation(), req._accessToken._xboxPuid, req._accessToken._userPuid );
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ERROR;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_CODE_2, e,
                        "ReadFile failed: " +
                        "\r\nReqReadFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Send reply
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);
                rep.WriteTo(writer);
                if (rep._blobSize != 0)
                writer.Write(blob);

                Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "ReadFile: completed successfully.");
                StorageCounters.Counters.ReadFileTotal.Increment();
                StorageCounters.Counters.ReadFilePerSecond.Increment();
                if (blob != null)
                {
                StorageCounters.Counters.ReadFileTotalBytes.IncrementBy(blob.Length);
                StorageCounters.Counters.ReadFileBytesPerSecond.IncrementBy(blob.Length);
                StorageCounters.Counters.ReadFileAvgBytes.IncrementBy(blob.Length);
                }
                StorageCounters.Counters.ReadFileAvgBytesBase.Increment();

                Debug.Assert( instance != null && instance.Length > 0 );
                StorageCounters.Counters[instance].ReadFileTotal.Increment();
                StorageCounters.Counters[instance].ReadFilePerSecond.Increment();
                StorageCounters.Counters[instance].ReadFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[instance].ReadFileAvgTimeBase.Increment();
                if (blob != null)
                {
                    StorageCounters.Counters[instance].ReadFileTotalBytes.IncrementBy(blob.Length);
                    StorageCounters.Counters[instance].ReadFileBytesPerSecond.IncrementBy(blob.Length);
                    StorageCounters.Counters[instance].ReadFileAvgBytes.IncrementBy(blob.Length);
                }
                StorageCounters.Counters[instance].ReadFileAvgBytesBase.Increment();

            }
            finally
            {
            }

        lDone:

            string logMsg =
                "RDF"                                        + "|" +
                hr                                           + "|" +
                req._titleId.ToString("X")                   + "|" +
                req._titleVersion.ToString("X")              + "|" +
                (req._accessToken == null ? "0" : req._accessToken._userPuid.ToString("X"))    + "|" +
                req._userCountryId                           + "|" +
                (req._accessToken == null ? "0" : req._accessToken._xboxPuid.ToString("X"))    + "|" +
                (SGInfo.Current != null ? SGInfo.Current.Nonce.ToString("X") : "") + "|" +
                ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : "") + "|" +
                (path != null ? ((int)path.KeyType).ToString() : "") + "|" +
                (path != null ? path.KeyValue.ToString("X") : "")    + "|" +
                (blob != null ? blob.Length : 0)             + "|" +
                pathName;

            Xom.Log(XomAreaName.log, logMsg);
            Xom.Log(XomAreaName.Reporting_v2, logMsg);

            if (HResult.Failed(hr))
            {
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

                if ( HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND == hr )
                {
                    StorageCounters.Counters.ReadFile404PerSecond.Increment();
                    StorageCounters.Counters.ReadFile404Total.Increment();

                    Debug.Assert( instance != null && instance.Length > 0 );
                    StorageCounters.Counters[instance].ReadFile404PerSecond.Increment();
                    StorageCounters.Counters[instance].ReadFile404Total.Increment();
                }

                StorageCounters.Counters.ReadFileFailedTotal.Increment();
                StorageCounters.Counters.ReadFileFailedPerSecond.Increment();
                if ( instance != null )
                {
                    StorageCounters.Counters[instance].ReadFileFailedTotal.Increment();
                    StorageCounters.Counters[instance].ReadFileFailedPerSecond.Increment();
                }

                Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "ReadFile: returning hr = " + hr);
            }

            return;
        }

        internal static void FileRead(HttpContext ctx, ReqReadFile req, RepHdrReadFile rep, ref byte[] blob, string pathName, PathInfo path, ref HResult hr, string instance, bool updateReadCount, uint operation , ulong xboxPuid , ulong userPuid)
        {
                ReadFileInfo rfi = null;

                try
                {

                    // Check the cache before hitting the database
                    if ( path.Domain.Policy.CacheReadFiles )
                    {
                         rfi = (ReadFileInfo) CacheGet(ctx, GenerateCacheKey(path.UnparsedPathName, operation.ToString()) );
                    }

                    // If cache missed, read from SQL and add to the cache
                    if ( rfi == null )
                    {
                        rfi = new ReadFileInfo();

                        hr = DbReadFile(path.Domain, path.KeyType, path.KeyValue, pathName, updateReadCount, req, rfi, xboxPuid, userPuid, operation) ;

                        if ( path.Domain.Policy.CacheReadFiles )
                        {
                            // add the entry to the cache
                            if (HResult.Succeeded(hr))
                                CacheAdd(ctx, GenerateCacheKey(path.UnparsedPathName, operation.ToString()), rfi, path.Domain.Policy.ReadFileCacheTimeSeconds);

                            //Update PerfCounters
                            if ( operation == (uint) Operation.FileEnumeratedRead )
                            {
                                StorageCounters.Counters.EnumeratedReadFileCacheMisses.Increment();
                                StorageCounters.Counters[instance].EnumeratedReadFileCacheMisses.Increment();

                            } else
                                //if ( operation == (uint) Operation.FileRead)
                            {
                                StorageCounters.Counters.ReadFileCacheMisses.Increment();
                                StorageCounters.Counters[instance].ReadFileCacheMisses.Increment();
                            }
                        }

                    }
                    else
                    {
                        Debug.Assert( path.Domain.Policy.CacheReadFiles );

                        if (rfi._modifiedDate <= req._ifModifiedSinceDate)
                            hr = HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED;

                        if ( operation == (uint) Operation.FileEnumeratedRead )
                        {
                            StorageCounters.Counters.EnumeratedReadFileCacheHits.Increment();
                            StorageCounters.Counters[instance].EnumeratedReadFileCacheHits.Increment();

                        } else
                            //if ( operation == (uint) Operation.FileRead )
                        {
                            StorageCounters.Counters.ReadFileCacheHits.Increment();
                            StorageCounters.Counters[instance].ReadFileCacheHits.Increment();
                        }

                    }

                    if (HResult.Succeeded(hr) && hr != HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED)
                    {
                        // If the domain does not allow cross-title access, verify
                        // that the requesting title matches the creating title.
                        // This will work for family title ids provided that the
                        // title writes and reads the file using the family title
                        // id.
                        if ( !path.Domain.Policy.AllowCrossTitle && req._titleId != rfi._titleId )
                        {
                            throw new XRLException(HResult.XONLINE_E_STORAGE_ACCESS_DENIED, XEvent.Id.STORAGE_CODE_8,
                                "Request title id (" + req._titleId.ToString("X") +
                                ") does not match creator title id (" + rfi._titleId.ToString("X"));
                        }

                        // fill out RepReadFile
                        rep._titleId = rfi._titleId;
                        rep._titleVersion = rfi._titleVersion;
                        rep._userPuid = rfi._userPuid;
                        rep._userCountryId = rfi._userCountryId;
                        rep._xboxPuid = rfi._xboxPuid;
                        rep._blobSignature = rfi._blobSignature;
                        rep._compressionType = rfi._compressionType;
                        rep._contentType = rfi._contentType;
                        rep._blobSize = rfi._blobSize;
                        rep._creationDate = rfi._creationDate;
                        rep._modifiedDate = rfi._modifiedDate;
                        rep._blobSizeUncompressed = rfi._blobSizeUncompressed;
                        rep._attributesSize = rfi._attributesSize;
                        rep._attributes = rfi._attributes;
                        blob = rfi._blob;

                        hr = HResult.S_OK;
                    }

                }
                catch (Exception e)
                {
                    hr = StorageUtils.GetHr( e, HResult.XONLINE_E_STORAGE_ERROR) ;

                    string msg = String.Format( "ReadFile failed: \r\nReqReadFile: " + req.ToString() );
                    throw new StorageException(  XEvent.Id.STORAGE_CODE_2
                                            , msg
                                            , e);

                    // LDone(ctx, req, blob, pathName, path, hr, instance);
                }
        }

        internal static HResult DbReadFile(StorageDomain domain, IdType keyType, ulong ulKey, string pathName,
            bool updateReadCount, ReqReadFile req, ReadFileInfo rfi, ulong xboxPuid, ulong userPuid , uint operation)
        {
            HResult hr = HResult.S_OK;

            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();
                Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_LOW, "DbReadFile: opened connection to: " + domain._webstoreApp);

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_get";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) domain.Id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value   = pathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value          = (int) req._titleId;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value     = (int) req._titleVersion;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value     = (long) userPuid;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value     = (long) xboxPuid;
                cmd.Parameters.Add("@i_range_start", SqlDbType.Int).Value       = (int) req._rangeStart;
                cmd.Parameters.Add("@i_range_end", SqlDbType.Int).Value         = (int) req._rangeEnd;

                if ( 0 == req._ifModifiedSinceDate )
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DBNull.Value;
                }
                else
                {
                    cmd.Parameters.Add("@dt_if_modified_since", SqlDbType.DateTime).Value = DateTime.FromFileTimeUtc(req._ifModifiedSinceDate);
                }
                cmd.Parameters.Add("@i_update_read_count", SqlDbType.Int).Value = ( updateReadCount ? 1 : 0 );

                // Execute stored procedure
                dataset = cmd.ExecuteReader();

                Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_LOW, "DbReadFile: executed stored procedure p_file_get for file: " + pathName);

                if (dataset.Read())
                {
                    Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_LOW, "DbReadFile: found file: " + pathName);
                    rfi._titleId       = (uint) dataset.GetInt32(0);
                    rfi._titleVersion  = (uint) dataset.GetInt32(1);
                    rfi._userPuid      = (ulong) dataset.GetInt64(2);
                    rfi._userCountryId = dataset.GetByte(3);
                    rfi._xboxPuid      = (ulong) dataset.GetInt64(4);

                    rfi._blobSignature = new byte[ProtocolConstants.sizeSignature];
                    ReadDbBlob(dataset, 5, rfi._blobSignature, rfi._blobSignature.Length);
                    rfi._contentType = (uint) dataset.GetInt32(6);
                    rfi._compressionType = (byte) dataset.GetInt32(7);
                    rfi._blobSize  = (uint) dataset.GetInt32(8);
                    rfi._blobSizeUncompressed = (uint) dataset.GetInt32(9);
                    rfi._creationDate = dataset.GetDateTime(10).ToFileTimeUtc();
                    rfi._modifiedDate = dataset.GetDateTime(11).ToFileTimeUtc();

                    rfi._attributesSize = (ushort) dataset.GetInt32(12);
                    if ( rfi._attributesSize > 0 && !dataset.IsDBNull(13) )
                    {
                        rfi._attributes = new byte[rfi._attributesSize];
                        ReadDbBlob(dataset, 13, rfi._attributes, rfi._attributesSize);
                    }

                    rfi._blob = new byte[rfi._blobSize];
                    ReadDbBlob(dataset, 14, rfi._blob, rfi._blob.Length);
                }

                dataset.Close();
                dataset = null;

                hr = (uint) (int) ret.Value;
                if (HResult.Failed(hr) && hr != HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND)
                {
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_9, "ReadFile: stored procedure p_file_get failed with hr = " + hr);
                }
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}' after {1} milliseconds",
                        cmd.Database.Server, timeElapsed.MillisecondsElapsed), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }

                if ( operation == (uint) Operation.FileEnumeratedRead )
                {
                    StorageCounters.Counters.EnumeratedReadFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    StorageCounters.Counters.EnumeratedReadFileAvgSQLTimeBase.Increment();

                    Debug.Assert( domain.Name != null && domain.Name.Length > 0 );
                    StorageCounters.Counters[domain.Name].EnumeratedReadFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    StorageCounters.Counters[domain.Name].EnumeratedReadFileAvgSQLTimeBase.Increment();

                } else
                    //if ( operation == (uint) Operation.FileRead )
                {
                    StorageCounters.Counters.ReadFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    StorageCounters.Counters.ReadFileAvgSQLTimeBase.Increment();

                    Debug.Assert( domain.Name != null && domain.Name.Length > 0 );
                    StorageCounters.Counters[domain.Name].ReadFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                    StorageCounters.Counters[domain.Name].ReadFileAvgSQLTimeBase.Increment();

                }

            }

            return hr;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\ReadTitleFiles.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * ReadTitleFiles.cs
 *
 * Implementation of batched ReadTitleFiles request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Caching;
using System.Collections.Generic;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

using xonline.server.storage.common;

namespace xonline.server.storage.fd
{        
    // ReadTitleFiles request
    public class ReqReadTitleFiles
    {
        private ReadFileToken accessToken;
        
        public void ReadFrom(BinaryReader r)
        {
            accessToken = new ReadFileToken(r);
        }     
        
        // Dump message contents
        public override string ToString()
        {
            return accessToken.ToString();
        }

        public AccessToken Token
        {
            get { return accessToken; }
        }
    }

    public class ImageBlob
    {
        private ulong id;
        private ushort blobLength;
        private byte[] blob = null;

        private string vc_name_prefix; 

        public ImageBlob(string strId, ushort length)
        {            
            string[] ids = strId.Split('/');
            vc_name_prefix = String.Format("/{0}/{1}/", ids[1], ids[2]); // should be something like "/ach/0/", etc.
            id = uint.Parse(ids[3], System.Globalization.NumberStyles.HexNumber);
            blobLength = length;
            blob = new byte[length];
        }

        public override string ToString()
        {
            return string.Format("{0}{1}", vc_name_prefix.ToLower(), id.ToString("X")).ToLower();
        }

        public ulong Id
        {
            get
            {
                return id;
            }
        }

        public ushort BlobLength
        {
            get
            {
                return blobLength;
            }
        }

        public byte[] Blob
        {
            get
            {
                return blob;
            }
        }
    }

    public class TitleImageBlobs
    {
        private ulong    titleId;
        private Dictionary<string, ImageBlob> TitleImageDictionary = new Dictionary<string, ImageBlob>();
        
        public TitleImageBlobs(ulong nTitleId)
        {
            titleId = nTitleId;
        }

        public bool TryGetValue(string key, ref ImageBlob blob)
        {
            return TitleImageDictionary.TryGetValue(key, out blob);
        }

        public void Add(ImageBlob blob)
        {
            TitleImageDictionary.Add(blob.ToString(), blob);
        }
        
        public ushort Count
        {
            get { return (ushort)TitleImageDictionary.Count; }
        }

        public ulong TitleId
        {
            get
            {
                return titleId;
            }
        }
    }

    // This class represents all of the data returned from SQL as part of a 
    // ReadTitleFiles request and is used to cache common file requests
    public class ReadTitleFilesReply
    {
        public uint titleId = 0;
        public ushort numItems = 0;
        public TitleFileBlob[] resultItems = null;

        public ReadTitleFilesReply(uint nTitleId, int nSize)
        {
            titleId = nTitleId;
            resultItems = new TitleFileBlob[nSize];
        }
    }

    public class TitleFileBlob : WireData
    {
        public uint   id;
        public ushort blobLength;
        public ushort blobExtraLength; // part that doesn't fit into a 2k chunk by itself
        public ushort chunkCount;

        [WireInfo(SizeParam = "blobLength")]
        public byte[] blob = null;        
    }

    // This class represents all of the data returned from SQL as part of a 
    // ReadTitleFiles request and is used to cache common file requests
    public class ReadTitleFilesResponse : XRLObject2
    {
        public uint titleId = 0;
        public ushort numItems = 0;

        [WireInfo(SizeParam = "numItems")]
        public TitleFileBlob[] resultItems = null;

        public ReadTitleFilesResponse(ReadTitleFilesReply reply)
        {
            titleId = reply.titleId;            
            resultItems = reply.resultItems;
            if (resultItems != null)
            {
                numItems = (ushort)resultItems.Length;
            }
        }
    }


    // ReadTitleFiles
    // HTTP handler for ReadTitleFiles request    
    public class ReadTitleFiles : StfdHandler
    {
        // The clients will be gated by a LiveHive batch size setting, but
        // we still need to make sure the caller isn't doing anything abusive to the server.
        const ushort MaxTitleFilesPerRequest = 50;
        const int ChunkSize = 2048;

        static ReadTitleFiles()
        {
        }

        // Operation
        public override uint GetOperation()
        {
            return (uint)Operation.ReadTitleFiles; 
        }

        /////////////////////////////////////////////////////////////////////////////////////////////
        // DecodeAssetIds
        //
        // The following method expects a pathName in the following format:
        //    
        //      /<asset type>/<index>/<asset_id1>,<asset_id2>,...,<asset id last>
        //
        // or in the case of a full recovery of achievement blobs, this list might look like this
        //
        //      /ach/0/1,2,3,4,5,6,7,a,b,c,f,10,12,13,20
        //
        // Indicating that the caller wants to retrieve 15 specific achievement tile assets, determined by the 
        // comma delimited list, or in other words
        //
        //   /ach/0/1
        //   /ach/0/2
        //   /ach/0/3
        //   ...etc...
        //   /ach/0/20
        // 
        //  and this list gets returned in the vc_names string list. All of these vc_names
        //  correspond with a specific row in the titledb's t_files table by a colum named vc_name
        // 
        private void DecodeAssetIds(string pathName, out string vc_name_prefix, List<string> vc_names)
        {            
            try
            {
                string[] tokens = pathName.Split('/');

                // tokens[0] is empty since the split char is at the front of the pathName to begin with
                // tokens[1] is the tile type to retrieve, e.g. "ach", "icon", "marketplace", etc.
                // tokens[2] contains the sub index of assets the caller wishes to retrieve.  For "real" assets
                //           this value is '0'.  For test content, this value is likley '1' or non-zero.
                // tokens[3] contains the comma delimited asset id list that the caller wants
                vc_name_prefix = String.Format("/{0}/{1}/", tokens[1], tokens[2]);

                string[] ids = tokens[3].Split(',');

                if (0 == ids.Length || (ids.Length == 1 && String.IsNullOrEmpty(ids[0])))
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STORAGE_INVALID_PATH,
                                            "ReadTitleFiles received an empty file id list.");
                }
                else if (ids.Length > MaxTitleFilesPerRequest)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STORAGE_INVALID_PATH,
                                            String.Format("ReadTitleFiles was requested to get {0} files, but the max it will allow is only {1}.",
                                                            ids.Length,
                                                            MaxTitleFilesPerRequest));
                }

                foreach (string id in ids)
                {
                    // each asset must be represented in this format to be compatible with the vc_name field in the db.                
                    vc_names.Add(string.Format("{0}{1}", vc_name_prefix.ToLower(), id.ToLower())); // ensure all string comparisons are done in same case
                }
            }
            catch (Exception e)
            {
                if (e is XRLExceptionWithoutEvent)
                    throw; // already specifically handled... rethrow
                
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STORAGE_INVALID_PATH,
                    String.Format("ReadTitleFiles::DecodeAssetIds received an invalid pathName, Path = {0}",
                    String.IsNullOrEmpty(pathName) ? String.Empty : pathName));                
            }            
        }       

        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.ReadTitleFilesCurrent.Increment();
                _ProcessRequest(ctx);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.ReadTitleFilesCurrent.Decrement();
                StorageCounters.Counters.ReadTitleFilesAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.ReadTitleFilesAvgTimeBase.Increment();
            }
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            HResult                     hr              = HResult.S_OK;
            XomRequestTimeElapsed       timeElapsed     = new XomRequestTimeElapsed();
            ReqReadTitleFiles           request         = new ReqReadTitleFiles();                        
            ReadTitleFilesResponse      response        = null;
            ReadTitleFilesReply         reply           = null;
            PathInfo                    path            = null;            
            string                      instance        = null;            
            string                      vc_name_prefix  = null;
            ulong                       titleId         = 0;
            List<string>                vc_names        = new List<string>();
            string                      logMsg;
            string                      logHrMsg        = null;

            try
            {
                try
                {
                    using (BinaryReader reader = new BinaryReader(ctx.Request.InputStream))
                    {
                        request.ReadFrom(reader);
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, String.Format("ReadTitleFiles: request parsed: {0}", request.ToString()));

                        path = PathInfo.Parse(request.Token._pathName);
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, String.Format("ReadTitleFiles: PathInfo parsed: {0}", path));

                        DecodeAssetIds(path.PathName, out vc_name_prefix, vc_names);
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, "ReadTitleFiles::DecodeAssetIds succeeded");

                        if (HResult.Succeeded(hr))
                        {
                            instance = path.Domain.Name;
                            titleId = path.KeyValue;

                            // If the request contains more data than advertised, throw an event 
                            // and fail with XONLINE_E_STORAGE_INVALID_REQUEST error.
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "HttpRequest.ContentLength: " + ctx.Request.ContentLength);
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, String.Format("Reader consumed bytes" + reader.BaseStream.Position));

                            if (ctx.Request.ContentLength != reader.BaseStream.Position)
                            {
                                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_INVALID_REQUEST,
                                    String.Format("ContentLength indicates more data was sent ({0} bytes) than is expected ({1} bytes).  This may be evidence of an attempted buffer overflow attack.\r\nReq: {2}\r\nSGInfo:{3}",
                                                    ctx.Request.ContentLength,
                                                    reader.BaseStream.Position,
                                                    request.ToString(),
                                                    SGInfo.ToStr()));
                            }
                        }
                    }
                }
                catch (XRLException e)
                {
                    logHrMsg = e.Message;
                    hr = e.HResult;
                }
                catch (XRLExceptionWithoutEvent e)
                {
                    logHrMsg = e.Message;
                    hr = e.HResult;
                }

                if (HResult.Succeeded(hr))
                {
                    // Get all of the requested blobs
                    try
                    {
                        ReadTitleBlobs(ctx, request, out reply, vc_name_prefix, vc_names, path, instance, GetOperation());
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, "ReadTitleFiles::ReadTitleBlobs succeeded");
                    }
                    catch (SqlException e)
                    {
                        // log the sql exception to the event log as an actionable item, set hr, and continue
                        Xom.NtEvent(XEvent.Id.STFD_READTITLEFILES_ERROR, e, e.Message);
                        hr = HResult.XONLINE_E_DATABASE_ERROR;
                    }
                }

                // Send reply      
                if (HResult.Succeeded(hr))
                {
                    response = new ReadTitleFilesResponse(reply);
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr, response);
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, "ReadTitleFiles: SetXRLResponse succeeded");

                    StorageCounters.Counters.ReadTitleFilesTotal.Increment();
                    StorageCounters.Counters.ReadTitleFilesPerSecond.Increment();
                    StorageCounters.Counters.ReadTitleFilesAvgBytesBase.Increment();

                    if (!String.IsNullOrEmpty(instance))
                    {
                        StorageCounters.Counters[instance].ReadTitleFilesTotal.Increment();
                        StorageCounters.Counters[instance].ReadTitleFilesPerSecond.Increment();
                        StorageCounters.Counters[instance].ReadTitleFilesAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                        StorageCounters.Counters[instance].ReadTitleFilesAvgTimeBase.Increment();
                        StorageCounters.Counters[instance].ReadTitleFilesAvgBytesBase.Increment();
                    }
                }
            }
            finally
            {
                logMsg = String.Format("RDTF|{0}|{1}|{2}|{3}|{4}|{5}",
                                        hr,
                                        titleId.ToString("X"),
                                        (SGInfo.Current != null ? SGInfo.Current.Nonce.ToString("X") : String.Empty),
                                        ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : String.Empty),                                        
                                        path.PathName,
                                        String.IsNullOrEmpty(logHrMsg) ? String.Empty : logHrMsg);

                Xom.Log(XomAreaName.log, logMsg);

                if (HResult.Failed(hr))
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

                    if (HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND == hr)
                    {
                        StorageCounters.Counters.ReadFile404PerSecond.Increment();
                        StorageCounters.Counters.ReadFile404Total.Increment();

                        if (!String.IsNullOrEmpty(instance))
                        {
                            StorageCounters.Counters[instance].ReadFile404PerSecond.Increment();
                            StorageCounters.Counters[instance].ReadFile404Total.Increment();
                        }
                    }

                    StorageCounters.Counters.ReadTitleFilesFailedTotal.Increment();
                    StorageCounters.Counters.ReadTitleFilesFailedPerSecond.Increment();
                    if (!String.IsNullOrEmpty(instance))
                    {
                        StorageCounters.Counters[instance].ReadTitleFilesFailedTotal.Increment();
                        StorageCounters.Counters[instance].ReadTitleFilesFailedPerSecond.Increment();
                    }
                }
            }
        
            return;
        }

        internal static void ReadTitleBlobs(HttpContext ctx, ReqReadTitleFiles request, out ReadTitleFilesReply reply,
                    string vc_name_prefix, List<string> vc_names, PathInfo path,string instance, uint operation)
        {
            ReadTitleFilesReply     initialReply        = null;
            TitleImageBlobs         cachedImageBlobs    = null;
            ulong                   titleId             = 0;

            titleId = path.KeyValue;

            // Check the cache before hitting the database.
            if (path.Domain.Policy.CacheReadFiles)
            {
                cachedImageBlobs = (TitleImageBlobs)CacheGet(ctx, GenerateCacheKey(String.Format("{0}_{1}", titleId.ToString("X"), vc_name_prefix).ToLower(), operation.ToString()));
            }

            // If cache missed, read all of the title assets from SQL and add to the cache
            if (cachedImageBlobs == null)
            {
                Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, "ReadTitleFiles::Cache miss. Fetching title images from SQL database.");

                cachedImageBlobs = new TitleImageBlobs(titleId);

                DbReadTitleFiles(vc_name_prefix, path, ref cachedImageBlobs, instance, operation);
                Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, String.Format("ReadTitleFiles::DbReadTitleFiles found {0}/{1} files.",
                    cachedImageBlobs.Count, vc_names.Count));

                if (cachedImageBlobs.Count > 0 && path.Domain.Policy.CacheReadFiles)  // add the entry to the cache
                {
                    CacheAdd(ctx, GenerateCacheKey(String.Format("{0}_{1}", titleId.ToString("X"), vc_name_prefix).ToLower(), operation.ToString()),
                                                    cachedImageBlobs,
                                                    path.Domain.Policy.ReadFileCacheTimeSeconds);

                    StorageCounters.Counters.ReadTitleFilesCacheMisses.Increment();
                    if (!String.IsNullOrEmpty(instance))
                    {
                        StorageCounters.Counters[instance].ReadTitleFilesCacheMisses.Increment();
                    }
                }
            }
            else
            {
                Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, "ReadTitleFiles::DbReadTitleFiles found title files in the cache.");

                StorageCounters.Counters.ReadTitleFilesCacheHits.Increment();
                if (!String.IsNullOrEmpty(instance))
                {
                    StorageCounters.Counters[instance].ReadTitleFilesCacheHits.Increment();
                }
            }

            // expect the "initial" reply to successfully retrieve all expected items
            initialReply = new ReadTitleFilesReply((uint)titleId, vc_names.Count);

            if (cachedImageBlobs.Count > 0)
            {
                foreach (string vc_name in vc_names)
                {
                    ImageBlob blob = null;
                    if (cachedImageBlobs.TryGetValue(vc_name, ref blob))
                    {
                        TitleFileBlob titleBlob = new TitleFileBlob();
                        titleBlob.id = (uint)blob.Id;
                        titleBlob.blobLength = blob.BlobLength;
                        titleBlob.chunkCount = (ushort)((int)blob.BlobLength / ChunkSize);
                        titleBlob.blobExtraLength = (ushort)((int)titleBlob.blobLength - ((int)titleBlob.chunkCount * ChunkSize));
                        titleBlob.blob = blob.Blob;                            
                        initialReply.resultItems[initialReply.numItems++] = titleBlob;                        
                    }
                }
            }

            // If not all of the expected blobs are found...
            if (vc_names.Count != initialReply.numItems)
            {
                // bump a perf counter to indicate this condition
                StorageCounters.Counters.ReadTitleFilesSearchMisses.Increment();
                if (!String.IsNullOrEmpty(instance))
                {
                    StorageCounters.Counters[instance].ReadTitleFilesSearchMisses.Increment();
                }

                // the reply buffer must only contain valid item to serialize, so copy the valid items
                // to the *real* reply construct
                reply = new ReadTitleFilesReply((uint)titleId, initialReply.numItems);
                for (int i = 0; i < initialReply.numItems; ++i)
                {
                    reply.resultItems[i] = new TitleFileBlob();
                    reply.resultItems[i].id = initialReply.resultItems[i].id;
                    reply.resultItems[i].blobLength = initialReply.resultItems[i].blobLength;
                    reply.resultItems[i].blobExtraLength = initialReply.resultItems[i].blobExtraLength;
                    reply.resultItems[i].chunkCount = initialReply.resultItems[i].chunkCount;                    
                    reply.resultItems[i].blob = initialReply.resultItems[i].blob;
                }
            }
            else
            {
                // Most of the time, the expected # will match the actual #, and we can just copy the reference in this case.
                reply = initialReply;
            }
        }                       

        internal static void DbReadTitleFiles(string vc_name_prefix, PathInfo path, ref TitleImageBlobs cachedImageBlobs, string instance, uint operation)
        {
            WstCommand              cmd         = null;                        
            XomRequestTimeElapsed   timeElapsed = new XomRequestTimeElapsed();

            try
            {
                int readBytes = 0;

                // Open a connection
                using (WstConnection conn = new WstConnection(path.Domain._webstoreApp))
                {
                    SqlParameter ret = null;
                    conn.Open();

                    // Create a command to call the stored procedure
                    cmd = conn.CreateCommand();
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "dbo.p_titlefiles_get";
                    cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                    // Data is partitioned by title 
                    cmd.PartitionType = WstPartitionType.Logical;
                    cmd.Partition = WSClient.GetHashPartition(path.KeyValue, path.Domain._webstoreApp);

                    // Set the stored procedure parameters
                    ret = new SqlParameter();
                    ret.Direction = ParameterDirection.ReturnValue;
                    cmd.Parameters.Add(ret);
                    cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value = (int)path.Domain.Id;    // db partition domain id
                    cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value = (int)path.KeyType;      // Title(4)
                    cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value = (long)path.KeyValue;    // titleID value 
                    cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value = String.Format("{0}%", vc_name_prefix); // "starts with" LIKE pattern

                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_NORMAL, String.Format("ReadTitleFiles::DbReadTitleFiles executing {0} query.", cmd.CommandText));

                    using (WstDataReader dataset = cmd.ExecuteReader())
                    {
                        // Execute stored procedure
                        while (dataset.Read())
                        {
                            try
                            {
                                ImageBlob tile = new ImageBlob((string)dataset.GetString(0), (ushort)dataset.GetInt32(1)); // 0 == vc_name field, 1 == i_size field
                                ReadDbBlob(dataset, 2, tile.Blob, (int)tile.BlobLength); // 2 == bin_blob field
                                cachedImageBlobs.Add(tile);
                                readBytes += (int)tile.BlobLength;
                            }
                            catch (Exception e)
                            {
                                string err = String.Format("ReadTitleFiles::DbReadTitleFiles: ImageBlob could not be created and added to cachedImageBlobs. Ex: {0}", e.ToString());
                                Xom.Log(XomAreaName.log, err); // log error and continue
                            }
                        }
                    }
                }

                if (readBytes > 0)
                {
                    StorageCounters.Counters.ReadTitleFilesTotalBytes.IncrementBy(readBytes);
                    StorageCounters.Counters.ReadFileBytesPerSecond.IncrementBy(readBytes);
                    StorageCounters.Counters.ReadTitleFilesAvgBytes.IncrementBy(readBytes);

                    if (!String.IsNullOrEmpty(instance))
                    {
                        StorageCounters.Counters[instance].ReadTitleFilesTotalBytes.IncrementBy(readBytes);
                        StorageCounters.Counters[instance].ReadFileBytesPerSecond.IncrementBy(readBytes);
                        StorageCounters.Counters[instance].ReadTitleFilesAvgBytes.IncrementBy(readBytes);
                    }
                }
            }
            catch (SqlException)
            {
                string msg = String.Format("SqlException thrown in DbReadTitleFiles after {0} milliseconds", timeElapsed.MillisecondsElapsed);

                // for timeouts, try and add the server information to the file log message
                if (cmd != null && cmd.Database != null)
                {
                    msg = string.Format("SqlException thrown in DbReadTitleFiles while connecting to sql machine '{0}' after {1} milliseconds",
                                                cmd.Database.Server, 
                                                timeElapsed.MillisecondsElapsed);
                }

                Xom.Log(XomAreaName.log, msg); // log error, and rethrow
                
                throw;
            }
            finally
            {                              
                StorageCounters.Counters.ReadTitleFilesAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.ReadTitleFilesAvgSQLTimeBase.Increment();

                Debug.Assert( path.Domain.Name != null && path.Domain.Name.Length > 0 );
                StorageCounters.Counters[path.Domain.Name].ReadTitleFilesAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[path.Domain.Name].ReadTitleFilesAvgSQLTimeBase.Increment();
            }            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\RemoveFile.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * RemoveFile.cs
 *
 * Implementation of RemoveFile request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.rmfTrace)]

namespace xonline.server.storage.fd
{
    // RemoveFile
    // HTTP handler for RemoveFile request
    public class RemoveFile : StfdHandler
    {
        private int _removeFileSqlTimeout
        {
            get
            {
                string s = Config.GetSetting(Setting.storageFD_removeFileSqlTimeout);
                return Int32.Parse(s);
            }
        }

        // Operation
        public override uint GetOperation()
        {
            return (uint) Operation.FileRemove;
        }

        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.RemoveFileCurrent.Increment();
                SGInfo.VerifyServiceId(XOService.Storage);
                _ProcessRequest(ctx);
            }
            catch (System.Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.RemoveFileCurrent.Decrement();

                StorageCounters.Counters.RemoveFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.RemoveFileAvgTimeBase.Increment();
            }
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ReqRemoveFile req = new ReqRemoveFile();
            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;
            string instance = null;

            Xom.Trace(XomAreaName.rmfTrace, LogLevel.L_NORMAL, "RemoveFile: entered.");

            try
            {
                BinaryReader    reader  = new BinaryReader(ctx.Request.InputStream);
                BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);

                // Parse request header
                try
                {
                    req.ReadFrom(reader);
                    Xom.Trace(XomAreaName.rmfTrace, LogLevel.L_NORMAL, "RemoveFile: request parsed:" + req.ToString());
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STFD_INVALID_REQUEST, e, "Invalid RemoveFile request");
                    goto lDone;
                }

                // Parse and validate pathName
                try
                {
                    path = PathInfo.Parse(req._accessToken._pathName);
                    instance = path.Domain.Name;

                    path.Validate(req);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_PATH;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_17, e,
                        "RemoveFile: invalid pathName: " + req._accessToken._pathName +
                        "\r\nReqRemoveFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Extract the pathname
                pathName = path.PathName;

                // Access Control check
                CheckPermissions(req, path);

                // Security check
                try
                {
                    if (req._accessToken._xboxPuid != 0) SGInfo.VerifyMachineId(req._accessToken._xboxPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserId(req._accessToken._userPuid);

                    SGInfo.VerifyTitleIdOrAlternate(req._titleId);
                    SGInfo.VerifyTitleVersion(req._titleVersion);
                }
                catch(Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    }

                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_3, e,
                        "Invalid RemoveFile request." +
                        "\r\nReqRemoveFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // If an AccessToken is present, validate it and perform
                // consistency checks.
                try
                {
                    req.Validate();
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_19, e,
                        "RemoveFile: AccessToken.Validate threw exception." +
                        "\r\nReqRemoveFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // Make sure token grants FileRemove permission
                if ( (ushort) Operation.FileRemove != req._accessToken._operation )
                {
                    hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_4, "RemoveFile reqested; Access Token allows: " + ((Operation) req._accessToken._operation));
                    goto lDone;
                }

                // If the request contains more data than advertised, throw
                // an event and fail with XONLINE_E_STORAGE_INVALID_REQUEST
                // error.
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "HttpRequest.ContentLength: " + ctx.Request.ContentLength);
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, String.Format("Reader consumed bytes" + reader.BaseStream.Position));

                if ( ctx.Request.ContentLength != reader.BaseStream.Position)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_21,
                        "ContentLength indicates more data was sent ({0} bytes) than is expected ({1} bytes). This may be evidence of an attempted buffer overflow attack.\r\nReq: {2}",
                        ctx.Request.ContentLength, reader.BaseStream.Position, req.ToString()
                    );

                    goto lDone;
                }

                // Remove file from the database
                try
                {
                    DbRemoveFile(path.Domain, path.KeyType, path.KeyValue, pathName, req);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ERROR;
                    }

                    if (hr != HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND)
                    {
                        Xom.NtEvent(XEvent.Id.STORAGE_CODE_4, e,
                            "RemoveFile: " +
                            "\r\nReqRemoveFile: " + req.ToString()
                        );
                    }

                    goto lDone;
                }

                Xom.Trace(XomAreaName.rmfTrace, LogLevel.L_NORMAL, "RemoveFile: completed successfully.");
                StorageCounters.Counters.RemoveFileTotal.Increment();
                StorageCounters.Counters.RemoveFilePerSecond.Increment();

                Debug.Assert( instance != null && instance.Length > 0 );
                StorageCounters.Counters[instance].RemoveFileTotal.Increment();
                StorageCounters.Counters[instance].RemoveFilePerSecond.Increment();
                StorageCounters.Counters[instance].RemoveFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[instance].RemoveFileAvgTimeBase.Increment();


                hr = HResult.S_OK;
            }
            finally
            {
            }

        lDone:

            string logMsg =
                "RMF"                                        + "|" +
                hr                                           + "|" +
                req._titleId.ToString("X")                   + "|" +
                req._titleVersion.ToString("X")              + "|" +
                (req._accessToken == null ? "0" : req._accessToken._userPuid.ToString("X"))     + "|" +
                (req._accessToken == null ? "0" : req._accessToken._xboxPuid.ToString("X"))     + "|" +
                (SGInfo.Current != null ? SGInfo.Current.Nonce.ToString("X") : "") + "|" +
                ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : "") + "|" +
                (path != null ? ((int)path.KeyType).ToString() : "") + "|" +
                (path != null ? path.KeyValue.ToString("X") : "")    + "|" +
                pathName;

            Xom.Log(XomAreaName.log, logMsg);

            // Set the response and exit
            XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

            if (HResult.Failed(hr))
            {
                Xom.Trace(XomAreaName.rmfTrace, LogLevel.L_NORMAL, "RemoveFile: returning hr = " + hr);
                StorageCounters.Counters.RemoveFileFailedTotal.Increment();
                StorageCounters.Counters.RemoveFileFailedPerSecond.Increment();
            }
        }

        // DbRemoveFile
        // Remove file from database
        private void DbRemoveFile(
            StorageDomain domain, // domain. E.g. stats, title, etc.
            IdType  keyType,  // key type. E.g. UserId for user puid
            ulong   ulKey,    // key
            string  pathName, // pathname minus partitioning metadata
            ReqRemoveFile req
            )
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_remove";
                cmd.CommandTimeout = _removeFileSqlTimeout;
                cmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;

                // Data is partitioned by user puid
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // Files in the pics domain are always owned by the custom
                // picture titleid.  This allows them to the deleted from
                // any title without changes on the client.
                uint titleId = req._titleId;

                if (StorageDomainConstants.PICS == domain.Id)
                    titleId = XOn.X_CUSTOM_PICTURE_TITLEID;

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value             = (int) domain.Id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value              = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value         = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value       = pathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value              = (int) titleId;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value         = (int) req._titleVersion;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value         = (long) req._accessToken._userPuid;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value         = (long) req._accessToken._xboxPuid;
                cmd.Parameters.Add("@f_quota_update", SqlDbType.Int).Value          = (int) (domain.Policy.QuotaEnabled ? 1 : 0);

                // Execute stored procedure
                cmd.ExecuteNonQuery();

                // Check return code
                HResult hr = (uint) (int) ret.Value;

                if (HResult.Failed(hr))
                {
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_12, "RemoveFile: stored procedure p_file_remove failed with hr = " + hr);
                }
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}' after {1} milliseconds",
                        cmd.Database.Server, timeElapsed.MillisecondsElapsed), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                StorageCounters.Counters.RemoveFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.RemoveFileAvgSQLTimeBase.Increment();

                Debug.Assert( domain.Name != null && domain.Name.Length > 0 );
                StorageCounters.Counters[domain.Name].RemoveFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[domain.Name].RemoveFileAvgSQLTimeBase.Increment();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\ReportBrokenLink.cs ===
// 
// ReportBrokenLink.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Live Storage Service
// Name Resolution Service
// 
// Author: Ben Zotto (benzotto)
//

using System;
using System.IO;
using System.Web;
using System.Net;
using System.Diagnostics;

using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.protocol;

namespace xonline.server.storage.fd 
{
    public class ReportBrokenLink : IHttpHandler
    {
        //--------------------------------------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //--------------------------------------------------------------------------------
        
        public void ProcessRequest(HttpContext ctx)
        {            
            HResult hr = HResult.S_OK;
            
            try
            {            
                NameResolverCounters.Counters.ReportBrokenLinkCurrent.Increment();            
    
                ReportBrokenLinkRequest req = new ReportBrokenLinkRequest();
                    
                try
                {
                    req.ReadFromRequest(ctx.Request);
                
    
                    Xom.NtEvent(XEvent.Id.STFD_PATHNAME_BROKEN_LINK_REPORT, 
                        "\nXbox client reports an inability to find the storage service responsible for" +
                         " this pathname.  The storage mapping rules in the NPDB are inconsistent and need" +
                         " to be fixed.\n" +
                        "\nStatus code: 0x" + req.statusData.ToString("X") +
                        "\nPathname: " + req.pathname
                    );
                                                            
                    string logMsg = "RBL|" + req.pathname;
                    Xom.Log(XomAreaName.log, logMsg);
                }
                catch(Exception e)
                {
                    Xom.NtEvent(XEvent.Id.STFD_INVALID_REQUEST_1, e, "ReportBrokenLink: Error parsing request");
                    hr = HResult.XONLINE_E_INVALID_REQUEST;
                }
                    
                if(HResult.Failed(hr))
                {
                    NameResolverCounters.Counters.ReportBrokenLinkFailedTotal.Increment();
                    NameResolverCounters.Counters.ReportBrokenLinkFailedPerSecond.Increment();
                }
                                
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Name_Resolution, hr);
                    
                NameResolverCounters.Counters.ReportBrokenLinkTotal.Increment();
                NameResolverCounters.Counters.ReportBrokenLinkPerSecond.Increment();
             }
             finally
             {
                NameResolverCounters.Counters.ReportBrokenLinkCurrent.Decrement();
             }
        }

        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }

 
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\ReadFileHash.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * ReadFileHash.cs
 *
 * Implementation of ReadFileHash request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Caching;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.rfhTrace)]

namespace xonline.server.storage.fd
{
    // ReadFileHash
    // HTTP handler for ReadFile request
    public class ReadFileHash : StfdHandler
    {
        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            CallSource.Check(VirtualInterface.stfd_storage_int);
            _ProcessRequest(ctx);
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            ReadFileHashRequest req = new ReadFileHashRequest();
            ReadFileHashResponse response = null;
            byte[] fileHash = null;

            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;

            Xom.Trace(XomAreaName.rfhTrace, LogLevel.L_NORMAL, "ReadFileHash: entered.");

            try
            {

                // Parse request
                try
                {
                    req.ReadFromRequest(ctx.Request);
                    Xom.Trace(XomAreaName.rfhTrace, LogLevel.L_NORMAL, "ReadFileHash: request parsed:" + req.ToString());
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_12, e,
                        "Invalid ReadFileHash request"
                    );

                    goto lDone;
                }

                // Parse and validate pathname
                try
                {
                    path = PathInfo.Parse(req.pathName);
                    path.Validate();
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_PATH;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_13, e, 
                        "ReadFileHash: invalid pathName: " + req.pathName +
                        "\r\nReadFileHashRequest: " + req.ToString()
                    );
                    goto lDone;
                }

                // Verify key-type. Currently supporting only user puids.
                if ( path._keyType != IdType.UserId && path._keyType != IdType.TitleId )
                {
                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_14,
                        "Invalid ReadFileHash request: pathName is invalid. Unsupported key-type. "+
                        "\r\nReadFileHashRequest: " + req.ToString()
                    );

                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    goto lDone;
                }

                // Extract the pathname
                pathName = path._pathName;
                if ( null == path._pathName )
                {
                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_15,
                        "Invalid ReadFileHash request: pathName is invalid. Invalid path. "+
                        "\r\nReadFileHashRequest: " + req.ToString()
                    );
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    goto lDone;
                }

                // Read file from the database
                try
                {
                    fileHash = new byte[ProtocolConstants.sizeHash];
                    DbReadFileHash(path._domain, path._keyType, path._keyValue, pathName, ref fileHash);

                    response = new ReadFileHashResponse();
                    response.hash = fileHash;
                    Xom.Trace(XomAreaName.rfhTrace, LogLevel.L_LOW, "ReadFileHash: response: " + response.ToString());
                }
                catch (Exception e)
                {
                    if (e is ExceptionWithHResult)
                        hr = ((ExceptionWithHResult) e).HResult;
                    else {
                        hr = HResult.XONLINE_E_STORAGE_ERROR;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_CODE_3, e,
                        "ReadFileHash failed: " +
                        "\r\nReadFileHashRequest: " + req.ToString()
                    );
                    goto lDone;
                }

                hr = HResult.S_OK;
                // Send reply
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr, response);

                Xom.Trace(XomAreaName.rdfTrace, LogLevel.L_NORMAL, "ReadFileHash: completed successfully.");

            }
            finally
            {
            }

        lDone:

            string logMsg =
                "RFH"                                        + "|" +
                hr                                           + "|" +
                req.pathName                                 + "|" +
                ((path != null && path._domain != null) ? ((int)path._domain.Id).ToString() : "") + "|" +
                (path != null ? ((int)path._keyType).ToString() : "") + "|" +
                (path != null ? path._keyValue.ToString("X") : "")    + "|" +
                pathName                                     + "|" +
                ((response == null || response.hash == null) ? "" : ByteConvert.ToString(response.hash));

            Xom.Log(XomAreaName.log, logMsg);

            if (HResult.Failed(hr))
            {
                XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

                Xom.Trace(XomAreaName.rfhTrace, LogLevel.L_NORMAL, "ReadFileHash: returning hr = " + hr);
            }

            return;
        }

        private void DbReadFileHash(StorageDomain domain, IdType keyType, ulong ulKey, string pathName, ref byte[] fileHash)
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();


                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_get_hash";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;

                // Data is partitioned by user puid
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value         = (int) domain._id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value          = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value     = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value   = pathName;

                // Execute stored procedure
                dataset = cmd.ExecuteReader();

                if (dataset.Read())
                {
                    ReadDbBlob(dataset, 0, fileHash, fileHash.Length);
                }
                else
                {
                    throw new XRLException(HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND, XEvent.Id.STORAGE_CODE_10,
                        "ReadFileHash: file not found: " + pathName);
                }

                dataset.Close();
                dataset = null;

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ((int)ret.Value);
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_11, "ReadFileHash: stored procedure p_file_get failed with hr = " + hr);
                }
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}'", cmd.Database.Server), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                if (dataset != null)
                {
                    dataset.Close();
                    dataset = null;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\base\IStorageCmd.cs ===
namespace xonline.server.storage.fd 
{
    public interface IStorageCmd
    {
        void ParseRequest();
        void ValidateRequest();
        void Execute();
        void WriteResponse();
        uint GetHResult();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\ResolveName.cs ===
// 
// ResolveName.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Live Storage Service
// Name Resolution Service
// 
// Author: Ben Zotto (benzotto)
//

using System;
using System.Collections;
using System.Collections.Specialized;
using System.IO;
using System.Web;
using System.Net;
using System.Diagnostics;
using System.Data;
using System.Data.SqlClient;

using xonline.common.mgmt;
using xonline.common.config;
using xonline.common.service;
using xonline.common.protocol;
using xonline.common.sql.sqlclient;

[assembly: XomAreaDefinition(XomAreaName.nrTrace)]

namespace xonline.server.storage.fd 
{
    public class ResolveName : IHttpHandler
    {
        //--------------------------------------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //--------------------------------------------------------------------------------
        
        public void ProcessRequest(HttpContext ctx)
        {
            string expiration;
            HResult hr = HResult.S_OK;
            
            ResolveNameRequest  req;
            ResolveNameResponse resp;
            
            StorageEndpoint se;

            try
            {
                //
                // set up perf counters
                //
    
                NameResolverCounters.Counters.ResolveNameCurrent.Increment();

                SGInfo.VerifyServiceId(XOService.Name_Resolution);
                
                //
                // set up request handling
                //
                req  = new ResolveNameRequest();
                resp = new ResolveNameResponse();
                
                req.ReadFromRequest(ctx.Request);
                
                if(req.pathname == null || req.pathname == String.Empty)
                {
                    throw new XRLException(HResult.XONLINE_E_INVALID_REQUEST, XEvent.Id.STORAGE_CODE_13, "ResolveName: expected pathname, received no pathname");
                }
                
                req.pathname = req.pathname.ToLower();
                
                //
                // Go find the right mapping.  In debug builds, we'll look for overrides in the
                // config file (they'll be in _override) 
                //

                    se = NameResolutionData.Lookup(req.pathname);
                
                if(se == null)
                {
                    Xom.NtEvent(XEvent.Id.STFD_PATHNAME_UNKNOWN_DOMAIN, "Could not find any valid mapping for full-domain: " + req.pathname);
                    hr = HResult.XONLINE_E_STORAGE_UNKNOWN_DOMAIN;
                    goto Done;
                }

                resp.primaryIP     = (uint)se.PrimaryIP;
                resp.primaryPort   = se.PrimaryPort;
                resp.alternateIP   = (uint)se.AlternateIP;
                resp.alternatePort = se.AlternatePort;
                resp.expiration    = se.Expiration;
                resp.rule          = se.Rule;                 

                //
                // check .ini file for override expiration data.
                //
                
                try 
                {    
                    expiration = Config.GetSetting(Setting.nameResolver_ruleExpirationHours);
                    if(expiration != null && expiration != String.Empty)
                    {
                        resp.expiration = DateTime.UtcNow + TimeSpan.FromHours(UInt32.Parse(expiration));
                    }                  
                }
                catch(Exception e)
                {
                    Xom.NtEvent(XEvent.Id.STFD_MISSING_OR_BAD_CONFIG_2, e, "ResolveName: Error parsing ini file, section [NameResolver]");
                    hr = HResult.XONLINE_E_INTERNAL_ERROR;
                    goto Done;
                }                
                
                Xom.Trace(XomAreaName.nrTrace, LogLevel.L_LOW, "NR: Mapped domain " + req.pathname + " to rule " + resp.rule + ".* at " + resp.primaryIP + ":" + resp.primaryPort + " (" + resp.alternateIP + ":" + resp.alternatePort + ").");
                                           
                //
                // send response
                //            
    Done:
                if(HResult.Failed(hr))
                {
                    NameResolverCounters.Counters.ResolveNameFailedTotal.Increment();    
                    NameResolverCounters.Counters.ResolveNameFailedPerSecond.Increment();
                    
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.Name_Resolution, hr);
                }
                else
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.Name_Resolution, hr, resp);
                }
                
                NameResolverCounters.Counters.ResolveNameTotal.Increment();
                NameResolverCounters.Counters.ResolveNamePerSecond.Increment();
            }
            finally
            {
                NameResolverCounters.Counters.ResolveNameCurrent.Decrement();
            }                         

        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
        
    }
    
    internal class StorageEndpoint : IComparable
    {
        public string  Rule;
        
        public long    PrimaryIP;
        public ushort  PrimaryPort;
        public long    AlternateIP;
        public ushort  AlternatePort;
        
        public DateTime Expiration;
        
        //
        // returns true if this rule is a match for the one passed in.
        //        
        public bool Matches(string domain)
        {
          return (domain.StartsWith(Rule + ".") || domain == Rule);          
        }
        
        public int CompareTo(Object obj)
        {
            if(!(obj is StorageEndpoint))
            {
                throw new ArgumentException();
            }
            
            StorageEndpoint se = (StorageEndpoint)obj;
            
            if(this.Rule == se.Rule)
            {
                return 0;
            }
            
            if(this.Rule.StartsWith(se.Rule + "."))
            {
                return -1;
            }
            
            if(se.Rule.StartsWith(this.Rule + "."))
            {
                return +1;
            }
            
            return(this.Rule.CompareTo(se.Rule));
        }
    }
       
    //
    //  This class abstracts away the actual name resolution, including the loading and caching
    //  of data from the NPDB.
    // 
    
    internal class NameResolutionData
    {
        static private ArrayList _rulesList = null;
        static private Hashtable _rulesTable = null;
                
        static NameResolutionData()
        {
            FrontEndApp.FlushCacheEvent += new FrontEndApp.FlushCacheEventHandler(NameResolutionData.FlushHandler);
        }
        
        public static void FlushHandler(object o, EventArgs e)
        {
            _rulesList = null;
            _rulesTable = new Hashtable();
        }
                
        public static StorageEndpoint Lookup(string domain)
        {
            if(_rulesList == null)
            {
                try
                {
                    Load();
                }
                catch(Exception e)
                {
                    Xom.NtEvent(XEvent.Id.STORAGE_CONFIG_3, e, "NPDB stored procedure p_nr_get_all_mappings failed.");
                    throw;
                }

                //
                // If the loading failed, bail out.
                //
                
                if(_rulesList == null)
                {
                    return null;
                }
            }            
            
            StorageEndpoint bestmatch = null;
            
            //
            // Does this precise mapping live in the hashtable yet?
            //            
            
            if((bestmatch = (StorageEndpoint)_rulesTable[domain]) != null)
            {
                Xom.Trace(XomAreaName.nrTrace, LogLevel.L_LOW, "NR: RulesTable HIT for " + domain + " matching rule " + bestmatch.Rule );
                
                goto Done;    
            }
            
            //
            // If not, we must look it up explicitly, walking the full list.
            // The first match we find will be the best, due to the sorting order
            // that we get back from the database.
            //              
            
            foreach(StorageEndpoint se in _rulesList)
            {
                if(se.Matches(domain))
                {
                    Xom.Trace(XomAreaName.nrTrace, LogLevel.L_LOW, "NR: RulesList HIT for " + domain + " matching rule " + se.Rule );
                    
                    bestmatch = se;
                    break;
                }
            }
            
            //
            // Add to hashtable.
            //
            
            if(bestmatch != null)
            {
                _rulesTable[domain] = bestmatch;                    
            }
                
Done:       
            //
            // bestmatch will be null if the lookup fails.
            // 
                 
            return bestmatch;
            
        }
        
                                                                                
        private static void Load()
        {
            Xom.Trace(XomAreaName.nrTrace, LogLevel.L_HIGH, "NR: Loading name resolution mapping rules from NPDB..." );
            
            // Results array
            ArrayList rules = new ArrayList();
            
            using (SqlClient c = new SqlClient(Interface.npdb))
            {
                c.StoredProc = "p_nr_get_all_mappings";
                c.AddParameter("@vc_environment", Config.Environment);

                SqlDataReader r = c.Execute();
                
                while(r.Read())
                {
                    StorageEndpoint se    = new StorageEndpoint();
                    se.Rule               = r.GetString(0).ToLower();                    
                    
                    byte[] addr;
                    
                    addr                  = IPAddress.Parse(r.GetString(1)).GetAddressBytes();
                    se.PrimaryIP          = ((uint)addr[0]) + ((uint)addr[1] << 8) + ((uint)addr[2] << 16) + ((uint)addr[3] << 24);
                    se.PrimaryPort        = (int) XOService.Storage;
                    se.AlternateIP        = 0;
                    se.AlternatePort      = 0;
                    se.Expiration         = r.GetDateTime(2);
                    
                    if(se.Expiration < DateTime.MinValue || se.Expiration > DateTime.MaxValue)
                    {
                        Xom.NtEvent(XEvent.Id.STFD_MISSING_OR_BAD_CONFIG_3, "Expiration date for rule [" + se.Rule + "] is invalid in NPDB. Setting expiration as immediate.");
                        se.Expiration     = DateTime.UtcNow;
                    }
                    
                    //
                    // flags are ignored for now-- nothing interesting there.
                    // 

                    rules.Add(se);                                            
                }

                if(_rulesList == null)
                {                                      
                    _rulesList = rules;
                    _rulesTable = new Hashtable();
                }            

                Xom.Trace(XomAreaName.nrTrace, LogLevel.L_HIGH, "NR: Successfully loaded " + rules.Count + " mapping rules." );
            }            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\AssemblyInfo.cs ===
using System.Reflection;

[assembly: AssemblyTitle("Xbox Live Storage Module")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\StfdHandler.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 * 
 * Storage Front-Door (stfd)
 * 
 * StfdHandler.cs
 * 
 * Common functionality used by all storage handlers
 * 
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Threading;
using System.Web;
using System.Web.Caching;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;
using Microsoft.Webstore.WstClient;
using xonline.common.config;
using xonline.common.installer;

[assembly: XomIisInstallerAttribute( Interface.stfd_storage )]
[assembly: XomIisInstallerAttribute( Interface.stfd_storage_int )]
[assembly: XomIisInstallerAttribute( Interface.stfd_name_resolution )]
[assembly: XomIisInstallerAttribute( Interface.stfd_name_resolution_int )]
[assembly: ConfigAttribute(Component.stfd)]

// all operations use XomLog to log to this area
[assembly: XomAreaDefinition(XomAreaName.log)]

// trace area for StfdHandler code
[assembly: XomAreaDefinition(XomAreaName.stfdTrace)]

namespace xonline.server.storage.fd 
{

    // -----------------------------------------------------------------------------------
    // Class, for holding constants
    // -----------------------------------------------------------------------------------
    public class StorageFDConstants
    {        
        //Caching Key PerfCounter Instance name for WriteFileAPI
        public const string CacheRemoveInstanceWF = "WriteFile-Remove";


    }


    // StfdHandler
    // Base functionality common to multiple request HTTP handlers
    abstract public class StfdHandler : IHttpHandler
    {
        private bool _verifyAccessTokens
        {
            get
            {
                return Config.GetBoolSetting(Setting.storageFD_verifyAccessTokens);
            }
        }
        
        private bool _allowZeroUserPuidsFromInternet
        {
            get
            {
                return Config.GetBoolSetting(Setting.storageFD_allowZeroUserPuidsFromInternet);
            }
        }
        
        protected static DateTime _firstRequestTime = DateTime.Now;
    
        static StfdHandler()
        {
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(StfdHandler.OnControlRequest);
        }

        // Return the storage operation being performed.  All storage
        // operations should override this.
        public virtual uint GetOperation()
        {
            return (uint) Operation.Undefined;
        }
        
        // IsReusable
        // Returns if this object can be reused. Since the object doesn hold 
        // any state, this method always returns true
        public bool IsReusable
        {
            get { return true; }
        }

        // ProcessRequest
        // Process http request
        abstract public void ProcessRequest(HttpContext ctx);

        internal bool IsAllowed(uint permissions, Allowed allowed)
        {
            return ( (permissions & (uint) allowed) == (uint) allowed );
        }
    
        // CheckPermissions
        internal void CheckPermissions(IStorageRequest req, PathInfo path)
        {
            // check for a userPuid of 0
            if (req.UserPuid == 0 && _allowZeroUserPuidsFromInternet == false)
            {
                HttpContext context = HttpContext.Current;
                if (context != null)
                {
                    string    viface = VirtualInterface.None;
                    
                    if (null != CallSource.Get(context))
                    {
                        viface = (string) CallSource.Get(context);
                                    
                        // userPuid of 0 is only allowed on requests from within the datacenter
                        if (viface != VirtualInterface.stfd_storage_int)
                        {
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: userPuid is 0 and call is from Internet Port");
                            throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_CALL_SOURCE_CHECK, 
                                "StfdHandler.CheckPermissions: userPuid is 0 and call is from Internet Port");                    
                        }
                    }
                }
            }
            
            uint op = GetOperation();
            string opName = ((Operation) op).ToString();
            string featureName = path._domain.Name;
            
            // Perform permission checks
            uint permissions = path._domain._policy._permissions[op];

            try
            {
                // If the operation does not require a signed access token,
                // return an error if it includes one.
                if ( !IsAllowed(permissions, Allowed.UserToken) && !IsAllowed(permissions, Allowed.ServiceToken) && req.Token._signatureSize > 0 )
                {
                    throw new XRLException(
                        HResult.XONLINE_E_STORAGE_INVALID_REQUEST,
                        XEvent.Id.STORAGE_HACK_24,
                        "StfdHandler.CheckPermissions: operation: " + opName + " does not expect a signed token but includes signature.  Request: " + req.ToString());
                }

                if ( permissions == (uint) Allowed.None )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " is not allowed.");
                    throw new Exception("Storage feature: " + featureName + " does not allow operation: " + opName + ".");
                }
                else if ( IsAllowed(permissions, Allowed.All) )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " allowed for everyone.");
                }
                else if ( IsAllowed(permissions, Allowed.Team) )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " allowed for team.");
                    
                    TeamTickets t = req.Tickets;
                    if ( t != null )
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: calling VerifyTickets()...");
                        t.VerifyTickets();
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: calling VerifyMembershipThrow with userId=0x"+req.UserPuid.ToString("X8")+ ", teamId=0x"+path._keyValue.ToString("X8"));
                        t.VerifyMembershipThrow(req.UserPuid, path._keyValue);
                    }
                    else
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " required team ticket missing from request.");
                        throw new Exception("Required team ticket missing from request." );
                    }
                }
                else if ( IsAllowed(permissions, Allowed.Owner) )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " allowed for owner.");
                    
                    SGInfo.VerifyUserId(req.UserPuid);
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " verified user puid: " + req.UserPuid.ToString("x"));

                    // if country id is 0, it means that is not present in
                    // the protocol for that request.
                    if ( req.UserCountryId != 0 )
                    {
                        SGInfo.VerifyUserCountryId(req.UserPuid, req.UserCountryId);
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " verified user country id: " + req.UserCountryId);
                    }
                    else
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " user country id not present in request.");
                    }

                    if ( path._keyType != IdType.UserId || path._keyValue != req.UserPuid )
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " owner puid not part of path: " + path._unparsedPathName);
                        throw new Exception("Only owner 0x" + req.UserPuid.ToString("x") + " is allowed to access file " + path._unparsedPathName );
                    }
                }
                else if ( IsAllowed(permissions, Allowed.UserToken) || IsAllowed(permissions, Allowed.ServiceToken) )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " allowed for " + (IsAllowed(permissions, Allowed.UserToken) ? "user" : "service") + " tokens.");
                    
                    if ( req.Token == null )
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " user access token not present.");
                        throw new Exception("Storage feature: " + path._domain.Name + " requires an access token for operation: " + opName + ".");
                    }
                    if ( req.Token._operation != op )
                    {
                        Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + " operation: " + opName + " service access token not present.");
                        throw new Exception("Storage feature: " + path._domain.Name + ": Requested operation: " + opName + " not granted by access token.  Token grants: " + ((Operation)req.Token._operation).ToString());
                    }
                    if ( IsAllowed(permissions, Allowed.ServiceToken) )
                    {
                        if ( _verifyAccessTokens )
                        {
                            if ( req.Token.SigningService == 0 )
                            {
                                throw new Exception("Storage feature: " + featureName + " requires an access token signed on behalf of a service.");
                            }
                            try
                            {
                                req.Token.VerifySignature();
                            }
                            catch (Exception e)
                            {
                                LogSignatureError(req, e);
                                throw;
                            }
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: service access token signature verified.");
                        }
                    }
                    else if ( IsAllowed(permissions, Allowed.UserToken) )
                    {
                        if ( _verifyAccessTokens )
                        {
                            try
                            {
                                req.Token.VerifySignature((XOService)0);
                            }
                            catch (Exception e)
                            {
                                LogSignatureError(req, e);
                                throw;
                            }
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: user access token signature verified.");
                        }
                    }
                    
                    req.Token.Validate();
                }
                else if ( IsAllowed(permissions, Allowed.ServiceAddr) )
                {
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: feature: " + featureName + ", operation: " + opName + " allowed for datacenter callsource.");
                    HttpContext ctx = HttpContext.Current;
                    if ( ctx != null )
                    {
                        string    viface = VirtualInterface.None;
                        
                        if (null != CallSource.Get(ctx))
                        {
                            viface = CallSource.Get(ctx);
                                        
                            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_ERROR, "CheckPermissions: request arrived on virtual interface: " + viface);
                            
                            if (viface != VirtualInterface.stfd_storage_int)
                            {
                                throw new ExceptionWithEventId (XEvent.Id.STORAGE_HACK_25, "CheckPermissions: Call made to feature: " + featureName + ", operation: " + opName + " on virtual interface:" + viface + " when only data center call source accepted");
                            }
                        }
                    }
                    
                    Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_LOW, "StfdHandler.CheckPermissions: request made to valid datacenter callsource.");
                }
            }
            catch (XRLException)
            {
                throw;
            }
            catch (Exception e)
            {
                throw new XRLException(
                        HResult.XONLINE_E_STORAGE_ACCESS_DENIED,
                        XEvent.Id.STORAGE_HACK_26,
                        "",
                        e);
            }
        }

        // GenerateCacheKey
        internal static string GenerateCacheKey(string path , string operation)
        {
            string key = "[" 
                          + FrontEndApp.CacheTag() 
                          + "]: " 
                          + "[" 
                          + operation  
                          + "]: " 
                          + path;
            return key;
        }

        internal static void CacheAdd(HttpContext ctx, string key, object rfi, int lifetimeSeconds)
        {
            if ( ctx != null )
            {
                ctx.Cache.Add(
                    key,
                    rfi,
                    null,
                    DateTime.Now.AddSeconds(lifetimeSeconds),
                    TimeSpan.Zero,
                    CacheItemPriority.Normal,
                    null);
            }
        }

        
        internal static object CacheGet(HttpContext ctx, string key)
        {
            object rfi = null;
            if ( ctx != null )
            {
                rfi = ctx.Cache.Get(key);
            }
            
            return rfi;
        }

        // LogSignatureError
        protected void LogSignatureError(IStorageRequest req, Exception e)
        {
            // If the signature server returned a specific error,
            // save it and include it in the event message to indicate
            // whether it was a banned xbox, user, title, digest, etc.
            uint xsigHr = HResult.S_OK;

            if ( e is XRLException )
            {
                xsigHr = ((XRLException) e).HResult;
            }
                    
            Xom.Trace(XomAreaName.stfdTrace, LogLevel.L_ERROR, "StfdHandler.CheckPermissions: access token signature invalid.");
            if (xsigHr == HResult.S_OK || xsigHr == HResult.XONLINE_E_STORAGE_ERROR)
            {
                Xom.NtEvent(XEvent.Id.STORAGE_COMM_0, e,
                    "CheckPermissions: failed to validate access token signature is invalid.  This could be an indication of connectivity issues between the storage and signature services or could mean the signature service is unavailable." +
                    "\r\nReqWriteFile: " + req.ToString()
                );
            }
            else
            {
                Xom.NtEvent(XEvent.Id.STORAGE_HACK_27, e,
                    "CheckPermissions: access token signature is invalid.  This could be an indication of a hack attempt." +
                    "\r\nXSig hr = " + ((HResult) xsigHr) +
                    "\r\nReqWriteFile: " + req.ToString()
                );
            }
        }
    
        // ReadDbBlob
        protected static void ReadDbBlob(IDataReader r, int ordinal, byte[] b, int totalBytes)
        {
            for (int bytesRead = 0; bytesRead < totalBytes; )
            {
                bytesRead += (int) r.GetBytes(ordinal, 0, b, bytesRead, totalBytes - bytesRead);
            }
        }

        //
        public static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            string cmd = args.Command.ToLower();
            switch (args.Command)
            {
            case "help":
                XomControlConnection.SendMessage(
                    "Storage Help\r\n" +
                    "\tReloadNpdb        - Reload config data from NPDB\r\n" +
                    "\tUptime            - Uptime since first request\r\n",
                    args.RequestId);
                args.Handled = true;
                break;
            case "reloadnpdb":
                ReloadNpdb(args);
                break;
            case "uptime":
                Uptime(args);
                break;
            }
        }

        protected static void ReloadNpdb(ControlRequestEventArgs args)
        {
            StorageDomainList.ReloadFromDb();
            XomControlConnection.SendMessage(
                "ReloadNpdb: configuration data will be reloaded upon the next request.",
                args.RequestId);
            args.Handled = true;
        }
    
        protected static void Uptime(ControlRequestEventArgs args)
        {
            TimeSpan ts = DateTime.Now - _firstRequestTime;
            string uptimeMsg = "";
            
            if ( ts.Days + ts.Hours + ts.Minutes + ts.Seconds > 0 )
            {
                if ( ts.Days > 0 )
                {
                    uptimeMsg =
                        String.Format("uptime: {0:D} {1}, {2:D2}:{3:D2}:{4:D2}\r\n",
                            ts.Days,
                            (ts.Days > 1 ? "days" : "day"),
                            ts.Hours,
                            ts.Minutes,
                            ts.Seconds);
                }
                else
                {
                    uptimeMsg =
                        String.Format("uptime: {0:D2}:{1:D2}:{2:D2}\r\n",
                            ts.Hours,
                            ts.Minutes,
                            ts.Seconds);
                }
            }
            else
            {
                uptimeMsg =
                    String.Format("uptime: {0:D3} milliseconds\r\n", ts.Milliseconds);
            }
            
            XomControlConnection.SendMessage(
                uptimeMsg,
                args.RequestId);
            args.Handled = true;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\StorageHealthChecks.cs ===
// 
// StorageHealthChecks.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Front Door - HealthCheck
// Xbox Online Service
// 
//

using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Web;
using System.Collections.Specialized;
using System.Globalization;
using xonline.common.health;
using xonline.common.protocol;
using System.Xml;
using System.Collections;
using xonline.common.mgmt;

// trace area for StorageDomain code
[assembly: XomAreaDefinition(XomAreaName.storageHealthTrace)]

namespace xonline.server.storage.fd
{

    public class StorageHealthBlock : IHealthBlock
    {
        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; }
        }
       

        public void DoCheck(
            HealthBlockManager blockManager,
            NameValueCollection blockParams,
            HealthReport        report
        )
        {

                Xom.Trace(XomAreaName.storageHealthTrace, LogLevel.L_NORMAL, "Starting Storage health checks");

                try
                {
                    StorageReport storageReport = new StorageReport(StorageDomainList.DomainHash);
                    report.ExtendedReport = storageReport;
                    report.HealthStatus = HealthStatusEnum.Green;

                }
                catch
                {
                    //report.HealthStatus = HealthStatusEnum.Red;
                    //report.ErrorDetails += e.ToString();

                    throw;
                }



            //On Success
            report.HealthStatus = HealthStatusEnum.Green;

        }
    }


    
    public class StorageReport : IExtendedHealthReport
    {
        public SerializableDictionary< string, StorageDomain> domains = new SerializableDictionary<string,StorageDomain>();

        public StorageReport(Hashtable allDomains)
        {
            foreach (StorageDomain aDomain in allDomains.Values)
            {
                domains.Add(aDomain.Name, (aDomain) );
            }
        }

        //Parameter less contructor for enabling Serialization
        public StorageReport()
        {            
        }

    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\ModuleMgmt.cs ===
// 
// ModuleMgmt.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Module
// Xbox Online Service
//
// Provides XMGMT command handling, output wrappers, etc.
//
//

using System;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.server.storage.common;

[assembly: XomAreaDefinition(XomAreaName.storageModuleTrace)]

namespace xonline.server.storage.module
{


    // -----------------------------------------------------------------------------------
    // ModuleXomCallback class - XMgmt callback handler class
    // -----------------------------------------------------------------------------------
    public class ModuleXomCallback
    {
        private const string c_HelpText = @"
Storage Module help:
  healthcheck -- Returns information about the state of the module
  reloadDefaultPics -- Reloads the default pictures from NPDB
  displayDefaultPicMappings -- Displays the default pics names & their associated file mappings
";

        // -------------------------------------------------------------------------------
        // OnControlRequest - called by XMgmt when a control request is sent
        // -------------------------------------------------------------------------------
        public static void OnControlRequest( object sender, ControlRequestEventArgs args )
        {
            string str = null;
            try
            {
                switch(args.Command)
                {

                case "help":
                    str = c_HelpText;
                    break;

                case "healthcheck":
                    str = StorageModule.HealthCheck();
                    break;

                case "reloaddefaultpics":
                    StorageConstants.LoadDefaultPicMappings();
                    str = String.Format("Succesfully reloaded the default Pics. There are now {0} pictures and {1} mappings", StorageConstants.DefaultPics.Count, StorageConstants.DefaultPicMapping.Count);;
                    break;

                case "displaydefaultpicmappings":
                    str = StorageConstants.DisplayDefaultPicMappings();
                    break;

                }
            }
            catch(Exception e)
            {
                str = "Error: " + e.ToString();
            }

            if (str != null)
            {
                XomControlConnection.SendMessage( str + "\r\n\r\n", args.RequestId );
                args.Handled = true;
            }
        }
    } 


    // -------------------------------------------------------------------------------
    // Trace class - handy wrappers for making tracing prettier and easier
    //
    // Bloody XomTrace macro means I have to copy & paste this class to use different 
    // tracing areas.
    // -------------------------------------------------------------------------------
    internal static class Trace
    {
        internal static void Low(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.storageModuleTrace, LogLevel.L_LOW, Timestamp + String.Format(format, args));
        }

        internal static void Normal(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.storageModuleTrace, LogLevel.L_NORMAL, Timestamp + String.Format(format, args));
        }

        internal static void High(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.storageModuleTrace, LogLevel.L_HIGH, Timestamp + String.Format(format, args));
        }

        internal static void Error(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.storageModuleTrace, LogLevel.L_ERROR, Timestamp + String.Format(format, args));
        }

        private static string Timestamp
        {
            get 
            {
                DateTime dt = DateTime.Now;
                return dt.ToString(@"hh:mm:ss.fff ");
            }
        }


    }



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\PerfCounters.cs ===
// 
// PerfCounters.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Module
// Xbox Online Service
// 
// Author: ganeshg 6/2008
//

using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.storage.module
{
    [XomPerformanceCounterCategoryAttr( "Storage Module", "Xbox Live Storage - Storage Module Performance Counters " )]
    public class StorageModuleCounters : XomPerformanceCounterCategory
    {
        static public StorageModuleCounters Counters = new StorageModuleCounters();

        public virtual StorageModuleCounters this[string instance]
        {
            get
            {
                return (StorageModuleCounters) GetInstance(instance);
            }
        }

        //Instance Counters
        [XomPerformanceCounterAttr(
             "StorageModule: Total instances",
             "Number of active instance of this StorageModule",
             PerformanceCounterType.NumberOfItems64)]
         public PerformanceCounter TotalInstances;


        //Requests Counters
        [XomPerformanceCounterAttr(
             "Requests: In Progress",
             "Number of requests in progress",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsInProgress;

        [XomPerformanceCounterAttr(
             "Requests: Per Sec",
             "Number of requests completed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RequestsPerSec;

        [XomPerformanceCounterAttr(
            "Requests: Total Requests",
            "Total Requests Processed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsTotal;



        //Time Counters
        //[XomPerformanceCounterAttr(
        //     "Requests: Avg. Execution Time",
        //     "Average request execution time in milliseconds",
        //     PerformanceCounterType.AverageTimer32)]
        //public PerformanceCounter AverageExecutionTime;

        //[XomPerformanceCounterAttr(
        //     "Requests: Avg. Execution Time Base",
        //     "Base for the average request excution time",
        //     PerformanceCounterType.AverageBase)]
        //public PerformanceCounter AverageExecutionTimeBase;

        [XomPerformanceCounterAttr(
             "Time: BeginRequest Avg. Execution Time",
             "Average BeginRequest() execution time in milliseconds",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageBeginExecutionTime;

        [XomPerformanceCounterAttr(
             "Time: BeginRequest Avg. Execution Time Base",
             "Base for the average BeginRequest() excution time",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageBeginExecutionTimeBase;

        [XomPerformanceCounterAttr(
             "Time: EndRequest Avg. Execution Time",
             "Average EndRequest() execution time in milliseconds",
         PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageEndExecutionTime;

        [XomPerformanceCounterAttr(
             "Time: EndRequest Avg. Execution Time Base",
             "Base for the average EndRequest() excution time",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageEndExecutionTimeBase;

       


        //Cache Counters
        [XomPerformanceCounterAttr(
            "Cache: Hits",
            "Cache: Hits",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter CacheHits;

        [XomPerformanceCounterAttr(
            "Cache: Misses",
            "Cache: Misses",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter CacheMisses;

        //[XomPerformanceCounterAttr(
        //    "Cache: Avg. Access Time",
        //    "Average access time in milliseconds",
        //     PerformanceCounterType.AverageTimer32)]
        //public PerformanceCounter AverageCacheAccessTime;

        //[XomPerformanceCounterAttr(
        //     "Cache: Avg. Access Time Base",
        //     "Base for the average access time",
        //     PerformanceCounterType.AverageBase)]
        //public PerformanceCounter AverageCacheAccessTimeBase;


        //Response Counters

        [XomPerformanceCounterAttr(
            "Response: 200 OKs Per Second",
            "Response: 200 OKs Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter Response200PerSecond;

        [XomPerformanceCounterAttr(
            "Response: 200 OKs Total",
            "Response: 200 OKs Total",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Response200Total;


        [XomPerformanceCounterAttr(
            "Response: 304 NotModified Per Second",
            "Response: 304 NotModified Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter Response304PerSecond;

        [XomPerformanceCounterAttr(
            "Response: 304 NotModified Total Responses",
            "Response: 304 NotModified Total Responses",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Response304Total;

        [XomPerformanceCounterAttr(
            "Response: 404 Errors Per Second",
            "Response: 404 Errors Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter Response404PerSecond;

        [XomPerformanceCounterAttr(
            "Response: 404 Total Errors",
            "Response: 404 Total Errors",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Response404Total;

        [XomPerformanceCounterAttr(
            "Responses: Non 304 or 404 Per Second",
            "Responses: Non 304 or 404 Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ResponseOtherPerSecond;

        [XomPerformanceCounterAttr(
            "Responses: Non 304 or 404 Total Errors",
            "Responses: Non 304 or 404 Total Errors",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ResponseOtherTotal;

    } 


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\StorageModule.cs ===
//
// ModuleMain.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Module
// Xbox Online Service
//
// Translates the input URL request to a StorageFD call.
//
// Author: ganeshg 6/2008
//

using System;
using System.IO;
using System.Text;
using System.Web;
using System.Net;
using System.Threading;
using System.Diagnostics;
using System.Data.SqlTypes;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Collections.Specialized;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities2;

using xonline.server.storage.common;

[assembly: XomAreaDefinition(XomAreaName.StorageModuleLog)]


namespace xonline.server.storage.module
{

    // "a reference to a volatile field will not be treated as volatile"
    #pragma warning disable 420

    public class RegExpKeys
    {
        public const string DOMAIN = "domain";
        public const string GAMERTAG = "gamertag";
        public const string KEYTYPE = "keytype";
        public const string KEYVAL = "keyval";
        public const string PATH = "path";


    }


    // -----------------------------------------------------------------------------------
    // StorageModule class - the main http module class
    // -----------------------------------------------------------------------------------
    public class StorageModule : IHttpModule
    {

        #region Construction / Handling / Dispose

        public StorageModule()
        {
            StaticInit();

            Trace.Normal("----------------------------------------");
            Trace.Normal("StorageModule instantiated");
            Trace.Normal("----------------------------------------");

            StorageModuleCounters.Counters[StorageModule.AppPoolId].TotalInstances.RawValue = _RefCount;
        }

        public String ModuleName
        {
            get { return "StorageModule"; }
        }

        public void Dispose()
        {
            Trace.Normal("----------------------------------------");
            Trace.Normal("StorageModule disposed");
            Trace.Normal("----------------------------------------");

            InstanceDispose();

        }


        // -------------------------------------------------------------------------------
        // InstanceDispose - the once-per-object-instance dispose routine
        // -------------------------------------------------------------------------------
        private void InstanceDispose()
        {
            if (_IsDisposed)
                return;

            lock (_InstanceDisposeLock)
            {
                if (_IsDisposed)
                    return;


                int refcount = Interlocked.Decrement(ref _RefCount);
                StorageModuleCounters.Counters[StorageModule.AppPoolId].TotalInstances.RawValue = _RefCount;

                if (refcount == 0)
                {
                    XomLoggingControl.Close();
                    PerformanceCounter.CloseSharedResources();
                }

                _IsDisposed = true;
            }
        }


        #endregion Construction / Handling / Dispose



        #region Init

        // -------------------------------------------------------------------------------
        // Init - called by ASP.NET upon init time. We should register for callbacks here if
        // we want to do real work.
        // -------------------------------------------------------------------------------
        public void Init(HttpApplication application)
        {
            Trace.Normal("StorageModule.Init called");

            // Event hooks always need to be added to the application state
            //application.AuthenticateRequest += new EventHandler(this.Application_AuthenticateRequest);
            application.BeginRequest += new System.EventHandler(this.Application_BeginRequest);
            application.EndRequest   += new EventHandler(this.Application_EndRequest);

        }


        // -------------------------------------------------------------------------------
        // StaticInit - the once-per-module init routine
        // -------------------------------------------------------------------------------
        private static void StaticInit()
        {
            if (_RefCount > 0)
            {
                // Add ourself and get out, someone else has already done the initialization
                Interlocked.Increment(ref _RefCount);
                return;
            }

            // We may be one of the first people to come in. Whether we are or not, we want to
            // block until initialization is done.

            lock (_LockObject)
            {
                if (_RefCount > 0)
                {
                    // Someone else snuck in
                    Interlocked.Increment(ref _RefCount);
                    return;
                }

                try
                {

                    // Our events should not retrieve SGInfo. Duh.
                    EventBuilder.ShowSGInfo = false;

                    Trace.Normal("----------------------------------------");
                    Trace.Normal("Initializing XOM controls & performance counters ");
                    Trace.Normal("----------------------------------------");

                    // FEAPP normally does these
                    XomLoggingControl.Init();
                    XomPerformanceCounterCategory.InitPerfCtrs();


                     // regular expression to parse filepaths
                    string filePathRegexSpec = Config.GetSetting(Setting.storageModule_urlPathRegEx);
                    FilePathRegex = new Regex(filePathRegexSpec, RegexOptions.IgnoreCase | RegexOptions.Compiled);

                    //storageModule_urlPathRegEx=
                    //        @"/(?<domain>\w+)"                                  // storage domain
                    //         + @"(/(?<gamertag>\w+))*"                                  // gamertag
                    //         + @"(/(?:"
                    //         + @"(?<keytype>[u]).(?<keyval>[0-9a-z]{1,16})|"  // key type and key value
                    //         + @"(?<keytype>[t]).(?<keyval>[0-9a-f]{1,8})"    // key type and key value
                    //         + @"))*"
                    //         + @"(?<path>/[^\p{Cc}]+)$";                           // pathname (with leading /)


                    Trace.Normal("----------------------------------------");
                    Trace.Normal("StorageModule.StaticInit running");
                    Trace.Normal("----------------------------------------");

                    // Tell XMgmt that we want our handler called for control requests
                    XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(ModuleXomCallback.OnControlRequest);
                }
                catch (Exception e)
                {
                    Xom.NtEvent(
                        XEvent.Id.STORAGE_MODULE_INVALID_CONFIGURATION, e,
                        "Error initializing the StorageModule base components."
                    );

                    throw;
                }

                try
                {
                    string eventMsg = "";

                    //Load any info we want from DB

                    //// Register for setting changes
                    Config.SettingChange += new SettingChangeEventHandler(OnSettingsChanged);
                    Config.MultiSettingChange += new MultiSettingChangeEventHandler(OnMultiSettingsChanged);

                    XBanc.Init();

                    // Done!
                    Interlocked.Increment(ref _RefCount);

                    Xom.NtEvent(XEvent.Id.STORAGE_MODULE_CONFIG_INFO, "Successfully initialized the Storage module.\r\n\r\n" + eventMsg);
                }
                catch (Exception e)
                {
                    Xom.NtEvent(XEvent.Id.STORAGE_MODULE_INVALID_CONFIGURATION, e,
                        "Error initializing the StorageModule specific components."
                    );

                    // Import to release resources, unsubscribe from xmgmt callbacks and clean
                    // up anything we did above. I really hate xmgmt.
                    XomLoggingControl.Close();
                    PerformanceCounter.CloseSharedResources();
                    XomControl.ControlRequestEvent -= new XomControl.ControlRequestEventHandler(ModuleXomCallback.OnControlRequest);

                    throw;
                }
            }
        }




        #endregion Init




        #region HTTP methods



        // -------------------------------------------------------------------------------
        // Application_EndRequest - called at the very end of the request. This will always
        // get called..
        // -------------------------------------------------------------------------------
        private void Application_EndRequest(object source, EventArgs e)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            HttpApplication application = (HttpApplication)source;
            HttpContext ctx = application.Context;
            HttpResponse response = application.Context.Response;


            if (ctx == null)
            {
                Trace.High("Application_EndRequest: HttpContext is null, aborting");
                return;
            }
            if (ctx.Response == null)
            {
                Trace.High("Application_EndRequest: HttpContext Response is null, aborting");
                return;
            }


            //Check for return value and Update XBanc cache
            if (IsStorageCall(ctx))
            {
                int stfdResponseStatusCode = ctx.Response.StatusCode;
                string stfdResponseContentLength = ctx.Response.Headers["Content-Length"];

                try
                {

                    Trace.Normal("Application_EndRequest: ");
                    Trace.Normal("Application_EndRequest: Processing Storage Gateway call");

                    //Check if we called STFD
                    if (IsFileUpdated)
                    {
                        Trace.Normal("Application_EndRequest: Called StorageFD. ");

                        //Update cache only if we got a succesful value & the values are different
                        if ( (response.StatusCode == (int) HttpStatusCode.OK)
                           && (LastModifiedDate.HasValue)
                           && (CachedModifiedDate != LastModifiedDate.Value)
                        )
                        {
                            Trace.Normal("Application_EndRequest: Updating file information Cache ");

                            //Get storage Path
                            if ( String.IsNullOrEmpty(StoragePath) )
                                throw new StorageException(XEvent.Id.STORAGE_MODULE_INTERNAL_ERROR, "Unable to find StoragePath in HTTPContext.Items.");

                            EnumeratedReadFileInfo fi = new EnumeratedReadFileInfo(StoragePath, LastModifiedDate.Value);
                            string keyString = StorageUtils.GetCacheKey(StoragePath);
                            bool enableXbancCaching = Convert.ToBoolean(Config.GetSetting(Setting.storageModule_enableXbancCaching));

                            Trace.Normal("Application_EndRequest: Updating cached entry ");
                            StorageUtils.AddFileInfoToCache(keyString, fi, enableXbancCaching, StorageModuleConstants.CacheAddInstance);
                        }
                    }
                    else
                    {
                        Trace.Normal("Application_EndRequest: Did not call StorageFD. ");

                    }
                    //In the case of Avatar domain, we always need to present an appropriate image
                    if (String.Equals(StorageDomainValue , ProtocolConstants.AvatarDomainName, StringComparison.InvariantCultureIgnoreCase))
                    {

                        //If we called StorageFD and the avatar pic was NOT found.
                        if ((response.StatusCode == (int) HttpStatusCode.NotFound) )
                        {
                            if (StorageConstants.HasDefaultPic(FilePath))
                            {
                                //return 200
                                response.StatusCode = (int)HttpStatusCode.OK;

                                //GetDefaultPic
                                DisplayDefaultPic(application.Context , FilePath);
                            }
                            else
                            {
                                //Return 404
                                response.StatusCode = (int)HttpStatusCode.NotFound;
                            }
                        }

                        //If we had any errors while calling the StorageFD, then return the default image
                        if (response.StatusCode == (int) HttpStatusCode.InternalServerError)
                        {
                            //GetDefaultPic
                            DisplayDefaultPic(application.Context , FilePath);
                        }
                    } else
                    {
                        if (
                            (response.StatusCode == (int) HttpStatusCode.InternalServerError)
                            || (response.StatusCode == (int) HttpStatusCode.NotFound)
                            )
                        {
                            //GetDefaultPic
                            DisplayDefaultPic(application.Context , FilePath);
                        }
                    }

                    Log("STM", ctx , 0, StoragePath, CacheControlHeader, stfdResponseStatusCode, stfdResponseContentLength);

                    Trace.High("Application_EndRequest: Status Code = " + ctx.Response.StatusCode.ToString());
                    Trace.High("Application_EndRequest: ContentEncoding = " + ctx.Response.ContentEncoding.ToString());
                    Trace.High("Application_EndRequest: Content Type= " + ctx.Response.ContentType.ToString());

                }
                catch (Exception ex)
                {
                    HResult hr = HandleErrors(application.Context, ex);
                    Log("STMERR", ctx , hr, StoragePath, CacheControlHeader, stfdResponseStatusCode, stfdResponseContentLength);

                    //Error response
                    application.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

                    //GetDefaultPic
                    DisplayDefaultPic(application.Context , FilePath);

                }

                finally
                {
                  UpdatePerfCounters(ctx, StorageDomainValue, timeElapsed) ;

                }

            }  //IsStorageCall

        }

        private void Application_BeginRequest(object source, EventArgs e)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            //cast the sender to an HttpApplication object
            HttpApplication application = (HttpApplication) source;
            HttpContext ctx = application.Context;

            string fPath = "";
            bool isValidUser = false;

            EnumeratedReadFileInfo fileInfo;
            bool callStorageFD = true;
            string domain = "";

            try
            {
                if (IsStorageCall(ctx) )
                {
                    StorageModuleCounters.Counters.RequestsInProgress.Increment();

                    Trace.Normal("Application_BeginRequest: Processing Storage Call");

                    Validate(ctx.Request);

                    //FixedResponses are used in dire times. In those cases, we dont want to spend cycles calculating the FilePath. Hence using String.Empty
                    if (ReturnFixedResponse(ctx, String.Empty))
                    {
                        Trace.Normal("Application_BeginRequest: Returning fixed response " + ctx.Response.StatusCode.ToString());

                        return;
                    }

                    StoragePath = ConstructStoragePath(ctx.Request.RawUrl, true, out domain, out fPath, out isValidUser);
                    FilePath = fPath;
                    StorageDomainValue = domain;
                    IsValidUser = isValidUser;

                    Trace.Normal("Application_BeginRequest: Storage path = " + StoragePath);

                    string keyString = StorageUtils.GetCacheKey(StoragePath);
                    bool enableXbancCaching = Convert.ToBoolean(Config.GetSetting(Setting.storageModule_enableXbancCaching));

                    //If the user was not found, then we want to return default pic
                    if (!IsValidUser)
                    {
                        callStorageFD = false;

                    }
                    else if (StorageUtils.IsFileInCache(keyString, out fileInfo, enableXbancCaching, StorageModuleConstants.CacheQueryInstance))
                    {
                        StorageModuleCounters.Counters.CacheHits.Increment();
                        if (!String.IsNullOrEmpty(domain))
                            StorageModuleCounters.Counters[domain].CacheHits.Increment();

                        CachedModifiedDate = DateTime.FromFileTimeUtc(fileInfo._modifiedDate);
                        Trace.Normal("Application_BeginRequest: File ({0}) already in cache with a TimeStamp of {1}.", keyString, CachedModifiedDate);

                        //Parse cached info & Compare against IfModifiedSince value
                        if (DateTime.FromFileTimeUtc(fileInfo._modifiedDate) <= GetHTTPHeaderIfModifiedSince(ctx.Request))
                        {
                            //File has not been modified since the caller last saw it. Return 304
                            ctx.Response.StatusCode = (int)HttpStatusCode.NotModified;
                            Trace.Normal("Application_BeginRequest: File NOT modified. Returning 304");

                            //Bypass AuthSG
                            callStorageFD = false;
                            application.CompleteRequest();
                        }
                    } else
                    {
                        StorageModuleCounters.Counters.CacheMisses.Increment();
                        if (!String.IsNullOrEmpty(domain))
                            StorageModuleCounters.Counters[domain].CacheMisses.Increment();
                    }

                    if (callStorageFD)
                    {

                        IsFileUpdated = true;

                        //Create Request
                        string queryString = BuildRequestQuery(StoragePath, application.Request);
                        Trace.Normal("Application_BeginRequest: Calling StorageFD with query=" + queryString);

                        //Rewrite URL as required
                        RewriteURL(application, queryString);

                    }
                    else
                    {
                        IsFileUpdated  = false;
                    }
                }
            }
            catch (Exception ex)
            {
                HResult hr = HandleErrors(application.Context, ex);
                Log("STMERR", ctx , hr, StoragePath, CacheControlHeader, 0, string.Empty);

                //Error response
                application.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

                //Bypass AuthSG
                callStorageFD = false;
                IsFileUpdated = false;
                application.CompleteRequest();

                //GetDefaultPic
                DisplayDefaultPic(application.Context,FilePath);
            }
            finally
            {
                StorageModuleCounters.Counters.AverageBeginExecutionTimeBase.Increment();
                StorageModuleCounters.Counters.AverageBeginExecutionTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
            }

        }

        private static void DisplayDefaultPic(HttpContext ctx, string filePath)
        {
            byte[] blob = StorageConstants.GetDefaultPic(filePath);

            BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);

            if ( (blob != null ) && (blob.Length != 0) )
            {
                // The Storage FD may have already set Content-Length in its response.
                // If that is the case, we need to clear it so that HttpResponse can
                // generate the proper Content-Length itself after we write the default
                // image.
                ctx.Response.Headers.Remove("Content-Length");
                writer.Write(blob);
            }

            string ContentTypeValue = Config.GetSetting(Setting.storageFD_httpContentTypeHeader); 
            ctx.Response.AppendHeader(HTTPHeaders.ContentType, ContentTypeValue);
        }


        // -------------------------------------------------------------------------------
        // CompleteRequest - aborts a request and returns a result to the client.
        // -------------------------------------------------------------------------------
        private static void CompleteRequest(HttpApplication application)
        {
            application.CompleteRequest();
        }


        #endregion HTTP methods



        private static bool ReturnFixedResponse(HttpContext ctx, string filePath)
        {
            string responseValue = Config.GetSetting(Setting.storageModule_returnFixedResponseCodeForAllCalls);
            if (String.IsNullOrEmpty(responseValue))
            {
                return false;
            }
            else
            {
                try
                {
                    ctx.Response.StatusCode = Convert.ToInt32(responseValue);

                    //GetDefaultPic
                    DisplayDefaultPic(ctx, filePath);

                }
                catch
                {
                    Xom.NtEvent(XEvent.Id.STORAGE_MODULE_INVALID_CONFIGURATION, 
                        "Incorrect value for setting storageModule_returnFixedResponseCodeForAllCalls = " + responseValue
                    );

                    return false;
                }

                return true;
            }
        }

        private static bool IsStorageCall(HttpContext ctx)
        {
            if (ctx.Items.Contains(StorageModuleConstants.IsStoragePathKey))
            {
                return Convert.ToBoolean(ctx.Items[StorageModuleConstants.IsStoragePathKey]);
            }
            else
            {
                string lowerPath = ctx.Request.Path.ToLower();
                // allow specific routes with the word "avatar" to go through the router, but don't mess up any valid gamertags.
                // is there a reason we do not use the lower version of "avatar" or "global"? currently "avatar" and "Avatar" have different behavior.
                bool value = (((!lowerPath.Contains("/users/xuid(") && !lowerPath.Contains("/users/batch") && !lowerPath.Contains("/avatar/renderer")) 
                                && ctx.Request.Path.Contains("avatar"))
                        || ctx.Request.Path.Contains("global"));

                ctx.Items[StorageModuleConstants.IsStoragePathKey] = value.ToString();
                return value;
            }
        }



        private void Validate(HttpRequest httpRequest)
        {
            int maxLen = Convert.ToInt32( Config.GetSetting(Setting.storageModule_maxUrlLength)) ;
            if (httpRequest.Path.Length > maxLen )
            {
                Trace.Normal("PathLength Validation failed");

                throw new ArgumentException("Path longer than " + maxLen.ToString());
            }

        }

        private static string BuildRequestQuery(string storagePath, HttpRequest request)
        {
            uint titleID = 0xFFFE0800; //4294838272
            uint titleVersion = 0;
            bool sendXRLResponse = false;

            //For HTTP Headers see - http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            DateTime modifiedSinceDate = GetHTTPHeaderIfModifiedSince(request);

            StringBuilder queryString = new StringBuilder();
            queryString.Append(EnumeratedReadFileParameters.PathName + "=" + HttpUtility.UrlEncode(storagePath) );
            queryString.Append("&" + EnumeratedReadFileParameters.PathNameSize + "=" + storagePath.Length.ToString());
            queryString.Append("&" + EnumeratedReadFileParameters.IfModifiedSince + "=" + HttpUtility.UrlEncode(modifiedSinceDate.ToString()));
            queryString.Append("&" + EnumeratedReadFileParameters.TitleId + "=" + titleID.ToString());
            queryString.Append("&" + EnumeratedReadFileParameters.TitleVersion + "=" + titleVersion.ToString());
            queryString.Append("&" + EnumeratedReadFileParameters.SendXRLResponse + "=" + Convert.ToString(sendXRLResponse));

            return queryString.ToString();

        }


        private static DateTime GetHTTPHeaderIfModifiedSince(HttpRequest request)
        {
            DateTime modifiedSinceDate = SqlDateTime.MinValue.Value;

            try
            {
                if (request.Headers[HTTPHeaders.IfModifiedSince] != null)
                {
                    modifiedSinceDate = Convert.ToDateTime(request.Headers[HTTPHeaders.IfModifiedSince].Split(new char[] {';'})[0]);
                }
            }
            catch  // eat the exception and just use min date
            {
            }

            return modifiedSinceDate;
        }




        public static string ConstructStoragePath(string path, bool replaceUserInfo , out string domain , out string fPath, out bool isValidUser)
        {
            //StorageDomain avatarDomain = StorageDomainList.GetDomain(StorageDomainConstants.AVATAR);
            Dictionary<string, string> dict = new Dictionary<string, string>();
            string filePath, gamertag, keyType, keyVal;
            string pathName = "";
            fPath = "";
            isValidUser = true;

            //Extract info from path
            string decodedPath = DecodePath(path);

            try
            {

                dict = Parse(decodedPath);
                dict.TryGetValue(RegExpKeys.DOMAIN, out domain);
                dict.TryGetValue(RegExpKeys.PATH, out filePath);
                dict.TryGetValue(RegExpKeys.GAMERTAG, out gamertag);
                dict.TryGetValue(RegExpKeys.KEYTYPE, out keyType);
                dict.TryGetValue(RegExpKeys.KEYVAL, out keyVal);

                Validations.IsNullOrEmpty(domain, RegExpKeys.DOMAIN);
                Validations.IsNullOrEmpty(filePath, RegExpKeys.PATH);
                Validations.IsNullOrEmpty(gamertag, keyVal, RegExpKeys.KEYVAL);
                Validations.IsNullOrEmpty(gamertag, keyType, RegExpKeys.KEYTYPE);

                fPath = filePath;

                foreach (string s in Config.GetMultiSetting(MultiSetting.storageModule_urlFilePathExclusionSet))
                {
                    if (filePath.StartsWith(s))
                    {
                        throw new ArgumentException("Invalid path : " + pathName);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_STORAGE_CANNOT_FIND_PATH,
                    ex,
                    "Invalid Path" + pathName
                    );
            }

            if (String.Equals(domain, ProtocolConstants.AvatarDomainName, StringComparison.InvariantCultureIgnoreCase))
            {
                //Avatar domain - "//avatar/u:xuid/avatar-body.png"

                string userId = "";

                if (replaceUserInfo)
                {
                    if (String.IsNullOrEmpty(gamertag))
                        throw new ArgumentException("Invalid path. Gamertag missing");

                    XCacheUserResponseData userInfo = XCache.LookupUserByGamertag(gamertag);

                    if (( userInfo != null) && (userInfo.qwUserID != 0) )
                    {
                        //Valid gamertag
                        userId = userInfo.qwUserID.ToString("X");

                    } else
                    {
                        //Invalid GamerTag - just return 200 & the default pic
                        isValidUser = false;
                        userId = "0X0";
                    }
                }
                else
                {
                    userId = gamertag;
                }

                //  "//avatar/u:UserId/avatar-body.png";
                pathName = "//" + domain
                           + "/u:" + userId
                           + filePath;
            }
            else
            {
                //Non Avatar domains -   "//global/t:fffe07d1/mediasite.xzp"
                if (String.IsNullOrEmpty(domain))
                    throw new ArgumentException("Invalid path. Domain missing");

                if (String.IsNullOrEmpty(keyVal))
                    throw new ArgumentException("Invalid path. Key missing");

                pathName = "//" + domain
                           + "/" + keyType
                           + ":" + keyVal
                           + filePath;
            }

            return pathName;

        }


        internal static Dictionary<string, string> Parse(string pathName)
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();

            Match pathMatch = FilePathRegex.Match(pathName);

            if (pathMatch.Success)
            {
                Trace.Normal("Parse: Request Path matched a storage path ");

                dict.Add(RegExpKeys.DOMAIN, pathMatch.Groups["domain"].Value.ToLower());
                dict.Add(RegExpKeys.GAMERTAG, pathMatch.Groups["gamertag"].Value.ToLower());
                dict.Add(RegExpKeys.KEYTYPE, pathMatch.Groups["keytype"].Value.ToLower());
                dict.Add(RegExpKeys.KEYVAL, pathMatch.Groups["keyval"].Value.ToLower());
                dict.Add(RegExpKeys.PATH, pathMatch.Groups["path"].Value.ToLower());

            }
            else
            {
                throw new ArgumentException("Invalid path : " + pathName);
            }


            return dict;

        }


        private static string DecodePath(string path)
        {
            //If replacement char is Null ignore and return path
            string replaceStr = Config.GetSetting(Setting.storageModule_urlStringToReplace);
            string newStr = Config.GetSetting(Setting.storageModule_urlReplacementString);

            if (String.IsNullOrEmpty(replaceStr))
                return path;
            else
            {
                Trace.Normal("Replacing character " + replaceStr + " with " + newStr);
                return path.Replace(replaceStr, newStr);
            }

        }

        private static void RewriteURL(HttpApplication Appl, string query)
        {
            // Redirecting to "/stfd/EnumeratedReadFile.ashx";
            string newPath = Config.GetSetting(Setting.storageModule_urlRedirectPath);

            Trace.Normal("Rewriting URL. Old Url=" + Appl.Request.Url.ToString() + " New Url=" + newPath);

            Appl.Context.RewritePath(newPath, "", query);
        }




        // -------------------------------------------------------------------------------
        // HandleError - called to handle exceptions
        // -------------------------------------------------------------------------------

        private static HResult HandleErrors(HttpContext ctx, Exception ex)
        {
            if (ctx == null || ex == null)
            {
                return HResult.S_OK;
            }

            StringBuilder eventText = new StringBuilder();
            eventText.Append("\r\n------------");
            eventText.Append("\r\nRequest URL Path: ");
            eventText.Append(ctx.Request.Url.ToString());
            eventText.Append("\r\n------------");

            string msg = "";
            bool fireEvent = true;
            HResult hr = HResult.XONLINE_E_STORAGE_ERROR;
            XEvent.Id eventId = XEvent.Id.STORAGE_DEFAULT_EVENT;


            try
            {
                Trace.Error("StorageModule: Unhandled exception: {0}", ex.Message);

                msg = ex.Message;

                if (ex is ExceptionWithEvent)
                {
                    eventId = ((ExceptionWithEvent)ex).EventId;

                    // grab the hr
                    if (ex is XRLException)
                    {
                        hr = ((XRLException)ex).HResult;
                    }
                }
                else if (ex is ExceptionWithoutEvent)
                {
                    fireEvent = false;

                }
            }
            catch (Exception ex2)
            {
                eventText.Append("\r\n******************\r\n");
                eventText.Append("A new exception was thrown in the global error handler!\r\n");
                eventText.Append(ex2.ToString());
                eventText.Append("\r\n******************\r\n");

                fireEvent = true;
            }
            finally
            {
                msg = msg + eventText.ToString();
                Trace.Error("StorageModule: Error: {0}", msg);

                if (fireEvent)
                {
                    Xom.NtDataDynEvent(eventId, ex, null, msg);
                }

            }

            return hr;
        }


        private static void UpdatePerfCounters(HttpContext ctx, string instance, XomRequestTimeElapsed timeElapsed )
        {
            int statusCode = ctx.Response.StatusCode;

            StorageModuleCounters.Counters.RequestsInProgress.Decrement();
            StorageModuleCounters.Counters.RequestsPerSec.Increment();
            StorageModuleCounters.Counters.RequestsTotal.Increment();

            StorageModuleCounters.Counters.AverageEndExecutionTimeBase.Increment();
            StorageModuleCounters.Counters.AverageEndExecutionTime.IncrementBy(timeElapsed.TimeElapsed * 1000);

            //Instance counters
            if (!String.IsNullOrEmpty(instance))
            {
                StorageModuleCounters.Counters[instance].RequestsPerSec.Increment();
                StorageModuleCounters.Counters[instance].RequestsTotal.Increment();
            }

            //Response Counters
            if ( statusCode == (int) HttpStatusCode.OK)
            {
                //Counters: Update 200
                StorageModuleCounters.Counters.Response200PerSecond.Increment();
                StorageModuleCounters.Counters.Response200Total.Increment();

                if (!String.IsNullOrEmpty(instance))
                {
                    StorageModuleCounters.Counters[instance].Response200PerSecond.Increment();
                    StorageModuleCounters.Counters[instance].Response200Total.Increment();
                }
            }
            else if ( statusCode == (int) HttpStatusCode.NotModified)
            {
                //Counters: Update 304
                StorageModuleCounters.Counters.Response304PerSecond.Increment();
                StorageModuleCounters.Counters.Response304Total.Increment();

                if (!String.IsNullOrEmpty(instance))
                {
                    StorageModuleCounters.Counters[instance].Response304PerSecond.Increment();
                    StorageModuleCounters.Counters[instance].Response304Total.Increment();
                }
            }
            else if ( statusCode == (int) HttpStatusCode.NotFound)
            {
                //Counters: Update 404
                StorageModuleCounters.Counters.Response404PerSecond.Increment();
                StorageModuleCounters.Counters.Response404Total.Increment();

                if (!String.IsNullOrEmpty(instance))
                {
                    StorageModuleCounters.Counters[instance].Response404PerSecond.Increment();
                    StorageModuleCounters.Counters[instance].Response404Total.Increment();
                }
            }
            else
            {
                //Counters: Update Others
                StorageModuleCounters.Counters.ResponseOtherPerSecond.Increment();
                StorageModuleCounters.Counters.ResponseOtherTotal.Increment();

                if (!String.IsNullOrEmpty(instance))
                {
                    StorageModuleCounters.Counters[instance].ResponseOtherPerSecond.Increment();
                    StorageModuleCounters.Counters[instance].ResponseOtherTotal.Increment();
                }
            }
        }


        private void Log(
            string key,
            HttpContext ctx,
            HResult hr,
            string storagePath,
            string cacheHeader,
            int stfdResponseStatusCode,
            string stfdResponseContentLength)
        {
            XomRequestTimeElapsed elapsedTime = new XomRequestTimeElapsed();


            // Logfile
            string[] fields = new string[]
            {
                // Log fields:
                // STM | clientip | rawurl
                // | storage path | redirected url | redirected Port
                // | IsValidUser | IsFileUpdated
                // | STFD status code | STFD response Content-Length
                // | statuscode | cache header | hr | time elapsed(ms)

                key,
                ctx.Request.UserHostAddress,
                ctx.Request.RawUrl,
                storagePath,
                ctx.Request.Url.AbsolutePath,
                ctx.Request.Url.Port.ToString(),
                this.IsValidUser.ToString(),
                this.IsFileUpdated.ToString(),
                stfdResponseStatusCode.ToString(),
                stfdResponseContentLength,
                ctx.Response.StatusCode.ToString(),
                cacheHeader,
//                ctx.Response.ExpiresAbsolute.ToString(),
                hr.ToString(),
                elapsedTime.MillisecondsElapsed.ToString()
            };
            string szLog = String.Join("|", fields);


            //logging
            Xom.Log("StorageModuleLog" , szLog);

        }


        // -------------------------------------------------------------------------
        // OnSettingsChanged - handles changes to npdb settings
        // -------------------------------------------------------------------------
        public static void OnSettingsChanged(object sender, SettingChangeEventArgs eventArgs)
        {
            // If we fail to parse, we'll throw an exception, which is how we tell Config we rejected the setting.
            switch (eventArgs.Setting)
            {
                case Setting.storageModule_enableXbancCaching:
                    break;

                case Setting.storageModule_urlPathRegEx:
                    string filePathRegexSpec = eventArgs.ValueNew;
                    StorageModule.FilePathRegex = new Regex(filePathRegexSpec, RegexOptions.IgnoreCase | RegexOptions.Compiled);
                    break;

            }


        }



        // -------------------------------------------------------------------------
        // OnMultiSettingsChanged - handles changes to npdb multi settings
        // -------------------------------------------------------------------------
        public static void OnMultiSettingsChanged(object sender, MultiSettingChangeEventArgs eventArgs)
        {
            switch (eventArgs.MultiSetting)
            {
                case MultiSetting.storageModule_DefaultAvatarPicBody:
                case MultiSetting.storageModule_DefaultAvatarPicLarge:
                case MultiSetting.storageModule_DefaultAvatarPicSmall:
                    StorageConstants.LoadDefaultPicMappings();
                    break;


            }

        }


        // -------------------------------------------------------------------------------
        // Status - are we in a good state?
        // -------------------------------------------------------------------------------
        internal static string HealthCheck()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("\r\n");
            sb.AppendFormat("AppPoolId     : {0}\r\n", AppPoolId);
            sb.AppendFormat("Returning fixed value    : {0}\r\n", Config.GetSetting(Setting.storageModule_returnFixedResponseCodeForAllCalls));
            sb.AppendFormat("RegEx for parsing storage paths : {0}\r\n", Config.GetSetting(Setting.storageModule_urlPathRegEx));

            return sb.ToString();
        }


        #region Properties

        // -------------------------------------------------------------------------------
        // Static properties to access HttpApplication, HttpContext, etc items
        // -------------------------------------------------------------------------------

        internal bool IsFileUpdated
        {
            set { HttpContext.Current.Items[StorageModuleConstants.FileUpdatedFromFDKey] = value; }
            get
            {
                if (HttpContext.Current.Items.Contains(StorageModuleConstants.FileUpdatedFromFDKey))
                    return (Convert.ToBoolean(HttpContext.Current.Items[StorageModuleConstants.FileUpdatedFromFDKey]));
                else
                    return false;
            }
        }

        internal DateTime CachedModifiedDate
        {
            set { HttpContext.Current.Items[StorageModuleConstants.CachedFileInfoModifiedDateKey] = value; }
            get
            {
                //Get the FileTimeStamp if it was in the cache

                if (HttpContext.Current.Items.Contains(StorageModuleConstants.CachedFileInfoModifiedDateKey))
                    return (Convert.ToDateTime(HttpContext.Current.Items[StorageModuleConstants.CachedFileInfoModifiedDateKey]));
                else
                    return DateTime.MinValue;
            }
        }


        internal DateTime? LastModifiedDate
        {
            set { HttpContext.Current.Items[HttpResponseHeader.LastModified] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(HttpResponseHeader.LastModified))
                    return (Convert.ToDateTime(HttpContext.Current.Items[HttpResponseHeader.LastModified]));
                else
                    return null;
            }
        }


        internal string CacheControlHeader
        {
            set { HttpContext.Current.Items[HttpResponseHeader.CacheControl] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(HttpResponseHeader.CacheControl))
                    return (string) (HttpContext.Current.Items[HttpResponseHeader.CacheControl]);
                else
                    return String.Empty;
            }
        }


        internal string StoragePath
        {
            set { HttpContext.Current.Items[StorageModuleConstants.StoragePathKey] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(StorageModuleConstants.StoragePathKey))
                    return (string)(HttpContext.Current.Items[StorageModuleConstants.StoragePathKey]);
                else
                    return null;
            }
        }


        internal string FilePath
        {
            set { HttpContext.Current.Items[StorageModuleConstants.FilePathKey] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(StorageModuleConstants.FilePathKey))
                    return (string)(HttpContext.Current.Items[StorageModuleConstants.FilePathKey]);
                else
                    return String.Empty;
            }
        }


        internal bool IsValidUser
        {
            set { HttpContext.Current.Items[StorageModuleConstants.ReturnDefaultPicKey] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(StorageModuleConstants.ReturnDefaultPicKey))
                    return (bool)(HttpContext.Current.Items[StorageModuleConstants.ReturnDefaultPicKey]);
                else
                    return false;
            }
        }


        internal string StorageDomainValue
        {
            set { HttpContext.Current.Items[StorageModuleConstants.StorageDomainKey] = value; }
            get
            {
                //Get the LastModified
                if (HttpContext.Current.Items.Contains(StorageModuleConstants.StorageDomainKey))
                    return (string)(HttpContext.Current.Items[StorageModuleConstants.StorageDomainKey]);
                else
                    return null;
            }
        }



        internal static string AppPoolId
        {
            get
            {
                if (_AppPoolId == null)
                {
                    // Get name of app pool to use as instance name in global counters. No
                    // need to worry about multi-threaded problems here, we can stomp this all
                    // we want. We have to use the env variable because the httprequest isn't
                    // available when we are initializing some perf counters.
                    _AppPoolId = Environment.GetEnvironmentVariable("APP_POOL_ID");
                }
                return _AppPoolId;
            }
        }

        // Static vars

        private static object _LockObject = new object();
        private static volatile int _RefCount = 0;
        private static string _AppPoolId = null;
        public static volatile Regex FilePathRegex = null;

        // Instance vars

        private object _InstanceDisposeLock = new object();
        private volatile bool _IsDisposed = false;

        #endregion Properties


    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\StorageModuleSimple.cs ===
// 
// ModuleMain.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Module
// Xbox Online Service
//
// Translates the input URL request to a StorageFD call.
// 
// Author: ganeshg 6/2008
//

using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Web;
using System.Diagnostics;



namespace xonline.server.storage.module
{


    // -----------------------------------------------------------------------------------
    // StorageModule class - the main http module class
    // -----------------------------------------------------------------------------------
    public class StorageModuleSimple : IHttpModule
    {
        public void Dispose()
        {

        }



        #region Init

        // -------------------------------------------------------------------------------
        // Init - called by ASP.NET upon init time. We should register for callbacks here if 
        // we want to do real work.  Seems to be called when this object is instantiated, 
        // which is not for every call.
        // -------------------------------------------------------------------------------
        public void Init(HttpApplication application)
        {
            // Event hooks always need to be added to the application state
            //application.AuthenticateRequest += new EventHandler(this.Application_AuthenticateRequest);
            application.BeginRequest += new System.EventHandler(this.Application_BeginRequest);
            //application.EndRequest   += new EventHandler(this.Application_EndRequest);
        }



        #endregion Init




        #region HTTP methods

        private void Application_BeginRequest(object source, EventArgs e)
        {
            //cast the sender to an HttpApplication object
            HttpApplication Appl = (HttpApplication) source;
            
            //load the settings in
            //NameValueCollection SimpleSettings = (NameValueCollection) System.Configuration.ConfigurationSettings.GetConfig("Rewrite.NET/SimpleSettings");



            //see if we have a match
            Appl.Context.RewritePath("test.asmx");
                // if (Appl.Request.Path.ToLower() == source.ToLower())
                   

      
        }




        #endregion HTTP methods


    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\fd\WriteFile.cs ===
/*
 * Copyright (c) 2003 Microsoft Corporation
 *
 * Storage Front-Door (stfd)
 *
 * WriteFile.cs
 *
 * Implementation of WriteFile request
 *
 * */

using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Web;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.server.storage.common;

[assembly: XomAreaDefinition(XomAreaName.wrfTrace)]

namespace xonline.server.storage.fd
{
    // WriteFile
    // HTTP handler for WriteFile request
    public class WriteFile : StfdHandler
    {
        // The WriteFile operation can take longer than the default timeout
        // of 10 seconds when writing very large files (10 MB or more).  Use
        // a separate config setting to determine the timeout setting for the
        // calling the stored procedure to write a file.  This timeout value
        // is specified in seconds.
        private int _writeFileSqlTimeout
        {
            get
            {
                string s = Config.GetSetting(Setting.storageFD_writeFileSqlTimeout);
                return Int32.Parse(s);
            }
        }

        // Operation
        public override uint GetOperation()
        {
            return (uint) Operation.FileWrite;
        }

        // ProcessRequest
        // Process http request
        public override void ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            CallSource.Check(VirtualInterface.stfd_storage, VirtualInterface.stfd_storage_int);

            try
            {
                StorageCounters.Counters.WriteFileCurrent.Increment();
                SGInfo.VerifyServiceId(XOService.Storage);
                _ProcessRequest(ctx);
            }
            catch (System.Exception)
            {
                throw;
            }
            finally
            {
                StorageCounters.Counters.WriteFileCurrent.Decrement();

                StorageCounters.Counters.WriteFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.WriteFileAvgTimeBase.Increment();
            }
        }

        public void _ProcessRequest(HttpContext ctx)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ReqHdrWriteFile req = new ReqHdrWriteFile();

            string pathName = "";
            PathInfo path = null;

            HResult hr = HResult.S_OK;
            string instance = null;

            Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_NORMAL, "WriteFile: entered.");

            try
            {
                byte[]          blob    = null;
                BinaryReader    reader  = new BinaryReader(ctx.Request.InputStream);
                BinaryWriter    writer  = new BinaryWriter(ctx.Response.OutputStream);

                // Parse request header
                try
                {
                    req.ReadFrom(reader);
                    Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_NORMAL, "WriteFile: request parsed:" + req.ToString());
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STFD_INVALID_REQUEST_2, e, "Invalid WriteFile request.");

                    goto lDone;
                }

                // Parse and validate pathname
                try
                {
                    path = PathInfo.Parse(req._accessToken._pathName);
                    instance = path.Domain.Name;

                    path.Validate(req);
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_PATH;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_29, e,
                        "WriteFile: invalid pathName: " + req._accessToken._pathName +
                        "\r\nReqHdrWriteFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // Extract the pathname
                pathName = path.PathName;

                // Access Control check
                CheckPermissions(req, path);

                // Security check
                try
                {
                    if (req._accessToken._xboxPuid != 0) SGInfo.VerifyMachineId(req._accessToken._xboxPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserId(req._accessToken._userPuid);
                    if (req._accessToken._userPuid != 0) SGInfo.VerifyUserCountryId(req._accessToken._userPuid, req._userCountryId);

                    SGInfo.VerifyTitleIdOrAlternate(req._titleId);
                    SGInfo.VerifyTitleVersion(req._titleVersion);
                }
                catch(Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    }

                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_5, e,
                        "Invalid WriteFile request: " +
                        "\r\nReqWriteFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // Check maximum file size
                if (req._blobSize > path.Domain.Policy.MaxFileSize)
                {
                    hr = HResult.XONLINE_E_STORAGE_FILE_IS_TOO_BIG;
                    Xom.NtEvent(XEvent.Id.STFD_FILE_TOO_BIG, "Invalid WriteFile request: _uiBlobSize ("+req._blobSize+") > "+
                        "maxFileSize("+path.Domain.Policy.MaxFileSize+")"+
                        "\r\nReqWriteFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Validate the request and perform consistency checks.
                try
                {
                    req.Validate();
                }
                catch (Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_INVALID_ACCESS_TOKEN;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_31,
                        "WriteFile: AccessToken.Validate threw exception." +
                        "\r\nReqWriteFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Make sure token grants FileWrite permission
                if ( (ushort) Operation.FileWrite != req._accessToken._operation )
                {
                    hr = HResult.XONLINE_E_STORAGE_ACCESS_DENIED;
                    Xom.NtEvent(XEvent.Id.STFD_SECURITY_ERROR_6, 
                        "WriteFile reqested; Access Token allows: " + ((Operation) req._accessToken._operation) +
                        "\r\nReqWriteFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // Check against maximum size in AccessToken (if present)
                if ( req._blobSize > req._accessToken._maxFileSize )
                {
                    hr = HResult.XONLINE_E_STORAGE_FILE_IS_TOO_BIG;
                    Xom.NtEvent(XEvent.Id.STFD_FILE_TOO_BIG_1, "Invalid WriteFile request: _uiBlobSize ("+req._blobSize+") > "+
                        "maxFileSize("+req._accessToken._maxFileSize+")"+
                        "\r\nReqWriteFile: " + req.ToString()
                    );

                    goto lDone;
                }

                // Read blob from stream
                try
                {
                    blob = reader.ReadBytes((int)req._blobSize);
                    if ( blob.Length < req._blobSize )
                    {
                        throw new Exception(String.Format("WriteFile: incomplete upload: expected: {0} bytes and only received: {1} bytes.", req._blobSize, blob.Length));
                    }
                }
                catch(Exception e)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STFD_INVALID_REQUEST_3, e,
                        "Invalid WriteFile request." +
                        "\r\nReqWriteFile: " + req.ToString()
                    );
                    goto lDone;
                }

                // If the request contains more data than advertised, throw
                // an event and fail with XONLINE_E_STORAGE_INVALID_REQUEST
                // error.
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "HttpRequest.ContentLength: " + ctx.Request.ContentLength);
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, String.Format("Reader consumed bytes" + reader.BaseStream.Position));

                if ( ctx.Request.ContentLength != reader.BaseStream.Position)
                {
                    hr = HResult.XONLINE_E_STORAGE_INVALID_REQUEST;
                    Xom.NtEvent(XEvent.Id.STORAGE_HACK_34,
                        "ContentLength indicates more data was sent ({0} bytes) than is expected ({1} bytes).  This may be evidence of an attempted buffer overflow attack.\r\nReq: {2}",
                        ctx.Request.ContentLength, reader.BaseStream.Position, req.ToString()
                    );
                    goto lDone;
                }

                // Write blob to the database
                try
                {
                    DbWriteFile(path.Domain, path.KeyType, path.KeyValue, pathName, req, blob);
                }
                catch(Exception e)
                {
                    if ( e is XRLException )
                    {
                        hr = ((XRLException) e).HResult;
                    }
                    else
                    {
                        hr = HResult.XONLINE_E_STORAGE_ERROR;
                    }

                    Xom.NtEvent(XEvent.Id.STORAGE_CODE_5, e,
                        "WriteFile failed: " +
                        "\r\nReqWriteFile: " + req.ToString()
                    );
                    goto lDone;
                }

                //For Avatar domains. Invalidate the cache 
                if ( path.Domain.Id == StorageDomainConstants.AVATAR)
                {
                    string keyString = StorageUtils.GetCacheKey(String.Format("//{0}/{1}:{2}{3}", path.Domain._name.ToLower(), path.KeyType.ToString().ToLower().Substring(0,1), path.KeyValue.ToString("X8"), pathName.ToLower()));
                    bool enableXbancCaching = Convert.ToBoolean(Config.GetSetting(Setting.storageModule_enableXbancCaching));
                    StorageUtils.RemoveFileFromCache(keyString, enableXbancCaching, StorageFDConstants.CacheRemoveInstanceWF);
                    Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_NORMAL, "WriteFile: Removed Avatar from XBanc: {0}", keyString);
                }

                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_NORMAL, "WriteFile: completed successfully.");
                StorageCounters.Counters.WriteFileTotal.Increment();
                StorageCounters.Counters.WriteFilePerSecond.Increment();
                StorageCounters.Counters.WriteFileTotalBytes.IncrementBy(blob.Length);
                StorageCounters.Counters.WriteFileBytesPerSecond.IncrementBy(blob.Length);
                StorageCounters.Counters.WriteFileAvgBytes.IncrementBy(blob.Length);
                StorageCounters.Counters.WriteFileAvgBytesBase.Increment();

                Debug.Assert( instance != null && instance.Length > 0 );
                Storag